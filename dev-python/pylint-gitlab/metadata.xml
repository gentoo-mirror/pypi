<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pylint-gitlab[![pipeline status](https://gitlab.com/smueller18/pylint-gitlab/badges/master/pipeline.svg)](https://gitlab.com/smueller18/pylint-gitlab/commits/master)[![coverage](https://gitlab.com/smueller18/pylint-gitlab/badges/master/coverage.svg)](https://smueller18.gitlab.io/pylint-gitlab/coverage/)[![pylint](https://smueller18.gitlab.io/pylint-gitlab/badges/pylint.svg)](https://smueller18.gitlab.io/pylint-gitlab/lint/)[![pip](https://img.shields.io/pypi/v/pylint-gitlab.svg)](https://pypi.org/project/pylint-gitlab/)This project provides pylint formatters for a nice integration with GitLab CI.| Formatter | Description || --- | --- || `GitlabCodeClimateReporter` | Maps the linting result in [Code Climate format](https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html) || `GitlabCodeClimateReporterNoHash` | Maps the linting result in [Code Climate format](https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html) but without hashing the fingerprint. Needed to work with [nbQA](https://github.com/nbQA-dev/nbQA). || `GitlabPagesHtmlReporter` | Creates a table in an HTML page with linting results and links to source code. |## UsageInstall package `pylint-gitlab`:```shpip install pylint-gitlab```The `pylint` package is a dependency of `pylint-gitlab` so it will be installed automatically.Now the formatters can be used by running `pylint` command and setting custom output formats with parameter `--output-format`.```shpylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter . &gt; codeclimate.jsonpylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter . &gt; pylint.html```Alternatively, you can load the `pylint_gitlab` plugin and then use the shortened `--output-format` names:```shpylint --exit-zero --load-plugins=pylint_gitlab --output-format=gitlab-codeclimate . &gt; codeclimate.jsonpylint --exit-zero --load-plugins=pylint_gitlab --output-format=gitlab-pages-html . &gt; pylint.html```### GitLab CI integrationHere is a minimalistic version for a `.gitlab-ci.yml` file:```yamlpylint:  stage: test  image: python:3.7-slim  before_script:    - mkdir -p public/badges public/lint    - echo undefined &gt; public/badges/$CI_JOB_NAME.score    - pip install pylint-gitlab  script:    - pylint --exit-zero --output-format=text $(find -type f -name &quot;*.py&quot; ! -path &quot;**/.venv/**&quot;) | tee /tmp/pylint.txt    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt &gt; public/badges/$CI_JOB_NAME.score    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name &quot;*.py&quot; ! -path &quot;**/.venv/**&quot;) &gt; codeclimate.json    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name &quot;*.py&quot; ! -path &quot;**/.venv/**&quot;) &gt; public/lint/index.html  after_script:    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green    - |      echo &quot;Your score is: $(cat public/badges/$CI_JOB_NAME.score)&quot;  artifacts:    paths:      - public    reports:      codequality: codeclimate.json    when: alwayspages:  stage: deploy  image: alpine:latest  script:    - echo  artifacts:    paths:      - public  only:    refs:      - master```You can then use the published badge for linting results.[![pylint](https://smueller18.gitlab.io/pylint-gitlab/badges/pylint.svg)](https://smueller18.gitlab.io/pylint-gitlab/lint/)```markdown[![pylint](https://&lt;MAIN_GROUP&gt;.gitlab.io/&lt;SUB_GROUP&gt;/&lt;PROJECT&gt;/badges/pylint.svg)](https://&lt;MAIN_GROUP&gt;.gitlab.io/&lt;SUB_GROUP&gt;/&lt;PROJECT&gt;/lint/)```</longdescription>
</pkgmetadata>