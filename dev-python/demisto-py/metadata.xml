<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/demisto-py.svg)](https://badge.fury.io/py/demisto-py)[![CircleCI](https://circleci.com/gh/demisto/demisto-py/tree/master.svg?style=svg)](https://circleci.com/gh/demisto/demisto-py/tree/master)# Demisto Client for PythonA Python library for the Demisto API.Version 2.x is compatible with Demisto server version 4.5 and later.## Demisto for Python UsageThis section covers the steps you need to take to get the client configured.### 1. Get a Demisto API KeyFollow these instructions to generate your Demisto API Key.1. In Demisto, navigate to **Settings &gt; API Keys**.2. Click the **Generate Your Key** button.To avoid hard coding configurations in your code, it is possible to specify configruation paramsas the following environment variables (env variables will be used if parameters are not specified):* DEMISTO_BASE_URL* DEMISTO_API_KEY* DEMISTO_USERNAME* DEMISTO_PASSWORD* DEMISTO_VERIFY_SSL (true/false. Default: true)* XSIAM_AUTH_ID (for Cortex XSIAM only. If set, Cortex XSIAM API will be used)* SSL_CERT_FILE (specify an alternate certificate bundle)### 2. Create a Demisto client instance with the api-key and server-url```pythonimport demisto_client# Also possible to set env variables: DEMISTO_API_KEY and DEMISTO_BASE_URLapi_key = 'YOUR_API_KEY'host = 'https://YOUR_DEMISTO_HOST'api_instance = demisto_client.configure(base_url=host, api_key=api_key)```**For Cortex XSIAM, we need to set the auth_id**```pythonimport demisto_client# Also possible to set env variables: DEMISTO_API_KEY, DEMISTO_BASE_URL and XSIAM_AUTH_IDapi_key = 'YOUR_API_KEY'auth_id = 'THE AUTHORIZATION ID'host = 'https://YOUR_XSIAM_HOST'api_instance = demisto_client.configure(base_url=host, api_key=api_key, auth_id=auth_id)```**Alternatively, you can login with username and password (only in xsoar):**```pythonimport demisto_client# Also possible to set env variables: DEMISTO_USERNAME DEMISTO_PASSWORD and DEMISTO_BASE_URLhost = 'https://YOUR_DEMISTO_HOST'username = 'YOUR_USERNAME'password = 'YOUR_PASSWORD'api_instance = demisto_client.configure(base_url=host, username=username, password=password)```### 3. Create incidents```pythonimport demisto_client.demisto_apifrom demisto_client.demisto_api.rest import ApiExceptionapi_key = 'YOUR_API_KEY'host = 'https://YOUR_DEMISTO_HOST'api_instance = demisto_client.configure(base_url=host, api_key=api_key, debug=False)create_incident_request = demisto_client.demisto_api.CreateIncidentRequest()create_incident_request.name = 'Sample Simulation Incident'create_incident_request.type = 'Simulation'create_incident_request.owner = 'Admin'try:    api_response = api_instance.create_incident(create_incident_request=create_incident_request)    print(api_response)except ApiException as e:    print(&quot;Exception when calling DefaultApi-&gt;create_incident: %s\n&quot; % e)```Additional examples available in the [docs](docs/README.md) and under the [examples folder](examples/).## API DocumentationAPI Documentation based upon the Demisto Server Swagger API is available [here](docs/README.md)## Troubleshooting### API KeyIf when using an API key you encounter a response similar to the following:```json{&quot;id&quot;:&quot;forbidden&quot;,&quot;status&quot;:403,&quot;title&quot;:&quot;Forbidden&quot;,&quot;detail&quot;:&quot;Issue with CSRF code&quot;,&quot;error&quot;:&quot;http: named cookie not present&quot;,&quot;encrypted&quot;:false,&quot;multires&quot;:null}```It means your API key is invalid. Make sure you are using a valid API key. You can check your API key by using curl with the following request:```bash  curl -i -k -H 'Authorization: YOUR_API_KEY'  https://your-demisto.server.url/about```For a valid API key you will receive a response similar to the following:```BASHHTTP/1.1 200 OKStrict-Transport-Security: max-age=10886400000000000; includeSubDomainsX-Content-Type-Options: nosniffX-Frame-Options: DENYX-Xss-Protection: 1; mode=blockDate: Thu, 04 Jun 2020 09:27:53 GMTContent-Length: 189Content-Type: text/plain; charset=utf-8{&quot;demistoVersion&quot;:&quot;5.5.0&quot;, ...}```## ContributingContributions are welcome and appreciated. To contribute follow the instructions below and submit a PR.Before merging any PRs, we need all contributors to sign a contributor license agreement. By signing a contributor license agreement, we ensure that the community is free to use your contributions.When you open a new pull request, a bot will evaluate whether you have signed the CLA. If required, the bot will comment on the pull request, including a link to accept the agreement. The CLA document is also available for review as a [PDF](https://github.com/demisto/content/blob/master/docs/cla.pdf).If the `license/cla` status check remains on *Pending*, even though all contributors have accepted the CLA, you can recheck the CLA status by visiting the following link (replace **[PRID]** with the ID of your PR): &lt;https://cla-assistant.io/check/demisto/demisto-py?pullRequest=[PRID&gt;] .## Dev Environment SetupWe recommend installing both development environments. We use [tox](https://github.com/tox-dev/tox) for managing environments and running unit tests.Install `tox`:```bashpip install tox```List configured environments:```bashtox -l```Then setup dev virtual envs for python 3 (will also install all necessary requirements):```bashtox --devenv py310```Switch to python 3 env by running:```bash. py310/bin/activate```## Running Unit TestsWe use pytest to run unit tests. Inside a virtual env you can run unit test using:```bashpython -m pytest -v```Additionally, our build uses tox to run on multiple envs. To use tox to run on all supported environments (py38, py39, py310), run:```bashtox -q  ```## Code GenerationLibrary code was generated using the Demisto Server 4.5.0 Swagger definition with modifications to support later Server versions.**Important:** All code under [demisto_client/demisto_api](demisto_client/demisto_api) is generated using the swagger code generation tool. Do not modify this code directly.We use a script to run the generate tool and then modify as needed.If you would like to contribute **DO NOT** modify the generated code directly, modify the script: [gen-code.sh](gen-code.sh) and then re-generate the code.To generate the code run (requires bash, sed and docker):```bash./gen-code.sh```## Publishing a Release (demisto devs)After merging to `master`, a test deployment will be pushed to: &lt;https://test.pypi.org/project/demisto-py/&gt; .You can test the test package by following the pip install instructions. For example:```bashpip install -i https://test.pypi.org/simple/ demisto-py```Steps to publish a production release:* Make sure [CHANGELOG.md](CHANGELOG.md) is up to date.* Create and push a tag with the release version using git. For example:  ```bash  git tag v2.0.19  git push origin v2.0.19  ```* Check that the circleci build completes successfully. Once done, the release will be pushed to: &lt;https://pypi.org/project/demisto-py/&gt; .* Update GitHub releases: go to [tags page](https://github.com/demisto/demisto-py/tags) and for the relevant tag choose from the right drop down menu: `Create release`. Name the release the same as the tag. Copy the text from previous releases for the description.Congratulations! The release is now public.## LicenseApache 2.0 - See [LICENSE](LICENSE) for more information.</longdescription>
</pkgmetadata>