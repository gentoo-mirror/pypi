<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/bucketstore.svg)](https://badge.fury.io/py/bucketstore)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)[![Python 3.6+ supported](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/release/python-360/)**bucketstore** is a very simple Amazon S3 client, written in Python. Itaims to be much more straight-forward to use than boto3, and specializesonly in Amazon S3, ignoring the rest of the AWS ecosystem.# Features- Treats S3 Buckets as Key/Value stores.- Automatic support for `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`,  and `AWS_DEFAULT_REGION` environment variables.- Easily make keys (or entire buckets) publically accessable.- Easily get the public URL for a given key.- Generates temporary URLs for a given key.- Use S3 in a pythonic way\!# Usage## Installation```bashpip install bucketstore```## Get (or create) a bucket, easily:```pythonimport bucketstore# Create the bucket if it doesn't exist.bucket = bucketstore.get('bucketstore-playground', create=True)```## Treat the bucket like a key/value store:```pycon&gt;&gt;&gt; bucket&lt;S3Bucket name='bucketstore-playground'&gt;# get/set using array syntax&gt;&gt;&gt; bucket['foo'] = 'bar'&gt;&gt;&gt; bucket['foo']bar# get/set using methods&gt;&gt;&gt; bucket.set('foo2', 'bar2')&gt;&gt;&gt; bucket.get('foo2')bar2# list keys&gt;&gt;&gt; bucket.list()[u'foo', u'foo2']# all keys&gt;&gt;&gt; bucket.all()[&lt;S3Key name=u'foo' bucket='bucketstore-playground'&gt;, &lt;S3Key name=u'foo2' bucket='bucketstore-playground'&gt;]# check if a key exists in the bucket&gt;&gt;&gt; 'foo' in bucketTrue# delete keys in the bucket&gt;&gt;&gt; del bucket['foo2']{}```## Interact with S3 keys:```pycon&gt;&gt;&gt; bucket.key('foo')&lt;S3Key bucket='bucketstore-playground' name=u'foo'&gt;&gt;&gt;&gt; foo = _&gt;&gt;&gt; foo.set('new value')# Generate a temporary share URL.&gt;&gt;&gt; foo.temp_url(duration=1200)u'https://bucketstore-playground.s3.amazonaws.com/foo?AWSAccessKeyId=AKIAI2RVFNXIW7WS66QQ&amp;Expires=1485493909&amp;Signature=L3gD9avwQZQO1i11dIJXUiZ7Nx8%3D'# Make key publically accessable.&gt;&gt;&gt; foo.make_public()&gt;&gt;&gt; foo.url'https://s3.amazonaws.com/bucketstore-playground/foo'# Get / set metadata for key.&gt;&gt;&gt; foo.meta = {'foo': 'bar'}&gt;&gt;&gt; foo.meta{'foo': 'bar}# Rename key to 'foo3'.&gt;&gt;&gt; foo.rename('foo3')# Delete the key.&gt;&gt;&gt; foo.delete()# Create a key with a content type&gt;&gt;&gt; foo = bucket.key('foo.html')&gt;&gt;&gt; foo.set('&lt;h1&gt;bar&lt;/h1&gt;', content_type='text/html')# upload to key&gt;&gt;&gt; bucket.key('test.py').upload('/tmp/test.py')# or upload with a file-like object! (make sure it's open in binary mode)&gt;&gt;&gt; with open('/tmp/test.py', 'rb') as file:&gt;&gt;&gt;     bucket.key('test.py').upload(file)# download to file&gt;&gt;&gt; bucket.key('test.py').download('/tmp/test.py')# or download to a file-like object! (make sure it's open in binary mode)&gt;&gt;&gt; with open('/tmp/test.py', 'wb') as file:&gt;&gt;&gt;     bucket.key('test.py').download(file)# size of key&gt;&gt;&gt; bucket.key('test.py').size()&gt;&gt;&gt; len(bucket.key('test.py'))15```Other methods include `bucketstore.login(access_key_id, secret_access_key)`, `bucketstore.list()`, and`bucketstore.get(bucket_name, create=False)`.# TestsTests are run through [Tox](https://tox.readthedocs.io/en/latest/).```shell# Run tests against all environments.$ tox# Run against a specific version.$ tox -e py310# Run with pytest arguments.$ tox -- --pdb```‚ú®üç∞‚ú®</longdescription>
</pkgmetadata>