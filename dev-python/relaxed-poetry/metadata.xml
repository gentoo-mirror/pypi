<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Relaxed Poetry&gt; ℹ️ For installation instructions check the [Wiki](https://github.com/bennylut/relaxed-poetry/wiki/Installation)This project is a poetry fork. It serves as a relaxed version of poetry (currently based on version 1.2.0a2).Poetry is a great tool and was a perfect fit for my team. Over the time, we found several issues where it is a bit too strict, and while most of the time for good reasons, these issues still made poetry unusable for us in many projects.Since, in my eyes, there is no real alternative to poetry, I choose to fork it and include some relaxations for the issues that we encounter. While I'm at it, I also modified some of poetry's behavior and added some features that suite our workflows and views better.All of the changes that were made in this fork are documented in the wiki, the followings are some notable ones:- Forced dependency versions- Relaxation of version-enforcements- Faster dependency-versions resolution (more than 4 times faster on tested projects)- Multi-package projects support  - virtual environments are built inside the project directory by default- Project and other components scaffolding using [protopy](https://github.com/bennylut/protopy)- property definition and substitution in pyproject - automatic and manual build profiles (override groups of properties in pyproject)- install, update and add are merged into a single (install) command See wiki for further details.**Important**: this package is based on alpha staged poetry, changes may be frequent, though it is planed to be used internally for our projects from day one.**The rest of this README left as is from the original Poetry README**# Poetry: Dependency Management for PythonPoetry helps you declare, manage and install dependencies of Python projects,ensuring you have the right stack everywhere.![Poetry Install](https://raw.githubusercontent.com/python-poetry/poetry/master/assets/install.gif)It supports Python 2.7 and 3.5+.**Note**: Python 2.7 and 3.5 will no longer be supported in the next feature release (1.2).You should consider updating your Python version to a supported one.[![Tests Status](https://github.com/python-poetry/poetry/workflows/Tests/badge.svg?branch=master&amp;event=push)](https://github.com/python-poetry/poetry/actions?query=workflow%3ATests+branch%3Amaster+event%3Apush)The [complete documentation](https://python-poetry.org/docs/) is available on the [official website](https://python-poetry.org).## InstallationPoetry provides a custom installer that will install `poetry` isolatedfrom the rest of your system.### osx / linux / bashonwindows install instructions```bashcurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -```### windows powershell install instructions```powershell(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py -UseBasicParsing).Content | python -```**Warning**: The previous `get-poetry.py` installer is now deprecated, if you are currently using ityou should migrate to the new, supported, `install-poetry.py` installer.The installer installs the `poetry` tool to Poetry's `bin` directory. This location depends on your system:- `$HOME/.local/bin` for Unix- `%APPDATA%\Python\Scripts` on WindowsIf this directory is not on your `PATH`, you will need to add it manuallyif you want to invoke Poetry with simply `poetry`.Alternatively, you can use the full path to `poetry` to use it.Once Poetry is installed you can execute the following:```bashpoetry --version```If you see something like `Poetry (version 1.2.0)` then you are ready to use Poetry.If you decide Poetry isn't your thing, you can completely remove it from your systemby running the installer again with the `--uninstall` option or by settingthe `POETRY_UNINSTALL` environment variable before executing the installer.```bashpython install-poetry.py --uninstallPOETRY_UNINSTALL=1 python install-poetry.py```By default, Poetry is installed into the user's platform-specific home directory.If you wish to change this, you may define the `POETRY_HOME` environment variable:```bashPOETRY_HOME=/etc/poetry python install-poetry.py```If you want to install prerelease versions, you can do so by passing `--preview` option to `install-poetry.py`or by using the `POETRY_PREVIEW` environment variable:```bashpython install-poetry.py --previewPOETRY_PREVIEW=1 python install-poetry.py```Similarly, if you want to install a specific version, you can use `--version` option or the `POETRY_VERSION`environment variable:```bashpython install-poetry.py --version 1.2.0POETRY_VERSION=1.2.0 python install-poetry.py```You can also install Poetry for a `git` repository by using the `--git` option:```bashpython install-poetry.py --git https://github.com/python-poetry/poetry.git@master````**Note**: Note that the installer does not support Python &lt; 3.6.## Updating `poetry`Updating poetry to the latest stable version is as simple as calling the `self update` command.**Warning**: Poetry versions installed using the now deprecated `get-poetry.py` installer will not be able to use thiscommand to update to 1.2 releases or later. Migrate to using the `install-poetry.py` installer or `pipx`.```bashpoetry self update```If you want to install prerelease versions, you can use the `--preview` option.```bashpoetry self update --preview```And finally, if you want to install a specific version you can pass it as an argumentto `self update`.```bashpoetry self update 1.2.0```## Enable tab completion for Bash, Fish, or Zsh`poetry` supports generating completion scripts for Bash, Fish, and Zsh.See `poetry help completions` for full details, but the gist is as simple as using one of the following:```bash# Bashpoetry completions bash &gt; /etc/bash_completion.d/poetry.bash-completion# Bash (Homebrew)poetry completions bash &gt; $(brew --prefix)/etc/bash_completion.d/poetry.bash-completion# Fishpoetry completions fish &gt; ~/.config/fish/completions/poetry.fish# Fish (Homebrew)poetry completions fish &gt; (brew --prefix)/share/fish/vendor_completions.d/poetry.fish# Zshpoetry completions zsh &gt; ~/.zfunc/_poetry# Zsh (Homebrew)poetry completions zsh &gt; $(brew --prefix)/share/zsh/site-functions/_poetry# Zsh (Oh-My-Zsh)mkdir $ZSH_CUSTOM/plugins/poetrypoetry completions zsh &gt; $ZSH_CUSTOM/plugins/poetry/_poetry# Zsh (prezto)poetry completions zsh &gt; ~/.zprezto/modules/completion/external/src/_poetry```*Note:* you may need to restart your shell in order for the changes to takeeffect.For `zsh`, you must then add the following line in your `~/.zshrc` before`compinit` (not for homebrew setup):```zshfpath+=~/.zfunc```## Introduction`poetry` is a tool to handle dependency installation as well as building and packaging of Python packages.It only needs one file to do all of that: the new, [standardized](https://www.python.org/dev/peps/pep-0518/) `pyproject.toml`.In other words, poetry uses `pyproject.toml` to replace `setup.py`, `requirements.txt`, `setup.cfg`, `MANIFEST.in` and the newly added `Pipfile`.```toml[tool.poetry]name = &quot;my-package&quot;version = &quot;0.1.0&quot;description = &quot;The description of the package&quot;license = &quot;MIT&quot;authors = [    &quot;Sébastien Eustace &lt;sebastien@eustace.io&gt;&quot;]readme = 'README.md'  # Markdown files are supportedrepository = &quot;https://github.com/python-poetry/poetry&quot;homepage = &quot;https://github.com/python-poetry/poetry&quot;keywords = ['packaging', 'poetry'][tool.poetry.dependencies]python = &quot;~2.7 || ^3.2&quot;  # Compatible python versions must be declared heretoml = &quot;^0.9&quot;# Dependencies with extrasrequests = { version = &quot;^2.13&quot;, extras = [ &quot;security&quot; ] }# Python specific dependencies with prereleases allowedpathlib2 = { version = &quot;^2.2&quot;, python = &quot;~2.7&quot;, allow-prereleases = true }# Git dependenciescleo = { git = &quot;https://github.com/sdispater/cleo.git&quot;, branch = &quot;master&quot; }# Optional dependencies (extras)pendulum = { version = &quot;^1.4&quot;, optional = true }[tool.poetry.dev-dependencies]pytest = &quot;^3.0&quot;pytest-cov = &quot;^2.4&quot;[tool.poetry.scripts]my-script = 'my_package:main'```There are some things we can notice here:* It will try to enforce [semantic versioning](&lt;http://semver.org&gt;) as the best practice in version naming.* You can specify the readme, included and excluded files: no more `MANIFEST.in`.`poetry` will also use VCS ignore files (like `.gitignore`) to populate the `exclude` section.* Keywords (up to 5) can be specified and will act as tags on the packaging site.* The dependencies sections support caret, tilde, wildcard, inequality and multiple requirements.* You must specify the python versions for which your package is compatible.`poetry` will also detect if you are inside a virtualenv and install the packages accordingly.So, `poetry` can be installed globally and used everywhere.`poetry` also comes with a full fledged dependency resolution library.## Why?Packaging systems and dependency management in Python are rather convoluted and hard to understand for newcomers.Even for seasoned developers it might be cumbersome at times to create all files needed in a Python project: `setup.py`,`requirements.txt`, `setup.cfg`, `MANIFEST.in` and the newly added `Pipfile`.So I wanted a tool that would limit everything to a single configuration file to do:dependency management, packaging and publishing.It takes inspiration in tools that exist in other languages, like `composer` (PHP) or `cargo` (Rust).And, finally, I started `poetry` to bring another exhaustive dependency resolver to the Python community apart from[Conda's](https://conda.io).### What about Pipenv?In short: I do not like the CLI it provides, or some of the decisions made,and I think we can make a better and more intuitive one. Here are a few thingsthat I don't like.#### Dependency resolutionThe dependency resolution is erratic and will fail even if there is a solution. Let's take an example:```bashpipenv install oslo.utils==1.4.0```will fail with this error:```textCould not find a version that matches pbr!=0.7,!=2.1.0,&lt;1.0,&gt;=0.6,&gt;=2.0.0```while Poetry will get you the right set of packages:```bashpoetry add oslo.utils=1.4.0```results in :```text  - Installing pytz (2018.3)  - Installing netifaces (0.10.6)  - Installing netaddr (0.7.19)  - Installing oslo.i18n (2.1.0)  - Installing iso8601 (0.1.12)  - Installing six (1.11.0)  - Installing babel (2.5.3)  - Installing pbr (0.11.1)  - Installing oslo.utils (1.4.0)```This is possible thanks to the efficient dependency resolver at the heart of Poetry.Here is a breakdown of what exactly happens here:`oslo.utils (1.4.0)` depends on:- `pbr (&gt;=0.6,!=0.7,&lt;1.0)`- `Babel (&gt;=1.3)`- `six (&gt;=1.9.0)`- `iso8601 (&gt;=0.1.9)`- `oslo.i18n (&gt;=1.3.0)`- `netaddr (&gt;=0.7.12)`- `netifaces (&gt;=0.10.4)`What interests us is `pbr (&gt;=0.6,!=0.7,&lt;1.0)`.At this point, poetry will choose `pbr==0.11.1` which is the latest version that matches the constraint.Next it will try to select `oslo.i18n==3.20.0` which is the latest version that matches `oslo.i18n (&gt;=1.3.0)`.However this version requires `pbr (!=2.1.0,&gt;=2.0.0)` which is incompatible with `pbr==0.11.1`,so `poetry` will try to find a version of `oslo.i18n` that satisfies `pbr (&gt;=0.6,!=0.7,&lt;1.0)`.By analyzing the releases of `oslo.i18n`, it will find `oslo.i18n==2.1.0` which requires `pbr (&gt;=0.11,&lt;2.0)`.At this point the rest of the resolution is straightforward since there is no more conflict.## Resources* [Official Website](https://python-poetry.org)* [Issue Tracker](https://github.com/python-poetry/poetry/issues)* [Discord](https://discord.com/invite/awxPgve)</longdescription>
</pkgmetadata>