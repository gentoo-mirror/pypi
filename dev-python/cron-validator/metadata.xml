<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Cron Validator[![Build Status](https://travis-ci.org/vcoder4c/cron-validator.svg?branch=master)](https://travis-ci.org/vcoder4c/cron-validator)[![Coverage Status](https://coveralls.io/repos/github/vcoder4c/cron-validator/badge.svg?branch=master)](https://coveralls.io/github/vcoder4c/cron-validator?branch=master)### **Features**- Validate unix cron expression- Match unit cron expression with specific datetime- Generate match datetime between two datetime- Schedule tasks### **Install**```shell scriptpip install cron-validator```### **Run Tests****1. Install test requirements**```shell scriptpip install -r requirements/test.txt```**2. Run tests (with coverage if wished)**```shell scriptpytest --cov=. test/```### Sample**1. Validate unix cron expression**```pythonfrom cron_validator import CronValidatorassert CronValidator.parse('* * * * *') is not None # validassert CronValidator.parse('*/3 * * * *') is not None # validassert CronValidator.parse('*/61 * * * *') is None # invalid```**2. Match unit cron expression with specific datetime**```pythonfrom cron_validator import CronValidatorfrom cron_validator.util import str_to_datetimedt_str = '2019-04-23 1:00'dt = str_to_datetime(dt_str)assert CronValidator.match_datetime(&quot;* * * * *&quot;, dt)assert CronValidator.match_datetime(&quot;* * * 4 *&quot;, dt)assert CronValidator.match_datetime(&quot;* * * 5 *&quot;, dt) is Falseassert CronValidator.match_datetime(&quot;* * * 1-5 *&quot;, dt)assert CronValidator.match_datetime(&quot;* * * 1-3 *&quot;, dt) is Falseassert CronValidator.match_datetime(&quot;* * * 1/5 *&quot;, dt) is Falseassert CronValidator.match_datetime(&quot;* * * * *&quot;, dt)assert CronValidator.match_datetime(&quot;0 * * * *&quot;, dt)assert CronValidator.match_datetime(&quot;0-30 * * * *&quot;, dt)assert CronValidator.match_datetime(&quot;0/30 * * * *&quot;, dt)```**3. Generate match datetime between two datetime**```pythonfrom cron_validator import CronValidatorfrom cron_validator.util import str_to_datetimefrom_str = '2019-04-22 00:00'to_str = '2019-04-23 23:59'for dt in CronValidator.get_execution_time(&quot;0 0 * * *&quot;,from_dt=str_to_datetime(from_str), to_dt=str_to_datetime(to_str)):    print(dt)# Output:# 2019-04-22 00:00:00+00:00# 2019-04-23 00:00:00+00:00```**4. Use scheduler for repetitive task**```pythonfrom cron_validator import CronSchedulercron_string = &quot;*/1 * * * *&quot;scheduler = CronScheduler(cron_string)while True:    if scheduler.time_for_execution():        # Get's called every full minute (excluding first iteration)        print(&quot;Now is the next scheduled time.&quot;)```**5. Use extended cron rules based on AWS EventBridge rules** (from v1.0.6)The cron validator supports partially extended rules based on the Amazon EvenBridge rule set. [More info.](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html#eb-cron-expressions)Currently we support:- 'L' for day of the month and day of the week- 'W' for day of the week.```pythonfrom cron_validator import CronValidatorfrom cron_validator.util import str_to_datetimefrom cron_validator.regexes import Versiondt_str = '2023-04-28 1:00'dt = str_to_datetime(dt_str)assert CronValidator.match_datetime(&quot;* * * * 30W&quot;, dt, version=Version.EB)assert CronValidator.match_datetime(&quot;* * * * 5L&quot;, dt, version=Version.EB)dt_str = &quot;2022-02-28 1:00&quot;dt = str_to_datetime(dt_str)assert CronValidator.match_datetime(&quot;* * L * *&quot;, dt, version=Version.EB)```### LicenseThis project is licensed under the MIT License - see the [LICENSE.txt](LICENSE.txt) file for details</longdescription>
</pkgmetadata>