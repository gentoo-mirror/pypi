<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyFLocker[![CI](https://github.com/arunanshub/pyflocker/actions/workflows/ci.yml/badge.svg)](https://github.com/arunanshub/pyflocker/actions/workflows/ci.yml)[![Coverage Status](https://coveralls.io/repos/github/arunanshub/pyflocker/badge.svg?branch=master)](https://coveralls.io/github/arunanshub/pyflocker?branch=master)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![Python Versions](https://img.shields.io/pypi/pyversions/PyFLocker?label=Python%20Versions)](https://pypi.org/project/PyFLocker)[![Documentation Status](https://readthedocs.org/projects/pyflocker/badge/?version=latest)](https://pyflocker.readthedocs.io/en/latest/?badge=latest)Python Cryptographic (File Locking) Library&gt; Lock as in Lock and Key.## InstallationUse `pip` or `pip3` to install PyFLocker    pip install pyflockeror    pip3 install pyflocker## IntroductionPyFLocker aims to be a highly stable and easy to use cryptographic library.Before you read on, check if you agree to at least one of these points:- [`PyCryptodome(x)`][pycrypto] and [`pyca/cryptography`][pyca] have  **very different** public interfaces, which makes remembering all the imports  very difficult, and leaves you reading docs under deadline.- The interface of `pyca/cryptography` is very difficult to use, let alone  remember the import:  ```python  from cryptography.hazmat.primitives.ciphers.algorithms import AES  from cryptography.hazmat.primitives.ciphers import Modes  ...  from cryptography.hazmat.backends import default_backend  # and so on...  ```- You wish that only if `pyca/cryptography` had been as easy to use as  `Pycryptodome(x)`, it would have made life more easy.- You sometimes think that the file encryption script you wrote were somehow  faster and played with both backends very well, but you weren't sure what to do.  - And all the other solutions (and nonsolutions!) on the internet just confuses    you more!PyFLocker uses well established libraries as its backends and expands upon them.This gives you the ultimate ability to cherry-pick the primitives from a specificbackend without having to worry about backend itself, as PyFLocker handles itfor you.You can find more information in the [documentation][docs].## Features### Not a &quot;Yet Another Cryptographic Library&quot;PyFLocker provides you a seamless interface to both the backends, and switchingis very easy:```pythonimport osfrom pyflocker.ciphers import AES, RSA, ECCfrom pyflocker.ciphers.backends import Backendskey, nonce = os.urandom(32), os.urandom(16)# Multiple backends - same APIenc = AES.new(True, key, AES.MODE_EAX, nonce, backend=Backends.CRYPTOGRAPHY)rpriv = RSA.generate(2048, backend=Backends.CRYPTODOME)epriv = ECC.generate(&quot;x25519&quot;, backend=Backends.CRYPTOGRAPHY)```Backend loading is done internally, and if a backend is explicitly specified,that is used as the default.### Ease of UsePyFLocker provides reasonable defaults wherever possible:```pythonfrom pyflocker.ciphers import RSApriv = RSA.generate(2048)with open(&quot;private_key.pem&quot;, &quot;xb&quot;) as f:    key = priv.serialize(passphrase=b&quot;random-chimp-event&quot;)    f.write(key)```Don't believe me, try to do the [same operation with `pyca/cryptography`][pyca_vs_self],or just any other initialization.In short, the API is very stable, clear and easy on developer's mind.### Writing into file or file-like objectsThis is often a related problem when it comes to encryption, but think no more!```pythonimport osfrom pyflocker.ciphers import AESfrom pyflocker.ciphers.backends import Backendskey, nonce = os.urandom(32), os.urandom(16)f1 = open(&quot;MySecretData.txt&quot;, &quot;rb&quot;)f2 = open(&quot;MySecretData.txt.enc&quot;, &quot;xb&quot;)enc = AES.new(    True,    key,    AES.MODE_EAX,    nonce,    backend=Backends.CRYPTOGRAPHY,    file=f1,)enc.update_into(f2)tag = enc.calculate_tag()```You can also use `BytesIO` in place of file objects.### Directly encrypting filesJust want to encrypt your file with AES, and even with various available modes?```pythonfrom pyflocker.locker import lockerfrom pyflocker.ciphers import AESpassword = b&quot;no not this&quot;locker(    &quot;./MySuperSecretFile.txt&quot;,    password,    aes_mode=AES.MODE_CTR,  # default is AES-GCM-256)# file stored as MySuperSecretFile.txt.pyflk```Find more examples [here][examples].## License[MIT](https://choosealicense.com/licenses/mit/)[docs]: https://pyflocker.readthedocs.io/en/latest/[examples]: https://pyflocker.readthedocs.io/en/latest/examples[pycrypto]: https://github.com/Legrandin/pycryptodome[pyca]: https://github.com/pyca/cryptography[pyca_vs_self]: https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa.html#key-serialization</longdescription>
</pkgmetadata>