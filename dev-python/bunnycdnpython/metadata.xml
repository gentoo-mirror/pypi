<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BunnyCDN Python LibBunnyCDN is one of the fastest and most cost effective CDN.With this BunnyCDN Python Library you can easily implement it and turbo charge your website content to deliver it at lighting speed to your visitors.## Getting StartedThese instructions will let you install the bunnycdnpython python library running on your local machine.### PrerequisitesProgramming language: Python* version required : &gt;=3.6* Python Library(s) required : requests library```pip install requests```OS : Any OS  (ex: Windows , Mac , Linux)*Account* : A account on -: (https://bunny.net/)* Authentication : API Keys of of  Account and Storage API### InstallingStep1: Open CMDStep2: type ``` pip install bunnycdnpython```Now bunnycdnpython python library is installed### Using bunnycdnpython library* #### Importing the bunnycdnpython library Storage and CDN module```      from BunnyCDN.Storage import Storage       from BunnyCDN.CDN import CDN```         * ##### Using Storage Module        For using Storage API you have to initialize an object with your storage api key,storage zone name and storage zone region(optional)```    obj_storage = Storage(storage_api_key,storage_zone_name,storage_zone_region)```* ##### Using CDN module     For using Account API you have to initialize an object with your account api key        ```    obj_cdn = CDN(account_api_key)        ```## Summary of functions in Storage moduleStorage module has functions that utilize APIs mentioned in official Bunnycdn storage apiary SA[storage api documentation](https://bunnycdnstorage.docs.apiary.io/)* ### Download File    To download a file from a storage zone to a particular path on your local server/PC    ```    &gt;&gt;obj_storage.DownloadFile(storage_path,download_path(optional))    ```    if download_path is not mentioned then file gets downloaded to current working directory* ### Put File    To upload a file to a specific directory in the storage zone    ```    &gt;&gt;obj_storage.PutFile(file_name, storage_path=None, local_upload_file_path(optional) )    ```    The storage_path here does not include storage zone name and it should end with the desired file name to be stored in storage zone.(example: 'sample_dir/abc.txt')        The local_upload_file_path is the path of the file in the local PC excluding file name* ### Delete File/Folder    To delete a file or folder from a specific directory in storage zone    ```    &gt;&gt;obj_storage.DeleteFile(storage_path)    ```    If deleting a folder, make sure the storage_path ends with a trailing slash &quot;/&quot;.      Deleting a folder will delete all files within it.* ### Get Storaged Objects List    Returns a list containing name of all the files and folders in the directory specified in storage path    ```    &gt;&gt;obj_storage.GetStoragedObjectsList(storage_path)    ```## Summary of functions in CDN moduleCDN module has functions that utilize APIs mentioned in official Bunnycdn apiary [CDN api documentation](https://bunnycdn.docs.apiary.io)* ### Get Pullzone list    To fetch the list of pullzones in the User's Account    ```    &gt;&gt;obj_cdn.GetPullZoneList()    ```* ### Create Pullzone    To create a new Pulzone in User's Account    ```    &gt;&gt;obj_cdn.CreatePullZone(Name,OriginURL,Type,StorageZoneId (optional))    ```* ### Get Pullzone    To return the pullzone details for the zone with the given ID    ```    &gt;&gt;obj_cdn.GetPullZone(PullZoneID)    ```* ### Update Pullzone    To update the pullzone with the given ID    ```    &gt;&gt;obj_cdn.UpdatePullZone(PullZoneID,OriginUrl,AllowedReferrers,BlockedIps,EnableCacheSlice,EnableGeoZoneUS,EnableGeoZoneEU,EnableGeoZoneASIA,EnableGeoZoneSA,EnableGeoZoneAF,ZoneSecurityEnabled,ZoneSecurityIncludeHashRemoteIP,IgnoreQueryStrings,MonthlyBandwidthLimit,AccessControlOriginHeaderExtensions,EnableAccessControlOriginHeader,BlockRootPathAccess,EnableWebpVary,EnableHostnameVary,EnableCountryCodeVary,EnableLogging,DisableCookies,BudgetRedirectedCountries,BlockedCountries,EnableOriginShield,EnableQueryStringOrdering,CacheErrorResponses,OriginShieldZoneCode,AddCanonicalHeader,CacheControlMaxAgeOverride,AddHostHeader,AWSSigningEnabled,AWSSigningKey,AWSSigningRegionName,AWSSigningSecret,EnableTLS1,LoggingSaveToStorage,LoggingStorageZoneId,LogForwardingEnabled,LogForwardingHostname,LogForwardingPort,LogForwardingToken)    ```    * Success Response    ```           {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: &quot;Update successful&quot;,            }    ```* ### Delete Pullzone    To delete the pullzone with the given ID    ```    &gt;&gt;obj_cdn.DeletePullZone(PullZoneID)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: response.status_code,                &quot;msg&quot;: &quot;Successfully Deleted Pullzone&quot;,            }    ```* ### Purge Pullzone Cache    To purge the full cache of given pullzone    ```    &gt;&gt;obj_cdn.PurgePullZoneCache(PullZoneID)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: &quot;successfully purged the cache of the given pullzone &quot;,            }    ```* ### Add or Update Edgerule    To Add or Update an Edgerule of a particular Pullzone    ```    &gt;&gt;obj_cdn.AddorUpdateEdgerule(PullZoneID,ActionParameter1,ActionParameter2,Enabled,Description,ActionType,TriggerMatchingType,Triggers,GUID(optional))    ```    * Success Response    ```                {                    &quot;status&quot;: &quot;success&quot;,                    &quot;HTTP&quot;: 201,                    &quot;msg&quot;: &quot;successfully updated edgerule &quot;,                }    ```* ### Delete Edgerule    To Delete the pullzone with the given ID    ```    &gt;&gt;obj_cdn.DeleteEdgeRule(PullZoneID,EdgeRuleID)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 204,                &quot;msg&quot;: &quot;Successfully Deleted edgerule&quot;,            }    ```* ### Add Custom Hostname    To add custom hostname to a pullzone    ```    &gt;&gt;obj_cdn.AddCustomHostname(PullZoneID,Hostname)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: &quot;Update was Successfull&quot;,            }    ```* ### Delete Custom Hostname    To delete custom hostname of a pullzone    ```    &gt;&gt;obj_cdn.DeleteCustomHostname(PullZoneID,Hostname)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: &quot;Successfully Deleted Hostname&quot;,            }    ```* ### Set Force SSL    To enable or disable the ForceSSL setting for a pulzone    ```    &gt;&gt;obj_cdn.SetForceSSL(PullZoneID,Hostname,ForceSSL)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: &quot;successfully added Hostname &quot;,            }    ```* ### Load Free Certificate    To Load a FREE SSL Certificate to the domain provided by Let's Encrypt    ```    &gt;&gt;obj_cdn.LoadFreeCertificate(self,Hostname)    ```    * Success Response    ```    [{&quot;Name&quot;:&quot;pullzone1&quot;,&quot;Id&quot;:&quot;pullzoneid1&quot;},{&quot;Name&quot;:&quot;pullzone2&quot;,&quot;Id&quot;:&quot;pullzoneid2&quot;}]    ```* ### Add Certificate    To Add a custom certificate to the given Pull Zone.    ```    &gt;&gt;obj_cdn.AddCertificate(PullZoneId,Hostname,Certificate,CertificateKey)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: f&quot;Certificated Added successfully Hostname:{Hostname}&quot;,            }    ```* ### Add Blocked IP    To add an IP to the list of blocked IPs that are not allowed to access the zone    ```    &gt;&gt;obj_cdn.AddBlockedIp(PullZoneId, BlockedIp)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: &quot;Ip successfully added to list of blocked IPs&quot;,            }    ```* ### Remove Blocked IP    To removes mentioned IP from the list of blocked IPs that are not allowed to access the zone    ```    &gt;&gt;obj_cdn.RemoveBlockedIp(PullZoneId, BlockedIp)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: &quot;Ip removed from blocked IPs list &quot;            }    ```* ### Get Storagezone List     Returns list of dictionaries containing storage zone name and its id    ```    &gt;&gt;obj_cdn.StorageZoneList()    ```    * Success Response    ```    [{&quot;Name&quot;:&quot;storagezone1&quot;,&quot;Id&quot;:&quot;storagezoneid1&quot;},{&quot;Name&quot;:&quot;storagezone2&quot;,&quot;Id&quot;:&quot;storagezoneid2&quot;}]    ```* ### Get Storage Zone Data    Returns list of dictionaries containing  details of storage zones in account    ```    &gt;&gt;obj_cdn.StorageZoneData()    ```    * Success Response    ```        [            {             'Id': 53889,             'Storage_Zone_Name': 'mystoragezone1',             'Usage': 39080459,             'host_names': ['test.b-cdn.net', 'cdn.samplehostname.com'],             'PullZones': ['mypullzone1']             },                     {             'Id': 54559,             'Storage_Zone_Name': 'mystoragezone2',             'Usage': 0,             'host_names': [],             'PullZones': ['mypullzone2']             }        ]    ```* ### Add Storagezone    This function creates an new storage zone    ```    &gt;&gt;obj_cdn.AddStorageZone(storage_zone_name, storage_zone_region(optional),ReplicationRegions(optional))    ```    * Success Response    ```           {                &quot;status&quot;: &quot;success&quot;,                &quot;HTTP&quot;: 201,                &quot;msg&quot;: {                        &quot;Name&quot;: &quot;mystoragezone&quot;,                        &quot;Region&quot;: &quot;DE&quot;,                        &quot;ReplicationRegions&quot;: [                            &quot;NY&quot;,                            &quot;SG&quot;                          ]                        }            }    ```* ### Get Storagezone    This function returns details about the storage zone with id:storage_zone_id    ```    &gt;&gt;obj_cdn.GetStorageZone(storage_zone_id)    ```    * Success Response    ```           {            &quot;Id&quot;: 4122,            &quot;Name&quot;: &quot;mystoragezone&quot;,            &quot;Password&quot;: &quot;storage-zone-password-key&quot;,            &quot;ReadOnlyPassword&quot;: &quot;storage-zone-password-key&quot;,            &quot;UserId&quot;: &quot;user-id&quot;,            &quot;FilesStored&quot;: 20,            &quot;StorageUsed&quot;: 1024,            &quot;Deleted&quot;: false,            &quot;DateModified&quot;: &quot;2017-04-22T00:00:00Z&quot;          }    ```* ### Delete Storagezone    Deletes the Storage Zone with the given ID    ```    &gt;&gt;obj_cdn.DeleteStorageZone(storage_zone_id)    ```    * Success Response    ```     {                &quot;status&quot;: &quot;Success&quot;,                &quot;HTTP&quot;: 201,                &quot;msg&quot;: &quot;Deleted Storagezone successfully&quot;,            }    ```* ### Get Video Library    Gets the details of Video Library of the specified id    ```    &gt;&gt;obj_cdn.GetVideoLibrary(id)    ```    * Success Response    ```                 {                     &quot;status&quot;: &quot;success&quot;,                      &quot;HTTP&quot;: 200,                      &quot;msg&quot;: {                                &quot;Id&quot;: 1234,                                &quot;Name&quot;: &quot;My Video Library&quot;,                                &quot;VideoCount&quot;: 24,                                &quot;DateCreated&quot;: &quot;2021-04-22T00:00:00Z&quot;,                                &quot;ApiKey&quot;: &quot;video-library-api-key&quot;,                                &quot;ReadOnlyApiKey&quot;: &quot;video-library-readonly-api-key&quot;,                                &quot;HasWatermark&quot;: false,                                &quot;WatermarkPositionLeft&quot;: 70,                                &quot;WatermarkPositionTop&quot;: 70,                                &quot;WatermarkWidth&quot;: 12,                                &quot;WatermarkHeight&quot;: 12,                                &quot;EnabledResolutions&quot;: &quot;240p,360p,480p&quot;,                                &quot;VastTagUrl&quot;: &quot;https://mydomain.com/vasttag.xml&quot;,                                &quot;ViAiPublisherId&quot;: &quot;vai-publisher-id&quot;,                                &quot;CaptionsFontSize&quot;: &quot;14,&quot;,                                &quot;CaptionsFontColor&quot;: &quot;#fff&quot;,                                &quot;CaptionsBackground&quot;: &quot;#222&quot;,                                &quot;UILanguage&quot;: &quot;en&quot;,                                &quot;AllowEarlyPlay&quot;: false,                                &quot;PlayerTokenAuthenticationEnabled&quot;: false,                                &quot;EnableMP4Fallback&quot;: false,                                &quot;AllowedReferrers&quot;: [                                    &quot;mydomain.com&quot;,                                    &quot;myotherdomain.net&quot;                                ],                                &quot;BlockedReferrers&quot;: [],                                &quot;BlockNoneReferrer&quot;: false,                                &quot;WebhookUrl&quot;: &quot;https://api.mybackend.net/webook&quot;,                                &quot;KeepOriginalFiles&quot;: true,                                &quot;AllowDirectPlay&quot;: true,                                &quot;EnableDRM&quot;: false,                                &quot;Bitrate240p&quot;: 600,                                &quot;Bitrate360p&quot;: 800,                                &quot;Bitrate480p&quot;: 1400,                                &quot;Bitrate720p&quot;: 2800,                                &quot;Bitrate1080p&quot;: 5000,                                &quot;Bitrate1440p&quot;: 8000,                                &quot;Bitrate2160p&quot;: 13000                                }                 }    ```* ### Delete Video Library    This method deletes the Storage zone with id :storage_zone_id    ```    &gt;&gt;obj_cdn.DeleteVideoLibrary(id)    ```    * Success Response    ```                 {                     &quot;status&quot;: &quot;success&quot;,                     &quot;HTTP&quot;: 201,                     &quot;msg&quot;: &quot;Deleted Video Library&quot;                 }    ```* ### Purge Url Cache    This method purges the given URL from our edge server cache.    ```    &gt;&gt;obj_cdn.PurgeUrlCache(url)    ```    * Success Response    ```            {                &quot;status&quot;: &quot;Success&quot;,                &quot;HTTP&quot;: 200,                &quot;msg&quot;: f&quot;Purged Cache for url:{url}&quot;,            }    ```* ### Get Statistics    Returns the statistics associated with the account    ```    &gt;&gt;obj_cdn.Stats(dateFrom=None,dateTo=None,pullZone=None,serverZoneId=None,loadErrors=True)    ```    Here all the parameters are optional the method can also be called without any parameters* ### Get Billing Summary    Returns the current billing summary of the account    ```    &gt;&gt;obj_cdn.Billing()    ```* ### Apply a Promo Code    Applies a promo code to the account    ```    &gt;&gt;obj_cdn.ApplyCode( couponCode )    ```## Versioning For the versions available, see the [tags on this repository](https://github.com/mathrithms/BunnyCDN-Python-Lib/tags). ## Authors* **MATHIRITHMS** - (https://mathrithms.com/)* **[Contributors:](https://github.com/mathrithms/BunnyCDN-Python-Lib/graphs/contributors)**    ##### 1. Aaditya Baranwal    ##### 2. Joel Thomas## LicenseThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details## Acknowledgments* Used similar format as per the official libraries published by [BunnyCDN](https://github.com/BunnyWay/BunnyCDN.PHP.Storage)**For any bugs or issue mail**&gt; 1. thomas.2@iitj.ac.in&gt; 2. baranwal.1@iitj.ac.in</longdescription>
</pkgmetadata>