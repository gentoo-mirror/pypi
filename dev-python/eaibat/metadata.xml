<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Eai BATlatest update to be seen in [documentation](docs/index.md)## Quick overviewBasic automation tool is mainly a python class which holds various data.It aims to ease the test's evidence creation by recording steps definition and content in an ordered way.One goal is that class may be subclassed so that your automaton fits your needs.## What's in?- EaiBat class with few properties and methods.- folder_file_name_cleaning package function which cleans a string from spaces and some special characters.### Properties- url : yes it's designed to test APIs or Web application. Allow `http`, `https` and `ftp` scheme, ASCII letters, digits and `+`, `.` and `:` characters- history : your tests records in an ordered dictionary.- step : your current test step. It's a length two tuple containing `int` or `string`. It might be constructed using a Behave's Step. - evidence_location :  where you store the evidence as a `string`.### Methods- push_event: takes one event argument    - a request's Response object,    - a `string`    - a `dictionary`    - a length 2 tuple for file event. First part is the filename (relative to the evidence_folder) and the second part is the file type. Currently, only three types are managed: `img`, `txt` or `sql`.- clear_history: without argument.- create_evidence: takes two arguments    - `filename`: the evidence filename    -  `evidence_type`: either `markdown` or `word`. **Please note** `markdown` generator is not as complete as `word` generator.## How to use it?### As a standalone...Well, I don't use it as a standalone. You could create an instance of EaiBat, feed the history and then create the evidence.It may look like something as below ```pythonfrom eaiBat import EaiBatmy_reporter = EaiBat()# Set first where evidence should be storedmy_reporter.evidence_location = 'path_to_evidence_location'# Set the step. Mind that Behave's step do the jobmy_reporter.step = ('First step', 'my action')# Set the history content for the stepmy_reporter.push_event(&quot;I describe what I do&quot;)# Another stepmy_reporter.step = ('Second step', 'another action')# Another content. Mind the file will be search in the 'evidence_location'my_reporter.push_event(('screenshot.png', 'img'))my_reporter.push_event(('sql_file_i_processed.sql', 'sql'))# Create the evidencemy_reporter.create_evidence(&quot;my_evidence.docx&quot;, &quot;word&quot;)# Clear the history for a new runmy_reporter.clear_history()```### Part of `Behave` frameworkI prefer using this package as part of `Behave` test automation framework.Here is my usage:- In the environment.py file (see [Behave's documentation](https://behave.readthedocs.io/en/stable/api.html#environment-file-functions))```pythonfrom helpers.model import MyModelfrom eaiBat import folder_file_name_cleaningdef before_all(context):    context.model = MyModel()    context.model.url = 'http://my.test.environment.com'def before_step(context, step):    context.model.step = stepdef before_scenario(context, scenario):    context.model.evidence_location = f'evidence/{folder_file_name_cleaning(scenario.name)}'def after_scenario(context, scenario):    evidence_name = f&quot;{scenario.name}-{scenario.status}.docx&quot;    context.model.create_evidence(folder_file_name_cleaning(evidence_name), &quot;word&quot;)    context.model.clear_history()```- In the helpers.model package (homemade package for the test automation) assuming I test a GUI application and I have a `take_a_screeshot` function which return the picture's filename ```pythonfrom eaiBat import EaiBatclass MyModel(EaiBat):    def some_action(self):        # Action I want to reuse in my steps        self.push_event((take_a_screenshot(), 'img'))```- In the steps definitions```pythonfrom behave import Givenfrom shutil import copy@Given('I set &quot;{user}&quot; user')def set_user_in_db(context, user):    try:        execute_sql_script(f'resources/script/{user}.sql')  # Assuming you have a function executing sql scripts        context.model.push_event(f&quot;The {user} is in the database&quot;)        copy(f'resources/script/{user}.sql', f'{context.model.evidence_location}/{user}.sql')        context.model.push_event((f'{user}.sql', 'sql'))    except Exception as exception:        context.model.push_event(f&quot;The step has failed due to {exception.args}&quot;)```</longdescription>
</pkgmetadata>