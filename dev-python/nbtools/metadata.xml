<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nbtools for JupyterLab[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/g2nb/nbtools/lab?urlpath=lab)[![Build Status](https://travis-ci.org/g2nb/nbtools.svg?branch=lab)](https://travis-ci.org/genepattern/nbtools)[![Documentation Status](https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat)](https://gpnotebook-website-docs.readthedocs.io/en/latest/)[![Docker Pulls](https://img.shields.io/docker/pulls/genepattern/genepattern-notebook.svg)](https://hub.docker.com/r/genepattern/lab/)[![Join the chat at https://gitter.im/g2nb](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/genepattern/genepattern-notebook?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)&lt;!--- ![Github Actions Status](https://github.com/g2nb/nbtools/workflows/Build/badge.svg) --&gt;**nbtools** is a framework for creating user-friendly Jupyter notebooks that are accessible to both programming and non-programming users. It is a core component of the [g2nb project](https://g2nb.org). The package provides:* A decorator which can transform any Python function into an interactive user interface.* A toolbox interface for encapsulating and adding new computational steps to a notebook.* Flexible theming and APIs to extend the nbtools functionality.### **Looking for classic Jupyter Notebook support?****Jupyter Notebook support is available, albeit not in active development. You can find it in its own branch. [Just click here!](https://github.com/g2nb/nbtools/tree/notebook)**## Requirements* JupyterLab &gt;= 3.0* ipywidgets &gt;= 7.5.0## DockerA Docker image with nbtools and the full JupyterLab stack is available through DockerHub.```bashdocker pull g2nb/labdocker run --rm -p 8888:8888 g2nb/lab```## InstallationAt the moment you may install a prerelease version from pip or create a development install from GitHub:```bashpip install --pre nbtools```***OR***```bash# Install ipywidgets, if you haven't alreadyjupyter nbextension enable --py widgetsnbextensionjupyter labextension install @jupyter-widgets/jupyterlab-manager# Clone the nbtools repositorygit clone https://github.com/g2nb/nbtools.gitcd nbtools# Install the nbtools JupyterLab prototypepip install -e .jupyter labextension develop . --overwritejupyter nbextension install --py nbtools --symlink --sys-prefixjupyter nbextension enable --py nbtools --sys-prefix```If installing from GitHub, before nbtools will load in your JupyterLab environment, you'll also need to build its labextension (see Development below). ## DevelopmentTo develop with nbtools, you will need to first install npm or yarn, as well as install nbtools' dependencies. One way to do this is through conda. An example is given below. Run these commands within the top-level directory of the repository.```bashconda install npm.  # Install npmnpm install         # Install package requirementsnpm run build       # Build the packagejupyter lab build   # Build JupyterLab with the extension installed```You can watch the source directory and run JupyterLab at the same time in different terminals to watch for changes in the extension's source and automatically rebuild the extension. To develop, run each of the following commands in a separate terminal. ```bashjlpm run watchjupyter lab```The `jlpm` command is JupyterLab's pinned version of [yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use `yarn` or `npm` in lieu of `jlpm`.With the watch command running, every saved change will immediately be built locally and available in your running JupyterLab. Refresh JupyterLab to load the change in your browser (you may need to wait several seconds for the extension to be rebuilt).By default, the `jlpm run build` command generates the source maps for this extension to make it easier to debug using the browser dev tools. To also generate source maps for the JupyterLab core extensions, you can run the following command:```bashjupyter lab build --minimize=False```### Uninstall```bashpip uninstall nbtools```## Getting StartedLet's start by writing a simple Hello World function and turning it into an interactive widget. Go ahead and install nbtools, launchJupyter and open a new, blank notebook.Once that's completed, let's write a basic function. The function below accepts a string and prints a brief message. By default, the message addresses the world. For good measure we will also add a docstring to document the function.```pythondef say_hello(to_whom='World'):    &quot;&quot;&quot;Say hello to the world or whomever.&quot;&quot;&quot;    print('Hello ' + to_whom)```This is pretty basic Python and hopefully everything so far is familiar. Next, we will turn this function into an interactive widget with just an import statement and one line of code. Update your code to what is shown below and execute the cell.```pythonimport nbtools@nbtools.build_uidef say_hello(to_whom='World'):    &quot;&quot;&quot;Say hello to the world or whomever.&quot;&quot;&quot;    print('Hello ' + to_whom)```You should now see a widget containing a web form. This form will prompt for the value of the `to_whom` parameter. The docstring will also appear as a description near the top of the widget. Go ahead and change the `to_whom` value, then click the &quot;Run&quot; button. This will execute the function and print the results below. Meanwhile, the form will also collapse, making more room on your screen.With the push of a button, you've run the `say_hello` function!This is exciting, but it is far from the only feature of the nbtools package. You can edit markdown cells using a WYSIWYG editor, customize how your function displays, chain together multiple related functions, make widgets from existing third-party methods, create a library of interactive tools (just click the Tools button on the toolbar and you will see `say_hello` has already added itself) and more! Just see the documentation links below.## Features* [UI Builder](docs/uibuilder.md)* [UI Output](docs/uioutput.md)* [Tool Manager API](docs/toolmanager.md)* [WYSWYG Editor](docs/wysiwyg.md)</longdescription>
</pkgmetadata>