<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-pgclone`django-pgclone` makes it easy to dump and restore Postgres databases.Here are some key features:1. Streaming dumps and restores to configurable storage backends like S3. Instances with limited memory aren't a problem for large databases.2. A restoration process that works behind the scenes, swapping in the restored database when finished.3. Configurable hooks into the dump and restore process, for example, migrating a restored database before it is swapped.4. Reversible restores, making it possible to quickly revert to the initial restore or the previous database.5. Re-usable configurations for instrumenting different types of dumps and restores.## QuickstartTo dump a database, do:    python manage.py pgclone dumpTo list database dump keys, do:    python manage.py pgclone lsTo restore a datase, do:    python manage.py pgclone restore &lt;dump_key&gt;Database dumps are relative to the storage location, which defaults to the local file system. Dump keys are in the format of `&lt;instance&gt;/&lt;database&gt;/&lt;config&gt;/&lt;timestamp&gt;.dump`.When listing, use an optional prefix. Restoring supports the same interface, using the latest key that matches the prefix.## Documentation[View the django-pgclone docs here](https://django-pgclone.readthedocs.io/) to learn more about:* The basics and an overview of how it works.* The core command docs.* Configuring an S3 storage backend.* Running management command hooks during dumping or restoring.* Creating restores that can be quickly reverted.* Re-using command parameters for different flows.* All settings.* Additional details on using AWS RDS databases.## Compatibility`django-pgclone` is compatible with Python 3.8 - 3.12, Django 3.2 - 5.0, Psycopg 2 - 3, and Postgres 12 - 16.## InstallationInstall `django-pgclone` with:    pip3 install django-pgcloneAfter this, add `pgclone` to the `INSTALLED_APPS` setting of your Django project.**Note**  Install the AWS CLI to enable the S3 storage backend. Use `pip install awscli` or follow the [installation guide here](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html).## Contributing GuideFor information on setting up `django-pgclone` for development and contributing changes, view [CONTRIBUTING.md](CONTRIBUTING.md).## Primary Authors- @wesleykendall (Wes Kendall)- @ethanpobrien (Ethan O'Brien)</longdescription>
</pkgmetadata>