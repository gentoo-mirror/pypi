<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SweetPea========| Build Status                                                                                                               ||----------------------------------------------------------------------------------------------------------------------------|| [![typecheck](../../actions/workflows/typecheck.yml/badge.svg)](../../actions/workflows/typecheck.yml)                     || [![acceptance (fast)](../../actions/workflows/acceptance-fast.yml/badge.svg)](../../actions/workflows/acceptance-fast.yml) || [![acceptance (slow)](../../actions/workflows/acceptance-slow.yml/badge.svg)](../../actions/workflows/acceptance-slow.yml) || [![package](../../actions/workflows/test.yml/badge.svg)](../../actions/workflows/test.yml)                                 |SweetPea is a domain-specific language for specifying factorial experimentaldesigns and synthesizing trial sequences from those design specifications. Anexplanation of factorial experimental designs and how to build and manipulatethem in SweetPea can be found in [the SweetPea Guide](https://sweetpea-org.github.io).&gt; See also the [paper](https://link.springer.com/article/10.3758/s13428-021-01598-2)&gt; describing SweetPea, but beware that the API has changed. The main changes are&gt; replacing most functions with classes, changing some function names, and&gt; simplifying the organization to just a `sweetpea` module that exports everything.SweetPea includes a synthesizer to generate sequences of trials thatsatisfy the design's constraints. The goal is to generate sequencesthat are unbiased: every possible sequence of trials that satifies thedesign constraints is equally likely to be generated, which avoidscorrelations that are not part of the experiment's definition. Withcurrent technologies, SweetPea achieves that goal for designs witheither simple constraints or a small number of combinations. SweetPeacan also generate samples that seem uniform in practice formedium-sized designs, although without a formal guarantee. Generatingunbiased samples for large designs remains an area of active researchand development.For designs that do not involve constraints that span trials within asequence, SweetPea can directly sample with combinatoric techniques.Realistic designs often involve transition constraints or othercross-trial constraints, however. For those cases, SweetPea's primarysampling strategy compiles an experiment design into a booleanformula; compilation ensures a 1-to-1 correspondence between distinctsatisfying assignments to the boolean formula and distinct trialsequences, so that uniformly sampling solutions to the boolean formulaimples a unform sample of trial sequences. SweetPea uses[CMSGen](https://github.com/kuldeepmeel/cmsgen) and[UniGen](https://github.com/kuldeepmeel/unigen) to sample solutions tothe boolean formula. CMSGen generates samples that appear to be welldistributed in practice, but CMSGen lacks a formal guarantee ofuniformity. UniGen provides statistical guarantees that the solutionsit finds are approximately uniformly probable, but its approach istractable only for the smallest designs that are expressed withSweetPea.## DependenciesSweetPea requires Python 3.7.9 or later.## InstallationThere are two ways to install SweetPea: from [the Python PackageIndex](https://pypi.org) (PyPI), or from source.### Installing from PyPISweetPea can be installed from PyPI via `pip`:    $ pip install sweetpea### Installing from SourceClone this repository, install SweetPea's dependencies, and installSweetPea itself:    $ git clone https://github.com/sweetpea-org/sweetpea-py.git    $ cd sweetpea-py    $ pip install -r requirements.txt    $ pip install .---&gt; #### :exclamation: Important!&gt;&gt; The `pip install .` command installs SweetPea locally, but it will not&gt; automatically check for updates. If you intend to manually update your local&gt; copy of SweetPea, you should instead do `pip install -e .` to tell `pip` to&gt; use the source dynamically.---## ExamplesThere are example programs in the [`example_programs`](example_programs/)directory, and there is a detailed explanation of how to use SweetPea in [theSweetPea Guide](https://sweetpea-org.github.io).## API DocumentationThe SweetPea API is documented in [the API section of the SweetPeaGuide](https://sweetpea-org.github.io/api.html).## ContributingInformation on how to contribute to SweetPea's development can be found in [theContributing section of the SweetPeaGuide](https://sweetpea-org.github.io/guide/contributing.html).</longdescription>
</pkgmetadata>