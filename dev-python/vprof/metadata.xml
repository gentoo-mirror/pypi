<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/vprof.svg)](https://pypi.python.org/pypi/vprof/)# vprofvprof is a Python package providing rich and interactive visualizations forvarious Python program characteristics such as running time and memory usage.It supports Python 3.4+ and distributed under BSD license.The project is in active development and some of its features might not work asexpected.## Screenshots![vprof-gif](http://i.imgur.com/ikBlfvQ.gif)## ContributingAll contributions are highly encouraged! You can add new features,report and fix existing bugs and write docs and tutorials.Feel free to open an issue or send a pull request!## PrerequisitesDependencies to build `vprof` from source code: * Python 3.4+ * `pip` * `npm` &gt;= 3.3.12`npm` is required to build `vprof` from sources only.## DependenciesAll Python and `npm` module dependencies are listed in `package.json` and`requirements.txt`.## Installation`vprof` can be installed from PyPI```shpip install vprof```To build `vprof` from sources, clone this repository and execute```shpython3 setup.py deps_install &amp;&amp; python3 setup.py build_ui &amp;&amp; python3 setup.py install```To install just `vprof` dependencies, run```shpython3 setup.py deps_install```## Usage```shvprof -c &lt;config&gt; &lt;src&gt;````&lt;config&gt;` is a combination of supported modes:* `c` - CPU flame graph  ⚠️ **Not available for windows [#62](https://github.com/nvdv/vprof/issues/62)**Shows CPU flame graph for `&lt;src&gt;`.* `p` - profilerRuns built-in Python profiler on `&lt;src&gt;` and displays results.* `m` - memory graphShows objects that are tracked by CPython GC and left in memory after codeexecution. Also shows process memory usage after execution of each line of `&lt;src&gt;`.* `h` - code heatmapDisplays all executed code of `&lt;src&gt;` with line run times and execution counts.`&lt;src&gt;` can be Python source file (e.g. `testscript.py`) or path to package(e.g. `myproject/test_package`).To run scripts with arguments use double quotes```shvprof -c cmh &quot;testscript.py --foo --bar&quot;```Modes can be combined```shvprof -c cm testscript.py````vprof` can also profile functions. In order to do this,launch `vprof` in remote mode:```shvprof -r````vprof` will open new tab in default web browser and then wait for stats.To profile a function run```pythonfrom vprof import runnerdef foo(arg1, arg2):    ...runner.run(foo, 'cmhp', args=(arg1, arg2), host='localhost', port=8000)```where `cmhp` is profiling mode, `host` and `port` are hostname and port of`vprof` server launched in remote mode. Obtained stats will be rendered in newtab of default web browser, opened by `vprof -r` command.`vprof` can save profile stats to file and render visualizations frompreviously saved file.```shvprof -c cmh src.py --output-file profile.json```writes profile to file and```shvprof --input-file profile.json```renders visualizations from previously saved file.Check `vprof -h` for full list of supported parameters.To show UI help, press `h` when visualizations are displayed.Also you can check `examples` directory for more profiling examples.## Testing```shpython3 setup.py test_python &amp;&amp; python3 setup.py test_javascript &amp;&amp; python3 setup.py e2e_test```## LicenseBSD</longdescription>
</pkgmetadata>