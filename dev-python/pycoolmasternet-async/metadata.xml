<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pycoolmasternet-asyncA Python 3 library for interacting with a [CoolMasterNet](https://coolautomation.com/products/coolmasternet/) HVAC bridge.This is a fork of [pycoolmaster](https://github.com/koreth/pycoolmasternet), modified to present an async interface and some other small changes.## InstallationYou can install pycoolmasternet-async from [PyPI](https://pypi.org/project/pycoolmasternet-async/):    pip3 install pycoolmasternet-asyncPython 3.7 and above are supported.## How to use```pythonfrom pycoolmasternet_async import CoolMasterNetcool = CoolMasterNet(&quot;coolmaster&quot;)# Supply the IP address and optional port number (default 10102).cool = CoolMasterNet(&quot;192.168.0.123&quot;, port=12345, read_timeout=1)# General informationinfo = await cool.info()# Returns a dict of CoolMasterNetUnit objects. Keys are the unit IDsunits = await cool.status()unit = units[&quot;L1.001&quot;]unit.unit_id# Temperature unit: Imperial, Celsiusunit.temperature_unit# Current reading of unit's thermometerunit.temperature# Current setting of unit's thermostatunit.thermostat# Setters return a new instance with updated infounit = await unit.set_thermostat(28)# True if unit is turned onunit.is_onunit = await unit.turn_on()unit = await unit.turn_off()# Fan speed: low, med, high, autounit.fan_speedunit = await unit.set_fan_speed('med')# Mode of operation: auto, cool, dry, fan, heatunit.modeunit = await unit.set_mode('cool')# Get fresh infounit = await unit.refresh()```</longdescription>
</pkgmetadata>