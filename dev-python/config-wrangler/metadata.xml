<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Config Wrangler[![pypi](https://img.shields.io/pypi/v/config-wrangler.svg)](https://pypi.org/project/config-wrangler/)[![license](https://img.shields.io/github/license/arcann/config_wrangler.svg)](https://github.com/arcann/config_wrangler/blob/master/LICENSE)pydantic based configuration wrangler. Handles reading multiple ini or toml files with inheritance rules and variable expansions.## InstallationInstall using your package manager of choice:  - `poetry add config-wrangler`  - `pip install -U config-wrangler`   - `conda install config-wrangler -c conda-forge`.## A Simple Exampleconfig.ini```ini[S3_Source]bucket_name=my.exmple-bucketkey_prefixes=processed/user_id=AK123456789ABC# Not a secure way to store the password, but OK for local prototype or examples.# See KEYRING or KEEPASS for better optionspassword_source=CONFIG_FILEraw_password=My secret password[target_database]dialect=sqlitedatabase_name=${test_section:my_environment:source_data_dir}/example_db[test_section]my_int=123my_float=123.45my_bool=Yesmy_str=ABC☕my_bytes=ABCⓁⓄⓋ☕my_list_auto_c=a,b,cmy_list_auto_nl=    a    b    cmy_list_auto_pipe=a|b|cmy_list_c=a,b,cmy_list_python=['x','y','z']my_list_json=[&quot;J&quot;,&quot;S&quot;,&quot;O&quot;,&quot;N&quot;]my_list_nl=    a    b    cmy_list_int_c=1,2,3my_tuple_c=a,b,cmy_tuple_nl=    a    b    cmy_tuple_int_c=1,2,3my_dict={1: &quot;One&quot;, 2: &quot;Two&quot;}my_dict_str_int={&quot;one&quot;: 1, &quot;two&quot;: 2}my_set={'A','B','C'}my_set_int=1,2,3my_frozenset=A,B,Cmy_date=2021-05-31my_time=11:55:23my_datetime=2021-05-31 11:23:53my_url=https://localhost:6553/[test_section.my_environment]name=dev# For example to run we'll make both paths relative to currenttemp_data_dir=.\temp_data\${test_section:my_environment:name}source_data_dir=.```python code```pyimport typingfrom datetime import date, time, datetimefrom pydantic import BaseModel, DirectoryPath, Field, AnyHttpUrlfrom config_wrangler.config_data_loaders.base_config_data_loader import BaseConfigDataLoaderfrom config_wrangler.config_from_ini_env import ConfigFromIniEnvfrom config_wrangler.config_from_loaders import ConfigFromLoadersfrom config_wrangler.config_templates.config_hierarchy import ConfigHierarchyfrom config_wrangler.config_templates.aws.s3_bucket import S3_Bucketfrom config_wrangler.config_templates.sqlalchemy_database import SQLAlchemyDatabasefrom config_wrangler.config_types.path_types import AutoCreateDirectoryPathfrom config_wrangler.config_types.delimited_field import DelimitedListFieldclass S3_Bucket_KeyPrefixes(S3_Bucket):    key_prefixes: typing.List[str]class Environment(ConfigHierarchy):    name: str = Field(..., env='env_name')    temp_data_dir: AutoCreateDirectoryPath    source_data_dir: DirectoryPathclass TestSection(BaseModel):    my_int: int    my_float: float    my_bool: bool    my_str: str    my_bytes: bytes    my_list_auto_c: list    my_list_auto_nl: list    my_list_auto_pipe: list    my_list_python: list    my_list_json: list    my_list_c: list = DelimitedListField(delimiter=',')    my_list_nl: list = DelimitedListField(delimiter='\n')    my_list_int_c: typing.List[int] = DelimitedListField(delimiter=',')    my_tuple_c: tuple = DelimitedListField(delimiter=',')    my_tuple_nl: tuple = DelimitedListField(delimiter='\n')    my_tuple_int_c: typing.Tuple[int, int, int] = DelimitedListField(delimiter=',')    my_dict: dict    my_dict_str_int: typing.Dict[str, int]    my_set: set    my_set_int: typing.Set[int]    my_frozenset: frozenset    my_date: date    my_time: time    my_datetime: datetime    my_url: AnyHttpUrl    my_environment: Environmentclass ETLConfig(ConfigFromIniEnv):    class Config:        validate_default = True        validate_assignment = True    target_database: SQLAlchemyDatabase    s3_source: S3_Bucket_KeyPrefixes    test_section: TestSectionclass ETLConfigAnyLoaders(ETLConfig):    def __init__(            self,            _config_data_loaders: typing.List[BaseConfigDataLoader],            **kwargs: typing.Dict[str, typing.Any]    ) -&gt; None:        # Skip super and call the next higher class        ConfigFromLoaders.__init__(            self,            _config_data_loaders=_config_data_loaders,            **kwargs        )def main():    config = ETLConfig(file_name='simple_example.ini')    print(f&quot;Temp data dir = {config.test_section.my_environment.temp_data_dir}&quot;)    # &gt; Temp data dir = temp_data\dev    print(f&quot;Source data dir = {config.test_section.my_environment.source_data_dir}&quot;)    # &gt; Source data dir = .    print(f&quot;my_int = {config.test_section.my_int}&quot;)    # &gt; my_int = 123    print(f&quot;my_float = {config.test_section.my_float}&quot;)    # &gt; my_float = 123.45    print(f&quot;my_str = {config.test_section.my_str}&quot;)    # &gt; my_str = ABC☕    print(f&quot;my_list_auto_c = {config.test_section.my_list_auto_c}&quot;)    # &gt; my_list_auto_c = ['a', 'b', 'c']    print(f&quot;my_list_auto_nl = {config.test_section.my_list_auto_nl}&quot;)    # &gt; my_list_auto_c = ['a', 'b', 'c']    print(f&quot;my_dict = {config.test_section.my_dict}&quot;)    # &gt; my_dict = {1: 'One', 2: 'Two'}    print(f&quot;my_set = {config.test_section.my_set}&quot;)    # &gt; my_set = {'C', 'A', 'B'}    print(f&quot;my_time = {config.test_section.my_time}&quot;)    # &gt; my_time = 11:55:23    print(f&quot;my_datetime = {config.test_section.my_datetime}&quot;)    # &gt; my_datetime = 2021-05-31 11:23:53    print(f&quot;my_url = {config.test_section.my_url}&quot;)    # &gt; my_url = https://localhost:6553/    # Getting DB engine (requires sqlalchemy optional install    engine = config.target_database.get_engine()    print(f&quot;target_database.engine = {engine}&quot;)    # &gt; target_database.engine = Engine(sqlite:///.example_db)    print(&quot;Getting S3 Data&quot;)    bucket = config.s3_source.get_bucket()    print(f&quot;S3 bucket definition = {bucket}&quot;)    for prefix in config.s3_source.key_prefixes:        print(f&quot;  bucket search prefix = {prefix}&quot;)    # &gt; Getting S3 Data    # &gt; credentials.py:56: UserWarning: Passwords stored directly in config or worse in code are not safe. Please make sure to fix this before deploying.    # &gt; S3 bucket definitition = s3.Bucket(name='my.exmple-bucket')    # &gt; bucket search prefix = processed/if __name__ == '__main__':    main()```</longdescription>
</pkgmetadata>