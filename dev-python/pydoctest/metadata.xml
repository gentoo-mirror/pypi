<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pydoctest: docstring signature verification=======================================[![PyPI version pydoctest](https://badge.fury.io/py/pydoctest.svg)](https://pypi.python.org/pypi/pydoctest/)![Tests](https://github.com/jepperaskdk/pydoctest/actions/workflows/python-package.yml/badge.svg)![PyPI - Downloads](https://img.shields.io/pypi/dm/pydoctest)[![codecov](https://codecov.io/gh/jepperaskdk/pydoctest/branch/main/graph/badge.svg?token=NSOW53NY9R)](https://codecov.io/gh/jepperaskdk/pydoctest)File issues here: [Issues tracker](https://github.com/jepperaskdk/pydoctest/issues)Motivation------------Pydoctest helps you verify that your docstrings match your function signatures.As a codebase evolves, you can some times forget to update the docstrings.Installation-----------Install pydoctest with pip:    $ python3 -m pip install pydoctestUsage-----------Navigate to your project location, and execute pydoctest    $ pydoctestWith no pydoctest.json configuration file, it will by default validate all .py files recursively in the current directory (`**/*.py`). See the configuration section for options.If you get errors with modules not being found, try placing the pydoctest.json differently or executing inside the package.Output----------Pydoctest supports outputting results either as `JSON` or `Text` with different verbosity options. By default, `Text` is returned. To specify the output, invoke with `--reporter` argument:    $ pydoctest --reporter [json | text]For Text-output, `--verbosity` can be provided with a value of 0 (quiet), 1 (show failed) or 2 (show all).    $ pydoctest --reporter text --verbosity 1Configuration-----------Pydoctest can be configured with a config JSON file. By default, it will search for `pydoctest.json` in the directory pydoctest is executed. A path can also be provided when executing:    $ pydoctest --config /path/to/pydoctest.jsonExample pydoctest.json:```json{    &quot;include_paths&quot;: [ &quot;server/*.py&quot; ],    &quot;fail_on_missing_docstring&quot;: true,    &quot;parser&quot;: &quot;google&quot;,}```Docstring format can be specified with the `--parser` argument:    $ pydoctest --parser googleCurrently, only google, numpy and sphinx are supported.Full list of configuration options:- &quot;include_paths&quot;: [ List of strings ]  # Patterns to search modules with. Defaults to `[**/*.py]`- &quot;exclude_paths&quot;: [ List of strings ]  # Patterns to exclude modules with. Defaults to `[&quot;**/__init__.py&quot;, &quot;**/setup.py&quot;]`- &quot;verbosity&quot;: [ 0 | 1 | 2 ]  # How much to print, 0 = quiet, 1 = show failed, 2 = show all.- &quot;parser&quot;: [ &quot;google&quot; (default) | &quot;sphinx&quot; | &quot;numpy&quot; ]  # Docstring format to use. Please raise an issue if you need other formats implemented.- &quot;fail_on_missing_docstring&quot;: [ true | false (default) ]  # Mark a function as failed, if it does not have a docstring.- &quot;fail_on_missing_summary&quot;: [ true | false (default) ]  # Mark a function as failed, if it does have a docstring, but no summary.- &quot;fail_on_raises_section&quot;: [ true (default) | false ]  # Mark a function as failed, if docstring doesn't mention raised exceptions correctly.- &quot;exclude_classes&quot;: [ List of strings ] # Patterns to exclude classes with, e.g. `[&quot;Test*]&quot;`- &quot;exclude_methods&quot;: [ List of strings ] # Patterns to exclude class methods with, e.g. for private methods you would use `[&quot;__*]&quot;`- &quot;exclude_functions&quot;: [ List of strings ] # Patterns to exclude functions with, e.g. for private methods you would use `[&quot;__*]&quot;`CLI------------Printing the help message shows all currently implemented cli options.```pydoctest --help```Example-------```# example_file.pydef func_type_mismatch(self, a: int) -&gt; int:    &quot;&quot;&quot;[summary]    Args:        a (float): [description]        &lt;-- float is not int    Returns:        int: [description]    &quot;&quot;&quot;    pass# /example_file.py::func_type_mismatch FAIL | Argument type differ. Argument 'a' was expected (from signature) to have type '&lt;class 'int'&gt;', but has (in docs) type '&lt;class 'float'&gt;'Tested 1 function(s) across 1 module(s).Succeeded: 0, Failed: 1, Skipped: 0```Editor support-------Currently `pydoctest` is supported by `vscode`: https://github.com/jepperaskdk/vscode-pydoctest![example_file_vscode](https://user-images.githubusercontent.com/10128260/162623354-b8596f89-f29b-467d-9376-ef9e2f277e7b.gif)License-------Pydoctest is licensed under the terms of the MIT License (see the LICENSE file).</longdescription>
</pkgmetadata>