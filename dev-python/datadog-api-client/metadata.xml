<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># datadog-api-client-pythonThis repository contains a Python API client for the [Datadog API](https://docs.datadoghq.com/api/).## RequirementsBuilding and using the API client library requires [Python 3.7+](https://www.python.org/downloads/).## InstallationTo install the API client library, simply execute:```shellpip install datadog-api-client```## Getting StartedPlease follow the [installation](#installation) instruction and execute the following Python code:```pythonfrom datadog_api_client import ApiClient, Configurationfrom datadog_api_client.v1.api.monitors_api import MonitorsApifrom datadog_api_client.v1.model.monitor import Monitorfrom datadog_api_client.v1.model.monitor_type import MonitorTypebody = Monitor(    name=&quot;example&quot;,    type=MonitorType(&quot;log alert&quot;),    query='logs(&quot;service:foo AND type:error&quot;).index(&quot;main&quot;).rollup(&quot;count&quot;).by(&quot;source&quot;).last(&quot;5m&quot;) &gt; 2',    message=&quot;some message Notify: @hipchat-channel&quot;,    tags=[&quot;test:example&quot;, &quot;env:ci&quot;],    priority=3,)configuration = Configuration()with ApiClient(configuration) as api_client:    api_instance = MonitorsApi(api_client)    response = api_instance.create_monitor(body=body)    print(response)```### AuthenticationBy default the library will use the `DD_API_KEY` and `DD_APP_KEY` environment variables to authenticate against the Datadog API.To provide your own set of credentials, you need to set some keys on the configuration:```pythonconfiguration.api_key[&quot;apiKeyAuth&quot;] = &quot;&lt;API KEY&gt;&quot;configuration.api_key[&quot;appKeyAuth&quot;] = &quot;&lt;APPLICATION KEY&gt;&quot;```### Unstable EndpointsThis client includes access to Datadog API endpoints while they are in an unstable state and may undergo breaking changes. An extra configuration step is required to enable these endpoints:```pythonconfiguration.unstable_operations[&quot;&lt;OperationName&gt;&quot;] = True```where `&lt;OperationName&gt;` is the name of the method used to interact with that endpoint. For example: `list_log_indexes`, or `get_logs_index`### Changing ServerWhen talking to a different server, like the `eu` instance, change the `server_variables` on your configuration object:```pythonconfiguration.server_variables[&quot;site&quot;] = &quot;datadoghq.eu&quot;```### Disable compressed payloadsIf you want to disable GZIP compressed responses, set the `compress` flagon your configuration object:```pythonconfiguration.compress = False```### Enable requests loggingIf you want to enable requests logging, set the `debug` flag on your configuration object:```pythonconfiguration.debug = True```### Enable retryIf you want to enable retry when getting status code `429` rate-limited, set `enable_retry` to `True````python    configuration.enable_retry = True```The default max retry is `3`, you can change it with `max_retries````python    configuration.max_retries = 5```### Configure proxyYou can configure the client to use proxy by setting the `proxy` key on configuration object:```pythonconfiguration.proxy = &quot;http://127.0.0.1:80&quot;```### Threads supportYou can run API calls in a thread by using `ThreadedApiClient` in place of `ApiClient`. API calls will thenreturn a `AsyncResult` instance on which you can call get to retrieve the result:```pythonfrom datadog_api_client import Configuration, ThreadedApiClientfrom datadog_api_client.v1.api.dashboards_api import DashboardsApiconfiguration = Configuration()with ThreadedApiClient(configuration) as api_client:    api_instance = DashboardsApi(api_client)    result = api_instance.list_dashboards()    dashboards = result.get()    print(dashboards)```### Asyncio supportThe library supports asynchronous operations when using `AsyncApiClient` for the transport. When that client is used,the API methods will then return coroutines that you can wait for.To make async support available, you need to install the extra `async` qualifiers during installation: `pip install datadog-api-client[async]`.```pythonimport asynciofrom datadog_api_client import Configuration, AsyncApiClientfrom datadog_api_client.v1.api.dashboards_api import DashboardsApiasync def main():    configuration = Configuration()    async with AsyncApiClient(configuration) as api_client:        api_instance = DashboardsApi(api_client)        dashboards = await api_instance.list_dashboards()        print(dashboards)asyncio.run(main())```### PaginationSeveral listing operations have a pagination method to help consume all the items available.For example, to retrieve all your incidents:```pythonfrom datadog_api_client import ApiClient, Configurationfrom datadog_api_client.v2.api.incidents_api import IncidentsApiconfiguration = Configuration()configuration.unstable_operations[&quot;list_incidents&quot;] = Truewith ApiClient(configuration) as api_client:    api_instance = IncidentsApi(api_client)    for incident in api_instance.list_incidents_with_pagination():        print(incident.id)```## Documentation for API Endpoints and ModelsDocumentation for API endpoints and models are available on [readthedocs](https://datadog-api-client.readthedocs.io/).## Documentation for AuthorizationAuthenticate with the API by providing your API and Application keys in the configuration:```pythonconfiguration.api_key[&quot;apiKeyAuth&quot;] = &quot;YOUR_API_KEY&quot;configuration.api_key[&quot;appKeyAuth&quot;] = &quot;YOUR_APPLICATION_KEY&quot;```## Authorsupport@datadoghq.com</longdescription>
</pkgmetadata>