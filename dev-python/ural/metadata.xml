<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/medialab/ural/workflows/Tests/badge.svg)](https://github.com/medialab/ural/actions)# UralA helper library full of URL-related heuristics.## InstallationYou can install `ural` with pip with the following command:```pip install ural```## Usage*Generic functions** [could_be_html](#could_be_html)* [ensure_protocol](#ensure_protocol)* [force_protocol](#force_protocol)* [get_domain_name](#get_domain_name)* [get_hostname](#get_hostname)* [get_normalized_hostname](#get_normalized_hostname)* [has_special_host](#has_special_host)* [has_valid_suffix](#has_valid_suffix)* [has_valid_tld](#has_valid_tld)* [infer_redirection](#infer_redirection)* [is_homepage](#is_homepage)* [is_shortened_url](#is_shortened_url)* [is_special_host](#is_special_host)* [is_typo_url](#is_typo_url)* [is_url](#is_url)* [is_valid_tld](#is_valid_tld)* [normalize_hostname](#normalize_hostname)* [normalize_url](#normalize_url)* [should_follow_href](#should_follow_href)* [should_resolve](#should_resolve)* [split_suffix](#split_suffix)* [strip_protocol](#strip_protocol)* [urlpathsplit](#urlpathsplit)* [urls_from_html](#urls_from_html)* [urls_from_text](#urls_from_text)*Utilities** [Upgrading suffixes and TLDs](#upgrading-suffixes-and-tlds)*Classes** [HostnameTrieSet](#hostnametrieset)  * [#.add](#hostnametrieset-add)  * [#.match](#hostnametrieset-match)*LRU-related functions* ([What on earth is a LRU?](#lru-explanation))* [lru.url_to_lru](#lruurl_to_lru)* [lru.lru_to_url](#lrulru_to_url)* [lru.lru_stems](#lrulru_stems)* [lru.normalized_lru_stems](#lrunormalized_lru_stems)* [lru.serialize_lru](#lruserialize_lru)* [lru.unserialize_lru](#lruunserialize_lru)*LRU-related classes** [LRUTrie](#LRUTrie)  * [#.set](#lrutrie-set)  * [#.set_lru](#lrutrie-set_lru)  * [#.match](#lrutrie-match)  * [#.match_lru](#lrutrie-match_lru)* [NormalizedLRUTrie](#NormalizedLRUTrie)*Platform-specific functions** [facebook](#facebook)  * [has_facebook_comments](#has_facebook_comments)  * [is_facebook_id](#is_facebook_id)  * [is_facebook_full_id](#is_facebook_full_id)  * [is_facebook_url](#is_facebook_url)  * [is_facebook_post_url](#is_facebook_post_url)  * [is_facebook_link](#is_facebook_link)  * [convert_facebook_url_to_mobile](#convert_facebook_url_to_mobile)  * [parse_facebook_url](#parse_facebook_url)  * [extract_url_from_facebook_link](#extract_url_from_facebook_link)* [google](#google)  * [is_amp_url](#is_amp_url)  * [is_google_link](#is_google_link)  * [extract_url_from_google_link](#extract_url_from_google_link)  * [extract_id_from_google_drive_url](#extract_id_from_google_drive_url)  * [parse_google_drive_url](#parse_google_drive_url)* [instagram](#instagram)  * [is_instagram_post_shortcode](#is_instagram_post_shortcode)  * [is_instagram_username](#is_instagram_username)  * [is_instagram_url](#is_instagram_url)  * [extract_username_from_instagram_url](#extract_username_from_instagram_url)  * [parse_instagram_url](#parse_instagram_url)* [telegram](#telegram)  * [is_telegram_message_id](#is_telegram_message_id)  * [is_telegram_url](#is_telegram_url)  * [convert_telegram_url_to_public](#convert_telegram_url_to_public)  * [extract_channel_name_from_telegram_url](#extract_channel_name_from_telegram_url)  * [parse_telegram_url](#parse_telegram_url)* [twitter](#twitter)  * [is_twitter_url](#is_twitter_url)  * [extract_screen_name_from_twitter_url](#extract_screen_name_from_twitter_url)  * [parse_twitter_url](#parse_twitter_url)* [youtube](#youtube)  * [is_youtube_url](#is_youtube_url)  * [is_youtube_video_id](#is_youtube_video_id)  * [parse_youtube_url](#parse_youtube_url)  * [extract_video_id_from_youtube_url](#extract_video_id_from_youtube_url)  * [normalize_youtube_url](#normalize_youtube_url)---### could_be_htmlFunction returning whether the url could return HTML.```pythonfrom ural import could_be_htmlcould_be_html('https://www.lemonde.fr')&gt;&gt;&gt; Truecould_be_html('https://www.lemonde.fr/articles/page.php')&gt;&gt;&gt; Truecould_be_html('https://www.lemonde.fr/data.json')&gt;&gt;&gt; Falsecould_be_html('https://www.lemonde.fr/img/figure.jpg')&gt;&gt;&gt; False```---### ensure_protocolFunction checking if the url has a protocol, and adding the given one if there is none.```pythonfrom ural import ensure_protocolensure_protocol('www.lemonde.fr', protocol='https')&gt;&gt;&gt; 'https://www.lemonde.fr'```*Arguments** **url** *string*: URL to format.* **protocol** *string*: protocol to use if there is none in **url**. Is 'http' by default.---### force_protocolFunction force-replacing the protocol of the given url.```pythonfrom ural import force_protocolforce_protocol('https://www2.lemonde.fr', protocol='ftp')&gt;&gt;&gt; 'ftp://www2.lemonde.fr'```*Arguments** **url** *string*: URL to format.* **protocol** *string*: protocol wanted in the output url. Is `'http'` by default.---### get_domain_nameFunction returning an url's domain name. This function is of course tld-aware and will return `None` if no valid domain name can be found.```pythonfrom ural import get_domain_nameget_domain_name('https://facebook.com/path')&gt;&gt;&gt; 'facebook.com'```---### get_hostnameFunction returning the given url's full hostname. It can work on scheme-less urls.```pythonfrom ural import get_hostnameget_hostname('http://www.facebook.com/path')&gt;&gt;&gt; 'www.facebook.com'```---### get_normalized_hostnameFunction returning the given url's normalized hostname, i.e. without usually irrelevant subdomains etc. Works a lot like [normalize_url](#normalize_url).```pythonfrom ural import get_normalized_hostnameget_normalized_hostname('http://www.facebook.com/path')&gt;&gt;&gt; 'facebook.com'get_normalized_hostname('http://fr-FR.facebook.com/path', strip_lang_subdomains=True)&gt;&gt;&gt; 'facebook.com'```*Arguments** **url** *str*: Target url.* **infer_redirection** *bool* [`True`]: whether to attempt resolving common redirects by leveraging well-known GET parameters.* **normalize_amp** *?bool* [`True`]: Whether to attempt to normalize Google AMP subdomains.* **strip_lang_subdomains** *?bool* [`False`]: Whether to drop language-specific subdomains.---### has_special_hostFunction returning whether the given url looks like it has a special host.```pythonfrom ural import has_special_hosthas_special_host('http://104.19.154.83')&gt;&gt;&gt; Truehas_special_host('http://youtube.com')&gt;&gt;&gt; False```---### has_valid_suffixFunction returning whether the given url has a valid suffix as per [Mozzila's Public Suffix List](https://wiki.mozilla.org/Public_Suffix_List).```pythonfrom ural import has_valid_suffixhas_valid_suffix('http://lemonde.fr')&gt;&gt;&gt; Truehas_valid_suffix('http://lemonde.doesnotexist')&gt;&gt;&gt; False# Also works with hostnameshas_valid_suffix('lemonde.fr')&gt;&gt;&gt; True```---### has_valid_tldFunction returning whether the given url has a valid Top Level Domain (TLD) as per [IANA's list](https://data.iana.org/TLD/tlds-alpha-by-domain.txt).```pythonfrom ural import has_valid_tldhas_valid_tld('http://lemonde.fr')&gt;&gt;&gt; Truehas_valid_tld('http://lemonde.doesnotexist')&gt;&gt;&gt; False# Also works with hostnameshas_valid_tld('lemonde.fr')&gt;&gt;&gt; True```---### infer_redirectionFunction attempting to find obvious clues in the given url that it is in fact a redirection and resolving the redirection automatically without firing any HTTP request. If nothing is found, the given url will be returned as-is.The function is by default recursive and will attempt to infer redirections until none is found, but you can disable this behavior if you need to.```pythonfrom ural import infer_redirectioninfer_redirection('https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https%3A%2F%2Fm.youtube.com%2Fwatch%3Fv%3D4iJBsjHMviQ&amp;ved=2ahUKEwiBm-TO3OvkAhUnA2MBHQRPAR4QwqsBMAB6BAgDEAQ&amp;usg=AOvVaw0i7y2_fEy3nwwdIZyo_qug')&gt;&gt;&gt; 'https://m.youtube.com/watch?v=4iJBsjHMviQ'infer_redirection('https://test.com?url=http%3A%2F%2Flemonde.fr%3Fnext%3Dhttp%253A%252F%252Ftarget.fr')&gt;&gt;&gt; 'http://target.fr'infer_redirection(  'https://test.com?url=http%3A%2F%2Flemonde.fr%3Fnext%3Dhttp%253A%252F%252Ftarget.fr',  recursive=False)&gt;&gt;&gt; 'http://lemonde.fr?next=http%3A%2F%2Ftarget.fr'```---### is_homepageFunction returning whether the given url is *probably* a website's homepage, based on its path.```pythonfrom ural import is_homepageis_homepage('http://lemonde.fr')&gt;&gt;&gt; Trueis_homepage('http://lemonde.fr/index.html')&gt;&gt;&gt; Trueis_homepage('http://lemonde.fr/business/article5.html')&gt;&gt;&gt; False```---### is_shortened_urlFunction returning whether the given url is *probably* a shortened url. It works by matching the given url domain against most prominent shortener domains. So the result could be a false negative.```pythonfrom ural import is_shortened_urlis_shortened_url('http://lemonde.fr')&gt;&gt;&gt; Falseis_shortened_url('http://bit.ly/1sNZMwL')&gt;&gt;&gt; True```---### is_special_hostFunction returning whether the given hostname looks like a special host.```pythonfrom ural import is_special_hostis_special_host('104.19.154.83')&gt;&gt;&gt; Trueis_special_host('youtube.com')&gt;&gt;&gt; False```---### is_typo_urlFunction returning whether the given string is *probably* a typo error. This function doesn't test if the given string is a valid url. It works by matching the given url tld against most prominent typo-like tlds or by matching the given string against most prominent inclusive language terminations. So the result could be a false negative.```pythonfrom ural import is_typo_urlis_typo_url('http://dirigeants.es')&gt;&gt;&gt; Trueis_typo_url('https://www.instagram.com')&gt;&gt;&gt; False```---### is_urlFunction returning whether the given string is a valid url.```pythonfrom ural import is_urlis_url('https://www2.lemonde.fr')&gt;&gt;&gt; Trueis_url('lemonde.fr/economie/article.php', require_protocol=False)&gt;&gt;&gt; Trueis_url('lemonde.falsetld/whatever.html', tld_aware=True)&gt;&gt;&gt; False```*Arguments** **string** *string*: string to test.* **require_protocol** *bool* [`True`]: whether the argument has to have a protocol to be considered a url.* **tld_aware** *bool* [`False`]: whether to check if the url's tld actually exists or not.* **allow_spaces_in_path** *bool* [`False`]: whether the allow spaces in URL paths.* **only_http_https** *bool* [`True`]: whether to only allow the `http` and `https` protocols.---### is_valid_tldFunction returning whether the given Top Level Domain (TLD) is valid as per [IANA's list](https://data.iana.org/TLD/tlds-alpha-by-domain.txt).```pythonfrom ural import is_valid_tldis_valid_tld('.fr')&gt;&gt;&gt; Trueis_valid_tld('com')&gt;&gt;&gt; Trueis_valid_tld('.doesnotexist')&gt;&gt;&gt; False```---### normalize_hostnameFunction normalizing the given hostname, i.e. without usually irrelevant subdomains etc. Works a lot like [normalize_url](#normalize_url).```pythonfrom ural import normalize_hostnamenormalize_hostname('www.facebook.com')&gt;&gt;&gt; 'facebook.com'normalize_hostname('fr-FR.facebook.com', strip_lang_subdomains=True)&gt;&gt;&gt; 'facebook.com'```---### normalize_urlFunction normalizing the given url by stripping it of usually non-discriminant parts such as irrelevant query items or sub-domains etc.This is a very useful utility when attempting to match similar urls written slightly differently when shared on social media etc.```pythonfrom ural import normalize_urlnormalize_url('https://www2.lemonde.fr/index.php?utm_source=google')&gt;&gt;&gt; 'lemonde.fr'```*Arguments** **url** *string*: URL to normalize.* **infer_redirection** *?bool* [`True`]: whether to attempt resolving common redirects by leveraging well-known GET parameters.* **fix_common_mistakes** *?bool* [`True`]: whether to attempt to fix common URL mistakes.* **normalize_amp** *?bool* [`True`]: whether to attempt to normalize Google AMP urls.* **quoted** *?bool* [`True`]: whether to normalize to a quoted or unquoted version of the url.* **sort_query** *?bool* [`True`]: whether to sort query items.* **strip_authentication** *?bool* [`True`]: whether to strip authentication.* **strip_fragment** *?bool|str* [`'except-routing'`]: whether to strip the url's fragment. If set to `except-routing`, will only strip the fragment if the fragment is not deemed to be js routing (i.e. if it contains a `/`).* **strip_index** *?bool* [`True`]: whether to strip trailing index.* **strip_irrelevant_subdomains** *?bool* [`False`]: whether to strip irrelevant subdomains such as `www` etc.* **strip_lang_query_items** *?bool* [`False`]: whether to strip language query items (ex: `gl=pt_BR`).* **strip_lang_subdomains** *?bool* [`False`]: whether to strip language subdomains (ex: `fr-FR.lemonde.fr` to only `lemonde.fr` because `fr-FR` isn't a relevant subdomain, it indicates the language and the country).* **strip_protocol** *?bool* [`True`]: whether to strip the url's protocol.* **strip_trailing_slash** *?bool* [`True`]: whether to strip trailing slash.* **unsplit** *?bool* [`True`]: whether to return a stringified version of the normalized url or directly the `SplitResult` instance worked on by the normalization process.---### should_follow_hrefFunction returning whether the given href should be followed (usually from a crawler's context). This means it will filter out anchors, and url having a scheme which is not http/https.```pythonfrom ural import should_follow_hrefshould_follow_href('#top')&gt;&gt;&gt; Falseshould_follow_href('http://lemonde.fr')&gt;&gt;&gt; Trueshould_follow_href('/article.html')&gt;&gt;&gt; True```---### should_resolveFunction returning whether the given function looks like something you would want to resolve because the url will *probably* lead to some redirection.It is quite similar to [is_shortened_url](#is_shortened_url) but covers more ground since it also deal with url patterns which are not shortened per se.```pythonfrom ural import should_resolveshould_resolve('http://lemonde.fr')&gt;&gt;&gt; Falseshould_resolve('http://bit.ly/1sNZMwL')&gt;&gt;&gt; Trueshould_resolve('https://doi.org/10.4000/vertigo.26405')&gt;&gt;&gt; True```---### split_suffixFunction splitting a hostname or a url's hostname into the domain part and the suffix part (while respecting [Mozzila's Public Suffix List](https://wiki.mozilla.org/Public_Suffix_List)).```pythonfrom ural import split_suffixsplit_suffix('http://www.bbc.co.uk/article.html')&gt;&gt;&gt; ('www.bbc', 'co.uk')split_suffix('http://www.bbc.idontexist')&gt;&gt;&gt; Nonesplit_suffix('lemonde.fr')&gt;&gt;&gt; ('lemonde', 'fr')```---### strip_protocolFunction removing the protocol from the url.```pythonfrom ural import strip_protocolstrip_protocol('https://www2.lemonde.fr/index.php')&gt;&gt;&gt; 'www2.lemonde.fr/index.php'```*Arguments** **url** *string*: URL to format.---### urlpathsplitFunction taking a url and returning its path, tokenized as a list.```pythonfrom ural import urlpathspliturlpathsplit('http://lemonde.fr/section/article.html')&gt;&gt;&gt; ['section', 'article.html']urlpathsplit('http://lemonde.fr/')&gt;&gt;&gt; []# If you want to split a path directlyfrom ural import pathsplitpathsplit('/section/articles/')&gt;&gt;&gt; ['section', 'articles']```---### urls_from_htmlFunction returning an iterator over the urls present in the links of given HTML text.```pythonfrom ural import urls_from_htmlhtml = &quot;&quot;&quot;&lt;p&gt;Hey! Check this site: &lt;a href=&quot;https://medialab.sciencespo.fr/&quot;&gt;médialab&lt;/a&gt;&lt;/p&gt;&quot;&quot;&quot;for url in urls_from_html(html):    print(url)&gt;&gt;&gt; 'https://medialab.sciencespo.fr/'```*Arguments** **string** *string*: html string.* **base_url** *?string*: base url to join with relative urls.---### urls_from_textFunction returning an iterator over the urls present in the string argument. Extracts only urls having a protocol.Note that this function is somewhat markdown-aware, and punctuation-aware.```pythonfrom ural import urls_from_texttext = &quot;Hey! Check this site: https://medialab.sciencespo.fr/, it looks really cool. They're developing many tools on https://github.com/&quot;for url in urls_from_text(text):    print(url)&gt;&gt;&gt; 'https://medialab.sciencespo.fr/'&gt;&gt;&gt; 'https://github.com/'```*Arguments** **string** *string*: source string.---### Upgrading suffixes and TLDsIf you want to upgrade the package's data wrt Mozilla suffixes and IANA TLDs, you can do so either by running the following command:```bashpython -m ural upgrade```or directly in your python code:```pythonfrom ural.tld import upgradeupgrade()# Or if you want to patch runtime only this time, or regularly# (for long running programs or to avoid rights issues etc.):upgrade(transient=True)```---### HostnameTrieSetClass implementing a hierarchic set of hostnames so you can efficiently query whether urls match hostnames in the set.```pythonfrom ural import HostnameTrieSettrie = HostnameTrieSet()trie.add('lemonde.fr')trie.add('business.lefigaro.fr')trie.match('https://liberation.fr/article1.html')&gt;&gt;&gt; Falsetrie.match('https://lemonde.fr/article1.html')&gt;&gt;&gt; Truetrie.match('https://www.lemonde.fr/article1.html')&gt;&gt;&gt; Truetrie.match('https://lefigaro.fr/article1.html')&gt;&gt;&gt; Falsetrie.match('https://business.lefigaro.fr/article1.html')&gt;&gt;&gt; True```&lt;h4 id=&quot;hostnametrieset-add&quot;&gt;#.add&lt;/h4&gt;Method add a single hostname to the set.```pythonfrom ural import HostnameTrieSettrie = HostnameTrieSet()trie.add('lemonde.fr')```*Arguments** **hostname** *string*: hostname to add to the set.&lt;h4 id=&quot;hostnametrieset-match&quot;&gt;#.match&lt;/h4&gt;Method returning whether the given url matches any of the set's hostnames.```pythonfrom ural import HostnameTrieSettrie = HostnameTrieSet()trie.add('lemonde.fr')trie.match('https://liberation.fr/article1.html')&gt;&gt;&gt; Falsetrie.match('https://lemonde.fr/article1.html')&gt;&gt;&gt; True```*Arguments** **url** *string|urllib.parse.SplitResult*: url to match.---### lru.url_to_lruFunction converting the given url to a serialized lru.```pythonfrom ural.lru import url_to_lruurl_to_lru('http://www.lemonde.fr:8000/article/1234/index.html?field=value#2')&gt;&gt;&gt; 's:http|t:8000|h:fr|h:lemonde|h:www|p:article|p:1234|p:index.html|q:field=value|f:2|'```*Arguments** **url** *string*: url to convert.* **suffix_aware** *?bool*: whether to be mindful of suffixes when converting (e.g. considering &quot;co.uk&quot; as a single token).---### lru.lru_to_urlFunction converting the given serialized lru or lru stems to a proper url.```pythonfrom ural.lru import lru_to_urllru_to_url('s:http|t:8000|h:fr|h:lemonde|h:www|p:article|p:1234|p:index.html|')&gt;&gt;&gt; 'http://www.lemonde.fr:8000/article/1234/index.html'lru_to_url(['s:http', 'h:fr', 'h:lemonde', 'h:www', 'p:article', 'p:1234', 'p:index.html'])&gt;&gt;&gt; 'http://www.lemonde.fr:8000/article/1234/index.html'```---### lru.lru_stemsFunction returning url parts in hierarchical order.```pythonfrom ural.lru import lru_stemslru_stems('http://www.lemonde.fr:8000/article/1234/index.html?field=value#2')&gt;&gt;&gt; ['s:http', 't:8000', 'h:fr', 'h:lemonde', 'h:www', 'p:article', 'p:1234', 'p:index.html', 'q:field=value', 'f:2']```*Arguments** **url** *string*: URL to parse.* **suffix_aware** *?bool*: whether to be mindful of suffixes when converting (e.g. considering &quot;co.uk&quot; as a single token).---### lru.normalized_lru_stemsFunction normalizing url and returning its parts in hierarchical order.```pythonfrom ural.lru import normalized_lru_stemsnormalized_lru_stems('http://www.lemonde.fr/article/1234/index.html?field=value#2')&gt;&gt;&gt; ['h:fr', 'h:lemonde', 'p:article', 'p:1234', 'q:field=value']```*Arguments*This function accepts the same arguments as [normalize_url](#normalize_url).---### lru.serialize_lruFunction serializing lru stems to a string.```pythonfrom ural.lru import serialize_lruserialize_lru(['s:https', 'h:fr', 'h:lemonde'])&gt;&gt;&gt; 's:https|h:fr|h:lemonde|'```---### lru.unserialize_lruFunction unserializing stringified lru to a list of stems.```pythonfrom ural.lru import unserialize_lruunserialize_lru('s:https|h:fr|h:lemonde|')&gt;&gt;&gt; ['s:https', 'h:fr', 'h:lemonde']```---### LRUTrieClass implementing a prefix tree (Trie) storing URLs hierarchically by storing them as LRUs along with some arbitrary metadata. It is very useful when needing to match URLs by longest common prefix.Note that this class directly inherits from the `phylactery` library's [`TrieDict`](https://github.com/Yomguithereal/phylactery/blob/master/phylactery/triedict.py) so you can also use any of its methods.```pythonfrom ural.lru import LRUTrietrie = LRUTrie()# To respect suffixestrie = LRUTrie(suffix_aware=True)```&lt;h4 id=&quot;lrutrie-set&quot;&gt;#.set&lt;/h4&gt;Method storing a URL in a LRUTrie along with its metadata.```pythonfrom ural.lru import LRUTrietrie = LRUTrie()trie.set('http://www.lemonde.fr', {'type': 'general press'})trie.match('http://www.lemonde.fr')&gt;&gt;&gt; {'type': 'general press'}```*Arguments** **url** *string*: url to store in the LRUTrie.* **metadata** *any*: metadata of the url.&lt;h4 id=&quot;lrutrie-set_lru&quot;&gt;#.set_lru&lt;/h4&gt;Method storing a URL already represented as a LRU or LRU stems along with its metadata.```pythonfrom ural.lru import LRUTrietrie = LRUTrie()# Using stemstrie.set_lru(['s:http', 'h:fr', 'h:lemonde', 'h:www'], {'type': 'general press'})# Using serialized lrutrie.set_lru('s:http|h:fr|h:lemonde|h:www|', {'type': 'general_press'})```*Arguments** **lru** *string|list*: lru to store in the Trie.* **metadata** *any*: metadata to attach to the lru.&lt;h4 id=&quot;lrutrie-match&quot;&gt;#.match&lt;/h4&gt;Method returning the metadata attached to the longest prefix match of your query URL. Will return `None` if no common prefix can be found.```pythonfrom ural.lru import LRUTrietrie = LRUTrie()trie.set('http://www.lemonde.fr', {'media': 'lemonde'})trie.match('http://www.lemonde.fr')&gt;&gt;&gt; {'media': 'lemonde'}trie.match('http://www.lemonde.fr/politique')&gt;&gt;&gt; {'media': 'lemonde'}trie.match('http://www.lefigaro.fr')&gt;&gt;&gt; None```*Arguments** **url** *string*: url to match in the LRUTrie.&lt;h4 id=&quot;lrutrie-match_lru&quot;&gt;#.match_lru&lt;/h4&gt;Method returning the metadata attached to the longest prefix match of your query LRU. Will return `None` if no common prefix can be found.```pythonfrom ural.lru import LRUTrietrie = LRUTrie()trie.set(['s:http', 'h:fr', 'h:lemonde', 'h:www'], {'media': 'lemonde'})trie.match(['s:http', 'h:fr', 'h:lemonde', 'h:www'])&gt;&gt;&gt; {'media': 'lemonde'}trie.match('s:http|h:fr|h:lemonde|h:www|p:politique|')&gt;&gt;&gt; {'media': 'lemonde'}trie.match(['s:http', 'h:fr', 'h:lefigaro', 'h:www'])&gt;&gt;&gt; None```*Arguments** **lru** *string|list*: lru to match in the LRUTrie.---### NormalizedLRUTrieThe `NormalizedLRUTrie` is nearly identical to the standard [`LRUTrie`](#LRUTrie) except that it normalized urls given to it before attempting any operation. It is a good choice if you want to avoid prefix queries issues related to `http` vs `https` or `www` shenanigans, for instance.To tweak its normalization, you can give to `NormalizedLRUTrie` the same options you would give to [`normalize_url`](#normalize_url):```pythonfrom ural.lru import NormalizedLRUTrietrie = NormalizedLRUTrie(normalize_amp=False)```Note that there are still some differences between the `LRUTrie` and the `NormalizedLRUTrie`:1. The `NormalizedLRUTrie` cannot be TLD aware.2. The `NormalizedLRUTrie` does not have the `#.set_lru` and `#.match_lru`  methods.---### Facebook#### has_facebook_commentsFunction returning whether the given url is pointing to a Facebook resource potentially having comments (such as a post, photo or video for instance).```pythonfrom ural.facebook import has_facebook_commentshas_facebook_comments('https://www.facebook.com/permalink.php?story_fbid=1354978971282622&amp;id=598338556946671')&gt;&gt;&gt; Truehas_facebook_comments('https://www.facebook.com/108824017345866/videos/311658803718223')&gt;&gt;&gt; Truehas_facebook_comments('https://www.facebook.com/astucerie/')&gt;&gt;&gt; Falsehas_facebook_comments('https://www.lemonde.fr')&gt;&gt;&gt; Falsehas_facebook_comments('/permalink.php?story_fbid=1354978971282622&amp;id=598338556946671', allow_relative_urls=True)&gt;&gt;&gt; True```#### is_facebook_idFunction returning whether the given string is a valid Facebook id or not.```pythonfrom ural.facebook import is_facebook_idis_facebook_id('974583586343')&gt;&gt;&gt; Trueis_facebook_id('whatever')&gt;&gt;&gt; False```#### is_facebook_full_idFunction returning whether the given string is a valid Facebook full post id or not.```pythonfrom ural.facebook import is_facebook_full_idis_facebook_full_id('974583586343_9749757953')&gt;&gt;&gt; Trueis_facebook_full_id('974583586343')&gt;&gt;&gt; Falseis_facebook_full_id('whatever')&gt;&gt;&gt; False```#### is_facebook_urlFunction returning whether given url is from Facebook or not.```pythonfrom ural.facebook import is_facebook_urlis_facebook_url('http://www.facebook.com/post/974583586343')&gt;&gt;&gt; Trueis_facebook_url('https://fb.me/846748464')&gt;&gt;&gt; Trueis_facebook_url('https://www.lemonde.fr')&gt;&gt;&gt; False```#### is_facebook_post_urlFunction returning whether the given url is a Facebook post or not.```pythonfrom ural.facebook import is_facebook_post_urlis_facebook_post_url('http://www.facebook.com/post/974583586343')&gt;&gt;&gt; Trueis_facebook_post_url('http://www.facebook.com')&gt;&gt;&gt; Falseis_facebook_post_url('https://www.lemonde.fr')&gt;&gt;&gt; False```#### is_facebook_linkFunction returning whether the given url is a Facebook redirection link.```pythonfrom ural.facebook import is_facebook_linkis_facebook_link('https://l.facebook.com/l.php?u=http%3A%2F%2Fwww.chaos-controle.com%2Farchives%2F2013%2F10%2F14%2F28176300.html&amp;amp;h=AT0iUqJpUTMzHAH8HAXwZ11p8P3Z-SrY90wIXZhcjMnxBTHMiau8Fv1hvz00ZezRegqmF86SczyUXx3Gzdt_MdFH-I4CwHIXKKU9L6w522xwOqkOvLAylxojGEwrp341uC-GlVyGE2N7XwTPK9cpP0mQ8PIrWh8Qj2gHIIR08Js0mUr7G8Qe9fx66uYcfnNfTTF1xi0Us8gTo4fOZxAgidGWXsdgtU_OdvQqyEm97oHzKbWfXjkhsrzbtb8ZNMDwCP5099IMcKRD8Hi5H7W3vwh9hd_JlRgm5Z074epD_mGAeoEATE_QUVNTxO0SHO4XNn2Z7LgBamvevu1ENBcuyuSOYA0BsY2cx8mPWJ9t44tQcnmyQhBlYm_YmszDaQx9IfVP26PRqhsTLz-kZzv0DGMiJFU78LVWVPc9QSw2f9mA5JYWr29w12xJJ5XGQ6DhJxDMWRnLdG8Tnd7gZKCaRdqDER1jkO72u75-o4YuV3CLh4j-_4u0fnHSzHdVD8mxr9pNEgu8rvJF1E2H3-XbzA6F2wMQtFCejH8MBakzYtTGNvHSexSiKphE04Ci1Z23nBjCZFsgNXwL3wbIXWfHjh2LCKyihQauYsnvxp6fyioStJSGgyA9GGEswizHa20lucQF0S0F8H9-')&gt;&gt;&gt; Trueis_facebook_link('https://lemonde.fr')&gt;&gt;&gt; False```#### convert_facebook_url_to_mobileFunction returning the mobile version of the given Facebook url. Will raise an exception if a non-Facebook url is given.```pythonfrom ural.facebook import convert_facebook_url_to_mobileconvert_facebook_url_to_mobile('http://www.facebook.com/post/974583586343')&gt;&gt;&gt; 'http://m.facebook.com/post/974583586343'```#### parse_facebook_urlFunction parsing the given Facebook url.```pythonfrom ural.facebook import parse_facebook_url# Importing related classes if you need to perform testsfrom ural.facebook import (  FacebookHandle,  FacebookUser,  FacebookGroup,  FacebookPost,  FacebookPhoto,  FacebookVideo)parse_facebook_url('https://www.facebook.com/people/Sophia-Aman/102016783928989')&gt;&gt;&gt; FacebookUser(id='102016783928989')parse_facebook_url('https://www.facebook.com/groups/159674260452951')&gt;&gt;&gt; FacebookGroup(id='159674260452951')parse_facebook_url('https://www.facebook.com/groups/159674260852951/permalink/1786992671454427/')&gt;&gt;&gt; FacebookPost(id='1786992671454427', group_id='159674260852951')parse_facebook_url('https://www.facebook.com/108824017345866/videos/311658803718223')&gt;&gt;&gt; FacebookVideo(id='311658803718223', parent_id='108824017345866')parse_facebook_url('https://www.facebook.com/photo.php?fbid=10222721681573727')&gt;&gt;&gt; FacebookPhoto(id='10222721681573727')parse_facebook_url('/annelaure.rivolu?rc=p&amp;__tn__=R', allow_relative_urls=True)&gt;&gt;&gt; FacebookHandle(handle='annelaure.rivolu')parse_facebook_url('https://lemonde.fr')&gt;&gt;&gt; None```#### extract_url_from_facebook_linkFunction extracting target url from a Facebook redirection link.```pythonfrom ural.facebook import extract_url_from_facebook_linkextract_url_from_facebook_link('https://l.facebook.com/l.php?u=http%3A%2F%2Fwww.chaos-controle.com%2Farchives%2F2013%2F10%2F14%2F28176300.html&amp;amp;h=AT0iUqJpUTMzHAH8HAXwZ11p8P3Z-SrY90wIXZhcjMnxBTHMiau8Fv1hvz00ZezRegqmF86SczyUXx3Gzdt_MdFH-I4CwHIXKKU9L6w522xwOqkOvLAylxojGEwrp341uC-GlVyGE2N7XwTPK9cpP0mQ8PIrWh8Qj2gHIIR08Js0mUr7G8Qe9fx66uYcfnNfTTF1xi0Us8gTo4fOZxAgidGWXsdgtU_OdvQqyEm97oHzKbWfXjkhsrzbtb8ZNMDwCP5099IMcKRD8Hi5H7W3vwh9hd_JlRgm5Z074epD_mGAeoEATE_QUVNTxO0SHO4XNn2Z7LgBamvevu1ENBcuyuSOYA0BsY2cx8mPWJ9t44tQcnmyQhBlYm_YmszDaQx9IfVP26PRqhsTLz-kZzv0DGMiJFU78LVWVPc9QSw2f9mA5JYWr29w12xJJ5XGQ6DhJxDMWRnLdG8Tnd7gZKCaRdqDER1jkO72u75-o4YuV3CLh4j-_4u0fnHSzHdVD8mxr9pNEgu8rvJF1E2H3-XbzA6F2wMQtFCejH8MBakzYtTGNvHSexSiKphE04Ci1Z23nBjCZFsgNXwL3wbIXWfHjh2LCKyihQauYsnvxp6fyioStJSGgyA9GGEswizHa20lucQF0S0F8H9-')&gt;&gt;&gt; 'http://www.chaos-controle.com/archives/2013/10/14/28176300.html'extract_url_from_facebook_link('http://lemonde.fr')&gt;&gt;&gt; None```---### Google#### is_amp_urlReturns whether the given url is probably a Google AMP url.```pythonfrom ural.google import is_amp_urlis_amp_url('http://www.europe1.fr/sante/les-onze-vaccins.amp')&gt;&gt;&gt; Trueis_amp_url('https://www.lemonde.fr')&gt;&gt;&gt; False```#### is_google_linkReturns whether the given url is a Google search link.```pythonfrom ural.google import is_google_linkis_google_link('https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjp8Lih_LnmAhWQlxQKHVTmCJYQFjADegQIARAB&amp;url=http%3A%2F%2Fwww.mon-ip.com%2F&amp;usg=AOvVaw0sfeZJyVtUS2smoyMlJmes')&gt;&gt;&gt; Trueis_google_link('https://www.lemonde.fr')&gt;&gt;&gt; False```#### extract_url_from_google_linkExtracts the url from the given Google search link. This is useful to &quot;resolve&quot; the links scraped from Google's search results. Returns `None` if given url is not valid nor relevant.```pythonfrom ural.google import extract_url_from_google_linkextract_url_from_google_link('https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwicu4K-rZzmAhWOEBQKHRNWA08QFjAAegQIARAB&amp;url=https%3A%2F%2Fwww.facebook.com%2Fieff.ogbeide&amp;usg=AOvVaw0vrBVCiIHUr5pncjeLpPUp')&gt;&gt;&gt; 'https://www.facebook.com/ieff.ogbeide'extract_url_from_google_link('https://www.lemonde.fr')&gt;&gt;&gt; None```#### extract_id_from_google_drive_urlExtracts a file id from the given Google drive url. Returns `None` if given url is not valid nor relevant.```pythonfrom ural.google import extract_id_from_google_drive_urlextract_id_from_google_drive_url('https://docs.google.com/spreadsheets/d/1Q9sJtAb1BZhUMjxCLMrVASx3AoNDp5iV3VkbPjlg/edit#gid=0')&gt;&gt;&gt; '1Q9sJtAb1BZhUMjxCLMrVASx3AoNDp5iV3VkbPjlg'extract_id_from_google_drive_url('https://www.lemonde.fr')&gt;&gt;&gt; None```#### parse_google_drive_urlParse the given Google drive url. Returns `None` if given is not valid nor relevant.```pythonfrom ural.google import (  parse_google_drive_url,  GoogleDriveFile,  GoogleDrivePublicLink)parse_google_drive_url('https://docs.google.com/spreadsheets/d/1Q9sJtAb1BZhUMjxCLMrVASx3AoNDp5iV3VkbPjlg/edit#gid=0')&gt;&gt;&gt; GoogleDriveFile('spreadsheets', '1Q9sJtAb1BZhUMjxCLMrVASx3AoNDp5iV3VkbPjlg')parse_google_drive_url('https://www.lemonde.fr')&gt;&gt;&gt; None```---### Instagram#### is_instagram_post_shortcodeFunction returning whether the given string is a valid Instagram post shortcode or not.```pythonfrom ural.instagram import is_instagram_post_shortcodeis_instagram_post_shortcode('974583By-5_86343')&gt;&gt;&gt; Trueis_instagram_post_shortcode('whatever!!')&gt;&gt;&gt; False```#### is_instagram_usernameFunction returning whether the given string is a valid Instagram username or not.```pythonfrom ural.instagram import is_instagram_usernameis_instagram_username('97458.3By-5_86343')&gt;&gt;&gt; Trueis_instagram_username('whatever!!')&gt;&gt;&gt; False```#### is_instagram_urlReturns whether the given url is from Instagram.```pythonfrom ural.instagram import is_instagram_urlis_instagram_url('https://lemonde.fr')&gt;&gt;&gt; Falseis_instagram_url('https://www.instagram.com/guillaumelatorre')&gt;&gt;&gt; True```#### extract_username_from_instagram_urlReturn a username from the given Instagram url or `None` if we could not find one.```pythonfrom ural.instagram import extract_username_from_instagram_urlextract_username_from_instagram_url('https://www.instagram.com/martin_dupont/p/BxKRx5CHn5i/')&gt;&gt;&gt; 'martin_dupont'extract_username_from_instagram_url('https://lemonde.fr')&gt;&gt;&gt; None```#### parse_instagram_urlReturns parsed information about the given Instagram url: either about the post, the user or the reel. If the url is an invalid Instagram url or if not an Instagram url, the function returns `None`.```pythonfrom ural.instagram import (  parse_instagram_url,  # You can also import the named tuples if you need them  InstagramPost,  InstagramUser,  InstagramReel)parse_instagram_url('https://www.instagram.com/martin_dupont/p/BxKRx5CHn5i/')&gt;&gt;&gt; InstagramPost(id='BxKRx5CHn5i', name='martin_dupont')parse_instagram_url('https://lemonde.fr')&gt;&gt;&gt; Noneparse_instagram_url('https://www.instagram.com/p/BxKRx5-Hn5i/')&gt;&gt;&gt; InstagramPost(id='BxKRx5-Hn5i', name=None)parse_instagram_url('https://www.instagram.com/martin_dupont')&gt;&gt;&gt; InstagramUser(name='martin_dupont')parse_instagram_url('https://www.instagram.com/reels/BxKRx5-Hn5i')&gt;&gt;&gt; InstagramReel(id='BxKRx5-Hn5i')```*Arguments** **url** *str*: Instagram url to parse.---### Telegram#### is_telegram_message_idFunction returning whether the given string is a valid Telegram message id or not.```pythonfrom ural.telegram import is_telegram_message_idis_telegram_message_id('974583586343')&gt;&gt;&gt; Trueis_telegram_message_id('whatever')&gt;&gt;&gt; False```#### is_telegram_urlReturns whether the given url is from Telegram.```pythonfrom ural.telegram import is_telegram_urlis_telegram_url('https://lemonde.fr')&gt;&gt;&gt; Falseis_telegram_url('https://telegram.me/guillaumelatorre')&gt;&gt;&gt; Trueis_telegram_url('https://t.me/s/jesstern')&gt;&gt;&gt; True```#### convert_telegram_url_to_publicFunction returning the public version of the given Telegram url. Will raise an exception if a non-Telegram url is given.```pythonfrom ural.teglegram import convert_telegram_url_to_publicconvert_telegram_url_to_public('https://t.me/jesstern')&gt;&gt;&gt; 'https://t.me/s/jesstern'```#### extract_channel_name_from_telegram_urlReturn a channel from the given Telegram url or `None` if we could not find one.```pythonfrom ural.telegram import extract_channel_name_from_telegram_urlextract_channel_name_from_telegram_url('https://t.me/s/jesstern/345')&gt;&gt;&gt; 'jesstern'extract_channel_name_from_telegram_url('https://lemonde.fr')&gt;&gt;&gt; None```#### parse_telegram_urlReturns parsed information about the given telegram url: either about the channel, message or user. If the url is an invalid Telegram url or if not a Telegram url, the function returns `None`.```pythonfrom ural.telegram import (  parse_telegram_url,  # You can also import the named tuples if you need them  TelegramMessage,  TelegramChannel,  TelegramGroup)parse_telegram_url('https://t.me/s/jesstern/76')&gt;&gt;&gt; TelegramMessage(name='jesstern', id='76')parse_telegram_url('https://lemonde.fr')&gt;&gt;&gt; Noneparse_telegram_url('https://telegram.me/rapsocialclub')&gt;&gt;&gt; TelegramChannel(name='rapsocialclub')parse_telegram_url('https://t.me/joinchat/AAAAAE9B8u_wO9d4NiJp3w')&gt;&gt;&gt; TelegramGroup(id='AAAAAE9B8u_wO9d4NiJp3w')```*Arguments** **url** *str*: Telegram url to parse.---### Twitter#### is_twitter_urlReturns whether the given url is from Twitter.```pythonfrom ural.twitter import is_twitter_urlis_twitter_url('https://lemonde.fr')&gt;&gt;&gt; Falseis_twitter_url('https://www.twitter.com/Yomguithereal')&gt;&gt;&gt; Trueis_twitter_url('https://twitter.com')&gt;&gt;&gt; True```#### extract_screen_name_from_twitter_urlExtracts a normalized user's screen name from a Twitter url. If given an irrelevant url, the function will return `None`.```pythonfrom ural.twitter import extract_screen_name_from_twitter_urlextract_screen_name_from_twitter_url('https://www.twitter.com/Yomguithereal')&gt;&gt;&gt; 'yomguithereal'extract_screen_name_from_twitter_url('https://twitter.fr')&gt;&gt;&gt; None```#### parse_twitter_urlTakes a Twitter url and returns either a `TwitterUser` namedtuple (contains a screen_name) if the given url is a link to a twitter user, a `TwitterTweet` namedtuple (contains a user_screen_name and an id) if the given url is a tweet's url, a `TwitterList` namedtuple (contains an id) or `None` if the given url is irrelevant.```pythonfrom ural.twitter import parse_twitter_urlparse_twitter_url('https://twitter.com/Yomguithereal')&gt;&gt;&gt; TwitterUser(screen_name='yomguithereal')parse_twitter_url('https://twitter.com/medialab_ScPo/status/1284154793376784385')&gt;&gt;&gt; TwitterTweet(user_screen_name='medialab_scpo', id='1284154793376784385')parse_twitter_url('https://twitter.com/i/lists/15512656222798157826')&gt;&gt;&gt; TwitterList(id='15512656222798157826')parse_twitter_url('https://twitter.com/home')&gt;&gt;&gt; None```---### Youtube#### is_youtube_urlReturns whether the given url is from Youtube.```pythonfrom ural.youtube import is_youtube_urlis_youtube_url('https://lemonde.fr')&gt;&gt;&gt; Falseis_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')&gt;&gt;&gt; Trueis_youtube_url('https://youtu.be/otRTOE9i51o)&gt;&gt;&gt; True```#### is_youtube_video_idReturns whether the given string is a formally valid Youtube id. Note that it won't validate the fact that this id actually refers to an existing video or not. You will need to call Youtube servers for that.```pythonfrom ural.youtube import is_youtube_video_idis_youtube_video_id('otRTOE9i51o')&gt;&gt;&gt; Trueis_youtube_video_id('bDYTYET')&gt;&gt;&gt; False```#### parse_youtube_urlReturns parsed information about the given youtube url: either about the linked video, user or channel. If the url is an invalid Youtube url or if not a Youtube url, the function returns `None`.```pythonfrom ural.youtube import (  parse_youtube_url,  # You can also import the named tuples if you need them  YoutubeVideo,  YoutubeUser,  YoutubeChannel)parse_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')&gt;&gt;&gt; YoutubeVideo(id='otRTOE9i51o')parse_youtube_url('https://lemonde.fr')&gt;&gt;&gt; Noneparse_youtube_url('http://www.youtube.com/channel/UCWvUxN9LAjJ-sTc5JJ3gEyA/videos')&gt;&gt;&gt; YoutubeChannel(id='UCWvUxN9LAjJ-sTc5JJ3gEyA', name=None)parse_youtube_url('http://www.youtube.com/user/ojimfrance')&gt;&gt;&gt; YoutubeUser(id=None, name='ojimfrance')parse_youtube_url('https://www.youtube.com/taranisnews')&gt;&gt;&gt; YoutubeChannel(id=None, name='taranisnews')```*Arguments** **url** *str*: Youtube url to parse.* **fix_common_mistakes** *bool* [`True`]: Whether to fix common mistakes that can be found in Youtube urls as you can find them when crawling the web.#### extract_video_id_from_youtube_urlReturn a video id from the given Youtube url or `None` if we could not find one.```pythonfrom ural.youtube import extract_video_id_from_youtube_urlextract_video_id_from_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')&gt;&gt;&gt; 'otRTOE9i51o'extract_video_id_from_youtube_url('https://lemonde.fr')&gt;&gt;&gt; Noneextract_video_id_from_youtube_url('http://youtu.be/afa-5HQHiAs')&gt;&gt;&gt; 'afa-5HQHiAs'```#### normalize_youtube_urlReturns a normalized version of the given Youtube url. It will normalize video, user and channel urls so you can easily match them.```pythonfrom ural.youtube import normalize_youtube_urlnormalize_youtube_url('https://www.youtube.com/watch?v=otRTOE9i51o')&gt;&gt;&gt; 'https://www.youtube.com/watch?v=otRTOE9i51o'normalize_youtube_url('http://youtu.be/afa-5HQHiAs')&gt;&gt;&gt; 'https://www.youtube.com/watch?v=afa-5HQHiAs'```---## Miscellaneous&lt;h3 id=&quot;lru-explanation&quot;&gt;About LRUs&lt;/h2&gt;*TL;DR*: a LRU is a hierarchical reordering of a URL so that one can perform meaningful prefix queries on URLs.If you observe many URLs, you will quickly notice that they are not written in sound hierarchical order. In this URL, for instance:```http://business.lemonde.fr/articles/money.html?id=34#content```Some parts, such as the subdomain, are written in an &quot;incorrect order&quot;. And this is fine, really, this is how URLs always worked.But if what you really want is to match URLs, you will need to reorder them so that their order closely reflects the hierarchy of their targeted content. And this is exactly what LRUs are (that and also a bad pun on URL, since a LRU is basically a &quot;reversed&quot; URL).Now look how the beforementioned URL could be splitted into LRU stems:```python[  's:http',  'h:fr',  'h:lemonde',  'h:business',  'p:articles',  'p:money.html',  'q:id=34',  'f:content']```And typically, this list of stems will be serialized thusly:```s:http|h:fr|h:lemonde|h:business|p:articles|p:money.html|q:id=34|f:content|```The trailing slash is added so that serialized LRUs can be *prefix-free*.</longdescription>
</pkgmetadata>