<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Domovoi: AWS Lambda event handler manager=========================================*Domovoi* is an extension to `AWS Chalice &lt;https://github.com/awslabs/chalice&gt;`_ to handle `AWS Lambda&lt;https://aws.amazon.com/lambda/&gt;`_ `event sources&lt;http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html#intro-core-components-event-sources&gt;`_ otherthan HTTP requests through API Gateway. Domovoi lets you easily configure and deploy a Lambda function to serve HTTPrequests through `ALB &lt;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html&gt;`_,on a schedule, or in response to a variety of events like an `SNS &lt;https://aws.amazon.com/sns/&gt;`_or `SQS &lt;https://aws.amazon.com/sqs/&gt;`_ message, S3 event, or custom`state machine &lt;https://aws.amazon.com/step-functions/&gt;`_ transition:.. code-block:: python    import json, boto3, domovoi    app = domovoi.Domovoi()    # Compared to API Gateway, ALB increases the response timeout from 30s to 900s, but reduces the payload    # limit from 10MB to 1MB. It also does not try to negotiate on the Accept/Content-Type headers.    @app.alb_target()    def serve(event, context):        return dict(statusCode=200,                    statusDescription=&quot;200 OK&quot;,                    isBase64Encoded=False,                    headers={&quot;Content-Type&quot;: &quot;application/json&quot;},                    body=json.dumps({&quot;hello&quot;: &quot;world&quot;}))    @app.scheduled_function(&quot;cron(0 18 ? * MON-FRI *)&quot;)    def foo(event, context):        context.log(&quot;foo invoked at 06:00pm (UTC) every Mon-Fri&quot;)        return dict(result=True)    @app.scheduled_function(&quot;rate(1 minute)&quot;)    def bar(event, context):        context.log(&quot;bar invoked once a minute&quot;)        boto3.resource(&quot;sns&quot;).create_topic(Name=&quot;bartender&quot;).publish(Message=json.dumps({&quot;beer&quot;: 1}))        return dict(result=&quot;Work work work&quot;)    @app.sns_topic_subscriber(&quot;bartender&quot;)    def tend(event, context):        message = json.loads(event[&quot;Records&quot;][0][&quot;Sns&quot;][&quot;Message&quot;])        context.log(dict(beer=&quot;Quadrupel&quot;, quantity=message[&quot;beer&quot;]))    # SQS messages are deleted upon successful exit, requeued otherwise.    # See https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html    @app.sqs_queue_subscriber(&quot;my_queue&quot;, batch_size=64)    def process_queue_messages(event, context):        message = json.loads(event[&quot;Records&quot;][0][&quot;body&quot;])        message_attributes = event[&quot;Records&quot;][0][&quot;messageAttributes&quot;]        # You can colocate a state machine definition with an SQS handler to launch a SFN driven lambda from SQS.        return app.state_machine.start_execution(**message)[&quot;executionArn&quot;]    @app.cloudwatch_event_handler(source=[&quot;aws.ecs&quot;])    def monitor_ecs_events(event, context):        message = json.loads(event[&quot;Records&quot;][0][&quot;Sns&quot;][&quot;Message&quot;])        context.log(&quot;Got an event from ECS: {}&quot;.format(message))    @app.s3_event_handler(bucket=&quot;myS3bucket&quot;, events=[&quot;s3:ObjectCreated:*&quot;], prefix=&quot;foo&quot;, suffix=&quot;.bar&quot;)    def monitor_s3(event, context):        context.log(&quot;Got an event from S3: {}&quot;.format(event))    # Set use_sns=False, use_sqs=False to subscribe your Lambda directly to S3 events without forwarding them through an SNS-SQS bridge.    # That approach has fewer moving parts, but you can only subscribe one Lambda function to events in a given S3 bucket.    @app.s3_event_handler(bucket=&quot;myS3bucket&quot;, events=[&quot;s3:ObjectCreated:*&quot;], prefix=&quot;foo&quot;, suffix=&quot;.bar&quot;, use_sns=False, use_sqs=False)    def monitor_s3(event, context):        context.log(&quot;Got an event from S3: {}&quot;.format(event))    # DynamoDB event format: https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html    @app.dynamodb_stream_handler(table_name=&quot;MyDynamoTable&quot;, batch_size=200)    def handle_dynamodb_stream(event, context):        context.log(&quot;Got {} events from DynamoDB&quot;.format(len(event[&quot;Records&quot;])))        context.log(&quot;First event: {}&quot;.format(event[&quot;Records&quot;][0][&quot;dynamodb&quot;]))    # Use the following command to log a CloudWatch Logs message that will trigger this handler:    # python -c'import watchtower as w, logging as l; L=l.getLogger(); L.addHandler(w.CloudWatchLogHandler()); L.error(dict(x=8))'    # See http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html for the filter pattern syntax    @app.cloudwatch_logs_sub_filter_handler(log_group_name=&quot;watchtower&quot;, filter_pattern=&quot;{$.x = 8}&quot;)    def monitor_cloudwatch_logs(event, context):        print(&quot;Got a CWL subscription filter event:&quot;, event)    # See http://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html    # See the &quot;AWS Step Functions state machines&quot; section below for a complete example of setting up a state machine.    @app.step_function_task(state_name=&quot;Worker&quot;, state_machine_definition=state_machine)    def worker(event, context):        return {&quot;result&quot;: event[&quot;input&quot;] + 1, &quot;my_state&quot;: context.stepfunctions_task_name}Installation------------::    pip install domovoiUsage-----First-time setup::    domovoi new-project* Edit the Domovoi app entry point in ``app.py`` using examples above.* Edit the IAM policy for your Lambda function in ``my_project/.chalice/policy-dev.json`` to add any permissions it  needs.* Deploy the event handlers::    domovoi deployTo stage files into the deployment package, use a ``domovoilib`` directory in your project where you would use``chalicelib`` in Chalice. For example, ``my_project/domovoilib/rds_cert.pem`` becomes ``/var/task/domovoilib/rds_cert.pem``with your function executing in ``/var/task/app.py`` with ``/var/task`` as the working directory. See the`Chalice docs &lt;http://chalice.readthedocs.io/&gt;`_ for more information on how to set up Chalice configuration.Supported event types~~~~~~~~~~~~~~~~~~~~~See `Supported Event Sources &lt;http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html&gt;`_ for anoverview of event sources that can be used to trigger Lambda functions. Domovoi supports the following event sources:* `ALB HTTPS requests &lt;https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html&gt;`_* `SNS subscriptions &lt;https://docs.aws.amazon.com/lambda/latest/dg/with-sns.html&gt;`_* `SQS queues &lt;https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html&gt;`_* CloudWatch Events rule targets, including  `CloudWatch Scheduled Events &lt;https://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html&gt;`_ (see  `CloudWatch Events Event Examples &lt;http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html&gt;`_ for a  list of event types supported by CloudWatch Events)* `S3 events &lt;https://docs.aws.amazon.com/lambda/latest/dg/with-s3.html&gt;`_* AWS Step Functions state machine tasks* `CloudWatch Logs filter subscriptions &lt;https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchlogs.html&gt;`_* `DynamoDB stream events &lt;https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html&gt;`_Possible future event sources to support:* Kinesis stream events* SES (email) eventsAWS Step Functions state machines~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Domovoi supports AWS Lambda integration with `AWS Step Functions&lt;https://aws.amazon.com/documentation/step-functions&gt;`_. Step Functions state machines can be started using the`StartExecution &lt;http://docs.aws.amazon.com/step-functions/latest/apireference/API_StartExecution.html&gt;`_ method or the`API Gateway Step Functions integration&lt;http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-api-gateway.html&gt;`_.See the `domovoi/examples &lt;domovoi/examples&gt;`_ directory for examples of Domovoi ``app.py`` apps using a state machine,including a loop that restarts the Lambda when it's about to hit its execution time limit, and a threadpool pattern thatdivides work between multiple Lambdas.When creating a Step Functions State Machine driven Domovoi daemon Lambda, the State Machine assumes the same IAM role asthe Lambda itself. To allow the State Machine to invoke the Lambda, edit the IAM policy (under your app directory, in``.chalice/policy-dev.json``) to include a statement allowing the &quot;lambda:InvokeFunction&quot; action on all resources, or on theARN of the Lambda itself.Configuration~~~~~~~~~~~~~ALB^^^To use your Lambda as an ALB target with the ``@alb_target(prefix=&quot;...&quot;)`` decorator, you should pre-configure thefollowing resources in your AWS account:* A Route 53 hosted DNS zone such as ``example.com.``, with a domain (``example.com``) pointing to it* An active (verified/issued) ACM certificate for a DNS name within your DNS zone, such as ``domovoi.example.com``After configuring these, set the ``alb_acm_cert_dns_name`` configuration key in the file ``.chalice/config.json`` toyour DNS name. For example::  {    &quot;app_name&quot;: &quot;my_app&quot;,    ...    &quot;alb_acm_cert_dns_name&quot;: &quot;domovoi.example.com&quot;  }Domovoi will automatically create, manage, and link the ALB and DNS record in your Route 53 zone.Dead Letter Queues^^^^^^^^^^^^^^^^^^To enable your Lambda function to forward failed invocation notifications to `dead letter queues&lt;http://docs.aws.amazon.com/lambda/latest/dg/dlq.html&gt;`_, set the configuration key ``dead_letter_queue_target_arn`` inthe file ``.chalice/config.json`` to the target DLQ ARN. For example::  {    &quot;app_name&quot;: &quot;my_app&quot;,    ...    &quot;dead_letter_queue_target_arn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:my-dlq&quot;  }You may need to update your Lambda IAM policy (``.chalice/policy-dev.json``) to give your Lambda access to SNS or SQS.Concurrency Reservations^^^^^^^^^^^^^^^^^^^^^^^^For high volume Lambda invocations in accounts with multiple Lambdas, you may need to set `per-function concurrencylimits &lt;https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html&gt;`_ to partition the overall concurrencyquota and prevent one set of Lambdas from overloading another. In Domovoi, you can do so by setting the configurationkey ``reserved_concurrent_executions`` in the file ``.chalice/config.json`` to the desired concurrency reservation. Forexample::  {    &quot;app_name&quot;: &quot;my_app&quot;,    ...    &quot;reserved_concurrent_executions&quot;: 500  }Links-----* `Project home page (GitHub) &lt;https://github.com/kislyuk/domovoi&gt;`_* `Documentation (Read the Docs) &lt;https://domovoi.readthedocs.org/en/latest/&gt;`_* `Package distribution (PyPI) &lt;https://pypi.python.org/pypi/domovoi&gt;`_* `Change log &lt;https://github.com/kislyuk/domovoi/blob/master/Changes.rst&gt;`_Bugs~~~~Please report bugs, issues, feature requests, etc. on `GitHub &lt;https://github.com/kislyuk/domovoi/issues&gt;`_.License-------Licensed under the terms of the `Apache License, Version 2.0 &lt;http://www.apache.org/licenses/LICENSE-2.0&gt;`_... image:: https://travis-ci.org/kislyuk/domovoi.png        :target: https://travis-ci.org/kislyuk/domovoi.. image:: https://codecov.io/github/kislyuk/domovoi/coverage.svg?branch=master        :target: https://codecov.io/github/kislyuk/domovoi?branch=master.. image:: https://img.shields.io/pypi/v/domovoi.svg        :target: https://pypi.python.org/pypi/domovoi.. image:: https://img.shields.io/pypi/l/domovoi.svg        :target: https://pypi.python.org/pypi/domovoi.. image:: https://readthedocs.org/projects/domovoi/badge/?version=latest        :target: https://domovoi.readthedocs.org/</longdescription>
</pkgmetadata>