<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>compress_json=========================================================================================|pip| |downloads|The missing Python utility to read and write large compressed JSONs.The library is loosely based on the `compress_pickle &lt;https://github.com/lucianopaz/compress_pickle&gt;`_ library.How do I install this package?----------------------------------------------As usual, just download it using pip:.. code:: shell    pip install compress_jsonAvailable compression modes----------------------------------------------The compression modes, detected automatically by the file name, are **gzip**, **bz2** and **lzma**,with the notable exception of **zip** which seems difficult to integrate in the JSON pipeline.Usage example----------------------------------------------The library is extremely easy to use:.. code:: python    import compress_json        D = {        &quot;A&quot;:{            &quot;B&quot;:&quot;C&quot;        }    }    compress_json.dump(D, &quot;filepath.json.gz&quot;) # for a gzip file    compress_json.dump(D, &quot;filepath.json.bz&quot;) # for a bz2 file    compress_json.dump(D, &quot;filepath.json.lzma&quot;) # for a lzma file    D1 = compress_json.load(&quot;filepath.json.gz&quot;) # for loading a gzip file    D2 = compress_json.load(&quot;filepath.json.bz&quot;) # for loading a bz2 file    D3 = compress_json.load(&quot;filepath.json.lzma&quot;) # for loading a lzma fileSome extra perks: local loading and dumping----------------------------------------------The library makes available, other than the usual load and dump from the JSON library, the methods local_load and local_dump, which let you load and dump file in the same directory of wherever you are calling them, by using the call stack.This can get useful, especially when loading files within packages... code:: python    import compress_json        D = {        &quot;A&quot;: {            &quot;B&quot;: &quot;C&quot;        }    }    compress_json.local_dump(D, &quot;filepath.json.gz&quot;) # for a gzip file    compress_json.local_dump(D, &quot;filepath.json.bz&quot;) # for a bz2 file    compress_json.local_dump(D, &quot;filepath.json.lzma&quot;) # for a lzma file    D1 = compress_json.local_load(&quot;filepath.json.gz&quot;) # for loading a gzip file    D2 = compress_json.local_load(&quot;filepath.json.bz&quot;) # for loading a bz2 file    D3 = compress_json.local_load(&quot;filepath.json.lzma&quot;) # for loading a lzma fileLoading with RAM cache----------------------------------------------Sometimes you need to load a compressed JSON file a LOT of times, and you may want toput this document in a cache or something of the sorts. Fortunately, we already providethis option for you:.. code:: python    import compress_json        D1 = compress_json.load(        &quot;filepath.json.gz&quot;,        use_cache=True    )    D1 = compress_json.local_load(        &quot;filepath.json.gz&quot;,        use_cache=True    )Advanced usage~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Clearly you can pass parameters to either the chosen compression mode or the json library as follows:.. code:: python    import compress_json        D = {        &quot;A&quot;: {            &quot;B&quot;: &quot;C&quot;        }    }    compress_json.dump(        D, &quot;filepath.json.gz&quot;,        compression_kwargs = {kwargs go here},        json_kwargs = {kwargs go here}    )    D4 = compress_json.load(        &quot;filepath.json.gz&quot;,        compression_kwargs = {kwargs go here},        json_kwargs = {kwargs go here}    ).. |pip| image:: https://badge.fury.io/py/compress-json.svg    :target: https://badge.fury.io/py/compress-json    :alt: Pypi project.. |downloads| image:: https://pepy.tech/badge/compress-json    :target: https://pepy.tech/badge/compress-json    :alt: Pypi total project downloads</longdescription>
</pkgmetadata>