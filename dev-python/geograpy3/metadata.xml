<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># geograpy3[![Join the discussion at https://github.com/somnathrakshit/geograpy3/discussions](https://shields.io/badge/GitHub-%20Discussions-blue?logo=github)](https://github.com/somnathrakshit/geograpy3/discussions)[![Documentation Status](https://readthedocs.org/projects/geograpy3/badge/?version=latest)](https://geograpy3.readthedocs.io/en/latest/?badge=latest)[![pypi](https://img.shields.io/pypi/pyversions/geograpy3)](https://pypi.org/project/geograpy3/)[![Github Actions Build](https://github.com/somnathrakshit/geograpy3/workflows/Build/badge.svg?branch=master)](https://github.com/somnathrakshit/geograpy3/actions?query=workflow%3ABuild+branch%3Amaster)[![PyPI Status](https://img.shields.io/pypi/v/geograpy3.svg)](https://pypi.python.org/pypi/geograpy3/)[![Downloads](https://pepy.tech/badge/geograpy3)](https://pepy.tech/project/geograpy3)[![GitHub issues](https://img.shields.io/github/issues/somnathrakshit/geograpy3.svg)](https://github.com/somnathrakshit/geograpy3/issues)[![GitHub closed issues](https://img.shields.io/github/issues-closed/somnathrakshit/geograpy3.svg)](https://github.com/somnathrakshit/geograpy3/issues/?q=is%3Aissue+is%3Aclosed)[![License](https://img.shields.io/github/license/somnathrakshit/geograpy3.svg)](https://www.apache.org/licenses/LICENSE-2.0)geograpy3 is a fork of [geograpy2](https://github.com/Corollarium/geograpy2), which is itself a fork of [geograpy](https://github.com/ushahidi/geograpy) and inherits most of it, but solves several problems (such as support for utf8, places nameswith multiple words, confusion over homonyms etc). Also, geograpy3 is compatible with Python 3, unlike geograpy2.since geograpy3 0.0.2 cities,countries and regions are matched against a database derived from the corresponding wikidata entriesWhat it is==========geograpy extracts place names from a URL or text, and adds context to those names -- for example distinguishing between a country, region or city.The extraction is a two step process. The first process is a Natural Language Processing task which analyzes a text for potential mentions of geographic locations. In the next step the words which represent such locations are looked up using the Locator.If you already know that your content has geographic information you might want to use the Locator interface directly.## Examples/Tutorial* [see Examples/Tutorial Wiki](http://wiki.bitplan.com/index.php/Geograpy#Examples)## Install &amp; SetupGrab the package using `pip` (this will take a few minutes)```bashpip install geograpy3```geograpy3 uses [NLTK](http://www.nltk.org/) for entity recognition, so you'll also needto download the models we're using. Fortunately there's a command that'll takecare of this for you.```bashgeograpy-nltk```## Getting the source code```bashgit clone https://github.com/somnathrakshit/geograpy3cd geograpy3scripts/install```## Basic UsageImport the module, give some text or a URL, and presto.```pythonimport geograpyurl = 'https://en.wikipedia.org/wiki/2012_Summer_Olympics_torch_relay'places = geograpy.get_geoPlace_context(url=url)```Now you have access to information about all the places mentioned in the linkedarticle.* `places.countries` _contains a list of country names_* `places.regions` _contains a list of region names_* `places.cities` _contains a list of city names_* `places.other` _lists everything that wasn't clearly a country, region or city_Note that the `other` list might be useful for shorter texts, to pull outinformation like street names, points of interest, etc, but at the moment isa bit messy when scanning longer texts that contain possessive forms of propernouns (like &quot;Russian&quot; instead of &quot;Russia&quot;).## But Wait, There's MoreIn addition to listing the names of discovered places, you'll also get someinformation about the relationships between places.* `places.country_regions` _regions broken down by country_* `places.country_cities` _cities broken down by country_* `places.address_strings` _city, region, country strings useful for geocoding_## Last But Not LeastWhile a text might mention many places, it's probably focused on one or two, sogeograpy3 also breaks down countries, regions and cities by number of mentions.* `places.country_mentions`* `places.region_mentions`* `places.city_mentions`Each of these returns a list of tuples. The first item in the tuple is the placename and the second item is the number of mentions. For example:    [('Russian Federation', 14), (u'Ukraine', 11), (u'Lithuania', 1)]  ## If You're Really SeriousYou can of course use each of Geograpy's modules on their own. For example:```pythonfrom geograpy import extractione = extraction.Extractor(url='https://en.wikipedia.org/wiki/2012_Summer_Olympics_torch_relay')e.find_geoEntities()# You can now access all of the places found by the Extractorprint(e.places)```Place context is handled in the `places` module. For example:```pythonfrom geograpy import placespc = places.PlaceContext(['Cleveland', 'Ohio', 'United States'])pc.set_countries()print pc.countries #['United States']pc.set_regions()print(pc.regions #['Ohio'])pc.set_cities()print(pc.cities #['Cleveland'])print(pc.address_strings #['Cleveland, Ohio, United States'])```And of course all of the other information shown above (`country_regions` etc)is available after the corresponding `set_` method is called.## Stackoverflow* [Questions tagged with 'geograpy'](https://stackoverflow.com/questions/tagged/geograpy)## Creditsgeograpy3 uses the following excellent libraries:* [NLTK](http://www.nltk.org/) for entity recognition* [newspaper](https://github.com/codelucas/newspaper) for text extraction from HTML* [jellyfish](https://github.com/sunlightlabs/jellyfish) for fuzzy text match* [pylodstorage](https://pypi.org/project/pylodstorage/) for storage and retrieval of tabular data from SQL and SPARQL sourcesgeograpy3 uses the following data sources:* [ISO3166ErrorDictionary](https://github.com/bodacea/countryname/blob/master/countryname/databases/ISO3166ErrorDictionary.csv) for common country mispellings _via [Sara-Jayne Terp](https://github.com/bodacea)_* [Wikidata](https://www.wikidata.org) for country/region/city information with disambiguation via populationHat tip to [Chris Albon](https://github.com/chrisalbon) for the name.</longdescription>
</pkgmetadata>