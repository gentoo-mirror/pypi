<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;./docs/_static/logo/biopsykit_logo.png&quot; height=&quot;200&quot;&gt;# BioPsyKit[![PyPI](https://img.shields.io/pypi/v/biopsykit)](https://pypi.org/project/biopsykit/)[![status](https://joss.theoj.org/papers/4769dbce3a25db943d7e3a23578becd1/status.svg)](https://joss.theoj.org/papers/4769dbce3a25db943d7e3a23578becd1)![GitHub](https://img.shields.io/github/license/mad-lab-fau/biopsykit)[![Documentation Status](https://readthedocs.org/projects/biopsykit/badge/?version=latest)](https://biopsykit.readthedocs.io/en/latest/?badge=latest)[![Test and Lint](https://github.com/mad-lab-fau/BioPsyKit/actions/workflows/test-and-lint.yml/badge.svg)](https://github.com/mad-lab-fau/BioPsyKit/actions/workflows/test-and-lint.yml)[![codecov](https://codecov.io/gh/mad-lab-fau/BioPsyKit/branch/main/graph/badge.svg?token=IK0QBHQKCO)](https://codecov.io/gh/mad-lab-fau/BioPsyKit)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)![PyPI - Downloads](https://img.shields.io/pypi/dm/biopsykit)![GitHub commit activity](https://img.shields.io/github/commit-activity/m/mad-lab-fau/biopsykit)A Python package for the analysis of biopsychological data.With this package you have everything you need for analyzing biopsychological data, including:* Data processing pipelines for various physiological signals (ECG, EEG, Respiration, Motion, ...).* Algorithms and data processing pipelines for sleep/wake prediction and computation of sleep endpoints   based on activity or IMU data.* Functions to import and process data from sleep trackers (e.g., Withings Sleep Analyzer)* Functions for processing and analysis of salivary biomarker data (cortisol, amylase).* Implementation of various psychological and HCI-related questionnaires.* Implementation of classes representing different psychological protocols   (e.g., TSST, MIST, Cortisol Awakening Response Assessment, etc.)* Functions for easily setting up statistical analysis pipelines.* Functions for setting up and evaluating machine learning pipelines.* Plotting wrappers optimized for displaying biopsychological data.## Details### Analysis of Physiological Signals#### ECG Processing`BioPsyKit` provides a whole ECG data processing pipeline, consisting of:* Loading ECG data from:    * Generic `.csv` files    * NilsPod binary (`.bin`) files (requires [`NilsPodLib`](https://github.com/mad-lab-fau/NilsPodLib))    * Other sensor types (_coming soon_)* Splitting data into single study parts (based on time intervals) that will be analyzed separately* Performing ECG processing, including:    * R peak detection (using [`Neurokit`](https://github.com/neuropsychology/NeuroKit))    * R peak outlier removal and interpolation    * HRV feature computation    * ECG-derived respiration (EDR) estimation for respiration rate and respiratory sinus arrhythmia (RSA)       (_experimental_)    * Instantaneous heart rate resampling     * Computing aggregated results (e.g., mean and standard error) per study part* Creating plots for visualizing processing results#### Quick Example```pythonfrom biopsykit.signals.ecg import EcgProcessorfrom biopsykit.example_data import get_ecg_exampleecg_data, sampling_rate = get_ecg_example()ep = EcgProcessor(ecg_data, sampling_rate)ep.ecg_process()print(ep.ecg_result)```... more biosignals coming soon!### Sleep/Wake Prediction`BioPsyKit` allows to process sleep data collected from IMU or activity sensors (e.g., Actigraphs). This includes:* Detection of wear periods* Detection of time spent in bed* Detection of sleep and wake phases* Computation of sleep endpoints (e.g., sleep and wake onset, net sleep duration wake after sleep onset, etc.)#### Quick Example```pythonimport biopsykit as bpfrom biopsykit.example_data import get_sleep_imu_exampleimu_data, sampling_rate = get_sleep_imu_example()sleep_results = bp.sleep.sleep_processing_pipeline.predict_pipeline_acceleration(imu_data, sampling_rate)sleep_endpoints = sleep_results[&quot;sleep_endpoints&quot;]print(sleep_endpoints)```### Salivary Biomarker Analysis`BioPsyKit` provides several methods for the analysis of salivary biomarkers (e.g. cortisol and amylase), such as:* Import data from Excel and csv files into a standardized format* Compute standard features (maximum increase, slope, area-under-the-curve, mean, standard deviation, ...)#### Quick Example```pythonimport biopsykit as bpfrom biopsykit.example_data import get_saliva_examplesaliva_data = get_saliva_example(sample_times=[-20, 0, 10, 20, 30, 40, 50])max_inc = bp.saliva.max_increase(saliva_data)# remove the first saliva sample (t=-20) from computing the AUCauc = bp.saliva.auc(saliva_data, remove_s0=True)print(max_inc)print(auc)```### Questionnaires`BioPsyKit` implements various established psychological (state and trait) questionnaires, such as:* Perceived Stress Scale (PSS)* Positive and Negative Affect Schedule (PANAS)* Self-Compassion Scale (SCS)* Big Five Inventory (BFI)* State Trait Depression and Anxiety Questionnaire (STADI)* Trier Inventory for Chronic Stress (TICS)* Primary Appraisal Secondary Appraisal Scale (PASA)* ...#### Quick Example```pythonimport biopsykit as bpfrom biopsykit.example_data import get_questionnaire_exampledata = get_questionnaire_example()pss_data = data.filter(like=&quot;PSS&quot;)pss_result = bp.questionnaires.pss(pss_data)print(pss_result)```#### List Supported Questionnaires```pythonimport biopsykit as bpprint(bp.questionnaires.utils.get_supported_questionnaires())```### Psychological Protocols`BioPsyKit` implements methods for easy handling and analysis of data recorded with several established psychological protocols, such as:* Montreal Imaging Stress Task (MIST)* Trier Social Stress Test (TSST)* Cortisol Awakening Response Assessment (CAR)* ...#### Quick Example```pythonfrom biopsykit.protocols import TSSTfrom biopsykit.example_data import get_saliva_examplefrom biopsykit.example_data import get_hr_subject_data_dict_example# specify TSST structure and the durations of the single phasesstructure = {   &quot;Pre&quot;: None,   &quot;TSST&quot;: {       &quot;Preparation&quot;: 300,       &quot;Talk&quot;: 300,       &quot;Math&quot;: 300   },   &quot;Post&quot;: None}tsst = TSST(name=&quot;TSST&quot;, structure=structure)saliva_data = get_saliva_example(sample_times=[-20, 0, 10, 20, 30, 40, 50])hr_subject_data_dict = get_hr_subject_data_dict_example()# add saliva data collected during the whole TSST proceduretsst.add_saliva_data(saliva_data, saliva_type=&quot;cortisol&quot;)# add heart rate data collected during the &quot;TSST&quot; study parttsst.add_hr_data(hr_subject_data_dict, study_part=&quot;TSST&quot;)# compute heart rate results: normalize ECG data relative to &quot;Preparation&quot; phase; afterwards, use data from the # &quot;Talk&quot; and &quot;Math&quot; phases and compute the average heart rate for each subject and study phase, respectivelytsst.compute_hr_results(    result_id=&quot;hr_mean&quot;,    study_part=&quot;TSST&quot;,    normalize_to=True,    select_phases=True,    mean_per_subject=True,    params={        &quot;normalize_to&quot;: &quot;Preparation&quot;,        &quot;select_phases&quot;: [&quot;Talk&quot;, &quot;Math&quot;]    })```### Statistical Analysis`BioPsyKit` implements methods for simplified statistical analysis of biopsychological data by offering an object-oriented interface for setting up statistical analysis pipelines, displaying the results, and adding statistical significance brackets to plots.#### Quick Example```pythonimport matplotlib.pyplot as pltfrom biopsykit.stats import StatsPipelinefrom biopsykit.plotting import multi_feature_boxplotfrom biopsykit.example_data import get_stats_exampledata = get_stats_example()# configure statistical analysis pipeline which consists of checking for normal distribution and performing paired # t-tests (within-variable: time) on each questionnaire subscale separately (grouping data by subscale).pipeline = StatsPipeline(    steps=[(&quot;prep&quot;, &quot;normality&quot;), (&quot;test&quot;, &quot;pairwise_ttests&quot;)],    params={&quot;dv&quot;: &quot;PANAS&quot;, &quot;groupby&quot;: &quot;subscale&quot;, &quot;subject&quot;: &quot;subject&quot;, &quot;within&quot;: &quot;time&quot;})# apply statistics pipeline on datapipeline.apply(data)# plot data and add statistical significance brackets from statistical analysis pipelinefig, axs = plt.subplots(ncols=3)features = [&quot;NegativeAffect&quot;, &quot;PositiveAffect&quot;, &quot;Total&quot;]# generate statistical significance bracketsbox_pairs, pvalues = pipeline.sig_brackets(    &quot;test&quot;, stats_effect_type=&quot;within&quot;, plot_type=&quot;single&quot;, x=&quot;time&quot;, features=features, subplots=True)# plot datamulti_feature_boxplot(    data=data, x=&quot;time&quot;, y=&quot;PANAS&quot;, features=features, group=&quot;subscale&quot;, order=[&quot;pre&quot;, &quot;post&quot;],    stats_kwargs={&quot;box_pairs&quot;: box_pairs, &quot;pvalues&quot;: pvalues}, ax=axs)```### Machine Learning Analysis`BioPsyKit` implements methods for simplified and systematic evaluation of different machine learning pipelines.#### Quick Example```python# Utilsfrom sklearn.datasets import load_breast_cancer# Preprocessing &amp; Feature Selectionfrom sklearn.feature_selection import SelectKBestfrom sklearn.preprocessing import MinMaxScaler, StandardScaler# Classificationfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.tree import DecisionTreeClassifier# Cross-Validationfrom sklearn.model_selection import KFoldfrom biopsykit.classification.model_selection import SklearnPipelinePermuter# load example datasetbreast_cancer = load_breast_cancer()X = breast_cancer.datay = breast_cancer.target# specify estimator combinationsmodel_dict = {    &quot;scaler&quot;: {        &quot;StandardScaler&quot;: StandardScaler(),        &quot;MinMaxScaler&quot;: MinMaxScaler()    },    &quot;reduce_dim&quot;: {        &quot;SelectKBest&quot;: SelectKBest(),    },    &quot;clf&quot; : {        &quot;KNeighborsClassifier&quot;: KNeighborsClassifier(),        &quot;DecisionTreeClassifier&quot;: DecisionTreeClassifier(),    }}# specify hyperparameter for grid searchparams_dict = {    &quot;StandardScaler&quot;: None,    &quot;MinMaxScaler&quot;: None,    &quot;SelectKBest&quot;: { &quot;k&quot;: [2, 4, &quot;all&quot;] },    &quot;KNeighborsClassifier&quot;: { &quot;n_neighbors&quot;: [2, 4], &quot;weights&quot;: [&quot;uniform&quot;, &quot;distance&quot;] },    &quot;DecisionTreeClassifier&quot;: {&quot;criterion&quot;: ['gini', 'entropy'], &quot;max_depth&quot;: [2, 4] },}pipeline_permuter = SklearnPipelinePermuter(model_dict, params_dict)pipeline_permuter.fit(X, y, outer_cv=KFold(5), inner_cv=KFold(5))# print mean performance scores for each pipeline and parameter combinations, averaged over all outer CV foldsprint(pipeline_permuter.mean_pipeline_score_results())# print overall best-performing pipeline and the performances over all outer CV foldsprint(pipeline_permuter.best_pipeline())# print summary of all relevant metrics for the best pipeline for each evaluated pipeline combinationprint(pipeline_permuter.metric_summary())```## Installation``BioPsyKit`` requires Python &gt;=3.8. First, install a compatible version of Python. Then install ``BioPsyKit`` via pip. Installation from [PyPi](https://pypi.org/): ```bashpip install biopsykit```Installation from [PyPi](https://pypi.org/) with extras (e.g., `jupyter` to directly install all required dependencies for the use with Jupyter Lab): ```bashpip install &quot;biopsykit[jupyter]&quot;```Installation from local repository copy:```bashgit clone https://github.com/mad-lab-fau/BioPsyKit.gitcd BioPsyKitpip install .```### For DeveloperIf you are a developer and want to contribute to ``BioPsyKit`` you can install an editable version of the package from a local copy of the repository.BioPsyKit uses [poetry](https://python-poetry.org) to manage dependencies and packaging. Once you installed poetry, run the following commands to clone the repository, initialize a virtual env and install all development dependencies:#### Without Extras```bashgit clone https://github.com/mad-lab-fau/BioPsyKit.gitcd BioPsyKitpoetry install```#### With all Extras (e.g., extended functionalities for IPython/Jupyter Notebooks)```bashgit clone https://github.com/mad-lab-fau/BioPsyKit.gitcd BioPsyKitpoetry install -E mne -E jupyter ```To run any of the tools required for the development workflow, use the `poe` commands of the [poethepoet](https://github.com/nat-n/poethepoet) task runner:```bash$ poedocs                 Build the html docs using Sphinx.format               Reformat all files using black.format_check         Check, but not change, formatting using black.lint                 Lint all files with Prospector.test                 Run Pytest with coverage.update_version       Bump the version in pyproject.toml and biopsykit.__init__ .register_ipykernel   Register a new IPython kernel named `biopsykit` linked to the virtual environment.remove_ipykernel     Remove the associated IPython kernel.```----#### Some Notes* The `poe` commands are only available if you are in the virtual environment associated with this project. You can either activate the virtual environment manually (e.g., `source .venv/bin/activate`) or use the `poetry shell` command to spawn a new shell with the virtual environment activated.* In order to use jupyter notebooks with the project you need to register a new IPython kernel associated with the venv of the project (`poe register_ipykernel` - see below). When creating a notebook, make to sure to select this kernel (top right corner of the notebook).* In order to build the documentation, you need to additionally install [pandoc](https://pandoc.org/installing.html).----See the [Contributing Guidelines](https://biopsykit.readthedocs.io/en/latest/source/contributing/CONTRIBUTING.html) for further information.## ExamplesSee the [Examples Gallery](https://biopsykit.readthedocs.io/en/latest/examples/index.html) for example on how to use BioPsyKit.## Citing BioPsyKitIf you use `BioPsyKit` in your work, please report the version you used in the text. Additionally, please also cite the corresponding paper:```Richer et al., (2021). BioPsyKit: A Python package for the analysis of biopsychological data. Journal of Open Source Software, 6(66), 3702, https://doi.org/10.21105/joss.03702```If you use a specific algorithm please also to make sure you cite the original paper of the algorithm! We recommend the following citation style:```We used the algorithm proposed by Author et al. [paper-citation], implemented by the BioPsykit package [biopsykit-citation].```</longdescription>
</pkgmetadata>