<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Build Status](https://drone.mcos.nc/api/badges/scrippy/scrippy-api/status.svg) ![License](https://img.shields.io/static/v1?label=license&amp;color=orange&amp;message=MIT) ![Language](https://img.shields.io/static/v1?label=language&amp;color=informational&amp;message=Python)![Scrippy, my scrangourou friend](./scrippy-api.png &quot;Scrippy, my scrangourou friend&quot;)# `scrippy_api`REST API client for the `Scrippy` framework (https://codeberg.org/scrippy).## Requirements### Python modules#### Required modules listThe modules listed below will be automatically installed.- requests- PyYAML- jsonschema## Installation### Manual```bashgit clone https://codeberg.org/scrippy/scrippy-api.gitcd scrippy-api.gitpython -m pip install -r requirements.txtmake install```### With `pip````bashpip install scrippy-api```### UsageThe `scrippy_api.api` module provides the `Client` object that allows querying any [_REST API_ ](https://en.wikipedia.org/wiki/Representational_state_transfer) uniformly using the unique method `Client.request()`.The `Client` object has a single method `Client.request()` that accepts many parameters, most of which are optional. However, some optional parameters can become mandatory depending on the HTTP method used for the request and the use case. _YMMV_.The `Client.request()` method always returns a `requests.Response` object (see [documentation](https://2.python-requests.org/en/master/user/advanced/#request-and-response-objects)) that must be handled by the script.Both parameter keys and values will be automatically encoded when necessary.In case of error (HTTP code != 200), the client exits with an `1` return code and the error is logged as `critical`.This behavior can be inhibited during the client instantiation by setting the `exit_on_error` parameter to `False`:```pythonfrom scrippy_api.api import Clientclient = Client(exit_on_error=False)```In this case, any encountered errors will appear in the log file as `warning`.The verification of the remote server SSL certificate can be disabled by passing the optional `verify` parameter of the `Client` object to `False`:```pythonfrom scrippy_api.api import Clientclient = Client(exit_on_error=True, verify=False)```**Note**: Disabling certificate verification is discouraged because it presents real security risks.#### ParametersParameters of the `request` method of the `Client` object:| Parameter | Type | Description | Default value || --------- | ---- | ----------- | ------------- || `params`  | Dictionary | Applicable to all HTTP methods. Each key/value pair will be concatenated to the URL. | `None` || `cookies` | Dictionary | Cookies to be sent with the request | `None` || `timeout` | integer | Waiting time before interrupting the connection | `None` || `headers` | Dictionary | Headers to be sent with the request | `None` || `proxies` | List | List of proxy servers to use for the connection | `None` || `auth`    | Tuple | Username and password for _BASIC AUTH_ authentication || `data`    | Dictionary | Data to be sent with the request. Not applicable with `GET` method | `None` || `json`    | Dictionary | Data in _JSON_ format to be sent with the request. Not applicable with `GET` method. Use when `data` and `file` are not specified | `None` || `files`   | Dictionary | Files to be uploaded in _multipart_. The dictionary takes the form `{&lt;file name&gt;: &lt;file&gt;}`  | `None` |Implemented HTTP methods:| HTTP method | Description || -----------| ------------ || `GET`        | Retrieve a resource or list of resource URIs || `POST`       | Create a resource || `PUT`        | Replace or create a resource || `PATCH`      | Update a resource or create it if non-existent || `DELETE`     | Delete a resource |#### Examples##### URL with Parameters```pythonfrom scrippy_api.api import Clientparams = {&quot;name&quot;: &quot;Luiggi Vercotti&quot;, &quot;password&quot;: &quot;dead/parrot&quot;}client = Client()response = client.request(method=&quot;GET&quot;, url=&quot;https://montypython.org/user&quot;, params=params)```The called URL will be:```https://montypython.org/user?name=Luiggi+Vercotti&amp;password=dead%2Fparrot```##### Basic Authentication (BASIC AUTH)Basic authentication with the following credentials:- Username: `Luiggi Vercotti`- Password: `dead/parrot````pythonfrom scrippy_api.api import Clientauth = (&quot;Luiggi Vercotti&quot;, &quot;dead/parrot&quot;)client = Client()response = client.request(method=&quot;POST&quot;, url=&quot;https://montypython.org&quot;, auth=auth)```##### Sending DataCreating the `Luiggi Vercotti` user with the password `dead/parrot`:```pythonfrom scrippy_api.api import Clientdata = {&quot;name&quot;: &quot;Luiggi Vercotti&quot;, &quot;password&quot;: &quot;dead/parrot&quot;}client = Client()response = client.request(method=&quot;POST&quot;, url=&quot;https://montypython.org/user&quot;, data=data)```##### File UploadUpload of the two files `./images/dead_parrot.png` and `./images/flying_circus.mp4`:```pythonfrom scrippy_api.api import Clientfiles = {&quot;dead_parrot.png&quot;: open(&quot;./images/dead_parrot.png&quot;, &quot;rb&quot;), &quot;flying_circus.mp4&quot;: open(&quot;./images/flying_circus.mp4&quot;, &quot;rb&quot;)}client = Client()response = client.request(method=&quot;POST&quot;, url=&quot;https://montypython.org/upload&quot;, data=data)```##### Resource ModificationReplaces the password of the `Luiggi Vercotti` user```pythonfrom scrippy_api.api import Clientauth = (&quot;Luiggi Vercotti&quot;, &quot;dead/parrot&quot;)data = {&quot;password&quot;: &quot;live/parrot&quot;}params = {&quot;name&quot;: &quot;Luiggi Vercotti&quot;}client = Client()response = client.request(method=&quot;PATCH&quot;,                          url=&quot;https://montypython.org/user&quot;,                          params=params,                          data=data)```##### File Download```pythonfrom scrippy_api.api import Clienturl = &quot;https://monthy.python/inquisition.zip&quot;local_dir = &quot;/home/luiggi.vercotti&quot;local_filename = &quot;spanish_inquisition.zip&quot;client = Client()if client.download(url, local_dir, local_filename):  print(&quot;No one expects the Spanish inquisition&quot;)```</longdescription>
</pkgmetadata>