<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Google BigQuery Table Schema Converter[![license](https://img.shields.io/pypi/l/ansicolortags.svg)](./LICENSE)[![pyversion](https://img.shields.io/static/v1?label=python&amp;color=blue&amp;message=3.6%20|%203.7%20|%203.8)](./)[![coverage](https://img.shields.io/static/v1?label=coverage&amp;color=brightgreen&amp;message=94%25)](./)[![test](https://img.shields.io/static/v1?label=tests&amp;color=success&amp;message=100%25)](./)[![downloads](https://pepy.tech/badge/gbqschema-converter)](https://pepy.tech/project/gbqschema-converter)Python library to convert [Google BigQuery table schema](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#datetime_type) into [draft-07](https://json-schema.org/draft-07/json-schema-release-notes.html) [json schema](https://json-schema.org/) and vice versa.The library includes two main modules:```bashgbqschema_converter├── gbqschema_to_jsonschema.py└── jsonschema_to_gbqschema.py```Each of those modules has two main functions:- `json_representation`: corresponds to json output (input for `gbqschema_to_jsonschema`).- `sdk_representation`: corresponds to [Google Python SDK format](https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.schema.SchemaField.html) output (input for `gbqschema_to_jsonschema`).## Installation```bashpython3 -m venv env &amp;&amp; source ${PWD}/env/bin/activate(env) pip install --no-cache-dir gbqschema_converter```## Usage: CLI### Convert json-schema to GBQ table schema```bash(env) json2gbq -husage: json2gbq [-h] (-i INPUT | -f FILE)Google BigQuery Table Schema Converteroptional arguments:  -h, --help            show this help message and exit  -i INPUT, --input INPUT                        Input object as string.  -f FILE, --file FILE  Input object as file path.```#### Example: stdinExecution:```bash(env) json2gbq -i '{  &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;,  &quot;type&quot;: &quot;array&quot;,  &quot;items&quot;: {    &quot;$ref&quot;: &quot;#/definitions/element&quot;  },  &quot;definitions&quot;: {    &quot;element&quot;: {      &quot;type&quot;: &quot;object&quot;,      &quot;properties&quot;: {        &quot;att_01&quot;: {          &quot;type&quot;: &quot;integer&quot;,          &quot;description&quot;: &quot;Att 1&quot;        },        &quot;att_02&quot;: {          &quot;type&quot;: &quot;number&quot;,          &quot;description&quot;: &quot;Att 2&quot;        },        &quot;att_03&quot;: {          &quot;type&quot;: &quot;string&quot;        },        &quot;att_04&quot;: {          &quot;type&quot;: &quot;boolean&quot;        },        &quot;att_05&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;date&quot;        },        &quot;att_06&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;date-time&quot;        },        &quot;att_07&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;time&quot;        }      },      &quot;required&quot;: [        &quot;att_02&quot;      ]    }  }}'```Output:```bash2020-04-08 21:42:51.700 [INFO ] [Google BigQuery Table Schema Converter] Output (5.52 ms elapsed):[  {    &quot;description&quot;: &quot;Att 1&quot;,    &quot;name&quot;: &quot;att_01&quot;,    &quot;type&quot;: &quot;INTEGER&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;description&quot;: &quot;Att 2&quot;,    &quot;name&quot;: &quot;att_02&quot;,    &quot;type&quot;: &quot;NUMERIC&quot;,    &quot;mode&quot;: &quot;REQUIRED&quot;  },  {    &quot;name&quot;: &quot;att_03&quot;,    &quot;type&quot;: &quot;STRING&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_04&quot;,    &quot;type&quot;: &quot;BOOLEAN&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_05&quot;,    &quot;type&quot;: &quot;DATE&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_06&quot;,    &quot;type&quot;: &quot;TIMESTAMP&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_07&quot;,    &quot;type&quot;: &quot;STRING&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  }]```#### Example: fileExecution:```bash(env) json2gbq -f ${PWD}/data/jsonschema.json```Output:```bash2020-04-08 21:57:25.516 [INFO ] [Google BigQuery Table Schema Converter] Output (6.39 ms elapsed):[  {    &quot;description&quot;: &quot;Att 1&quot;,    &quot;name&quot;: &quot;att_01&quot;,    &quot;type&quot;: &quot;INTEGER&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;description&quot;: &quot;Att 2&quot;,    &quot;name&quot;: &quot;att_02&quot;,    &quot;type&quot;: &quot;NUMERIC&quot;,    &quot;mode&quot;: &quot;REQUIRED&quot;  },  {    &quot;name&quot;: &quot;att_03&quot;,    &quot;type&quot;: &quot;STRING&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_04&quot;,    &quot;type&quot;: &quot;BOOLEAN&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_05&quot;,    &quot;type&quot;: &quot;DATE&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_06&quot;,    &quot;type&quot;: &quot;TIMESTAMP&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_07&quot;,    &quot;type&quot;: &quot;STRING&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  }]```### Convert GBQ table schema to json-schema```bash(env) gbq2json -husage: gbq2json [-h] (-i INPUT | -f FILE)Google BigQuery Table Schema Converteroptional arguments:  -h, --help            show this help message and exit  -i INPUT, --input INPUT                        Input object as string.  -f FILE, --file FILE  Input object as file path.```#### Example: stdinExecution:```bash(env) gbq2json -i '[  {    &quot;description&quot;: &quot;Att 1&quot;,    &quot;name&quot;: &quot;att_01&quot;,    &quot;type&quot;: &quot;INTEGER&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;description&quot;: &quot;Att 2&quot;,    &quot;name&quot;: &quot;att_02&quot;,    &quot;type&quot;: &quot;NUMERIC&quot;,    &quot;mode&quot;: &quot;REQUIRED&quot;  },  {    &quot;name&quot;: &quot;att_03&quot;,    &quot;type&quot;: &quot;STRING&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_04&quot;,    &quot;type&quot;: &quot;BOOLEAN&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_05&quot;,    &quot;type&quot;: &quot;DATE&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_06&quot;,    &quot;type&quot;: &quot;DATETIME&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  },  {    &quot;name&quot;: &quot;att_07&quot;,    &quot;type&quot;: &quot;TIMESTAMP&quot;,    &quot;mode&quot;: &quot;NULLABLE&quot;  }]'```Output:```bash2020-04-08 21:51:05.370 [INFO ] [Google BigQuery Table Schema Converter] Output (1.08 ms elapsed):{  &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;,  &quot;type&quot;: &quot;array&quot;,  &quot;items&quot;: {    &quot;$ref&quot;: &quot;#/definitions/element&quot;  },  &quot;definitions&quot;: {    &quot;element&quot;: {      &quot;type&quot;: &quot;object&quot;,      &quot;properties&quot;: {        &quot;att_01&quot;: {          &quot;type&quot;: &quot;integer&quot;,          &quot;description&quot;: &quot;Att 1&quot;        },        &quot;att_02&quot;: {          &quot;type&quot;: &quot;number&quot;,          &quot;description&quot;: &quot;Att 2&quot;        },        &quot;att_03&quot;: {          &quot;type&quot;: &quot;string&quot;        },        &quot;att_04&quot;: {          &quot;type&quot;: &quot;boolean&quot;        },        &quot;att_05&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;date&quot;        },        &quot;att_06&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;pattern&quot;: &quot;^[0-9]{4}-((|0)[1-9]|1[0-2])-((|[0-2])[1-9]|3[0-1])(|T)((|[0-1])[0-9]|2[0-3]):((|[0-5])[0-9]):((|[0-5])[0-9])(|.[0-9]{1,6})$&quot;        },        &quot;att_07&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;date-time&quot;        }      },      &quot;additionalProperties&quot;: false,      &quot;required&quot;: [        &quot;att_02&quot;      ]    }  }}```#### Example: fileExecution:```bash(env) gbq2json -f ${PWD}/data/gbqschema.json```Output:```bash2020-04-08 21:55:20.275 [INFO ] [Google BigQuery Table Schema Converter] Output (1.72 ms elapsed):{  &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;,  &quot;type&quot;: &quot;array&quot;,  &quot;items&quot;: {    &quot;$ref&quot;: &quot;#/definitions/element&quot;  },  &quot;definitions&quot;: {    &quot;element&quot;: {      &quot;type&quot;: &quot;object&quot;,      &quot;properties&quot;: {        &quot;att_01&quot;: {          &quot;type&quot;: &quot;integer&quot;,          &quot;description&quot;: &quot;Att 1&quot;        },        &quot;att_02&quot;: {          &quot;type&quot;: &quot;number&quot;,          &quot;description&quot;: &quot;Att 2&quot;        },        &quot;att_03&quot;: {          &quot;type&quot;: &quot;string&quot;        },        &quot;att_04&quot;: {          &quot;type&quot;: &quot;boolean&quot;        },        &quot;att_05&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;date&quot;        },        &quot;att_06&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;pattern&quot;: &quot;^[0-9]{4}-((|0)[1-9]|1[0-2])-((|[0-2])[1-9]|3[0-1])(|T)((|[0-1])[0-9]|2[0-3]):((|[0-5])[0-9]):((|[0-5])[0-9])(|.[0-9]{1,6})$&quot;        },        &quot;att_07&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;date-time&quot;        }      },      &quot;additionalProperties&quot;: false,      &quot;required&quot;: [        &quot;att_02&quot;      ]    }  }}```## Usage: python program### Convert json-schema to GBQ table schema#### Example: output as json```pythonfrom gbqschema_converter.jsonschema_to_gbqschema import json_representation as converterschema_in = {  &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;,  &quot;type&quot;: &quot;array&quot;,  &quot;items&quot;: {    &quot;$ref&quot;: &quot;#/definitions/element&quot;,  },  &quot;definitions&quot;: {    &quot;element&quot;: {      &quot;type&quot;: &quot;object&quot;,      &quot;properties&quot;: {        &quot;att_01&quot;: {          &quot;type&quot;: &quot;integer&quot;,          &quot;description&quot;: &quot;Att 1&quot;        },        &quot;att_02&quot;: {          &quot;type&quot;: &quot;number&quot;,        },      }      &quot;required&quot;: [        &quot;att_02&quot;,      ],    },  },}schema_out = converter(schema_in)print(schema_out)```Output:```bash[{'description': 'Att 1', 'name': 'att_01', 'type': 'INTEGER', 'mode': 'NULLABLE'}, {'name': 'att_02', 'type': 'NUMERIC', 'mode': 'REQUIRED'}]```#### Example: output as list of SchemaField (SDK format)```pythonfrom gbqschema_converter.jsonschema_to_gbqschema import sdk_representation as converterschema_in = {  &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;,  &quot;type&quot;: &quot;array&quot;,  &quot;items&quot;: {    &quot;$ref&quot;: &quot;#/definitions/element&quot;,  },  &quot;definitions&quot;: {    &quot;element&quot;: {      &quot;type&quot;: &quot;object&quot;,      &quot;properties&quot;: {        &quot;att_01&quot;: {          &quot;type&quot;: &quot;integer&quot;,          &quot;description&quot;: &quot;Att 1&quot;        },        &quot;att_02&quot;: {          &quot;type&quot;: &quot;number&quot;,        },      },      &quot;required&quot;: [        &quot;att_02&quot;,      ],    },  },}schema_out = converter(schema_in)print(schema_out)```Output:```bash[SchemaField('att_01', 'INTEGER', 'NULLABLE', 'Att 1', ()), SchemaField('att_02', 'NUMERIC', 'REQUIRED', None, ())]```### Convert GBQ table schema to json-schema#### Example: output as json```pythonfrom gbqschema_converter.gbqschema_to_jsonschema import json_representation as converterschema_in = [    {        'description': 'Att 1',        'name': 'att_01',        'type': 'INTEGER',        'mode': 'NULLABLE'    },    {        'name': 'att_02',        'type': 'NUMERIC',        'mode': 'REQUIRED'    }]schema_out = converter(schema_in)print(schema_out)```Output:```bash{'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'array', 'items': {'$ref': '#/definitions/element'}, 'definitions': {'element': {'type': 'object', 'properties': {'att_01': {'type': 'integer', 'description': 'Att 1'}, 'att_02': {'type': 'number'}}, 'additionalProperties': False, 'required': ['att_02']}}}```#### Example: output as list of SchemaField (SDK format)```pythonfrom gbqschema_converter.gbqschema_to_jsonschema import sdk_representation as converterfrom google.cloud.bigquery import SchemaFieldschema_in = [    SchemaField('att_01', 'INTEGER', 'NULLABLE', 'Att 1', ()),    SchemaField('att_02', 'NUMERIC', 'REQUIRED', None, ()),]schema_out = converter(schema_in)print(schema_out)```Output:```bash{'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'array', 'items': {'$ref': '#/definitions/element'}, 'definitions': {'element': {'type': 'object', 'properties': {'att_01': {'type': 'integer', 'description': 'Att 1'}, 'att_02': {'type': 'number'}}, 'additionalProperties': False, 'required': ['att_02']}}}```</longdescription>
</pkgmetadata>