<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============bluetti_mqtt============This tool provides an MQTT interface to Bluetti power stations. State will bepublished to the ``bluetti/state/[DEVICE NAME]/[PROPERTY]`` topic, and commandscan be sent to the ``bluetti/command/[DEVICE NAME]/[PROPERTY]`` topic.Installation------------.. code-block:: bash    $ pip install bluetti_mqttUsage-----.. code-block:: bash    $ bluetti-mqtt --scan    Found AC3001234567890123: address 00:11:22:33:44:55    $ bluetti-mqtt --broker [MQTT_BROKER_HOST] 00:11:22:33:44:55If your MQTT broker has a username and password, you can pass those in... code-block:: bash    $ bluetti-mqtt --broker [MQTT_BROKER_HOST] --username username --password pass 00:11:22:33:44:55By default the device is polled as quickly as possible, but if you'd like tocollect less data, the polling interval can be adjusted... code-block:: bash    # Poll every 60s    $ bluetti-mqtt --broker [MQTT_BROKER_HOST] --interval 60 00:11:22:33:44:55If you have multiple devices within bluetooth range, you can monitor all ofthem with just a single command. We can only talk to one device at a time, soyou may notice some irregularity in the collected data, especially if you havenot set an interval... code-block:: bash    $ bluetti-mqtt --broker [MQTT_BROKER_HOST] 00:11:22:33:44:55 00:11:22:33:44:66Background Service------------------If you are running on a platform with systemd, you can use the following as atemplate. It should be placed in ``/etc/systemd/system/bluetti-mqtt.service``.Once you've written the file, you'll need to run``sudo systemctl start bluetti-mqtt``. If you want it to run automatically afterrebooting, you'll also need to run ``sudo systemctl enable bluetti-mqtt``... code-block:: bash    [Unit]    Description=Bluetti MQTT    After=network.target    StartLimitIntervalSec=0    [Service]    Type=simple    Restart=always    RestartSec=30    TimeoutStopSec=15    User=your_username_here    ExecStart=/home/your_username_here/.local/bin/bluetti-mqtt --broker [MQTT_BROKER_HOST] 00:11:22:33:44:55    [Install]    WantedBy=multi-user.targetHome Assistant Integration--------------------------If you have configured Home Assistant to use the same MQTT broker, then bydefault most data and switches will be automatically configured there. This ispossible thanks to Home Assistant's support for automatic MQTT discovery, whichis enabled by default with the discovery prefix of ``homeassistant``.This can be controlled with the ``--ha-config`` flag, which defaults toconfiguring most fields (&quot;normal&quot;). Home Assistant MQTT discovery can also bedisabled, or additional internal device fields can be configured with the&quot;advanced&quot; option.Reverse Engineering-------------------For research purposes you can also use the ``bluetti-logger`` command to pollthe device and log in a standardised format... code-block:: bash    $ bluetti-logger --log the-log-file.log 00:11:22:33:44:55While the logger is running, change settings on the device and take note of thetime when you made the change, waiting ~ 1 minute between changes. Note thatnot every setting that can be changed on the device can be changed overbluetooth.If you're looking to add support to control something that the app can changebut cannot be changed directly from the device screen, both iOS and Androidsupport collecting bluetooth logs from running apps. Additionally, with thecorrect hardware Wireshark can be used to collect logs. With these logs and areport of what commands were sent at what times, this data can be used toreverse engineer support.For supporting new devices, the ``bluetti-discovery`` command is provided. Itwill scan from 0x0000 to 0x30ff assuming MODBUS-over-Bluetooth. This will takea while and requires that the scanned device be in close Bluetooth range foroptimal performance... code-block:: bash    $ bluetti-discovery --scan    Found AC3001234567890123: address 00:11:22:33:44:55    $ bluetti-discovery --log the-log-file.log 00:11:22:33:44:55</longdescription>
</pkgmetadata>