<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div class=&quot;wy-grid-for-nav&quot;&gt;&lt;div class=&quot;wy-side-scroll&quot;&gt;&lt;div class=&quot;wy-side-nav-search&quot;&gt;[pcs\_log](#)&lt;div class=&quot;version&quot;&gt;1.6.137.221205144037&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;wy-menu wy-menu-vertical&quot; data-spy=&quot;affix&quot; role=&quot;navigation&quot; aria-label=&quot;Navigation menu&quot;&gt;  - [Usage](#document-usage)  - [LogP reference](#document-api)&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;section wy-nav-content-wrap&quot; data-toggle=&quot;wy-nav-shift&quot;&gt;** [pcs\_log](#)&lt;div class=&quot;wy-nav-content&quot;&gt;&lt;div class=&quot;rst-content&quot;&gt;&lt;div role=&quot;navigation&quot; aria-label=&quot;Page navigation&quot;&gt;  - [](#) »  - pcs\_log 1.6.137 documentation  - -----&lt;/div&gt;&lt;div class=&quot;document&quot; role=&quot;main&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Article&quot;&gt;&lt;div itemprop=&quot;articleBody&quot;&gt;&lt;div id=&quot;welcome-to-pcs-log-s-documentation&quot; class=&quot;section&quot;&gt;# Welcome to pcs\_log’s documentation\!Document version: 1.6.137.221205144037&lt;div class=&quot;admonition note&quot;&gt;NoteThis project is under active development.&lt;/div&gt;&lt;div id=&quot;source&quot; class=&quot;section&quot;&gt;## Source&gt; &gt; &gt; &lt;div&gt;&gt; &gt; You can get the complete source-code from [GitHub&gt; repository](https://github.com/rpietsch1953/Log)&gt; &gt; &lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;detailed-documentation&quot; class=&quot;section&quot;&gt;## Detailed documentation&gt; &gt; &gt; &lt;div&gt;&gt; &gt; The detailed documentation is on [Read the&gt; Docs](https://pcs-log.readthedocs.io/en/latest/index.html)&gt; &gt; &lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;table-of-contents&quot; class=&quot;section&quot;&gt;## Table of contents&lt;div class=&quot;toctree-wrapper compound&quot;&gt;&lt;span id=&quot;document-usage&quot;&gt;&lt;/span&gt;&lt;div id=&quot;usage&quot; class=&quot;section&quot;&gt;### Usage&lt;div id=&quot;installation&quot; class=&quot;section&quot;&gt;&lt;span id=&quot;id1&quot;&gt;&lt;/span&gt;#### InstallationTo use pcs\_log, first install it using pip:&lt;div class=&quot;highlight-console notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;    (.venv) $ pip install pcs_log&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;use-in-your-program&quot; class=&quot;section&quot;&gt;#### Use in your program  - This module handles the most often used logging options:          - log to console          - log to syslog          - log to file with autorotation          - additional a standalone logging server accessible via telnet          - multiprocessing logs          - mutithreading logs          - enhanced formatting optionsnormally imported as&lt;div class=&quot;highlight-python notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;    import logging    from pcs_alog.Logp import LogP&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;span id=&quot;document-api&quot;&gt;&lt;/span&gt;&lt;div id=&quot;logp-reference&quot; class=&quot;section&quot;&gt;### LogP reference&lt;div class=&quot;admonition note&quot;&gt;NoteNormally you import only “LogP” from this module.&lt;div class=&quot;highlight-python notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;    import logging    from pcs_log.LogP import LogP&lt;/div&gt;&lt;/div&gt;This is a “singleton” and used for all your code-modules. You shouldinsert this two lines in every module using logging, but call`SetupLogging()` only once. (except you make your program or parts of itto “daemons”, in this case you MUST call this function **AFTER**daemonizing within the daemonized codeblock again, because all thefile-handles are deleted on daemonizing)&lt;/div&gt;  - *&lt;span class=&quot;pre&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;*&lt;span class=&quot;sig-prename descclassname&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogP.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;sig-name descname&quot;&gt;&lt;span class=&quot;pre&quot;&gt;\_LogP&lt;/span&gt;&lt;/span&gt;          - *&lt;span class=&quot;pre&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;*&lt;span class=&quot;sig-name descname&quot;&gt;&lt;span class=&quot;pre&quot;&gt;GetLogging&lt;/span&gt;&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;pre&quot;&gt;tuple&lt;/span&gt;*          Return logging functions                  - Returns              The logging functions in order logging.error,            logging.status, logging.warning, logging.msg, logging.info,            logging.debug, logging.trace                  - Return type              tuple        &lt;!-- end list --&gt;          - &lt;span class=&quot;sig-name descname&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PollRestart&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;sig-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sig-paren&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;sig-return&quot;&gt;&lt;span class=&quot;sig-return-icon&quot;&gt;→&lt;/span&gt;        &lt;span class=&quot;sig-return-typehint&quot;&gt;&lt;span class=&quot;pre&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;          Prüfe ob der Logserver neu gestartet werden muss        &lt;!-- end list --&gt;          - &lt;span class=&quot;sig-name descname&quot;&gt;&lt;span class=&quot;pre&quot;&gt;SetupLogging&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;sig-paren&quot;&gt;(&lt;/span&gt;*&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;\*&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;AppName&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;str&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Verbose&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NoDaemon&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;True&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;StdErr&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;StdErrIsStdOut&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogPath&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;''&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogFileInterval&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;86400&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogFileCount&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;14&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Quiet&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogProcInfo&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogProcInfoModLen&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;15&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogProcInfoFuncLen&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;15&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogLevelType&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;2&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogMultiProc&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogMultiProcLen&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;15&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogMultiThread&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogMultiThreadLen&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;15&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogStackOnDebug&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'NONE'&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogLongLevel&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'DEBUG'&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogStackDepth&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;5&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogDebugIp&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogDebugPort&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LogDebugCacheSize&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;100&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NoReset&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;TimeOnSyslog&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;True&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;translation&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;\[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pre&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;pre&quot;&gt;\]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;default_value&quot;&gt;&lt;span class=&quot;pre&quot;&gt;None&lt;/span&gt;&lt;/span&gt;*,        *&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;pre&quot;&gt;\*\*&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;pre&quot;&gt;kwargs&lt;/span&gt;&lt;/span&gt;*&lt;span class=&quot;sig-paren&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;sig-return&quot;&gt;&lt;span class=&quot;sig-return-icon&quot;&gt;→&lt;/span&gt;        &lt;span class=&quot;sig-return-typehint&quot;&gt;&lt;span class=&quot;pre&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;                &gt;         &gt;         &gt; &lt;div&gt;        &gt;         &gt; Creates a defined Log-setting with rich options.        &gt;         &gt; &lt;div class=&quot;admonition note&quot;&gt;        &gt;         &gt; Note        &gt;         &gt; All arguments are named arguments - NO positional arguments\!        &gt;         &gt; &lt;/div&gt;        &gt;         &gt;   - param AppName          &gt;     Name of application        &gt;         &gt;   - type AppName          &gt;     str        &gt;         &gt;   - param Verbose          &gt;     Detail of logging. Defaults to 0. Possible values:        &gt;             &gt;     &lt;div class=&quot;highlight-text notranslate&quot;&gt;        &gt;             &gt;     &lt;div class=&quot;highlight&quot;&gt;        &gt;             &gt;         0 = ERROR and STATUS        &gt;         1 = MSG, WARNING, STATUS, ERROR        &gt;         2 = INFO, MSG, WARNING, STATUS, ERROR        &gt;         3 = DEBUG, INFO, MSG, WARNING, STATUS, ERROR        &gt;         4 = TRACE, DEBUG, INFO, MSG, WARNING, STATUS, ERROR        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     &lt;/div&gt;        &gt;         &gt;   - type Verbose          &gt;     int, optional        &gt;         &gt;   - param NoDaemon          &gt;     Is this an terminal-task. Defaults to True. If this is        &gt;     False =\&gt; I am a daemon.        &gt;             &gt;     On deamons output to StdErr do not make any sense, so this        &gt;     is ignored and “syslog” or “logfile” is used.        &gt;         &gt;   - type NoDaemon          &gt;     bool, optional        &gt;         &gt;   - param StdErr          &gt;     Log to StdErr. Defaults to False. If this is set the log        &gt;     goes to StdErr. Ignored if we are a daemon.        &gt;         &gt;   - type StdErr          &gt;     bool, optional        &gt;         &gt;   - param StdErrIsStdOut          &gt;     Redirect StdErr-Logging to StdOut. Defaults to False.        &gt;         &gt;   - type StdErrIsStdOut          &gt;     bool, optional        &gt;         &gt;   - param TimeOnSyslog          &gt;     Show timestamp if logging to StdErr. Defaults to True.        &gt;         &gt;   - type TimeOnSyslog          &gt;     bool, optional        &gt;         &gt;   - param LogPath          &gt;     Log to a Log-file. Defaults to ‘’.        &gt;             &gt;     Log to the file which is given as the argument. this file        &gt;     is rotated on a daily base and holded up to 14 files        &gt;         &gt;   - type LogPath          &gt;     str, optional        &gt;         &gt;   - param LogFileInterval          &gt;     Number of seconds a logfile lasts until it is rotated.        &gt;     Defaults to 60\*60\*24 =\&gt; one day.        &gt;         &gt;   - type LogFileInterval          &gt;     int, optional        &gt;         &gt;   - param LogFileCount          &gt;     Number of log-file kept. Defaults to 14.        &gt;         &gt;   - type LogFileCount          &gt;     int, optional        &gt;         &gt;   - param Quiet          &gt;     Output only errors. Defaults to False.        &gt;         &gt;   - type Quiet          &gt;     bool, optional        &gt;         &gt;   - param LogProcInfo          &gt;     Show process and thread. Defaults to False.        &gt;         &gt;   - type LogProcInfo          &gt;     bool, optional        &gt;         &gt;   - param LogLevelType          &gt;     Format of LevelInfo. Defaults to 2.        &gt;             &gt;     &lt;div class=&quot;highlight-text notranslate&quot;&gt;        &gt;             &gt;     &lt;div class=&quot;highlight&quot;&gt;        &gt;             &gt;         0=None,        &gt;         1=Number,        &gt;         2=Name,        &gt;         3=Both.        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     &lt;/div&gt;        &gt;         &gt;   - type LogLevelType          &gt;     int, optional        &gt;         &gt;   - param LogMultiProc          &gt;     Show process-names. Defaults to False.        &gt;         &gt;   - type LogMultiProc          &gt;     bool, optional        &gt;         &gt;   - param LogMultiThread          &gt;     Show thread-names. Defaults to False.        &gt;         &gt;   - type LogMultiThread          &gt;     bool, optional        &gt;         &gt;   - param LogProcInfoModLen          &gt;     Length of the ‘module’ part of the log. Defaults to 15.        &gt;             &gt;     Set to 0 for not alligning this part. Optimally this is        &gt;     the length of the longest modulename in your program. This        &gt;     is only used to allign the log-lines to make the rading        &gt;     easier. This names are NEVER truncated.        &gt;         &gt;   - type LogProcInfoModLen          &gt;     int, optional        &gt;         &gt;   - param LogProcInfoFuncLen          &gt;     Length of the ‘function’ part of the log. Defaults to 15.        &gt;             &gt;     Set to 0 for not alligning this part. Optimally this is        &gt;     the length of the longest functionname in your program.        &gt;     This is only used to allign the log-lines to make the        &gt;     rading easier. This names are NEVER truncated.        &gt;         &gt;   - type LogProcInfoFuncLen          &gt;     int, optional        &gt;         &gt;   - param LogMultiProcLen          &gt;     Length of the ‘procedure’ part of the log. Defaults to 15.        &gt;             &gt;     Set to 0 for not alligning this part. Optimally this is        &gt;     the length of the longest procedurename in your program.        &gt;     This is only used to allign the log-lines to make the        &gt;     rading easier. This names are NEVER truncated.        &gt;         &gt;   - type LogMultiProcLen          &gt;     int, optional        &gt;         &gt;   - param LogMultiThreadLen          &gt;     Length of the ‘thread’ part of the log. Defaults to 15.        &gt;             &gt;     Set to 0 for not alligning this part. Optimally this is        &gt;     the length of the longest threadname in your program. This        &gt;     is only used to allign the log-lines to make the rading        &gt;     easier. This names are NEVER truncated.        &gt;         &gt;   - type LogMultiThreadLen          &gt;     int, optional        &gt;         &gt;   - param LogStackOnDebug          &gt;     Log-level below or equal a call-stack trace is included.        &gt;             &gt;     Defaults to “NONE” =\&gt; Disabled. The levels are:        &gt;             &gt;     &lt;div class=&quot;highlight-text notranslate&quot;&gt;        &gt;             &gt;     &lt;div class=&quot;highlight&quot;&gt;        &gt;             &gt;         &quot;ERROR&quot;        &gt;         &quot;STATUS&quot;        &gt;         &quot;WARNING&quot;        &gt;         &quot;MSG&quot;        &gt;         &quot;INFO&quot;        &gt;         &quot;DEBUG&quot;        &gt;         &quot;TRACE&quot;        &gt;         &quot;NONE&quot;        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     All other values are interpretet as “NONE”. Value is not        &gt;     case-sensitive.        &gt;         &gt;   - type LogStackOnDebug          &gt;     str, optional        &gt;         &gt;   - param LogLongLevel          &gt;     Log-level below or equal a long info is included.        &gt;             &gt;     Above this level except the ERROR-level the fields        &gt;             &gt;     &lt;div class=&quot;highlight-text notranslate&quot;&gt;        &gt;             &gt;     &lt;div class=&quot;highlight&quot;&gt;        &gt;             &gt;         processname,        &gt;         threadname,        &gt;         module,        &gt;         line-no and        &gt;         levelinfo        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     are not within the output. Alternative this can be a        &gt;     comma-separated list of levelnames in this case for this        &gt;     log-levels long infos are provided. Within this list        &gt;     “NONE” is ignored. Defaults to “DEBUG”.        &gt;             &gt;     The levels are:        &gt;             &gt;     &lt;div class=&quot;highlight-text notranslate&quot;&gt;        &gt;             &gt;     &lt;div class=&quot;highlight&quot;&gt;        &gt;             &gt;         &quot;ERROR&quot;        &gt;         &quot;STATUS&quot;        &gt;         &quot;WARNING&quot;        &gt;         &quot;MSG&quot;        &gt;         &quot;INFO&quot;        &gt;         &quot;DEBUG&quot;        &gt;         &quot;TRACE&quot;        &gt;         &quot;NONE&quot;        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     All other values are interpretet as “NONE”. Value is not        &gt;     case-sensitive.        &gt;         &gt;   - type LogLongLevel          &gt;     str, optional        &gt;         &gt;   - param LogStackDepth          &gt;     Maximum number of call-stack entries to display. Defaults        &gt;     to 5.        &gt;         &gt;   - type LogStackDepth          &gt;     int, optional        &gt;         &gt;   - param LogDebugPort          &gt;     If 0 no debug-server is started. Else the value has to be        &gt;     between 1024 and 65535. A log-server is started on        &gt;     ‘LogDebugIp’ at port ‘LogDebugPort’.        &gt;             &gt;     It is possible to connect to this port (e.g with telnet)        &gt;     to receive ALL log-messages from this program. ALL means        &gt;     really all, no mather which loglevel is set. This output        &gt;     also includes all possible information about process,        &gt;     thread, module and function. The stacktrace        &gt;     (‘LogStackOnDebug’) is also honored. This output can be        &gt;     really heavy, but can help to debug already running        &gt;     programs without the need to restart with another        &gt;     loglevel.        &gt;             &gt;     This server runs as a separated process and you have to        &gt;     terminate it by calling the        &gt;     [`Stop()`](#LogP._LogP.Stop &quot;LogP._LogP.Stop&quot;) function of        &gt;     the LogP-object, otherwise this process may block the        &gt;     termination of your program. This server will restart        &gt;     himselve if it is terminated by any means except you call        &gt;     the above mentioned functions.        &gt;             &gt;     &lt;div class=&quot;admonition note&quot;&gt;        &gt;             &gt;     Note        &gt;             &gt;     This port has to be free.        &gt;             &gt;     &lt;/div&gt;        &gt;             &gt;     Defaults to 0.        &gt;         &gt;   - type LogDebugPort          &gt;     int, optional        &gt;         &gt;   - param LogDebugIp          &gt;     The IP-address to bind to. This address must exist on the        &gt;     host this program is running. ‘0.0.0.0’ for ‘all IPs’ is        &gt;     also valid. Only examined if ‘LogDebugPort’ \&gt; 0. Defaults        &gt;     to ‘127.0.0.1’,        &gt;         &gt;   - type LogDebugIp          &gt;     str, optional        &gt;         &gt;   - param LogDebugCacheSize          &gt;     Only used if ‘LogDebugPort’ \&gt; 0. This is the number of        &gt;     log-messages cached for use at a new connection to the        &gt;     server. So if someone connects to the server he receives        &gt;     the last ‘LogDebugCacheSize’ log messages and after them        &gt;     all new messages.        &gt;             &gt;     This is like a history. If set to 0 this function is        &gt;     disabled. Defaults to 100.        &gt;         &gt;   - type LogDebugCacheSize          &gt;     int, optional        &gt;         &gt;   - param NoReset          &gt;     Do not reset logger on init. Defaults to False.        &gt;             &gt;     &lt;div class=&quot;admonition note&quot;&gt;        &gt;             &gt;     Note        &gt;             &gt;     Use with care. Could tend to mess up the logging.        &gt;             &gt;     &lt;/div&gt;        &gt;         &gt;   - type NoReset          &gt;     bool, optional        &gt;         &gt;   - param translation          &gt;     If given the programmer can overwrite the error-messages        &gt;     used. There are 2 functions to help creating this dict:        &gt;             &gt;     &gt;         &gt;     &gt;         &gt;     &gt; &lt;div&gt;        &gt;     &gt;         &gt;     &gt; LogP.\_PrintInitTranslation()        &gt;     &gt; LogP.\_PrintActualTranslation()        &gt;     &gt;         &gt;     &gt; &lt;/div&gt;        &gt;             &gt;     they do exactly what their name says: they print either        &gt;     the default value for the translationtable or the actual        &gt;     value after overwriting some or all values with this dict.        &gt;     default = {}        &gt;         &gt;   - type translation          &gt;     dict, optional        &gt;         &gt; &lt;/div&gt;                  - After calling this function the new logging is set up. Use            the standard functions              logger.error, logger.warning, etc and additional you can use            logger.msg, logger.status and logger.trace.                  - The severity is in descending order:              ERROR, STATUS, WARNING, MSG, INFO, DEBUG, TRACE                At the end of your program call:                &gt;         &gt;         &gt; &lt;div&gt;        &gt;         &gt; LogP.Stop()        &gt;         &gt; &lt;/div&gt;                this will stop the optional logger-process which send the output        to a telnet-connection if LogDebugPort is not 0.                Output format:                &lt;div class=&quot;highlight-text notranslate&quot;&gt;                &lt;div class=&quot;highlight&quot;&gt;                    General overview:                2022-06-22 07:37:42,494 Appname:MainProcess:MainThread LogP:main:461 - 40=   ERROR - Message                                        ^       ^           ^          ^               ^     ^       ^                                        |       |           |          |               |     |       |                Name of application ----+       |           |          |               |     |       |                    only if not StdErr          |           |          |               |     |       |                Name of process ----------------+           |          |               |     |       |                    if LogMultiProc = true                  |          |               |     |       |                Name of thread if --------------------------+          |               |     |       |                    LogMultiThread = true                              |               |     |       |                Module, function and linenumber -----------------------+               |     |       |                    only if LogProcInfo = true                                         |     |       |                Level-number of message if LogLevelType = 1 or 3 ----------------------+     |       |                Level-name of message if LogLevelType = 2 or 3 ------------------------------+       |                The message given to the log-call ---------------------------------------------------+                            The minimal log entry for StdErr is:                    2022-06-22 07:37:42,494 Errormessage                The maximal log entry is shown above.                        The output format to StdErr is like this:                2022-06-22 07:37:42,494 MainProcess:MainThread LogP:main:461     - 40=   ERROR - Message                    No &quot;Appname&quot; because you know whitch program is running.                    The timestamp is only written if 'TimeOnSyslog' is True.                    REMEMBER: this is send to StdErr or to StdOut if 'StdErrIsStdOut' is True.                        The output format to sylog like this:                Appname:MainProcess:MainThread LogP:main:461 - 40=   ERROR - Errormessage                    No timestamp because syslogg adds his own timestamp.                        The output format to a logfile is like this:                2022-06-22 07:37:42,494 Appname:MainProcess:MainThread LogP:main:461 - 40=   ERROR - Message                                    if a call-stack trace is requested lines like these are appended:                    File &quot;./LogP.py&quot;, line 471, in &lt;module&gt;                    main()                    File &quot;./LogP.py&quot;, line 448, in main                    abc()                    File &quot;./LogP.py&quot;, line 411, in abc                    LogP.debug('Debug')                &lt;/div&gt;                &lt;/div&gt;        &lt;!-- end list --&gt;          - &lt;span class=&quot;sig-name descname&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Stop&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;sig-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sig-paren&quot;&gt;)&lt;/span&gt;          Stop the Log-Server&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;-----&lt;div role=&quot;contentinfo&quot;&gt;© Copyright 2022, Ing. Rainer Pietsch.&lt;/div&gt;Built with [Sphinx](https://www.sphinx-doc.org/) using a[theme](https://github.com/readthedocs/sphinx_rtd_theme) provided by[Read the Docs](https://readthedocs.org).&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>