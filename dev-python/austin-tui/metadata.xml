<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;br&gt;&lt;img src=&quot;art/logo.png&quot; alt=&quot;Austin TUI&quot; /&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 align=&quot;center&quot;&gt;A Top-like Interface for Austin&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/P403n1x87/austin-tui/actions?workflow=Tests&quot;&gt;    &lt;img src=&quot;https://github.com/P403n1x87/austin-tui/workflows/Tests/badge.svg&quot;         alt=&quot;GitHub Actions: Tests&quot;&gt;  &lt;/a&gt;  &lt;br/&gt;  &lt;!-- &lt;a href=&quot;https://travis-ci.org/P403n1x87/austin-tui&quot;&gt;    &lt;img src=&quot;https://travis-ci.org/P403n1x87/austin-tui.svg?branch=master&quot;         alt=&quot;Travis CI&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/P403n1x87/austin-tui&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/P403n1x87/austin-tui/branch/master/graph/badge.svg&quot;         alt=&quot;Codecov&quot;&gt;  &lt;/a&gt; --&gt;  &lt;a href=&quot;https://pypi.org/project/austin-tui/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/austin-tui.svg&quot;         alt=&quot;PyPI&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/austin-tui/&quot;&gt;    &lt;img src=&quot;https://static.pepy.tech/personalized-badge/austin-tui?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=downloads&quot;         alt=&quot;PyPI Downloads&quot;&gt;  &lt;/a&gt;  &amp;nbsp;  &lt;a href=&quot;https://anaconda.org/conda-forge/austin-tui&quot;&gt;    &lt;img src=&quot;https://anaconda.org/conda-forge/austin-tui/badges/version.svg&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://anaconda.org/conda-forge/austin-tui&quot;&gt;    &lt;img src=&quot;https://anaconda.org/conda-forge/austin-tui/badges/downloads.svg&quot; /&gt;  &lt;/a&gt;    &lt;br/&gt;    &lt;a href=&quot;https://github.com/P403n1x87/austin-tui/blob/master/LICENSE.md&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/license-GPLv3-ff69b4.svg&quot;         alt=&quot;LICENSE&quot;&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#synopsis&quot;&gt;&lt;b&gt;Synopsis&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#installation&quot;&gt;&lt;b&gt;Installation&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#usage&quot;&gt;&lt;b&gt;Usage&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#compatibility&quot;&gt;&lt;b&gt;Compatibility&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#contribute&quot;&gt;&lt;b&gt;Contribute&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a    href=&quot;https://www.buymeacoffee.com/Q9C1Hnm28&quot;    target=&quot;_blank&quot;&gt;  &lt;img    src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot;    alt=&quot;Buy Me A Coffee&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;# SynopsisThe Python TUI is a top-like text-based user interface for [Austin], the framestack sampler for CPython. Originally planned as a sample application toshowcase [Austin] uses, it's been promoted to a full-fledged project thanks togreat popularity.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;art/austin-tui.gif&quot;       style=&quot;box-shadow: #111 0px 0px 16px;&quot;       alt=&quot;Austin TUI&quot; /&gt;&lt;/p&gt;The header shows you the information of the application that is being profiled,like its PID, the command line used to invoke it, as well as a plot of theamount of CPU and memory that is being used by it, in a system-monitor style.To know more about how the TUI itself was made, have a read through [The AustinTUI Way to Resourceful Text-based User Interfaces].# InstallationAustin TUI can be installed directly from PyPI with~~~ consolepipx install austin-tui~~~&gt; **NOTE** In order for the TUI to work, the Austin 3 binary needs to be&gt; discoverable in the ways documented by the [austin-python] library. Have a&gt; look at [Austin installation] instructions to see how you can easily install&gt; Austin on your platform.On macOS and Linux, Austin TUI and its dependencies (including Austin itself) can be installed via conda with~~~ consoleconda install -c conda-forge austin-tui~~~# UsageOnce [Austin] 3 and Austin TUI are installed, you can start using themstraight-away. If you want to launch and profile a Python script, say`myscript.py`, you can do~~~ consoleaustin-tui python3 myscript.py~~~or, if `myscript.py` is an executable script,~~~ consoleaustin-tui ./myscript.py~~~Like [Austin], the TUI can also attach to a running Python application. Toanalyse the frame stacks of all the processes of a running WSGI server, forexample, get hold of the PID of the parent process and do~~~ consolesudo austin-tui -Cp &lt;pid&gt;~~~The `-C` option will instruct [Austin] to look for child Python processes, and youwill be able to navigate through them with the arrow keys.&gt; The TUI is based on `python-curses`. The version included with the standard&gt; Windows installations of Python is broken so it won't work out of the box. A&gt; solution is to install the the wheel of the port to Windows from&gt; [this](https://www.lfd.uci.edu/~gohlke/pythonlibs/#curses) page. Wheel files&gt; can be installed directly with `pip`, as described in the&gt; [linked](https://pip.pypa.io/en/latest/user_guide/#installing-from-wheels)&gt; page.## Thread navigationProfiling data is processed on a per-thread basis. The total number of threads(across all processes, if sampling child processes) is displayed in thetop-right corner of the TUI. To navigate to a different thread, use the&lt;kbd&gt;&amp;larr;&lt;/kbd&gt; and &lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; arrows. The PID and TID of the currentlyselected thread will appear in the middle of the top bar in the TUI.## Full modeBy default, Austin TUI shows you statistics of the last seen stack for eachprocess and thread when the UI is refreshed (about every second). This issimilar to what top does with all the running processes on your system.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;art/austin-tui-normal-mode.png&quot;       style=&quot;box-shadow: #111 0px 0px 16px;&quot;       alt=&quot;Austin TUI - Default mode&quot; /&gt;&lt;/p&gt;If you want to see all the collected statistics, with the frame stacksrepresented as a rooted tree, you can press &lt;kbd&gt;F&lt;/kbd&gt; to enter the _Full_mode. The last seen stack will be highlighted so that you also have thatinformation available while in this mode.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;art/austin-tui-full-mode.png&quot;       style=&quot;box-shadow: #111 0px 0px 16px;&quot;       alt=&quot;Austin TUI - Full mode&quot; /&gt;&lt;/p&gt;The information that gets displayed is very dynamic and could become tricky toinspect. The current view can be paused by pressing &lt;kbd&gt;P&lt;/kbd&gt;. To resumerefreshing the view, press &lt;kbd&gt;P&lt;/kbd&gt; again. While the view is paused,profiling data is still being captured and processed in the background, so thatwhen the view is resumed, the latest figures are shown.## Graph modeA live flame graph visualisation of the current thread statistics can bedisplayed by pressing &lt;kbd&gt;G&lt;/kbd&gt;. This might help with identifying the largestframes at a glance.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;art/austin-tui-flamegraph.gif&quot;       style=&quot;box-shadow: #111 0px 0px 16px;&quot;       alt=&quot;Austin TUI - Live flame graph&quot; /&gt;&lt;/p&gt;To toggle back to the top view, simply press &lt;kbd&gt;G&lt;/kbd&gt; again.## Save statisticsPeeking at a running Python application is nice but in many cases you would wantto save the collected data for further offline analysis (for example, you mightwant to represent it as a flame graph). At any point, whenever you want to dumpthe collected data to a file, you can press &lt;kbd&gt;S&lt;/kbd&gt; and a file with all thesamples will be generated for you in the working directory, prefixed with`austin_` and followed by a timestamp. The TUI will notify of the successfuloperation on the bottom-right corner.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;art/austin-tui-save.png&quot;       style=&quot;box-shadow: #111 0px 0px 16px;&quot;       alt=&quot;Austin TUI - Save notification&quot; /&gt;&lt;/p&gt;If you run the Austin TUI inside VS Code, you can benefit from the editor'sterminal features, like using &lt;kbd&gt;Ctrl&lt;/kbd&gt;/&lt;kbd&gt;Cmd&lt;/kbd&gt;+&lt;kbd&gt;Left-Click&lt;/kbd&gt;to hop straight into a source file at a given line. You can also leverage theTUI's save feature to export the collected samples and import them into the[Austin VS Code] extension to also get a flame graph representation.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;art/austin-tui-vscode.gif&quot;       style=&quot;box-shadow: #111 0px 0px 16px;&quot;       alt=&quot;Austin TUI&quot; /&gt;&lt;/p&gt;## ThresholdThe statistics reported by the TUI might be overwhelming, especially in fullmode. To reduce the amout of data that gets displayed, the keys &lt;kbd&gt;+&lt;/kbd&gt; and&lt;kbd&gt;-&lt;/kbd&gt; can be used to increase or lower the `%TOTAL` threshold&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;art/austin-tui-threshold.png&quot;       style=&quot;box-shadow: #111 0px 0px 16px;&quot;       alt=&quot;Austin TUI - Threshold demonstration&quot; /&gt;&lt;/p&gt;# CompatibilityAustin TUI has been tested with Python 3.7-3.10 and is known to work on**Linux**, **macOS** and **Windows**.Since Austin TUI uses [Austin] to collect samples, the same note applies here:&gt; Due to the **System Integrity Protection** introduced in **macOS** with El&gt; Capitan, Austin cannot profile Python processes that use an executable located&gt; in the `/bin` folder, even with `sudo`. Hence, either run the interpreter from&gt; a virtual environment or use a Python interpreter that is installed in, e.g.,&gt; `/Applications` or via `brew` with the default prefix (`/usr/local`). Even in&gt; these cases, though, the use of `sudo` is required.As for Linux users, the use of `sudo` can be avoided by granting Austin the`cap_sys_ptrace` capability with, e.g.~~~ consolesudo setcap cap_sys_ptrace+ep `which austin`~~~# ContributeIf you like Austin TUI and you find it useful, there are ways for you tocontribute.If you want to help with the development, then have a look at the open issuesand have a look at the [contributing guidelines](CONTRIBUTING.md) before youopen a pull request.You can also contribute to the development of the Austin TUI by becoming asponsor and/or by [buying me a coffee](https://www.buymeacoffee.com/Q9C1Hnm28)on BMC or by chipping in a few pennies on[PayPal.Me](https://www.paypal.me/gtornetta/1).&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.buymeacoffee.com/Q9C1Hnm28&quot;     target=&quot;_blank&quot;&gt;  &lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot;       alt=&quot;Buy Me A Coffee&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;[Austin]: https://github.com/P403n1x87/austin[austin-python]: https://github.com/P403n1x87/austin-python#installation[Austin installation]: https://github.com/P403n1x87/austin#installation[Austin VS Code]: https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode[The Austin TUI Way to Resourceful Text-based User Interfaces]: https://p403n1x87.github.io/the-austin-tui-way-to-resourceful-text-based-user-interfaces.html</longdescription>
</pkgmetadata>