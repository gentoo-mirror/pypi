<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dicomgenerator[![CI](https://github.com/sjoerdk/dicomgenerator/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/sjoerdk/dicomgenerator/actions/workflows/build.yml?query=branch%3Amaster)[![PyPI](https://img.shields.io/pypi/v/dicomgenerator)](https://pypi.org/project/dicomgenerator/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dicomgenerator)](https://pypi.org/project/dicomgenerator/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)Generate pydicom datasets and data elements for use in testing.* Free software: MIT license* Status: Alpha. Tests run but there are loose endsFeatures--------* Extends [factory-boy](https://factoryboy.readthedocs.io) factories to produce [pydicom](https://github.com/pydicom/pydicom) Datasets and DicomElements * Generate valid DICOM values for person name, time, date, and UID* Create json-based editable templates from any dicom file* quick_dataset(): single-line pydicom dataset init## InstallationInstall with pip::    pip install dicomgenerator## Usage### Quick datasetI have found this quite useful in testing:```python    from dicomgenerator.generators import quick_dataset    ds = quick_dataset(PatientName='Jane', StudyDescription='Test')    # &gt;&gt;&gt; ds.PatientName -&gt; 'Jane'         # &gt;&gt;&gt; ds.StudyDescription -&gt; 'Test'```### Generating a datasetGenerate a realistic CT dataset```python     from dicomgenerator.factory import CTDatasetFactory    # Generate from template    &gt;&gt;&gt; CTDatasetFactory().PatientName -&gt; 'van Haarlem^Anouk'  #  generated random name    &gt;&gt;&gt; CTDatasetFactory().PatientName -&gt; 'Loreal^Casper'      #  generated random name    # Overwrite arbitrary DICOM elements    ds.CTDatasetFactory(PatientSex='M', PatientName='Smith^Harry')    &gt;&gt;&gt; ds.PatientName -&gt; 'Smith^Harry'    &gt;&gt;&gt; ds.PatientSex  -&gt; 'M'    # generated UIDs and dates are valid DICOM    &gt;&gt;&gt; CTDatasetFactory().StudyTime        -&gt; '130624.929'    &gt;&gt;&gt; CTDatasetFactory().StudyDate        -&gt; '20110508'    &gt;&gt;&gt; CTDatasetFactory().StudyInstanceUID -&gt; '1.2.826.0.1.3680'```## Generating a data element```python    # import    from dicomgenerator.factory import DataElementFactory    # Creating a DICOM data element by name will give a realistic value and correct VR    &gt;&gt;&gt; DataElementFactory(tag='PatientName').value -&gt; &quot;van Ooyen^Fiene&quot;    &gt;&gt;&gt; DataElementFactory(tag='PatientName').VR -&gt; 'PN'    # You can also give DICOM tags as hex    &gt;&gt;&gt; DataElementFactory(tag=0x00100010).value -&gt; &quot;Weil^Jack&quot;    # Dates, times and UIDs all work.    &gt;&gt;&gt; DataElementFactory(tag=&quot;AcquisitionTime&quot;).value   -&gt; '184146.928'    &gt;&gt;&gt; DataElementFactory(tag=&quot;PatientBirthDate&quot;).value  -&gt; '20120511'    &gt;&gt;&gt; DataElementFactory(tag=&quot;SeriesInstanceUID&quot;).value -&gt; '1.2.826.0.1.3680'```### In reproducible testsYou can set the random seed in [factory-boy](https://factoryboy.readthedocs.io) like this:```python    from factory import random    def test_one:        &quot;&quot;&quot;The random patient name in this test will always be the same&quot;&quot;&quot;        random.reseed_random('any string you want')        assert element = DataElementFactory(tag='PatientName').value == &quot;van Ooyen^Fiene&quot;```### Command Line InterfaceYou can convert a DICOM file to AnnotatedDataset via the commandline. by default this will write an annotated dataset to the same folder, appending`_template.json````$ dicomgen convert to-json /tmp/dicom_file$ lsdicom_file  dicom_file_template.json```For options, use```$ dicomgen convert to-json --help```## CreditsThis package was originally created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template. </longdescription>
</pkgmetadata>