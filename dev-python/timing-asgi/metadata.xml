<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># timing-asgi[![CircleCI](https://circleci.com/gh/steinnes/timing-asgi.svg?style=svg&amp;circle-token=4e141ed4d7231ab6d00dc7b14624d759cf16e1d2)](https://circleci.com/gh/steinnes/timing-asgi)[![PyPI Downloads](https://img.shields.io/pypi/dm/timing-asgi.svg)](https://pypi.org/project/timing-asgi/)[![PyPI Version](https://img.shields.io/pypi/v/timing-asgi.svg)](https://pypi.org/project/timing-asgi/)[![License](https://img.shields.io/badge/license-mit-blue.svg)](https://pypi.org/project/timing-asgi/)This is a timing middleware for [ASGI](https://asgi.readthedocs.org), useful for automatic instrumentation of ASGI endpoints.This was developed at [GRID](https://github.com/GRID-is) for use with our backend services which are built usingpython and the ASGI framework [Starlette](https://starlette.io), and intended to emit metrics to [Datadog](https://www.datadoghq.com/),a statsd-based cloud monitoring service.# ASGI versionSince 0.2.0 this middleware only supports ASGI3, if you need ASGI2 support please use version [0.1.2](https://github.com/steinnes/timing-asgi/releases/tag/v0.1.2).# installation```pip install timing-asgi```# usageHere's an example using the Starlette ASGI framework which prints out the timing metrics..A more realistic example which emits the timing metrics to Datadog can be found at[https://github.com/steinnes/timing-starlette-asgi-example](https://github.com/steinnes/timing-starlette-asgi-example).```pythonimport loggingimport uvicornfrom starlette.applications import Starlettefrom starlette.responses import PlainTextResponsefrom timing_asgi import TimingMiddleware, TimingClientfrom timing_asgi.integrations import StarletteScopeToNameclass PrintTimings(TimingClient):    def timing(self, metric_name, timing, tags):        print(metric_name, timing, tags)app = Starlette()@app.route(&quot;/&quot;)def homepage(request):    return PlainTextResponse(&quot;hello world&quot;)app.add_middleware(    TimingMiddleware,    client=PrintTimings(),    metric_namer=StarletteScopeToName(prefix=&quot;myapp&quot;, starlette_app=app))if __name__ == &quot;__main__&quot;:    logging.basicConfig(level=logging.INFO)    uvicorn.run(app)```Running this example and sending some requests:```$ python app.pyINFO: Started server process [35895]INFO: Waiting for application startup.2019-03-07 11:38:01 INFO  [timing_asgi.middleware:44] ASGI scope of type lifespan is not supported yetINFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO: ('127.0.0.1', 58668) - &quot;GET / HTTP/1.1&quot; 200myapp.__main__.homepage 0.0006690025329589844 ['http_status:200', 'http_method:GET', 'time:wall']myapp.__main__.homepage 0.0006950000000000012 ['http_status:200', 'http_method:GET', 'time:cpu']INFO: ('127.0.0.1', 58684) - &quot;GET /asdf HTTP/1.1&quot; 404myapp.asdf 0.0005478858947753906 ['http_status:404', 'http_method:GET', 'time:wall']myapp.asdf 0.0005909999999999804 ['http_status:404', 'http_method:GET', 'time:cpu']```</longdescription>
</pkgmetadata>