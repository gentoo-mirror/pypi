<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-slack-utils [![Build Status](https://travis-ci.com/startmatter/django-slack-utils.svg?branch=master)](https://travis-ci.com/startmatter/django-slack-utils) [![Coverage Status](https://coveralls.io/repos/github/startmatter/django-slack-utils/badge.svg?branch=master)](https://coveralls.io/github/startmatter/django-slack-utils?branch=master)Django-slack-utils is helper application to handle Slack requests. It supports verification through `HTTP_X_SLACK_SIGNATURE` and `HTTP_X_SLACK_REQUEST_TIMESTAMP`.## InstallationAdd the following to your `settings.py````pythonINSTALLED_APPS = [    ...    'slack_utils',]SLACK_SIGNING_SECRET = 'your signing secret from Slack'```Add the following to your `urls.py````python    from django.conf.urls import include    from django.urls import path        urlpatterns = [        ...        path('slack/', include('slack_utils.urls')),    ]```## Usage### View decoratorThe `@slack_view` decorator adds CSRF exempt and verification to your function-based django view.```pythonfrom slack_utils.decorators import slack_viewfrom django.http import HttpResponse@slack_viewdef sample_view(request, *args, **kwargs):    # your logic    return HttpResponse(&quot;Hello!&quot;)```### Class-based viewThe `SlackView`  base class adds CSRF exempt and verification to your class-based django view.```pythonfrom slack_utils.views import SlackViewfrom django.http import HttpResponseclass SampleView(SlackView):    def post(self, request, *args, **kwargs):        # your logic        return HttpResponse(&quot;Hello!&quot;)```### Slash commandsTo handle [Slack slash commands](https://api.slack.com/slash-commands), point the command URL to `/slack/commands/`.Now just add a handler function to `slack.py` module of your app.```pythonfrom slack_utils.decorators import slack_command@slack_command('/test')def test_command(text, **kwargs):    # your logic    return &quot;Hello!&quot;     # or {'text': &quot;hello!&quot;}````**kwargs`would get the rest of the data from Slack request### Events APIPoint [Slack events API](https://api.slack.com/events-api) to the `/slack/events/`.Subscription can be done in two ways:#### Receiver decoratorPut them into `slack.py` of your app or make sure it's loaded once. ```pythonfrom slack_utils.decorators import slack_receiver@slack_receiver('reaction_added')def on_reaction_added(event_data, **kwargs):    # your logic  ```#### Signal```pythonfrom slack_utils.signals import event_receivedfrom django.dispatch import receiver@receiver(event_received)def on_event_received(sender, event_type, event_data, **kwargs):    if event_type == 'reaction_added':        # your logic     # your other logic  ```</longdescription>
</pkgmetadata>