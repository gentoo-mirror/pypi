<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![](https://img.shields.io/pypi/v/pydbml.svg)](https://pypi.org/project/pydbml/) [![](https://img.shields.io/pypi/dm/pydbml.svg)](https://pypi.org/project/pydbml/)  [![](https://img.shields.io/github/v/tag/Vanderhoof/PyDBML.svg?label=GitHub)](https://github.com/Vanderhoof/PyDBML) ![](coverage.svg)# DBML parser for Python*Compliant with DBML **v2.4.4** syntax*PyDBML is a Python parser and builder for [DBML](https://www.dbml.org) syntax. &gt; The project was rewritten in May 2022, the new version 1.0.0 is not compatible with the previous ones. See details in [Upgrading to PyDBML 1.0.0](docs/upgrading.md).**Docs:*** [Class Reference](docs/classes.md)* [Creating DBML schema](docs/creating_schema.md)* [Upgrading to PyDBML 1.0.0](docs/upgrading.md)&gt; PyDBML requires Python v3.8 or higher## InstallationYou can install PyDBML using pip:```bashpip3 install pydbml```## Quick startTo parse a DBML file, import the `PyDBML` class and initialize it with Path object```python&gt;&gt;&gt; from pydbml import PyDBML&gt;&gt;&gt; from pathlib import Path&gt;&gt;&gt; parsed = PyDBML(Path('test_schema.dbml'))```or with file stream```python&gt;&gt;&gt; with open('test_schema.dbml') as f:...     parsed = PyDBML(f)```or with entire source string```python&gt;&gt;&gt; with open('test_schema.dbml') as f:...     source = f.read()&gt;&gt;&gt; parsed = PyDBML(source)&gt;&gt;&gt; parsed&lt;Database&gt;```The parser returns a Database object that is a container for the parsed DBML entities.You can access tables inside the `tables` attribute:```python&gt;&gt;&gt; for table in parsed.tables:...     print(table.name)...ordersorder_itemsproductsusersmerchantscountries```Or just by getting items by index or full table name:```python&gt;&gt;&gt; parsed[1]&lt;Table 'public' 'order_items'&gt;&gt;&gt;&gt; parsed['public.countries']&lt;Table 'public' 'countries'&gt;```Other attributes are:* **refs** — list of all references,* **enums** — list of all enums,* **table_groups** — list of all table groups,* **project** — the Project object, if was defined.Generate SQL for your DBML Database by accessing the `sql` property:```python&gt;&gt;&gt; print(parsed.sql)  # doctest:+ELLIPSISCREATE TYPE &quot;orders_status&quot; AS ENUM (  'created',  'running',  'done',  'failure',);&lt;BLANKLINE&gt;CREATE TYPE &quot;product status&quot; AS ENUM (  'Out of Stock',  'In Stock',);&lt;BLANKLINE&gt;CREATE TABLE &quot;orders&quot; (  &quot;id&quot; int PRIMARY KEY AUTOINCREMENT,  &quot;user_id&quot; int UNIQUE NOT NULL,  &quot;status&quot; &quot;orders_status&quot;,  &quot;created_at&quot; varchar);...```Generate DBML for your Database by accessing the `dbml` property:```python&gt;&gt;&gt; parsed.project.items['author'] = 'John Doe'&gt;&gt;&gt; print(parsed.dbml)  # doctest:+ELLIPSISProject &quot;test_schema&quot; {    author: 'John Doe'    Note {        'This schema is used for PyDBML doctest'    }}&lt;BLANKLINE&gt;Enum &quot;orders_status&quot; {    &quot;created&quot;    &quot;running&quot;    &quot;done&quot;    &quot;failure&quot;}&lt;BLANKLINE&gt;Enum &quot;product status&quot; {    &quot;Out of Stock&quot;    &quot;In Stock&quot;}&lt;BLANKLINE&gt;Table &quot;orders&quot; {    &quot;id&quot; int [pk, increment]    &quot;user_id&quot; int [unique, not null]    &quot;status&quot; &quot;orders_status&quot;    &quot;created_at&quot; varchar}&lt;BLANKLINE&gt;Table &quot;order_items&quot; {    &quot;order_id&quot; int    &quot;product_id&quot; int    &quot;quantity&quot; int [default: 1]}...```</longdescription>
</pkgmetadata>