<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SQLDF - Structured Query Language (SQL) on DataFrames (DF)A simple wrapper to run SQL (SQLite) queries on pandas.DataFrame objects (Python).## Requirements* 'python' &gt;= 3.5* 'pandas' &gt;= 1.0## InstallationWith `pip` (from PyPI repository):```pip install sqldf```## Examples of use* SELECT query with WHERE condition```python# Import librariesimport pandas as pdimport numpy as npimport sqldf# Create a dummy pd.Dataframedf = pd.DataFrame({'col1': ['A', 'B', np.NaN, 'C', 'D'], 'col2': ['F', np.NaN, 'G', 'H', 'I']})# Define a SQL (SQLite3) queryquery = &quot;&quot;&quot;SELECT *FROM dfWHERE col_1 IS NOT NULL;&quot;&quot;&quot;# Run the querydf_view = sqldf.run(query)```* UPDATE query that change inplace a pd.Dataframe```python# Import librariesimport pandas as pdimport sqldf# Create a dummy pd.Dataframeurl = ('https://raw.github.com/pandas-dev/pandas/master/pandas/tests/data/tips.csv')tips = pd.read_csv(url)# Define a SQL (SQLite3) queryquery = &quot;&quot;&quot;UPDATE tipsSET tip = tip*2WHERE tip &lt; 2;&quot;&quot;&quot;# Run the querysqldf.run(query)```* More examples in the notebook:[Demonstration notebook for SQLDF](https://github.com/christophelebrun/sqldf/blob/master/demo/SQLDF_demo.ipynb)## How it works1) It create a virtual in-memory SQLite3 database at runtime2) It convert the pd.DataFrame input(s) to SQL table(s)3) It proceed the SQL query on the table(s)4) It convert back the SQL table(s) to updated pd.DataFrame(s) if required5) It returns the result of the query if required</longdescription>
</pkgmetadata>