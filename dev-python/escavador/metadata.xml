<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># O SDK em Python da API do Escavador## Documentação disponível- [API V1](https://api.escavador.com/v1/docs/)- [API V2](https://api.escavador.com/v2/docs/)## InstalaçãoO SDK pode ser instalado via `pip` através do comando:```bashpython -m pip install escavador```##  Requisitos- Python 3.6+## Como ConfigurarNo arquivo `.env` na raíz do seu projeto, crie uma variável chamada `ESCAVADOR_API_KEY` e atribua a ela o seu token da API. A linha onde a variável é definida deve ficar parecida com:```bashESCAVADOR_API_KEY=&quot;SUA_API_KEY&quot;```Alternativamente, utilize a função `config()` durante a execução do seu projeto, antes de utilizar qualquer outro módulo do SDK.```pyimport escavadorescavador.config(&quot;SUA_API_KEY&quot;)```Para obter seu token da API, acesse o [painel de tokens](https://api.escavador.com/tokens)## Exemplos### Consultando os processos de uma empresa pelo CNPJ usando a API V2[Processos de um envolvido pelo seu nome ou documento](https://api.escavador.com/v2/docs/#processos-de-envolvidos-por-nome-ou-cpfcnpj)```pyfrom escavador.v2 import Processo# Chamada inicial na API /api/v2/envolvido/processos?cpf_cnpj=00000000000envolvido, processos = Processo.por_cnpj(cnpj=&quot;00653149000170&quot;)  # Também aceita o formato 00.000.000/0000-00)print(f&quot;Processos da empresa {envolvido.nome}:&quot;)while processos:    for processo in processos:        print(f&quot;{processo.numero_cnj}:&quot;)        print(f&quot;Fonte: {processo.fontes[0].nome}&quot;)        print(f&quot;Data de início: {processo.data_inicio}&quot;)        print(f&quot;Última movimentação: {processo.data_ultima_movimentacao}&quot;)    # Chamada para a paginação via cursor na API /api/v2/envolvido/processos?cpf_cnpj=00000000000&amp;cursor=HASH_PROXIMA_PAGINA    processos = processos.continuar_busca()```### Consultando o processo mais recente de um advogado usando a API V2[Consultando processos de um advogado usando sua OAB](https://api.escavador.com/v2/docs/#processos-de-um-advogado-por-oab)```pyfrom escavador import CriterioOrdenacao, Ordemfrom escavador.v2 import Processoadvogado, processos = Processo.por_oab(numero=12345,                                       estado=&quot;SP&quot;,                                       ordena_por=CriterioOrdenacao.INICIO,                                       ordem=Ordem.DESC)processo = processos.pop()print(f&quot;{processo.numero_cnj}: {processo.titulo_polo_ativo} X {processo.titulo_polo_passivo}&quot;)```### Buscando as movimentações de um processo usando a API V2[Consultando movimentações de um processo](https://api.escavador.com/v2/docs/#movimentaes-de-um-processo)```pyfrom escavador.v2 import Processoresultado = Processo.movimentacoes(numero_cnj=&quot;0000000-00.0000.0.00.0000&quot;)while resultado:    for movimentacao in resultado:        print(f&quot;{movimentacao.data} - {movimentacao.tipo}:&quot;)        print(f&quot;{movimentacao.conteudo}&quot;)        print()    resultado = resultado.continuar_busca() # Solicita a próxima página de movimentações```### Consultando a última movimentação dos processos mais recentes de uma pessoa pelo nome usando a API V2[Processos de um envolvido pelo seu nome ou documento](https://api.escavador.com/v2/docs/#processos-de-envolvidos-por-nome-ou-cpfcnpj)```pyfrom escavador import CriterioOrdenacao, Ordemfrom escavador.v2 import Processoenvolvido, processos = Processo.por_nome(nome=&quot;Fulano de Tal da Silva&quot;,                                         ordena_por=CriterioOrdenacao.INICIO,                                         ordem=Ordem.DESC)for processo in processos:    print(f&quot;{processo.numero_cnj}:&quot;)    print(f&quot;Fonte: {processo.fontes[0].nome}&quot;)    print(f&quot;Data de início: {processo.data_inicio}&quot;)    movimentacoes = Processo.movimentacoes(numero_cnj=processo.numero_cnj)    if movimentacoes:        print(f&quot;Última movimentação: {movimentacoes[0].conteudo}&quot;)```### Solicitar busca assíncrona de processo usando a API V1[Buscando informações do processo no sistema do Tribunal](https://api.escavador.com/v1/docs/#pesquisar-processo-no-site-do-tribunal-assncrono) (Assíncrono)```pyfrom escavador import Processoresultado_busca = Processo.informacoes_no_tribunal(&quot;0000000-00.0000.0.00.0000&quot;)  # Gera uma busca assíncronaif resultado_busca['resposta']['status'] == 'SUCESSO':    for instancia in resultado_busca['resposta']['resposta']['instancias']:        print(instancia['assunto'])elif resultado_busca['resposta']['status'] == 'PENDENTE':    # O ID de uma busca assíncrona pode ser usado para consultar seu status     # ou identificar a requisição originária ao receber o callback no seu servidor.    id_async = resultado_busca['resposta']['id']```É recomendado que se utilize o callback ao invés de continuamente consultar o resultado. Entretanto, é possível consultar em massa os seus callbacks cadastrados utilizando a classe `Callback`.O módulo `server` da biblioteca `http` oferece uma interface simples para receber callbacks. Basta definir o recebimento de requests `POST` conformando com [a documentação do conteúdo dos callbacks](https://api.escavador.com/v1/docs/#detalhes-dos-callbacks).### Consultar manualmente o status de uma busca assíncrona previamente solicitadaEmbora não seja recomendado devido à possibilidade de saturação do seu limite de requisições por minuto, é possível consultar periodicamente o status de uma busca assíncrona.```pyfrom escavador import BuscaAssincronafrom time import sleepwhile True:    resultado_busca = BuscaAssincrona.por_id(id_async)    if resultado_busca['resposta']['status'] != 'PENDENTE':        break    sleep(15)if resultado_busca['resposta']['status'] == 'SUCESSO':    # Os dados consultados estarão disponíveis no campo ['resposta']['resposta']    passelif resultado_busca['resposta']['status'] == 'ERRO':    print(&quot;Algo deu errado, tente novamente mais tarde.&quot;)```### Criando Monitoramentos na API V1```pyfrom escavador import MonitoramentoTribunal, MonitoramentoDiario, TiposMonitoramentosTribunal, TiposMonitoramentosDiario,FrequenciaMonitoramentoTribunal# Monitoramento nos sisteams dos Tribunaismonitoramento_tribunal = MonitoramentoTribunal.criar(tipo_monitoramento=TiposMonitoramentosTribunal.UNICO,                                                       valor=&quot;0000000-00.0000.0.00.0000&quot;,                                                       tribunal=&quot;TJSP&quot;,                                                       frequencia=FrequenciaMonitoramentoTribunal.SEMANAL)# Monitoramento em Diários Oficiaismonitoramento_diario = MonitoramentoDiario.criar(TiposMonitoramentosDiario.PROCESSO, processo_id=2, origens_ids=[2,4,6])```### Consultando os Tribunais e sistemas disponíveis para a API V1```pyfrom escavador import Tribunaltribunais_disponiveis = Tribunal.sistemas_disponiveis()```### Módulos Disponíveis e Referência da API#### V1:| Módulo                | Link API                                                             ||-----------------------|----------------------------------------------------------------------|| Busca                 | https://api.escavador.com/v1/docs/#busca                             || Processo              | https://api.escavador.com/v1/docs/#processos                         || Callback              | https://api.escavador.com/v1/docs/#callback                          || DiarioOficial         | https://api.escavador.com/v1/docs/#dirios-oficiais                   || Instituicao           | https://api.escavador.com/v1/docs/#instituies                        || Legislacao            | https://api.escavador.com/v1/docs/#legislao                          || Jurisprudencia        | https://api.escavador.com/v1/docs/#jurisprudncias                    || MonitoramentoDiario   | https://api.escavador.com/v1/docs/#monitoramento-de-dirios-oficiais  || MonitoramentoTribunal | https://api.escavador.com/v1/docs/#monitoramento-no-site-do-tribunal || Movimentacao          | https://api.escavador.com/v1/docs/#movimentaes                       || Pessoa                | https://api.escavador.com/v1/docs/#pessoas                           || Tribunal              | https://api.escavador.com/v1/docs/#tribunais                         || Saldo                 | https://api.escavador.com/v1/docs/#saldo-da-api                      |#### V2:| Módulo      | Link API                                     ||-------------|----------------------------------------------|| v2.Processo | https://api.escavador.com/v2/docs/#processos || v2.Tribunal | https://api.escavador.com/v2/docs/#tribunais |</longdescription>
</pkgmetadata>