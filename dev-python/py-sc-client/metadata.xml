<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># py-sc-client![Tests badge](https://github.com/ostis-ai/py-sc-client/actions/workflows/tests.yml/badge.svg?branch=main)![Push badge](https://github.com/ostis-ai/py-sc-client/actions/workflows/push.yml/badge.svg?branch=main)The python implementation of the client for communication with[the OSTIS Technology web-oriented platform](https://github.com/ostis-ai/ostis-web-platform/blob/develop/docs/main.pdf).This library is compatible with `0.7.0` version of [sc-machine](https://github.com/ostis-ai/sc-machine).Low-level functionality implemented in **[py-sc-client](https://github.com/ostis-ai/py-sc-client)**:- ScAddr- ScType- ScStructure- ScTemplate.High-level functionality implemented in **[py-sc-kpm](https://github.com/ostis-ai/py-sc-kpm)**:- ScKeynodes- ScAgent- ScModule- ScServer*Warning: there are some of these classes in **py-sc-client** (deprecated)*## Installation py-sc-clientpy-sc-client is available on [PyPI](https://pypi.org/project/py-sc-client/):```sh$ pip install py-sc-client```py-sc-client officially supports Python 3.8+.## Connection to the sc-serverFirst you need connect to the sc-server.It's implemented using web-socket in another thread.Do not forget to disconnect after all operations.- *sc_client.client*.**connect**(url: str)Connect to the sc-server by *url*.```pythonfrom sc_client.client import connecturl = &quot;ws://localhost:8090/ws_json&quot;connect(url)```- *sc_client.client*.**disconnect**()Close the connection with the sc-server.```pythonfrom sc_client.client import disconnectdisconnect()```- *sc_client.client*.**is_connected**()Returns boolean state of the connection with the sc-server.```pythonfrom sc_client.client import is_connectedif is_connected():    ...```- *sc_client.client*.**set_error_handler**(callback)Sets a handler callback to manage client and server errors. Callback must take one argument - an exception object.```pythonfrom sc_client.client import set_error_handlerdef on_error(e):    if isinstance(e, AttributeError):        print(e)set_error_handler(on_error)        ...```- *sc_client.client*.**set_reconnect_handler**(**reconnect_kwargs)Sets handler callback to reconnect on sc-server connection failure. Method takes the following arguments: - `_reconnect_handler_` - handler callback function. Default value: `_session.default_reconnect_handler_`.- `_post_reconnect_callback_` - handler callback invoked after `_reconnect_handler_` has finished successfully.- `_reconnect_retries_` - amount of call tries of `_reconnect_handler_`. Default value: `5`.- `_reconnect_retry_delay_` - period between call tries of `_reconnect_handler_` (in seconds). Default value: `2`.If the sc-server did not respond to one of the resent messages, after a requested `_reconnect_retry_delay_`the `_reconnect_handler_` is called, and the same message is sent again. This procedure is repeated for`_reconnect_retries_` times, until the message is sent and a response is received.```pythonfrom sc_client.client import set_reconnect_handlerurl = &quot;ws://localhost:8090/ws_json&quot;def on_reconnect():    connect(url)set_reconnect_handler(    reconnect_handler=connect,    post_reconnect_handler=None,    reconnect_retries=5,    reconnect_retry_delay=1.0 #seconds)        ...```## Base classes### ScAddrMinimum element of sc is ScAddr.It contains address of some element in sc-memory.Knowing it, you can find related elements, connect edges, check the type, and so on:- *sc_client.models*.**ScAddr**Class with int address and usable methods.If value is zero (0), ScAddr is invalid (doesn't exist or there is an error).```pythonfrom sc_client.models import ScAddraddr = ScAddr(0)# You can initialize ScAddr, but it's not recommended.# Usually you will receive valid ones from special functions.is_valid = addr.is_valid()  # you can check if explicitlyif addr:  # Or implicitly using magic method __bool__()    ...assert addr == addr  # You can compare ScAddr with ScAddr if they are equalassert addr.is_equal(addr)  # Alternative variantassert addr == 0  # InvalidTypeError```### ScTypeEvery valid sc-element has some type.Sc-type represents a bit mask. But you don't need to know it.There is the ScType class that contains all methods to check type.All common ScTypes like node const are already defined.- *sc_client.constants*.**ScType**Class with type of sc-element.It uses when new elements are created or if it's need to check right type.It contains methods to check if it is node, edge or link, const or var, and so on.If you paid attention, the class is in constants submodule.They are already defined, and you can import them from file `sc_client.constants.sc_types`.If you need bitmasks, they are in `sc_client.constants.sc_types.bitmasks`.```pythonfrom sc_client.constants import sc_typessc_type_struct = sc_types.NODE_CONST_STRUCTassert sc_type_struct.is_valid()assert sc_type_struct.is_node()assert not sc_type_struct.is_edge()assert not sc_type_struct.is_link()assert sc_type_struct.is_const()assert not sc_type_struct.is_var()assert sc_type_struct.is_struct()assert not sc_type_struct.is_tuple()# And many more```## Structure classesStructure classes are using to work with set of sc-elements.ScConstruction uses individual elements like nodes and edges,ScTemplate - triplets### ScConstruction- *sc_client.models*.**ScConstruction**Class that allow to create single nodes, edges and links.You can use aliases to name nodes, and use one element several times in construction.Methods:1. *ScConstruction*.**create_node**(sc_type: ScType, alias: str = None)2. *ScConstruction*.**create_edge**(sc_type: ScType, src: str | ScAddr, trg: str | ScAddr, alias: str = None)3. *ScConstruction*.**create_link**(sc_type: ScType, content: ScLinkContent, alias: str = None)ScConstruction doesn't create elements. To do it use function:- *sc_client.client*.**create_elements**(constr: ScConstruction)It returns list of all elements by ScConstruction *constr*.```pythonfrom sc_client.client import create_elementsfrom sc_client.constants import sc_typesfrom sc_client.models import ScConstructionfrom sc_client.models import ScLinkContent, ScLinkContentTypeconstruction = ScConstruction()  # First you need initializeconstruction.create_node(sc_types.NODE_CONST, 'node')  # Create node constlink_content = ScLinkContent(&quot;Hello!&quot;, ScLinkContentType.STRING)  # Create link contentconstruction.create_link(sc_types.LINK_CONST, link_content, 'link')  # Create link with that contentconstruction.create_edge(sc_types.EDGE_ACCESS_CONST_POS_PERM, 'node', 'link')# Create unaliased edge between previous nodeaddrs = create_elements(construction)  # List of elementsassert len(addrs) == 3  # Assert that there is 3 elements as in the constructionassert all(addrs)  # Assert that they are all valid```Also, you can generate a construction by template address or its system identifier or scs-template as well as searchconstructions.### ScTemplate- *sc_client.models*.**ScTemplate**Class that allow to create and search triplets.You can also use aliases to name nodes, and use one element several times in template.Methods:1. *ScTemplate*.**triple**(src, edge, trg)   Template `src-edge-trg`2. *ScTemplate*.**triple_with_relation**(src, edge, trg, edge2, src2)   Two triplets `src-edge-trg` and `src2-edge2-edge`To set aliases use syntax:- `element &gt;&gt; alias` Recommended- `(element, alias)`- `[element, alias]` Deprecated in version 0.3.0After setting alias you use it without element#### Search template- *sc_client.client*.**template_search**(template: ScTemplate, params: ScTemplateParams = None)Returns list of ScTemplateResult by *template*.```pythonfrom sc_client.client import template_searchfrom sc_client.constants import sc_typesfrom sc_client.models import ScTemplate, ScAddraction_node: ScAddrquestion_node: ScAddrrrel_1: ScAddr# Some ScAddrs for exampletemplate = ScTemplate()template.triple(question_node, sc_types.EDGE_ACCESS_VAR_POS_PERM, action_node &gt;&gt; &quot;_action_node&quot;)# Triple `question_node-(*new)edge_access-(*aliased with &quot;_action_node&quot;)action_node`template.triple_with_relation(    &quot;_action_node&quot;,    sc_types.EDGE_ACCESS_VAR_POS_TEMP,    sc_types.NODE_VAR &gt;&gt; &quot;_arg_node&quot;,    sc_types.EDGE_ACCESS_VAR_POS_TEMP,    rrel_1,)search_results = template_search(template)```Search by sc-template address.```pythonfrom sc_client.client import template_searchfrom sc_client.models import ScAddrtemplate: ScAddr  # Template from sc-memorysearch_results = template_search(template)search_result = search_results[0]```You can also use ScAddr templates:Search by sc-template system identifier.```pythonfrom sc_client.client import template_searchfrom sc_client.models import ScAddrlink_node: ScAddrsearch_params = {'_link': link_node, '_var_node': 'node_idtf'}search_results = template_search('my_template', search_params)search_result = search_results[0]```Search by scs sc-template.```pythonfrom sc_client.client import template_searchsearch_results = template_search('class _-&gt; _node;;')search_result = search_results[0]```#### Generate template- *sc_client.client*.**template_generate**(template: ScTemplate, params: ScTemplateParams = None)Returns ScTemplateResult by *template*.```pythonfrom sc_client.client import template_generatefrom sc_client.constants import sc_typesfrom sc_client.models import ScTemplate, ScAddrmain_node: ScAddrrelation_node: ScAddrlink_node: ScAddr# Some ScAddrs for exampletemplate = ScTemplate()template.triple_with_relation(    main_node &gt;&gt; '_main_node',    sc_types.EDGE_D_COMMON_VAR,    sc_types.LINK_VAR &gt;&gt; '_link',    sc_types.EDGE_ACCESS_VAR_POS_PERM,    relation_node,)template.triple(    '_main_node',    sc_types.EDGE_ACCESS_VAR_POS_TEMP,    (sc_types.NODE_VAR, '_var_node'))gen_params = {'_link': link_node, '_var_node': 'node_idtf'}gen_result = template_generate(template, gen_params)```Also, you can generate a construction by template address or its system identifier or scs-template as well as searchconstructions.#### ScTemplateResultAfter operations with template you'll receive ScTemplateResult:- *sc_client.models*.**ScTemplateResult**It has all ScAddr and aliases. You can get addrs or iterate.Methods:- **len**(*ScTemplateResult*)  Get count of elements- *ScTemplateResult*.**size**()  The same, deprecated in version 0.3.0- *ScTemplateResult*[i: int]  Get ScAddr by index- *ScTemplateResult*.**get**(alias_or_index: str | int)  Get ScAddr by alias or index- **iter**(*ScTemplateResult*), **next**(*ScTemplateResult*)  Iterate by triplets using `for`- *ScTemplateResult*.**for_each_triple**(func: Callable[[ScAddr, ScAddr, ScAddr], Enum])  Run function with each triple. Deprecated in version 0.3.0```pythonfrom enum import Enumfrom sc_client.models import ScTemplateResult, ScAddrtemplate_result: ScTemplateResultlength = len(template_result)  # in the resulting constructiontemplate_result.size()  # deprecated count of elements, will be removed in version 0.3.0first_element = template_result[0]  # get an element from the result by index (recommended)template_result.get(0)  # get an element from the result by indexarg_node = template_result.get(&quot;_arg_node&quot;)  # get an element from the result by aliasfor src, edge, trg in template_result:    ...    # do smth with each triple in the resultdef triplets_function(src: ScAddr, edge: ScAddr, trg: ScAddr) -&gt; Enum:    ...template_result.for_each_triple(triplets_function)  # to use function to each triple. Deprecated in 0.3.0```## Common functions### Check element types- *sc_client.client*.**check_elements**(*addrs: ScAddr)Returns list of ScTypes for given elements.```pythonfrom sc_client.client import check_elementsfrom sc_client.client import create_elementsfrom sc_client.constants import sc_typesfrom sc_client.models import ScConstructionconstruction = ScConstruction()  # Create elements for exampleconstruction.create_node(sc_types.NODE_CONST)construction.create_node(sc_types.NODE_VAR)elements = create_elements(construction)elements_types = check_elements(*elements)assert elements_types[0].is_node()assert not elements_types[1].is_edge()assert elements_types[1].is_var()```### Create elements by SCS- *sc_client.client*.**create_elements_by_scs**(texts: List[Union[str, SCs]])Create elements by scs texts in the KB memory,put them in structure and returns boolean statuses.```pythonfrom sc_client.client import create_elements_by_scsresults = create_elements_by_scs([&quot;concept1 -&gt; node1;;&quot;, &quot;concept1 -&gt; ;;&quot;])assert results == [True, False]  # Warning: it doesn't return False, it raised error``````pythonfrom sc_client.client import create_elements_by_scs, create_elementsfrom sc_client.constants import sc_typesfrom sc_client.models import SCs, ScConstructionconstruction = ScConstruction()  # Create output_struct for exampleconstruction.create_node(sc_types.NODE_CONST)output_struct = create_elements(construction)[0]results = create_elements_by_scs([SCs(&quot;concept1 -&gt; node1;;&quot;, output_struct), &quot;concept1 -&gt; node2;;&quot;])assert results == [True, True]```### Delete elements- *sc_client.client*.**delete_elements**(*addrs: ScAddr)Delete *addrs* from the KB memory and returns boolean status.```pythonfrom sc_client.client import create_elements, set_link_contentsfrom sc_client.constants import sc_typesfrom sc_client.models import ScConstruction, ScLinkContent, ScLinkContentTypeconstruction = ScConstruction()  # Create link for exampleconstruction.create_link(sc_types.LINK_CONST, ScLinkContent(&quot;One&quot;, ScLinkContentType.STRING))link = create_elements(construction)[0]link_content = ScLinkContent(&quot;Two&quot;, ScLinkContentType.STRING, link)status = set_link_contents(link_content)assert status```### Resolve keynodes- *sc_client.client*.**resolve_keynodes**(*params: ScIdtfResolveParams)Resolve keynodes from the KB memory by ScIdtfResolveParams and return list of ScAddrs. If it doesn't exist, then createa new one.- *sc_client.models*.**ScIdtfResolveParams**Typed-dict class that contains *idtf* and optional *type****Advice: better to use ScKeynodes from py-sc-kpm***```pythonfrom sc_client.client import resolve_keynodesfrom sc_client.constants import sc_typesfrom sc_client.models import ScIdtfResolveParamsparams = ScIdtfResolveParams(idtf='new_keynode_that_doesnt_exist', type=sc_types.NODE_CONST)addrs = resolve_keynodes(params)  # list with 1 new keynode addrparams = ScIdtfResolveParams(idtf='keynode_that_have_to_exist_but_doesnt', type=None)addrs = resolve_keynodes(params)  # list with 1 invalid addrparams = ScIdtfResolveParams(idtf='keynode_that_exists', type=None)addrs = resolve_keynodes(params)  # list with 1 keynode addr```## Link content functions### ScLinkContent class- *sc_client.models*.**ScLinkContent**Class that describes content, its type (enum *sc_client.models*.**ScLinkContentType**).It uses to create and change links.```pythonfrom sc_client.models import ScLinkContent, ScLinkContentType, ScAddrstr_content = ScLinkContent(&quot;str content&quot;, ScLinkContentType.STRING)int_content = ScLinkContent(12, ScLinkContentType.INT)float_content = ScLinkContent(3.14, ScLinkContentType.FLOAT)link_addr: ScAddr  # ScAddr of existed linklink_content = ScLinkContent(12, ScLinkContentType.INT, link_addr)deprecated_type = ScLinkContent(&quot;use enum without .value&quot;, ScLinkContentType.STRING.value)# Value type is deprecated and will be removed in version 0.3.0```### Set links content- *sc_client.client*.**set_link_contents**(*contents: ScLinkContent)Set the new content to corresponding links and return boolean status.```pythonfrom sc_client.client import set_link_contents, create_elementsfrom sc_client.constants import sc_typesfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstructionconstruction = ScConstruction()  # Create link for examplelink_content1 = ScLinkContent(&quot;One&quot;, ScLinkContentType.STRING)construction.create_link(sc_types.LINK_CONST, link_content1)link = create_elements(construction)[0]link_content2 = ScLinkContent(&quot;Two&quot;, ScLinkContentType.STRING, link)status = set_link_contents(link_content2)assert status```### Get links content- *sc_client.client*.**get_link_contents**(*addr: ScAddr)Get list of contents of the given links.```pythonfrom sc_client.client import create_elements, get_link_contentfrom sc_client.constants import sc_typesfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstructionconstruction = ScConstruction()  # Create link for examplelink_content1 = ScLinkContent(&quot;One&quot;, ScLinkContentType.STRING)construction.create_link(sc_types.LINK_CONST, link_content1)link = create_elements(construction)[0]link_content = get_link_content(link)[0]assert link_content.data == link_content1.data```### Get links by content- *sc_client.client*.**get_links_by_content**(*contents: ScLinkContent | str | int)Get list of lists of links for every content.```pythonfrom sc_client.client import create_elements, get_links_by_contentfrom sc_client.constants import sc_typesfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstructionsearch_string = &quot;search string&quot;construction = ScConstruction()  # Create link with search stringlink_content1 = ScLinkContent(search_string, ScLinkContentType.STRING)construction.create_link(sc_types.LINK_CONST, link_content1)link = create_elements(construction)[0]links = get_links_by_content(search_string)[0]assert link in links```### Get links by content substring- *sc_client.client*.**get_links_by_content_substring**(*contents: ScLinkContent | str | int)Get list of lists of links for every content substring.```pythonfrom sc_client.client import create_elements, get_links_by_content_substringfrom sc_client.constants import sc_typesfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstructionsearch_string = &quot;substring1 substring2&quot;construction = ScConstruction()  # Create link with search stringlink_content1 = ScLinkContent(search_string, ScLinkContentType.STRING)construction.create_link(sc_types.LINK_CONST, link_content1)link = create_elements(construction)[0]links_list = get_links_by_content_substring(*search_string.split(&quot; &quot;))assert all(link in links for links in links_list)```### Get links contents by content substring- *sc_client.client*.**get_links_contents_by_content_substring**(*contents: ScLinkContent | str | int)Get list of lists of contents of the given content substrings.***Warning: it returns int addrs***```pythonfrom sc_client.client import create_elements, get_links_contents_by_content_substringfrom sc_client.constants import sc_typesfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstructionsearch_string = &quot;substring1 substring2&quot;construction = ScConstruction()  # Create link with search stringlink_content1 = ScLinkContent(search_string, ScLinkContentType.STRING)construction.create_link(sc_types.LINK_CONST, link_content1)link_addr = create_elements(construction)[0]links_list = get_links_contents_by_content_substring(*search_string.split(&quot; &quot;))assert all(link_addr.value in links for links in links_list)```## Events functions### Create events- *sc_client.client*.**events_create**(*events: ScEventParams)Create an event in the KB memory by ScEventParams and return list of ScEvents.```pythonfrom sc_client.client import events_createfrom sc_client.constants.common import ScEventTypefrom sc_client.models import ScEventParams, ScAddrdef event_callback(src: ScAddr, edge: ScAddr, trg: ScAddr):    ...bounded_elem_addr: ScAddrevent_type = ScEventType.ADD_OUTGOING_EDGEevent_params = ScEventParams(bounded_elem_addr, event_type, event_callback)sc_event = events_create(event_params)```### Check event validity- *sc_client.client*.**is_event_valid**(event: ScEvent)Return boolean status if *event* is active and or not.*Parameters*: An ScEvent class object.*Returns*: The boolean value (true if an event is valid).```pythonfrom sc_client.client import is_event_validfrom sc_client.models import ScEventsc_event: ScEventstatus = is_event_valid(sc_event)```### Destroy events- *sc_client.client*.**events_destroy**(*events: ScEvent)Destroy *events* in the KB memory and return boolean status.```pythonfrom sc_client.client import events_destroyfrom sc_client.models import ScEventsc_event: ScEventstatus = events_destroy(sc_event)```## Classes***Warning: these classes are deprecated because they are realized in py-sc-kpm.***The library contains the python implementation of useful classes and functions to work with the sc-memory.There is a list of classes:- ScKeynodes- ScAgent- ScModule### ScKeynodesA singleton dictionary object which provides the ability to cache the identifier and ScAddr of keynodes stored in theKB.Create an instance of the ScKeynodes class to get access to the cache:```pykeynodes = ScKeynodes()```Get the provided identifier:```pykeynodes[&quot;identifier_of_keynode&quot;]  # returns an ScAddr of the given identifierkeynodes[&quot;not_stored_in_kb&quot;]  # returns an invalid ScAddr if an identifier does not exist in the memory```Use _resolve_identifiers()_ to upload identifiers from _Enum_ classes:```pyclass CommonIdentifiers(Enum):    RREL_ONE = &quot;rrel_1&quot;    RREL_TWO = &quot;rrel_2&quot;class QuestionStatus(Enum):    QUESTION_INITIATED = &quot;question_initiated&quot;    QUESTION_FINISHED = &quot;question_finished&quot;    QUESTION_FINISHED_SUCCESSFULLY = &quot;question_finished_successfully&quot;    QUESTION_FINISHED_UNSUCCESSFULLY = &quot;question_finished_unsuccessfully&quot;keynodes.resolve_identifiers([QuestionStatus, CommonIdentifiers])```### ScAgentA class for handling a single ScEvent. Define your agents like this:```pyclass MyAgent(ScAgent):    action = &quot;Identifier_of_action_class&quot;    def register(self) -&gt; ScEvent:        # override method, must return an ScEvent instance        params = [            MyAgent.keynodes[&quot;action_initiated&quot;],            common.ScEventType.ADD_OUTGOING_EDGE,            MyAgent.run_impl        ]        event_params = ScEventParams(*params)        sc_event = client.events_create(event_params)        return sc_event[0]    @staticmethod    def run_impl(action_class: ScAddr, edge: ScAddr, action_node: ScAddr) -&gt; None:        # override method, must have 3 args and be static        ...```### ScModuleA class for handling a multiple ScAgent. Define your modules like this:```pyclass MyModule(ScModule):    def __init__(self) -&gt; None:        agents_to_register = [MyAgent1, MyAgent2]  # list of agent classes        super().__init__(agents_to_register)```## LoggingSometimes you might be in a situation where you deal with data that should be correct, but actually is not.You may still want to log that something fishy happened. This is where loggers come in handy.Default logger is preconfigured for you to use.There is an example for logs review using root logger:```pyimport loggingfrom sc_client import clientroot_logger = logging.getLogger()root_logger.level = logging.DEBUGroot_logger.addHandler(logging.StreamHandler())client.connect(&quot;ws://localhost:8090/ws_json&quot;)# Connectedresult = client.create_elements_by_scs([])# Send: {&quot;id&quot;: 2, &quot;type&quot;: &quot;create_elements_by_scs&quot;, &quot;payload&quot;: []}# Receive: {&quot;errors&quot;:[],&quot;event&quot;:0,&quot;id&quot;:2,&quot;payload&quot;:[],&quot;status&quot;:1}client.disconnect()# Disconnected```See [logging documentation](https://docs.python.org/3/library/logging.html#module-logging) for more information.</longdescription>
</pkgmetadata>