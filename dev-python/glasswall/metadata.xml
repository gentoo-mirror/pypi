<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![](https://github.com/filetrust/glasswall-python/actions/workflows/python-package.yml/badge.svg)![](https://github.com/filetrust/glasswall-python/actions/workflows/python-publish.yml/badge.svg)# Glasswall Python WrapperA high level Python wrapper for interfacing with Glasswall libraries.## Getting Started### Online installation:```pip install glasswall```### Offline installation for Centos 7 and RHEL8:Run the following commands within the directory containing the offline installation files.```pip install --no-index --find-links=. glasswall```**Note:** The lxml whl includes the required lxml dependencies and has been tested on Centos 7 and RHEL8 environments.## Prerequisites- [Python &gt;= 3.6](https://www.python.org/downloads/)## Examples&lt;details&gt;&lt;summary&gt;Loading a Glasswall library&lt;/summary&gt;Each library is a subclass of the `glasswall.libraries.library.Library` class and can be accessed from the top level of the `glasswall` module. The following subclasses are available:- ArchiveManager- Editor- Rebuild- SecurityTagging- WordSearchLibraries are loaded on initialisation and have one required argument: `library_path` which can be the path to a file or a directory. If a directory is specified it is recursively searched and the library with the latest change time will be loaded.```pyimport glasswall# Load the Glasswall Editor libraryeditor = glasswall.Editor(r&quot;C:\azure\sdk.editor\2.173&quot;)``````&gt;&gt;&gt; 2021-03-15 12:27:42.337 glasswall INFO     __init__                  Loaded Glasswall Editor version 2.173 from C:\azure\sdk.editor\2.173\windows-drop-no-kill-switch\glasswall_core2.dll```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Logging&lt;/summary&gt;Logs are saved to the temp directory and are also output to console with a default logging level of INFO. You can view the file path of the temp directory or the log file:```pyimport glasswallprint(glasswall._TEMPDIR)print(glasswall.config.logging.log_file_path)``````&gt;&gt;&gt; C:\Users\ANGUSR~1\AppData\Local\Temp\glasswall&gt;&gt;&gt; C:\Users\ANGUSR~1\AppData\Local\Temp\glasswall\logs\2021-03-15 122826.txt```The logging level can be modified, for a list of levels see: https://docs.python.org/3/library/logging.html#logging-levels```pyimport loggingimport glasswall# Modify logging level for logs to the consoleglasswall.config.logging.console.setLevel(logging.DEBUG)# Modify logging level for logs to fileglasswall.config.logging.log.setLevel(logging.DEBUG)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Content management policies&lt;/summary&gt;Subclasses of the `glasswall.content_management.policies.Policy` class can be used to easily create content management policies of varying complexity by passing the `default` and `config` keyword arguments. Subclasses include:- ArchiveManager- Editor- Rebuild- WordSearchSome examples of content management policies are below.&lt;details&gt;&lt;summary&gt;Default sanitise all Editor policy&lt;/summary&gt;```xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;config&gt;    &lt;pdfConfig&gt;        &lt;acroform&gt;sanitise&lt;/acroform&gt;        &lt;actions_all&gt;sanitise&lt;/actions_all&gt;        &lt;digital_signatures&gt;sanitise&lt;/digital_signatures&gt;        &lt;embedded_files&gt;sanitise&lt;/embedded_files&gt;        &lt;embedded_images&gt;sanitise&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;sanitise&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;sanitise&lt;/internal_hyperlinks&gt;        &lt;javascript&gt;sanitise&lt;/javascript&gt;        &lt;metadata&gt;sanitise&lt;/metadata&gt;    &lt;/pdfConfig&gt;    &lt;pptConfig&gt;        &lt;embedded_files&gt;sanitise&lt;/embedded_files&gt;        &lt;embedded_images&gt;sanitise&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;sanitise&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;sanitise&lt;/internal_hyperlinks&gt;        &lt;javascript&gt;sanitise&lt;/javascript&gt;        &lt;macros&gt;sanitise&lt;/macros&gt;        &lt;metadata&gt;sanitise&lt;/metadata&gt;        &lt;review_comments&gt;sanitise&lt;/review_comments&gt;    &lt;/pptConfig&gt;    &lt;sysConfig&gt;        &lt;interchange_pretty&gt;false&lt;/interchange_pretty&gt;        &lt;interchange_type&gt;sisl&lt;/interchange_type&gt;    &lt;/sysConfig&gt;    &lt;tiffConfig&gt;        &lt;geotiff&gt;sanitise&lt;/geotiff&gt;    &lt;/tiffConfig&gt;    &lt;wordConfig&gt;        &lt;dynamic_data_exchange&gt;sanitise&lt;/dynamic_data_exchange&gt;        &lt;embedded_files&gt;sanitise&lt;/embedded_files&gt;        &lt;embedded_images&gt;sanitise&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;sanitise&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;sanitise&lt;/internal_hyperlinks&gt;        &lt;macros&gt;sanitise&lt;/macros&gt;        &lt;metadata&gt;sanitise&lt;/metadata&gt;        &lt;review_comments&gt;sanitise&lt;/review_comments&gt;    &lt;/wordConfig&gt;    &lt;xlsConfig&gt;        &lt;dynamic_data_exchange&gt;sanitise&lt;/dynamic_data_exchange&gt;        &lt;embedded_files&gt;sanitise&lt;/embedded_files&gt;        &lt;embedded_images&gt;sanitise&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;sanitise&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;sanitise&lt;/internal_hyperlinks&gt;        &lt;macros&gt;sanitise&lt;/macros&gt;        &lt;metadata&gt;sanitise&lt;/metadata&gt;        &lt;review_comments&gt;sanitise&lt;/review_comments&gt;    &lt;/xlsConfig&gt;&lt;/config&gt;```&lt;/details&gt;```pyimport glasswall# Print the default Editor content management policyprint(glasswall.content_management.policies.Editor())```&lt;details&gt;&lt;summary&gt;Custom Rebuild policy&lt;/summary&gt;```xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;config&gt;    &lt;pdfConfig&gt;        &lt;acroform&gt;allow&lt;/acroform&gt;        &lt;actions_all&gt;allow&lt;/actions_all&gt;        &lt;digital_signatures&gt;allow&lt;/digital_signatures&gt;        &lt;embedded_files&gt;allow&lt;/embedded_files&gt;        &lt;embedded_images&gt;allow&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;allow&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;allow&lt;/internal_hyperlinks&gt;        &lt;javascript&gt;allow&lt;/javascript&gt;        &lt;metadata&gt;allow&lt;/metadata&gt;    &lt;/pdfConfig&gt;    &lt;pptConfig&gt;        &lt;embedded_files&gt;allow&lt;/embedded_files&gt;        &lt;embedded_images&gt;allow&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;allow&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;allow&lt;/internal_hyperlinks&gt;        &lt;javascript&gt;allow&lt;/javascript&gt;        &lt;macros&gt;allow&lt;/macros&gt;        &lt;metadata&gt;allow&lt;/metadata&gt;        &lt;review_comments&gt;allow&lt;/review_comments&gt;    &lt;/pptConfig&gt;    &lt;sysConfig&gt;        &lt;default&gt;allow&lt;/default&gt;        &lt;interchange_pretty&gt;false&lt;/interchange_pretty&gt;        &lt;interchange_type&gt;sisl&lt;/interchange_type&gt;    &lt;/sysConfig&gt;    &lt;tiffConfig&gt;        &lt;geotiff&gt;allow&lt;/geotiff&gt;    &lt;/tiffConfig&gt;    &lt;wordConfig&gt;        &lt;dynamic_data_exchange&gt;allow&lt;/dynamic_data_exchange&gt;        &lt;embedded_files&gt;allow&lt;/embedded_files&gt;        &lt;embedded_images&gt;allow&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;allow&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;allow&lt;/internal_hyperlinks&gt;        &lt;macros&gt;sanitise&lt;/macros&gt;        &lt;metadata&gt;allow&lt;/metadata&gt;        &lt;review_comments&gt;allow&lt;/review_comments&gt;    &lt;/wordConfig&gt;    &lt;xlsConfig&gt;        &lt;dynamic_data_exchange&gt;allow&lt;/dynamic_data_exchange&gt;        &lt;embedded_files&gt;sanitise&lt;/embedded_files&gt;        &lt;embedded_images&gt;sanitise&lt;/embedded_images&gt;        &lt;external_hyperlinks&gt;allow&lt;/external_hyperlinks&gt;        &lt;internal_hyperlinks&gt;allow&lt;/internal_hyperlinks&gt;        &lt;macros&gt;allow&lt;/macros&gt;        &lt;metadata&gt;allow&lt;/metadata&gt;        &lt;review_comments&gt;allow&lt;/review_comments&gt;    &lt;/xlsConfig&gt;&lt;/config&gt;```&lt;/details&gt;```pyimport glasswall# Print a custom Rebuild content management policy with a default of allow# that only sanitises macros in wordConfig, and embedded images and files in# xlsConfigprint(glasswall.content_management.policies.Rebuild(    default=&quot;allow&quot;,    config={        &quot;wordConfig&quot;: {            &quot;macros&quot;: &quot;sanitise&quot;,        },        &quot;xlsConfig&quot;: {            &quot;embedded_files&quot;: &quot;sanitise&quot;,            &quot;embedded_images&quot;: &quot;sanitise&quot;,        },    }))```Any functionality that requires a content management policy will use its default content management policy if one has not been specified with the keyword argument `content_management_policy`.&lt;/details&gt;### Editor&lt;details&gt;&lt;summary&gt;Protecting a file&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Editor libraryeditor = glasswall.Editor(r&quot;C:\azure\sdk.editor\2.173&quot;)# Use the default sanitise all policy to sanitise a file, writing the sanitised# file to a new directoryeditor.protect_file(    input_file=r&quot;C:\test_files\InternalHyp_Review.doc&quot;,    output_file=r&quot;C:\test_files_sanitised\InternalHyp_Review.doc&quot;)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Protecting all files in a directory&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Editor libraryeditor = glasswall.Editor(r&quot;C:\azure\sdk.editor\2.173&quot;)# Use the default sanitise all policy to protect a directory of files, writing# the sanitised files to a new directory.# NOTE: Passing `raise_unsupported=False` can be useful when working with a# directory containing a mixture of supported and unsupported file types. By# default this value is True, and an error will be raised on the first failure.editor.protect_directory(    input_directory=r&quot;C:\test_files&quot;,    output_directory=r&quot;C:\test_files_sanitised&quot;)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Protecting all files in a directory using a custom content management policy&lt;/summary&gt;Using `glasswall.content_management.policies.Editor`:```pyimport glasswall# Load the Glasswall Editor libraryeditor = glasswall.Editor(r&quot;C:\azure\sdk.editor\2.173&quot;)# Use a custom Editor policy to sanitise all files in the test_files directory# and write them to the test_files_sanitised directory. Internal hyperlinks in# ppt and word files will not be sanitised, and if macros are present then# withhold the fileeditor.protect_directory(    input_directory=r&quot;C:\test_files&quot;,    output_directory=r&quot;C:\test_files_sanitised&quot;,    content_management_policy=glasswall.content_management.policies.Editor(        config={            &quot;pptConfig&quot;: {                &quot;internal_hyperlinks&quot;: &quot;allow&quot;,                &quot;macros&quot;: &quot;disallow&quot;,            },            &quot;wordConfig&quot;: {                &quot;internal_hyperlinks&quot;: &quot;allow&quot;,                &quot;macros&quot;: &quot;disallow&quot;,            }        }    ))```Using a custom `.xml` file:```pyimport glasswall# Load the Glasswall Editor libraryeditor = glasswall.Editor(r&quot;C:\azure\sdk.editor\2.173&quot;)editor.protect_directory(    input_directory=r&quot;C:\test_files&quot;,    output_directory=r&quot;C:\test_files_sanitised&quot;,    content_management_policy=r&quot;C:\configs\config.xml&quot;)```&lt;/details&gt;### Archive Manager&lt;details&gt;&lt;summary&gt;Supported archive formats&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)print(am.supported_archives)&gt;&gt;&gt; ['7z', 'rar', 'tar', 'zip']```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Protecting an archive&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)# Use the default Archive Manager policy: sanitise all, process all, writing# the sanitised archive and the analysis report to different directories.am.protect_archive(    input_file=r&quot;C:\archives\7Zip\0000192.doc.7z&quot;,    output_file=r&quot;C:\archives_sanitised\7Zip\0000192.doc.7z&quot;,    output_report=r&quot;C:\archives_reports\7Zip\0000192.doc.7z.xml&quot;)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Protecting all archives in a directory using a custom content management policy&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)# Use a custom Archive Manager policy: sanitise all, process all, but discard# mp3 and mp4 files. Write the sanitised archives and the analysis reports to# different directoriesam.protect_directory(    input_directory=r&quot;C:\archives\7Zip&quot;,    output_directory=r&quot;C:\archives_sanitised\7Zip&quot;,    output_report_directory=r&quot;C:\archives_analysis_reports\7Zip&quot;,    content_management_policy=glasswall.content_management.policies.ArchiveManager(        default=&quot;sanitise&quot;,        default_archive_manager=&quot;process&quot;,        config={            &quot;archiveConfig&quot;: {                &quot;mp3&quot;: &quot;discard&quot;,                &quot;mp4&quot;: &quot;discard&quot;            }        }    ),    raise_unsupported=False)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Extraction - Unpacking an archive&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)# Unpack the Nested_4_layers.zip archive to a new directoryam.unpack(    input_file=r&quot;C:\archives\nested\Nested_4_layers.zip&quot;,    output_directory=r&quot;C:\unpacked_archives\nested&quot;)```A new directory is created: `C:\unpacked_archives\nested\Nested_4_layers` containing the unpacked contents of the `Nested_4_layers` zip archive. Nested archives are recursively unpacked while maintaining the same directory structure. To disable recursive unpacking use the `recursive` arg:```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)# Unpack the Nested_4_layers.zip archive to a new directory without recursing the archive.am.unpack(    input_file=r&quot;C:\archives\nested\Nested_4_layers.zip&quot;,    output_directory=r&quot;C:\unpacked_archives\nested&quot;,    recursive=False)```Other useful arguments:- `file_type` default None (use archive extension), force Glasswall to try to process archives as this format.- `include_file_type` default False, keep the archive format in the directory name when unpacking. e.g. when True `Nested_4_layers.zip` will be unpacked to a directory `Nested_4_layers.zip` instead of `Nested_4_layers`. This can be necessary when unpacking multiple same-named archives that have different archive formats.- `raise_unsupported` default True, raise an error if the Glasswall library encounters an error.- `delete_origin` default False, delete the `input_file` after it has been unpacked to `output_directory`.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Extraction - Unpacking a directory of archives&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)# Recursively unpack all archives found in the `archives` directoryam.unpack_directory(    input_directory=r&quot;C:\archives&quot;,    output_directory=r&quot;C:\unpacked_archives&quot;)```The `unpack_directory` method shares the same optional arguments as `unpack`. See also: `Extraction - Unpacking an archive`&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Compression - Packing a directory into an archive&lt;/summary&gt;```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)# Pack the `assorted_files` directory as zip to `assorted_files.zip`am.pack_directory(    input_directory=r&quot;C:\test_files\assorted_files&quot;,    output_directory=r&quot;C:\test_files&quot;,    file_type=&quot;zip&quot;,)```Pack to multiple formats with ease by iterating the `supported_archives` attribute:```pyimport glasswall# Load the Glasswall Archive Manager libraryam = glasswall.ArchiveManager(r&quot;C:\azure\sdk.archive.manager&quot;)# Pack the `assorted_files` directory in each supported file formatfor file_type in am.supported_archives:    am.pack_directory(        input_directory=r&quot;C:\test_files\assorted_files&quot;,        output_directory=fr&quot;C:\test_files&quot;,        file_type=file_type,    )```&lt;/details&gt;## Documentationhttps://gw-engineering.github.io/glasswall-python-wrapper/## Built With- [Python 3.6.8 64-bit](https://www.python.org/downloads/release/python-368/)</longdescription>
</pkgmetadata>