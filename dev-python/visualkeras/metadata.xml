<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># visualkeras for Keras / TensorFlow[![Wheel Status](https://pypip.in/wheel/visualkeras/badge.svg?style=flat)](https://pypi.python.org/pypi/visualkeras)[![Latest Version](https://pypip.in/version/visualkeras/badge.svg?style=flat)](https://pypi.python.org/pypi/visualkeras)[![Build Status](https://travis-ci.org/paulgavrikov/visualkeras.svg?branch=master)](https://travis-ci.org/paulgavrikov/visualkeras)## IntroductionVisualkeras is a Python package to help visualize Keras (either standalone or included in tensorflow) neural network architectures. It allows easy styling to fit most needs. This module supports layered style architecture generation which is great for CNNs (Convolutional Neural Networks), and a graph style architecture, which works great for most models including plain feed-forward networks.## Model Support|  Mode | Sequential  |  Functional |  Subclassed models ||---|---|---|---|| `visualkeras.layered_view()` | yes&lt;sup&gt;(1)&lt;/sup&gt; | partially&lt;sup&gt;(1,2)&lt;/sup&gt; |  not tested || `visualkeras.graph_view()` | yes | yes |  not tested |&lt;sup&gt;1&lt;/sup&gt;: Any tensor with more than 3 dimensions will be rendered as 3D tensor with elongated z-axis.&lt;sup&gt;2&lt;/sup&gt;: Only linear models where each layer has no more than one in or output. Non-linear models will be shown in sequential order.## InstallationTo install published releases from PyPi execute:```bashpip install visualkeras```To update visualkeras to the latest version, add the `--upgrade` flag to the above commands.If you want the latest (potentially unstable) features you can also directly install from the github master branch:```bashpip install git+https://github.com/paulgavrikov/visualkeras```## UsageGenerating neural network architectures is easy:```pythonimport visualkerasmodel = ...visualkeras.layered_view(model).show() # display using your system viewervisualkeras.layered_view(model, to_file='output.png') # write to diskvisualkeras.layered_view(model, to_file='output.png').show() # write and show```To help understand some of the most important parameters we are going to use a VGG16 CNN architecture (see [example.py](examples/example.py)).###### Default```pythonvisualkeras.layered_view(model)```![Default view of a VGG16 CNN](figures/vgg16.png)###### LegendYou can set the legend parameter to describe the relationship between color and layer types. It is also possible to passa custom `PIL.ImageFont` to use (or just leave it out and visualkeras will use the default PIL font). Please note that you may need to provide the full path of the desired font depending on your OS.```pythonfrom PIL import ImageFontfont = ImageFont.truetype(&quot;arial.ttf&quot;, 32)  # using comic sans is strictly prohibited!visualkeras.layered_view(model, legend=True, font=font)  # font is optional!```![Layered view of a VGG16 CNN with legend](figures/vgg16_legend.png)###### Flat Style```pythonvisualkeras.layered_view(model, draw_volume=False)```![Flat view of a VGG16 CNN](figures/vgg16_flat.png)###### Spacing and logic groupingThe global distance between two layers can be controlled with `spacing`. To generate logical groups a special dummy keras layer `visualkeras.SpacingDummyLayer()` can be added.```pythonmodel = ......model.add(visualkeras.SpacingDummyLayer(spacing=100))...visualkeras.layered_view(model, spacing=0)```![Spaced and grouped view of a VGG16 CNN](figures/vgg16_spacing_layers.png)###### Custom color mapIt is possible to provide a custom color map for fill and outline per layer type.```pythonfrom tensorflow.python.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, ZeroPadding2Dfrom collections import defaultdictcolor_map = defaultdict(dict)color_map[Conv2D]['fill'] = 'orange'color_map[ZeroPadding2D]['fill'] = 'gray'color_map[Dropout]['fill'] = 'pink'color_map[MaxPooling2D]['fill'] = 'red'color_map[Dense]['fill'] = 'green'color_map[Flatten]['fill'] = 'teal'visualkeras.layered_view(model, color_map=color_map)```![Custom colored view of a VGG16 CNN](figures/vgg16_color_map.png)###### Hiding layersSome models may consist of too many layers to visualize or to comprehend the model. In this case it can be helpful to hide (ignore) certain layers of the keras model without modifying it. Visualkeras allows ignoring layers by their type (`type_ignore`) or index in the keras layer sequence (`index_ignore`).```pythonvisualkeras.layered_view(model, type_ignore=[ZeroPadding2D, Dropout, Flatten])```![Simplified view of a VGG16 CNN](figures/vgg16_type_ignore.png)###### Scaling dimensionsVisualkeras computes the size of each layer by the output shape. Values are transformed into pixels. Then, scaling is applied. By default visualkeras will enlarge the x and y dimension and reduce the size of the z dimensions as this has deemed visually most appealing. However, it is possible to control scaling using `scale_xy` and `scale_z`. Additionally, to prevent to small or large options minimum and maximum values can be set (`min_xy`, `min_z`, `max_xy`, `max_z`).  ```pythonvisualkeras.layered_view(model, scale_xy=1, scale_z=1, max_z=1000)```![True scale view of a VGG16 CNN](figures/vgg16_scaling.png)_Note: Scaled models may hide the true complexity of a layer, but are visually more appealing._</longdescription>
</pkgmetadata>