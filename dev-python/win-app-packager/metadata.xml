<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Win App Packager-----------------------Distributing end user software on windows should not require theend user to install dependancies, like python.This tool turns a python program into a package that is suitableto be installed on window via installation software like INNO setup(http://www.jrsoftware.org/isinfo.php).The method used to create the package copies the source code of theprogram, the source code from any python libraries and any requiredpython extensions and the DLLs that depend on.The inclusion of the source code allows users to modify the program,if they so desire.win_app_packager supports python 3 for win64.1.5.0 add supoprt for python 3.11Fix issue with not finding python3XX.dllIf environment variable PY_WIN_APP_DEBUG is set to 1 thenshow debug information.Add GUI test for PyQt61.4.3 add support for python 3.10Add test for cli tzlocal.Kits built for 3.9 and 3.10 only.1.4.2 add support for python 3.91.4.1 add support for python 3.8 (includes patched modulefinder.py)1.4.0 add support for packaging projects from a virtual env (venv).1.3.0 supports changing the version resource of the created .EXE.The version fields that name the app are set to the app .EXE name.The --version option allows the app's version to be set.Python version 3.5, 3.6 and 3.7 are supported.Installation------------::  py -3 -m pip install win-app-packagerUsage-----::  C:\Users\barry&gt; py -3 -m win_app_packager  python3 -m win_app_packager build &lt;main-script&gt; &lt;package-folder&gt; [&lt;options&gt;...]    main-script      - python main module    package-folder      - folder to create package into      Where &lt;options&gt; are:      --console      --cli          build a windows console progam (the default).      --gui          build a windows gui program.      --name          name the program (defaults to the &lt;main-script&gt; name).      --version &lt;version&gt;          Set the version of the .EXE to be &lt;version&gt;.          e.g 1.0.2.5      --install-key &lt;key&gt;      --install-value &lt;value&gt;          The install path of the package can be read          from the windows registry from key HKLM:&lt;key&gt; value &lt;value&gt;          otherwise the install path is assumed to be the same folder          that the .EXE files is in.      --modules-allowed-to-be-missing-file &lt;file-name&gt;          Add all the modules listed in the file &lt;file-name&gt; to the allowed          to be missing list. Blank lines and lines starting with a '#' as ignored.      --merge          Do not clean out the &lt;package-folder&gt; before building the package.          Useful for putting multiple programs into one package.      --verbose          Output extra information about the build process.      --debug          Developer option. Output lots of details about the build process.      --bootstrap-debug          Developer option. Copy PDF files and setup a Microsoft Visual          Studio solution (.sln) file suitable for running the bootstrap          under the debugger.    python3 -m win_app_packager flags &lt;exe-file&gt; &lt;verbose&gt;'    exe-file      - the win_app_package create EXE file to modify    verbose      - either &quot;0&quot; or &quot;1&quot;. The value to see the python verbose flag to.</longdescription>
</pkgmetadata>