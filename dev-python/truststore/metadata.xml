<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Truststore[![PyPI](https://img.shields.io/pypi/v/truststore)](https://pypi.org/project/truststore)[![CI](https://github.com/sethmlarson/truststore/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/sethmlarson/truststore/actions/workflows/ci.yml)Truststore is a library which exposes native system certificate stores (ie &quot;trust stores&quot;)through an `ssl.SSLContext`-like API. This means that Python applications no longer need torely on certifi as a root certificate store. Native system certificate storeshave many helpful features compared to a static certificate bundle like certifi:- Automatically update certificates as new CAs are created and removed- Fetch missing intermediate certificates- Check certificates against certificate revocation lists (CRLs) to avoid monster-in-the-middle (MITM) attacks- Managed per-system rather than per-application by a operations/IT team- PyPI is no longer a CA distribution channel ðŸ¥³Right now truststore is a stand-alone library that can be installed globally in yourapplication to immediately take advantage of the benefits in Python 3.10+. Truststorehas also been integrated into pip as an opt-in method for verifying HTTPS certificateswith truststore instead of certifi.Long-term the hope is to make truststore the default way to verify HTTPS certificates in pipand to add this functionality into Python itself. Wish us luck!## InstallationTruststore is installed from [PyPI](https://pypi.org/project/truststore) with pip:```{code-block} shell$ python -m pip install truststore```Truststore **requires Python 3.10 or later** and supports the following platforms:- macOS 10.8+ via [Security framework](https://developer.apple.com/documentation/security)- Windows via [CryptoAPI](https://docs.microsoft.com/en-us/windows/win32/seccrypto/cryptography-functions#certificate-verification-functions)- Linux via OpenSSL## User GuideYou can inject `truststore` into the standard library `ssl` module so the functionality is usedby every library by default. To do so use the `truststore.inject_into_ssl()` function:```pythonimport truststoretruststore.inject_into_ssl()# Automatically works with urllib3, requests, aiohttp, and more:import urllib3http = urllib3.PoolManager()resp = http.request(&quot;GET&quot;, &quot;https://example.com&quot;)import aiohttphttp = aiohttp.ClientSession()resp = await http.request(&quot;GET&quot;, &quot;https://example.com&quot;)import requestsresp = requests.get(&quot;https://example.com&quot;)```If you'd like finer-grained control you can create your own `truststore.SSLContext` instanceand use it anywhere you'd use an `ssl.SSLContext`:```pythonimport sslimport truststorectx = truststore.SSLContext(ssl.PROTOCOL_TLS_CLIENT)import urllib3http = urllib3.PoolManager(ssl_context=ctx)resp = http.request(&quot;GET&quot;, &quot;https://example.com&quot;)```You can read more in the [user guide in the documentation](https://truststore.readthedocs.io/en/latest/#user-guide).## LicenseMIT</longdescription>
</pkgmetadata>