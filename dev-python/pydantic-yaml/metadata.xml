<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pydantic-YAML[![PyPI version](https://badge.fury.io/py/pydantic-yaml.svg)](https://badge.fury.io/py/pydantic-yaml) [![Documentation Status](https://readthedocs.org/projects/pydantic-yaml/badge/?version=latest)](https://pydantic-yaml.readthedocs.io/en/latest/?badge=latest) [![Unit Tests](https://github.com/NowanIlfideme/pydantic-yaml/actions/workflows/python-testing.yml/badge.svg)](https://github.com/NowanIlfideme/pydantic-yaml/actions/workflows/python-testing.yml)Pydantic-YAML adds YAML capabilities to [Pydantic](https://pydantic-docs.helpmanual.io/),which is an _excellent_ Python library for data validation and settings management.If you aren't familiar with Pydantic, I would suggest you first check out their[docs](https://pydantic-docs.helpmanual.io/).[Documentation on ReadTheDocs.org](https://pydantic-yaml.readthedocs.io/en/latest/)## Basic Usage```pythonfrom enum import Enumfrom pydantic import BaseModel, validatorfrom pydantic_yaml import parse_yaml_raw_as, to_yaml_strclass MyEnum(str, Enum):    &quot;&quot;&quot;A custom enumeration that is YAML-safe.&quot;&quot;&quot;    a = &quot;a&quot;    b = &quot;b&quot;class InnerModel(BaseModel):    &quot;&quot;&quot;A normal pydantic model that can be used as an inner class.&quot;&quot;&quot;    fld: float = 1.0class MyModel(BaseModel):    &quot;&quot;&quot;Our custom Pydantic model.&quot;&quot;&quot;    x: int = 1    e: MyEnum = MyEnum.a    m: InnerModel = InnerModel()    @validator(&quot;x&quot;)    def _chk_x(cls, v: int) -&gt; int:  # noqa        &quot;&quot;&quot;You can add your normal pydantic validators, like this one.&quot;&quot;&quot;        assert v &gt; 0        return vm1 = MyModel(x=2, e=&quot;b&quot;, m=InnerModel(fld=1.5))# This dumps to YAML and JSON respectivelyyml = to_yaml_str(m1)jsn = m1.json()# This parses YAML as the MyModel typem2 = parse_yaml_raw_as(MyModel, yml)assert m1 == m2# JSON is also valid YAML, so this works toom3 = parse_yaml_raw_as(MyModel, jsn)assert m1 == m3```With Pydantic v2, you can also dump dataclasses:```pythonfrom pydantic import RootModelfrom pydantic.dataclasses import dataclassfrom pydantic.version import VERSION as PYDANTIC_VERSIONfrom pydantic_yaml import to_yaml_strassert PYDANTIC_VERSION &gt;= &quot;2&quot;@dataclassclass YourType:    foo: str = &quot;bar&quot;obj = YourType(foo=&quot;wuz&quot;)assert to_yaml_str(RootModel[YourType](obj)) == 'foo: wuz\n'```## ConfigurationCurrently we use the JSON dumping of Pydantic to perform most of the magic.This uses the `Config` inner class,[as in Pydantic](https://pydantic-docs.helpmanual.io/usage/model_config/):```pythonclass MyModel(BaseModel):    # ...    class Config:        # You can override these fields, which affect JSON and YAML:        json_dumps = my_custom_dumper        json_loads = lambda x: MyModel()        # As well as other Pydantic configuration:        allow_mutation = False```You can control some YAML-specfic options via the keyword options:```pythonto_yaml_str(model, indent=4)  # Makes it widerto_yaml_str(model, map_indent=9, sequence_indent=7)  # ... you monster.```You can additionally pass your own `YAML` instance:```pythonfrom ruamel.yaml import YAMLmy_writer = YAML(typ=&quot;safe&quot;)my_writer.default_flow_style = Trueto_yaml_file(&quot;foo.yaml&quot;, model, custom_yaml_writer=my_writer)```A separate configuration for YAML specifically will be added later, likely in v2.## Breaking Changes for `pydantic-yaml` V1The API for `pydantic-yaml` version 1.0.0 has been greatly simplified!### Mixin ClassThis functionality has currently been removed!`YamlModel` and `YamlModelMixin` base classes are no longer needed.The plan is to re-add it before v1 fully releases,to allow the `.yaml()` or `.parse_*()` methods.However, this will be availble only for `pydantic&lt;2`.### Versioned ModelsThis functionality has been removed, as it's questionably useful for most users.There is an [example in the docs](versioned.md) that's available.</longdescription>
</pkgmetadata>