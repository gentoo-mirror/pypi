<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># laituri â€” Docker Toolkit for Python[![CI](https://github.com/valohai/laituri/actions/workflows/ci.yml/badge.svg)](https://github.com/valohai/laituri/actions/workflows/ci.yml)[![codecov](https://codecov.io/gh/valohai/laituri/branch/master/graph/badge.svg)](https://codecov.io/gh/valohai/laituri)`laituri` is a set of Docker-related Python snippets used at [Valohai](https://valohai.com/).You can use it with Python &gt;= 3.7.## Usage### ConfigurationYou can configure your used Docker command if it is not the default `docker`, using laituri settings._Example:_```laituri.settings.DOCKER_COMMAND = 'docker'```### Docker Credential ManagerLaituri contains a docker credentials manager which can be used for example when pulling images.It logs in and out using the Docker CLI._Example:_```from laituri.docker.credential_manager import get_credential_managermy_credentials = {    'username': 'SmolShark1',    'password': 'sharksWithLazers',}with get_credential_manager(    image='python:latest',    registry_credentials=my_credentials,    log_status=print  # Any callable):    # Do your docker things!```## DevelopmentInstalling editable library version in the current virtual environment.```bash# install this package and all development dependenciespip install -e . -r requirements-dev.txt pip-tools pre-commit &amp;&amp; pre-commit install# manually run lint and type checkspre-commit run --all-files# manually run testspytest --covpython&gt;&gt;&gt; import laituri; print(laituri.__version__)```## Making a ReleaseA new release build is released by the CI when a new tag is pushed to the repository:```bash# bump version number in &quot;laituri/__init__.py&quot;vim laituri/__init__.py# pushing a new tag will trigger a new release buildgit add .git commit -m &quot;Become to X.Y.Z&quot;git tag -a vX.Y.Z -m &quot;Version X.Y.Z&quot;git push --follow-tags```If a manual release is needed, you can follow up the above steps with:```bashpip install build twinegit clean -fdx -e .idea/python -m build .twine upload dist/*```</longdescription>
</pkgmetadata>