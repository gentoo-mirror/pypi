# automatically generated by g-sorcery
# please do not edit this file

EAPI=8

REALNAME="${PN}"
LITERALNAME="${PN}"
REALVERSION="${PV}"
DIGEST_SOURCES="yes"
PYTHON_COMPAT=( python{3_10,3_11,3_12} )
DISTUTILS_USE_PEP517=standalone

inherit python-r1 gs-pypi

DESCRIPTION="Optimum Library is an extension of the Hugging Face Transformers library, providing a framework to integrate third-party libraries from Hardware Partners and interface with their specific functionality."

HOMEPAGE="https://github.com/huggingface/optimum"
LICENSE="Apache-2.0"
SRC_URI="https://files.pythonhosted.org/packages/source/${REALNAME::1}/${REALNAME}/${REALNAME}-${REALVERSION}.tar.gz"
SOURCEFILE="${REALNAME}-${REALVERSION}.tar.gz"
RESTRICT="test"

SLOT="0"
KEYWORDS="~amd64 ~x86"

IUSE="amd benchmark dev diffusers doc-build exporters exporters-gpu exporters-tf furiosa graphcore habana intel neural-compressor neuron neuronx nncf onnxruntime onnxruntime-gpu openvino quality tests"
DEPENDENCIES="dev-python/coloredlogs[${PYTHON_USEDEP}]
	dev-python/sympy[${PYTHON_USEDEP}]
	dev-python/transformers[${PYTHON_USEDEP}]
	dev-python/torch[${PYTHON_USEDEP}]
	dev-python/packaging[${PYTHON_USEDEP}]
	dev-python/numpy[${PYTHON_USEDEP}]
	dev-python/huggingface-hub[${PYTHON_USEDEP}]
	dev-python/datasets[${PYTHON_USEDEP}]
	amd? ( dev-python/optimum-amd[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/optuna[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/tqdm[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/scikit-learn[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/seqeval[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/torchvision[${PYTHON_USEDEP}] )
	benchmark? ( dev-python/evaluate[${PYTHON_USEDEP}] )
	dev? ( dev-python/accelerate[${PYTHON_USEDEP}] )
	dev? ( dev-python/pytest[${PYTHON_USEDEP}] )
	dev? ( dev-python/requests[${PYTHON_USEDEP}] )
	dev? ( dev-python/parameterized[${PYTHON_USEDEP}] )
	dev? ( dev-python/pytest-xdist[${PYTHON_USEDEP}] )
	dev? ( dev-python/Pillow[${PYTHON_USEDEP}] )
	dev? ( dev-python/sacremoses[${PYTHON_USEDEP}] )
	dev? ( dev-python/torchvision[${PYTHON_USEDEP}] )
	dev? ( dev-python/diffusers[${PYTHON_USEDEP}] )
	dev? ( dev-python/torchaudio[${PYTHON_USEDEP}] )
	dev? ( dev-python/einops[${PYTHON_USEDEP}] )
	dev? ( dev-python/invisible-watermark[${PYTHON_USEDEP}] )
	dev? ( dev-python/black[${PYTHON_USEDEP}] )
	dev? ( dev-python/ruff[${PYTHON_USEDEP}] )
	diffusers? ( dev-python/diffusers[${PYTHON_USEDEP}] )
	doc-build? ( dev-python/accelerate[${PYTHON_USEDEP}] )
	exporters? ( dev-python/onnx[${PYTHON_USEDEP}] )
	exporters? ( dev-python/onnxruntime[${PYTHON_USEDEP}] )
	exporters? ( dev-python/timm[${PYTHON_USEDEP}] )
	exporters-gpu? ( dev-python/onnx[${PYTHON_USEDEP}] )
	exporters-gpu? ( dev-python/onnxruntime-gpu[${PYTHON_USEDEP}] )
	exporters-gpu? ( dev-python/timm[${PYTHON_USEDEP}] )
	exporters-tf? ( dev-python/tensorflow[${PYTHON_USEDEP}] )
	exporters-tf? ( dev-python/tf2onnx[${PYTHON_USEDEP}] )
	exporters-tf? ( dev-python/onnx[${PYTHON_USEDEP}] )
	exporters-tf? ( dev-python/onnxruntime[${PYTHON_USEDEP}] )
	exporters-tf? ( dev-python/timm[${PYTHON_USEDEP}] )
	exporters-tf? ( dev-python/h5py[${PYTHON_USEDEP}] )
	exporters-tf? ( dev-python/numpy[${PYTHON_USEDEP}] )
	furiosa? ( dev-python/optimum-furiosa[${PYTHON_USEDEP}] )
	graphcore? ( dev-python/optimum-graphcore[${PYTHON_USEDEP}] )
	habana? ( dev-python/optimum-habana[${PYTHON_USEDEP}] )
	habana? ( dev-python/transformers[${PYTHON_USEDEP}] )
	intel? ( dev-python/optimum-intel[${PYTHON_USEDEP}] )
	neural-compressor? ( dev-python/optimum-intel[${PYTHON_USEDEP}] )
	neuron? ( dev-python/optimum-neuron[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/optimum-neuron[${PYTHON_USEDEP}] )
	nncf? ( dev-python/optimum-intel[${PYTHON_USEDEP}] )
	onnxruntime? ( dev-python/onnx[${PYTHON_USEDEP}] )
	onnxruntime? ( dev-python/onnxruntime[${PYTHON_USEDEP}] )
	onnxruntime? ( dev-python/datasets[${PYTHON_USEDEP}] )
	onnxruntime? ( dev-python/evaluate[${PYTHON_USEDEP}] )
	onnxruntime? ( dev-python/protobuf[${PYTHON_USEDEP}] )
	onnxruntime-gpu? ( dev-python/onnx[${PYTHON_USEDEP}] )
	onnxruntime-gpu? ( dev-python/onnxruntime-gpu[${PYTHON_USEDEP}] )
	onnxruntime-gpu? ( dev-python/datasets[${PYTHON_USEDEP}] )
	onnxruntime-gpu? ( dev-python/evaluate[${PYTHON_USEDEP}] )
	onnxruntime-gpu? ( dev-python/protobuf[${PYTHON_USEDEP}] )
	onnxruntime-gpu? ( dev-python/accelerate[${PYTHON_USEDEP}] )
	openvino? ( dev-python/optimum-intel[${PYTHON_USEDEP}] )
	quality? ( dev-python/black[${PYTHON_USEDEP}] )
	quality? ( dev-python/ruff[${PYTHON_USEDEP}] )
	tests? ( dev-python/accelerate[${PYTHON_USEDEP}] )
	tests? ( dev-python/pytest[${PYTHON_USEDEP}] )
	tests? ( dev-python/requests[${PYTHON_USEDEP}] )
	tests? ( dev-python/parameterized[${PYTHON_USEDEP}] )
	tests? ( dev-python/pytest-xdist[${PYTHON_USEDEP}] )
	tests? ( dev-python/Pillow[${PYTHON_USEDEP}] )
	tests? ( dev-python/sacremoses[${PYTHON_USEDEP}] )
	tests? ( dev-python/torchvision[${PYTHON_USEDEP}] )
	tests? ( dev-python/diffusers[${PYTHON_USEDEP}] )
	tests? ( dev-python/torchaudio[${PYTHON_USEDEP}] )
	tests? ( dev-python/einops[${PYTHON_USEDEP}] )
	tests? ( dev-python/invisible-watermark[${PYTHON_USEDEP}] )"
BDEPEND="${DEPENDENCIES}"
RDEPEND="${DEPENDENCIES}"
