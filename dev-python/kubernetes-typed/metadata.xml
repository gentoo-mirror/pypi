<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;http://mypy-lang.org/static/mypy_light.svg&quot; alt=&quot;mypy logo&quot; width=&quot;300px&quot;/&gt;# kubernetes-typed[![Build status](https://github.com/gordonbondon/kubernetes-typed/workflows/Test/badge.svg?branch=master&amp;event=push)](https://github.com/gordonbondon/kubernetes-typed/actions?query=workflow%3ATest+branch%3Amaster)[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)mypy plugin to dynamically define types for Kubernetes objects.## Features* [Type checking for Custom Resources](#Custom-Resource-Definitions)* [Type checking forkubernetes-client](#Kubernetes-Python-Client-types)## InstallationInstall with `pip`:```shellpip install kubernetes-typed```### VersioningThis package follows `kubernetes` client [versioning approach](https://github.com/kubernetes-client/python#homogenizing-the-kubernetes-python-client-versions).`MAJOR.MINOR` parts of version will match client version for which stubs were generated, and `PATCH` version will be stub or plugin specific updates.## Custom Resource DefinitionsAdd type checks for [Custom Resource Definition](https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/) spec given its definition in `yaml` file .1. Configure `mypy` to use `crd_typed` plugin:```ini[mypy]plugins = crd_typed.plugin```2. Import `CustomResource````from crd_type import CustomResource```3. [Annotate](https://mypy.readthedocs.io/en/stable/type_inference_and_annotations.html#explicit-types-for-variables) your variables:```pythonresource: CustomResource[&quot;relative/path/to/crd.yaml&quot;]```You can get type definition for different parts of crd:* Get `TypeDict` definition for custom resource body:    ```python    from crd_type import CustomResource    resource: CustomResource[&quot;relative/path/to/crd.yaml&quot;]    ```* Get definition only for resource `spec`:    ```python    from crd_type import CustomResource    resource: CustomResource[&quot;relative/path/to/crd.yaml&quot;, &quot;spec&quot;]    ```* Get definition for nested spec item, if that item is type `object` or `array`:    ```python    from crd_type import CustomResource    resource: CustomResource[&quot;relative/path/to/crd.yaml&quot;, &quot;spec&quot;, &quot;some_property&quot;]    ```* Get definition for array item, if that is array of objects, via `items` key:    ```python    from crd_type import CustomResource    resource: CustomResource[&quot;relative/path/to/crd.yaml&quot;, &quot;spec&quot;, &quot;some_array_of_objects&quot;, &quot;items&quot;]    ```### Limitations* CRDs that use `additionalProperties` are not supported.* CRDs can define multiple `versions`, currently only first one will be used* Custom attributes like `x-kubernetes-int-or-string`, `x-kubernetes-embedded-resource`, are not supported## Kubernetes Python Client typesThis package provides basic [type stubs](https://www.python.org/dev/peps/pep-0561/) for [kubernetes python client](https://github.com/kubernetes-client/python) out of the box.To enable full type checking for classes use provided `kubernetes_typed` plugin. This plugin requires `kubernetes`, you can require it during installation like this:```pip install kubernetes-typed[client]```Configure `mypy` to use it and it will automatically type check classes from `kubernetes.client`:```ini[mypy]plugins = kubernetes_typed.plugin```### Kubernetes Python Client Models Dict TypesIf you want to type check resource dicts instead of classes, you can use generated `TypedDict`s provided by this package.To do this for any model class in `kubernetes.client` append its name with `Dict`, and import it from `kubernetes_type.client`For example:`kubernetes.client.V1Pod` -&gt; `kubernetes_typed.client.V1PodDict````pythonfrom kubernetes.client.api import core_v1_apifrom kubernetes_typed.client import V1PodDictapi_instance = core_v1_api.CoreV1Api()pod_manifest: V1PodDict = {    &quot;apiVersion&quot;: &quot;v1&quot;,    &quot;kind&quot;: &quot;Pod&quot;,    &quot;metadata&quot;: {&quot;name&quot;: &quot;test-pod&quot;},    &quot;spec&quot;: {        &quot;containers&quot;: [            {                &quot;image&quot;: &quot;nginx&quot;,                &quot;name&quot;: &quot;nginx&quot;,            },        ],    },}api_instance.create_namespaced_pod(body=pod_manifest, namespace='default')```### Limitations* Kubernetes client api functions are currently not covered by stubs, so you might get `Call to untyped function` errors. Check [mypy config doc](https://mypy.readthedocs.io/en/stable/config_file.html) on how to disable separate warnings.</longdescription>
</pkgmetadata>