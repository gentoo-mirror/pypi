<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-operatorPyTest plugin to make it easy to create integration tests for Operator Charms.## UsageInclude `pytest-operator` in the `deps` of your `tox.ini` file:```ini[testenv]deps =  pytest  pytest-operator```Then, just start using the `ops_test` fixture in your async tests.  Thismodule-scoped fixture provides a libjuju Model, helpers to build charms fortesting, and the ability to abort testing so that the remaining tests in themodule are automatically xfailed (you can also mark a test so that this happensautomatically if the test fails; this is typically used on the initial deploymenttest, where subsequent tests depend on the deployment having succeeded).As an additional nicety, you don't have to explicitly mark an async test with`@pytest.mark.asyncio`; if it's a test function / method and it's async, itwill be marked automatically.Example:```pythonimport pytest@pytest.mark.abort_on_failasync def test_build_and_deploy(ops_test):    my_charm = await ops_test.build_charm(&quot;.&quot;)    await ops_test.model.deploy(my_charm)    await ops_test.model.wait_for_idle()async def test_status(ops_test):    assert ops_test.model.applications[&quot;my-charm&quot;].units[0].workload_status == &quot;active&quot;```## Building/Downloading Charm ResourcesQuite often, when charms are preparing for integration tests, the charms mayneed to attach resources to the charm for it to function. In these cases, the integration code must either build the resources or pull those from external resources.Example:```pythonasync def test_build_and_deploy(ops_test):    charm = await ops_test.build_charm(&quot;.&quot;)    build_script = Path.cwd() / &quot;build-charm-resources.sh&quot;    resources = await ops_test.build_resources(build_script)    if resources:        # created a dict from list of a filenames        resources = {rsc.stem: rsc for rsc in resources}    else:        arch_resources = ops_test.arch_specific_resources(charm)        resources = await ops_test.download_resources(            charm, resources=arch_resources        )            assert resources, &quot;Failed to build or download charm resources.&quot;        log.info(&quot;Build Bundle...&quot;)    bundle = ops_test.render_bundle(        &quot;tests/data/bundle.yaml&quot;, charm=charm, **resources    )    log.info(&quot;Deploy Bundle...&quot;)    juju_cmd = [&quot;deploy&quot;, &quot;-m&quot;, ops_test.model_full_name, str(bundle)]    rc, stdout, stderr = await ops_test.juju(*juju_cmd)    assert rc == 0, f&quot;Bundle deploy failed: {(stderr or stdout).strip()}&quot;    await ops_test.model.wait_for_idle()    ...```## ReferenceMore details can be found in [the reference docs](docs/reference.md).</longdescription>
</pkgmetadata>