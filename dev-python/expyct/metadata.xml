<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- PROJECT SHIELDS --&gt;&lt;!--*** I'm using markdown &quot;reference style&quot; links for readability.*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).*** See the bottom of this document for the declaration of the reference variables*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.*** https://www.markdownguide.org/basic-syntax/#reference-style-links--&gt;[![GitHub Actions][gh-actions-shield]][gh-actions-url][![Contributors][contributors-shield]][contributors-url][![Forks][forks-shield]][forks-url][![Stargazers][stars-shield]][stars-url][![Issues][issues-shield]][issues-url][![MIT License][license-shield]][license-url]&lt;!-- PROJECT LOGO --&gt;&lt;br /&gt;&lt;p align=&quot;center&quot;&gt;  &lt;h3 align=&quot;center&quot;&gt;Expyct&lt;/h3&gt;  &lt;p align=&quot;center&quot;&gt;    Partial matching of any Python object.    &lt;br /&gt;    &lt;a href=&quot;https://mthaak.github.io/expyct/&quot;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt;    &lt;br /&gt;    &lt;br /&gt;    &lt;a href=&quot;https://github.com/mthaak/expyct/issues&quot;&gt;Report Bug&lt;/a&gt;    ·    &lt;a href=&quot;https://github.com/mthaak/expyct/issues&quot;&gt;Request Feature&lt;/a&gt;  &lt;/p&gt;&lt;/p&gt;&lt;!-- TABLE OF CONTENTS --&gt;&lt;details open=&quot;open&quot;&gt;  &lt;summary&gt;&lt;h2 style=&quot;display: inline-block&quot;&gt;Table of Contents&lt;/h2&gt;&lt;/summary&gt;  &lt;ol&gt;    &lt;li&gt;      &lt;a href=&quot;#about-the-project&quot;&gt;Expyct&lt;/a&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;a href=&quot;#getting-started&quot;&gt;Getting Started&lt;/a&gt;      &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;  &lt;/ol&gt;&lt;/details&gt;&lt;!-- ABOUT THE PROJECT --&gt;## Expyct&lt;span style=&quot;font-size:larger;&quot;&gt;_Partial matching of any Python object._&lt;/span&gt;```pythonimport expyct as expdef test_my_function():    result = my_function()    assert result == exp.Float(optional=True, close_to=0.076, error=0.01)```Using Expyct is a good idea when you need to assert something in a test case but there is some non-determinism.For example, rounding errors prevent you from comparing a `float` exactly. Or a timestamp is created on-the-fly, andtherefore changes every test run.In these cases, you need to be able to set specific constraints on the expected value. That is what Expyct is for!The constraints can be provided as constructor arguments. For example `n == Number(min=3, max=5)` is only true when `n`is between 3 and 5.Some other examples of classes are `Float`, `String`, `Any` and `DateTime`. As you can see, they closely match thebuilt-in Python types.The library also comes with many commonly used data validators like `ANY_UUID` which matches any UUID string.And `TODAY` which matches any datetime occurring on the current day.Checking nested data structures is easy as well.See [Usage examples](#usage)&lt;!-- GETTING STARTED --&gt;## Getting Started### PrerequisitesSupported and tested for:- Python 3.6- Python 3.7- Python 3.8- Python 3.9### Installation```shellpip install expyct```Or install using any Python package manager like conda, pipenv or poetry.&lt;!-- USAGE EXAMPLES --&gt;## UsageSee below examples of how to use Expyct with [pytest](https://docs.pytest.org/).Simple example:```pythonimport expyct as expfrom myclass import MyClassdef test_my_function():    result = my_function()    assert result == exp.AnyValue(instance_of=MyClass, vars={&quot;property&quot;: &quot;value&quot;})```More complicated nested example:```pythonimport expyct as expfrom datetime import datetimedef test_my_function():    result = my_function()    assert result == {        &quot;first_name&quot;: exp.String(regex=&quot;(mary)|(peter)&quot;, ignore_case=True),        &quot;last_name&quot;: &quot;Johnson&quot;,        &quot;signup_date&quot;: exp.DateTime(after=datetime(2020, 1, 2), before=datetime(2020, 3, 5)),        &quot;details&quot;: {            &quot;number&quot;: exp.Int(min=2),            &quot;amount&quot;: exp.Float(close_to=2.3, error=0.001),            &quot;purchases&quot;: exp.List(exp.Dict(keys={&quot;id&quot;, &quot;product&quot;, &quot;category&quot;}), non_empty=True),        },        &quot;time_of_purchase&quot;: exp.OneOf([exp.TODAY, exp.THIS_HOUR]),        &quot;type&quot;: exp.AnyType(subclass_of=str),        &quot;item_ids&quot;: exp.Set(subset_of=[1, 2, 3]),        &quot;metadata&quot;: exp.Dict(keys_any=exp.Collection(superset_of=[&quot;a&quot;, &quot;b&quot;])),        &quot;context&quot;: exp.ANY,    }```&lt;!-- ROADMAP --&gt;## RoadmapSee the [open issues](https://github.com/mthaak/expyct/issues) for a list of proposed features (and known issues).&lt;!-- CONTRIBUTING --&gt;## ContributingAny contributions you make are **greatly appreciated**.1. Fork the Project2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)4. Bump the version in `expyct/__version__.py` following [SemVer](https://semver.org/)5. Push the Branch (`git push origin feature/AmazingFeature`)6. Open a Pull RequestBefore starting to contribute to Expyct, please install [pre-commit](https://pre-commit.com) to make sure your changesget checked for style and standards before committing them to repository:    $ pre-commit install&lt;!-- LICENSE --&gt;## LicenseDistributed under the MIT License. See `LICENSE` for more information.&lt;!-- CONTACT --&gt;## ContactPlease file an issue on Github.&lt;!-- ACKNOWLEDGEMENTS --&gt;## Acknowledgements* [othneildrew/Best-README-Template](https://github.com/othneildrew/Best-README-Template)&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;[gh-actions-shield]: https://github.com/mthaak/expyct/actions/workflows/test.yml/badge.svg[gh-actions-url]: https://github.com/mthaak/expyct/actions[contributors-shield]: https://img.shields.io/github/contributors/mthaak/expyct.svg?style=svg[contributors-url]: https://github.com/mthaak/expyct/graphs/contributors[forks-shield]: https://img.shields.io/github/forks/mthaak/expyct.svg?style=svg[forks-url]: https://github.com/mthaak/expyct/network/members[stars-shield]: https://img.shields.io/github/stars/mthaak/expyct.svg?style=svg[stars-url]: https://github.com/mthaak/expyct/stargazers[issues-shield]: https://img.shields.io/github/issues/mthaak/expyct.svg?style=svg[issues-url]: https://github.com/mthaak/expyct/issues[license-shield]: https://img.shields.io/github/license/mthaak/expyct.svg?style=svg[license-url]: https://github.com/mthaak/expyct/blob/master/LICENSE</longdescription>
</pkgmetadata>