<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># openai-pygenerator[![GitHub Workflow Status](https://github.com/phelps-sg/openai-pygenerator/actions/workflows/python-package.yml/badge.svg)](https://github.com/phelps-sg/openai-pygenerator/actions/workflows/python-package.yml)![GitHub release (latest by date)](https://img.shields.io/github/v/release/phelps-sg/openai-pygenerator)![GitHub](https://img.shields.io/github/license/phelps-sg/openai-pygenerator?color=blue)This is a simple type-annotated wrapper around the OpenAI Python API which:- provides configurable retry functionality,- reduces the default timeout from 10 minutes to 20 seconds (configurable), - provides a simple class to manage chat session state, and- provides a generator over completions.  It can also be used to chain together completions from different prompts in a very straightforward [functional-programming](https://docs.python.org/3/howto/functional.html) style using [Python generators](https://docs.python.org/3/howto/functional.html#generators).## Installation~~~bashpip install openai-pygenerator~~~## Basic usageIn the example below we will retry automatically if there is a `RateLimitError`.~~~pythonfrom openai_pygenerator import ChatSession session = ChatSession()solution = session.ask(&quot;What is the square root of 256?&quot;)print(solution)working = session.ask(&quot;Show your working&quot;)print(working)print(&quot;Transcript:&quot;)print(session.transcript)~~~## Completion pipelines and overriding parameters~~~pythonfrom typing import Iterablefrom openai_pygenerator import (    ChatSession,    Completions,    completer,    content,    next_completion,    user_message,)high_temp_completions = completer(temperature=0.8)def heading(message: str, margin: int = 80) -&gt; None:    print()    print(&quot;-&quot; * margin)    print(message)    print(&quot;-&quot; * margin)    print()def example_square_root(session: ChatSession) -&gt; None:    solution = session.ask(&quot;What is the square root of 256?&quot;)    print(solution)    working = session.ask(&quot;Show your working&quot;)    print(working)    heading(&quot;Session transcript:&quot;)    print(session.transcript)def creative_answer(prompt: str, num_completions: int = 1) -&gt; Completions:    return high_temp_completions([user_message(prompt)], n=num_completions)def pick_color(num_completions: int) -&gt; Completions:    return creative_answer(        &quot;Pick a color at random and then just tell me your choice, e.g. 'red'&quot;,        num_completions,    )def generate_sentence(color_completions: Completions) -&gt; Iterable[str]:    for color_completion in color_completions:        color = content(color_completion)        result = next_completion(            creative_answer(f&quot;Write a sentence about the color {color}.&quot;)        )        if result is not None:            yield content(result)if __name__ == &quot;__main__&quot;:    heading(&quot;Find square root - using environment variables for parameters&quot;)    example_square_root(session=ChatSession())    heading(&quot;Find square root - overriding temperature, max_tokens, max_retries&quot;)    example_square_root(        session=ChatSession(            generate=completer(temperature=0.5, max_tokens=300, max_retries=5)        )    )    heading(&quot;Example completion pipeline&quot;)    for sentence in generate_sentence(pick_color(num_completions=10)):        print(sentence)~~~## Running ~~~bashexport OPENAI_API_KEY=&lt;key&gt;python src/openai_pygenerator/example.py~~~## ConfigurationTo override default parameters use the following shell environment variables:~~~bashexport GPT_MODEL=gpt-3.5-turboexport GPT_TEMPERATURE=0.2export GPT_MAX_TOKENS=500export GPT_MAX_RETRIES=5export GPT_RETRY_EXPONENT_SECONDS=2export GPT_RETRY_BASE_SECONDS=20export GPT_REQUEST_TIMEOUT_SECONDS=20export OPENAI_API_KEY=&lt;key&gt;python src/openai_pygenerator/example.py~~~</longdescription>
</pkgmetadata>