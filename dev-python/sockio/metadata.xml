<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sockio![Pypi version][pypi]A python concurrency agnostic socket library.![spec in action](./demo.svg)Helpful when handling with instrumentation which work over TCP and implementsimple REQ-REP communication protocols (example:[SCPI](https://en.m.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments)).So far implemented REQ-REP and streaming semantics with auto-reconnection facilites.Base implementation written in asyncio with support for different concurrency models:* asyncio* classic blocking API* future based API* python 2 compatible blocking API (for those pour souls stuck with python 2)## InstallationFrom within your favorite python environment:```consolepip install sockio```## Usage*asyncio*```pythonimport asynciofrom sockio.aio import TCPasync def main():    sock = TCP('acme.example.com', 5000)    # Assuming a SCPI complient on the other end we can ask for:    reply = await sock.write_readline(b'*IDN?\n')    print(reply)asyncio.run(main())```*classic*```pythonfrom sockio.sio import TCPsock = TCP('acme.example.com', 5000)reply = sock.write_readline(b'*IDN?\n')print(reply)```*concurrent.futures*```pythonfrom sockio.sio import TCPsock = TCP('acme.example.com', 5000, resolve_futures=False)reply = sock.write_readline(b'*IDN?\n').result()print(reply)```*python 2 compatibility*```pythonfrom sockio.py2 import TCPsock = TCP('acme.example.com', 5000)reply = sock.write_readline(b'*IDN?\n').result()print(reply)```## FeaturesThe main goal of a sockio TCP object is to facilitate communicationwith instruments which listen on a TCP socket.The most frequent cases include instruments which expect a REQ/REPsemantics with ASCII protocols like SCPI. In these cases most commandstranslate in small packets being exchanged between the host and theinstrument. Care has been taken in this library to make sure we reducelatency as much as possible. This translates into the following defaultswhen creating a TCP object:* TCP no delay is active. Can be disabled with `TCP(..., no_delay=False)`.  This prevents the kernel from applying  [Nagle's algorithm](https://en.wikipedia.org/wiki/Nagle%27s_algorithm)* TCP ToS is set to LOWDELAY. This effectively prioritizes our packets  if favor of other concurrent communications. Can be disabled with  `TCP(tos=IPTOS_NORMAL)`### Price to payBefore going in detail about the features, note that this abstraction comeswith a price. Intentionally, when comparing with low level socket API, thefollowing features are no longer available:1. The cability of controlling the two ends of the socket independently   (ex: close the write end)2. While the low level `socket.recv()` returns empty string when EOF is reached,   the TCP class raises `ConnectionEOFError` instead and closes both ends of   the connection.3. Clever low level operations like `os.dup()`, make socket non-blocking### REQ-REP semanticsMany instruments out there have a Request-Reply protocol. A sockio TCPprovides `write_read` family of methods which simplify communication withthese instruments. These methods are atomic which means different tasks orthreads can safely work with the same socket object (although I wouldquestion myself why would I be doing that in my library/application).### Auto-reconnection```pythonsock = TCP('acme.example.com', 5000)reply = await sock.write_readline(b'*IDN?\n')print(reply)# ... kill the server connection somehow and bring it back to life again# You can use the same socket object. It will reconnect automatically# and work &quot;transparently&quot;reply = await sock.write_readline(b'*IDN?\n')print(reply)```The auto-reconnection facility is specially useful when, for example, youmove equipement from one place to another, or you need to turn off theequipment during the night (planet Earth thanks you for saving energy!).### TimeoutThe TCP constructor provides a `connection_timeout` that is used when theconnection is open and `timeout` parameter that is taken into accountwhen performing any data I/O operation (read, write, read_writeline,etc).By default, they are both None, meaning infinite timeout.```pythonsock = TCP('acme.example.com', 5000, connection_timeout=0.1, timeout=1)```Additionally, you can override the object timeout on each data I/O methodcall by providing an alternative timeout parameter:```pythonsock = TCP('acme.example.com', 5000, timeout=1)# the next call will raise asyncio.TimeoutError if it takes more than 0.1sreply = await sock.write_readline(b'*IDN?\n', timeout=0.1)print(reply)```### Custom EOLIn line based protocols, sometimes people decide `\n` is not a good EOL character.A sockio TCP can be customized with a different EOL character. Example:```pythonsock = TCP('acme.example.com', 5000, eol=b'\r')```The EOL character can be overwritten in any of the `readline` methods. Example:```pythonawait sock.write_readline(b'*IDN?\n', eol=b'\r')```### Connection event callbacksYou can be notified on `connection_made`, `connection_lost` and `eof_received` eventsby registering callbacks on the sockio TCP constructorThis is particularly useful if, for example, you want a specific procedure to beexecuted every time the socket is reconnected to make sure your configuration isright. Example:```pythonasync def connected():    await sock.write(b'ACQU:TRIGGER HARDWARE\n')    await sock.write(b'DISPLAY OFF\n')sock = TCP('acme.example.com', 5000, on_connection_made=connected)```(see examples/req-rep/client.py)Connection event callbacks are **not** available in *python 2 compatibility module*.### Streamssockio TCPs are asynchronous iterable objects. This means that line streamingis as easy as:```pythonsock = TCP('acme.example.com', 5000, eol=b'\r')async for line in sock:    print(line)```Streams are **not** available in *python 2 compatibility module*. Let me knowif you need them by writing an issue. Also feel free to make a PR!## Missing features* Connection retries* trio event loop* curio event loopJoin the party by bringing your own concurrency library with a PR!I am looking in particular for implementations over trio and curio.[pypi]: https://img.shields.io/pypi/pyversions/sockio.svg</longdescription>
</pkgmetadata>