<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask-HealthzDefine endpoints in your Flask application that Kubernetes can use as[liveness and readiness probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).## Setting it up### BlueprintRegister the blueprint on your Flask application:```pythonfrom flask import Flaskfrom flask_healthz import healthzapp = Flask(__name__)app.register_blueprint(healthz, url_prefix=&quot;/healthz&quot;)```Define the functions you want to use to check health. To signal an error, raise `flask_healthz.HealthError`.```pythonfrom flask_healthz import HealthErrordef liveness():    passdef readiness():    try:        connect_database()    except Exception:        raise HealthError(&quot;Can't connect to the database&quot;)```Now point to those functions in the Flask configuration:```pythonHEALTHZ = {    &quot;live&quot;: &quot;yourapp.checks.liveness&quot;,    &quot;ready&quot;: &quot;yourapp.checks.readiness&quot;,}```It is possible to directly set callables in the configuration, so you could write something like:```pythonHEALTHZ = {    &quot;live&quot;: lambda: None,}```Check that the endpoints actually work:```$ curl http://localhost/yourapp/healthz/live{&quot;status&quot;: 200, &quot;title&quot;: &quot;OK&quot;}$ curl http://localhost/yourapp/healthz/ready{&quot;status&quot;: 200, &quot;title&quot;: &quot;OK&quot;}```Now your can configure Kubernetes or OpenShift to check for those endpoints.### ExtensionYou can also use the provided Flask extension to register the `healthz` blueprint:```pythonfrom flask import Flaskfrom flask_healthz import Healthzapp = Flask(__name__)Healthz(app)```The rest of the configuration is identical.The extension has an additional option, `no_log`, that can disable logging of the HTTP requestshandled by your healthz endpoints, to avoid cluttering your web log files with automated requests.At the moment, only the [gunicorn](https://gunicorn.org/) web server is supported.```pythonHealthz(app, no_log=True)```## ExamplesHere's an example of how you could use flask-healthz in OpenShift's `deploymentconfig`:```yamlkind: DeploymentConfigspec:  [...]  template:    [...]    spec:      containers:      - name: yourapp        [...]        livenessProbe:          httpGet:            path: /healthz/live            port: 8080          initialDelaySeconds: 5          timeoutSeconds: 1        readinessProbe:          httpGet:            path: /healthz/ready            port: 8080          initialDelaySeconds: 5          timeoutSeconds: 1```Some projects that have setup flask-healthz:- Noggin: https://github.com/fedora-infra/noggin/pull/287- FASJSON: https://github.com/fedora-infra/fasjson/pull/81## LicenseCopyright 2020-2021 Red HatFlask-Healthz is licensed under the same license as Flask itself: BSD 3-clause.[![codecov](https://codecov.io/gh/fedora-infra/flask-healthz/branch/dev/graph/badge.svg?token=lwlZLiSImq)](https://codecov.io/gh/fedora-infra/flask-healthz)</longdescription>
</pkgmetadata>