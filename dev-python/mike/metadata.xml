<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mike**mike** is a Python utility to easily deploy multiple versions of your[MkDocs](http://www.mkdocs.org)-powered docs to a Git branch, suitable fordeploying to Github via `gh-pages`. To see an example of this in action, take alook at the documentation for [bfg9000][bfg9000].## Why Use mike?mike is built around the idea that once you've generated your docs for aparticular version, you should never need to touch that version again. Thismeans you never have to worry about breaking changes in MkDocs, since your olddocs (built with an old version of MkDocs) are already generated and sitting inyour `gh-pages` branch.While mike is flexible, it's optimized around putting your docs in a`&lt;major&gt;.&lt;minor&gt;` directory, with optional aliases (e.g. `latest` or `dev`) toparticularly notable versions. This makes it easy to make permalinks to whateverversion of the documentation you want to direct people to.## How It Worksmike works by creating a new Git commit on your `gh-pages` branch every time youdeploy a new version of your docs using `mike deploy` (or other mike subcommandsthat change your `gh-pages` branch). When deploying a particular version,previously-deployed docs for that version are erased and overwritten, but docsfor other versions remain untouched.## InstallationLike most Python projects, mike uses [setuptools][setuptools], so installationis what you might expect:```shpip install mike```Once you've installed mike, you might also want to set up shell-completion forit. If you have [shtab][shtab] installed, you can do this with`mike generate-completion`, which will print the shell-completion code for yourshell. For more details on how to set this up, consult shtab's[documentation][shtab-setup].## Usage### InitializationBefore using mike for the first time, you may want to add the mike pluginto your `mkdocs.yml` file. This plugin is added by default when building yourdocumentation with mike, but by adding it explicitly, you can configure how itworks. The plugin adds a version selector to supported themes as well asupdating the `site_url` (if you set it) to point to the version of the docs thatare being built:```yamlplugins:  - mike:      # these fields are all optional; the defaults are as below...      version_selector: true   # set to false to leave out the version selector      css_dir: css             # the directory to put the version selector's CSS      javascript_dir: js       # the directory to put the version selector's JS      canonical_version: null  # the version for &lt;link rel=&quot;canonical&quot;&gt;; `null`                               # uses the version specified via `mike deploy````Note: If you have existing documentation on your `gh-pages` branch, you may alsowant to delete the old documentation before building your new versioned docs via[`mike delete --all`](#deleting-docs).)### Building Your Docsmike is designed to produce one version of your docs at a time. That way, youcan easily deploy a new version without touching any older versions of yourdocs; this can be especially important if your old docs are no longer buildablewith the newest version of MkDocs (or if they weren't built with MkDocs atall!). To deploy the current version of your docs, simply run:```shmike deploy [version]```Where `[version]` is the current version of your project, represented howeveryou like (I recommend using `[major].[minor]` and excluding the patchnumber). You can also pass aliases to the `deploy` command to host aparticularly-relevant version of your docs somewhere special (e.g. `latest`):```shmike deploy [version] [alias]...```If `[version]` already exists, this command will *also* update all of thepre-existing aliases for it. Normally, if an alias specified on the command lineis already associated with another version, this will return an error. If you*do* want to move an alias from another version to this version (e.g. whenreleasing a new version and updating the `latest` alias to point to this newversion), you can pass `-u`/`--update-aliases` to allow this.By default, aliases create a simple HTML redirect to the real version of thedocs; to create a copy of the docs for each alias, you can pass `--no-redirect`.If you're using redirects, you can customize the redirect template with`-T`/`--template`; this takes a path to a [Jinja][jinja] template that acceptsan `{{href}}` variable.If you'd like to specify a title for this version that doesn't match the versionstring, you can pass `-t TITLE`/`--title=TITLE` as well.In addition, you can specify where to deploy your docs via `-b`/`--branch`,`-r`/`--remote`, and `--prefix`, specifying the branch, remote, and directoryprefix within the branch, respectively. Finally, to push your docs to a remotebranch, simply add `-p`/`--push` to your command.### Viewing Your DocsTo test that your docs have been built as expected, you can serve them locallyfrom a dev server:```shmike serve```By default, this serves the docs on `http://localhost:8000`, but you canchange this with `-a`/`--dev-addr`. Remember though, *this is for testing only*.To host your docs for real, you should use a real web server.### Deleting DocsSometimes you need to delete an old version of your docs, either because youmade a mistake or you're pruning unsupported versions. You can do this via the`delete` subcommand:```shmike delete [version-or-alias]...```If `version-or-alias` is a version, this will delete the version and all itsaliases from the branch; if it's an alias, it will only delete that alias.If you'd like to *completely* wipe the contents of your docs branch, just run`mike delete --all`. Like `deploy` above, you can specify `--branch`, `--push`,etc to control how the commit is handled.### Listing DocsIf you ever need to see the list of all currently-deployed doc versions, you canrun:```shmike list```To list the info for a particular version, you can just pass the version oralias:```shmike list [version-or-alias]```Sometimes, you need this information to be consumed by another tool. In thatcase, pass `-j`/`--json` to return the list of doc versions as JSON.### Setting the Default VersionWith all the versions of docs you have, you may want to set a *default* versionso that people going to the root of your site are redirected to the latestversion of the docs:```shmike set-default [version-or-alias]```If you want to use a different template from the default, you can pass`-T`/`--template`; this takes a path to a [Jinja][jinja] template that acceptsan `{{href}}` variable.Like `deploy` and `delete` above, you can specify `--branch`, `--push`,etc to control how the commit is handled.### Changing a Version's TitleAs you update your docs, you may want to change the title of a particularversion. For example, your `1.0` docs might have the title `1.0.0`, and when yourelease a new patch, you want to update the title to `1.0.1`. You can do thiswith the `retitle` command:```shmike retitle [version-or-alias] [title]```As with other commands that change your docs, you can specify `--branch`,`--push`, etc to control how the commit is handled.### Adding a New Version AliasSometimes, you might need to add a new alias for a version without rebuildingyour documentation. You can use the `alias` command for this:```shmike alias [version-or-alias] [alias]...```As with `deploy`, you can pass `-u`/`--update-aliases` to change where anexisting alias points to.Once again, you can specify `--branch`, `--push`, etc to control how the commitis handled.### More DetailsFor more details on the available options, consult the `--help` command formike.## Staying in Syncmike will do its best to stay in-sync with your remote repository and willautomatically update your local branch to match the remote's if possible (notethat mike *won't* automatically `git fetch` anything). If your local branch hasdiverged from your remote, mike will leave it as-is and ask you what to do. Toignore the remote's state, just pass `--ignore`; to update to the remote'sstate, pass `--rebase`.## `CNAME` (and Other Special Files)Some special files that you'd like to deploy along with your documentation (suchas `CNAME`) aren't related to a particular version of the docs, and instead needto go in the root directory of your site. There's no special handling for thisin mike, but since your built docs live on a Git branch, it's still easy tomanage: check out your `gh-pages` branch (or wherever your built docslive), and commit the necessary files to the root directory.## Deploying via CISince mike just generates commits to an ordinary Git branch, it should worksmoothly with your favorite CI system. However, you should keep in mind thatsome CI systems make shallow clones of your repository, meaning that the CI jobwon't have a local instance of your documentation branch to commit to. This willnaturally cause issues when trying to push the commit. This is easy to resolvethough; just manually fetch your `gh-pages` branch (or whichever you deploy to)before running mike:```shgit fetch origin gh-pages --depth=1```You may also need to [configure a Git user][gh-action-commit] so that mike canmake commits:```shgit config user.name ci-botgit config user.email ci-bot@example.com```## For Theme AuthorsIf you'd like to provide support for mike in your theme, you just need tofetch `versions.json` and build a version selector. `versions.json` looks likethis:```js[  {&quot;version&quot;: &quot;1.0&quot;, &quot;title&quot;: &quot;1.0.1&quot;, &quot;aliases&quot;: [&quot;latest&quot;]},  {&quot;version&quot;: &quot;0.9&quot;, &quot;title&quot;: &quot;0.9&quot;, &quot;aliases&quot;: []}]```If you're creating a third-party extension to an existing theme, you add asetuptools entry point for `mike.themes` pointing to a Python submodule thatcontains `css/` and `js/` subdirectories containing the extra code to beinstalled into the user's documentation. This will then automatically beincluded via the `mike` plugin in the user's `mkdocs.yml` file.To see some examples of how to work with this, check the[`mike/themes/mkdocs`](mike/themes/mkdocs) directory.## LicenseThis project is licensed under the [BSD 3-clause license](LICENSE).[pypi-image]: https://img.shields.io/pypi/v/mike.svg[pypi-link]: https://pypi.python.org/pypi/mike[ci-image]: https://github.com/jimporter/mike/workflows/build/badge.svg[ci-link]: https://github.com/jimporter/mike/actions?query=branch%3Amaster+workflow%3Abuild[codecov-image]: https://codecov.io/gh/jimporter/mike/branch/master/graph/badge.svg[codecov-link]: https://codecov.io/gh/jimporter/mike[bfg9000]: https://jimporter.github.io/bfg9000[setuptools]: https://pythonhosted.org/setuptools/[shtab]: https://github.com/iterative/shtab[shtab-setup]: https://github.com/iterative/shtab#cli-usage[jinja]: https://jinja.palletsprojects.com/[gh-action-commit]: https://github.com/actions/checkout#push-a-commit-using-the-built-in-token</longdescription>
</pkgmetadata>