<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>MDocument=========|pipeline status| |coverage report| |pypi link|.. |pipeline status| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/pipeline.svg   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master.. |coverage report| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/coverage.svg   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master.. |pypi link| image:: https://badge.fury.io/py/mdocument.svg   :target: https://pypi.org/project/mdocument.. |code style| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black.. |imports: isort| image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336   :target: https://pycqa.github.io/isort.. role:: strike    :class: strikeMDocument is a simple ORM for MongoDB with addition of relations.Usage-----There are two ways of using mdocument:1. Specify database, colleciton and client in class.2. Use modified mongo motor client.Specifying document parameters in class---------------------------------------.. code-block:: python    import asyncio    import motor.motor_asyncio    from mdocument import MDocument, relations, model    client = motor.motor_asyncio.AsyncIOMotorClient()    class Video(MDocument):        __collection__ = &quot;videos&quot;        __database__ = &quot;mdocument&quot;        __client__ = client        class Model(MDocument.Model):            title = model.Field(str)            views_count = model.Field(int)            public_id = model.Field(str, unique=True)    class Comment(MDocument):        __collection__ = &quot;comments&quot;        __database__ = &quot;mdocument&quot;        __client__ = client        class Model(MDocument.Model):            text = model.Field(str)            video = model.FieldSync(Video, relation=relations.RelationOneToMany, synced_fields=[&quot;_id&quot;, &quot;title&quot;])    async def main():        video = await Video.create({&quot;title&quot;: &quot;Test&quot;})        comment1 = await Comment.create(            video=video._id,            message=&quot;First!&quot;,        )        comment2 = await Comment.create(            video=video._id,            message=&quot;Second!&quot;        )    loop = asyncio.get_event_loop()    loop.run_until_complete(main())Now we can easily access our comments using our related documentsTODO: REWRITE DOCUMENTATION!</longdescription>
</pkgmetadata>