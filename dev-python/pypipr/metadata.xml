<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AboutThe Python Package Index Project (pypipr)pypi : https://pypi.org/project/pypipr# SetupInstall with pip```pip install pypipr```Then import pypipr```pythonimport pypipr```# CONSTANT`LINUX``WINDOWS`# FUNCTION## auto_reload`auto_reload(filename)`## avg`avg(i)`Simple Average Function karena tidak disediakan oleh python  ```python  n = [1, 22, 2, 3, 13, 2, 123, 12, 31, 2, 2, 12, 2, 1]  print(avg(n))  ```Output:```py16.285714285714285```## basename`basename(path)`Mengembalikan nama file dari path  ```python  print(basename(&quot;/ini/nama/folder/ke/file.py&quot;))  ```Output:```pyfile.py```## batch_calculate`batch_calculate(pattern)`Analisa perhitungan massal.  Bisa digunakan untuk mencari alternatif terendah/tertinggi/dsb.  ```python  iprint(batch_calculate(&quot;{1 10} m ** {1 3}&quot;))  ```Output:```py[('1 m ** 1', &lt;Quantity(1, 'meter')&gt;), ('1 m ** 2', &lt;Quantity(1, 'meter ** 2')&gt;), ('1 m ** 3', &lt;Quantity(1, 'meter ** 3')&gt;), ('2 m ** 1', &lt;Quantity(2, 'meter')&gt;), ('2 m ** 2', &lt;Quantity(2, 'meter ** 2')&gt;), ('2 m ** 3', &lt;Quantity(2, 'meter ** 3')&gt;), ('3 m ** 1', &lt;Quantity(3, 'meter')&gt;), ('3 m ** 2', &lt;Quantity(3, 'meter ** 2')&gt;), ('3 m ** 3', &lt;Quantity(3, 'meter ** 3')&gt;), ('4 m ** 1', &lt;Quantity(4, 'meter')&gt;), ('4 m ** 2', &lt;Quantity(4, 'meter ** 2')&gt;), ('4 m ** 3', &lt;Quantity(4, 'meter ** 3')&gt;), ('5 m ** 1', &lt;Quantity(5, 'meter')&gt;), ('5 m ** 2', &lt;Quantity(5, 'meter ** 2')&gt;), ('5 m ** 3', &lt;Quantity(5, 'meter ** 3')&gt;), ('6 m ** 1', &lt;Quantity(6, 'meter')&gt;), ('6 m ** 2', &lt;Quantity(6, 'meter ** 2')&gt;), ('6 m ** 3', &lt;Quantity(6, 'meter ** 3')&gt;), ('7 m ** 1', &lt;Quantity(7, 'meter')&gt;), ('7 m ** 2', &lt;Quantity(7, 'meter ** 2')&gt;), ('7 m ** 3', &lt;Quantity(7, 'meter ** 3')&gt;), ('8 m ** 1', &lt;Quantity(8, 'meter')&gt;), ('8 m ** 2', &lt;Quantity(8, 'meter ** 2')&gt;), ('8 m ** 3', &lt;Quantity(8, 'meter ** 3')&gt;), ('9 m ** 1', &lt;Quantity(9, 'meter')&gt;), ('9 m ** 2', &lt;Quantity(9, 'meter ** 2')&gt;), ('9 m ** 3', &lt;Quantity(9, 'meter ** 3')&gt;), ('10 m ** 1', &lt;Quantity(10, 'meter')&gt;), ('10 m ** 2', &lt;Quantity(10, 'meter ** 2')&gt;), ('10 m ** 3', &lt;Quantity(10, 'meter ** 3')&gt;)]```## batchmaker`batchmaker(pattern: str)`Alat Bantu untuk membuat teks yang berulang.  Gunakan `{[start][separator][finish]([separator][step])}`.  ```  [start] dan [finish]    -&gt; bisa berupa huruf maupun angka  ([separator][step])     -&gt; bersifat optional  [separator]             -&gt; selain huruf dan angka  [step]                  -&gt; berupa angka positif  ```  ```python  s = &quot;Urutan {1/6/3} dan {10:9} dan {j k} dan {Z - A - 15} saja.&quot;  print(batchmaker(s))  print(list(batchmaker(s)))  ```Output:```py&lt;generator object batchmaker at 0x7085838ee0&gt;['Urutan 1 dan 10 dan j dan Z saja.', 'Urutan 1 dan 10 dan j dan K saja.', 'Urutan 1 dan 10 dan k dan Z saja.', 'Urutan 1 dan 10 dan k dan K saja.', 'Urutan 1 dan 9 dan j dan Z saja.', 'Urutan 1 dan 9 dan j dan K saja.', 'Urutan 1 dan 9 dan k dan Z saja.', 'Urutan 1 dan 9 dan k dan K saja.', 'Urutan 4 dan 10 dan j dan Z saja.', 'Urutan 4 dan 10 dan j dan K saja.', 'Urutan 4 dan 10 dan k dan Z saja.', 'Urutan 4 dan 10 dan k dan K saja.', 'Urutan 4 dan 9 dan j dan Z saja.', 'Urutan 4 dan 9 dan j dan K saja.', 'Urutan 4 dan 9 dan k dan Z saja.', 'Urutan 4 dan 9 dan k dan K saja.']```## calculate`calculate(teks)`Mengembalikan hasil dari perhitungan teks menggunakan modul pint.  Mendukung perhitungan matematika dasar dengan satuan.  Return value:  - Berupa class Quantity dari modul pint  Format:  - f&quot;{result:~P}&quot;            -&gt; pretty  - f&quot;{result:~H}&quot;            -&gt; html  - result.to_base_units()    -&gt; SI  - result.to_compact()       -&gt; human readable  ```python  fx = &quot;3 meter * 10 cm * 3 km&quot;  res = calculate(fx)  print(res)  print(res.to_base_units())  print(res.to_compact())  print(f&quot;{res:~P}&quot;)  print(f&quot;{res:~H}&quot;)  ```Output:```py90 centimeter * kilometer * meter900.0 meter ** 3900.0 meter ** 390 cm·km·m90 cm km m```## choices`choices(iterator, title=None, prompt='', default=None)`Memudahkan dalam membuat pilihan untuk user dalam tampilan console  ```py  a = choices(&quot;ini hanya satu pilihan&quot;)  b = choices(      {          &quot;sedan&quot;: &quot;audi&quot;,          &quot;suv&quot;: &quot;volvo&quot;,          &quot;truck&quot;: &quot;tesla&quot;,      },      title=&quot;Car Model&quot;,      prompt=&quot;Pilih Mobil : &quot;,  )  c = choices(      iscandir(recursive=False),      title=&quot;List File dan Folder&quot;,      prompt=&quot;Pilih File atau Folder : &quot;,  )  ```## chunk_array`chunk_array(array, size, start=0)`Membagi array menjadi potongan-potongan dengan besaran yg diinginkan  ```python  array = [2, 3, 12, 3, 3, 42, 42, 1, 43, 2, 42, 41, 4, 24, 32, 42, 3, 12, 32, 42, 42]  print(chunck_array(array, 5))  print(list(chunck_array(array, 5)))  ```## console_run`console_run(info, command=None, print_info=True, capture_output=False)`Menjalankan command seperti menjalankan command di Command Terminal  ```py  console_run('dir')  console_run('ls')  ```## create_folder`create_folder(folder_name)`Membuat folder.  Membuat folder secara recursive dengan permission.  ```py  create_folder(&quot;contoh_membuat_folder&quot;)  create_folder(&quot;contoh/membuat/folder/recursive&quot;)  create_folder(&quot;./contoh_membuat_folder/secara/recursive&quot;)  ```## datetime_from_string`datetime_from_string(iso_string, timezone='UTC')`Parse iso_string menjadi datetime object  ```python  print(datetime_from_string(&quot;2022-12-12 15:40:13&quot;).isoformat())  print(datetime_from_string(      &quot;2022-12-12 15:40:13&quot;,      timezone=&quot;Asia/Jakarta&quot;  ).isoformat())  ```Output:```py2022-12-12T15:40:13+00:002022-12-12T15:40:13+07:00```## datetime_now`datetime_now(timezone=None)`Memudahkan dalam membuat Datetime untuk suatu timezone tertentu  ```python  print(datetime_now(&quot;Asia/Jakarta&quot;))  print(datetime_now(&quot;GMT&quot;))  print(datetime_now(&quot;Etc/GMT+7&quot;))  ```Output:```py2023-09-24 08:31:17.555874+07:002023-09-24 01:31:17.557479+00:002023-09-23 18:31:17.560971-07:00```## dict_first`dict_first(d: dict, remove=False)`Mengambil nilai (key, value) pertama dari dictionary dalam bentuk tuple.  ```python  d = {      &quot;key2&quot;: &quot;value2&quot;,      &quot;key3&quot;: &quot;value3&quot;,      &quot;key1&quot;: &quot;value1&quot;,  }  print(dict_first(d, remove=True))  print(dict_first(d))  ```Output:```py('key2', 'value2')('key3', 'value3')```## dirname`dirname(path)`Mengembalikan nama folder dari path.  Tanpa trailing slash di akhir.  ```python  print(dirname(&quot;/ini/nama/folder/ke/file.py&quot;))  ```Output:```py/ini/nama/folder/ke```## exit_if_empty`exit_if_empty(*args)`Keluar dari program apabila seluruh variabel  setara dengan empty  ```py  var1 = None  var2 = '0'  exit_if_empty(var1, var2)  ```## filter_empty`filter_empty(iterable, zero_is_empty=True, str_strip=True)`Mengembalikan iterabel yang hanya memiliki nilai  ```python  var = [1, None, False, 0, &quot;0&quot;, True, {}, ['eee']]  print(filter_empty(var))  ```Output:```py&lt;generator object filter_empty at 0x708580a980&gt;```## get_class_method`get_class_method(cls)`Mengembalikan berupa tuple yg berisi list dari method dalam class  ```python  class ExampleGetClassMethod:      def a():          return [x for x in range(10)]      def b():          return [x for x in range(10)]      def c():          return [x for x in range(10)]      def d():          return [x for x in range(10)]  print(get_class_method(ExampleGetClassMethod))  ```Output:```py&lt;generator object get_class_method at 0x708580ab60&gt;```## get_filemtime`get_filemtime(filename)`Mengambil informasi last modification time file dalam nano seconds  ```python  print(get_filemtime(__file__))  ```Output:```py1695518697535360116```## get_filesize`get_filesize(filename)`Mengambil informasi file size dalam bytes  ```python  print(get_filesize(__file__))  ```Output:```py465```## github_pull`github_pull()`Menjalankan command `git pull`  ```py  github_pull()  ```## github_push`github_push(commit_msg=None)`Menjalankan command status, add, commit dan push  ```py  github_push('Commit Message')  ```## github_user`github_user(email=None, name=None)`Menyimpan email dan nama user secara global sehingga tidak perlu  menginput nya setiap saat.  ```py  github_user('my@emil.com', 'MyName')  ```## iargv`iargv(key: int, cast=None, on_error=None)`## idumps`idumps(data, syntax='yaml', indent=4)`Mengubah variabel data menjadi string untuk yang dapat dibaca untuk disimpan.  String yang dihasilkan berbentuk syntax YAML/JSON/HTML.  ```python  data = {      'a': 123,      't': ['disini', 'senang', 'disana', 'senang'],      'l': (12, 23, [12, 42]),  }  print(idumps(data))  print(idumps(data, syntax='html'))  ```Output:```pya: 123l: !!python/tuple- 12- 23-   - 12    - 42t:- disini- senang- disana- senang&lt;table&gt;    &lt;tbody&gt;        &lt;tr&gt;            &lt;th&gt;a&lt;/th&gt;            &lt;td&gt;                &lt;span&gt;123&lt;/span&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;th&gt;t&lt;/th&gt;            &lt;td&gt;                &lt;ul&gt;                    &lt;li&gt;                        &lt;span&gt;disini&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;span&gt;senang&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;span&gt;disana&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;span&gt;senang&lt;/span&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;th&gt;l&lt;/th&gt;            &lt;td&gt;                &lt;ul&gt;                    &lt;li&gt;                        &lt;span&gt;12&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;span&gt;23&lt;/span&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;ul&gt;                            &lt;li&gt;                                &lt;span&gt;12&lt;/span&gt;                            &lt;/li&gt;                            &lt;li&gt;                                &lt;span&gt;42&lt;/span&gt;                            &lt;/li&gt;                        &lt;/ul&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/tbody&gt;&lt;/table&gt;```## idumps_html`idumps_html(data, indent=None)`Serialisasi python variabel menjadi HTML.  ```  List -&gt; &lt;ul&gt;...&lt;/ul&gt;  Dict -&gt; &lt;table&gt;...&lt;/table&gt;  ```  ```python  data = {      'abc': 123,      'list': [1, 2, 3, 4, 5],      'dict': {'a': 1, 'b':2, 'c':3},  }  print(idumps_html(data))  ```Output:```py&lt;table&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;abc&lt;/th&gt;      &lt;td&gt;        &lt;span&gt;123&lt;/span&gt;      &lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;list&lt;/th&gt;      &lt;td&gt;        &lt;ul&gt;          &lt;li&gt;            &lt;span&gt;1&lt;/span&gt;          &lt;/li&gt;          &lt;li&gt;            &lt;span&gt;2&lt;/span&gt;          &lt;/li&gt;          &lt;li&gt;            &lt;span&gt;3&lt;/span&gt;          &lt;/li&gt;          &lt;li&gt;            &lt;span&gt;4&lt;/span&gt;          &lt;/li&gt;          &lt;li&gt;            &lt;span&gt;5&lt;/span&gt;          &lt;/li&gt;        &lt;/ul&gt;      &lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;dict&lt;/th&gt;      &lt;td&gt;        &lt;table&gt;          &lt;tbody&gt;            &lt;tr&gt;              &lt;th&gt;a&lt;/th&gt;              &lt;td&gt;                &lt;span&gt;1&lt;/span&gt;              &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;              &lt;th&gt;b&lt;/th&gt;              &lt;td&gt;                &lt;span&gt;2&lt;/span&gt;              &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;              &lt;th&gt;c&lt;/th&gt;              &lt;td&gt;                &lt;span&gt;3&lt;/span&gt;              &lt;/td&gt;            &lt;/tr&gt;          &lt;/tbody&gt;        &lt;/table&gt;      &lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;```## ienv`ienv(on_windows=None, on_linux=None)`Mengambalikan hasil berdasarkan environment dimana program dijalankan  ```py  getch = __import__(ienv(on_windows=&quot;msvcrt&quot;, on_linux=&quot;getch&quot;))  inherit = ienv(      on_windows=[BaseForWindows, BaseEnv, object],      on_linux=[SpecialForLinux, BaseForLinux, BaseEnv, object]  )  class ExampleIEnv(*inherit):      pass  ```## iexec`iexec(python_syntax, import_pypipr=True)`improve exec() python function untuk mendapatkan outputnya  ```python  print(iexec('print(9*9)'))  ```Output:```py81```## ijoin`ijoin(iterable, separator='', start='', end='', remove_empty=False, recursive=True, recursive_flat=False, str_strip=False)`Simplify Python join functions like PHP function.  Iterable bisa berupa sets, tuple, list, dictionary.  ```python  arr = {'asd','dfs','weq','qweqw'}  print(ijoin(arr, ', '))  arr = '/ini/path/seperti/url/'.split('/')  print(ijoin(arr, ','))  print(ijoin(arr, ',', remove_empty=True))  arr = {'a':'satu', 'b':(12, 34, 56), 'c':'tiga', 'd':'empat'}  print(ijoin(arr, separator='&lt;/li&gt;\n&lt;li&gt;', start='&lt;li&gt;', end='&lt;/li&gt;',      recursive_flat=True))  print(ijoin(arr, separator='&lt;/div&gt;\n&lt;div&gt;', start='&lt;div&gt;', end='&lt;/div&gt;'))  print(ijoin(10, ' '))  ```Output:```pyweq, dfs, asd, qweqw,ini,path,seperti,url,ini,path,seperti,url&lt;li&gt;satu&lt;/li&gt;&lt;li&gt;12&lt;/li&gt;&lt;li&gt;34&lt;/li&gt;&lt;li&gt;56&lt;/li&gt;&lt;li&gt;tiga&lt;/li&gt;&lt;li&gt;empat&lt;/li&gt;&lt;div&gt;satu&lt;/div&gt;&lt;div&gt;&lt;div&gt;12&lt;/div&gt;&lt;div&gt;34&lt;/div&gt;&lt;div&gt;56&lt;/div&gt;&lt;/div&gt;&lt;div&gt;tiga&lt;/div&gt;&lt;div&gt;empat&lt;/div&gt;10```## iloads`iloads(data, syntax='yaml')`Mengubah string data hasil dari idumps menjadi variabel.  String data adalah berupa syntax YAML.  ```python  data = {      'a': 123,      't': ['disini', 'senang', 'disana', 'senang'],      'l': (12, 23, [12, 42])  }  s = idumps(data)  print(iloads(s))  ```## iloads_html`iloads_html(html)`Mengambil data yang berupa list `&lt;ul&gt;`, dan table `&lt;table&gt;` dari html  dan menjadikannya data python berupa list.  setiap data yang ditemukan akan dibungkus dengan tuple sebagai separator.  ```  list (&lt;ul&gt;)     -&gt; list         -&gt; list satu dimensi  table (&lt;table&gt;) -&gt; list[list]   -&gt; list satu dimensi didalam list  ```  apabila data berupa ul maka dapat dicek type(data) -&gt; html_ul  apabila data berupa ol maka dapat dicek type(data) -&gt; html_ol  apabila data berupa dl maka dapat dicek type(data) -&gt; html_dl  apabila data berupa table maka dapat dicek type(data) -&gt; html_table  ```python  pprint.pprint(iloads_html(iopen(&quot;https://harga-emas.org/&quot;)), depth=10)  pprint.pprint(iloads_html(iopen(&quot;https://harga-emas.org/1-gram/&quot;)), depth=10)  ```## input_char`input_char(prompt=None, prompt_ending='', newline_after_input=True, echo_char=True, default=None)`Meminta masukan satu huruf tanpa menekan Enter.  ```py  input_char(&quot;Input char : &quot;)  input_char(&quot;Input char : &quot;, default='Y')  input_char(&quot;Input Char without print : &quot;, echo_char=False)  ```## iopen`iopen(path, data=None, regex=None, css_select=None, xpath=None, file_append=False)`Membaca atau Tulis pada path yang bisa merupakan FILE maupun URL.  Baca File :  - Membaca seluruh file.  - Jika berhasil content dapat diparse dengan regex.  - Apabila File berupa html, dapat diparse dengan css atau xpath.  Tulis File :  - Menulis pada file.  - Jika file tidak ada maka akan dibuat.  - Jika file memiliki content maka akan di overwrite.  Membaca URL :  - Mengakses URL dan mengembalikan isi html nya berupa teks.  - Content dapat diparse dengan regex, css atau xpath.  Tulis URL :  - Mengirimkan data dengan metode POST ke url.  - Jika berhasil dan response memiliki content, maka dapat diparse    dengan regex, css atau xpath.  ```python  # FILE  print(iopen(&quot;__iopen.txt&quot;, &quot;mana aja&quot;))  print(iopen(&quot;__iopen.txt&quot;, regex=&quot;(\w+)&quot;))  # URL  print(iopen(&quot;https://www.google.com/&quot;, css_select=&quot;a&quot;))  print(iopen(&quot;https://www.google.com/&quot;, dict(coba=&quot;dulu&quot;), xpath=&quot;//a&quot;))  ```Output:```py8['mana', 'aja'][&lt;Element a at 0x7085975540&gt;, &lt;Element a at 0x70850140f0&gt;, &lt;Element a at 0x70850437a0&gt;, &lt;Element a at 0x7085043840&gt;, &lt;Element a at 0x7085043890&gt;, &lt;Element a at 0x70850438e0&gt;, &lt;Element a at 0x7085043930&gt;, &lt;Element a at 0x7085043980&gt;, &lt;Element a at 0x70850439d0&gt;, &lt;Element a at 0x7085043a20&gt;, &lt;Element a at 0x7085043a70&gt;, &lt;Element a at 0x7085043ac0&gt;, &lt;Element a at 0x7085043b10&gt;, &lt;Element a at 0x7085043b60&gt;, &lt;Element a at 0x7085043bb0&gt;, &lt;Element a at 0x7085043c00&gt;, &lt;Element a at 0x7085043c50&gt;, &lt;Element a at 0x7085043ca0&gt;]False```## iprint`iprint(*args, color=None, sort_dicts=False, **kwargs)`Improve print function dengan menambahkan color dan pretty print  Color menggunakan colorama Fore + Back + Style  ```python  iprint(      'yang ini',      {'12':12,'sdsd':{'12':21,'as':[88]}},      color=colorama.Fore.BLUE + colorama.Style.BRIGHT  )  ```## irange`irange(start, finish, step=1)`Meningkatkan fungsi range() dari python untuk pengulangan menggunakan huruf  ```python  print(irange('a', 'c'))  print(irange('z', 'a', 10))  print(list(irange('a', 'z', 10)))  print(list(irange(1, '7')))  print(list(irange(10, 5)))  ```Output:```py&lt;generator object irange at 0x70858e3120&gt;&lt;generator object irange at 0x70858e3120&gt;['a', 'k', 'u'][1, 2, 3, 4, 5, 6, 7][10, 9, 8, 7, 6, 5]```## ireplace`ireplace(string: str, replacements: dict, flags=re.IGNORECASE|re.MULTILINE|re.DOTALL)`STRing TRanslate mengubah string menggunakan kamus dari dict.  Replacement dapat berupa text biasa ataupun regex pattern.  Apabila replacement berupa regex, gunakan raw string `r&quot;...&quot;`  Untuk regex capturing gunakan `(...)`, dan untuk mengaksesnya  gunakan `\1`, `\2`, .., dst.  ```python  text = 'aku ini mau ke sini'  replacements = {      &quot;sini&quot;: &quot;situ&quot;,      r&quot;(ini)&quot;: r&quot;itu dan \1&quot;,  }  print(ireplace(text, replacements))  ```Output:```pyaku itu dan ini mau ke situ```## is_empty`is_empty(variable, empty=[None, False, 0, 0, '0', '', '-0', '\n', '\t', set(), {}, [], ()])`Mengecek apakah variable setara dengan nilai kosong pada empty.  Pengecekan nilai yang setara menggunakan simbol '==', sedangkan untuk  pengecekan lokasi memory yang sama menggunakan keyword 'is'  ```python  print(is_empty(&quot;teks&quot;))  print(is_empty(True))  print(is_empty(False))  print(is_empty(None))  print(is_empty(0))  print(is_empty([]))  ```Output:```pyFalseFalseTrueTrueTrueTrue```## is_iterable`is_iterable(var, str_is_iterable=False)`Mengecek apakah suatu variabel bisa dilakukan forloop atau tidak  ```python  s = 'ini string'  print(is_iterable(s))  l = [12,21,2,1]  print(is_iterable(l))  r = range(100)  print(is_iterable(r))  d = {'a':1, 'b':2}  print(is_iterable(d.values()))  ```Output:```pyFalseTrueTrueTrue```## is_valid_url`is_valid_url(path)`Mengecek apakah path merupakan URL yang valid atau tidak.  Cara ini merupakan cara yang paling efektif.  ```python  print(is_valid_url(&quot;https://chat.openai.com/?model=text-davinci-002-render-sha&quot;))  print(is_valid_url(&quot;https://chat.openai.com/?model/=text-dav/inci-002-render-sha&quot;))  ```Output:```pyTrueTrue```## iscandir`iscandir(folder_name='.', glob_pattern='*', recursive=True, scan_file=True, scan_folder=True)`Mempermudah scandir untuk mengumpulkan folder dan file.  ```python  print(iscandir())  print(list(iscandir(&quot;./&quot;, recursive=False, scan_file=False)))  ```Output:```py&lt;generator object iscandir at 0x7084fd1a40&gt;[PosixPath('dist'), PosixPath('.git'), PosixPath('pypipr'), PosixPath('__pycache__'), PosixPath('.vscode')]```## isplit`isplit(text, separator='', include_separator=False)`Memecah text menjadi list berdasarkan separator.  ```python  t = '/ini/contoh/path/'  print(isplit(t, separator='/'))  ```Output:```py['', 'ini', 'contoh', 'path', '']```## log`log(text=None)`Decorator untuk mempermudah pembuatan log karena tidak perlu mengubah  fungsi yg sudah ada.  Melakukan print ke console untuk menginformasikan proses yg sedang  berjalan didalam program.  ```py  @log  def some_function():      pass  @log()  def some_function_again():      pass  @log(&quot;Calling some function&quot;)  def some_function_more():      pass  some_function()  some_function_again()  some_function_more()  ```## password_generator`password_generator(length=8, characters='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!&quot;#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~')`Membuat pssword secara acak  ```python  print(password_generator())  ```Output:```py/U`~^j#,```## pip_freeze_without_version`pip_freeze_without_version(filename=None)`Memberikan list dari dependencies yang terinstall tanpa version.  Bertujuan untuk menggunakan Batteries Included Python.  ```py  print(pip_freeze_without_version())  ```## poetry_publish`poetry_publish(token=None)`Publish project to pypi,org  ```py  poetry_publish()  ```## poetry_update_version`poetry_update_version(mayor=False, minor=False, patch=False)`Update versi pada pyproject.toml menggunakan poetry  ```py  poetry_update_version()  ```## print_colorize`print_colorize(text, color='\x1b[32m', bright='\x1b[1m', color_end='\x1b[0m', text_start='', text_end='\n')`Print text dengan warna untuk menunjukan text penting  ```py  print_colorize(&quot;Print some text&quot;)  print_colorize(&quot;Print some text&quot;, color=colorama.Fore.RED)  ```## print_dir`print_dir(var, colorize=True)`Print property dan method yang tersedia pada variabel  ```python  p = pathlib.Path(&quot;https://www.google.com/&quot;)  print_dir(p, colorize=False)  ```## print_log`print_log(text)`Akan melakukan print ke console.  Berguna untuk memberikan informasi proses program yg sedang berjalan.  ```py  print_log(&quot;Standalone Log&quot;)  ```## print_to_last_line`print_to_last_line(text: str)`Melakukan print ke konsol tetapi akan menimpa baris terakhir.  Berguna untuk memberikan progress secara interaktif.  ```python  c = input(&quot;masukkan apa saja : &quot;)  print_to_last_line(f&quot;masukkan apa saja : {c} [ok]&quot;)  ```Output:```pymasukkan apa saja : [Fmasukkan apa saja :  [ok]```## random_bool`random_bool()`Menghasilkan nilai random True atau False.  Fungsi ini merupakan fungsi tercepat untuk mendapatkan random bool.  Fungsi ini sangat cepat, tetapi pemanggilan fungsi ini membutuhkan  overhead yg besar.  ```python  print(random_bool())  ```Output:```pyFalse```## set_timeout`set_timeout(interval, func, args=None, kwargs=None)`Menjalankan fungsi ketika sudah sekian detik.  Apabila timeout masih berjalan tapi kode sudah selesai dieksekusi semua, maka  program tidak akan berhenti sampai timeout selesai, kemudian fungsi dijalankan,  kemudian program dihentikan.  ```python  set_timeout(3, lambda: print(&quot;Timeout 3&quot;))  x = set_timeout(7, print, args=[&quot;Timeout 7&quot;])  print(x)  print(&quot;menghentikan timeout 7&quot;)  x.cancel()  ```Output:```py&lt;Timer(Thread-2, started 483240426752)&gt;menghentikan timeout 7```## sets_ordered`sets_ordered(iterator)`Hanya mengambil nilai unik dari suatu list  ```python  array = [2, 3, 12, 3, 3, 42, 42, 1, 43, 2, 42, 41, 4, 24, 32, 42, 3, 12, 32, 42, 42]  print(sets_ordered(array))  print(list(sets_ordered(array)))  ```Output:```py&lt;generator object sets_ordered at 0x708582b100&gt;[2, 3, 12, 42, 1, 43, 41, 4, 24, 32]```## str_cmp`str_cmp(t1, t2)`Membandingakan string secara incase-sensitive menggunakan lower().  Lebih cepat dibandingkan upper(), casefold(), re.fullmatch(), len().  perbandingan ini sangat cepat, tetapi pemanggilan fungsi ini membutuhkan  overhead yg besar.  ```python  print(str_cmp('teks1', 'Teks1'))  ```Output:```pyTrue```## text_colorize`text_colorize(text, color='\x1b[32m', bright='\x1b[1m', color_end='\x1b[0m')`return text dengan warna untuk menunjukan text penting  ```py  text_colorize(&quot;Print some text&quot;)  text_colorize(&quot;Print some text&quot;, color=colorama.Fore.RED)  ```## to_str`to_str(value)`Mengubah value menjadi string literal  ```python  print(to_str(5))  print(to_str([]))  print(to_str(False))  print(to_str(True))  print(to_str(None))  ```Output:```py5FalseTrue```# CLASS## APIMixinView`APIMixinView`APIView adalah class view untuk membuat Website API  Cara kerjanya adalah dengan menggunakan variabel GET untuk menerima data.    Class ini tidak bisa digunakan sendiri.  Class ini harus menjadi mixin Class View karena perlu trigger untuk  memanggil method get().    ```py  class ExampleAPIView(APIMixinView, View):      pass  ```## ComparePerformance`ComparePerformance`Menjalankan seluruh method dalam class,  Kemudian membandingkan waktu yg diperlukan.  Nilai 100 berarti yang tercepat.    ```python  class ExampleComparePerformance(ComparePerformance):      # number = 1      z = 10        def a(self):          return (x for x in range(self.z))        def b(self):          return tuple(x for x in range(self.z))        def c(self):          return [x for x in range(self.z)]        def d(self):          return list(x for x in range(self.z))    pprint.pprint(ExampleComparePerformance().compare_result(), depth=100)  print(ExampleComparePerformance().compare_performance())  print(ExampleComparePerformance().compare_performance())  print(ExampleComparePerformance().compare_performance())  print(ExampleComparePerformance().compare_performance())  print(ExampleComparePerformance().compare_performance())  ```## PintUregQuantity`PintUregQuantity`## RunParallel`RunParallel`Menjalankan program secara bersamaan.    - `class RunParallel` didesain hanya untuk pemrosesan data saja.  - Penggunaannya `class RunParallel` dengan cara membuat instance    sub class beserta data yg akan diproses, kemudian panggil fungsi    yg dipilih `run_asyncio / run_multi_threading / run_multi_processing`,    kemudian dapatkan hasilnya.  - `class RunParallel` tidak didesain untuk menyimpan data, karena    setiap module terutama module `multiprocessing` tidak dapat mengakses    data kelas dari proses yg berbeda.  - Semua methods akan dijalankan secara paralel kecuali method dengan    nama yg diawali underscore `_`  - Method untuk multithreading/multiprocessing harus memiliki 2    parameter, yaitu: `result: dict` dan `q: queue.Queue`. Parameter    `result` digunakan untuk memberikan return value dari method, dan    Parameter `q` digunakan untuk mengirim data antar proses.  - Method untuk asyncio harus menggunakan keyword `async def`, dan    untuk perpindahan antar kode menggunakan `await asyncio.sleep(0)`,    dan keyword `return` untuk memberikan return value.  - Return Value berupa dictionary dengan key adalah nama function,    dan value adalah return value dari setiap fungsi  - Menjalankan Multiprocessing harus berada dalam blok    `if __name__ == &quot;__main__&quot;:` karena area global pada program akan    diproses lagi. Terutama pada sistem operasi windows.  - `run_asyncio()` akan menjalankan kode dalam satu program, hanya    saja alur program dapat berpindah-pindah menggunkan    `await asyncio.sleep(0)`.  - `run_multi_threading()` akan menjalankan program dalam satu CPU,    hanya saja dalam thread yang berbeda. Walaupun tidak benar-benar    berjalan secara bersamaan namun bisa meningkatkan kecepatan    penyelesaian program, dan dapat saling mengakses resource antar    program.  Akses resource antar program bisa secara langsung maupun    menggunakan parameter yang sudah disediakan yaitu `result: dict`    dan `q: queue.Queue`.  - `run_multi_processing()` akan menjalankan program dengan beberapa    CPU. Program akan dibuatkan environment sendiri yang terpisah dari    program induk. Keuntungannya adalah program dapat benar-benar berjalan    bersamaan, namun tidak dapat saling mengakses resource secara langsung.    Akses resource menggunakan parameter yang sudah disediakan yaitu    `result: dict` dan `q: queue.Queue`.    ```python  class ExampleRunParallel(RunParallel):      z = &quot;ini&quot;        def __init__(self) -&gt; None:          self.pop = random.randint(0, 100)        def _set_property_here(self, v):          self.prop = v        def a(self, result: dict, q: queue.Queue):          result[&quot;z&quot;] = self.z          result[&quot;pop&quot;] = self.pop          result[&quot;a&quot;] = &quot;a&quot;          q.put(&quot;from a 1&quot;)          q.put(&quot;from a 2&quot;)        def b(self, result: dict, q: queue.Queue):          result[&quot;z&quot;] = self.z          result[&quot;pop&quot;] = self.pop          result[&quot;b&quot;] = &quot;b&quot;          result[&quot;q_get&quot;] = q.get()        def c(self, result: dict, q: queue.Queue):          result[&quot;z&quot;] = self.z          result[&quot;pop&quot;] = self.pop          result[&quot;c&quot;] = &quot;c&quot;          result[&quot;q_get&quot;] = q.get()        async def d(self):          print(&quot;hello&quot;)          await asyncio.sleep(0)          print(&quot;hello&quot;)            result = {}          result[&quot;z&quot;] = self.z          result[&quot;pop&quot;] = self.pop          result[&quot;d&quot;] = &quot;d&quot;          return result        async def e(self):          print(&quot;world&quot;)          await asyncio.sleep(0)          print(&quot;world&quot;)            result = {}          result[&quot;z&quot;] = self.z          result[&quot;pop&quot;] = self.pop          result[&quot;e&quot;] = &quot;e&quot;          return result    if __name__ == &quot;__main__&quot;:      print(ExampleRunParallel().run_asyncio())      print(ExampleRunParallel().run_multi_threading())      print(ExampleRunParallel().run_multi_processing())  ```</longdescription>
</pkgmetadata>