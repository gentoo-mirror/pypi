<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Project generated with PyScaffold](https://img.shields.io/badge/-PyScaffold-005CA0?logo=pyscaffold)](https://pyscaffold.org/)[![PyPI-Server](https://img.shields.io/pypi/v/rds2py.svg)](https://pypi.org/project/rds2py/)![Unit tests](https://github.com/BiocPy/rds2py/actions/workflows/pypi-test.yml/badge.svg)# rds2pyParse and construct Python representations for datasets stored in RDS files. `rds2py` supports a few base classes from R and Bioconductor's `SummarizedExperiment` and `SingleCellExperiment` S4 classes. **_This is possible because of [Aaron's rds2cpp library](https://github.com/LTLA/rds2cpp)._**The package uses memory views (except for strings) to access the same memory from C++ in Python (through Cython of course). This is especially useful for large datasets so we don't make multiple copies of data.## InstallPackage is published to [PyPI](https://pypi.org/project/rds2py/)```shellpip install rds2py```## UsageIf you do not have an RDS object handy, feel free to download one from [single-cell-test-files](https://github.com/jkanche/random-test-files/releases).```pythonfrom rds2py import as_summarized_experiment, read_rdsrObj = read_rds(&lt;path_to_file&gt;)```Once we have a dictionary representation of the RDS file, we can now build useful Python representations from these objects.This `rObj` contains two keys- `data`: If atomic entities, contains the numpy view of the memory space.- `attributes`: Additional properties available for the object.The package provides friendly functions to easily convert a few R representations to Python.```pythonfrom rds2py import as_spase_matrix, as_summarized_experiment# to convert an robject to a sparse matrixsp_mat = as_sparse(rObj)# to convert an robject to SCEsce = as_summarized_experiment(rObj)```For more examples converting `data.frame`, `dgCMatrix`, `dgRMatrix`, `dgTMatrix` to Python, checkout the [documentation](https://biocpy.github.io/rds2py/).## Developer NotesThis project uses Cython to provide bindings from C++ to Python.Steps to setup dependencies -- git submodules is initialized in `extern/rds2cpp`- `cmake .` in `extern/rds2cpp` directory to download dependencies, especially the `byteme` libraryFirst one needs to build the extern library, this would generate a shared object file to `src/rds2py/core-[*].so````shellpython setup.py build_ext --inplace```For typical development workflows, run```shellpython setup.py build_ext --inplace &amp;&amp; tox```&lt;!-- pyscaffold-notes --&gt;## NoteThis project has been set up using PyScaffold 4.5. For details and usageinformation on PyScaffold see https://pyscaffold.org/.</longdescription>
</pkgmetadata>