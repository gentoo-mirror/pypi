<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A graph based queryable object persistance framework built on top of Neo4j.Build status------------.. image:: https://secure.travis-ci.org/onefinestay/kaiso.png?branch=master   :target: http://travis-ci.org/onefinestay/kaisoExample-------In addition to objects, Kaiso also stores the class information in the graph.This allows us to use cypher to query instance information, but also to answerquestions about our types.Let's define some basic classes.. code:: python    from kaiso.attributes import Integer, Outgoing, String, Uuid    from kaiso.types import Entity, Relationship    # define a simple type hierarchy    class Knows(Relationship):        pass    class Animal(Entity):        id = Uuid(unique=True)        name = String()        knows = Outgoing(Knows)    class Carnivore(Animal):        pass    class Herbivore(Animal):        pass    class Penguin(Herbivore):        favourite_ice_cream = String()    class Lion(Carnivore):        n_siblings = Integer()As with any orm, we can make some instances and persist them in our graph.. code:: python    from kaiso.persistence import Manager    manager = Manager(&quot;http://localhost:7474/db/data/&quot;)    # create some instances    fred = Penguin(name=&quot;Fred&quot;)    tom = Lion(name=&quot;Tom&quot;)    relation = Knows(fred, tom)    manager.save(fred)    manager.save(tom)    manager.save(relation)Using the Neo4j web interface to explore our graph, we find Tom and Fred:.. image:: docs/images/instances.pngHowever, in addition, we can also see the type information in the graph:.. image:: docs/images/type_hierarchy.pngWe can make use of the type information in our queries, e.g. to find allherbivores who know a carnivore.. code:: cypher    MATCH        (Herbivore:PersistableType {id: &quot;Herbivore&quot;}),        (Carnivore:PersistableType {id: &quot;Carnivore&quot;}),        Carnivore &lt;-[:ISA*]-()&lt;-[:INSTANCEOF]-(carnivore),        Herbivore &lt;-[:ISA*]-()&lt;-[:INSTANCEOF]-(herbivore),        (herbivore)-[:KNOWS]-&gt;(carnivore)    RETURN        &quot;The herbivore&quot;,        herbivore.name,        &quot;knows the carnivore&quot;,        carnivore.name;::    ==&gt; +---------------------------------------------------------------------+    ==&gt; | &quot;The herbivore&quot; | &quot;Fred&quot;      | &quot;knows the carnivore&quot; | &quot;Tom&quot;       |    ==&gt; +---------------------------------------------------------------------+</longdescription>
</pkgmetadata>