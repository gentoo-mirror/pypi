<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build status| |Code coverage| |Maintenance yes| |GitHub license| |Documentation Status|.. |Build status| image:: https://travis-ci.org/bprinty/gems.png?branch=master   :target: https://travis-ci.org/bprinty/gems.. |Code coverage| image:: https://codecov.io/gh/bprinty/gems/branch/master/graph/badge.svg   :target: https://codecov.io/gh/bprinty/gems.. |Maintenance yes| image:: https://img.shields.io/badge/Maintained%3F-yes-green.svg   :target: https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity.. |GitHub license| image:: https://img.shields.io/github/license/Naereen/StrapDown.js.svg   :target: https://github.com/bprinty/gems/blob/master/LICENSE.. |Documentation Status| image:: https://readthedocs.org/projects/gems/badge/?version=latest   :target: http://gems.readthedocs.io/?badge=latestgems====Python utilities for data manipulation and management.Installation------------Via github:.. code-block:: bash    ~$ git clone http://github.com/bprinty/gems.git    ~$ cd gems    ~$ python setup.py installVia pip:.. code-block:: bash    ~$ pip install gemsDocumentation-------------Documentation for the package can be found `here &lt;http://gems.readthedocs.io/en/latest/index.html&gt;`_.Usage-----The `gems &lt;http://github.com/bprinty/gems&gt;`_ module provides specialized data structures to augment development. It's similar to the `collections &lt;https://docs.python.org/2/library/collections.html&gt;`_ module, but contains different types of objects.Currently, the following objects are available (this list will grow with time and feedback):+------------+---------------------------------------------------------+ | Name       | Description                                             | +============+=========================================================+ | composite  | JSON-like data structure for easy data traversal.       | +------------+---------------------------------------------------------+ | filetree   | JSON-like data structure for easy filesystem traversal. | +------------+---------------------------------------------------------+ composite+++++++++The ``composite`` object abstracts away the complexity associated with managing heavily nested JSON-based structures, allowing easier access to internal properties, and providing operators that work with the data in an intuitive way. Here is a simple example of how to use the ``composite`` type in a project:.. code-block:: python    &gt;&gt;&gt; from gems import composite    &gt;&gt;&gt;    &gt;&gt;&gt; data = composite({    &gt;&gt;&gt;     'one': 1,    &gt;&gt;&gt;     'two': [1, 2, 3],    &gt;&gt;&gt;     'three': ['one', 2, {'three': 'four'}],    &gt;&gt;&gt;     'four': {'five': [6, 7, 8], 'nine': 10, 'eleven': 'twelve'}    &gt;&gt;&gt; })    &gt;&gt;&gt; data.four.five[1] == 6    True    &gt;&gt;&gt; data.two[0] == 1    TrueIn the example above, an arbitrary data structure is provided as an argument to the ``composite`` object, and is transformed into an object where properties can be traversed more gracefully (syntactically). You can also load a composite object from a json or yaml file like so:.. code-block:: python    &gt;&gt;&gt; from gems import composite    &gt;&gt;&gt;    &gt;&gt;&gt; with open('data.json', 'r') as fi:    &gt;&gt;&gt;     data = composite.load(fi)    &gt;&gt;&gt;    &gt;&gt;&gt; print data.four.five[1]    6    &gt;&gt;&gt;    &gt;&gt;&gt; with open('data.yml', 'r') as fi:    &gt;&gt;&gt;     data = composite.load(fi)    &gt;&gt;&gt;    &gt;&gt;&gt; print data.four.five[1]    6There are also operations tied to ``composite`` objects. If two composite objects or a composite object and another similar type are added, you get a ``composite`` object as a result that combines the objects in an intuitive way:.. code-block:: python    &gt;&gt;&gt; # using the 'data' object from above    &gt;&gt;&gt; obj = data + {'five': 6}    &gt;&gt;&gt; obj.five == 6    True    &gt;&gt;&gt; obj.two === [1, 2, 3]    True    &gt;&gt;&gt; obj = data + [1, 2, 3]    &gt;&gt;&gt; obj[0].one.two[0] == 1    True    &gt;&gt;&gt; obj[1][1] == 2    True    &gt;&gt;&gt; data2 = composite([        1, 2, 3, {'four': 5}    ])    &gt;&gt;&gt; obj = data2 + {'five': 6}    &gt;&gt;&gt; obj[0][0] == 1    True    &gt;&gt;&gt; obj[0][2].four == 5    True    &gt;&gt;&gt; obj = data2 + ['seven', 8, 9]    &gt;&gt;&gt; obj[4:6] == ['seven', 8]    TrueOther operations like this also can be used with the ``composite`` object. For example:.. code-block:: python    &gt;&gt;&gt; # using the 'data' object from above    &gt;&gt;&gt; 'three' in data    True    &gt;&gt;&gt; 7 in data.four.five    True    &gt;&gt;&gt; data.four.five == [6, 7, 8]    True    &gt;&gt;&gt; data == data2    Falsefiletree++++++++Traversal of a filetree is typically a pain in python. You could use ``os.path.walk`` to within a recursive function to accomplish it, but there should be an easier way. That's where the ``gems.filetree`` comes in handy. Here is an example of how to use the ``gems.filetree`` type in a project:.. code-block:: python    &gt;&gt;&gt; from gems import filetree    &gt;&gt;&gt;    &gt;&gt;&gt; # mydir is a directory with the structure below    &gt;&gt;&gt; ftree = filetree('mydir')    &gt;&gt;&gt; print ftree    mydir/         one/            two.txt            three.json        two/            three/                  four.txt            five six/                     seven.txt            eight.configThe ``gems.filetree`` structure also allows for traversal of the file data like so:.. code-block:: python    &gt;&gt;&gt; print data.one['two.txt']    /full/path/to/mydir/one/two.txt    &gt;&gt;&gt;    &gt;&gt;&gt; print data.two.three['four.txt']    /full/path/to/mydir/two/three/four.txt    &gt;&gt;&gt;    &gt;&gt;&gt; print data.two['five six']['eight.config']    /full/path/to/mydir/two/five six/eight.configUsing JSON-based access is much easier and cleaner than doing many ``os.path.join`` operations to create the full paths to objects on your filesystem. Questions/Feedback------------------File an issue in the `GitHub issue tracker &lt;https://github.com/bprinty/gems/issues&gt;`_.</longdescription>
</pkgmetadata>