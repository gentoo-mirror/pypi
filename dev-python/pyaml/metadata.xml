<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pretty-yaml (or pyaml)======================PyYAML_-based python module to produce a bit more pretty and human-readable YAML-serialized data.This module is for serialization only, see `ruamel.yaml`_ module for literateYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).(side-note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there)It's a small module, and for projects that only need part of its functionality,I'd recommend copy-pasting that in, instead of adding janky dependency... _PyYAML: http://pyyaml.org/.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/.. contents::  :backlinks: noneRepository URLs:- https://github.com/mk-fg/pretty-yaml- https://codeberg.org/mk-fg/pretty-yaml- https://fraggod.net/code/git/pretty-yamlWarning-------Prime goal of this module is to produce human-readable output that can beeasily diff'ed, manipulated and re-used, but maybe with occasional issues.So please do not rely on the thing to produce output that can always bedeserialized exactly to what was exported, at least - use PyYAML directlyfor that (but maybe with options from the next section).What this module does and why-----------------------------YAML is generally nice and easy format to read *if* it was written by humans.PyYAML can a do fairly decent job of making stuff readable, and the bestcombination of parameters for such output that I've seen so far is probably this one::  &gt;&gt;&gt; m = [123, 45.67, {1: None, 2: False}, 'some text']  &gt;&gt;&gt; data = dict(a='asldnsa\nasldpáknsa\n', b='whatever text', ma=m, mb=m)  &gt;&gt;&gt; yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)  a: 'asldnsa    asldpáknsa    '  b: whatever text  ma: &amp;id001  - 123  - 45.67  - 1: null    2: false  - some text  mb: *id001pyaml (this module) tries to improve on that a bit, with the following tweaks:* Most human-friendly representation options in PyYAML (that I know of)  are used as defaults.* Dump &quot;null&quot; values as empty values, if possible, which have the same meaning  but reduce visual clutter and are easier to edit.* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, enums, dataclasses, etc  are represented as their safe YAML-compatible base (like int, list or mapping),  with mappings key-sorted by default for more diff-friendly output.* Use shorter and simplier yes/no for booleans.* List items get indented, as they should be.* Attempt is made to pick more readable string representation styles, depending  on the value, e.g.::    &gt;&gt;&gt; yaml.safe_dump(cert, sys.stdout)    cert: '-----BEGIN CERTIFICATE-----      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y    ...    &gt;&gt;&gt; pyaml.p(cert):    cert: |      -----BEGIN CERTIFICATE-----      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y    ...* &quot;force_embed&quot; option (default=yes) to avoid having &amp;id stuff scattered all  over the output. Might be more useful to disable it in some specific cases though.* &quot;&amp;idXYZ&quot; anchors, when needed, get labels from the keys they get attached to,  not just meaningless enumerators, e.g. &quot;&amp;users_-_admin&quot; instead.* &quot;string_val_style&quot; option to only apply to strings that are values, not keys,  i.e::    &gt;&gt;&gt; pyaml.p(data, string_val_style='&quot;')    key: &quot;value\nasldpáknsa\n&quot;    &gt;&gt;&gt; yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='&quot;')    &quot;key&quot;: &quot;value\nasldpáknsa\n&quot;* Add vertical spacing (empty lines) between keys on different depths,  to separate long YAML sections in the output visually, make it more seekable.* Discard end-of-document &quot;...&quot; indicators for simple values.Result for the (rather meaningless) example above::  &gt;&gt;&gt; pyaml.p(data, force_embed=False, vspacing=dict(split_lines=10))  a: |    asldnsa    asldpáknsa  b: whatever text  ma: &amp;ma    - 123    - 45.67    - 1:      2: no    - some text  mb: *ma(force_embed=False enabled deduplication with ``&amp;ma`` anchor,vspacing is adjusted to split even this tiny output)----------Extended example::  &gt;&gt;&gt; pyaml.dump(data, vspacing=dict(split_lines=10))  destination:    encoding:      xz:        enabled: yes        min_size: 5120        options:        path_filter:          - \.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$          - \.(rpm|deb|iso)$          - \.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$          - \.(sqlite3?|fossil|fsl)$          - \.git/objects/[0-9a-f]+/[0-9a-f]+$    result:      append_to_file:      append_to_lafs_dir:      print_to_stdout: yes    url: http://localhost:3456/uri  filter:    - /(CVS|RCS|SCCS|_darcs|\{arch\})/$    - /\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$    - /=(RELEASE-ID|meta-update|update)$  http:    ca_certs_files: /etc/ssl/certs/ca-certificates.crt    debug_requests: no    request_pool_options:      cachedConnectionTimeout: 600      maxPersistentPerHost: 10      retryAutomatically: yes  logging:    formatters:      basic:        datefmt: '%Y-%m-%d %H:%M:%S'        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'    handlers:      console:        class: logging.StreamHandler        formatter: basic        level: custom        stream: ext://sys.stderr    loggers:      twisted:        handlers:          - console        level: 0    root:      handlers:        - console      level: customNote that unless there are many moderately wide and deep trees of data,which are expected to be read and edited by people, it might be preferrableto directly use PyYAML regardless, as it won't introduce another(rather pointless in that case) dependency and a point of failure.Features and Tricks-------------------* Pretty-print any yaml or json (yaml subset) file from the shell::    % python -m pyaml /path/to/some/file.yaml    % pyaml &lt; myfile.yml    % curl -s https://www.githubstatus.com/api/v2/summary.json | pyaml  ``pipx install pyaml`` can be a good way to only install command-line script.* Process and replace json/yaml file in-place::    % python -m pyaml -r mydata.yml* Easier &quot;debug printf&quot; for more complex data (all funcs below are aliases to same thing)::    pyaml.p(stuff)    pyaml.pprint(my_data)    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)    pyaml.print(data, file=sys.stderr) # needs &quot;from __future__ import print_function&quot;* Force all string values to a certain style (see info on these in `PyYAML docs`_)::    pyaml.dump(many_weird_strings, string_val_style='|')    pyaml.dump(multiline_words, string_val_style='&gt;')    pyaml.dump(no_want_quotes, string_val_style='plain')  Using ``pyaml.add_representer()`` (note \*p\*yaml) as suggested in  `this SO thread`_ (or `github-issue-7`_) should also work.  See also this `amazing reply to StackOverflow#3790454`_ for everything about  the many different string styles in YAML.* Control indent and width of the results::    pyaml.dump(wide_and_deep, indent=4, width=120)  These are actually keywords for PyYAML Emitter (passed to it from Dumper),  see more info on these in `PyYAML docs`_.* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``  explicit_start=True is implied, unless overidden by explicit_start=False.* Control thresholds for vertical spacing of values (0 = always space stuff out),  but clump oneliner ones at the top::    &gt;&gt;&gt; pyaml.dump( data,      sort_dicts=pyaml.PYAMLSort.oneline_group,      vspacing=dict(split_lines=0, split_count=0) )    chart:      axisCenteredZero: no      axisColorMode: text      axisLabel: ''      axisPlacement: auto      barAlignment: 0      drawStyle: line      ...      hideFrom:        legend: no        tooltip: no        viz: no      scaleDistribution:        type: linear      stacking:        group: A        mode: none  Or same with ``pyaml -v 0/0g mydata.yaml`` cli tool option, to separate all  but oneliner values... _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars.. _this SO thread: http://stackoverflow.com/a/7445560.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7.. _amazing reply to StackOverflow#3790454:  https://stackoverflow.com/questions/3790454/how-do-i-break-a-string-in-yaml-over-multiple-lines/21699210#21699210Installation------------It's a regular Python 3.8+ module/package, published on PyPI (as pyaml_).Module uses PyYAML_ for processing of the actual YAML filesand should pull it in as a dependency.Dependency on unidecode_ module is optional and should only be necessarywith force_embed=False keyword, and same-id objects or recursion is usedwithin serialized data.Using pip_ is how you generally install it, usually coupled with venv_ usage(which will also provide &quot;pip&quot; tool itself)::  % pip install pyamlCurrent-git version can be installed like this::  % pip install git+https://github.com/mk-fg/pretty-yamlpip will default to installing into currently-active venv, then user's homedirectory (under ``~/.local/lib/python...``), and maybe system-wide when runningas root (only useful in specialized environments like docker containers).There are many other python packaging tools - pipenv_, poetry_, pdm_, etc -use whatever is most suitable for specific project/environment.pipx_ can be used to install command-line script without a module.More general info on python packaging can be found at `packaging.python.org`_.When changing code, unit tests can be run with ``python -m unittest``from the local repository checkout... _pyaml: https://pypi.org/project/pyaml/.. _unidecode: https://pypi.python.org/pypi/Unidecode.. _pip: https://pip.pypa.io/en/stable/.. _venv: https://docs.python.org/3/library/venv.html.. _poetry: https://python-poetry.org/.. _pipenv: https://pipenv.pypa.io/.. _pdm: https://pdm.fming.dev/.. _pipx: https://pypa.github.io/pipx/.. _packaging.python.org: https://packaging.python.org/installing/</longdescription>
</pkgmetadata>