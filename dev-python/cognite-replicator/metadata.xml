<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://cognite.com/&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/cognitedata/cognite-python-docs/master/img/cognite_logo.png&quot; alt=&quot;Cognite logo&quot; title=&quot;Cognite&quot; align=&quot;right&quot; height=&quot;80&quot; /&gt;&lt;/a&gt;# Cognite Python Replicator[![build](https://webhooks.dev.cognite.ai/build/buildStatus/icon?job=github-builds/cognite-replicator/master)](https://jenkins.cognite.ai/job/github-builds/job/cognite-replicator/job/master/)[![codecov](https://codecov.io/gh/cognitedata/cognite-replicator/branch/master/graph/badge.svg)](https://codecov.io/gh/cognitedata/cognite-replicator)[![Documentation Status](https://readthedocs.com/projects/cognite-cognite-replicator/badge/?version=latest)](https://cognite-cognite-replicator.readthedocs-hosted.com/en/latest/)[![PyPI version](https://badge.fury.io/py/cognite-replicator.svg)](https://pypi.org/project/cognite-replicator/)[![tox](https://img.shields.io/badge/tox-3.6%2B-blue.svg)](https://www.python.org/downloads/release/python-366/)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/cognite-replicator)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)Cognite Replicator is a Python package for replicating data across Cognite Data Fusion (CDF) projects. This package is built on top of the Cognite Python SDK.This component is Community content and not officially supported by Cognite. Bugs and changes will be fixed on a best effort basis. Feel free to open issues and pull requests, we will review them as soon as we can. Copyright 2023 Cognite AS## PrerequisitesIn order to start using the Replicator, you need:- Python3 (&gt;= 3.6)- Credentials for both the source and destination projects:     - CLIENT_ID (&quot;Client ID from Azure&quot;)    - CLIENT_SECRET (&quot;Client secret from Azure&quot;, only if using authentication via secret)    - CLUSTER (&quot;Name of CDF cluster&quot;)    - TENANT_ID (&quot;Tenant ID from Azure&quot;    - PROJECT (&quot;Name of CDF project&quot;)This is how you set the client secret as an environment variable on Mac OS and Linux:```bash$ export SOURCE_CLIENT_SECRET=&lt;your source client secret&gt;$ export DEST_CLIENT_SECRET=&lt;your destination client secret&gt;```## InstallationThe replicator is available on [PyPI](https://pypi.org/project/cognite-replicator/), and can also be executed .To run it from command line, run:```bashpip install cognite-replicator```Alternatively, build and run it as a docker container. The image is avaible on [docker hub](https://hub.docker.com/r/cognite/cognite-replicator):```bashdocker build -t cognite-replicator .```## Usage### 1. Run with a configuration file as a standalone scriptCreate a configuration file based on the config/default.yml and update the values corresponding to your environmentIf no file is specified then replicator will use config/default.yml.via Python ```bashpython -m cognite.replicator config/filepath.yml```or alternatively via dockerIf no access to a browser, you should use the client secret authentication```bashdocker run -e SOURCE_CLIENT_SECRET -e DEST_CLIENT_SECRET -v /absolute/path/to/config/config.yml:/config.yml cognite-replicator /config.yml```### 2. Setup as Python library#### 2.1 Without configuration file and interactive login It will copy everything from source to destination and use your own credentials to run the code, you need to have the right permissions to read on the source project and write on the destination project```pythonimport osimport yamlfrom cognite.client.credentials import OAuthInteractivefrom cognite.client import CogniteClient, ClientConfigfrom cognite.replicator import assets, events, files, time_series, datapoints, sequences, sequence_rows# SOURCESOURCE_TENANT_ID = &quot;48d5043c-cf70-4c49-881c-c638f5796997&quot;SOURCE_CLIENT_ID = &quot;1b90ede3-271e-401b-81a0-a4d52bea3273&quot;SOURCE_PROJECT = &quot;publicdata&quot;SOURCE_CLUSTER = &quot;api&quot;# DESTINATIONDEST_TENANT_ID = &quot;d4febcbc-db24-4823-bffd-92fd05b9c6bc&quot;DEST_CLIENT_ID = &quot;189e8b95-f1ce-47d2-aa66-4c2fe3567f91&quot;DEST_PROJECT = &quot;sa-team&quot;DEST_CLUSTER = &quot;bluefield&quot;### Autogenerated variablesSOURCE_SCOPES = [f&quot;https://{SOURCE_CLUSTER}.cognitedata.com/.default&quot;]SOURCE_BASE_URL = f&quot;https://{SOURCE_CLUSTER}.cognitedata.com&quot;SOURCE_AUTHORITY_URL = f&quot;https://login.microsoftonline.com/{SOURCE_TENANT_ID}&quot;DEST_SCOPES = [f&quot;https://{DEST_CLUSTER}.cognitedata.com/.default&quot;]DEST_BASE_URL = f&quot;https://{DEST_CLUSTER}.cognitedata.com&quot;DEST_AUTHORITY_URL = f&quot;https://login.microsoftonline.com/{DEST_TENANT_ID}&quot;# ConfigBATCH_SIZE = 10000  # this is the max size of a batch to be postedNUM_THREADS = 10  # this is the max number of threads to be usedTIMEOUT = 90PORT = 53000SOURCE_CLIENT = CogniteClient(    ClientConfig(        credentials=OAuthInteractive(            authority_url=SOURCE_AUTHORITY_URL,            client_id=SOURCE_CLIENT_ID,            scopes=SOURCE_SCOPES,        ),        project=SOURCE_PROJECT,        base_url=SOURCE_BASE_URL,        client_name=&quot;cognite-replicator-source&quot;,    ))DEST_CLIENT = CogniteClient(    ClientConfig(        credentials=OAuthInteractive(            authority_url=DEST_AUTHORITY_URL,            client_id=DEST_CLIENT_ID,            scopes=DEST_SCOPES,        ),        project=DEST_PROJECT,        base_url=DEST_BASE_URL,        client_name=&quot;cognite-replicator-destination&quot;,    ))if __name__ == &quot;__main__&quot;:  # this is necessary because threading    #### Uncomment the resources you would like to copy    assets.replicate(SOURCE_CLIENT, DEST_CLIENT)    #events.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #files.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #time_series.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #datapoints.replicate(SOURCE_CLIENT, DEST_CLIENT)    #sequences.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #sequence_rows.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)```#### 2.2 Without configuration file and with client credentials authenticationIt will copy everything from source to destination and use your own credentials to run the code, you need to have the right permissions to read on the source project and write on the destination project(in the example below, the secrets are stored as environment variables)```pythonimport osfrom cognite.client.credentials import OAuthClientCredentialsfrom cognite.client import CogniteClient, ClientConfigfrom cognite.replicator import assets, events, files, time_series, datapoints, sequences, sequence_rows# SOURCESOURCE_TENANT_ID = &quot;48d5043c-cf70-4c49-881c-c638f5796997&quot;SOURCE_CLIENT_ID = &quot;1b90ede3-271e-401b-81a0-a4d52bea3273&quot;SOURCE_CLIENT_SECRET = os.environ.get(&quot;SOURCE_CLIENT_SECRET&quot;)SOURCE_PROJECT = &quot;publicdata&quot;SOURCE_CLUSTER = &quot;api&quot;# DESTINATIONDEST_TENANT_ID = &quot;d4febcbc-db24-4823-bffd-92fd05b9c6bc&quot;DEST_CLIENT_ID = &quot;189e8b95-f1ce-47d2-aa66-4c2fe3567f91&quot;DEST_CLIENT_SECRET = os.environ.get(&quot;DEST_CLIENT_SECRET&quot;)DEST_PROJECT = &quot;sa-team&quot;DEST_CLUSTER = &quot;bluefield&quot;### Autogenerated variablesSOURCE_SCOPES = [f&quot;https://{SOURCE_CLUSTER}.cognitedata.com/.default&quot;]SOURCE_BASE_URL = f&quot;https://{SOURCE_CLUSTER}.cognitedata.com&quot;SOURCE_TOKEN_URL = f&quot;https://login.microsoftonline.com/{SOURCE_TENANT_ID}/oauth2/v2.0/token&quot;DEST_SCOPES = [f&quot;https://{DEST_CLUSTER}.cognitedata.com/.default&quot;]DEST_BASE_URL = f&quot;https://{DEST_CLUSTER}.cognitedata.com&quot;DEST_TOKEN_URL = f&quot;https://login.microsoftonline.com/{DEST_TENANT_ID}/oauth2/v2.0/token&quot;COGNITE_CONFIG_FILE = &quot;config/config.yml&quot;# ConfigBATCH_SIZE = 10000  # this is the max size of a batch to be postedNUM_THREADS = 10  # this is the max number of threads to be usedTIMEOUT = 90PORT = 53000SOURCE_CLIENT = CogniteClient(    ClientConfig(        credentials=OAuthClientCredentials(            token_url=SOURCE_TOKEN_URL,            client_id=SOURCE_CLIENT_ID,            scopes=SOURCE_SCOPES,            client_secret=SOURCE_CLIENT_SECRET,        ),        project=SOURCE_PROJECT,        base_url=SOURCE_BASE_URL,        client_name=&quot;cognite-replicator-source&quot;,    ))DEST_CLIENT = CogniteClient(    ClientConfig(        credentials=OAuthClientCredentials(            token_url=DEST_TOKEN_URL,            client_id=DEST_CLIENT_ID,            scopes=DEST_SCOPES,            client_secret=DEST_CLIENT_SECRET,        ),        project=DEST_PROJECT,        base_url=DEST_BASE_URL,        client_name=&quot;cognite-replicator-destination&quot;,    ))if __name__ == &quot;__main__&quot;:  # this is necessary because threading    #### Uncomment the resources you would like to copy    assets.replicate(SOURCE_CLIENT, DEST_CLIENT)    #events.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #files.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #time_series.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #datapoints.replicate(SOURCE_CLIENT, DEST_CLIENT)    #sequences.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)    #sequence_rows.replicate(SOURCE_CLIENT, DEST_CLIENT, BATCH_SIZE, NUM_THREADS)```### 2.3 Alternative by having some elements of the configuration file as variableRefer to [default configuration file](config/default.yml) or [example configuration file](config/example.yml) for all keys in the configuration fileStart with client creation from either step 2.1 or 2.2```pythonif __name__ == &quot;__main__&quot;:  # this is necessary because threading    config = {        &quot;timeseries_external_ids&quot;: [&quot;pi:160670&quot;, &quot;pi:160623&quot;],        &quot;datapoints_start&quot;: &quot;100d-ago&quot;,        &quot;datapoints_end&quot;: &quot;now&quot;,    }    time_series.replicate(        client_src=SOURCE_CLIENT,        client_dst=DEST_CLIENT,        batch_size=BATCH_SIZE,        num_threads=NUM_THREADS,        config=config,    )    datapoints.replicate(        client_src=SOURCE_CLIENT,        client_dst=DEST_CLIENT,        external_ids=config.get(&quot;timeseries_external_ids&quot;),        start=config.get(&quot;datapoints_start&quot;),        end=config.get(&quot;datapoints_end&quot;),    )```### 3. With configuration fileIt will use the configuration file to determine what will be copiedIn this case, no need to create the client, it will be created based on what is in the configuration file```pythonimport yamlfrom cognite.replicator.__main__ import mainimport osif __name__ == &quot;__main__&quot;:  # this is necessary because threading    COGNITE_CONFIG_FILE = yaml.safe_load(&quot;config/config.yml&quot;)    os.environ[&quot;COGNITE_CONFIG_FILE&quot;] = COGNITE_CONFIG_FILE    main()```### 4. Local testingIt will use the configuration file to determine what will be copiedIn this case, no need to create the client, it will be created based on what is in the configuration file```pythonimport yamlimport syssys.path.append(&quot;cognite-replicator&quot;) ### Path of the local version of the replicator. Importing from outside of the current working directory requires sys.path, which is a list of all directories Python searches through.import osif __name__ == &quot;__main__&quot;:  # this is necessary because threading    COGNITE_CONFIG_FILE = yaml.safe_load(&quot;config/config.yml&quot;)    os.environ[&quot;COGNITE_CONFIG_FILE&quot;] = COGNITE_CONFIG_FILE    main()    sys.path.remove(&quot;cognite-replicator&quot;)  ## Python will also search these paths for future projects unless they are removed. Removes unwanted search paths```## DevelopmentChange the version in the files- [_version.py](cognite/replicator/_version.py#L1 &quot;Version in code&quot;)- [cd.yml](.github/workflows/cd.yml#L30 &quot;Continuous deployment yaml file&quot;)- [pyproject.toml](pyproject.toml#L3 &quot;Poetry configuration&quot;)## ChangelogWondering about upcoming or previous changes? Take a look at the [CHANGELOG](https://github.com/cognitedata/cognite-replicator/blob/master/CHANGELOG.md).## ContributingWant to contribute? Check out [CONTRIBUTING](https://github.com/cognitedata/cognite-replicator/blob/master/CONTRIBUTING.md).</longdescription>
</pkgmetadata>