<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Kstreams`kstreams` is a library/micro framework to use with `kafka`. It has simple kafka streams implementation that gives certain guarantees, see below.![Build status](https://github.com/kpn/kstreams/actions/workflows/pr-tests.yaml/badge.svg?branch=master)[![codecov](https://codecov.io/gh/kpn/kstreams/branch/master/graph/badge.svg?token=t7pxIPtphF)](https://codecov.io/gh/kpn/kstreams)![python version](https://img.shields.io/badge/python-3.8%2B-yellowgreen)---**Documentation**: https://kpn.github.io/kstreams/---## Installation```bashpip install kstreams```You will need a worker, we recommend [aiorun](https://github.com/cjrh/aiorun)```bashpip install aiorun```## Usage```pythonimport aiorunfrom kstreams import create_engine, Streamstream_engine = create_engine(title=&quot;my-stream-engine&quot;)@stream_engine.stream(&quot;local--kstream&quot;)async def consume(stream: Stream):    async for cr in stream:        print(f&quot;Event consumed: headers: {cr.headers}, payload: {cr.value}&quot;)async def produce():    payload = b'{&quot;message&quot;: &quot;Hello world!&quot;}'    for i in range(5):        metadata = await stream_engine.send(&quot;local--kstreams&quot;, value=payload)        print(f&quot;Message sent: {metadata}&quot;)async def start():    await stream_engine.start()    await produce()async def shutdown(loop):    await stream_engine.stop()if __name__ == &quot;__main__&quot;:    aiorun.run(start(), stop_on_unhandled_errors=True, shutdown_callback=shutdown)```## Features- [x] Produce events- [x] Consumer events with `Streams`- [x] `Prometheus` metrics and custom monitoring- [x] TestClient- [x] Custom Serialization and Deserialization- [x] Easy to integrate with any `async` framework. No tied to any library!!- [x] Yield events from streams- [ ] Store (kafka streams pattern)- [ ] Stream Join- [ ] Windowing## DevelopmentThis repo requires the use of [poetry](https://python-poetry.org/docs/basic-usage/) instead of pip.*Note*: If you want to have the `virtualenv` in the same path as the project first you should run `poetry config --local virtualenvs.in-project true`To install the dependencies just execute:```bashpoetry install```Then you can activate the `virtualenv` with```bashpoetry shell```Run test:```bash./scripts/test```Run code formatting (`black` and `isort`)```bash./scripts/format```### Commit messagesWe use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/) for the commit message.The use of [commitizen](https://commitizen-tools.github.io/commitizen/) is recommended. Commitizen is part of the dev dependencies.```bashcz commit```</longdescription>
</pkgmetadata>