<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># VSCode Devcontainer Manager[![PyPI](https://img.shields.io/pypi/v/devcontainer-manager?logo=pypi&amp;style=flat-square)](https://pypi.org/project/devcontainer-manager)Devcontainer Manager is a command line tool that manages Visual Studio Codedevcontainer configurations written in python.## InstallationProject can be installed using pip:```shellpip install devcontainer-manager```This installs command line utility `devcontainer_manager`, see `--help` option forall available commands.## Usage### ConfigurationFirst step is to create default master configuration with```shelldevcontainer_manager create-template &lt;config-path&gt;```This creates yaml file with all available options set to default. You can thenopen the file and change the options in editor.If you specify `config-path` without `.yaml` suffix then it is consideredglobal template.  Global templates are saved to`~/.devcontainer_manager/templates/&lt;config-path&gt;.yaml` and alias is created.This can then be used in generate directly as `config-path`, for example:```devcontainer_manager create-template python# modify ~/.devcontainer_manager/templates/python.yamldevcontainer_manager generate python```The following code displays all of the options and defaults[//]: # (template_config_block_start)```yaml# root path for current project relative to current working directory or# absolute pathproject_path: .devcontainer:    # dev container name    name: '{{ project_root_basename }}'    # path in container where source will be mounted    workspace_folder: /mnt/workspace    # same as workspaceMount in devcontainer.json - path for workspace and where    # to mount it; there are two available formats:    #    - same as devcontainer.json    #    - shortened form - '&lt;local-path&gt;:&lt;remote-path&gt;' - this will be translated    #      to 'src=&lt;local-path&gt;,dst=&lt;remote-path&gt;,type=bind,consistency=cached'    workspace_mount: ${localWorkspaceFolder}:{{ devcontainer.workspace_folder }}    # same as shutdownAction in devcontainer.json    shutdown_action: none    # same as userEnvProbe in devcontainer.json    user_env_probe: loginInteractiveShell    # devcontainer image to use    image: '{{ devcontainer.name }}-dev'    # additional mounts for container in format: `src:dst`, for example this    # will mount home folder to /mnt/home in the container    # mounts:    #    - /home/developer:/mnt/home    mounts: []    # name of the container - this will be passed as `--name &lt;arg&gt;` in `docker run`    container_name: '{{ devcontainer.name }}'    # container hostname - this will be passed as `--hostname &lt;arg&gt;` in `docker run`    # this option is to make shell display the hostname as specified name instead    # of randomly generated container hex code    container_hostname: '{{ devcontainer.name }}'    # aditional arguments that will be passed to `docker run` - i.e. adding gpus:    # run_args:    # - gpus=all    run_args: []    # default extensions to install - will be directly translated to devcontainer.json    # extensions    extensions: []    # list of additional options to that will be appended to devcontainer config    # for example:    # additional_options:    #   - &gt;    #     &quot;dockerFile&quot;: &quot;{{ docker.file }}&quot;    #   - '&quot;appPort&quot;: &quot;8080&quot;'    additional_options: []docker:    # path for base dockerfile to use for building custom image    # null means that the dockerfile will not be generated    # if the path is valid, two files will be generated - devcontainer.Dockerfile    # and build.sh script for building this dockerfile    file:    # additional lines to append to dockerfile - this is useful if the main dockerfile    # does not contain developer tools, for example to add fish and git:    #    # additional_commands:    # - &gt;    #   RUN apt-get update &amp;&amp; apt-get install    #      fish procps git git-lfs    #   &amp;&amp; rm -rf /var/lib/apt/lists/*    # - ENV SHELL=&quot;/usr/bin/fish&quot;    # - ENV LANG=C.UTF-8 LANGUAGE=C.UTF-8 LC_ALL=C.UTF-8    # - SHELL [&quot;fish&quot;, &quot;--command&quot;]    # - ENTRYPOINT [&quot;fish&quot;]    additional_commands: []```[//]: # (template_config_block_end)Note that you can use `jinja2` templates in the config itself to reference otheroptions as displayed in `container_name` and `container_hostname`.### Pre-defined VariablesThere are several variables that are calculated before generation and can be usedin your configs:[//]: # (global_variables_block_start)```{{ project_root_basename }}: root directory of current project{{ uid }}: id of current user{{ login }}: username of current user{{ hostname }}: hostname of current machine```[//]: # (global_variables_block_end)### Devconfig GenerationTo generate the configuration```shelldevcontainer_manager generate [config-paths]```Using default config, this would generate `devcontainer.json` and `overrides.yaml`(more in the [Project Overrides](#per-project-template-overrides) section) files(as docker.path is null by default).If you specify more configs, then they are merged from left to right.If config-paths is not specified then `.devcontainer/overrides.yaml` is used forgeneration if it exists.### Global ConfigurationGlobal configuration can be found in `~/.devcontainer_manager/config.yaml` andcontains following options:[//]: # (global_config_block_start)```yamlbase_config: []# default values for all configs for the current environmentdefaults: {}# directory for global templatestemplate_dir: templates# default path for per-project override config (. is in '.devcontainer/')override_config_path: .devcontainer/overrides.yaml```[//]: # (global_config_block_end)### Per Project Template OverridesTo edit overrides, you can manually edit generated `.devcontainer/overrides.yaml`.Once the overrides exist, you can then call each subsequent generation using```shdevcontainer_manager generate```This is also useful for easy generation when the master template changes.</longdescription>
</pkgmetadata>