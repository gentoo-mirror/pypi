<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Pyppeteer2==========[![PyPI](https://img.shields.io/pypi/v/pyppeteer2.svg)](https://pypi.python.org/pypi/pyppeteer2)[![PyPI version](https://img.shields.io/pypi/pyversions/pyppeteer2.svg)](https://pypi.python.org/pypi/pyppeteer2)[![Documentation](https://img.shields.io/badge/docs-latest-brightgreen.svg)](https://miyakogi.github.io/pyppeteer2)[![Travis status](https://travis-ci.org/miyakogi/pyppeteer2.svg)](https://travis-ci.org/miyakogi/pyppeteer2)[![AppVeyor status](https://ci.appveyor.com/api/projects/status/nb53tkg9po8v1blk?svg=true)](https://ci.appveyor.com/project/miyakogi/pyppeteer2)[![codecov](https://codecov.io/gh/miyakogi/pyppeteer2/branch/master/graph/badge.svg)](https://codecov.io/gh/miyakogi/pyppeteer2)_Note: this is a WIP continuation of pyppeteer project_  Unofficial Python port of[puppeteer](https://github.com/GoogleChrome/puppeteer) JavaScript (headless)chrome/chromium browser automation library.* Free software: MIT license (including the work distributed under the Apache 2.0 license)* Documentation: https://miyakogi.github.io/pyppeteer## InstallationPyppeteer requires python 3.6+.(experimentally supports python 3.5)Install by pip from PyPI:```python3 -m pip install pyppeteer```Or install latest version from [github](https://github.com/miyakogi/pyppeteer):```python3 -m pip install -U git+https://github.com/miyakogi/pyppeteer.git@dev```## Usage&gt; **Note**: When you run pyppeteer first time, it downloads a recent version of Chromium (~100MB).&gt; If you don't prefer this behavior, run `pyppeteer-install` command before running scripts which uses pyppeteer.**Example**: open web page and take a screenshot.```pyimport asynciofrom pyppeteer import launchasync def main():    browser = await launch()    page = await browser.newPage()    await page.goto('http://example.com')    await page.screenshot({'path': 'example.png'})    await browser.close()asyncio.get_event_loop().run_until_complete(main())```**Example**: evaluate script on the page.```pyimport asynciofrom pyppeteer import launchasync def main():    browser = await launch()    page = await browser.newPage()    await page.goto('http://example.com')    await page.screenshot({'path': 'example.png'})    dimensions = await page.evaluate('''() =&gt; {        return {            width: document.documentElement.clientWidth,            height: document.documentElement.clientHeight,            deviceScaleFactor: window.devicePixelRatio,        }    }''')    print(dimensions)    # &gt;&gt;&gt; {'width': 800, 'height': 600, 'deviceScaleFactor': 1}    await browser.close()asyncio.get_event_loop().run_until_complete(main())```Pyppeteer has almost same API as puppeteer.More APIs are listed in the[document](https://miyakogi.github.io/pyppeteer/reference.html).[Puppeteer's document](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#)and [troubleshooting](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md) are also useful for pyppeteer users.## Differences between puppeteer and pyppeteerPyppeteer is to be as similar as puppeteer, but some differences between pythonand JavaScript make it difficult.These are differences between puppeteer and pyppeteer.### Keyword arguments for optionsPuppeteer uses object (dictionary in python) for passing options tofunctions/methods. Pyppeteer accepts both dictionary and keyword arguments foroptions.Dictionary style option (similar to puppeteer):```pythonbrowser = await launch({'headless': True})```Keyword argument style option (more pythonic, isn't it?):```pythonbrowser = await launch(headless=True)```### Element selector method name (`$` -&gt; `querySelector`)In python, `$` is not usable for method name.So pyppeteer uses`Page.querySelector()`/`Page.querySelectorAll()`/`Page.xpath()` instead of`Page.$()`/`Page.$$()`/`Page.$x()`. Pyppeteer also has shorthands for thesemethods, `Page.J()`, `Page.JJ()`, and `Page.Jx()`.### Arguments of `Page.evaluate()` and `Page.querySelectorEval()`Puppeteer's version of `evaluate()` takes JavaScript raw function or string ofJavaScript expression, but pyppeteer takes string of JavaScript. JavaScriptstrings can be function or expression. Pyppeteer tries to automatically detectthe string is function or expression, but sometimes it fails. If expressionstring is treated as function and error is raised, add `force_expr=True` option,which force pyppeteer to treat the string as expression.Example to get page content:```pythoncontent = await page.evaluate('document.body.textContent', force_expr=True)```Example to get element's inner text:```pythonelement = await page.querySelector('h1')title = await page.evaluate('(element) =&gt; element.textContent', element)```## Future Plan1. Catch up development of puppeteer    * Not intend to add original API which puppeteer does not have## CreditsThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template.</longdescription>
</pkgmetadata>