<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BusinessTimeDeltaPython's timedelta for business time. This module helps you calculate the exact working time between two datetimes. It supports common scenarios such as custom schedules, holidays, and time zones.[![Build Status](https://travis-ci.org/seppemans/businesstimedelta.svg?branch=master)](https://travis-ci.org/seppemans/businesstimedelta)## InstallationUse pip to install BusinessTimeDelta.```shellpip install businesstimedelta```## Example UseDefine your business hours```pythonimport datetimeimport pytzimport businesstimedelta# Define a working dayworkday = businesstimedelta.WorkDayRule(    start_time=datetime.time(9),    end_time=datetime.time(18),    working_days=[0, 1, 2, 3, 4])# Take out the lunch breaklunchbreak = businesstimedelta.LunchTimeRule(    start_time=datetime.time(12),    end_time=datetime.time(13),    working_days=[0, 1, 2, 3, 4])# Combine the twobusinesshrs = businesstimedelta.Rules([workday, lunchbreak])```Calculate the business time between two datetimes```pythonstart = datetime.datetime(2016, 1, 18, 9, 0, 0)end = datetime.datetime(2016, 1, 22, 18, 0, 0)bdiff = businesshrs.difference(start, end)print bdiff# &lt;BusinessTimeDelta 40 hours 0 seconds&gt;print &quot;%s hours and %s seconds&quot; % (bdiff.hours, bdiff.seconds)# 40 hours and 0 seconds```Business time arithmetic```pythonprint start + businesstimedelta.BusinessTimeDelta(businesshrs, hours=40)# 2016-01-22 18:00:00+00:00print end - businesstimedelta.BusinessTimeDelta(businesshrs, hours=40)# 2016-01-18 09:00:00+00:00```To define holidays, simply use the [Holidays](https://pypi.python.org/pypi/holidays) package```pythonimport holidays as pyholidaysca_holidays = pyholidays.US(state='CA')holidays = businesstimedelta.HolidayRule(ca_holidays)businesshrs = businesstimedelta.Rules([workday, lunchbreak, holidays])# Christmas is on Friday 2015/12/25start = datetime.datetime(2015, 12, 21, 9, 0, 0)end = datetime.datetime(2015, 12, 28, 9, 0, 0)print businesshrs.difference(start, end)# &lt;BusinessTimeDelta 32 hours 0 seconds&gt;```## TimezonesIf your datetimes are not timezone aware, they will be localized to UTC (see example above).Let's say you want to calculate the business time overlap between a working day in San Francisco and in Santiago, Chile:```pythonsantiago_workday = businesstimedelta.WorkDayRule(    start_time=datetime.time(9),    end_time=datetime.time(18),    working_days=[0, 1, 2, 3, 4],    tz=pytz.timezone('America/Santiago'))santiago_lunchbreak = businesstimedelta.LunchTimeRule(    start_time=datetime.time(12),    end_time=datetime.time(13),    working_days=[0, 1, 2, 3, 4],    tz=pytz.timezone('America/Santiago'))santiago_businesshrs = businesstimedelta.Rules([santiago_workday, santiago_lunchbreak])sf_tz = pytz.timezone('America/Los_Angeles')sf_start = sf_tz.localize(datetime.datetime(2016, 1, 18, 9, 0, 0))sf_end = sf_tz.localize(datetime.datetime(2016, 1, 18, 18, 0, 0))print santiago_businesshrs.difference(sf_start, sf_end)# &lt;BusinessTimeDelta 4 hours 0 seconds&gt;```## Overnight Shifts```python# Day shiftworkday = WorkDayRule(    start_time=datetime.time(9),    end_time=datetime.time(17),    working_days=[0, 1, 2, 3, 4],    tz=pytz.utc)# Night shiftnightshift = businesstimedelta.WorkDayRule(    start_time=datetime.time(23),    end_time=datetime.time(7),    working_days=[0, 1, 2, 3, 4])businesshrs = businesstimedelta.Rules([workday, nightshift])start = datetime.datetime(2016, 1, 18, 9, 0, 0)end = datetime.datetime(2016, 1, 22, 18, 0, 0)bdiff = businesshrs.difference(start, end)print bdiff# &lt;BusinessTimeDelta 80 hours 0 seconds&gt;```</longdescription>
</pkgmetadata>