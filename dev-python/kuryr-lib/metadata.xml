<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========================Team and repository tags========================.. image:: https://governance.openstack.org/badges/kuryr.svg    :target: https://governance.openstack.org/reference/tags/index.html.. Change things from this point on===============================kuryr===============================.. image:: https://raw.githubusercontent.com/openstack/kuryr/master/doc/images/kuryr_logo.png    :alt: Kuryr mascot    :align: centerDocker for OpenStack NeutronKuryr is a Docker network plugin that uses Neutron to provide networkingservices to Docker containers. It provides containerised images for thecommon Neutron plugins.* Free software: Apache license* Documentation: https://docs.openstack.org/kuryr/latest/* Source: https://opendev.org/openstack/kuryr* Bugs: https://bugs.launchpad.net/kuryrFeatures--------* TODOGetting Code------------::    $ git clone https://opendev.org/openstack/kuryr.git    $ cd kuryrPrerequisites-------------::    $ sudo pip install -r requirements.txtInstalling Kuryr's libnetwork driver------------------------------------For kuryr-libnetwork driver installation refer:https://docs.openstack.org/kuryr-libnetwork/latest/readme.htmlConfiguring Kuryr-----------------Generate sample config, `etc/kuryr.conf.sample`, running the following::    $ tox -e genconfigRename and copy config file at required path::    $ cp etc/kuryr.conf.sample /etc/kuryr/kuryr.confEdit keystone section in `/etc/kuryr/kuryr.conf`, replace ADMIN_PASSWORD:::    auth_type           = v3password    auth_url            = http://127.0.0.1:5000    region_name         = regionOne    user_doamin_name    = Default    username            = admin    project_domain_name = Default    project_name        = service    password            = ADMIN_PASSWORDIn the same file uncomment the `bindir` parameter with the path for the Kuryrvif binding executables:::    bindir = /usr/local/libexec/kuryrBy default, Kuryr will use veth pairs for performing the binding. However, theKuryr library ships with two other drivers that you can configure in the**binding** section::    [binding]    #driver = kuryr.lib.binding.drivers.ipvlan    #driver = kuryr.lib.binding.drivers.macvlanDrivers may make use of other **binding** options. Both Kuryr library drivers inthe previous snippet can be further configured setting the interface that willact as link interface for the virtual devices::    link_iface = enp4s0Running Kuryr-------------Currently, Kuryr utilizes a bash script to start the service. Make sure thatyou have installed `tox` before the execution of the below command.::    $ sudo ./scripts/run_kuryr.shAfter the booting, please restart your Docker service, e.g.,::    $ sudo service docker restartThe bash script creates the following file if it is missing.* ``/usr/lib/docker/plugins/kuryr/kuryr.json``: Json spec file for libnetwork.Note the root privilege is required for creating and deleting the veth pairswith `pyroute2 &lt;http://docs.pyroute2.org/&gt;`_ to run.Testing Kuryr-------------For a quick check that Kuryr is working create a network:::    $ docker network create --driver kuryr test_net    785f8c1b5ae480c4ebcb54c1c48ab875754e4680d915b270279e4f6a1aa52283    $ docker network ls    NETWORK ID          NAME                DRIVER    785f8c1b5ae4        test_net            kuryrTo test it with tox:::    $ toxYou can also run specific test cases using the ``-e`` flag, e.g., to only runthe *fullstack* test case.::    $ tox -e fullstackGenerating Documentation------------------------We use `Sphinx &lt;https://pypi.python.org/pypi/Sphinx&gt;`_ to maintain thedocumentation. You can install Sphinx using pip.::    $ pip install -U SphinxIn addition to Sphinx you will also need the following requirements(not covered by `requirements.txt`)::    $ pip install openstackdocstheme reno 'reno[sphinx]'The source code of the documentation are under *doc*, you can generate thehtml files using the following command. If the generation succeeds,a*build/html* dir will be created under *doc*.::    $ cd doc    $ make htmlNow you can serve the documentation at http://localhost:8080 as a simplewebsite.::    $ cd build/html    $ python -m SimpleHTTPServer 8080</longdescription>
</pkgmetadata>