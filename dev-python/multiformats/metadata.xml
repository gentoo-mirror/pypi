<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>multiformats: Python implementation of `multiformat protocols &lt;https://multiformats.io/&gt;`_============================================================================================.. image:: https://img.shields.io/badge/python-3.7+-green.svg    :target: https://docs.python.org/3.7/    :alt: Python versions.. image:: https://img.shields.io/pypi/v/multiformats.svg    :target: https://pypi.python.org/pypi/multiformats/    :alt: PyPI version.. image:: https://img.shields.io/pypi/status/multiformats.svg    :target: https://pypi.python.org/pypi/multiformats/    :alt: PyPI status.. image:: http://www.mypy-lang.org/static/mypy_badge.svg    :target: https://github.com/python/mypy    :alt: Checked with Mypy    .. image:: https://readthedocs.org/projects/multiformats/badge/?version=latest    :target: https://multiformats.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://github.com/hashberg-io/multiformats/actions/workflows/python-pytest.yml/badge.svg    :target: https://github.com/hashberg-io/multiformats/actions/workflows/python-pytest.yml    :alt: Python package status.. image:: https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square    :target: https://github.com/RichardLitt/standard-readme    :alt: standard-readme compliantMultiformats is a compliant implementation of `multiformat protocols &lt;https://multiformats.io/&gt;`_:.. contents::Install-------You can install the latest release from `PyPI &lt;https://pypi.org/project/multiformats/&gt;`_ as follows:.. code-block:: console    $ pip install --upgrade multiformatsThe following are mandatory dependencies for this module:- `typing-extensions &lt;https://github.com/python/typing_extensions&gt;`_, for backward compatibility of static typing.- `typing-validation &lt;https://github.com/hashberg-io/typing-validation&gt;`_, for dynamic typechecking- `bases &lt;https://github.com/hashberg-io/bases&gt;`_, for implementation of base encodings used by MultibaseThe following are optional dependencies for this module:- `pysha3 &lt;https://github.com/tiran/pysha3&gt;`_, for the ``keccak`` hash functions.- `blake3 &lt;https://github.com/oconnor663/blake3-py&gt;`_, for the ``blake3`` hash function.- `pyskein &lt;https://pythonhosted.org/pyskein/&gt;`_, for the ``skein`` hash functions.- `mmh3 &lt;https://github.com/hajimes/mmh3&gt;`_, for the ``murmur3`` hash functions.- `pycryptodomex &lt;https://github.com/Legrandin/pycryptodome/&gt;`_, for the ``ripemd-160`` hash function, \  the ``kangarootwelve`` hash function and the ``sha2-512-224``/``sha2-512-256`` hash functions.You can install the latest release together with all optional dependencies as follows:.. code-block:: console    $ pip install --upgrade multiformats[full]Usage-----You can import multiformat protocols directly from top level:&gt;&gt;&gt; from multiformats import *The above will import the following names:.. code-block:: python    varint, multicodec, multibase, multihash, multiaddr, CIDThe first five are modules implementing the homonymous specifications, while ``CID`` is a class for Content IDentifiers.Below are some basic usage examples, to get you started: for detailed documentation, see https://multiformats.readthedocs.io/Varint encode/decode^^^^^^^^^^^^^^^^^^^^&gt;&gt;&gt; varint.encode(128)b'\x80\x01'&gt;&gt;&gt; varint.decode(b'\x80\x01')128Multicodec wrap/unwrap^^^^^^^^^^^^^^^^^^^^^^Procedural style:&gt;&gt;&gt; raw_data = bytes([192, 168, 0, 254])&gt;&gt;&gt; multicodec_data = multicodec.wrap(&quot;ip4&quot;, raw_data)&gt;&gt;&gt; raw_data.hex()  'c0a800fe'&gt;&gt;&gt; multicodec_data.hex()'04c0a800fe'&gt;&gt;&gt; codec, _raw_data = multicodec.unwrap(multicodec_data)&gt;&gt;&gt; _raw_data.hex()  'c0a800fe'&gt;&gt;&gt; codecMulticodec(name='ip4', tag='multiaddr', code='0x04',           status='permanent', description='')Object-oriented style:&gt;&gt;&gt; ip4 = multicodec.get(&quot;ip4&quot;)&gt;&gt;&gt; ip4Multicodec(name='ip4', tag='multiaddr', code='0x04',           status='permanent', description='')&gt;&gt;&gt; raw_data = bytes([192, 168, 0, 254])&gt;&gt;&gt; multicodec_data = ip4.wrap(raw_data)&gt;&gt;&gt; raw_data.hex()  'c0a800fe'&gt;&gt;&gt; multicodec_data.hex()'04c0a800fe'&gt;&gt;&gt; ip4.unwrap(multicodec_data).hex()  'c0a800fe'Multibase encode/decode^^^^^^^^^^^^^^^^^^^^^^^Procedural style:&gt;&gt;&gt; multibase.encode(b&quot;Hello World!&quot;, &quot;base32&quot;)'bjbswy3dpeblw64tmmqqq'&gt;&gt;&gt; multibase.decode('bjbswy3dpeblw64tmmqqq')b'Hello World!'Object-oriented style:&gt;&gt;&gt; base32 = multibase.get(&quot;base32&quot;)&gt;&gt;&gt; base32.encode(b&quot;Hello World!&quot;)'bjbswy3dpeblw64tmmqqq'&gt;&gt;&gt; base32.decode('bjbswy3dpeblw64tmmqqq')b'Hello World!'Multihash digest^^^^^^^^^^^^^^^^Procedural style:&gt;&gt;&gt; data = b&quot;Hello world!&quot;&gt;&gt;&gt; digest = multihash.digest(data, &quot;sha2-256&quot;)&gt;&gt;&gt; digest.hex()'1220c0535e4be2b79ffd93291305436bf889314e4a3faec05ecffcbb7df31ad9e51a'Object-oriented style:&gt;&gt;&gt; sha2_256 = multihash.get(&quot;sha2-256&quot;)&gt;&gt;&gt; digest = sha2_256.digest(data)&gt;&gt;&gt; digest.hex()'1220c0535e4be2b79ffd93291305436bf889314e4a3faec05ecffcbb7df31ad9e51a'Optional truncated digests:&gt;&gt;&gt; digest = multihash.digest(data, &quot;sha2-256&quot;, size=20)#        optional truncated hash size, in bytes ^^^^^^^&gt;&gt;&gt; digest.hex()'1214c0535e4be2b79ffd93291305436bf889314e4a3f'Multihash wrap/unwrap^^^^^^^^^^^^^^^^^^^^^Procedural style:&gt;&gt;&gt; digest.hex()'1214c0535e4be2b79ffd93291305436bf889314e4a3f'&gt;&gt;&gt; raw_digest = multihash.unwrap(digest)&gt;&gt;&gt; raw_digest.hex()    'c0535e4be2b79ffd93291305436bf889314e4a3f'&gt;&gt;&gt; multihash.wrap(raw_digest, &quot;sha2-256&quot;).hex()'1214c0535e4be2b79ffd93291305436bf889314e4a3f'Object-oriented style:&gt;&gt;&gt; sha2_256 = multihash.get(&quot;sha2-256&quot;)&gt;&gt;&gt; raw_digest = sha2_256.unwrap(digest)&gt;&gt;&gt; raw_digest.hex()    'c0535e4be2b79ffd93291305436bf889314e4a3f'&gt;&gt;&gt; sha2_256.wrap(raw_digest).hex()'1214c0535e4be2b79ffd93291305436bf889314e4a3f'CID encode/decode^^^^^^^^^^^^^^^^^Decoding from multibase encoded strings:&gt;&gt;&gt; cid = CID.decode(&quot;zb2rhe5P4gXftAwvA4eXQ5HJwsER2owDyS9sKaQRRVQPn93bA&quot;)&gt;&gt;&gt; cidCID('base58btc', 1, 'raw',  '12206e6ff7950a36187a801613426e858dce686cd7d7e3c0fc42ee0330072d245c95')&gt;&gt;&gt; cid.baseMultibase(name='base58btc', code='z',          status='default', description='base58 bitcoin')&gt;&gt;&gt; cid.codecMulticodec(name='raw', tag='ipld', code='0x55',           status='permanent', description='raw binary')&gt;&gt;&gt; cid.digest.hex()'12206e6ff7950a36187a801613426e858dce686cd7d7e3c0fc42ee0330072d245c95'&gt;&gt;&gt; cid.hashfunMulticodec(name='sha2-256', tag='multihash', code='0x12',           status='permanent', description='')&gt;&gt;&gt; cid.raw_digest.hex()    '6e6ff7950a36187a801613426e858dce686cd7d7e3c0fc42ee0330072d245c95'Multibase encoding:&gt;&gt;&gt; str(cid) # encode with own multibase 'base58btc''zb2rhe5P4gXftAwvA4eXQ5HJwsER2owDyS9sKaQRRVQPn93bA'&gt;&gt;&gt; cid.encode(&quot;base32&quot;) # encode with different multibase'bafkreidon73zkcrwdb5iafqtijxildoonbwnpv7dyd6ef3qdgads2jc4su'PeerID creation^^^^^^^^^^^^^^^Creation of `CIDv1 PeerIDs &lt;https://docs.libp2p.io/concepts/peer-id/&gt;`_:&gt;&gt;&gt; pk_bytes = bytes.fromhex( # hex-string of 32-byte Ed25519 public key... &quot;1498b5467a63dffa2dc9d9e069caf075d16fc33fdd4c3b01bfadae6433767d93&quot;)&gt;&gt;&gt; peer_id = CID.peer_id(pk_bytes)&gt;&gt;&gt; peer_idCID('base32', 1, 'libp2p-key','00201498b5467a63dffa2dc9d9e069caf075d16fc33fdd4c3b01bfadae6433767d93')#^^   0x00 = 'identity' multihash used (public key length &lt;= 42)#  ^^ 0x20 = 32-bytes of raw hash digest length&gt;&gt;&gt; str(peer_id)'bafzaaiautc2um6td375c3soz4bu4v4dv2fx4gp65jq5qdp5nvzsdg5t5sm'Multiaddr parse/decode^^^^^^^^^^^^^^^^^^^^^^&gt;&gt;&gt; s = '/ip4/127.0.0.1/udp/9090/quic'&gt;&gt;&gt; multiaddr.parse(s)Multiaddr(Addr('ip4', '127.0.0.1'), Addr('udp', '9090'), Proto('quic'))&gt;&gt;&gt; b = bytes.fromhex('047f00000191022382cc03')&gt;&gt;&gt; multiaddr.decode(b)Multiaddr(Addr('ip4', '127.0.0.1'), Addr('udp', '9090'), Proto('quic'))Multiaddr protocols/addresses^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Accessing multiaddr protocols:&gt;&gt;&gt; ip4 = multiaddr.proto(&quot;ip4&quot;)&gt;&gt;&gt; ip4Proto(&quot;ip4&quot;)&gt;&gt;&gt; udp = multiaddr.proto(&quot;udp&quot;)&gt;&gt;&gt; quic = multiaddr.proto(&quot;quic&quot;)Creating protocol addresses from human-readable strings:&gt;&gt;&gt; a = ip4/&quot;192.168.1.1&quot;&gt;&gt;&gt; aAddr('ip4', '192.168.1.1')&gt;&gt;&gt; str(a)'/ip4/192.168.1.1'&gt;&gt;&gt; a.value'192.168.1.1'&gt;&gt;&gt; bytes(a).hex()'04c0a80101'&gt;&gt;&gt; a.value_bytes.hex()  'c0a80101'Creating protocol addresses from bytestrings:&gt;&gt;&gt; a = ip4/bytes([192, 168, 1, 1])&gt;&gt;&gt; aAddr('ip4', '192.168.1.1')Multiaddr encapsulation/decapsulation^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Creating multiaddresses by protocol encapsulation:&gt;&gt;&gt; ma = ip4/&quot;127.0.0.1&quot;/udp/9090/quic&gt;&gt;&gt; maMultiaddr(Addr('ip4', '127.0.0.1'), Addr('udp', '9090'), Proto('quic'))&gt;&gt;&gt; str(ma)'/ip4/127.0.0.1/udp/9090/quic'Bytes for multiaddrs are computed according to the `(TLV)+ multiaddr format &lt;https://multiformats.io/multiaddr/&gt;`_:&gt;&gt;&gt; bytes(ip4/&quot;127.0.0.1&quot;).hex()'047f000001'&gt;&gt;&gt; bytes(udp/9090).hex()          '91022382'&gt;&gt;&gt; bytes(quic).hex()                  'cc03'&gt;&gt;&gt; bytes(ma).hex()'047f00000191022382cc03'Protocol decapsulation by indexing and slicing:&gt;&gt;&gt; ma[0]Addr('ip4', '127.0.0.1')&gt;&gt;&gt; ma[:2]Multiaddr(Addr('ip4', '127.0.0.1'), Addr('udp', '9090'))&gt;&gt;&gt; ma[1:]Multiaddr(Addr('udp', '9090'), Proto('quic'))API---For the full API documentation, see https://multiformats.readthedocs.io/The tables specifying all multicodecs and multibases known to this package are maintained as part of the `multiformats-config &lt;https://github.com/hashberg-io/multiformats-config&gt;`_ repository.Contributing------------Please see `&lt;CONTRIBUTING.md&gt;`_.License-------`MIT © Hashberg Ltd. &lt;LICENSE&gt;`_</longdescription>
</pkgmetadata>