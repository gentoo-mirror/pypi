<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># creekSimple streams facade.To install:```pip install creek```[Documentation here](https://i2mint.github.io/creek/)The ``Creek`` base class offsers a layer-able wrap of the stream interface.There are three layering methods -- pre_iter, data_to_obj, and post_filt-- whose use is demonstrated in the iteration code below:```for line in self.pre_iter(self.stream):  # pre_iter: prepare and/or filter the stream    obj = self.data_to_obj(line)  # data_to_obj: Transforms the data that stream yields    if self.post_filt(obj):  # post_filt: Filters the stream further (but based on object now)        yield obj```Examples:```pydocstring&gt;&gt;&gt; from io import StringIO&gt;&gt;&gt; src = StringIO(... '''a, b, c... 1,2, 3... 4, 5,6... '''... )&gt;&gt;&gt;&gt;&gt;&gt; from creek import Creek&gt;&gt;&gt;&gt;&gt;&gt; class MyCreek(Creek):...     def data_to_obj(self, line):...         return [x.strip() for x in line.strip().split(',')]...&gt;&gt;&gt; stream = MyCreek(src)&gt;&gt;&gt;&gt;&gt;&gt; list(stream)[['a', 'b', 'c'], ['1', '2', '3'], ['4', '5', '6']]&gt;&gt;&gt; stream.seek(0)  # oh!... but we consumed the stream already, so let's go back to the beginning0&gt;&gt;&gt; list(stream)[['a', 'b', 'c'], ['1', '2', '3'], ['4', '5', '6']]&gt;&gt;&gt; stream.seek(0)  # reverse again0&gt;&gt;&gt; next(stream)['a', 'b', 'c']&gt;&gt;&gt; next(stream)['1', '2', '3']```Let's add a filter! There's two kinds you can use.One that is applied to the line before the data is transformed by data_to_obj,and the other that is applied after (to the obj).```pydocstring&gt;&gt;&gt; from creek import Creek&gt;&gt;&gt; from io import StringIO&gt;&gt;&gt;&gt;&gt;&gt; src = StringIO(...     '''a, b, c... 1,2, 3... 4, 5,6... ''')&gt;&gt;&gt; class MyFilteredCreek(MyCreek):...     def post_filt(self, obj):...         return str.isnumeric(obj[0])&gt;&gt;&gt;&gt;&gt;&gt; s = MyFilteredCreek(src)&gt;&gt;&gt;&gt;&gt;&gt; list(s)[['1', '2', '3'], ['4', '5', '6']]&gt;&gt;&gt; s.seek(0)0&gt;&gt;&gt; list(s)[['1', '2', '3'], ['4', '5', '6']]&gt;&gt;&gt; s.seek(0)0&gt;&gt;&gt; next(s)['1', '2', '3']```Recipes:- pre_iter: involving itertools.islice to skip header lines- pre_iter: involving enumerate to get line indices in stream iterator- pre_iter = functools.partial(map, line_pre_proc_func) to preprocess all lines with line_pre_proc_func- pre_iter: include filter before obj</longdescription>
</pkgmetadata>