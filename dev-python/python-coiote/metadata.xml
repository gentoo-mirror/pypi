<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Coiote Python`python-coiote` is a Python package providing access to the Coiote DM server API. It supports `v3` Coiote DM API.## Features`python-coiote` enables you to:- interact with Coiote DM `v3` API to manage your devices, groups and domains,- automatically URL-encode path parameters whenever needed,- convert API responses to convenient Python data classes,- conveniently deal with batch/paginated responses from `v3` API,- handle authentication errors and retries,and more.## Installation`python-coiote` is compatible with Python `&gt;= 3.7`.Use pip to install the latest stable version of `python-coiote`:```bashpip install --upgrade python-coiote```## AuthenticationThere are two ways of authenticating in Coiote API when using this SDK:- Using credentials to your Coiote account:```from coiote.auth import Credentialsfrom coiote.client import Coioteclient = Coiote(url=&quot;https://eu.iot.avsystem.cloud&quot;, auth=Credentials(&quot;&lt;your-username&gt;&quot;, &quot;&lt;your-password&gt;&quot;)) ```Since Coiote does not support generating API tokens yet, preferably, you should create a separate account in your Coiotedomainthat will have the permissions only to access the API endpoints you intend to use.- Using a raw token acquired manually using the `oauth` endpoint in v3 API:```from coiote.client import Coioteclient = Coiote(url=&quot;https://eu.iot.avsystem.cloud&quot;, auth=&quot;&lt;your-token&gt;&quot;) ```## Using device client`python-coiote` comes with builtin high level client designed for accessing specific device and to do so, composesmultiple API calls.To read more, see [Device Client class](src/coiote/device_client.py). The device client supports a set of basicoperations:```python3client = Coiote(url=&quot;https://eu.iot.avsystem.cloud&quot;, auth=&quot;&lt;token&gt;&quot;)endpoint_name = &quot;device_name&quot;device = client.create_device_client(endpoint_name)```Get the whole datamodel or its parts:```python3device.get_all_data()device.get_resource_value(&quot;Device.0.Timezone&quot;)```Schedule writing value to device's data model (it's async, method returns task ID):```python3write_task_id = device.write_to_resource(&quot;Device.0.Timezone&quot;, &quot;Krak√≥w/Radzikowskiego&quot;)```Schedule reading value from the actual device into its data model (it's async, method returns task ID):```python3read_task_id = device.read_resource(&quot;Device.0.Timezone&quot;)```Manually schedule executing a resource on a device (it's async, method returns task ID):```python3execute_task_id = device.execute_resource(&quot;Device.0.Reboot&quot;)```Schedule reboot of the device (it's async, method returns task ID):```python3reboot_task_id = device.reboot_device()```Get recently reported location:```python3device.get_location()```Access the device historical data - only for resources from objects with ID &gt; 502:```python3from datetime import datetime, timedeltastart_time = datetime.now() - timedelta(minutes=15)end_time = datetime.now()data = c.device_monitoring.get_data_batch(endpoint_name, lwm2m_url=&quot;/3303/0/5700&quot;, start_time=start_time, end_time=end_time)```## DocumentationDocs are yet to come.</longdescription>
</pkgmetadata>