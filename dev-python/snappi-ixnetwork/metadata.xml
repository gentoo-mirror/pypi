<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># snappi Extension for IxNetwork[![license](https://img.shields.io/badge/license-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)[![Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)[![Build](https://github.com/open-traffic-generator/snappi-ixnetwork/workflows/Build/badge.svg)](https://github.com/open-traffic-generator/snappi-ixnetwork/actions)[![pypi](https://img.shields.io/pypi/v/snappi_ixnetwork.svg)](https://pypi.org/project/snappi_ixnetwork)[![python](https://img.shields.io/pypi/pyversions/snappi_ixnetwork.svg)](https://pypi.python.org/pypi/snappi_ixnetwork)[![Total alerts](https://img.shields.io/lgtm/alerts/g/open-traffic-generator/snappi-ixnetwork.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/open-traffic-generator/snappi-ixnetwork/alerts/)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/open-traffic-generator/snappi-ixnetwork.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/open-traffic-generator/snappi-ixnetwork/context:python)[![downloads](https://pepy.tech/badge/snappi-ixnetwork)](https://pepy.tech/project/snappi-ixnetwork)This extension allows executing test scripts written using [snappi](https://github.com/open-traffic-generator/snappi) against  IxNetwork, (one of) Keysight's implementation of [Open Traffic Generator](https://github.com/open-traffic-generator/models/releases).&gt; The repository is under active development.To start contributing, please see [contributing.md](contributing.md).## Install on a client```shpython -m pip install --upgrade &quot;snappi[ixnetwork]&quot;```## Start scripting```python&quot;&quot;&quot;Configure a raw TCP flow with,- tx port as source to rx port as destination- frame count 10000, each of size 128 bytes- transmit rate of 1000 packets per secondValidate,- frames transmitted and received for configured flow is as expected&quot;&quot;&quot;import snappi# host is IxNetwork API Serverapi = snappi.api(location='https://localhost:443', ext='ixnetwork')# new configconfig = api.config()# port location is chassis-ip;card-id;port-idtx, rx = (    config.ports    .port(name='tx', location='192.168.0.1;2;1')    .port(name='rx', location='192.168.0.1;2;2'))# configure layer 1 propertiesly, = config.layer1.layer1(name='ly')ly.port_names = [tx.name, rx.name]ly.speed = ly.SPEED_10_GBPSly.media = ly.FIBER# configure flow propertiesflw, = config.flows.flow(name='flw')# flow endpointsflw.tx_rx.port.tx_name = tx.nameflw.tx_rx.port.rx_name = rx.name# enable flow metricsflw.metrics.enable = True# configure rate, size, frame countflw.size.fixed = 128flw.rate.pps = 1000flw.duration.fixed_packets.packets = 10000# configure protocol headers with defaults fieldsflw.packet.ethernet().vlan().ipv4().tcp()# push configurationapi.set_config(config)# start transmitting configured flowsts = api.transmit_state()ts.state = ts.STARTapi.set_transmit_state(ts)# create a query for flow metricsreq = api.metrics_request()req.flow.flow_names = [flw.name]# wait for flow metrics to be as expectedwhile True:    res = api.get_metrics(req)    if all([m.frames_tx == 10000 == m.frames_rx for m in res.flow_metrics]):        break```</longdescription>
</pkgmetadata>