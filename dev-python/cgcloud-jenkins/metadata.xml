<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>The CGCloud Jenkins project contains the roles for running a distributedcontinuous integration environment in EC2 with one Jenkins master VM andmultiple slave VMs. A Jenkins slave is a machine that the master delegatesbuilds to. Slaves are launched on demand and are shutdown after a certainamount of idle time. The different slave roles are blueprints for setting up aslave VM that has the necessary prerequisites for running a particular Jenkinsbuild.Quickstart==========Activate the virtualenv cgcloud was installed in and install``cgcloud-jenkins``::   ::      cd      virtualenv cgcloud      source cgcloud/bin/activate      pip install cgcloud-jenkins      export CGCLOUD_PLUGINS=&quot;cgcloud.jenkins:$CGCLOUD_PLUGINS&quot;If you get ``DistributionNotFound: No distributions matching the version forcgcloud-jenkins``, try running ``pip install --pre cgcloud-jenkins``.Running ``cgcloud list-roles`` should now list the additional roles defined inthe plugin::   ...   jenkins-master   ubuntu-lucid-genetorrent-jenkins-slave   ubuntu-precise-genetorrent-jenkins-slave   ubuntu-saucy-genetorrent-jenkins-slave   ubuntu-trusty-genetorrent-jenkins-slave   centos5-genetorrent-jenkins-slave   centos6-genetorrent-jenkins-slave   fedora19-genetorrent-jenkins-slave   fedora20-genetorrent-jenkins-slave   ubuntu-lucid-generic-jenkins-slave   ubuntu-precise-generic-jenkins-slave   ubuntu-saucy-generic-jenkins-slave   ubuntu-trusty-generic-jenkins-slave   centos5-generic-jenkins-slave   centos6-generic-jenkins-slave   fedora19-generic-jenkins-slave   fedora20-generic-jenkins-slave   centos5-rpmbuild-jenkins-slave   centos6-rpmbuild-jenkins-slave   load-test-box   data-browser-jenkins-slaveMaster And Slave Roles======================The plugin defines a role for the master (``jenkins-master``) and various slaveroles for running builds for certain building CGL projects. There are also abunch of generic slaves that are not customized for a particular project.The master (``jenkins-master``) is a long-running box that hosts the Jenkinsweb application. The Jenkins installation (code and data) is cordoned off inthe home directory of a separate ``jenkins`` user. That home directory actuallyresides on a secondary EBS volume whose life cycle is independent from that ofthe master box, i.e. VM instance. This allows us to update the OS of the masterwithout having to setup Jenkins from scratch every time we do so.The remaining roles define the Jenkins slaves. A Jenkins slave is ashort-running box with which the master establishes an SSH connection for thepurpose of triggering a *remote build*. The CGCLoud Jenkins plugin (thisproject) is used to create the VM images and register them with the master suchthat the master can launch a slave instance when needed to run a remote buildon the platform provided by the slave.Jenkins=======Jenkins is a continuous integration server/web applicaton running on the``jenkins-master``. Jenkins uses so called *projects* that define where to getthe source, how to build and test the source and which build artifacts toarchive. Builds can be run automatically whenever a push is made, on a fixedschedule or manually. Builds are executed by an agent. Agents can run locallyon the Jenkins master or remotely on one or more slaves. Jenkins uses its ownplugin system to extend and modify the default behavior. We use the EC2 pluginwhich allows us to create slaves on demand in EC2 from images created bycgcloud in conjunction with this project. Mind the distinction between CGCloudJenkins which is plugs into CGCLoud and the hundreds of plugins that extendJenkins.The Jenkins web UI can always be accessed by tunneling port 8080 through SSH.Running `cgcloud ssh jenkins-master` sets up the necessary port forwarding.Authorization and authentication in Jenkins itself is disabled on a freshinstance but can be enabled and further customized using Jenkins plugins. Note:Anyone with SSH access to the master can access Jenkins and do anything with it.Tutorial: Creating a Continuous Integration Environment=======================================================In this tutorial we'll create a continuous integration environment consistingof a Jenkins master and several slaves. The tutorial assumes that you completedthe Quickstart section of the CGCloud README.Creating The Master-------------------Create the Jenkins master instance::   cgcloud create jenkins-master   As a test, SSH into the master as the administrative user::   cgcloud ssh -a jenkins-master   exit   The administrative user has ``sudo`` privileges. Its name varies from platformto platform but ``cgcloud`` keeps track of that for you. For yet another test,SSH into the master as the *jenkins* user::   cgcloud ssh jenkins-master   This is the user that the Jenkins server runs as. Next, create an image of the master such that you can always recreate a 100%identical clone::   cgcloud stop jenkins-master   cgcloud image jenkins-master   cgcloud terminate jenkins-master   cgcloud recreate jenkins-master   The first command is necessary to stop the master because only a stoppedinstance can be imaged. The ``image`` command creates the actual AMI image. The``terminate`` command disposes of the instance. This will delete the ``/``partition while leaving the ``/var/lib/jenkins`` partition around. The latteris stored on a separate EBS volume called ``jenkins-data``. In other words, the``terminate`` command leaves us with two things: 1) the AMI for a master boxand 2) the Jenkins data volume. The ``recreate`` command then creates a newinstance from the most recently created image *and* attaches the``jenkins-data`` volume that instance.Creating The Slaves-------------------Open a new shell window and create the first slave::   cgcloud list-roles   cgcloud create docker-jenkins-slave   SSH into it::   cgcloud ssh -a docker-jenkins-slaveNotice that  * The admin user has sudo rights::     sudo whoami  * The builds directory in the Jenkins user's home is symbolically linked to   ephemeral storage::            sudo ls -l ~jenkins    * git and docker are installed::         git --version      docker --version      exitNow stop, image and terminate the box::   cgcloud stop docker-jenkins-slave   cgcloud image docker-jenkins-slave   cgcloud terminate docker-jenkins-slaveFinally, register all slaves with the master::   cgcloud register-slaves jenkins-master docker-jenkins-slaveThe ``register-slaves`` command adds a section to Jenkins' config.xml defineshow to spawn an EC2 instance of ``docker-jenkins-slave`` from the AMI we justcreated. The slave description also associates the slave with the label``docker``. If a project definition requests to be run on slaves labelled``docker``, an instance will be created from the AMI. Once the instance is up,the Jenkins master will launch the agent on via SSH. Finally, the master willask the agent to run a build for that project. If a slave labelled ``docker``already exists, it will be used instead of creating a new one. You cancustomize how may concurrent builds run on each slave by increasing the numberof agents running on a slave. By default only one slave per role will belaunched but you can configure Jenkins to launch more than one if the queuecontains multiple builds for a given label.</longdescription>
</pkgmetadata>