<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiosolrAsyncIO Python client for Apache Solr## RequirementsThis project requires Python 3.6+## InstallationTo install with pip    pip install aiosolr## UsageThe connection to the Solr backend is defined during object initialization. The accepted kwargsto init are *scheme*, *host*, *port*, *collection*, and *timeout*.*Note: collection may also be passed at query time*    import aiosolr    client = aiosolr.Client(host=localhost, collection=&quot;example&quot;, port=8983)Alternatively you may instantiate via passing a connection URL like:    import aiosolr    client = aiosolr.Client(connection_url=&quot;http://host:1234/path/to/solr/collection&quot;)Once you have your *Solr* instance, you need to setup the session like:    client.setup()Then there are methods available for querying.You can use Solr's built-in get handler with the *get* method like:    client.get(document_id)to retrieve a single document.You can use a pre-defined suggestions handler by using the *suggestions* method like:    client.suggestions(&quot;suggest_handler&quot;, query=&quot;asdf&quot;)You can also use the suggestions method to build your suggestions like:    client.suggestions(&quot;suggest_handler&quot;, build=True)*Note: handler is a required argument for suggestions unlike for get or query*You can use the *query* method to query your search handler. The default handler used is &quot;select&quot;.If you would like spellcheck suggestion turned on, pass *spellcheck=True* (default is False).    client.query(handler=&quot;my_handler&quot;, query=&quot;asdf&quot;, spellcheck=True)If *spellcheck* is *True* the query method returns a tuple with the first element beingan array of documents and the 2nd element being an array of spellcheck suggestions.Otherwise, the query method returns a simple array of documents.You can use the *update* method to access Solr's built-in update handler like:    client.update(my_data)At any point that you need to commit data to your collection you can use the *commit* method.Arguments should be the &quot;handler&quot; (&quot;update&quot; by default) and &quot;soft&quot; as a boolean indicatingwhether it should be a hard or soft commit (defaults to False).There is one more method you might want to use before querying Solr especiallyif the query is coming from an untrusted end user. There is a *clean_query* method which can beused to strip out unwanted characters. The function signature allows the following arguments:    @staticmethod    def clean(        query,  # end user query        allow_html_tags=False,        allow_http=False,        allow_wildcard=False,        escape_chars=(&quot;:&quot;, r&quot;\:&quot;),  # tuple of (replace_me, replace_with)        max_len=200,        # regex of chars to remove        remove_chars=r'[\&amp;\|\!\(\)\{\}\[\]\^&quot;~\?\\;]',        urlencode=True,    ):Use it like:    trusted_query = aiosolr.clean_query(users_query)Once you are finished with the Solr instance, you should call the method *close* to cleanupsessions like:    await client.close()## DebuggingTo get more information from the Client you can initialize with `debug=True` like:    import aiosolr    client = aiosolr.Client(host=localhost, collection=&quot;example&quot;, port=8983, debug=True)This sets the `aiosolr` logger to debug level, and also sets the internally used HTTP session(provied by [AIOHTTP](https://docs.aiohttp.org/en/stable/logging.html)) to a debug level.This makes it easier to see the actual network request going to Solr.</longdescription>
</pkgmetadata>