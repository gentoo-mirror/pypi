<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>getnet-python=========#### This project is a fork of [Getnet-py](https://github.com/ramon/getnet-py) #### This project provider a SDK to handler Getnet API.Installation------------To install getnet-py you can use pip:    $ pip install getnet-pythonor pipenv:    $ pipenv install getnet-python    Usage-----#####  For use this library the following information is needed:  * Seller ID * Client ID * Client Secret #####  The following environments are supported: * Sandbox * Homolog * Production #####  At moment, we have support to the following services: * Token * Payments   * Credit Card Instancing the client```pythonfrom getnet import Environment, Clientclient = Client(&quot;seller_id&quot;, &quot;client_id&quot;, &quot;client_secret&quot;, Environment.SANDBOX)client.auth() # Optional, will be executed if needed``` # Using the Services### Examples##### Consult Card BIN Informations```pythoncard_bin = client.card_bin(&quot;515590&quot;) # Card related information and Status```### Customer```pythoncustomer_service = client.customer_service()```#### Create Customer```pythoncustomer_data = client.customer(    {        &quot;first_name&quot;:&quot;Joao&quot;,        &quot;last_name&quot;:&quot;Pedro da Silva&quot;,        &quot;document_type&quot;:&quot;CPF&quot;,        &quot;document_number&quot;:&quot;77261241563&quot;,        &quot;birth_date&quot;:&quot;1988-04-08&quot;,        &quot;phone_number&quot;:&quot;5575999999999&quot;,        &quot;celphone_number&quot;:&quot;5575999999999&quot;,        &quot;email&quot;:&quot;fabvitor@test.com&quot;,        &quot;observation&quot;:&quot;Test CLient&quot;,        &quot;customer_id&quot;:&quot;77261241563&quot;, # or uuid4        &quot;seller_id&quot;:&quot;6eb2412c-165a-41cd-b1d9-76c575d70a28&quot;,        &quot;address&quot;:{            &quot;street&quot;: &quot;Rua Test&quot;,            &quot;number&quot;: &quot;40&quot;,            &quot;complement&quot;: &quot;Casa&quot;,            &quot;district&quot;: &quot;Centro&quot;,            &quot;city&quot;: &quot;São Paulo&quot;,            &quot;state&quot;: &quot;SP&quot;,            &quot;country&quot;: &quot;Brasil&quot;,            &quot;postal_code&quot;: &quot;77019098&quot;,        },    })customer = customer_service.create(customer_data)```#### Get Customer```pythoncustomer = customer_service.get(&quot;77261241563&quot;)```#### List All Customers Saved in Getnet```pythoncustomers = customer_service.all()```##### Tokenizing a Credit Card```pythontoken = client.generate_card_token(&quot;5155901222280001&quot;, customer.customer_id)token.number_token # token genered in getnet```##### Verify a Credit Card```pythoncard_verified: bool = client.card_verified(    number_token=tokenizado.number_token,      expiration_month=&quot;12&quot;,    expiration_year=&quot;28&quot;    cardholder_name=&quot;JOAO DA SILVA&quot;,    brand=&quot;Mastercard&quot;,    security_code=&quot;123&quot;,) # True or False```### Generate a Credit Card```pythonpayment_card = client.credit_card(    number_token=tokenizado.number_token,      cardholder_name=&quot;JOAO DA SILVA&quot;,    security_code=&quot;123&quot;,    brand=&quot;Mastercard&quot;,    expiration_month=&quot;12&quot;,    expiration_year=&quot;28&quot;    )```### Generate a Order```pythonpayment_order = client.order(&quot;12345&quot;) ```### Generate a Payment Customer```pythonpayment_customer = client.customer(customer) ```### Generate a Credit Card Payment```pythonpayment = client.create_credit_transaction(    amount=&quot;1000&quot;,    delayed=False,    pre_authorization=True,    save_card_data=False,    transaction_type=&quot;FULL&quot;,    number_installments=1,    order=payment_order,    customer=payment_customer,    card=payment_card,    shipping_address={        &quot;street&quot;: &quot;Rua Test&quot;,        &quot;number&quot;: &quot;40&quot;,        &quot;city&quot;: &quot;São Paulo&quot;,        &quot;state&quot;: &quot;SP&quot;,        &quot;postal_code&quot;: &quot;77019098&quot;    }, # The user's address may be different from the address registered with the consumer)    payment_id = payment.payment_id # IDstatus = payment.status # AUTHORIZED```### Adjust a Payment Amount```pythonpayment_ajusted = client.adjust_credit_transaction(payment_id, &quot;2000&quot;)payment_ajusted.status # APROVED```### Capture a Credit Card Payment```pythoncaptured_payment = client.capture_credit_transaction(payment_id, &quot;2000&quot;)captured_payment.status # CONFIRMED```### Cancel a Credit Card Payment```pythoncanceled_order = client.cancel_credit_transaction(payment_id)canceled_order.status # CANCELEDcancel_payment_credit.credit_cancel.message # &quot;Credit transaction cancelled sucessfully&quot;```## Handling error returnsErrors related to specific getnet returns can be accessed through the BusinessError ClassExample in Cancel Transaction:```pythontry:    canceled_order = client.cancel_credit_transaction(payment_id)except Exception as getnet_error:    error_code = getnet_error.details[&quot;error_code&quot;]    print(error_code)  # PAYMENTS-082    error_msg = getnet_error.details[&quot;description&quot;]    print(error_msg) # Cancelamento inválido```</longdescription>
</pkgmetadata>