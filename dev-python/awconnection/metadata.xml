<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AutonoWar ConnectionAn interface between Python and AutonoWar&lt;br&gt;&lt;br&gt;Documentation (AutonoWar v0.1.3, abrconnection v0.1.0): &lt;br&gt;&lt;br&gt;* Coordinate system is left-handed, with x being east, y being upwards, and z being north.* `RobotConnection()`: class which handles connection to the game. Should be instantiated at beginning of script, and method `connect()` should be called immediately after. `disconnect()` ends connection.  * `RobotConnection.set_tire_torque(tire_name, torque)`: sets torque of tire `tire_name` to `torque`. Current tire names are &quot;BackLeft&quot;, &quot;BackRight&quot;, &quot;FrontLeft&quot;, and &quot;FrontRight.&quot;  * `RobotConnection.set_tire_steering(tire_name, bering)`: sets tire `tire_name` to `bering`. All angles/berings are clockwise off of vertical (unity's coordinate system is left-handed).* `RobotConnection.sensors`: Dictionary/Hashtable containing information about the state of the robot.    * Vectors are stored as dictionaries with keys `&quot;x&quot;`, `&quot;y&quot;`, and `&quot;z&quot;`.  * `sensors[&quot;gps&quot;]`: Sensor containing position information of the robot.    * `sensors[&quot;gps&quot;][&quot;position&quot;]`: Vector containing current position of robot relative to starting point.  * `sensors[&quot;gyroscope&quot;]`: Sensor containing rotation information of the robot:    * `sensors[&quot;gyroscope&quot;][&quot;right&quot;]`: Unit vector pointing right RELATIVE to the robot. For example, if the robot was facing in the default direction, its right vector would be &lt;1, 0, 0&gt; because its right direction is east. If the robot turned 90 degees counterclockwise, its right vector would be &lt;0, 0, 1&gt;. If the robot was facing a bering of 45 degrees and was climbing a 20 degree grade, its right vector would be &lt;cos(45), sin(20), sin(45)&gt; / sqrt(cos(45)^2 + sin(20)^2 + sin(45)^2).    * `sensors[&quot;gyroscope&quot;][&quot;up&quot;]`: Unit vector pointing up RELATIVE to the robot. Same idea as before.    * `sensors[&quot;gyroscope&quot;][&quot;forward&quot;]`: Unit vector pointing up RELATIVE to the robot. Same idea as before.  * `sensors[&quot;lidar&quot;][&quot;distanceArray&quot;]`: Array containing distance to any object at 1 degree increments. `state_dict[&quot;lidar&quot;][&quot;distanceArray&quot;][0]` would describe how many meters of clearance the robot has in front of itself, `state_dict[&quot;lidar&quot;][&quot;distanceArray&quot;][90]` would describe its clearance to the right, and so on. If the robot has more than 100 meters of clearance in a particular direction, the value will capped at 100. In future updates, lidar upgrades might include an increase in range or density for in-game currency. Vertical FOV will be coming soon.  * `sensors[&quot;radar&quot;][&quot;pings&quot;]`: array of vectors representing opponent locations  * `sensors[&quot;altimeter&quot;][&quot;altitude&quot;]`: distance to ground in world space (i.e. NOT normal to robot)</longdescription>
</pkgmetadata>