<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydeflate[![pypi](https://img.shields.io/pypi/v/pydeflate.svg)](https://pypi.python.org/pypi/pydeflate)[![Documentation Status](https://readthedocs.org/projects/pydeflate/badge/?version=latest)](https://pydeflate.readthedocs.io/en/latest/?version=latest)[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Downloads](https://pepy.tech/badge/pydeflate/month)](https://pepy.tech/project/pydeflate)[![Coverage](https://codecov.io/gh/jm-rivera/pydeflate/branch/main/graph/badge.svg?token=uwKI5DyO3w)](https://codecov.io/gh/jm-rivera/pydeflate)**pydeflate** is a Python package to convert flows data to constantprices. This can be done from any source currency to any desired baseyear and currency. **Pydeflate** can also be used to convert constantdata to current prices and to convert from one currency to another (incurrent and constant prices). Users can choose the source of theexchange and deflator/prices data (currently, IMF, World Bank or OECDDAC).## Getting started### Installationpydeflate can be installed from PyPI. From the command line:```bashpip install pydeflate```## Basic usage### Current to constantConvert data expressed in current USD prices to constant EUR prices fora given base year:```pythonfrom pydeflate import deflate, set_pydeflate_pathimport pandas as pd# Specify where the deflator and exchange data should be savedset_pydeflate_path(&quot;path/to/data/folder&quot;)# example datadata = {    'iso_code': ['FRA', 'USA', 'GTM'],    'year': [2017, 2017, 2017],    'value': [50, 100, 200]}# create an example dataframe, in current USD pricesdf = pd.DataFrame.from_dict(data)# convert to EUR 2015 constant pricesdf_constant = deflate(    df=df,    base_year=2015,    deflator_source='world_bank',    deflator_method='gdp',    exchange_source=&quot;world_bank&quot;,    source_currency=&quot;USA&quot;,  # since data is in USD    target_currency=&quot;EMU&quot;,  # we want the result in constant EUR    id_column=&quot;iso_code&quot;,    id_type=&quot;ISO3&quot;,  # specifying this is optional in most cases    date_column=&quot;year&quot;,    source_column=&quot;value&quot;, # where the original data is    target_col=&quot;value_constant&quot;, # where the new data will be stored)```This results in a dataframe containing a new column `value_constant` in2015 constant prices. In the background, pydeflate takes into account:- changes in princes, through a gdp deflator in this case- changes in exchange rates overtime### Current Local Currency Units to constant in a different currencyPydeflate can also handle data that is expressed in local currencyunits. In that case, users can specify `LCU` as the source currency.```pythonfrom pydeflate import deflate, set_pydeflate_pathimport pandas as pd# Specify where the deflator and exchange data should be savedset_pydeflate_path(&quot;path/to/data/folder&quot;)# example datadata = {    'country': ['United Kingdom', 'United Kingdom', 'Japan'],    'date': [2011, 2015, 2015],    'value': [100, 100, 100]}# create an example dataframe, in current local currency unitsdf = pd.DataFrame.from_dict(data)# convert to USD 2018 constant pricesdf_constant = deflate(    df=df,    base_year=2018,    deflator_source='imf',    deflator_method='pcpi',    exchange_source=&quot;imf&quot;,    source_currency=&quot;LCU&quot;,  # since data is in LCU    target_currency=&quot;USA&quot;,  # to get data in USD    id_column=&quot;iso_code&quot;,    date_column=&quot;date&quot;,    source_col=&quot;value&quot;,    target_col=&quot;value&quot;,  # to not create a new column)```### Constant to currentUsers can also convert a dataset expressed in constant prices to currentprices using pydeflate. To avoid introducing errors, users should knowwhich methodology/ data was used to create constant prices by theoriginal source. The basic usage is the same as before, but the`to_current` parameter is set to `True`.For example, to convert DAC data expressed in 2016 USD constant pricesto current US dollars:```pythonfrom pydeflate import deflate, set_pydeflate_pathimport pandas as pd# Specify where the deflator and exchange data should be savedset_pydeflate_path(&quot;path/to/data/folder&quot;)# example datadata = {    'dac_code': [302, 4, 4],    'date': [2010, 2016, 2018],    'value': [100, 100, 100]}# create an example dataframe, in current local currency unitsdf = pd.DataFrame.from_dict(data)# convert to USD 2018 constant pricesdf_current = deflate(    df=df,    base_year=2016,    deflator_source='oecd_dac',    deflator_method='dac_deflator',    exchange_source=&quot;oecd_dac&quot;,    source_currency=&quot;USA&quot;,  # since data is in USD constant    target_currency=&quot;LCU&quot;,  # to get the current LCU figures    id_column=&quot;dac_code&quot;,    id_type=&quot;DAC&quot;,    date_column=&quot;date&quot;,    source_column=&quot;value&quot;,    target_column=&quot;value_current&quot;,    to_current=True,)```## Data source and method optionsIn order to convert the data, pydeflate uses data on **price/gdp deflators** and**exchange rates**. Each of these data sources can come from the `OECD DAC`,`IMF (WEO)` or `World Bank`.For all sources, Exchange rates between two non USD currency pairs are derived fromthe LCU to USD exchange rates selected.### International Monetary Fund World Economic Outlook (&quot;imf&quot;)For price/gdp deflators from the IMF, the following options are available (`deflator_method`):- `gdp`: in order to use GDP deflators.- `pcpi`: in order to use Consumer Price Index data.- `pcpie`: to use end-of-period Consumer Price Index data  (e.g. for December each year).The IMF provides estimates where data is not available, including for severalyears into the future. Using these price deflators, combined with the correspondingexchange rates, allows users to convert data to constant prices for future years.For exchange rates, the following options are available from the imf (`exchange_method`):- `implied`: to use the exchange rates used by the World Economic Outlook, derived from    the WEOs data on GDP in US Dollars and Local Currency Units.### World Bank (&quot;world_bank&quot;)For price/gdp deflators from the World Bank, the following options are available (`deflator_method`):In terms of price or GDP deflators, pydeflate provides the following- `gdp`: in order to use GDP deflators.- `gdp_linked`: to use the World Bank's GDP deflator series which  has been linked to produce a consistent time series to  counteract breaks in series over time due to changes in base  years, sources or methodologies.- `cpi`: to use Consumer Price Index dataFor exchange rates, the following options are available from the World Bank (`exchange_method`):- `yearly_average`: as used by the World Bank, based on IMF International Financial Statistics data.### OECD Development Assistance Committee (&quot;oecd_dac&quot;)For price/gdp deflators from the OECD DAC, the following options are available (`deflator_method`):In terms of price or GDP deflators, pydeflate provides the following:- `dac_deflator`: in order to use the DAC's own deflator series.For exchange rates, the following options are available from the OECD DAC (`exchange_method`):- `implied`: to use the exchange rates used and published by the DAC.## Additional featuresPydeflate relies on data from the World Bank, IMF and OECD for itscalculations. This data is updated periodically. If the version of thedata stored in the user's computer is older than 50 days, pydeflate willshow a warning on import.Users can always update the underlying data by using:```pythonimport pydeflatepydeflate.update_all_data()```Pydeflate also provides users with a tool to exchange figures from onecurrency to another, without applying any deflators. This should only beused on numbers expressed in current prices, however.For example, to convert numbers in current Local Currency Units (LCU) tocurrent Canadian Dollars:```pythonimport pydeflateimport pandas as pd# example datadata = {    'iso_code': ['GBR', 'CAN', 'JPN'],    'date': [2011, 2015, 2015],    'value': [100, 100, 100]}# create an example dataframe, in current local currency unitsdf = pd.DataFrame.from_dict(data)# convert to USD 2018 constant pricesdf_can = pydeflate.exchange(    df=df,    source_currency=&quot;LCU&quot;,  # since data is in LCU    target_currency=&quot;CAN&quot;,  # to get data in Canadian Dollars    rates_source='imf',     value_column='value',    target_column='value_CAN',    id_column=&quot;iso_code&quot;,    id_type=&quot;ISO3&quot;,    date_column=&quot;date&quot;,)```### CreditsThis package relies on data from the following sources:- OECD DAC: &lt;https://www.oecd.org/dac/&gt; (Official Development  assistance data (DAC1), DAC deflators, and exchange rates used by  the DAC)- IMF World Economic Outlook:  &lt;https://www.imf.org/en/Publications/WEO&gt; (GDP and price deflators)- World Bank DataBank: &lt;https://databank.worldbank.org/home.aspx&gt;  (exchange rates, GDP and price deflators)This data is provided based on the terms and conditions set by theoriginal sources.</longdescription>
</pkgmetadata>