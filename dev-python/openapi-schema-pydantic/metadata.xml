<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># openapi-schema-pydantic[![PyPI](https://img.shields.io/pypi/v/openapi-schema-pydantic)](https://pypi.org/project/openapi-schema-pydantic/)[![PyPI - License](https://img.shields.io/pypi/l/openapi-schema-pydantic)](https://github.com/kuimono/openapi-schema-pydantic/blob/master/LICENSE)OpenAPI (v3) specification schema as [Pydantic](https://github.com/samuelcolvin/pydantic) classes.The naming of the classes follows the schema in [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#schema).## Installation`pip install openapi-schema-pydantic`## Try me```pythonfrom openapi_schema_pydantic import OpenAPI, Info, PathItem, Operation, Response# Construct OpenAPI by pydantic objectsopen_api = OpenAPI(    info=Info(        title=&quot;My own API&quot;,        version=&quot;v0.0.1&quot;,    ),    paths={        &quot;/ping&quot;: PathItem(            get=Operation(                responses={                    &quot;200&quot;: Response(                        description=&quot;pong&quot;                    )                }            )        )    },)print(open_api.json(by_alias=True, exclude_none=True, indent=2))```Result:```json{  &quot;openapi&quot;: &quot;3.1.0&quot;,  &quot;info&quot;: {    &quot;title&quot;: &quot;My own API&quot;,    &quot;version&quot;: &quot;v0.0.1&quot;  },  &quot;servers&quot;: [    {      &quot;url&quot;: &quot;/&quot;    }  ],  &quot;paths&quot;: {    &quot;/ping&quot;: {      &quot;get&quot;: {        &quot;responses&quot;: {          &quot;200&quot;: {            &quot;description&quot;: &quot;pong&quot;          }        },        &quot;deprecated&quot;: false      }    }  }}```## Take advantage of PydanticPydantic is a great tool, allow you to use object / dict / mixed data for for input.The following examples give the same OpenAPI result as above:```pythonfrom openapi_schema_pydantic import OpenAPI, PathItem, Response# Construct OpenAPI from dictopen_api = OpenAPI.parse_obj({    &quot;info&quot;: {&quot;title&quot;: &quot;My own API&quot;, &quot;version&quot;: &quot;v0.0.1&quot;},    &quot;paths&quot;: {        &quot;/ping&quot;: {            &quot;get&quot;: {&quot;responses&quot;: {&quot;200&quot;: {&quot;description&quot;: &quot;pong&quot;}}}        }    },})# Construct OpenAPI with mix of dict/objectopen_api = OpenAPI.parse_obj({    &quot;info&quot;: {&quot;title&quot;: &quot;My own API&quot;, &quot;version&quot;: &quot;v0.0.1&quot;},    &quot;paths&quot;: {        &quot;/ping&quot;: PathItem(            get={&quot;responses&quot;: {&quot;200&quot;: Response(description=&quot;pong&quot;)}}        )    },})```## Use Pydantic classes as schema- The [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject)  in OpenAPI has definitions and tweaks in JSON Schema, which is hard to comprehend and define a good data class- Pydantic already has a good way to [create JSON schema](https://pydantic-docs.helpmanual.io/usage/schema/),  let's not re-invent the wheel  The approach to deal with this:1. Use `PydanticSchema` objects to represent the `Schema` in `OpenAPI` object2. Invoke `construct_open_api_with_schema_class` to resolve the JSON schemas and references```pythonfrom pydantic import BaseModel, Fieldfrom openapi_schema_pydantic import OpenAPIfrom openapi_schema_pydantic.util import PydanticSchema, construct_open_api_with_schema_classdef construct_base_open_api() -&gt; OpenAPI:    return OpenAPI.parse_obj({        &quot;info&quot;: {&quot;title&quot;: &quot;My own API&quot;, &quot;version&quot;: &quot;v0.0.1&quot;},        &quot;paths&quot;: {            &quot;/ping&quot;: {                &quot;post&quot;: {                    &quot;requestBody&quot;: {&quot;content&quot;: {&quot;application/json&quot;: {                        &quot;schema&quot;: PydanticSchema(schema_class=PingRequest)                    }}},                    &quot;responses&quot;: {&quot;200&quot;: {                        &quot;description&quot;: &quot;pong&quot;,                        &quot;content&quot;: {&quot;application/json&quot;: {                            &quot;schema&quot;: PydanticSchema(schema_class=PingResponse)                        }},                    }},                }            }        },    })class PingRequest(BaseModel):    &quot;&quot;&quot;Ping Request&quot;&quot;&quot;    req_foo: str = Field(description=&quot;foo value of the request&quot;)    req_bar: str = Field(description=&quot;bar value of the request&quot;)class PingResponse(BaseModel):    &quot;&quot;&quot;Ping response&quot;&quot;&quot;    resp_foo: str = Field(description=&quot;foo value of the response&quot;)    resp_bar: str = Field(description=&quot;bar value of the response&quot;)open_api = construct_base_open_api()open_api = construct_open_api_with_schema_class(open_api)# print the result openapi.jsonprint(open_api.json(by_alias=True, exclude_none=True, indent=2))```Result:```json{  &quot;openapi&quot;: &quot;3.1.0&quot;,  &quot;info&quot;: {    &quot;title&quot;: &quot;My own API&quot;,    &quot;version&quot;: &quot;v0.0.1&quot;  },  &quot;servers&quot;: [    {      &quot;url&quot;: &quot;/&quot;    }  ],  &quot;paths&quot;: {    &quot;/ping&quot;: {      &quot;post&quot;: {        &quot;requestBody&quot;: {          &quot;content&quot;: {            &quot;application/json&quot;: {              &quot;schema&quot;: {                &quot;$ref&quot;: &quot;#/components/schemas/PingRequest&quot;              }            }          },          &quot;required&quot;: false        },        &quot;responses&quot;: {          &quot;200&quot;: {            &quot;description&quot;: &quot;pong&quot;,            &quot;content&quot;: {              &quot;application/json&quot;: {                &quot;schema&quot;: {                  &quot;$ref&quot;: &quot;#/components/schemas/PingResponse&quot;                }              }            }          }        },        &quot;deprecated&quot;: false      }    }  },  &quot;components&quot;: {    &quot;schemas&quot;: {      &quot;PingRequest&quot;: {        &quot;title&quot;: &quot;PingRequest&quot;,        &quot;required&quot;: [          &quot;req_foo&quot;,          &quot;req_bar&quot;        ],        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {          &quot;req_foo&quot;: {            &quot;title&quot;: &quot;Req Foo&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;foo value of the request&quot;          },          &quot;req_bar&quot;: {            &quot;title&quot;: &quot;Req Bar&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;bar value of the request&quot;          }        },        &quot;description&quot;: &quot;Ping Request&quot;      },      &quot;PingResponse&quot;: {        &quot;title&quot;: &quot;PingResponse&quot;,        &quot;required&quot;: [          &quot;resp_foo&quot;,          &quot;resp_bar&quot;        ],        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {          &quot;resp_foo&quot;: {            &quot;title&quot;: &quot;Resp Foo&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;foo value of the response&quot;          },          &quot;resp_bar&quot;: {            &quot;title&quot;: &quot;Resp Bar&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;bar value of the response&quot;          }        },        &quot;description&quot;: &quot;Ping response&quot;      }    }  }}```## Notes### Use of OpenAPI.json() / OpenAPI.dict()When using `OpenAPI.json()` / `OpenAPI.dict()` function,arguments `by_alias=True, exclude_none=True` has to be in place.Otherwise the result json will not fit the OpenAPI standard.```python# OKopen_api.json(by_alias=True, exclude_none=True, indent=2)# Not goodopen_api.json(indent=2)```More info about field alias:| OpenAPI version | Field alias info || --------------- | ---------------- || 3.1.0 | [here](https://github.com/kuimono/openapi-schema-pydantic/blob/master/openapi_schema_pydantic/v3/v3_1_0/README.md#alias) || 3.0.3 | [here](https://github.com/kuimono/openapi-schema-pydantic/blob/master/openapi_schema_pydantic/v3/v3_0_3/README.md#alias) |### Non-pydantic schema typesSome schema types are not implemented as pydantic classes.Please refer to the following for more info:| OpenAPI version | Non-pydantic schema type info || --------------- | ----------------------------- || 3.1.0 | [here](https://github.com/kuimono/openapi-schema-pydantic/blob/master/openapi_schema_pydantic/v3/v3_1_0/README.md#non-pydantic-schema-types) || 3.0.3 | [here](https://github.com/kuimono/openapi-schema-pydantic/blob/master/openapi_schema_pydantic/v3/v3_0_3/README.md#non-pydantic-schema-types) |### Use OpenAPI 3.0.3 instead of 3.1.0Some UI renderings (e.g. Swagger) still do not support OpenAPI 3.1.0.It is allowed to use the old 3.0.3 version by importing from different paths:```pythonfrom openapi_schema_pydantic.v3.v3_0_3 import OpenAPI, ...from openapi_schema_pydantic.v3.v3_0_3.util import PydanticSchema, construct_open_api_with_schema_class```## License[MIT License](https://github.com/kuimono/openapi-schema-pydantic/blob/master/LICENSE)</longdescription>
</pkgmetadata>