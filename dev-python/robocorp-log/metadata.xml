<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># robocorp-log`robocorp-log` is a library which provides comprehensible logging for python with a focus on python automation, where detailed information on what happened and why afailure occurs is of vital importance.&gt; Note: The current version (1.0.0) is now in beta. Semantic versioning is used in the project.&gt; Note: Please note that the format of the log is not a part of the API and should &gt; not be relied upon as it can change even among minor versions.## WhyAlthough the python logging is flexible it may be hard to analyze the logging afterwards andvisually analyze it. Also, the format may end up using a big amount of disk spaceand it may be tedious to add logging calls to all places of interest.## How`robocorp-log` improves those aspects by using a structured format which enables using less disk spacewhile also providing a viewer (`log.html`) for the generated content.Also, it provides utilities to setup logging so that logging is done automatically without havingto explicitly add calls to add content to the logging (although it's still possible to do sowhen needed).### InstallationInstall with:`pip install robocorp-log`### UsageIt's recommended that `robocorp-log` is used through `robocorp-tasks` as `robocorp-tasks` will configure `robocorp-log` in a streamlined way,where you just need to worry about marking the entry point method with a `@tasks`decorator and it'll automatically setup the auto-logging and provide thelog result in `output/log.html`.`robocorp-tasks` also takes care of customizing `robocorp-log` through `pyproject.toml`.See `robocorp-tasks` for more information.Although the setup is done through `robocorp-tasks`, there are stillsome APIs in `robocorp.log` which are interesting to use such as:- Utility methods to add a log message as `critical`, `warn`, `info`, `exception`  (note that it's possible to embed html by passing `html=True` in those methods,  so, things as screenshots can be directly embedded into the log).  - Supressing logging through `suppress_variables`, `suppress_methods`, `suppress`.- Hiding sensitive data (automatically based on variable or argument names with  names registered in `add_sensitive_variable_name` and `add_sensitive_variable_name_pattern`)  or by passing the value to be hidden to `hide_from_output`.    ### CaveatsThe auto import mode is done by having a pre-import hook which will change the ASTat runtime. This mostly works, but there are a couple of caveats to keep in mind:1. Debuggers may end up stepping into the `robocorp-log` code inmany places even if such code isn't in the source code (you may want to configure the debugger you're using to skip calls into `robocorp.log` as that's usuallyjust an implementation detail).2. The logging needs to be fully setup prior to importing any module that should be automatically logged.3. Working with coroutines (`async`, `await` and `greenlet`) is not supported.## Dealing with sensitive data in the logsBy default `Robocorp Log` will show information for all method calls in usercode as well as some selected libraries automatically.This is very handy but comes with the drawback that some care must be must be taken in order for sensitive data to be kept out of the logs.The most common use cases and APIs are explained below:Usernames and passwords------------------------For usernames and passwords, the preferred approach is that the provider of the sensitive informationasks for the information and requests `Robocorp Log` to keep such information out ofthe logs.The usage for the API is:```pythonfrom robocorp import logwith log.suppress_variables():    pwd = request_password()    log.hide_from_output(pwd)```By calling the `hide_from_output` method, any further occurrence of the `password` contents will beautomatically changed to `&lt;redacted&gt;`.Note that some arguments and variable assigns for some names are automatically redacted.-- by default `password` and `passwd`, but others may be customized through the `robocorp.log.add_sensitive_variable_name` and `add_sensitive_variable_name_pattern`functions.In the example below, the contents of the `${user password}` variable will be automatically added tothe list of strings to be hidden from the output.```pythondef check_handling(user_password):    ...check_handling('the password')```Sensitive data obtained from APIs----------------------------------When handling sensitive data from APIs (such as private user information obtained from an API, as the SSNor medical data) the preferred API is disabling the logging for variables.This can be done with the `robocorp.log.suppress_variables` API (which is usable as a context manager).Example using API:```pythonfrom robocorp import logdef handle_sensitive_info()    with log.suppress_variables():        ...```If even the methods called could be used to compromise some information (or ifthere's too much noise in those calls), it's possibleto completely stop the logging with the `robocorp.log.suppress` API. Note: this may make debugging a failure harder as method calls won't be logged, albeit you may still call `critical / info / warn` to explicitly log something in this case.Example using API:```pythonfrom robocorp import logdef handle_sensitive_info()    with log.suppress():        ...```## Internal structure* [Format specification](https://github.com/robocorp/robo/tree/master/log/docs/format.md)## License: Apache 2.0## Copyright: Robocorp Technologies, Inc.</longdescription>
</pkgmetadata>