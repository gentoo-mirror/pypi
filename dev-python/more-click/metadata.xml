<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># more_click&lt;a href=&quot;https://pypi.org/project/more_click&quot;&gt;    &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/more_click&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/more_click&quot;&gt;    &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/more_click&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/cthoyt/more_click/blob/main/LICENSE&quot;&gt;    &lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/more_click&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://zenodo.org/badge/latestdoi/319609575&quot;&gt;    &lt;img src=&quot;https://zenodo.org/badge/319609575.svg&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt;Extra stuff for click I use in basically every repo## More OptionsThe module `more_click.options` has several options (pre-defined instances of `click.option()`) that I use often. First,`verbose_option` makes it easy to adjust the logger of your package using `-v`.There are also several that are useful for web stuff, including| Name                     | Type | Flag     || ------------------------ | ---- | -------- || `more_click.host_option` | str  | `--host` || `more_click.port_option` | str  | `--port` |## Web ToolsIn many packages, I've included a Flask web application in `wsgi.py`. I usually use the following form inside `cli.py`file to import the web application and keep it insulated from other package-related usages:```python# cli.pyimport clickfrom more_click import host_option, port_option@click.command()@host_option@port_optiondef web(host: str, port: str):    from .wsgi import app  # modify to point to your module-level flask.Flask instance    app.run(host=host, port=port)if __name__ == '__main__':    web()```However, sometimes I want to make it possible to run via `gunicorn` from the CLI, so I would use the followingextensions to automatically determine if it should be run with Flask's development server or gunicorn.```python# cli.pyimport clickfrom more_click import host_option, port_option, with_gunicorn_option, workers_option, run_app@click.command()@host_option@port_option@with_gunicorn_option@workers_optiondef web(host: str, port: str, with_gunicorn: bool, workers: int):    from .wsgi import app  # modify to point to your module-level flask.Flask instance    run_app(app=app, with_gunicorn=with_gunicorn, host=host, port=port, workers=workers)if __name__ == '__main__':    web()```For ultimate lazy mode, I've written a wrapper around the second:```python# cli.pyfrom more_click import make_web_commandweb = make_web_command('my_package_name.wsgi:app')if __name__ == '__main__':    web()```This uses a standard `wsgi`-style string to locate the app, since you don't want to be eagerly importing the app in yourCLI since it might rely on optional dependencies like Flask. If your CLI has other stuff, you can include the webcommand in a group like:```python# cli.pyimport clickfrom more_click import make_web_command@click.group()def main():    &quot;&quot;&quot;My awesome CLI.&quot;&quot;&quot;make_web_command('my_package_name.wsgi:app', group=main)if __name__ == '__main__':    main()```</longdescription>
</pkgmetadata>