<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FlashAttentionThis repository provides the official implementation of FlashAttention andFlashAttention-2 from thefollowing papers.**FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness**  Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, Christopher RÃ©  Paper: https://arxiv.org/abs/2205.14135  IEEE Spectrum [article](https://spectrum.ieee.org/mlperf-rankings-2022) about our submission to the MLPerf 2.0 benchmark using FlashAttention.![FlashAttention](assets/flashattn_banner.jpg)**FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning**  Tri DaoPaper: https://tridao.me/publications/flash2/flash2.pdf![FlashAttention-2](assets/flashattention_logo.png)## UsageWe've been very happy to see FlashAttention being widely adopted in such a shorttime after its release. This [page](https://github.com/Dao-AILab/flash-attention/blob/main/usage.md)contains a partial list of places where FlashAttention is being used.FlashAttention and FlashAttention-2 are free to use and modify (see LICENSE).Please cite and credit FlashAttention if you use it.## Installation and featuresRequirements:- CUDA 11.6 and above.- PyTorch 1.12 and above.- Linux. Might work for Windows starting v2.3.2 (we've seen a few positive [reports](https://github.com/Dao-AILab/flash-attention/issues/595)) but Windows compilation still requires more testing. If you have ideas on how to set up prebuilt CUDA wheels for Windows, please reach out via Github issue.We recommend the[Pytorch](https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch)container from Nvidia, which has all the required tools to install FlashAttention.To install:1. Make sure that PyTorch is installed.2. Make sure that `packaging` is installed (`pip install packaging`)3. Make sure that `ninja` is installed and that it works correctly (e.g. `ninja--version` then `echo $?` should return exit code 0). If not (sometimes `ninja--version` then `echo $?` returns a nonzero exit code), uninstall then reinstall`ninja` (`pip uninstall -y ninja &amp;&amp; pip install ninja`). Without `ninja`,compiling can take a very long time (2h) since it does not use multiple CPUcores. With `ninja` compiling takes 3-5 minutes on a 64-core machine.4. Then:```shpip install flash-attn --no-build-isolation```Alternatively you can compile from source:```shpython setup.py install```If your machine has less than 96GB of RAM and lots of CPU cores, `ninja` mightrun too many parallel compilation jobs that could exhaust the amount of RAM. Tolimit the number of parallel compilation jobs, you can set the environmentvariable `MAX_JOBS`:```shMAX_JOBS=4 pip install flash-attn --no-build-isolation```Interface: `src/flash_attention_interface.py`FlashAttention-2 currently supports:1. Ampere, Ada, or Hopper GPUs (e.g., A100, RTX 3090, RTX 4090, H100). Support for Turing   GPUs (T4, RTX 2080) is coming soon, please use FlashAttention 1.x for Turing   GPUs for now.2. Datatype fp16 and bf16 (bf16 requires Ampere, Ada, or Hopper GPUs).3. All head dimensions up to 256. Head dim &gt; 192 backward requires A100/A800 or H100/H800.## How to use FlashAttentionThe main functions implement scaled dot product attention (softmax(Q @ K^T *softmax_scale) @ V):```pythonfrom flash_attn import flash_attn_qkvpacked_func, flash_attn_func``````pythonflash_attn_qkvpacked_func(qkv, dropout_p=0.0, softmax_scale=None, causal=False, window_size=(-1, -1)):&quot;&quot;&quot;dropout_p should be set to 0.0 during evaluationIf Q, K, V are already stacked into 1 tensor, this function will be faster thancalling flash_attn_func on Q, K, V since the backward pass avoids explicit concatenationof the gradients of Q, K, V.If window_size != (-1, -1), implements sliding window local attention. Query at position iwill only attend to keys between [i - window_size[0], i + window_size[1]] inclusive.Arguments:    qkv: (batch_size, seqlen, 3, nheads, headdim)    dropout_p: float. Dropout probability.    softmax_scale: float. The scaling of QK^T before applying softmax.        Default to 1 / sqrt(headdim).    causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).    window_size: (left, right). If not (-1, -1), implements sliding window local attention.Return:    out: (batch_size, seqlen, nheads, headdim).&quot;&quot;&quot;``````pythonflash_attn_func(q, k, v, dropout_p=0.0, softmax_scale=None, causal=False, window_size=(-1, -1)):&quot;&quot;&quot;dropout_p should be set to 0.0 during evaluationSupports multi-query and grouped-query attention (MQA/GQA) by passing in KV with fewer headsthan Q. Note that the number of heads in Q must be divisible by the number of heads in KV.For example, if Q has 6 heads and K, V have 2 heads, head 0, 1, 2 of Q will attention to head0 of K, V, and head 3, 4, 5 of Q will attention to head 1 of K, V.If window_size != (-1, -1), implements sliding window local attention. Query at position iwill only attend to keys between[i + seqlen_k - seqlen_q - window_size[0], i + seqlen_k - seqlen_q + window_size[1]] inclusive.Arguments:    q: (batch_size, seqlen, nheads, headdim)    k: (batch_size, seqlen, nheads_k, headdim)    v: (batch_size, seqlen, nheads_k, headdim)    dropout_p: float. Dropout probability.    softmax_scale: float. The scaling of QK^T before applying softmax.        Default to 1 / sqrt(headdim).    causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).    window_size: (left, right). If not (-1, -1), implements sliding window local attention.Return:    out: (batch_size, seqlen, nheads, headdim).&quot;&quot;&quot;``````pythondef flash_attn_with_kvcache(    q,    k_cache,    v_cache,    k=None,    v=None,    rotary_cos=None,    rotary_sin=None,    cache_seqlens: Optional[Union[(int, torch.Tensor)]] = None,    cache_batch_idx: Optional[torch.Tensor] = None,    softmax_scale=None,    causal=False,    window_size=(-1, -1),  # -1 means infinite context window    rotary_interleaved=True,):    &quot;&quot;&quot;    If k and v are not None, k_cache and v_cache will be updated *inplace* with the new values from    k and v. This is useful for incremental decoding: you can pass in the cached keys/values from    the previous step, and update them with the new keys/values from the current step, and do    attention with the updated cache, all in 1 kernel.    Also apply rotary embedding if rotary_cos and rotary_sin are passed in. The key @k will be    rotated by rotary_cos and rotary_sin at indices cache_seqlens, cache_seqlens + 1, etc.    If causal or local (i.e., window_size != (-1, -1)), the query @q will be rotated by rotary_cos    and rotary_sin at indices cache_seqlens, cache_seqlens + 1, etc.    If not causal and not local, the query @q will be rotated by rotary_cos and rotary_sin at    indices cache_seqlens only (i.e. we consider all tokens in @q to be at position cache_seqlens).    See tests/test_flash_attn.py::test_flash_attn_kvcache for examples of how to use this function.    Note: Does not support backward pass.    Arguments:        q: (batch_size, seqlen, nheads, headdim)        k_cache: (batch_size_cache, seqlen_cache, nheads_k, headdim)        v_cache: (batch_size_cache, seqlen_cache, nheads_k, headdim)        k [optional]: (batch_size, seqlen_new, nheads_k, headdim). If not None, we concatenate            k with k_cache, starting at the indices specified by cache_seqlens.        v [optional]: (batch_size, seqlen_new, nheads_k, headdim). Similar to k.        rotary_cos [optional]: (seqlen_ro, rotary_dim / 2). If not None, we apply rotary embedding            to k and q. Only applicable if k and v are passed in. rotary_dim must be divisible by 16.        rotary_sin [optional]: (seqlen_ro, rotary_dim / 2). Similar to rotary_cos.        cache_seqlens: int, or (batch_size,), dtype torch.int32. The sequence lengths of the            KV cache.        cache_batch_idx: (batch_size,), dtype torch.int32. The indices used to index into the KV cache.            If None, we assume that the batch indices are [0, 1, 2, ..., batch_size - 1].            If the indices are not distinct, and k and v are provided, the values updated in the cache                 might come from any of the duplicate indices.        softmax_scale: float. The scaling of QK^T before applying softmax.            Default to 1 / sqrt(headdim).        causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).        window_size: (left, right). If not (-1, -1), implements sliding window local attention.        rotary_interleaved: bool. Only applicable if rotary_cos and rotary_sin are passed in.            If True, rotary embedding will combine dimensions 0 &amp; 1, 2 &amp; 3, etc. If False,            rotary embedding will combine dimensions 0 &amp; rotary_dim / 2, 1 &amp; rotary_dim / 2 + 1            (i.e. GPT-NeoX style).        num_splits: int. If &gt; 1, split the key/value into this many chunks along the sequence.           If num_splits == 1, we don't split the key/value. If num_splits == 0, we use a heuristic           to automatically determine the number of splits.           Don't change this unless you know what you are doing.    Return:        out: (batch_size, seqlen, nheads, headdim).    &quot;&quot;&quot;```To see how these functions are used in a multi-head attention layer (whichincludes QKV projection, output projection), see the MHA [implementation](https://github.com/Dao-AILab/flash-attention/blob/main/flash_attn/modules/mha.py).## Changelog### 2.0: Complete rewrite, 2x fasterUpgrading from FlashAttention (1.x) to FlashAttention-2These functions have been renamed:- `flash_attn_unpadded_func` -&gt; `flash_attn_varlen_func`- `flash_attn_unpadded_qkvpacked_func` -&gt; `flash_attn_varlen_qkvpacked_func`- `flash_attn_unpadded_kvpacked_func` -&gt; `flash_attn_varlen_kvpacked_func`If the inputs have the same sequence lengths in the same batch, it is simplerand faster to use these functions:```pythonflash_attn_qkvpacked_func(qkv, dropout_p=0.0, softmax_scale=None, causal=False)``````pythonflash_attn_func(q, k, v, dropout_p=0.0, softmax_scale=None, causal=False)```### 2.1: Change behavior of causal flagIf seqlen_q != seqlen_k and causal=True, the causal mask is aligned to thebottom right corner of the attention matrix, instead of the top-left corner.For example, if seqlen_q = 2 and seqlen_k = 5, the causal mask (1 = keep, 0 =masked out) is:  v2.0:      1 0 0 0 0      1 1 0 0 0  v2.1:      1 1 1 1 0      1 1 1 1 1  If seqlen_q = 5 and seqlen_k = 2, the causal mask is:  v2.0:      1 0      1 1      1 1      1 1      1 1  v2.1:      0 0      0 0      0 0      1 0      1 1  If the row of the mask is all zero, the output will be zero.### 2.2: Optimize for inferenceOptimize for inference (iterative decoding) when query has very small sequencelength (e.g., query sequence length = 1). The bottleneck here is to load KVcache as fast as possible, and we split the loading across different threadblocks, with a separate kernel to combine results.See the function `flash_attn_with_kvcache` with more features for inference(perform rotary embedding, updating KV cache inplace).Thanks to the xformers team, and in particular Daniel Haziza, for thiscollaboration.### 2.3: Local (i.e., sliding window) attentionImplement sliding window attention (i.e., local attention). Thanks to [MistralAI](https://mistral.ai/) and in particular TimothÃ©e Lacroix for thiscontribution. Sliding window was used in the [Mistral 7B](https://mistral.ai/news/announcing-mistral-7b/) model.## PerformanceWe present expected speedup (combined forward + backward pass) and memory savings from using FlashAttention against PyTorch standard attention, depending on sequence length, on different GPUs (speedup depends on memory bandwidth - we see more speedup on slower GPU memory).We currently have benchmarks for these GPUs:* [A100](#a100)* [H100](#h100)&lt;!-- * [RTX 3090](#rtx-3090) --&gt;&lt;!-- * [T4](#t4) --&gt;### A100We display FlashAttention speedup using these parameters:* Head dimension 64 or 128, hidden dimension 2048 (i.e. either 32 or 16 heads).* Sequence length 512, 1k, 2k, 4k, 8k, 16k.* Batch size set to 16k / seqlen.#### Speedup![FlashAttention speedup on A100 80GB SXM5 with FP16/BF16](assets/flash2_a100_fwd_bwd_benchmark.png)#### Memory![FlashAttention memory](assets/flashattn_memory.jpg)We show memory savings in this graph (note that memory footprint is the same no matter if you use dropout or masking).Memory savings are proportional to sequence length -- since standard attention has memory quadratic in sequence length, whereas FlashAttention has memory linear in sequence length.We see 10X memory savings at sequence length 2K, and 20X at 4K.As a result, FlashAttention can scale to much longer sequence lengths.### H100![FlashAttention speedup on H100 SXM5 with FP16/BF16](assets/flash2_h100_fwd_bwd_benchmark.png)## Full model code and training scriptWe have released the full GPT model[implementation](https://github.com/Dao-AILab/flash-attention/blob/main/flash_attn/models/gpt.py).We also provide optimized implementations of other layers (e.g., MLP, LayerNorm,cross-entropy loss, rotary embedding). Overall this speeds up training by 3-5xcompared to the baseline implementation from Huggingface, reaching up to 225TFLOPs/sec per A100, equivalent to 72% model FLOPs utilization (we don't needany activation checkpointing).We also include a training[script](https://github.com/Dao-AILab/flash-attention/tree/main/training) totrain GPT2 on Openwebtext and GPT3 on The Pile.## Triton implementation of FlashAttentionPhil Tillet (OpenAI) has an experimental implementation of FlashAttention in Triton:https://github.com/openai/triton/blob/master/python/tutorials/06-fused-attention.pyAs Triton is a higher-level language than CUDA, it might be easier to understandand experiment with. The notations in the Triton implementation are also closerto what's used in our paper.We also have an experimental implementation in Triton that support attentionbias (e.g. ALiBi):https://github.com/Dao-AILab/flash-attention/blob/main/flash_attn/flash_attn_triton.py## TestsWe test that FlashAttention produces the same output and gradient as a referenceimplementation, up to some numerical tolerance. In particular, we check that themaximum numerical error of FlashAttention is at most twice the numerical errorof a baseline implementation in Pytorch (for different head dimensions, inputdtype, sequence length, causal / non-causal).To run the tests:```shpytest -q -s tests/test_flash_attn.py```## When you encounter issuesThis new release of FlashAttention-2 has been tested on several GPT-stylemodels, mostly on A100 GPUs.If you encounter bugs, please open a GitHub Issue!## CitationIf you use this codebase, or otherwise found our work valuable, please cite:```@inproceedings{dao2022flashattention,  title={Flash{A}ttention: Fast and Memory-Efficient Exact Attention with {IO}-Awareness},  author={Dao, Tri and Fu, Daniel Y. and Ermon, Stefano and Rudra, Atri and R{\'e}, Christopher},  booktitle={Advances in Neural Information Processing Systems},  year={2022}}@article{dao2023flashattention2,  title={Flash{A}ttention-2: Faster Attention with Better Parallelism and Work Partitioning},  author={Dao, Tri},  year={2023}}```</longdescription>
</pkgmetadata>