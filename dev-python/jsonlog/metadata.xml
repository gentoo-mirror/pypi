<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>jsonlog=======A drop-in formatter for Python's `logging` module that outputs messages as linedelimited JSON.While `jsonlog` provides it's own `basicConfig` method so you can get startedquickly, all of it's features and classes can be used with the `logging` module.Usage-----You can use `jsonlog` as a drop-in replacement for `logging`:```pythonimport jsonlogjsonlog.warning(&quot;Hello world.&quot;)``````json{&quot;timestamp&quot;: &quot;2019-06-21T19:06:25.285730&quot;, &quot;level&quot;: &quot;WARNING&quot;, &quot;name&quot;: &quot;root&quot;, &quot;message&quot;: &quot;Hello world.&quot;}```It's implemented as a log formatter, so you can use `logging` just like younormally would.```pythonimport jsonlogimport loggingjsonlog.basicConfig(level=jsonlog.INFO)jsonlog.warning(&quot;Works with functions in the jsonlog module.&quot;)logging.warning(&quot;And works with functions in the logging module.&quot;)```### Configuration using `jsonlog.basicConfig`The `jsonlog.basicConfig` function accepts slightly different parameters to`logging.basicConfig`. It's shown here with the defaults for each parameter.The `filename`, `filemode` and `stream` parameters work the same way as theirequivalents in `logging.basicConfig`, and as such `filename` and `stream` areexclusive.```pythonimport jsonlogjsonlog.basicConfig(    level=jsonlog.INFO,    indent=None,    keys=(&quot;timestamp&quot;, &quot;level&quot;, &quot;message&quot;),    timespec=&quot;auto&quot;,    # filename=None,    # filemode=&quot;a&quot;,    # stream=None,)```### Configuration using `logging.config.dictConfig`Any of the configuration methods in `logging.config` can be used to configure ahandler that uses `jsonlog.formmatters.JSONFormatter` to format records as JSON.```pythonimport logging.configlogging.config.dictConfig(    {        &quot;version&quot;: 1,        &quot;formatters&quot;: {&quot;json&quot;: {&quot;()&quot;: &quot;jsonlog.JSONFormatter&quot;}},        &quot;handlers&quot;: {&quot;stream&quot;: {&quot;class&quot;: &quot;logging.StreamHandler&quot;, &quot;formatter&quot;: &quot;json&quot;}},        &quot;loggers&quot;: {&quot;&quot;: {&quot;handlers&quot;: [&quot;stream&quot;]}},    })```### Adding extra attributes to JSON outputRecord attributes provided with `extra=` will be included in the JSON object.```pythonimport jsonlogimport loggingjsonlog.basicConfig()logging.warning(&quot;User clicked a button&quot;, extra={&quot;user&quot;: 123})``````json{&quot;timestamp&quot;: &quot;2019-06-21T19:06:54.293929&quot;, &quot;level&quot;: &quot;WARNING&quot;, &quot;name&quot;: &quot;root&quot;, &quot;message&quot;: &quot;User clicked a button&quot;, &quot;user&quot;: 123}```If a mapping is passed as the only positional argument, attributes from themapping will also be included.```pythonimport jsonlogimport loggingjsonlog.basicConfig()logging.warning(&quot;User clicked a button&quot;, {&quot;user&quot;: 123})```### PipeliningTry piping logs through [jq] if you want to read them on the command line!```bashpython examples/hello.py 2&gt; &gt;(jq .)``````json{  &quot;timestamp&quot;: &quot;2019-06-21T19:07:43.211782&quot;,  &quot;level&quot;: &quot;WARNING&quot;,  &quot;name&quot;: &quot;root&quot;,  &quot;message&quot;: &quot;Hello world.&quot;}```### TracebacksTracebacks are included as a single string - it's not very nice to read, butmeans it'll play nicely with any systems that read the JSON logs you output.```json{&quot;timestamp&quot;: &quot;2019-06-21T19:08:37.326897&quot;, &quot;level&quot;: &quot;ERROR&quot;, &quot;name&quot;: &quot;root&quot;, &quot;message&quot;: &quot;Encountered an error&quot;, &quot;traceback&quot;: &quot;Traceback (most recent call last):\n  File \&quot;examples/error.py\&quot;, line 6, in &lt;module&gt;\n    raise ValueError(\&quot;Example exception\&quot;)\nValueError: Example exception&quot;}```Tools like [jq] make it easy to extract and read the traceback:```bashpython examples/error.py 2&gt; &gt;(jq -r &quot;.traceback&quot;)``````Traceback (most recent call last):  File &quot;examples/error.py&quot;, line 6, in &lt;module&gt;    raise ValueError(&quot;Example exception&quot;)ValueError: Example exception```Compatibility-------------`jsonlog` is written for Python 3.7 and above. Compatibility patches will beaccepted for Python 3.5 and above, but patches for Python 2 will be rejected.To use `jsonlog` on Python 3.6 you will need to install the `dataclasses`package alongside it. This isn't a dependency as it breaks the builtin`dataclasses` module when installed on Python 3.7 and above.References----------* Build for use with the [logging] module.* Partially based on [colorlog].* Works great with [jq]!Authors-------* [Sam Clements][colorlog]: https://gitlab.com/borntyping/colorlog[jq]: https://stedolan.github.io/jq/[logging]: https://docs.python.org/3/library/logging.html[Sam Clements]: https://gitlab.com/borntyping</longdescription>
</pkgmetadata>