<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**************Statsd Metrics**************.. image:: https://travis-ci.org/farzadghanei/statsd-metrics.svg?branch=master    :target: https://travis-ci.org/farzadghanei/statsd-metrics.. image:: https://ci.appveyor.com/api/projects/status/bekwcg8n1xe0w0n9/branch/master?svg=true    :target: https://ci.appveyor.com/project/farzadghanei/statsd-metrics?branch=masterMetric classes for Statsd, and Statsd clients (each metric in a single request, or send batch requests).Metric classes represent the data used in Statsd protocol excluding the IO, to create,represent and parse Statsd requests. So any Statsd server and client regardless of theIO implementation can use them to send/receive Statsd requests.The library also comes with a rich set of Statsd clients using the same metric classes, andPython standard library socket module.Metric Classes--------------* Counter* Timer* Gauge* Set* GaugeDelta.. code-block:: python    from statsdmetrics import Counter, Timer    counter = Counter('event.login', 1, 0.2)    counter.to_request() # returns event.login:1|c|@0.2    timer = Timer('db.search.username', 27.4)    timer.to_request() # returns db.search.username:27.4|msParse metrics from a Statsd request.. code-block:: python    from statsdmetrics import parse_metric_from_request    event_login = parse_metric_from_request('event.login:1|c|@.2')    # event_login is a Counter object with count = 1 and sample_rate = 0.2    mem_usage = parse_metric_from_request('resource.memory:2048|g')    # mem_usage is a Gauge object with value = 2028Statsd Clients--------------* ``client.Client``: Default client, sends request on each call using UDP* ``client.BatchClient``: Buffers metrics and flushes them in batch requests using UDP* ``client.tcp.TCPClient``: Sends request on each call using TCP* ``client.tcp.TCPBatchClient``: Buffers metrics and flushes them in batch requests using TCPSend Statsd requests.. code-block:: python    from statsdmetrics.client import Client    # default client, send metrics over UDP    client = Client(&quot;stats.example.org&quot;)    client.increment(&quot;login&quot;)    client.decrement(&quot;connections&quot;, 2)    client.timing(&quot;db.search.username&quot;, 3500)    client.gauge(&quot;memory&quot;, 20480)    client.gauge_delta(&quot;memory&quot;, -256)    client.set(&quot;unique.ip_address&quot;, &quot;10.10.10.1&quot;)    # helpers for timing operations    chronometer = client.chronometer()    chronometer.time_callable(&quot;func1_duration&quot;, func1)    # decorate functions to send timing metrics for the duration of their running time    @chronometer.wrap(&quot;func2_duration&quot;)    def func2():        pass    # send timing for duration of a with block    with client.stopwatch(&quot;with_block_duration&quot;):        passSending multiple metrics in batch requests by ``BatchClient``, eitherby using an available client as the context manager:.. code-block:: python    from statsdmetrics.client import Client    client = Client(&quot;stats.example.org&quot;)    with client.batch_client() as batch_client:        batch_client.increment(&quot;login&quot;)        batch_client.decrement(&quot;connections&quot;, 2)        batch_client.timing(&quot;db.search.username&quot;, 3500)    # now all metrics are flushed automatically in batch requestsor by creating a ``BatchClient`` object explicitly:.. code-block:: python    from statsdmetrics.client import BatchClient    client = BatchClient(&quot;stats.example.org&quot;)    client.set(&quot;unique.ip_address&quot;, &quot;10.10.10.1&quot;)    client.gauge(&quot;memory&quot;, 20480)    client.flush() # sends one UDP packet to remote server, carrying both metrics    # timing helpers are available on all clients    chronometer = client.chronometer()    chronometer.time_callable(&quot;func1_duration&quot;, func1)    @chronometer.wrap(&quot;func2_duration&quot;)    def func2():        pass    with client.stopwatch(&quot;with_block_duration&quot;):        pass    client.flush()Installation------------.. code-block:: bash    $ pip install statsdmetricsThe only dependencies are Python 2.7+ and setuptools.CPython 2.7, 3.4+, 3.7-dev, PyPy, and Jython 2.7 are tested)However on development (and test) environment`pytest &lt;https://pypi.org/project/pytest/&gt;`_, `mock &lt;https://pypi.org/project/mock&gt;`_ is required (for Python 2),`typing &lt;https://pypi.org/project/typing&gt;`_ is recommended... code-block:: bash    # on dev/test env    $ pip install -r requirements-dev.txtDevelopment-----------* Code is on `GitHub &lt;https://github.com/farzadghanei/statsd-metrics&gt;`_* Documentations are on `Read The Docs &lt;https://statsd-metrics.readthedocs.org&gt;`_Tests^^^^^`Tox &lt;https://pypi.org/project/tox/&gt;`_ is most convenient to run tests with since it handles creation of virtualenvs.. code-block:: bash    $ toxWhen development dependencies are installed (preferably with a virtual environment),tests can be run by calling `pytest`... code-block:: bash    $ pytestIntegration tests are available as part of the test suite, bringing up dummy servers (but actually listening onnetwork socket) to capture requests instead of processing them. Then send some metrics andassert if the captured requests match the expected.License-------Statsd metrics is released under the terms of the`MIT license &lt;http://opensource.org/licenses/MIT&gt;`_.The MIT License (MIT)Copyright (c) 2015-2018 Farzad GhaneiPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>