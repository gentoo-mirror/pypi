<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GNSS processing engine benchmarking data setThis repository contains several datasets to compute the performance of aGNSS processing engine. This repository has been developed to help RokubunJason users to assess the expected performance of the platform. However, theorchestrator can be also used to test your own engine.The repository includes also a tool to run the complete pipeline. Pandoc and textlive packages are required. To do that, simply use these commands:```bashapt-get updateapt-get install -y pandoc texlivepip install gnss-benchmarkgnss_benchmark make_report```This tool will take a while to process (ca. 5 minutes), and after that a PDFreport should have been generated.Note that if you do not have LaTEX installed in your system you may not be ableto generate the report in PDF. In this case, you can try other formats such asLibreOffice ODT. To do that type```bashgnss_benchmark make_report --filename report.odt```Use the help of the tool to get more information```bashgnss_benchmark -h```## Running and developing in a containerTo make sure you have all necessary components in the system, you can workusing Docker containers (recommended).The first step would be to build the container ```bashdocker build -t gnss-benchmark .``````bash# Usage with docker rundocker run -v `pwd`:/gnss_benchmark -w /gnss_benchmark -ti gnss-benchmark bash# Development with Jupyterdocker run --env-file .env -v `pwd`:/data -w /data -p 8888:8888 -ti gnss-benchmark jupyter notebook# Usage with docker compose (recommended)docker-compose -f docker-compose.yml builddocker-compose -f docker-compose.yml run gnss_benchmark bashpython setup.py installgnss_benchmark make_report -l DEBUG```When using `docker-compose` remember to place your Jason credentials in an`.env` file with these contents:```bashJASON_API_KEY=&lt;api key&gt;JASON_SECRET_TOKEN=&lt;your secret token&gt;```Although probably not used for the end user, just for debugging purposes, in the event that you have a local instance of the Jason service running in your facilities, you can set the Jason entry point by defining the `JASON_API_URL` environment variable (along with its corresponding credentials).As an example:```bashJASON_API_URL=http://192.168.1.54:10000/apiJASON_API_KEY=&lt;api key&gt;JASON_SECRET_TOKEN=&lt;your secret token&gt;```## Using custom processing engineBy default, the tool comes bundled with [Rokubun Jason's processing engine](https://jason.rokubun.cat), but the user can specify its own processing engine. Thiscannot be done with the command line tool: a custom Python code will have tobe made using the `gnss_benchmark` module. In this module, there is a packagenamed `jason` with an example of `processing_engine` that the user can followto define other processing engines.</longdescription>
</pkgmetadata>