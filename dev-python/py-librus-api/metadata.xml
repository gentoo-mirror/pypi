<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Dokumentacja w języku polskim jest [tutaj.](README_pl.md)# py-librus-api# Table of contents1. [Intro](#intro)2. [Instalation](#instalation)3. [Exmaple usage](#example-usage)4. [Functions](#functions)# IntroAPI for librus e-register.&lt;br&gt;There is no guarantee of developing this API further more!# InstalationSomeday...# Example usage```pythonfrom py_librus_api import Libruslibrus = Librus()&quot;&quot;&quot;Loops until user logs in successfully&quot;&quot;&quot;while not librus.logged_in:    if not librus.login(login, password):        print(&quot;Log in failed! Check your username and/or password!&quot;)    else:        print(&quot;Logged in successfully!&quot;)# Your code goes here```More info in [functions](#functions)# Functions**Required params/functions are marked with `!` prefix.**&lt;br&gt;**`*` means that there is explanation below or something is optional.**## !login(!login, !password)Function returns `true` if logging in was successful and `false` when not.&lt;br&gt;`login` - Variable that contains user login. &lt;br&gt;`password` - Variable that contains user password.&lt;br&gt;Example usage:```pythonlibrus.login(login_var, password_var)```## You can check if user is logged in!```pythonif librus.logged_in:    ...```## If user is not logged in, &quot;User not logged in&quot; exception will be raised!## If connection error occurs, &quot;Connection error&quot; will be raised!## get_lucky_number()Returns lucky number (`int`).## get_grades()**For displaying grades in the console, it is recommended to use pretty-print (pprint)!**Returns all user grades in this foramt:&lt;br&gt;```grades = {  &quot;Biologia&quot;: [    {      &quot;Grade&quot;: &quot;5&quot;,      &quot;Weight&quot;: &quot;3&quot;,      &quot;Category&quot;: &quot;Kartkówka&quot;,      'Teacher': {'FirstName': 'Jan', 'LastName': 'Kowalski'},      &quot;Comment&quot;: &quot;kartkówka z działu o płazach&quot;,      &quot;To_the_average&quot;: &quot;Tak&quot;    }    ...  ]  ...}```**Note that subject names are in language provided by Librus API (in this example it's polish)**## get_teachers(mode*)Returns teachers' personal data (firstname, lastname) in couple of formats.You can choose format like that:```pythonlibrus.get_teachers(mode=&quot;print&quot;) # etc.```### List of formats:#### normal (default)```{  1123576: {'FirstName': 'Jan', 'LastName': 'Kowalski'},  1983456: {'FirstName': 'Grażyna', 'LastName': 'Kowalska'},  ...}```#### fullname```[  &quot;Jan Kowalski&quot;,  &quot;Grażyna Kowalska&quot;,  ...]```#### fullname-id```[  '1476937: Jan Kowalski',  '1484010: Grazyna Kowalska',  ... ]```## get_school_free_days()Returns a list of days free from school.Format:```[    {'DateFrom': '2019-01-01', 'DateTo': '2019-01-01', 'Name': 'Nowy Rok'},    ...]```## get_teacher_free_days()Returns a list of teachers' absence.Format:```[    {        'DateFrom': '2018-10-24',        'DateTo': '2018-10-26',        'Teacher': {'FirstName': 'Jan', 'LastName': 'Kowalski'},        'TimeFrom': '13:40:00',        'TimeTo': '15:15:00',        'Type': 'szkolenie'    },]```**It can happen that `TimeFrom` and `TimeTo` won't exist!**## get_attendances()Returns attendances in this format:```[{'AddDate': '2018-10-29 12:52:51',  'AddedBy': {'FirstName': 'Jan', 'LastName': 'Kowalski'},  'Date': '2018-10-29',  'Id': 123456, 'Lesson': {'Subject': 'Chemia',            'Teacher': {'FirstName': 'Jan', 'LastName': 'Kowalski'}}, 'LessonNo': 6, 'Semester': 1, 'Type': {'IsPresenceKind': True,           'Name': 'Obecność',           'Order': 1,           'Short': 'ob',           'Standard': True}           } ...]```</longdescription>
</pkgmetadata>