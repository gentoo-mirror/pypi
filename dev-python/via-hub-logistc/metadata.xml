<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Biblioteca customizada para testes automatizados com robotframeworkA finalidade deste documento Ã© a de passar informaÃ§Ãµes das funÃ§Ãµes e keywords que estÃ£o sendo entregues.## ðŸ”§ InstalaÃ§Ã£o$ pip install via-hub-logistic## ðŸš€ Keywords:**Microsoft Azure**  ```robotframework    *** Settings ***    $  Library    via_hub_logistc.keywords.kws_microsoft.ViaAzure  ```  - Azure Connect Blob Server  &gt; Return the one object connction with azure blob server&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **host**: Url blob server :: *str*&lt;br&gt;     &gt; - **account_name**: name user the account :: *str*&lt;br&gt;    &gt; -  **account_key**: access token the account :: *str*  - Azure List All Directories In Container  &gt; Return the json with all directories in a container&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **connection**: Object with connection :: *Connection*&lt;br&gt;     &gt; - **container_name**: name container :: *str*&lt;br&gt;    &gt; - **folder**: name the folder :: *str*&lt;br&gt;    &gt; - **format**: Default false for return o path name the folder, true for return o full path name with folder :: *boolean*  - Azure Is Exist Directory In Container  &gt; Return  True if the folder exists in the container or False if the folder not exist in container&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **connection**: Object with connection :: *Connection*&lt;br&gt;    &gt; - **container_name**:  name container :: *str*&lt;br&gt;    &gt; - **folder**:  name the folder :: *str*&lt;br&gt;    &gt; - **directory**:  diectory search :: *srt***Ibm Db2**  ```robotframework    *** Settings***    $  Library    via_hub_logistc.keywords.kws_db2.ViaDb2  ```  - Db2 Connect To Dataase  &gt; Return the one object connction with database bd2 server&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **host**:  server name :: *str*&lt;br&gt;    &gt; - **db_name**:  database name :: *str*&lt;br&gt;    &gt; - **user_id**:  user name :: *str*&lt;br&gt;    &gt; - **password**:  password id :: *str*  - Db2 Execute Qury  &gt; Return json with result the of query &lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **connection**: Object with connection the of database :: *Connection*&lt;br&gt;    &gt; - **query**:  Query which will be used in the search :: *str***Mongodb**  ```robotframework    *** Settings***    $  Library    via_hub_logistc.keywords.kws_mongodb.ViaMongo  ```  - Mongo Connect To Database  &gt; Return conncection with mongoDB&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **strConnction**:  string connection :: *str*&lt;br&gt;  - Mongo Disconnect To Database  &gt; Execute a disconnection with the server &lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **client**: connection :: *Connection*&lt;br&gt;  - Mongo Find All  &gt; Returns one json or list the json result &lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **client**: connection :: *Connection*&lt;br&gt;    &gt; - **baseName**: name the database :: *str*&lt;br&gt;    &gt; - **collectionName**: name the collection:: *str*&lt;br&gt;  - Mongo Find By Parameter  &gt; Returns one json or list the json result by parameter &lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **client**: connection :: *Connection*&lt;br&gt;    &gt; - **baseName**: name the database :: *str*&lt;br&gt;    &gt; - **collectionName**: name the collection:: *str*&lt;br&gt;    &gt; - **query**: Query which will be used in the search:: *dict*&lt;br&gt;**Mongodb**  ```robotframework    *** Settings***    $  Library    via_hub_logistc.keywords.kws_text.ViaText  ```  - Split Text  &gt; Return text divide&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **text**:  text :: *str*&lt;br&gt;    &gt; - **lengh**:  size limit caracteres :: *int*&lt;br&gt;## ðŸš€ Funcoes:**Arquivos**  ```Pytho    *** Settings***    $ Library    via_hub_logistc.core.via_file.FileYaml  ```  - read_yaml_file  &gt; Return json with data file yaml&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **filename**:  path the file :: *str*&lt;br&gt;**Number**  ```Pytho    *** Settings***    $ Library    via_hub_logistc.core.via_number.ViaNumber  ```  - choose_number  &gt; Return Choose number in range&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **stopNumber**:  number final the range :: *int*&lt;br&gt;  **Text**  ```Pytho    *** Settings***    $ Library    via_hub_logistc.core.via_text.ViaNumber  ```  - split_text  &gt; Return split text informations $text and $length cut&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **text**:  text :: *int*&lt;br&gt;    &gt; - **length**:  size the cut the text :: *int*&lt;br&gt;  - cut_text  &gt; Return cut text informations $separator and $length cut&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **text**:  text :: *int*&lt;br&gt;    &gt; - **separator**:  caracterer separator :: *int*&lt;br&gt;    &gt; - **maxsplit**:  size the cut the text :: *int*&lt;br&gt;**Timer**  ```Pytho    *** Settings***    $ Library    via_hub_logistc.core.via_timer.ViaTimer  ```  - interval  &gt; Return calculate date in two date&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **start**:  date start :: *int*&lt;br&gt;    &gt; - **end**:  date end :: *int*&lt;br&gt;  - str_to_date  &gt; Return on a date in format string&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **value**:  date  :: *int*&lt;br&gt;    &gt; - **format**:  date format :: *int*&lt;br&gt;**Scenarios**  ```Pytho    *** Settings***    $ Library    via_hub_logistc.core.via_scenarios.ViaTimer  ```  - get_id_scenario  &gt; Return id the scenarios&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **lst_tags**:  date start :: *list*&lt;br&gt;    &gt; - **tag_id**: tag id for load in list :: *int*&lt;br&gt;**Conector Zephry**  ```Pytho    *** Settings***    $ Library    via_hub_logistc.core.via_report.ReportManager  ```  - get_cycle_id  &gt; Return id the of cycle in jira&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **cycle**: cycle name :: *list*&lt;br&gt;  - create_cycle_name  &gt; Return name the of cycle test in jira&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **project_id**: id project jira :: *list*&lt;br&gt;    &gt; - **release**: name the branch the regression :: *list*&lt;br&gt;  - create_folder  &gt; Return name new folder for test regression&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **projectKey**: key project jira :: *list*&lt;br&gt;    &gt; - **folder_name**: name the folder the regression :: *list*&lt;br&gt;  - create_cycle_test  &gt; Return new cycle for test regression&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **folder_name**: name the folder the regression :: *str*&lt;br&gt;    &gt; - **test_plan**: id test plan:: *str*&lt;br&gt;    &gt; - **key**: key the project :: *str*&lt;br&gt;    &gt; - **name_cycle**: name the cycle the regression :: *str*&lt;br&gt;    &gt; - **descripption**: description the cycle the regression :: *str*&lt;br&gt;    &gt; - **iteration**: iteration the cycle the regression :: *str*&lt;br&gt;    &gt; - **owner**: name the of runner the regression :: *str*&lt;br&gt;    &gt; - **cycle_date**: date the cycle the regression :: *str*&lt;br&gt;    &gt; - **status**: status the cycle the regression :: *str*&lt;br&gt;  - save_result_runner_tests  &gt; Add scenarios to an existing cycle &lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **cycle**: cycle the runner regression :: *str*&lt;br&gt;    &gt; - **list_scenarios**: list with scenarios :: *list*&lt;br&gt;  - get_owner_test_case  &gt; Return Get info the of created test case&lt;br&gt;    &gt; Params:&lt;br&gt;    &gt; - **test_key**: name teste case :: *str*&lt;br&gt;  - update_cycle_execution  &gt; Change status upadate cycle test br&gt;    &gt; Params:&lt;br&gt;    &gt; - **project_id**: id project the jira :: *str*&lt;br&gt;    &gt; - **cycle_id**: id cycle :: *str*&lt;br&gt;    &gt; - **status**: status the execution :: *str*&lt;br&gt;</longdescription>
</pkgmetadata>