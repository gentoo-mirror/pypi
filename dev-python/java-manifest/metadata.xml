<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># java-manifest-py[![Build Status](https://travis-ci.com/elihunter173/java-manifest-py.svg?branch=master)](https://travis-ci.com/elihunter173/java-manifest-py)[![PyPI version](https://badge.fury.io/py/java-manifest.svg)](https://badge.fury.io/py/java-manifest)Encode/decode Java's `META-INF/MANIFEST.MF` in Python.## InstallationTo install the latest release on PyPI, run:```sh$ pip install java-manifest```## UsageA MANIFEST is represented by a list of dictionaries, where each dictionarycorresponds to an empty-line delimited section of the MANIFEST and eachdictionary has `str` keys and either `str` or `bool` values.`java_manifest.loads` takes a string containing MANIFEST-formatted data andreturns a list of dictionaries, where each dictionary is a section in theMANIFEST. `java_manifest.load` does the same, using any `typing.TextIO`readable object.```python&gt;&gt;&gt; import java_manifest&gt;&gt;&gt; manifest_str = &quot;&quot;&quot;... Name: README-Example-1... Long-Line: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...... Name: README-Example-2... Foo: Bar... &quot;&quot;&quot;&gt;&gt;&gt; manifest = java_manifest.loads(manifest_str)&gt;&gt;&gt; print(manifest)[{'Name': 'README-Example-1', 'Long-Line': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'}, {'Name': 'README-Example-2', 'Foo': 'Bar'}]```Similarly, `java_manifest.dumps` returns a string of MANIFEST-formatted datafrom a list of dictionaries, where each dictionary is a section in theMANIFEST. `java_manifest.dump` does the same, writing into any `typing.TextIO`writable object.```python&gt;&gt;&gt; import java_manifest&gt;&gt;&gt; manifest = [...     {...         &quot;Name&quot;: &quot;README-Example&quot;,...         &quot;Some-Str&quot;: &quot;Some random string&quot;,...     },... ]&gt;&gt;&gt; manifest_str = java_manifest.dumps(manifest)&gt;&gt;&gt; print(manifest_str)Name: README-ExampleSome-Str: Some random string&lt;BLANKLINE&gt;```There is also a `from_jar` function that finds the `META-INF/MANIFEST.MF` filewithin the jar and `java_manifest.load`s that.```python&gt;&gt;&gt; import java_manifest&gt;&gt;&gt; manifest = java_manifest.from_jar(&quot;test_files/simple.jar&quot;)```### Custom Encoders/DecodersBecause Java's manifest file format doesn't deal with structured values withina section, specific uses of the format create ad-hoc encoding/decoding rulesthat can convert some structured data into a basic string so it can be encodedinto a manifest and vice versa. The `encoder` and `decoder` arguments fordumping and loading respectively are responsible for handling this. An encoderand decoder both take in a key-value pair. However, an encoder receivespotentially structured data as the value and returns plain string, while adecode receives string values and returns potentially structured data.As we have already see, the default encoder and decoder does no transformationand prevents you from attempting to dump non-string data.```python&gt;&gt;&gt; import java_manifest&gt;&gt;&gt; print(java_manifest.dumps([{&quot;foo&quot;: &quot;bar&quot;}]))foo: bar&gt;&gt;&gt; print(java_manifest.dumps([{&quot;int&quot;: 1}]))Traceback (most recent call last):  ...ValueError: key 'int' has type &lt;class 'int'&gt; value, expected str```You can however describe more custom encoders that support for example lists ofstrings.```python&gt;&gt;&gt; def encode(key, val):...     if isinstance(val, list):...         return &quot;,&quot;.join(val)...     return val&gt;&gt;&gt; print(java_manifest.dumps([{&quot;foo&quot;: &quot;bar&quot;, &quot;names&quot;: [&quot;alice&quot;, &quot;bob&quot;, &quot;charlie&quot;]}], encoder=encode))foo: barnames: alice,bob,charlie&lt;BLANKLINE&gt;```Similarly for custom decoders.```python&gt;&gt;&gt; import java_manifest&gt;&gt;&gt; def decode(key, val):...     # In reality you'd probably want to target only specific keys, to avoid...     # messing up random strings containing commas. This is just an example....     vals = val.split(&quot;,&quot;)...     if len(vals) == 1:...         return val...     else:...         return vals&gt;&gt;&gt; manifest = java_manifest.loads(&quot;foo: bar\r\nnames: alice,bob,charlie&quot;, decoder=decode)&gt;&gt;&gt; print(manifest)[{'foo': 'bar', 'names': ['alice', 'bob', 'charlie']}]```</longdescription>
</pkgmetadata>