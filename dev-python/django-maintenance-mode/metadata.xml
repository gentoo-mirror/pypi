<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![](https://img.shields.io/pypi/pyversions/django-maintenance-mode.svg?color=3776AB&amp;logo=python&amp;logoColor=white)](https://www.python.org/)[![](https://img.shields.io/pypi/djversions/django-maintenance-mode?color=0C4B33&amp;logo=django&amp;logoColor=white&amp;label=django)](https://www.djangoproject.com/)[![](https://img.shields.io/pypi/v/django-maintenance-mode.svg?color=blue&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/django-maintenance-mode/)[![](https://pepy.tech/badge/django-maintenance-mode/month)](https://pepy.tech/project/django-maintenance-mode)[![](https://img.shields.io/github/stars/fabiocaccamo/django-maintenance-mode?logo=github)](https://github.com/fabiocaccamo/django-maintenance-mode/)[![](https://badges.pufler.dev/visits/fabiocaccamo/django-maintenance-mode?label=visitors&amp;color=blue)](https://badges.pufler.dev)[![](https://img.shields.io/pypi/l/django-maintenance-mode.svg?color=blue)](https://github.com/fabiocaccamo/django-maintenance-mode/blob/master/LICENSE.txt)[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-maintenance-mode/master.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-maintenance-mode/master)[![](https://img.shields.io/github/workflow/status/fabiocaccamo/django-maintenance-mode/Test%20package?label=build&amp;logo=github)](https://github.com/fabiocaccamo/django-maintenance-mode)[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-maintenance-mode?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-maintenance-mode)[![](https://img.shields.io/codacy/grade/918668ac85e74206a4d8d95923548d79?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-maintenance-mode)[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-maintenance-mode?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-maintenance-mode/)[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# django-maintenance-modedjango-maintenance-mode shows a 503 error page when **maintenance-mode** is **on**.It works at application level, so your django instance should be up.It doesn't use database and doesn't prevent database access.## Installation1. Run `pip install django-maintenance-mode` or [download django-maintenance-mode](http://pypi.python.org/pypi/django-maintenance-mode) and add the **maintenance_mode** package to your project2. Add `maintenance_mode` to `settings.INSTALLED_APPS` before custom applications3. Add `maintenance_mode.middleware.MaintenanceModeMiddleware` to `settings.MIDDLEWARE` as last middleware4. Add your custom `templates/503.html` file5. Restart your application server## Configuration (optional)### SettingsAll these settings are optional, if not defined in `settings.py` the default values (listed below) will be used.```python# if True the maintenance-mode will be activatedMAINTENANCE_MODE = None``````python# by default, to get/set the state value a local file backend is used# if you want to use the db or cache, you can create a custom backend# custom backends must extend 'maintenance_mode.backends.AbstractStateBackend' class# and implement get_value(self) and set_value(self, val) methodsMAINTENANCE_MODE_STATE_BACKEND = &quot;maintenance_mode.backends.LocalFileBackend&quot;# alternatively it is possible to use the default storage backendMAINTENANCE_MODE_STATE_BACKEND = &quot;maintenance_mode.backends.DefaultStorageBackend&quot;# alternatively it is possible to use the static storage backend# make sure that STATIC_ROOT and STATIC_URL are also setMAINTENANCE_MODE_STATE_BACKEND = &quot;maintenance_mode.backends.StaticStorageBackend&quot;``````python# by default, a file named &quot;maintenance_mode_state.txt&quot; will be created in the settings.py directory# you can customize the state file path in case the default one is not writableMAINTENANCE_MODE_STATE_FILE_PATH = &quot;maintenance_mode_state.txt&quot;``````python# if True admin site will not be affected by the maintenance-mode pageMAINTENANCE_MODE_IGNORE_ADMIN_SITE = False``````python# if True anonymous users will not see the maintenance-mode pageMAINTENANCE_MODE_IGNORE_ANONYMOUS_USER = False``````python# if True authenticated users will not see the maintenance-mode pageMAINTENANCE_MODE_IGNORE_AUTHENTICATED_USER = False``````python# if True the staff will not see the maintenance-mode pageMAINTENANCE_MODE_IGNORE_STAFF = False``````python# if True the superuser will not see the maintenance-mode pageMAINTENANCE_MODE_IGNORE_SUPERUSER = False``````python# list of ip-addresses that will not be affected by the maintenance-mode# ip-addresses will be used to compile regular expressions objectsMAINTENANCE_MODE_IGNORE_IP_ADDRESSES = ()``````python# the path of the function that will return the client IP address given the request object -&gt; 'myapp.mymodule.myfunction'# the default function ('maintenance_mode.utils.get_client_ip_address') returns request.META['REMOTE_ADDR']# in some cases the default function returns None, to avoid this scenario just use 'django-ipware'MAINTENANCE_MODE_GET_CLIENT_IP_ADDRESS = None```Retrieve user's real IP address using [`django-ipware`](https://github.com/un33k/django-ipware):```pythonMAINTENANCE_MODE_GET_CLIENT_IP_ADDRESS = &quot;ipware.ip.get_ip&quot;``````python# list of urls that will not be affected by the maintenance-mode# urls will be used to compile regular expressions objectsMAINTENANCE_MODE_IGNORE_URLS = ()``````python# if True the maintenance mode will not return 503 response while running tests# useful for running tests while maintenance mode is on, before opening the site to public useMAINTENANCE_MODE_IGNORE_TESTS = False``````python# the absolute url where users will be redirected to during maintenance-modeMAINTENANCE_MODE_REDIRECT_URL = None``````python# the template that will be shown by the maintenance-mode pageMAINTENANCE_MODE_TEMPLATE = &quot;503.html&quot;``````python# the path of the function that will return the template context -&gt; 'myapp.mymodule.myfunction'MAINTENANCE_MODE_GET_TEMPLATE_CONTEXT = None``````python# the HTTP status code to sendMAINTENANCE_MODE_STATUS_CODE = 503``````python# the value in seconds of the Retry-After header during maintenance-modeMAINTENANCE_MODE_RETRY_AFTER = 3600 # 1 hour```#### Context ProcessorsAdd **maintenance_mode.context_processors.maintenance_mode** to your context_processors list in `settings.py` if you want to access the maintenance_mode status in your templates.```pythonTEMPLATES = [    {        # ...        &quot;OPTIONS&quot;: {            &quot;context_processors&quot;: [                # ...                &quot;maintenance_mode.context_processors.maintenance_mode&quot;,                # ...            ],        },        # ...    },]```#### LoggingYou can disable emailing 503 errors to admins while maintenance mode is enabled:```pythonLOGGING = {    &quot;filters&quot;: {        &quot;require_not_maintenance_mode_503&quot;: {            &quot;()&quot;: &quot;maintenance_mode.logging.RequireNotMaintenanceMode503&quot;,        },        ...    },    &quot;handlers&quot;: {        ...    },    ...}```### Context ManagersYou can force a block of code execution to run under maintenance mode or not using context managers:```pythonfrom maintenance_mode.core import maintenance_mode_off, maintenance_mode_onwith maintenance_mode_on():    # do stuff    passwith maintenance_mode_off():    # do stuff    pass```### URLsAdd **maintenance_mode.urls** to `urls.py` if you want superusers able to set maintenance_mode using urls.```pythonurlpatterns = [    # ...    re_path(r&quot;^maintenance-mode/&quot;, include(&quot;maintenance_mode.urls&quot;)),    # ...]```### ViewsYou can force maintenance mode on/off at view level using view decorators:```pythonfrom maintenance_mode.decorators import force_maintenance_mode_off, force_maintenance_mode_on@force_maintenance_mode_offdef my_view_a(request):    # never return 503 response    pass@force_maintenance_mode_ondef my_view_b(request):    # always return 503 response    pass```## Usage### Python```pythonfrom maintenance_mode.core import get_maintenance_mode, set_maintenance_modeset_maintenance_mode(True)if get_maintenance_mode():    set_maintenance_mode(False)```or```pythonfrom django.core.management import call_commandfrom django.core.management.base import BaseCommandclass Command(BaseCommand):    def handle(self, *args, **options):        call_command(&quot;maintenance_mode&quot;, &quot;on&quot;)        # call your command(s)        call_command(&quot;maintenance_mode&quot;, &quot;off&quot;)```### Templates```html{% if maintenance_mode %}&lt;!-- html --&gt;{% endif %}```### TerminalRun ``python manage.py maintenance_mode &lt;on|off&gt;``*(**This is not Heroku-friendly because** any execution of heroku run* `manage.py` *will be run on a separate worker dyno, not the web one. Therefore **the state-file is set but on the wrong machine. You should use a custom*** `MAINTENANCE_MODE_STATE_BACKEND`*.)*### URLsSuperusers can change maintenance-mode using the following urls:`/maintenance-mode/off/``/maintenance-mode/on/`## Testing```bash# clone repositorygit clone https://github.com/fabiocaccamo/django-maintenance-mode.git &amp;&amp; cd django-maintenance-mode# create virtualenv and activate itpython -m venv venv &amp;&amp; . venv/bin/activate# upgrade pippython -m pip install --upgrade pip# install requirementspip install -r requirements.txt -r requirements-test.txt# run teststox# orpython runtests.py# orpython -m django test --settings &quot;tests.settings&quot;```## LicenseReleased under [MIT License](LICENSE.txt).---## Supporting- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-maintenance-mode)- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)## See also- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. 🧙 ⚡- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. 🎨- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. ⚙️- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ↪️- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. 🌳- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. 📘- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. 🇮🇹 💳- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. 🧢- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. 🧟♂️</longdescription>
</pkgmetadata>