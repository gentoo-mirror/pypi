<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>############elasticstack############.. image:: https://badge.fury.io/py/elasticstack.svg    :target: http://badge.fury.io/py/elasticstack.. image:: https://travis-ci.org/bennylope/elasticstack.svg?branch=master        :target: https://travis-ci.org/bennylope/elasticstack.. image:: https://pypip.in/d/elasticstack/badge.svg        :target: https://crate.io/packages/elasticstack?version=latest:Version: 0.5.0:Author: Ben Lopatin (http://benlopatin.com)Configurable indexing and other extras for Haystack (with ElasticSearchbiases).Full documentation is on `Read the Docs &lt;http://elasticstack.readthedocs.org/en/latest/&gt;`_.Requirements============* `Django &lt;https://www.djangoproject.com/&gt;`_: tested against Django 1.8, and 1.9* `Haystack &lt;http://www.haystacksearch.org/&gt;`_: tested against Haystack 2.4.0,  it should work with any combination of Haystack and Django that work* `ElasticSearch &lt;http://www.elasticsearch.org/&gt;`_: presumably any newish  version will do, however the only version tested against so far is 0.19.xFeatures and goals==================Some of these features are backend agnostic but most features haveElasticSearch in mind.For more background see the blog post `Stretching Haystack's ElasticSearch Backend &lt;http://www.wellfireinteractive.com/blog/custom-haystack-elasticsearch-backend/&gt;`_.Global configurable index mapping---------------------------------The search mapping provided by Haystack's ElasticSearch backend includes briefbut sensible defaults for nGram analysis. You can globaly add change these settings oradd your own mappings by providing a mapping dictionary using`ELASTICSEARCH_INDEX_SETTINGS` in your settings file. This example takes thedefault mapping and adds a synonym analyzer::    ELASTICSEARCH_INDEX_SETTINGS = {        'settings': {            &quot;analysis&quot;: {                &quot;analyzer&quot;: {                    &quot;synonym_analyzer&quot; : {                        &quot;type&quot;: &quot;custom&quot;,                        &quot;tokenizer&quot; : &quot;standard&quot;,                        &quot;filter&quot; : [&quot;synonym&quot;]                    },                    &quot;ngram_analyzer&quot;: {                        &quot;type&quot;: &quot;custom&quot;,                        &quot;tokenizer&quot;: &quot;lowercase&quot;,                        &quot;filter&quot;: [&quot;haystack_ngram&quot;, &quot;synonym&quot;]                    },                    &quot;edgengram_analyzer&quot;: {                        &quot;type&quot;: &quot;custom&quot;,                        &quot;tokenizer&quot;: &quot;lowercase&quot;,                        &quot;filter&quot;: [&quot;haystack_edgengram&quot;]                    }                },                &quot;tokenizer&quot;: {                    &quot;haystack_ngram_tokenizer&quot;: {                        &quot;type&quot;: &quot;nGram&quot;,                        &quot;min_gram&quot;: 3,                        &quot;max_gram&quot;: 15,                    },                    &quot;haystack_edgengram_tokenizer&quot;: {                        &quot;type&quot;: &quot;edgeNGram&quot;,                        &quot;min_gram&quot;: 2,                        &quot;max_gram&quot;: 15,                        &quot;side&quot;: &quot;front&quot;                    }                },                &quot;filter&quot;: {                    &quot;haystack_ngram&quot;: {                        &quot;type&quot;: &quot;nGram&quot;,                        &quot;min_gram&quot;: 3,                        &quot;max_gram&quot;: 15                    },                    &quot;haystack_edgengram&quot;: {                        &quot;type&quot;: &quot;edgeNGram&quot;,                        &quot;min_gram&quot;: 2,                        &quot;max_gram&quot;: 15                    },                    &quot;synonym&quot; : {                        &quot;type&quot; : &quot;synonym&quot;,                        &quot;ignore_case&quot;: &quot;true&quot;,                        &quot;synonyms_path&quot; : &quot;synonyms.txt&quot;                    }                }            }        }    }The synonym filter is ready for your index, but will go unused yet. Before your new analyzer can be used you will need to change your Haystack engine and rebuild/updateyour index. In your `settings.py` modify `HAYSTACK_CONNECTIONS` accordingly::    HAYSTACK_CONNECTIONS = {        'default': {            'ENGINE': 'elasticstack.backends.ConfigurableElasticSearchEngine',            'URL': env_var('HAYSTACK_URL', 'http://127.0.0.1:9200/'),            'INDEX_NAME': 'haystack',        },    }The default analyzer for non-nGram fields in Haystack's ElasticSearch backendis the `snowball analyzer &lt;http://www.elasticsearch.org/guide/reference/index-modules/analysis/snowball-analyzer.html&gt;`_.A perfectly good analyzer but not necessarily what you need. It's also languagespecific (English by default).Specify your analyzer with `ELASTICSEARCH_DEFAULT_ANALYZER` in your settingsfile::    ELASTICSEARCH_DEFAULT_ANALYZER = 'synonym_analyzer'Now all your analyzed fields, except for nGram fields, will be analyzed using`synonym_analyzer`.If you want to specify a custom search_analyzer for nGram/EdgeNgram fields,define it with the `ELASTICSEARCH_DEFAULT_NGRAM_SEARCH_ANALYZER` settings::    ELASTICSEARCH_DEFAULT_NGRAM_SEARCH_ANALYZER = 'standard'Configurable index mapping per index------------------------------------Alternatively you can configure index mapping per index. This is usefull for multilanguage index settup.In this case `HAYSTACK_CONNECTION` contains key `SETTINGS_NAME` have to match with name in `ELASTICSEARCH_INDEX_SETTINGS`::    HAYSTACK_CONNECTIONS = {        'default': {            'ENGINE': 'elasticstack.backends.ConfigurableElasticSearchEngine',            'URL': env_var('HAYSTACK_URL', 'http://127.0.0.1:9200/'),            'INDEX_NAME': 'haystack',            'SETTINGS_NAME': 'cs',            'DEFAULT_ANALYZER': 'czech_hunspell',            'DEFAULT_NGRAM_SEARCH_ANALYZER': 'standard',        },    }    ELASTICSEARCH_INDEX_SETTINGS = {        'cs': {            &quot;settings&quot;: {                &quot;analysis&quot;: {                    &quot;analyzer&quot;: {                        &quot;czech_hunspell&quot;: {                            &quot;type&quot;: &quot;custom&quot;,                            &quot;tokenizer&quot;: &quot;standard&quot;,                            &quot;filter&quot;: [&quot;stopwords_CZ&quot;, &quot;lowercase&quot;, &quot;hunspell_CZ&quot;, &quot;stopwords_CZ&quot;, &quot;remove_duplicities&quot;]                        }                    },                    &quot;filter&quot;: {                        &quot;stopwords_CZ&quot;: {                            &quot;type&quot;: &quot;stop&quot;,                            &quot;stopwords&quot;: [&quot;právě&quot;, &quot;že&quot;, &quot;test&quot;, &quot;_czech_&quot;],                            &quot;ignore_case&quot;: True                        },                        &quot;hunspell_CZ&quot;: {                            &quot;type&quot;: &quot;hunspell&quot;,                            &quot;locale&quot;: &quot;cs_CZ&quot;,                            &quot;dedup&quot;: True,                            &quot;recursion_level&quot;: 0                        },                        &quot;remove_duplicities&quot;: {                            &quot;type&quot;: &quot;unique&quot;,                            &quot;only_on_same_position&quot;: True                        },                    }                }            }        },    }Field based analysis--------------------Even with a new default analyzer you may want to change this on a field byfield basis as fits your needs. To do so, use the fields from`elasticstack.fields` to specify your analyzer with the `analyzer` keywordargument::    from haystack import indexes    from elasticstack.fields import CharField    from myapp.models import MyContent    class MyContentIndex(indexes.SearchIndex, indexes.Indexable):        text = CharField(document=True, use_template=True,                analyzer='synonym_analyzer')        def get_model(self):            return MyContentDjango CBV style views----------------------Haystacks's class based views predate the inclusion of CBVs into the Djangocore and so the paradigms are different. This makes it harder to impossible tomake use of view mixins.The bundled `SearchView` and `FacetedSearchView` classes are based on`django.views.generic.edit.FormView` using the `SearchMixin` and`FacetedSearchMixin`, respectively. The `SearchMixin` provides the necessarysearch related attributes and overloads the form processing methods to executethe search.The `SearchMixin` adds a few search specific attributes:* `load_all` - a Boolean value for `specifying database lookups &lt;http://django-haystack.readthedocs.org/en/latest/searchqueryset_api.html#load-all&gt;`_* `queryset` - a default `SearchQuerySet`. Defaults to `EmtpySearchQuerySet`* `search_field` - the name of the form field used for the query. This is added  to allow for views which may have more than one search form. Defaults to `q`... note::    The `SearchMixin` uses the attribute named `queryset` for the resultant    `SearchQuerySet`. Naming this attribute `searchqueryset` would make more    sense semantically and hew closer to Haystack's naming convention, however    by using the `queryset` attribute shared by other Django view mixins it is    relatively easy to combine search functionality with other mixins and    views.Management commands-------------------show_mapping^^^^^^^^^^^^Make a change and wonder why your results don't look as expected? Themanagement command `show_mapping` will print the current mapping foryour defined search index(es). At the least it may show that you've simplyforgotten to update your index with new mappings::    python manage.py show_mappingBy default this will display the `existing_mapping` which shows the index,document type, and document properties.::    {        &quot;haystack&quot;: {            &quot;modelresult&quot;: {                &quot;properties&quot;: {                    &quot;is_active&quot;: {                        &quot;type&quot;: &quot;boolean&quot;                    },                    &quot;text&quot;: {                        &quot;type&quot;: &quot;string&quot;                    },                    &quot;published&quot;: {                        &quot;type&quot;: &quot;date&quot;,                        &quot;format&quot;: &quot;dateOptionalTime&quot;                    }                }            }        }    }If you provide the `--detail` flag this will return only the field mappings butincluding additional details, such as boost levels and field-specificanalyzers.::    {        &quot;is_active&quot;: {            &quot;index&quot;: &quot;not_analyzed&quot;,            &quot;boost&quot;: 1,            &quot;store&quot;: &quot;yes&quot;,            &quot;type&quot;: &quot;boolean&quot;        },        &quot;text&quot;: {            &quot;index&quot;: &quot;analyzed&quot;,            &quot;term_vector&quot;: &quot;with_positions_offsets&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;analyzer&quot;: &quot;custom_analyzer&quot;,            &quot;boost&quot;: 1,            &quot;store&quot;: &quot;yes&quot;        },        &quot;pub_date&quot;: {            &quot;index&quot;: &quot;analyzed&quot;,            &quot;boost&quot;: 1,            &quot;store&quot;: &quot;yes&quot;,            &quot;type&quot;: &quot;date&quot;        }    }show_document^^^^^^^^^^^^^Provided the name of an indexed model and a key it generates and prints thegenerated document for this object::    python manage.py show_document myapp.MyModel 19181The JSON document will be formatted with 'pretty' indenting.Stability, docs, and tests==========================The form, view, and backend functionality in this project is considered stable.Test coverage is not substantial, but is run against Django 1.8 through Django1.10 on Python 2.7, 3.4, and 3.5.Why not add this stuff to Haystack?-----------------------------------This project first aims to solve problems related specifically to working withElasticSearch. Haystack is 1) backend agnostic (a good thing), 2) needs tosupport existing codebases, and 3) not my project. Most importantly, addingthese features through a separate Django app means providing them withoutneeding to fork Haystack. Hopefully some of the features here, once finalizedand tested, will be suitable to add to Haystack.History-------0.5.0 (2017-03-17)^^^^^^^^^^^^^^^^^^* Replace deprecated option_list in commands with add_arguments method* Update Django versions in tox config and docs0.4.1 (2016-05-05)^^^^^^^^^^^^^^^^^^* Fix encoding issue in installation. In at least one known environment/Python3  combination an encoding issue prevented installation of the package.0.4.0 (2016-01-28)^^^^^^^^^^^^^^^^^^* Allow changing search settings on an index-by-index basis0.3.0 (2015-12-31)^^^^^^^^^^^^^^^^^^* Set default analyzer for ngram fields0.2.0 (2015-09-29)^^^^^^^^^^^^^^^^^^* Switch to py.test* Tests against Django 1.8, 1.9* Drop pyelasticsearch requirement for installation0.1.1 (2015-01-13)^^^^^^^^^^^^^^^^^^* Bug fix in show_document management command0.1.0 (2014-11-24)^^^^^^^^^^^^^^^^^^* Major structural changes* Bugfix for configurable search fields0.0.6 (2013-10-04)^^^^^^^^^^^^^^^^^^* Require pyelasticsearch for installation0.0.5 (2013-09-28)^^^^^^^^^^^^^^^^^^* Fixed reference to old method0.0.4 (2013-09-28)^^^^^^^^^^^^^^^^^^* Search form can search using specified field name* Added management command to output mapping for an individual  document0.0.3 (2013-09-28)^^^^^^^^^^^^^^^^^^* Added default analyzer setting0.0.2 (2013-09-28)^^^^^^^^^^^^^^^^^^* Packaging fix0.0.1 (2013-09-28)^^^^^^^^^^^^^^^^^^* Initial release</longdescription>
</pkgmetadata>