<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># async-firebase is a lightweight asynchronous client to interact with Firebase Cloud Messaging for sending push notification to Android and iOS devices[![PyPI download month](https://img.shields.io/pypi/dm/async-firebase.svg)](https://pypi.python.org/pypi/async-firebase/)[![PyPI version fury.io](https://badge.fury.io/py/async-firebase.svg)](https://pypi.python.org/pypi/async-firebase/)[![PyPI license](https://img.shields.io/pypi/l/async-firebase.svg)](https://pypi.python.org/pypi/async-firebase/)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/async-firebase.svg)](https://pypi.python.org/pypi/async-firebase/)[![CI](https://github.com/healthjoy/async-firebase/actions/workflows/ci.yml/badge.svg)](https://github.com/healthjoy/async-firebase/actions/workflows/ci.yml)[![Codacy coverage](https://img.shields.io/codacy/coverage/b6a59cdf5ca64eab9104928d4f9bbb97?logo=codacy)](https://app.codacy.com/gh/healthjoy/async-firebase/dashboard)  * Free software: MIT license  * Requires: Python 3.7+## Features  * Extremely lightweight and does not rely on ``firebase-admin`` which is hefty  * Send push notifications to Android and iOS devices  * Send Multicast push notification to Android and iOS devices  * Send Web push notifications  * Set TTL (time to live) for notifications  * Set priority for notifications  * Set collapse-key for notifications  * Dry-run mode for testing purpose## Installation```shell script$ pip install async-firebase```## Getting started### async-firebase &lt; 3.0.0To send push notification to Android:```python3import asynciofrom async_firebase import AsyncFirebaseClientasync def main():    client = AsyncFirebaseClient()    client.creds_from_service_account_file(&quot;secret-store/mobile-app-79225efac4bb.json&quot;)    # or using dictionary object    # client.creds_from_service_account_info({...}})    device_token = &quot;...&quot;    android_config = client.build_android_config(        priority=&quot;high&quot;,        ttl=2419200,        collapse_key=&quot;push&quot;,        data={&quot;discount&quot;: &quot;15%&quot;, &quot;key_1&quot;: &quot;value_1&quot;, &quot;timestamp&quot;: &quot;2021-02-24T12:00:15&quot;},        title=&quot;Store Changes&quot;,        body=&quot;Recent store changes&quot;,    )    response = await client.push(device_token=device_token, android=android_config)    print(response.success, response.message_id)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```To send push notification to iOS:```python3import asynciofrom async_firebase import AsyncFirebaseClientasync def main():    client = AsyncFirebaseClient()    client.creds_from_service_account_file(&quot;secret-store/mobile-app-79225efac4bb.json&quot;)    # or using dictionary object    # client.creds_from_service_account_info({...}})    device_token = &quot;...&quot;    apns_config = client.build_apns_config(        priority=&quot;normal&quot;,        ttl=2419200,        apns_topic=&quot;store-updated&quot;,        collapse_key=&quot;push&quot;,        title=&quot;Store Changes&quot;,        alert=&quot;Recent store changes&quot;,        badge=1,        category=&quot;test-category&quot;,        custom_data={&quot;discount&quot;: &quot;15%&quot;, &quot;key_1&quot;: &quot;value_1&quot;, &quot;timestamp&quot;: &quot;2021-02-24T12:00:15&quot;}    )    response = await client.push(device_token=device_token, apns=apns_config)    print(response.success)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```This prints:```shell script&quot;projects/mobile-app/messages/0:2367799010922733%7606eb557606ebff&quot;```To manual construct message:```python3import asynciofrom datetime import datetimefrom async_firebase.messages import APNSConfig, APNSPayload, ApsAlert, Apsfrom async_firebase import AsyncFirebaseClientasync def main():    apns_config = APNSConfig(**{        &quot;headers&quot;: {            &quot;apns-expiration&quot;: str(int(datetime.utcnow().timestamp()) + 7200),            &quot;apns-priority&quot;: &quot;10&quot;,            &quot;apns-topic&quot;: &quot;test-topic&quot;,            &quot;apns-collapse-id&quot;: &quot;something&quot;,        },        &quot;payload&quot;: APNSPayload(**{            &quot;aps&quot;: Aps(**{                &quot;alert&quot;: ApsAlert(title=&quot;some-title&quot;, body=&quot;alert-message&quot;),                &quot;badge&quot;: 0,                &quot;sound&quot;: &quot;default&quot;,                &quot;content_available&quot;: True,                &quot;category&quot;: &quot;some-category&quot;,                &quot;mutable_content&quot;: False,                &quot;custom_data&quot;: {                    &quot;link&quot;: &quot;https://link-to-somewhere.com&quot;,                    &quot;ticket_id&quot;: &quot;YXZ-655512&quot;,                },            })        })    })    device_token = &quot;...&quot;    client = AsyncFirebaseClient()    client.creds_from_service_account_info({...})    response = await client.push(device_token=device_token, apns=apns_config)    print(response.success)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```### async-firebase &gt;= 3.0.0To send push notification to Android:```python3import asynciofrom async_firebase import AsyncFirebaseClientfrom async_firebase.messages import Messageasync def main():    client = AsyncFirebaseClient()    client.creds_from_service_account_file(&quot;secret-store/mobile-app-79225efac4bb.json&quot;)    # or using dictionary object    # client.creds_from_service_account_info({...}})    device_token: str = &quot;...&quot;    android_config = client.build_android_config(        priority=&quot;high&quot;,        ttl=2419200,        collapse_key=&quot;push&quot;,        data={&quot;discount&quot;: &quot;15%&quot;, &quot;key_1&quot;: &quot;value_1&quot;, &quot;timestamp&quot;: &quot;2021-02-24T12:00:15&quot;},        title=&quot;Store Changes&quot;,        body=&quot;Recent store changes&quot;,    )    message = Message(android=android_config, token=device_token)    response = await client.send(message)    print(response.success, response.message_id)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```To send push notification to iOS:```python3import asynciofrom async_firebase import AsyncFirebaseClientfrom async_firebase.messages import Messageasync def main():    client = AsyncFirebaseClient()    client.creds_from_service_account_file(&quot;secret-store/mobile-app-79225efac4bb.json&quot;)    # or using dictionary object    # client.creds_from_service_account_info({...}})    device_token: str = &quot;...&quot;    apns_config = client.build_apns_config(        priority=&quot;normal&quot;,        ttl=2419200,        apns_topic=&quot;store-updated&quot;,        collapse_key=&quot;push&quot;,        title=&quot;Store Changes&quot;,        alert=&quot;Recent store changes&quot;,        badge=1,        category=&quot;test-category&quot;,        custom_data={&quot;discount&quot;: &quot;15%&quot;, &quot;key_1&quot;: &quot;value_1&quot;, &quot;timestamp&quot;: &quot;2021-02-24T12:00:15&quot;}    )    message = Message(apns=apns_config, token=device_token)    response = await client.send(message)    print(response.success)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```This prints:```shell script&quot;projects/mobile-app/messages/0:2367799010922733%7606eb557606ebff&quot;```To manual construct message:```python3import asynciofrom datetime import datetimefrom async_firebase.messages import APNSConfig, APNSPayload, ApsAlert, Aps, Messagefrom async_firebase import AsyncFirebaseClientasync def main():    apns_config = APNSConfig(**{        &quot;headers&quot;: {            &quot;apns-expiration&quot;: str(int(datetime.utcnow().timestamp()) + 7200),            &quot;apns-priority&quot;: &quot;10&quot;,            &quot;apns-topic&quot;: &quot;test-topic&quot;,            &quot;apns-collapse-id&quot;: &quot;something&quot;,        },        &quot;payload&quot;: APNSPayload(**{            &quot;aps&quot;: Aps(**{                &quot;alert&quot;: ApsAlert(title=&quot;some-title&quot;, body=&quot;alert-message&quot;),                &quot;badge&quot;: 0,                &quot;sound&quot;: &quot;default&quot;,                &quot;content_available&quot;: True,                &quot;category&quot;: &quot;some-category&quot;,                &quot;mutable_content&quot;: False,                &quot;custom_data&quot;: {                    &quot;link&quot;: &quot;https://link-to-somewhere.com&quot;,                    &quot;ticket_id&quot;: &quot;YXZ-655512&quot;,                },            })        })    })    device_token: str = &quot;...&quot;    client = AsyncFirebaseClient()    client.creds_from_service_account_info({...})    message = Message(apns=apns_config, token=device_token)    response = await client.send(message)    print(response.success)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```## License``async-firebase`` is offered under the MIT license.## Source codeThe latest developer version is available in a GitHub repository:[https://github.com/healthjoy/async-firebase](https://github.com/healthjoy/async-firebase)</longdescription>
</pkgmetadata>