<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Caqui**Caqui** is intended to command executions against Drivers synchronously and asynchronously. Launch the Driver as a server and send requests to it. The intention is that the user does not worry about which Driver he/she is using. It can be **Web**Drivers like [Selenium](https://www.selenium.dev/), **Mobile**Drivers like [Appium](http://appium.io/docs/en/2.0/), or **Desktop**Drivers like [Winium](https://github.com/2gis/Winium.Desktop).The process **Caqui** follows is similar of the one described in this [article](https://medium.com/@douglas.dcm/testing-windows-apps-with-http-rest-b4e8f80f8b7e) that experiments Drivers as servers together with [Jmeter](https://jmeter.apache.org/) to test the Windows Calculator. However, the motivation to create **Caqui** was feed by the inspiration in [Arsenic](https://github.com/HENNGE/arsenic) library.**Caqui** is planned to be Driver agnostic, so the user can start any Driver as a server and just inform the server URL. Hence, the code is decoupled from the chosen Driver.**Caqui** can be used in remote calls. As it needs just the server URL, the user can start the Driver as a server in any host and provide the URL to **Caqui** clients.# Tested WebDrivers| WebDriver               | Version       | Remote* | Comment || ----------------------- | ------------- | ------- |-------- || Appium                  | 2.0.0         | Y       | Accepts remote calls by default. Tested with Appium in Docker container || Firefox (geckodriver)   | 113           | Y       | Need to add the host ip, e.g. &quot;--host 123.45.6.78&quot; || Google Chrome           | 113+          | Y       | Need to inform allowed ips to connect, e.g &quot;--allowed-ips=123.45.6.78&quot; || Opera                   | 99            | Y       | Need to inform allowed ips to connect, e.g &quot;--allowed-ips=123.45.6.78&quot;. Similar to Google Chrome || WinAppDriver            | 1.2.1         | Y       | Need to define the host ip, e.g. &quot;WinAppDriver.exe 10.0.0.10 4723&quot; || Winium Desktop          | 1.6.0         | Y       | Accepts remote calls by default |* Accepts remote requests when running as servers# Simple startInstall the lastest version of **Caqui**```pip install caqui```Download the same [ChromeDriver](https://chromedriver.chromium.org/downloads) version as your installed Chrome and start the Driver as a server using the port &quot;9999&quot;```$ ./chromedriver --port=9999Starting ChromeDriver 94.0.4606.61 (418b78f5838ed0b1c69bb4e51ea0252171854915-refs/branch-heads/4606@{#1204}) on port 9999Only local connections are allowed.Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.ChromeDriver was started successfully.```Given the HTML content in `playground.html````&lt;html&gt;&lt;head&gt;    &lt;title&gt;Sample page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Basic page&lt;/h1&gt;    &lt;p&gt; This is a sample page to be used to sanity check &lt;/p&gt;    &lt;input id=&quot;input&quot;&gt;    &lt;button id=&quot;button&quot; onclick=&quot;myFunction(this, 'red')&quot;&gt;test&lt;/button&gt;    &lt;p id=&quot;end&quot;&gt;end&lt;/p&gt;    &lt;a src=&quot;http://any1.com&quot; id=&quot;a1&quot;&gt;any1.com&lt;/a&gt;    &lt;a src=&quot;http://any2.com&quot; id=&quot;a2&quot;&gt;any2.com&lt;/a&gt;    &lt;a src=&quot;http://any3.com&quot; id=&quot;a3&quot;&gt;any3.com&lt;/a&gt;    &lt;a src=&quot;http://any4.com&quot; id=&quot;a4&quot;&gt;any4.com&lt;/a&gt;    &lt;script&gt;        function myFunction(element, color) {            element.style.color = color;        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;```And the code in `sample.py` file```import asyncioimport timefrom caqui import synchronous, asynchronousfrom os import getcwdfrom tests.constants import PAGE_URLfrom caqui.easy.capabilities import CapabilitiesBuilderBASE_DIR = getcwd()MAX_CONCURRENCY = 5  # number of webdriver instances runningsem = asyncio.Semaphore(MAX_CONCURRENCY)async def get_all_links():    async with sem:        driver_url = &quot;http://127.0.0.1:9999&quot;        capabilities = (            CapabilitiesBuilder()            .browser_name(&quot;webdriver&quot;)            .accept_insecure_certs(True)            .additional_capability(                {&quot;goog:chromeOptions&quot;: {&quot;extensions&quot;: [], &quot;args&quot;: [&quot;--headless&quot;]}}            )        ).build()        session = await asynchronous.get_session(driver_url, capabilities)        await asynchronous.go_to_page(            driver_url,            session,            PAGE_URL,        )        for i in range(4):            i += 1            locator_value = f&quot;//a[@id='a{i}']&quot;            locator_type = &quot;xpath&quot;            anchors = []            anchors = await asynchronous.find_elements(                driver_url, session, locator_type, locator_value            )            print(f&quot;Found {len(anchors)} links&quot;)        for anchor in anchors:            text = await asynchronous.get_property(driver_url, session, anchor, &quot;href&quot;)            print(f&quot;Link found '{text}'&quot;)        synchronous.close_session(driver_url, session)# Reference: https://stackoverflow.com/questions/48483348/how-to-limit-concurrency-with-python-asyncioasync def main():    number_of_websites = range(10)    tasks = [asyncio.ensure_future(get_all_links()) for number in number_of_websites]    await asyncio.gather(*tasks)if __name__ == &quot;__main__&quot;:    start = time.time()    loop = asyncio.get_event_loop()    try:        loop.run_until_complete(main())    finally:        loop.run_until_complete(loop.shutdown_asyncgens())        loop.close()        end = time.time()        print(f&quot;Time: {end-start:.2f} sec&quot;)```Run the file```python sample.py```Output```Found 1 linksFound 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Found 1 linksFound 1 linksFound 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Found 1 linksFound 1 linksFound 1 linksFound 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Link found 'http://any4.com/'Found 1 linksFound 1 linksLink found 'http://any4.com/'Found 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Found 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Found 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Found 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Found 1 linksFound 1 linksFound 1 linksFound 1 linksLink found 'http://any4.com/'Time: 5.01 sec```# Version 2.0.0In version 2 it is possible to use Python objects similarly to Selenium. Example:```from caqui.easy import AsyncDriverfrom caqui.by import Byfrom caqui import synchronousfrom tests.constants import PAGE_URLfrom pytest import mark, fixturefrom caqui.easy.capabilities import CapabilitiesBuilder@fixturedef __setup():    remote = &quot;http://127.0.0.1:9999&quot;    capabilities = (        CapabilitiesBuilder()        .browser_name(&quot;webdriver&quot;)        .accept_insecure_certs(True)        .page_load_strategy(&quot;normal&quot;)        .addtional_capability(            {&quot;goog:chromeOptions&quot;: {&quot;extensions&quot;: [], &quot;args&quot;: [&quot;--headless&quot;]}}        )    ).build()    driver = AsyncDriver(remote, capabilities, PAGE_URL)    yield driver    driver.quit()@mark.asyncio_cooperativeasync def test_switch_to_parent_frame_and_click_alert(__setup: AsyncDriver):    driver = __setup    await driver.get(PAGE_URL)    locator_type = &quot;id&quot;    locator_value = &quot;my-iframe&quot;    locator_value_alert_parent = &quot;alert-button&quot;    locator_value_alert_frame = &quot;alert-button-iframe&quot;    element_frame = await driver.find_element(locator_type, locator_value)    assert await driver.switch_to.frame(element_frame) is True    alert_button_frame = await driver.find_element(        locator_type, locator_value_alert_frame    )    assert await alert_button_frame.click() is True    assert await driver.switch_to.alert.dismiss() is True    assert await driver.switch_to.default_content() is True    alert_button_parent = await driver.find_element(        locator_type, locator_value_alert_parent    )    assert await alert_button_parent.get_attribute(&quot;any&quot;) == &quot;any&quot;    assert await alert_button_parent.click() is True(&quot;style&quot;)    assert &quot;display: none;&quot; == await hidden_button.get_attribute(&quot;style&quot;)```# Driver as serverTo illustrate what I mean by &quot;Driver as server&quot;, lets get [chromedriver](https://chromedriver.chromium.org/home) and execute it as an ordinary shell script file.```./chromedriver --port=9999Starting ChromeDriver 94.0.4606.61 (418b78f5838ed0b1c69bb4e51ea0252171854915-refs/branch-heads/4606@{#1204}) on port 9999Only local connections are allowed.Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.ChromeDriver was started successfully.```Notice the Driver is running and waiting for HTTP requests.Lets open a new session against it```curl --location '127.0.0.1:9999/session' \--header 'Content-Type: application/json' \--data '{    &quot;desiredCapabilities&quot;: {        &quot;browserName&quot;: &quot;firefox&quot;,        &quot;marionette&quot;: true,        &quot;acceptInsecureCerts&quot;: true    }}'```Here is the response returned```{    &quot;sessionId&quot;: &quot;b6654121c4ba1e8395ded73a27b7d8f5&quot;,    &quot;status&quot;: 0,    &quot;value&quot;: {        &quot;acceptInsecureCerts&quot;: true,        &quot;acceptSslCerts&quot;: true,        &quot;applicationCacheEnabled&quot;: false,        &quot;browserConnectionEnabled&quot;: false,        &quot;browserName&quot;: &quot;chrome&quot;,        &quot;chrome&quot;: {            &quot;chromedriverVersion&quot;: &quot;94.0.4606.61 (418b78f5838ed0b1c69bb4e51ea0252171854915-refs/branch-heads/4606@{#1204})&quot;,            &quot;userDataDir&quot;: &quot;/tmp/.com.google.Chrome.xtZUOj&quot;        },        &quot;cssSelectorsEnabled&quot;: true,        &quot;databaseEnabled&quot;: false,        &quot;goog:chromeOptions&quot;: {            &quot;debuggerAddress&quot;: &quot;localhost:44437&quot;        },        &quot;handlesAlerts&quot;: true,        &quot;hasTouchScreen&quot;: false,        &quot;javascriptEnabled&quot;: true,        &quot;locationContextEnabled&quot;: true,        &quot;mobileEmulationEnabled&quot;: false,        &quot;nativeEvents&quot;: true,        &quot;networkConnectionEnabled&quot;: false,        &quot;pageLoadStrategy&quot;: &quot;normal&quot;,        &quot;platform&quot;: &quot;Linux&quot;,        &quot;proxy&quot;: {},        &quot;rotatable&quot;: false,        &quot;setWindowRect&quot;: true,        &quot;strictFileInteractability&quot;: false,        &quot;takesHeapSnapshot&quot;: true,        &quot;takesScreenshot&quot;: true,        &quot;timeouts&quot;: {            &quot;implicit&quot;: 0,            &quot;pageLoad&quot;: 300000,            &quot;script&quot;: 30000        },        &quot;unexpectedAlertBehaviour&quot;: &quot;ignore&quot;,        &quot;version&quot;: &quot;94.0.4606.54&quot;,        &quot;webStorageEnabled&quot;: true,        &quot;webauthn:extension:credBlob&quot;: true,        &quot;webauthn:extension:largeBlob&quot;: true,        &quot;webauthn:virtualAuthenticators&quot;: true    }}```The *sessionId* value can be used to perform further actions like *find element*, *send keys* or *click* buttons. More details can be found in [Json Wire Protocol Specification](https://www.selenium.dev/documentation/legacy/json_wire_protocol/).Also with the *-h* parameter in Drivers, for example: ```./chromedriver -hUsage: ./chromedriver [OPTIONS]Options  --port=PORT                     port to listen on  --adb-port=PORT                 adb server port  --log-path=FILE                 write server log to file instead of stderr, increases log level to INFO  --log-level=LEVEL               set log level: ALL, DEBUG, INFO, WARNING, SEVERE, OFF  --verbose                       log verbosely (equivalent to --log-level=ALL)  --silent                        log nothing (equivalent to --log-level=OFF)  --append-log                    append log file instead of rewriting  --replayable                    (experimental) log verbosely and don't truncate long strings so that the log can be replayed.  --version                       print the version number and exit  --url-base                      base URL path prefix for commands, e.g. wd/url  --readable-timestamp            add readable timestamps to log  --enable-chrome-logs            show logs from the browser (overrides other logging options)  --disable-dev-shm-usage         do not use /dev/shm (add this switch if seeing errors related to shared memory)  --allowed-ips                   comma-separated allowlist of remote IP addresses which are allowed to connect to ChromeDriver```# ContributingRead the [Code of Conduct](https://github.com/douglasdcm/caqui/blob/main/CODE_OF_CONDUCT.md) before push new Merge Requests.Now, follow the steps in [Contributing](https://github.com/douglasdcm/caqui/blob/main/CONTRIBUTING.md) session.</longdescription>
</pkgmetadata>