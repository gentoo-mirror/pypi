<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python C Extention 2 Sequence Compare[![Upload pypi.org](https://github.com/kirin123kirin/cdiffer/actions/workflows/pypi.yml/badge.svg?branch=v0.7.2)](https://github.com/kirin123kirin/cdiffer/actions/workflows/pypi.yml)**Edit distance, Similarity and 2 sequence differences printing.**# How to Install?```shellpip install cdiffer```# Requirement* python3.6 or later&lt;!-- * python2.7 --&gt;# cdiffer.distCompute absolute Levenshtein distance of two strings.## Usagedist(sequence, sequence)## Examples (it's hard to spell Levenshtein correctly):```pythonHelp on built-in function dist in module cdiffer:dist(...)    Compute absolute Levenshtein distance of two strings.    dist(sequence, sequence)    Examples (it's hard to spell Levenshtein correctly):    &gt;&gt;&gt; dist('coffee', 'cafe')    4    &gt;&gt;&gt; dist(list('coffee'), list('cafe'))    4    &gt;&gt;&gt; dist(tuple('coffee'), tuple('cafe'))    4    &gt;&gt;&gt; dist(iter('coffee'), iter('cafe'))    4    &gt;&gt;&gt; dist(range(4), range(5))    1    &gt;&gt;&gt; dist('coffee', 'xxxxxx')    12    &gt;&gt;&gt; dist('coffee', 'coffee')    0```# cdiffer.similarCompute similarity of two strings.## Usagesimilar(sequence, sequence)The similarity is a number between 0 and 1,base on levenshtein edit distance.## Examples```python&gt;&gt;&gt; from cdiffer import similar&gt;&gt;&gt;&gt;&gt;&gt; similar('coffee', 'cafe')0.6&gt;&gt;&gt; similar('hoge', 'bar')0.0```# cdiffer.differFind sequence of edit operations transforming one string to another.## Usagediffer(source_sequence, destination_sequence, diffonly=False, rep_rate=60)## Examples```python&gt;&gt;&gt; from cdiffer import differ&gt;&gt;&gt;    &gt;&gt;&gt; for x in differ('coffee', 'cafe'):    ...     print(x)    ...    ['equal',   0, 0,   'c', 'c']    ['delete',  1, None,'o',None]    ['insert',  None, 1,None,'a']    ['equal',   2, 2,   'f', 'f']    ['delete',  3, None,'f',None]    ['delete',  4, None,'e',None]    ['equal',   5, 3,   'e', 'e']    &gt;&gt;&gt; for x in differ('coffee', 'cafe', diffonly=True):    ...     print(x)    ...    ['delete',  1, None,'o',None]    ['insert',  None, 1,None,'a']    ['delete',  3, None,'f',None]    ['delete',  4, None,'e',None]    &gt;&gt;&gt; for x in differ('coffee', 'cafe', rep_rate = 0):    ...     print(x)    ...    ['equal',   0, 0,   'c', 'c']    ['replace', 1, 1,   'o', 'a']    ['equal',   2, 2,   'f', 'f']    ['delete',  3, None,'f',None]    ['delete',  4, None,'e',None]    ['equal',   5, 3,   'e', 'e']    &gt;&gt;&gt; for x in differ('coffee', 'cafe', diffonly=True, rep_rate = 0):    ...     print(x)    ...    ['replace', 1, 1,   'o', 'a']    ['delete',  3, None,'f',None]    ['delete',  4, None,'e',None]```# cdiffer.compareThis Function is compare and prety printing 2 sequence data.## Usagecompare(source_sequence, destination_sequence, diffonly=False, rep_rate=60, condition_value=&quot; ---&gt; &quot;)### Parameters :    arg1 -&gt; iterable : left comare target data.    arg2 -&gt; iterable : right comare target data.    keya -&gt; callable one argument function : Using sort and compare with key about `a` object.    keyb -&gt; callable one argument function : Using sort and compare with key about `a` object.    header -&gt; bool : output data with header(True) or without header(False). &lt;default True&gt;    diffonly -&gt; bool : output data with equal data(False) or without equal data(True). &lt;default False&gt;    rep_rate -&gt; int: Threshold to be considered as replacement.(-1 ~ 100). -1: allways replacement.    startidx -&gt; int: output record index starting number. &lt;default `0`&gt;    condition_value -&gt; str : Conjunctions for comparison.    na_value -&gt; str: if not found data when filled value.    delete_sign_value -&gt; str: if deleted data when adding sign value.    insert_sign_value -&gt;  str: if insert data when adding sign value.### Return : Lists of List    1st column -&gt; matching rate (0 ~ 100).    2nd column -&gt; matching tagname (unicode string).    3rd over   -&gt; compare data.### Examples```pythonIn [1]: from cdiffer import compare... compare('coffee', 'cafe')[['tag', 'index_a', 'index_b', 'data'], ['equal', 0, 0, 'c'], ['insert', '-', 1, 'ADD ---&gt; a'], ['delete', 1, '-', 'o ---&gt; DEL'], ['equal', 2, 2, 'f'], ['delete', 3, '-', 'f ---&gt; DEL'], ['equal', 4, 3, 'e'], ['delete', 5, '-', 'e ---&gt; DEL']]In [2]: compare([list(&quot;abc&quot;), list(&quot;abc&quot;)], [list(&quot;abc&quot;), list(&quot;acc&quot;), list(&quot;xtz&quot;)], rep_rate=50)[['tag', 'index_a', 'index_b', 'COL_00', 'COL_01', 'COL_02', 'COL_03'], ['equal', 0, 0, 'a', 'b', 'c'], ['replace', 1, 1, 'a', 'b ---&gt; DEL', 'ADD ---&gt; c', 'c'], ['insert', '-', 2, 'ADD ---&gt; x', 'ADD ---&gt; t', 'ADD ---&gt; z']]In [3]: compare([&quot;abc&quot;, &quot;abc&quot;], [&quot;abc&quot;, &quot;acc&quot;, &quot;xtz&quot;], rep_rate=40)[['tag', 'index_a', 'index_b', 'data'], ['equal', 0, 0, 'abc'], ['replace', 1, 1, 'abc ---&gt; acc'], ['insert', '-', 2, 'ADD ---&gt; xtz']]In [4]: compare([&quot;abc&quot;, &quot;abc&quot;], [&quot;abc&quot;, &quot;acc&quot;, &quot;xtz&quot;], rep_rate=50)[['tag', 'index_a', 'index_b', 'data'], ['equal', 0, 0, 'abc'], ['replace', 1, 1, 'abc ---&gt; acc'], ['insert', '-', 2, 'ADD ---&gt; xtz']]```## Performance```pythonC:\Windows\system&gt;ipythonPython 3.7.7 (tags/v3.7.7:d7c567b08f, Mar 10 2020, 10:41:24) [MSC v.1900 64 bit (AMD64)]Type 'copyright', 'credits' or 'license' for more informationIPython 7.21.0 -- An enhanced Interactive Python. Type '?' for help.In [1]: from cdiffer import *In [2]: %timeit dist('coffee', 'cafe')   ...: %timeit dist(list('coffee'), list('cafe'))   ...: %timeit dist(tuple('coffee'), tuple('cafe'))   ...: %timeit dist(iter('coffee'), iter('cafe'))   ...: %timeit dist(range(4), range(5))   ...: %timeit dist('coffee', 'xxxxxx')   ...: %timeit dist('coffee', 'coffee')125 ns ± 0.534 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)677 ns ± 2.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)638 ns ± 3.42 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)681 ns ± 2.16 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)843 ns ± 3.66 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)125 ns ± 0.417 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)50.5 ns ± 0.338 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)In [3]: %timeit similar('coffee', 'cafe')   ...: %timeit similar(list('coffee'), list('cafe'))   ...: %timeit similar(tuple('coffee'), tuple('cafe'))   ...: %timeit similar(iter('coffee'), iter('cafe'))   ...: %timeit similar(range(4), range(5))   ...: %timeit similar('coffee', 'xxxxxx')   ...: %timeit similar('coffee', 'coffee')123 ns ± 0.301 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)680 ns ± 2.64 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)647 ns ± 1.78 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)680 ns ± 7.57 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)848 ns ± 4.19 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)130 ns ± 0.595 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)54.8 ns ± 0.691 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)In [4]: %timeit differ('coffee', 'cafe')    ...: %timeit differ(list('coffee'), list('cafe'))    ...: %timeit differ(tuple('coffee'), tuple('cafe'))    ...: %timeit differ(iter('coffee'), iter('cafe'))    ...: %timeit differ(range(4), range(5))    ...: %timeit differ('coffee', 'xxxxxx')    ...: %timeit differ('coffee', 'coffee')735 ns ± 4.18 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)1.36 µs ± 5.17 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)1.31 µs ± 5.25 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)1.37 µs ± 5.04 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)1.33 µs ± 5.32 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)1.07 µs ± 6.75 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)638 ns ± 3.67 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)In [5]: a = dict(zip('012345', 'coffee'))    ...: b = dict(zip('0123', 'cafe'))    ...: %timeit dist(a, b)    ...: %timeit similar(a, b)    ...: %timeit differ(a, b)524 ns ± 2.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)539 ns ± 2.23 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)1.07 µs ± 1.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)In [6]: %timeit compare(&quot;coffee&quot;, &quot;cafe&quot;)    ...: %timeit compare([list(&quot;abc&quot;), list(&quot;abc&quot;)], [list(&quot;abc&quot;), list(&quot;acc&quot;), list(&quot;xtz&quot;)], rep_rate=50)    ...: %timeit compare([&quot;abc&quot;, &quot;abc&quot;], [&quot;abc&quot;, &quot;acc&quot;, &quot;xtz&quot;], rep_rate=40)    ...: %timeit compare([&quot;abc&quot;, &quot;abc&quot;], [&quot;abc&quot;, &quot;acc&quot;, &quot;xtz&quot;], rep_rate=50)844 ns ± 3.88 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)3.32 µs ± 6.92 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)1.16 µs ± 3.94 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)1.3 µs ± 31.5 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)```</longdescription>
</pkgmetadata>