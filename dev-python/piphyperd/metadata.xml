<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># piphyperd[![pipeline status](https://gitlab.com/hyperd/piphyperd/badges/master/pipeline.svg)](https://gitlab.com/hyperd/piphyperd/commits/master)[![pylint](https://gitlab.com/hyperd/piphyperd/-/jobs/artifacts/master/raw/pylint/pylint.svg?job=pylint)](https://gitlab.com/hyperd/piphyperd/commits/master)![Python package](https://github.com/hyp3rd/piphyperd/workflows/Python%20package/badge.svg)A simple python package to leverage pip programmatically, and via CLI.**piphyperd** is a wrapper around **pip**; it can provide features like automation or dependencies control within your workflows.## About this packageThe reasons behind this package, in alternative to the standard `pip` (`import pip`) module, are in the attempt to expose a more stable interface, when programmatically installing or managing python packages, within pipelines or automation workflows.Although it is a **Python** module, and it is available via `import pip`, by design, **pip** is not supposed to be a library; every detail is subject to changes for any reason, from the import name itself to its API. It might be better to call the pip's internal APIs differently.### PitfallsWhen leveraging `pip` programmatically, there are also other topics worth considering:1. The pip code assumes that it is in sole control of the global state of the program;2. pip's code is not thread-safe. If you were to run pip in a thread;3. pip assumes that once it has finished its work, the process terminates.Furthermore, installing packages under the `sys.path` from a running Python process might result in unexpected or undesired behaviors.Taking everything into account, still might be necessary, or usefull, handling pip packages within code and automations, as much as possible in controlled manner. The most reliable way to do so, is leveraging pip in a `subprocess`:```python# leverage subprocess.Popen to execute pip commandspip_full_cmd: Union[Any] = sorted(    self.pip_options + self.packages + self.command_args)process = subprocess.Popen(    [sys.executable if self.python_path is None        else self.python_path,        &quot;-m&quot;, &quot;pip&quot;, command] + pip_full_cmd,    stdout=subprocess.PIPE, stderr=subprocess.PIPE)```For further information, continue reading from the source of this topic at the [the official pypa](https://pip.pypa.io/en/latest/user_guide/#using-pip-from-your-program) user guide.## Install the packageRefer to the official [project page](https://pypi.org/project/piphyperd/) for further information about the package status and releases.To install the latest version, run the following command in your terminal:```bashpip install --user piphyperd```## API overviewOnce installed, you can import the package as follows `from piphyperd import PipHyperd`.The module is wrapping pip commands in methods, exposed through the object `PipHyperd`. You can initialize it by optionally passing pip commands extra options:```pythondef __init__(self, *pip_options: Any, python_path: Optional[Path] = None):    &quot;&quot;&quot;Init method.&quot;&quot;&quot;    # Path to the python binary to use    self.python_path: Optional[Path] = python_path    # A list of pip packages to install || show || download || uninstall    self.packages: List[str] = list()    # pip command args, e.g.: pip download testpypi {command_args}    self.command_args: List[str] = list()    # pip options, e.g.: pip {pip_options} uninstall testpypi    self.pip_options: List[str] = list(pip_options)# ...```The API exposed conveniently wraps a set of pip commands that can help generating virtual environments, reports of the installed packages, outdated libraries. The `stdout` and `stderr` are returned by each method, allowing to store the output or to read it in a second instance.### Object descriptionTo follow, a brief walkthrough through the methods exposed by the `PipHyperd` object, **programmatically** and via the **CLI**#### pip freezeOutput installed pip packages in requirements format:```python# pythonpiphyperd.PipHyperd().freeze()``````bash# clipiphyperd freeze```#### pip listList installed pip packages.list_outdated -- True || False to list or not the outdated packages```python# pythonpiphyperd.PipHyperd(&quot;--verbose&quot;).list_packages() # the argument &quot;--verbose&quot; is of course optional# List outdated packagespiphyperd.PipHyperd().list(True)``````bash# clipiphyperd list```#### pip show {{ package }}Show information about installed packages.```python# pythonpiphyperd.PipHyperd(&quot;--verbose&quot;).show(&quot;ansible&quot;)``````bash# clipiphyperd show --package &lt;package_name&gt;```#### pip checkVerify installed packages have compatible dependencies.```python# pythonpiphyperd.PipHyperd().check()``````bash# clipiphyperd check```#### pipdeptreeRender installed packages with dependencies tree.```python# pythonpiphyperd.PipHyperd().dependencies_tree()``````bash# clipiphyperd dependencies-tree```#### pip install {{ packages }}Install pip packages.```python# pythonpiphyperd.PipHyperd(&quot;-U&quot;).install(&quot;ansible&quot;, &quot;cryptography&quot;) # -U is of course optional, set here as example``````bash# clipiphyperd install --packages &lt;package_name_1&gt; &lt;package_name_2&gt; &lt;package_name_n&gt;piphyperd install --package &lt;package_name&gt;```#### pip download {{ package }}Download pip packages.```python# pythonpiphyperd.PipHyperd(&quot;-U&quot;).download(&quot;ansible&quot;, &quot;pip&quot;, &quot;cryptography&quot;, destination=&quot;/your/path/here&quot;) # the destination argument is optional``````bash# clipiphyperd download --package twine==3.1.1```#### pip uninstall {{ packages }}Uninstall pip packages.```pythonpiphyperd.PipHyperd().uninstall(&quot;ansible&quot;, &quot;pip&quot;, &quot;cryptography&quot;) # the destination argument is optional``````bash# clipiphyperd uninstall --packages &lt;package_name_1&gt; &lt;package_name_2&gt; &lt;package_name_n&gt;piphyperd uninstall --package &lt;package_name&gt;```## License[GNU General Public License v3 (GPLv3)](https://gitlab.com/hyperd/piphyperd/blob/master/LICENSE)## Report a VulnerabilityIf you believe you have found a security vulnerability in **venvctl**, refer to the [Tidelift security policy](https://tidelift.com/docs/security).The **Tidelift** team will coordinate the vunerability response and disclosure.## Author Information[Francesco Cosentino](https://www.linkedin.com/in/francesco-cosentino/)I'm a surfer, a crypto trader, and a DevSecOps Engineer with 15 years of experience designing highly-available distributed production environments and developing cloud-native apps in public and private clouds.</longdescription>
</pkgmetadata>