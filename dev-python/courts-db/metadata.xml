<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Courts-DB=========Courts-DB is an open source repository to organize a db of all courts current and historical.It was built for use in Courtlistener.com.Its main goal is to interface with CL to identify historical and current courtsby string.  It incldues mechanisms to filter results based on dates and/or whether it is a bankruptcy court.Further development is intended and all contributors, corrections and additions are welcome.Background==========Free Law Project built this database using the metadata (case names, dates etc.)of over 16 millions data points.  This data represents hundreds of hours ofresearch and testing.  We believe to be the most extensive open dataset of its kind.Quickstart===========You can feed in a courtlistener Court_ID or string to find a court.::        from courts_db import find_court, find_court_by_id        find_court_by_id(&quot;mass&quot;)        returns:        [{            &quot;regex&quot;: [                &quot;${sjc} ${ma}?&quot;,                &quot;${ma} ${sjc}&quot;,                &quot;Supreme Court Of ${ma}&quot;,                &quot;State Of ${ma} Supreme Court&quot;            ],            &quot;name_abbreviation&quot;: &quot;Mass. Sup. Jud. Ct.&quot;,            &quot;dates&quot;: [                {                    &quot;start&quot;: &quot;1692-01-01&quot;,                    &quot;end&quot;: null                }            ],            &quot;name&quot;: &quot;Massachusetts Supreme Judicial Court&quot;,            &quot;level&quot;: &quot;colr&quot;,            &quot;case_types&quot;: [&quot;All&quot;],            &quot;system&quot;: &quot;state&quot;,            &quot;examples&quot;: [                &quot;Supreme Court Of Massachusetts&quot;,                &quot;Supreme Judicial Court Of Massachusetts&quot;,                &quot;Massachusetts Supreme Judicial Court&quot;            ],            &quot;court_url&quot;: &quot;http://www.mass.gov/courts/sjc/&quot;,            &quot;type&quot;: &quot;appellate&quot;,            &quot;id&quot;: &quot;mass&quot;,            &quot;location&quot;: &quot;Massachusetts&quot;,            &quot;citation_string&quot;: &quot;Mass.&quot;        }]::        from courts_db import find_court        mass_sjc = find_court(u&quot;Massachusetts Supreme Judicial Court&quot;)        returns: [&quot;mass&quot;]Filtering on less unique strings is built in.Feed a date string or bankruptcy flag to filter on those parametersFor example District of Massachusetts is non unique and returns both the Federal District Court of Massachusetts and its Bankruptcy Court::        from datetime import datetime as dt        courts_db.find_court(            u&quot;District of Massachusetts&quot;,        )        returns ==&gt; [&quot;mad&quot;, &quot;mab&quot;]        courts_db.find_court(            u&quot;District of Massachusetts&quot;,            bankruptcy=True,        )        returns ==&gt; [&quot;mab&quot;]        courts_db.find_court(            u&quot;District of Massachusetts&quot;,            date_found=dt.strptime(&quot;10/02/1975&quot;, &quot;%m/%d/%Y&quot;),        )        returns ==&gt; [&quot;mad&quot;]Some Notes on the Data======================Somethings to keep in mind as you are reviewing the data.1. The data is devided into two files courts.json and variables.json2. Courts.json holds the bulk of the information3. Variables.json holds templates for large numbers of regexes.Fields======1. :code:`id` ==&gt; string; Courtlistener Court Identifier2. :code:`court_url` ==&gt; string; url for court website3. :code:`regex` ==&gt;  array; regexes patterns to find courts4. :code:`examples` ==&gt;  array; regexes patterns to find courts5. :code:`name` ==&gt; string; full name of the court6. :code:`name_abbreviation` ==&gt; string; court name abbreviations7. :code:`dates` ==&gt; Array; Contains start date, end date and notes on date range8. :code:`system` ==&gt; string; Defines main jurisdiction, ex. State, Federal, Tribal9. :code:`level` ==&gt; string; code defining where court is in system structure, ex. COLR (Court of Last Resort), IAC (Intermediate Appellate Court), GJC (General Jurisdiction Court), LJC (Limited Jurisdiction Court)10. :code:`location` ==&gt; string; refers to the physical location of the main court11. :code:`type` ==&gt; string; Identifies kind of cases handled (Trial, Appellate, Bankruptcy, AG)12. :code:`citation_string` ==&gt; string; Identifies the string used in a citation to refer to the courtInstallation============Installing courts-db is easy.    ::        pip install courts_dbOr install the latest dev version from github    ::        pip install git+https://github.com/freelawproject/courts-db.git@masterFuture=======1) Continue to improve and expand the dataset.2) Add filtering mechanisms by state, reporters, citation(s), judges, counties and cities.Deployment==========If you wish to create a new version, the process is:1. Update version info in ``setup.py`` and commit it.1. Tag the commit with the version number.To proceed manually-------------------1. Push your commit. CI should take care of the rest.To proceed manually-------------------1. Install the requirements in requirements_dev.txt1. Set up a config file at ~/.pypirc1. Generate a universal distribution that worksin py2 and py3 (see setup.cfg)    ::        python setup.py sdist bdist_wheel1. Upload the distributions    ::        twine upload dist/* -r pypi (or pypitest)License=======This repository is available under the permissive BSD license, making it easy and safe to incorporate in your own libraries.Pull and feature requests welcome. Online editing in Github is possible (and easy!)</longdescription>
</pkgmetadata>