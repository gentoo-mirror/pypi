<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># etcpak[![PyPI supported Python versions](https://img.shields.io/pypi/pyversions/etcpak.svg)](https://pypi.python.org/pypi/etcpak)[![Win/Mac/Linux](https://img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-informational)]()[![MIT](https://img.shields.io/pypi/l/etcpak.svg)](https://github.com/K0lb3/etcpak/blob/master/LICENSE)[![Build Status](https://github.com/K0lb3/etcpak/workflows/CI/badge.svg?branch=master)](https://github.com/K0lb3/etcpak/actions?query=workflow%3A%22CI%22)A python wrapper for [wolfpld/etcpak](https://github.com/wolfpld/etcpak)Some changes were made to the original code to make it cross-platform compatible.1. [Installation](https://github.com/K0lb3/etcpak#installation)2. [Example](https://github.com/K0lb3/etcpak#example)3. [Functions](https://github.com/K0lb3/etcpak#functions)## Installation```cmdpip install etcpak```or download/clone the git and use```cmdpython setup.py install```## Example```pythonfrom PIL import Imageimport etcpak# load imageimg = Image.open(file_path)# get image dataimg_data = img.convert(&quot;RGBA&quot;).tobytes()# compress datacompressed = etcpak.compress_to_dxt5(img_data, img.width, img.height)```__composite image for format comparission__```pythonimport osimport etcpakimport texture2ddecoderfrom PIL import ImageFORMATS = [    (&quot;DXT1&quot;, etcpak.compress_to_dxt1, texture2ddecoder.decode_bc1),    (&quot;DXT1 Dither&quot;, etcpak.compress_to_dxt1_dither, texture2ddecoder.decode_bc1),    (&quot;DXT5&quot;, etcpak.compress_to_dxt5, texture2ddecoder.decode_bc3),    (&quot;ETC1&quot;, etcpak.compress_to_etc1, texture2ddecoder.decode_etc1),    (&quot;ETC1 Dither&quot;, etcpak.compress_to_etc1_dither, texture2ddecoder.decode_etc1),    (&quot;ETC2 RGB&quot;, etcpak.compress_to_etc2_rgb, texture2ddecoder.decode_etc2),    (&quot;ETC2 RGBA&quot;, etcpak.compress_to_etc2_rgba, texture2ddecoder.decode_etc2a8)]p = &quot;S:\\Pictures&quot;for fp in os.listdir(p):    if not fp[-4:] in [&quot;.png&quot;, &quot;.jpg&quot;, &quot;.bmp&quot;, &quot;jpeg&quot;]:        continue    # load image and adjust format and size    print(fp)    img = Image.open(os.path.join(p, fp)).convert(&quot;RGBA&quot;)    img = img.crop((0,0,img.width-img.width%4, img.height-img.height%4))        # create composite image    comp = Image.new(&quot;RGBA&quot;, (img.width*8, img.height))    comp.paste(img, (0, 0))    print(img.width * img.height * 4)    # iterate over all formats    for i, (name, enc, dec) in enumerate(FORMATS):        print(name)        # make sure that the channel order is correct for the compression        if name[:3] == &quot;DXT&quot;:            raw = img.tobytes()        elif name[:3] == &quot;ETC&quot;:            r,g,b,a = img.split()            raw = Image.merge('RGBA', (b,g,r,a)).tobytes()                # compress        data = enc(raw, img.width, img.height)        # decompress        dimg = Image.frombytes(&quot;RGBA&quot;, img.size, dec(data, img.width, img.height), &quot;raw&quot;, &quot;BGRA&quot;)        # add to composite image        comp.paste(dimg, (img.width*(i+1), 0))    # save composite image    comp.save(os.path.splitext(fp)[0]+&quot;.png&quot;)```## Functions* all functions accept only arguments, no keywords* **the data has to be RGBA/BGRA for the RGB functions as well*** **all __DXT__ compressions require data in the __RGBA__ format*** **all __ETC__ compressions require data in the __BGRA__ format**### compress_to_dxt1*Compresses RGBA to DXT1*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_dxt1_dither*Compresses RGBA to DXT1 Dither*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_dxt5*Compresses RGBA to DXT5*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_etc1*Compresses RGBA to ETC1 RGB*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_etc1_dither*Compresses RGBA to ETC1 Dither*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_etc1_alpha*Compresses A to ETC1 Alpha*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_etc2_rgb*Compresses RGBA to ETC2 RGB*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_etc2_rgba*Compresses RGBA to ETC2 RGBA*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```### compress_to_etc2_alpha*Compresses RGBA to ETC2 Alpha*```:param data: RGBA data of the image:type data: bytes:param width: width of the image:type width: int:param height: height of the image:type height: int:returns: compressed data:rtype: bytes&quot;```</longdescription>
</pkgmetadata>