<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Tests](https://github.com/DataShades/ckanext-search-tweaks/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/DataShades/ckanext-search-tweaks/actions)# ckanext-search-tweaksSet of tools providing control over search results, sorting, etc.## RequirementsCompatibility with core CKAN versions:| CKAN version    | Compatible? ||-----------------|-------------|| 2.8 and earlier | no          || 2.9             | yes         |## InstallationTo install ckanext-search-tweaks:1. Activate your CKAN virtual environment, for example:. /usr/lib/ckan/default/bin/activate2. Install it on the virtualenvpip install ckanext-search-tweaks3. Add `search_tweaks` to the `ckan.plugins` setting in your CKAN   config file (by default the config file is located at   `/etc/ckan/default/ckan.ini`).4. Restart CKAN.## UsageThis extensions consists of multiple plugins. `search_tweaks` is the main(major) one, that must be enabled all the time. And depending on the set ofsecondary (minor) plugins, extra features and config options may beavailable. Bellow are listed all the plugins with their side effects.| Plugin                                                          | Functionality                                                                   ||-----------------------------------------------------------------|---------------------------------------------------------------------------------|| [search_tweaks](#search_tweaks)                                 | Allow all the other plugins to be enabled                                       || [search_tweaks_query_relevance](#search_tweaks_query_relevance) | Promote datasets that were visited most frequently for the current search query || [search_tweaks_field_relevance](#search_tweaks_field_relevance) | Promote dataset depending on value of it's field                                || [search_tweaks_spellcheck](#search_tweaks_spellcheck)           | Provides &quot;Did you mean?&quot; feature                                                |&lt;!--| [search_tweaks_advanced_search](#search_tweaks_advanced_search) | Basic configuration of ckanext-composite-search's search form                   |--&gt;### &lt;a id=&quot;search_tweaks&quot;&gt;&lt;/a&gt; search_tweaksProvides base functionality and essential pieces of logic used by all the otherplugins. Must be enabled as long as at least one other plugin from thisextension is enabled.- Switches search to `edismax` query parser if none was specified- Enables `ckanext.search_tweaks.iterfaces.ISearchTweaks` interface with thefollowing methods:def get_search_boost_fn(self, search_params: dict[str, Any]) -&gt; Optional[str]:&quot;&quot;&quot;Returns optional boost function that will be applied to the search query.&quot;&quot;&quot;return Nonedef get_extra_qf(self, search_params: dict[str, Any]) -&gt; Optional[str]:&quot;&quot;&quot;Return an additional fragment of the Solr's qf.    This fragment will be appended to the current qf&quot;&quot;&quot;return None#### CLIckan search-tweaks -Root of all the extension specific commands.Every command from minor plugins is registered under this section.#### Config settings# Rewrite the default value of the qf parameter sent to Solr# (optional, default: value of ckan.lib.search.query.QUERY_FIELDS).ckanext.search_tweaks.common.qf = title^5 text# Search by misspelled queries.# (optional, default: false).ckanext.search_tweaks.common.fuzzy_search.enabled = on# Maximum number of misspelled letters. Possible values are 1 and 2.# (optional, default: 1).ckanext.search_tweaks.common.fuzzy_search.distance = 2# Use `boost` instead of `bf` when `edismax` query parser is active# (optional, default: true).ckanext.search_tweaks.common.prefer_boost = no# MinimumShouldMatch used in queries# (optional, default: 1).ckanext.search_tweaks.common.mm = 2&lt;-1 5&lt;80%    # Keep original query when using fuzzy search, e.g. &quot;(hello~2) OR (hello)&quot; if true    # (optional, default: true).    ckanext.search_tweaks.common.fuzzy_search.keep_original---### &lt;a id=&quot;search_tweaks_query_relevance&quot;&gt;&lt;/a&gt; search_tweaks_query_relevanceIncrease relevance of datasets for particular query depending on number ofdirect visits of the dataset after running this search. I.e, if user searchesfor `something` and then visits dataset **B** which is initially displayed in athird row of search results, eventually this dataset will be displayed on thesecond or even on the first row. This is implemented in three stages. On thefirst stage, statistics collected and stored inside storage(redis, by default)and then this statistics converted into numeric solr field via cronjob.Finally, Solr's boost function that scales number of visits and improves scorefor the given query is applied during search.Following steps are required in order to configure this plugin:- Add field that will store statistics to schema.xml(`query_relevance_` prefix  can be changed via config option):&lt;dynamicField name=&quot;query_relevance_*&quot;  type=&quot;int&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;- Configure a cronjob which will update search-index periodically:0 0 * * * ckan search-index rebuild#### CLIrelevance query align - remove old data from storage. Actual result of this command dependson storage backend, that is controlled by config. At the momment, only `redis-daily` backendis affected by this command - all records older than `query_relevance.daily.age` days are removed.relevance query export - export statistics as CSV.relevance query import - import statistics from CSV. Note, records that are already in storage butare not listed in CSV won't be removed. It must be done manually#### Config settings# Which backend to use in order to collect information about dataset# relevance for the particular search query. Possible values are:# &quot;redis-permanent&quot;, &quot;redis-daily&quot;# (optional, default: redis-daily).ckanext.search_tweaks.query_relevance.backend = redis-permanent# How long(in days) information about dataset visits will be stored in order to# update relevance of dataset in search query.# (optional, default: 90).ckanext.search_tweaks.query_relevance.daily.age = 90# Solr boost function with $field placeholder that will be replaced by# the correspoinding field name# (optional, default: &quot;scale(def($field,0),1,1.2)&quot;).ckanext.search_tweaks.query_relevance.boost_function = recip($field,1,1000,1000)# Prefix of the numeric field defined in Solr schema. This field will hold# dataset's relevance for the given query.# (optional, default: query_relevance_).ckanext.search_tweaks.query_relevance.field_prefix = custom_score_---### &lt;a id=&quot;search_tweaks_field_relevance&quot;&gt;&lt;/a&gt; search_tweaks_field_relevanceIncreases the relevance of a dataset depending on value of its *numeric*field. For now it's impossible to promote dataset using field with textual type.No magic here either, this plugin allows you to specify Solr's boost functionthat will be used during all the searches. One can achieve exactly the sameresult using `ISearchTweaks.get_search_boost_fn`. But I expect this option tobe used often, so there is a possibility to update relevance without any extraline of code.#### Config settings# Solr boost function for static numeric field# (optional, default: None).ckanext.search_tweaks.field_relevance.boost_function = pow(promoted_level,2)# Field with dataset promotion level# (optional, default: promotion_level).ckanext.search_tweaks.field_relevance.blueprint.promotion.field_name = promotion# Register pacakge promotion route# (optional, default: False).ckanext.search_tweaks.field_relevance.blueprint.promotion.enabled = true#### Auth functionssearch_tweaks_field_relevance_promote: access package promotion route. Calls `package_update` by default.---### &lt;a id=&quot;search_tweaks_spellcheck&quot;&gt;&lt;/a&gt; search_tweaks_spellcheckExposes search suggestions from the Solr's spellcheck component to CKANtemplates. This plugin doesn't do much and mainly relies on the Solr's built-infunctionality. Thus you have to make a lot of changes inside Solr in order touse it:- `solrconfig.xml`. Configure spellcheck component. Search for `&lt;searchComponent  name=&quot;spellcheck&quot; class=&quot;solr.SpellCheckComponent&quot;&gt;` section and add the  following item under it:&lt;lst name=&quot;spellchecker&quot;&gt;&lt;str name=&quot;name&quot;&gt;did_you_mean&lt;/str&gt;&lt;str name=&quot;field&quot;&gt;did_you_mean&lt;/str&gt;&lt;str name=&quot;buildOnCommit&quot;&gt;false&lt;/str&gt;&lt;/lst&gt;- Add cron job that will update suggestions dictionary periodically:ckan search-tweaks spellcheck rebuild- `solrconfig.xml`. Add spellcheck component to the search handler (`&lt;requestHandler  name=&quot;/select&quot; class=&quot;solr.SearchHandler&quot;&gt;`):&lt;arr name=&quot;last-components&quot;&gt;&lt;str&gt;spellcheck&lt;/str&gt;&lt;/arr&gt;- Define spellcheck field in the schema. If you want to use an existing  field(`text` for example), change `&lt;str name=&quot;field&quot;&gt;did_you_mean&lt;/str&gt;`  value inside `solrconfig.xml` to the name of the selected field instead.&lt;field name=&quot;did_you_mean&quot; type=&quot;textgen&quot; indexed=&quot;true&quot; multiValued=&quot;true&quot; /&gt;- **Note:** skip if you've decided to use an existing field in the previous step.  &lt;br/&gt;  Copy meaningfull values into this field:&lt;copyField source=&quot;title&quot; dest=&quot;did_you_mean&quot;/&gt;&lt;copyField source=&quot;notes&quot; dest=&quot;did_you_mean&quot;/&gt;&lt;copyField source=&quot;res_name&quot; dest=&quot;did_you_mean&quot;/&gt;&lt;copyField source=&quot;res_description&quot; dest=&quot;did_you_mean&quot;/&gt;&lt;copyField source=&quot;extras_*&quot; dest=&quot;did_you_mean&quot;/&gt;After that you have to restart Solr service and rebuild search index:ckan search-index rebuildNow you can use `spellcheck_did_you_mean` template helper that returns bettersearch query when available instead of the current one. Consider including`search_tweaks/did_you_mean.html` fragment under search form.#### Config settings# Do not show suggestions that have fewer results than current query# (optional, default: true).ckanext.search_tweaks.spellcheck.more_results_only = off# How many different suggestions you expect to see for query# (optional, default: 1).ckanext.search_tweaks.spellcheck.max_suggestions = 3#### CLIspellcheck rebuild - rebuild/reload spellcheck dictionary.---&lt;!--### &lt;a id=&quot;search_tweaks_advanced_search&quot;&gt;&lt;/a&gt; search_tweaks_advanced_searchConfigure `ckanext-composite-search` for the basic usage. One need`composite_search default_composite_search` plugins enabled in order to usethis plugin. It registers `advanced_search/search_form.html` snippet which canbe just used instead of `search_input` block of CKAN's`snippets/search_form.html`. It can take a number of parameters, check itscontent for details.--&gt;## Developer installationTo install ckanext-search-tweaks for development, activate your CKAN virtualenv anddo:    git clone https://github.com/DataShades/ckanext-search-tweaks.git    cd ckanext-search-tweaks    python setup.py develop    pip install -r dev-requirements.txt## TestsApart from the default configuration for CKAN testing, you have to create`ckan_search_tweaks` Solr's core, replace its schema with`ckanext/search_tweaks/tests/schema.xml` and make changes to `solrconfig.xml`that are required by `search_tweaks_spellcheck`.To run the tests, do:    pytest --ckan-ini=test.ini ckanext/search_tweaks/tests## License[AGPL](https://www.gnu.org/licenses/agpl-3.0.en.html)</longdescription>
</pkgmetadata>