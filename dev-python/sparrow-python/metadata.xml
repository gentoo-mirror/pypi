<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sparrow-python[![image](https://img.shields.io/badge/Pypi-0.1.5-green.svg)](https://pypi.org/project/sparrow-python)[![image](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/)[![image](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)[![image](https://img.shields.io/badge/author-kunyuan-orange.svg?style=flat-square&amp;logo=appveyor)](https://github.com/beidongjiedeguang)-------------------------## Install```bashpip install sparrow-python# Or dev versionpip install sparrow-python[dev]# Orpip install -e .# Orpip install -e .[dev]```## Usage### Multiprocessing SyncManagerOpen server first:```bash$ spr start-server```The defualt port `50001`.(Process1) productor:```pythonfrom sparrow.multiprocess.client import Clientclient = Client(port=50001)client.update_dict({'a': 1, 'b': 2})```(Process2) consumer:```pythonfrom sparrow.multiprocess.client import Clientclient = Client(port=50001)print(client.get_dict_data())&gt;&gt; &gt; {'a': 1, 'b': 2}```### Common tools- **Kill process by port**```bash$ spr kill {port}```- **pack &amp; unpack**    support archive format: &quot;zip&quot;, &quot;tar&quot;, &quot;gztar&quot;, &quot;bztar&quot;, or &quot;xztar&quot;.```bash$ spr pack pack_dir``````bash$ spr unpack filename extract_dir```- **Scaffold**```bash$ spr create awosome-project```### Some useful functions&gt; `sparrow.relp`  &gt; Relative path, which is used to read or save files more easily.&gt; `sparrow.performance.MeasureTime`  &gt; For measuring time (including gpu time)&gt; `sparrow.performance.get_process_memory`  &gt; Get the memory size occupied by the process&gt; `sparrow.performance.get_virtual_memory`  &gt; Get virtual machine memory information&gt; `sparrow.add_env_path`  &gt; Add python environment variable (use relative file path)### Safe logger in `multiprocessing````pythonfrom sparrow.log import Loggerimport numpy as nplogger = Logger(name='train-log', log_dir='./logs', )logger.info(&quot;hello&quot;, &quot;numpy:&quot;, np.arange(10))logger2 = Logger.get_logger('train-log')print(id(logger2) == id(logger))&gt;&gt; &gt; True```</longdescription>
</pkgmetadata>