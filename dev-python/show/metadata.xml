<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>| |version| |versions| |impls| |wheel| |coverage|.. |version| image:: http://img.shields.io/pypi/v/show.svg?style=flat    :alt: PyPI Package latest release    :target: https://pypi.python.org/pypi/show.. |versions| image:: https://img.shields.io/pypi/pyversions/show.svg    :alt: Supported versions    :target: https://pypi.python.org/pypi/show.. |impls| image:: https://img.shields.io/pypi/implementation/show.svg    :alt: Supported implementations    :target: https://pypi.python.org/pypi/show.. |wheel| image:: https://img.shields.io/pypi/wheel/show.svg    :alt: Wheel packaging support    :target: https://pypi.python.org/pypi/show.. |coverage| image:: https://img.shields.io/badge/test_coverage-80%25-00BFFF.svg    :alt: Test line coverage    :target: https://pypi.python.org/pypi/show::    from show import *    x = 12    nums = list(range(4))    show(x, nums)yields::    x: 12  nums: [0, 1, 2, 3]Output is self-labeled, so you don't spend timedoing that yourself.Debug Printing==============Logging, assertions, unit tests, and interactive debuggers are all greattools. But sometimes you just need to print values as a program runs to seewhat's going on. Every language has features to print text, but they'rerarely customized for printing debugging information. ``show`` is. Itprovides a simple, DRY mechanism to &quot;show what's going on.&quot;Sometimes programs print so that users can see things, and sometimes theyprint so that developers can. ``show()`` is for developers, helping rapidlyprint the current state of variables in ways that easily identify whatvalue is being printed, without a lot of wasted effort. It replaces thecraptastic repetitiveness of::    print &quot;x: {0!r}&quot;.format(x)with::    show(x)And if you have a lot of output flowing by, and it's hardto see your debugging output, try::    show(x, y, z, style='red')And now you have debug output that clearly stands out from the rest.But &quot;debug printing is so very 1989!&quot; you may say.  &quot;We now have logging,logging, embedded assertions, unit tests, ...&quot; Yes, that's true. But wonderfulas those things are, just showing your current program values is oftenwhat the doctor ordered.And Much More=============While avoiding a few extra characters of typing and a little extraprogram complexity is nice (very nice, actually), ``show`` does muchmore. As just a taste, ``show.changed()`` displays local values that havechanged since it was last run::    def f():        x = 4        show.changed()        x += 1        retval = x * 3        show.changed()        return retvalWhen run will display::    x: 4    x: 5  retval: 15Functions decorated with ``@show.inout`` show youinput parameters as the function is called, then the returnvalue later.::    @show.inout    def g(a):        b = 3        a += b        show.changed()        return a    g(4)Displays::    g(a=4)    a: 7  b: 3    g(a=4) -&gt; 7(If you want this terser, decorate with ``@show.inout(only='out')``.)If you run `show.prettyprint()` after importing, or alternatively ifyou import with ``from show.pretty import *``, the`Pygments &lt;http://pygments.org/&gt;`_ syntax highlighter will (if installed),be used tocolorize data values. This can significantly helpsee complex lists and dictionaries.Finally, ``show`` does normal output too, just like`say &lt;https://pypi.python.org/pypi/say&gt;`_ (with all of itshigh-level text formatting)::    wizard = &quot;Gandalf&quot;    show(&quot;You have no power here, {wizard}!&quot;)Prints::    You have no power here, Gandalf!Long story short, ``show`` is a strong debugging companion that prints themaximum amount of useful informationwith the minimum amount of fuss.For more, see `the full documentation at Read the Docs&lt;http://show.readthedocs.org/en/latest/&gt;`_.New and Notable===============Try ``from show.pretty import *``.IPython is now well-supported, either in a terminal window or aJupyter Notebook. In other words, ``show`` now supports interactiveusage. (The plain Python REPL is still only marginally supported, givensignificant weaknesses in its introspection support.)A relatively new capability is to differentially set the formatting parameters ona method by method basis. For example, if you want to see separatorsin green and function call/return annotations in red::    show.sep.set(style='green')    show.inout.set(style='red')You could long do this on a call-by-call basis, but being able to set thedefaults just for specific methods allows you to get more formatting inwith fewer characters typed.  This capability is available on a limitedbasis: primarily for format-specific calls (``blanklines``, ``hr``, ``sep``,and ``title``) and for one core inspection call (the ``inout`` decorator).It will be extended, and mapped back to underlying ``say`` and ``options``features over time... warning::    There are some outstanding issues with Windows.    Also, when evaluating ``show``, do so    from a program file or from IPython, not from the plain    interactive REPL. ``show`` depends on introspection, which    the plain REPL simply doesn't provide with any quality.</longdescription>
</pkgmetadata>