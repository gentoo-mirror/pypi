<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># webstack-django-sorting## What?`webstack-django-sorting` is a Django app which allows for easy sorting ofdata tables. You don't need to change anything to your views to use it. Itprovides sorting links for table headers. It is the perfect companion of[django-pagination](https://github.com/zyga/django-pagination).There are other powerful projects to sort tables such as[django-tables2](https://django-tables2.readthedocs.io/) but I don't like thehigh level `render_table` tag because it requires to define the CSS in`Table` classes or to write custom templates.A demonstration of the features is provided in `testproj` directory. The file`testproj/README.md` provides information on how to use it.## Features- Django or Jinja2 templates- Django ORM or Python sorting- Switches between ascending, descending, and no sorting- Provides links to sort on different criterions- Visual feedback on applied ordering- Supports 3.6+- Supports translation of link titlesTo upgrade to `webstack-django-sorting` v1.0.0+, you must remove the old middleware`webstack_django_sorting.middleware.SortingMiddleware` from `MIDDLEWARE_CLASSES` list.## How to use it in your projectThe provide is available on PyPI:```shellpip install webstack_django_sorting```The project provides examples of integration with Django and Jinja2 templates.## For Django templates1. Add the application to the `INSTALLED_APPS` list:    ```python    INSTALLED_APPS = [        # ...        'webstack_django_sorting',    ]    ```2. Check the request context processor is loaded in `TEMPLATES` options:    ```python    TEMPLATES = [        {            'BACKEND': 'django.template.backends.django.DjangoTemplates',            'DIRS': [],            'APP_DIRS': True,            'OPTIONS': {                'context_processors': [                    # ...                    'django.template.context_processors.request',                    # ...                ],            },        },    ]    ```3. Add this line at the top of your template to load the sorting tags:    ```html    {% load sorting_tags %}    ```4. Decide on a variable that you would like to sort, and use the   autosort tag on that variable before iterating over it:    ```html    {% autosort object_list %}    ```   You can pass the option `nulls=first` (or `nulls=last`) to explicitly define   the ordering of NULL (not supported by all databases,   [Indexing ASC, DESC and NULLS FIRST/LAST](https://use-the-index-luke.com/sql/sorting-grouping/order-by-asc-desc-nulls-last))5. Now, you want to display different headers with links to sort   your objects_list:    ```html    &lt;tr&gt;        &lt;th&gt;{% anchor first_name _(&quot;Name&quot;) %}&lt;/th&gt;        &lt;th&gt;{% anchor creation_date _(&quot;Creation&quot;) %}&lt;/th&gt;    &lt;/tr&gt;    ```   The first argument is a field or an attribute of the objects list, and the   second one (optional) is a title that would be displayed. The previous   snippet will be rendered like this in French:    ```html    &lt;tr&gt;        &lt;th&gt;&lt;a href=&quot;/path/to/your/view/?sort=first_name&quot; title=&quot;Nom&quot;&gt;Nom&lt;/a&gt;&lt;/th&gt;        &lt;th&gt;&lt;a href=&quot;/path/to/your/view/?sort=creation_date&quot; title=&quot;Création&quot;&gt;Création&lt;/a&gt;&lt;/th&gt;    &lt;/tr&gt;    ```   If your application doesn't support internationalization, you can use a   simple `{% anchor first_name Name %}`.## For Jinja2 templates1. Define the environment in the `TEMPLATES` options:    ```python    TEMPLATES = {        {            &quot;BACKEND&quot;: &quot;django.template.backends.jinja2.Jinja2&quot;,            &quot;DIRS&quot;: [],            &quot;APP_DIRS&quot;: True,            &quot;OPTIONS&quot;: {                &quot;environment&quot;: &quot;testproj.testapp.jinja2.env.JinjaEnvironment&quot;,            },        },    ]    ````2. Your environment file should add `sorting_anchor` and `sort_queryset` to globals:    ```python    from jinja2.environment import Environment    from webstack_django_sorting.jinja2_globals import sorting_anchor, sort_queryset    class JinjaEnvironment(Environment):        def __init__(self, **kwargs):            super().__init__(**kwargs)            self.globals[&quot;sorting_anchor&quot;] = sorting_anchor            self.globals[&quot;sort_queryset&quot;] = sort_queryset    ```3. Now, you can generate header links to sort your queryset.    ```html    &lt;tr&gt;        &lt;th&gt;{{ sorting_anchor(request, &quot;created_on&quot;, &quot;Date&quot;) }}&lt;/th&gt;        &lt;!--...--&gt;    &lt;tr&gt;    ```4. The queryset should be wrapped with `sort_queryset` to use the GET request arguments for sorting:    ```html    {% for secret_file in sort_queryset(request, secret_files) %}    &lt;!--...--&gt;    {% endfor %}    ```That's it!## SettingsThe library provides a few settings that you can define in the Django settings of your project:- `DEFAULT_SORT_UP`, the HTML character to display the up symbol in the column headers (' &amp;uarr;' by default).- `DEFAULT_SORT_DOWN`, the HTML character to display the down symbol in the column headers (' &amp;darr;' by default).- `SORTING_INVALID_FIELD_RAISES_404`, if true, a 404 response will be returned on invalid use of query parameters (false by default).</longdescription>
</pkgmetadata>