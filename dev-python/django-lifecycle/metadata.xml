<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Lifecycle Hooks[![Package version](https://badge.fury.io/py/django-lifecycle.svg)](https://pypi.python.org/pypi/django-lifecycle)[![Python versions](https://img.shields.io/pypi/status/django-lifecycle.svg)](https://img.shields.io/pypi/status/django-lifecycle.svg/)[![Python versions](https://img.shields.io/pypi/pyversions/django-lifecycle.svg)](https://pypi.org/project/django-lifecycle/)![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-lifecycle)This project provides a `@hook` decorator as well as a base model and mixin to add lifecycle hooks to your Django models. Django's built-in approach to offering lifecycle hooks is [Signals](https://docs.djangoproject.com/en/dev/topics/signals/). However, my team often finds that Signals introduce unnecessary indirection and are at odds with Django's &quot;fat models&quot; approach.**Django Lifecycle Hooks** supports:* Python 3.7, 3.8, 3.9, 3.10, 3.11, and 3.12* Django 2.2, 3.2, 4.0, 4.1, 4.2, and 5.0In short, you can write model code like this:```pythonfrom django_lifecycle import LifecycleModel, hook, BEFORE_UPDATE, AFTER_UPDATEclass Article(LifecycleModel):    contents = models.TextField()    updated_at = models.DateTimeField(null=True)    status = models.ChoiceField(choices=['draft', 'published'])    editor = models.ForeignKey(AuthUser)    @hook(BEFORE_UPDATE, when='contents', has_changed=True)    def on_content_change(self):        self.updated_at = timezone.now()    @hook(AFTER_UPDATE, when=&quot;status&quot;, was=&quot;draft&quot;, is_now=&quot;published&quot;)    def on_publish(self):        send_email(self.editor.email, &quot;An article has published!&quot;)```Instead of overriding `save` and `__init__` in a clunky way that hurts readability:```python    # same class and field declarations as above ...    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self._orig_contents = self.contents        self._orig_status = self.status    def save(self, *args, **kwargs):        if self.pk is not None and self.contents != self._orig_contents:            self.updated_at = timezone.now()        super().save(*args, **kwargs)        if self.status != self._orig_status:            send_email(self.editor.email, &quot;An article has published!&quot;)```---**Documentation**: &lt;a href=&quot;https://rsinger86.github.io/django-lifecycle/&quot; target=&quot;_blank&quot;&gt;https://rsinger86.github.io/django-lifecycle&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/rsinger86/django-lifecycle/&quot; target=&quot;_blank&quot;&gt;https://github.com/rsinger86/django-lifecycle&lt;/a&gt;---# ChangelogSee [Changelog](CHANGELOG.md)# TestingTests are found in a simplified Django project in the `/tests` folder. Install the project requirements and do `./manage.py test` to run them.# LicenseSee [License](LICENSE.md).</longdescription>
</pkgmetadata>