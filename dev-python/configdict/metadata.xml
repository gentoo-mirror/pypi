<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>configdict==========Documentation-------------https://configdict.readthedocs.ioInstallation------------    $ pip install configdictCheckedDict-----------A dictionary based on a default prototype. A CheckedDict can only define``key:value`` pairs which are already present in the default. It is possible todefine a docstring for each key and different restrictions for the valuesregarding possible values, ranges and type. A CheckedDict is useful forconfiguration settings.ConfigDict----------Based on CheckedDict, a ConfigDict is a persistent, unique dictionary. It issaved under the config folder determined by the OS and it is updated with eachmodification. It is useful for implementing configuration of a module / library/ app, where there is a default/initial state and the user needs to be able toconfigure global settings which must be persisted between sessions (similar tothe settings in an application)Example-------.. code-block:: python   config = ConfigDict(&quot;myproj.subproj&quot;)   config.addKey(&quot;keyA&quot;, 10, doc=&quot;documentaion of keyA&quot;)   config.addKey(&quot;keyB&quot;, 0.5, range=(0, 1))   config.addKey(&quot;keyC&quot;, &quot;blue&quot;, choices=(&quot;blue&quot;, &quot;red&quot;),                 doc=&quot;documentation of keyC&quot;)   config.load()Alternatively, a ConfigDict can be created all at once:.. code-block:: python                   config = ConfigDict(&quot;myapp&quot;,       default = {           'font-size': 10.0,           'font-family': &quot;Monospace&quot;,           'port' : 9100,       },       validator = {           'font-size::range' : (8, 24),           'port::range' : (9000, 65000),           'font-family::choices' : {'Roboto', 'Monospace'},       },       docs = {           'port': 'The port number to listen to',           'font-size': 'The size of the font, in pixels'       }   )This will create the dictionary and load any persisted version. Any savedmodifications will override the default values. Whenever the user changes anyvalue (via ``config[key] = newvalue``) the dictionary will be saved.In all other respects a ConfigDict behaves like a normal dictionary.</longdescription>
</pkgmetadata>