<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;p&gt;    &lt;a align=&quot;center&quot; href=&quot;&quot; target=&quot;_blank&quot;&gt;      &lt;img        width=&quot;100%&quot;        src=&quot;https://media.roboflow.com/open-source/supervision/rf-supervision-banner.png?updatedAt=1678995927529&quot;      &gt;    &lt;/a&gt;  &lt;/p&gt;  &lt;br&gt;  [notebooks](https://github.com/roboflow/notebooks) | [inference](https://github.com/roboflow/inference) | [autodistill](https://github.com/autodistill/autodistill) | [collect](https://github.com/roboflow/roboflow-collect)  &lt;br&gt;  [![version](https://badge.fury.io/py/supervision.svg)](https://badge.fury.io/py/supervision)  [![downloads](https://img.shields.io/pypi/dm/supervision)](https://pypistats.org/packages/supervision)  [![license](https://img.shields.io/pypi/l/supervision)](https://github.com/roboflow/supervision/blob/main/LICENSE.md)  [![python-version](https://img.shields.io/pypi/pyversions/supervision)](https://badge.fury.io/py/supervision)  [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roboflow/supervision/blob/main/demo.ipynb)&lt;/div&gt;## üëã hello**We write your reusable computer vision tools.** Whether you need to load your dataset from your hard drive, draw detections on an image or video, or count how many detections are in a zone. You can count on us! ü§ù## üíª installPip install the supervision package in a[**3.11&gt;=Python&gt;=3.8**](https://www.python.org/) environment.```bashpip install supervision[desktop]```Read more about desktop, headless, and local installation in our [guide](https://roboflow.github.io/supervision/).## üî• quickstart### [detections processing](https://roboflow.github.io/supervision/detection/core/)```python&gt;&gt;&gt; import supervision as sv&gt;&gt;&gt; from ultralytics import YOLO&gt;&gt;&gt; model = YOLO('yolov8s.pt')&gt;&gt;&gt; result = model(IMAGE)[0]&gt;&gt;&gt; detections = sv.Detections.from_ultralytics(result)&gt;&gt;&gt; len(detections)5```&lt;details close&gt;&lt;summary&gt;üëâ more detections utils&lt;/summary&gt;- Easily switch inference pipeline between supported object detection/instance segmentation models    ```python    &gt;&gt;&gt; import supervision as sv    &gt;&gt;&gt; from segment_anything import sam_model_registry, SamAutomaticMaskGenerator    &gt;&gt;&gt; sam = sam_model_registry[MODEL_TYPE](checkpoint=CHECKPOINT_PATH).to(device=DEVICE)    &gt;&gt;&gt; mask_generator = SamAutomaticMaskGenerator(sam)    &gt;&gt;&gt; sam_result = mask_generator.generate(IMAGE)    &gt;&gt;&gt; detections = sv.Detections.from_sam(sam_result=sam_result)    ```- [Advanced filtering](https://roboflow.github.io/supervision/quickstart/detections/)    ```python    &gt;&gt;&gt; detections = detections[detections.class_id == 0]    &gt;&gt;&gt; detections = detections[detections.confidence &gt; 0.5]    &gt;&gt;&gt; detections = detections[detections.area &gt; 1000]    ```- Image annotation    ```python    &gt;&gt;&gt; import supervision as sv    &gt;&gt;&gt; box_annotator = sv.BoxAnnotator()    &gt;&gt;&gt; annotated_frame = box_annotator.annotate(    ...     scene=IMAGE,    ...     detections=detections    ... )    ```&lt;/details&gt;### [datasets processing](https://roboflow.github.io/supervision/dataset/core/)```python&gt;&gt;&gt; import supervision as sv&gt;&gt;&gt; dataset = sv.DetectionDataset.from_yolo(...     images_directory_path='...',...     annotations_directory_path='...',...     data_yaml_path='...'... )&gt;&gt;&gt; dataset.classes['dog', 'person']&gt;&gt;&gt; len(dataset)1000```&lt;details close&gt;&lt;summary&gt;üëâ more dataset utils&lt;/summary&gt;- Load object detection/instance segmentation datasets in one of the supported formats    ```python    &gt;&gt;&gt; dataset = sv.DetectionDataset.from_yolo(    ...     images_directory_path='...',    ...     annotations_directory_path='...',    ...     data_yaml_path='...'    ... )    &gt;&gt;&gt; dataset = sv.DetectionDataset.from_pascal_voc(    ...     images_directory_path='...',    ...     annotations_directory_path='...'    ... )    &gt;&gt;&gt; dataset = sv.DetectionDataset.from_coco(    ...     images_directory_path='...',    ...     annotations_path='...'    ... )    ```- Loop over dataset entries    ```python    &gt;&gt;&gt; for name, image, labels in dataset:    ...     print(labels.xyxy)    array([[404.      , 719.      , 538.      , 884.5     ],           [155.      , 497.      , 404.      , 833.5     ],           [ 20.154999, 347.825   , 416.125   , 915.895   ]], dtype=float32)    ```- Split dataset for training, testing, and validation    ```python    &gt;&gt;&gt; train_dataset, test_dataset = dataset.split(split_ratio=0.7)    &gt;&gt;&gt; test_dataset, valid_dataset = test_dataset.split(split_ratio=0.5)    &gt;&gt;&gt; len(train_dataset), len(test_dataset), len(valid_dataset)    (700, 150, 150)    ```- Merge multiple datasets    ```python    &gt;&gt;&gt; ds_1 = sv.DetectionDataset(...)    &gt;&gt;&gt; len(ds_1)    100    &gt;&gt;&gt; ds_1.classes    ['dog', 'person']    &gt;&gt;&gt; ds_2 = sv.DetectionDataset(...)    &gt;&gt;&gt; len(ds_2)    200    &gt;&gt;&gt; ds_2.classes    ['cat']    &gt;&gt;&gt; ds_merged = sv.DetectionDataset.merge([ds_1, ds_2])    &gt;&gt;&gt; len(ds_merged)    300    &gt;&gt;&gt; ds_merged.classes    ['cat', 'dog', 'person']    ```- Save object detection/instance segmentation datasets in one of the supported formats    ```python    &gt;&gt;&gt; dataset.as_yolo(    ...     images_directory_path='...',    ...     annotations_directory_path='...',    ...     data_yaml_path='...'    ... )    &gt;&gt;&gt; dataset.as_pascal_voc(    ...     images_directory_path='...',    ...     annotations_directory_path='...'    ... )    &gt;&gt;&gt; dataset.as_coco(    ...     images_directory_path='...',    ...     annotations_path='...'    ... )    ```- Convert labels between supported formats    ```python    &gt;&gt;&gt; sv.DetectionDataset.from_yolo(    ...     images_directory_path='...',    ...     annotations_directory_path='...',    ...     data_yaml_path='...'    ... ).as_pascal_voc(    ...     images_directory_path='...',    ...     annotations_directory_path='...'    ... )    ```- Load classification datasets in one of the supported formats    ```python    &gt;&gt;&gt; cs = sv.ClassificationDataset.from_folder_structure(    ...     root_directory_path='...'    ... )    ```- Save classification datasets in one of the supported formats    ```python    &gt;&gt;&gt; cs.as_folder_structure(    ...     root_directory_path='...'    ... )    ```&lt;/details&gt;### [model evaluation](https://roboflow.github.io/supervision/metrics/detection/)```python&gt;&gt;&gt; import supervision as sv&gt;&gt;&gt; dataset = sv.DetectionDataset.from_yolo(...)&gt;&gt;&gt; def callback(image: np.ndarray) -&gt; sv.Detections:...     ...&gt;&gt;&gt; confusion_matrix = sv.ConfusionMatrix.benchmark(...     dataset = dataset,...     callback = callback... )&gt;&gt;&gt; confusion_matrix.matrixarray([    [0., 0., 0., 0.],    [0., 1., 0., 1.],    [0., 1., 1., 0.],    [1., 1., 0., 0.]])```&lt;details close&gt;&lt;summary&gt;üëâ more metrics&lt;/summary&gt;- Mean average precision (mAP) for object detection tasks.    ```python    &gt;&gt;&gt; import supervision as sv    &gt;&gt;&gt; dataset = sv.DetectionDataset.from_yolo(...)    &gt;&gt;&gt; def callback(image: np.ndarray) -&gt; sv.Detections:    ...     ...    &gt;&gt;&gt; mean_average_precision = sv.MeanAveragePrecision.benchmark(    ...     dataset = dataset,    ...     callback = callback    ... )    &gt;&gt;&gt; mean_average_precision.map50_95    0.433    ```&lt;/details&gt;## üé¨ tutorials&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://youtu.be/4Q3ut7vqD5o&quot; title=&quot;Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking&quot;&gt;&lt;img src=&quot;https://github.com/roboflow/supervision/assets/26109316/54afdf1c-218c-4451-8f12-627fb85f1682&quot; alt=&quot;Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking&quot; width=&quot;300px&quot; align=&quot;left&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://youtu.be/4Q3ut7vqD5o&quot; title=&quot;Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking&quot;&gt;&lt;strong&gt;Traffic Analysis with YOLOv8 and ByteTrack - Vehicle Detection and Tracking&lt;/strong&gt;&lt;/a&gt;&lt;div&gt;&lt;strong&gt;Created: 6 Sep 2023&lt;/strong&gt; | &lt;strong&gt;Updated: 6 Sep 2023&lt;/strong&gt;&lt;/div&gt;&lt;br/&gt; In this video, we explore real-time traffic analysis using YOLOv8 and ByteTrack to detect and track vehicles on aerial images. Harnessing the power of Python and Supervision, we delve deep into assigning cars to specific entry zones and understanding their direction of movement. By visualizing their paths, we gain insights into traffic flow across bustling roundabouts... &lt;/p&gt;&lt;br/&gt;&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://youtu.be/D-D6ZmadzPE&quot; title=&quot;SAM - Segment Anything Model by Meta AI: Complete Guide&quot;&gt;&lt;img src=&quot;https://github.com/SkalskiP/SkalskiP/assets/26109316/6913ff11-53c6-4341-8d90-eaff3023c3fd&quot; alt=&quot;SAM - Segment Anything Model by Meta AI: Complete Guide&quot; width=&quot;300px&quot; align=&quot;left&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://youtu.be/D-D6ZmadzPE&quot; title=&quot;SAM - Segment Anything Model by Meta AI: Complete Guide&quot;&gt;&lt;strong&gt;SAM - Segment Anything Model by Meta AI: Complete Guide&lt;/strong&gt;&lt;/a&gt;&lt;div&gt;&lt;strong&gt;Created: 11 Apr 2023&lt;/strong&gt; | &lt;strong&gt;Updated: 11 Apr 2023&lt;/strong&gt;&lt;/div&gt;&lt;br/&gt; Discover the incredible potential of Meta AI's Segment Anything Model (SAM)! We dive into SAM, an efficient and promptable model for image segmentation, which has revolutionized computer vision tasks. With over 1 billion masks on 11M licensed and privacy-respecting images, SAM's zero-shot performance is often competitive with or even superior to prior fully supervised results... &lt;/p&gt;## üíú built with supervisionDid you build something cool using supervision? [Let us know!](https://github.com/roboflow/supervision/discussions/categories/built-with-supervision)https://user-images.githubusercontent.com/26109316/207858600-ee862b22-0353-440b-ad85-caa0c4777904.mp4https://github.com/roboflow/supervision/assets/26109316/c9436828-9fbf-4c25-ae8c-60e9c81b3900## üìö documentationVisit our [documentation](https://roboflow.github.io/supervision) page to learn how supervision can help you build computer vision applications faster and more reliably.## üèÜ contributionWe love your input! Please see our [contributing guide](https://github.com/roboflow/supervision/blob/main/CONTRIBUTING.md) to get started. Thank you üôè to all our contributors!&lt;br&gt;&lt;div align=&quot;center&quot;&gt;  &lt;div align=&quot;center&quot;&gt;      &lt;a href=&quot;https://youtube.com/roboflow&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/youtube.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949634652&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/roboflow-app.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949746649&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://www.linkedin.com/company/roboflow-ai/&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/linkedin.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949633691&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://docs.roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/knowledge.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949634511&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://disuss.roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/forum.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949633584&quot;            width=&quot;3%&quot;          /&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://blog.roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/blog.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949633605&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;/a&gt;  &lt;/div&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>