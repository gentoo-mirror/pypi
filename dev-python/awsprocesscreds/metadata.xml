<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================AWS Process Credential Providers================================.. image:: https://travis-ci.org/awslabs/awsprocesscreds.svg?branch=master   :target: https://travis-ci.org/awslabs/awsprocesscredsA collection of process-based credential providers to be used with the AWS CLIand related tools.This is an experimental package, breaking changes may occur on any minorversion bump.Installation------------The easiest way to install is to use pip::    pip install awsprocesscredsRequirements~~~~~~~~~~~~This package requires a version of python to be installed. Currently supportedpython versions are:* 2.7.9+* 3.3.x* 3.4.x* 3.5.x* 3.6.xSAML Forms-Based Authentication-------------------------------If you have a SAML identity provider, you can use `awsprocesscreds-saml` toconfigure programmatic access to your AWS resources. It has four requiredarguments:* ``-e / --endpoint`` - Your SAML idp endpoint.* ``-u / --username`` - Your SAML username.* ``-p / --provider`` - The name of your SAML provider. Currently okta and  adfs are supported.* ``-a / --role-arn``- The role arn you wish to assume. Your SAML provider  must be configured to give you access to this arn.This will cache your credentials by default, which will allow you to runmultiple commands without having to enter your password each time. You candisable the cache by specifying ``--no-cache``.Additionally, you can show logs by specifying ``-v`` or ``--verbose``.To configure this provider, you need create a profile using the``credential_process`` config variable. See the `AWS CLI Config docs`_for more details on this config option.Example okta configuration::    [profile okta]    region = us-west-2    credential_process = awsprocesscreds-saml -e https://example.okta.com/home/amazon_aws/blob/123 -u 'monty@example.com' -p okta -a arn:aws:iam::123456789012:role/okta-devExample adfs configuration::    [profile adfs]    region = us-west-2    credential_process = awsprocesscreds-saml -e 'https://corp.example.com/adfs/ls/IdpInitiatedSignOn.aspx?loginToRp=urn:amazon:webservices' -u Monty -p adfs -a arn:aws:iam::123456789012:role/ADFS-Dev.. _AWS CLI Config docs: http://docs.aws.amazon.com/cli/latest/topic/config-vars.html#cli-aws-help-config-varsCustom Providers----------------The mechanism this package uses to provide credentials is generally available,and not specific to this package. It can be used to implement any customcredential provider that will work with the AWS CLI, boto3, and other SDKs asthey implement support.A detailed breakdown of this mechanism along with a live demo of implementing acredential provider that hooks into the macOS keychain can be seen on thisrecorded talk from re:Invent 2017:`AWS CLI: 2107 and Beyond &lt;https://youtu.be/W8IyScUGuGI?t=1260&gt;`_The CLI will call the process provided as the value for ``credential_process``.This process must return credentials on stdout in the following JSON form::   {      &quot;Version&quot;: 1,      &quot;AccessKeyId&quot;: &quot;string&quot;,      &quot;SecretAccessKey&quot;: &quot;string&quot;,      &quot;SessionToken&quot;: &quot;string&quot;,      &quot;Expiration&quot;: &quot;2019-01-31T21:45:41+00:00&quot;   }Where ``Expiration`` is an RFC 3339 compatible timestamp. As the expirationtime nears, the process will be called again to get a new set of credentials.The ``Version`` denotes the version of this format, whose only current validvalue is ``1``. The remaining keys are the AWS credentials you wish to use.</longdescription>
</pkgmetadata>