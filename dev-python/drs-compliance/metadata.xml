<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># drs-compliance-suiteTests to verify the compliance of a DRS implementation with GA4GH Data Repository Service (DRS) specification. This compliance suite currently supports the following DRS versions and will aim to support more versions of DRS in the future.* DRS 1.2.0## Installations- [Python 3.x](https://www.python.org/downloads/) is required to run DRS Compliance Suite natively or using PyPI package.- [Docker Desktop](https://docs.docker.com/get-docker/) is required to run DRS Compliance Suite using a docker image.## Running DRS Compliance Suite### 1. NativelyInstall the packages from requirements.txt```cd drs-compliance-suitepip3 install -r requirements.txt```Add PYTHONPATH to env variables```export PYTHONPATH=&lt;absolute path to drs-compliance-suite&gt;```Run the compliance suite```python3 compliance_suite/report_runner.py --server_base_url &quot;http://localhost:8085/ga4gh/drs/v1&quot; --platform_name &quot;ga4gh starter kit drs&quot; --platform_description &quot;GA4GH reference implementation of DRS specification&quot; --drs_version &quot;1.2.0&quot; --config_file &quot;compliance_suite/config/config_samples/config_basic.json&quot; --serve --serve_port 56565```Note: This specific command is an example of running the compliance suite on a local deployment of DRS that is running on port 8085. \When running the compliance suite, it's important to configure the command line arguments according to the specific DRS implementation you're testing.Please refer to the [Command Line Arguments](#command-line-arguments) section for details on each of these arguments.### 2. Using PyPI PackageInstall the latest version of the `drs-compliance` PyPI package using pip3```pip3 install drs-compliance --upgrade```Run the compliance suite```drs-compliance --server_base_url &quot;http://localhost:8085/ga4gh/drs/v1&quot; --platform_name &quot;ga4gh starter kit drs&quot; --platform_description &quot;GA4GH reference implementation of DRS specification&quot; --drs_version &quot;1.2.0&quot; --config_file &quot;compliance_suite/config/config_samples/config_basic.json&quot; --serve --serve_port 56565```Note: This specific command is an example of running the compliance suite on a local deployment of DRS that is running on port 8085. \When running the compliance suite, it's important to configure the command line arguments according to the specific DRS implementation you're testing.Please refer to the [Command Line Arguments](#command-line-arguments) section for details on each of these arguments.### 3. Using DockerPull the docker image from dockerhub. \{version} specifies the version of the docker image being pulled. The latest version is 1.0.1```docker pull ga4gh/drs-compliance-suite:{version}```Run the compliance suite using the docker image```docker run -d --name drs-compliance-suite -v $(PWD)/output/:/usr/src/app/output/ -p 57568:57568 ga4gh/drs-compliance-suite:1.0.1 --server_base_url &quot;http://host.docker.internal:8085/ga4gh/drs/v1&quot; --platform_name &quot;ga4gh starter kit drs&quot; --platform_description &quot;GA4GH reference implementation of DRS specification&quot; --report_path &quot;./output/test-report.json&quot; --drs_version &quot;1.2.0&quot; --config_file &quot;compliance_suite/config/config_samples/config_none.json&quot; --serve --serve_port 57568```Note: This specific command is an example of running the compliance suite on a local deployment of DRS that is running on port 8085. \When running the compliance suite, it's important to configure the command line arguments according to the specific DRS implementation you're testing.Please refer to the [Command Line Arguments](#command-line-arguments) section for details on each of these arguments.### Command Line Arguments| Command Line Argument | Description | Optional/Required | Default Value || --------------------- | ----------- | ----------------- | ------------- || --server_base_url | The base URL of the DRS implementation that is being tested by the compliance suite. | Required | N/A || --platform_name | The name of the platform hosting the DRS server. | Required | N/A || --platform_description | The description of the platform hosting the DRS server. | Required | N/A || --drs_version | The version of DRS implemented by the DRS server taht is being tested for compliance. It can be one of the following: &quot;1.2.0&quot; | Required | N/A || --config_file | The file path of the JSON config file. The config file must contain auth information for service-info endpoint and different DRS objects. Refer to the [config-file](#config-file) section for more details. | Required | N/A || --report_path | The path of the output JSON report file. | Optional | &quot;./output/drs_compliance_report.json&quot; || --serve | If this flag is set to True, the output report is served as an HTML webpage at the port specified by `--serve_port`. | Optional | False || --serve-port | The port where the output report HTML is deployed. | Optional | 57568 |#### Config File:The compliance suite is provided with information for testing the DRS server through a user-provided JSON config file. This file includes the following details:- Authorization information for the service-info endpoint- A few DRS Object IDs that are present in the DRS server- Authorization information for each of these DRS objects- Indication of whether the DRS object is a bundle or a single blobHere's a template for a config file that can be used to configure these details:```{  &quot;service_info&quot;: {      &quot;auth_type&quot;: &quot;basic&quot;,      &quot;auth_token&quot;: &quot;dXNlcm5hbWU6cGFzc3dvcmQ=&quot;  },  &quot;drs_objects&quot; : [      {          &quot;drs_id&quot;: &quot;697907bf-d5bd-433e-aac2-1747f1faf366&quot;,          &quot;auth_type&quot;: &quot;none&quot;,          &quot;auth_token&quot;: &quot;&quot;,          &quot;is_bundle&quot;: false      },      {          &quot;drs_id&quot;: &quot;0bb9d297-2710-48f6-ab4d-80d5eb0c9eaa&quot;,          &quot;auth_type&quot;: &quot;basic&quot;,          &quot;auth_token&quot;: &quot;dXNlcm5hbWU6cGFzc3dvcmQ=&quot;,          &quot;is_bundle&quot;: false      },      {          &quot;drs_id&quot; : &quot;41898242-62a9-4129-9a2c-5a4e8f5f0afb&quot;,          &quot;auth_type&quot;: &quot;bearer&quot;,          &quot;auth_token&quot;: &quot;secret-bearer-token-1&quot;,          &quot;is_bundle&quot;: true      },      {          &quot;drs_id&quot; : &quot;a1dd4ae2-8d26-43b0-a199-342b64c7dff6&quot;,          &quot;auth_type&quot;: &quot;passport&quot;,          &quot;auth_token&quot;: &quot;43b-passport-a1d&quot;,          &quot;is_bundle&quot;: true      }  ]}```- The &quot;auth_type&quot; specifies the type of authorization, which can be one of the following: [&quot;basic&quot;, &quot;bearer&quot;, &quot;passport&quot;, &quot;none&quot;]- The &quot;auth_token&quot; field contains the corresponding authorization token value.- If &quot;auth_type&quot; is set to &quot;basic&quot;, the &quot;auth_token&quot; can be created by using base64 encoding.- If &quot;auth_type&quot; is set to &quot;none&quot;, the &quot;auth_token&quot; field should be left blank with a value of &quot;&quot;.- The &quot;is_bundle&quot; flag indicates whether the DRS object is a bundle or a single blob. If set to True, the object is a bundle, and if set to False, the object is a single blob.You can find some sample config files [here](./compliance_suite/config/config_samples)## UnittestingRun the unittests with coverage```pytest --cov=compliance_suite unittests/```## Changelog### v1.0.1* Fixed a bug in the docker deployment of DRS Compliance Suite * Update README documentation### v1.0.0* DRS Compliance Suite for [Data Repository Service v1.2.0](https://ga4gh.github.io/data-repository-service-schemas/preview/release/drs-1.2.0/docs/)</longdescription>
</pkgmetadata>