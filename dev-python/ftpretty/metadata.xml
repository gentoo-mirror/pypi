<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========ftpretty========.. image:: https://travis-ci.org/codebynumbers/ftpretty.png?branch=master   :target: https://travis-ci.org/codebynumbers/ftpretty.. image:: https://coveralls.io/repos/codebynumbers/ftpretty/badge.png?branch=master   :target: https://coveralls.io/r/codebynumbers/ftpretty?branch=master.. image:: https://img.shields.io/pypi/v/ftpretty.svg   :target: https://pypi.python.org/pypi/ftpretty.. image:: https://img.shields.io/pypi/dm/ftpretty.svg   :target: https://pypi.python.org/pypi/ftprettyA wrapper for simple FTP operations: get, put, list etc.The goal of this library is to provide a frictionless experience to FTPing filesin way similar to Amazon's s3cmd command line tool. The API should be intuitivewith the order of arguments reflecting the transfer direction of bytes.Transfers are assumed to be binary. Unrecognized commands fall through to the underlying FTP or FTP_TLS connection objectSupports python 2 &amp; 3, tested on 2.7 &amp; 3.5, 3.6, &amp; 3.7Examples--------.. code-block:: python    from ftpretty import ftpretty    # Minimal    f = ftpretty(host, user, pass)    # Advanced    # kwargs are passed to underlying FTP or FTP_TLS connection    # secure=True argument switches to an FTP_TLS connection default is False    # passive=False disable passive connection, True is the default    # Note: port is not supported as an argument in underlying FTP or FTP_TLS but support for    # handling port has been internally added in ftpretty by setting FTP.port or FTP_TLS.port    f = ftpretty(host, user, pass, secure=True, passive=False, timeout=10, port=2121)    # Get a file, save it locally    f.get('someremote/file/on/server.txt', '/tmp/localcopy/server.txt')    # Get a file and write to an open file    myfile = open('/tmp/localcopy/server.txt', 'wb')    f.get('someremote/file/on/server.txt', myfile)    # Get a file and return contents (in python 3 contents is bytes)    contents = f.get('someremote/file/on/server.txt')    # Get a tree on a remote directory (similar to shutil.copytree, without following symlinks    f.get_tree(&quot;/remote/tree/on/server&quot;, &quot;/tmp/local/tree&quot;)    # Put a local file to a remote location    # non-existent subdirectories will be created automatically    f.put('/tmp/localcopy/data.txt', 'someremote/file/on/server.txt')    # Put a local file into a remote directory, denoted by trailing slash on remote    f.put('/tmp/localcopy/data.txt', 'someremote/dir/')    # Put using an open file desciptor    myfile = open('/tmp/localcopy/data.txt', 'r')    f.put(myfile,  'someremote/file/on/server.txt')    # Put using string data (in python 3 contents should be bytes)    f.put(None,  'someremote/file/greeting.txt', contents='blah blah blah')    # Put a tree on a remote directory (similar to shutil.copytree, without following symlinks    f.put_tree(&quot;Local/tree&quot;, &quot;/remote/files/server&quot;)    # Return a list the files in a directory    f.list('someremote/folder')    ['a.txt', 'b.txt']    f.list('someremote/folder', extra=True)    [{'date': 'Feb 11',      'datetime': datetime.datetime(2014, 2, 11, 2, 3),      'directory': 'd',      'group': '1006',      'items': '3',      'name': 'a.txt',      'owner': '1005',      'perms': 'rwxr-xr-x',      'size': '4096',      'time': '02:03',      'year': '2014'},     {'date': 'Feb 11',      'datetime': datetime.datetime(2014, 2, 11, 2, 35),      'directory': 'd',      'group': '1006',      'items': '3',      'name': 'b.txt',      'owner': '1005',      'perms': 'rwxr-xr-x',      'size': '4096',      'time': '02:35',      'year': '2014'}]    # Change to remote directory    f.cd('someremote/folder')    # Create directory    f.mkdir('new_folder')    # Delete a remote file    f.delete('someremote/folder/file.txt')    # Close the connection    f.close()Changelog for ftpretty======================0.4.0 (2021-06-12)   - added get_tree command   - rewrote MockFTP for test to use in-memory filesystem0.3.5 (2021-02-03)   - bugfixes for directory listing time parsing0.3.4 (2020-10-01)   - mkdir() added0.3.3 (2020-07-27)   - parse alternate directory listing format0.3.1 (2019-12-01)   - accept port argument0.3.0 (2019-10-21)   - permissions parsing fix, upload tree fix0.2.4 (2016-12-14)   - upload_tree() added0.2.3 (2015-12-01)------------------   - rename() added0.2.2 (2015-07-23)------------------   - Setup fix0.2.1 (2015-05-20)------------------   - Python3 support added0.2.0 (2014-11-28)------------------   - Fixed an edge case for list   - PEP 8 fixes0.1.9 (2014-06-17)------------------   - Support for Python 2.60.1.8 (2014-04-08)------------------   - Add ability to filter dotfiles from directory list0.1.7 (2014-03-03)------------------   - Add tests0.1.6 (2014-02-17)------------------   - Parse file dates in list(extra=True) into datetime objects   - add dateutil dependency   - Add tests and mock FTP client   - Reformat authors file   - Some more examples   - Pep8ify0.1.5 (2014-02-17)------------------   - Version bump for PyPI0.1.4 (2014-02-17)------------------   - History fix0.1.3 (2014-02-17)------------------   - Add passive flag0.1.2 (2014-02-13)------------------   - Initial release.Authors=======- Rob Harrigan- Chris Cannon- Philippe Ombredanne- Panos Katseas- Niklas Bivald- Doug Van Horn- Oz N Tiram- pratham2003- Mouckeytou Moulongui- Veniamin Stepanov</longdescription>
</pkgmetadata>