<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SSMEnv---| master  | coverage | PyPI | Python | Licence || --- | --- | --- | --- | --- || [![Build Status](https://travis-ci.org/whisller/ssmenv.svg?branch=master)](https://travis-ci.org/whisller/ssmenv) | [![Coverage Status](https://coveralls.io/repos/github/whisller/ssmenv/badge.svg?branch=develop)](https://coveralls.io/github/whisller/ssmenv?branch=develop) | [![PyPI](https://img.shields.io/pypi/v/ssmenv.svg)](https://pypi.org/project/ssmenv/) | ![](https://img.shields.io/pypi/pyversions/ssmenv.svg) | ![](https://img.shields.io/pypi/l/ssmenv.svg) |---SSMEnv allows you to read parameters from [AWS Parameter Store](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html) and operate on results as on dictionary.## InstallationOnly requirement is to have `boto3` installed.```bashpip install ssmenv```## Reading parametersLet's assume we have two parameters `token` and `url` under `/service/my-service` namespace.Reading both parameters is as simple as initialising class object.```pythonfrom ssmenv import SSMEnvparams = SSMEnv(&quot;/service/my-service&quot;)```Done! Now we can access `/service/my-service/token` and `/service/my-service/url` in `params` variable!Now `params` can be accesses as python `dict` type.## Interacting with `SSMEnv` instanceAs you know by now, instance of `SSMEnv` can be accessed as any `dict` in python which means you can do things like:```pythonfrom ssmenv import SSMEnvparams = SSMEnv(&quot;/service/my-service&quot;)# 1. Access value directlytoken = params[&quot;SERVICE_MY_SERVICE_TOKEN&quot;]# 2. Get list of all loaded parameter's nameslist(params.keys())# 3. Get list of all loaded parameter's valueslist(params.values())# and so on...```## Fetching multiple namespaces at onceIn real world most often you will access parameters from different namespaces, you can easily do that with `SSMEnv`by passing `tuple````pythonfrom ssmenv import SSMEnvparams = SSMEnv(&quot;/service/my-service&quot;, &quot;/resource/mysql&quot;)```Now `params` will have all parameters from both `/service/my-service` and `/resource/mysql`.## AWS Lambda decoratorIf you use AWS lambda, you might find handy `ssmenv` decorator. It behaves same as if you would initialise `SSMEnv` by hand, but additionally it injects instance of `SSMEnv` into `context.params` attribute.```pythonfrom ssmenv import ssmenv@ssmenv(&quot;/service/my-service&quot;)def handler(event, context):    return context.params```## Populating `os.environ`You can hide use of `SSMEnv` by using `os.environ` dict.```pythonimport osfrom ssmenv import SSMEnvos.environ = {**os.environ, **SSMEnv(&quot;/service/my-service&quot;)}```## Removing common prefixesAccessing your parameters through whole namespaces can sometimes be not convenientespecially if you have very long names.Hence why you can use `prefixes` parameter, to make your code cleaner. ```pythonfrom ssmenv import SSMEnvparams = SSMEnv(&quot;/service/my-service&quot;, prefixes=(&quot;/service/my-service&quot;,))params[&quot;TOKEN&quot;]```## Returning dict in case there is no AWS contextYou might want to run your application without AWS, e.g. through docker on your local machine and mock parameters.For that you can use `no_aws_default` attribute.```pythonimport osfrom ssmenv import SSMEnvos.environ[&quot;SERVICE_MY_SERVICE_TOKEN&quot;] = &quot;mocked-token&quot; # that might be set in docker-composeparams = SSMEnv(&quot;/service/my-service&quot;, no_aws_default=os.environ)```## Passing your own boto3 clientYou can pass your own boto3 client as well.```pythonimport boto3from ssmenv import SSMEnvssm_client = boto3.client(&quot;ssm&quot;)params = SSMEnv(&quot;/service/my-service&quot;, ssm_client=ssm_client)```</longdescription>
</pkgmetadata>