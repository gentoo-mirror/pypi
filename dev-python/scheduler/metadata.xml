<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://gitlab.com/DigonIO/scheduler&quot;&gt;&lt;img alt=&quot;scheduler&quot; src=&quot;https://gitlab.com/DigonIO/scheduler/-/raw/master/doc/_assets/logo_name.svg&quot; width=&quot;60%&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A simple in-process python scheduler library with asyncio, threading and timezone support.Schedule tasks by their time cycles, fixed times, weekdays, dates, weights, offsets and executioncounts and automate Jobs.&lt;/p&gt;[![repository](https://img.shields.io/badge/src-GitLab-orange)](https://gitlab.com/DigonIO/scheduler)[![mirror](https://img.shields.io/badge/mirror-GitHub-orange)](https://github.com/DigonIO/scheduler)[![license](https://img.shields.io/badge/license-LGPLv3-orange)](https://gitlab.com/DigonIO/scheduler/-/blob/master/LICENSE)[![pipeline status](https://gitlab.com/DigonIO/scheduler/badges/master/pipeline.svg)](https://gitlab.com/DigonIO/scheduler/-/pipelines)[![coverage report](https://gitlab.com/DigonIO/scheduler/badges/master/coverage.svg)](https://gitlab.com/DigonIO/scheduler/-/pipelines)[![Code style: black](https://gitlab.com/DigonIO/scheduler/-/raw/master/doc/_assets/code_style_black.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![pkgversion](https://img.shields.io/pypi/v/scheduler)](https://pypi.org/project/scheduler/)[![versionsupport](https://img.shields.io/pypi/pyversions/scheduler)](https://pypi.org/project/scheduler/)[![Downloads Week](https://pepy.tech/badge/scheduler/week)](https://pepy.tech/project/scheduler)[![Downloads Total](https://pepy.tech/badge/scheduler)](https://pepy.tech/project/scheduler)[![Documentation](https://img.shields.io/badge/Docs-HostYourDocs-blue)](https://digon.io/hyd/project/scheduler/t/master)---## Features* Easy and user friendly in-process Job scheduling[(Quick Start)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/quick_start.html)* Asyncio scheduler [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/asyncio.html)* Threading scheduler [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/threading.html)* Timezone compatibility [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/timezones.html)* Passing of parameters  [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/parameters.html)* Job prioritization  * Default linear prioritization    [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/job_prioritization.html)  * User definable prioritization functions    [(Guide)](https://digon.io/hyd/project/scheduler/t/master/pages/guides/custom_prioritization.html)* Job tagging  [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/tags.html)* Job batching  [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/job_batching.html)* Job metadata  [(Example)](https://digon.io/hyd/project/scheduler/t/master/pages/examples/metrics.html)* Lightweight* High test coverage* [Online documentation](https://digon.io/hyd/project/scheduler/t/master/readme.html)## Installation### pip`scheduler` can be installed directly from the PyPI repositories with:```bashpip install scheduler```Alternatively install `scheduler` from the `git`[repository](https://gitlab.com/DigonIO/scheduler) with:```bashgit clone https://gitlab.com/DigonIO/scheduler.gitcd schedulerpip install .```### Arch LinuxThe `PKGBUILD` file can be utilized from the[Arch Build System](https://wiki.archlinux.org/title/Arch_Build_System).Download the `PKGBUILD` file and from within the containing folder run```consolemakepkg -i```## Example: *How to schedule Jobs*The following example shows how the `Scheduler` is instantiated and how basic `Job`s are created.For advanced scheduling examples please visit the online[documentation](https://digon.io/hyd/project/scheduler/t/master/examples.html).[//]: # (This example is not directly included in the testing environment. Make sure to also update the corresponding test in tests/test_readme.py when updating the following example.)```pyimport datetime as dtfrom scheduler import Schedulerfrom scheduler.trigger import Monday, Tuesdaydef foo():    print(&quot;foo&quot;)schedule = Scheduler()schedule.cyclic(dt.timedelta(minutes=10), foo)schedule.minutely(dt.time(second=15), foo)schedule.hourly(dt.time(minute=30, second=15), foo)schedule.daily(dt.time(hour=16, minute=30), foo)schedule.weekly(Monday(), foo)schedule.weekly(Monday(dt.time(hour=16, minute=30)), foo)schedule.once(dt.timedelta(minutes=10), foo)schedule.once(Tuesday(), foo)schedule.once(dt.datetime(year=2022, month=2, day=15, minute=45), foo)```A human readable overview of the scheduled jobs can be created with a simple `print` statement:```pyprint(schedule)``````textmax_exec=inf, tzinfo=None, priority_function=linear_priority_function, #jobs=9type     function / alias due at                 due in      attempts weight-------- ---------------- ------------------- --------- ------------- ------MINUTELY foo()            2021-05-26 03:55:15   0:00:14         0/inf      1CYCLIC   foo()            2021-05-26 04:05:00   0:09:59         0/inf      1ONCE     foo()            2021-05-26 04:05:00   0:09:59           0/1      1HOURLY   foo()            2021-05-26 04:30:15   0:35:14         0/inf      1DAILY    foo()            2021-05-26 16:30:00  12:34:59         0/inf      1WEEKLY   foo()            2021-05-31 00:00:00    4 days         0/inf      1WEEKLY   foo()            2021-05-31 16:30:00    5 days         0/inf      1ONCE     foo()            2021-06-01 00:00:00    5 days           0/1      1ONCE     foo()            2022-02-15 00:45:00  264 days           0/1      1```Executing pending `Job`s periodically can be achieved with a simple loop:```pyimport timewhile True:    schedule.exec_jobs()    time.sleep(1)```## DocumentationView the API documentation [online](https://digon.io/hyd/project/scheduler/t/master/readme.html).## Sponsor&lt;br&gt;&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://digon.io&quot;&gt;    &lt;img alt=&quot;Digon.IO GmbH - IT Dienstleister Wuppertal Softwareentwicklung und Datenwissenschaften&quot; src=&quot;https://digon.io/static/landing/img/digon_name_right_grey.svg&quot; width=&quot;50%&quot;&gt;  &lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;We would like to thank Digon.IO for sponsoring the development of this library.Digon.IO is building bridges between data science and software development.They enable companies to automate and accelerate their data-driven processes.Please visit their website: &lt;a href=&quot;https://digon.io/&quot;&gt;digon.io&lt;/a&gt;&lt;/div&gt;## LicenseThis free and open source software (FOSS) is published under the [LGPLv3 license](https://www.gnu.org/licenses/lgpl-3.0.en.html).</longdescription>
</pkgmetadata>