<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-registrable[![CircleCI](https://circleci.com/gh/epwalsh/python-registrable.svg?style=svg)](https://circleci.com/gh/epwalsh/python-registrable)[![License](https://img.shields.io/github/license/epwalsh/python-registrable)](https://github.com/epwalsh/python-registrable/blob/master/LICENSE)[![PyPI version](https://badge.fury.io/py/registrable.svg)](https://pypi.org/project/registrable/)[![Documentation Status](https://readthedocs.org/projects/python-registrable/badge/?version=latest)](https://python-registrable.readthedocs.io/en/latest/?badge=latest)Python module for registering and instantiating classes by name. Based on the implementation from [AllenNLP](https://github.com/allenai/allennlp).## InstallingThe quickest way to install is through PyPI.```pip install registrable```## Usage```pythonfrom registrable import Registrable# Create a base class that inherits from `Registrable`.class MyBaseClass(Registrable):    def do_something(self):        raise NotImplementedError# Now register subclass implementations of your base class.@MyBaseClass.register(&quot;first_implementation&quot;)class FirstImplementation(MyBaseClass):    def do_something(self):        return 1# You can access an implementation by calling `.by_name()` on the base class.subclass = MyBaseClass.by_name(&quot;first_implementation&quot;)instance = subclass()assert instance.do_something() == 1```</longdescription>
</pkgmetadata>