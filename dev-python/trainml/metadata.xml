<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.trainml.ai/&quot;&gt;&lt;img src=&quot;https://www.trainml.ai/static/img/trainML-logo-purple.png&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/div&gt;# trainML Python SDK and Command Line ToolsProvides programmatic access to [trainML platform](https://app.trainml.ai).## InstallationPython 3.8 or above is required.```pip install trainml```## Authentication### PrerequisitesYou must have a valid [trainML account](https://app.trainml.ai). On the [account settings page](https://app.trainml.ai/account/settings) click the `Create` button in the `API Keys` section. This will automatically download a `credentials.json` file. This file can only be generated once per API key. Treat this file as a password, as anyone with access to your API key will have the ability to create and control resources in your trainML account. You can deactivate any API key by clicking the `Remove` button.&gt; Creating resources on the trainML platform requires a non-zero credit balance. To purchase credits or sign-up for automatic credit top-ups, visit the [billing page](https://app.trainml.ai/account/billing).### Methods#### Credentials FileThe easiest way to authenticate is to place the credentials file downloaded into the `.trainml` folder of your home directory and ensure only you have access to it. From the directory that the `credentials.json` file was downloaded, run the following command:```mkdir -p ~/.trainmlmv credentials.json ~/.trainml/credentials.jsonchmod 600 ~/.trainml/credentials.json```#### Environment VariablesYou can also use environment variables `TRAINML_USER` and `TRAINML_KEY` and set them to their respective values from the `credentials.json` file.```export TRAINML_USER=&lt;'user' field from credentials.json&gt;export TRAINML_KEY=&lt;'key' field from credentials.json&gt;python create_job.py```Environment variables will override any credentials stored in `~/.trainml/credentials.json`#### Runtime VariablesAPI credentials can also be passed directly to the TrainML object constructor at runtime.```import trainmltrainml = trainml.TrainML(user=&quot;user field from credentials.json&quot;,key=&quot;key field from credentials.json&gt;&quot;)await trainml.jobs.create(...)```Passing credentials to the TrainML constructor will override all other methods for setting credentials.## ConfigurationBy default, all operations using the trainML SDK/CLI will use the Personal [project](https://docs.trainml.ai/reference/projects) for trainML account the API keys were generated from. To change the active project, run the configure command:```trainml configure```This command will output the currently configured active project (`UNSET` defaults to `Personal`) and allows you to specify any project you have access to as the new active project.```Current Active Project: PersonalSelect Active Project: (My Other Project, Personal, Project Shared With Me) [Personal]:```Once you select a project, it will store the results of your selection in the `config.json` file in the `TRAINML_CONFIG_DIR` folder (`~/.trainml` by default). Once the active project is set, all subsequent operations will use the selected project.This setting can also be overridden at runtime using the environment variable `TRAINML_PROJECT`:```TRAINML_PROJECT=&lt;PROJECT ID&gt; python create_job.py```or by instantiating the trainml client with the `project` keyword argument:```import trainmltrainml = trainml.TrainML(project=&quot;PROJECT ID&quot;)await trainml.jobs.create(...)```&gt; You must specify the project ID (not name) when using the runtime options. The project ID can be found by running `trainml project list`.## Usage### Python SDKThe trainML SDK utilizes the [asyncio library](https://docs.python.org/3/library/asyncio.html) to ease the concurrent execution of long running tasks. An example of how to create a dataset from an S3 bucket and immediately run a training job on that dataset is the following:```from trainml.trainml import TrainMLimport asynciotrainml_client = TrainML()# Create the datasetdataset = asyncio.run(    trainml_client.datasets.create(        name=&quot;Example Dataset&quot;,        source_type=&quot;aws&quot;,        source_uri=&quot;s3://trainml-examples/data/cifar10&quot;,    ))print(dataset)# Watch the log output, attach will return when data transfer is completeasyncio.run(dataset.attach())# Create the jobjob = asyncio.run(    trainml_client.jobs.create(        name=&quot;Example Training Job&quot;,        type=&quot;training&quot;,        gpu_type=&quot;GTX 1060&quot;,        gpu_count=1,        disk_size=10,        workers=[            &quot;PYTHONPATH=$PYTHONPATH:$TRAINML_MODEL_PATH python -m official.vision.image_classification.resnet_cifar_main --num_gpus=1 --data_dir=$TRAINML_DATA_PATH --model_dir=$TRAINML_OUTPUT_PATH --enable_checkpoint_and_export=True --train_epochs=10 --batch_size=1024&quot;,        ],        data=dict(            datasets=[dict(id=dataset.id, type=&quot;existing&quot;)],            output_uri=&quot;s3://trainml-examples/output/resnet_cifar10&quot;,            output_type=&quot;aws&quot;,        ),        model=dict(git_uri=&quot;git@github.com:trainML/test-private.git&quot;),    ))print(job)# Watch the log output, attach will return when the training job stopsasyncio.run(job.attach())# Cleanup job and datasetasyncio.run(job.remove())asyncio.run(dataset.remove())```See more examples in the [examples folder](examples)### Command Line InterfaceThe command line interface is rooted in the `trainml` command. To see the available options, run:```trainml --help```To list all jobs:```trainml job list```To list all datasets:```trainml dataset list```To connect to a job that requires the [connection capability](https://docs.trainml.ai/reference/connection-capability):```trainml job connect &lt;job ID or name&gt;```To watch the realtime job logs:```trainml job attach &lt;job ID or name&gt;```To create and open a notebook job:```trainml job create notebook &quot;My Notebook Job&quot;```To create a multi-GPU notebook job on a specific GPU type with larger scratch directory space:```trainml job create notebook --gpu-type &quot;RTX 3090&quot; --gpu-count 4 --disk-size 50 &quot;My Notebook Job&quot;```To run the model training code in the `train.py` file in your local `~/model-code` directory on the training data in your local `~/data` directory:```trainml job create training --model-dir ~/model-code --data-dir ~/data &quot;My Training Job&quot; &quot;python train.py&quot;```Stop a job by job ID:```trainml job stop fe52527c-1f4b-468f-b57d-86db864cc089```Stop a job by name:```trainml job stop &quot;My Notebook Job&quot;```Restart a notebook job:```trainml job start &quot;My Notebook Job&quot;```Remove a job by job ID:```trainml job remove fe52527c-1f4b-468f-b57d-86db864cc089```</longdescription>
</pkgmetadata>