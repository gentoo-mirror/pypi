<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. _ImportHelper:**********************OS2MO data import tool**********************A small higher level utility for os2mo data import.The utility provides functionality to create organisation unitsand employees and to create all of the types to which these can be assigned.Additonally the utility can be used to insert data objectsinto a running instance of os2mo.Installing==========Install the os2mo_data_import package as follows:.. code-block:: bash    # Checkout the mora source repository    https://github.com/OS2mo/os2mo-data-import-and-export    # Navigate to the local copy of the repository    cd /path/to/os2mo-data-import-and-export    # Install package with pip    pip install -e os2mo_data_importGetting started===============The main entry point (for most use cases) is the Organisation class,which functions as a wrapper for all the sub classes... code-block:: python    # Imports    from os2mo_data_import import ImportHelper    # Init helper    os2mo = ImportHelper(create_defaults=True)    # Add organisation    os2mo.add_organisation(        identifier=&quot;Magenta Aps&quot;,        user_key=&quot;Magenta&quot;,        municipality_code=101    )Organisation Units------------------Before organisation units can be created,a type for the unit must be added:.. code-block:: python    # Add klasse with reference to facet &quot;org_unit_type&quot;    os2mo.add_klasse(        identifier=&quot;Hovedenhed&quot;,        facet_type_ref=&quot;org_unit_type&quot;,        user_key=&quot;D1ED90C5-643A-4C12-8889-6B4174EF4467&quot;,        title=&quot;Hovedenhed&quot;  # This is the displayed value    )Now an organisation unit can be added with &quot;org_unit_type_ref&quot; referencingthe user defined identifier of the newly created unit type by name:.. code-block:: python    # Root unit: Magenta    # Belongs to unit type: &quot;Hovedenhed&quot;    os2mo.add_organisation_unit(        identifier=&quot;Magenta&quot;,        name=&quot;Magenta Aps&quot;,        type_ref=&quot;Hovedenhed&quot;,  # Reference to the unit type        date_from=&quot;1986-01-01&quot;    )Organisation unit &quot;Magenta&quot; is a root unit in this example.To add children/sub units, &quot;Magenta&quot; must be referenced as parent:.. code-block:: python    # Add unit type &quot;Afdeling&quot;    os2mo.add_klasse(        identifier=&quot;Afdeling&quot;,        facet_type_ref=&quot;org_unit_type&quot;,        user_key=&quot;91154D1E-E7CA-439B-B910-D4622FD3FD21&quot;,        title=&quot;Afdeling&quot;    )    # Add sub unit &quot;Pilestræde&quot;    os2mo.add_organisation_unit(        identifier=&quot;Pilestræde&quot;,        type_ref=&quot;Afdeling&quot;,  # This unit is of type: Afdeling        parent_ref=&quot;Magenta&quot;,  # Sub unit of/Belongs to Magenta        date_from=&quot;1986-01-01&quot;    )Optional data or &quot;details&quot; can be associated with an organisation unit... note::    At least 2 &quot;Klasse&quot; objects must be created,    an object for the primary phone number and    an object for the primary mailing address (residence).    The validation in the (os2mo) frontend application requires:    The user_key on the the primary phone number object    must be specified as &quot;PhoneUnit&quot;    The user_key on the primary mail address object    must be specified as &quot;AddressMailUnit&quot;    Hence either the &quot;identifier&quot; or the &quot;user_key&quot;    must be set to:        - PhoneUnit        - AddressMailUnit    (The &quot;user_key&quot; is derived from the value of the &quot;identifier    if not explicitly set)    See the example below:.. code-block:: python    # Add klasse type &quot;AdressePost&quot;    # Which belongs to facet type &quot;org_unit_address_type&quot;    # user_key is not explicitly set, identifier must be &quot;AddressMailUnit&quot;    os2mo.add_klasse(        identifier=&quot;AddressMailUnit&quot;,        facet_type_ref=&quot;org_unit_address_type&quot;,        title=&quot;Adresse&quot;,        scope=&quot;DAR&quot;,        example=&quot;&lt;UUID&gt;&quot;    )    # Add klasse type &quot;Telefon&quot;    # Which belongs to facet type &quot;org_unit_address_type&quot;    # user_key is set to &quot;PhoneUnit&quot;, hence the identifier can be anything    os2mo.add_klasse(        identifier=&quot;Telefon&quot;,        facet_type_ref=&quot;org_unit_address_type&quot;,        user_key=&quot;PhoneUnit&quot;,        title=&quot;Tlf&quot;,        scope=&quot;PHONE&quot;,        example=&quot;20304060&quot;    )    # Add &quot;AdressePost&quot; detail to the unit &quot;Magenta&quot;    os2mo.add_address_type(        organisation_unit=&quot;Magenta&quot;,        value=&quot;0a3f50c4-379f-32b8-e044-0003ba298018&quot;,        type_ref=&quot;AdressePost&quot;,        date_from=&quot;1986-01-01&quot;    )    # Add &quot;Telefon&quot; detail to the unit &quot;Magenta&quot;    os2mo.add_address_type(        organisation_unit=&quot;Magenta&quot;,        value=&quot;11223344&quot;,        type_ref=&quot;Telefon&quot;,        date_from=&quot;1986-01-01&quot;,    )Employees---------Employees are not directly attached to an organisation unit,but can have a job function which is linked to a unit.Create employees first:.. code-block:: python    os2mo.add_employee(        identifier=&quot;Susanne Chæf&quot;,        cpr_no=&quot;0101862233&quot;    )    os2mo.add_employee(        identifier=&quot;Odin Perskov&quot;,        cpr_no=&quot;0102862234&quot;    )Job function------------Add the job function types:.. code-block:: python    # Job: CEO (&quot;Direktør&quot;)    os2mo.add_klasse(        identifier=&quot;Direktør&quot;,        facet_type_ref=&quot;engagement_type&quot;,        user_key=&quot;Direktør&quot;,        title=&quot;Direktør&quot;    )    # Job: Projectmanager (&quot;Projektleder&quot;)    os2mo.add_klasse(        identifier=&quot;Projektleder&quot;,        facet_type_ref=&quot;engagement_type&quot;,        user_key=&quot;Projektleder&quot;,        title=&quot;Projektleder&quot;    )Add job functions to the newly created employeeswith the &quot;add_type_engagement&quot; method:.. code-block:: python    # Susanne Chæf is CEO    os2mo.add_engagement(        employee=&quot;Susanne Chæf&quot;,        organisation_unit=&quot;Magenta&quot;,        job_function_ref=&quot;Direktør&quot;,        engagement_type_ref=&quot;Ansat&quot;,        date_from=&quot;1986-01-01&quot;    )    # Odin Perskov is projectmanager    os2mo.add_engagement(        employee=&quot;Odin Perskov&quot;,        organisation_unit=&quot;Pilestræde&quot;,        job_function_ref=&quot;Projektleder&quot;,        engagement_type_ref=&quot;Ansat&quot;,        date_from=&quot;1986-02-01&quot;    )Association-----------In this example the employee &quot;Odin Perskov&quot; is an external consultant,and to reflect this an association type can be assigned:.. code-block:: python    os2mo.add_klasse(        identifier=&quot;Ekstern Konsulent&quot;,        facet_type_ref=&quot;association_type&quot;,        user_key=&quot;F997F306-71DF-477C-AD42-E753F9C21B42&quot;,        title=&quot;Ekstern Konsulent&quot;    )    # Add the consultant association to &quot;Odin Perskov&quot;:    os2mo.add_association(        employee=&quot;Odin Perskov&quot;,        organisation_unit=&quot;Pilestræde&quot;,        job_function_ref=&quot;Projektleder&quot;,        association_type_ref=&quot;Ekstern Konsulent&quot;,        address_uuid=&quot;0a3f50c4-379f-32b8-e044-0003ba298018&quot;,        date_from=&quot;1986-10-01&quot;    )In the following example an address is assigned to employee &quot;Odin Perskov&quot;.For residential addresses, valid UUID's are used to reference an addressfrom the &quot;Danish registry of addresses&quot; (DAR):.. code-block:: python    # Add address type &quot;AdressePostEmployee&quot;    os2mo.add_klasse(        identifier=&quot;AdressePostEmployee&quot;,        facet_type_ref=&quot;employee_address_type&quot;,        user_key=&quot;2F29C717-5D78-4AA9-BDAE-7CDB3A378018&quot;,        title=&quot;Adresse&quot;,        scope=&quot;DAR&quot;,        example=&quot;&lt;UUID&gt;&quot;    )    # Detail AdressePostEmployee assigned to &quot;Odin Perskov&quot;    os2mo.add_address_type(        employee=&quot;Odin Perskov&quot;,        value=&quot;0a3f50a0-ef5a-32b8-e044-0003ba298018&quot;,        type_ref=&quot;AdressePostEmployee&quot;,        date_from=&quot;1986-11-01&quot;,    )Roles-----To add a role type:.. code-block:: python    # A role as contact for external projects    os2mo.add_klasse(        identifier=&quot;Nøgleansvarlig&quot;,        facet_type_ref=&quot;role_type&quot;,        user_key=&quot;0E078F23-A5B4-4FB4-909B-60E49295C5E9&quot;,        title=&quot;Nøgleansvarlig&quot;    )    # Role assigned to &quot;Odin Perskov&quot;    os2mo.add_role(        employee=&quot;Odin Perskov&quot;,        organisation_unit=&quot;Pilestræde&quot;,        role_type_ref=&quot;Nøgleansvarlig&quot;,        date_from=&quot;1986-12-01&quot;    )It systems----------Generic IT systems can be created and assigned to employees with a specified &quot;user_key&quot;,which functions as a reference to a username, pin code etc.:.. code-block:: python  # Create IT system: Database    os2mo.new_itsystem(        identifier=&quot;Database&quot;,        system_name=&quot;Database&quot;    )    # Assign access to the database    # with username &quot;odpe@db&quot;    os2mo.join_itsystem(        employee=&quot;Odin Perskov&quot;,        user_key=&quot;odpe@db&quot;,        itsystem_ref=&quot;Database&quot;,        date_from=&quot;1987-10-01&quot;    )Manager type, level and responsibilities----------------------------------------In order to assign employees as managers to an organisation unit,the following types must be created: - manager type - manager level - A type for each responsibilityCreate manager type:.. code-block:: python    os2mo.add_klasse(        identifier=&quot;Leder&quot;,        facet_type_ref=&quot;manager_type&quot;,        user_key=&quot;55BD7A09-86C3-4E15-AF5D-EAD20EB12F81&quot;,        title=&quot;Virksomhedens direktør&quot;    )Create manager level:.. code-block:: python    os2mo.add_klasse(        identifier=&quot;Højeste niveau&quot;,        facet_type_ref=&quot;manager_level&quot;,        user_key=&quot;6EAA7DA7-212D-4FD0-A068-BA3F932FDB10&quot;,        title=&quot;Højeste niveau&quot;    )Create several responsibilities:.. code-block:: python    os2mo.add_klasse(        identifier=&quot;Tage beslutninger&quot;,        facet_type_ref=&quot;responsibility&quot;,        user_key=&quot;A9ABDCCB-EC83-468F-AB7D-175B95E94956&quot;,        title=&quot;Tage beslutninger&quot;    )    os2mo.add_klasse(        identifier=&quot;Motivere medarbejdere&quot;,        facet_type_ref=&quot;responsibility&quot;,        user_key=&quot;DC475AF8-21C9-4112-94AE-E9FB13FE8D14&quot;,        title=&quot;Motivere medarbejdere&quot;    )    os2mo.add_klasse(        identifier=&quot;Betale løn&quot;,        facet_type_ref=&quot;responsibility&quot;,        user_key=&quot;0A929060-3392-4C07-8F4E-EF5F9B6AFDE2&quot;,        title=&quot;Betale løn&quot;    )Assign the manager position of Magenta to &quot;Susanne Chæf&quot;:.. code-block:: python    os2mo.add_manager(        employee=&quot;Susanne Chæf&quot;,        organisation_unit=&quot;Magenta&quot;,        manager_type_ref=&quot;Leder&quot;,        manager_level_ref=&quot;Højeste niveau&quot;,        responsibility_list=[&quot;Tage beslutninger&quot;, &quot;Motivere medarbejdere&quot;, &quot;Betale løn&quot;],        date_from=&quot;1987-12-01&quot;,    )Preservation of UUIDs=====================If the system to be imported into MO contains UUIDs that should be preserved in MO,it is possible to import the UUIDs for employees, organisational units, classes andclassifications. This is achieved by adding an extra uuid argument when creating theobject, eg:.. code-block:: python    os2mo.add_klasse(        identifier=&quot;Betale løn&quot;,        facet_type_ref=&quot;responsibility&quot;,        uuid=&quot;195da2b6-e648-4bdc-add1-e22654996997&quot;,        user_key=&quot;0A929060-3392-4C07-8F4E-EF5F9B6AFDE2&quot;,        title=&quot;Betale løn&quot;    )Example=======If a &quot;real&quot; os2mo application is available,a practial example is provided with contains similar import dataas the given examples above.Feel free to run the &quot;import_example.py&quot; included in the repository:Example: $os2mo-data-import-and-export/os2mo_data_import/import_example.pyRun example:.. code-block:: bash  cd os2mo_data_import  python import_example.pyReference=========For more information on the os2mo project,please refer to the official documentation.Read the docs: https://os2mo.readthedocs.ioKnown Issues============Currently it is not possible to assign &quot;Leave&quot; (e.g. various types of leave of absence).This issue is related to the validation of type assignments.</longdescription>
</pkgmetadata>