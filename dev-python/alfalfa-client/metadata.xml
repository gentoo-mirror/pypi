<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Alfalfa ClientThe purpose of this repository is to provide a standalone client for use with the Alfalfa application. It additionally includes a Historian to quickly/easily enable saving of results from Alfalfa simulations.# UsageThis repo is packaged and hosted on [PyPI here](https://pypi.org/project/alfalfa-client/).```bashpip install alfalfa-client``````pythonimport alfalfa_client.alfalfa_client as acimport alfalfa_client.historian as ahclient = ac.AlfalfaClienthistorian = ah.Historian```# Setup and TestingThis repository is setup to use:- [pyenv](https://github.com/pyenv/pyenv#installation) for managing python versions- [poetry](https://python-poetry.org/docs/#installation) for managing environment- [pre-commit](https://pre-commit.com/#install) for managing code styling- tox for running tests in isolated build environments. See the expected python versions in [tox.ini](./tox.ini)Assuming poetry is installed and the necessary python versions are installed, the following should exit cleanly:```bashgit clone https://github.com/NREL/alfalfa-client.gitcd alfalfa-clientpoetry run tox```This may take some time resolving on the initial run, but subsequent runs should be faster.See [this gist](https://gist.github.com/corymosiman12/26fb682df2d36b5c9155f344eccbe404) for additional info.# History- The implemented client is previously referred to as Boptest, from the alfalfa/client/boptest.py implementation. It has been ported as a standalone package for easier usage across projects.# Releasing1. Merge all branches into develop, make sure tests pass1. Update the version (assume version is 0.1.2): `poetry version 0.1.2`1. Update the version test file (i.e. my-repo/tests/test_version.py) to match the above version1. Make sure tests pass: `poetry run tox`1. Merge develop into main (previously, master), make sure tests pass1. Create a tag: `git tag 0.1.2`1. Build: `poetry build`1. Publish `poetry publish` (this will push to pypi)1. Create a new release on the Github repository using the tag and link to PyPI</longdescription>
</pkgmetadata>