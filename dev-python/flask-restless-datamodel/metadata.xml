<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.com/maarten-dp/flask-restless-datamodel.svg?branch=master)](https://travis-ci.com/maarten-dp/flask-restless-datamodel)[![Codecov](https://codecov.io/gh/maarten-dp/flask-restless-datamodel/branch/master/graph/badge.svg)](https://codecov.io/gh/maarten-dp/flask-restless-datamodel)[![PyPI version](https://badge.fury.io/py/flask-restless-datamodel.svg)](https://pypi.org/project/flask-restless-datamodel/)## PurposeThis library is one part of a two part piece of code. It fulfills the server part to the flask-restless client. What it does is allow you to render your datamodel in a convenient JSON format.This JSON format is then read by the flask-restless-client, which in turn uses it to built itself, allowing for transparent access to your data model through HTTP.## QuickstartEnabling this feature is as easy as registering an SQLAlchemy model in flask-restless. The only thing you need to do, is import the DataModel class from the library and use it to register your api.```pythonimport flaskimport flask_restlessfrom flask_sqlalchemy import SQLAlchemyfrom flask_restless_datamodel import DataModelfrom my_models import Person, Computer, dbapp = flask.Flask(__name__)db = SQLAlchemy(app)# Create a datamodel instance to register laterdata_model = DataModel(manager)manager = flask_restless.APIManager(app, flask_sqlalchemy_db=db)manager.create_api(Person, methods=['GET'], include_columns=['name'])manager.create_api(Computer, methods=['GET'], collection_name='compjutahs', exclude_columns=['name'])manager.create_api(data_model, methods=['GET'])# In case you want to expose the methods and properties as welldata_model.register_rpc_blueprint()```Which will expose an endpoint `http://localhost:5000/flask-restless-datamodel` which in turn will yield a result as followed```json{   &quot;Computer&quot;:{      &quot;attributes&quot;:{         &quot;id&quot;:&quot;integer&quot;,         &quot;owner_id&quot;:&quot;integer&quot;,         &quot;owner_name&quot;:&quot;unicode&quot;,         &quot;purchase_time&quot;:&quot;datetime&quot;,         &quot;vendor&quot;:&quot;unicode&quot;      },      &quot;collection_name&quot;:&quot;compjutahs&quot;,      &quot;methods&quot;:{},      &quot;pk_name&quot;:&quot;id&quot;,      &quot;relations&quot;:{         &quot;owner&quot;:{            &quot;backref&quot;:&quot;computers&quot;,            &quot;foreign_model&quot;:&quot;Person&quot;,            &quot;local_column&quot;:&quot;owner_id&quot;,            &quot;relation_type&quot;:&quot;MANYTOONE&quot;         },         &quot;peers&quot;:{            &quot;foreign_model&quot;:&quot;Computer&quot;,            &quot;is_proxy&quot;:true,            &quot;relation_type&quot;:&quot;MANYTOONE&quot;         }      }   },   &quot;Person&quot;:{      &quot;attributes&quot;:{         &quot;name&quot;:&quot;unicode&quot;      },      &quot;collection_name&quot;:&quot;person&quot;,      &quot;methods&quot;:{},      &quot;pk_name&quot;:&quot;id&quot;,      &quot;relations&quot;:{      }   }}```This result will be used by the client code to build models on the fly.</longdescription>
</pkgmetadata>