<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ckanext-toolbeltCollection of different tools for daily use.## Requirements| CKAN version | Compatible? ||--------------|-------------|| 2.9          | yes         || 2.10         | yes         || master       | yes         |## Content* [Decorators](#decorators)  * [Collector](#collector)  * [Cache](#cache)* [Plugins](#plugins)* [CLI](#cli)* [Misc](#misc)## Decorators (`ckanext.toolbelt.decorators`)### `Collector`Creates a decorator that collects functions and returns them in adictionary. Originally designed for actions, auth functions, validators andhelpers.:information_source: CKAN v2.10 has `tk.blanket` module. It does the samethings in a bit different manner.Can be used as decorator. Call `Collector.get_collection` when you needdictionary with names of helpers mapped to helper functionshelper = Collector()@helperdef func():pass###    # ITemplateHelpersdef get_helpers(self):return helper.get_collection()`Collector.split` allows you to visually separate decorator from the method,that returns collectionaction, get_actions = Collector().split()@actiondef func():pass###    # IActionsdef get_actions(self):return get_actions()If you want your functions prefixed by the plugin name, provide this prefix asa first argument to the `Collector`'s constructor. If particular items mustremain unprefixed, you can specify what name to use, when decorating an itemvalidator, get_validators = Collector(&quot;toolbelt&quot;).split()@validatordef func():&quot;&quot;&quot;I am toolbelt_func&quot;&quot;&quot;pass@validator(&quot;custom_func&quot;)def func():&quot;&quot;&quot;I am custom_func&quot;&quot;&quot;pass###    # IValidatorsdef get_validators(self):return get_validators()[Back to content](#content)### `Cache`Cache for functions.Cache()def func(v):    return v * vBy default, cache is based on:* module, where function is defined* name of the function* positional arguments* named argumentsThat means that following two invocations cached separately:func(10)func(v=10)Cached data stored in redis as a JSON serialized structure. In order to usedifferent serializers, you can specify `dumper` and `loader` parameters whencreating `Cache` instance. Any function that accepts single value and returns`str` or `bytes` can be used as a `dumper`. Any function that accepts `str` or`bytes` and returns unserialized value can be used as loader.from pickle import dumps, loads@Cache(dumper=dumps, loader=loads)def func(v):    return vAs mentioned before, cache key computed using module, name of the function andparameters. It can be changed by passing a function as `key` argument to the`Cache` constructor. Expected signature is `key_strategy(func, *args,**kwargs)`.# this function will be called only once, because cache key is based on its name.# And name will never change. Unless you change it@Cache(key=lambda f, *a, **k: f.__name__)def func(v):    return vCache duration(in seconds) can be configured via `duration` parameter of theconstructor(which can be a callable that returns comuted duration).cache = Cache(duration=3600)@cachedef func(v):    return v + v[Back to content](#content)---## Plugins### `toolbelt_fdt_sqlalchemy`Adapter for[Flask-SQLAlchemy](https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/). EnablesSQLAlchemy panel on FlaskDebugToolbar. You have to install appropriate versionof `flask-sqlalchemy` to use this plugin:| Environment                     | Version | Command                             ||---------------------------------|---------|-------------------------------------|| Flask 2.0(CKAN &lt;= 2.10)         | 2.5     | `pip install flask-sqlalchemy~=2.5` || Flask 2.2(CKAN &gt;= 2.11, master) | 3.0     | `pip install flask-sqlalchemy~=3.0` |Note: `flask-sqlalchemy~=2.5` works with the latest CKAN version, so you canalways use the first line from the table above.### `toolbelt_cascade_organization_updates`Reindex all organization's datasets when organization updated. Requiresbackground worker.### `toolbelt_composite_groups` / `toolbelt_composite_organizations`Enable repeating subfields(ckanext-scheming) for organization and group schemas[Back to content](#content)---## CLIAs soon as you've installed ckanext-toolbelt, it will register `ckan toolbelt`route for CLI. You don't have to add `toolbelt` to the list of enabledplugins.Depending on the active plugins, extra subroutes may be added to the `ckantoolbelt` route.In addition, there is global `ctb` command that allows to use this packagewithout CKAN installed or without CKAN config file. But in this way some ofcommands (`search-index` for example) are not available, because they use CKANcore. `ctb` alias exists for setting up the CKAN or extensions and runninggeneric services, that do not rely on CKAN instance.Global commands, available via `ctb` and `ckan toolbelt` routes:```sh# create a generic configuration. Supported types:# * deps-makefile  CKAN dependency manager# * pre-commit     Pre-commit# * pyproject      pyproject.toml# * gulp-sass      gulpfile.js with SASS configurationmake config &lt;type&gt;# create a configuration for GitHub Action. Supported types:# * pypi-publish    Publish package to PyPI when vX.Y.Z tag added.# * release-please  Create a PR that compiles changelog and publishes GitHub release.# * test            Test workflow.make gh-action &lt;type&gt;# Generate parts of README.md# Supported types:# * config  Print declared config options for the given plugins.make readme &lt;type&gt;# Start mail server that will catch outcomming mails.dev mail-server```Commands that depends on CKAN core and available only via `ckan toolbelt`route:```sh# Drop packages that are only in search index but not in DB.search-index clear-missing# Clean the DB, optionally keeping data in the given tables.db clean --yes [-k user] [-k group] [-k ...]```[Back to content](#content)---## Misc### `ckanext.toolbelt.utils.cache`#### `DontCache`#### `Cache`### `ckanext.toolbelt.utils.fs`#### StaticPathNo-op wrapper around filepath that can be used as a context manager:```pythonwith StaticPath(&quot;/tmp/x.txt&quot;) as path:    with open(path) as src:        ...# nothing is changed```#### RemovablePathContext manager that removes file on exit:```pythonwith RemovablePath(&quot;/tmp/x.txt&quot;) as path:    with open(path) as src:        ...# /tmp/x.txt is removed```#### `path_to_resource(res_dict, max_size=0)`Returns a filepath for a resource.If resource is stored locally, return StaticPath. If resource stored remotely,download it to /tmp and return RemovablePath. Remote resources with sizeexceeding `max_size` are not downloaded and empty StaticPath returned.Example:```pythonwith path_to_resource(resource) as path:    with open(path) as src:        print(src.read())```### `ckanext.toolbelt.utils.scheming`#### `get_validation_schema`### `ckanext.toolbelt.utils.structures`#### `Node`### `ckanext.toolbelt.utils.hierarchy`#### `Node`#### `Strategy`#### `ParentReference`#### `package_hierarchy`[Back to content](#content)</longdescription>
</pkgmetadata>