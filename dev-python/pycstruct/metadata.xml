<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pycstruct[![AppVeyor](https://ci.appveyor.com/api/projects/status/github/midstar/pycstruct?svg=true)](https://ci.appveyor.com/api/projects/status/github/midstar/pycstruct)[![Coverage Status](https://coveralls.io/repos/github/midstar/pycstruct/badge.svg?branch=HEAD)](https://coveralls.io/github/midstar/pycstruct?branch=HEAD)[![Documentation](https://readthedocs.org/projects/pycstruct/badge/?version=latest)](https://pycstruct.readthedocs.io/en/latest/?badge=latest)pycstruct is a python library for converting binary data to and from ordinarypython dictionaries or specific instance objects.Data is defined similar to what is done in C language structs, unions,bitfields and enums.Typical usage of this library is read/write binary files or binary datatransmitted over a network.Following complex C types are supported:- Structs- Unions- Bitfields- EnumsThese types may consist of any traditional data types (integer, unsigned integer, boolean and float) between 1 to 8 bytes large, arrays (lists), and strings (ASCII/UTF-8).Structs, unions, bitfields and enums can be embedded inside other structs/unionsin any level. Individual elements can be stored / read in any byte order and alignment.pycstruct also supports parsing of existing C language source code toautomatically generate the pycstruct definitions / instances.Checkout the full documentation [here](https://pycstruct.readthedocs.io/en/latest/).## InstallationSimply install the package using pip:    python3 -m pip install pycstruct## ExampleFollowing C has a structure (person) with a set of elementsthat are written to a binary file.```c#include &lt;stdio.h&gt;#include &lt;stdbool.h&gt;#include &lt;string.h&gt;#pragma pack(1) // To secure no padding is added in structstruct person {     char name[50];    unsigned int age;    float height;    bool is_male;    unsigned int nbr_of_children;    unsigned int child_ages[10];};void main(void) {    struct person p;    memset(&amp;p, 0, sizeof(struct person));    strcpy(p.name, &quot;Foo Bar&quot;);    p.age = 42;    p.height = 1.75; // m    p.is_male = true;    p.nbr_of_children = 2;    p.child_ages[0] = 7;    p.child_ages[1] = 9;    FILE *f = fopen(&quot;simple_example.dat&quot;, &quot;w&quot;);    fwrite(&amp;p, sizeof(struct person), 1, f);    fclose(f);}```To read the binary file using pycstruct following code required.```pythonimport pycstructperson = pycstruct.StructDef()person.add('utf-8', 'name', length=50)person.add('uint32', 'age')person.add('float32','height')person.add('bool8', 'is_male')person.add('uint32', 'nbr_of_children')person.add('uint32', 'child_ages', length=10)with open('simple_example.dat', 'rb') as f:    inbytes = f.read()# Dictionary representationresult = person.deserialize(inbytes)print('Dictionary object:')print(str(result))# Alternative, Instance representationinstance = person.instance(inbytes)print('\nInstance object:')print(f'name: {instance.name}')print(f'nbr_of_children: {instance.nbr_of_children}')print(f'child_ages[1]: {instance.child_ages[1]}')```The produced output will be::    {'name': 'Foo Bar', 'is_male': True, 'nbr_of_children': 2,      'age': 42, 'child_ages': [7, 9, 0, 0, 0, 0, 0, 0, 0, 0],      'height': 1.75}    Instance object:    name: Foo Bar    nbr_of_children: 2    child_ages[1]: 9To write a binary file from python using the same structureusing pycstruct following code is required.```pythonimport pycstructperson = pycstruct.StructDef()person.add('utf-8', 'name', length=50)person.add('uint32', 'age')person.add('float32','height')person.add('bool8', 'is_male')person.add('uint32', 'nbr_of_children')person.add('uint32', 'child_ages', length=10)# Dictionary representationmrGreen = {}mrGreen['name'] = &quot;MR Green&quot;mrGreen['age'] = 50mrGreen['height'] = 1.93mrGreen['is_male'] = TruemrGreen['nbr_of_children'] = 3mrGreen['child_ages'] = [13,24,12]buffer = person.serialize(mrGreen)# Alternative, Instance representationmrGreen = person.instance()mrGreen.name = &quot;MR Green&quot;mrGreen.age = 50mrGreen.height = 1.93mrGreen.is_male = TruemrGreen.nbr_of_children = 3mrGreen.child_ages[0] = 13mrGreen.child_ages[1] = 24mrGreen.child_ages[2] = 12buffer = bytes(mrGreen)# Write to filef = open('simple_example_mr_green.dat','wb')f.write(buffer)f.close()```## Parsing source filespycstruct also supports parsing C source code defined in externalfiles or defined in strings.Assume the C code listed in the first example is namedsimple_example.c. Then you could parse the sourcecode instead of manually creating the definitions:```pythonimport pycstructdefinitions = pycstruct.parse_file('simple_example.c')with open('simple_example.dat', 'rb') as f:    inbytes = f.read()# Dictionary representationresult = definitions['person'].deserialize(inbytes)print(str(result))# Alternative, Instance representationinstance = definitions['person'].instance(inbytes)```The produced output will be the same as in the first example (the dictionary).## Full documentationCheckout the full documentation [here](https://pycstruct.readthedocs.io/en/latest/).## Author and licenseThis application is written by Joel MidstjÃ¤rna and is licensed under the MIT License.</longdescription>
</pkgmetadata>