<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![PyPiVersion]![SupportedVersions]![License][PyPiVersion]: https://img.shields.io/pypi/v/pysubcipher[SupportedVersions]: https://img.shields.io/badge/python-3.9%20%7C%203.10%20%7C%203.11-orange[License]: https://img.shields.io/badge/license-MIT-yellow`pysubcipher` is a python module built on `Python 3.10` which allows users to encrypt and decrypt strings of text using a substitution cipher algorithm.# InstallationTested on Python 3.9 and above.&lt;br&gt;No requirements apart from the standard module.```pypip install pysubcipher``````pypython3 -m pip install pysubcipher```# Example Usage### Encrypting and decrypting a short string of text```pydef encrypt(self, s: str, /) -&gt; bytes:    ...def decrypt(self, s: bytes, /) -&gt; bytes:    ...``````pyfrom pysubcipher import SubstitutionCiphersubcipher = SubstitutionCipher()my_text = &quot;Hello, World!&quot;encrypted_text = subcipher.encrypt(my_text)decrypted_text = subcipher.decrypt(encrypted_text)print(encrypted_text)print(decrypted_text)```### Output```pyb'e41BF3d8ebD5c0F34D2ce0caC5FCD2fbFAc576aB91bFAc576aB91E38cD3Da83deCEa8eeafc5AD23FC63Bacc983cBBFe02D4eAb46DeCaabd4E5Dda1E38cD3Da83deCEa8eeaDa487daD01Afe0abFAc576aB91F557edbaBe4e6052F0B41C11184'b'Hello, World!'```# SubstitutionCipher```pydef __init__(self, min_key_length: int = 10, max_key_length: int = 20, *, seed: int | float | str | bytes | bytearray | None = os.urandom(1024), charset: str = HEXDIGITS) -&gt; None:    ...``````py&quot;&quot;&quot;A simple substitution cipher encryption tool to encode strings of text.Args:    min_key_length (int): The minimum length of a cipher key    max_key_length (int): The maximum length of a cipher key    seed (int | float | str | bytes | bytearray | None, optional): The seed that cipher keys will be generated with. Defaults to os.urandom(1024).    charset (str, optional): The character set that cipher keys will be generated with. Defaults to HEXDIGITS.&quot;&quot;&quot;```# Using built-in character sets- BASE_2- HEXDIGITS- OCTDIGITS- ALPHANUMERIC### Base 2 Example```pyfrom pysubcipher import SubstitutionCipher, BASE_2subcipher = SubstitutionCipher(charset = BASE_2)my_text = &quot;Hello, World!&quot;encrypted_text = subcipher.encrypt(my_text)decrypted_text = subcipher.decrypt(encrypted_text)print(encrypted_text)print(decrypted_text)```### Output```pyb'100001111110110000010100001011011110101010100010110111101010101001111001011010110111000110100100000011110100010010001000001001111001011000001111001111101010110111101010101001111101101101001111001001010'b'Hello, World!'```# Using a custom character setCharacter sets are provided as strings of text, and will be used to generate cipher keys.**Note: if the character set is not unique enough, an exception will be raised as there would not be enough possible combinations to encrypt that string of text.**For example, if you wanted to use BASE_2 as your character set, but only allowed for the minimum key length to be 3 and the maximum key length to be 4, there would not be enough combinations to account for the entirety of the string.```pyfrom pysubcipher import SubstitutionCiphersubcipher = SubstitutionCipher(charset = &quot;abcde1234&quot;)my_text = &quot;Hello, World!&quot;encrypted_text = subcipher.encrypt(my_text)decrypted_text = subcipher.decrypt(encrypted_text)print(encrypted_text)print(decrypted_text)```### Output```pyb'accddb422a4bcc32bdaa2dd3b1beda34ecc32ed12134ecc32ed121cab4341d13d4b1dd32dbd1edebc2aac1b3cde1b1cedace3c1bcdacab4341d13d4b12ed3dcae1c2dbe4312ee34ecc32ed121bc4ab14112b2bb4a23e4c44c34bcdc12243e4'b'Hello, World!'```# Saving keys to a fileSaving keys can be useful if you intend on using the same cipher keys in different instances of your program.```py&quot;&quot;&quot;Saves the current cipher keys to a fileArgs:    file (str): The path to the file    truncate (bool, optional): If True, the file will be truncated prematurely before storing the keys. Defaults to False.&quot;&quot;&quot;``````pyfrom pysubcipher import SubstitutionCiphersubcipher = SubstitutionCipher()subcipher.save_keys(&quot;cipher_keys.dat&quot;)```# Loading saved keys from a file```py&quot;&quot;&quot;Loads cipher keys into the instanceArgs:    file (str): The path to the file where the keys are storedRaises:    InvalidKeysError: Raised if the cipher keys are not valid.&quot;&quot;&quot;``````pyfrom pysubcipher import SubstitutionCiphersubcipher = SubstitutionCipher()subcipher.load_keys(&quot;cipher_keys.dat&quot;)```# Setting a custom seed```pydef set_seed(self, seed: int | float | str | bytes | bytearray | None, /) -&gt; None:    ...```If you don't intend on storing cipher keys in a file, you can always use a set seed so the cipher keys are the same every time you run your program.```pyfrom pysubcipher import SubstitutionCiphersubcipher = SubstitutionCipher()subcipher.set_seed(&quot;my_amazing_seed&quot;)```# Regenerating cipher keys```pydef regenerate_keys(self, seed: int | float | str | bytes | bytearray | None | None = None, /) -&gt; None:    ...``````py&quot;&quot;&quot;Regenerates encryption and decryption keys.Args:    seed (int | float | str | bytes | bytearray | None, optional): The seed to generate cipher keys with. Defaults to os.urandom(1024).&quot;&quot;&quot;```# Encrypting and decrypting files```pyclass FileSubstitutionCipher(SubstitutionCipher):    def __init__(self, min_key_length: int = 10, max_key_length: int = 20, *, seed: int | float | str | bytes | bytearray | None = os.urandom(1024), charset: str = HEXDIGITS) -&gt; None:``````py&quot;&quot;&quot;A simple substitution cipher encryption tool to encrypt file's and their contents.Args:    min_key_length (int): The minimum length of a cipher key.    max_key_length (int): The maximum length of a cipher key.    seed (int | float | str | bytes | bytearray | None, optional): The seed that cipher keys will be generated with. Defaults to os.urandom(1024).    charset (str, optional): The character set that cipher keys will be generated with. Defaults to HEXDIGITS.&quot;&quot;&quot;```### Encrypting```pydef encrypt(self, filepath: str, /, *, write: bool = False) -&gt; bytes | None:    ...``````py&quot;&quot;&quot;Encrypts the contents of a file and returns the encrypted contents or NoneArgs:    filepath (str): The path to the file that will be encrypted    write (bool, optional): Whether the program will write to that file, overriding it's original contents. Defaults to False.Returns:    bytes | None: Returns the encrypted contents if write is False, otherwise returns None&quot;&quot;&quot;```### Decrypting```pydef decrypt(self, filepath: str, /, *, write: bool = False) -&gt; bytes | None:    ...``````py&quot;&quot;&quot;Decrypts the contents of a file and returns the decrypted contents or NoneArgs:    filepath (str): The path to the file that will be decrypted    write (bool, optional): Whether the program will write to that file, overriding it's original contents. Defaults to False.Returns:    bytes | None: Returns the decrypted contents if write is False, otherwise returns None&quot;&quot;&quot;```### Example Usage```pyfrom pysubcipher import FileSubstitutionCipherfilepath: str = &quot;my_file.txt&quot;subcipher = FileSubstitutionCipher()# Override the file's contents with the encrypted contentssubcipher.encrypt(filepath, write = True)# Get the decrypted contents without modifying the filedecrypted_file_contents = subcipher.decrypt(filepath) # write is defaulted to Falseprint(decrypted_file_contents)```### Output`my_file.txt````pyb'D2d3F1Db7eEdE28A34Df31975e98a7Bfb0cfd21c89DB168FACbe7eDE9bb98f5cfADFff093771B08093b8daC56e1A3Df0DF8Bedeebf1268FACbe7eDE9bb95CF51C2C9c06Dc9C8f5cfADFff093768FACbe7eDE9bb914734bB8AAaAD8ef71B08093b8daC56e1A3D5CF51C2C9c06Dc9C2baB2eB530Cd88322A731F9d1DC00Ddfe814734bB8AAaAD8ef68FACbe7eDE9bb9322A731F9d1DC00Ddfe814734bB8AAaAD8eff0DF8Bedeebf12'````Console Output````pyb'Super secret contents'```# Exceptions and error handling## `InvalidCharacterError````pydef __init__(self, character: str, /) -&gt; None:    ...```Raised if an invalid token is present within a string of text while encrypting or decrypting a value.## `EncryptedStringInvalidError````pydef __init__(self, token: str) -&gt; None:    ...```Raised while decrypting a string of text if the encrypted string is not valid or does not match any decryption keys.## `InvalidKeysError````pydef __init__(self) -&gt; None:    ...```Raised inside of the `load_keys()` function of the `SubstitutionCipher` class if the cipher keys fail validation.</longdescription>
</pkgmetadata>