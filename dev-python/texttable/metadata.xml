<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># texttablePython module to create simple ASCII tables## AvailabilityThis module is available on [PyPI](https://pypi.org/project/texttable/), and has been packaged for several Linux/Unix platforms([Debian](https://packages.debian.org/search?&amp;searchon=names&amp;keywords=python-texttable+),[FreeBSD](https://www.freebsd.org/cgi/ports.cgi?query=texttable&amp;stype=all), Fedora, Suse...).## DependenciesIf available, [cjkwrap](https://github.com/fgallaire/cjkwrap) library is used instead of textwrap, for a better wrapping of CJK text.If available, [wcwidth](https://github.com/jquast/wcwidth) library is used for a better rendering (basic emoji support).## Documentation```NAME    texttable - module to create simple ASCII tablesFILE    /usr/local/lib/python2.7/dist-packages/texttable.pyDESCRIPTION    Example:        table = Texttable()        table.set_cols_align([&quot;l&quot;, &quot;r&quot;, &quot;c&quot;])        table.set_cols_valign([&quot;t&quot;, &quot;m&quot;, &quot;b&quot;])        table.add_rows([[&quot;Name&quot;, &quot;Age&quot;, &quot;Nickname&quot;],                        [&quot;Mr\nXavier\nHuon&quot;, 32, &quot;Xav'&quot;],                        [&quot;Mr\nBaptiste\nClement&quot;, 1, &quot;Baby&quot;],                        [&quot;Mme\nLouise\nBourgeau&quot;, 28, &quot;Lou\n\nLoue&quot;]])        print(table.draw())        print()        table = Texttable()        table.set_deco(Texttable.HEADER)        table.set_cols_dtype(['t',  # text                              'f',  # float (decimal)                              'e',  # float (exponent)                              'i',  # integer                              'a']) # automatic        table.set_cols_align([&quot;l&quot;, &quot;r&quot;, &quot;r&quot;, &quot;r&quot;, &quot;l&quot;])        table.add_rows([[&quot;text&quot;,    &quot;float&quot;, &quot;exp&quot;, &quot;int&quot;, &quot;auto&quot;],                        [&quot;abcd&quot;,    &quot;67&quot;,    654,   89,    128.001],                        [&quot;efghijk&quot;, 67.5434, .654,  89.6,  12800000000000000000000.00023],                        [&quot;lmn&quot;,     5e-78,   5e-78, 89.4,  .000000000000128],                        [&quot;opqrstu&quot;, .023,    5e+78, 92.,   12800000000000000000000]])        print(table.draw())    Result:        +----------+-----+----------+        |   Name   | Age | Nickname |        +==========+=====+==========+        | Mr       |     |          |        | Xavier   |  32 |          |        | Huon     |     |   Xav'   |        +----------+-----+----------+        | Mr       |     |          |        | Baptiste |   1 |          |        | Clement  |     |   Baby   |        +----------+-----+----------+        | Mme      |     |   Lou    |        | Louise   |  28 |          |        | Bourgeau |     |   Loue   |        +----------+-----+----------+         text     float       exp      int     auto        ==============================================        abcd      67.000   6.540e+02    89   128.001        efghijk   67.543   6.540e-01    90   1.280e+22        lmn        0.000   5.000e-78    89   0.000        opqrstu    0.023   5.000e+78    92   1.280e+22CLASSES    class Texttable     |  Methods defined here:     |     |  __init__(self, max_width=80)     |      Constructor     |     |      - max_width is an integer, specifying the maximum width of the table     |      - if set to 0, size is unlimited, therefore cells won't be wrapped     |     |  add_row(self, array)     |      Add a row in the rows stack     |     |      - cells can contain newlines and tabs     |     |  add_rows(self, rows, header=True)     |      Add several rows in the rows stack     |     |      - The 'rows' argument can be either an iterator returning arrays,     |        or a by-dimensional array     |      - 'header' specifies if the first row should be used as the header     |        of the table     |     |  draw(self)     |      Draw the table     |     |      - the table is returned as a whole string     |     |  header(self, array)     |      Specify the header of the table     |     |  reset(self)     |      Reset the instance     |     |      - reset rows and header     |     |  set_chars(self, array)     |      Set the characters used to draw lines between rows and columns     |     |      - the array should contain 4 fields:     |     |          [horizontal, vertical, corner, header]     |     |      - default is set to:     |     |          ['-', '|', '+', '=']     |     |  set_cols_align(self, array)     |      Set the desired columns alignment     |     |      - the elements of the array should be either &quot;l&quot;, &quot;c&quot; or &quot;r&quot;:     |     |          * &quot;l&quot;: column flushed left     |          * &quot;c&quot;: column centered     |          * &quot;r&quot;: column flushed right     |     |  set_cols_dtype(self, array)     |      Set the desired columns datatype for the cols.     |     |      - the elements of the array should be either a callable or any of     |        &quot;a&quot;, &quot;t&quot;, &quot;f&quot;, &quot;e&quot; or &quot;i&quot;:     |     |          * &quot;a&quot;: automatic (try to use the most appropriate datatype)     |          * &quot;t&quot;: treat as text     |          * &quot;f&quot;: treat as float in decimal format     |          * &quot;e&quot;: treat as float in exponential format     |          * &quot;i&quot;: treat as int     |          * &quot;b&quot;: treat as boolean     |          * a callable: should return formatted string for any value given     |     |      - by default, automatic datatyping is used for each column     |     |  set_cols_valign(self, array)     |      Set the desired columns vertical alignment     |     |      - the elements of the array should be either &quot;t&quot;, &quot;m&quot; or &quot;b&quot;:     |     |          * &quot;t&quot;: column aligned on the top of the cell     |          * &quot;m&quot;: column aligned on the middle of the cell     |          * &quot;b&quot;: column aligned on the bottom of the cell     |     |  set_cols_width(self, array)     |      Set the desired columns width     |     |      - the elements of the array should be integers, specifying the     |        width of each column. For example:     |     |              [10, 20, 5]     |     |  set_deco(self, deco)     |      Set the table decoration     |     |      - 'deco' can be a combination of:     |     |          Texttable.BORDER: Border around the table     |          Texttable.HEADER: Horizontal line below the header     |          Texttable.HLINES: Horizontal lines between rows     |          Texttable.VLINES: Vertical lines between columns     |     |         All of them are enabled by default     |     |      - example:     |     |          Texttable.BORDER | Texttable.HEADER     |     |  set_header_align(self, array)     |      Set the desired header alignment     |     |      - the elements of the array should be either &quot;l&quot;, &quot;c&quot; or &quot;r&quot;:     |     |          * &quot;l&quot;: column flushed left     |          * &quot;c&quot;: column centered     |          * &quot;r&quot;: column flushed right     |     |  set_max_width(self, max_width)     |      Set the maximum width of the table     |     |      - max_width is an integer, specifying the maximum width of the table     |      - if set to 0, size is unlimited, therefore cells won't be wrapped     |     |  set_precision(self, width)     |      Set the desired precision for float/exponential formats     |     |      - width must be an integer &gt;= 0     |     |      - default value is set to 3     |     |  ----------------------------------------------------------------------     |  Data and other attributes defined here:     |     |  BORDER = 1     |     |  HEADER = 2     |     |  HLINES = 4     |     |  VLINES = 8DATA    __all__ = ['Texttable', 'ArraySizeError']    __author__ = 'Gerome Fournier &lt;jef(at)foutaise.org&gt;'    __credits__ = 'Jeff Kowalczyk:\n    - textwrap improved import\n ...at...    __license__ = 'MIT'    __version__ = '1.7.0'VERSION    1.7.0AUTHOR    Gerome Fournier &lt;jef(at)foutaise.org&gt;CREDITS    Jeff Kowalczyk:        - textwrap improved import        - comment concerning header output    Anonymous:        - add_rows method, for adding rows in one go    Sergey Simonenko:        - redefined len() function to deal with non-ASCII characters    Roger Lew:        - columns datatype specifications    Brian Peterson:        - better handling of unicode errors    Frank Sachsenheim:        - add Python 2/3-compatibility    Maximilian Hils:        - fix minor bug for Python 3 compatibility    frinkelpi:        - preserve empty lines```## Forks* [latextable](https://github.com/JAEarly/latextable) is a fork of texttable that provide a LaTeX backend.</longdescription>
</pkgmetadata>