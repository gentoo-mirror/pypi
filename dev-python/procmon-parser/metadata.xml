<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Parsing Procmon files with Python[![Build Status](https://github.com/eronnen/procmon-parser/actions/workflows/python-package.yml/badge.svg)](https://github.com/eronnen/procmon-parser/actions)[![Coverage Status](https://coveralls.io/repos/github/eronnen/procmon-parser/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/eronnen/procmon-parser?branch=master&amp;service=github)[![PyPI version](https://badge.fury.io/py/procmon-parser.svg)](https://badge.fury.io/py/procmon-parser)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/procmon-parser)Procmon (https://docs.microsoft.com/en-us/sysinternals/downloads/procmon) is a very powerful monitoring tool for Windows,capable of capturing file system, registry, process/thread and network activity. Procmon uses internal file formats for configuration (**PMC**) and logs (**PML**). Prior to ``procmon-parser``, **PMC** files could only be parsed and generated by the Procmon GUI, and **PML** files could be read only using the Procmon GUI, or by converting them to CSV or XML using Procmon command line.The goals of `procmon-parser` are:* Parsing &amp; Building **PMC** files - making it possible to dynamically add/remove filter rules, which can significantlyreduce the size of the log file over time as Procmon captures millions of events.* Parsing **PML** files - making it possible to directly load the raw **PML** file into convenient python objectsinstead of having to convert the file to CSV/XML formats prior to loading.## PMC (Process Monitor Configuration) Parser### UsageLoading configuration of a pre-exported Procmon configuration:```python&gt;&gt;&gt; from procmon_parser import load_configuration, dump_configuration, Rule&gt;&gt;&gt; with open(&quot;ProcmonConfiguration.pmc&quot;, &quot;rb&quot;) as f:...     config = load_configuration(f)&gt;&gt;&gt; config[&quot;DestructiveFilter&quot;]0&gt;&gt;&gt; config[&quot;FilterRules&quot;][Rule(Column.PROCESS_NAME, RuleRelation.IS, &quot;System&quot;, RuleAction.EXCLUDE), Rule(Column.PROCESS_NAME, RuleRelation.IS, &quot;Procmon64.exe&quot;, RuleAction.EXCLUDE), Rule(Column.PROCESS_NAME, RuleRelation.IS, &quot;Procmon.exe&quot;, RuleAction.EXCLUDE), Rule(Column.PROCESS_NAME, RuleRelation.IS, &quot;Procexp64.exe&quot;, RuleAction.EXCLUDE), Rule(Column.PROCESS_NAME, RuleRelation.IS, &quot;Procexp.exe&quot;, RuleAction.EXCLUDE), Rule(Column.PROCESS_NAME, RuleRelation.IS, &quot;Autoruns.exe&quot;, RuleAction.EXCLUDE), Rule(Column.OPERATION, RuleRelation.BEGINS_WITH, &quot;IRP_MJ_&quot;, RuleAction.EXCLUDE), Rule(Column.OPERATION, RuleRelation.BEGINS_WITH, &quot;FASTIO_&quot;, RuleAction.EXCLUDE), Rule(Column.RESULT, RuleRelation.BEGINS_WITH, &quot;FAST IO&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;pagefile.sys&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$Volume&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$UpCase&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$Secure&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$Root&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$MftMirr&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$Mft&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$LogFile&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.CONTAINS, &quot;$Extend&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$Boot&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$Bitmap&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$BadClus&quot;, RuleAction.EXCLUDE), Rule(Column.PATH, RuleRelation.ENDS_WITH, &quot;$AttrDef&quot;, RuleAction.EXCLUDE), Rule(Column.EVENT_CLASS, RuleRelation.IS, &quot;Profiling&quot;, RuleAction.EXCLUDE)]```Adding some new rules```python&gt;&gt;&gt; new_rules = [Rule('PID', 'is', '1336', 'include'), Rule('Process_Name', 'contains', 'python')]&gt;&gt;&gt; config[&quot;FilterRules&quot;] = new_rules + config[&quot;FilterRules&quot;]```Dropping filtered events```python&gt;&gt;&gt; config[&quot;DestructiveFilter&quot;] = 1```Dumping the new configuration to a file```python&gt;&gt;&gt; with open(&quot;ProcmonConfiguration1337.pmc&quot;, &quot;wb&quot;) as f:...     dump_configuration(config, f)```### File FormatFor the raw binary format of PMC files you can refer to the [docs](docs/PMC%20Format.md), or take a look at the source code in [configuration_format.py](procmon_parser/configuration_format.py).## PML (Process Monitor Log) Parser### Usage`procmon-parser` exports a `ProcmonLogsReader` class for reading logs directly from a PML file:```python&gt;&gt;&gt; from procmon_parser import ProcmonLogsReader&gt;&gt;&gt; f = open(&quot;LogFile.PML&quot;, &quot;rb&quot;)&gt;&gt;&gt; pml_reader = ProcmonLogsReader(f)&gt;&gt;&gt; len(pml_reader)  # number of logs53214&gt;&gt;&gt; first_event = next(pml_reader)  # reading the next event in the log&gt;&gt;&gt; print(first_event)Process Name=dwm.exe, Pid=932, Operation=RegQueryValue, Path=&quot;HKCU\Software\Microsoft\Windows\DWM\ColorPrevalence&quot;, Time=7/12/2020 1:18:10.7752429 AM&gt;&gt;&gt; print(first_event.process)  #  Accessing the process of the event&quot;C:\Windows\system32\dwm.exe&quot;, 932&gt;&gt;&gt; for module in first_event.process.modules[:3]:...     print(module)  # printing information about some modules&quot;C:\Windows\system32\dwm.exe&quot;, address=0x7ff6fa980000, size=0x18000&quot;C:\Windows\system32\d3d10warp.dll&quot;, address=0x7fff96700000, size=0x76c000&quot;C:\Windows\system32\wuceffects.dll&quot;, address=0x7fff9a920000, size=0x3f000&gt;&gt;&gt; first_event.stacktrace  # get a list of the stack frames addresses from the event[18446735291098361031, 18446735291098336505, 18446735291095097155, 140736399934388, 140736346856333, 140736346854333, 140698742953668, 140736303659045, 140736303655429, 140736303639145, 140736303628747, 140736303625739, 140736303693867, 140736303347333, 140736303383760, 140736303385017, 140736398440420, 140736399723393]&gt;&gt;&gt;```### File FormatFor the raw binary format of PML files you can refer to the [docs](docs/PML%20Format.md), or take a look at the source code in [stream_logs_format.py](procmon_parser/stream_logs_format.py).Currently the parser is only tested with PML files saved by *Procmon.exe* of versions v3.4.0 or higher.### TODOThe PML format is very complex so there are some features (unchecked in the list) that are not supported yet:- [ ] Getting the IRP name of the operation.- [ ] Category column and Detail column, which contains different information about each operation type, is supported only for some of the operations:    - [x] Network operations         - [x] UDP/TCP Unknown        - [x] UDP/TCP Other        - [x] UDP/TCP Send        - [x] UDP/TCP Receive        - [x] UDP/TCP Accept        - [x] UDP/TCP Connect        - [x] UDP/TCP Disconnect        - [x] UDP/TCP Reconnect        - [x] UDP/TCP Retransmit        - [x] UDP/TCP TCPCopy    - [ ] Process operations        - [x] Process Defined        - [x] Process Create        - [x] Process Exit        - [x] Thread Create        - [x] Thread Exit        - [x] Load Image        - [x] Thread Profile        - [x] Process Start        - [x] Process Statistics        - [ ] System Statistics    - [x] Registry operations        - [x] RegOpenKey        - [x] RegCreateKey        - [x] RegCloseKey        - [x] RegQueryKey        - [x] RegSetValue        - [x] RegQueryValue        - [x] RegEnumValue        - [x] RegEnumKey        - [x] RegSetInfoKey        - [x] RegDeleteKey        - [x] RegDeleteValue        - [x] RegFlushKey        - [x] RegLoadKey        - [x] RegUnloadKey        - [x] RegRenameKey        - [x] RegQueryMultipleValueKey        - [x] RegSetKeySecurity        - [x] RegQueryKeySecurity    - [ ] Filesystem Operations        - [ ] VolumeDismount        - [ ] VolumeMount        - [x] CreateFileMapping        - [x] CreateFile        - [ ] CreatePipe        - [x] ReadFile        - [x] WriteFile        - [ ] QueryInformationFile        - [ ] SetInformationFile        - [ ] QueryEAFile        - [ ] SetEAFile        - [ ] FlushBuffersFile        - [ ] QueryVolumeInformation        - [ ] SetVolumeInformation        - [x] DirectoryControl        - [x] FileSystemControl        - [x] DeviceIoControl        - [x] InternalDeviceIoControl        - [ ] Shutdown        - [ ] LockUnlockFile        - [x] CloseFile        - [ ] CreateMailSlot        - [ ] QuerySecurityFile        - [ ] SetSecurityFile        - [ ] Power        - [ ] SystemControl        - [ ] DeviceChange        - [ ] QueryFileQuota        - [ ] SetFileQuota        - [ ] PlugAndPlay    - [ ] Profiling Operations        - [ ] Thread Profiling        - [ ] Process Profiling        - [ ] Debug Output ProfilingThese are a lot of operation types so I didn't manage to get to all of them yet :(&lt;br/&gt;If there is an unsupported operation which you think its details are interesting, please let me know :) ### TestsTo test that the parsing is done correctly, There are two fairly large Procmon PML files and their respective CSV formatlog files, taken from 64 bit and 32 bit machine. The test checks that each event in the PML parsed by ``procmon-parser``equals to the respective event in the CSV. ## Contributing`procmon-parser` is developed on GitHub at [eronnen/procmon-parser](https://github.com/eronnen/procmon-parser).Feel free to report an issue or send a pull request, use the[issue tracker](https://github.com/eronnen/procmon-parser/issues).</longdescription>
</pkgmetadata>