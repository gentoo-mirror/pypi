<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/Privex/django-mail-queue.png?branch=master)](https://travis-ci.org/Privex/django-mail-queue)[![PyPi Version](https://img.shields.io/pypi/v/django-mail-queue.svg)](https://pypi.org/project/django-mail-queue/)![License Button](https://img.shields.io/pypi/l/django-mail-queue) ![PyPI - Downloads](https://img.shields.io/pypi/dm/django-mail-queue)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-mail-queue) ![GitHub last commit](https://img.shields.io/github/last-commit/Privex/django-mail-queue)Django Mail Queue=================This is a fork of http://github.com/dstegelman/django-mail-queue maintained by [Privex Inc.](https://www.privex.io/)Derek passed on ownership of the original `django-mail-queue` PyPi package to Privex on 17 Sep 2019Privex publishes the fork under the original PyPi package `django-mail-queue` (since v3.2.0).This fork is considered to be actively maintained by Privex for both bug fixes and feature additions sinceDecember 2018. If our fork has helped you, consider [grabbing a VPS or Dedicated Server from Privex](https://www.privex.io/) - prices start at as little as US$0.99/mo (yes that's 99 cents a month, and we take cryptocurrency!)Mail Queue provides an easy and simple way to send email.  Each email is saved and queued up either inreal time or with Celery.  As always, feedback, bugs, and suggestions are welcome.Install========`django-mail-queue` maintains high compatibility, from as old as Django 1.8 on Python 2.7, up to Django 2.2 on Python 3.7To check the compatibility, see [Travis CI](https://travis-ci.org/Privex/django-mail-queue), which runs the unittests on a variety of Python and Django versions.### Download and install from PyPi using pip (recommended)```shpip3 install django-mail-queue```### (Alternative) Manual install from Git**Option 1 - Use pip to install straight from Github**```shpip3 install git+https://github.com/Privex/django-mail-queue```**Option 2 - Clone and install manually**```bash# Clone the repository from Githubgit clone https://github.com/Privex/django-mail-queuecd django-mail-queue# RECOMMENDED MANUAL INSTALL METHOD# Use pip to install the source codepip3 install .# ALTERNATIVE MANUAL INSTALL METHOD# If you don't have pip, or have issues with installing using it, then you can use setuptools instead.python3 setup.py install```Quickstart============### Basic configurationFirst install the package into your project (see above).Open settings.py and add mailqueue to your INSTALLED_APPS:```pythonINSTALLED_APPS = (    'mailqueue',)```Add the below settings, and adjust as needed:```python# If you're using Celery, set this to TrueMAILQUEUE_CELERY = False# Enable the mail queue. If this is set to False, the mail queue will be disabled and emails will be # sent immediately instead.MAILQUEUE_QUEUE_UP = True# Maximum amount of emails to send during each queue runMAILQUEUE_LIMIT = 50# If MAILQUEUE_STORAGE is set to True, will ignore your default storage settings# and use Django's filesystem storage instead (stores them in MAILQUEUE_ATTACHMENT_DIR) MAILQUEUE_STORAGE = FalseMAILQUEUE_ATTACHMENT_DIR = 'mailqueue-attachments'```### Running the migrationsOnce you've added mailqueue to your `INSTALLED_APPS` plus the basic config in settings.py, run the migrations to create the tables needed:```bashpython manage.py migrate```### Basic usage of the queue programmaticallySimply save an email to the database using `MailerMessage`, and the queue will pick it up on it's next run.```pythonfrom mailqueue.models import MailerMessagemy_email = &quot;dave@example.com&quot;my_name = &quot;Dave Johnston&quot;content = &quot;&quot;&quot;Dear John,This is an example email from Dave.Thanks,Dave Johnston!&quot;&quot;&quot;msg = MailerMessage()msg.subject = &quot;Hello World&quot;msg.to_address = &quot;john@example.com&quot;# For sender names to be displayed correctly on mail clients, simply put your name first# and the actual email in angle brackets # The below example results in &quot;Dave Johnston &lt;dave@example.com&gt;&quot;msg.from_address = '{} &lt;{}&gt;'.format(my_name, my_email)# As this is only an example, we place the text content in both the plaintext version (content) # and HTML version (html_content).msg.content = contentmsg.html_content = contentmsg.save()``` ### Triggering the queue runnerTo send emails in the queue (without Celery), use the management command:```bash# Send up to MAILQUEUE_LIMIT emails nowpython manage.py send_queued_messages# You can use --limit / -l to override the settings.py limit for a specific runpython manage.py send_queued_messages --limit 10python manage.py send_queued_messages -l 10```If not using Celery, simply add a cron to your system to run `manage.py send_queued_messages` every minute (or howeveroften you want).Documentation-------------http://readthedocs.org/docs/django-mail-queue/en/latest/Mail Queue provides an admin interface to view all attempted emails and actions for resending failed messages.![Screenshot of Email List](https://cdn.privex.io/github/privex-mail-queue/pmq-message-list.png)![Screenshot of Email Actions](https://cdn.privex.io/github/privex-mail-queue/pmq-message-actions.png)Support/Help/Spam/Hate Mail---------------------------If you have questions/problems/suggestions the quickest way to reach me to is simply add a GitHub issue to this project.Running the Tests Locally-------------------------```pip install djangopip install -r requirements.txtpy.test mailqueue```</longdescription>
</pkgmetadata>