<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Keysight IxNetwork Open Traffic Generator[![Build](https://github.com/open-traffic-generator/snappi-ixnetwork/workflows/Build/badge.svg)](https://github.com/open-traffic-generator/snappi-ixnetwork/actions)[![pypi](https://img.shields.io/pypi/v/ixnetwork-open-traffic-generator.svg)](https://pypi.org/project/ixnetwork-open-traffic-generator)[![python](https://img.shields.io/pypi/pyversions/ixnetwork-open-traffic-generator.svg)](https://pypi.python.org/pypi/ixnetwork-open-traffic-generator)[![license](https://img.shields.io/badge/license-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)[![Total alerts](https://img.shields.io/lgtm/alerts/g/open-traffic-generator/snappi-ixnetwork.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/open-traffic-generator/snappi-ixnetwork/alerts/)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/open-traffic-generator/snappi-ixnetwork.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/open-traffic-generator/snappi-ixnetwork/context:python)The Keysight IxNetwork implementation of the open-traffic-generator models.  To start contributing, please see [contributing.md](contributing.md).# Getting Started## Install client package```python -m pip install --upgrade ixnetwork-open-traffic-generator```## Start scripting```python# for constructing traffic configurationfrom abstract_open_traffic_generator import (    port, flow, config, control, result)# for making API callsfrom ixnetwork_open_traffic_generator.ixnetworkapi import IxNetworkApi# provide API server and port addressesapi = IxNetworkApi(address='127.0.0.1', port=11009)tx = port.Port(name='Tx Port', location='127.0.0.1;2;1')rx = port.Port(name='Rx Port', location='127.0.0.1;2;2')# configure one TCP flow (with default protocol headers) to send 10000 packets,# each of 128 bytes at 10% of max line rateflw = flow.Flow(    name='Flow %s-&gt;%s' % (tx.name, rx.name),    tx_rx=flow.TxRx(        flow.PortTxRx(tx_port_name=tx.name, rx_port_name=rx.name)    ),    packet=[        flow.Header(flow.Ethernet()),        flow.Header(flow.Vlan()),        flow.Header(flow.Ipv4()),        flow.Header(flow.Tcp())    ],    size=flow.Size(128),    rate=flow.Rate(value=10, unit='line'),    duration=flow.Duration(flow.FixedPackets(packets=10000)))# push configuration and start transmitting flowscfg = config.Config(ports=[tx, rx], flows=[flw])api.set_state(control.State(control.ConfigState(config=cfg, state='set')))api.set_state(control.State(control.FlowTransmitState(state='start')))# fetch tx port stats and wait until total frames sent is correct or retry# retry count is 0retry = 5request = result.PortRequest(port_names=[tx.name], column_names=['frames_tx'])while sum([p['frames_tx'] for p in api.get_port_results(request)]) != 10000:    assert retry &gt; 0    retry -= 1```</longdescription>
</pkgmetadata>