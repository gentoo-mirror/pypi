<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://unidist.readthedocs.io&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/modin-project/unidist/blob/d17f0da551846277c9d56a7f5e7d8f244c09d660/docs/img/unidist-logo-simple-628x128.png?raw=true&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 align=&quot;center&quot;&gt;Unified Distributed Execution&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/modin-project/unidist/actions&quot;&gt;&lt;img src=&quot;https://github.com/modin-project/unidist/workflows/master/badge.svg&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://unidist.readthedocs.io/en/0.4.1/?badge=0.4.1&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://readthedocs.org/projects/unidist/badge/?version=0.4.1&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/unidist/0.4.1/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/pypi-0.4.1-blue.svg&quot; alt=&quot;PyPI version&quot; align=&quot;center&quot;&gt;&lt;/a&gt;&lt;/p&gt;### What is unidist?unidist is a framework that is intended to provide the unified API for distributed execution by supporting various performant execution backends. At the moment the following backends are supported under the hood:* [MPI](https://www.mpi-forum.org/)* [Dask Distributed](https://distributed.dask.org/en/latest/)* [Ray](https://docs.ray.io/en/master/index.html)* [Python Multiprocessing](https://docs.python.org/3/library/multiprocessing.html)unidist is designed to work in a [task-based parallel](https://en.wikipedia.org/wiki/Task_parallelism) model.Also, the framework provides a Python Sequential backend (`pyseq`), that can be used for debugging.### Installation#### Using pipunidist can be installed with `pip` on Linux, Windows and MacOS:```bashpip install unidist # Install unidist with dependencies for Python Multiprocessing and Python Sequential backends```unidist can also be used with MPI, Dask or Ray execution backend.If you don't have MPI, Dask or Ray installed, you will need to install unidist with one of the targets:```bashpip install unidist[all] # Install unidist with dependencies for all the backendspip install unidist[mpi] # Install unidist with dependencies for MPI backendpip install unidist[dask] # Install unidist with dependencies for Dask backendpip install unidist[ray] # Install unidist with dependencies for Ray backend```unidist automatically detects which execution backends are installed and uses that for scheduling computation.**Note:** There are different MPI implementations, each of which can be used as a backend in unidist.By default, mapping `unidist[mpi]` installs MPICH on Linux and MacOS and MSMPI on Windows. If you want to usea specific version of MPI, you can install the core dependencies of unidist as `pip install unidist` and theninstall the specific version of MPI using pip as shown in the [installation](https://mpi4py.readthedocs.io/en/latest/install.html)section of mpi4py documentation.#### Using condaFor installing unidist with dependencies for MPI and Dask execution backends into a conda environmentthe following command should be used:```bashconda install unidist-mpi unidist-dask -c conda-forge```All set of backends could be available in a conda environment by specifying:```bashconda install unidist-all -c conda-forge```or explicitly:```bashconda install unidist-mpi unidist-dask unidist-ray -c conda-forge```**Note:** There are different MPI implementations, each of which can be used as a backend in unidist.By default, mapping `unidist-mpi` installs MPICH on Linux and MacOS and MSMPI on Windows. If you want to usea specific version of MPI, you can install the core dependencies of unidist as `conda install unidist` and theninstall the specific version of MPI using conda as shown in the [installation](https://mpi4py.readthedocs.io/en/latest/install.html)section of mpi4py documentation. That said, it is highly encouraged to use your own MPI binaries as stated in the[Using External MPI Libraries](https://conda-forge.org/docs/user/tipsandtricks.html#using-external-message-passing-interface-mpi-libraries)section of the conda-forge documentation in order to get ultimate performance.For more information refer to [Installation](https://unidist.readthedocs.io/en/latest/installation.html) section.#### Choosing an execution backendIf you want to choose a specific execution backend to run on,you can set the environment variable `UNIDIST_BACKEND` and unidist will do computation with that backend:```bashexport UNIDIST_BACKEND=mpi  # unidist will use MPIexport UNIDIST_BACKEND=dask  # unidist will use Daskexport UNIDIST_BACKEND=ray  # unidist will use Ray```This can also be done within a notebook/interpreter before you initialize unidist:```pythonfrom unidist.config import BackendBackend.put(&quot;mpi&quot;)  # unidist will use MPIBackend.put(&quot;dask&quot;)  # unidist will use DaskBackend.put(&quot;ray&quot;)  # unidist will use Ray```If you have installed all the execution backends and haven't specified any of the execution backends, MPI is used by default.Currently, almost all MPI implementations require ``mpiexec`` command to be used when running an MPI program.If you use a backend other than MPI, you run a program as a regular python script (see below).#### Usage```python# script.pyimport unidistunidist.init() # MPI backend is used by default@unidist.remotedef foo(x):    return x * x# This will run `foo` on a pool of workers in parallel;# `refs` will contain object references to actual datarefs = [foo.remote(i) for i in range(5)]# To get the data call `unidist.get(...)`print(unidist.get(refs))```Run the `script.py` with:```bash$ mpiexec -n 1 python script.py  # for MPI backend# $ python script.py  # for any other supported backend[0, 1, 4, 9, 16]  # output```For more examples refer to [Getting Started](https://unidist.readthedocs.io/en/latest/getting_started.html) sectionin our documentation.### Powered by unidistunidist is meant to be used not only directly by users to get better performance in their workloads,but also be a core component of other libraries to power those with the performant execution backends.Refer to `Libraries powered by unidist` section of [Using Unidist](https://unidist.readthedocs.io/en/latest/using_unidist/index.html) pageto get more information on which libraries have already been using unidist.### Full DocumentationVisit the complete documentation on readthedocs: https://unidist.readthedocs.io.</longdescription>
</pkgmetadata>