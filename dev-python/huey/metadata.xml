<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: http://media.charlesleifer.com/blog/photos/huey2-logo.png*a lightweight alternative*.huey is:* a task queue (**2019-04-01**: `version 2.0 released &lt;https://huey.readthedocs.io/en/latest/changes.html&gt;`_)* written in python (2.7+, 3.4+)* clean and simple API* redis, sqlite, file-system, or in-memory storage* `example code &lt;https://github.com/coleifer/huey/tree/master/examples/&gt;`_.* `read the documentation &lt;https://huey.readthedocs.io/&gt;`_.huey supports:* multi-process, multi-thread or greenlet task execution models* schedule tasks to execute at a given time, or after a given delay* schedule recurring tasks, like a crontab* automatically retry tasks that fail* task prioritization* task result storage* task expiration* task locking* task pipelines and chains.. image:: http://i.imgur.com/2EpRs.jpgAt a glance-----------.. code-block:: python    from huey import RedisHuey, crontab    huey = RedisHuey('my-app', host='redis.myapp.com')    @huey.task()    def add_numbers(a, b):        return a + b    @huey.task(retries=2, retry_delay=60)    def flaky_task(url):        # This task might fail, in which case it will be retried up to 2 times        # with a delay of 60s between retries.        return this_might_fail(url)    @huey.periodic_task(crontab(minute='0', hour='3'))    def nightly_backup():        sync_all_data()Calling a ``task``-decorated function will enqueue the function call forexecution by the consumer. A special result handle is returned immediately,which can be used to fetch the result once the task is finished:.. code-block:: pycon    &gt;&gt;&gt; from demo import add_numbers    &gt;&gt;&gt; res = add_numbers(1, 2)    &gt;&gt;&gt; res    &lt;Result: task 6b6f36fc-da0d-4069-b46c-c0d4ccff1df6&gt;    &gt;&gt;&gt; res()    3Tasks can be scheduled to run in the future:.. code-block:: pycon    &gt;&gt;&gt; res = add_numbers.schedule((2, 3), delay=10)  # Will be run in ~10s.    &gt;&gt;&gt; res(blocking=True)  # Will block until task finishes, in ~10s.    5For much more, check out the `guide &lt;https://huey.readthedocs.io/en/latest/guide.html&gt;`_or take a look at the `example code &lt;https://github.com/coleifer/huey/tree/master/examples/&gt;`_.Running the consumer^^^^^^^^^^^^^^^^^^^^Run the consumer with four worker processes:.. code-block:: console    $ huey_consumer.py my_app.huey -k process -w 4To run the consumer with a single worker thread (default):.. code-block:: console    $ huey_consumer.py my_app.hueyIf your work-loads are mostly IO-bound, you can run the consumer with threadsor greenlets instead. Because greenlets are so lightweight, you can run quite afew of them efficiently:.. code-block:: console    $ huey_consumer.py my_app.huey -k greenlet -w 32Storage-------Huey's design and feature-set were informed by the capabilities of the`Redis &lt;https://redis.io&gt;`_ database. Redis is a fantastic fit for alightweight task queueing library like Huey: it's self-contained, versatile,and can be a multi-purpose solution for other web-application tasks likecaching, event publishing, analytics, rate-limiting, and more.Although Huey was designed with Redis in mind, the storage system implements asimple API and many other tools could be used instead of Redis if that's yourpreference.Huey comes with builtin support for Redis, Sqlite and in-memory storage.Documentation----------------`See Huey documentation &lt;https://huey.readthedocs.io/&gt;`_.Project page---------------`See source code and issue tracker on Github &lt;https://github.com/coleifer/huey/&gt;`_.Huey is named in honor of my cat:.. image:: http://m.charlesleifer.com/t/800x-/blog/photos/p1473037658.76.jpg?key=mD9_qMaKBAuGPi95KzXYqg</longdescription>
</pkgmetadata>