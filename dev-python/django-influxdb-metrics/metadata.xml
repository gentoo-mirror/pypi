<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django InfluxDB MetricsA reusable Django app that sends metrics about your project to InfluxDB.IMPORTANT NOTE: This release only supports InfluxDB &gt;= 0.9. We have also droppeda few measurements like CPU, memory and disk-space because[Telegraf](https://github.com/influxdb/telegraf) can collect these in a muchmuch better way.## PrerequisitesThis module has celery support but you don't have to use it, if you don't wantto.## InstallationTo get the latest stable release from PyPi.. code-block:: bash    pip install django-influxdb-metricsTo get the latest commit from GitHub.. code-block:: bash    pip install -e git+git://github.com/bitmazk/django-influxdb-metrics.git#egg=influxdb_metricsAdd `influxdb_metrics` to your `INSTALLED_APPS`.. code-block:: python    INSTALLED_APPS = (        ...,        'influxdb_metrics',    )## SettingsYou need to set the following settings::    INFLUXDB_HOST = 'your.influxdbhost.com'    INFLUXDB_PORT = '8086'    INFLUXDB_USER = 'youruser'    INFLUXDB_PASSWORD = 'yourpassword'    INFLUXDB_DATABASE = 'yourdatabase'    # This is for tagging the data sent to your influxdb instance so that you    # can query by host    INFLUXDB_TAGS_HOST = 'your_hostname'    # Seconds to wait for the request to the influxdb server before timing out    INFLUXDB_TIMEOUT = 5    # Set this to True if you are using Celery    INFLUXDB_USE_CELERY = True    # Set this to True if you are not using Celery    INFLUXDB_USE_THREADING = FalseIf you would like to disable sending of metrics (i.e. for local development),you can set::    INFLUXDB_DISABLED = TrueIf you are having trouble getting the postgresql database size, you might needto set::    INFLUXDB_POSTGRESQL_USE_LOCALHOST = TrueUse ssl with INFLUXDB_HOST::    INFLUXDB_SSL = True # default is FalseOptional with ssl::    INFLUXDB_VERIFY_SSL = True # default is FalseSpecify a prefix for metric measurement names (default is `django_`, E.g. `django_request`)    INFLUXDB_PREFIX = &quot;my_app&quot;     # measurement name == 'my_app_request'    INFLUXDB_PREFIX = &quot;&quot;           # measurement name == 'request'    INFLUXDB_PREFIX = None         # measurement name == 'request'## UsageThe app comes with several management commands which you should schedule viacrontab.### influxdb_get_postgresql_sizeCollects the total disk usage for the given database.You can run it like this::    ./manage.py influxdb_get_postgresql_size db_role db_nameYou should provide role and name for the database you want to measure. Makesure that you have a `.pgpass` file in place so that you don't need to entera password for this user.You could schedule it like this::    0 */1 * * * cd /path/to/project/ &amp;&amp; /path/to/venv/bin/python /path/to/project/manage.py influxdb_get_postgresql_size db_role db_name &gt; $HOME/mylogs/cron/influxdb-get-postgresql-size.log 2&gt;&amp;1The measurement created in your InfluxDB will be named `postgresql_size` andwill have the following fields:- `value`: The total database size in bytes### InfluxDbEmailBackendIf you would like to track the number of emails sent, you can set your`EMAIL_BACKEND`::    EMAIL_BACKEND = 'influxdb_metrics.email.InfluxDbEmailBackend'When the setting is set, metrics will be sent every time you run `.manage.py send_mail`.The measurement created in your InfluxDB will be named `django_email_sent`and will have the following fields:- `value`: The number of emails sent### InfluxDBRequestMiddlewareIf you would like to track the number and speed of all requests, you can addthe `InfluxDBRequestMiddleware` at the top of your `MIDDLEWARE_CLASSES`::    MIDDLEWARE_CLASSES = [        'influxdb_metrics.middleware.InfluxDBRequestMiddleware',        ...    ]The measurement created in your InfluxDB will be named `django.request` andwill have the following fields:- `value`: The request time in milliseconds.Additionally, it will have the following tags:- `is_ajax`: `true` if it was an AJAX request, otherwise `false`- `is_authenticated`: `true` if user was authenticated, otherwise `false`- `is_staff`: `true` if user was a staff user, otherwise `false`- `is_superuser`: `true` user was a superuser, otherwise `false`- `method`: The request method (`GET` or `POST`)- `module`: The python module that handled the request- `view`: The view class or function that handled the request- `referer`: The full URL from `request.META['HTTP_REFERER']`- `referer_tld`: The top level domain of the referer. It tries to be smart  and regards `google.co.uk` as a top level domain (instead of `co.uk`)- `full_path`: The full path that was requested- `path`: The path without GET params that was requested- `campaign`: A value that is extracted from the GET-parameter `campaign`,  if present. You can change the name of this keyword from `campaign` to  anything via the setting `INFLUXDB_METRICS_CAMPAIGN_KEYWORD`.If you have a highly frequented site, this table could get big really quick.You should make sure to create a shard with a low retention time for thisseries (i.e. 7d) and add a continuous query to downsample the data intohourly/daily averages. When doing that, you will obviously lose the detailedinformation like `referer` and `referer_tld` but it might make sense tocreate a second continuous query to count and downsample at least the`referer_tld` values.NOTE: I don't know what impact this has on overall request time or how muchstress this would put on the InfluxDB server if you get thousands of requests.It would probably wise to consider something like statsd to aggregate therequests first and then send them to InfluxDB in bulk.### Tracking UsersThis app's `models.py` contains a `post_save` and a `post_delete` handlerwhich will detect when a user is created or deleted.It will create three measurements in your InfluxDB:The first one will be named `django_auth_user_create` and will have thefollowing fields:- `value`: 1The second one will be named `django_auth_user_delete` and will have thefollowing fields:- `value`: 1The third one will be named `django_auth_user_count` and will have thefollowing fields:- `value`: The total number of users in the database### Tracking User LoginsThis app's `models.py` contains a handler for the `user_logged_in` signal.The measurement created in your InfluxDB will be named`django_auth_user_login` and will have the following fields:- `value`: 1### Making QueriesIf you need to get data out of your InfluxDB instance, you can easily do itlike so::from influxdb_metrics.utils import queryquery('select \* from series.name', time_precision='s', chunked=False)The method declaration is the same as the one in `InfluxDBClient.query()`.This wrapper simply instanciates a client based on your settings.## ContributeIf you want to contribute to this project, please perform the following steps.. code-block:: bash    # Fork this repository    # Clone your fork    mkvirtualenv -p python3.5 django-influxdb-metrics    make develop    git co -b feature_branch master    # Implement your feature and tests    git add . &amp;&amp; git commit    git push -u origin feature_branch    # Send us a pull request for your feature branch## Runing testsFor running the tests [Docker](https://docs.docker.com/) and[Docker compose](https://www.docker.com/products/docker-compose) is required.The test setup a Influxdb database for testing against real queries.In order to run the tests just run the command::    ./run_tests_with_docker.sh</longdescription>
</pkgmetadata>