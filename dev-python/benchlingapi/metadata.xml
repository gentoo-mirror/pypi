<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BenchlingAPI[![PyPI version](https://badge.fury.io/py/benchlingapi.svg)](https://badge.fury.io/py/benchlingapi)The (unofficial) python API wrapper for Benchling. For more information,see documentation at https://klavinslab.github.io/benchling-api/index.## Installation```pip install benchlingapi -U```## Getting StartedInitialize a session using your Benchling-provided API key:```pythonfrom benchlingapi import Sessionsession = Session(&quot;your_secret_benchling_api_key&quot;)```From there, you can access various models:```pythonsession.DNASequencesession.AASequencesession.Oligosession.Foldersession.Projectsession.Registrysession.Translationsession.EntitySchemasession.Batchsession.CustomEntity```Finding models:```python# get one modeldna = session.DNASequence.one()# find a specific model by its iddna = session.DNASequence.find('sdg_4tg23')# get the last 50 amino acidsproteins = session.AASequence.last(50)# get a registry by nameregistry = session.Registry.find_by_name(&quot;Klavins Lab Registry&quot;)```Updating models:```pythondna = session.DNASequence.one()dna.name = &quot;My new name&quot;dna.bases = &quot;AGGTAGGGTAGGGCCAGAGA&quot;# update the sequence on the serverdna.update()```Saving new models:```pythonfolder = session.Folder.find_by_name(&quot;My API Folder&quot;)dna = session.DNASequence(    name = 'my new dna',    bases = 'AGGTAGGATGGCCA',    folder_id = folder.id,    is_circular = False)# save the dna to your Benchling accountdna.save()```Registering models to your registry:```pythondna.set_schema(&quot;My DNA Schema&quot;)dna.register()```See the documentation for more information: https://klavinslab.github.io/benchling-api/index## TestingTesting is done using `pytest`. Tests will create live requests to a Benchling account.Since testing is done live, a Benchling account will need to be setup along with testingdata.To run tests, you must have a Benchling Account with an API key. Tests require a file in'tests/secrets/config.json' with the following format:```{  &quot;credentials&quot;: {    &quot;api_key&quot;: &quot;asdahhjwrthsdfgadfadfgadadsfa&quot;  },  &quot;sharelinks&quot;: [    &quot;https://benchling.com/s/seq-asdfadsfaee&quot;  ],  &quot;project&quot;: {    &quot;name&quot;: &quot;API&quot;  },  &quot;trash_folder&quot;: {    &quot;name&quot;: &quot;API_Trash&quot;  },  &quot;inventory_folder&quot;: {    &quot;name&quot;: &quot;API_Inventory&quot;  }}```On the Benchling side of things, in the account liked to the `credentials[&quot;api_key&quot;]`, you musthave a project corresponding to the `project[&quot;name&quot;]` value above. Within this project, you shouldhave two folder corresponding to the `trash_folder` and `inventory_folder` values above. Additionally,you should have at least one example of an AminoAcid, DNASequence, CustomEntity, and Oligo stored withinyour `inventory_folder`. Tests will copy the examples from the `inventory_folder` for downstream tests.After the tests, conclude, inventory in the `trash_folder` will get archived.#### Happy Cloning!</longdescription>
</pkgmetadata>