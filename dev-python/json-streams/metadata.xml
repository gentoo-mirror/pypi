<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># json-streams[![codecov](https://codecov.io/gh/spraakbanken/json-streams-py/branch/master/graph/badge.svg)](https://codecov.io/gh/spraakbanken/json-streams-py/)[![Build &amp; Publish](https://github.com/spraakbanken/json-streams-py/workflows/Build%20&amp;%20Publish/badge.svg)](https://github.com/spraakbanken/json-streams-py/actions)[![PyPI status](https://badge.fury.io/py/json-streams.svg)](https://pypi.org/project/json-streams/)[![image](https://img.shields.io/pypi/pyversions/json-streams.svg)](https://pypi.python.org/pypi/json-streams)Read and write JSON lazy, especially json-arrays.Handles both the JSON format:```json[  {    &quot;a&quot;: 1  },  {    &quot;a&quot;: 2  }]```As well as JSON LINES format:```json{&quot;a&quot;:1}{&quot;a&quot;: 2}```Also supports streaming from gzipped files.Uses `orjson` if present, otherwise standard `json`.## Usage### Installation```bash# Using standard jsonpip install json-streams# Using orjsonpip install json-streams[orjson]```### NoteThis library prefers files opened in binary mode.Therefore does all `dumps`-methods return `bytes`.All `loads` methods handles `str`, `bytes` and `bytesarray` arguments.### ExamplesAllows you to use `json.load` and `json.dump` withboth json and json-lines files as well as dumping generators.```pythonimport json_streams# This command tries to guess format and opens the filedata = json_streams.load_from_file(&quot;data.json&quot;) # or data.jsonl# Write to file, again guessing formatjson_streams.dump_to_file(data, &quot;data.jsonl&quot;)``````pythonfrom json_streams import json_iter, jsonl_iter# Open and read the file without guessingdata = json_iter.load_from_file(&quot;data.json&quot;)# Process file# Write to file without guessingjsonl_iter.dump_to_file(data, &quot;data.jsonl&quot;)``````pythonimport json_streamsdef process(data):    for entry in data:        # process        yield entrydef read_process_and_write(filename_in, filename_out):    json_streams.dump_to_file(        process(            json_streams.load_from_file(filename_in)        ),        filename_out    )```You can also use json_streams as a sink, that you can send data to.```pythonimport json_streamswith open(&quot;out.json&quot;, &quot;bw&quot;) as fp:  # guessing format  with json_streams.sink(fp) as sink:    for data in data_source():      sink.send(data)```# Release Notes## Latest Changes## 0.12.4 - 2023-03-10### Changed- Set minimum supported python version to 3.9. PR [#10](https://github.com/spraakbanken/json-streams-py/pull/10) by [@kod-kristoff](https://github.com/kod-kristoff).### Fixed- Fix error when parsing json with floats. PR [#8](https://github.com/spraakbanken/json-streams-py/pull/8) by [@kod-kristoff](https://github.com/kod-kristoff).- Fix gzip for files. PR [#6](https://github.com/spraakbanken/json-streams-py/pull/6) by [@kod-kristoff](https://github.com/kod-kristoff).## 0.12.0### Added- Add support for reading and writing gzipped files. PR [#5](https://github.com/spraakbanken/json-streams-py/pull/5) by [@kod-kristoff](https://github.com/kod-kristoff).### Changed- Dropped support for Python 3.6, 3.7 and 3.8.## 0.11.0- Allow kwargs to dump\* methods. PR [#3](https://github.com/spraakbanken/json-streams-py/pull/3) by [@kod-kristoff](https://github.com/kod-kristoff).# DevelopmentAfter cloning the repo, just run```$ make dev$ make test```to setup a virtual environment,install dev dependenciesand run the unit tests._Note:_ If you run the command in a activated virtual environment,that environment is used instead.# DeploymentPush a tag in the format `v\d+.\d+.\d+`to `main`-branch, to build &amp; publish package to PyPi.</longdescription>
</pkgmetadata>