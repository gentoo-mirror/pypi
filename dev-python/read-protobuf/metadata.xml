<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># read-protobufSmall library to read serialized protobuf(s) directly into Pandas DataFrame.This is intended to be a simple shortcut for translating serializedprotobuf bytes / files directly to a dataframe.## InstallAvailable via pip:```bash$ pip install read-protobuf```## UsageRun the [demo-notebook](tests/demo.ipynb) for an interactive demo.```pythonimport demo_pb2                             # compiled protobuf message module from read_protobuf import read_protobufMessageType = demo_pb2.MessageType()        # instantiate a new message typedf = read_protobuf(b'\x00\x00', MessageType)    # create a dataframe from serialized protobuf bytesdf = read_protobuf([b'\x00\x00', b'x00\x00'] MessageType)    # read multiple protobuf bytesdf = read_protobuf('demo.pb', MessageType)    # use file instead of bytesdf = read_protobuf(['demo.pb', 'demo2.pb'], MessageType)    # read multiple files# optionsdf = read_protobuf('demo.pb', MessageType, flatten=False)    # don't flatten pb messagesdf = read_protobuf('demo.pb', MessageType, prefix_nested=True)    # prefix nested messages with parent keys (like pandas.io.json.json_normalize)```To compile a protobuf Message class from python, use:```bash$ protoc --python_out=&quot;.&quot; demo.proto```## Alternatives#### protobuf-to-dicthttps://github.com/benhodgson/protobuf-to-dictThis library was developed earlier to convert protobufs to JSON via a dict.#### MessageToDict, MessageToJsonThe google protobuf library comes with utilities to convert messages to a `dict` or JSON,then loaded by Pandas.```pythonfrom google.protobuf.json_format import MessageToJsonfrom google.protobuf.json_format import MessageToDict```In brief tests, the `read_protobuf` package is about 2x as fastas using `MessageToDict` and 3x as fast as `MessageToJson`.## DevelopTo install a development version of the package, run from the root directory:```bash$ pip install -e .```- To install development dependencies, use the optional `[dev]`dependencies:```bash$ pip install -e &quot;.[dev]&quot;```## FormatUses `black` and `isort` to format files.```bash$ make black$ make isort```## LintUses `ruff` to lint application.```bash$ make ruff```## TestUses `pytest` to run unit tests. From the root of the repository, run:```bash$ make pytest# specify test$ pytest -k &quot;TestRead::test_read_bytes&quot;```## Code CoverageUse `coverage` to monitor code coverage during tests.To record coverage while running tests, run:```bash$ make pytest-cov```## License[MIT License](LICENSE)</longdescription>
</pkgmetadata>