<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/internap/fake-switches.svg?branch=master)](https://travis-ci.org/internap/fake-switches)[![PyPI version](https://badge.fury.io/py/fake-switches.svg)](http://badge.fury.io/py/fake-switches)Fake-switches=============![Commandline Demo](demo-cli.gif)Fake-switches is a pluggable switch/router command-line simulator. It is meantto help running integrated tests against network equipment without the burdenof having devices in a lab. This helps testing the communication with theequipment along with all of its layers for more robust high level tests.  Sinceit is meant to be used by other systems and not humans, error handling onincomplete commands and fail-proofing has been mostly left out and onlyrelevant errors are shown. The library can easily be extended to react to some changes in the fake switchconfiguration and control an actual set of tools to have an environmentbehaving like a real one driven by a switch.  For example, you could hookyourself to the VLAN creation and use vconfig to create an actual vlan on amachine for some network testing.This library is NOT supported by any vendor, it was built byreverse-engineering network equipment.Actual supported commands=========================Command support has been added in a as-needed manner for the purpose of whatwas tested and how.  So see which commands may be used and their supportedbehavior, please see the tests section for each model.| Model   | Protocols        | Test location || ------- | ---------------- | ------------- || Cisco   | ssh and telnet   | [tests/cisco/test_cisco_switch_protocol.py](tests/cisco/test_cisco_switch_protocol.py) |             | Brocade | ssh              | [tests/brocade/test_brocade_switch_protocol.py](tests/brocade/test_brocade_switch_protocol.py) || Juniper | netconf over ssh | [tests/juniper/juniper_base_protocol_test.py](tests/juniper/juniper_base_protocol_test.py) || Dell    | ssh and telnet   | [tests/dell/](tests/dell/) |Using it with Docker====================```shell$ docker run -P -d internap/fake-switches$ docker psCONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS              PORTS                     NAMES6eec86849561        internap/fake-switches            &quot;/bin/sh -c 'fake-swi&quot;   35 seconds ago      Up 13 seconds       0.0.0.0:32776-&gt;22/tcp     boring_thompson$ ssh 127.0.0.1 -p 32776 -l rootroot@127.0.0.1's password:  # rootmy_switch&gt;enablePassword:  # press &lt;RETURN&gt;my_switch#show runBuilding configuration...Current configuration : 164 bytesversion 12.1!hostname my_switch!!vlan 1!interface FastEthernet0/1!interface FastEthernet0/2!interface FastEthernet0/3!interface FastEthernet0/4!endmy_switch#```Launching with custom parameters--------------------------------```shell$ docker run -P -d -e SWITCH_MODEL=&quot;another_model&quot; internap/fake-switches```Supported parameters--------------------| Name              | Default value     || ----------------- | ----------------- || SWITCH_MODEL | cisco_generic || SWITCH_HOSTNAME | switch || SWITCH_USERNAME | root || SWITCH_PASSWORD | root || LISTEN_HOST | 0.0.0.0 || LISTEN_PORT | 22 |Building image from source--------------------------```shell$ docker build -t fake-switches .$ docker run -P -d fake-switches```Extending functionality=======================The SwitchConfiguration class can be extended and given an object factory withcustom classes that can act upon resources changes. For example :```pythonfrom twisted.internet import reactorfrom fake_switches.switch_configuration import SwitchConfiguration, Portfrom fake_switches.transports.ssh_service import SwitchSshServicefrom fake_switches.cisco.cisco_core import CiscoSwitchCoreclass MySwitchConfiguration(SwitchConfiguration):    def __init__(self, *args, **kwargs):        super(MySwitchConfiguration, self).__init__(objects_overrides={&quot;Port&quot;: MyPort}, *args, **kwargs)class MyPort(Port):    def __init__(self, name):        self._access_vlan = None        super(MyPort, self).__init__(name)    @property    def access_vlan(self):        return self._access_vlan    @access_vlan.setter    def access_vlan(self, value):        if self._access_vlan != value:            self._access_vlan = value            print &quot;This could add vlan to eth0&quot;if __name__ == '__main__':    ssh_service = SwitchSshService(        ip=&quot;127.0.0.1&quot;,        ssh_port=11001,        switch_core=CiscoSwitchCore(MySwitchConfiguration(&quot;127.0.0.1&quot;, &quot;my_switch&quot;, ports=[MyPort(&quot;FastEthernet0/1&quot;)])))    ssh_service.hook_to_reactor(reactor)    reactor.run()```Then, if you connect to the switch and do```    ssh root@127.0.0.1 -p 11001    password : root    &gt; enable    password:    # configure terminal    # vlan 1000    # interface FastEthernet0/1    # switchport access vlan 1000```Your program should say &quot;This could add vlan to eth0&quot; or do anything you wouldwant it to do :)Starting a switch from the command line=======================================```shell    pip install fake-switches    fake-switches    # On a different shell, type the following:    ssh root@127.0.0.1 -p 22222```Command line help-----------------The --help flag is supported.    fake-switches --help    usage: fake-switches [-h] [--model MODEL] [--hostname HOSTNAME]                         [--username USERNAME] [--password PASSWORD]                         [--listen-host LISTEN_HOST] [--listen-port LISTEN_PORT]    Fake-switch simulator launcher    optional arguments:      -h, --help            show this help message and exit      --model MODEL         Switch model, allowed values are                            juniper_qfx_copper_generic, cisco_2960_24TT_L,                            dell_generic, dell10g_generic, juniper_generic,                            cisco_2960_48TT_L, cisco_generic, brocade_generic                            (default: cisco_generic)      --hostname HOSTNAME   Switch hostname (default: switch)      --username USERNAME   Switch username (default: root)      --password PASSWORD   Switch password (default: root)      --listen-host LISTEN_HOST                            Listen host (default: 0.0.0.0)      --listen-port LISTEN_PORT                            Listen port (default: 2222)Available switch models-----------------------At time of writing this document, the following models are available:  * brocade_generic  * cisco_generic  * cisco_2960_24TT_L  * cisco_2960_48TT_L  * dell_generic  * dell10g_generic  * juniper_generic  * juniper_qfx_copper_genericUse the --help flag to find the available models.The generic models are mainly for test purposes. They usually have less ports than a proper switchmodel but behave the same otherwise. Once a &quot;core&quot; is available, more specific models can be veryeasily added. Send your pull requests :)Contributing============Feel free raise issues and send some pull request,we'll be happy to look at them!</longdescription>
</pkgmetadata>