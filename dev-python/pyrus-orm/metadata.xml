<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pyrus-orm=========Radically simple, django/peewee-like, easy and incomplete ORM for [Pyrus](https://pyrus.com).With pyrus-orm, you can read, create and modify [tasks](https://pyrus.com/en/help/api/models#form-registry-task).Works with [pyrus-api](https://github.com/simplygoodsoftware/pyrusapi-python) under the hood.### This is an early development version### Features:- Define models with:    - [x] simple fields (text, number, dates, checkmark, flag, ...)    - [x] catalog fields, single item    - [ ] catalog fields, multiple items    - [ ] &quot;title&quot; fields (pyrus-orm ignores the nested structure of 'title' fields, all its contents are treated as usual root-level fields)    - [x] multiple choice fields (without nested fields at this moment)- Operations with models:    - [x] Create and save    - [x] Read from registry by ID    - [x] Modify and save changes- Filtering:    - [x] by include_archived and steps fields    - [x] by value of simple or catalog fields    - [ ] less than, greater than    - [ ] value in a list    - [ ] rangesInstallation-----------```shellpip install pyrus-orm```Examples-------### Define model and initialize```pythonclass Book(PyrusModel):    title = TextField(1)  # 1 is a field ID in pyrus's form    time = TimeField(2)    date = DateField(3)    number = NumericField(4)    round_number = IntegerField(5)    author = CatalogField(6, catalog=&lt;catalog id&gt;)    class Meta:        form_id = &lt;form_id&gt;pyrus_api = PyrusAPI(...)session = PyrusORMSession(pyrus_api)set_session_global(session)```### Create item```pythonbook = Book(    title='Don Quixote',    date='1605-01-01',    author=Book.author.find({'Name': 'Alonso Fernández de Avellaneda'}))book.save()book.id&gt;&gt;&gt; &lt;task_id&gt;```### Read and modify item```pythonbook = Book.objects.get(id=...)# simple fieldbook.title&gt;&gt;&gt; 'Don Quixote'book.title = 'Don Quixote, Part Two'book.save('title changed')# catalog fieldbook.author&gt;&gt;&gt; CatalogItem(item_id=..., values={'Name': 'Alonso Fernández de Avellaneda'})  # values comes from the catalog definitionbook.author.find_and_set({'Name': 'Miguel de Cervantes'})  # may raise ValueError if no value foundbook.save('changed an author to the real one')```### Catalog Enum fieldsEnums can be mapped to catalog items by ID or by custom property name.#### Enums mapped to specific catalog items IDNo catalog lookups are preformed on reading or writing of such fields.```pythonclass Genre(Enum):    fiction = 100001    nonfiction = 100002class Book(PyrusModel):    genre = CatalogEnumField(&lt;field_id&gt;, catalog_id=&lt;catalog_id&gt;, enum=Genre, id_field='item_id')book = Book.objects.get(id=...)book.genre&gt;&gt;&gt; Genre.fictionbook.genre = Genre.nonfictionbook.save()book.genre&gt;&gt;&gt; Genre.nonfiction```#### Enums mapped to catalog item properties(imagine book has a property 'media' with field 'Name')```pythonclass Media(Enum):    paper = 'paper'    papirus = 'papirus'    pdf = 'pdf'class Book(PyrusModel):    media = CatalogEnumField(&lt;field_id&gt;, catalog_id=&lt;catalog_id&gt;, enum=Genre, id_field='Name')```### FilteringOnly basic filtering is supported:```pythonBook.objects.get_filtered(    title='Don Quixote',)&gt;&gt;&gt; [Book(...), ...]Book.objects.get_filtered(    genre=Book.genre.find({'Name': 'Fiction'}))&gt;&gt;&gt; [Book(...), ...]Book.objects.get_filtered(    ...    include_archived=True,    steps=[1, 2],)&gt;&gt;&gt; [Book(...), ...]```### Catalog fields, all the API```python# Read values# Non-empty valuebook.author&gt;&gt;&gt; CatalogItem(item_id=..., values={&lt;your custom values here&gt;})assert bool(book.author) == True# Empty valuebook.author&gt;&gt;&gt; CatalogEmptyValue()assert bool(book.author) == False# Get all possible values (works for empty fields as well)book.author.catalog()&gt;&gt;&gt; [CatalogItem(...), CatalogItem(...), ...]# Find a value in a catalognew_author = book.author.catalog().find({'Name': 'Miguel de Cervantes'})new_author&gt;&gt;&gt; CatalogItem(item_id=..., values={'Name': 'Miguel de Cervantes'})  # or Nonebook.author = new_authorbook.save()# Find and set shortcutbook.author.catalog().find_and_set({'Name': 'William Shakespeare'})book.author.find_and_set({'Name': 'NonExistent'})&gt;&gt;&gt; ValueError raised# Set value to a specific item_idbook.author = CatalogItem(item_id=123456)```</longdescription>
</pkgmetadata>