<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========Tilematrix==========Tilematrix handles geographic web tiles and tile pyramids... image:: https://badge.fury.io/py/tilematrix.svg    :target: https://badge.fury.io/py/tilematrix.. image:: https://travis-ci.org/ungarj/tilematrix.svg?branch=master    :target: https://travis-ci.org/ungarj/tilematrix.. image:: https://coveralls.io/repos/github/ungarj/tilematrix/badge.svg?branch=master    :target: https://coveralls.io/github/ungarj/tilematrix?branch=master.. image:: https://anaconda.org/conda-forge/tilematrix/badges/version.svg    :target: https://anaconda.org/conda-forge/tilematrix    .. image:: https://img.shields.io/pypi/pyversions/mapchete.svgThe module is designed to translate between tile indices (zoom, row, column = ZYX) andmap coordinates (e.g. latitute, longitude).Tilematrix supports **metatiling** and **tile buffers**. Furthermore it makesheavy use of shapely_ and it can also generate ``Affine`` objects per tile whichfacilitates working with rasterio_ for tile based data reading and writing.It is very similar to mercantile_ but besides of supporting spherical mercatortile pyramids, it also supports geodetic (WGS84) tile pyramids... _shapely: http://toblerity.org/shapely/.. _rasterio: https://github.com/mapbox/rasterio.. _mercantile: https://github.com/mapbox/mercantile------------Installation------------Use ``conda`` to install the latest stable version:.. code-block:: shell    conda install -c conda-forge -y tilematrixUse ``pip`` to install the latest stable version:.. code-block:: shell    pip install tilematrixManually install the latest development version.. code-block:: shell    pip install -r requirements.txt    python setup.py install-------------Documentation-------------* `API documentation &lt;doc/tilematrix.md&gt;`_* `examples &lt;doc/examples.md&gt;`_CLI---This package ships with a command line tool ``tmx`` which provides the followingsubcommands:* ``bounds``: Print bounds of given Tile.* ``bbox``: Print bounding box geometry of given Tile.* ``tile``: Print Tile covering given point.* ``tiles``: Print Tiles covering given bounds.Geometry outputs can either be formatted as ``WKT`` or ``GeoJSON``. For examplethe following command will print a valid ``GeoJSON`` representing all tilesfor zoom level 1 of the ``geodetic`` WMTS grid:.. code-block:: shell    $ tmx -f GeoJSON tiles -- 1 -180 -90 180 90    {      &quot;type&quot;: &quot;FeatureCollection&quot;,      &quot;features&quot;: [        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[-90.0, 0.0], [-90.0, 90.0], [-180.0, 90.0], [-180.0, 0.0], [-90.0, 0.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 0, &quot;row&quot;: 0, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;},        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[0.0, 0.0], [0.0, 90.0], [-90.0, 90.0], [-90.0, 0.0], [0.0, 0.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 1, &quot;row&quot;: 0, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;},        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[90.0, 0.0], [90.0, 90.0], [0.0, 90.0], [0.0, 0.0], [90.0, 0.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 2, &quot;row&quot;: 0, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;},        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[180.0, 0.0], [180.0, 90.0], [90.0, 90.0], [90.0, 0.0], [180.0, 0.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 3, &quot;row&quot;: 0, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;},        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[-90.0, -90.0], [-90.0, 0.0], [-180.0, 0.0], [-180.0, -90.0], [-90.0, -90.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 0, &quot;row&quot;: 1, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;},        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[0.0, -90.0], [0.0, 0.0], [-90.0, 0.0], [-90.0, -90.0], [0.0, -90.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 1, &quot;row&quot;: 1, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;},        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[90.0, -90.0], [90.0, 0.0], [0.0, 0.0], [0.0, -90.0], [90.0, -90.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 2, &quot;row&quot;: 1, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;},        {&quot;geometry&quot;: {&quot;coordinates&quot;: [[[180.0, -90.0], [180.0, 0.0], [90.0, 0.0], [90.0, -90.0], [180.0, -90.0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;col&quot;: 3, &quot;row&quot;: 1, &quot;zoom&quot;: 1}, &quot;type&quot;: &quot;Feature&quot;}      ]    }Print ``WKT`` representation of tile ``4 15 23``:.. code-block:: shell    $ tmx bbox 4 15 23    POLYGON ((90 -90, 90 -78.75, 78.75 -78.75, 78.75 -90, 90 -90))Also, tiles can have buffers around called ``pixelbuffer``:.. code-block:: shell    $ tmx --pixelbuffer 10 bbox 4 15 23    POLYGON ((90.439453125 -90, 90.439453125 -78.310546875, 78.310546875 -78.310546875, 78.310546875 -90, 90.439453125 -90))Print ``GeoJSON`` representation of tile ``4 15 23`` on a ``mercator`` tilepyramid:.. code-block:: shell    $ tmx -output_format GeoJSON -grid mercator bbox 4 15 15    {&quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [[[20037508.342789203, -20037508.3427892], [20037508.342789203, -17532819.799940553], [17532819.799940553, -17532819.799940553], [17532819.799940553, -20037508.3427892], [20037508.342789203, -20037508.3427892]]]}----------------Conda Publishing----------------Use bot pull requests generated with every release at tilematrix-feedstock_  repository for releasing new versions on ``conda-forge``.-------License-------MIT LicenseCopyright (c) 2015-2022 `EOX IT Services`_.. _`EOX IT Services`: https://eox.at/.. _`tilematrix-feedstock`: https://github.com/conda-forge/tilematrix-feedstock</longdescription>
</pkgmetadata>