<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Forwardable===========Utility for easy object composition via delegation. Roughly ported fromRuby's forwardable_ standard library.Requirements------------Python 2.7 or 3.3 w/ standard library. Might work on other version ofPython, too.Installation------------``$ pip install forwardable``Usage-----Most Common Use Case~~~~~~~~~~~~~~~~~~~~The ``@forwardable.forwardable()`` decorator enables you to use``def_delegator()`` and ``def_delegators()`` in a class definition block.Use ``def_delegators()`` to define multiple attr forwarding:.. code-block:: python    from forwardable import forwardable    @forwardable() # Note the () here, which is required.    class Foo(object):        def_delegators('bar', 'add, __len__')        def __init__(self):            self.bar = set()    foo = Foo()    foo.add(1) # Delegates to foo.bar.add()    assert len(foo) == 1 # Magic methods works, tooEasy, heh?Define a Single Forwarding~~~~~~~~~~~~~~~~~~~~~~~~~~In case you only need to delegate one method to a delegatee, justuse ``def_delegator``:.. code-block:: python    from forwardable import forwardable    @forwardable()    class Foo(object):        def_delegator('bar', '__len__')        def __init__(self):            self.bar = set()    assert len(Foo()) == 0And it should work just fine. Actually, ``def_delegators()`` calls``def_delegator()`` under the hood.Plucking~~~~~~~~.. code-block:: python    from forwardable import forwardable    @forwardable()    class MyDict(object):        def_delegator('dct.get', '__call__')        def __init__(self):            self.dct = {'foo', 42}    d = MyDict()    # Equivlant to d.dct.get('foo')    assert d('foo') == 42Less Magical Usage~~~~~~~~~~~~~~~~~~The ``@forwardable()`` decorator injects ``def_delegator{,s}`` into themodule scope temorarily, which is why you don't have to import themexplicitly. This is admittedly magical but discourages the usageof ``import *``. And it's always nice to type less characters wheneverunnecessary.If you hesitate to utilize this injection magic, just explicitly say``from forwardable import def_delegator, def_delegators``, use them ina class definition and you'll be fine.Links-----* Source Repository: https://github.com/5long/forwardable* Feedback: https://github.com/5long/forwardable/issuesLicense-------MIT license... _forwardable: http://ruby-doc.org/stdlib-2.0/libdoc/forwardable/rdoc/Forwardable.html</longdescription>
</pkgmetadata>