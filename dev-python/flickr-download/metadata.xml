<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flickr Download## Introduction[![pre-commit](https://github.com/beaufour/flickr-download/actions/workflows/pre-commit.yml/badge.svg)](https://github.com/beaufour/flickr-download/actions/workflows/pre-commit.yml) [![test](https://github.com/beaufour/flickr-download/actions/workflows/test.yml/badge.svg)](https://github.com/beaufour/flickr-download/actions/workflows/test.yml) [![Coverage Status](https://coveralls.io/repos/github/beaufour/flickr-download/badge.svg)](https://coveralls.io/github/beaufour/flickr-download)Simple script to download a [Flickr](http://flickr.com) set.To use it you need to get your own Flickr API key here:&lt;https://www.flickr.com/services/api/misc.api_keys.html&gt;    flickr_download -k &lt;api key&gt; -s &lt;api secret&gt; -d &lt;set id&gt;It can also list the public set ids for a given user:    flickr_download -k &lt;api key&gt; -s &lt;api secret&gt; -l &lt;user name&gt;The user name can be passed in as a URL, email, or user name.Get a public set using the title and id to name the downloaded files:    flickr_download -k &lt;api key&gt; -s &lt;api secret&gt; -d &lt;set id&gt; -n title_and_idDownload private or restricted photos by authorizing against the users account. (see below)## InstallationTo install this script use the Python pip utility bundled with your Python distribution:    &gt; pip install flickr_download## API keyGet your [Flickr API key](http://www.flickr.com/services/api/).You can also set your API key and secret in `~/.flickr_download`:    api_key: my_key    api_secret: my_secret## User Authentication SupportThe script also allows you to authenticate as a user account. That way you can download sets thatare private and public photos that are restricted. To use this mode, initialize the authorization byrunning the script with the `t` parameter to authorize the app.    flickr_download -k &lt;api key&gt; -s &lt;api secret&gt; -tThis will save `~/.flickr_token` containing the authorization. Subsequent calls with `-t` will use thestored token. For example using    flickr_download -k &lt;api key&gt; -s &lt;api secret&gt; -l &lt;USER&gt;with _USER_ set to your own username, will only fetch your publicly available sets, whereas adding `-t`    flickr_download -k &lt;api key&gt; -s &lt;api secret&gt; -l &lt;USER&gt; -twill fetch all your sets including private restricted sets.Note, if you want to log in as another user delete `~/.flickr_token`.## Downloading a lot of photosIf you are downloading a lot of photos, two parameters will speed things up. Especially on errors (which the Flickr API seems to like to throw regularly). Those parameters are:* `--cache &lt;cache_file&gt;` â€“ this will cache API responses in the given file, and will thus speed up repeated calls to the same API* `--metadata_store` - this will store metadata information for the set downloads in `.metadata.db`, which makes it faster to skip already downloaded files.So to download all the sets for a given user `XXX`, including private photos and sets, do:    &gt; flickr_download.py -api_key KEY -api_secret SECRET --user_auth --cache api_cache --metadata_store --download_user XXX## Optional arguments    -h, --help            show this help message and exit    -k API_KEY, --api_key API_KEY                            Flickr API key    -s API_SECRET, --api_secret API_SECRET                            Flickr API secret    -t, --user_auth       Enable user authentication    -l USER, --list USER  List photosets for a user    -d SET_ID, --download SET_ID                            Download the given set    -p USERNAME, --download_user_photos USERNAME                            Download all photos for a given user    -u USERNAME, --download_user USERNAME                            Download all sets for a given user    -i PHOTO_ID, --download_photo PHOTO_ID                            Download one specific photo    -q SIZE_LABEL, --quality SIZE_LABEL                            Quality of the picture. Examples: Original/Large/Medium/Small. By default the largest available is used.    -n NAMING_MODE, --naming NAMING_MODE                            Photo naming mode. Use --list_naming to get a list of possible NAMING_MODEs    -m, --list_naming     List naming modes    -o, --skip_download   Skip the actual download of the photo    -j, --save_json       Save photo info like description and tags, one .json file per photo    -c CACHE_FILE, --cache CACHE_FILE                            Cache results in CACHE_FILE (speed things up on large downloads in particular)    --metadata_store      Store information about downloads in a metadata file (helps with retrying downloads)    -v, --verbose         Turns on verbose logging    --version             Lists the version of the tool</longdescription>
</pkgmetadata>