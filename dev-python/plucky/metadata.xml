<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>plucky: concise deep obj.get()==============================.. image:: https://img.shields.io/pypi/v/plucky.svg    :target: https://pypi.python.org/pypi/plucky.. image:: https://img.shields.io/pypi/l/plucky.svg    :target: https://pypi.python.org/pypi/plucky.. image:: https://img.shields.io/pypi/wheel/plucky.svg    :target: https://pypi.python.org/pypi/plucky.. image:: https://img.shields.io/pypi/pyversions/plucky.svg    :target: https://pypi.python.org/pypi/plucky.. image:: https://api.travis-ci.org/randomir/plucky.svg?branch=master    :target: https://travis-ci.org/randomir/plucky``plucky.pluckable`` happily wraps any Python object and allowsfor chained soft plucking with attribute- and item- getters (e.g. ``.attr``,``[&quot;key&quot;]``, ``[idx]``, ``[::2]``, or a combination: ``[&quot;key1&quot;, &quot;key2&quot;]``,and ``[0, 3:7, ::-1]``; even: ``[&quot;length&quot;, 0:5, 7]``).``plucky.pluck`` will allow you to pluck *same as with* ``pluckable``(regarding the plucking operations), but accepting a string selectorinstead of a Python expression.``plucky.plucks`` enables you to safely extract several-levels deep values byusing a concise string selector comprised of dictionary-like keys and list-likeindices/slices. Stands for *pluck simplified*, since it supports only a subset of``pluck`` syntax. It's simpler and a more efficient.``plucky.merge`` facilitates recursive merging of two data structures, reducingleaf values with the provided binary operator.Installation------------``plucky`` is available as a **zero-dependency** Python package. Install with::    $ pip install pluckyUsage-----.. code-block:: python    from plucky import pluck, plucks, pluckable, merge    pluckable(obj).users[2:5, 10:15].name[&quot;first&quot;, &quot;middle&quot;].value    pluck(obj, 'users[2:5, 10:15].name[&quot;first&quot;, &quot;middle&quot;]')    plucks(obj, 'users.2:5.name.first')    merge({&quot;x&quot;: 1, &quot;y&quot;: 0}, {&quot;x&quot;: 2})Examples--------.. code-block:: python    obj = {        'users': [{            'uid': 1234,            'name': {                'first': 'John',                'last': 'Smith',            }        }, {            'uid': 2345,            'name': {                'last': 'Bono'            }        }, {            'uid': 3456        }]    }    plucks(obj, 'users.1.name')    # -&gt; {'last': 'Bono'}    plucks(obj, 'users.name.last')    # -&gt; ['Smith', 'Bono']    plucks(obj, 'users.*.name.first')    # -&gt; ['John']    pluckable(obj).users.name.first.value    # -&gt; ['John']    pluckable(obj).users.uid[0, 2, 1].value    # -&gt; [1234, 3456, 2345]    pluckable([datetime.datetime.now(), None, {'month': 8}])[::2].month    # -&gt; [5, 8]    pluckable(obj, skipmissing=False, default='Unnamed').users.name.first.value    # -&gt; ['John', 'Unnamed', 'Unnamed']More Examples! :)-----------------.. code-block:: python    pluckable(obj).users[:, ::-1].name.last.value    # -&gt; ['Smith', 'Bono', 'Bono', 'Smith']    pluckable(obj).users[:, ::-1].name.last[0, -1].value    # -&gt; ['Smith', 'Smith']    pluck(obj, 'users[:, ::-1].name.last[0, -1]')    # -&gt; ['Smith', 'Smith']    plucks([1, {'val': 2}, 3], 'val')    # -&gt; [2]    plucks([1, {'val': [1,2,3]}, 3], '1.val.-1')    # -&gt; 3    merge({&quot;x&quot;: 1, &quot;y&quot;: 0}, {&quot;x&quot;: 2})    # -&gt; {&quot;x&quot;: 3, &quot;y&quot;: 0}    merge({&quot;a&quot;: [1, 2], &quot;b&quot;: [1, 2]}, {&quot;a&quot;: [3, 4], &quot;b&quot;: [3]})    # -&gt; {&quot;a&quot;: [4, 6], &quot;b&quot;: [1, 2, 3]}</longdescription>
</pkgmetadata>