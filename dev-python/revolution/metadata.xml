<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># revolution![Supported Versions](https://img.shields.io/pypi/pyversions/revolution)![PyPI Version](https://img.shields.io/pypi/v/revolution)![GitHub Workflow Status](https://img.shields.io/github/workflow/status/GBS3/revolution/revolution)[![codecov](https://codecov.io/gh/GBS3/revolution/branch/main/graph/badge.svg)](https://codecov.io/gh/GBS3/revolution)![License](https://img.shields.io/pypi/l/revolution)&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/icon.gif?token=AQ2HXW2ZE4ML27FSUQRTLGLAOEKU6&quot; width=&quot;200&quot; align=&quot;right&quot;&gt;An assortment of spinners to use while your Python programs run.## InstallationIn order to install `revolution`, run the following in your command line:```pip install revolution```## UsageIn order to use `revolution` in your code, importing it is as simple as:```pyfrom revolution import Revolution```### Function decorator`revolution` can be used as a **function decorator**:```pyimport timefrom revolution import Revolution@Revolutiondef do_something():    for _ in range(10):        time.sleep(0.1)do_something()```You can also provide it a description while you wait for your task to finish:```pyimport timefrom revolution import Revolution@Revolution(desc='Just passing time...')def do_something():    for _ in range(10):        time.sleep(0.1)do_something()```### with statementAnother possible way to implement `revolution` is through the use of a **with** statement:```pyimport timefrom revolution import Revolutionwith Revolution(desc='Running through numbers') as rev:    for _ in range(100):        time.sleep(0.1)        rev.update(1) ```You can also include a visual counter by including a total:```pyimport timefrom revolution import Revolutionwith Revolution(desc='Counting up to 100', total=100) as rev:    for _ in range(100):        time.sleep(0.1)        rev.update(1)```### for loopIf you give a Revolution object a **range object** or a **list**, you can then iterate over it:```pyimport timefrom revolution import Revolutiontotal = 0for i in Revolution(range(100)):    total += i    time.sleep(0.1)print(total)```### ManualFinally, you can use `revolution` by manually controlling when to stop it:```pyfrom revolution import Revolutionrev = Revolution(desc='Doing things...')rev.start()# ...rev.stop()```## ParametersThese are the available parameters for initializing a Revolution object:```pyRevolution(func=None, desc='', total=None, style='', color='blue', success=None, safe=True, interval=None)```#### `func`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`func` : list or range, optionalIf this is a list or range object, it will iterate over each of the elements and return them one by one.The `func` parameter should be left blank unless you initialize a Revolution object with a range object or a list.&lt;/details&gt;#### `desc`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`desc` : str, optionalA string to use in place of the text that displays beside the spinner.&lt;/details&gt;#### `total`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`total` : int, optionalAn integer that indicates the total number of expected iterations.&lt;/details&gt;#### `style`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`style` : str, optionalA string that indicates which spinner style to use. If style is None or if it doesn't exist, the classic style will be used.Available options can be viewed by running `revolution --example` or `revolution -e` in your console.&lt;/details&gt;#### `color`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`color` : str, optionalA string that indicates which color should be used for the spinner. If a color is not provided, the color will default to 'blue'.Available options:    * `black`    * `red`    * `green`    * `yellow`    * `blue`    * `violet`    * `cyan`    * `white`&lt;/details&gt;#### `success`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`success` : str, optionalA string that will be displayed beside the spinner when the spinner animation stops.&lt;/details&gt;#### `safe`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`safe` : bool, optionalIf True (default), spinners on Windows machines will always use the 'classic' style (even if a different style is provided).If you are using a certain spinner style and are unsure as to how it will appear on Windows machines, it is recommended that you leave `safe` set to its default value.&lt;/details&gt;#### `interval`&lt;details&gt;&lt;summary&gt;More info&lt;/summary&gt;`interval` : float, optionalA float value that is used to indicate the refresh rate of the entire spinner.&lt;/details&gt;## StylesThere are multiple built-in spinner styles that you can take advantage of. *However*, only the classic spinner will be used on **Windows machines** unless you set `safe=False` when you initialize a Revolution object.### classic```Revolution(style='classic')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/classic.gif&quot; width=&quot;255&quot;&gt;* Windows-friendly* If a Revolution object doesn't contain a specified style, this is the style that it will default to### dots```Revolution(style='dots')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/dots.gif&quot; width=&quot;255&quot;&gt;* Windows-friendly### equal```Revolution(style='equal')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/equal.gif&quot; width=&quot;255&quot;&gt;* Windows-friendly### braille```Revolution(style='braille')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/braille.gif&quot; width=&quot;255&quot;&gt;### braille_long```Revolution(style='braille_long')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/braille_long.gif&quot; width=&quot;255&quot;&gt;### braille_crawl```Revolution(style='braille_crawl')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/braille_crawl.gif&quot; width=&quot;255&quot;&gt;### braille_bounce```Revolution(style='braille_bounce')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/braille_bounce.gif&quot; width=&quot;255&quot;&gt;### arc```Revolution(style='arc')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/arc.gif&quot; width=&quot;255&quot;&gt;### clear_quadrants```Revolution(style='clear_quadrants')```&lt;img src=&quot;https://raw.githubusercontent.com/GBS3/revolution/main/media/clear_quadrants.gif&quot; width=&quot;255&quot;&gt;</longdescription>
</pkgmetadata>