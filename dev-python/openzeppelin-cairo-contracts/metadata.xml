<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenZeppelin Contracts for Cairo[![Tests and linter](https://github.com/OpenZeppelin/cairo-contracts/actions/workflows/coverage.yml/badge.svg)](https://github.com/OpenZeppelin/cairo-contracts/actions/workflows/coverage.yml)[![codecov](https://codecov.io/github/OpenZeppelin/cairo-contracts/branch/main/graph/badge.svg?token=LFSZH8RPOL)](https://codecov.io/github/OpenZeppelin/cairo-contracts)**A library for secure smart contract development** written in Cairo for [StarkNet](https://starkware.co/product/starknet/), a decentralized ZK Rollup.## Usage&gt; ## ⚠️ WARNING! ⚠️&gt;&gt; This repo contains highly experimental code.&gt; Expect rapid iteration.&gt; **Use at your own risk.**### First time?Before installing Cairo on your machine, you need to install `gmp`:```bashsudo apt install -y libgmp3-dev # linuxbrew install gmp # mac```&gt; If you have any troubles installing gmp on your Apple M1 computer, [here’s a list of potential solutions](https://github.com/OpenZeppelin/nile/issues/22).### Set up your projectCreate a directory for your project, then `cd` into it and create a Python virtual environment.```bashmkdir my-projectcd my-projectpython3 -m venv envsource env/bin/activate```Install the [Nile](https://github.com/OpenZeppelin/nile) development environment and then run `init` to kickstart a new project. Nile will create the project directory structure and install [the Cairo language](https://www.cairo-lang.org/docs/quickstart.html), a [local network](https://github.com/Shard-Labs/starknet-devnet/), and a [testing framework](https://docs.pytest.org/en/6.2.x/).```bashpip install cairo-nilenile init```### Install the library```bashpip install openzeppelin-cairo-contracts```&gt; ⚠️ Warning! ⚠️  Installing directly the `main` branch may contain incomplete or breaking implementations, download [official releases](https://github.com/OpenZeppelin/cairo-contracts/releases/) only.### Use a basic presetPresets are ready-to-use contracts that you can deploy right away. They also serve as examples of how to use library modules. [Read more about presets](https://docs.openzeppelin.com/contracts-cairo/0.6.1/extensibility#presets).```cairo// contracts/MyToken.cairo%lang starknetfrom openzeppelin.token.erc20.presets.ERC20 import (    constructor,    name,    symbol,    totalSupply,    decimals,    balanceOf,    allowance,    transfer,    transferFrom,    approve,    increaseAllowance,    decreaseAllowance)```Compile and deploy it right away:```bashnile compilenile deploy MyToken &lt;name&gt; &lt;symbol&gt; &lt;decimals&gt; &lt;initial_supply&gt; &lt;recipient&gt; --alias my_token```&gt; Note that `&lt;initial_supply&gt;` is expected to be two integers i.e. `1` `0`. See [Uint256](https://docs.openzeppelin.com/contracts-cairo/0.6.1/utilities#uint256) for more information.### Write a custom contract using library modules[Read more about libraries](https://docs.openzeppelin.com/contracts-cairo/0.6.1/extensibility#libraries).```cairo%lang starknetfrom starkware.cairo.common.cairo_builtins import HashBuiltinfrom starkware.cairo.common.uint256 import Uint256from openzeppelin.security.pausable.library import Pausablefrom openzeppelin.token.erc20.library import ERC20(...)@externalfunc transfer{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(    recipient: felt, amount: Uint256) -&gt; (success: felt) {    Pausable.assert_not_paused();    return ERC20.transfer(recipient, amount);}```## Learn### DocumentationCheck out the [full documentation site](https://docs.openzeppelin.com/contracts-cairo)! Featuring:- [Accounts](https://docs.openzeppelin.com/contracts-cairo/0.6.1/accounts)- [ERC20](https://docs.openzeppelin.com/contracts-cairo/0.6.1/erc20)- [ERC721](https://docs.openzeppelin.com/contracts-cairo/0.6.1/erc721)- [ERC1155](https://docs.openzeppelin.com/contracts-cairo/0.6.1/erc1155)- [Contract extensibility pattern](https://docs.openzeppelin.com/contracts-cairo/0.6.1/extensibility)- [Proxies and upgrades](https://docs.openzeppelin.com/contracts-cairo/0.6.1/proxies)- [Security](https://docs.openzeppelin.com/contracts-cairo/0.6.1/security)- [Utilities](https://docs.openzeppelin.com/contracts-cairo/0.6.1/utilities)### Cairo- [StarkNet official documentation](https://www.cairo-lang.org/docs/hello_starknet/index.html#hello-starknet)- [Cairo language documentation](https://www.cairo-lang.org/docs/hello_cairo/index.html#hello-cairo)- Perama's [Cairo by example](https://perama-v.github.io/cairo/by-example/)- [Cairo 101 workshops](https://www.youtube.com/playlist?list=PLcIyXLwiPilV5RBZj43AX1FY4FJMWHFTY)### Nile- [Getting started with StarkNet using Nile](https://medium.com/coinmonks/starknet-tutorial-for-beginners-using-nile-6af9c2270c15)- [How to manage smart contract deployments with Nile](https://medium.com/@martriay/manage-your-starknet-deployments-with-nile-%EF%B8%8F-e849d40546dd)## Development### Set up the projectClone the repository```bashgit clone git@github.com:OpenZeppelin/cairo-contracts.git````cd` into it and create a Python virtual environment:```bashcd cairo-contractspython3 -m venv envsource env/bin/activate```Install dependencies:```bashpython -m pip install .```### Compile the contracts```bashnile compile --directory src🤖 Compiling all Cairo contracts in the src directory🔨 Compiling src/openzeppelin/token/erc20/library.cairo🔨 Compiling src/openzeppelin/token/erc20/presets/ERC20Mintable.cairo🔨 Compiling src/openzeppelin/token/erc20/presets/ERC20Pausable.cairo🔨 Compiling src/openzeppelin/token/erc20/presets/ERC20Upgradeable.cairo🔨 Compiling src/openzeppelin/token/erc20/presets/ERC20.cairo🔨 Compiling src/openzeppelin/token/erc20/IERC20.cairo🔨 Compiling src/openzeppelin/token/erc721/enumerable/library.cairo🔨 Compiling src/openzeppelin/token/erc721/library.cairo🔨 Compiling src/openzeppelin/token/erc721/utils/ERC721Holder.cairo🔨 Compiling src/openzeppelin/token/erc721/presets/ERC721MintablePausable.cairo🔨 Compiling src/openzeppelin/token/erc721/presets/ERC721MintableBurnable.cairo🔨 Compiling src/openzeppelin/token/erc721/presets/ERC721EnumerableMintableBurnable.cairo🔨 Compiling src/openzeppelin/token/erc721/IERC721.cairo🔨 Compiling src/openzeppelin/token/erc721/IERC721Metadata.cairo🔨 Compiling src/openzeppelin/token/erc721/IERC721Receiver.cairo🔨 Compiling src/openzeppelin/token/erc721/enumerable/IERC721Enumerable.cairo🔨 Compiling src/openzeppelin/access/ownable/library.cairo🔨 Compiling src/openzeppelin/security/reentrancyguard/library.cairo🔨 Compiling src/openzeppelin/security/safemath/library.cairo🔨 Compiling src/openzeppelin/security/pausable/library.cairo🔨 Compiling src/openzeppelin/security/initializable/library.cairo🔨 Compiling src/openzeppelin/utils/constants/library.cairo🔨 Compiling src/openzeppelin/introspection/erc165/library.cairo🔨 Compiling src/openzeppelin/introspection/erc165/IERC165.cairo🔨 Compiling src/openzeppelin/upgrades/library.cairo🔨 Compiling src/openzeppelin/upgrades/presets/Proxy.cairo🔨 Compiling src/openzeppelin/account/library.cairo🔨 Compiling src/openzeppelin/account/presets/EthAccount.cairo🔨 Compiling src/openzeppelin/account/presets/Account.cairo🔨 Compiling src/openzeppelin/account/presets/AddressRegistry.cairo🔨 Compiling src/openzeppelin/account/IAccount.cairo✅ Done```### Run testsRun tests using [tox](https://tox.wiki/en/latest/), tox automatically creates an isolated testing environment:```bashtox====================== test session starts ======================platform linux -- Python 3.7.2, pytest-7.1.2, py-1.11.0, pluggy-1.0.0rootdir: /home/readme/cairo-contracts, configfile: tox.iniplugins: asyncio-0.18.3, xdist-2.5.0, forked-1.4.0, web3-5.29.0, typeguard-2.13.3asyncio: mode=autogw0 [185] / gw1 [185]........................................................................................................................................................................................    [100%]```### Run Tests in DockerFor M1 users or those who are having trouble with library/python versions you can alternatively run the tests within a docker container. Using the following as a Dockerfile placed in the root directory of the project:```dockerfileFROM python:3.7RUN pip install toxRUN mkdir cairo-contractsCOPY . cairo-contractsWORKDIR cairo-contractsENTRYPOINT tox```After its placed there run:```bashdocker build -t cairo-tests .docker run cairo-tests```### Parallel TestingThis repo utilizes the [pytest-xdist](https://pytest-xdist.readthedocs.io/en/latest/) plugin which runs tests in parallel. This feature increases testing speed; however, conflicts with a shared state can occur since tests do not run in order. To overcome this, independent cached versions of contracts being tested should be provisioned to each test case. Here's a simple fixture example:```pythonfrom utils import get_contract_class, cached_contract@pytest.fixturedef foo_factory():    # get contract class    foo_cls = get_contract_class('Foo')    # deploy contract    starknet = await Starknet.empty()    foo = await starknet.deploy(contract_class=foo_cls)    # copy the state and cache contract    state = starknet.state.copy()    cached_foo = cached_contract(state, foo_cls, foo)    return cached_foo```See [Memoization](https://docs.openzeppelin.com/contracts-cairo/0.6.1/utilities#memoization) in the Utilities documentation for a more thorough example on caching contracts.&gt; Note that this does not apply for stateless libraries such as SafeMath.## Security&gt; ⚠️ Warning! ⚠️&gt; This project is still in a very early and experimental phase. It has never been audited nor thoroughly reviewed for security vulnerabilities. Do not use in production.Refer to [SECURITY.md](SECURITY.md) for more details.## ContributeOpenZeppelin Contracts for Cairo exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the [contribution](CONTRIBUTING.md) guide!### Markdown linterTo keep the markdown files neat and easy to edit, we utilize DavidAnson's [markdownlint](https://github.com/DavidAnson/markdownlint) linter. You can find the listed rules [here](https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md). Note that the following rules are disabled:- `MD013: line length`  - to enable paragraphs without internal line breaks- `MD033: inline HTML`  - to enable .md files to have duplicate headers and separate them by identifiersBefore creating a PR, check that documentation changes are compliant with our markdown rules by running:```bashtox -e lint```## LicenseOpenZeppelin Contracts for Cairo is released under the [MIT License](LICENSE).</longdescription>
</pkgmetadata>