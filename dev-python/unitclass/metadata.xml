<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># unitclass`unitclass` is a physical unit class suitable for calculations in the sciences.This library provides a `Unit` class that encapsulates a numerical value with aphysical unit. It is intended for both interactive and library use.`unitclass` supports all [SIunits](https://www.nist.gov/pml/owm/metric-si/si-units) and prefixes, as well asevery reasonably common English/Imperial unit and other special units (e.g.bytes and ppm).## Usage Examples`Unit()` takes strings or numbers and strings. Any number appended to a unit isassumed to be an exponent. e.g. `m2` is `m²` and `in3` is `in³`. You can createcompound units with `*` and `/` operators, e.g. `N*m` or `ft/min`. There shouldonly be one division operator in a unit, but you can have any number ofmultiplied units on the left and right sides of the division operator. e.g`N*s2/m*kg` is interpreted as $\frac{N \cdot s^2}{m \cdot kg}$.### Basic Usage```python&gt;&gt;&gt; from unitclass import Unit&gt;&gt;&gt; Unit('1 in') # number and unit in a string1 in&gt;&gt;&gt; Unit(1.0, 'in') # number and unit as separate arguments1 in&gt;&gt;&gt; Unit(1, 'in', 'mm') # convert on-the-fly from one unit to another25.4 mm&gt;&gt;&gt; a = Unit(1, 'in')&gt;&gt;&gt; b = Unit(1, 'ft')&gt;&gt;&gt; a*12 + b24 in```#### Exponents```python&gt;&gt;&gt; from unitclass import Unit&gt;&gt;&gt; Unit('1 m3')1 m³&gt;&gt;&gt; Unit('1 in4')1 in⁴&gt;&gt;&gt; Unit('1 m3').to('in3')61023.7 in³&gt;&gt;&gt; Unit('10 in2') / Unit('1 in')10 in```#### Compound Units```python&gt;&gt;&gt; Unit('1 lbf*ft*s2')1 lb·ft·s²&gt;&gt;&gt; Unit(100, 'ft/min')100 ft/min&gt;&gt;&gt; Unit('1 N*s2/(m*kg)')1 N·s²/(m·kg)&gt;&gt;&gt; Unit(100, 'ft') / Unit(1, 'min')100 ft/min```#### Conversion```python&gt;&gt;&gt; from unitclass import Unit&gt;&gt;&gt; Unit(1, 'in', 'mm') # convert on-the-fly from one unit to another25.4 mm&gt;&gt;&gt; b = Unit(1, 'ft')&gt;&gt;&gt; b.to('in') # convert method12 in&gt;&gt;&gt; b.to('mm')304.8 mm&gt;&gt;&gt; Unit('1 N*m').to('in*lb')8.85075 in·lb&gt;&gt;&gt; Unit(100, 'ft/min').to('mph') 1.13636 mph&gt;&gt;&gt; Unit(100, 'ft/min').to('kph')1.8288 kph```### Listing/Searching Built-in UnitsTo see what units are available (output is abbreviated below):```python&gt;&gt;&gt; import unitclass as uc&gt;&gt;&gt; uc.list_units()s     -&gt;unit of time       aliases: ['second', 'seconds', 'sec', 'secs']    ...```You can also limit the search to a certain quantity:```python&gt;&gt;&gt; import unitclass as uc&gt;&gt;&gt; uc.list_units(qty='data')B     -&gt;unit of data       aliases: ['byte', 'bytes']KB    -&gt;unit of data       aliases: ['kilobyte', 'kilobytes']MB    -&gt;unit of data       aliases: ['megabyte', 'megabytes']GB    -&gt;unit of data       aliases: ['gigabyte', 'gigabytes']TB    -&gt;unit of data       aliases: ['terabyte', 'terabytes']PB    -&gt;unit of data       aliases: ['petabyte', 'petabytes']EB    -&gt;unit of data       aliases: ['exabyte', 'exabytes']```*Tip: For a list of available quanities, use the function `list_quantities()`.Example usage is below in the Custom Unit section.*And you can search for a certain string in a unit or unit alias:```python&gt;&gt;&gt; import unitclass as uc&gt;&gt;&gt; uc.list_units(qty='data', search='ga')MB    -&gt;unit of data       aliases: ['megabyte', 'megabytes']GB    -&gt;unit of data       aliases: ['gigabyte', 'gigabytes']&gt;&gt;&gt; uc.list_units(search='mile')mi    -&gt;unit of length     aliases: ['mile', 'miles', 'statutemile', 'statutemiles', 'smi']nmi   -&gt;unit of length     aliases: ['nauticalmile', 'nauticalmiles']gmi   -&gt;unit of length     aliases: ['geographicalmile', 'geographicalmiles']mph   -&gt;unit of speed      aliases: ['mileperhour']```### Simplifying and Expanding UnitsThe `expand()` method expands the unit to its fundamental units while`simplify()` combines units to a single compound unit if one exists for thegiven combination of units. For all options, type `help(Unit.expand)` or`help(Unit.simplify)` at an interactive prompt.```python&gt;&gt;&gt; a = Unit('1 W')/Unit('1 A')&gt;&gt;&gt; a1 W/A&gt;&gt;&gt; a.expand()1 N·m/(A·s)&gt;&gt;&gt; a.simplify()1 V```### Add Custom UnitIn the example below, a custom unit is being added. The unit measures thequantity &quot;length&quot;, the unit is called &quot;blake&quot;, two aliases for that unit are&quot;blakes&quot; and &quot;bunits&quot;, and 1 blake equals 6 ft.The fields are as follows: `&lt;quantity&gt;, &lt;name&gt;, &lt;aliases&gt;, &lt;factor&gt;, &lt;factor unit&gt;`Once the custom unit is added, it can be used the same as any other built-in unit.```python&gt;&gt;&gt; import unitclass as uc&gt;&gt;&gt; uc.add_unit(&quot;length&quot;, &quot;blake&quot;, &quot;blakes bunits&quot;, 6, 'ft')&gt;&gt;&gt; c = Unit(12, 'in', 'blakes')&gt;&gt;&gt; c0.166667 blake&gt;&gt;&gt; Unit(12*12, 'in', 'blakes')2 blake```You can also bulk load custom units from a CSV file. The CSV would take the sameform as the `add_unit()` function above. Here is an example CSV with two customunits:```csvlength, myin, myinch my_inch, 1/8.0, inangle, myang,, 1/1e-12*sin(2*pi), rad```And then it is loaded with the `import_units()` method:```python&gt;&gt;&gt; import unitclass as uc&gt;&gt;&gt; uc.import_units('customunits.csv')```When adding custom units, it is helpful to know what *quantities* are available.(E.g. length, time, force, etc.) These are the quantities that are beingmeasured, or the categories of measurement, not the units themselves. To listthem all, use the `list_quantities()` method (the output has been abbreviatedbelow):```python&gt;&gt;&gt; import unitclass as uc&gt;&gt;&gt; uc.list_quantities()absorbed_doseaccelerationamountangleangular speedarea    ...speedtimetorqueunitlessvoltagevolume```### Converting without using the Unit classYou can skip creating a Unit class if you prefer to just do a quick conversion.```python&gt;&gt;&gt; import unitclass as uc&gt;&gt;&gt; uc.convert(1, 'in', 'mm')25.4&gt;&gt;&gt; uc.convert(55, 'mph', 'kph')88.51391999999998&gt;&gt;&gt; uc.convert(40, 'lb/ft3', 'kg/m3')640.7385327602261```## Caveats### Force/MassOne huge compromise was made in the design of the unit system. Because peopleexpect to convert from pounds to kilograms (i.e. force to mass), this librarydesignates force as a fundmental unit instead of mass. Mass is defined in termsof force and acceleration of gravity. While this differs from the official SIBase Units, it makes conversion between force and mass intuitive for the laymanand convenient for the rest.### TemperatureBecause of the nature of the temperature scales, a simple multiplier does notwork, so temperature is handled independently of the other units. This leads toa the limitations that you cannot have custom or compound units withtemperature. This is a rare use case, so fixing this limitation is a lowpriority.</longdescription>
</pkgmetadata>