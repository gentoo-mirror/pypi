<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Robocorp browser libraryThe `robocorp-browser` library helps in automating browsers by providing convenient APIs to manage the lifecycle of playwright objects using `robocorp-tasks`.The code below reflects the basic usage of the library:```pythonfrom robocorp import browserfrom robocorp.tasks import taskfrom robocorp import vault@taskdef browser_automate():    # Configure may be used to set the basic robocorp.browser settings.    # It must be called prior to calling APIs which create playwright objects.    browser.configure(        # Note: screenshot=&quot;only-on-failure&quot; is actually the default.        # If the browser_automate() function finishes with an exception it will        # make a screenshot and embed it into the logs.        screenshot=&quot;only-on-failure&quot;,        # If headless is not passed, it'll show the browser screen only if a        # debugger is attached.        headless=True,    )    # browser.goto() may be used as a shortcut to get the current page and    # go to some url (it may create the browser if still not created).    browser.goto(&quot;https://&lt;target-page.com&gt;&quot;)    login()def login():    # APIs in robocorp.browser return the same browser instance, which is    # automatically closed when the task finishes.    page = browser.page()    # robocorp.vault is recommended for managing secrets.    password = vault.get_secret(&quot;default-account&quot;)[&quot;password&quot;]    # Use the playwright Browser api as usual.    page.fill('//input[@ng-reflect-name=&quot;password&quot;]', password)    page.click(&quot;input:text('Submit')&quot;)```</longdescription>
</pkgmetadata>