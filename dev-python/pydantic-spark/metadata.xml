<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python package](https://github.com/godatadriven/pydantic-spark/actions/workflows/python-package.yml/badge.svg)](https://github.com/godatadriven/pydantic-spark/actions/workflows/python-package.yml)[![codecov](https://codecov.io/gh/godatadriven/pydantic-spark/branch/main/graph/badge.svg?token=5L08GOERAW)](https://codecov.io/gh/godatadriven/pydantic-spark)[![PyPI version](https://badge.fury.io/py/pydantic-spark.svg)](https://badge.fury.io/py/pydantic-spark)[![CodeQL](https://github.com/godatadriven/pydantic-spark/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/godatadriven/pydantic-spark/actions/workflows/codeql-analysis.yml)# pydantic-sparkThis library can convert a pydantic class to a spark schema or generate python code from a spark schema.### Install```bashpip install pydantic-spark```### Pydantic class to spark schema```pythonimport jsonfrom typing import Optionalfrom pydantic_spark.base import SparkBaseclass TestModel(SparkBase):    key1: str    key2: int    key2: Optional[str]schema_dict: dict = TestModel.spark_schema()print(json.dumps(schema_dict))```#### Coerce typePydantic-spark provides a `coerce_type` option that allows type coercion. When applied to a field, pydantic-spark converts the column's data type to the specified coercion type. ```pythonimport jsonfrom pydantic import Fieldfrom pydantic_spark.base import SparkBase, CoerceTypeclass TestModel(SparkBase):    key1: str = Field(extra_json_schema={&quot;coerce_type&quot;: CoerceType.integer})schema_dict: dict = TestModel.spark_schema()print(json.dumps(schema_dict))```### Install for developers###### Install package- Requirement: Poetry 1.*```shellpoetry install```###### Run unit tests```shellpytestcoverage run -m pytest  # with coverage# or (depends on your local env) poetry run pytestpoetry run coverage run -m pytest  # with coverage```##### Run lintingThe linting is checked in the github workflow. To fix and review issues run this:```shellblack .   # Auto fix all issuesisort .   # Auto fix all issuespflake .  # Only display issues, fixing is manual```</longdescription>
</pkgmetadata>