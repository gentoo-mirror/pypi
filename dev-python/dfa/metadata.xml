<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DFAA simple python implementation of a DFA. [![Build Status](https://cloud.drone.io/api/badges/mvcisback/dfa/status.svg)](https://cloud.drone.io/mvcisback/dfa)[![PyPI version](https://badge.fury.io/py/dfa.svg)](https://badge.fury.io/py/dfa)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)&lt;!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again --&gt;**Table of Contents**- [Installation](#installation)- [Usage](#usage)    - [Membership Queries](#membership-queries)    - [Transitions and Traces](#transitions-and-traces)    - [Non-boolean output alphabets](#non-boolean-output-alphabets)    - [Moore Machines](#moore-machines)    - [DFA &lt;-&gt; Dictionary](#dfa---dictionary)    - [Computing Reachable States](#computing-reachable-states)    - [Sampling Paths](#sampling-paths)    - [Running interactively (Co-Routine API)](#running-interactively-co-routine-api)    - [Visualizing DFAs](#visualizing-dfas)&lt;!-- markdown-toc end --&gt;**Features:**1. State can be any Hashable object.2. Alphabet can be any finite sequence of Hashable objects.3. Designed to be immutable and hashable (assuming components are   immutable and hashable).4. Design choice to allow transition map and accepting set to be   given as functions rather than an explicit `dict` or `set`.# InstallationIf you just need to use `dfa`, you can just run:`$ pip install dfa`For developers, note that this project uses the[poetry](https://poetry.eustace.io/) python package/dependencymanagement tool. Please familarize yourself with it and thenrun:`$ poetry install`# UsageThe `dfa` api is centered around the `DFA` object. By default, the `DFA` object models a `Deterministic Finite Acceptor`,e.g., a recognizer of a Regular Language. **Example Usage:**```pythonfrom dfa import DFAdfa1 = DFA(    start=0,    inputs={0, 1},    label=lambda s: (s % 4) == 3,    transition=lambda s, c: (s + c) % 4,)dfa2 = DFA(    start=&quot;left&quot;,    inputs={&quot;move right&quot;, &quot;move left&quot;},    label=lambda s: s == &quot;left&quot;,    transition=lambda s, c: &quot;left&quot; if c == &quot;move left&quot; else &quot;right&quot;,)```## Membership Queries```pythonassert dfa1.label([1, 1, 1, 1])assert not dfa1.label([1, 0])assert dfa2.label([&quot;move right&quot;]*100 + [&quot;move left&quot;])assert not dfa2.label([&quot;move left&quot;, &quot;move right&quot;])```## Transitions and Traces```pythonassert dfa1.transition([1, 1, 1]) == 3assert list(dfa1.trace([1, 1, 1])) == [0, 1, 2, 3]```## Non-boolean output alphabetsSometimes, it is useful to model an automata which can label a wordusing a non-Boolean alphabet. For example, `{True, False, UNSURE}`.The `DFA` object supports this by specifying the output alphabet.```pythonUNSURE = Nonedef my_labeler(s):    if s % 4 == 2:       return None    return (s % 4) == 3dfa3 = DFA(    start=0,    inputs={0, 1},    label=my_labeler,    transition=lambda s, c: (s + c) % 4,    outputs={True, False, UNSURE},)```**Note:** If `outputs` is set to `None`, then no checks are done thatthe outputs are within the output alphabet.```pythondfa3 = DFA(    start=0,    inputs={0, 1},    label=my_labeler,    transition=lambda s, c: (s + c) % 4,    outputs=None,)```## Moore MachinesFinally, by reinterpreting the structure of the `DFA` object, one canmodel a Moore Machine. For example, in 3 state counter, `dfa1`, theMoore Machine can output the current count.```pythonassert dfa1.transduce(()) == ()assert dfa1.transduce((1,)) == (False,)assert dfa1.transduce((1, 1, 1, 1)) == (False, False, False, True)```## Language QueriesUtility functions are available for testing if a language:1. Is empty: `utils.find_word`2. Is equivilent to another language: `utils.find_equiv_counterexample`3. Is a subset of a another language: `utils.find_subset_counterexample`These operate by returning `None` if the property holds, i.e.,`lang(dfa1) = ∅, lang(dfa1) ≡ lang(dfa2), lang(dfa1) ⊆ lang(dfa2)`, andreturning a counterexample `Word` otherwise.## DFA &lt;-&gt; DictionaryNote that `dfa` provides helper functions for going from a dictionarybased representation of a deterministic transition system to a `DFA`object and back.```pythonfrom dfa import dfa2dict, dict2dfa# DFA encoded a nested dictionaries with the following# signature.#     &lt;state&gt;: (&lt;label&gt;, {&lt;action&gt;: &lt;next state&gt;})dfa_dict = {    0: (False, {0: 0, 1: 1}),    1: (False, {0: 1, 1: 2}),    2: (False, {0: 2, 1: 3}),     3: (True, {0: 3, 1: 0})}# Dictionary -&gt; DFAdfa = dict2dfa(dfa_dict, start=0)# DFA -&gt; Dictionarydfa_dict2, start = dfa2dict(dfa)assert (dfa_dict, 0) == (dfa_dict2, start)```## Computing Reachable States```python# Perform a depth first traversal to collect all reachable states.assert dfa1.states() == {0, 1, 2, 3}```## Finding Words and Access stringsTo generate accepting strings (words) in a DFA (breadth first using string length) one can use the `dfa.utils.words` function:```pythonfrom dfa.utils.import dfa2dict, words, find_wordsdfa_dict = {    0: (False, {0: 0, 1: 1}),    1: (False, {0: 1, 1: 2}),    2: (False, {0: 2, 1: 3}),    3: (True, {0: 3, 1: 0})}lang = dict2dfa(dfa_dict, start=0)xs = set(fn.take(5, words(lang)))assert len(xs) == 5assert all(lang.label(x) for x in xs)```To get a single word, a helper function is provided in `dfa.utils.find_word` which returns `None` if the language of the DFA is empty:```python# ... Same as above ...x = find_word(lang)assert x is not Noneassert lang.label(x)```Often times, it is useful to sample a path between two states, say `a`and `b`. `dfa` supports this using `dfa.utils.paths`. This functionreturns a generator of words, `w`, such that `dfa.transition(w,start=b) == a`. For example:```pythonfrom dfa.utils import pathsaccess_strings = paths(    dfa1,     start=0,    end=1,  # Optional. If not specified returns all paths            # starting at `start`.    max_length=7,  #  Defaults to float('inf')    randomize=True,  #  Randomize the order. Shorter paths still found first.)for word in access_strings:    assert dfa1.transition(word, start=0) == 1```## DFA minimizationDFAs can be minimized using the `minimize` method.```pythonmy_dfa = my_dfa.minimize()```## DFA advancement (progression)One can create the DFA starting at the state indexed by a given word by usingthe `advance` method. ```pythonmy_dfa = my_dfa.advance(word)```## Running interactively (Co-Routine API)`dfa` supports interactively stepping through a `DFA` object viaco-routines. This is particularly useful when using DFA in a controlloop. For example, the following code counts how many `1`'s it takesto advance `dfa1`'s state back to the start state.```pythonmachine = dfa1.run()next(machine)state = Nonecount = 0while state != dfa1.start:    count += 1    state = machine.send(1)```## Visualizing DFAs`dfa` optionally supports visualizing DFAs using graphviz. To use thisfunctionality be sure to install `dfa` using with the `draw` option:```pythonpip install dfa[draw]```or ```pythonpoetry install -E draw```Then one can simply use `dfa.draw.write_dot` to write a `.dot` filerepresenting the DFA. This `.dot` file can be rendered using anygraphviz supporting tool.```pythonfrom dfa.draw import write_dotwrite_dot(dfa1, &quot;path/to/dfa1.dot&quot;)```Using the `dot` command in linux results in the following rendering of `dfa1`.`$ dot -Tsvg path/to/dfa1.dot &gt; dfa1.svg`&lt;figure&gt;  &lt;img src=&quot;assets/dfa1.svg&quot; alt=&quot;visualization of dfa1&quot; width=500px&gt;  &lt;figcaption&gt;    Visualization of dfa1 using graphviz.  &lt;/figcaption&gt;&lt;/figure&gt;</longdescription>
</pkgmetadata>