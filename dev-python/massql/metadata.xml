<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mass Spec Query Language[![Unit Testing](https://github.com/mwang87/MassQueryLanguage/actions/workflows/test-unit.yml/badge.svg)](https://github.com/mwang87/MassQueryLanguage/actions/workflows/test-unit.yml)[![NF Workflow Testing](https://github.com/mwang87/MassQueryLanguage/actions/workflows/test-workflow.yml/badge.svg)](https://github.com/mwang87/MassQueryLanguage/actions/workflows/test-workflow.yml)The Mass Spec Query Language (MassQL) is a domain specific language meant to be a succinct way toexpress a query in a mass spectrometry centric fashion. It is inspired by SQL,but it attempts to bake in assumptions of mass spectrometry to make querying much morenatural for mass spectrometry users. Broadly we attempt to design it according to several principles:1. Expressiveness - Capture complex mass spectrometry patterns that the community would like to look for1. Precision - Exactly prescribe how to find data without ambiguity2. Scalable - Easily facilitating the querying of one spectrum all the way up to entire repositories of data3. Relatively Natural - MassQL should be relatively easy to read and write and even use to communicate ideas about mass   spectrometry, you know like a language.## Repository StructureThis is the repository to define the language and reference implementation. This contains several parts1. Language Grammar1. Reference Implementation Python API1. Command line Utility to execute1. NextFlow Workflow For Large Scale Analysis1. ProteoSAFe workflow1. Dash interactive exploration## Developers/ContactMingxun Wang is the main creator and developer of MassQL. Contact me for contributing or using it!## Language Specification/DocumentationCheckout specifics for the language, examples, and design patterns at the documentation.[Documentation Link](https://mwang87.github.io/MassQueryLanguage_Documentation/)## Python APITo install massql```pip install massql```Here is the most basic operation you can do```from massql import msql_engineresults_df = msql_engine.process_query(input_query, input_filename)```If you want to push in a data frame you already have, you can specify it```from massql import msql_enginefrom massql import msql_fileloading# Loading Datams1_df, ms2_df = msql_fileloading.load_data(input_filename)# Executing Queryresults_df = msql_engine.process_query(input_query, input_filename, ms1_df=ms1_df, ms2_df=ms2_df)```## Command Line ToolYou can use the command line tool ```massql``` to query things or put things into a pipeline.A few examples of what you can do```massql test.mzML &quot;QUERY scaninfo(MS2DATA)&quot; --output_file results.tsv```## Web API### API Version```/api```### Parsing query into intermediate JSON string```/parse?query=&lt;query string&gt;```[Example Link](https://msql.ucsd.edu/parse?query=QUERY%20MS2DATA%20WHERE%20MS1MZ=100)### Visualization of QueryVisualization image of MS1 spectra```/visualize/ms1```[Example Link](https://msql.ucsd.edu/visualize/ms1?query=QUERY+scaninfoamp;filename=GNPS00002_A3_p.mzML&amp;x_axis=&amp;y_axis=&amp;facet_column=&amp;scan=&amp;x_value=572.828&amp;y_value=0.64&amp;ms1_usi=mzspec%3AGNPS%3ATASK-f6e8346934904399ae6742723762b2cb-f.MSV000084691%2Fccms_peak%2F1810E-II.mzML%3Ascan%3A474&amp;ms2_usi=)Visualization image of MS2 spectra```/visualize/ms2```## TestingTo run tests, you'll need to first fetch some fixtures that are not bundled with the git repo:```cd tests &amp;&amp; sh ./get_data.sh```You will also want to install the extra requirements for the test suite:```pip install -r requirements_test.txt```## LicenseMIT License</longdescription>
</pkgmetadata>