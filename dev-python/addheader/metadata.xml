<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># addheader - add headers to filesThis repository contains a single command to manage a header section, e.g. copyright, for a source code tree.Using UNIX glob patterns, addheader modifies an entire tree ofsource code at once. The program replaces existing headers withan updated version, and places the header after any shell magicat the top of the file.As of version 0.3.0, Jupyter notebooks can also be handled.See Usage -&gt; Adding headers to Jupyter Notebooks.## Installation_addheader_ is written in Python and can be simply installed from the PyPI package:```pip install addheader```If you want Jupyter Notebook support, add &quot;jupyter&quot; in square brackets after the name of the package(use the quotes unless you know your shell doesn't need them):```pip install 'addheader[jupyter]'```## UsageUse the command `addheader`. Invoking`addheader -h` shows a detailed help messagefor the command arguments and options. Below are some examples and comments on usage.### Basic usageIf you have the header file in &quot;copyright.txt&quot;, and your source tree is a Pythonpackage located at &quot;./mypackage&quot;,then you would invoke the program like this:```shelladddheader mypackage --text copyright.txt```By default, the header will not be added to &quot;__init__.py&quot; files.### Additional actionsIf you want to see which files would be changed without modifying them, add`-n` or `--dry-run` to the command line arguments.If this argument is given, any arguments related to modifying or removing headers will be ignored.If you want to remove existing headers instead of adding or updating them,add `-r` or `--remove` to the command line arguments.### Specifying file patternsYou can customize the files thatare modified with the `-p` or `--pattern` argument, which takes a UNIX glob-style pattern and can berepeated as many times as you like. To help exclude files, if the '~' is the first letter of the pattern,then the rest of the pattern is used to exclude (not include) files. So, for example, if you provide thefollowing source code tree:```mypackage   __init__.py   foo.py   bar.py   tests/       __init__.py       test_foo.py       test_bar.py```The following commands would match the following lists of files:* `addheader mypackage -t header.txt -p *.py`  mypackage/{__init__.py, foo.py, bar.py}, mypackage/tests/{__init__.py, test_foo.py, test_bar.py}* `addheader mypackage -t header.txt -p *.py -p ~__init__.py`  mypackage/{foo.py, bar.py}, mypackage/tests/{test_foo.py, test_bar.py}* `addheader mypackage -t header.txt -p *.py -p ~__init__.py -p ~test_*.py`  mypackage/{foo.py, bar.py}### Header delimitersThe header itself is, by default, delimited by a line of 78 '#' characters. While _detecting_ an existingheader, the program will look for any separator of 10 or more '#' characters.For example, if you have a file that looks like this:```python##########my header with 10hashes above and below##########hello```and a header text file containing simply &quot;Hello, world!&quot;, then the modifiedheader will be:```python############################################################################### Hello, world!##############################################################################hello```The comment character and separator character, as well as the width of theseparator, can be modified with command-line options. For example, to adda C/C++ style comment as a header, use these options:```shelladdheader mypackage --comment &quot;//&quot; --sep &quot;=&quot; --sep-len 40 -t myheader.txt```This will insert a header that looks like this:```//========================================// my text goes here//========================================```Keep in mind that subsequent operations on files with this header, including`--remove`, will need the same `--comment` and `--sep`arguments so that the header can be properly identified. For example,running `addheader mypackage --remove` after the above command will notremove anything, and `addheader mypackage -t myheader.txt` will insert a second header (using the default comment character  and separator). You can control whether the final line has a newline character appended with the `--final-linesep` command-line option (or the `final_linesep` configuration option). This is True by default for text files, but False for Jupyter notebooks. The logic is that Jupyter notebook headers are in their own cell -- and also, this avoids spurious modifications by the Black code reformatter.&gt; To avoidpassing command-line arguments every time, &gt; use the configuration file.&gt; See the &quot;Configuration&quot; section for more details.### Adding headers to Jupyter notebooksStarting in version 0.3.0, you can add headers to Jupyter Notebooks as well.&gt; To enable Jupyter notebooks, you must&gt; install the 'jupyter' optional dependencies, e.g.,&gt; `pip install addheader[jupyter]`.To enable this, add a `-j {suffix}` or `--jupyter {suffix}` argument to the command-line, orsimilarly add a `jupyter: {suffix}` argument in the configuration file.The `{suffix}` indicates an alternate file suffix to use for identifyingwhether a file is a Jupyter Notebook, where the default is &quot;.ipynb&quot;.In the configuration file, use `jupyter: true` to use the default.On the command-line, omit the value to use the default.To set the Jupyter notebook format version, add `--notebook-version {value}` to the command-line or,  equivalently, `notebook_version: {value}` to the configuration file.Values can be from 1 to 4. The default value is 4.The file pattern arguments (see *Specifying file patterns*, above) are still honored,but if Jupyter notebooks are enabled, the pattern `*{suffix}` will be automatically added to the patterns to match. Thus, by default `*.ipynb` will be added to the files to match.If there is no existing header, the Jupyter notebook header will be inserted as the first 'cell', i.e. the firstitem, in the notebook. An existing header will be found anywhere in the notebook (by its `header` tag, see below).Currently the header cell is of type &quot;code&quot;, with every line of the cellcommented (using a 'markdown' cell is another possibility, but the code cell is friendler to the Jupyterbook machinery, and also retains the header in exported versions of the notebook without markdown cells).The content of the header is the same as for text files.Two, optionally three, tags will be added to the cell metadata:* `header` - Indicates this is the header cell, so it can be modified or removed later.* `hide-cell` - If you build documentation with Jupyterbook, this will hide the cell in the generated documentation behind a toggle button (see https://jupyterbook.org/interactive/hiding.html).Just as for text files, Jupyter notebook headers can be updated or removed.For reference, below is the form of the generated Jupyter notebook cell JSON (with the 'id' field):```json   {      &quot;id&quot;: &quot;1234567890abcdef1234567890abcdef&quot;,      &quot;cell_type&quot;: &quot;code&quot;,      &quot;metadata&quot;: {        &quot;tags&quot;: [          &quot;header&quot;,          &quot;hide-cell&quot;        ]      },      &quot;source&quot;: [        &quot;# Copyright info\n&quot;,        &quot;# is placed here.\n&quot;      ],      &quot;outputs&quot;: []    }```### ConfigurationTo avoid passing commandline arguments every time, you can create a configurationfile that simply lists them as key/value pairs (using the long-option name asthe key). By default, the program will look for a file `addheader.cfg` in thecurrent directory, but this can also be specified on the command-line with `-c/--config`. For example:```shelladdheader  # looks for addheader.cfg, ok if not presentaddheader -c myoptions.conf  # uses myoptions.conf, fails if not present```The configuration file is in YAML format. For example:```yamltext: myheader.txtpattern:   - &quot;*.py&quot;   - &quot;~__init__.py&quot;# C/Java style comment blocksep: &quot;-&quot;comment: &quot;//&quot;sep-len: 40# Verbosity as a number instead of -vvverbose: 2```Command-line arguments will override configuration arguments, even if theconfiguration file is explicitly provided with `-c/--config`.The &quot;action&quot; arguments, `-r/--remove` and `-n/--dry-run`, will beignored in the configuration file.### Using in testsTo test your package for files missing headers, use the following formula:```pythonimport osimport mypackagefrom addheader.add import FileFinder, detect_filesdef test_headers():    root = os.path.dirname(mypackage.__file__)    # modify patterns to match the files that should have headers    ff = FileFinder(root, glob_pat=[&quot;*.py&quot;, &quot;~__init__.py&quot;])    has_header, missing_header = detect_files(ff)    assert len(missing_header) == 0```## CreditsThe _addheader_ program was developed for use in the [IDAES](www.idaes.org) project and is maintained in theIDAES organization in Github at https://github.com/IDAES/addheader . The primary authorand maintainer is Dan Gunter (dkgunter at lbl dot gov).## LicensePlease see the COPYRIGHT.md and LICENSE.md files in the repository forlimitations on use and distribution of this software.</longdescription>
</pkgmetadata>