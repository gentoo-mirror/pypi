<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># multiplexView output of multiple processes, in parallel, in the console, with an interactive TUI## Installation```shell scriptpip install multiplex# or better yetpipx install multiplex```Python 3.7 or greater is required.## Examples### Parallel Execution Of Commands```shell scriptmp \    './some-long-running-process.py --zone z1' \    './some-long-running-process.py --zone z2' \    './some-long-running-process.py --zone z3'```![Par](http://multiplex-static-files.s3-website-us-east-1.amazonaws.com/o.par.gif)You can achive the same effect using Python API like this:```pythonfrom multiplex import Multiplexmp = Multiplex()for zone in ['z1', 'z2', 'z3']:    mp.add(f&quot;./some-long-running-process.py --zone {zone}&quot;)mp.run()```### Dynamically Add Commands`my-script.sh`:```shell script#!/bin/bash -eecho Hello Thereexport REPO='git@github.com:dankilman/multiplex.git'mp 'git clone $REPO'mp 'pyenv virtualenv 3.8.5 multiplex-demo &amp;&amp; pyenv local multiplex-demo'cd multiplexmp 'poetry install'mp 'pytest tests'mp @ Goodbye -b 0```And then running: ```shell scriptmp ./my-script.sh -b 7```![Seq](http://multiplex-static-files.s3-website-us-east-1.amazonaws.com/o.seq.gif)### Python ControllerAn output similar to the first example can be achieved from a single process usingthe Python Controller API.```pythonimport randomimport timeimport threadingfrom multiplex import Multiplex, ControllerCSI = &quot;\033[&quot;RESET = CSI + &quot;0m&quot;RED = CSI + &quot;31m&quot;GREEN = CSI + &quot;32m&quot;BLUE = CSI + &quot;34m&quot;MAG = CSI + &quot;35m&quot;CYAN = CSI + &quot;36m&quot;mp = Multiplex()controllers = [Controller(f&quot;zone z{i+1}&quot;, thread_safe=True) for i in range(3)]for controller in controllers:    mp.add(controller)def run(index, c):    c.write(        f&quot;Starting long running process in zone {BLUE}z{index}{RESET}, &quot;        f&quot;that is not really long for demo purposes\n&quot;    )    count1 = count2 = 0    while True:        count1 += random.randint(0, 1000)        count2 += random.randint(0, 1000)        sleep = random.random() * 3        time.sleep(sleep)        c.write(            f&quot;Processed {RED}{count1}{RESET} orders, &quot;            f&quot;total amount: {GREEN}${count2}{RESET}, &quot;            f&quot;Time it took to process this batch: {MAG}{sleep:0.2f}s{RESET}, &quot;            f&quot;Some more random data: {CYAN}{random.randint(500, 600)}{RESET}\n&quot;        )for index, controller in enumerate(controllers):    thread = threading.Thread(target=run, args=(index+1, controller))    thread.daemon = True    thread.start()mp.run()```![Cont](http://multiplex-static-files.s3-website-us-east-1.amazonaws.com/o.cont.gif)### Help ScreenType `?` to toggle the help screen.![help](http://multiplex-static-files.s3-website-us-east-1.amazonaws.com/help.png)## Why Not Tmux? In short, they solve different problems.`tmux` is a full blown terminal emulator multiplexer.`multiplex` on the other hand, tries to optimize for a smooth experience in navigating output from several sources.`tmux` doesn't have any notion of scrolling panes. That is to say, the layout contains all panes at anygiven moment (unless maximized).In `multiplex`, current view will display boxes that fit current view, but you can have many more, and move around boxes using `less` inspired keys such as `j`, `k`, `g`, `G`, etc...Another aspect is that keybindigs for moving around are much more ergonomic (as they are in `less`) because`multiplex` is not a full terminal emulator, so it can afford using single letter keyboard bindings (e.g. `g` forgo to beginning)</longdescription>
</pkgmetadata>