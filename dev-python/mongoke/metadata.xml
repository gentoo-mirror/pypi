<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img width=&quot;300&quot; src=&quot;https://github.com/remorses/mongoke/blob/master/.github/logo.jpg?raw=true&quot;&gt;&lt;/p&gt;&lt;h1 align=&quot;center&quot;&gt;mongoke&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;Instantly serve your MongoDb database via graphql&lt;/h3&gt;[**Docs**](https://mongoke.now.sh/docs/) â€¢ [**Examples**](https://github.com/remorses/mongoke/tree/master/examples)## Features-   **Powerful Queries**: Pagination, filtering, relation, relay-style connections built-in and generated in a bunch of seconds-   **Works with existing databases**: Point it to an existing MongoDb database to instantly get a ready-to-use GraphQL API-   **Authorization via Jwt**: Every collection can be protected based on jwt payload and document fields-   **Horizontally Scalable**: The service is completely stateless and can be replicated on demand-   **Apollo Federation**: The service can be easily glued with other graphql servers to handle writes and more complicated logic.-   **Resilient Idempotent Configuration**: One YAML Configuration as the only source of truth, relations, authorization and types in one file## Quickstart:## Using Docker composeThe fastest way to try Mongoke is via docker-compose.### 1. Write the configuration to describe the database schema and relationsThe ObjectId scalar is already defined by default, it is converted to string when sent as json```yml# ./mongoke.ymlschema: |    type User {        _id: ObjectId        username: String        email: String    }    type BlogPost {        _id: ObjectId        author_id: ObjectId        title: String        content: String    }types:    User:        collection: users    BlogPost:        collection: postsrelations:    - field: posts      from: User      to: BlogPost      relation_type: to_many      where:          author_id: ${{ parent['_id'] }}```### 2. Run the `mongoke` image with the above configurationTo start the container mount copy paste the following content in a `docker-compose.yml` file, then execute `docker-compose up`.```yml# docker-compose.ymlversion: '3'services:    mongoke:        ports:            - 4000:80        image: mongoke/mongoke        environment:            DB_URL: mongodb://mongo/db        volumes:            - ./mongoke.yml:/conf.yml    mongo:        image: mongo```### 3. Query the generated service via graphql or go to [http://localhost:4000/graphiql](http://localhost:4000/graphiql) to open graphiql```graphql{    User(where: { username: { eq: &quot;Mike&quot; } }) {        _id        username        email        posts {            nodes {                title            }        }    }    BlogPostNodes(first: 10, after: &quot;Post 1&quot;, cursorField: title) {        nodes {            title            content        }        pageInfo {            endCursor            hasNextPage        }    }}```---## TutorialsCheck out the /examples directory in this repoPlease help the project making new tutorials and submit a issue to list it here!</longdescription>
</pkgmetadata>