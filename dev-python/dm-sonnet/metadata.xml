<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Sonnet](https://sonnet.dev/images/sonnet_logo.png)# Sonnet[**Documentation**](https://sonnet.readthedocs.io/) | [**Examples**](#examples)Sonnet is a library built on top of [TensorFlow 2](https://www.tensorflow.org/)designed to provide simple, composable abstractions for machine learningresearch.# IntroductionSonnet has been designed and built by researchers at DeepMind. It can be used toconstruct neural networks for many different purposes (un/supervised learning,reinforcement learning, ...). We find it is a successful abstraction for ourorganization, you might too!More specifically, Sonnet provides a simple but powerful programming modelcentered around a single concept: `snt.Module`. Modules can hold references toparameters, other modules and methods that apply some function on the userinput. Sonnet ships with many predefined modules (e.g. `snt.Linear`,`snt.Conv2D`, `snt.BatchNorm`) and some predefined networks of modules (e.g.`snt.nets.MLP`) but users are also encouraged to build their own modules.Unlike many frameworks Sonnet is extremely unopinionated about **how** you willuse your modules. Modules are designed to be self contained and entirelydecoupled from one another. Sonnet does not ship with a training framework andusers are encouraged to build their own or adopt those built by others.Sonnet is also designed to be simple to understand, our code is (hopefully!)clear and focussed. Where we have picked defaults (e.g. defaults for initialparameter values) we try to point out why.# Getting Started## ExamplesThe easiest way to try Sonnet is to use Google Colab which offers a free Pythonnotebook attached to a GPU or TPU.- [Predicting MNIST with an MLP](https://colab.research.google.com/github/deepmind/sonnet/blob/v2/examples/mlp_on_mnist.ipynb)- [Training a Little GAN on MNIST](https://colab.research.google.com/github/deepmind/sonnet/blob/v2/examples/little_gan_on_mnist.ipynb)- [Distributed training with `snt.distribute`](https://colab.research.google.com/github/deepmind/sonnet/blob/v2/examples/distributed_cifar10.ipynb)## InstallationTo get started install TensorFlow 2.0 and Sonnet 2:```shell$ pip install tensorflow tensorflow-probability$ pip install dm-sonnet```You can run the following to verify things installed correctly:```pythonimport tensorflow as tfimport sonnet as sntprint(&quot;TensorFlow version {}&quot;.format(tf.__version__))print(&quot;Sonnet version {}&quot;.format(snt.__version__))```### Using existing modulesSonnet ships with a number of built in modules that you can trivially use. Forexample to define an MLP we can use the `snt.Sequential` module to call asequence of modules, passing the output of a given module as the input for thenext module. We can use `snt.Linear` and `tf.nn.relu` to actually define ourcomputation:```pythonmlp = snt.Sequential([    snt.Linear(1024),    tf.nn.relu,    snt.Linear(10),])```To use our module we need to &quot;call&quot; it. The `Sequential` module (and mostmodules) define a `__call__` method that means you can call them by name:```pythonlogits = mlp(tf.random.normal([batch_size, input_size]))```It is also very common to request all the parameters for your module. Mostmodules in Sonnet create their parameters the first time they are called withsome input (since in most cases the shape of the parameters is a function ofthe input). Sonnet modules provide two properties for accessing parameters.The `variables` property returns **all** `tf.Variable`s that are referenced bythe given module:```pythonall_variables = mlp.variables```It is worth noting that `tf.Variable`s are not just used for parameters of yourmodel. For example they are used to hold state in metrics used in`snt.BatchNorm`. In most cases users retrieve the module variables to pass themto an optimizer to be updated. In this case non-trainable variables shouldtypically not be in that list as they are updated via a different mechanism.TensorFlow has a built in mechanism to mark variables as &quot;trainable&quot; (parametersof your model) vs. non-trainable (other variables). Sonnet provides a mechanismto gather all trainable variables from your module which is probably what youwant to pass to an optimizer:```pythonmodel_parameters = mlp.trainable_variables```### Building your own moduleSonnet strongly encourages users to subclass `snt.Module` to define their ownmodules. Let's start by creating a simple `Linear` layer called `MyLinear`:```pythonclass MyLinear(snt.Module):  def __init__(self, output_size, name=None):    super(MyLinear, self).__init__(name=name)    self.output_size = output_size  @snt.once  def _initialize(self, x):    initial_w = tf.random.normal([x.shape[1], self.output_size])    self.w = tf.Variable(initial_w, name=&quot;w&quot;)    self.b = tf.Variable(tf.zeros([self.output_size]), name=&quot;b&quot;)  def __call__(self, x):    self._initialize(x)    return tf.matmul(x, self.w) + self.b```Using this module is trivial:```pythonmod = MyLinear(32)mod(tf.ones([batch_size, input_size]))```By subclassing `snt.Module` you get many nice properties for free. For examplea default implementation of `__repr__` which shows constructor arguments (veryuseful for debugging and introspection):```python&gt;&gt;&gt; print(repr(mod))MyLinear(output_size=10)```You also get the `variables` and `trainable_variables` properties:```python&gt;&gt;&gt; mod.variables(&lt;tf.Variable 'my_linear/b:0' shape=(10,) ...)&gt;, &lt;tf.Variable 'my_linear/w:0' shape=(1, 10) ...)&gt;)```You may notice the `my_linear` prefix on the variables above. This is becauseSonnet modules also enter the modules name scope whenever methods are called.By entering the module name scope we provide a much more useful graph for toolslike TensorBoard to consume (e.g. all operations that occur inside my_linearwill be in a group called my_linear).Additionally your module will now support TensorFlow checkpointing and savedmodel which are advanced features covered later.# SerializationSonnet supports multiple serialization formats. The simplest format we supportis Python's `pickle`, and all built in modules are tested to make sure they canbe saved/loaded via pickle in the same Python process. In general we discouragethe use of pickle, it is not well supported by many parts of TensorFlow and inour experience can be quite brittle.## TensorFlow Checkpointing**Reference:** https://www.tensorflow.org/alpha/guide/checkpointsTensorFlow checkpointing can be used to save the value of parametersperiodically during training. This can be useful to save the progress oftraining in case your program crashes or is stopped. Sonnet is designed to workcleanly with TensorFlow checkpointing:```pythoncheckpoint_root = &quot;/tmp/checkpoints&quot;checkpoint_name = &quot;example&quot;save_prefix = os.path.join(checkpoint_root, checkpoint_name)my_module = create_my_sonnet_module()  # Can be anything extending snt.Module.# A `Checkpoint` object manages checkpointing of the TensorFlow state associated# with the objects passed to it's constructor. Note that Checkpoint supports# restore on create, meaning that the variables of `my_module` do **not** need# to be created before you restore from a checkpoint (their value will be# restored when they are created).checkpoint = tf.train.Checkpoint(module=my_module)# Most training scripts will want to restore from a checkpoint if one exists. This# would be the case if you interrupted your training (e.g. to use your GPU for# something else, or in a cloud environment if your instance is preempted).latest = tf.train.latest_checkpoint(checkpoint_root)if latest is not None:  checkpoint.restore(latest)for step_num in range(num_steps):  train(my_module)  # During training we will occasionally save the values of weights. Note that  # this is a blocking call and can be slow (typically we are writing to the  # slowest storage on the machine). If you have a more reliable setup it might be  # appropriate to save less frequently.  if step_num and not step_num % 1000:    checkpoint.save(save_prefix)# Make sure to save your final values!!checkpoint.save(save_prefix)```## TensorFlow Saved Model**Reference:** https://www.tensorflow.org/alpha/guide/saved_modelTensorFlow saved models can be used to save a copy of your network that isdecoupled from the Python source for it. This is enabled by saving a TensorFlowgraph describing the computation and a checkpoint containing the value ofweights.The first thing to do in order to create a saved model is to create a`snt.Module` that you want to save:```pythonmy_module = snt.nets.MLP([1024, 1024, 10])my_module(tf.ones([1, input_size]))```Next, we need to create another module describing the specific parts of ourmodel that we want to export. We advise doing this (rather than modifying theoriginal model in-place) so you have fine grained control over what is actuallyexported. This is typically important to avoid creating very large saved models,and such that you only share the parts of your model you want to (e.g. you onlywant to share the generator for a GAN but keep the discriminator private).```python@tf.function(input_signature=[tf.TensorSpec([None, input_size])])def inference(x):  return my_module(x)to_save = snt.Module()to_save.inference = inferenceto_save.all_variables = list(my_module.variables)tf.saved_model.save(to_save, &quot;/tmp/example_saved_model&quot;)```We now have a saved model in the `/tmp/example_saved_model` folder:```shell$ ls -lh /tmp/example_saved_modeltotal 24Kdrwxrwsr-t 2 tomhennigan 154432098 4.0K Apr 28 00:14 assets-rw-rw-r-- 1 tomhennigan 154432098  14K Apr 28 00:15 saved_model.pbdrwxrwsr-t 2 tomhennigan 154432098 4.0K Apr 28 00:15 variables```Loading this model is simple and can be done on a different machine without anyof the Python code that built the saved model:```pythonloaded = tf.saved_model.load(&quot;/tmp/example_saved_model&quot;)# Use the inference method. Note this doesn't run the Python code from `to_save`# but instead uses the TensorFlow Graph that is part of the saved model.loaded.inference(tf.ones([1, input_size]))# The all_variables property can be used to retrieve the restored variables.assert len(loaded.all_variables) &gt; 0```Note that the loaded object is not a Sonnet module, it is a container objectthat has the specific methods (e.g. `inference`) and properties (e.g.`all_variables`) that we added in the previous block.## Distributed training**Example:** https://github.com/deepmind/sonnet/blob/v2/examples/distributed_cifar10.ipynbSonnet has support for distributed training using[custom TensorFlow distribution strategies](https://sonnet.readthedocs.io/en/latest/api.html#module-sonnet.distribute).A key difference between Sonnet and distributed training using `tf.keras` isthat Sonnet modules and optimizers do not behave differently when run underdistribution strategies (e.g. we do not average your gradients or sync yourbatch norm stats). We believe that users should be in full control of theseaspects of their training and they should not be baked into the library. Thetrade off here is that you need to implement these features in your trainingscript (typically this is just 2 lines of code to all reduce your gradientsbefore applying your optimizer) or swap in modules that are explicitlydistribution aware (e.g. `snt.distribute.CrossReplicaBatchNorm`).Our [distributed Cifar-10](https://github.com/deepmind/sonnet/blob/v2/examples/distributed_cifar10.ipynb)example walks through doing multi-GPU training with Sonnet.</longdescription>
</pkgmetadata>