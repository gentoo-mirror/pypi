<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/github/workflow/status/saltstack/pytest-shell-utilities/CI/main?style=plastic   :target: https://github.com/saltstack/pytest-shell-utilities/actions/workflows/testing.yml   :alt: CI.. image:: https://readthedocs.org/projects/pytest-shell-utilities/badge/?style=plastic   :target: https://pytest-shell-utilities.readthedocs.io   :alt: Docs.. image:: https://img.shields.io/codecov/c/github/saltstack/pytest-shell-utilities?style=plastic&amp;token=ctdrjPj4mc   :target: https://codecov.io/gh/saltstack/pytest-shell-utilities   :alt: Codecov.. image:: https://img.shields.io/pypi/pyversions/pytest-shell-utilities?style=plastic   :target: https://pypi.org/project/pytest-shell-utilities   :alt: Python Versions.. image:: https://img.shields.io/pypi/wheel/pytest-shell-utilities?style=plastic   :target: https://pypi.org/project/pytest-shell-utilities   :alt: Python Wheel.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=plastic   :target: https://github.com/psf/black   :alt: Code Style: black.. image:: https://img.shields.io/pypi/l/pytest-shell-utilities?style=plastic   :alt: PyPI - License..   include-starts-here==============================What is Pytest Shell Utilities==============================   &quot;When in doubt, shell out&quot;   -- Thomas S. HatchThis pytest plugin was extracted from `pytest-salt-factories`_.If provides a basic fixture ``shell`` which basically uses ``subprocess.Popen``to run commands against the running system on a shell while providing a niceassert'able return class... _pytest-salt-factories: https://github.com/saltstack/pytest-salt-factoriesInstall=======Installing ``pytest-shell-utilities`` is as simple as:.. code-block:: bash   python -m pip install pytest-shell-utilitiesAnd, that's honestly it.Usage=====Once installed, you can now use the ``shell`` fixture to run some commands and assert against theoutcome... code-block:: python   def test_assert_good_exitcode(shell):       ret = shell.run(&quot;exit&quot;, &quot;0&quot;)       assert ret.returncode == 0   def test_assert_bad_exitcode(shell):       ret = shell.run(&quot;exit&quot;, &quot;1&quot;)       assert ret.returncode == 1If the command outputs parseable JSON, the ``shell`` fixture can attempt loading that output asJSON which allows for asserting against the JSON loaded object... code-block:: python   def test_against_json_output(shell):       d = {&quot;a&quot;: &quot;a&quot;, &quot;b&quot;: &quot;b&quot;}       ret = shell.run(&quot;echo&quot;, json.dumps(d))       assert ret.data == dAdditionally, the return object's ``.stdout`` and ``.stderr`` can be line matched using`pytest.pytester.LineMatcher`_:.. code-block:: python   MARY_HAD_A_LITTLE_LAMB = &quot;&quot;&quot;\   Mary had a little lamb,   Its fleece was white as snow;   And everywhere that Mary went   The lamb was sure to go.   &quot;&quot;&quot;   def test_matcher_attribute(shell):       ret = shell.run(&quot;echo&quot;, MARY_HAD_A_LITTLE_LAMB)       ret.stdout.matcher.fnmatch_lines_random(           [               &quot;*had a little*&quot;,               &quot;Its fleece was white*&quot;,               &quot;*Mary went&quot;,               &quot;The lamb was sure to go.&quot;,           ]       ).. _pytest.pytester.LineMatcher: https://docs.pytest.org/en/stable/reference.html#pytest.pytester.LineMatcher..   include-ends-hereDocumentation=============The full documentation can be seen `here &lt;https://pytest-shell-utilities.readthedocs.io&gt;`_.</longdescription>
</pkgmetadata>