<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AWS RDK[![pypibadge](https://static.pepy.tech/personalized-badge/rdk?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=blue&amp;left_text=downloads)](https://pepy.tech/project/rdk)![PyPI](https://img.shields.io/pypi/v/rdk)AWS Config Rules Development KitWe greatly appreciate feedback and bug reports at&lt;rdk-maintainers@amazon.com&gt;! You may also create an issue on this repo.The RDK is designed to support a &quot;Compliance-as-Code&quot; workflow that isintuitive and productive. It abstracts away much of the undifferentiatedheavy lifting associated with deploying AWS Config rules backed bycustom lambda functions, and provides a streamlineddevelop-deploy-monitor iterative process.For complete documentation, including command reference, check out the[ReadTheDocs documentation](https://aws-config-rdk.readthedocs.io/).## Getting StartedUses Python 3.7+ and is installed via pip. Requires you to havean AWS account and sufficient permissions to manage the Config service,and to create S3 Buckets, Roles, and Lambda Functions. An AWS IAM PolicyDocument that describes the minimum necessary permissions can be foundat `policy/rdk-minimum-permissions.json`.Under the hood, rdk uses boto3 to make API calls to AWS, so you can setyour credentials any way that boto3 recognizes (options 3 through 8[here](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#guide-credentials))or pass them in with the command-line parameters `--profile`,`--region`, `--access-key-id`, or `--secret-access-key`If you just want to use the RDK, go ahead and install it using pip.```bashpip install rdk```Alternately, if you want to see the code and/or contribute you can clonethe git repo, and then from the repo directory use pip to install thepackage. Use the `-e` flag to generate symlinks so that any edits youmake will be reflected when you run the installed package.If you are going to author your Lambda functions using Java you willneed to have Java 8 and gradle installed. If you are going to authoryour Lambda functions in C# you will need to have the dotnet CLI and the.NET Core Runtime 1.08 installed.```bashpip install -e .```To make sure the rdk is installed correctly, running the package fromthe command line without any arguments should display help information.```bashrdkusage: rdk [-h] [-p PROFILE] [-k ACCESS_KEY_ID] [-s SECRET_ACCESS_KEY]           [-r REGION] [-f REGION_FILE] [--region-set REGION_SET]           [-v] &lt;command&gt; ...rdk: error: the following arguments are required: &lt;command&gt;, &lt;command arguments&gt;```## Usage### Configure your envTo use the RDK, it's recommended to create a directory that will beyour working directory. This should be committed to a source code repo,and ideally created as a python virtualenv. In that directory, run the`init` command to set up your AWS Config environment.```bashrdk initRunning init!Creating Config bucket config-bucket-780784666283Creating IAM role config-roleWaiting for IAM role to propagateConfig Service is ONConfig setup complete.Creating Code bucket config-rule-code-bucket-780784666283ap-southeast-1```Running `init` subsequent times will validate your AWS Config setup andre-create any S3 buckets or IAM resources that are needed.- If you have config delivery bucket already present in some other AWS account then use `--config-bucket-exists-in-another-account` as argument.```bashrdk init --config-bucket-exists-in-another-account```- If you have AWS Organizations/ControlTower Setup in your AWS environment then additionally, use `--control-tower` as argument.```bashrdk init --control-tower --config-bucket-exists-in-another-account```- If bucket for custom lambda code is already present in current account then use `--skip-code-bucket-creation` argument.```bashrdk init --skip-code-bucket-creation```- If you want rdk to create/update and upload the rdklib-layer for you, then use `--generate-lambda-layer` argument. In supported regions, rdk will deploy the layer using the Serverless Application Repository, otherwise it will build a local lambda layer archive and upload it for use.```bashrdk init --generate-lambda-layer```- If you want rdk to give a custom name to the lambda layer for you, then use `--custom-layer-namer` argument. The Serverless Application Repository currently cannot be used for custom lambda layers.```bashrdk init --generate-lambda-layer --custom-layer-name &lt;LAYER_NAME&gt;```## Create RulesIn your working directory, use the `create` command to start creating anew custom rule. You must specify the runtime for the lambda functionthat will back the Rule, and you can also specify a resource type (orcomma-separated list of types) that the Rule will evaluate or a maximumfrequency for a periodic rule. This will add a new directory for therule and populate it with several files, including a skeleton of yourLambda code.```bashrdk create MyRule --runtime python3.11 --resource-types AWS::EC2::Instance --input-parameters '{&quot;desiredInstanceType&quot;:&quot;t2.micro&quot;}'Running create!Local Rule files created.```On Windows it is necessary to escape the double-quotes when specifyinginput parameters, so the `--input-parameters` argument would insteadlook something like this:`'{\&quot;desiredInstanceType\&quot;:\&quot;t2.micro\&quot;}'`As of RDK v0.17.0, you can also specify `--resource-types ALL` to include all resource types.Note that you can create rules that use EITHER resource-types ORmaximum-frequency, but not both. We have found that rules that try to beboth event-triggered as well as periodic wind up being very complicatedand so we do not recommend it as a best practice.### Edit Rules LocallyOnce you have created the rule, edit the python file in your ruledirectory (in the above example it would be `MyRule/MyRule.py`, but maybe deeper into the rule directory tree depending on your chosen Lambdaruntime) to add whatever logic your Rule requires in the`evaluate_compliance` function. You will have access to the CI that wassent by Config, as well as any parameters configured for the ConfigRule. Your function should return either a simple compliance status (oneof `COMPLIANT`, `NON_COMPLIANT`, or `NOT_APPLICABLE`), or if you'reusing the python or node runtimes you can return a JSON object withmultiple evaluation responses that the RDK will send back to AWS Config.An example would look like:```pythonfor sg in response['SecurityGroups']:    evaluations.append(    {        'ComplianceResourceType': 'AWS::EC2::SecurityGroup',        'ComplianceResourceId': sg['GroupId'],        'ComplianceType': 'COMPLIANT',        'Annotation': 'This is an important note.',        'OrderingTimestamp': str(datetime.datetime.now())    })return evaluations```This is necessary for periodic rules that are not triggered by any CIchange (which means the CI that is passed in will be null), and also forattaching annotations to your evaluation results.If you want to see what the JSON structure of a CI looks like forcreating your logic, you can use```bashrdk sample-ci &lt;Resource Type&gt;```to output a formatted JSON document.### Write and Run Unit TestsIf you are writing Config Rules using either of the Python runtimesthere will be a `&lt;rule name&gt;_test.py` file deployed along with yourLambda function skeleton. This can be used to write unit tests accordingto the standard Python unittest framework (documented[here](https://docs.python.org/3/library/unittest.html)), which can berun using the `test-local` rdk command:```bashrdk test-local MyTestRuleRunning local test!Testing MyTestRuleLooking for tests in /Users/mborch/Code/rdk-dev/MyTestRule---------------------------------------------------------------------Ran 0 tests in 0.000sOK&lt;unittest.runner.TextTestResult run=0 errors=0 failures=0&gt;```The test file includes setup for the MagicMock library that can be usedto stub boto3 API calls if your rule logic will involve making API callsto gather additional information about your AWS environment. For sometips on how to do this, check out this blog post:[Mock Is Magic](https://sgillies.net/2017/10/19/mock-is-magic.html)### Modify RuleIf you need to change the parameters of a Config rule in your workingdirectory you can use the `modify` command. Any parameters you specifywill overwrite existing values, any that you do not specify will not bechanged.```bashrdk modify MyRule --runtime python3.11 --maximum-frequency TwentyFour_Hours --input-parameters '{&quot;desiredInstanceType&quot;:&quot;t2.micro&quot;}'Running modify!Modified Rule 'MyRule'.  Use the `deploy` command to push your changes to AWS.```Again, on Windows the input parameters would look like:`'{\&quot;desiredInstanceType\&quot;:\&quot;t2.micro\&quot;}'`It is worth noting that until you actually call the `deploy` commandyour rule only exists in your working directory, none of the Rulecommands discussed thus far actually makes changes to your account.### Deploy RuleOnce you have completed your compliance validation code and set yourRule's configuration, you can deploy the Rule to your account using the`deploy` command. This will zip up your code (and the other associatedcode files, if any) into a deployable package (or run a gradle build ifyou have selected the java8 runtime or run the Lambda packaging stepfrom the dotnet CLI if you have selected the dotnetcore1.0 runtime),copy that zip file to S3, and then launch or update a CloudFormationstack that defines your Config Rule, Lambda function, and the necessarypermissions and IAM Roles for it to function. Since CloudFormation doesnot deeply inspect Lambda code objects in S3 to construct its changeset,the `deploy` command will also directly update the Lambda function forany subsequent deployments to make sure code changes are propagatedcorrectly.```bashrdk deploy MyRuleRunning deploy!Zipping MyRuleUploading MyRuleCreating CloudFormation Stack for MyRuleWaiting for CloudFormation stack operation to complete......Waiting for CloudFormation stack operation to complete...Config deploy complete.```The exact output will vary depending on Lambda runtime. You can use the`--all` flag to deploy all of the rules in your working directory. Ifyou used the `--generate-lambda-layer` flag in rdk init, use the`--generated-lambda-layer` flag for rdk deploy.### Deploy Organization RuleYou can also deploy the Rule to your AWS Organization using the`deploy-organization` command. For successful evaluation of custom rulesin child accounts, please make sure you do one of the following:1. Set ASSUME_ROLE_MODE in Lambda code to True, to get the Lambda to assume the Role attached on the Config Service and confirm that the role trusts the master account where the Lambda function is going to be deployed.2. Set ASSUME_ROLE_MODE in Lambda code to True, to get the Lambda to assume a custom role and define an optional parameter with key as ExecutionRoleName and set the value to your custom role name; confirm that the role trusts the master account of the organization where the Lambda function will be deployed.```bashrdk deploy-organization MyRuleRunning deploy!Zipping MyRuleUploading MyRuleCreating CloudFormation Stack for MyRuleWaiting for CloudFormation stack operation to complete......Waiting for CloudFormation stack operation to complete...Config deploy complete.```The exact output will vary depending on Lambda runtime. You can use the`--all` flag to deploy all of the rules in your working directory. Thiscommand uses `PutOrganizationConfigRule` API for the rule deployment. Ifa new account joins an organization, the rule is deployed to thataccount. When an account leaves an organization, the rule is removed.Deployment of existing organizational AWS Config Rules will only beretried for 7 hours after an account is added to your organization if arecorder is not available. You are expected to create a recorder if onedoesn't exist within 7 hours of adding an account to your organization.### View Logs For Deployed RuleOnce the Rule has been deployed to AWS you can get the CloudWatch logsassociated with your Lambda function using the `logs` command.```bashrdk logs MyRule -n 52017-11-15 22:59:33 - START RequestId: 96e7639a-ca15-11e7-95a2-b1521890638d Version: $LATEST2017-11-15 23:41:13 - REPORT RequestId: 68e0304f-ca1b-11e7-b735-81ebae95acda    Duration: 0.50 ms    Billed Duration: 100 ms     Memory Size: 256 MB     Max Memory Used: 36 MB2017-11-15 23:41:13 - END RequestId: 68e0304f-ca1b-11e7-b735-81ebae95acda2017-11-15 23:41:13 - Default RDK utility class does not yet support Scheduled Notifications.2017-11-15 23:41:13 - START RequestId: 68e0304f-ca1b-11e7-b735-81ebae95acda Version: $LATEST```You can use the `-n` and `-f` command line flags just like the UNIX`tail` command to view a larger number of log events and to continuouslypoll for new events. The latter option can be useful in conjunction withmanually initiating Config Evaluations for your deploy Config Rule tomake sure it is behaving as expected.## Running the testsThe `testing` directory contains scripts and buildspec files that I useto run basic functionality tests across a variety of CLI environments(currently Ubuntu Linux running Python 3.7/3.8/3.9/3.10, and Windows Serverrunning Python 3.10). If there is interest I can release a CloudFormationtemplate that could be used to build the test environment, let me knowif this is something you want!## Advanced Features### Cross-Account DeploymentsFeatures have been added to the RDK to facilitate the cross-accountdeployment pattern that enterprise customers have standardized forcustom Config Rules. A cross-account architecture is one in which theLambda functions are deployed to a single central &quot;Compliance&quot; account(which may be the same as a central &quot;Security&quot; account), and theConfig Rules are deployed to any number of &quot;Satellite&quot; accounts thatare used by other teams or departments. This gives the compliance teamconfidence that their rule logic cannot be tampered with and makes itmuch easier for them to modify rule logic without having to go through acomplex deployment process to potentially hundreds of AWS accounts. Thecross-account pattern uses two advanced RDK features:- `--functions-only` (`-f`) deployment- `create-rule-template` command#### Functions-Only DeploymentBy using the `-f` or `--functions-only` flag on the `deploy` command theRDK will deploy only the necessary Lambda Functions, Lambda ExecutionRole, and Lambda Permissions to the account specified by the executioncredentials. It accomplishes this by batching up all of the Lambdafunction CloudFormation snippets for the selected Rule(s) into a singledynamically generated template and deploy that CloudFormation template.One consequence of this is that subsequent deployments that specify adifferent set of rules for the same stack name will update thatCloudFormation stack, and any Rules that were included in the firstdeployment but not in the second will be removed. You can use the`--stack-name` parameter to override the default CloudFormation stackname if you need to manage different subsets of your Lambda Functionsindependently. The intended usage is to deploy the functions for all ofthe Config rules in the Security/Compliance account, which can be donesimply by using `rdk deploy -f --all` from your working directory.#### create-rule-template commandThis command generates a CloudFormation template that defines the AWSConfig rules themselves, along with the Config Role, Config data bucket,Configuration Recorder, and Delivery channel necessary for the Configrules to work in a satellite account. You must specify the file name forthe generated template using the `--output-file` or`-o` command line flags. The generated template takes asingle parameter of the AccountID of the central compliance account thatcontains the Lambda functions that will back your custom Config Rules.The generated template can be deployed in the desired satellite accountsthrough any of the means that you can deploy any other CloudFormationtemplate, including the console, the CLI, as a CodePipeline task, orusing StackSets. The `create-rule-template` command takes all of thestandard arguments for selecting Rules to include in the generatedtemplate, including lists of individual Rule names, an `--all` flag, orusing the RuleSets feature described below.```bashrdk create-rule-template -o remote-rule-template.json --allGenerating CloudFormation template!CloudFormation template written to remote-rule-template.json```### Disable the supported resource types checkIt is now possible to define a resource type that is not yet supportedby rdk. To disable the supported resource check use the optional flag'--skip-supported-resource-check' during the create command.```bashrdk create MyRule --runtime python3.11 --resource-types AWS::New::ResourceType --skip-supported-resource-check'AWS::New::ResourceType' not found in list of accepted resource types.Skip-Supported-Resource-Check Flag set (--skip-supported-resource-check), ignoring missing resource type error.Running create!Local Rule files created.```### Custom Lambda Function NameAs of version 0.7.14, instead of defaulting the lambda function names to`RDK-Rule-Function-&lt;RULE_NAME&gt;` it is possible to customize the name forthe Lambda function to any 64 characters string as per Lambda's namingstandards using the optional `--custom-lambda-name` flag whileperforming `rdk create`. This opens up new features like :1. Longer config rule name.2. Custom lambda function naming as per personal or enterprise standards.```bashrdk create MyLongerRuleName --runtime python3.11 --resource-types AWS::EC2::Instance --custom-lambda-name custom-prefix-for-MyLongerRuleNameRunning create!Local Rule files created.```The above example would create files with config rule name as`MyLongerRuleName` and lambda function with the name`custom-prefix-for-MyLongerRuleName` instead of`RDK-Rule-Function-MyLongerRuleName`### RuleSetsNew as of version 0.3.11, it is possible to add RuleSet tags to rulesthat can be used to deploy and test groups of rules together. Rules canbelong to multiple RuleSets, and RuleSet membership is stored only inthe parameters.json metadata. The [deploy]{.title-ref},[create-rule-template]{.title-ref}, and [test-local]{.title-ref}commands are RuleSet-aware such that a RuleSet can be passed in as thetarget instead of [--all]{.title-ref} or a specific named Rule.A comma-delimited list of RuleSets can be added to a Rule when youcreate it (using the `--rulesets` flag), as part of a `modify` command,or using new `ruleset` subcommands to add or remove individual rulesfrom a RuleSet.Running `rdk rulesets list` will display a list of the RuleSetscurrently defined across all of the Rules in the working directory```bashrdk rulesets listRuleSets:  AnotherRuleSet MyNewSet```Naming a specific RuleSet will list all of the Rules that are part ofthat RuleSet.```bashrdk rulesets list AnotherRuleSetRules in AnotherRuleSet :  RSTest```Rules can be added to or removed from RuleSets using the `add` and`remove` subcommands:```bashrdk rulesets add MyNewSet RSTestRSTest added to RuleSet MyNewSetrdk rulesets remove AnotherRuleSet RSTestRSTest removed from RuleSet AnotherRuleSet```RuleSets are a convenient way to maintain a single repository of ConfigRules that may need to have subsets of them deployed to differentenvironments. For example your development environment may contain someof the Rules that you run in Production but not all of them; RuleSetsgives you a way to identify and selectively deploy the appropriate Rulesto each environment.### Managed RulesThe RDK is able to deploy AWS Managed Rules.To do so, create a rule using `rdk create` and provide a validSourceIdentifier via the `--source-identifier` CLI option. The list ofManaged Rules can be found[here](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html), and note that the Identifier can be obtained by replacing the dasheswith underscores and using all capitals (for example, the&quot;guardduty-enabled-centralized&quot; rule has the SourceIdentifier&quot;GUARDDUTY_ENABLED_CENTRALIZED&quot;). Just like custom Rules you will needto specify source events and/or a maximum evaluation frequency, and alsopass in any Rule parameters. The resulting Rule directory will containonly the parameters.json file, but using `rdk deploy` or`rdk create-rule-template` can be used to deploy the Managed Rule likeany other Custom Rule.### Deploying Rules Across Multiple RegionsThe RDK is able to run init/deploy/undeploy across multiple regions witha `rdk -f &lt;region file&gt; -t &lt;region set&gt;`If no region group is specified, rdk will deploy to the `default` regionset.To create a sample starter region group, run `rdk create-region-set` tospecify the filename, add the `-o &lt;region set output file name&gt;` thiswill create a region set with the following tests and regions`&quot;default&quot;:[&quot;us-east-1&quot;,&quot;us-west-1&quot;,&quot;eu-north-1&quot;,&quot;ap-east-1&quot;],&quot;aws-cn-region-set&quot;:[&quot;cn-north-1&quot;,&quot;cn-northwest-1&quot;]`### Using RDK to Generate a Lambda Layer in a region (Python3)By default `rdk init --generate-lambda-layer` will generate an rdkliblambda layer while running init in whatever region it is run, to forcere-generation of the layer, run `rdk init --generate-lambda-layer` againover a regionTo use this generated lambda layer, add the flag`--generated-lambda-layer` when running `rdk deploy`. For example:`rdk -f regions.yaml deploy LP3_TestRule_P39_lib --generated-lambda-layer`If you created layer with a custom name (by running`rdk init --custom-lambda-layer`, add a similar `custom-lambda-layer`flag when running deploy.## Support &amp; FeedbackThis project is maintained by AWS Solution Architects and Consultants.It is not part of an AWS service and support is provided best-effort bythe maintainers. To post feedback, submit feature ideas, or report bugs,please use the [Issuessection](https://github.com/awslabs/aws-config-rdk/issues) of this repo.## Contributingemail us at &lt;rdk-maintainers@amazon.com&gt; if you have any questions. Weare happy to help and discuss.## Contacts- **Benjamin Morris** - [bmorrissirromb](https://github.com/bmorrissirromb) - _current maintainer_- **Julio Delgado Jr** - [tekdj7](https://github.com/tekdj7) - _current maintainer_## Past Contributors- **Michael Borchert** - _Original Python version_- **Jonathan Rault** - _Original Design, testing, feedback_- **Greg Kim and Chris Gutierrez** - _Initial work and CI definitions_- **Henry Huang** - _Original CFN templates and other code_- **Santosh Kumar** - _maintainer_- **Jose Obando** - _maintainer_- **Jarrett Andrulis** - [jarrettandrulis](https://github.com/jarrettandrulis) - _maintainer_- **Sandeep Batchu** - [batchus](https://github.com/batchus) - _maintainer_- **Mark Beacom** - [mbeacom](https://github.com/mbeacom) - _maintainer_- **Ricky Chau** - [rickychau2780](https://github.com/rickychau2780) - _maintainer_## LicenseThis project is licensed under the Apache 2.0 License## Acknowledgments- the boto3 team makes all of this magic possible.## Link- to view example of rules built with the RDK: [https://github.com/awslabs/aws-config-rules/tree/master/python](https://github.com/awslabs/aws-config-rules/tree/master/python)</longdescription>
</pkgmetadata>