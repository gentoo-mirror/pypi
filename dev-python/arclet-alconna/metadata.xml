<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![](https://socialify.git.ci/ArcletProject/Alconna/image?description=1&amp;descriptionEditable=A%20High-performance%2C%20Generality%2C%20Humane%20Command%20Line%20Arguments%20Parser%20Library.&amp;font=Inter&amp;forks=1&amp;issues=1&amp;language=1&amp;logo=https%3A%2F%2Farclet.top%2Fimg%2Farclet.png&amp;name=1&amp;owner=1&amp;pattern=Brick%20Wall&amp;stargazers=1&amp;theme=Auto)&lt;div align=&quot;center&quot;&gt; # Alconna&lt;/div&gt;![Alconna](https://img.shields.io/badge/Arclet-Alconna-2564c2.svg)![latest release](https://img.shields.io/github/release/ArcletProject/Alconna)[![Licence](https://img.shields.io/github/license/ArcletProject/Alconna)](https://github.com/ArcletProject/Alconna/blob/master/LICENSE)[![PyPI](https://img.shields.io/pypi/v/arclet-alconna)](https://pypi.org/project/arclet-alconna)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/arclet-alconna)](https://www.python.org/)[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FArcletProject%2FAlconna.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FArcletProject%2FAlconna?ref=badge_shield)[**ç®€ä½“ä¸­æ–‡**](README.md)|[**English**](README-EN.md)## About`Alconna` is a powerful cli tool for parsing message chain or other raw message data. It is an overload version of `CommandAnalysis`, affiliated to `ArcletProject`.`Alconna` has a large number of built-in components and complex parsing functions. ~~But do not afraid~~, you can use it as a simple command parser.## Installationpip```shell$ pip install --upgrade arclet-alconna$ pip install --upgrade arclet-alconna[full]$ pip install --upgrade arclet-alconna[all]```## DocumentationOfficial Document : [ðŸ‘‰Link](https://arcletproject.github.io/docs/alconna/tutorial)Relevant Document : [ðŸ“šDocs](https://graiax.cn/guide/message_parser/alconna.html)## A Simple Example```pythonfrom arclet.alconna import Alconna, Option, Subcommand, Argscmd = Alconna(    &quot;/pip&quot;,    Subcommand(&quot;install&quot;, Option(&quot;-u|--upgrade&quot;), Args.pak_name[str]),    Option(&quot;list&quot;))result = cmd.parse(&quot;/pip install numpy --upgrade&quot;) # This method returns an 'Arparma' class instance.print(result.query('install'))  # Or result.install```Output as follows:```value=None args={'pak_name': 'numpy'} options={'upgrade': value=Ellipsis args={}} subcommands={}```## CommunicationQQ Group: [Link](https://jq.qq.com/?_wv=1027&amp;k=PUPOnCSH)## Features* High Performance. On i5-10210U, performance is about `71000~289000 msg/s`; test script: [benchmark](benchmark.py)* Intuitive way to create command components* Powerful Automatic Type Parse and Conversion* Customizable Help Text Formatter and Control of Command Analyser* i18n Support* Cache of input command for quick response of repeated command* Easy-to-use Construct and Usage of Command Shortcut* Can bind callback function to execute after command parsing* Can create command completion session to implement multi-round continuous completion prompt* Various Features (FuzzyMatch, Output Capture, etc.)Example of Callback Executor:```python# callback.pyfrom arclet.alconna import Alconna, Argsalc = Alconna(&quot;callback&quot;, Args[&quot;foo&quot;, int][&quot;bar&quot;, str])@alc.bind()def callback(foo: int, bar: str):    print(f&quot;foo: {foo}&quot;)    print(f&quot;bar: {bar}&quot;)    print(bar * foo)    if __name__ == &quot;__main__&quot;:    alc()``````shell$ python callback.py 3 hellofoo: 3bar: hellohellohellohello```Example of Type Conversion:```pythonfrom arclet.alconna import Alconna, Argsfrom pathlib import Pathread = Alconna(&quot;read&quot;, Args[&quot;data&quot;, bytes])@read.bind()def cb(data: bytes):    print(type(data))read.parse([&quot;read&quot;, b'hello'])read.parse(&quot;read test_fire.py&quot;)read.parse([&quot;read&quot;, Path(&quot;test_fire.py&quot;)])'''&lt;class 'bytes'&gt;&lt;class 'bytes'&gt;&lt;class 'bytes'&gt;'''```Example of Component creation:```python# component.pyfrom arclet.alconna import Alconna, Args, Option, Subcommand, store_true, count, appendalc = Alconna(    &quot;component&quot;,    Args[&quot;path&quot;, str],    Option(&quot;--verbose|-v&quot;, action=count),    Option(&quot;-f&quot;, Args[&quot;flag&quot;, str], compact=True, action=append),    Subcommand(&quot;sub&quot;, Option(&quot;bar&quot;, action=store_true, default=False)))if __name__ == '__main__':    res = alc()    print(res.query(&quot;path&quot;))    print(res.query(&quot;verbose.value&quot;))    print(res.query(&quot;f.flag&quot;))    print(res.query(&quot;sub&quot;))``````shell$ python component.py /home/arclet -vvvv -f1 -f2 -f3 sub bar/home/arclet4['1', '2', '3'](value=Ellipsis args={} options={'bar': (value=True args={})} subcommands={})```Example of Command Shortcut:```python# shortcut.pyfrom arclet.alconna import Alconna, Argsalc = Alconna(&quot;eval&quot;, Args[&quot;content&quot;, str])alc.shortcut(&quot;echo&quot;, {&quot;command&quot;: &quot;eval print(\\'{*}\\')&quot;})@alc.bind()def cb(content: str):    eval(content, {}, {})if __name__ == '__main__':    alc()``````shell$ python shortcut.py eval print(\&quot;hello world\&quot;)hello world$ python shortcut.py echo hello world!hello world!```Example of Command Completion:```python# completion.pyfrom arclet.alconna import Alconna, Args, Optionalc = Alconna(&quot;complete&quot;, Args[&quot;bar&quot;, int]) + Option(&quot;foo&quot;) + Option(&quot;fool&quot;)if __name__ == &quot;__main__&quot;:    alc()``````shell$ python completion.py ?suggest input follows:* bar: int* --help* -h* foo* fool```Example of `typing` Support:```pythonfrom typing import Annotated  # or typing_extensions.Annotatedfrom arclet.alconna import Alconna, Argsalc = Alconna(&quot;test&quot;, Args.foo[Annotated[int, lambda x: x % 2 == 0]])alc.parse(&quot;test 2&quot;)alc.parse(&quot;test 3&quot;)''''foo': 2ParamsUnmatched: param 3 is incorrect'''```Example of FuzzyMatch:```python# fuzzy.pyfrom arclet.alconna import Alconna, CommandMeta, Argalc = Alconna('!test_fuzzy', Arg(&quot;foo&quot;, str), meta=CommandMeta(fuzzy_match=True))if __name__ == &quot;__main__&quot;:    alc()``````shell$ python fuzzy.py /test_fuzzy foo bar/test_fuzy not matched. Are you mean &quot;!test_fuzzy&quot;?```## LicenseAlconna is licensed under the [MIT License](LICENSE).[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FArcletProject%2FAlconna.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2FArcletProject%2FAlconna?ref=badge_large)## Acknowledgement[JetBrains](https://www.jetbrains.com/): Support Authorize for [PyCharm](https://www.jetbrains.com/pycharm/)&lt;br&gt;[&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Kyomotoi/CDN@master/noting/jetbrains-variant-3.png&quot; width=&quot;200&quot;/&gt;](https://www.jetbrains.com/)</longdescription>
</pkgmetadata>