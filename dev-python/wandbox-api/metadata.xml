<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Wandbox API for Python[![PyPI version](https://badge.fury.io/py/wandbox-api.svg)](https://badge.fury.io/py/wandbox-api)[![Python Versions](https://img.shields.io/pypi/pyversions/wandbox_api.svg)](https://pypi.org/project/wandbox-api/)[![Codacy Badge](https://app.codacy.com/project/badge/Grade/de16baa804f74dbe903201df65965118)](https://www.codacy.com/gh/srz-zumix/wandbox-api/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=srz-zumix/wandbox-api&amp;amp;utm_campaign=Badge_Grade)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/srz-zumix/wandbox-api.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/srz-zumix/wandbox-api/context:python)[![GitHub Actions](https://github.com/srz-zumix/wandbox-api/actions/workflows/main.yml/badge.svg)](https://github.com/srz-zumix/wandbox-api/actions/workflows/main.yml)[Wandbox](http://wandbox.org/) is a social compilation service.  This project is a Pythonic binding to the Wandbox API, and CLI command.* related  * [wandbox-builder](https://github.com/melpon/wandbox-builder)  * [Wandbox Status](https://srz-zumix.github.io/wandbox-status/)  * [Wandbox News](https://github.com/srz-zumix/wandbox-news/)## Installation&gt; pip install wandbox-api## CLI[wandbox](#wandbox)### for Languages|                     |                     |                           |                           |                 ||:--------------------|:--------------------|:--------------------------|:--------------------------|:----------------|| [Bash](#Bash)       | [C](#C)             | [C#](#C-1)                | [C++](#C-2)               | [CPP](#CPP)     || [Crystal](#Crystal) | [D](#D)             | [Elixir](#Elixir)         | [Erlang](#Erlang)         | [Go](#Go)       || [Groovy](#Groovy)   | [Haskell](#Haskell) | [Java](#Java)             | [JavaScript](#JavaScript) | [Julia](#Julia) || [Lazy K](#Lazy-K)   | [Lisp](#Lisp)       | [Lua](#Lua)               | [Nim](#Nim)               | [OCaml](#OCaml) || [OpenSSL](#OpenSSL) | [Pascal](#Pascal)   | [Perl](#Perl)             | [PHP](#PHP)               | [Pony](#Pony)   || [Python](#Python)   | [R](#R)             | [Ruby](#Ruby)             | [Rust](#Rust)             | [Scala](#Scala) || [SQL](#SQL)         | [Swift](#Swift)     | [TypeScript](#TypeScript) | [Vim script](#Vim-script) | [Zig](#Zig)     |### wandbox```shusage: wandbox [-h] [-v] [-l LANGUAGE] [-c COMPILER] [-x OPTIONS] [-r RUNTIME_OPTIONS] [-n] [-s] [--encoding ENCODING]               [--no-default] [--stdin STDIN] [--retry-wait SECONDS] [--retry COUNT]               {list,compilers,versions,lang,option,permlink,run,template,run-template,user,help} ...positional arguments:  {list,compilers,versions,lang,option,permlink,run,help}    list                show list api response. see `list -h`    compilers           show support compilers. see `compilers -h`    versions            show support compilers. see `versions -h`    lang                show support languages. see `lang -h`    option              show compiler options. see `option -h`    version             show compiler version from version-command. see `version -h`    permlink            get permlink. see `permlink -h`    run                 build and run command. see `run +h`    template            get wandbox template code. see `template -h`    run-template        run wandbox template code. see `run-template +h`    user                get wandbox user info. see `user -h`    help                show subcommand help. see `help -h`optional arguments:  -h, --help            show this help message and exit  -v, --version         show program's version number and exit  -l LANGUAGE, --language LANGUAGE                        specify language  -c COMPILER, --compiler COMPILER                        specify compiler  -x OPTIONS, --options OPTIONS                        used options for a compiler  -r RUNTIME_OPTIONS, --runtime-options RUNTIME_OPTIONS                        runtime options  -n, --dryrun          dryrun  -V, --verbose         verbose log  -s, --save            generate permanent link.  --encoding ENCODING   set encoding  --no-head             ignore head compiler version (at auto setup)  --no-default          no set default options  --stdin STDIN         set stdin  --retry-wait SECONDS  wait time for retry when HTTPError occurs  --retry COUNT         number of retries when HTTPError occurs```----### BashSource files required for runtime are automatically added to the file list.* wandbox-bash#### Bash Example&gt; wandbox-bash run sample.sh[Bash Example](./samples/command/src/bash)----### CInclude files required for compilation are automatically added to the file list.* wandbox-cc    (wandbox -l C)* wandbox-gcc    (wandbox -l C -c gcc-*-c)* wandbox-clang    (wandbox -l C -c clang-*-c)#### C Example&gt; wandbox-gcc run sample.c test.c  &gt; CXX=&quot;wandbox-gcc run&quot; make[C Example](./samples/command/src/cc)----### C#* wandbox-cs    (wandbox -l C#)#### C# Example&gt; wandbox-cs run sample.cs test.cs[C# Example](./samples/command/src/csharp)----### C++Include files required for compilation are automatically added to the file list.* wandbox-cxx    (wandbox -l C++)* wandbox-g++    (wandbox -l C++ -c gcc-*)* wandbox-clang++    (wandbox -l C++ -c clang-*)```shusage: wandbox-cxx [-h] [-v] [-c COMPILER] [-x OPTIONS] [-r RUNTIME_OPTIONS] [-n] [-s] [--encoding ENCODING]                   [--no-default] [--stdin STDIN] [--retry-wait SECONDS] [--retry COUNT] [--std VERSION]                   [--boost VERSION] [--no-warning] [--optimize] [--cpp-pedantic PEDANTIC] [--cpp-verbose] [--sprout] [--msgpack]                   {list,compilers,versions,lang,option,permlink,run,template,run-template,user,help} ...positional arguments:  {list,compilers,versions,lang,option,permlink,run,help}    list                show list api response. see `list -h`    compilers           show support compilers. see `compilers -h`    versions            show support compilers. see `versions -h`    lang                show support languages. see `lang -h`    option              show compiler options. see `option -h`    version             show compiler version from version-command. see `version -h`    permlink            get permlink. see `permlink -h`    run                 build and run command. see `run +h`    template            get wandbox template code. see `template -h`    run-template        run wandbox template code. see `run-template +h`    user                get wandbox user info. see `user -h`    help                show subcommand help. see `help -h`optional arguments:  -h, --help            show this help message and exit  -v, --version         show program's version number and exit  -c COMPILER, --compiler COMPILER                        specify compiler  -x OPTIONS, --options OPTIONS                        used options for a compiler  -r RUNTIME_OPTIONS, --runtime-options RUNTIME_OPTIONS                        runtime options  -n, --dryrun          dryrun  -V, --verbose         verbose log  -s, --save            generate permanent link.  --encoding ENCODING   set encoding  --no-head             ignore head compiler version (at auto setup)  --no-default          no set default options  --stdin STDIN         set stdin  --retry-wait SECONDS  wait time for retry when HTTPError occurs  --retry COUNT         number of retries when HTTPError occurs  --std VERSION         set --std options  --boost VERSION       set boost options version X.XX or nothing  --no-warning          disable warning option  --optimize            use optimization  --cpp-pedantic PEDANTIC                        use cpp-pedantic  --cpp-verbose         use cpp-verbose  --sprout              use sprout  --msgpack             use msgpack```#### C++ Example&gt; wandbox-cxx -c gcc-head run main.cpp -DWANDBOX  &gt; CXX=&quot;wandbox-g++ run&quot; make[C++ Example](./samples/command/src/cxx)----### CPPInclude files required for compilation are automatically added to the file list.* wandbox-CPP    (wandbox -l CPP)* wandbox-gcc-PP    (wandbox -l CPP -c gcc-*-pp)* wandbox-clang-PP    (wandbox -l CPP -c clang-*-pp)#### CPP Example&gt; wandbox-clang-PP run -CC -nostdinc -E -P sample.cpp test.cpp[CPP Example](./samples/command/src/cpp)----### CrystalImport modules required for compilation are automatically added to the file list.* wandbox-crystal    (wandbox -l Crystal)#### Crystal Example&gt; wandbox-crystal run sample.cr[Crystal Example](./samples/command/src/crystal)----### D* wandbox-dmd    (wandbox -l D -c dmd-*)* wandbox-ldmd2    (wandbox -l D -c ldc-*)* wandbox-dub#### D Example&gt; wandbox-dmd run sample.d test2.d packages/test.d  &gt; wandbox-dub run[D Example](./samples/command/src/dmd)[Dub Example](./samples/command/src/dub)----### Elixir* wandbox-elixir    (wandbox -l Elixir)* wandbox-mix (Experimental)#### Elixir Example&gt; wandbox-elixir run sample.exs  &gt; wandbox-mix run test[Elixir Example](./samples/command/src/elixir)----### Erlang* wandbox-erlc    (wandbox -l Erlang)#### Erlang Example&gt; wandbox-erlc run prog.erl[Erlang Example](./samples/command/src/erlang)----### Go* wandbox-go    (wandbox -l Go)#### Go Example&gt; wandbox-go run sample.go[Go Example](./samples/command/src/go)----### Groovy* wandbox-groovy    (wandbox -l Groovy)#### Groovy Example&gt; wandbox-groovy run -cp . sample.groovy[Groovy Example](./samples/command/src/groovy)----### Haskell* wandbox-ghc    (wandbox -l Haskell)* wandbox-stackNote: wandbox-ghc/wandbox-stack add -dynamic compiler option. (output file size workarround.)#### Haskell Example&gt; wandbox-ghc run sample.hs  &gt; wandbox-stack run[Haskell Example](./samples/command/src/haskell)[Haskell Stack Example](./samples/command/src/haskell-stack)----### Java* wandbox-java    (wandbox -l Java)#### Java Example&gt; wandbox-java run sample.java test.java[Java Example](./samples/command/src/java)----### JavaScriptImport files/modules required for runtime are automatically added to the file list.* wandbox-js    (wandbox -l JavaScript)* wandbox-node    (wandbox -l JavaScript-c nodejs-*)* wandbox-spidermonkey    (wandbox -l JavaScript -c spidermonkey-*)#### JavaScript Example&gt; wandbox-node run --experimental-modules sample.js[JavaScript Example](./samples/command/src/js)----### Julia* wandbox-julia    (wandbox -l Julia)#### Julia Example&gt; wandbox-julia run sample.jl[Julia Example](./samples/command/src/julia)----### Lazy K* wandbox-lazyk    (wandbox -l &quot;Lazy K&quot;)#### Lazy K Example&gt; wandbox-lazyk run sample.lazy[Lazy K Example](./samples/command/src/lazyk)----### Lisp* wandbox-sbcl    (wandbox -l Lisp)* wandbox-clisp    (wandbox -l Lisp -c clisp-*)#### Lisp Example&gt; wandbox-sbcl run sample.lisp[Lisp Example](./samples/command/src/lisp)----### LuaImport files/modules required for compilation are automatically added to the file list.* wandbox-lua    (wandbox -l Lua)* wandbox-luajit    (wandbox -l Lua -c luajit-*)#### Lua Example&gt; wandbox-lua run sample.lua[Lua Example](./samples/command/src/lua)----### NimImport modules/.c required for compilation are automatically added to the file list.* wandbox-nim    (wandbox -l Nim)#### Nim Example&gt; wandbox-nim run sample.nim[Nim Example](./samples/command/src/nim)----### OCaml* wandbox-ocamlopt    (wandbox -l OCaml)* wandbox-ocaml    (wandbox -l OCaml)#### OCaml Example&gt; wandbox-ocamlopt run sample.ml[OCaml Example](./samples/command/src/ocaml)----### OpenSSLEven just having wandbox would be enough.* wandbox-ssl#### OpenSSL Example&gt; wandbox-ssl genrsa -out test.key 2048  &gt; wandbox-ssl rsa -in test.key -pubout -out test.key.pub[OpenSSL Example](./samples/command/src/openssl)----### PascalInclude files required for runtime are automatically added to the file list.* wandbox-fpc    (wandbox -l Pascal)#### Pascal Example&gt; wandbox-fpc run sample.pas[Pascal Example](./samples/command/src/pascal)----### PerlRequire files/modules required for runtime are automatically added to the file list.* wandbox-perl    (wandbox -l Perl)#### Perl Example&gt; wandbox-perl run sample.pl[Perl Example](./samples/command/src/perl)----### PHPRequire/Include files required for runtime are automatically added to the file list.* wandbox-php    (wandbox -l PHP)#### PHP Example&gt; wandbox-php run sample.php[PHP Example](./samples/command/src/php)----### PonyBuild directory files are automatically added to the file list.* wandbox-ponyc    (wandbox -l Pony)#### Pony Example&gt; wandbox-ponyc run ./sample ./sample2wandbox-ponyc builds ./sample and ./sample2, Then execute ./sample2[Pony Example](./samples/command/src/pony)----### PythonImport files/modules required for runtime are automatically added to the file list.* wandbox-python    (wandbox -l Python)* wandbox-python2    (wandbox -l Python -c cpython-2.7-*)* wandbox-python3    (wandbox -l Python -c cpython-*)* wandbox-pypy    (wandbox -l Python -c pypy-*)* wandbox-pypy2    (wandbox -l Python -c pypy-2*)* wandbox-pypy3    (wandbox -l Python -c pypy-3*)#### Python Example&gt; wandbox-python3 run sample.pywandbox-python supports setup.py&gt; wandbox-python -c cpython-head -r test run setup.pyIf you open a file, add the file&gt; wandbox-python -c cpython-head -r test run setup.py README.md[Python Example](./samples/command/src/python)----### RSource files are automatically added to the file list.* wandbox-rscript    (wandbox -l R)#### R Example&gt; wandbox-rscript run sample.R[R Example](./samples/command/src/r)----### RubyRequire files required for runtime are automatically added to the file list.* wandbox-ruby    (wandbox -l Ruby)* wandbox-mruby    (wandbox -l Ruby -c mruby-*)#### Ruby Example&gt; wandbox-ruby run sample.rb[Ruby Example](./samples/command/src/ruby)----### RustModule files required for runtime are automatically added to the file list.* wandbox-rustc    (wandbox -l Rust)* wandbox-cargo#### Rust Example&gt; wandbox-rustc run sample.rs  &gt; wandbox-cargo run[Rust Example](./samples/command/src/rust)----### Scala* wandbox-scalac    (wandbox -l Scala)#### Scala Example&gt; wandbox-scalac run *.scala[Scala Example](./samples/command/src/scala)----### SQL* wandbox-sqlite    (wandbox -l SQL)* wandbox-sqlite3    (wandbox -l SQL)#### SQL Example&gt; wandbox-sqlite3 run SELECT 'Hello, Wandbox!';[SQL Example](./samples/command/src/sql)----### Swift* wandbox-swift    (wandbox -l Swift)#### Swift Example&gt; wandbox-swift run main.swift[Swift Example](./samples/command/src/swift)----### TypeScriptImport files/modules required for compilation are automatically added to the file list.* wandbox-tsc    (wandbox -l TypeScript)#### TypeScript Example&gt; wandbox-tsc run --module es2015 sample.ts[TypeScript Example](./samples/command/src/ts)----### Vim script* wandbox-vim    (wandbox -l &quot;Vim script&quot;)#### Vim script Example&gt; wandbox-vim run -X -N -u NONE -i NONE -V1 -e -s -S sample.vim +qall![Vim script Example](./samples/command/src/vim)----### ZigImport files required for compilation are automatically added to the file list.* wandbox-zig    (wandbox -l Zig)#### Zig Example&gt; wandbox-zig run main.zig[Zig Example](./samples/command/src/zig)----## CONTRIBUTING[CONTRIBUTING](./CONTRIBUTING.md)</longdescription>
</pkgmetadata>