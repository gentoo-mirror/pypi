<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyPDFOCR - Tesseract-OCR based PDF filing=========================================|image0| |image1| |image2| |passing| |quality| |Coverage Status|This program will help manage your scanned PDFs by doing the following:-  Take a scanned PDF file and run OCR on it (using the Tesseract OCR   software from Google), generating a searchable PDF-  Optionally, watch a folder for incoming scanned PDFs and   automatically run OCR on them-  Optionally, file the scanned PDFs into directories based on simple   keyword matching that you specify-  Evernote auto-upload and filing based on keyword search-  Email status when it files your PDFMore links:-  `Blog @ virantha.com &lt;http://virantha.com/category/pypdfocr.html&gt;`__-  `Documentation @ gitpages &lt;http://virantha.github.com/pypdfocr/html&gt;`__-  `Source @ github &lt;https://www.github.com/virantha/pypdfocr&gt;`__Usage:######Single conversion:~~~~~~~~~~~~~~~~~~::    pypdfocr filename.pdf    --&gt; filename_ocr.pdf will be generatedIf you have a language pack installed, then you can specify it with the``-l`` option:::    pypdfocr -l spa filename.pdfFolder monitoring:~~~~~~~~~~~~~~~~~~::    pypdfocr -w watch_directory    --&gt; Every time a pdf file is added to `watch_directory` it will be OCR'edAutomatic filing:~~~~~~~~~~~~~~~~~To automatically move the OCR'ed pdf to a directory based on a keyword,use the -f option and specify a configuration file (described below):::    pypdfocr filename.pdf -f -c config.yamlYou can also do this in folder monitoring mode:::    pypdfocr -w watch_directory -f -c config.yamlFiling based on filename match:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If no keywords match the contents of the filename, you can optionallyallow it to fallback to trying to find keyword matches with the PDFfilename using the -n option. For example, you may have receipts alwaysnamed as ``receipt_2013_12_2.pdf`` by your scanner, and you want to movethis to a folder called 'receipts'. Assuming you have a keyword``receipt`` matching to folder ``receipts`` in your configuration fileas described below, you can run the following and have this filed evenif the content of the pdf does not contain the text 'receipt':::    pypdfocr filename.pdf -f -c config.yaml -nConfiguration file for automatic PDF filing^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The config.yaml file above is a simple folder to keyword matching textfile. It determines where your OCR'ed PDFs (and optionally, the originalscanned PDF) are placed after processing. An example is given below:::    target_folder: &quot;docs/filed&quot;    default_folder: &quot;docs/filed/manual_sort&quot;    original_move_folder: &quot;docs/originals&quot;    folders:        finances:            - american express            - chase card            - internal revenue service        travel:            - boarding pass            - airlines            - expedia            - orbitz        receipts:            - receiptThe ``target_folder`` is the root of your filing cabinet. Any PDF movingwill happen in sub-directories under this directory.The ``folders`` section defines your filing directories and the keywordsassociated with them. In this example, we have three filing directories(finances, travl, receipts), and some associated keywords for eachfiling directory. For example, if your OCR'ed PDF contains the phrase&quot;american express&quot; (in any upper/lower case), it will be filed into``docs/filed/finances``The ``default_folder`` is where the OCR'ed PDF is moved to if there isno keyword match.The ``original_move_folder`` is optional (you can comment it out with``#`` in front of that line), but if specified, the original scanned PDFis moved into this directory after OCR is done. Otherwise, if this fieldis not present or commented out, your original PDF will stay where itwas found.If there is any naming conflict during filing, the program will add anunderscore followed by a number to each filename, in order to avoidoverwriting files that may already be present.Evernote upload:~~~~~~~~~~~~~~~~Evernote authentication token^^^^^^^^^^^^^^^^^^^^^^^^^^^^^To enable Evernote support, you will need to `get a developer token foryour Evernoteaccount. &lt;https://www.evernote.com/api/DeveloperToken.action&gt;`__. Youshould note that this script will never delete or modify existing notesin your account, and limits itself to creating new Notebooks and Notes.Once you get that token, you copy and paste it into your configurationfile as shown belowEvernote filing usage^^^^^^^^^^^^^^^^^^^^^To automatically upload the OCR'ed pdf to a folder based on a keyword,use the ``-e`` option instead of the ``-f`` auto filing option.::    pypdfocr filename.pdf -e -c config.yamlSimilarly, you can also do this in folder monitoring mode:::    pypdfocr -w watch_directory -e -c config.yamlEvernote filing configuration file^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The config file shown above only needs to change slightly. The folderssection is completely unchanged, but note that ``target_folder`` is thename of your &quot;Notebook stack&quot; in Evernote, and the ``default_folder``should just be the default Evernote upload notebook name.::    target_folder: &quot;evernote_stack&quot;    default_folder: &quot;default&quot;    original_move_folder: &quot;docs/originals&quot;    evernote_developer_token: &quot;YOUR_TOKEN&quot;    folders:        finances:            - american express            - chase card            - internal revenue service        travel:            - boarding pass            - airlines            - expedia            - orbitz        receipts:            - receiptAuto email~~~~~~~~~~You can have PyPDFOCR email you everytime it converts a file and filesit. You need to first specify the following lines in the configurationfile and then use the ``-m`` option when invoking ``pypdfocr``:::    mail_smtp_server: &quot;smtp.gmail.com:587&quot;    mail_smtp_login: &quot;virantha@gmail.com&quot;    mail_smtp_password: &quot;PASSWORD&quot;    mail_from_addr: &quot;virantha@gmail.com&quot;    mail_to_list:         - &quot;virantha@gmail.com&quot;        - &quot;person2@gmail.com&quot;Advanced options################Fine-tuning Tesseract/Ghostscript/others~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can specify Tesseract and Ghostscript executable locations manually, aswell as the number of concurrent processes allowed during preprocessing andtesseract.  Use the following in your configuration file:::    tesseract:        binary: &quot;/usr/bin/tesseract&quot;        threads: 8    ghostscript:        binary: &quot;/usr/local/bin/gs&quot;    preprocess:        threads: 8Handling disk time-outs~~~~~~~~~~~~~~~~~~~~~~~If you need to increase the time interval (default 3 seconds) between newdocument scans when pypdfocr is watching a directory, you can specify the followingoption in the configuration file:::        watch:        scan_interval: 6Installation############Using pip~~~~~~~~~PyPDFOCR is available in PyPI, so you can just run:::    pip install pypdfocrPlease note that some of the 3rd-party libraries required by PyPDFOCR wiillrequire some build tools, especially on a default Ubuntu system.  If you runinto any issues using pip install, you may want to install thefollowing packages on Ubuntu and try again:- gcc- libjpeg-dev- zlib-bin- zlib1g-dev- python-devFor those on **Windows**, because it's such a pain to get all the PILand PDF dependencies installed, I've gone ahead and made an executablecalled`pypdfocr.exe &lt;https://github.com/virantha/pypdfocr/blob/master/dist/pypdfocr.exe?raw=true&gt;`__You still need to install Tesseract, GhostScript, etc. as detailed below inthe external dependencies list.Manual install~~~~~~~~~~~~~~Clone the source directly from github (you need to have git installed):::    git clone https://github.com/virantha/pypdfocr.gitThen, install the following third-party python libraries:-  Pillow (Python Imaging Library) https://pillow.readthedocs.org/en/3.1.x/-  ReportLab (PDF generation library)   http://www.reportlab.com/opensource/-  Watchdog (Cross-platform fhlesystem events monitoring)   https://pypi.python.org/pypi/watchdog-  PyPDF2 (Pure python pdf library)These can all be installed via pip:::    pip install Pillow    pip install reportlab    pip install watchdog    pip install pypdf2You will also need to install the external dependencies listed below.External Dependencies~~~~~~~~~~~~~~~~~~~~~PyPDFOCR relies on the following (free) programs being installed and inthe path:-  Tesseract OCR software https://code.google.com/p/tesseract-ocr/-  GhostScript http://www.ghostscript.com/-  ImageMagick http://www.imagemagick.org/-  Poppler http://poppler.freedesktop.org/  (`Windows &lt;http://sourceforge.net/projects/poppler-win32/&gt;`__)Poppler is only required if you want pypdfocr to figure out the original PDF resolutionautomatically; just make sure you have ``pdfimages`` in your path.   Note that the `xpdf &lt;http://www.foolabs.com/xpdf/download.html&gt;`__ provided ``pdfimages`` does not work for this, because it does not support the ``-list`` option to list the table of images in a PDF file.On Mac OS X, you can install these using homebrew:::    brew install tesseract    brew install ghostscript    brew install poppler    brew install imagemagickOn Windows, please use the installers provided on their download pages.\*\* Important \*\* Tesseract version 3.02.02 or newer required(apparently 3.02.01-6 and possibly others do not work due to a hocroutput format change that I'm not planning to address). On Ubuntu, youmay need to compile and install it manually by following `theseinstructions &lt;http://miphol.com/muse/2013/05/install-tesseract-ocr-on-ubunt.html&gt;`__Also note that if you want Tesseract to recognize rotated documents (upside down, or rotated 90 degrees)then you need to find your tessdata directory and do the following:::    cd /usr/local/share/tessdata     cp eng.traineddata osd.traineddata ``osd`` stands for Orientation and Script Detection, so you need to copy the .traineddatafor whatever language you want to scan in as ``osd.traineddata``.  If you don't do this step, then any landscape document will produce garbageDisclaimer##########While test coverage is at 84% right now, Sphinx docs generation is at anearly stage. The software is distributed on an &quot;AS IS&quot; BASIS, WITHOUTWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied... |image0| image:: https://badge.fury.io/py/pypdfocr.png   :target: https://pypi.python.org/pypi/pypdfocr.. |image1| image:: https://pypip.in/d/pypdfocr/badge.png.. |image2| image:: https://pypip.in/license/pypdfocr/badge.png.. |passing| image:: https://scrutinizer-ci.com/g/virantha/pypdfocr/badges/build.png?b=master.. |quality| image:: https://scrutinizer-ci.com/g/virantha/pypdfocr/badges/quality-score.png?b=master.. |Coverage Status| image:: https://coveralls.io/repos/virantha/pypdfocr/badge.png?branch=develop   :target: https://coveralls.io/r/virantha/pypdfocr=======  ========   ======Version  Date       Changes-------  --------   ------v0.9.1   10/11/16   Fixes (#43, #41)v0.9.0   2/29/16    Fixed rotated page text, Mac OS X invisible fonts, and pdf merge slowdownv0.8.5   2/21/16    Better ctrl-c and cleanup behaviorv0.8.4   2/18/16    Maintenance releasev0.8.3   2/18/16    Bug fix for multiprocessing on windows, ctrl-c interrupt, and integer keywordsv0.8.2   12/8/14    Fixed imagemagick invocation on windows.  Parallelized preprocessing and tesseract executionv0.8.1   12/5/14    Added --skip-preprocess option, scan_interval option, and fixed too many open files bug during page overlayv0.8.0   10/27/14   Added preprocessing to clean up prior to tesseract, bug fixes on file names with spaces/dotsv0.7.6   9/10/14    Fixed issue 17 rotation bugv0.7.5   8/18/14    Update for Tesseract 3.03 .hocr filename changev0.7.4   3/28/14    Bug fix on pdf assemblyv0.7.3   3/27/14    Modified internals to use single image per page (instead of multipage tiff). Also enabled orientation detectionv0.7.2   3/26/14    Switched from Pil to Pillow. Now uses original images from PDF in output pdf (no dpi/color/quality changes!)v0.7.1   3/25/14    OCR Language is now an optionv0.7.0   3/25/14    Now honors original pdf resolutionv0.6.1   2/16/14    Bug fix for pdfs with only numbers in the filenamev0.6.0   1/16/14    Added filing based on filename match as fallback, added tesseract version checkv0.5.4   1/12/14    Fixed bug with reordering of text pages on certain platforms(glob)v0.5.3   12/12/13   Fix to evernote server specificationv0.5.2   12/08/13   Fix to lowercase keywordsv0.5.1   11/02/13   Fixed a bunch of windows critical path handling issuesv0.5.0   10/30/13   Email status added, 90% test coveragev0.4.1   10/28/13   Made HOCR parsing more robustv0.4.0   10/28/13   Added early Evernote upload supportv0.3.1   10/24/13   Path fix on windowsv0.3.0   10/23/13   Added filing of converted pdfs using a configuration file to specify target directories based on keyword matches in the pdf textv0.2.2   10/22/13   Added a console script to put the pypdfocr script into your binv0.2.1   10/22/13   Fix to initial packaging problem.v0.2.0   10/21/13   Initial release.=======  ========   ======Todo list=========- #43 version check for tesseract- On windows, search for pdfimages and imagemagick instead of relying on path- Split up into flow steps  - Run more robustness tests for watching networked shares- Add more docstrings- Add more option specifiers to tesseract and ghostscript</longdescription>
</pkgmetadata>