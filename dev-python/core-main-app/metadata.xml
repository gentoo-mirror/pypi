<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============Core Main App=============This Django reusable app contains the main functionalities for the curatorcore project.Pre-requisites==============For automated and manual install, the following software are needed:* ``python``* ``pip``* virtual env (``conda`` or ``venv``)In addition, for manual setup, ``git`` is needed.Installation============Automated installation----------------------.. code:: bash  $ pip install core_main_appManual installation-------------------.. code:: bash    $ git clone https://github.com/usnistgov/core_main_app.git    $ cd core_main_app    $ python setup.py    $ pip install sdist/*.tar.gzConfiguration=============Edit the setting.py file------------------------Add the ``&quot;core_main_app&quot;`` and ``&quot;tz_detect&quot;`` under ``INSTALLED_APPS`` assuch:.. code:: python    INSTALLED_APPS = [        ...        &quot;tz_detect&quot;,        &quot;core_main_app&quot;,    ]Add the middleware required by ``tz_detect``:.. code:: python    MIDDLEWARE = (        ...        'tz_detect.middleware.TimezoneMiddleware',    )Edit the urls.py file---------------------Add the ``core_main_app`` urls to the Django project as such... code:: python    url(r'^', include(&quot;core_main_app.urls&quot;)),Internationalization (i18n)---------------------------Before running the project, don't forget to compile the translation file atproject level. i18n uses the ``gettext`` package, so please make sure it isinstalled prior to using this command... code:: bash    $ python manage.py compilemessagesEnable SSL connection---------------------Please follow these steps to configure the connection to any system running over HTTPS (including the local instance).* Create a folder for SSL certificates,* Copy the certificate in the folder,* Run ``c_rehash`` on the folder (needs to be done every time a new certificate is added to the folder),* Update the SSL_CERTIFICATES_DIR setting to point to the SSL certificate folder previously created... code:: bash  $ mkdir certs  $ cp cdcs.crt certs/  $ c_rehash certs/Enable Redis Server authentication----------------------------------Please follow these steps to enable authentication on the redis server.Depending on the way Redis is started on the machine, the method may differ.You can follow instructions at https://redis.io/topics/security#authentication-feature to enable authentication:* Open the file redis.conf (e.g. /usr/local/etc/redis.conf),* Uncomment the authentication setting (# requirepass foobared),* It is recommended to replace the default password (foobared) by a strong and long password,* Restart the Redis Server.You should then update the CDCS settings using a Redis connection URL with the password chosen in the previous steps... code:: python  BROKER_URL = 'redis://:&lt;password&gt;@localhost:6379/0'  CELERY_RESULT_BACKEND = 'redis://:&lt;password&gt;@localhost:6379/0'Enable SMTP server------------------Please follow these steps to configure the SMTP server:* Set these constants in your setting.py file (all these constants are required).. code:: py  EMAIL_HOST = 'smtp.myserver.com'  EMAIL_PORT = 587  DEFAULT_FROM_EMAIL = 'TestSite Team &lt;noreply@example.com&gt;'* These optional constants can be added in your setting.py according to your SMTP server configuration.. code:: py  EMAIL_USE_TLS = True  EMAIL_HOST_USER = 'testsite_app'  EMAIL_HOST_PASSWORD = 'mys3cr3tp4ssw0rd'Enable History--------------Django Simple History allows keeping track of changes made to an object stored in the CDCS database.First, install and configure the package. See the`django-simple-history &lt;https://django-simple-history.readthedocs.io/en/latest/quick_start.html&gt;`_ documentation.Then, set the `DJANGO_SIMPLE_HISTORY_MODELS` setting with a list of models to track.At the moment, this feature is only available for the `Data` model... code:: python  DJANGO_SIMPLE_HISTORY_MODELS=[&quot;Data&quot;]Register models to track by updating project files.For example in ``mdcs/mdcs_home/admin.py``, add the following lines:.. code:: python  from core_main_app.utils.admin_site.model_admin_class import register_simple_history_models  from django.conf import settings  DJANGO_SIMPLE_HISTORY_MODELS = getattr(settings, &quot;DJANGO_SIMPLE_HISTORY_MODELS&quot;, None)  register_simple_history_models(DJANGO_SIMPLE_HISTORY_MODELS)Documentation=============Documentation has been generated using Sphinx. To generate a local version ofthe docs, please clone the repository and run:.. code:: bash  $ cd docs/  $ make htmlOr, directly using Sphinx:.. code:: bash  $ cd docs/  $ sphinx-build -b html . ../dist/_docsDevelopment===========Development version-------------------A development version of this package is available, containing tests and formattingdependencies. To automatically install the development version, run:.. code:: bash  $ pip install .[develop]The development dependencies are located in ``requirements.dev.txt`` and can be installedmanually using:.. code:: bash  $ pip install -r requirements.dev.txtCode formatting---------------To ensure consistent formatting across the codebase, the development team is using`black &lt;https://github.com/psf/black&gt;`_. When contributing to this package, install blackas part of the development packages and run ``black /path/to/core_main_app`` beforesubmitting the contribution.Tests-----To play the test suite created for this package, download the git repository, install thedevelopment dependencies and run:.. code:: bash  $ python runtests.pySending email-------------To test the email being sent, console backend will print the email instead of sending the real email.By default, the console backend writes to stdoutTo specify this backend, add the following in your settings:.. code:: python  EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'</longdescription>
</pkgmetadata>