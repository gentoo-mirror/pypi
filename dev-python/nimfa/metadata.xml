<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Nimfa-----[![build: passing](https://img.shields.io/travis/marinkaz/nimfa.svg)](https://travis-ci.org/marinkaz/nimfa)[![build: passing](https://coveralls.io/repos/marinkaz/nimfa/badge.svg)](https://coveralls.io/github/marinkaz/nimfa?branch=master)[![GitHub release](https://img.shields.io/github/release/marinkaz/nimfa.svg)](https://GitHub.com/marinkaz/nimfa/releases/)[![BSD license](https://img.shields.io/badge/License-BSD-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)Nimfa is a Python module that implements many algorithms for nonnegative matrix factorization. Nimfa is distributed under the BSD license.The project was started in 2011 by Marinka Zitnik as a Google Summer of Code project, and sincethen many volunteers have contributed. See AUTHORS file for a complete list of contributors.It is currently maintained by a team of volunteers.Important links---------------- Official source code repo: https://github.com/marinkaz/nimfa- HTML documentation (stable release): http://ai.stanford.edu/~marinka/nimfa- Download releases: http://github.com/marinkaz/nimfa/releases- Issue tracker: http://github.com/marinkaz/nimfa/issuesDependencies------------Nimfa is tested to work under Python 2.7 and Python 3.4.The required dependencies to build the software are NumPy &gt;= 1.7.0,SciPy &gt;= 0.12.0.For running the examples Matplotlib &gt;= 1.1.1 is required.Install-------This package uses setuptools, which is a common way of installingpython modules. To install in your home directory, use:    python setup.py install --userTo install for all users on Unix/Linux:    sudo python setup.py installFor more detailed installation instructions,see the web page http://ai.stanford.edu/~marinka/nimfaUse---Run alternating least squares nonnegative matrix factorization with projected gradients and Random Vcol initialization algorithm on medulloblastoma gene expression data::    &gt;&gt;&gt; import nimfa    &gt;&gt;&gt; V = nimfa.examples.medulloblastoma.read(normalize=True)    &gt;&gt;&gt; lsnmf = nimfa.Lsnmf(V, seed='random_vcol', rank=50, max_iter=100)    &gt;&gt;&gt; lsnmf_fit = lsnmf()    &gt;&gt;&gt; print('Rss: %5.4f' % lsnmf_fit.fit.rss())    Rss: 0.2668    &gt;&gt;&gt; print('Evar: %5.4f' % lsnmf_fit.fit.evar())    Evar: 0.9997    &gt;&gt;&gt; print('K-L divergence: %5.4f' % lsnmf_fit.distance(metric='kl'))    K-L divergence: 38.8744    &gt;&gt;&gt; print('Sparseness, W: %5.4f, H: %5.4f' % lsnmf_fit.fit.sparseness())    Sparseness, W: 0.7297, H: 0.8796Cite----    @article{Zitnik2012,      title     = {Nimfa: A Python Library for Nonnegative Matrix Factorization},      author    = {Zitnik, Marinka and Zupan, Blaz},      journal   = {Journal of Machine Learning Research},      volume    = {13},      pages     = {849-853},      year      = {2012}    }</longdescription>
</pkgmetadata>