<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**Daktari** is a tool to help the initial setup and ongoing maintenance of developer environments. It runs a series of checks (for example, that required software is installed) and provides suggestions on how to fix the issue if the check fails.## ConfigurationIn the root of the project repository, create a `.daktari.py` configuration file listing the checks you want run. For example,```pythonfrom daktari.checks.git import *version = &quot;0.0.90&quot;title = &quot;My Project&quot;checks = [    GitInstalled(),    GitLfsInstalled(),    GitLfsSetUpForUser(),    GitLfsFilesDownloaded(),    GitCryptInstalled(),]```Then run `daktari` to diagnose your environment:```$ daktari✅ [git.installed] Git is installed✅ [git.lfs.installed] Git LFS is installed✅ [git.lfs.setUpForUser] Git LFS is set up for the current user✅ [git.lfs.filesDownloaded] Git LFS files have been downloaded❌ [git.crypt.installed] git-crypt is not installed┌─💡 Suggestion ─────────┐│ brew install git-crypt │└────────────────────────┘```## Custom CheckYou can write a custom check as a Python class within `.daktari.py`, and include it in your list of checks. Example of a check implementation:```pythonclass GitCryptInstalled(Check):    name = &quot;git.crypt.installed&quot;    depends_on = [GitInstalled]    suggestions = {        OS.OS_X: &quot;&lt;cmd&gt;brew install git-crypt&lt;/cmd&gt;&quot;,        OS.UBUNTU: &quot;&lt;cmd&gt;sudo apt install git-crypt&lt;/cmd&gt;&quot;,        OS.GENERIC: &quot;Install git-crypt (https://www.agwa.name/projects/git-crypt/)&quot;,    }    def check(self):        return self.verify(can_run_command(&quot;git crypt version&quot;), &quot;git-crypt is &lt;not/&gt; installed&quot;)```## Testing Daktari changes locallyHaving cloned the repo into `~/daktari`, you can make use of PYTHONPATH to run daktari using your local changes.To do this, navigate into a directory that has a `.daktari.py` (e.g. another repository intending to use your change) and run:```bashPYTHONPATH=~/daktari python3 -m daktari --debug```## Release instructionsDaktari is continuously deployed via a github action - see [release.yaml](.github/workflows/release.yaml). In case of a need to manually release, the steps are:```bumpversion --verbose patchpython setup.py sdist bdist_wheeltwine check dist/*twine upload dist/*```</longdescription>
</pkgmetadata>