<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h2 align=&quot;center&quot;&gt;  SQLModelX&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;SQLModelX is an extension of the SQLModel library.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/amisadmin/sqlmodelx/actions/workflows/pytest.yml&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://github.com/amisadmin/sqlmodelx/actions/workflows/pytest.yml/badge.svg&quot; alt=&quot;Pytest&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/sqlmodelx&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://badgen.net/pypi/v/sqlmodelx?color=blue&quot; alt=&quot;Package version&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://gitter.im/amisadmin/fastapi-amis-admin&quot;&gt;        &lt;img src=&quot;https://badges.gitter.im/amisadmin/fastapi-amis-admin.svg&quot; alt=&quot;Chat on Gitter&quot;/&gt;    &lt;/a&gt;    &lt;a href=&quot;https://jq.qq.com/?_wv=1027&amp;k=U4Dv6x8W&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://badgen.net/badge/qq%E7%BE%A4/229036692/orange&quot; alt=&quot;229036692&quot;&gt;    &lt;/a&gt;&lt;/p&gt;## Install```bashpip install sqlmodelx```## Usage```pythonfrom datetime import datetimefrom typing import Listfrom sqlmodel import Field, Relationship, Session, selectfrom sqlmodelx import SQLModelfrom sqlmodelx.main import SQLModelMetaclassclass PkMixin(SQLModel):    id: int = Field(default = None, primary_key = True, nullable = False)class BaseUser(PkMixin):    username: str = Field(default = '', nullable = False)    password: str = Field(default = '', nullable = False)    create_time: datetime = Field(default_factory = datetime.now, nullable = False)    group_id: int = Field(default = None, nullable = True, foreign_key = 'group.id')class User(BaseUser, table = True):    __tablename__ = 'user'    group: 'Group' = Relationship(back_populates = 'users')class Group(SQLModel, table = True):    id: int = Field(default = None, primary_key = True, nullable = False)    name: str = Field(default = '', nullable = False)    create_time: datetime = Field(default_factory = datetime.now, nullable = False)    users: List[User] = Relationship(        back_populates = 'group',        sa_relationship_kwargs = {&quot;enable_typechecks&quot;: False}    )def test_class_and_metaclass(engine):    &quot;&quot;&quot;Test class and metaclass&quot;&quot;&quot;    from sqlmodel import SQLModel as _SQLModel    from sqlmodel.main import SQLModelMetaclass as _SQLModelMetaclass    assert isinstance(User, SQLModelMetaclass)    assert isinstance(User, _SQLModelMetaclass)    assert issubclass(User, SQLModel)    assert issubclass(User, _SQLModel)def test_base_is_table_and_subclass_is_table(engine):    &quot;&quot;&quot;Test base class and subclass are both ORM database tables&quot;&quot;&quot;    # Extend the user ORM model to add a field    class NickNameUser(User, table = True):        nickname: str = Field(default = '')    # Extend the user ORM model to add a field    class AvatarUser(NickNameUser, table = True):        avatar: str = Field(default = '')    # Create the database tables    SQLModel.metadata.drop_all(engine)    SQLModel.metadata.create_all(engine)    avatar_user = AvatarUser(        username = &quot;Deadpond&quot;,        password = &quot;Dive Wilson&quot;,        nickname = 'nickname',        avatar = 'avatar',        group = Group(name = 'admin'),    )    with Session(engine) as session:        session.add(avatar_user)        session.commit()        session.refresh(avatar_user)        assert avatar_user.id is not None        # The relationship property of the base class will also be inherited        assert avatar_user.group.id is not None        nickname_user = session.query(NickNameUser).first()        assert nickname_user.nickname == avatar_user.nickname        # The relationship property of the base class will also be inherited        assert nickname_user.group.id == avatar_user.group.id        user = session.exec(select(User)).first()        assert user.username == avatar_user.username        assert user.group.id == avatar_user.group.iddef test_base_is_table_and_subclass_is_not_table(engine):    &quot;&quot;&quot;Test base class is an ORM database table, the subclass is not&quot;&quot;&quot;    # Create a pydantic model quickly through inheritance    class NickNameUserSchema(User, table = False):        nickname: str = Field(default = '')    user = User(        username = &quot;Deadpond&quot;,        password = &quot;Dive Wilson&quot;,        group = Group(name = 'admin')    )    with Session(engine) as session:        session.add(user)        session.commit()        session.refresh(user)        assert user.id is not None        assert user.group.id is not None        user_ex = NickNameUserSchema.from_orm(user, update = {'nickname': 'nickname'})        assert user_ex.id == user.id        assert user_ex.nickname == 'nickname'        assert user_ex.group is None```## LicenseAccording to the `Apache2.0` protocol.</longdescription>
</pkgmetadata>