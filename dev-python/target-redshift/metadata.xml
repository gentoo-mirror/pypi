<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Target Redshift[![CircleCI](https://circleci.com/gh/datamill-co/target-redshift.svg?style=svg)](https://circleci.com/gh/datamill-co/target-redshift)[![PyPI version](https://badge.fury.io/py/target-redshift.svg)](https://pypi.org/project/target-redshift/)[![](https://img.shields.io/librariesio/github/datamill-co/target-redshift.svg)](https://libraries.io/github/datamill-co/target-redshift)A [Singer](https://singer.io/) redshift target, for use with Singer streams generated by Singer taps.## Features- Creates SQL tables for [Singer](https://singer.io) streams- Denests objects flattening them into the parent object's table- Denests rows into separate tables- Adds columns and sub-tables as new fields are added to the stream [JSON Schema](https://json-schema.org/)- Full stream replication via record `version` and `ACTIVATE_VERSION` messages.## Install```shpip install target-redshift```## Usage1. Follow the   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)   for setting up separate `tap` and `target` virtualenvs to avoid version   conflicts.1. Create a [config file](#configjson) at   `~/singer.io/target_redshift_config.json` with redshift connection   information and target redshift schema.   ```json   {     &quot;redshift_host&quot;: &quot;aws.something.or.other&quot;,     &quot;redshift_port&quot;: 5439,     &quot;redshift_database&quot;: &quot;my_analytics&quot;,     &quot;redshift_username&quot;: &quot;myuser&quot;,     &quot;redshift_password&quot;: &quot;1234&quot;,     &quot;redshift_schema&quot;: &quot;mytapname&quot;,     &quot;default_column_length&quot;: 1000,     &quot;target_s3&quot;: {       &quot;aws_access_key_id&quot;: &quot;AKIA...&quot;,       &quot;aws_secret_access_key&quot;: &quot;supersecret&quot;,       &quot;bucket&quot;: &quot;target_redshift_staging&quot;,       &quot;key_prefix&quot;: &quot;__tmp&quot;     }   }   ```1. Run `target-redshift` against a [Singer](https://singer.io) tap.   ```bash   ~/.virtualenvs/tap-something/bin/tap-something \     | ~/.virtualenvs/target-redshift/bin/target-redshift \       --config ~/singer.io/target_redshift_config.json   ```### Config.jsonThe fields available to be specified in the config file are specifiedhere.| Field                       | Type                  | Default    | Details                                                                                                                                                                                                                          || --------------------------- | --------------------- | ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || `redshift_host`             | `[&quot;string&quot;]`          | `N/A`      |                                                                                                                                                                                                                                  || `redshift_port`             | `[&quot;integer&quot;, &quot;null&quot;]` | `5432`     |                                                                                                                                                                                                                                  || `redshift_database`         | `[&quot;string&quot;]`          | `N/A`      |                                                                                                                                                                                                                                  || `redshift_username`         | `[&quot;string&quot;]`          | `N/A`      |                                                                                                                                                                                                                                  || `redshift_password`         | `[&quot;string&quot;]`          | `N/A`      |                                                                                                                                                                                                                                  || `redshift_schema`           | `[&quot;string&quot;, &quot;null&quot;]`  | `&quot;public&quot;` |                                                                                                                                                                                                                                  || `invalid_records_detect`    | `[&quot;boolean&quot;, &quot;null&quot;]` | `true`     | Include `false` in your config to disable `target-redshift` from crashing on invalid records                                                                                                                                     || `invalid_records_threshold` | `[&quot;integer&quot;, &quot;null&quot;]` | `0`        | Include a positive value `n` in your config to allow for `target-redshift` to encounter at most `n` invalid records per stream before giving up.                                                                                 || `disable_collection`        | `[&quot;string&quot;, &quot;null&quot;]`  | `false`    | Include `true` in your config to disable [Singer Usage Logging](#usage-logging).                                                                                                                                                 || `logging_level`             | `[&quot;string&quot;, &quot;null&quot;]`  | `&quot;INFO&quot;`   | The level for logging. Set to `DEBUG` to get things like queries executed, timing of those queries, etc. See [Python's Logger Levels](https://docs.python.org/3/library/logging.html#levels) for information about valid values. || `max_batch_rows`            | `[&quot;integer&quot;, &quot;null&quot;]` | `200000`                         | The maximum number of rows to buffer in memory before writing to the destination table in Redshift| `max_buffer_size`           | `[&quot;integer&quot;, &quot;null&quot;]` | `104857600` (100MB in bytes)     | The maximum number of bytes to buffer in memory before writing to the destination table in Redshift| `batch_detection_threshold` | `[&quot;integer&quot;, &quot;null&quot;]` | `5000`, or 1/40th `max_batch_rows` | How often, in rows received, to count the buffered rows and bytes to check if a flush is necessary. There's a slight performance penalty to checking the buffered records count or bytesize, so this controls how often this is polled in order to mitigate the penalty. This value is usually not necessary to set as the default is dynamically adjusted to check reasonably often.| `persist_empty_tables`      | `[&quot;boolean&quot;, &quot;null&quot;]` | `False`    | Whether the Target should create tables which have no records present in Remote.                                                                                                                                                 || `default_column_length`     | `[&quot;integer&quot;, &quot;null&quot;]` | `1000`     | All columns with the VARCHAR(CHARACTER VARYING) type will be have this length.Range: 1-65535.                                                                                                                                    || `state_support`             | `[&quot;boolean&quot;, &quot;null&quot;]` | `True`                           | Whether the Target should emit `STATE` messages to stdout for further consumption. In this mode, which is on by default, STATE messages are buffered in memory until all the records that occurred before them are flushed according to the batch flushing schedule the target is configured with.    || `target_s3`                 | `[&quot;object&quot;]`          | `N/A`      | See `S3` below                                                                                                                                                                                                                   |#### S3 Config.json| Field                   | Type                 | Default | Details                                                                      || ----------------------- | -------------------- | ------- | ---------------------------------------------------------------------------- || `aws_access_key_id`     | `[&quot;string&quot;]`         | `N/A`   |                                                                              || `aws_secret_access_key` | `[&quot;string&quot;]`         | `N/A`   |                                                                              || `aws_session_token`     | `[&quot;string&quot;]`         | `N/A`   | STS session token if using temporary credentials                             || `bucket`                | `[&quot;string&quot;]`         | `N/A`   | Bucket where staging files should be uploaded to.                            || `key_prefix`            | `[&quot;string&quot;, &quot;null&quot;]` | `&quot;&quot;`    | Prefix for staging file uploads to allow for better delineation of tmp files |## Known Limitations- Ignores `STATE` Singer messages.- Requires a [JSON Schema](https://json-schema.org/) for every stream.- Only string, string with date-time format, integer, number, boolean,  object, and array types with or without null are supported. Arrays can  have any of the other types listed, including objects as types within  items.  - Example of JSON Schema types that work    - `['number']`    - `['string']`    - `['string', 'null']`  - Exmaple of JSON Schema types that **DO NOT** work    - `['string', 'integer']`    - `['integer', 'number']`    - `['any']`    - `['null']`- JSON Schema combinations such as `anyOf` and `allOf` are not supported.- JSON Schema \$ref is partially supported:  - **_NOTE:_** The following limitations are known to **NOT** fail gracefully  - Presently you cannot have any circular or recursive `$ref`s  - `$ref`s must be present within the schema:    - URI's do not work    - if the `$ref` is broken, the behaviour is considered unexpected- Any values which are the `string` `NULL` will be streamed to Redshift as the literal `null`- Table names are restricted to:  - 127 characters in length  - can only be composed of `_`, lowercase letters, numbers, `$`  - cannot start with `$`  - ASCII characters- Field/Column names are restricted to:  - 127 characters in length  - ASCII characters- Fields/Columns are **_ALL_** `nullable`- Fields/Columns use a default of 1000 characters (in order to be able to work with a large number of columns).## Usage Logging[Singer.io](https://www.singer.io/) requires official taps and targets to collect anonymous usage data. This data is only used in aggregate to report on individual tap/targets, as well as the Singer community at-large. IP addresses are recorded to detect unique tap/targets users but not shared with third-parties.To disable anonymous data collection set `disable_collection` to `true` in the configuration JSON file.## Developing`target-redshift` utilizes [setup.py](https://python-packaging.readthedocs.io/en/latest/index.html) for packagemanagement, and [PyTest](https://docs.pytest.org/en/latest/contents.html) for testing.### DockerIf you have [Docker](https://www.docker.com/) and [Docker Compose](https://docs.docker.com/compose/) installed, you caneasily run the following to get a local env setup quickly.First, make sure to create a [`.env`](https://docs.docker.com/compose/environment-variables/#the-env-file) file in the root of this repo (it has been `.gitignore`d so don't worry about accidentally staging it).Therein, fill out the following information:```shREDSHIFT_HOST='&lt;your-host-name&gt;' # Most likely 'localhost'REDSHIFT_DATABASE='&lt;your-db-name&gt;' # Most likely 'dev'REDSHIFT_SCHEMA='&lt;your-schema-name&gt;' # Probably 'public'REDSHIFT_PORT='&lt;your-port&gt;' # Probably 5439REDSHIFT_USERNAME='&lt;your-user-name'REDSHIFT_PASSWORD='&lt;your-password&gt;'DEFAULT_COLUMN_LENGTH='&lt;your-default-column-length&gt;'TARGET_S3_AWS_ACCESS_KEY_ID='&lt;AKIA...&gt;'TARGET_S3_AWS_SECRET_ACCESS_KEY='&lt;secret&gt;'TARGET_S3_BUCKET='&lt;bucket-string&gt;'TARGET_S3_KEY_PREFIX='&lt;some-string&gt;' # We use 'target_redshift_test'``````sh$ docker-compose up -d --build$ docker logs -tf target-redshift_target-redshift_1 # You container names might differ```As soon as you see `INFO: Dev environment ready.` you can shell into the container and start running test commands:```sh$ docker exec -it target-redshift_target-redshift_1 bash # Your container names might differroot@... $ source /code/venv--target-redshift/bin/activateroot@... $ pytest```See the [PyTest](#pytest) commands below!### DBTo run the tests, you will need an _actual_ Redshift cluster running, and a user that either:- Has the ability to _create_ schemas therein  - This is required if you wish to run multiple versions of the tests, similar    to how we run our [CI tests by varying the `REDSHIFT_SCHEMA` envvar](https://github.com/datamill-co/target-redshift/blob/master/.circleci/config.yml#L94-L96)- has access to the `public` schema  - If the `REDSHIFT_SCHEMA` is seen to be the string `&quot;public&quot;`, the tests will ignore creating and dropping schemas  - This setup is often preferred for situations in which `GRANT CREATE ON DATABASE db TO user;`    is viewed as too riskyMake sure to set the following env vars for [PyTest](#pytest):```sh$ EXPORT REDSHIFT_HOST='&lt;your-host-name&gt;' # Most likely 'localhost'$ EXPORT REDSHIFT_DATABASE='&lt;your-db-name&gt;' # Most likely 'dev'$ EXPORT REDSHIFT_SCHEMA='&lt;your-schema-name&gt;' # Probably 'public'$ EXPORT REDSHIFT_PORT='&lt;your-port&gt;' # Probably 5439$ EXPORT REDSHIFT_USERNAME='&lt;your-user-name'$ EXPORT REDSHIFT_PASSWORD='&lt;your-password&gt;' # Redshift requires passwords$ EXPORT DEFAULT_COLUMN_LENGTH='&lt;your-default-column-length&gt;'```### S3To run the tests, you will need an _actual_ S3 bucket available.Make sure to set the following env vars for [PyTest](#pytest):```sh$ EXPORT TARGET_S3_AWS_ACCESS_KEY_ID='&lt;AKIA...&gt;'$ EXPORT TARGET_S3_AWS_SECRET_ACCESS_KEY='&lt;secret&gt;'$ EXPORT TARGET_S3_BUCKET='&lt;bucket-string&gt;'$ EXPORT TARGET_S3_KEY_PREFIX='&lt;some-string&gt;' # We use 'target_redshift_test'```### PyTestTo run tests, try:```sh$ python setup.py pytest```If you've `bash` shelled into the Docker Compose container ([see above](#docker)), you should be able to simply use:```sh$ pytest```## SponsorshipTarget Redshift is sponsored by Data Mill (Data Mill Services, LLC) [datamill.co](https://datamill.co/).Data Mill helps organizations utilize modern data infrastructure and data science to power analytics, products, and services.---Copyright Data Mill Services, LLC 2018</longdescription>
</pkgmetadata>