<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Usage::    pip install mem_top    from mem_top import mem_top    # From time to time:    logging.debug(mem_top())    # print(mem_top())    # Notice which counters keep increasing over time - they are the suspects.Counters:&quot;mem_top&quot; iterates all objects found in memory and calculates:* refs - number of direct references from this object to other objects, like keys and values of dict    * E.g. a dict {(&quot;some&quot;, &quot;complex&quot;, &quot;key&quot;): &quot;value&quot;} will have &quot;refs: 2&quot; - 1 ref for key, 1 ref for value    * Its key (&quot;some&quot;, &quot;complex&quot;, &quot;key&quot;) will have &quot;refs: 3&quot; - 1 ref per item* bytes - size of this object in bytes* types - number of objects of this type still kept in memory after garbage collectionReal life example::    refs:    144997  &lt;type 'collections.defaultdict'&gt; defaultdict(&lt;type 'collections.deque'&gt;, {&lt;GearmanJobRequest task='...', unique='.    144996  &lt;type 'dict'&gt; {'.:..............:.......': &lt;GearmanJobRequest task='..................', unique='.................    18948   &lt;type 'dict'&gt; {...    1578    &lt;type 'dict'&gt; {...    968     &lt;type 'dict'&gt; {...    968     &lt;type 'dict'&gt; {...    968     &lt;type 'dict'&gt; {...    767     &lt;type 'list'&gt; [...    726     &lt;type 'dict'&gt; {...    608     &lt;type 'dict'&gt; {...    types:    292499  &lt;type 'dict'&gt;    217912  &lt;type 'collections.deque'&gt;    72702   &lt;class 'gearman.job.GearmanJob'&gt;    72702   &lt;class 'gearman.job.GearmanJobRequest'&gt;    12340   &lt;type '...    3103    &lt;type '...    1112    &lt;type '...    855     &lt;type '...    767     &lt;type '...    532     &lt;type '...* Noticed a leak of 6GB RAM and counting.* Added &quot;mem_top&quot; and let it run for a while.* When got the result above it became absolutely clear who is leaking here:  the Python client of Gearman kept increasing its counters over time.* Found its known bug - https://github.com/Yelp/python-gearman/issues/10  leaking defaultdict of deques, and a dict of GearmanJobRequest-s,  just as the &quot;mem_top&quot; showed.* Replaced &quot;python-gearman&quot; - long story: stale 2.0.2 at PyPI, broken 2.0.X at github, etc.* &quot;mem_top&quot; confirmed the leak is now completely closed.Updates:* Pass e.g. &quot;verbose_types=[dict, list]&quot; to store their values, sorted by &quot;repr&quot; length, in &quot;verbose_file_name&quot;.* Added &quot;bytes&quot; top.Config defaults::    mem_top(        limit=10,                           # limit of top lines per section        width=100,                          # width of each line in chars        sep='\n',                           # char to separate lines with        refs_format='{num}\t{type} {obj}',  # format of line in &quot;refs&quot; section        bytes_format='{num}\t {obj}',       # format of line in &quot;bytes&quot; section        types_format='{num}\t {obj}',       # format of line in &quot;types&quot; section        verbose_types=None,                 # list of types to sort values by `repr` length        verbose_file_name='/tmp/mem_top',   # name of file to store verbose values in    )See also:* https://docs.python.org/2/library/gc.html#gc.garbage* https://pypi.python.org/pypi/objgraph</longdescription>
</pkgmetadata>