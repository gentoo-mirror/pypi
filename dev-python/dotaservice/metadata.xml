<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DotaService&lt;img src=&quot;dotaservice-icon.png&quot; alt=&quot;dotaservice icon&quot; width=&quot;128&quot;/&gt;---NOTE: The project that uses the dotaservice in a k8s environment is the [DotaClient](https://github.com/TimZaman/dotaclient) repo.DotaService is a service to play Dota 2 through gRPC. There are first class python bindingsand examples, so you can play dota as you would use the OpenAI gym API.It's fully functional and super lightweight. Starting Dota `obs = env.reset()` takes 5 seconds,and each `obs = env.step(action)` in the environment takes between 10 and 30 ms.You can even set the config of `render=True` and you can watch the game play live. Each game willhave a uuid and folder associated where there's a Dota demo (replay) and console logs.&lt;img src=&quot;demo.gif&quot; alt=&quot;demo&quot; width=&quot;600&quot;/&gt;## Run DotaService LocallyRun the DotaService so you can connect your client to it later. Only one client per serveris supported, and only one DotaService per VM (eg local or one per docker container).```shpython3 -m dotaservice&gt;&gt;&gt; Serving on 127.0.0.1:13337```## Run DotaService DistributedSee [docker/README.md](docker/README.md).To run two dockerservice instances, one on port `13337` and one on `13338`, f.e. run:```shdocker run -dp 13337:13337 dsdocker run -dp 13338:13337 ds```You can run as many as you want, until you run out of ports or ip addresses. If you are wearingyour fancy pants, use Kubernetes to deploy gazillions.## Client Code```pyfrom grpclib.client import Channelfrom protobuf.DotaService_grpc import DotaServiceStubfrom protobuf.DotaService_pb2 import Actionfrom protobuf.DotaService_pb2 import Config# Connect to the DotaService.env = DotaServiceStub(Channel('127.0.0.1', 13337))# Get the initial observation.observation = await env.reset(Config())for i in range(8):    # Sample an action from the action protobuf    action = Action.MoveToLocation(x=.., y=.., z=..)    # Take an action, returning the resulting observation.    observation = await env.step(action)```This is very useful to provide an environment for reinforcement learning, and service aspect of it makes itespecially useful for distributed training. I am planning to provide a client pythonmodule for this (`PyDota`) that mimics typical OpenAI gym APIs. Maybe I won't even make PyDotaand the gRPC client is enough.&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;dotaservice.png&quot; alt=&quot;dotaservice connections&quot; width=&quot;680&quot;/&gt;&lt;/div&gt;### Requirements* Python 3.7* Unix: MacOS, Ubuntu. A dockerfile is also provided see: [docker/README.md](docker/README.md).### InstallationInstalling from pypi:```shpip3 install dotaservice```For development; installing from source:```shpip3 install -e .```(Optional) Compile the protos for Python (run from repository root):```shpython3 -m grpc_tools.protoc -I. --python_out=. --python_grpc_out=. --grpc_python_out=. dotaservice/protos/*.proto```# NotesMy dev notes: [NOTES.md](NOTES.md).---# Acknowledgements* OpenAI Dota crew* [Karpathy](http://karpathy.github.io/2016/05/31/rl/)* Jan Ivanecky* [Nostrademous](https://github.com/Nostrademous)</longdescription>
</pkgmetadata>