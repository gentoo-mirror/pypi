<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-pgtransaction====================django-pgtransaction offers a drop-in replacement for thedefault ``django.db.transaction`` module which, when used on top of a PostgreSQLdatabase, extends the functionality of that module with Postgres-specific features.At present, django-pgtransaction offers an extension of the``django.db.transaction.atomic`` context manager/decorator which allows one todynamically set the `isolation level &lt;https://www.postgresql.org/docs/current/transaction-iso.html&gt;`__when opening a transaction, as well as specifyinga retry policy for when an operation in that transaction results in a Postgres lockingexception. See the quickstart below or `the docs &lt;https://django-pgtransaction.readthedocs.io/&gt;`__ for examples.Quickstart==========Set the isolation level of a transaction by using ``pgtransaction.atomic``:.. code-block:: python    import pgtransaction    with pgtransaction.atomic(isolation_level=pgtransaction.SERIALIZABLE):        # Do queries...There are three isolation levels: ``pgtransaction.READ_COMMITTED``, ``pgtransaction.REPEATABLE_READ``,and ``pgtransaction.SERIALIZABLE``. By default it inherits the parent isolation level, which is Django'sdefault of &quot;READ COMMITTED&quot;.When using stricter isolation levels like ``pgtransaction.SERIALIZABLE``, Postgres will throwserialization errors upon concurrent updates to rows. Use the ``retry`` argument with the decoratorto retry these failures:.. code-block:: python    @pgtransaction.atomic(isolation_level=pgtransaction.SERIALIZABLE, retry=3)    def do_queries():        # Do queries...Note that the ``retry`` argument will not work when used as a context manager. A ``RuntimeError``will be thrown.By default, retries are only performed when ``psycopg.errors.SerializationError`` or``psycopg.errors.DeadlockDetected`` errors are raised. Configure retried psycopg errors with``settings.PGTRANSACTION_RETRY_EXCEPTIONS``. You can set a default retry amount with``settings.PGTRANSACTION_RETRY``.``pgtransaction.atomic`` can be nested, but keep the following in mind:1. The isolation level cannot be changed once a query has been performed.2. The retry argument only works on the outermost invocation as a decorator, otherwise ``RuntimeError`` is raised.Compatibility=============``django-pgtransaction`` is compatible with Python 3.7 - 3.11, Django 3.2 - 4.2, Psycopg 2 - 3 and Postgres 12 - 15.Documentation=============Check out the `Postgres docs &lt;https://www.postgresql.org/docs/current/transaction-iso.html&gt;`__to learn about transaction isolation in Postgres. `View the django-pgtransaction docs here&lt;https://django-pgtransaction.readthedocs.io/&gt;`_.Installation============Install django-pgtransaction with::    pip3 install django-pgtransactionAfter this, add ``pgtransaction`` to the ``INSTALLED_APPS``setting of your Django project.Contributing Guide==================For information on setting up django-pgtransaction for development andcontributing changes, view `CONTRIBUTING.rst &lt;CONTRIBUTING.rst&gt;`_.Primary Authors===============- `Paul Gilmartin &lt;https://github.com/PaulGilmartin&gt;`__- `Wes Kendall &lt;https://github.com/wesleykendall&gt;`__</longdescription>
</pkgmetadata>