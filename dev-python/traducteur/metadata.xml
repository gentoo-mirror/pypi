<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TraducteurTraducteur is a database model manager and task sheduler which aims to make developing basic app with database models and tasks faster and easier.&lt;div align=&quot;center&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/traducteur&quot;/&gt;    &lt;img src=&quot;https://img.shields.io/pypi/dm/traducteur&quot;/&gt;    &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/seppedelanghe/traducteur/tests.yaml?label=tests&quot; /&gt;    &lt;br/&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/traducteur&quot;/&gt;    &lt;img src=&quot;https://img.shields.io/github/languages/code-size/seppedelanghe/traducteur&quot;/&gt;&lt;/div&gt;## Requirements- `python ^3.8`- `pydantic ^1.10.4`### Optional__For mongo db:__- `pymongo ^4.3.3`__For task queueing or redis model management:__- `redis-py ^4.4.2`## Installation__Base install:__```pip install traducteur```__Install with extras:__```pip install &quot;traducteur[tasks]&quot;```This example will install traducteur and all the packages you need to use traducteur tasks.__optional extras:__- sql- nosql- caching- mongo- tasks- all## The idea### Context managers```pythonwith BaseContext(connection_string) as db:    return db.get()```### Model managersModel managers use context managers```pythonmanager = BaseModelManager(connection_string)result = manager.get(example_id)result = manager.delete(example_id)```### ModelsModels use model managers```pythonclass User(BaseDatabaseModel):    username: str    fname: str    lname: str    email: str    user = User(    username='johndoe',    fname='John',    lname='Doe',    email='john.doe@mail.com')'''    Easy create, save, update and delete'''user = User(    username='johndoe',    fname='John',    lname='Doe',    email='john.doe@mail.com')# saving the modeluser = user.save()# saving also updates the modeluser.lname = 'Joe'user = user.save()# getting a model by its ID from the databaseuser = User.get(user_id)# deleting a model from the databasedeleted_user = user.delete()```### TasksTasks use models```python# in a programdef my_func(a: int, b: int) -&gt; int:  return a + btask = BaseTask(action=my_func)task.queue(a=8, b=3)################ in a worker #task.digest() ################# some time laterresult = task.result()```### Chain tasksTasks can be chained together for larger workloads```pythondef double(number: int):    return {        'number': number * 2    }# make tasksone = BaseTask(action=double)two = BaseTask(action=double)three = BaseTask(action=double)# chain taskstwo.set_parent(one)three.set_parent(two)# queue parent taskone.queue(number=2)################ in a worker #one.digest()  ################# some time laterresult = one.result()assert result == 8, &quot;Should be 8 as 2*2*2 == 8&quot;```## Available functionality### Context managers- MongoContext- SQLite3Context### Model managers- MongoModelManager- SQLModelManager  - SQLQueryBuilder### Query filters- Datetime filter- Number filter- String filter### Models- BaseMongoModel- BaseRedisModel- BaseSQLModel### Tasks- RedisTask# Todo / in progress### Tasks- [ ] Chain tasks    - [x] Redis    - [ ] Mongo    - [ ] SQL- [ ] Task worker  - [ ] Single Process    - [ ] Multi Process- [ ] RabbitMQ task# TestsTests can be found in the `test` folder. They use pythons `unittest` and can be run with:```python3 -m unittest path/to/test.py```Tests get automatically run after each push.### Available tests- Mongo model- Mongo sorting- Redis task    - Basic functions    - Chaining</longdescription>
</pkgmetadata>