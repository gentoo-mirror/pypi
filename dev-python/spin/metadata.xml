<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># üí´ Scientific Python INcantations (`spin`)## A developer tool for scientific Python librariesDevelopers need to memorize a whole bunch of magic command-line incantations.And these incantations change from time to time!Typically, their lives are made simpler by a Makefile, but Makefiles can be convoluted, are not written in Python, and are hard to extend.The rationale behind `spin` is therefore to provide a simple interface for common development tasks.It comes with a few common build commands out the box, but can easily be customized per project.As a curiosity: the impetus behind developing the tool was the mass migration of scientific Python libraries (SciPy, scikit-image, and NumPy, etc.) to Meson, after distutils was deprecated.When many of the build and installation commands changed, it made sense to abstract away the nuisance of having to re-learn them.## Installation```pip install spin```## ConfigurationSettings are stored in `.spin.toml`, `spin.toml`, or your project's `pyproject.toml`.As an example, see the `[tool.spin]` section of [an example `pyproject.toml`](https://github.com/scientific-python/spin/blob/main/example_pkg/pyproject.toml).The `[project]` section should contain `name`.The `[tool.spin]` section should contain:```package = &quot;pkg_importname&quot;  # name of your packagecommands = [  &quot;spin.cmds.meson.build&quot;,  &quot;spin.cmds.meson.test&quot;]```See [the command selection](#built-in-commands) below.### Command sectionsOnce you have several commands, it may be useful to organize them into sections.In `pyproject.toml`, instead of specifying the commands as a list, use the following structure:```toml[tool.spin.commands]&quot;Build&quot; = [  &quot;spin.cmds.meson.build&quot;,  &quot;spin.cmds.meson.test&quot;]&quot;Environments&quot; = [  &quot;spin.cmds.meson.ipython&quot;,  &quot;spin.cmds.meson.run&quot;]```These commands will then be rendered as:```Build:  build  üîß Build package with Meson/ninja and install  test   üîß Run testsEnvironments:  ipython  üíª Launch IPython shell with PYTHONPATH set  run      üèÅ Run a shell command with PYTHONPATH set```## Running```spin```or```python -m spin```## Built-in commands### [Meson](https://meson-python.readthedocs.io)Available as `spin.cmds.meson.*`.```  build    üîß Build package with Meson/ninja and install to `build-install`  ipython  üíª Launch IPython shell with PYTHONPATH set  python   üêç Launch Python shell with PYTHONPATH set  shell    üíª Launch shell with PYTHONPATH set  test     üîß Run pytest  run      üèÅ Run a shell command with PYTHONPATH set  docs     üìñ Build Sphinx documentation  gdb      üëæ Execute a Python snippet with GDB  lldb     üëæ Execute a Python snippet with LLDB  install  üíΩ Build and install package using pip.```### [Build](https://pypa-build.readthedocs.io/en/stable/) (PEP 517 builder)Available as `spin.cmds.build.*`:```  sdist    üì¶ Build a source distribution in `dist/````### [pip](https://pip.pypa.io) (Package Installer for Python)`pip` allows for editable installs, another commondevelopment workflow.Note that, for now, the meson commands above do not work with aneditable install of the package. We're [working on changing that](https://github.com/scientific-python/spin/pull/141).Available as `spin.cmds.pip.*`:```  install  üíΩ Build and install package using pip.```## üß™ Custom commands`spin` can invoke custom commands. These commands define their own arguments, and have access to the `pyproject.toml` file for further configuration.See, e.g., the [example custom command](https://github.com/scientific-python/spin/blob/main/example_pkg/.spin/cmds.py).Add custom commands to the `commands` variable in the `[tool.spin]` section of `pyproject.toml` as follows:```commands = [..., '.spin/cmds.py:example']```Here, the command is stored in `.spin/cmds.py`, and the functionis named `example`.### ConfigurationCustom commands can access the `pyproject.toml` as follows:```pythonfrom spin import util@click.command()def example():    &quot;&quot;&quot;Command that accesses `pyproject.toml` configuration&quot;&quot;&quot;    config = util.get_config()    print(config[&quot;tool.spin&quot;])```### Advanced: adding arguments to built-in commandsInstead of rewriting a command from scratch, a project may want to add a flag to a built-in `spin` command, or perhaps do some pre- or post-processing.For this, we have to use an internal Click concept called a [context](https://click.palletsprojects.com/en/8.1.x/complex/#contexts).Fortunately, we don't need to know anything about contexts other than that they allow us to execute commands within commands.We proceed by duplicating the function header of the existing command, and adding our own flag:```pythonfrom spin.cmds import meson# Take this from the built-in implementation, in `spin.cmds.meson.build`:@click.command()@click.argument(&quot;meson_args&quot;, nargs=-1)@click.option(&quot;-j&quot;, &quot;--jobs&quot;, help=&quot;Number of parallel tasks to launch&quot;, type=int)@click.option(&quot;--clean&quot;, is_flag=True, help=&quot;Clean build directory before build&quot;)@click.option(    &quot;-v&quot;, &quot;--verbose&quot;, is_flag=True, help=&quot;Print all build output, even installation&quot;)# This is our new option@click.option(&quot;--custom-arg/--no-custom-arg&quot;)# This tells spin that we will need a context, which we# can use to invoke the built-in command@click.pass_context# This is the original function signature, plus our new flagdef build(ctx, meson_args, jobs=None, clean=False, verbose=False, custom_arg=False):    &quot;&quot;&quot;Docstring goes here. You may want to copy and customize the original.&quot;&quot;&quot;    # Do something with the new option    print(&quot;The value of custom arg is:&quot;, custom_arg)    # The spin `build` command doesn't know anything about `custom_arg`,    # so don't send it on.    del ctx.params[&quot;custom_arg&quot;]    # Call the built-in `build` command, passing along    # all arguments and options.    ctx.forward(meson.build)    # Also see:    # - https://click.palletsprojects.com/en/8.1.x/api/#click.Context.forward    # - https://click.palletsprojects.com/en/8.1.x/api/#click.Context.invoke```### Advanced: override Meson CLISome packages use a vendored version of Meson. The path to a customMeson CLI can be set in `pyproject.toml`:```[tool.spin.meson]cli = 'path/to/custom/meson'```## FAQ- Running `spin`, the emojis in the command list don't show up.Your terminal font may not include emoji characters. E.g., if you usenoto on Arch Linux the emojis are installed separately:```shsudo pacman -S noto-fonts-emojifc-cache -f -v```## For contributors`spin` development happens on GitHub at [scientific-python/spin](https://github.com/scientific-python/spin).`spin` tests are invoked using:```nox -s tests```## HistoryThe `dev.py` tool was [proposed for SciPy](https://github.com/scipy/scipy/issues/15489) by Ralf Gommers and [implemented](https://github.com/scipy/scipy/pull/15959) by Sayantika Banik, Eduardo Naufel Schettino, and Ralf Gommers (also see [Sayantika's blog post](https://labs.quansight.org/blog/the-evolution-of-the-scipy-developer-cli)).Inspired by that implementation, `spin` (this package) is a minimal rewrite by St√©fan van der Walt, that aims to be easily extendable so that it can be used across ecosystem libraries.We thank Danila Bredikhin and Luca Marconato who kindly donated the `spin` name on PyPi.</longdescription>
</pkgmetadata>