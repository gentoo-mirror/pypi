<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |Code Health| |Code Coverage|python-constraint=================Introduction------------The Python constraint module offers solvers for `Constraint Satisfaction Problems (CSPs) &lt;https://en.wikipedia.org/wiki/Constraint_satisfaction_problem&gt;`_ over finite domains in simple and pure Python. CSP is class of problems which may be represented in terms of variables (a, b, ...), domains (a in [1, 2, 3], ...), and constraints (a &lt; b, ...).Examples--------Basics~~~~~~This interactive Python session demonstrates the module basic operation:.. code-block:: python    &gt;&gt;&gt; from constraint import *    &gt;&gt;&gt; problem = Problem()    &gt;&gt;&gt; problem.addVariable(&quot;a&quot;, [1,2,3])    &gt;&gt;&gt; problem.addVariable(&quot;b&quot;, [4,5,6])    &gt;&gt;&gt; problem.getSolutions()    [{'a': 3, 'b': 6}, {'a': 3, 'b': 5}, {'a': 3, 'b': 4},     {'a': 2, 'b': 6}, {'a': 2, 'b': 5}, {'a': 2, 'b': 4},     {'a': 1, 'b': 6}, {'a': 1, 'b': 5}, {'a': 1, 'b': 4}]    &gt;&gt;&gt; problem.addConstraint(lambda a, b: a*2 == b,                              (&quot;a&quot;, &quot;b&quot;))    &gt;&gt;&gt; problem.getSolutions()    [{'a': 3, 'b': 6}, {'a': 2, 'b': 4}]    &gt;&gt;&gt; problem = Problem()    &gt;&gt;&gt; problem.addVariables([&quot;a&quot;, &quot;b&quot;], [1, 2, 3])    &gt;&gt;&gt; problem.addConstraint(AllDifferentConstraint())    &gt;&gt;&gt; problem.getSolutions()    [{'a': 3, 'b': 2}, {'a': 3, 'b': 1}, {'a': 2, 'b': 3},     {'a': 2, 'b': 1}, {'a': 1, 'b': 2}, {'a': 1, 'b': 3}]Rooks problem~~~~~~~~~~~~~The following example solves the classical Eight Rooks problem:.. code-block:: python    &gt;&gt;&gt; problem = Problem()    &gt;&gt;&gt; numpieces = 8    &gt;&gt;&gt; cols = range(numpieces)    &gt;&gt;&gt; rows = range(numpieces)    &gt;&gt;&gt; problem.addVariables(cols, rows)    &gt;&gt;&gt; for col1 in cols:    ...     for col2 in cols:    ...         if col1 &lt; col2:    ...             problem.addConstraint(lambda row1, row2: row1 != row2,    ...                                   (col1, col2))    &gt;&gt;&gt; solutions = problem.getSolutions()    &gt;&gt;&gt; solutions    &gt;&gt;&gt; solutions    [{0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 2, 6: 1, 7: 0},     {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 2, 6: 0, 7: 1},     {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 1, 6: 2, 7: 0},     {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 1, 6: 0, 7: 2},     ...     {0: 7, 1: 5, 2: 3, 3: 6, 4: 2, 5: 1, 6: 4, 7: 0},     {0: 7, 1: 5, 2: 3, 3: 6, 4: 1, 5: 2, 6: 0, 7: 4},     {0: 7, 1: 5, 2: 3, 3: 6, 4: 1, 5: 2, 6: 4, 7: 0},     {0: 7, 1: 5, 2: 3, 3: 6, 4: 1, 5: 4, 6: 2, 7: 0},     {0: 7, 1: 5, 2: 3, 3: 6, 4: 1, 5: 4, 6: 0, 7: 2},     ...]Magic squares~~~~~~~~~~~~~This example solves a 4x4 magic square:.. code-block:: python    &gt;&gt;&gt; problem = Problem()    &gt;&gt;&gt; problem.addVariables(range(0, 16), range(1, 16 + 1))    &gt;&gt;&gt; problem.addConstraint(AllDifferentConstraint(), range(0, 16))    &gt;&gt;&gt; problem.addConstraint(ExactSumConstraint(34), [0, 5, 10, 15])    &gt;&gt;&gt; problem.addConstraint(ExactSumConstraint(34), [3, 6, 9, 12])    &gt;&gt;&gt; for row in range(4):    ...     problem.addConstraint(ExactSumConstraint(34),                                  [row * 4 + i for i in range(4)])    &gt;&gt;&gt; for col in range(4):    ...     problem.addConstraint(ExactSumConstraint(34),                                  [col + 4 * i for i in range(4)])    &gt;&gt;&gt; solutions = problem.getSolutions()Features--------The following solvers are available:- Backtracking solver- Recursive backtracking solver- Minimum conflicts solver.. role:: python(code)   :language: pythonPredefined constraint types currently available:- :python:`FunctionConstraint`- :python:`AllDifferentConstraint`- :python:`AllEqualConstraint`- :python:`ExactSumConstraint`- :python:`MaxSumConstraint`- :python:`MinSumConstraint`- :python:`InSetConstraint`- :python:`NotInSetConstraint`- :python:`SomeInSetConstraint`- :python:`SomeNotInSetConstraint`API documentation-----------------Documentation for the module is available at: http://labix.org/doc/constraint/Download and install--------------------.. code-block:: shell    $ pip install python-constraintRoadmap-------This GitHub organization and repository is a global effort to help tomaintain python-constraint which was written by Gustavo Niemeyerand originaly located at https://labix.org/python-constraint- Create some unit tests - DONE- Enable continuous integration - DONE- Port to Python 3 (Python 2 being also supported) - DONE- Respect Style Guide for Python Code (PEP8) - DONE- Improve code coverage writting more unit tests - ToDo- Move doc to Sphinx or MkDocs - https://readthedocs.org/ - ToDoContact-------- `Gustavo Niemeyer &lt;https://github.com/niemeyer/&gt;`_ &lt;gustavo@niemeyer.net&gt;- `SÃ©bastien Celles &lt;https://github.com/scls19fr/&gt;`_ &lt;s.celles@gmail.com&gt;But it's probably better to `open an issue &lt;https://github.com/python-constraint/python-constraint/issues&gt;`_... |Build Status| image:: https://travis-ci.org/python-constraint/python-constraint.svg?branch=master   :target: https://travis-ci.org/python-constraint/python-constraint.. |Code Health| image:: https://landscape.io/github/python-constraint/python-constraint/master/landscape.svg?style=flat   :target: https://landscape.io/github/python-constraint/python-constraint/master   :alt: Code Health.. |Code Coverage| image:: https://coveralls.io/repos/github/python-constraint/python-constraint/badge.svg   :target: https://coveralls.io/github/python-constraint/python-constraint</longdescription>
</pkgmetadata>