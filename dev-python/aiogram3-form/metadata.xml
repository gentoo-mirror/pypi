<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiogram3-formA library to create forms in aiogram3# Example```Python# suppose you import here your router and bot objectsfrom aiogram import F, typesfrom aiogram3_form import Form, FormFieldclass NameForm(Form, router=your_router):    first_name: str = FormField(enter_message_text=&quot;Enter your first name please&quot;)    second_name: str = FormField(enter_message_text=&quot;Enter your second name please&quot;, filter=F.text.len() &gt; 10)    age: int = FormField(enter_message_text=&quot;Enter age as integer&quot;, error_message_text=&quot;Age should be numeric!&quot;)@NameForm.submit()async def name_form_submit_handler(form: NameForm, event_chat: types.Chat):    # handle form data    # also supports aiogram standart DI (e. g. middlewares, filters, etc)    await bot.send_message(        event_chat.id, f&quot;Your full name is {form.first_name} {form.second_name}!&quot;    )        @router.message(F.text == &quot;/form&quot;)async def form_handler(message: types.Message, state: FSMContext):    await NameForm.start(state)  # start your form```After submit callback call the state would be automatically cleared.You can control this state using the following metaclass kwarg```Python...class NameForm(Form, clear_state_on_submit=False):  # True by default    ...@NameForm.submit()async def name_form_submit_handler(form: NameForm, state: FSMContext):    # so you can set your exit state manually    await state.set_state(...)```</longdescription>
</pkgmetadata>