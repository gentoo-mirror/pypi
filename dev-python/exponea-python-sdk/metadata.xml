<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Exponea Python SDKAn official Python client for Exponea Data API## Installation```pip install exponea-python-sdk```## Usage```pythonfrom exponea_python_sdk import Exponeaexponea = Exponea(&quot;project_token&quot;, username=&quot;basic_auth_username&quot;, password=&quot;basic_auth_password&quot;)```You can now fully utilize all four API, which are Analyses, Catalog, Customer and Tracking API described bellow.## TestsTo run tests, run the following command```pythonpython -m pytest```## LoggingTo configure logging, use the attribute `exponea.logger` where a standard logger from Python `logging` module is initalized. For example, to enable `DEBUG` messages, you can configure```pythonexponea.logger.setLevel(&quot;DEBUG&quot;)```## Official documenationFor official Exponea documenation of Data API please see &lt;https://developers.exponea.com/v2/reference&gt;## Table of Contents* [Customer API](#customer-api)    * [get_customer](#get_customer)    * [get_customer_consents](#get_customer_consents)    * [get_customer_attributes](#get_customer_attributes)    * [get_customers](#get_customers)    * [get_events](#get_events)    * [anonymize_customer](#anonymize_customer)* [Analyses API](#analyses-api)    * [get_report](#get_report)    * [get_funnel](#get_funnel)    * [get_segmentation](#get_segmentation)* [Catalog API](#catalog-api)    * [create_catalog](#create_catalog)    * [get_catalog_name](#get_catalog_name)    * [get_catalog_items](#get_catalog_items)    * [update_catalog_item](#update_catalog_item)    * [update_catalog_name](#update_catalog_name)    * [create_catalog_item](#create_catalog_item)    * [delete_catalog_item](#delete_catalog_item)    * [delete_catalog_items](#delete_catalog_items)    * [delete_catalog](#delete_catalog)* [Tracking API](#tracking-api)    * [get_system_time](#get_system_time)    * [update_customer_properties](#update_customer_properties)    * [add_event](#add_event)    * [batch_commands](#batch_commands)## Catalog API## create_catalog```pythonexponea.catalog.create_catalog(&quot;catalog_name&quot;, [&quot;field_one&quot;, &quot;field_two&quot;])```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_name  | `String`        | Yes      || fields        | `Array&lt;String&gt;` | Yes      |It returns ID of the catalog as a String.```pythond2b69e7s987b0asa0137455f2```## get_catalog_name```pythonexponea.catalog.get_catalog_name(&quot;catalog_id&quot;)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      |It returns name of the catalog as a String.```pythontest_catalog```## get_catalog_items```pythonexponea.catalog.get_catalog_items(&quot;catalog_id&quot;, params={})```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      || params        | `Dictionary`    | No       |_Note: `params` is a kwargs argument._It returns items of the catalog that match the query and filters specified in params Dictionary. See [official documentation](https://developers.exponea.com/v2/reference#get-catalog-items) for what kind of options you can give to params Dictionary.```python{    &quot;matched&quot;: 2,    &quot;limit&quot;: 20,    &quot;skip&quot;: 0,    &quot;data&quot;: [{&quot;item_id&quot;: &quot;1&quot;, &quot;properties&quot;: {&quot;field_one&quot;: &quot;foo&quot;, &quot;field_two&quot;: &quot;baz&quot;}}],    &quot;matched_limited&quot;: False,    &quot;total&quot;: 2}```## update_catalog_item```pythonexponea.catalog.update_catalog_item(&quot;catalog_id&quot;, &quot;1&quot;, {&quot;field_one&quot;: &quot;new_value&quot;})```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      || item_id       | `String`        | Yes      || properties    | `String`        | Yes      |It returns Boolean of whether the operation was successful.```pythonTrue```## update_catalog_name```pythonexponea.catalog.update_catalog_name(&quot;catalog_id&quot;, &quot;new_name&quot;, [&quot;fiel_one&quot;, &quot;field_two&quot;, &quot;field_three&quot;])```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      || new_name      | `String`        | Yes      || fields        | `Array&lt;String&gt;` | Yes      |_Note: `fields` must contain those fields that already exist._It returns Boolean of whether the operation was successful.```pythonTrue```## create_catalog_item```pythonexponea.catalog.create_catalog_item(&quot;catalog_id&quot;, &quot;item_id&quot;, { &quot;field_one&quot;: &quot;value_one&quot; })```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      || item_id       | `String`        | Yes      || properties    | `Dictionary`    | Yes      |_Note: This operation replaces an already existing item if the IDs match._It returns Boolean of whether the operation was successful.```pythonTrue```## update_catalog_item```pythonexponea.catalog.update_catalog_item(&quot;catalog_id&quot;, &quot;item_id&quot;, { &quot;field_one&quot;: &quot;value_one&quot; })```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      || item_id       | `String`        | Yes      || properties    | `Dictionary`    | Yes      |_Note: Updates only those fields that are specified in properties Dictionary._It returns Boolean of whether the operation was successful.```pythonTrue```## delete_catalog_item```pythonexponea.catalog.delete_catalog_item(&quot;catalog_id&quot;, &quot;item_id&quot;)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      || item_id       | `String`        | Yes      |It returns Boolean of whether the operation was successful.```pythonTrue```## delete_catalog_items```pythonexponea.catalog.delete_catalog_items(&quot;catalog_id&quot;)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      |It returns Boolean of whether the operation was successful.```pythonTrue```## delete_catalog```pythonexponea.catalog.delete_catalog(&quot;catalog_id&quot;)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || catalog_id    | `String`        | Yes      |It returns Boolean of whether the operation was successful.```pythonTrue```## Tracking API### get_system_time```pythonexponea.tracking.get_system_time(batch=False)```| Parameter     | Type          | Required || ------------- | ------------- | -------- || batch         | `Boolean`     | No       |_Note: The `batch` kwarg specifies whether command is used in the batch mode. See [batch_commands method](#batch_commands) for details._It returns a Float.```python1533663283.8943756```### update_customer_properties```pythonexponea.tracking.update_customer_properties({ &quot;registered&quot;: &quot;test&quot; }, { &quot;first_name&quot;: &quot;Lukas&quot; }, batch=False)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || customer_ids  | `Dictionary`    | Yes      || properties    | `Dictionary`    | Yes      || batch         | `Boolean`       | No       |_Note: The Customer's properties will get updated with the values of the properties Dictionary.__Note: The `batch` kwarg specifies whether command is used in the batch mode. See [batch_commands method](#batch_commands) for details._It returns Boolean describing whether operation was successful or not.```pythonTrue```### add_event```pythonexponea.tracking.add_event({ &quot;registered&quot;: &quot;test&quot; }, &quot;event_type&quot;, properties={ &quot;property&quot;: &quot;sample_property&quot; }, timestamp=1533663283, batch=False)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || customer_ids  | `Dictionary`    | Yes      || event_type    | `String`        | Yes      || properties    | `Dictionary`    | No       || timestamp     | `Float`         | No       || batch         | `Boolean`       | No       |_Note: `properties`, `timestamp` and `batch` parameters are kwargs.__Note: The `batch` kwarg specifies whether command is used in the batch mode. See [batch_commands method](#batch_commands) for details._It returns Boolean describing whether operation was successful or not.```pythonTrue```### batch_commands```pythonexponea.tracking.batch_commands([    exponea.tracking.add_event({ &quot;registered&quot;: &quot;test&quot; }, &quot;event_type&quot;, properties={ &quot;property&quot;: &quot;test&quot; }, batch=True),    exponea.tracking.update_customer_properties({ &quot;registered&quot;: &quot;test&quot; }, { &quot;first_name&quot;: &quot;Lukas&quot; }, batch=True),    exponea.tracking.get_system_time(batch=True)])```| Parameter     | Type                | Required || ------------- | -------------       | -------- || commands      | `Array&lt;Dictionary&gt;` | Yes      |See [official documentation](https://developers.exponea.com/v2/reference#section-how-to-build-a-command-body) for the available formats of different types of commands.It returns an Array of Booleans describing whether each operation was successful or not.```python[True, True, 1533833512.6860783]```## Customer API### get_customer```pythonexponea.customer.get_customer({ &quot;registered&quot;: &quot;test&quot;, &quot;cookie&quot;: &quot;123&quot; })```| Parameter     | Type            | Required || ------------- | -------------   | -------- || customer_ids  | `Dictionary`    | Yes      |_Note: The keys of the Dictionary are the names of the ID type, and value is the value for a given customer._It returns a Dictionary.```python{    &quot;events&quot;: [{        &quot;type&quot;: &quot;test&quot;,        &quot;timestamp&quot;: 1533495544.343536,        &quot;properties&quot;: {}    }],    &quot;properties&quot;: {        &quot;first_name&quot;: &quot;Lukas&quot;,        &quot;last_nam&quot;: &quot;Cerny&quot;    },    &quot;ids&quot;: {        &quot;registered&quot;: &quot;test&quot;,        &quot;cookie&quot;: &quot;123&quot;    }}```### get_customer_consents```pythonexponea.customer.get_customer_consents({&quot;registered&quot;: &quot;test&quot;}, [ &quot;newsletter&quot;, &quot;other&quot; ])```| Parameter     | Type            | Required || ------------- | -------------   | -------- || customer_ids  | `Dictionary`    | Yes      || consent_types | `Array&lt;String&gt;` | Yes      |It returns a Dictionary.```python{    &quot;newsletter&quot;: True,    &quot;other&quot;: False}```### get_customer_attributes```pythonexponea.customer.get_customer_attributes({&quot;registered&quot;: &quot;test&quot;}, ids=[&quot;cookie&quot;, &quot;ga&quot;], properties=[&quot;first_name&quot;], aggregations=[&quot;agg_id&quot;], segmentations=[&quot;segm_id&quot;], predictions=[&quot;pred_id&quot;], expressions=[&quot;expr_id&quot;])```| Parameter     | Type            | Required || ------------- | -------------   | -------- || customer_ids  | `Dictionary`    | Yes      || ids           | `Array&lt;String&gt;` | No       || properties    | `Array&lt;String&gt;` | No       || aggregations  | `Array&lt;String&gt;` | No       || expressions   | `Array&lt;String&gt;` | No       || segmentations | `Array&lt;String&gt;` | No       || predictions   | `Array&lt;String&gt;` | No       || expressions   | `Array&lt;String&gt;` | No       |_Note: All the arguments are kwargs and specify the attributes you want to recieve._It returns a Dictionary.```python{    &quot;ids&quot;: {        &quot;cookie&quot;: [],        &quot;ga&quot;: &quot;sample_id&quot;    },    &quot;properties&quot;: {        &quot;first_name&quot;: &quot;Lukas&quot;    },    &quot;aggregations&quot;: {        &quot;agg_id&quot;: &quot;sample_aggregate&quot;    },    &quot;segmentations&quot;: {        &quot;segm_id&quot;: &quot;sample_segment&quot;    },    &quot;predictions&quot;: {        &quot;pred_id&quot;: &quot;sample_prediction&quot;    },    &quot;expressions&quot;: {        &quot;expr_id&quot;: &quot;sample_expression&quot;    }}```_Note: If you do not specify one of the attribute types, it will not have a key in the resulting Dictionary._### get_customers```pythonexponea.customer.get_customers()```| Parameter     | Type          | Required || ------------- | ------------- | -------- |It returns an Array.```python[    {        &quot;ids&quot;: {            &quot;cookie&quot;: [],            &quot;registered&quot;: &quot;test&quot;        },        &quot;properties&quot;: {            &quot;first_name&quot;: &quot;Lukas&quot;,            &quot;last_name&quot;: &quot;Cerny&quot;        }    }]```### get_events```pythonexponea.customer.get_events({ &quot;registered&quot;: &quot;test&quot; }, [ &quot;event_type&quot; ])```| Parameter     | Type            | Required || ------------- | -------------   | -------- || customer_ids  | `Dictionary`    | Yes      || event_types   | `Array&lt;String&gt;` | Yes      |_Note: Elements of `event_types` Array are names of Events._It returns an Array.```python[    {        &quot;properties&quot;:{            &quot;foo&quot;: &quot;baz&quot;        },        &quot;timestamp&quot;:1533495529.9268496,        &quot;type&quot;: &quot;event_type&quot;    }]```### anonymize_customer```pythonexponea.customer.anonymize_customer({ &quot;registered&quot;: &quot;test&quot; })```| Parameter     | Type            | Required || ------------- | -------------   | -------- || customer_ids  | `Dictionary`    | Yes      |It returns a Boolean if operation was successful or not.```pythonTrue```## Analyses API### get_report```pythonexponea.analyses.get_report(&quot;report_id&quot;)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || report_id     | `String`        | Yes      |It returns a Dictionary. The elements in `data` represent individual rows.```python{    &quot;name&quot;: &quot;report_name&quot;,    &quot;data&quot;: [        {            &quot;column_name_1&quot;: &quot;value_1&quot;,            &quot;column_name_2&quot;: 1        }    ]}```### get_funnel```pythonexponea.analyses.get_funnel(&quot;funnel_id&quot;)```| Parameter     | Type            | Required || ------------- | -------------   | -------- || funnel_id     | `String`        | Yes      |It returns a Dictionary. The elements in `data` represent individual drill downs.```python{    &quot;name&quot;: &quot;funnel_name&quot;,    &quot;data&quot;: [        {            &quot;serie&quot;: &quot;serie_name&quot;,            &quot;step 1 step_one_name count&quot;: 2,            &quot;step 2 step_two_name count&quot;: 1,            &quot;step 2 event_name duration from previous&quot;: 435764.1615576744        }    ]}```### get_segmentation```pythonexponea.analyses.get_segmentation(&quot;segmentation_id&quot;)```| Parameter     | Type              | Required || ------------- | -------------     | -------- || segmentation_id | `String`        | Yes      |It returns a Dictionary. The elements in `data` represent individual segments.```python{    &quot;name&quot;: &quot;segmentation_name&quot;,    &quot;data&quot;: [        {            &quot;segment&quot;: &quot;segment_name_1&quot;,            &quot;#&quot;: 0        }    ]}```</longdescription>
</pkgmetadata>