<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|zfit_logo|*******************************zfit: scalable pythonic fitting*******************************.. image:: https://scikit-hep.org/assets/images/Scikit--HEP-Affiliated-blue.svg   :target: https://scikit-hep.org.. image:: https://img.shields.io/pypi/v/zfit.svg   :target: https://pypi.python.org/pypi/zfit.. image:: https://img.shields.io/conda/vn/conda-forge/zfit   :alt: conda-forge   :target: https://anaconda.org/conda-forge/zfit.. image:: https://github.com/zfit/zfit/workflows/CI/badge.svg   :target: https://github.com/zfit/zfit/actions.. image:: https://github.com/zfit/zfit/workflows/build/badge.svg   :target: https://github.com/zfit/zfit/actions.. image:: https://coveralls.io/repos/github/zfit/zfit/badge.svg?branch=meta_changes   :target: https://coveralls.io/github/zfit/zfit?branch=meta_changes.. image:: https://www.codefactor.io/repository/github/zfit/zfit/badge   :target: https://www.codefactor.io/repository/github/zfit/zfit   :alt: CodeFactor.. |zfit_logo| image:: docs/images/zfit-logo_hires.png   :target: https://github.com/zfit/zfit   :alt: zfit logo.. |scikit-hep_logo| image:: docs/images/scikit-hep-logo_168x168.png   :target: https://scikit-hep.org/affiliated   :alt: scikit-hep logozfit is a highly scalable and customizable model manipulation and fitting library. It uses`TensorFlow &lt;https://www.tensorflow.org/&gt;`_ as its computational backendand is optimised for simple and direct manipulation of probability density functions. The project is affiliated withand well integrated into `Scikit-HEP &lt;https://scikit-hep.org/&gt;`_, the HEP Python ecosystem.- **Tutorials**: `Interactive introduction and tutorials &lt;https://zfit-tutorials.readthedocs.io/en/latest/&gt;`_- **Quick start**: `Example scripts &lt;examples&gt;`_- **Documentation**: See `stable documentation`_ or `latest documentation`_- **Questions**: see the `FAQ &lt;https://github.com/zfit/zfit/wiki/FAQ&gt;`_,  `ask on StackOverflow &lt;https://stackoverflow.com/questions/ask?tags=zfit&gt;`_ (with the **zfit** tag) or `contact`_ us directly.- **Physics, HEP**: `zfit-physics &lt;https://github.com/zfit/zfit-physics&gt;`_ is the place to contribute and find more HEP  related content- **Statistical inference**: `hepstats &lt;https://github.com/scikit-hep/hepstats&gt;`_ for limits, CI, sWeights and moreIf you use zfit in **research**, pleaseconsider `citing &lt;https://www.sciencedirect.com/science/article/pii/S2352711019303851&gt;`_.*N.B.*: zfit is currently in *beta stage*, so while most core parts are established,some may still be missing and bugs may be encountered.It is, however, mostly ready for production, and is being used in analyses projects.If you want to use it for your project and you are not sure if all the needed functionality is there,feel free to `contact`_.Why?====The basic idea behind zfit is to offer a Python oriented alternative to the very successful RooFit libraryfrom the `ROOT &lt;https://root.cern.ch/&gt;`_ data analysis package that can integrate with the other packagesthat are part if the scientific Python ecosystem.Contrary to the monolithic approach of ROOT/RooFit, the aim of zfit is to be light and flexible enough to integrate with any state-of-art tools and to allow scalability going to larger datasets.These core ideas are supported by two basic pillars:- The skeleton and extension of the code is minimalist, simple and finite:  the zfit library is exclusively designed for the purpose of model fitting and sampling with no attempt to extend its  functionalities to features such as statistical methods or plotting.- zfit is designed for optimal parallelisation and scalability by making use of TensorFlow as its backend.  The use of TensorFlow provides crucial features in the context of model fitting like taking care of the  parallelisation and analytic derivatives.How to use==========While the zfit library provides a model fitting and sampling framework for a broad list of applications,we will illustrate its main features with a simple example by fitting a Gaussian distribution with an unbinnedlikelihood fit and a parameter uncertainty estimation.Example in short----------------.. code-block:: python    obs = zfit.Space('x', limits=(-10, 10))    # create the model    mu    = zfit.Parameter(&quot;mu&quot;   , 2.4, -1, 5)    sigma = zfit.Parameter(&quot;sigma&quot;, 1.3,  0, 5)    gauss = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)    # load the data    data_np = np.random.normal(size=10000)    data = zfit.Data.from_numpy(obs=obs, array=data_np)    # build the loss    nll = zfit.loss.UnbinnedNLL(model=gauss, data=data)    # minimize    minimizer = zfit.minimize.Minuit()    result = minimizer.minimize(nll)    # calculate errors    param_errors = result.hesse()This follows the zfit workflow.. image:: docs/images/zfit_workflow_v2.png    :alt: zfit workflowFull explanation----------------The default space (e.g. normalization range) of a PDF is defined by an *observable space*, which is created using the ``zfit.Space`` class:.. code-block:: python    obs = zfit.Space('x', limits=(-10, 10))To create a simple Gaussian PDF, we define its parameters and their limits using the ``zfit.Parameter`` class... code-block:: python  # syntax: zfit.Parameter(&quot;any_name&quot;, value, lower, upper)    mu    = zfit.Parameter(&quot;mu&quot;   , 2.4, -1, 5)    sigma = zfit.Parameter(&quot;sigma&quot;, 1.3,  0, 5)    gauss = zfit.pdf.Gauss(obs=obs, mu=mu, sigma=sigma)For simplicity, we create the dataset to be fitted starting from a numpy array, but zfit allows for the use of other sources such as ROOT files:.. code-block:: python    mu_true = 0    sigma_true = 1    data_np = np.random.normal(mu_true, sigma_true, size=10000)    data = zfit.Data.from_numpy(obs=obs, array=data_np)Fits are performed in three steps:1. Creation of a loss function, in our case a negative log-likelihood.2. Instantiation of our minimiser of choice, in the example the ``Minuit``.3. Minimisation of the loss function... code-block:: python    # Stage 1: create an unbinned likelihood with the given PDF and dataset    nll = zfit.loss.UnbinnedNLL(model=gauss, data=data)    # Stage 2: instantiate a minimiser (in this case a basic minuit)    minimizer = zfit.minimize.Minuit()    # Stage 3: minimise the given negative log-likelihood    result = minimizer.minimize(nll)Errors are calculated with a further function call to avoid running potentially expensive operations if not needed:.. code-block:: python    param_errors = result.hesse()Once we've performed the fit and obtained the corresponding uncertainties, we can examine the fit results:.. code-block:: python    print(&quot;Function minimum:&quot;, result.fmin)    print(&quot;Converged:&quot;, result.converged)    print(&quot;Full minimizer information:&quot;, result)    # Information on all the parameters in the fit    params = result.params    print(params)    # Printing information on specific parameters, e.g. mu    print(&quot;mu={}&quot;.format(params[mu]['value']))And that's it!For more details and information of what you can do with zfit, checkout the `latest documentation`_.Prerequisites=============``zfit`` works with Python versions 3.7, 3.8 and 3.9.The following packages (amongst others) are required:- `tensorflow &lt;https://www.tensorflow.org/&gt;`_ &gt;= 2.6- `tensorflow_probability &lt;https://www.tensorflow.org/probability&gt;`_- `scipy &lt;https://www.scipy.org/&gt;`_ &gt;=1.2- `uproot &lt;https://github.com/scikit-hep/uproot&gt;`_- `iminuit &lt;https://github.com/scikit-hep/iminuit&gt;`_... and some other packages. For a full list, check the `requirements &lt;requirements.txt&gt;`_.Installing==========zfit is currently *only available on pip*. The **conda version is highly outdated and should not be used**.If possible, use a conda or virtual environment and do:.. code-block:: console    $ pip install zfitFor the newest development version, you can install the version from git with.. code-block:: console   $ pip install git+https://github.com/zfit/zfitContributing============Any idea of how to improve the library? Or interested to write some code?Contributions are always welcome, please have a look at the `Contributing guide`_... _Contributing guide: CONTRIBUTING.rstContact========You can contact us directly: - via e-mail: zfit@physik.uzh.ch - join our `Gitter channel &lt;https://gitter.im/zfit/zfit&gt;`_Original Authors================| Jonas Eschle &lt;jonas.eschle@cern.ch&gt;| Albert Puig &lt;albert.puig@cern.ch&gt;| Rafael Silva Coutinho &lt;rsilvaco@cern.ch&gt;See here for `all authors and contributors`_..  _all authors and contributors: AUTHORS.rstAcknowledgements================zfit has been developed with support from the University of Zurich and the Swiss National Science Foundation (SNSF) under contracts 168169 and 174182.The idea of zfit is inspired by the `TensorFlowAnalysis &lt;https://gitlab.cern.ch/poluekt/TensorFlowAnalysis&gt;`_ frameworkdeveloped by Anton Poluektov and `TensorProb &lt;https://github.com/tensorprob/tensorprob&gt;`_ by Chris Burr and Igor Babuschkinusing the TensorFlow open source library and more libraries... _`latest documentation`: https://zfit.readthedocs.io/en/latest/.. _`stable documentation`: https://zfit.readthedocs.io/en/stable/</longdescription>
</pkgmetadata>