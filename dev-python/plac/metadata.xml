<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Plac: parsing the command line the easy way`plac` is a Python package that can generate command line parametersfrom function signatures.`plac` works on Python 2.6 through all versions of Python 3.`plac` has no dependencies beyond modules already present in the Pythonstandard library.`plac` implements most of its functionality in a single file that may beincluded in your source code.## Quickstart`plac` automatically generates the command line parameters from the function signature.         It offers three decorators to describe positional, option and flag type parameters:```pythonimport plac# Add decorators to the function@plac.pos('model', help=&quot;model name&quot;, choices=['A', 'B', 'C'])@plac.opt('iter', help=&quot;iterations&quot;, type=int)@plac.flg('debug', help=&quot;debug mode&quot;)def main(model, iter=100, debug=False):    &quot;&quot;&quot;    A script for machine learning    &quot;&quot;&quot;    print (model, iter, debug)if __name__ == '__main__':    # Execute function via plac.call()    plac.call(main)```And that's it! The program can now take parameters from the command line like so:    python example.py -d -i 1000 B Running the script with `python example.py -h` will give you the following help message: :```usage: example.py [-h] [-i 100] [-d] {A,B,C}A script for machine learningpositional arguments:  {A,B,C}             model nameoptions:  -h, --help          show this help message and exit  -i 100, --iter 100  iterations  -d, --debug         debug mode```Running the script with no parameters `python example.py` would print:```usage: example.py [-h] [-i 100] [-d] {A,B,C}example.py: error: the following arguments are required: model```## Decorator referenceTo use `plac` all you need to know are the following three decorators:* `@plac.pos` - for positional parameters `model`* `@plac.opt` - for key value options `--iter 100`* `@plac.flg` - for flags `--debug`that have the following signatures:```python# Positional parameters.pos(arg, help=None, type=None, choices=None, metavar=None):# Option parameters.opt(arg, help=None, type=None, abbrev=None, choices=None, metavar=None):# Flag parameters.flg(arg, help=None, abbrev=None):```## Zero dependencies ... not even plac :-)Notably, the main functionality of `plac` is implemented in a singlePython module called `plac_core.py` that, if necessary, may be included anddistributed with your source code thus reducing external dependencies inyour code.Copy `plac_core.py` to your package then use it like so:```pythonfrom mypackage import plac_core as plac```## Avoiding name clashesPython syntax, or your variable naming may impose constraints on whatwords may be used as parameters. To circumvent that limitation append atrailing underscore to the name. `plac` will strip that underscore fromthe command line parameter name:```pythonimport plac@plac.flg('list_')   # avoid clash with builtin@plac.flg('yield_')  # avoid clash with keyword@plac.opt('sys_')    # avoid clash with a very common namedef main(list_, yield_=False, sys_=100):    print(list_)    print(yield_)    print(sys_)if __name__ == '__main__':    plac.call(main)```produces the usage:```usage: example13.py [-h] [-l] [-y] [-s 100]optional arguments:  -h, --help         show this help message and exit  -l, --list  -y, --yield        [False]  -s 100, --sys 100  [100]```## Variable arguments`plac` may accept multiple positional arguments and even additional key=value pairs:```pythonimport plac@plac.pos('args', help=&quot;words&quot;)@plac.opt('kwds', help=&quot;key=value&quot;, )def main(*args, **kwds):    print(args)    print(kwds)if __name__ == '__main__':    plac.call(main)```the usage will be:```usage: example15.py [-h] [args ...] [kwds ...]positional arguments:  args        words  kwds        key=valueoptional arguments:  -h, --help  show this help message and exit```when running it as:    python example15.py A B x=10 y=20the program prints:    ('A', 'B')    {'x': '10', 'y': '20'}## Installation    pip install plac## TestingRun    python doc/test_plac.pyYou will see several apparent errors, but this is right, since the testsare checking for several error conditions. The important thing is thatyou get a line like`Executed XX tests OK`## Code-   &lt;https://github.com/ialbert/plac&gt;Author: Michele Simionato, &lt;michele.simionato@gmail.com&gt;Maintainer: Istvan Albert, &lt;istvan.albert@gmail.com&gt;## Issues-   &lt;https://github.com/ialbert/plac/issues&gt;## LicenseBSD License</longdescription>
</pkgmetadata>