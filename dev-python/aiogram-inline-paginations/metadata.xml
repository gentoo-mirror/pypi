<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiogram-inline-paginations## DescriptionA simple library for aiogram that allows you to easily do pagination for any Inline keyboards.Install for pip:```shellpip install aiogram-inline-paginations```Install for poetry:```shellpoetry add aiogram-inline-paginations```## Create paginations object```pythonfrom aiogram_inline_paginations.paginator import Paginatorfrom aiogram import typeskb = types.InlineKeyboardMarkup()paginator = Paginator(data=kb, size=5)```### Params**data**: Any ready-to-use keyboard InlineKeyboardMarkup or any iterable object with InlineKeyboardButton.**size**: The number of rows of buttons on one page, excluding the navigation bar.### ReturnA paginator object that, when called, returns a ready-made keyboard with pagination.## Get data for registrations handler paginator```pythonfrom aiogram_inline_paginations.paginator import Paginatorfrom aiogram import typeskb = types.InlineKeyboardMarkup()paginator = Paginator(data=kb, size=5)@dp.message_handler()async def some_func(message: types.Message):    await message.answer(        text='Some menu',        reply_markup=paginator()    )```### Return paginator_handler()Data for registrations paginator.## Example```pythonimport randomfrom aiogram import Bot, Dispatcher, typesfrom aiogram.contrib.fsm_storage.memory import MemoryStoragefrom aiogram.dispatcher.filters import CommandStartfrom aiogram.utils.executor import Executorfrom aiogram_inline_paginations.paginator import Paginatortoken = 'your token'storage = MemoryStorage()bot = Bot(token=token)dp = Dispatcher(bot, storage=storage)@dp.message_handler(CommandStart(), state='*')async def start(message: types.Message):    await message.answer('Hello text')    kb = types.InlineKeyboardMarkup()  # some keyboard    '''To demonstrate, I will add more than 50 buttons to the keyboard and divide them into 5 lines per page'''    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data='pass'            ) for i in range(2)        ]    )    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data='pass'            ) for i in range(3)        ]    )    kb.add(        types.InlineKeyboardButton(            text=str(random.randint(1000000, 10000000)),            callback_data='pass'        )    )    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data='pass'            ) for i in range(2)        ]    )    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data='pass'            ) for i in range(50)        ]    )    paginator = Paginator(data=kb, size=5, dp=dp)    await message.answer(        text='Some menu',        reply_markup=paginator()    )if __name__ == '__main__':    Executor(dp).start_polling()```## Check box paginations exemple```pythonimport randomfrom aiogram import Bot, Dispatcher, typesfrom aiogram.contrib.fsm_storage.memory import MemoryStoragefrom aiogram.dispatcher import FSMContextfrom aiogram.dispatcher.filters import CommandStart, Textfrom aiogram.utils.executor import Executorfrom aiogram_inline_paginations.paginator import CheckBoxPaginatortoken = 'your token'storage = MemoryStorage()bot = Bot(token=token)dp = Dispatcher(bot, storage=storage)@dp.message_handler(CommandStart(), state='*')async def start(message: types.Message):    await message.answer('Hello text')    kb = types.InlineKeyboardMarkup()  # some keyboard    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data=f'pass_{str(random.randint(1000000, 10000000))}'            ) for i in range(2)        ]    )    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data=f'pass_{str(random.randint(1000000, 10000000))}'            ) for i in range(3)        ]    )    kb.add(        types.InlineKeyboardButton(            text=str(random.randint(1000000, 10000000)),            callback_data=f'pass_{str(random.randint(1000000, 10000000))}'        )    )    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data=f'pass_{str(random.randint(1000000, 10000000))}'            ) for i in range(2)        ]    )    kb.add(        *[            types.InlineKeyboardButton(                text=str(random.randint(1000000, 10000000)),                callback_data=f'pass_{str(random.randint(1000000, 10000000))}'            ) for i in range(50)        ]    )    paginator = CheckBoxPaginator(        data=kb,        size=5,        callback_startswith='page_',        callback_startswith_button='pass_',        confirm_text='Approve',        dp=dp    )    await message.answer(        text='Some menu',        reply_markup=paginator()    )@dp.callback_query_handler(Text(startswith='Approve', endswith='confirm'))async def approve(call: types.CallbackQuery, state: FSMContext):    data = await state.get_data()    selected = data.get('page_selected', None)    await call.answer(        text='Your selected&quot;\n'.join(selected)    )if __name__ == '__main__':    Executor(dp).start_polling()```confirim callback:```pythonf&quot;{confirm_text}confirm&quot;```selected data:```pythondata = await state.get_data()selected = data.get(f'{startswith}selected', None)```## ScreenshotsFirst page:![img_1.png](https://github.com/daniilshamraev/aiogram-inline-paginations/blob/master/img/img_1.png?raw=true)Second page:![img_2.png](https://github.com/daniilshamraev/aiogram-inline-paginations/blob/master/img/img_2.png?raw=true)Last page:![img_3.png](https://github.com/daniilshamraev/aiogram-inline-paginations/blob/master/img/img_3.png?raw=true)*The order of entries is not lost.*## License MIT</longdescription>
</pkgmetadata>