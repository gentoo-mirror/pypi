<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>(Asyncio OR Threadsafe) Python Client for Google Cloud Auth===========================================================    This is a shared codebase for ``gcloud-aio-auth`` and ``gcloud-rest-auth``This library implements an ``IamClient`` class, which can be used to interactwith GCP public keys and URL sign blobs.It additionally implements a ``Token`` class, which is used for authorizingagainst Google Cloud. The other ``gcloud-aio-*`` package components accept a``Token`` instance as an argument; you can define a single token for all ofthese components or define one for each. Each component corresponds to a givenGoogle Cloud service and each service requires various &quot;`scopes`_&quot;.|pypi| |pythons-aio| |pythons-rest|Installation------------.. code-block:: console    $ pip install --upgrade gcloud-{aio,rest}-authUsage-----See `our docs`_.CLI~~~This project can also be used to help you manually authenticate to test GCProutes, eg. we can list our project's uptime checks with a tool such as``curl``:.. code-block:: console    # using default application credentials    curl \      -H &quot;Authorization: Bearer $(python3 -c 'from gcloud.rest.auth import Token; print(Token().get())')&quot; \      &quot;https://monitoring.googleapis.com/v3/projects/PROJECT_ID/uptimeCheckConfigs&quot;    # using a service account (make sure to provide a scope!)    export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service.json    curl \      -H &quot;Authorization: Bearer $(python3 -c 'from gcloud.rest.auth import Token; print(Token(scopes=[&quot;'&quot;https://www.googleapis.com/auth/cloud-platform&quot;'&quot;]).get())')&quot; \      &quot;https://monitoring.googleapis.com/v3/projects/PROJECT_ID/uptimeCheckConfigs&quot;    # using legacy account credentials    export GOOGLE_APPLICATION_CREDENTIALS=~/.config/gcloud/legacy_credentials/EMAIL@DOMAIN.TLD/adc.json    curl \      -H &quot;Authorization: Bearer $(python3 -c 'from gcloud.rest.auth import Token; print(Token().get())')&quot; \      &quot;https://monitoring.googleapis.com/v3/projects/PROJECT_ID/uptimeCheckConfigs&quot;Contributing------------Please see our `contributing guide`_... _contributing guide: https://github.com/talkiq/gcloud-aio/blob/master/.github/CONTRIBUTING.rst.. _our docs: https://talkiq.github.io/gcloud-aio.. _scopes: https://developers.google.com/identity/protocols/googlescopes.. |pypi| image:: https://img.shields.io/pypi/v/gcloud-aio-auth.svg?style=flat-square    :alt: Latest PyPI Version (gcloud-aio-auth)    :target: https://pypi.org/project/gcloud-aio-auth/.. |pythons-aio| image:: https://img.shields.io/pypi/pyversions/gcloud-aio-auth.svg?style=flat-square&amp;label=python (aio)    :alt: Python Version Support (gcloud-aio-auth)    :target: https://pypi.org/project/gcloud-aio-auth/.. |pythons-rest| image:: https://img.shields.io/pypi/pyversions/gcloud-rest-auth.svg?style=flat-square&amp;label=python (rest)    :alt: Python Version Support (gcloud-rest-auth)    :target: https://pypi.org/project/gcloud-rest-auth/</longdescription>
</pkgmetadata>