<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Conlay - Console Layout[![PyPi version][shields-pypi_version]][url-pypi_version][![Github Issues][shields-issues]][url-issues][![Github License][shields-license]][url-license]Create visually pleasing console layouts with this easy-to-use Python library. ## InstallingInstall using &lt;a href=&quot;https://pip.pypa.io/en/stable/&quot;&gt;pip&lt;/a&gt;```bashpip install conlay```or install it from &lt;a href=&quot;https://pypi.org/project/conlay/#files&quot;&gt;PyPi&lt;/a&gt;## Example```pythonfrom conlay import *layout = Conlay()blank_box = BoldBox(0, 0, 30, 5)layout.add(blank_box)label = ThinLabel(0, 0, &quot;this is a test&quot;)blank_box.add(label)layout.print()``` Console output:```┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓┃╭──────────────╮            ┃┃│this is a test│            ┃┃╰──────────────╯            ┃┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&gt;```## Conlay()`Conlay()` is the core class within the library. It generates and prints out the layout.```pythonlayout = Conlay()```There are some attributes that can be used to modify or update the positioning, scale, color and other things. Because each &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElement()&lt;/a&gt; is a subclass of `Conlay()`, each &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElement()&lt;/a&gt; has the same attributes.| attribute           | description | expected type | default value || :--------           | :---------- | :------------ | :------------ || `relative_x`        | Relative x-position to the parent object | `int` | 0 || `relative_y`        | Relative y-position to the parent object | `int` | 0 || `absolute_x`        | Absolute x-position | `int` | 0 || `absolute_y`        | Absolute y-position | `int` | 0 || `width`             | Elements width | `int` | 0 || `min_width`         | Minimal width. May limit the specified with | `int` | 0 || `max_width`         | Maximal width. May limit the specified with | `int` | 0 || `height`            | Elements height | `int` | 0 || `min_height`        | Minimal height. May limit the specified with | `int` | 0 || `max_height`        | Maximal height. May limit the specified with | `int` | 0 || `zindex`            | Indicates whether an element is printed above or below other elements | `int` | 0 || `padding_x`         | Specifies the padding on the x axis, which affects the absolute position of the child elements | `int` | 0 || `padding_y`         | Specifies the padding on the y axis, which affects the absolute position of the child elements | `int` | 0 || `text`              | Specifies the text content | `str` | n/a || `placeholder`       | Specifies the placeholder content | `str` | n/a || `content`           | Stores the text content of the input element, etc. | `str` | n/a || `background`        | Specifies whether the element should have a background or not | `bool` | False || `background_color`  | Specifies the background color | &lt;a href=&quot;https://github.com/Salliii/conlay#colorbg&quot;&gt;`Color.Bg`&lt;/a&gt; | Color.Bg.clear || `border_color`      | Specifies the border color | &lt;a href=&quot;https://github.com/Salliii/conlay#colorfg&quot;&gt;`Color.Fg`&lt;/a&gt; | Color.Fg.clear || `text_color`        | Specifies the text color | &lt;a href=&quot;https://github.com/Salliii/conlay#colorfg&quot;&gt;`Color.Fg`&lt;/a&gt; | Color.Fg.clear || `placeholder_color` | Specifies the placeholder color | &lt;a href=&quot;https://github.com/Salliii/conlay#colorfg&quot;&gt;`Color.Fg`&lt;/a&gt; | Color.Fg.rgb(150, 150, 150) |### Conlay.add()You can use `add()` to add &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElements&lt;/a&gt; to other &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElements&lt;/a&gt;.Syntax:```pythonparent.add(child)```| argument | description | expected type || :------- | :---------- | :------------ || `child`  | child element | &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElements()&lt;/a&gt; or one of its subclasses such as &lt;a href=&quot;https://github.com/Salliii/conlay#box&quot;&gt;Box()&lt;/a&gt;, &lt;a href=&quot;https://github.com/Salliii/conlay#label&quot;&gt;Label()&lt;/a&gt;, etc. |Example:```python# add a LayoutElement to the main layout layout = Conlay()layout.add(ThinBox(...))# add a LayoutElement to another LayoutElementBoldBox(...).add(ThinLabel(...))```### Conlay.print()You have to call `print()` to generate and print out the layout.Syntax:```pythonlayout.print()```Example:```pythonlayout = Conlay()...layout.print()```## LayoutElement()The `LayoutElement()` class serves as a superclass for all other layout elements such as &lt;a href=&quot;https://github.com/Salliii/conlay#box&quot;&gt;Box()&lt;/a&gt;, &lt;a href=&quot;https://github.com/Salliii/conlay#label&quot;&gt;Label()&lt;/a&gt;, etc.Syntax:```pythonelement = LayoutElement(x, y, w, h, border)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `w`      | Elements width | `int` || `h`      | Elements height | `int` || `border` | Borders character set | &lt;a href=&quot;https://github.com/Salliii/conlay#border&quot;&gt;Border()&lt;/a&gt; or one of its subclasses such as &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold()&lt;/a&gt; or &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin()&lt;/a&gt; |Example:```pythonfrom conlay import *layout = Conlay()element = LayoutElement(0, 0, 30, 5, Thin())layout.add(element)layout.print()```Console output:```╭────────────────────────────╮│                            ││                            ││                            │╰────────────────────────────╯&gt;```## Box()The `Box()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElement()&lt;/a&gt; class and is used to create a simple box.Syntax:```pythonelement = Box(x, y, w, h, border)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `w`      | Elements width | `int` || `h`      | Elements height | `int` || `border` | Borders character set | &lt;a href=&quot;https://github.com/Salliii/conlay#border&quot;&gt;Border()&lt;/a&gt; or one of its subclasses such as &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold()&lt;/a&gt; or &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin()&lt;/a&gt; |Example:```pythonfrom conlay import *layout = Conlay()box = Box(0, 0, 30, 5, Thin())layout.add(box)layout.print()```Console output:```╭────────────────────────────╮│                            ││                            ││                            │╰────────────────────────────╯&gt;```## ThinBox()The `ThinBox()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#box&quot;&gt;Box()&lt;/a&gt; class and is used to create a simple box with a &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin()&lt;/a&gt; Border.Syntax:```pythonelement = ThinBox(x, y, w, h)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `w`      | Elements width | `int` || `h`      | Elements height | `int` |Example:```pythonfrom conlay import *layout = Conlay()thinbox = ThinBox(0, 0, 30, 5)layout.add(thinbox)layout.print()```Console output:```╭────────────────────────────╮│                            ││                            ││                            │╰────────────────────────────╯&gt;```## BoldBox()The `BoldBox()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#box&quot;&gt;Box()&lt;/a&gt; class and is used to create a simple box with a &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold()&lt;/a&gt; Border.Syntax:```pythonelement = BoldBox(x, y, w, h)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `w`      | Elements width | `int` || `h`      | Elements height | `int` |Example:```pythonfrom conlay import *layout = Conlay()boldbox = BoldBox(0, 0, 30, 5)layout.add(boldbox)layout.print()```Console output:```┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓┃                            ┃┃                            ┃┃                            ┃┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&gt;```## Label()The `Label()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElement()&lt;/a&gt; class and is used to create a simple box.Syntax:```pythonelement = Label(x, y, text, border)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `text`   | Text content | `str` || `border` | Borders character set | &lt;a href=&quot;https://github.com/Salliii/conlay#border&quot;&gt;Border()&lt;/a&gt; or one of its subclasses such as &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold()&lt;/a&gt; or &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin()&lt;/a&gt; |```pythonfrom conlay import *layout = Conlay()label = Label(0, 0, &quot;this is a test&quot;, Thin())layout.add(label)layout.print()```Console output:```╭──────────────╮│this is a test│╰──────────────╯&gt;```## ThinLabel()The `ThinLabel()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#label&quot;&gt;Label()&lt;/a&gt; class and is used to create a simple label with a &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin()&lt;/a&gt; Border.Syntax:```pythonelement = ThinLabel(x, y, text)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `text`   | Text content | `str` |```pythonfrom conlay import *layout = Conlay()thinlabel = ThinLabel(0, 0, &quot;this is a test&quot;)layout.add(thinlabel)layout.print()```Console output:```╭──────────────╮│this is a test│╰──────────────╯&gt;```## BoldLabel()The `BoldLabel()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#label&quot;&gt;Label()&lt;/a&gt; class and is used to create a simple label with a &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold()&lt;/a&gt; Border.Syntax:```pythonelement = BoldLabel(x, y, text)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `text`   | Text content | `str` |```pythonfrom conlay import *layout = Conlay()boldlabel = BoldLabel(0, 0, &quot;this is a test&quot;)layout.add(boldlabel)layout.print()```Console output:```┏━━━━━━━━━━━━━━┓┃this is a test┃┗━━━━━━━━━━━━━━┛&gt;```## Input()The `Input()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElement()&lt;/a&gt; class and is used to create a input field.Syntax:```pythonelement = Input(x, y, text, length, border)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `text`   | Text content | `str` || `length` | expected input length | `int` || `border` | Borders character set | &lt;a href=&quot;https://github.com/Salliii/conlay#border&quot;&gt;Border()&lt;/a&gt; or one of its subclasses such as &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold()&lt;/a&gt; or &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin()&lt;/a&gt; |```pythonfrom conlay import *layout = Conlay()input_element = Input(0, 0, &quot;input:&quot;, 10, Thin())layout.add(input_element)layout.print()```Console output:```╭────────────────╮│input:          │╰────────────────╯&gt;```after you've entered a text, you can get it with the element.content variable```pythonfrom conlay import *layout = Conlay()input_element = Input(0, 0, &quot;input:&quot;, 10, Thin())layout.add(input_element)layout.print()print(input_element.content)```## ThinInput()The `ThinInput()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#input&quot;&gt;Input()&lt;/a&gt; class and is used to create a simple input field with a &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin()&lt;/a&gt; Border.Syntax:```pythonelement = ThinInput(x, y, text, length)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `text`   | Text content | `str` || `length` | expected input length | `int` |```pythonfrom conlay import *layout = Conlay()input_element = ThinInput(0, 0, &quot;input:&quot;, 10)layout.add(input_element)layout.print()```Console output:```╭────────────────╮│input:          │╰────────────────╯&gt;```## BoldInput()The `BoldInput()` class is a subclass of the &lt;a href=&quot;https://github.com/Salliii/conlay#input&quot;&gt;Input()&lt;/a&gt; class and is used to create a simple input field with a &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold()&lt;/a&gt; Border.Syntax:```pythonelement = BoldInput(x, y, text, length)```| argument | description | expected type || :------- | :---------- | :------------ || `x`      | Relative x-position to its parent element | `int` || `y`      | Relative y-position to its parent element | `int` || `text`   | Text content | `str` || `length` | expected input length | `int` |```pythonfrom conlay import *layout = Conlay()input_element = BoldInput(0, 0, &quot;input:&quot;, 10)layout.add(input_element)layout.print()```Console output:```┏━━━━━━━━━━━━━━━━┓┃input:          ┃┗━━━━━━━━━━━━━━━━┛&gt;```## CursorThe `Cursor` class provides a few functions for simple &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape&lt;/a&gt; cursor actions.### Cursor.setPosition()Set the cursor to a specific position. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[&lt;y&gt;;&lt;x&gt;H`.Syntax:```pythonCursor.setPosition(x, y)```Example:```pythonCursor.setPosition(10, 5)```### Cursor.shiftHorizontal()Move the cursor along the X axis. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[&lt;x&gt;D` and `\x1b[&lt;x&gt;C`.Syntax:```pythonCursor.shiftHorizontal(x)```Example:```python# move the cursor 10 collumns to the rightCursor.shiftHorizontal(10)# move the cursor 5 collumns to the leftCursor.shiftHorizontal(-5)```### Cursor.shiftVertical()Move the cursor along the Y axis. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[&lt;y&gt;A` and `\x1b[&lt;y&gt;B`.Syntax:```pythonCursor.shiftVertical(y)```Example:```python# move the cursor 10 collumns downCursor.shiftVertical(10)# move the cursor 5 collumns upCursor.shiftVertical(-5)```### Cursor.hide()Hides the cursor. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[?25l`.Syntax:```pythonCursor.hide()```### Cursor.show()Shows the cursor. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[?25h`.Syntax:```pythonCursor.show()```## ConsoleThe `Console` class provides a few functions for simple &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape&lt;/a&gt; console actions.### Console.reset()This Function resets the console. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1bc`.Syntax:```pythonConsole.reset()```### Console.clear()This Function clears the console. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[3J`.Syntax:```pythonConsole.clear()```### Console.eraseLineToEnd()Erase the line from the cursor position to the end. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[0K`.Syntax:```pythonConsole.eraseLineToEnd()```### Console.eraseLineFromStart()Erase the line from start to the cursor position. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[1K`.Syntax:```pythonConsole.eraseLineFromStart()```### Console.eraseLine()Erase the line. The &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797&quot;&gt;Ansi Escape Sequence&lt;/a&gt; used for this command is `\x1b[2K`.Syntax:```pythonConsole.eraseLine()```## ColorThe `Color` class allows you to set the foreground and background color using the &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797#color-codes&quot;&gt;Ansi Escape Color Codes&lt;/a&gt;.### Color.BgThe `Color.Bg` class provides a few predefined background &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797#color-codes&quot;&gt;Ansi Escape Color Codes&lt;/a&gt;.| Variable Name   | rgb values    | ansi escape sequence     || :------------   | :---------    | :-------------------     || Color.Bg.black  |   0,   0,   0 | `\x1b[49m`               || Color.Bg.black  |   0,   0,   0 | `\x1b[48;2;0;0;0m`       || Color.Bg.white  | 255, 255, 255 | `\x1b[48;2;255;255;255m` || Color.Bg.red    | 205,  49,  49 | `\x1b[48;2;205;49;49m`   || Color.Bg.green  |  13, 188, 121 | `\x1b[48;2;13;188;121m`  || Color.Bg.blue   |  36, 114, 200 | `\x1b[48;2;36;114;200m`  || Color.Bg.yellow | 229, 229,  16 | `\x1b[48;2;229;229;16m`  || Color.Bg.purple | 188,  63, 188 | `\x1b[48;2;188;63;188m`  || Color.Bg.cyan   |  17, 168, 205 | `\x1b[48;2;17;168;205m`  |### Color.Bg.rgb()This function takes three arguments `r, g, b` and returns a customized background &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797#color-codes&quot;&gt;Ansi Escape Color Code&lt;/a&gt;Syntax:```pythonColor.Bg.rgb(r, g, b)```Example:```python&gt;&gt;&gt; Color.Bg.rgb(255, 0, 100)'\x1b[48;2;255;0;100m'```### Color.FgThe `Color.Fg` class provides a few predefined foreground &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797#color-codes&quot;&gt;Ansi Escape Color Codes&lt;/a&gt;.| Variable Name   | rgb values    | ansi escape sequence     || :------------   | :---------    | :-------------------     || Color.Bg.black  |   0,   0,   0 | `\x1b[39m`               || Color.Fg.black  |   0,   0,   0 | `\x1b[38;2;0;0;0m`       || Color.Fg.white  | 255, 255, 255 | `\x1b[38;2;255;255;255m` || Color.Fg.red    | 205,  49,  49 | `\x1b[38;2;205;49;49m`   || Color.Fg.green  |  13, 188, 121 | `\x1b[38;2;13;188;121m`  || Color.Fg.blue   |  36, 114, 200 | `\x1b[38;2;36;114;200m`  || Color.Fg.yellow | 229, 229,  16 | `\x1b[38;2;229;229;16m`  || Color.Fg.purple | 188,  63, 188 | `\x1b[38;2;188;63;188m`  || Color.Fg.cyan   |  17, 168, 205 | `\x1b[38;2;17;168;205m`  |### Color.Fg.rgb()This function takes three arguments `r, g, b` and returns a customized foreground &lt;a href=&quot;https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797#color-codes&quot;&gt;Ansi Escape Color Code&lt;/a&gt;Syntax:```pythonColor.Fg.rgb(r, g, b)```Example:```python&gt;&gt;&gt; Color.Fg.rgb(255, 0, 100)'\x1b[38;2;255;0;100m'```## BorderThe `Border()` class and its subclasses serve as a character set and define the required Unicode characters.| class attributes | unicode characters || :--------------- | :----------------- || `vertical`       | n/a                || `horizontal`     | n/a                || `top_left`       | n/a                || `top_right`      | n/a                || `bottom_left`    | n/a                || `bottom_right`   | n/a                |## Thin()The `Thin()` class is a subclass of &lt;a href=&quot;https://github.com/Salliii/conlay#border&quot;&gt;Border()&lt;/a&gt; and serves as a character set and defines the required thin Unicode characters.| class attributes | unicode characters || :--------------- | :----------------- || `vertical`       | `\u2503`           || `horizontal`     | `\u2501`           || `top_left`       | `\u250F`           || `top_right`      | `\u2513`           || `bottom_left`    | `\u2517`           || `bottom_right`   | `\u251B`           |## Bold()The `Bold()` class is a subclass of &lt;a href=&quot;https://github.com/Salliii/conlay#border&quot;&gt;Border()&lt;/a&gt; and serves as a character set and defines the required bold Unicode characters.| class attributes | unicode characters || :--------------- | :----------------- || `vertical`       | `\u2502`           || `horizontal`     | `\u2500`           || `top_left`       | `\u256D`           || `top_right`      | `\u256E`           || `bottom_left`    | `\u2570`           || `bottom_right`   | `\u256F`           |## Summary- &lt;a href=&quot;https://github.com/Salliii/conlay#conlay&quot;&gt;Conlay()&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#conlayadd&quot;&gt;_add()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#conlayprint&quot;&gt;_print()_&lt;/a&gt;##### Elements- &lt;a href=&quot;https://github.com/Salliii/conlay#layoutelement&quot;&gt;LayoutElement()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#box&quot;&gt;Box()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#thinbox&quot;&gt;ThinBox()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#boldbox&quot;&gt;BoldBox()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#label&quot;&gt;Label()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#thinlabel&quot;&gt;ThinLabel()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#boldlabel&quot;&gt;BoldLabel()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#input&quot;&gt;Input()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#thininput&quot;&gt;ThinInput()&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#boldinput&quot;&gt;BoldInput()&lt;/a&gt;##### Cursor &amp; Console- &lt;a href=&quot;https://github.com/Salliii/conlay#cursor&quot;&gt;Cursor&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#cursorsetposition&quot;&gt;_setPosition()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#cursorshifthorizontal&quot;&gt;_shiftHorizontal()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#cursorshiftvertical&quot;&gt;_shiftVertical()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#cursorhide&quot;&gt;_hide()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#cursorshow&quot;&gt;_show()_&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#console&quot;&gt;Console&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#consolereset&quot;&gt;_reset()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#consoleclear&quot;&gt;_clear()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#consoleeraselinetoend&quot;&gt;_eraseLineToEnd()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#consoleeraselinefromstart&quot;&gt;_eraseLineFromStart()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#consoleeraseline&quot;&gt;_eraseLine()_&lt;/a&gt;##### Coloring- &lt;a href=&quot;https://github.com/Salliii/conlay#color&quot;&gt;Color&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#colorbg&quot;&gt;Bg&lt;/a&gt;    - &lt;a href=&quot;https://github.com/Salliii/conlay#colorbgrgb&quot;&gt;_rgb()_&lt;/a&gt;  - &lt;a href=&quot;https://github.com/Salliii/conlay#colorfg&quot;&gt;Fg&lt;/a&gt;    - &lt;a href=&quot;https://github.com/Salliii/conlay#colorfgrgb&quot;&gt;_rgb()_&lt;/a&gt;##### Border &amp; Border Types- &lt;a href=&quot;https://github.com/Salliii/conlay#border&quot;&gt;Border&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#bold&quot;&gt;Bold&lt;/a&gt;- &lt;a href=&quot;https://github.com/Salliii/conlay#thin&quot;&gt;Thin&lt;/a&gt;## LicenseLicensed under the &lt;a href=&quot;https://github.com/Salliii/conlay/blob/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;!-- shields --&gt;[shields-pypi_version]: https://img.shields.io/pypi/v/conlay?label=PyPi%20Version&amp;style=for-the-badge[shields-issues]: https://img.shields.io/github/issues/Salliii/conlay?style=for-the-badge[shields-license]: https://img.shields.io/github/license/Salliii/conlay?style=for-the-badge&lt;!-- url --&gt;[url-pypi_version]: https://pypi.org/project/conlay/[url-issues]: https://github.com/Salliii/conlay/issues[url-license]: https://github.com/Salliii/conlay/blob/main/LICENSE</longdescription>
</pkgmetadata>