<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sbe-pythonEasy to use, fast, pure Python FIX [SBE](https://www.fixtrading.org/standards/sbe/) encoder and decoder.## Install```bashpip install sbe```## Usage### Simple DecodingDecode SBE to Python dictionaries in one line. Good for exploratory data analysis.```pythonimport sbewith open('your-schema.xml', 'r') as f:  schema = sbe.Schema.parse(f)wtih open('your-data.sbe', 'rb') as f:  buf = f.read()# Get a Python dict in one-linex = schema.decode(buf)x.name  # The template message namex.value# {'userId': 11,# 'timestamp': 1598784004840,# 'orderSize': 0,# 'price': 5678.0,# ...# If you need an initial offset, apply it Pythonicallyschema.decode(buf[19:])# decode_header to filter out messages based on header to avoid decoding# message bodies that are not neededschema.decode_header(buf)['templateId']```### High Performance Decoding (Wrapping)This gives you decent performance while still retaining high code readability.```pythonimport sbewith open('your-schema.xml', 'r') as f:  schema = sbe.Schema.parse(f)wtih open('your-data.sbe', 'rb') as f:  buf = f.read()# Wrap the buffer without decoding it, fields are converted to Python variables# on demandx = schema.wrap(buf)x.header['templateId']x.body['price']x.body['someGroup'][2]['price']```### Direct Access with Pointers`get_raw_pointer` gives you the required information to unpack a variable from `memoryview` / `bytes`. This gets you very close to the fastest achievable performance in Python:```pythonimport sbewith open('your-schema.xml', 'r') as f:  schema = sbe.Schema.parse(f)header_pointer = schema.header_wrapper.get_raw_pointer('templateId')# Let's say we are only interested in messages of templateId == 3price_pointer = schema.message_wrappers[3].get_raw_pointer('price')wtih open('your-data.sbe', 'rb') as f:  buf = f.read()# pass `memoryview` to `unpack` to avoid copyingbuf = memoryview(buf)[initial_offset:]template_id = header_pointer.unpack(buf)  # calls buf[offset:offset+size].cast(&quot;I&quot;)[0] directlyif template_id == 3:  print(price_pointer.unpack(buf))```### Encoding```pythonimport sbewith open('./your-schema.xml', 'r') as f:  schema = sbe.Schema.parse(f)# message_id from the schema you want to encodemessage_id = 3obj = {  'userId': 11,  'price': 5678.0,  # ...}# Encode from Python dict in one-lineschema.encode(schema.messages[3], obj)# You can supply your header values as a dictschema.encode(schema.messages[3], obj, headers)```</longdescription>
</pkgmetadata>