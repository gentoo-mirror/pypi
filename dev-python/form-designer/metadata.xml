<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================================================Form Designer - a simple form designer for Django=================================================.. image:: https://github.com/feincms/form_designer/workflows/Tests/badge.svg    :target: https://github.com/feincms/form_designerThis form designer does not try to offer every last configuration possibilityof Django's forms, just through the administration interface instead ofdirectly in Python code. Instead, it strives to be a tool which everyone canuse right away, without the need for long explanations.It offers a small set of predefined input fields such as:* Text fields (One line and multi line widgets possible)* E-mail address fields* Checkboxes* Dropdowns* Radio Buttons* Multiple selection checkboxes* Hidden input fieldsEvery field can optionally be declared mandatory, default values and help textsare available too. That's it.The default actions (which can be enabled individually) are to send the formdata to a list of freely definable email addresses and to store the data in thedatabase so that it can be exported later. An XLSX export of saved submissionsis provided too. It is possible to add your own actions as well.Installing the form designer============================Install the package using pip::    $ pip install form-designerSetting up the form designer============================- Add ``&quot;form_designer&quot;`` and ``&quot;admin_ordering&quot;`` to ``INSTALLED_APPS``.- Run ``./manage.py migrate form_designer``- Go into Django's admin panel and add one or more forms with the fields you  require. Also select at least one action in the configuration options  selectbox, most often you'd want to select both the &quot;E-mail&quot; and the  &quot;Save form submission&quot; option and fill in one ore more email addresses.If you're using the form designer with FeinCMS_, the content type can beimported from ``form_designer.contents.FormContent``. Otherwise, yourcode should use the following methods (the code would probably reside ina view):.. code-block:: python    # Somehow fetch the form_designer.models.Form instance:    instance = get_object_or_404()    # Build the form class:    form_class = instance.form_class()    # Standard form processing:    if request.method == &quot;POST&quot;:        form = form_class(request.POST)        if form.is_valid():            # Do what you want, or run the configured processors:            result = instance.process(form, request)            # Maybe there's something useful in here:            pprint(result)            return HttpResponseRedirect(&quot;thanks/&quot;)    else:        form = form_class()    return render(request, &quot;form.html&quot;, {&quot;form&quot;: form})Adding custom actions=====================Custom actions can be added by appending them to``Form.CONFIG_OPTIONS``:.. code-block:: python    from form_designer.models import Form    def do_thing(model_instance, form_instance, request, config, **kwargs):        pass    def do_validate(form_instance, data):        pass    Form.CONFIG_OPTIONS.append(        (            &quot;do_thing&quot;,            {                &quot;title&quot;: _(&quot;Do a thing&quot;),                &quot;form_fields&quot;: lambda form: [                    (&quot;optional_form_field&quot;, forms.CharField(                        label=_(&quot;Optional form field&quot;),                        required=False,                        # validators...                        # help_text...                    )),                ],                &quot;process&quot;: do_thing,                &quot;validate&quot;: do_validate,            },        )    )The interesting part is the ``do_thing`` callable. It currently receivesfour arguments, however you should also accept ``**kwargs`` to supportadditional arguments added in the future:- ``model_instance``: The ``Form`` model instance- ``form_instance``: The dynamically generated form instance- ``request``: The current HTTP request- ``config``: The config options (keys and values defined through  ``form_fields``; for example the ``email`` action defines an ``email``  char field, and accesses its value using ``config[&quot;email&quot;]``.ReCaptcha=========To enable [ReCaptcha](http://www.google.com/recaptcha) install[django-recaptcha](https://github.com/praekelt/django-recaptcha) and add`captcha` to your `INSTALLED_APPS`. This will automatically add a ReCaptchafield to the form designer. For everything else read through thedjango-recaptcha readme.Override field types====================Define ``FORM_DESIGNER_FIELD_TYPES`` in your settings file like:.. code-block:: python    FORM_DESIGNER_FIELD_TYPES = &quot;your_project.form_designer_config.FIELD_TYPES&quot;In ``your_project.form_designer_config.py`` something like:.. code-block:: python    from django import forms    from django.utils.translation import gettext_lazy as _    FIELD_TYPES = [        {&quot;type&quot;: &quot;text&quot;, &quot;verbose_name&quot;: _(&quot;text&quot;), &quot;field&quot;: forms.CharField},        {&quot;type&quot;: &quot;email&quot;, &quot;verbose_name&quot;: _(&quot;email address&quot;), &quot;field&quot;: forms.EmailField},    ]Visit these sites for more information======================================* form_designer: https://github.com/feincms/form_designer* FeinCMS: http://www.feinheit.ch/labs/feincms-django-cms/* feincms3: https://feincms3.readthedocs.io/.. _django-admin-ordering: https://github.com/matthiask/django-admin-ordering.. _FeinCMS: https://feincms-django-cms.readthedocs.io/</longdescription>
</pkgmetadata>