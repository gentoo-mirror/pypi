<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flaretool**flaretool** is flarebrow Library.![License](https://img.shields.io/github/license/flarebrow/flaretool)[![python](https://img.shields.io/badge/python-%3E%3D3.9-blue)](https://github.com/flarebrow/flaretool)![CodeSize](https://img.shields.io/github/languages/code-size/flarebrow/flaretool)[![version](https://img.shields.io/github/v/release/flarebrow/flaretool?include_prereleases)](https://github.com/flarebrow/flaretool/releases/latest)[![ReleaseDate](https://img.shields.io/github/release-date/flarebrow/flaretool)](https://github.com/flarebrow/flaretool/releases/latest)![build](https://img.shields.io/github/actions/workflow/status/flarebrow/flaretool/auto_test.yml)![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/flarebrow/e31fc348a9dea0098de9540dc5961668/raw/pytest-coverage-3.9.json)[![Downloads](https://static.pepy.tech/badge/flaretool)](https://pepy.tech/project/flaretool)[API Doc](https://flarebrow.github.io/flaretool/)**Attention**This library is under development and may exhibit unexpected behavior. New features will be released soon. Please stay tuned.## install```bashpip install flaretool```## NetTool usage[NetTool Usage Document](https://flarebrow.github.io/flaretool/flaretool.nettool.html)### NetTool Examples of usage```pythonfrom flaretool import nettool# 指定されたIPアドレスの情報を取得する例ip_info = nettool.get_global_ipaddr_info(&quot;192.168.0.1&quot;)print(&quot;ip:&quot;, ip_info.ipaddr)print(&quot;hostname:&quot;, ip_info.hostname)print(&quot;country:&quot;, ip_info.country)# 出力例：# ip: 192.168.0.1# hostname: example.com# country: earth# ドメイン名からIPアドレスを取得する例ip_address = nettool.lookup_ip(&quot;example.com&quot;)print(ip_address)  # 123.456.789.001# IPアドレスからドメイン名を取得する例domain_name = nettool.lookup_domain(&quot;1.1.1.1&quot;)print(domain_name)  # one.one.one.one# 指定されたIPアドレスが指定されたネットワークに属しているかどうかを判定する例allowed_networks = [&quot;192.168.0.0/24&quot;, &quot;10.0.0.0/16&quot;]is_allowed = nettool.is_ip_in_allowed_networks(    &quot;192.168.0.100&quot;, allowed_networks)print(is_allowed)  # True# 指定されたドメイン名が存在するかどうかを判定する例domain_exists = nettool.domain_exists(&quot;example.com&quot;)print(domain_exists)  # True# 日本のIPアドレスのリストを取得する例japan_ips = nettool.get_japanip_list()print(japan_ips)# 指定されたアドレスが日本のIPアドレスか確認する例is_japan = nettool.is_japan_ip(&quot;203.0.113.1&quot;)print(is_japan)  # False# 日本語を含むドメインをpunycodeに変換する例puny_info = nettool.get_puny_code(&quot;日本語ドメイン.jp&quot;)print(&quot;originalvalue:&quot;, puny_info.originalvalue)print(&quot;encodevalue:&quot;, puny_info.encodevalue)print(&quot;decodevalue:&quot;, puny_info.decodevalue)# 出力例：# originalvalue: 日本語ドメイン.jp# encodevalue: xn--eckwd4c7c5976acvb2w6i.jp# decodevalue: 日本語ドメイン.jp# 特定のユーザーエージェントでスクレイピング可否を確認する例url = &quot;http://example.com/page.html&quot;user_agent = &quot;MyScraperBot&quot;allowed = nettool.is_scraping_allowed(url, user_agent) # user_agentはオプション引数if allowed:    print(f&quot;{url} はユーザーエージェント '{user_agent}' でのスクレイピングが許可されています。&quot;)else:    print(f&quot;{url} はユーザーエージェント '{user_agent}' でのスクレイピングが禁止されています。&quot;)```### NetTool Command Examples of usage```bashflaretool nettool get_global_ipaddr_info# usage# flaretool nettool {FunctionName} [args...]```All methods within NetTool can be executed as commands.### Help Command```bashflaretool nettool -h```## String utills usage[String Utills Usage Document](https://flarebrow.github.io/flaretool/flaretool.html#module-flaretool.utills)```pythonfrom flaretool import utillsfrom flaretool.utills import ConversionMode# 文字列変換# 半角value = &quot;１２３４５６７８９６７８９&quot;result = utills.convert_value(value)print(result)  # &quot;1234567896789&quot;# 全角value = &quot;Hello&quot;result = utills.convert_value(value, ConversionMode.FULL_WIDTH)print(result)  # &quot;Ｈｅｌｌｏ&quot;# 文字列のみ半角value = &quot;ＡＢＣａｂｃ１２３&quot;result = utills.convert_value(    value, ascii=True, digit=False, kana=False)print(result)  # &quot;ABCabc１２３&quot;# 小文字value = &quot;ABCabc&quot;result = utills.convert_value(    value, ConversionMode.LOWER)print(result)  # &quot;abcabc&quot;# 大文字value = &quot;ABCabc&quot;result = utills.convert_value(    value, ConversionMode.UPPER)print(result)  # &quot;ABCABC&quot;```## JapaneseHoliday Examples of usage[Holiday Usage Document](https://flarebrow.github.io/flaretool/flaretool.holiday.html#module-flaretool.holiday)Supports from 1980/01/01 to 2024/12/31.```python# オフライン版from flaretool.holiday import JapaneseHolidays# オンライン版from flaretool.holiday import JapaneseHolidaysOnlineimport datetime# JapaneseHolidaysクラスのインスタンスを作成holidays = JapaneseHolidays()# オンライン版を使う場合はこちら# holidays = JapaneseHolidaysOnline()# 特定の日付が祝日かどうかを判定(date型)date = datetime.date(2023, 1, 1)is_holiday = holidays.get_holiday_name(date)print(is_holiday)  # &quot;元日&quot; が出力される# 特定の日付が祝日かどうかを判定(str型)date = &quot;2023/1/1&quot;is_holiday = holidays.get_holiday_name(date)print(is_holiday)  # &quot;元日&quot; が出力される# 特定の日付が祝日かどうかを判定(祝日ではない場合)date = &quot;2023/1/3&quot;is_holiday = holidays.get_holiday_name(date)print(is_holiday)  # None が出力される# 特定の期間内の祝日一覧を取得start_date = datetime.date(2023, 1, 1)end_date = datetime.date(2023, 12, 31)holiday_list = holidays.get_holidays_in_range(start_date, end_date)for holiday in holiday_list:    print(holiday)# 出力例:# (&quot;元日&quot;, datetime.date(2023, 1, 1))# (&quot;元日（振替休日）&quot;, datetime.date(2023, 1, 2))# (&quot;成人の日&quot;, datetime.date(2023, 1, 9))# (&quot;建国記念の日&quot;, datetime.date(2023, 2, 11))# ...# 2023年の祝日を取得holiday_list = holidays.get_holidays(&quot;2023&quot;)for holiday in holiday_list:    print(holiday)# 出力例:# (&quot;元日&quot;, datetime.date(2023, 1, 1))# (&quot;元日（振替休日）&quot;, datetime.date(2023, 1, 2))# (&quot;成人の日&quot;, datetime.date(2023, 1, 9))# (&quot;建国記念の日&quot;, datetime.date(2023, 2, 11))# ...# 2023年5月の祝日を取得holiday_list = holidays.get_holidays(&quot;202305&quot;)for holiday in holiday_list:    print(holiday)# 出力例:# ('憲法記念日', datetime.date(2023, 5, 3))# ('みどりの日', datetime.date(2023, 5, 4))# ('こどもの日', datetime.date(2023, 5, 5))# 営業日を取得(7月)date = datetime.date(2023, 7, 1)## 第1営業日を取得business_day = holidays.get_first_business_day(date)print(business_day)  # &quot;2023-07-03&quot; が出力される## 第4営業日を取得business_day = holidays.get_first_business_day(date, 4)print(business_day)  # &quot;2023-07-06&quot; が出力される## 最終営業日を取得business_day = holidays.get_last_business_day(date)print(business_day)  # &quot;2023-07-31&quot; が出力される# 特定期間内の営業日のリストを取得business_days = holidays.get_business_date_range(start_date, end_date)for business_day in business_days:    print(business_day)# 出力例:# 2023-01-03# 2023-01-04# 2023-01-05# ...```## Decorator Examples of usage[Decorator Usage Document](https://flarebrow.github.io/flaretool/flaretool.html#module-flaretool.decorators)```pythonfrom flaretool.errors import FlareToolNetworkErrorfrom flaretool.decorators import network_required, retry, repeat# ネットワーク接続を必須とするデコレーター@network_requireddef network_access(url):    # ネットワークに接続されている場合に実行する処理    response = requests.get(url)    return response.json()def main():    try:        network_access()    except FlareToolNetworkError:        # ネットワークに接続されていない場合の処理        pass# 例外が発生した場合にリトライを行うデコレーター@retry(max_attempts=3, delay=2) # 2秒毎に3回までリトライ# @retry(3) # ←この場合は1秒毎に3回までリトライdef retry_function():    pass# 複数回実行を行うデコレーター@repeat(repeat_count=3, interval=2) # 2秒毎に3回メソッドを実行# @repeat(2) # ←この場合は連続で2回実行def repeat_function():    # 強制的に実行を止めたい場合はStopIterationをraiseさせる    if 複数回の実行をとめたい条件:        raise StopIteration(&quot;Stop the loop!&quot;)    pass```# Flarebrow ServiceThere are the following services available:1. Short URL service: This service allows you to shorten URLs.2. DDNS (Dynamic DNS) service: This service provides Dynamic DNS functionality.To use this class, you need to set up an API key.## Configuration API KeyThe library you are using relies on an API key to communicate with an external service. To securely store the API key, it needs to be defined either as an environment variable or in a `.env` file or script setting. Please follow the instructions below:### Using an script setting:```pythonimport flaretoolflaretool.api_key = &quot;your_api_key_here&quot;```### Using an environment variable:   Set the API key as an environment variable using the following variable name:   - API_KEY   Example of defining an environment variable (Linux/macOS):   ```bash   export API_KEY=your_api_key_here   ```   Example of defining an environment variable (Windows):   ```bat   set API_KEY=your_api_key_here   ```### Using a `.env` file:   Create a `.env` file in the root directory of your project and define the API key as follows:   ```env   API_KEY=your_api_key_here   ```   The library will read the API key from the `.env` file.You need to log in to the external service's account to obtain an API key. Be careful not to share your API key with others, and avoid committing the `.env` file to a public version control system.Please refer to the documentation of the library you are using to find the specific instructions for setting the API key and the exact name of the environment variable.## ShortURL Service Usage[ShortURL Usage Document](https://flarebrow.github.io/flaretool/flaretool.shorturl.html#module-flaretool.shorturl)```pythonfrom flaretool.shorturl import ShortUrlServiceshorturl = ShortUrlService()# 新規登録result = shorturl.create_short_url(&quot;https://example.com&quot;)print(&quot;ShortLink:&quot;, result.link)   # https://○○○/○○○print(&quot;OriginalURL:&quot;, result.url)  # https://example.com# 情報取得result = shorturl.get_short_url_info_list(result.id)[0]print(&quot;ShortLink:&quot;, result.link)   # https://○○○/○○○print(&quot;OriginalURL:&quot;, result.url)  # https://example.com# 更新result.url = &quot;https://example.com/sample&quot;result = shorturl.update_short_url(result)print(&quot;ShortLink:&quot;, result.link)   # https://○○○/○○○print(&quot;OriginalURL:&quot;, result.url)  # https://example.com/sample# 削除shorturl.delete_short_url(result)# QRコード取得image_data = shorturl.get_qr_code_raw_data(result)image_path = &quot;image.png&quot;with open(image_path, 'wb') as image_file:    image_file.write(image_data) # image.png にQRコード画像が保存されます# ※ QRコードは(株)デンソーウェーブの登録商標です```## Dynamic DNS Service Usage[Dynamic DNS Usage Document](https://flarebrow.github.io/flaretool/flaretool.ddns.html#module-flaretool.ddns)```pythonfrom flaretool.ddns import DdnsServiceservice = DdnsService()info = service.update_ddns(&quot;example&quot;, &quot;192.168.0.100&quot;)print(info.status)    # successfulprint(info.currentIp) # 192.168.0.99print(info.updateIp)  # 192.168.0.100print(info.domain)    # example.○○○.○○```</longdescription>
</pkgmetadata>