<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HorkosA library for validating data at the edges of data systems.## Install```pip install horkos```## DocumentationDetailed documentation can be found on [Read the Docs](https://horkos.readthedocs.io/en/latest/).## UsageFirst define the data schema:```yaml# http-requests-schema.yamlname: &quot;http_requests&quot;description: &gt;-  This is the http request event data set, it is all about http requests we  receive. It's important to include as much information about it  as is reasonable. The hardest thing about data is understanding it after  the fact.fields:  path:    type: string    description: &gt;-      The path of the url that was hit. This will be everything after the      host portion of the url.  params:    type: string    nullable: true    checks:      - json    description: &gt;-      The parameters of the http request. If the method is a `GET` these come      from the url otherwise they are the JSON from the request body.  method:    type: string    checks:      - name: choice        args:          options:            - DELETE            - GET            - HEAD            - OPTIONS            - PATCH            - POST            - PUT    description: &gt;-      The http method of the request. Must be one of:      `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, or `PUT`.  response_code:    type: integer    description: The http response code of the request  timestamp:    type: string    checks:      - iso_timestamp    description: The time at which the http request was received.```To use this schema to validate records:```pythonimport horkosschema = horkos.load_schema('http-requests-schema.yaml')schema.process({'path': '/foo/bar'})# RecordValidationError: Casting errors - params is required, method is required, ...schema.process({    'path': '/foo/bar',    'params': '{&quot;foo&quot;: &quot;bar&quot;}',    'method': 'BAD',    'response_code': '200',    'timestamp': '2020-06-15T12:34:56',})# RecordValidationError: Check errors - &quot;BAD&quot; in method did not pass choice check, ...schema.process({    'path': '/foo/bar',    'params': '{&quot;foo&quot;: &quot;bar&quot;}',    'method': 'GET',    'response_code': '200',    'timestamp': '2020-06-15T12:34:56',})# {..., 'response_code': 200, ...}```## CLIIt's also possible to use `horkos` via cli to validate `csv` and `json` files.```csvpath,params,method,response_code,timestamp/foo/bar,,GET,200,2020-06-15T12:34:56/fizbuz,{&quot;param&quot;:&quot;value&quot;},POST,200,2020-12-15T12:34:56/fizbuz,,ERROR,500,2020-12-15T12:34:56/fizbuz,,GET,BAD,2020-12-15T12:34:56```To validate the csv run:```$ horkos check -s http-requests-schema.yaml data.csv[Row 2]: Check errors - value of &quot;ERROR&quot; for method did not pass choice check[Row 3]: Casting errors - value of &quot;BAD&quot; for response_code could not be cast to integer2 errors found```</longdescription>
</pkgmetadata>