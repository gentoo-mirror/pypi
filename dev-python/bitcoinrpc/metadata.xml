<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bitcoin-python-async-rpcLightweight Bitcoin async JSON-RPC Python client.Serves as a tiny layer between an application and a Bitcoin daemon, its primary usageis querying the current state of Bitcoin blockchain, network stats, transactions...If you want complete Bitcoin experience in Python, consult[python-bitcoinlib](https://github.com/petertodd/python-bitcoinlib).## Installation```bash$ pip install bitcoinrpc```## Supported methodsHere is a list of supported methods, divided by their categories. Should you needmethod not implemented, wrap the call in `BitcoinRPC.acall(&lt;your_method&gt;, ...)` coroutine.### Blockchain|   Method   |   Supported?     ||------------|:----------------:|| `getbestblockhash` | ✔ || `getblock` | ✔ || `getblockchaininfo` | ✔ || `getblockcount` | ✔ || `getblockhash` | ✔ || `getblockheader` | ✔ || `getblockstats` | ✔ || `getchaintips` | ✔ || `getdifficulty` | ✔ || `getmempoolinfo` | ✔ || `getnetworkhashps` | ✔ |### Mining|   Method   |   Supported?     ||------------|:----------------:|| `getmininginfo` | ✔ |### Network|   Method   |   Supported?     ||------------|:----------------:|| `getconnectioncount` | ✔ || `getnetworkinfo` | ✔ |### Raw transactions|   Method   |   Supported?     ||------------|:----------------:|| `getrawtransaction` | ✔ |## UsageMinimal illustration (assuming Python 3.8+, where you can run `async` code in console)```$ python -m asyncio&gt;&gt;&gt; import asyncio&gt;&gt;&gt;&gt;&gt;&gt; from bitcoinrpc import BitcoinRPC&gt;&gt;&gt; rpc = BitcoinRPC(&quot;http://localhost:18443&quot; &quot;rpc_user&quot;, &quot;rpc_passwd&quot;)&gt;&gt;&gt; await rpc.getconnectioncount()10&gt;&gt;&gt; await rpc.aclose()  # Clean-up resource```You can also use the `BitcoinRPC` as an asynchronous context manager, which doesall the resource clean-up automatically, as the following example shows:```$ cat btc_rpc_minimal.pyimport asynciofrom bitcoinrpc import BitcoinRPCasync def main():    async with BitcoinRPC(&quot;http://localhost:18443&quot;, &quot;rpc_user&quot;, &quot;rpc_password&quot;) as rpc:        print(await rpc.getconnectioncount())if __name__ == &quot;__main__&quot;:    asyncio.run(main())```Running this script yields:```$ python btc_rpc_minimal.py10```## Changelog- **2021/12/28 - 0.5.0** change the signature of `BitcoinRPC` from `host, port, ...` to `url, ...`, delegating the creation of the node url to the caller.## LicenseMIT</longdescription>
</pkgmetadata>