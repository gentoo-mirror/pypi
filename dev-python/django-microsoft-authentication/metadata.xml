<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django microsoft authenticationIt is a very simple app which uses Microsoft authentication for user login and admin panel login. It uses the Microsoft authentication library for Python (msal).## InstallationStandard pip install:```bashpip install django-microsoft-authentication```## Configuration* First create an App in https://portal.azure.com/#home. There one needs to create set up for authentication. The details can be found here:   * https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-protect-backend-with-aad  * https://docs.microsoft.com/en-us/azure/app-service/configure-authentication-provider-microsoft* Add the following microsoft app authentication configuration to settings.py file. (e.g. below, please replace redirect and logout_uri with correct domain)```pythonMICROSOFT = {    &quot;app_id&quot;: &quot;YOUR_APP_ID_HERE&quot;,    &quot;app_secret&quot;: &quot;YOUR_APP_SECRET_HERE&quot;,    &quot;redirect&quot;: &quot;http://localhost:8000/microsoft_authentication/callback&quot;,    &quot;scopes&quot;: [&quot;user.read&quot;],    &quot;authority&quot;: &quot;https://login.microsoftonline.com/common&quot;,  # or using tenant &quot;https://login.microsoftonline.com/{tenant}&quot;,    &quot;valid_email_domains&quot;: [&quot;&lt;list_of_valid_domains&gt;&quot;],    &quot;logout_uri&quot;: &quot;http://localhost:8000/admin/logout&quot;}```* Add the following line to settings.py to change the LOGIN_URL and LOGIN_REDIRECT_URL settings. ```pythonLOGIN_URL = &quot;/microsoft_authentication/login&quot;LOGIN_REDIRECT_URL = &quot;/admin&quot;  # optional and can be changed to any other url# True: creates new Django User after valid microsoft authentication. # False: it will only allow those users which are already created in Django User model and # will validate the email using Microsoft.MICROSOFT_CREATE_NEW_DJANGO_USER = True  # Optional, default value is TrueMICROSOFT_NEW_DJANGO_USER_IS_STAFF = True  # Optional, default value is True```* Add 'microsoft_authentication' to INSTALLED_APPS* Add the following to the project/urls.py```pythonfrom django.contrib import adminfrom django.urls import path, includeurlpatterns = [    path('admin/', admin.site.urls),    # Add the following line    path('microsoft_authentication/', include('microsoft_authentication.urls'))]```* In templates \  Use &quot;{% url 'microsoft_authentication:microsoft_authentication_login' %}&quot; as login url \  Use &quot;{% url 'microsoft_authentication:microsoft_authentication_logout' %}&quot; as logout url## How it works?1. It authenticates the user using their microsoft email and microsoft authentication.2. It also verifies if the domain of the microsoft authenticated email is also in MICROSOFT[&quot;valid_email_domains&quot;] 3. After the first two steps of authentication, if the user is not found, it creates a new user but with no access to any apps in admin panel.4. Superusers can assign User Groups to the users for Group based access to views.## QuickstartThis app provides a decorator which can be used as follows:```pythonfrom django.http import HttpResponsefrom microsoft_authentication.auth.auth_decorators import microsoft_login_required@microsoft_login_required()def home(request):    return HttpResponse(&quot;Logged in&quot;)# If pages need to be restricted to certain groups of users.@microsoft_login_required(groups=(&quot;SpecificGroup1&quot;, &quot;SpecificGroup2&quot;))  # Add here the list of Group namesdef specific_group_access(request):    return HttpResponse(&quot;You are accessing page which is accessible only to users belonging to SpecificGroup1 or SpecificGroup2&quot;)```### Troubleshooting during development* Use http://localhost:8000 instead of http://127.0.0.1:8000 because session cookies   are set differently for these urls.</longdescription>
</pkgmetadata>