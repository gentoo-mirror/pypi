<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># &lt;a href=&quot;https://github.com/unitaryfund/mitiq&quot;&gt;&lt;img src=&quot;https://github.com/unitaryfund/mitiq/blob/master/docs/source/img/mitiq-logo.png?raw=true&quot; alt=&quot;Mitiq logo&quot; width=&quot;350&quot;/&gt;&lt;/a&gt;[![build](https://github.com/unitaryfund/mitiq/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/unitaryfund/mitiq/actions)[![Documentation Status](https://readthedocs.org/projects/mitiq/badge/?version=stable)](https://mitiq.readthedocs.io/en/stable/)[![codecov](https://codecov.io/gh/unitaryfund/mitiq/branch/master/graph/badge.svg)](https://codecov.io/gh/unitaryfund/mitiq)[![PyPI version](https://badge.fury.io/py/mitiq.svg)](https://badge.fury.io/py/mitiq)[![arXiv](https://img.shields.io/badge/arXiv-2009.04417-&lt;COLOR&gt;.svg)](https://arxiv.org/abs/2009.04417)[![Downloads](https://static.pepy.tech/personalized-badge/mitiq?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=green&amp;left_text=Downloads)](https://pepy.tech/project/mitiq)[![Repository](https://img.shields.io/badge/GitHub-5C5C5C.svg?logo=github)](https://github.com/unitaryfund/mitiq)[![Unitary Fund](https://img.shields.io/badge/Supported%20By-Unitary%20Fund-FFFF00.svg)](https://unitary.fund)[![Discord Chat](https://img.shields.io/badge/dynamic/json?color=blue&amp;label=Discord&amp;query=approximate_presence_count&amp;suffix=%20online.&amp;url=https%3A%2F%2Fdiscord.com%2Fapi%2Finvites%2FJqVGmpkP96%3Fwith_counts%3Dtrue)](http://discord.unitary.fund)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/unitaryfund/mitiq/master?urlpath=%2Ftree%2Fdocs%2Fsource%2Fexamples)Mitiq is a Python toolkit for implementing error mitigation techniques onquantum computers.Current quantum computers are noisy due to interactions with the environment,imperfect gate applications, state preparation and measurement errors, etc.Error mitigation seeks to reduce these effects at the software level bycompiling quantum programs in clever ways.Want to know more? Check out our[documentation](https://mitiq.readthedocs.io/en/stable/guide/guide.html) and chat with us on [Discord](http://discord.unitary.fund).## Quickstart### Installation```bashpip install mitiq```### ExampleDefine a function which inputs a circuit and returns an expectation value you want to compute, then use Mitiq to mitigate errors.```pythonimport cirqfrom mitiq import zne, benchmarksdef execute(circuit, noise_level=0.005):    &quot;&quot;&quot;Returns Tr[ρ |0⟩⟨0|] where ρ is the state prepared by the circuit    with depolarizing noise.&quot;&quot;&quot;    noisy_circuit = circuit.with_noise(cirq.depolarize(p=noise_level))    return (        cirq.DensityMatrixSimulator()        .simulate(noisy_circuit)        .final_density_matrix[0, 0]        .real    )circuit = benchmarks.generate_rb_circuits(n_qubits=1, num_cliffords=50)[0]true_value = execute(circuit, noise_level=0.0)      # Ideal quantum computernoisy_value = execute(circuit)                      # Noisy quantum computerzne_value = zne.execute_with_zne(circuit, execute)  # Noisy quantum computer + Mitiqprint(f&quot;Error w/o  Mitiq: {abs((true_value - noisy_value) / true_value):.3f}&quot;)print(f&quot;Error w Mitiq:    {abs((true_value - zne_value) / true_value):.3f}&quot;)```Sample output:```Error w/o  Mitiq: 0.264Error w Mitiq:    0.073```### CalibrationUnsure which error mitigation technique or parameters to use?Try out the calibration module demonstrated below to help find the best parameters for you particular backend!![](docs/source/img/calibration.gif)See our [guides](https://mitiq.readthedocs.io/en/stable/guide/guide.html) and [examples](https://mitiq.readthedocs.io) for more explanation, techniques, and benchmarks.The examples and other notebooks can be run interactively on the cloud with [mybinder.org](https://mybinder.org/v2/gh/unitaryfund/mitiq/master?filepath=%2Fdocs%2Fsource%2Fexamples).## Quick Tour### Error mitigation techniques| Technique                                 | Documentation                                                | Mitiq module                                                              | Paper Reference(s)                                                                                                                                 || ----------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- || Zero-noise extrapolation                  | [ZNE](https://mitiq.readthedocs.io/en/latest/guide/zne.html) | [`mitiq.zne`](https://github.com/unitaryfund/mitiq/tree/master/mitiq/zne) | [1611.09301](https://arxiv.org/abs/1611.09301)&lt;br&gt;[1612.02058](https://arxiv.org/abs/1612.02058)&lt;br&gt;[1805.04492](https://arxiv.org/abs/1805.04492) || Probabilistic error cancellation          | [PEC](https://mitiq.readthedocs.io/en/latest/guide/pec.html) | [`mitiq.pec`](https://github.com/unitaryfund/mitiq/tree/master/mitiq/pec) | [1612.02058](https://arxiv.org/abs/1612.02058)&lt;br&gt;[1712.09271](https://arxiv.org/abs/1712.09271)&lt;br&gt;[1905.10135](https://arxiv.org/abs/1905.10135) || (Variable-noise) Clifford data regression | [CDR](https://mitiq.readthedocs.io/en/latest/guide/cdr.html) | [`mitiq.cdr`](https://github.com/unitaryfund/mitiq/tree/master/mitiq/cdr) | [2005.10189](https://arxiv.org/abs/2005.10189)&lt;br&gt;[2011.01157](https://arxiv.org/abs/2011.01157)                                                   || Digital dynamical decoupling              | [DDD](https://mitiq.readthedocs.io/en/latest/guide/ddd.html) | [`mitiq.ddd`](https://github.com/unitaryfund/mitiq/tree/master/mitiq/ddd) | [9803057](https://arxiv.org/abs/quant-ph/9803057)&lt;br&gt;[1807.08768](https://arxiv.org/abs/1807.08768)                                                || Readout-error mitigation                  | [REM](https://mitiq.readthedocs.io/en/latest/guide/rem.html) | [`mitiq.rem`](https://github.com/unitaryfund/mitiq/tree/master/mitiq/rem) | [1907.08518](https://arxiv.org/abs/1907.08518) &lt;br&gt;[2006.14044](https://arxiv.org/abs/2006.14044)                                                  |See our [roadmap](https://github.com/unitaryfund/mitiq/wiki) for additional candidate techniques to implement. If there is a technique you are looking for, please file a [feature request](https://github.com/unitaryfund/mitiq/issues/new?assignees=&amp;labels=feature-request&amp;template=feature_request.md&amp;title=).### InterfaceWe refer to any programming language you can write quantum circuits in as a _frontend_, and any quantum computer / simulator you can simulate circuits in as a _backend_.#### Supported frontends| [Cirq](https://quantumai.google/cirq)                                                                                                                                         | [Qiskit](https://qiskit.org/)                                                                                         | [pyQuil](https://github.com/rigetti/pyquil)                                                                                                             | [Braket](https://github.com/aws/amazon-braket-sdk-python)                                                                                                                         | [PennyLane](https://pennylane.ai/)                                                                                                  || ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- || &lt;a href=&quot;https://quantumai.google/cirq&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/quantumlib/Cirq/master/docs/images/Cirq_logo_color.png&quot; alt=&quot;Cirq logo&quot; width=&quot;130&quot;/&gt;&lt;/a&gt; | &lt;a href=&quot;https://qiskit.org/&quot;&gt;&lt;img src=&quot;https://qiskit.org/images/qiskit-logo.png&quot; alt=&quot;Qiskit logo&quot; width=&quot;80&quot;/&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/rigetti/pyquil&quot;&gt;&lt;img src=&quot;https://www.rigetti.com/uploads/Logos/logo-rigetti-gray.jpg&quot; alt=&quot;Rigetti logo&quot; width=&quot;150&quot;/&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/aws/amazon-braket-sdk-python&quot;&gt;&lt;img src=&quot;https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png&quot; alt=&quot;AWS logo&quot; width=&quot;150&quot;/&gt;&lt;/a&gt; | &amp;nbsp;&amp;nbsp; &lt;a href=&quot;https://pennylane.ai/&quot;&gt;&lt;img src=&quot;https://pennylane.ai/img/xanadu_x.png&quot; alt=&quot;PennyLane logo&quot; width=&quot;60&quot;/&gt;&lt;/a&gt; |Note: Cirq is a core requirement of Mitiq and is installed when you `pip install mitiq`.#### Supported backendsYou can use Mitiq with any backend you have access to that can interface with supported frontends.### BenchmarksMitiq uses [`asv`](https://asv.readthedocs.io/en/stable/) to benchmark the core functionalities of the project.They are found in the [`benchmarks/`](https://github.com/unitaryfund/mitiq/tree/master/benchmarks) directory and their changes can be seen overtime at https://benchmarks.mitiq.dev/.### Citing MitiqIf you use Mitiq in your research, please reference the [Mitiq whitepaper](https://quantum-journal.org/papers/q-2022-08-11-774/) using the bibtex entry found in [`CITATION.bib`](https://github.com/unitaryfund/mitiq/blob/master/CITATION.bib).A list of papers citing Mitiq can be found on [Google Scholar](https://scholar.google.com/scholar?cites=12810395086731011605) / [Semantic Scholar](https://www.semanticscholar.org/paper/Mitiq%3A-A-software-package-for-error-mitigation-on-LaRose-Mari/dc55b366d5b2212c6df8cd5c0bf05bab13104bd7#citing-papers).## License[GNU GPL v.3.0.](https://github.com/unitaryfund/mitiq/blob/master/LICENSE)## ContributingWe welcome contributions to Mitiq including bug fixes, feature requests, etc. To get started, check out our [contributionguidelines](https://mitiq.readthedocs.io/en/stable/toc_contributing.html) and/or [documentation guidelines](https://mitiq.readthedocs.io/en/stable/contributing_docs.html).## Contributors ✨Thank you to all of the [wonderful people](https://github.com/unitaryfund/mitiq/graphs/contributors) that have made this project possible.Non-code contributors are also much appreciated, and are listed here.Thank you to- [@francespoblete](https://github.com/francespoblete) for much of Mitiq's design work/visionContributions of any kind are welcome!</longdescription>
</pkgmetadata>