<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dutilA few data utilities to make life of a data scientist easier## Installation```shellpip install dutil```## Modules- `pipeline` (data caching and pipelines)- `stats` (statistical functions)- `string` (string manipulations)- `transform` (data transformations)- `jupyter` (tools for jupyter notebooks)### Pipeline```pythonimport dutil.pipeline as dpipeimport pandas as pdimport numpy as npfrom loguru import logger# --- Define data transformations via step functions (similar to dask.delayed)@dpipe.delayed_cached()  # lazy computation + caching on diskdef load_1():    df = pd.DataFrame({'a': [1., 2.], 'b': [0.1, np.nan]})    logger.info('Loaded {} records'.format(len(df)))    return df@dpipe.delayed_cached()  # lazy computation + caching on diskdef load_2(timestamp):    df = pd.DataFrame({'a': [0.9, 3.], 'b': [0.001, 1.]})    logger.info('Loaded {} records'.format(len(df)))    return df@dpipe.delayed_cached()  # lazy computation + caching on diskdef compute(x, y, eps):    assert x.shape == y.shape    diff = ((x - y).abs() / (y.abs()+eps)).mean().mean()    logger.info('Difference is computed')    return diff# Define pipeline dependenciests = pd.Timestamp(2019, 1, 1)eps = 0.01s1 = load_1()s2 = load_2(ts)diff = compute(s1, s2, eps)# Trigger pipeline executionprint('diff: {:.3f}'.format(dpipe.delayed_compute((diff, ))[0]))```### Stats```pythonfrom dutil.stats import mean_lower, mean_upperimport pandas as pdss = pd.Series([0, 1, 5, -1])mean_lower(ss)  # Compute mean among 50% smallest elementsmean_upper(ss)  # Compute mean among 50% biggest elements```### String```pythonfrom dutil.string import compare_companiescompare_companies(&quot;Aarons Holdings Company Inc.&quot;, &quot;Aaron's, Inc.&quot;)  # Give match rating for two company names```### Transform```pythonfrom dutil.transform import htimport pandas as pddf = pd.DataFrame({'a': [0, 2, 2, 4, 6], 'b': [1, 1, 1, 1, 1]})ht(df)  # Return first and last rows of a DataFrame, a Series, or an array```### Jupyter```pythonfrom dutil.jupyter import dhtimport pandas as pddf = pd.DataFrame({'a': [0, 2, 2, 4, 6], 'b': [1, 1, 1, 1, 1]})dht(df)  # Display first and last rows of a DataFrame, a Series, or an array in a Jupyter notebook```</longdescription>
</pkgmetadata>