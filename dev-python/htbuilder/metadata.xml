<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># htbuilder â€” tiny HTML string builder for Pythonhtbuilder lets you build HTML strings using a purely functional syntax in Python.Why use templating languages when you can just use functions?(PS: If you like this, check out [jsbuild](https://github.com/tvst/jsbuild) whichlets you build JavaScript strings by simply annotating Python functions!)## InstallationJust PIP it!```pypip install htbuilder```## UsageJust import tags like `div` with `from htbuilder import div`, then call them:```py# Import any tag you want from htbuilder, and it just works!# (This syntax requires Python 3.7+. See below for an alternate syntax)from htbuilder import divdom = div('Hello world!')```Then you can get the string output by calling `str()` on it:```pystr(dom)# Returns '&lt;div&gt;Hello world!&lt;/div&gt;'```...which means you can also just `print()` to see it in the terminal:```pyprint(dom)# Prints '&lt;div&gt;Hello world!&lt;/div&gt;'```To specify attributes, call the tag builder with keyword args:```pyprint(  div(id='sidebar', foo='bar'))# Prints '&lt;div id=&quot;sidebar&quot; foo=&quot;bar&quot;&gt;&lt;/div&gt;'```To specify both attributes and children, first specify the attributes usingkeyword args, then pass the children afterwards **inside a newset of parentheses**:```pyprint(  div(id='sidebar', foo='bar')(    &quot;Hello world!&quot;  ))# Prints '&lt;div id=&quot;sidebar&quot; foo=&quot;bar&quot;&gt;Hello world!&lt;/div&gt;'```This is required because Python doesn't allow you to pass keyword arguments_before_ you pass normal arguments.## Multiple childrenWant to output multiple children? Just pass them all as arguments:```pyfrom htbuilder import div, ul, li, imgdom = (  div(id='container')(    ul(_class='greetings')(      li('hello'),      li('hi'),      li('whattup'),    )  ))print(dom)# Prints this (but without added spacing):# &lt;div id=&quot;container&quot;&gt;#   &lt;ul class=&quot;greetings&quot;&gt;#     &lt;li&gt;hello&lt;/li&gt;#     &lt;li&gt;hi&lt;/li&gt;#     &lt;li&gt;whattup&lt;/li&gt;#   &lt;/ul&gt;# &lt;/div&gt;```## Programmatically add childrenYou can also pass any iterable to specify multiple children, which means you cansimply use things like generator expressions for great awesome:```pyfrom htbuilder import div, ul, li, imgimage_paths = [  'http://myimages.com/foo1.jpg',  'http://myimages.com/foo2.jpg',  'http://myimages.com/foo3.jpg',]dom = (  div(id='container')(    ul(_class='image-list')(      li(img(src=image_path, _class='large-image'))      for image_path in image_paths    )  ))print(dom)# Prints:# &lt;div id=&quot;container&quot;&gt;#   &lt;ul class=&quot;image-list&quot;&gt;#     &lt;li&gt;&lt;img src=&quot;http://myimages.com/foo1.jpg&quot; class=&quot;large-image&quot;/&gt;&lt;/li&gt;#     &lt;li&gt;&lt;img src=&quot;http://myimages.com/foo2.jpg&quot; class=&quot;large-image&quot;/&gt;&lt;/li&gt;#     &lt;li&gt;&lt;img src=&quot;http://myimages.com/foo3.jpg&quot; class=&quot;large-image&quot;/&gt;&lt;/li&gt;#   &lt;/ul&gt;# &lt;/div&gt;```## Conditionally add elementsAnd because it's just Python, you can use an if/else expression to conditionallyinsert elements:```pyuse_bold = Truedom = (  div(      b(&quot;bold text&quot;)    if use_bold else      &quot;normal text&quot;  ))print(dom)# Prints: &lt;div&gt;&lt;b&gt;bold text&lt;/b&gt;&lt;/div&gt;```## StylingWe provide helpers to write styles without having to pass huge style strings asarguments. Instead, just use handy builders like `styles()`, `classes()`,`fonts()`, along with helpers you can import from the `units` and `funcs`modules.```py# styles, classes, and fonts are special imports to help build attribute strings.from htbuilder import div, styles, classes, fonts# You can import anything from .units and .funcs to make it easier to specify# units like &quot;%&quot; and &quot;px&quot;, as well as functions like &quot;rgba()&quot; and &quot;rgba()&quot;.from htbuilder.units import percent, pxfrom htbuilder.funcs import rgba, rgbbottom_margin = 10is_big = Truedom = (  div(    _class=classes('btn', big=is_big)    style=styles(        color='black',        font_family=fonts('Comic Sans', 'sans-serif'),        margin=px(0, 0, bottom_margin, 0),        padding=(px(10), percent(5))        box_shadow=[            (0, 0, px(10), rgba(0, 0, 0, 0.1)),            (0, 0, '2px', rgb(0, 0, 0)),        ],    )  ))# Prints:# &lt;div#   class=&quot;btn big&quot;#   style=&quot;#     color: black;#     font-family: &quot;Comic Sans&quot;, &quot;sans-serif&quot;;#     margin: 0 0 10px 0;#     padding: 10px 5%;#     box-shadow: 0 0 10px rgba(0, 0, 0, 0.1), 0 0 2px rgb(0, 0, 0);#   &quot;&gt;&lt;/div&gt;```## Underscores are magic### Use underscores instead of dashesLike most popular languages, Python doesn't support dashes in identifiers. So if you want to buildan element that includes dashes in the tag name or attributes, like `&lt;my-element foo-bar=&quot;baz&quot;&gt;`, you cando so by using underscores instead:```pyfrom htbuilder import my_elementdom = my_element(foo_bar=&quot;baz&quot;)print(dom)# Prints:# &lt;my-element foo-bar=&quot;baz&quot;&gt;&lt;/my-element&gt;```### Prefix with underscore to avoid reserved wordsThe word `class` is reserved in Python, so if you want to set an element's `class` attribute youshould prepend it with an underscore like this:```pydom = div(_class=&quot;myclass&quot;)print(dom)# Prints:# &lt;div class=&quot;myclass&quot;&gt;&lt;/div&gt;```This works because underscores preceding or following any identifier are automatically stripped awayfor you.## Working with Python &amp;lt; 3.7If using Python &amp;lt; 3.7, the import should look like this instead:```pyfrom htbuilder import Hdiv = H.divul = H.ulli = H.liimg = H.img# ...etc```</longdescription>
</pkgmetadata>