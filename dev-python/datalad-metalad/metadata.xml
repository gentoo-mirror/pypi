<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DataLad extension for semantic metadata handling[![Build_status](https://ci.appveyor.com/api/projects/status/hlwg6yi008mbmr1m?svg=true)](https://ci.appveyor.com/project/mih/datalad-metalad) [![codecov.io](https://codecov.io/github/datalad/datalad-metalad/coverage.svg?branch=master)](https://codecov.io/github/datalad/datalad-metalad?branch=master) [![GitHub release](https://img.shields.io/github/release/datalad/datalad-metalad.svg)](https://GitHub.com/datalad/datalad-metalad/releases/) [![PyPI version fury.io](https://badge.fury.io/py/datalad-metalad.svg)](https://pypi.python.org/pypi/datalad-metalad/) [![Documentation](https://readthedocs.org/projects/datalad-metalad/badge/?version=latest)](http://docs.datalad.org/projects/metalad/en/latest)### OverviewThis software is a [DataLad](http://datalad.org) extension that equips DataLadwith an alternative command suite for metadata handling (extraction, aggregation,filtering, and reporting).#### Command(s) currently provided by this extension- `meta-extract` -- run an extractor on a file or dataset and emit the resulting metadata (stdout).- `meta-filter` -- run an filter over existing metadata and return theresulting metadata (stdout).- `meta-add` -- add a metadata record or a list of metadata records(possibly received on stdin) to a metadata store, usually to the git-repo of the dataset.- `meta-aggregate` -- aggregate metadata from multiple local or remotemetadata-stores into a local metadata store.- `meta-dump` -- reporting metadata from local or remote metadata stores. Allowsto select metadata by file- or dataset-path matching patterns includingdataset versions and dataset IDs. - `meta conduct` -- execute processing pipelines that consist of a providerwhich emits objects that should be processed, e.g. files or metadata, anda pipeline of processors, that perform operations on the provided objects,such as metadata-extraction and metadata-adding.Processorsare usually executed in parallel. A few pipeline definitions are providedwith the release.#### Commands currently under development:- `meta-export` -- write a flat representation of metadata to a file-system. For now you  can export your metadata to a JSON-lines file named `metadata-dump.jsonl`:    ```     datalad meta-dump -d &lt;dataset-path&gt; -r &gt;metadata-dump.jsonl    ```- `meta-import` -- import a flat representation of metadata from a file-system. For now you    can import metadata from a JSON-lines file, e.g.  `metadata-dump.jsonl` like this:    ```     datalad meta-add -d &lt;dataset-path&gt; --json-lines -i metadata-dump.jsonl    ```- `meta-ingest-previous` -- ingest metadata from `metalad&lt;=0.2.1`.#### Additional metadata extractor implementations- Compatible with the previous families of extractors provided by dataladand by metalad, i.e. `metalad_core`, `metalad_annex`, `metalad_custom`, `metalad_runprov` - New metadata extractor paradigm that distinguishes between file- anddataset-level extractors. Included are two example extractors, `metalad_example_dataset`, and `metalad_example_file`- `metalad_external_dataset` and `metalad_external_file`, a dataset- and afile-extractors that execute external processes to generate metadata allowprocessing of the externally created metadata in datalad.- `metalad_studyminimeta` -- a dataset-level extractor that reads studyminimeta yamlfiles and produces metadata that contains a JSON-LD compatible description of the data in the input file#### Indexers- Provides indexers for the new datalad indexer-plugin interface. These indexersconvert metadata in proprietary formats into a set of key-value pairs that canbe used by `datalad search` to search for content.- `indexer_studyminimeta` -- converts studyminimeta JSON-LD description intokey-value pairs for `datalad search`.- `indexer_jsonld` -- a generic JSON-LD indexer that aims at converting any JSON-LD descriptions into a set of key-value pairs that reflect the content of theJSON-LD description.## InstallationBefore you install this package, please make sure that you [install a recentversion of git-annex](https://git-annex.branchable.com/install).  Afterwards,install the latest version of `datalad-metalad` from[PyPi](https://pypi.org/project/datalad-metalad). It is recommended to usea dedicated [virtualenv](https://virtualenv.pypa.io):    # create and enter a new virtual environment (strongly recommended)    virtualenv --system-site-packages --python=python3 ~/env/datalad    . ~/env/datalad/bin/activate    # install from PyPi    pip install datalad-metalad## SupportFor general information on how to use or contribute to DataLad (and thisextension), please see the [DataLad website](http://datalad.org) or the[main GitHub project page](http://datalad.org). The documentation is foundhere: http://docs.datalad.org/projects/metaladAll bugs, concerns and enhancement requests for this software can be submitted here:https://github.com/datalad/datalad-metalad/issuesIf you have a problem or would like to ask a question about how to use DataLad,please [submit a question toNeuroStars.org](https://neurostars.org/tags/datalad) with a ``datalad`` tag.NeuroStars.org is a platform similar to StackOverflow but dedicated toneuroinformatics.All previous DataLad questions are available here:http://neurostars.org/tags/datalad/## AcknowledgementsThis DataLad extension was developed with support from the German FederalMinistry of Education and Research (BMBF 01GQ1905), and the US National ScienceFoundation (NSF 1912266).</longdescription>
</pkgmetadata>