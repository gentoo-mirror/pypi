<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Metallurgy![Tests](https://github.com/Robert-Forrest/metallurgy/actions/workflows/tests.yml/badge.svg)[![Documentation Status](https://readthedocs.org/projects/metallurgy/badge/?version=latest)](https://metallurgy.readthedocs.io/en/latest/?badge=latest)The Metallurgy package enables calculation of approximate properties of alloymixtures, based on the linear mixture of elemental properties.## InstallationThe metallurgy package can be installed from[pypi](https://pypi.org/project/metallurgy/) using pip:``pip install metallurgy``## Usage### AlloysMost of the features of metallurgy are based on the concept of an alloy, amixture of elements:```pythonimport metallurgy as mgBronze = mg.Alloy(&quot;Cu88Sn12&quot;)```An alloy can be defined in several ways:```pycon&gt;&gt;&gt; mg.Alloy(&quot;Cu50Zr50&quot;)Cu50Zr50&gt;&gt;&gt; mg.Alloy(&quot;CuZr&quot;)Cu50Zr50&gt;&gt;&gt; mg.Alloy(&quot;CuZrFeCo&quot;)Cu25Zr25Fe25Co25&gt;&gt;&gt; mg.Alloy(&quot;(Fe70Co30)50Ni50&quot;)Ni50Fe35Co15&gt;&gt;&gt; mg.Alloy(&quot;(FeCo)50Ni50&quot;)Ni50Fe25Co25&gt;&gt;&gt; mg.Alloy({&quot;Pt&quot;: 30, &quot;Al&quot;: 45, &quot;Ag&quot;: 25})Al45Pt30Ag25```While formally, an alloy is defined as [&quot;a mixture of chemical elements of whichat least one is a metal&quot;](https://en.wikipedia.org/wiki/Alloy), no suchlimitation is enforced in this package -- you can create any mixture you want.An Alloy object has access to properties containing the percentage values of thecomposition, the elements in the composition, and has helper functions which canconvert the composition to a simple string or even a LaTeX formatted string:```pycon&gt;&gt;&gt; Bronze.composition{'Cu': 0.88, 'Sn': 0.12}&gt;&gt;&gt; Bronze.elements['Cu', 'Sn']&gt;&gt;&gt; Bronze.to_string()'Cu88Sn12'&gt;&gt;&gt; Bronze.to_pretty_string()'Cu$_{88}$Sn$_{12}$'```### Calculating alloy propertiesProperties of alloys may be approximated from the properties of theirconstituent elements via the linear mixture rule:$$\Sigma A = \sum_{i=1}^{N} c_i A_i $$where $\Sigma A$ is the approximate mixed value of a property $A$ for an alloythat contains $N$ elements with percentages $c_i$. Similarly, the deviation ofthese elemental property values for the elements present in an alloy can becalculated:$$\delta A = \sqrt{\sum_{i=1}^{N} c_i \left(1 - \frac{A_i}{\Sigma A}\right)^2} $$The metallurgy package can be used to calculate a variety of approximate alloyproperties:```pyconBronze = mg.Alloy(&quot;Cu88Sn12&quot;)&gt;&gt;&gt; mg.linear_mixture(Bronze, &quot;mass&quot;)70.16568&gt;&gt;&gt; mg.linear_mixture(Bronze, &quot;density&quot;)8.7566&gt;&gt;&gt; mg.linear_mixture(Bronze, &quot;valence&quot;)2.24&gt;&gt;&gt; mg.deviation(Bronze, &quot;mass&quot;)17.926178182133523&gt;&gt;&gt; mg.deviation(Bronze, &quot;density&quot;)0.5508098038343185&gt;&gt;&gt; mg.deviation(Bronze, &quot;valence&quot;)0.6499230723708769```Elemental data is provided by the[elementy](https://github.com/Robert-Forrest/elementy) package. Metallurgy cancalculate a variety of other alloy properties that are more complex than simplelinear mixture or deviations of elemental properties:```pycon&gt;&gt;&gt; mg.enthalpy.mixing_Gibbs_free_energy(Bronze)-2039.0961905675026&gt;&gt;&gt; mg.entropy.ideal_entropy(Bronze)0.3669249912727096&gt;&gt;&gt; mg.density.theoretical_density(Bronze)8.554783679490685&gt;&gt;&gt; mg.valence.d_valence(Bronze)0.8661417322834646```See our June 2022 paper [&quot;Machine-learning improves understanding of glassformation in metallicsystems&quot;](https://pubs.rsc.org/en/content/articlelanding/2022/dd/d2dd00026a)that used code which later became the metallurgy package for definitions ofthese alloy properties.### Generating alloy datasetsMetallurgy can also be used to generate collections of alloys, either randomlyor across a composition-space.```pycon&gt;&gt;&gt; mg.generate.binary([&quot;Fe&quot;, &quot;Co&quot;], step=10)[Fe100, Fe90Co10, Fe80Co20, Fe70Co30, Fe60Co40,Fe50Co50, Co60Fe40, Co70Fe30, Co80Fe20, Co90Fe10, Co100]&gt;&gt;&gt; mg.generate.ternary([&quot;Fe&quot;, &quot;Co&quot;, &quot;Al&quot;], step=20)[Fe100, Fe80Co20, Fe80Al20, Fe60Co40, Fe60Co20Al20,Fe60Al40, Co60Fe40, Fe40Co40Al20, Fe40Al40Co20, Al60Fe40,Co80Fe20, Co60Fe20Al20, Co40Al40Fe20, Al60Fe20Co20,Al80Fe20, Co100, Co80Al20, Co60Al40, Al60Co40, Al80Co20, Al100]&gt;&gt;&gt; mg.generate.random_alloy()Cs28.9Db25.4Hs12Ce11.9La10.6Cu9.6Kr1.6&gt;&gt;&gt; mg.generate.random_alloy()Ba94.5Y5.5```We can apply constraints to the randomly generated alloy, such as limits on themaximum and minimum number of constituent elements, requirements on thepercentage range that particular elements must be within, and whitelists ofallowed elements:```pycon&gt;&gt;&gt; mg.generate.random_alloy(min_elements=2, max_elements=3)Au50.7Hf36.3Ru13&gt;&gt;&gt; mg.generate.random_alloy(min_elements=2, max_elements=3, percentage_constraints={&quot;Cu&quot;:{&quot;min&quot;:0.3, &quot;max&quot;:0.8}})Cu63.9Sr23.9Be12.2&gt;&gt;&gt; mg.generate.random_alloy(min_elements=2, max_elements=3, percentage_constraints={&quot;Cu&quot;:{&quot;min&quot;:0.3, &quot;max&quot;:0.8}}, allowed_elements=[&quot;Fe&quot;, &quot;Cu&quot;, &quot;Co&quot;, &quot;Ni&quot;, &quot;Yb&quot;])Yb64.8Cu30Ni5.2```The process of generating random alloys can be performed in bulk to createdatasets of random alloys:```pycon&gt;&gt;&gt; mg.generate.random_alloys(10, min_elements=2, max_elements=3)[Fl94.6Xe5.4, Po64.2Tl23.3Np12.5, Tb61.6Ta38.4, Lu50.8Ho38.1In11.1, Rn69Es31, S70.4Ts29.6, Pr79.3He13.4Cm7.3, As84.3V15.7, Ge45.3Xe41.2Na13.5, Ra70.4He29.6]```### Plotting alloy informationOnce you have created a dataset of alloys, you may wish to view graphically aparticular material property on a population level:```pycon&gt;&gt;&gt; binary, percentages = mg.generate.binary([&quot;Cu&quot;, &quot;Zr&quot;])&gt;&gt;&gt; mixing_enthalpies = mg.enthalpy.mixing_enthalpy(binary)&gt;&gt;&gt; mg.plots.binary(binary, mixing_enthalpies, ylabel=&quot;Mixing enthalpy (kJ/mol)&quot;)```![CuZr binary mixing enthalpy](https://raw.githubusercontent.com/Robert-Forrest/metallurgy/main/images/CuZr_enthalpy.png &quot;Mixing enthalpy across the Cu-Zr composition&quot;)```pycon&gt;&gt;&gt; ternary, percentages = mg.generate.ternary([&quot;Cu&quot;, &quot;Zr&quot;, &quot;Al&quot;])&gt;&gt;&gt; mixing_enthalpies = mg.enthalpy.mixing_enthalpy(ternary)&gt;&gt;&gt; mg.plots.ternary(ternary, mixing_enthalpies, label=&quot;Mixing enthalpy (kJ/mol)&quot;)```![CuZrAl ternary mixing enthalpy](https://raw.githubusercontent.com/Robert-Forrest/metallurgy/main/images/CuZrAl_enthalpy.png &quot;Mixing enthalpy acrossthe Cu-Zr-Al composition&quot;)```pycon&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt; alloys = mg.generate.random_alloys(10000)&gt;&gt;&gt; plt.hist(mg.linear_mixture(alloys, &quot;density&quot;))```![Histogram of densities](https://raw.githubusercontent.com/Robert-Forrest/metallurgy/main/images/AlloyDensities.png &quot;Histogram of the density of 10,000random alloys&quot;)## DocumentationDocumentation is available [here.](https://metallurgy.readthedocs.io/en/latest/api.html)</longdescription>
</pkgmetadata>