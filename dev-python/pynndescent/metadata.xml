<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: doc/pynndescent_logo.png  :width: 600  :align: center  :alt: PyNNDescent Logo.. image:: https://dev.azure.com/lelandmcinnes/UMAP%20project%20builds/_apis/build/status/lmcinnes.pynndescent?branchName=master    :target: .. _build_status: https://dev.azure.com/lelandmcinnes/UMAP%20project%20builds/_build/latest?definitionId=2&amp;branchName=master    :alt: Azure Pipelines Build Status.. image:: https://img.shields.io/lgtm/alerts/g/lmcinnes/pynndescent.svg    :target: https://lgtm.com/projects/g/lmcinnes/pynndescent/alerts    :alt: LGTM Alerts.. image:: https://img.shields.io/lgtm/grade/python/g/lmcinnes/pynndescent.svg    :target: https://lgtm.com/projects/g/lmcinnes/pynndescent/context:python    :alt: LGTM Grade.. image:: https://readthedocs.org/projects/pynndescent/badge/?version=latest    :target: https://pynndescent.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status===========PyNNDescent===========PyNNDescent is a Python nearest neighbor descent for approximate nearest neighbors.It provides a python implementation of Nearest NeighborDescent for k-neighbor-graph construction and approximate nearest neighborsearch, as per the paper:Dong, Wei, Charikar Moses, and Kai Li.*&quot;Efficient k-nearest neighbor graph construction for generic similaritymeasures.&quot;*Proceedings of the 20th international conference on World wide web. ACM, 2011.This library supplements that approach with the use of random projection trees forinitialisation. This can be particularly useful for the metrics that areamenable to such approaches (euclidean, minkowski, angular, cosine, etc.). Graphdiversification is also performed, pruning the longest edges of any triangles in thegraph.Currently this library targets relatively high accuracy (80%-100% accuracy rate) approximate nearest neighbor searches.--------------------Why use PyNNDescent?--------------------PyNNDescent provides fast approximate nearest neighbor queries. The`ann-benchmarks &lt;https://github.com/erikbern/ann-benchmarks&gt;`_ system puts itsolidly in the mix of top performing ANN libraries:**SIFT-128 Euclidean**.. image:: https://pynndescent.readthedocs.io/en/latest/_images/sift.png    :alt: ANN benchmark performance for SIFT 128 dataset**NYTimes-256 Angular**.. image:: https://pynndescent.readthedocs.io/en/latest/_images/nytimes.png    :alt: ANN benchmark performance for NYTimes 256 datasetWhile PyNNDescent is among fastest ANN library, it is also both easy to install (pipand conda installable) with no platform or compilation issues, and is very flexible,supporting a wide variety of distance metrics by default:**Minkowski style metrics**- euclidean- manhattan- chebyshev- minkowski**Miscellaneous spatial metrics**- canberra- braycurtis- haversine**Normalized spatial metrics**- mahalanobis- wminkowski- seuclidean**Angular and correlation metrics**- cosine- dot- correlation- spearmanr- tsss- true_angular**Probability metrics**- hellinger- wasserstein**Metrics for binary data**- hamming- jaccard- dice- russelrao- kulsinski- rogerstanimoto- sokalmichener- sokalsneath- yuleand also custom user defined distance metrics while still retaining performance.PyNNDescent also integrates well with Scikit-learn, including providing supportfor the KNeighborTransformer as a drop in replacement for algorithmsthat make use of nearest neighbor computations.----------------------How to use PyNNDescent----------------------PyNNDescent aims to have a very simple interface. It is similar to (but morelimited than) KDTrees and BallTrees in ``sklearn``. In practice there areonly two operations -- index construction, and querying an index for nearestneighbors.To build a new search index on some training data ``data`` you can do somethinglike.. code:: python    from pynndescent import NNDescent    index = NNDescent(data)You can then use the index for searching (and can pickle it to disk if youwish). To search a pynndescent index for the 15 nearest neighbors of a test dataset ``query_data`` you can do something like.. code:: python    index.query(query_data, k=15)and that is pretty much all there is to it. You can find more details in the`documentation &lt;https://pynndescent.readthedocs.org&gt;`_.----------Installing----------PyNNDescent is designed to be easy to install being a pure python module withrelatively light requirements:* numpy* scipy* scikit-learn &gt;= 0.22* numba &gt;= 0.51all of which should be pip or conda installable. The easiest way to install should bevia conda:.. code:: bash    conda install -c conda-forge pynndescentor via pip:.. code:: bash    pip install pynndescentTo manually install this package:.. code:: bash    wget https://github.com/lmcinnes/pynndescent/archive/master.zip    unzip master.zip    rm master.zip    cd pynndescent-master    python setup.py install----------------Help and Support----------------This project is still young. The documentation is still growing. In the meantime please`open an issue &lt;https://github.com/lmcinnes/pynndescent/issues/new&gt;`_and I will try to provide any help and guidance that I can. Please also checkthe docstrings on the code, which provide some descriptions of the parameters.-------License-------The pynndescent package is 2-clause BSD licensed. Enjoy.------------Contributing------------Contributions are more than welcome! There are lots of opportunitiesfor potential projects, so please get in touch if you would like tohelp out. Everything from code to notebooks toexamples and documentation are all *equally valuable* so please don't feelyou can't contribute. To contribute please `fork the project &lt;https://github.com/lmcinnes/pynndescent/issues#fork-destination-box&gt;`_ make your changes andsubmit a pull request. We will do our best to work through any issues withyou and get your code merged into the main branch.</longdescription>
</pkgmetadata>