<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Welcome to Subdivisions[![PyPI](https://img.shields.io/pypi/v/subdivisions)](https://pypi.org/project/subdivisions/)[![Publish](https://github.com/access55/subdivisions/workflows/publish/badge.svg)](https://github.com/access55/subdivisions/actions)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/subdivisions)](https://www.python.org)[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)[A55 Python library for PubSub Messaging](https://www.youtube.com/watch?v=EYYdQB0mkEU)### Install in Project```toml# pyproject.toml# Add in every project which will# receive or send messages[tool.subdivisions]source_name = &quot;ProjectName&quot; # ex.: &quot;Client-Manager&quot;[tool.poetry.dependencies]subdivisions = &quot;*&quot;```Run `poetry update`### Usage#### Send Messages```pythonfrom subdivisions.client import SubClientfrom subdivisions.events import UserEventsclient = SubClient()client.topic = UserEvents.USER_REGISTEREDclient.send({&quot;foo&quot;: &quot;bar&quot;})```#### Receive Messages```pythonfrom subdivisions.client import SubClientfrom subdivisions.events import UserEventsclient = SubClient()client.topic = UserEvents.USER_REGISTEREDmessages = client.get_messages()  # use the ``from_dead_letter=True` to receive Dead Letter messages# Process messagesclient.delete_received_messages()```### Full Configuration optionsConfigure subdivisions options in `pyproject.toml` file, inside `[tool.subdivisions]` table:```toml# pyproject.toml[tool.subdivisions]aws_region = &quot;us-east-1&quot;            # AWS Regionaws_allowed_account = &quot;&quot;            # AWS Allowed Account Id for create artifacts / send messagespub_key = &quot;alias/PubSubKey&quot;         # KMS PubSubKey (must be created first)sqs_tags = []                       # SQS tags for new queues. Example [{&quot;foo&quot;: &quot;bar&quot;}]queue_prefix = &quot;&quot;                   # Prefix for new SQS queuesqueue_suffix = &quot;&quot;                   # Suffix for new SQS queuesqueue_max_receive_count = 1000      # SQS MaxReceiveCount settingsns_prefix = &quot;&quot;                     # Prefix for new SNS topicssns_suffix = &quot;&quot;                     # Suffix for new SNS topicssns_tags = []                       # SNS tags for new topics. Example [{&quot;foo&quot;: &quot;bar&quot;}]event_prefix = &quot;&quot;                   # Prefix for new Eventbride rulesevent_suffix = &quot;&quot;                   # Suffix for new Eventbride rulesevent_tags = []                     # Eventbridge tags for new rules. Example [{&quot;foo&quot;: &quot;bar&quot;}]event_bus = &quot;default&quot;               # Eventbridge Bussource_name = &quot;&quot;                    # Eventbridge default source name. No default, must informauto_create_new_topic = true        # Auto create new topic if not exists in Eventbridgeauto_remove_from_queue = false      # Acknowledge first messages on receiveuse_aws_env_vars = true             # Use AWS default env vars. If false append &quot;SUBDIVISION_&quot; on env vars. Example: &quot;SUBDIVISION_AWS_ACCESS_KEY_ID&quot;default_prefix = &quot;a55&quot;              # Default prefix for all sns, sqs and rule createddefault_suffix = &quot;&quot;                 # Default suffix for all sns, sqs and rule created```All options above can be configured in environment variables. Just append `SUBDIVISIONS_` on name. Example: `SUBDIVISIONS_SOURCE_NAME=&quot;my_project&quot;`### Local DevelopmentFor local development, please first clone and install this project:```shellgit clone git@github.com:access55/subdivisions.git /path/to/projectcd /path/to/project# Install on WSL/Linuxmake install# Install on Powershellpoetry install```#### Example: Adding a new TopicTo avoid different names in different projects for the same topic, (i.e: &quot;client_registered&quot; and&quot;customer_registered&quot;) please add new events using Python Enum on `subdivisions.event` module:```python# subdivisions.eventsfrom enum import unique, Enum@uniqueclass MyNewEvents(Enum):    MY_NEW_EVENT = &quot;my_new_event&quot;```#### Commit using a conventional commit messageTo generate a new PyPI version, at least one commit must following the[Conventional Commit](https://www.conventionalcommits.org/en/v1.0.0/) Specification, when you canadd the `feat:` or `fix:` prefix in your message:```shell# Create a new patch event. Ex. 1.0.0 to 1.0.1git commit -m &quot;fix: Event Bug&quot;# Create a new minor event. Ex. 1.0.0 to 1.1.0git commit -m &quot;feat: Add New Event&quot;# Create a new major event. Ex. 1.0.0 to 2.0.0git commit -m &quot;feat!: Add New Event \n\nBREAKING CHANGE: API changed&quot;```Without a `feat:` or `fix:` prefixed commited message, code will not generate a new PyPI version.### Using AWS Credentials locallySubdivisions will use AWS default environment variables. If you need to define another credentials, use the following variables:```envSUBDIVISIONS_USE_AWS_ENV_VARS=&quot;false&quot;SUBDIVISIONS_AWS_ACCESS_KEY_ID=&quot;your id&quot;SUBDIVISIONS_AWS_SECRET_ACCESS_KEY=&quot;your key&quot;SUBDIVISIONS_AWS_SESSION_TOKEN=&quot;your token&quot; # optional```### Using Subdivisions in LOCALSTACKTo use with localstack, you need to activate the sqs, sns, events, and kms services and add them to your .env file:```envLOCALSTACK_HOSTNAME_LOCAL=&quot;http://localstack:4566&quot;```</longdescription>
</pkgmetadata>