<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction to WLLVM=====================This project, WLLVM, provides tools for building whole-program (orwhole-library) LLVM bitcode files from an unmodified C or C++source package. It currently runs on `*nix` platforms such as Linux,FreeBSD, and Mac OS X.WLLVM provides python-based compiler wrappers that work in twosteps. The wrappers first invoke the compiler as normal. Then, foreach object file, they call a bitcode compiler to produce LLVMbitcode. The wrappers also store the location of the generated bitcodefile in a dedicated section of the object file.  When object files arelinked together, the contents of the dedicated sections areconcatenated (so we don't lose the locations of any of the constituentbitcode files). After the build completes, one can use an WLLVMutility to read the contents of the dedicated section and link all ofthe bitcode into a single whole-program bitcode file. This utilityworks for both executable and native libraries.This two-phase build process is necessary to be a drop-in replacementfor ``gcc`` or ``g++`` in any build system.  Using the LTO framework in gccand the gold linker plugin works in many cases, but fails in thepresence of static libraries in builds.  WLLVM's approach has thedistinct advantage of generating working binaries, in case some partof a build process requires that.WLLVM works with either ``clang`` or the ``gcc dragonegg`` plugin.Usage-----WLLVM includes four python executables: ``wllvm`` for compiling C codeand ``wllvm++`` for compiling C++, an auxiliary tool ``extract-bc`` forextracting the bitcode from a build product (object file, executable, libraryor archive), and a sanity checker, ``wllvm-sanity-checker`` for detectingconfiguration oversights.Three environment variables must be set to use these wrappers: * ``LLVM_COMPILER`` should be set to either ``dragonegg`` or ``clang``. * ``LLVM_GCC_PREFIX`` should be set to the prefix for the version of gcc that should   be used with dragonegg.  This can be empty if there is no prefix.  This variable is   not used if ``$LLVM_COMPILER == clang``. * ``LLVM_DRAGONEGG_PLUGIN`` should be the full path to the dragonegg plugin.  This   variable is not used if ``$LLVM_COMPILER == clang``.Once the environment is set up, just use ``wllvm`` and ``wllvm++`` as your Cand C++ compilers, respectively.In addition to the above environment variables the following can be optionally used: * ``LLVM_CC_NAME`` can be set if your clang compiler is not called ``clang`` but   something like ``clang-3.7``. Similarly ``LLVM_CXX_NAME`` can be used to describe   what the C++ compiler is called. Note that in these sorts of cases, the environment   variable ``LLVM_COMPILER`` should still be set to ``clang`` not ``clang-3.7`` etc.   We also pay attention to the environment variables ``LLVM_LINK_NAME`` and ``LLVM_AR_NAME`` in an   analagous way,  since they too get adorned with suffixes in various Linux distributions. * ``LLVM_COMPILER_PATH`` can be set to the absolute path to the folder that   contains the compiler and other LLVM tools such as ``llvm-link`` to be used.   This prevents searching for the compiler in your PATH environment variable.   This can be useful if you have different versions of clang on your system   and you want to easily switch compilers without tinkering with your PATH   variable.   Example ``LLVM_COMPILER_PATH=/home/user/llvm_and_clang/Debug+Asserts/bin``. * ``WLLVM_CONFIGURE_ONLY`` can be set to anything. If it is set, ``wllvm``   and ``wllvm++`` behave like a normal C or C++ compiler. They do not   produce bitcode.  Setting ``WLLVM_CONFIGURE_ONLY`` may prevent   configuration errors caused by the unexpected production of hidden   bitcode files.Documentation-------------More detailed documentation as well as some tutorials can be foundhere:https://github.com/SRI-CSL/whole-program-llvm</longdescription>
</pkgmetadata>