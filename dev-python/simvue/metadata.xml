<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Simvue Python client&lt;br/&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;simvue-black.png&quot; width=&quot;500&quot; alt=&quot;Simvue&quot; /&gt;&lt;/p&gt;   &lt;p align=&quot;center&quot;&gt; Collect metadata, metrics and artifacts from simulations, processing and AI/ML training tasks running on any platform, in real time.&lt;/p&gt;&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/simvue-io/client/blob/main/LICENSE&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/simvue-io/client&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/simvue/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/simvue.svg&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/simvue&quot;&gt;&lt;img src=&quot;https://static.pepy.tech/badge/simvue&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/simvue-io/client/actions/workflows/python-app.yml&quot;&gt;&lt;img src=&quot;https://github.com/simvue-io/client/actions/workflows/python-app.yml/badge.svg&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://simvue.io&quot;&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt;  â€¢  &lt;a href=&quot;https://docs.simvue.io&quot;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt;&lt;/h3&gt;## ConfigurationThe service URL and token can be defined as environment variables:```export SIMVUE_URL=...export SIMVUE_TOKEN=...```or a file `simvue.ini` can be created containing:```[server]url = ...token = ...```The exact contents of both of the above options can be obtained directly by clicking the **Create new run** button on the web UI. Note that the environment variables have preference over the config file.## Usage example```from simvue import Run...if __name__ == &quot;__main__&quot;:    ...    # Using a context manager means that the status will be set to completed automatically,    # and also means that if the code exits with an exception this will be reported to Simvue    with Run() as run:        # Specify a run name, metadata (dict), tags (list), description, folder        run.init('example-run-name',                 {'learning_rate': 0.001, 'training_steps': 2000, 'batch_size': 32}, # Metadaata                 ['tensorflow'],                                                     # Tags                 'This is a test.',                                                  # Description                 '/Project-A/part1')                                                 # Folder full path        # Set folder details if necessary        run.set_folder_details('/Project-A/part1',                     # Folder full path                               metadata={},                            # Metadata                               tags=['tensorflow'],                    # Tags                               description='This is part 1 of a test') # Description        # Upload the code        run.save('training.py', 'code')        # Upload an input file        run.save('params.in', 'input')        # Add an alert (the alert definition will be created if necessary)        run.add_alert(name='loss-too-high',   # Name                      source='metrics',       # Source                      rule='is above',        # Rule                      metric='loss',          # Metric                      frequency=1,            # Frequency                      window=1,               # Window                      threshold=10,           # Threshold                      notification='email')   # Notification type        ...        while not converged:            ...            # Send metrics inside main application loop            run.log({'loss': 0.5, 'density': 34.4})            ...        # Upload an output file        run.save('output.cdf', 'output')        # If we weren't using a context manager we'd need to end the run        # run.close()```## LicenseReleased under the terms of the [Apache 2](https://github.com/simvue-io/client/blob/main/LICENSE) license.</longdescription>
</pkgmetadata>