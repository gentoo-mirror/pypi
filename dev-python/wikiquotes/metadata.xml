<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Python| |License|wikiquotes-python-api=====================This library is intended to be a python API for wikiquotes (inspired by`python-wikiquotes &lt;https://github.com/federicotdn/python-wikiquotes/&gt;`__).Table of Contents------------------  `Usage &lt;#usage&gt;`__-  `Motivation &lt;#motivation&gt;`__-  `Search &lt;#search&gt;`__-  `Output &lt;#output&gt;`__-  `Testing &lt;#testing&gt;`__Usage-----.. code:: python    &gt;&gt;&gt; import wikiquotes    &gt;&gt;&gt; wikiquotes.search(&quot;gandi&quot;, &quot;english&quot;)    [u'Mahatma Gandhi', u'Indira Gandhi', u'Rahul Gandhi', u'Rajiv Gandhi', u'Arun Manilal Gandhi', u'Gandhi (film)', u'Anand Gandhi', u'Virchand Gandhi', u'Maneka Gandhi', u'Blindness']    &gt;&gt;&gt; wikiquotes.get_quotes('Hau Pei-tsun', &quot;english&quot;)    # [u&quot;The slogans of 'countering back the mainland' created by Chiang Kai-shek and 'liberating Taiwan' by Mao Zedong several decades ago should be forgotten because none of them could be put into practice.&quot;,    #  u'When people on both sides of the Strait reach a consensus on their political system, unification will come to fruition naturally.',    #  u'Taiwanese independence is a dead end.']    &gt;&gt;&gt; wikiquotes.quote_of_the_day(&quot;english&quot;)    # (u'Even after killing ninety nine tigers the Maharaja should beware of the hundredth.', u'Kalki Krishnamurthy')    &gt;&gt;&gt; wikiquotes.quote_of_the_day(&quot;spanish&quot;)    # (u'Por San Ferm\xedn, el calor no tiene fin', u'Refr\xe1n espa\xf1ol')    &gt;&gt;&gt; wikiquotes.random_quote(&quot;Aristotle&quot;, &quot;english&quot;)    # u'For the things we have to learn before we can do, we learn by doing.'    &gt;&gt;&gt; wikiquotes.supported_languages()    # ['english', 'spanish']Motivation----------There seems to be two options for retrieving quotes from WikiQuotes using python: To implement ityourself or to use `python-wikiquotes &lt;https://github.com/federicotdn/python-wikiquotes/&gt;`__. At afirst glance, I chose the second option and used that library. However, usage and code inspectionover `python-wikiquotes &lt;https://github.com/federicotdn/python-wikiquotes/&gt;`__ lead me to choose thefirst approach and develop a library.The main reasons for this decision were that: 1. Quotes retrieved weren't all the quotes inwikiquotes API (tried with different authors). 2. It doesn't work for python 2.x 2. The code was toocomplex for what it was achieving. The choice in that project was to use urllib to retrieve thequotes, and lxml to parse the html.This project: 1. Adds tests for retrieving all the quotes from several authors (Though this point isdifficult to satisfy, because quotes don't respect a format for all authors). 2. Works for python2.x and 3.x 3. Uses requests and BeautifulSoup, which abstract great part of the complexity which ispresent in `python-wikiquotes &lt;https://github.com/federicotdn/python-wikiquotes/&gt;`__.Anyway, the correct approach would be to try both and stick with the one that gives you the bestresults.Search------Quotes are retrieved by searching first for the correct author. This strives for robustness, becauseit allows to return a quote whether the input is the correct name of the author or not. At the sametime, note that subsequent calls to WikiQuotes api have to be made to grab suggestions (see`here &lt;https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/wikiquotes/managers/api_manager.py#L20&gt;`__).Example: &quot;shakspare&quot; -&gt; &quot;shakespeare&quot; -&gt; ['William Shakespeare', 'Last words in Shakespeare','Shakespeare in Love', ...] -&gt; get\_quotes = 4 calls.Output------While in python 3.x str type = unicode, in python 2.x str type != unicode. Therefore (and to beconsistent), all string output are unicode strings, independent of python's version. If you call anyfunction from the API that have non-english characters, you will see some weird characters... code:: python    &gt;&gt;&gt; wikiquotes.random_quote(&quot;borges&quot;, &quot;español&quot;)    # u'\xabTodos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes\xbb.'This is not incorrect, it is the underlying representation of the format of the string. You couldencode the string in utf-8 and print it (or just print it and your python interpreter should convertit automatically)... code:: python    &gt;&gt;&gt; print(u'\xabTodos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes\xbb.'.encode('utf8'))    # «Todos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes».Testing-------The approach for testing changed: at a first glance, testing was done by manually adding the code totest each author. After that, I realized that the structure was the same for every author: We needthe name, the language and the quotes. Using some *black* magic for parametrizing tests, I couldextract all the logic to code and have a text file for each author. (See`author\_test &lt;https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/tests/test_suite/author_test.py&gt;`__for more info.)The way of testing right now is to add a txt file of the author to test's`authors &lt;https://github.com/FranDepascuali/wikiquotes-python-api/tree/master/tests/authors&gt;`__. Forexample,`here &lt;https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/tests/authors/dijkstra.txt&gt;`__is the test for Dijkstra quotes in english. Adding a new author is a txt file for the author (thename is irrelevant, but should be the author name) and respecting the following format. 1. Firstline: Author's name (or the suffix of the wikiquotes page, because sometimes wikipedia has ambiguateredirections if author name is used ). 2. Second line: language. 3. Third line: empty. 4. Followinglines should contain one quote per line... |Python| image:: https://img.shields.io/badge/python-2.x%2F3.x-blue.svg.. |License| image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: https://opensource.org/licenses/MIT</longdescription>
</pkgmetadata>