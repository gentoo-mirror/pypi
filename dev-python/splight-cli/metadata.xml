<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Splight CLI## Table of Content- [Splight CLI](#splight-cli)  - [Table of Content](#table-of-content)  - [Introduction](#introduction)  - [Getting Started](#getting-started)    - [Installation](#installation)    - [Configuration](#configuration)      - [Create Developer Credentials](#create-developer-credentials)      - [Configure Splight CLI](#configure-splight-cli)  - [Commands](#commands)    - [Component](#component)    - [Configure](#configure)    - [Hub](#hub)      - [Component](#component-1)    - [Engine](#engine)    - [Workspace](#workspace)  - [Developing Components](#developing-components)    - [What is a component?](#what-is-a-component)    - [Creating a Component](#creating-a-component)      - [Component Core](#component-core)      - [Component Initialization](#component-initialization)      - [Component Configuration](#component-configuration)      - [Running Locally](#running-locally)## IntroductionThe Splight Command Line Interface is a unified tool to interact with _SplightPlatform_. It contains different features that a user can use for creating, deloping, andpublishing components.## Getting Started### Installation_SplightCLI_ is a Python package that can be installed using `pip````bashpip install splight-cli```Once you have installed `splight-cli` you can check the installation with```bashsplight --version```You should see something like```bash$ splightUsage: splight [OPTIONS] COMMAND [ARGS]...Options:  --help  Show this message and exit.Commands:...```You can enable auto completions by running```bashsplight --install-completion &lt;SHELL&gt;```where SHELL is either bash, zsh, fish, powershell, pwsh.This will add commands at the bottom of your shell's dotfile (zsh example):```bashautoload -Uz compinitzstyle ':completion:*' menu selectfpath+=~/.zfunc```If these do not work after restarting the shell, you can try adding```bashcompinit -D```to the bottom of your shell's dotfile, in order to recreate the autocompletions file, and restarting again.### ConfigurationBefore using the _Splight CLI_, you need to configure it. In order to do it you needto create your _User credentials_ from the platform and then you will be able toconfigure _Splight CLI_.#### Create Developer CredentialsGo to the [Splight Platform](https://app.splight-ae.com), and in your _User Configuration &gt; Account_, in the right side pannel you will find the section _Developers_ and the subsection _Credentials_. Under the _Credentials_ subsection select “**New access key”.** This will generate a Client Access ID and Secret Key which arethe credentials you will use for configuring _Splight CLI_. These credentials shouldnot be share with other users.Also, you need to keep in mind that the Secret Key is only shown once, if you loose theKey you will need to create a new set of Access Credentials.#### Configure Splight CLIThe fastest and easiest way for configuring _Splight CLI_ is running on your terminalthe following command```bashsplight configure```After entering the above command will ask you for the credentials you have created before.## CommandsThis section introduce you to many of the common features and options provided by_Splight CLI_.The tool contains a set of commands that can be used for different purposes.In the following subsections, we will go through each of the commands that can beused.The basic usage is```bashsplight &lt;command&gt; [--help]```where `&lt;command&gt;` is the command you want to use, and optionally you can add the flag`--help` to each one of the commands to get more information about the given command.### ComponentThis is probably the most important command and the one you will use most. The command `component` allow you to operate over components, this mean you can create components, test locally components, push private or public components to _Splight Hub_, downloadexisting component in _Splight Hub_ and delete them.In the following section we will cover in details the development process of acomponent, here we will only cover the different sub-commands you can use- Create a new component  To create a new component the command is  ```bash  splight component create &lt;name&gt; -v &lt;version&gt; -p &lt;path&gt;  ```  The parameters `&lt;name&gt;` and  `&lt;version&gt;` are the name and version of the component to be created,  while the `&lt;path&gt;` parameter is the path of the directory where the  component will be created.  The three commands parameters `&lt;name&gt;` and `&lt;version&gt;` are  commong between all the sub-commands.  If no `&lt;path&gt;` is specified, you will find some  files that defines the basic structure of the component source  code in the same directory where the command was executed. If `&lt;path&gt;`  is specified, then the files will be located in the specified path.- Install component requirements  The command  ```bash  splight component install-requirements &lt;path&gt;  ```  Where the parameter `&lt;path&gt;` is the path to the component that will be installed  locally.  This command is useful for running locally a component for testing and development.- Run locally a component  You can run locally a component, this is quite usefull for testing a comoponent  before push it and for development a new component. The command is the following  ```bash  splight component run &lt;path&gt; [-r] [-rs]  ```  This command will run a component locally. Optionally you can use the flag  `-r/--reset-input`, so you will be asked to configure some parameters for the  component. If it is the first time you run a component, you will see some messages in  the terminal for input some parameters values that are needed for running correctly  the component. Also, you can use the flag `-rs/--run-spec` for using a custom  configuration different to the one defined in the `spec.json` file. In the following  section we will dive in in the usage of the file `spec.json`.- Create component Readme  As a component developer, you can generate a README.md file automatically using the  command  ```bash  splight component readme &lt;path&gt; [-f]  ```  This way, based on the `spec.json` file the readme is generated and you don't need  to care about basic descriptions like input, output, custom types and more.### ConfigureThis command is used for configuring Splight CLI and can be used as many times as youwant.The command is```bashsplight configure```And it will prompt you to enter some pieces of information that needed by Splight CLI.This command is quite useful when is used along with `workspace` command.You can also retrieve one of the parameters using the `get` command:```bashsplight configure get &lt;parameter&gt;```for example for reading the `SPLIGHT_PLATFORM_API_HOST`:```bashsplight configure get splight_platform_api_host```In the same way you can modify one parameter using the `set` command```bashsplight configure set &lt;parameter&gt; &lt;value&gt;```### HubThis command allows you to interact with the Splight HUB, places where you can find all theexisting components that can be used in the platform.#### Component- List component  You can list all the components with the command  ```bash  splight hub component list  ```- Pull or download a component  For downloading an existing component in _Splight Hub_ you can use  ```bash  splight hub component pull &lt;name&gt; &lt;version&gt;  ```  This will download the component source code to your machine.- Push a component  For pushing a new component or component version to _Splight Hub_ the command is  ```bash  splight hub component push &lt;path&gt;  ```  Where `&lt;path&gt;` is the path (relative or absolute) for the source code of the  component to be uploded.- List component versions  You can also list all the version of given component with  ```bash  splight hub component versions &lt;name&gt;  ```### EngineThe `engine` command is used for interacting with the Splight Engine. So far, the availablesubcommands provide an interface for creating, reaading and deleting resources in the engine.The command is```bashsplight engine &lt;subcommand&gt; &lt;action&gt; [extra args]```depending on the which sub-command you use you can get different actionsto performThe valid sub-commands so far are:- `asset`- `attribute`- `component`- `datalake`- `file`- `graph`- `query`- `secret`### WorkspaceThis command allows you to manage different workspaces in the same computer. This canbe useful for managing different environments of different users that share the samecomputer.The command is```bashsplight workspace &lt;sub-command&gt;```The available subcommands are- `create &lt;name&gt;` to create a new workspace. After the creation of a new worskpace you need to configure _Splight CLI_ with `splight configure`.- `delete &lt;name&gt;` to delete an existing workspace.- `list` to list all workspaces. Current workspace displays a '*' to the left.- `select &lt;name&gt;` to switch between different configured workspaces.- `show &lt;name&gt;` to display the contents of an existing workspace.## Developing ComponentsNow it's time to talk about the process for developing components.### What is a component?A component is a package of code that can be executed in the Splight platform. SplightHub is the space that manages all components that exist in Splight. You can upload yourown coded component for your usability or even allow other people in Splight to use it!The expected flow for your component is the following:- You create your component and code it locally- Upload it to Splight Hub- Use your component in Splight, where all your data is available### Creating a ComponentTo create a component with the Splight Hub CLI, open a terminal and change the directory to the one where you want to work.Execute the following command:```bashsplight component create &lt;name&gt; &lt;version&gt;```This will create a directory with the following structure:```&lt;name&gt;-&lt;version&gt;│   __init__.py│   Initialization│   spec.json│   README.md```- `__init__.py` : The component is coded here.- `Initialization` : Execute instructions for the component to be initialized.- `spec.json` : JSON file where the component metadata is set.- `README.md` : Text that describes the component and how it works#### Component CoreWhen creating a component, inside `__init__.py` you will find a component template already written in python for you, in order to make it easier to write the component code.For example, when you create an algorithm component, in `__init__.py` will have the following:```pythonimport randomfrom splight_lib import loggingfrom splight_lib.component.abstract import AbstractComponentfrom splight_lib.execution import Taskfrom splight_models import Variablelogger = logging.getLogger()class Main(AbstractComponent):    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        logger.info(&quot;It worked!&quot;)    def start(self):        # To start a periodic function uncomment this        self.execution_client.start(            Task(                handler=self._my_periodic_function,                args=tuple(),                period=self.period            )        )    def _my_periodic_function(self):        logger.info(&quot;It worked!&quot;)        # To ingest in datalake uncomment the following        args = {            &quot;value&quot;: chosen_number,        }        self.datalake_client.save(            Variable,            instances=[Variable(args=args)],            collection=self.collection_name        )```The component class must always be called `Main` and must inherit from one of`splight_lib` abstract component classes. Also, super() init must be called. Theexecution of the component starts when the method `start()` is called, so the methodshould be implemented by the developer that is writting the component. Also, weprovide you a lot of useful functions in our package so you can use them to interactwith the platform and make better components#### Component InitializationIn the case you need some previous steps to be run before the component is executed,you can use the file `Initialization`. When you create your component with Splight Hub,`Initialization` will have the following:```jsonRUN pip install splight-lib==&lt;some lib version&gt;```This command will be run before the component is executed. You can add more lines likethis, or maybe even create a requirements.txt file in the component directory and justleave `Initialization` as:```jsonRUN pip install -r requirements.txt```#### Component ConfigurationThe file `spec.json` defines all the specification for the component, in this file youwill find generic information about the component like the name and version but alsoyou will find the input and output parameters.The structure of the file `spec.json` is the following```json{  &quot;name&quot;: &quot;component_name&quot;,  &quot;version&quot;: &quot;component_version&quot;,  &quot;tags&quot;: [&quot;tag1&quot;, &quot;tag2&quot;],  &quot;custom_types&quot;: [],  &quot;input&quot;: [],  &quot;output&quot;: []}```A component can have different inputs and outputs that are previously defined, theseparameters can any or primite Python types like `str`, `int`, `float`, `bool` or `file`,can also take the value of any Splight parameter like `Asset`, `Attribute`,`Component`, `Mapping`, `Query`, but also can be custom type defined in the`&quot;custom_types&quot;` key.A parameter have the structure```json{  &quot;name&quot;: &lt;name&gt;,  &quot;type&quot;: &lt;type&gt;,  &quot;required&quot;: &lt;required&gt;,  &quot;value&quot;: &lt;value&gt;}```and also accepts the key `&quot;multiple&quot;` with `true` or `false` value to specify if theparameter can take multiple value that is parsed as a list when the component is running.A custom type is defined by the following format```json{  &quot;name&quot;: &quot;&lt;custom_type_name&quot;,  &quot;fields&quot;: [    {      &quot;name&quot;: &quot;&lt;name&gt;&quot;,      &quot;type&quot;: &quot;&lt;type&gt;&quot;,      &quot;required&quot;: &quot;&lt;required&gt;&quot;,      &quot;multiple&quot;: &quot;&lt;multiple&gt;&quot;,      &quot;value&quot;: &quot;&lt;value&gt;&quot;    }  ]}```Then the custom type can be used as input or output. For example, we createa custom type:```json{  &quot;name&quot;: &quot;AssetAttribute&quot;,  &quot;fields&quot;: [    {      &quot;name&quot;: &quot;asset&quot;,      &quot;type&quot;: &quot;Asset&quot;,      &quot;required&quot;: true,      &quot;multiple&quot;: false    },    {      &quot;name&quot;: &quot;attribute&quot;,      &quot;type&quot;: &quot;Attribute&quot;,      &quot;depends_on&quot;: &quot;asset&quot;,      &quot;required&quot;: true,      &quot;multiple&quot;: false    }  ]}```So we can use it as follows```json{    &quot;name&quot;: &quot;CustomTypeVar&quot;,    &quot;type&quot;: &quot;AssetAttribute&quot;,    &quot;required&quot;: true,    &quot;multiple&quot;: false,    &quot;value&quot;: [        {            &quot;name&quot;: &quot;asset&quot;,            &quot;type&quot;: &quot;Asset&quot;,            &quot;required&quot;: true,            &quot;multiple&quot;: false,            &quot;value&quot;: &lt;asset_id&gt;        },        {            &quot;name&quot;: &quot;attribute&quot;,            &quot;type&quot;: &quot;Attribute&quot;,            &quot;required&quot;: true,            &quot;multiple&quot;: false,            &quot;value&quot;: &lt;attribute_id&gt;        }    ]}```This is just an example but you can create custom types as complex as you want,the limit is your imagination.#### Running LocallyYou can run the component locally before pushing it to the platform with the `--local` option:```bashsplight component run &lt;component directory&gt; --local```This way, the component will run using local clients for database and datalake. This is extremelyuseful for development since you can create instances of the different database objects in the local database for running different scenearios or differents tests. The same can be applied for datalake data, the local client stores the data in files. In both cases, for database and datalake,the files are created in the same directory as the `__init__.py` file of the component, so you can modified it based on your needs.You can interact with the local databases using the library, for example```pythonfrom splight_models import Asset, Attribute, Numberfrom splight_lib.client.database import LocalDatabaseClientfrom splight_lib.client.datalake import LocalDatalakeClientcomponent_path = ...db_client = LocalDatabaseClient(namespace=&quot;default&quot;, path=component_path)dl_client = LocalDatalakeClient(namespace=&quot;default&quot;, path=component_path)all_assets = db_client.get(Asset)attribute = Attribute(name=&quot;SomeAttribute&quot;)db_client.save(attribute)df = client.get_dataframe(Number, asset=all_assets[0].id, attribute=attribute.id)```</longdescription>
</pkgmetadata>