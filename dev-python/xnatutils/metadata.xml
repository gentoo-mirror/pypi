<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>XnatUtils=========Xnat-utils is a collection of scripts for conveniently up/downloading andlisting data on/from XNAT based on the `XnatPy package &lt;https://pypi.org/project/xnat/&gt;`_.Optional Dependencies---------------------The following converters are required for automatic conversions of downloaded images (using the'--convert_to' and '--converter' options)* dcm2niix (https://github.com/rordenlab/dcm2niix)* MRtrix 3 (http://mrtrix.readthedocs.io/en/latest/)Installation------------Install Python (&gt;=3.4)~~~~~~~~~~~~~~~~~~~~~~While many systems (particularly in research contexts) will already have Python 3 installed (note that Python 2is not sufficient), if your workstation doesn't here are some basic instructions on how to install it.macOS^^^^^macOS ships with it's own, slightly modified, version of Python, which it usesin some applications/services. For the most part it is okay for general usebut in some cases, such as with `xnat-utils`, the modifications can causeproblems. To avoid these I recommend installing an unmodified version of Pythonfor use in your scientific programs using Homebrew (http://brew.sh). To do thisfirst install Homebrew::    /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;    then install Python with::    brew install python3    If everything has gone well, when you type::    which python3    it should come back with::    /usr/local/bin/python3If it doesn't or your run into any problems follow the instructions you receivewhen you run::    brew doctorNote that these instructions are just recommendations so you don't have tofollow all of them, just the ones that are likely to be related to yourproblem.Windows^^^^^^^Download the version of Python for Windows using the most appropriate installerfor Python (&gt;=3.4), here https://www.python.org/downloads/windows/. Linux/Unix^^^^^^^^^^Python3 is most likely already installed but if it isn't it is best to installit using your package manager.Install pip~~~~~~~~~~~Pip is probably already be installed by default with your Python package socheck whether it is installed first::    pip3 --version    Noting that it should be in /usr/local/bin if you are using Homebrew on macOS.If pip is not installed you can install it by downloading the following script,https://bootstrap.pypa.io/get-pip.py and::    python3 &lt;path-to-downloaded-file&gt;Install XnatUtils package~~~~~~~~~~~~~~~~~~~~~~~~~The XnatUtils source code can be downloaded (or cloned using git) fromhttps://github.com/MonashBI/xnatutils.git. To install it``cd`` to to the directory you have downloaded and run::    pip3 install xnatutils    If you get permission denied errors you may need to use ``sudo``,or if you don't have admin access then you can install it in youruser directory with the ``--user`` flag.::    pip3 install --user xnatutilsI have had some difficulty with the installation of ``progressbar2`` as there is aconflict with the ``progressbar`` package (they both produce packages called``progressbar``). In this case it is probably a good idea to install xnat-utilsin a virtual environment (https://virtualenv.readthedocs.io/en/latest/).Authentication--------------The first time you use one of the utilities you will be prompted for the addressof the server would like to connect to, in addition to your username andpassword. By default a alias token for these credentials will be stored ina ~/.netrc file with the following format (with permissions set to 600 on the file)::    machine &lt;your-server-url&gt;    user &lt;your-alias-token&gt;    password &lt;your-alias-secret&gt;If you don't want these credentials stored, then pass the '--no_netrc'(or '-n') option.If you have saved your credentials in the ~/.netrc file, subsequent calls won't requireyou to provide the server address or username/password until the tokenexpires (if you don't want deal with expiring tokens you can just save your username/passwordin the ~/.netrc file instead, however, please be careful with important passwords). To resetthe saved credentials provide ``--server`` option again with the full server addressincluding the protocol (e.g. 'https://') or edit the ~/.netrc file directly.To connect to an additional XNAT server, provide the new server address via the ``--server`` option.Credentials for this server will be saved alongside the credentials for your previously savedservers. If the ``--server`` option is not provided the first server in the file will be used. Toused the save credentials for a secondary server you only need to provide as of the secondary serveraddress to ``--server`` to distinguish it from the other saved servers. For example given the followingsaved credentials in a ~/.netrc file::    machine xnat.myuni.edu    user myusername    password mypassword    machine xnat-dev.myuni.edu    user mydevusername    password mydevpassword    then::        $ xnat-ls -s dev MYPROJECT    will be enough to select the development server from the saved credentials list.Usage-----Six commands will be installed * xnat-get - download scans and resources* xnat-put - upload scans and resources (requires write privileges to project)* xnat-ls - list projects/subjects/sessions/scans* xnat-rename - renames an XNAT session* xnat-varget - retrieve a metadata field (including &quot;custom variables&quot;)* xnat-varput - set a metadata field (including &quot;custom variables&quot;)Please see the help for each tool by passing it the '-h' or '--help' option.Help on Regular Expressions---------------------------The regular expression syntax used by ``xnat-get`` and ``xnat-ls`` is fully definedhere, https://docs.python.org/2/library/re.html. However, for most basic usecases you will probably only need to use the '.' and '*' operators.'.' matches any character so the pattern::   MRH060_00._MR01   will match ::    MRH060_001_MR01    MRH060_002_MR01    MRH060_003_MR01    MRH060_004_MR01    MRH060_005_MR01    MRH060_006_MR01    MRH060_007_MR01    MRH060_008_MR01    MRH060_009_MR01The '*' matches 0 or more repeats of the previous character, which is mostuseful in conjunction with the '.' character to match string of wildcardcharacters, e.g.::    MRH060.*      will match all subjects/sessions in the MRH060 project.Note, that when using regular expressions that use '*' on the command line youwill need to enclose them in single quotes to avoid the default wilcard file search, e.g.::    $ xnat-ls 'MRH099.*'Probably the only other syntax that will prove useful is the'(option1|option2|...)'. For example::    MRH060_00(1|2|3)_MR01   will match ::    MRH060_001_MR01    MRH060_002_MR01    MRH060_003_MR01For more advanced syntax please refer to the numerous tutorials on regularexpressions online.</longdescription>
</pkgmetadata>