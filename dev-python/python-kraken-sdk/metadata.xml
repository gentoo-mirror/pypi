<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;Futures and Spot - REST and Websocket API Python SDK for the Kraken Cryptocurrency Exchange üêô&lt;/h1&gt;&lt;div align=&quot;center&quot;&gt;[![GitHub](https://badgen.net/badge/icon/github?icon=github&amp;label)](https://github.com/btschwertfeger/python-kraken-sdk)[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-orange.svg)](https://www.gnu.org/licenses/gpl-3.0)[![Generic badge](https://img.shields.io/badge/python-3.7_|_3.8_|_3.9_|_3.10_|_3.11-blue.svg)](https://shields.io/)[![Downloads](https://static.pepy.tech/personalized-badge/python-kraken-sdk?period=total&amp;units=abbreviation&amp;left_color=grey&amp;right_color=orange&amp;left_text=downloads)](https://pepy.tech/project/python-kraken-sdk)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)[![Typing](https://img.shields.io/badge/typing-mypy-informational)](https://mypy-lang.org/)[![CodeQL](https://github.com/btschwertfeger/python-kraken-sdk/actions/workflows/codeql.yaml/badge.svg?branch=master)](https://github.com/btschwertfeger/python-kraken-sdk/actions/workflows/codeql.yaml)[![CI/CD](https://github.com/btschwertfeger/python-kraken-sdk/actions/workflows/cicd.yaml/badge.svg?branch=master)](https://github.com/btschwertfeger/python-kraken-sdk/actions/workflows/cicd.yaml)[![codecov](https://codecov.io/gh/btschwertfeger/python-kraken-sdk/branch/master/badge.svg)](https://app.codecov.io/gh/btschwertfeger/python-kraken-sdk)![release](https://shields.io/github/release-date/btschwertfeger/python-kraken-sdk)[![release](https://img.shields.io/pypi/v/python-kraken-sdk)](https://pypi.org/project/python-kraken-sdk/)[![DOI](https://zenodo.org/badge/510751854.svg)](https://zenodo.org/badge/latestdoi/510751854)[![Documentation Status stable](https://readthedocs.org/projects/python-kraken-sdk/badge/?version=stable)](https://python-kraken-sdk.readthedocs.io/en/stable)&lt;/div&gt;&gt; ‚ö†Ô∏è This is an unofficial collection of REST and websocket clients for Spot and&gt; Futures trading on the Kraken cryptocurrency exchange using Python. Payward&gt; Ltd. and Kraken are in no way associated with the authors of this module and&gt; documentation.---## üìå DisclaimerThere is no guarantee that this software will work flawlessly at this or latertimes. Of course, no responsibility is taken for possible profits or losses.This software probably has some errors in it, so use it at your own risk. Alsono one should be motivated or tempted to invest assets in speculative forms ofinvestment. By using this software you release the authors from any liabilityregarding the use of this software.---## FeaturesAvailable Clients:- Spot REST Clients- Spot Websocket Clients (Websocket API v1 and v2)- Spot Orderbook Client- Futures REST Clients- Futures Websocket ClientGeneral:- access both public and private, REST and websocket endpoints- responsive error handling and custom exceptions- extensive example scripts (see `/examples` and `/tests`)- tested using the [pytest](https://docs.pytest.org/en/7.3.x/) framework- releases are permanently archived at [Zenodo](https://zenodo.org/badge/latestdoi/510751854)Documentation:- [https://python-kraken-sdk.readthedocs.io/en/stable](https://python-kraken-sdk.readthedocs.io/en/stable)- [https://python-kraken-sdk.readthedocs.io/en/latest](https://python-kraken-sdk.readthedocs.io/en/latest)---## ‚ùóÔ∏è Attention**ONLY** tagged releases are available at PyPI. So the content of the master maynot match with the content of the latest release. - Please have a look at therelease specific READMEs and changelogs.---## Table of Contents- [ Installation and setup ](#installation)- [ Spot Clients ](#spotusage)  - [REST API](#spotrest)  - [Websocket API V2](#spotws)- [ Futures Clients ](#futuresusage)  - [REST API](#futuresrest)  - [Websocket API](#futuresws)- [ Troubleshooting ](#trouble)- [ Contributions ](#contribution)- [ Notes ](#notes)- [ References ](#references)---&lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;# üõ† Installation and setup### 1. Install the package into the desired environment```bashpython3 -m pip install python-kraken-sdk```### 2. Register at [Kraken](https://www.kraken.com) and generate API keys- Spot Trading: https://www.kraken.com/u/security/api- Futures Trading: https://futures.kraken.com/trade/settings/api (see _[help](https://docs.futures.kraken.com/#introduction-generate-api-keys)_)- Futures Sandbox: https://demo-futures.kraken.com/settings/api### 3. Start using the provided example scripts### 4. Error handlingIf any unexpected behavior occurs, please check &lt;b style=&quot;color: yellow&quot;&gt;yourAPI permissions&lt;/b&gt;, &lt;b style=&quot;color: yellow&quot;&gt;rate limits&lt;/b&gt;, update thepython-kraken-sdk, see the [Troubleshooting](#trouble) section, and if the errorpersists please open an issue.---&lt;a name=&quot;spotusage&quot;&gt;&lt;/a&gt;# üìç Spot ClientsA template for Spot trading using both websocket and REST clients can be foundin `examples/spot_trading_bot_template_v2.py`.For those who need a realtime order book - a script that demonstrates how tomaintain a valid order book using the Orderbook client can be found in`examples/spot_orderbook.py`.&lt;a name=&quot;spotrest&quot;&gt;&lt;/a&gt;## Spot REST APIThe Kraken Spot REST API offers many endpoints for almost every use-case. Thepython-kraken-sdk aims to provide all of them - split in User, Market, Trade,Funding and Staking related clients.The following code block demonstrates how to use some of them. More examplescan be found in `examples/spot_examples.py`.```pythonfrom kraken.spot import User, Market, Trade, Funding, Stakingdef main():    key = &quot;kraken-public-key&quot;    secret = &quot;kraken-secret-key&quot;    # ____USER________________________    user = User(key=key, secret=secret)    print(user.get_account_balance())    print(user.get_open_orders())    # ‚Ä¶    # ____MARKET____    market = Market()    print(market.get_ticker(pair=&quot;BTCUSD&quot;))    # ‚Ä¶    # ____TRADE_________________________    trade = Trade(key=key, secret=secret)    print(trade.create_order(         ordertype=&quot;limit&quot;,         side=&quot;buy&quot;,         volume=1,         pair=&quot;BTC/EUR&quot;,         price=20000    ))    # ‚Ä¶    # ____FUNDING___________________________    funding = Funding(key=key, secret=secret)    print(        funding.withdraw_funds(            asset=&quot;DOT&quot;, key=&quot;MyPolkadotWallet&quot;, amount=200        )    )    print(funding.cancel_withdraw(asset=&quot;DOT&quot;, refid=&quot;&lt;some id&gt;&quot;))    # ‚Ä¶    # ____STAKING___________________________    staking = Staking(key=key, secret=secret)    print(staking.list_stakeable_assets())    print(        staking.stake_asset(            asset=&quot;DOT&quot;, amount=20, method=&quot;polkadot-staked&quot;        )    )    # ‚Ä¶if __name__ == &quot;__main__&quot;:    main()```&lt;a name=&quot;spotws&quot;&gt;&lt;/a&gt;## Spot Websocket API V2Kraken offers two versions of their websocket API (V1 and V2). Since V2 isoffers more possibilities, is way faster and easier to use, only those examplesare shown below. For using the websocket API V1 please have a look into the`examples/spot_ws_examples_v1.py`.The documentation for both API versions can be found here:- https://docs.kraken.com/websockets- https://docs.kraken.com/websockets-v2Note that authenticated Spot websocket clients can also un-/subscribe from/topublic feeds.The example below can be found in an extended way in`examples/spot_ws_examples_v2.py`.```pythonimport asynciofrom kraken.spot import KrakenSpotWSClientV2async def main():    key = &quot;spot-api-key&quot;    secret = &quot;spot-secret-key&quot;    class Client(KrakenSpotWSClientV2):        &quot;&quot;&quot;Can be used to create a custom trading strategy&quot;&quot;&quot;        async def on_message(self, message):            &quot;&quot;&quot;Receives the websocket messages&quot;&quot;&quot;            if message.get(&quot;method&quot;) == &quot;pong&quot; \                or message.get(&quot;channel&quot;) == &quot;heartbeat&quot;:                return            print(message)            # here we can access lots of methods, for example to create an order:            # if self.is_auth:  # only if the client is authenticated ‚Ä¶            #     await self.send_message(            #         message={            #             &quot;method&quot;: &quot;add_order&quot;,            #             &quot;params&quot;: {            #                 &quot;limit_price&quot;: 1234.56,            #                 &quot;order_type&quot;: &quot;limit&quot;,            #                 &quot;order_userref&quot;: 123456789,            #                 &quot;order_qty&quot;: 1.0,            #                 &quot;side&quot;: &quot;buy&quot;,            #                 &quot;symbol&quot;: &quot;BTC/USD&quot;,            #                 &quot;validate&quot;: True,            #             },            #         }            #     )            # ‚Ä¶ it is also possible to call regular REST endpoints            # but using the websocket messages is more efficient.            # You can also un-/subscribe here using self.subscribe/self.unsubscribe.    # Public/unauthenticated websocket client    client = Client()  # only use this one if you don't need private feeds    await client.subscribe(        params={&quot;channel&quot;: &quot;ticker&quot;, &quot;symbol&quot;: [&quot;BTC/USD&quot;, &quot;DOT/USD&quot;]}    )    await client.subscribe(        params={&quot;channel&quot;: &quot;book&quot;, &quot;depth&quot;: 25, &quot;symbol&quot;: [&quot;BTC/USD&quot;]}    )    # wait because unsubscribing is faster than unsubscribing ‚Ä¶ (just for that example)    await asyncio.sleep(3)    # print(client.active_public_subscriptions) # to list active subscriptions    await client.unsubscribe(        params={&quot;channel&quot;: &quot;ticker&quot;, &quot;symbol&quot;: [&quot;BTC/USD&quot;, &quot;DOT/USD&quot;]}    )    # ‚Ä¶    # Per default, the authenticated client starts two websocket connections,    # one for authenticated and one for public messages. If there is no need    # for a public connection, it can be disabled using the ``no_public``    # parameter.    client_auth = Client(key=key, secret=secret, no_public=True)    await client_auth.subscribe(params={&quot;channel&quot;: &quot;executions&quot;})    while not client.exception_occur and not client_auth.exception_occur:        await asyncio.sleep(6)    returnif __name__ == &quot;__main__&quot;:    try:        asyncio.run(main())    except KeyboardInterrupt:        pass        # The websocket client will send {'event': 'asyncio.CancelledError'}        # via on_message so you can handle the behavior/next actions        # individually within your strategy.```---&lt;a name=&quot;futuresusage&quot;&gt;&lt;/a&gt;# üìç Futures ClientsKraken provides a sandbox environment at https://demo-futures.kraken.com forFutures paper trading. When using these API keys you have to set the `sandbox`parameter to `True` when instantiating the respective client.A template for Futures trading using both websocket and REST clients can befound in `examples/futures_trading_bot_template.py`.The Kraken Futures API documentation can be found here:- https://docs.futures.kraken.com- https://support.kraken.com/hc/en-us/sections/360012894412-Futures-API&lt;a name=&quot;futuresrest&quot;&gt;&lt;/a&gt;## Futures REST APIAs the Spot API, Kraken also offers a REST API for Futures. Examples on how touse the python-kraken-sdk fot Futures are shown in`examples/futures_examples.py` and listed in a shorter ways below.```pythonfrom kraken.futures import Market, User, Trade, Fundingdef main():    key = &quot;futures-api-key&quot;    secret = &quot;futures-secret-key&quot;    # ____USER________________________    user = User(key=key, secret=secret) # optional: sandbox=True    print(user.get_wallets())    print(user.get_open_orders())    print(user.get_open_positions())    print(user.get_subaccounts())    # ‚Ä¶    # ____MARKET____    market = Market()    print(market.get_ohlc(tick_type=&quot;trade&quot;, symbol=&quot;PI_XBTUSD&quot;, resolution=&quot;5m&quot;))    priv_market = Market(key=key, secret=secret)    print(priv_market.get_fee_schedules_vol())    print(priv_market.get_execution_events())    # ‚Ä¶    # ____TRADE_________________________    trade = Trade(key=key, secret=secret)    print(trade.get_fills())    print(trade.create_batch_order(        batchorder_list = [{            &quot;order&quot;: &quot;send&quot;,            &quot;order_tag&quot;: &quot;1&quot;,            &quot;orderType&quot;: &quot;lmt&quot;,            &quot;symbol&quot;: &quot;PI_XBTUSD&quot;,            &quot;side&quot;: &quot;buy&quot;,            &quot;size&quot;: 1,            &quot;limitPrice&quot;: 12000,            &quot;cliOrdId&quot;: &quot;some-client-id&quot;        }, {            &quot;order&quot;: &quot;send&quot;,            &quot;order_tag&quot;: &quot;2&quot;,            &quot;orderType&quot;: &quot;stp&quot;,            &quot;symbol&quot;: &quot;PI_XBTUSD&quot;,            &quot;side&quot;: &quot;buy&quot;,            &quot;size&quot;: 1,            &quot;limitPrice&quot;: 10000,            &quot;stopPrice&quot;: 11000,        }, {            &quot;order&quot;: &quot;cancel&quot;,            &quot;order_id&quot;: &quot;e35dsdfsdfsddd-8a30-4d5f-a574-b5593esdf0&quot;,        }, {            &quot;order&quot;: &quot;cancel&quot;,            &quot;cliOrdId&quot;: &quot;another-client-id&quot;,        }],    ))    print(trade.cancel_all_orders())    print(        trade.create_order(            orderType=&quot;lmt&quot;,            side=&quot;buy&quot;,            size=1,            limitPrice=4,            symbol=&quot;pf_bchusd&quot;        )    )    # ‚Ä¶    # ____FUNDING___________________________    funding = Funding(key=key, secret=secret)    # ‚Ä¶if __name__ == &quot;__main__&quot;:    main()```&lt;a name=&quot;futuresws&quot;&gt;&lt;/a&gt;## Futures Websocket APINot only REST, also the websocket API for Kraken Futures is available. Examplesare shown below and demonstrated in `examples/futures_ws_examples.py`.- https://docs.futures.kraken.com/#websocket-apiNote: Authenticated Futures websocket clients can also un-/subscribe from/topublic feeds.```pythonimport asynciofrom kraken.futures import KrakenFuturesWSClientasync def main():    key = &quot;futures-api-key&quot;    secret = &quot;futures-secret-key&quot;    class Client(KrakenFuturesWSClient):        async def on_message(self, event):            print(event)    # Public/unauthenticated websocket connection    client = Client()    products = [&quot;PI_XBTUSD&quot;, &quot;PF_ETHUSD&quot;]    # subscribe to a public websocket feed    await client.subscribe(feed=&quot;ticker&quot;, products=products)    # await client.subscribe(feed=&quot;book&quot;, products=products)    # ‚Ä¶    # unsubscribe from a public websocket feed    # await client.unsubscribe(feed=&quot;ticker&quot;, products=products)    # Private/authenticated websocket connection (+public)    client_auth = Client(key=key, secret=secret)    # print(client_auth.get_available_private_subscription_feeds())    # subscribe to a private/authenticated websocket feed    await client_auth.subscribe(feed=&quot;fills&quot;)    await client_auth.subscribe(feed=&quot;open_positions&quot;)    await client_auth.subscribe(feed=&quot;open_orders&quot;)    # ‚Ä¶    # unsubscribe from a private/authenticated websocket feed    await client_auth.unsubscribe(feed=&quot;fills&quot;)    while True:        await asyncio.sleep(6)if __name__ == &quot;__main__&quot;:    try:        asyncio.run(main())    except KeyboardInterrupt:        # do some exception handling ‚Ä¶        pass```---&lt;a name=&quot;contribution&quot;&gt;&lt;/a&gt;# üÜï Contributions‚Ä¶ are welcome! - Please have a look at [CONTRIBUTION.md](./CONTRIBUTING.md).---&lt;a name=&quot;trouble&quot;&gt;&lt;/a&gt;# üö® Troubleshooting- Check if you downloaded and installed the **latest version** of the  python-kraken-sdk.- Check the **permissions of your API keys** and the required permissions on the  respective endpoints.- If you get some Cloudflare or **rate limit errors**, please check your Kraken  Tier level and maybe apply for a higher rank if required.- **Use different API keys for different algorithms**, because the nonce  calculation is based on timestamps and a sent nonce must always be the highest  nonce ever sent of that API key. Having multiple algorithms using the same  keys will result in invalid nonce errors.---&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;# üìù Notes- The version scheme is `&lt;Major&gt;.&lt;Minor&gt;.&lt;Service Level&gt;` where:  - **Major** will affect everything and there will be breaking changes in any    case. This could be for example a change to Python 3.11+ only.  - **Minor** introduces features and enhancements which may bring breaking    changes in some cases. These breaking changes could be renaming or addition    of parameters, change in order of parameters or even renaming a function.  - **Service Level** includes bug fixes, documentation or CI related changes.- Coding standards are not always followed to make arguments and function names  as similar as possible to those of the Kraken API documentations.&lt;a name=&quot;references&quot;&gt;&lt;/a&gt;# üî≠ References- https://python-kraken-sdk.readthedocs.io/en/stable- https://docs.kraken.com/rest- https://docs.kraken.com/websockets- https://docs.kraken.com/websockets-v2- https://docs.futures.kraken.com- https://support.kraken.com/hc/en-us/sections/360012894412-Futures-API---</longdescription>
</pkgmetadata>