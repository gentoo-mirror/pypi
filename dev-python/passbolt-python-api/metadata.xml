<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Passbolt-python-API## Installation    $pip install passbolt-python-api ## Dependencies  - Python &gt;= 3.6  - GPG (also known as GnuPG) software## ConfigurationCreate a config file with the following contents.    [PASSBOLT]    SERVER = http://&lt;server_ip or domain&gt;    SERVER_PUBLIC_KEY_FILE = &lt;optional: server_public.asc&gt;    USER_FINGERPRINT = &lt;user_fingerprint&gt;    USER_PUBLIC_KEY_FILE = &lt;optional: passbolt_public.asc&gt;    USER_PRIVATE_KEY_FILE = &lt;optional: passbolt_private.asc&gt;    PASSPHRASE = &lt;passbolt_password&gt;Or as a dictionary    config = {        &quot;PASSBOLT&quot;: {            &quot;SERVER&quot;: &quot;http://&lt;server_ip or domain&gt;&quot;            ....(same as above)        }    }## Usage### Import GPG keys from PassboltThe first step will be to import the private and public keys using gpg for encryption.Note: Do not keep private and public files. Rather just import them using gpg command one time and delete those files.#### Using PythonTo import new keys using Python:    &gt;&gt;&gt;import passboltapi    &gt;&gt;&gt;passbolt = passboltapi.PassboltAPI(config_path=&quot;config.ini&quot;, new_keys=True)    To delete old keys and import only the new ones.    &gt;&gt;&gt;import passboltapi    &gt;&gt;&gt;passbolt = passboltapi.PassboltAPI(config_path=&quot;config.ini&quot;, new_keys=True, delete_old_keys=True)#### Using GPGImport new keys:    $gpg --import public.asc    $gpg --batch --import private.ascDeleting existing keys:    $gpg --delete-secret-keys &lt;fingerprint&gt;    $gpg --delete-key &lt;fingerprint&gt;## How to use PassboltAPI client    &gt;&gt;&gt;import passboltapi    &gt;&gt;&gt;passbolt = passboltapi.PassboltAPI(config_path=&quot;config.ini&quot;)    # Or pass the configuration settings as a dict    &gt;&gt;&gt;passbolt = passboltapi.PassboltAPI(config=&lt;dictionary as the given example config.ini&gt;)        # Now you may do any get, post, put and delete request.    &gt;&gt;&gt;r = passbolt.get(url=&quot;/resources.json?api-version=v2&quot;)    &gt;&gt;&gt;r = passbolt.post(self.server_url + url, json=data)        # One can also use it as context manager    &gt;&gt;&gt;with passboltapi.PassboltAPI(config_path=&quot;config.ini&quot;) as passbolt:To get all resources    resources = {record.username: record for record in passbolt.list_resources(folder_id=folder_id)}To create new resource (optional: folder)        response = passbolt.create_resource(        name=name,        username=username,        password=password,        uri=uri, # optional        description=description,  # optional        folder_id=passbolt_folder_id  # optional    )    # Note: if you add folder_id, you need to have the public keys of all the users who have access to the foler.    # This can be easily achieved as follows:    passbolt.import_public_keys()To move resource to folder    passbolt.move_resource_to_folder(resource_id, folder_id)### Sample testCheck test.py for an example.If new keys needs to be imported, then USER_PUBLIC_KEY_FILE and USER_PRIVATE_KEY_FILE settingsshould be in the config ini having the path of the public and private keys file respectively.### Passbolt APIFor more API related questions, visit Passbolt API documentation:&lt;https://help.passbolt.com/api&gt;</longdescription>
</pkgmetadata>