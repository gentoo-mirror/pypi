<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pychan [![master](https://github.com/cooperwalbrun/pychan/actions/workflows/master.yml/badge.svg)](https://github.com/cooperwalbrun/pychan/actions/workflows/master.yml) [![PyPI](https://img.shields.io/pypi/v/pychan)](https://pypi.org/project/pychan) [![codecov](https://codecov.io/gh/cooperwalbrun/pychan/branch/master/graph/badge.svg?token=BJEJOMIYWY)](https://codecov.io/gh/cooperwalbrun/pychan)1. [Overview](#overview)2. [Installation](#installation)3. [Usage](#usage)   1. [General Notes](#general-notes)   2. [Setup](#setup)   3. [Fetch Board Names](#fetch-board-names)   4. [Fetch Threads](#fetch-threads)   5. [Fetch Archived Threads](#fetch-archived-threads)   6. [Search 4chan](#search-4chan)      1. [About Cloudflare](#about-cloudflare)      2. [Search 4chan Code Example](#search-4chan-code-example)   7. [Fetch Posts for a Specific Thread](#fetch-posts-for-a-specific-thread)4. [pychan Models](#pychan-models)   1. [Threads](#threads)   2. [Posts](#posts)      1. [A Note About Replies](#a-note-about-replies)   3. [Posters](#posters)   4. [Files](#files)5. [Contributing](#contributing)## Overview`pychan` is a Python client for interacting with 4chan. 4chan does not have an official API, andattempts to implement one by third parties have tended to languish, so instead, this libraryprovides abstractions over interacting with (scraping) 4chan directly. `pychan` is object-orientedand its implementation is lazy where reasonable (using Python Generators) in order to optimizeperformance and minimize superfluous blocking I/O operations.## InstallationIf you have Python &gt;=3.10 and &lt;4.0 installed, `pychan` can be installed from PyPI usingsomething like```bashpip install pychan```## Usage### General NotesAll 4chan interactions are throttled internally by sleeping the executing thread. If you execute`pychan` in a multithreaded way, you will not get the benefits of this throttling. `pychan` does nottake responsibility for the consequences of excessive HTTP requests in such cases.### Setup```pythonfrom pychan import FourChan, LogLevel, PychanLogger# With all defaults (logging disabled, all exceptions raised)fourchan = FourChan()# Tell pychan to gracefully ignore HTTP exceptions, if any, within its internal logicfourchan = FourChan(raise_http_exceptions=False)# Tell pychan to gracefully ignore parsing exceptions, if any, within its internal logicfourchan = FourChan(raise_parsing_exceptions=False)# Configure logging explicitlylogger = PychanLogger(LogLevel.INFO)fourchan = FourChan(logger=logger)# Use all of the above settings at oncelogger = PychanLogger(LogLevel.INFO)fourchan = FourChan(logger=logger, raise_http_exceptions=True, raise_parsing_exceptions=True)```The rest of the examples in this `README` assume that you have already created an instance of the`FourChan` class as shown above.### Fetch Board NamesThis function dynamically fetches boards from 4chan at call time.&gt;Note: boards which are not compatible with `pychan` are not returned in this list.```pythonboards = fourchan.get_boards()# Sample return value:# ['a', 'b', 'c', 'd', 'e', 'g', 'gif', 'h', 'hr', 'k', 'm', 'o', 'p', 'r', 's', 't', 'u', 'v', 'vg', 'vm', 'vmg', 'vr', 'vrpg', 'vst', 'w', 'wg', 'i', 'ic', 'r9k', 's4s', 'vip', 'qa', 'cm', 'hm', 'lgbt', 'y', '3', 'aco', 'adv', 'an', 'bant', 'biz', 'cgl', 'ck', 'co', 'diy', 'fa', 'fit', 'gd', 'hc', 'his', 'int', 'jp', 'lit', 'mlp', 'mu', 'n', 'news', 'out', 'po', 'pol', 'pw', 'qst', 'sci', 'soc', 'sp', 'tg', 'toy', 'trv', 'tv', 'vp', 'vt', 'wsg', 'wsr', 'x', 'xs']```### Fetch Threads```python# Iterate over all threads in /b/for thread in fourchan.get_threads(&quot;b&quot;):    # Do stuff with the thread    print(thread.title)    # You can also iterate over all the posts in the thread    for post in fourchan.get_posts(thread):        # Do stuff with the post - refer to the model documentation in pychan's README for details        print(post.text)```### Fetch Archived Threads&gt;Note: some boards do not have an archive (e.g. /b/). Such boards will either return an empty list&gt;or raise an exception depending on how you have configured your `FourChan` instance.The threads returned by this function will always have a `title` field containing the text shown in4chan's interface under the &quot;Excerpt&quot; column header. This text can be either the thread's real titleor a preview of the original post's text. Passing any of the threads returned by this method to the`get_posts()` method will automatically correct the `title` field (if necessary) on the thread thatgets attached to the returned posts. See[Fetch Posts for a Specific Thread](#fetch-posts-for-a-specific-thread) for more details.&gt;Technically, `pychan` could address the `title` behavior described above by issuing an additional&gt;HTTP request for each thread to get its real title, but in the spirit of making the smallest number&gt;of HTTP requests possible, `pychan` directly uses the excerpt instead.```pythonfor thread in fourchan.get_archived_threads(&quot;pol&quot;):    # Do stuff with the thread    print(thread.title)    # You can also iterate over all the posts in the thread    for post in fourchan.get_posts(thread):        # Do stuff with the post - refer to the model documentation in pychan's README for details        print(post.text)```### Search 4chan#### About CloudflarePerforming searches against 4chan is much more cumbersome than accessing the rest of 4chan's data.This is because 4chan has a Cloudflare firewall in front of its REST API, so the only way to getdata back from searches is to supply the HTTP request information needed to bypass Cloudflare'santi-bot checks. Ultimately, this amounts to passing certain headers along with the HTTP request,but the challenge comes from actually acquiring such headers.It is currently beyond the scope of `pychan` to generate these headers for you, so if you would liketo automate the circumvention of Cloudflare's protections, you may want to look into using a projectlike one of the following (this list is alphabetized and not exhaustive):* [ultrafunkamsterdam/undetected-chromedriver](https://github.com/ultrafunkamsterdam/undetected-chromedriver)* [VeNoMouS/cloudscraper](https://github.com/VeNoMouS/cloudscraper)* [wkeeling/selenium-wire](https://github.com/wkeeling/selenium-wire)A manual way to acquire these values is to perform a 4chan search using a web browser and leveragethe browser's Developer Tools to trace the network requests that were made during the search. Therequest that contains the Cloudflare values will have been made to `https://find.4channel.org/api`with some query parameters. Once you have found this request, copy the `User-Agent` and `Cookie`values that were sent in your request, then pass them to `pychan`'s `search()` method. Be aware thatthe Cloudflare cookie(s) have an expiration on them, so this manual workaround will only returnresults until Cloudflare invalidates your cookie(s). After that, you will need to acquire newvalues.#### Search 4chan Code Example&gt;Note: closed/stickied/archived threads are never returned in search results.```python# This &quot;threads&quot; variable will contain a Python Generator (not a list) in order to facilitate lazinessthreads = fourchan.search(   board=&quot;b&quot;,   text=&quot;ylyl&quot;,   user_agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot;,   cloudflare_cookies={      &quot;cf_clearance&quot;: &quot;bm2RICpcDeR4cXoC2nfI_cnZcbAkN4UYpN6c1zzeb8g-1440859602-0-160&quot;   })for thread in threads:    # The thread object is the same class as the one returned by get_threads()    for post in fourchan.get_posts(thread):       # Do stuff with the post - refer to the model documentation in pychan's README for details       print(post.text)```### Fetch Posts for a Specific Thread```pythonfrom pychan.models import Thread# Instantiate a Thread instance with which to query for poststhread = Thread(&quot;int&quot;, 168484869)# Note: the thread contained within the returned posts will have all applicable metadata (such as# title and sticky status), regardless of whether you provided such data above - pychan will# &quot;auto-discover&quot; all metadata and include it in the post models' copy of the threadposts = fourchan.get_posts(thread)```## pychan ModelsThe following tables summarize all the kinds of data that are available on the various models usedby this library.Also note that all model classes in `pychan` implement the following methods:* `__repr__`* `__str__`* `__hash__`* `__eq__`* `__iter__` - this is implemented so that the models may be passed to Python's `tuple()` function* `__copy__`* `__deepcopy__`### ThreadsThe table below corresponds to the `pychan.models.Thread` class.| Field | Type | Example Value(s) || ----- | ---- | ---------------- || `thread.board` | `str` | `&quot;b&quot;`, `&quot;int&quot;`| `thread.number` | `int` | `882774935`, `168484869`| `thread.title` | `Optional[str]` | `None`, `&quot;YLYL thread&quot;`| `thread.is_stickied` | `bool` | `True`, `False`| `thread.is_closed` | `bool` | `True`, `False`| `thread.is_archived` | `bool` | `True`, `False`| `thread.url` | `str` | `&quot;https://boards.4channel.org/a/thread/251097344&quot;`### PostsThe table below corresponds to the `pychan.models.Post` class.| Field | Type | Example Value(s) || ----- | ---- | ---------------- || `post.thread` | `Thread` | `pychan.models.Thread`| `post.number` | `int` | `882774935`, `882774974`| `post.timestamp` | [datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime) | [datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime)| `post.poster` | `Poster` | `pychan.models.Poster`| `post.text` | `str` | `&quot;&gt;be me\n&gt;be bored\n&gt;write pychan\n&gt;somehow it works&quot;`| `post.is_original_post` | `bool` | `True`, `False`| `post.file` | `Optional[File]` | `None`, `pychan.models.File`| `post.replies` | `list[Post]` | `[]`, `[pychan.models.Post, pychan.models.Post]`| `post.url` | `str` | `&quot;https://boards.4channel.org/a/thread/251097344#p251097419&quot;`#### A Note About RepliesThe `replies` field shown above is purely a convenience feature `pychan` provides for accessing allposts within a thread which used the `&gt;&gt;` operator to &quot;reply&quot; to the current post. When you call the`get_posts()` method, you will still receive every available post and reply (in the order they wereall posted) as a single, flat list.### PostersThe table below corresponds to the `pychan.models.Poster` class.| Field | Type | Example Value(s) || ----- | ---- | ---------------- || `poster.name` | `str` | `&quot;Anonymous&quot;`| `poster.is_moderator` | `bool` | `True`, `False`| `poster.id` | `Optional[str]` | `None`, `&quot;BYagKQXI&quot;`| `poster.flag` | `Optional[str]` | `None`, `&quot;United States&quot;`, `&quot;Canada&quot;`### FilesThe table below corresponds to the `pychan.models.File` class.| Field | Type | Example Value(s) || ----- | ---- | ---------------- || `file.url` | `str` | `&quot;https://i.4cdn.org/pol/1658892700380132.jpg&quot;`| `file.name` | `str` | `&quot;wojak.jpg&quot;`, `&quot;i feel alone.jpg&quot;`| `file.size` | `str` | `&quot;601 KB&quot;`| `file.dimensions` | `tuple[int, int]` | `(1920, 1080)`, `(800, 600)`| `file.is_spoiler` | `bool` | `True`, `False`## ContributingSee [CONTRIBUTING.md](CONTRIBUTING.md) for developer-oriented information.</longdescription>
</pkgmetadata>