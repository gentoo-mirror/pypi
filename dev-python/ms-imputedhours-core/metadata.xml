<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>MS Jira hours imputed services=============================This repository is a suite of methods necessary to extract and calculate information about the allocated hours of employees and their work agreements.Hours agreement========================The hours that an employee must do are recorded in a Google Sheet where the hours needed by office are indicated for each day.## How to use the agreements service?----------------------------------In order for us to connect to Google services, we need to register a series of environment variables:```bashexport GOOGLE_SHEET_CREDENTIALS=&lt;SERVICE_ACCOUNT_BASE64_CONTENT&gt;```where we will store in Base64 the content of the JSON of our Google service account that has the credentials to authenticate us.```bashexport GOOGLE_SHEET_AGREEMENTS_SPREADSHEET_ID=&lt;ID_FOR_GOOGLE_SHEET&gt;```It will be the Google sheet ID where the work agreements will be.### Usage example#### Getting agreement hours for a month```pythonfrom ms_imputedhours_core.agreements import Agreementmonth = 9year = 2022sheet_name = 'Sheet 1'spreadsheet_id = '111111'service = Agreements(spreadsheet_id)service.get_hours_by_month(month, year, sheet_name)```#### Getting agreement hours by a dates range```pythonfrom ms_imputedhours_core.agreements import Agreementspreadsheet_id = '111111'from_date = datetime.strptime('12/09/2022', '%d/%m/%Y')to_date = datetime.strptime('17/09/2022', '%d/%m/%Y')sheet_name = 'SHEET_NAME_TEST'service = Agreements(spreadsheet_id)service.get_hours_by_range(from_date, to_date, sheet_name)```#### Getting all office names```pythonfrom ms_imputedhours_core.agreements import Agreementspreadsheet_id = '111111'service = Agreements(spreadsheet_id)service..get_all_office_names()```# How to contributeAfter clone repository## 1.- Install dependencies```bashpoetry install```## 2.- Run test```bashmake test```## 3.- Run lint```bashmake lint &amp;&amp; make isort```## How to publish new versionOnce we have done a merge of our Pull request and we have the updated master branch we can generate a new version. For them we have 3 commands that change the version of our library and generate the corresponding tag so that the Bitbucket pipeline starts and publishes our library automatically.```bashmake release-patch``````bashmake release-minor``````bashmake release-major```</longdescription>
</pkgmetadata>