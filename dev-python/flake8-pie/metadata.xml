<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flake8-pie [![CircleCI](https://circleci.com/gh/sbdchd/flake8-pie.svg?style=svg)](https://circleci.com/gh/sbdchd/flake8-pie) [![pypi](https://img.shields.io/pypi/v/flake8-pie.svg)](https://pypi.org/project/flake8-pie/)&gt; A flake8 extension that implements misc. lints## lints### PIE781: assign-and-returnBased on Clippy's[`let_and_return`](https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return)and Microsoft's TSLint rule[`no-unnecessary-local-variable`](https://github.com/Microsoft/tslint-microsoft-contrib).For more info on the structure of this lint, see the [accompanying blogpost](https://steve.dignam.xyz/2018/12/16/creating-a-flake8-lint/).#### examples```python# errordef foo():   x = bar()   return x# alloweddef foo():   x, _ = bar()   return x```### PIE783: celery-explicit-namesWarn about [Celery](https://pypi.org/project/celery/) task definitions that don't have explicit names.Note: this lint is kind of naive considering any decorator with a `.task()`method or any decorator called `shared_task()` a Celery decorator.#### examples```python# error@app.task()def foo():    pass# ok@app.task(name=&quot;app_name.tasks.foo&quot;)def foo():    pass```### PIE784: celery-explicit-crontab-argsThe `crontab` class provided by Celery has some default args that aresuprising to new users. Specifically, `crontab(hour=&quot;0,12&quot;)` won't run a taskat midnight and noon, it will run the task at every minute during those twohours. This lint makes that call an error, forcing you to write`crontab(hour=&quot;0, 12&quot;, minute=&quot;*&quot;)`.Additionally, the lint is a bit more complex in that it requires you specifyevery smaller increment than the largest time increment you provide. So if youprovide `days_of_week`, then you need to provide `hour`s and `minute`sexplicitly.Note: if you like the default behavior of `crontab()` then you can eitherdisable this lint or pass `&quot;*&quot;` for the `kwarg` value, e.g., `minutes=&quot;*&quot;`.Also, since this lint is essentially a naive search for calls to a`crontab()` function, if you have a function named the same then this willcause false positives.### PIE785: celery-require-tasks-expireCelery tasks can bunch up if they don't have expirations.This enforces specifying expirations in both the celery beat config dict andin `.apply_async()` calls.The same caveat applies about how this lint is naive.### PIE786: precise-exception-handlersBe precise in what exceptions you catch. Bare `except:` handlers, catching `BaseException`, or catching `Exception` can lead to unexpected bugs.#### examples```python# errortry:    save_file(name=&quot;export.csv&quot;)except:    pass# errortry:    save_file(name=&quot;export.csv&quot;)except BaseException:    pass# errortry:    save_file(name=&quot;export.csv&quot;)except Exception:    pass# errortry:    save_file(name=&quot;export.csv&quot;)except (ValueError, Exception):    pass# oktry:    save_file(name=&quot;export.csv&quot;)except OSError:    pass```### PIE787: no-len-conditionEmpty collections are fasley in Python so calling `len()` is unnecessary whenchecking for emptiness in an if statement/expression.Comparing to explicit scalars is allowed.```python# errorif len(foo): ...if not len(foo): ...# okif foo: ...if not foo: ...if len(foo) &gt; 0: ...if len(foo) == 0: ...```### PIE788: no-bool-conditionIf statements/expressions evalute the truthiness of the their test argument,so calling `bool()` is unnecessary.Comparing to `True`/`False` is allowed.```python# errorif bool(foo): ...if not bool(foo): ...# okif foo: ...if not foo: ...if bool(foo) is True: ...if bool(foo) is False: ...```### PIE789: prefer-isinstance-type-compareUsing `type()` doesn't take into account subclassess and type checkers won'trefine the type, use `isinstance` instead.```python# errorif type(foo) == str: ...if type(foo) is str: ...if type(foo) in [int, str]: ...# okif isinstance(foo, str): ...if isinstance(foo, (int, str)): ...```### PIE790: no-unnecessary-pass`pass` is unnecessary when definining a `class` or function with an emptybody.```python# errorclass BadError(Exception):    &quot;&quot;&quot;    some doc comment    &quot;&quot;&quot;    passdef foo() -&gt; None:    &quot;&quot;&quot;    some function    &quot;&quot;&quot;    pass# okclass BadError(Exception):    &quot;&quot;&quot;    some doc comment    &quot;&quot;&quot;def foo() -&gt; None:    &quot;&quot;&quot;    some function    &quot;&quot;&quot;```### PIE791: no-pointless-statementsComparisions without an assignment or assertion are probably a typo.```python# error&quot;foobar&quot; in datares.json() == []user.is_authenticated() is True# okassert &quot;foobar&quot; in datafoo = res.json() == []use.is_authenticated()```### PIE792: no-inherit-objectInheriting from `object` isn't necessary in Python 3.```python# errorclass Foo(object):    ...# okclass Foo:    ...```### PIE793: prefer-dataclassAttempts to find cases where the `@dataclass` decorator is unintentionallymissing.```python# errorclass Foo:    z: dict[int, int]    def __init__(self) -&gt; None: ...class Bar:    x: list[str]# okclass Bar(Foo):    z: dict[int, int]@dataclassclass Bar:    x: list[str]```### PIE794: dupe-class-field-definitionsFinds duplicate definitions for the same field, which can occur in large ORMmodel definitions.```python# errorclass User(BaseModel):    email = fields.EmailField()    # ...80 more properties...    email = fields.EmailField()# okclass User(BaseModel):    email = fields.EmailField()    # ...80 more properties...```### PIE795: prefer-stdlib-enumsInstead of defining various constant properties on a class, use the stdlibenum which typecheckers support for type refinement.```python# errorclass Foo:    A = &quot;A&quot;    B = &quot;B&quot;    C = &quot;C&quot;# okimport enumclass Foo(enum.Enum):    A = &quot;A&quot;    B = &quot;B&quot;    C = &quot;C&quot;```### PIE796: prefer-unique-enumsBy default the stdlib enum allows multiple field names to map to the samevalue, this lint requires each enum value be unique.```python# errorclass Foo(enum.Enum):    A = &quot;A&quot;    B = &quot;B&quot;    C = &quot;C&quot;    D = &quot;C&quot;# okclass Foo(enum.Enum):    A = &quot;A&quot;    B = &quot;B&quot;    C = &quot;C&quot;    D = &quot;D&quot;```### PIE797: no-unnecessary-if-exprCall `bool()` directly rather than reimplementing its functionality.```python# errorfoo(is_valid=True if buzz() else False)# okfoo(is_valid=bool(buzz()))```### PIE798: no-unnecessary-classInstead of using class to namespace functions, use a module.```python# errorclass UserManager:    class User(NamedTuple):        name: str    @classmethod    def update_user(cls, user: User) -&gt; None:        ...    @staticmethod    def sync_users() -&gt; None:        ...# okclass User(NamedTuple):    name: strdef update_user(user: User) -&gt; None:    ...def sync_users() -&gt; None:    ...```### PIE799: prefer-col-initCheck that values are passed in when collections are created rather thancreating an empty collection and then inserting.```python# errorbars = []bar = bar()bars.append(bar)# okbar = bar()bars = [bar]# errors = deque()s.append(foo)# oks = deque([foo])```### PIE800: no-unnecessary-spreadCheck for unnecessary dict unpacking.```python# error{**foo, **{&quot;bar&quot;: 10}}# ok{**foo, &quot;bar&quot;: 10}```### PIE801: prefer-simple-returnReturn boolean expressions directly instead of returning `True` and `False`.```python# errordef main():    if foo &gt; 5:        return True    return False# errordef main():    if foo &gt; 5:        return True    else:        return False# okdef main():    return foo &gt; 5```### PIE802: prefer-simple-any-allRemove unnecessary comprehensions for `any` and `all````python# errorany([x.id for x in bar])all([x.id for x in bar])# okall(x.id for x in bar)any(x.id for x in bar)any({x.id for x in bar})```### PIE803: prefer-logging-interpolationDon't format strings before logging. Let `logging` interpolate arguments.This allows Sentry to aggregate logs, prevents raising exceptions if interpolation fails, and improves performance if the log level is disabled. See [&quot;PyCQA/pylint#1788&quot;](https://github.com/PyCQA/pylint/issues/1788#issuecomment-461279687).```python# errorlogger.info(&quot;Login error for %s&quot; % user)logger.info(&quot;Login error for %s, %s&quot; % (user_id, name))# errorlogger.info(&quot;Login error for {}&quot;.format(user))logger.info(&quot;Login error for {}, {}&quot;.format(user_id, name))# errorlogger.info(f&quot;Login error for {user}&quot;)logger.info(f&quot;Login error for {user_id}, {name}&quot;)# oklogger.info(&quot;Login error for %s&quot;, user)logger.info(&quot;Login error for %s, %s&quot;, user_id, name)```### PIE804: no-unnecessary-dict-kwargsAs long as the keys of the dict are valid Python identifier names, we can safelyremove the surrounding dict.```python# errorfoo(**{&quot;bar&quot;: True})# okfoo(bar=True)foo(**buzz)foo(**{&quot;bar foo&quot;: True})```## dev```shell# install dependenciespoetry installs/lints/test```### PIE805: prefer-literalCurrently only checks for byte string literals.```python# error&quot;foo&quot;.encode()# okb&quot;foo&quot;&quot;ðŸ˜€&quot;.encode()```### PIE806: no-assert-exceptInstead of `assert`ing and catching the exception, use an if statement.```python# errortry:    assert &quot;@&quot; in barexcept AssertionError:    ...# okif &quot;@&quot; in bar:    ...```### PIE807: prefer-list-builtin`lambda: []` is equivalent to the builtin `list````python# error@dataclassclass Foo:    foo: List[str] = field(default_factory=lambda: [])# ok@dataclassclass Foo:    foo: List[str] = field(default_factory=list)```### PIE808: prefer-simple-rangeWe can leave out the first argument to `range` in some cases since the defaultstart position is 0.```python# errrange(0, 10)# okrange(10)range(x, 10)range(0, 10, x)```### PIE809: django-prefer-bulkBulk create multiple objects instead of executing O(N) queries.```python# error[Item.objects.create(item) for item in items]# error[Item.objects.create(item) for item in [bar for bar in buzz]]# error(Item.objects.create(item) for item in items)# okItem.objects.insert(items)Item.objects.create(item)```## development### examining the ASTYou can use `astpretty` to dump the AST of a piece of code.```shell./.venv/bin/astpretty &lt;(pbpaste)```### uploading a new version to [PyPi](https://pypi.org)```shell# increment `Flake8PieCheck.version` and pyproject.toml `version`# build new distribution files and upload to pypi# Note: this will ask for login credentialsrm -rf dist &amp;&amp; poetry publish --build```</longdescription>
</pkgmetadata>