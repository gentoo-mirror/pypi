<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aiosqlite\: Sqlite for AsyncIO==============================.. image:: https://readthedocs.org/projects/aiosqlite/badge/?version=latest   :target: https://aiosqlite.omnilib.dev/en/latest/?badge=latest   :alt: Documentation Status.. image:: https://img.shields.io/pypi/v/aiosqlite.svg   :target: https://pypi.org/project/aiosqlite   :alt: PyPI Release.. image:: https://img.shields.io/badge/change-log-blue   :target: https://github.com/omnilib/aiosqlite/blob/master/CHANGELOG.md   :alt: Changelog.. image:: https://img.shields.io/pypi/l/aiosqlite.svg   :target: https://github.com/omnilib/aiosqlite/blob/master/LICENSE   :alt: MIT Licensedaiosqlite provides a friendly, async interface to sqlite databases.It replicates the standard ``sqlite3`` module, but with async versionsof all the standard connection and cursor methods, plus context managers forautomatically closing connections and cursors::    async with aiosqlite.connect(...) as db:        await db.execute(&quot;INSERT INTO some_table ...&quot;)        await db.commit()        async with db.execute(&quot;SELECT * FROM some_table&quot;) as cursor:            async for row in cursor:                ...It can also be used in the traditional, procedural manner::    db = await aiosqlite.connect(...)    cursor = await db.execute('SELECT * FROM some_table')    row = await cursor.fetchone()    rows = await cursor.fetchall()    await cursor.close()    await db.close()aiosqlite also replicates most of the advanced features of ``sqlite3``::    async with aiosqlite.connect(...) as db:        db.row_factory = aiosqlite.Row        async with db.execute('SELECT * FROM some_table') as cursor:            async for row in cursor:                value = row['column']        await db.execute('INSERT INTO foo some_table')        assert db.total_changes &gt; 0Install-------aiosqlite is compatible with Python 3.7 and newer.You can install it from PyPI:.. code-block:: bash    $ pip install aiosqliteDetails-------aiosqlite allows interaction with SQLite databases on the main AsyncIO eventloop without blocking execution of other coroutines while waiting for queriesor data fetches.  It does this by using a single, shared thread per connection.This thread executes all actions within a shared request queue to preventoverlapping actions.Connection objects are proxies to the real connections, contain the sharedexecution thread, and provide context managers to handle automatically closingconnections.  Cursors are similarly proxies to the real cursors, and provideasync iterators to query results.License-------aiosqlite is copyright `Amethyst Reese &lt;https://noswap.com&gt;`_, and licensed under theMIT license.  I am providing code in this repository to you under an open sourcelicense.  This is my personal repository; the license you receive to my codeis from me and not from my employer. See the `LICENSE`_ file for details... _LICENSE: https://github.com/omnilib/aiosqlite/blob/master/LICENSE</longdescription>
</pkgmetadata>