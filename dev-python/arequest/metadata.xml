<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># arequest![PyPI](https://img.shields.io/pypi/v/arequest) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/arequest) ![Downloads](https://pepy.tech/badge/arequest) ![PyPI - License](https://img.shields.io/pypi/l/arequest)_arequest is an async HTTP client for Python, with more customization._## Warnning**The arequest is experimental for now, please do not use for production environment.**## Installation`pip install arequest`  &gt; *python3.8 or higher version is required.*  ## QuickstartIt's requests-like, just don't forget `async/await`.``` pythonimport asyncioimport arequestasync def main():    r = await arequest.get(&quot;https://httpbin.org/get&quot;)    print(r.headers)    print(r.status_code)    print(r.encoding)    print(r.text)asyncio.run(main())```## Request### Passing Parameters In URLs``` pythonawait arequest.get(&quot;https://httpbin.org/get&quot;, params={&quot;key&quot;: &quot;value&quot;})```### POST``` pythonawait arequest.post(&quot;https://httpbin.org/post&quot;, data={&quot;key&quot;: &quot;value&quot;})```- POST JSON``` pythonawait arequest.post(&quot;https://httpbin.org/post&quot;, json={&quot;key&quot;: &quot;value&quot;})```### Reuse a connection``` pythonasync with arequest.Session() as session:    await session.get(&quot;https://httpbin.org/get&quot;)    await session.get(&quot;https://httpbin.org/get&quot;)    ...```&gt; *unlike `requests.Session()`, it does not automatically handle `Set-Cookie`*### Custom Headers``` pythonheaders = {    &quot;user-agent&quot;: &quot;test&quot;}await arequest.get(&quot;https://httpbin.org/get&quot;, headers=headers)```if you want to set header `Content-Type`, use `contentType`.``` pythonawait arequest.post(&quot;https://httpbin.org/post&quot;, contentType=&quot;application/test&quot;)```### Custom cookies``` pythonawait arequest.get(&quot;https://httpbin.org/cookies&quot;, cookies={&quot;key&quot;: &quot;value&quot;})```### Unverified SSL Cert``` pythonawait arequest.get(&quot;https://httpbin.org/get&quot;, verify=False)```### Retry``` pythonawait arequest.get(&quot;https://httpbin.org/get&quot;, retries=1)```max retries, default `0`### Timeout``` pythontry:    await arequest.get(&quot;http://httpbin.org/delay/5&quot;, timeout=3)except arequest.TimeoutError:    print(&quot;timeout&quot;)```if timeout is `None`, wait until the request complete. default `30`s## Response```pythonprint(r.headers)print(r.status_code)print(r.encoding)print(r.text)print(r.json())```### Binary Response Content``` pythonr.content```### Cookies``` pythonr.cookies```## TODO- [x] timeout- [ ] file upload- [ ] proxy- [x] keep-alive- [ ] http2- [ ] raw request- [x] cookies handle- [x] response cookies- [ ] test coverage</longdescription>
</pkgmetadata>