<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Quart-CORS==========|Build Status| |pypi| |python| |license|Quart-CORS is an extension for `Quart&lt;https://github.com/pgjones/quart&gt;`_ to enable and control `CrossOrigin Resource Sharing &lt;http://www.w3.org/TR/cors/&gt;`_, CORS (alsoknown as access control).CORS is required to share resources in browsers due to the `SameOrigin Policy &lt;https://en.wikipedia.org/wiki/Same-origin_policy&gt;`_which prevents resources being used from a different origin. An originin this case is defined as the scheme, host and port combined and aresource corresponds to a path.In practice the Same Origin Policy means that a browser visiting``http://quart.com`` will prevent the response of ``GEThttp://api.com`` being read. It will also prevent requests such as``POST http://api.com``. Note that CORS applies to browser initiatedrequests, non-browser clients such as ``requests`` are not subject toCORS restrictions.CORS allows a server to indicate to a browser that certain resourcescan be used, contrary to the Same Origin Policy. It does so viaaccess-control headers that inform the browser how the resource can beused. For GET requests these headers are sent in the response. Fornon-GET requests the browser must ask the server for theaccess-control headers before sending the actual request, it does sovia a preflight OPTIONS request.The Same Origin Policy does not apply to WebSockets, and hence thereis no need for CORS. Instead the server alone is responsible fordeciding if the WebSocket is allowed and it should do so by inspectingthe WebSocket-request origin header.Simple (GET) requests should return CORS headers specifying theorigins that are allowed to use the resource (response). This can beany origin, ``*`` (wildcard), or a list of specific origins. Theresponse should also include a CORS header specifying whetherresponse-credentials e.g. cookies can be used. Note that if credentialsharing is allowed the allowed origins must be specific and not awildcard.Preflight requests should return CORS headers specifying the originsallowed to use the resource, the methods and headers allowed to besent in a request to the resource, whether response credentials can beused, and finally which response headers can be used.Note that certain actions are allowed in the Same Origin Policy suchas embedding e.g. ``&lt;img src=&quot;http://api.com/img.gif&quot;&gt;`` and simplePOSTs. For the purposes of this readme though these complications areignored.The CORS access control response headers are,================================ ===========================================================Header name                      Meaning-------------------------------- -----------------------------------------------------------Access-Control-Allow-Origin      Origins that are allowed to use the resource.Access-Control-Allow-Credentials Can credentials be shared.Access-Control-Allow-Methods     Methods that may be used in requests to the resource.Access-Control-Allow-Headers     Headers that may be sent in requests to the resource.Access-Control-Expose-Headers    Headers that may be read in the response from the resource.Access-Control-Max-Age           Maximum age to cache the CORS headers for the resource.================================ ===========================================================Quart-CORS uses the same naming (without the Access-Control prefix)for it's arguments and settings when they relate to the same meaning.Usage-----To add CORS access control headers to all of the routes in theapplication, simply apply the ``cors`` function to the application, orto a specific blueprint,.. code-block:: python    app = Quart(__name__)    app = cors(app, **settings)    blueprint = Blueprint(__name__)    blueprint = cors(blueprint, **settings)alternatively if you wish to add CORS selectively by resource, applythe ``route_cors`` function to a route, or the ``websocket_cors``function to a WebSocket,.. code-block:: python    @app.route('/')    @route_cors(**settings)    async def handler():        ...    @app.websocket('/')    @websocket_cors(allow_origin=...)    async def handler():        ...The ``settings`` are these arguments,================= ====================================================Argument          type----------------- ----------------------------------------------------allow_origin      Union[Set[Union[Pattern, str]], Union[Pattern, str]]allow_credentials boolallow_methods     Union[Set[str], str]allow_headers     Union[Set[str], str]expose_headers    Union[Set[str], str]max_age           Union[int, flot, timedelta]================= ====================================================which correspond to the CORS headers noted above. Note that allsettings are optional and defaults can be specified in the applicationconfiguration,============================ ========================Configuration key            type---------------------------- ------------------------QUART_CORS_ALLOW_ORIGIN      Set[Union[Pattern, str]]QUART_CORS_ALLOW_CREDENTIALS boolQUART_CORS_ALLOW_METHODS     Set[str]QUART_CORS_ALLOW_HEADERS     Set[str]QUART_CORS_EXPOSE_HEADERS    Set[str]QUART_CORS_MAX_AGE           float============================ ========================The ``websocket_cors`` decorator only takes an ``allow_origin``argument which defines the origins that are allowed to use theWebSocket. A WebSocket request from a disallowed origin will beresponded to with a 400 response.The ``allow_origin`` origins should be the origin only (no path, querystrings or fragments) i.e. ``https://quart.com`` not``https://quart.com/``.The ``cors_exempt`` decorator can be used in conjunction with ``cors``to exempt a websocket handler or view function from cors.Simple examples~~~~~~~~~~~~~~~To allow an app to be used from any origin (not recommended as it istoo permissive),.. code-block:: python    app = Quart(__name__)    app = cors(app, allow_origin=&quot;*&quot;)To allow a route or WebSocket to be used from another specific domain,``https://quart.com``,.. code-block:: python    @app.route('/')    @route_cors(allow_origin=&quot;https://quart.com&quot;)    async def handler():        ...    @app.websocket('/')    @websocket_cors(allow_origin=&quot;https://quart.com&quot;)    async def handler():        ...To allow a route or WebSocket to be used from any subdomain (but notthe domain itself) of ``quart.com``,.. code-block:: python    @app.route('/')    @route_cors(allow_origin=re.compile(r&quot;https:\/\/.*\.quart\.com&quot;))    async def handler():        ...    @app.websocket('/')    @websocket_cors(allow_origin=re.compile(r&quot;https:\/\/.*\.quart\.com&quot;))    async def handler():        ...To allow a JSON POST request to an API route, from ``https://quart.com``,.. code-block:: python    @app.route('/', methods=[&quot;POST&quot;])    @route_cors(        allow_headers=[&quot;content-type&quot;],        allow_methods=[&quot;POST&quot;],        allow_origin=[&quot;https://quart.com&quot;],    )    async def handler():        data = await request.get_json()        ...Contributing------------Quart-CORS is developed on `GitHub&lt;https://github.com/pgjones/quart-cors&gt;`_. You are very welcome toopen `issues &lt;https://github.com/pgjones/quart-cors/issues&gt;`_ orpropose `merge requests&lt;https://github.com/pgjones/quart-cors/merge_requests&gt;`_.Testing~~~~~~~The best way to test Quart-CORS is with Tox,.. code-block:: console    $ pip install tox    $ toxthis will check the code style and run the tests.Help----This README is the best place to start, after that try opening an`issue &lt;https://github.com/pgjones/quart-cors/issues&gt;`_... |Build Status| image:: https://github.com/pgjones/quart-cors/actions/workflows/ci.yml/badge.svg   :target: https://github.com/pgjones/quart-cors/commits/main.. |pypi| image:: https://img.shields.io/pypi/v/quart-cors.svg   :target: https://pypi.python.org/pypi/Quart-CORS/.. |python| image:: https://img.shields.io/pypi/pyversions/quart-cors.svg   :target: https://pypi.python.org/pypi/Quart-CORS/.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: https://github.com/pgjones/quart-cors/blob/main/LICENSE</longdescription>
</pkgmetadata>