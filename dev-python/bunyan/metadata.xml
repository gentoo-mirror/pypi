<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-bunyan=============Json logger compatible with`node-bunyan &lt;https://github.com/trentm/node-bunyan&gt;`__Get the code============.. code:: sh    git clone git@github.com:uphold/python-bunyan.gitInstall=======.. code:: sh    pip install bunyanHow to setup============Programatically---------------Create a new log handler and assign a ``BunyanFormatter`` formatter.Register the handler on the current logger... code:: py    import bunyan    import logging    import sys    logger = logging.getLogger()    logHandler = logging.StreamHandler(stream = sys.stdout)    formatter = bunyan.BunyanFormatter()    logHandler.setFormatter(formatter)    logger.addHandler(logHandler)    logger.setLevel(logging.DEBUG)Using dictConfig----------------This is the same example as defined above, but using a dictionary with``dictConfig``... code:: py    LOG_CONFIG = {      'formatters': {        'bunyan': {          '()' : 'bunyan.BunyanFormatter'        }      },      'handlers': {        'debug': {          'class': 'logging.StreamHandler',          'formatter': 'bunyan',          'stream': 'ext://sys.stdout'        },      },      'root': {        'level': 'DEBUG',        'handlers': ['debug']      },      'version': 1    }    import logging.config    logging.config.dictConfig(config)How to use==========After setting up your loggers, bunyan allows to log in two differentways: - Traditional - Using a dictionaryTraditional logging-------------------String message~~~~~~~~~~~~~~Traditionaly logging in python allows to log a string message... code:: py    logger.debug(&quot;This is a log message&quot;)This will output:.. code:: json    {      &quot;name&quot;: &quot;root&quot;,      &quot;pathname&quot;: &quot;test.py&quot;,      &quot;levelname&quot;: &quot;DEBUG&quot;,      &quot;msg&quot;: &quot;This is a log message&quot;,      &quot;time&quot;: &quot;2016-03-14T16:34:47Z&quot;,      &quot;hostname&quot;: &quot;jalpedrinha-mbp.local&quot;,      &quot;level&quot;: 20,      &quot;pid&quot;: 41414,      &quot;v&quot;: 0    }String message with extra dictionary~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This module extends this functionality by allowing an extra keyword arg,and passing a dictionary... code:: py    logger.debug(&quot;This is a log message with extra context&quot;, extra = {'some': 'additional data'})And the output will include ``some`` key and value:.. code:: json    {      &quot;name&quot;: &quot;root&quot;,      &quot;time&quot;: &quot;2016-03-14T16:36:12Z&quot;,      &quot;some&quot;: &quot;additional data&quot;,      &quot;pathname&quot;: &quot;test.py&quot;,      &quot;msg&quot;: &quot;This is a log message with extra context&quot;,      &quot;levelname&quot;: &quot;DEBUG&quot;,      &quot;hostname&quot;: &quot;jalpedrinha-mbp.local&quot;,      &quot;level&quot;: 20,      &quot;pid&quot;: 41495,      &quot;v&quot;: 0    }Dictionary----------This method works similarly to using an extra dictionary without thestring message, but instead of passing a keyword argument extra, youjust pass the first positional argument as a dictionary... code:: py    logger.debug({'some': 'data'})Which results in:.. code:: json    {      &quot;name&quot;: &quot;root&quot;,      &quot;some&quot;: &quot;data&quot;,      &quot;pathname&quot;: &quot;test.py&quot;,      &quot;msg&quot;: &quot;&quot;,      &quot;time&quot;: &quot;2016-03-14T16:45:23Z&quot;,      &quot;levelname&quot;: &quot;DEBUG&quot;,      &quot;hostname&quot;: &quot;jalpedrinha-mbp.local&quot;,      &quot;level&quot;: 20,      &quot;pid&quot;: 43263,      &quot;v&quot;: 0    }Testing=======Docker-compose and tox----------------------Run tox container:.. code:: sh    docker-compose upNatively--------First, install ``dev-requirements``.. code:: sh    pip install -r dev-requirements.txtThen run nose:::    nosetests testsChangelog---------0.1.0 / 2016-03-15~~~~~~~~~~~~~~~~~~-  `#2 &lt;https://github.com/uphold/python-bunyan/pull/2&gt;`__ Add Bunyan   Formatter (@jAlpedrinha)</longdescription>
</pkgmetadata>