<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyapproxmc: bindings to the ApproxMC model counterThis directory provides Python bindings to ApproxMC on the C++ level,i.e. when importing pyapproxmc, the ApproxMC counter becomes part of thePython process itself.## Installing```pip install pyapproxmc```## CompilingIf you don't want to use the pip package, you can compile it:```apt-get install python-devcd pythongit clone https://github.com/msoos/cryptominisatgit clone https://github.com/meelgroup/arjuncd ..python -m buildYou will then find the files under &quot;dist/&quot;.```## UsageThe `pyapproxmc` module has one object, `Counter` that has two functions`count` and `add_clause`.The function ``add_clause()`` takes an iterable list of literals such as``[1, 2]`` which represents the truth ``1 or 2 = True``. For example,``add_clause([1])`` sets variable ``1`` to ``True``.The function `count()` counts the number of solutions to the system of constraintsthat have been added with `add_clause()`:```&gt;&gt;&gt; from pyapproxmc import Counter&gt;&gt;&gt; s = Counter()&gt;&gt;&gt; s.add_clause([1, 2])&gt;&gt;&gt; cells, hashes = s.count()&gt;&gt;&gt; print(&quot;There are approx &quot;, cells*2**hashes, &quot; solutions&quot;)There are 55 solutions, approximately```The return value is a tuple of cells and hashes. Which gives how many solutionsthere are, probabilistically approximatelyYou can give the following arguments to `Counter`:* `seed` -- sets the random seed* `verbosity` -- sets the verbosity of the system (default = 0)* `epsilon` -- Tolerance parameter, i.e. sets how approximate the returned count is. Default = 0.8* `delta` -- Confidence parameter, i.e. sets how probabilistically correct the returned count is. Default = 0.20</longdescription>
</pkgmetadata>