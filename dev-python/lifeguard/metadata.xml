<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Lifeguard![Build Status](https://github.com/LifeguardSystem/lifeguard/workflows/Lifeguard%20Core%20CI/badge.svg)![Lifeguard Core Publish](https://github.com/LifeguardSystem/lifeguard/workflows/Lifeguard%20Core%20Publish/badge.svg)[![PyPI version](https://badge.fury.io/py/lifeguard.svg)](https://badge.fury.io/py/lifeguard)## Examples of UsageSee a complete example at: https://github.com/LifeguardSystem/lifeguard-example### Settings FileIn the root of project should be exists a file called `lifeguard_settings.py` like the example:```python&quot;&quot;&quot;Lifeguard Settings&quot;&quot;&quot;import lifeguard_mongodb# other dependecies# Plugins modulesPLUGINS = [    lifeguard_mongodb,    # other plugins]# You can execute code in the lifeguard startup processdef setup(_lifeguard_context):    pass```### Create a validationTo create a validation you should create a file into `validations` directory. The file should ends with `_validation.py`.Example:```pythonfrom lifeguard import NORMAL, PROBLEM, change_statusfrom lifeguard.actions.database import save_result_into_databasefrom lifeguard.actions.notifications import notify_in_single_messagefrom lifeguard.http_client import getfrom lifeguard.logger import lifeguard_logger as loggerfrom lifeguard.validations import ValidationResponse, validation@validation(    &quot;check if pudim is alive&quot;,    actions=[save_result_into_database, notify_in_single_message],    schedule={&quot;every&quot;: {&quot;minutes&quot;: 1}},)def pudim_is_alive():    status = NORMAL    result = requests.get(&quot;http://pudim.com.br&quot;)    logger.info(&quot;pudim status code: %s&quot;, result.status_code)    if result.status_code != 200:        status = change_status(status, PROBLEM)    return ValidationResponse(        status,        {status: result.status_code},    )```### Validation ActionsAction is a simple python function with only 2 arguments: a validation response and a dict called settings. These settings are the parameter called settings in validation.```pythondef custom_action(validation_response, settings):    pass```Builtin validations can be found in [Wiki](https://github.com/LifeguardSystem/lifeguard/wiki).### Create a custom controllerTo create a custom controller with decorators see the example```pythonimport jsonfrom lifeguard.controllers import controller@controller(&quot;/hello/&lt;name&gt;&quot;)def hello(name):    return json.dumps({&quot;name&quot;: name})```This file should be in the `controllers` directory and should ends with `_controller.py`.### Init LifeguardExecute: `lifeguard`To init only web server: `lifeguard --no-scheduler`To init only scheduler: `lifeguard --no-server`### SettingsTo see all settings avaiable run command:`lifeguard -d`## Builtin Endpoints### Recover Status__To get global status and all validations.__`GET /lifeguard/status/complete````json{    &quot;status&quot;: &quot;NORMAL&quot;,    &quot;validations&quot;: [        {            &quot;validation_name&quot;: &quot;pudim&quot;,            &quot;status&quot;: &quot;NORMAL&quot;,            &quot;details&quot;: {                &quot;NORMAL&quot;: 200            },            &quot;settings&quot;: {                &quot;notification&quot;: {                    &quot;notify&quot;: true                }            },            &quot;last_execution&quot;: &quot;2021-06-15T10:46&quot;        },        {            &quot;validation_name&quot;: &quot;my site&quot;,            &quot;status&quot;: &quot;NORMAL&quot;,            &quot;details&quot;: {                &quot;NORMAL&quot;: 200            },            &quot;settings&quot;: {                &quot;notification&quot;: {                    &quot;notify&quot;: true                }            },            &quot;last_execution&quot;: &quot;2021-06-15T10:46&quot;        }    ]}```__To get global status and only non normal validations.__`GET /lifeguard/status````json{    &quot;status&quot;: &quot;PROBLEM&quot;,    &quot;validations&quot;: [        {            &quot;validation_name&quot;: &quot;my site&quot;,            &quot;status&quot;: &quot;PROBLEM&quot;,            &quot;details&quot;: {                &quot;NORMAL&quot;: 200            },            &quot;settings&quot;: {                &quot;notification&quot;: {                    &quot;notify&quot;: true                }            },            &quot;last_execution&quot;: &quot;2021-06-15T10:46&quot;        }    ]}```## Authentication### Builtin Methods#### Basic AuthenticationSet users in lifeguard context like in the example:```python# in lifeguard_settings.pyfrom lifeguard.auth import BASIC_AUTH_METHODdef setup(lifeguard_context):    lifeguard_context.auth_method = BASIC_AUTH_METHOD    lifeguard_context.users = [{&quot;username&quot;: &quot;test&quot;, &quot;password&quot;: &quot;pass&quot;}]```</longdescription>
</pkgmetadata>