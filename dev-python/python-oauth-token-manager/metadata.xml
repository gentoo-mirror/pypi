<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Library for storing OAuth credentials in many locations## What's this for?By their very nature, OAuth credentials are valuable and dangerous, and haveto be stored securely. As a result, the same tasks to store these tokens in asimple and secure fashion have to be written each time, or copied and pastedaround - leading to potential issues as problems are found and not fixedin all places.This library will store OAuth tokens in any of the following places:1. Secret Manager1. Firestore1. Google Cloud Storage files1. A local `json` fileOther storage locations can be added at will simply by forking this library andextending the appropriate abstract classes.## Initial Setup And Installation## ## Examples### Fetching a token from storage```from auth.credentials_helpers import encode_keyfrom auth.secret_manager import SecretManagermanager = SecretManager(project='&lt;gcp project name&gt;')key = manager.get_document(encode_key('&lt;token id&gt;'))```Note the use of `encode_key`. This is because many of the storage systemssupported do not allow special characters, and the most convenient identifierfor most OAuth tokens is the email address of the user. `encode_key` is abase64 encoder - and no decoding is necessary.The example given uses Secret Manager (part of Google Cloud). To use (say) GCS,the code would change like this:```from auth.credentials_helpers import encode_keyfrom auth.gcs_datastore import GCSDatastoremanager = GCSDatastore(project='&lt;gcp project name&gt;', bucket='&lt;gcs bucket&gt;')key = manager.get_document(encode_key('&lt;token id&gt;'))```All that changes is where the datastore is!### Storing a token in Secret Manager```from auth.secret_manager import SecretManagermanager = SecretManager(project='&lt;gcp project name&gt;')manager.update_document(id=encode_key('&lt;token_id&gt;'), new_data=&lt;token string&gt;)```This will implicitly create a `secret` if there was not one already, or simplyupdate an existing secret with a new 'live' version of the secret.### Listing all the available secrets```from auth.secret_manager import SecretManagermanager = SecretManager(project='&lt;gcp project name&gt;')manager.list_documents()```### Removing a secret```from auth.secret_manager import SecretManagermanager = SecretManager(project='&lt;gcp project name&gt;')manager.delete_document(id=encode_key('&lt;token_id&gt;'))```</longdescription>
</pkgmetadata>