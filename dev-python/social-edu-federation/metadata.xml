<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># social-edu-federation: An SAML authentication backend for python-social-auth dedicated to education federation (RENATER)[![Python version](https://img.shields.io/badge/Python-3.8%20|%203.9%20|%203.10-blue.svg)](https://www.python.org/)[![Django version](https://img.shields.io/badge/Django-3.2%20|%204.0-green.svg)](https://www.djangoproject.com/)[![CircleCI](https://circleci.com/gh/openfun/social-edu-federation/tree/main.svg?style=svg)](https://circleci.com/gh/openfun/social-edu-federation/tree/main)## OverviewThis library provides an authentication backend which can be used with[Python Social Auth](https://github.com/python-social-auth/social-core)and optionally[Python Social Auth - Django](https://github.com/python-social-auth/social-app-django)to connect your application to an education SAML federation.Before beginning, you must read the above documentations.For now, it is only limited to the[RENATER](https://services.renater.fr/federation/en/documentation/generale/metadata/index)'s&quot;Féderation Éducation-Recherche&quot; (FER) federation.## Architecture`social-edu-federation` is divided in two parts:- The SAML backend and metadata parser, customized for the FER federation,  usable with Python Social Auth.- The Django integration which provides: base views to provide metadata, list available  Identity Providers and testing material for local development.### Authentication behaviorThis library parses the metadata to extract base SAML authentication for each identityprovider in the federation metadata plus some extra information(see below *Setup - Core* section)The authentication process can be summarized in few steps:- The federation metadata are parsed to fetch the identity providers list.- User choose an identity provider in the list with which they have an account and want to login.- The backend makes an SAML authentication request and redirects the user to the identity provider  &quot;single login&quot; page.- The user logs in on the identity provider website and is redirected to our (Service Provider) site.- The SAML FER backend will extract authentication data it needs from the authentication response  assertions.  The used assertions are:  - **urn:oid:2.5.4.4** (sn) aka (surname)    This represents the user's first name.  - **urn:oid:2.5.4.42** (givenName) aka (gn)    This represents the user's last name.  - **urn:oid:2.16.840.1.113730.3.1.241** (displayName)    This represents the user's full name.  - **urn:oid:0.9.2342.19200300.100.1.3** (mail)    Provides us the user email, we use it as email address and username.  - **urn:oid:1.3.6.1.4.1.5923.1.1.1.1** (eduPersonAffiliation)    Provides us the user's role(s) list.    This is not mandatory.  Fields we do not use:   - **urn:oid:1.3.6.1.4.1.7135.1.2.1.14** (supannEtablissement)  All fields are documented on  [Renater supann](https://services.renater.fr/documentation/supann/supann2021/recommandations/attributs/liste_des_attributs).- The authentication response passes through the &quot;Social auth&quot; pipeline.  `social-edu-federation` provides one extra step to replace the  `social_core.pipeline.user.create_user` original one. This step allows to have a fallback  on the user's *full name* if one of the *first name* or *last name* is not available.## Setup### CoreYou may install only the library core which will provide you with:- The FER metadata parser (see `social_edu_federation.parser.FederationMetadataParser`)  which is an extension of the original `python3-saml`'s `OneLogin_Saml2_IdPMetadataParser`  and provides extra features as:  - Extract all the identity providers at once  - Extract extra information from each identity provider metadata (    the identity provider's display name,    the identity provider's organization name,    the identity provider's organization display name)- A basic &quot;metadata store&quot; which is not really helpful but organizes the process of fetching  the metadata and convert it to a Python Social Auth like object, usable by the authentication  backend.- The SAML authentication backend which is preconfigured to be used with the FER federation.```shell$ pip install social-edu-federation```### Django integrationIf you also want to add this library into a Django project you may explicitly add the `django` extra while installing the library:```shell$ pip install social-edu-federation[django]```It is also recommended to add `social_edu_federation.django.apps.PythonSocialEduFedAuthConfig`to your `INSTALLED_APPS` to get the following features:- A Django check which asserts the default &quot;metadata store&quot; is overridden.- The `prefetch_saml_fer_metadata` management command (see *Cache management* below).- The static files and Django views default templates (see *Using the default views* below).#### Cache managementWhen using the Django integration, it is highly recommended to define a Django setting totell `social_edu_federation` to use the &quot;metadata store with cache&quot;. This will avoid fetchingthe whole federation metadata everytime we need an information about one identityprovider.```python# settings.pySOCIAL_AUTH_SAML_FER_FEDERATION_SAML_METADATA_STORE = &quot;social_edu_federation.django.metadata_store.CachedMetadataStore&quot;```This &quot;metadata store&quot; will use the Django `default` cache which can be easily replaced bythe cache backend of your choice:```python# settings.pySOCIAL_AUTH_SAML_FER_DJANGO_CACHE = &quot;redis&quot;assert SOCIAL_AUTH_SAML_FER_DJANGO_CACHE in CACHES, &quot;cache backend name is not in settings.CACHES&quot;```If you installed the `social_edu_federation` Django application, you will be able tofill the cache asynchronously using the `prefetch_saml_fer_metadata` managementcommand, by defining a cron job which will call`django-admin prefetch_saml_fer_metadata saml_fer` to refresh the FER cache.Using this make sure that no actual user has to wait for the full federation metadata to loadloading time.#### Project setupFor a basic use of the FER backend for authentication you will need to define:```python# settings.pyINSTALLED_APPS = [    # ...    &quot;social_django.apps.PythonSocialAuthConfig&quot;,  # see python-social-auth    &quot;social_edu_federation.django.apps.PythonSocialEduFedAuthConfig&quot;,]MIDDLEWARE = [    # ...    &quot;social_django.middleware.SocialAuthExceptionMiddleware&quot;,  # At the end]AUTHENTICATION_BACKENDS = [    &quot;social_edu_federation.backends.saml_fer.FERSAMLAuth&quot;,    &quot;django.contrib.auth.backends.ModelBackend&quot;,  # only if you keep Django basic auth]# Python social authSOCIAL_AUTH_JSONFIELD_ENABLED = TrueSOCIAL_AUTH_SAML_FER_SECURITY_CONFIG = {    &quot;authnRequestsSigned&quot;: True,    &quot;signMetadata&quot;: True,    &quot;wantAssertionsSigned&quot;: True,    &quot;rejectDeprecatedAlgorithm&quot;: True,}# Specific social_edu_federationSOCIAL_AUTH_SAML_FER_FEDERATION_SAML_METADATA_STORE = &quot;social_edu_federation.django.metadata_store.CachedMetadataStore&quot;# SOCIAL_AUTH_SAML_FER_SP_ENTITY_ID should be a URL that includes a domain name you ownSOCIAL_AUTH_SAML_FER_SP_ENTITY_ID = &quot;https://you-site.example/saml/metadata/&quot;# SOCIAL_AUTH_SAML_FER_SP_PUBLIC_CERT X.509 certificate for the key pair that# your app will useSOCIAL_AUTH_SAML_FER_SP_PUBLIC_CERT = &quot;MII...&quot;# SOCIAL_AUTH_SAML_FER_SP_PRIVATE_KEY The private key to be used by your appSOCIAL_AUTH_SAML_FER_SP_PRIVATE_KEY = &quot;MII...&quot;# Next certificate management, keep empty when next certificate is still not knownSOCIAL_AUTH_SAML_FER_SP_NEXT_PUBLIC_CERT = NoneSOCIAL_AUTH_SAML_FER_SP_EXTRA = (    {        &quot;x509certNew&quot;: SOCIAL_AUTH_SAML_FER_SP_NEXT_PUBLIC_CERT,    }    if SOCIAL_AUTH_SAML_FER_SP_NEXT_PUBLIC_CERT    else {})SOCIAL_AUTH_SAML_FER_ORG_INFO = {  # specify values for English at a minimum    &quot;en-US&quot;: {        &quot;name&quot;: &quot;Organization name&quot;,        &quot;displayname&quot;: &quot;Organization display name&quot;,        &quot;url&quot;: &quot;https://you-site.example&quot;,    }}# SOCIAL_AUTH_SAML_FER_TECHNICAL_CONTACT technical contact responsible for your appSOCIAL_AUTH_SAML_FER_TECHNICAL_CONTACT = {    &quot;givenName&quot;: &quot;Dev team&quot;,    &quot;emailAddress&quot;: &quot;dev@example.com&quot;,}# SOCIAL_AUTH_SAML_FER_SUPPORT_CONTACT support contact for your appSOCIAL_AUTH_SAML_FER_SUPPORT_CONTACT = {    &quot;givenName&quot;: &quot;Dev team&quot;,    &quot;emailAddress&quot;: &quot;dev@example.com&quot;,}# SOCIAL_AUTH_SAML_FER_ENABLED_IDPS is not required since the# SAML FER backend is overridden to allow dynamic IdPs.# see social_edu_federation.backends.saml_fer.FERSAMLAuth.get_idp(idp_name)# Custom parameter to define the FER Federation MetadataSOCIAL_AUTH_SAML_FER_FEDERATION_SAML_METADATA_URL = (    &quot;https://metadata.federation.renater.fr/renater/main/main-idps-renater-metadata.xml&quot;)# Use (or not) the default pipeline with the first/last name cleanup stepfrom social_edu_federation.pipeline import DEFAULT_EDU_FED_AUTH_PIPELINESOCIAL_AUTH_SAML_FER_PIPELINE = DEFAULT_EDU_FED_AUTH_PIPELINE```#### Using the default viewsTo make your Service Provider metadata publicly available, you will need to addthe following URL:```python# some_module/urls.pyfrom django.urls import pathfrom social_edu_federation.django.views import EduFedMetadataViewurlpatterns = [    # ...    path(        &quot;saml/metadata/&quot;,        EduFedMetadataView.as_view(backend_name=&quot;saml_fer&quot;),        name=&quot;saml_fer_metadata&quot;,    ),]```You may also want to have a look at the provided `EduFedIdpChoiceView` which servesthe list of identity providers in the federation. It includes a cookie mechanism for theuser to easily find the last used identity providers.An easy way to use it:```python# some_module/views.pyfrom social_edu_federation.django.views import EduFedIdpChoiceViewclass CustomizedEduFederationIdpChoiceView(EduFedIdpChoiceView):    &quot;&quot;&quot;Display the list of all available Identity providers using our own template.&quot;&quot;&quot;    template_extends = &quot;my_site/base.html&quot;# some_module/urls.pyfrom django.urls import pathfrom . import viewsurlpatterns = [    # ...    path(        &quot;saml/renater_fer_idp_choice/&quot;,        views.CustomizedEduFederationIdpChoiceView.as_view(backend_name=&quot;saml_fer&quot;),        name=&quot;saml_fer_idp_choice&quot;,    ),]```#### Testing views`social-edu-federation` comes along with testing views to ease the development process.Those testing views are to be used when you want to test the whole authentication loop onyour local computer.How to plug the testing views in your project is not detailed here, but you cantry them (or see how they are plugged) by running the `social-edu-federation` tests suite.Fetch the project:```shellgit clone git@github.com:openfun/social-edu-federation.git```Create a virtual environment and install requirements:```shellcd social-edu-federationpip install .[dev,django]```Run the standalone Django project:```shellmake run_django```Open it in your browser.##### DockerIn case you want to plug the testing views in your own project which is run in a Docker containeryou will probably need to define the port used in the generated metadata. By default,it will use the Django application port (let's say 8000) but if your mapping to the containeruses another port you have to define `SOCIAL_AUTH_SAML_FER_IDP_FAKER_DOCKER_PORT` settingto provide the proper port.E.g.: - Without override: metadata will be for `http://testserver:8000/saml/idp/sso/` - With `SOCIAL_AUTH_SAML_FER_IDP_FAKER_DOCKER_PORT=11000`,   metadata will be for `http://testserver:11000/saml/idp/sso/`.## ContributingThis project is intended to be community-driven, so please, do not hesitate to get in touch if youhave any question related to our implementation or design decisions.We try to raise our code quality standards and expect contributors to follow the recommandationsfrom our [handbook](https://openfun.gitbooks.io/handbook/content).## VersioningThis project follows [Semantic Versioning 2.0.0](http://semver.org/spec/v2.0.0.html).## LicenseThis work is released under the MIT License (see [LICENSE](./LICENSE)).MIT LicenseCopyright (c) 2022 France Université NumériquePermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>