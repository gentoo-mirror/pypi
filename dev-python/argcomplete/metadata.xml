<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>argcomplete - Bash/zsh tab completion for argparse==================================================*Tab complete all the things!*Argcomplete provides easy, extensible command line tab completion of arguments for your Python application.It makes two assumptions:* You're using bash or zsh as your shell* You're using `argparse &lt;http://docs.python.org/3/library/argparse.html&gt;`_ to manage your command line arguments/optionsArgcomplete is particularly useful if your program has lots of options or subparsers, and if your program candynamically suggest completions for your argument/option values (for example, if the user is browsing resources overthe network).Installation------------::    pip install argcomplete    activate-global-python-argcompleteOn Linux, you will need to run the second command with ``sudo``. See `Activating global completion`_ below for details.Refresh your shell environment (start a new shell).Synopsis--------Add the ``PYTHON_ARGCOMPLETE_OK`` marker and a call to ``argcomplete.autocomplete()`` to your Python application asfollows:.. code-block:: python    #!/usr/bin/env python    # PYTHON_ARGCOMPLETE_OK    import argcomplete, argparse    parser = argparse.ArgumentParser()    ...    argcomplete.autocomplete(parser)    args = parser.parse_args()    ...Register your Python application with your shell's completion framework by running ``register-python-argcomplete``::    eval &quot;$(register-python-argcomplete my-python-app)&quot;Quotes are significant; the registration will fail without them. See `Global completion`_ below for a way to enableargcomplete generally without registering each application individually.argcomplete.autocomplete(*parser*)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This method is the entry point to the module. It must be called **after** ArgumentParser construction is complete, but**before** the ``ArgumentParser.parse_args()`` method is called. The method looks for an environment variable that thecompletion hook shellcode sets, and if it's there, collects completions, prints them to the output stream (fd 8 bydefault), and exits. Otherwise, it returns to the caller immediately... admonition:: Side effects Argcomplete gets completions by running your program. It intercepts the execution flow at the moment ``argcomplete.autocomplete()`` is called. After sending completions, it exits using ``exit_method`` (``os._exit`` by default). This means if your program has any side effects that happen before ``argcomplete`` is called, those side effects will happen every time the user presses ``&lt;TAB&gt;`` (although anything your program prints to stdout or stderr will be suppressed). For this reason it's best to construct the argument parser and call ``argcomplete.autocomplete()`` as early as possible in your execution flow... admonition:: Performance If the program takes a long time to get to the point where ``argcomplete.autocomplete()`` is called, the tab completion process will feel sluggish, and the user may lose confidence in it. So it's also important to minimize the startup time of the program up to that point (for example, by deferring initialization or importing of large modules until after parsing options).Specifying completers---------------------You can specify custom completion functions for your options and arguments. Two styles are supported: callable andreadline-style. Callable completers are simpler. They are called with the following keyword arguments:* ``prefix``: The prefix text of the last word before the cursor on the command line.  For dynamic completers, this can be used to reduce the work required to generate possible completions.* ``action``: The ``argparse.Action`` instance that this completer was called for.* ``parser``: The ``argparse.ArgumentParser`` instance that the action was taken by.* ``parsed_args``: The result of argument parsing so far (the ``argparse.Namespace`` args object normally returned by  ``ArgumentParser.parse_args()``).Completers can return their completions as an iterable of strings or a mapping (dict) of strings to theirdescriptions (zsh will display the descriptions as context help alongside completions). An example completer for namesof environment variables might look like this:.. code-block:: python    def EnvironCompleter(**kwargs):        return os.environTo specify a completer for an argument or option, set the ``completer`` attribute of its associated action. An easyway to do this at definition time is:.. code-block:: python    from argcomplete.completers import EnvironCompleter    parser = argparse.ArgumentParser()    parser.add_argument(&quot;--env-var1&quot;).completer = EnvironCompleter    parser.add_argument(&quot;--env-var2&quot;).completer = EnvironCompleter    argcomplete.autocomplete(parser)If you specify the ``choices`` keyword for an argparse option or argument (and don't specify a completer), it will beused for completions.A completer that is initialized with a set of all possible choices of values for its action might look like this:.. code-block:: python    class ChoicesCompleter(object):        def __init__(self, choices):            self.choices = choices        def __call__(self, **kwargs):            return self.choicesThe following two ways to specify a static set of choices are equivalent for completion purposes:.. code-block:: python    from argcomplete.completers import ChoicesCompleter    parser.add_argument(&quot;--protocol&quot;, choices=('http', 'https', 'ssh', 'rsync', 'wss'))    parser.add_argument(&quot;--proto&quot;).completer=ChoicesCompleter(('http', 'https', 'ssh', 'rsync', 'wss'))Note that if you use the ``choices=&lt;completions&gt;`` option, argparse will showall these choices in the ``--help`` output by default. To prevent this, set``metavar`` (like ``parser.add_argument(&quot;--protocol&quot;, metavar=&quot;PROTOCOL&quot;,choices=('http', 'https', 'ssh', 'rsync', 'wss'))``).The following `script &lt;https://raw.github.com/kislyuk/argcomplete/master/docs/examples/describe_github_user.py&gt;`_ uses``parsed_args`` and `Requests &lt;http://python-requests.org/&gt;`_ to query GitHub for publicly known members of anorganization and complete their names, then prints the member description:.. code-block:: python    #!/usr/bin/env python    # PYTHON_ARGCOMPLETE_OK    import argcomplete, argparse, requests, pprint    def github_org_members(prefix, parsed_args, **kwargs):        resource = &quot;https://api.github.com/orgs/{org}/members&quot;.format(org=parsed_args.organization)        return (member['login'] for member in requests.get(resource).json() if member['login'].startswith(prefix))    parser = argparse.ArgumentParser()    parser.add_argument(&quot;--organization&quot;, help=&quot;GitHub organization&quot;)    parser.add_argument(&quot;--member&quot;, help=&quot;GitHub member&quot;).completer = github_org_members    argcomplete.autocomplete(parser)    args = parser.parse_args()    pprint.pprint(requests.get(&quot;https://api.github.com/users/{m}&quot;.format(m=args.member)).json())`Try it &lt;https://raw.github.com/kislyuk/argcomplete/master/docs/examples/describe_github_user.py&gt;`_ like this::    ./describe_github_user.py --organization heroku --member &lt;TAB&gt;If you have a useful completer to add to the `completer library&lt;https://github.com/kislyuk/argcomplete/blob/master/argcomplete/completers.py&gt;`_, send a pull request!Readline-style completers~~~~~~~~~~~~~~~~~~~~~~~~~The readline_ module defines a completer protocol in rlcompleter_. Readline-style completers are also supported byargcomplete, so you can use the same completer object both in an interactive readline-powered shell and on the commandline. For example, you can use the readline-style completer provided by IPython_ to get introspective completions likeyou would get in the IPython shell:.. _readline: http://docs.python.org/3/library/readline.html.. _rlcompleter: http://docs.python.org/3/library/rlcompleter.html#completer-objects.. _IPython: http://ipython.org/.. code-block:: python    import IPython    parser.add_argument(&quot;--python-name&quot;).completer = IPython.core.completer.Completer()``argcomplete.CompletionFinder.rl_complete`` can also be used to plug in an argparse parser as a readline completer.Printing warnings in completers~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Normal stdout/stderr output is suspended when argcomplete runs. Sometimes, though, when the user presses ``&lt;TAB&gt;``, it'sappropriate to print information about why completions generation failed. To do this, use ``warn``:.. code-block:: python    from argcomplete import warn    def AwesomeWebServiceCompleter(prefix, **kwargs):        if login_failed:            warn(&quot;Please log in to Awesome Web Service to use autocompletion&quot;)        return completionsUsing a custom completion validator~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~By default, argcomplete validates your completions by checking if they start with the prefix given to the completer. Youcan override this validation check by supplying the ``validator`` keyword to ``argcomplete.autocomplete()``:.. code-block:: python    def my_validator(completion_candidate, current_input):        &quot;&quot;&quot;Complete non-prefix substring matches.&quot;&quot;&quot;        return current_input in completion_candidate    argcomplete.autocomplete(parser, validator=my_validator)Global completion-----------------In global completion mode, you don't have to register each argcomplete-capable executable separately. Instead, the shellwill look for the string **PYTHON_ARGCOMPLETE_OK** in the first 1024 bytes of any executable that it's runningcompletion for, and if it's found, follow the rest of the argcomplete protocol as described above.Additionally, completion is activated for scripts run as ``python &lt;script&gt;`` and ``python -m &lt;module&gt;``.This also works for alternate Python versions (e.g. ``python3`` and ``pypy``), as long as that version of Python hasargcomplete installed... admonition:: Bash version compatibility When using bash, global completion requires bash support for ``complete -D``, which was introduced in bash 4.2. Since Mac OS ships with an outdated version of Bash (3.2), you can either use zsh or install a newer version of bash using `Homebrew &lt;http://brew.sh/&gt;`_ (``brew install bash`` - you will also need to add ``/usr/local/bin/bash`` to ``/etc/shells``, and run ``chsh`` to change your shell). You can check the version of the running copy of bash with ``echo $BASH_VERSION``... note:: If you use setuptools/distribute ``scripts`` or ``entry_points`` directives to package your module, argcomplete will follow the wrapper scripts to their destination and look for ``PYTHON_ARGCOMPLETE_OK`` in the destination code.If you choose not to use global completion, or ship a completion module that depends on argcomplete, you must registeryour script explicitly using ``eval &quot;$(register-python-argcomplete my-python-app)&quot;``. Standard completion moduleregistration roules apply: namely, the script name is passed directly to ``complete``, meaning it is only tab completedwhen invoked exactly as it was registered. In the above example, ``my-python-app`` must be on the path, and the usermust be attempting to complete it by that name. The above line alone would **not** allow you to complete``./my-python-app``, or ``/path/to/my-python-app``.Activating global completion~~~~~~~~~~~~~~~~~~~~~~~~~~~~The script ``activate-global-python-argcomplete`` will try to install the global completion script``bash_completion.d/python-argcomplete`` (`see on GitHub`_) into an appropriate location on your system for both bashand zsh (``/etc/bash_completion.d`` and ``/usr/local/share/zsh/site-functions``). On Linux, you will need to run thescript with sudo: ``sudo activate-global-python-argcomplete``, or run the script with ``--help`` to see other options... _`see on GitHub`: https://github.com/kislyuk/argcomplete/blob/master/argcomplete/bash_completion.d/python-argcompleteZsh Support-----------Argcomplete supports zsh. On top of plain completions like in bash, zsh allows you to see argparse help strings ascompletion descriptions. All shellcode included with argcomplete is compatible with both bash and zsh, so the samecompleter commands ``activate-global-python-argcomplete`` and ``eval &quot;$(register-python-argcomplete my-python-app)&quot;``work for zsh as well.Python Support--------------Argcomplete requires Python 3.7+.Support for other shells------------------------Argcomplete maintainers provide support only for the bash and zsh shells on Linux and MacOS. For resources related toother shells and platforms, including fish, tcsh, xonsh, powershell, and Windows, please see the`contrib &lt;https://github.com/kislyuk/argcomplete/tree/develop/contrib&gt;`_ directory.Common Problems---------------If global completion is not completing your script, bash may have registered a default completion function::    $ complete | grep my-python-app    complete -F _minimal my-python-appYou can fix this by restarting your shell, or by running ``complete -r my-python-app``.Debugging---------Set the ``_ARC_DEBUG`` variable in your shell to enable verbose debug output every time argcomplete runs. This willdisrupt the command line composition state of your terminal, but make it possible to see the internal state of thecompleter if it encounters problems.Acknowledgments---------------Inspired and informed by the optcomplete_ module by Martin Blais... _optcomplete: http://pypi.python.org/pypi/optcompleteLinks-----* `Project home page (GitHub) &lt;https://github.com/kislyuk/argcomplete&gt;`_* `Documentation &lt;https://kislyuk.github.io/argcomplete/&gt;`_* `Package distribution (PyPI) &lt;https://pypi.python.org/pypi/argcomplete&gt;`_* `Change log &lt;https://github.com/kislyuk/argcomplete/blob/master/Changes.rst&gt;`_Bugs~~~~Please report bugs, issues, feature requests, etc. on `GitHub &lt;https://github.com/kislyuk/argcomplete/issues&gt;`_.License-------Copyright 2012-2023, Andrey Kislyuk and argcomplete contributors. Licensed under the terms of the`Apache License, Version 2.0 &lt;http://www.apache.org/licenses/LICENSE-2.0&gt;`_. Distribution of the LICENSE and NOTICEfiles with source copies of this package and derivative works is **REQUIRED** as specified by the Apache License... image:: https://github.com/kislyuk/argcomplete/workflows/Python%20package/badge.svg        :target: https://github.com/kislyuk/argcomplete/actions.. image:: https://codecov.io/github/kislyuk/argcomplete/coverage.svg?branch=master        :target: https://codecov.io/github/kislyuk/argcomplete?branch=master.. image:: https://img.shields.io/pypi/v/argcomplete.svg        :target: https://pypi.python.org/pypi/argcomplete.. image:: https://img.shields.io/pypi/l/argcomplete.svg        :target: https://pypi.python.org/pypi/argcomplete</longdescription>
</pkgmetadata>