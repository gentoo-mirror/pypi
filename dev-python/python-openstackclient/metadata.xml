<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========================Team and repository tags========================.. image:: https://governance.openstack.org/tc/badges/python-openstackclient.svg    :target: https://governance.openstack.org/tc/reference/tags/index.html.. Change things from this point on===============OpenStackClient===============.. image:: https://img.shields.io/pypi/v/python-openstackclient.svg    :target: https://pypi.org/project/python-openstackclient/    :alt: Latest VersionOpenStackClient (aka OSC) is a command-line client for OpenStack that bringsthe command set for Compute, Identity, Image, Network, Object Store and BlockStorage APIs together in a single shell with a uniform command structure.The primary goal is to provide a unified shell command structure and a commonlanguage to describe operations in OpenStack.* `PyPi`_ - package installation* `Online Documentation`_* `Storyboard project`_ - bugs and feature requests* `Blueprints`_ - feature specifications (historical only)* `Source`_* `Developer`_ - getting started as a developer* `Contributing`_ - contributing code* `Testing`_ - testing code* IRC: #openstack-sdks on OFTC (irc.oftc.net)* License: Apache 2.0.. _PyPi: https://pypi.org/project/python-openstackclient.. _Online Documentation: https://docs.openstack.org/python-openstackclient/latest/.. _Blueprints: https://blueprints.launchpad.net/python-openstackclient.. _`Storyboard project`: https://storyboard.openstack.org/#!/project/openstack/python-openstackclient.. _Source: https://opendev.org/openstack/python-openstackclient.. _Developer: https://docs.openstack.org/project-team-guide/project-setup/python.html.. _Contributing: https://docs.openstack.org/infra/manual/developers.html.. _Testing: https://docs.openstack.org/python-openstackclient/latest/contributor/developing.html#testing.. _Release Notes: https://docs.openstack.org/releasenotes/python-openstackclientGetting Started===============OpenStack Client can be installed from PyPI using pip::    pip install python-openstackclientThere are a few variants on getting help.  A list of global options and supportedcommands is shown with ``--help``::   openstack --helpThere is also a ``help`` command that can be used to get help text for a specificcommand::    openstack help    openstack help server createIf you want to make changes to the OpenStackClient for testing and contribution,make any changes and then run::    python setup.py developor::    pip install -e .Configuration=============The CLI is configured via environment variables and command-lineoptions as listed in  https://docs.openstack.org/python-openstackclient/latest/cli/authentication.html.Authentication using username/password is most commonly used:- For a local user, your configuration will look like the one below::    export OS_AUTH_URL=&lt;url-to-openstack-identity&gt;    export OS_IDENTITY_API_VERSION=3    export OS_PROJECT_NAME=&lt;project-name&gt;    export OS_PROJECT_DOMAIN_NAME=&lt;project-domain-name&gt;    export OS_USERNAME=&lt;username&gt;    export OS_USER_DOMAIN_NAME=&lt;user-domain-name&gt;    export OS_PASSWORD=&lt;password&gt;  # (optional)  The corresponding command-line options look very similar::    --os-auth-url &lt;url&gt;    --os-identity-api-version 3    --os-project-name &lt;project-name&gt;    --os-project-domain-name &lt;project-domain-name&gt;    --os-username &lt;username&gt;    --os-user-domain-name &lt;user-domain-name&gt;    [--os-password &lt;password&gt;]- For a federated user, your configuration will look the so::    export OS_PROJECT_NAME=&lt;project-name&gt;    export OS_PROJECT_DOMAIN_NAME=&lt;project-domain-name&gt;    export OS_AUTH_URL=&lt;url-to-openstack-identity&gt;    export OS_IDENTITY_API_VERSION=3    export OS_AUTH_PLUGIN=openid    export OS_AUTH_TYPE=v3oidcpassword    export OS_USERNAME=&lt;username-in-idp&gt;    export OS_PASSWORD=&lt;password-in-idp&gt;    export OS_IDENTITY_PROVIDER=&lt;the-desired-idp-in-keystone&gt;    export OS_CLIENT_ID=&lt;the-client-id-configured-in-the-idp&gt;    export OS_CLIENT_SECRET=&lt;the-client-secred-configured-in-the-idp&gt;    export OS_OPENID_SCOPE=&lt;the-scopes-of-desired-attributes-to-claim-from-idp&gt;    export OS_PROTOCOL=&lt;the-protocol-used-in-the-apache2-oidc-proxy&gt;    export OS_ACCESS_TOKEN_TYPE=&lt;the-access-token-type-used-by-your-idp&gt;    export OS_DISCOVERY_ENDPOINT=&lt;the-well-known-endpoint-of-the-idp&gt;  The corresponding command-line options look very similar::    --os-project-name &lt;project-name&gt;    --os-project-domain-name &lt;project-domain-name&gt;    --os-auth-url &lt;url-to-openstack-identity&gt;    --os-identity-api-version 3    --os-auth-plugin openid    --os-auth-type v3oidcpassword    --os-username &lt;username-in-idp&gt;    --os-password &lt;password-in-idp&gt;    --os-identity-provider &lt;the-desired-idp-in-keystone&gt;    --os-client-id &lt;the-client-id-configured-in-the-idp&gt;    --os-client-secret &lt;the-client-secred-configured-in-the-idp&gt;    --os-openid-scope &lt;the-scopes-of-desired-attributes-to-claim-from-idp&gt;    --os-protocol &lt;the-protocol-used-in-the-apache2-oidc-proxy&gt;    --os-access-token-type &lt;the-access-token-type-used-by-your-idp&gt;    --os-discovery-endpoint &lt;the-well-known-endpoint-of-the-idp&gt;If a password is not provided above (in plaintext), you will be interactivelyprompted to provide one securely.</longdescription>
</pkgmetadata>