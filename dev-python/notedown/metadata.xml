<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*Python 2/3 and IPython 4 / Jupyter compatible!*Convert IPython Notebooks to markdown (and back)------------------------------------------------`notedown &lt;http://github.com/aaren/notedown&gt;`__ is a simple tool tocreate `IPython notebooks &lt;http://www.ipython.org/notebook&gt;`__ frommarkdown (and r-markdown).``notedown`` separates your markdown into code and not code. Code blocks(fenced or indented) go into input cells, everything else goes intomarkdown cells.Usage:::    notedown input.md &gt; output.ipynbInstallation:::    pip install notedownor the latest on github:::    pip install https://github.com/aaren/notedown/tarball/masterConversion to markdown~~~~~~~~~~~~~~~~~~~~~~Convert a notebook into markdown, stripping all outputs:::    notedown input.ipynb --to markdown --strip &gt; output.mdConvert a notebook into markdown, with output JSON intact:::    notedown input.ipynb --to markdown &gt; output_with_outputs.mdThe outputs are placed as JSON in a code-block immediately after thecorresponding input code-block. ``notedown`` understands this conventionas well, so it is possible to convert this markdown-with-json back intoa notebook.This means it is possible to edit markdown, convert to notebook, playaround a bit and convert back to markdown.NB: currently, notebook and cell metadata is not preserved in theconversion.Strip the output cells from markdown:::    notedown with_output_cells.md --to markdown --strip &gt; no_output_cells.mdRunning an IPython Notebook~~~~~~~~~~~~~~~~~~~~~~~~~~~::    notedown notebook.md --run &gt; executed_notebook.ipynbEditing in the browser *(new!)*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can configure IPython / Jupyter to seamlessly use markdown as itsstorage format. Add the following to your config file:::    c.NotebookApp.contents_manager_class = 'notedown.NotedownContentsManager'Now you can edit your markdown files in the browser, execute code,create plots - all stored in markdown!For Jupyter, your config file is ``jupyter_notebook_config.py`` in``~/.jupyter``. For IPython your config is``ipython_notebook_config.py`` in your ipython profile (probably``~/.ipython/profile_default``):R-markdown~~~~~~~~~~You can use ``notedown`` to convert r-markdown as well. We just need totell ``notedown`` to use `knitr &lt;yihui.name/knitr&gt;`__ to convert ther-markdown. This requires that you have R installed with`knitr &lt;yihui.name/knitr&gt;`__.Convert r-markdown into markdown:::    notedown input.Rmd --to markdown --knit &gt; output.mdConvert r-markdown into an IPython notebook:::    notedown input.Rmd --knit &gt; output.ipynb-  ``--rmagic`` will add ``%load_ext rpy2.ipython`` at the start of the   notebook, allowing you to execute code cells using the rmagic   extension (requires `rpy2 &lt;http://rpy.sourceforge.net/&gt;`__). notedown   does the appropriate ``%R`` cell magic automatically.Magic~~~~~Fenced code blocks annotated with a language other than python are readinto cells using IPython's ``%%`` `cellmagic &lt;http://nbviewer.ipython.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb&gt;`__.You can disable this with ``--nomagic``.-  ``--pre`` lets you add arbitrary code to the start of the notebook.   e.g.   ``notedown file.md --pre '%matplotlib inline' 'import numpy as np'``How do I put a literal code block in my markdown?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~By using the ``--match`` argument. ``notedown`` defaults to converting*all* code-blocks into code-cells. This behaviour can be changed bygiving a different argument to ``--match``:-  ``--match=all``: convert all code blocks (the default)-  ``--match=fenced``: only convert fenced code blocks-  ``--match=language``: only convert fenced code blocks with 'language'   as the syntax specifier (or any member of the block attributes)-  ``--match=strict``: only convert code blocks with Pandoc style   attributes containing 'python' and 'input' as classes. i.e. code   blocks must look like   ::       ```{.python .input}       code       ```This isn't very interactive!~~~~~~~~~~~~~~~~~~~~~~~~~~~~Try editing the markdown in the IPython Notebook using the``NotedownContentsManager`` (see above).You can get an interactive ipython session in vim by using`vim-ipython &lt;http://www.github.com/ivanov/vim-ipython&gt;`__, which allowsyou to connect to a running ipython kernel. You can send code from vimto ipython and get code completion from the running kernel. Try it!Where's my syntax highlighting?!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Try using either`vim-markdown &lt;https://github.com/tpope/vim-markdown&gt;`__ or`vim-pandoc &lt;https://github.com/vim-pandoc/vim-pandoc&gt;`__. Both areclever enough to highlight code in markdown.Rendering outputs in markdown~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This is experimental!Convert a notebook into markdown, rendering cell outputs as nativemarkdown elements:::    notedown input.ipynb --renderThis means that e.g. png outputs become ``![](data-uri)`` images andthat text is placed in the document.Of course, you can use this in conjuntion with runipy to producemarkdown-with-code-and-figures from markdown-with-code:::    notedown input.md --run --render &gt; output.mdNot a notebook in sight!The ``--render`` flag forces the output format to markdown.TODO~~~~-  [x] Python 3 support-  [x] unicode support-  [x] IPython 3 support-  [x] IPython 4 (Jupyter) support-  [ ] Allow kernel specification</longdescription>
</pkgmetadata>