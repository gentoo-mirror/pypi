<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image::  https://badge.fury.io/py/flask-praetorian.svg   :target: https://badge.fury.io/py/flask-praetorian   :alt:    Latest Published Version.. image::  https://travis-ci.org/dusktreader/flask-praetorian.svg?branch=master   :target: https://travis-ci.org/dusktreader/flask-praetorian   :alt:    Build Status.. image::  https://readthedocs.org/projects/flask-praetorian/badge/?version=latest   :target: http://flask-praetorian.readthedocs.io/en/latest/?badge=latest   :alt:    Documentation Build Status****************** flask-praetorian******************---------------------------------------------------Strong, Simple, and Precise security for Flask APIs---------------------------------------------------API security should be strong, simple, and precise like a Roman Legionary.This package aims to provide that. Using `JWT &lt;https://jwt.io/&gt;`_ tokens asimplemented by `PyJWT &lt;https://pyjwt.readthedocs.io/en/latest/&gt;`_,*flask_praetorian* uses a very simple interface to make sure that the usersaccessing your API's endpoints are provisioned with the correct roles foraccess.This project was heavily influenced by`Flask-Security &lt;https://pythonhosted.org/Flask-Security/&gt;`_, but intendsto supply only essential functionality. Instead of trying to anticipate theneeds of all users, *flask-praetorian* will provide a simple and secure mechanismto provide security for APIs specifically.This extension offers a batteries-included approach to security for your API.For essential security concerns for Flask-based APIs,`flask-praetorian &lt;https://github.com/dusktreader/flask-praetorian&gt;`_ shouldsupply everything you need.The *flask-praetorian* package can be used to:* Hash passwords for storing in your database* Verify plaintext passwords against the hashed, stored versions* Generate authorization tokens upon verification of passwords* Check requests to secured endpoints for authorized tokens* Supply expiration of tokens and mechanisms for refreshing them* Ensure that the users associated with tokens have necessary roles for access* Parse user information from request headers for use in client route handlers* Support inclusion of custom user claims in tokens* Register new users using email verificationAll of this is provided in a very simple to configure and initialize flaskextension. Though simple, the security provided by *flask-praetorian* is strongdue to the usage of the proven security technology of JWTand python's `PassLib &lt;http://pythonhosted.org/passlib/&gt;`_ package.Super-quick Start----------------- - requirements: `python` versions 3.6+ - install through pip: `$ pip install flask-praetorian` - minimal usage example: `example/basic.py &lt;https://github.com/dusktreader/flask-praetorian/tree/master/example/basic.py&gt;`_Documentation-------------The complete documentation can be found at the`flask-praetorian home page &lt;http://flask-praetorian.readthedocs.io&gt;`_</longdescription>
</pkgmetadata>