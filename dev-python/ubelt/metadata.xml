<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|GithubActions| |ReadTheDocs| |Pypi| |Downloads| |Codecov| |CircleCI| |Appveyor|.. .. |CodeQuality| |TwitterFollow|.. The large version wont work because github strips rst image rescaling. https://i.imgur.com/AcWVroL.png.. image:: https://i.imgur.com/PoYIsWE.png   :height: 100px   :align: left..   .. raw:: html..       &lt;img src=&quot;https://i.imgur.com/AcWVroL.png&quot; height=&quot;100px&quot;&gt;Ubelt is a utility library for Python with a stdlib like feel.Elevator Pitch:===============Is the Python standard library good?  Yes.  Could it's conciseness be improved?  Yes.  Ubelt aims to provide a quicker way to express things you can do in the standard library.  Progress?  `ub.ProgIter &lt;https://ubelt.readthedocs.io/en/latest/ubelt.progiter.html#ubelt.progiter.ProgIter&gt;`_.  Hashing?  `ub.hash_data &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_data&gt;`_ / `ub.hash_file &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_file&gt;`_.  Caching?  `ub.Cacher &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.Cacher&gt;`_ / `ub.CacheStamp &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.CacheStamp&gt;`_.  Shell commands?  `ub.cmd &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_cmd.html#ubelt.util_cmd.cmd&gt;`_. There are similar functions for downloading data, futures-based parallel (or serial) job execution, pretty reprs, path management, iteration, and one of my favorites: set operation enriched dictionaries: `ub.udict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.UDict&gt;`_.There are 120ish functions and classes to help make your code shorter and easier to express concisely.  The library is fast to install and import, all dependencies are optional.  As of 2023 it is 6 years old, regularly maintained, and mature.  It is well tested and has moderate usage.To learn more, the function usefulness chart is a good place to start.  This shows how often I use particular functions, and while some of the less used ones are candidates for removal, some of them still worth checking out. For a slightly slower start, read the introduction:Introduction:=============Ubelt is a lightweight library of robust, tested, documented, and simple functionsthat extend the Python standard library. It has a flat API that all behavessimilarly on Windows, Mac, and Linux (up to some small unavoidabledifferences).  Almost every function in ``ubelt`` was written with a doctest.This provides helpful documentation and example usage as well as helpingachieve 100% test coverage (with minor exceptions on Windows).* Goal: provide simple functions that accomplish common tasks not yet addressed by the python standard library.* Constraints: Must be low-impact pure python; it should be easy to install and use.* Method: All functions are written with docstrings and doctests to ensure that a baseline level of documentation and testing always exists (even if functions are copy/pasted into other libraries)* Motto: Good utilities lift all codes.Read the docs here: http://ubelt.readthedocs.io/en/latest/These are some of the tasks that ubelt's API enables:  - extended pathlib with expand, ensuredir, endswith, augment, delete (ub.Path)  - get paths to cross platform data/cache/config directories  (ub.Path.appdir, ...)  - perform set operations on dictionaries (SetDict)  - a dictionary with extended helper methods like subdict, take, peek_value, invert, sorted_keys, sorted_vals (UDict)  - hash common data structures like list, dict, int, str, etc. (hash_data)  - hash files (hash_file)  - cache a block of code (Cacher, CacheStamp)  - time a block of code (Timer)  - show loop progress with less overhead than tqdm (ProgIter)  - download a file with optional caching and hash verification (download, grabdata)  - run shell commands (cmd)  - find a file or directory in candidate locations (find_path, find_exe)  - string-repr for nested data structures (urepr)  - color text with ANSI tags (color_text)  - horizontally concatenate multiline strings (hzcat)  - create cross platform symlinks (symlink)  - import a module using the path to that module (import_module_from_path)  - check if a particular flag or value is on the command line (argflag, argval)  - memoize functions (memoize, memoize_method, memoize_property)  - build ordered sets (oset)  - argmax/min/sort on lists and dictionaries (argmin, argsort,)  - get a histogram of items or find duplicates in a list (dict_hist, find_duplicates)  - group a sequence of items by some criterion (group_items)Ubelt is small. Its top-level API is defined using roughly 40 lines:.. code:: python    from ubelt.util_arg import (argflag, argval,)    from ubelt.util_cache import (CacheStamp, Cacher,)    from ubelt.util_colors import (NO_COLOR, color_text, highlight_code,)    from ubelt.util_const import (NoParam,)    from ubelt.util_cmd import (cmd,)    from ubelt.util_dict import (AutoDict, AutoOrderedDict, SetDict, UDict, ddict,                                 dict_diff, dict_hist, dict_isect, dict_subset,                                 dict_union, dzip, find_duplicates, group_items,                                 invert_dict, map_keys, map_vals, map_values,                                 named_product, odict, sdict, sorted_keys,                                 sorted_vals, sorted_values, udict, varied_values,)    from ubelt.util_deprecate import (schedule_deprecation,)    from ubelt.util_download import (download, grabdata,)    from ubelt.util_download_manager import (DownloadManager,)    from ubelt.util_func import (compatible, identity, inject_method,)    from ubelt.util_repr import (ReprExtensions, urepr,)    from ubelt.util_futures import (Executor, JobPool,)    from ubelt.util_io import (delete, touch,)    from ubelt.util_links import (symlink,)    from ubelt.util_list import (allsame, argmax, argmin, argsort, argunique,                                 boolmask, chunks, compress, flatten, iter_window,                                 iterable, peek, take, unique, unique_flags,)    from ubelt.util_hash import (hash_data, hash_file,)    from ubelt.util_import import (import_module_from_name,                                   import_module_from_path, modname_to_modpath,                                   modpath_to_modname, split_modpath,)    from ubelt.util_indexable import (IndexableWalker, indexable_allclose,)    from ubelt.util_memoize import (memoize, memoize_method, memoize_property,)    from ubelt.util_mixins import (NiceRepr,)    from ubelt.util_path import (Path, TempDir, augpath, ensuredir, expandpath,                                 shrinkuser, userhome,)    from ubelt.util_platform import (DARWIN, LINUX, POSIX, WIN32, find_exe,                                     find_path, platform_cache_dir,                                     platform_config_dir, platform_data_dir,)    from ubelt.util_str import (codeblock, hzcat, indent, paragraph,)    from ubelt.util_stream import (CaptureStdout, CaptureStream, TeeStringIO,)    from ubelt.util_time import (Timer, timeparse, timestamp,)    from ubelt.util_zip import (split_archive, zopen,)    from ubelt.orderedset import (OrderedSet, oset,)    from ubelt.progiter import (ProgIter,)Installation:=============Ubelt is distributed on pypi as a universal wheel and can be pip installed onPython 3.6+. Installations are tested on CPython and PyPy implementations. ForPython 2.7 and 3.5, the last supported version was 0.11.1.::    pip install ubeltNote that our distributions on pypi are signed with GPG. The signing public keyis ``D297D757``; this should agree with the value in `dev/public_gpg_key`.Function Usefulness===================When I had to hand pick a set of functions that I thought were the most usefulI chose these and provided some comment on why:.. code:: python    import ubelt as ub    ub.Path  # inherits from pathlib.Path with quality of life improvements    ub.UDict  # inherits from dict with keywise set operations and quality of life improvements    ub.Cacher  # configuration based on-disk cachine    ub.CacheStamp  # indirect caching with corruption detection    ub.hash_data  # hash mutable python containers, useful with Cacher to config strings    ub.cmd  # combines the best of subprocess.Popen and os.system    ub.download  # download a file with a single command. Also see grabdata for the same thing, but caching from CacheStamp.    ub.JobPool   # easy multi-threading / multi-procesing / or single-threaded processing    ub.ProgIter  # a minimal progress iterator. It's single threaded, informative, and faster than tqdm.    ub.memoize  # like ``functools.cache``, but uses ub.hash_data if the args are not hashable.    ub.urepr  # readable representations of nested data structuresBut a better way might to objectively measure the frequency of usage and builta histogram of usefulness. I generated this histogram using ``python dev/maintain/gen_api_for_docs.py``,which roughly counts the number of times I've used a ubelt function in anotherproject. Note: this measure is biased towards older functions.================================================================================================================================================ ================ Function name                                                                                                                                         Usefulness================================================================================================================================================ ================`ubelt.urepr &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_repr.html#ubelt.util_repr.urepr&gt;`__                                                          2893`ubelt.Path &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.Path&gt;`__                                                             992`ubelt.ProgIter &lt;https://ubelt.readthedocs.io/en/latest/ubelt.progiter.html#ubelt.progiter.ProgIter&gt;`__                                                       544`ubelt.paragraph &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.paragraph&gt;`__                                                     482`ubelt.take &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.take&gt;`__                                                             387`ubelt.codeblock &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.codeblock&gt;`__                                                     358`ubelt.expandpath &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.expandpath&gt;`__                                                 331`ubelt.cmd &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_cmd.html#ubelt.util_cmd.cmd&gt;`__                                                                 302`ubelt.udict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.udict&gt;`__                                                           271`ubelt.ensuredir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.ensuredir&gt;`__                                                   256`ubelt.odict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.odict&gt;`__                                                           253`ubelt.iterable &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.iterable&gt;`__                                                     252`ubelt.ddict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.ddict&gt;`__                                                           238`ubelt.NiceRepr &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_mixins.html#ubelt.util_mixins.NiceRepr&gt;`__                                                 221`ubelt.NoParam &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_const.html#ubelt.util_const.NoParam&gt;`__                                                     216`ubelt.map_vals &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.map_vals&gt;`__                                                     215`ubelt.flatten &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.flatten&gt;`__                                                       214`ubelt.dzip &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dzip&gt;`__                                                             200`ubelt.oset &lt;https://ubelt.readthedocs.io/en/latest/ubelt.orderedset.html#ubelt.orderedset.oset&gt;`__                                                           198`ubelt.peek &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.peek&gt;`__                                                             196`ubelt.argflag &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_arg.html#ubelt.util_arg.argflag&gt;`__                                                         177`ubelt.group_items &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.group_items&gt;`__                                               171`ubelt.hash_data &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_data&gt;`__                                                   165`ubelt.grabdata &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_download.html#ubelt.util_download.grabdata&gt;`__                                             131`ubelt.argval &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_arg.html#ubelt.util_arg.argval&gt;`__                                                           125`ubelt.Timer &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_time.html#ubelt.util_time.Timer&gt;`__                                                           120`ubelt.dict_isect &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_isect&gt;`__                                                 113`ubelt.dict_hist &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_hist&gt;`__                                                   111`ubelt.augpath &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.augpath&gt;`__                                                       106`ubelt.identity &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_func.html#ubelt.util_func.identity&gt;`__                                                     106`ubelt.ensure_app_cache_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.ensure_app_cache_dir&gt;`__                     105`ubelt.allsame &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.allsame&gt;`__                                                       102`ubelt.memoize &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_memoize.html#ubelt.util_memoize.memoize&gt;`__                                                  99`ubelt.color_text &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_colors.html#ubelt.util_colors.color_text&gt;`__                                              98`ubelt.dict_diff &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_diff&gt;`__                                                    95`ubelt.delete &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.delete&gt;`__                                                              89`ubelt.hzcat &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.hzcat&gt;`__                                                              88`ubelt.schedule_deprecation &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_deprecate.html#ubelt.util_deprecate.schedule_deprecation&gt;`__                    87`ubelt.named_product &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.named_product&gt;`__                                            85`ubelt.compress &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.compress&gt;`__                                                      85`ubelt.IndexableWalker &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_indexable.html#ubelt.util_indexable.IndexableWalker&gt;`__                              74`ubelt.indent &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.indent&gt;`__                                                            68`ubelt.JobPool &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_futures.html#ubelt.util_futures.JobPool&gt;`__                                                  67`ubelt.unique &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.unique&gt;`__                                                          63`ubelt.dict_union &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_union&gt;`__                                                  57`ubelt.map_keys &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.map_keys&gt;`__                                                      49`ubelt.invert_dict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.invert_dict&gt;`__                                                48`ubelt.iter_window &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.iter_window&gt;`__                                                46`ubelt.timestamp &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_time.html#ubelt.util_time.timestamp&gt;`__                                                    46`ubelt.argsort &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argsort&gt;`__                                                        44`ubelt.Cacher &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.Cacher&gt;`__                                                        43`ubelt.find_exe &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.find_exe&gt;`__                                              41`ubelt.symlink &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_links.html#ubelt.util_links.symlink&gt;`__                                                      41`ubelt.dict_subset &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_subset&gt;`__                                                41`ubelt.writeto &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.writeto&gt;`__                                                            40`ubelt.find_duplicates &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.find_duplicates&gt;`__                                        39`ubelt.chunks &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.chunks&gt;`__                                                          38`ubelt.hash_file &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_file&gt;`__                                                    37`ubelt.modname_to_modpath &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.modname_to_modpath&gt;`__                              37`ubelt.ensure_unicode &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.ensure_unicode&gt;`__                                            33`ubelt.memoize_property &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_memoize.html#ubelt.util_memoize.memoize_property&gt;`__                                33`ubelt.highlight_code &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_colors.html#ubelt.util_colors.highlight_code&gt;`__                                      33`ubelt.sorted_vals &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sorted_vals&gt;`__                                                32`ubelt.CacheStamp &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.CacheStamp&gt;`__                                                30`ubelt.WIN32 &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.WIN32&gt;`__                                                    28`ubelt.import_module_from_name &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.import_module_from_name&gt;`__                    27`ubelt.argmax &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argmax&gt;`__                                                          27`ubelt.readfrom &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.readfrom&gt;`__                                                          23`ubelt.import_module_from_path &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.import_module_from_path&gt;`__                    22`ubelt.compatible &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_func.html#ubelt.util_func.compatible&gt;`__                                                  17`ubelt.touch &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.touch&gt;`__                                                                17`ubelt.Executor &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_futures.html#ubelt.util_futures.Executor&gt;`__                                                16`ubelt.memoize_method &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_memoize.html#ubelt.util_memoize.memoize_method&gt;`__                                    16`ubelt.sorted_keys &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sorted_keys&gt;`__                                                14`ubelt.AutoDict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.AutoDict&gt;`__                                                      11`ubelt.shrinkuser &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.shrinkuser&gt;`__                                                  11`ubelt.inject_method &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_func.html#ubelt.util_func.inject_method&gt;`__                                            10`ubelt.varied_values &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.varied_values&gt;`__                                             9`ubelt.split_modpath &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.split_modpath&gt;`__                                         8`ubelt.modpath_to_modname &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.modpath_to_modname&gt;`__                               8`ubelt.get_app_cache_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.get_app_cache_dir&gt;`__                             8`ubelt.zopen &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_zip.html#ubelt.util_zip.zopen&gt;`__                                                               7`ubelt.LINUX &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.LINUX&gt;`__                                                     7`ubelt.CaptureStdout &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_stream.html#ubelt.util_stream.CaptureStdout&gt;`__                                         6`ubelt.download &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_download.html#ubelt.util_download.download&gt;`__                                               5`ubelt.timeparse &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_time.html#ubelt.util_time.timeparse&gt;`__                                                     5`ubelt.DARWIN &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.DARWIN&gt;`__                                                   5`ubelt.argmin &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argmin&gt;`__                                                           5`ubelt.find_path &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.find_path&gt;`__                                             4`ubelt.indexable_allclose &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_indexable.html#ubelt.util_indexable.indexable_allclose&gt;`__                         4`ubelt.boolmask &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.boolmask&gt;`__                                                       3`ubelt.map_values &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.map_values&gt;`__                                                   2`ubelt.AutoOrderedDict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.AutoOrderedDict&gt;`__                                         2`ubelt.argunique &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argunique&gt;`__                                                     2`ubelt.NO_COLOR &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_colors.html#ubelt.util_colors.NO_COLOR&gt;`__                                                   2`ubelt.UDict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.UDict&gt;`__                                                             1`ubelt.unique_flags &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.unique_flags&gt;`__                                               1`ubelt.userhome &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.userhome&gt;`__                                                       0`ubelt.split_archive &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_zip.html#ubelt.util_zip.split_archive&gt;`__                                               0`ubelt.sorted_values &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sorted_values&gt;`__                                             0`ubelt.sdict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sdict&gt;`__                                                             0`ubelt.platform_data_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.platform_data_dir&gt;`__                             0`ubelt.platform_config_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.platform_config_dir&gt;`__                         0`ubelt.platform_cache_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.platform_cache_dir&gt;`__                           0`ubelt.get_app_data_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.get_app_data_dir&gt;`__                               0`ubelt.get_app_config_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.get_app_config_dir&gt;`__                           0`ubelt.ensure_app_data_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.ensure_app_data_dir&gt;`__                         0`ubelt.ensure_app_config_dir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.ensure_app_config_dir&gt;`__                     0`ubelt.TempDir &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.TempDir&gt;`__                                                         0`ubelt.TeeStringIO &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_stream.html#ubelt.util_stream.TeeStringIO&gt;`__                                             0`ubelt.SetDict &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.SetDict&gt;`__                                                         0`ubelt.ReprExtensions &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_repr.html#ubelt.util_repr.ReprExtensions&gt;`__                                           0`ubelt.POSIX &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.POSIX&gt;`__                                                     0`ubelt.OrderedSet &lt;https://ubelt.readthedocs.io/en/latest/ubelt.orderedset.html#ubelt.orderedset.OrderedSet&gt;`__                                                 0`ubelt.DownloadManager &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_download_manager.html#ubelt.util_download_manager.DownloadManager&gt;`__                 0`ubelt.CaptureStream &lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_stream.html#ubelt.util_stream.CaptureStream&gt;`__                                         0================================================================================================================================================ ================Examples========The most up to date examples are the doctests.We also have a Jupyter notebook: https://github.com/Erotemic/ubelt/blob/main/docs/notebooks/Ubelt%20Demo.ipynbHere are some examples of some features inside ``ubelt``Paths-----Ubelt extends ``pathlib.Path`` by adding several new (often chainable) methods.Namely, ``augment``, ``delete``, ``expand``, ``ensuredir``, ``shrinkuser``. Italso modifies behavior of ``touch`` to be chainable. (New in 1.0.0).. code:: python        &gt;&gt;&gt; # Ubelt extends pathlib functionality        &gt;&gt;&gt; import ubelt as ub        &gt;&gt;&gt; dpath = ub.Path('~/.cache/ubelt/demo_path').expand().ensuredir()        &gt;&gt;&gt; fpath = dpath / 'text_file.txt'        &gt;&gt;&gt; aug_fpath = fpath.augment(suffix='.aux', ext='.jpg').touch()        &gt;&gt;&gt; aug_dpath = dpath.augment('demo_path2')        &gt;&gt;&gt; assert aug_fpath.read_text() == ''        &gt;&gt;&gt; fpath.write_text('text data')        &gt;&gt;&gt; assert aug_fpath.exists()        &gt;&gt;&gt; assert not aug_fpath.delete().exists()        &gt;&gt;&gt; assert dpath.exists()        &gt;&gt;&gt; assert not dpath.delete().exists()        &gt;&gt;&gt; print(f'{fpath.shrinkuser()}')        &gt;&gt;&gt; print(f'{dpath.shrinkuser()}')        &gt;&gt;&gt; print(f'{aug_fpath.shrinkuser()}')        &gt;&gt;&gt; print(f'{aug_dpath.shrinkuser()}')        ~/.cache/ubelt/demo_path/text_file.txt        ~/.cache/ubelt/demo_path        ~/.cache/ubelt/demo_path/text_file.aux.jpg        ~/.cache/ubelt/demo_pathdemo_path2Hashing-------The ``ub.hash_data`` constructs a hash for common Python nested datastructures. Extensions to allow it to hash custom types can be registered.  Bydefault it handles lists, dicts, sets, slices, uuids, and numpy arrays... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; data = [('arg1', 5), ('lr', .01), ('augmenters', ['flip', 'translate'])]    &gt;&gt;&gt; ub.hash_data(data, hasher='sha256')    0d95771ff684756d7be7895b5594b8f8484adecef03b46002f97ebeb1155fb15Support for torch tensors and pandas data frames are also included, but needs tobe explicitly enabled.  There also exists an non-public plugin architecture toextend this function to arbitrary types. While not officially supported, it isusable and will become better integrated in the future. See``ubelt/util_hash.py`` for details.Caching-------Cache intermediate results from blocks of code inside a script with minimalboilerplate or modification to the original code.For direct caching of data, use the ``Cacher`` class.  By default results willbe written to the ubelt's appdir cache, but the exact location can be specifiedvia ``dpath`` or the ``appname`` arguments.  Additionally, process dependenciescan be specified via the ``depends`` argument, which allows for implicit cacheinvalidation.  As far as I can tell, this is the most concise way (4 lines ofboilerplate) to cache a block of code with existing Python syntax (as of2022-06-03)... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; depends = ['config', {'of': 'params'}, 'that-uniquely-determine-the-process']    &gt;&gt;&gt; cacher = ub.Cacher('test_process', depends=depends, appname='myapp')    &gt;&gt;&gt; # start fresh    &gt;&gt;&gt; cacher.clear()    &gt;&gt;&gt; for _ in range(2):    &gt;&gt;&gt;     data = cacher.tryload()    &gt;&gt;&gt;     if data is None:    &gt;&gt;&gt;         myvar1 = 'result of expensive process'    &gt;&gt;&gt;         myvar2 = 'another result'    &gt;&gt;&gt;         data = myvar1, myvar2    &gt;&gt;&gt;         cacher.save(data)    &gt;&gt;&gt; myvar1, myvar2 = dataFor indirect caching, use the ``CacheStamp`` class. This simply writes a&quot;stamp&quot; file that marks that a process has completed. Additionally you canspecify criteria for when the stamp should expire. If you let ``CacheStamp``know about the expected &quot;product&quot;, it will expire the stamp if that file haschanged, which can be useful in situations where caches might becomes corruptor need invalidation... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; dpath = ub.Path.appdir('ubelt/demo/cache').delete().ensuredir()    &gt;&gt;&gt; params = {'params1': 1, 'param2': 2}    &gt;&gt;&gt; expected_fpath = dpath / 'file.txt'    &gt;&gt;&gt; stamp = ub.CacheStamp('name', dpath=dpath, depends=params,    &gt;&gt;&gt;                      hasher='sha256', product=expected_fpath,    &gt;&gt;&gt;                      expires='2101-01-01T000000Z', verbose=3)    &gt;&gt;&gt; # Start fresh    &gt;&gt;&gt; stamp.clear()    &gt;&gt;&gt;    &gt;&gt;&gt; for _ in range(2):    &gt;&gt;&gt;     if stamp.expired():    &gt;&gt;&gt;         expected_fpath.write_text('expensive process')    &gt;&gt;&gt;         stamp.renew()See `&lt;https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html&gt;`_ for moredetails about ``Cacher`` and ``CacheStamp``.Loop Progress-------------``ProgIter`` is a no-threads attached Progress meter that writes to stdout.  Itis a mostly drop-in alternative to `tqdm&lt;https://pypi.python.org/pypi/tqdm&gt;`__.*The advantage of ``ProgIter`` is that it does not use any python threading*,and therefore can be safer with code that makes heavy use of multiprocessing.Note: ``ProgIter`` is also defined in a standalone module: ``pip install progiter``).. code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; def is_prime(n):    ...     return n &gt;= 2 and not any(n % i == 0 for i in range(2, n))    &gt;&gt;&gt; for n in ub.ProgIter(range(1000), verbose=2):    &gt;&gt;&gt;     # do some work    &gt;&gt;&gt;     is_prime(n)        0/1000... rate=0.00 Hz, eta=?, total=0:00:00, wall=14:05 EST        1/1000... rate=82241.25 Hz, eta=0:00:00, total=0:00:00, wall=14:05 EST      257/1000... rate=177204.69 Hz, eta=0:00:00, total=0:00:00, wall=14:05 EST      642/1000... rate=94099.22 Hz, eta=0:00:00, total=0:00:00, wall=14:05 EST     1000/1000... rate=71886.74 Hz, eta=0:00:00, total=0:00:00, wall=14:05 ESTCommand Line Interaction------------------------The builtin Python ``subprocess.Popen`` module is great, but it can be abit clunky at times. The ``os.system`` command is easy to use, but itdoesn't have much flexibility. The ``ub.cmd`` function aims to fix this.It is as simple to run as ``os.system``, but it returns a dictionarycontaining the return code, standard out, standard error, and the``Popen`` object used under the hood.This utility is designed to provide as consistent as possible behavior acrossdifferent platforms.  We aim to support Windows, Linux, and OSX... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; info = ub.cmd('gcc --version')    &gt;&gt;&gt; print(ub.urepr(info))    {        'command': 'gcc --version',        'err': '',        'out': 'gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n',        'proc': &lt;subprocess.Popen object at 0x7ff98b310390&gt;,        'ret': 0,    }Also note the use of ``ub.urepr`` (previously ``ub.repr2``) to nicely format the outputdictionary.Additionally, if you specify ``verbose=True``, ``ub.cmd`` willsimultaneously capture the standard output and display it in real time (i.e. itwill &quot;`tee &lt;https://en.wikipedia.org/wiki/Tee_(command)&gt;`__&quot; the output)... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; info = ub.cmd('gcc --version', verbose=True)    gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609    Copyright (C) 2015 Free Software Foundation, Inc.    This is free software; see the source for copying conditions.  There is NO    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.A common use case for ``ub.cmd`` is parsing version numbers of programs.. code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; cmake_version = ub.cmd('cmake --version')['out'].splitlines()[0].split()[-1]    &gt;&gt;&gt; print('cmake_version = {!r}'.format(cmake_version))    cmake_version = 3.11.0-rc2This allows you to easily run a command line executable as part of apython process, see what it is doing, and then do something based on itsoutput, just as you would if you were interacting with the command lineitself.The idea is that ``ub.cmd`` removes the need to think about if you need to passa list of args, or a string. Both will work.New in ``1.0.0``, a third variant with different consequences for executingshell commands. Using the ``system=True`` kwarg will directly use ``os.system``instead of ``Popen`` entirely. In this mode it is not possible to ``tee`` theoutput because the program is executing directly in the foreground. This isuseful for doing things like spawning a vim session and returning if the usermanages to quit vim.Downloading Files-----------------The function ``ub.download`` provides a simple interface to download aURL and save its data to a file... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; url = 'http://i.imgur.com/rqwaDag.png'    &gt;&gt;&gt; fpath = ub.download(url, verbose=0)    &gt;&gt;&gt; print(ub.shrinkuser(fpath))    ~/.cache/ubelt/rqwaDag.pngThe function ``ub.grabdata`` works similarly to ``ub.download``, butwhereas ``ub.download`` will always re-download the file,``ub.grabdata`` will check if the file exists and only re-download it ifit needs to... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; url = 'http://i.imgur.com/rqwaDag.png'    &gt;&gt;&gt; fpath = ub.grabdata(url, verbose=0, hash_prefix='944389a39')    &gt;&gt;&gt; print(ub.shrinkuser(fpath))    ~/.cache/ubelt/rqwaDag.pngNew in version 0.4.0: both functions now accepts the ``hash_prefix`` keywordargument, which if specified will check that the hash of the file matches theprovided value. The ``hasher`` keyword argument can be used to change whichhashing algorithm is used (it defaults to ``&quot;sha512&quot;``).Dictionary Set Operations-------------------------Dictionary operations that are analogous to set operations.See each funtions documentation for more details on the behavior of the values.Typically the last seen value is given priority.I hope Python decides to add these to the stdlib someday.* ``ubelt.dict_union`` corresponds to ``set.union``.* ``ubelt.dict_isect`` corresponds to ``set.intersection``.* ``ubelt.dict_diff`` corresponds to ``set.difference``... code:: python   &gt;&gt;&gt; d1 = {'a': 1, 'b': 2, 'c': 3}   &gt;&gt;&gt; d2 = {'c': 10, 'e': 20, 'f': 30}   &gt;&gt;&gt; d3 = {'e': 10, 'f': 20, 'g': 30, 'a': 40}   &gt;&gt;&gt; ub.dict_union(d1, d2, d3)   {'a': 40, 'b': 2, 'c': 10, 'e': 10, 'f': 20, 'g': 30}   &gt;&gt;&gt; ub.dict_isect(d1, d2)   {'c': 3}   &gt;&gt;&gt; ub.dict_diff(d1, d2)   {'a': 1, 'b': 2}New in Version 1.2.0: Ubelt now contains a dictionary subclass with setoperations that can be invoked as ``ubelt.SetDict`` or ``ub.sdict``.Note that n-ary operations are supported... code:: python   &gt;&gt;&gt; d1 = ub.sdict({'a': 1, 'b': 2, 'c': 3})   &gt;&gt;&gt; d2 = {'c': 10, 'e': 20, 'f': 30}   &gt;&gt;&gt; d3 = {'e': 10, 'f': 20, 'g': 30, 'a': 40}   &gt;&gt;&gt; d1 | d2 | d3   {'a': 40, 'b': 2, 'c': 10, 'e': 10, 'f': 20, 'g': 30}   &gt;&gt;&gt; d1 &amp; d2   {'c': 3}   &gt;&gt;&gt; d1 - d2   {'a': 1, 'b': 2}   &gt;&gt;&gt; ub.sdict.intersection({'a': 1, 'b': 2, 'c': 3}, ['b', 'c'], ['c', 'e'])   {'c': 3}Note this functionality and more is available in ``ubelt.UDict`` or ``ub.udict``.Grouping Items--------------Given a list of items and corresponding ids, create a dictionary mapping eachid to a list of its corresponding items.  In other words, group a sequence ofitems of type ``VT`` and corresponding keys of type ``KT`` given by a functionor corresponding list, group them into a ``Dict[KT, List[VT]`` such that eachkey maps to a list of the values associated with the key.  This is similar to`pandas.DataFrame.groupby &lt;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html&gt;`_.Group ids can be specified by a second list containing the id foreach corresponding item... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; # Group via a corresonding list    &gt;&gt;&gt; item_list    = ['ham',     'jam',   'spam',     'eggs',    'cheese', 'bannana']    &gt;&gt;&gt; groupid_list = ['protein', 'fruit', 'protein',  'protein', 'dairy',  'fruit']    &gt;&gt;&gt; dict(ub.group_items(item_list, groupid_list))    {'dairy': ['cheese'], 'fruit': ['jam', 'bannana'], 'protein': ['ham', 'spam', 'eggs']}They can also be given by a function that is executed on each item in the list.. code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; # Group via a function    &gt;&gt;&gt; item_list    = ['ham',     'jam',   'spam',     'eggs',    'cheese', 'bannana']    &gt;&gt;&gt; def grouper(item):    ...     return item.count('a')    &gt;&gt;&gt; dict(ub.group_items(item_list, grouper))    {1: ['ham', 'jam', 'spam'], 0: ['eggs', 'cheese'], 3: ['bannana']}Dictionary Histogram--------------------Find the frequency of items in a sequence.Given a list or sequence of items, this returns a dictionary mapping eachunique value in the sequence to the number of times it appeared.This is similar to `pandas.DataFrame.value_counts &lt;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.value_counts.html&gt;`_... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; item_list = [1, 2, 39, 900, 1232, 900, 1232, 2, 2, 2, 900]    &gt;&gt;&gt; ub.dict_hist(item_list)    {1232: 2, 1: 1, 2: 4, 900: 3, 39: 1}Each item can also be given a weight.. code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; item_list = [1, 2, 39, 900, 1232, 900, 1232, 2, 2, 2, 900]    &gt;&gt;&gt; weights   = [1, 1,  0,   0,    0,   0,  0.5, 0, 1, 1, 0.3]    &gt;&gt;&gt; ub.dict_hist(item_list, weights=weights)    {1: 1, 2: 3, 39: 0, 900: 0.3, 1232: 0.5}Dictionary Manipulation-----------------------Map functions across dictionarys to transform the keys or values in adictionary.  The ``ubelt.map_keys`` function applies a function to each key ina dictionary and returns this transformed copy of the dictionary. Key conflictbehavior currently raises and error, but may be configurable in the future. The``ubelt.map_vals`` function is the same except the function is applied to eachvalue instead.  I these functions are useful enough to be ported to Pythonitself... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; dict_ = {'a': [1, 2, 3], 'bb': [], 'ccc': [2,]}    &gt;&gt;&gt; dict_keymod = ub.map_keys(len, dict_)    &gt;&gt;&gt; dict_valmod = ub.map_vals(len, dict_)    &gt;&gt;&gt; print(dict_keymod)    &gt;&gt;&gt; print(dict_valmod)    {1: [1, 2, 3], 2: [], 3: [2]}    {'a': 3, 'bb': 0, 'ccc': 1}Take a subset of a dictionary. Note this is similar to ``ub.dict_isect``,except this will raise an error if the given keys are not in the dictionary... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; dict_ = {'K': 3, 'dcvs_clip_max': 0.2, 'p': 0.1}    &gt;&gt;&gt; subdict_ = ub.dict_subset(dict_, ['K', 'dcvs_clip_max'])    &gt;&gt;&gt; print(subdict_)    {'K': 3, 'dcvs_clip_max': 0.2}The ``ubelt.take`` function works on dictionarys (and lists). It is similar to``ubelt.dict_subset``, except that it returns just a list of the values, anddiscards information about the keys. It is also possible to specify a defaultvalue... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; dict_ = {1: 'a', 2: 'b', 3: 'c'}    &gt;&gt;&gt; print(list(ub.take(dict_, [1, 3, 4, 5], default=None)))    ['a', 'c', None, None]Invert the mapping defined by a dictionary. By default ``invert_dict``assumes that all dictionary values are distinct (i.e. the mapping isone-to-one / injective)... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; mapping = {0: 'a', 1: 'b', 2: 'c', 3: 'd'}    &gt;&gt;&gt; ub.invert_dict(mapping)    {'a': 0, 'b': 1, 'c': 2, 'd': 3}However, by specifying ``unique_vals=False`` the inverted dictionarybuilds a set of keys that were associated with each value... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; mapping = {'a': 0, 'A': 0, 'b': 1, 'c': 2, 'C': 2, 'd': 3}    &gt;&gt;&gt; ub.invert_dict(mapping, unique_vals=False)    {0: {'A', 'a'}, 1: {'b'}, 2: {'C', 'c'}, 3: {'d'}}New in Version 1.2.0: Ubelt now contains a dictionary subclass ``ubelt.UDict``with these quality of life operations (and also inherits from``ubelt.SetDict``). The alias ``ubelt.udict`` can be used for quicker access... code:: python   &gt;&gt;&gt; import ubelt as ub   &gt;&gt;&gt; d1 = ub.udict({'a': 1, 'b': 2, 'c': 3})   &gt;&gt;&gt; d1 &amp; {'a', 'c'}   {'a': 1, 'c': 3}   &gt;&gt;&gt; d1.map_keys(ord)   {97: 1, 98: 2, 99: 3}   &gt;&gt;&gt; d1.invert()   {1: 'a', 2: 'b', 3: 'c'}   &gt;&gt;&gt; d1.subdict(['b', 'c', 'e'], default=None)   {'b': 2, 'c': 3, 'e': None}   &gt;&gt;&gt; d1.sorted_keys()   OrderedDict([('a', 1), ('b', 2), ('c', 3)])   &gt;&gt;&gt; d1.peek_key()   'a'   &gt;&gt;&gt; d1.peek_value()   1Next time you have a default configuration dictionary like and you allow thedeveloper to pass keyword arguments to modify these behaviors, consider usingdictionary intersection (&amp;) to separate out only the relevant parts anddictionary union (|) to update those relevant parts.  You can also usedictionary differences (-) if you need to check for unused arguments... code:: python    import ubelt as ub    def run_multiple_algos(**kwargs):        algo1_defaults = {'opt1': 10, 'opt2': 11}        algo2_defaults = {'src': './here/', 'dst': './there'}        kwargs = ub.udict(kwargs)        algo1_specified = kwargs &amp; algo1_defaults        algo2_specified = kwargs &amp; algo2_defaults        algo1_config = algo1_defaults | algo1_specified        algo2_config = algo2_defaults | algo2_specified        unused_kwargs = kwargs - (algo1_defaults | algo2_defaults)        print('algo1_specified = {}'.format(ub.urepr(algo1_specified, nl=1)))        print('algo2_specified = {}'.format(ub.urepr(algo2_specified, nl=1)))        print(f'algo1_config={algo1_config}')        print(f'algo2_config={algo2_config}')        print(f'The following kwargs were unused {unused_kwargs}')    print(chr(10))    print('-- Run with some specified --')    run_multiple_algos(src='box', opt2='fox')    print(chr(10))    print('-- Run with extra unspecified --')    run_multiple_algos(a=1, b=2)Produces:.. code::    -- Run with some specified --    algo1_specified = {        'opt2': 'fox',    }    algo2_specified = {        'src': 'box',    }    algo1_config={'opt1': 10, 'opt2': 'fox'}    algo2_config={'src': 'box', 'dst': './there'}    The following kwargs were unused {}    -- Run with extra unspecified --    algo1_specified = {}    algo2_specified = {}    algo1_config={'opt1': 10, 'opt2': 11}    algo2_config={'src': './here/', 'dst': './there'}    The following kwargs were unused {'a': 1, 'b': 2}Find Duplicates---------------Find all duplicate items in a list. More specifically,``ub.find_duplicates`` searches for items that appear more than ``k``times, and returns a mapping from each duplicate item to the positionsit appeared in... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; items = [0, 0, 1, 2, 3, 3, 0, 12, 2, 9]    &gt;&gt;&gt; ub.find_duplicates(items, k=2)    {0: [0, 1, 6], 2: [3, 8], 3: [4, 5]}Cross-Platform Config and Cache Directories-------------------------------------------If you have an application which writes configuration or cache files,the standard place to dump those files differs depending if you are onWindows, Linux, or Mac. Ubelt offers a unified functions for determiningwhat these paths are.New in version 1.0.0: the ``ub.Path.appdir`` classmethod provides a way toachieve the above with a chainable object oriented interface.The ``ub.Path.appdir(..., type='cache')``,``ub.Path.appdir(..., type='config')``, and``ub.Path.appdir(..., type='data')``functions find the correct platform-specific location for these files andcalling ``ensuredir`` ensures that the directories exist.The config root directory is ``~/AppData/Roaming`` on Windows,``~/.config`` on Linux and ``~/Library/Application Support`` on Mac. Thecache root directory is ``~/AppData/Local`` on Windows, ``~/.config`` onLinux and ``~/Library/Caches`` on Mac.Example usage on Linux might look like this:.. code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; print(ub.Path.appdir('my_app').ensuredir().shrinkuser())  # default is cache    ~/.cache/my_app    &gt;&gt;&gt; print(ub.Path.appdir('my_app', type='config').ensuredir().shrinkuser())    ~/.config/my_appSymlinks--------The ``ub.symlink`` function will create a symlink similar to``os.symlink``. The main differences are that 1) it will not error ifthe symlink exists and already points to the correct location. 2) itworks\* on Windows (\*hard links and junctions are used if real symlinksare not available).. code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; dpath = ub.Path('ubelt', 'demo_symlink')    &gt;&gt;&gt; real_path = dpath / 'real_file.txt'    &gt;&gt;&gt; link_path = dpath / 'link_file.txt'    &gt;&gt;&gt; real_path.write_text('foo')    &gt;&gt;&gt; ub.symlink(real_path, link_path)AutoDict - Autovivification---------------------------While the ``collections.defaultdict`` is nice, it is sometimes moreconvenient to have an infinitely nested dictionary of dictionaries... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; auto = ub.AutoDict()    &gt;&gt;&gt; print('auto = {!r}'.format(auto))    auto = {}    &gt;&gt;&gt; auto[0][10][100] = None    &gt;&gt;&gt; print('auto = {!r}'.format(auto))    auto = {0: {10: {100: None}}}    &gt;&gt;&gt; auto[0][1] = 'hello'    &gt;&gt;&gt; print('auto = {!r}'.format(auto))    auto = {0: {1: 'hello', 10: {100: None}}}String-based imports--------------------Ubelt contains functions to import modules dynamically without using thepython ``import`` statement. While ``importlib`` exists, the ``ubelt``implementation is simpler to user and does not have the disadvantage ofbreaking ``pytest``.Note ``ubelt`` simply provides an interface to this functionality, thecore implementation is in ``xdoctest`` (over as of version ``0.7.0``,the code is statically copied into an autogenerated file such that ``ubelt``does not actually depend on ``xdoctest`` during runtime)... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; try:    &gt;&gt;&gt;     # This is where I keep ubelt on my machine, so it is not expected to work elsewhere.    &gt;&gt;&gt;     module = ub.import_module_from_path(ub.expandpath('~/code/ubelt/ubelt'))    &gt;&gt;&gt;     print('module = {!r}'.format(module))    &gt;&gt;&gt; except OSError:    &gt;&gt;&gt;     pass    &gt;&gt;&gt;    &gt;&gt;&gt; module = ub.import_module_from_name('ubelt')    &gt;&gt;&gt; print('module = {!r}'.format(module))    &gt;&gt;&gt; #    &gt;&gt;&gt; try:    &gt;&gt;&gt;     module = ub.import_module_from_name('does-not-exist')    &gt;&gt;&gt;     raise AssertionError    &gt;&gt;&gt; except ModuleNotFoundError:    &gt;&gt;&gt;     pass    &gt;&gt;&gt; #    &gt;&gt;&gt; modpath = ub.Path(ub.util_import.__file__)    &gt;&gt;&gt; print(ub.modpath_to_modname(modpath))    &gt;&gt;&gt; modname = ub.util_import.__name__    &gt;&gt;&gt; assert ub.Path(ub.modname_to_modpath(modname)).resolve() == modpath.resolve()    module = &lt;module 'ubelt' from '/home/joncrall/code/ubelt/ubelt/__init__.py'&gt;    &gt;&gt;&gt; module = ub.import_module_from_name('ubelt')    &gt;&gt;&gt; print('module = {!r}'.format(module))    module = &lt;module 'ubelt' from '/home/joncrall/code/ubelt/ubelt/__init__.py'&gt;Related to this functionality are the functions``ub.modpath_to_modname`` and ``ub.modname_to_modpath``, which*statically* transform (i.e. no code in the target modules is importedor executed) between module names (e.g. ``ubelt.util_import``) andmodule paths (e.g.``~/.local/conda/envs/cenv3/lib/python3.5/site-packages/ubelt/util_import.py``)... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; modpath = ub.util_import.__file__    &gt;&gt;&gt; print(ub.modpath_to_modname(modpath))    ubelt.util_import    &gt;&gt;&gt; modname = ub.util_import.__name__    &gt;&gt;&gt; assert ub.modname_to_modpath(modname) == modpathHorizontal String Concatenation-------------------------------Sometimes its just prettier to horizontally concatenate two blocks oftext... code:: python    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; B = ub.urepr([[1, 2], [3, 4]], nl=1, cbr=True, trailsep=False)    &gt;&gt;&gt; C = ub.urepr([[5, 6], [7, 8]], nl=1, cbr=True, trailsep=False)    &gt;&gt;&gt; print(ub.hzcat(['A = ', B, ' * ', C]))    A = [[1, 2], * [[5, 6],         [3, 4]]    [7, 8]]Timing------Quickly time a single line... code:: python    &gt;&gt;&gt; import math    &gt;&gt;&gt; import ubelt as ub    &gt;&gt;&gt; timer = ub.Timer('Timer demo!', verbose=1)    &gt;&gt;&gt; with timer:    &gt;&gt;&gt;     math.factorial(100000)    tic('Timer demo!')    ...toc('Timer demo!')=0.1453sExternal tools--------------Some of the tools in ``ubelt`` also exist as standalone modules. I haven'tdecided if its best to statically copy them into ubelt or require on pypi tosatisfy the dependency. There are some tools that are not used by defaultunless you explicitly allow for them.Code that is currently statically included (vendored):-  ProgIter - https://github.com/Erotemic/progiter-  OrderedSet - https://github.com/LuminosoInsight/ordered-setCode that is completely optional, and only used in specific cases:- Numpy - ``ub.urepr`` will format a numpy array nicely by default- xxhash - this can be specified as a hasher to ``ub.hash_data``- Pygments - used by the ``util_color`` module.- dateutil - used by the ``util_time`` module.Similar Tools-------------UBelt is one of many Python utility libraries. A selection of similar librariesare listed here.Libraries that contain a broad scope of utilities:* Boltons: https://github.com/mahmoud/boltons* Toolz: https://github.com/pytoolz/toolz* CyToolz: https://github.com/pytoolz/cytoolz/* UnStdLib: https://github.com/shazow/unstdlib.pyLibraries that contain a specific scope of utilities:* More-Itertools: iteration tools: https://pypi.org/project/more-itertools/* Funcy: functional tools: https://github.com/Suor/funcy* Rich: pretty CLI displays - https://github.com/willmcgugan/rich* tempora: time related tools - https://github.com/jaraco/temporaLibraries that contain one specific data structure or utility:* Benedict: dictionary tools - https://pypi.org/project/python-benedict/* tqdm: progress bars - https://pypi.org/project/tqdm/* pooch: data downloading - https://pypi.org/project/pooch/* timerit: snippet timing for benchmarks - https://github.com/Erotemic/timeritJaraco (i.e. Jason R. Coombs) has an extensive library of utilities:* jaraco.classes - https://github.com/jaraco/jaraco.classes* jaraco.collections - https://github.com/jaraco/jaraco.collections* jaraco.context - https://github.com/jaraco/jaraco.context* jaraco.crypto - https://github.com/jaraco/jaraco.crypto* jaraco.functools - https://github.com/jaraco/jaraco.functools* jaraco.geo - https://github.com/jaraco/jaraco.geo* jaraco.imaging - https://github.com/jaraco/jaraco.imaging* jaraco.itertools - https://github.com/jaraco/jaraco.itertools* jaraco.logging - https://github.com/jaraco/jaraco.logging* jaraco.media - https://github.com/jaraco/jaraco.media* jaraco.path - https://github.com/jaraco/jaraco.path* jaraco.text - https://github.com/jaraco/jaraco.text* jaraco.util - https://github.com/jaraco/jaraco.util* jaraco.windows - https://github.com/jaraco/jaraco.windows* and many others not listed here. See: https://github.com/jaraco?tab=repositories&amp;q=jaraco.Ubelt is included in the the [bestof-python list](https://github.com/ml-tooling/best-of-python),which contains many other tools that you should check out.History:========Ubelt is a migration of the most useful parts of``utool``\ (https://github.com/Erotemic/utool) into a standalone modulewith minimal dependencies.The ``utool`` library contains a number of useful utility functions, but italso contained non-useful functions, as well as the kitchen sink. A number ofthe functions were too specific or not well documented. The ``ubelt`` is a portof the simplest and most useful parts of ``utool``.Note that there are other cool things in ``utool`` that are not in ``ubelt``.Notably, the doctest harness ultimately became `xdoctest &lt;https://github.com/Erotemic/xdoctest&gt;`__.Code introspection and dynamic analysis tools were ported to `xinspect &lt;https://github.com/Erotemic/xinspect&gt;`__.The more IPython-y tools were ported to `xdev &lt;https://github.com/Erotemic/xdev&gt;`__.Parts of it made their way into `scriptconfig &lt;https://gitlab.kitware.com/utils/scriptconfig&gt;`__.The init-file generation was moved to `mkinit &lt;https://github.com/Erotemic/mkinit&gt;`__.Some vim and system-y things can be found in `vimtk &lt;https://github.com/Erotemic/vimtk&gt;`__.Development on ubelt started 2017-01-30 and development of utool mostly stoppedon utool was stopped later that year, but received patches until about 2020.Ubelt achieved 1.0.0 and removed support for Python 2.7 and 3.5 on 2022-01-07.Notes.------PRs are welcome.Also check out my other projects which are powered by ubelt:-  xinspect https://github.com/Erotemic/xinspect-  xdev https://github.com/Erotemic/xdev-  vimtk https://github.com/Erotemic/vimtk-  graphid https://github.com/Erotemic/graphid-  ibeis https://github.com/Erotemic/ibeis-  kwarray https://github.com/Kitware/kwarray-  kwimage https://github.com/Kitware/kwimage-  kwcoco https://github.com/Kitware/kwcocoAnd my projects related to ubelt:-  ProgIter https://github.com/Erotemic/progiter-  Timerit https://github.com/Erotemic/timerit-  mkinit https://github.com/Erotemic/mkinit-  xdoctest https://github.com/Erotemic/xdoctest.. |CircleCI| image:: https://circleci.com/gh/Erotemic/ubelt.svg?style=svg    :target: https://circleci.com/gh/Erotemic/ubelt.. |Travis| image:: https://img.shields.io/travis/Erotemic/ubelt/main.svg?label=Travis%20CI   :target: https://travis-ci.org/Erotemic/ubelt?branch=main.. |Appveyor| image:: https://ci.appveyor.com/api/projects/status/github/Erotemic/ubelt?branch=main&amp;svg=True   :target: https://ci.appveyor.com/project/Erotemic/ubelt/branch/main.. |Codecov| image:: https://codecov.io/github/Erotemic/ubelt/badge.svg?branch=main&amp;service=github   :target: https://codecov.io/github/Erotemic/ubelt?branch=main.. |Pypi| image:: https://img.shields.io/pypi/v/ubelt.svg   :target: https://pypi.python.org/pypi/ubelt.. |Downloads| image:: https://img.shields.io/pypi/dm/ubelt.svg   :target: https://pypistats.org/packages/ubelt.. |ReadTheDocs| image:: https://readthedocs.org/projects/ubelt/badge/?version=latest    :target: http://ubelt.readthedocs.io/en/latest/.. |CodeQuality| image:: https://api.codacy.com/project/badge/Grade/4d815305fc014202ba7dea09c4676343    :target: https://www.codacy.com/manual/Erotemic/ubelt?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Erotemic/ubelt&amp;amp;utm_campaign=Badge_Grade.. |GithubActions| image:: https://github.com/Erotemic/ubelt/actions/workflows/tests.yml/badge.svg?branch=main    :target: https://github.com/Erotemic/ubelt/actions?query=branch%3Amain.. |TwitterFollow| image:: https://img.shields.io/twitter/follow/Erotemic.svg?style=social    :target: https://twitter.com/Erotemic</longdescription>
</pkgmetadata>