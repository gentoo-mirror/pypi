<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![GitHub issues](https://img.shields.io/github/issues/mom1/api-client-pydantic.svg)![GitHub stars](https://img.shields.io/github/stars/mom1/api-client-pydantic.svg)![GitHub Release Date](https://img.shields.io/github/release-date/mom1/api-client-pydantic.svg)![GitHub commits since latest release](https://img.shields.io/github/commits-since/mom1/api-client-pydantic/latest.svg)![GitHub last commit](https://img.shields.io/github/last-commit/mom1/api-client-pydantic.svg)[![GitHub license](https://img.shields.io/github/license/mom1/api-client-pydantic)](https://github.com/mom1/api-client-pydantic/blob/master/LICENSE)[![PyPI](https://img.shields.io/pypi/v/api-client-pydantic.svg)](https://pypi.python.org/pypi/api-client-pydantic)[![PyPI](https://img.shields.io/pypi/pyversions/api-client-pydantic.svg)]()![PyPI - Downloads](https://img.shields.io/pypi/dm/api-client-pydantic.svg?label=pip%20installs&amp;logo=python)&lt;a href=&quot;https://gitmoji.dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/gitmoji-%20üòú%20üòç-FFDD67.svg&quot; alt=&quot;Gitmoji&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; alt=&quot;black&quot;&gt;&lt;/a&gt;# Python API Client Pydantic Extension## Installation```bashpip install api-client-pydantic```## UsageThe following decorators have been provided to validate request data and converting json straight to pydantic class.```pythonfrom apiclient_pydantic import params_serializer, response_serializer, serialize, serialize_all_methods# serialize incoming kwargs@params_serializer(by_alias: bool = True, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = True)# serialize response in pydantic class@response_serializer(response: Optional[Type[BaseModel]] = None)# serialize request and response data@serialize(response: Optional[Type[BaseModel]] = None, by_alias: bool = True, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = True)# wraps all local methods of a class with a specified decorator. default 'serialize'@serialize_all_methods(decorator=serialize)```Usage:1. Define the schema for your api in pydantic classes.    ```python    from pydantic import BaseModel, Field    class Account(BaseModel):        account_number: int = Field(alias='accountNumber')        sort_code: int = Field(alias='sortCode')        date_opened: datetime = Field(alias='dateOpened')    ```2. Add the `@response_serializer` decorator to the api client method to transform the responsedirectly into your defined schema.   ```python    @response_serializer(List[Account])    def get_accounts():        ...    # or    @response_serializer()    def get_accounts() -&gt; List[Account]:        ...    ```3. Add the `@params_serializer` decorator to the api client method to translate the incoming kwargsinto the required dict for the endpoint:   ```python    @params_serializer(AccountHolder)    def create_account(data: dict):        ...    # or    @params_serializer()    def create_account(data: AccountHolder):        # data will be exactly a dict        ...    create_account(last_name='Smith', first_name='John')    # data will be a dict {&quot;last_name&quot;: &quot;Smith&quot;, &quot;first_name&quot;: &quot;John&quot;}    ```4. `@serialize` - It is a combination of the two decorators `@response_serializer` and`@params_serializer`.5. For more convenient use, you can wrap all APIClient methods with `@serialize_all_methods`.   ```python    from apiclient import APIClient    from apiclient_pydantic import serialize_all_methods    from typing import List    from .models import Account, AccountHolder    @serialize_all_methods()    class MyApiClient(APIClient):        def decorated_func(self, data: Account) -&gt; Account:            ...        def decorated_func_holder(self, data: AccountHolder) -&gt; List[Account]:            ...    ```## Related projects### apiclient-pydantic-generatorThis code generator creates a [ApiClient](https://github.com/MikeWooster/api-client) app from an openapi file.[apiclient-pydantic-generator](https://github.com/mom1/apiclient-pydantic-generator)## MentionsMany thanks to [JetBrains](https://www.jetbrains.com/?from=api-client-pydantic) for supplying me with a license to use their product in the developmentof this tool.![JetBrains Logo (Main) logo](https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg)</longdescription>
</pkgmetadata>