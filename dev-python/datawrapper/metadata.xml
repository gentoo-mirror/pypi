<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># datawrapper&lt;div align=&quot;center&quot;&gt;[![PyPI Version](https://img.shields.io/pypi/v/datawrapper.svg)](https://pypi.python.org/pypi/datawrapper)[![Monthly downloads](https://img.shields.io/pypi/dm/datawrapper)](https://img.shields.io/pypi/dm/datawrappe)[![Build status](https://github.com/chekos/datawrapper/workflows/build/badge.svg?branch=master&amp;event=push)](https://github.com/chekos/datawrapper/actions?query=workflow%3Abuild)[![Python Version](https://img.shields.io/pypi/pyversions/datawrapper.svg)](https://pypi.org/project/datawrapper/)[![Dependencies Status](https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg)](https://github.com/chekos/datawrapper/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aapp%2Fdependabot)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/chekos/datawrapper/blob/master/.pre-commit-config.yaml)[![Semantic Versions](https://img.shields.io/badge/%F0%9F%9A%80-semantic%20versions-informational.svg)](https://github.com/chekos/datawrapper/releases)[![License](https://img.shields.io/github/license/chekos/datawrapper)](https://github.com/chekos/datawrapper/blob/master/LICENSE)A light-weight python wrapper for the Datawrapper API (v3). While it is not developed by Datawrapper officially, you can use it with your API credentials from datawrapper.de&lt;/div&gt;## üöÄ Features* Retrieve your account information (including folders).* Add data to charts, tables or maps.* Create charts, tables or maps - and add data from a `pandas.DataFrame` in one call!* Update chart descriptions.* Publish charts, tables or maps.* Retrieve chart properties, update its metadata, and other information.* Display a chart (as output of notebook cell - it gets weird because interactivity ¬Ø\\_(„ÉÑ)_/¬Ø )* Retrieve a chart, table or map's iframe code to embed.* Export chart as png (still working on the svg and pdf parts).* Move charts across folders and organizations.* Delete charts.* Get a list of all your charts.## Installation```bashpip install -U datawrapper```or install with `Poetry````bashpoetry add datawrapper```### Makefile usage[`Makefile`](https://github.com/chekos/datawrapper/blob/master/Makefile) contains many functions for fast assembling and convenient work.&lt;details&gt;&lt;summary&gt;1. Download Poetry&lt;/summary&gt;&lt;p&gt;```bashmake download-poetry```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;2. Install all dependencies and pre-commit hooks&lt;/summary&gt;&lt;p&gt;```bashmake install```If you do not want to install pre-commit hooks, run the command with the NO_PRE_COMMIT flag:```bashmake install NO_PRE_COMMIT=1```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;3. Check the security of your code&lt;/summary&gt;&lt;p&gt;```bashmake check-safety```This command launches a `Poetry` and `Pip` integrity check as well as identifies security issues with `Safety` and `Bandit`. By default, the build will not crash if any of the items fail. But you can set `STRICT=1` for the entire build, or you can configure strictness for each item separately.```bashmake check-safety STRICT=1```or only for `safety`:```bashmake check-safety SAFETY_STRICT=1```multiple```bashmake check-safety PIP_STRICT=1 SAFETY_STRICT=1```&gt; List of flags for `check-safety` (can be set to `1` or `0`): `STRICT`, `POETRY_STRICT`, `PIP_STRICT`, `SAFETY_STRICT`, `BANDIT_STRICT`.&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;4. Check the codestyle&lt;/summary&gt;&lt;p&gt;The command is similar to `check-safety` but to check the code style, obviously. It uses `Black`, `Darglint`, `Isort`, and `Mypy` inside.```bashmake check-style```It may also contain the `STRICT` flag.```bashmake check-style STRICT=1```&gt; List of flags for `check-style` (can be set to `1` or `0`): `STRICT`, `BLACK_STRICT`, `DARGLINT_STRICT`, `ISORT_STRICT`, `MYPY_STRICT`.&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;5. Run all the codestyle formaters&lt;/summary&gt;&lt;p&gt;Codestyle uses `pre-commit` hooks, so ensure you've run `make install` before.```bashmake codestyle```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;6. Run tests&lt;/summary&gt;&lt;p&gt;```bashmake test```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;7. Run all the linters&lt;/summary&gt;&lt;p&gt;```bashmake lint```the same as:```bashmake test &amp;&amp; make check-safety &amp;&amp; make check-style```&gt; List of flags for `lint` (can be set to `1` or `0`): `STRICT`, `POETRY_STRICT`, `PIP_STRICT`, `SAFETY_STRICT`, `BANDIT_STRICT`, `BLACK_STRICT`, `DARGLINT_STRICT`, `ISORT_STRICT`, `MYPY_STRICT`.&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;8. Build docker&lt;/summary&gt;&lt;p&gt;```bashmake docker```which is equivalent to:```bashmake docker VERSION=latest```More information [here](https://github.com/chekos/datawrapper/tree/master/docker).&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;9. Cleanup docker&lt;/summary&gt;&lt;p&gt;```bashmake clean_docker```or to remove all build```bashmake clean```More information [here](https://github.com/chekos/datawrapper/tree/master/docker).&lt;/p&gt;&lt;/details&gt;## üìà ReleasesYou can see the list of available releases on the [GitHub Releases](https://github.com/chekos/datawrapper/releases) page.We follow [Semantic Versions](https://semver.org/) specification.We use [`Release Drafter`](https://github.com/marketplace/actions/release-drafter). As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you‚Äôre ready. With the categories option, you can categorize pull requests in release notes using labels.For Pull Request this labels are configured, by default:|               **Label**               |  **Title in Releases**  || :-----------------------------------: | :---------------------: ||       `enhancement`, `feature`        |       üöÄ Features       || `bug`, `refactoring`, `bugfix`, `fix` | üîß Fixes &amp; Refactoring  ||       `build`, `ci`, `testing`        | üì¶ Build System &amp; CI/CD ||              `breaking`               |   üí• Breaking Changes   ||            `documentation`            |    üìù Documentation     ||            `dependencies`             | ‚¨ÜÔ∏è Dependencies updates |You can update it in [`release-drafter.yml`](https://github.com/chekos/datawrapper/blob/master/.github/release-drafter.yml).GitHub creates the `bug`, `enhancement`, and `documentation` labels for you. Dependabot creates the `dependencies` label. Create the remaining labels on the Issues tab of your GitHub repository, when you need them.## üõ° License[![License](https://img.shields.io/github/license/chekos/datawrapper)](https://github.com/chekos/datawrapper/blob/master/LICENSE)This project is licensed under the terms of the `MIT` license. See [LICENSE](https://github.com/chekos/datawrapper/blob/master/LICENSE) for more details.## üìÉ Citation```@misc{datawrapper,  author = {chekos},  title = {A light-weight python wrapper for the Datawrapper API (v3). While it is not developed by Datawrapper officially, you can use it with your API credentials from datawrapper.de},  year = {2021},  publisher = {GitHub},  journal = {GitHub repository},  howpublished = {\url{https://github.com/chekos/datawrapper}}}```## CreditsThis project was generated with [`python-package-template`](https://github.com/TezRomacH/python-package-template).</longdescription>
</pkgmetadata>