<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LLM Assistant for Apache Spark## Installation```bashpip install spark-llm```## Usage### Initialization```pythonfrom spark_llm import SparkLLMAssistantassistant = SparkLLMAssistant()assistant.activate() # active partial functions for Spark DataFrame```### Data Ingestion```pythonauto_df = assistant.create_df(&quot;2022 USA national auto sales by brand&quot;)auto_df.show(n=5)```| rank | brand     | us_sales_2022 | sales_change_vs_2021 ||------|-----------|---------------|----------------------|| 1    | Toyota    | 1849751       | -9                   || 2    | Ford      | 1767439       | -2                   || 3    | Chevrolet | 1502389       | 6                    || 4    | Honda     | 881201        | -33                  || 5    | Hyundai   | 724265        | -2                   |### Plot```pythonauto_df.llm.plot()```![2022 USA national auto sales by brand](docs/_static/auto_sales.png)To plot with an instruction:```pythonauto_df.llm.plot(&quot;pie char for top 5 brands and the others' market shares&quot;)```![2022 USA national auto sales_market_share by brand](docs/_static/auto_sales_pie_char.png)### DataFrame Transformation```pythonauto_top_growth_df=auto_df.llm.transform(&quot;top brand with the highest growth&quot;)auto_top_growth_df.show()```| brand    | us_sales_2022 | sales_change_vs_2021 ||----------|---------------|----------------------|| Cadillac | 134726        | 14                   |### DataFrame Explanation```pythonauto_top_growth_df.llm.explain()```&gt; In summary, this dataframe is retrieving the brand with the highest sales change in 2022 compared to 2021. It presents the results sorted by sales change in descending order and only returns the top result.### DataFrame Attribute Verification```pythonauto_top_growth_df.llm.verify(&quot;expect sales change percentage to be between -100 to 100&quot;)```&gt; result: True### UDF Generation```python@assistant.udfdef previous_years_sales(brand: str, current_year_sale: int, sales_change_percentage: float) -&gt; int:    &quot;&quot;&quot;Calculate previous years sales from sales change percentage&quot;&quot;&quot;    ...    spark.udf.register(&quot;previous_years_sales&quot;, previous_years_sales)auto_df.createOrReplaceTempView(&quot;autoDF&quot;)spark.sql(&quot;select brand as brand, previous_years_sales(brand, us_sales, sales_change_percentage) as 2021_sales from autoDF&quot;).show()```| brand         |2021_sales||---------------|-------------|| Toyota        |   2032693|| Ford          |   1803509|| Chevrolet     |   1417348|| Honda         |   1315225|| Hyundai       |    739045|### CacheThe SparkLLMAssistant supports a simple in-memory and persistent cache system. It keeps an in-memory staging cache that can be persisted through the `commit()` method. Cache lookup is always performed on the persistent cache only.```pythonassistant.commit()```Refer to [example.ipynb](https://github.com/gengliangwang/spark-llm/blob/main/examples/example.ipynb) for more detailed usage examples.## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.## LicenseLicensed under the Apache License 2.0.</longdescription>
</pkgmetadata>