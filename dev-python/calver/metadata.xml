<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CalVerThe `calver` package is a [setuptools](https://pypi.org/p/setuptools) extensionfor automatically defining your Python package version as a calendar version.## UsageFirst, ensure `calver` is present during the project's build step by specifyingit as one of the build requirements:`pyproject.toml`:```toml[build-system]requires = [&quot;setuptools&gt;=42&quot;, &quot;calver&quot;]```To enable generating the version automatically based on the date, add thefollowing to `setup.py`:`setup.py`:```pythonfrom setuptools import setupsetup(    ...    use_calver=True,    setup_requires=['calver'],    ...)```You can test that it is working with:```$ python setup.py --version2020.6.16```## ConfigurationBy default, when setting `use_calver=True`, it uses the following to generatethe version string:```&gt;&gt;&gt; import datetime&gt;&gt;&gt; datetime.datetime.now().strftime(&quot;%Y.%m.%d&quot;)2020.6.16```You can override the format string by passing it instead of `True`:`setup.py`:```pythonfrom setuptools import setupsetup(    ...    use_calver=&quot;%Y.%m.%d.%H.%M&quot;,    setup_requires=['calver'],    ...)```You can override this entirely by passing a callable instead, which will be calledwith no arguments at build time:`setup.py`:```pythonimport datetimefrom setuptools import setupdef long_now_version():    now = datetime.datetime.now()    return now.strftime(&quot;%Y&quot;).zfill(5) + &quot;.&quot; + now.strftime(&quot;%m.%d&quot;)setup(    ...    use_calver=long_now_version,    setup_requires=['calver'],    ...)```</longdescription>
</pkgmetadata>