<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.me/cyberjunkynl/)# Python: Garmin ConnectPython 3 API wrapper for Garmin Connect to get your statistics.## AboutThis package allows you to request garmin device, activity and health data from your Garmin Connect account.See &lt;https://connect.garmin.com/&gt;## Installation```bashpip3 install garminconnect```## API Demo Program I wrote this for testing and playing with all available/known API calls.  If you run it from the python-garmin connect directory it will use the library code beneath it, so you can develop without reinstalling the package.  The code also demonstrates how to implement session saving and re-using of the cookies.  You can set environment variables with your credentials like so, this is optional:```bashexport EMAIL=&lt;your garmin email&gt;export PASSWORD=&lt;your garmin password&gt;```Install the pre-requisites for the example program (not all are needed for using the library package):```bashpip3 install cloudscraper readchar requests pwinput```Or you can just run the program and enter your credentials when asked, it will create and save a session file and use that until it's outdated/invalid.```python3 ./example.py*** Garmin Connect API Demo by cyberjunky ***1 -- Get full name2 -- Get unit system3 -- Get activity data for '2023-03-10'4 -- Get activity data for '2023-03-10' (compatible with garminconnect-ha)5 -- Get body composition data for '2023-03-10' (compatible with garminconnect-ha)6 -- Get body composition data for from '2023-03-03' to '2023-03-10' (to be compatible with garminconnect-ha)7 -- Get stats and body composition data for '2023-03-10'8 -- Get steps data for '2023-03-10'9 -- Get heart rate data for '2023-03-10'0 -- Get training readiness data for '2023-03-10'- -- Get daily step data for '2023-03-03' to '2023-03-10'/ -- Get body battery data for '2023-03-03' to '2023-03-10'! -- Get floors data for '2023-03-03'? -- Get blood pressure data for '2023-03-03' to '2023-03-10'. -- Get training status data for '2023-03-10'a -- Get resting heart rate data for 2023-03-10'b -- Get hydration data for '2023-03-10'c -- Get sleep data for '2023-03-10'd -- Get stress data for '2023-03-10'e -- Get respiration data for '2023-03-10'f -- Get SpO2 data for '2023-03-10'g -- Get max metric data (like vo2MaxValue and fitnessAge) for '2023-03-10'h -- Get personal record for useri -- Get earned badges for userj -- Get adhoc challenges data from start '0' and limit '100'k -- Get available badge challenges data from '1' and limit '100'l -- Get badge challenges data from '1' and limit '100'm -- Get non completed badge challenges data from '1' and limit '100'n -- Get activities data from start '0' and limit '100'o -- Get last activityp -- Download activities data by date from '2023-03-03' to '2023-03-10'r -- Get all kinds of activities data from '0's -- Upload activity data from file 'MY_ACTIVITY.fit't -- Get all kinds of Garmin device infou -- Get active goalsv -- Get future goalsw -- Get past goalsy -- Get all Garmin device alarmsx -- Get Heart Rate Variability data (HRV) for '2023-03-10'z -- Get progress summary from '2023-03-03' to '2023-03-10' for all metricsA -- Get gear, the defaults, activity types and statisticsZ -- Logout Garmin Connect portalq -- ExitMake your selection: ```This is some example code, and probably older than the latest code which can be found in 'example.py'.```python#!/usr/bin/env python3&quot;&quot;&quot;pip3 install cloudscraper requests readchar pwinputexport EMAIL=&lt;your garmin email&gt;export PASSWORD=&lt;your garmin password&gt;&quot;&quot;&quot;import datetimeimport jsonimport loggingimport osimport sysimport requestsimport pwinputimport readcharfrom garminconnect import (    Garmin,    GarminConnectAuthenticationError,    GarminConnectConnectionError,    GarminConnectTooManyRequestsError,)# Configure debug logging# logging.basicConfig(level=logging.DEBUG)logging.basicConfig(level=logging.INFO)logger = logging.getLogger(__name__)# Load environment variables if definedemail = os.getenv(&quot;EMAIL&quot;)password = os.getenv(&quot;PASSWORD&quot;)api = None# Example selections and settingstoday = datetime.date.today()startdate = today - datetime.timedelta(days=7) # Select past weekstart = 0limit = 100start_badge = 1  # Badge related calls calls start counting at 1activitytype = &quot;&quot;  # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, otheractivityfile = &quot;MY_ACTIVITY.fit&quot; # Supported file types are: .fit .gpx .tcxmenu_options = {    &quot;1&quot;: &quot;Get full name&quot;,    &quot;2&quot;: &quot;Get unit system&quot;,    &quot;3&quot;: f&quot;Get activity data for '{today.isoformat()}'&quot;,    &quot;4&quot;: f&quot;Get activity data for '{today.isoformat()}' (compatible with garminconnect-ha)&quot;,    &quot;5&quot;: f&quot;Get body composition data for '{today.isoformat()}' (compatible with garminconnect-ha)&quot;,    &quot;6&quot;: f&quot;Get body composition data for from '{startdate.isoformat()}' to '{today.isoformat()}' (to be compatible with garminconnect-ha)&quot;,    &quot;7&quot;: f&quot;Get stats and body composition data for '{today.isoformat()}'&quot;,    &quot;8&quot;: f&quot;Get steps data for '{today.isoformat()}'&quot;,    &quot;9&quot;: f&quot;Get heart rate data for '{today.isoformat()}'&quot;,    &quot;0&quot;: f&quot;Get training readiness data for '{today.isoformat()}'&quot;,    &quot;-&quot;: f&quot;Get daily step data for '{startdate.isoformat()}' to '{today.isoformat()}'&quot;,    &quot;/&quot;: f&quot;Get body battery data for '{startdate.isoformat()}' to '{today.isoformat()}'&quot;,    &quot;!&quot;: f&quot;Get floors data for '{startdate.isoformat()}'&quot;,    &quot;?&quot;: f&quot;Get blood pressure data for '{startdate.isoformat()}' to '{today.isoformat()}'&quot;,    &quot;.&quot;: f&quot;Get training status data for '{today.isoformat()}'&quot;,    &quot;a&quot;: f&quot;Get resting heart rate data for {today.isoformat()}'&quot;,    &quot;b&quot;: f&quot;Get hydration data for '{today.isoformat()}'&quot;,    &quot;c&quot;: f&quot;Get sleep data for '{today.isoformat()}'&quot;,    &quot;d&quot;: f&quot;Get stress data for '{today.isoformat()}'&quot;,    &quot;e&quot;: f&quot;Get respiration data for '{today.isoformat()}'&quot;,    &quot;f&quot;: f&quot;Get SpO2 data for '{today.isoformat()}'&quot;,    &quot;g&quot;: f&quot;Get max metric data (like vo2MaxValue and fitnessAge) for '{today.isoformat()}'&quot;,    &quot;h&quot;: &quot;Get personal record for user&quot;,    &quot;i&quot;: &quot;Get earned badges for user&quot;,    &quot;j&quot;: f&quot;Get adhoc challenges data from start '{start}' and limit '{limit}'&quot;,    &quot;k&quot;: f&quot;Get available badge challenges data from '{start_badge}' and limit '{limit}'&quot;,    &quot;l&quot;: f&quot;Get badge challenges data from '{start_badge}' and limit '{limit}'&quot;,    &quot;m&quot;: f&quot;Get non completed badge challenges data from '{start_badge}' and limit '{limit}'&quot;,    &quot;n&quot;: f&quot;Get activities data from start '{start}' and limit '{limit}'&quot;,    &quot;o&quot;: &quot;Get last activity&quot;,    &quot;p&quot;: f&quot;Download activities data by date from '{startdate.isoformat()}' to '{today.isoformat()}'&quot;,    &quot;r&quot;: f&quot;Get all kinds of activities data from '{start}'&quot;,    &quot;s&quot;: f&quot;Upload activity data from file '{activityfile}'&quot;,    &quot;t&quot;: &quot;Get all kinds of Garmin device info&quot;,    &quot;u&quot;: &quot;Get active goals&quot;,    &quot;v&quot;: &quot;Get future goals&quot;,    &quot;w&quot;: &quot;Get past goals&quot;,    &quot;y&quot;: &quot;Get all Garmin device alarms&quot;,    &quot;x&quot;: f&quot;Get Heart Rate Variability data (HRV) for '{today.isoformat()}'&quot;,    &quot;z&quot;: f&quot;Get progress summary from '{startdate.isoformat()}' to '{today.isoformat()}' for all metrics&quot;,    &quot;A&quot;: &quot;Get gear, the defaults, activity types and statistics&quot;,    &quot;Z&quot;: &quot;Logout Garmin Connect portal&quot;,    &quot;q&quot;: &quot;Exit&quot;,}def display_json(api_call, output):    &quot;&quot;&quot;Format API output for better readability.&quot;&quot;&quot;    dashed = &quot;-&quot;*20    header = f&quot;{dashed} {api_call} {dashed}&quot;    footer = &quot;-&quot;*len(header)    print(header)    print(json.dumps(output, indent=4))    print(footer)def display_text(output):    &quot;&quot;&quot;Format API output for better readability.&quot;&quot;&quot;    dashed = &quot;-&quot;*60    header = f&quot;{dashed}&quot;    footer = &quot;-&quot;*len(header)    print(header)    print(json.dumps(output, indent=4))    print(footer)def get_credentials():    &quot;&quot;&quot;Get user credentials.&quot;&quot;&quot;    email = input(&quot;Login e-mail: &quot;)    password = pwinput.pwinput(prompt='Password: ')    return email, passworddef init_api(email, password):    &quot;&quot;&quot;Initialize Garmin API with your credentials.&quot;&quot;&quot;    try:        ## Try to load the previous session        with open(&quot;session.json&quot;) as f:            saved_session = json.load(f)            print(                &quot;Login to Garmin Connect using session loaded from 'session.json'...\n&quot;            )            # Use the loaded session for initializing the API (without need for credentials)            api = Garmin(session_data=saved_session)            # Login using the            api.login()    except (FileNotFoundError, GarminConnectAuthenticationError):        # Login to Garmin Connect portal with credentials since session is invalid or not present.        print(            &quot;Session file not present or turned invalid, login with your Garmin Connect credentials.\n&quot;            &quot;NOTE: Credentials will not be stored, the session cookies will be stored in 'session.json' for future use.\n&quot;        )        try:            # Ask for credentials if not set as environment variables            if not email or not password:                email, password = get_credentials()            api = Garmin(email, password)            api.login()            # Save session dictionary to json file for future use            with open(&quot;session.json&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:                json.dump(api.session_data, f, ensure_ascii=False, indent=4)        except (            GarminConnectConnectionError,            GarminConnectAuthenticationError,            GarminConnectTooManyRequestsError,            requests.exceptions.HTTPError,        ) as err:            logger.error(&quot;Error occurred during Garmin Connect communication: %s&quot;, err)            return None    return apidef print_menu():    &quot;&quot;&quot;Print examples menu.&quot;&quot;&quot;    for key in menu_options.keys():        print(f&quot;{key} -- {menu_options[key]}&quot;)    print(&quot;Make your selection: &quot;, end=&quot;&quot;, flush=True)def switch(api, i):    &quot;&quot;&quot;Run selected API call.&quot;&quot;&quot;    # Exit example program    if i == &quot;q&quot;:        print(&quot;Bye!&quot;)        sys.exit()    # Skip requests if login failed    if api:        try:            print(f&quot;\n\nExecuting: {menu_options[i]}\n&quot;)            # USER BASICS            if i == &quot;1&quot;:                # Get full name from profile                display_json(&quot;api.get_full_name()&quot;, api.get_full_name())            elif i == &quot;2&quot;:                # Get unit system from profile                display_json(&quot;api.get_unit_system()&quot;, api.get_unit_system())            # USER STATISTIC SUMMARIES            elif i == &quot;3&quot;:                # Get activity data for 'YYYY-MM-DD'                display_json(f&quot;api.get_stats('{today.isoformat()}')&quot;, api.get_stats(today.isoformat()))            elif i == &quot;4&quot;:                # Get activity data (to be compatible with garminconnect-ha)                display_json(f&quot;api.get_user_summary('{today.isoformat()}')&quot;, api.get_user_summary(today.isoformat()))            elif i == &quot;5&quot;:                # Get body composition data for 'YYYY-MM-DD' (to be compatible with garminconnect-ha)                display_json(f&quot;api.get_body_composition('{today.isoformat()}')&quot;, api.get_body_composition(today.isoformat()))            elif i == &quot;6&quot;:                # Get body composition data for multiple days 'YYYY-MM-DD' (to be compatible with garminconnect-ha)                display_json(f&quot;api.get_body_composition('{startdate.isoformat()}', '{today.isoformat()}')&quot;,                    api.get_body_composition(startdate.isoformat(), today.isoformat())                )            elif i == &quot;7&quot;:                # Get stats and body composition data for 'YYYY-MM-DD'                display_json(f&quot;api.get_stats_and_body('{today.isoformat()}')&quot;, api.get_stats_and_body(today.isoformat()))            # USER STATISTICS LOGGED            elif i == &quot;8&quot;:                # Get steps data for 'YYYY-MM-DD'                display_json(f&quot;api.get_steps_data('{today.isoformat()}')&quot;, api.get_steps_data(today.isoformat()))            elif i == &quot;9&quot;:                # Get heart rate data for 'YYYY-MM-DD'                display_json(f&quot;api.get_heart_rates('{today.isoformat()}')&quot;, api.get_heart_rates(today.isoformat()))            elif i == &quot;0&quot;:                # Get training readiness data for 'YYYY-MM-DD'                display_json(f&quot;api.get_training_readiness('{today.isoformat()}')&quot;, api.get_training_readiness(today.isoformat()))            elif i == &quot;/&quot;:                # Get daily body battery data for 'YYYY-MM-DD' to 'YYYY-MM-DD'                display_json(f&quot;api.get_body_battery('{startdate.isoformat()}, {today.isoformat()}')&quot;, api.get_body_battery(startdate.isoformat(), today.isoformat()))            elif i == &quot;?&quot;:                # Get daily blood pressure data for 'YYYY-MM-DD' to 'YYYY-MM-DD'                display_json(f&quot;api.get_blood_pressure('{startdate.isoformat()}, {today.isoformat()}')&quot;, api.get_blood_pressure(startdate.isoformat(), today.isoformat()))            elif i == &quot;-&quot;:                # Get daily step data for 'YYYY-MM-DD'                display_json(f&quot;api.get_daily_steps('{startdate.isoformat()}, {today.isoformat()}')&quot;, api.get_daily_steps(startdate.isoformat(), today.isoformat()))            elif i == &quot;!&quot;:                # Get daily floors data for 'YYYY-MM-DD'                display_json(f&quot;api.get_floors('{today.isoformat()}')&quot;, api.get_floors(today.isoformat()))            elif i == &quot;.&quot;:                # Get training status data for 'YYYY-MM-DD'                display_json(f&quot;api.get_training_status('{today.isoformat()}')&quot;, api.get_training_status(today.isoformat()))            elif i == &quot;a&quot;:                # Get resting heart rate data for 'YYYY-MM-DD'                display_json(f&quot;api.get_rhr_day('{today.isoformat()}')&quot;, api.get_rhr_day(today.isoformat()))            elif i == &quot;b&quot;:                # Get hydration data 'YYYY-MM-DD'                display_json(f&quot;api.get_hydration_data('{today.isoformat()}')&quot;, api.get_hydration_data(today.isoformat()))            elif i == &quot;c&quot;:                # Get sleep data for 'YYYY-MM-DD'                display_json(f&quot;api.get_sleep_data('{today.isoformat()}')&quot;, api.get_sleep_data(today.isoformat()))            elif i == &quot;d&quot;:                # Get stress data for 'YYYY-MM-DD'                display_json(f&quot;api.get_stress_data('{today.isoformat()}')&quot;, api.get_stress_data(today.isoformat()))            elif i == &quot;e&quot;:                # Get respiration data for 'YYYY-MM-DD'                display_json(f&quot;api.get_respiration_data('{today.isoformat()}')&quot;, api.get_respiration_data(today.isoformat()))            elif i == &quot;f&quot;:                # Get SpO2 data for 'YYYY-MM-DD'                display_json(f&quot;api.get_spo2_data('{today.isoformat()}')&quot;, api.get_spo2_data(today.isoformat()))            elif i == &quot;g&quot;:                # Get max metric data (like vo2MaxValue and fitnessAge) for 'YYYY-MM-DD'                display_json(f&quot;api.get_max_metrics('{today.isoformat()}')&quot;, api.get_max_metrics(today.isoformat()))            elif i == &quot;h&quot;:                # Get personal record for user                display_json(&quot;api.get_personal_record()&quot;, api.get_personal_record())            elif i == &quot;i&quot;:                # Get earned badges for user                display_json(&quot;api.get_earned_badges()&quot;, api.get_earned_badges())            elif i == &quot;j&quot;:                # Get adhoc challenges data from start and limit                display_json(                    f&quot;api.get_adhoc_challenges({start},{limit})&quot;, api.get_adhoc_challenges(start, limit)                )  # 1=start, 100=limit            elif i == &quot;k&quot;:                # Get available badge challenges data from start and limit                display_json(                    f&quot;api.get_available_badge_challenges({start_badge}, {limit})&quot;, api.get_available_badge_challenges(start_badge, limit)                )  # 1=start, 100=limit            elif i == &quot;l&quot;:                # Get badge challenges data from start and limit                display_json(                    f&quot;api.get_badge_challenges({start_badge}, {limit})&quot;, api.get_badge_challenges(start_badge, limit)                )  # 1=start, 100=limit            elif i == &quot;m&quot;:                # Get non completed badge challenges data from start and limit                display_json(                    f&quot;api.get_non_completed_badge_challenges({start_badge}, {limit})&quot;, api.get_non_completed_badge_challenges(start_badge, limit)                )  # 1=start, 100=limit            # ACTIVITIES            elif i == &quot;n&quot;:                # Get activities data from start and limit                display_json(f&quot;api.get_activities({start}, {limit})&quot;, api.get_activities(start, limit)) # 0=start, 1=limit            elif i == &quot;o&quot;:                # Get last activity                display_json(&quot;api.get_last_activity()&quot;, api.get_last_activity())            elif i == &quot;p&quot;:                    # Get activities data from startdate 'YYYY-MM-DD' to enddate 'YYYY-MM-DD', with (optional) activitytype                # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other                activities = api.get_activities_by_date(                    startdate.isoformat(), today.isoformat(), activitytype                )                # Download activities                for activity in activities:                    activity_id = activity[&quot;activityId&quot;]                    display_text(activity)                    print(f&quot;api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.GPX)&quot;)                    gpx_data = api.download_activity(                        activity_id, dl_fmt=api.ActivityDownloadFormat.GPX                    )                    output_file = f&quot;./{str(activity_id)}.gpx&quot;                    with open(output_file, &quot;wb&quot;) as fb:                        fb.write(gpx_data)                    print(f&quot;Activity data downloaded to file {output_file}&quot;)                    print(f&quot;api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.TCX)&quot;)                    tcx_data = api.download_activity(                        activity_id, dl_fmt=api.ActivityDownloadFormat.TCX                    )                    output_file = f&quot;./{str(activity_id)}.tcx&quot;                    with open(output_file, &quot;wb&quot;) as fb:                        fb.write(tcx_data)                    print(f&quot;Activity data downloaded to file {output_file}&quot;)                    print(f&quot;api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.ORIGINAL)&quot;)                    zip_data = api.download_activity(                        activity_id, dl_fmt=api.ActivityDownloadFormat.ORIGINAL                    )                    output_file = f&quot;./{str(activity_id)}.zip&quot;                    with open(output_file, &quot;wb&quot;) as fb:                        fb.write(zip_data)                    print(f&quot;Activity data downloaded to file {output_file}&quot;)                    print(f&quot;api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.CSV)&quot;)                    csv_data = api.download_activity(                        activity_id, dl_fmt=api.ActivityDownloadFormat.CSV                    )                    output_file = f&quot;./{str(activity_id)}.csv&quot;                    with open(output_file, &quot;wb&quot;) as fb:                        fb.write(csv_data)                    print(f&quot;Activity data downloaded to file {output_file}&quot;)            elif i == &quot;r&quot;:                # Get activities data from start and limit                activities = api.get_activities(start, limit)  # 0=start, 1=limit                # Get activity splits                first_activity_id = activities[0].get(&quot;activityId&quot;)                display_json(f&quot;api.get_activity_splits({first_activity_id})&quot;, api.get_activity_splits(first_activity_id))                # Get activity split summaries for activity id                display_json(f&quot;api.get_activity_split_summaries({first_activity_id})&quot;, api.get_activity_split_summaries(first_activity_id))                # Get activity weather data for activity                display_json(f&quot;api.get_activity_weather({first_activity_id})&quot;, api.get_activity_weather(first_activity_id))                # Get activity hr timezones id                display_json(f&quot;api.get_activity_hr_in_timezones({first_activity_id})&quot;, api.get_activity_hr_in_timezones(first_activity_id))                # Get activity details for activity id                display_json(f&quot;api.get_activity_details({first_activity_id})&quot;, api.get_activity_details(first_activity_id))                # Get gear data for activity id                display_json(f&quot;api.get_activity_gear({first_activity_id})&quot;, api.get_activity_gear(first_activity_id))                # Activity self evaluation data for activity id                display_json(f&quot;api.get_activity_evaluation({first_activity_id})&quot;, api.get_activity_evaluation(first_activity_id))                # Get exercise sets in case the activity is a strength_training                if activities[0][&quot;activityType&quot;][&quot;typeKey&quot;] == &quot;strength_training&quot;:                    display_json(f&quot;api.get_activity_exercise_sets({first_activity_id})&quot;, api.get_activity_exercise_sets(first_activity_id))            elif i == &quot;s&quot;:                # Upload activity from file                display_json(f&quot;api.upload_activity({activityfile})&quot;, api.upload_activity(activityfile))            # DEVICES            elif i == &quot;t&quot;:                # Get Garmin devices                devices = api.get_devices()                display_json(&quot;api.get_devices()&quot;, devices)                # Get device last used                device_last_used = api.get_device_last_used()                display_json(&quot;api.get_device_last_used()&quot;, device_last_used)                # Get settings per device                for device in devices:                    device_id = device[&quot;deviceId&quot;]                    display_json(f&quot;api.get_device_settings({device_id})&quot;, api.get_device_settings(device_id))            # GOALS            elif i == &quot;u&quot;:                # Get active goals                goals = api.get_goals(&quot;active&quot;)                display_json(&quot;api.get_goals(\&quot;active\&quot;)&quot;, goals)            elif i == &quot;v&quot;:                # Get future goals                goals = api.get_goals(&quot;future&quot;)                display_json(&quot;api.get_goals(\&quot;future\&quot;)&quot;, goals)            elif i == &quot;w&quot;:                # Get past goals                goals = api.get_goals(&quot;past&quot;)                display_json(&quot;api.get_goals(\&quot;past\&quot;)&quot;, goals)                        # ALARMS            elif i == &quot;y&quot;:                # Get Garmin device alarms                alarms = api.get_device_alarms()                for alarm in alarms:                    alarm_id = alarm[&quot;alarmId&quot;]                    display_json(f&quot;api.get_device_alarms({alarm_id})&quot;, alarm)            elif i == &quot;x&quot;:                # Get Heart Rate Variability (hrv) data                display_json(f&quot;api.get_hrv_data({today.isoformat()})&quot;, api.get_hrv_data(today.isoformat()))            elif i == &quot;z&quot;:                # Get progress summary                for metric in [&quot;elevationGain&quot;, &quot;duration&quot;, &quot;distance&quot;, &quot;movingDuration&quot;]:                    display_json(                        f&quot;api.get_progress_summary_between_dates({today.isoformat()})&quot;, api.get_progress_summary_between_dates(                            startdate.isoformat(), today.isoformat(), metric                        ))            # Gear            elif i == &quot;A&quot;:                last_used_device = api.get_device_last_used()                display_json(f&quot;api.get_device_last_used()&quot;, last_used_device)                userProfileNumber = last_used_device[&quot;userProfileNumber&quot;]                gear = api.get_gear(userProfileNumber)                display_json(f&quot;api.get_gear()&quot;, gear)                display_json(f&quot;api.get_gear_defaults()&quot;, api.get_gear_defaults(userProfileNumber))                display_json(f&quot;api.get()&quot;, api.get_activity_types())                for gear in gear:                        uuid=gear[&quot;uuid&quot;]                        name=gear[&quot;displayName&quot;]                                                                        display_json(f&quot;api.get_gear_stats({uuid}) / {name}&quot;, api.get_gear_stats(uuid))            elif i == &quot;Z&quot;:                # Logout Garmin Connect portal                display_json(&quot;api.logout()&quot;, api.logout())                api = None        except (            GarminConnectConnectionError,            GarminConnectAuthenticationError,            GarminConnectTooManyRequestsError,            requests.exceptions.HTTPError,        ) as err:            logger.error(&quot;Error occurred: %s&quot;, err)        except KeyError:            # Invalid menu option chosen            pass    else:        print(&quot;Could not login to Garmin Connect, try again later.&quot;)# Main program loopwhile True:    # Display header and login    print(&quot;\n*** Garmin Connect API Demo by cyberjunky ***\n&quot;)    # Init API    if not api:        api = init_api(email, password)    # Display menu    print_menu()    option = readchar.readkey()    switch(api, option)```## Donations[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.me/cyberjunkynl/)</longdescription>
</pkgmetadata>