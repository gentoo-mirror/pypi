<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Zilliqa-Python-Library API**pyzil** is the Python3 implement of Zilliqa BlockChain API. https://apidocs.zilliqa.com## Features* Zilliqa low-level APIs* Account and Transaction* Zilliqa ethash* Smart ContractPython 3.6+ on macOS or Linux.## Install```shellpip install -U pyzil```or from source```shellgit clone https://github.com/deepgully/pyzilcd pyzilpip install -r requirements.txtpython setup.py install```## Usage### Import pyzil```pythonfrom pprint import pprintfrom pyzil.crypto import zilkeyfrom pyzil.zilliqa import chainfrom pyzil.zilliqa.units import Zil, Qafrom pyzil.account import Account, BatchTransfer```#### Set Active Chain, MainNet or TestNet```pythonchain.set_active_chain(chain.MainNet)  chain.set_active_chain(chain.TestNet)  chain.set_active_chain(chain.IsolatedServer)  ```  #### ZILs Transaction```python# load account from wallet addressaccount = Account(address=&quot;95B27EC211F86748DD985E1424B4058E94AA5814&quot;)balance = account.get_balance()print(&quot;{}: {}&quot;.format(account, balance))# load account from private key# private key is required to send ZILsaccount = Account(private_key=&quot;05C3CF3387F31202CD0798B7AA882327A1BD365331F90954A58C18F61BD08FFC&quot;)balance2 = account.get_balance()print(&quot;Account balance: {}&quot;.format(balance2))# to_addr must be bech32 address or 20 bytes checksum addressto_addr = &quot;zil1k5xzgp8xn87eshm3ktplqvs9nufav4pmcm52xx&quot;# send ZILstxn_info = account.transfer(to_addr=to_addr, zils=2.718)pprint(txn_info)txn_id = txn_info[&quot;TranID&quot;]# wait chain confirm, may takes 2-3 minutes on MainNettxn_details = account.wait_txn_confirm(txn_id, timeout=300)pprint(txn_details)if txn_details and txn_details[&quot;receipt&quot;][&quot;success&quot;]:    print(&quot;Txn success: {}&quot;.format(txn_id))else:    print(&quot;Txn failed: {}&quot;.format(txn_id))```  #### Send by Qa```pythonamount = Qa(1234567890)txn_info = account.transfer(to_addr=to_addr, zils=amount)pprint(txn_info)txn_id = txn_info[&quot;TranID&quot;]```  #### Wait for confirm```pythonamount = Zil(3.14)txn_details = account.transfer(to_addr, zils=amount,                                confirm=True, timeout=300, sleep=20)print(&quot;Transfer Result:&quot;)pprint(txn_details)pprint(account.last_params)pprint(account.last_txn_info)pprint(account.last_txn_details)```  #### Batch Transfer (Send zils to multi addresses)```pythonbatch = [BatchTransfer(to_addr=to_addr, zils=i) for i in range(10)]pprint(batch)txn_info_list = account.transfer_batch(batch)pprint(txn_info_list)for txn_info in txn_info_list:    if not txn_info:        print(&quot;Failed to create txn&quot;)        continue    txn_details = account.wait_txn_confirm(txn_info[&quot;TranID&quot;], timeout=300)    pprint(txn_details)    if txn_details and txn_details[&quot;receipt&quot;][&quot;success&quot;]:        print(&quot;Txn success&quot;)    else:        print(&quot;Txn failed&quot;)balance2 = account.get_balance()print(&quot;Account balance: {}&quot;.format(balance2))```#### Send ZILs from nodes to wallet```pythonnodes_keys = [    &quot;private_key1&quot;,    &quot;private_key2&quot;,    &quot;private_key3&quot;,]to_address = &quot;your wallet address&quot;to_account = Account(address=to_address)print(&quot;Account balance: {}&quot;.format(to_account.get_balance()))min_gas = Qa(chain.active_chain.api.GetMinimumGasPrice())txn_info_list = []for key in nodes_keys:    if not key:       continue    account = Account(private_key=key)    # send all zils    amount = account.get_balance_qa() - min_gas * 2    if amount &lt;= 0:        continue    txn_info = account.transfer(to_addr=to_account.bech32_address, zils=amount, gas_price=min_gas)    pprint(txn_info)    txn_info_list.append(txn_info)for txn_info in txn_info_list:       txn_details = chain.active_chain.wait_txn_confirm(txn_info[&quot;TranID&quot;], timeout=300)    pprint(txn_details)    if txn_details and txn_details[&quot;receipt&quot;][&quot;success&quot;]:        print(&quot;Txn success&quot;)    else:        print(&quot;Txn failed&quot;)print(&quot;Account balance: {}&quot;.format(to_account.get_balance()))```#### load account from mykey.txt```pythonaccount = Account.from_mykey_txt(&quot;mykey.txt&quot;)print(account)```  #### load account from keystore.json```pythonaccount = Account.from_keystore(&quot;keystore.json&quot;)print(account)# see more examples in tests/test_account.py```  #### bech32 address```python# init from bech32 addressaccount1 = Account(address=&quot;zil1r5verznnwvrzrz6uhveyrlxuhkvccwnju4aehf&quot;)print(&quot;address: {}&quot;.format(account1.address))account2 = Account(address=&quot;1d19918a737306218b5cbb3241fcdcbd998c3a72&quot;)print(&quot;bech32 address: {}&quot;.format(account2.bech32_address))assert account1 == account2# tranfer to bech32 addressaccount = Account.from_mykey_txt(&quot;mykey.txt&quot;)txn_info = account.transfer(to_addr=&quot;zil1r5verznnwvrzrz6uhveyrlxuhkvccwnju4aehf&quot;, zils=0.01)pprint(txn_info)txn_id = txn_info[&quot;TranID&quot;]```  ## Zilliqa Low-level APIs```pythonfrom pyzil.zilliqa.api import ZilliqaAPI, APIErrorapi = ZilliqaAPI(&quot;https://api.zilliqa.com/&quot;)print(api)info = api.GetBlockchainInfo()pprint(info)sharding = api.GetShardingStructure()pprint(sharding)ds_block = api.GetCurrentDSEpoch()pprint(ds_block)tx_block = api.GetCurrentMiniEpoch()pprint(tx_block)# see more examples in tests/test_lowlevel_api.py```## Zilliqa Currencies Units```pythonfrom pyzil.zilliqa.units import Zil, Qazil = Zil(1000.123)print(repr(zil))assert zil == Zil(&quot;1000.123&quot;)qa = Qa(1000123000000000)print(repr(qa))assert qa == zilassert zil == qaprint(repr(zil + qa))print(repr(zil - 2))print(repr(zil * 2))print(repr(zil / 2.0))print(repr(qa - 2))print(repr(qa * 2))print(repr(qa // 2))# see more examples in tests/test_units.py```## Zilliqa Smart Contract```pythonfrom pprint import pprintfrom pyzil.zilliqa import chainfrom pyzil.account import Accountfrom pyzil.contract import Contractchain.set_active_chain(chain.TestNet)account = Account.from_keystore(&quot;zxcvbnm,&quot;, &quot;zilliqa_keystore.json&quot;)```### Get contract from address```pythonaddress = &quot;45dca9586598c8af78b191eaa28daf2b0a0b4f43&quot;contract = Contract.load_from_address(address, load_state=True)print(contract)print(contract.status)pprint(contract.state)contract.get_state(get_code=True, get_init=True)pprint(contract.code)pprint(contract.init)pprint(contract.state)```### New contract from code```pythoncode = open(&quot;HelloWorld.scilla&quot;).read()contract = Contract.new_from_code(code)print(contract)# set account before deploycontract.account = accountinit = [    Contract.value_dict(&quot;_scilla_version&quot;, &quot;Uint32&quot;, &quot;0&quot;),    Contract.value_dict(&quot;owner&quot;, &quot;ByStr20&quot;, account.address0x)]contract.deploy(init_params=init, timeout=300, sleep=10)assert contract.status == Contract.Status.Deployed```### Get contracts```pythonowner_addr = account.addresscontracts = Contract.get_contracts(owner_addr)pprint(contracts)contracts2 = account.get_contracts()pprint(contracts2)assert contracts == contracts2```### Call contract```pythoncontract_addr = &quot;45dca9586598c8af78b191eaa28daf2b0a0b4f43&quot;contract = Contract.load_from_address(contract_addr)contract.account = accountresp = contract.call(method=&quot;getHello&quot;, params=[])pprint(resp)pprint(contract.last_receipt)resp = contract.call(method=&quot;setHello&quot;, params=[Contract.value_dict(&quot;msg&quot;, &quot;String&quot;, &quot;hi contract.&quot;)])pprint(resp)pprint(contract.last_receipt)resp = contract.call(method=&quot;getHello&quot;, params=[])pprint(resp)pprint(contract.last_receipt)# call contract and deposit Zils to contract (default is 0)resp = contract.call(method=&quot;getHello&quot;, params=[], amount=Qa(110))pprint(resp)pprint(contract.last_receipt)# see more examples in test_contract.py```</longdescription>
</pkgmetadata>