<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>object-colors=============.. image:: https://img.shields.io/badge/License-MIT-yellow.svg    :target: https://opensource.org/licenses/MIT    :alt: License.. image:: https://img.shields.io/pypi/v/object-colors    :target: https://pypi.org/project/object-colors/    :alt: PyPI.. image:: https://github.com/jshwi/object-colors/actions/workflows/ci.yml/badge.svg    :target: https://github.com/jshwi/object-colors/actions/workflows/ci.yml    :alt: CI.. image:: https://results.pre-commit.ci/badge/github/jshwi/object-colors/master.svg   :target: https://results.pre-commit.ci/latest/github/jshwi/object-colors/master   :alt: pre-commit.ci status.. image:: https://github.com/jshwi/object-colors/actions/workflows/codeql-analysis.yml/badge.svg    :target: https://github.com/jshwi/object-colors/actions/workflows/codeql-analysis.yml    :alt: CodeQL.. image:: https://codecov.io/gh/jshwi/object-colors/branch/master/graph/badge.svg    :target: https://codecov.io/gh/jshwi/object-colors    :alt: codecov.io.. image:: https://readthedocs.org/projects/object-colors/badge/?version=latest    :target: https://object-colors.readthedocs.io/en/latest/?badge=latest    :alt: readthedocs.org.. image:: https://img.shields.io/badge/python-3.8-blue.svg    :target: https://www.python.org/downloads/release/python-380    :alt: python3.8.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black    :alt: Black.. image:: https://img.shields.io/badge/linting-pylint-yellowgreen    :target: https://github.com/PyCQA/pylint    :alt: pylintObject-oriented library for stylizing terminal output-----------------------------------------------------Installation------------.. code-block:: console    $ pip install object-colors..Usage-----Import the ``Color`` object from ``object_colors``.. code-block:: python    &gt;&gt;&gt; from object_colors import ColorArgs can be provided as strings or as indices corresponding to their index in an ANSI escape sequence.. code-block:: python    &gt;&gt;&gt; Color(effect=&quot;bold&quot;, fore=&quot;red&quot;, back=&quot;green&quot;)    Color(effect=1, fore=1, back=2, objects())The following would yield the same result.. code-block:: python    &gt;&gt;&gt; Color(effect=1, fore=1, back=2)    Color(effect=1, fore=1, back=2, objects())The above options are part of the below mapping.. code-block:: python    &gt;&gt;&gt; for i, c in enumerate(Color.colors):    ...     print(i, c)    0 black    1 red    2 green    3 yellow    4 blue    5 magenta    6 cyan    7 white.. code-block:: python    &gt;&gt;&gt; for i, e in enumerate(Color.effects):    ...     print(i, e)    0 none    1 bold    2 dim    3 italic    4 underline    5 blink    6 blinking    7 negative    8 empty    9 strikethroughTo configure the current object either ``effect``, ``fore``, or ``back`` can be providedThey must be an ``int``, ``str``, or ``None`` type.. code-block:: python    &gt;&gt;&gt; c = Color()    &gt;&gt;&gt; c.set(effect=&quot;bold&quot;, fore=&quot;red&quot;, back=&quot;red&quot;)    &gt;&gt;&gt; c    Color(effect=1, fore=1, back=1, objects())Create new objects with by providing a ``dict`` object with any keyword argumentUse ``set`` to set multiple parameters.. code-block:: python    &gt;&gt;&gt; c = Color()    &gt;&gt;&gt; c.set(bold_green=dict(effect=&quot;bold&quot;, fore=&quot;green&quot;))    &gt;&gt;&gt; c    Color(effect=None, fore=None, back=None, objects(bold_green))Return ``str`` or ``tuple`` using ``get``.. code-block:: python    &gt;&gt;&gt; c = Color()    &gt;&gt;&gt; c.set(red=dict(fore=&quot;red&quot;))    &gt;&gt;&gt; c.set(yellow=dict(fore=&quot;yellow&quot;))    &gt;&gt;&gt; f&quot;{c.red.get('*')} {c.yellow.get('Warning')}&quot;    '\x1b[31m*\x1b[0;0m \x1b[33mWarning\x1b[0;0m'.. code-block:: python    &gt;&gt;&gt; c = Color()    &gt;&gt;&gt; c.set(red=dict(fore=&quot;red&quot;))    &gt;&gt;&gt; xyz = c.red.get(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;)    &gt;&gt;&gt; xyz    ('\x1b[31mx\x1b[0;0m', '\x1b[31my\x1b[0;0m', '\x1b[31mz\x1b[0;0m')    &gt;&gt;&gt; x, y, z = xyz    &gt;&gt;&gt; f&quot;{x} {y} {z}&quot;    '\x1b[31mx\x1b[0;0m \x1b[31my\x1b[0;0m \x1b[31mz\x1b[0;0m'Print the result using ``print``.. code-block:: python    &gt;&gt;&gt; c = Color(effect=&quot;bold&quot;, fore=&quot;cyan&quot;)    &gt;&gt;&gt; # doctest strips ansi codes from print    &gt;&gt;&gt; c.print(&quot;bold cyan&quot;)  # '\x1b[1;36mbold cyan\x1b[0;0m'    bold cyanLoad all ``effect``, ``fore``, or ``back`` elements using ``populate()``.. code-block:: python    &gt;&gt;&gt; c = Color()    &gt;&gt;&gt; c.populate(&quot;fore&quot;)    &gt;&gt;&gt; c    Color(effect=None, fore=None, back=None, objects(black, red, green, yellow, blue, magenta, cyan, white)).. code-block:: python    &gt;&gt;&gt; c = Color()    &gt;&gt;&gt; c.set(red=dict(fore=&quot;red&quot;))    &gt;&gt;&gt; c.red.populate(&quot;effect&quot;)    &gt;&gt;&gt; c.red    Color(effect=None, fore=1, back=None, objects(none, bold, dim, italic, underline, blink, blinking, negative, empty, strikethrough))    &gt;&gt;&gt; # doctest strips ansi codes from print    &gt;&gt;&gt; c.red.strikethrough.print(&quot;strikethrough red&quot;)  # '\x1b[9;31mstrikethrough red\x1b[0;0m'    strikethrough red</longdescription>
</pkgmetadata>