<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NUCLEI[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)This repository is created by [CEMS BV](https://cemsbv.nl/) and helps the user to access and process API calls to the [NUCLEI](https://nuclei.cemsbv.io/#/) environment.# InstallationTo install a package in this repository run:`$ pip install cems-nuclei`Please note that to use `NucleiClient` library `cems-nuclei[client]` should be installed.## ENV VARSTo use `nuclei` add the follow ENV vars to your environment. Or provide them when asked.```* NUCLEI_TOKEN    - Your NUCLEI user token```You can obtain your `NUCLEI_TOKEN` on [NUCLEI](https://nuclei.cemsbv.io/#/). Go to `personal-access-tokens` and create a new user token.# Contribution## EnvironmentWe recommend developing in Python3.9 with a clean virtual environment (using `virtualenv` or `conda`), installing the requirements from the requirements.txt file:Example using `virtualenv` and `pip` to install the dependencies in a new environment .env on Linux:```bashpython -m venv .envsource activate .env/bin/activatepython -m pip install --upgrade pip setuptoolspip install -r requirements.txtpip install -e .```## DocumentationBuild the docs:```bashpython -m pip install --upgrade pip setuptoolspip install -r requirements.txtpip install .sphinx-build -b html docs public```Note: You'll need to set the `NUCLEI_TOKEN` environmental variable.You can get your token at: `https://cemsbv.crux-nuclei.com`## FormatWe format our code with black and isort.```bashblack --config &quot;pyproject.toml&quot; src/nuclei testsisort --settings-path &quot;pyproject.toml&quot; src/nuclei tests```## LintTo maintain code quality we use the GitHub super-linter.To run the linters locally, run the `run_super_linters.sh` bash script from the root directory.## UnitTestTest the software with the use of coverage:```bashpython -m pip install --upgrade pip setuptoolspip install -r requirements.txtpip install .coverage run -m pytest```## RequirementsRequirements are autogenerated by `pip-compile` with python 3.9```bashpip-compile --extra=test --extra=docs --extra=lint --extra=client --output-file=requirements.txt pyproject.toml```To update the requirements within the defined ranges, run:```bashpip-compile --upgrade --extra=test --extra=docs --extra=lint --extra=client --output-file=requirements.txt pyproject.toml```</longdescription>
</pkgmetadata>