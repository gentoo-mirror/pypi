<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SEPA XML Generator==================.. image:: https://travis-ci.org/raphaelm/python-sepaxml.svg?branch=master   :target: https://travis-ci.org/raphaelm/python-sepaxml.. image:: https://codecov.io/gh/raphaelm/python-sepaxml/branch/master/graph/badge.svg   :target: https://codecov.io/gh/raphaelm/python-sepaxml.. image:: http://img.shields.io/pypi/v/sepaxml.svg   :target: https://pypi.python.org/pypi/sepaxmlThis is a python implementation to generate SEPA XML files.Limitations-----------Supported standards:* SEPA PAIN.001.001.03* SEPA PAIN.001.003.03* SEPA PAIN.008.001.02* SEPA PAIN.008.002.02* SEPA PAIN.008.003.02Usage-----Direct debit&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;Example:.. code:: python    from sepaxml import SepaDD    import datetime, uuid    config = {        &quot;name&quot;: &quot;Test von Testenstein&quot;,        &quot;IBAN&quot;: &quot;NL50BANK1234567890&quot;,        &quot;BIC&quot;: &quot;BANKNL2A&quot;,        &quot;batch&quot;: True,        &quot;creditor_id&quot;: &quot;DE26ZZZ00000000000&quot;,  # supplied by your bank or financial authority        &quot;currency&quot;: &quot;EUR&quot;,  # ISO 4217        # &quot;instrument&quot;: &quot;B2B&quot;,  # - default is CORE (B2C)        &quot;address&quot;: {            # The address and all of its fields are optional but in some countries they are required            &quot;address_type&quot;: &quot;ADDR&quot;,  # valid: ADDR, PBOX, HOME, BIZZ, MLTO, DLVY            &quot;department&quot;: &quot;Head Office&quot;,            &quot;subdepartment&quot;: None,            &quot;street_name&quot;: &quot;Musterstr.&quot;,            &quot;building_number&quot;: &quot;1&quot;,            &quot;postcode&quot;: &quot;12345&quot;,            &quot;town&quot;: &quot;Berlin&quot;,            &quot;country&quot;: &quot;DE&quot;,            &quot;country_subdivision&quot;: None,            &quot;lines&quot;: [&quot;Line 1&quot;, &quot;Line 2&quot;],        },    }    sepa = SepaDD(config, schema=&quot;pain.008.001.02&quot;, clean=True)    payment = {        &quot;name&quot;: &quot;Test von Testenstein&quot;,        &quot;IBAN&quot;: &quot;NL50BANK1234567890&quot;,        &quot;BIC&quot;: &quot;BANKNL2A&quot;,        &quot;amount&quot;: 5000,  # in cents        &quot;type&quot;: &quot;RCUR&quot;,  # FRST,RCUR,OOFF,FNAL        &quot;collection_date&quot;: datetime.date.today(),        &quot;mandate_id&quot;: &quot;1234&quot;,        &quot;mandate_date&quot;: datetime.date.today(),        &quot;description&quot;: &quot;Test transaction&quot;,        # &quot;endtoend_id&quot;: str(uuid.uuid1()).replace(&quot;-&quot;, &quot;&quot;),  # autogenerated if obmitted        &quot;address&quot;: {            # The address and all of its fields are optional but in some countries they are required            &quot;address_type&quot;: &quot;ADDR&quot;,  # valid: ADDR, PBOX, HOME, BIZZ, MLTO, DLVY            &quot;department&quot;: &quot;Head Office&quot;,            &quot;subdepartment&quot;: None,            &quot;street_name&quot;: &quot;Musterstr.&quot;,            &quot;building_number&quot;: &quot;1&quot;,            &quot;postcode&quot;: &quot;12345&quot;,            &quot;town&quot;: &quot;Berlin&quot;,            &quot;country&quot;: &quot;DE&quot;,            &quot;country_subdivision&quot;: None,            &quot;lines&quot;: [&quot;Line 1&quot;, &quot;Line 2&quot;],        },    }    sepa.add_payment(payment)    print(sepa.export(validate=True))Credit transfer&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;Example:.. code:: python    from sepaxml import SepaTransfer    import datetime, uuid    config = {        &quot;name&quot;: &quot;Test von Testenstein&quot;,        &quot;IBAN&quot;: &quot;NL50BANK1234567890&quot;,        &quot;BIC&quot;: &quot;BANKNL2A&quot;,        &quot;batch&quot;: True,        # For non-SEPA transfers, set &quot;domestic&quot; to True, necessary e.g. for CH/LI        &quot;currency&quot;: &quot;EUR&quot;,  # ISO 4217        &quot;address&quot;: {            # The address and all of its fields are optional but in some countries they are required            &quot;address_type&quot;: &quot;ADDR&quot;,  # valid: ADDR, PBOX, HOME, BIZZ, MLTO, DLVY            &quot;department&quot;: &quot;Head Office&quot;,            &quot;subdepartment&quot;: None,            &quot;street_name&quot;: &quot;Musterstr.&quot;,            &quot;building_number&quot;: &quot;1&quot;,            &quot;postcode&quot;: &quot;12345&quot;,            &quot;town&quot;: &quot;Berlin&quot;,            &quot;country&quot;: &quot;DE&quot;,            &quot;country_subdivision&quot;: None,            &quot;lines&quot;: [&quot;Line 1&quot;, &quot;Line 2&quot;],        },    }    sepa = SepaTransfer(config, clean=True)    payment = {        &quot;name&quot;: &quot;Test von Testenstein&quot;,        &quot;IBAN&quot;: &quot;NL50BANK1234567890&quot;,        &quot;BIC&quot;: &quot;BANKNL2A&quot;,        &quot;amount&quot;: 5000,  # in cents        &quot;execution_date&quot;: datetime.date.today() + datetime.timedelta(days=2),        &quot;description&quot;: &quot;Test transaction&quot;,        # &quot;endtoend_id&quot;: str(uuid.uuid1()).replace(&quot;-&quot;, &quot;&quot;),  # optional        &quot;address&quot;: {            # The address and all of its fields are optional but in some countries they are required            &quot;address_type&quot;: &quot;ADDR&quot;,  # valid: ADDR, PBOX, HOME, BIZZ, MLTO, DLVY            &quot;department&quot;: &quot;Head Office&quot;,            &quot;subdepartment&quot;: None,            &quot;street_name&quot;: &quot;Musterstr.&quot;,            &quot;building_number&quot;: &quot;1&quot;,            &quot;postcode&quot;: &quot;12345&quot;,            &quot;town&quot;: &quot;Berlin&quot;,            &quot;country&quot;: &quot;DE&quot;,            &quot;country_subdivision&quot;: None,            &quot;lines&quot;: [&quot;Line 1&quot;, &quot;Line 2&quot;],        },    }    sepa.add_payment(payment)    print(sepa.export(validate=True))Development-----------To run the included tests::    pip install -r requirements_dev.txt    py.test testsTo automatically sort your Imports as required by CI::    pip install isort    isort -rc .Credits and License-------------------Maintainer: Raphael Michel &lt;mail@raphaelmichel.de&gt;This basically started as a properly packaged, python 3 tested versionof the `PySepaDD`_ implementation that was released by The Congressus under the MIT license.Thanks for your work!License: MIT.. _PySepaDD: https://github.com/congressus/PySepaDD</longdescription>
</pkgmetadata>