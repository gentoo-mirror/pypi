<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Transactional RulerLib to post user events on transactional topics## Running tests and lint`docker-compose up integration-tests``docker-compose up lint`## Installation`pip install jsm-transactional-ruler`## Example Usage```pythonfrom jsm_transactional_ruler.enums import EventTypefrom jsm_transactional_ruler.events import Eventfrom jsm_transactional_ruler.publisher import publish_eventevent = Event(    user_id=&quot;fake_id&quot;, event_type=EventType.T_EVENT_REGISTERED_USER, data={&quot;email&quot;: &quot;teste@juntossomosmais.com.br&quot;})publish_event(event_trigger=event)```The attribute `event_type` accepts only events registered in the `EventType` enum.The `publish_event` method accepts the optional `queue` and `publisher_parameters` parameters to send to django-stomp:```pythonevent = Event(    user_id=&quot;fake_id&quot;, event_type=EventType.T_EVENT_REGISTERED_USER, data={&quot;email&quot;: &quot;teste@juntossomosmais.com.br&quot;})publish_event(event_trigger=event, queue=&quot;/topic/VirtualTopic.user-update-transactions&quot;, persistent=False)```## VersioningThis lib follows the [pypi version format](https://www.python.org/dev/peps/pep-0440/) with the convention of using _major_._minor_._patch_ version.### When to bump a patch version?Bump the patch version if you are doing a quick fix, nothing that changes the library functionality.### When to bump the minor version?Bump the minor version if you are adding new functionality without breaking backwards compatibility. For example, adding support to new events.### When to bump the major version?Bump the major version if you are breaking backwards compatibility by adding new functionality or refactoring.## ContributingThis project uses a [trunk based development](https://trunkbaseddevelopment.com/) flow, so that we have only one long-lived branch (`master`).For any development, simply create a branch from it and follow the flow described [below](#how-to-upload-lib-to-pypi).## How to upload lib to PyPIIt is necessary to update the lib version using the command below:```shell$ poetry version major|minor|patch```After generating the version:* Create a new branch with the files updated by Poetry* Open PR based on the `master` branch* Merge PR into the master* Generate a new release based on the version. [Document to generate release](https://docs.github.com/en/enterprise/2.13/user/articles/creating-releases)* After generating the new release &quot;Github Actions&quot; will upload the lib to PyPI using Poetry.* Good job!</longdescription>
</pkgmetadata>