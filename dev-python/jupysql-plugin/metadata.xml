<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jupysql-plugin## Install```bashpip install jupysql-plugin```## Contributing### Development install```shconda create --name jupysql-plugin python=3.11 --channel conda-forge --yesconda activate jupysql-pluginconda install nodejs --channel conda-forge --yespip install -r requirements.txtpip install -r requirements.dev.txtjlpm install```Note: `pkgmt format` can be used to format and lint Python files before committing code. To format JavaScript and TypeScript files, use `yarn run eslint`. To lint without formatting,use `yarn run eslint:check````bash# Note: this command will take some time the first time as it has to install# and compile the frontend codepip install -e &quot;.&quot;# upon installation, both the frontend and backend extensions must be activated# automatically, you can verify it by ensuring jupysql-plugin appears here:jupyter labextension list # frontend extensionjupyter server extension list # backend extension# if they don't appear, you can activate them manually, but this means that# the setup is incorrect! see pyproject.toml, under# tool.hatch.build.targets.wheel.shared-data, and fix any issues# activate manuallyjupyter server extension enable jupysql_pluginjupyter labextension enable jupysql_pluginjupyter labextension develop . --overwrite# NOTE: the two previous commands will fail if there are missing dependencies# rebuild extension Typescript# important: we had to set skipLibCheck: true# https://discourse.jupyter.org/t/struggling-with-extensions-and-dependencies-versions/19550jlpm build```To watch for changes and reload:```bash# in one terminaljlpm watch# another terminaljupyter lab```Refresh JupyterLab to load the change in your browser.By default, the `jlpm build` command generates the source maps for this extension to make it easier to debug using the browser dev tools. To also generate source maps for the JupyterLab core extensions, you can run the following command:```bashjupyter lab build --minimize=False```### adding dependencies```bashjlpm add PACKAGE# examplejlpm add @jupyter-widgets/base```### Development uninstall```bashpip uninstall jupysql-plugin```In development mode, you will also need to remove the symlink created by `jupyter labextension develop`command. To find its location, you can run `jupyter labextension list` to figure out where the `labextensions`folder is located. Then you can remove the symlink named `jupysql-plugin` within that folder.### Testing the extensionThis extension is using [Jest](https://jestjs.io/) for JavaScript code testing.This extension uses [Playwright](https://playwright.dev/docs/intro/) for the integration tests (aka user level tests).More precisely, the JupyterLab helper [Galata](https://github.com/jupyterlab/jupyterlab/tree/master/galata) is used to handle testing the extension in JupyterLab. More information are provided within the [ui-tests](./ui-tests/README.md) README.To run the tests:```shpip install nox pyyaml# note that this will also create a venvnox --session test# to only run the python unit testspytest tests```### Releasing the extensionSee [RELEASE](RELEASE.md)### ConfigurationThe `package.json` file contains a `jupyterlab` extension. More information aboutthis section is [here](https://github.com/jupyterlab/jupyterlab/blob/main/docs/source/extension/extension_dev.rst) (you might need to switch the git branch dependin on which version JupyterLab version you're building for). The schema is [here](https://github.com/jupyterlab/jupyterlab/blob/main/builder/metadata_schema.json).### Ploomber Cloud API EndpointYou can set the `PLOOMBER_CLOUD_HOST` variable to switch the API endpoint (by default, it's set to our production API endpoint).```shexport PLOOMBER_CLOUD_HOST=https://cloudapi-dev.ploomber.io```</longdescription>
</pkgmetadata>