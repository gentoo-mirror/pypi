<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>airflow-docker==============[![CircleCI](https://circleci.com/gh/airflowdocker/airflow-docker.svg?style=svg)](https://circleci.com/gh/airflowdocker/airflow-docker)[![CodacyBadge](https://api.codacy.com/project/badge/Grade/fd30a7ce26094c2b9f2e4d80d671a3d0)](https://www.codacy.com/app/fool.of.god/airflow-docker?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=huntcsg/airflow-docker&amp;utm_campaign=Badge_Grade)[![codecov](https://codecov.io/gh/airflowdocker/airflow-docker/branch/master/graph/badge.svg)](https://codecov.io/gh/airflowdocker/airflow-docker)Description-----------An opinionated implementation of exclusively using airflowDockerOperators for all Operators.Default Operator----------------``` pythonfrom airflow_docker.operator import Operatortask = Operator(    image='some-image:latest',    ...)```Default Sensor--------------``` pythonfrom airflow_docker.operator import Sensorsensor = Sensor(    image='some-image:latest',    ...)```Task Code``` pythonfrom airflow_docker_helper import clientclient.sensor(True)```Branch Operator---------------Dag Task``` pythonfrom airflow_docker.operator import BranchOperatorbranching_task = BranchOperator(    image='some-image:latest',    ...)```Task Code``` pythonfrom airflow_docker_helper import clientclient.branch_to_tasks(['task1', 'task2'])```Short Circuit Operator----------------------Dag Task``` pythonfrom airflow_docker.operator import ShortCircuitOperatorshort_circuit = ShortCircuitOperator(    image='some-image:latest',    ...)```Task Code``` pythonfrom airflow_docker_helper import clientclient.short_circuit()  # This task will short circuit if this function gets called```Context Usage-------------Dag Task``` pythonfrom airflow_docker.operator import Operatortask = Operator(    image='some-image:latest',    provide_context=True,    ...)```Task Code``` pythonfrom airflow_docker_helper import clientcontext = client.context()```Configuration-------------The following operator defaults can be set under the `airflowdocker`namespace:- force\_pull (boolean true/false)- auto\_remove (boolean true/false)- network\_modeFor example, to set `force_pull` to False by default set the followingenvironment variable like so:``` bashexport AIRFLOW__AIRFLOWDOCKER__FORCE_PULL=false```Plugin======This package works as an airflow plugin as well. When installed andrunning airflow, dags can import like so``` pythonfrom airflow.{type, like &quot;operators&quot;, &quot;sensors&quot;}.{name specificed inside the plugin class} import *```i.e.``` pythonfrom airflow.operators.airflow_docker import Operator```Tests-----We also ship an `airflowdocker/tester` image to verify the integrity ofyour DAG definitions before committing them.One can run the tests against your own dags like so:``` bashdocker run -it -v &quot;${pwd}/dags:/airflow/dags&quot; airflowdocker/tester```or else see the[airflow-docker-compose](https://github.com/airflowdocker/airflow-docker-compose)project which ships with a `test` subcommand for precisely this purpose.</longdescription>
</pkgmetadata>