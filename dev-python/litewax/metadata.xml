<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/litewax.svg)](https://badge.fury.io/py/litewax)[![License](https://img.shields.io/github/license/makarworld/litewax.svg?label=License&amp;logo=apache&amp;cacheSeconds=2592000)](https://github.com/makarworld/litewax/blob/main/LICENSE)[![image](https://img.shields.io/pypi/pyversions/litewax.svg)](https://pypi.org/project/litewax/)[![Github last commit date](https://img.shields.io/github/last-commit/makarworld/litewax.svg?label=Updated&amp;logo=github&amp;cacheSeconds=600)](https://github.com/makarworld/litewax/commits)[WAX donate](https://wax.atomichub.io/trading/token-transfer?partner=abuztradewax)# litewaxSimply python library for interact with WAX blockchain# TODO- [x] Create tests for Client- [x] Create tests for WCW client- [x] Create tests for Anchor client- [x] Create tests for MultiSig client- [x] Add supply private_keys and wcw both to MultiSigClient- [x] Add PayWith for NeftyBlocks- [x] Add PayWith for AtomicHub- [x] Refactor code, optimize WCW client- [x] Wrap Actions to class (for pretty print)- [ ] Create tests for PayWith---# Installation ```pip install litewax```---# Clients examples## Import```from litewax import Client, MultiSigClient, Contract```## Client setupAnchor```client = Client(private_key=&quot;PVT_KEY&quot;)```Wax Cloud Wallet```client = Client(cookie=&quot;TOKEN_SESSION&quot;)```Anchor MultiSigClient```client = MultiSigClient(private_keys=[&quot;PVT_KEY1&quot;, &quot;PVT_KEY2&quot;, ...])```Wax Cloud Wallet MultiSigClient```client = MultiSigClient(cookies=[&quot;TOKEN_SESSION1&quot;, &quot;TOKEN_SESSION2&quot;, ...])```---# Contract examples## Contract initializeDefault```contract = Contract(&quot;name&quot;, actor=&quot;wallet&quot;)```With client```contract = client.Contract(&quot;name&quot;)# In MultiSigClient:# contract = client.Contract(&quot;name&quot;, client[0])# contract = client[0].Contract(&quot;name&quot;)# contract = client.Contract(&quot;name&quot;, actor=client[0].name)```After once init you can import contract directly```# Contract(&quot;res.pink&quot;)from contracts.res_pink import res_pinkcontract = res_pink(&quot;actor&quot;)```---# Transactions## Make transaction```contract = client.Contract(&quot;res.pink&quot;)trx = client.Transaction(    contract.noop(),    # or    contract.call('noop', {}))```## Push transaction```trx.push() # -&gt; dict# {&quot;transaction_id&quot;: &quot;0x0123abc...&quot;, ...}```---# Examples## (Anchor) Client example ```import litewax# Create client with private key(anchor)client = litewax.Client(private_key=PVT_KEY)# Create a contract object for iteract (file will be created in ./contracts/contract_file.py)contract = litewax.Contract(&quot;res.pink&quot;, client)# or# contract = client.Contract(&quot;res.pink&quot;)# or# contract = litewax.Contract(&quot;res.pink&quot;)# contract.set_actor(client.name) # easy make transactiontrx = client.Transaction(        contract.noop()    )# easy push transactiontrx.push()# {&quot;transaction_id&quot;: &quot;0x0123abc...&quot;, ...}```## (Wax Cloud Wallet) Client example ```import litewax# Create client with token session (wax cloud wallet)client = litewax.Client(cookie=TOKEN_SESSION)# Create a contract object for iteract (file will be created in ./contracts/contract_file.py)contract = litewax.Contract(&quot;res.pink&quot;, client)# or# contract = client.Contract(&quot;res.pink&quot;)# or# contract = litewax.Contract(&quot;res.pink&quot;)# contract.set_actor(client.name) # easy make transactiontrx = AnchorClient.Transaction(        contract.noop()    )# easy push transactiontrx.push()# {&quot;transaction_id&quot;: &quot;0x0123abc...&quot;, ...}```## (Anchor) MultiSigClient example ```import litewax# Create multisig client (may accept wax cloud wallet and anchor)multiclient = litewax.MultiSigClient(        private_keys=[PVT_KEY1, PVT_KEY2, ...]    )# Create a contract object for iteract (file will be created in ./contracts/contract_file.py)contract = litewax.Contract(&quot;res.pink&quot;, client)# or# contract = client[i].Contract(&quot;res.pink&quot;)# or# contract = litewax.Contract(&quot;res.pink&quot;)# contract.set_actor(client[i].name) # easy make transactiontrx = multiclient.Transaction(        contract.transfer(            _from=client[0].name,            _to=client[1].name,            amount=&quot;1.0000 WAX&quot;,            memo=&quot;Send 1 WAX with multisig client&quot;        ),        client[1].Contract(&quot;res.pink&quot;).noop() # for pay CPU    )# easy push transaction (if client is MultiSig, last signed action will pay for all cpu)trx.push()# {&quot;transaction_id&quot;: &quot;0x0123abc...&quot;, ...}```## (Wax Cloud Wallet) MultiSigClient example ```import litewax# Create multisig client (may accept wax cloud wallet and anchor)multiclient = litewax.MultiSigClient(        cookies=[cookie1, cookie2, ...]    )# Create a contract object for iteract (file will be created in ./contracts/contract_file.py)contract = litewax.Contract(&quot;res.pink&quot;, client)# or# contract = client[i].Contract(&quot;res.pink&quot;)# or# contract = litewax.Contract(&quot;res.pink&quot;)# contract.set_actor(client[i].name) # easy make transactiontrx = multiclient.Transaction(        contract.transfer(            _from=client[0].name,            _to=client[1].name,            amount=&quot;1.0000 WAX&quot;,            memo=&quot;Send 1 WAX with multisig client&quot;        ),        client[1].Contract(&quot;res.pink&quot;).noop() # for pay CPU    )# easy push transaction (if client is MultiSig, last signed action will pay for all cpu)trx.push()# {&quot;transaction_id&quot;: &quot;0x0123abc...&quot;, ...}```## Contract obj example ```from litewax import Contractcontract = Contract(&quot;res.pink&quot;)# contract = Contract(&quot;res.pink&quot;, actor=&quot;abuztradewax&quot;)# contract = Contract(&quot;res.pink&quot;, actor=&quot;abuztradewax&quot;, force_recreate=True)## After create contract once, abigen create folder &quot;contracts&quot; and you can import directlyfrom contracts.res_pink import res_pink # in contract name &quot;.&quot; replace to &quot;_&quot;contract = res_pink(actor=&quot;abuztradewax&quot;)# contract = res_pink()# contract.set_actor(&quot;abuztradewax&quot;)# you can push transaction without initialize any clients (push work only for anchor accounts)contract.push_actions(        &quot;PRIVATE_KEY&quot;,        contract.noop()    )# {&quot;transaction_id&quot;: &quot;0x0123abc...&quot;, ...}# also you can send multiply signed trxcontract1 = Contract(&quot;eosio.token&quot;, actor=&quot;wallet1&quot;)contract2 = Contract(&quot;res.pink&quot;, actor=&quot;wallet2&quot;)contract1.push_actions(        [&quot;PRIVATE_KEY1&quot;, &quot;PRICATE_KEY2&quot;],        contract1.transfer(            _from=contract1.actor,            _to=contract2.actor,            amount=&quot;1.0000 WAX&quot;,            memo=&quot;send 1 WAX without any client (only Contract instance)&quot;        ),        contract2.noop() # this action will pay for CPU        # {&quot;transaction_id&quot;: &quot;0x0123abc...&quot;, ...}```</longdescription>
</pkgmetadata>