<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-sql==========python-sql is a library to write SQL queries in a pythonic way.Nutshell--------Import::    &gt;&gt;&gt; from sql import *    &gt;&gt;&gt; from sql.aggregate import *    &gt;&gt;&gt; from sql.conditionals import *Simple selects::    &gt;&gt;&gt; user = Table('user')    &gt;&gt;&gt; select = user.select()    &gt;&gt;&gt; tuple(select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot;', ())    &gt;&gt;&gt; select = user.select(user.name)    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.&quot;name&quot; FROM &quot;user&quot; AS &quot;a&quot;', ())    &gt;&gt;&gt; select = user.select(Count(Literal(1)))    &gt;&gt;&gt; tuple(select)    ('SELECT COUNT(%s) FROM &quot;user&quot; AS &quot;a&quot;', (1,))    &gt;&gt;&gt; select = user.select(user.name, distinct=True)    &gt;&gt;&gt; tuple(select)    ('SELECT DISTINCT &quot;a&quot;.&quot;name&quot; FROM &quot;user&quot; AS &quot;a&quot;', ())    &gt;&gt;&gt; select = user.select(user.id, user.name)    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.&quot;id&quot;, &quot;a&quot;.&quot;name&quot; FROM &quot;user&quot; AS &quot;a&quot;', ())Select with where condition::    &gt;&gt;&gt; select.where = user.name == 'foo'    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.&quot;id&quot;, &quot;a&quot;.&quot;name&quot; FROM &quot;user&quot; AS &quot;a&quot; WHERE (&quot;a&quot;.&quot;name&quot; = %s)', ('foo',))    &gt;&gt;&gt; select.where = (user.name == 'foo') &amp; (user.active == True)    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.&quot;id&quot;, &quot;a&quot;.&quot;name&quot; FROM &quot;user&quot; AS &quot;a&quot; WHERE ((&quot;a&quot;.&quot;name&quot; = %s) AND (&quot;a&quot;.&quot;active&quot; = %s))', ('foo', True))    &gt;&gt;&gt; select.where = user.name == user.login    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.&quot;id&quot;, &quot;a&quot;.&quot;name&quot; FROM &quot;user&quot; AS &quot;a&quot; WHERE (&quot;a&quot;.&quot;name&quot; = &quot;a&quot;.&quot;login&quot;)', ())Select with join::    &gt;&gt;&gt; join = user.join(Table('user_group'))    &gt;&gt;&gt; join.condition = join.right.user == user.id    &gt;&gt;&gt; select = join.select(user.name, join.right.group)    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.&quot;name&quot;, &quot;b&quot;.&quot;group&quot; FROM &quot;user&quot; AS &quot;a&quot; INNER JOIN &quot;user_group&quot; AS &quot;b&quot; ON (&quot;b&quot;.&quot;user&quot; = &quot;a&quot;.&quot;id&quot;)', ())Select with multiple joins::    &gt;&gt;&gt; join1 = user.join(Table('user'))    &gt;&gt;&gt; join2 = join1.join(Table('user'))    &gt;&gt;&gt; select = join2.select(user.id, join1.right.id, join2.right.id)    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.&quot;id&quot;, &quot;b&quot;.&quot;id&quot;, &quot;c&quot;.&quot;id&quot; FROM &quot;user&quot; AS &quot;a&quot; INNER JOIN &quot;user&quot; AS &quot;b&quot; INNER JOIN &quot;user&quot; AS &quot;c&quot;', ())Select with group_by::    &gt;&gt;&gt; invoice = Table('invoice')    &gt;&gt;&gt; select = invoice.select(Sum(invoice.amount), invoice.currency,    ...         group_by=invoice.currency)    &gt;&gt;&gt; tuple(select)    ('SELECT SUM(&quot;a&quot;.&quot;amount&quot;), &quot;a&quot;.&quot;currency&quot; FROM &quot;invoice&quot; AS &quot;a&quot; GROUP BY &quot;a&quot;.&quot;currency&quot;', ())Select with output name::    &gt;&gt;&gt; tuple(user.select(user.name.as_('First Name')))    ('SELECT &quot;a&quot;.&quot;name&quot; AS &quot;First Name&quot; FROM &quot;user&quot; AS &quot;a&quot;', ())Select with order_by::    &gt;&gt;&gt; tuple(user.select(order_by=user.date))    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; ORDER BY &quot;a&quot;.&quot;date&quot;', ())    &gt;&gt;&gt; tuple(user.select(order_by=Asc(user.date)))    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; ORDER BY &quot;a&quot;.&quot;date&quot; ASC', ())    &gt;&gt;&gt; tuple(user.select(order_by=(user.date.asc, user.id.desc)))    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; ORDER BY &quot;a&quot;.&quot;date&quot; ASC, &quot;a&quot;.&quot;id&quot; DESC', ())Select with sub-select::    &gt;&gt;&gt; user_group = Table('user_group')    &gt;&gt;&gt; subselect = user_group.select(user_group.user,    ...     where=user_group.active == True)    &gt;&gt;&gt; user = Table('user')    &gt;&gt;&gt; tuple(user.select(user.id, where=user.id.in_(subselect)))    ('SELECT &quot;a&quot;.&quot;id&quot; FROM &quot;user&quot; AS &quot;a&quot; WHERE (&quot;a&quot;.&quot;id&quot; IN (SELECT &quot;b&quot;.&quot;user&quot; FROM &quot;user_group&quot; AS &quot;b&quot; WHERE (&quot;b&quot;.&quot;active&quot; = %s)))', (True,))    &gt;&gt;&gt; tuple(subselect.select(subselect.user))    ('SELECT &quot;a&quot;.&quot;user&quot; FROM (SELECT &quot;b&quot;.&quot;user&quot; FROM &quot;user_group&quot; AS &quot;b&quot; WHERE (&quot;b&quot;.&quot;active&quot; = %s)) AS &quot;a&quot;', (True,))Select on other schema::    &gt;&gt;&gt; other_table = Table('user', 'myschema')    &gt;&gt;&gt; tuple(other_table.select())    ('SELECT * FROM &quot;myschema&quot;.&quot;user&quot; AS &quot;a&quot;', ())Insert query with default values::    &gt;&gt;&gt; tuple(user.insert())    ('INSERT INTO &quot;user&quot; AS &quot;a&quot; DEFAULT VALUES', ())Insert query with values::    &gt;&gt;&gt; tuple(user.insert(columns=[user.name, user.login],    ...         values=[['Foo', 'foo']]))    ('INSERT INTO &quot;user&quot; AS &quot;a&quot; (&quot;name&quot;, &quot;login&quot;) VALUES (%s, %s)', ('Foo', 'foo'))    &gt;&gt;&gt; tuple(user.insert(columns=[user.name, user.login],    ...         values=[['Foo', 'foo'], ['Bar', 'bar']]))    ('INSERT INTO &quot;user&quot; AS &quot;a&quot; (&quot;name&quot;, &quot;login&quot;) VALUES (%s, %s), (%s, %s)', ('Foo', 'foo', 'Bar', 'bar'))Insert query with query::    &gt;&gt;&gt; passwd = Table('passwd')    &gt;&gt;&gt; select = passwd.select(passwd.login, passwd.passwd)    &gt;&gt;&gt; tuple(user.insert(values=select))    ('INSERT INTO &quot;user&quot; AS &quot;b&quot; SELECT &quot;a&quot;.&quot;login&quot;, &quot;a&quot;.&quot;passwd&quot; FROM &quot;passwd&quot; AS &quot;a&quot;', ())Update query with values::    &gt;&gt;&gt; tuple(user.update(columns=[user.active], values=[True]))    ('UPDATE &quot;user&quot; AS &quot;a&quot; SET &quot;active&quot; = %s', (True,))    &gt;&gt;&gt; tuple(invoice.update(columns=[invoice.total], values=[invoice.amount + invoice.tax]))    ('UPDATE &quot;invoice&quot; AS &quot;a&quot; SET &quot;total&quot; = (&quot;a&quot;.&quot;amount&quot; + &quot;a&quot;.&quot;tax&quot;)', ())Update query with where condition::    &gt;&gt;&gt; tuple(user.update(columns=[user.active], values=[True],    ...          where=user.active == False))    ('UPDATE &quot;user&quot; AS &quot;a&quot; SET &quot;active&quot; = %s WHERE (&quot;a&quot;.&quot;active&quot; = %s)', (True, False))Update query with from list::    &gt;&gt;&gt; group = Table('user_group')    &gt;&gt;&gt; tuple(user.update(columns=[user.active], values=[group.active],    ...         from_=[group], where=user.id == group.user))    ('UPDATE &quot;user&quot; AS &quot;b&quot; SET &quot;active&quot; = &quot;a&quot;.&quot;active&quot; FROM &quot;user_group&quot; AS &quot;a&quot; WHERE (&quot;b&quot;.&quot;id&quot; = &quot;a&quot;.&quot;user&quot;)', ())Delete query::    &gt;&gt;&gt; tuple(user.delete())    ('DELETE FROM &quot;user&quot;', ())Delete query with where condition::    &gt;&gt;&gt; tuple(user.delete(where=user.name == 'foo'))    ('DELETE FROM &quot;user&quot; WHERE (&quot;name&quot; = %s)', ('foo',))Delete query with sub-query::    &gt;&gt;&gt; tuple(user.delete(    ...             where=user.id.in_(user_group.select(user_group.user))))    ('DELETE FROM &quot;user&quot; WHERE (&quot;id&quot; IN (SELECT &quot;a&quot;.&quot;user&quot; FROM &quot;user_group&quot; AS &quot;a&quot;))', ())Flavors::    &gt;&gt;&gt; select = user.select()    &gt;&gt;&gt; select.offset = 10    &gt;&gt;&gt; Flavor.set(Flavor())    &gt;&gt;&gt; tuple(select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; OFFSET 10', ())    &gt;&gt;&gt; Flavor.set(Flavor(max_limit=18446744073709551615))    &gt;&gt;&gt; tuple(select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; LIMIT 18446744073709551615 OFFSET 10', ())    &gt;&gt;&gt; Flavor.set(Flavor(max_limit=-1))    &gt;&gt;&gt; tuple(select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; LIMIT -1 OFFSET 10', ())Limit style::    &gt;&gt;&gt; select = user.select(limit=10, offset=20)    &gt;&gt;&gt; Flavor.set(Flavor(limitstyle='limit'))    &gt;&gt;&gt; tuple(select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; LIMIT 10 OFFSET 20', ())    &gt;&gt;&gt; Flavor.set(Flavor(limitstyle='fetch'))    &gt;&gt;&gt; tuple(select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; OFFSET (20) ROWS FETCH FIRST (10) ROWS ONLY', ())    &gt;&gt;&gt; Flavor.set(Flavor(limitstyle='rownum'))    &gt;&gt;&gt; tuple(select)    ('SELECT &quot;a&quot;.* FROM (SELECT &quot;b&quot;.*, ROWNUM AS &quot;rnum&quot; FROM (SELECT * FROM &quot;user&quot; AS &quot;c&quot;) AS &quot;b&quot; WHERE (ROWNUM &lt;= %s)) AS &quot;a&quot; WHERE (&quot;rnum&quot; &gt; %s)', (30, 20))qmark style::    &gt;&gt;&gt; Flavor.set(Flavor(paramstyle='qmark'))    &gt;&gt;&gt; select = user.select()    &gt;&gt;&gt; select.where = user.name == 'foo'    &gt;&gt;&gt; tuple(select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; WHERE (&quot;a&quot;.&quot;name&quot; = ?)', ('foo',))numeric style::    &gt;&gt;&gt; Flavor.set(Flavor(paramstyle='format'))    &gt;&gt;&gt; select = user.select()    &gt;&gt;&gt; select.where = user.name == 'foo'    &gt;&gt;&gt; format2numeric(*select)    ('SELECT * FROM &quot;user&quot; AS &quot;a&quot; WHERE (&quot;a&quot;.&quot;name&quot; = :0)', ('foo',))</longdescription>
</pkgmetadata>