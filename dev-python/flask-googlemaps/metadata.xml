<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask Google Maps [![Generic badge](https://img.shields.io/badge/PayPal-Donante-red.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=2UGZHBYZV39XY&amp;source=url)[![Flask Estension](https://img.shields.io/badge/flask-extension-green.svg?style=flat)](https://flaskextensions.com)[![PyPI version fury.io](https://badge.fury.io/py/flask-googlemaps.svg)](https://pypi.python.org/pypi/flask-googlemaps/)[![PyPI download month](https://img.shields.io/pypi/dm/flask-googlemaps.svg)](https://pypi.org/project/flask-googlemaps/)[![PyPI license](https://img.shields.io/pypi/l/flask-googlemaps.svg)](https://pypi.python.org/pypi/flask-googlemaps/)[![PyPI format](https://img.shields.io/pypi/format/flask-googlemaps.svg)](https://pypi.python.org/pypi/flask-googlemaps/)[![PyPI status](https://img.shields.io/pypi/status/flask-googlemaps.svg)](https://pypi.python.org/pypi/flask-googlemaps/)[![CI-Github](https://github.com/flask-extensions/Flask-GoogleMaps/workflows/CI/badge.svg)](https://github.com/flask-extensions/Flask-GoogleMaps/workflows/CI/badge.svg)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Easy to use Google Maps in your Flask application## requires- Jinja- Flask- A google api key [get here](https://developers.google.com/maps/documentation/javascript/get-api-key)## ContributeTo contribute with the project, clone it, create a virtualenv and install all of you need to dev, see below:```bashgit clone https://github.com/flask-extensions/Flask-GoogleMaps.gitcd Flask-GoogleMapspoetry use env 3.8  # just to create virtualenv at the first timepoetry shell # activate virtualenvpoetry install  # to install all for dev```## InstallationTo use in your project just use your dependency manager to install it, with pip is like this:```bashpip install flask-googlemaps```## How it worksFlask-GoogleMaps includes some global functions and template filters in your Jinja environment, also it allows you to use the Map in views if needed.### registeringin your app```pythonfrom flask import Flaskfrom flask_googlemaps import GoogleMapsapp = Flask(__name__)# you can set key as configapp.config['GOOGLEMAPS_KEY'] = &quot;8JZ7i18MjFuM35dJHq70n3Hx4&quot;# Initialize the extensionGoogleMaps(app)# you can also pass the key here if you preferGoogleMaps(app, key=&quot;8JZ7i18MjFuM35dJHq70n3Hx4&quot;)```In template```html{{googlemap(&quot;my_awesome_map&quot;, lat=0.23234234, lng=-0.234234234, markers=[(0.12,-0.45345), ...])}}```That's it! now you have some template filters and functions to use, more details in examples and screenshot below.### Usage- You can create the map in the view and then send to the template context- you can use the template functions and filters directly#### 1. View```pythonfrom flask import Flask, render_templatefrom flask_googlemaps import GoogleMapsfrom flask_googlemaps import Mapapp = Flask(__name__, template_folder=&quot;.&quot;)GoogleMaps(app)@app.route(&quot;/&quot;)def mapview():    # creating a map in the view    mymap = Map(        identifier=&quot;view-side&quot;,        lat=37.4419,        lng=-122.1419,        markers=[(37.4419, -122.1419)]    )    sndmap = Map(        identifier=&quot;sndmap&quot;,        lat=37.4419,        lng=-122.1419,        markers=[          {             'icon': 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',             'lat': 37.4419,             'lng': -122.1419,             'infobox': &quot;&lt;b&gt;Hello World&lt;/b&gt;&quot;          },          {             'icon': 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',             'lat': 37.4300,             'lng': -122.1400,             'infobox': &quot;&lt;b&gt;Hello World from other place&lt;/b&gt;&quot;          }        ]    )    return render_template('example.html', mymap=mymap, sndmap=sndmap)if __name__ == &quot;__main__&quot;:    app.run(debug=True)```##### `Map()` Parameters- **lat**: The latitude coordinate for centering the map.- **lng**: The longitude coordinate for centering the map.- **zoom**: The zoom level. Defaults to `13`.- **maptype**: The map type - `ROADMAP`, `SATELLITE`, `HYBRID`, `TERRAIN`. Defaults to `ROADMAP`.- **markers**: Markers array of tuples having (**lat**, **lng**, infobox, icon, label). Defaults to `None`.- or **markers**: a list of dicts containing **lat**, **lng**, infobox, icon, label.- or **markers**: Markers dictionary with icon urls as keys and markers array as values.- **varname**: The instance variable name.- **style**: A string containing CSS styles. Defaults to `&quot;height:300px;width:300px;margin:0;&quot;`.- **identifier**: The CSS ID selector name.- **cls**: The CSS Class selector name. Defaults to `&quot;map&quot;`.- **language**: The map language. Defaults to `&quot;en&quot;`.- **region**: The map region. Defaults to `&quot;US&quot;`.Also controls True or False:- zoom_control- maptype_control- scale_control- scale_control- streetview_control- rotate_control- fullscreen_control- scroll_wheel- collapsible (map collapses by click on **varname**\_collapse button)- mapdisplay (show a collapsible map by default or not)- center_on_user_location (using HTML5 Geolocation)#### 2. Template```html&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    {{&quot;decoupled-map&quot;|googlemap_js(37.4419, -122.1419, markers=[(37.4419,    -122.1419)])}} {{mymap.js}} {{sndmap.js}}  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Flask Google Maps Example&lt;/h1&gt;    &lt;h2&gt;Template function centered, no marker&lt;/h2&gt;    {{googlemap(&quot;simple-map&quot;, 37.4419, -122.1419)}}    &lt;h2&gt;Template filter decoupled with single marker&lt;/h2&gt;    {{&quot;decoupled-map&quot;|googlemap_html(37.4419, -122.1419)}}    &lt;h2&gt;Template function with multiple markers&lt;/h2&gt;    {% with map=googlemap_obj(&quot;another-map&quot;, 37.4419, -122.1419,    markers=[(37.4419, -122.1419), (37.4300, -122.1400)]) %} {{map.html}}    {{map.js}} {% endwith %}    &lt;h2&gt;First map generated in view&lt;/h2&gt;    {{mymap.html}}    &lt;h2&gt;Second map generated in view&lt;/h2&gt;    &lt;h3&gt;Example for different icons in multiple markers with infoboxes&lt;/h3&gt;    {{sndmap.html}}  &lt;/body&gt;&lt;/html&gt;```### InfoboxHere's an example snippet of code:```python    Map(        identifier=&quot;catsmap&quot;,        lat=37.4419,        lng=-122.1419,        markers=[            {                'icon': 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',                'lat':  37.4419,                'lng':  -122.1419,                'infobox': &quot;&lt;img src='cat1.jpg' /&gt;&quot;            },            {                'icon': 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',                'lat': 37.4300,                'lng': -122.1400,                'infobox': &quot;&lt;img src='cat2.jpg' /&gt;&quot;            },            {                'icon': 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png',                'lat': 37.4500,                'lng': -122.1350,                'infobox': &quot;&lt;img src='cat3.jpg' /&gt;&quot;            }        ]    )```Which results in something like the following map:&lt;img width=&quot;1439&quot; alt=&quot;screen shot 2015-07-29 at 2 41 52 pm&quot; src=&quot;https://cloud.githubusercontent.com/assets/8108300/8969650/13b0de7a-3602-11e5-9ed0-9f328ac9253f.png&quot;&gt;### LabelHere's an example snippet of code:```pythonMap(        identifier=&quot;labelsmap&quot;,        lat=37.4419,        lng=-122.1419,        markers=[            {                'lat': 37.4500,                'lng': -122.1350,                'label': &quot;X&quot;            },            {                'lat':  37.4419,                'lng':  -122.1419,                'label': &quot;Y&quot;            },            {                'lat': 37.4300,                'lng': -122.1400,                'label': &quot;Z&quot;            }        ]    )```Which results in something like the following map:&lt;img width=&quot;271&quot; alt=&quot;Map showing markers with labels&quot; src=&quot;https://user-images.githubusercontent.com/708882/92332217-a3363280-f041-11ea-975c-0ac9413ada68.png&quot;&gt;### Fit all markers within boundsAllow users to easily fit all markers within view on page load#### Without bounds```python@app.route('/map-unbounded/')def map_unbounded():&quot;&quot;&quot;Create map with markers out of bounds.&quot;&quot;&quot;    locations = []    # long list of coordinates    map = Map(        lat=locations[0].latitude,        lng=locations[0].longitude,        markers=[(loc.latitude, loc.longitude) for loc in locations]    )    return render_template('map.html', map=map)```![image](https://user-images.githubusercontent.com/14223309/29294427-24a8d4e0-8104-11e7-967b-0c55c20d0f7c.png)#### With bounds```python@app.route('/map-bounded/')def map_bounded():&quot;&quot;&quot;Create map with all markers within bounds.&quot;&quot;&quot;    locations = []    # long list of coordinates    map = Map(        lat=locations[0].latitude,        lng=locations[0].longitude,        markers=[(loc.latitude, loc.longitude) for loc in locations],        fit_markers_to_bounds = True    )    return render_template('map.html', map=map)```![image](https://user-images.githubusercontent.com/14223309/29294483-6ac3e532-8104-11e7-988c-5c19d700fe5b.png)### Geocoding and Reverse Geocoding```pythonfrom flask_googlemaps import get_address, get_coordinatesAPI_KEY = 'YOUR API KEY'#Reverse Geocoding: getting detailed address from coordinates of a locationprint(get_address(API_KEY,22.4761596,88.4149326))#output: {'zip': '700150', 'country': 'India', 'state': 'West Bengal', 'city': 'Kolkata', 'locality': 'Kolkata', 'road': 'Techno City', 'formatted_address': 'Sirin Rd, Mauza Ranabhutia, Techno City, Kolkata, West Bengal 700150, India'}#Geocoding: getting coordinates from address textprint(get_coordinates(API_KEY,'Netaji Subhash Engineering College Kolkata'))#output: {'lat': 22.4761596, 'lng': 88.4149326}```### Run the example app```bash$ git clone https://github.com/flask-extensions/Flask-GoogleMaps$ cd Flask-GoogleMaps/```If you have Poetry```bash$ poetry install```without poetry```bash$ pip install --upgrade pip$ pip install -e .$ pip install -r requirements.txt```Run it.```bash$ FLASK_GOOGLEMAPS_KEY=&quot;YourKeyHERE&quot; FLASK_APP=examples/example.py flask runrunning on localhost:5000 .....```Access: http://localhost:5000/ and http://localhost:5000/fullmap## Contribute with the Google Maps APIPlease see this page [developers.google.com/maps/documentation/javascript/tutorial](https://developers.google.com/maps/documentation/javascript/tutorial) and contribute!</longdescription>
</pkgmetadata>