<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>The Versioneer==============* like a rocketeer, but for versions!* https://github.com/python-versioneer/python-versioneer* Brian Warner* License: Public Domain (Unlicense)* Compatible with: Python 3.7, 3.8, 3.9, 3.10, 3.11 and pypy3* [![Latest Version][pypi-image]][pypi-url]* [![Build Status][travis-image]][travis-url]This is a tool for managing a recorded version number in setuptools-basedpython projects. The goal is to remove the tedious and error-prone &quot;updatethe embedded version string&quot; step from your release process. Making a newrelease should be as easy as recording a new tag in your version-controlsystem, and maybe making new tarballs.## Quick InstallVersioneer provides two installation modes. The &quot;classic&quot; vendored mode installsa copy of versioneer into your repository. The experimental build-time dependency modeis intended to allow you to skip this step and simplify the process of upgrading.### Vendored mode* `pip install versioneer` to somewhere in your $PATH   * A [conda-forge recipe](https://github.com/conda-forge/versioneer-feedstock) is     available, so you can also use `conda install -c conda-forge versioneer`* add a `[tool.versioneer]` section to your `pyproject.toml` or a  `[versioneer]` section to your `setup.cfg` (see [Install](INSTALL.md))   * Note that you will need to add `tomli; python_version &lt; &quot;3.11&quot;` to your     build-time dependencies if you use `pyproject.toml`* run `versioneer install --vendor` in your source tree, commit the results* verify version information with `python setup.py version`### Build-time dependency mode* `pip install versioneer` to somewhere in your $PATH   * A [conda-forge recipe](https://github.com/conda-forge/versioneer-feedstock) is     available, so you can also use `conda install -c conda-forge versioneer`* add a `[tool.versioneer]` section to your `pyproject.toml` or a  `[versioneer]` section to your `setup.cfg` (see [Install](INSTALL.md))* add `versioneer` (with `[toml]` extra, if configuring in `pyproject.toml`)  to the `requires` key of the `build-system` table in `pyproject.toml`:  ```toml  [build-system]  requires = [&quot;setuptools&quot;, &quot;versioneer[toml]&quot;]  build-backend = &quot;setuptools.build_meta&quot;  ```* run `versioneer install --no-vendor` in your source tree, commit the results* verify version information with `python setup.py version`## Version IdentifiersSource trees come from a variety of places:* a version-control system checkout (mostly used by developers)* a nightly tarball, produced by build automation* a snapshot tarball, produced by a web-based VCS browser, like github's  &quot;tarball from tag&quot; feature* a release tarball, produced by &quot;setup.py sdist&quot;, distributed through PyPIWithin each source tree, the version identifier (either a string or a number,this tool is format-agnostic) can come from a variety of places:* ask the VCS tool itself, e.g. &quot;git describe&quot; (for checkouts), which knows  about recent &quot;tags&quot; and an absolute revision-id* the name of the directory into which the tarball was unpacked* an expanded VCS keyword ($Id$, etc)* a `_version.py` created by some earlier build stepFor released software, the version identifier is closely related to a VCStag. Some projects use tag names that include more than just the versionstring (e.g. &quot;myproject-1.2&quot; instead of just &quot;1.2&quot;), in which case the toolneeds to strip the tag prefix to extract the version identifier. Forunreleased software (between tags), the version identifier should provideenough information to help developers recreate the same tree, while alsogiving them an idea of roughly how old the tree is (after version 1.2, beforeversion 1.3). Many VCS systems can report a description that captures this,for example `git describe --tags --dirty --always` reports things like&quot;0.7-1-g574ab98-dirty&quot; to indicate that the checkout is one revision past the0.7 tag, has a unique revision id of &quot;574ab98&quot;, and is &quot;dirty&quot; (it hasuncommitted changes).The version identifier is used for multiple purposes:* to allow the module to self-identify its version: `myproject.__version__`* to choose a name and prefix for a 'setup.py sdist' tarball## Theory of OperationVersioneer works by adding a special `_version.py` file into your sourcetree, where your `__init__.py` can import it. This `_version.py` knows how todynamically ask the VCS tool for version information at import time.`_version.py` also contains `$Revision$` markers, and the installationprocess marks `_version.py` to have this marker rewritten with a tag nameduring the `git archive` command. As a result, generated tarballs willcontain enough information to get the proper version.To allow `setup.py` to compute a version too, a `versioneer.py` is added tothe top level of your source tree, next to `setup.py` and the `setup.cfg`that configures it. This overrides several distutils/setuptools commands tocompute the version when invoked, and changes `setup.py build` and `setup.pysdist` to replace `_version.py` with a small static file that contains justthe generated version data.## InstallationSee [INSTALL.md](./INSTALL.md) for detailed installation instructions.## Version-String FlavorsCode which uses Versioneer can learn about its version string at runtime byimporting `_version` from your main `__init__.py` file and running the`get_versions()` function. From the &quot;outside&quot; (e.g. in `setup.py`), you canimport the top-level `versioneer.py` and run `get_versions()`.Both functions return a dictionary with different flavors of versioninformation:* `['version']`: A condensed version string, rendered using the selected  style. This is the most commonly used value for the project's version  string. The default &quot;pep440&quot; style yields strings like `0.11`,  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the &quot;Styles&quot; section  below for alternative styles.* `['full-revisionid']`: detailed revision identifier. For Git, this is the  full SHA1 commit id, e.g. &quot;1076c978a8d3cfc70f408fe5974aa6c092c949ac&quot;.* `['date']`: Date and time of the latest `HEAD` commit. For Git, it is the  commit date in ISO 8601 format. This will be None if the date is not  available.* `['dirty']`: a boolean, True if the tree has uncommitted changes. Note that  this is only accurate if run in a VCS checkout, otherwise it is likely to  be False or None* `['error']`: if the version string could not be computed, this will be set  to a string describing the problem, otherwise it will be None. It may be  useful to throw an exception in setup.py if this is set, to avoid e.g.  creating tarballs with a version string of &quot;unknown&quot;.Some variants are more useful than others. Including `full-revisionid` in abug report should allow developers to reconstruct the exact code being tested(or indicate the presence of local changes that should be shared with thedevelopers). `version` is suitable for display in an &quot;about&quot; box or a CLI`--version` output: it can be easily compared against release notes and listsof bugs fixed in various releases.The installer adds the following text to your `__init__.py` to place a basicversion in `YOURPROJECT.__version__`:    from ._version import get_versions    __version__ = get_versions()['version']    del get_versions## StylesThe setup.cfg `style=` configuration controls how the VCS information isrendered into a version string.The default style, &quot;pep440&quot;, produces a PEP440-compliant string, equal to theun-prefixed tag name for actual releases, and containing an additional &quot;localversion&quot; section with more detail for in-between builds. For Git, this isTAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags--dirty --always`. For example &quot;0.11+2.g1076c97.dirty&quot; indicates that thetree is like the &quot;1076c97&quot; commit but has uncommitted changes (&quot;.dirty&quot;), andthat this commit is two revisions (&quot;+2&quot;) beyond the &quot;0.11&quot; tag. For releasedsoftware (exactly equal to a known tag), the identifier will only contain thestripped tag, e.g. &quot;0.11&quot;.Other styles are available. See [details.md](details.md) in the Versioneersource tree for descriptions.## DebuggingVersioneer tries to avoid fatal errors: if something goes wrong, it will tendto return a version of &quot;0+unknown&quot;. To investigate the problem, run `setup.pyversion`, which will run the version-lookup code in a verbose mode, and willdisplay the full contents of `get_versions()` (including the `error` string,which may help identify what went wrong).## Known LimitationsSome situations are known to cause problems for Versioneer. This details themost significant ones. More can be found on Github[issues page](https://github.com/python-versioneer/python-versioneer/issues).### SubprojectsVersioneer has limited support for source trees in which `setup.py` is not inthe root directory (e.g. `setup.py` and `.git/` are *not* siblings). The aretwo common reasons why `setup.py` might not be in the root:* Source trees which contain multiple subprojects, such as  [Buildbot](https://github.com/buildbot/buildbot), which contains both  &quot;master&quot; and &quot;slave&quot; subprojects, each with their own `setup.py`,  `setup.cfg`, and `tox.ini`. Projects like these produce multiple PyPI  distributions (and upload multiple independently-installable tarballs).* Source trees whose main purpose is to contain a C library, but which also  provide bindings to Python (and perhaps other languages) in subdirectories.Versioneer will look for `.git` in parent directories, and most operationsshould get the right version string. However `pip` and `setuptools` have bugsand implementation details which frequently cause `pip install .` from asubproject directory to fail to find a correct version string (so it usuallydefaults to `0+unknown`).`pip install --editable .` should work correctly. `setup.py install` mightwork too.Pip-8.1.1 is known to have this problem, but hopefully it will get fixed insome later version.[Bug #38](https://github.com/python-versioneer/python-versioneer/issues/38) is trackingthis issue. The discussion in[PR #61](https://github.com/python-versioneer/python-versioneer/pull/61) describes theissue from the Versioneer side in more detail.[pip PR#3176](https://github.com/pypa/pip/pull/3176) and[pip PR#3615](https://github.com/pypa/pip/pull/3615) contain work to improvepip to let Versioneer work correctly.Versioneer-0.16 and earlier only looked for a `.git` directory next to the`setup.cfg`, so subprojects were completely unsupported with those releases.### Editable installs with setuptools &lt;= 18.5`setup.py develop` and `pip install --editable .` allow you to install aproject into a virtualenv once, then continue editing the source code (andtest) without re-installing after every change.&quot;Entry-point scripts&quot; (`setup(entry_points={&quot;console_scripts&quot;: ..})`) are aconvenient way to specify executable scripts that should be installed alongwith the python package.These both work as expected when using modern setuptools. When usingsetuptools-18.5 or earlier, however, certain operations will cause`pkg_resources.DistributionNotFound` errors when running the entrypointscript, which must be resolved by re-installing the package. This happenswhen the install happens with one version, then the egg_info data isregenerated while a different version is checked out. Many setup.py commandscause egg_info to be rebuilt (including `sdist`, `wheel`, and installing intoa different virtualenv), so this can be surprising.[Bug #83](https://github.com/python-versioneer/python-versioneer/issues/83) describesthis one, but upgrading to a newer version of setuptools should probablyresolve it.## Updating VersioneerTo upgrade your project to a new release of Versioneer, do the following:* install the new Versioneer (`pip install -U versioneer` or equivalent)* edit `setup.cfg` and `pyproject.toml`, if necessary,  to include any new configuration settings indicated by the release notes.  See [UPGRADING](./UPGRADING.md) for details.* re-run `versioneer install --[no-]vendor` in your source tree, to replace  `SRC/_version.py`* commit any changed files## Future DirectionsThis tool is designed to make it easily extended to other version-controlsystems: all VCS-specific components are in separate directories likesrc/git/ . The top-level `versioneer.py` script is assembled from thesecomponents by running make-versioneer.py . In the future, make-versioneer.pywill take a VCS name as an argument, and will construct a version of`versioneer.py` that is specific to the given VCS. It might also take theconfiguration arguments that are currently provided manually duringinstallation by editing setup.py . Alternatively, it might go the otherdirection and include code from all supported VCS systems, reducing thenumber of intermediate scripts.## Similar projects* [setuptools_scm](https://github.com/pypa/setuptools_scm/) - a non-vendored build-time  dependency* [minver](https://github.com/jbweston/miniver) - a lightweight reimplementation of  versioneer* [versioningit](https://github.com/jwodder/versioningit) - a PEP 518-based setuptools  plugin## LicenseTo make Versioneer easier to embed, all its code is dedicated to the publicdomain. The `_version.py` that it creates is also in the public domain.Specifically, both are released under the &quot;Unlicense&quot;, as described inhttps://unlicense.org/.[pypi-image]: https://img.shields.io/pypi/v/versioneer.svg[pypi-url]: https://pypi.python.org/pypi/versioneer/[travis-image]:https://img.shields.io/travis/com/python-versioneer/python-versioneer.svg[travis-url]: https://travis-ci.com/github/python-versioneer/python-versioneer</longdescription>
</pkgmetadata>