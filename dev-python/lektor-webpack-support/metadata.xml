<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># lektor-webpack-supportThis is a plugin for Lektor that adds support for webpack to projects. Whenenabled it can build a webpack project from the `webpack/` folder into theasset folder automatically when the server (or build process) is run withthe `-f webpack` flag.## Enabling the PluginTo enable the plugin add this to your project file, run this command whilesitting in your Lektor project directory:```bashlektor plugins add lektor-webpack-support```## Creating a Webpack ProjectNext you need to create a webpack project. Create a `webpack/` folder andinside that folder create `package.json` and a `webpack.config.js`### `webpack/package.json`This file instructs `npm` which packages we will need. All we need for astart is to create an almost empty file (name and version fields are mandatorybut not important for functionality, change them to suit your own needs):```json{  &quot;name&quot;: &quot;lektor-webpack&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;private&quot;: true}```Now we can `npm install` (or `yarn add`) the rest:```$ cd &lt;/path/to/your/lektor/project&gt;/webpack$ npm install --save-dev webpack webpack-cli @babel/core sass babel-loader sass-loader css-loader url-loader file-loader mini-css-extract-plugin```This will install webpack itself together with babel and sass as well asa bunch of loaders we need for getting all that configured. Because wecreated a `package.json` before and we use `--save-dev` the dependencieswill be remembered in the `package.json` file.### `webpack/webpack.config.js`Next up is the webpack config file. Here we will go with a very basicsetup that's good enough to cover most things you will encounter. Theidea is to build the files from `webpack/scss` and `webpack/js` into`assets/static/gen` so that we can use it even if we do not have webpackinstalled for as long as someone else ran it before.```javascriptconst path = require(&quot;path&quot;);const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);module.exports = = {  entry: {    app: &quot;./js/main.js&quot;,    styles: &quot;./scss/main.scss&quot;,  },  output: {    path: path.join(path.dirname(__dirname), &quot;assets&quot;, &quot;static&quot;, &quot;gen&quot;),    filename: &quot;[name].js&quot;,  },  devtool: &quot;source-map&quot;,  mode: &quot;production&quot;,  module: {    rules: [      {        test: /\.js$/,        exclude: /node_modules/,        use: [&quot;babel-loader&quot;],      },      {        test: /\.scss$/,        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;, &quot;sass-loader&quot;],      },      {        test: /\.css$/,        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;],      },      {        test: /\.(woff2?|ttf|eot|svg|png|jpe?g|gif)$/,        use: [&quot;file&quot;],      },    ],  },  plugins: [new MiniCssExtractPlugin({ filename: &quot;styles.css&quot; })],};```## Creating the AppNow we can start building our app. We configured at least two filesin webpack: `js/main.js` and `scss/main.scss`. Those are the entrypoints we need to have. You can create them as empty files in`webpack/js/main.js` and `webpack/scss/main.scss`.## Running the ServerNow you're ready to go. When you run `lektor server` webpack will notrun, instead you need to now run it as `lektor server -f webpack` whichwill enable the webpack build. Webpack automatically builds your filesinto `assets/static/gen` and this is where Lektor will then pick up thefiles. This is done so that you can ship the webpack generated assetsto others that do not have webpack installed which simplifies using aLektor website that uses webpack.## Manual BuildsTo manually trigger a build that also invokes webpack you can use`lektor build -f webpack`.## Including The FilesNow you need to include the files in your template. This will do it:```html&lt;link rel=&quot;stylesheet&quot; href=&quot;{{ '/static/gen/styles.css'|asseturl }}&quot;&gt;&lt;script type=text/javascript src=&quot;{{ '/static/gen/app.js'|asseturl }}&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;```</longdescription>
</pkgmetadata>