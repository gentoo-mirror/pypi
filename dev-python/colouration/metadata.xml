<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># *Colouration* *Colouration* is a Python library for working with colours. It unifies three representation of colour: - [RGB](https://en.wikipedia.org/wiki/RGB_color_model) (red, green, blue)- [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV) (hue, saturation, lightness)- [HSV](https://en.wikipedia.org/wiki/HSL_and_HSV) (hue, saturation, value)## Installation```bashpip install colouration```## Usage### `Colour````pythonfrom colouration import Colourdefault_arguments = Colour(obj=None,red=None, green=None, blue=None, hexadecimal=None,hue=None, saturation=None, lightness=None, value=None,min_value=0.0, max_value=1.0, name=None, id=None, scheme=None,weight=1.0)# you can use the rgb hexadecimal code to create a Colour objectred = Colour('#FF0000')# you can enter red, green, and blue as separate valuesgreen = Colour(red=0, green=1, blue=0)# max value is 1 by default but other values can be used tooblue = Colour(red=0, green=0, blue=255, max_value=255)# and you can use colour names literal_red = Colour('red')print(f'is red equal to literal_red? {&quot;yes&quot; if red == literal_red else &quot;no&quot;}\n')# you can print with itliteral_red.print('by default the main colour is used for background\n')# to use the colour as the text colour you should use the main_colour argumentred.print(string='red text\n', main_colour='text', secondary='auto') # secondary='auto' is default# the secondary colour is white when the main colour is dark and it is black otherwisered.print(string='the secondary colour is white when the main colour is dark and it is black otherwise.\n')# you can choose a secondary colourred.print(string='red on white\n', main_colour='text', secondary='white')# you can use string or a Colour objectred.print(string='blue on red\n', secondary=Colour('blue'))# you can darken or lighten a colourdark_red = red.darken(ratio=0.5)dark_red.print(string='dark red\n') # ratio can be between 0 and 1light_red = red.lighten(ratio=0.8) # you can change the hue of a colournew_colour = red.increase_hue(0.2)new_colour.print('hue increased by 0.2\n')# you can assign a new hue, lightness, value, red, green, or blue toonew_colour.red = 0.2new_colour.print('setting red = 0.2 causes this.\n')new_colour.hue = 0.8new_colour.print('setting hue = 0.4 causes this.\n')new_colour.value = 0.3new_colour.print('setting value = 0.3 causes this.\n')new_colour.lightness = 0.9new_colour.print('setting lightness = 0.9 causes this.\n')# you can mix colours by adding them togetheryellow = green + redyellow.print(string='mixing green and red produces this.\n')# Colour finds the best name for itselfbluish = Colour(red=220, green=243, blue=255, max_value=255) # max_value is 1 by defaultbluish.print(string=f'Colour finds the best name for itself: {bluish.name}.\n')```### `Scheme`### `Gradient`</longdescription>
</pkgmetadata>