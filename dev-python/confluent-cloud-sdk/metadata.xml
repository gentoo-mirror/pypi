<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. meta::    :description: Confluent Cloud SDK    :keywords: kafka, confluent, cloud, sdk=======================Confluent Cloud SDK=======================SDK to interact with Confluent Cloud APIInstallation=============.. code-block:: bash    pip install confluent-cloud-sdkImports---------To use Confluent Admin API SDK in a project.. code-block:: python    from confluent_cloud_sdk.client_factory import ConfluentClient    from confluent_cloud_sdk.confluent_iam_v2 import ApiKey    from confluent_cloud_sdk.confluent_iam_v2 import ServiceAccountInitialize connection----------------------.. code-block:: python    client = ConfluentClient(        &quot;cloud_key_key&quot;,        &quot;cloud_key_secret&quot;,    )Example with secret in AWS And list all assets------------------------------------------------.. code-block:: python    import json    from os import environ    from boto3.session import Session    from confluent_cloud_sdk.client_factory import ConfluentClient    from confluent_cloud_sdk.confluent_iam_v2 import ServiceAccount    from confluent_cloud_sdk.confluent_org_v2 import ConfluentEnvironment    from confluent_cloud_sdk.confluent_cluster_v2 import KafkaClusterV2    from compose_x_common.aws import get_session    def get_confluent_admin_secret(        secret_arn: str,        session: Session = None,        key_id: str = &quot;ApiKey&quot;,        secret_id: str = &quot;ApiSecret&quot;,    ) -&gt; ConfluentClient:        session = get_session(session)        client = session.client(&quot;secretsmanager&quot;)        value = json.loads(client.get_secret_value(SecretId=secret_arn)[&quot;SecretString&quot;])        return ConfluentClient(value[key_id], value[secret_id])    cclient = get_confluent_admin_secret(environ.get(&quot;SECRET_ARN&quot;))    envs = cclient.list_all(ConfluentEnvironment)    for env in envs:        print(env.obj_id)        clusters = cclient.list_all(KafkaClusterV2, url_args=f&quot;?environment={env.obj_id}&quot;)        for cluster in clusters:            print(cluster.obj_id)    svc_accounts = cclient.list_all(ServiceAccount)    for svc_account in svc_accounts:        print(svc_account.obj_id)        svc_account.import_api_keys()        print([key.obj_id for key in svc_account.api_keys.values()])Usage examples==================For more details, see docs/usage.rst</longdescription>
</pkgmetadata>