<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenAI Python LibraryThe OpenAI Python library provides convenient access to the OpenAI APIfrom applications written in the Python language. It includes apre-defined set of classes for API resources that initializethemselves dynamically from API responses which makes it compatiblewith a wide range of versions of the OpenAI API.You can find usage examples for the OpenAI Python library in our [API reference](https://platform.openai.com/docs/api-reference?lang=python) and the [OpenAI Cookbook](https://github.com/openai/openai-cookbook/).## InstallationTo start, ensure you have Python 3.7.1 or newer. If you justwant to use the package, run:```shpip install --upgrade openai```After you have installed the package, import it at the top of a file:```pythonimport openai```To install this package from source to make modifications to it, run the following command from the root of the repository:```shpython setup.py install```### Optional dependenciesInstall dependencies for [`openai.embeddings_utils`](openai/embeddings_utils.py):```shpip install openai[embeddings]```Install support for [Weights &amp; Biases](https://wandb.me/openai-docs):```shpip install openai[wandb]```Data libraries like `numpy` and `pandas` are not installed by default due to their size. They’re needed for some functionality of this library, but generally not for talking to the API. If you encounter a `MissingDependencyError`, install them with:```shpip install openai[datalib]```## UsageThe library needs to be configured with your account's secret key which is available on the [website](https://platform.openai.com/account/api-keys). Either set it as the `OPENAI_API_KEY` environment variable before using the library:```bashexport OPENAI_API_KEY='sk-...'```Or set `openai.api_key` to its value:```pythonopenai.api_key = &quot;sk-...&quot;```Examples of how to use this library to accomplish various tasks can be found in the [OpenAI Cookbook](https://github.com/openai/openai-cookbook/). It contains code examples for: classification using fine-tuning, clustering, code search, customizing embeddings, question answering from a corpus of documents. recommendations, visualization of embeddings, and more.Most endpoints support a `request_timeout` param. This param takes a `Union[float, Tuple[float, float]]` and will raise an `openai.error.Timeout` error if the request exceeds that time in seconds (See: https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts).### Chat completionsChat models such as `gpt-3.5-turbo` and `gpt-4` can be called using the [chat completions endpoint](https://platform.openai.com/docs/api-reference/chat/create).```pythoncompletion = openai.ChatCompletion.create(model=&quot;gpt-3.5-turbo&quot;, messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello world&quot;}])print(completion.choices[0].message.content)```You can learn more in our [chat completions guide](https://platform.openai.com/docs/guides/gpt/chat-completions-api).### CompletionsText models such as `babbage-002` or `davinci-002` (and our [legacy completions models](https://platform.openai.com/docs/deprecations/deprecation-history)) can be called using the completions endpoint.```pythoncompletion = openai.Completion.create(model=&quot;davinci-002&quot;, prompt=&quot;Hello world&quot;)print(completion.choices[0].text)```You can learn more in our [completions guide](https://platform.openai.com/docs/guides/gpt/completions-api).### EmbeddingsEmbeddings are designed to measure the similarity or relevance between text strings. To get an embedding for a text string, you can use following:```pythontext_string = &quot;sample text&quot;model_id = &quot;text-embedding-ada-002&quot;embedding = openai.Embedding.create(input=text_string, model=model_id)['data'][0]['embedding']```You can learn more in our [embeddings guide](https://platform.openai.com/docs/guides/embeddings/embeddings).### Fine-tuningFine-tuning a model on training data can both improve the results (by giving the model more examples to learn from) and lower the cost/latency of API calls by reducing the need to include training examples in prompts.```python# Create a fine-tuning job with an already uploaded fileopenai.FineTuningJob.create(training_file=&quot;file-abc123&quot;, model=&quot;gpt-3.5-turbo&quot;)# List 10 fine-tuning jobsopenai.FineTuningJob.list(limit=10)# Retrieve the state of a fine-tuneopenai.FineTuningJob.retrieve(&quot;ft-abc123&quot;)# Cancel a jobopenai.FineTuningJob.cancel(&quot;ft-abc123&quot;)# List up to 10 events from a fine-tuning jobopenai.FineTuningJob.list_events(id=&quot;ft-abc123&quot;, limit=10)# Delete a fine-tuned model (must be an owner of the org the model was created in)openai.Model.delete(&quot;ft:gpt-3.5-turbo:acemeco:suffix:abc123&quot;)```You can learn more in our [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning).To log the training results from fine-tuning to Weights &amp; Biases use:```openai wandb sync```For more information, read the [wandb documentation](https://docs.wandb.ai/guides/integrations/openai) on Weights &amp; Biases.### ModerationOpenAI provides a free Moderation endpoint that can be used to check whether content complies with the OpenAI [content policy](https://platform.openai.com/docs/usage-policies).```pythonmoderation_resp = openai.Moderation.create(input=&quot;Here is some perfectly innocuous text that follows all OpenAI content policies.&quot;)```You can learn more in our [moderation guide](https://platform.openai.com/docs/guides/moderation).### Image generation (DALL·E)DALL·E is a generative image model that can create new images based on a prompt. ```pythonimage_resp = openai.Image.create(prompt=&quot;two dogs playing chess, oil painting&quot;, n=4, size=&quot;512x512&quot;)```You can learn more in our [image generation guide](https://platform.openai.com/docs/guides/images).### Audio (Whisper)The speech to text API provides two endpoints, transcriptions and translations, based on our state-of-the-art [open source large-v2 Whisper model](https://github.com/openai/whisper).```pythonf = open(&quot;path/to/file.mp3&quot;, &quot;rb&quot;)transcript = openai.Audio.transcribe(&quot;whisper-1&quot;, f)transcript = openai.Audio.translate(&quot;whisper-1&quot;, f)```You can learn more in our [speech to text guide](https://platform.openai.com/docs/guides/speech-to-text).### Async APIAsync support is available in the API by prepending `a` to a network-bound method:```pythonasync def create_chat_completion():    chat_completion_resp = await openai.ChatCompletion.acreate(model=&quot;gpt-3.5-turbo&quot;, messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello world&quot;}])```To make async requests more efficient, you can pass in your own`aiohttp.ClientSession`, but you must manually close the client session at the endof your program/event loop:```pythonfrom aiohttp import ClientSessionopenai.aiosession.set(ClientSession())# At the end of your program, close the http sessionawait openai.aiosession.get().close()```### Command-line interfaceThis library additionally provides an `openai` command-line utilitywhich makes it easy to interact with the API from your terminal. Run`openai api -h` for usage.```sh# list modelsopenai api models.list# create a chat completion (gpt-3.5-turbo, gpt-4, etc.)openai api chat_completions.create -m gpt-3.5-turbo -g user &quot;Hello world&quot;# create a completion (text-davinci-003, text-davinci-002, ada, babbage, curie, davinci, etc.)openai api completions.create -m ada -p &quot;Hello world&quot;# generate images via DALL·E APIopenai api image.create -p &quot;two dogs playing chess, cartoon&quot; -n 1# using openai through a proxyopenai --proxy=http://proxy.com api models.list```### Microsoft Azure EndpointsIn order to use the library with Microsoft Azure endpoints, you need to set the `api_type`, `api_base` and `api_version` in addition to the `api_key`. The `api_type` must be set to 'azure' and the others correspond to the properties of your endpoint.In addition, the deployment name must be passed as the engine parameter.```pythonimport openaiopenai.api_type = &quot;azure&quot;openai.api_key = &quot;...&quot;openai.api_base = &quot;https://example-endpoint.openai.azure.com&quot;openai.api_version = &quot;2023-05-15&quot;# create a chat completionchat_completion = openai.ChatCompletion.create(deployment_id=&quot;deployment-name&quot;, model=&quot;gpt-3.5-turbo&quot;, messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello world&quot;}])# print the completionprint(chat_completion.choices[0].message.content)```Please note that for the moment, the Microsoft Azure endpoints can only be used for completion, embedding, and fine-tuning operations.For a detailed example of how to use fine-tuning and other operations using Azure endpoints, please check out the following Jupyter notebooks:- [Using Azure completions](https://github.com/openai/openai-cookbook/tree/main/examples/azure/completions.ipynb)- [Using Azure chat](https://github.com/openai/openai-cookbook/tree/main/examples/azure/chat.ipynb)- [Using Azure embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/azure/embeddings.ipynb)### Microsoft Azure Active Directory AuthenticationIn order to use Microsoft Active Directory to authenticate to your Azure endpoint, you need to set the `api_type` to &quot;azure_ad&quot; and pass the acquired credential token to `api_key`. The rest of the parameters need to be set as specified in the previous section.```pythonfrom azure.identity import DefaultAzureCredentialimport openai# Request credentialdefault_credential = DefaultAzureCredential()token = default_credential.get_token(&quot;https://cognitiveservices.azure.com/.default&quot;)# Setup parametersopenai.api_type = &quot;azure_ad&quot;openai.api_key = token.tokenopenai.api_base = &quot;https://example-endpoint.openai.azure.com/&quot;openai.api_version = &quot;2023-05-15&quot;```## CreditThis library is forked from the [Stripe Python Library](https://github.com/stripe/stripe-python).</longdescription>
</pkgmetadata>