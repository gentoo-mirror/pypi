<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>OpenSSH Public Key Parser for Python====================================.. image:: https://github.com/ojarva/python-sshpubkeys/workflows/Run%20python%20tests/badge.svgMajor changes between versions 2 and 3--------------------------------------- Dropped support for Python 2.6 and 3.3- Even in loose mode, DSA keys must be 1024, 2048, or 3072 bits (earlier this was looser)- The interface (API) is exactly the sameUsage-----Native implementation for validating OpenSSH public keys.Currently ssh-rsa, ssh-dss (DSA), ssh-ed25519 and ecdsa keys with NIST curves are supported.Installation:::  pip install sshpubkeysor clone the `repository &lt;https://github.com/ojarva/sshpubkeys&gt;`_ and use::  python setup.py installUsage:::  import sys  from sshpubkeys import SSHKey  ssh = SSHKey(&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAYQCxO38tKAJXIs9ivPxt7AY&quot;        &quot;dfybgtAR1ow3Qkb9GPQ6wkFHQqcFDe6faKCxH6iDRteo4D8L8B&quot;        &quot;xwzN42uZSB0nfmjkIxFTcEU3mFSXEbWByg78aoddMrAAjatyrh&quot;        &quot;H1pON6P0= ojarva@ojar-laptop&quot;, strict=True)  try:      ssh.parse()  except InvalidKeyError as err:      print(&quot;Invalid key:&quot;, err)      sys.exit(1)  except NotImplementedError as err:      print(&quot;Invalid key type:&quot;, err)      sys.exit(1)  print(ssh.bits)  # 768  print(ssh.hash_md5())  # 56:84:1e:90:08:3b:60:c7:29:70:5f:5e:25:a6:3b:86  print(ssh.hash_sha256())  # SHA256:xk3IEJIdIoR9MmSRXTP98rjDdZocmXJje/28ohMQEwM  print(ssh.hash_sha512())  # SHA512:1C3lNBhjpDVQe39hnyy+xvlZYU3IPwzqK1rVneGavy6O3/ebjEQSFvmeWoyMTplIanmUK1hmr9nA8Skmj516HA  print(ssh.comment)  # ojar@ojar-laptop  print(ssh.options_raw)  # None (string of optional options at the beginning of public key)  print(ssh.options)  # None (options as a dictionary, parsed and validated)Parsing of `authorized_keys` files:::  import os  from sshpubkeys import AuthorizedKeysFile  f = open(os.environ[&quot;HOME&quot;] + &quot;/.ssh/authorized_keys&quot;, &quot;r&quot;)  key_file = AuthorizedKeysFile(f, strict=False)  for key in key_file.keys:      print(key.key_type, key.bits, key.hash_sha512())Options-------Set options in constructor as a keywords (i.e., `SSHKey(None, strict=False)`)- strict: defaults to True. Disallows keys OpenSSH's ssh-keygen refuses to create. For instance, this includes DSA keys where length != 1024 bits and RSA keys shorter than 1024-bit. If set to False, tries to allow all keys OpenSSH accepts, including highly insecure 1-bit DSA keys.- skip_option_parsing: if set to True, options string is not parsed (ssh.options_raw is populated, but ssh.options is not).- disallow_options: if set to True, options are not allowed and it will raise an  InvalidOptionsError.Exceptions----------- NotImplementedError if invalid ecdsa curve or unknown key type is encountered.- InvalidKeyError if any other error is encountered:    - TooShortKeyError if key is too short (&lt;768 bits for RSA, &lt;1024 for DSA, &lt;256 for ED25519)    - TooLongKeyError if key is too long (&gt;16384 for RSA, &gt;1024 for DSA, &gt;256 for ED25519)    - InvalidTypeError if key type (&quot;ssh-rsa&quot; in above example) does not match to what is included in base64 encoded data.    - MalformedDataError if decoding and extracting the data fails.    - InvalidOptionsError if options string is invalid.        - InvalidOptionNameError if option name contains invalid characters.            - UnknownOptionNameError if option name is not recognized.        - MissingMandatoryOptionValueError if option needs to have parameter, but it is absent.Tests-----See &quot;`tests/ &lt;https://github.com/ojarva/sshpubkeys/tree/master/tests&gt;`_&quot; folder for unit tests. Use::  python setup.py testor::  python3 setup.py testto run test suite. If you have keys that are not parsed properly, or malformed keys that raise incorrect exception, please send your *public key* to olli@jarva.fi, and I'll include it. Alternatively, `create a new issue &lt;https://github.com/ojarva/sshpubkeys/issues/new&gt;`_ or make `a pull request &lt;https://github.com/ojarva/sshpubkeys/compare&gt;`_ in github.</longdescription>
</pkgmetadata>