<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JinaAI Python SDKThe JinaAI Python SDK is an efficient instrument that smoothly brings the power of JinaAI's products — [SceneXplain](https://scenex.jina.ai), [PromptPerfect](https://promptperfect.jina.ai/), [Rationale](https://rationale.jina.ai/), [BestBanner](https://bestbanner.jina.ai/), and [JinaChat](https://chat.jina.ai/) — into Python applications. Acting as a sturdy interface for JinaAI's APIs, this SDK lets you effortlessly formulate and fine-tune prompts, thus streamlining application development.## Installing### Package managerUsing pip:```bash$ pip install jinaai```## API secretsTo generate an API secret, you need to authenticate on each respective platform's API tab:- [SceneXplain API](https://scenex.jina.ai/api)- [PromptPerfect API](https://promptperfect.jina.ai/api)- [Rationale API](https://rationale.jina.ai/api)- [JinaChat API](https://chat.jina.ai/api)- [BestBanner API](https://bestbanner.jina.ai/api)&gt; **Note:** Each secret is product-specific and cannot be interchanged. If you're planning to use multiple products, you'll need to generate a separate secret for each.## Example usageImport the SDK and instantiate a new client with your authentication secrets:```pythonfrom jinaai import JinaAIjinaai = JinaAI(    secrets = {        'promptperfect-secret': 'XXXXXX',        'scenex-secret': 'XXXXXX',        'rationale-secret': 'XXXXXX',        'jinachat-secret': 'XXXXXX',        'bestbanner-secret': 'XXXXXX',    })```Describe images:```pythondescriptions = jinaai.describe(    'https://picsum.photos/200')```Evaluate situations:```pythondecisions = jinaai.decide(    'Going to Paris this summer',     { 'analysis': 'proscons' })```Optimize prompts:```pythonprompts = jinaai.optimize(    'Write an Hello World function in Python')```Generate complex answers:```pythonoutput = jinaai.generate(    'Give me a recipe for a pizza with pineapple')```Create images from text:```pythonoutput = jinaai.imagine(    'A controversial fusion of sweet pineapple and savory pizza.')```Use APIs together:```pythonsituations = [toBase64(img) for img in [    'factory-1.png',    'factory-2.png',    'factory-3.png',    'factory-4.png',]]descriptions = jinaai.describe(situations)prompt1 = [    'Do any of those situations present a danger?',    'Reply with [YES] or [NO] and explain why',    *['SITUATION:\n' + desc['output'] for i, desc in enumerate(descriptions['results'])]]analysis = jinaai.generate('\n'.join(prompt1))prompt2 = [    'What should be done first to make those situations safer?',    'I only want the most urgent situation',    *['SITUATION:\n' + desc['output'] for i, desc in enumerate(descriptions['results'])]]recommendation = jinaai.generate('\n'.join(propmt2))swot = jinaai.decide(    recommendation['output'],    { 'analysis': 'swot' })banners = jinaai.imagine(    *[desc['output'] for i, desc in enumerate(descriptions['results'])])```## Raw OutputYou can retrieve the raw output of each APIs by passing `raw: True` in the options:```pythondescriptions = jinaai.describe(    'https://picsum.photos/200',    { 'raw': True })print(descriptions['raw'])```## API Documentation### JinaAi.describe```pythonoutput = JinaAI.describe(input, options)```- Input&gt;| VARIABLE                              | TYPE              | VALUE &gt;|---------------------------------------|-------------------|----------&gt;| input                                 | str / str array   | Image URL or Base64- Options&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| options                                | dict              | &gt;| options['algorithm']                   | None / str        | Aqua / Bolt / Comet / Dune / Ember / Flash&gt;| options['features']                    | None / str array  | high_quality, question_answer, tts, opt-out&gt;| options['languages']                   | None / str array  | en, cn, de, fr, it...&gt;| options['question']                    | None / str        | Question related to the picture(s)&gt;| options['style']                       | None / str        | default / concise / prompt- Output&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| output                                 | dict              | &gt;| output['results']                      | dict array        | &gt;| results[0]['output']                   | str               | The picture description&gt;| results[0]['i18n']                     | dict              | Contains one key for each item in languages&gt;| ...i18n['cn']                          | str               | The translated picture description&lt;br/&gt;### JinaAi.optimize```pythonoutput = JinaAI.optimize(input, options)```- Input&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| input                                  | str / str array   | Image URL or Base64 / prompt to optimize- Options&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| options                                | dict              | &gt;| options['targetModel']                 | None / str        | chatgpt / gpt-4 / stablelm-tuned-alpha-7b / claude / cogenerate / text-davinci-003 / dalle / sd / midjourney / kandinsky / lexica&gt;| options['features']                    | None / str array  | preview, no_spam, shorten, bypass_ethics, same_language, always_en, high_quality, redo_original_image, variable_subs, template_run&gt;| options['iterations']                  | None / number     | Default: 1&gt;| options['previewSettings']             | None / dict       | Contains the settings for the preview&gt;| ...previewSettings['temperature']      | number            | Example: 0.9&gt;| ...previewSettings['topP']             | number            | Example: 0.9&gt;| ...previewSettings['topK']             | number            | Example: 0&gt;| ...previewSettings['frequencyPenalty'] | number            | Example: 0&gt;| ...previewSettings['presencePenalty']  | number            | Example: 0&gt;| options['previewVariables']            | None / dict       | Contains one key for each variables in the prompt&gt;| ...previewVariables['var1']            | str               | The value of the variable&gt;| options['timeout']                     | Number            | Default: 20000&gt;| options['target_language']             | None / str        | en / cn / de / fr / it...- Output&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| output                                 | dict              | &gt;| output['results']                      | dict array        | &gt;| results[0]['output']                   | str               | The optimized prompt&lt;br/&gt;### JinaAi.decide```pythonoutput = JinaAI.decide(input, options)```- Input&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| input                                  | str / str array   | Decision to evaluate- Options&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| options                                | dict              | &gt;| options['analysis']                    | None / str        | proscons / swot / multichoice / outcomes&gt;| options['style']                       | None / str        | concise / professional / humor / sarcastic / childish / genZ&gt;| options['profileId']                   | None / str        | The id of the Personas you want to use- Output&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| output                                 | dict              | &gt;| output['results']                      | dict array        | &gt;| results[0]['proscons']                 | None / dict       |&gt;| ...proscons['pros']                    | dict              | Contains one key for each pros&gt;| ...proscons['pros']['pros1']           | str               | The explanation of the pros&gt;| ...proscons['cons']                    | dict              | Contains one key for each cons&gt;| ...proscons['cons']['cons1']           | str               | The explanation of the cons&gt;| ...proscons['bestChoice']              | str               | &gt;| ...proscons['conclusion']              | str               | &gt;| ...proscons['confidenceScore']         | number            | &gt;| results[0]['swot']                     | None / dict       |&gt;| ...swot['strengths']                   | dict              | Contains one key for each strength&gt;| ...swot['strengths']['str1']           | str               | The explanation of the strength&gt;| ...swot['weaknesses']                  | dict              | Contains one key for each weakness&gt;| ...swot['weaknesses']['weak1']         | str               | The explanation of the weakness&gt;| ...swot['opportunities']               | dict              | Contains one key for each opportunity&gt;| ...swot['opportunities']['opp1']       | str               | The explanation of the opportunity&gt;| ...swot['threats']                     | dict              | Contains one key for each threat&gt;| ...swot['threats']['thre1']            | str               | The explanation of the threat&gt;| ...swot['bestChoice']                  | str               | &gt;| ...swot['conclusion']                  | str               | &gt;| ...swot['confidenceScore']             | number            | &gt;| results[0]['multichoice']              | None / dict       | Contains one key for each choice&gt;| ...multichoice['choice1']              | str               | The value of the choice&gt;| results[0]['outcomes']                 | None / dict array |&gt;| ...outcomes[0]['children']             | None / dict array | a recursive array of results['outcomes']&gt;| ...outcomes[0]['label']                | str               | &gt;| ...outcomes[0]['sentiment']            | str               | &lt;br/&gt;### JinaAi.generate```pythonoutput = JinaAI.generate(input, options)```- Input&gt;| VARIABLE                               | TYPE                   | VALUE &gt;|----------------------------------------|------------------------|----------&gt;| input                                  | str / str array        | Image URL or Base64 / prompt- Options&gt;| VARIABLE                               | TYPE                   | VALUE &gt;|----------------------------------------|------------------------|----------&gt;| options                                | dict                   | &gt;| options['role']                        | None / str             | user / assistant&gt;| options['name']                        | None / str             | The name of the author of this message&gt;| options['chatId']                      | None / str             | The id of the conversation to continue&gt;| options['stream']                      | None / boolean         | Whether to stream back partial progress, Default: false&gt;| options['temperature']                 | None / number          | Default: 1&gt;| options['top_p']                       | None / str             | Default: 1&gt;| options['stop']                        | None / str / str array | Up to 4 sequences where the API will stop generating further tokens&gt;| options['max_tokens']                  | None / number          | Default: infinite&gt;| options['presence_penalty']            | None / number          | Number between -2.0 and 2.0, Default: 0&gt;| options['frequency_penalty']           | None / number          | Number between -2.0 and 2.0, Default: 0&gt;| options['logit_bias']                  | None / dict            | The likelihood for a token to appear in the completion&gt;| ...logit_bias['tokenId']               | number                 | Bias value from -100 to 100&gt;| options['image']                       | str                    | The attached image of the message. The image can be either a URL or a base64-encoded string- Output&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| output                                 | dict              | &gt;| output['output']                       | str               | The generated answer&gt;| output['chatId']                       | str               | The chatId to continue the conversation&lt;br/&gt;### JinaAi.imagine```pythonoutput = JinaAI.imagine(input, options)```- Input&gt;| VARIABLE                               | TYPE                   | VALUE &gt;|----------------------------------------|------------------------|----------&gt;| input                                  | str / str array        | Prompt- Options&gt;No options available- Output&gt;| VARIABLE                               | TYPE              | VALUE &gt;|----------------------------------------|-------------------|----------&gt;| output                                 | dict              | &gt;| output['results']                      | dict array        |&gt;| results[0]['output']                   | array             | array of 4 image urls&lt;br/&gt;### JinaAi.utils```pythonoutout = JinaAI.utils.image_to_base64(input)```&gt;| VARIABLE                              | TYPE              | VALUE &gt;|---------------------------------------|-------------------|----------&gt;| input                                 | str               | Image path on disk&gt;| output                                | str               | Base64 image```pythonoutout = JinaAI.utils.is_url(input)```&gt;| VARIABLE                              | TYPE              | VALUE &gt;|---------------------------------------|-------------------|----------&gt;| input                                 | str               | &gt;| output                                | boolean           | ```pythonoutout = JinaAI.utils.is_base64(input)```&gt;| VARIABLE                              | TYPE              | VALUE &gt;|---------------------------------------|-------------------|----------&gt;| input                                 | str               | &gt;| output                                | boolean           | </longdescription>
</pkgmetadata>