<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;br /&gt;&lt;br /&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/mixxorz/DSLR&quot;&gt;    &lt;img width=&quot;281&quot; height=&quot;84&quot; src=&quot;https://user-images.githubusercontent.com/3102758/181914025-44bff27e-aac1-4d1b-a037-9fa98f9fed65.png&quot; alt=&quot;The DSLR logo&quot;&gt;  &lt;/a&gt;&lt;/p&gt;&lt;br /&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://badge.fury.io/py/dslr&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/dslr.svg&quot; alt=&quot;PyPI version&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/dslr/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/dslr.svg&quot; alt=&quot;PyPI Supported Python Versions&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/mixxorz/dslr&quot;&gt;&lt;img src=&quot;https://github.com/mixxorz/dslr/actions/workflows/tests.yml/badge.svg&quot; alt=&quot;GitHub Actions (Code quality and tests)&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://user-images.githubusercontent.com/3102758/190845105-dd2ec4e6-286b-431d-a33d-490805852b68.png&quot; alt=&quot;A terminal showing DSLR's command line interface.&quot;&gt;&lt;/p&gt;---Database Snapshot, List, and RestoreTake lightning fast snapshots of your local Postgres databases.## What is this?DSLR is a tool that allows you to quickly take and restore database snapshotswhen you're writing database migrations, switching branches, or messing withSQL.It's meant to be a spiritual successor to[Stellar](https://github.com/fastmonkeys/stellar).**Important:** DSLR is intended for development use only. It is not advisable touse DSLR on production databases.## PerformanceDSLR is much faster than the standard `pg_dump`/`pg_restore` approach to snapshots.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://user-images.githubusercontent.com/3102758/182014327-1b13da6e-63ad-4bbe-817e-7d6c66befc98.png&quot; alt=&quot;A chart comparing the execution time between DSLR and pg_dump/pg_restore. For snapshot and restore, DSLR took 4.125 seconds and 4.431 seconds respectively. pg_dump/pg_restore took 36.602 seconds and 13.257 seconds respectively.&quot;&gt;&lt;/p&gt;DSLR is 8x faster at taking snapshots and 3x faster at restoring snapshots compared to the `pg_dump`/`pg_restore` approach.&lt;details&gt;  &lt;summary&gt;Testing methodology&lt;/summary&gt;    I spun up Postgres 12.3 using Docker, created a test database, and filled it with 1GB of random data using this script:    ```SQL  CREATE TABLE large_test (num1 bigint, num2 double precision, num3 double precision);INSERT INTO large*test (num1, num2, num3)SELECT round(random() * 10), random(), random() \_ 142FROM generate_series(1, 20000000) s(i);```I used the following commands to measure the execution time:```time dslr snapshot my-snapshottime dslr restore my-snapshottime pg_dump -Fc -f export.dumptime pg_restore --no-acl --no-owner export.dump```I ran each command three times and plotted the mean in the chart.Here's the raw data:| Command       | Run | Execution time (seconds) || ------------- | --- | ------------------------ || dslr snapshot | 1   | 4.797                    ||               | 2   | 4.650                    ||               | 3   | 2.927                    || dslr restore  | 1   | 5.840                    ||               | 2   | 4.122                    ||               | 3   | 3.331                    || pg_dump       | 1   | 37.345                   ||               | 2   | 36.227                   ||               | 3   | 36.233                   || pg_restore    | 1   | 13.304                   ||               | 2   | 13.148                   ||               | 3   | 13.320                   |&lt;/details&gt;## Install```pip install DSLR psycopg2 # or psycopg2-binary```**Install using pipx**```pipx install DSLR[psycopg2] # or psycopg2-binary````Note: The DSLR `export` and `import` snapshot commands require `pg_dump` and`pg_restore` to be present in your `PATH`, so you will need the Postgres CLIutilities if you want to use those commands.&lt;details&gt;  &lt;summary&gt;&lt;strong&gt;Shell completion&lt;/strong&gt;&lt;/summary&gt;**Bash**Add this to `~/.bashrc`:```eval &quot;$(_DSLR_COMPLETE=bash_source dslr)&quot;```**Zsh**Add this to `~/.zshrc`:```eval &quot;$(_DSLR_COMPLETE=zsh_source dslr)&quot;```**Fish**Add this to `~/.config/fish/completions/dslr.fish`:```eval (env _DSLR_COMPLETE=fish_source dslr)```This is the same file used for the activation script method below. For Fish it’s probably always easier to use that method.Using eval means that the command is invoked and evaluated every time a shell is started, which can delay shell responsiveness. To speed it up, write the generated script to a file, then source that.**Bash**Save the script somewhere.```_DSLR_COMPLETE=bash_source dslr &gt; ~/.dslr-complete.bash```Source the file in ~/.bashrc.```. ~/.dslr-complete.bash```**Zsh**Save the script somewhere.```_DSLR_COMPLETE=zsh_source dslr &gt; ~/.dslr-complete.zsh```Source the file in ~/.zshrc.```. ~/.dslr-complete.zsh```**Fish**Save the script to ~/.config/fish/completions/foo-bar.fish:```_DSLR_COMPLETE=fish_source dslr &gt; ~/.config/fish/completions/dslr.fish```&lt;/details&gt;## ConfigurationYou can tell DSLR which database to take snapshots of in a few ways:**DATABASE_URL**If the `DATABASE_URL` environment variable is set, DSLR will use this to connectto your target database.```bashexport DATABASE_URL=postgres://username:password@host:port/database_name````**dslr.toml**If a `dslr.toml` file exists in the current directory, DSLR will read itssettings from there. DSLR will prefer this over the environment variable.```tomlurl = 'postgres://username:password@host:port/database_name'```**`--url` option**Finally, you can explicitly pass the connection string via the `--url` option.This will override any of the above settings.## Usage```$ dslr snapshot my-first-snapshotCreated new snapshot my-first-snapshot$ dslr restore my-first-snapshotRestored database from snapshot my-first-snapshot$ dslr list  Name                Created            Size ─────────────────────────────────────────────  my-first-snapshot   2 minutes ago   3253 kB$ dslr rename my-first-snapshot fresh-dbRenamed snapshot my-first-snapshot to fresh-db$ dslr delete some-old-snapshotDeleted some-old-snapshot$ dslr export my-feature-testExported snapshot my-feature-test to my-feature-test_20220730-075650.dump$ dslr import snapshot-from-a-friend_20220730-080632.dump friend-snapshotImported snapshot friend-snapshot from snapshot-from-a-friend_20220730-080632.dump```## How does it work?DSLR takes snapshots by cloning databases using Postgres' [TemplateDatabases](https://www.postgresql.org/docs/current/manage-ag-templatedbs.html)functionality. This is the main source of DSLR's speed.This means that taking a snapshot is just creating a new database using the maindatabase as the template. Restoring a snapshot is just deleting the maindatabase and creating a new database using the snapshot database as thetemplate. So on and so forth.## Contributors[![Contributors](https://contrib.rocks/image?repo=mixxorz/DSLR)](https://github.com/mixxorz/DSLR/graphs/contributors)## LicenseMIT</longdescription>
</pkgmetadata>