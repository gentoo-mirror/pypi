<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============jpegtran-cffi=============.. image:: https://travis-ci.org/jbaiter/jpegtran-cffi.png?branch=master   :target: https://travis-ci.org/jbaiter/jpegtran-cffi   :alt: Build statusjpegtran-cffi is a Python package for fast JPEG transformations.  Compared toother, more general purpose image processing libraries like `wand-py`_  or`PIL/Pillow`_, transformations are generally more than twice as fast (see`Benchmarks`_). In addition, all operations except for scaling are lossless,since the image is not being re-compressed in the process. This is due to thefact that all transformation operations work directly with the JPEG data.This is achieved by using multiple C routines from the Enlightenment project's`epeg library`_ (for scaling) and *jpegtran* from the Independent JPEG Group's`libjpeg`_ library (for all other operations). These routines are called fromPython through the `CFFI`_ module, i.e. no external processes are launched.The package also includes rudimentary support for getting and setting the EXIForientation tag, automatically transforming the image according to it andobtaining the JFIF thumbnail image.jpegtran-cffi was developed as part of a web interface for the `spreads`_project, where a large number of images from digital cameras had to be preparedfor display by a Raspberry Pi. With the Pi's rather slow ARMv6 processor, bothWand and PIL were too slow to be usable... _wand-py: http://wand-py.org.. _PIL/PIllow: http://pillow.readthedocs.org.. _Benchmarks: http://jpegtran-cffi.readthedocs.org/en/latest/#benchmarks.. _epeg library: https://github.com/mattes/epeg.. _libjpeg: http://en.wikipedia.org/wiki/Libjpeg.. _CFFI: http://cffi.readthedocs.orgs.. _spreads: http://spreads.readthedocs.orgRequirements============- CPython 2.6, 2.7, 3.3 or PyPy- cffi- libjpeg8 with headers (earlier versions will not work)Installation============::    $ pip install jpegtran-cffiUsage=====::    from jpegtran import JPEGImage    img = JPEGImage('image.jpg')    # JPEGImage can also be initialized from a bytestring    blob = requests.get(&quot;http://example.com/image.jpg&quot;).content    from_blob = JPEGImage(blob=blob)    # Reading various image parameters    print img.width, img.height  # &quot;640 480&quot;    print img.exif_orientation  # &quot;1&quot; (= &quot;normal&quot;)    # If present, the JFIF thumbnail can be obtained as a bytestring    thumb = img.exif_thumbnail    # Transforming the image    img.scale(320, 240).save('scaled.jpg')    img.rotate(90).save('rotated.jpg')    img.crop(0, 0, 100, 100).save('cropped.jpg')    # Transformations can be chained    data = (img.scale(320, 240)                .rotate(90)                .flip('horizontal')                .as_blob())    # jpegtran can transform the image automatically according to the EXIF    # orientation tag    photo = JPEGImage(blob=requests.get(&quot;http://example.com/photo.jpg&quot;).content)    print photo.exif_orientation  # &quot;6&quot; (= 270Â°)    print photo.width, photo.height # &quot;4320 3240&quot;    corrected = photo.exif_autotransform()    print corrected.exif_orientation  # &quot;1&quot; (= &quot;normal&quot;)    print corrected.width, corrected.height  # &quot;3240 4320&quot;For more details, refer to the `API Reference`_... _API Reference: http://jpegtran-cffi.readthedocs.org/en/latest/#api-referenceBenchmarks==========All operations were done on a 3.4GHz i7-3770 with 16GiB of RAM and a 7200rpmHDD with the following 2560x1920 8bit RGB JPEG:http://upload.wikimedia.org/wikipedia/commons/8/82/Mandel_zoom_05_tail_part.jpg.. figure:: http://jpegtran-cffi.readthedocs.org/en/latest/_images/benchmark.png    Both wand-py and PIL were run with the fastest scaling algorithm available,    for wand-py this meant using ``Image.sample`` instead of ``Image.resize``    and for PIL the nearest-neighbour filter was used for the ``Image.resize``    call.    Benchmark source: https://gist.github.com/jbaiter/8596064License=======The MIT License (MIT)Copyright (c) 2014 Johannes Baiter &lt;johannes.baiter@gmail.com&gt;Permission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the &quot;Software&quot;), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copiesof the Software, and to permit persons to whom the Software is furnished to doso, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</longdescription>
</pkgmetadata>