<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mimeo (Mimeograph)[![License](https://img.shields.io/github/license/TomaszAniolowski/mimeo?label=License&amp;style=plastic)](https://github.com/TomaszAniolowski/mimeo/blob/develop/LICENSE)[![Version](https://img.shields.io/pypi/v/mimeograph?color=blue&amp;label=PyPI&amp;style=plastic)](https://pypi.org/project/mimeograph/)[![Python](https://img.shields.io/pypi/pyversions/mimeograph?label=Python&amp;style=plastic)](https://www.python.org/)  [![Build](https://img.shields.io/github/actions/workflow/status/TomaszAniolowski/mimeo/test.yml?color=brightgreen&amp;label=Test%20Mimeo&amp;style=plastic)](https://github.com/TomaszAniolowski/mimeo/actions/workflows/test.yml?query=branch%3Amain)[![Code Coverage](https://img.shields.io/badge/Code%20Coverage-100%25-brightgreen?style=plastic)](https://github.com/TomaszAniolowski/mimeo/actions/workflows/coverage_badge.yml?query=branch%3Amain)[Mimeo](https://github.com/TomaszAniolowski/mimeo) is a command line tool and a python library generating NoSQL data based on a template.It can be used by developers, testers or business analysts in their daily work.## InstallationInstall Mimeo with pip```shpip install mimeograph```## Usage/Examples### Mimeo ConfigurationPrepare Mimeo Configuration first&lt;table&gt;    &lt;tr&gt;        &lt;th&gt;JSON&lt;/th&gt;        &lt;th&gt;XML&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td valign=&quot;top&quot;&gt;```json{  &quot;_templates_&quot;: [    {      &quot;count&quot;: 30,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;@xmlns&quot;: &quot;http://mimeo.arch.com/default-namespace&quot;,          &quot;@xmlns:pn&quot;: &quot;http://mimeo.arch.com/prefixed-namespace&quot;,          &quot;ChildNode1&quot;: 1,          &quot;ChildNode2&quot;: &quot;value-2&quot;,          &quot;ChildNode3&quot;: true        }      }    }  ]}```&lt;/td&gt;        &lt;td valign=&quot;top&quot;&gt;```xml&lt;mimeo_configuration&gt;    &lt;_templates_&gt;        &lt;_template_&gt;            &lt;count&gt;30&lt;/count&gt;            &lt;model&gt;                &lt;SomeEntity                    xmlns=&quot;http://mimeo.arch.com/default-namespace&quot;                    xmlns:pn=&quot;http://mimeo.arch.com/prefixed-namespace&quot;&gt;                    &lt;ChildNode1&gt;1&lt;/ChildNode1&gt;                    &lt;pn:ChildNode2&gt;value-2&lt;/pn:ChildNode2&gt;                    &lt;ChildNode3&gt;true&lt;/ChildNode3&gt;                &lt;/SomeEntity&gt;            &lt;/model&gt;        &lt;/_template_&gt;    &lt;/_templates_&gt;&lt;/mimeo_configuration&gt;```&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;_You can find more configuration examples in the `examples` folder._### Data generationThe Mimeo Configuration above will produce 2 files:```xml&lt;!-- mimeo-output/mimeo-output-1.xml--&gt;&lt;SomeEntity xmlns=&quot;http://mimeo.arch.com/default-namespace&quot; xmlns:pn=&quot;http://mimeo.arch.com/prefixed-namespace&quot;&gt;    &lt;ChildNode1&gt;1&lt;/ChildNode1&gt;    &lt;pn:ChildNode2&gt;value-2&lt;/pn:ChildNode2&gt;    &lt;ChildNode3&gt;true&lt;/ChildNode3&gt;&lt;/SomeEntity&gt;``````xml&lt;!-- mimeo-output/mimeo-output-2.xml--&gt;&lt;SomeEntity xmlns=&quot;http://mimeo.arch.com/default-namespace&quot; xmlns:pn=&quot;http://mimeo.arch.com/prefixed-namespace&quot;&gt;    &lt;ChildNode1&gt;1&lt;/ChildNode1&gt;    &lt;pn:ChildNode2&gt;value-2&lt;/pn:ChildNode2&gt;    &lt;ChildNode3&gt;true&lt;/ChildNode3&gt;&lt;/SomeEntity&gt;```When we would configure output format as `json` then it would produce JSON nodes:```json{  &quot;SomeEntity&quot;: {    &quot;@xmlns&quot;: &quot;http://mimeo.arch.com/default-namespace&quot;,    &quot;@xmlns:pn&quot;: &quot;http://mimeo.arch.com/prefixed-namespace&quot;,    &quot;ChildNode1&quot;: 1,    &quot;pn:ChildNode2&quot;: &quot;value-2&quot;,    &quot;ChildNode3&quot;: true  }}``````json{  &quot;SomeEntity&quot;: {    &quot;@xmlns&quot;: &quot;http://mimeo.arch.com/default-namespace&quot;,    &quot;@xmlns:pn&quot;: &quot;http://mimeo.arch.com/prefixed-namespace&quot;,    &quot;ChildNode1&quot;: 1,    &quot;pn:ChildNode2&quot;: &quot;value-2&quot;,    &quot;ChildNode3&quot;: true  }}``````shmimeo SomeEntity-config.jsonmimeo SomeEntity-config.xml```### Mimeo UtilsMimeo exposes several functions for data generation that will make it more useful for testing purposes.To see all Mimeo Utils, go to the documentation below.**Template**```json{  &quot;count&quot;: 2,  &quot;model&quot;: {    &quot;SomeEntity&quot;: {      &quot;id&quot;: &quot;{auto_increment}&quot;,      &quot;randomstring&quot;: &quot;{random_str}&quot;,      &quot;randomint&quot;: &quot;{random_int}&quot;    }  }}``````xml&lt;_template_&gt;    &lt;count&gt;2&lt;/count&gt;    &lt;model&gt;                &lt;SomeEntity&gt;            &lt;id&gt;{auto_increment}&lt;/id&gt;            &lt;randomstring&gt;{random_str}&lt;/randomstring&gt;            &lt;randomint&gt;{random_int}&lt;/randomint&gt;        &lt;/SomeEntity&gt;            &lt;/model&gt;&lt;/_template_&gt;```**XML Data**```xml&lt;SomeEntity&gt;    &lt;id&gt;00001&lt;/id&gt;    &lt;randomstring&gt;mCApsYZprayYkmKnYWxe&lt;/randomstring&gt;    &lt;randomint&gt;8&lt;/randomint&gt;&lt;/SomeEntity&gt;``````xml&lt;SomeEntity&gt;    &lt;id&gt;00002&lt;/id&gt;    &lt;randomstring&gt;ceaPUqARUkFukZIPeuqO&lt;/randomstring&gt;    &lt;randomint&gt;99&lt;/randomint&gt;&lt;/SomeEntity&gt;```**JSON Data**```json{  &quot;SomeEntity&quot;: {    &quot;id&quot;: &quot;00001&quot;,    &quot;randomstring&quot;: &quot;mCApsYZprayYkmKnYWxe&quot;,    &quot;randomint&quot;: 8  }}``````json{  &quot;SomeEntity&quot;: {    &quot;id&quot;: &quot;00002&quot;,    &quot;randomstring&quot;: &quot;ceaPUqARUkFukZIPeuqO&quot;,    &quot;randomint&quot;: 99  }}```## Documentation### Mimeo CLI#### Mimeo Configuration argumentsWhen using Mimeo command line tool you can overwrite Mimeo Configuration properties:| Short option | Long option         | Description                                                                    ||:------------:|:--------------------|:-------------------------------------------------------------------------------||     `-F`     | `--format`          | overwrite the `output/format` property                                         ||     `-o`     | `--output`          | overwrite the `output/direction` property                                      ||     `-x`     | `--xml-declaration` | overwrite the `output/xml_declaration` property                                ||     `-i`     | `--indent`          | overwrite the `output/indent` property                                         ||     `-d`     | `--directory`       | overwrite the `output/directory_path` property                                 ||     `-f`     | `--file`            | overwrite the `output/file_name` property                                      ||     `-H`     | `--http-host`       | overwrite the `output/host` property                                           ||     `-p`     | `--http-port`       | overwrite the `output/port` property                                           ||     `-E`     | `--http-endpoint`   | overwrite the `output/endpoint` property                                       ||     `-U`     | `--http-user`       | overwrite the `output/username` property                                       ||     `-P`     | `--http-password`   | overwrite the `output/password` property                                       ||              | `--http-method`     | overwrite the `output/method` property                                         ||              | `--http-protocol`   | overwrite the `output/protocol` property                                       ||     `-e`     | `--http-env`        | overwrite the output http properties using a mimeo env configuration           ||              | `--http-envs-file`  | use a custom environments file (by default: mimeo.envs.json)                   ||              | `--raw`             | same as `-o stdout`&lt;br /&gt;overwrite the `output/direction` property to `stdout` |#### Logging arguments| Short option | Long option | Description       ||:------------:|:------------|:------------------||              | `--silent`  | disable INFO logs ||              | `--debug`   | enable DEBUG mode ||              | `--fine`    | enable FINE mode  |#### Other arguments| Short option | Long option      | Description                                     ||:------------:|:-----------------|:------------------------------------------------||              | `--sequentially` | process Mimeo Configurations in a single thread |### Mimeo ConfigurationMimeo configuration is defined in a JSON file using internal settings and data templates.| Key                      |  Level   |      Required      |     Supported values     |    Default     | Description                                                                                                                                             ||:-------------------------|:--------:|:------------------:|:------------------------:|:--------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------|| `output`                 |  Config  |        :x:         |          object          |      ---       | Defines output details on how it will be consumed                                                                                                       || `output/direction`       |  Config  |        :x:         | `file`, `stdout`, `http` |     `file`     | Defines how output will be consumed                                                                                                                     || `output/format`          |  Config  |        :x:         |      `xml`, `json`       |     `xml`      | Defines output data format                                                                                                                              || `output/indent`          |  Config  |        :x:         |         integer          |     `null`     | Defines indent applied in output data                                                                                                                   || `output/xml_declaration` |  Config  |        :x:         |         boolean          |    `false`     | Indicates whether an xml declaration should be added to output data                                                                                     || `output/directory_path`  |  Config  |        :x:         |          string          | `mimeo-output` | For `file` direction - defines an output directory                                                                                                      || `output/file_name`       |  Config  |        :x:         |          string          | `mimeo-output` | For `file` direction - defines an output file name                                                                                                      || `output/method`          |  Config  |        :x:         |      `POST`, `PUT`       |     `POST`     | For `http` direction - defines a request method                                                                                                         || `output/protocol`        |  Config  |        :x:         |     `http`, `https`      |     `http`     | For `http` direction - defines a url protocol                                                                                                           || `output/host`            |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a url host                                                                                                               || `output/port`            |  Config  |        :x:         |         integer          |     `null`     | For `http` direction - defines a url port (can be empty)                                                                                                || `output/endpoint`        |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a url endpoint                                                                                                           || `output/username`        |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a username                                                                                                               || `output/password`        |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a password                                                                                                               || `vars`                   |  Config  |        :x:         |          object          |      ---       | Defines variables to be used in a Mimeo Template (read more in next section)                                                                            || `_templates_`            |  Config  | :heavy_check_mark: |          array           |      ---       | Stores templates for data generation                                                                                                                    || `count`                  | Template | :heavy_check_mark: |         integer          |      ---       | Indicates number of copies                                                                                                                              || `model`                  | Template | :heavy_check_mark: |          object          |      ---       | Defines data template to be copied                                                                                                                      || `context`                |  Model   |        :x:         |          object          |      ---       | Defines a context name that is internally used e.g. using `curr_iter()` and `get_key()` mimeo utils (by default model name is used as the context name) |#### Mimeo EnvironmentTo make `http` output directory easier to use, mimeo allows you to configure Mimeo Environments.They are configured in a JSON file (by default: mimeo.envs.json) and support the following output details:- `protocol`- `host`- `port`- `username`- `password`Example```json{    &quot;local&quot;: {        &quot;host&quot;: &quot;localhost&quot;,        &quot;port&quot;: 8000,        &quot;username&quot;: &quot;admin&quot;,        &quot;password&quot;: &quot;admin&quot;    },    &quot;dev&quot;: {        &quot;protocol&quot;: &quot;https&quot;,        &quot;host&quot;: &quot;11.111.11.111&quot;,        &quot;port&quot;: 8000,        &quot;username&quot;: &quot;some-user&quot;,        &quot;password&quot;: &quot;some-password&quot;    }}```To use a specific Mimeo Environment you can use the following commands:```shmimeo SomeEntity-config.json -e devmimeo SomeEntity-config.json -e dev --http-envs-file environments.json```#### Mimeo VarsMimeo allows you to define a list of variables.You can use them in your Mimeo Config by wrapping them in curly brackets [`{VARIABLE}`].There are only 2 rules for variable names:- Variable name can include upper-cased letters \[`A-Z`\], underscore \[`_`\] and digits \{`0-9`\} only- Variable name must start with a letterVariable can be defined with:- any atomic value- any other variable defined- any Mimeo UtilYou can use Mimeo Vars as partial values (unless they are defined as Mimeo Utils).Example:```json{  &quot;vars&quot;: {    &quot;CUSTOM_VAR_1&quot;: &quot;custom-value-1&quot;,    &quot;CUSTOM_VAR_2&quot;: 1,    &quot;CUSTOM_VAR_3&quot;: true,    &quot;CUSTOM_VAR_4&quot;: &quot;{CUSTOM_VAR_2}&quot;,    &quot;CUSTOM_VAR_5&quot;: &quot;{auto_increment}&quot;,    &quot;CUSTOM_VAR_6&quot;: {      &quot;_mimeo_util&quot;: {        &quot;_name&quot;: &quot;random_int&quot;,        &quot;limit&quot;: 99      }    }  },  &quot;_templates_&quot;: [    {      &quot;count&quot;: 5,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;ChildNode1&quot;: &quot;{CUSTOM_VAR_1}&quot;,          &quot;ChildNode2&quot;: &quot;{CUSTOM_VAR_2}&quot;,          &quot;ChildNode3&quot;: &quot;{CUSTOM_VAR_3}&quot;,          &quot;ChildNode4&quot;: &quot;{CUSTOM_VAR_4}&quot;,          &quot;ChildNode5&quot;: &quot;{CUSTOM_VAR_5}&quot;,          &quot;ChildNode6&quot;: &quot;{CUSTOM_VAR_6}&quot;,          &quot;ChildNode7&quot;: &quot;{CUSTOM_VAR_1}-with-suffix&quot;        }      }    }  ]}```#### Mimeo Special FieldsIn Mimeo Template you can use so-called _special fields_.Every field in a template can be stored in memory (_provided_) and used later as a value of other fields (_injected_).To provide a special field, wrap its name with colons: [`:SomeField:`]. To inject, use additionally curly braces tolet interpreter know it should be rendered [`{:SomeField:}`].They can be injected as partial values, similarly to Mimeo Vars.Example```json{  &quot;_templates_&quot;: [    {      &quot;count&quot;: 5,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;:ChildNode1:&quot;: &quot;custom-value&quot;,          &quot;ChildNode2&quot;: &quot;{:ChildNode1:}&quot;,          &quot;ChildNode3&quot;: &quot;{:ChildNode1:}-with-suffix&quot;        }      }    }  ]}```#### Mimeo UtilsYou can use several predefined functions to generate data. They can be used in a _raw_ format or _parametrized_.##### Random StringGenerates a random string value.| Parameter | Supported values | Default ||:---------:|:----------------:|:-------:||  length   |      `int`       |  `20`   |###### RawUses the default length: 20 characters.```json{  &quot;randomstring&quot;: &quot;{random_str}&quot;}```###### ParametrizedUses the customized length.```json{  &quot;randomstring&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_str&quot;,      &quot;length&quot;: 5    }  }}```##### Random IntegerGenerates a random integer value between `start` and `limit` parameters (inclusive).| Parameter | Supported values | Default ||:---------:|:----------------:|:-------:||   start   |      `int`       |   `1`   ||   limit   |      `int`       |  `100`  |###### RawUses the default start (1) and limit (100) values.```json{  &quot;randominteger&quot;: &quot;{random_int}&quot;}```###### ParametrizedUses the customized limit.```json{  &quot;randominteger1&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_int&quot;,      &quot;start&quot;: 0    }  },  &quot;randominteger2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_int&quot;,      &quot;limit&quot;: 5    }  },  &quot;randominteger3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_int&quot;,      &quot;start&quot;: 0,      &quot;limit&quot;: 5    }  }}```##### Random ItemGenerates a random value from items provided.  NOTICE: The raw form of this Mimeo Util will generate a blank string value (as same as no items parametrized).| Parameter | Supported values | Default ||:---------:|:----------------:|:-------:||   items   |      `list`      | `[&quot;&quot;]`  |###### Parametrized```json{  &quot;random&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;random_item&quot;,      &quot;items&quot;: [&quot;value&quot;, 1, true]    }  }}```##### DateGenerates a date value in format `YYYY-MM-DD`.| Parameter  | Supported values | Default ||:----------:|:----------------:|:-------:|| days_delta |      `int`       |   `0`   |###### RawUses the today's date.```json{  &quot;Today&quot;: &quot;{date}&quot;}```###### ParametrizedUses the customized days delta.```json{  &quot;Yesterday&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;date&quot;,      &quot;days_delta&quot;: -1    }  },  &quot;Tomorrow&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;date&quot;,      &quot;days_delta&quot;: 1    }  }}```##### Date TimeGenerates a date time value in format `YYYY-MM-DD'T'HH:mm:SS`.|   Parameter   | Supported values | Default ||:-------------:|:----------------:|:-------:||  days_delta   |      `int`       |   `0`   ||  hours_delta  |      `int`       |   `0`   || minutes_delta |      `int`       |   `0`   || seconds_delta |      `int`       |   `0`   |###### RawUses the current timestamp.```json{  &quot;Now&quot;: &quot;{date_time}&quot;}```###### ParametrizedUses the customized deltas.```json{  &quot;TomorrowThreeHoursLaterTwentyMinutesAgoTwoSecondsLater&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;date_time&quot;,      &quot;days_delta&quot;: 1,      &quot;hours_delta&quot;: 3,      &quot;minutes_delta&quot;: -20,      &quot;seconds_delta&quot;: 2    }  }}```##### Auto IncrementGenerates a next integer in context of a model (in nested templates it will use a separated context).| Parameter | Supported values | Default  ||:---------:|:----------------:|:--------:||  pattern  |      `str`       | `{:05d}` |###### RawUses a default pattern: **{:05d}** (an integer with 5 leading zeros).```json{  &quot;ID&quot;: &quot;{auto_increment}&quot;}```###### ParametrizedUses the string pattern provided.```json{  &quot;ID&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;auto_increment&quot;,      &quot;pattern&quot;: &quot;MY_ID_{:010d}&quot;    }  }}```##### Current IterationGenerates a value of the current iteration in a Mimeo Template context.| Parameter | Supported values |      Default      ||:---------:|:----------------:|:-----------------:||  context  |      `str`       | a current context |###### RawUses the current context.```json{  &quot;ID&quot;: &quot;{curr_iter}&quot;}```###### ParametrizedUses a specific Mimeo Model context (model name when `context` is not configured).```json{  &quot;Parent&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;curr_iter&quot;,      &quot;context&quot;: &quot;SomeEntity&quot;    }  }}```##### KeyGenerates a key unique across all Mimeo Models and being the same within a single Mimeo Model context.| Parameter | Supported values |              Default               ||:---------:|:----------------:|:----------------------------------:||  context  |      `str`       |         a current context          || iteration |      `int`       | a current iteration of the context |###### RawUses a key from the current context and iteration.```json{  &quot;ID&quot;: &quot;{key}&quot;}```###### ParametrizedUses a key from the specific context and iteration.  When context is indicated and iteration is not, then the current iteration **of the indicated context** is being used.```json{  &quot;SomeEntity2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;key&quot;,      &quot;context&quot;: &quot;SomeEntity&quot;,      &quot;iteration&quot;: &quot;{curr_iter}&quot;    }  }}```##### CityGenerates a city name.| Parameter | Supported values | Default ||:---------:|:----------------:|:-------:||  unique   |      `bool`      | `True`  ||  country  |      `str`       | `None`  |###### RawBy default city names will be unique across a Mimeo Context.```json{  &quot;City&quot;: &quot;{city}&quot;}```###### ParametrizedUses country (name, iso2, iso3) and `unique` flag to generate a city name.```json{  &quot;CityWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;unique&quot;: false    }  },  &quot;CityOfCountryName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;United Kingdom&quot;    }  },  &quot;CityOfCountryISO2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;GB&quot;    }  },  &quot;CityOfCountryISO3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;GBR&quot;    }  },  &quot;CityOfCountryWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;city&quot;,      &quot;country&quot;: &quot;United Kingdom&quot;,      &quot;unique&quot;: false    }  }}```##### CountryGenerates a country name (by default), iso2 or iso3.| Parameter |       Supported values       | Default  ||:---------:|:----------------------------:|:--------:||  unique   |            `bool`            |  `True`  ||   value   | `&quot;name&quot;`, `&quot;iso3&quot;`, `&quot;iso2&quot;` | `&quot;name&quot;` ||  country  |            `str`             |  `None`  |###### RawBy default country names will be unique across a Mimeo Context.```json{  &quot;Country&quot;: &quot;{country}&quot;}```###### ParametrizedIt can generate:- country iso3 or iso 2 instead of name- country with duplicates- country name for a provided iso3 or iso2- country iso2 for a provided name or iso3- country iso3 for a provided name or iso2When the `country` param is provided then the `unique` flag is ignored.```json{  &quot;CountryNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;unique&quot;: false    }  },  &quot;CountryISO2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;value&quot;: &quot;iso2&quot;    }  },  &quot;CountryISO3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;value&quot;: &quot;iso3&quot;    }  },  &quot;CountryNameForISO3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;country&quot;: &quot;GBR&quot;    }  },  &quot;CountryISO2ForName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;country&quot;,      &quot;value&quot;: &quot;iso2&quot;,      &quot;country&quot;: &quot;United Kingdom&quot;    }  }}```##### CurrencyGenerates a currency code (by default) or name.| Parameter |  Supported values  | Default  ||:---------:|:------------------:|:--------:||  unique   |       `bool`       | `False`  ||   value   | `&quot;code&quot;`, `&quot;name&quot;` | `&quot;code&quot;` ||  country  |       `str`        |  `None`  |###### RawBy default city names will _NOT_ be unique across a Mimeo Context.```json{  &quot;Currency&quot;: &quot;{currency}&quot;}```###### ParametrizedIt can generate:- unique currencies- currency name instead of code- currency code or name of a specific country (using iso3, iso2 or name)When the `country` param is provided then the `unique` flag is ignored.```json{  &quot;UniqueCurrencyCode&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;currency&quot;,      &quot;unique&quot;: true    }  },  &quot;CurrencyName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;currency&quot;,      &quot;value&quot;: &quot;name&quot;    }  },  &quot;CurrencyCodeForCountryISO3&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;currency&quot;,      &quot;country&quot;: &quot;GBR&quot;    }  },  &quot;CurrencyNameForCountryISO2&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;currency&quot;,      &quot;value&quot;: &quot;name&quot;,      &quot;country&quot;: &quot;GB&quot;    }  },  &quot;CurrencyNameForCountryName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;currency&quot;,      &quot;value&quot;: &quot;name&quot;,      &quot;country&quot;: &quot;United Kingdom&quot;    }  }}```##### First NameGenerates a first name.| Parameter |      Supported values      | Default  ||:---------:|:--------------------------:|:--------:||  unique   |           `bool`           |  `True`  ||    sex    | `M`, `Male`, `F`, `Female` |  `None`  |###### RawBy default first names will be unique across a Mimeo Context.```json{  &quot;FirstName&quot;: &quot;{first_name}&quot;}```###### ParametrizedUses sex (`M` / `Male` / `F` / `Female`) and `unique` flag to generate a first name.```json{  &quot;FirstNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;unique&quot;: false    }  },  &quot;MaleFirstName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;sex&quot;: &quot;M&quot;    }  },  &quot;FemaleFirstName&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;sex&quot;: &quot;F&quot;    }  },  &quot;MaleFirstNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;first_name&quot;,      &quot;sex&quot;: &quot;M&quot;,      &quot;unique&quot;: false    }  }}```##### Last NameGenerates a last name.| Parameter | Supported values | Default  ||:---------:|:----------------:|:--------:||  unique   |      `bool`      |  `True`  |###### RawBy default last names will be unique across a Mimeo Context.```json{  &quot;LastName&quot;: &quot;{last_name}&quot;}```###### ParametrizedUses `unique` flag to generate a last name.```json{  &quot;LastNameWithDuplicates&quot;: {    &quot;_mimeo_util&quot;: {      &quot;_name&quot;: &quot;last_name&quot;,      &quot;unique&quot;: false    }  }}```### Python LibTo generate data using Mimeo as a python library you need 3 classes:* `MimeoConfig` (A python representation of a Mimeo Configuration)* `MimeoConfigFactory` (A factory parsing a Mimeo Configuration)* `Mimeograph` (a class generating and consuming data from a Mimeo Configuration)#### Parsing Mimeo Configuration##### `MimeoConfig`The `MimeoConfig` class takes a dictionary as a parameter and initializes all settings.```pythonfrom mimeo import MimeoConfigconfig = {  &quot;_templates_&quot;: [    {      &quot;count&quot;: 30,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;@xmlns&quot;: &quot;http://mimeo.arch.com/default-namespace&quot;,          &quot;@xmlns:pn&quot;: &quot;http://mimeo.arch.com/prefixed-namespace&quot;,          &quot;ChildNode1&quot;: 1,          &quot;ChildNode2&quot;: &quot;value-2&quot;,          &quot;ChildNode3&quot;: True        }      }    }  ]}mimeo_config = MimeoConfig(config)```##### `MimeoConfigFactory`To easily parse Mimeo Configuration you can use the `MimeoConfigFactory`.It allows you to provide a raw config as:* a dictionary* a stringified XML node* a file path&lt;table&gt;    &lt;tr&gt;        &lt;th&gt;&lt;/th&gt;        &lt;th&gt;JSON&lt;/th&gt;        &lt;th&gt;XML&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;Raw data&lt;/b&gt;&lt;/td&gt;        &lt;td valign=&quot;top&quot;&gt;```pythonfrom mimeo import MimeoConfigFactoryconfig = {  &quot;_templates_&quot;: [    {      &quot;count&quot;: 30,      &quot;model&quot;: {        &quot;SomeEntity&quot;: {          &quot;@xmlns&quot;: &quot;http://mimeo.arch.com/default-namespace&quot;,          &quot;@xmlns:pn&quot;: &quot;http://mimeo.arch.com/prefixed-namespace&quot;,          &quot;ChildNode1&quot;: 1,          &quot;ChildNode2&quot;: &quot;value-2&quot;,          &quot;ChildNode3&quot;: True        }      }    }  ]}mimeo_config = MimeoConfigFactory.parse(config)```&lt;/td&gt;    &lt;td valign=&quot;top&quot;&gt;```pythonfrom mimeo import MimeoConfigFactoryconfig = (    '&lt;mimeo_configuration&gt;'    '    &lt;_templates_&gt;'    '        &lt;_template_&gt;'    '            &lt;count&gt;30&lt;/count&gt;'    '            &lt;model&gt;'    ''    '                &lt;SomeEntity'    '                    xmlns=&quot;http://mimeo.arch.com/default-namespace&quot;'    '                    xmlns:pn=&quot;http://mimeo.arch.com/prefixed-namespace&quot;&gt;'    '                    &lt;ChildNode1&gt;1&lt;/ChildNode1&gt;'    '                    &lt;pn:ChildNode2&gt;value-2&lt;/pn:ChildNode2&gt;'    '                    &lt;ChildNode3&gt;true&lt;/ChildNode3&gt;'    '                &lt;/SomeEntity&gt;'    ''    '            &lt;/model&gt;'    '        &lt;/_template_&gt;'    '    &lt;/_templates_&gt;'    '&lt;/mimeo_configuration&gt;')mimeo_config = MimeoConfigFactory.parse(config)```&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;b&gt;File path&lt;/b&gt;&lt;/td&gt;        &lt;td valign=&quot;top&quot;&gt;```pythonfrom mimeo import MimeoConfigFactoryconfig = &quot;SomeEntity-config.json&quot;mimeo_config = MimeoConfigFactory.parse(config)```&lt;/td&gt;    &lt;td valign=&quot;top&quot;&gt;```pythonfrom mimeo import MimeoConfigFactoryconfig = &quot;SomeEntity-config.xml&quot;mimeo_config = MimeoConfigFactory.parse(config)```&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;#### Processing Mimeo ConfigurationUsing the Mimeo as a python library you can use 2 processing approaches:* sequential processing* processing in parallel (used by default in Mimeo CLI)Both need the `Mimeograph` class.##### Sequential processingSequential processing is pretty straightforward and can be done without `Mimeograph` instantiation.###### ProcessingTo simply process data from a Mimeo Configuration you can use the `Mimeograph.process()` method:```pythonfrom mimeo import MimeoConfigFactory, Mimeographconfig_path = &quot;examples/1-introduction/01-basic.json&quot;mimeo_config = MimeoConfigFactory.parse(config_path)Mimeograph.process(mimeo_config)```It will generate data and consume it immediately.###### Generating onlyIf you're going to generate data and use it as a python representation(`dict`, `xml.etree.ElementTree.Element`) - use `Mimeograph.generate()` method:```pythonfrom mimeo import MimeoConfigFactory, Mimeographconfig_path = &quot;examples/1-introduction/01-basic.json&quot;mimeo_config = MimeoConfigFactory.parse(config_path)data = Mimeograph.generate(mimeo_config)```###### Generating and consuming in 2 stagesIn case you would like to somehow modify generated data before it will be consumed,use `Mimeograph.generate()` and `Mimeograph.consume()` methods.```pythonfrom mimeo import MimeoConfigFactory, Mimeographconfig_path = &quot;examples/1-introduction/01-basic.json&quot;mimeo_config = MimeoConfigFactory.parse(config_path)data = Mimeograph.generate(mimeo_config)# ... your modifications ...Mimeograph.consume(mimeo_config, data)```##### Processing in parallelWhen you're going to process data (generate and consume) from several Mimeo Configurationsprocessing in parallel is more performant way. To do that, you need use the `Mimeograph` as a Context Managerand submit configs together with some kind of identifier (e.g. config path). Thanks to that you will knowwhich config has failed (if so).```pythonfrom mimeo import MimeoConfigFactory, Mimeographconfig_paths = [    &quot;examples/1-introduction/01-basic.json&quot;,    &quot;examples/1-introduction/02-complex.json&quot;,    &quot;examples/1-introduction/03-output-format-xml.json&quot;,    &quot;examples/1-introduction/04-output-format-json.json&quot;,]with Mimeograph() as mimeo:    for config_path in config_paths:        mimeo_config = MimeoConfigFactory.parse(config_path)        mimeo_config.output.direction = &quot;stdout&quot;        mimeo.submit((config_path, mimeo_config))```## LicenseMIT## Authors- [@TomaszAniolowski](https://www.github.com/TomaszAniolowski)## Acknowledgements - [SimpleMaps.com](https://simplemaps.com/data/world-cities) (Cities &amp; countries data) - [@hadley/data-baby-names](https://github.com/hadley/data-baby-names/) (Forenames data) - [@fivethirtyeigh/data/most-common-name](https://github.com/fivethirtyeight/data/tree/master/most-common-name) (Surnames data) - [@datasets/currency-codes](https://github.com/datasets/currency-codes/) (Currencies data)</longdescription>
</pkgmetadata>