<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyDeezerA package to search and download musics on [Deezer](https://www.deezer.com/en/).## Installation### Install from release```bashpip install py-deezer```### Install from repository```bashgit clone https://github.com/Chr1st-oo/pydeezer.gitcd pydeezerpip install .```## Usage as a CLI```bashUsage: pydeezer [OPTIONS] COMMAND [ARGS]...  PyDeezer CLIOptions:  --help  Show this message and exit.Commands:  download  Download tracks```#### Commands```bashUsage: pydeezer download [OPTIONS]  Download tracksOptions:  -a, --arl TEXT                  Used to be able to login to Deezer. Check                                  the docs on how to get one.  --media-type [Track|Album|Playlist|Artist]                                  Sets the media type and how it searches the                                  api.  -d, --download-dir DIRECTORY    Sets the directory on where the tracks are                                  to be saved.  -q, --quality [MP3_128|MP3_256|MP3_320|FLAC]                                  Sets the quality of the tracks. if the                                  provided quality is not supported, the                                  default quality of the track will be used.  --help                          Show this message and exit.```## Usage as a package#### Logging In```pythonfrom pydeezer import Deezerarl = &quot;edit_this&quot;deezer = Deezer(arl=arl)user_info = deezer.user# or# deezer = Deezer()# user_info = deezer.login_via_arl(arl)```You can get the your `arl` by manually logging into [Deezer](https://www.deezer.com/) using your browser and check the `cookies` and look for the value of `arl`.#### Searching```python# Some login code here# Search trackstrack_search_results = deezer.search_tracks(&quot;IM DOPE&quot;)# Search albumsalbum_search_results = deezer.search_albums(&quot;DAMN&quot;, limit=10)# Search artistsartist_search_results = deezer.search_artists(&quot;J. Cole&quot;, limit=5)# Search playlistsplaylist_search_results = deezer.search_playlists(&quot;top&quot;, index=2)```#### Getting Information and Downloading```python# Some login code here# Some download stuffsfrom pydeezer import Downloaderfrom pydeezer.constants import track_formatsdownload_dir = &quot;C:\\Users\\User\\Music&quot;track_id = &quot;547653622&quot;track = deezer.get_track(track_id)# track is now a dict with a key of info, download, tags, and get_tag# info and tags are dicttrack_info = track[&quot;info&quot;]tags_separated_by_comma = track[&quot;tags&quot;]# download and get_tag are partial functionstrack[&quot;download&quot;](download_dir, quality=track_formats.MP3_320) # this will download the file, default file name is Filename.[mp3 or flac]tags_separated_by_semicolon = track[&quot;get_tag&quot;](separator=&quot;; &quot;) # this will return a dictionary similar to track[&quot;tags&quot;] but this will override the default separatorartist_id = &quot;53859305&quot;artist = deezer.get_artist(artist_id)album_id = &quot;39949511&quot;album = deezer.get_album(album_id) # returns a dict containing data about the albumplaylist_id = &quot;1370794195&quot;playlist = deezer.get_playlist(playlist_id) # returns a dict containing data about the playlist# Multithreaded Downloaderlist_of_id = [&quot;572537082&quot;,              &quot;921278352&quot;,              &quot;927432162&quot;,              &quot;547653622&quot;]downloader = Downloader(deezer, list_of_ids, download_dir,                        quality=track_formats.MP3_320, concurrent_downloads=2)downloader.start()```### Custom ProgressHandlerThis example uses the amazing [tqdm](https://github.com/tqdm/tqdm) package.#### Code```pythonfrom pydeezer import Deezerfrom pydeezer.ProgressHandler import BaseProgressHandlerfrom tqdm import tqdm# Extend BaseProgressHandler and override its initialize, update and close methods accordinglyclass MyProgressHandler(BaseProgressHandler):    def __init__(self):        pass    def initialize(self, *args):        super().initialize(*args)        self.pbar = tqdm(self.iterable, total=self.total_size,                         unit=&quot;B&quot;, unit_scale=True, unit_divisor=1024,                          leave=False, desc=self.track_title)    def update(self):        self.pbar.update(self.current_chunk_size)    def close(self):        self.pbar.close()# When starting a download, pass your ProgressHandler instance in progress_handler keyword argument.print(&quot;DefaultProgressHandler&quot;)track[&quot;download&quot;](download_dir, quality=track_formats.FLAC)print()my_progress_handler = MyProgressHandler()print(&quot;CustomProgressHandler&quot;)track[&quot;download&quot;](download_dir, quality=track_formats.FLAC,                  progress_handler=my_progress_handler)```#### Output![progresshandlergif](https://media.giphy.com/media/xa8YtgCbBvK0jSfefa/giphy.gif)## TODO- [ ] More CLI features, save used Arls for convenience.- [x] Multithreaded downloader (1 song / 1 thread)- [ ] Binary file- [ ] GUI## DisclaimerI will and should not be held responsible for the usage of this package.Don't use this package illegaly and against Deezer's [Terms Of Use](https://www.deezer.com/legal/cgu).This is licensed under [GNU GPL v3](https://choosealicense.com/licenses/gpl-3.0/#).</longdescription>
</pkgmetadata>