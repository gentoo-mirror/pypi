<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AnkiSync 2[![PyPI version shields.io](https://img.shields.io/pypi/v/ankisync2.svg)](https://pypi.python.org/pypi/ankisync2/)[![PyPI license](https://img.shields.io/pypi/l/ankisync2.svg)](https://pypi.python.org/pypi/ankisync2/)\*.apkg and \*.anki2 file structure is very simple, but with some quirks of incompleteness.[\*.apkg file structure](https://github.com/ankidroid/Anki-Android/wiki/Database-Structure) is a zip of at least two files.```.├── example│   ├── collection.anki2│   ├── collection.anki21 # newer Anki Desktop creates and uses this file instead, while retaining the old one as stub.│   ├── media # JSON of dict[int, str]│   ├── 1  # Media files with the names masked as integers│   ├── 2│   ├── 3|   └── ...└── example.apkg```\*.anki2 is a SQLite file with foreign key disabled, and the usage of [some JSON schemas](/ankisync2/anki20/builder.py) instead of [some tables](/ankisync2/anki20/db.py#L51)Also, \*.anki2 is used internally at [`os.path.join(appdirs.user_data_dir('Anki2'), 'User 1', 'collection.anki2')`](/ankisync2/dir.py#L75), so editing the SQLite there will also edit the database.However, [internal \*.anki2 has recently changed](https://github.com/patarapolw/ankisync2/issues/3). If you need to edit internally, if maybe safer to do in Anki&lt;=2.1.26. If you have trouble running two Anki versions (latest and 2.1.26), see [`/__utils__/anki2.1.26`](https://github.com/patarapolw/ankisync/tree/master/__utils__/anki2.1.26).The `media` file is a text file of at least a string of `{}`, which is actually a dictionary of keys -- stringified int; and values -- filenames.## UsageSome [extra tables](/ankisync2/anki20/db.py#L51) are created if not exists.```pythonfrom ankisync2 import Apkgwith Apkg(&quot;example.apkg&quot;) as apkg:    # Or Apkg(&quot;example/&quot;) also works - the folder named 'example' will be created.    apkg.db.database.execute_sql(SQL, PARAMS)    apkg.zip(output=&quot;example1.apkg&quot;)```I also support adding media.```pythonapkg.add_media(&quot;path/to/media.jpg&quot;)```To find the wanted cards and media, iterate though the `Apkg` and `Apkg.iter_media` object.```pythonfor card in apkg:    print(card)```## Creating a new \*.apkgYou can create a new \*.apkg via `Apkg` with any custom filename (and \*.anki2 via `Anki2()`). A folder required to create \*.apkg needs to be created first.```pythonapkg = Apkg(&quot;example&quot;)  # Create example folder```After that, the Apkg will require at least 1 card, which is connected to at least 1 note, 1 model, 1 template, and 1 deck; which should be created in this order.1. Model, Deck2. Template, Note3. Card```pythonwith Apkg(&quot;example.apkg&quot;) as apkg:    m = apkg.db.Models.create(name=&quot;foo&quot;, flds=[&quot;field1&quot;, &quot;field2&quot;])    d = apkg.db.Decks.create(name=&quot;bar::baz&quot;)    t = [        apkg.db.Templates.create(name=&quot;fwd&quot;, mid=m.id, qfmt=&quot;{{field1}}&quot;, afmt=&quot;{{field2}}&quot;),        apkg.db.Templates.create(name=&quot;bwd&quot;, mid=m.id, qfmt=&quot;{{field2}}&quot;, afmt=&quot;{{field1}}&quot;)    ]    n = apkg.db.Notes.create(mid=m.id, flds=[&quot;data1&quot;, &quot;&lt;img src='media.jpg'&gt;&quot;], tags=[&quot;tag1&quot;, &quot;tag2&quot;])    c = [        apkg.db.Cards.create(nid=n.id, did=d.id, ord=i)        for i, _ in enumerate(t)    ]```You can also add media, which is not related to the SQLite database.```pythonapkg.add_media(&quot;path/to/media.jpg&quot;)```Finally, finalize with```pythonapkg.export(&quot;example1.apkg&quot;)```## Updating an \*.apkgThis is also possible, by modifying `db.Notes.data` as `sqlite_ext.JSONField`, with `peewee.signals`.It is now as simple as,```pythonwith Apkg(&quot;example1.apkg&quot;) as apkg:    for n in apkg.db.Notes.filter(db.Notes.data[&quot;field1&quot;] == &quot;data1&quot;):        n.data[&quot;field3&quot;] = &quot;data2&quot;        n.save()    apkg.close()```## JSON schema of `Col.models`, `Col.decks`, `Col.conf` and `Col.dconf`I have created `dataclasses` for this at [/ankisync2/builder.py](/ankisync2/builder.py). To serialize it, use `dataclasses.asdict` or```pythonfrom ankisync2 import DataclassJSONEncoderimport jsonjson.dumps(dataclassObject, cls=DataclassJSONEncoder)```## Editing user's `collection.anki2`This can be found at `${ankiPath}/${user}/collection.anki2`. Of course, do this at your own risk. Always backup first.```pythonfrom ankisync2 import AnkiDesktopAnkiDesktop.backup(&quot;/path/to/anki-desktop.db&quot;)anki = AnkiDesktop(filename=&quot;/path/to/anki-desktop.db&quot;)... # Edit as you pleaseAnkiDesktop.restore(&quot;/path/to/anki-desktop.db&quot;)```## Using `peewee` frameworkThis is based on `peewee` ORM framework. You can use Dataclasses and Lists directly, without converting them to string first.## ExamplesPlease see [`/__examples__`](/__examples__), and [/tests](/tests).## Installation```bashpip install ankisync2```# Related projects- &lt;https://github.com/patarapolw/ankisync&gt;- &lt;https://github.com/patarapolw/AnkiTools&gt;</longdescription>
</pkgmetadata>