<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flagbase Python Server SDKFlagbase is a feature flag management system that helps you manage your application features easily and safely. The Python Server SDK enables developers to integrate Flagbase with their Python applications and control feature flag variations for different users.## InstallationTo install the Flagbase Python Server SDK, you can use pip:```shpip install flagbase```## Usage### Importing the SDKFirst, import the necessary components from the flagbase package:```pythonfrom flagbase import FlagbaseClient, Config, Identity```### Creating a Flagbase ClientCreate a FlagbaseClient instance with the appropriate configuration:```pythonflagbase = FlagbaseClient(    config=Config(        # Make sure you use the server SDK key (not the client SDK key)        # Also be sure not to expose this secret, as anybody would be         # able to use it to get your flag rules from Flagbase        server_key=&quot;sdk-server_491e7607-dac2-41dc-abed-1ba904cdb032&quot;    ))```### User IdentityCreate a user identity object with an identifier and traits:```python# Replace 'user_or_request_id' with a unique identifier# This is essentially what you will use to split your traffic onuser_or_request_id = ...user = Identity(user_or_request_id, {&quot;some-trait-key&quot;: &quot;blue&quot;})```### Evaluating Feature VariationsEvaluate the feature variation for a specific user:```pythonfeature_variation = flagbase.variation(&quot;some-flag-key&quot;, user, &quot;control&quot;)```## Example ApplicationHere's an example of a simple application that uses the Flagbase Python Server SDK:```pythonfrom flagbase import FlagbaseClient, Config, Identityif __name__ == '__main__':    flagbase = FlagbaseClient(        config=Config(            server_key=&quot;sdk-server_491e7607-dac2-41dc-abed-1ba904cdb032&quot;,        )    )    user_or_request_id = ...    # user details might be pulled from your database    user = Identity(        user_or_request_id,        {&quot;some-trait-key&quot;: &quot;blue&quot;}    )    show_feature = flagbase.variation(&quot;example-flag&quot;, user, &quot;control&quot;)        if show_feature == &quot;treatment&quot;:        show_my_new_feature()    elif show_feature == &quot;control&quot;:        show_existing_feature()```In this example, the application creates a Flagbase client, user identity, and evaluates the feature variation for that particular user. If the user/requestor belongs to the &quot;treatment&quot; cohort, then we show them the new feature. Otherwise we show them the existing feature.# Advanced## Event ListenersThe Flagbase Python Server SDK provides event listeners to help you monitor and react to events happening within the SDK. This can be useful for debugging, monitoring, and managing your application's performance.### Usage#### Adding Event ListenersYou can add event listeners to the Flagbase client by using the on method:```pythondef my_listener(message: str, context: Any):    print(f&quot;Received event: {message}&quot;)flagbase.on(EventType.EVALUATION, my_listener)```In this example, my_listener is a function that prints the event message when the event is triggered. You can replace it with your own custom function to handle the events.#### Removing Event ListenersYou can remove an event listener by using the `off` method:```pythonflagbase.off(EventType.EVALUATION, my_listener)```This will remove the `my_listener` function from listening to the `CLIENT_READY` event.### Event TypesThe available event types are:* `NETWORK_FETCH`: A network fetch has been initiated.* `NETWORK_FETCH_FULL`: A full network fetch has been completed.* `NETWORK_FETCH_CACHED`: A cached network fetch has been completed.* `NETWORK_FETCH_ERROR`: An error occurred during a network fetch.* `EVALUATION`: An evaluation event has been triggered.##### Log Event - Event Types:Use these event types to listen in to different types of log events. Based on standard python logging levels: https://docs.python.org/3/library/logging.html#logging-levels* `LOG_CRITICAL`: This event type represents a critical error that occurred in the code, which could lead to a crash or other serious issue that requires immediate attention.* `LOG_ERROR`: This event type represents a non-critical error that occurred in the code, which may not require immediate attention but should be logged and monitored.* `LOG_WARNING`: This event type represents a warning message that occurred in the code, which indicates a potential issue or error that should be investigated.* `LOG_INFO`: This event type represents an informational message that occurred in the code, which may be useful for monitoring or debugging purposes.* `LOG_DEBUG`: This event type represents a debug message that occurred in the code, which provides additional information for debugging and troubleshooting purposes.</longdescription>
</pkgmetadata>