<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Homoglyphs![Homoglyphs logo](logo.png)[![Build Status](https://travis-ci.org/orsinium/homoglyphs.svg?branch=master)](https://travis-ci.org/orsinium/homoglyphs) [![PyPI version](https://img.shields.io/pypi/v/homoglyphs.svg)](https://pypi.python.org/pypi/homoglyphs) [![Status](https://img.shields.io/pypi/status/homoglyphs.svg)](https://pypi.python.org/pypi/homoglyphs) [![Code size](https://img.shields.io/github/languages/code-size/orsinium/homoglyphs.svg)](https://github.com/orsinium/homoglyphs) [![License](https://img.shields.io/pypi/l/homoglyphs.svg)](LICENSE)Homoglyphs -- python library for getting [homoglyphs](https://en.wikipedia.org/wiki/Homoglyph) and converting to ASCII.## FeaturesIt's smarter version of [confusable_homoglyphs](https://github.com/vhf/confusable_homoglyphs):* Autodect or manual choosing category ([aliases from ISO 15924](https://en.wikipedia.org/wiki/ISO_15924#List_of_codes)).* Auto or manual load only needed alphabets in memory.* Converting to ASCII.* More configurable.* More stable.## Installation```bashsudo pip install homoglyphs```## UsageBest way to explain something is show how it works. So, let's have a look on the real usage.Importing:```pythonimport homoglyphs as hg```### Languages```python#detecthg.Languages.detect('w')# {'pl', 'da', 'nl', 'fi', 'cz', 'sr', 'pt', 'it', 'en', 'es', 'sk', 'de', 'fr', 'ro'}hg.Languages.detect('т')# {'mk', 'ru', 'be', 'bg', 'sr'}hg.Languages.detect('.')# set()# get alphabet for languageshg.Languages.get_alphabet(['ru'])# {'в', 'Ё', 'К', 'Т', ..., 'Р', 'З', 'Э'}# get all languageshg.Languages.get_all()# {'nl', 'lt', ..., 'de', 'mk'}```### CategoriesCategories -- ([aliases from ISO 15924](https://en.wikipedia.org/wiki/ISO_15924#List_of_codes)).```python#detecthg.Categories.detect('w')# 'LATIN'hg.Categories.detect('т')# 'CYRILLIC'hg.Categories.detect('.')# 'COMMON'# get alphabet for categorieshg.Categories.get_alphabet(['CYRILLIC'])# {'ӗ', 'Ԍ', 'Ґ', 'Я', ..., 'Э', 'ԕ', 'ӻ'}# get all categorieshg.Categories.get_all()# {'RUNIC', 'DESERET', ..., 'SOGDIAN', 'TAI_LE'}```### HomoglyphsGet homoglyphs:```python# get homoglyphs (latin alphabet initialized by default)hg.Homoglyphs().get_combinations('q')# ['q', '𝐪', '𝑞', '𝒒', '𝓆', '𝓺', '𝔮', '𝕢', '𝖖', '𝗊', '𝗾', '𝘲', '𝙦', '𝚚']```Alphabet loading:```python# load alphabet on init by categorieshomoglyphs = hg.Homoglyphs(categories=('LATIN', 'COMMON', 'CYRILLIC'))  # alphabet loaded herehomoglyphs.get_combinations('гы')# ['rы', 'гы', 'ꭇы', 'ꭈы', '𝐫ы', '𝑟ы', '𝒓ы', '𝓇ы', '𝓻ы', '𝔯ы', '𝕣ы', '𝖗ы', '𝗋ы', '𝗿ы', '𝘳ы', '𝙧ы', '𝚛ы']# load alphabet on init by languageshomoglyphs = hg.Homoglyphs(languages={'ru', 'en'})  # alphabet will be loaded herehomoglyphs.get_combinations('гы')# ['rы', 'гы']# manual set alphabet on init      # eng rushomoglyphs = hg.Homoglyphs(alphabet='abc абс')homoglyphs.get_combinations('с')# ['c', 'с']# load alphabet on demandhomoglyphs = hg.Homoglyphs(languages={'en'}, strategy=hg.STRATEGY_LOAD)# ^ alphabet will be loaded here for &quot;en&quot; languagehomoglyphs.get_combinations('гы')# ^ alphabet will be loaded here for &quot;ru&quot; language# ['rы', 'гы']```You can combine `categories`, `languages`, `alphabet` and any strategies as you want. The strategies specify how to handle any characters not already loaded:* `STRATEGY_LOAD`: load category for this character* `STRATEGY_IGNORE`: add character to result* `STRATEGY_REMOVE`: remove character from result### Converting glyphs to ASCII chars```pythonhomoglyphs = hg.Homoglyphs(languages={'en'}, strategy=hg.STRATEGY_LOAD)# converthomoglyphs.to_ascii('ТЕСТ')# ['TECT']homoglyphs.to_ascii('ХР123.')  # this is cyrillic &quot;х&quot; and &quot;р&quot;# ['XP123.', 'XPI23.', 'XPl23.']# string with chars which can't be converted by default will be ignoredhomoglyphs.to_ascii('лол')# []# you can set strategy for removing not converted non-ASCII chars from resulthomoglyphs = hg.Homoglyphs(    languages={'en'},    strategy=hg.STRATEGY_LOAD,    ascii_strategy=hg.STRATEGY_REMOVE,)homoglyphs.to_ascii('лол')# ['o']# also you can set up range of allowed char codes for ascii (0-128 by default):homoglyphs = hg.Homoglyphs(    languages={'en'},    strategy=hg.STRATEGY_LOAD,    ascii_strategy=hg.STRATEGY_REMOVE,    ascii_range=range(ord('a'), ord('z')),)homoglyphs.to_ascii('ХР123.')# ['l']homoglyphs.to_ascii('хр123.')# ['xpl']```</longdescription>
</pkgmetadata>