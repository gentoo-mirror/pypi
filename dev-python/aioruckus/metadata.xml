<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aioruckusA Python API which interacts with Ruckus Unleashed and ZoneDirector devices via their AJAX Web Service interface.  Configuration information can also be queried from Ruckus Unleashed and ZoneDirector backup files.Compatible with all Ruckus Unleashed versions, and Ruckus ZoneDirector versions 9.10 onwards.## How to install```bashpip install aioruckus```## UsageFunctions are defined within an [async](https://docs.python.org/3/library/asyncio.html) [context manager](https://docs.python.org/3/reference/datamodel.html#context-managers), so you will have to use [asyncio](https://docs.python.org/3/library/asyncio.html) rather than calling the functions directly in a shell.```pythonfrom aioruckus import AjaxSession, BackupSession, SystemStatimport asyncioasync def test_aioruckus():        with BackupSession.create(&quot;&lt;ruckus backup filename&gt;&quot;) as session:        ruckus = session.api        aps = await ruckus.get_aps()        ap_groups = await ruckus.get_ap_groups()        wlans = await ruckus.get_wlans()        wlan_groups = await ruckus.get_wlan_groups()        blocked = await ruckus.get_blocked_client_macs()        mesh = await ruckus.get_mesh_info()        all_system_info = await ruckus.get_system_info(SystemStat.ALL)    async with AjaxSession.async_create(&quot;&lt;ruckus ip&gt;&quot;, &quot;&lt;ruckus user&gt;&quot;, &quot;&lt;ruckus password&gt;&quot;) as session:        ruckus = session.api        aps = await ruckus.get_aps()        ap_groups = await ruckus.get_ap_groups()        wlans = await ruckus.get_wlans()        wlan_groups = await ruckus.get_wlan_groups() # WLAN Groups are CLI-only on Unleashed        blocked = await ruckus.get_blocked_client_macs()        mesh = await ruckus.get_mesh_info()        default_system_info = await ruckus.get_system_info()        all_system_info = await ruckus.get_system_info(SystemStat.ALL)        ap_stats = await ruckus.get_ap_stats()        ap_group_stats = await ruckus.get_ap_group_stats()        vap_stats = await ruckus.get_vap_stats()        wlan_group_stats = await ruckus.get_wlan_group_stats()        active_clients = await ruckus.get_active_clients()        inactive_clients = await ruckus.get_inactive_clients() # always empty on Unleashed        syslog = await ruckus.get_syslog()        await ruckus.do_block_client(&quot;60:ab:de:ad:be:ef&quot;)        await ruckus.do_unblock_client(&quot;60:ab:de:ad:be:ef&quot;)        await ruckus.do_disable_wlan(&quot;my ssid&quot;)        await ruckus.do_enable_wlan(&quot;my ssid&quot;)        await ruckus.do_set_wlan_password(&quot;my ssid&quot;, &quot;blah&gt;blah&lt;&quot;)        await ruckus.do_add_wlan_group(&quot;new empty wlangroup&quot;, &quot;empty group added by aioruckus&quot;)        await ruckus.do_add_wlan_group(&quot;new full wlangroup&quot;, &quot;group added by aioruckus&quot;, wlans)        wlan_group_template = next((wlang for wlang in wlan_groups if wlang[&quot;name&quot;] == &quot;Default&quot;), None)        await ruckus.do_clone_wlan_group(wlan_group_template, &quot;Copy of Default&quot;)        await ruckus.do_delete_wlan_group(&quot;Copy of Default&quot;)        await ruckus.do_add_wlan(&quot;my new sid&quot;, passphrase=&quot;mypassphrase&quot; )        await ruckus.do_edit_wlan(&quot;my new sid&quot;, {&quot;ofdm-rate-only&quot;: True})        template_wlan = next((wlan for wlan in wlans if wlan[&quot;name&quot;] == &quot;my ssid&quot;), None)        await ruckus.do_clone_wlan(template_wlan, &quot;my newer sid&quot;)        await ruckus.do_delete_wlan(&quot;my newer sid&quot;)        await ruckus.do_hide_ap_leds(&quot;24:79:de:ad:be:ef&quot;)        await ruckus.do_show_ap_leds(&quot;24:79:de:ad:be:ef&quot;)                await ruckus.do_restart_ap(&quot;24:79:de:ad:be:ef&quot;)asyncio.run(test_aioruckus())```### Other APIs for Ruckus UnleashedThis project was originally a fork of [pyruckus](https://github.com/gabe565/pyruckus), which provides similar Python query functionality by controlling an SSH CLI session.There is a [Go client](https://github.com/willglynn/ruckus-go) for the latest releases of Unleashed.  Since it's strongly typed, has good quality comments, and doesn't (yet) contain the large collection of tweaks and hacks needed to work over a wide range of Unleashed and ZoneDirector releases, the [ruckus-go](https://github.com/willglynn/ruckus-go) source code is a great place to understand the required requests and responses you should expect to receive from the AJAX API.There is also [scrapli](https://github.com/carlmontanari/scrapli) support for the Ruckus Unleashed SSH CLI via [scrapli community](https://github.com/scrapli/scrapli_community).  Authentication and privilege levels are implemented, but no templates are implemented as of August 2023.</longdescription>
</pkgmetadata>