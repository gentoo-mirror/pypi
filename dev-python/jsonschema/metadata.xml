<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========jsonschema==========|PyPI| |Pythons| |CI| |ReadTheDocs| |Precommit| |Zenodo|.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg   :alt: PyPI version   :target: https://pypi.org/project/jsonschema/.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg   :alt: Supported Python versions   :target: https://pypi.org/project/jsonschema/.. |CI| image:: https://github.com/python-jsonschema/jsonschema/workflows/CI/badge.svg  :alt: Build status  :target: https://github.com/python-jsonschema/jsonschema/actions?query=workflow%3ACI.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&amp;style=flat   :alt: ReadTheDocs status   :target: https://python-jsonschema.readthedocs.io/en/stable/.. |Precommit| image:: https://results.pre-commit.ci/badge/github/python-jsonschema/jsonschema/main.svg   :alt: pre-commit.ci status   :target: https://results.pre-commit.ci/latest/github/python-jsonschema/jsonschema/main.. |Zenodo| image:: https://zenodo.org/badge/3072629.svg   :alt: Zenodo DOI   :target: https://zenodo.org/badge/latestdoi/3072629``jsonschema`` is an implementation of the `JSON Schema &lt;https://json-schema.org&gt;`_ specification for Python... code:: python    &gt;&gt;&gt; from jsonschema import validate    &gt;&gt;&gt; # A sample schema, like what we'd get from json.load()    &gt;&gt;&gt; schema = {    ...     &quot;type&quot; : &quot;object&quot;,    ...     &quot;properties&quot; : {    ...         &quot;price&quot; : {&quot;type&quot; : &quot;number&quot;},    ...         &quot;name&quot; : {&quot;type&quot; : &quot;string&quot;},    ...     },    ... }    &gt;&gt;&gt; # If no exception is raised by validate(), the instance is valid.    &gt;&gt;&gt; validate(instance={&quot;name&quot; : &quot;Eggs&quot;, &quot;price&quot; : 34.99}, schema=schema)    &gt;&gt;&gt; validate(    ...     instance={&quot;name&quot; : &quot;Eggs&quot;, &quot;price&quot; : &quot;Invalid&quot;}, schema=schema,    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL    Traceback (most recent call last):        ...    ValidationError: 'Invalid' is not of type 'number'It can also be used from the command line by installing `check-jsonschema &lt;https://github.com/python-jsonschema/check-jsonschema&gt;`_.Features--------* Full support for `Draft 2020-12 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft202012Validator&gt;`_, `Draft 2019-09 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft201909Validator&gt;`_, `Draft 7 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft7Validator&gt;`_, `Draft 6 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft6Validator&gt;`_, `Draft 4 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft4Validator&gt;`_ and `Draft 3 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft3Validator&gt;`_* `Lazy validation &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/protocols/#jsonschema.protocols.Validator.iter_errors&gt;`_ that can iteratively report *all* validation errors.* `Programmatic querying &lt;https://python-jsonschema.readthedocs.io/en/latest/errors/&gt;`_ of which properties or items failed validation.Installation------------``jsonschema`` is available on `PyPI &lt;https://pypi.org/project/jsonschema/&gt;`_. You can install using `pip &lt;https://pip.pypa.io/en/stable/&gt;`_:.. code:: bash    $ pip install jsonschemaExtras======Two extras are available when installing the package, both currently related to ``format`` validation:    * ``format``    * ``format-nongpl``They can be used when installing in order to include additional dependencies, e.g.:.. code:: bash    $ pip install jsonschema'[format]'Be aware that the mere presence of these dependencies – or even the specification of ``format`` checks in a schema – do *not* activate format checks (as per the specification).Please read the `format validation documentation &lt;https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats&gt;`_ for further details.About-----I'm Julian Berman.``jsonschema`` is on `GitHub &lt;https://github.com/python-jsonschema/jsonschema&gt;`_.Get in touch, via GitHub or otherwise, if you've got something to contribute, it'd be most welcome!You can also generally find me on Libera (nick: ``Julian``) in various channels, including ``#python``.If you feel overwhelmingly grateful, you can also `sponsor me &lt;https://github.com/sponsors/Julian/&gt;`_.And for companies who appreciate ``jsonschema`` and its continued support and growth, ``jsonschema`` is also now supportable via `TideLift &lt;https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&amp;utm_medium=referral&amp;utm_campaign=readme&gt;`_.Release Information-------------------v4.19.0=======* Importing the ``Validator`` protocol directly from the package root is deprecated.  Import it from ``jsonschema.protocols.Validator`` instead.* Automatic retrieval of remote references (which is still deprecated) now properly succeeds even if the retrieved resource does not declare which version of JSON Schema it uses.  Such resources are assumed to be 2020-12 schemas.  This more closely matches the pre-referencing library behavior.</longdescription>
</pkgmetadata>