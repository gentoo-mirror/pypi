<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ormar-postgres-extensions&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt;[![All Contributors](https://img.shields.io/badge/all_contributors-1-orange.svg?style=flat-square)](#contributors-)&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt;[![Maturity badge - level 1](https://img.shields.io/badge/Maturity-Level%201%20--%20New%20Project-yellow.svg)](https://github.com/tophat/getting-started/blob/master/scorecard.md) [![Stage](https://img.shields.io/pypi/status/ormar-postgres-extensions)](https://pypi.org/project/ormar-postgres-extensions/) [![Discord](https://img.shields.io/discord/809577721751142410?label=community%20chat)](https://discord.gg/YhK3GFcZrk)[![Pypi](https://img.shields.io/pypi/v/ormar-postgres-extensions)](https://pypi.org/project/ormar-postgres-extensions/) [![Wheel](https://img.shields.io/pypi/wheel/ormar-postgres-extensions)](https://pypi.org/project/ormar-postgres-extensions/) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ormar-postgres-extensions) [![PyPI - Downloads](https://img.shields.io/pypi/dm/ormar-postgres-extensions)](https://pypi.org/project/ormar-postgres-extensions/) [![PyPI - License](https://img.shields.io/pypi/l/ormar-postgres-extensions)](./LICENSE)![Build Status](https://github.com/tophat/ormar-postgres-extensions/workflows/Ormar%20Postgres%20Extensions%20CICD/badge.svg) [![codecov](https://codecov.io/gh/tophat/ormar-postgres-extensions/branch/main/graph/badge.svg)](https://codecov.io/gh/tophat/ormar-postgres-extensions)## Overviewormar-postgres-extensions is a an extension to the[Ormar](https://github.com/collerek/ormar) ORM. It enables developers to write models that map to native PostgreSQL types.## Motivation[Ormar](https://github.com/collerek/ormar) is an amazing async ORM that works with [FastAPI](https://github.com/tiangolo/fastapi). However, it is agnostic to the underlying database used meaning that we cannot use native PostgreSQL types such as UUID or JSONB columns. The aim of this library is to provide Ormar fields that can be used to generate database columns with native PG types.## Installation```shellpython -m pip install ormar-postgres-extensions```## Usage### FieldsThree native PG fields are provided. The `JSONB` and `UUID` types map to native `JSONB` and `UUID` data types respectively. The `Array` type can be used to create an array column. Using these in an Ormar model is as simple as importing the fields and using them in the model.#### UUID```pythonfrom uuid import UUIDimport ormarimport ormar_postgres_extensions as ormar_pg_extclass MyModel(ormar.Model):    uuid: UUID = ormar_pg_ext.UUID(unique=True, nullable=False)```#### JSONB```pythonimport ormarimport ormar_postgres_extensions as ormar_pg_extclass JSONBTestModel(ormar.Model):    id: int = ormar.Integer(primary_key=True)    data: dict = ormar_pg_ext.JSONB()```##### jsonb_contained_byThe maps to the [`contains`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by) operator in Postgres.```pythonawait JSONBTestModel.objects.filter(data__jsonb_contained_by=dict(key=&quot;value&quot;)).all()```##### jsonb_containsThe maps to the [`contains`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.contains) operator in Postgres.```pythonawait JSONBTestModel.objects.filter(data__jsonb_contains=dict(key=&quot;value&quot;)).all()```##### jsonb_has_allThe maps to the [`has_all`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all) operator in Postgres.```pythonfrom sqlalchemy.dialects.postgresql import arrayawait JSONBTestModel.objects.filter(data__jsonb_has_all=array([&quot;key1&quot;, &quot;key2&quot;])).all()```##### jsonb_has_anyThe maps to the [`has_any`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any) operator in Postgres.```pythonfrom sqlalchemy.dialects.postgresql import arrayawait JSONBTestModel.objects.filter(data__jsonb_has_any=array([&quot;key1&quot;, &quot;key2&quot;])).all()```##### jsonb_has_keyThe maps to the [`has_key`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key) operator in Postgres.```pythonawait JSONBTestModel.objects.filter(data__jsonb_has_key=&quot;key1&quot;).all()```#### ArrayArray field requires a bit more setup to pass the type of the array into the field```pythonimport ormarimport sqlalchemyimport ormar_postgres_extensions as ormar_pg_extclass ModelWithArray(ormar.Model):    class Meta:        database = database        metadata = metadata    id: int = ormar.Integer(primary_key=True)    data: list = ormar_pg_ext.ARRAY(item_type=sqlalchemy.String())```Arrays have access to three special methods that map to specific PostgreSQL array functions##### array_contained_byThe maps to the [`contained_by`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by) operator in Postgres.```pythonawait ModelWithArray.objects.filter(data__array_contained_by=[&quot;a&quot;]).all()```##### array_containsThe maps to the [`contains`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains) operator in Postgres.```pythonawait ModelWithArray.objects.filter(data__array_contains=[&quot;a&quot;]).all()```##### array_overlapThe maps to the [`overlap`](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap) operator in Postgres.```pythonawait ModelWithArray.objects.filter(data__array_overlap=[&quot;a&quot;]).all()```#### INET / CIDR```pythonfrom ipaddress import IPv4Address, IPv6Address, IPv4Interface, IPv6Interfacefrom typing import Unionimport ormarimport ormar_postgres_extensions as ormar_pg_extIPAddress = Union[    IPv4Address,    IPv4Interface,    IPv6Address,    IPv6Interface,]class INETTestModel(ormar.Model):    id: int = ormar.Integer(primary_key=True)    inet: IPAddress = ormar_pg_ext.INET()    cidr: IPAddress = ormar_pg_ext.CIDR()```##### contained_byThis maps to the [`&lt;&lt;` operator](https://www.postgresql.org/docs/current/functions-net.html)```pythonfrom ipaddress import ip_interfaceawait INETTestModel.objects.filter(inet__contained_by=ip_interface(&quot;192.168.1.0/24&quot;)).all()```##### contained_by_eqThis maps to the [`&lt;&lt;=` operator](https://www.postgresql.org/docs/current/functions-net.html)```pythonfrom ipaddress import ip_interfaceawait INETTestModel.objects.filter(inet__contained_by_eq=ip_interface(&quot;192.168.1.0/24&quot;)).all()```##### contains_subnetThis maps to the [`&gt;&gt;` operator](https://www.postgresql.org/docs/current/functions-net.html)```pythonfrom ipaddress import ip_interfaceawait INETTestModel.objects.filter(inet__contains_subnet=ip_interface(&quot;192.168.1.0/24&quot;)).all()```##### contains_subnet_eqThis maps to the [`&gt;&gt;=` operator](https://www.postgresql.org/docs/current/functions-net.html)```pythonfrom ipaddress import ip_interfaceawait INETTestModel.objects.filter(inet__contains_subnet_eq=ip_interface(&quot;192.168.1.0/24&quot;)).all()```##### contains_or_eqThis maps to the [`&amp;&amp;` operator](https://www.postgresql.org/docs/current/functions-net.html)```pythonfrom ipaddress import ip_interfaceawait INETTestModel.objects.filter(inet__contains_or_eq=ip_interface(&quot;192.168.1.0/24&quot;)).all()```#### MACADDR```pythonfrom ipaddress import IPv4Address, IPv6Address, IPv4Interface, IPv6Interfacefrom typing import Unionimport ormarimport ormar_postgres_extensions as ormar_pg_extclass MacAddrTestModel(ormar.Model):    id: int = ormar.Integer(primary_key=True)    addr: str = ormar_pg_ext.MACADDR()```## Uninstalling```pythonpip uninstall ormar-postgres-extensions```## ContributingFeel free to open a PR or GitHub issue. Contributions welcome!To develop locally, clone this repository and run `. script/bootstrap` to install test dependencies. You can then use `invoke --list` to see available commands.To run the tests locally, PostgreSQL needs to be running. This can be easily started via `inv database`.### See contributing [guide](https://github.com/tophat/ormar-postgres-extensions/tree/main/CONTRIBUTING.md)## Contributors_You don't really have to add this section yourself! Simply use [all-contributors](https://allcontributors.org/) by adding comments in your PRs like so:_&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt;&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable --&gt;&lt;table&gt;  &lt;tr&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://everttimberg.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6757853?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Evert Timberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;#ideas-etimberg&quot; title=&quot;Ideas, Planning, &amp; Feedback&quot;&gt;ü§î&lt;/a&gt; &lt;a href=&quot;#infra-etimberg&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;üöá&lt;/a&gt; &lt;a href=&quot;#maintenance-etimberg&quot; title=&quot;Maintenance&quot;&gt;üöß&lt;/a&gt; &lt;a href=&quot;https://github.com/tophat/ormar-postgres-extensions/commits?author=etimberg&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/tophat/ormar-postgres-extensions/commits?author=etimberg&quot; title=&quot;Tests&quot;&gt;‚ö†Ô∏è&lt;/a&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;&lt;!-- markdownlint-restore --&gt;&lt;!-- prettier-ignore-end --&gt;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;```@all-contributors please add &lt;username&gt; for &lt;contribution type&gt;```_Find out more about All-Contributors on their website!_## License`ormar-postgres-extensions` is licensed under [Apache License Version 2.0](https://github.com/tophat/ormar-postgres-extensions/tree/main/LICENSE).</longdescription>
</pkgmetadata>