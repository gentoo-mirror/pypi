<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|buildstatus|_Installation============.. code-block:: python    pip install systestDescription===========Execute a sequence of test cases in serial and/or parallel.Test cases in a list are executed in serial and test cases in a tupleare executed in parallel, in separate Python threads.This framework is created with integration/system test in mind. Theframework is *not* intended as a replacement for ``unittest``, butrather to be a complement to it.Documentation: http://systest.readthedocs.org/en/latestExample usage=============See the test suite:https://github.com/eerimoq/systest/blob/master/tests/test_systest.pyFor example, the sequence below starts with test case``MyTestCase(&quot;1&quot;)``. When ``MyTestCase(&quot;1&quot;)`` has been executed,``MyTestCase(&quot;2&quot;)`` and the list of ``MyTestCase(&quot;3&quot;)`` and``MyTestCase(&quot;4&quot;)`` are executed in parallel. When both``MyTestCase(&quot;2&quot;)`` and the list of ``MyTestCase(&quot;3&quot;)`` and``MyTestCase(&quot;4&quot;)`` has been executed, ``MyTestCase(&quot;5&quot;)`` isexecuted. Then the sequence ends... code-block:: python   import logging   import systest   LOGGER = logging.getLogger(__name__)   # Define a testcase.   class MyTestCase(systest.TestCase):       &quot;&quot;&quot;Test case description.       &quot;&quot;&quot;       def __init__(self, name):           super(MyTestCase, self).__init__()           self.name = &quot;my_testcase_&quot; + name       def run(self):           LOGGER.info(&quot;Hello!&quot;)           self.assert_equal(1, 1)           self.assert_true(1 == 1)           self.assert_in(1 in [1, 2])           self.assert_none(None)           with self.assert_raises(RuntimeError) as cm:               raise RuntimeError('foo')           self.assert_equal(str(cm.exception), 'foo')   sequencer = systest.setup(&quot;my_sequence&quot;)   sequencer.run(MyTestCase(&quot;1&quot;),                 (                     MyTestCase(&quot;2&quot;),                     [                         MyTestCase(&quot;3&quot;),                         MyTestCase(&quot;4&quot;)                     ]                 ),                 MyTestCase(&quot;5&quot;))   sequencer.report_and_exit()The output is:.. code-block:: text   Name: my_sequence   Date: 2020-05-30 11:41:49.712832   Node: erik-GR8   User: erik   ---------------------------------------------------------------   Name: my_testcase_1   Description:       Test case description.   Hello!   my_testcase_1: PASSED in 0 seconds   ---------------------------------------------------------------   Name: my_testcase_2   Description:       Test case description.   Hello!   my_testcase_2: PASSED in 0 seconds   ---------------------------------------------------------------   Name: my_testcase_3   Description:       Test case description.   Hello!   my_testcase_3: PASSED in 0 seconds   ---------------------------------------------------------------   Name: my_testcase_4   Description:       Test case description.   Hello!   my_testcase_4: PASSED in 0 seconds   ---------------------------------------------------------------   Name: my_testcase_5   Description:       Test case description.   Hello!   my_testcase_5: PASSED in 0 seconds   ---------------------- Test summary begin ----------------------   [       my_testcase_1: PASSED in 0 seconds,       (           my_testcase_2: PASSED in 0 seconds,           [               my_testcase_3: PASSED in 0 seconds,               my_testcase_4: PASSED in 0 seconds           ]       ),       my_testcase_5: PASSED in 0 seconds   ]   Execution time: 0.02 seconds   Result: PASSED (5 passed, 5 total)   ----------------------- Test summary end -----------------------.. |buildstatus| image:: https://travis-ci.org/eerimoq/systest.svg.. _buildstatus: https://travis-ci.org/eerimoq/systest</longdescription>
</pkgmetadata>