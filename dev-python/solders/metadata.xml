<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/kevinheavey/solders/main/docs/logo.jpeg&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/div&gt;---[![ActionsStatus](https://github.com/kevinheavey/solders/workflows/CI/badge.svg)](https://github.com/kevinheavey/solders/actions?query=workflow%3ACI)[![PyPI version](https://badge.fury.io/py/solders.svg)](https://badge.fury.io/py/solders)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/kevinheavey/solders/blob/main/LICENSE)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# Solders`solders` is a high-performance Python toolkit for Solana, written in Rust. It provides robust solutions to the following problems:- Core SDK stuff: keypairs, pubkeys, signing and serializing transactions - that sort of thing.- RPC stuff: building requests and parsing responses (no networking stuff - if you want help with that, [solana-py](https://michaelhly.github.io/solana-py/rpc/async_api/) is your friend).- Integration testing stuff: the `solders.bankrun` module is an alternative to `solana-test-validator` that's much more convenient and **much** faster. It's based on [solana-program-test](https://crates.io/crates/solana-program-test) if you know that is.## What about solana-py?`solders` and `solana-py` are good friends. `solana-py` uses `solders` under the hood extensively in itscore API and RPC API. The main differences are:- `solders` doesn't have functions to actually interact with the RPC server (though `solana-py` does use the RPC code from `solders`).- `solders` doesn't provide SPL Token and SPL Memo clients.- `solana-py` may not have support for all the RPC requests and responses provided by `solders`.- `solana-py` doesn't have anything like the `bankrun` testing kit.Since `solana-py` uses `solders` under the hood and they don't duplicate each other's features, you should just use whichever library you need.## Installation```pip install solders```Note: Requires Python &gt;= 3.7.## Example Usage```python&gt;&gt;&gt; from solders.message import Message&gt;&gt;&gt; from solders.keypair import Keypair&gt;&gt;&gt; from solders.instruction import Instruction&gt;&gt;&gt; from solders.hash import Hash&gt;&gt;&gt; from solders.transaction import Transaction&gt;&gt;&gt; from solders.pubkey import Pubkey&gt;&gt;&gt; program_id = Pubkey.default()&gt;&gt;&gt; arbitrary_instruction_data = bytes([1])&gt;&gt;&gt; accounts = []&gt;&gt;&gt; instruction = Instruction(program_id, arbitrary_instruction_data, accounts)&gt;&gt;&gt; payer = Keypair()&gt;&gt;&gt; message = Message([instruction], payer.pubkey())&gt;&gt;&gt; blockhash = Hash.default()  # replace with a real blockhash&gt;&gt;&gt; tx = Transaction([payer], message, blockhash)```## Development### Setup1. Install [poetry](https://python-poetry.org/)2. Install dev dependencies:```poetry install```3. Activate the poetry shell:```shpoetry shell```### Testing1. Run `maturin develop` to compile the Rust code.2. Run `make fmt`, `make lint`, and `make test`.</longdescription>
</pkgmetadata>