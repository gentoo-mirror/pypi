<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MAuth Client Python[![BuildStatus](https://travis-ci.com/mdsol/mauth-client-python.svg?token=YCqgqZjJBpwz6GCprYaV&amp;branch=develop)](https://travis-ci.com/mdsol/mauth-client-python)MAuth Client Python is an authentication library to manage the information needed to both sign and authenticate requests and responses for Medidata's MAuth authentication system.## Pre-requisitesTo use MAuth Authenticator you will need:* An MAuth app ID* An MAuth private key (with the public key registered with Medidata's MAuth server)## InstallationTo resolve packages using pip, add the following to ~/.pip/pip.conf:```[global]index-url = https://&lt;username&gt;:&lt;password&gt;@mdsol.jfrog.io/mdsol/api/pypi/pypi-packages/simple/```Install using pip:```$ pip install mauth-client```Or directly from GitHub:```$ pip install git+https://github.com/mdsol/mauth-client-python.git```This will also install the dependencies.To resolve using a requirements file, the index URL can be specified in the first line of the file:```--index-url https://&lt;username&gt;:&lt;password&gt;@mdsol.jfrog.io/mdsol/api/pypi/pypi-packages/simple/mauth-client==&lt;latest version&gt;```## Usage### Signing Outgoing Requests```pythonimport requestsfrom mauth_client.requests_mauth import MAuth# MAuth configurationAPP_UUID = &quot;&lt;MAUTH_APP_UUID&gt;&quot;private_key = open(&quot;private.key&quot;, &quot;r&quot;).read()mauth = MAuth(APP_UUID, private_key)# Call an MAuth protected resource, in this case an iMedidata API# listing the studies for a particular useruser_uuid = &quot;10ac3b0e-9fe2-11df-a531-12313900d531&quot;url = &quot;https://innovate.imedidata.com/api/v2/users/{}/studies.json&quot;.format(user_uuid)# Make the requests call, passing the auth clientresult = requests.get(url, auth=mauth)# Print resultsif result.status_code == 200:    print([r[&quot;uuid&quot;] for r in result.json()[&quot;studies&quot;]])print(result.text)```The `mauth_sign_versions` option can be set as an environment variable to specify protocol versions to sign outgoing requests:| Key                   | Value                                                                                || --------------------- | ------------------------------------------------------------------------------------ || `MAUTH_SIGN_VERSIONS` | **(optional)** Comma-separated protocol versions to sign requests. Defaults to `v1`. |This option can also be passed to the constructor:```pythonmauth_sign_versions = &quot;v1,v2&quot;mauth = MAuth(APP_UUID, private_key, mauth_sign_versions)```### Authenticating Incoming RequestsMAuth Client Python supports AWS Lambda functions and Flask applications to authenticate MAuth signed requests.The following variables are **required** to be configured in the environment variables:| Key            | Value                                                         || -------------- | ------------------------------------------------------------- || `APP_UUID`     | APP_UUID for the AWS Lambda function                          || `PRIVATE_KEY`  | Encrypted private key for the APP_UUID                        || `MAUTH_URL`    | MAuth service URL (e.g. https://mauth-innovate.imedidata.com) |The following variables can optionally be set in the environment variables:| Key                    | Value                                                                                     || ---------------------- | ----------------------------------------------------------------------------------------- || `MAUTH_API_VERSION`    | **(optional)** MAuth API version. Only `v1` exists as of this writing. Defaults to `v1`.  || `MAUTH_MODE`           | **(optional)** Method to authenticate requests. `local` or `remote`. Defaults to `local`. || `V2_ONLY_AUTHENTICATE` | **(optional)** Authenticate requests with only V2. Defaults to `False`.                   |#### AWS Lambda functions```pythonfrom mauth_client.lambda_authenticator import LambdaAuthenticatorauthenticator = LambdaAuthenticator(method, url, headers, body)authentic, status_code, message = authenticator.is_authentic()app_uuid = authenticator.get_app_uuid()```#### WSGI ApplicationsTo apply to a WSGI application you should use the `MAuthWSGIMiddleware`. Youcan make certain paths exempt from authentication by passing the `exempt`option with a set of paths to exempt.Here is an example for Flask. Note that requesting app's UUID and theprotocol version will be added to the request environment for successfullyauthenticated requests.```pythonfrom flask import Flask, request, jsonifyfrom mauth_client.consts import ENV_APP_UUID, ENV_PROTOCOL_VERSIONfrom mauth_client.middlewares import MAuthWSGIMiddlewareapp = Flask(&quot;MyApp&quot;)app.wsgi_app = MAuthWSGIMiddleware(app.wsgi_app, exempt={&quot;/app_status&quot;})@app.get(&quot;/&quot;)def root():    return jsonify({        &quot;msg&quot;: &quot;authenticated&quot;,        &quot;app_uuid&quot;: request.environ[ENV_APP_UUID],        &quot;protocol_version&quot;: request.environ[ENV_PROTOCOL_VERSION],    })@app.get(&quot;/app_status&quot;)    return &quot;this route is exempt from authentication&quot;```#### ASGI ApplicationsTo apply to an ASGI application you should use the `MAuthASGIMiddleware`. Youcan make certain paths exempt from authentication by passing the `exempt`option with a set of paths to exempt.Here is an example for FastAPI. Note that requesting app's UUID and theprotocol version will be added to the ASGI `scope` for successfullyauthenticated requests.```pythonfrom fastapi import FastAPI, Requestfrom mauth_client.consts import ENV_APP_UUID, ENV_PROTOCOL_VERSIONfrom mauth_client.middlewares import MAuthASGIMiddlewareapp = FastAPI()app.add_middleware(MAuthASGIMiddleware, exempt={&quot;/app_status&quot;})@app.get(&quot;/&quot;)async def root(request: Request):    return {        &quot;msg&quot;: &quot;authenticated&quot;,        &quot;app_uuid&quot;: request.scope[ENV_APP_UUID],        &quot;protocol_version&quot;: request.scope[ENV_PROTOCOL_VERSION],    }@app.get(&quot;/app_status&quot;)async def app_status():    return {        &quot;msg&quot;: &quot;this route is exempt from authentication&quot;,    }```## ContributingSee [CONTRIBUTING](CONTRIBUTING.md)</longdescription>
</pkgmetadata>