<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pycrtsh![PyPI](https://img.shields.io/pypi/v/pycrtsh)![PyPI - Downloads](https://img.shields.io/pypi/dm/pycrtsh)![GitHub](https://img.shields.io/github/license/te-k/pycrtsh)Python 3 library to request https://crt.sh/## InstallTo install pycrtsh, you will first need to install [lxml](https://lxml.de/installation.html) and [psycopg2](https://www.psycopg.org/docs/install.html#prerequisites) depencies, on debian-like distributions this command should do it `sudo apt-get install libxml2-dev libxslt-dev libpq-dev python-dev` (otherwise, please refer to the doc).Then you can install it directly from [PyPi](https://pypi.org/project/pycrtsh/) : `pip install pycrtsh`Or from sources :```bashgit clone git@github.com:Te-k/pycrtsh.gitcd pycrtshpip install .```## CLI```$ certsh domain github.com157394275       2017-06-19T00:00:00     2017-06-19T00:00:00     C=US, O=DigiCert Inc, CN=DigiCert ECC Secure Server CA157394064       2017-06-19T00:00:00     2017-06-19T00:00:00     C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA146290136       2017-05-30T00:00:00     2017-05-25T00:00:00     C=BE, O=GlobalSign nv-sa, CN=GlobalSign Organization Validation CA - SHA256 - G2110799854       2017-03-31T00:00:00     2017-03-23T00:00:00     C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA110109609       2017-03-29T00:00:00     2017-03-20T00:00:00     C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA108108576       2017-03-23T00:00:00     2017-03-23T00:00:00     C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA107288158       2017-03-21T00:00:00     2017-03-20T00:00:00     C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA[SNIP]$ certsh cert 1357978{    &quot;cert&quot;: {        &quot;extensions&quot;: {            &quot;alternative_names&quot;: [                &quot;*.github.com&quot;,                &quot;github.com&quot;            ],            &quot;authority_information_access&quot;: {                &quot;CA Issuers&quot;: &quot;URI:http://cacerts.digicert.com/DigiCertHighAssuranceCA-3.crt&quot;,                &quot;OCSP&quot;: &quot;URI:http://ocsp.digicert.com&quot;            },            &quot;authority_key_identifier&quot;: &quot;50EA7389DB29FB108F9EE50120D4DE79994883F7&quot;,            &quot;basic_constraints&quot;: false,            &quot;crl_distribution&quot;: {                &quot;url&quot;: &quot;http://crl3.digicert.com/ca3-g18.crl&quot;            },            &quot;extended_key_usage&quot;: {                &quot;usage&quot;: [                    &quot;TLS Web Server Authentication&quot;,                    &quot;TLS Web Client Authentication&quot;                ]            },            &quot;key_usage&quot;: {                &quot;critical&quot;: true,                &quot;usage&quot;: [                    &quot;Digital Signature&quot;,                    &quot;Key Encipherment&quot;                ]            },            &quot;subject_key_identifier&quot;: &quot;BD0E3B9747B4967C3769706F79EB34B215293F5F&quot;        },        &quot;id&quot;: &quot;1357978&quot;,        &quot;issuer&quot;: {            &quot;commonName&quot;: &quot;DigiCert High Assurance CA-3&quot;,            &quot;countryName&quot;: &quot;US&quot;,            &quot;id&quot;: &quot;29&quot;,            &quot;organizationName&quot;: &quot;DigiCert Inc&quot;,            &quot;organizationalUnitName&quot;: &quot;www.digicert.com&quot;        },        &quot;not_after&quot;: &quot;2014-02-05T12:00:00+00:00&quot;,        &quot;not_before&quot;: &quot;2013-01-28T00:00:00+00:00&quot;,        &quot;publickey&quot;: {            &quot;algorithm&quot;: &quot;rsaEncryption&quot;,            &quot;exponent&quot;: &quot;65537&quot;,            &quot;modulus&quot;: &quot;00d1f7c403dd3f82cd4e80c6f53c3ac79d694d10fd2dd166487a7f01e049f310336915b00fae14d75f40a62d671be136498509efaff270d27511dcee830b87207ecdf3fc3bb56efc5c3633aa7b7588cc67f3b6c28cf551700958d2ed52a46a4636c78d92aef0b85388a9ecf517b04b09fcb57c0c5d5eec59c86ed6983302b6832c258dff8ef2eb4f43f01bc7dde659a043cd95182d3a0906f1bf9dbbe93adc82b2f01204157352d0f4d44ddae38f7393f5a2d75f235ba0d4152a8e45150345ba0ba58914ff93461352c773662c1a99c12eaf540c6a77fbe989d949397ec3f39705717372190b0eac9e502f3df7e1f03fe08d06857e1e920847c053887e0a6417a7&quot;,            &quot;sha256&quot;: &quot;664972c80a1624ee99d0b6bdcf4e8624abda3ecc49dcaf283a3b958daf28eac7&quot;,            &quot;size&quot;: 2048        },        &quot;serial&quot;: &quot;0eada97535df71387222e9cc45b026da&quot;,        &quot;sha1&quot;: &quot;0792C0A4E7123A199BAD31BB0A93A2328146C24A&quot;,        &quot;sha256&quot;: &quot;8216887A031C3A28FF7A9ECF18815CEA5016A0FF09F72D4EBECFDF3AA4CCD3B1&quot;,        &quot;signature&quot;: &quot;a6afbb63af12d1d0777c7708593395798b8972b8f522f3fd8e86cd877fd6f5221ae1f0a33b0d08c0d3113f62b013a0603079d299b3d8bb1ad76af03fb005f1562123a0146e6b9817c1ce297b603aa7d6edfbabf32665c52e5a43bd8d3c534cbf13ad4a461389e0ffbbcc32cb586bb412fe0cf8a29a49663472123e9d2225576779f8b888a9c0abc55e44d86cf1be6cc5e5a91abc3d0be11bc1cfdcb8cb49b9484c955c7e6927ae9afa92d3f9c312442f75e61a10ce0e860f3a06344386d2869ae6e8424b724201c1493fc15fbdd1b59e6789fb1bcd7a502701e5f6837a473342c9ca021245d74ed5551d46ca7d9da55c3c233e7d6dd30486e02e847423ac9017&quot;,        &quot;signature_algorithm&quot;: &quot;sha1WithRSAEncryption&quot;,        &quot;subject&quot;: {            &quot;commonName&quot;: &quot;*.github.com&quot;,            &quot;countryName&quot;: &quot;US&quot;,            &quot;localityName&quot;: &quot;San Francisco&quot;,            &quot;organizationName&quot;: &quot;Github, Inc.&quot;,            &quot;stateOrProvinceName&quot;: &quot;California&quot;        },        &quot;version&quot;: &quot;3&quot;    },    &quot;found&quot;: true}```Usage:```usage: certsh [-h] {cert,domain,subdomains} ...Request crt.shpositional arguments:  {cert,domain,subdomains}                        Commands    cert                Query a certificate (id, sha1, sha256 or                        serial)    domain              List certs related to a domain    subdomains          List sub-domains from a domain based on                        existing certificates```## API```pythonfrom pycrtsh import Crtshc = Crtsh()certs = c.search(&quot;github.com&quot;)details = c.get(certs[0][&quot;id&quot;], type=&quot;id&quot;)```See the detailed API on [Read the docs](https://pycrtsh.readthedocs.io/en/latest/)## TestsYou can run tests with `pytest`## LicenceThis code is published under MIT license</longdescription>
</pkgmetadata>