<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># curl_cffiPython binding for [curl-impersonate](https://github.com/lwthiker/curl-impersonate)via [cffi](https://cffi.readthedocs.io/en/latest/).[Documentation](https://curl-cffi.readthedocs.io) | [中文 README](https://github.com/yifeikong/curl_cffi/blob/master/README-zh.md)Unlike other pure python http clients like `httpx` or `requests`, `curl_cffi` canimpersonate browsers' TLS signatures or JA3 fingerprints. If you are blocked by somewebsite for no obvious reason, you can give this package a try.## Features- Supports JA3/TLS and http2 fingerprints impersonation.- Much faster than requests/httpx/tls_client, on par with aiohttp/pycurl, see [benchmarks](https://github.com/yifeikong/curl_cffi/tree/master/benchmark).- Mimics requests API, no need to learn another one.- Pre-compiled, so you don't have to compile on your machine.- Supports `asyncio` with proxy rotation on each request.- Supports http 2.0, which requests does not.## Install    pip install curl_cffi --upgradeThis should work on Linux(x86_64/aarch64), macOS(Intel/Apple Silicon) and Windows(amd64).If it does not work on you platform, you may need to compile and install `curl-impersonate`first and set some environment variables like `LD_LIBRARY_PATH`.To install beta releases:    pip install curl_cffi --pre## Usage### requests-like```pythonfrom curl_cffi import requests# Notice the impersonate parameterr = requests.get(&quot;https://tls.browserleaks.com/json&quot;, impersonate=&quot;chrome110&quot;)print(r.json())# output: {..., &quot;ja3n_hash&quot;: &quot;aa56c057ad164ec4fdcb7a5a283be9fc&quot;, ...}# the js3n fingerprint should be the same as target browser# http/socks proxies are supportedproxies = {&quot;https&quot;: &quot;http://localhost:3128&quot;}r = requests.get(&quot;https://tls.browserleaks.com/json&quot;, impersonate=&quot;chrome110&quot;, proxies=proxies)proxies = {&quot;https&quot;: &quot;socks://localhost:3128&quot;}r = requests.get(&quot;https://tls.browserleaks.com/json&quot;, impersonate=&quot;chrome110&quot;, proxies=proxies)```### Sessions```python# sessions are supporteds = requests.Session()# httpbin is a http test websites.get(&quot;https://httpbin.org/cookies/set/foo/bar&quot;)print(s.cookies)# &lt;Cookies[&lt;Cookie foo=bar for httpbin.org /&gt;]&gt;r = s.get(&quot;https://httpbin.org/cookies&quot;)print(r.json())# {'cookies': {'foo': 'bar'}}```Supported impersonate versions, as supported by [curl-impersonate](https://github.com/lwthiker/curl-impersonate):- chrome99- chrome100- chrome101- chrome104- chrome107- chrome110- chrome99_android- edge99- edge101- safari15_3- safari15_5### asyncio```pythonfrom curl_cffi.requests import AsyncSessionasync with AsyncSession() as s:    r = await s.get(&quot;https://example.com&quot;)```More concurrency:```pythonimport asynciofrom curl_cffi.requests import AsyncSessionurls = [    &quot;https://googel.com/&quot;,    &quot;https://facebook.com/&quot;,    &quot;https://twitter.com/&quot;,]async with AsyncSession() as s:    tasks = []    for url in urls:        task = s.get(&quot;https://example.com&quot;)        tasks.append(task)    results = await asyncio.gather(*tasks)```### curl-likeAlternatively, you can use the low-level curl-like API:```pythonfrom curl_cffi import Curl, CurlOptfrom io import BytesIObuffer = BytesIO()c = Curl()c.setopt(CurlOpt.URL, b'https://tls.browserleaks.com/json')c.setopt(CurlOpt.WRITEDATA, buffer)c.impersonate(&quot;chrome110&quot;)c.perform()c.close()body = buffer.getvalue()print(body.decode())```See the [docs](https://curl-cffi.readthedocs.io) for more details.## Acknowledgement- Originally forked from [multippt/python_curl_cffi](https://github.com/multippt/python_curl_cffi), which is under the MIT license.- Headers/Cookies files are copied from [httpx](https://github.com/encode/httpx/blob/master/httpx/_models.py), which is under the BSD license.- Asyncio support is inspired by Tornado's curl http client.</longdescription>
</pkgmetadata>