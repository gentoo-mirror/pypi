<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://epsagon.com&quot; target=&quot;_blank&quot; align=&quot;center&quot;&gt;    &lt;img src=&quot;https://cdn2.hubspot.net/hubfs/4636301/Positive%20RGB_Logo%20Horizontal%20-01.svg&quot; width=&quot;300&quot;&gt;  &lt;/a&gt;  &lt;br /&gt;&lt;/p&gt;[![Build Status](https://travis-ci.com/epsagon/epsagon-python.svg?token=wsveVqcNtBtmq6jpZfSf&amp;branch=master)](https://travis-ci.com/epsagon/epsagon-python)[![Pyversions](https://img.shields.io/pypi/pyversions/epsagon.svg?style=flat)](https://pypi.org/project/epsagon/)[![PypiVersions](https://img.shields.io/pypi/v/epsagon.svg)](https://pypi.org/project/epsagon/)# Epsagon Tracing for Python![Trace](trace.png)This package provides tracing to Python applications for the collection of distributed tracing and performance metrics in [Epsagon](https://app.epsagon.com/?utm_source=github).## Contents- [Installation](#installation)- [Usage](#usage)  - [Auto-tracing](#auto-tracing)  - [Calling the SDK](#calling-the-sdk)  - [Tagging Traces](#tagging-traces)  - [Measuring Function Duration](#measuring-function-duration)  - [Custom Errors](#custom-errors)  - [Filter Sensitive Data](#filter-sensitive-data)  - [Ignore Endpoints](#ignore-endpoints)  - [Trace URL](#trace-url)- [Frameworks](#frameworks)- [Integrations](#integrations)- [Configuration](#configuration)- [Getting Help](#getting-help)- [Opening Issues](#opening-issues)- [License](#license)## InstallationTo install Epsagon, simply run:```shpip install -U epsagon```## Usage### Auto-tracingThe simplest way to get started is to run your python command with the following environment variable:```shexport EPSAGON_TOKEN=&lt;epsagon-token&gt;export EPSAGON_APP_NAME=&lt;app-name-stage&gt;export EPSAGON_METADATA=FALSEexport AUTOWRAPT_BOOTSTRAP=epsagon&lt;python command&gt;```For example:```shexport EPSAGON_TOKEN=&lt;your-token&gt;export EPSAGON_APP_NAME=django-prodexport EPSAGON_METADATA=FALSEexport AUTOWRAPT_BOOTSTRAP=epsagonpython app.py```When using inside a `Dockerfile`, you can use `ENV` instead of `export`.You can see the list of auto-tracing [supported frameworks](#frameworks)### Calling the SDKAnother simple alternative is to copy the snippet into your code:```pythonimport epsagonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False,)```To run on your framework please refer to [supported frameworks](#frameworks)### Tagging TracesYou can add custom tags to your traces, for easier filtering and aggregations.Add the following call inside your code:```pythonepsagon.label('key', 'value')epsagon.label('user_id', user_id)```You can also use it to ship custom metrics:```pythonepsagon.label('key', 'metric')epsagon.label('items_in_cart', items_in_cart)```Valid types are `string`, `bool`, `int` and `float`.In some [frameworks](#frameworks) tagging can be done in different ways.### Measuring Function DurationYou can measure internal functions duration by using the `@epsagon.measure` decorator. For example:```python@epsagon.measuredef heavy_calculation():    # Code...```This will ship another metric label to epsagon where the `key=heavy_calculation_duration` and the value will be the actual duration, in seconds.You'll be able to see this label in the trace search, visualize it over time, and generate alerts based on this metric.### Custom ErrorsYou can set a trace as an error (although handled correctly) to get an alert or just follow it on the dashboard.Add the following call inside your code:```pythontry:    fail = 1 / 0except Exception as ex:    epsagon.error(ex)# Or manually specify Exception objectepsagon.error(Exception('My custom error'))```In some [frameworks](#frameworks) custom errors can be declared in different ways.### Filter Sensitive DataYou can pass a list of sensitive properties and hostnames and they will be filtered out from the traces:```pythonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False,    keys_to_ignore=['password', 'user_name'],    url_patterns_to_ignore=['example.com', 'auth.com'])```Or specify keys that are allowed:```pythonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False,    keys_to_allow=['Request Data', 'Status_Code'],)```The `keys_to_ignore` and `keys_to_allow` properties can contain strings (will perform a loose match, so that `First Name` also matches `first_name`).Also, you can set `url_patterns_to_ignore` to ignore HTTP calls to specific domains.### Ignore EndpointsYou can ignore certain incoming requests by specifying endpoints:```pythonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False,    ignored_endpoints=['/healthcheck'],)```### Trace URLYou can get the Epsagon dashboard URL for the current trace, using the following:```pythonimport epsagon# Inside some endpoint or functionprint('Epsagon trace URL:', epsagon.get_trace_url())```This can be useful to have an easy access the trace from different platforms.## FrameworksThe following frameworks are supported by Epsagon:|Framework                               |Supported Version          |Auto-tracing Supported                               ||----------------------------------------|---------------------------|-----------------------------------------------------||[AWS Lambda](#aws-lambda)               |All                        |&lt;ul&gt;&lt;li&gt;- [x] (Through the dashboard only)&lt;/li&gt;&lt;/ul&gt; ||[Step Functions](#step-functions)       |All                        |&lt;ul&gt;&lt;li&gt;- [ ] &lt;/li&gt;&lt;/ul&gt;                             ||[Generic](#generic)                     |All                        |&lt;ul&gt;&lt;li&gt;- [ ] &lt;/li&gt;&lt;/ul&gt;                             ||[Gunicorn](#gunicorn)                   |`&gt;=20.0.4`                 |&lt;ul&gt;&lt;li&gt;- [x] &lt;/li&gt;&lt;/ul&gt;                             ||[Django](#django)                       |`&gt;=1.11`                   |&lt;ul&gt;&lt;li&gt;- [x] &lt;/li&gt;&lt;/ul&gt;                             ||[Flask](#flask)                         |`&gt;=0.5`                    |&lt;ul&gt;&lt;li&gt;- [x] &lt;/li&gt;&lt;/ul&gt;                             ||[Tornado](#tornado)                     |`&gt;=4.0`                    |&lt;ul&gt;&lt;li&gt;- [x] &lt;/li&gt;&lt;/ul&gt;                             ||[fastapi](#fastapi)                     |`&gt;=0.62.0`                 |&lt;ul&gt;&lt;li&gt;- [x] &lt;/li&gt;&lt;/ul&gt;                             ||[Celery](#celery)                       |`&gt;=4.0.0`                  |&lt;ul&gt;&lt;li&gt;- [x] &lt;/li&gt;&lt;/ul&gt;                             ||[Azure Functions](#azure-functions)     |`&gt;=2.0.0`                  |&lt;ul&gt;&lt;li&gt;- [ ] &lt;/li&gt;&lt;/ul&gt;                             ||[Chalice](#chalice)                     |`&gt;=1.0.0`                  |&lt;ul&gt;&lt;li&gt;- [ ] &lt;/li&gt;&lt;/ul&gt;                             ||[Zappa](#zappa)                         |`&gt;=0.30.0`                 |&lt;ul&gt;&lt;li&gt;- [ ] &lt;/li&gt;&lt;/ul&gt;                             |### AWS LambdaTracing Lambda functions can be done in three methods:1. Auto-tracing through the Epsagon dashboard.2. Using the [`serverless-plugin-epsagon`](https://github.com/epsagon/serverless-plugin-epsagon) if you're using The Serverless Framework.3. Calling the SDK.**Make sure to choose just one of the methods**Calling the SDK is simple:```pythonimport epsagonepsagon.init(    token='&lt;epsagon-token&gt;',    app_name='&lt;app-name-stage&gt;',    metadata_only=False,)# Wrap your entry point:@epsagon.lambda_wrapperdef handle(event, context):    # Your code is here```### Step FunctionsTracing Step Functions is similar to regular Lambda functions, but the wrapper changes from `lambda_wrapper` to `step_lambda_wrapper`:```pythonimport epsagonepsagon.init(    token='&lt;epsagon-token&gt;',    app_name='&lt;app-name-stage&gt;',    metadata_only=False,)# Wrap your entry point:@epsagon.step_lambda_wrapperdef handle(event, context):    # Your code is here```### DjangoTracing Django application can be done in two methods:1. [Auto-tracing](#auto-tracing) using the environment variable.2. Calling the SDK.Calling the SDK is simple, and should be done in your main `settings.py` file where the application is being initialized:```pythonimport epsagonepsagon.init(    token='&lt;epsagon-token&gt;',    app_name='&lt;app-name-stage&gt;',    metadata_only=False,)```### FlaskTracing Flask application can be done in two methods:1. [Auto-tracing](#auto-tracing) using the environment variable.2. Calling the SDK.Calling the SDK is simple, and should be done in your main `py` file where the application is being initialized:```pythonimport epsagonepsagon.init(    token='&lt;epsagon-token&gt;',    app_name='&lt;app-name-stage&gt;',    metadata_only=False,)```### TornadoTracing Tornado application can be done in two methods:1. [Auto-tracing](#auto-tracing) using the environment variable.2. Calling the SDK.Calling the SDK is simple, and should be done in your main `py` file where the application is being initialized:```pythonimport epsagonepsagon.init(    token='&lt;epsagon-token&gt;',    app_name='&lt;app-name-stage&gt;',    metadata_only=False,)```### fastapiTracing fastapi application can be done in two methods:1. [Auto-tracing](#auto-tracing) using the environment variable.2. Calling the SDK.Calling the SDK is simple, and should be done in your main `py` file where the application is being initialized:```pythonimport epsagonepsagon.init(    token='&lt;epsagon-token&gt;',    app_name='&lt;app-name-stage&gt;',    metadata_only=False,)```### CeleryTracing Celery consumer can be done in two methods:1. [Auto-tracing](#auto-tracing) using the environment variable.2. Calling the SDK.Calling the SDK is simple, and should be done in your main `py` file where the consumer is being initialized:```pythonimport epsagonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False,)```### GunicornTracing Gunicorn application can be done in two methods:1. [Auto-tracing](#auto-tracing) using the environment variable.2. Calling the SDK.Calling the SDK is simple, and should be done in your main `py` file where the application is being initialized:```pythonimport epsagonepsagon.init(    token='&lt;epsagon-token&gt;',    app_name='&lt;app-name-stage&gt;',    metadata_only=False,)```### Azure FunctionsTracing Azure Functions can be done in the following method:```pythonimport azure.functions as funcimport epsagonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False,)@epsagon.azure_wrapperdef main(req):    return func.HttpResponse('Success')```### ChaliceTracing Chalice applications running on Lambda functions can be done by:```pythonfrom chalice import Chaliceimport epsagonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False)app = Chalice(app_name='hello-world')# Your code is hereapp = epsagon.chalice_wrapper(app)```### ZappaTracing web applications running on Lambda functions using Zappa can be done by:```pythonfrom zappa.handler import lambda_handlerimport epsagonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False)# Your code is hereepsagon_handler = epsagon.lambda_wrapper(lambda_handler)```And in your `zappa_settings.json` file include the following:```json{  &quot;lambda_handler&quot;: &quot;module.path_to.epsagon_handler&quot;}```### GenericFor any tracing, you can simply use the generic Epsagon wrapper using the following example:```pythonimport epsagonepsagon.init(    token='epsagon-token',    app_name='app-name-stage',    metadata_only=False,)# Wrap your entry point:@epsagon.python_wrapper(name='my-resource')def main(params):    # Your code is here```## IntegrationsEpsagon provides out-of-the-box instrumentation (tracing) for many popular frameworks and libraries.|Library             |Supported Version          ||--------------------|---------------------------||logging             |Fully supported            ||urllib              |Fully supported            ||urllib3             |Fully supported            ||requests            |`&gt;=2.0.0`                  ||httplib2            |`&gt;=0.9.2`                  ||redis               |`&gt;=2.10.0`                 ||pymongo             |`&gt;=3.0.0`                  ||pynamodb            |`&gt;=2.0.0`                  ||PyMySQL             |`&gt;=0.7.0`                  ||MySQLdb             |`&gt;=1.0.0`                  ||psycopg2            |`&gt;=2.2.0`                  ||pg8000              |`&gt;=1.9.0`                  ||botocore (boto3)    |`&gt;=1.4.0`                  ||azure.cosmos        |`&gt;=4.0.0`                  ||celery              |`&gt;=4.0.0`                  ||greengrasssdk       |`&gt;=1.4.0`                  ||SQLAlchemy          |`&gt;=1.2.0,&lt;1.4.0`           ||kafka-python        |`&gt;=1.4.0`                  |## ConfigurationAdvanced options can be configured as a parameter to the init() method or as environment variables.|Parameter               |Environment Variable           |Type   |Default      |Description                                                                        ||----------------------  |------------------------------ |-------|-------------|-----------------------------------------------------------------------------------||token                   |EPSAGON_TOKEN                  |String |-            |Epsagon account token                                                              ||app_name                |EPSAGON_APP_NAME               |String |`Application`|Application name that will be set for traces                                       ||metadata_only           |EPSAGON_METADATA               |Boolean|`True`       |Whether to send only the metadata (`True`) or also the payloads (`False`)          ||use_ssl                 |EPSAGON_SSL                    |Boolean|`True`       |Whether to send the traces over HTTPS SSL or not                                   ||collector_url           |EPSAGON_COLLECTOR_URL          |String |-            |The address of the trace collector to send trace to                                ||keys_to_ignore          |EPSAGON_IGNORED_KEYS           |List   |-            |List of keys names to be removed from the trace                                    ||keys_to_allow           |EPSAGON_ALLOWED_KEYS           |List   |-            |List of keys names to be included from the trace                                   ||ignored_endpoints       |EPSAGON_ENDPOINTS_TO_IGNORE    |List   |-            |List of endpoints to ignore from tracing (for example `/healthcheck`               ||url_patterns_to_ignore  |EPSAGON_URLS_TO_IGNORE         |List   |`[]`         |Array of URL patterns to ignore the calls                                          ||debug                   |EPSAGON_DEBUG                  |Boolean|`False`      |Enable debug prints for troubleshooting                                            ||disable_timeout_send    |EPSAGON_DISABLE_ON_TIMEOUT     |Boolean|`False`      |Disable timeout detection in Lambda functions                                      ||split_on_send           |EPSAGON_SPLIT_ON_SEND          |Boolean|`False`      |Split the trace into multiple chunks to support large traces                       ||propagate_lambda_id     |EPSAGON_PROPAGATE_LAMBDA_ID    |Boolean|`False`      |Insert Lambda request ID into the response payload                                 ||logging_tracing_enabled |EPSAGON_LOGGING_TRACING_ENABLED|Boolean|`True`      |Add Epsagon Log Id to all `logging` messages                            ||step_dict_output_path |EPSAGON_STEPS_OUTPUT_PATH|List|`None`      |Path in the result dict to append the Epsagon steps data  ||-                       |EPSAGON_HTTP_ERR_CODE          |Integer|`500`        |The minimum number of an HTTP response status code to treat as an error            ||-                       |EPSAGON_SEND_TIMEOUT_SEC       |Float  |`1.0`        |The timeout duration in seconds to send the traces to the trace collector          ||-                       |EPSAGON_DISABLE_LOGGING_ERRORS |Boolean|`False`      |Disable the automatic capture of error messages into `logging`                     ||-                       |EPSAGON_IGNORE_FLASK_RESPONSE  |Boolean|`False`      |Disable the automatic capture of Flask response data                     ||-                       |EPSAGON_SKIP_HTTP_RESPONSE     |Boolean|`False`      |Disable the automatic capture of http client response data                     ||-                       |DISABLE_EPSAGON                |Boolean|`False`      |A flag to completely disable Epsagon (can be used for tests or locally)            ||-                       |DISABLE_EPSAGON_PATCH          |Boolean|`False`      |Disable the library patching (instrumentation)                                     ||-                       |EPSAGON_LAMBDA_TIMEOUT_THRESHOLD_MS          |Integer|`200`      |The threshold in millieseconds to send the trace before a Lambda timeout occurs                                     ||-                       |EPSAGON_PAYLOADS_TO_IGNORE     |List   |-            |Array of dictionaries to not instrument. Example: `'[{&quot;source&quot;: &quot;serverless-plugin-warmup&quot;}]'` ||-                       |EPSAGON_REMOVE_EXCEPTION_FRAMES|Boolean|`False`      |Disable the automatic capture of exception frames data (Python 3)                             ||-                       |EPSAGON_FASTAPI_ASYNC_MODE|Boolean|`False`      |Enable capturing of Fast API async endpoint handlers calls(Python 3)                             |## Getting HelpIf you have any issue around using the library or the product, please don't hesitate to:* Use the [documentation](https://docs.epsagon.com).* Use the help widget inside the product.* Open an issue in GitHub.## Opening IssuesIf you encounter a bug with the Epsagon library for Python, we want to hear about it.When opening a new issue, please provide as much information about the environment:* Library version, Python runtime version, dependencies, etc.* Snippet of the usage.* A reproducible example can really help.The GitHub issues are intended for bug reports and feature requests.For help and questions about Epsagon, use the help widget inside the product.## LicenseProvided under the MIT license. See LICENSE for details.Copyright 2020, Epsagon</longdescription>
</pkgmetadata>