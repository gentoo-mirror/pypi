<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================================================================Python wrapper for the UNIX &quot;dialog&quot; utility===============================================================================Easy writing of graphical interfaces for terminal-based applications-------------------------------------------------------------------------------Overview--------pythondialog is a Python wrapper for the UNIX dialog_ utilityoriginally written by Savio Lam and later rewritten by Thomas E. Dickey.Its purpose is to provide an easy to use, pythonic and as complete aspossible interface to dialog_ from Python code... _dialog: https://invisible-island.net/dialog/dialog.htmlpythondialog is free software, licensed under the GNU LGPL (GNU LesserGeneral Public License). Its home page is located at:  https://pythondialog.sourceforge.io/and contains a `short example`_, screenshots_, a `summary of the recentchanges`_, links to the `documentation`_, the `Git repository`_, the`mailing list`_, the `issue tracker`_, etc... _short example:  https://pythondialog.sourceforge.io/#example.. _screenshots:    https://pythondialog.sourceforge.io/gallery.html.. _summary of the recent changes:                    https://pythondialog.sourceforge.io/news.html.. _documentation:  https://pythondialog.sourceforge.io/doc/.. _Git repository: https://sourceforge.net/p/pythondialog/code/.. _mailing list:   https://sourceforge.net/p/pythondialog/mailman/.. _issue tracker:  https://sourceforge.net/p/pythondialog/_list/ticketsIf you want to get a quick idea of what this module allows one to do,you can download a release tarball and run ``demo.py``::  PYTHONPATH=. python3 examples/demo.pyWhat is pythondialog good for? What are its limitations?--------------------------------------------------------As you might infer from the name, dialog is a high-level program thatgenerates dialog boxes. So is pythondialog. They allow you to build niceinterfaces quickly and easily, but you don't have full control over thewidgets, nor can you create new widgets without modifying dialog itself.If you need to do low-level stuff, you should have a look at `ncurses`_(cf. the ``curses`` module in the Python standard library), `blessings`_or slang instead. For sophisticated text-mode interfaces, the `UrwidPython library`_ looks rather interesting, too... _ncurses: https://invisible-island.net/ncurses/ncurses.html.. _blessings: https://github.com/erikrose/blessings.. _Urwid Python library: http://excess.org/urwid/Requirements------------* As of version 2.12, pythondialog requires Python 3.0 or later in the 3.x  series. pythondialog 3.5.3 has been tested with Python 3.9.* dialog_ version 1.3-20201126-1 (the version shipped in Debian stable  and unstable in November 2021) is `broken  &lt;https://bugs.debian.org/990043&gt;`_; don't waste your time with that  version. dialog_ 1.3-20210621 works fine.* Versions of pythondialog up to and including 3.5.1 had a backport to  Python 2, however this outdated Python dialect isn't supported  anymore. You may find pointers to the old packages with Python 2  support on the `pythondialog home page`_.  .. _pythondialog home page: https://pythondialog.sourceforge.io/* Apart from that, pythondialog requires the dialog_ program (or a  drop-in replacement for dialog). You can download dialog from:    https://invisible-island.net/dialog/dialog.html  Note that some features of pythondialog may require recent versions of  dialog.Quick installation instructions-------------------------------If you have a working `pip &lt;https://pypi.org/project/pip/&gt;`_ setup,you should be able to install pythondialog with::  pip install pythondialogWhen doing so, make sure that your ``pip`` executable runs with thePython 3 installation you want to install pythondialog for.For more detailed instructions, you can read the ``INSTALL`` file from arelease tarball. You may also want to consult the `pip documentation&lt;https://pip.pypa.io/&gt;`_.Documentation-------------The pythondialog Manual^^^^^^^^^^^^^^^^^^^^^^^The pythondialog Manual is written in `reStructuredText`_ format for the`Sphinx`_ documentation generator. The HTML documentation for the latestversion of pythondialog as rendered by Sphinx should be available at:  https://pythondialog.sourceforge.io/doc/.. _pythondialog Manual: https://pythondialog.sourceforge.io/doc/.. _reStructuredText: http://docutils.sourceforge.net/rst.html.. _Sphinx: https://www.sphinx-doc.org/en/master/.. _LaTeX: https://www.latex-project.org/.. _Make: https://www.gnu.org/software/make/The sources for the pythondialog Manual are located in the ``doc``top-level directory of the pythondialog distribution, but thedocumentation build process pulls many parts from ``dialog.py`` (mainlydocstrings).To generate the documentation yourself from ``dialog.py`` and thesources in the ``doc`` directory, first make sure you have `Sphinx`_ and`Make`_ installed. Then, you can go to the ``doc`` directory and type,for instance::  make htmlYou will then find the output in the ``_build/html`` subdirectory of``doc``. `Sphinx`_ can build the documentation in many other formats.For instance, if you have `LaTeX`_ installed, you can generate thepythondialog Manual in PDF format using::  make latexpdfYou can run ``make`` from the ``doc`` directory to see a list of theavailable formats. Run ``make clean`` to clean up after thedocumentation build process.For those who have installed `Sphinx`_ but not `Make`_, it is stillpossible to build the documentation with a command such as::  sphinx-build -b html . _build/htmlrun from the ``doc`` directory. Please refer to `sphinx-build`_ for moredetails... _sphinx-build: https://www.sphinx-doc.org/en/master/man/sphinx-build.htmlReading the docstrings from an interactive Python interpreter^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^If you have already installed pythondialog, you may consult itsdocstrings in an interactive Python interpreter this way::   &gt;&gt;&gt; import dialog; help(dialog)but only parts of the documentation are available using this method, andthe result is much less convenient to use than the `pythondialogManual`_ as generated by `Sphinx`_.Enabling Deprecation Warnings-----------------------------There are a few places in ``dialog.py`` that send a``DeprecationWarning`` to warn developers about obsolete features.However, because of:  - the dialog output to the terminal;  - the fact that such warnings are silenced by default since Python 2.7    and 3.2;you have to do two things in order to see them:  - redirect the standard error stream to a file;  - enable the warnings for the Python interpreter.For instance, to see the warnings produced when running the demo, youcan do::  PYTHONPATH=. python3 -Wd examples/demo.py 2&gt;/path/to/fileand examine ``/path/to/file``. This can also help you to find files thatare still open when your program exits.**Note:**  If your program is terminated by an unhandled exception while stderr  is redirected as in the preceding command, you won't see the traceback  until you examine the file stderr was redirected to. This can be  disturbing, as your program may exit with no apparent reason in such  conditions.For more explanations and other methods to enable deprecation warnings,please refer to:  https://docs.python.org/3/whatsnew/2.7.htmlTroubleshooting---------------If you have a problem with a pythondialog call, you should read itsdocumentation and the dialog(1) manual page. If this is not enough, youcan enable logging of shell command-line equivalents of all dialog callsmade by your program with a simple call to ``Dialog.setup_debug()``,first available in pythondialog 2.12 (the ``expand_file_opt`` parametermay be useful in versions 3.3 and later). An example of this can befound in ``demo.py`` from the ``examples`` directory.As of version 2.12, you can also enable this debugging facility for``demo.py`` by calling it with the ``--debug`` flag (possibly combinedwith ``--debug-expand-file-opt`` in pythondialog 3.3 and later, cf.``demo.py --help``).Using Xdialog instead of dialog-------------------------------As far as I can tell, `Xdialog`_ has not been ported to `GTK+`_ version2 or later. It is not in `Debian`_ stable nor unstable (November 30, 2019).It is not installed on my system (because of the GTK+ 1.2 dependency),and according to the Xdialog-specific patches I received from PeterÅstrand in 2004, was not a drop-in replacement for `dialog`_ (inparticular, Xdialog seemed to want to talk to the caller through stdoutinstead of stderr, grrrrr!)... _Xdialog: http://xdialog.free.fr/.. _GTK+: https://www.gtk.org/.. _Debian: https://www.debian.org/All this to say that, even though I didn't remove the options to useanother backend than dialog, nor did I remove the handful of little,non-invasive modifications that help pythondialog work better with`Xdialog`_, I don't really support the latter. I test everything withdialog, and nothing with Xdialog.That being said, here is the *old* text of this section (from 2004), incase you are still interested:  Starting with 2.06, there is an &quot;Xdialog&quot; compatibility mode that you  can use if you want pythondialog to run the graphical Xdialog program  (which *should* be found under http://xdialog.free.fr/) instead of  dialog (text-mode, based on the ncurses library).  The primary supported platform is still dialog, but as long as only  small modifications are enough to make pythondialog work with Xdialog,  I am willing to support Xdialog if people are interested in it (which  turned out to be the case for Xdialog).  The demo.py from pythondialog 2.06 has been tested with Xdialog 2.0.6  and found to work well (barring Xdialog's annoying behaviour with the  file selection dialog box).Whiptail, anyone?-----------------Well, pythondialog seems not to work very well with whiptail. The reasonis that whiptail is not compatible with dialog anymore. Although you cantell pythondialog the program you want it to invoke, only programs thatare mostly dialog-compatible are supported.History-------pythondialog was originally written by Robb Shecter. Sultanbek Tezadovadded some features to it (mainly the first gauge implementation, Iguess). Florent Rougon rewrote most parts of the program to make it morerobust and flexible so that it can give access to most features of thedialog program. Peter Åstrand took over maintainership between 2004 and2009, with particular care for the `Xdialog`_ support. Florent Rougontook over maintainership again starting from 2009.....   # Local Variables:  # coding: utf-8  # fill-column: 72  # End:</longdescription>
</pkgmetadata>