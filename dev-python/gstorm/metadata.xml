<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### never forget:`python setup.py sdist bdist_wheel &amp;&amp; python -m twine upload dist/* --skip-existing # UPLOAD TO PYPI`# python-gstormGraphql Simple Tiny Object Relational Mapping - Graphql ORM for python# Current features:## QUERY### AliasesThere are several aliases for most Query-building functions, which make queries more concise:- query  - q = query, example: `Type.q() # vs Type.query()`  - qm = query, example: `Type.qm() # vs Type.query()`- query_one  - q1 = query_one, example: `Type.q1() # vs Type.query_one()`  - qs = query_one, example: `Type.qs() # vs Type.query_one()`- filter  - fil = filter, example: `Type.q().fil(...) # vs Type.query().filter(...)`  - after    - long: `Type.query().filter(after={'attribute': x, 'date': y})`    - short: `Type.q().after(attr=x, date=y)`  - before    - long: `Type.query().filter(before={'attribute': x, 'date': y})`    - short: `Type.q().before(attr=x, date=y)`  - isNull    - long: `Type.query().filter(nullAttribute={'attribute': x, 'isNull': y})`    - short: `Type.q().isNull(attr=x, value=True)`    - shorter: `Type.q().isNull(attr=x)` (Defaults to True)- findBy  - fb = findBy, example: `Type.q(). # vs Type.query().`  - find = findBy, example: `Type.q(). # vs Type.query().`- orderBy  - ob = orderBy, example: `Type.q(). # vs Type.query().`  - order = orderBy, example: `Type.q(). # vs Type.query().`- limit  - lim = limit, example: `Type.q(). # vs Type.query().`- offset  - off = offset, example: `Type.q(). # vs Type.query().`- children  - child = children, example: `Type.q(). # vs Type.query().`  - ch = children, example: `Type.q(). # vs Type.query().`- get  - run = get### Query all```pythonfrom tests.models import Tankall_tanks = Tank.query().get() # returns -&gt; List[Tank]print(all_tanks) # [Tank(id=1,capacity=10),Tank(id=2,capacity=20),...]```### Query someYou can concatenate storm methods to manipulate the data and how you want to receive it,this methods may receive parameters in several ways:- filter(kwargs):  - `.filter(name='L1')`  - `.filter({'name': 'L1'})`  - `.filter(name='L1').filter(capacity=1250)`  - `.filter(name='L1', capacity=1250)`  - `.filter({'name': 'L1', 'capacity': 1250})`- orderBy(kwarg):  - Accepted keys = [asc, desc]  - Accepted values = GraphQLType ModelAttr enums.   - `.orderBy(asc=TypeAttrs.ID)`  - `.orderBy(desc=TypeAttrs.INSERTED_AT)`- limit(count)  - `.limit(1)````pythonfrom tests.models import Tankall_tanks = (  Tank.query()  .filter(capacity=1250)).get() # returns -&gt; List[Tank]print(all_tanks) # [Tank(id=1,capacity=10),Tank(id=3,capacity=10),...]```### Query one```pythonfrom tests.models import Tankmy_tank = Tank.query_one().findBy(id=3).get() # returns -&gt; Tankprint(my_tank) # Tank(id='3', name='R342', type='Reposo', capacity=0, room=None, inventories=[])```### Filters#### per field value (exact match, regex accepted)```pythonfrom tests.models import Tankgov_tanks = Tank.query().filter(type='^Gob').get()rest_tanks = Tank.query().filter(type='^Rep').get()print(len(gov_tanks))print(len(rest_tanks))```#### Null attribute```pythonfrom tests.models import Tankok_tanks = (  Tank.query().filter(nullAttribute= { 'attribute': 'CAPACITY', 'isNull': False })).get()print(ok_tanks)# short-hand versionfrom tests.models import Tankok_tanks = Tank.q().isNull(attr='CAPACITY', value=False).get()print(ok_tanks)# using null default value:from tests.models import Tankbad_tanks = Tank.q().isNull(attr='CAPACITY').get() # value param defaults to Trueprint(bad_tanks)```#### Comparison dates (after, before)```pythonfrom tests.models import BbtInventoryfrom datetime import datetime as dt, timedelta as tdfrom gstorm.helpers.date_helpers import get_iso8601_strtoday = get_iso8601_str(dt.now() - td(days=1))yesterday = get_iso8601_str(dt.now() - td(days=2))today_inventories = (  BbtInventory.query()    .filter(after={      'attribute': 'INSERTED_AT',      'date': &quot;2020-02-27T23:01:44Z&quot; # or: 'date': dt.now() - td(days=1)    })).get()print(today_inventories)# Short-hand versiontoday_inventories = (  BbtInventory.query()    .after(attr='INSERTED_AT', date=&quot;2020-02-27T23:01:44Z&quot;) # or: 'date': dt.now() - td(days=1)).get()print(today_inventories)# Short-hand versionyesterday_inventories = (  BbtInventory.query()    .after(attr='INSERTED_AT', date=yesterday)    .before(attr='INSERTED_AT', date=today)).get()print(yesterday_inventories)```### Ordering#### Asc, Desc, per field```pythonfrom tests.models import BbtInventorylatest_inventories = BbtInventory.query().orderBy(desc=BbtInventoryAttrs.ID).limit(5).get()print(latest_inventories)smallest_inventories = BbtInventory.query().orderBy(asc=BbtInventoryAttrs.VOLUME).limit(5).get()print(smallest_inventories)```### Limit```pythonfrom tests.models import BottlingLinefirst_10_lines = BottlingLine.query().limit(10).get()print(first_10_lines)```### Nested Queries```pythonfrom tests.models import BottlingOrder# We want to include the sub-attributes:guid = 'abc123'orders = BottlingOrder.query()._with({  'line': Line.query(),  'plans': BottlingPlan.query().orderBy(asc=BottlingPlanAttrs.ID),  'brightBeer': BrightBeer.query().filter(groupGuid=guid))}).print(orders[0])# &gt;&gt; BottlingOrder(id=1, name='123', line=Line(name='LINEA001'), ...)```### Pagination (API NOT FINAL)#### iterable```pythonfrom tests.models import Datumorder = {'desc': 'ID'}for datum_page in Datum.limit(100).offset(0).orderBy(asc=DatumAttrs.ORDER).paginate():  for datum in datum_page:    print(datum) # type: Datum(id=x,value=y)```#### Comparison numerical (&gt;, &gt;=, &lt;, &lt;=...)NOT WORKING IN VALIOT-APP# MUTATION## Create```pythonfrom tests.models import Tanktank = Tank.load(csv='tanks.csv').limit(1).get() # load from any sourceresponse = storm.create(tank) # GraphqlType object```## Update```pythonfrom tests.models import Tank[gov_tank] = Tank.query().filter(name='L').limit(1).get()# process data...# ...response = storm.update(gov_tank).apply() # GraphqlType object```## Upsert```pythonfrom tests.models import Tank[gov_tank] = Tank.load(csv='tanks.csv').limit(1).get() # load from any sourceresponse = storm.upsert(gov_tank).apply() # GraphqlType objectif not response.successful:  print(response.messages)# everything ok, do other stuff...print(gov_tank) # has updated data (New ID, etc)```## Single mutation**See above examples**## Multiple mutation### Sequential```pythonfrom tests.models import Tankgov_tanks = Tank.load(csv='tanks.csv').get() # load from any source# ! OPTION 1: one by onefor tank in gov_tanks:  response = storm.upsert(tank).apply() # GraphqlType object  print(tank) # has updated data (New ID, etc)# ! OPTION 2: All handled by storm:response = storm.upsert(gov_tanks).apply()# response type -&gt; List[GraphqlMutationResponse]```### Batch (Multiple mutations in single Mutation tag)```pythonfrom tests.models import Tankfrom storm import UploadMode as modegov_tanks = Tank.load(csv='tanks.csv') # load from any sourceresponse = storm.upsert(gov_tanks).mode(mode.BATCH).apply()# default:# response = storm.upsert(gov_tanks, mode=mode.SEQUENTIAL)```### Nested mutation**API WIP**:```pythonfrom tests.models import BbtProgram, BbtPlanfrom storm import UploadMode as mode# algorithm runs...program = BbtProgram() # New with defaultsfor plan in algorithm_plans:  program.plans.append(BbtPlan(**plan))# OPTION 1:response = storm.create(program)  .nested({    'plans': Plan.create()  }).apply()# OPTION 2:attrs = ['plans']response = storm.create(program, nested=attrs)```### Parallel/Batch (Multiple mutations multi-threaded, each mutation may be batched)NOT PRIORITY# SUBSCRIPTIONNOT PRIORITY## COMPARISON```# # ! old way [No additional libraries]:# import requests# import json# @dataclass# class Line():#   id: str#   name: str#   speed: float# LINE = '''#   query getLine($name: String!){#     line(findBy:{ name: $name }){#       id#       name#       speed#     }#   }# '''# url = 'https://test.valiot.app/'# content = {#   'query': LINE,#   'variables': {'name': 'LINEA001'}# }# response = requests.post(url, json=content)# line_data = json.loads(str(response.content))# line = Line(**line_data)# line.name # * &gt;&gt; LINEA001# # ! current way [pygqlc]:# gql = GraphQLClient()# @dataclass# class Line():#   id: str#   name: str#   speed: float# LINE = '''#   query getLine($name: String!){#     line(findBy:{ name: $name }){#       id#       name#       speed#     }#   }# '''# line_data, _ = gql.query_one(LINE, {'name': 'LINEA001'})# line = Line(**line_data)# line.name # * &gt;&gt; LINEA001# # * New way (TBD):# gql = GraphQLClient()# orm = GStorm(client=gql, schema=SCHEMA_PATH)# Line = orm.getType('Line')# line = Line.find_one({'name': 'LINEA001'})# line.name # * &gt;&gt; LINEA001```</longdescription>
</pkgmetadata>