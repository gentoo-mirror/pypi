<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Overview**azure-img-utils** provides a command line utility and API for publishingimages in the Azure Cloud. This includes helper functions for uploadingimage blobs, creating compute images and publish/share images acrossall available regions.See the [Azure docs](https://docs.microsoft.com/en-us/azure/) to getmore info on the Azure cloud.# RequirementsThe requirements for the project can be found in the following repo files:- [requirements](requirement.txt)- [requirements for testing](requirement-test.txt)- [requirements for development](requirement-dev.txt)# InstallationTo install the package on openSUSE and SLES use the following commands as root:```shell# zypper ar https://download.opensuse.org/repositories/Cloud:Tools:CI/&lt;distribution&gt;# zypper refresh# zypper in python3-azure-img-utils```To install from PyPI:```shell$ pip install azure-img-utils```# Configuration**azure-img-utils** can be configured with yaml based profiles. The configurationdirectory is `~/.config/azure_img_utils` and the default profile is default.yaml(~/.config/azure_img_utils/default.yaml).The following configration options are available in a configuration profile:- no_color- log_level- credentials_file- resource_group- region- container- storage_accountAn example configuration profile may look like:```yamlregion: westusno_color: Truecredentials_file: mycredentials.jsoncontainer: my_container```When running any command the profile can be chosen via the *--profile* option.For example, *azure-img-utils image blobexists --profile production* would pullconfiguration from ~/.config/azure_img_utils/production.yaml.# CLIThe CLI is broken into multiple distinct subcommands that handle differentsteps of creating and publishing images in the Azure cloud framework.## AuthenticationThis cli tool expects the user to provide a json file containing thecredentials of a service principal to access his/her Azure services.Per Azure documentation:&gt; An Azure service principal is an identity created for use with applications,&gt; hosted services, and automated tools to access Azure resources.[Here](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli)you can find how to create a service principal with the azure cli.With your subscriptionId, the resourceGroupId and the required permissions, you cancreate the service principal with the following command:```shaz ad sp create-for-rbac \        --sdk-auth \        --role Contributor \        --scopes /subscriptions/{YOUR_SUSCRI_ID}/resourceGroups/{YOUR_RES_GROUP_ID} \        --name &quot;YOUR_SP_NAME&quot; &gt; mycredentials.json```The expected format for the json file is the output for that *create-for-rbac* azcommand. Note that the API this repo provides allows additional methods ofauthentication, but these are not supported in this CLI tool.## blob commandGroup of commands for blob management.### exists subcommandThis subcommand allows the user to check if a blob exists in the storagecontainer specified. The subcommand is *azure-img-utils blob exists*.The *required* parameters for the execution of the command (authentication aside):- --storage-account- --blob-name- --containerExample:```shell$ azure-img-utils blob exists --storage-account myStorageAccount \                              --blob-name myBlobName \                              --container myContainerName```This command will output *true* or *false* depending on the existence of theblob.For more information about the blob exists command see the help message:```shell$ azure-img-utils blob exists --help```### upload subcommandThis subcommand allows the user to upload a file as a blob to the storagecontainer specified. The subcommand is *azure-img-utils blob upload*.The *required* parameters for the execution of the command (authentication aside):- --storage-account- --blob-name- --container- --image-fileSome *optional* parameters for the execution of the command include:- --force-replace-image  (defaults to False)- --page-blob            (defaults to False)- --expand-image         (defaults to False)- --max-workers          (defaults to 5(no limit))- --max-attempts   (defaults to 5(no limit))Example:```shell$ azure-img-utils blob upload --storage-account myStorageAccount \                              --blob-name myBlobName \                              --container myContainerName \                              --image-file myImageFile.qcow2```This command will output if the upload has been successful or not.For more information about the blob upload command see the help message:```shell$ azure-img-utils blob upload --help```### delete subcommandThis subcommand allows the user to delete a blob file from the storagecontainer specified. The subcommand is *azure-img-utils blob delete*.The *required* parameters for the execution of the command (authentication aside):- --storage-account- --blob-name- --containerSome *optional* parameters for the execution of the command:- --yes  (avoids interactive confirmation for the deletion)Example:```shell$ azure-img-utils blob delete --storage-account myStorageAccount \                              --blob-name myBlobName \                              --container myContainerName \                              --yes```This command will output if the deletion has been successful or not.For more information about the blob delete command see the help message:```shell$ azure-img-utils blob delete --help```## image commandGroup of commands for image management.### exists subcommandThis subcommand allows the user to check if an image exists.The subcommand is *azure-img-utils image exists*.The *required* parameters for the execution of the command (authentication aside):- --image-nameExample:```shell$ azure-img-utils image exists --image-name myImageName```This command will output *true* or *false* depending on the existence of theimage.For more information about the image exists command see the help message:```shell$ azure-img-utils image exists --help```### create subcommandThis subcommand allows the user to create an image based in one blob.The subcommand is *azure-img-utils image create*.The *required* parameters for the execution of the command (authentication aside):- --blob-name- --image-name- --container- --resource-group- --storage-accountSome *optional* parameters for the execution of the command include:- --force-replace-image  (defaults to False)- --hyper-v-generation   (defaults to 'V1'(legacy bios).)                         (Use 'V2' for uefi boot.)Example:```shell$ azure-img-utils image create --blob-name myBlobName \                               --image-name myImageName```For more information about the image create command see the help message:```shell$ azure-img-utils image create --help```### delete subcommandThis subcommand allows the user to delete an existing image.The subcommand is *azure-img-utils image delete*.The *required* parameters for the execution of the command (authentication aside):- --image-nameExample:```shell$ azure-img-utils image delete --image-name myImageName```For more information about the image delete command see the help message:```shell$ azure-img-utils image delete --help```## gallery-image-version commandGroup of commands for gallery image version management.### exists subcommandThis subcommand allows the user to check if a gallery image version exists in a gallery.The subcommand is *azure-img-utils gallery-image-version exists*.The *required* parameters for the execution of the command (authentication aside):- --gallery-image-name- --gallery-name- --gallery-image-versionExample:```shell$ azure-img-utils gallery-image-version exists \                                        --gallery-image-name myImageName \                                        --gallery-name myGalleryName \                                        --gallery-image-version 0.0.1```This command will output *true* or *false* depending on the existence of thegallery image version in the gallery.For more information about the gallery image version exists command see the help message:```shell$ azure-img-utils gallery-image-version exists --help```### create subcommandThis subcommand allows the user to create a gallery image version in a gallery based on a blob.The subcommand is *azure-img-utils gallery-image-version create*.The *required* parameters for the execution of the command (authentication aside):- --blob-name- --gallery-name- --gallery-image-name- --gallery-image-version- --resource-groupSome *optional* parameters for the execution of the command include:- --force-replace-image  (defaults to False)Example:```shell$ azure-img-utils gallery-image-version create \                                        --blob-name myBlobName \                                        --gallery-image-name myImageName \                                        --gallery-name myGalleryName \                                        --image-version 0.0.1 \                                        --resource-group myResourceGroup```For more information about the gallery image version create command see the help message:```shell$ azure-img-utils gallery-image-version create --help```### delete subcommandThis subcommand allows the user to delete an existing gallery image version ofa gallery image.The subcommand is *azure-img-utils gallery-image-version delete*.The *required* parameters for the execution of the command (authentication aside):- --gallery-name- --gallery-image-name- --gallery-image-versionExample:```shell$ azure-img-utils gallery-image-version delete \                                            --gallery-image-name myImageName \                                            --gallery-name myGalleryName \                                            --gallery-image-version 0.0.1```For more information about the gallery image version delete command see thehelp message:```shell$ azure-img-utils gallery-image-version delete --help```## cloud-partner-offer commandGroup of commands for cloud partner offer management.### publish subcommandThis subcommand allows the user to publish a cloud partner offer.The subcommand is *azure-img-utils cloud-partner-offer publish*.The *required* parameters for the execution of the command (authentication aside):- --offer-id- --publisher-id- --notification-emailsNote that 'notification-emails' parameter will be ignored for migrated offers and the notifications will be sent to the email address set as Seller contact info section of your Account settings in Partner Center.Example:```shell$ azure-img-utils cloud-partner-offer publish \        --offer-id myOfferId \        --publisher-id myPublisherId \        --notification-emails &quot;myMail1@mydomain.com,myMail2@mydomain.com&quot;```This command will output the URI for the published cloud partner offer operation if successful.For more information about the cloud partner offer publish command see the help message:```shell$ azure-img-utils cloud-partner-offer publish --help### go-live subcommandThis subcommand allows the user to set a cloud partner offer as go-live.The subcommand is *azure-img-utils cloud-partner-offer go-live*.The *required* parameters for the execution of the command (authentication aside):- --offer-id- --publisher-idThe result of the subcommand is that all new changes made to the offer are publicly visible.Example:```shell$ azure-img-utils cloud-partner-offer go-live \        --offer-id myOfferId \        --publisher-id myPublisherId```This command will output the URI for the cloud partner offer go-live operationif successful.For more information about the cloud partner offer go-live command see the help message:```shell$ azure-img-utils cloud-partner-offer go-live --help```### upload-offer-document subcommandThis subcommand allows the user to upload an offer document to a cloud partner offer.The subcommand is *azure-img-utils cloud-partner-offer upload-offer-document*.The *required* parameters for the execution of the command (authentication aside):- --offer-id- --publisher-id- --offer-document-fileThe '--offer-document-file' parameter has to contain the path for a text filecontaining the json document for the offer.Example:```shell$ azure-img-utils cloud-partner-offer upload-offer-document \        --offer-id myOfferId \        --publisher-id myPublisherId \        --offer-document-file /path/to/my/documentfile.json```This command will output only if there's any problem uploading the document forthe offer.For more information about the cloud partner offer upload-offer-documentcommand see the help message:```shell$ azure-img-utils cloud-partner-offer upload-offer-document --help```### add-image-to-offer subcommandThis subcommand allows the user to add an image to a cloud partner offer.The subcommand is *azure-img-utils cloud-partner-offer add-image-to-offer*.The *required* parameters for the execution of the command (authentication aside):- --blob-name- --image-name- --image-description- --offer-id- --publisher-id- --label- --skuSome *optional* parameters for the execution of the command include:- --blob-url  (A blob-url is generated if not provided)- --generation-id- --generation-suffix- --vm-images-keyExample:```shell$ azure-img-utils cloud-partner-offer add-image-to-offer \        --blob-name myBlobName \        --image-name myImageName \        --image-description &quot;My image description&quot; \        --offer-id myOfferId \        --publisher-id myPublisherId \        --label myLabel \        --sku mySKU```This command will output only if there's any problem adding the image to the offer.For more information about the cloud partner offer add-image-to-offercommand see the help message:```shell$ azure-img-utils cloud-partner-offer add-image-to-offer --help```### remove-image-from-offer subcommandThis subcommand allows the user to remove an image from a cloud partner offer.The subcommand is *azure-img-utils cloud-partner-offer remove-image-from-offer*.The *required* parameters for the execution of the command (authentication aside):- --image-urnSome *optional* parameters for the execution of the command include:- --vm-images-keyExample:```shell$ azure-img-utils cloud-partner-offer remove-image-to-offer \        --image-urn myImageUrn```This command will output only if there's any problem removing the image from the offer.For more information about the cloud partner offer remove-image-from-offercommand see the help message:```shell$ azure-img-utils cloud-partner-offer remove-image-from-offer --help```# APIThe AzureImage class can be instantiated and used as an API from code.This provides all the same functions as the CLI with a few additionalhelpers. For example there are waiter functions which will wait fora compute image to be created and/or deleted.To create an instance of AzureImage you need a *storage_account*,*credentials dictionary object* or *credentials file* or *sas token**container* and *resource group*. Optionally you can passin a Python log object and/or a *log_level* and/or a *timeout* value.Note that you can provide authentication credentials in 3 different ways:- with a sas_token- with a dictionary of credentials containing the required key values- with the credentials file nameProviding just one of these options is enough to perform the authenticationin the Azure API.```pythonazure_image = AzureImage(    container=&quot;my_container_name&quot;,    storage_account=&quot;my_storage_account&quot;,    credentials=my_credentials_dict,    credentials_file=&quot;my_credentials_file.json&quot;,    resource_group=&quot;my_resource_group&quot;,    sas_token=&quot;my_sas_token&quot;,    log_level=my_log_level,    log_callback=logger    timeout=myTimeout)```## Code examplesWith an instance of AzureImage you can perform any of the image functionswhich are available through the CLI.```pythonazure_image = AzureImage(    container=&quot;my_container&quot;,    storage_account=&quot;my_storage_account&quot;,    credentials_file=&quot;my_credentials.json&quot;,    resource_gropu=&quot;my_resource_group&quot;,    sas_token=&quot;my_sas_token&quot;)```### Check if image blob exists```pythonblob_exists = azure_image.image_blob_exists(&quot;my_blob_name&quot;)```# Delete storage blob```pythonblob_deleted = azure_image.delete_storage_blob(&quot;my_blob_name&quot;)```### Upload image blob```pythonblob_name = azure_image.upload_image_blob(    &quot;my_image_file.qcow2&quot;,    blob_name=&quot;my_blob_name&quot;)```### Check if image exists```pythonimage_exists = azure_image.image_exists(&quot;my_image_name&quot;)```### Check if gallery image version exists```pythongallery_image_version_exists = azure_image.gallery_image_version_exists(    &quot;my_gallery_name&quot;,    &quot;my_gallery_image_name&quot;,    &quot;my_image_version&quot;,    gallery_resource_group=&quot;my_gallery_resource_group&quot;)```### Delete compute image```pythonazure_image.delete_compute_image(&quot;my_image_name&quot;)```### Delete gallery image version```pythonazure_image.delete_gallery_image_version(    &quot;my_gallery_name&quot;,    &quot;my_gallery_image_name&quot;,    &quot;my_image_version&quot;,    gallery_resource_group=&quot;my_gallery_resource_group&quot;)```### Get compute image dictionary```pythonimage_dict = azure_image.get_compute_image(&quot;my_image_name&quot;)```### Get gallery image version```pythonimage_dict = azure_image.get_gallery_image_version(    &quot;my_gallery_name&quot;,    &quot;my_gallery_image_name&quot;,    &quot;my_image_version&quot;,    gallery_resource_group=&quot;my_gallery_resource_group&quot;)```### Create compute image```pythonimage_name = azure_image.create_compute_image(    &quot;my_blob_name&quot;,    &quot;my_image_name&quot;,    &quot;my_region&quot;,    force_replace_image=True,    hyper_v_generation='V1')```### Create gallery image version```pythonimage_name = azure_image.create_gallery_image_version(    &quot;my_blob_name&quot;,    &quot;my_gallery_name&quot;,    &quot;my_gallery_image_name&quot;,    &quot;my_image_version&quot;,    &quot;my_region&quot;,    force_replace_image=True,    gallery_resource_group=&quot;my_gallery_resource_group&quot;)```### Get offer doc dictionary```pythonoffer_doc = azure_image.get_offer_doc(    &quot;my_offer_id&quot;,    &quot;my_publisher_id&quot;)```### Upload offer doc```pythonazure_image.upload_offer_doc(    &quot;my_offer_id&quot;,    &quot;my_publisher_id&quot;    my_offer_doc_dict)```### Add image to offer```pythonazure_image.add_image_to_offer(    &quot;my_blob_name&quot;,    &quot;my_image_name&quot;,    &quot;my image description...&quot;,    &quot;my_offer_id&quot;,    &quot;my_publisher_id&quot;,    &quot;my_label&quot;,    &quot;my_sku&quot;,    blob_url=&quot;https://my.blob.url&quot;,    generation_id=&quot;my_generation_id&quot;,    generation_suffix=&quot;my_generation_suffix&quot;,    vm_images_key=&quot;my_images_key&quot;)```### Remove image from offer```pythonazure_image.add_image_to_offer(&quot;my_image_urn&quot;)```### Publish offer```pythonoperation_uri = azure_image.publish_offer(    &quot;my_offer_id&quot;,    &quot;my_publisher_id&quot;,    &quot;my_notification_emaili1@whatever.com,my_not_email2@somedomain.com')```### Go live with offer```pythonoperation_uri = azure_image.go_live_with_offer(    &quot;my_offer_id&quot;,    &quot;my_publisher_id&quot;,)```### Get offer status```pythonoffer_status = azure_image.get_offer_status(    &quot;my_offer_id&quot;,    &quot;my_publisher_id&quot;,)```### Get operation```pythonoperation_status = azure_image.get_operation(&quot;my_operation&quot;)```# Issues/EnhancementsPlease submit issues and requests to[Github](https://github.com/SUSE-Enceladus/azure-img-utils/issues).# ContributingContributions to **azure-img-utils** are welcome and encouraged. See[CONTRIBUTING](https://github.com/SUSE-Enceladus/azure-img-utils/blob/master/CONTRIBUTING.md)for info on getting started.# LicenseCopyright (c) 2022 SUSE LLC.Distributed under the terms of GPL-3.0+ license, see[LICENSE](https://github.com/SUSE-Enceladus/azure-img-utils/blob/master/LICENSE)for details.</longdescription>
</pkgmetadata>