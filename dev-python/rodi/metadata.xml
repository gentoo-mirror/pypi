<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Build](https://github.com/Neoteroi/rodi/workflows/Build/badge.svg)[![pypi](https://img.shields.io/pypi/v/rodi.svg)](https://pypi.python.org/pypi/rodi)[![versions](https://img.shields.io/pypi/pyversions/rodi.svg)](https://github.com/Neoteroi/rodi)[![codecov](https://codecov.io/gh/Neoteroi/rodi/branch/main/graph/badge.svg?token=VzAnusWIZt)](https://codecov.io/gh/Neoteroi/rodi)[![license](https://img.shields.io/github/license/Neoteroi/rodi.svg)](https://github.com/Neoteroi/rodi/blob/main/LICENSE)# Implementation of dependency injection for Python 3**Features:*** types resolution by signature types annotations (_type hints_)* types resolution by class annotations (_type hints_)* types resolution by names and aliases (_convention over configuration_)* unintrusive: builds objects graph **without** the need to change the  source code of classes* minimum overhead to obtain services, once the objects graph is built* support for singletons, transient, and scoped servicesThis library is freely inspired by .NET Standard`Microsoft.Extensions.DependencyInjection` implementation (_ref. [MSDN,Dependency injection in ASP.NETCore](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1),[Using dependency injection in a .Net Core consoleapplication](https://andrewlock.net/using-dependency-injection-in-a-net-core-console-application/)_).The `ContainerProtocol` for v2 is inspired by [punq](https://github.com/bobthemighty/punq).## Installation```bashpip install rodi```## Efficient`rodi` works by inspecting code **once** at runtime, to generatefunctions that return instances of desired types - as long as the object graphis not altered. Inspections are done either on constructors(__&amp;#95;&amp;#95;init&amp;#95;&amp;#95;__) or class annotations. Validation steps, forexample to detect circular dependencies or missing services, are done whenbuilding these functions, so additional validation is not needed whenactivating services.## Flexible`rodi` offers two code APIs:- one is kept as generic as possible, using a `ContainerProtocol` for scenarios  in which it is desirable being able to replace `rodi` with alternative  implementations of dependency injection for Python. The protocol only expects  a class being able to `register` and `resolve` types, and to tell if a type  is configured in it (`__contains__`). Even if other implementations of DI  donÂ´t implement these three methods, it should be easy to use  [composition](https://en.wikipedia.org/wiki/Composition_over_inheritance) to  wrap other libraries with a compatible class.- one is a more concrete implementation, for scenarios where it's not desirable  to consider alternative implementations of dependency injection.For this reason, the examples report two ways to achieve certain things.### ExamplesFor examples, refer to the [examples folder](./examples).### Recommended practicesAll services should be configured once, when an application starts, and theobject graph should *not* be altered during normal program execution.Example: if you build a web application, configure the object graph whenbootstrapping the application, avoid altering the `Container` configurationwhile handling web requests.Aim at keeping the `Container` and service graphs abstracted from the front-endlayer of your application, and avoid mixing runtime values with containerconfiguration. Example: if you build a web application, avoid if possiblerelying on the HTTP Request object being a service registered in your container.## Service life style:* singleton - instantiated only once per service provider* transient - services are instantiated every time they are required* scoped - instantiated only once per root service resolution call  (e.g. once per web request)## Usage in BlackSheep`rodi` is used in the [BlackSheep](https://www.neoteroi.dev/blacksheep/)web framework to implement [dependency injection](https://www.neoteroi.dev/blacksheep/dependency-injection/) forrequest handlers.# DocumentationUnder construction. ðŸš§</longdescription>
</pkgmetadata>