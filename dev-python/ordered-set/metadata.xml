<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Pypi](https://img.shields.io/pypi/v/ordered-set.svg)](https://pypi.python.org/pypi/ordered-set)An OrderedSet is a mutable data structure that is a hybrid of a list and a set.It remembers the order of its entries, and every entry has an index number thatcan be looked up.## Installation`ordered_set` is available on PyPI and packaged as a wheel. You can list itas a dependency of your project, in whatever form that takes.To install it into your current Python environment:    pip install ordered-setTo install the code for development, after checking out the repository:    pip install flit    flit install## Usage examplesAn OrderedSet is created and used like a set:    &gt;&gt;&gt; from ordered_set import OrderedSet    &gt;&gt;&gt; letters = OrderedSet('abracadabra')    &gt;&gt;&gt; letters    OrderedSet(['a', 'b', 'r', 'c', 'd'])    &gt;&gt;&gt; 'r' in letters    TrueIt is efficient to find the index of an entry in an OrderedSet, or find anentry by its index. To help with this use case, the `.add()` method returnsthe index of the added item, whether it was already in the set or not.    &gt;&gt;&gt; letters.index('r')    2    &gt;&gt;&gt; letters[2]    'r'    &gt;&gt;&gt; letters.add('r')    2    &gt;&gt;&gt; letters.add('x')    5OrderedSets implement the union (`|`), intersection (`&amp;`), and difference (`-`)operators like sets do.    &gt;&gt;&gt; letters |= OrderedSet('shazam')    &gt;&gt;&gt; letters    OrderedSet(['a', 'b', 'r', 'c', 'd', 'x', 's', 'h', 'z', 'm'])    &gt;&gt;&gt; letters &amp; set('aeiou')    OrderedSet(['a'])    &gt;&gt;&gt; letters -= 'abcd'    &gt;&gt;&gt; letters    OrderedSet(['r', 'x', 's', 'h', 'z', 'm'])The `__getitem__()` and `index()` methods have been extended to accept anyiterable except a string, returning a list, to perform NumPy-like &quot;fancyindexing&quot;.    &gt;&gt;&gt; letters = OrderedSet('abracadabra')    &gt;&gt;&gt; letters[[0, 2, 3]]    ['a', 'r', 'c']    &gt;&gt;&gt; letters.index(['a', 'r', 'c'])    [0, 2, 3]OrderedSet implements `__getstate__` and `__setstate__` so it can be pickled,and implements the abstract base classes `collections.MutableSet` and`collections.Sequence`.OrderedSet can be used as a generic collection type, similar to the collectionsin the `typing` module like List, Dict, and Set. For example, you can annotatea variable as having the type `OrderedSet[str]` or `OrderedSet[Tuple[int,str]]`.## OrderedSet in data science applicationsAn OrderedSet can be used as a bi-directional mapping between a sparsevocabulary and dense index numbers. As of version 3.1, it accepts NumPy arraysof index numbers as well as lists.This combination of features makes OrderedSet a simple implementation of manyof the things that `pandas.Index` is used for, and many of its operations arefaster than the equivalent pandas operations.For further compatibility with pandas.Index, `get_loc` (the pandas method forlooking up a single index) and `get_indexer` (the pandas method for fancyindexing in reverse) are both aliases for `index` (which handles both casesin OrderedSet).## AuthorsOrderedSet was implemented by Elia Robyn Lake (maiden name: Robyn Speer).Jon Crall contributed changes and tests to make it fit the Python set API.Roman Inflianskas added the original type annotations.## ComparisonsThe original implementation of OrderedSet was a [recipe posted to ActiveStateRecipes][recipe] by Raymond Hettiger, released under the MIT license.[recipe]: https://code.activestate.com/recipes/576694-orderedset/Hettiger's implementation kept its content in a doubly-linked list referenced by adict. As a result, looking up an item by its index was an O(N) operation, whiledeletion was O(1).This version makes different trade-offs for the sake of efficient lookups. Itscontent is a standard Python list instead of a doubly-linked list. Thisprovides O(1) lookups by index at the expense of O(N) deletion, as well asslightly faster iteration.In Python 3.6 and later, the built-in `dict` type is inherently ordered. If youignore the dictionary values, that also gives you a simple ordered set, withfast O(1) insertion, deletion, iteration and membership testing. However, `dict`does not provide the list-like random access features of OrderedSet. Youwould have to convert it to a list in O(N) to look up the index of an entry orlook up an entry by its index.</longdescription>
</pkgmetadata>