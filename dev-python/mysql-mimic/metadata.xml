<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MySQL-Mimic[![Tests](https://github.com/kelsin/mysql-mimic/actions/workflows/tests.yml/badge.svg)](https://github.com/kelsin/mysql-mimic/actions/workflows/tests.yml)Pure-python implementation of the MySQL server [wire protocol](https://dev.mysql.com/doc/internals/en/client-server-protocol.html).This can be used to create applications that act as a MySQL server.## Installation```shellpip install mysql-mimic```## UsageA minimal use case might look like this:```pythonimport asynciofrom mysql_mimic import MysqlServer, Sessionclass MySession(Session):    async def query(self, expression, sql, attrs):        print(f&quot;Parsed abstract syntax tree: {expression}&quot;)        print(f&quot;Original SQL string: {sql}&quot;)        print(f&quot;Query attributes: {sql}&quot;)        print(f&quot;Currently authenticated user: {self.username}&quot;)        print(f&quot;Currently selected database: {self.database}&quot;)        return [(&quot;a&quot;, 1), (&quot;b&quot;, 2)], [&quot;col1&quot;, &quot;col2&quot;]    async def schema(self):        # Optionally provide the database schema.        # This is used to serve INFORMATION_SCHEMA and SHOW queries.        return {            &quot;table&quot;: {                &quot;col1&quot;: &quot;TEXT&quot;,                &quot;col2&quot;: &quot;INT&quot;,            }        }if __name__ == &quot;__main__&quot;:    server = MysqlServer(session_factory=MySession)    asyncio.run(server.serve_forever())```Using [sqlglot](https://github.com/tobymao/sqlglot), the abstract `Session` class handles queries to metadata, variables, etc. that many MySQL clients expect.To bypass this default behavior, you can implement the [`mysql_mimic.session.BaseSession`](mysql_mimic/session.py) interface.See [examples](./examples) for more examples.## AuthenticationMySQL-mimic has built in support for several standard MySQL authentication plugins:- [mysql_native_password](https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html)  - The client sends hashed passwords to the server, and the server stores hashed passwords. See the documentation for more details on how this works.  - [example](examples/auth_native_password.py)- [mysql_clear_password](https://dev.mysql.com/doc/refman/8.0/en/cleartext-pluggable-authentication.html)  - The client sends passwords to the server as clear text, without hashing or encryption.  - This is typically used as the client plugin for a custom server plugin. As such, MySQL-mimic provides an abstract class, [`mysql_mimic.auth.AbstractClearPasswordAuthPlugin`](mysql_mimic/auth.py), which can be extended.  - [example](examples/auth_clear_password.py)- [mysql_no_login](https://dev.mysql.com/doc/refman/8.0/en/no-login-pluggable-authentication.html)  - The server prevents clients from directly authenticating as an account. See the documentation for relevant use cases.- [authentication_kerberos](https://dev.mysql.com/doc/mysql-security-excerpt/8.0/en/kerberos-pluggable-authentication.html)  - Kerberos uses tickets together with symmetric-key cryptography, enabling authentication without sending passwords over the network. Kerberos authentication supports userless and passwordless scenarios.By default, a session naively accepts whatever username the client provides.Plugins are provided to the server by implementing [`mysql_mimic.IdentityProvider`](mysql_mimic/auth.py), which configures all available plugins and a callback for fetching users.Custom plugins can be created by extending [`mysql_mimic.auth.AuthPlugin`](mysql_mimic/auth.py).## DevelopmentYou can install dependencies with `make deps`.You can format your code with `make format`.You can lint with `make lint`.You can check type annotations with `make types`.You can run tests with `make test`. This will build a coverage report in `./htmlcov/index.html`.You can run all the checks with `make check`.You can build a pip package with `make build`.</longdescription>
</pkgmetadata>