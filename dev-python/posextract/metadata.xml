<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># posextractposextract offers grammatical information extraction methods designed for the analysis of historical and contemporary textual corpora. It traverses the syntactic dependency relations between parts-of-speech and returns sequences of words that share a grammatical relationship. See [our article]() for more. You can also [download posextract for pypi with pip](https://pypi.org/project/posextract/). ## Usage- `extract_triples` to extract subject-verb-object (SVO) and subject-verb-adjective complement (SVA) triples- `extract_adj_noun_pairs` to extract adjective-noun pairs- `extract_subj_verb_pairs` to extract subject-verb pairsRequired Paramters: - `input` can be the name of a csv file or an input string- `output` name of the output fileOptional Paramters: - `--data_column` specify the column to extract triples from.- `--id_column` specify a unique ID field if csv file is given.- `--file-delimiter` specify comma, pipe, or tab. Default is comma. - `--post-combine-adj` combine triples (adjective predicate with object) - `--add-auxiliary` extract future and past tense triples. - `--prep-phrase` extract the . Default set to false. - `--no-compound-noun` Extract just the subject or object (e.g. &quot;Indian Government&quot; is extracted as just &quot;Government&quot;).- `--lemma` specify whether to lemmatize parts-of-speech. Default is non-lemmatized. - `--verbose` print### Examples#### Interactive: Extract grammatical triples.```from posextract import grammatical_triplestriples = grammatical_triples.extract(['Landlords may exercise oppression.', 'The soldiers were ill.'])for triple in triples:    print(triple)# Output: Landlords exercise oppression, soldiers were ill```Extract grammatical triples using different options from default: ```from posextract.util import TripleExtractorOptionstriples = grammatical_triples.extract(sent, TripleExtractorOptions(prep_phrase = True))```Or extract adjectives and the nouns they modify. ```from posextract import adj_noun_pairsadj_noun = adj_noun_pairs.extract()```Or extract subjects and their verbs. ```from posextract import subj_verb_pairssubj_verb = subj_verb_pairs.extract()```#### Over CLI: posextract can extract grammatical triples from text: ```python -m posextract.extract_triples &quot;Landlords may exercise oppression.&quot; output.csv# Output: Landlords exercise oppression```posextract can extract SVO/SVA relationships separately or it can combine the adjective as part of a SVO triple:```python -m posextract.extract_triples &quot;The soldiers were terminally ill.&quot; output.csv --post-combine-adj# Output: soldiers were terminally, soldiers were ill ``````python -m posextract.extract_triples &quot;The soldiers were terminally ill.&quot; output.csv --post-combine-adj# Output: soldiers were terminally ill```If provided a .csv file: ```python -m posextract.extract_triples --data_column sentence --id_column sentence_id input.csv output.csv```## For More Information...... see our Wiki: - [About Our Evaluation Data](https://github.com/stephbuon/posextract/wiki/Evaluation-Data-Sets)- [About the Syntactic Dependency Parser](https://github.com/stephbuon/posextract/wiki/Our-Application-of-spaCy-NLP)- [How to Use posextract on Databricks](https://github.com/stephbuon/posextract/wiki/Using-posextract-on-Databricks)</longdescription>
</pkgmetadata>