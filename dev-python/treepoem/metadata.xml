<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Treepoem========.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/treepoem/main.yml?branch=main&amp;style=for-the-badge   :target: https://github.com/adamchainz/treepoem/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/treepoem.svg?style=for-the-badge   :target: https://pypi.org/project/treepoem/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge   :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitA cleverly named, but very simple python barcode renderer wrapping theBWIPP_ library and ``ghostscript`` command line tool.Installation============Install from **pip**:.. code-block:: sh    python -m pip install treepoemPython 3.8 to 3.12 supported.You'll also need Ghostscript installed. On Ubuntu/Debian this can be installedwith:.. code-block:: sh    apt-get install ghostscriptOn Mac OS X use:.. code-block:: sh    brew install ghostscriptOtherwise refer to your distribution's package manager, though it's likely tobe called ``ghostscript`` too.There's a known issue with rendering on Ghostscript 9.22+ where images aresmeared. See`GitHub Issue #124 &lt;https://github.com/adamchainz/treepoem/issues/124&gt;`_ andits associated links for more details. Ghostscript merged a fix in version9.26 and common barcodes seem to work from then on, though still with somesmearing.You can check your Ghostscript version with:.. code-block:: sh    gs --version----**Working on a Django project?**Improve your skills with `one of my books &lt;https://adamj.eu/books/&gt;`__.----API===``generate_barcode(barcode_type: str, data: str | bytes, options: dict[str, str | bool] | None=None, *, scale: int = 2) -&gt; Image``----------------------------------------------------------------------------------------------------------------------------------Generates a barcode and returns it as a `PIL Image object &lt;https://pillow.readthedocs.io/en/stable/reference/Image.html#the-image-class&gt;`__``barcode_type`` is the name of the barcode type to generate (see below).``data`` is a ``str`` or ``bytes`` of data to embed in the barcode - the amountthat can be embedded varies by type.``options`` is a dictionary of strings-to-strings of extra options to be passedto BWIPP_, as per its docs.``scale`` controls the output image size.Use ``1`` for the smallest image and larger values for larger images.For example, this generates a QR code image, and saves it to a file using |Image.save()|__:.. |Image.save()| replace:: ``Image.save()``__ https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.save.. code-block:: python   import treepoem   image = treepoem.generate_barcode(       barcode_type=&quot;qrcode&quot;,  # One of the BWIPP supported codes.       data=&quot;barcode payload&quot;,   )   image.convert(&quot;1&quot;).save(&quot;barcode.png&quot;)If your barcode image is monochrome, with no additional text or colouring, converting the ``Image`` object to monochrome (``image.convert(&quot;1&quot;)``) will likely reduce its file size.``barcode_types: dict[str, BarcodeType]``-----------------------------------------This is a ``dict`` of the ~100 names of the barcode types that the vendoredversion of BWIPP_ supports: its keys are ``str``\s of the barcode type encodernames, and the values are instances of ``BarcodeType``.``BarcodeType``---------------A class representing meta information on the types. It has two attributes:* ``type_code`` - the value needed for the ``barcode_type`` argument of  ``generate_barcode()`` to use this type.* ``description`` - the human level description of the type  which has two ``str``.Only these common types are used in the test suite:* ``qrcode`` - `QR Code`_* ``azteccode`` - `Aztec Code`_* ``pdf417`` - PDF417_* ``interleaved2of5`` - `Interleaved 2 of 5`_* ``code128`` - `Code 128`_* ``code39`` - `Code 39`_Command-line interface======================Treepoem also includes a simple command-line interface to thefunctionality of ``generate_barcode``. For example, these commandswill generate two QR codes with identical contents, but different levelsof error correction (see `QR Code Options`_):.. code-block:: sh   $ treepoem -o barcode1.png -t qrcode &quot;This is a test&quot; eclevel=H   $ treepoem -o barcode2.png -t qrcode &quot;^084his is a test&quot; eclevel=L parseComplete usage instructions are shown with ``treepoem --help``.What's so clever about the name?================================Barcode.Bark ode.Tree poem.Updating BWIPP==============For development of treepoem, when there's a new BWIPP release:1. Run ``./download_bwipp.py`` with the version of BWIPP to download.2. Run ``./make_data.py`` to update the barcode types that treepoem knows about.3. Add a note in ``CHANGELOG.rst`` about the upgrade, adapting from the previous one.4. Commit and make a pull request, `adapting from previous examples &lt;https://github.com/adamchainz/treepoem/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+is%3Aclosed+upgrade+bwipp&gt;`__... _BWIPP: https://github.com/bwipp/postscriptbarcode.. _QR Code: https://github.com/bwipp/postscriptbarcode/wiki/QR-Code.. _Aztec Code: https://github.com/bwipp/postscriptbarcode/wiki/Aztec-Code.. _PDF417: https://github.com/bwipp/postscriptbarcode/wiki/PDF417.. _Interleaved 2 of 5: https://github.com/bwipp/postscriptbarcode/wiki/Interleaved-2-of-5.. _Code 128: https://github.com/bwipp/postscriptbarcode/wiki/Code-128.. _Code 39: https://github.com/bwipp/postscriptbarcode/wiki/Code-39.. _QR Code Options: https://github.com/bwipp/postscriptbarcode/wiki/QR-Code</longdescription>
</pkgmetadata>