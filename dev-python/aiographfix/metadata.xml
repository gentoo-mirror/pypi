<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aiographfix===========|shield-pypi| |shield-pypi-status| |shield-travis| |shield-codecov| |shield-license|**aiographfix** - asynchronous Python Telegra.ph API wrapper, that fix aiographAnnotations-----------The Telegraph class (``aiographfix.Telegraph``) encapsulates all API calls in a single class.It provides functions such as create_page, get_views and other's methods described at `Telegra.ph/api &lt;http://telegra.ph/api&gt;`_ pageAll data types  stored In the package ``aiographfix.types``.All methods are named following the `PEP-8 &lt;https://www.python.org/dev/peps/pep-0008/&gt;`_ instructionsfor example ``create_account`` for ``createAccount`` method and etc.All API methods are awaitable and can be called only inside Event-loop.Also if you want to upload the file to Telegra.ph service use ``upload`` methodfrom the instance of Telegraph class.By the end of all actions you will need to close HTTP connections by calling the `close()` method (is awaitable).Installation------------Using PIP~~~~~~~~~.. code-block:: bash    $ pip install -U aiographfixFrom sources~~~~~~~~~~~~.. code-block:: bash    $ git clone https://github.com/Yyonging/aiograph.git    $ cd aiograph    $ python setup.py installUsage examples--------------.. code-block:: python3   import asyncio   from aiographfix import Telegraph   loop = asyncio.get_event_loop()   telegraph = Telegraph()   async def main():       await telegraph.create_account('aiograph-demo')       page = await telegraph.create_page('Demo', '&lt;p&gt;&lt;strong&gt;Hello, world!&lt;/strong&gt;&lt;/p&gt;')       print('Created page:', page.url)   if __name__ == '__main__':       try:           loop.run_until_complete(main())       except (KeyboardInterrupt, SystemExit):           pass       finally:           loop.run_until_complete(telegraph.close())  # Close the aiohttp.ClientSessionLinks------ News: `@aiogram_live &lt;https://t.me/aiogram_live&gt;`_- Community: `@aiogram &lt;https://t.me/aiogram&gt;`_- Russian community: `@aiogram_ru &lt;https://t.me/aiogram_ru&gt;`_- Pip: `aiographfix &lt;https://pypi.org/project/aiographfix&gt;`_- Source: `Github repo &lt;https://github.com/Yyonging/aiograph&gt;`_- Issues/Bug tracker: `Github issues tracker &lt;https://github.com/Yyonging/aiograph/issues&gt;`_.. |shield-pypi| image:: https://img.shields.io/pypi/v/aiograph.svg?style=flat-square   :target: https://pypi.org/project/aiographfix/   :alt: PyPI.. |shield-pypi-status| image:: https://img.shields.io/pypi/status/aiograph.svg?style=flat-square   :target: https://pypi.org/project/aiographfix/   :alt: PyPi status.. |shield-travis| image:: https://img.shields.io/travis/aiogram/aiograph.svg?branch=master&amp;style=flat-square   :target: https://travis-ci.org/aiogram/aiograph   :alt: Travis-CI.. |shield-codecov| image:: https://img.shields.io/codecov/c/github/aiogram/aiograph.svg?style=flat-square   :target: https://codecov.io/gh/aiogram/aiograph   :alt: Codecov.. |shield-license| image:: https://img.shields.io/pypi/l/aiogram.svg?style=flat-square   :target: https://opensource.org/licenses/MIT   :alt: MIT License</longdescription>
</pkgmetadata>