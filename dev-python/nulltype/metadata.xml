<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>| |travisci| |version| |versions| |impls| |wheel| |coverage| |br-coverage|.. |travisci| image:: https://api.travis-ci.org/jonathaneunice/nulltype.svg    :target: http://travis-ci.org/jonathaneunice/nulltype.. |version| image:: http://img.shields.io/pypi/v/nulltype.svg?style=flat    :alt: PyPI Package latest release    :target: https://pypi.org/project/nulltype.. |versions| image:: https://img.shields.io/pypi/pyversions/nulltype.svg    :alt: Supported versions    :target: https://pypi.org/project/nulltype.. |impls| image:: https://img.shields.io/pypi/implementation/nulltype.svg    :alt: Supported implementations    :target: https://pypi.org/project/nulltype.. |wheel| image:: https://img.shields.io/pypi/wheel/nulltype.svg    :alt: Wheel packaging support    :target: https://pypi.org/project/nulltype.. |coverage| image:: https://img.shields.io/badge/test_coverage-100%25-6600CC.svg    :alt: Test line coverage    :target: https://pypi.org/project/nulltype.. |br-coverage| image:: https://img.shields.io/badge/branch_coverage-100%25-6600CC.svg    :alt: Test branch coverage    :target: https://pypi.org/project/nulltypeHelps define 'null' values and sentinels parallel to, but different from,Python built-ins such as ``None``, ``False``, and ``True``.``None`` is a great `sentinel value &lt;http://en.wikipedia.org/wiki/Sentinel_value&gt;`_and a classic implementation of the`null object pattern &lt;http://en.wikipedia.org/wiki/Null_Object_pattern&gt;`_.But there are times that you need more than one nullish value to representdifferent aspects of emptiness. &quot;Nothing there&quot; is logically different from&quot;undefined,&quot; &quot;prohibited,&quot; &quot;end of data,&quot; and other kinds of &quot;null.&quot;``nulltype`` helps you easily represent different aspects of emptiness in a waythat doesn't overload ``None`` (or ``False``, ``0``, ``{}``, ``[]``, ``&quot;&quot;``, orany of the other possible &quot;there's nothing here!&quot; values). It helps createdesignated identifiers with specific meanings such as ``Passthrough``,``Prohibited``, and ``Undefined``.On the off chance that you need truish sentinels that aren't ``True``, it willhelp you do that too. And it will do so in an easily-consumed,right-off-the-shelf, fully-tested tested way.Usage=====::    from nulltype import NullType    Void = NullType('Void')    # following just to show it's working    assert bool(Void) == False    assert len(EmpVoidty) == 0    assert list(Void) == []    assert Void.some_attribute is Empty    assert Void[22] is Nothing    assert Void(&quot;hey&quot;, 12) is EmptyYou can create as many custom null values as you like. For convenience, severaldefault values, ``Empty``, ``Null``, and ``Nothing``, are exported. That way,if you don't really want to create your own, you can easily import apre-constituted null value::    from nulltype import EmptyThe Power of Nothing====================Alternate null types can be particularly useful when parsingdata or traversing data structures which might or might not bepresent. This is common in dealing with the data returned by`REST &lt;http://en.wikipedia.org/wiki/Representational_state_transfer&gt;`_APIs, for instance.As one example, `the documentation for Google's Gmail API &lt;https://developers.google.com/gmail/api/quickstart/quickstart-python&gt;`_suggests the following code::    threads = gmail_service.users().threads().list(userId='me').execute()    if threads['threads']:        for thread in threads['threads']:            print 'Thread ID: %s' % (thread['id'])There is a lot going on there just to avoid a problematic deference.If instead you have a ``Nothing`` null type defined, the code isshorter (and avoids an extra, very transient variable)::    results = gmail_service.users().threads().list(userId='me').execute()    for thread in results.get('threads', Nothing):        print 'Thread ID: %s' % (thread['id'])Three lines versus four may not seem like a big advantage, but the valueincreases with the complexity of the task. Many such &quot;if it's there, then...&quot;constructs are deeply nested when dealing with API results, XML parse trees,and other fundamentally nested information sources. Saving a guard conditionon every one of the nesting levels adds up quickly.While you could almost do this in stock Python, unlike ``Nothing``, ``None`` isnot iterable. You might use an empty list ``[]`` (or an equivalent global suchas ``EMPTYLIST``) as the alternative value for the ``get`` method. Going by thedocumentation of many parsers and APIs, however, such uses aren't broadlyidiomatic in today's Python community. The ``EMPTYLIST`` approach also is veryspecific to routines returning lists, whereas the &quot;go ahead, get it if you can&quot;``nulltype`` model works well for longer chains of access::    results.get(&quot;payload&quot;, Nothing).get(&quot;headers&quot;, Nothing)will return the correct object if it's there, but ``Nothing`` otherwise.And if you then try to test it (e.g. with ``if`` or a logical expression)or iterate over it (e.g. with ``for``), it will act as though it's an emptylist, or ``False``--whatever is most useful in a given context. Whether you'reiterating, indexing, dereferencing, calling, or otherwise accessing it, a``NullType`` is unperturbed.``Nothing`` isn't nothing. It's something that will simplify your code.General Sentinels and Distinguished Values==========================================While ``nulltype`` is frequently used to define new kinds of &quot;empty&quot; values,it's actually more general. Beyond different forms of 'null', ``NullType``instances are good general-purpose sentinels or designated values. Instead ofthe old::    class MySentinelClass(object):        passUse::    MySentinel = NullType('MySentinel')That gives you a value with known truthiness properties and a nicerprinted representation.::    &gt;&gt;&gt; print MySentinelClass               # fugly    &lt;class '__main__.MySentinelClass'&gt;    &gt;&gt;&gt; print MySentinel                    # just right    MySentinelOn the off chance you want a sentinel value that is`truthy &lt;https://en.wikipedia.org/wiki/Truthiness&gt;`_ rather than falsey /empty, use ``NonNullType``, a companion to ``NullType`` that operates inalmost the exact same way, but that evaluates as true.::    from nulltype import NonNullType    Full = NonNullType('Full')    assert bool(Full) is True    assert len(Full) == 1    assert list(Full) == [Full]    assert Full.some_attribute is Full    assert Full[22] is Full    assert Full(&quot;hey&quot;, 12) is FullExperience suggests that nullish sentinels are generally adequate andpreferable. And the &quot;everything folds back to the same value&quot; nature of even``NonNullType`` gives a somewhat null-like, or at least non-reactive, nature.But if you do want a true-ish sentinel, there it is.Uniqueness==========``NullType`` instances are meant to be `singletons&lt;http://en.wikipedia.org/wiki/Singleton_pattern&gt;`_, with just one per program.They almost are, though technically multiple ``NullType`` instances arereasonable, making it more of a `multiton pattern&lt;http://en.wikipedia.org/wiki/Multiton_pattern&gt;`_.The uniqueness of each singleton is currently not enforced, making it a usageconvention rather than strict law. With even minimal care, this is a problemroughly 0% of the time.Notes=====* Successfully packaged for, and  tested against, all late-model versions of Python: 2.6, 2.7, 3.3,  3.4, 3.5, 3.6, and 3.7 pre-release, as well as recent builds of PyPy and PyPy3. * See ``CHANGES.yml`` for the complete Change Log.* Automated multi-version testing managed with `pytest  &lt;http://pypi.python.org/pypi/pytest&gt;`_, `pytest-cov  &lt;http://pypi.python.org/pypi/pytest-cov&gt;`_,  `coverage &lt;https://pypi.python.org/pypi/coverage/4.0b1&gt;`_  and `tox  &lt;http://pypi.python.org/pypi/tox&gt;`_. Continuous integration testing  with `Travis-CI &lt;https://travis-ci.org/jonathaneunice/nulltype&gt;`_.  Packaging linting with `pyroma &lt;https://pypi.python.org/pypi/pyroma&gt;`_.* Similar modules include `sentinels &lt;http://pypi.org/project/sentinels&gt;`_ and `null  &lt;http://pypi.org/project/null&gt;`_. Of these, I prefer ``sentinels``  because it is clearly Python 3 ready, includes a ``pickle``  mechanism.  `noattr &lt;https://pypi.org/project/noattr&gt;`_ is a  new alternative.* For a module that uses the null value ``Empty`` to make the parsing of   JSON and other data formats easier, see   `items &lt;https://pypi.org/project/items&gt;`_ * The author, `Jonathan Eunice &lt;mailto:jonathan.eunice@gmail.com&gt;`_ or  `@jeunice on Twitter &lt;http://twitter.com/jeunice&gt;`_,  welcomes your comments and suggestions.Installation============To install or upgrade to the latest version::    pip install -U nulltypeYou may need to prefix this with ``sudo`` to authorize installation on Unix,Linux, and macOS. In environments without super-user privileges, you may wantto use ``pip``'s ``--user`` option, to install only for a single user, ratherthan system-wide. On a system with multiple versions of Python, you may alsoneed to use specific ``pip3`` or ``pip2`` commands instead of the stock``pip``. As a backup, running pip as a Python module can save your sanity incomplex cases where ``pip`` versions aren't working well as standalonecommands::    python3.6 -m pip install -U nulltypeTesting=======To run the module tests, use one of these commands::    tox                # normal run - speed optimized    tox -e py27        # run for a specific version only (e.g. py27, py34)    tox -c toxcov.ini  # run full coverage tests</longdescription>
</pkgmetadata>