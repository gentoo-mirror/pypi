<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CircleCI](https://circleci.com/gh/coinbase/coinbase-commerce-python/tree/master.svg?style=svg)](https://circleci.com/gh/coinbase/coinbase-commerce-python/tree/master)# coinbase-commerce-pythonCoinbase Commerce Python# Table of contents&lt;!--ts--&gt;   * [Python Versions](#python-version)   * [Third Party Libraries and Dependencies](#third-party-libraries-and-dependencies)   * [Documentation](#documentation)   * [Installation](#installation)   * [Usage](#usage)      * [Checkouts](#checkouts)      * [Charges](#charges)      * [Events](#events)   * [Validating webhook signatures](#validating-webhook-signatures)   * [Testing and Contributing](#testing-and-contributing)&lt;!--te--&gt;## Python VersionPython 2.7+ and 3.4+ are supported and tested.## Third Party Libraries and DependenciesThe following libraries will be installed when you install the client library:* [requests](https://github.com/requests/requests)## DocumentationFor more details visit [Coinbase API docs](https://commerce.coinbase.com/docs/api/).To start using library, you need to register on [Commerce SignUp](https://commerce.coinbase.com/signup).And get your ``API_KEY`` from user settings.Next create a ``Client`` object for interacting with the API:```pythonfrom coinbase_commerce.client import ClientAPI_KEY = &quot;API KEY&quot;client = Client(api_key=API_KEY)`````Client`` contains links to an every Python Class representations of the API resources``Checkout, Charge, Event``You can call ``list, list_paging_iter, create, retrieve, modify`` methods from an API resource classes```pythonclient.charge.createclient.checkout.list_paging_iter client.event.listclient.charge.retrieveclient.checkout.modify```as well as ``save, delete, refresh`` methods from API resource class instances.```pythoncheckout = client.checkout.retrieve(&lt;id&gt;)checkout.refresh()checkout.save()checkout.delete()```Each API method returns an ``APIObject`` (a subclass of ``dict``) representing the JSON response from the API, all of the models are dumpable with JSON.\Also when the response data is parsed into Python objects, the appropriate ``APIObject`` subclasses will be used automatically.All subclasses of ``APIResource`` class support ``refresh`` method. This will update their attributes and all nested data by making a fresh ``GET`` request to the relevant API endpoint.Client support Common API Errors and Warnings handling.All errors occuring during interaction with the API will be raised as exceptions.| Error                    | Status Code ||--------------------------|-------------|| APIError                 |      *      |   | InvalidRequestError      |     400     |   | ParamRequiredError       |     400     |  | ValidationError          |     400     |  | AuthenticationError      |     401     |  | ResourceNotFoundError    |     404     || RateLimitExceededError   |     429     || InternalServerError      |     500     || ServiceUnavailableError  |     503     |## InstallationInstall with ``pip``:    pip install --upgrade coinbase-commerceor with ``easy_install``:    easy_install --upgrade coinbase-commerce## Usage```pythonfrom coinbase_commerce.client import Clientclient = Client(api_key=API_KEY)```## Checkouts [Checkouts API docs](https://commerce.coinbase.com/docs/api/#checkouts)### Retrieve```pythoncheckout = client.checkout.retrieve(&lt;checkout_id&gt;)```### Create```pythoncheckout_info = {    &quot;name&quot;: 'The Sovereign Individual',    &quot;description&quot;: 'Mastering the Transition to the Information Age',    &quot;pricing_type&quot;: 'fixed_price',    &quot;local_price&quot;: {        &quot;amount&quot;: &quot;100.00&quot;,        &quot;currency&quot;: &quot;USD&quot;    },    &quot;requested_info&quot;: [&quot;name&quot;, &quot;email&quot;]}checkout = client.checkout.create(**checkout_info)# orcheckout = client.checkout.create(name='The Sovereign Individual',                                  description='Mastering the Transition to the Information Age',                                  pricing_type='fixed_price',                                  local_price={                                          &quot;amount&quot;: &quot;100.00&quot;,                                          &quot;currency&quot;: &quot;USD&quot;                                          },                                  requested_info=[&quot;name&quot;, &quot;email&quot;])                            ```### Update```pythoncheckout = client.checkout.retrieve(&lt;checkout_id&gt;)checkout.name = 'new name'checkout.save()# orcheckout = client.checkout.modify('&lt;checkout_id&gt;',                                  name='new name')```### Delete```pythoncheckout.delete()```### List```pythoncheckouts = client.checkout.list()```### Paging list iterations```pythonfor checkout in client.checkout.list_paging_iter():    print(&quot;{!r}&quot;.format(checkout))```## Charges[Charges API docs](https://commerce.coinbase.com/docs/api/#charges)### Retrieve```pythoncharge = client.charge.retrieve(&lt;charge_id&gt;)```### Create```pythoncharge_info = {    &quot;name&quot;: &quot;The Sovereign Individual&quot;,    &quot;description&quot;: &quot;Mastering the Transition to the Information Age&quot;,    &quot;local_price&quot;: {        &quot;amount&quot;: &quot;100.00&quot;,        &quot;currency&quot;: &quot;USD&quot;    },    &quot;pricing_type&quot;: &quot;fixed_price&quot;}charge = client.charge.create(**charge_info)# orcharge = client.charge.create(name='The Sovereign Individual',                              description='Mastering the Transition to the Information Age',                              pricing_type='fixed_price',                              local_price={                                  &quot;amount&quot;: &quot;100.00&quot;,                                  &quot;currency&quot;: &quot;USD&quot;                              })```### List```pythoncheckouts = client.charge.list()```### Paging list iterations```pythonfor charge in client.charge.list_paging_iter():    print(&quot;{!r}&quot;.format(charge))```## Events[Events API Docs](https://commerce.coinbase.com/docs/api/#events)### Retrieve```pythonevent = client.event.retrieve(&lt;event_id&gt;)```### List```pythonevents = client.event.list()```### Paging list iterations```pythonfor event in client.event.list_paging_iter():    print(&quot;{!r}&quot;.format(event))```## Validating webhook signaturesYou could verify webhook signatures using our library.To perform the verification you'll need to provide the event data, a webhook signature from request header, and the endpointâ€™s secret.In case of invalid request signature or request payload, you will receive appropriate error message.```pythonWEBHOOK_SECRET = 'your_webhook_secret'# using Flask@app.route('/webhooks', methods=['POST'])def webhooks():    # event payload    request_data = request.data.decode('utf-8')    # webhook signature    request_sig = request.headers.get('X-CC-Webhook-Signature', None)    try:        # signature verification and event object construction        event = Webhook.construct_event(request_data, request_sig, WEBHOOK_SECRET)    except (WebhookInvalidPayload, SignatureVerificationError) as e:        return str(e), 400    print(&quot;Received event: id={id}, type={type}&quot;.format(id=event.id, type=event.type))    return 'success', 200```### Testing and ContributingAny and all contributions are welcome! The process is simple: fork this repo, make your changes, run the test suite, and submit a pull request. Tests are run via nosetest. To run the tests, clone the repository and then:#### Install the requirements```pip install -r requirements.txt```####  Run the tests for your current version of PythonUse tox to run the test suite against multiple versions of Python. You can install tox with pip or easy_install:```pip install toxeasy_install tox```Tox requires the appropriate Python interpreters to run the tests in different environments. We recommend using pyenv for this. Once you've installed the appropriate interpreters, running the tests in every environment is simple:```tox```</longdescription>
</pkgmetadata>