<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |Coverage Status| |Python 3| |PyPI| |Docs| |License: MIT|Motivation==========Zounds is a python library for working with sound. Its primary goals areto:-  layer semantically meaningful audio manipulations on top of numpy   arrays-  `help to organize the definition and persistence of audio processing   pipelines and machine learning experiments with   sound &lt;https://github.com/JohnVinyard/zounds/tree/master/zounds/learn&gt;`__Audio processing graphs and machine learning pipelines are defined using`featureflow &lt;https://github.com/JohnVinyard/featureflow&gt;`__.A Quick Example===============.. code:: python    import zounds    Resampled = zounds.resampled(resample_to=zounds.SR11025())    @zounds.simple_in_memory_settings    class Sound(Resampled):        &quot;&quot;&quot;        A simple pipeline that computes a perceptually weighted modified discrete        cosine transform, and &quot;persists&quot; feature data in an in-memory store.        &quot;&quot;&quot;        windowed = zounds.ArrayWithUnitsFeature(            zounds.SlidingWindow,            needs=Resampled.resampled,            wscheme=zounds.HalfLapped(),            wfunc=zounds.OggVorbisWindowingFunc(),            store=True)        mdct = zounds.ArrayWithUnitsFeature(            zounds.MDCT,            needs=windowed)        weighted = zounds.ArrayWithUnitsFeature(            lambda x: x * zounds.AWeighting(),            needs=mdct)    if __name__ == '__main__':        # produce some audio to test our pipeline, and encode it as FLAC        synth = zounds.SineSynthesizer(zounds.SR44100())        samples = synth.synthesize(zounds.Seconds(5), [220., 440., 880.])        encoded = samples.encode(fmt='FLAC')        # process the audio, and fetch features from our in-memory store        _id = Sound.process(meta=encoded)        sound = Sound(_id)        # grab all the frequency information, for a subset of the duration        start = zounds.Milliseconds(500)        end = start + zounds.Seconds(2)        snippet = sound.weighted[start: end, :]        # grab a subset of frequency information for the duration of the sound        freq_band = slice(zounds.Hertz(400), zounds.Hertz(500))        a440 = sound.mdct[:, freq_band]        # produce a new set of coefficients where only the 440hz sine wave is        # present        filtered = sound.mdct.zeros_like()        filtered[:, freq_band] = a440        # apply a geometric scale, which more closely matches human pitch        # perception, and apply it to the linear frequency axis        scale = zounds.GeometricScale(50, 4000, 0.05, 100)        log_coeffs = scale.apply(sound.mdct, zounds.HanningWindowingFunc())        # reconstruct audio from the MDCT coefficients        mdct_synth = zounds.MDCTSynthesizer()        reconstructed = mdct_synth.synthesize(sound.mdct)        filtered_reconstruction = mdct_synth.synthesize(filtered)        # start an in-browser REPL that will allow you to listen to and visualize        # the variables defined above (and any new ones you create in the session)        app = zounds.ZoundsApp(            model=Sound,            audio_feature=Sound.ogg,            visualization_feature=Sound.weighted,            globals=globals(),            locals=locals())        app.start(9999)Find more inspiration in the `examplesfolder &lt;https://github.com/JohnVinyard/zounds/tree/master/examples&gt;`__,or on the `blog &lt;http://johnvinyard.github.io/&gt;`__.Installation============Libsndfile Issues-----------------Installation currently requires you to build lbiflac and libsndfile fromsource, because of `an outstandingissue &lt;https://github.com/bastibe/PySoundFile/issues/130&gt;`__ that willbe corrected when the apt package is updated to ``libsndfile 1.0.26``.Download and run `thisscript &lt;https://raw.githubusercontent.com/JohnVinyard/zounds/master/setup.sh&gt;`__to handle this step.Numpy and Scipy---------------The `Anaconda &lt;https://www.continuum.io/downloads&gt;`__ pythondistribution is highly recommended.Zounds------Finally, just:.. code:: bash    pip install zounds.. |Build Status| image:: https://travis-ci.org/JohnVinyard/zounds.svg?branch=master   :target: https://travis-ci.org/JohnVinyard/zounds.. |Coverage Status| image:: https://coveralls.io/repos/github/JohnVinyard/zounds/badge.svg?branch=master   :target: https://coveralls.io/github/JohnVinyard/zounds?branch=master.. |Python 3| image:: https://img.shields.io/pypi/pyversions/zounds.svg.. |PyPI| image:: https://img.shields.io/pypi/v/zounds.svg   :target: https://pypi.python.org/pypi/zounds.. |Docs| image:: https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&amp;maxAge=86400   :target: http://zounds.readthedocs.io/en/latest/?badge=latest.. |License: MIT| image:: https://img.shields.io/badge/License-MIT-yellow.svg   :target: https://opensource.org/licenses/MIT</longdescription>
</pkgmetadata>