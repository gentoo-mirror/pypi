<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python: BSBLan API Client[![GitHub Release][releases-shield]][releases]![Project Stage][project-stage-shield]![Project Maintenance][maintenance-shield][![License][license-shield]](LICENSE.md)[![Build Status][build-shield]][build][![Code Coverage][codecov-shield]][codecov][![Code Quality][code-quality-shield]][code-quality][![Buy me a coffee][buymeacoffee-shield]][buymeacoffee]Asynchronous Python client for BSBLan.## AboutThis package allows you to control and monitor an BSBLan deviceprogrammatically. It is mainly created to allow third-party programs to automatethe behavior of [BSBLan][bsblanmodule].## Installation```bashpip install bsblan```## Usage```python# pylint: disable=W0621&quot;&quot;&quot;Asynchronous Python client for BSBLan.&quot;&quot;&quot;import asynciofrom bsblan import BSBLan, Info, Stateasync def main(loop):    &quot;&quot;&quot;Show example on controlling your BSBLan device.    Options:    - passkey (http://url/&quot;passkey&quot;/) if your device is setup for passkey authentication    - username and password if your device is setup for username/password authentication    &quot;&quot;&quot;    async with BSBLan(        host=&quot;10.0.1.60&quot;, passkey=None, username=None, password=None, loop=loop    ) as bsblan:        # get state from bsblan device        state: State = await bsblan.state()        print(state)        # set temp thermostat        await bsblan.thermostat(target_temperature=19.0)        # set hvac_mode (0-3) (protection,auto,reduced,comfort)        await bsblan.thermostat(hvac_mode=3)        # get some generic info from the heater        info: Info = await bsblan.info()        print(info)if __name__ == &quot;__main__&quot;:    loop = asyncio.get_event_loop()    loop.run_until_complete(main(loop))```## Changelog &amp; ReleasesThis repository keeps a change log using [GitHub's releases][releases]functionality. The format of the log is based on[Keep a Changelog][keepchangelog].Releases are based on [Semantic Versioning][semver], and use the formatof ``MAJOR.MINOR.PATCH``. In a nutshell, the version will be incrementedbased on the following:- ``MAJOR``: Incompatible or major changes.- ``MINOR``: Backwards-compatible new features and enhancements.- ``PATCH``: Backwards-compatible bugfixes and package updates.## ContributingThis is an active open-source project. We are always open to people who want touse the code or contribute to it.We've set up a separate document for our[contribution guidelines](CONTRIBUTING.md).Thank you for being involved! :heart_eyes:## Setting up development environmentIn case you'd like to contribute, a `Makefile` has been included to ensure aquick start.```bashmake venvsource ./venv/bin/activatemake dev```Now you can start developing, run `make` without arguments to get an overviewof all make goals that are available (including description):```bash$ makeAsynchronous Python client for BSBLan.Usage:  make help                            Shows this message.  make dev                             Set up a development environment.  make lint                            Run all linters.  make lint-black                      Run linting using black &amp; blacken-docs.  make lint-flake8                     Run linting using flake8 (pycodestyle/pydocstyle).  make lint-pylint                     Run linting using PyLint.  make lint-mypy                       Run linting using MyPy.  make test                            Run tests quickly with the default Python.  make coverage                        Check code coverage quickly with the default Python.  make install                         Install the package to the active Python's site-packages.  make clean                           Removes build, test, coverage and Python artifacts.  make clean-all                       Removes all venv, build, test, coverage and Python artifacts.  make clean-build                     Removes build artifacts.  make clean-pyc                       Removes Python file artifacts.  make clean-test                      Removes test and coverage artifacts.  make clean-venv                      Removes Python virtual environment artifacts.  make dist                            Builds source and wheel package.  make release                         Release build on PyP  make venv                            Create Python venv environment.```## Authors &amp; contributorsThe template is from the repository 'wled' by [Franck Nijhof][frenck].Folowing the cool [live coding][live-coding] feed from frenck!The original setup of this repository is by [Willem-Jan van Rootselaar][liudger].For a full list of all authors and contributors,check [the contributor's page][contributors].## LicenseMIT LicenseCopyright (c) 2022 WJ van RootselaarPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.[build-shield]: https://github.com/liudger/python-bsblan/workflows/Continuous%20Integration/badge.svg[build]: https://github.com/liudger/python-bsblan/actions[buymeacoffee-shield]: https://www.buymeacoffee.com/assets/img/guidelines/download-assets-sm-2.svg[buymeacoffee]: https://www.buymeacoffee.com/liudger[code-quality-shield]: https://img.shields.io/lgtm/grade/python/g/liudger/python-bsblan.svg?logo=lgtm&amp;logoWidth=18[code-quality]: https://lgtm.com/projects/g/liudger/python-bsblan/context:python[codecov-shield]: https://codecov.io/gh/liudger/python-bsblan/branch/Dev/graph/badge.svg?token=ypos87GGxv[codecov]: https://codecov.io/gh/liudger/python-bsblan[contributors]: https://github.com/liudger/python-bsblan/graphs/contributors[liudger]: https://github.com/liudger[frenck]: https://github.com/frenck[keepchangelog]: http://keepachangelog.com/en/1.0.0/[bsblanmodule]: https://github.com/fredlcore/bsb_lan[license-shield]: https://img.shields.io/github/license/liudger/python-bsblan.svg[maintenance-shield]: https://img.shields.io/maintenance/yes/2022.svg[live-coding]: https://www.youtube.com/watch?v=6LHeoUS1R40[project-stage-shield]: https://img.shields.io/badge/project%20stage-experimental-yellow.svg[releases-shield]: https://img.shields.io/github/v/release/liudger/python-bsblan.svg[releases]: https://github.com/liudger/python-bsblan/releases[semver]: http://semver.org/spec/v2.0.0.html</longdescription>
</pkgmetadata>