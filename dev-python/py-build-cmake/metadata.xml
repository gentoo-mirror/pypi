<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python Wheel](https://github.com/tttapa/py-build-cmake/actions/workflows/wheel.yml/badge.svg)](https://github.com/tttapa/py-build-cmake/actions/workflows/wheel.yml)[![Documentation](https://img.shields.io/badge/Documentation-main-blue)](https://tttapa.github.io/py-build-cmake)[![PyPI - Downloads](https://img.shields.io/pypi/dm/py-build-cmake?label=PyPI)](https://pypi.org/project/py-build-cmake)# py-build-cmakeModern, [PEP 517](https://www.python.org/dev/peps/pep-0517/) compliant buildbackend for creating Python packages with extensions built using CMake.## Features - Building and packaging C, C++ or Fortran extension modules for Python using CMake - Declarative configuration using `pyproject.toml` ([PEP 621](https://www.python.org/dev/peps/pep-0621/)), compatible with   [flit](https://github.com/pypa/flit) - Editable/development installations for Python modules ([PEP 660](https://www.python.org/dev/peps/pep-0660/)) - Compatible with [pybind11](https://github.com/pybind/pybind11) and [nanobind](https://github.com/wjakob/nanobind) - Stub generation for type checking and autocompletion - Customizable CMake configuration, build and installation options - Support for multiple installation configurations and components - Cross-compilation support - No dependency on [setuptools](https://github.com/pypa/setuptools) - Compatible with [cibuildwheel](https://github.com/pypa/cibuildwheel) for building Wheels## InstallationThe py-build-cmake package is available on[PyPI](https://pypi.org/project/py-build-cmake/):```shpip install py-build-cmake```## DocumentationThe documentation can be found on &lt;https://tttapa.github.io/py-build-cmake&gt;.The format of the configuration file is explained in [Config.md](https://tttapa.github.io/py-build-cmake/Config.html).Alternatively, use the [command-line interface](https://tttapa.github.io/py-build-cmake/CLI.html)to get the documentation for all supported options:```shpy-build-cmake config format```## UsageIf you don't have one already, add a `pyproject.toml` configuration file to yourproject's repository. Specify the metadata required by [PEP 621](https://www.python.org/dev/peps/pep-0621/),and tell py-build-cmake how to build your project. For example:```toml[project] # Project metadataname = &quot;example-project&quot;readme = &quot;README.md&quot;requires-python = &quot;&gt;=3.7&quot;license = { &quot;file&quot; = &quot;LICENSE&quot; }authors = [{ &quot;name&quot; = &quot;Pieter P&quot;, &quot;email&quot; = &quot;pieter.p.dev@outlook.com&quot; }]keywords = [&quot;some&quot;, &quot;keywords&quot;]classifiers = [&quot;Topic :: Scientific/Engineering&quot;]urls = { &quot;Documentation&quot; = &quot;https://tttapa.github.io/py-build-cmake&quot; }dependencies = [&quot;numpy&quot;]dynamic = [&quot;version&quot;, &quot;description&quot;][build-system] # How pip and other frontends should build this projectrequires = [&quot;py-build-cmake~=0.1.6&quot;]build-backend = &quot;py_build_cmake.build&quot;[tool.py-build-cmake.module] # Where to find the Python module to packagedirectory = &quot;src-python&quot;[tool.py-build-cmake.sdist] # What to include in source distributionsinclude = [&quot;CMakeLists.txt&quot;, &quot;src/*&quot;][tool.py-build-cmake.cmake] # How to build the CMake projectbuild_type = &quot;RelWithDebInfo&quot;source_path = &quot;src&quot;build_args = [&quot;-j&quot;]install_components = [&quot;python_modules&quot;][tool.py-build-cmake.stubgen] # Whether and how to generate typed stub files```The README of [`examples/minimal`](https://github.com/tttapa/py-build-cmake/tree/main/examples/minimal)describes this configuration file in much more detail.Then use [`pip`](https://github.com/pypa/pip), [`build`](https://github.com/pypa/build)or another PEP 517 compatible frontend to build and/or install the package.Build sdist and wheel packages you can upload to PyPI:```shpython -m pip install -U buildpython -m build . # find the sdist and wheel file in the 'dist' folder```Install the package in the current environment:```shpip install .    # normal installationpip install -e . # editable installation```## ExamplesAs an introduction to py-build-cmake, see [`examples/minimal`](https://github.com/tttapa/py-build-cmake/tree/main/examples/minimal)for a detailed overview of the configuration files and the directory structure,using a very simple Python module as an example.  For a more advanced, real-world example, see [`examples/pybind11-project`](https://github.com/tttapa/py-build-cmake/tree/main/examples/pybind11-project)and [`examples/nanobind-project`](https://github.com/tttapa/py-build-cmake/tree/main/examples/nanobind-project).  If you are interested in packaging C/C++/Fortran programs using py-build-cmake,have a look at [`examples/minimal-program`](https://github.com/tttapa/py-build-cmake/tree/main/examples/minimal-program).## Projects using py-build-cmakeIf you need more examples, you can look at the following projects usingpy-build-cmake as their Python build backend:- [alpaqa](https://github.com/kul-optec/alpaqa/tree/develop)- [QPALM](https://github.com/kul-optec/QPALM)## Planned features - [x] ~~macOS support~~ - [x] ~~Entry point support~~ - [ ] Namespace package support ([PEP 420](https://www.python.org/dev/peps/pep-0420/)) - [ ] Doxygen and Sphinx support</longdescription>
</pkgmetadata>