<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># googleapiutils2Utilities for[Google's v2 Python API](https://github.com/googleapis/google-api-python-client).Currently supports sections of the following resources:-   [Drive](https://developers.google.com/drive/api/reference/rest/v3): `DriveResource`,    `FilesResource`, `PermissionsResource`, `RepliesResource`, `...`-   [Sheets](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets):    `SpreadsheetsResource`, `ValuesResource`, `...`-   [Geocoding](https://developers.google.com/maps/documentation/geocoding/overview)## Quickstart üöÄThis project requires Python `^3.10` to run.Several dependencies are needed, namely the aforesaid Google Python API, but alsoGoogle's oauth library, and `requests`. Pre-bundled for ease of use are the fairlymonolithic `google-api-stubs`, which greatly improves the usage experience.### via [`poetry`](https://python-poetry.org/docs/)Install poetry, then run&gt; poetry installAnd you're done.## Overview üìñThe library was written to be consistent with Google's own Python API - just a littleeasier to use. Most `Drive` and `Sheets` operations are supported using explicitparameters. But most functions thereof take a `**kwargs` parameter (used for parameterforwarding) to allow for the more granular usage of the underlying API.A note on IDs: anytime a resource ID is needed, one can be provide the actual resourceID, or the URL to the resource. If a URL is provided, this mapping is cached for futureuse.## Authentication üîëBefore using a `Drive` or `Sheets` object, one must first authenticate. This is done viathe `google.oauth2` library, creating a `Credentials` object.### Custom CredentialsThe library supports two methods of authentication:-   via a Google service account (recommended, see more    [here](https://cloud.google.com/iam/docs/creating-managing-service-accounts))-   via OAuth2 (see more    [here](https://developers.google.com/identity/protocols/oauth2/native-app))With a service account, one can programmatically access resources without user input.This is by far the easiest route, but requires a bit of setup.If one's not using a service account, the library will attempt to open a browser windowto authenticate using the provided credentials. This authentication is cached for futureusage (though it does expire on some interval) - so an valid token path is required.See the [`get_oauth2_creds`](googleapiutils2/utils.py) function for more information.### Default CredentialsTo expedite development, all credentials-based objects will default to using a serviceaccount by way of the following discovery scheme:-   If `./auth/credentials.json` exists, use that credentials file.-   If the `GOOGLE_API_CREDENTIALS` environment variable is set, use the credentials    file pointed to by the variable.## Drive üìÅExample: copy a file to a folder.```pythonfrom googleapiutils2 import Drivedrive = Drive()filename = &quot;Heyy&quot;file = drive.get(filename, parents=[FOLDER_URL])if file is not None:    drive.delete(file[&quot;id&quot;])file = drive.copy(file_id=FILE_ID, to_filename=filename, to_folder_id=FOLDER_URL)```What the above does is:-   Get the OAuth2 credentials using the default discvoery scheme (JSON object    representing the requisite credentials, see    [here](https://developers.google.com/identity/protocols/oauth2/native-app#step-2:-send-a-request-to-googles-oauth-2.0-server)    for more information).-   create a `Drive` object thereupon.-   Get the file with the given name, and delete it if it exists.-   Copy the file with the given ID to the given folder, and return the new file.## Sheets üìäExample: update a range of cells in a sheet.```pythonsheets = Sheets()Sheet1 = SheetsValueRange(sheets, SHEET_ID, sheet_name=&quot;Sheet1&quot;)rows = [    {        &quot;Heyy&quot;: &quot;99&quot;,    }]Sheet1[2:3, ...].update(rows)```What the above does is:-   Get the OAuth2 credentials using the default discvoery scheme (JSON object    representing the requisite credentials, see    [here](https://developers.google.com/identity/protocols/oauth2/native-app#step-2:-send-a-request-to-googles-oauth-2.0-server)    for more information).-   create a `Sheets` object thereupon.-   Create a `SheetsValueRange` object, which is a wrapper around the    `spreadsheets.values` API.-   Update the range `Sheet1!A2:B3` with the given rows.Note the slicing syntax, which will feel quite familiar for any user of Numpy or Pandas.### SheetSliceA `SheetsValueRange` object can be sliced in a similar manner to that of a Numpy array.The syntax is as follows:    slc = Sheet[rows, cols]Wherein `rows` and `cols` are either integers, slices of integers (stride is notsupported), strings (in A1 notation), or ellipses (`...`).Note that Google's implementation of A1 notation is 1-indexed; 0 is invalid (e.g., 1maps to `A`, 2 to `B`, etc.)```pyix = SheetSlice[&quot;Sheet1&quot;, 1:3, 2:4] #  &quot;Sheet1!B2:D4&quot;ix = SheetSlice[&quot;Sheet1&quot;, &quot;A1:B2&quot;]  #  &quot;Sheet1!A1:B2&quot;ix = SheetSlice[1:3, 2:4]           #  &quot;Sheet1!B2:D4&quot;ix = SheetSlice[&quot;A1:B2&quot;]            #  &quot;Sheet1!A1:B2&quot;ix = SheetSlice[..., 1:3]           #  &quot;Sheet1!A1:Z3&quot;values = {    SheetSlice[&quot;A1:B2&quot;]: [        [&quot;Heyy&quot;, &quot;99&quot;],        [&quot;Heyy&quot;, &quot;99&quot;],    ],} # &quot;Sheet1!A1:B2&quot; = [[&quot;Heyy&quot;, &quot;99&quot;], [&quot;Heyy&quot;, &quot;99&quot;]]```A `SheetSlice` can also be used as a key into a `SheetsValueRange`, or a dictionary (touse in updating a sheet's range via `.update()`, for example). Further, a`SheetsValueRange` can be sliced in a similar manner to that of a `SheetSlice`.```pySheet1[2:3, ...].update(rows)...```### Why &quot;2&quot; ü§îDon't ask :3</longdescription>
</pkgmetadata>