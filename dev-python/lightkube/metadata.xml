<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># lightkube![](https://img.shields.io/github/actions/workflow/status/gtsystem/lightkube/python-package.yml?branch=master)[![Coverage Status](https://coveralls.io/repos/github/gtsystem/lightkube/badge.svg?branch=master)](https://coveralls.io/github/gtsystem/lightkube?branch=master)[![pypi supported versions](https://img.shields.io/pypi/pyversions/lightkube.svg)](https://pypi.python.org/pypi/lightkube)Modern lightweight kubernetes module for python## Highlights* *Simple* interface shared across all kubernetes APIs.* Extensive *type hints* to avoid common mistakes and to support autocompletion.* Models and resources generated from the swagger specifications using standard dataclasses.* Load/Dump resource objects from YAML.* Support for async/await* Support for installing a specific version of the kubernetes models (1.15 to 1.28)* Lazy instantiation of inner models.* Fast startup and small memory footprint as only needed models and resources can be imported.* Automatic handling of pagination when listing resources.This module is powered by [httpx](https://github.com/encode/httpx/tree/master/httpx). ## InstallationThis module requires python &gt;= 3.7     pip install lightkube## UsageRead a pod```pythonfrom lightkube import Clientfrom lightkube.resources.core_v1 import Podclient = Client()pod = client.get(Pod, name=&quot;my-pod&quot;, namespace=&quot;default&quot;)print(pod.namespace.uid)```List nodes```pythonfrom lightkube import Clientfrom lightkube.resources.core_v1 import Nodeclient = Client()for node in client.list(Node):    print(node.metadata.name)```Watch deployments```pythonfrom lightkube import Clientfrom lightkube.resources.apps_v1 import Deploymentclient = Client()for op, dep in client.watch(Deployment, namespace=&quot;default&quot;):    print(f&quot;{dep.namespace.name} {dep.spec.replicas}&quot;)```Create a config map```pythonfrom lightkube.resources.core_v1 import ConfigMapfrom lightkube.models.meta_v1 import ObjectMetaconfig = ConfigMap(    metadata=ObjectMeta(name='my-config', namespace='default'),    data={'key1': 'value1', 'key2': 'value2'})client.create(config)```Replace the previous config with a different content```pythonconfig.data['key1'] = 'new value'client.replace(config)```Patch an existing config```pythonpatch = {'metadata': {'labels': {'app': 'xyz'}}}client.patch(ConfigMap, name='my-config', namespace='default', obj=patch)```Delete a namespaced resource```pythonclient.delete(ConfigMap, name='my-config', namespace='default')```Create resources defined in a file```pythonfrom lightkube import Client, codecsclient = Client()with open('deployment.yaml') as f:    for obj in codecs.load_all_yaml(f):        client.create(obj)```Scale a deployment```pythonfrom lightkube.resources.apps_v1 import Deploymentfrom lightkube.models.meta_v1 import ObjectMetafrom lightkube.models.autoscaling_v1 import ScaleSpecobj = Deployment.Scale(    metadata=ObjectMeta(name='metrics-server', namespace='kube-system'),    spec=ScaleSpec(replicas=1))client.replace(obj)```Create and modify resources using [server side apply](https://kubernetes.io/docs/reference/using-api/server-side-apply/)*Note:* `field_manager` is required for server-side apply. You can specify it once in the client constructoror when calling `apply()`. Also `apiVersion` and `kind` need to be provided as part ofthe object definition.```pythonfrom lightkube.resources.core_v1 import ConfigMapfrom lightkube.models.meta_v1 import ObjectMetaclient = Client(field_manager=&quot;my-manager&quot;)config = ConfigMap(    # note apiVersion and kind need to be specified for server-side apply    apiVersion='v1', kind='ConfigMap',    metadata=ObjectMeta(name='my-config', namespace='default'),    data={'key1': 'value1', 'key2': 'value2'})res = client.apply(config)print(res.data)# prints {'key1': 'value1', 'key2': 'value2'}del config.data['key1']config.data['key3'] = 'value3'res = client.apply(config)print(res.data)# prints {'key2': 'value2', 'key3': 'value3'}```Stream pod logs```pythonfrom lightkube import Clientclient = Client()for line in client.log('my-pod', follow=True):    print(line)```## Unsupported featuresThe following features are not supported at the moment:* Special subresources `attach`, `exec`, `portforward` and `proxy`.* `auth-provider` authentication method is not supported. The supported  authentication methods are `token`, `username` + `password` and `exec`.</longdescription>
</pkgmetadata>