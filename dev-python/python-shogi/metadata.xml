<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-shogi: a pure Python shogi library=========================================.. image:: https://coveralls.io/repos/gunyarakun/python-shogi/badge.svg    :target: https://coveralls.io/r/gunyarakun/python-shogi.. image:: https://badge.fury.io/py/python-shogi.svg    :target: https://pypi.python.org/pypi/python-shogi.. image:: https://github.com/gunyarakun/python-shogi/actions/workflows/pythonpackage.yml/badge.svg    :target: https://github.com/gunyarakun/python-shogi/actions/workflows/pythonpackage.yml    .. image:: https://github.com/gunyarakun/python-shogi/actions/workflows/codeql-analysis.yml/badge.svg    :target: https://github.com/gunyarakun/python-shogi/actions/workflows/codeql-analysis.yml    Introduction------------This is the module for shogi written in Pure Python. It's based on python-chess `commit &lt;https://github.com/niklasf/python-chess/commit/6203406259504cddf6f271e6a7b1e04ba0c96165&gt;`__This is the scholars mate in python-shogi:.. code:: python    &gt;&gt;&gt; import shogi    &gt;&gt;&gt; board = shogi.Board()    &gt;&gt;&gt; board.push(shogi.Move.from_usi('7g7f'))    &gt;&gt;&gt; board.push_usi('3c3d')    Move.from_usi('3c3d')    &gt;&gt;&gt; board.push_usi('8h2b+')    Move.from_usi('8h2b+')    &gt;&gt;&gt; board.push_usi('4a5b')    Move.from_usi('4a5b')    &gt;&gt;&gt; board.push_usi('B*4b')    Move.from_usi('B*4b')    &gt;&gt;&gt; board.push_usi('5a4a')    Move.from_usi('5a4a')    &gt;&gt;&gt; board.push_usi('2b3a')    Move.from_usi('2b3a')    &gt;&gt;&gt; board.is_checkmate()    TrueFeatures--------* Supports Python 3.3+.* Supports standard shogi (hon shogi)* Legal move generator and move validation.  .. code:: python      &gt;&gt;&gt; shogi.Move.from_usi(&quot;5i5a&quot;) in board.legal_moves      False* Make and unmake moves.  .. code:: python      &gt;&gt;&gt; last_move = board.pop() # Unmake last move      &gt;&gt;&gt; last_move      Move.from_usi('2b3a')      &gt;&gt;&gt; board.push(last_move) # Restore* Show a simple ASCII board.  .. code:: python      &gt;&gt;&gt; print(board)       l  n  s  g  .  k +B  n  l       .  r  .  .  g  B  .  .  .       p  p  p  p  p  p  .  p  p       .  .  .  .  .  .  p  .  .       .  .  .  .  .  .  .  .  .       .  .  P  .  .  .  .  .  .       P  P  .  P  P  P  P  P  P       .  .  .  .  .  .  .  R  .       L  N  S  G  K  G  S  N  L      &lt;BLANKLINE&gt;       S*1* Show a KIF style board.  .. code:: python      &gt;&gt;&gt; print(board.kif_str())      後手の持駒：        ９ ８ ７ ６ ５ ４ ３ ２ １      +---------------------------+      |v香v桂v銀v金 ・v玉 馬v桂v香|一      | ・v飛 ・ ・v金 角 ・ ・ ・|二      |v歩v歩v歩v歩v歩v歩 ・v歩v歩|三      | ・ ・ ・ ・ ・ ・v歩 ・ ・|四      | ・ ・ ・ ・ ・ ・ ・ ・ ・|五      | ・ ・ 歩 ・ ・ ・ ・ ・ ・|六      | 歩 歩 ・ 歩 歩 歩 歩 歩 歩|七      | ・ ・ ・ ・ ・ ・ ・ 飛 ・|八      | 香 桂 銀 金 玉 金 銀 桂 香|九      +---------------------------+      先手の持駒：　銀* Detects checkmates, stalemates.  .. code:: python      &gt;&gt;&gt; board.is_stalemate()      False      &gt;&gt;&gt; board.is_game_over()      True* Detects repetitions. Has a half move clock.  .. code:: python      &gt;&gt;&gt; board.is_fourfold_repetition()      False      &gt;&gt;&gt; board.move_number      8* Detects checks and attacks.  .. code:: python      &gt;&gt;&gt; board.is_check()      True      &gt;&gt;&gt; board.is_attacked_by(shogi.BLACK, shogi.A4)      True      &gt;&gt;&gt; attackers = board.attackers(shogi.BLACK, shogi.H5)      &gt;&gt;&gt; attackers      SquareSet(0b111000010000000000000000000000000000000000000000000000000000000000000000000000)      &gt;&gt;&gt; shogi.H2 in attackers      True      &gt;&gt;&gt; print(attackers)      . . . . . . . . .      . . . . . . . . .      . . . . . . . . .      . . . . . . . . .      . . . . . . . . .      . . . . . . . . .      . . . . . . . . .      . . . . . . . 1 .      . . . 1 1 1 . . .* Parses and creates USI representation of moves.  .. code:: python      &gt;&gt;&gt; board = shogi.Board()      &gt;&gt;&gt; shogi.Move(shogi.E2, shogi.E4).usi()      '2e4e'* Parses and creates SFENs  .. code:: python      &gt;&gt;&gt; board.sfen()      'lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1'      &gt;&gt;&gt; board.piece_at(shogi.I5)      Piece.from_symbol('K')* Read KIFs.  .. code:: python      &gt;&gt;&gt; import shogi.KIF      &gt;&gt;&gt; kif = shogi.KIF.Parser.parse_file('data/games/habu-fujii-2006.kif')[0]      &gt;&gt;&gt; kif['names'][shogi.BLACK]      '羽生善治'      &gt;&gt;&gt; kif['names'][shogi.WHITE]      '藤井猛'      &gt;&gt;&gt; kif['moves'] # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE      ['7g7f',       '3c3d',       ...,       '9a9b',       '7a7b+']      &gt;&gt;&gt; kif['win']      'b'* Export to KIFs.  .. code:: python      &gt;&gt;&gt; import shogi      &gt;&gt;&gt; import shogi.KIF      &gt;&gt;&gt; board = shogi.Board()      &gt;&gt;&gt; shogi.KIF.Exporter.kif_move_from('7g7f', board)      '７六歩(77)'      &gt;&gt;&gt; sfen_summary = {'moves': ['7g7f', '3c3d'], 'sfen': 'lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1', 'names': ['羽生善治', '藤井猛'], 'win': 'w'}      &gt;&gt;&gt; shogi.KIF.Exporter.kif(sfen_summary)      開始日時： \r      終了日時： \r      手合割：平手\r      先手：羽生善治\r      後手：藤井猛\r      手数----指手---------消費時間-- \r      1 ７六歩(77) \r      2 ３四歩(33) \r      3 投了 \r      まで2手で後手の勝ち\r* Communicate with a CSA protocol.  Please see `random_csa_tcp_match &lt;https://github.com/gunyarakun/python-shogi/blob/master/scripts/random_csa_tcp_match&gt;`_.* Parse professional shogi players' name      &gt;&gt;&gt; import shogi.Person      &gt;&gt;&gt; shogi.Person.Name.is_professional('羽生　善治 名人・棋聖・王位・王座')      TruePerformance-----------python-shogi is not intended to be used by serious shogi engines whereperformance is critical. The goal is rather to create a simple and relativelyhighlevel library.You can install the `gmpy2 &lt;https://pypi.org/project/gmpy2&gt;`__ or `gmpy &lt;https://pypi.org/project/gmpy&gt;`__ modulesin order to get a slight performance boost on basic operations like bit scansand population counts.python-shogi will only ever import very basic general (non-shogi-related)operations from native libraries. All logic is pure Python. There will alwaysbe pure Python fallbacks.Installing----------* With pip:  ::      pip install python-shogiHow to test-----------::  &gt; make testIf you want to print lines from the standard output, execute nosetests like following.::  &gt; poetry run nosetests -sHow to release--------------::  poetry config repositories.testpypi https://test.pypi.org/legacy/  # poetry config pypi-token.testpypi &quot;Test PyPI API Token&quot;  make test-upload  # poetry config pypi-token.pypi &quot;PyPI API Token&quot;  make uploadToDo----- Support board.generate_attacks() and use it in board.is_attacked_by() and board.attacker_mask().- Remove rotated bitboards and support `Shatranj-style direct lookup  &lt;http://arxiv.org/pdf/0704.3773.pdf&gt;`_ like recent python-chess.- Support %MATTA etc. in CSA TCP Protocol.- Support board.is_pinned() and board.pin().</longdescription>
</pkgmetadata>