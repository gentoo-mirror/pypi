<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI Status](https://github.com/kitzeslab/opensoundscape/workflows/CI/badge.svg)](https://github.com/kitzeslab/opensoundscape/actions?query=workflow%3ACI)[![Documentation Status](https://readthedocs.org/projects/opensoundscape/badge/?version=latest)](http://opensoundscape.org/en/latest/?badge=latest)# OpenSoundscapeOpenSoundscape is a utility library for analyzing bioacoustic data. It consists of Python modules for tasks such as preprocessing audio data, training machine learning models to classify vocalizations, estimating the spatial location of sounds, identifying which species' sounds are present in acoustic data, and more.These utilities can be strung together to create data analysis pipelines. OpenSoundscape is designed to be run on any scale of computer: laptop, desktop, or computing cluster.OpenSoundscape is currently in active development. If you find a bug, please submit an issue. If you have another question about OpenSoundscape, please email Sam Lapp (`sam.lapp` at `pitt.edu`).#### Suggested Citation```Lapp, Rhinehart, Freeland-Haynes, Khilnani, Syunkova, and Kitzes, 2022. &quot;OpenSoundscape v0.8.0&quot;.```# InstallationOpenSoundscape can be installed on Windows, Mac, and Linux machines. It has been tested on Python 3.7, 3.8, and 3.9. For Apple Silicon (M1 chip) users, Python 3.9 is recommended and may be required to avoid dependency issues. Python version 3.7.0 causes dependency issues and should be avoided. Most users should install OpenSoundscape via pip: `pip install opensoundscape==0.8.0`. Contributors and advanced users can also use Poetry to install OpenSoundscape.For more detailed instructions on how to install OpenSoundscape and use it in Jupyter, see the [documentation](http://opensoundscape.org).# Features &amp; TutorialsOpenSoundscape includes functions to:* load and manipulate audio files* create and manipulate spectrograms* train CNNs on spectrograms with PyTorch* run pre-trained CNNs to detect vocalizations* detect periodic vocalizations with RIBBIT* load and manipulate Raven annotationsOpenSoundscape can also be used with our library of publicly available trained machine learning models for the detection of 500 common North American bird species.For full API documentation and tutorials on how to use OpenSoundscape to work with audio and spectrograms, train machine learning models, apply trained machine learning models to acoustic data, and detect periodic vocalizations using RIBBIT, see the [documentation](http://opensoundscape.org).# Quick StartUsing Audio and Spectrogram classes```pythonfrom opensoundscape.audio import Audiofrom opensoundscape.spectrogram import Spectrogram#load an audio file and trim out a 5 second clipmy_audio = Audio.from_file(&quot;/path/to/audio.wav&quot;)clip_5s = my_audio.trim(0,5)#create a spectrogram and plot itmy_spec = Spectrogram.from_audio(clip_5s)my_spec.plot()```Load audio starting at a real-world timestamp```pythonfrom datetime import datetime; import pytzstart_time = pytz.timezone('UTC').localize(datetime(2020,4,4,10,25))audio_length = 5 #seconds  path = '/path/to/audiomoth_file.WAV' #an AudioMoth recordingAudio.from_file(path, start_timestamp=start_time,duration=audio_length)```Using a pre-trained CNN to make predictions on long audio files```pythonfrom opensoundscape.torch.models.cnn import load_model#get list of audio filesfiles = glob('./dir/*.WAV')#generate predictions with a modelmodel = load_model('/path/to/saved.model')scores = model.predict(files)#scores is a dataframe with MultiIndex: file, start_time, end_time#containing inference scores for each class and each audio window```Training a CNN with labeled audio data```pythonfrom opensoundscape.torch.models.cnn import CNNfrom sklearn.model_selection import train_test_split#load a DataFrame of one-hot audio clip labelsdf = pd.read_csv('my_labels.csv') #index: paths; columns: classestrain_df, validation_df = train_test_split(df,test_size=0.2)#create a CNN and train on 2-second spectrograms for 2 epochsmodel = CNN('resnet18',classes=df.columns,sample_duration=2.0)model.train(  train_df,  validation_df,  epochs=2)#the best model is automatically saved to a file `./best.model````</longdescription>
</pkgmetadata>