<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/aminalaee/sqladmin&quot;&gt;    &lt;img width=&quot;400px&quot; src=&quot;https://raw.githubusercontent.com/aminalaee/sqladmin/main/docs/assets/images/banner.png&quot; alt&quot;SQLAdmin&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/aminalaee/sqladmin/actions&quot;&gt;    &lt;img src=&quot;https://github.com/aminalaee/sqladmin/workflows/Test%20Suite/badge.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/aminalaee/sqladmin/actions&quot;&gt;    &lt;img src=&quot;https://github.com/aminalaee/sqladmin/workflows/Publish/badge.svg&quot; alt=&quot;Publish Status&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/aminalaee/sqladmin&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/aminalaee/sqladmin/branch/main/graph/badge.svg&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/sqladmin/&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/sqladmin.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/sqladmin&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/sqladmin.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;---# SQLAlchemy Admin for Starlette/FastAPISQLAdmin is a flexible Admin interface for SQLAlchemy models.Main features include:* [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy) sync/async engines* [Starlette](https://github.com/encode/starlette) integration* [FastAPI](https://github.com/tiangolo/fastapi) integration* [SQLModel](https://github.com/tiangolo/sqlmodel) support* UI using [Tabler](https://github.com/tabler/tabler)---**Documentation**: [https://aminalaee.dev/sqladmin](https://aminalaee.dev/sqladmin)**Source Code**: [https://github.com/aminalaee/sqladmin](https://github.com/aminalaee/sqladmin)**Online Demo**: [Demo](https://sqladmin-demo.aminalaee.dev/admin/)---## Installation```shell$ pip install sqladmin```---## Screenshots&lt;img width=&quot;1492&quot; alt=&quot;sqladmin-1&quot; src=&quot;https://user-images.githubusercontent.com/19784933/208232730-0114a155-2740-4e89-9d73-64a4e51a5cf5.png&quot;&gt;&lt;img width=&quot;1492&quot; alt=&quot;sqladmin-2&quot; src=&quot;https://user-images.githubusercontent.com/19784933/208232731-6d783dde-b93e-41c0-911b-3d1c3c73f1d5.png&quot;&gt;## QuickstartLet's define an example SQLAlchemy model:```pythonfrom sqlalchemy import Column, Integer, String, create_enginefrom sqlalchemy.ext.declarative import declarative_baseBase = declarative_base()engine = create_engine(    &quot;sqlite:///example.db&quot;,    connect_args={&quot;check_same_thread&quot;: False},)class User(Base):    __tablename__ = &quot;users&quot;    id = Column(Integer, primary_key=True)    name = Column(String)Base.metadata.create_all(engine)  # Create tables```If you want to use `SQLAdmin` with `FastAPI`:```pythonfrom fastapi import FastAPIfrom sqladmin import Admin, ModelViewapp = FastAPI()admin = Admin(app, engine)class UserAdmin(ModelView, model=User):    column_list = [User.id, User.name]admin.add_view(UserAdmin)```Or if you want to use `SQLAdmin` with `Starlette`:```pythonfrom sqladmin import Admin, ModelViewfrom starlette.applications import Starletteapp = Starlette()admin = Admin(app, engine)class UserAdmin(ModelView, model=User):    column_list = [User.id, User.name]admin.add_view(UserAdmin)```Now visiting `/admin` on your browser you can see the `SQLAdmin` interface.## Related projects and inspirations* [Flask-Admin](https://github.com/flask-admin/flask-admin) Admin interface for Flask supporting different database backends and ORMs. This project has inspired SQLAdmin extensively and most of the features and configurations are implemented the same.* [FastAPI-Admin](https://github.com/fastapi-admin/fastapi-admin) Admin interface for FastAPI which works with `TortoiseORM`.* [Dashboard](https://github.com/encode/dashboard) Admin interface for ASGI frameworks which works with the `orm` package.</longdescription>
</pkgmetadata>