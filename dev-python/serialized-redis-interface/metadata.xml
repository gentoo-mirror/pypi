<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>serialized-redis================Redis python interface that serializes all values using json, pickle, msgpack or a custom serializer... image:: https://secure.travis-ci.org/michael-mri/serialized-redis.svg?branch=master        :target: http://travis-ci.org/michael-mri/serialized-redis.. image:: https://codecov.io/gh/michael-mri/serialized-redis/branch/master/graph/badge.svg  :target: https://codecov.io/gh/michael-mri/serialized-redisGetting Started---------------Installation~~~~~~~~~~~~::    pip install serialized-redis-interfaceUsage~~~~~.. code-block:: pycon    &gt;&gt;&gt; import serialized_redis    &gt;&gt;&gt; r = serialized_redis.JSONSerializedRedis(host='localhost', port=6379, db=0)    &gt;&gt;&gt; r.set('foo', { 'test': 'dict' })    True    &gt;&gt;&gt; r.get('foo')    {'test': 'dict'}    &gt;&gt;&gt; r = serialized_redis.PickleSerializedRedis(host='localhost', port=6379, db=0)    &gt;&gt;&gt; r.set('foo', { 'test': 'dict' })    True    &gt;&gt;&gt; r.get('foo')    {'test': 'dict'}    &gt;&gt;&gt; r = serialized_redis.MsgpackSerializedRedis(host='localhost', port=6379, db=0)    &gt;&gt;&gt; r.set('foo', { 'test': 'dict' })    True    &gt;&gt;&gt; r.get('foo')    {'test': 'dict'}``serialized-redis`` extends `redis-py &lt;https://github.com/andymccurdy/redis-py&gt;`_ and uses the same interface.Most commands, Piplines and PubSub are supported and take care of serializing and deserializing values.``msgpack`` must be installed in order to use ``MsgpackSerializedRedis``.All strings are python str.Limitations-----------As values are serialized, Redis operations that manipulate or extract data from values are not supported.* SORT commands may not return correct order depending on the serializer used.* ZSCAN and SSCAN MATCH option will only work for exact match.* STRLENGTH and HSTRLENGTH will return the length of the serialized value.* all lexicographical commands like ZLEXCOUNT, ZREMRANGEBYLEX and ZREVRANGEBYLEX are not supported* INCR is only supported with JSON serializer* fields of Redis hashes are not serializedExtra Methods-------------* ``smembers_as_list``, ``sdiff_as_list``, ``sinter_as_list``, ``sunion_as_list`` can be used when members of the redis  set may not be hashable once deserialized.  .. code-block:: pycon    &gt;&gt;&gt; r = serialized_redis.JSONSerializedRedis()     &gt;&gt;&gt; r.sadd('myset', {'dict': 1})    1    &gt;&gt;&gt; r.smembers('myset')    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;      File &quot;/home/michael/workspace/Origin_Nexus/serialized_redis/serialized_redis/__init__.py&quot;, line 176, in smembers        return set(super().smembers(*args, **kwargs))    TypeError: unhashable type: 'dict'    &gt;&gt;&gt; r.smembers_as_list('myset')    [{'dict': 1}]* ``smart_get`` and ``smart_set`` can be used to retrieve and store python structure with their redis counterpart:  * python ``list`` as redis LIST  * python ``set`` as redis SET  * python ``dict`` as redis HASH, fields will not be (de)serialized.Custom Serializer-----------------You can use your own seriliazing and deserializing functions:.. code-block:: pycon    &gt;&gt;&gt; r = serialized_redis.SerializedRedis(serialization_fn=my_serializer, deserialization_fn=my_deserializer)If your deserializer function expects python 3 strings instead of bytes, you can add ``decode_responses=True`` parameter.Decoding bytes to str when required is the responsability of the deserialization function.</longdescription>
</pkgmetadata>