<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/inflect.svg   :target: https://pypi.org/project/inflect.. image:: https://img.shields.io/pypi/pyversions/inflect.svg.. image:: https://github.com/jaraco/inflect/workflows/tests/badge.svg   :target: https://github.com/jaraco/inflect/actions?query=workflow%3A%22tests%22   :alt: tests.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json    :target: https://github.com/astral-sh/ruff    :alt: Ruff.. image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black   :alt: Code style: Black.. image:: https://readthedocs.org/projects/inflect/badge/?version=latest   :target: https://inflect.readthedocs.io/en/latest/?badge=latest.. image:: https://img.shields.io/badge/skeleton-2023-informational   :target: https://blog.jaraco.com/skeleton.. image:: https://tidelift.com/badges/package/pypi/inflect   :target: https://tidelift.com/subscription/pkg/pypi-inflect?utm_source=pypi-inflect&amp;utm_medium=readmeNAME====inflect.py - Correctly generate plurals, singular nouns, ordinals, indefinite articles; convert numbers to words.SYNOPSIS========.. code-block:: python    import inflect    p = inflect.engine()    # METHODS:    # plural plural_noun plural_verb plural_adj singular_noun no num    # compare compare_nouns compare_nouns compare_adjs    # a an    # present_participle    # ordinal number_to_words    # join    # inflect classical gender    # defnoun defverb defadj defa defan    # UNCONDITIONALLY FORM THE PLURAL    print(&quot;The plural of &quot;, word, &quot; is &quot;, p.plural(word))    # CONDITIONALLY FORM THE PLURAL    print(&quot;I saw&quot;, cat_count, p.plural(&quot;cat&quot;, cat_count))    # FORM PLURALS FOR SPECIFIC PARTS OF SPEECH    print(        p.plural_noun(&quot;I&quot;, N1),        p.plural_verb(&quot;saw&quot;, N1),        p.plural_adj(&quot;my&quot;, N2),        p.plural_noun(&quot;saw&quot;, N2),    )    # FORM THE SINGULAR OF PLURAL NOUNS    print(&quot;The singular of &quot;, word, &quot; is &quot;, p.singular_noun(word))    # SELECT THE GENDER OF SINGULAR PRONOUNS    print(p.singular_noun(&quot;they&quot;))  # 'it'    p.gender(&quot;feminine&quot;)    print(p.singular_noun(&quot;they&quot;))  # 'she'    # DEAL WITH &quot;0/1/N&quot; -&gt; &quot;no/1/N&quot; TRANSLATION:    print(&quot;There &quot;, p.plural_verb(&quot;was&quot;, errors), p.no(&quot; error&quot;, errors))    # USE DEFAULT COUNTS:    print(        p.num(N1, &quot;&quot;),        p.plural(&quot;I&quot;),        p.plural_verb(&quot; saw&quot;),        p.num(N2),        p.plural_noun(&quot; saw&quot;),    )    print(&quot;There &quot;, p.num(errors, &quot;&quot;), p.plural_verb(&quot;was&quot;), p.no(&quot; error&quot;))    # COMPARE TWO WORDS &quot;NUMBER-INSENSITIVELY&quot;:    if p.compare(word1, word2):        print(&quot;same&quot;)    if p.compare_nouns(word1, word2):        print(&quot;same noun&quot;)    if p.compare_verbs(word1, word2):        print(&quot;same verb&quot;)    if p.compare_adjs(word1, word2):        print(&quot;same adj.&quot;)    # ADD CORRECT &quot;a&quot; OR &quot;an&quot; FOR A GIVEN WORD:    print(&quot;Did you want &quot;, p.a(thing), &quot; or &quot;, p.an(idea))    # CONVERT NUMERALS INTO ORDINALS (i.e. 1-&gt;1st, 2-&gt;2nd, 3-&gt;3rd, etc.)    print(&quot;It was&quot;, p.ordinal(position), &quot; from the left\n&quot;)    # CONVERT NUMERALS TO WORDS (i.e. 1-&gt;&quot;one&quot;, 101-&gt;&quot;one hundred and one&quot;, etc.)    # RETURNS A SINGLE STRING...    words = p.number_to_words(1234)    # &quot;one thousand, two hundred and thirty-four&quot;    words = p.number_to_words(p.ordinal(1234))    # &quot;one thousand, two hundred and thirty-fourth&quot;    # GET BACK A LIST OF STRINGS, ONE FOR EACH &quot;CHUNK&quot;...    words = p.number_to_words(1234, wantlist=True)    # (&quot;one thousand&quot;,&quot;two hundred and thirty-four&quot;)    # OPTIONAL PARAMETERS CHANGE TRANSLATION:    words = p.number_to_words(12345, group=1)    # &quot;one, two, three, four, five&quot;    words = p.number_to_words(12345, group=2)    # &quot;twelve, thirty-four, five&quot;    words = p.number_to_words(12345, group=3)    # &quot;one twenty-three, forty-five&quot;    words = p.number_to_words(1234, andword=&quot;&quot;)    # &quot;one thousand, two hundred thirty-four&quot;    words = p.number_to_words(1234, andword=&quot;, plus&quot;)    # &quot;one thousand, two hundred, plus thirty-four&quot;    # TODO: I get no comma before plus: check perl    words = p.number_to_words(555_1202, group=1, zero=&quot;oh&quot;)    # &quot;five, five, five, one, two, oh, two&quot;    words = p.number_to_words(555_1202, group=1, one=&quot;unity&quot;)    # &quot;five, five, five, unity, two, oh, two&quot;    words = p.number_to_words(123.456, group=1, decimal=&quot;mark&quot;)    # &quot;one two three mark four five six&quot;    # TODO: DOCBUG: perl gives commas here as do I    # LITERAL STYLE ONLY NAMES NUMBERS LESS THAN A CERTAIN THRESHOLD...    words = p.number_to_words(9, threshold=10)  # &quot;nine&quot;    words = p.number_to_words(10, threshold=10)  # &quot;ten&quot;    words = p.number_to_words(11, threshold=10)  # &quot;11&quot;    words = p.number_to_words(1000, threshold=10)  # &quot;1,000&quot;    # JOIN WORDS INTO A LIST:    mylist = p.join((&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;))    # &quot;apple, banana, and carrot&quot;    mylist = p.join((&quot;apple&quot;, &quot;banana&quot;))    # &quot;apple and banana&quot;    mylist = p.join((&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;), final_sep=&quot;&quot;)    # &quot;apple, banana and carrot&quot;    # REQUIRE &quot;CLASSICAL&quot; PLURALS (EG: &quot;focus&quot;-&gt;&quot;foci&quot;, &quot;cherub&quot;-&gt;&quot;cherubim&quot;)    p.classical()  # USE ALL CLASSICAL PLURALS    p.classical(all=True)  # USE ALL CLASSICAL PLURALS    p.classical(all=False)  # SWITCH OFF CLASSICAL MODE    p.classical(zero=True)  #  &quot;no error&quot; INSTEAD OF &quot;no errors&quot;    p.classical(zero=False)  #  &quot;no errors&quot; INSTEAD OF &quot;no error&quot;    p.classical(herd=True)  #  &quot;2 buffalo&quot; INSTEAD OF &quot;2 buffalos&quot;    p.classical(herd=False)  #  &quot;2 buffalos&quot; INSTEAD OF &quot;2 buffalo&quot;    p.classical(persons=True)  # &quot;2 chairpersons&quot; INSTEAD OF &quot;2 chairpeople&quot;    p.classical(persons=False)  # &quot;2 chairpeople&quot; INSTEAD OF &quot;2 chairpersons&quot;    p.classical(ancient=True)  # &quot;2 formulae&quot; INSTEAD OF &quot;2 formulas&quot;    p.classical(ancient=False)  # &quot;2 formulas&quot; INSTEAD OF &quot;2 formulae&quot;    # INTERPOLATE &quot;plural()&quot;, &quot;plural_noun()&quot;, &quot;plural_verb()&quot;, &quot;plural_adj()&quot;, &quot;singular_noun()&quot;,    # a()&quot;, &quot;an()&quot;, &quot;num()&quot; AND &quot;ordinal()&quot; WITHIN STRINGS:    print(p.inflect(&quot;The plural of {0} is plural('{0}')&quot;.format(word)))    print(p.inflect(&quot;The singular of {0} is singular_noun('{0}')&quot;.format(word)))    print(p.inflect(&quot;I saw {0} plural('cat',{0})&quot;.format(cat_count)))    print(        p.inflect(            &quot;plural('I',{0}) &quot;            &quot;plural_verb('saw',{0}) &quot;            &quot;plural('a',{1}) &quot;            &quot;plural_noun('saw',{1})&quot;.format(N1, N2)        )    )    print(        p.inflect(            &quot;num({0}, False)plural('I') &quot;            &quot;plural_verb('saw') &quot;            &quot;num({1}, False)plural('a') &quot;            &quot;plural_noun('saw')&quot;.format(N1, N2)        )    )    print(p.inflect(&quot;I saw num({0}) plural('cat')\nnum()&quot;.format(cat_count)))    print(p.inflect(&quot;There plural_verb('was',{0}) no('error',{0})&quot;.format(errors)))    print(p.inflect(&quot;There num({0}, False)plural_verb('was') no('error')&quot;.format(errors)))    print(p.inflect(&quot;Did you want a('{0}') or an('{1}')&quot;.format(thing, idea)))    print(p.inflect(&quot;It was ordinal('{0}') from the left&quot;.format(position)))    # ADD USER-DEFINED INFLECTIONS (OVERRIDING INBUILT RULES):    p.defnoun(&quot;VAX&quot;, &quot;VAXen&quot;)  # SINGULAR =&gt; PLURAL    p.defverb(        &quot;will&quot;,  # 1ST PERSON SINGULAR        &quot;shall&quot;,  # 1ST PERSON PLURAL        &quot;will&quot;,  # 2ND PERSON SINGULAR        &quot;will&quot;,  # 2ND PERSON PLURAL        &quot;will&quot;,  # 3RD PERSON SINGULAR        &quot;will&quot;,  # 3RD PERSON PLURAL    )    p.defadj(&quot;hir&quot;, &quot;their&quot;)  # SINGULAR =&gt; PLURAL    p.defa(&quot;h&quot;)  # &quot;AY HALWAYS SEZ 'HAITCH'!&quot;    p.defan(&quot;horrendous.*&quot;)  # &quot;AN HORRENDOUS AFFECTATION&quot;DESCRIPTION===========The methods of the class ``engine`` in module ``inflect.py`` provide pluralinflections, singular noun inflections, &quot;a&quot;/&quot;an&quot; selection for English words,and manipulation of numbers as words.Plural forms of all nouns, most verbs, and some adjectives areprovided. Where appropriate, &quot;classical&quot; variants (for example: &quot;brother&quot; -&gt;&quot;brethren&quot;, &quot;dogma&quot; -&gt; &quot;dogmata&quot;, etc.) are also provided.Single forms of nouns are also provided. The gender of singular pronounscan be chosen (for example &quot;they&quot; -&gt; &quot;it&quot; or &quot;she&quot; or &quot;he&quot; or &quot;they&quot;).Pronunciation-based &quot;a&quot;/&quot;an&quot; selection is provided for all Englishwords, and most initialisms.It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd)and to English words (&quot;one&quot;, &quot;two&quot;, &quot;three&quot;).In generating these inflections, ``inflect.py`` follows the OxfordEnglish Dictionary and the guidelines in Fowler's Modern EnglishUsage, preferring the former where the two disagree.The module is built around standard British spelling, but is designedto cope with common American variants as well. Slang, jargon, andother English dialects are *not* explicitly catered for.Where two or more inflected forms exist for a single word (typically a&quot;classical&quot; form and a &quot;modern&quot; form), ``inflect.py`` prefers themore common form (typically the &quot;modern&quot; one), unless &quot;classical&quot;processing has been specified(see `MODERN VS CLASSICAL INFLECTIONS`).FORMING PLURALS AND SINGULARS=============================Inflecting Plurals and Singulars--------------------------------All of the ``plural...`` plural inflection methods take the word to beinflected as their first argument and return the corresponding inflection.Note that all such methods expect the *singular* form of the word. Theresults of passing a plural form are undefined (and unlikely to be correct).Similarly, the ``si...`` singular inflection method expects the *plural*form of the word.The ``plural...`` methods also take an optional second argument,which indicates the grammatical &quot;number&quot; of the word (or of another wordwith which the word being inflected must agree). If the &quot;number&quot; argument issupplied and is not ``1`` (or ``&quot;one&quot;`` or ``&quot;a&quot;``, or some other adjective thatimplies the singular), the plural form of the word is returned. If the&quot;number&quot; argument *does* indicate singularity, the (uninflected) worditself is returned. If the number argument is omitted, the plural formis returned unconditionally.The ``si...`` method takes a second argument in a similar fashion. If it issome form of the number ``1``, or is omitted, the singular form is returned.Otherwise the plural is returned unaltered.The various methods of ``inflect.engine`` are:``plural_noun(word, count=None)`` The method ``plural_noun()`` takes a *singular* English noun or pronoun and returns its plural. Pronouns in the nominative (&quot;I&quot; -&gt; &quot;we&quot;) and accusative (&quot;me&quot; -&gt; &quot;us&quot;) cases are handled, as are possessive pronouns (&quot;mine&quot; -&gt; &quot;ours&quot;).``plural_verb(word, count=None)`` The method ``plural_verb()`` takes the *singular* form of a conjugated verb (that is, one which is already in the correct &quot;person&quot; and &quot;mood&quot;) and returns the corresponding plural conjugation.``plural_adj(word, count=None)`` The method ``plural_adj()`` takes the *singular* form of certain types of adjectives and returns the corresponding plural form. Adjectives that are correctly handled include: &quot;numerical&quot; adjectives (&quot;a&quot; -&gt; &quot;some&quot;), demonstrative adjectives (&quot;this&quot; -&gt; &quot;these&quot;, &quot;that&quot; -&gt; &quot;those&quot;), and possessives (&quot;my&quot; -&gt; &quot;our&quot;, &quot;cat's&quot; -&gt; &quot;cats'&quot;, &quot;child's&quot; -&gt; &quot;childrens'&quot;, etc.)``plural(word, count=None)`` The method ``plural()`` takes a *singular* English noun, pronoun, verb, or adjective and returns its plural form. Where a word has more than one inflection depending on its part of speech (for example, the noun &quot;thought&quot; inflects to &quot;thoughts&quot;, the verb &quot;thought&quot; to &quot;thought&quot;), the (singular) noun sense is preferred to the (singular) verb sense. Hence ``plural(&quot;knife&quot;)`` will return &quot;knives&quot; (&quot;knife&quot; having been treated as a singular noun), whereas ``plural(&quot;knifes&quot;)`` will return &quot;knife&quot; (&quot;knifes&quot; having been treated as a 3rd person singular verb). The inherent ambiguity of such cases suggests that, where the part of speech is known, ``plural_noun``, ``plural_verb``, and ``plural_adj`` should be used in preference to ``plural``.``singular_noun(word, count=None)`` The method ``singular_noun()`` takes a *plural* English noun or pronoun and returns its singular. Pronouns in the nominative (&quot;we&quot; -&gt; &quot;I&quot;) and accusative (&quot;us&quot; -&gt; &quot;me&quot;) cases are handled, as are possessive pronouns (&quot;ours&quot; -&gt; &quot;mine&quot;). When third person singular pronouns are returned they take the neuter gender by default (&quot;they&quot; -&gt; &quot;it&quot;), not (&quot;they&quot;-&gt; &quot;she&quot;) nor (&quot;they&quot; -&gt; &quot;he&quot;). This can be changed with ``gender()``.Note that all these methods ignore any whitespace surrounding theword being inflected, but preserve that whitespace when the result isreturned. For example, ``plural(&quot; cat  &quot;)`` returns &quot; cats  &quot;.``gender(genderletter)`` The third person plural pronoun takes the same form for the female, male and neuter (e.g. &quot;they&quot;). The singular however, depends upon gender (e.g. &quot;she&quot;, &quot;he&quot;, &quot;it&quot; and &quot;they&quot; -- &quot;they&quot; being the gender neutral form.) By default ``singular_noun`` returns the neuter form, however, the gender can be selected with the ``gender`` method. Pass the first letter of the gender to ``gender`` to return the f(eminine), m(asculine), n(euter) or t(hey) form of the singular. e.g. gender('f') followed by singular_noun('themselves') returns 'herself'.Numbered plurals----------------The ``plural...`` methods return only the inflected word, not the count thatwas used to inflect it. Thus, in order to produce &quot;I saw 3 ducks&quot;, itis necessary to use:.. code-block:: python    print(&quot;I saw&quot;, N, p.plural_noun(animal, N))Since the usual purpose of producing a plural is to make it agree witha preceding count, inflect.py provides a method(``no(word, count)``) which, given a word and a(n optional) count, returns thecount followed by the correctly inflected word. Hence the previousexample can be rewritten:.. code-block:: python    print(&quot;I saw &quot;, p.no(animal, N))In addition, if the count is zero (or some other term which implieszero, such as ``&quot;zero&quot;``, ``&quot;nil&quot;``, etc.) the count is replaced by theword &quot;no&quot;. Hence, if ``N`` had the value zero, the previous examplewould print (the somewhat more elegant)::    I saw no animalsrather than::    I saw 0 animalsNote that the name of the method is a pun: the methodreturns either a number (a *No.*) or a ``&quot;no&quot;``, in front of theinflected word.Reducing the number of counts required--------------------------------------In some contexts, the need to supply an explicit count to the various``plural...`` methods makes for tiresome repetition. For example:.. code-block:: python    print(        plural_adj(&quot;This&quot;, errors),        plural_noun(&quot; error&quot;, errors),        plural_verb(&quot; was&quot;, errors),        &quot; fatal.&quot;,    )inflect.py therefore provides a method(``num(count=None, show=None)``) which may be used to set a persistent &quot;default number&quot;value. If such a value is set, it is subsequently used whenever anoptional second &quot;number&quot; argument is omitted. The default value thus setcan subsequently be removed by calling ``num()`` with no arguments.Hence we could rewrite the previous example:.. code-block:: python    p.num(errors)    print(p.plural_adj(&quot;This&quot;), p.plural_noun(&quot; error&quot;), p.plural_verb(&quot; was&quot;), &quot;fatal.&quot;)    p.num()Normally, ``num()`` returns its first argument, so that it may alsobe &quot;inlined&quot; in contexts like:.. code-block:: python    print(p.num(errors), p.plural_noun(&quot; error&quot;), p.plural_verb(&quot; was&quot;), &quot; detected.&quot;)    if severity &gt; 1:        print(            p.plural_adj(&quot;This&quot;), p.plural_noun(&quot; error&quot;), p.plural_verb(&quot; was&quot;), &quot;fatal.&quot;        )However, in certain contexts (see `INTERPOLATING INFLECTIONS IN STRINGS`)it is preferable that ``num()`` return an empty string. Hence ``num()``provides an optional second argument. If that argument is supplied (that is, ifit is defined) and evaluates to false, ``num`` returns an empty stringinstead of its first argument. For example:.. code-block:: python    print(p.num(errors, 0), p.no(&quot;error&quot;), p.plural_verb(&quot; was&quot;), &quot; detected.&quot;)    if severity &gt; 1:        print(            p.plural_adj(&quot;This&quot;), p.plural_noun(&quot; error&quot;), p.plural_verb(&quot; was&quot;), &quot;fatal.&quot;        )Number-insensitive equality---------------------------inflect.py also provides a solution to the problemof comparing words of differing plurality through the methods``compare(word1, word2)``, ``compare_nouns(word1, word2)``,``compare_verbs(word1, word2)``, and ``compare_adjs(word1, word2)``.Each  of these methods takes two strings, and  compares themusing the corresponding plural-inflection method (``plural()``, ``plural_noun()``,``plural_verb()``, and ``plural_adj()`` respectively).The comparison returns true if:- the strings are equal, or- one string is equal to a plural form of the other, or- the strings are two different plural forms of the one word.Hence all of the following return true:.. code-block:: python    p.compare(&quot;index&quot;, &quot;index&quot;)  # RETURNS &quot;eq&quot;    p.compare(&quot;index&quot;, &quot;indexes&quot;)  # RETURNS &quot;s:p&quot;    p.compare(&quot;index&quot;, &quot;indices&quot;)  # RETURNS &quot;s:p&quot;    p.compare(&quot;indexes&quot;, &quot;index&quot;)  # RETURNS &quot;p:s&quot;    p.compare(&quot;indices&quot;, &quot;index&quot;)  # RETURNS &quot;p:s&quot;    p.compare(&quot;indices&quot;, &quot;indexes&quot;)  # RETURNS &quot;p:p&quot;    p.compare(&quot;indexes&quot;, &quot;indices&quot;)  # RETURNS &quot;p:p&quot;    p.compare(&quot;indices&quot;, &quot;indices&quot;)  # RETURNS &quot;eq&quot;As indicated by the comments in the previous example, the actual valuereturned by the various ``compare`` methods encodes which of thethree equality rules succeeded: &quot;eq&quot; is returned if the strings wereidentical, &quot;s:p&quot; if the strings were singular and plural respectively,&quot;p:s&quot; for plural and singular, and &quot;p:p&quot; for two distinct plurals.Inequality is indicated by returning an empty string.It should be noted that two distinct singular words which happen to takethe same plural form are *not* considered equal, nor are cases whereone (singular) word's plural is the other (plural) word's singular.Hence all of the following return false:.. code-block:: python    p.compare(&quot;base&quot;, &quot;basis&quot;)  # ALTHOUGH BOTH -&gt; &quot;bases&quot;    p.compare(&quot;syrinx&quot;, &quot;syringe&quot;)  # ALTHOUGH BOTH -&gt; &quot;syringes&quot;    p.compare(&quot;she&quot;, &quot;he&quot;)  # ALTHOUGH BOTH -&gt; &quot;they&quot;    p.compare(&quot;opus&quot;, &quot;operas&quot;)  # ALTHOUGH &quot;opus&quot; -&gt; &quot;opera&quot; -&gt; &quot;operas&quot;    p.compare(&quot;taxi&quot;, &quot;taxes&quot;)  # ALTHOUGH &quot;taxi&quot; -&gt; &quot;taxis&quot; -&gt; &quot;taxes&quot;Note too that, although the comparison is &quot;number-insensitive&quot; it is *not*case-insensitive (that is, ``plural(&quot;time&quot;,&quot;Times&quot;)`` returns false. To obtainboth number and case insensitivity, use the ``lower()`` method on both strings(that is, ``plural(&quot;time&quot;.lower(), &quot;Times&quot;.lower())`` returns true).Related Functionality=====================Shout out to these libraries that provide related functionality:* `WordSet &lt;https://jaracotext.readthedocs.io/en/latest/#jaraco.text.WordSet&gt;`_  parses identifiers like variable names into sets of words suitable for re-assembling  in another form.* `word2number &lt;https://pypi.org/project/word2number/&gt;`_ converts words to  a number.For Enterprise==============Available as part of the Tidelift Subscription.This project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.`Learn more &lt;https://tidelift.com/subscription/pkg/pypi-PROJECT?utm_source=pypi-PROJECT&amp;utm_medium=referral&amp;utm_campaign=github&gt;`_.Security Contact================To report a security vulnerability, please use the`Tidelift security contact &lt;https://tidelift.com/security&gt;`_.Tidelift will coordinate the fix and disclosure.</longdescription>
</pkgmetadata>