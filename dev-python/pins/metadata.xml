<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pins-pythonThe pins package publishes data, models, and other Python objects, making iteasy to share them across projects and with your colleagues. You can pinobjects to a variety of pin *boards*, including folders (to share on anetworked drive or with services like DropBox), Posit Connect, AmazonS3, and Google Cloud Storage.Pins can be automatically versioned, making it straightforward to track changes,re-run analyses on historical data, and undo mistakes.See the [documentation](https://rstudio.github.io/pins-python) for getting started.## Installation```shellpython -m pip install pins```## UsageSee the [documentation](https://rstudio.github.io/pins-python) for getting started.To use the pins package, you must first create a pin board. A good placeto start is `board_folder()`, which stores pins in a directory youspecify. Here I’ll use a special version of `board_folder()` called`board_temp()` which creates a temporary board that’s automaticallydeleted when your Python script or notebook session ends. This is great for examples, butobviously you shouldn't use it for real work!```pythonimport pinsfrom pins.data import mtcarsboard = pins.board_temp()```You can &quot;pin&quot; (save) data to a board with the `.pin_write()` method. It requires threearguments: an object, a name, and a pin type:```pythonboard.pin_write(mtcars.head(), &quot;mtcars&quot;, type=&quot;csv&quot;)```    Writing pin:    Name: 'mtcars'    Version: 20230410T151442Z-120a5    Meta(title='mtcars: a pinned 5 x 11 DataFrame', description=None, created='20230410T151442Z', pin_hash='120a54f7e0818041', file='mtcars.csv', file_size=249, type='csv', api_version=1, version=Version(created=datetime.datetime(2023, 4, 10, 15, 14, 42, 55001), hash='120a54f7e0818041'), tags=None, name='mtcars', user={}, local={})Above, we saved the data as a CSV, but depending onwhat you’re saving and who else you want to read it, you might use the`type` argument to instead save it as a `joblib`, `parquet`, or `json` file.You can later retrieve the pinned data with `.pin_read()`:```pythonboard.pin_read(&quot;mtcars&quot;)```        mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb    0  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4    1  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4    2  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1    3  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1    4  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2A board on your computer is good place to start, but the real power ofpins comes when you use a board that’s shared with multiple people. Toget started, you can use `board_folder()` with a directory on a shareddrive or in DropBox, or if you use [PositConnect](https://posit.co/products/enterprise/connect/) you can use`board_connect()`:```python# Note that this uses one approach to connecting,# the environment variables CONNECT_SERVER and CONNECT_API_KEYboard = pins.board_connect()board.pin_write(tidy_sales_data, &quot;hadley/sales-summary&quot;, type=&quot;csv&quot;)```Then, someone else (or an automated report) can read and use yourpin:```pythonboard = board_connect()board.pin_read(&quot;hadley/sales-summary&quot;)```You can easily control who gets to access the data using the PositConnect permissions pane.The pins package also includes boards that allow you to share data onservices like Amazon’s S3 (`board_s3()`), Google Cloud Storage (`board_gcs()`),and Azure blob storage (`board_azure()`).## DevelopmentSee [CONTRIBUTING.md](CONTRIBUTING.md)</longdescription>
</pkgmetadata>