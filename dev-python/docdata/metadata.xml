<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;docs/source/logo.png&quot; height=&quot;150&quot;&gt;&lt;/p&gt;--&gt;&lt;h1 align=&quot;center&quot;&gt;  Docdata&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/cthoyt/docdata/actions?query=workflow%3ATests&quot;&gt;        &lt;img alt=&quot;Tests&quot; src=&quot;https://github.com/cthoyt/docdata/workflows/Tests/badge.svg&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/cthoyt/cookiecutter-python-package&quot;&gt;        &lt;img alt=&quot;Cookiecutter template from @cthoyt&quot; src=&quot;https://img.shields.io/badge/Cookiecutter-python--package-yellow&quot; /&gt;     &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/docdata&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/docdata&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/docdata&quot;&gt;        &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/docdata&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/cthoyt/docdata/blob/main/LICENSE&quot;&gt;        &lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/docdata&quot; /&gt;    &lt;/a&gt;    &lt;a href='https://docdata.readthedocs.io/en/latest/?badge=latest'&gt;        &lt;img src='https://readthedocs.org/projects/docdata/badge/?version=latest' alt='Documentation Status' /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://zenodo.org/badge/latestdoi/340714491&quot;&gt;        &lt;img src=&quot;https://zenodo.org/badge/340714491.svg&quot; alt=&quot;DOI&quot;&gt;    &lt;/a&gt;&lt;/p&gt;Add structured information to the end of your python docstrings.## üí™ Getting StartedUse this package to add structured data to your docstrings in YAML. Just add a `---` delimiter at the bottom, and therest is parsed as YAML.```pythonfrom docdata import parse_docdata, get_docdata@parse_docdataclass MyClass:    &quot;&quot;&quot;This is my class.    ---    author: Charlie    motto:    - docs    - are    - cool    &quot;&quot;&quot;assert get_docdata(MyClass) == {    'author': 'Charlie',    'motto': ['docs', 'are', 'cool'],}```If you want to get the data directly, go for `MyClass.__docdata__`. If you want to change the way docdata is parsed,like changing the delimiter, use keyword arguments like in:```pythonfrom docdata import parse_docdata, get_docdata@parse_docdata(delimiter='****')class MyClass:    &quot;&quot;&quot;This is my class.    ****    author: Charlie    motto:    - docs    - are    - cool    &quot;&quot;&quot;assert get_docdata(MyClass) == {    'author': 'Charlie',    'motto': ['docs', 'are', 'cool'],}```## ‚¨áÔ∏è InstallationThe most recent release can be installed from[PyPI](https://pypi.org/project/docdata/) with:```bash$ pip install docdata```The most recent code and data can be installed directly from GitHub with:```bash$ pip install git+https://github.com/cthoyt/docdata.git```To install in development mode, use the following:```bash$ git clone git+https://github.com/cthoyt/docdata.git$ cd docdata$ pip install -e .```## ‚öñÔ∏è LicenseThe code in this package is licensed under the MIT License.## üôè ContributingContributions, whether filing an issue, making a pull request, or forking, are appreciated. See[CONTRIBUTING.rst](https://github.com/cthoyt/docdata/blob/master/CONTRIBUTING.rst) for more information on gettinginvolved.## üç™ Cookiecutter AcknowledgementThis package was created with [@audreyr](https://github.com/audreyr)'s[cookiecutter](https://github.com/cookiecutter/cookiecutter) package using [@cthoyt](https://github.com/cthoyt)'s[cookiecutter-python-package](https://github.com/cthoyt/cookiecutter-python-package) template.## üõ†Ô∏è DevelopmentThe final section of the README is for if you want to get involved by making a code contribution.### ‚ùì TestingAfter cloning the repository and installing `tox` with `pip install tox`, the unit tests in the `tests/` folder can berun reproducibly with:```shell$ tox```Additionally, these tests are automatically re-run with each commit ina [GitHub Action](https://github.com/cthoyt/docdata/actions?query=workflow%3ATests).</longdescription>
</pkgmetadata>