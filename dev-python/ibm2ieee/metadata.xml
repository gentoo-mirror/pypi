<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>The **ibm2ieee** package provides NumPy universal functions (&quot;ufuncs&quot;) forconverting IBM single-precision and double-precision hexadecimal floatsto the IEEE 754-format floats used by Python and NumPy on almost allcurrent platforms.Features--------- Fast: 200-400 million values converted per second on a typical modern  machine, assuming normal inputs.- Correct: converted results are correctly rounded, according to the default  IEEE 754 round-ties-to-even rounding mode. Corner cases (overflow, underflow,  subnormal results, signed zeros, non-normalised input) are all handled  correctly. Where the rounded converted value is out of range for the target  type, an appropriately-signed infinity is returned.- Handles both single-precision and double-precision input and output formats.Portability note: the conversion functions provided in this module assume that``numpy.float32`` and ``numpy.float64`` are based on the standard IEEE 754binary32 and binary64 floating-point formats. This is true on the overwhelmingmajority of current platforms, but is not guaranteed by the relevant languagestandards.Usage-----The package provides two functions:- ``ibm2float32`` converts IBM single- or double-precision data to  IEEE 754 single-precision values, in ``numpy.float32`` format.- ``ibm2float64`` converts IBM single- or double-precision data to  IEEE 754 double-precision values, in ``numpy.float64`` format.For both functions, IBM single-precision input data must be representedusing the ``numpy.uint32`` dtype, while IBM double-precision inputs mustbe represented using ``numpy.uint64``.Both functions assume that the IBM data have been converted to NumPy integerformat in such a way that the most significant bits of the floating-pointnumber become the most significant bits of the integer values. So when decodingbyte data representing IBM hexadecimal floating-point numbers, it's importantto take the endianness of the byte data into account. See the Examples sectionbelow for an example of converting big-endian byte data.Examples--------&gt;&gt;&gt; import numpy&gt;&gt;&gt; from ibm2ieee import ibm2float32, ibm2float64&gt;&gt;&gt; ibm2float32(numpy.uint32(0xc1180000))-1.5&gt;&gt;&gt; type(ibm2float32(numpy.uint32(0xc1180000)))&lt;class 'numpy.float32'&gt;&gt;&gt;&gt; ibm2float32(numpy.uint64(0x413243f6a8885a31))3.1415927&gt;&gt;&gt; ibm2float32(numpy.uint32(0x61100000))inf&gt;&gt;&gt; ibm2float64(numpy.uint32(0xc1180000))-1.5&gt;&gt;&gt; ibm2float64(numpy.uint64(0x413243f6a8885a31))3.141592653589793&gt;&gt;&gt; ibm2float64(numpy.uint32(0x61100000))3.402823669209385e+38&gt;&gt;&gt; input_array = numpy.arange(        0x40fffffe, 0x41000002, dtype=numpy.uint32).reshape(2, 2)&gt;&gt;&gt; input_arrayarray([[1090519038, 1090519039],       [1090519040, 1090519041]], dtype=uint32)&gt;&gt;&gt; ibm2float64(input_array)array([[9.99999881e-01, 9.99999940e-01],       [0.00000000e+00, 9.53674316e-07]])When converting byte data read from a file, it's important to know theendianness of that data (which is frequently big-endian in historical datafiles using IBM hex floating-point). Here's an example of converting IBMsingle-precision data stored in big-endian form to ``numpy.float32``. Note theuse of the ``'&gt;u4'`` dtype when converting the bytestring to a NumPy ``uint32``array. For little-endian input data, you would use ``'&lt;u4'`` instead.&gt;&gt;&gt; input_data = b'\xc12C\xf7\xc1\x19!\xfb\x00\x00\x00\x00A\x19!\xfbA2C\xf7'&gt;&gt;&gt; input_as_uint32 = numpy.frombuffer(input_data, dtype='&gt;u4')&gt;&gt;&gt; input_as_uint32array([3241296887, 3239649787,          0, 1092166139, 1093813239],      dtype=uint32)&gt;&gt;&gt; ibm2float32(input_as_uint32)array([-3.141593, -1.570796,  0.      ,  1.570796,  3.141593],      dtype=float32)Notes on the formats--------------------The IBM single-precision format has a precision of 6 hexadecimal digits, whichin practice translates to a precision of 21-24 bits, depending on the binadethat the relevant value belongs to. IEEE 754 single-precision has a precisionof 24 bits. So all not-too-small, not-too-large IBM single-precision values canbe translated to IEEE 754 single-precision values with no loss of precision.However, the IBM single precision range is larger than the corresponding IEEE754 range, so extreme IBM single-precision values may overflow to infinity,underflow to zero, or be rounded to a subnormal value when converted to IEEE754 single-precision.For double-precision conversions, the tradeoff works the other way: the IBMdouble-precision format has an effective precision of 53-56 bits, while IEEE754 double-precision has 53-bit precision. So most IBM values will be roundedwhen converted to IEEE 754. However, the IEEE 754 double-precision range islarger than that of IBM double-precision, so there's no danger of overflow,underflow, or reduced-precision subnormal results when converting IBMdouble-precision to IEEE 754 double-precision.Every IBM single-precision value can be exactly represented in IEEE 754double-precision, so if you want a lossless representation of IBMsingle-precision data, use ``ibm2float64``.Note that the IBM formats do not allow representations of special values likeinfinities and NaNs. However, signed zeros are representable, and the sign of azero is preserved under all conversions.Installation------------The latest release of ibm2ieee is available from the Python Package Index, athttps://pypi.org/project/ibm2ieee. It can be installed with ``pip`` in theusual way::    pip install ibm2ieeeWheels are provided for common platforms and Python versions. If installingfrom source, note that ibm2ieee includes a C extension, so you'll need theappropriate compiler on your system to be able to install.ibm2ieee requires Python &gt;= 3.7.License-------(C) Copyright 2018-2023 Enthought, Inc., Austin, TXAll rights reserved.This software is provided without warranty under the terms of the BSDlicense included in LICENSE.txt and may be redistributed only underthe conditions described in the aforementioned license. The licenseis also available online at http://www.enthought.com/licenses/BSD.txtThanks for using Enthought open source!</longdescription>
</pkgmetadata>