<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Retry-requests##############Configures the passed-in `requests' &lt;http://python-requests.org&gt;`_ ``Session``to retry on failed requests due to connection errors, timeouts,specific HTTP response codes (5XX by default) and 30X redirectionsâ€”anything that could fail.Python 3.6+.Basic usage:.. code-block:: python  from retry_requests import retry  my_session = retry()  my_session.get(&quot;http://foo.bar&quot;)This ``get`` will retry three times in case of error waiting some time between retries.Errors could be:- Waiting for the server to start answering for 5 seconds.- No access to the server or a dropped connection.- An HTTP answer of 500, 502, or 504.You can change these defaults:.. code-block:: python  from retry_requests import retry  from requests import Session  my_session = retry(Session(), retries=5, backoff_factor=0.2)  my_session.get('https://foo.bar')Check the function ``retry`` to know more about this configuration.Note that you have a ``TSession``, a ``Session`` with a default timeout,and ``RSession``, a ``Session`` with a timeout that always ``raise_for_status()``,for your convenience.Heavily inspired from `Peterbe.com &lt;https://www.peterbe.com/plog/best-practice-with-retries-with-requests&gt;`_. Thank you!Installing**********Just ``pip install retry-requests``.Testing*******Clone this project and then, at its root directory, run ``python setup.py test``.Note that you need an active Internet connection to run the tests.</longdescription>
</pkgmetadata>