<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AboutThe Python Package Index Project (pypipr)pypi : https://pypi.org/project/pypipr# SetupInstall with pip```python -m pip install pypipr```Import with * for fastest access```pythonfrom pypipr.pypipr import *```# FUNCTION## avg`avg()`Simple Average Function karena tidak disediakan oleh python```pythonn = [1, 22, 2, 3, 13, 2, 123, 12, 31, 2, 2, 12, 2, 1]print(avg(n))```## basename`basename()`Mengembalikan nama file dari path```pythonprint(basename(&quot;/ini/nama/folder/ke/file.py&quot;))```## chunck_array`chunck_array()`## console_run`console_run()`Menjalankan command seperti menjalankan command di Command Terminal## create_folder`create_folder()`Membuat folder.Membuat folder secara recursive dengan permission.```pycreate_folder(&quot;contoh_membuat_folder&quot;)create_folder(&quot;contoh/membuat/folder/recursive&quot;)create_folder(&quot;./contoh_membuat_folder/secara/recursive&quot;)```## datetime_from_string`datetime_from_string()`Parse iso_string menjadi datetime object```pythonprint(datetime_from_string(&quot;2022-12-12 15:40:13&quot;).isoformat())print(datetime_from_string(&quot;2022-12-12 15:40:13&quot;, timezone=&quot;Asia/Jakarta&quot;).isoformat())```## datetime_now`datetime_now()`Memudahkan dalam membuat Datetime untuk suatu timezone tertentu```pythonprint(datetime_now(&quot;Asia/Jakarta&quot;))print(datetime_now(&quot;GMT&quot;))print(datetime_now(&quot;Etc/GMT+7&quot;))```## dict_first`dict_first()`Mengambil nilai (key, value) pertama dari dictionary dalam bentuk tuple```pythond = {    &quot;key1&quot;: &quot;value1&quot;,    &quot;key2&quot;: &quot;value2&quot;,    &quot;key3&quot;: &quot;value3&quot;,}print(dict_first(d))```## dirname`dirname()`Mengembalikan nama folder dari path.Tanpa trailing slash di akhir.```pythonprint(dirname(&quot;/ini/nama/folder/ke/file.py&quot;))```## exit_if_empty`exit_if_empty()`Keluar dari program apabila seluruh variabelsetara dengan empty```pythonvar1 = Nonevar2 = '0'exit_if_empty(var1, var2)```## file_get_contents`file_get_contents()`Membaca seluruh isi file ke memory.Apabila file tidak ada maka akan return None.Apabila file ada tetapi kosong, maka akan return empty string```pyprint(file_get_contents(&quot;ifile_test.txt&quot;))```## file_put_contents`file_put_contents()`Menuliskan content ke file.Apabila file tidak ada maka file akan dibuat.Apabila file sudah memiliki content maka akan di overwrite.```pyfile_put_contents(&quot;ifile_test.txt&quot;, &quot;Contoh menulis content&quot;)```## filter_empty`filter_empty()`## get_class_method`get_class_method()`## get_filemtime`get_filemtime()`Mengambil informasi last modification time file dalam nano seconds```pythonprint(get_filemtime(__file__))```## get_filesize`get_filesize()`Mengambil informasi file size dalam bytes```pythonprint(get_filesize(__file__))```## github_pull`github_pull()`Menjalankan command `git pull````pygithub_pull()```## github_push`github_push()`Menjalankan command status, add, commit dan push```pygithub_push('Commit Message')```## html_get_contents`html_get_contents()`Mengambil content html dari url.RETURN:- String: Apabila hanya url saja yg diberikan- List of etree: Apabila xpath diberikan- False: Apabila terjadi error```pyprint(html_get_contents(&quot;https://arbadzukhron.deta.dev/&quot;))``````python# Using XPATHa = html_get_contents(&quot;https://www.google.com/&quot;, xpath=&quot;//a&quot;)for i in a:    print(i.text)    print(i.attrib.get('href'))# Using REGEXa = html_get_contents(&quot;https://www.google.com/&quot;, regex=r&quot;(&lt;a.[^&gt;]+&gt;(?:(?:\s+)?(.[^&lt;]+)(?:\s+)?)&lt;\/a&gt;)&quot;)for i in a:    print(i)# Using cssselecta = html_get_contents(&quot;https://www.google.com/&quot;, css_select=&quot;a&quot;)for i in a:    print(i.text)    print(i.attrib.get(&quot;href&quot;))```## html_put_contents`html_put_contents()`Fungsi untuk mengirim data ke URL dengan method POST dan mengembalikanrespon dari server sebagai string.Parameters:    url (str): URL tujuan.    data (dict): Data yang akan dikirim.Returns:- str: Respon dari server dalam bentuk string.```pythondata = dict(pengirim=&quot;saya&quot;, penerima=&quot;kamu&quot;)print(html_put_contents(&quot;https://arbadzukhron.deta.dev/&quot;, data))```## implode`implode()`    Simplify Python join functions like PHP function.    Iterable bisa berupa sets, tuple, list, dictionary.    ```python    arr = {'asd','dfs','weq','qweqw'}    print(implode(arr, ', '))    arr = '/ini/path/seperti/url/'.split('/')    print(implode(arr, ','))    print(implode(arr, ',', remove_empty=True))    arr = {'a':'satu', 'b':(12, 34, 56), 'c':'tiga', 'd':'empat'}    print(implode(arr, separator='&lt;/li&gt;&lt;li&gt;', start='&lt;li&gt;', end='&lt;/li&gt;', recursive_flat=True))    print(implode(arr, separator='&lt;/div&gt;&lt;div&gt;', start='&lt;div&gt;', end='&lt;/div&gt;'))    print(implode(10, ' '))    ```## input_char`input_char()`Meminta masukan satu huruf tanpa menekan Enter.```pyinput_char(&quot;Input char : &quot;)input_char(&quot;Input char : &quot;, default='Y')input_char(&quot;Input Char without print : &quot;, echo_char=False)```## irange`irange()`Improve python range() function untuk pengulangan menggunakan huruf```pythonprint(generator.irange('a', 'z'))print(irange('H', 'a'))print(irange('1', '5', 3))print(irange('1', 5, 3))# print(irange('a', 5, 3))print(irange(-10, 4, 3))print(irange(1, 5))```## is_empty`is_empty()`Mengecek apakah variable setara dengan nilai kosong pada empty.Pengecekan nilai yang setara menggunakan simbol '==', sedangkan untukpengecekan lokasi memory yang sama menggunakan keyword 'is'```pythonprint(is_empty(&quot;teks&quot;))print(is_empty(True))print(is_empty(False))print(is_empty(None))print(is_empty(0))print(is_empty([]))```## is_iterable`is_iterable()`Mengecek apakah suatu variabel bisa dilakukan forloop atau tidak```pythons = 'ini string'print(is_iterable(s))l = [12,21,2,1]print(is_iterable(l))```## iscandir`iscandir()`## log`log()`Decorator untuk mempermudah pembuatan log karena tidak perlu mengubah fungsi yg sudah ada.Melakukan print ke console untuk menginformasikan proses yg sedang berjalan didalam program.```python@logdef some_function():    pass@log()def some_function_again():    pass@log(&quot;Calling some function&quot;)def some_function_more():    passif __name__ == &quot;__main__&quot;:    some_function()    some_function_again()    some_function_more()```## print_colorize`print_colorize()`Print text dengan warna untuk menunjukan text penting```pythonprint_colorize(&quot;Print some text&quot;)print_colorize(&quot;Print some text&quot;, color=colorama.Fore.RED)```## print_dir`print_dir()`Print property dan method yang tersedia pada variabel```pythonp = pathlib.Path(&quot;c:/arba/dzukhron.dz&quot;)print_dir(p)```## print_log`print_log()`Akan melakukan print ke console.Berguna untuk memberikan informasi proses program yg sedang berjalan.```pythonprint_log(&quot;Standalone Log&quot;)```## random_bool`random_bool()`Menghasilkan nilai random True atau False.Fungsi ini merupakan fungsi tercepat untuk mendapatkan random bool.```pythonprint(random_bool())```## scan_file`scan_file()`## scan_folder`scan_folder()`## serialize`serialize()`Mengubah variabel data menjadi string untuk yang dapat dibaca untuk disimpan.String yang dihasilkan berbentuk syntax YAML.```pythondata = {    'a': 123,    't': ['disini', 'senang', 'disana', 'senang'],    'l': (12, 23, [12, 42])}print(serialize(data))```## set_timeout`set_timeout()`Menjalankan fungsi ketika sudah sekian detik.Apabila timeout masih berjalan tapi kode sudah selesai dieksekusi semua, makaprogram tidak akan berhenti sampai timeout selesai, kemudian fungsi dijalankan,kemudian program dihentikan.```pythonset_timeout(3, lambda: print(&quot;Timeout 3&quot;))x = set_timeout(7, lambda: print(&quot;Timeout 7&quot;))print(x)print(&quot;menghentikan timeout 7&quot;)x.cancel()```## sets_ordered`sets_ordered()`## strtr`strtr()`STRing TRanslate, mengubah string menggunakan kamus dari dict.```pythontext = 'aku disini mau kemana saja'replacements = {    &quot;disini&quot;: &quot;disitu&quot;,    &quot;kemana&quot;: &quot;kesini&quot;,}print(strtr(text, replacements))```## strtr_regex`strtr_regex()`STRing TRanslate metode Regex, mengubah string menggunakan kamus dari dict.```pythontext = 'aku {{ ini }} mau ke {{ sini }} mau kemana saja'replacements = {    r&quot;\{\{\s*(ini)\s*\}\}&quot;: r&quot;itu dan &quot;,    r&quot;\{\{\s*sini\s*\}\}&quot;: r&quot;situ&quot;,}print(strtr_regex(text, replacements))```## to_str`to_str()`## unserialize`unserialize()`Mengubah string data hasil dari serialize menjadi variabel.String data adalah berupa syntax YAML.```pythondata = {    'a': 123,    't': ['disini', 'senang', 'disana', 'senang'],    'l': (12, 23, [12, 42])}s = serialize(data)print(unserialize(s))```# CLASS## Batchmaker`Batchmaker()`Alat Bantu untuk membuat teks yang berulang.Gunakan {...-...}.```pythons = &quot;Urutan {1-3} dan {3-1} dan {a-d} dan {D-A} saja.&quot;print(Batchmaker(s).result())```## ComparePerformance`ComparePerformance()`Menjalankan seluruh method dalam class,kemudian membandingkan waktu yg diperlukan.```pythonclass ExampleComparePerformance(ComparePerformance):    # number = 1    z = 10    def a(self):        return (x for x in range(self.z))    def b(self):        return tuple(x for x in range(self.z))    def c(self):        return [x for x in range(self.z)]    def d(self):        return list(x for x in range(self.z))if __name__ == &quot;__main__&quot;:    print(ExampleComparePerformance().compare_result())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())    print(ExampleComparePerformance().compare_performance())```## RunParallel`RunParallel()`Menjalankan program secara bersamaan.Structure:- Semua methods akan dijalankan secara paralel kecuali method dengan nama yg diawali underscore `_`- Method untuk multithreading/multiprocessing harus memiliki 2 parameter, yaitu: `result: dict` dan `q: queue.Queue`. Parameter `result` digunaan untuk memberikan return value dari method, dan Parameter `q` digunakan untuk mengirim data antar proses.- Method untuk asyncio harus menggunakan keyword `async def`, dan untuk perpindahan antar kode menggunakan `await asyncio.sleep(0)`, dan keyword `return` untuk memberikan return value.- Return Value berupa dictionary dengan key adalah nama function, dan value adalah return value dari setiap fungsiNote:- `class RunParallel` didesain hanya untuk pemrosesan data saja.- Penggunaannya `class RunParallel` dengan cara membuat instance sub class beserta data yg akan diproses, kemudian panggil fungsi yg dipilih `run_asyncio / run_multi_threading / run_multi_processing`, kemudian dapatkan hasilnya.- `class RunParallel` tidak didesain untuk menyimpan data, karena setiap module terutama module `multiprocessing` tidak dapat mengakses data kelas dari proses yg berbeda.```pythonclass ExampleRunParallel(RunParallel):    z = &quot;ini&quot;    def __init__(self) -&gt; None:        self.pop = random.randint(0, 100)    def _set_property_here(self, v):        self.prop = v    def a(self, result: dict, q: queue.Queue):        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;a&quot;] = &quot;a&quot;        q.put(&quot;from a 1&quot;)        q.put(&quot;from a 2&quot;)    def b(self, result: dict, q: queue.Queue):        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;b&quot;] = &quot;b&quot;        result[&quot;q_get&quot;] = q.get()    def c(self, result: dict, q: queue.Queue):        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;c&quot;] = &quot;c&quot;        result[&quot;q_get&quot;] = q.get()    async def d(self):        print(&quot;hello&quot;)        await asyncio.sleep(0)        print(&quot;hello&quot;)        result = {}        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;d&quot;] = &quot;d&quot;        return result    async def e(self):        print(&quot;world&quot;)        await asyncio.sleep(0)        print(&quot;world&quot;)        result = {}        result[&quot;z&quot;] = self.z        result[&quot;pop&quot;] = self.pop        result[&quot;e&quot;] = &quot;e&quot;        return resultif __name__ == &quot;__main__&quot;:    print(ExampleRunParallel().run_asyncio())    print(ExampleRunParallel().run_multi_threading())    print(ExampleRunParallel().run_multi_processing())```## generator`generator()`Class ini menyediakan beberapa fungsi yang bisa mengembalikan generator.Digunakan untuk mengoptimalkan program.Class ini dibuat karena python generator yang disimpan dalam variabelhanya dapat diakses satu kali.</longdescription>
</pkgmetadata>