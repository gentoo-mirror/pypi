<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pylifttk[![Downloads](https://pepy.tech/badge/pylifttk)](https://pepy.tech/project/pylifttk)[![Downloads](https://pepy.tech/badge/pylifttk/month)](https://pepy.tech/project/pylifttk/month)This is a Python utility library for Princeton COS' LIFT.This library tries to conveniently integrate a collection of educational tech tools used at Princeton's Department of Computer Science, to facilitate exchanges of data between those platforms.## Services integrated by this libraryThis library integrates:- codePost (roster, grades);- Ed Discussion (roster);- CSStaff Course API (roster, assignments);- TigerFile (roster, assignments, submissions);- Gradescope (roster, grades).## Configuration fileSince this library integrates the functionality of several platforms, it requires access to credentials for each of those platforms. As such the `config.yaml` file does a lot of the heavy lifting. *Note that each subsection of the file is only loaded if the corresponding submodules are loaded in Python.*```yamlcourse: COS126term: F2019csstaff:  username: &quot;cos126api&quot;  password: &quot;&quot; # email csstaff@princeton.educodePost:  api_key: &quot;&quot; #ed:  username: &quot;&quot; # credentials for https://us.edstem.org  password: &quot;&quot;gradescope:  username: &quot;&quot; # credentials for https://gradescope.com  password: &quot;&quot;tigerfile:  token: &quot;&quot; # token obtained from https://adm.cs.princeton.edu```## ExampleThis snippet computes final grades:```pythonimport pylifttk.integrations.final_grades as pyltkfgdef get_late_data():    # student_id -&gt; float of late days (including alloted)    return {        &quot;student1&quot;: 1.0,        &quot;student7&quot;: 2.5,        }# Miscellaneous late data calculationlate_data = get_late_data()student_data = pyltkfg.compute_final_grade_data(    course_name=&quot;COS126&quot;,    course_term=&quot;F2019&quot;,    ignore_missing_assessment=False,    skipped_assessments=None,    override_cutoffs={        &quot;A+&quot;: 100.0,        &quot;A&quot; : 92.49,        &quot;A-&quot;: 89.50,        &quot;B+&quot;: 87.00,        &quot;B&quot; : 82.75,        &quot;B-&quot;: 80.00,        &quot;C+&quot;: 77.00,        &quot;C&quot; : 73.00,        &quot;C-&quot;: 69.00,        &quot;D&quot; : 55.0    },    late_data=late_data)```with the following sample configuration (authentication content blanked out):```yaml# Course informationcourse: COS126term: F2019# Authentication credentials and tokenscsstaff:  username: &quot;**********&quot;  password: &quot;**********&quot;codePost:  api_key: &quot;**********&quot;ed:  username: &quot;**********&quot;  password: &quot;**********&quot;gradescope:  username: &quot;**********&quot;  password: &quot;**********&quot;tigerfile:  token: &quot;**********&quot;labqueue:  username: &quot;**********&quot;  password: &quot;**********&quot;canvas:  token: &quot;**********&quot;# Mappings between the names of various services that this library is integratingnormalizations:  - source: runscript    destination: tigerfile    mapping:      hello: Hello      loops: Loops      nbody: NBody      sierpinski: Sierpinski      hamming: Hamming      lfsr: LFSR      guitar: Guitar      markov: Markov      tsp: TSP      atomic: Atomic  - source: tigerfile    destination: codepost    mapping:      Hello: Hello      Loops: Loops      NBody: NBody      Sierpinski: Sierpinski      Hamming: Hamming      LFSR: LFSR      Guitar: Guitar      Markov: Markov      TSP: &quot;TSPP&quot;      Atomic: Atomic# Course policy constantspolicy:  cutoffs:    &quot;A&quot; : 93    &quot;A-&quot;: 90    &quot;B+&quot;: 87    &quot;B&quot; : 83    &quot;B-&quot;: 80    &quot;C+&quot;: 77    &quot;C&quot; : 73    &quot;C-&quot;: 70    &quot;D&quot; : 60    &quot;F&quot; : 0  lateness:    allotted: 4    penalty: 0.5    grace_minutes: 180  totals:    Hello: 4.0    Loops: 4.0    NBody: 4.0    Sierpinski: 4.0    Hamming: 4.0    Programming Exam 1: 7.5    Written Exam 1: 17.5    LFSR: 5.0    Guitar: 5.0    Markov: 5.0    TSPP: 5.0    Programming Exam 2: 7.5    Written Exam 2: 17.5    Atomic: 10.0  weights:    - name: &quot;assignments&quot;      weight: 40.0      content:        - Hello        - Loops        - NBody        - Sierpinski        - Hamming        - LFSR        - Guitar        - Markov        - TSPP    - name: &quot;final project&quot;      weight: 10.0      content:        - Atomic    - name: &quot;written exams&quot;      weight: 35.0      content:        - Written Exam 1        - Written Exam 2    - name: &quot;programming exams&quot;      weight: 15.0      content:        - Programming Exam 1        - Programming Exam 2```</longdescription>
</pkgmetadata>