<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python: FireServiceRota / BrandweerRoosterBasic Python 3 API wrapper for FireServiceRota and BrandweerRooster for use with Home Assistant## AboutThis package allows you to get notified about emergency incidents from https://www.FireServiceRota.co.uk and https://www.BrandweerRooster.nl.Those are services used by firefighters.It currently provides the following limited functionality:- Connect to the websocket to get incident details in near-realtime- Get user availability (duty)- Set user incident response statusSee https://fireservicerota.co.uk and https://brandweerrooster.nl for more details.NOTE: You need a subscription and login account to be able to use it.## Installation```bashpip3 install pyfireservicerota```## Usage### Initialise module using user credentials to get token_info```python#!/usr/bin/env python3from pyfireservicerota import FireServiceRota, FireServiceRotaIncidents, ExpiredTokenError, InvalidTokenError, InvalidAuthErrorimport loggingimport sysimport jsonimport timeimport threading_LOGGER = logging.getLogger(__name__)logging.basicConfig(level=logging.DEBUG)token_info = {}api = FireServiceRota(      base_url=&quot;www.brandweerrooster.nl&quot;,      username=&quot;your@email.address&quot;,      password=&quot;yourpassword&quot;,)try:    token_info = api.request_tokens()except InvalidAuthError:    token_info = Noneif not token_info:    _LOGGER.error(&quot;Failed to get access tokens&quot;)```NOTE: You don't need to store user credentials, at first authentication just the token_info dictionary is enough use api.refresh_tokens to refresh it.### Initialise module with stored token_info```python#!/usr/bin/env python3from pyfireservicerota import FireServiceRota, FireServiceRotaIncidents, ExpiredTokenError, InvalidTokenError, InvalidAuthErrorimport loggingimport sysimport jsonimport time_LOGGER = logging.getLogger(__name__)logging.basicConfig(level=logging.DEBUG)token_info = {}api = FireServiceRota(      base_url = &quot;www.brandweerrooster.nl&quot;,      token_info = token_info    )# Get user availability (duty)try:   print(api.get_availability('Europe/Amsterdam'))except ExpiredTokenError:   _LOGGER.debug(&quot;Tokens are expired, refreshing&quot;)   try:       token_info = api.refresh_tokens()   except InvalidAuthError:       _LOGGER.debug(&quot;Invalid refresh token, you need to re-login&quot;)except InvalidTokenError:   _LOGGER.debug(&quot;Tokens are invalid&quot;)   try:       token_info = api.refresh_tokens()   except InvalidAuthError:       _LOGGER.debug(&quot;Invalid refresh token, you need to re-login&quot;)# Get incident response status for incident with id 123456incident_id = 123456try:   print(api.get_incident_response(incident_id))except ExpiredTokenError:   _LOGGER.debug(&quot;Tokens are expired, refreshing&quot;)   try:       token_info = api.refresh_tokens()   except InvalidAuthError:       _LOGGER.debug(&quot;Invalid refresh token, you need to re-login&quot;)except InvalidTokenError:   _LOGGER.debug(&quot;Tokens are invalid&quot;)   try:       token_info = api.refresh_tokens()   except InvalidAuthError:       _LOGGER.debug(&quot;Invalid refresh token, you need to re-login&quot;)# Set incident response to acknowlegded (False = 'rejected')try:   api.set_incident_response(id, True)except ExpiredTokenError:   _LOGGER.debug(&quot;Tokens are expired, refreshing&quot;)   try:       token_info = api.refresh_tokens()   except InvalidAuthError:       _LOGGER.debug(&quot;Invalid refresh token, you need to re-login&quot;)except InvalidTokenError:   _LOGGER.debug(&quot;Tokens are invalid&quot;)   try:       token_info = api.refresh_tokens()   except InvalidAuthError:       _LOGGER.debug(&quot;Invalid refresh token, you need to re-login&quot;)# Connect to websocket channel for incidentswsurl = f&quot;wss://www.brandweerrooster.nl/cable?access_token={token_info['access_token']}&quot;class FireService():    def __init__(self, url):        self._data = None        self.listener = None        self.url = url        self.incidents_listener()    def on_incident(self, data):        _LOGGER.debug(&quot;INCIDENT: %s&quot;, data)        self._data = data    def incidents_listener(self):        &quot;&quot;&quot;Spawn a new Listener and links it to self.on_incident.&quot;&quot;&quot;        self.listener = FireServiceRotaIncidents(on_incident=self.on_incident)        _LOGGER.debug(&quot;Starting incidents listener&quot;)        self.listener.start(url=self.url)ws = FireService(wsurl)while True:    time.sleep(1)```</longdescription>
</pkgmetadata>