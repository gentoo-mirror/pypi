<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SignalR core client[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg?logo=paypal&amp;style=flat-square)](https://www.paypal.me/mandrewcito/1)![Pypi](https://img.shields.io/pypi/v/signalrcore.svg)[![Downloads](https://pepy.tech/badge/signalrcore/month)](https://pepy.tech/project/signalrcore/month)[![Downloads](https://pepy.tech/badge/signalrcore)](https://pepy.tech/project/signalrcore)![Issues](https://img.shields.io/github/issues/mandrewcito/signalrcore.svg)![Open issues](https://img.shields.io/github/issues-raw/mandrewcito/signalrcore.svg)![codecov.io](https://codecov.io/github/mandrewcito/signalrcore/coverage.svg?branch=master)![logo alt](https://raw.githubusercontent.com/mandrewcito/signalrcore/master/docs/img/logo_temp.128.svg.png)# Links * [Dev to posts with library examples and implementation](https://dev.to/mandrewcito/singlar-core-python-client-58e7)* [Pypi](https://pypi.org/project/signalrcore/)* [Wiki - This Doc](https://mandrewcito.github.io/signalrcore/)# DevelopTest server will be avaiable in [here](https://github.com/mandrewcito/signalrcore-containertestservers) and docker compose is required.```bashgit clone https://github.com/mandrewcito/signalrcore-containertestserverscd signalrcore-containertestserversdocker-compose upcd ../signalrcoremake tests```## Known IssuesIssues related with closing sockets are inherited from the websocket-client library. Due to these problems i can't update the library to versions higher than websocket-client 0.54.0. I'm working to solve it but for now its patched (Error number 1. Raises an exception, and then exception is treated for prevent errors). If I update the websocket library I fall into error number 2, on local machine I can't reproduce it but travis builds fail (sometimes and randomly :()* [1. Closing socket error](https://github.com/slackapi/python-slackclient/issues/171)* [2. Random errors closing socket](https://github.com/websocket-client/websocket-client/issues/449)# A Tiny How To## Connect to a server without auth```pythonhub_connection = HubConnectionBuilder()\    .with_url(server_url)\    .configure_logging(logging.DEBUG)\    .with_automatic_reconnect({        &quot;type&quot;: &quot;raw&quot;,        &quot;keep_alive_interval&quot;: 10,        &quot;reconnect_interval&quot;: 5,        &quot;max_attempts&quot;: 5    }).build()```## Connect to a server with authlogin_function must provide auth token```pythonhub_connection = HubConnectionBuilder()\            .with_url(server_url,            options={                &quot;access_token_factory&quot;: login_function,                &quot;headers&quot;: {                    &quot;mycustomheader&quot;: &quot;mycustomheadervalue&quot;                }            })\            .configure_logging(logging.DEBUG)\            .with_automatic_reconnect({                &quot;type&quot;: &quot;raw&quot;,                &quot;keep_alive_interval&quot;: 10,                &quot;reconnect_interval&quot;: 5,                &quot;max_attempts&quot;: 5            }).build()```### Unauthorized errorsA login function must provide an error controller if authorization fails. When connection starts, if authorization fails exception will be propagated.```python    def login(self):        response = requests.post(            self.login_url,            json={                &quot;username&quot;: self.email,                &quot;password&quot;: self.password                },verify=False)        if response.status_code == 200:            return response.json()[&quot;token&quot;]        raise requests.exceptions.ConnectionError()    hub_connection.start()   # this code will raise  requests.exceptions.ConnectionError() if auth fails```## Configure logging```pythonHubConnectionBuilder()\    .with_url(server_url,    .configure_logging(logging.DEBUG)    ...```## Configure socket trace```python HubConnectionBuilder()\    .with_url(server_url,    .configure_logging(logging.DEBUG, socket_trace=True)     ...  ```## Configure your own handler```python import logginghandler = logging.StreamHandler()handler.setLevel(logging.DEBUG)hub_connection = HubConnectionBuilder()\    .with_url(server_url, options={&quot;verify_ssl&quot;: False}) \    .configure_logging(logging.DEBUG, socket_trace=True, handler=handler)    ... ```## Configuring reconnectionAfter reaching max_attempts an exeption will be thrown and on_disconnect event will be fired.```pythonhub_connection = HubConnectionBuilder()\    .with_url(server_url)\    ...    .build()```## Configuring additional headers```pythonhub_connection = HubConnectionBuilder()\            .with_url(server_url,            options={                &quot;headers&quot;: {                    &quot;mycustomheader&quot;: &quot;mycustomheadervalue&quot;                }            })            ...            .build()```## Configuring additional querystring parameters```pythonserver_url =&quot;http.... /?myquerystringparam=134&amp;foo=bar&quot;connection = HubConnectionBuilder()\            .with_url(server_url,            options={            })\            .build()```## Congfiguring skip negotiation```pythonhub_connection = HubConnectionBuilder() \        .with_url(&quot;ws://&quot;+server_url, options={            &quot;verify_ssl&quot;: False,            &quot;skip_negotiation&quot;: False,            &quot;headers&quot;: {            }        }) \        .configure_logging(logging.DEBUG, socket_trace=True, handler=handler) \        .build()```## Configuring ping(keep alive)keep_alive_interval sets the seconds of ping message```pythonhub_connection = HubConnectionBuilder()\    .with_url(server_url)\    .configure_logging(logging.DEBUG)\    .with_automatic_reconnect({        &quot;type&quot;: &quot;raw&quot;,        &quot;keep_alive_interval&quot;: 10,        &quot;reconnect_interval&quot;: 5,        &quot;max_attempts&quot;: 5    }).build()```## Configuring logging```pythonhub_connection = HubConnectionBuilder()\    .with_url(server_url)\    .configure_logging(logging.DEBUG)\    .with_automatic_reconnect({        &quot;type&quot;: &quot;raw&quot;,        &quot;keep_alive_interval&quot;: 10,        &quot;reconnect_interval&quot;: 5,        &quot;max_attempts&quot;: 5    }).build()```## Configure messagepack```pythonfrom signalrcore.protocol.messagepack_protocol import MessagePackHubProtocolHubConnectionBuilder()\            .with_url(self.server_url, options={&quot;verify_ssl&quot;:False})\                ...             .with_hub_protocol(MessagePackHubProtocol())\                ...            .build()```## Events### On Connect / On Disconnecton_open - fires when connection is opened and ready to send messageson_close - fires when connection is closed```pythonhub_connection.on_open(lambda: print(&quot;connection opened and handshake received ready to send messages&quot;))hub_connection.on_close(lambda: print(&quot;connection closed&quot;))```### On Hub Error (Hub Exceptions ...)```hub_connection.on_error(lambda data: print(f&quot;An exception was thrown closed{data.error}&quot;))```### Register an operation ReceiveMessage - signalr methodprint - function that has as parameters args of signalr method```pythonhub_connection.on(&quot;ReceiveMessage&quot;, print)```## Sending messagesSendMessage - signalr methodusername, message - parameters of signalrmethod```python    hub_connection.send(&quot;SendMessage&quot;, [username, message])```## Sending messages with callbackSendMessage - signalr methodusername, message - parameters of signalrmethod```python    send_callback_received = threading.Lock()    send_callback_received.acquire()    self.connection.send(        &quot;SendMessage&quot;, # Method        [self.username, self.message], # Params        lambda m: send_callback_received.release()) # Callback    if not send_callback_received.acquire(timeout=1):        raise ValueError(&quot;CALLBACK NOT RECEIVED&quot;)```## Requesting streaming (Server to client)```pythonhub_connection.stream(            &quot;Counter&quot;,            [len(self.items), 500]).subscribe({                &quot;next&quot;: self.on_next,                &quot;complete&quot;: self.on_complete,                &quot;error&quot;: self.on_error            })```## Client side Streaming```pythonfrom signalrcore.subject import  Subjectsubject = Subject()# Start Streaminghub_connection.send(&quot;UploadStream&quot;, subject)# Each iterationsubject.next(str(iteration))# End streamingsubject.complete()```# Full ExamplesExamples will be avaiable [here](https://github.com/mandrewcito/signalrcore/tree/master/test/examples)It were developed using package from [aspnet core - SignalRChat](https://codeload.github.com/aspnet/Docs/zip/master) ## Chat exampleA mini example could be something like this:```pythonimport loggingimport sysfrom signalrcore.hub_connection_builder import HubConnectionBuilderdef input_with_default(input_text, default_value):    value = input(input_text.format(default_value))    return default_value if value is None or value.strip() == &quot;&quot; else valueserver_url = input_with_default('Enter your server url(default: {0}): ', &quot;wss://localhost:44376/chatHub&quot;)username = input_with_default('Enter your username (default: {0}): ', &quot;mandrewcito&quot;)handler = logging.StreamHandler()handler.setLevel(logging.DEBUG)hub_connection = HubConnectionBuilder()\    .with_url(server_url, options={&quot;verify_ssl&quot;: False}) \    .configure_logging(logging.DEBUG, socket_trace=True, handler=handler) \    .with_automatic_reconnect({            &quot;type&quot;: &quot;interval&quot;,            &quot;keep_alive_interval&quot;: 10,            &quot;intervals&quot;: [1, 3, 5, 6, 7, 87, 3]        }).build()hub_connection.on_open(lambda: print(&quot;connection opened and handshake received ready to send messages&quot;))hub_connection.on_close(lambda: print(&quot;connection closed&quot;))hub_connection.on(&quot;ReceiveMessage&quot;, print)hub_connection.start()message = None# Do loginwhile message != &quot;exit()&quot;:    message = input(&quot;&gt;&gt; &quot;)    if message is not None and message != &quot;&quot; and message != &quot;exit()&quot;:        hub_connection.send(&quot;SendMessage&quot;, [username, message])hub_connection.stop()sys.exit(0)```</longdescription>
</pkgmetadata>