<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>asciigraf=========.. image:: https://img.shields.io/badge/License-MIT-yellow.svg    :target: https://opensource.org/licenses/MIT.. image:: https://badge.fury.io/py/asciigraf.svg    :target: https://pypi.python.org/pypi/asciigraf.. image:: https://img.shields.io/pypi/pyversions/asciigraf.svg    :target: https://pypi.python.org/pypi/asciigraf.. image:: https://api.codeclimate.com/v1/badges/e7e872f6832da6cf6ab6/maintainability   :target: https://codeclimate.com/github/opusonesolutions/asciigraf/maintainability   :alt: MaintainabilityAsciigraf is a python library that turns ascii diagrams of networks intonetwork objects. It returns a `networkx &lt;https://networkx.github.io/&gt;`__graph of nodes for each alpha-numeric element in the input text; nodesare connected in the graph to match the edges represented in the diagramby ``-``, ``/``, ``\`` and ``|``.Installation------------Asciigraf can be installed from pypi using pip:.. code::    ~/$ pip install asciigrafUsage-----Asciigraf expects a string containg a 2-d ascii diagram. Nodes can be analphanumeric string composed of words, sentences and punctuation (for a look atwhat is all tested to work, see the `node recognition tests`_). Edges can becomposed of ``-``, ``/``, ``\`` and ``|``... _node recognition tests: https://github.com/opusonesolutions/asciigraf/blob/master/tests/test_node_match.py.. code:: python    import asciigraf    network = asciigraf.graph_from_ascii(&quot;&quot;&quot;              NodeA-----                       |                       |---NodeB                                         &quot;&quot;&quot;)    print(network)    &gt;&gt;&gt; &lt;networkx.classes.graph.Graph at 0x7f24c3a8b470&gt;    print(network.edges())    &gt;&gt;&gt; [('NodeA', 'NodeB')]    print(network.nodes())    &gt;&gt;&gt; ['NodeA', 'NodeB']Networkx provides tools to attach data to graphs, nodes and edges, and asciigrafleverages these in a number of ways; in the example below you can see thatasciigraf uses this to attach a ``x, y`` position tuple to each nodeindicating the line/col position of each node ( *0,0* is at the top-left).It also attaches a ``length`` attributeto each edge which matches the number of characters in that edge, as wellas a list of positions for each character an edge. In addition, the input datais attached as a graph attribute ``ascii_string`` for reference... code:: python    print(network.nodes(data=True))    &gt;&gt;&gt; [('NodeA', {'position': (10, 1)}), ('NodeB', {'position': (23, 3)})]    print(network.edges(data=True))    &gt;&gt;&gt; [('NodeA', 'NodeB', OrderedDict([('length', 10), 'points', [...]))]        print(network.edge['NodeA']['NodeB']['points'])    &gt;&gt;&gt; [(15, 1), (16, 1), (17, 1), (18, 1),         (19, 1), (19, 2), (19, 3), (20, 3), (21, 3), (22, 3)]    print(network.graph[&quot;ascii_string&quot;])    &gt;&gt;&gt;        NodeA-----                 |                 |---NodeBAsciigraf also lets you annotate the edges of graphs using in-line labels ---denoted by parentheses. The contents of the label will be attached to the edgeon which it is drawn with the attribute name ``label``... code:: python    network = asciigraf.graph_from_ascii(&quot;&quot;&quot;        A---(nuts)----B----(string)---C                      |                      |                      |                      D---(pebbles)----E    &quot;&quot;&quot;)    print(network.get_edge_data(&quot;A&quot;, &quot;B&quot;)[&quot;label&quot;])    &gt;&gt;&gt; nuts    print(network.get_edge_data(&quot;B&quot;, &quot;C&quot;)[&quot;label&quot;])    &gt;&gt;&gt; string    print(network.get_edge_data(&quot;D&quot;, &quot;E&quot;)[&quot;label&quot;])    &gt;&gt;&gt; pebbles    print(hasattr(network.get_edge_data(&quot;B&quot;, &quot;D&quot;), &quot;label&quot;))    &gt;&gt;&gt; FalseHave fun!.. code:: python    import asciigraf    network = asciigraf.graph_from_ascii(&quot;&quot;&quot;              s---p----1---nx             /    |        |            /     |        0---f           6l-a   c--          /   |      \--k         /   ua         |  9e        q      \        | /                \-r7z   jud                    \    |                     m   y                      \  |                       v-ow                                 &quot;&quot;&quot;)</longdescription>
</pkgmetadata>