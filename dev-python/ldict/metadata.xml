<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![test](https://github.com/davips/ldict/workflows/test/badge.svg)[![codecov](https://codecov.io/gh/davips/ldict/branch/main/graph/badge.svg)](https://codecov.io/gh/davips/ldict)&lt;a href=&quot;https://pypi.org/project/ldict&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/ldict.svg?label=release&amp;color=blue&amp;style=flat-square&quot; alt=&quot;pypi&quot;&gt;&lt;/a&gt;![Python version](https://img.shields.io/badge/python-3.8%20%7C%203.9-blue.svg)[![license: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)&lt;!--- [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5501845.svg)](https://doi.org/10.5281/zenodo.5501845) ---&gt;[![arXiv](https://img.shields.io/badge/arXiv-2109.06028-b31b1b.svg?style=flat-square)](https://arxiv.org/abs/2109.06028)[![API documentation](https://img.shields.io/badge/doc-API%20%28auto%29-a0a0a0.svg)](https://davips.github.io/ldict)# ldictA lazy `dict`.### **This project was succeeded by [hdict](https://pypi.org/project/hdict).**------------[Latest release](https://pypi.org/project/ldict) |[Current code](https://github.com/davips/ldict) |[API documentation](https://davips.github.io/ldict)## See also* laziness+identity+persistence ([idict](https://pypi.org/project/idict))## OverviewA `ldict` is a `dict` with `str` keys.**Simple usage example**&lt;details&gt;&lt;p&gt;```python3from ldict import ldicta = ldict(x=3)print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3}&quot;&quot;&quot;``````python3b = ldict(y=5)print(b)&quot;&quot;&quot;{    &quot;y&quot;: 5}&quot;&quot;&quot;``````python3print(a &gt;&gt; b)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;y&quot;: 5}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;We consider that every value is generated by a process, starting from an `empty` ldict. The process is a sequence oftransformation steps done through the operator `&gt;&gt;`, which symbolizes a data flow. There are two types of steps:* **value insertion** - represented by dict-like objects* **function application** - represented by ordinary python functionsA `ldict` is completely defined by its key-value pairs so thatit can be converted from/to a built-in dict.Creating a ldict is not different from creating an ordinary dict. Optionally it can be created through the `&gt;&gt;` operatorused after `empty`:![img.png](https://raw.githubusercontent.com/davips/ldict/main/examples/img.png)Function application is done in the same way. The parameter names define the input fields, while the keys in thereturned dict define the output fields:![img_1.png](https://raw.githubusercontent.com/davips/ldict/main/examples/img_1.png)Similarly, for anonymous functions:![img_5.png](https://raw.githubusercontent.com/davips/ldict/main/examples/img_5.png)Finally, the result is only evaluated at request:![img_6.png](https://raw.githubusercontent.com/davips/ldict/main/examples/img_6.png)## Installation### ...as a standalone lib```bash# Set up a virtualenv. python3 -m venv venvsource venv/bin/activate# Install from PyPI...pip install --upgrade pippip install -U ldictpip install -U ldict[full]  # use this for extra functionality (recommended)# ...or, install from updated source code.pip install git+https://github.com/davips/ldict```### ...from source```bashgit clone https://github.com/davips/ldictcd ldictpoetry install```## Examples**Merging two ldicts**&lt;details&gt;&lt;p&gt;```python3from ldict import ldicta = ldict(x=3)print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3}&quot;&quot;&quot;``````python3b = ldict(y=5)print(b)&quot;&quot;&quot;{    &quot;y&quot;: 5}&quot;&quot;&quot;``````python3print(a &gt;&gt; b)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;y&quot;: 5}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Lazily applying functions to ldict**&lt;details&gt;&lt;p&gt;```python3from ldict import ldicta = ldict(x=3)print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3}&quot;&quot;&quot;``````python3a = a &gt;&gt; ldict(y=5) &gt;&gt; {&quot;z&quot;: 7} &gt;&gt; (lambda x, y, z: {&quot;r&quot;: x ** y // z})print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;y&quot;: 5,    &quot;z&quot;: 7,    &quot;r&quot;: &quot;→(x y z)&quot;}&quot;&quot;&quot;``````python3print(a.r)&quot;&quot;&quot;34&quot;&quot;&quot;``````python3print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;y&quot;: 5,    &quot;z&quot;: 7,    &quot;r&quot;: 34}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Parameterized functions and sampling**&lt;details&gt;&lt;p&gt;```python3from random import Randomfrom ldict import empty, let# A function provide input fields and, optionally, parameters.# For instance:# 'a' is sampled from an arithmetic progression# 'b' is sampled from a geometric progression# Here, the syntax for default parameter values is borrowed with a new meaning.def fun(x, y, a=[-100, -99, -98, ..., 100], b=[0.0001, 0.001, 0.01, ..., 100000000]):    return {&quot;z&quot;: a * x + b * y}def simplefun(x, y):    return {&quot;z&quot;: x * y}# Creating an empty ldict. Alternatively: d = ldict().d = empty &gt;&gt; {}print(d)&quot;&quot;&quot;{}&quot;&quot;&quot;``````python3# Putting some values. Alternatively: d = ldict(x=5, y=7).d[&quot;x&quot;] = 5d[&quot;y&quot;] = 7print(d)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7}&quot;&quot;&quot;``````python3# Parameter values are uniformly sampled.d1 = d &gt;&gt; simplefunprint(d1)print(d1.z)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;z&quot;: &quot;→(x y)&quot;}35&quot;&quot;&quot;``````python3d2 = d &gt;&gt; simplefunprint(d2)print(d2.z)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;z&quot;: &quot;→(x y)&quot;}35&quot;&quot;&quot;``````python3# Parameter values can also be manually set.e = d &gt;&gt; let(fun, a=5, b=10)print(e.z)&quot;&quot;&quot;95&quot;&quot;&quot;``````python3# Not all parameters need to be set.e = d &gt;&gt; Random() &gt;&gt; let(fun, a=5)print(&quot;e =&quot;, e.z)&quot;&quot;&quot;e = 25.007&quot;&quot;&quot;``````python3# Each run will be a different sample for the missing parameters.e = e &gt;&gt; Random() &gt;&gt; let(fun, a=5)print(&quot;e =&quot;, e.z)&quot;&quot;&quot;e = 725.0&quot;&quot;&quot;``````python3# We can define the initial state of the random sampler.# It will be in effect from its location place onwards in the expression.e = d &gt;&gt; Random(0) &gt;&gt; let(fun, a=5)print(e.z)&quot;&quot;&quot;725.0&quot;&quot;&quot;``````python3# All runs will yield the same result,# if starting from the same random number generator seed.e = e &gt;&gt; Random(0) &gt;&gt; let(fun, a=[555, 777])print(&quot;Let 'a' be a list:&quot;, e.z)&quot;&quot;&quot;Let 'a' be a list: 700003885.0&quot;&quot;&quot;``````python3# Reproducible different runs are achievable by using a single random number generator.e = e &gt;&gt; Random(0) &gt;&gt; let(fun, a=[5, 25, 125, ..., 10000])print(&quot;Let 'a' be a geometric progression:&quot;, e.z)&quot;&quot;&quot;Let 'a' be a geometric progression: 700003125.0&quot;&quot;&quot;``````python3rnd = Random(0)e = d &gt;&gt; rnd &gt;&gt; let(fun, a=5)print(e.z)e = d &gt;&gt; rnd &gt;&gt; let(fun, a=5)  # Alternative syntax.print(e.z)&quot;&quot;&quot;725.0700000025.0&quot;&quot;&quot;``````python3# Output fields can be defined dynamically through parameter values.# Input fields can be defined dynamically through kwargs.copy = lambda source=None, target=None, **kwargs: {target: kwargs[source]}d = empty &gt;&gt; {&quot;x&quot;: 5}d &gt;&gt;= let(copy, source=&quot;x&quot;, target=&quot;y&quot;)print(d)d.evaluate()print(d)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: &quot;→(source target x)&quot;}{    &quot;x&quot;: 5,    &quot;y&quot;: 5}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Composition of sets of functions**&lt;details&gt;&lt;p&gt;```python3from random import Randomfrom ldict import empty# A multistep process can be defined without applying its functionsdef g(x, y, a=[1, 2, 3, ..., 10], b=[0.00001, 0.0001, 0.001, ..., 100000]):    return {&quot;z&quot;: a * x + b * y}def h(z, c=[1, 2, 3]):    return {&quot;z&quot;: c * z}# In the ldict framework 'data is function',# so the alias ø represents the 'empty data object' and the 'reflexive function' at the same time.# In other words: 'inserting nothing' has the same effect as 'doing nothing'.fun = empty &gt;&gt; g &gt;&gt; h  # empty enable the cartesian product of the subsequent sets of functions within the expression.print(fun)&quot;&quot;&quot;«λ{} × λ»&quot;&quot;&quot;``````python3# An unnapplied function has its free parameters unsampled.# A compostition of functions results in an ordered set (Cartesian product of sets).# It is a set because the parameter values of the functions are still undefined.d = {&quot;x&quot;: 5, &quot;y&quot;: 7} &gt;&gt; (Random(0) &gt;&gt; fun)print(d)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;z&quot;: &quot;→(c z→(a b x y))&quot;}&quot;&quot;&quot;``````python3print(d.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3d = {&quot;x&quot;: 5, &quot;y&quot;: 7} &gt;&gt; (Random(0) &gt;&gt; fun)print(d.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3# Reproducible different runs by passing a stateful random number generator.rnd = Random(0)e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;14050.0&quot;&quot;&quot;``````python3# Repeating the same results.rnd = Random(0)e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;14050.0&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;&lt;!--- ## PersistenceExtra dependencies can be installed to support saving data to disk or to a server in the network. **[still an ongoing work...]**`poetry install -E full`---&gt;## ConceptA ldict is like a common Python dict, with extra functionality and lazy. It is a mapping between string keys, calledfields, and any serializable (pickable protocol=5) object.## GrantsThis work was partially supported by Fapesp under supervision ofProf. André C. P. L. F. de Carvalho at CEPID-CeMEAI (Grants 2013/07375-0 – 2019/01735-0).</longdescription>
</pkgmetadata>