<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## AiriumBidirectional `HTML`-`python` translator.[![PyPI version](https://img.shields.io/pypi/v/airium.svg)](https://pypi.python.org/pypi/airium/)[![pipeline status](https://gitlab.com/kamichal/airium/badges/master/pipeline.svg)](https://gitlab.com/kamichal/airium/-/commits/master)[![coverage report](https://gitlab.com/kamichal/airium/badges/master/coverage.svg)](https://gitlab.com/kamichal/airium/-/commits/master)[![PyPI pyversion](https://img.shields.io/pypi/pyversions/AIRIUM.svg)](https://pypi.org/project/airium/)[![PyPI license](https://img.shields.io/pypi/l/AIRIUM.svg)](https://pypi.python.org/pypi/airium/)[![PyPI status](https://img.shields.io/pypi/status/AIRIUM.svg)](https://pypi.python.org/pypi/airium/)Key features:- simple, straight-forward- template-less (just the python, you may say goodbye to all the templates)- DOM structure is strictly represented by python indentation (with context-managers)- gives much cleaner `HTML` than regular templates- equipped with reverse translator: `HTML` to python- can output either pretty (default) or minified `HTML` code# Generating `HTML` code in python using `airium`#### Basic `HTML` page (hello world)```pythonfrom airium import Airiuma = Airium()a('&lt;!DOCTYPE html&gt;')with a.html(lang=&quot;pl&quot;):    with a.head():        a.meta(charset=&quot;utf-8&quot;)        a.title(_t=&quot;Airium example&quot;)    with a.body():        with a.h3(id=&quot;id23409231&quot;, klass='main_header'):            a(&quot;Hello World.&quot;)html = str(a)  # casting to string extracts the value# or directly to UTF-8 encoded bytes:html_bytes = bytes(a)  # casting to bytes is a shortcut to str(a).encode('utf-8')print(html)```Prints such a string:```html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;pl&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;Airium example&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h3 id=&quot;id23409231&quot; class=&quot;main_header&quot;&gt;      Hello World.    &lt;/h3&gt;  &lt;/body&gt;&lt;/html&gt;```In order to store it as a file, just:```pythonwith open('that/file/path.html', 'wb') as f:    f.write(bytes(html))```#### Simple image in a div```pythonfrom airium import Airiuma = Airium()with a.div():    a.img(src='source.png', alt='alt text')    a('the text')html_str = str(a)print(html_str)``````html&lt;div&gt;    &lt;img src=&quot;source.png&quot; alt=&quot;alt text&quot;/&gt;    the text&lt;/div&gt;```#### Table```pythonfrom airium import Airiuma = Airium()with a.table(id='table_372'):    with a.tr(klass='header_row'):        a.th(_t='no.')        a.th(_t='Firstname')        a.th(_t='Lastname')    with a.tr():        a.td(_t='1.')        a.td(id='jbl', _t='Jill')        a.td(_t='Smith')  # can use _t or text    with a.tr():        a.td(_t='2.')        a.td(_t='Roland', id='rmd')        a.td(_t='Mendel')table_str = str(a)print(table_str)# To store it to a file:with open('/tmp/airium_www.example.com.py') as f:    f.write(table_str)```Now `table_str` contains such a string:```html&lt;table id=&quot;table_372&quot;&gt;  &lt;tr class=&quot;header_row&quot;&gt;    &lt;th&gt;no.&lt;/th&gt;    &lt;th&gt;Firstname&lt;/th&gt;    &lt;th&gt;Lastname&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;1.&lt;/td&gt;    &lt;td id=&quot;jbl&quot;&gt;Jill&lt;/td&gt;    &lt;td&gt;Smith&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;2.&lt;/td&gt;    &lt;td id=&quot;rmd&quot;&gt;Roland&lt;/td&gt;    &lt;td&gt;Mendel&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;```### Chaining shortcut for elements with only one child_New in version 0.2.2_Having a structure with large number of `with` statements:```pythonfrom airium import Airiuma = Airium()with a.article():    with a.table():        with a.thead():            with a.tr():                a.th(_t='Column 1')                a.th(_t='Column 2')        with a.tbody():            with a.tr():                with a.td():                    a.strong(_t='Value 1')                a.td(_t='Value 2')table_str = str(a)print(table_str)```You may use a shortcut that is equivalent to:```pythonfrom airium import Airiuma = Airium()with a.article().table():    with a.thead().tr():        a.th(_t=&quot;Column 1&quot;)        a.th(_t=&quot;Column 2&quot;)    with a.tbody().tr():        a.td().strong(_t=&quot;Value 1&quot;)        a.td(_t=&quot;Value 2&quot;)table_str = str(a)print(table_str)``````html&lt;article&gt;  &lt;table&gt;    &lt;thead&gt;      &lt;tr&gt;        &lt;th&gt;Column 1&lt;/th&gt;        &lt;th&gt;Column 2&lt;/th&gt;      &lt;/tr&gt;    &lt;/thead&gt;    &lt;tbody&gt;      &lt;tr&gt;        &lt;td&gt;          &lt;strong&gt;Value 1&lt;/strong&gt;        &lt;/td&gt;        &lt;td&gt;Value 2&lt;/td&gt;      &lt;/tr&gt;    &lt;/tbody&gt;  &lt;/table&gt;&lt;/article&gt;```# Options### Pretty or MinifyBy default, airium biulds `HTML` code indented with spaces and with line breaks being line feed `\n` characters.It can be changed while creating an `Airium` instance. In general all avaliable arguments whit their default values are:```pythona = Airium(    base_indent='  ',  # str    current_level=0,  # int    source_minify=False,  # bool    source_line_break_character=&quot;\n&quot;,  # str)```#### minifyThat's a mode when size of the code is minimized, i.e. contains as less whitespaces as it's possible.The option can be enabled with `source_minify` argument, i.e.:```pythona = Airium(source_minify=True)```In case if you need to explicitly add a line break in the source code (not the `&lt;br/&gt;`):```pythona = Airium(source_minify=True)a.h1(_t=&quot;Here's your table&quot;)with a.table():    with a.tr():        a.break_source_line()        a.th(_t=&quot;Cell 11&quot;)        a.th(_t=&quot;Cell 12&quot;)    with a.tr():        a.break_source_line()        a.th(_t=&quot;Cell 21&quot;)        a.th(_t=&quot;Cell 22&quot;)    a.break_source_line()a.p(_t=&quot;Another content goes here&quot;)```Will result with such a code:```html&lt;h1&gt;Here's your table&lt;/h1&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Cell 11&lt;/th&gt;&lt;th&gt;Cell 12&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Cell 21&lt;/th&gt;&lt;th&gt;Cell 22&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Another content goes here&lt;/p&gt;```Note that the `break_source_line` cannot be usedin [context manager chains](#chaining-shortcut-for-elements-with-only-one-child).#### indent styleThe default indent of the generated HTML code has two spaces per each indent level.You can change it to `\t` or 4 spaces by setting `Airium` constructor argument, e.g.:```pythona = Airium(base_indent=&quot;\t&quot;)  # one tab symbola = Airium(base_indent=&quot;    &quot;)  # 4 spaces per each indentation levela = Airium(base_indent=&quot; &quot;)  # 1 space per one level# pick one of the above statements, it can be mixed with other arguments```Note that this setting is ignored when `source_minify` argument is set to `True` (see above).There is a special case when you set the base indent to empty string. It would disable indentation,but line breaks will be still added. In order to get rid of line breaks, check the `source_minify` argument.#### indent levelThe `current_level` being an integer can be set to non-negativevalue, wich will cause `airium` to start indentation with level offset given by the number.#### line break characterBy default, just a line feed (`\n`) is used for terminating lines of the generated code.You can change it to different style, e.g. `\r\n` or `\r` by setting `source_line_break_character` to the desired value.```pythona = Airium(source_line_break_character=&quot;\r\n&quot;)  # windows' style```Note that the setting has no effect when `source_minify` argument is set to `True` (see above).# Using airium with web-frameworksAirium can be used with frameworks like Flask or Django. It can completely replacetemplate engines, reducing code-files scater, which may bring better code organization, and some other reasons.Here is an example of using airium with django. It implements reusable `basic_body` and a view called `index`.```python# file: your_app/views.pyimport contextlibimport inspectfrom airium import Airiumfrom django.http import HttpResponse@contextlib.contextmanagerdef basic_body(a: Airium, useful_name: str = ''):    &quot;&quot;&quot;Works like a Django/Ninja template.&quot;&quot;&quot;    a('&lt;!DOCTYPE html&gt;')    with a.html(lang='en'):        with a.head():            a.meta(charset='utf-8')            a.meta(content='width=device-width, initial-scale=1', name='viewport')            # do not use CSS from this URL in a production, it's just for an educational purpose            a.link(href='https://unpkg.com/@picocss/pico@1.4.1/css/pico.css', rel='stylesheet')            a.title(_t=f'Hello World')        with a.body():            with a.div():                with a.nav(klass='container-fluid'):                    with a.ul():                        with a.li():                            with a.a(klass='contrast', href='./'):                                a.strong(_t=&quot;‚å® Foo Bar&quot;)                    with a.ul():                        with a.li():                            a.a(klass='contrast', href='#', **{'data-theme-switcher': 'auto'}, _t='Auto')                        with a.li():                            a.a(klass='contrast', href='#', **{'data-theme-switcher': 'light'}, _t='Light')                        with a.li():                            a.a(klass='contrast', href='#', **{'data-theme-switcher': 'dark'}, _t='Dark')                with a.header(klass='container'):                    with a.hgroup():                        a.h1(_t=f&quot;You're on the {useful_name}&quot;)                        a.h2(_t=&quot;It's a page made by our automatons with a power of steam engines.&quot;)            with a.main(klass='container'):                yield  # This is the point where main content gets inserted            with a.footer(klass='container'):                with a.small():                    margin = 'margin: auto 10px;'                    a.span(_t='¬© Airium HTML generator example', style=margin)            # do not use JS from this URL in a production, it's just for an educational purpose            a.script(src='https://picocss.com/examples/js/minimal-theme-switcher.js')def index(request) -&gt; HttpResponse:    a = Airium()    with basic_body(a, f'main page: {request.path}'):        with a.article():            a.h3(_t=&quot;Hello World from Django running Airium&quot;)            with a.p().small():                a(&quot;This bases on &quot;)                with a.a(href=&quot;https://picocss.com/examples/company/&quot;):                    a(&quot;Pico.css / Company example&quot;)            with a.p():                a(&quot;Instead of a HTML template, airium has been used.&quot;)                a(&quot;The whole body is generated by a template &quot;                  &quot;and the article code looks like that:&quot;)            with a.code().pre():                a(inspect.getsource(index))    return HttpResponse(bytes(a))  # from django.http import HttpResponse```Route it in `urls.py` just like a regular view:```python# file: your_app/urls.pyfrom django.contrib import adminfrom django.urls import pathimport your_appurlpatterns = [    path('index/', your_app.views.index),    path('admin/', admin.site.urls),]```The result ing web page on my machine looks like that:![Airium/Django templateless example](airium_django_example.png)# Reverse translationAirium is equipped with a transpiler `[HTML -&gt; py]`.It generates python code out of a given `HTML` string.### Using reverse translator as a binary:Ensure you have [installed](#installation) `[parse]` extras. Then call in command line:```bashairium http://www.example.com```That will fetch the document and translate it to python code.The code calls `airium` statements that reproduce the `HTML` document given.It may give a clue - how to define `HTML` structure for a givenweb page using `airium` package.To store the translation's result into a file:```bashairium http://www.example.com &gt; /tmp/airium_example_com.py```You can also parse local `HTML` files:```bashairium /path/to/your_file.html &gt; /tmp/airium_my_file.py```You may also try to parse your Django templates. I'm not sure if it works,but there will be probably not much to fix.### Using reverse translator as python code:```pythonfrom airium import from_html_to_airium# assume we have such a page given as a string:html_str = &quot;&quot;&quot;\&lt;!DOCTYPE html&gt;&lt;html lang=&quot;pl&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;Airium example&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h3 id=&quot;id23409231&quot; class=&quot;main_header&quot;&gt;      Hello World.    &lt;/h3&gt;  &lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;# to convert the html into python, just call:py_str = from_html_to_airium(html_str)# airium tests ensure that the result of the conversion is equal to the string:assert py_str == &quot;&quot;&quot;\#!/usr/bin/env python# File generated by reverse AIRIUM translator (version 0.2.6).# Any change will be overridden on next run.# flake8: noqa E501 (line too long)from airium import Airiuma = Airium()a('&lt;!DOCTYPE html&gt;')with a.html(lang='pl'):    with a.head():        a.meta(charset='utf-8')        a.title(_t='Airium example')    with a.body():        a.h3(klass='main_header', id='id23409231', _t='Hello World.')&quot;&quot;&quot;```### &lt;a name=&quot;transpiler_limitations&quot;&gt;Transpiler limitations&lt;/a&gt;&gt; so far in version 0.2.2:- result of translation does not keep exact amount of leading whitespaces  within `&lt;pre&gt;` tags. They come over-indented in python code.This is not however an issue when code is generated from python to `HTML`.- although it keeps the proper tags structure, the transpiler does not  chain all the `with` statements, so in some cases the generated  code may be much indented.- it's not too fast# &lt;a name=&quot;installation&quot;&gt;Installation&lt;/a&gt;If you need a new virtual environment, call:```bashvirtualenv venvsource venv/bin/activate```Having it activated - you may install airium like this:```bashpip install airium```In order to use reverse translation - two additional packages are needed, run:```bashpip install airium[parse]```Then check if the transpiler works by calling:```bashairium --help```&gt; Enjoy!</longdescription>
</pkgmetadata>