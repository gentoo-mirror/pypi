<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Occlusion LLM Explorer[![CodeQL](https://github.com/Occlusion-Solutions/occlussion_llm_explorer/actions/workflows/github-code-scanning/codeql/badge.svg)](https://github.com/Occlusion-Solutions/occlussion_llm_explorer/actions/workflows/github-code-scanning/codeql) [![python-ci](https://github.com/Occlusion-Solutions/occlussion_llm_explorer/actions/workflows/python-ci.yml/badge.svg)](https://github.com/Occlusion-Solutions/occlussion_llm_explorer/actions/workflows/python-ci.yml) [![python-cd](https://github.com/Occlusion-Solutions/occlussion_llm_explorer/actions/workflows/python-cd.yml/badge.svg)](https://github.com/Occlusion-Solutions/occlussion_llm_explorer/actions/workflows/python-cd.yml) [![PyPI version](https://badge.fury.io/py/llm-explorer.svg)](https://badge.fury.io/py/llm-explorer)**Lakehouse Analytics &amp;amp; Advanced ML**![llm_explorer_sample](https://github.com/Occlusion-Solutions/occlussion_llm_explorer/assets/11726633/f6a5753d-681c-418f-babb-0a2df74dd4d8)## Setup**Important** This package requires **Open AI &amp; HuggingFace API key**. Remember to run from a folder with the `.streamlit/secrets.toml` file.See [here](https://beta.openai.com/docs/developer-quickstart/your-api-keys) and [here](https://huggingface.co/docs/hub/quicktour.html#authentication) for more details.### Quick Install```shellpython -m pip install llm-explorer``````shellllm_explorer```Initial load could take some time as it downloads the model and the tokenizer. Remember to include the secrets.toml file under .streamlit/ folder.### Build from sourceClone the repository```shellgit clone https://github.com/Occlusion-Solutions/llm_explorer.git```Install the package``` shellcd llm_explorer &amp;&amp; make install```Run the package```shellllm_explorer```### Build manauallyAfter cloning, ceate a virtual environment```shellconda create -n llm_explorer python=3.10conda activate llm_explorer```Install the requirements```shellpip install -r requirements.txt```Run the python installation```shellpython setup.py installllm_explorer```## UsageUse the `demo@occlusion.solutions` user and `DEMO@occlusion` password to login.The deployment requires a secrets.toml file created under .streamlit/:```shelltouch .streamlit/secrets.toml```It should have a schema like this:```toml[connections.openai]api_key=&quot;sk-...&quot; # OpenAI API Key[connections.huggingface]api_key=&quot;shf_...&quot; # HuggingFace API Key[connections.databricks]server_hostname=&quot;your databricks host&quot;http_path=&quot;http path under cluster JDBC/ODBC connectivity&quot;access_token=&quot;your databricks access token&quot;```## Run Modes### ChainAn assistant Query engine, that is asked naturally with table references and helps in the query generation. The execution of the queries is manual### AgentIt uses the pandas agent to generate the queries and execute them. It is a more natural way of querying the data and it operates autonomously until it thinks it finds and answer.### ChatIt uses the HuggingFace Transformers Agent chat to operate in a conversational way.## Lakehouse Agent SampleAgent is queried for the top 10 producing wells. It identifies the tables it has access to and understands that the request could be satified by the padalloc table. It then creates a query that returns the top 10 producing assets and return the results.```shell&gt; Entering new AgentExecutor chain...Observation: logs, wellsThought: I should look at the schema of the microchip_logs and padalloc tables to see what columns I can use.Action: schema_sql_dbAction Input: &quot;wells&quot;Observation: DDLThought: I should query the padalloc table to get the top 10 producing wells.Action: query_sql_dbAction Input: &quot;SELECT WELL_CODE, SUM(PROD_GAS_VOLUME_MCF) AS total_gas_volume_mcf FROM padalloc GROUP BY WELL_CODE ORDER BY total_gas_volume_mcf DESC LIMIT 10&quot;Observation: results_dataframeThought: I now know the top 10 producing wells.Final Answer: The top 10 producing wells are 1222344, 1212560, 1222345, 1212503, 1222335, 1222340, 1222338, 1222367, 1220189, and 1222352.&gt; Finished chain.```## AttributionThis is an adapted implementation from the GitHub repository. See the contibutions list for more details:https://github.com/kaarthik108/snowChat</longdescription>
</pkgmetadata>