<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AMOSSYS Cyber Range client API## InstallationNote: it is recommanded to install the package in a virtualenv in order to avoid conflicts with version dependencies of other packages.```shpython3 setup.py install```## ConfigurationAccess to the Cyber Range is possible with either of the following configuration methods.### Configuration through configuration file (CLI only)It is possible to configure access to the Cyber Range through a configuration file, specified with the `--config` command line parameter:```sh$ cyber_range --help(...)--config CONFIG       Configuration file(...)```Configuration file content should be of the form `--key = value` (without quotes in values), as in the following exemple:```[DEFAULT]--core-url = https://[CORE-URL-API]--user_activity-url = https://[USER-ACTIVITY-URL-API]--provisioning-url = https://[PROVISIONING-URL-API]--redteam-url = https://[REDTEAM-URL-API]--cacert = &lt;PATH TO CA CERT&gt;--cert = &lt;PATH TO CLIENT CERT&gt;--key = &lt;PATH TO CLIENT PRIVATE KEY&gt;```### Configuration through command line arguments (CLI only)It is possible to configure access to the Cyber Range through command line arguments. See `cyber_range --help` command line output for available parameters:```sh$ cyber_range(...)  --core-url CORE_API_URL                        Set core API URL (default: 'http://127.0.0.1:5000')  --user_activity-url USER_ACTIVITY_API_URL                        Set user activity API URL (default: 'http://127.0.0.1:5002')  --provisioning-url PROVISIONING_API_URL                        Set provisioning API URL (default: 'http://127.0.0.1:5003')  --redteam-url REDTEAM_API_URL                        Set redteam API URL (default: 'http://127.0.0.1:5004')  --cacert CACERT       Set path to CA certs (default: None)  --cert CERT           Set path to client cert (default: None)  --key KEY             Set path to client key (default: None)```### Configuration through programmatic meansIt is possible to configure access to the Cyber Range programmatically in Python:```pythonimport cr_api_client.config import cr_api_client_config# Set URL APIcr_api_client_config.core_api_url = &quot;https://[CORE-URL-API]&quot;cr_api_client_config.user_activity_api_url = &quot;https://[USER-ACTIVITY-URL-API]&quot;cr_api_client_config.provisioning_api_url = &quot;https://[PROVISIONING-URL-API]&quot;cr_api_client_config.publish_api_url = &quot;https://[PUBLISH-URL-API]&quot;cr_api_client_config.redteam_api_url = &quot;https://[REDTEAM-URL-API]&quot;# Set server and client certificates for Core APIcr_api_client_config.cacert = &quot;&lt;PATH TO CA CERT&gt;&quot;cr_api_client_config.cert = &quot;&lt;PATH TO CLIENT CERT&gt;&quot;cr_api_client_config.key = &quot;&lt;PATH TO CLIENT PRIVATE KEY&gt;&quot;```Or by using environment variable before calling a script depending on`cr_api_client` python library:```bashexport CORE_API_URL=&quot;https://[CORE-URL-API]&quot;export USER_ACTIVITY_API_URL=&quot;https://[USER-ACTIVITY-URL-API]&quot;export PROVISIONING_API_URL=&quot;https://[PROVISIONING-URL-API]&quot;export PUBLISH_API_URL=&quot;https://[PUBLISH-URL-API]&quot;export REDTEAM_API_URL=&quot;https://[REDTEAM-URL-API]&quot;./my_custom_client```## CLI usageSee `cyber_range --help` command line output for available parameters:```sh$ cyber_range --help(...)```## Programmatic usage### Platform initialization APIBefore starting a new simulation, the platform has to be initialized:```pythoncore_api.reset()redteam_api.reset_redteam()```### Simulation API```python# Create a simulation from a topologycore_api.create_simulation_from_topology(topology_file: str)# Create a simulation from a basebox IDcore_api.create_simulation_from_basebox(basebox_id: str)# Start the simulation, with current time (by default) or time where the VM was created (use_vm_time=True)core_api.start_simulation(id_simulation: int, use_vm_time: bool)# Pause a simulation (calls libvirt suspend API)core_api.pause_simulation(id_simulation: int)# Unpause a simulation (calls libvirt resume API)core_api.unpause_simulation(id_simulation: int)# Properly stop a simulation, by sending a shutdown signal to the operating systemscore_api.halt_simulation(id_simulation: int)# Stop a simulation through a hard resetcore_api.destroy_simulation(id_simulation: int)# Clone a simulation and create a new simulation, and return the new IDcore_api.clone_simulation(id_simulation: int) -&gt; int# Delete a simulation in databasecore_api.delete_simulation(id_simulation: int)```### Provisioning API```python# Apply provisioning configuration defined in YAML file on simulation defined in argument ID OR on machines defined in file# ``wait`` parameter defines if the function wait for task to complete or not.provisioning_execute(id_simulation: int = None,                     machines_file: str = None,                     provisioning_file: str,                     debug: bool = False,                     wait: bool = True,                     ) -&gt; Tuple[bool, str]:# Apply ansible playbooks on specified target(s):# ``wait`` parameter defines if the function wait for task to complete or not.def provisioning_ansible(id_simulation: int = None,                         machines_file: str = None,                         playbook_path: str = None,                         target_roles: List[str] = [],                         target_system_types: List[str] = [],                         target_operating_systems: List[str] = [],                         target_names: List[str] = [],                         extra_vars: str = None,                         debug: bool = False,                         wait: bool = True,                         ) -&gt; Tuple[bool, str]:# Get status on targeted simulationprovisioning_api.provisioning_status(id_simulation: int)# Get provisioning result on targeted simulationprovisioning_api.provisioning_result(id_simulation: int)```### User activity API```pythonuser_activity_api.user_activity_play(id_simulation: int, user_activity_path: str,                              debug_mode: str = 'off', speed: str = 'normal',                              user_activity_file_results: str = None)```This method makes it possible to play user activities defined in ``user activity path`` on simulation defined in ``id_simulation``.These parameters are **mandatory**.The following parameters are optional:* ``debug_mode``: This parameter has to be used for **debug** only. It corresponds to the level of verbosity of the debug traces generated during the execution of user actions:  * ``'off'``: no debug traces,  * ``'on'``:  with debug traces,  * ``'full'``: with maximum debug traces.  The default is ``'off'``. Debug traces are generated **on the server side only**.* ``speed``: This parameter affects the speed of typing keys on the keyboard and the speed of mouse movement:  * ``'slow'``: slow speed,  * ``'normal'``:  normal speed,  * ``'fast'``: fast speed.  The default is ``'normal'``.* ``user_activity_file_results``: This parameter makes it possible to get the user activity results (of user actions) in a file.  Results are stored using a json format. The file name should be absolute (``'/tmp/results.json'`` for example).  Here an example:  ```json  {    &quot;success&quot;: true,    &quot;scenario_results&quot;: [        {            &quot;name&quot;: &quot;user_activity.py&quot;,            &quot;success&quot;: true,            &quot;target&quot;: {                &quot;name&quot;: &quot;CLIENT1&quot;,                &quot;role&quot;: &quot;client&quot;,                &quot;basebox_id&quot;: 70,                &quot;ip_address&quot;: &quot;localhost&quot;,                &quot;vnc_port&quot;: 5901            },            &quot;action_packs&quot;: {                &quot;operating_system&quot;: &quot;operating_system/windows7&quot;            },            &quot;action_list&quot;: [                {                    &quot;name&quot;: &quot;open_session&quot;,                    &quot;parameters&quot;: {                        &quot;password&quot;: &quot;7h7JMc67&quot;,                        &quot;password_error&quot;: &quot;false&quot;,                        &quot;login&quot;: &quot;John&quot;                    },                    &quot;start_time&quot;: &quot;2021-03-01 12:39:25.119&quot;,                    &quot;end_time&quot;: &quot;2021-03-01 12:39:57.325&quot;,                    &quot;success&quot;: true,                    &quot;implemented&quot;: true                },                {                    &quot;name&quot;: &quot;close_session&quot;,                    &quot;parameters&quot;: {},                    &quot;start_time&quot;: &quot;2021-03-01 12:40:02.330&quot;,                    &quot;end_time&quot;: &quot;2021-03-01 12:40:09.303&quot;,                    &quot;success&quot;: true,                    &quot;implemented&quot;: true                }            ]        }    ]  }  ```Here are some examples of calling this method:```pythonuser_activity_api.user_activity_play(1, './user_activity/my_scenario') # this is the common wayuser_activity_api.user_activity_play(1, './user_activity/my_scenario', scenario_file_results='/tmp/results.json')user_activity_api.user_activity_play(1, './user_activity/my_scenario', debug_mode='full', speed='fast')```### Redteam API```pythonredteam_api.execute_scenario(attack_list: str)```This method executes sequentially each attack in list.For each attack this method displays started time and ending time (last_update).```pythonredteam_api.execute_attack_name(attack_name: str,  waiting_worker: bool = True)```This method execute one attack, selected by name.```pythondef init_knowledge(data: List[dict])```Load data into knowledge database.Example :```[  {&quot;software&quot;:    {&quot;host_ip&quot;: &quot;192.168.33.11&quot;,    &quot;software&quot;: {&quot;category&quot;: &quot;os&quot;},    &quot;credentials&quot;:[{&quot;username&quot;: &quot;Administrateur&quot;, &quot;password&quot;: &quot;123pass&quot;}]    }  }]``````pythondef attack_infos(id_attack: str)```Get status and output for attack.Example :```status = &quot;success&quot;,output = [  {  &quot;attack_session&quot;: {   &quot;idAttackSession&quot;: 1,   &quot;source&quot;: &quot;vffxlcationgreedinessb.com&quot;,   &quot;type&quot;: &quot;powershell&quot;,   &quot;identifier&quot;: &quot;d67672cb-8f64-420a-a7ba-1d33d7b7fd45&quot;,   &quot;privilege_level&quot;: 1,   &quot;idHost&quot;: 1  } }]``````pythonredteam_api.list_workers()```This method list all workers availabe in platform.List of attributes :* stability* reliability* side_effect* killchain_step : step in MITRE ATT&amp;CK killchain```json{  &quot;worker_id&quot;:&quot;1548_002_001&quot;,  &quot;name&quot;:&quot;uac_bypass&quot;,  &quot;description&quot;:&quot;Use Metasploit uac bypass&quot;,  &quot;stability&quot;:&quot;CRASH_SAFE&quot;,  &quot;reliability&quot;:&quot;ALWAYS&quot;,  &quot;side_effect&quot;:&quot;NETWORK_CONNECTION&quot;,  &quot;killchain_step&quot;:&quot;privilege_escalation&quot;,  &quot;repeatable&quot;:false}``````pythonredteam_api.list_attacks()```This method return all attack (available, successed or failed) with time information and origin.List of attributes :* idAttack : Identifier for attack action* status : Attack status (failed, success or runnable)* created_date* started_date* last_update : End time* values : Values send to the worker* output : Data generated by this attack* source: idAttack that created itHere an example :```json{  &quot;idAttack&quot;:13,  &quot;worker&quot;:  {    &quot;worker_id&quot;:&quot;1548_002_001&quot;,    &quot;name&quot;:&quot;uac_bypass&quot;,    &quot;description&quot;:&quot;Use Metasploit uac bypass&quot;,    &quot;stability&quot;:&quot;FIRST_ATTEMPT_FAIL&quot;,    &quot;reliability&quot;:&quot;ALWAYS&quot;,    &quot;side_effect&quot;:&quot;NETWORK_CONNECTION&quot;,    &quot;killchain_step&quot;:&quot;privilege_escalation&quot;,    &quot;repeatable&quot;:false    },  &quot;status&quot;:&quot;success&quot;,  &quot;created_date&quot;:&quot;2021-04-21 10:33:00&quot;,  &quot;started_date&quot;:&quot;2021-04-21 10:37:04&quot;,  &quot;last_update&quot;:&quot;2021-04-21 10:37:06&quot;,  &quot;values&quot;:&quot;{\&quot;Host.ip\&quot;: \&quot;192.168.2.101\&quot;, \&quot;AttackSession.type\&quot;: \&quot;windows/x64/meterpreter/reverse_tcp\&quot;, \&quot;AttackSession.source\&quot;: \&quot;192.168.2.66\&quot;, \&quot;AttackSession.identifier\&quot;: \&quot;1\&quot;}&quot;,  &quot;output&quot;: &quot;&quot;,  &quot;source&quot;:1}```*In progress*</longdescription>
</pkgmetadata>