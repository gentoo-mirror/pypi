<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Wordinserter============|Build Status| |image1| |image2| |image3| |image4|This module allows you to insert HTML into a Word Document, as well asallowing you to programmatically build word documents in pure Python(Python 3.x only at the moment). After running``pip install wordinserter`` you can use the ``wordinserter`` CLI toquickly generate test documents:.. code:: bash    # Download https://raw.githubusercontent.com/orf/wordinserter/master/tests/docs/table_widths.html    wordinserter table_widths.html --style=&quot;table { background-color: red }&quot;This should open Word and insert three tables, each of them styled witha red background.The library is stable and has been used to generate tens of thousands ofreports, and currently supports many features (all controlled throughHTML):-  Common tags, including tables, lists, code blocks, images,   hyperlinks, footnotes, headers, paragraphs, styles (``b`` ``i``   ``em``)-  Named bookmarks in documents via element ``id`` attributes-  A subset of CSS for elements, with more that can be easily added as   needed-  Including document-wide stylesheets while adding elements-  In-built syntax highlighting for ``&lt;pre&gt;`` and ``&lt;code&gt;`` blocks-  Supports complex merged tables, with rowspans and colspans-  Arbitrarily nested lists of differing types (bullet, numbered, roman   numerals)-  Hyperlinks to bookmarks within the document using classic links or   using Word 'fields'-  Images, with support for footnotes, 404 and embedded base64 data-uri   images-  Basic whitespace handlingThere is a `comparisondocument &lt;https://rawgit.com/orf/wordinserter/master/tests/comparison/report.html&gt;`__showing the output of WordInserter against Chrome, check it out to seewhat the library can do.API===The API is really simple to use:.. code:: python    from wordinserter import parse, insert    operations = parse(html, parser=&quot;html&quot;)    insert(operations, document=document, constants=constants)Inserting HTML into a Word document is a two step process: first theinput has to be parsed into a sequence of operations, which is then*inserted* into a Word document. This library currently only supportsinserting using the Word COM interface which means it is Windowsspecific at the moment.Below is a more complex example including starting word that will inserta representation of the HTML code into the new word document, includingthe image, caption and list... code:: python    from wordinserter import insert, parse    from comtypes.client import CreateObject    # This opens Microsoft Word and creates a new document.    word = CreateObject(&quot;Word.Application&quot;)    word.Visible = True # Don't set this to True in production!    document = word.Documents.Add()    from comtypes.gen import Word as constants    html = &quot;&quot;&quot;    &lt;h3&gt;This is a title&lt;/h3&gt;    &lt;p&gt;&lt;img src=&quot;http://placehold.it/150x150&quot; alt=&quot;I go below the image as a caption&quot;&gt;&lt;/p&gt;    &lt;p&gt;&lt;i&gt;This is &lt;b&gt;some&lt;/b&gt; text&lt;/i&gt; in a &lt;a href=&quot;http://google.com&quot;&gt;paragraph&lt;/a&gt;&lt;/p&gt;    &lt;ul&gt;        &lt;li&gt;Boo! I am a &lt;b&gt;list&lt;/b&gt;&lt;/li&gt;    &lt;/ul&gt;    &quot;&quot;&quot;    # Parse the HTML into a list of operations then feed them into insert.    operations = parse(html, parser=&quot;html&quot;)    insert(operations, document=document, constants=constants)What's with the constants part? Wordinserter is agnostic to the COMlibrary you use. Each library exposes constant values that are needed byWordinserter in a different way: the pywin32 library exposes it aswin32com.client.constants whereas the comtypes library exposes them as amodule that resides in comtypes.gen. Rather than guess which one you areusing Wordinserter requires you to pass the right one in explicitly. Ifyou need to mix different constant groups you can use the``CombinedConstants`` class:.. code:: python    from wordinserter.utils import CombinedConstants    from comtypes.gen import Word as word_constants    from comtypes.gen import Office as office_constants    constants = CombinedConstants(word_constants, office_constants)Install~~~~~~~Get it `from PyPi here &lt;https://pypi.python.org/pypi/wordinserter&gt;`__,using ``pip install wordinserter``. This has been built with word 2010and 2013, older versions may produce different results.Supported Operations--------------------WordInserter currently supports a range of different operations,including code blocks, font size/colors, images, hyperlinks, numberedand bullet lists, table borders and padding.Stylesheets?^^^^^^^^^^^^Wordinserter has support for stylesheets! Every element can be styledwith inline styles (``style='whatever'``) but this gets tedious atscale. You can pass CSS stylesheets to the ``parse`` function:.. code:: python    html = &quot;&lt;p class=&quot;mystyle&quot;&gt;Hello Word&lt;/p&gt;&quot;    stylesheet = &quot;&quot;&quot;    .mystyle {        color: red;    }    &quot;&quot;&quot;    operations = parse(html, parser=&quot;html&quot;, stylesheets=[stylesheet])    insert(operations, document=document, constants=constants)This will render &quot;Hello Word&quot; in red. Inheritance is respected, so childstyles override parent ones.Why aren't my lists showing up properly?^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^There are two ways people write lists in HTML, one with each sub-list asa child of the parent list, or as a child of a list element. Below is asample of the two different ways, both of which display correctly in allbrowsers:.. code:: html    &lt;ol&gt;        &lt;li&gt;            I'm a list element        &lt;/li&gt;        &lt;ul&gt;            &lt;li&gt;I'm a sub list!&lt;/li&gt;        &lt;/ul&gt;    &lt;/ol&gt;.. code:: html    &lt;ol&gt;        &lt;li&gt;            I'm a list element            &lt;ul&gt;                &lt;li&gt;I'm a sub list!&lt;/li&gt;            &lt;/ul&gt;        &lt;/li&gt;    &lt;/ol&gt;The second way is correct according to the HTML specification. ``lxml``parses the first structure incorrectly in some cases, which leads toweird list behavior. There isn't much this library can do about that, somake sure your lists are in the second format.One other thing to note: Word does not support lists with mixedlist-types on a single level. i.e this HTML will render incorrectly:.. code:: html    &lt;ol&gt;        &lt;li&gt;            &lt;ul&gt;&lt;li&gt;Unordered List On Level #1&lt;/li&gt;&lt;/ul&gt;            &lt;ol&gt;&lt;li&gt;Ordered List On Level #1&lt;/li&gt;&lt;/ul&gt;        &lt;/li&gt;    &lt;/ol&gt;.. |Build Status| image:: https://travis-ci.org/orf/wordinserter.svg?branch=master   :target: https://travis-ci.org/orf/wordinserter.. |image1| image:: https://img.shields.io/pypi/v/wordinserter.svg   :target: https://pypi.python.org/pypi/wordinserter.. |image2| image:: https://img.shields.io/pypi/l/wordinserter.svg   :target: https://pypi.python.org/pypi/wordinserter.. |image3| image:: https://img.shields.io/pypi/format/wordinserter.svg   :target: https://pypi.python.org/pypi/wordinserter.. |image4| image:: https://img.shields.io/pypi/pyversions/wordinserter.svg   :target: https://pypi.python.org/pypi/wordinserter</longdescription>
</pkgmetadata>