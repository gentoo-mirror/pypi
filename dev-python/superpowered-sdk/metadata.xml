<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Superpowered AI Python SDKThis Python SDK provides an interface to interact with Superpowered AI, a knowledge base as a service for LLM applications. The SDK allows you to create, update, and delete knowledge bases, as well as directly query a knowledge base. You can also create and delete documents in a knowledge base.### InstallationTo install the Superpowered AI Python SDK you can use pip```bashpip install superpowered-sdk```### SetupSet the following environmental variables in a terminal```bashexport SUPERPOWERED_API_KEY_ID=&quot;INSERT_API_KEY_ID_HERE&quot;export SUPERPOWERED_API_KEY_SECRET=&quot;INSERT_API_KEY_SECRET_HERE&quot;```Import all from superpowered```pythonfrom superpowered import *```### Creating a Knowledge BaseTo create a new knowledge base, use the `create_knowledge_base()` function:```pythoncreate_knowledge_base(title=&quot;My Knowledge Base&quot;, supp_id=&quot;123&quot;, description=&quot;A sample knowledge base&quot;)```### Listing Knowledge BasesTo list all knowledge bases in your account, use the `list_knowledge_bases()` function:```pythonlist_knowledge_bases(verbose=True)```### Adding a Document to a Knowledge BaseTo add a document to a knowledge base, use the `add_document_to_kb()` function. Note that for this function your document needs to already be converted to a string. If your content is in a file type that we support (pdf, txt, docx, or md), you can directly upload the file using `add_file_to_kb()` instead of converting it to a string first.```pythonadd_document_to_kb(kb_title=&quot;My Knowledge Base&quot;, content=&quot;This is a sample document.&quot;, title=&quot;Sample Document&quot;)```Also note that you can't have duplicate documents (content or title) in the same knowledge base, as doing so would lead to suboptimal querying performance.### Adding a File to a Knowledge BaseTo add a file (pdf, txt, docx, or md) to a knowledge base, use the `add_file_to_kb()` function:```pythonadd_file_to_kb(kb_title=&quot;My Knowledge Base&quot;, file_path=&quot;path/to/your/file.pdf&quot;)```### Adding All Files in a Directory to a Knowledge BaseTo add all supported files in a directory to a knowledge base, use the `add_directory_to_kb()` function:```pythonadd_directory_to_kb(kb_title=&quot;My Knowledge Base&quot;, directory_path=&quot;path/to/your/directory&quot;)```### Adding the Contents of a Web Page to a Knowledge BaseTo scrape the text from a web page and upload it to a Knowledge Base, you can use the `add_url_to_kb()` function:```pythonadd_url_to_kb(kb_title=&quot;My Knowledge Base&quot;, url=&quot;https://example.com&quot;)```Note that this function will not scrape any text that requires Javascript rendering, and it also won't work for any web page that requires a login.### Querying a Knowledge BaseTo query a knowledge base, use the `query()` function. The function accepts several parameters to customize the query:- `query`: The query string you want to search for in the knowledge bases.- `kb_titles`: A list of knowledge base titles to search in. This allows you to search in specific knowledge bases by providing their titles.- `kb_ids`: A list of knowledge base IDs to search in. This allows you to search in specific knowledge bases by providing their IDs.- `retriever_top_k`: The number of top documents to retrieve in the first stage of the retrieval pipeline. This parameter controls how many documents are initially retrieved before reranking.- `reranker_top_k`: The number of documents to return from the reranking step. This must be less than or equal to the retriever_top_k.- `extract_and_summarize`: A boolean value indicating whether to extract and summarize the results. If set to True, the API will return LLM-summarized results from the top documents.Here's an example of querying a knowledge base with all the available parameters:```pythonresults = query(    query=&quot;What is the capital of France?&quot;,    kb_titles=[&quot;My Knowledge Base&quot;],    retriever_top_k=50,    reranker_top_k=10,    extract_and_summarize=True)# print the summary - only works if `extract_and_summarize` is set to `True`print (results[&quot;summary&quot;])# print the top resultsprint ([result[&quot;content&quot;] for result in results[&quot;ranked_results&quot;]])```You can also query multiple knowledge bases by providing a list of knowledge base titles or IDs:```pythonresults = query(    query=&quot;What is the capital of France?&quot;,    kb_titles=[&quot;My Knowledge Base&quot;, &quot;Another Knowledge Base&quot;],    retriever_top_k=50,    reranker_top_k=10,    extract_and_summarize=True)```### KnowledgeBase and KnowledgeBaseDocument classesIn addition to the convenience functions, you can also use the `KnowledgeBase` and `KnowledgeBaseDocument` classes for more advanced usage. For example, you can create a `KnowledgeBase` object and then add documents to it:```pythonkb = KnowledgeBase(title=&quot;My Knowledge Base&quot;)kb.create()kb.add_document(content=&quot;This is a sample document.&quot;, title=&quot;Sample Document&quot;)```You can also delete a knowledge base or a document using the `delete()` method:```pythonkb.delete()document.delete()```For more information on the available methods and properties, please refer to the SDK code.</longdescription>
</pkgmetadata>