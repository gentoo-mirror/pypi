<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========================Python Languauge Utilities==========================This library provides utilities to use features of other languages in Python... image:: https://badge.fury.io/py/pythonlangutil.svg    :target: http://badge.fury.io/py/pythonlangutil    .. image:: https://travis-ci.org/ehsan-keshavarzian/pythonlangutil.svg?branch=master        :target: https://travis-ci.org/ehsan-keshavarzian/pythonlangutilYou can find a functional example of each feature in the examples directory. Test cases in tests directory run on top of these examples to ensure the functionality.Access Modifiers----------------To identify a variable as private:::   from pythonlangutil.access_modifiers import private_variable       class PrivateVariableTest(object):      def __init__(self):          self.id = &quot;123&quot;                @private_variable('id')      def __setattr__(self, *args, **kwargs):          return object.__setattr__(self, *args, **kwargs)            def insider(self):          self.id = &quot;321&quot;          To identify a method as private:::   from pythonlangutil.access_modifiers import private_function       class PrivateFunctionTest(object):      def __init__(self):          pass            @private_function      def private_method(self):          return 'called from inside my own class'            def insider(self):          return self.private_method()    Creating Overloads------------------To create overloads:::   from pythonlangutil.overload import Overload, signature   class OverloadTest():       def __init__(self):           self.male_pref = &quot;Mr. %s&quot;           self.female_pref = &quot;Ms. %s&quot;           self.general_pref = &quot;Dear %s&quot;              @Overload       @signature(&quot;str&quot;, &quot;bool&quot;)       def my_method(self, name, male):           if male:               return self.male_pref % name            return self.female_pref % name          @my_method.overload       @signature(&quot;str&quot;)       def my_method(self, name):           return self.general_pref % name              @my_method.overload       @signature(&quot;int&quot;, &quot;str&quot;)       def my_method(self, times, name):           return &quot;\n&quot;.join([self.general_pref % name for i in range(times)])Using Singleton Model---------------------It prevents the instantiation of the class. The only instance of the class will be accessible throughget_instance() method which will be added to class automatically.To use singleton:::   from pythonlangutil.singleton import Singleton   @Singleton()   class SingletonTest():       def __init__(self):           pass</longdescription>
</pkgmetadata>