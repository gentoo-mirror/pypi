<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quick StartCompile Solidity contracts.## Dependencies- [python3](https://www.python.org/downloads) version 3.8 up to 3.11.## Installation### via `pip`You can install the latest release via [`pip`](https://pypi.org/project/pip/):```bashpip install ape-solidity```### via `setuptools`You can clone the repository and use [`setuptools`](https://github.com/pypa/setuptools) for the most up-to-date version:```bashgit clone https://github.com/ApeWorX/ape-solidity.gitcd ape-soliditypython3 setup.py install```## Quick UsageIn your project, make sure you have a `contracts/` directory containing Solidity files (`.sol`).Then, while this plugin is installed, compile your contracts:```bashape compile```The byte-code and ABI for your contracts should now exist in a `__local__.json` file in a `.build/` directory.### Dependency MappingTo configure import remapping, use your project's `ape-config.yaml` file:```yamlsolidity:  import_remapping:    - &quot;@openzeppelin=path/to/open_zeppelin/contracts&quot;```If you are using the `dependencies:` key in your `ape-config.yaml`, `ape` can automaticallysearch those dependencies for the path.```yamldependencies:  - name: OpenZeppelin    github: OpenZeppelin/openzeppelin-contracts    version: 4.4.2solidity:  import_remapping:    - &quot;@openzeppelin=OpenZeppelin/4.4.2&quot;```Once you have your dependencies configured, you can import packages using your import keys:```solidityimport &quot;@openzeppelin/token/ERC721/ERC721.sol&quot;;```### Library LinkingTo compile contracts that use libraries, you need to add the libraries first.Use the `add_library()` method from the `ape-solidity` compiler class to add the library.A typical flow is:1. Deploy the library.2. Call `add_library()` using the Solidity compiler plugin, which will also re-compile contracts that need the library.3. Deploy and use contracts that require the library.For example:```pythonimport pytest@pytest.fixturedef contract(accounts, project, compilers):    # Deploy the library.    account = accounts[0]    library = project.Set.deploy(sender=account)        # Add the library to Solidity (re-compiles contracts that use the library).    compilers.solidity.add_library(library)    # Deploy the contract that uses the library.    return project.C.deploy(sender=account)```### Compiler SettingsWhen using `ape-solidity`, your project's manifest's compiler settings will include standard JSON output.You should have one listed `compiler` per `solc` version used in your project.You can view your current project manifest, including the compiler settings, by doing:```pythonfrom ape import projectmanifest = project.extract_manifest()for compiler_entry in manifest.compilers:    print(compiler_entry.version)    print(compiler_entry.settings)```**NOTE**: These are the settings used during contract verification when using the [Etherscan plugin](https://github.com/ApeWorX/ape-etherscan).</longdescription>
</pkgmetadata>