<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Strawberry GraphQL Django integration[![CI](https://github.com/la4de/strawberry-graphql-django/actions/workflows/main.yml/badge.svg)](https://github.com/la4de/strawberry-graphql-django/actions/workflows/main.yml)[![PyPI](https://img.shields.io/pypi/v/strawberry-graphql-django)](https://pypi.org/project/strawberry-graphql-django/)[![Downloads](https://pepy.tech/badge/strawberry-graphql-django)](https://pepy.tech/project/strawberry-graphql-django)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/strawberry-graphql-django)This package provides powerful tools to generate GraphQL types, queries, mutations and resolvers from Django models.Installing `strawberry-graphql-django` package from the python package repository.```shellpip install strawberry-graphql-django```Full documentation is available under [docs](https://strawberry-graphql.github.io/strawberry-graphql-django/) github folder.* [x] GraphQL type generation from models* [x] Filtering, pagination and ordering* [x] Basic create, retrieve, update and delete (CRUD) types and mutations* [x] Basic Django auth support, current user query, login and logout mutations* [x] Django sync and async views* [x] Unit test integration## Basic Usage```python# models.pyfrom django.db import modelsclass Fruit(models.Model):    &quot;&quot;&quot;A tasty treat&quot;&quot;&quot;    name = models.CharField(max_length=20)    color = models.ForeignKey('Color', blank=True, null=True,            related_name='fruits', on_delete=models.CASCADE)class Color(models.Model):    name = models.CharField(        max_length=20,        help_text=&quot;field description&quot;,    )``````python# types.pyimport strawberryfrom strawberry import autofrom typing import Listfrom . import models@strawberry.django.type(models.Fruit)class Fruit:    id: auto    name: auto    color: 'Color'@strawberry.django.type(models.Color)class Color:    id: auto    name: auto    fruits: List[Fruit]``````python# schema.pyimport strawberryfrom typing import Listfrom .types import Fruit@strawberry.typeclass Query:    fruits: List[Fruit] = strawberry.django.field()schema = strawberry.Schema(query=Query)```Code above generates following schema.```schema&quot;&quot;&quot;A tasty treat&quot;&quot;&quot;type Fruit {  id: ID!  name: String!  color: Color}type Color {  id: ID!  &quot;&quot;&quot;  field description  &quot;&quot;&quot;  name: String!  fruits: [Fruit!]}type Query {  fruits: [Fruit!]!}``````python# urls.pyfrom django.urls import include, pathfrom strawberry.django.views import AsyncGraphQLViewfrom .schema import schemaurlpatterns = [    path('graphql', AsyncGraphQLView.as_view(schema=schema)),]```</longdescription>
</pkgmetadata>