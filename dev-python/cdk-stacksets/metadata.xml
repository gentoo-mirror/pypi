<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CDK StackSets Construct Library&lt;!--BEGIN STABILITY BANNER--&gt;---![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)&gt; The APIs of higher level constructs in this module are experimental and under active development.&gt; They are subject to non-backward compatible changes or removal in any future version. These are&gt; not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be&gt; announced in the release notes. This means that while you may use them, you may need to update&gt; your source code when upgrading to a newer version of this package.---&lt;!--END STABILITY BANNER--&gt;This construct library allows you to define AWS CloudFormation StackSets.```pythonstack = Stack()stack_set_stack = StackSetStack(stack, &quot;MyStackSet&quot;)StackSet(stack, &quot;StackSet&quot;,    target=StackSetTarget.from_accounts(        regions=[&quot;us-east-1&quot;],        accounts=[&quot;11111111111&quot;],        parameter_overrides={            &quot;SomeParam&quot;: &quot;overrideValue&quot;        }    ),    template=StackSetTemplate.from_stack_set_stack(stack_set_stack))```## Installing### TypeScript/JavaScript```bashnpm install cdk-stacksets```### Python```bashpip install cdk-stacksets```### Java```xml// add this to your pom.xml&lt;dependency&gt;    &lt;groupId&gt;io.github.cdklabs&lt;/groupId&gt;    &lt;artifactId&gt;cdk-stacksets&lt;/artifactId&gt;    &lt;version&gt;0.0.0&lt;/version&gt; // replace with version&lt;/dependency&gt;```### .NET```bashdotnet add package CdklabsCdkStacksets --version X.X.X```### Go```bashgo get cdk-stacksets-go```## Creating a StackSet StackStackSets allow you to deploy a single CloudFormation template across multiple AWS accounts and regions.Typically when creating a CDK Stack that will be deployed across multiple environments, the CDK willsynthesize separate Stack templates for each environment (account/region combination). Because of theway that StackSets work, StackSet Stacks behave differently. For Stacks that will be deployed via StackSetsa single Stack is defined and synthesized. Any environmental differences must be encoded using Parameters.A special class was created to handle the uniqueness of the StackSet Stack.You declare a `StackSetStack` the same way that you declare a normal `Stack`, but thereare a couple of differences. `StackSetStack`s have a couple of special requirements/limitations whencompared to Stacks.*Requirements** Must be created in the scope of a `Stack`* Must be environment agnostic*Limitations** Do not support assetsOnce you create a `StackSetStack` you can create resources within the stack.```pythonstack = Stack()stack_set_stack = StackSetStack(stack, &quot;StackSet&quot;)iam.Role(stack_set_stack, &quot;MyRole&quot;,    assumed_by=iam.ServicePrincipal(&quot;myservice.amazonaws.com&quot;))```Or```pythonclass MyStackSet(StackSetStack):    def __init__(self, scope, id):        super().__init__(scope, id)        iam.Role(self, &quot;MyRole&quot;,            assumed_by=iam.ServicePrincipal(&quot;myservice.amazonaws.com&quot;)        )```## Creating a StackSetAWS CloudFormation StackSets enable you to create, update, or delete stacks across multiple accounts and AWS Regionswith a single operation. Using an administrator account, you define and manage an AWS CloudFormation template, and usethe template as the basis for provisioning stacks into selected target accounts across specific AWS Regions.There are two methods for defining *where* the StackSet should be deployed. You can either define individual accounts, oryou can define AWS Organizations organizational units.### Deploying to individual accountsDeploying to individual accounts requires you to specify the account ids. If you want to later deploy to additional accounts,or remove the stackset from accounts, this has to be done by adding/removing the account id from the list.```pythonstack = Stack()stack_set_stack = StackSetStack(stack, &quot;MyStackSet&quot;)StackSet(stack, &quot;StackSet&quot;,    target=StackSetTarget.from_accounts(        regions=[&quot;us-east-1&quot;],        accounts=[&quot;11111111111&quot;]    ),    template=StackSetTemplate.from_stack_set_stack(stack_set_stack))```### Deploying to organizational unitsAWS Organizations is an AWS service that enables you to centrally manage and govern multiple accounts.AWS Organizations allows you to define organizational units (OUs) which are logical groupings of AWS accounts.OUs enable you to organize your accounts into a hierarchy and make it easier for you to apply management controls.For a deep dive on OU best practices you can read the [Best Practices for Organizational Units with AWS Organizations](https://aws.amazon.com/blogs/mt/best-practices-for-organizational-units-with-aws-organizations/) blog post.You can either specify the organization itself, or individual OUs. By default the StackSet will be deployedto all AWS accounts that are part of the OU. If the OU is nested it will also deploy to all accountsthat are part of any nested OUs.For example, given the following org hierarchy```mermaidgraph TD  root--&gt;ou-1;  root--&gt;ou-2;  ou-1--&gt;ou-3;  ou-1--&gt;ou-4;  ou-3--&gt;account-1;  ou-3--&gt;account-2;  ou-4--&gt;account-4;  ou-2--&gt;account-3;  ou-2--&gt;account-5;```You could deploy to all AWS accounts under OUs `ou-1`, `ou-3`, `ou-4` by specifying the following:```pythonstack = Stack()stack_set_stack = StackSetStack(stack, &quot;MyStackSet&quot;)StackSet(stack, &quot;StackSet&quot;,    target=StackSetTarget.from_organizational_units(        regions=[&quot;us-east-1&quot;],        organizational_units=[&quot;ou-1&quot;]    ),    template=StackSetTemplate.from_stack_set_stack(stack_set_stack))```This would deploy the StackSet to `account-1`, `account-2`, `account-4`.If there are specific AWS accounts that are part of the specified OU hierarchy that you would liketo exclude, this can be done by specifying `excludeAccounts`.```pythonstack = Stack()stack_set_stack = StackSetStack(stack, &quot;MyStackSet&quot;)StackSet(stack, &quot;StackSet&quot;,    target=StackSetTarget.from_organizational_units(        regions=[&quot;us-east-1&quot;],        organizational_units=[&quot;ou-1&quot;],        exclude_accounts=[&quot;account-2&quot;]    ),    template=StackSetTemplate.from_stack_set_stack(stack_set_stack))```This would deploy only to `account-1` &amp; `account-4`, and would exclude `account-2`.Sometimes you might have individual accounts that you would like to deploy the StackSet to, butyou do not want to include the entire OU. To do that you can specify `additionalAccounts`.```pythonstack = Stack()stack_set_stack = StackSetStack(stack, &quot;MyStackSet&quot;)StackSet(stack, &quot;StackSet&quot;,    target=StackSetTarget.from_organizational_units(        regions=[&quot;us-east-1&quot;],        organizational_units=[&quot;ou-1&quot;],        additional_accounts=[&quot;account-5&quot;]    ),    template=StackSetTemplate.from_stack_set_stack(stack_set_stack))```This would deploy the StackSet to `account-1`, `account-2`, `account-4` &amp; `account-5`.### StackSet permissionsThere are two modes for managing StackSet permissions (i.e. *where* StackSets can deploy &amp; *what* resources they can create).A StackSet can either be `Service Managed` or `Self Managed`.You can control this through the `deploymentType` parameter.#### Service ManagedWhen a StackSet is service managed, the permissions are managed by AWS Organizations. This allows the StackSet to deploy the Stack to *any*account within the organization. In addition, the StackSet will be able to create *any* type of resource.```pythonstack = Stack()stack_set_stack = StackSetStack(stack, &quot;MyStackSet&quot;)StackSet(stack, &quot;StackSet&quot;,    target=StackSetTarget.from_organizational_units(        regions=[&quot;us-east-1&quot;],        organizational_units=[&quot;ou-1&quot;]    ),    deployment_type=DeploymentType.service_managed(),    template=StackSetTemplate.from_stack_set_stack(stack_set_stack))```When you specify `serviceManaged` deployment type, automatic deployments are enabled by default.Automatic deployments allow the StackSet to be automatically deployed to or deleted fromAWS accounts when they are added or removed from the specified organizational units.## Deploying StackSets using CDK PipelinesYou can also deploy StackSets using [CDK Pipelines](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.pipelines-readme.html)Below is an example of a Pipeline that deploys from a central account. It alsodefines separate stages for each &quot;environment&quot; so that you can first test outthe stackset in pre-prod environments.This would be an automated way of deploying the bootstrap stack described in[this blogpost](https://aws.amazon.com/blogs/mt/bootstrapping-multiple-aws-accounts-for-aws-cdk-using-cloudformation-stacksets/).```python# app: Appclass BootstrapStage(Stage):    def __init__(self, scope, id, *, initialBootstrapTarget, stacksetName=None, env=None, outdir=None, stageName=None):        super().__init__(scope, id, initialBootstrapTarget=initialBootstrapTarget, stacksetName=stacksetName, env=env, outdir=outdir, stageName=stageName)        stack = Stack(self, &quot;BootstrapStackSet&quot;)        bootstrap = Bootstrap(stack, &quot;CDKToolkit&quot;)        stack_set = StackSet(stack, &quot;StackSet&quot;,            template=StackSetTemplate.from_stack_set_stack(bootstrap),            target=initial_bootstrap_target,            capabilities=[Capability.NAMED_IAM],            managed_execution=True,            stack_set_name=stackset_name,            deployment_type=DeploymentType.service_managed(                delegated_admin=True,                auto_deploy_enabled=True,                auto_deploy_retain_stacks=False            ),            operation_preferences=OperationPreferences(                region_concurrency_type=RegionConcurrencyType.PARALLEL,                max_concurrent_percentage=100,                failure_tolerance_percentage=99            )        )pipeline = pipelines.CodePipeline(self, &quot;BootstrapPipeline&quot;,    synth=pipelines.ShellStep(&quot;Synth&quot;,        commands=[&quot;yarn install --frozen-lockfile&quot;, &quot;npx cdk synth&quot;        ],        input=pipelines.CodePipelineSource.connection(&quot;myorg/myrepo&quot;, &quot;main&quot;,            connection_arn=&quot;arn:aws:codestar-connections:us-east-2:111111111111:connection/ca65d487-ca6e-41cc-aab2-645db37fdb2b&quot;        )    ),    self_mutation=True)regions = [&quot;us-east-1&quot;, &quot;us-east-2&quot;, &quot;us-west-2&quot;, &quot;eu-west-2&quot;, &quot;eu-west-1&quot;, &quot;ap-south-1&quot;, &quot;ap-southeast-1&quot;]pipeline.add_stage(    BootstrapStage(app, &quot;DevBootstrap&quot;,        env=Environment(            region=&quot;us-east-1&quot;,            account=&quot;111111111111&quot;        ),        stackset_name=&quot;CDKToolkit-dev&quot;,        initial_bootstrap_target=StackSetTarget.from_organizational_units(            regions=regions,            organizational_units=[&quot;ou-hrza-ar333427&quot;]        )    ))pipeline.add_stage(    BootstrapStage(app, &quot;ProdBootstrap&quot;,        env=Environment(            region=&quot;us-east-1&quot;,            account=&quot;111111111111&quot;        ),        stackset_name=&quot;CDKToolkit-prd&quot;,        initial_bootstrap_target=StackSetTarget.from_organizational_units(            regions=regions,            organizational_units=[&quot;ou-hrza-bb999427&quot;, &quot;ou-hraa-ar111127&quot;]        )    ))```</longdescription>
</pkgmetadata>