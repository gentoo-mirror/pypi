<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FusionLab&lt;p align=&quot;center&quot;&gt;    &lt;br&gt;    &lt;img src=&quot;assets/imgs/fusionlab_banner.png&quot; width=&quot;400&quot;/&gt;    &lt;br&gt;&lt;p&gt;FusionLab is an open-source frameworks built for Deep Learning research written in PyTorch and Tensorflow. The code is easy to read and modify especially for newbie. Feel free to send pull requests :D* [Installation](#Installation)* [How to use](#How-to-use)* [Encoders](#Encoders)* [Losses](#Losses)* [Segmentation](#Segmentation)* [Acknowledgements](#Acknowledgements)## Installation### With pip```bashpip install fusionlab```#### For Mac M1 chip usersRequirements:* Apple Mac with M1 chips* MacOS &gt; 12.6 (Monterey)Following steps1. Clone this repo```bashgit clone https://github.com/taipingeric/fusionlab.gitcd fusionlab```2. (remove anaconda first)3. Install [Miniconda](https://docs.conda.io/en/latest/miniconda.html)   1. Miniconda3 macOS Apple M1 64-bit pkg   2. Miniconda3 macOS Apple M1 64-bit bash4. Install the xcode-select command-line```bashxcode-select --install```5. Deactivate the base environment```bashconda deactivate ```6. Create conda environment using [config](./configs/tf-apple-m1-conda.yaml)```bashconda env create -f ./configs/tf-apple-m1-conda.yaml -n fusionlab```7. Replace [requirements.txt](requirements.txt) with [requirements-m1.txt](configs/requirements-m1.txt)8. Install by pip```bashpip install -r requirements-m1.txt```ref: [https://github.com/jeffheaton/t81_558_deep_learning/install/tensorflow-install-conda-mac-metal-jan-2023.ipynb](https://github.com/jeffheaton/t81_558_deep_learning/install/tensorflow-install-conda-mac-metal-jan-2023.ipynb)[video](https://www.youtube.com/watch?v=5DgWvU0p2bk) ## How to use```pythonimport fusionlab as fl# PyTorchencoder = fl.encoders.VGG16()# Tensorflowencoder = fl.encoders.TFVGG16()```## Encoders[encoder list](fusionlab/encoders/README.md)## Losses[Loss func list](fusionlab/losses/README.md)* Dice Loss* Tversky Loss* IoU Loss```python# Dice Loss (Multiclass)import fusionlab as fl# PyTorchimport torchloss_fn = fl.losses.DiceLoss(&quot;multiclass&quot;, from_logits=True)pred = torch.tensor([[   [1., 2., 3., 4.],   [2., 6., 4., 4.],   [9., 6., 3., 4.]]]).view(1, 3, 4) # (BS, *, C)true = torch.tensor([[2, 1, 0, 2]]).view(1, 4) # (BS, *)loss = loss_fn(pred, true)# Tensorflowimport tensorflow as tfloss_fn = fl.losses.TFDiceLoss(&quot;multiclass&quot;, from_logits=True)pred = tf.convert_to_tensor([[   [1., 2., 3.],   [2., 6., 4.],   [9., 6., 3.],   [4., 4., 4.],]]) # (BS, *, C)true = tf.convert_to_tensor([[2, 1, 0, 2]]) # (BS, *)loss = loss_fn(true, pred)# Dice Loss (Binary)# PyTorchimport torchpred = torch.tensor([0.4, 0.2, 0.3, 0.5]).reshape(1, 1, 2, 2) # (BS, 1, *)true = torch.tensor([0, 1, 0, 1]).reshape(1, 2, 2) # (BS, *)loss_fn = fl.losses.IoULoss(&quot;binary&quot;, from_logits=True)loss = loss_fn(pred, true)# Tensorflowpred = tf.convert_to_tensor([0.4, 0.2, 0.3, 0.5])pred = tf.reshape(pred, [1, 2, 2, 1]) # (BS, *, 1)true = tf.convert_to_tensor([0, 1, 0, 1])true = tf.reshape(true, [1, 2, 2]) # (BS, *)loss_fn = fl.losses.TFIoULoss(&quot;binary&quot;, from_logits=True)loss = loss_fn(true, pred)```## Segmentation```pythonimport fusionlab as fl# PyTorch UNetunet = fl.segmentation.UNet(cin=3, num_cls=10, base_dim=64)# Tensorflow UNetimport tensorflow as tf# Binary Segmentationunet = tf.keras.Sequential([   fl.segmentation.TFUNet(num_cls=1, base_dim=64),   tf.keras.layers.Activation(tf.nn.sigmoid),])unet.compile(loss=fl.losses.TFDiceLoss(&quot;binary&quot;))# Multiclass Segmentationunet = tf.keras.Sequential([   fl.segmentation.TFUNet(num_cls=10, base_dim=64),   tf.keras.layers.Activation(tf.nn.softmax),])unet.compile(loss=fl.losses.TFDiceLoss(&quot;multiclass&quot;))```[Segmentation model list](fusionlab/segmentation/README.md)* UNet, TFUNet* ResUNet, TFResUNet* UNet2plus, TFUNet2plus## Acknowledgements* [BloodAxe/pytorch-toolbelt](https://github.com/BloodAxe/pytorch-toolbelt)</longdescription>
</pkgmetadata>