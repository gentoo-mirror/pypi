<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub Build Status](https://img.shields.io/github/actions/workflow/status/limx0/betfair_parser/build.yml?branch=main&amp;logo=github)](https://github.com/limx0/betfair_parser/actions)[![PyPI](https://img.shields.io/pypi/v/betfair_parser.svg?style=flat)](https://pypi.org/project/betfair_parser/)![Python Version](https://img.shields.io/pypi/pyversions/betfair_parser)![License](https://img.shields.io/github/license/limx0/betfair_parser)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# betfair_parserA simple and fast betfair parser. Why you might like this library:- Complete: All betfair (non-vendor) client API included- Conventions: The API strictly follows pythonic naming conventions- Consistency: All data is type checked, API requests as well as responses- Comfort: All betfair enums and type definitions are included, to support IDE syntax completion- Clear errors: API errors don't just throw cryptic codes, but contain documentation about that error- Compatible: Use it with any HTTP library you like, including async libraries- Cheetah fast: Thanks to the magic of [msgspec](https://github.com/jcrist/msgspec), megabytes of inputparse in milliseconds## Usage`betfair_parser` is built out of API building blocks, that can be used with any HTTP clientyou like. All API operations provide `.headers()`, `.body()` and a `.parse_response()` method.The [`client`](https://github.com/limx0/betfair_parser/blob/main/betfair_parser/client.py) modulecontains a sample, minimalistic client implementation. It may be used as is with any `requests`-compatibleHTTP client or serve as an example, how to integrate `betfair_parser` with other HTTP clients.```pythonimport requestsfrom betfair_parser import clientfrom betfair_parser.spec import accounts, bettingsession = requests.Session()  # or anything similar like httpx.Client()client.login(session, &quot;username&quot;, &quot;password&quot;, &quot;app_key&quot;)client.request(session, accounts.operations.GetAccountFunds.with_params())# AccountFundsResponse(available_to_bet_balance=10000.0, exposure=0.0,# retained_commission=0.0, exposure_limit=-10000.0, discount_rate=0.0,# points_balance=10, wallet=&lt;Wallet.UK: 'UK'&gt;)# Request with an invalid wallet parameter:client.request(session, accounts.operations.GetAccountFunds.with_params(wallet=&quot;AUS&quot;))# &gt;&gt;&gt; AccountAPINGException: INVALID_PARAMETERS: Problem parsing the parameters,#     or a mandatory parameter was not foundclient.request(session, betting.operations.ListCurrentOrders.with_params())# CurrentOrderSummaryReport(current_orders=[], more_available=False)# Support for other countriesfrom betfair_parser.endpoints import endpointendpoint_cfg = endpoint(&quot;ITA&quot;)  # alpha-3 codeclient.login(session, &quot;username&quot;, &quot;password&quot;, &quot;app_key&quot;, endpoints=endpoint_cfg)```See [`test_live.py`](https://github.com/limx0/betfair_parser/blob/main/tests/integration/test_live.py)for more API call examples.## ReleasingReleases are published automatically when a tag is pushed to GitHub.```bash# Set next version numberexport RELEASE=x.x.x# Create tagsgit commit --allow-empty -m &quot;Release $RELEASE&quot;git tag -a $RELEASE -m &quot;Version $RELEASE&quot;# Pushgit push upstream --tags```</longdescription>
</pkgmetadata>