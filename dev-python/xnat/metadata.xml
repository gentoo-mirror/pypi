<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>XNATPY======A new XNAT client that exposes XNAT objects/functions as pythonobjects/functions. The aim is to abstract as much of the REST APIaway as possible and make xnatpy feel like native Python code. Thisreduces the need for the user to know the details of the REST API.Low level functionality can still be accessed via the connection objectwhich has `get`, `head`, `put`, `post`, `delete` methods for moredirectly calling the REST API.Disclaimer----------This is NOT pyxnat, but a new module which uses adifferent philosophy for the user interface. Pyxnat is located at:`https://pythonhosted.org/pyxnat/ &lt;https://pythonhosted.org/pyxnat/&gt;`_Getting started---------------To install just use the setup.py normally::  python setup.py installor install directly using pip::  pip install xnatTo get started, create a connection and start querying::  &gt;&gt;&gt; import xnat  &gt;&gt;&gt; session = xnat.connect('https://central.xnat.org', user=&quot;&quot;, password=&quot;&quot;)  &gt;&gt;&gt; session.projects['Sample_DICOM'].subjectswhen using IPython most functionality can be figured out by looking at theavailable attributes/methods of the returned objects.Credentials-----------To store credentials this module uses the .netrc file. This file contains logininformation and should be accessible ONLY by the user (if not, the module withthrow an error to let you know the file is unsafe).Documentation-------------The official documentation can be found at `xnat.readthedocs.org &lt;http://xnat.readthedocs.org&gt;`_This documentation is a stub, but shows the classes and methods available.Status------Currently we have basic support for almost all data on XNAT servers. Also it is possible to import data via the import service (upload a zip file). There isalso some support for working with the prearchive (reading, moving, deleting andarchiving).Any function not exposed by the object-oriented API of xnatpy, but exposed in theXNAT REST API can be called via the generic get/put/post methods in the sessionobject.There is at the moment still a lack of proper tests in the code base and the documentationis somewhat sparse, this is a known limitation and can hopefully be addressed in the future.</longdescription>
</pkgmetadata>