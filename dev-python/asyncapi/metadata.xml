<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python AsyncAPI&lt;p align=&quot;center&quot; style=&quot;margin: 3em&quot;&gt;  &lt;a href=&quot;https://github.com/dutradda/asyncapi-python&quot;&gt;    &lt;img src=&quot;https://dutradda.github.io/asyncapi-python/asyncapi-python.svg&quot; alt=&quot;asyncapi-python&quot; width=&quot;300&quot;/&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    Python library for translate &lt;a href=&quot;https://asyncapi.io&quot;&gt;asyncapi&lt;/a&gt; specification to python code, without code generation.&lt;/p&gt;---**AsyncAPI Pattern**: &lt;a href=&quot;https://asyncapi.io&quot; target=&quot;_blank&quot;&gt;https://asyncapi.io&lt;/a&gt;---**Documentation**: &lt;a href=&quot;https://dutradda.github.io/asyncapi-python/&quot; target=&quot;_blank&quot;&gt;https://dutradda.github.io/asyncapi-python/&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/dutradda/asyncapi-python&quot; target=&quot;_blank&quot;&gt;https://github.com/dutradda/asyncapi-python&lt;/a&gt;---## Key Features- **Reads an asyncapi specification and create publishers and subscribers from it**- **Support for specification declaration with dataclasses**- **Provides application for create subscribers**- **Support for kafka, redis and postgres protocols (same as broadcaster library)**- **Extra support for google cloud pubsub service**- **Expose in http the auto-generated specification**## Requirements - Python 3.8+ - broadcaster - jsondaora - requests (Optional for http specification) - typer (Optional for subscriber application) - pyyaml (Optional for yaml specification) - apidaora (Optional for expose specification) - Package extra installs:    + http    + yaml    + kafka    + redis    + postgres    + subscriber    + docs    + google-cloud-pubsub## Installation```$ pip install asyncapi[http,yaml,redis,subscriber,docs]```## YAML Specification Example```yamlasyncapi: 2.0.0info:  title: User API  version: '1.0.0'  description: API to manage usersservers:  development:    url: localhost    protocol: redis    description: Development Broker Serverchannels:  user/update:    description: Topic for user updates    subscribe:      operationId: receive_user_update      message:        $ref: '#/components/messages/UserUpdate'    publish:      message:        $ref: '#/components/messages/UserUpdate'components:  messages:    UserUpdate:      name: userUpdate      title: User Update      summary: Inform about users updates      payload:        type: object        required:          - id        properties:          id:            type: string          name:            type: string          age:            type: integerdefaultContentType: application/json```### Creating subscribers module```python# user_events.pyfrom typing import Anyasync def receive_user_update(message: Any) -&gt; None:    print(f&quot;Received update for user id={message.id}&quot;)```### Start subscriber to listen events```bashPYTHONPATH=. asyncapi-subscriber \    --url api-spec.yaml \    --api-module user_events``````Waiting messages...```### Publishing Updates```python# publish.pyimport asynciofrom asyncapi import build_apiapi = build_api('api-spec.yaml')channel_id = 'user/update'message = api.payload(channel_id, id='fake-user', name='Fake User', age=33)async def publish() -&gt; None:    await api.connect()    await api.publish(channel_id, message)    await api.disconnect()asyncio.run(publish())print(f&quot;Published update for user={message.id}&quot;)``````python publish.pyPublished update for user=fake-user```### Receive Updates```Waiting messages...Received update for user id=fake-user```### Expose Specification```bashasyncapi-docs --path api-spec.yaml``````bashcurl -i localhost:5000/asyncapi.yaml```## Python Specification Example```python# specification.pyimport dataclassesfrom typing import Optionalimport asyncapi@dataclasses.dataclassclass UserUpdatePayload:    id: str    name: Optional[str] = None    age: Optional[int] = Nonedev_server = asyncapi.Server(    url='localhost',    protocol=asyncapi.ProtocolType.REDIS,    description='Development Broker Server',)message = asyncapi.Message(    name='userUpdate',    title='User Update',    summary='Inform about users updates',    payload=UserUpdatePayload,)user_update_channel = asyncapi.Channel(    description='Topic for user updates',    subscribe=asyncapi.Operation(        operation_id='receive_user_update', message=message,    ),    publish=asyncapi.Operation(message=message),)spec = asyncapi.Specification(    info=asyncapi.Info(        title='User API', version='1.0.0', description='API to manage users',    ),    servers={'development': dev_server},    channels={'user/update': user_update_channel},    components=asyncapi.Components(messages={'UserUpdate': message}),)```### Creating subscribers module```python# py_spec_user_events.pyimport specificationspec = specification.specasync def receive_user_update(    message: specification.UserUpdatePayload,) -&gt; None:    print(f&quot;Received update for user id={message.id}&quot;)```### Start subscriber to listen events```bashPYTHONPATH=. asyncapi-subscriber --api-module user_events``````Waiting messages...```### Publishing Updates```python# publish.pyimport asynciofrom asyncapi import build_api_auto_specapi = build_api_auto_spec('specification')channel_id = 'user/update'message = api.payload(channel_id, id='fake-user', name='Fake User', age=33)async def publish() -&gt; None:    await api.connect()    await api.publish(channel_id, message)    await api.disconnect()asyncio.run(publish())print(f&quot;Published update for user={message.id}&quot;)``````python publish.pyPublished update for user=fake-user```### Receive Updates```Waiting messages...Received update for user id=fake-user```### Expose Specification```bashPYTHONPATH=. asyncapi-docs --api-module specification``````bashcurl -i localhost:5000/asyncapi.yaml```</longdescription>
</pkgmetadata>