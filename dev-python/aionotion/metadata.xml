<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸ“Ÿ aionotion: a Python3, asyncio-friendly library for NotionÂ® Home Monitoring[![CI](https://github.com/bachya/aionotion/workflows/CI/badge.svg)](https://github.com/bachya/aionotion/actions)[![PyPi](https://img.shields.io/pypi/v/aionotion.svg)](https://pypi.python.org/pypi/aionotion)[![Version](https://img.shields.io/pypi/pyversions/aionotion.svg)](https://pypi.python.org/pypi/aionotion)[![License](https://img.shields.io/pypi/l/aionotion.svg)](https://github.com/bachya/aionotion/blob/main/LICENSE)[![Code Coverage](https://codecov.io/gh/bachya/aionotion/branch/dev/graph/badge.svg)](https://codecov.io/gh/bachya/aionotion)[![Maintainability](https://api.codeclimate.com/v1/badges/bd79edca07c8e4529cba/maintainability)](https://codeclimate.com/github/bachya/aionotion/maintainability)[![Say Thanks](https://img.shields.io/badge/SayThanks-!-1EAEDB.svg)](https://saythanks.io/to/bachya)&lt;a href=&quot;https://www.buymeacoffee.com/bachya1208P&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; height=&quot;41&quot; width=&quot;174&quot;&gt;&lt;/a&gt;`aionotion` is a Python 3, asyncio-friendly library for interacting with[Notion](https://getnotion.com) home monitoring sensors.# Python Versions`aionotion` is currently supported on:- Python 3.9- Python 3.10- Python 3.11# Installation```bashpip install aionotion```# Usage```pythonimport asynciofrom aiohttp import ClientSessionfrom aionotion import async_get_clientasync def main() -&gt; None:    &quot;&quot;&quot;Create the aiohttp session and run the example.&quot;&quot;&quot;    client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;, session=session)    # Get all &quot;households&quot; associated with the account:    systems = await client.system.async_all()    # Get a system by ID:    system = await client.system.async_get(12345)    # Create a system (with associated parameters):    await client.system.async_create({&quot;system_id&quot;: 12345, &quot;name&quot;: &quot;Test&quot;})    # Update a system with new parameters:    await client.system.async_update(12345, {&quot;name&quot;: &quot;Test&quot;})    # Delete a system by ID:    await client.system.async_delete(12345)    # Get all bridges associated with the account:    bridges = await client.bridge.async_all()    # Get a bridge by ID:    bridge = await client.bridge.async_get(12345)    # Create a bridge (with associated parameters):    await client.bridge.async_create({&quot;system_id&quot;: 12345, &quot;name&quot;: &quot;Test&quot;})    # Update a bridge with new parameters:    await client.bridge.async_update(12345, {&quot;name&quot;: &quot;Test&quot;})    # Reset a bridge (deprovision its WiFi credentials):    await client.bridge.async_reset(12345)    # Delete a bridge by ID:    await client.bridge.async_delete(12345)    # Get all devices associated with the account:    devices = await client.device.async_all()    # Get a device by ID:    device = await client.device.async_get(12345)    # Create a device (with associated parameters):    await client.device.async_create({&quot;id&quot;: 12345})    # Delete a device by ID:    await client.device.async_delete(12345)    # Get all sensors:    sensors = await client.sensor.async_all()    # Get a sensor by ID:    sensor = await client.sensor.async_get(12345)    # Create a sensor (with associated parameters):    await client.sensor.async_create({&quot;sensor_id&quot;: 12345, &quot;name&quot;: &quot;Test&quot;})    # Update a sensor with new parameters:    await client.sensor.async_update(12345, {&quot;name&quot;: &quot;Test&quot;})    # Delete a sensor by ID:    await client.sensor.async_delete(12345)    # Get all &quot;tasks&quot; (conditions monitored by sensors) associated with the account:    tasks = await client.task.async_all()    # Get a task by ID:    task = await client.task.async_get(&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;)    # Get a task's value history between two datetimes:    import datetime    history = await client.task.async_history(        &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,        data_before=datetime.datetime.now(),        data_after=datetime.datetime.now() - datetime.timedelta(days=3),    )    # Create a list of tasks for a particular sensor (e.g., sensor # 12345):    await client.task.async_create(        12345, [{&quot;id&quot;: &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;, &quot;type&quot;: &quot;missing&quot;}]    )    # Delete a task for a particular sensor (e.g., sensor # 12345):    await client.task.async_delete(12345, &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;)asyncio.run(main())```By default, the library creates a new connection to Notion with each coroutine. If youare calling a large number of coroutines (or merely want to squeeze out every second ofruntime savings possible), an[`aiohttp`](https://github.com/aio-libs/aiohttp) `ClientSession` can be used for connectionpooling:```pythonimport asynciofrom aiohttp import ClientSessionfrom aionotion import async_get_clientasync def main() -&gt; None:    &quot;&quot;&quot;Create the aiohttp session and run the example.&quot;&quot;&quot;    async with ClientSession() as session:        # Create a Notion API client:        client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;, session=session)        # Get to work...asyncio.run(main())```Check out the examples, the tests, and the source files themselves for methodsignatures and more examples.# Contributing1. [Check for open features/bugs](https://github.com/bachya/aionotion/issues)   or [initiate a discussion on one](https://github.com/bachya/aionotion/issues/new).2. [Fork the repository](https://github.com/bachya/aionotion/fork).3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`4. (_optional, but highly recommended_) Enter the virtual environment: `source ./venv/bin/activate`5. Install the dev environment: `script/setup`6. Code your new feature or bug fix.7. Write tests that cover your new functionality.8. Run tests and ensure 100% code coverage: `poetry run pytest --cov aionotion tests`9. Update `README.md` with any new documentation.10. Add yourself to `AUTHORS.md`.11. Submit a pull request!</longdescription>
</pkgmetadata>