<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Databank[![PyPI](https://img.shields.io/pypi/v/databank.svg)](https://pypi.org/project/databank) ![GitHub Actions](https://github.com/snapADDY/databank/actions/workflows/main.yml/badge.svg)Databank is an easy-to-use Python library for making raw SQL queries in a multi-threaded environment.No ORM, no frills. Only raw SQL queries and parameter binding. Thread-safe. Built on top of [SQLAlchemy](https://www.sqlalchemy.org/).[![IBM System/360 Model 91](https://live.staticflickr.com/7328/9169294489_ba900907f1_b.jpg)](https://www.flickr.com/photos/mratzloff/9169294489/)(The photo was taken by [Matthew Ratzloff](https://www.flickr.com/photos/mratzloff/) and is licensed under CC BY-NC-ND 2.0.)## InstallationYou can install the latest stable version from [PyPI](https://pypi.org/project/databank/):```$ pip install databank```**Adapters not included.** Install e.g. `psycopg2` for PostgreSQL:```$ pip install psycopg2```## UsageConnect to the database of your choice:```python&gt;&gt;&gt; from databank import Database&gt;&gt;&gt; db = Database(&quot;postgresql://user:password@localhost/db&quot;, pool_size=2)```The keyword arguments are passed directly to SQLAlchemy's `create_engine()` function. Depending on the database you connect to, you have options like the size of connection pools.&gt; If you are using `databank` in a multi-threaded environment (e.g. in a web application), make sure the pool size is at least the number of worker threads.Let's create a simple table:```python&gt;&gt;&gt; db.execute(&quot;CREATE TABLE beatles (id SERIAL PRIMARY KEY, member TEXT NOT NULL);&quot;)```You can insert multiple rows at once:```python&gt;&gt;&gt; params = [...     {&quot;id&quot;: 0, &quot;member&quot;: &quot;John&quot;},...     {&quot;id&quot;: 1, &quot;member&quot;: &quot;Paul&quot;},...     {&quot;id&quot;: 2, &quot;member&quot;: &quot;George&quot;},...     {&quot;id&quot;: 3, &quot;member&quot;: &quot;Ringo&quot;}... ]&gt;&gt;&gt; db.execute_many(&quot;INSERT INTO beatles (id, member) VALUES (:id, :member);&quot;, params)```Fetch a single row:```python&gt;&gt;&gt; db.fetch_one(&quot;SELECT * FROM beatles;&quot;){'id': 0, 'member': 'John'}```But you can also fetch `n` rows:```python&gt;&gt;&gt; db.fetch_many(&quot;SELECT * FROM beatles;&quot;, n=2)[{'id': 0, 'member': 'John'}, {'id': 1, 'member': 'Paul'}]```Or all rows:```python&gt;&gt;&gt; db.fetch_all(&quot;SELECT * FROM beatles;&quot;)[{'id': 0, 'member': 'John'}, {'id': 1, 'member': 'Paul'}, {'id': 2, 'member': 'George'}, {'id': 3, 'member': 'Ringo'}]```If you are using PostgreSQL with `jsonb` columns, you can use a helper function to serialize the parameter values:```python&gt;&gt;&gt; from databank.utils import serialize_params&gt;&gt;&gt; serialize_params({&quot;member&quot;: &quot;Ringo&quot;, &quot;song&quot;: [&quot;Don't Pass Me By&quot;, &quot;Octopus's Garden&quot;]}){'member': 'Ringo', 'song': '[&quot;Don\'t Pass Me By&quot;, &quot;Octopus\'s Garden&quot;]'}```</longdescription>
</pkgmetadata>