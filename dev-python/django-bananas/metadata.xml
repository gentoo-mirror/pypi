<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================================================================:banana: Django Bananas - Django extensions the monkey way================================================================================.. image:: https://github.com/5monkeys/django-bananas/workflows/CI/badge.svg  :target: https://github.com/5monkeys/django-bananas/actions.. image:: https://img.shields.io/pypi/v/django-bananas.svg  :target: https://pypi.python.org/pypi/django-bananas/-------------------------------------------------------------------------------- Install--------------------------------------------------------------------------------django-bananas is on PyPI, so just run:.. code-block:: bash    python3 -m pip install django-bananasUsing DRF specific features like Bananas Admin and fencing requiresdjangorestframework and drf-yasg and it's recommended to install django-bananaswith the ``drf`` extra to keep those in sync:.. code-block:: bash    python3 -m pip install django-bananas[drf]++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Compatibility++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Currently tested only for-   Django 3.2 under Python 3.7-3.9-   Django 4.0 under Python 3.8-3.10-   Django 4.1 under Python 3.8-3.10-   Django 4.2 under Python 3.8-3.10Pull requests welcome!-------------------------------------------------------------------------------- Examples--------------------------------------------------------------------------------++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Models++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++TimeStampedModel================================================================================Abstract ``TimeStampedModel`` with date created/modified fields:Use TimeStampedModel as base class for your model.. code-block:: py    from bananas.models import TimeStampedModel    class Book(TimeStampedModel):        passthe timestamps can be accessed on the model as.. code-block:: pycon    &gt;&gt;&gt; book.date_created    &gt;&gt;&gt; book.date_modifiedUUIDModel================================================================================Abstract model that uses a Django 1.8 UUID field as the primary key... code-block:: py    from bananas.models import UUIDModel    class User(UUIDModel):        display_name = models.CharField(max_length=255)        email = models.EmailField().. code-block:: pycon    &gt;&gt;&gt; user.id    UUID('70cf1f46-2c79-4fc9-8cc8-523d67484182')    &gt;&gt;&gt; user.pk    UUID('70cf1f46-2c79-4fc9-8cc8-523d67484182')SecretField================================================================================Can be used to generate and store &quot;safe&quot; random bytes for authentication... code-block:: py    from bananas.models import SecretField    class User(models.Model):        # Ask for 32 bytes and require 24 bytes from urandom        token = SecretField(num_bytes=32, min_bytes=24).. code-block:: pycon    &gt;&gt;&gt; User.objects.create()  # Token is generated automatically    &gt;&gt;&gt; user.token    '3076f884da827809e80ced236e8da20fa36d0c27dd036bdd4afbac34807e5cf1'URLSecretField================================================================================An implementation of SecretField that generates an URL-safe base64 stringinstead of a hex representation of the random bytes... code-block:: py    from bananas.models import URLSecretField    class User(models.Model):        # Generates an URL-safe base64 representation of the random value        token = URLSecretField(num_bytes=32, min_bytes=24).. code-block:: pycon    &gt;&gt;&gt; user.token    'WOgrNwqFKOF_LsHorJy_hGpPepjvVH7Uar-4Z_K6DzU-'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ORM++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++New ``queryset.dicts()`` with field renaming through kwargs, and `dot-dict`style results:.. code-block:: py    from bananas.query import ExtendedQuerySet    class Book(TimeStampedModel):        author = ForeignKey(Author)        objects = Manager.from_queryset(ExtendedQuerySet)().. code-block:: pycon    &gt;&gt;&gt; book = Book.objects.dicts(&quot;id&quot;, author=&quot;author__name&quot;).first()    {'id': 1, 'author': 'Jonas'}    &gt;&gt;&gt; book.author    'Jonas'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Admin++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Custom django admin stylesheet... warning:: Work in progress. Only a few views styled completely as of now... code-block:: py    # settings.py    INSTALLED_APPS = (        &quot;bananas&quot;,  # Needs to be before &quot;django.contrib.admin&quot;        &quot;django.contrib.admin&quot;,        ...,    )    ADMIN = {        &quot;SITE_HEADER&quot;: &quot;Bananas&quot;,        &quot;SITE_TITLE&quot;: &quot;Bananas Admin&quot;,        &quot;INDEX_TITLE&quot;: &quot;Admin Panel&quot;,        # 'BACKGROUND_COLOR': '#363c3f',    }.. code-block:: py    # your main urls.py    from bananas import admin    urlpatterns = [        # ...        url(r&quot;^admin/&quot;, include(admin.site.urls)),    ].. code-block:: py    # app/admin.py or something    from django.conf.urls import url    from bananas import admin    @admin.register    class MyAdminView(admin.AdminView):        def get_urls(self):            return [                url(r&quot;^custom/$&quot;, self.admin_view(self.custom_view)),                # ^^ Note that the view is wrapped in self.admin_view.                # Needed for permissions and to prevent any                # threading issues.            ]        def get(self, request):            return self.render(&quot;admin/template.html&quot;, {})        def custom_view(self, request):            return self.render(&quot;admin/custom.html&quot;, {})++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Admin API++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Django admin API for use with `django-bananas.js&lt;https://github.com/5monkeys/django-bananas.js/&gt;`_ (react admin site). Thisfeature requires installation with the ``drf`` extra... code-block:: py    # app/admin.py or something    from bananas.admin.api.mixins import BananasAPI    from bananas.admin.api.schemas import schema    from bananas.admin.api.views import BananasAdminAPI    from bananas.lazy import lazy_title    from django.utils.translation import gettext_lazy as _    from rest_framework import viewsets    class CustomAdminAPI(BananasAdminAPI):        name = lazy_title(_(&quot;custom&quot;))        @schema(query_serializer=SomeSerializer, responses={200: SomeSerializer})        def list(self, request):            return ...    class SomeModelAdminAPI(BananasAPI, viewsets.ModelViewSet):        serializer_class = SomeModelSerializer        def list(self, request):            return ..... code-block:: py    # app/urls.py or something    from bananas.admin import api    from django.conf.urls import include, path    from .admin import CustomAdminAPI, SomeModelAdminAPI    api.register(CustomAdminAPI)    api.register(SomeModelAdminAPI)    urlpatterns = [        path(r&quot;^api/&quot;, include(&quot;bananas.admin.api.urls&quot;)),    ].. code-block:: py   # setting.py   ADMIN = {       &quot;API&quot;: {           # Optional: override the default OpenAPI schemes           &quot;SCHEMES&quot;: [&quot;https&quot;],       }   }++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Database URLs++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Parse database information from a URL, kind of like SQLAlchemy.Engines================================================================================Currently supported engines are:==============================  =========================================== URI scheme                     Engine==============================  =========================================== pgsql, postgres, postgresql    django.db.backends.postgresql_psycopg2 mysql                          django.db.backends.mysql oracle                         django.db.backends.oracle sqlite, sqlite3                django.db.backends.sqlite3 mysqlgis                       django.contrib.gis.db.backends.mysql oraclegis                      django.contrib.gis.db.backends.oracle postgis                        django.contrib.gis.db.backends.postgis spatialite                     django.contrib.gis.db.backends.spatialite==============================  ===========================================You can add your own by running ``register(scheme, module_name)`` before parsing.database_conf_from_url(url)  Return a django-style database configuration based on ``url``.  :param url: Database URL  :return: Django-style database configuration dict  Example:  .. code-block:: pycon      &gt;&gt;&gt; from bananas.url import database_conf_from_url      &gt;&gt;&gt; conf = database_conf_from_url(      ...     &quot;pgsql://joar:hunter2@5monkeys.se:4242/tweets/tweetschema?hello=world&quot;      ... )      &gt;&gt;&gt; sorted(conf.items())  # doctest: +NORMALIZE_WHITESPACE      [('ENGINE', 'django.db.backends.postgresql_psycopg2'),       ('HOST', '5monkeys.se'),       ('NAME', 'tweets'),       ('PARAMS', {'hello': 'world'}),       ('PASSWORD', 'hunter2'),       ('PORT', 4242),       ('SCHEMA', 'tweetschema'),       ('USER', 'joar')]++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++bananas.environment - Helpers to get setting values from environment variables++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++``bananas.environment.env`` is a wrapper around ``os.environ``, it provides thestandard ``.get(key, value)``, method to get a value for a key, or a default ifthe key is not set - by default that default is ``None`` as you would expect.What is more useful is the additional type-parsing ``.get_*`` methods itprovides:-   ``get_bool``-   ``get_int``-   ``get_list``, ``get_set``, ``get_tuple``:get_int:    .. code-block:: pycon        &gt;&gt;&gt; # env ONE=1        &gt;&gt;&gt; env.get_int(&quot;ONE&quot;)        1        &gt;&gt;&gt; env.get_int(&quot;TWO&quot;)  # Not set        None        &gt;&gt;&gt; env.get_int(&quot;TWO&quot;, -1)  # Not set, default to -1        -1:get_bool:    returns ``True`` if the environment variable value is any of,    case-insensitive:    -   ``&quot;true&quot;``    -   ``&quot;yes&quot;``    -   ``&quot;on&quot;``    -   ``&quot;1&quot;``    returns ``False`` if the environment variable value is any of,    case-insensitive:    -   ``&quot;false&quot;``    -   ``&quot;no&quot;``    -   ``&quot;off&quot;``    -   ``&quot;0&quot;``    if the value is set to anything other than above, the default value will be returned instead.    e.g.:    .. code-block:: pycon        &gt;&gt;&gt; # env CAN_DO=1 NO_THANKS=false NO_HABLA=f4lse        &gt;&gt;&gt; env.get_bool(&quot;CAN_DO&quot;)        True        &gt;&gt;&gt; env.get_bool(&quot;NO_THANKS&quot;)        False        &gt;&gt;&gt; env.get_bool(&quot;NO_HABLA&quot;)  # Set, but not valid        None        &gt;&gt;&gt; env.get_bool(&quot;NO_HABLA&quot;, True)  # Set, but not valid, with default        True        &gt;&gt;&gt; env.get_bool(&quot;IS_NONE&quot;)  # Not set        None        &gt;&gt;&gt; env.get_bool(&quot;IS_NONE&quot;, False)  # Not set, default provided        False:get_tuple, get_list, get_set:    Returns a ``tuple``, ``list`` or ``set`` of the environment variable string,    split by the ascii comma character. e.g.:    .. code-block:: pycon        &gt;&gt;&gt; # env FOOS=foo,foo,bar        &gt;&gt;&gt; get_list(&quot;FOO&quot;)        ['foo', 'foo', 'bar']        &gt;&gt;&gt; get_set(&quot;FOO&quot;)        set(['foo', 'bar'])++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++bananas.secrets - Helpers for getting secrets from files++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Is useful for getting the content of secrets stored in files. One usecase is `docker secrets&lt;https://docs.docker.com/engine/swarm/secrets/&gt;`_.``BANANAS_SECRETS_DIR`` can be used to configure the directory that secrets live in. Defaults to ``/run/secrets/``... code-block:: pycon    &gt;&gt;&gt; from bananas import secrets    &gt;&gt;&gt; secrets.get_secret(&quot;hemlis&quot;)    &quot;topsecret&quot;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++bananas.drf.fencing - Fence DRF views with HTTP conditional headers++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Building blocks for composing HTTP conditionals to guard DRF views. Built towork well in conjunction with ``BananasAdminAPI`` and ``TimeStampedModel``. Thisfeature requires installation with the ``drf`` extra.Fences add a header parameter to the exposed OpenAPI schema if you're usingdrf-yasg.``allow_if_unmodified_since``=============================Make a view-set for a ``TimeStampedModel`` only accept updates when``If-Unmodified-Since`` specifies a date before the ``date_modified`` of theupdated instance.Due to comparing datetime instances, using ``allow_if_unmodified_since``requires running Django with timezone support enabled, ``USE_TZ = TRUE``... code-block:: python    from bananas.drf.fencing import FencedUpdateModelMixin, allow_if_unmodified_since    class ItemAPI(FencedUpdateModelMixin, GenericViewSet):        fence = allow_if_unmodified_since()        serializer_class = ItemSerializer``allow_if_match``==================Make a view-set that requires passing a version string in ``If-Match`` andrejects requests when the given version does not match the ``version`` attributeof the updated instance... code-block:: python    from bananas.drf.fencing import FencedUpdateModelMixin, allow_if_match    class ItemAPI(FencedUpdateModelMixin, GenericViewSet):        fence = allow_if_match(operator.attrgetter(&quot;version&quot;))        serializer_class = ItemSerializer``Fence``=========Example implementing a fence for ``If-Modified-Since``:.. code-block:: python    import operator    from drf_yasg import openapi    from rest_framework import status    from rest_framework.exceptions import APIException    from bananas.drf.fencing import Fence, header_date_parser, parse_date_modified    class NotModified(APIException):        status_code = status.HTTP_304_NOT_MODIFIED        default_detail = &quot;An HTTP precondition failed&quot;        default_code = &quot;not_modified&quot;    allow_if_not_modified_since = Fence(        get_token=header_date_parser(&quot;If-Modified-Since&quot;),        compare=operator.gt,        get_version=parse_date_modified,        openapi_parameter=openapi.Parameter(            in_=openapi.IN_HEADER,            name=&quot;If-Modified-Since&quot;,            type=openapi.TYPE_STRING,            required=True,            description=(                &quot;Time of last edit of the client's representation of the resource in &quot;                &quot;RFC7231 format.&quot;            ),        ),        rejection=NotModified(&quot;The resource is unmodified&quot;),    )++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Contributing++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Contributing is welcome in the form of PRs and issues. If you want to add abigger feature or contribute with a large change in current behaviour it'salways a good idea to start a discussion with an issue before getting started.New additions will be expected to have 100% test coverage as well as type hintsand documentation to be considered to be merged.Development===========Testing and development requirements can be installed using package extras``test`` and ``dev`` respectively. You'll most likely always want to install the``drf`` extra when installing ``dev``.To get started, setup a virtualenv and then install test requirements and runtests and checks on Python 3.9/Django 3.1 with:.. code-block:: bash    python3 -m pip install -e .[test]    TOXENV=py39-django31,checks python3 -m toxYou can install development requirements into your virtualenv. Linting andformatting uses pre-commit which you could also install on a system level... code-block:: bash    python3 -m pip install -e .[dev,drf]    make type-check    pre-commit run --all-filesAfter installing pre-commit, you can enable hooks to have it run before youpublish pull requests... code-block:: bash    pre-commit install -t pre-pushAfter installing ``dev`` you can also run tests without tox for rapid iterationand select specific tests with the ``test`` argument to ``make test``:.. code-block:: bash    make test test='tests.test_admin.APITest.test_logout'</longdescription>
</pkgmetadata>