<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DictKitA Python package that provides utility data structures with simple but powerfulfeatures, with a focus on flexibility and user experience.## UtilDictA feature-enriched dictionary.- Access items with **dot notation**.- **Flexible subscripting**:    - Get multiple items at once.    - Set multiple items or the same value to multiple items at once.- **Add items** without mutating - return an updated copy- **Drop items** without mutating - return a filtered copy- Accepts a **variety of argument types** at creation.- Displays in **nested format** when printed.- Easy **conversion to json** format with `.json()`### Examples```pythonfrom dictkit import UtilDict# Like a dictionary...ud = UtilDict(a=1, b=2, c=3)print(ud)  # {'a': 1, 'b': 2, 'c': 3}# ... but can be initialized from a variety of typesud = UtilDict({&quot;a&quot;: 1}, [(&quot;b&quot;, 2)], c=3)print(ud)  # {'a': 1, 'b': 2, 'c': 3}# Supports dot notation accessprint(ud['a'])  # 1print(ud.a)  # 1# Get multiple items at onceselected_items = ud[[&quot;a&quot;, &quot;c&quot;]]print(selected_items)  # {'a': 1, 'c': 3}# Set multiple items at onceud[[&quot;a&quot;, &quot;c&quot;]] = 10, 30print(ud)  # {'a': 10, 'b': 2, 'c': 30}# Set the same value to multiple keys at onceud[[&quot;a&quot;, &quot;c&quot;]] = 99print(ud)  # {'a': 99, 'b': 2, 'c': 99}# Add items from a variety of typesud2 = ud.add({&quot;c&quot;: 3}, (&quot;d&quot;, 4), e=5)print(ud2)  # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}# Add items from a 2-column dataframeimport pandas as pdud = UtilDict(a=1, b=2)df = pd.DataFrame({&quot;key&quot;: [&quot;c&quot;, &quot;d&quot;], &quot;value&quot;: [3, 4]})ud2 = ud.add(df)print(ud2)  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}# Drop multiple items at once&gt;&gt;&gt; ud3 = ud2.drop(&quot;a&quot;, &quot;c&quot;)&gt;&gt;&gt; print(ud3)  # {'b': 2, 'd': 4}```---&lt;br&gt;## `render()`&gt; Somehow, this tool does not yet exist from any popular libraries.### Represents iterables in nested **JSON _structure_**, but with **Python _formatting_**.```py&gt;&gt;&gt; from dictkit.render import render&gt;&gt;&gt; dct = {'a':1, 'b': {'c':3}, 'list': [int,'b']}&gt;&gt;&gt; s = render(dct)&gt;&gt;&gt; s{   'a': 1,   'b': {      'c': 3   },   'list': [      &lt;class 'int'&gt;,      'b'   ]}```### It handles multiline-formatted strings (like dataframes) elegantly, maintaining their original appearance.```py&gt;&gt;&gt; from pandas import DataFrame&gt;&gt;&gt; df = DataFrame([[1, 2, 3], [4, 55, 6]],...                columns=[&quot;ONE&quot;, &quot;TWO&quot;, &quot;THREE&quot;])&gt;&gt;&gt; fmt_str = '''|------|... |      |... |------|'''&gt;&gt;&gt; dct = {...     &quot;key&quot;: &quot;value&quot;,...     &quot;formatted string&quot;: fmt_str,...     &quot;nested dct&quot;: {...         &quot;x&quot;: &quot;y&quot;,...         &quot;dataframe&quot;: df,...         &quot;a&quot;: &quot;b&quot;,...         &quot;formatted string&quot;: fmt_str...     },...     &quot;lst&quot;: ['a', 'b'],...     &quot;tple&quot;: ('a','b')... }&gt;&gt;&gt; render(dct, quote=False){   key: value,   formatted string:      |------|      |      |      |------|,   nested dct: {      x: y,      dataframe:            ONE  TWO  THREE         0    1    2      3         1    4   55      6,      a: b,      formatted string:         |------|         |      |         |------|   },   lst: [      a,      b   ],   tple: (      a,      b   )}```</longdescription>
</pkgmetadata>