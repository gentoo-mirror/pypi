<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img align=&quot;right&quot; src=&quot;https://raw.github.com/cliffano/pyconflog/main/avatar.jpg&quot; alt=&quot;Avatar&quot;/&gt;[![Build Status](https://github.com/cliffano/pyconflog/workflows/CI/badge.svg)](https://github.com/cliffano/pyconflog/actions?query=workflow%3ACI)[![Vulnerabilities Status](https://snyk.io/test/github/cliffano/pyconflog/badge.svg)](https://snyk.io/test/github/cliffano/pyconflog)[![Published Version](https://img.shields.io/pypi/v/conflog.svg)](https://pypi.python.org/pypi/conflog)&lt;br/&gt;Pyconflog---------Pyconflog library provides Python logging setup via environment variables and configuration files.Installation------------    pip3 install pyconflogUsage-----Create a configuration file, e.g. `conflog.yaml`:    ---    handlers: &quot;stream,file&quot;    datefmt: &quot;%Y-%m-%d %H:%M:%S&quot;    filename: &quot;conflog.log&quot;    filemode: &quot;w&quot;    format: &quot;[SOMEAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s&quot;    level: &quot;info&quot;    extras:      env: &quot;dev&quot;      id: &quot;123&quot; And then use it in your Python code:    from conflog import Conflog    cfl = Conflog(conf_files=['conflog.yaml'])    logger = cfl.get_logger('somename')    logger.debug('Some debug message')    logger.info('Some info message')    logger.critical('Some critical message')It will write the log messages to stdout and file `conflog.log`:    [SOMEAPP] [dev-123] 2023-06-07 10:49:01 INFO Some info message    [SOMEAPP] [dev-123] 2023-06-07 10:49:52 CRITICAL Some critical messageIf you specify environment variables configuration, it will overwrite the configuration files:    import os    from conflog import Conflog    os.environ['CONFLOG_FORMAT'] = '[ENVAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s'    cfl = Conflog(conf_files=['conflog.yaml'])    logger.debug('Some debug message')    logger.info('Some info message')    logger.critical('Some critical message')It will write the log messages using the format from `CONFLOG_FORMAT` environment variable:    [ENVAPP] [dev-123] 2023-06-07 10:49:01 INFO Some info message    [ENVAPP] [dev-123] 2023-06-07 10:49:52 CRITICAL Some critical messageAnd if you specify configuration dictionary, it will overwrite everything else:    import os    from conflog import Conflog    os.environ['CONFLOG_FORMAT'] = '[ENVAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s'    cfl = Conflog(        conf_files=['conflog.yaml'],        conf_dict={'format': '[DICTAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s'})    logger.debug('Some debug message')    logger.info('Some info message')    logger.critical('Some critical message')It will write the log messages using the format from configuration dictionary:    [DICTAPP] [dev-123] 2023-06-07 10:49:01 INFO Some info message    [DICTAPP] [dev-123] 2023-06-07 10:49:52 CRITICAL Some critical messageConfiguration-------------Configuration properties:| Property | Description | Default | Example || -------- | ----------- | ------- | ------- || handlers | Comma separated list of handlers, supported values are `stream` and `file` | `stream` | `stream,file` || datefmt | Date format | `%d-%b-%y %H:%M:%S` | `%Y-%m-%d %H:%M:%S` || filename | Log file name | `conflog.log` | `someconflog.log` || filemode | Log file mode | `w` | `w` || format | Log message format | %(asctime)s --&gt; %(name)s - %(levelname)s - %(message)s | `[SOMEAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s` || level | Log level, supported values are `debug`, `info`, `warning`, `error`, `critical` | `info` | `critical` || extras | Extra fields to be added to log message. It can be comma separated key value pairs with equal separator, or a key value pairs map for JSON and YAML configuration files | None | `env=dev,id=123` |Configuration files can be in YAML, JSON, XML, or INI format. Multiple files can be specified in the `conf_files` parameter when initialising `Conflog`, the configuration will be merged in the order of the files, the latter file will overwrites the former file.Environment variables configuration overwrites configuration files' properties. And finally, configuration dictionary overwrite everything else.### YAMLExample YAML configuration file:    ---    handlers: &quot;stream,file&quot;    datefmt: &quot;%Y-%m-%d %H:%M:%S&quot;    filename: &quot;conflog.log&quot;    filemode: &quot;w&quot;    format: &quot;[SOMEAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s&quot;    level: &quot;info&quot;    extras:      env: &quot;dev&quot;      id: &quot;123&quot;### JSONExample JSON configuration file:    {      &quot;handlers&quot;: &quot;stream,file&quot;,      &quot;datefmt&quot;: &quot;%Y-%m-%d %H:%M:%S&quot;,      &quot;filename&quot;: &quot;conflog.log&quot;,      &quot;filemode&quot;: &quot;w&quot;,      &quot;format&quot;: &quot;[SOMEAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s&quot;,      &quot;level&quot;: &quot;info&quot;,      &quot;extras&quot;: {        &quot;env&quot;: &quot;dev&quot;,        &quot;id&quot;: &quot;123&quot;      }    }### XMLExample XML configuration file:    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    &lt;conflog&gt;      &lt;handlers&gt;stream,file&lt;/handlers&gt;      &lt;datefmt&gt;%Y-%m-%d %H:%M:%S&lt;/datefmt&gt;      &lt;filename&gt;conflog.log&lt;/filename&gt;      &lt;filemode&gt;w&lt;/filemode&gt;      &lt;format&gt;[SOMEAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s&lt;/format&gt;      &lt;level&gt;info&lt;/level&gt;      &lt;extras&gt;env=dev,id=123&lt;/extras&gt;    &lt;/conflog&gt;### INIExample INI configuration file:    [conflog]    handlers: stream,file    datefmt: %%Y-%%m-%%d %%H:%%M:%%S    filename: conflog.log    filemode: w    format: [SOMEAPP] [%%(env)s-%%(id)s] %%(asctime)s %%(levelname)s %%(message)s    level: info    extras: env=dev,id=123### Environment VariablesExample configuration environment variables:    CONFLOG_HANDLERS=&quot;stream,file&quot;    CONFLOG_DATEFMT=&quot;%Y-%m-%d %H:%M:%S&quot;    CONFLOG_FILENAME=&quot;conflog.log&quot;    CONFLOG_FILEMODE=&quot;w&quot;    CONFLOG_FORMAT=&quot;[SOMEAPP] [%(env)s-%(id)s] %(asctime)s %(levelname)s %(message)s&quot;    CONFLOG_LEVEL=&quot;info&quot;    CONFLOG_EXTRAS=&quot;env=dev,id=123&quot;Colophon--------[Developer's Guide](https://cliffano.github.io/developers_guide.html#python)Build reports:* [Lint report](https://cliffano.github.io/pyconflog/lint/pylint/index.html)* [Code complexity report](https://cliffano.github.io/pyconflog/complexity/wily/index.html)* [Unit tests report](https://cliffano.github.io/pyconflog/test/pytest/index.html)* [Test coverage report](https://cliffano.github.io/pyconflog/coverage/coverage/index.html)* [Integration tests report](https://cliffano.github.io/pyconflog/test-integration/pytest/index.html)* [API Documentation](https://cliffano.github.io/pyconflog/doc/sphinx/index.html)</longdescription>
</pkgmetadata>