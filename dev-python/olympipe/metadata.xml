<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Olympipe![coverage](https://gitlab.com/gabraken/olympipe/badges/master/coverage.svg?job=tests)![status](https://gitlab.com/gabraken/olympipe/badges/master/pipeline.svg)![Olympipe](https://gitlab.com/gabraken/olympipe/-/raw/master/Olympipe.png)This project will make pipelines easy to use to improve parallel computing using the basic multiprocessing module. This module uses type checking to ensure your data process validity from the start.## Basic usageEach pipeline starts from an interator as a source of packets (a list, tuple, or any complex iterator). This pipeline will then be extended by adding basic `.task(&lt;function&gt;)`. The pipeline process join the main process when using the `.wait_for_results()` or `.wait_for_completion()` functions.```pythonfrom olympipe import Pipelinedef times_2(x: int) -&gt; int:    return x * 2p = Pipeline(range(10))p1 = p.task(times_2) # Multiply each packet by 2# or p1 = p.task(lambda x: x * 2) # using a lambda functionres = p1.wait_for_result()print(res) # [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]```## FilteringYou can choose which packets to `.filter(&lt;keep_function&gt;)` by passing them a function returning True or False when applied to this packet.```pythonfrom olympipe import Pipelinep = Pipeline(range(20))p1 = p.filter(lambda x: x % 2 == 0) # Keep pair numbersp2 = p1.batch(2) # Group in arrays of 2 elementsres = p2.wait_for_result()print(res) # [[0, 2], [4, 6], [8, 10], [12, 14], [16, 18]]```## In line formalizationYou can chain declarations to have a more readable pipeline.```pythonfrom olympipe import Pipeline[res] = Pipeline(range(20)).filter(lambda x: x % 2 == 0).batch(2).wait_for_results()print(res) # [[0, 2], [4, 6], [8, 10], [12, 14], [16, 18]]```## DebuggingInterpolate `.debug()` function anywhere in the pipe to print packets as they arrive in the pipe.```pythonfrom olympipe import Pipelinep = Pipeline(range(20))p1 = p.filter(lambda x: x % 2 == 0).debug() # Keep pair numbersp2 = p1.batch(2).debug() # Group in arrays of 2 elementsp2.wait_for_completion()```## Real time processing (for sound, video...)Use the `.temporal_batch(&lt;seconds_float&gt;)` pipe to aggregate packets received at this point each &lt;seconds_float&gt; seconds.```pythonimport timefrom olympipe import Pipelinedef delay(x: int) -&gt; int:    time.sleep(0.1)    return xp = Pipeline(range(20)).task(delay) # Wait 0.1 s for each queue elementp1 = p.filter(lambda x: x % 2 == 0) # Keep pair numbersp2 = p1.temporal_batch(1.0) # Group in arrays of 2 elements[res] = p2.wait_for_results()print(res) # [[0, 2, 4, 6, 8], [10, 12, 14, 16, 18], []]```## Using classes in a pipelineYou can add a stateful class instance to a pipeline. The method used will be typecheked as well to ensure data coherence. You just have to use the `.class_task(&lt;Class&gt;, &lt;Class.method&gt;, ...)` method where Class.method is the actual method you will use to process each packet.```pythonitem_count  = 5class StockPile:    def __init__(self, mul:int):        self.mul = mul        self.last = 0            def pile(self, num: int) -&gt; int:        out = self.last        self.last = num * self.mul        return out        p1 = Pipeline(range(item_count))p2 = p1.class_task(StockPile, StockPile.pile, [3])[res] = p2.wait_for_results()print(res) # [0, 0, 3, 6, 9]```This project is still an early version, feedback is very helpful.</longdescription>
</pkgmetadata>