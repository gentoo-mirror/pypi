<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;  &lt;br&gt;  &lt;a href=&quot;https://openpecha.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/82142807?s=400&amp;u=19e108a15566f3a1449bafb03b8dd706a72aebcd&amp;v=4&quot; alt=&quot;OpenPecha&quot; width=&quot;150&quot;&gt;&lt;/a&gt;  &lt;br&gt;&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;Botok – Python Tibetan Tokenizer&lt;/h3&gt;&lt;!-- Replace the title of the repository --&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a&gt;&lt;img src=&quot;https://img.shields.io/github/release/Esukhia/botok.svg&quot; alt=&quot;GitHub release&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://botok.readthedocs.io/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/botok/badge/?version=latest&quot; alt=&quot;Documentation Status&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://travis-ci.org/Esukhia/botok&quot;&gt;&lt;img src=&quot;https://travis-ci.org/Esukhia/botok.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://coveralls.io/github/Esukhia/botok?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/Esukhia/botok/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://black.readthedocs.io/en/stable/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; alt=&quot;Code style: black&quot;&gt;&lt;/a&gt; &lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#description&quot;&gt;Description&lt;/a&gt; •  &lt;a href=&quot;#install&quot;&gt;Install&lt;/a&gt; •  &lt;a href=&quot;#example&quot;&gt;Example&lt;/a&gt; •  &lt;a href=&quot;#commentedexample&quot;&gt;Commented Example&lt;/a&gt; •  &lt;a href=&quot;#docs&quot;&gt;Docs&lt;/a&gt; •  &lt;a href=&quot;#owners&quot;&gt;Owners&lt;/a&gt; •  &lt;a href=&quot;#Acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt; •  &lt;a href=&quot;#Maintainance&quot;&gt;Maintainance&lt;/a&gt; •  &lt;a href=&quot;#License&quot;&gt;License&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;## DescriptionBotok tokenizes Tibetan text into words with optional attributes such as lemma, POS, clean form.## InstallRequires to have Python3 installed.    pip3 install botok## Example```from botok import WordTokenizerfrom botok.config import Configfrom pathlib import Pathdef get_tokens(wt, text):    tokens = wt.tokenize(text, split_affixes=False)    return tokensif __name__ == &quot;__main__&quot;:    config = Config(dialect_name=&quot;general&quot;, base_path= Path.home())    wt = WordTokenizer(config=config)    text = &quot;བཀྲ་ཤིས་བདེ་ལེགས་ཞུས་རྒྱུ་ཡིན་ སེམས་པ་སྐྱིད་པོ་འདུག།&quot;    tokens = get_tokens(wt, text)    for token in tokens:        print(token)```https://user-images.githubusercontent.com/24893704/148767959-31cc0a69-4c83-4841-8a1d-028d376e4677.mp4## Commented Example```python&gt;&gt;&gt; from botok import Text&gt;&gt;&gt; # input is a multi-line input string&gt;&gt;&gt; in_str = &quot;&quot;&quot;ལེ གས། བཀྲ་ཤིས་མཐའི་ ༆ ཤི་བཀྲ་ཤིས་  tr ... བདེ་་ལེ གས། བཀྲ་ཤིས་བདེ་ལེགས་༡༢༣ཀཀ། ... མཐའི་རྒྱ་མཚོར་གནས་པའི་ཉས་ཆུ་འཐུང་།། །།མཁའ།&quot;&quot;&quot;### STEP1: instanciating Text&gt;&gt;&gt; # A. on a string&gt;&gt;&gt; t = Text(in_str)&gt;&gt;&gt; # B. on a file... # note all following operations can be applied to files in this way.&gt;&gt;&gt; from pathlib import Path&gt;&gt;&gt; in_file = Path.cwd() / 'test.txt'&gt;&gt;&gt; # file content:&gt;&gt;&gt; in_file.read_text()'བཀྲ་ཤིས་བདེ་ལེགས།།\n'&gt;&gt;&gt; t = Text(in_file)&gt;&gt;&gt; t.tokenize_chunks_plaintext&gt;&gt;&gt; # checking an output file has been written:... # BOM is added by default so that notepad in Windows doesn't scramble the line breaks&gt;&gt;&gt; out_file = Path.cwd() / 'test_pybo.txt'&gt;&gt;&gt; out_file.read_text()'\ufeffབཀྲ་ ཤིས་ བདེ་ ལེགས །།'### STEP2: properties will perform actions on the input string:### note: original spaces are replaced by underscores.&gt;&gt;&gt; # OUTPUT1: chunks are meaningful groups of chars from the input string.... # see how punctuations, numerals, non-bo and syllables are all neatly grouped.&gt;&gt;&gt; t.tokenize_chunks_plaintext'ལེ_གས །_ བཀྲ་ ཤིས་ མཐའི་ _༆_ ཤི་ བཀྲ་ ཤིས་__ tr_\n བདེ་་ ལེ_གས །_ བཀྲ་ ཤིས་ བདེ་ ལེགས་ ༡༢༣ ཀཀ །_\n མཐའི་ རྒྱ་ མཚོར་ གནས་ པའི་ ཉས་ ཆུ་ འཐུང་ །།_།། མཁའ །'&gt;&gt;&gt; # OUTPUT2: could as well be acheived by in_str.split(' ')&gt;&gt;&gt; t.tokenize_on_spaces'ལེ གས། བཀྲ་ཤིས་མཐའི་ ༆ ཤི་བཀྲ་ཤིས་ tr བདེ་་ལེ གས། བཀྲ་ཤིས་བདེ་ལེགས་༡༢༣ཀཀ། མཐའི་རྒྱ་མཚོར་གནས་པའི་ཉས་ཆུ་འཐུང་།། །།མཁའ།'&gt;&gt;&gt; # OUTPUT3: segments in words.... # see how བདེ་་ལེ_གས was still recognized as a single word, even with the space and the double tsek.... # the affixed particles are separated from the hosting word: མཐ འི་ རྒྱ་མཚོ ར་ གནས་པ འི་ ཉ ས་&gt;&gt;&gt; t.tokenize_words_raw_textLoading Trie... (2s.)'ལེ_གས །_ བཀྲ་ཤིས་ མཐ འི་ _༆_ ཤི་ བཀྲ་ཤིས་_ tr_ བདེ་་ལེ_གས །_ བཀྲ་ཤིས་ བདེ་ལེགས་ ༡༢༣ ཀཀ །_ མཐ འི་ རྒྱ་མཚོ ར་ གནས་པ འི་ ཉ ས་ ཆུ་ འཐུང་ །།_།། མཁའ །'&gt;&gt;&gt; t.tokenize_words_raw_lines'ལེ_གས །_ བཀྲ་ཤིས་ མཐ འི་ _༆_ ཤི་ བཀྲ་ཤིས་__ tr_\n བདེ་་ལེ_གས །_ བཀྲ་ཤིས་ བདེ་ལེགས་ ༡༢༣ ཀཀ །_\n མཐ འི་ རྒྱ་མཚོ ར་ གནས་པ འི་ ཉ ས་ ཆུ་ འཐུང་ །།_།། མཁའ །'&gt;&gt;&gt; # OUTPUT4: segments in words, then calculates the number of occurences of each word found... # by default, it counts in_str's substrings in the output, which is why we have བདེ་་ལེ གས1, བདེ་ལེགས་1... # this behaviour can easily be modified to take into account the words that pybo recognized instead (see advanced usage)&gt;&gt;&gt; print(t.list_word_types)འི་3། 2བཀྲ་ཤིས་2མཐ2ལེ གས1 ༆ 1ཤི་1བཀྲ་ཤིས་  1tr \n1བདེ་་ལེ གས1བདེ་ལེགས་1༡༢༣1ཀཀ1། \n1རྒྱ་མཚོ1ར་1གནས་པ1ཉ1ས་1ཆུ་1འཐུང་1།། །།1མཁའ1།1```##### Custom dialect pack:In order to use custom dialect pack:- You need to prepare your dialect pack in same folder structure like [general dialect pack](https://github.com/Esukhia/botok-data/tree/master/dialect_packs/general)- Then you need to instaintiate a config object where you will pass dialect name and path- You can instaintiate your tokenizer object using that config object- Your tokenizer will be using your custom dialect pack and it will be using trie pickled file in future to build the custom trie.## DocsNo documentations.&lt;!-- This section must link to the docs which are in the root of the repository in /docs --&gt;## Owners- [@drupchen](https://github.com/drupchen)- [@eroux](https://github.com/eroux)- [@ngawangtrinley](https://github.com/ngawangtrinley)- [@10zinten](https://github.com/10zinten)- [@kaldan007](https://github.com/kaldan007)&lt;!-- This section lists the owners of the repo --&gt;## Acknowledgements**botok** is an open source library for Tibetan NLP.We are always open to cooperation in introducing new features, tool integrations and testing solutions.Many thanks to the companies and organizations who have supported botok's development, especially:* [Khyentse Foundation](https://khyentsefoundation.org) for contributing USD22,000 to kickstart the project * The [Barom/Esukhia canon project](http://www.barom.org) for sponsoring training data curation* [BDRC](https://tbrc.org) for contributing 2 staff for 6 months for data curation## MaintainanceBuild the source dist:```rm -rf dist/python3 setup.py clean sdist```and upload on twine (version &gt;= `1.11.0`) with:```twine upload dist/*```## LicenseThe Python code is Copyright (C) 2019 Esukhia, provided under [Apache 2](LICENSE). contributors: * [Drupchen](https://github.com/drupchen) * [Élie Roux](https://github.com/eroux) * [Ngawang Trinley](https://github.com/ngawangtrinley) * [Mikko Kotila](https://github.com/mikkokotila) * [Thubten Rinzin](https://github.com/thubtenrigzin) * [Tenzin](https://github.com/10zinten) * Joyce Mackzenzie for reworking the logo</longdescription>
</pkgmetadata>