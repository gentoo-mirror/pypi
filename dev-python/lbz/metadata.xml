<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Lambdalizator![Python 3.8+](https://img.shields.io/badge/python-v3.8-blue) ![Black](https://img.shields.io/badge/code%20style-black-000000.svg)AWS Lambda Toolbox inspired by Flask. Currently supporting:- REST API- Event API (AWS Event Bridge)- Lambda API## AuthenticationLambdalizator can automatically read the value of the `Authentication` HTTP header and transform itinto the User object that is available as a part of the request. The `Authentication` header mustcontain a JWT token that will be verified using one of the configured public keys (see Configurationbelow). The User object will have properties corresponding to the key-value pairs from the token'sdata.To enable authentication provide a value for either `ALLOWED_PUBLIC_KEYS` or `ALLOWED_AUDIENCES`environment variables.## ConfigurationLambdalizator can be configured using the following environment variables: #### Authorization configuration- `ALLOWED_PUBLIC_KEYS` - a list of public keys that can be used for decoding auth tokens send in the  `Authentication` and `Authorization` headers. If you are using Cognito, you can use public keys from:  https://cognito-idp.{your aws region}.amazonaws.com/{your pool id}/.well-known/jwks.json.- `ALLOWED_AUDIENCES` - a list of audiences that will be used for verifying the JWTs send in the  `Authentication` and `Authorization` headers. It should be a comma-separated list of strings,  e.g. `aud1,aud2`. If not set, any audience will be considered valid.- `ALLOWED_ISS` - allowed issuer of JWT - Security feature. If not set, issuer will not be checked.- `AUTH_REMOVE_PREFIXES` - if enabled, all fields starting with a prefix (like `cognito:`) in the  auth token will have the prefix removed. Defaults to False (set as &quot;0&quot; or &quot;1&quot;).#### Lambdalizator configuration - `LOGGING_LEVEL` - log level used in the application. Defaults to INFO.- `LBZ_DEBUG_MODE` - set lbz to work in debug mode.- `CORS_HEADERS` - a list of additional headers that should be supported.- `CORS_ORIGIN` - a list of allowed origins that should be supported.#### AWS related configuration- `AWS_LAMBDA_FUNCTION_NAME` - defined by AWS Lambda environment used ATM only in EventAPI- `EVENTS_BUS_NAME` - expected by EventAPI Event Bridge Events Bus Name. Defaults to Lambda name   taken from AWS_LAMBDA_FUNCTION_NAME and extended with `-event-bus`## Hello World Example:### 1. Define resource```python# simple_resource.pyfrom lbz.router import add_routefrom lbz.response import Responsefrom lbz.resource import Resourceclass HelloWorld(Resource):    @add_route(&quot;/&quot;, method=&quot;GET&quot;)    def list(self):        return Response({&quot;message&quot;: &quot;HelloWorld&quot;})        ```### 2. Define handler```python# simple_resource.pyfrom lbz.exceptions import LambdaFWExceptionfrom simple_resource import HelloWorlddef handle(event, context):    try:        return HelloWorld(event)()    except Exception as err:        return LambdaFWException().get_response(context.aws_request_id).to_dict()```### 3. Create dev Server üñ•Ô∏è```python# simple_resource_dev.pyfrom lbz.dev.server import MyDevServerfrom simple_resource.simple_resource import HelloWorldif __name__ == '__main__':    server = MyDevServer(acls=HelloWorld, port=8001)    server.run()```### 4. Don't forget to unit test```python# pytest simple_resource_test.pyfrom lbz.dev.test import Clientfrom simple_resource import HelloWorldclass TestHelloWorld:    def setup_method(self) -&gt; None:        # pylint: disable=attribute-defined-outside-init        self.client = Client(resource=HelloWorld)    def test_filter_queries_all_active_when_no_params(self) -&gt; None:        data = self.client.get(&quot;/&quot;).to_dict()[&quot;body&quot;]        assert data == '{&quot;message&quot;:&quot;HelloWorld&quot;}'```### 5. Authenticate it üíÇ```python# simple_auth/simple_resource.pyfrom lbz.router import add_routefrom lbz.response import Responsefrom lbz.resource import Resourcefrom lbz.authz import authorizationclass HelloWorld(Resource):    _name = &quot;helloworld&quot;    @authorization()    @add_route(&quot;/&quot;, method=&quot;GET&quot;)    def list(self, restrictions=None):        return Response({&quot;message&quot;: f&quot;Hello, {self.request.user.username} !&quot;})     ```## DocumentationWIP## Changelog[Release Changelogs](./CHANGELOG.md)Contribution------------We are always happy to have new contributions. We have marked issues good for anyone looking to get startedPlease take a look at our [Contribution guidelines](CONTRIBUTING.md).</longdescription>
</pkgmetadata>