<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pycivet[![.github/workflows/test.yml](https://github.com/FNNDSC/pycivet/actions/workflows/test.yml/badge.svg)](https://github.com/FNNDSC/pycivet/actions/workflows/test.yml)[![PyPI](https://img.shields.io/pypi/v/pycivet)](https://pypi.org/project/pycivet/)[![License - MIT](https://img.shields.io/pypi/l/pycivet)](https://github.com/FNNDSC/pycivet/blob/master/LICENSE)Python bindings for CIVET binaries like `transform_objects` and `mincdefrag`.## Abstract`pycivet` is a helper library which provides a Python API that wrapsCIVET binaries with object-oriented syntax.Intermediate files are written to temporary locations and cached.### ExamplesConsider this bash script:```shelltemp1=$(mktemp --suffix=.mnc)temp2=$(mktemp)mincresample -quiet -double mask.mnc $temp1mincblur -quiet -fwhm $temp1 $temp2mv &quot;${temp2}_blur.mnc&quot; blurred_mask.mncrm $temp1```The equivalent using `pycivet`:```pythonfrom civet.minc import MaskMask(&quot;wm.right.mnc&quot;).resamplef64().mincblur(fwhm=3).save(&quot;blurred_mask.mnc&quot;)```This Perl code snippet from `marching_cubes.pl` can be expressed in Python as such:https://github.com/aces/surface-extraction/blob/7c9c5987a2f8f5fdeb8d3fd15f2f9b636401d9a1/scripts/marching_cubes.pl.in#L125-L134```pythonfrom civet import starting_modelsstarting_models.WHITE_MODEL_320.flip_x().slide_right().save('./output.obj')```## InstallationIt is recommended you install this package in a container image, e.g.```DockerfileFROM docker.io/fnndsc/mni-conda-base:civet2.1.1-python3.10.2RUN pip install pycivet```## MotivationTypically, bioinformatics and neuroinformatics pipelines such as[CIVET](https://www.bic.mni.mcgill.ca/ServicesSoftware/CIVET-2-1-0-Table-of-Contents)and [FreeSurfer](https://surfer.nmr.mgh.harvard.edu/) are comprised ofmany binary programs and a script in `csh` or `perl` which glues togetherthose binary programs and their intermediate results. These scriptslook something like:```shelldo_something input.mnc /tmp/1.mncanother_thing /tmp/1.mnc /tmp/2.mnccreate_thing /tmp/3.mncmany_thing /tmp/2.mnc /tmp/3.mnc /tmp/4.mnc...```We propose that the readability and maintainability of such scripts can beimproved using modern programming language features such as type hints.These advantages would enable to faster development and with fewer bugs.`pycivet` explores this concept with CIVET subroutines.## Features`pycivet` is an object-oriented Python API to CIVET binaries.### Intermediate FilesIntermediate files are used to pass results between subroutines.This chore is handled transparently by the `pycivet.memoization` submodule.Consider this excerpt from `marching_cubes.pl`:```perl&amp;run( &quot;param2xfm&quot;, &quot;-scales&quot;, -1, 1, 1,    &quot;${tmpdir}/flip.xfm&quot; );&amp;run( &quot;transform_objects&quot;, $ICBM_white_model,    &quot;${tmpdir}/flip.xfm&quot;, $initial_model );unlink( &quot;${tmpdir}/flip.xfm&quot; );&amp;run( &quot;param2xfm&quot;, &quot;-translation&quot;, 25, 0, 0,    &quot;${tmpdir}/slide_right.xfm&quot; );&amp;run( &quot;transform_objects&quot;, $initial_model,    &quot;${tmpdir}/slide_right.xfm&quot;, $initial_model );unlink( &quot;${tmpdir}/slide_right.xfm&quot; );```Using `pycivet` we can express the code more concisely:```pythonfrom civet.obj import SurfaceSurface('input.obj').flip_x().translate_x(25).save('./output.obj')```#### MemoizationRepeated calls on the same object are cached. This is primarilyfor the sake of internal code quality, but it can also be takenadvantage of externally:```pythonfrom civet.memoization import Sessionfrom civet.obj import Surfacewith Session() as s:    surf = Surface('input.obj')    s.save(surf.flip_x(), 'flipped.obj')    s.save(surf.flip_x().slide_right(), 'flipped_and_slid.obj')```In the example above, the following subroutine commands are cached:- `param2xfm -scales -1 1 1 flip.xfm`- `transform_objects input.obj flip.xfm flipped.obj`#### LazinessOnly results which are needed (by `save`) are computed.```pythonfrom civet.obj import Surfacesurf = Surface('input.obj')surf.slide_right()  # does nothingsurf.slide_left().save('left.obj')  # runs param2xfm, transform_objects, ...```### TypingOnly methods relevant to an object's type are available to be called onthat object. For instance, an object representing a `.obj` surface filewould have the methods `flip_x()` and `translate_x(n)`, and an objectrepresenting a `.mnc` volume would have the methods `minccalc_u8(...)`and `mincdefrag(...)` defined, but you cannot call`Surface('input.obj').mincdefrag(1, 19)`.Subroutines and their usage are discoverable through autocomplete featuresof an IDE that supports type-hints.</longdescription>
</pkgmetadata>