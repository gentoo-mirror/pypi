<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/unitedstates/python-us/workflows/Tests/badge.svg   :target: https://github.com/unitedstates/python-us/actionsUS: The Greatest Package in the World=====================================A package for easily working with US and state metadata.* all US states and territories* postal abbreviations* Associated Press style abbreviations* FIPS codes* capitals* years of statehood* time zones* phonetic state name lookup* is contiguous or continental* URLs to shapefiles for state, census, congressional districts,  counties, and census tractsInstallation------------As per usual: ::    pip install usFeatures--------Easy access to state information: ::    &gt;&gt;&gt; import us    &gt;&gt;&gt; us.states.MD    &lt;State:Maryland&gt;    &gt;&gt;&gt; us.states.MD.fips    u'24'    &gt;&gt;&gt; us.states.MD.name    u'Maryland'    &gt;&gt;&gt; us.states.MD.is_contiguous    TrueIncludes territories too: ::    &gt;&gt;&gt; us.states.VI.name    u'Virgin Islands'    &gt;&gt;&gt; us.states.VI.is_territory    True    &gt;&gt;&gt; us.states.MD.is_territory    FalseList of all (actual) states: ::    &gt;&gt;&gt; us.states.STATES    [&lt;State:Alabama&gt;, &lt;State:Alaska&gt;, &lt;State:Arizona&gt;, &lt;State:Arkansas&gt;,...    &gt;&gt;&gt; us.states.TERRITORIES    [&lt;State:American Samoa&gt;, &lt;State:Guam&gt;, &lt;State:Northern Mariana Islands&gt;,...And the whole shebang, if you want it: ::    &gt;&gt;&gt; us.states.STATES_AND_TERRITORIES    [&lt;State:Alabama&gt;, &lt;State:Alaska&gt;, &lt;State:American Samoa&gt;,...For convenience, `STATES`, `TERRITORIES`, and `STATES_AND_TERRITORIES` can beaccessed directly from the `us` module: ::    &gt;&gt;&gt; us.states.STATES    [&lt;State:Alabama&gt;, &lt;State:Alaska&gt;, &lt;State:Arizona&gt;, &lt;State:Arkansas&gt;,...    &gt;&gt;&gt; us.STATES    [&lt;State:Alabama&gt;, &lt;State:Alaska&gt;, &lt;State:Arizona&gt;, &lt;State:Arkansas&gt;,...There's also a list of obsolete territories: ::    &gt;&gt;&gt; us.states.OBSOLETE    [&lt;State:Dakota&gt;, &lt;State:Orleans&gt;, &lt;State:Philippine Islands&gt;]The state lookup method allows matching by FIPS code, abbreviation, and name: ::    &gt;&gt;&gt; us.states.lookup('24')    &lt;State:Maryland&gt;    &gt;&gt;&gt; us.states.lookup('MD')    &lt;State:Maryland&gt;    &gt;&gt;&gt; us.states.lookup('md')    &lt;State:Maryland&gt;    &gt;&gt;&gt; us.states.lookup('maryland')    &lt;State:Maryland&gt;Get useful information: ::    &gt;&gt;&gt; state = us.states.lookup('maryland')    &gt;&gt;&gt; state.abbr    u'MD'And for those days that you just can't remember how to spell Mississippi,we've got phonetic name matching too: ::    &gt;&gt;&gt; us.states.lookup('misisipi')    &lt;State:Mississippi&gt;Shapefiles----------You want shapefiles too? Gotcha covered.::    &gt;&gt;&gt; shpurls = us.states.MD.shapefile_urls()    &gt;&gt;&gt; for region, url in shpurls.items():    ...   print &quot;%s: %s&quot; % (region, url)    ...    county: http://www2.census.gov/geo/tiger/TIGER2010/COUNTY/2010/tl_2010_24_county10.zip    state: http://www2.census.gov/geo/tiger/TIGER2010/STATE/2010/tl_2010_24_state10.zip    cd: http://www2.census.gov/geo/tiger/TIGER2010/CD/111/tl_2010_24_cd111.zip    zcta: http://www2.census.gov/geo/tiger/TIGER2010/ZCTA5/2010/tl_2010_24_zcta510.zip    tract: http://www2.census.gov/geo/tiger/TIGER2010/TRACT/2010/tl_2010_24_tract10.zipThe `shapefile_urls()` method on the State object generates shapefile URLs forthe following regions:* state* county* congressional district* zcta* census tractIf you know what region you want, you can explicitly request it: ::    &gt;&gt;&gt; us.states.MD.shapefile_urls('county')    u'http://www2.census.gov/geo/tiger/TIGER2010/COUNTY/2010/tl_2010_24_county10.zip'Mappings--------Mappings between various state attributes are a common need. The `mapping()`method will generate a lookup between two specified fields.::    &gt;&gt;&gt; us.states.mapping('fips', 'abbr')    {u'30': u'MT', u'54': u'WV', u'42': u'PA', u'48': u'TX', u'45': u'SC',...    &gt;&gt;&gt; us.states.mapping('abbr', 'name')    {u'WA': u'Washington', u'VA': u'Virginia', u'DE': u'Delaware',...CLI----When you need to know state information RIGHT AWAY, there's the *states* script.::    $ states md    *** The great state of Maryland (MD) ***      FIPS code: 24      other attributes:        ap_abbr: Md.        capital: Annapolis        capital_tz: America/New_York        is_obsolete: False        name_metaphone: MRLNT        statehood_year: 1788        time_zones: America/New_York      shapefiles:        blockgroup: http://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_24_bg10.zip        cd: http://www2.census.gov/geo/tiger/TIGER2010/CD/111/tl_2010_24_cd111.zip        county: http://www2.census.gov/geo/tiger/TIGER2010/COUNTY/2010/tl_2010_24_county10.zip        state: http://www2.census.gov/geo/tiger/TIGER2010/STATE/2010/tl_2010_24_state10.zip        tract: http://www2.census.gov/geo/tiger/TIGER2010/TRACT/2010/tl_2010_24_tract10.zip        zcta: http://www2.census.gov/geo/tiger/TIGER2010/ZCTA5/2010/tl_2010_24_zcta510.zip        block: http://www2.census.gov/geo/tiger/TIGER2010/TABBLOCK/2010/tl_2010_24_tabblock10.zipRunning Tests-------------CircleCI is set up to automatically run unit tests against any new commits tothe repo. To run these tests yourself in a standardized, Dockerizedenvironment, install`the CircleCI CLI &lt;https://circleci.com/docs/2.0/local-cli/&gt;`_, and thenexecute the tests with: ::    circleci local execute --job buildAlternatively, you can run tests against only your current version of Python,using: ::    pytest testsChangelog---------2.0.2~~~~~* restore DC in lookup() and mapping()2.0.1~~~~~* fix Python 2.7 tests that ran with Python 3* revert to jellyfish 0.6.1 to support Python 2.72.0.0~~~~~* add support for Python 3.7 and 3.8* remove support for Python 3.4 and 3.5* remove pickled objects and database in favor of pure Python code* upgrade jellyfish to 0.7.2 to fix metaphone bug* fixes for IN, KY, ND, and NM timezones* set AZ timezone to America/Phoenix* obsolete entries are no longer included in STATES_AND_TERRITORIES* DC is no longer included in STATES, STATES_AND_TERRITORIES, STATES_CONTIGUOUS, or STATES_CONTINENTAL1.0.0~~~~~* full Python 3.6 support* use pytest0.10.0~~~~~~* upgrade jellyfish to 0.5.3 to fix metaphone bug0.9.0~~~~~* add information on whether a state is contiguous and/or continental,  thanks to `chebee7i &lt;https://github.com/chebee7i&gt;`_0.8.0~~~~~* add obsolete territories, thanks to `Ben Chartoff &lt;https://github.com/bchartoff&gt;`_* fix packaging error, thanks to `Alexander Kulakov &lt;https://github.com/momyc&gt;`_0.7.1~~~~~* upgrade to jellyfish 0.5.1 to fix metaphone case bug0.7~~~* add time zones, thanks to `Paul Tagliamonte &lt;https://github.com/paultag&gt;`_* Python 2.6 and 3.2 compatibility0.6~~~* add AP-style state abbreviations* use jellyfish instead of Metaphone package* update to requests v1.0.4 for tests* Python 3.3 compatibility0.5~~~* fix state abbreviation for Nebraska0.4~~~* add state capitals* add years of statehood0.3~~~* add mapping method to generate dicts of arbitrary fields0.2~~~* add command line script for quick access to state data0.1~~~* initial release* state names and abbreviations* FIPS codes* lookup() method* shapefile URLs for various regions</longdescription>
</pkgmetadata>