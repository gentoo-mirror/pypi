<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Summary=======Formats text following the `MediaWiki &lt;http://meta.wikimedia.org/wiki/Help:Editing&gt;`_syntax.Usage=====To return HTML from Wiki::    from wikimarkup.parser import Parser    parser = Parser()    html = parser.parse(text[, show_toc=True])To return HTML without certain &quot;annoying&quot; (TODO: define annoying) elements, such as headings::    from wikimarkup.parser import parselite    parselite(text)Adding New Tags===============You can add new tags with the `registerTagHook` method.::    from wikimarkup.parser import Parser    import cgi        def blockquoteTagHook(parser_env, body, attributes={}):        &quot;&quot;&quot;&lt;quote[ cite=&quot;Person&quot;]&gt;A paragraph of text.&lt;/quote&gt;&quot;&quot;&quot;        text = ['&lt;blockquote&gt;']        if 'cite' in attributes:            text.append('&lt;cite&gt;%s&lt;/cite&gt;' % (cgi.escape(attributes['cite']),))        text.append(parse(body.strip()))        text.append('&lt;/blockquote&gt;')        return u'\n'.join(text)    parser = Parser()    parser.registerTagHook('quote', blockquoteTagHook)Adding Internal Links=====================You can support ``[[internal links]]`` with the `registerInternalLinkHook`method.  There is no default handling for internal links.  If no hookhandles the link, it will appear unchanged in the output.  An internallink may have a `namespace:` prefix.  Hooks are registered per namespace,with 'None' for unprefixed links::    def internalLinkHook(parser_env, namespace, body):        ...        return replacement    parser.registerInternalLinkHook(None, internalLinkHook)  # called for [[link]]    parser.registerInternalLinkHook('Wikipedia', hook)       # called for [[Wikipedia: Link]]    parser.registerInternalLinkHook(':en', hook)             # called for [[:en:link]    parser.registerInternalLinkHook(':', hook)               # called for [[:any:link]]    parser.registerInternalLinkHook('*', hook)               # called for [[anything]]Examples::    from wikimarkup.parser import Parser    def wikipediaLinkHook(parser_env, namespace, body):        # namespace is going to be 'Wikipedia'        (article, pipe, text) = body.partition('|')        href = article.strip().capitalize().replace(' ', '_')        text = (text or article).strip()        return '&lt;a href=&quot;http://en.wikipedia.org/wiki/%s&quot;&gt;%s&lt;/a&gt;' % (href, text)    parser = Parser()    parser.registerInternalLinkHook('Wikipedia', wikipediaLinkHook)    print parser.parse(&quot;[[Wikipedia:public transport|public transportation]]&quot;)    print parser.parse(&quot;[[Wikipedia: bus]]&quot;)    import settings    from pytils.translit import slugify    from blog.models import Post    def byteflowLinkHook(parser_env, namespace, body):        (article, pipe, text) = body.partition('|')        slug = slugify(article.strip())        text = (text or article).strip()        try:            post = Post.objects.get(slug=slug)            href = post.get_absolute_url()        except Post.DoesNotExist:            href = '#'        return '&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;' % (href, text)    parser.registerInternalLinkHook(None, byteflowLinkHook)    parser.parse(&quot;[[Blog post title]]&quot;)</longdescription>
</pkgmetadata>