<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>##################################################################################################Python JSON-RPC Client Server Library With Additional Support for BaseHTTPServer, CherryPy And CGI##################################################################################################.. image:: https://travis-ci.org/gerold-penz/python-jsonrpc.svg?branch=master        :target: https://travis-ci.org/gerold-penz/python-jsonrpc.. .. image:: https://readthedocs.org/projects/python-jsonrpc/badge/?version=latest        :target: https://readthedocs.org/projects/python-jsonrpc/?badge=latest        :alt: Documentation Status.. .. image:: https://coveralls.io/repos/gerold-penz/python-jsonrpc/badge.svg?branch=master&amp;service=github         :target: https://coveralls.io/github/gerold-penz/python-jsonrpc?branch=master============Installation============::    pip install python-jsonrpc===================HTTP Client Example===================.. code:: python    #!/usr/bin/env python    # coding: utf-8    import pyjsonrpc    http_client = pyjsonrpc.HttpClient(        url = &quot;http://example.com/jsonrpc&quot;,        username = &quot;Username&quot;,        password = &quot;Password&quot;    )    print http_client.call(&quot;add&quot;, 1, 2)    # Result: 3    # It is also possible to use the *method* name as *attribute* name.    print http_client.add(1, 2)    # Result: 3    # Notifications send messages to the server, without response.    http_client.notify(&quot;add&quot;, 3, 4)===================HTTP Server Example===================.. code:: python    #!/usr/bin/env python    # coding: utf-8    import pyjsonrpc    class RequestHandler(pyjsonrpc.HttpRequestHandler):        @pyjsonrpc.rpcmethod        def add(self, a, b):            &quot;&quot;&quot;Test method&quot;&quot;&quot;            return a + b    # Threading HTTP-Server    http_server = pyjsonrpc.ThreadingHttpServer(        server_address = ('localhost', 8080),        RequestHandlerClass = RequestHandler    )    print &quot;Starting HTTP server ...&quot;    print &quot;URL: http://localhost:8080&quot;    http_server.serve_forever()===========CGI Example===========.. code:: python    #!/usr/bin/env python    # coding: utf-8    import pyjsonrpc    def add(a, b):        &quot;&quot;&quot;Test function&quot;&quot;&quot;        return a + b    # Handles the JSON-RPC request and gets back the result to STDOUT    pyjsonrpc.handle_cgi_request(methods = dict(add = add))=====================Library Usage Example=====================.. code:: python    #!/usr/bin/env python    # coding: utf-8    import pyjsonrpc    class JsonRpc(pyjsonrpc.JsonRpc):        @pyjsonrpc.rpcmethod        def add(self, a, b):            &quot;&quot;&quot;Test method&quot;&quot;&quot;            return a + b    # 1. Initialize JSON-RPC class    rpc = JsonRpc()    # 2. Create JSON-RPC string with parameters (= request string)    request_json = pyjsonrpc.create_request_json(&quot;add&quot;, 1, 2)    # request_json = '{&quot;method&quot;: &quot;add&quot;, &quot;params&quot;: [1, 2], &quot;id&quot;: &quot;...&quot;, &quot;jsonrpc&quot;: &quot;2.0&quot;}'    # 3. Call the JSON-RPC function and get back the JSON-RPC result (= response string)    response_json = rpc.call(request_json)    # response_json = '{&quot;result&quot;: 3, &quot;id&quot;: &quot;...&quot;, &quot;jsonrpc&quot;: &quot;2.0&quot;}'    # 4. Convert JSON-RPC string to Python objects    response = pyjsonrpc.parse_response_json(response_json)    # 5. Print result or error    if response.error:        print &quot;Error:&quot;, response.error.code, response.error.message    else:        print &quot;Result:&quot;, response.result================CherryPy Example================.. code:: python    #!/usr/bin/env python    # coding: utf-8    import cherrypy    from pyjsonrpc.cp import CherryPyJsonRpc, rpcmethod    class Root(CherryPyJsonRpc):        @rpcmethod        def add(self, a, b):            &quot;&quot;&quot;Test method&quot;&quot;&quot;            return a + b        index = CherryPyJsonRpc.request_handler    print &quot;Starting HTTP server ...&quot;    print &quot;URL: http://localhost:8080&quot;    cherrypy.quickstart(Root())========Licenses========- GNU Library or Lesser General Public License (LGPL)- MIT License</longdescription>
</pkgmetadata>