<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Hellosign Python SDK-------------------A Python wrapper for the [HelloSign API](http://www.hellosign.com/api)## InstallationInstall using `easy_install`:````sheasy_install hellosign-python-sdk````Install using `pip`:````shpip install hellosign-python-sdk````Install from code:````shgit clone https://github.com/HelloSign/hellosign-python-sdk.gitcd hellosign-python-sdkpython setup.py install````## ConfigurationIn your application, import `HSClient`:````pythonfrom hellosign_sdk import HSClient````Then create a HSClient object and pass authentication information to initialize it:````python# Initialize HSClient using email and passwordclient = HSClient(email_address=&quot;api_user@example.com&quot;, password=&quot;your_password&quot;)# Initialize HSClient using api keyclient = HSClient(api_key=&quot;your_api_key&quot;)# Initialize HSClient using api tokenclient = HSClient(access_token=&quot;your_api_access_token&quot;)````Note: In case you initialize the HSClient with all the above credentials, the priority order is as follow: access_token, api_key, then email and password.## UsageFor more information about the wrapper, its methods and parameters visit our detailed API documentation on  [readthedocs](http://hellosign-python-sdk.readthedocs.org/en/v3/py-modindex.html).### Account#### Get current account information````pythonaccount = client.get_account_info()````The account information is also stored in `client.account`. For example, to print the `email_address` of your account:````pythonprint client.account.email_address````#### Update your account information````pythonclient.account.callback_url = &quot;https://www.example.com/callback&quot;client.update_account_info()````#### Create a new HelloSign account````pythonnew_account = client.create_account(&quot;new_user@example.com&quot;)````### Signature Request#### Get a Signature Request````pythonsignature_request = client.get_signature_request(&quot;fa5c8a0b0f492d768749333ad6fcc214c111e967&quot;)print signature_request.requester_email_addressprint signature_request.signature_request_id````#### Get a list of your Signature Requests````pythonsignature_request_list = client.get_signature_request_list(page=1)# Print out the name of the signers in every signature requestfor signature_request in signature_request_list:    print signature_request.signatures[0].signer_name````#### Send a Signature Request````pythonfiles = [&quot;NDA.pdf&quot;, &quot;AppendixA.pdf&quot;]signers = [    {&quot;name&quot;: &quot;Jack&quot;, &quot;email_address&quot;: &quot;jack@example.com&quot;},    {&quot;name&quot;: &quot;Jill&quot;, &quot;email_address&quot;: &quot;jill@example.com&quot;}]cc_email_addresses = [&quot;lawyer@hellosign.com&quot;, &quot;lawyer@example.com&quot;]# Send a signature request with remote filessignature_request = client.send_signature_request(                                test_mode=True,                                files=None,                                file_urls=[&quot;http://www.example.com/download/sample.pdf&quot;],                                title=&quot;NDA with Acme Co.&quot;,                                subject=&quot;The NDA we talked about&quot;,                                message=&quot;Please sign this NDA and then we can discuss more. Let me know if you have any questions.&quot;,                                signing_redirect_url=None,                                signers=signers,                                cc_email_addresses=cc_email_addresses)# Send a signature request with uploaded filessignature_request = client.send_signature_request(                                test_mode=True,                                files=files,                                file_urls=None,                                title=&quot;NDA with Acme Co.&quot;,                                subject=&quot;The NDA we talked about&quot;,                                message=&quot;Please sign this NDA and then we can discuss more. Let me know if you have any questions.&quot;,                                signing_redirect_url=None,                                signers=signers,                                cc_email_addresses=cc_email_addresses)````#### Send a Signature Request with Template````pythonsigners = [    {&quot;name&quot;: &quot;Jack&quot;, &quot;email_address&quot;: &quot;jack@example.com&quot;},    {&quot;name&quot;: &quot;Jill&quot;, &quot;email_address&quot;: &quot;jill@example.com&quot;}]cc_email_addresses = [&quot;lawyer@hellosign.com&quot;, &quot;lawyer@example.com&quot;]ccs = [    { &quot;email_address&quot;: &quot;lawyer@hellosign.com&quot;, &quot;role_name&quot;: &quot;Lawyer 1&quot; },    { &quot;email_address&quot;: &quot;lawyer@example.com&quot;, &quot;role_name&quot;: &quot;Lawyer 2&quot; }]custom_fields = [    { &quot;Field 1&quot;: &quot;Value 1&quot; },    { &quot;Field 2&quot;: &quot;Value 2&quot; }]# Send a signature request with uploaded filessignature_request = client.send_signature_request_with_template(                                        test_mode=True,                                        template_id=&quot;fa5c8a0b0f492d768749333ad6fcc214c111e967&quot;,                                        title=&quot;NDA with Acme Co.&quot;,                                        subject=&quot;The NDA we talked about&quot;,                                        message=&quot;Please sign this NDA and then we can discuss more. Let me know if you have any questions.&quot;,                                        signing_redirect_url=None,                                        signers=signers,                                        ccs=ccs,                                        custom_fields=custom_fields)````### Embedded#### Embedded signing````pythonsigners = [    {&quot;name&quot;: &quot;Jack&quot;, &quot;email_address&quot;: &quot;jack@example.com&quot;},    {&quot;name&quot;: &quot;Jill&quot;, &quot;email_address&quot;: &quot;jill@example.com&quot;}]signature_request = client.send_signature_request_embedded(                                test_mode=True,                                client_id=&quot;YOUR CLIENT ID&quot;,                                files=[&quot;path/to/NDA.pdf&quot;],                                title=&quot;NDA with Acme Co.&quot;,                                subject=&quot;The NDA we talked about&quot;,                                message=&quot;Please sign this NDA and then we can discuss more. Let me know if you have any questions.&quot;,                                signing_redirect_url=None                                signers=signers,                                cc_email_addresses=None,                                form_fields_per_document=None)# Retrieve the signature url to pass to the embedded iFramefor signature in signature_request.signatures:    embedded_obj = client.get_embedded_object(signature.signature_id)    sign_url = embedded_obj.sign_url````More information about the asscociated front-end code can be found [here](https://www.hellosign.com/api/embeddedSigningWalkthrough#ClientSide)#### Embedded requesting````python# Create a draft and retrieve the claim urldraft = client.create_embedded_unclaimed_draft(                    test_mode=True,                    client_id=&quot;YOUR CLIENT ID&quot;,                    requester_email_address=&quot;requester@example.com&quot;,                    files=[&quot;path/to/NDA.pdf&quot;],                    draft_type=&quot;signature_request&quot;,                    subject=&quot;The NDA we talked about&quot;,                    message=&quot;Please sign this NDA and then we can discuss more. Let me know if you have any questions.&quot;,                    is_for_embedded_signing=False)claim_url = draft.claim_url````More information about the associated front-end code can be found [here](https://app.hellosign.com/api/embeddedRequestingWalkthrough#EmbeddedRequestingClientSide)Once the user edits the draft in the embedded iFrame and sends the signature request your app callback will receive a `signature_request_sent` event containing a `SignatureRequest` object. If we had used `is_for_embedded_signing=True`, we would want to get the signature ids out of the `SignatureRequest` from that event and fetch the signature urls at this point. In your event callback handler, you will need to do something like this:````pythonclient = HSClient(api_key='your_api_key')event_data = json.loads(request.POST.get('json'))if event_data['event']['event_type'] == 'signature_request_sent':    sig_req = event_data['signature_request']    for sig in sig_req['signature_request']['signatures']:        embedded_obj = client.get_embedded_object(sig['signature_id'])        sign_url = embedded_obj.sign_url        # Save sign_url somewhere````## TestsYou can run the test suite by executing the following commands after you cloned the repo:Note that it requires to have a HelloSign account, with at least one template and one api app.**WARNING:** We advise against running the tests against your personal account as they perform destructive actions.```cd hellosign_sdkcp tests/test_helper.sample.py tests/test_helper.pyHELLOSIGN_API_KEY='YOUR API KEY'HELLOSIGN_API_CLIENT_ID='YOUR APP CLIENT ID'HELLOSIGN_API_CLIENT_SECRET='YOUR APP CLIENT SECRET'nosetests --with-coverage --cover-package=hellosign_sdk --include=hellosign_sdk/tests/unit_tests/* --include=hellosign_sdk/tests/functional_tests/*```## Additional notes### Local callbacksWe do not allow app callbacks (event or OAuth) to be set to localhost. However it is still possible to test callbacks against a local server. Tunneling services such as [ngrok](http://ngrok.com) can help you set this up.## License```The MIT License (MIT)Copyright (C) 2015 hellosign.comPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.```</longdescription>
</pkgmetadata>