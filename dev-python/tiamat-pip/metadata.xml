<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Tiamat PipPip handling for tiamat projects## SetupIn order to be able to `pip install` packages which can be used with your tiamat packaged applicationyou need to add `tiamat-pip` as a dependency and your `run.py` should look similar to:```python#!/usr/bin/env python3import sysimport multiprocessingimport tiamatpip.cliimport tiamatpip.configureimport mainapp# Configure the path where to install the new packagestiamatpip.configure.set_user_site_packages_path(&quot;THIS SHOULD BE A HARDCODED PATH&quot;)def main(argv):    # Let's see if we should be handling pip related stuff    if tiamatpip.cli.should_redirect_argv(argv):        tiamatpip.cli.process_pip_argv(argv)        # You can choose to `return` but there's really no need since the pip command        # interceptions will trigger a `sys.exit` with the appropriate exit code.    # If we reached this far, it means we're not handling pip stuff    # Your application logic can resume    mainapp.main(argv)    sys.exit(0)if __name__ == &quot;__main__&quot;:    if sys.platform.startswith(&quot;win&quot;):        multiprocessing.freeze_support()    main(sys.argv)```## UsageWhen your package is compiled with tiamat and includes tiamat-pip, the ``pip`` commands getintercepted and the code logic runs within your packaged binary python runtime.All ``pip`` commands and their respective CLI flags are supported.### Showing the ``pip`` usage and help```shellyour-project-binary pip --help``````shellyour-project-binary pip install --help```### Installing a python package```shellyour-project-binary pip install foo``````shellyour-project-binary pip install foo&gt;=2.1.0```### Listing installed packages```shellyour-project-binary pip list```This will list all of the python packages that were installed using pip, which,**are not included in the binary**.### Listing packages shipped with the binaryIf you want to know which packages, and their respective versions, were shippedwith the tiamat binary, issue the following command:```shellyour-project-binary pip frozen```This command **is not supported by ``pip``**. We intercept the call and get thepackage listing from the right place.The CLI flags for this command are the same as for ``pip list``.### Uninstalling a package```shellyour-project-binary pip uninstall foo```**ATTENTION**: Only the packages installed by pip can be uninstalled. The packagesthat were shipped with the binary **cannot** be uninstalled.## Known Issues* Getting the version of an upgraded package using ``pkg_resources.get_distribution(pkgname).version``returns the version of the package that was shipped with the tiamat binary and not the upgraded packageversion. See [#11](https://gitlab.com/saltstack/pop/tiamat-pip/-/issues/11) for more information.</longdescription>
</pkgmetadata>