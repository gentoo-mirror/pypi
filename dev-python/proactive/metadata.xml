<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![License BSD](https://img.shields.io/badge/License-BSD-blue.svg &quot;License BSD&quot;)![Python 3](https://img.shields.io/badge/Python-3-brightgreen.svg &quot;Python 3&quot;)![Proactive](https://img.shields.io/pypi/v/proactive.svg &quot;Proactive&quot;)[![Documentation Status](https://readthedocs.org/projects/proactive-python-client/badge/?version=latest)](https://proactive-python-client.readthedocs.io/en/latest/?badge=latest)# ProActive Python ClientThis module allows users to interact with a running ProActive Scheduler and Resource Manager.NOTE: To know how to use the Proactive Python Client in a more advanced way, please follow the link to see our [documentation](https://proactive-python-client.readthedocs.io/en/latest/).### 1. Requirements* Python 2 and 3### 2. Installation`pip install proactive --upgrade`### 3. How to buildJust run `gradlew clean build`This will generate the `proactive-XXX.zip` file inside project's `dist` folder.Run `pip install dist/proactive-XXX.zip` to install the package in your python environment.### 4. Build and run tests`./gradlew clean build -Pproactive_url=XXX -Pusername=XXX -Ppassword=XXX`Replace `XXX` with the respective information.### 5. Usage```import osimport getpassimport proactiveprint(&quot;Logging on proactive-server...&quot;)proactive_host = 'try.activeeon.com'proactive_port = '8080'proactive_url  = &quot;http://&quot;+proactive_host+&quot;:&quot;+proactive_portprint(&quot;Connecting on: &quot; + proactive_url)javaopts=[]# uncomment for detailed logs# javaopts.append('-Dlog4j.configuration=file:'+os.path.join(os.getcwd(),'log4j.properties'))gateway = proactive.ProActiveGateway(proactive_url, javaopts)gateway.connect(username=&quot;&quot;, password=&quot;&quot;)  # put your login here!# Or uncomment the following line to protect your password# gateway.connect(username=&quot;&quot;, password=getpass.getpass(prompt='Password: '))assert gateway.isConnected() is Trueprint(&quot;Connected&quot;)try:    print(&quot;Creating a proactive task...&quot;)    proactive_task = gateway.createPythonTask()    proactive_task.setTaskName(&quot;SimplePythonTask&quot;)    proactive_task.setTaskImplementationFromFile('main.py', ['param1', 'param2'])    proactive_task.addInputFile('scripts/__init__.py')    proactive_task.addInputFile('scripts/hello.py')        print(&quot;Adding a fork environment to the proactive task...&quot;)    proactive_fork_env = gateway.createDefaultForkEnvironment()    proactive_fork_env.setImplementationFromFile(&quot;scripts/fork_env.py&quot;)    proactive_task.setForkEnvironment(proactive_fork_env)        print(&quot;Adding a selection script to the proactive task...&quot;)    proactive_selection_script = gateway.createDefaultSelectionScript()    proactive_selection_script.setImplementationFromFile(&quot;scripts/selection_script.py&quot;)    proactive_task.setSelectionScript(proactive_selection_script)        print(&quot;Creating a proactive job...&quot;)    proactive_job = gateway.createJob()    proactive_job.setJobName(&quot;SimpleJob&quot;)    proactive_job.addTask(proactive_task)    proactive_job.setInputFolder(os.getcwd())    proactive_job.setOutputFolder(os.getcwd())        print(&quot;Submitting the job to the proactive scheduler...&quot;)    job_id = gateway.submitJob(proactive_job, debug=False)    print(&quot;job_id: &quot; + str(job_id))        print(&quot;Getting job output...&quot;)    job_result = gateway.getJobResult(job_id)    print(job_result)finally:    print(&quot;Disconnecting&quot;)    gateway.disconnect()    print(&quot;Disconnected&quot;)    gateway.terminate()    print(&quot;Finished&quot;)```### 6. Examples#### 6.1 Creating a Python task```...proactive_task = gateway.createPythonTask()proactive_task.setTaskName(&quot;SimplePythonTask&quot;)proactive_task.setTaskImplementation(&quot;&quot;&quot;print(&quot;Hello world!&quot;)&quot;&quot;&quot;)# or by# proactive_task.setTaskImplementationFromFile(&quot;scripts/print_python_env.py&quot;)# proactive_task.setTaskImplementationFromLambdaFunction(lambda: 88 - 20 * 10)# add attached files# proactive_task.addInputFile('scripts/hello.py')# select your python version# proactive_task.addGenericInformation(&quot;PYTHON_COMMAND&quot;, &quot;/usr/bin/python3&quot;)...```#### 6.2 Adding a fork environment```...fork_env = gateway.createDefaultForkEnvironment()fork_env.setImplementationFromFile(&quot;scripts/fork_env.py&quot;)proactive_task.setForkEnvironment(fork_env)...```#### 6.3 Adding a selection script```...selection_script = gateway.createDefaultSelectionScript()selection_script.setImplementationFromFile(&quot;scripts/selection_script.py&quot;)proactive_task.setSelectionScript(selection_script)...```#### 6.4 Create a job and add your task```...proactive_job = gateway.createJob()proactive_job.setJobName(&quot;SimpleJob&quot;)proactive_job.addTask(proactive_task)# for file transfer# proactive_job.setInputFolder(os.getcwd())# proactive_job.setOutputFolder(os.getcwd())...```#### 6.5 Submit your job to the scheduler```...job_id = gateway.submitJob(proactive_job, debug=False) # set debug=True for more debug info...```#### 6.6 Get the job results```...print(&quot;Getting job output...&quot;)job_result = gateway.getJobResult(job_id)print(job_result)...```</longdescription>
</pkgmetadata>