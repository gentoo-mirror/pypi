<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>vk.com API python wrapper for asyncio=====================================for old version of python you can use https://github.com/dimka665/vkFeatures--------* asynchronous* support python 3.5+ versions* have only one dependency - ``aiohttp 3+``* support two-factor authentication* support socks proxy with ``aiohttp-socks``* support rate limit of requests* support Long Poll connectionTODO----* need refactoring tests for ``AsyncVkExecuteRequestPool``Install-------.. code-block:: bash    pip install aiovkExamples========Annotation----------In all the examples below, I will give only the ``{code}``.. code-block:: python    async def func():        {code}    loop = asyncio.get_event_loop()    loop.run_until_complete(func())Authorization-------------**TokenSession** - if you already have token or you use requests which don't require token.. code-block:: python    session = TokenSession()    session = TokenSession(access_token='asdf123..')**ImplicitSession** - client authorization in js apps and standalone (desktop and mobile) apps.. code-block:: python    &gt;&gt;&gt; session = ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID)    &gt;&gt;&gt; await session.authorize()    &gt;&gt;&gt; session.access_token    asdfa2321afsdf12eadasf123...With scopes:.. code-block:: python    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, 'notify')    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, 'notify,friends')    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, ['notify', 'friends'])    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, 3)  # notify and friendsAlso you can use ``SimpleImplicitSessionMixin`` for entering confirmation codeor captcha key**AuthorizationCodeSession** - authorization for server apps or Open APISee https://vk.com/dev/authcode_flow_user for getting the CODE.. code-block:: python    &gt;&gt;&gt; session = AuthorizationCodeSession(APP_ID, APP_SECRET, REDIRECT_URI, CODE)    &gt;&gt;&gt; await session.authorize()    &gt;&gt;&gt; session.access_token    asdfa2321afsdf12eadasf123...Or:.. code-block:: python    &gt;&gt;&gt; session = AuthorizationCodeSession(APP_ID, APP_SECRET, REDIRECT_URI)    &gt;&gt;&gt; await session.authorize(CODE)    &gt;&gt;&gt; session.access_token    asdfa2321afsdf12eadasf123...**Authorization using context manager** - you won't need to use session.close() after work.. code-block:: python    async with aiovk.TokenSession(access_token=YOUR_VK_TOKEN) as ses:        api = API(ses)...And your session will be closed after all done or code fail(similar to simple &quot;with&quot; usage)Works with all types of authorizationDrivers-------**HttpDriver** - default driver for using ``aiohttp``.. code-block:: python    &gt;&gt;&gt; driver = HttpDriver()    &gt;&gt;&gt; driver = HttpDriver(timeout=10)  # default timeout for all requests.. code-block:: python    &gt;&gt;&gt; driver = ProxyDriver(PROXY_ADDRESS, PORT)  # 1234 is port    &gt;&gt;&gt; driver = ProxyDriver(PROXY_ADDRESS, PORT, timeout=10)    &gt;&gt;&gt; driver = ProxyDriver(PROXY_ADDRESS, PORT, PROXY_LOGIN, PROXY_PASSWORD, timeout=10)How to use custom driver with session:.. code-block:: python    &gt;&gt;&gt; session = TokenSession(..., driver=HttpDriver())How to use driver with own loop:.. code-block:: python    &gt;&gt;&gt; loop = asyncio.get_event_loop()    &gt;&gt;&gt; asyncio.set_event_loop(None)    &gt;&gt;&gt; session = TokenSession(driver=HttpDriver(loop=loop))  # or ProxyDriverHow to use driver with custom http session object:Solve next problem: https://stackoverflow.com/questions/29827642/asynchronous-aiohttp-requests-fails-but-synchronous-requests-succeed.. code-block:: python    &gt;&gt;&gt; connector = aiohttp.TCPConnector(verify_ssl=False)    &gt;&gt;&gt; session = aiohttp.ClientSession(connector=connector)    &gt;&gt;&gt; driver = HttpDriver(loop=loop, session=session)**LimitRateDriverMixin** - mixin class what allow you create new drivers with speed rate limits.. code-block:: python    &gt;&gt;&gt; class ExampleDriver(LimitRateDriverMixin, HttpDriver):    ...     requests_per_period = 3    ...     period = 1  #secondsVK API------First variant:.. code-block:: python    &gt;&gt;&gt; session = TokenSession()    &gt;&gt;&gt; api = API(session)    &gt;&gt;&gt; await api.users.get(user_ids=1)    [{'first_name': 'Pavel', 'last_name': 'Durov', 'id': 1}]Second variant:.. code-block:: python    &gt;&gt;&gt; session = TokenSession()    &gt;&gt;&gt; api = API(session)    &gt;&gt;&gt; await api('users.get', user_ids=1)    [{'first_name': 'Pavel', 'last_name': 'Durov', 'id': 1}]Also you can add ``timeout`` argument for each request or define it in the sessionSee https://vk.com/dev/methods for detailed API guide.Lazy VK API-----------It is useful when a bot has a large message flow.. code-block:: python    &gt;&gt;&gt; session = TokenSession()    &gt;&gt;&gt; api = LazyAPI(session)    &gt;&gt;&gt; message = api.users.get(user_ids=1)    &gt;&gt;&gt; await message()    [{'first_name': 'Pavel', 'last_name': 'Durov', 'id': 1}]Supports both variants like API objectUser Long Poll--------------For documentation, see: https://vk.com/dev/using_longpollUse exist API object.. code-block:: python    &gt;&gt;&gt; api = API(session)    &gt;&gt;&gt; lp = UserLongPoll(api, mode=2)  # default wait=25    &gt;&gt;&gt; await lp.wait()    {&quot;ts&quot;:1820350345,&quot;updates&quot;:[...]}    &gt;&gt;&gt; await lp.wait()    {&quot;ts&quot;:1820351011,&quot;updates&quot;:[...]}Use Session object.. code-block:: python    &gt;&gt;&gt; lp = UserLongPoll(session, mode=2)  # default wait=25    &gt;&gt;&gt; await lp.wait()    {&quot;ts&quot;:1820350345,&quot;updates&quot;:[...]}    &gt;&gt;&gt; await lp.get_pts()  # return pts    191231223    &gt;&gt;&gt; await lp.get_pts(need_ts=True)  # return pts, ts    191231223, 1820350345You can iterate over events.. code-block:: python    &gt;&gt;&gt; async for event in lp.iter():    ...     print(event)    {&quot;type&quot;:..., &quot;object&quot;: {...}}Notice that ``wait`` value only for long pool connection.Real pause could be more ``wait`` time because of need timefor authorization (if needed), reconnect and etc.Bots Long Poll--------------For documentation, see: https://vk.com/dev/bots_longpollUse exist API object.. code-block:: python    &gt;&gt;&gt; api = API(session)    &gt;&gt;&gt; lp = BotsLongPoll(api, group_id=1)  # default wait=25    &gt;&gt;&gt; await lp.wait()    {&quot;ts&quot;:345,&quot;updates&quot;:[...]}    &gt;&gt;&gt; await lp.wait()    {&quot;ts&quot;:346,&quot;updates&quot;:[...]}Use Session object.. code-block:: python    &gt;&gt;&gt; lp = BotsLongPoll(session, group_id=1)  # default wait=25    &gt;&gt;&gt; await lp.wait()    {&quot;ts&quot;:78455,&quot;updates&quot;:[...]}    &gt;&gt;&gt; await lp.get_pts()  # return pts    191231223    &gt;&gt;&gt; await lp.get_pts(need_ts=True)  # return pts, ts    191231223, 1820350345BotsLongPoll supports iterating too.. code-block:: python    &gt;&gt;&gt; async for event in lp.iter():    ...     print(event)    {&quot;type&quot;:..., &quot;object&quot;: {...}}Notice that ``wait`` value only for long pool connection.Real pause could be more ``wait`` time because of need timefor authorization (if needed), reconnect and etc.Async execute request pool--------------------------For documentation, see: https://vk.com/dev/execute.. code-block:: python    from aiovk.pools import AsyncVkExecuteRequestPool    async with AsyncVkExecuteRequestPool() as pool:        response = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 1})        response2 = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 2})        response3 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': 1})        response4 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': -1})    &gt;&gt;&gt; print(response.ok)    True    &gt;&gt;&gt; print(response.result)    [{'id': 1, 'first_name': 'Павел', 'last_name': 'Дуров'}]    &gt;&gt;&gt; print(response2.result)    [{'id': 2, 'first_name': 'Александра', 'last_name': 'Владимирова'}]    &gt;&gt;&gt; print(response3.result)    [{'id': 1, 'first_name': 'Павел', 'last_name': 'Дуров'}]    &gt;&gt;&gt; print(response4.ok)    False    &gt;&gt;&gt; print(response4.error)    {'method': 'users.get', 'error_code': 113, 'error_msg': 'Invalid user id'}or.. code-block:: python    from aiovk.pools import AsyncVkExecuteRequestPool    pool = AsyncVkExecuteRequestPool()    response = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 1})    response2 = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 2})    response3 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': 1})    response4 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': -1})    await pool.execute()    ...</longdescription>
</pkgmetadata>