<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/ovh/python-ovh/raw/master/docs/img/logo.png           :alt: Python &amp; OVH APIs           :target: https://pypi.python.org/pypi/ovhLightweight wrapper around OVHcloud's APIs. Handles all the hard work includingcredential creation and requests signing... image:: https://img.shields.io/pypi/v/ovh.svg           :alt: PyPi Version           :target: https://pypi.python.org/pypi/ovh.. image:: https://img.shields.io/pypi/status/ovh.svg           :alt: PyPi repository status           :target: https://pypi.python.org/pypi/ovh.. image:: https://img.shields.io/pypi/pyversions/ovh.svg           :alt: PyPi supported Python versions           :target: https://pypi.python.org/pypi/ovh.. image:: https://img.shields.io/pypi/wheel/ovh.svg           :alt: PyPi Wheel status           :target: https://pypi.python.org/pypi/ovh.. image:: https://github.com/ovh/python-ovh/actions/workflows/test.yaml/badge.svg?branch=master           :alt: Build Status           :target: https://github.com/ovh/python-ovh/actions/workflows/test.yaml.. image:: https://coveralls.io/repos/github/ovh/python-ovh/badge.svg           :alt: Coverage Status           :target: https://coveralls.io/github/ovh/python-ovh.. code:: python    import ovh    # Instantiate. Visit https://api.ovh.com/createToken/?GET=/me    # to get your credentials    client = ovh.Client(        endpoint='ovh-eu',        application_key='&lt;application key&gt;',        application_secret='&lt;application secret&gt;',        consumer_key='&lt;consumer key&gt;',    )    # Print nice welcome message    print(&quot;Welcome&quot;, client.get('/me')['firstname'])Installation============The python wrapper works with Python 3.6+.The easiest way to get the latest stable release is to grab it from `pypi&lt;https://pypi.python.org/pypi/ovh&gt;`_ using ``pip``... code:: bash    pip install ovhAlternatively, you may get latest development version directly from Git... code:: bash    pip install -e git+https://github.com/ovh/python-ovh.git#egg=ovhPeople looking for Python 2 compatibility should use 0.6.x version.Example Usage=============Use the API on behalf of a user-------------------------------1. Create an application************************To interact with the APIs, the SDK needs to identify itself using an``application_key`` and an ``application_secret``. To get them, you needto register your application. Depending the API you plan to use, visit:- `OVH Europe &lt;https://eu.api.ovh.com/createApp/&gt;`_- `OVH US &lt;https://api.us.ovhcloud.com/createApp/&gt;`_- `OVH North-America &lt;https://ca.api.ovh.com/createApp/&gt;`_- `So you Start Europe &lt;https://eu.api.soyoustart.com/createApp/&gt;`_- `So you Start North America &lt;https://ca.api.soyoustart.com/createApp/&gt;`_- `Kimsufi Europe &lt;https://eu.api.kimsufi.com/createApp/&gt;`_- `Kimsufi North America &lt;https://ca.api.kimsufi.com/createApp/&gt;`_Once created, you will obtain an **application key (AK)** and an **applicationsecret (AS)**.2. Configure your application*****************************The easiest and safest way to use your application's credentials is to create an``ovh.conf`` configuration file in application's working directory. Here is howit looks like:.. code:: ini    [default]    ; general configuration: default endpoint    endpoint=ovh-eu    [ovh-eu]    ; configuration specific to 'ovh-eu' endpoint    application_key=my_app_key    application_secret=my_application_secret    ; uncomment following line when writing a script application    ; with a single consumer key.    ;consumer_key=my_consumer_keyDepending on the API you want to use, you may set the ``endpoint`` to:* ``ovh-eu`` for OVH Europe API* ``ovh-us`` for OVH US API* ``ovh-ca`` for OVH North-America API* ``soyoustart-eu`` for So you Start Europe API* ``soyoustart-ca`` for So you Start North America API* ``kimsufi-eu`` for Kimsufi Europe API* ``kimsufi-ca`` for Kimsufi North America APISee Configuration_ for more information on available configuration mechanisms... note:: When using a versioning system, make sure to add ``ovh.conf`` to ignored          files. It contains confidential/security-sensitive information!3. Authorize your application to access a customer account**********************************************************To allow your application to access a customer account using the API on yourbehalf, you need a **consumer key (CK)**.Here is a sample code you can use to allow your application to access acustomer's information:.. code:: python    import ovh    # create a client using configuration    client = ovh.Client()    # Request RO, /me API access    ck = client.new_consumer_key_request()    ck.add_rules(ovh.API_READ_ONLY, &quot;/me&quot;)    # Request token    validation = ck.request()    print(&quot;Please visit %s to authenticate&quot; % validation['validationUrl'])    input(&quot;and press Enter to continue...&quot;)    # Print nice welcome message    print(&quot;Welcome&quot;, client.get('/me')['firstname'])    print(&quot;Btw, your 'consumerKey' is '%s'&quot; % validation['consumerKey'])Returned ``consumerKey`` should then be kept to avoid re-authenticating yourend-user on each use... note:: To request full and unlimited access to the API, you may use ``add_recursive_rules``:.. code:: python    # Allow all GET, POST, PUT, DELETE on /* (full API)    ck.add_recursive_rules(ovh.API_READ_WRITE, '/')Install a new mail redirection------------------------------e-mail redirections may be freely configured on domains and DNS zones hosted byOVH to an arbitrary destination e-mail using API call``POST /email/domain/{domain}/redirection``.For this call, the api specifies that the source address shall be given under the``from`` keyword. Which is a problem as this is also a reserved Python keyword.In this case, simply prefix it with a '_', the wrapper will automatically detectit as being a prefixed reserved keyword and will substitute it. Such aliasingis only supported with reserved keywords... code:: python    import ovh    DOMAIN = &quot;example.com&quot;    SOURCE = &quot;sales@example.com&quot;    DESTINATION = &quot;contact@example.com&quot;    # create a client    client = ovh.Client()    # Create a new alias    client.post('/email/domain/%s/redirection' % DOMAIN,            _from=SOURCE,            to=DESTINATION,            localCopy=False        )    print(&quot;Installed new mail redirection from %s to %s&quot; % (SOURCE, DESTINATION))Grab bill list--------------Let's say you want to integrate OVH bills into your own billing system, youcould just script around the ``/me/bills`` endpoints and even get the detailsof each bill lines using ``/me/bill/{billId}/details/{billDetailId}``.This example assumes an existing Configuration_ with valid ``application_key``,``application_secret`` and ``consumer_key``... code:: python    import ovh    # create a client    client = ovh.Client()    # Grab bill list    bills = client.get('/me/bill')    for bill in bills:        details = client.get('/me/bill/%s' % bill)        print(&quot;%12s (%s): %10s --&gt; %s&quot; % (            bill,            details['date'],            details['priceWithTax']['text'],            details['pdfUrl'],        ))Enable network burst in SBG1----------------------------'Network burst' is a free service but is opt-in. What if you have, say, 10servers in ``SBG-1`` datacenter? You certainly don't want to activate itmanually for each servers. You could take advantage of a code like this.This example assumes an existing Configuration_ with valid ``application_key``,``application_secret`` and ``consumer_key``... code:: python    import ovh    # create a client    client = ovh.Client()    # get list of all server names    servers = client.get('/dedicated/server/')    # find all servers in SBG-1 datacenter    for server in servers:        details = client.get('/dedicated/server/%s' % server)        if details['datacenter'] == 'sbg1':            # enable burst on server            client.put('/dedicated/server/%s/burst' % server, status='active')            print(&quot;Enabled burst for %s server located in SBG-1&quot; % server)List application authorized to access your account--------------------------------------------------Thanks to the application key / consumer key mechanism, it is possible tofinely track applications having access to your data and revoke this access.This examples lists validated applications. It could easily be adapted tomanage revocation too.This example assumes an existing Configuration_ with valid ``application_key``,``application_secret`` and ``consumer_key``... code:: python    import ovh    from tabulate import tabulate    # create a client    client = ovh.Client()    credentials = client.get('/me/api/credential', status='validated')    # pretty print credentials status    table = []    for credential_id in credentials:        credential_method = '/me/api/credential/'+str(credential_id)        credential = client.get(credential_method)        application = client.get(credential_method+'/application')        table.append([            credential_id,            '[%s] %s' % (application['status'], application['name']),            application['description'],            credential['creation'],            credential['expiration'],            credential['lastUse'],        ])    print(tabulate(table, headers=['ID', 'App Name', 'Description',                                   'Token Creation', 'Token Expiration', 'Token Last Use']))Before running this example, make sure you have the`tabulate &lt;https://pypi.python.org/pypi/tabulate&gt;`_ library installed. It's apretty cool library to pretty print tabular data in a clean and easy way.&gt;&gt;&gt; pip install tabulateOpen a KVM (remote screen) on a dedicated server------------------------------------------------Recent dedicated servers come with an IPMI interface. A lightweight control board embeddedon the server. Using IPMI, it is possible to get a remote screen on a server. This isparticularly useful to tweak the BIOS or troubleshoot boot issues.Hopefully, this can easily be automated using a simple script. It assumes Java Web Start isfully installed on the machine and a consumer key allowed on the server exists... code:: python    import ovh    import sys    import time    import tempfile    import subprocess    # check arguments    if len(sys.argv) != 3:        print(&quot;Usage: %s SERVER_NAME ALLOWED_IP_V4&quot; % sys.argv[0])        sys.exit(1)    server_name = sys.argv[1]    allowed_ip = sys.argv[2]    # create a client    client = ovh.Client()    # create a KVM    client.post('/dedicated/server/'+server_name+'/features/ipmi/access', ipToAllow=allowed_ip, ttl=15, type=&quot;kvmipJnlp&quot;)    # open the KVM, when ready    while True:        try:            # use a named temfile and feed it to java web start            with tempfile.NamedTemporaryFile() as f:                f.write(client.get('/dedicated/server/'+server_name+'/features/ipmi/access?type=kvmipJnlp')['value'])                f.flush()                subprocess.call([&quot;javaws&quot;, f.name])            break        except:            time.sleep(1)Running is only a simple command line:.. code:: bash    # Basic    python open_kvm.py ns1234567.ip-42-42-42.eu $(curl ifconfig.ovh)    # Use a specific consumer key    OVH_CONSUMER_KEY=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA python open_kvm.py ns1234567.ip-42-42-42.eu $(curl -s ifconfig.ovh)Configuration=============You have 3 ways to provide configuration to the client: - write it directly in the application code - read environment variables or predefined configuration files - read it from a custom configuration fileEmbed the configuration in the code-----------------------------------The straightforward way to use OVH's API keys is to embed them directly in theapplication code. While this is very convenient, it lacks of elegance andflexibility.Example usage:.. code:: python    client = ovh.Client(        endpoint='ovh-eu',        application_key='&lt;application key&gt;',        application_secret='&lt;application secret&gt;',        consumer_key='&lt;consumer key&gt;',    )Environment vars and predefined configuration files---------------------------------------------------Alternatively it is suggested to use configuration files or environmentvariables so that the same code may run seamlessly in multiple environments.Production and development for instance.This wrapper will first look for direct instantiation parameters then``OVH_ENDPOINT``, ``OVH_APPLICATION_KEY``, ``OVH_APPLICATION_SECRET`` and``OVH_CONSUMER_KEY`` environment variables. If either of these parameter is notprovided, it will look for a configuration file of the form:.. code:: ini    [default]    ; general configuration: default endpoint    endpoint=ovh-eu    [ovh-eu]    ; configuration specific to 'ovh-eu' endpoint    application_key=my_app_key    application_secret=my_application_secret    consumer_key=my_consumer_keyThe client will successively attempt to locate this configuration file in1. Current working directory: ``./ovh.conf``2. Current user's home directory ``~/.ovh.conf``3. System wide configuration ``/etc/ovh.conf``This lookup mechanism makes it easy to overload credentials for a specificproject or user.Example usage:.. code:: python    client = ovh.Client()Use v1 and v2 API versions--------------------------When using OVHcloud APIs (not So you Start or Kimsufi ones), you are given theopportunity to aim for two API versions. For the European API, for example:- the v1 is reachable through https://eu.api.ovh.com/v1- the v2 is reachable through https://eu.api.ovh.com/v2- the legacy URL is https://eu.api.ovh.com/1.0 Calling ``client.get``, you can target the API version you want:.. code:: python    client = ovh.Client(endpoint=&quot;ovh-eu&quot;)    # Call to https://eu.api.ovh.com/v1/xdsl/xdsl-yourservice    client.get(&quot;/v1/xdsl/xdsl-yourservice&quot;)    # Call to https://eu.api.ovh.com/v2/xdsl/xdsl-yourservice    client.get(&quot;/v2/xdsl/xdsl-yourservice&quot;)    # Legacy call to https://eu.api.ovh.com/1.0/xdsl/xdsl-yourservice    client.get(&quot;/xdsl/xdsl-yourservice&quot;)Custom configuration file-------------------------You can also specify a custom configuration file. With this method, you won't be able to inherit values from environment.Example usage:.. code:: python    client = ovh.Client(config_file='/my/config.conf')Passing parameters==================You can call all the methods of the API with the necessary arguments.If an API needs an argument colliding with a Python reserved keyword, itcan be prefixed with an underscore. For example, ``from`` argument of``POST /email/domain/{domain}/redirection`` may be replaced by ``_from``.With characters invalid in python argument name like a dot, you can:.. code:: python    import ovh    params = {}    params['date.from'] = '2014-01-01'    params['date.to'] = '2015-01-01'    # create a client    client = ovh.Client()    # pass parameters using **    client.post('/me/bills', **params)Advanced usage==============Un-authenticated calls----------------------If the user has not authenticated yet (ie, there is no valid Consumer Key), youmay force ``python-ovh`` to issue the call by passing ``_need_auth=True`` tothe high level ``get()``, ``post()``, ``put()`` and ``delete()`` helpers or``need_auth=True`` to the low level method ``Client.call()`` and``Client.raw_call()``.This is needed when calling ``POST /auth/credential`` and ``GET /auth/time``which are used internally for authentication and can optionally be done formost of the ``/order`` calls.Access the raw requests response objects----------------------------------------The high level ``get()``, ``post()``, ``put()`` and ``delete()`` helpers as wellas the lower level ``call()`` will returned a parsed json response or raise incase of error.In some rare scenario, advanced setups, you may need to perform customerprocessing on the raw request response. It may be accessed via ``raw_call()``.This is the lowest level call in ``python-ovh``. See the source for moreinformation.Hacking=======This wrapper uses standard Python tools, so you should feel at home with it.Here is a quick outline of what it may look like. A good practice is to runthis from a ``virtualenv``.Get the sources---------------.. code:: bash    git clone https://github.com/ovh/python-ovh.git    cd python-ovh    python setup.py developYou've developed a new cool feature? Fixed an annoying bug? We'd be happyto hear from you!Run the tests-------------Simply run ``pytest``. It will automatically load its configuration from``setup.cfg`` and output full coverage status. Since we all love quality, pleasenote that we do not accept contributions with test coverage under 100%... code:: bash    pip install -e .[dev]    pytestBuild the documentation-----------------------Documentation is managed using the excellent ``Sphinx`` system. For example, tobuild HTML documentation:.. code:: bash    cd python-ovh/docs    make htmlSupported APIs==============OVH Europe----------- **Documentation**: https://eu.api.ovh.com/- **Community support**: api-subscribe@ml.ovh.net- **Console**: https://eu.api.ovh.com/console- **Create application credentials**: https://eu.api.ovh.com/createApp/- **Create script credentials** (all keys at once): https://eu.api.ovh.com/createToken/OVH US----------- **Documentation**: https://api.us.ovhcloud.com/- **Console**: https://api.us.ovhcloud.com/console/- **Create application credentials**: https://api.us.ovhcloud.com/createApp/- **Create script credentials** (all keys at once): https://api.us.ovhcloud.com/createToken/OVH North America------------------ **Documentation**: https://ca.api.ovh.com/- **Community support**: api-subscribe@ml.ovh.net- **Console**: https://ca.api.ovh.com/console- **Create application credentials**: https://ca.api.ovh.com/createApp/- **Create script credentials** (all keys at once): https://ca.api.ovh.com/createToken/So you Start Europe-------------------- **Documentation**: https://eu.api.soyoustart.com/- **Community support**: api-subscribe@ml.ovh.net- **Console**: https://eu.api.soyoustart.com/console/- **Create application credentials**: https://eu.api.soyoustart.com/createApp/- **Create script credentials** (all keys at once): https://eu.api.soyoustart.com/createToken/So you Start North America--------------------------- **Documentation**: https://ca.api.soyoustart.com/- **Community support**: api-subscribe@ml.ovh.net- **Console**: https://ca.api.soyoustart.com/console/- **Create application credentials**: https://ca.api.soyoustart.com/createApp/- **Create script credentials** (all keys at once): https://ca.api.soyoustart.com/createToken/Kimsufi Europe--------------- **Documentation**: https://eu.api.kimsufi.com/- **Community support**: api-subscribe@ml.ovh.net- **Console**: https://eu.api.kimsufi.com/console/- **Create application credentials**: https://eu.api.kimsufi.com/createApp/- **Create script credentials** (all keys at once): https://eu.api.kimsufi.com/createToken/Kimsufi North America---------------------- **Documentation**: https://ca.api.kimsufi.com/- **Community support**: api-subscribe@ml.ovh.net- **Console**: https://ca.api.kimsufi.com/console/- **Create application credentials**: https://ca.api.kimsufi.com/createApp/- **Create script credentials** (all keys at once): https://ca.api.kimsufi.com/createToken/Related links=============- **Contribute**: https://github.com/ovh/python-ovh- **Report bugs**: https://github.com/ovh/python-ovh/issues- **Download**: http://pypi.python.org/pypi/ovhLicense=======3-Clause BSD</longdescription>
</pkgmetadata>