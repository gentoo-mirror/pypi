<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Apple DeviceCheck&lt;!-- [![codecov](https://codecov.io/gh/Kylmakalle/devicecheck/branch/main/graph/badge.svg?token=2IKMSQUGH3)](https://codecov.io/gh/Kylmakalle/devicecheck) --&gt;[Accessing and Modifying Per-Device Data](https://developer.apple.com/documentation/devicecheck/accessing_and_modifying_per-device_data)Use a token from your app to validate requests, query and modify two per-device binary digits stored on Apple servers.# Features- Prevent API &amp; Content abuse with validating requests via Apple device token- Query and modify two bits of data to achieve up to **four remote states** saved on Apple servers- Easy to use configuration- [Examples](tests/integration)- Integrations with modern web frameworks# PrepareVisit https://developer.apple.com/account/resources/authkeys/list and create new **Key** with **DeviceCheck** permission# Install```pip install devicecheck```# Usage (Python)### Setup```pythonfrom devicecheck import DeviceCheckdevice_check = DeviceCheck(    team_id=&quot;XX7AN23E0Z&quot;,  # https://developer.apple.com/account/#/membership/    bundle_id=&quot;com.akentev.app&quot;,    key_id=&quot;JSAD983ENA&quot;,  # Generated at https://developer.apple.com/account/resources/authkeys/list    private_key=&quot;/path/to/AuthKey_JSAD983ENA.p8&quot;,    # Generated file at https://developer.apple.com/account/resources/authkeys/list    dev_environment=True,  # True if using development Apple environment, False if using in production.    # Remember to set dev_environment=False in production!)```### Validate device```pythonresult = device_check.validate_device_token(device_token)if result.is_ok:    print('OK! Device is valid')else:    print('Bad news. Unable to validate device')```### Update bits data```python# Can use both integers, strings and booleans. Will be converted with bool(value)result = device_check.update_two_bits(device_token, bit_0=1, bit_1=False)# Can update bits separatelyresult = device_check.update_two_bits(device_token, bit_0=True)if result.is_ok:    print('Bits updated')else:    print(f'Something went wrong. {result}')```### Query bits data```python# Can use both integers, strings and booleansresult = device_check.query_two_bits(device_token)if result.is_ok:    print(f'First bit {result.bit_0}')  # True    print(f'Second bit {result.bit_1}')  # False    print(f'Last update time {result.bits_last_update_time}')  # 2020-04else:    print(f'Something went wrong. {result}')```# Web server decoratorsYou can easily integrate devicecheck to your webserver using a decorator. Specify a supported framework, or leave `None`to try universal parser.```pythonfrom devicecheck.decorators import validate_device  # for sync codefrom devicecheck.decorators import DCSupportedFrameworksfrom devicecheck import DeviceCheckdevice_check = DeviceCheck(...)# Set response that will be returned on invalid tokenINVALID_TOKEN_RESPONSE = ('Invalid device_token', 403)@app.route('/validate')@validate_device(device_check, framework=DCSupportedFrameworks.flask, on_invalid_token=INVALID_TOKEN_RESPONSE)def endpoint():    return 'Content'```## Sync codeUse sync decorator```pythonfrom devicecheck.decorators import validate_devicefrom devicecheck.decorators import DCSupportedFrameworks```### Flask```pythonINVALID_TOKEN_RESPONSE = ('Invalid device_token', 403)framework = DCSupportedFrameworks.flask```&lt;!-- ### Django Rest Framework (DRF)```pythonfrom rest_framework.response import Responsefrom rest_framework import statusINVALID_TOKEN_RESPONSE = Response('Invalid device_token', status=status.HTTP_403_FORBIDDEN)framework = DCSupportedFrameworks.drf```### Django```pythonfrom django.http import HttpResponseINVALID_TOKEN_RESPONSE = HttpResponse('Invalid device_token', status_code=403)framework = DCSupportedFrameworks.django``` --&gt;## Async codeUse Async decorator```pythonfrom devicecheck.decorators import async_validate_devicefrom devicecheck.decorators import DCSupportedAsyncFrameworks```### Sanic```pythonfrom sanic.response import textINVALID_TOKEN_RESPONSE = text('Invalid device_token', status=403)framework = DCSupportedAsyncFrameworks.sanic```### FastAPI```pythonfrom fastapi.responses import PlainTextResponseINVALID_TOKEN_RESPONSE = PlainTextResponse('Invalid device_token', status_code=403)framework = DCSupportedAsyncFrameworks.fastapi```# Tests &amp; MockWell, it's kinda hard to automate testing, because Devicecheck requires real device (Simulators won't work). In case youneed to disable decorators, pass `SKIP_DEVICE_CHECK_DECORATOR=True` environment variable.You can also mock validation, pass `MOCK_DEVICE_CHECK_DECORATOR_TOKEN=XXXXXXXXXXXXX`, it will be a hardcoded valid tokenvalue.```bashMOCK_DEVICE_CHECK_DECORATOR_TOKEN=&quot;device-check-token&quot; python -m unittest tests/integrational/main.py```For Debug logs, including requests body, pass a `DEBUG` environment variable.# ExceptionsLibrary represents an `AppleException` class with attributes `status_code` and `description`Requires `raise_on_error=True` parameter for `DeviceCheck` instance.# Usage (Swift)### Generate device token```swiftimport DeviceCheckpublic func getDeviceToken(completion: @escaping (String?) -&gt; ()) {    if #available(iOS 11.0, *) {        let currentDevice = DCDevice.current        if currentDevice.isSupported        {            currentDevice.generateToken(completionHandler: { (data, error) in                if let tokenData = data {                    let tokenString = tokenData.base64EncodedString()                    print(&quot;Received device token&quot;)                    completion(tokenString)                } else{                    print(&quot;Error generating token: \(error!.localizedDescription)&quot;)                }            })        } else {            print(&quot;Device is not supported&quot;) // Simulators or etc.        }    } else {        print(&quot;Device OS is lower than iOS 11&quot;)    }}```### Pass device token in HTTP requestHeader or Body```swiftgetDeviceToken { deviceToken in    var request = URLRequest(url: &quot;...&quot;)    request.httpMethod = &quot;POST&quot;        // Header    request.setValue(deviceToken, forHTTPHeaderField: &quot;Device-Token&quot;)        // Body    request.setValue(&quot;application/json; charset=utf-8&quot;, forHTTPHeaderField: &quot;Content-Type&quot;)    let json = [&quot;device_token&quot;: deviceToken] as [String : Any]    let jsonData = try! JSONSerialization.data(withJSONObject: json)    request.httpBody = jsonData as Data        // Send it to server    let downloadTask = URLSession.shared.dataTask(with: request, completionHandler: { data, response, error in        ...    })}```# License[MIT](LICENSE)</longdescription>
</pkgmetadata>