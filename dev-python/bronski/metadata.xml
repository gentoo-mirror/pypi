<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======Bronski=======.. image:: https://badge.fury.io/py/bronski.svg    :target: https://pypi.org/project/bronski    .. image:: https://img.shields.io/pypi/pyversions/bronski.svg    :target: https://pypi.org/project/bronski    .. image:: https://github.com/uptick/bronski/workflows/Test/badge.svg    :target: https://github.com/uptick/bronski/actions?query=workflow%3ATest.. rubric:: A beat server for Django, with cron-like syntaxBronski allows you to configure periodic function calls using a Django model.It is ideally suited to being a task &quot;beat&quot; sever, akin to celery-beat.Install-------.. code-block:: sh    $ pip install bronskiSetup-----1. Add 'bronski' to your ``INSTALLED_APPS``   This is only needed to enable the management command.2. Create a model in your own app that inherits from ``bronski.models.CrontabBase``3. Create and apply migrations:   .. code-block:: sh    $ manage.py makemigrations    $ manage.py migrate4. Specify your model in settings   .. code-block:: python    CRONTAB_MODEL = &quot;myapp.MyCronModel&quot;5. Launch your beat server:   .. code-block:: sh    $ ./manage.py bronskiEach minute the ``bronski`` service will scan the model for enabled jobs thathaven't been run in the past 59 seconds. It will then check each to see if itscrontab definition matches the next minute.For job records that match, their ``run`` method will be called. The default``run`` method will:- get the specified function by calling ``self.get_function()``- resolve the ``kwargs`` to use by calling ``self.get_kwargs()``- invoke the function with the ``kwargs``.You can override ``run`` in your custom model to, for instance, enqueue jobs:.. code-block:: python    class Jobs(CrontabBase):        def run(self):            func = self.get_function()            kwargs = self.get_kwargs()            # Celery task API:            func.delay(**kwargs)            # Dramatiq actor API:            func.send(**kwargs)</longdescription>
</pkgmetadata>