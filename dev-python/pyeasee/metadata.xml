<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Maintenance](https://img.shields.io/maintenance/yes/2023.svg) ![Easee library](https://github.com/fondberg/easee/workflows/Easee%20library/badge.svg)[![Buy me a coffee](https://img.shields.io/static/v1.svg?label=Buy%20me%20a%20coffee&amp;message=ðŸ¥¨&amp;color=black&amp;logo=buy%20me%20a%20coffee&amp;logoColor=white&amp;labelColor=6f4e37)](https://www.buymeacoffee.com/fondberg)# Easee EV Charger libraryThis library is an async thin wrapper around [Easee's Rest API](https://api.easee.cloud/index.html)## InstallationYou can install the libray from [PyPI](https://pypi.org/project/pyeasee/):    pip install pyeaseeThe library is tested on Python 3.7 and Python 3.8## Command line toolRun `python -m pyeasee -h` for help.## Usage of the library### DocsRead the API documentation [here](https://fondberg.github.io/pyeasee/pyeasee/)### Small exampleSave the example to a file and run it like this: python3 example.py &lt;username&gt; &lt;password&gt;Username is the phone number that was used to register the Easee account with country code.E.g. +46xxxxxxxxx.```pythonimport asyncioimport sysfrom pyeasee import Easeeasync def async_main():    if len(sys.argv) &lt; 3:        print(f&quot;Usage: {sys.argv[0]} &lt;username&gt; &lt;password&gt;&quot;)        return    print(f&quot;Logging in using: {sys.argv[1]} {sys.argv[2]}&quot;)    easee = Easee(sys.argv[1], sys.argv[2])    sites = await easee.get_sites()    for site in sites:        print(f&quot;Site {site.name} ({site.id})&quot;)        equalizers = site.get_equalizers()        for equalizer in equalizers:            print(f&quot;  Equalizer: {equalizer.name} ({equalizer.id})&quot;)        circuits = site.get_circuits()        for circuit in circuits:            print(f&quot;  Circuit {circuit.id}&quot;)            chargers = circuit.get_chargers()            for charger in chargers:                state = await charger.get_state()                print(f&quot;    Charger: {charger.name} ({charger.id}) status: {state['chargerOpMode']}&quot;)    await easee.close()asyncio.run(async_main())```See also [\_\_main\_\_.py](https://github.com/fondberg/pyeasee/blob/master/pyeasee/__main__.py) for a more complete usage example.## DevelopmentThis project uses `black` for code formatting and `flake8` for linting. To autoformat and run lint run```make lint```</longdescription>
</pkgmetadata>