<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>An asyncio python library for the [Google Calendar API](https://developers.google.com/calendar/api). This library provides a simplifiedGoogle Calendar API that is lighter weight and more streamlined compared to usingaiogoogle, and increased reliability by supporting efficient sync and readingfrom local storage. See the [API Documentation](https://allenporter.github.io/gcal_sync/).The focus of this API is on making it simple to access the most relevant parts of GoogleCalendar, for doing useful things. It may not support everything in the API however itshould be easy to extend to do more as needed.# QuickstartIn order to use the library, you'll need to do some work yourself to get authenticationcredentails. This depends a lot on the context (e.g. redirecting to use OAuth via web)but should be easy to incorporate using Google's python authentication libraries. SeeGoogle's [Authentication and authorization overview](https://developers.google.com/workspace/guides/auth-overview) for details.You will implement `gcal_sync.AbstractAuth` to provide an access token. Your implementationwill handle any necessary refreshes. You can invoke the service with your auth implentationto access the API.```pythonfrom gcal_sync.auth import AbstractAuthclass MyAuthImpl(gcal_sync.AbstractAuth):    def __init__(self, websession: aiohttp.ClientSession) -&gt; None:        &quot;&quot;&quot;Initialize MyAuthimpl.&quot;&quot;&quot;        super().__init__(websession)    async def async_get_access_token(self) -&gt; str:        &quot;&quot;&quot;Return a valid access token.&quot;&quot;&quot;        return ...service = GoogleCalendarService(MyAuthImpl(...))calendar = await service.async_get_calendar(&quot;primary&quot;)```See `gcal_sync.api.GoogleCalendarService` for more details on API calls and see theoverall [documentation](https://allenporter.github.io/gcal_sync/)# Fetching EventsEvents can be fetched using the `gcal_sync.api.ListEventsRequest` which can filterevents based on time or search criteria. The `GoogleCalendarService` supports pagingthrough events using an aync generator like in this example below:```pythonfrom gcal_sync.api import ListEventsRequestrequest = ListEventsRequest(    calendar_id=calendar.id,    search=&quot;Holiday&quot;,)result = await service.async_list_events(request)async for result_page in result:    for event in result_page.items:        print(event.summary)```Using the async generator avoids the need to manually handle paging and page tokens,but that is also available if needed. Recurring events are expanded on the server bydefault, so you don't have to worry about handling them yourself.# SynchronizationIf you require a high read rate to the events, then it may be more efficient tofirst sync down the calendar then query local events. Any recurring events areexpanded at query time by the local library by interpreting the recurrence ruleson the synced event.```pythonfrom gcal_sync.sync import CalendarListSyncManagersync = CalendarEventSyncManager(service)# Run when you want to sync down the latest set of eventsawait sync.run()# Iterate over events in the local storetimeline = await sync.store_service.async_get_timeline()for event in timeline:    print(event.summary)```See `gcal_sync.sync` for more details.# Development Environment```bash$ python3 -m venv venv$ source venv/bin/activate$ pip3 install -r requirements.txt# Run tests$ py.test# Run tests with code coverage$ py.test --cov-report=term-missing --cov=gcal_sync```</longdescription>
</pkgmetadata>