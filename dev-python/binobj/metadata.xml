<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>binobj======|build-status| |python-versions| |installs-month| |installs-ever|.. |build-status| image:: https://github.com/dargueta/binobj/actions/workflows/ci.yml/badge.svg   :alt: Build status.. |python-versions| image:: https://img.shields.io/badge/python-3.7,%203.8,%203.9,%203.10,%203.11-blue.svg   :alt: Python versions.. |installs-month| image:: https://pepy.tech/badge/binobj/month   :alt: Installs per month   :target: https://pepy.tech/project/binobj.. |installs-ever| image:: https://pepy.tech/badge/binobj   :alt: Total installs   :target: https://pepy.tech/project/binobjA cross-platform Python 3 library for reading and writing structured binary datain an object-oriented (ish) style.Why use ``binobj``?-------------------You may have used Python's built-in ``struct`` library to load and dump binarydata. It's unwieldy for larger or more complex data structures, and the formatstrings are easy to get wrong. ``binobj`` is different in that it takes a class-basedapproach to declaring binary structures.Take a look at this example using ``struct``:.. code-block:: python    data = (b'BM', 1024, 0, 12, 40, 32, 32, 1, 1, 0, 0, 72, 72, 2, 2)    header_bytes = struct.pack('&lt;2sIIIIiiHHIIiiII', *data)    loaded = struct.unpack('&lt;2sIIIIiiHHIIiiII', header_bytes)    n_pixels = loaded[5] * loaded[6]The same example rewritten using ``binobj``:.. code-block:: python    class BMP(binobj.Struct):        class Meta:            argument_defaults = {                &quot;endian&quot;: &quot;little&quot;            }        magic: Bytes = b&quot;BM&quot;        file_size: UInt32        _reserved: binobj.Bytes(const=b&quot;\0\0\0\0&quot;, discard=True)        pixels_offset: UInt32()        # Legacy DIB header        header_size: UInt32 = 40        image_width: Int32        image_height: Int32        n_color_planes: UInt16        n_bits_per_pixel: UInt16        compression_method: UInt32 = 0        bitmap_size: UInt32        v_resolution: Int32        h_resolution: Int32        n_palette_colors: UInt32        n_important_colors: UInt32    bmp = BMP(file_size=1024, pixels_offset=12, image_width=32, image_height=32, ...)    header_bytes = bytes(bmp)    loaded = BMP.from_bytes(header_bytes)    n_pixels = loaded.image_width * loaded.image_height``binobj`` also has other advantages in that it supports strings in any encodingPython supports, toggling endianness on a per-field basis (necessary for ISO 9660images), a variety of integer encodings, computed fields, validation, and more.System Requirements-------------------- This package will *not* work on a `mixed-endian`_ system. Those are pretty rare  nowadays so chances are you won't have a problem.- This has been tested on CPython 3.7-3.11, PyPy 3.7-3.9... _mixed-endian: https://en.wikipedia.org/wiki/Endianness#MixedInstallation------------You can install this with ``pip`` like so:.. code-block:: sh    pip3 install binobj- Be sure to use ``pip3`` and not ``pip``, because ``pip`` defaults to Python 2.- If you get a &quot;Permission Denied&quot; error, try:.. code-block:: sh    pip3 install --user binobjSide note: Don't use ``sudo`` (even ``sudo -EH``) to force a package to install,as that's a security risk. See `this answer &lt;https://stackoverflow.com/a/42021993&gt;`_on Stack Overflow to find out why.Testing and Development-----------------------This package uses `Tox &lt;https://tox.readthedocs.io/en/latest/&gt;`_ to run tests onmultiple versions of Python.Setup~~~~~To set up your development environment, you'll need to install a few things.* For Python version management, I use `pyenv-virtualenv &lt;https://github.com/pyenv/pyenv-virtualenv&gt;`_.  Follow the installation instructions there.* You'll also need ``make``. Depending on your platform you can install it in  one of several ways:  * macOS: ``brew install make``  * Debian systems (e.g. Ubuntu): ``sudo apt-get install make``  * Windows: Use `Cygwin &lt;https://www.cygwin.com/&gt;`_ and install it during setup.Once you have those installed, in the root directory of this repo run:.. code-block:: sh    make setupRunning the Tests~~~~~~~~~~~~~~~~~To run the unit tests for all supported versions of Python, run ``make test``.The environments will automatically be rebuilt if needed.Issues and Feature Requests~~~~~~~~~~~~~~~~~~~~~~~~~~~To report an issue, request a feature, or propose a change, please file areport on the project's GitHub page `here &lt;https://github.com/dargueta/binobj/issues&gt;`_.License-------I'm releasing this under the terms of the `3-Clause BSD License`_. For the fulllegal text, see ``LICENSE.txt`` in the repository... _3-Clause BSD License: https://tldrlegal.com/license/bsd-3-clause-license-(revised)</longdescription>
</pkgmetadata>