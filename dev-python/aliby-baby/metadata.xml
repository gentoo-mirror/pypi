<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Baby## Birth Annotation for Budding YeastNeural network code for segmenting buds from brightfield stacks.## InstallationBABY requires Python 3 and [TensorFlow](https://www.tensorflow.org). For someversions of TensorFlow, you specifically need Python 3.6.In any case, it is recommended that you install the package into a virtualenvironment (i.e., `conda create` if you are using Anaconda, or `python3 -mvenv` otherwise).By default, BABY will trigger installation of the latest version ofTensorFlow. Our experience, however, is that performance is best withTensorFlow version 1.14. If you want to use this version, first install thatin your virtual environment by running:```bash&gt; pip install tensorflow==1.14```**NB:** To make use of a GPU you should also follow the [set upinstructions](https://www.tensorflow.org/install/gpu#windows_setup) forinstalling `tensorflow-gpu`.Install BABY by first obtaining this repository (e.g., `git clonehttps://git.ecdf.ed.ac.uk/jpietsch/baby.git`), and then using pip:```bash&gt; pip install baby/```NB: If you are upgrading, then you may instead need to run: `pip install -Ubaby/`.*Developers:* You may prefer to install an editable version:```bash&gt; pip install -e baby/```## Run using the Python APICreate a new `BabyBrain` with one of the model sets. The `brain` containsall the models and parameters for segmenting and tracking cells.```python&gt;&gt;&gt; from baby import BabyBrain, BabyCrawler, modelsets&gt;&gt;&gt; modelset = modelsets()['evolve_brightfield_60x_5z']&gt;&gt;&gt; brain = BabyBrain(**modelset)```For each time course you want to process, instantiate a new `BabyCrawler`. Thecrawler keeps track of cells between time steps.```python&gt;&gt;&gt; crawler = BabyCrawler(brain)```Load an image time series (from the `tests` subdirectory in this example). Theimage should have shape (x, y, z).```python&gt;&gt;&gt; from baby.io import load_tiled_image&gt;&gt;&gt; image_series = [load_tiled_image(...     'tests/images/evolve_testG_tp{:d}_Brightfield.png'.format(t))...     for t in range(1,6)]```Send images to the crawler in time-order (here a batch of size 1). Weadditionally request that outlines are optimised to edge predictions, and thatlineage assignments, binary edge-masks and volume estimates (using the conicalmethod) should be output at each time point.```python&gt;&gt;&gt; segmented_series = [crawler.step(...     img[None, ...], refine_outlines=True, assign_mothers=True,...     with_edgemasks=True, with_volumes=True)...     for img, _ in image_series]```Finally, save the segmentation outlines, labels, volumes and lineage assignmentsas an annotated tiled png:```python&gt;&gt;&gt; from baby.io import save_tiled_image&gt;&gt;&gt; for t, s in enumerate(segmented_series):...     save_tiled_image(255 * s[0]['edgemasks'].astype('uint8').transpose((1, 2, 0)),...     '../segout_tp{:d}.png'.format(t + 1),...     {k: s[0][k] for k in ('cell_label', 'mother_assign', 'volumes')})```## Run via a serverOnce installed, you should be able to start a server to accept segmentationrequests using:```bash&gt; baby-phone```or on windows:```&gt; baby-phone.exe```Server runs by default on [http://0.0.0.0:5101](). HTTP requests need to besent to the correct URL endpoint, but the HTTP API is currently undocumented.The primary client implementation is in Matlab.## Jupyter notebooksTraining scripts are saved in Jupyter notebooks in the `notebooks` folder. Tomaintain the repository in a clean state, it's probably best to copy these toanother directory for routine use. If you want to share a notebook, you canthen specifically add it back to the repository at a useful checkpoint.## On how to retrain dataAs of mid-2022 we aim to transition to tensorflow 2 (and then to pytorch). This means re-training all networks. We first fetch our data from skye and regenerate the train-val-test pair sets using TrainValTestPairs:```pythonfrom pathlib import Pathfrom baby.io import TrainValTestPairstraining_data_path = Path(&quot;/home/alan/Documents/dev/training/training-images/&quot;)tvt = TrainValTestPairs()tvt.add_from(training_data_path / &quot;traps-prime95b-60x&quot;)&lt;!-- tvt.add_from(training_data_path / &quot;traps-evolve-60x&quot;) --&gt;```</longdescription>
</pkgmetadata>