<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Texta Multilingual Processor (MLP)![Py3.8](https://img.shields.io/badge/python-3.8-green.svg)![Py3.9](https://img.shields.io/badge/python-3.9-green.svg)![Py3.10](https://img.shields.io/badge/python-3.10-green.svg)https://pypi.org/project/texta-mlp/## Installation### Requirements`apt-get install python3-lxml`##### From PyPI`pip3 install texta-mlp`##### From Git`pip3 install git+https://git.texta.ee/texta/texta-mlp-python.git`### Testing`python3 -m pytest -v tests`## EntitiesMLP extracts several types of entities from text.### Model-based EntitiesMLP uses Stanza to extract:* Persons (missing Estonian model)* Organizations (missing Estonian model)* Geopolitical entities (missing Estonian model)### Regex-based EntitiesMLP uses regular expressions to extract:* Phone numbers (regex)* Email addresses (regex)### List-based EntititesMLP also supports entity extraction using lists of predefined entities. These lists come with MLP:* Companies (Estonian)* Addresses (Estonian and Russian)* Currencies (Estonian, Russian, and English)### Custom List-based EntitiesMLP also supports defining custom entity lists. Custom lists must be placed in the **entity_mapper** directory residing in **data** directory.Entities are defined as JSON files:```{  &quot;MY_ENTITY&quot;: [    &quot;foo&quot;,    &quot;bar&quot;  ]}```## Usage### Load MLPSupported languages: https://stanzanlp.github.io/stanzanlp/models.html```&gt;&gt;&gt; from texta_mlp.mlp import MLP&gt;&gt;&gt; mlp = MLP(language_codes=[&quot;et&quot;,&quot;en&quot;,&quot;ru&quot;])```### Process &amp; Lemmatize Estonian```&gt;&gt;&gt; mlp.process(&quot;Selle eestikeelse lausega võiks midagi ehk öelda.&quot;){'text': {'text': 'Selle eestikeelse lausega võiks midagi ehk öelda .', 'lang': 'et', 'lemmas': 'see eestikeelne lause võima miski ehk ütlema .', 'pos_tags': 'P A S V P J V Z'}, 'texta_facts': []}&gt;&gt;&gt;&gt;&gt;&gt; mlp.lemmatize(&quot;Selle eestikeelse lausega võiks midagi ehk öelda.&quot;)'see eestikeelne lause võima miski ehk ütlema .'```You can use the &quot;analyzers&quot; argument to limit the amount of data you want to be analyzed and returned, thus speeding up the process.Accepted options are: [&quot;lemmas&quot;, &quot;pos_tags&quot;, &quot;transliteration&quot;, &quot;ner&quot;, &quot;contacts&quot;, &quot;entity_mapper&quot;, &quot;all&quot;]where &quot;all&quot; signifies that you want to use all analyzers (takes the most time). By the default, this value is &quot;all&quot;.```&gt;&gt;&gt; mlp.process(&quot;Selle eestikeelse lausega võiks midagi ehk öelda.&quot;, analyzers=[&quot;lemmas&quot;, &quot;postags&quot;])```### Process &amp; Lemmatize Russian```&gt;&gt;&gt; mlp.process(&quot;Лукашенко заявил о договоренности Москвы и Минска по нефти.&quot;){'text': {'text': 'Лукашенко заявил о договоренности Москвы и Минска по нефти .', 'lang': 'ru', 'lemmas': 'лукашенко заявить о договоренность москва и минск по нефть .', 'pos_tags': 'X X X X X X X X X X', 'transliteration': 'Lukašenko zajavil o dogovorennosti Moskvõ i Minska po nefti .'}, 'texta_facts': []}&gt;&gt;&gt;&gt;&gt;&gt; mlp.lemmatize(&quot;Лукашенко заявил о договоренности Москвы и Минска по нефти.&quot;)'лукашенко заявить о договоренность москва и минск по нефть .```### Process &amp; Lemmatize English```&gt;&gt;&gt; mlp.process(&quot;Test sencences are rather difficult to come up with.&quot;){'text': {'text': 'Test sencences are rather difficult to come up with .', 'lang': 'en', 'lemmas': 'Test sencence be rather difficult to come up with .', 'pos_tags': 'NN NNS VBP RB JJ TO VB RB IN .'}, 'texta_facts': []}&gt;&gt;&gt;&gt;&gt;&gt; mlp.lemmatize(&quot;Test sencences are rather difficult to come up with.&quot;)'Test sencence be rather difficult to come up with .'```### Make MLP Throw an Exception on Unknown LanguagesBy default, MLP will default to Estonian if language is unknown. To not do so, one must provide *use_default_language_code=False* when initializing MLP.```&gt;&gt;&gt; mlp.process(&quot;المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق. وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضًا بروح الإخاء.&quot;){'text': {'text': 'المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق . وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضًا بروح الإخاء .', 'lang': 'et', 'lemmas': 'lee 1 يولد جميع الناس leele leele في leele leele . وقد وهبوا عقلاً leele lee أن يعامل بعضهم بعضًا بروح lee .', 'pos_tags': 'S N S S S S S S S S Z S S S S S S S S Y Y Y Z'}, 'texta_facts': []}&gt;&gt;&gt;&gt;&gt;&gt; mlp = MLP(language_codes=[&quot;et&quot;,&quot;en&quot;,&quot;ru&quot;], use_default_language_code=False)&gt;&gt;&gt; mlp.process(&quot;المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق. وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضًا بروح الإخاء.&quot;)Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;/home/rsirel/dev/texta-mlp-package/texta_mlp/mlp.py&quot;, line 150, in process    document = self.generate_document(raw_text, loaded_analyzers)  File &quot;/home/rsirel/dev/texta-mlp-package/texta_mlp/mlp.py&quot;, line 96, in generate_document    lang = self.detect_language(processed_text)  File &quot;/home/rsirel/dev/texta-mlp-package/texta_mlp/mlp.py&quot;, line 89, in detect_language    raise LanguageNotSupported(&quot;Detected language is not supported: {}.&quot;.format(lang))texta_mlp.exceptions.LanguageNotSupported: Detected language is not supported: ar.```### Change Default Language CodeDo use some other language as default, one must provide *default_language_code* when initializing MLP.```&gt;&gt;&gt; mlp = MLP(language_codes=[&quot;et&quot;, &quot;en&quot;, &quot;ru&quot;], default_language_code=&quot;en&quot;)&gt;&gt;&gt;&gt;&gt;&gt; mlp.process(&quot;المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق. وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضًا بروح الإخاء.&quot;){'text': {'text': 'المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق . وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضًا بروح الإخاء .', 'lang': 'en', 'lemmas': 'المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق . وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضًا بروح الإخاء .', 'pos_tags': 'NN CD , NN NN NN NN IN NN NN . UH NN NN NN NN NN NN NN NN NN NN .'}, 'texta_facts': []}```### Process Arabic (for real this time)```&gt;&gt;&gt; mlp = MLP(language_codes=[&quot;et&quot;,&quot;en&quot;,&quot;ru&quot;, &quot;ar&quot;])&gt;&gt;&gt; mlp.process(&quot;المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق. وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضًا بروح الإخاء.&quot;){'text': {'text': 'المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق . وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضا بروح الإخاء .', 'lang': 'ar', 'lemmas': 'مَادَّة 1 وَلَّد جَمِيع إِنسَان حَرَر مُتَسَاوِي فِي كَرَامَة والحقوق . وَقَد وَ عَقَل وضميراً وعليهم أَنَّ يعامل بعضهم بَعض بروح إِخَاء .', 'pos_tags': 'N------S1D Q--------- VIIA-3MS-- N------S4R N------P2D N------P4I A-----MP4I P--------- N------S2D U--------- G--------- U--------- VP-A-3MP-- N------S4I A-----MS4I U--------- C--------- VISA-3MS-- U--------- N------S4I U--------- N------S2D G---------', 'transliteration': &quot;AlmAdp 1 ywld jmyE AlnAs &gt;HrArFA mtsAwyn fy AlkrAmp wAlHqwq . wqd whbwA EqlAF wDmyrFA wElyhm &gt;n yEAml bEDhm bEDA brwH Al&lt;xA' .&quot;}, 'texta_facts': []}&gt;&gt;&gt;&gt;&gt;&gt; mlp.lemmatize(&quot;المادة 1 يولد جميع الناس أحرارًا متساوين في الكرامة والحقوق. وقد وهبوا عقلاً وضميرًا وعليهم أن يعامل بعضهم بعضا بروح الإخاء.&quot;)'مَادَّة 1 وَلَّد جَمِيع إِنسَان حَرَر مُتَسَاوِي فِي كَرَامَة والحقوق . وَقَد وَ عَقَل وضميراً وعليهم أَنَّ يعامل بعضهم بَعض بروح إِخَاء .'```### Load MLP with Custom Resource Path```&gt;&gt;&gt; mlp = MLP(language_codes=[&quot;et&quot;,&quot;en&quot;,&quot;ru&quot;], resource_dir=&quot;/home/kalevipoeg/mlp_resources/&quot;)```### Different phone parsersTexta MLP has three different phone parsers:* 'phone_strict' - is used by default. It parses only those numbers that are verified by the [phonenumbers library](https://pypi.org/project/phonenumbers/). It verifies all correct numbers if they have an area code before it. Otherwise (without an area code) it verifies only Estonian (&quot;EE&quot;) and Russian (&quot;RU&quot;) phone numbers. This is because in this example &quot;Maksekorraldusele märkida viitenumber 2800049900 ning selgitus ...&quot;, the &quot;2800049900&quot; is a valid number in Great Britain (&quot;GB&quot;), but not with &quot;EE&quot; or &quot;RU&quot;.* 'phone_high_precision' which output is mainly phonenumbers extracted by regex, but the regex excludes complicated versions. * 'phone_high_recall' was originally done for emails and it gets most of the phone numbers (includes complicated versions), but also outputs a lot of noisy data. This **parser is also used by default** in concatenating close entities (read below). This means that while concatenating, only &quot;PHONE_high_recall&quot; fact is considered and other parsers' results are not included in concatenating (avoids overlaping). The other parsers' results won't get lost and are still added in texta_facts. Just not under the fact &quot;BOUNDED&quot;.You can choose the parsers like so:```&gt;&gt;&gt; mlp.process(analyzers=[&quot;lemmas&quot;, &quot;phone_high_precision&quot;], raw_text= &quot;My phone number is 12 34 56 77.&quot;)```</longdescription>
</pkgmetadata>