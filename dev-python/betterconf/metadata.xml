<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Minimalistic Python library for your configs.Betterconf (**better config**) is a Python library for project configurationmanagment. It allows you define your config like a regular Python class.Features:* Easy to hack.* Less boilerplate.* Minimal code to do big things.## InstallationI recommend you to use poetry:```shpoetry add betterconf```However, you can use pip:```shpip install betterconf```## How to?Try to write a simple config:```pythonfrom betterconf import field, Configclass MyConfig(Config):    my_var = field(&quot;my_var&quot;)cfg = MyConfig()print(cfg.my_var)```Try to run:```shmy_var=1 python our_file.py```With default values:```pythonfrom betterconf import field, Configclass MyConfig(Config):    my_var = field(&quot;my_var&quot;, default=&quot;hello world&quot;)    my_second_var = field(&quot;my_second_var&quot;, default=lambda: &quot;hi&quot;) # can be callable!cfg = MyConfig()print(cfg.my_var)print(cfg.my_second_var)# hello world# hi```Override values when it's needed (for an example: test cases)```pythonfrom betterconf import field, Configclass MyConfig(Config):    my_var = field(&quot;my_var&quot;, default=&quot;hello world&quot;)cfg = MyConfig(my_var=&quot;WOW!&quot;)print(cfg.my_var)# WOW!```By default **betterconf** gets all values from `os.environ` but sometimes we need much.You can create own `field's value provider` in minutes:```pythonfrom betterconf import field, Configfrom betterconf.config import AbstractProviderclass NameProvider(AbstractProvider):    def get(self, name: str):        return nameclass Cfg(Config):    my_var = field(&quot;my_var&quot;, provider=NameProvider())cfg = Cfg()print(cfg.my_var)# my_var```Also we can cast our values to python objects (or just manipulate them):```pythonfrom betterconf import field, Config# out of the box we have `to_bool` and `to_int`from betterconf.caster import to_bool, to_int, AbstractCasterclass DashToDotCaster(AbstractCaster):    def cast(self, val: str):        return val.replace(&quot;-&quot;, &quot;.&quot;)to_dot = DashToDotCaster()class Cfg(Config):    integer = field(&quot;integer&quot;, caster=to_int)    boolean = field(&quot;boolean&quot;, caster=to_bool)    dots = field(&quot;dashes&quot;, caster=to_dot)cfg = Cfg()print(cfg.integer, cfg.boolean, cfg.dots)# -500, True, hello.world``````shinteger=-500 boolean=true dashes=hello-world python our_file.py```## LicenseThis project is licensed under MIT License.See [LICENSE](LICENSE) for details.Made with :heart: by [prostomarkeloff](https://github.com/prostomarkeloff) and our contributors.</longdescription>
</pkgmetadata>