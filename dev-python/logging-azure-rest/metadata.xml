<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Logging Azure Workspace OMS Extension[![Python](https://img.shields.io/pypi/pyversions/logging-azure-rest.svg)](https://pypi.python.org/pypi/logging-azure-rest)[![Version](http://img.shields.io/pypi/v/logging-azure-rest.svg)](https://pypi.python.org/pypi/logging-azure-rest)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)This package provides an asynchronous solution for uploading application logs to an Azure Log Workspace using theirprovided REST API, all supplied as a handler and service extension for python builtin `logging` module.The service works by instantiating an always-alive (non-daemonized) thread connected to a log request pool in whichlogs will be queued, then periodically running through the pool in order to send the requests in bulkusing the `requests` package. This is all to intend logging safely without interrupting or slowing down the mainprocess execution as transparently as possible.## InstallationFor installing via the distributed package via PyPi:`$ pip install logging-azure-rest`Or if you which to install from the source, you can checkout the git repository and install using `setuptools`:`$ python setup.py install`## Usage### Package ConfigurationThe following environment variables are read to configure the extension and are required:- `AZURE_LOG_CUSTOMER_ID`: Customer ID for the Azure Log Workspace- `AZURE_LOG_SHARED_KEY`: Customer shared key for the Azure Log Workspace- `AZURE_LOG_DEFAULT_NAME`: The default &quot;log type&quot; name to indicate where the logs are stored.This will be suffixed with &quot;_CL&quot; within the Azure Log Workspace.The following environment variables are read to tweak some parameters of the extension,they all have default values and therefore are optional:- `AZURE_LOG_SEND_FREQUENCY`: *Default: 5* How many seconds the service thread should wait before sending pooled logs.### Logging ConfigurationAs you would any other handler, you only require to define a handler using the`logging_azure.handler.AzureLogServiceHandler` class:```python[...]    &quot;handlers&quot;: {        &quot;console&quot;: {&quot;level&quot;: logging.DEBUG, &quot;class&quot;: &quot;logging.StreamHandler&quot;, &quot;formatter&quot;: &quot;colorize&quot;},        &quot;azure_log_oms&quot;: {            &quot;level&quot;: logging.INFO, &quot;class&quot;: &quot;logging_azure.handler.AzureLogServiceHandler&quot;, &quot;formatter&quot;: &quot;azure&quot;        },        &quot;default&quot;: {&quot;level&quot;: logging.INFO, &quot;class&quot;: &quot;logging.StreamHandler&quot;, &quot;formatter&quot;: &quot;default&quot;},    },[...]```Then add the handler to your selected logger instance:```python[...]    &quot;loggers&quot;: {        LOGGER_NAME: {            &quot;handlers&quot;: [&quot;console&quot;] if IS_LOCAL_DEV_INSTANCE else [&quot;default&quot;, &quot;azure_log_oms&quot;],            &quot;level&quot;: LOG_LEVEL,            &quot;propagate&quot;: True,        }    },[...]```## Recommendations### Set an appropriate log level minimumIn order to prevent additional cost from Azure Log OMS ingestion for talkative applications, it is recommended to setan adequate LOG_LEVEL for your application (avoid `logging.DEBUG` for example).It is also recommended configuring your loggers appropriately so the `AzureLogServiveHandler` isn't used duringlocal development or CI environments for example.You are warned.### Set a clear formatter for messagesThis package supplies a decent amount of information already to complement the message in a clean way by reading thelog record in order to facilitate Azure Log OMS Queries and ingestion, so you may only require using a specificformatter that will only format the `message` itself as follows:```python[...]    &quot;formatters&quot;: {        &quot;default&quot;: {            &quot;format&quot;: '[%(asctime)s] %(levelname)s %(name)s %(module)s &quot;%(message)s&quot;',            &quot;datefmt&quot;: &quot;%d/%b/%Y %H:%M:%S&quot;,        },        &quot;azure&quot;: {            &quot;format&quot;: '%(message)s',        },[...]```This provides the following output within the Azure Portal for example:![AzureLogOMSExample](https://github.com/Exelscior/logging-azure-rest/blob/master/resources/log_azure_example.jpg)This allows for easily creating custom queries and alerts for your application directly from the Azure Log OMSsolution.## Useful links- [Create a Log Analytics workspace in the Azure portal](https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace)- [Create a Log Analytics workspace with Azure CLI 2.0](https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace-cli)- [Manage access to log data and workspaces in Azure Monitor](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/manage-access)- [Azure Monitor pricing](https://azure.microsoft.com/en-us/pricing/details/monitor/)### Package requirements- [requests](https://github.com/psf/requests)- [injector](https://github.com/alecthomas/injector)</longdescription>
</pkgmetadata>