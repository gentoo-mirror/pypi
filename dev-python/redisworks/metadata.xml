<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Redisworks 0.4.0================|Python Versions| |License| |Build Status| |Coverage Status|**The Pythonic Redis Client**Why Redisworks?-  Lazy Redis Queries-  Dynamic Typing-  Ease of useHave you ever used PyRedis and wondered why you have to think abouttypes all the time? That you have to constantly convert objects tostrings and back and forth since Redis keeps most things as strings?Redis works provides a Pythonic interface to Redis. Let Redisworks takecare of type conversions for you.Behind the scene, Redisworks uses`DotObject &lt;https://github.com/seperman/dotobject&gt;`__ to providebeautiful dot notation objects and lazy Redis queries.Install=======``pip install redisworks``Note that RedisWorks needs Redis server 2.4+.Setup=====let’s say if you want all the keys in Redis to start with the word``root``. Then you:.. code:: py   root = Root()  # connects to Redis on local host by defaultOr if you want to be more specific:.. code:: py   root = Root(host='localhost', port=6379, db=0)password--------Any other parameter that you pass to Root will be passed down toPyRedis. For example:.. code:: py   root = Root(host='localhost', port=6379, db=0, password='mypass')Saving to Redis===============Saving to Redis is as simple as assigning objects to attributes of rootor attributes of attributes of root (you can go as deep as you want.)Make sure you are not using any Python’s reserved words in the key’sname.Example:.. code:: py   &gt;&gt;&gt; from redisworks import Root   &gt;&gt;&gt; import datetime   &gt;&gt;&gt; root = Root()   &gt;&gt;&gt; root.my.list = [1, 3, 4]   &gt;&gt;&gt; root.my.other.list = [1, [2, 2]]   &gt;&gt;&gt;    &gt;&gt;&gt; some_date = datetime.datetime(2016, 8, 22, 10, 3, 19)   &gt;&gt;&gt; root.time = some_date   &gt;&gt;&gt;    &gt;&gt;&gt; root.the.mapping.example = {1:1, &quot;a&quot;: {&quot;b&quot;: 10}}Redis works will automatically convert your object to the proper Redistype and immediately write it to Redis as soon as you assign an element!The respective keys for the above items will be just like what you type:``root.my.list``, ``root.time``, ``root.the.mapping.example``:If you use redis-cli, you will notice that the data is saved in theproper Redis data type:::   127.0.0.1:6379&gt; scan 0   1) &quot;0&quot;   2) 1) &quot;root.the.mapping.example&quot;      2) &quot;root.time&quot;      3) &quot;root.my.list&quot;   127.0.0.1:6379&gt; type root.the.mapping.example   hash   127.0.0.1:6379&gt; type root.time   string   127.0.0.1:6379&gt; type root.my.list   listReading from Redis==================Reading the data is as simple as if it was just saved in Python memory!Redis works returns Lazy queries just like how Django returns lazyqueries. In fact the lazy objects code is borrowed from Django!If you ran the example from `Saving to Redis &lt;#saving-to-redis&gt;`__, runa flush ``root.flush()`` to empty Redisworks Cache. This is so it goesand gets the objects from Redis instead of reading its own current copyof data:.. code:: py   &gt;&gt;&gt; from redisworks import Root   &gt;&gt;&gt; root = Root()   &gt;&gt;&gt; thetime = root.time   &gt;&gt;&gt; thelist = root.my.list   &gt;&gt;&gt; mydict = root.the.mapping.example   &gt;&gt;&gt; mydict  # is not evalurated yet!   &lt;Lazy object: root.the.mapping.example&gt;   &gt;&gt;&gt; print(mydict)   {1:1, &quot;a&quot;: {&quot;b&quot;: 10}}  # Now all the 3 objects are read from Redis!   &gt;&gt;&gt; mydict   {1:1, &quot;a&quot;: {&quot;b&quot;: 10}}   &gt;&gt;&gt; root.my.list   [1, 3, 4]   &gt;&gt;&gt; root.my.other.list   [1, [2, 2]]   &gt;&gt;&gt; root.time   2016-08-22 10:03:19Changing root key name======================Every key name by default starts with the word ``root``. If you want touse another name, you have two options:Option 1, pass a namespace:.. code:: py   &gt;&gt;&gt; mynamespace = Root(conn=redis_conn, namespace='mynamespace')   &gt;&gt;&gt; mynamespace.foo = 'bar'Option 2, simply subclass ``Root``:.. code:: py   &gt;&gt;&gt; from redisworks import Root   &gt;&gt;&gt; class Post(Root):   ...     pass   &gt;&gt;&gt; post=Post()   &gt;&gt;&gt; post.item1 = &quot;something&quot;  # saves to Redis   ...   &gt;&gt;&gt; print(post.item1)  # loads from Redis   somethingNumbers as attribute names==========================Let’s say you want ``root.1`` as a key name. Python does not allowattribute names start with numbers.All you need to do is start the number with the character ``i`` soRedisworks takes care of it for you:.. code:: py   &gt;&gt;&gt; root.i1 = 10   &gt;&gt;&gt; print(root.i1)   10The actual key in Redis will be ``root.1``Dynamic key names=================.. code:: py   &gt;&gt;&gt; path1 = 'blah'   &gt;&gt;&gt; path2 = 'blah.here`'   &gt;&gt;&gt; root[path1] = 'foo'   &gt;&gt;&gt; root[path2] = 'foo bar'   &gt;&gt;&gt; root.blah   foo   &gt;&gt;&gt; root.blah.here   foo barPassing TTL to the keys=======================You can use the ``with_ttl`` helper... code:: py   &gt;&gt;&gt; from redisworks import Root, with_ttl   &gt;&gt;&gt; self.root.myset = with_ttl([1, 2, 3], ttl=1)   &gt;&gt;&gt; self.root.flush()   &gt;&gt;&gt; self.root.myset   [1, 2, 3]   &gt;&gt;&gt; time.sleep(1.2)   &gt;&gt;&gt; self.root.flush()   &gt;&gt;&gt; self.root.mysetOther examples==============Take a look at `example.py &lt;example.py&gt;`__Primary Author==============Seperman (Sep Dehpour)-  `Github &lt;https://github.com/seperman&gt;`__-  `Linkedin &lt;http://www.linkedin.com/in/sepehr&gt;`__-  `ZepWorks &lt;https://zepworks.com&gt;`__.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/redisworks.svg?style=flat.. |License| image:: https://img.shields.io/pypi/l/redisworks.svg?version=latest.. |Build Status| image:: https://travis-ci.org/seperman/redisworks.svg?branch=master   :target: https://travis-ci.org/seperman/redisworks.. |Coverage Status| image:: https://coveralls.io/repos/github/seperman/redisworks/badge.svg?branch=master   :target: https://coveralls.io/github/seperman/redisworks?branch=master</longdescription>
</pkgmetadata>