<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Client for Google Cloud Pub / Sub========================================|GA| |pypi| |versions| `Google Cloud Pub / Sub`_ is a fully-managed real-time messaging service thatallows you to send and receive messages between independent applications. Youcan leverage Cloud Pub/Sub’s flexibility to decouple systems and componentshosted on Google Cloud Platform or elsewhere on the Internet. By building onthe same technology Google uses, Cloud Pub / Sub is designed to provide “atleast once” delivery at low latency with on-demand scalability to 1 millionmessages per second (and beyond).Publisher applications can send messages to a ``topic`` and other applicationscan subscribe to that topic to receive the messages. By decoupling senders andreceivers, Google Cloud Pub/Sub allows developers to communicate betweenindependently written applications.- `Product Documentation`_- `Client Library Documentation`_.. |GA| image:: https://img.shields.io/badge/support-GA-gold.svg   :target: https://github.com/googleapis/google-cloud-python/blob/main/README.rst#general-availability.. |pypi| image:: https://img.shields.io/pypi/v/google-cloud-pubsub.svg   :target: https://pypi.org/project/google-cloud-pubsub/.. |versions| image:: https://img.shields.io/pypi/pyversions/google-cloud-pubsub.svg   :target: https://pypi.org/project/google-cloud-pubsub/.. _Google Cloud Pub / Sub: https://cloud.google.com/pubsub/.. _Product Documentation: https://cloud.google.com/pubsub/docs.. _Client Library Documentation: https://cloud.google.com/python/docs/reference/pubsub/latestQuick Start-----------In order to use this library, you first need to go through the following steps:1. `Select or create a Cloud Platform project.`_2. `Enable billing for your project.`_3. `Enable the Google Cloud Pub / Sub API.`_4. `Setup Authentication.`_.. _Select or create a Cloud Platform project.: https://console.cloud.google.com/project.. _Enable billing for your project.: https://cloud.google.com/billing/docs/how-to/modify-project#enable_billing_for_a_project.. _Enable the Google Cloud Pub / Sub API.:  https://cloud.google.com/pubsub.. _Setup Authentication.: https://googleapis.dev/python/google-api-core/latest/auth.htmlInstallation~~~~~~~~~~~~Install this library in a `virtualenv`_ using pip. `virtualenv`_ is a tool tocreate isolated Python environments. The basic problem it addresses is one ofdependencies and versions, and indirectly permissions.With `virtualenv`_, it's possible to install this library without needing systeminstall permissions, and without clashing with the installed systemdependencies... _`virtualenv`: https://virtualenv.pypa.io/en/latest/Supported Python Versions^^^^^^^^^^^^^^^^^^^^^^^^^Python &gt;= 3.7Deprecated Python Versions^^^^^^^^^^^^^^^^^^^^^^^^^^Python &lt;= 3.6.The last version of this library compatible with Python 2.7 is google-cloud-pubsub==1.7.0.Mac/Linux^^^^^^^^^.. code-block:: console    pip install virtualenv    virtualenv &lt;your-env&gt;    source &lt;your-env&gt;/bin/activate    &lt;your-env&gt;/bin/pip install google-cloud-pubsubWindows^^^^^^^.. code-block:: console    pip install virtualenv    virtualenv &lt;your-env&gt;    &lt;your-env&gt;\Scripts\activate    &lt;your-env&gt;\Scripts\pip.exe install google-cloud-pubsubExample Usage~~~~~~~~~~~~~Publishing^^^^^^^^^^To publish data to Cloud Pub/Sub you must create a topic, and then publishmessages to it.. code-block:: python    import os    from google.cloud import pubsub_v1    publisher = pubsub_v1.PublisherClient()    topic_name = 'projects/{project_id}/topics/{topic}'.format(        project_id=os.getenv('GOOGLE_CLOUD_PROJECT'),        topic='MY_TOPIC_NAME',  # Set this to something appropriate.    )    publisher.create_topic(name=topic_name)    future = publisher.publish(topic_name, b'My first message!', spam='eggs')    future.result()To learn more, consult the `publishing documentation`_... _publishing documentation: https://cloud.google.com/python/docs/reference/pubsub/latestSubscribing^^^^^^^^^^^To subscribe to data in Cloud Pub/Sub, you create a subscription based onthe topic, and subscribe to that, passing a callback function... code-block:: python    import os    from google.cloud import pubsub_v1    topic_name = 'projects/{project_id}/topics/{topic}'.format(        project_id=os.getenv('GOOGLE_CLOUD_PROJECT'),        topic='MY_TOPIC_NAME',  # Set this to something appropriate.    )    subscription_name = 'projects/{project_id}/subscriptions/{sub}'.format(        project_id=os.getenv('GOOGLE_CLOUD_PROJECT'),        sub='MY_SUBSCRIPTION_NAME',  # Set this to something appropriate.    )    def callback(message):        print(message.data)        message.ack()    with pubsub_v1.SubscriberClient() as subscriber:        subscriber.create_subscription(            name=subscription_name, topic=topic_name)          future = subscriber.subscribe(subscription_name, callback)The future returned by the call to ``subscriber.subscribe`` can be used toblock the current thread until a given condition obtains:.. code-block:: python    try:        future.result()    except KeyboardInterrupt:        future.cancel()It is also possible to pull messages in a synchronous (blocking) fashion. Tolearn more about subscribing, consult the `subscriber documentation`_... _subscriber documentation: https://cloud.google.com/python/docs/reference/pubsub/latestAuthentication^^^^^^^^^^^^^^It is possible to specify the authentication method to use with the Pub/Subclients. This can be done by providing an explicit `Credentials`_ instance. Supportfor various authentication methods is available from the `google-auth`_ library.For example, to use JSON Web Tokens, provide a `google.auth.jwt.Credentials`_ instance:.. code-block:: python    import json    from google.auth import jwt    service_account_info = json.load(open(&quot;service-account-info.json&quot;))    audience = &quot;https://pubsub.googleapis.com/google.pubsub.v1.Subscriber&quot;    credentials = jwt.Credentials.from_service_account_info(        service_account_info, audience=audience    )    subscriber = pubsub_v1.SubscriberClient(credentials=credentials)    # The same for the publisher, except that the &quot;audience&quot; claim needs to be adjusted    publisher_audience = &quot;https://pubsub.googleapis.com/google.pubsub.v1.Publisher&quot;    credentials_pub = credentials.with_claims(audience=publisher_audience)     publisher = pubsub_v1.PublisherClient(credentials=credentials_pub).. _Credentials: https://google-auth.readthedocs.io/en/latest/reference/google.auth.credentials.html#google.auth.credentials.Credentials.. _google-auth: https://google-auth.readthedocs.io/en/latest/index.html.. _google.auth.jwt.Credentials: https://google-auth.readthedocs.io/en/latest/reference/google.auth.jwt.html#google.auth.jwt.CredentialsVersioning----------This library follows `Semantic Versioning`_.It is currently in major version one (1.y.z), which means that the public API should be considered stable... _Semantic Versioning: http://semver.org/Contributing------------Contributions to this library are always welcome and highly encouraged.See the `CONTRIBUTING doc`_ for more information on how to get started... _CONTRIBUTING doc: https://github.com/googleapis/google-cloud-python/blob/main/CONTRIBUTING.rstCommunity---------The best place to ask questions is via Stackoverflow: https://stackoverflow.com/questions/tagged/google-cloud-pubsubLicense-------Apache 2.0 - See `the LICENSE`_ for more information... _the LICENSE: https://github.com/googleapis/google-cloud-python/blob/main/LICENSE</longdescription>
</pkgmetadata>