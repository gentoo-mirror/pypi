<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>`CLU &lt;https://tron.fandom.com/wiki/Clu&gt;`__==========================================|py| |pypi| |black| |Build Status| |docs| |Coverage Status| |zenodo|`CLU &lt;https://tron.fandom.com/wiki/Clu&gt;`_ implements a new protocol for SDSS actor while providing support for legacy-style actor.Features--------- Asynchronous API based on `asyncio &lt;https://docs.python.org/3/library/asyncio.html&gt;`_.- New-style actor with message passing based on `AMQP &lt;https://www.amqp.org/&gt;`_ and `RabbitMQ &lt;https://rabbitmq.com&gt;`_.- Legacy-style actor for TCP socket communication via `tron &lt;https://github.com/sdss/tron&gt;`__.- Tools for device handling.- Messages are validated JSON strings.- `click &lt;https://click.palletsprojects.com/en/7.x/&gt;`__-enabled command parser.Installation------------``CLU`` can be installed using ``pip`` as.. code-block:: console    pip install sdss-cluor from source.. code-block:: console    git clone https://github.com/sdss/clu    cd clu    pip install .Development^^^^^^^^^^^``clu`` uses `poetry &lt;http://poetry.eustace.io/&gt;`__ for dependency management and packaging. To work with an editable install it's recommended that you setup ``poetry`` and install ``clu`` in a virtual environment by doing.. code-block:: console    poetry installPip does not support editable installs with PEP-517 yet. That means that running ``pip install -e .`` will fail because ``poetry`` doesn't use a ``setup.py`` file. As a workaround, you can use the ``create_setup.py`` file to generate a temporary ``setup.py`` file. To install ``clu`` in editable mode without ``poetry``, do.. code-block:: console    pip install --pre poetry    pip install -U setuptools    python create_setup.py    pip install -e .Quick start-----------Creating a new actor with ``CLU`` is easy. To instantiate and run an actor you can simply do.. code-block:: python    import asyncio    from clu import AMQPActor    async def main(loop):        actor = await Actor('my_actor').start()        await actor.run_forever()    asyncio.run(main(loop))Next, head to the `Getting started &lt;https://clu.readthedocs.io/en/latest/getting-started.html&gt;`__ section for more information about using actors. More examples are available `here &lt;https://clu.readthedocs.io/en/latest/examples.html&gt;`__.Why a new messaging protocol for SDSS?--------------------------------------Say whatever you want about it, the `current SDSS message passing protocol &lt;https://clu.readthedocs.io/en/latest/legacy.html&gt;`_ based on ``Tron``, ``opscore``, and ``actorcore`` is stable and robust. So, why should we replace it? Here is a list of reasons:- It reinvents the wheel. Ok, in all honesty ``Tron`` and ``opscore`` were written when wheel were still not completely circular, but the truth is that nowadays there are more robust, standard, and better documented technologies out there for message passing.- We can remove the need for a central hub product by relying in open-source message brokers such as `RabbitMQ &lt;https://rabbitmq.com&gt;`__.- ``Tron`` and ``opscore`` are Python 2 and it's unclear the amount of effort that would be needed to convert them to Python 3.- While there is some documentation for ``Tron`` and ``opscore``, and the code is well written, it's also cumbersome and difficult to modify by people that didn't write it. It's ultimately non-maintainable.- The ``opsctore``/``actorkeys`` datamodel is custom-built and extremely difficult to maintain. Standard solutions such as JSON with a `JSON schema &lt;https://json-schema.org/&gt;`__ validator should be preferred.- `asyncio &lt;https://docs.python.org/3/library/asyncio.html&gt;`__ provides an asynchronous API that is cleaner and easier to code than using threads. It is also more readable and less convoluted than `twisted &lt;https://twistedmatrix.com/trac/&gt;`__ and it's a Python core library with very active development.- CLU uses `click &lt;https://click.palletsprojects.com/en/7.x&gt;`__ for parsing commands, providing a well-defined, easy to use parser... |Build Status| image:: https://github.com/sdss/clu/actions/workflows/test.yml/badge.svg    :alt: Build Status    :target: https://github.com/sdss/clu/actions.. |Coverage Status| image:: https://codecov.io/gh/sdss/clu/branch/main/graph/badge.svg    :alt: Coverage Status    :target: https://codecov.io/gh/sdss/clu.. |py| image:: https://img.shields.io/badge/python-%3E=3.8-blue    :alt: Python Versions    :target: https://docs.python.org/3/.. |docs| image:: https://readthedocs.org/projects/docs/badge/?version=latest    :alt: Documentation Status    :target: https://clu.readthedocs.io/en/latest/?badge=latest.. |pypi| image:: https://badge.fury.io/py/sdss-clu.svg    :alt: PyPI version    :target: https://badge.fury.io/py/sdss-clu.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black.. |zenodo| image:: https://zenodo.org/badge/183817446.svg   :target: https://zenodo.org/badge/latestdoi/183817446</longdescription>
</pkgmetadata>