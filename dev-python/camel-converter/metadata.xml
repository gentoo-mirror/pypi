<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Camel Converter[![CI Status](https://github.com/sanders41/camel-converter/workflows/CI/badge.svg?branch=main&amp;event=push)](https://github.com/sanders41/camel-converter/actions?query=workflow%3CI+branch%3Amain+event%3Apush)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/sanders41/camel-converter/main.svg)](https://results.pre-commit.ci/latest/github/sanders41/camel-converter/main)[![Coverage](https://codecov.io/github/sanders41/camel-converter/coverage.svg?branch=main)](https://codecov.io/gh/sanders41/camel-converter)[![PyPI version](https://badge.fury.io/py/camel-converter.svg)](https://badge.fury.io/py/camel-converter)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/camel-converter?color=5cc141)](https://github.com/sanders41/camel-converter)In JSON keys are frequently in camelCase format, while variable names in Python are typicallysnake_case. The purpose of this pacakgae is to help convert between the two formats.## Usage- To convert from camel case to snake case:  ```py  from camel_converter import to_snake  snake = to_snake(&quot;myString&quot;)  ```  This will convert `myString` into `my_string`- To convert a dictonary's keys from camel case to snake case:  ```py  from camel_converter import dict_to_snake  snake = dict_to_snake({&quot;myString&quot;: &quot;val 1&quot;})  ```  This will convert `{&quot;myString&quot;: &quot;val 1&quot;}` into `{&quot;my_string&quot;: &quot;val 1&quot;}`. Non-string keys will be  left unchanged.  This is also available as a decorator for functions that return a dictionary.  ```py  from camel_converter.decorators import dict_to_snake  @dict_to_snake  def my_func() -&gt; dict[str, str]:      return {&quot;myString&quot;: &quot;val 1&quot;}  snake = my_func()  ```  `my_func` will return `{&quot;my_string&quot;: &quot;val 1&quot;}`. Non-string keys will be  left unchanged.- To convert from snake case to camel case:  ```py  from camel_converter import to_camel  camel = to_camel(&quot;my_string&quot;)  ```  This will convert `my_string` into `myString`- To convert from a dictionary's keys from snake case to camel case:  ```py  from camel_converter import dict_to_camel  camel = to_camel({&quot;my_string&quot;: &quot;val 1&quot;})  ```  This will convert `{&quot;my_string&quot;: &quot;val 1&quot;}` into `{&quot;myString&quot;: &quot;val 1&quot;}` Non-string keys will be  left unchanged.  This is also available as a decorator for functions that return a dictionary.  ```py  from camel_converter.decorators import dict_to_camel  @dict_to_camel  def my_func() -&gt; dict[str, str]:      return {&quot;my_string&quot;: &quot;val 1&quot;}  camel = my_func()  ```  `my_func` will return `{&quot;myString&quot;: &quot;val 1&quot;}`. Non-string keys will be  left unchanged.- To convert from snake to pascal case:  ```py  from camel_converter import to_pascal  pascal = to_pascal(&quot;my_string&quot;)  ```  This will convert `my_string` into `MyString`- To convert from a dictionary's keys from snake case to pascal case:  ```py  from camel_converter import dict_to_pascal  pascal = to_pascal({&quot;my_string&quot;: &quot;val 1&quot;})  ```  This will convert `{&quot;my_string&quot;: &quot;val 1&quot;}` into `{&quot;MyString&quot;: &quot;val 1&quot;}` Non-string keys will be  left unchanged.  This is also available as a decorator for functions that return a dictionary.  ```py  from camel_converter.decorators import dict_to_pascal  @dict_to_pascal  def my_func() -&gt; dict[str, str]:      return {&quot;my_string&quot;: &quot;val 1&quot;}  pascal = my_func()  ```  `my_func` will return `{&quot;MyString&quot;: &quot;val 1&quot;}`. Non-string keys will be  left unchanged.### Optional ExtrasAn optional extra is provided for [Pydantic](https://pydantic-docs.helpmanual.io/) that provides abase class to automatically convert between snake case and camel case. To use this Pydantic classinstall camel converter with:```shpip install camel-converter[pydantic]```Then your Pydantic classes can inherit from CamelBase.```pyfrom camel_converter.pydantic_base import CamelBaseclass MyModel(CamelBase):    test_field: strmy_data = MyModel(**{&quot;testField&quot;: &quot;my value&quot;})print(my_data.test_field)```will result in `my value` being printed.With setting up your model in this way `myField` from the source, i.e. JSON data, will map to `my_field` in your model.## ContributingIf you are interesting in contributing to this project please see our [contributing guide](CONTRIBUTING.md)</longdescription>
</pkgmetadata>