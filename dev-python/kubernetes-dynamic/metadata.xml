<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># kubernetes-dynamicThis project aims to provide an easy interface over kubernetes API based on the official kubernetes package.Basic syntax is very similar to kubectl.`client.pods.get()` is the same as `kubectl get pods`## Example Usage```pythonimport kubernetes_dynamic as kdclient = kd.K8sClient()pods: list[kd.models.V1Pod] = client.pods.get()for pod in pods:    print(pod.metadata.name)```### Custom resources```pythonimport kubernetes_dynamic as kdclass MyModel(kd.models.ResourceItem):    field: strapi: ResourceApi[MyModel] = kc.cl.get_api(&quot;mycustomresources&quot;, MyModel)api: ResourceApi[MyModel] = kc.cl.get_api(kind=&quot;MyCustomResource&quot;, object_type=MyModel)items: List[MyModel] = api.get()item: Optional[MyModel] = api.get(name=&quot;exact-name&quot;)if item:    item.field = &quot;modified&quot;    item.patch()else:    item = MyModel(metadata={&quot;name&quot;: &quot;exact-name&quot;, &quot;namespace&quot;: &quot;namespace-name&quot;}, field=&quot;created&quot;, client=kd.cl)    item.create()    # item = MyModel(field=&quot;created&quot;)    # item.metadata.name = &quot;exact-name&quot;    # item = MyModel(metadata={&quot;name&quot;: &quot;exact-name&quot;}, field=&quot;created&quot;)    # item = MyModel(metadata=kd.models.V1Metadata(name=&quot;exact-name&quot;), field=&quot;created&quot;)    # item.create(namespace=&quot;namespace-name&quot;)```## ModelsWe aim to provide pydantic models for all reasources.Because the model names are exactly the same as in the `kubernetes` package, make sure you import the models from `kubernetes_dynamic.models`- Proper type hinting- All models are flexible (less dependent on kubernetes version):  - accept extra values  - all optional (type checker is tricked into assuming everything exists)- Models created by queries have a reference to the client it was created by, manually creating models creates a default client(without arguments), or you can specify `client` manually.- Base model contains common methods for all models:  - refresh  - patch  - create  - read  - delete  - is_ready- additional features for specific models (just examples):  - configmap:    - from_path  - ingress:    - get_default_host  - namespace:    - annotate    - ensure  - pod:    - get_restarts    - exec    - disk_usage    - get_controller_type    - get_env  - secret    - exists    - set    - decode## SubresourcesSubresources are available under the main resource api objects:- example: `client.pods.exec`## Work in progressExpect breaking changes</longdescription>
</pkgmetadata>