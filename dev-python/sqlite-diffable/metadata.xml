<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sqlite-diffable[![PyPI](https://img.shields.io/pypi/v/sqlite-diffable.svg)](https://pypi.org/project/sqlite-diffable/)[![Changelog](https://img.shields.io/github/v/release/simonw/sqlite-diffable?include_prereleases&amp;label=changelog)](https://github.com/simonw/sqlite-diffable/releases)[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/simonw/sqlite-diffable/blob/main/LICENSE)Tools for dumping/loading a SQLite database to diffable directory structure## Installation    pip install sqlite-diffable## DemoThe repository at [simonw/simonwillisonblog-backup](https://github.com/simonw/simonwillisonblog-backup) contains a backup of the database on my blog, https://simonwillison.net/ - created using this tool.## Dumping a databaseGiven a SQLite database called `fixtures.db` containing a table `facetable`, the following will dump out that table to the `dump/` directory:    sqlite-diffable dump fixtures.db dump/ facetableTo dump out every table in that database, use `--all`:    sqlite-diffable dump fixtures.db dump/ --all## Loading a databaseTo load a previously dumped database, run the following:    sqlite-diffable load restored.db dump/This will show an error if any of the tables that are being restored already exist in the database file.You can replace those tables (dropping them before restoring them) using the `--replace` option:    sqlite-diffable load restored.db dump/ --replace## Converting to JSON objectsTable rows are stored in the `.ndjson` files as newline-delimited JSON arrays, like this:```[&quot;a&quot;, &quot;a&quot;, &quot;a-a&quot;, 63, null, 0.7364712141640124, &quot;$null&quot;][&quot;a&quot;, &quot;b&quot;, &quot;a-b&quot;, 51, null, 0.6020187290499803, &quot;$null&quot;]```Sometimes it can be more convenient to work with a list of JSON objects.The `sqlite-diffable objects` command can read a `.ndjson` file and its accompanying `.metadata.json` file and output JSON objects to standard output:    sqlite-diffable objects fixtures.db dump/sortable.ndjsonThe output of that command looks something like this:```{&quot;pk1&quot;: &quot;a&quot;, &quot;pk2&quot;: &quot;a&quot;, &quot;content&quot;: &quot;a-a&quot;, &quot;sortable&quot;: 63, &quot;sortable_with_nulls&quot;: null, &quot;sortable_with_nulls_2&quot;: 0.7364712141640124, &quot;text&quot;: &quot;$null&quot;}{&quot;pk1&quot;: &quot;a&quot;, &quot;pk2&quot;: &quot;b&quot;, &quot;content&quot;: &quot;a-b&quot;, &quot;sortable&quot;: 51, &quot;sortable_with_nulls&quot;: null, &quot;sortable_with_nulls_2&quot;: 0.6020187290499803, &quot;text&quot;: &quot;$null&quot;}```Add `-o` to write that output to a file:    sqlite-diffable objects fixtures.db dump/sortable.ndjson -o output.txtAdd `--array` to output a JSON array of objects, as opposed to a newline-delimited file:    sqlite-diffable objects fixtures.db dump/sortable.ndjson --arrayOutput:```[{&quot;pk1&quot;: &quot;a&quot;, &quot;pk2&quot;: &quot;a&quot;, &quot;content&quot;: &quot;a-a&quot;, &quot;sortable&quot;: 63, &quot;sortable_with_nulls&quot;: null, &quot;sortable_with_nulls_2&quot;: 0.7364712141640124, &quot;text&quot;: &quot;$null&quot;},{&quot;pk1&quot;: &quot;a&quot;, &quot;pk2&quot;: &quot;b&quot;, &quot;content&quot;: &quot;a-b&quot;, &quot;sortable&quot;: 51, &quot;sortable_with_nulls&quot;: null, &quot;sortable_with_nulls_2&quot;: 0.6020187290499803, &quot;text&quot;: &quot;$null&quot;}]```## Storage formatEach table is represented as two files. The first, `table_name.metadata.json`, contains metadata describing the structure of the table. For a table called `redirects_redirect` that file might look like this:```json{    &quot;name&quot;: &quot;redirects_redirect&quot;,    &quot;columns&quot;: [        &quot;id&quot;,        &quot;domain&quot;,        &quot;path&quot;,        &quot;target&quot;,        &quot;created&quot;    ],    &quot;schema&quot;: &quot;CREATE TABLE [redirects_redirect] (\n   [id] INTEGER PRIMARY KEY,\n   [domain] TEXT,\n   [path] TEXT,\n   [target] TEXT,\n   [created] TEXT\n)&quot;}```It is an object with three keys: `name` is the name of the table, `columns` is an array of column strings and `schema` is the SQL schema text used for tha table.The second file, `table_name.ndjson`, contains [newline-delimited JSON](http://ndjson.org/) for every row in the table. Each row is represented as a JSON array with items corresponding to each of the columns defined in the metadata.That file for the `redirects_redirect.ndjson` table might look like this:```[1, &quot;feeds.simonwillison.net&quot;, &quot;swn-everything&quot;, &quot;https://simonwillison.net/atom/everything/&quot;, &quot;2017-10-01T21:11:36.440537+00:00&quot;][2, &quot;feeds.simonwillison.net&quot;, &quot;swn-entries&quot;, &quot;https://simonwillison.net/atom/entries/&quot;, &quot;2017-10-01T21:12:32.478849+00:00&quot;][3, &quot;feeds.simonwillison.net&quot;, &quot;swn-links&quot;, &quot;https://simonwillison.net/atom/links/&quot;, &quot;2017-10-01T21:12:54.820729+00:00&quot;]```</longdescription>
</pkgmetadata>