<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align='center'&gt;  &lt;h1&gt;DraftJS Sanitizer&lt;/h1&gt;  &lt;p&gt;Sanitizes a DraftJS JSON format from a dict to allow saving. Allows safe dumping into a string in order to prevent injection of quotes and HTML entities.&lt;/p&gt;  &lt;p&gt;    &lt;a href='https://travis-ci.org/NyanKiyoshi/draftjs-sanitizer/'&gt;      &lt;img src='https://travis-ci.org/NyanKiyoshi/draftjs-sanitizer.svg?branch=master' alt='Build Status' /&gt;    &lt;/a&gt;    &lt;a href='https://codecov.io/gh/NyanKiyoshi/draftjs-sanitizer'&gt;      &lt;img src='https://codecov.io/gh/NyanKiyoshi/draftjs-sanitizer/branch/master/graph/badge.svg' alt='Coverage Status' /&gt;    &lt;/a&gt;    &lt;a href='https://pypi.python.org/pypi/draftjs-sanitizer'&gt;      &lt;img src='https://img.shields.io/pypi/v/draftjs-sanitizer.svg' alt='Version' /&gt;    &lt;/a&gt;  &lt;/p&gt;  &lt;p&gt;    &lt;a href='https://pypi.python.org/pypi/draftjs-sanitizer'&gt;      &lt;img src='https://img.shields.io/pypi/pyversions/draftjs-sanitizer.svg' alt='Supported versions' /&gt;    &lt;/a&gt;    &lt;a href='https://pypi.python.org/pypi/draftjs-sanitizer'&gt;      &lt;img src='https://img.shields.io/pypi/implementation/draftjs-sanitizer.svg' alt='Supported implementations' /&gt;    &lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;## Installation```pip install draftjs-sanitizer```## Usage### Remove known exploitsThis removes any URLs that could be used for XSS attacks by linking raw javascript code.```pythonfrom draftjs_sanitizer import clean_draft_jsclean_draft_js({    &quot;blocks&quot;: [        {            &quot;key&quot;: &quot;an6ci&quot;,            &quot;data&quot;: {},            &quot;text&quot;: &quot;Get Saleor today!&quot;,            &quot;type&quot;: &quot;unstyled&quot;,            &quot;depth&quot;: 0,            &quot;entityRanges&quot;: [                {                    &quot;key&quot;: 0,                    &quot;length&quot;: 17,                    &quot;offset&quot;: 0                }            ],            &quot;inlineStyleRanges&quot;: []        }    ],    &quot;entityMap&quot;: {        &quot;0&quot;: {            &quot;data&quot;: {                &quot;url&quot;: &quot;javascript:alert('Oopsie!');&quot;            },            &quot;type&quot;: &quot;LINK&quot;,            &quot;mutability&quot;: &quot;MUTABLE&quot;        }    }})```### Dump JSON for HTML UsageThis allows to run it as a filter in order to prevent any injection or bypass when putting the JSON into HTML code.```pythonfrom draftjs_sanitizer import to_stringdumped_json = to_string({&quot;block&quot;: &quot;&lt;/div&gt;&lt;script&gt;alert('Oopsie!');&lt;/script&gt;&quot;})```#### Example 1: attribute bypass```html&lt;div data-draft-js-json='{&quot;block&quot;: &quot;'&lt;script&gt;alert('Oopsie!');&lt;/script&gt;&quot;}'&gt;&lt;/div&gt;```#### Example 2: bypass inner HTML```html&lt;div&gt;    {&quot;block&quot;: &quot;&lt;/div&gt;&lt;script&gt;alert('Oopsie!');&lt;/script&gt;&quot;}&lt;/div&gt;```## Supported Checks| Type | Entities | Description || ---- | -------- | ----------- || Javascript URL | `IMAGE`, `LINK` | Prevent injecting javascript through the `javascript` protocol into a URL. || Invalid URL | `IMAGE`, `LINK` | Removes any invalid URL from the JSON content. || Dangerous Characters | `any` | Removes any sensible character for HTML incorporation: `&quot;`, `'`, `&lt;`, `&gt;`.## Development```./setup.py developpip install -r requirements_dev.txt```You can easily extend the behaviors through:- `draftjs_sanitizer.encoder.DraftJSSafeEncoder`- `draftjs_sanitizer.sanitizer.DraftJSSanitizer`## Dependencies- `urllib3` for RFC 3986 parsing and validation of URLs.</longdescription>
</pkgmetadata>