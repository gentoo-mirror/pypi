<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [Plum: Multiple Dispatch in Python](https://github.com/beartype/plum)[![DOI](https://zenodo.org/badge/110279931.svg)](https://zenodo.org/badge/latestdoi/110279931)[![CI](https://github.com/beartype/plum/workflows/CI/badge.svg?branch=master)](https://github.com/beartype/plum/actions?query=workflow%3ACI)[![Coverage Status](https://coveralls.io/repos/github/beartype/plum/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/beartype/plum?branch=master)[![Latest Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://beartype.github.io/plum)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Everybody likes multiple dispatch, just like everybody likes plums.The design philosophy of Plum is to provide an implementation of multiple dispatch that is Pythonic, yet close to how [Julia](http://julia-lang.org/) does it.[See here for a comparison between Plum, `multipledispatch`, and `multimethod`.](https://beartype.github.io/plum/comparison.html)*Note:*Plum 2 is now powered by [Beartype](https://github.com/beartype/beartype)!If you notice any issues with the new release, please open an issue.# InstallationPlum requires Python 3.7 or higher.```bashpip install plum-dispatch```# [Documentation](https://beartype.github.io/plum)See [here](https://beartype.github.io/plum).# What's This?Plum brings your type annotations to life:```pythonfrom numbers import Numberfrom plum import dispatch@dispatchdef f(x: str):    return &quot;This is a string!&quot;@dispatchdef f(x: int):    return &quot;This is an integer!&quot;@dispatchdef f(x: Number):    return &quot;This is a general number, but I don't know which type.&quot;``````python&gt;&gt;&gt; f(&quot;1&quot;)'This is a string!'&gt;&gt;&gt; f(1)'This is an integer!'&gt;&gt;&gt; f(1.0)'This is a number, but I don't know which type.'&gt;&gt;&gt; f(object())NotFoundLookupError: For function `f`, `(&lt;object object at 0x7fb528458190&gt;,)` could not be resolved.```This also works for multiple arguments, enabling some neat design patterns:```pythonfrom numbers import Number, Real, Rationalfrom plum import dispatch@dispatchdef multiply(x: Number, y: Number):    return &quot;Performing fallback implementation of multiplication...&quot;@dispatchdef multiply(x: Real, y: Real):    return &quot;Performing specialised implementation for reals...&quot;@dispatchdef multiply(x: Rational, y: Rational):    return &quot;Performing specialised implementation for rationals...&quot;``````python&gt;&gt;&gt; multiply(1, 1)'Performing specialised implementation for rationals...'&gt;&gt;&gt; multiply(1.0, 1.0)'Performing specialised implementation for reals...'&gt;&gt;&gt; multiply(1j, 1j)'Performing fallback implementation of multiplication...'&gt;&gt;&gt; multiply(1, 1.0)  # For mixed types, it automatically chooses the right optimisation!'Performing specialised implementation for reals...'```</longdescription>
</pkgmetadata>