<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># plotnine[![Release](https://img.shields.io/pypi/v/plotnine.svg)](https://pypi.python.org/pypi/plotnine)[![License](https://img.shields.io/pypi/l/plotnine.svg)](https://pypi.python.org/pypi/plotnine)[![Build Status](https://github.com/has2k1/plotnine/workflows/build/badge.svg?branch=main)](https://github.com/has2k1/plotnine/actions?query=branch%3Amain+workflow%3A%22build%22)[![Coverage](https://codecov.io/github/has2k1/plotnine/coverage.svg?branch=main)](https://codecov.io/github/has2k1/plotnine?branch=main)[![Documentation](https://readthedocs.org/projects/plotnine/badge/?version=latest)](https://plotnine.readthedocs.io/en/latest/)[![DOI](https://zenodo.org/badge/89276692.svg)](https://zenodo.org/badge/latestdoi/89276692)plotnine is an implementation of a *grammar of graphics* in Python,it is based on [ggplot2](https://github.com/tidyverse/ggplot2).The grammar allows users to compose plots by explicitly mapping datato the visual objects that make up the plot.&lt;img width=&quot;33%&quot; align=&quot;right&quot; src=&quot;./doc/images/logo-540.png&quot;&gt;Plotting with a grammar is powerful, it makes custom (and otherwisecomplex) plots easy to think about and then create, while thesimple plots remain simple.To find out about all building blocks that you can use to create aplot, check out the [documentation](https://plotnine.readthedocs.io/en/latest/).Since plotnine has an API similar to ggplot2, where we lack in coverage the[ggplot2 documentation](http://ggplot2.tidyverse.org/reference/index.html)may be of some help.## Example```pythonfrom plotnine import *from plotnine.data import mtcars```Building a complex plot piece by piece.1. Scatter plot   ```python   (ggplot(mtcars, aes('wt', 'mpg'))    + geom_point())   ```   &lt;img width=&quot;90%&quot; align=&quot;center&quot; src=&quot;./doc/images/readme-image-1.png&quot;&gt;2. Scatter plot colored according some variable   ```python   (ggplot(mtcars, aes('wt', 'mpg', color='factor(gear)'))    + geom_point())   ```   &lt;img width=&quot;90%&quot; align=&quot;center&quot; src=&quot;./doc/images/readme-image-2.png&quot;&gt;3. Scatter plot colored according some variable and   smoothed with a linear model with confidence intervals.   ```python   (ggplot(mtcars, aes('wt', 'mpg', color='factor(gear)'))    + geom_point()    + stat_smooth(method='lm'))   ```   &lt;img width=&quot;90%&quot; align=&quot;center&quot; src=&quot;./doc/images/readme-image-3.png&quot;&gt;4. Scatter plot colored according some variable,   smoothed with a linear model with confidence intervals and   plotted on separate panels.   ```python   (ggplot(mtcars, aes('wt', 'mpg', color='factor(gear)'))    + geom_point()    + stat_smooth(method='lm')    + facet_wrap('~gear'))   ```   &lt;img width=&quot;90%&quot; align=&quot;center&quot; src=&quot;./doc/images/readme-image-4.png&quot;&gt;5. Adjust the themes   I) Make it playful   ```python   (ggplot(mtcars, aes('wt', 'mpg', color='factor(gear)'))    + geom_point()    + stat_smooth(method='lm')    + facet_wrap('~gear')    + theme_xkcd())   ```   &lt;img width=&quot;90%&quot; align=&quot;center&quot; src=&quot;./doc/images/readme-image-5.png&quot;&gt;   II) Or professional   ```python   (ggplot(mtcars, aes('wt', 'mpg', color='factor(gear)'))    + geom_point()    + stat_smooth(method='lm')    + facet_wrap('~gear')    + theme_tufte())   ```   &lt;img width=&quot;90%&quot; align=&quot;center&quot; src=&quot;./doc/images/readme-image-5alt.png&quot;&gt;## InstallationOfficial release```console# Using pip$ pip install plotnine             # 1. should be sufficient for most$ pip install 'plotnine[extra]'    # 2. includes extra/optional packages$ pip install 'plotnine[test]'     # 3. testing$ pip install 'plotnine[doc]'      # 4. generating docs$ pip install 'plotnine[dev]'      # 5. development (making releases)$ pip install 'plotnine[all]'      # 6. everyting# Or using conda$ conda install -c conda-forge plotnine```Development version```console$ pip install git+https://github.com/has2k1/plotnine.git```## ContributingOur documentation could use some examples, but we are looking for somethinga little bit special. We have two criteria:1. Simple looking plots that otherwise require a trick or two.2. Plots that are part of a data analytic narrative. That is, they provide   some form of clarity showing off the `geom`, `stat`, ... at their   differential best.If you come up with something that meets those criteria, we would love tosee it. See [plotnine-examples](https://github.com/has2k1/plotnine-examples).If you discover a bug checkout the [issues](https://github.com/has2k1/plotnine/issues)if it has not been reported, yet please file an issue.And if you can fix a bug, your contribution is welcome.Testing-------Plotnine has tests that generate images which are compared to baseline images knownto be correct. To generate images that are consistent across all systems you haveto install matplotlib from source. You can do that with ``pip`` using the command.```console$ pip install matplotlib --no-binary matplotlib```Otherwise there may be small differences in the text rendering that throw off theimage comparisons.</longdescription>
</pkgmetadata>