<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. http://docutils.sourceforge.net/docs/user/rst/quickref.html.. |nbsp| unicode:: 0xA0   :trim:imap_tools 📧=============High level lib for work with email by IMAP:- Basic message operations: fetch, uids, numbers- Parsed email message attributes- Query builder for search criteria- Actions with emails: copy, delete, flag, move, append- Actions with folders: list, set, get, create, exists, rename, subscribe, delete, status- IDLE commands: start, poll, stop, wait- Exceptions on failed IMAP operations- No external dependencies, tested.. image:: https://img.shields.io/pypi/dm/imap_tools.svg?style=social===============  ================================================================================================Python version   3.5+License          Apache-2.0PyPI             https://pypi.python.org/pypi/imap_tools/RFC              `IMAP4.1 &lt;https://tools.ietf.org/html/rfc3501&gt;`_,                 `EMAIL &lt;https://tools.ietf.org/html/rfc2822&gt;`_,                 `IMAP related RFCs &lt;https://github.com/ikvk/imap_tools/blob/master/docs/IMAP_related_RFCs.txt&gt;`_===============  ================================================================================================.. contents::Installation------------::    $ pip install imap-toolsGuide-----Basic^^^^^Info about lib are at: *this page*, docstrings, issues, pull requests, examples, source, stackoverflow.com.. code-block:: python    from imap_tools import MailBox, AND    # Get date, subject and body len of all emails from INBOX folder    with MailBox('imap.mail.com').login('test@mail.com', 'pwd') as mailbox:        for msg in mailbox.fetch():            print(msg.date, msg.subject, len(msg.text or msg.html))`Description of this^ example &lt;https://github.com/ikvk/imap_tools/blob/master/examples/basic.py&gt;`_.MailBox, MailBoxTls, MailBoxUnencrypted - for create mailbox client. `TLS example &lt;https://github.com/ikvk/imap_tools/blob/master/examples/tls.py&gt;`_.BaseMailBox.&lt;auth&gt; - login, login_utf8, xoauth2, logout - authentication functions, they support context manager.BaseMailBox.fetch - first searches email nums by criteria in current folder, then fetch and yields `MailMessage &lt;#email-attributes&gt;`_:* *criteria* = 'ALL', message search criteria, `query builder &lt;#search-criteria&gt;`_* *charset* = 'US-ASCII', indicates charset of the strings that appear in the search criteria. See rfc2978* *limit* = None, limit on the number of read emails, useful for actions with a large number of messages, like &quot;move&quot;* *mark_seen* = True, mark emails as seen on fetch* *reverse* = False, in order from the larger date to the smaller* *headers_only* = False, get only email headers (without text, html, attachments)* *bulk* = False, False - fetch each message separately per N commands - low memory consumption, slow; True - fetch all messages per 1 command - high memory consumption, fastBaseMailBox.uids - search mailbox for matching message uids in current folder, returns [str | None]* *criteria* = 'ALL', message search criteria, `query builder &lt;#search-criteria&gt;`_* *charset* = 'US-ASCII', indicates charset of the strings that appear in the search criteria. See rfc2978BaseMailBox.&lt;action&gt; - `copy, move, delete, flag, append &lt;#actions-with-emails&gt;`_BaseMailBox.folder - `folder manager &lt;#actions-with-folders&gt;`_BaseMailBox.idle - `idle manager &lt;#idle-workflow&gt;`_BaseMailBox.numbers - search mailbox for matching message numbers in current folder, returns [str]BaseMailBox.client - imaplib.IMAP4/IMAP4_SSL client instance.Email attributes^^^^^^^^^^^^^^^^MailMessage and MailAttachment public attributes are cached by functools.lru_cache.. code-block:: python    for msg in mailbox.fetch():  # generator: imap_tools.MailMessage        msg.uid          # str | None: '123'        msg.subject      # str: 'some subject 你 привет'        msg.from_        # str: 'Bartölke@ya.ru'        msg.to           # tuple: ('iam@goo.ru', 'friend@ya.ru', )        msg.cc           # tuple: ('cc@mail.ru', )        msg.bcc          # tuple: ('bcc@mail.ru', )        msg.reply_to     # tuple: ('reply_to@mail.ru', )        msg.date         # datetime.datetime: 1900-1-1 for unparsed, may be naive or with tzinfo        msg.date_str     # str: original date - 'Tue, 03 Jan 2017 22:26:59 +0500'        msg.text         # str: 'Hello 你 Привет'        msg.html         # str: '&lt;b&gt;Hello 你 Привет&lt;/b&gt;'        msg.flags        # tuple: ('\\Seen', '\\Flagged', 'ENCRYPTED')        msg.headers      # dict: {'received': ('from 1.m.ru', 'from 2.m.ru'), 'anti-virus': ('Clean',)}        msg.size_rfc822  # int: 20664 bytes - size info from server (*useful with headers_only arg)        msg.size         # int: 20377 bytes - size of received message        for att in msg.attachments:  # list: imap_tools.MailAttachment            att.filename             # str: 'cat.jpg'            att.payload              # bytes: b'\xff\xd8\xff\xe0\'            att.content_id           # str: 'part45.06020801.00060008@mail.ru'            att.content_type         # str: 'image/jpeg'            att.content_disposition  # str: 'inline'            att.part                 # email.message.Message: original object            att.size                 # int: 17361 bytes        msg.obj              # email.message.Message: original object        msg.from_values      # imap_tools.EmailAddress | None        msg.to_values        # tuple: (imap_tools.EmailAddress,)        msg.cc_values        # tuple: (imap_tools.EmailAddress,)        msg.bcc_values       # tuple: (imap_tools.EmailAddress,)        msg.reply_to_values  # tuple: (imap_tools.EmailAddress,)        # EmailAddress(name='Ya', email='im@ya.ru')  # &quot;full&quot; property = 'Ya &lt;im@ya.ru&gt;'Search criteria^^^^^^^^^^^^^^^You can use 3 types for &quot;criteria&quot; argument of MailBox methods: fetch, uids, numbers:.. code-block:: python    from imap_tools import AND    mailbox.fetch(AND(subject='weather'))  # query, the str-like object    mailbox.fetch('TEXT &quot;hello&quot;')          # str    mailbox.fetch(b'TEXT &quot;\xd1\x8f&quot;')      # bytesUse &quot;charset&quot; argument for encode criteria to the desired encoding. If &quot;criteria&quot; is bytes - encoding will be ignored... code-block:: python    mailbox.uids(A(subject='жёлтый'), charset='utf8')Query builder implements all search logic described in `rfc3501 &lt;https://tools.ietf.org/html/rfc3501#section-6.4.4&gt;`_.It uses this classes:========  =====  ========================================== ======================================Class     Alias  Description                                Arguments========  =====  ========================================== ======================================AND       A      Combine conditions by logical &quot;AND&quot;        Search keys (see table below) | strOR        O      Combine conditions by logical &quot;OR&quot;         Search keys (see table below) | strNOT       N      Invert the result of a logical expression  AND/OR instances | strHeader    H      Header value for search by header key      name: str, value: strUidRange  U      UID range value for search by uid key      start: str, end: str========  =====  ========================================== ======================================See `query examples &lt;https://github.com/ikvk/imap_tools/blob/master/examples/search.py&gt;`_. A few examples:.. code-block:: python    from imap_tools import A, AND, OR, NOT    # AND    A(text='hello', new=True)  # '(TEXT &quot;hello&quot; NEW)'    # OR    OR(text='hello', date=datetime.date(2000, 3, 15))  # '(OR TEXT &quot;hello&quot; ON 15-Mar-2000)'    # NOT    NOT(text='hello', new=True)  # 'NOT (TEXT &quot;hello&quot; NEW)'    # complex    A(OR(from_='from@ya.ru', text='&quot;the text&quot;'), NOT(OR(A(answered=False), A(new=True))), to='to@ya.ru')    # python note: you can't do: A(text='two', NOT(subject='one'))    A(NOT(subject='one'), text='two')  # use kwargs after logic classes (args)Search key table. Key types marked with `*` can accepts a sequence of values like list, tuple, set or generator.=============  ===============  ======================  ================================================================Key            Types            Results                 Description=============  ===============  ======================  ================================================================answered       bool             `ANSWERED/UNANSWERED`   with/without the Answered flagseen           bool             `SEEN/UNSEEN`           with/without the Seen flagflagged        bool             `FLAGGED/UNFLAGGED`     with/without the Flagged flagdraft          bool             `DRAFT/UNDRAFT`         with/without the Draft flagdeleted        bool             `DELETED/UNDELETED`     with/without the Deleted flagkeyword        str*             KEYWORD KEY             with the specified keyword flagno_keyword     str*             UNKEYWORD KEY           without the specified keyword flag`from_`        str*             FROM `&quot;from@ya.ru&quot;`     contain specified str in envelope struct's FROM fieldto             str*             TO `&quot;to@ya.ru&quot;`         contain specified str in envelope struct's TO fieldsubject        str*             SUBJECT &quot;hello&quot;         contain specified str in envelope struct's SUBJECT fieldbody           str*             BODY &quot;some_key&quot;         contain specified str in body of the messagetext           str*             TEXT &quot;some_key&quot;         contain specified str in header or body of the messagebcc            str*             BCC `&quot;bcc@ya.ru&quot;`       contain specified str in envelope struct's BCC fieldcc             str*             CC `&quot;cc@ya.ru&quot;`         contain specified str in envelope struct's CC fielddate           datetime.date*   ON 15-Mar-2000          internal date is within specified datedate_gte       datetime.date*   SINCE 15-Mar-2000       internal date is within or later than the specified datedate_lt        datetime.date*   BEFORE 15-Mar-2000      internal date is earlier than the specified datesent_date      datetime.date*   SENTON 15-Mar-2000      rfc2822 Date: header is within the specified datesent_date_gte  datetime.date*   SENTSINCE 15-Mar-2000   rfc2822 Date: header is within or later than the specified datesent_date_lt   datetime.date*   SENTBEFORE 1-Mar-2000   rfc2822 Date: header is earlier than the specified datesize_gt        int &gt;= 0         LARGER 1024             rfc2822 size larger than specified number of octetssize_lt        int &gt;= 0         SMALLER 512             rfc2822 size smaller than specified number of octetsnew            True             NEW                     have the Recent flag set but not the Seen flagold            True             OLD                     do not have the Recent flag setrecent         True             RECENT                  have the Recent flag setall            True             ALL                     all, criteria by defaultuid            iter(str)/str/U  UID 1,2,17              corresponding to the specified unique identifier setheader         H(str, str)*     HEADER &quot;A-Spam&quot; &quot;5.8&quot;   have a header that contains the specified str in the textgmail_label    str*             X-GM-LABELS &quot;label1&quot;    have this gmail label=============  ===============  ======================  ================================================================Server side search notes:* For string search keys a message matches if the string is a substring of the field. The matching is case-insensitive.* When searching by dates - email's time and timezone are disregarding.Actions with emails^^^^^^^^^^^^^^^^^^^First of all read about UID `at rfc3501 &lt;https://tools.ietf.org/html/rfc3501#section-2.3.1.1&gt;`_.Action's uid_list arg may takes:* str, that is comma separated uids* Sequence, that contains str uidsTo get uids, use the maibox methods: uids, fetch.For actions with a large number of messages imap command may be too large and will cause exception at server side,use 'limit' argument for fetch in this case... code-block:: python    with MailBox('imap.mail.com').login('test@mail.com', 'pwd', initial_folder='INBOX') as mailbox:        # COPY messages with uid in 23,27 from current folder to folder1        mailbox.copy('23,27', 'folder1')        # MOVE all messages from current folder to INBOX/folder2        mailbox.move(mailbox.uids(), 'INBOX/folder2')        # DELETE messages with 'cat' word in its html from current folder        mailbox.delete([msg.uid for msg in mailbox.fetch() if 'cat' in msg.html])        # FLAG unseen messages in current folder as \Seen, \Flagged and TAG1        flags = (imap_tools.MailMessageFlags.SEEN, imap_tools.MailMessageFlags.FLAGGED, 'TAG1')        mailbox.flag(mailbox.uids(AND(seen=False)), flags, True)        # APPEND: add message to mailbox directly, to INBOX folder with \Seen flag and now date        with open('/tmp/message.eml', 'rb') as f:            msg = imap_tools.MailMessage.from_bytes(f.read())  # *or use bytes instead MailMessage        mailbox.append(msg, 'INBOX', dt=None, flag_set=[imap_tools.MailMessageFlags.SEEN])Actions with folders^^^^^^^^^^^^^^^^^^^^BaseMailBox.login/xoauth2 has initial_folder arg, that is &quot;INBOX&quot; by default, use None for not set folder on login... code-block:: python    with MailBox('imap.mail.com').login('test@mail.com', 'pwd') as mailbox:        # LIST: get all subfolders of the specified folder (root by default)        for f in mailbox.folder.list('INBOX'):            print(f)  # FolderInfo(name='INBOX|cats', delim='|', flags=('\\Unmarked', '\\HasChildren'))        # SET: select folder for work        mailbox.folder.set('INBOX')        # GET: get selected folder        current_folder = mailbox.folder.get()        # CREATE: create new folder        mailbox.folder.create('INBOX|folder1')        # EXISTS: check is folder exists (shortcut for list)        is_exists = mailbox.folder.exists('INBOX|folder1')        # RENAME: set new name to folder        mailbox.folder.rename('folder3', 'folder4')        # SUBSCRIBE: subscribe/unsubscribe to folder        mailbox.folder.subscribe('INBOX|папка два', True)        # DELETE: delete folder        mailbox.folder.delete('folder4')        # STATUS: get folder status info        stat = mailbox.folder.status('some_folder')        print(stat)  # {'MESSAGES': 41, 'RECENT': 0, 'UIDNEXT': 11996, 'UIDVALIDITY': 1, 'UNSEEN': 5}IDLE workflow^^^^^^^^^^^^^IDLE logic are in mailbox.idle manager, its methods are in the table below:======== ============================================================================== ================================Method   Description                                                                    Arguments======== ============================================================================== ================================start    Switch on mailbox IDLE modepoll     Poll for IDLE responses                                                        timeout: |nbsp| Optional[float]stop     Switch off mailbox IDLE modewait     Switch on IDLE, poll responses, switch off IDLE on response, return responses  timeout: |nbsp| Optional[float]======== ============================================================================== ================================.. code-block:: python    from imap_tools import MailBox, A    # waiting for updates 60 sec, print unseen immediately if any update    with MailBox('imap.my.moon').login('acc', 'pwd', 'INBOX') as mailbox:        responses = mailbox.idle.wait(timeout=60)        if responses:            for msg in mailbox.fetch(A(seen=False)):                print(msg.date, msg.subject)        else:            print('no updates in 60 sec')Read docstrings and see `detailed examples &lt;https://github.com/ikvk/imap_tools/blob/master/examples/idle.py&gt;`_.Exceptions^^^^^^^^^^Most lib server actions raises exception if result is marked as not success.Custom lib exceptions here: `errors.py &lt;https://github.com/ikvk/imap_tools/blob/master/imap_tools/errors.py&gt;`_.Release notes-------------History of important changes: `release_notes.rst &lt;https://github.com/ikvk/imap_tools/blob/master/docs/release_notes.rst&gt;`_Contribute----------If you found a bug or have a question, then:1. Look for answer at: this page, issues, pull requests, examples, source, RFCs, stackoverflow.com, internet.2. And only then - create merge request or issue.Reasons-------- Excessive low level of `imaplib` library.- Other libraries contain various shortcomings or not convenient.- Open source projects make world better.Thanks------Big thanks to people who helped develop this library:`shilkazx &lt;https://github.com/shilkazx&gt;`_,`somepad &lt;https://github.com/somepad&gt;`_,`0xThiebaut &lt;https://github.com/0xThiebaut&gt;`_,`TpyoKnig &lt;https://github.com/TpyoKnig&gt;`_,`parchd-1 &lt;https://github.com/parchd-1&gt;`_,`dojasoncom &lt;https://github.com/dojasoncom&gt;`_,`RandomStrangerOnTheInternet &lt;https://github.com/RandomStrangerOnTheInternet&gt;`_,`jonnyarnold &lt;https://github.com/jonnyarnold&gt;`_,`Mitrich3000 &lt;https://github.com/Mitrich3000&gt;`_,`audemed44 &lt;https://github.com/audemed44&gt;`_,`mkalioby &lt;https://github.com/mkalioby&gt;`_,`atlas0fd00m &lt;https://github.com/atlas0fd00m&gt;`_,`unqx &lt;https://github.com/unqx&gt;`_,`daitangio &lt;https://github.com/daitangio&gt;`_,`upils &lt;https://github.com/upils&gt;`_,`Foosec &lt;https://github.com/Foosec&gt;`_,`frispete &lt;https://github.com/frispete&gt;`_,`PH89 &lt;https://github.com/PH89&gt;`_,`amarkham09 &lt;https://github.com/amarkham09&gt;`_,`nixCodeX &lt;https://github.com/nixCodeX&gt;`_,`backelj &lt;https://github.com/backelj&gt;`_,`ohayak &lt;https://github.com/ohayak&gt;`_,`mwherman95926 &lt;https://github.com/mwherman95926&gt;`_,`andyfensham &lt;https://github.com/andyfensham&gt;`_,`mike-code &lt;https://github.com/mike-code&gt;`_,`aknrdureegaesr &lt;https://github.com/aknrdureegaesr&gt;`_,`ktulinger &lt;https://github.com/ktulinger&gt;`_,`SamGenTLEManKaka &lt;https://github.com/SamGenTLEManKaka&gt;`_,`devkral &lt;https://github.com/devkral&gt;`_,`tnusraddinov &lt;https://github.com/tnusraddinov&gt;`_,`thepeshka &lt;https://github.com/thepeshka&gt;`_,`shofstet &lt;https://github.com/shofstet&gt;`_,`the7erm &lt;https://github.com/the7erm&gt;`_,`c0da &lt;https://github.com/c0da&gt;`_,`dev4max &lt;https://github.com/dev4max&gt;`_,`ascheucher &lt;https://github.com/ascheucher&gt;`_,`Borutia &lt;https://github.com/Borutia&gt;`_,`nathan30 &lt;https://github.com/nathan30&gt;`_,`daniel55411 &lt;https://github.com/daniel55411&gt;`_,`rcarmo &lt;https://github.com/rcarmo&gt;`_,`bhernacki &lt;https://github.com/bhernacki&gt;`_,`ilep &lt;https://github.com/ilep&gt;`_,`ThKue &lt;https://github.com/ThKue&gt;`_,`repodiac &lt;https://github.com/repodiac&gt;`_,`tiuub &lt;https://github.com/tiuub&gt;`_,`Yannik &lt;https://github.com/Yannik&gt;`_,`pete312 &lt;https://github.com/pete312&gt;`_,`edkedk99 &lt;https://github.com/edkedk99&gt;`_,`UlisseMini &lt;https://github.com/UlisseMini&gt;`_,`Nicarex &lt;https://github.com/Nicarex&gt;`_,`RanjithNair1980 &lt;https://github.com/RanjithNair1980&gt;`_,`NickC-NZ &lt;https://github.com/NickC-NZ&gt;`_,`mweinelt &lt;https://github.com/mweinelt&gt;`_,`lucbouge &lt;https://github.com/lucbouge&gt;`_,`JacquelinCharbonnel &lt;https://github.com/JacquelinCharbonnel&gt;`_,`stumpylog &lt;https://github.com/stumpylog&gt;`_,`dimitrisstr &lt;https://github.com/dimitrisstr&gt;`_,`abionics &lt;https://github.com/abionics&gt;`_Help the project----------------1. Found a bug or figure out how to improve the library - open issue or merge request 🎯2. Do not know how to improve library - try to help other open projects that you use ✋3. Nowhere to put your money - spend it on your family, friends, loved ones, or people around you 💰4. Star the project ⭐</longdescription>
</pkgmetadata>