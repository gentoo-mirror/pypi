<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;h1&gt;ODMantic&lt;/h1&gt;&lt;a href=&quot;https://github.com/art049/odmantic/actions?query=workflow%3A%22build%22+branch%3Amaster&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/art049/odmantic/workflows/build/badge.svg&quot; alt=&quot;build&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/art049/odmantic&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/art049/odmantic/branch/master/graph/badge.svg?token=3NYZK14STZ&quot; alt=&quot;coverage&quot;&gt;&lt;/a&gt;&lt;img src=&quot;https://img.shields.io/badge/python-3.7%20|%203.8%20|%203.9%20|%203.10-informational.svg&quot; alt=&quot;python-3.7-3.8-3.9-3.10&quot;&gt;&lt;a href=&quot;https://pypi.org/project/odmantic&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/odmantic?color=%2334D058&amp;label=pypi&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gitter.im/odmantic/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://badges.gitter.im/odmantic/community.svg&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt;&lt;/div&gt;---**Documentation**: [https://art049.github.io/odmantic/](https://art049.github.io/odmantic/)---Sync and Async ODM (Object Document Mapper) for &lt;a href=&quot;https://www.mongodb.com/&quot;target=&quot;_blank&quot;&gt;MongoDB&lt;/a&gt; based on standard python type hints. Built on top of &lt;ahref=&quot;https://pydantic-docs.helpmanual.io/&quot; target=&quot;_blank&quot;&gt;pydantic&lt;/a&gt; for modeldefinition and validation.Core features:- **Simple**: define your model by typing your fields using python types, build queries  using python comparison operators- **Developer experience**: field/method autocompletion, type hints, data validation,  perform database operations with a functional API- **Fully typed**: leverage static analysis to reduce runtime issues- **AsyncIO support**: works well with ASGI frameworks (&lt;a href=&quot;https://fastapi.tiangolo.com/&quot;  target=&quot;_blank&quot;&gt;FastAPI&lt;/a&gt;, &lt;a href=&quot;https://pgjones.gitlab.io/quart/&quot;  target=&quot;_blank&quot;&gt;quart&lt;/a&gt;, &lt;a href=&quot;https://sanicframework.org/&quot;  target=&quot;_blank&quot;&gt;sanic&lt;/a&gt;, &lt;a href=&quot;https://www.starlette.io/&quot;  target=&quot;_blank&quot;&gt;Starlette&lt;/a&gt;, ...) but works also perfectly in synchronous environments- **Serialization**: built in JSON serialization and JSON schema generation## Requirements**Python**: 3.7 and later (tested against 3.7, 3.8, 3.9 and 3.10)**MongoDB**: 4.0 and later## Installation```shellpip install odmantic```## Example&gt; To enjoy an async context without any code boilerplate, you can reproduce the&gt; following steps using the AsyncIO REPL (only for Python 3.8+).&gt;&gt; ```&gt; python3.8 -m asyncio&gt; ```&gt;&gt; If you are using an earlier version of Python you can use &lt;a&gt; href=&quot;https://ipython.readthedocs.io/en/stable/install/index.html&quot;&gt; target=&quot;_blank&quot;&gt;IPython&lt;/a&gt; which provide an Autoawait feature (starting from Python&gt; 3.6).### Define your first model```pythonfrom typing import Optionalfrom odmantic import Field, Modelclass Publisher(Model):    name: str    founded: int = Field(ge=1440)    location: Optional[str] = None```By defining the `Publisher` class, we've just created an ODMantic model ðŸŽ‰. In thisexample, the model will represent book publishers.This model contains three fields:- `name`: This is the name of the Publisher. This is a simple string field without any  specific validation but it will be required to build a new Publisher.- `founded`: This is the year of foundation of the Publisher. Since the printing press  has been invented in 1440, it would be handy to allow only values above 1440. The  `ge` keyword argument passed to the Field is exactly doing this. The model will  require a founded value greater or equal than 1440.- `location`: This field will contain the country code of the Publisher. Defining this  field as `Optional` with a `None` default value makes it a non required field that  will be set automatically when not specified.The collection name has been defined by ODMantic as well. In this case it will be`publisher`.### Create some instances```pythoninstances = [    Publisher(name=&quot;HarperCollins&quot;, founded=1989, location=&quot;US&quot;),    Publisher(name=&quot;Hachette Livre&quot;, founded=1826, location=&quot;FR&quot;),    Publisher(name=&quot;Lulu&quot;, founded=2002)]```We defined three instances of the Publisher model. They all have a `name` property as itwas required. All the foundations years are later than 1440. The last publisher has nolocation specified so by default this field is set to `None` (it will be stored as`null` in the database).For now, those instances only exists locally. We will persist them in a database in thenext step.### Populate the database with your instances&gt; For the next steps, you'll need to start a local MongoDB server.The easiest way is&gt; to use docker. Simply run the next command in a terminal (closing the terminal will&gt; terminate the MongoDB instance and remove the container).&gt;&gt; ```shell&gt; docker run --rm -p 27017:27017 mongo&gt; ```First, let's connect to the database using the engine. In ODMantic, every databaseoperation is performed using the engine object.```pythonfrom odmantic import AIOEngineengine = AIOEngine()```By default, the `AIOEngine` (stands for AsyncIOEngine) automatically tries to connect to aMongoDB instance running locally (on port 27017). Since we didn't provide any database name, it will usethe database named `test` by default.The next step is to persist the instances we created before. We can perform thisoperation using the `AIOEngine.save_all` method.```pythonawait engine.save_all(instances)```Most of the engine I/O methods are asynchronous, hence the `await` keyword used here.Once the operation is complete, we should be able to see our created documents in thedatabase. You can use &lt;a href=&quot;https://www.mongodb.com/products/compass&quot;target=&quot;_blank&quot;&gt;Compass&lt;/a&gt; or &lt;a href=&quot;https://robomongo.org/&quot;target=&quot;_blank&quot;&gt;RoboMongo&lt;/a&gt; if you'd like to have a graphical interface.Another possibility is to use `mongo` CLI directly:```shellmongo --eval &quot;db.publisher.find({})&quot;```Output:```jsconnecting to: mongodb://127.0.0.1:27017{  &quot;_id&quot;: ObjectId(&quot;5f67b331514d6855bc5c54c9&quot;),  &quot;founded&quot;: 1989,  &quot;location&quot;: &quot;US&quot;,  &quot;name&quot;: &quot;HarperCollins&quot;},{  &quot;_id&quot;: ObjectId(&quot;5f67b331514d6855bc5c54ca&quot;),  &quot;founded&quot;:1826,  &quot;location&quot;: &quot;FR&quot;,  &quot;name&quot;: &quot;Hachette Livre&quot;},{  &quot;_id&quot;: ObjectId(&quot;5f67b331514d6855bc5c54cb&quot;),  &quot;founded&quot;: 2002,  &quot;location&quot;: null,  &quot;name&quot;: &quot;Lulu&quot;}```The created instances are stored in the `test` database under the `publisher` collection.We can see that an `_id` field has been added to each document. MongoDB need this fieldto act as a primary key. Actually, this field is added by ODMantic and you can access itunder the name `id`.```pythonprint(instances[0].id)#&gt; ObjectId(&quot;5f67b331514d6855bc5c54c9&quot;)```### Find instances matching a criteriaSince we now have some documents in the database, we can start building some queries.First, let's find publishers created before the 2000s:```pythonearly_publishers = await engine.find(Publisher, Publisher.founded &lt;= 2000)print(early_publishers)#&gt; [Publisher(name=&quot;HarperCollins&quot;, founded=1989, location=&quot;US),#&gt;  Publisher(name=&quot;Hachette Livre&quot;, founded=1826, location=&quot;FR&quot;)]```Here, we called the `engine.find` method. The first argument we need to specify is theModel class we want to query on (in our case `Publisher`). The second argument is theactual query. Similarly to &lt;a href=&quot;https://www.sqlalchemy.org/&quot;target=&quot;_blank&quot;&gt;SQLAlchemy&lt;/a&gt;, you can build ODMantic queries using the regular pythonoperators.When awaited, the `engine.find` method will return the list of matching instances storedin the database.Another possibility is to query for at most one instance. For example, if we want toretrieve a publisher from Canada (CA):```pythonca_publisher = await engine.find_one(Publisher, Publisher.location == &quot;CA&quot;)print(ca_publisher)#&gt; None```Here the result is `None` because no matching instances have been found in the database.The `engine.find_one` method returns an instance if one exists in the databaseotherwise, it will return `None`.### Modify an instanceFinally, let's edit some instances. For example, we can set the `location` for thepublisher named `Lulu`.First, we need to gather the instance from the database:```pythonlulu = await engine.find_one(Publisher, Publisher.name == &quot;Lulu&quot;)print(lulu)#&gt; Publisher(name=&quot;Lulu&quot;, founded=2002, location=None)```We still have the same instance, with no location set. We can change this field:```pythonlulu.location = &quot;US&quot;print(lulu)#&gt; Publisher(name=&quot;Lulu&quot;, founded=2002, location=&quot;US)```The location has been changed locally but the last step to persist this change is tosave the document:```pythonawait engine.save(lulu)```We can now check the database state:```shellmongo --eval &quot;db.publisher.find({name: 'Lulu'})&quot;```Output:```json hl_lines=&quot;5&quot;connecting to: mongodb://127.0.0.1:27017{  &quot;_id&quot;: ObjectId(&quot;5f67b331514d6855bc5c54cb&quot;),  &quot;founded&quot;: 2002,  &quot;location&quot;: &quot;US&quot;,  &quot;name&quot;: &quot;Lulu&quot;}```The document have been successfully updated !Now, what if we would like to change the foundation date with an invalid one (before 1440) ?```pythonlulu.founded = 1000#&gt; ValidationError: 1 validation error for Publisher#&gt; founded#&gt;   ensure this value is greater than 1440#&gt;   (type=value_error.number.not_gt; limit_value=1440)```This will raise an exception as it's not matching the model definition. The raisedexception is actually a `ValidationError` created by from &lt;ahref=&quot;https://pydantic-docs.helpmanual.io/usage/models/#error-handling&quot;target=&quot;_blank&quot;&gt;pydantic&lt;/a&gt;.### Next stepsIf you already have experience with Pydantic and FastAPI, the [Usage with FastAPI](https://art049.github.io/odmantic/usage_fastapi/) example sould be interesting for you to get kickstarted.Otherwise, to get started on more advanced practices like relations and building moreadvanced queries, you can directly check the other sections of the[documentation](https://art049.github.io/odmantic/).If you wish to contribute to the project (Thank you! :smiley:), you can have a look to the[Contributing](https://art049.github.io/odmantic/contributing/) section of thedocumentation.## LicenseThis project is licensed under the terms of the &lt;ahref=&quot;https://github.com/art049/odmantic/blob/master/LICENSE&quot; target=&quot;_blank&quot;&gt;ISC license&lt;/a&gt;.</longdescription>
</pkgmetadata>