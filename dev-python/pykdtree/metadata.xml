<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/storpipfugl/pykdtree/actions/workflows/deploy-wheels.yml/badge.svg?branch=master    :target: https://github.com/storpipfugl/pykdtree/actions/workflows/deploy-wheels.yml========pykdtree========Objective---------pykdtree is a kd-tree implementation for fast nearest neighbour search in Python.The aim is to be the fastest implementation around for common use cases (low dimensions and low number of neighbours) for both tree construction and queries.The implementation is based on scipy.spatial.cKDTree and libANN by combining the best features from both and focus on implementation efficiency.The interface is similar to that of scipy.spatial.cKDTree except only Euclidean distance measure is supported.Queries are optionally multithreaded using OpenMP.Installation------------Pykdtree can be installed via pip:.. code-block:: bash    pip install pykdtree    Or, if in a conda-based environment, with conda from the conda-forge channel:.. code-block:: bash    conda install -c conda-forge pykdtree    Note that by default these packages (the binary wheels on PyPI and the binarypackage on conda-forge) are only built with OpenMP for linux platforms.To attempt to build from source with OpenMP support do:.. code-block:: bash    export USE_OMP=&quot;probe&quot;    pip install --no-binary pykdtree pykdtree    This may not work on some systems that don't have OpenMP installed. See the below developmentinstructions for more guidance. Disabling OpenMP can be accomplished by setting `USE_OMP` to ``&quot;0&quot;``in the above commands.Development Installation------------------------If you wish to contribute to pykdtree then it is a good idea to install from sourceso you can quickly see the effects of your changes.By default pykdtree is built with OpenMP enabled queries on unix-like systems.On linux this is done using libgomp. On OSX systems OpenMP is provided using theclang compiler (conda environments use a separate compiler)... code-block:: bash    $ cd &lt;pykdtree_dir&gt;    $ pip install -e .This installs pykdtree in an &quot;editable&quot; mode where changes to the Python filesare automatically reflected when running a new python interpreter instance(ex. running a python script that uses pykdtree). It does not automatically rebuildor recompile the `.mako` templates and `.pyx` Cython code in pykdtree. Editingthese files requires running the `pykdtree/render_template.py` script and thenrerunning the pip command above to recompile the Cython files.If installation fails with undefined compiler flags or you want to use another OpenMPimplementation you may need to modify setup.py or specify additional pip command lineflags to match the library locations on your system.Building without OpenMP support is controlled by the USE_OMP environment variable.. code-block:: bash    $ cd &lt;pykdtree_dir&gt;    $ export USE_OMP=0    $ pip install -e .Note evironment variables are by default not exported when using sudo so in this case do.. code-block:: bash    $ USE_OMP=0 sudo -E pip install -e .Control OpenMP usage^^^^^^^^^^^^^^^^^^^^The ``USE_OMP`` variable can be set to one of a couple different options. Ifset to ``&quot;probe&quot;``, the installation process (``setup.py``) will attempt todetermine what variant of OpenMP is available based on the compiler being used,the platform being run on, and the Python environment being run with. It willthen use the flags specified by one of the other ``USE_OMP`` modes. Note thatin the case of MacOS, it will also try to identify if OpenMP is available frommacports or homebrew and include the necessary include and library paths.If set to ``&quot;gcc&quot;`` or ``&quot;gomp&quot;`` then compiler and linking flags will be setappropriately for &quot;GNU OpenMP&quot; (gomp) library. If set to ``&quot;clang&quot;`` or ``&quot;omp&quot;`` then the flags will be set to support the &quot;omp&quot; library. If set to``&quot;msvc&quot;`` then flags will be set for the Microsoft Visual C++ compiler'sOpenMP variant. For backwards compatibility the previous ``&quot;1&quot;`` has the samebehavior as ``&quot;probe&quot;``. As mentioned above ``&quot;0&quot;`` can be used to disableany detection of OpenMP or attempt to compile with it.Usage-----The usage of pykdtree is similar to scipy.spatial.cKDTree so for now refer to its documentation    &gt;&gt;&gt; from pykdtree.kdtree import KDTree    &gt;&gt;&gt; kd_tree = KDTree(data_pts)    &gt;&gt;&gt; dist, idx = kd_tree.query(query_pts, k=8)The number of threads to be used in OpenMP enabled queries can be controlled with the standard OpenMP environment variable OMP_NUM_THREADS.The **leafsize** argument (number of data points per leaf) for the tree creation can be used to control the memory overhead of the kd-tree. pykdtree uses a default **leafsize=16**.Increasing **leafsize** will reduce the memory overhead and construction time but increase query time.pykdtree accepts data in double precision (numpy.float64) or single precision (numpy.float32) floating point. If data of another type is used an internal copy in double precision is made resulting in a memory overhead. If the kd-tree is constructed on single precision data the query points must be single precision as well.Benchmarks----------Comparison with scipy.spatial.cKDTree and libANN. This benchmark is on geospatial 3D data with 10053632 data points and 4276224 query points. The results are indexed relative to the construction time of scipy.spatial.cKDTree. A leafsize of 10 (scipy.spatial.cKDTree default) is used.Note: libANN is *not* thread safe. In this benchmark libANN is compiled with &quot;-O3 -funroll-loops -ffast-math -fprefetch-loop-arrays&quot; in order to achieve optimum performance.==================  =====================  ======  ========  ==================Operation           scipy.spatial.cKDTree  libANN  pykdtree  pykdtree 4 threads------------------  ---------------------  ------  --------  ------------------Construction                          100     304        96                  96query 1 neighbour                    1267     294       223                  70Total 1 neighbour                    1367     598       319                 166query 8 neighbours                   2193     625       449                 143Total 8 neighbours                   2293     929       545                 293==================  =====================  ======  ========  ==================Looking at the combined construction and query this gives the following performance improvement relative to scipy.spatial.cKDTree==========  ======  ========  ==================Neighbours  libANN  pykdtree  pykdtree 4 threads----------  ------  --------  ------------------1            129%      329%                723%8            147%      320%                682%==========  ======  ========  ==================Note: mileage will vary with the dataset at hand and computer architecture.Test----Run the unit tests using pytest.. code-block:: bash    $ cd &lt;pykdtree_dir&gt;    $ pytestInstalling on AppVeyor----------------------Pykdtree requires the &quot;stdint.h&quot; header file which is not available on certainversions of Windows or certain Windows compilers including those on thecontinuous integration platform AppVeyor. To get around this the header file(s)can be downloaded and placed in the correct &quot;include&quot; directory. This canbe done by adding the `anaconda/missing-headers.ps1` script to your repositoryand running it the install step of `appveyor.yml`:    # install missing headers that aren't included with MSVC 2008    # https://github.com/omnia-md/conda-recipes/pull/524    - &quot;powershell ./appveyor/missing-headers.ps1&quot;In addition to this, AppVeyor does not support OpenMP so this feature must beturned off by adding the following to `appveyor.yml` in the`environment` section:    environment:      global:        # Don't build with openmp because it isn't supported in appveyor's compilers        USE_OMP: &quot;0&quot;</longdescription>
</pkgmetadata>