<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>flask-saml2===========.. image:: https://travis-ci.com/timheap/flask-saml2.svg?branch=master    :target: https://travis-ci.com/timheap/flask-saml2.. image:: https://badge.fury.io/py/flask-saml2.svg    :target: https://pypi.org/project/flask-saml2/.. image:: https://readthedocs.org/projects/flask-saml2/badge/?version=latest    :target: https://flask-saml2.readthedocs.io/en/latest/This Flask plugin provides functionality for creating both SAML ServiceProviders and Identity Providers. Applications can implement one or both ofthese providers.``flask-saml2`` works with Flask 1.0+ and Python 3.6+.This is a heavily modified fork of `NoodleMarkets/dj-saml-idp`_ which in turnis a fork of `deforestg/dj-saml-idp`_ which in turn is a fork of`novapost/django-saml2-idp`_.Terminology-----------For a full description of how SAML works, please seek guides elsewhere on theinternet. For a quick introduction, and a run through of some of theterminology used in this package, read on.The SAML protocal is a conversation between two parties:**Identity Providers (IdP)** and **Service Providers (SP)**.When an unauthenticated client (usually a browser) accesses a Service Provider,the Service Provider will make an **authentication request (AuthnRequest)**,sign it using its private key, and then forward this request via the client tothe Identity Provider. Once the client logs in at the central IdentityProvider, the Identity Provider makes a response, signs it, and forwards thisresponse via the client to the requesting Service Provider. The client is thenauthenticated on the Service Provider via the central Identity Provider,without the Service Provider having to know anything about the authenticationmethod, or any passwords involved.Example implementations-----------------------A minimal but functional example implementation of both a Service Provider andan Identity Provider can be found in the ``examples/`` directory of thisrepository. To get the examples running, first clone the repository and installthe dependencies:.. code-block:: console    $ git clone https://github.com/timheap/flask-saml2    $ cd flask-saml2    $ python3 -m venv venv    $ source venv/bin/activate    $ pip install -e .    $ pip install -r tests/requirements.txtNext, run the IdP and the SP in separate terminal windows:.. code-block:: console    $ cd flask-saml2    $ source venv/bin/activate    $ ./examples/idp.py.. code-block:: console    $ cd flask-saml2    $ source venv/bin/activate    $ ./examples/sp.pyFinally, navigate to http://localhost:9000/ to access the Service Providerlanding page.Testing-------The test runner is `pytest` and we are using `tox` to run tests againstdifferent versions of Flask and Python. The test can be run locally using`tox` directly (preferably in a virtual environment)::    $ pip install tox    $ toxLicense-------Distributed under the `MIT License`_... _`NoodleMarkets/dj-saml-idp`: https://github.com/NoodleMarkets/dj-saml-idp.. _`deforestg/dj-saml-idp`: https://github.com/deforestg/dj-saml-idp.. _`novapost/django-saml2-idp`: https://github.com/novapost/django-saml2-idp.. _`MIT License`: https://github.com/mobify/dj-saml-idp/blob/master/LICENSE</longdescription>
</pkgmetadata>