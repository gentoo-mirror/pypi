<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># apischemaJSON (de)serialization, GraphQL and JSON schema generation using Python typing.*apischema* makes your life easier when dealing with API data.## Documentation[https://wyfo.github.io/apischema/](https://wyfo.github.io/apischema/)## Install```shellpip install apischema```It requires only Python 3.7+. *PyPy3* is also fully supported.## Why another library?(If you wonder how this differs from the *pydantic* library, see the [dedicated section of the documentation](https://wyfo.github.io/apischema/0.18/difference_with_pydantic) — there are many differences.)This library fulfills the following goals:- stay as close as possible to the standard library (dataclasses, typing, etc.) — as a consequence we do not need plugins for editors/linters/etc.;- avoid object-oriented limitations — do not require a base class — thus handle easily every type (`Foo`, `list[Bar]`, `NewType(Id, int)`, etc.) the same way.- be adaptable, provide tools to support any types (ORM, etc.);- avoid dynamic things like using raw strings for attributes name - play nicely with your IDE.No known alternative achieves all of this, and apischema is also [(a lot) faster](https://wyfo.github.io/apischema/0.18/optimizations_and_benchmark#benchmark) than all of them.On top of that, because APIs are not only JSON, *apischema* is also a complete GraphQL library&gt; Actually, *apischema* is even adaptable enough to enable support of competitor libraries in a few dozens of line of code ([pydantic support example](https://wyfo.github.io/apischema/0.18/examples/pydantic_support) using [conversions feature](https://wyfo.github.io/apischema/0.18/conversions))## Example```pythonfrom collections.abc import Collectionfrom dataclasses import dataclass, fieldfrom uuid import UUID, uuid4import pytestfrom graphql import print_schemafrom apischema import ValidationError, deserialize, serializefrom apischema.graphql import graphql_schemafrom apischema.json_schema import deserialization_schema# Define a schema with standard dataclasses@dataclassclass Resource:    id: UUID    name: str    tags: set[str] = field(default_factory=set)# Get some datauuid = uuid4()data = {&quot;id&quot;: str(uuid), &quot;name&quot;: &quot;wyfo&quot;, &quot;tags&quot;: [&quot;some_tag&quot;]}# Deserialize dataresource = deserialize(Resource, data)assert resource == Resource(uuid, &quot;wyfo&quot;, {&quot;some_tag&quot;})# Serialize objectsassert serialize(Resource, resource) == data# Validate during deserializationwith pytest.raises(ValidationError) as err:  # pytest checks exception is raised    deserialize(Resource, {&quot;id&quot;: &quot;42&quot;, &quot;name&quot;: &quot;wyfo&quot;})assert err.value.errors == [    {&quot;loc&quot;: [&quot;id&quot;], &quot;err&quot;: &quot;badly formed hexadecimal UUID string&quot;}]# Generate JSON Schemaassert deserialization_schema(Resource) == {    &quot;$schema&quot;: &quot;http://json-schema.org/draft/2020-12/schema#&quot;,    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;id&quot;: {&quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;uuid&quot;},        &quot;name&quot;: {&quot;type&quot;: &quot;string&quot;},        &quot;tags&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;items&quot;: {&quot;type&quot;: &quot;string&quot;},            &quot;uniqueItems&quot;: True,            &quot;default&quot;: [],        },    },    &quot;required&quot;: [&quot;id&quot;, &quot;name&quot;],    &quot;additionalProperties&quot;: False,}# Define GraphQL operationsdef resources(tags: Collection[str] | None = None) -&gt; Collection[Resource] | None:    ...# Generate GraphQL schemaschema = graphql_schema(query=[resources], id_types={UUID})schema_str = &quot;&quot;&quot;\type Query {  resources(tags: [String!]): [Resource!]}type Resource {  id: ID!  name: String!  tags: [String!]!}&quot;&quot;&quot;assert print_schema(schema) == schema_str```*apischema* works out of the box with your data model.&gt; This example and further ones are using *pytest* API because they are in fact run as tests in the library CI### Run the documentation examplesAll documentation examples are written using the last Python minor version — currently 3.10 — in order to provide up-to-date documentation. Because Python 3.10 specificities (like [PEP 585](https://www.python.org/dev/peps/pep-0604/)) are used, this version is &quot;mandatory&quot; to execute the examples as-is.In addition to *pytest*, some examples use third-party libraries like *SQLAlchemy* or *attrs*. All of this dependencies can be downloaded using the `examples` extra with```shellpip install apischema[examples]```Once dependencies are installed, you can simply copy-paste examples and execute them, using the proper Python version. </longdescription>
</pkgmetadata>