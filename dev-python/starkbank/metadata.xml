<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Stark Bank Python SDKWelcome to the Stark Bank Python SDK! This tool is made for Python developers who want to easily integrate with our API.This SDK version is compatible with the Stark Bank API v2.If you have no idea what Stark Bank is, check out our [website](https://www.starkbank.com/) and discover a world where receiving or making payments is as easy as sending a text message to your client!# Introduction## Index- [Introduction](#introduction)    - [Supported Python versions](#supported-python-versions)    - [API documentation](#stark-bank-api-documentation)    - [Versioning](#versioning)- [Setup](#setup)    - [Install our SDK](#1-install-our-sdk)    - [Create your Private and Public Keys](#2-create-your-private-and-public-keys)    - [Register your user credentials](#3-register-your-user-credentials)    - [Setting up the user](#4-setting-up-the-user)    - [Setting up the error language](#5-setting-up-the-error-language)- [Resource listing and manual pagination](#resource-listing-and-manual-pagination)- [Testing in Sandbox](#testing-in-sandbox) - [Usage](#usage)    - [Transactions](#create-transactions): Account statement entries    - [Balance](#get-balance): Account balance    - [Transfers](#create-transfers): Wire transfers (TED and manual Pix)    - [DictKeys](#get-dict-key): Pix Key queries to use with Transfers    - [Institutions](#query-bacen-institutions): Institutions recognized by the Central Bank    - [Invoices](#create-invoices): Reconciled receivables (dynamic Pix QR Codes)    - [DynamicBrcode](#create-dynamicbrcodes): Simplified reconciled receivables (dynamic Pix QR Codes)    - [Deposits](#query-deposits): Other cash-ins (static Pix QR Codes, DynamicBrcodes, manual Pix, etc)    - [Boletos](#create-boletos): Boleto receivables    - [BoletoHolmes](#investigate-a-boleto): Boleto receivables investigator    - [BrcodePayments](#pay-a-br-code): Pay Pix QR Codes    - [BoletoPayments](#pay-a-boleto): Pay Boletos    - [UtilityPayments](#create-utility-payments): Pay Utility bills (water, light, etc.)    - [TaxPayments](#create-tax-payment): Pay taxes    - [DarfPayments](#create-darf-payment): Pay DARFs    - [PaymentPreviews](#preview-payment-information-before-executing-the-payment): Preview all sorts of payments    - [PaymentRequest](#create-payment-requests-to-be-approved-by-authorized-people-in-a-cost-center): Request a payment approval to a cost center    - [CorporateHolders](#create-corporateholders): Manage cardholders    - [CorporateCards](#create-corporatecards): Create virtual and/or physical cards    - [CorporateInvoices](#create-corporateinvoices): Add money to your corporate balance    - [CorporateWithdrawals](#create-corporatewithdrawals): Send money back to your Workspace from your corporate balance    - [CorporateBalance](#get-your-corporatebalance): View your corporate balance    - [CorporateTransactions](#query-corporatetransactions): View the transactions that have affected your corporate balance    - [CorporateEnums](#corporate-enums): Query enums related to the corporate purchases, such as merchant categories, countries and card purchase methods    - [Webhooks](#create-a-webhook-subscription): Configure your webhook endpoints and subscriptions    - [WebhookEvents](#process-webhook-events): Manage webhook events    - [WebhookEventAttempts](#query-failed-webhook-event-delivery-attempts-information): Query failed webhook event deliveries    - [Workspaces](#create-a-new-workspace): Manage your accounts- [Handling errors](#handling-errors)- [Help and Feedback](#help-and-feedback)## Supported Python VersionsThis library supports the following Python versions:* Python 2.7* Python 3.4+## Stark Bank API documentationFeel free to take a look at our [API docs](https://www.starkbank.com/docs/api).## VersioningThis project adheres to the following versioning pattern:Given a version number MAJOR.MINOR.PATCH, increment:- MAJOR version when the **API** version is incremented. This may include backwards incompatible changes;- MINOR version when **breaking changes** are introduced OR **new functionalities** are added in a backwards compatible manner;- PATCH version when backwards compatible bug **fixes** are implemented.# Setup## 1. Install our SDK1.1 To install the package with pip, run:```shpip install starkbank```1.2 To install from source, clone the repo and run:```shpython setup.py install```## 2. Create your Private and Public KeysWe use ECDSA. That means you need to generate a secp256k1 privatekey to sign your requests to our API, and register your public keywith us so we can validate those requests.You can use one of following methods:2.1. Check out the options in our [tutorial](https://starkbank.com/faq/how-to-create-ecdsa-keys).2.2. Use our SDK:```pythonimport starkbankprivateKey, publicKey = starkbank.key.create()# or, to also save .pem files in a specific pathprivateKey, publicKey = starkbank.key.create(&quot;file/keys/&quot;)```**NOTE**: When you are creating new credentials, it is recommended that you create thekeys inside the infrastructure that will use it, in order to avoid risky internettransmissions of your **private-key**. Then you can export the **public-key** alone to thecomputer where it will be used in the new Project creation.## 3. Register your user credentialsYou can interact directly with our API using two types of users: Projects and Organizations.- **Projects** are workspace-specific users, that is, they are bound to the workspaces they are created in.One workspace can have multiple Projects.- **Organizations** are general users that control your entire organization.They can control all your Workspaces and even create new ones. The Organization is bound to your company's tax ID only.Since this user is unique in your entire organization, only one credential can be linked to it.3.1. To create a Project in Sandbox:3.1.1. Log into [Starkbank Sandbox](https://web.sandbox.starkbank.com)3.1.2. Go to Menu &gt; Integrations3.1.3. Click on the &quot;New Project&quot; button3.1.4. Create a Project: Give it a name and upload the public key you created in section 23.1.5. After creating the Project, get its Project ID3.1.6. Use the Project ID and private key to create the object below:```pythonimport starkbank# Get your private key from an environment variable or an encrypted database.# This is only an example of a private key content. You should use your own key.private_key_content = &quot;&quot;&quot;-----BEGIN EC PARAMETERS-----BgUrgQQACg==-----END EC PARAMETERS----------BEGIN EC PRIVATE KEY-----MHQCAQEEIMCwW74H6egQkTiz87WDvLNm7fK/cA+ctA2vg/bbHx3woAcGBSuBBAAKoUQDQgAE0iaeEHEgr3oTbCfh8U2L+r7zoaeOX964xaAnND5jATGpD/tHec6Oe9U1IF16ZoTVt1FzZ8WkYQ3XomRD4HS13A==-----END EC PRIVATE KEY-----&quot;&quot;&quot;project = starkbank.Project(    environment=&quot;sandbox&quot;,    id=&quot;5656565656565656&quot;,    private_key=private_key_content)```3.2. To create Organization credentials in Sandbox:3.2.1. Log into [Starkbank Sandbox](https://web.sandbox.starkbank.com)3.2.2. Go to Menu &gt; Integrations3.2.3. Click on the &quot;Organization public key&quot; button3.2.4. Upload the public key you created in section 2 (only a legal representative of the organization can upload the public key)3.2.5. Click on your profile picture and then on the &quot;Organization&quot; menu to get the Organization ID3.2.6. Use the Organization ID and private key to create the object below:```pythonimport starkbank# Get your private key from an environment variable or an encrypted database.# This is only an example of a private key content. You should use your own key.private_key_content = &quot;&quot;&quot;-----BEGIN EC PARAMETERS-----BgUrgQQACg==-----END EC PARAMETERS----------BEGIN EC PRIVATE KEY-----MHQCAQEEIMCwW74H6egQkTiz87WDvLNm7fK/cA+ctA2vg/bbHx3woAcGBSuBBAAKoUQDQgAE0iaeEHEgr3oTbCfh8U2L+r7zoaeOX964xaAnND5jATGpD/tHec6Oe9U1IF16ZoTVt1FzZ8WkYQ3XomRD4HS13A==-----END EC PRIVATE KEY-----&quot;&quot;&quot;organization = starkbank.Organization(    environment=&quot;sandbox&quot;,    id=&quot;5656565656565656&quot;,    private_key=private_key_content,    workspace_id=None,  # You only need to set the workspace_id when you are operating a specific workspace_id)# To dynamically use your organization credentials in a specific workspace_id,# you can use the Organization.replace() function:starkbank.balance.get(user=starkbank.Organization.replace(organization, &quot;4848484848484848&quot;))```NOTE 1: Never hard-code your private key. Get it from an environment variable or an encrypted database.NOTE 2: We support `'sandbox'` and `'production'` as environments.NOTE 3: The credentials you registered in `sandbox` do not exist in `production` and vice versa.## 4. Setting up the userThere are three kinds of users that can access our API: **Organization**, **Project** and **Member**.- `Project` and `Organization` are designed for integrations and are the ones meant for our SDKs.- `Member` is the one you use when you log into our webpage with your e-mail.There are two ways to inform the user to the SDK:4.1 Passing the user as argument in all functions:```pythonimport starkbankbalance = starkbank.balance.get(user=project)  # or organization```4.2 Set it as a default user in the SDK:```pythonimport starkbankstarkbank.user = project  # or organizationbalance = starkbank.balance.get()```Just select the way of passing the user that is more convenient to you.On all following examples we will assume a default user has been set.## 5. Setting up the error languageThe error language can also be set in the same way as the default user:```pythonimport starkbankstarkbank.language = &quot;en-US&quot;```Language options are &quot;en-US&quot; for english and &quot;pt-BR&quot; for brazilian portuguese. English is default.# Resource listing and manual paginationAlmost all SDK resources provide a `query` and a `page` function.- The `query` function provides a straight forward way to efficiently iterate through all results that match the filters you inform,seamlessly retrieving the next batch of elements from the API only when you reach the end of the current batch.If you are not worried about data volume or processing time, this is the way to go.```pythonimport starkbankfor transaction in starkbank.transaction.query(limit=200):    print(transaction)```- The `page` function gives you full control over the API pagination. With each function call, you receive up to100 results and the cursor to retrieve the next batch of elements. This allows you to stop your queries andpick up from where you left off whenever it is convenient. When there are no more elements to be retrieved, the returned cursor will be `None`.```pythonimport starkbankcursor = Nonewhile True:    transactions, cursor = starkbank.transaction.page(limit=50, cursor=cursor)    for transaction in transactions:        print(transaction)    if cursor is None:        break```To simplify the following SDK examples, we will only use the `query` function, but feel free to use `page` instead.# Testing in SandboxYour initial balance is zero. For many operations in Stark Bank, you'll need fundsin your account, which can be added to your balance by creating an Invoice or a Boleto. In the Sandbox environment, most of the created Invoices and Boletos will be automatically paid,so there's nothing else you need to do to add funds to your account. Just createa few Invoices and wait around a bit.In Production, you (or one of your clients) will need to actually pay this Invoice or Boletofor the value to be credited to your account.# UsageHere are a few examples on how to use the SDK. If you have any doubts, use the built-in`help()` function to get more info on the desired functionality(for example: `help(starkbank.boleto.create)`)## Create transactionsTo send money between Stark Bank accounts, you can create transactions:```pythonimport starkbanktransactions = starkbank.transaction.create([    starkbank.Transaction(        amount=100,  # (R$ 1.00)        receiver_id=&quot;1029378109327810&quot;,        description=&quot;Transaction to dear provider&quot;,        external_id=&quot;12345&quot;,  # so we can block anything you send twice by mistake        tags=[&quot;provider&quot;]    ),    starkbank.Transaction(        amount=234,  # (R$ 2.34)        receiver_id=&quot;2093029347820947&quot;,        description=&quot;Transaction to the other provider&quot;,        external_id=&quot;12346&quot;,  # so we can block anything you send twice by mistake        tags=[&quot;provider&quot;]    ),])for transaction in transactions:    print(transaction)```**Note**: Instead of using Transaction objects, you can also pass each transaction element in dictionary format## Query transactionsTo understand your balance changes (bank statement), you can querytransactions. Note that our system creates transactions for you whenyou receive boleto payments, pay a bill or make transfers, for example.```pythonimport starkbanktransactions = starkbank.transaction.query(    after=&quot;2020-01-01&quot;,    before=&quot;2020-03-01&quot;)for transaction in transactions:    print(transaction)```## Get a transactionYou can get a specific transaction by its id:```pythonimport starkbanktransaction = starkbank.transaction.get(&quot;5155165527080960&quot;)print(transaction)```## Get balanceTo know how much money you have in your workspace, run:```pythonimport starkbankbalance = starkbank.balance.get()print(balance)```## Create transfersYou can also create transfers in the SDK (TED/Pix) and configure transfer behavior according to its rules.```pythonimport starkbankfrom datetime import datetime, timedeltatransfers = starkbank.transfer.create([    starkbank.Transfer(        amount=100,        bank_code=&quot;033&quot;,  # TED        branch_code=&quot;0001&quot;,        account_number=&quot;10000-0&quot;,        account_type=&quot;salary&quot;,        tax_id=&quot;012.345.678-90&quot;,        name=&quot;Tony Stark&quot;,        tags=[&quot;iron&quot;, &quot;suit&quot;]    ),    starkbank.Transfer(        amount=200,        bank_code=&quot;20018183&quot;,  # Pix        branch_code=&quot;1234&quot;,        account_number=&quot;123456-7&quot;,        account_type=&quot;salary&quot;,        external_id=&quot;my-internal-id-12345&quot;,        tax_id=&quot;012.345.678-90&quot;,        name=&quot;Jon Snow&quot;,        scheduled=datetime.utcnow() + timedelta(days=3),        rules=[            starkbank.transfer.Rule(              key=&quot;resendingLimit&quot;,  # Set maximum number of retries if Transfer fails due to systemic issues at the receiver bank              value=5                # Our resending limit is 10 by default            )         ]     )])for transfer in transfers:    print(transfer)```**Note**: Instead of using Transfer objects, you can also pass each transfer element in dictionary format## Query transfersYou can query multiple transfers according to filters.```pythonimport starkbankfrom datetime import datetimetransfers = starkbank.transfer.query(    after=datetime(2020, 1, 1),    before=datetime(2020, 4, 1))for transfer in transfers:    print(transfer.name)```## Cancel a scheduled transferTo cancel a single scheduled transfer by its id, run:```pythonimport starkbanktransfer = starkbank.transfer.delete(&quot;5155165527080960&quot;)print(transfer)```## Get a transferTo get a single transfer by its id, run:```pythonimport starkbanktransfer = starkbank.transfer.get(&quot;5155165527080960&quot;)print(transfer)```## Get a transfer PDFA transfer PDF may also be retrieved by its id.This operation is only valid if the transfer status is &quot;processing&quot; or &quot;success&quot;. ```pythonimport starkbankpdf = starkbank.transfer.pdf(&quot;5155165527080960&quot;)with open(&quot;transfer.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Query transfer logsYou can query transfer logs to better understand transfer life cycles.```pythonimport starkbanklogs = starkbank.transfer.log.query(limit=50)for log in logs:    print(log.id)```## Get a transfer logYou can also get a specific log by its id.```pythonimport starkbanklog = starkbank.transfer.log.get(&quot;5155165527080960&quot;)print(log)```## Get DICT keyYou can get the Pix key's parameters by its id.```pythonimport starkbankdict_key = starkbank.dictkey.get(&quot;tony@starkbank.com&quot;)print(dict_key)```## Query your DICT keysTo take a look at the Pix keys linked to your workspace, just run the following:```pythonimport starkbankdict_keys = starkbank.dictkey.query(status=&quot;registered&quot;)for dict_key in dict_keys:    print(dict_key)```## Query Bacen institutionsYou can query institutions registered by the Brazilian Central Bank for Pix and TED transactions.```pythonimport starkbankinstitutions = starkbank.institution.query(search=&quot;stark&quot;)for institution in institutions:    print(institution)```## Create invoicesYou can create dynamic QR Code invoices to charge customers or to receive money from accounts you have in other banks. Since the banking system only understands value modifiers (discounts, fines and interest) when dealing with **dates** (instead of **datetimes**), these values will only show up in the end user banking interface if you use **dates** in the &quot;due&quot; and &quot;discounts&quot; fields. If you use **datetimes** instead, our system will apply the value modifiers in the same manner, but the end user will only see the final value to be paid on his interface.Also, other banks will most likely only allow payment scheduling on invoices defined with **dates** instead of **datetimes**.```python# coding: utf-8import starkbankfrom datetime import date, datetime, timedeltainvoices = starkbank.invoice.create([    starkbank.Invoice(        amount=23571,  # R$ 235,71         name=&quot;Buzz Aldrin&quot;,        tax_id=&quot;012.345.678-90&quot;,         due=datetime.utcnow() + timedelta(hours=1),        expiration=timedelta(hours=3).total_seconds(),        fine=5,  # 5%        interest=2.5,  # 2.5% per month        tags=[&quot;immediate&quot;],        rules=[            starkbank.transfer.Rule(                key=&quot;allowedTaxIds&quot;,        # Set TaxIds allowed to receive this Invoice                value=[ &quot;012.345.678-90&quot; ]            )         ]     ),    starkbank.Invoice(        amount=23571,  # R$ 235,71         name=&quot;Buzz Aldrin&quot;,        tax_id=&quot;012.345.678-90&quot;,         due=date(2022, 3, 20),        expiration=timedelta(hours=3).total_seconds(),        fine=5,  # 5%        interest=2.5,  # 2.5% per month        tags=[&quot;scheduled&quot;]    )])for invoice in invoices:    print(invoice)```**Note**: Instead of using Invoice objects, you can also pass each invoice element in dictionary format## Get an invoiceAfter its creation, information on an invoice may be retrieved by its id. Its status indicates whether it's been paid.```pythonimport starkbankinvoice = starkbank.invoice.get(&quot;5155165527080960&quot;)print(invoice)```## Get an invoice PDFAfter its creation, an invoice PDF may be retrieved by its id. ```pythonimport starkbankpdf = starkbank.invoice.pdf(&quot;5155165527080960&quot;, layout=&quot;default&quot;)with open(&quot;invoice.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Get an invoice QR Code After its creation, an Invoice QR Code may be retrieved by its id. ```pythonimport starkbankqrcode = starkbank.invoice.qrcode(&quot;5881614903017472&quot;, size= 15)with open(&quot;qrcode.png&quot;, &quot;wb&quot;) as file:    file.write(qrcode)```Be careful not to accidentally enforce any encoding on the raw png content,as it may corrupt the file.## Cancel an invoiceYou can also cancel an invoice by its id.Note that this is not possible if it has been paid already.```pythonimport starkbankinvoice = starkbank.invoice.update(&quot;5155165527080960&quot;, status=&quot;canceled&quot;)print(invoice)```## Update an invoiceYou can update an invoice's amount, due date and expiration by its id.If the invoice has already been paid, only the amount can bedecreased, which will result in a payment reversal. To fully reverse the invoice, pass amount = 0.```pythonimport starkbankfrom datetime import datetime, timedeltainvoice = starkbank.invoice.update(    &quot;5155165527080960&quot;,    amount=100,    expiration=0,    due=datetime.utcnow() + timedelta(hours=1),)print(invoice)```## Query invoicesYou can get a list of created invoices given some filters.```pythonimport starkbankfrom datetime import datetimeinvoices = starkbank.invoice.query(    after=datetime(2020, 1, 1),    before=datetime(2020, 3, 1))for invoice in invoices:    print(invoice)```## Query invoice logsLogs are pretty important to understand the life cycle of an invoice.```pythonimport starkbanklogs = starkbank.invoice.log.query(limit=150)for log in logs:    print(log)```## Get an invoice logYou can get a single log by its id.```pythonimport starkbanklog = starkbank.invoice.log.get(&quot;5155165527080960&quot;)print(log)```## Get a reversed invoice log PDFWhenever an Invoice is successfully reversed, a reversed log will be created. To retrieve a specific reversal receipt, you can request the corresponding log PDF:```pythonimport starkbankpdf = starkbank.invoice.log.pdf(&quot;5155165527080960&quot;)with open(&quot;invoice-reversal.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Get an invoice payment informationOnce an invoice has been paid, you can get the payment information using the Invoice.Payment sub-resource:```pythonimport starkbankpaymentInformation = starkbank.invoice.payment(&quot;5155165527080960&quot;)print(paymentInformation)```## Create DynamicBrcodesYou can create simplified dynamic QR Codes to receive money using Pix transactions. When a DynamicBrcode is paid, a Deposit is created with the tags parameter containing the character “dynamic-brcode/” followed by the DynamicBrcode’s uuid &quot;dynamic-brcode/{uuid}&quot; for conciliation.The differences between an Invoice and the DynamicBrcode are the following:|                       | Invoice | DynamicBrcode ||-----------------------|:-------:|:-------------:|| Expiration            |    ✓    |       ✓       | | Can only be paid once |    ✓    |       ✓       || Due, fine and fee     |    ✓    |       X       | | Discount              |    ✓    |       X       | | Description           |    ✓    |       X       || Can be updated        |    ✓    |       X       |**Note:** In order to check if a BR code has expired, you must first calculate its expiration date (add the expiration to the creation date). **Note:** To know if the BR code has been paid, you need to query your Deposits by the tag &quot;dynamic-brcode/{uuid}&quot; to check if it has been paid.```python# coding: utf-8import starkbankfrom datetime import timedeltabrcodes = starkbank.dynamicbrcode.create([    starkbank.DynamicBrcode(      amount=23571,  # R$ 235,71       expiration=timedelta(hours=3).total_seconds()    ),    starkbank.DynamicBrcode(      amount=23571,  # R$ 235,71       expiration=timedelta(hours=3).total_seconds()    )])for brcode in brcodes:    print(brcode)```**Note**: Instead of using DynamicBrcode objects, you can also pass each brcode element in dictionary format## Get a DynamicBrcodeAfter its creation, information on a DynamicBrcode may be retrieved by its uuid.```pythonimport starkbankbrcode = starkbank.dynamicbrcode.get(&quot;bb9cd43ea6f4403391bf7ef6aa876600&quot;)print(brcode)```## Query DynamicBrcodesYou can get a list of created DynamicBrcodes given some filters.```pythonimport starkbankfrom datetime import datetimebrcodes = starkbank.dynamicbrcode.query(    after=datetime(2023, 1, 1),    before=datetime(2023, 3, 1))for brcode in brcodes:    print(brcode)```## Query depositsYou can get a list of created deposits given some filters.```pythonimport starkbankfrom datetime import datetimedeposits = starkbank.deposit.query(    after=datetime(2020, 1, 1),    before=datetime(2020, 3, 1))for deposit in deposits:    print(deposit)```## Get a depositAfter its creation, information on a deposit may be retrieved by its id. ```pythonimport starkbankdeposit = starkbank.deposit.get(&quot;5155165527080960&quot;)print(deposit)```## Query deposit logsLogs are pretty important to understand the life cycle of a deposit.```pythonimport starkbanklogs = starkbank.deposit.log.query(limit=150)for log in logs:    print(log)```## Get a deposit logYou can get a single log by its id.```pythonimport starkbanklog = starkbank.deposit.log.get(&quot;5155165527080960&quot;)print(log)```## Create boletosYou can create boletos to charge customers or to receive money from accountsyou have in other banks.```python# coding: utf-8import starkbankfrom datetime import datetimeboletos = starkbank.boleto.create([    starkbank.Boleto(        amount=23571,  # R$ 235,71         name=&quot;Buzz Aldrin&quot;,        tax_id=&quot;012.345.678-90&quot;,         street_line_1=&quot;Av. Paulista, 200&quot;,         street_line_2=&quot;10 andar&quot;,        district=&quot;Bela Vista&quot;,         city=&quot;São Paulo&quot;,        state_code=&quot;SP&quot;,        zip_code=&quot;01310-000&quot;,        due=datetime(2020, 3, 20),        fine=5,  # 5%        interest=2.5,  # 2.5% per month    ),])for boleto in boletos:    print(boleto)```**Note**: Instead of using Boleto objects, you can also pass each boleto element in dictionary format## Get a boletoAfter its creation, information on a boleto may be retrieved by its id. Its status indicates whether it's been paid.```pythonimport starkbankboleto = starkbank.boleto.get(&quot;5155165527080960&quot;)print(boleto)```## Get a boleto PDFAfter its creation, a boleto PDF may be retrieved by its id. ```pythonimport starkbankpdf = starkbank.boleto.pdf(&quot;5155165527080960&quot;, layout=&quot;default&quot;)with open(&quot;boleto.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Delete a boletoYou can also cancel a boleto by its id.Note that this is not possible if it has been processed already.```pythonimport starkbankboleto = starkbank.boleto.delete(&quot;5155165527080960&quot;)print(boleto)```## Query boletosYou can get a list of created boletos given some filters.```pythonimport starkbankfrom datetime import datetimeboletos = starkbank.boleto.query(    after=datetime(2020, 1, 1),    before=datetime(2020, 3, 1))for boleto in boletos:    print(boleto)```## Query boleto logsLogs are pretty important to understand the life cycle of a boleto.```pythonimport starkbanklogs = starkbank.boleto.log.query(limit=150)for log in logs:    print(log)```## Get a boleto logYou can get a single log by its id.```pythonimport starkbanklog = starkbank.boleto.log.get(&quot;5155165527080960&quot;)print(log)```## Investigate a boletoYou can discover if a StarkBank boleto has been recently paid before we receive the response on the next day.This can be done by creating a BoletoHolmes object, which fetches the updated status of the correspondingBoleto object according to CIP to check, for example, whether it is still payable or not. The investigationhappens asynchronously and the most common way to retrieve the results is to register a &quot;boleto-holmes&quot; webhooksubscription, although polling is also possible. ```pythonimport starkbankholmes = starkbank.boletoholmes.create([    starkbank.BoletoHolmes(        boleto_id=&quot;5656565656565656&quot;,    ),    starkbank.BoletoHolmes(        boleto_id=&quot;4848484848484848&quot;,    ),])for sherlock in holmes:    print(sherlock)```**Note**: Instead of using BoletoHolmes objects, you can also pass each payment element in dictionary format## Get a boleto holmesTo get a single Holmes by its id, run:```pythonimport starkbanksherlock = starkbank.boletoholmes.get(&quot;19278361897236187236&quot;)print(sherlock)```## Query boleto holmesYou can search for boleto Holmes using filters. ```pythonimport starkbankholmes = starkbank.boletoholmes.query(    tags=[&quot;customer_1&quot;, &quot;customer_2&quot;])for sherlock in holmes:    print(sherlock)```## Query boleto holmes logsSearches are also possible with boleto holmes logs:```pythonimport starkbanklogs = starkbank.boletoholmes.log.query(    holmes_ids=[&quot;5155165527080960&quot;, &quot;76551659167801921&quot;],)for log in logs:    print(log)```## Get a boleto holmes logYou can also get a boleto holmes log by specifying its id.```pythonimport starkbanklog = starkbank.boletoholmes.log.get(&quot;5155165527080960&quot;)print(log)```## Pay a BR CodePaying a BR Code is also simple. After extracting the BR Code encoded in the Pix QR Code, you can do the following:```pythonimport starkbankpayments = starkbank.brcodepayment.create([    starkbank.BrcodePayment(        brcode=&quot;00020126580014br.gov.bcb.pix0136a629532e-7693-4846-852d-1bbff817b5a8520400005303986540510.005802BR5908T'Challa6009Sao Paulo62090505123456304B14A&quot;,        tax_id=&quot;012.345.678-90&quot;,        scheduled=&quot;2020-03-13&quot;,        description=&quot;this will be fast&quot;,        tags=[&quot;pix&quot;, &quot;qrcode&quot;],        rules=[            starkbank.brcodepayment.Rule(              key=&quot;resendingLimit&quot;,  # Set maximum number of retries if Payment fails due to systemic issues at the receiver bank              value=5                # Our resending limit is 10 by default            )         ]    )])for payment in payments:    print(payment)```**Note**: You can also configure payment behavior according to its rules**Note**: Instead of using BrcodePayment objects, you can also pass each payment element in dictionary format## Get a BR Code paymentTo get a single BR Code payment by its id, run:```pythonimport starkbankpayment = starkbank.brcodepayment.get(&quot;19278361897236187236&quot;)print(payment)```## Get a BR Code payment PDFAfter its creation, a BR Code payment PDF may be retrieved by its id. ```pythonimport starkbankpdf = starkbank.brcodepayment.pdf(&quot;5155165527080960&quot;)with open(&quot;brcode-payment.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Cancel a BR Code paymentYou can cancel a BR Code payment by changing its status to &quot;canceled&quot;.Note that this is not possible if it has been processed already.```pythonimport starkbankfrom datetime import datetime, timedeltapayment = starkbank.brcodepayment.update(    &quot;5155165527080960&quot;,    status=&quot;canceled&quot;)print(payment)```## Query BR Code paymentsYou can search for brcode payments using filters. ```pythonimport starkbankpayments = starkbank.brcodepayment.query(    tags=[&quot;company_1&quot;, &quot;company_2&quot;])for payment in payments:    print(payment)```## Query BR Code payment logsSearches are also possible with BR Code payment logs:```pythonimport starkbanklogs = starkbank.brcodepayment.log.query(    payment_ids=[&quot;5155165527080960&quot;, &quot;76551659167801921&quot;],)for log in logs:    print(log)```## Get a BR Code payment logYou can also get a BR Code payment log by specifying its id.```pythonimport starkbanklog = starkbank.brcodepayment.log.get(&quot;5155165527080960&quot;)print(log)```## Pay a boletoPaying a boleto is also simple.```pythonimport starkbankpayments = starkbank.boletopayment.create([    starkbank.BoletoPayment(        line=&quot;34191.09008 61207.727308 71444.640008 5 81310001234321&quot;,        tax_id=&quot;012.345.678-90&quot;,        scheduled=&quot;2020-03-13&quot;,        description=&quot;take my money&quot;,        tags=[&quot;take&quot;, &quot;my&quot;, &quot;money&quot;],    ),    starkbank.BoletoPayment(        bar_code=&quot;34197819200000000011090063609567307144464000&quot;,        tax_id=&quot;012.345.678-90&quot;,        scheduled=&quot;2020-03-14&quot;,        description=&quot;take my money one more time&quot;,        tags=[&quot;again&quot;],    ),])for payment in payments:    print(payment)```**Note**: Instead of using BoletoPayment objects, you can also pass each payment element in dictionary format## Get a boleto paymentTo get a single boleto payment by its id, run:```pythonimport starkbankpayment = starkbank.boletopayment.get(&quot;19278361897236187236&quot;)print(payment)```## Get a boleto payment PDFAfter its creation, a boleto payment PDF may be retrieved by its id. ```pythonimport starkbankpdf = starkbank.boletopayment.pdf(&quot;5155165527080960&quot;)with open(&quot;boleto-payment.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Delete a boleto paymentYou can also cancel a boleto payment by its id.Note that this is not possible if it has been processed already.```pythonimport starkbankpayment = starkbank.boletopayment.delete(&quot;5155165527080960&quot;)print(payment)```## Query boleto paymentsYou can search for boleto payments using filters. ```pythonimport starkbankpayments = starkbank.boletopayment.query(    tags=[&quot;company_1&quot;, &quot;company_2&quot;])for payment in payments:    print(payment)```## Query boleto payment logsSearches are also possible with boleto payment logs:```pythonimport starkbanklogs = starkbank.boletopayment.log.query(    payment_ids=[&quot;5155165527080960&quot;, &quot;76551659167801921&quot;],)for log in logs:    print(log)```## Get a boleto payment logYou can also get a boleto payment log by specifying its id.```pythonimport starkbanklog = starkbank.boletopayment.log.get(&quot;5155165527080960&quot;)print(log)```## Create utility paymentsIts also simple to pay utility bills (such as electricity and water bills) in the SDK.```pythonimport starkbankpayments = starkbank.utilitypayment.create([    starkbank.UtilityPayment(        line=&quot;34197819200000000011090063609567307144464000&quot;,        scheduled=&quot;2020-03-13&quot;,        description=&quot;take my money&quot;,        tags=[&quot;take&quot;, &quot;my&quot;, &quot;money&quot;],    ),    starkbank.UtilityPayment(        bar_code=&quot;34191.09008 61207.727308 71444.640008 5 81310001234321&quot;,        scheduled=&quot;2020-03-14&quot;,        description=&quot;take my money one more time&quot;,        tags=[&quot;again&quot;],    ),])for payment in payments:    print(payment)```**Note**: Instead of using UtilityPayment objects, you can also pass each payment element in dictionary format## Query utility paymentsTo search for utility payments using filters, run:```pythonimport starkbankpayments = starkbank.utilitypayment.query(    tags=[&quot;electricity&quot;, &quot;gas&quot;])for payment in payments:    print(payment)```## Get a utility paymentYou can get a specific bill by its id:```pythonimport starkbankpayment = starkbank.utilitypayment.get(&quot;5155165527080960&quot;)print(payment)```## Get a utility payment PDFAfter its creation, a utility payment PDF may also be retrieved by its id. ```pythonimport starkbankpdf = starkbank.utilitypayment.pdf(&quot;5155165527080960&quot;)with open(&quot;electricity-payment.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Delete a utility paymentYou can also cancel a utility payment by its id.Note that this is not possible if it has been processed already.```pythonimport starkbankpayment = starkbank.utilitypayment.delete(&quot;5155165527080960&quot;)print(payment)```## Query utility payment logsYou can search for payments by specifying filters. Use this to understand thebills life cycles.```pythonimport starkbanklogs = starkbank.utilitypayment.log.query(    payment_ids=[&quot;102893710982379182&quot;, &quot;92837912873981273&quot;],)for log in logs:    print(log)```## Get a utility payment logIf you want to get a specific payment log by its id, just run:```pythonimport starkbanklog = starkbank.utilitypayment.log.get(&quot;1902837198237992&quot;)print(log)```## Create tax paymentIt is also simple to pay taxes (such as ISS and DAS) using this SDK.```pythonimport starkbankpayments = starkbank.taxpayment.create([    starkbank.TaxPayment(        bar_code=&quot;83660000001084301380074119002551100010601813&quot;,        scheduled=&quot;2020-08-13&quot;,        description=&quot;fix the road&quot;,        tags=[&quot;take&quot;, &quot;my&quot;, &quot;money&quot;],    ),    starkbank.TaxPayment(        line=&quot;85800000003 0 28960328203 1 56072020190 5 22109674804 0&quot;,        scheduled=&quot;2020-08-14&quot;,        description=&quot;build the hospital, hopefully&quot;,        tags=[&quot;expensive&quot;],    ),])for payment in payments:    print(payment)```**Note**: Instead of using TaxPayment objects, you can also pass each payment element in dictionary format## Query tax paymentsTo search for tax payments using filters, run:```pythonimport starkbankpayments = starkbank.taxpayment.query(    tags=[&quot;das&quot;, &quot;july&quot;])for payment in payments:    print(payment)```## Get tax paymentYou can get a specific tax payment by its id:```pythonimport starkbankpayment = starkbank.taxpayment.get(&quot;5155165527080960&quot;)print(payment)```## Get tax payment PDFAfter its creation, a tax payment PDF may also be retrieved by its id. ```pythonimport starkbankpdf = starkbank.taxpayment.pdf(&quot;5155165527080960&quot;)with open(&quot;iss-payment.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Delete tax paymentYou can also cancel a tax payment by its id.Note that this is not possible if it has been processed already.```pythonimport starkbankpayment = starkbank.taxpayment.delete(&quot;5155165527080960&quot;)print(payment)```## Query tax payment logsYou can search for payment logs by specifying filters. Use this to understand each payment life cycle.```pythonimport starkbanklogs = starkbank.taxpayment.log.query(limit=10)for log in logs:    print(log)```## Get tax payment logIf you want to get a specific payment log by its id, just run:```pythonimport starkbanklog = starkbank.taxpayment.log.get(&quot;1902837198237992&quot;)print(log)```**Note**: Some taxes can't be payed with bar codes. Since they have specific parameters, each one of them has its ownresource and routes, which are all analogous to the TaxPayment resource. The ones we currently support are:- DarfPayment, for DARFs## Create DARF paymentIf you want to manually pay DARFs without barcodes, you may create DarfPayments:```pythonimport starkbankfrom datetime import datetime, timedeltapayments = starkbank.darfpayment.create([    starkbank.DarfPayment(        revenue_code=&quot;1240&quot;,        tax_id=&quot;012.345.678-90&quot;,        competence=&quot;2020-09-01&quot;,        reference_number=&quot;2340978970&quot;,        nominal_amount=1234,        fine_amount=12,        interest_amount=34,        due=datetime.now() + timedelta(days=30),        scheduled=datetime.now() + timedelta(days=30),        tags=[&quot;DARF&quot;, &quot;making money&quot;],        description=&quot;take my money&quot;,    )])for payment in payments:    print(payment)```**Note**: Instead of using DarfPayment objects, you can also pass each payment element in dictionary format## Query DARF paymentsTo search for DARF payments using filters, run:```pythonimport starkbankpayments = starkbank.darfpayment.query(    tags=[&quot;darf&quot;, &quot;july&quot;])for payment in payments:    print(payment)```## Get DARF paymentYou can get a specific DARF payment by its id:```pythonimport starkbankpayment = starkbank.darfpayment.get(&quot;5155165527080960&quot;)print(payment)```## Get DARF payment PDFAfter its creation, a DARF payment PDF may also be retrieved by its id. ```pythonimport starkbankpdf = starkbank.darfpayment.pdf(&quot;5155165527080960&quot;)with open(&quot;darf-payment.pdf&quot;, &quot;wb&quot;) as file:    file.write(pdf)```Be careful not to accidentally enforce any encoding on the raw pdf content,as it may yield abnormal results in the final file, such as missing imagesand strange characters.## Delete DARF paymentYou can also cancel a DARF payment by its id.Note that this is not possible if it has been processed already.```pythonimport starkbankpayment = starkbank.darfpayment.delete(&quot;5155165527080960&quot;)print(payment)```## Query DARF payment logsYou can search for payment logs by specifying filters. Use this to understand each payment life cycle.```pythonimport starkbanklogs = starkbank.darfpayment.log.query(limit=10)for log in logs:    print(log)```## Get DARF payment logIf you want to get a specific payment log by its id, just run:```pythonimport starkbanklog = starkbank.darfpayment.log.get(&quot;1902837198237992&quot;)print(log)```## Preview payment information before executing the paymentYou can preview multiple types of payment to confirm any information before actually paying.If the &quot;scheduled&quot; parameter is not informed, today will be assumed as the intended payment date.Right now, the &quot;scheduled&quot; parameter only has effect on BrcodePreviews.This resource is able to preview the following types of payment:&quot;brcode-payment&quot;, &quot;boleto-payment&quot;, &quot;utility-payment&quot; and &quot;tax-payment&quot;```python# coding: utf-8import starkbankfrom datetime import date, timedeltapreviews = starkbank.paymentpreview.create([    starkbank.PaymentPreview(        id=&quot;00020126580014br.gov.bcb.pix0136a629532e-7693-4846-852d-1bbff817b5a8520400005303986540510.005802BR5908T'Challa6009Sao Paulo62090505123456304B14A&quot;,        scheduled=date.today() + timedelta(days=3)    ),    starkbank.PaymentPreview(        id=&quot;34191.09008 61207.727308 71444.640008 5 81310001234321&quot;    ),])for preview in previews:    print(preview)    payment = preview.payment    if preview.type == &quot;brcode-payment&quot;:        print(payment.status)```**Note**: Instead of using PaymentPreview objects, you can also pass each request element in dictionary format## Create payment requests to be approved by authorized people in a cost center You can also request payments that must pass through a specific cost center approval flow to be executed.In certain structures, this allows double checks for cash-outs and also gives time to load your accountwith the required amount before the payments take place.The approvals can be granted at our website and must be performed according to the rulesspecified in the cost center.**Note**: The value of the center_id parameter can be consulted by logging into our website and goingto the desired cost center page.```python# coding: utf-8import starkbankfrom datetime import date, timedeltarequests = starkbank.paymentrequest.create([    starkbank.PaymentRequest(        center_id=&quot;5967314465849344&quot;,        payment=starkbank.Transfer(            amount=200,            bank_code=&quot;341&quot;,            branch_code=&quot;1234&quot;,            account_number=&quot;123456-7&quot;,            tax_id=&quot;012.345.678-90&quot;,            name=&quot;Bucket Head&quot;,            tags=[]        ),        due=&quot;2020-11-01&quot;    ),])for request in requests:    print(request)```**Note**: Instead of using PaymentRequest objects, you can also pass each request element in dictionary format## Query payment requestsTo search for payment requests, run:```pythonimport starkbankrequests = starkbank.paymentrequest.query(center_id=&quot;123456789&quot;, limit=10)for request in requests:    print(request)```## Corporate## Create CorporateHoldersYou can create card holders to which your cards will be bound.They support spending rules that will apply to all underlying cards.```pythonimport starkbankholders = starkbank.corporateholder.create([    starkbank.CorporateHolder(        name=&quot;Iron Bank S.A.&quot;,        tags=[            &quot;Traveler Employee&quot;        ],        rules=[            {                &quot;name&quot;: &quot;General USD&quot;,                &quot;interval&quot;: &quot;day&quot;,                &quot;amount&quot;: 100000,                &quot;currencyCode&quot;: &quot;USD&quot;,                &quot;categories&quot;: [                    starkbank.MerchantCategory(type=&quot;services&quot;),                    starkbank.MerchantCategory(code=&quot;fastFoodRestaurants&quot;)                ],                &quot;countries&quot;: [                    starkbank.MerchantCountry(code=&quot;USA&quot;)                ],                &quot;methods&quot;: [                    starkbank.CardMethod(code=&quot;token&quot;)                ]            }        ]    )])for holder in holders:    print(holder)```**Note**: Instead of using CorporateHolder objects, you can also pass each element in dictionary format## Query CorporateHoldersYou can query multiple holders according to filters.```pythonimport starkbankholders = starkbank.corporateholder.query()for holder in holders:    print(holder)```## Cancel a CorporateHolderTo cancel a single Corporate Holder by its id, run:```pythonimport starkbankholder = starkbank.corporateholder.cancel(&quot;5155165527080960&quot;)print(holder)```## Get a CorporateHolderTo get a single Corporate Holder by its id, run:```pythonimport starkbankholder = starkbank.corporateholder.get(&quot;5155165527080960&quot;)print(holder)```## Query CorporateHolder logsYou can query holder logs to better understand holder life cycles.```pythonimport starkbanklogs = starkbank.corporateholder.log.query(limit=50)for log in logs:    print(log.id)```## Get a CorporateHolder logYou can also get a specific log by its id.```pythonimport starkbanklog = starkbank.corporateholder.log.get(&quot;5155165527080960&quot;)print(log)```## Create CorporateCardYou can issue cards with specific spending rules.```pythonimport starkbankcard = starkbank.corporatecard.create(    starkbank.CorporateCard(        holder_id=&quot;5155165527080960&quot;    ))print(card)```## Query CorporateCardsYou can get a list of created cards given some filters.```pythonimport starkbankfrom datetime import datecards = starkbank.corporatecard.query(    after=date(2020, 1, 1),    before=date(2020, 3, 1))for card in cards:    print(card)```## Get a CorporateCardAfter its creation, information on a card may be retrieved by its id.```pythonimport starkbankcard = starkbank.corporatecard.get(&quot;5155165527080960&quot;)print(card)```## Update a CorporateCardYou can update a specific card by its id.```pythonimport starkbankcard = starkbank.corporatecard.update(&quot;5155165527080960&quot;, status=&quot;blocked&quot;)print(card)```## Cancel a CorporateCardYou can also cancel a card by its id.```pythonimport starkbankcard = starkbank.corporatecard.cancel(&quot;5155165527080960&quot;)print(card)```## Query CorporateCard logsLogs are pretty important to understand the life cycle of a card.```pythonimport starkbanklogs = starkbank.corporatecard.log.query(limit=150)for log in logs:    print(log)```## Get a CorporateCard logYou can get a single log by its id.```pythonimport starkbanklog = starkbank.corporatecard.log.get(&quot;5155165527080960&quot;)print(log)```## Query CorporatePurchasesYou can get a list of created purchases given some filters.```pythonimport starkbankfrom datetime import datepurchases = starkbank.corporatepurchase.query(    after=date(2020, 1, 1),    before=date(2020, 3, 1))for purchase in purchases:    print(purchase)```## Get a CorporatePurchaseAfter its creation, information on a purchase may be retrieved by its id. ```pythonimport starkbankpurchase = starkbank.corporatepurchase.get(&quot;5155165527080960&quot;)print(purchase)```## Query CorporatePurchase logsLogs are pretty important to understand the life cycle of a purchase.```pythonimport starkbanklogs = starkbank.corporatepurchase.log.query(limit=150)for log in logs:    print(log)```## Get a CorporatePurchase logYou can get a single log by its id.```pythonimport starkbanklog = starkbank.corporatepurchase.log.get(&quot;5155165527080960&quot;)print(log)```## Create CorporateInvoicesYou can create Pix invoices to transfer money from accounts you have in any bank to your Corporate balance,allowing you to run your corporate operation.```pythonimport starkbankinvoice = starkbank.corporateinvoice.create(    invoice=starkbank.CorporateInvoice(        amount=1000    ))print(invoice)```**Note**: Instead of using CorporateInvoice objects, you can also pass each element in dictionary format## Query CorporateInvoicesYou can get a list of created invoices given some filters.```pythonimport starkbankfrom datetime import dateinvoices = starkbank.corporateinvoice.query(    after=date(2020, 1, 1),    before=date(2020, 3, 1))for invoice in invoices:    print(invoice)```## Create CorporateWithdrawalsYou can create withdrawals to send cash back from your Corporate balance to your Banking balanceby using the Withdrawal resource.```pythonimport starkbankwithdrawal = starkbank.corporatewithdrawal.create(    withdrawal=starkbank.CorporateWithdrawal(        amount=10000,        external_id=&quot;123&quot;,        description=&quot;Sending back&quot;    ))print(withdrawal)```**Note**: Instead of using CorporateWithdrawal objects, you can also pass each element in dictionary format## Get a CorporateWithdrawalAfter its creation, information on a withdrawal may be retrieved by its id.```pythonimport starkbankwithdrawal = starkbank.corporatewithdrawal.get(&quot;5155165527080960&quot;)print(withdrawal)```## Query CorporateWithdrawalsYou can get a list of created withdrawals given some filters.```pythonimport starkbankfrom datetime import datewithdrawals = starkbank.corporatewithdrawal.query(    after=date(2020, 1, 1),    before=date(2020, 3, 1))for withdrawal in withdrawals:    print(withdrawal)```## Get your CorporateBalanceTo know how much money you have available to run authorizations, run:```pythonimport starkbankbalance = starkbank.corporatebalance.get()print(balance)```## Query CorporateTransactionsTo understand your balance changes (corporate statement), you can querytransactions. Note that our system creates transactions for you whenyou make purchases, withdrawals, receive corporate invoice payments, for example.```pythonimport starkbankfrom datetime import datetransactions = starkbank.corporatetransaction.query(    after=date(2020, 1, 1),    before=date(2020, 3, 1))for transaction in transactions:    print(transaction)```## Get a CorporateTransactionYou can get a specific transaction by its id:```pythonimport starkbanktransaction = starkbank.corporatetransaction.get(&quot;5155165527080960&quot;)print(transaction)```## Corporate Enums### Query MerchantCategoriesYou can query any merchant categories using this resource.You may also use MerchantCategories to define specific category filters in CorporateRules.Either codes (which represents specific MCCs) or types (code groups) will be accepted as filters.```pythonimport starkbankcategories = starkbank.merchantcategory.query(    search=&quot;food&quot;,)for category in categories:    print(category)```### Query MerchantCountriesYou can query any merchant countries using this resource.You may also use MerchantCountries to define specific country filters in CorporateRules.```pythonimport starkbankcountries = starkbank.merchantcountry.query(    search=&quot;brazil&quot;,)for country in countries:    print(country)```### Query CardMethodsYou can query available card methods using this resource.You may also use CardMethods to define specific purchase method filters in CorporateRules.```pythonimport starkbankmethods = starkbank.cardmethod.query(    search=&quot;token&quot;,)for method in methods:    print(method)```## Create a webhook subscriptionTo create a webhook subscription and be notified whenever an event occurs, run:```pythonimport starkbankwebhook = starkbank.webhook.create(    url=&quot;https://webhook.site/dd784f26-1d6a-4ca6-81cb-fda0267761ec&quot;,    subscriptions=[&quot;transfer&quot;, &quot;boleto&quot;, &quot;boleto-payment&quot;, &quot;boleto-holmes&quot;, &quot;brcode-payment&quot;, &quot;utility-payment&quot;, &quot;deposit&quot;, &quot;invoice&quot;],)print(webhook)```## Query webhook subscriptions To search for registered webhook subscriptions, run:```pythonimport starkbankwebhooks = starkbank.webhook.query()for webhook in webhooks:    print(webhook)```## Get a webhook subscriptionYou can get a specific webhook subscription by its id.```pythonimport starkbankwebhook = starkbank.webhook.get(&quot;10827361982368179&quot;)print(webhook)```## Delete a webhook subscriptionYou can also delete a specific webhook subscription by its id.```pythonimport starkbankwebhook = starkbank.webhook.delete(&quot;10827361982368179&quot;)print(webhook)```## Process webhook eventsIt's easy to process events that arrived in your webhook. Remember to pass thesignature header so the SDK can make sure it's really StarkBank that sent youthe event.```pythonimport starkbankresponse = listen()  # this is the method you made to get the events posted to your webhook endpointevent = starkbank.event.parse(    content=response.data.decode(&quot;utf-8&quot;),    signature=response.headers[&quot;Digital-Signature&quot;],)if event.subscription == &quot;transfer&quot;:    print(event.log.transfer)    elif event.subscription == &quot;boleto&quot;:    print(event.log.boleto)    elif event.subscription == &quot;boleto-payment&quot;:    print(event.log.payment)elif event.subscription == &quot;boleto-holmes&quot;:    print(event.log.holmes)elif event.subscription == &quot;brcode-payment&quot;:    print(event.log.payment)elif event.subscription == &quot;utility-payment&quot;:    print(event.log.payment)elif event.subscription == &quot;deposit&quot;:    print(event.log.deposit)elif event.subscription == &quot;invoice&quot;:    print(event.log.invoice)```## Query webhook eventsTo search for webhooks events, run:```pythonimport starkbankevents = starkbank.event.query(after=&quot;2020-03-20&quot;, is_delivered=False)for event in events:    print(event)```## Get a webhook eventYou can get a specific webhook event by its id.```pythonimport starkbankevent = starkbank.event.get(&quot;10827361982368179&quot;)print(event)```## Delete a webhook eventYou can also delete a specific webhook event by its id.```pythonimport starkbankevent = starkbank.event.delete(&quot;10827361982368179&quot;)print(event)```## Set webhook events as deliveredThis can be used in case you've lost events.With this function, you can manually set events retrieved from the API as&quot;delivered&quot; to help future event queries with `is_delivered=False`.```pythonimport starkbankevent = starkbank.event.update(id=&quot;129837198237192&quot;, is_delivered=True)print(event)```## Query failed webhook event delivery attempts informationYou can also get information on failed webhook event delivery attempts.```pythonimport starkbankattempts = starkbank.event.attempt.query(after=&quot;2020-03-20&quot;)for attempt in attempts:    print(attempt.code)    print(attempt.message)```## Get a failed webhook event delivery attempt informationTo retrieve information on a single attempt, use the following function:```pythonimport starkbankattempt = starkbank.event.attempt.get(&quot;1616161616161616&quot;)print(attempt)```## Create a new WorkspaceThe Organization user allows you to create new Workspaces (bank accounts) under your organization.Workspaces have independent balances, statements, operations and users.The only link between your Workspaces is the Organization that controls them.**Note**: This route will only work if the Organization user is used with `workspace_id=None`.```pythonimport starkbankworkspace = starkbank.workspace.create(    username=&quot;iron-bank-workspace-1&quot;,    name=&quot;Iron Bank Workspace 1&quot;,    user=organization,)print(workspace)```## List your WorkspacesThis route lists Workspaces. If no parameter is passed, all the workspaces the user has access to will be listed, butyou can also find other Workspaces by searching for their usernames or IDs directly.```pythonimport starkbankworkspaces = starkbank.workspace.query(limit=30)for workspace in workspaces:    print(workspace)```## Get a WorkspaceYou can get a specific Workspace by its id.```pythonimport starkbankworkspace = starkbank.workspace.get(&quot;1082736198236817&quot;)print(workspace)```## Update a WorkspaceYou can update a specific Workspace by its id.```pythonimport starkbankpicture = open(&quot;path/to/picture.png&quot;, &quot;rb&quot;).read()workspace = starkbank.workspace.update(    &quot;1082736198236817&quot;,    username=&quot;new-username&quot;,    name=&quot;New Name&quot;,    allowed_tax_ids=[&quot;012.345.678-90&quot;],    picture=picture,    picture_type=&quot;image/png&quot;,    user=starkbank.Organization.replace(organization, &quot;1082736198236817&quot;))print(workspace)```You can also block a specific Workspace by its id.```pythonimport starkbankworkspace = starkbank.workspace.update(    &quot;1082736198236817&quot;,    username=&quot;new-username&quot;,    name=&quot;New Name&quot;,    status=&quot;blocked&quot;,    user=starkbank.Organization.replace(organization, &quot;1082736198236817&quot;))print(workspace)```**Note**: the Organization user can only update a workspace with the Workspace ID set.# Handling errorsThe SDK may raise one of four types of errors: __InputErrors__, __InternalServerError__, __UnknownError__, __InvalidSignatureError____InputErrors__ will be raised whenever the API detects an error in your request (status code 400).If you catch such an error, you can get its elements to verify each of theindividual errors that were detected in your request by the API.For example:```pythonimport starkbanktry:    transactions = starkbank.transaction.create([        starkbank.Transaction(            amount=99999999999999,  # (R$ 999,999,999,999.99)            receiver_id=&quot;1029378109327810&quot;,            description=&quot;.&quot;,            external_id=&quot;12345&quot;,  # so we can block anything you send twice by mistake            tags=[&quot;provider&quot;]        ),    ])except starkbank.error.InputErrors as exception:    for error in exception.errors:        print(error.code)        print(error.message)```__InternalServerError__ will be raised if the API runs into an internal error.If you ever stumble upon this one, rest assured that the development teamis already rushing in to fix the mistake and get you back up to speed.__UnknownError__ will be raised if a request encounters an error that isneither __InputErrors__ nor an __InternalServerError__, such as connectivity problems.__InvalidSignatureError__ will be raised specifically by starkbank.event.parse()when the provided content and signature do not check out with the Stark Bank publickey.# Help and FeedbackIf you have any questions about our SDK, just send us an email.We will respond you quickly, pinky promise. We are here to help you integrate with us ASAP.We also love feedback, so don't be shy about sharing your thoughts with us.Email: help@starkbank.com</longdescription>
</pkgmetadata>