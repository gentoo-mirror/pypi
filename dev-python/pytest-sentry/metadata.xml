<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============pytest-sentry=============.. image:: https://img.shields.io/pypi/v/pytest-sentry    :target: https://pypi.org/project/pytest-sentry/.. image:: https://img.shields.io/pypi/l/pytest-sentry    :target: https://pypi.org/project/pytest-sentry/``pytest-sentry`` is a `pytest &lt;https://pytest.org&gt;`_ plugin that uses `Sentry&lt;https://sentry.io/&gt;`_ to store and aggregate information about your testruns.**This is not an official Sentry product.**Tracking flaky tests as errors==============================Let's say you have a testsuite with some flaky tests that randomly break yourCI build due to network issues, race conditions or other stuff that you don'twant to fix immediately. The known workaround is to retry those testsautomatically, for example using `pytest-rerunfailures&lt;https://github.com/pytest-dev/pytest-rerunfailures&gt;`_.One concern against plugins like this is that they just hide the bugs in yourtestsuite or even other code. After all your CI build is green and your codeprobably works most of the time.``pytest-sentry`` tries to make that choice a bit easier by tracking flaky testfailures in a place separate from your build status. Sentry is already agood choice for keeping tabs on all kinds of errors, important or not, inproduction, so let's try to use it in testsuites too.The prerequisite is that you already make use of ``pytest`` and``pytest-rerunfailures`` in CI. Now install ``pytest-sentry`` and set the``PYTEST_SENTRY_DSN`` environment variable to the DSN of a new Sentry project.Now every test failure that is &quot;fixed&quot; by retrying the test is reported toSentry, but still does not break CI. Tests that consistently fail will not bereported.Tracking the performance of your testsuite==========================================By default ``pytest-sentry`` will send `Performance&lt;https://sentry.io/for/performance/&gt;`_ data to Sentry:* Fixture setup is reported as &quot;transaction&quot; to Sentry, such that you can  answer questions like &quot;what is my slowest test fixture&quot; and &quot;what is my most  used test fixture&quot;.* Calls to the test function itself are reported as separate transaction such  that you can find large, slow tests as well.* Fixture setup related to a particular test item will be in the same trace,  i.e. will have same trace ID. There is no common parent transaction though.  It is purposefully dropped to spare quota as it does not contain interesting  information::      pytest.runtest.protocol  [one time, not sent]        pytest.fixture.setup [multiple times, sent]        pytest.runtest.call [one time, sent]  The trace is per-test-item. For correlating transactions across an entire  test run, use the automatically attached CI tags or attach some tag on your  own.To measure performance data, install ``pytest-sentry`` and set``PYTEST_SENTRY_DSN``, like with errors. By default, the extension will send allperformance data to Sentry. If you want to limit the amount of data sent, youcan set the ``PYTEST_SENTRY_TRACES_SAMPLE_RATE`` environment variable to a floatbetween ``0`` and ``1``. This will cause only a random sample of transactions tobe sent to Sentry.Transactions can have noticeable runtime overhead over just reporting errors.To disable, use a marker::    import pytest    import pytest_sentry    pytestmarker = pytest.mark.sentry_client({&quot;traces_sample_rate&quot;: 0.0})Advanced Options================``pytest-sentry`` supports marking your tests to use a different DSN, client orhub per-test. You can use this to provide custom options to the ``Client``object from the `Sentry SDK for Python&lt;https://github.com/getsentry/sentry-python&gt;`_::    import random    import pytest    from sentry_sdk import Hub    from pytest_sentry import Client    @pytest.mark.sentry_client(None)    def test_no_sentry():        # Even though flaky, this test never gets reported to sentry        assert random.random() &gt; 0.5    @pytest.mark.sentry_client(&quot;MY NEW DSN&quot;)    def test_custom_dsn():        # Use a different DSN to report errors for this one        assert random.random() &gt; 0.5    # Other invocations:    @pytest.mark.sentry_client(Client(&quot;CUSTOM DSN&quot;))    @pytest.mark.sentry_client(lambda: Client(&quot;CUSTOM DSN&quot;))    @pytest.mark.sentry_client(Hub(Client(&quot;CUSTOM DSN&quot;)))    @pytest.mark.sentry_client({&quot;dsn&quot;: ..., &quot;debug&quot;: True})The ``Client`` class exposed by ``pytest-sentry`` only has different defaultintegrations. It disables some of the error-capturing integrations to avoidsending random expected errors into your project.Accessing the used Sentry client================================You will notice that the global functions such as``sentry_sdk.capture_message`` will not actually send events into the same DSNyou configured this plugin with. That's because ``pytest-sentry`` goes toextreme lenghts to keep its own SDK setup separate from the SDK setup of thetested code.``pytest-sentry`` exposes the ``sentry_test_hub`` fixture whose return value isthe ``Hub`` being used to send events to Sentry. Use ``with sentry_test_hub:``to temporarily switch context. You can use this to set custom tags like so::    def test_foo(sentry_test_hub):        with sentry_test_hub:            sentry_sdk.set_tag(&quot;pull_request&quot;, os.environ['EXAMPLE_CI_PULL_REQUEST'])Why all the hassle with the context manager? Just imagine if your testedapplication would start to log some (expected) errors on its own. You wouldimmediately exceed your quota!Always reporting test failures==============================You can always report all test failures to Sentry by setting the environmentvariable ``PYTEST_SENTRY_ALWAYS_REPORT=1``.This can be enabled for builds on the ``main`` or release branch, to catchcertain kinds of tests that are flaky across builds, but consistently fail orpass within one testrun.License=======Licensed under 2-clause BSD, see ``LICENSE``.</longdescription>
</pkgmetadata>