<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OCI Image Resource helperThis is a helper for working with OCI image resources in the charm operatorframework.## UsageAdd this to your charm by including `oci-image` in your `requirements.txt` file.The `OCIImageResource` class will wrap the framework resource for the givenresource name, and calling `fetch` on it will either return the image infoor raise an `OCIImageResourceError` if it can't fetch or parse the imageinfo. The exception will have a `status` attribute you can use directly,or a `status_message` attribute if you just want that.Example usage:```pythonfrom ops.charm import CharmBasefrom ops.main import mainfrom oci_image import OCIImageResource, OCIImageResourceErrorclass MyCharm(CharmBase):    def __init__(self, *args):        super().__init__(*args)        self.image = OCIImageResource(self, 'resource-name')        self.framework.observe(self.on.start, self._on_start)    def _on_start(self, event):        try:            image_info = self.image.fetch()        except OCIImageResourceError as e:            self.model.unit.status = e.status            event.defer()            return        self.model.pod.set_spec({'containers': [{            'name': 'my-charm',            'imageDetails': image_info,        }]})if __name__ == &quot;__main__&quot;:    main(MyCharm)```## DevelopingTests can be run with [tox](https://tox.readthedocs.io/en/latest/).</longdescription>
</pkgmetadata>