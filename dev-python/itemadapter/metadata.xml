<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># itemadapter[![version](https://img.shields.io/pypi/v/itemadapter.svg)](https://pypi.python.org/pypi/itemadapter)[![pyversions](https://img.shields.io/pypi/pyversions/itemadapter.svg)](https://pypi.python.org/pypi/itemadapter)[![actions](https://github.com/scrapy/itemadapter/workflows/Tests/badge.svg)](https://github.com/scrapy/itemadapter/actions)[![codecov](https://codecov.io/gh/scrapy/itemadapter/branch/master/graph/badge.svg)](https://codecov.io/gh/scrapy/itemadapter)The `ItemAdapter` class is a wrapper for data container objects, providing acommon interface to handle objects of different types in an uniform manner,regardless of their underlying implementation.Currently supported types are:* [`scrapy.item.Item`](https://docs.scrapy.org/en/latest/topics/items.html#scrapy.item.Item)* [`dict`](https://docs.python.org/3/library/stdtypes.html#dict)* [`dataclass`](https://docs.python.org/3/library/dataclasses.html)-based classes* [`attrs`](https://www.attrs.org)-based classes* [`pydantic`](https://pydantic-docs.helpmanual.io/)-based classesAdditionally, interaction with arbitrary types is supported, by implementinga pre-defined interface (see [extending `itemadapter`](#extending-itemadapter)).---## Requirements* Python 3.7+* [`scrapy`](https://scrapy.org/): optional, needed to interact with `scrapy` items* [`attrs`](https://pypi.org/project/attrs/): optional, needed to interact with `attrs`-based items* [`pydantic`](https://pypi.org/project/pydantic/): optional, needed to interact with `pydantic`-based items---## Installation`itemadapter` is available on [`PyPI`](https://pypi.python.org/pypi/itemadapter), it can be installed with `pip`:```pip install itemadapter```---## License`itemadapter` is distributed under a [BSD-3](https://opensource.org/licenses/BSD-3-Clause) license.---## Basic usageThe following is a simple example using a `dataclass` object.Consider the following type definition:```python&gt;&gt;&gt; from dataclasses import dataclass&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; @dataclass... class InventoryItem:...     name: str...     price: float...     stock: int&gt;&gt;&gt;```An `ItemAdapter` object can be treated much like a dictionary:```python&gt;&gt;&gt; obj = InventoryItem(name='foo', price=20.5, stock=10)&gt;&gt;&gt; ItemAdapter.is_item(obj)True&gt;&gt;&gt; adapter = ItemAdapter(obj)&gt;&gt;&gt; len(adapter)3&gt;&gt;&gt; adapter[&quot;name&quot;]'foo'&gt;&gt;&gt; adapter.get(&quot;price&quot;)20.5&gt;&gt;&gt;```The wrapped object is modified in-place:```python&gt;&gt;&gt; adapter[&quot;name&quot;] = &quot;bar&quot;&gt;&gt;&gt; adapter.update({&quot;price&quot;: 12.7, &quot;stock&quot;: 9})&gt;&gt;&gt; adapter.itemInventoryItem(name='bar', price=12.7, stock=9)&gt;&gt;&gt; adapter.item is objTrue&gt;&gt;&gt;```### Converting to dictThe `ItemAdapter` class provides the `asdict` method, which convertsnested items recursively. Consider the following example:```python&gt;&gt;&gt; from dataclasses import dataclass&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; @dataclass... class Price:...     value: int...     currency: str&gt;&gt;&gt; @dataclass... class Product:...     name: str...     price: Price&gt;&gt;&gt;``````python&gt;&gt;&gt; item = Product(&quot;Stuff&quot;, Price(42, &quot;UYU&quot;))&gt;&gt;&gt; adapter = ItemAdapter(item)&gt;&gt;&gt; adapter.asdict(){'name': 'Stuff', 'price': {'value': 42, 'currency': 'UYU'}}&gt;&gt;&gt;```Note that just passing an adapter object to the `dict` built-in also works,but it doesn't traverse the object recursively converting nested items:```python&gt;&gt;&gt; dict(adapter){'name': 'Stuff', 'price': Price(value=42, currency='UYU')}&gt;&gt;&gt;```---## API reference### Built-in adaptersThe following adapters are included by default:* `itemadapter.adapter.ScrapyItemAdapter`: handles `Scrapy` items* `itemadapter.adapter.DictAdapter`: handles `Python` dictionaries* `itemadapter.adapter.DataclassAdapter`: handles `dataclass` objects* `itemadapter.adapter.AttrsAdapter`: handles `attrs` objects* `itemadapter.adapter.PydanticAdapter`: handles `pydantic` objects### class `itemadapter.adapter.ItemAdapter(item: Any)`This is the main entrypoint for the package. Tipically, user codewraps an item using this class, and proceeds to handle it with the provided interface.`ItemAdapter` implements the[`MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping)interface, providing a `dict`-like API to manipulate data for the object it wraps(which is modified in-place).**Attributes**#### class attribute `ADAPTER_CLASSES: collections.deque`Stores the currently registered adapter classes. Being a[`collections.deque`](https://docs.python.org/3/library/collections.html#collections.deque),it supports efficient addition/deletion of adapters classes to both ends.The order in which the adapters are registered is important. When an `ItemAdapter` object iscreated for a specific item, the registered adapters are traversed in order and the firstadapter class to return `True` for the `is_item` class method is used for all subsequentoperations. The default order is the one defined in the[built-in adapters](#built-in-adapters) section.See the section on [extending itemadapter](#extending-itemadapter) for additional information.**Methods**#### class method `is_item(item: Any) -&gt; bool`Return `True` if any of the registed adapters can handle the item(i.e. if any of them returns `True` for its `is_item` method with`item` as argument), `False` otherwise.#### class method `is_item_class(item_class: type) -&gt; bool`Return `True` if any of the registered adapters can handle the item class(i.e. if any of them returns `True` for its `is_item_class` method with`item_class` as argument), `False` otherwise.#### class method `get_field_meta_from_class(item_class: type, field_name: str) -&gt; MappingProxyType`Return a [`types.MappingProxyType`](https://docs.python.org/3/library/types.html#types.MappingProxyType)object, which is a read-only mapping with metadata about the given field. If the item class does notsupport field metadata, or there is no metadata for the given field, an empty object is returned.The returned value is taken from the following sources, depending on the item type:  * [`scrapy.item.Field`](https://docs.scrapy.org/en/latest/topics/items.html#item-fields)    for `scrapy.item.Item`s  * [`dataclasses.field.metadata`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field)    for `dataclass`-based items  * [`attr.Attribute.metadata`](https://www.attrs.org/en/stable/examples.html#metadata)    for `attrs`-based items  * [`pydantic.fields.FieldInfo`](https://pydantic-docs.helpmanual.io/usage/schema/#field-customisation)    for `pydantic`-based items#### class method `get_field_names_from_class(item_class: type) -&gt; Optional[list[str]]`Return a list with the names of all the fields defined for the item class.If an item class doesn't support defining fields upfront, None is returned.#### `get_field_meta(field_name: str) -&gt; MappingProxyType`Return metadata for the given field, if available. Unless overriden in a custom adapter class, by defaultthis method calls the adapter's `get_field_meta_from_class` method, passing the wrapped item's class.#### `field_names() -&gt; collections.abc.KeysView`Return a [keys view](https://docs.python.org/3/library/collections.abc.html#collections.abc.KeysView)with the names of all the defined fields for the item.#### `asdict() -&gt; dict`Return a `dict` object with the contents of the adapter. This works slightly different thancalling `dict(adapter)`, because it's applied recursively to nested items (if there are any).### function `itemadapter.utils.is_item(obj: Any) -&gt; bool`Return `True` if the given object belongs to (at least) one of the supported types,`False` otherwise. This is an alias, using the `itemadapter.adapter.ItemAdapter.is_item`class method is encouraged for better performance.### function `itemadapter.utils.get_field_meta_from_class(item_class: type, field_name: str) -&gt; types.MappingProxyType`Alias for `itemadapter.adapter.ItemAdapter.get_field_meta_from_class`---## Metadata support`scrapy.item.Item`, `dataclass`, `attrs`, and `pydantic` objects allow the definition ofarbitrary field metadata. This can be accessed through a[`MappingProxyType`](https://docs.python.org/3/library/types.html#types.MappingProxyType)object, which can be retrieved from an item instance with`itemadapter.adapter.ItemAdapter.get_field_meta`, or from an item classwith the `itemadapter.adapter.ItemAdapter.get_field_meta_from_class`method (or its alias `itemadapter.utils.get_field_meta_from_class`).The source of the data depends on the underlying type (see the docs for`ItemAdapter.get_field_meta_from_class`).#### `scrapy.item.Item` objects```python&gt;&gt;&gt; from scrapy.item import Item, Field&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; class InventoryItem(Item):...     name = Field(serializer=str)...     value = Field(serializer=int, limit=100)...&gt;&gt;&gt; adapter = ItemAdapter(InventoryItem(name=&quot;foo&quot;, value=10))&gt;&gt;&gt; adapter.get_field_meta(&quot;name&quot;)mappingproxy({'serializer': &lt;class 'str'&gt;})&gt;&gt;&gt; adapter.get_field_meta(&quot;value&quot;)mappingproxy({'serializer': &lt;class 'int'&gt;, 'limit': 100})&gt;&gt;&gt;```#### `dataclass` objects```python&gt;&gt;&gt; from dataclasses import dataclass, field&gt;&gt;&gt; @dataclass... class InventoryItem:...     name: str = field(metadata={&quot;serializer&quot;: str})...     value: int = field(metadata={&quot;serializer&quot;: int, &quot;limit&quot;: 100})...&gt;&gt;&gt; adapter = ItemAdapter(InventoryItem(name=&quot;foo&quot;, value=10))&gt;&gt;&gt; adapter.get_field_meta(&quot;name&quot;)mappingproxy({'serializer': &lt;class 'str'&gt;})&gt;&gt;&gt; adapter.get_field_meta(&quot;value&quot;)mappingproxy({'serializer': &lt;class 'int'&gt;, 'limit': 100})&gt;&gt;&gt;```#### `attrs` objects```python&gt;&gt;&gt; import attr&gt;&gt;&gt; @attr.s... class InventoryItem:...     name = attr.ib(metadata={&quot;serializer&quot;: str})...     value = attr.ib(metadata={&quot;serializer&quot;: int, &quot;limit&quot;: 100})...&gt;&gt;&gt; adapter = ItemAdapter(InventoryItem(name=&quot;foo&quot;, value=10))&gt;&gt;&gt; adapter.get_field_meta(&quot;name&quot;)mappingproxy({'serializer': &lt;class 'str'&gt;})&gt;&gt;&gt; adapter.get_field_meta(&quot;value&quot;)mappingproxy({'serializer': &lt;class 'int'&gt;, 'limit': 100})&gt;&gt;&gt;```#### `pydantic` objects```python&gt;&gt;&gt; from pydantic import BaseModel, Field&gt;&gt;&gt; class InventoryItem(BaseModel):...     name: str = Field(serializer=str)...     value: int = Field(serializer=int, limit=100)...&gt;&gt;&gt; adapter = ItemAdapter(InventoryItem(name=&quot;foo&quot;, value=10))&gt;&gt;&gt; adapter.get_field_meta(&quot;name&quot;)mappingproxy({'serializer': &lt;class 'str'&gt;})&gt;&gt;&gt; adapter.get_field_meta(&quot;value&quot;)mappingproxy({'serializer': &lt;class 'int'&gt;, 'limit': 100})&gt;&gt;&gt;```---## Extending `itemadapter`This package allows to handle arbitrary item classes, by implementing an adapter interface:_class `itemadapter.adapter.AdapterInterface(item: Any)`_Abstract Base Class for adapters. An adapter that handles a specific type of item mustinherit from this class and implement the abstract methods defined on it. `AdapterInterface`inherits from [`collections.abc.MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping),so all methods from the `MutableMapping` interface must be implemented as well.* _class method `is_item_class(cls, item_class: type) -&gt; bool`_    Return `True` if the adapter can handle the given item class, `False` otherwise. Abstract (mandatory).* _class method `is_item(cls, item: Any) -&gt; bool`_    Return `True` if the adapter can handle the given item, `False` otherwise.    The default implementation calls `cls.is_item_class(item.__class__)`.* _class method `get_field_meta_from_class(cls, item_class: type) -&gt; bool`_    Return metadata for the given item class and field name, if available.    By default, this method returns an empty `MappingProxyType` object. Please supply your    own method definition if you want to handle field metadata based on custom logic.    See the [section on metadata support](#metadata-support) for additional information.* _method `get_field_meta(self, field_name: str) -&gt; types.MappingProxyType`_    Return metadata for the given field name, if available. It's usually not necessary to    override this method, since the `itemadapter.adapter.AdapterInterface` base class    provides a default implementation that calls `ItemAdapter.get_field_meta_from_class`    with the wrapped item's class as argument.    See the [section on metadata support](#metadata-support) for additional information.* _method `field_names(self) -&gt; collections.abc.KeysView`_:    Return a [dynamic view](https://docs.python.org/3/library/collections.abc.html#collections.abc.KeysView)    of the item's field names. By default, this method returns the result of calling `keys()` on    the current adapter, i.e., its return value depends on the implementation of the methods from the    `MutableMapping` interface (more specifically, it depends on the return value of `__iter__`).    You might want to override this method if you want a way to get all fields for an item, whether or not    they are populated. For instance, Scrapy uses this method to define column names when exporting items to CSV.### Registering an adapterAdd your custom adapter class to the `itemadapter.adapter.ItemAdapter.ADAPTER_CLASSES`class attribute in order to handle custom item classes:**Example**```python&gt;&gt;&gt; from itemadapter.adapter import ItemAdapter&gt;&gt;&gt; from tests.test_interface import BaseFakeItemAdapter, FakeItemClass&gt;&gt;&gt;&gt;&gt;&gt; ItemAdapter.ADAPTER_CLASSES.appendleft(BaseFakeItemAdapter)&gt;&gt;&gt; item = FakeItemClass()&gt;&gt;&gt; adapter = ItemAdapter(item)&gt;&gt;&gt; adapter&lt;ItemAdapter for FakeItemClass()&gt;&gt;&gt;&gt;```### Multiple adapter classesIf you need to have different handlers and/or priorities for different casesyou can subclass the `ItemAdapter` class and set the `ADAPTER_CLASSES`attribute as needed:**Example**```python&gt;&gt;&gt; from collections import deque&gt;&gt;&gt; from itemadapter.adapter import (...     ItemAdapter,...     AttrsAdapter,...     DataclassAdapter,...     DictAdapter,...     PydanticAdapter,...     ScrapyItemAdapter,... )&gt;&gt;&gt; from scrapy.item import Item, Field&gt;&gt;&gt;&gt;&gt;&gt; class BuiltinTypesItemAdapter(ItemAdapter):...     ADAPTER_CLASSES = deque([DictAdapter, DataclassAdapter])...&gt;&gt;&gt; class ThirdPartyTypesItemAdapter(ItemAdapter):...     ADAPTER_CLASSES = deque([AttrsAdapter, PydanticAdapter, ScrapyItemAdapter])...&gt;&gt;&gt; class ScrapyItem(Item):...     foo = Field()...&gt;&gt;&gt; BuiltinTypesItemAdapter.is_item(dict())True&gt;&gt;&gt; ThirdPartyTypesItemAdapter.is_item(dict())False&gt;&gt;&gt; BuiltinTypesItemAdapter.is_item(ScrapyItem(foo=&quot;bar&quot;))False&gt;&gt;&gt; ThirdPartyTypesItemAdapter.is_item(ScrapyItem(foo=&quot;bar&quot;))True&gt;&gt;&gt;```---## More examples### `scrapy.item.Item` objects```python&gt;&gt;&gt; from scrapy.item import Item, Field&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; class InventoryItem(Item):...     name = Field()...     price = Field()...&gt;&gt;&gt; item = InventoryItem(name=&quot;foo&quot;, price=10)&gt;&gt;&gt; adapter = ItemAdapter(item)&gt;&gt;&gt; adapter.item is itemTrue&gt;&gt;&gt; adapter[&quot;name&quot;]'foo'&gt;&gt;&gt; adapter[&quot;name&quot;] = &quot;bar&quot;&gt;&gt;&gt; adapter[&quot;price&quot;] = 5&gt;&gt;&gt; item{'name': 'bar', 'price': 5}&gt;&gt;&gt;```### `dict````python&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; item = dict(name=&quot;foo&quot;, price=10)&gt;&gt;&gt; adapter = ItemAdapter(item)&gt;&gt;&gt; adapter.item is itemTrue&gt;&gt;&gt; adapter[&quot;name&quot;]'foo'&gt;&gt;&gt; adapter[&quot;name&quot;] = &quot;bar&quot;&gt;&gt;&gt; adapter[&quot;price&quot;] = 5&gt;&gt;&gt; item{'name': 'bar', 'price': 5}&gt;&gt;&gt;```### `dataclass` objects```python&gt;&gt;&gt; from dataclasses import dataclass&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; @dataclass... class InventoryItem:...     name: str...     price: int...&gt;&gt;&gt; item = InventoryItem(name=&quot;foo&quot;, price=10)&gt;&gt;&gt; adapter = ItemAdapter(item)&gt;&gt;&gt; adapter.item is itemTrue&gt;&gt;&gt; adapter[&quot;name&quot;]'foo'&gt;&gt;&gt; adapter[&quot;name&quot;] = &quot;bar&quot;&gt;&gt;&gt; adapter[&quot;price&quot;] = 5&gt;&gt;&gt; itemInventoryItem(name='bar', price=5)&gt;&gt;&gt;```### `attrs` objects```python&gt;&gt;&gt; import attr&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; @attr.s... class InventoryItem:...     name = attr.ib()...     price = attr.ib()...&gt;&gt;&gt; item = InventoryItem(name=&quot;foo&quot;, price=10)&gt;&gt;&gt; adapter = ItemAdapter(item)&gt;&gt;&gt; adapter.item is itemTrue&gt;&gt;&gt; adapter[&quot;name&quot;]'foo'&gt;&gt;&gt; adapter[&quot;name&quot;] = &quot;bar&quot;&gt;&gt;&gt; adapter[&quot;price&quot;] = 5&gt;&gt;&gt; itemInventoryItem(name='bar', price=5)&gt;&gt;&gt;```### `pydantic` objects```python&gt;&gt;&gt; from pydantic import BaseModel&gt;&gt;&gt; from itemadapter import ItemAdapter&gt;&gt;&gt; class InventoryItem(BaseModel):...     name: str...     price: int...&gt;&gt;&gt; item = InventoryItem(name=&quot;foo&quot;, price=10)&gt;&gt;&gt; adapter = ItemAdapter(item)&gt;&gt;&gt; adapter.item is itemTrue&gt;&gt;&gt; adapter[&quot;name&quot;]'foo'&gt;&gt;&gt; adapter[&quot;name&quot;] = &quot;bar&quot;&gt;&gt;&gt; adapter[&quot;price&quot;] = 5&gt;&gt;&gt; itemInventoryItem(name='bar', price=5)&gt;&gt;&gt;```## ChangelogSee the [full changelog](Changelog.md)</longdescription>
</pkgmetadata>