<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============================Django Bootstrap Modal Forms============================A Django plugin for creating AJAX driven forms in Bootstrap modal.Live Demo=========Demo_.. _Demo: http://trco.silkym.com/dbmf/Test and experiment on your machine===================================This repository includes ``Dockerfile`` and ``docker-compose.yml`` files so you can easily setup and start to experiment with ``django-bootstrap-modal-forms`` running inside of a container on your local machine. Any changes you make in ``bootstrap_modal_forms``, ``examples`` and ``test`` folders are reflected in the container (see docker-compose.yml) and the data stored in sqlite3 database are persistent even if you remove stopped container. Follow the steps below to run the app::    $ clone repository    $ cd django-bootstrap-modal-forms    $ docker compose up (use -d flag to run app in detached mode in the background)    $ visit 0.0.0.0:8000Installation============1. Install ``django-bootstrap-modal-forms``::    $ pip install django-bootstrap-modal-forms2. Add ``bootstrap_modal_forms`` to your INSTALLED_APPS in settings.py::    INSTALLED_APPS = [        ...        'bootstrap_modal_forms',        ...    ]3. Include Bootstrap, jQuery and ``jquery.bootstrap.modal.forms.js`` on every page where you would like to set up the AJAX driven Django forms in Bootstrap modal.IMPORTANT: Adjust Bootstrap and jQuery file paths to match yours, but include ``jquery.bootstrap.modal.forms.js`` exactly as in code bellow... code-block:: html+django    &lt;head&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'assets/css/bootstrap.css' %}&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;script src=&quot;{% static 'assets/js/bootstrap.js' %}&quot;&gt;&lt;/script&gt;        &lt;!-- Bootstrap 4 --&gt;        &lt;script src=&quot;{% static 'assets/js/jquery.js' %}&quot;&gt;&lt;/script&gt;        &lt;script src=&quot;{% static 'js/jquery.bootstrap.modal.forms.js' %}&quot;&gt;&lt;/script&gt;        &lt;!-- You can alternatively load the minified version --&gt;        &lt;script src=&quot;{% static 'js/jquery.bootstrap.modal.forms.min.js' %}&quot;&gt;&lt;/script&gt;        &lt;!-- Bootstrap 5 --&gt;        &lt;script src=&quot;{% static 'js/bootstrap5.modal.forms.js' %}&quot;&gt;&lt;/script&gt;        &lt;!-- You can alternatively load the minified version --&gt;        &lt;script src=&quot;{% static 'js/bootstrap5.modal.forms.min.js' %}&quot;&gt;&lt;/script&gt;    &lt;/body&gt;How it works?=============.. code-block:: html    index.html    &lt;script type=&quot;text/javascript&quot;&gt;    // BS4    $(document).ready(function() {        $(&quot;#create-book&quot;).modalForm({            formURL: &quot;{% url 'create_book' %}&quot;        });    });    // BS5    // instantiate single modal form    document.addEventListener('DOMContentLoaded', (e) =&gt; {      modalForm(document.getElementById('create-book'), {        formURL: &quot;{% url 'create_book' %}&quot;      })    });    // BS5    // instantiate multiple modal forms with unique formUrls    document.addEventListener('DOMContentLoaded', (e) =&gt; {      var deleteButtons = document.getElementsByClassName(&quot;delete-book&quot;);      for (var index=0; index &lt; deleteButtons.length; index++) {        modalForm(deleteButtons[index], {          formURL: deleteButtons[index][&quot;dataset&quot;][&quot;formUrl&quot;],          isDeleteForm: true        });      }    });    &lt;/script&gt;1. Click event on html element instantiated with ``modalForm`` opens modal2. Form at ``formURL`` is appended to the modal3. On submit the form is POSTed via AJAX request to ``formURL``4. **Unsuccessful POST request** returns errors, which are shown in modal5. **Successful POST request** submits the form and redirects to ``success_url`` and shows ``success_message``, which are both defined in related Django viewUsage=====1. Form*******Define BookModelForm and inherit built-in form ``BSModalModelForm``... code-block:: python    forms.py    from .models import Book    from bootstrap_modal_forms.forms import BSModalModelForm    class BookModelForm(BSModalModelForm):        class Meta:            model = Book            fields = ['title', 'author', 'price']2. Form's html**************Define form's html and save it as Django template.- Bootstrap 4 modal elements are used in this example.- Form will POST to ``formURL`` defined in #6.- Add ``class=&quot;invalid&quot;`` or custom ``errorClass`` (see paragraph **Options**) to the elements that wrap the fields.- ``class=&quot;invalid&quot;`` acts as a flag for the fields having errors after the form has been POSTed... code-block:: html    book/create_book.html    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;      {% csrf_token %}     &lt;div class=&quot;modal-header&quot;&gt;        &lt;h5 class=&quot;modal-title&quot;&gt;Create new Book&lt;/h5&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;        &lt;/button&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        {% for field in form %}          &lt;div class=&quot;form-group{% if field.errors %} invalid{% endif %}&quot;&gt;            &lt;label for=&quot;{{ field.id_for_label }}&quot;&gt;{{ field.label }}&lt;/label&gt;            {{ field }}            {% for error in field.errors %}              &lt;p class=&quot;help-block&quot;&gt;{{ error }}&lt;/p&gt;            {% endfor %}          &lt;/div&gt;        {% endfor %}      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Create&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;3. Class-based view*******************Define a class-based view BookCreateView and inherit from built-in generic view ``BSModalCreateView``. BookCreateView processes the form defined in #1, uses the template defined in #2 and redirects to ``success_url`` showing ``success_message``... code-block:: python    views.py    from django.urls import reverse_lazy    from .forms import BookModelForm    from .models import Book    from bootstrap_modal_forms.generic import BSModalCreateView    class BookCreateView(BSModalCreateView):        template_name = 'examples/create_book.html'        form_class = BookModelForm        success_message = 'Success: Book was created.'        success_url = reverse_lazy('index')4. URL for the view*******************Define URL for the view in #3... code-block:: python    from django.urls import path    from books import views    urlpatterns = [        path('', views.Index.as_view(), name='index'),        path('create/', views.BookCreateView.as_view(), name='create_book'),    ]5. Bootstrap modal and trigger element**************************************Define the Bootstrap modal window and html element triggering modal opening.- **Single modal** can be used for multiple ``modalForms`` in single template (see #6).- When using **multiple modals** on the same page each modal should have unique ``id`` and the same value should also be set as ``modalID`` option when instantiating ``modalForm`` on trigger element.- Trigger element (in this example button with ``id=&quot;create-book&quot;``) is used for instantiation of ``modalForm`` in #6.- Any element can be trigger element as long as ``modalForm`` is bound to it.- Click event on trigger element loads form's html from #2 within ``&lt;div class=&quot;modal-content&quot;&gt;&lt;/div&gt;`` and sets action attribute of the form to ``formURL`` set in #6... code-block:: html+django    index.html    &lt;div class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; id=&quot;modal&quot;&gt;      &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;        &lt;div class=&quot;modal-content&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;!-- Create book button --&gt;    &lt;button id=&quot;create-book&quot; class=&quot;btn btn-primary&quot; type=&quot;button&quot; name=&quot;button&quot;&gt;Create book&lt;/button&gt;6. modalForm************Add script to the template from #5 and bind the ``modalForm`` to the trigger element. Set BookCreateView URL defined in #4 as ``formURL`` property of ``modalForm``.- If you want to create **more modalForms in single template using the single modal window** from #5, repeat steps #1 to #4, create new trigger element as in #5 and bind the new ``modalForm`` with unique URL to it.- Default values for ``modalID``, ``modalContent``, ``modalForm`` and ``errorClass`` are used in this example, while ``formURL`` is customized. If you customize any other option adjust the code of the above examples accordingly... code-block:: html    index.html    &lt;script type=&quot;text/javascript&quot;&gt;    // BS4    $(document).ready(function() {        $(&quot;#create-book&quot;).modalForm({            formURL: &quot;{% url 'create_book' %}&quot;        });    });    // BS5    document.addEventListener('DOMContentLoaded', (e) =&gt; {      modalForm(document.getElementById('create-book'), {        formURL: &quot;{% url 'create_book' %}&quot;      })    });    &lt;/script&gt;Async create/update with or without modal closing on submit===========================================================Set ``asyncUpdate`` and ``asyncSettings`` settings to create or update objects without page redirection to ``successUrl`` and define whether a modal should close or stay opened after form submission. See comments in example below and paragraph **modalForm options** for explanation of ``asyncSettings``.See examples on how to properly reinstantiate modal forms for all CRUD buttons when using async options... code-block:: html    index.html    &lt;!-- asyncSettings.dataElementId --&gt;    &lt;table id=&quot;books-table&quot; class=&quot;table&quot;&gt;      &lt;thead&gt;        ...      &lt;/thead&gt;      &lt;tbody&gt;      {% for book in books %}        &lt;tr&gt;            ...            &lt;!-- Update book buttons --&gt;            &lt;button type=&quot;button&quot; class=&quot;update-book btn btn-sm btn-primary&quot; data-form-url=&quot;{% url 'update_book' book.pk %}&quot;&gt;              &lt;span class=&quot;fa fa-pencil&quot;&gt;&lt;/span&gt;            &lt;/button&gt;            ...          &lt;/td&gt;        &lt;/tr&gt;      {% endfor %}      &lt;/tbody&gt;    &lt;/table&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        $(function () {            ...            # asyncSettings.successMessage            var asyncSuccessMessage = [              &quot;&lt;div &quot;,              &quot;style='position:fixed;top:0;z-index:10000;width:100%;border-radius:0;' &quot;,              &quot;class='alert alert-icon alert-success alert-dismissible fade show mb-0' role='alert'&gt;&quot;,              &quot;Success: Book was updated.&quot;,              &quot;&lt;button type='button' class='close' data-dismiss='alert' aria-label='Close'&gt;&quot;,              &quot;&lt;span aria-hidden='true'&gt;&amp;times;&lt;/span&gt;&quot;,              &quot;&lt;/button&gt;&quot;,              &quot;&lt;/div&gt;&quot;,              &quot;&lt;script&gt;&quot;,              &quot;$('.alert').fadeTo(2000, 500).slideUp(500, function () {$('.alert').slideUp(500).remove();});&quot;,              &quot;&lt;\/script&gt;&quot;            ].join();            # asyncSettings.addModalFormFunction            function updateBookModalForm() {              $(&quot;.update-book&quot;).each(function () {                $(this).modalForm({                  formURL: $(this).data(&quot;form-url&quot;),                  asyncUpdate: true,                  asyncSettings: {                    closeOnSubmit: false,                    successMessage: asyncSuccessMessage                    dataUrl: &quot;books/&quot;,                    dataElementId: &quot;#books-table&quot;,                    dataKey: &quot;table&quot;,                    addModalFormFunction: updateBookModalForm                  }                });              });            }            updateBookModalForm();                    ...        });    &lt;/script&gt;.. code-block:: python    urls.py    from django.urls import path    from . import views    urlpatterns = [        ...        # asyncSettings.dataUrl        path('books/', views.books, name='books'),        ...    ].. code-block:: python    views.py    from django.http import JsonResponse    from django.template.loader import render_to_string    from .models import Book    def books(request):        data = dict()        if request.method == 'GET':            books = Book.objects.all()            # asyncSettings.dataKey = 'table'            data['table'] = render_to_string(                 '_books_table.html',                {'books': books},                request=request            )            return JsonResponse(data)modalForm options=================modalID  Sets the custom id of the modal. ``Default: &quot;#modal&quot;``modalContent  Sets the custom class of the element to which the form's html is appended. If you change ``modalContent`` to the custom class, you should also change ``modalForm`` accordingly. To keep Bootstrap's modal style you should than copy Bootstrap's style for ``modal-content`` and set it to your new modalContent class. ``Default: &quot;.modal-content&quot;``modalForm  Sets the custom form selector. ``Default: &quot;.modal-content form&quot;``formURL  Sets the url of the form's view and html. ``Default: null``isDeleteForm  Defines if form is used for deletion. Should be set to ``true`` for deletion forms.  ``Default: false``errorClass  Sets the custom class for the form fields having errors. ``Default: &quot;.invalid&quot;``asyncUpdate  Sets asynchronous content update after form submission. ``Default: false``asyncSettings.closeOnSubmit  Sets whether modal closes or not after form submission. ``Default: false``asyncSettings.successMessage  Sets successMessage shown after succesful for submission. Should be set to string defining message element. See ``asyncSuccessMessage`` example above. ``Default: null``asyncSettings.dataUrl  Sets url of the view returning new queryset = all of the objects plus newly created or updated one after asynchronous update. ``Default: null``asyncSettings.dataElementId  Sets the ``id`` of the element which rerenders asynchronously updated queryset. ``Default: null``asyncSettings.dataKey  Sets the key containing asynchronously updated queryset in the data dictionary returned from the view providing updated queryset. ``Default: null``asyncSettings.addModalFormFunction  Sets the method needed for reinstantiation of event listeners on buttons (single or all CRUD buttons) after asynchronous update. ``Default: null``modalForm default settings object and it's structure****************************************************.. code-block:: html      triggerElement.modalForm({        modalID: &quot;#modal&quot;,        modalContent: &quot;.modal-content&quot;,        modalForm: &quot;.modal-content form&quot;,        formURL: null,        isDeleteForm: false,        errorClass: &quot;.invalid&quot;,        asyncUpdate: false,        asyncSettings: {            closeOnSubmit: false,            successMessage: null,            dataUrl: null,            dataElementId: null,            dataKey: null,            addModalFormFunction: null        }    });Forms=====Import forms with ``from bootstrap_modal_forms.forms import BSModalForm``.BSModalForm    Inherits PopRequestMixin and Django's forms.Form.BSModalModelForm    Inherits PopRequestMixin, CreateUpdateAjaxMixin and Django's forms.ModelForm.Mixins======Import mixins with ``from bootstrap_modal_forms.mixins import PassRequestMixin``.PassRequestMixin    Puts the request into the form's kwargs.PopRequestMixin    Pops request out of the kwargs and attaches it to the form's instance.CreateUpdateAjaxMixin    Saves or doesn't save the object based on the request type.DeleteMessageMixin    Deletes object if request is not ajax request.LoginAjaxMixin    Authenticates user if request is not ajax request.Generic views=============Import generic views with ``from bootstrap_modal_forms.generic import BSModalFormView``.BSModalFormView    Inherits PassRequestMixin and Django's generic.FormView.BSModalCreateView    Inherits PassRequestMixin and Django's SuccessMessageMixin and generic.CreateView.BSModalUpdateView    Inherits PassRequestMixin and Django's SuccessMessageMixin and generic.UpdateView.BSModalReadView    Inherits Django's generic.DetailView.BSModalDeleteView    Inherits DeleteMessageMixin and Django's generic.DeleteView.Examples========To see ``django-bootstrap-modal-forms`` in action clone the repository and run the examples locally::    $ git clone https://github.com/trco/django-bootstrap-modal-forms.git    $ cd django-bootstrap-modal-forms    $ pip install -r requirements.txt    $ python manage.py migrate    $ python manage.py runserverTests=====Run unit and functional tests inside of project folder::    $ python manage.py testExample 1: Signup form in Bootstrap modal*****************************************For explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**... code-block:: python    forms.py    from django.contrib.auth.forms import UserCreationForm    from django.contrib.auth.models import User    from bootstrap_modal_forms.mixins import PopRequestMixin, CreateUpdateAjaxMixin    class CustomUserCreationForm(PopRequestMixin, CreateUpdateAjaxMixin,                                 UserCreationForm):        class Meta:            model = User            fields = ['username', 'password1', 'password2'].. code-block:: html    signup.html    {% load widget_tweaks %}    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;      {% csrf_token %}      &lt;div class=&quot;modal-header&quot;&gt;        &lt;h3 class=&quot;modal-title&quot;&gt;Sign up&lt;/h3&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;        &lt;/button&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        &lt;div class=&quot;{% if form.non_field_errors %}invalid{% endif %} mb-2&quot;&gt;          {% for error in form.non_field_errors %}            {{ error }}          {% endfor %}        &lt;/div&gt;        {% for field in form %}          &lt;div class=&quot;form-group&quot;&gt;            &lt;label for=&quot;{{ field.id_for_label }}&quot;&gt;{{ field.label }}&lt;/label&gt;            {% render_field field class=&quot;form-control&quot; placeholder=field.label %}            &lt;div class=&quot;{% if field.errors %} invalid{% endif %}&quot;&gt;              {% for error in field.errors %}                &lt;p class=&quot;help-block&quot;&gt;{{ error }}&lt;/p&gt;              {% endfor %}            &lt;/div&gt;          &lt;/div&gt;        {% endfor %}      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Sign up&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;.. code-block:: python    views.py    from django.urls import reverse_lazy    from bootstrap_modal_forms.generic import BSModalCreateView    from .forms import CustomUserCreationForm    class SignUpView(BSModalCreateView):        form_class = CustomUserCreationForm        template_name = 'examples/signup.html'        success_message = 'Success: Sign up succeeded. You can now Log in.'        success_url = reverse_lazy('index').. code-block:: python    urls.py    from django.urls import path    from . import views    app_name = 'accounts'    urlpatterns = [        path('signup/', views.SignUpView.as_view(), name='signup')    ].. code-block:: html    .html file containing modal, trigger element and script instantiating modalForm    &lt;div class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; id=&quot;modal&quot;&gt;      &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;        &lt;div class=&quot;modal-content&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;button id=&quot;signup-btn&quot; class=&quot;btn btn-primary&quot; type=&quot;button&quot; name=&quot;button&quot;&gt;Sign up&lt;/button&gt;    &lt;script type=&quot;text/javascript&quot;&gt;      $(function () {        // Sign up button        $(&quot;#signup-btn&quot;).modalForm({            formURL: &quot;{% url 'signup' %}&quot;        });      });    &lt;/script&gt;Example 2: Login form in Bootstrap modal****************************************For explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**.You can set the login redirection by setting the ``LOGIN_REDIRECT_URL`` in ``settings.py``.You can also set the custom login redirection by:1. Adding ``success_url`` to the ``extra_context`` of ``CustomLoginView``2. Setting this ``success_url`` variable as a value of the ``hidden input field`` with ``name=&quot;next&quot;`` within the Login form html.. code-block:: python    forms.py    from django.contrib.auth.forms import AuthenticationForm    from django.contrib.auth.models import User    class CustomAuthenticationForm(AuthenticationForm):        class Meta:            model = User            fields = ['username', 'password'].. code-block:: html    login.html    {% load widget_tweaks %}    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;      {% csrf_token %}      &lt;div class=&quot;modal-header&quot;&gt;        &lt;h3 class=&quot;modal-title&quot;&gt;Log in&lt;/h3&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;        &lt;/button&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        &lt;div class=&quot;{% if form.non_field_errors %}invalid{% endif %} mb-2&quot;&gt;          {% for error in form.non_field_errors %}            {{ error }}          {% endfor %}        &lt;/div&gt;        {% for field in form %}          &lt;div class=&quot;form-group&quot;&gt;            &lt;label for=&quot;{{ field.id_for_label }}&quot;&gt;{{ field.label }}&lt;/label&gt;            {% render_field field class=&quot;form-control&quot; placeholder=field.label %}            &lt;div class=&quot;{% if field.errors %} invalid{% endif %}&quot;&gt;              {% for error in field.errors %}                &lt;p class=&quot;help-block&quot;&gt;{{ error }}&lt;/p&gt;              {% endfor %}            &lt;/div&gt;          &lt;/div&gt;        {% endfor %}        &lt;!-- Hidden input field for custom redirection after successful login --&gt;        &lt;input type=&quot;hidden&quot; name=&quot;next&quot; value=&quot;{{ success_url }}&quot;&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Log in&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;.. code-block:: python    views.py    from django.urls import reverse_lazy    from bootstrap_modal_forms.generic import BSModalLoginView    from .forms import CustomAuthenticationForm    class CustomLoginView(BSModalLoginView):        authentication_form = CustomAuthenticationForm        template_name = 'examples/login.html'        success_message = 'Success: You were successfully logged in.'        extra_context = dict(success_url=reverse_lazy('index')).. code-block:: python    urls.py    from django.urls import path    from . import views    app_name = 'accounts'    urlpatterns = [        path('login/', views.CustomLoginView.as_view(), name='login')    ].. code-block:: html    .html file containing modal, trigger element and script instantiating modalForm    &lt;div class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; id=&quot;modal&quot;&gt;      &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;        &lt;div class=&quot;modal-content&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;button id=&quot;login-btn&quot; class=&quot;btn btn-primary&quot; type=&quot;button&quot; name=&quot;button&quot;&gt;Sign up&lt;/button&gt;    &lt;script type=&quot;text/javascript&quot;&gt;      $(function () {        // Log in button        $(&quot;#login-btn&quot;).modalForm({            formURL: &quot;{% url 'login' %}&quot;        });      });    &lt;/script&gt;Example 3: Django's forms.ModelForm (CRUD forms) in Bootstrap modal*******************************************************************For explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**... code-block:: python    forms.py    from .models import Book    from bootstrap_modal_forms.forms import BSModalModelForm    class BookModelForm(BSModalModelForm):        class Meta:            model = Book            exclude = ['timestamp'].. code-block:: html    create_book.html    {% load widget_tweaks %}    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;      {% csrf_token %}      &lt;div class=&quot;modal-header&quot;&gt;        &lt;h3 class=&quot;modal-title&quot;&gt;Create Book&lt;/h3&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;        &lt;/button&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        &lt;div class=&quot;{% if form.non_field_errors %}invalid{% endif %} mb-2&quot;&gt;          {% for error in form.non_field_errors %}            {{ error }}          {% endfor %}        &lt;/div&gt;        {% for field in form %}          &lt;div class=&quot;form-group&quot;&gt;            &lt;label for=&quot;{{ field.id_for_label }}&quot;&gt;{{ field.label }}&lt;/label&gt;            {% render_field field class=&quot;form-control&quot; placeholder=field.label %}            &lt;div class=&quot;{% if field.errors %} invalid{% endif %}&quot;&gt;              {% for error in field.errors %}                &lt;p class=&quot;help-block&quot;&gt;{{ error }}&lt;/p&gt;              {% endfor %}            &lt;/div&gt;          &lt;/div&gt;        {% endfor %}      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Create&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;.. code-block:: html    update_book.html    {% load widget_tweaks %}    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;      {% csrf_token %}      &lt;div class=&quot;modal-header&quot;&gt;        &lt;h3 class=&quot;modal-title&quot;&gt;Update Book&lt;/h3&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;        &lt;/button&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        &lt;div class=&quot;{% if form.non_field_errors %}invalid{% endif %} mb-2&quot;&gt;          {% for error in form.non_field_errors %}            {{ error }}          {% endfor %}        &lt;/div&gt;        {% for field in form %}          &lt;div class=&quot;form-group&quot;&gt;            &lt;label for=&quot;{{ field.id_for_label }}&quot;&gt;{{ field.label }}&lt;/label&gt;            {% render_field field class=&quot;form-control&quot; placeholder=field.label %}            &lt;div class=&quot;{% if field.errors %} invalid{% endif %}&quot;&gt;              {% for error in field.errors %}                &lt;p class=&quot;help-block&quot;&gt;{{ error }}&lt;/p&gt;              {% endfor %}            &lt;/div&gt;          &lt;/div&gt;        {% endfor %}      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Update&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;.. code-block:: html    read_book.html    {% load widget_tweaks %}    &lt;div class=&quot;modal-header&quot;&gt;      &lt;h3 class=&quot;modal-title&quot;&gt;Book details&lt;/h3&gt;      &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;        &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;      &lt;/button&gt;    &lt;/div&gt;    &lt;div class=&quot;modal-body&quot;&gt;      &lt;div class=&quot;&quot;&gt;        Title: {{ book.title }}      &lt;/div&gt;      &lt;div class=&quot;&quot;&gt;        Author: {{ book.author }}      &lt;/div&gt;      &lt;div class=&quot;&quot;&gt;        Price: {{ book.price }} €      &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;modal-footer&quot;&gt;      &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;    &lt;/div&gt;.. code-block:: html    {% load widget_tweaks %}    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;      {% csrf_token %}      &lt;div class=&quot;modal-header&quot;&gt;        &lt;h3 class=&quot;modal-title&quot;&gt;Delete Book&lt;/h3&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;        &lt;/button&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        &lt;p&gt;Are you sure you want to delete book with title          &lt;strong&gt;{{ book.title }}&lt;/strong&gt;?&lt;/p&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Delete&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;.. code-block:: python    views.py    from django.urls import reverse_lazy    from django.views import generic    from .forms import BookModelForm    from .models import Book    from bootstrap_modal_forms.generic import (      BSModalCreateView,      BSModalUpdateView,      BSModalReadView,      BSModalDeleteView    )    class Index(generic.ListView):        model = Book        context_object_name = 'books'        template_name = 'index.html'    # Create    class BookCreateView(BSModalCreateView):        template_name = 'examples/create_book.html'        form_class = BookModelForm        success_message = 'Success: Book was created.'        success_url = reverse_lazy('index')    # Update    class BookUpdateView(BSModalUpdateView):        model = Book        template_name = 'examples/update_book.html'        form_class = BookModelForm        success_message = 'Success: Book was updated.'        success_url = reverse_lazy('index')    # Read    class BookReadView(BSModalReadView):        model = Book        template_name = 'examples/read_book.html'    # Delete    class BookDeleteView(BSModalDeleteView):        model = Book        template_name = 'examples/delete_book.html'        success_message = 'Success: Book was deleted.'        success_url = reverse_lazy('index').. code-block:: python    urls.py    from django.urls import path    from books import views    urlpatterns = [        path('', views.Index.as_view(), name='index'),        path('create/', views.BookCreateView.as_view(), name='create_book'),        path('update/&lt;int:pk&gt;', views.BookUpdateView.as_view(), name='update_book'),        path('read/&lt;int:pk&gt;', views.BookReadView.as_view(), name='read_book'),        path('delete/&lt;int:pk&gt;', views.BookDeleteView.as_view(), name='delete_book')    ].. code-block:: html    .html file containing modal, trigger elements and script instantiating modalForms    &lt;!-- Modal 1 with id=&quot;create-book&quot;--&gt;    &lt;div class=&quot;modal fade&quot; id=&quot;create-modal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-hidden=&quot;true&quot;&gt;      &lt;div class=&quot;modal-dialog&quot;&gt;        &lt;div class=&quot;modal-content&quot;&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;!-- Modal 2 with id=&quot;modal&quot; --&gt;    &lt;div class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; id=&quot;modal&quot;&gt;      &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;        &lt;div class=&quot;modal-content&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;!-- Create book button --&gt;    &lt;button id=&quot;create-book&quot; class=&quot;btn btn-primary&quot; type=&quot;button&quot; name=&quot;button&quot;&gt;Create book&lt;/button&gt;    {% for book in books %}        &lt;div class=&quot;text-center&quot;&gt;          &lt;!-- Read book buttons --&gt;          &lt;button type=&quot;button&quot; class=&quot;read-book bs-modal btn btn-sm btn-primary&quot; data-form-url=&quot;{% url 'read_book' book.pk %}&quot;&gt;            &lt;span class=&quot;fa fa-eye&quot;&gt;&lt;/span&gt;          &lt;/button&gt;          &lt;!-- Update book buttons --&gt;          &lt;button type=&quot;button&quot; class=&quot;update-book bs-modal btn btn-sm btn-primary&quot; data-form-url=&quot;{% url 'update_book' book.pk %}&quot;&gt;            &lt;span class=&quot;fa fa-pencil&quot;&gt;&lt;/span&gt;          &lt;/button&gt;          &lt;!-- Delete book buttons --&gt;          &lt;button type=&quot;button&quot; class=&quot;delete-book bs-modal btn btn-sm btn-danger&quot; data-form-url=&quot;{% url 'delete_book' book.pk %}&quot;&gt;            &lt;span class=&quot;fa fa-trash&quot;&gt;&lt;/span&gt;          &lt;/button&gt;        &lt;/div&gt;    {% endfor %}    &lt;script type=&quot;text/javascript&quot;&gt;      $(function () {        // Read book buttons        $(&quot;.read-book&quot;).each(function () {            $(this).modalForm({formURL: $(this).data(&quot;form-url&quot;)});        });        // Delete book buttons - formURL is retrieved from the data of the element        $(&quot;.delete-book&quot;).each(function () {            $(this).modalForm({formURL: $(this).data(&quot;form-url&quot;), isDeleteForm: true});        });        // Create book button opens form in modal with id=&quot;create-modal&quot;        $(&quot;#create-book&quot;).modalForm({            formURL: &quot;{% url 'create_book' %}&quot;,            modalID: &quot;#create-modal&quot;        });      });    &lt;/script&gt;- See the difference between button triggering Create action and buttons triggering Read, Update and Delete actions.- Within the for loop in .html file the ``data-form-url`` attribute of each Update, Read and Delete button should be set to relevant URL with pk argument of the object to be updated, read or deleted.- These ``data-form-url`` URLs should than be set as ``formURLs`` for ``modalForms`` bound to the buttons.Example 4: Django's forms.Form in Bootstrap modal*************************************************For explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**... code-block:: python    forms.py    from bootstrap_modal_forms.forms import BSModalForm    class BookFilterForm(BSModalForm):        type = forms.ChoiceField(choices=Book.BOOK_TYPES)        class Meta:            fields = ['type'].. code-block:: html    filter_book.html    {% load widget_tweaks %}    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;      {% csrf_token %}      &lt;div class=&quot;modal-header&quot;&gt;        &lt;h3 class=&quot;modal-title&quot;&gt;Filter Books&lt;/h3&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;        &lt;/button&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        &lt;div class=&quot;{% if form.non_field_errors %}invalid{% endif %} mb-2&quot;&gt;          {% for error in form.non_field_errors %}            {{ error }}          {% endfor %}        &lt;/div&gt;        {% for field in form %}          &lt;div class=&quot;form-group&quot;&gt;            &lt;label for=&quot;{{ field.id_for_label }}&quot;&gt;{{ field.label }}&lt;/label&gt;            {% render_field field class=&quot;form-control&quot; placeholder=field.label %}            &lt;div class=&quot;{% if field.errors %} invalid{% endif %}&quot;&gt;              {% for error in field.errors %}                &lt;p class=&quot;help-block&quot;&gt;{{ error }}&lt;/p&gt;              {% endfor %}            &lt;/div&gt;          &lt;/div&gt;        {% endfor %}      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Filter&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;.. code-block:: python    views.py    class BookFilterView(BSModalFormView):        template_name = 'examples/filter_book.html'        form_class = BookFilterForm        def form_valid(self, form):            self.filter = '?type=' + form.cleaned_data['type']            response = super().form_valid(form)            return response        def get_success_url(self):            return reverse_lazy('index') + self.filter.. code-block:: python    urls.py    from django.urls import path    from . import views    app_name = 'accounts'    urlpatterns = [        path('filter/', views.BookFilterView.as_view(), name='filter_book'),    ].. code-block:: html    index.html            ...      &lt;button id=&quot;filter-book&quot; class=&quot;filter-book btn btn-primary&quot; type=&quot;button&quot; name=&quot;button&quot; data-form-url=&quot;{% url 'filter_book' %}&quot;&gt;        &lt;span class=&quot;fa fa-filter mr-2&quot;&gt;&lt;/span&gt;Filter books      &lt;/button&gt;      ...      &lt;script type=&quot;text/javascript&quot;&gt;        $(function () {          ...          $(&quot;#filter-book&quot;).each(function () {              $(this).modalForm({formURL: $(this).data('form-url')});          });          ...        });      &lt;/script&gt;Contribute==========This is an Open Source project and any contribution is appreciated.License=======This project is licensed under the MIT License.</longdescription>
</pkgmetadata>