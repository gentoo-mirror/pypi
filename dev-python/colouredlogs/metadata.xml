<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>colouredlogs: Coloured terminal output for Python's logging module==================================================================NOTE: This is a parody of the great `python-colouredlogs`_ projectby Peter Odding. Please use that package as I currently have noplans to maintain this one. All I've done is `s/color/colour/g`... _`python-colouredlogs`: https://github.com/xolox/python-coloredlogsThe `colouredlogs` package enables coloured terminal output for Python's logging_module. The ColouredFormatter_ class inherits from `logging.Formatter`_ and uses`ANSI escape sequences`_ to render your logging messages in colour. It uses onlystandard colours so it should work on any UNIX terminal. It's currently testedon Python 2.6, 2.7, 3.4, 3.5, 3.6 and PyPy. On Windows `colouredlogs`automatically pulls in Colourama_ as a dependency and enables ANSI escapesequence translation using Colourama. Here is a screen shot of the demo that isprinted when the command ``colouredlogs --demo`` is executed:.. image:: https://colouredlogs.readthedocs.io/en/latest/_images/defaults.pngNote that the screenshot above includes custom logging levels defined by myverboselogs_ package: if you install both `colouredlogs` and `verboselogs` itwill Just Work (`verboselogs` is of course not required to use`colouredlogs`)... contents::   :local:Installation------------The `colouredlogs` package is available on PyPI_ which means installation shouldbe as simple as:.. code-block:: sh   $ pip install colouredlogsThere's actually a multitude of ways to install Python packages (e.g. the `peruser site-packages directory`_, `virtual environments`_ or just installingsystem wide) and I have no intention of getting into that discussion here, soif this intimidates you then read up on your options before returning to theseinstructions ;-).Usage-----Here's an example of how easy it is to get started:.. code-block:: python   import colouredlogs, logging   # Create a logger object.   logger = logging.getLogger(__name__)   # By default the install() function installs a handler on the root logger,   # this means that log messages from your code and log messages from the   # libraries that you use will all show up on the terminal.   colouredlogs.install(level='DEBUG')   # If you don't want to see log messages from libraries, you can pass a   # specific logger object to the install() function. In this case only log   # messages originating from that logger will show up on the terminal.   colouredlogs.install(level='DEBUG', logger=logger)   # Some examples.   logger.debug(&quot;this is a debugging message&quot;)   logger.info(&quot;this is an informational message&quot;)   logger.warning(&quot;this is a warning message&quot;)   logger.error(&quot;this is an error message&quot;)   logger.critical(&quot;this is a critical message&quot;)Format of log messages----------------------The ColouredFormatter_ class supports user defined log formats so you can useany log format you like. The default log format is as follows:: %(asctime)s %(hostname)s %(name)s[%(process)d] %(levelname)s %(message)sThis log format results in the following output:: 2015-10-23 03:32:22 peter-macbook colouredlogs.demo[30462] DEBUG message with level 'debug' 2015-10-23 03:32:23 peter-macbook colouredlogs.demo[30462] VERBOSE message with level 'verbose' 2015-10-23 03:32:24 peter-macbook colouredlogs.demo[30462] INFO message with level 'info' ...You can customize the log format and styling using environment variables aswell as programmatically, please refer to the `online documentation`_ fordetails.Enabling millisecond precision~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If you're switching from `logging.basicConfig()`_ to `colouredlogs.install()`_you may notice that timestamps no longer include milliseconds. This is becausecolouredlogs doesn't output milliseconds in timestamps unless you explicitlytell it to. There are three ways to do that:1. The easy way is to pass the `milliseconds` argument to `colouredlogs.install()`_::    colouredlogs.install(milliseconds=True)   This became supported in `release 7.1`_ (due to `#16`_).2. Alternatively you can change the log format `to include 'msecs'`_::    %(asctime)s,%(msecs)03d %(hostname)s %(name)s[%(process)d] %(levelname)s %(message)s   Here's what the call to `colouredlogs.install()`_ would then look like::    colouredlogs.install(fmt='%(asctime)s,%(msecs)03d %(hostname)s %(name)s[%(process)d] %(levelname)s %(message)s')   Customizing the log format also enables you to change the delimiter that   separates seconds from milliseconds (the comma above). This became possible   in `release 3.0`_ which added support for user defined log formats.3. If the use of ``%(msecs)d`` isn't flexible enough you can instead add ``%f``   to the date/time format, it will be replaced by the value of ``%(msecs)03d``.   Support for the ``%f`` directive was added to `release 9.3`_ (due to `#45`_).Changing text styles and colours--------------------------------The online documentation contains `an example of customizing the text styles andcolours &lt;https://colouredlogs.readthedocs.io/en/latest/#changing-the-colours-styles&gt;`_.Coloured output from cron-------------------------When `colouredlogs` is used in a cron_ job, the output that's e-mailed to you bycron won't contain any ANSI escape sequences because `colouredlogs` realizesthat it's not attached to an interactive terminal. If you'd like to have colourse-mailed to you by cron there are two ways to make it happen:.. contents::   :local:Modifying your crontab~~~~~~~~~~~~~~~~~~~~~~Here's an example of a minimal crontab::    MAILTO=&quot;your-email-address@here&quot;    CONTENT_TYPE=&quot;text/html&quot;    * * * * * root colouredlogs --to-html your-commandThe ``colouredlogs`` program is installed when you install the `colouredlogs`Python package. When you execute ``colouredlogs --to-html your-command`` it runs``your-command`` under the external program ``script`` (you need to have thisinstalled). This makes ``your-command`` think that it's attached to aninteractive terminal which means it will output ANSI escape sequences whichwill then be converted to HTML by the ``colouredlogs`` program. Yes, this is abit convoluted, but it works great :-)Modifying your Python code~~~~~~~~~~~~~~~~~~~~~~~~~~The ColouredCronMailer_ class provides a context manager that automaticallyenables HTML output when the ``$CONTENT_TYPE`` variable has been correctly setin the crontab.This requires my capturer_ package which you can install using ``pip install'colouredlogs[cron]'``. The ``[cron]`` extra will pull in capturer_ 2.4 or newerwhich is required to capture the output while silencing it - otherwise you'dget duplicate output in the emails sent by ``cron``.The context manager can also be used to retroactively silence output that hasalready been produced, this can be useful to avoid spammy cron jobs that havenothing useful to do but still email their output to the system administratorevery few minutes :-).Contact-------The latest version of `colouredlogs` is available on PyPI_ and GitHub_. The`online documentation`_ is available on Read The Docs and includes achangelog_. For bug reports please create an issue on GitHub_. If you havequestions, suggestions, etc. feel free to send me an e-mail at`peter@peterodding.com`_.License-------This software is licensed under the `MIT license`_.Â© 2018 Peter Odding... External references:.. _#16: https://github.com/xolox/python-coloredlogs/issues/16.. _#45: https://github.com/xolox/python-coloredlogs/issues/45.. _ANSI escape sequences: https://en.wikipedia.org/wiki/ANSI_escape_code#Colors.. _capturer: https://pypi.python.org/pypi/capturer.. _changelog: https://colouredlogs.readthedocs.org/en/latest/changelog.html.. _Colourama: https://pypi.python.org/pypi/colorama.. _ColouredCronMailer: https://colouredlogs.readthedocs.io/en/latest/api.html#colouredlogs.converter.ColouredCronMailer.. _ColouredFormatter: https://colouredlogs.readthedocs.io/en/latest/api.html#colouredlogs.ColouredFormatter.. _colouredlogs.install(): https://colouredlogs.readthedocs.io/en/latest/api.html#colouredlogs.install.. _cron: https://en.wikipedia.org/wiki/Cron.. _GitHub: https://github.com/kyle-verhoog/python-colouredlogs.. _logging.basicConfig(): https://docs.python.org/2/library/logging.html#logging.basicConfig.. _logging.Formatter: https://docs.python.org/2/library/logging.html#logging.Formatter.. _logging: https://docs.python.org/2/library/logging.html.. _MIT license: https://en.wikipedia.org/wiki/MIT_License.. _online documentation: https://colouredlogs.readthedocs.io/.. _per user site-packages directory: https://www.python.org/dev/peps/pep-0370/.. _peter@peterodding.com: peter@peterodding.com.. _PyPI: https://pypi.python.org/pypi/colouredlogs.. _release 3.0: https://colouredlogs.readthedocs.io/en/latest/changelog.html#release-3-0-2015-10-23.. _release 7.1: https://colouredlogs.readthedocs.io/en/latest/changelog.html#release-7-1-2017-07-15.. _release 9.3: https://colouredlogs.readthedocs.io/en/latest/changelog.html#release-9-3-2018-04-29.. _to include 'msecs': https://stackoverflow.com/questions/6290739/python-logging-use-milliseconds-in-time-format.. _verboselogs: https://pypi.python.org/pypi/verboselogs.. _virtual environments: http://docs.python-guide.org/en/latest/dev/virtualenvs/</longdescription>
</pkgmetadata>