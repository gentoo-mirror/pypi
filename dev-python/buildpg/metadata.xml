<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># buildpg[![CI](https://github.com/samuelcolvin/buildpg/workflows/ci/badge.svg?event=push)](https://github.com/samuelcolvin/buildpg/actions?query=event%3Apush+branch%3Amaster+workflow%3Aci)[![Coverage](https://codecov.io/gh/samuelcolvin/buildpg/branch/master/graph/badge.svg)](https://codecov.io/gh/samuelcolvin/buildpg)[![pypi](https://img.shields.io/pypi/v/buildpg.svg)](https://pypi.python.org/pypi/buildpg)[![versions](https://img.shields.io/pypi/pyversions/buildpg.svg)](https://github.com/samuelcolvin/buildpg)[![license](https://img.shields.io/github/license/samuelcolvin/buildpg.svg)](https://github.com/samuelcolvin/buildpg/blob/master/LICENSE)Query building for the postgresql prepared statements and asyncpg.Lots of more powerful features, including full clause construction, multiple values, logic functions,query pretty-printing and different variable substitution - below is just a very quick summary.Please check the code and tests for examples.## Building QueriesSimple variable substitution:```pyfrom buildpg import renderrender('select * from mytable where x=:foo and y=:bar', foo=123, bar='whatever')&gt;&gt; 'select * from mytable where x=$1 and y=$2', [123, 'whatever']```Use of `V` to substitute constants:```pyfrom buildpg import V, renderrender('select * from mytable where :col=:foo', col=V('x'), foo=456)&gt;&gt; 'select * from mytable where x=$1', [456]```Complex logic:```pyfrom buildpg import V, funcs, renderwhere_logic = V('foo.bar') == 123if spam_value:   where_logic &amp;= V('foo.spam') &lt;= spam_valueif exclude_cake:   where_logic &amp;= funcs.not_(V('foo.cake').in_([1, 2, 3]))render('select * from foo :where', where=where_logic)&gt;&gt; 'select * from foo foo.bar = $1 AND foo.spam &lt;= $2 AND not(foo.cake in $3)', [123, 123, ['x', 'y']]```Values usage:```pyfrom buildpg import Values, renderrender('insert into the_table (:values__names) values :values', values=Values(a=123, b=456, c='hello'))&gt;&gt; 'insert into the_table (a, b, c) values ($1, $2, $3)', [123, 456, 'hello']```## With asyncpgAs a wrapper around *asyncpg*:```pyimport asynciofrom buildpg import asyncpgasync def main():   async with asyncpg.create_pool_b('postgres://postgres@localhost:5432/db') as pool:       await pool.fetchval_b('select spam from mytable where x=:foo and y=:bar', foo=123, bar='whatever')       &gt;&gt; 42asyncio.run(main())```Both the pool and connections have `*_b` variants of all common query methods:- `execute_b`- `executemany_b`- `fetch_b`- `fetchval_b`- `fetchrow_b`- `cursor_b`## Operators| Python operator/function | SQL operator || ------------------------ | ------------ || `&amp;`                      | `AND` || `|`                      | `OR` || `=`                      | `=` || `!=`                     | `!=` || `&lt;`                      | `&lt;` || `&lt;=`                     | `&lt;=` || `&gt;`                      | `&gt;` || `&gt;=`                     | `&gt;=` || `+`                      | `+` || `-`                      | `-` || `*`                      | `*` || `/`                      | `/` || `%`                      | `%` || `**`                     | `^` || `-`                      | `-` || `~`                      | `not(...)` || `sqrt`                   | `|/` || `abs`                    | `@` || `contains`               | `@&gt;` || `contained_by`           | `&lt;@` || `overlap`                | `&amp;&amp;` || `like`                   | `LIKE` || `ilike`                  | `ILIKE` || `cat`                    | `||` || `in_`                    | `in` || `from_`                  | `from` || `at_time_zone`           | `AT TIME ZONE` || `matches`                | `@@` || `is_`                    | `is` || `is_not`                 | `is not` || `for_`                   | `for` || `factorial`              | `!` || `cast`                   | `::` || `asc`                    | `ASC` || `desc`                   | `DESC` || `comma`                  | `,` || `on`                     | `ON` || `as_`                    | `AS` || `nulls_first`            | `NULLS FIRST` || `nulls_last`             | `NULLS LAST` |Usage:```pyfrom buildpg import V, S, renderdef show(component):   sql, params = render(':c', c=component)   print(f'sql=&quot;{sql}&quot; params={params}')show(V('foobar').contains([1, 2, 3]))#&gt; sql=&quot;foobar @&gt; $1&quot; params=[[1, 2, 3]]show(V('foobar') == 4)#&gt; sql=&quot;foobar = $1&quot; params=[4]show(~V('foobar'))#&gt; sql=&quot;not(foobar)&quot; params=[]show(S(625).sqrt())#&gt; sql=&quot;|/ $1&quot; params=[625]show(V('foo').is_not('true'))#&gt; sql=&quot;foo is not true&quot; params=[]```## Functions| Python function                             | SQL function  || ------------------------------------------- | ------------- || `AND(*args)`                                | `&lt;arg1&gt; and &lt;arg2&gt; ...` || `OR(*args)`                                 | `&lt;arg1&gt; or &lt;arg2&gt; ...` || `NOT(arg)`                                  | `not(&lt;arg&gt;)` || `comma_sep(*args)`                          | `&lt;arg1&gt;, &lt;arg2&gt;, ...` || `count(expr)`                               | `count(expr)` || `any(arg)`                                  | `any(&lt;arg1&gt;)` || `now()`                                     | `now()` || `cast(v, cast_type)`                        | `&lt;v&gt;::&lt;cast_type&gt;` || `upper(string)`                             | `upper(&lt;string&gt;)` || `lower(string)`                             | `lower(&lt;string&gt;)` || `length(string)`                            | `length(&lt;string&gt;)` || `left(string, n)`                           | `left(&lt;string&gt;, &lt;n&gt;)` || `right(string, n)`                          | `right(&lt;string&gt;, &lt;n&gt;)` || `extract(expr)`                             | `extract(&lt;expr&gt;)` || `sqrt(n)`                                   | `|/&lt;n&gt;` || `abs(n)`                                    | `@&lt;n&gt;` || `factorial(n)`                              | `!&lt;n&gt;` || `position(substring, string)`               | `position(&lt;substring&gt; in &lt;st`... || `substring(string, pattern, escape-None)`   | `substring(&lt;string&gt; from &lt;pa`... || `to_tsvector(arg1, document-None)`          | `to_tsvector(&lt;arg1&gt;)` || `to_tsquery(arg1, text-None)`               | `to_tsquery(&lt;arg1&gt;)` |Usage:```pyfrom buildpg import V, render, funcsdef show(component):  sql, params = render(':c', c=component)  print(f'sql=&quot;{sql}&quot; params={params}')show(funcs.AND(V('x') == 4, V('y') &gt; 6))#&gt; sql=&quot;x = $1 AND y &gt; $2&quot; params=[4, 6]show(funcs.position('foo', 'this has foo in it'))#&gt; sql=&quot;position($1 in $2)&quot; params=['foo', 'this has foo in it']```</longdescription>
</pkgmetadata>