<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================The ReactiveX for Python (RxPY)===============================.. image:: https://github.com/ReactiveX/RxPY/workflows/Python%20package/badge.svg    :target: https://github.com/ReactiveX/RxPY/actions    :alt: Build Status.. image:: https://img.shields.io/coveralls/ReactiveX/RxPY.svg    :target: https://coveralls.io/github/ReactiveX/RxPY    :alt: Coverage Status.. image:: https://img.shields.io/pypi/v/reactivex.svg    :target: https://pypi.org/project/reactivex/    :alt: PyPY Package Version.. image:: https://img.shields.io/readthedocs/rxpy.svg    :target: https://readthedocs.org/projects/rxpy/builds/    :alt: Documentation Status*A library for composing asynchronous and event-based programs using observablecollections and query operator functions in Python*ReactiveX for Python v4-----------------------For v3.X please go to the `v3 branch&lt;https://github.com/ReactiveX/RxPY/tree/release/v3.2.x&gt;`_.ReactiveX for Python v4.x runs on `Python &lt;http://www.python.org/&gt;`_ 3.7 or above. Toinstall:.. code:: console    pip3 install reactivexAbout ReactiveX---------------ReactiveX for Python (RxPY) is a library for composing asynchronous and event-basedprograms using observable sequences and pipable query operators in Python. Using Rx,developers represent asynchronous data streams with Observables, query asynchronous datastreams using operators, and parameterize concurrency in data/event streams usingSchedulers... code:: python    import reactivex as rx    from reactivex import operators as ops    source = rx.of(&quot;Alpha&quot;, &quot;Beta&quot;, &quot;Gamma&quot;, &quot;Delta&quot;, &quot;Epsilon&quot;)    composed = source.pipe(        ops.map(lambda s: len(s)),        ops.filter(lambda i: i &gt;= 5)    )    composed.subscribe(lambda value: print(&quot;Received {0}&quot;.format(value)))Learning ReactiveX------------------Read the `documentation&lt;https://rxpy.readthedocs.io/en/latest/&gt;`_ to learnthe principles of ReactiveX and get the complete reference of the availableoperators.If you need to migrate code from RxPY v1.x or v3.x, read the `migration&lt;https://rxpy.readthedocs.io/en/latest/migration.html&gt;`_ section.There is also a list of third party documentation available `here&lt;https://rxpy.readthedocs.io/en/latest/additional_reading.html&gt;`_.Community----------Join the conversation on GitHub `Discussions&lt;https://github.com/ReactiveX/RxPY/discussions&gt;`_! if you have any questions orsuggestions.Differences from .NET and RxJS------------------------------ReactiveX for Python is a fairly complete implementation of`Rx &lt;http://reactivex.io/&gt;`_ with more than`120 operators &lt;https://rxpy.readthedocs.io/en/latest/operators.html&gt;`_, andover `1300 passing unit-tests &lt;https://coveralls.io/github/ReactiveX/RxPY&gt;`_. RxPYis mostly a direct port of RxJS, but also borrows a bit from Rx.NET and RxJava interms of threading and blocking operators.ReactiveX for Python follows `PEP 8 &lt;http://legacy.python.org/dev/peps/pep-0008/&gt;`_, soall function and method names are ``snake_cased`` i.e lowercase with words separated byunderscores as necessary to improve readability.Thus .NET code such as:.. code:: c#    var group = source.GroupBy(i =&gt; i % 3);need to be written with an ``_`` in Python:.. code:: python    group = source.pipe(ops.group_by(lambda i: i % 3))With ReactiveX for Python you should use `named keyword arguments&lt;https://docs.python.org/3/glossary.html&gt;`_ instead of positional arguments when anoperator has multiple optional arguments. RxPY will not try to detect which argumentsyou are giving to the operator (or not).Development-----------This project is managed using `Poetry &lt;https://python-poetry.org/&gt;`_. Code is formattedusing `Black &lt;https://github.com/psf/black&gt;`_, `isort&lt;https://github.com/PyCQA/isort&gt;`_. Code is statically type checked using `pyright&lt;https://github.com/microsoft/pyright&gt;`_ and `mypy &lt;http://mypy-lang.org/&gt;`_.If you want to take advantage of the default VSCode integration, thenfirst configure Poetry to make its virtual environment in therepository:.. code:: console    poetry config virtualenvs.in-project trueAfter cloning the repository, activate the tooling:.. code:: console    poetry install    poetry run pre-commit installRun unit tests:.. code:: console    poetry run pytestRun code checks (manually):.. code:: console    poetry run pre-commit run --all-files</longdescription>
</pkgmetadata>