<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># chronus&lt;div style=&quot;text-align: center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/AndersSpringborg/chronus/main/assets/images/logo.png&quot; alt=&quot;Chronus greek god head coin isometric concept, transparent background, aspect ration 1:1&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center&quot;&gt; A energy scheduling model, build for HPC.&lt;/p&gt;&lt;div style=&quot;text-align: center;&quot;&gt;[![Build status](https://github.com/AndersSpringborg/chronus/workflows/build/badge.svg?branch=master&amp;event=push)](https://github.com/AndersSpringborg/chronus/actions?query=workflow%3Abuild)[![Python Version](https://img.shields.io/pypi/pyversions/chronus.svg)](https://pypi.org/project/chronus/)[![Dependencies Status](https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg)](https://github.com/AndersSpringborg/chronus/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aapp%2Fdependabot)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Security: bandit](https://img.shields.io/badge/security-bandit-green.svg)](https://github.com/PyCQA/bandit)[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/AndersSpringborg/chronus/blob/master/.pre-commit-config.yaml)[![Semantic Versions](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--versions-e10079.svg)](https://github.com/AndersSpringborg/chronus/releases)[![License](https://img.shields.io/github/license/AndersSpringborg/chronus)](https://github.com/AndersSpringborg/chronus/blob/master/LICENSE)![Coverage Report](assets/images/coverage.svg)&lt;/div&gt;## üìñ AboutThis is both a library and a CLI application for scheduling energy consumption. The library is build for slurm, and the CLI application is build for the end user.## üöÄ Installation```shellpython3 -m pip install chronuschronus --help# To install it with support for making modelspython3 -m pip install chronus[model]```### PoetryWant to know more about Poetry? Check [its documentation](https://python-poetry.org/docs/).&lt;details&gt;&lt;summary&gt;Details about Poetry&lt;/summary&gt;&lt;p&gt;Poetry's [commands](https://python-poetry.org/docs/cli/#commands) are very intuitive and easy to learn, like:- `poetry add numpy@latest`- `poetry run pytest`- `poetry publish --build`etc&lt;/p&gt;&lt;/details&gt;### Building and releasing your packageBuilding a new version of the application contains steps:- Bump the version of your package `poetry version &lt;version&gt;`. You can pass the new version explicitly, or a rule such as `major`, `minor`, or `patch`. For more details, refer to the [Semantic Versions](https://semver.org/) standard.- Make a commit to `GitHub`.- Create a `GitHub release`.- And... publish üôÇ `poetry publish --build`## üéØ What's nextWell, that's up to you üí™üèª. I can only recommend the packages and articles that helped me.- [`Typer`](https://github.com/tiangolo/typer) is great for creating CLI applications.- [`Rich`](https://github.com/willmcgugan/rich) makes it easy to add beautiful formatting in the terminal.- [`Pydantic`](https://github.com/samuelcolvin/pydantic/) ‚Äì data validation and settings management using Python type hinting.- [`Loguru`](https://github.com/Delgan/loguru) makes logging (stupidly) simple.- [`tqdm`](https://github.com/tqdm/tqdm) ‚Äì fast, extensible progress bar for Python and CLI.- [`IceCream`](https://github.com/gruns/icecream) is a little library for sweet and creamy debugging.- [`orjson`](https://github.com/ijl/orjson) ‚Äì ultra fast JSON parsing library.- [`Returns`](https://github.com/dry-python/returns) makes you function's output meaningful, typed, and safe!- [`Hydra`](https://github.com/facebookresearch/hydra) is a framework for elegantly configuring complex applications.- [`FastAPI`](https://github.com/tiangolo/fastapi) is a type-driven asynchronous web framework.Articles:- [Open Source Guides](https://opensource.guide/).- [A handy guide to financial support for open source](https://github.com/nayafia/lemonade-stand)- [GitHub Actions Documentation](https://help.github.com/en/actions).- Maybe you would like to add [gitmoji](https://gitmoji.carloscuesta.me/) to commit names. This is really funny. üòÑ## üöÄ Features### Development features- Supports for `Python 3.9` and higher.- [`Poetry`](https://python-poetry.org/) as the dependencies manager. See configuration in [`pyproject.toml`](https://github.com/AndersSpringborg/chronus/blob/master/pyproject.toml) and [`setup.cfg`](https://github.com/AndersSpringborg/chronus/blob/master/setup.cfg).- Automatic codestyle with [`black`](https://github.com/psf/black), [`isort`](https://github.com/timothycrosley/isort) and [`pyupgrade`](https://github.com/asottile/pyupgrade).- Ready-to-use [`pre-commit`](https://pre-commit.com/) hooks with code-formatting.- Type checks with [`mypy`](https://mypy.readthedocs.io); docstring checks with [`darglint`](https://github.com/terrencepreilly/darglint); security checks with [`safety`](https://github.com/pyupio/safety) and [`bandit`](https://github.com/PyCQA/bandit)- Testing with [`pytest`](https://docs.pytest.org/en/latest/).- Ready-to-use [`.editorconfig`](https://github.com/AndersSpringborg/chronus/blob/master/.editorconfig), [`.dockerignore`](https://github.com/AndersSpringborg/chronus/blob/master/.dockerignore), and [`.gitignore`](https://github.com/AndersSpringborg/chronus/blob/master/.gitignore). You don't have to worry about those things.## Installation```bashpip install -U chronus```or install with `Poetry````bashpoetry add chronus```Then you can run```bashchronus --help```or with `Poetry`:```bashpoetry run chronus --help```### Makefile usage[`Makefile`](https://github.com/AndersSpringborg/chronus/blob/master/Makefile) contains a lot of functions for faster development.&lt;details&gt;&lt;summary&gt;1. Download and remove Poetry&lt;/summary&gt;&lt;p&gt;To download and install Poetry run:```bashmake poetry-download```To uninstall```bashmake poetry-remove```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;2. Install all dependencies and pre-commit hooks&lt;/summary&gt;&lt;p&gt;Install requirements:```bashmake install```Pre-commit hooks coulb be installed after `git init` via```bashmake pre-commit-install```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;3. Codestyle&lt;/summary&gt;&lt;p&gt;Automatic formatting uses `pyupgrade`, `isort` and `black`.```bashmake codestyle# or use synonymmake formatting```Codestyle checks only, without rewriting files:```bashmake check-codestyle```&gt; Note: `check-codestyle` uses `isort`, `black` and `darglint` libraryUpdate all dev libraries to the latest version using one comand```bashmake update-dev-deps```&lt;details&gt;&lt;summary&gt;4. Code security&lt;/summary&gt;&lt;p&gt;```bashmake check-safety```This command launches `Poetry` integrity checks as well as identifies security issues with `Safety` and `Bandit`.```bashmake check-safety```&lt;/p&gt;&lt;/details&gt;&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;5. Type checks&lt;/summary&gt;&lt;p&gt;Run `mypy` static type checker```bashmake mypy```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;6. Tests with coverage badges&lt;/summary&gt;&lt;p&gt;Run `pytest````bashmake test```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;7. All linters&lt;/summary&gt;&lt;p&gt;Of course there is a command to ~~rule~~ run all linters in one:```bashmake lint```the same as:```bashmake test &amp;&amp; make check-codestyle &amp;&amp; make mypy &amp;&amp; make check-safety```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;8. Docker&lt;/summary&gt;&lt;p&gt;```bashmake docker-build```which is equivalent to:```bashmake docker-build VERSION=latest```Remove docker image with```bashmake docker-remove```More information [about docker](https://github.com/AndersSpringborg/chronus/tree/master/docker).&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;9. Cleanup&lt;/summary&gt;&lt;p&gt;Delete pycache files```bashmake pycache-remove```Remove package build```bashmake build-remove```Delete .DS_STORE files```bashmake dsstore-remove```Remove .mypycache```bashmake mypycache-remove```Or to remove all above run:```bashmake cleanup```&lt;/p&gt;&lt;/details&gt;## üìà ReleasesYou can see the list of available releases on the [GitHub Releases](https://github.com/AndersSpringborg/chronus/releases) page.We follow [Semantic Versions](https://semver.org/) specification.We use [`Release Drafter`](https://github.com/marketplace/actions/release-drafter). As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you‚Äôre ready. With the categories option, you can categorize pull requests in release notes using labels.### List of labels and corresponding titles|               **Label**               |  **Title in Releases**  || :-----------------------------------: | :---------------------: ||       `enhancement`, `feature`        |       üöÄ Features       || `bug`, `refactoring`, `bugfix`, `fix` | üîß Fixes &amp; Refactoring  ||       `build`, `ci`, `testing`        | üì¶ Build System &amp; CI/CD ||              `breaking`               |   üí• Breaking Changes   ||            `documentation`            |    üìù Documentation     ||            `dependencies`             | ‚¨ÜÔ∏è Dependencies updates |You can update it in [`release-drafter.yml`](https://github.com/AndersSpringborg/chronus/blob/master/.github/release-drafter.yml).GitHub creates the `bug`, `enhancement`, and `documentation` labels for you. Dependabot creates the `dependencies` label. Create the remaining labels on the Issues tab of your GitHub repository, when you need them.## üõ° License[![License](https://img.shields.io/github/license/AndersSpringborg/chronus)](https://github.com/AndersSpringborg/chronus/blob/master/LICENSE)This project is licensed under the terms of the `MIT` license. See [LICENSE](https://github.com/AndersSpringborg/chronus/blob/master/LICENSE) for more details.## üìÉ Citation```bibtex@misc{chronus,  author = {chronus},  title = {A energy scheduling model, build for HPC.},  year = {2023},  publisher = {GitHub},  journal = {GitHub repository},  howpublished = {\url{https://github.com/AndersSpringborg/chronus}}}```## Credits [![üöÄ Your next Python package needs a bleeding-edge project structure.](https://img.shields.io/badge/python--package--template-%F0%9F%9A%80-brightgreen)](https://github.com/TezRomacH/python-package-template)This project was generated with [`python-package-template`](https://github.com/TezRomacH/python-package-template)</longdescription>
</pkgmetadata>