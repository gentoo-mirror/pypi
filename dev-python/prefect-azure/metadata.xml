<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># prefect-azureVisit the full docs [here](https://PrefectHQ.github.io/prefect-azure) to see additional examples and the API reference.&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/prefect-azure/&quot; alt=&quot;PyPI version&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/prefect-azure?color=0052FF&amp;labelColor=090422&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-azure/&quot; alt=&quot;Stars&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/stars/PrefectHQ/prefect-azure?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/badge/prefect-azure/&quot; alt=&quot;Downloads&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/dm/prefect-azure?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-azure/pulse&quot; alt=&quot;Activity&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/PrefectHQ/prefect-azure?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;https://prefect-community.slack.com&quot; alt=&quot;Slack&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/slack-join_community-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=slack&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://discourse.prefect.io/&quot; alt=&quot;Discourse&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=discourse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;## Welcome!prefect-azure is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows.## Getting Started### Python setupRequires an installation of Python 3.7+We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).### InstallationInstall `prefect-azure` with `pip````bashpip install prefect-azure```To use Blob Storage:```bashpip install &quot;prefect-azure[blob_storage]&quot;```To use Cosmos DB:```bashpip install &quot;prefect-azure[cosmos_db]&quot;```To use ML Datastore:```bashpip install &quot;prefect-azure[ml_datastore]&quot;```A list of available blocks in `prefect-azure` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-azure/#blocks-catalog).### Download a blob```pythonfrom prefect import flowfrom prefect_azure import AzureBlobStorageCredentialsfrom prefect_azure.blob_storage import blob_storage_download@flowdef example_blob_storage_download_flow():    connection_string = &quot;connection_string&quot;    blob_storage_credentials = AzureBlobStorageCredentials(        connection_string=connection_string,    )    data = blob_storage_download(        blob=&quot;prefect.txt&quot;,        container=&quot;prefect&quot;,        azure_credentials=blob_storage_credentials,    )    return dataexample_blob_storage_download_flow()```Use `with_options` to customize options on any existing task or flow:```pythoncustom_blob_storage_download_flow = example_blob_storage_download_flow.with_options(    name=&quot;My custom task name&quot;,    retries=2,    retry_delay_seconds=10,)```### Run a command on an Azure container instance```pythonfrom prefect import flowfrom prefect_azure import AzureContainerInstanceCredentialsfrom prefect_azure.container_instance import AzureContainerInstanceJob@flowdef container_instance_job_flow():    aci_credentials = AzureContainerInstanceCredentials.load(&quot;MY_BLOCK_NAME&quot;)    container_instance_job = AzureContainerInstanceJob(        aci_credentials=aci_credentials,        resource_group_name=&quot;azure_resource_group.example.name&quot;,        subscription_id=&quot;&lt;MY_AZURE_SUBSCRIPTION_ID&gt;&quot;,        command=[&quot;echo&quot;, &quot;hello world&quot;],    )    return container_instance_job.run()```### Use Azure Container Instance as infrastructureIf we have `a_flow_module.py`:```pythonfrom prefect import flow, get_run_logger@flowdef log_hello_flow(name=&quot;Marvin&quot;):    logger = get_run_logger()    logger.info(f&quot;{name} said hello!&quot;)if __name__ == &quot;__main__&quot;:    log_hello_flow()```We can run that flow using an Azure Container Instance, but first create the infrastructure block:```pythonfrom prefect_azure import AzureContainerInstanceCredentialsfrom prefect_azure.container_instance import AzureContainerInstanceJobcontainer_instance_job = AzureContainerInstanceJob(    aci_credentials=AzureContainerInstanceCredentials.load(&quot;MY_BLOCK_NAME&quot;),    resource_group_name=&quot;azure_resource_group.example.name&quot;,    subscription_id=&quot;&lt;MY_AZURE_SUBSCRIPTION_ID&gt;&quot;,)container_instance_job.save(&quot;aci-dev&quot;)```Then, create the deployment either on the UI or through the CLI:```bashprefect deployment build a_flow_module.py:log_hello_flow --name aci-dev -ib container-instance-job/aci-dev```Visit [Prefect Deployments](https://docs.prefect.io/tutorials/deployments/) for more information about deployments.For more tips on how to use tasks and flows in a Collection, check out [Using Collections](https://orion-docs.prefect.io/collections/usage/)!## ResourcesIf you encounter and bugs while using `prefect-azure`, feel free to open an issue in the [prefect-azure](https://github.com/PrefectHQ/prefect-azure) repository.If you have any questions or issues while using `prefect-azure`, you can find help in either the [Prefect Discourse forum](https://discourse.prefect.io/) or the [Prefect Slack community](https://prefect.io/slack)Feel free to star or watch [`prefect-azure`](https://github.com/PrefectHQ/prefect-azure) for updates too!## ContributingIf you'd like to help contribute to fix an issue or add a feature to `prefect-azure`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).Here are the steps:1. [Fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)2. [Clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)3. Install the repository and its dependencies:```pip install -e &quot;.[dev]&quot;```4. Make desired changes5. Add tests6. Insert an entry to [CHANGELOG.md](https://github.com/PrefectHQ/prefect-azure/blob/main/CHANGELOG.md)7. Install `pre-commit` to perform quality checks prior to commit:```pre-commit install```8. `git commit`, `git push`, and create a pull request</longdescription>
</pkgmetadata>