<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dask JupyterLab Extension[![Build Status](https://github.com/dask/dask-labextension/actions/workflows/python.yaml/badge.svg)](https://github.com/dask/dask-labextension/actions/workflows/python.yaml) [![Version](https://img.shields.io/npm/v/dask-labextension.svg)](https://www.npmjs.com/package/dask-labextension) [![Downloads](https://img.shields.io/npm/dm/dask-labextension.svg)](https://www.npmjs.com/package/dask-labextension) [![Dependencies](https://img.shields.io/librariesio/release/npm/dask-labextension.svg)](https://libraries.io/npm/dask-labextension)This package provides a JupyterLab extension to manage Dask clusters,as well as embed Dask's dashboard plots directly into JupyterLab panes.![Dask Extension](./dask.png)## Explanatory Video (5 minutes)&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=EX_voquHdk0 &quot;   target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/EX_voquHdk0/0.jpg&quot;       alt=&quot;Dask + JupyterLab Screencast&quot; width=&quot;560&quot; height=&quot;315&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;## RequirementsJupyterLab &gt;= 1.0distributed &gt;= 1.24.1## InstallationTo install the Dask JupyterLab extension you will need to have JupyterLab installed.For JupyterLab &lt; 3.0, you will also need [Node.js](https://nodejs.org/) version &gt;= 12.These are available through a variety of sources.One source common to Python users is the conda package manager.```bashconda install jupyterlabconda install -c conda-forge nodejs```### JupyterLab 4.xInstall the latest version of the extension for the JupyterLab 4support. You should be able to install this extension with pip or conda,and start using it immediately, e.g.```bashpip install dask-labextension```### JupyterLab 3.xFor JupyterLab 3.x, use lastest supported version `6.2.0`.```bashpip install dask-labextension==6.2.0```### JupyterLab 2.xPrior to JupyterLab 3.0 client-side and server-side components neededto be installed separately, with node available on the machine.The server-side component can be installed via pip or conda-forge:```bashpip install 'dask_labextension&lt;5'``````bashconda install -c conda-forge 'dask-labextension&lt;5'```You then build the client-side extension into JupyterLab with:```bashjupyter labextension install dask-labextension```If you are running Notebook 5.2 or earlier, enable the server extension by running```bashjupyter serverextension enable --py --sys-prefix dask_labextension```## Configuration of Dask cluster managementThis extension has the ability to launch and manage several kinds of Dask clusters,including local clusters and kubernetes clusters.Options for how to launch these clusters are set via the[dask configuration system](http://docs.dask.org/en/latest/configuration.html#configuration),typically a `.yml` file on disk.By default the extension launches a `LocalCluster`, for which the configuration is:```yamllabextension:  factory:    module: 'dask.distributed'    class: 'LocalCluster'    args: []    kwargs: {}  default:    workers: null    adapt:      null      # minimum: 0      # maximum: 10  initial:    []    # - name: &quot;My Big Cluster&quot;    #   workers: 100    # - name: &quot;Adaptive Cluster&quot;    #   adapt:    #     minimum: 0    #     maximum: 50```In this configuration, `factory` gives the module, class name, and arguments needed to create the cluster.The `default` key describes the initial number of workers for the cluster, as well as whether it is adaptive.The `initial` key gives a list of initial clusters to start upon launch of the notebook server.In addition to `LocalCluster`, this extension has been used to launch several other Dask clusterobjects, a few examples of which are:- A SLURM cluster, using```yamllabextension:    factory:      module: 'dask_jobqueue'       class: 'SLURMCluster'       args: []       kwargs: {}```- A PBS cluster, using```yamllabextension:  factory:    module: 'dask_jobqueue'    class: 'PBSCluster'    args: []    kwargs: {}```- A [Kubernetes cluster](https://github.com/pangeo-data/pangeo-cloud-federation/blob/8f7f4bf9963ef1ed180dd20c952ff1aa8df54ca2/deployments/ocean/image/binder/dask_config.yaml#L37-L42), using```yamllabextension:  factory:    module: dask_kubernetes    class: KubeCluster    args: []    kwargs: {}```## Configuring a default layoutThis extension can store a default layout for the Dask dashboard panes,which is useful if you find yourself reaching for the same dashboard charts over and over.You can launch the default layout via the command palette,or by going to the File menu and choosing &quot;Launch Dask Dashboard Layout&quot;.Default layouts can be configured via the JupyterLab config system(either using the JSON editor or the user interface).Specify a layout by writing a JSON object keyed by the[individual charts](https://github.com/dask/distributed/blob/f31fbde748294065ed70dd5c4399821fa664a9f1/distributed/dashboard/scheduler.py#L72-L117)you would like to open.Each chart is opened with a `mode`, and a `ref`.`mode` refers to how the chart is to be added to the workspace.For example, if you want to split a panel and add the new one to the right, choose `split-right`.Other options are `split-top`, `split-bottom`, `split-left`, `tab-after`, and `tab-before`.`ref` refers to the panel to which `mode` is applied, and might be the names of other dashboard panels.If `ref` is `null`, the panel in question is added at the top of the layout hierarchy.A concrete example of a default layout is```json{  &quot;individual-task-stream&quot;: {    &quot;mode&quot;: &quot;split-right&quot;,    &quot;ref&quot;: null  },  &quot;individual-workers-memory&quot;: {    &quot;mode&quot;: &quot;split-bottom&quot;,    &quot;ref&quot;: &quot;individual-task-stream&quot;  },  &quot;individual-progress&quot;: {    &quot;mode&quot;: &quot;split-right&quot;,    &quot;ref&quot;: &quot;individual-workers-memory&quot;  }}```which adds the task stream to the right of the workspace,then adds the worker memory chart below the task stream,then adds the progress chart to the right of the worker memory chart.## Development installAs described in the [JupyterLab documentation](https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html#developing-a-prebuilt-extension)for a development install of the labextension you can run the following in this directory:```bashjlpm  # Install npm package dependenciesjlpm build  # Compile the TypeScript sources to Javascriptjupyter labextension develop . --overwrite  # Install the current directory as an extension```To rebuild the extension:```bashjlpm build```You should then be able to refresh the JupyterLab pageand it will pick up the changes to the extension.To run an editable install of the server extension, run```bashpip install -e .jupyter serverextension enable --sys-prefix dask_labextension```## PublishingThis extension contains a front-end component written in TypeScriptand a back-end component written in Python.The front-end is compiled to Javascript during the build processand is distributed as static assets along with the Python package.### Release processThis requires `node`, `build`, `hatch` and `twine` to be installed.```bash# To set version (e.g. 7.0.0). hatch will update version string in package.jsonhatch version &quot;7.0.0&quot;# Examples of bumping version# minor bumphatch version minor  # Bumps to 7.1.0# beta pre-release bump# If published to pypi this can be installed with the --pre flag to piphatch version b  # Bumps to 7.1.0b0# bump minor and betahatch version minor,b  # Bumps to 7.2.0b0# release all of the --pre-release flags such as alpha beta rchatch release  # Bumps to 7.2.0# git commit after bumping versiongit add package.json &amp;&amp; git commit -m &quot;Bump version: {version}&quot;# Tag this versiongit tag {version}# Finally push to main, build and upload package to PyPIgit push upstream main &amp;&amp; git push upstream main --tags  # pushes to GitHubpython -m build .  # Build the packagetwine upload dist/*  # Upload the package to PyPI```### Handling Javascript package version conflictsUnlike Python, Javascript packages can include more than one version of the same dependency.Usually the `yarn` package manager handles this okay, but occasionally you might end up with conflicting versions,or with unexpected package bloat.You can try to fix this by deduplicating dependencies:```bashjlpm yarn-deduplicate -s fewer```</longdescription>
</pkgmetadata>