<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>uritools========================================================================.. image:: https://img.shields.io/pypi/v/uritools    :target: https://pypi.org/project/uritools    :alt: Latest PyPI version.. image:: https://img.shields.io/github/actions/workflow/status/tkem/uritools/ci.yml   :target: https://github.com/tkem/uritools/actions/workflows/ci.yml   :alt: CI build status.. image:: https://img.shields.io/readthedocs/uritools   :target: https://uritools.readthedocs.io   :alt: Documentation build status.. image:: https://img.shields.io/codecov/c/github/tkem/uritools/master.svg   :target: https://codecov.io/gh/tkem/uritools   :alt: Test coverage.. image:: https://img.shields.io/librariesio/sourcerank/pypi/uritools   :target: https://libraries.io/pypi/uritools   :alt: Libraries.io SourceRank.. image:: https://img.shields.io/github/license/tkem/uritools   :target: https://raw.github.com/tkem/uritools/master/LICENSE   :alt: License.. image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black   :alt: Code style: blackThis module provides RFC 3986 compliant functions for parsing,classifying and composing URIs and URI references, largely replacingthe Python Standard Library's ``urllib.parse`` module... code-block:: pycon    &gt;&gt;&gt; from uritools import uricompose, urijoin, urisplit, uriunsplit    &gt;&gt;&gt; uricompose(scheme='foo', host='example.com', port=8042,    ...            path='/over/there', query={'name': 'ferret'},    ...            fragment='nose')    'foo://example.com:8042/over/there?name=ferret#nose'    &gt;&gt;&gt; parts = urisplit(_)    &gt;&gt;&gt; parts.scheme    'foo'    &gt;&gt;&gt; parts.authority    'example.com:8042'    &gt;&gt;&gt; parts.getport(default=80)    8042    &gt;&gt;&gt; parts.getquerydict().get('name')    ['ferret']    &gt;&gt;&gt; parts.isuri()    True    &gt;&gt;&gt; parts.isabsuri()    False    &gt;&gt;&gt; urijoin(uriunsplit(parts), '/right/here?name=swallow#beak')    'foo://example.com:8042/right/here?name=swallow#beak'For various reasons, ``urllib.parse`` and its Python 2 predecessor``urlparse`` are not compliant with current Internet standards.  Asstated in `Lib/urllib/parse.py&lt;https://github.com/python/cpython/blob/3.8/Lib/urllib/parse.py&gt;`_:    RFC 3986 is considered the current standard and any future changes    to urlparse module should conform with it.  The urlparse module is    currently not entirely compliant with this RFC due to defacto    scenarios for parsing, and for backward compatibility purposes,    some parsing quirks from older RFCs are retained.This module aims to provide fully RFC 3986 compliant replacements forthe most commonly used functions found in ``urllib.parse``.  It alsoincludes functions for distinguishing between the different forms ofURIs and URI references, and for conveniently creating URIs from theirindividual components.Installation------------------------------------------------------------------------uritools is available from PyPI_ and can be installed by running::  pip install uritoolsProject Resources------------------------------------------------------------------------- `Documentation`_- `Issue tracker`_- `Source code`_- `Change log`_License------------------------------------------------------------------------Copyright (c) 2014-2023 Thomas Kemmer.Licensed under the `MIT License`_... _PyPI: https://pypi.org/project/uritools/.. _Documentation: https://uritools.readthedocs.io/.. _Issue tracker: https://github.com/tkem/uritools/issues/.. _Source code: https://github.com/tkem/uritools/.. _Change log: https://github.com/tkem/uritools/blob/master/CHANGELOG.rst.. _MIT License: https://raw.github.com/tkem/uritools/master/LICENSE</longdescription>
</pkgmetadata>