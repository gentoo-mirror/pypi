<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Binance Public API Connector Python[![PyPI version](https://img.shields.io/pypi/v/binance-connector)](https://pypi.python.org/pypi/binance-connector)[![Python version](https://img.shields.io/pypi/pyversions/binance-connector)](https://www.python.org/downloads/)[![Documentation](https://img.shields.io/badge/docs-latest-blue)](https://binance-connector.readthedocs.io/en/stable/)[![Code Style](https://img.shields.io/badge/code_style-black-black)](https://black.readthedocs.io/en/stable/)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)This is a lightweight library that works as a connector to [Binance public API](https://github.com/binance/binance-spot-api-docs)- Supported APIs:    - `/api/*`    - `/sapi/*`    - Spot Websocket Market Stream    - Spot User Data Stream    - Spot WebSocket API- Inclusion of test cases and examples- Customizable base URL, request timeout and HTTP proxy- Response metadata can be displayed## Installation```bashpip install binance-connector```## Documentation[https://binance-connector.readthedocs.io](https://binance-connector.readthedocs.io)## RESTful APIsUsage examples:```pythonfrom binance.spot import Spotclient = Spot()# Get server timestampprint(client.time())# Get klines of BTCUSDT at 1m intervalprint(client.klines(&quot;BTCUSDT&quot;, &quot;1m&quot;))# Get last 10 klines of BNBUSDT at 1h intervalprint(client.klines(&quot;BNBUSDT&quot;, &quot;1h&quot;, limit=10))# API key/secret are required for user data endpointsclient = Spot(api_key='&lt;api_key&gt;', api_secret='&lt;api_secret&gt;')# Get account and balance informationprint(client.account())# Post a new orderparams = {    'symbol': 'BTCUSDT',    'side': 'SELL',    'type': 'LIMIT',    'timeInForce': 'GTC',    'quantity': 0.002,    'price': 9500}response = client.new_order(**params)print(response)```Please find `examples` folder to check for more endpoints.- In order to set your API and Secret Key for use of the examples, create a file `examples/config.ini` with your keys.- Eg:    ```ini    # examples/config.ini    [keys]    api_key=abc123456    api_secret=cba654321    ```### AuthenticationBinance supports HMAC, RSA and ED25519 API authentication.```python# HMAC: pass API key and secretclient = Client(api_key, api_secret)print(client.account())# RSA Keysclient = Client(api_key=api_key, private_key=private_key)print(client.account())# ED25519 Keysapi_key = &quot;&quot;private_key = &quot;./private_key.pem&quot;private_key_pass = &quot;&lt;password_if_applicable&gt;&quot;with open(private_key, 'rb') as f:    private_key = f.read()spot_client = Client(api_key=api_key, private_key=private_key, private_key_pass=private_key_pass)# Encrypted RSA Keyclient = Client(api_key=api_key, private_key=private_key, private_key_pass='password')print(client.account())```Please find `examples/spot/wallet/account_snapshot.py` for more details on ED25519.Please find `examples/spot/trade/get_account.py` for more details on RSA.### Testnet[Spot Testnet](https://testnet.binance.vision/) is available, it can be used to test `/api/*` endpoints.- `/sapi/*` endpoints are not available.- No UI.- Steps to setup testnet API key.  [https://dev.binance.vision/t/99](https://dev.binance.vision/t/99)To use testnet:```pythonfrom binance.spot import Spot as Clientclient = Client(base_url='https://testnet.binance.vision')print(client.time())```### Base URLIf `base_url` is not provided, it defaults to `api.binance.com`.&lt;br/&gt;It's recommended to pass in the `base_url` parameter, even in production as Binance provides alternative URLsin case of performance issues:- `https://api1.binance.com`- `https://api2.binance.com`- `https://api3.binance.com`### Optional parametersPEP8 suggests _lowercase with words separated by underscores_, but for this connector,the methods' optional parameters should follow their exact naming as in the API documentation.```python# Recognised parameter nameresponse = client.cancel_oco_order('BTCUSDT', orderListId=1)# Unrecognised parameter nameresponse = client.cancel_oco_order('BTCUSDT', order_list_id=1)```### RecvWindow parameterAdditional parameter `recvWindow` is available for endpoints requiring signature.&lt;br/&gt;It defaults to `5000` (milliseconds) and can be any value lower than `60000`(milliseconds).Anything beyond the limit will result in an error response from Binance server.```pythonfrom binance.spot import Spot as Clientclient = Client(api_key, api_secret)response = client.get_order('BTCUSDT', orderId=11, recvWindow=10000)```### Timeout`timeout` is available to be assigned with the number of seconds you find most appropriate to wait for a server response.&lt;br/&gt;Please remember the value as it won't be shown in error message _no bytes have been received on the underlying socket for timeout seconds_.&lt;br/&gt;By default, `timeout` is None. Hence, requests do not time out.```pythonfrom binance.spot import Spot as Clientclient= Client(timeout=1)```### ProxyProxy is supported.```pythonfrom binance.spot import Spot as Clientproxies = { 'https': 'http://1.2.3.4:8080' }client= Client(proxies=proxies)```### Response MetadataThe Binance API server provides weight usages in the headers of each response.You can display them by initializing the client with `show_limit_usage=True`:```pythonfrom binance.spot import Spot as Clientclient = Client(show_limit_usage=True)print(client.time())```returns:```python{'data': {'serverTime': 1587990847650}, 'limit_usage': {'x-mbx-used-weight': '31', 'x-mbx-used-weight-1m': '31'}}```You can also display full response metadata to help in debugging:```pythonclient = Client(show_header=True)print(client.time())```returns:```python{'data': {'serverTime': 1587990847650}, 'header': {'Context-Type': 'application/json;charset=utf-8', ...}}```If `ClientError` is received, it'll display full response meta information.### Display logsSetting the log level to `DEBUG` will log the request URL, payload and response text.### ErrorThere are 2 types of error returned from the library:- `binance.error.ClientError`    - This is thrown when server returns `4XX`, it's an issue from client side.    - It has 5 properties:        - `status_code` - HTTP status code        - `error_code` - Server's error code, e.g. `-1102`        - `error_message` - Server's error message, e.g. `Unknown order sent.`        - `header` - Full response header.        - `error_data`* - Additional detailed data which supplements the `error_message`.            - **Only applicable on select endpoints, eg. `cancelReplace`*- `binance.error.ServerError`    - This is thrown when server returns `5XX`, it's an issue from server side.## Websocket### Connector v3WebSocket can be established through either of the following types of connections:- WebSocket API (`https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md`)- WebSocket Stream (`https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md`)```python# WebSocket API Clientfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClientdef message_handler(_, message):    logging.info(message)my_client = SpotWebsocketAPIClient(on_message=message_handler)my_client.ticker(symbol=&quot;BNBBUSD&quot;, type=&quot;FULL&quot;)time.sleep(5)logging.info(&quot;closing ws connection&quot;)my_client.stop()``````python# WebSocket Stream Clientfrom binance.websocket.spot.websocket_stream import SpotWebsocketStreamClientdef message_handler(_, message):    logging.info(message)my_client = SpotWebsocketStreamClient(on_message=message_handler)# Subscribe to a single symbol streammy_client.agg_trade(symbol=&quot;bnbusdt&quot;)time.sleep(5)logging.info(&quot;closing ws connection&quot;)my_client.stop()```#### ProxyProxy is supported for both WebSocket API and WebSocket Stream.To use it, pass in the `proxies` parameter when initializing the client.The format of the `proxies` parameter is the same as the one used in the Spot RESTful API.It consists on a dictionary with the following format, where the key is the type of the proxy and the value is the proxy URL:For websockets, the proxy type is `http`.```pythonproxies = { 'http': 'http://1.2.3.4:8080' }```You can also use authentication for the proxy by adding the `username` and `password` parameters to the proxy URL:```pythonproxies = { 'http': 'http://username:password@host:port' }``````python# WebSocket API Clientfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClientdef message_handler(_, message):    logging.info(message)proxies = { 'http': 'http://1.2.3.4:8080' }my_client = SpotWebsocketAPIClient(on_message=message_handler, proxies=proxies, timeout=10)my_client.ticker(symbol=&quot;BNBBUSD&quot;, type=&quot;FULL&quot;)time.sleep(5)logging.info(&quot;closing ws connection&quot;)my_client.stop()``````python# WebSocket Stream Clientfrom binance.websocket.spot.websocket_stream import SpotWebsocketStreamClientdef message_handler(_, message):    logging.info(message)proxies = { 'http': 'http://1.2.3.4:8080' }my_client = SpotWebsocketStreamClient(on_message=message_handler, proxies=proxies, timeout=10)# Subscribe to a single symbol streammy_client.agg_trade(symbol=&quot;bnbusdt&quot;)time.sleep(5)logging.info(&quot;closing ws connection&quot;)my_client.stop()```#### Request IdClient can assign a request id to each request. The request id will be returned in the response message. Not mandatory in the library, it generates a uuid format string if not provided.```python# id provided by clientmy_client.ping_connectivity(id=&quot;my_request_id&quot;)# library will generate a random uuid stringmy_client.ping_connectivity()```#### Combined Streams- If you set `is_combined` to `True`, `&quot;/stream/&quot;` will be appended to the `baseURL` to allow for Combining streams.- `is_combined` defaults to `False` and `&quot;/ws/&quot;` (raw streams) will be appended to the `baseURL`.More websocket examples are available in the `examples` folder.Example file &quot;examples/websocket_api/app_demo.py&quot; demonstrates how Websocket API and Websocket Stream can be used together.### Connector v1 and v2```pythonfrom binance.websocket.spot.websocket_client import SpotWebsocketClient as WebsocketClientdef message_handler(message):    print(message)ws_client = WebsocketClient()ws_client.start()ws_client.mini_ticker(    symbol='bnbusdt',    id=1,    callback=message_handler,)# Combine selected streamsws_client.instant_subscribe(    stream=['bnbusdt@bookTicker', 'ethusdt@bookTicker'],    callback=message_handler,)ws_client.stop()```### HeartbeatOnce connected, the websocket server sends a ping frame every 3 minutes and requires a response pong frame back withina 10 minutes period. This package handles the pong responses automatically.### Testnet```pythonfrom binance.websocket.spot.websocket_client import SpotWebsocketClient as WebsocketClientws_client = WebsocketClient(stream_url='wss://testnet.binance.vision')```## Test Case```python# In case packages are not installed yetpip install -r requirements/requirements-test.txtpytest```## LimitationFutures and Vanilla Options APIs are not supported:  - `/fapi/*`  - `/dapi/*`  - `/vapi/*`  -  Associated Websocket Market and User Data Streams## ContributingContributions are welcome.&lt;br/&gt;If you've found a bug within this project, please open an issue to discuss what you would like to change.&lt;br/&gt;If it's an issue with the API, please open a topic at [Binance Developer Community](https://dev.binance.vision)</longdescription>
</pkgmetadata>