<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>redis-completion================autocompletion with `redis &lt;http://redis.io&gt;`_ based on:* http://antirez.com/post/autocomplete-with-redis.html* http://stackoverflow.com/questions/1958005/redis-autocomplete/1966188* http://patshaughnessy.net/2011/11/29/two-ways-of-using-redis-to-build-a-nosql-autocomplete-search-indexredis-completion is capable of storing a large number of phrases and quicklysearching them for matches.  Rich data can be stored and retrieved, helping youavoid trips to the database when retrieving search results.check out the `documentation &lt;http://redis-completion.rtfd.org/&gt;`_ for more info.usage-----If you just want to store really simple things, like strings:::    engine = RedisEngine()    titles = ['python programming', 'programming c', 'unit testing python',              'testing software', 'software design']    map(engine.store, titles)    &gt;&gt;&gt; engine.search('pyt')    ['python programming', 'unit testing python']    &gt;&gt;&gt; engine.search('test')    ['testing software', 'unit testing python']If you want to store more complex data, like blog entries:::    Entry.create(title='an entry about python', published=True)    Entry.create(title='all about redis', published=True)    Entry.create(title='using redis with python', published=False)    for entry in Entry.select():        engine.store_json(entry.id, entry.title, {            'published': entry.published,            'title': entry.title,            'url': entry.get_absolute_url(),        })    &gt;&gt;&gt; engine.search_json('pytho')    [{'published': True, 'title': 'an entry about python', 'url': '/blog/1/'},     {'published': False, 'title': 'using redis with python', 'url': '/blog/3/'}]    # just published entries, please    &gt;&gt;&gt; engine.search_json('redis', filters=[lambda i: i['published'] == True])    [{u'published': True, u'title': u'all about redis', u'url': u'/blog/2/'}]installing----------Install with pip::    pip install redis-completionInstall via git::    git clone https://github.com/coleifer/redis-completion.git    cd redis-completion    python setup.py installschema------.. image:: http://redis-completion.readthedocs.org/en/latest/_images/schema.jpg</longdescription>
</pkgmetadata>