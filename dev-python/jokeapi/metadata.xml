<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sv443's Joke API Wrapper&lt;div align=&quot;center&quot; style=&quot;text-align:center&quot;&gt;[![Downloads](https://pepy.tech/badge/jokeapi)](https://pepy.tech/project/jokeapi)[![Downloads](https://pepy.tech/badge/jokeapi/month)](https://pepy.tech/project/jokeapi/month)[![Downloads](https://pepy.tech/badge/jokeapi/week)](https://pepy.tech/project/jokeapi/week)[![CircleCI](https://circleci.com/gh/leet-hakker/JokeAPI-Python.svg?style=svg)](https://circleci.com/gh/leet-hakker/JokeAPI-Python)&lt;/div&gt;An API wrapper for Sv443's joke api which provides simple yet versatile functionality,while also maintaining a readable codebase.## InstallYou can install jokeapi through [pip](https://pypi.org/project/pip/) by using `pip install jokeapi`---# get_jokeThe wrapper is structured in such a way that the end-user should only ever have tointeract with one function to get a joke. This function is `get_joke()`.Please note that urllib3, the core dependency of this wrapper automatically abides by`Retry-After` headers, which means you may have to wait a long time for a joke if youhave made a lot of requests recently---# submit_jokeThe wrapper also provides simple access to the submit endpoint through the `submit_joke()`function.Note that joke submissions are manually checked and you will be ratelimited.---## get_joke### Example```pythonfrom jokeapi import Jokes # Import the Jokes classimport asyncioasync def print_joke():    j = await Jokes()  # Initialise the class    joke = await j.get_joke()  # Retrieve a random joke    if joke[&quot;type&quot;] == &quot;single&quot;: # Print the joke        print(joke[&quot;joke&quot;])    else:        print(joke[&quot;setup&quot;])        print(joke[&quot;delivery&quot;])asyncio.run(print_joke())```### Parameters---#### categoryA list of categories that the returned joke should fit in.Options are:`programming`,`miscellaneous`,`dark`,`pun`If left blank it will default to use `Any`.##### Example```python  joke = await j.get_joke(category=['programming', 'dark'])  # Will return a joke that fits in either the programming or dark category.```---#### blacklistA list of properties that the joke *shouldn't* have.Options are:`nsfw`,`religious`,`political`,`racist`,`sexist`If left blank it will default to `None`.##### Example```python  joke = await j.get_joke(blacklist=['nsfw', 'racist'])  # Will return a joke that does not have either the flag &quot;nsfw&quot; or &quot;racist&quot;.```---#### response_formatThe format in which the API should respond.Options are:`json`,`yaml`,`xml`,`txt`If left blank it will default to `json`.##### Example```python  joke = await j.get_joke(response_format=&quot;xml&quot;)  # Will return a joke in xml format.```---#### joke_typeThe type of joke returned.Options are:`single`,`twopart`,`Any`If left blank it will default to `Any`##### Example```python  joke = await j.get_joke(joke_type=&quot;twopart&quot;)  # Will return a twopart joke; both a setup and a delivery.```---#### search_stringA string to search for in jokes.If left blank it will default to `None`##### Example```python  joke = await j.get_joke(search_string=&quot;the&quot;)  # Will return a joke with the word &quot;the&quot; in it.  # If there are no jokes then it will return the error from the API.```---#### id_rangeThe range in which the selected joke should fall. ID's are decided by the order in which jokes are submitted.The argument passes should be in form of list or tuple, and should not exceed length of 2 items. First itemshould be minimum 0. Maximum value can be determined [here](https://sv443.net/jokeapi/v2/info)If left blank it will default to the maximum range.##### Example```python  joke = await j.get_joke(id_range=[10,100])  # Will return a joke with the ID between 10 and 100.```---#### amountThe amount of jokes you want the api to return. Will return them in a list. Maximum number is 10 jokes, and theapi defaults to 1 if you use a number larger than the maximum. Defaults to 1.##### Example```python  joke = await j.get_joke(amount=2) # Will return 2 jokes.```---#### langThe language that the joke and response should be in. Currently supported languages are in the official apidocumentation. Defaults to en.##### Example```python  joke = await j.get_joke(lang=&quot;de&quot;)```---#### auth_tokenA string token provided by the api owner. Using it will mean you are whitelisted by the api and can makemore requests than normal users. Defaults to None##### Example```python  joke = await j.get_joke(auth_token=&quot;aaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbb&quot;) # Will send the token to the api in a header.```---#### user_agentA string sent the the api that tells the api what browser you are (pretending to be). The default user agentis Mozilla Firefox from Windows 10 and should work fine, but the functionality is provided in case you wishto change it##### Example```python  joke = await j.get_joke(user_agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0&quot;)  # This is in fact the default user agent, and tells the API that we are visitng the page from a Firefox 77.0  # browser using Windows 10 64bit.```---#### return_headersA boolean value (True or False) that tells the wrapper if you wish to receive headers in the return from the function.Will return a list instead of a single valueDefaults to False.##### Example```python  response = await j.get_joke(return_headers=True)  joke = response[0]  headers = response[1]  print(f&quot;Joke: {joke}&quot;)  print(f&quot;Headers: {headers}&quot;)```---### ReturnsDepending on what format is chosen different things will be returned.#### jsonA succesful API call will return:```json  {      &quot;category&quot;: &quot;Miscellaneous&quot;,      &quot;type&quot;: &quot;twopart&quot;,      &quot;setup&quot;: &quot;I told my psychiatrist I got suicidal tendencies.&quot;,      &quot;delivery&quot;: &quot;He said from now on I have to pay in advance.&quot;,      &quot;flags&quot;: {          &quot;nsfw&quot;: false,          &quot;religious&quot;: false,          &quot;political&quot;: false,          &quot;racist&quot;: false,          &quot;sexist&quot;: false      },      &quot;id&quot;: 94,      &quot;error&quot;: false  }```#### xmlA succesful API call will return:```xml&lt;?xml version='1.0'?&gt;&lt;data&gt;    &lt;category&gt;Dark&lt;/category&gt;    &lt;type&gt;single&lt;/type&gt;    &lt;joke&gt;My ex had an accident. I told the paramedics the wrong blood type for her. She'll finally experience what rejection is really like.&lt;/joke&gt;    &lt;flags&gt;        &lt;nsfw&gt;false&lt;/nsfw&gt;        &lt;religious&gt;false&lt;/religious&gt;        &lt;political&gt;false&lt;/political&gt;        &lt;racist&gt;false&lt;/racist&gt;        &lt;sexist&gt;false&lt;/sexist&gt;    &lt;/flags&gt;    &lt;id&gt;154&lt;/id&gt;    &lt;error&gt;false&lt;/error&gt;&lt;/data&gt;```#### yamlA succesful API call will return:```yamlcategory: &quot;Programming&quot;type: &quot;single&quot;joke: &quot;Your momma is so fat, you need to switch to NTFS to store a picture of her.&quot;flags:  nsfw: false  religious: false  political: false  racist: false  sexist: falseid: 56error: false```#### txtA succesful API call will return:```Why does no one like SQLrillex?He keeps dropping the database.```---### ErrorsThe wrapper can raise multiple different errors depending on what you did wrong.The errors are descriptive enough that you should be able to solve them with the information provided in the error message.If not, feel free to ask me through one of the channels provided below.---## submit_joke### Example```pythonfrom jokeapi import Jokesimport asyncioasync def submit_new_joke():j = await Jokes()await j.submit_joke(&quot;Miscellaneous&quot;, &quot;funny haha&quot;, {    &quot;nsfw&quot;: False,    &quot;religious&quot;: False,    &quot;political&quot;: False,    &quot;racist&quot;: False,    &quot;sexist&quot;: False}, lang=&quot;de&quot;)asyncio.run(submit_new_joke())```---### Parameters---#### categoryThe category the joke is.Options are:`programming`,`miscellaneous`,`dark`,`pun`Has no default value.---#### jokeThe joke itself. Can either be a single string or a list/tuple, for the setup anddelivery. Setup should be at index 0 in the tuple, delivery at 1.Has no default value.---#### flagsThe flags that the joke should have.Options are:`nsfw`,`religious`,`political`,`racist`,`sexist`Has no default value.#### langThe language code for the language the joke it written in. E.g en for english,de for german.Defaults to `en`---## Contributors[ThatCopy](https://github.com/ThatCopy) - [27994f7](https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper/commit/27994f74fdea51cb2ddcee9ea127d393868aca00) - [01b578c](https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper/commit/01b578cbb500d02ff27925459223e40505aafe96)[kdiri](https://github.com/kdiri) - [3e20cd1](https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper/commit/3e20cd1dbd1e5ac6b08ed90c720bf2890a6a4ffd) - [3b6a2a6](https://github.com/thenamesweretakenalready/Sv443s-JokeAPI-Python-Wrapper/commit/3b6a2a6164225fb9d5cb1bd77b0ccebd9bd8bffd)## Developer contact![Discord](https://discord.com/assets/07dca80a102d4149e9736d4b162cff6f.ico)[**Discord**](https://discord.gg/mB989eP)[Issue Tracker](https://github.com/thenamesweretakenalready/JokeAPI-Python/issues)[e-mail](mailto:leet_haker@cyber-wizard.com)</longdescription>
</pkgmetadata>