<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>libhxl-python=============Python support library for the Humanitarian Exchange Language (HXL)data standard.  The library requires Python 3 (versions prior to 4.6also supported Python 2.7).**API docs:** https://hxlstandard.github.io/libhxl-python/ (and in the ``docs/`` folder)**HXL standard:** http://hxlstandard.org## Quick startFrom the command line (or inside a Python3 virtual environment):```$ pip3 install libhxl```In your code:```import hxlurl = &quot;https://github.com/HXLStandard/libhxl-python/blob/main/tests/files/test_io/input-valid.csv&quot;data = hxl.data(url).with_rows(&quot;#sector=WASH&quot;).sort(&quot;#country&quot;)for line in data.gen_csv():    print(line)```## Usage### Reading from a data sourceThe _hxl.data()_ function reads HXL from a file object, filename, URL,or list of arrays and makes it available for processing, much like``$()`` in JQuery. The following will read HXLated data from standard input:```import sysimport hxldataset = hxl.data(sys.stdin)```Most commonly, you will open a dataset via a URL:```dataset = hxl.data(&quot;https://example.org/dataset.url&quot;```To open a local file rather than a URL, use the _allow\_local_ propertyof the[InputOptions](https://hxlstandard.github.io/libhxl-python/input.html#hxl.input.InputOptions)class:```dataset = hxl.data(&quot;dataset.xlsx&quot;, hxl.InputOptions(allow_local=True))```#### Input cachinglibhxl uses the Python[requests](http://docs.python-requests.org/en/master/) library foropening URLs. If you want to enable caching (for example, to avoidbeating up on your source with repeated requests), your code can usethe [requests_cache](https://pypi.python.org/pypi/requests-cache)plugin, like this:    import requests_cache    requests_cache.install_cache('demo_cache', expire_after=3600)The default caching backend is a sqlite database at the location specied.### Filter chainsYou can filters to transform the output, and chain them asneeded. Transformation is lazy, and uses the minimum memorypossible. For example, this command selects only data rows where thecountry is &quot;Somalia&quot;, sorted by the organisation:```transformed = hxl.data(url).with_rows(&quot;#country=Somalia&quot;).sort(&quot;#org&quot;)```For more on filters see the API documentation for the[hxl.model.Dataset](https://hxlstandard.github.io/libhxl-python/model.html#hxl.model.Dataset)class and the[hxl.filters](https://hxlstandard.github.io/libhxl-python/filters.html)module.### GeneratorsGenerators allow the re-serialising of HXL data, returning something that works like an iterator.  Example:```for line in hxl.data(url).gen_csv():    print(line)```The following generators are available (you can use the parameters to turn the text headers and HXL tags on or off):Generator method | Description-- | --[gen_raw()](https://hxlstandard.github.io/libhxl-python/model.html#hxl.model.Dataset.gen_raw) | Generate arrays of strings, one row at a time.[gen_csv()](https://hxlstandard.github.io/libhxl-python/model.html#hxl.model.Dataset.gen_csv) | Generate encoded CSV rows, one row at a time.[gen_json()](https://hxlstandard.github.io/libhxl-python/model.html#hxl.model.Dataset.gen_json) | Generate JSON output, either as rows or as JSON objects with the HXL hashtags as property names.### ValidationTo validate a HXL dataset against a schema (also in HXL), use the [validate()](https://hxlstandard.github.io/libhxl-python/model.html#hxl.model.Dataset.validate) method at the end of the filter chain:```is_valid = hxl.data(url).validate('my-schema.csv')```If you don't specify a schema, the library will use a simple, built-in schema:```is_valid = hxl.data(url).validate()```If you include a callback, you can collect details about the errors and warnings:```def my_callback(error_info):    ## error_info is a HXLValidationException    sys.stderr.write(error_info)is_valid = hxl.data(url).validate(schema='my-schema.csv', callback=my_callback)```For more information on validation, see the API documentation for the[hxl.validation](https://hxlstandard.github.io/libhxl-python/validation.html)module and the format documentation for [HXLschemas](https://github.com/HXLStandard/hxl-proxy/wiki/HXL-schemas).## Command-line scriptsThe filters are also available as command-line scripts, installed withthe library. For example,```$ hxlcount -t country dataset.csv```Will perform the same action as```import hxlhxl.data(&quot;dataset.csv&quot;, hxl.InputOptions(allow_local=True)).count(&quot;country&quot;).gen_csv()```See the API documentation for the[hxl.scripts](https://hxlstandard.github.io/libhxl-python/scripts.html)module for more information about the command-line scriptsavailable. All scripts have an ``-h`` option that gives usageinformation.## InstallationThis repository includes a standard Python `setup.py` script forinstalling the library and scripts (applications) on your system. In aUnix-like operating system, you can install using the followingcommand:```python setup.py install```If you don't need to install from source, try simply```pip install libhxl```Once you've installed, you will be able to include the HXL librariesfrom any Python application, and will be able to call scripts like_hxlvalidate_ from the command line.## MakefileThere is also a generic Makefile that automates many tasks, includingsetting up a Python virtual environment for testing. The Python3 venvmodule is required for most of the targets.```make build-venv```Set up a local Python virtual environment for testing, if it doesn'talready exist. Will recreate the virtual environment if setup.py haschanged.```make test```Set up a virtual environment (if missing) and run all the unit tests```make test-install```Test a clean installation to verify there are no missing dependencies,etc.## Licenselibhxl-python is released into the Public Domain, and comes with NOWARRANTY. See [LICENSE.md](./LICENSE.md) for details.</longdescription>
</pkgmetadata>