<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyspartn[Current Status](#currentstatus) |[Installation](#installation) |[Reading](#reading) |[Parsing](#parsing) |[Generating](#generating) |[Serializing](#serializing) |[Examples](#examples) |[Graphical Client](#gui) |[Author &amp; License](#author)`pyspartn` is an original Python 3 parser for the SPARTN &amp;copy; GPS/GNSS protocol. SPARTN is an open-source GPS/GNSS [differential correction or DGPS](https://en.wikipedia.org/wiki/Differential_GPS) protocol published by u-blox.[SPARTN Protocol 2.01](https://www.spartnformat.org/download/) (available in the public domain).Â© 2021 u-blox AG. All rights reserved.The `pyspartn` homepage is located at [https://github.com/semuconsulting/pyspartn](https://github.com/semuconsulting/pyspartn).This is an independent project and we have no affiliation whatsoever with u-blox.**FYI** There are companion libraries which handle standard NMEA 0183 &amp;copy;, UBX &amp;copy; (u-blox) and RTCM3 &amp;copy; GNSS/GPS messages:- [pyubx2](http://github.com/semuconsulting/pyubx2) (**FYI** installing `pyubx2` via pip also installs `pynmeagps` and `pyrtcm`)- [pynmeagps](http://github.com/semuconsulting/pynmeagps)- [pyrtcm](http://github.com/semuconsulting/pyrtcm)## &lt;a name=&quot;currentstatus&quot;&gt;Current Status&lt;/a&gt;**WORK IN PROGRESS - CURRENTLY IN PRE-ALPHA.**&lt;!--![Status](https://img.shields.io/pypi/status/pyspartn)--&gt;![Release](https://img.shields.io/github/v/release/semuconsulting/pyspartn?include_prereleases)![Build](https://img.shields.io/github/actions/workflow/status/semuconsulting/pyspartn/main.yml?branch=main)![Codecov](https://img.shields.io/codecov/c/github/semuconsulting/pyspartn)![Release Date](https://img.shields.io/github/release-date-pre/semuconsulting/pyspartn)![Last Commit](https://img.shields.io/github/last-commit/semuconsulting/pyspartn)![Contributors](https://img.shields.io/github/contributors/semuconsulting/pyspartn.svg)![Open Issues](https://img.shields.io/github/issues-raw/semuconsulting/pyspartn)The `SPARTNReader` class is fully functional and is capable of parsing individual SPARTN transport-layer messages from a binary data stream containing *solely* SPARTN data.The `SPARTNMessage` class does not currently perform a full decrypt and decode of SPARTN payloads; it decodes the transport layer to identify message type/subtype, payload length and other key metadata. Full payload decode will be added in due course as and when voluntary development time permits - contributions welcome!**NB:** Decryption of SPARTN payloads requires a 128-bit AES Initialisation Vector (IV) derived from various fields in the message's transport layer. This in turn requires a `gnssTimeTag` value in 32-bit format (representing total seconds from the SPARTN time origin of 2010-01-01 00:00:00). If `timeTagtype = 1`, this can be derived directly from the message's transport layer. If `timeTagtype = 0`, however, it is necessary to convert an ambiguous 16-bit (half-days) timetag to 32-bit format. The [SPARTN 2.01 protocol specification](https://www.spartnformat.org/download/) provides *no details* on how to do this, but it appears to be necessary to use the 32-bit timetag or GPS Timestamp from an external concurrent SPARTN or UBX message from the same data source and stream. In other words, it appears SPARTN messages with `timeTagtype = 0` *cannot* be reliably decrypted in isolation.See https://portal.u-blox.com/s/question/0D52p0000CimfsOCQQ/spartn-initialization-vector-iv-details for discussion.Sphinx API Documentation in HTML format is available at [https://www.semuconsulting.com/pyspartn](https://www.semuconsulting.com/pyspartn).Contributions welcome - please refer to [CONTRIBUTING.MD](https://github.com/semuconsulting/pyspartn/blob/master/CONTRIBUTING.md).[Bug reports](https://github.com/semuconsulting/pyspartn/blob/master/.github/ISSUE_TEMPLATE/bug_report.md) and [Feature requests](https://github.com/semuconsulting/pyspartn/blob/master/.github/ISSUE_TEMPLATE/feature_request.md) - please use the templates provided.---## &lt;a name=&quot;installation&quot;&gt;Installation&lt;/a&gt;`pyspartn` is compatible with Python &gt;=3.7 and has no third-party library dependencies.In the following, `python` &amp; `pip` refer to the Python 3 executables. You may need to type `python3` or `pip3`, depending on your particular environment.![Python version](https://img.shields.io/pypi/pyversions/pyspartn.svg?style=flat)[![PyPI version](https://img.shields.io/pypi/v/pyspartn)](https://pypi.org/project/pyspartn/)![PyPI downloads](https://img.shields.io/pypi/dm/pyspartn.svg?style=flat)The recommended way to install the latest version of `pyspartn` is with[pip](http://pypi.python.org/pypi/pip/):```shellpython -m pip install --upgrade pyspartn```If required, `pyspartn` can also be installed into a virtual environment, e.g.:```shellpython3 -m pip install --user --upgrade virtualenvpython3 -m virtualenv envsource env/bin/activate (or env\Scripts\activate on Windows)(env) python3 -m pip install --upgrade pyspartn...deactivate```---## &lt;a name=&quot;reading&quot;&gt;Reading (Streaming)&lt;/a&gt;```class pyspartn.spartnreader.SPARTNReader(stream, **kwargs)```You can create a `SPARTNReader` object by calling the constructor with an active stream object. The stream object can be any data stream which supports a `read(n) -&gt; bytes` method (e.g. File or Serial, with or without a buffer wrapper). `pyspartn` implements an internal `SocketStream` class to allow sockets to be read in the same way as other streams (see example below).Individual SPARTN messages can then be read using the `SPARTNReader.read()` function, which returns both the raw binary data (as bytes) and the parsed data (as a `SPARTNMMessage`, via the `parse()` method). The function is thread-safe in so far as the incoming data stream object is thread-safe. `SPARTNReader` also implements an iterator.Example -  Serial input:```python&gt;&gt;&gt; from serial import Serial&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; stream = Serial('/dev/tty.usbmodem14101', 9600, timeout=3)&gt;&gt;&gt;spr = SPARTNReader(stream)&gt;&gt;&gt; (raw_data, parsed_data) = spr.read()&gt;&gt;&gt; print(parsed_data)```Example - File input (using iterator).```python&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; stream = open('spartndata.log', 'rb')&gt;&gt;&gt; spr = SPARTNReader(stream)&gt;&gt;&gt; for (raw_data, parsed_data) in spr: print(parsed_data)...```Example - Socket input (using iterator):```python&gt;&gt;&gt; import socket&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM):&gt;&gt;&gt; stream.connect((&quot;localhost&quot;, 50007))&gt;&gt;&gt; spr = SPARTNReader(stream)&gt;&gt;&gt; for (raw_data, parsed_data) in spr: print(parsed_data)```---## &lt;a name=&quot;parsing&quot;&gt;Parsing&lt;/a&gt;You can parse individual SPARTN messages using the static `SPARTNReader.parse(data)` function, which takes a bytes array containing a binary SPARTN message and returns a `SPARTNMessage` object.**NB:** Once instantiated, a `SPARTNMMessage` object is immutable.Example:```python&gt;&gt;&gt; from pyspartn import SPARTNReader&gt;&gt;&gt; msg = SPARTNReader.parse(b&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;)&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)&gt;```The `SPARTNMessage` object exposes different public attributes depending on its message type or 'identity':```python&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)&gt;&gt;&gt;&gt; msg.identity'SPARTN-1X-OCB-GPS'&gt;&gt;&gt; msg.gnssTimeTag3970```The `payload` attribute always contains the raw payload as bytes.---## &lt;a name=&quot;generating&quot;&gt;Generating&lt;/a&gt;```class pyspartn.spartnmessage.SPARTNMessage(**kwargs)```You can create an `SPARTNMessage` object by calling the constructor with the following keyword arguments:1. transport as bytesExample:```python&gt;&gt;&gt; from pyspartn import SPARTNMessage&gt;&gt;&gt; msg = SPARTNMessage(transport=b&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;)&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)&gt;```---## &lt;a name=&quot;serializing&quot;&gt;Serializing&lt;/a&gt;The `SPARTNMessage` class implements a `serialize()` method to convert a `SPARTNMMessage` object to a bytes array suitable for writing to an output stream.e.g. to create and send a `1005` message type:```python&gt;&gt;&gt; from serial import Serial&gt;&gt;&gt; serialOut = Serial('COM7', 38400, timeout=5)&gt;&gt;&gt; from pyspartn import SPARTNMessage&gt;&gt;&gt; msg = SPARTNMessage(transport=b&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;)&gt;&gt;&gt; print(msg)&lt;SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)&gt;&gt;&gt;&gt; output = msg.serialize()&gt;&gt;&gt; outputb&quot;s\x00\x12\xe2\x00|\x10[\x12H\xf5\t\xa0\xb4+\x99\x02\x15\xe2\x05\x85\xb7\x83\xc5\xfd\x0f\xfe\xdf\x18\xbe\x7fv \xc3`\x82\x98\x10\x07\xdc\xeb\x82\x7f\xcf\xf8\x9e\xa3ta\xad&quot;&gt;&gt;&gt; serialOut.write(output)```---## &lt;a name=&quot;examples&quot;&gt;Examples&lt;/a&gt;The following examples are available in the /examples folder:1. `sparnparser.py` - illustrates how to parse SPARTN messages from a binary input file.2. `rxmpmp_extract_spartn.py` - ilustrates how to parse SPARTN messages from the payload of a UBX RXM-PMP message output by an L-Band correction receiver (e.g. D9S).---## &lt;a name=&quot;gui&quot;&gt;Graphical Client&lt;/a&gt;A python/tkinter graphical GPS client which supports NMEA, UBX, RTCM3 and SPARTN protocols is available at: [https://github.com/semuconsulting/PyGPSClient](https://github.com/semuconsulting/PyGPSClient)---## &lt;a name=&quot;author&quot;&gt;Author &amp; License Information&lt;/a&gt;semuadmin@semuconsulting.com![License](https://img.shields.io/github/license/semuconsulting/pyspartn.svg)`pyspartn` is maintained entirely by unpaid volunteers. It receives no funding from advertising or corporate sponsorship. If you find the library useful, a small donation would be greatly appreciated![![Donations](https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif)](https://www.paypal.com/donate/?business=UL24WUA4XHNRY&amp;no_recurring=0&amp;item_name=The+SEMU+GNSS+Python+libraries+are+maintained+entirely+by+unpaid+volunteers.+All+donations+are+greatly+appreciated.&amp;currency_code=GBP)</longdescription>
</pkgmetadata>