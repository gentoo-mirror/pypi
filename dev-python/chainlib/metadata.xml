<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># chainlib# OverviewChainlib is an attempt at employing a universal interface to manipulateand access blockchains regardless of underlying architecture.It makes the following assumptions:- A block MUST have a interpretable serializable format, and contains  zero of more transactions- A transaction MUST have a interpretable serializable format- A transaction MUST have a nonce associated with a sender address. This  uniquely identifies the transaction on the network.- A transaction MUST have a fee bid to get the transaction executed on  the network (a network that does not care about bids can just ignore  this property).- A transaction signature MAY be locked to a particular chain identifier- The sender key of a transaction MAY be recovered by the signature of  the transactionChainlib is specifically designed for building command line interfacetools. It provides templates for handling configuration, argumentparsing and environment variable processing to build RPC connections tochain nodes for network queries and signing operations.# Command line interface provisionsThe base CLI provisions of `chainlib` simplifies the generation of asome base object instances by command line arguments, environmentvariables and configuration schemas.To use CLI provisions, `chainlib.cli` should be imported. Thisautomatically imports the following submodules:`arg`  Define and/or select command-line arguments`config`  Process configuration from command-line arguments and environmentvariables`rpc`  Create RPC connection from configuration`wallet`  Create wallet from configurationAny chain implementation building on `chainlib` should extend one ormore of the classes in these modules as needed, for example order to addmore configuration directives or command line argument flags.## Arguments`chainlib` defines a set of arguments that are common concepts forinterfacing with blockchain RPCs. Which arguments to use for a specificinstantiation can be defined using flags or symbols that define groupsof flags.This functionality is provided by the `chainlib.cli.args.ArgumentParser`class. It is a thin wrapper around the standard library`argparser.ArgumentParser` class, only adding a method to add argumentsto the instance based on the aforementioned flags.Following is a description of all pre-defined arguments that areavailable with `chainlib`.### -c, –configOverride configuration directives by reading ini-files in the givendirectory.Only configuration directives defined in the schema may be overridden.See [chainlib-config](#chainlib_002dconfig).### –env-prefixPrepend the given string to configuration directives when overriding byenvironment variablesNormally, if a configuration directive `FOO_BAR` exists, the environmentvariable `FOO_BAR` will override its value. If `--env-prefix BAZ` ispassed, the environment variable `BAZ_FOO_BAR` will be used instead tooverride the configuration directive `FOO_BAR`. The environment variable`FOO_BAR` will in this case *not* be used.### –heightQuery the chain RPC for results at a specific block height.Applies to *read* operations only.### -i, –chain-specChain specification string for the blockchain connection.This informs the implementing code about the architecture and deploymentof the blockchain network. It can also be relevant when creatingsignatures for the network (e.g. the EIP155 signature scheme for EVM).### –fee-limitUse the exact given fee multiplier to calculate the final bid to gettransaction executed on the network.How the fee semantics are employed depend on the chain implementation,but the final resulting bid *must always* be the product of`price * limit`.If *not* defined, the multiplier will be retrieved using the feesprovider defined by the implementation.### –fee-priceUse the exact given fee price as factor to calculate bid to gettransaction executed on the network.How the fee semantics are employed depend on the chain implementation,but the final resulting bid *must always* be the product of`price * limit`.If *not* defined, the current recommended price will be retrieved fromthe fees provider defined by the implementation.### -n, –namespaceAppend the given namespace to implicit configuration override paths.For example, if linux xdg-basedir path is used, a namespace argument of`foo` in implementation domain `bar` will result in the configurationoverride path `$HOME/.config/bar/foo`.### –nonceStart at the exact given nonce for the query.If *not* defined, the next nonce will be retrieved from the nonceprovider defined by the implementation.### -p, –providerURL of the chain RPC provider.### -s, –sendCLI tools building on chainlib should *never* submit to the network bydefault. Instead, resulting transactions ready for network submissionshould be output to terminal.If the implementation wishes to allow the user to directly send to thenetwork, the `-s` flag *must* be used for this purpose.### –seqBy default, a random RPC id will be generated for every RPC call.However, some RPCs will only allow sequential serial numbers to be usedas RPC ids, in which case this flag should be used.### –rawGenerate output suitable for passing to another command (e.g. UNIXpipes).### –rpc-authTells the implementer which RPC authentication scheme to use (e.g.&quot;basic&quot; for http basic).### –rpc-credentialsTells the implemented wich RPC authentication credentials to use forselected rpc authentication scheme (e.g. &quot;foo:bar&quot; for user foo pass barin scheme &quot;basic&quot; a.k.a. http basic).Credentials may for example also be a single value, like a private key,depending on the scheme and implementation.### –rpc-dialectTells the implementer to optimize query, result and error reporting forthe specific chain RPC backend dialect.### -u, –unsafeAllow arguments with blockchain addresses that are not checksumprotected.### -v, -vvDefines logging verbosity.Specifically, `-v` will set loglevel to `INFO`, wheres `-vv` will setloglevel to `DEBUG`.Default loglevel is up to the implementer, but it is advisable to keepit at `WARNING`.### -w, -wwToggles blocking in relation to chain RPC calls.If `-w` is set, the implementer should only block to obtain the resultof the *last, and as few as possible preceding* RPC transactions.If `-ww` is set, the implementer should block to retrieve the results of*all* of the preceding RPC transactions.If the implementation consists of a single transaction, the effect of`-w` and `-ww` will always be the same. Nonetheless, the implementationwill be forced to provide both arguments.If neither flag is set, the typical consequence is that the networktransaction hash of the last transaction will be returned.### -y, –key-fileRead private key from the given key file.# Rendering configurationsConfigurations in `chainlib` are processed, rendered and interfacedusing the `confini` python package.In short, `confini` extends the functionality of Python’s standardlibrary `configparser` package to allow merging of directives by parsingmultiple ini-files from multiple directories.Furthermore, it employs this same multi-file approach when defining aconfiguration *schema*, aswell as defining source to *override* thevalues defined in the schema.See &lt;https://gitlab.com/nolash/python-confini&gt; for further details on`confini`.## Configuration schema in chainlibThe chainlib configuration schema is, along with the provided commandline arguments and environment variables, designed to cover the settingsnecessary for most normal chain RPC operations.### Configuration mappingBelow follows a mapping of configuration directives to command linearguments and environment variables.Note that any configuration directives prefixed by `&quot;_&quot;` are not definedin the configuration schema, and are not overrideable by environmentvariables. These are values typically are only valid within the contextof a single execution of the implemented tool.| arg                     | config                | env                   ||-------------------------|-----------------------|-----------------------|| —                       | —                     | CONFINI_DIR [^1]      || -c. –config [^2]        | —                     | —                     || -i, –chain-spec         | CHAIN_SPEC            | CHAIN_SPEC            || –height                 | \_HEIGHT              | —                     || –fee-limit              | \_FEE_LIMIT           | —                     || –fee-price              | \_FEE_PRICE           | —                     || -n, –namespace          | CONFIG_USER_NAMESPACE | CONFIG_USER_NAMESPACE || –nonce                  | \_NONCE               | —                     || -p, –rpc-provider       | RPC_HTTP_PROVIDER     | RPC_HTTP_PROVIDER     || -a, -recipient          | \_RECIPIENT           | —                     || -e, –executable-address | \_EXEC_ADDRESS        | —                     || –rpc-auth               | RPC_AUTH              | RPC_AUTH              || —                       | RPC_PROVIDER          | RPC_PROVIDER [^3]     || —                       | RPC_SCHEME            | RPC_SCHEME [^4]       || –rpc-credentials        | RPC_CREDENTIALS       | RPC_CREDENTIALS       || –rpc-dialect            | RPC_DIALECT           | RPC_DIALECT           || -s, –send               | \_RPC_SEND            | —                     || –seq                    | \_SEQ                 | —                     || -u, –unsafe             | \_UNSAFE              | —                     || -w                      | \_WAIT                | —                     || -ww                     | \_WAIT_ALL            | —                     || -y, –key-file           | WALLET_KEY_FILE       | WALLET_KEY_FILE       || — [^5]                  | WALLET_PASSPHRASE     | WALLET_PASSPHRASE     |Currently `chainlib` only supports HTTP(S) when building RPC connectionsfrom command line arguments and configuration.# Base library contents## Pluggable method interfaceThe base chainlib blockchain interface is defined by the`chainlib.interface.ChainInterface class`. All of the methods in thisclass are unimplemented. Together they make up the methods necessary tointerface with *any* blockchain RPC.It is up to the implemenenter to choose which of the methods that areneeded in any particular context. The implementer would then connect themethod symbols with actual code.Most methods in this class will return objects that can be passed to anRPC connection that fits the block context.The available methods are:`block_latest`  Retrieve the latest block from the network`block_by_hash`  Retrieve the block corresponding to the given block hash`block_by_number`  Retrieve the block corresponding to the given block number`block_from_src`  Render a chainlib.block.Block derivative object from anarchitecture-dependent block representation source`block_to_src`  Render an architecture dependent transaction representation from thegiven Block object`tx_by_hash`  Retrieve the transaction corresponding to the given transaction hash`tx_by_block`  Retrieve the transaction corresponding to the given block hash andtransaction index`tx_receipt`  Retrieve the details of a confirmed transaction`tx_raw`  Generate an RPC query from raw transaction wire data`tx_pack`  Generate raw transaction wire data from an architecture dependenttransaction representation`tx_unpack`  Generate architecture dependent transaction representation from rawtransaction wire data`tx_from_src`  Render a chainlib.tx.Tx derivative object from an architecture-dependenttx representation source`tx_to_src`  Render an architecture dependent transaction representation from thegiven Tx object`address_safe`  Generate a checksum-safe network address`address_normal`  Generate an unambiguous network address`src_normalize`  Generate an unambiguous dictionary from the given dictionary. Forexample, this can mean generating camel-case key equivalents forsnake-case values.## The RPC interface`chainlib.connection` currently has support for HTTP(S) and UNIX socketRPC connections. Both rely on the Python *standard library* only(`urllib` and `socket`).It provides a thread-safe connection factory mechanism where connectionconstructor and location pairs are associated with string labels.There is also explicit builtin support for the JSONRPC RPC protocol,which allows for a pluggable error translater that can be customized toevery RPC &quot;dialect&quot; that needs to be supported (examples are &quot;geth&quot; and&quot;openethereum&quot; dialects of the Ethereum node fauna). Classes to handleJSONRPC results, requests and errors are defined in the`chainlib.jsonrpc` module.## Blocks and transactionsCommon block and transaction concepts are represented by the`chainlib.block.Block` and `chainlib.tx.Tx` objects. These are veryminimal base-classes that need to be extended for every blockchainimplementation that is to be supported.When building transactions, implementations of the`chainlib.sign.Signer`, `chainlib.nonce.NonceOracle` and`chainlib.fee.FeeOracle` interfaces will provide the transaction factoryobject of the implementation with signatures, transaction nonces andtransaction fee details respectively.## Other code featuresThis section lists features that are considered outside the core of the`chainlib` package### RPC authenticatorIf you are relying on an RPC provider instead of running your own node(although, you know you *should* run your own node, right?), then RPCauthentication may be relevant.`chainlib.auth` provides two authentication mechanisms for HTTP:`BasicAuth`  The HTTP basic Authorization scheme`CustomHeaderTokenAuth`  Define an arbitrary header name and value### Fee price aggregatorThe `chainlib.stat.ChainStat` class provides a simple implementation ofa running average aggregator for network fee prices. This can be used togenerate more precise fee price heuristics that in turn can be fed to aFee Oracle.[^1]: The `CONFINI_DIR` environment variable defines an explicit    configuration *schema* path.[^2]: The `-c` flag defines an explicit configuration *override* path.[^3]: RPC_PROVIDER will always be set to the same value as    RPC_HTTP_PROVIDER by default.[^4]: The RPC_SCHEME configuration directive is always set to ’http’ by    default.[^5]: This flag is not provided because it is simply not safe to define    passphrases as an argument on the command line.</longdescription>
</pkgmetadata>