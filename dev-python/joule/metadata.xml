<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://coveralls.io/repos/github/wattsworth/joule/badge.svg?branch=master  :target: https://coveralls.io/github/wattsworth/joule?branch=masterJoule========Joule is a data capture and signal processing engine. It allows you to buildrobust sensors using embedded systems such as theRaspberry Pi. Joule uses modules to build complex acquisitionand signal processing workflows from simple building blocks. Modules are user defined processes that are connectedtogether by data streams.Joule acts as a process manager, ensuring that modules start at systemboot and are restarted if they fail. Joule also collects runtimestatistics and logs for each module making it easy to detectbugs and find bottlenecks in processing pipelines.See https://wattsworth.net/joule for full documentation. To get started see:https://wattsworth.net/joule/quick_start.htmlStreams-------Streams are timestamped data flows that connect modules together.Streams can represent primary measurements such as readings from a currentsensor or derived measurements such as harmonic content. A stream hasone or more elements and can be viewed as a database table: :: ========= ====== ====== === ====== timestamp value1 value2 ... valueN ========= ====== ====== === ====== 1003421   0.0    10.5   ... 2.3 1003423   1.0    -8.0   ... 2.3 1003429   8.0    12.5   ... 2.3 1003485   4.0    83.5   ... 2.3 ========= ====== ====== === ======Modules-------Modules process streams. A module may receive zero, one or moreinput streams and may produce zero, one, or more output streams. WhileJoule does not enforce any structure on modules, we suggeststructuring your data pipeline with two types of modules: Readers, andFilters. Readers take no inputs. They directly manage a sensor (eg aTTY USB device) and generate an output data stream with sensorvalues. Filters take these streams as inputs and produce new outputs.Filters can be chained to produce complex behavior from simple,reusable building blocks.Example-------Using a light sensor and temperature sensor to detect occupancy in a room: ::    [Module]  a_stream        [ TempReader] --&gt; temp_values  --,    [LightReader] --&gt; light_values --+--&gt; [OccupancyFilter] --&gt; room_statusFeatures--------- Fast, lightweight- Highbandwidth signal processingInstallation------------Joule requires Python 3.10 or later. Install Joule by running:  $&gt; pip install -r requirements.txt  $&gt; pip install .It is also available through PyPi:  $&gt; python3 -m pip install jouleTo run the Joule daemon, you must have a PostgreSQL database running with the TimescaleDB extension installed.Full instructions on installing TimescaleDB can be found at https://docs.timescale.com/latest/getting-started/installationA script to automate the installation process on Ubuntu is included in this repository:  $&gt; sudo ./install-postgresql.shA script to create a database with the TimescaleDB extension is also included:  $&gt; sudo -u postgres psql &lt; ./postgresql-bootstrap.sqlNOTE: It is strongly recommended to change the default password in the bootstrap script before running it.Once the database has been configured you can initialize Joule using the appropriate DSN string:  $&gt; sudo joule admin initialize --dsn joule:joule@localhost:5432/jouleChange the password to match your configuration.Finally, use systemctl to manage the daemon service:  $&gt; sudo systemctl [enable|disable|start|stop|status] jouleTo connect to the Joule daemon, use the command line client:  $&gt; sudo -E joule admin authorizeSee https://wattsworth.net/joule for full documentation on using Joule.Tests-----To run unittests and collect coverage information:    $&gt; coverage run -m unittest    $&gt; coverage html    $&gt; python3 -m http.server --directory htmlcovTo run integration tests you must have Docker and access to the nilmdb image (for nilmdb tests)    $ joule/tests/e2e&gt; ./runner.sh [timescale|nilmdb]</longdescription>
</pkgmetadata>