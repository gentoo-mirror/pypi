<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/mester-root/rubx&quot;&gt;        &lt;img src=&quot;https://raw.githubusercontent.com/Mester-Root/rubx/main/icons/rubx-action.png&quot; alt=&quot;RuBx&quot; width=&quot;420&quot;&gt;    &lt;/a&gt;    &lt;br&gt;    &lt;b&gt;Rubika Client API Framework | Python 3&lt;/b&gt;    &lt;br&gt;    &lt;a href=&quot;https://github.com/Mester-Root/rubx/blob/main/README.md&quot;&gt;        Document    &lt;/a&gt;     ‚Ä¢    &lt;a href=&quot;https://t.me/rubx_library&quot;&gt;        Telegram    &lt;/a&gt;     ‚Ä¢    &lt;a href=&quot;https://rubika.ir/TheClient&quot;&gt;        Rubika    &lt;/a&gt;&lt;/p&gt;# Rubx Client Moduleis super fast------------## Messenger Methods:```pythonfrom rb import RubikaClient # rb: is main packagewith RubikaClient('session', platform='rubx',    proxy={'socks5':'127.0.0.1'}) as client: # please show all params   client.send_message('Hey There!', '@username') # username is all type```### Or```pythonfrom rb import RubikaClient as Clientdef respond(callable, params) -&gt; dict:    return callable(**params)with Client(...) as client:    print(        respond(            client.send_message,            dict(                chat_id=...,                text='**Hey** @User@ R U __My__ ``Friend`` and ~~My Love~~'                mention_user_ids=['u0...']),            )        )        # print(respond(client.send_message, dict(chat_id=..., sticker=True, emoji_character='üòú', sticker_id=..., )))```### Or```python# shorcutsfrom rb import RubikaClientfrom rb.responses import Selfwith RubikaClient(...) as client:    print(client == Self.Text(text='Hey', chat_id='chat-guid')) # to send a message        # print(client * 'chat-guid') # to get chat info    # print(client['chat-guid']) # to get a message from chat    # client['send_message'] = dict(text='Hey there', chat_id='chat-guid') # example to usage methods with setitem    # use the all operators```### if you forget the method name```pythonfrom rb import RubikaClientwith RubikaClient('session') as client:    print(client.getChatInfo(client, 'chat-guid')) # GetChatInfo, GETchatINFO, or ...    # normally: client.get_chat_info('chat-guid')```## Rubino Methods:``` pythonfrom rb import RubinoClientwith RubinoClient('session') as app:    app.create_page(...)```## Handler Methods:### Handler Examples```pythonfrom rb import Handler, EventBuilder, Filtersclient = Handler(...)# handlers: HandShake, ChatsUpdates, MessagesUpdatesclient.add_event_handling(func='ChatsUpdates', events=dict(get_chats=True, get_messages=True, pattern=('/start', 'Hey from rubx lib.')))@client.handlerdef hello(app, message: EventBuilder, event):    # to print message: print(message) or print(event)    # to use all methods: app.create_objcet_voice_chat(...)    message.respond(message.pattern, Filters.author) # filters: chat, group, channel, author```### Or```pythonfrom rb import Handler, Filters, Performersclient = Handler('session')def event(message):    message.respond(message.pattern, Filters.author)        client.add_event_handling(func=Performers.hand_shake, events=dict(get_chats=True, get_messages=True, pattern=('/start', 'Hi from rubx lib.')))client.starting = Trueclient.command_handler(event)```## To using HandShake(WebSocket):```pythonfrom rb import Handler, EventBuilder, Filters, Performersclient = Handler('abc...', 'u0...')client.add_event_handling(func=Performers.hand_shake, events=dict(get_messages=True, get_chats=False))@client.handlerdef update(app, update, event):    if update.message.text == '/start':        message.reply(text='Hello my dear', chat_id=update.message.author_object_guid, reply_to_message_id=update.message.message_id)        # or using repond: message.respond('Hey!', Filters.author)```## Async Methods:```pythonfrom rb import Client # Client: asycn readerasync def run(*args):    async with Client(...) as client:        result = await client.start(client.send_message, 'Hey! from rubx', 'chat-guid')        print(result)Client.run(run)```## Bot API Methods:### example for api methods send message text```pythonfrom rb import BotAPIwith BotAPI(__name__, 'token') as app:    app.send_message('chat-id', 'Hey!')```### Handler the Bot API```pythonfrom rb import BotAPIwith BotAPI(__name__, 'token') as app:    app.add_event_handling((r'\w{1}start .+', 'Hello'))        @app.handler    def update(methods, update, event):        ...```_____________________________Rubx - ‚ö°========  - Now the best `sync` and `asycn` library for Rubika's was developed  - ‚≠êÔ∏è Thanks **everyone** who has starred the project, it means a lot!**Rubx** is an sync **Python 3** rubika library to interact with Rubika's APIas a user or through a bot account (self API alternative).    üî¥ If you have code using Rubx before its 8.0.5 version, you must    read docs to learn how to migrate. üí°What is this?-------------üáÆüá∑ - Rubika is a popular messaging application. This library is meantto make it easy for you to write Python programs that can interactwith Rubika. Think of it as a wrapper that has already done theheavy job for you, so you can focus on developing an application.This module provides all the desired methods with a very simple and beautiful user interface and has a very high speed.Give your employer the best experience of a project.Updates - üåÄ :--------    - Complete documentation and optimization.___________________________## INSTALLING```bashpip install rubx```## UPGRADE```pip install rubx --upgrade```# self rubika client with python3 RUBX module ![](https://i.imgur.com/fe85aVR.png)_______________________[![Python 3|2.7|3.x](https://img.shields.io/badge/python-3|3.0|3.x-yellow.svg)](https://www.python.org/)[![License](https://img.shields.io/badge/license-GPLv2-red.svg)](https://raw.githubusercontent.com/Mester-Root/rubx/main/LICENSE)[![Creator](https://img.shields.io/badge/Telegram-Channel-33A8E3)](https://t.me/rubx_library)[![Telegram](https://img.shields.io/badge/-telegram-red?color=white&amp;logo=telegram&amp;logoColor=black)](https://t.me/clientUser)_______________________&lt;div align=&quot;center&quot;&gt;![issues](https://img.shields.io/github/issues/mester-root/rubx)![forks](https://img.shields.io/github/forks/mester-root/rubx)![version](https://img.shields.io/badge/version-v--1.0.1--beta-yellow)![stars](https://img.shields.io/github/stars/mester-root/rubx)![license](https://img.shields.io/github/license/mester-root/rubx)![icon](https://raw.githubusercontent.com/Mester-Root/rubx/main/logo.png)&lt;/div&gt;_______________________### **special**:- *[RUBX] &gt; a library 'official' for rubika messnger with client server.*- *[RUBX] &gt; use api's rubika, and full methods.*</longdescription>
</pkgmetadata>