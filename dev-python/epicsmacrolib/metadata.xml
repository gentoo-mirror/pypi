<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================epicsmacrolib===============================.. image:: https://img.shields.io/travis/pcdshub/epicsmacrolib.svg        :target: https://travis-ci.org/pcdshub/epicsmacrolib.. image:: https://img.shields.io/pypi/v/epicsmacrolib.svg        :target: https://pypi.python.org/pypi/epicsmacrolibepics-base compliant macro tools.---------What?---------Do you want epics-base compliant macro expansion, with all of its idiosyncracies?No? I didn't think so. This is a really boring project and you probably don't need it.---------Then why?---------This will be the future of the macro and IOC shell splitting tools in ``whatrecord``,removing its reliance on Cython and epicscorelibs.--------Examples--------``macros_from_string``.. code:: python    from epicsmacrolib import macros_from_string    macros_from_string(&quot;A=5,  B=$(A=3)&quot;)    # -&gt; {'A': '5', 'B': '$(A=3)'}``MacroContext``.. code:: python    from epicsmacrolib import MacroContext    ctx = MacroContext(use_environment=True)    ctx.define(TEST=&quot;A&quot;)    print(ctx.expand(&quot;TEST=$(TEST) SHELL=$(SHELL)&quot;))    # TEST=A SHELL=/bin/bash    ctx = MacroContext(use_environment=False)    ctx.define_from_string(&quot;A=5,B=6&quot;)    ctx.define(C=&quot;7&quot;)    print(ctx.expand(&quot;$(A) $(B) ${C} ${D=5} ${E}&quot;))    # -&gt; 5 6 7 5 $(E)    ctx = MacroContext(use_environment=False, show_warnings=True)    ctx.define_from_string(&quot;A=5,B=6&quot;)    ctx.define(C=&quot;7&quot;)    print(ctx.expand(&quot;$(A) $(B) ${C} ${D=5} ${E}&quot;))    # -&gt; 5 6 7 5 $(E,undefined)    ctx.define_from_string(&quot;A=5,B=$(B)&quot;)    print(ctx.expand(&quot;$(A) $(B)&quot;))    # -&gt; 5 $(B,recursive)    with ctx.scoped(A=&quot;10&quot;, B=&quot;0&quot;):        print(ctx.expand(&quot;$(A)&quot;))        # -&gt; 10        with ctx.scoped(A=&quot;0&quot;):            print(ctx.expand(&quot;$(A)&quot;))            # -&gt; 0        print(ctx.expand(&quot;$(A)&quot;))        # -&gt; 10``split_iocsh_line`` (like ``shlex.split``).. code:: python    from epicsmacrolib import split_iocsh_line    split_iocsh_line(&quot;dbLoadRecords &gt; output_filename&quot;)    # -&gt; IocshSplit(    #     argv=[&quot;dbLoadRecords&quot;],    #     redirects={1: IocshRedirect(fileno=1, name=&quot;output_filename&quot;, mode=&quot;w&quot;)},    #     error=None,    # )--------License--------The Python portions of this code is under a BSD-3 clause license(``LicenseRef-BSD-3-Clause-SLAC``, see ``LICENSE``).Portions of epics-base have been vendored in ``src`` under its original license(see ``src/LICENSE``).</longdescription>
</pkgmetadata>