<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Fractal Specifications&gt; Fractal Specifications is an implementation of the specification pattern for building SOLID logic for your Python applications.[![PyPI Version][pypi-image]][pypi-url][![Build Status][build-image]][build-url][![Code Coverage][coverage-image]][coverage-url][![Code Quality][quality-image]][quality-url]&lt;!-- Badges --&gt;[pypi-image]: https://img.shields.io/pypi/v/fractal-specifications[pypi-url]: https://pypi.org/project/fractal-specifications/[build-image]: https://github.com/douwevandermeij/fractal-specifications/actions/workflows/build.yml/badge.svg[build-url]: https://github.com/douwevandermeij/fractal-specifications/actions/workflows/build.yml[coverage-image]: https://codecov.io/gh/douwevandermeij/fractal-specifications/branch/main/graph/badge.svg?token=BOC1ZUJISV[coverage-url]: https://codecov.io/gh/douwevandermeij/fractal-specifications[quality-image]: https://api.codeclimate.com/v1/badges/455ddff201b43f9b1025/maintainability[quality-url]: https://codeclimate.com/github/douwevandermeij/fractal-specifications## Installation```shpip install fractal-specifications```## BackgroundThis project comes with an [article on Medium](https://douwevandermeij.medium.com/specification-pattern-in-python-ff2bd0b603f6),which sets out what the specification pattern is, what the benefits are and how it can be used.## DevelopmentSetup the development environment by running:```shmake depspre-commit install```Happy coding.Occasionally you can run:```shmake lint```This is not explicitly necessary because the git hook does the same thing.**Do not disable the git hooks upon commit!**## UsageSpecifications can be used to encapsulate business rules.An example specification is `EqualsSpecification(&quot;maximum_speed&quot;, 25)`.A specification implements the `is_satisfied_by(obj)` function that returns `True` or `False`,depending on the state of the `obj` that is passed into the function as parameter.In our example, the `obj` needs to provide the attribute `maximum_speed`.### Full code exampleThis example includes a repository to show an application of specifications.```pythonfrom abc import ABC, abstractmethodfrom dataclasses import dataclassfrom typing import Listfrom fractal_specifications.generic.operators import EqualsSpecificationfrom fractal_specifications.generic.specification import Specification@dataclassclass Road:    maximum_speed: int    @staticmethod    def slow_roads_specification() -&gt; Specification:        return EqualsSpecification(&quot;maximum_speed&quot;, 25)class RoadRepository(ABC):    @abstractmethod    def get_all(self, specification: Specification) -&gt; List[Road]:        ...    def slow_roads(self) -&gt; List[Road]:        return self.get_all(Road.slow_roads_specification())class PythonListRoadRepository(RoadRepository):    def __init__(self, roads: List[Road]):        self.roads = roads    def get_all(self, specification: Specification) -&gt; List[Road]:        return [            road for road in self.roads            if specification.is_satisfied_by(road)        ]if __name__ == &quot;__main__&quot;:    road_repository = PythonListRoadRepository([        Road(maximum_speed=25),        Road(maximum_speed=50),        Road(maximum_speed=80),        Road(maximum_speed=100),    ])    print(road_repository.slow_roads())```## Serialization / deserializationSpecifications can be exported as dictionary and loaded as such via `spec.to_dict()` and `Specification.from_dict(d)` respectively.Specifications can also be exported to JSON via `spec.dumps()`. This essentially is a `json.dumps()` call around `spec.to_dict()`.JSON specification strings can be loaded directly as Specification object via `Specification.loads(s)`.Via this mechanism, specifications can be used outside the application runtime environment. For example, in a database or sent via API.### Domain Specific Language (DSL)Apart from basic JSON serialization, Fractal Specifications also comes with a DSL.Example specifications DSL strings:- `field_name == 10`  - This is a simple comparison expression with a numerical value.- `obj.id == 10`  - This is a comparison expression on an object attribute with a numerical value.- `name != 'John'`  - This is another comparison expression with a string value.- `age &gt;= 18 &amp;&amp; is_student == True`  - This is a logical AND operation between two comparison expressions and a boolean value.- `roles contains &quot;admin&quot; || roles contains &quot;editor&quot;`  - This is a logical OR operation between two values of a list field.- `!(active == True)`  - This is a negation of an expression.- `name in ['John', 'Jane']`  - This is an in_expression that checks if a field value is present in a list of values.- `email matches \&quot;[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\&quot;`  - This is a regex match_expression that checks if a field value matches a given pattern.- `items contains &quot;element&quot;`  - This is a contains_expression that checks if a list field contains a given value    - Contains can sometimes also be used with substrings, e.g, when using `is_satisfied_by`.- `salary is None`  - This is an is_none_expression that checks if a field value is None.- `#`  - This is an empty_expression that represents an empty expression.Specifications can be loaded from a DSL string with `spec = Specification.load_dsl(dsl_string)`.\Specifications can be serialized to a DSL string using `spec.dump_dsl()`.Example:```pythonfrom dataclasses import dataclassfrom fractal_specifications.generic.specification import Specification@dataclassclass Demo:    field: strspec = Specification.load_dsl(&quot;field matches 'f.{20}s'&quot;)spec.is_satisfied_by(Demo(&quot;fractal_specifications&quot;))  # True```## ContribThis library also comes with some additional helpers to integrate the specifications easier with existing backends,such as the Django ORM.### DjangoSpecifications can easily be converted to (basic) Django ORM filters with `DjangoOrmSpecificationBuilder`.\Using this contrib package requires `django` to be installed.Query support:* [x] Direct model fields `field=value`* [ ] Indirect model fields `field__sub_field=value`  * Implies recursive subfields `field__sub_field__sub_sub_field=value`  * This holds for all operators below as well* [x] Equals `field=value` or `__exact`* [x] Less than `__lt`* [x] Less than equal `__lte`* [x] Greater than `__gt`* [x] Greater than equal `__gte`* [x] In `__in`* [x] And `Q((field_a=value_a) &amp; (field_b=value_b))`* [x] Or `Q((field_a=value_a) | (field_b=value_b))`* [x] Partial regex `__regex=r&quot;.* value .*&quot;`* [ ] Full regex `__regex`* [ ] Contains regex `__contains`* [x] Is null `__isnull````pythonfrom abc import ABC, abstractmethodfrom django.db import modelsfrom typing import Listfrom fractal_specifications.contrib.django.specifications import DjangoOrmSpecificationBuilderfrom fractal_specifications.generic.operators import EqualsSpecificationfrom fractal_specifications.generic.specification import Specificationclass Road(models.Model):    maximum_speed = models.IntegerField()    @staticmethod    def slow_roads_specification() -&gt; Specification:        return EqualsSpecification(&quot;maximum_speed&quot;, 25)class RoadRepository(ABC):    @abstractmethod    def get_all(self, specification: Specification) -&gt; List[Road]:        ...    def slow_roads(self) -&gt; List[Road]:        return self.get_all(Road.slow_roads_specification())class DjangoRoadRepository(RoadRepository):    def get_all(self, specification: Specification) -&gt; List[Road]:        if q := DjangoOrmSpecificationBuilder.build(specification):            return Road.objects.filter(q)        return Road.objects.all()if __name__ == &quot;__main__&quot;:    road_repository = DjangoRoadRepository()    print(road_repository.slow_roads())```You could of course also skip the repository in between and do the filtering directly:```pythonfrom fractal_specifications.contrib.django.specifications import DjangoOrmSpecificationBuilderq = DjangoOrmSpecificationBuilder.build(Road.slow_roads_specification())Road.objects.filter(q)```### SQLAlchemyQuery support:* [x] Direct model fields `{field: value}`* [x] And `{field: value, field2: value2}`* [x] Or `[{field: value}, {field2: value2}]````pythonfrom fractal_specifications.contrib.sqlalchemy.specifications import SqlAlchemyOrmSpecificationBuilderq = SqlAlchemyOrmSpecificationBuilder.build(specification)```### ElasticsearchUsing this contrib package requires `elasticsearch` to be installed.Query support:* [x] Exact term match (Equals) `{&quot;match&quot;: {&quot;%s.keyword&quot; % field: value}}`* [x] String searches (In) `{&quot;query_string&quot;: {&quot;default_field&quot;: field, &quot;query&quot;: value}}`* [x] And `{&quot;bool&quot;: {&quot;must&quot;: [...]}}`* [x] Or `{&quot;bool&quot;: {&quot;should&quot;: [...]}}`* [x] Less than `{&quot;bool&quot;: {&quot;filter&quot;: [{&quot;range&quot;: {field: {&quot;lt&quot;: value}}}]}}`* [x] Less than equal `{&quot;bool&quot;: {&quot;filter&quot;: [{&quot;range&quot;: {field: {&quot;lte&quot;: value}}}]}}`* [x] Greater than `{&quot;bool&quot;: {&quot;filter&quot;: [{&quot;range&quot;: {field: {&quot;gt&quot;: value}}}]}}`* [x] Greater than equal `{&quot;bool&quot;: {&quot;filter&quot;: [{&quot;range&quot;: {field: {&quot;gte&quot;: value}}}]}}````pythonfrom elasticsearch import Elasticsearchfrom fractal_specifications.contrib.elasticsearch.specifications import ElasticSpecificationBuilderq = ElasticSpecificationBuilder.build(specification)Elasticsearch(...).search(body={&quot;query&quot;: q})```### Google FirestoreQuery support:* [x] Equals `(field, &quot;==&quot;, value)`* [x] And `[(field, &quot;==&quot;, value), (field2, &quot;==&quot;, value2)]`* [x] Contains `(field, &quot;array-contains&quot;, value)`* [x] In `(field, &quot;in&quot;, value)`* [x] Less than `(field, &quot;&lt;&quot;, value)`* [x] Less than equal `(field, &quot;&lt;=&quot;, value)`* [x] Greater than `(field, &quot;&gt;&quot;, value)`* [x] Greater than equal `(field, &quot;&gt;=&quot;, value)````pythonfrom fractal_specifications.contrib.google_firestore.specifications import FirestoreSpecificationBuilderq = FirestoreSpecificationBuilder.build(specification)```### MongoQuery support:* [x] Equals `{field: {&quot;$eq&quot;: value}}`* [x] And `{&quot;$and&quot;: [{field: {&quot;$eq&quot;: value}}, {field2: {&quot;$eq&quot;: value2}}]}`* [x] Or `{&quot;or&quot;: [{field: {&quot;$eq&quot;: value}}, {field2: {&quot;$eq&quot;: value2}}]}`* [x] In `{field: {&quot;$in&quot;: value}}`* [x] Less than `{field: {&quot;$lt&quot;: value}}`* [x] Less than equal `{field: {&quot;$lte&quot;: value}}`* [x] Greater than `{field: {&quot;$gt&quot;: value}}`* [x] Greater than equal `{field: {&quot;$gte&quot;: value}}`* [x] Regex string match `{field: {&quot;$regex&quot;: &quot;.*%s.*&quot; % value}}````pythonfrom fractal_specifications.contrib.mongo.specifications import MongoSpecificationBuilderq = MongoSpecificationBuilder.build(specification)```### PandasPandas support comes in two different flavours.You can use _columns_ or _indexes_ to filter on.#### Filtering on columnsQuery support:* [x] Equals `df[field] == value`* [x] And `(df[field] == value) &amp; (df[field2] == value2)`* [x] Or `(df[field] == value) | (df[field2] == value2)`* [x] In `df[field].isin[value]`* [x] Less than `df[field] &lt; value`* [x] Less than equal `df[field] &lt;= value`* [x] Greater than `df[field] &gt; value`* [x] Greater than equal `df[field] &gt;= value`* [x] Is null `df[field].isna()````pythonimport pandas as pdfrom fractal_specifications.contrib.pandas.specifications import PandasSpecificationBuilderfrom fractal_specifications.generic.operators import EqualsSpecification, IsNoneSpecificationdf = pd.DataFrame(    {        &quot;id&quot;: [1, 2, 3, 4],        &quot;name&quot;: [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;],        &quot;field&quot;: [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;, None],    })print(df)#    id name field# 0   1   aa     x# 1   2   bb     y# 2   3   cc     z# 3   4   dd  Nonespecification = EqualsSpecification(&quot;id&quot;, 4)f1 = PandasSpecificationBuilder.build(specification)print(f1(df))#    id name field# 3   4   dd  Nonespecification = IsNoneSpecification(&quot;field&quot;)f2 = PandasSpecificationBuilder.build(specification)print(f2(df))#    id name field# 3   4   dd  Noneprint(df.pipe(f1).pipe(f2))#    id name field# 3   4   dd  Nonespecification = EqualsSpecification(&quot;id&quot;, 4) &amp; IsNoneSpecification(&quot;field&quot;)f3 = PandasSpecificationBuilder.build(specification)print(f3(df))#    id name field# 3   4   dd  None```#### Filtering on indexesQuery support:* [x] Equals `df.index.get_level_values(field) == value`* [x] And `(df.index.get_level_values(field) == value) &amp; (df.index.get_level_values(field2) == value2)`* [x] Or `(df.index.get_level_values(field) == value) | (df.index.get_level_values(field2) == value2)`* [x] In `df.index.get_level_values(field).isin[value]`* [x] Less than `df.index.get_level_values(field) &lt; value`* [x] Less than equal `df.index.get_level_values(field) &lt;= value`* [x] Greater than `df.index.get_level_values(field) &gt; value`* [x] Greater than equal `df.index.get_level_values(field) &gt;= value`* [x] Is null `df.index.get_level_values(field).isna()````pythonimport pandas as pdfrom fractal_specifications.contrib.pandas.specifications import PandasIndexSpecificationBuilderfrom fractal_specifications.generic.operators import EqualsSpecification, GreaterThanSpecificationdf = pd.DataFrame({&quot;month&quot;: [1, 4, 7, 10],                   &quot;year&quot;: [2012, 2014, 2013, 2014],                   &quot;sale&quot;: [55, 40, 84, 31]})df = df.set_index(&quot;month&quot;)print(df)#        year  sale# month# 1      2012    55# 4      2014    40# 7      2013    84# 10     2014    31specification = EqualsSpecification(&quot;month&quot;, 4)f1 = PandasIndexSpecificationBuilder.build(specification)print(f1(df))#        year  sale# month# 4      2014    40df = df.reset_index()df = df.set_index(&quot;year&quot;)specification = GreaterThanSpecification(&quot;year&quot;, 2013)f2 = PandasIndexSpecificationBuilder.build(specification)print(f2(df))#       month  sale# year# 2014      4    40# 2014     10    31df = df.reset_index()df = df.set_index([&quot;month&quot;, &quot;year&quot;])print(df.pipe(f1).pipe(f2))#             sale# month year# 4     2014    40specification = EqualsSpecification(&quot;month&quot;, 4) &amp; GreaterThanSpecification(&quot;year&quot;, 2013)f3 = PandasIndexSpecificationBuilder.build(specification)print(f3(df))#             sale# month year# 4     2014    40```</longdescription>
</pkgmetadata>