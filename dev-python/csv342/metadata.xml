<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>csv342======csv342 is a Python module similar to the the csv module in the standardlibrary. Under Python 3, it just calls the standard csv module. UnderPython 2, it provides a Python 3 like interface to reading and writing CSVfiles, in particular concerning non ASCII characters.It is distributed under the BSD license. The source code is available fromhttps://github.com/roskakori/csv342.Installation------------To install, simply run::  $ pip install --upgrade csv342Alternatively you can download the distributin archive fromhttp://pypi.python.org/pypi/csv342/, unpack it and copy ``csv342.py`` intoyour application path.Examples--------First, consider changing all string literals in you source code to``unicode`` instead of ``str`` under Python 2 using to avoid themessy ``u`` string prefix.&gt;&gt;&gt; from __future__ import unicode_literalsThe following examples assume you did that, making your Python 2 code looklike Python 3 even more.Once you import ``csv342`` using&gt;&gt;&gt; import csv342 as csvyour code can call CSV functions the same way independent of whether it runsunder Python 2 or 3. First, let's write a few test data to a ``io.StringIO``:&gt;&gt;&gt; import io&gt;&gt;&gt; csv_stream = io.StringIO()&gt;&gt;&gt; csv_writer = csv.writer(csv_stream)&gt;&gt;&gt; csv_writer.writerow(['a', 'b'])&gt;&gt;&gt; csv_writer.writerow(['1', '&quot;x&quot;'])&gt;&gt;&gt; csv_content = csv_stream.getvalue()&gt;&gt;&gt; str(csv_content)'a,b\r\n1,&quot;&quot;&quot;x&quot;&quot;&quot;\r\n'To read data from a ``io.StringIO`` use:&gt;&gt;&gt; csv_stream = io.StringIO('a,b\r\n1,&quot;&quot;&quot;x&quot;&quot;&quot;\r\n')&gt;&gt;&gt; csv_reader = csv.reader(csv_stream)&gt;&gt;&gt; for row in csv_reader:&gt;&gt;&gt;     print(row)To read a UTF-8 encoded CSV file with non ASCII characters use:&gt;&gt;&gt; csv_path = os.path.join('test', 'utf-8.csv')&gt;&gt;&gt; with io.open(csv_path, encoding='utf-8', newline='') as csv_file:&gt;&gt;&gt;     csv_reader = csv.reader(csv_file, delimiter=',')&gt;&gt;&gt;     for row in csv_reader:&gt;&gt;&gt;         print('row {0:d}: data={1}'.format(csv_reader.line_num, row))Features--------* Supports Python 2's ``unicode`` strings.* Provides ``reader``, ``writer``, ``DictReader`` and ``DictWriter``.* Supports reading and writing with files, ``io.StringIO`` etc.* Rejects attempts to read or write with ``cStringIO`` or  ``StringIO.StringIO`` (which do not really work with ``unicode``);  use ``io.StringIO`` instead.Limitations-----------* All limitations of the standard ``csv`` module apply.* Uses the standard ``csv.Sniffer`` under Python 2.* Requires Python 2.6 or later.Performance-----------Processing a CSV with Python 2 using ``csv342`` is about 30% slower thanprocessing it with Python 3. This is probably due the fact that under Python2 there is an intermediate translation to UTF-8 using pure Python code whilein Python 3 uses mostly native code.Provided you have both Python 2 and 3 installed on the same machine, you cantest this yourself running::    python3 test/performance.py    python2 test/performance.pyOn an ancient laptop with a core 2 duo Intel CPU and Ubuntu 14.04, this takes10.2 seconds respectively 13.6 seconds.License-------Copyright (c) 2016-2020, Thomas AglassingerAll rights reserved.Distributed under the BSD License. For more information, see LICENSE.txt.Version history---------------Version 1.0.1, 2020-05-05* Fixed inconsistent license information in ``setup.py`` (contributed by  Stephen DiCato).Version 1.0.0, 2018-04-02* Fixed ``DictReader`` so that it can now read from a list of lines  (`issue #1 &lt;https://github.com/roskakori/csv342/issues/1&gt;`_, contributed by  Lucas Wiman).* Fixed ``AttributeError`` in ``StringIO`` test (contributed by Lucas Wiman).Version 0.2, 2016-04-17* Fixed version number when running under Python 3.* Fixed helper constant ``IS_PYHTON2`` which always was ``False``.* Added remaining symbols from Python 2's ``csv`` module.Version 0.1, 2016-04-16* Initial release.</longdescription>
</pkgmetadata>