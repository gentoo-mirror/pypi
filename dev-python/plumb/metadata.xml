<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================The Plumb Library=================:Author:   Spectro:Date:     2018-10-01:Version:  $Revision: 1.2.5 $:License:  MIT LicenseProvides higher level interfaces to work with data producers and consumers. ``plumb`` supports five backends: RabbitMQ,Redis, Amazon SQS and SNS services, Kafka, and a memory implementation (designed to be a testing artifact).The focus is on **python 3** and **boto3** (for AWS support).-------The API-------``plumb`` uses the concepts of *Source* and *Sink* to abstract the backend. Data is transfered encoded in JSON, and bydefault compressed using zlib.To fetch raw packages use a &quot;Package Source&quot; object, which handles a backend connection and its configuration andexposes a &quot;get()&quot; method. Similarly, a &quot;Package Sink&quot; object exposes a &quot;put(pkg)&quot; method.You can either create the Sources and Sinks directly by instantiating them from their packages or use the conveniencefactory functions exposed in the ``plumb`` package. This functions receive a JSON with the configuration for the Sourcesor Sinks and returns a list of such configured devices.-----Tests-----The library is provided with unit tests and integration tests for Redis and AWS. To run the unit tests::  python setup.py testor using ``nose``::  nosetests tests/unitThe integration tests can be run using nose::  nosetests tests/integration**Keep in mind** that ``boto3`` will fetch your AWS credentials. It currently tries the environment variables ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``, then tries the ``~/.aws`` directory. For details, see `Boto3 Credentials Configuration &lt;http://boto3.readthedocs.io/en/latest/guide/configuration.html#configuring-credentials&gt;`__.</longdescription>
</pkgmetadata>