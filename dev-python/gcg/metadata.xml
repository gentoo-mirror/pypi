<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>README======**GCG** stands for *Git Changelog Generator*.Rationale---------Keeping a reasonable changelog is an invaluable asset for everyone who triesto track progress of a project or figure out whether their issuehas or has not be fixed.In Linux world, such changelogs are often embedded into packages, forexample RPM has an optional section in the *spec* file (``%changelog``)and Debian versioning goes even further - it explicitly **depends**on a proper version information inside the changelog to buildand maintain the package(s).There are good reasons why the log is ideally maintained manually,you can read all about it at https://keepachangelog.com/en/That said, it's not all black and white. A couple of questions:- what if you spend a lot of work making sure your commit descriptions  are telling the story; should this work be disregarded and repeated  in the changelog?- what if the reality kicks in, project members keep forgetting to update  the changelog (or it is &quot;yet another menial task&quot;)?- what if you need to maintain the log in multiple formats?If advice from keepchangelog.com doesn't address your questions,you don't want to tie yourself to a specific Git manager (like  Github,Gitlab, Bitbucket) and as a project you're committed to maintain sensibleGit commit descriptions - gcg might be just the fit for you.Releases========At this point, *gcg* official packages are created and maintained only forPython; they're available via PyPI index: https://pypi.org/project/gcgThat said, unofficial packages for most common distribution formats canbe obtained from the following repositories:* RPM: https://bintray.com/weakcamel/yum-oss* DEB: https://bintray.com/weakcamel/deb-ossTo use the DEB packages from those repositories, you need to installthe [Bintray GPG key](https://bintray.com/user/downloadSubjectPublicKey?username=weakcamel);otherwise your `apt-get update` will fail.For example::    # either of:    curl -qL https://bintray.com/user/downloadSubjectPublicKey?username=bintray | sudo apt-key add -    curl -qL https://bintray.com/user/downloadSubjectPublicKey?username=weakcamel | sudo apt-key add -PIP---Only tagged packages are uploaded to https://pypi.org index,test versions will be made available underhttps://test.pypi.org/manage/project/gcg/releases/TravisCI builds try to ensure the version (``version.txt``) is unique foreach CI build by adding ``.dev&lt;TRAVIS_BUILD_NUMBER&gt;`` suffixfor development versions of the package... tip::    See also: https://packaging.python.org/tutorials/installing-packages/Build=====Prerequisites:--------------Base:- python2.7- pip- virtualenvTo build RPMs:- rpmbuildTo build DEB packages you need to set up Debian toolchain, which is notin scope of this README.Build-----We recommend you build this package using ``virtualenv``.To set it up, run for example:::    virtualenv venv    source venv/bin/activateTo test &amp; build a binary Python package, use:.. code:: bash    python setup.py test bdistRPM:.. code:: bash    python setup.py test bdist_rpmDEB:.. code:: bash    python setup.py --command-packages=stdeb.command bdist_debUsage=====To see available options, run as:.. code:: bash    $ gcg --helpExisting templates------------------The ``gcg`` module of the application comes with some default Jinja2templates to render the changelog information.Current implementation does not yet support using non-standard outputtemplates. The anticipated design would to be pass a template directoryas a command-line argument, that's still to be determined though.DEB template~~~~~~~~~~~~Based on https://www.debian.org/doc/debian-policy/#s-dpkgchangelogRPM template~~~~~~~~~~~~Based on one of allowed formats listed athttps://fedoraproject.org/wiki/Packaging:Guidelines?rd=Packaging/Guidelines#Changelogs</longdescription>
</pkgmetadata>