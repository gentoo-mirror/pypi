<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>urlpath provides URL manipulator class that extends `pathlib.PurePath &lt;https://docs.python.org/3/library/pathlib.html#pure-paths&gt;`_.====================================================================================================================================.. image:: https://img.shields.io/travis/chrono-meter/urlpath.svg    :target: https://travis-ci.org/chrono-meter/urlpath.. image:: https://img.shields.io/pypi/v/urlpath.svg    :target: https://pypi.python.org/pypi/urlpath.. image:: https://img.shields.io/pypi/l/urlpath.svg    :target: http://python.org/psf/licenseDependencies------------* Python 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10* `Requests &lt;http://docs.python-requests.org/&gt;`_* `JMESPath &lt;https://pypi.org/project/jmespath/&gt;`_ (Optional)* `WebOb &lt;http://webob.org/&gt;`_ (Optional)Install-------``pip install urlpath``Examples--------Import::    &gt;&gt;&gt; from urlpath import URLCreate object::    &gt;&gt;&gt; url = URL(    ...     'https://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment')Representation::    &gt;&gt;&gt; url    URL('https://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment')    &gt;&gt;&gt; print(url)    https://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment    &gt;&gt;&gt; url.as_uri()    'https://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment'    &gt;&gt;&gt; url.as_posix()    'https://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment'Access `pathlib.PurePath` compatible properties::    &gt;&gt;&gt; url.drive    'https://username:password@secure.example.com:1234'    &gt;&gt;&gt; url.root    '/'    &gt;&gt;&gt; url.anchor    'https://username:password@secure.example.com:1234/'    &gt;&gt;&gt; url.path    '/path/to/file.ext'    &gt;&gt;&gt; url.name    'file.ext'    &gt;&gt;&gt; url.suffix    '.ext'    &gt;&gt;&gt; url.suffixes    ['.ext']    &gt;&gt;&gt; url.stem    'file'    &gt;&gt;&gt; url.parts    ('https://username:password@secure.example.com:1234/', 'path', 'to', 'file.ext')    &gt;&gt;&gt; url.parent    URL('https://username:password@secure.example.com:1234/path/to')Access scheme::    &gt;&gt;&gt; url.scheme    'https'Access netloc::    &gt;&gt;&gt; url.netloc    'username:password@secure.example.com:1234'    &gt;&gt;&gt; url.username    'username'    &gt;&gt;&gt; url.password    'password'    &gt;&gt;&gt; url.hostname    'secure.example.com'    &gt;&gt;&gt; url.port    1234Access query::    &gt;&gt;&gt; url.query    'field1=1&amp;field2=2&amp;field1=3'    &gt;&gt;&gt; url.form_fields    (('field1', '1'), ('field2', '2'), ('field1', '3'))    &gt;&gt;&gt; url.form    &lt;FrozenMultiDict {'field1': ('1', '3'), 'field2': ('2',)}&gt;    &gt;&gt;&gt; url.form.get_one('field1')    '1'    &gt;&gt;&gt; url.form.get_one('field3') is None    TrueAccess fragment::    &gt;&gt;&gt; url.fragment    'fragment'Path operation::    &gt;&gt;&gt; url / 'suffix'    URL('https://username:password@secure.example.com:1234/path/to/file.ext/suffix')    &gt;&gt;&gt; url / '../../rel'    URL('https://username:password@secure.example.com:1234/path/to/file.ext/../../rel')    &gt;&gt;&gt; (url / '../../rel').resolve()    URL('https://username:password@secure.example.com:1234/path/rel')    &gt;&gt;&gt; url / '/'    URL('https://username:password@secure.example.com:1234/')    &gt;&gt;&gt; url / 'http://example.com/'    URL('http://example.com/')Replace components::    &gt;&gt;&gt; url.with_scheme('http')    URL('http://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment')    &gt;&gt;&gt; url.with_netloc('www.example.com')    URL('https://www.example.com/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment')    &gt;&gt;&gt; url.with_userinfo('joe', 'pa33')    URL('https://joe:pa33@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment')    &gt;&gt;&gt; url.with_hostinfo('example.com', 8080)    URL('https://username:password@example.com:8080/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#fragment')    &gt;&gt;&gt; url.with_fragment('new fragment')    URL('https://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2&amp;field1=3#new fragment')    &gt;&gt;&gt; url.with_components(username=None, password=None, query='query', fragment='frag')    URL('https://secure.example.com:1234/path/to/file.ext?query#frag')Replace query::    &gt;&gt;&gt; url.with_query({'field3': '3', 'field4': [1, 2, 3]})    URL('https://username:password@secure.example.com:1234/path/to/file.ext?field3=3&amp;field4=1&amp;field4=2&amp;field4=3#fragment')    &gt;&gt;&gt; url.with_query(field3='3', field4=[1, 2, 3])    URL('https://username:password@secure.example.com:1234/path/to/file.ext?field3=3&amp;field4=1&amp;field4=2&amp;field4=3#fragment')    &gt;&gt;&gt; url.with_query('query')    URL('https://username:password@secure.example.com:1234/path/to/file.ext?query#fragment')    &gt;&gt;&gt; url.with_query(None)    URL('https://username:password@secure.example.com:1234/path/to/file.ext#fragment')Ammend query::    &gt;&gt;&gt; url.with_query(field1='1').add_query(field2=2)    URL('https://username:password@secure.example.com:1234/path/to/file.ext?field1=1&amp;field2=2#fragment') Do HTTP requests::    &gt;&gt;&gt; url = URL('https://httpbin.org/get')    &gt;&gt;&gt; url.get()    &lt;Response [200]&gt;    &gt;&gt;&gt; url = URL('https://httpbin.org/post')    &gt;&gt;&gt; url.post(data={'key': 'value'})    &lt;Response [200]&gt;    &gt;&gt;&gt; url = URL('https://httpbin.org/delete')    &gt;&gt;&gt; url.delete()    &lt;Response [200]&gt;    &gt;&gt;&gt; url = URL('https://httpbin.org/patch')    &gt;&gt;&gt; url.patch(data={'key': 'value'})    &lt;Response [200]&gt;    &gt;&gt;&gt; url = URL('https://httpbin.org/put')    &gt;&gt;&gt; url.put(data={'key': 'value'})    &lt;Response [200]&gt;Jail::    &gt;&gt;&gt; root = 'http://www.example.com/app/'    &gt;&gt;&gt; current = 'http://www.example.com/app/path/to/content'    &gt;&gt;&gt; url = URL(root).jailed / current    &gt;&gt;&gt; url / '/root'    JailedURL('http://www.example.com/app/root')    &gt;&gt;&gt; (url / '../../../../../../root').resolve()    JailedURL('http://www.example.com/app/root')    &gt;&gt;&gt; url / 'http://localhost/'    JailedURL('http://www.example.com/app/')    &gt;&gt;&gt; url / 'http://www.example.com/app/file'    JailedURL('http://www.example.com/app/file')Trailing separator will be remained::    &gt;&gt;&gt; url = URL('http://www.example.com/path/with/trailing/sep/')    &gt;&gt;&gt; str(url).endswith('/')    True    &gt;&gt;&gt; url.trailing_sep    '/'    &gt;&gt;&gt; url.name    'sep'    &gt;&gt;&gt; url.path    '/path/with/trailing/sep/'    &gt;&gt;&gt; url.parts[-1]    'sep'    &gt;&gt;&gt; url = URL('http://www.example.com/path/without/trailing/sep')    &gt;&gt;&gt; str(url).endswith('/')    False    &gt;&gt;&gt; url.trailing_sep    ''    &gt;&gt;&gt; url.name    'sep'    &gt;&gt;&gt; url.path    '/path/without/trailing/sep'    &gt;&gt;&gt; url.parts[-1]    'sep'</longdescription>
</pkgmetadata>