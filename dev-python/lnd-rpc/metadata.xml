<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># lncm/lnd-rpcThis repo aims to make _grpc_ communication with (any version of) `lnd` trivial.  Currently, **Go** and **Python** are supported.## GoWhile `lnd` natively provides `.go` files for grpc communication, importing the entirety of `lnd` sometimes causes issues with dependencies (ex. the infamous `btcd` versioning), etc. We aim to solve it by having zero/minimal dependencies, and providing direct access to each version individually.### UseThat snippet shows how to import grpc's from here, and use them to init authenticated lnd client. ```gopackage mainimport (    &quot;context&quot;    &quot;encoding/hex&quot;    &quot;fmt&quot;    &quot;io/ioutil&quot;    &quot;time&quot;    &quot;google.golang.org/grpc&quot;    &quot;google.golang.org/grpc/credentials&quot;    &quot;gopkg.in/macaroon.v2&quot;    &quot;github.com/lncm/lnd-rpc/v0.10.0/lnrpc&quot;)type rpcCreds map[string]stringfunc (m rpcCreds) RequireTransportSecurity() bool { return true }func (m rpcCreds) GetRequestMetadata(_ context.Context, _ ...string) (map[string]string, error) {return m, nil}func newCreds(bytes []byte) rpcCreds {creds := make(map[string]string)creds[&quot;macaroon&quot;] = hex.EncodeToString(bytes)return creds}func getClient(hostname string, port int, tlsFile, macaroonFile string) lnrpc.LightningClient  {    macaroonBytes, err := ioutil.ReadFile(macaroonFile)    if err != nil {        panic(fmt.Sprintln(&quot;Cannot read macaroon file&quot;, err))    }    mac := &amp;macaroon.Macaroon{}    if err = mac.UnmarshalBinary(macaroonBytes); err != nil {        panic(fmt.Sprintln(&quot;Cannot unmarshal macaroon&quot;, err))    }    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)    defer cancel()    transportCredentials, err := credentials.NewClientTLSFromFile(tlsFile, hostname)    if err != nil {        panic(err)    }    fullHostname:= fmt.Sprintf(&quot;%s:%d&quot;, hostname, port)    connection, err := grpc.DialContext(ctx, fullHostname, []grpc.DialOption{        grpc.WithBlock(),        grpc.WithTransportCredentials(transportCredentials),        grpc.WithPerRPCCredentials(newCreds(macaroonBytes)),    }...)    if err != nil {        panic(fmt.Errorf(&quot;unable to connect to %s: %w&quot;, fullHostname, err))    }    return lnrpc.NewLightningClient(connection)}func main() {    const (        hostname = &quot;node's hostname&quot;        port = 10009        tlsFile = &quot;path/to/tls.cert&quot;        macaroonFile = &quot;path/to/macaroon/file.macaroon&quot;    )    client := getClient(hostname, port, tlsFile, macaroonFile)    // Do stuff with the client…}```## Python3This repo also holds the source (and scrips necessary to generate) the contents of [`lnd-rpc` PyPI package].  To use it, install the version of the version you want to use, and…[`lnd-rpc` PyPI package]: https://pypi.org/project/lnd-rpc/### Use```shell scriptpip3 install lnd-rpc```&gt; **TODO:** Add an example usage here ## tl;drThis repo helps with:1. [download] - download all `lnd` `.proto`'s, and their dependencies1. [generate-go] - generate `.go` sources for available `.proto` files1. [generate-python] - generate `.py` sources for available `.proto` files[download]: https://github.com/lncm/lnd-rpc/blob/58f303abd4b3e3d51c2d27872dc715bd5a0a5bed/scripts/download#L98-L227[generate-go]: https://github.com/lncm/lnd-rpc/blob/58f303abd4b3e3d51c2d27872dc715bd5a0a5bed/scripts/generate-go#L89-L112[generate-python]: https://github.com/lncm/lnd-rpc/blob/58f303abd4b3e3d51c2d27872dc715bd5a0a5bed/scripts/generate-python#L90-L131Each of these can be done in two ways:1. Run the script directly1. Via `docker run` ## Download`./script/download` downloads _all_ `.proto` files, and all their dependencies unless a specific version is provided. ### Run directly```./scripts/download --helpdownload v1.0.0Download all .proto files necessary to build lnd's gRPC client librariesUsage: ./scripts/download [options] LND_VERSIONWhere LND_VERSION is in a form: [v]MAJOR.MINOR.PATCH (ex: v0.9.0), or &quot;all&quot; to download all versionsOptions:  -h, --help, help      Show this help message  -G, --no-google       Skip download of google/api/* and google/protobuf/*  -S, --strip-version   Don't include lnd version in the path (only works if LND_VERSION != &quot;all&quot;)  -o, --output          Download to a specified dir (will be created, if doesn't exist)Examples:  ./scripts/download  all                          # Download all lnd versions, and all google/* protos  ./scripts/download  --no-google  v0.4.2          # Only download protos for lnd v0.4.2, and no google/* protos  ./scripts/download  -G -S -o=~/last-lnd/ v0.9.0  # Only download protos for lnd v0.9.0, and save them to last-lnd/                                                   #    in user's HOME directory w/o the /LND_VERSION/ segment in pathgithub: github.com/lncm/lnd-rpc/```### DockerNOTE: this one requires `DOCKER_BUILDKIT=1` due to usage of `--target=````shell script# Build with:DOCKER_BUILDKIT=1  docker build . \    --target=protos-downloader \    --tag=lnd-rpc-downloader# Run with:docker run --rm -it \    --volume=$(pwd)/:/protos/ \    lnd-rpc-downloader # [VERSION|all] ```## Generate Go`./scripts/generate-go` generates `.go` files for _all_ available versions, unless a specific version is provided. ### Run directly```./scripts/generate-go --helpgenerate-go v1.0.0Compile all .proto definitions into importable .go filesUsage: generate-go [options] LND_VERSIONWhere LND_VERSION is in a form: [v]MAJOR.MINOR.PATCH (ex: v0.9.0), or &quot;all&quot; to generate for all versionsOptions:  -h, --help, help      Show this help message  -S, --strip-version   Don't include lnd version in the path (only works if LND_VERSION != &quot;all&quot;)  -o, --output          Save generated files to a specified dir (created, if doesn't exist)Examples:  ./generate-go all  ./generate-go  -o /tmp/last/  v0.9.0github: github.com/lncm/lnd-rpc/```### Docker```shell scriptdocker build . \    --build-arg=&quot;LANG=go&quot; \    --tag=lnd-rpc-godocker run --rm -it \    --volume=$(pwd):/data/go/ \    lnd-rpc-go  # [VERSION|all]```## Generate Python`./scripts/generate-python` generates `.py` files for _all_ available versions, unless a specific version is provided. &gt; **NOTE:** All generated versions are published to PyPi using [this workflow][this workflow]: https://github.com/lncm/lnd-rpc/blob/58f303abd4b3e3d51c2d27872dc715bd5a0a5bed/.github/workflows/release-python.yml### Run directly```./scripts/generate-python --helpgenerate-python v1.0.0Compile all .proto definitions into .py filesUsage: generate-python [options] LND_VERSIONWhere LND_VERSION is in a form: [v]MAJOR.MINOR.PATCH (ex: v0.9.0), or &quot;all&quot; to generate for all versionsOptions:  -h, --help, help      Show this help message  -S, --strip-version   Don't include lnd version in the path (only works if LND_VERSION != &quot;all&quot;)  -o, --output          Save generated files to a specified dir (created, if doesn't exist)Examples:  ./generate-python all  ./generate-python  -o /tmp/last/  v0.9.0github: github.com/lncm/lnd-rpc/```### Docker ```shell scriptdocker build . \    --build-arg=&quot;LANG=python&quot; \    --tag=lnd-rpc-pythondocker run --rm -it \    --volume=$(pwd):/data/python/ \    lnd-rpc-python  # [VERSION|all]```</longdescription>
</pkgmetadata>