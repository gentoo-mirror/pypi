<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;assets/logo2.svg&quot; alt=&quot;Marqo&quot;/&gt;&lt;/p&gt;&lt;h1 align=&quot;center&quot;&gt;Marqo&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;  &lt;b&gt;Tensor search for humans.&lt;/b&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://opensource.org/licenses/Apache-2.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/marqo/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/marqo?label=PyPI&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/marqo-ai/marqo/actions/workflows/unit_test_CI.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/marqo-ai/marqo/unit_test_CI.yml?branch=mainline&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/marqo&quot;&gt;&lt;img alt=&quot;PyPI - Downloads from pepy&quot; src=&quot;https://static.pepy.tech/personalized-badge/marqo?period=month&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=downloads/month&quot;&gt;&lt;/a&gt;&lt;a align=&quot;center&quot; href=&quot;https://join.slack.com/t/marqo-community/shared_invite/zt-1d737l76e-u~b3Rvey2IN2nGM4wyr44w&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slack-blueviolet?logo=slack&amp;amp;logoColor=white&quot;&gt;&lt;/a&gt;&lt;/p&gt;An open-source tensor search engine that seamlessly integrates with your applications, websites, and workflow. Marqo cloud ☁️  is in beta. If you're interested, apply here: https://q78175g1wwa.typeform.com/to/d0PEuRPC## What is tensor search?Tensor search involves transforming documents, images and other data into collections of vectors called &quot;tensors&quot;. Representing data as tensors allows us to match queries against documents with human-like understanding of the query and document's content. Tensor search can power a variety of use cases such as:- end user search and recommendations- multi-modal search (image-to-image, text-to-image, image-to-text)- chat bots and question and answer systems- text and image classification&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;assets/output.gif&quot;/&gt;&lt;/p&gt;&lt;!-- end marqo-description --&gt;## Getting started1. Marqo requires docker. To install Docker go to the [Docker Official website.](https://docs.docker.com/get-docker/)2. Use docker to run Marqo (Mac users with M-series chips will need to [go here](#m-series-mac-users)):```bashdocker rm -f marqodocker pull marqoai/marqo:latestdocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latest```3. Install the Marqo client:```bashpip install marqo```4. Start indexing and searching! Let's look at a simple example below:```pythonimport marqomq = marqo.Client(url='http://localhost:8882')mq.index(&quot;my-first-index&quot;).add_documents([    {        &quot;Title&quot;: &quot;The Travels of Marco Polo&quot;,        &quot;Description&quot;: &quot;A 13th-century travelogue describing Polo's travels&quot;    },     {        &quot;Title&quot;: &quot;Extravehicular Mobility Unit (EMU)&quot;,        &quot;Description&quot;: &quot;The EMU is a spacesuit that provides environmental protection, &quot;                       &quot;mobility, life support, and communications for astronauts&quot;,        &quot;_id&quot;: &quot;article_591&quot;    }])results = mq.index(&quot;my-first-index&quot;).search(    q=&quot;What is the best outfit to wear on the moon?&quot;)```- `mq` is the client that wraps the `marqo` API- `add_documents()` takes a list of documents, represented as python dicts, for indexing- `add_documents()` creates an index with default settings, if one does not already exist- You can optionally set a document's ID with the special `_id` field. Otherwise, Marqo will generate one.- If the index doesn't exist, Marqo will create it. If it exists then Marqo will add the documents to the index.- Running this code multiple times could result in duplicate documents. To reset the index, you can delete it first using `mq.index(&quot;my-first-index&quot;).delete()`Let's have a look at the results:```python# let's print out the results:import pprintpprint.pprint(results){    'hits': [        {               'Title': 'Extravehicular Mobility Unit (EMU)',            'Description': 'The EMU is a spacesuit that provides environmental protection, mobility, life support, and'                            'communications for astronauts',            '_highlights': {                'Description': 'The EMU is a spacesuit that provides environmental protection, '                               'mobility, life support, and communications for astronauts'            },            '_id': 'article_591',            '_score': 0.61938936        },         {               'Title': 'The Travels of Marco Polo',            'Description': &quot;A 13th-century travelogue describing Polo's travels&quot;,            '_highlights': {'Title': 'The Travels of Marco Polo'},            '_id': 'e00d1a8d-894c-41a1-8e3b-d8b2a8fce12a',            '_score': 0.60237324        }    ],    'limit': 10,    'processingTimeMs': 49,    'query': 'What is the best outfit to wear on the moon?'}```- Each hit corresponds to a document that matched the search query- They are ordered from most to least matching- `limit` is the maximum number of hits to be returned. This can be set as a parameter during search- Each hit has a `_highlights` field. This was the part of the document that matched the query the best## Other basic operations### Get documentRetrieve a document by ID.```pythonresult = mq.index(&quot;my-first-index&quot;).get_document(document_id=&quot;article_591&quot;)```Note that by adding the document using ```add_documents``` again using the same ```_id``` will cause a document to be updated.### Get index statsGet information about an index.```pythonresults = mq.index(&quot;my-first-index&quot;).get_stats()```### Lexical searchPerform a keyword search.```pythonresult =  mq.index(&quot;my-first-index&quot;).search('marco polo', search_method=marqo.SearchMethods.LEXICAL)```### Search specific fieldsUsing the default tensor search method```pythonresult = mq.index(&quot;my-first-index&quot;).search('adventure', searchable_attributes=['Title'])```### Delete documentsDelete documents.```pythonresults = mq.index(&quot;my-first-index&quot;).delete_documents(ids=[&quot;article_591&quot;, &quot;article_602&quot;])```### Delete indexDelete an index.```pythonresults = mq.index(&quot;my-first-index&quot;).delete()```## Multi modal and cross modal searchTo power image and text search, Marqo allows users to plug and play with CLIP models from HuggingFace. **Note that if you do not configure multi modal search, image urls will be treated as strings.** To start indexing and searching with images, first create an index with a CLIP configuration, as below:```pythonsettings = {  &quot;treat_urls_and_pointers_as_images&quot;:True,   # allows us to find an image file and index it   &quot;model&quot;:&quot;ViT-L/14&quot;}response = mq.create_index(&quot;my-multimodal-index&quot;, **settings)```Images can then be added within documents as follows. You can use urls from the internet (for example S3) or from the disk of the machine:```pythonresponse = mq.index(&quot;my-multimodal-index&quot;).add_documents([{    &quot;My Image&quot;: &quot;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Portrait_Hippopotamus_in_the_water.jpg/440px-Portrait_Hippopotamus_in_the_water.jpg&quot;,    &quot;Description&quot;: &quot;The hippopotamus, also called the common hippopotamus or river hippopotamus, is a large semiaquatic mammal native to sub-Saharan Africa&quot;,    &quot;_id&quot;: &quot;hippo-facts&quot;}])```You can then search using text as usual. Both text and image fields will be searched:```pythonresults = mq.index(&quot;my-multimodal-index&quot;).search('animal')``` Setting `searchable_attributes` to the image field `['My Image'] ` ensures only images are searched in this index:```pythonresults = mq.index(&quot;my-multimodal-index&quot;).search('animal',  searchable_attributes=['My Image'])```### Searching using an imageSearching using an image can be achieved by providing the image link. ```pythonresults = mq.index(&quot;my-multimodal-index&quot;).search('https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Standing_Hippopotamus_MET_DP248993.jpg/440px-Standing_Hippopotamus_MET_DP248993.jpg')```## DocumentationThe full documentation for Marqo can be found here [https://docs.marqo.ai/](https://docs.marqo.ai/).## M series Mac usersMarqo does not yet support the docker-in-docker backend configuration for the arm64 architecture. This means that if you have an M series Mac, you will also need to run marqo's backend, marqo-os, locally.To run Marqo on an M series Mac, follow the next steps.1. In one terminal run the following command to start opensearch:```shelldocker rm -f marqo-os; docker run -p 9200:9200 -p 9600:9600 -e &quot;discovery.type=single-node&quot; marqoai/marqo-os:0.0.3-arm```2. In another terminal run the following command to launch Marqo:```shelldocker rm -f marqo; docker run --name marqo --privileged \    -p 8882:8882 --add-host host.docker.internal:host-gateway \    -e &quot;OPENSEARCH_URL=https://localhost:9200&quot; \    marqoai/marqo:latest```## ContributorsMarqo is a community project with the goal of making tensor search accessible to the wider developer community. We are glad that you are interested in helping out! Please read [this](./CONTRIBUTING.md) to get started## Dev set up1. Create a virtual env ```python -m venv ./venv```2. Activate the virtual environment ```source ./venv/bin/activate``` (on Linux or Mac) or ```./venv/Scripts/activate``` (on Windows)3. Install requirements from the requirements file: ```pip install -r requirements.txt```4. Run tests by running the tox file. CD into this dir and then run &quot;tox&quot;5. If you want to run against marqo cloud, add the following in the `tox.ini` file, under the `[testenv]` section:    ```    setenv =        MARQO_URL = &lt;host url&gt;        MARQO_API_KEY = &lt;my super secret api key&gt;        IS_MULTI_INSTANCE = &lt;True or False&gt;    ```    then run the tox file.6. If you update dependencies, make sure to delete the .tox dir and rerun## Merge instructions:1. Run the full test suite (by using the command `tox` in this dir).2. Create a pull request with an attached github issue.## Support- Join our [Slack community](https://join.slack.com/t/marqo-community/shared_invite/zt-1d737l76e-u~b3Rvey2IN2nGM4wyr44w) and chat with other community members about ideas.- Marqo community meetings (coming soon!)### Stargazers[![Stargazers repo roster for @marqo-ai/marqo](https://reporoster.com/stars/marqo-ai/marqo)](https://github.com/marqo-ai/marqo/stargazers)### Forkers[![Forkers repo roster for @marqo-ai/marqo](https://reporoster.com/forks/marqo-ai/marqo)](https://github.com/marqo-ai/marqo/network/members)## TranslationsThis readme is available in the following translations:- [English](README.md)🇬🇧- [Français](README-translated/README-French.md)🇫🇷- [中文 Chinese](README-translated/README-Chinese.md)🇨🇳- [Polski](README-translated/README-Polish.md)🇵🇱- [Українська](README-translated/README-Ukrainian.md)🇺🇦</longdescription>
</pkgmetadata>