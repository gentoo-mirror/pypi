<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quick StartApe compiler plugin around [the Cairo language](https://github.com/starkware-libs/cairo-lang).## Dependencies- [python3](https://www.python.org/downloads) version 3.8 or greater, python3-dev- [Rust](https://www.rust-lang.org/)## Installation### via `pip`You can install the latest release via [`pip`](https://pypi.org/project/pip/):```bashpip install ape-cairo```### via `setuptools`You can clone the repository and use [`setuptools`](https://github.com/pypa/setuptools) for the most up-to-date version:```bashgit clone https://github.com/ApeWorX/ape-cairo.gitcd ape-cairopython3 setup.py install```## Quick UsageFirst, you will need to tell `ape-cairo` how to use the Cairo compiler.There are two ways to do this:1. Configure your Cairo manifest path in your `ape-config.yaml`.2. Build or add Cairo compiler binaries to your $PATH.Both options require cloning the Cairo compiler source code:```shgit clone git@github.com:starkware-libs/cairo.gitcd cairogit fetch --allgit checkout &lt;tag&gt;  # e.g. v1.0.0-alpha.6```To do the first option, add the following to your `ape-config.yaml` file:```yamlcairo:  manifest: /Users/home/path/to/cairo/Cargo.toml```Now, when compiling, Ape will use the command `cargo run --bin &lt;BIN&gt; --manifest-path &lt;CAIRO-MANIFEST&gt;`.To do the second option instead, build the release binaries for your OS:```shcargo build --release```**NOTE**: This requires being in the same directory as Cairo.After the build completes, add the target path to your global $PATH variable.(You may want to add this to your `.zshrc` / `.bashrc` file):```shexport PATH=$PATH:$HOME/path/to/cairo/target/release```Verify you have `sierra-compile` in your `$PATH` by doing:```bashwhich sierra-compile```**WARN**: Note that when using Cairo-lang the python package, it will add conflicting binaries with the same name.You will need to ensure you are using the correct binaries if you have `cairo-lang` the Python package installed.```shellwhich starknet-compile```Alternatively, the first approach avoids this problem.### Using the CompilerIn a project directory where there are `.cairo` files in your `contracts/` directory, run the `compile` command:```bashape compile```It should create `ContractType` objects in your `.build/` folder containing the necessary Sierra code for contract declaration.## DevelopmentThis project is in development and should be considered a beta.Things might not be in their final state and breaking changes may occur.Comments, questions, criticisms and pull requests are welcomed.</longdescription>
</pkgmetadata>