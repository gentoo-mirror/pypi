<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://gitguardian.com/&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/gitguardian/py-gitguardian/doc/logo.svg&quot;&gt;&lt;/a&gt;# [py-gitguardian](https://github.com/GitGuardian/py-gitguardian) - GitGuardian API Client[![PyPI](https://img.shields.io/pypi/v/pygitguardian?color=%231B2D55&amp;style=for-the-badge)](https://pypi.org/project/pygitguardian/)[![License](https://img.shields.io/github/license/GitGuardian/py-gitguardian?color=%231B2D55&amp;style=for-the-badge)](LICENSE)[![GitHub stars](https://img.shields.io/github/stars/gitguardian/py-gitguardian?color=%231B2D55&amp;style=for-the-badge)](https://github.com/GitGuardian/py-gitguardian/stargazers)![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/GitGuardian/py-gitguardian/test-lint.yml?branch=master&amp;style=for-the-badge)[![Codecov](https://img.shields.io/codecov/c/github/GitGuardian/py-gitguardian?style=for-the-badge)](https://codecov.io/gh/GitGuardian/py-gitguardian/)API client library for the [GitGuardian API](https://api.gitguardian.com/).The GitGuardian API puts at your fingertips the power to detect more than 200 types of secrets in any text content, as well as other potential security vulnerabilities.**py-gitguardian** can be used to create integrations to scan various data sources, from your workstation's filesystem to your favorite chat application.You can check API details [here](https://api.gitguardian.com/docs)with all the response codes and expected structures on each method.## RequirementsPython 3.7+## Projects using `py-gitguardian`- [**GitGuardian Shield**](https://github.com/GitGuardian/gg-shield) - Scan for secrets in your CI and pre-commit.## Getting startedYou can obtain API keys for API usage on your [dashboard](https://dashboard.gitguardian.com/api/v1/auth/user/github_login/authorize?utm_source=github&amp;utm_medium=py_gitguardian&amp;utm_campaign=py1).**pip**```bashpip3 install --upgrade pygitguardian```**pipenv**```bashpipenv install pygitguardian```**poetry**```bashpoetry add pygitguardian```## ExamplesCheck [examples/](examples/) for full examples on how to use py-gitguardian.### Scanning text content```py# please don't hardcode your gg_api_key in source code :)API_KEY = os.getenv(&quot;GG_API_KEY&quot;)DOCUMENT = &quot;&quot;&quot;    import urllib.request    url = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'    response = urllib.request.urlopen(url)    consume(response.read())&quot;&quot;&quot;&quot;client = GGClient(api_key=API_KEY)# Check the health of the API and the API key used.if client.health_check().success:    try:        scan_result = client.content_scan(DOCUMENT)    except Exception as exc:        # Handle exceptions such as schema validation        traceback.print_exc(2, file=sys.stderr)        print(str(exc))        print(scan_result)else:    print(&quot;Invalid API Key&quot;)```### Scanning multiple files```pyAPI_KEY = os.getenv(&quot;GG_API_KEY&quot;)client = GGClient(api_key=API_KEY)# Create a list of dictionaries for scanningfile_paths = (pathlib.Path(name) for name in glob.iglob(&quot;**/*&quot;, recursive=True))to_scan = [    {&quot;filename&quot;: path.name, &quot;document&quot;: path.read_text(errors=&quot;replace&quot;)}    for path in file_paths]scan = client.multi_content_scan(to_scan)```### Transform results to dict or JSONAny model in `py-gitguardian` can be turned to a JSON string or a dictionary usingthe `to_dict` and `to_json` methods.```pyfrom pygitguardian.models import Detaildetail = Detail(&quot;Invalid API Key.&quot;)print(detail.to_dict())print(detail.to_json())```### DependenciesPy-gitguardian depends on these excellent libraries:- `requests` - HTTP client- `marshmallow` - Request (de)serialization and input validation</longdescription>
</pkgmetadata>