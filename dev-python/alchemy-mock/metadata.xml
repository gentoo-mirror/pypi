<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============SQLAlchemy Mock===============.. image:: https://badge.fury.io/py/alchemy-mock.png    :target: http://badge.fury.io/py/alchemy-mock.. image:: https://travis-ci.org/miki725/alchemy-mock.png?branch=master    :target: https://travis-ci.org/miki725/alchemy-mock.. image:: https://coveralls.io/repos/miki725/alchemy-mock/badge.png?branch=master    :target: https://coveralls.io/r/miki725/alchemy-mock?branch=masterSQLAlchemy mock helpers.* Free software: MIT license* GitHub: https://github.com/miki725/alchemy-mockInstalling----------You can install ``alchemy-mock`` using pip::    $ pip install alchemy-mockWhy?----SQLAlchemy is awesome. Unittests are great.Accessing DB during tests - not so much.This library provides easy way to mock SQLAlchemy's sessionin unittests while preserving ability to do sane asserts.Normally SQLAlchemy's expressions cannot be easily comparedas comparison on binary expression produces yet another binary expression::    &gt;&gt;&gt; type((Model.foo == 5) == (Model.bar == 5))    &lt;class 'sqlalchemy.sql.elements.BinaryExpression'&gt;But they can be compared with this library::    &gt;&gt;&gt; ExpressionMatcher(Model.foo == 5) == (Model.bar == 5)    FalseUsing-----``ExpressionMatcher`` can be directly used::    &gt;&gt;&gt; from alchemy_mock.comparison import ExpressionMatcher    &gt;&gt;&gt; ExpressionMatcher(Model.foo == 5) == (Model.foo == 5)    TrueAlternatively ``AlchemyMagicMock`` can be used to mock out SQLAlchemy session::    &gt;&gt;&gt; from alchemy_mock.mocking import AlchemyMagicMock    &gt;&gt;&gt; session = AlchemyMagicMock()    &gt;&gt;&gt; session.query(Model).filter(Model.foo == 5).all()    &gt;&gt;&gt; session.query.return_value.filter.assert_called_once_with(Model.foo == 5)In real world though session can be interacted with multiple times to query some data.In those cases ``UnifiedAlchemyMagicMock`` can be used which combines various calls for easier assertions::    &gt;&gt;&gt; from alchemy_mock.mocking import UnifiedAlchemyMagicMock    &gt;&gt;&gt; session = UnifiedAlchemyMagicMock()    &gt;&gt;&gt; m = session.query(Model)    &gt;&gt;&gt; q = m.filter(Model.foo == 5)    &gt;&gt;&gt; if condition:    ...     q = q.filter(Model.bar &gt; 10).all()    &gt;&gt;&gt; data1 = q.all()    &gt;&gt;&gt; data2 = m.filter(Model.note == 'hello world').all()    &gt;&gt;&gt; session.filter.assert_has_calls([    ...     mock.call(Model.foo == 5, Model.bar &gt; 10),    ...     mock.call(Model.note == 'hello world'),    ... ])Also real-data can be stubbed by criteria::    &gt;&gt;&gt; from alchemy_mock.mocking import UnifiedAlchemyMagicMock    &gt;&gt;&gt; session = UnifiedAlchemyMagicMock(data=[    ...     (    ...         [mock.call.query(Model),    ...          mock.call.filter(Model.foo == 5, Model.bar &gt; 10)],    ...         [Model(foo=5, bar=11)]    ...     ),    ...     (    ...         [mock.call.query(Model),    ...          mock.call.filter(Model.note == 'hello world')],    ...         [Model(note='hello world')]    ...     ),    ...     (    ...         [mock.call.query(AnotherModel),    ...          mock.call.filter(Model.foo == 5, Model.bar &gt; 10)],    ...         [AnotherModel(foo=5, bar=17)]    ...     ),    ... ])    &gt;&gt;&gt; session.query(Model).filter(Model.foo == 5).filter(Model.bar &gt; 10).all()    [Model(foo=5, bar=11)]    &gt;&gt;&gt; session.query(Model).filter(Model.note == 'hello world').all()    [Model(note='hello world')]    &gt;&gt;&gt; session.query(AnotherModel).filter(Model.foo == 5).filter(Model.bar &gt; 10).all()    [AnotherModel(foo=5, bar=17)]    &gt;&gt;&gt; session.query(AnotherModel).filter(Model.note == 'hello world').all()    []Finally ``UnifiedAlchemyMagicMock`` can partially fake session mutationssuch as ``session.add(instance)``. For example::    &gt;&gt;&gt; session = UnifiedAlchemyMagicMock()    &gt;&gt;&gt; session.add(Model(pk=1, foo='bar'))    &gt;&gt;&gt; session.add(Model(pk=2, foo='baz'))    &gt;&gt;&gt; session.query(Model).all()    [Model(foo='bar'), Model(foo='baz')]    &gt;&gt;&gt; session.query(Model).get(1)    Model(foo='bar')    &gt;&gt;&gt; session.query(Model).get(2)    Model(foo='baz')Note that its partially correct since if added models are filtered on,session is unable to actually apply any filters so it returns everything::   &gt;&gt;&gt; session.query(Model).filter(Model.foo == 'bar').all()   [Model(foo='bar'), Model(foo='baz')]History-------0.4.3 (2019-11-05)~~~~~~~~~~~~~~~~~~* Unifying ``distinct``.0.4.2 (2019-09-25)~~~~~~~~~~~~~~~~~~* Adding support ``label()`` in ``ExpressionMatcher``. For example ``column.label('foo')``.0.4.1 (2019-06-26)~~~~~~~~~~~~~~~~~~* Adding support for ``one_or_none()``. Thanks @davidroeca0.4.0 (2019-06-06)~~~~~~~~~~~~~~~~~~* Adding basic mutation capability with ``add`` and ``add_all``.0.3.5 (2019-04-13)~~~~~~~~~~~~~~~~~~* Fixing compatibility with latest ``mock``.0.3.4 (2018-10-03)~~~~~~~~~~~~~~~~~~* Unifying ``limit``.0.3.3 (2018-09-17)~~~~~~~~~~~~~~~~~~* Unifying ``options`` and ``group_by``.0.3.2 (2018-06-27)~~~~~~~~~~~~~~~~~~* Added support for ``count()`` and ``get()`` between boundaries.0.3.1 (2018-03-28)~~~~~~~~~~~~~~~~~~* Added support for ``func`` calls in ``ExpressionMatcher``. For example ``func.lower(column)``.0.3.0 (2018-01-24)~~~~~~~~~~~~~~~~~~* Added support for ``.one()`` and ``.first()`` methods when stubbing data.* Fixed bug which incorrectly unified methods after iterating on mock.0.2.0 (2018-01-13)~~~~~~~~~~~~~~~~~~* Added ability to stub real-data by filtering criteria.  See `#2 &lt;https://github.com/miki725/alchemy-mock/pull/2&gt;`_.0.1.1 (2018-01-12)~~~~~~~~~~~~~~~~~~* Fixed alembic typo in README. oops.0.1.0 (2018-01-12)~~~~~~~~~~~~~~~~~~* First release on PyPI.Credits-------Development Lead~~~~~~~~~~~~~~~~* Miroslav Shubernetskiy  - https://github.com/miki725Contributors~~~~~~~~~~~~* Serkan Hoscai - https://github.com/shoscaLicense-------The MIT License (MIT)Copyright (c) 2018, Miroslav Shubernetskiy::    Permission is hereby granted, free of charge, to any person obtaining a copy    of this software and associated documentation files (the &quot;Software&quot;), to deal    in the Software without restriction, including without limitation the rights    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    copies of the Software, and to permit persons to whom the Software is    furnished to do so, subject to the following conditions:    The above copyright notice and this permission notice shall be included in    all copies or substantial portions of the Software.    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN    THE SOFTWARE.</longdescription>
</pkgmetadata>