<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;static/ppx_light.svg&quot; width=300&gt;# A Python interface to proteomics data repositories[![conda](https://img.shields.io/conda/vn/bioconda/ppx?color=green)](http://bioconda.github.io/recipes/ppx/README.html)[![PyPI](https://img.shields.io/pypi/v/ppx?color=green)](https://pypi.org/project/ppx/)[![tests](https://github.com/wfondrie/ppx/workflows/tests/badge.svg?branch=master)](https://github.com/wfondrie/ppx/actions?query=workflow%3Atests)[![Documentation Status](https://readthedocs.org/projects/ppx/badge/?version=latest)](https://ppx.readthedocs.io/en/latest/?badge=latest)  ## Overview  ppx provides a simple, programmatic means to access proteomics data that arepublicly available in [ProteomeXchange](http://www.proteomexchange.org) partnerrepositories. ppx allows users to easily find and download files associatedwith projects in [PRIDE](https://www.ebi.ac.uk/pride/archive/) and[MassIVE](https://massive.ucsd.edu/ProteoSAFe/static/massive.jsp). In doing so,ppx promotes the reproducible analysis of proteomics data.For full documentation and examples, visit: https://ppx.readthedocs.io## Installation  ppx requires Python 3.6+ and depends upon the[requests](https://docs.python-requests.org/en/master/) and[tqdm](https://tqdm.github.io/) Python packages. ppx and any missingdependencies are easily installed with `pip` or with `conda` through the [bioconda](https://bioconda.github.io/index.html) channel.Install with `conda`:``` shellconda install -c bioconda ppx```Or install with `pip`:```shellpip3 install ppx```## ConfigurationBy default, ppx will download project files in the `.ppx` directory under thecurrent user's home directory (`~/.ppx` on Linux and MacOS). There are severalways to specify different data directories:1. Change the ppx data directory for all future Python sessions by setting the `PPX_DATA_DIR` environment variable to your preferred directory.2. Change the ppx data directory for a Python session using the`ppx.set_data_dir()` function.3. Specify a data directory for a project using the `local` argument:``` Python&gt;&gt;&gt; import ppx&gt;&gt;&gt; proj = ppx.find_project(&quot;PXD000001&quot;, local=&quot;my/data/dir&quot;)```Why does ppx set a default data directory? We found that this makes it easierto reuse the same proteomics data files in multiple tasks that we're workingon.As of ppx v1.3.0, cloud paths can also be used as the data directory. Thisallows you to stream downloaded files to AWS S3, Google Cloud Storage, or AzureBlob Storage. To use a cloud storage provider, simply set the data directory toa cloud URI, such as :code:`s3://my-data-bucket/ppx` using any of the methodsabove. Please note that you'll also need to setup credentials for your cloudprovider---see the `CloudPathLib documentation&lt;https://cloudpathlib.drivendata.org/v0.6/authentication/&gt;_` for details.## ExamplesFirst, find a project using its ProteomeXchange or MassIVE identifier:``` Python&gt;&gt;&gt; import ppx&gt;&gt;&gt; proj = ppx.find_project(&quot;PXD000001&quot;)```We can then view the files associated with the project in the repository(PRIDE in this case):``` Python&gt;&gt;&gt; proj.remote_files()#['F063721.dat',# 'F063721.dat-mztab.txt',# 'PRIDE_Exp_Complete_Ac_22134.xml.gz',# 'PRIDE_Exp_mzData_Ac_22134.xml.gz',# 'PXD000001_mztab.txt',# 'README.txt',# 'TMT_Erwinia_1uLSike_Top10HCD_isol2_45stepped_60min_01-20141210.mzML',# 'TMT_Erwinia_1uLSike_Top10HCD_isol2_45stepped_60min_01-20141210.mzXML',# 'TMT_Erwinia_1uLSike_Top10HCD_isol2_45stepped_60min_01.mzXML',# 'TMT_Erwinia_1uLSike_Top10HCD_isol2_45stepped_60min_01.raw',# 'erwinia_carotovora.fasta',# 'generated/PRIDE_Exp_Complete_Ac_22134.pride.mgf.gz',# 'generated/PRIDE_Exp_Complete_Ac_22134.pride.mztab.gz']```We can also [glob](https://en.wikipedia.org/wiki/Glob_(programming)) forspecific types of files:``` Python&gt;&gt;&gt; proj.remote_files(&quot;*.mzML&quot;)# ['TMT_Erwinia_1uLSike_Top10HCD_isol2_45stepped_60min_01-20141210.mzML']```Then we can download one or more files to the projects local data directory:``` Python&gt;&gt;&gt; proj.download(&quot;README.txt&quot;)# [PosixPath('/Users/wfondrie/.ppx/PXD000001/README.txt')]```Once we've downloaded files, ppx no longer needs an internet connection toretrieve a project's local data. However, you will need to specify the repository in which the project data resides. If we start a new Pythonsession, we can find our previous file easily:``` Python&gt;&gt;&gt; import ppx&gt;&gt;&gt; proj = ppx.find_project(&quot;PXD000001&quot;, repo=&quot;PRIDE&quot;)&gt;&gt;&gt; proj.local_files()# [PosixPath('/Users/wfondrie/.ppx/PXD000001/README.txt')]```### Downloading to cloud storage backendWe use [CloudPathlib](https://cloudpathlib.drivendata.org/stable/) to powersupport for AWS S3, Google Cloud Storage, and Azure Blob Storage. To use acloud storage provider, create the bucket for ppx to use and set it as the ppx datadirectory.For example using AWS S3, we can save the files of a project to an S3 bucket:``` python&gt;&gt;&gt; proj = ppx.find_project(&quot;PXD000001&quot;, local=&quot;s3://my-bucket/PXD000001&quot;)&gt;&gt;&gt; proj.download(&quot;README.txt&quot;)# [S3Path('s3://my-bucket/PXD000001/README.txt')]```CloudPathLib then provides methods to download files from S3 when you need them:``` Python&gt;&gt;&gt; readme_on_s3 = proj.local_files(&quot;README.txt&quot;)[0]&gt;&gt;&gt; readme_on_s3.download_to(&quot;README.txt&quot;)# [PosixPath(README.txt)]```## If you are an R user...ppx was inspired the rpx R package by Laurent Gatto. Check it out on[Bioconductor](http://bioconductor.org/packages/release/bioc/html/rpx.html) and[GitHub](https://github.com/lgatto/rpx).</longdescription>
</pkgmetadata>