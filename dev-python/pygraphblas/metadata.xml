<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Tests](https://github.com/Graphegon/pygraphblas/workflows/Tests/badge.svg)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/Graphegon/pygraphblas/v4.0.3?filepath=pygraphblas%2Fdemo%2FIntroduction-to-GraphBLAS-with-Python.ipynb)&lt;br /&gt;# pygraphblaspygraphblas is a Python wrapper around the[GraphBLAS](http://graphblas.org) API.## [Click here for API Documentation](https://graphegon.github.io/pygraphblas/pygraphblas/index.html)## Installationpygraphblas requires the[SuiteSparse:GraphBLAS](http://faculty.cse.tamu.edu/davis/GraphBLAS.html)library.  The easiest way currently to install pygraphblas on Linux isto use pip:    pip install pygraphblasThis is currently only supported on Linux but Windows and MacOS binarypackages are currently a work in progress.To install from source, first install SuiteSparse, then run:    python setup.py install  There are two ways to download precompiled binaries of pygraphblaswith SuiteSparse included.  One way is to use `pip installpygraphblas` on an Intel Linux machine.  This will download a packagecompatible with most modern linux distributions.  This also works in aDocker container on Mac.There are also pre-build docker images based on Ubuntu 20.04 that havea pre-compiled SuiteSparse and pygraphblas installed.  These come intwo flavors `minimal` which is the Ipython interpreter-only, and`notebook` which comes with a complete Jupyter Notebook server.  Thesecontainers also work on Mac.An installation script for Ubuntu 18.04 is provided in the`install-ubuntu.sh` file.NOTE: DO NOT USE THESE PRE-COMPILED BINARIES FOR BENCHMARKINGSUITESPARSE.  These binaries are not guaranteed to be idealy compiledfor your environment.## Docker pygraphblas is distributed as two different docker images on [DockerHub](https://cloud.docker.com/repository/docker/pygraphblas/pygraphblas/general).  The &quot;minimal&quot; image, containing only the library and[ipython](https://ipython.org/) and can be run with the command:    docker run --rm -it graphblas/pygraphblas-minimal ipythonYou can run a &quot;full&quot; [Jupyter notebook](https://jupyter.org/) serverwith docker and try the example Notebooks use the command:    docker run --rm -it -p 8888:8888 graphblas/pygraphblas-notebookOpen up the URL printed on your terminal screen to see the demoNotebook folder, including: - [Introduction to GraphBLAS with Python](./demo/Introduction-to-GraphBLAS-with-Python.ipynb) - [PageRank](./demo/PageRank.ipynb) - [Betweeness Centrality](./demo/BetweenessCentrality.ipynb) - [Triangle Centrality](./demo/TriangleCentrality.ipynb) - [Gallery of Centrality](./demo/Centrality.ipynb) - [K-Truss Subgraphs](./demo/K-Truss.ipynb) - [Triangle Counting](./demo/Triangle-Counting.ipynb) - [Louvain Community Detection](./demo/Louvain.ipynb) - [RadiX-Net Topologies](./demo/RadiX-Net-with-pygraphblas.ipynb) - [User Defined Types](./demo/User-Defined-Types.ipynb) - [Log Semiring Type](./demo/Log-Semiring.ipynb)# TestsTo run the tests checkout pygraphblas and use:    $ ./test.sh# Summarypygraphblas is a python extension that bridges [The GraphBLASAPI](http://graphblas.org) with the [Python](https://python.org)programming language.  It uses the[CFFI](https://cffi.readthedocs.io/en/latest/) library to wrap the lowlevel GraphBLAS API and provides high level Matrix and Vector Pythontypes that make GraphBLAS simple and easy.GraphBLAS is a sparse linear algebra API optimized for processinggraphs encoded as sparse matrices and vectors.  In addition to commonreal/integer matrix algebra operations, GraphBLAS supports over athousand different [Semiring](https://en.wikipedia.org/wiki/Semiring)algebra operations, that can be used as basic building blocks toimplement a wide variety of graph algorithms. See[Applications](https://en.wikipedia.org/wiki/Semiring#Applications)from Wikipedia for some specific examples.pygraphblas leverages the expertise in the field of sparse matrixprogramming by [The GraphBLAS Forum](http://graphblas.org) and usesthe[SuiteSparse:GraphBLAS](http://faculty.cse.tamu.edu/davis/GraphBLAS.html)API implementation. SuiteSparse:GraphBLAS is brought to us by the workof [Dr. Tim Davis](http://faculty.cse.tamu.edu/davis/welcome.html),professor in the Department of Computer Science and Engineering atTexas A&amp;M University.  [News andinformation](http://faculty.cse.tamu.edu/davis/news.html) can provideyou with a lot more background information, in addition to thereferences below.While it is my goal to make it so that pygraphblas works with anyGraphBLAS implementation, it currently only works with SuiteSparse.SuiteSparse is currently the only realistically usable GraphBLASimplementation, and additionally it provides several &quot;extension&quot;features and pre-packaged objects that are very useful forpygraphblas.  If there is a GraphBLAS implementation you would like tosee support for in pygraphblas, please consider creating an issue forit for discussion and/or sending me a pull request.# Introduction to Graphs and MatricesGraphBLAS uses matrices and Linear Algebra to represent graphs, asdescribed [in this mathmatical introduction toGraphBLAS](http://www.mit.edu/~kepner/GraphBLAS/GraphBLAS-Math-release.pdf)by [Dr. Jeremy Kepner](http://www.mit.edu/~kepner/) head and founderof [MIT Lincoln Laboratory SupercomputingCenter](http://news.mit.edu/2016/lincoln-laboratory-establishes-supercomputing-center-0511).There are two useful matrix representations of graphs: [AdjacencyMatrices](https://en.wikipedia.org/wiki/Adjacency_matrix) and[Incidence Matrices](https://en.wikipedia.org/wiki/Incidence_matrix).For this introduction we will focus on the adjacency type as they aresimpler, but the same ideas apply to both, both are suported byGraphBLAS and pygraphblas, and it is easy to switch back and forthbetween them.![An example graph and adjacency matrix](./docs/imgs/AdjacencyMatrixBFS.png)On the left is a graph, and on the right, the adjacency matrix thatrepresents it. The matrix has a row and column for every node in thegraph.  If there is an edge going from node A to B, then there will bea value present in the intersection of As row with Bs column.  How itdiffers from many other matrix representations is that the matrix issparse, nothing is stored in computer memory where there are unusedelements.Sparsity is important because one practical problem withmatrix-encoding graphs is that most real-world graphs tend to besparse, as above, only 7 of 36 possible elements have a value. Thosethat have values tend to be scattered randomly across the matrix(for &quot;typical&quot; graphs), so dense linear algebra libraries like BLAS ornumpy do not encode or operate on them efficiently, as the relevantdata is mostly empty memory with actual data elements spaced farapart.  This wastes memory and CPU resources, and defeats CPU cachingmechanisms.For example, suppose a fictional social network has 1 billion users,and each user has about 100 friends, which means there are about 100billion (1e+11) connections in the graph.  A dense matrix large enoughto hold this graph would need (1 billion)^2 or(1,000,000,000,000,000,000), a &quot;quintillion&quot; elements, but only 1e+11of them would have meaningful values, leaving only 0.0000001th of thematrix being utilized.By using a sparse matrix instead of dense, only the elements used areactually stored in memory. The parts of the matrix with no value are*interpreted*, but not necessarily stored, as an identity value, whichmay or may not be the actual number zero, but possibly other valueslike positive or negative infinity depending on the particularsemiring operations applied to the matrix.Semirings encapsulate different algebraic operations and identitiesthat can be used to multiply matrices and vectors.  Anyone who hasmultiplied matrices has used at least one Semiring before, typicallyreferred to as &quot;plus_times&quot;.  This is the common operation ofmultiplying two matrices containing real numbers, the corresponding rowand column entries are multipled and the results are summed for thefinal value.## Code of ConductEveryone interacting in the pygraphblas project's codebases, issuetrackers, chat rooms, and mailing lists is expected to follow the [PSFCode of Conduct](https://www.python.org/psf/conduct/).</longdescription>
</pkgmetadata>