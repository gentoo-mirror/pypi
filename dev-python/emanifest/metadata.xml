<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># e-Manifest[![Downloads](https://pepy.tech/badge/emanifest)](https://pepy.tech/project/emanifest)![PyPI](https://img.shields.io/pypi/v/emanifest)[![License: CC0-1.0](https://img.shields.io/badge/License-CC0_1.0-lightgrey.svg)](http://creativecommons.org/publicdomain/zero/1.0/)**emanifest** is a client library for accessing the e-Manifest REST APIs of the US Environmental Protection Agency'sRCRAInfo national electronic hazardous waste management system.## Contents- [Requirements](#requirements)- [Installation](#installation)- [Getting Started](#getting-started)  - [Authentication](#authentication)  - [Methods](#methods)  - [Regulator Usage](#regulators)  - [Advanced Usage](#advanced-usage-and-help)- [Contact](#contact)- [License](LICENSE.txt)## Requirements- Python 3.7## Installation**emanifest** can be installed directly from the Python package Index (PyPI) using pip:```shell$ pip install emanifest```## Getting StartedBefore using the **emanifest** package, ensure you have a RCRAInfo user account andthe [necessary permissions](https://www.epa.gov/e-manifest/frequent-questions-about-e-manifest#user_question6) togenerate an API ID and key.All methods to access the e-Manifest APIs are implemented by the `RcrainfoClient` class which needs your API ID and keyto authenticate. A new instance of the class can be initiated like so:```pythonfrom emanifest import new_clientrcrainfo = new_client('preprod', api_id='YOUR_API_ID', api_key='YOUR_API_KEY')```That's it! You're ready to start using the RCRAInfo Restful web services.The RcrainfoClient class requires one positional argument, a string, either `'preprod'`, or `'prod'`.### AuthenticationThe `RcrainfoClient` can be explicit configured to automatically authenticate as needed with the `auto_renew` keywordargument. By default, this behavior is disabled. If `auto_renew` is disabled, you must explicitly callthe `authenticate` method.```pythonfrom emanifest import new_clientrcrainfo = new_client('preprod', api_id='my_api_id', api_key='my_api_key', auto_renew=True)rcrainfo.get_site('VATEST000001')  # This will automatically authenticate if needed.print(rcrainfo.is_authenticated)  # True```The RcrainfoClient stores the security token, its expiration (20 minutes), and will request a new token once expired.### MethodsAfter providing your API credentials, you are ready to use the full functionality of the emanifest package. TheRcrainfoClient class exposes a method for each API endpoint following an `&lt;action&gt;_&lt;resource&gt;` naming convention.#### Examples:RCRAInfo endpoints that require a URL parameter should be passed as a string to the RcrainfoClient method.```pythonfrom emanifest import new_clientrcrainfo = new_client('preprod', api_id='YOUR_API_ID', api_key='YOUR_API_KEY')# Use the rcrainfo auth service to retrieve a security token.if not rcrainfo.is_authenticated:    rcrainfo.authenticate()# Any endpoint with URL parameters will take that parameter as a positional, string argument.site_resp = rcrainfo.get_site('VATEST000001')```Many of the POST request use keyword arguments to compose the http request's body. For example:```pythonfrom emanifest import new_clientrcrainfo = new_client('preprod', api_id='YOUR_API_ID', api_key='YOUR_API_KEY', auto_renew=True)resp = rcrainfo.search_mtn(siteId='VATEST000001', status='InTransit')```would send a http requests with the following body to the manifest tracking number (mtn) search endpoint.```json{  &quot;siteId&quot;: &quot;VATEST000001&quot;,  &quot;status&quot;: &quot;InTransit&quot;}```Keyword arguments use the same naming convention seen in the RCRAInfo Swagger pages and services documentation.`multipart/mixed` payloads (e.g., [JSON of a manifest](https://github.com/USEPA/e-manifest/tree/master/Services-Information/Schema/manifest-save-return-examples)and [.zip file of attachments](https://github.com/USEPA/e-manifest/tree/master/Services-Information)) can be uploaded toRCRAInfoby passing a dictionary and the bytes of the optional attachment like so:```pythonfrom emanifest import new_clientimport jsonrcrainfo = new_client('preprod', api_id='YOUR_API_ID', api_key='YOUR_API_KEY', auto_renew=True)# The dictionary and .zip file could come from a database, filesystem, an external service,# or json.load({'manifestTrackingNumber': '0123456789ELC', ... })with open('./attachments.zip', 'rb') as f:    attachment = f.read()with open('./manifest.json', 'r') as f:    manifest_json = json.loads(f.read())resp = rcrainfo.update_manifest(manifest_json, attachment)```Responses are returned as a RcraResponse object, which wraps aroundthe [requests library](https://pypi.org/project/requests/)Response object. Methods that download file attachments can be accessed via the`RcrainfoResponse.json()` method and `RcrainfoResponse.zip` property when appropriate. Theentire `request.Response` object is returned in `RcrainfoResponse.response`.```pythonfrom emanifest import new_clientrcrainfo = new_client('preprod', api_id='YOUR_API_ID', api_key='YOUR_API_KEY', auto_renew=True)resp = rcrainfo.get_manifest_attachments('123456789ELC')# RcraInfoResponse re-exports a couple attributes of the requests.Response object.print(resp.ok)# Or you can access the full Response like such...print(resp.response.json())# For endpoints that return multipart/mixed bodies, you can access JSON with the resp.json()downloaded_json = resp.json()# The .zip file can be accessed in the resp.zip property.downloaded_attachment = resp.zip```### RegulatorsStarting with version 3.0 and above of this package, regulatory users can use the same methods as industry but withthe `reg` keyword argument set to `True`. For example:```pythonfrom emanifest import new_clientrcrainfo = new_client('preprod', api_id='YOUR_API_ID', api_key='YOUR_API_KEY')resp = rcrainfo.get_manifest('123456789ELC', reg=True)```The `reg` keyword argument is set to `False` by default.The following methods have regulator options:1. get_manifest_attachments2. search_mtn3. get_correction4. get_correction_version5. get_site_mtn6. get_manifest7. get_sitesThe following methods are for regulatory users only:1. get_handler2. get_cme_lookups3. get_cme_indicators4. get_cme_typesAPI endpoints designed for use by other groups, such as regulators or industry users, will return 'Access Denied' errorsif you are not authorized to access these resources in RCRAInfo.### Advanced Usage and HelpAs of version 3.0, the RcrainfoClient is a subclass ofthe [requests library](https://requests.readthedocs.io/en/latest/)[Session Class](https://requests.readthedocs.io/en/latest/user/advanced/#session-objects) which allows you to takeadvantage of its functionality.RcrainfoClient can be also customized by subclassing and overriding. For example:```pythonfrom emanifest import RcrainfoClientclass MyClass(RcrainfoClient):    def retrieve_id(self, api_id=None) -&gt; str:        # Custom behavior to retrieve your RCRAInfo API ID        my_api_id = 'api_id_from_someplace_secure'        return super().retrieve_id(my_api_id)```For RcrainfoClient method specific documentation, you can use the `help()` function from the Python console to get adescription of each method and its inputs.```&gt;&gt;&gt; from emanifest import RcrainfoClient&gt;&gt;&gt; help(RcrainfoClient.get_bill)```For more information about the RCRAInfo services, see the documentationin the [root directory of the e-Manifest GitHub repo](https://github.com/USEPA/e-manifest), and the Swagger page of yourselectedenvironment ([Preproduction](https://rcrainfopreprod.epa.gov/rcrainfo/secured/swagger/), [Production](https://rcrainfo.epa.gov/rcrainfoprod/secured/swagger/)).Do not use the RCRAInfo Production environment for testing. To register for a testingaccount in preproduction, visit the [preprod site](https://rcrainfopreprod.epa.gov/rcrainfo/action/secured/login).## ContactPlease direct questions to the EPA e-Manifest team at [USEPA/e-manifest](https://github.com/USEPA/e-manifest/issues)## DisclaimerThe United States Environmental Protection Agency (EPA) GitHub project code is provided on an &quot;as is&quot; basis and the userassumes responsibility for its use. EPA has relinquished control of the information and no longer has responsibility toprotect the integrity, confidentiality, or availability of the information. Any reference to specific commercialproducts, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or implytheir endorsement, recommendation or favoring by EPA. The EPA seal and logo shall not be used in any manner to implyendorsement of any commercial product or activity by EPA or the United States Government.</longdescription>
</pkgmetadata>