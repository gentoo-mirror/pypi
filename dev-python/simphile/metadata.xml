<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;# Simphile**Python Text Similarity NLP Libray**[![License](https://img.shields.io/github/license/brianrisk/simphile)](https://opensource.org/licenses/MIT)![master passing](https://github.com/brianrisk/simphile/actions/workflows/tests.yml/badge.svg?branch=master)![master passing](https://github.com/brianrisk/simphile/actions/workflows/publish_package.yml/badge.svg?branch=master)![master passing](https://github.com/brianrisk/simphile/actions/workflows/publish_docs.yml/badge.svg?branch=master)&lt;/div&gt;## Install```bashpip install simphile```## UsageJust use comparison functions to get started quickly:```pythonfrom simphile import jaccard_similarity, euclidian_similarity, compression_similaritytext_a = &quot;I love dogs&quot;text_b = &quot;I love cats&quot;print(f&quot;Jaccard Similarity: {jaccard_similarity(text_a, text_b)}&quot;)print(f&quot;Euclidian Similarity: {euclidian_similarity(text_a, text_b)}&quot;)print(f&quot;Compression Similarity: {compression_similarity(text_a, text_b)}&quot;)```Output:```Jaccard Similarity: 0.5Euclidian Similarity: 0.5917517095361369Compression Similarity: 0.6842105263157894```When you need to compare one reference text to many, it's more effecient toset up a comparison object with that text```pythonfrom simphile import JaccardSimilarity, TextProcessorreference = &quot;the quick brown fox jumped over the lazy dogs&quot;comparisons = [    &quot;I love dogs&quot;,    &quot;A fox. And a dog. Could never... be friends&quot;,    &quot;The LAZY DOG was annoyed by the QUICK FOX&quot;,    &quot;the quick dogs ran over the 23 brown carpets&quot;]# TextProcessor applies the same cleaning logic to all textprocessor = TextProcessor(lowercase=True, only_alphabetic=True)# using JaccardSimilarity, but code is exactly the same with # CompressionSimilarity and EuclidianSimilaritycomparator = JaccardSimilarity(reference, processor)# scoring the reference to each string in the `comparisons` listfor comparison in comparisons:    print(f&quot;{comparison}: {comparator.score(comparison)}&quot;)```Output:```I love dogs: 0.09090909090909091A fox. And a dog. Could never... be friends: 0.058823529411764705The LAZY DOG was annoyed by the QUICK FOX, 0.38461538461538464the quick dogs ran over the 23 brown carpets: 0.5454545454545454```## AboutSim‚Ä¢phile = &quot;the love of similarities&quot;The aim is to proved easy access to text similarity methods that are language-agnostic and (ideally) much faster in execution time than methods that employ text embeddings.* **Compression Similairty** ‚Äì leverages the pattern recognition of compression algorithms* **Euclidian Similarity** ‚Äì Treats text like points in multi-dimensional space and calculates their closeness* **Jaccard Similairy** ‚Äì Texts are more similar the more their words overlap### Use Cases:* When speed is required  * fast pre-filters:  Reduce a set of 10,000,000 text to the top 1000 then score those with CPU-intensive methods* when language is unknown* non-language comparisons (e.g. URL clustering)* language detection (e.g. compare a text to Spanish, English, French, etc. lexicons and return match with highest score)## Work with me!My group is hiring two data scientists.  [Contact me on LinkedIn](https://www.linkedin.com/in/brianrisk/) about the positions## Documentation[Simphile text similarity documentation](https://brianrisk.github.io/simphile/index.html)The /examples directory contains working code examples.## E-Z ways to helpThis is a world where the more popular something is, the more quickly it improves.  Help get the word out:* Give this repo a ‚≠êÔ∏è* Vote up these answers on Stack Overflow üëç:  * [How to compute the similarity between two text documents?](https://stackoverflow.com/a/73908280/2595659)  * [How can I calculate the Jaccard Similarity of two lists containing strings in Python?](https://stackoverflow.com/a/73873869/2595659)* Vote up the [Reddit post](https://www.reddit.com/r/LanguageTechnology/comments/xs11mx/new_python_text_similarity_package/)## Brief Explanations### Compression SimilarityCompression algorithms find patterns in files in order to shrink them.This method uses that pattern detection to measure similarity. If a compressor can usethe patterns that it found in text_a to also decently compress text_b, then that meansthere are similar patterns in both files.  The crux of the similarity score is computedakin to this pseudocode example:```numerator = length(compress(concatenate(text_a, text_b)))denominator = length(compress(text_a)) + length(compress(text_b))score = numerator / denominator```Further Reading:* [&quot;The Similarity Metric&quot;](https://ieeexplore.ieee.org/abstract/document/1362909) - the origin of this method* [a nice writeup](https://maxhalford.github.io/blog/text-classification-by-compression/)### Jaccard Similarity![Jaccard Formula](https://wikimedia.org/api/rest_v1/media/math/render/svg/eaef5aa86949f49e7dc6b9c8c3dd8b233332c9e7)All of the write-ups I have seen for Jaccard get it wrong in the implementation.  They all use set() data structures.At a quick glance this makes because the method uses set arithmetic (e.g. union, intersection).  However, sets don't allow duplicate elements,so this is unsatisfactory for text analysis.  For example &quot;dog cat cat cat&quot; and &quot;dog dog dog cat&quot; are two very differenttypes of pet owners, but using sets would see that as {&quot;dog&quot;, &quot;cat&quot;} and another {&quot;dog&quot;, &quot;cat&quot;} and 100% similar.This imeplementation of Jaccard uses set arithmetic on lists.Further Reading:* [Jaccard Index on Wikipedia](https://en.wikipedia.org/wiki/Jaccard_index)### Euclidian Similarity![Euclidian Distance](https://www.gstatic.com/education/formulas2/472522532/en/euclidean_distance.svg)Treats tokenized words like dimensions and strings as normalizedpoints in this multi-dimensional space and uses the above formulato calculate the distance between the two points being compared.</longdescription>
</pkgmetadata>