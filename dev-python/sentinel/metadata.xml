<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*************************************************sentinel — create sentinel and singleton objects*************************************************|Tests| |PyPI version|.. |Tests| image:: https://github.com/eddieantonio/sentinel/workflows/Test%20and%20Lint/badge.svg   :target: https://github.com/eddieantonio/sentinel/actions?query=workflow%3A%22Test+and+Lint%22.. |PyPI version| image:: https://img.shields.io/pypi/v/sentinel   :target: https://pypi.org/project/sentinel/Creates simple sentinel objects.Install=======Basic features::   pip install sentinelwith extra magic features powered by python-varname_::   pip install 'sentinel[varname]'What is a sentinel?===================Sentinels_ are singleton_ objects that typically represent someterminating (end) condition or have a special, symbolic meaning. Python's built-in``None`` is a sentinel. Python also has other sentinels like ``NotImplemented`` and``Ellipsis``.If you want to create your own sentinels, use this library! Make your calls to``dict.get()`` more meaningful! You can replace the ``object()`` idiom with a sentinel:.. code-block:: python   d = {&quot;a&quot;: 1, &quot;b&quot;: None}   # Before sentinel:   missing = object()   if d.get(&quot;c&quot;, missing) is missing:       ... # do some stuff   # After sentinel:   Missing = sentinel.create()   if d.get(&quot;c&quot;, Missing) is Missing:       ... # do some stuffFeatures--------- sentinels are unique- sentinels are singletons — the **only** instance of their own anonymous class- sentinels can be used with ``is`` comparisons- sentinels can be used with ``pickle``- sentinels can be used with ``copy.deepcopy``- you can **add** arbitrary attributes and methods to sentinels- sentinels have a nice, self-documenting ``__repr__``!Usage=====Create a sentinel:&gt;&gt;&gt; import sentinel&gt;&gt;&gt; MySentinel = sentinel.create(&quot;MySentinel&quot;)&gt;&gt;&gt; MySentinelMySentinelIf you have python-varname_ installed, or installed this module using``pip install 'sentinel[varname]'``, ``sentinel.create()`` can infer the namefrom the assignment expression:.. code-block:: python   import sentinel   MySentinel = sentinel.create()   print(MySentinel)  # prints `MySentinel`**NOTE**: this will not work in the interactive console!&gt;&gt;&gt; import sentinel&gt;&gt;&gt; # Fails because varname can't find the source code for the interactive console!&gt;&gt;&gt; MySentinel = sentinel.create(&quot;MySentinel&quot;)Example-------Sentinels are useful when other objects such as ``None``, ``False``,``0``, ``-1``, are valid values within some data structure. For example, settingdefault values when all other values are valid with:``dict.setdefault()``:.. code-block:: python   d = {&quot;stdout&quot;: None, &quot;stdin&quot;: 0, &quot;EOF&quot;: -1}   MissingEntry = sentinel.create()   [d.setdefault(key, MissingEntry) for key in (&quot;stdin&quot;, &quot;stdout&quot;, &quot;stderr&quot;)]   [0, None, MissingEntry]Alternatively, using ``dict.get()`` when fetching values:&gt;&gt;&gt; d = {&quot;stdout&quot;: None, &quot;stdin&quot;: 0, &quot;EOF&quot;: -1}&gt;&gt;&gt; d.get(&quot;stdout&quot;, MissingEntry)None&gt;&gt;&gt; d.get(&quot;stdin&quot;, MissingEntry)0&gt;&gt;&gt; d.get(&quot;stderr&quot;, MissingEntry)MissingEntrySince a new sentinel can never occur in the original dictionary, you can tell whichentries are missing or unset in a dictionary in a self-documenting way:.. code-block:: python   Unset = sentinel.create()   if d.get(&quot;stdin&quot;, Unset) is Unset:       stdin = 0  # some reasonable defaultAdding extra methods and class attributes-----------------------------------------Sentinels may also inherit from base classes, or implement extra methods.Consider a binary search tree with two kinds of nodes: interior nodes(``Node``) which contain some payload and leaves (``Leaf``), which simplyterminate traversal.To create singleton leaf which implements a ``search`` method and an``is_leaf`` property, you may provide any extra class attributes in the``cls_dict`` keyword argument. The following is a full example of boththe singleton ``Leaf`` and its ``Node`` counterpart:.. code-block:: python    def _search_leaf(self, key):        raise KeyError(key)    Leaf = sentinel.create('Leaf', cls_dict={        'search': _search_leaf,        'is_leaf': property(lambda self: True)    })    class Node(object):        def __init__(self, key, payload, left=Leaf, right=Leaf):            self.left = left            self.right = right            self.key = key            self.payload = payload        def search(self, key):            if key &lt; self.key:                return self.left.search(key)            elif key &gt; self.key:                return self.right.search(key)            else:                return self.payload        is_leaf = property(lambda: false)Example usage:&gt;&gt;&gt; tree = Node(2, 'bar', Node(1, 'foo'), Node(3, 'baz'))&gt;&gt;&gt; tree.search(1)'foo'&gt;&gt;&gt; tree.search(4)Traceback (most recent call last):    ...KeyError: 2Contributing============This project uses Poetry_. To contribute to the codebase, make sure to `install poetry`_,With Poetry installed, clone then repo, then within the repo directory, install the developer dependencies::    $ poetry install --extras varnameNext, I recommend you do all development tasks within the ``poetry shell``::    $ poetry shell    (sentinel-nUnrocCf-py3.9) $ black .    (sentinel-nUnrocCf-py3.9) $ pytest.. _Sentinels: http://en.wikipedia.org/wiki/Sentinel_nodes.. _singleton: http://en.wikipedia.org/wiki/Singleton_pattern.. _Poetry: https://python-poetry.org/.. _install poetry: https://python-poetry.org/docs/#installation.. _python-varname: https://github.com/pwwang/python-varname</longdescription>
</pkgmetadata>