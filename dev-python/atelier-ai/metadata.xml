<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Atelier AI**Documentation**: [https://john-james-ai.github.io/atelier-ai](https://john-james-ai.github.io/atelier-ai)**Source Code**: [https://github.com/john-james-ai/atelier-ai](https://github.com/john-james-ai/atelier-ai)**PyPI**: [https://pypi.org/project/atelier-ai/](https://pypi.org/project/atelier-ai/)---Atelier AI: Studio for AI Designers## Installation```shpip install atelier-ai```## Development* Clone this repository* Requirements:  * [Poetry](https://python-poetry.org/)  * Python 3.7+* Create a virtual environment and install the dependencies```shpoetry install```* Activate the virtual environment```shpoetry shell```### Testing```shpytest```### DocumentationThe documentation is automatically generated from the content of the [docs directory](./docs) and from the docstrings of the public signatures of the source code. The documentation is updated and published as a [Github project page ](https://pages.github.com/) automatically as part each release.### ReleasingTrigger the [Draft release workflow](https://github.com/john-james-ai/atelier-ai/actions/workflows/draft_release.yml)(press _Run workflow_). This will update the changelog &amp; version and create a GitHub release which is in _Draft_ state.Find the draft release from the[GitHub releases](https://github.com/john-james-ai/atelier-ai/releases) and publish it. When a release is published, it'll trigger [release](https://github.com/john-james-ai/atelier-ai/blob/master/.github/workflows/release.yml) workflow which creates PyPI release and deploys updated documentation.### Pre-commitPre-commit hooks run all the auto-formatters (e.g. `black`, `isort`), linters (e.g. `mypy`, `flake8`), and other quality checks to make sure the changeset is in good shape before a commit/push happens.You can install the hooks with (runs for each commit):```shpre-commit install```Or if you want them to run only for each push:```shpre-commit install -t pre-push```Or if you want e.g. want to run all checks manually for all files:```shpre-commit run --all-files```</longdescription>
</pkgmetadata>