<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI Latest Release](https://img.shields.io/pypi/v/fawltydeps.svg)](https://pypi.org/project/fawltydeps/) [![Supported Python versions](https://img.shields.io/pypi/pyversions/fawltydeps.svg)](https://pypi.org/project/fawltydeps/) ![Build](https://img.shields.io/github/actions/workflow/status/tweag/fawltydeps/ci.yaml) [![Licence](https://img.shields.io/pypi/l/fawltydeps.svg)](https://pypi.org/project/fawltydeps/) [![Code of conduct](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](code_of_conduct.md)# FawltyDepsFawltyDeps is a dependency checker for Python that finds _undeclared_ and/or_unused_ 3rd-party dependencies in your Python project.The name is inspired by the Monty Python-adjacent[Fawlty Towers](https://en.wikipedia.org/wiki/Fawlty_Towers) sitcom.![FawltyDeps demo](https://github.com/tweag/FawltyDeps/raw/main/docs/fawltydeps_demo_tqdm.gif)## Table of contents[Key Concepts](#key-concepts)[Installation](#installation)[Usage](#usage)[Configuration](#configuration)[Documentation](#documentation)[Development](#development)[Integration tests](#integration-tests)[FAQ](#faq)## Key Concepts- **_undeclared_ dependency**: a package that's used (in particular, `import`ed) by a project and which lacks a corresponding declaration to ensure that it's available.  For example, you `import numpy`, but you've forgotten to include `numpy` in your `requirements.txt`.  Pragmatically, this means the project is prone to runtime errors.- **_unused_ dependency**: a package that's declared as necessary for a project but which is never used by project code.  For example, you have `numpy` listed in your `requirements.txt`, but you never actually `import numpy`.  Pragmatically, this means that project installation may consume more space than needed and will be more likely to break with future software releases; in short, these are costs paid for no benefit.## InstallationThe library is distributed with PyPI, so simply:```shpip install fawltydeps```or any other way to install Python packages from PyPI should be enough to make it available in your environment.Consider adding `fawltydeps` to your development dependencies, to help you catch undeclared and unused dependencies in your projects.## UsageTo check the project in the current directory run:```shfawltydeps```This will find imports in all the Python code under the current directory,extract dependencies declared by your project, and then report[_undeclared_ and _unused_ dependencies](#key-concepts).### Available ActionsFawltyDeps provides the following options for controlling what actions to perform. Onlyone of these can be used at a time:- `--check`: Report both undeclared and unused dependencies- `--check-undeclared`: Report only undeclared dependencies- `--check-unused`: Report only unused dependencies- `--list-imports`: List third-party imports extracted from the project- `--list-deps`: List declared dependencies extracted from the project- `--list-sources`: List files/directories from which imports, declared  dependencies and installed packages would be extractedWhen none of these are specified, the default action is `--check`.### Where to find code and dependency declarationsBy default, FawltyDeps will look for Python code (`*.py` and `*.ipynb`) anddependency declarations (see list of supported files below) under the currentdirectory. If you want FawltyDeps to look elsewhere, you can pass a differentdirectory (aka `basepath`) as a positional argument:```shfawltydeps my_project/```If you want to separately declare the source of the code and the source of thedependencies, you may use the `--code` and `--deps` options documented in thenext section. In short, giving the `basepath` positional argument is equivalentto passing both the `--code` and the `--deps` options, like this:```shfawltydeps --code my_project/ --deps my_project/```#### Where to find Python codeThe `--code` option tells FawltyDeps where to find the Python code to parse for`import` statements. You can pass any number of these:- a single file: Either a Python file (`*.py`) or a Jupyter Notebook (`*.ipynb`)- a directory: FawltyDeps will find all Python files and Jupyter notebooks under this directory.- `-`: Passing a single dash (`--code=-`) tells FawltyDeps to read Python code  from stdin.If no `--code` option is passed, FawltyDeps will find all Python code under the`basepath`, if given, or the current directory (i.e. same as `--code=.`).To include both code from stdin (`import foo`) and a file path (`file.py`), use:```shecho &quot;import foo&quot; | fawltydeps --list-imports --code - file.py```At any time, if you want to see where FawltyDeps is looking for Python code,you can use the `--list-sources --detailed` options.#### Where to find declared dependenciesThe `--deps` option tells FawltyDeps where to look for your project's declareddependencies. A number of file formats are supported:- `*requirements*.txt` and `*requirements*.in`- `pyproject.toml` (following PEP 621 or Poetry conventions)- `setup.py` (only limited support for simple files with a single `setup()`  call and no computation involved for setting the `install_requires` and  `extras_require` arguments)- `setup.cfg`The `--deps` option accepts a space-separated list of files or directories.Each file will be parsed for declared dependencies; each directory willbe searched, parsing all of the supported files (see the above list) foundwithin. You would typically want to pass individual files, if you want tobe explicit about where to find the declared dependencies.If no `--deps` option is passed, FawltyDeps will look for the above files underthe `basepath`, if given, or the current directory (i.e. same as `--deps .`).### Resolving dependenciesWhen FawltyDeps looks for undeclared and unused dependencies, it needs to match`import` statements in your code with corresponding package dependenciesdeclared in your project configuration.To solve this, FawltyDeps uses a sequence of resolvers (aka. mapping strategies)to determine which Python packages provide which import names. The diagram belowshows the dependencies' flow through the sequence of mappings supported byFawltyDeps (each of which is introduced in the following subsections):- Local Python environment mapping- Mapping via temporarily installed packages- Identity mapping- User-defined mapping&lt;img src=&quot;./images/resolvers_sequence.png&quot; alt=&quot;Sequence of resolvers used by FawltyDeps&quot; width=&quot;500&quot;/&gt;The priority of each of these mappings, together with their default values andcustomization options are summarized in the table below:| Priority | Mapping strategy        | Options ||----------|----------------------|------------|| 1        | User-defined mapping | Provide a custom mapping in TOML format via `--custom-mapping-file` or a `[tool.fawltydeps.custom_mapping]` section in `pyproject.toml`. &lt;br /&gt; Default: No custom mapping|| 2        | Mapping from installed packages | Point to one or more environments via `--pyenv`.&lt;br /&gt;Default: auto-discovery of Python environments under the projectâ€™s basepath. If none are found, default to the Python environment in which FawltyDeps itself is installed.|| 3a       | Mapping via temporary installation of packages  | Activated with the `--install-deps` option.|| 3b       | Identity mapping | Active by default. Deactivated when `--install-deps` is used. |#### Local Python environment mappingLocal Python environment mapping refers to using packages already installedin local Python environments on your system to resolve dependencies intothe imports they expose. This leverages the functionality providedby the excellent [`importlib_metadata`](https://importlib-metadata.readthedocs.io/en/latest/)library.You can use the `--pyenv` option (or the `pyenvs` configuration directive)to point FawltyDeps at one [or more] specific Python environment(s) locatedwithin your project or elsewhere. For example:```shfawltydeps --code my_package/ --deps pyproject.toml --pyenv /path/to/project/venv```This will tell FawltyDeps:- to look for `import` statements in the `my_package/` directory,- to parse dependencies from `pyprojects.toml`, and- to use the Python environment at `/path/to/project/venv` to map dependency names in  `pyproject.toml` into import names used in your code under `my_package/`If `--pyenv` is not used, FawltyDeps will look for _Python environments_(virtualenvs or similar directories like `.venv` or `__pypackages__`.) insideyour project (i.e. under `basepath`, if given, or the current directory).If no Python environments are found within your project, FawltyDeps will fallback to looking at your _current Python environment_: This is the environmentin which FawltyDeps itself is installed.This works well when you, for example, `pip install fawltydeps` into the samevirtualenv as your project dependencies.You can use `--pyenv` multiple times to have FawltyDeps look for packages inmultiple Python environments. In this case (or when multiple Python environmentsare found inside your project) FawltyDeps will use the union (superset) of allimports provided by all matching packages across those Python environments asvalid import names for that dependency.#### Identity mappingWhen unable to find an installed package that corresponds to a declareddependency either via a user-provided mapping or local Python environments,FawltyDeps will fall back to one of two strategies. &quot;Identity mapping&quot;, which wepresent in this section is the default fallback strategy. We discuss the otherstrategy in the next subsection.Identity mapping relies on the simplistic assumption that the dependency providesa single import of the same name, i.e. it will expect that when you depend on`some_package`, then that should correspond to `import some_package` statementsin your code.This assumption is correct for many packages and it allows FawltyDeps toproduce results (albeit sometimes inaccurate ones) when the current Pythonenvironment does not contain all of your declared dependencies.To ensure correctness, however, refer to the next subsection outlining the otherfallback strategy.#### Mapping by temporarily installing packagesYour local Python environements might not always have all your project'sdependencies installed. Assuming that you donâ€™t want to go through thebother of installing packages manually, and you also don't want to rely onthe inaccurate identity mapping as your fallback strategy, you can use the`--install-deps` option. This will `pip install`missing dependencies (from [PyPI](https://pypi.org/), by default) into a_temporary virtualenv_, and allow FawltyDeps to use this to come up with thecorrect mapping.Since this is a potentially expensive strategy (e.g. downloading packages fromPyPI), we have chosen to hide it behind the `--install-deps` command-lineoption. If you want to always enable this option, you can set the corresponding`install_deps` configuration variable to `true` in the `[tool.fawltydeps]`section of your `pyproject.toml`.To customize how this auto-installation happens (e.g. use a different package index),you can use [pipâ€™s environment variables](https://pip.pypa.io/en/stable/topics/configuration/).Note that weâ€™re never guaranteed to be able to resolve _all_ dependencies withthis method: For example, there could be a typo in your `requirements.txt` thatmeans a dependency will _never_ be found on PyPI, or there could be othercircumstances (e.g. network issues or restrictions in your CI environment) thatprevent this strategy from working at all. In this case, FawltyDeps will throw an error and abort.#### User-defined mappingWe provide a custom mapping functionality to users wishing to take controlover the way FawltyDeps resolves dependencies. You may define your own mappingof dependency names to import names, by providing a TOML file like this:```tomlmy-package = [&quot;mpkg&quot;]scikit-learn = [&quot;sklearn&quot;]multiple-modules = [&quot;module1&quot;, &quot;module2&quot;]```To use your mapping, run:```shfawltydeps --custom-mapping-file my_mapping.toml```FawltyDeps will parse your `my_mapping.toml` file and use the extracted mappingfor matching dependencies to imports.You may also place the custom mapping in the `pyproject.toml` file of yourproject, inside a `[tool.fawltydeps.custom_mapping]` section, like this:```toml[tool.fawltydeps.custom_mapping]my-package = [&quot;mpkg&quot;]scikit-learn = [&quot;sklearn&quot;]multiple-modules = [&quot;module1&quot;, &quot;module2&quot;]```The provided mapping can be complete or partial. When a dependency is notpresent in the given mapping, FawltyDeps will continue to resolve it usingthe sequence of resolvers illustrated in the diagram above.Caution when using your mapping is advised: As illustrated in the diagram, theuser-defined mapping takes precedence over the other resolvers documentedabove. For example, if the mapping file has some stale/incorrect mappingentries, they will _not_ be resolved by the Python environment resolver (whichis usually more accurate).### Ignoring irrelevant resultsThere may be `import` statements in your code that should not be considered anundeclared dependency. This might happen if you for example do a conditional`import` with a `try: ... except ImportError: ...` block (or similar).FawltyDeps is not able to recognize whether these dependencies should have beendeclared or not, but you can ask for them to be ignored with the`--ignore-undeclared` option, for example:`--ignore-undeclared some_module some_other_module`Conversely, there may be dependencies that you have declared without intendingto `import` them. This is often the case for developer tools like Black or Mypythat are part of your project's development environment.FawltyDeps cannot automatically tell which of your declared dependencies aremeant to be `import`ed or not, but you ask for specific deps to be ignored withthe `--ignore-unused` option, for example:`--ignore-unused black mypy`### Output formatsThe default output from FawltyDeps is a summary outlining the relevantdependencies found (according to the selected actions).However you can also ask for more information from FawltyDeps:- `--summary`: Default (human-readable) summary output- `--detailed`: Longer (human-readable) output that includes the location of  the relevant dependencies.- `--json`: Verbose JSON-formatted output for other tools to consume and  process further.Only one of these options can be used at a time.### More helpRun `fawltydeps --help` to get the full list of available options.## ConfigurationYou can use a `[tool.fawltydeps]` section in `pyproject.toml` to configure thedefault behavior of FawltyDeps. Here's a fairly comprehensive example:```toml[tool.fawltydeps]code = [&quot;myproject&quot;]  # Only search for imports under ./myprojectdeps = [&quot;pyproject.toml&quot;]  # Only look for declared dependencies hereignore_unused = [&quot;black&quot;]  # We use `black`, but we don't intend to import itoutput_format = &quot;human_detailed&quot;  # Detailed report by default```Here is a complete list of configuration directives we support:- `actions`: A list of one or more of these actions to perform: `list_imports`,  `list_deps`, `check_undeclared`, `check_unused`. The default behavior  corresponds to `actions = [&quot;check_undeclared&quot;, &quot;check_unused&quot;]`.- `output_format`: Which output format to use by default. One of `human_summary`,  `human_detailed`, or `json`.  The default corresponds to `output_format = &quot;human_summary&quot;`.- `code`: Files or directories containing the code to parse for import statements.  Defaults to the current directory, i.e. like `code = [&quot;.&quot;]`.- `deps`: Files or directories containing the declared dependencies.  Defaults to the current directory, i.e. like `deps = [&quot;.&quot;]`.- `pyenvs`: Where to look for Python environments (directories like `.venv`,  `__pypackages__`, or similar) to be used for resolving project dependencies  into provided import names. Defaults to looking for Python environments under  the current directory, i.e. like `pyenvs = [&quot;.&quot;]`. If none are found, use the  Python environment where FawltyDeps is installed (aka. `sys.path`).- `ignore_undeclared`: A list of specific dependencies to ignore when reporting  undeclared dependencies, for example: `[&quot;some_module&quot;, &quot;some_other_module&quot;]`.  The default is the empty list: `ignore_undeclared = []`.- `ignore_unused`: A list of specific dependencies to ignore when reporting  unused dependencies, for example: `[&quot;black&quot;, &quot;mypy&quot;]`.  The default is the empty list: `ignore_unused = []`.- `deps_parser_choice`: Manually select which format to use for parsing  declared dependencies. Must be one of `&quot;requirements.txt&quot;`, `&quot;setup.py&quot;`,  `&quot;setup.cfg&quot;`, `&quot;pyproject.toml&quot;`, or leave it unset (i.e. the default) for  auto-detection (based on filename).- `install-deps`: Automatically install Python dependencies gathered with  FawltyDeps into a temporary virtual environment. This will use `pip install`,  which downloads packages from PyPI by default.- `verbosity`: An integer controlling the default log level of FawltyDeps:  - `-2`: Only `CRITICAL`-level log messages are shown.  - `-1`: `ERROR`-level log messages and above are shown.  - `0`: `WARNING`-level log messages and above are shown. This is the default.  - `1`: `INFO`-level log messages and above are shown.  - `2`: All log messages (including `DEBUG`) are shown.- `custom_mapping_file`: Paths to files containing user-defined mapping.  Expected file format is defined in the User-defined mapping [section](#user-defined-mapping).- `[tool.fawltydeps.custom_mapping]`: Section in the configuration, under which a custom mapping  can be added. Expected format is described in the User-defined mapping [section](#user-defined-mapping).### Environment variablesIn addition to configuring FawltyDeps via `pyproject.toml` as show above, youmay also pass the above configuration directives via the environment, using a`fawltydeps_` prefix. For example, to enable JSON output via the environment,set `fawltydeps_output_format=json` in FawltyDeps' environment.### Configuration cascade- Command-line options take precedence, and override corresponding settings  passed via the environment or `pyproject.toml`.- Environment variables override corresponding settings from `pyproject.toml`.- Configuration in `pyproject.toml` override only the ultimate hardcoded defaults.- The ultimate defaults when no cutomizations takes place are hardcoded inside  FawltyDeps, and are documented above.## DocumentationThis project began with an exploration and design phase, yielding this [design document](./docs/DesignDoc.md), which lays out the main objective for this project and compares various strategies consideredIn the [code design](./docs/CodeDesign.md) section of documentation we lay out rules which we adopt to guide code architecture decisions and maintain code quality as the project evolves.## Development### PoetryThe project uses [Poetry](https://python-poetry.org/). Install Poetry, and thenrun:```shpoetry install --with=dev```to create a virtualenv with all (development) dependencies installed.From there you can run:```shpoetry shell```to jump into a development shell with this virtualenv activated. Here you willhave all the dependencies declared in our [`pyproject.toml`](./pyproject.toml)installed. (Without this shell activated you will have to prefix the morespecific commands below with `poetry run ...`).### NoxWe use [Nox](https://nox.thea.codes/en/stable/) for test/workflow automation:```shnox --list        # List sessionsnox               # Run all available sessionsnox -R            # Run all available sessions, while reusing virtualenvs (i.e. faster)nox -s tests      # Run unit tests on supported Python versions (that are available)nox -s tests-3.7  # Run unit tests on Python v3.7 (assuming it is available locally)nox -s integration_tests-3.11  # Run integration tests on Python 3.11nox -s lint       # Run linters (mypy + pylint) on all supported Python versionsnox -s format     # Check formatting (isort + black)nox -s reformat   # Fix formatting (isort + black)```If you want to run a command individually, the corresponding session is defined inside[`noxfile.py`](./noxfile.py). For example, thesecommands will work:```shpytest                   # Run unit testspytest -m integration    # Run integration testsmypy                     # Run static type checkingpylint fawltydeps tests  # Run Pylintisort fawltydeps tests   # Fix sorting of import statementsblack .                  # Fix code formatting```### Shortcut: NixWe have a [`shell.nix`](./shell.nix) which provides Poetry in addition to all ofour supported Python versions. If you have [Nix](https://nixos.org) availableon your machine, then running:```shnix-shell```will put you inside a shell where the Poetry virtualenv (with all developmentdependencies) is activated, and all supported Python versions are available.This also provides isolation from whatever Python version(s) and packages areinstalled on your system.From there, a simple `nox` will run all tests + linters against all supportedPython versions, as well as checking/formatting the code.## Integration testsIn addition to comprehensive unit tests under `tests/`, we also verifyFawltyDeps' behavior with integration tests which (among other things) includetesting with real-world projects. To that end, we have a framework in[`tests/test_real_projects.py`](./tests/test_real_projects.py) for downloadingand unpacking tarballs of 3rd-party projects, and then running fawltydeps on them,while verifying their output. These projects, along with the expected FawltyDepsoutputs, are defined in TOML files under[`tests/real_projects`](./tests/real_projects).### Contributing more projects to the test suiteFor bug reports, when a user reports that FawltyDeps does not work as it shouldon their project, we aim to follow this process:- If the project is freely available, we can add a relevant version of the  project under `tests/real_projects`.- We can then isolate the problems/issues/features and define/express them  succinctly as one or more sample projects under `tests/sample_projects`.- We examine the issue more closely and update core logic, adding/altering unit  tests along the way.The resulting updates are introduced to `fawltydeps` and reflected in ourexpectations, first in the TOML for the sample project(s) and then finally inthe `real_projects` TOML.If you find a project where FawltyDeps is not doing a good job, we appreciateif you add that project under [`tests/real_projects`](./tests/real_projects).To see how these tests work, look at the existing files in that directory.## FAQ### I run `fawltydeps` and get some undeclared dependencies. What can I do with it?You can run a detailed report to see the exact location (file and line number), in whichthe undeclared dependencies were imported:```shfawltydeps --detailed```and debug each occurrence. Typically an undeclared dependency can be fixed in a couple of ways:- A true undeclared dependency is fixed by _declaring_ it, e.g. adding it to your `pyproject.toml` or similar.- If you disagree with FawltyDeps' classification, you can always use `--ignore-undeclared` to silence the error. If you're sure this dependency should not have been reported by FawltyDeps, you may consider filing a bug report.### How not to display tools like `black` and `pylint` in _unused dependencies_?By default, all packages declared as dependencies by your project are includedin the FawltyDeps analysis, even if they only contain tools that were not meantto be `import`ed, but rather meant to be run by, say, in a pre-commit hook or aCI script. In such cases you may use either:```shfawltydeps --ignore-unused black pylint```or add an equivalent directive to the FawltyDeps configuration in your`pyproject.toml` (see below).### How can I store my `fawltydeps` command line options in a configuration file?You can run:```shfawltydeps --generate-toml-config```to generate a `[tool.fawltydeps]` section with the current configuration thatyou can then directly copy into your `pyproject.toml`. Options that have theirdefault value are commented in this output, so you have quickly see where yoursettings differ from the FawltyDeps defaults.This also works together with other command line options, so for example in theprevious question, you could add `--generate-toml-config` to the command line(i.e. run `fawltydeps --ignore-unused black pylint --generate-toml-config`),to get this:```toml[tool.fawltydeps]# Default options are commented...ignore_unused = [&quot;black&quot;, &quot;pylint&quot;]```### How to use FawltyDeps in a monorepo?Running `fawltydeps` without arguments at the root of a monorepowill most likely not give you a useful result:it will collect dependencies and import statements from across the _entire_ monorepo.The produced report may be overwhelming and at the same time not granular enough.Instead, you should run FawltyDeps for each package separately.This collects dependencies and import statements for one package at a time.Having:```shâ”œ lib1| â”œ pyproject.toml| â”œ ....â”œ lib2| â”œ pyproject.toml| â”œ ....```run for each `libX`:```shfawltydeps libX```### Why must FawltyDeps run in the same Python environment as my project dependencies?(This is no longer true since FawltyDeps v0.11: FawltyDeps should be able toautomatically find your project dependencies when they are installed in a Pythonenvironment that exists within your project. If your project dependencies areinstalled elsewhere, you can point FawltyDeps in their direction with `--pyenv`,as explained above in the section on[Python environment mapping](#python-environment-mapping))The reason why FawltyDeps need to find your project dependencies _somewhere_ isthat the core logic of FawltyDeps needs to match `import` statements in yourcode with dependencies declared in your project configuration. This seemsstraightforward for many packages: for example you `pip install requests` andthen you can `import requests` in your code. However, this mapping from the nameyou install to the name you `import` is not always self-evident:- There are sometimes differences between the package name that you  declare as a dependency, and the `import` name it provides. For example, you  depend on `PyYAML`, but you `import yaml`.- A dependency can expose more than one import name. For example the  `setuptools` package exposes three `import`able packages: `_distutils_hack`,  `pkg_resources`, and `setuptools`. So when you `import pkg_resources`,  FawltyDeps need to figure out that this corresponds to the `setuptools`  dependency.To solve this, FawltyDeps looks at the packages installed in your Pythonenvironment to correctly map dependencies (package names) into the imports thatthey provide. This is:- any Python environment found via the `--pyenv` option, or- any Python environment found within your project (`basepath` or the current  directory).- Failing that, FawltyDeps will use the _current Python environment_,  i.e. the one in which FawltyDeps itself is running.As a final resort, when an installed package is not found for a declareddependency, the_identity mapping_ that FawltyDeps falls back to will still do a good job forthe majority of dependencies where the import name is indeed identical to thepackage name that you depend on.This is an area of active development in FawltyDeps, and we are[working on better solutions](https://github.com/tweag/FawltyDeps/issues/195),to avoid having to fall back to this identity mapping.### Why does FawltyDeps fail to match `sklearn` with `scikit-learn`?There are cases, where FawltyDeps may not match imports and obviously relateddependencies, like `sklearn` and `scikit-learn`. It will report `sklearn` as_undeclared_ and `scikit-learn` as an _unused_ dependency.This is very much related to the above question. `scikit-learn` is an exampleof a package that exposes a different import name: `sklearn`.When `scikit-learn` is not found in the Python environment(s) used by FawltyDeps,then FawltyDeps is unable to make the connection between these two names.To solve this problem, make sure that `scikit-learn` is installed in a Pythonenvironment that belongs to your project. Alternatively, you can use the`--pyenv` option to point at a Python environment where `scikit-learn` and yourother dependencies are installed.### How can I pass Python code to FawltyDeps via standard input?The `--code` argument accepts a single hyphen (`-`) as a special value meaningthat code should be read from standard input. When using this you may pipe orredirect your Python code into FawltyDeps like this:```shcat some/source/of/python/code | fawltydeps --code -# orfawltydeps --code - &lt; some/source/of/python/code```You can also use this directly in the terminal to e.g. have FawltyDeps analyzesome Python code that is in your clipboard:```shfawltydeps --code -# FawltyDeps waits for code on stdin; paste from your clipboard,# then press Ctrl+D to signal EOF (end-of-file).```### Can I use FawltyDeps as a pre-commit hook?Yes! Assuming that you already use the [pre-commit](https://pre-commit.com)tool, you can add something like this to your project's`.pre-commit-config.yaml`:```yamlrepos:  - repo: https://github.com/tweag/FawltyDeps    rev: v0.13.0    hooks:      - id: check        args:          - --detailed```</longdescription>
</pkgmetadata>