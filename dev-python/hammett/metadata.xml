<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>hammett=======.. image:: https://travis-ci.org/boxed/hammett.svg?branch=master    :target: https://travis-ci.org/boxed/hammett.. image:: https://codecov.io/gh/boxed/hammett/branch/master/graph/badge.svg  :target: https://codecov.io/gh/boxed/hammettHammett is a fast python test runner that aims to be compatible with the partsof pytest most people use (unless that conflicts with the goal of being fast).It also adds some features that can dramatically improve your testing experienceif you adapt more fully to hammett.How much faster is hammett?---------------------------This will depend on how fast your test suite is.Hammett isn't magic, it's just a runner made by someone who cares aboutperformance a lot. It aims to have minimal startup overhead and minimaloverhead for each test. I have written some benchmarks for measuring thisoverhead which you can find at https://github.com/boxed/test-benchmarks (TL;DRif your test suite is &lt; 1s in pytest you will see VAST improvements, if it'sminutes or hours, not so much).A real world example is running the test suite of tri.declarative:- pytest: ~860 ms- hammett: ~160 msOr iommi:- pytest: ~10 s- hammett: ~8 sBut even if your test suite is big and slow you can still get some bigimprovements out of hammett if you often run just one file or one test:In iommi, running `-k test_render_attrs_none`- pytest: ~1.3 s- hammett: ~0.6 sAll of this is from a full and clean run. Hammett has features to avoid that!Tests locked to a module------------------------In hammett you can optionally name your test files `module__tests.py` (that'stwo `_`). This tells hammett that if you change `module` only the tests in`module__tests.py` needs to be run. You can place those files either in thetests directory or right next to the module you're testing.Run just relevant tests------------------------Hammett keeps track of what modules and what tests have changed and runs onlythe tests it needs to. Assuming you lock your tests to a module like above.If hammett gets confused you can delete the `.hammett-db` file and it willstart from scratch.Pytest features that work in hammett------------------------------------- `pytest.mark`- parametrized tests- fixtures- `with pytest.raises`Some plugins work, but you have to specify to load them in setup.cfg:.. code:: ini    [hammett]    plugins=        pytest_djangoUsage------First install: :code:`pip install hammett`Then run hammett: :code:`python -m hammett`Hopefully it will run your entire test suite!Hammett works with some pytest plugins, most notably pytest-django, at leastfor some projects. You need to specify what plugins hammett loads manuallyin setup.cfg though.Keeping pytest compatibility----------------------------If you want to use the hammett specific feature of `module__tests.py`-styletest files, you can still keep compatibility with pytest by specifying themodule of your project and the tests file pattern, like this:.. code::    testpaths=        tests        my_project    python_files=        *__tests.pyAlso keep importing pytest instead of hammett obviously.License-------BSD</longdescription>
</pkgmetadata>