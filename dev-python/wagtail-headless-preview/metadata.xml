<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [Wagtail Headless Preview](https://pypi.org/project/wagtail-headless-preview/)[![Build status](https://img.shields.io/github/actions/workflow/status/torchbox/wagtail-headless-preview/ci.yml?style=for-the-badge)](https://github.com/torchbox/wagtail-headless-preview/actions)[![PyPI](https://img.shields.io/pypi/v/wagtail-headless-preview.svg?style=for-the-badge)](https://pypi.org/project/wagtail-headless-preview/)[![black](https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge)](https://github.com/psf/black)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/torchbox/wagtail-headless-preview/main.svg)](https://results.pre-commit.ci/latest/github/torchbox/wagtail-headless-preview/main)## OverviewWith Wagtail as the backend, and a separate app for the front-end (for example a single page React app), editors are nolonger able to preview their changes. This is because the front-end is no longer within Wagtail's direct control.The preview data therefore needs to be exposed to the front-end app.This package enables previews for Wagtail pages when used in a headless setup by routing the preview to the specifiedfront-end URL.## SetupInstall using pip:```shpip install wagtail-headless-preview```After installing the module, add `wagtail_headless_preview` to installed apps in your settings file:```python# settings.pyINSTALLED_APPS = [    # ...    &quot;wagtail_headless_preview&quot;,]```Run migrations:```sh$ python manage.py migrate```Then configure the preview client URL using the `CLIENT_URLS` option in the `WAGTAIL_HEADLESS_PREVIEW` setting.## Configuration`wagtail_headless_preview` uses a single settings dictionary:```python# settings.pyWAGTAIL_HEADLESS_PREVIEW = {    &quot;CLIENT_URLS&quot;: {},  # defaults to an empty dict. You must at the very least define the default client URL.    &quot;SERVE_BASE_URL&quot;: None,  # can be used for HeadlessServeMixin    &quot;REDIRECT_ON_PREVIEW&quot;: False,  # set to True to redirect to the preview instead of using the Wagtail default mechanism    &quot;ENFORCE_TRAILING_SLASH&quot;: True,  # set to False in order to disable the trailing slash enforcement}```### Single site setupFor single sites, add the front-end URL as the default entry:```pythonWAGTAIL_HEADLESS_PREVIEW = {    &quot;CLIENT_URLS&quot;: {        &quot;default&quot;: &quot;http://localhost:8020&quot;,    }}```If you have configured your Wagtail `Site` entry to use the front-end URL, then you can update your configuration to:```pythonWAGTAIL_HEADLESS_PREVIEW = {    &quot;CLIENT_URLS&quot;: {        &quot;default&quot;: &quot;{SITE_ROOT_URL}&quot;,    }}```The `{SITE_ROOT_URL}` placeholder is replaced with the `root_url` property of the `Site` the preview page belongs to.### Multi-site setupFor a multi-site setup, add each site as a separate entry in the `CLIENT_URLS` option in the `WAGTAIL_HEADLESS_PREVIEW` setting:```pythonWAGTAIL_HEADLESS_PREVIEW = {    &quot;CLIENT_URLS&quot;: {        &quot;default&quot;: &quot;https://wagtail.org&quot;,  # adjust to match your front-end URL. e.g. locally it may be something like http://localhost:8020        &quot;cms.wagtail.org&quot;: &quot;https://wagtail.org&quot;,        &quot;cms.torchbox.com&quot;: &quot;http://torchbox.com&quot;,    },    # ...}```### Serve URLTo make the editing experience seamles and to avoid server errors due to missing templates,you can use the `HeadlessMixin` which combines the `HeadlessServeMixin` and `HeadlessPreviewMixin` mixins.`HeadlessServeMixin` overrides the Wagtail `Page.serve` method to redirect to the client URL. By default,it uses the hosts defined in `CLIENT_URLS`. However, you can provide a single URL to rule them all:```python# settings.pyWAGTAIL_HEADLESS_PREVIEW = {    # ...    &quot;SERVE_BASE_URL&quot;: &quot;https://my.headless.site&quot;,}```### Enforce trailing slashBy default, `wagtail_headless_preview` enforces a trailing slash on the client URL. You can disable this behaviour bysetting `ENFORCE_TRAILING_SLASH` to `False`:```python# settings.pyWAGTAIL_HEADLESS_PREVIEW = {    # ...    &quot;ENFORCE_TRAILING_SLASH&quot;: False}```## UsageTo enable preview as well as wire in the &quot;View live&quot; button in the Wagtail UI, add the `HeadlessMixin`to your `Page` class:```pythonfrom wagtail_headless_preview.models import HeadlessMixinclass MyWonderfulPage(HeadlessMixin, Page):    pass```If you require more granular control, or if you've modified you `Page` model's `serve` method, you canadd `HeadlessPreviewMixin` to your `Page` class to only handle previews:```pythonfrom wagtail_headless_preview.models import HeadlessPreviewMixinclass MyWonderfulPage(HeadlessPreviewMixin, Page):    pass```## How will my front-end app display preview content?This depends on your project, as it will be dictated by the requirements of your front-end app.The following example uses a Wagtail API endpoint to access previews -your app may opt to access page previews using [GraphQL](https://wagtail.io/blog/getting-started-with-wagtail-and-graphql/) instead.### ExampleThis example sets up an API endpoint which will return the preview for a page, and then displays that dataon a simplified demo front-end app.* Add `wagtail.api.v2` to the installed apps:```python# settings.pyINSTALLED_APPS = [    # ...    &quot;wagtail.api.v2&quot;,]```* create an `api.py` file in your project directory:```pythonfrom django.contrib.contenttypes.models import ContentTypefrom wagtail.api.v2.router import WagtailAPIRouterfrom wagtail.api.v2.views import PagesAPIViewSetfrom wagtail_headless_preview.models import PagePreviewfrom rest_framework.response import Response# Create the router. &quot;wagtailapi&quot; is the URL namespaceapi_router = WagtailAPIRouter(&quot;wagtailapi&quot;)class PagePreviewAPIViewSet(PagesAPIViewSet):    known_query_parameters = PagesAPIViewSet.known_query_parameters.union(        [&quot;content_type&quot;, &quot;token&quot;]    )    def listing_view(self, request):        page = self.get_object()        serializer = self.get_serializer(page)        return Response(serializer.data)    def detail_view(self, request, pk):        page = self.get_object()        serializer = self.get_serializer(page)        return Response(serializer.data)    def get_object(self):        app_label, model = self.request.GET[&quot;content_type&quot;].split(&quot;.&quot;)        content_type = ContentType.objects.get(app_label=app_label, model=model)        page_preview = PagePreview.objects.get(            content_type=content_type, token=self.request.GET[&quot;token&quot;]        )        page = page_preview.as_page()        if not page.pk:            # fake primary key to stop API URL routing from complaining            page.pk = 0        return pageapi_router.register_endpoint(&quot;page_preview&quot;, PagePreviewAPIViewSet)```* Register the API URLs so Django can route requests into the API:```python# urls.pyfrom .api import api_routerurlpatterns = [    # ...    path(&quot;api/v2/&quot;, api_router.urls),    # ...    # Ensure that the api_router line appears above the default Wagtail page serving route    path(&quot;&quot;, include(wagtail_urls)),]```For further information about configuring the wagtail API, refer to the [Wagtail API v2 Configuration Guide](https://docs.wagtail.io/en/stable/advanced_topics/api/v2/configuration.html)* Next, add a `client/index.html` file in your project root. This will query the API to display our preview:```html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;script&gt;        function go() {            var querystring = window.location.search.replace(/^\?/, '');            var params = {};            querystring.replace(/([^=&amp;]+)=([^&amp;]*)/g, function(m, key, value) {                params[decodeURIComponent(key)] = decodeURIComponent(value);            });            var apiUrl = 'http://localhost:8000/api/v2/page_preview/1/?content_type=' + encodeURIComponent(params['content_type']) + '&amp;token=' + encodeURIComponent(params['token']) + '&amp;format=json';            fetch(apiUrl).then(function(response) {                response.text().then(function(text) {                    document.body.innerText = text;                });            });        }    &lt;/script&gt;&lt;/head&gt;&lt;body onload=&quot;go()&quot;&gt;&lt;/body&gt;&lt;/html&gt;```* Install [django-cors-headers](https://pypi.org/project/django-cors-headers/): `pip install django-cors-headers`* Add CORS config to your settings file to allow the front-end to access the API```python# settings.pyCORS_ORIGIN_ALLOW_ALL = TrueCORS_URLS_REGEX = r&quot;^/api/v2/&quot;```and follow the rest of the [setup instructions for django-cors-headers](https://github.com/ottoyiu/django-cors-headers#setup).* Start up your site as normal: `python manage.py runserver 0:8000`* Serve the front-end `client/index.html` at `http://localhost:8020/`   - this can be done by running `python3 -m http.server 8020` from inside the client directory* From the wagtail admin interface, edit (or create) and preview a page that uses `HeadlessPreviewMixin`The preview page should now show you the API response for the preview! ðŸŽ‰This is where a real front-end would take over and display the preview as it would be seen on the live site.## ContributingAll contributions are welcome!Note that this project uses [pre-commit](https://github.com/pre-commit/pre-commit). To set up locally:```shell# if you don't have it yet$ pip install pre-commit# go to the project directory$ cd wagtail-headless-preview# initialize pre-commit$ pre-commit install# Optional, run all checks once for this, then the checks will run only on the changed files$ pre-commit run --all-files```### How to run testsNow you can run tests as shown below:```shtox -p```or, you can run them for a specific environment `tox -e py39-django3.2-wagtail4.1` or specific test`tox -e py310-django3.2-wagtail4.1 wagtail_headless_preview.tests.test_frontend.TestFrontendViews.test_redirect_on_preview`## Credits- Matthew Westcott ([@gasman](https://github.com/gasman)), initial proof of concept- Karl Hobley ([@kaedroho](https://github.com/kaedroho)), PoC improvements</longdescription>
</pkgmetadata>