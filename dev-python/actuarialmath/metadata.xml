<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>actuarialmath - Life Contingent Risks with Python=================================================This Python package implements fundamental methods for modeling life contingent risks, and closely follows the coverage of traditional topics in actuarial exams and standard texts such as the &quot;Fundamentals of Actuarial Math - Long-term&quot; exam syllabus by the Society of Actuaries, and &quot;Actuarial Mathematics for Life Contingent Risks&quot; by Dickson, Hardy and Waters.Overview--------The package comprises three sets of classes, which:1. Implement general actuarial methods   - Basic interest theory and probability laws   - Survival functions, expected future lifetimes and fractional ages   - Insurance, annuity, premiums, policy values, and reserves calculations2. Adjust results for   - Extra mortality risks   - 1/mthly payment frequency using UDD or Woolhouse approaches3. Specify and load a particular form of assumptions   - Recursion inputs   - Life table, select life table, or standard ultimate life table   - Mortality laws, such as constant force of maturity, beta and uniform distributions, or Makeham's and Gompertz's laws         Quick Start-----------1. ``pip install actuarialmath``      - also requires `numpy`, `scipy`, `matplotlib` and `pandas`.     2. Start Python (version &gt;= 3.10) or Jupyter-notebook   - Select a suitable subclass to initialize with your actuarial assumptions, such as `MortalityLaws` (or a special law like `ConstantForce`), `LifeTable`, `SULT`, `SelectLife` or `Recursion`.         - Call appropriate methods to compute intermediate or final results, or to `solve` parameter values implicitly.   - Adjust the answers with `ExtraRisk` or `Mthly` (or its `UDD` or `Woolhouse`) classes.Examples--------::  # SOA FAM-L sample question 5.7  from actuarialmath import Recursion, Woolhouse  # initialize Recursion class with actuarial inputs  life = Recursion().set_interest(i=0.04)\                    .set_A(0.188, x=35)\                    .set_A(0.498, x=65)\                    .set_p(0.883, x=35, t=30)  # modfy the standard results with Woolhouse mthly approximation  mthly = Woolhouse(m=2, life=life, three_term=False)  # compute the desired temporary annuity value  print(1000 * mthly.temporary_annuity(35, t=30)) #   solution = 17376.7::  # SOA FAM-L sample question 7.20  from actuarialmath import SULT, Contract  life = SULT()  # compute the required FPT policy value  S = life.FPT_policy_value(35, t=1, b=1000)  # is always 0 in year 1!  # input the given policy contract terms  contract = Contract(benefit=1000,                      initial_premium=.3,                      initial_policy=300,                      renewal_premium=.04,                      renewal_policy=30)  # compute gross premium using the equivalence principle  G = life.gross_premium(A=life.whole_life_insurance(35), **contract.premium_terms)  # compute the required policy value  R = life.gross_policy_value(35, t=1, contract=contract.set_contract(premium=G))  print(R-S)   # solution = -277.19Resources---------1. `Colab &lt;https://colab.research.google.com/drive/1TcNr1x5HbT2fF3iFMYGXdN_cvRKiSua4?usp=sharing&gt;`_ or `Jupyter notebook &lt;https://terence-lim.github.io/notes/faml.ipynb&gt;`_, to solve all sample SOA FAM-L exam questions2. `Online User Guide &lt;https://terence-lim.github.io/actuarialmath-guide/&gt;`_, or `download pdf &lt;https://terence-lim.github.io/notes/actuarialmath-guide.pdf&gt;`_3. `API reference &lt;https://actuarialmath.readthedocs.io/en/latest/&gt;`_4. `Github repo &lt;https://github.com/terence-lim/actuarialmath.git&gt;`_ and `issues &lt;https://github.com/terence-lim/actuarialmath/issues&gt;`_</longdescription>
</pkgmetadata>