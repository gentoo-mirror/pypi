<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;h1 style=&quot;font-size:40px;&quot;&gt;Quickner âš¡ &lt;/h1&gt;  &lt;p&gt;    &lt;strong style=&quot;font-size:20px;&quot;&gt;A simple, fast, and easy to use NER annotator for Python&lt;/strong&gt;  &lt;/p&gt;  &lt;p&gt;    &lt;a href=&quot;https://badge.fury.io/py/quickner&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/quickner.svg&quot; alt=&quot;PyPI version&quot; height=&quot;18&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/quickner/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Mozilla%20Public%20License%20Version%202.0-orange&quot; alt=&quot;License&quot; height=&quot;18&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/quickner/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/dm/quickner&quot; alt=&quot;PyPI - Downloads&quot; height=&quot;18&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://actions-badge.atrox.dev/omarmhaimdat/quickner/goto?ref=master&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fomarmhaimdat%2Fquickner%2Fbadge%3Fref%3Dmaster&amp;style=flat&quot; alt=&quot;Build Status&quot; height=&quot;18&quot;&gt;&lt;/a&gt;  &lt;/p&gt;  &lt;p&gt;    &lt;img src=&quot;quickner.gif&quot; alt=&quot;Showcase&quot;&gt;  &lt;/p&gt;&lt;/div&gt;&lt;!-- [![PyPI version](https://badge.fury.io/py/quickner.svg)](https://badge.fury.io/py/quickner)![License](https://img.shields.io/pypi/l) ![PyPI - Downloads](https://img.shields.io/pypi/dm/quickner)[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fomarmhaimdat%2Fquickner%2Fbadge%3Fref%3Dmaster&amp;style=flat)](https://actions-badge.atrox.dev/omarmhaimdat/quickner/goto?ref=master)![Showcase](showcase.gif) --&gt;Quickner is a new tool to quickly annotate texts for NER (Named Entity Recognition). It is written in Rust and accessible through a Python API.Quickner is blazing fast, simple to use, and easy to configure using a TOML file.## Installation```bash# Create a virtual environmentpython3 -m venv envsource env/bin/activate# Install quicknerpip install quickner # or pip3 install quickner```## Usage### Using the config file```pythonfrom quickner import Quickner, Configconfig = Config(path=&quot;config.toml&quot;) # or Config() if the config file is in the current directory# Initialize the annotatorquick = Quickner(config=config)# Annotate the texts using the config filequick.process() # or annotator.process(True) to save the annotated data to a file```### Using Documents```pythonfrom quickner import Quickner, Document# Create documentsrust = Document(&quot;rust is made by Mozilla&quot;)python = Document(&quot;Python was created by Guido van Rossum&quot;)java = Document(&quot;Java was created by James Gosling&quot;)# Documents can be added to a listdocuments = [rust, python, java]# Initialize the annotatorquick = Quickner(documents=documents)quick&gt;&gt;&gt; Entities: 0 | Documents: 3 | Annotations:&gt;&gt;&gt; quick.documents[Document(id=&quot;87e03d58b1ba4d72&quot;, text=rust is made by Mozilla, label=[]), Document(id=&quot;f1da5d23ef88f3dc&quot;, text=Python was created by Guido van Rossum, label=[]), Document(id=&quot;e4324f9818e7e598&quot;, text=Java was created by James Gosling, label=[])]&gt;&gt;&gt; quick.entities[]```### Using Documents and Entities```pythonfrom quickner import Quickner, Document, Entity# Create documents from textstexts = (  &quot;rust is made by Mozilla&quot;,  &quot;Python was created by Guido van Rossum&quot;,  &quot;Java was created by James Gosling at Sun Microsystems&quot;,  &quot;Swift was created by Chris Lattner and Apple&quot;,)documents = [Document(text) for text in texts]# Create entitiesentities = (  (&quot;Rust&quot;, &quot;PL&quot;),  (&quot;Python&quot;, &quot;PL&quot;),  (&quot;Java&quot;, &quot;PL&quot;),  (&quot;Swift&quot;, &quot;PL&quot;),  (&quot;Mozilla&quot;, &quot;ORG&quot;),  (&quot;Apple&quot;, &quot;ORG&quot;),  (&quot;Sun Microsystems&quot;, &quot;ORG&quot;),  (&quot;Guido van Rossum&quot;, &quot;PERSON&quot;),  (&quot;James Gosling&quot;, &quot;PERSON&quot;),  (&quot;Chris Lattner&quot;, &quot;PERSON&quot;),)entities = [Entity(*(entity)) for entity in entities]# Initialize the annotatorquick = Quickner(documents=documents, entities=entities)quick.process()&gt;&gt;&gt; quickEntities: 6 | Documents: 3 | Annotations: PERSON: 2, PL: 3, ORG: 1&gt;&gt;&gt; quick.documents [Document(id=87e03d58b1ba4d72, text=rust is made by Mozilla, label=[(0, 4, PL), (16, 23, ORG)]), Document(id=f1da5d23ef88f3dc, text=Python was created by Guido van Rossum, label=[(0, 6, PL), (22, 38, PERSON)]), Document(id=e4324f9818e7e598, text=Java was created by James Gosling, label=[(0, 4, PL), (20, 33, PERSON)])]```### Find documents by label or entityWhen you have annotated your documents, you can use the `find_documents_by_label` and `find_documents_by_entity` methods to find documents by label or entity.Both methods return a list of documents, and are not case sensitive.Example:```python# Find documents by label&gt;&gt;&gt; quick.find_documents_by_label(&quot;PERSON&quot;)[Document(id=f1da5d23ef88f3dc, text=Python was created by Guido van Rossum, label=[(0, 6, PL), (22, 38, PERSON)]), Document(id=e4324f9818e7e598, text=Java was created by James Gosling, label=[(0, 4, PL), (20, 33, PERSON)])]# Find documents by entity&gt;&gt;&gt; quick.find_documents_by_entity(&quot;Guido van Rossum&quot;)[Document(id=f1da5d23ef88f3dc, text=Python was created by Guido van Rossum, label=[(0, 6, PL), (22, 38, PERSON)])]&gt;&gt;&gt; quick.find_documents_by_entity(&quot;rust&quot;)[Document(id=87e03d58b1ba4d72, text=rust is made by Mozilla, label=[(0, 4, PL), (16, 23, ORG)])]&gt;&gt;&gt; quick.find_documents_by_entity(&quot;Chris Lattner&quot;)[Document(id=3b0b3b5b0b5b0b5b, text=Swift was created by Chris Lattner and Apple, label=[(0, 5, PL), (21, 35, PERSON), (40, 45, ORG)])]```### Get a Spacy Compatible Generator ObjectYou can use the `spacy` method to get a spacy compatible generator object.The generator object can be used to feed a spacy model with the annotated data, you still need to convert the data into DocBin format.Example:```python# Get a spacy compatible generator object&gt;&gt;&gt; quick.spacy()&lt;builtins.SpacyGenerator object at 0x102311440&gt;# Divide the documents into chunks&gt;&gt;&gt; chunks = quick.spacy(chunks=2)&gt;&gt;&gt; for chunk in chunks:...     print(chunk)...[('rust is made by Mozilla', {'entitiy': [(0, 4, 'PL'), (16, 23, 'ORG')]}), ('Python was created by Guido van Rossum', {'entitiy': [(0, 6, 'PL'), (22, 38, 'PERSON')]})][('Java was created by James Gosling at Sun Microsystems', {'entitiy': [(0, 4, 'PL'), (20, 33, 'PERSON'), (37, 53, 'ORG')]}), ('Swift was created by Chris Lattner and Apple', {'entitiy': [(0, 5, 'PL'), (21, 34, 'PERSON'), (39, 44, 'ORG')]})]```### Single document annotationYou can also annotate a single document with a list of entities.This is useful when you want to annotate a document with a list of entities is not in the list of entities of the Quickner object.Example:```pythonfrom quickner import Document, Entity# Create a document from a string# Method 1rust = Document.from_string(&quot;rust is made by Mozilla&quot;)# Method 2rust = Document(&quot;rust is made by Mozilla&quot;)# Create a list of entitiesentities = [Entity(&quot;Rust&quot;, &quot;PL&quot;), Entity(&quot;Mozilla&quot;, &quot;ORG&quot;)]# Annotate the document with the entities, case_sensitive is set to False by default&gt;&gt;&gt; rust.annotate(entities, case_sensitive=True)&gt;&gt;&gt; rustDocument(id=&quot;87e03d58b1ba4d72&quot;, text=rust is made by Mozilla, label=[(16, 23, ORG)])&gt;&gt;&gt; rust.annotate(entities, case_sensitive=False)&gt;&gt;&gt; rustDocument(id=&quot;87e03d58b1ba4d72&quot;, text=rust is made by Mozilla, label=[(16, 23, ORG), (0, 4, PL)])```### Load from fileInitialize the Quickner object from a file containing existing annotations.`Quickner.from_jsonl` and `Quickner.from_spacy` are class methods that return a Quickner object and are able to parse the annotations and entities from a jsonl or spaCy file.```pythonfrom quickner import Quicknerquick = Quickner.from_jsonl(&quot;annotations.jsonl&quot;) # load the annotations from a jsonl filequick = Quickner.from_spacy(&quot;annotations.json&quot;) # load the annotations from a spaCy file```## ConfigurationThe configuration file is a TOML file with the following structure:```toml# Configuration file for the NER tool[general]# Mode to run the tool, modes are:# Annotation from the start# Annotation from already annotated texts# Load annotations and add new entities[logging]level = &quot;debug&quot; # level of logging (debug, info, warning, error, fatal)[texts][texts.input]filter = false     # if true, only texts in the filter list will be usedpath = &quot;texts.csv&quot; # path to the texts file[texts.filters]accept_special_characters = &quot;.,-&quot; # list of special characters to accept in the text (if special_characters is true)alphanumeric = false              # if true, only strictly alphanumeric texts will be usedcase_sensitive = false            # if true, case sensitive search will be usedmax_length = 1024                 # maximum length of the textmin_length = 0                    # minimum length of the textnumbers = false                   # if true, texts with numbers will not be usedpunctuation = false               # if true, texts with punctuation will not be usedspecial_characters = false        # if true, texts with special characters will not be used[annotations]format = &quot;spacy&quot; # format of the output file (jsonl, spaCy, brat, conll)[annotations.output]path = &quot;annotations.jsonl&quot; # path to the output file[entities][entities.input]filter = true         # if true, only entities in the filter list will be usedpath = &quot;entities.csv&quot; # path to the entities filesave = true           # if true, the entities found will be saved in the output file[entities.filters]accept_special_characters = &quot;.-&quot; # list of special characters to accept in the entity (if special_characters is true)alphanumeric = false             # if true, only strictly alphanumeric entities will be usedcase_sensitive = false           # if true, case sensitive search will be usedmax_length = 20                  # maximum length of the entitymin_length = 0                   # minimum length of the entitynumbers = false                  # if true, entities with numbers will not be usedpunctuation = false              # if true, entities with punctuation will not be usedspecial_characters = true        # if true, entities with special characters will not be used[entities.excludes]# path = &quot;excludes.csv&quot; # path to entities to exclude from the search```## Features Roadmap and TODO- [x] Add support for spaCy format- [x] Add support for brat format- [x] Add support for conll format- [x] Add support for jsonl format- [x] Add support for loading annotations from a json spaCy file- [x] Add support for loading annotations from a jsonl file- [x] Find documents with a specific entity/entities and return the documents- [ ] Add support for loading annotations from a brat file- [ ] Substring search for entities in the text (case sensitive and insensitive)- [ ] Partial match for entities, e.g. &quot;Rust&quot; will match &quot;Rustlang&quot;- [ ] Pattern/regex based entites, e.g. &quot;Rustlang&quot; will match &quot;Rustlang 1.0&quot;- [ ] Fuzzy match for entities with levenstein distance, e.g. &quot;Rustlang&quot; will match &quot;Rust&quot;- [ ] Add support for jupyter notebook## License[MOZILLA PUBLIC LICENSE Version 2.0](LICENSE)## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## Authors- [**Omar MHAIMDAT**]</longdescription>
</pkgmetadata>