<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Documentation Status](https://readthedocs.org/projects/crypt4gh/badge/?version=latest)](https://crypt4gh.readthedocs.io/en/latest/?badge=latest)[![Testsuite](https://github.com/EGA-archive/crypt4gh/workflows/Testsuite/badge.svg)](https://github.com/EGA-archive/crypt4gh/actions)# Crypt4GH Encryption Utility`crypt4gh`is a Python tool to encrypt, decrypt or re-encrypt files, according to the [GA4GH encryption file format](https://www.ga4gh.org/news/crypt4gh-a-secure-method-for-sharing-human-genetic-data/).## InstallationPython `3.6+` required to use the crypt4gh encryption utility.Install it from PyPI:```pip install crypt4gh```or if you prefer the latest sources from Github:```git clone https://github.com/EGA-archive/crypt4ghpip install -r crypt4gh/requirements.txtpip install ./crypt4gh```or```pip install git+https://github.com/EGA-archive/crypt4gh.git```## UsageThe usual `-h` flag shows you the different options that the tool accepts.```bash$ crypt4gh -hUtility for the cryptographic GA4GH standard, reading from stdin and outputting to stdout.Usage:   {PROG} [-hv] [--log &lt;file&gt;] encrypt [--sk &lt;path&gt;] --recipient_pk &lt;path&gt; [--recipient_pk &lt;path&gt;]... [--range &lt;start-end&gt;]   {PROG} [-hv] [--log &lt;file&gt;] decrypt [--sk &lt;path&gt;] [--sender_pk &lt;path&gt;] [--range &lt;start-end&gt;]   {PROG} [-hv] [--log &lt;file&gt;] rearrange [--sk &lt;path&gt;] --range &lt;start-end&gt;   {PROG} [-hv] [--log &lt;file&gt;] reencrypt [--sk &lt;path&gt;] --recipient_pk &lt;path&gt; [--recipient_pk &lt;path&gt;]... [--trim]Options:   -h, --help             Prints this help and exit   -v, --version          Prints the version and exits   --log &lt;file&gt;           Path to the logger file (in YML format)   --sk &lt;keyfile&gt;         Curve25519-based Private key.                          When encrypting, if neither the private key nor C4GH_SECRET_KEY are specified, we generate a new key    --recipient_pk &lt;path&gt;  Recipient's Curve25519-based Public key   --sender_pk &lt;path&gt;     Peer's Curve25519-based Public key to verify provenance (akin to signature)   --range &lt;start-end&gt;    Byte-range either as  &lt;start-end&gt; or just &lt;start&gt; (Start included, End excluded)   -t, --trim             Keep only header packets that you can decryptEnvironment variables:   C4GH_LOG         If defined, it will be used as the default logger   C4GH_SECRET_KEY  If defined, it will be used as the default secret key (ie --sk ${C4GH_SECRET_KEY}) ```## DemonstrationAlice and Bob generate both a pair of public/private keys.```bash$ crypt4gh-keygen --sk alice.sec --pk alice.pub$ crypt4gh-keygen --sk bob.sec --pk bob.pub```Bob encrypts a file for Alice:```bash$ crypt4gh encrypt --sk bob.sec --recipient_pk alice.pub &lt; file &gt; file.c4gh```Alice decrypts the encrypted file:```bash$ crypt4gh decrypt --sk alice.sec &lt; file.c4gh```[![asciicast](https://asciinema.org/a/mmCBfBdCFfcYCRBuTSe3kjCFs.svg)](https://asciinema.org/a/mmCBfBdCFfcYCRBuTSe3kjCFs)## File FormatRefer to the [specifications](http://samtools.github.io/hts-specs/crypt4gh.pdf) or this [documentation](https://crypt4gh.readthedocs.io/en/latest/encryption.html).</longdescription>
</pkgmetadata>