<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-pamPython pam module supporting py3 (and py2) for Linux type systems (!windows)Commandline example:```bash[david@Scott python-pam]$ python pam/pam.pyUsername: davidPassword:Auth result: Success (0)Pam Environment List item: XDG_SEAT=seat0Pam Environment item: XDG_SEAT=seat0Missing Pam Environment item: asdf=NoneOpen session: Success (0)Close session: Success (0)```Inline examples:```python[david@Scott python-pam]$ pythonPython 3.9.7 (default, Oct 10 2021, 15:13:22)[GCC 11.1.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import pam&gt;&gt;&gt; p = pam.authenticate()&gt;&gt;&gt; p.authenticate('david', 'correctpassword')True&gt;&gt;&gt; p.authenticate('david', 'badpassword')False&gt;&gt;&gt; p.authenticate('david', 'correctpassword', service='login')True&gt;&gt;&gt; p.authenticate('david', 'correctpassword', service='unknownservice')False&gt;&gt;&gt; p.authenticate('david', 'correctpassword', service='login', resetcreds=True)True&gt;&gt;&gt; p.authenticate('david', 'correctpassword', encoding='latin-1')True&gt;&gt;&gt; print('{} {}'.format(p.code, p.reason))0 Success&gt;&gt;&gt; p.authenticate('david', 'badpassword')False&gt;&gt;&gt; print('{} {}'.format(p.code, p.reason))7 Authentication failure&gt;&gt;&gt;```## Authentication and privilegesPlease note, python-pam and *all* tools that do authentication follow two rules:* You have root (or privileged access): you can check any account's password for validity* You don't have root: you can only check the validity of the username running the toolIf you need to authenticate multiple users, you must use an authentication stack that at some stage has privileged access. On Linux systems one example of doing this is using SSSD.Typical Linux installations check against `/etc/shadow` with `pam_unix.so` which will spawn `/usr/bin/unix_chkpwd` to verify the password. Both of these are intentionally written to meet the above two rules. You can test the functionality of `unix_chkpwd` in the following manner:Replace `good` with the correct password, replace `david` with your appropriate username.```~$ mkfifo /tmp/myfifo~$ (echo -ne 'good\0' &gt; /tmp/myfifo &amp; /usr/bin/unix_chkpwd david nullok &lt; /tmp/myfifo ) ; echo $?0~$ (echo -ne 'bad\0' &gt; /tmp/myfifo &amp; /usr/bin/unix_chkpwd david nullok &lt; /tmp/myfifo ) ; echo $?7~$ (echo -ne 'good\0' &gt; /tmp/myfifo &amp; /usr/bin/unix_chkpwd someotheruser nullok &lt; /tmp/myfifo ) ; echo $?9```</longdescription>
</pkgmetadata>