<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># resettabletimer[![CI](https://github.com/kangasta/resettabletimer/actions/workflows/ci.yml/badge.svg)](https://github.com/kangasta/resettabletimer/actions/workflows/ci.yml)[![Release](https://github.com/kangasta/resettabletimer/actions/workflows/release.yml/badge.svg)](https://github.com/kangasta/resettabletimer/actions/workflows/release.yml)Wrapper for `threading.Timer` to provide a resettable Timer implementation. Also provides fake timer for testing.## Usage### ResettableTimer```pythonfrom resettabletimer import ResettableTimerdelay = 5 # secondsfunction = print# Create resettable timert = ResettableTimer(delay, function, [&quot;Hello&quot;], {&quot;end&quot;:&quot; timer!\n&quot;})# Starting and canceling work similarly than with threading.Timert.start()# Wait 1-5 seconds# Reset the timert.reset()# Hello should be printed after five seconds```### FakeTimer```pythonfrom resettabletimer import FakeTimert = FakeTimer(2, print, [&quot;Hello&quot;], {&quot;end&quot;:&quot; timer!\n&quot;})# Starting and canceling work similarly than with threading.Timert.start()# Wait &gt;2 seconds# Nothing happens# Time passage is controlled with pass_timet.pass_time(2)# Hello should be printed```## TestingCheck and automatically fix formatting with:```bashpycodestyle resettabletimerautopep8 -aaar --in-place resettabletimer```Run static analysis with:```bashpylint -E --enable=invalid-name,unused-import,useless-object-inheritance resettabletimer```Run unit tests:```bash# Run unit testspython3 -m unittest discover -s tst/# Run unit tests with coverage analysiscoverage run \    --branch \    --source resettabletimer/ \    -m unittest discover -s tst/coverage report -m```</longdescription>
</pkgmetadata>