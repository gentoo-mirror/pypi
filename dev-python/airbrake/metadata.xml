<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://airbrake-github-assets.s3.amazonaws.com/brand/airbrake-full-logo.png&quot; width=&quot;200&quot;&gt;&lt;/p&gt;airbrake-python===============*Note*. Python 3.4+ are advised to use new [Airbrake Python notifier](https://github.com/airbrake/pybrake) which supports async API and code hunks. Python 2.7 users should continue to use this notifier.[Airbrake](https://airbrake.io/) integration for python that quickly and easily plugs into your existing code.```pythonimport airbrakelogger = airbrake.getLogger()try:    1/0except Exception:    logger.exception(&quot;Bad math.&quot;)```airbrake-python is used most effectively through its [logging](http://docs.python.org/2/library/logging.html) handler, and uses the [Airbrake V3 API](https://airbrake.io/docs/api/) for error reporting.### installTo install airbrake-python, run:```bash$ pip install -U airbrake```### setupThe easiest way to get set up is with a few environment variables:```bashexport AIRBRAKE_API_KEY=*****export AIRBRAKE_PROJECT_ID=12345export AIRBRAKE_ENVIRONMENT=dev```and you're done!Otherwise, you can instantiate your `AirbrakeHandler` by passing these values as arguments to the `getLogger()` helper:```pythonimport airbrakelogger = airbrake.getLogger(api_key=*****, project_id=12345)try:    1/0except Exception:    logger.exception(&quot;Bad math.&quot;)```By default, airbrake will catch and send uncaught exceptions. To avoid this behvaiour, use the send_uncaught_exc option:`logger = airbrake.getLogger(api_key=*****, project_id=12345, send_uncaught_exc=False)`### setup for Airbrake On-Premise and other compatible back-ends (e.g. Errbit)Airbrake [Enterprise](https://airbrake.io/enterprise) and self-hosted alternatives, such as [Errbit](https://github.com/errbit/errbit), provide a compatible API.You can configure a different endpoint than the default (`https://api.airbrake.io`) by either: * Setting an environment variable:```bashexport AIRBRAKE_HOST=https://self-hosted.errbit.example.com/``` * Or passing a `host` argument to the `getLogger()` helper:```pythonimport airbrakelogger = airbrake.getLogger(api_key=*****, project_id=12345, host=&quot;https://self-hosted.errbit.example.com/&quot;)```#### adding the AirbrakeHandler to your existing logger```pythonimport loggingimport airbrakeyourlogger = logging.getLogger(__name__)yourlogger.addHandler(airbrake.AirbrakeHandler())```_by default, the `AirbrakeHandler` only handles logs level ERROR (40) and above_#### Additional OptionsMore options are available to configure this library.For example, you can set the environment to add more context to your errors.One way is by setting the AIRBRAKE_ENVIRONMENT env var.```export AIRBRAKE_ENVIRONMENT=staging```Or you can set it more explicitly when you instantiate the logger.```pythonimport airbrakelogger = airbrake.getLogger(api_key=*****, project_id=12345, environment='production')```The available options are:- environment, defaults to env var `AIRBRAKE_ENVIRONMENT`- host, defaults to env var `AIRBRAKE_HOST` or https://api.airbrake.io- root_directory, defaults to None- timeout, defaults to 5. (Number of seconds before each request times out)- send_uncaught_exc, defaults to True (Whether or not to send uncaught exceptions)#### giving your exceptions more context```pythonimport airbrakelogger = airbrake.getLogger()def bake(**goods):    try:        temp = goods['temperature']    except KeyError as exc:        logger.error(&quot;No temperature defined!&quot;, extra=goods)```#### Setting severity[Severity][what-is-severity] allows categorizing how severe an error is. Bydefault, it's set to `error`. To redefine severity, simply `build_notice` withthe needed severity value. For example:```pythonnotice = airbrake.build_notice(exception, severity=&quot;critical&quot;)airbrake.notify(notice)```### Using this library without a loggerYou can create an instance of the notifier directly, and senderrors inside exception blocks.```pythonfrom airbrake.notifier import Airbrakeab = Airbrake(project_id=1234, api_key='fake')try:    amazing_code()except ValueError as e:    ab.notify(e)except:    # capture all other errors    ab.capture()```#### Running Tests ManuallyCreate your environment and install the test requirements```virtualenv venvsource venv/bin/activatepip install .python setup.py test```To run via nose (unit/integration tests):```source venv/bin/activatepip install -r ./test-requirements.txtsource venv/bin/activatenosetests```Run all tests, including multi-env syntax, and coverage tests.```pip install toxtox -v --recreate```It's suggested to make sure tox will pass, as CI runs this.tox needs to pass before any PRs are merged.-----------------The [airbrake.io](https://airbrake.io/) api docs used to implement airbrake-python are here:https://airbrake.io/docs/api/[[what-is-severity]: https://airbrake.io/docs/airbrake-faq/what-is-severity/]</longdescription>
</pkgmetadata>