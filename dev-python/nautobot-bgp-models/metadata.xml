<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Nautobot BGP Models PluginA plugin for [Nautobot](https://github.com/nautobot/nautobot) extending the core models with BGP-specific models.New models enable modeling and management of BGP peerings, whether or not the peer device is present in Nautobot.&gt; The initial development of this plugin was sponsored by Riot Games, Inc.## Data ModelsNavigate to [Data Models](docs/cisco_use_case.md) for detailed descriptions on additional data models provided in the plugin.## Use CasesTo make the start with the plugin easier, we provide two example use cases for common OS platforms: Cisco and Juniper.### Cisco Configuration Modeling and RenderingNavigate to [Cisco Example Use Case](docs/cisco_use_case.md) for detailed instructions how to consume BGP Models plugin on Cisco devices.### Juniper Configuration Modeling and RenderingNavigate to [Juniper Example Use Case](docs/juniper_use_case.md) for detailed instructions how to consume BGP Models plugin on Juniper devices.## InstallationThe plugin is available as a Python package in PyPI and can be installed with `pip`:```shellpip install nautobot-bgp-models```&gt; The plugin is compatible with Nautobot 1.3 and higherTo ensure Nautobot BGP Models Plugin is automatically re-installed during future upgrades, create a file named `local_requirements.txt` (if not already existing) in the Nautobot root directory (alongside `requirements.txt`) and list the `nautobot-bgp-models` package:```no-highlight# echo nautobot-bgp-models &gt;&gt; local_requirements.txt```Once installed, the plugin needs to be enabled in your `nautobot_config.py````python# In your configuration.pyPLUGINS = [&quot;nautobot_bgp_models&quot;]``````pythonPLUGINS_CONFIG = {    &quot;nautobot_bgp_models&quot;: {        &quot;default_statuses&quot;: {            &quot;AutonomousSystem&quot;: [&quot;active&quot;, &quot;available&quot;, &quot;planned&quot;],            &quot;Peering&quot;: [&quot;active&quot;, &quot;decommissioned&quot;, &quot;deprovisioning&quot;, &quot;offline&quot;, &quot;planned&quot;, &quot;provisioning&quot;],        }    }}```In the `default_statuses` section, you can define a list of default statuses to make available to `AutonomousSystem` and/or `Peering`. The lists must be composed of valid slugs of existing Status objects.## Screenshots![Menu](https://github.com/nautobot/nautobot-plugin-bgp-models/blob/main/docs/images/main-page-menu.png)![Autonomous System](https://github.com/nautobot/nautobot-plugin-bgp-models/blob/main/docs/images/autonomous_system_01.png)![Peering List](https://github.com/nautobot/nautobot-plugin-bgp-models/blob/main/docs/images/peering_list.png)![Peering](https://github.com/nautobot/nautobot-plugin-bgp-models/blob/main/docs/images/peering_01.png)![Peer Endpoint](https://github.com/nautobot/nautobot-plugin-bgp-models/blob/main/docs/images/peer_endpoint_01.png)![Peer Group](https://github.com/nautobot/nautobot-plugin-bgp-models/blob/main/docs/images/peer_group_01.png)## ContributingPull requests are welcomed and automatically built and tested against multiple version of Python and multiple version of Nautobot through TravisCI.The project is packaged with a light development environment based on `docker-compose` to help with the local development of the project and to run the tests within TravisCI.The project is following Network to Code software development guideline and is leveraging:- Black, Pylint, Bandit and pydocstyle for Python linting and formatting.- Django unit test to ensure the plugin is working properly.## QuestionsFor any questions or comments, please check the [FAQ](FAQ.md) first and feel free to swing by the [Network to Code slack channel](https://networktocode.slack.com/) (channel #networktocode).Sign up [here](http://slack.networktocode.com/)</longdescription>
</pkgmetadata>