<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Garpix Notify## QuickstartInstall with pip:```bashpip install garpix_notify```Add the `garpix_notify` and dependencies to your `INSTALLED_APPS`:```python# settings.pyINSTALLED_APPS = [    # ...    'fcm_django',    'garpix_notify',]FCM_DJANGO_SETTINGS = {        &quot;APP_VERBOSE_NAME&quot;: &quot;Firebase Cloud Messaging&quot;,        &quot;FCM_SERVER_KEY&quot;: &quot;[your api key]&quot;,        &quot;ONE_DEVICE_PER_USER&quot;: False,        &quot;DELETE_INACTIVE_DEVICES&quot;: False,}```Package not included migrations, set path to migration directory. Don't forget create this directory (`app/migrations/garpix_notify/`) and place empty `__init__.py`:```app/migrations/app/migrations/__init__.py  # empty fileapp/migrations/garpix_notify/__init__.py  # empty file```Add path to settings:```python# settings.pyMIGRATION_MODULES = {    'garpix_notify': 'app.migrations.garpix_notify',}```Add mixins to settings if you need to add extra functionality to Notify models:```python# settings.py   GARPIX_NOTIFY_MIXIN = 'app.models.notify_mixin.NotifyMixin'  GARPIX_SYSTEM_NOTIFY_MIXIN = 'app.models.notify_mixin.SystemNotifyMixin'  ```Create your custom user model and add `AUTH_USER_MODEL` to `app/settings.py`:```AUTH_USER_MODEL = 'user.User'```Run make migrations:```bashpython manage.py makemigrations```Migrate:```bashpython manage.py migrate```### Example#### Step 1. Set notify types in `app/settings.py`, for example:```pythonREGISTRATION_EVENT = 1FEEDBACK_EVENT = 2EXAMPLE_EVENT_1 = 3EXAMPLE_EVENT_2 = 4NOTIFY_EVENTS = {    REGISTRATION_EVENT: {        'title': 'Register',    },    FEEDBACK_EVENT: {        'title': 'Feeback',    },    EXAMPLE_EVENT_1: {        'title': 'Example 1',    },    EXAMPLE_EVENT_2: {        'title': 'Example 2',    },}CHOICES_NOTIFY_EVENT = [(k, v['title']) for k, v in NOTIFY_EVENTS.items()]```#### Step 2. Import default settings in your ``app/settings.py`````python    from garpix_notify.settings import *```or copy from here if you want more customization```python# notify configPERIODIC_SENDING = 60EMAIL_MAX_DAY_LIMIT = 240EMAIL_MAX_HOUR_LIMIT = 240# SMSSMS_URL_TYPE = 0SMS_API_ID = 1234567890SMS_LOGIN = ''SMS_PASSWORD = ''SMS_FROM = ''# CALLCALL_URL_TYPE = 0CALL_API_ID = 1234567890CALL_LOGIN = ''CALL_PASSWORD = ''# TELEGRAMTELEGRAM_API_KEY = '000000000:AAAAAAAAAA-AAAAAAAA-_AAAAAAAAAAAAAA'TELEGRAM_BOT_NAME = 'MySuperBot'TELEGRAM_WELCOME_TEXT = 'Hello'TELEGRAM_HELP_TEXT = '/set !help for HELP'TELEGRAM_BAD_COMMAND_TEXT = 'Incorrect command format'TELEGRAM_SUCCESS_ADDED_TEXT = 'Success'TELEGRAM_FAILED_ADDED_TEXT = 'Failed'TELEGRAM_PARSE_MODE = NoneTELEGRAM_DISABLE_NOTIFICATION = FalseTELEGRAM_DISABLE_PAGE_PREVIEW = FalseTELEGRAM_SENDING_WITHOUT_REPLY = FalseTELEGRAM_TIMEOUT = None# VIBERVIBER_API_KEY = '000000000:AAAAAAAAAA-AAAAAAAA-_AAAAAAAAAAAAAA'VIBER_BOT_NAME = 'MySuperViberBot'VIBER_WELCOME_TEXT = 'Hello'VIBER_SUCCESS_ADDED_TEXT = 'Success'VIBER_FAILED_ADDED_TEXT = 'Failed'VIBER_TEXT_FOR_NEW_SUB = 'HI!'# WHATSAPPIS_WHATS_APP_ENABLED = TrueWHATS_APP_AUTH_TOKEN = NoneWHATS_APP_ACCOUNT_SID = NoneWHATS_APP_NUMBER_SENDER = None# SETTINGSEMAIL_MALLING = 1GARPIX_NOTIFY_MIXIN = 'garpix_notify.mixins.notify_mixin.NotifyMixin'NOTIFY_USER_WANT_MESSAGE_CHECK = NoneNOTIFY_CALL_CODE_CHECK = NoneGARPIX_NOTIFY_CELERY_SETTINGS = 'app.celery.app'DEFAULT_SYSTEM_NOTIFY_TYPE = 'system'```#### Step 3. Go to the admin panel and go to the &quot;Notifications&quot; section - &quot;SMTP accounts&quot;Add an SMTP account to send Email notifications. These will be the senders of Email notifications.#### Step 4. Also go to &quot;Notifications&quot; - &quot;Categories&quot;Create a category that will be used to send emails. Usually one category is enough. The ability to enter several categoriesis necessary to divide them into informational and marketing notifications.#### Step 4. Go to &quot;Notifications&quot; - &quot;Templates&quot;Create a template for a specific event (when you added them to `settings.py`).#### Step 5. Call Notify.send()In the code where it is necessary to work out sending a notification, we perform the following actions:```pythonfrom django.conf import settingsfrom garpix_notify.models import Notify# Syntax# Notify.send(&lt;event&gt;, &lt;context&gt;[, &lt;user=None&gt;, &lt;email=None&gt;, &lt;phone=None&gt;, &lt;files=None&gt;, &lt;data_json=None&gt;])# That is, we specify the event ID as the first parameter,# create variables for the template,# third - the user to send it to (it is not necessary to specify his email, phone number, etc.,# because this will be determined automatically depending on the type of template)   # Exampleuser = request.user  # this will be the recipient of the notification.Notify.send(settings.REGISTRATION_EVENT, {    'confirmation_code': 'abcdef12345',}, user=user)# If we do not have a user in the system, but we need to send an email, we can do the followingNotify.send(settings.EXAMPLE_EVENT_1, {    'confirmation_code': 'abcdef12345',}, email='example@mail.ru')# If you need more detailed time settings, add send_atNotify.send(settings.EXAMPLE_EVENT_1, {    'confirmation_code': 'abcdef12345',}, email='example@mail.ru', send_at=(datetime.datetime.now() + datetime.timedelta(days=1)))# If you need to send a code by phone callNotify.send(settings.EXAMPLE_EVENT_2, phone='79998881122', context={})# or if you need to get the code directlyNotify.call(phone=79998881122)```#### Mass email and sms mailing:To perform a mass mailing, you need to add user lists to the template.Or directly in the notification.#### New system Notifications:Now system notifications are placed in an independent model. It is not necessary to create templates for them. Mass mailing is also available.```pythonfrom django.conf import settingsfrom garpix_notify.models import SystemNotifyfrom django.contrib.auth import get_user_model# 1. Example of use without templatesUser = get_user_model()user = User.objects.filter().first()SystemNotify.send({'test': 'data'}, user)# 2. Example of using a templateSystemNotify.send({'test': 'data'}, event=settings.EXAMPLE_EVENT_2)```#### Do not forget run celery:```celery -A app worker --loglevel=info -B```# Telegram NotifyRegister you bot [https://t.me/BotFather](https://t.me/BotFather)Go to [http://localhost:8000/admin/garpix_notify/notifyconfig/](https://t.me/BotFather) and fill &quot;Telegram&quot; section (`API key` and `Bot name`).Run daemon:```bashpython3 backend/manage.py garpix_notify_telegram```Go to your bot and send `/start` command.Also, see `user/admin.py` file (see instructions):```pythonfrom django.contrib import adminfrom .models import Userfrom django.contrib.auth.admin import UserAdmin@admin.register(User)class UserAdmin(UserAdmin):    fieldsets = (        ('Telegram', {            'fields': ('telegram_chat_id', 'telegram_secret', 'get_telegram_connect_user_help'),        })    ) + UserAdmin.fieldsets    readonly_fields = ['telegram_secret', 'get_telegram_connect_user_help'] + list(UserAdmin.readonly_fields)```# System ws NotifyAdd the `channels` to your `INSTALLED_APPS`:```python# settings.pyINSTALLED_APPS = [    # ...    'channels',]```Add the `REDIS_HOST` and `REDIS_PORT` variables and `asgi` and `channels` configurations:```python# settings.pyREDIS_HOST = os.getenv('REDIS_HOST', 'localhost')REDIS_PORT = os.getenv('REDIS_PORT', 6379)...ASGI_APPLICATION = 'app.asgi.application'CHANNEL_LAYERS = {    'default': {        'BACKEND': 'channels_redis.core.RedisChannelLayer',        'CONFIG': {            &quot;hosts&quot;: [(REDIS_HOST, REDIS_PORT)],        },    },}```Edit your `asgi.py` file```pythonimport osfrom channels.auth import AuthMiddlewareStackfrom channels.routing import ProtocolTypeRouter, URLRouterfrom django.core.asgi import get_asgi_applicationfrom garpix_notify import routingos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')application = ProtocolTypeRouter({  &quot;http&quot;: get_asgi_application(),  &quot;websocket&quot;: AuthMiddlewareStack(        URLRouter(            routing.websocket_urlpatterns        )    ),})```Socket notification example```pythongroup_name = f'workflow-{user.pk}'Notify.send(settings.MY_NOTIFY, {        'message': 'my message',    }, room_name=group_name, user=user)```For notifications of the SYSTEM type, a separate non-periodic task is used that works instantly, if room_name is missing system messages will be sent in `'room_{id}'` where `'id'` is user idYou can add notifies rotes to your project:```pythonurlpatterns = [    # ...    path('', include(('garpix_notify.urls', 'garpix_notify'), namespace='garpix_notify')),]```# ChangelogSee [CHANGELOG.md](CHANGELOG.md).# ContributingSee [CONTRIBUTING.md](CONTRIBUTING.md).# License[MIT](LICENSE)</longdescription>
</pkgmetadata>