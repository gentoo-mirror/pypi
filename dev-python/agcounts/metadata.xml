<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># agcounts![Tests](https://github.com/actigraph/agcounts/actions/workflows/tests.yml/badge.svg)A python package for extracting actigraphy counts from accelerometer data. ## Install```bashpip install agcounts```## TestDownload test data:```bashcurl -L https://github.com/actigraph/agcounts/files/8247896/GT3XPLUS-AccelerationCalibrated-1x8x0.NEO1G75911139.2000-01-06-13-00-00-000-P0000.sensor.csv.gz --output data.csv.gz```Run a simple test```pythonimport pandas as pdimport numpy as npfrom agcounts.extract import get_countsdef get_counts_csv(    file,    freq: int,    epoch: int,    fast: bool = True,    verbose: bool = False,    time_column: str = None,):    if verbose:        print(&quot;Reading in CSV&quot;, flush=True)    raw = pd.read_csv(file, skiprows=0)    if time_column is not None:        ts = raw[time_column]        ts = pd.to_datetime(ts)        time_freq = str(epoch) + &quot;S&quot;        ts = ts.dt.round(time_freq)        ts = ts.unique()        ts = pd.DataFrame(ts, columns=[time_column])    raw = raw[[&quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;]]    if verbose:        print(&quot;Converting to array&quot;, flush=True)    raw = np.array(raw)    if verbose:        print(&quot;Getting Counts&quot;, flush=True)    counts = get_counts(raw, freq=freq, epoch=epoch, fast=fast, verbose=verbose)    del raw    counts = pd.DataFrame(counts, columns=[&quot;Axis1&quot;, &quot;Axis2&quot;, &quot;Axis3&quot;])    counts[&quot;AC&quot;] = (        counts[&quot;Axis1&quot;] ** 2 + counts[&quot;Axis2&quot;] ** 2 + counts[&quot;Axis3&quot;] ** 2    ) ** 0.5    ts = ts[0 : counts.shape[0]]    if time_column is not None:        counts = pd.concat([ts, counts], axis=1)    return countsdef convert_counts_csv(    file,    outfile,    freq: int,    epoch: int,    fast: bool = True,    verbose: bool = False,    time_column: str = None,):    counts = get_counts_csv(        file, freq=80, epoch=60, verbose=True, time_column=time_column    )    counts.to_csv(outfile, index=False)    return countscounts = get_counts_csv(&quot;data.csv.gz&quot;, freq=80, epoch=60)counts = convert_counts_csv(    &quot;data.csv.gz&quot;,    outfile=&quot;counts.csv.gz&quot;,    freq=80,    epoch=60,    verbose=True,    time_column=&quot;HEADER_TIMESTAMP&quot;,)```</longdescription>
</pkgmetadata>