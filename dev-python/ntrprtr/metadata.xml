<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DescriptionInterpret bytes through different customizable actions# Installation`pip install ntrprtr`# ConfigurationIn order to interpet the given bytes, you need to provide a `.json` filewith the following structure:```json{    &quot;name&quot;: &quot;ntrprtr example&quot;,    &quot;description&quot;: &quot;This is a description within the result&quot;,    // Specify as many ntrprtr objects as you want    &quot;ntrprtr&quot;: [        {            &quot;name&quot;: &quot;Enter the name here..&quot;,            &quot;description&quot;: &quot;Provide description here..&quot;,            &quot;start&quot;: 0,  // The start byte from where you want to interpret            &quot;end&quot;: 10,   // The end byte where interpreting shall stop            &quot;action&quot;: [                           // --&gt; Specify as many actions as you want                        // --&gt; Each action will be applied to the specified bytes                        // --&gt; You do not need to provide an action                        // --&gt; Output is a list of tuples (more information in example section)                        // --&gt; The actions are specified below            ]        }    ]}    ```The following actions are available:```json// Get the decimal value of the given bytes.// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;decimal&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}// Apply endianess to given bytes// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;endianess&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}// Get the binary value of the given bytes.// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;binary&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}// Get the ascii representation of the given bytes.// If a non ascii value is there, specify a placeholder{    &quot;type&quot;: &quot;ascii&quot;,    &quot;nonAsciiPlaceholder&quot;: &quot;.&quot; // Default: .}// Get the unicode representation of the given bytes.{    &quot;type&quot;: &quot;unicode&quot;}// Provides a hexdump for the given bytes// If a non ascii value is there, specify a placeholder{    &quot;type&quot;: &quot;hexdump&quot;,    &quot;nonAsciiPlaceholder&quot;: &quot;.&quot; // Default: .}// Compare the given bytes against your own values:// Specify if you want to interpret it as little or big endian// Specify a result if there is no match{    &quot;type&quot;: &quot;equals&quot;,    &quot;endianess&quot;: &quot;little|big&quot;, // Default: big    // Add as many objects as you want to the &quot;cmp&quot; list    &quot;cmp&quot;: [{                // The value you want to compare with the given bytes                &quot;value&quot;: &quot;1D1E&quot;,                 // A description which will be added to the result,                 // if the given bytes matches &quot;value&quot;                         &quot;description&quot;: &quot;Compare 1&quot;                  },{                &quot;value&quot;: &quot;1D1&quot;,                &quot;description&quot;: &quot;Compare 2&quot;            }],    // The result if there was no match     &quot;noMatch&quot;: &quot;No Match found!&quot; // Default: No match found!}// Compare the bits of the given bytes against your own values// Important: Provide leading zeros// Specify if you want to interpret it as little or big endian// Specify a result if there is no match{    &quot;type&quot;: &quot;bitequals&quot;,    &quot;endianess&quot;: &quot;little|big&quot;, // Default: big    // Add as many objects as you want to the &quot;cmp&quot; list    &quot;cmp&quot;: [{                // The bits you want to compare                &quot;value&quot;: &quot;01110111&quot;,                // Description to be added to the result,                // if bits machtes &quot;value&quot;                &quot;description&quot;: &quot;Bits are equal&quot;            }],    // The result if there was no match     &quot;noMatch&quot;: &quot;Bits are not equal!&quot; // Default: No match found!}// Interprets 2 Bytes as DOS time - format hour:minute:seconds// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;dostime&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}// Interprets 4 Bytes as unix time - Convert it to UTC datetime// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;unixtime&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}// Interprets 2 Bytes as DOS date - format day.month.year// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;dosdate&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}// Interprets 8 Bytes as Win32 Epoch Time (01.01.1601)// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;win32time&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}// Interprets 2 Bytes as ext file mode// Specify if you want to interpret it as little or big endian{    &quot;type&quot;: &quot;extfilemode&quot;,    &quot;endianess&quot;: &quot;little|big&quot; // Default: little}```# Options`python -m ntrprtr --mode {config,interpret,testfile} [--amount AMOUNT] [--name NAME] [--target TARGET] [--config CONFIG] [--result RESULT] [--offset OFFSET] [--bytes BYTES]`&lt;hr&gt;**General**| Option | Short | Type | Default | Description ||---|---|---|---|---||--mode | -m | String | - | config = Create a configuration template &lt;br&gt; interpret = Overview of disk space usage &lt;br&gt; testfile = Create a binary testfile |&lt;hr&gt;**mode = config**| Option | Short | Type | Default | Description ||---|---|---|---|---||--amount | -a | Int | 1 | Create a config with the given number of objects ||--name | -n | String | config.json | Name of the config file to be created |&lt;hr&gt;**mode = interpret**| Option | Short | Type | Default | Description ||---|---|---|---|---||--target | -t | String | - | Path to file which shall be interpreted ||--config | -c | String | - | Path to config file ||--result | -r | String | - | Path to result file ||--offset | -o | Int | 0 | Offset in bytes to start reading ||--bytes  | -b | Int | 0 | No. of bytes to read starting from offset ||--disableHashing | -d | Bool | False | True if hashing shall be disabled &lt;br&gt; False otherwise|&lt;hr&gt;**mode = testfile**| Option | Short | Type | Default | Description ||---|---|---|---|---||--input | -i | String | &quot;&quot; | Path to textfile with hex values||--output | -u | String | &quot;&quot; | Path to binary test file to be created |# Example**Shell:**```bash# Create a config templatepython -m ntrprtr -m config -a 10 -n ntrprtr-config.json``````bash# Interprets example.dd with config.jsonpython -m ntrprtr -m interpret -t path/to/example.dd -c config.json``````bash# Interprets example.dd with config.json and write it to result.txtpython -m ntrprtr -m interpret -t path/to/example.dd -c config.json -r result.txt``````bash# Interprets example.dd starting at offset 42 with length of 10 bytes applying config.jsonpython -m ntrprtr -m interpret -t path/to/example.dd -c config.json -o 42 -b 10``````bash# Interprets example.dd starting at offset 42 with length of 10 bytes applying config.json# Disable Hashing for big filespython -m ntrprtr -m interpret -t path/to/example.dd -c config.json -o 42 -b 10 -d True```To create a binary testfile use a textfile with hex values as input:```bash# Max. 16 hex values per row within a .txt# hexdata.txt00 01 02 03 04 04 06 07 08 09 0A 0B 0C 0D 0E 0F 68 61 6C 6C 6F 20 77 6F 72 6C 64 1B 1C 1D 1E 1F43 B7 67 42 00 00 00 00 00 00 00 00 00 00 00 0079 00 5F 00 30 00 31 00 2E 00 6A 00 D0 14 FE 5200 72 25 8B EF EA D8 01 ED 41``````bash# Create hex.bin from hexdata.txtpython -m ntrprtr -m testfile -i path/to/hexdata.txt -u hex.bin```**Programmatically:**Given bytes to interpret:```00 01 02 03 04 04 06 07 08 09 0A 0B 0C 0D 0E 0F 68 61 6C 6C 6F 20 77 6F 72 6C 64 1B 1C 1D 1E 1F43 B7 67 42 00 00 00 00 00 00 00 00 00 00 00 0079 00 5F 00 30 00 31 00 2E 00 6A 00 D0 14 FE 5200 72 25 8B EF EA D8 01 ED 41```Use the following `config.json`:```json{    &quot;name&quot;: &quot;ntrprtr example&quot;,    &quot;description&quot;: &quot;This is a description within the result&quot;,    &quot;ntrprtr&quot;: [        {            &quot;name&quot;: &quot;first-byte-with-no-action&quot;,            &quot;description&quot;: &quot;No action&quot;,            &quot;start&quot;: 0,            &quot;end&quot;: 2        },        {            &quot;name&quot;: &quot;first-bytes&quot;,            &quot;description&quot;: &quot;First three bytes&quot;,            &quot;start&quot;: 0,            &quot;end&quot;: 2,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;decimal&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        },        {            &quot;name&quot;: &quot;endian-bytes&quot;,            &quot;description&quot;: &quot;Little Endian&quot;,            &quot;start&quot;: 0,            &quot;end&quot;: 2,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;endianess&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        },        {            &quot;name&quot;: &quot;bin-bytes&quot;,            &quot;description&quot;: &quot;Binary bytes&quot;,            &quot;start&quot;: 2,            &quot;end&quot;: 3,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;binary&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        },        {            &quot;name&quot;: &quot;ascii-bytes&quot;,            &quot;description&quot;: &quot;Ascii values&quot;,            &quot;start&quot;: 16,            &quot;end&quot;: 26,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;ascii&quot;,                    &quot;nonAsciiPlaceholder&quot;: &quot;.&quot;                }            ]        },        {            &quot;name&quot;: &quot;hexdump-bytes&quot;,            &quot;description&quot;: &quot;Hexdump values&quot;,            &quot;start&quot;: 0,            &quot;end&quot;: 3,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;hexdump&quot;,                    &quot;nonAsciiPlaceholder&quot;: &quot;.&quot;                }            ]        },        {            &quot;name&quot;: &quot;equals-bytes&quot;,            &quot;description&quot;: &quot;Test equals&quot;,            &quot;start&quot;: 29,            &quot;end&quot;: 30,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;equals&quot;,                    &quot;endianess&quot;: &quot;big&quot;,                    &quot;cmp&quot;: [                        {                            &quot;value&quot;: &quot;1D1E&quot;,                            &quot;description&quot;: &quot;Compare 1&quot;                        },                        {                            &quot;value&quot;: &quot;1D1&quot;,                            &quot;description&quot;: &quot;Compare 2&quot;                        }                    ],                    &quot;noMatch&quot;: &quot;No Match found!&quot;                }            ]        },        {            &quot;name&quot;: &quot;bitEquals&quot;,            &quot;description&quot;: &quot;Bit equality&quot;,            &quot;start&quot;: 22,            &quot;end&quot;: 22,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;binary&quot;,                    &quot;endianess&quot;: &quot;big&quot;                },                {                    &quot;type&quot;: &quot;bitequals&quot;,                    &quot;endianess&quot;: &quot;big&quot;,                    &quot;cmp&quot;: [                        {                            &quot;value&quot;: &quot;01110111&quot;,                            &quot;description&quot;: &quot;Bits are equal!&quot;                        }                    ],                    &quot;noMatch&quot;: &quot;Bits are not equal!&quot;                }            ]        },        {            &quot;name&quot;: &quot;dos-time-bytes&quot;,            &quot;description&quot;: &quot;DOS time bytes&quot;,            &quot;start&quot;: 32,            &quot;end&quot;: 33,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;dostime&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        },        {            &quot;name&quot;: &quot;unixtime-bytes&quot;,            &quot;description&quot;: &quot;unix time bytes&quot;,            &quot;start&quot;: 60,            &quot;end&quot;: 63,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;unixtime&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        }        {            &quot;name&quot;: &quot;dos-date-bytes&quot;,            &quot;description&quot;: &quot;DOS date bytes&quot;,            &quot;start&quot;: 34,            &quot;end&quot;: 35,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;dosdate&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        },        {            &quot;name&quot;: &quot;win32time&quot;,            &quot;description&quot;: &quot;win32 time bytes&quot;,            &quot;start&quot;: 64,            &quot;end&quot;: 71,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;endianess&quot;,                    &quot;endianess&quot;: &quot;little&quot;                },                {                    &quot;type&quot;: &quot;decimal&quot;,                    &quot;endianess&quot;: &quot;little&quot;                },                {                    &quot;type&quot;: &quot;win32time&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        }        {            &quot;name&quot;: &quot;unicode-bytes&quot;,            &quot;description&quot;: &quot;unicode repr.&quot;,            &quot;start&quot;: 48,            &quot;end&quot;: 59,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;unicode&quot;                }            ]        },         {            &quot;name&quot;: &quot;extfilemode&quot;,            &quot;description&quot;: &quot;extfilemode bytes&quot;,            &quot;start&quot;: 72,            &quot;end&quot;: 73,            &quot;action&quot;: [                {                    &quot;type&quot;: &quot;extfilemode&quot;,                    &quot;endianess&quot;: &quot;little&quot;                }            ]        }    ]}```Use it programmatically:```pythonimport jsonfrom ntrprtr.ByteInterpreter import ByteInterpreterfrom ntrprtr.printer.Printer import PrinterconfigPath = &quot;config.json&quot;pathToFile = &quot;example.dd&quot; # Contains the above bytesfileHandle = open(pathToFile, &quot;rb&quot;)testBytes = fileHandle.read()configHandle = open(configPath, encoding=&quot;utf8&quot;)config = json.load(configHandle)b = ByteInterpreter(testBytes, config[&quot;ntrprtr&quot;])result = b.interpret()# If you want a standard output use Printerp = Printer()p.print(result, config[&quot;name&quot;], config[&quot;description&quot;])```The result is a list of tuples:```python[    #       Result: [0] = Name, [1] = Description, [2] = Start Byte, [3] = End Byte, [4] = Bytes, [5] = List(ActionResult)    # ActionResult: [0] = Type, [1] = Result    ('first-byte-with-no-action', 'No action', 0, 2, bytearray(b'\x00\x01\x02'), [('None', '-')])    ('first-bytes', 'First three bytes', 0, 2, bytearray(b'\x00\x01\x02'), [('decimal', 258)]),     ('endianess-bytes', 'Little Endian', 0, 2, bytearray(b'\x00\x01\x02'), [('endianess', &quot;02 01 00&quot;)]),     ('bin-bytes', 'Binary bytes', 2, 3, bytearray(b'\x02\x03'), [('binary', '0000 0011 0000 0010')]),     ('ascii-bytes', 'Ascii values', 16, 26, bytearray(b'hallo world'), [('ascii', 'hallo world')]),     ('hexdump-bytes', 'Hexdump values', 0, 3, bytearray(b'\x00\x01\x02\x03'), [('hexdump', 'see below')]),     ('equals-bytes', 'Test equals', 29, 30, bytearray(b'\x1d\x1e'), [('equals', 'Compare 1')]),     ('bitEquals', 'Bit equality', 22, 22, bytearray(b'w'), [('binary', '0111 0111'), ('bitequals', 'Bits are equal!')]),     ('unixtime-bytes', 'unix time bytes', 60, 63, bytearray(b'C\xd0\x14\xfe\x52'), [('unixtime', '14.02.14 13:06:24 UTC')]),    ('win32time', 'win32 time bytes', 64, 71, bytearray(b'C\x00\x72\x25\x8B\xEF\xEA\xD8\x01'), [('win32time', '28.10.22 17:05:56 UTC')]),    ('dos-time-bytes', 'DOS time bytes', 32, 33, bytearray(b'C\xb7'), [('dostime', '22:58:6')]),     ('dos-date-bytes', 'DOS date bytes', 34, 35, bytearray(b'gB'), [('dosdate', '7.3.2013')]),     ('unicode-bytes', 'unicode repr.', 48, 59, bytearray(b'y\x00_\x000\x001\x00.\x00j\x00'), [('unicode', 'y_01.j')])    ('extfilemode', 'filemode bytes', 72, 73, bytearray(b'\xed\x41'), [('Result')])]```The output from printer looks like the following:```###########################################################################################ntrprtr by 5f0Interpret bytes through different customizable actionsCurrent working directory: path/to/ntrprtr        Investigated File: path/to/example.dd                      MD5: 3f8555928a712492c23ca27fb142ebe2                   SHA256: 715899b61bf6a6aa02adac9124db94e74ec4f7e837acb7ed7a361acd10045b63          Offset in Bytes: 0                 Datetime: 10/11/1970 10:11:12###########################################################################################ntrprtr example---------------This is a description within the resultAnalysis----------&gt; No action    --------------      Start Byte: 0 (0x0)        End Byte: 2 (0x2)    Nr. of Bytes: 3    --------------     Bytes:             00 01 02    --------------    Action:             none    Result:             ---&gt; No action    --------------      Start Byte: 0 (0x0)        End Byte: 2 (0x2)    Nr. of Bytes: 3    --------------     Bytes:             00 01 02    --------------    Action:             none    Result:             ---&gt; First three bytes    --------------      Start Byte: 0 (0x0)        End Byte: 2 (0x2)    Nr. of Bytes: 3    --------------     Bytes:             00 01 02    --------------    Action:             decimal    Result:             131328--&gt; Little Endian    --------------      Start Byte: 0 (0x0)        End Byte: 2 (0x2)    Nr. of Bytes: 3    --------------     Bytes:             00 01 02    --------------    Action:             endianess    Result:             02 01 00--&gt; Binary bytes    --------------      Start Byte: 2 (0x2)        End Byte: 3 (0x3)    Nr. of Bytes: 2    --------------     Bytes:             02 03    --------------    Action:             binary    Result:             0000 0011 0000 0010--&gt; Ascii values    --------------      Start Byte: 16 (0x10)        End Byte: 26 (0x1a)    Nr. of Bytes: 11    --------------     Bytes:             68 61 6C 6C 6F 20 77 6F 72 6C 64    --------------    Action:             ascii    Result:             hallo world--&gt; Hexdump values    --------------      Start Byte: 0 (0x0)        End Byte: 3 (0x3)    Nr. of Bytes: 4    --------------     Bytes:             See below    --------------    Action:             hexdump    Result:               Offset   00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F    ASCII                       --------   -----------------------------------------------    ----------------                    0   00 01 02 03                                        ....                         --&gt; Test equals    --------------      Start Byte: 29 (0x1d)        End Byte: 30 (0x1e)    Nr. of Bytes: 2    --------------     Bytes:             1D 1E    --------------    Action:             equals    Result:             Compare 1--&gt; Bit equality    --------------      Start Byte: 22 (0x16)        End Byte: 22 (0x16)    Nr. of Bytes: 1    --------------     Bytes:             77    --------------    Action:             binary    Result:             0111 0111    --------------    Action:             bitequals    Result:             Bits are equal!--&gt; DOS time bytes    --------------      Start Byte: 32 (0x20)        End Byte: 33 (0x21)    Nr. of Bytes: 2    --------------     Bytes:             43 B7    --------------    Action:             dostime    Result:             22:58:6--&gt; DOS date bytes    --------------      Start Byte: 34 (0x22)        End Byte: 35 (0x23)    Nr. of Bytes: 2    --------------     Bytes:             67 42    --------------    Action:             dosdate    Result:             7.3.2013    --------------    Action:             dostime    Result:             8:19:14--&gt; unicode repr.    --------------      Start Byte: 48 (0x30)        End Byte: 59 (0x3b)    Nr. of Bytes: 12    --------------     Bytes:             79 00 5F 00 30 00 31 00 2E 00 6A 00    --------------    Action:             unicode    Result:             y_01.j--&gt; unix time bytes    --------------      Start Byte: 60 (0x3c)        End Byte: 63 (0x3f)    Nr. of Bytes: 4    --------------     Bytes:             D0 14 FE 52    --------------    Action:             unixtime    Result:             14.02.14 13:06:24 UTC--&gt; win32 time bytes    --------------      Start Byte: 64 (0x40)        End Byte: 71 (0x47)    Nr. of Bytes: 8    --------------     Bytes:             00 72 25 8B EF EA D8 01    --------------    Action:             win32time    Result:             28.10.22 17:05:56 UTC--&gt; extfilemode bytes    --------------      Start Byte: 72 (0x48)        End Byte: 73 (0x49)    Nr. of Bytes: 2    --------------     Bytes:             ED 41    --------------    Action:             extfilemode    Result:               File Type: 0100                         Directory                  Flags: 000                         SUID Bit: 0                          SGID Bit: 0                        Sticky Bit: 0            Permissions: 111 101 101                         rwx r-x r-x###########################################################################################Execution Time: 0.000976 sec```# LicenseMIT</longdescription>
</pkgmetadata>