<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bruhanimate[![Downloads](https://static.pepy.tech/badge/bruhanimate)](https://pepy.tech/project/bruhanimate)[![Downloads](https://static.pepy.tech/badge/bruhanimate/month)](https://pepy.tech/project/bruhanimate)[![Downloads](https://static.pepy.tech/badge/bruhanimate/week)](https://pepy.tech/project/bruhanimate)&lt;div&gt;&lt;img src=&quot;https://i.ibb.co/TwssymP/BRUHANIMA.gif&quot; alt=&quot;BRUHANIMA&quot; border=&quot;0&quot;&gt;&lt;img src=&quot;https://i.ibb.co/p3mbKb1/plas.gif&quot; alt=&quot;plas&quot; border=&quot;0&quot;&gt;&lt;img src=&quot;https://i.ibb.co/pR49kL6/noises.gif&quot; alt=&quot;noises&quot; border=&quot;0&quot;&gt;&lt;/div&gt;[![Supported Python versions](https://img.shields.io/pypi/pyversions/termcolor.svg?logo=python&amp;logoColor=FFE873)](https://pypi.org/project/bruhanimate/)bruhanimate offers a series of files to aid in rendering out animations in the terminal. This is heavily inspisred by the &lt;a href=&quot;https://github.com/peterbrittain/asciimatics&quot;&gt;Asciimatics&lt;/a&gt; package. While Asciimatics is the end-all be-all for termianl animations, I figured it would be good practice to go ahead and attempt something like this myself.## Installation### From PyPI```bashpip install --upgrade bruhanimate```### From source```bashgit clone https://github.com/FNBBDevs/bruhanimatecd bruhanimatepython -m pip install .```# UsageHere are some examples on how bruhanimate might be used. &lt;br/&gt;&lt;br/&gt;```py&quot;&quot;&quot;Here is a simple program that uses the EffectRenderer to render out oneof the prebuilt effects to the terminal.&quot;&quot;&quot;from bruhanimate.bruhrenderer import *from bruhanimate.bruhscreen import Screenimport bruhanimate.images as imagesimport sysdef demo(screen, img, frames, time, effect_type, background, transparent):        # CREATE THE RENDERER    renderer = CenterRenderer(screen, frames, time, img, effect_type, background, transparent)    # SET EFFECT ATTRIBUTES    renderer.update_smart_transparent(True)    renderer.effect.update_color(True)    renderer.effect.update_intensity(100)    # RUN THE ANIMATION    renderer.run()    # CATCH THE END WITH INPUT() --&gt; for Win-Systems --&gt; Ctl-C for Unix-Systems    input()def main():    Screen.show(demo, args=(images.get_image(&quot;TWOPOINT&quot;), 300, 0, &quot;noise&quot;, &quot; &quot;, False))if __name__ == &quot;__main__&quot;:    main()``````py&quot;&quot;&quot;Here is another example that makes use of line drawing to draw a 3-D triangle&quot;&quot;&quot;from bruhanimate.bruhrenderer import *from bruhanimate.bruhscreen import Screenimport bruhanimate.images as imagesdef demo(screen, img, frames, time, effect, background, transparent):    # CREATE THE RENDERER    renderer = PanRenderer(screen, frames, time, img, effect, background, transparent, loop=True)        # REGISTER THE LINES - LET'S MAKE A DECENT 3D TRIANGLE    renderer.effect.add_line((15, 15), (30, 30))    renderer.effect.add_line((30, 30), (50, 20))    renderer.effect.add_line((50, 20), (15, 15))    renderer.effect.add_line((30,30), (32, 22))    renderer.effect.add_line((32, 22), (15, 15))    renderer.effect.add_line((32, 22), (50, 20))    # RUN THE ANIMATION    renderer.run(end_message=False)    # CATCH THE END WITH INPUT() ON WINDOWS    input()image = images.text_to_image(&quot;HELLO WORLD!&quot;, padding_top_bottom=1, padding_left_right=3)Screen.show(demo, args=(image, 500, 0.05, &quot;drawlines&quot;, &quot; &quot;, True))```</longdescription>
</pkgmetadata>