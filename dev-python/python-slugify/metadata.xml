<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Slugify**A Python slugify application that handles unicode**.[![status-image]][status-link][![version-image]][version-link][![coverage-image]][coverage-link]# Overview**Best attempt** to create slugs from unicode strings while keeping it **DRY**.# NoticeThis module, by default installs and uses [text-unidecode](https://github.com/kmike/text-unidecode) _(GPL &amp; Perl Artistic)_ for its decoding needs.However, there is an alternative decoding package called [Unidecode](https://github.com/avian2/unidecode) _(GPL)_. It can be installed as `python-slugify[unidecode]` for those who prefer it. `Unidecode` is believed to be more advanced.### `Official` Support Matrix| Python         | Slugify            || -------------- | ------------------ || `&gt;= 2.7 &lt; 3.6` | `&lt; 5.0.0`          || `&gt;= 3.6 &lt; 3.7` | `&gt;= 5.0.0 &lt; 7.0.0` || `&gt;= 3.7`       | `&gt;= 7.0.0`         |# How to install    easy_install python-slugify |OR| easy_install python-slugify[unidecode]    -- OR --    pip install python-slugify |OR| pip install python-slugify[unidecode]# Options```pythondef slugify(    text,    entities=True,    decimal=True,    hexadecimal=True,    max_length=0,    word_boundary=False,    separator='-',    save_order=False,    stopwords=(),    regex_pattern=None,    lowercase=True,    replacements=(),    allow_unicode=False  ):  &quot;&quot;&quot;  Make a slug from the given text.  :param text (str): initial text  :param entities (bool): converts html entities to unicode (foo &amp;amp; bar -&gt; foo-bar)  :param decimal (bool): converts html decimal to unicode (&amp;#381; -&gt; ≈Ω -&gt; z)  :param hexadecimal (bool): converts html hexadecimal to unicode (&amp;#x17D; -&gt; ≈Ω -&gt; z)  :param max_length (int): output string length  :param word_boundary (bool): truncates to end of full words (length may be shorter than max_length)  :param save_order (bool): if parameter is True and max_length &gt; 0 return whole words in the initial order  :param separator (str): separator between words  :param stopwords (iterable): words to discount  :param regex_pattern (str): regex pattern for disallowed characters  :param lowercase (bool): activate case sensitivity by setting it to False  :param replacements (iterable): list of replacement rules e.g. [['|', 'or'], ['%', 'percent']]  :param allow_unicode (bool): allow unicode characters  :return (str): slugify text  &quot;&quot;&quot;```# How to use```pythonfrom slugify import slugifytxt = &quot;This is a test ---&quot;r = slugify(txt)self.assertEqual(r, &quot;this-is-a-test&quot;)txt = 'ÂΩ±Â∏´Âóé'r = slugify(txt)self.assertEqual(r, &quot;ying-shi-ma&quot;)txt = 'ÂΩ±Â∏´Âóé'r = slugify(txt, allow_unicode=True)self.assertEqual(r, &quot;ÂΩ±Â∏´Âóé&quot;)txt = 'C\'est d√©j√† l\'√©t√©.'r = slugify(txt)self.assertEqual(r, &quot;c-est-deja-l-ete&quot;)txt = 'N√≠n h«éo. W«í sh√¨ zh≈çng gu√≥ r√©n'r = slugify(txt)self.assertEqual(r, &quot;nin-hao-wo-shi-zhong-guo-ren&quot;)txt = '–ö–æ–º–ø—å—é—Ç–µ—Ä'r = slugify(txt)self.assertEqual(r, &quot;kompiuter&quot;)txt = 'jaja---lol-m√©m√©m√©oo--a'r = slugify(txt, max_length=9)self.assertEqual(r, &quot;jaja-lol&quot;)txt = 'jaja---lol-m√©m√©m√©oo--a'r = slugify(txt, max_length=15, word_boundary=True)self.assertEqual(r, &quot;jaja-lol-a&quot;)txt = 'jaja---lol-m√©m√©m√©oo--a'r = slugify(txt, max_length=20, word_boundary=True, separator=&quot;.&quot;)self.assertEqual(r, &quot;jaja.lol.mememeoo.a&quot;)txt = 'one two three four five'r = slugify(txt, max_length=13, word_boundary=True, save_order=True)self.assertEqual(r, &quot;one-two-three&quot;)txt = 'the quick brown fox jumps over the lazy dog'r = slugify(txt, stopwords=['the'])self.assertEqual(r, 'quick-brown-fox-jumps-over-lazy-dog')txt = 'the quick brown fox jumps over the lazy dog in a hurry'r = slugify(txt, stopwords=['the', 'in', 'a', 'hurry'])self.assertEqual(r, 'quick-brown-fox-jumps-over-lazy-dog')txt = 'thIs Has a stopword Stopword'r = slugify(txt, stopwords=['Stopword'], lowercase=False)self.assertEqual(r, 'thIs-Has-a-stopword')txt = &quot;___This is a test___&quot;regex_pattern = r'[^-a-z0-9_]+'r = slugify(txt, regex_pattern=regex_pattern)self.assertEqual(r, &quot;___this-is-a-test___&quot;)txt = &quot;___This is a test___&quot;regex_pattern = r'[^-a-z0-9_]+'r = slugify(txt, separator='_', regex_pattern=regex_pattern)self.assertNotEqual(r, &quot;_this_is_a_test_&quot;)txt = '10 | 20 %'r = slugify(txt, replacements=[['|', 'or'], ['%', 'percent']])self.assertEqual(r, &quot;10-or-20-percent&quot;)txt = '√úBER √úber German Umlaut'r = slugify(txt, replacements=[['√ú', 'UE'], ['√º', 'ue']])self.assertEqual(r, &quot;ueber-ueber-german-umlaut&quot;)txt = 'i love ü¶Ñ'r = slugify(txt, allow_unicode=True)self.assertEqual(r, &quot;i-love&quot;)txt = 'i love ü¶Ñ'r = slugify(txt, allow_unicode=True, regex_pattern=r'[^ü¶Ñ]+')self.assertEqual(r, &quot;ü¶Ñ&quot;)```For more examples, have a look at the [test.py](test.py) file.# Command Line OptionsWith the package, a command line tool called `slugify` is also installed.It allows convenient command line access to all the features the `slugify` function supports. Call it with `-h` for help.The command can take its input directly on the command line or from STDIN (when the `--stdin` flag is passed):```$ echo &quot;Taking input from STDIN&quot; | slugify --stdintaking-input-from-stdin``````$ slugify taking input from the command linetaking-input-from-the-command-line```Please note that when a multi-valued option such as `--stopwords` or `--replacements` is passed, you need to use `--` as separator before you start with the input:```$ slugify --stopwords the in a hurry -- the quick brown fox jumps over the lazy dog in a hurryquick-brown-fox-jumps-over-lazy-dog```# Running the testsTo run the tests against the current environment:    python test.py# ContributionPlease read the ([wiki](https://github.com/un33k/python-slugify/wiki/Python-Slugify-Wiki)) page prior to raising any PRs.# LicenseReleased under a ([MIT](LICENSE)) license.### Notes on GPL dependenciesThough the dependencies may be GPL licensed, `python-slugify` itself is not considered a derivative work and will remain under the MIT license.  If you wish to avoid installation of any GPL licensed packages, please note that the default dependency `text-unidecode` explicitly lets you choose to use the [Artistic License](https://opensource.org/license/artistic-perl-1-0-2/) instead. Use without concern.# VersionX.Y.Z Version    `MAJOR` version -- when you make incompatible API changes,    `MINOR` version -- when you add functionality in a backwards-compatible manner, and    `PATCH` version -- when you make backwards-compatible bug fixes.[status-image]: https://github.com/un33k/python-slugify/actions/workflows/ci.yml/badge.svg[status-link]: https://github.com/un33k/python-slugify/actions/workflows/ci.yml[version-image]: https://img.shields.io/pypi/v/python-slugify.svg[version-link]: https://pypi.python.org/pypi/python-slugify[coverage-image]: https://coveralls.io/repos/un33k/python-slugify/badge.svg[coverage-link]: https://coveralls.io/r/un33k/python-slugify[download-image]: https://img.shields.io/pypi/dm/python-slugify.svg[download-link]: https://pypi.python.org/pypi/python-slugify# Sponsors[Neekware Inc.](http://neekware.com)</longdescription>
</pkgmetadata>