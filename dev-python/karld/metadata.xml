<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>How To Data======================1. Split data.2. Create a generator that will take the data as an iterator, yielding key,value pairs.3. Sort each list of key/value pairs by the key.4. Use heap to merge lists of key/value pairs by the key.5. Group key/value pairs by the key.6. Reduce each key grouped values to one value yielding a single key/value pair.In lieu of a key, you may use a key function as long as it produces thesame key throughout the map-sort-merge-group phases.Split data----------------------Use split_file to split up your data files or use split_csv_file to split upcsv files which may have multi-line fields to ensure they are not broken up.::    import os    import karld    big_file_names = [        &quot;bigfile1.csv&quot;,        &quot;bigfile2.csv&quot;,        &quot;bigfile3.csv&quot;    ]    data_path = os.path.join('path','to','data', 'root')    def main():        for filename in big_file_names:            # Name the directory to write the split files into based            # on the name of the file.            out_dir = os.path.join(data_path, 'split_data', filename.replace('.csv', ''))            # Split the file, with a default max_lines=200000 per shard of the file.            karld.io.split_csv_file(os.path.join(data_path, filename), out_dir)    if __name__ == &quot;__main__&quot;:        main()When you're generating data and want to shard it out to files based on quantity, useone of the split output functions such as ``split_file_output_csv``, ``split_file_output`` or``split_file_output_json``::    import os    import pathlib    import karld    def main():        &quot;&quot;&quot;        Python 2 version        &quot;&quot;&quot;        items = (str(x) + os.linesep for x in range(2000))        out_dir = pathlib.Path('shgen')        karld.io.ensure_dir(str(out_dir))        karld.io.split_file_output('big_data', items, str(out_dir))    if __name__ == &quot;__main__&quot;:        main()CSV serializable data::    import pathlib    import karld    def main():        &quot;&quot;&quot;        From a source of data, shard it to csv files.        &quot;&quot;&quot;        if karld.is_py3():            third = chr        else:            third = unichr        # Your data source        items = ((x, x + 1, third(x + 10)) for x in range(2000))        out_dir = pathlib.Path('shard_out_csv')        karld.io.ensure_dir(str(out_dir))        karld.io.split_file_output_csv('big_data.csv', items, str(out_dir))    if __name__ == &quot;__main__&quot;:        main()Rows of json serializable data::    import pathlib    import karld    def main():        &quot;&quot;&quot;        From a source of data, shard it to csv files.        &quot;&quot;&quot;        if karld.is_py3():            third = chr        else:            third = unichr        # Your data source        items = ((x, x + 1, third(x + 10)) for x in range(2000))        out_dir = pathlib.Path('shard_out_json')        karld.io.ensure_dir(str(out_dir))        karld.io.split_file_output_json('big_data.json', items, str(out_dir))    if __name__ == &quot;__main__&quot;:        main()Documentation===============================Read the docs: http://karld.readthedocs.org/en/latest/Expanded Getting Started at http://karld.readthedocs.org/en/latest/getting-started.html.More examples are documented at http://karld.readthedocs.org/en/latest/source/example.html. Viewthe source of the example files, for examples...Contributing:==================Submit any issues or questions here: https://github.com/johnwlockwood/karl_data/issues.Make pull requests to **development** branch of https://github.com/johnwlockwood/karl_data.**Documentation** is written in reStructuredText and currently uses the Sphinx style for field lists http://sphinx-doc.org/domains.html#info-field-listsCheck out closed pull requests to see the flow of development, as almostevery change to master is done via a pull request on **GitHub**. Code Reviewsare welcome, even on merged Pull Requests. Feel free to ask questions aboutthe code.</longdescription>
</pkgmetadata>