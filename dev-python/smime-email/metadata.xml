<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-smime-email&lt;a href=&quot;https://pypi.org/project/smime-email/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/smime-email&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/smime-email&quot;&gt;&lt;img alt=&quot;Downloads&quot; src=&quot;https://pepy.tech/badge/smime-email&quot;&gt;&lt;/a&gt;Generate x509 SMIME signed emails with ease!## Usage1. Generate the email raw content    ```python    import smime_email    data = b&quot;Hello!&quot;    SMIME_KEY = smime_email.load_key(&quot;key_path.pem&quot;)    SMIME_INTERMEDIATE = smime_email.load_certificates(&quot;intermediate_path.pem&quot;)    SMIME_CERT = smime_email.load_certificates(&quot;cert_path.pem&quot;)[0]    email_raw_bytes = smime_email.get_smime_attachment_content(data, SMIME_KEY, SMIME_INTERMEDIATE, SMIME_CERT)    ```1. Send it using any email library you like. Here is an example as Django email backend    ```python    email_raw_bytes = smime_email.get_smime_attachment_content(data, SMIME_KEY, SMIME_INTERMEDIATE, SMIME_CERT)    # ...    class EmailBackend(BaseEmailBackend):        def send_messages(self, message) -&gt; int:            with smtplib.SMTP(settings.EMAIL_HOST, settings.EMAIL_PORT) as server:                server.sendmail(message.from_email, message.to, email_raw_bytes)            return 1    ```## DevelopmentThe code is formatted with **black** and **isort** and checked with various linters.To run the whole linting and formatting process, run `poetry run poe all`.</longdescription>
</pkgmetadata>