<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jaxlie![build](https://github.com/brentyi/jaxlie/workflows/build/badge.svg)![mypy](https://github.com/brentyi/jaxlie/workflows/mypy/badge.svg?branch=master)![lint](https://github.com/brentyi/jaxlie/workflows/lint/badge.svg)[![codecov](https://codecov.io/gh/brentyi/jaxlie/branch/master/graph/badge.svg)](https://codecov.io/gh/brentyi/jaxlie)[![pypi_dowlnoads](https://pepy.tech/badge/jaxlie)](https://pypi.org/project/jaxlie)**[ [API reference](https://brentyi.github.io/jaxlie) ]** **[[PyPI](https://pypi.org/project/jaxlie/) ]**`jaxlie` is a library containing implementations of Lie groups commonly used forrigid body transformations, targeted at computer vision &amp;amp; roboticsapplications written in JAX. Heavily inspired by the C++ library[Sophus](https://github.com/strasdat/Sophus).We implement Lie groups as high-level (data)classes:&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;Group&lt;/th&gt;      &lt;th&gt;Description&lt;/th&gt;      &lt;th&gt;Parameterization&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody valign=&quot;top&quot;&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code&gt;jaxlie.&lt;strong&gt;SO2&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;Rotations in 2D.&lt;/td&gt;      &lt;td&gt;&lt;em&gt;(real, imaginary):&lt;/em&gt; unit complex (∈ S&lt;sup&gt;1&lt;/sup&gt;)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code&gt;jaxlie.&lt;strong&gt;SE2&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;Proper rigid transforms in 2D.&lt;/td&gt;      &lt;td&gt;&lt;em&gt;(real, imaginary, x, y):&lt;/em&gt; unit complex &amp;amp; translation&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code&gt;jaxlie.&lt;strong&gt;SO3&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;Rotations in 3D.&lt;/td&gt;      &lt;td&gt;&lt;em&gt;(qw, qx, qy, qz):&lt;/em&gt; wxyz quaternion (∈ S&lt;sup&gt;3&lt;/sup&gt;)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code&gt;jaxlie.&lt;strong&gt;SE3&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;Proper rigid transforms in 3D.&lt;/td&gt;      &lt;td&gt;&lt;em&gt;(qw, qx, qy, qz, x, y, z):&lt;/em&gt; wxyz quaternion &amp;amp; translation&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;Where each group supports:- Forward- and reverse-mode AD-friendly **`exp()`**, **`log()`**,  **`adjoint()`**, **`apply()`**, **`multiply()`**, **`inverse()`**,  **`identity()`**, **`from_matrix()`**, and **`as_matrix()`** operations. (see  [./examples/se3_example.py](./examples/se3_basics.py))- Helpers for optimization on manifolds (see  [./examples/se3_optimization.py](./examples/se3_optimization.py),  &lt;code&gt;jaxlie.&lt;strong&gt;manifold.\*&lt;/strong&gt;&lt;/code&gt;).- Compatibility with standard JAX function transformations. (see  [./examples/vmap_example.py](./examples/vmap_example.py))- (Un)flattening as pytree nodes.- Serialization using [flax](https://github.com/google/flax).We also implement various common utilities for things like uniform randomsampling (**`sample_uniform()`**) and converting from/to Euler angles (in the`SO3` class).---### Install (Python &gt;=3.7)```bash# Python 3.6 releases also exist, but are no longer being updated.pip install jaxlie```---### In the wild- [jaxfg](https://github.com/brentyi/jaxfg) applies `jaxlie` to nonlinear least  squares problems with block-sparse structure. (for pose graph optimization,  bundle adjustment, etc)- [tensorf-jax](https://github.com/brentyi/tensorf-jax) is an unofficial  implementation of  [Tensorial Radiance Fields (Chen et al, ECCV 2022)](https://apchenstu.github.io/TensoRF/)  using `jaxlie`.  ![Render of a lego](https://github.com/brentyi/tensorf-jax/raw/main/lego_render.gif)---### Misc`jaxlie` was originally written for our IROS 2021 paper([link](https://github.com/brentyi/dfgo)). If it's useful for you, you'rewelcome to cite:```@inproceedings{yi2021iros,    author={Brent Yi and Michelle Lee and Alina Kloss and Roberto Mart\'in-Mart\'in and Jeannette Bohg},    title = {Differentiable Factor Graph Optimization for Learning Smoothers},    year = 2021,    BOOKTITLE = {2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)}}```</longdescription>
</pkgmetadata>