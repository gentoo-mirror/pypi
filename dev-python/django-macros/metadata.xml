<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-macros=============Macros accepting positional and keyword arguments, and repeated blocktags in the django template system. Sometimes include tags just don'tget the job done. Either you have repeated code that you want to keepall in the same single template, or your code needs to dynamicallygenerate and sub in certain values, in a way that the include syntaxinhibits. Whatever the case, if you're finding that the built in includetag just isn't working for your use case, then perhaps django-macros isfor you.visit the `github &lt;https://github.com/nalourie/django-macros&gt;`__.Installation:=============from the command line:::    pip install django-macrosWithin settings.py, add 'macros' to INSTALLED\_APPS:.. code:: python    INSTALLED_APPS = (        ...        'macros',        ...    )Useage:=======django-macros contains two template tag libraries, one for creatingmacros within templates, and one for repeating block tags.Macros Useage-------------Explained Useage~~~~~~~~~~~~~~~~At the beginning of your file include:::    {% load macros %}When you have a section of your template you want to repeat, but don'twant to have inherited or any other block tag-like functionality, definea macro as follows:::    {% macro some_macro_name arg1 arg2 kwarg=&quot;default&quot; %}        {{ arg1 }} was the first argument.        {{ arg2 }} was the second argument.        {% if kwarg %}This is a {{ kwarg }}. {% endif %}    {% endmacro %}Then when you want to use the macro, simply do:::    {% use_macro some_macro_name &quot;foo&quot; &quot;bar&quot; kwarg=&quot;nondefault value&quot; %}which renders to:::    foo was the first argument.    bar was the second argument.    This is a nondefault value.Alternatively, you can save your macros in a separate file, e.g.&quot;mymacros.html&quot; and load it into the template with the tag``{% loadmacros &quot;mymacros.html&quot; %}`` then use them with the``{% use_macro ... %}`` tag.All macros, including loaded ones, are local to the template file theyare loaded into/defined in, and are not inherited through``{% extends ... %}`` tags.A more in-depth useage example:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Macro:^^^^^^You can also input template variables into the macros, but filters arenot supported. That is, you cannot use filters in the arguments.If the context where \`{'foo': 'foobar'}::    {% macro test2args1kwarg arg1 arg2 baz=&quot;Default baz&quot; %}        {% firstof arg1 &quot;default arg1&quot; %}        {% if arg2 %}{{ arg2 }}{% else %}default arg2{% endif %}        {{ baz }}    {% endmacro %}                    {% use_macro test2args1kwarg &quot;foo&quot; &quot;bar&quot; baz=&quot;KW&quot; %}    &lt;br&gt;    {% use_macro test2args1kwarg num_pages &quot;bar&quot; %}    &lt;br&gt;    {% use_macro test2args1kwarg %}renders as:^^^^^^^^^^^::    foo bar KW    77 bar Default baz    default arg1 default arg2 Default bazExtended Syntax~~~~~~~~~~~~~~~Sometimes you might want to include data that is rendered by thetemplate engine, or longer data containing a lot of html in a macro. Forthis, the syntax of plugging arguments directly into the tag doesn'treally work, so instead of``{% use_macro some_macro_name &quot;arg&quot; kwarg_name=&quot;value&quot; %}``, use thesyntax below:::    {% macro_block some_macro_name %}        {% macro_arg %}            arg        {% endmacro_arg %}                {% macro_kwarg kwname %}            value        {% endmacro_kwarg %}    {% endmacro_block %}Note that with this syntax you no longer have to quotestrings/arguments. If you have a mix of longer and shorter arguments,you can also use both syntaxes simultaneously:::    {% macro_block some_macro_name &quot;arg1&quot; kwname1=&quot;value1&quot; %}        {% macro_arg %}            arg2        {% endmacro_arg %}                {% macro_kwarg kwname2 %}            value2        {% endmacro_kwarg %}    {% endmacro_block %}Repeated Blocks Useage:-----------------------At the beginning of your file include:::    {% load repeatedblocks %}When you have a block that you want to repeat, instead of using a blocktag, use a repeated block:::    {% repeated_block some_block name %}        ...        ...        ...    {% endblock %}Later, when you want to repeat that block again, simply include therepeat tag:::    {% repeat some_block name %}Thus, the following template:::    {% repeated_block title %}Repeated Block Tags{% endblock %}    {% repeat title %}Renders to:::    Repeated Block Tags    Repeated Block TagsMake sure that the ``{% repeat ... %}`` tag comes **after** the``{% repeated_block ... %} ... {% endblock %}`` tag.They are fully inheritable, repeat inherited content and should workexactly as you'd expect a block tag to work.Bonus Content!==============Design Explanation for repeatedblocks.py:-----------------------------------------Using a &quot;repeated\_block&quot; followed by &quot;repeat&quot; tag structure, as opposedto just repeating normal block tags, forces developers to be moreexplicit about what is repeated. Thus, it guards against the potentialto remove block tags later in development, not realize they arerepeated, and create an error later. Hence, we've chosen this designsince it's more advantageous/pythonic in being explicit as well as dry.Credits=======The macros tags are based on snippet originally by `MichalLudvig &lt;http://www.logix.cz/michal&gt;`__, michal@logix.cz, later modifiedfor args and kwargs by `Skylar Saveland &lt;http://skyl.org&gt;`__.Code was updated for django 1.6, modified, and packaged by NicholasLourie, while working for `kozbox, llc &lt;http://kozbox.com&gt;`__. Nick alsoadded the extended syntax to the macros.</longdescription>
</pkgmetadata>