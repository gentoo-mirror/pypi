<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;misc/logo.svg&quot; width=&quot;75%&quot;&gt;&lt;/p&gt;&lt;p align=center&gt;   &lt;em&gt;A simple way for templating kubernetes manifests.&lt;/em&gt;&lt;/p&gt;&lt;p align=center&gt;   &lt;img src='https://img.shields.io/github/actions/workflow/status/tsladecek/ksux/test.yml?branch=main&amp;label=tests&amp;logo=GitHub' alt=''/&gt;   &lt;img src='https://img.shields.io/github/repo-size/tsladecek/ksux' alt=''/&gt;   &lt;img src='https://img.shields.io/github/license/tsladecek/ksux' alt='License: MIT'/&gt;   &lt;img src='https://img.shields.io/github/v/tag/tsladecek/ksux?color=yellow&amp;label=version&amp;logo=GitHub'/&gt;   &lt;a href='https://pypi.org/project/ksux/'&gt;&lt;img src='https://img.shields.io/pypi/v/ksux?logo=Pypi'/&gt;&lt;/a&gt;   &lt;a href='https://hub.docker.com/r/tsladecek/ksux'&gt;&lt;img src='https://img.shields.io/docker/image-size/tsladecek/ksux?logo=Docker&amp;sort=date' /&gt;&lt;/a&gt;&lt;/p&gt;---1. [Requirements](#requirements)2. [Installation](#installation)   1. [Local](#local)   2. [Docker](#docker)3. [How does it work?](#how-does-it-work)   1. [The `op.path`](#the-oppath)4. [Example](#example)**tldr.**```shellksux -b &lt;path_to_base_dir&gt; -p &lt;path_to_patches_dir&gt; -o &lt;output_dir&gt;```or using docker:```shelldocker run --rm -v /path/to/your/configs:/configs tsladecek/ksux ksux -b /configs/base -p /configs/patches -o /configs/out```---## RequirementsThis is a python package. So the only requirements are `python3` and `pip`## Installation### Local- Optional: Create and activate a virtual env.```shell# option 1: virualvenvvirtualvenv ksuxsource ksux/bin/activate# option 2: venvpython -m venv ksuxsource ksux/bin/activate# option 3: condaconda create -n ksux pythonconda activate ksux```- Install```shellpip install ksux```### Dockeruse the [docker image](https://hub.docker.com/r/tsladecek/ksux)To run the command inside a docker container, you need to make sure that all volumes are mapped to the container. Let'ssay that you have a following file structure:```shell|- /home/project|  |- base|  |- patches|  |- out```To generate patched manifests in the `/home/project/out` folder, run following command:```shelldocker run --rm -v /home/project:/configs tsladecek/ksux ksux -b /configs/base -p /configs/patches -o /configs/out```the important part is the `-v` flag, which will mount your local folder as volume to the container.## How does it work?Let's say that you have many manifests in some directory (`base` directory) that you wish to patch with patches (in the`patches`) directory.Patches could be in `yaml` or `json` format (as well as your manifests). However, they must adhere to following schema:```yamlname: &lt;patch_description&gt;target:  apiVersion: &lt;apiVersion of targeted resource&gt;  kind: &lt;Deployment type of targeted resource&gt;  name: &lt;name of targeted resource&gt;ops:  - name: &lt;operation description&gt;    path: &lt;path to the part of the manifest to be patched&gt;    value: &lt;value which should be replaced or added&gt;    action: &lt;add|replace|remove&gt;```each patch file can be a list of patches. You can use the classic yaml format, e.g.:```yaml- name: deployment_patches  target:    apiVersion: apps/v1    kind: Deployment    name: web  ops:    - name: replace_image      path: /spec/template/spec/containers/nginx/image      value: nginx:1.23      action: replace- name: service_patches  target:    apiVersion: v1    kind: Service    name: nginx-service  ops:    - name: add_https_port      path: /spec/ports      value:        name: https        port: 443        protocol: TCP        targetPort: 443      action: add    - name: rename_http_port      path: /spec/ports/http/name      action: replace      value: new_name```or use the `---` separator:```yaml---name: deployment_patchestarget:  apiVersion: apps/v1  kind: Deployment  name: webops:- name: replace_image  path: /spec/template/spec/containers/nginx/image  value: nginx:1.23  action: replace---name: service_patchestarget:  apiVersion: v1  kind: Service  name: nginx-serviceops:- name: add_https_port  path: /spec/ports  value:    name: https    port: 443    protocol: TCP    targetPort: 443  action: add- name: rename_http_port  path: /spec/ports/http/name  action: replace  value: new_name```Then all you need to do, is run:```shellksux -b &lt;path_to_base_dir&gt; -p &lt;path_to_patches_dir&gt; -o &lt;output_dir&gt;```This will save all patched manifests to the output dir. You can use the `--dry-run` flag to print the patchedmanifests to stdout:```shellksux -b &lt;path_to_base_dir&gt; -p &lt;path_to_patches_dir&gt; --dry-run```For list of all options see:```shellksux --help```### the `op.path`This is a pretty cool thing. Similar to kustomize path, however you can target list item by names of child objects.E.g. say you have a list of ports in a service:```yamlapiVersion: v1kind: Servicemetadata:  labels:    app: nginx-service  name: nginx-servicespec:  ports:    - name: new_name      port: 80      protocol: TCP      targetPort: 80    - name: https      port: 443      protocol: TCP      targetPort: 443  selector:    app: web  type: ClusterIP```To target the `https` service and change its name, you can specify the path: `/spec/ports/https/name` and thenset the value to the new name ðŸ’ª.## ExampleIn the `./examples` folder there are 3 sub-folders:    - `/examples/base` with deployment, service and a configmap manifests. These are the base manifests which we wish    to patch    - `/examples/patches` contain the patches (notice that both base kubernetes manifests and patches can be either in    `json` or `yml`/`yaml` format)    - `/examples/out` is the output directory where the patched resources will be outputFirst, we will `dry-run` the patching:```shellksux -b examples/base -p examples/patches --dry-run```You should see the patched manifests printed out to the console. Now we can run it and save the patched manifeststo the `output` folder:```shellksux -b examples/base -p examples/patches -o examples/out```By default, the manifests will be saved in `yaml` format with `.yaml` extension. If you wish to use the `.yml` extensionor save the manifests in `json` format, simply provide the `-e` flag with corresponding extension. E.g.:```shellksux -b examples/base -p examples/patches -o examples/out -e json```</longdescription>
</pkgmetadata>