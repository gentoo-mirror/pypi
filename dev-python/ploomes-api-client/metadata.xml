<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Ploomes API Python ClientThis package provides a simple Python client for interacting with the [Ploomes API](https://developers.ploomes.com/), designed with rate-limiting and exponential backoff strategies for improved resilience.## InstallationYou can install the package from PyPI:```bashpip install ploomes-api-client```## Basic Usage### Contact ManagementTo manage contacts, first import the necessary classes and initialize them:```pythonfrom ploomes_client import PloomesClient as Ploomesfrom ploomes_client.collections.contacts import Contacts```#### Initialize PloomesClient and Contacts Class```pythonploomes = Ploomes(api_key='your_api_key_here')contacts = Contacts(ploomes)```#### Creating a New Contact with Expanded FieldsHere is a synthetic example to demonstrate how to create a new contact with expanded `Phones` and `OtherProperties`:```python# Define the payload for the new contactpayload = {    &quot;Name&quot;: &quot;Jane Doe&quot;,    &quot;Email&quot;: &quot;janedoe@example.com&quot;,    &quot;Phones&quot;: [        {&quot;PhoneNumber&quot;: &quot;1234567890&quot;, &quot;Type&quot;: &quot;Mobile&quot;}    ],    &quot;OtherProperties&quot;: {&quot;FavoriteColor&quot;: &quot;Blue&quot;, &quot;Occupation&quot;: &quot;Engineer&quot;}}# Create the contactresponse_json = contacts.post_contact(payload, expand=&quot;Phones,OtherProperties&quot;)```In this example, the `post_contact` method sends a POST request to create a new contact in Ploomes. The `payload` dictionary contains the data for the new contact, including fields like `Name`, `Email`, `Phones`, and `OtherProperties`. We also use the `expand` parameter to expand the `Phones` and `OtherProperties` fields.By default, the `post_contact` method will return a JSON-formatted string as the response.## ContributingContributions are welcome! Please feel free to submit a Pull Request.# Uploading to PyPI with Two-Factor Authentication1. Generate an API token for your PyPI account:   - Go to the [PyPI account settings page](https://pypi.org/manage/account/token/) and log in.   - Scroll down to the &quot;API Tokens&quot; section and click &quot;Add API Token.&quot;   - Provide a description for the token and click &quot;Generate.&quot;   - Copy the generated token.2. Upload your package using the API token:   - Open your terminal.   - Navigate to your package directory.   - Build the distribution files:     ```bash     python setup.py sdist bdist_wheel     ```   - Upload the distribution files using the `twine` tool and the generated API token:     ```bash     twine upload --verbose dist/* -u __token__ -p &lt;API_TOKEN&gt;     ```   Replace `&lt;API_TOKEN&gt;` with the copied API token.3. Verify the upload:   - Check the PyPI project page to ensure your new version is listed.</longdescription>
</pkgmetadata>