<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fast_arrowA simple yet robust (stock+options) API client for Robinhood[![Build Status](https://travis-ci.com/westonplatter/fast_arrow.svg?branch=master)](https://travis-ci.com/westonplatter/fast_arrow)&amp;nbsp;[![CoverageStatus](https://coveralls.io/repos/github/westonplatter/fast_arrow/badge.svg?branch=master)](https://coveralls.io/github/westonplatter/fast_arrow?branch=master)&amp;nbsp;[![Version](https://img.shields.io/pypi/v/fast_arrow.svg)](https://pypi.org/project/fast-arrow/)## PLEASE NOTE - breaking changes introduced in 1.0.0 releaseSometime during Spring 2019, Robinhood changed how their API handlesauthentication. In order to adapt to those changes, I've moved&quot;authentication&quot; outside this library to `fast_arrow_auth`,https://github.com/westonplatter/fast_arrow_auth.Please see:- [issue 35](https://github.com/westonplatter/fast_arrow/issues/85) for adetailed account of the issue- [this comment](https://github.com/westonplatter/fast_arrow/issues/85#issuecomment-513834267) for the approach I've taken to remediate auth issues- [this PR](https://github.com/westonplatter/fast_arrow/pull/94) for a run down on exact code changesI have released these changes under version 1.0.0 to follow semanticversion guidelines (since auth changes are incompatible API changes).## example```pyfrom fast_arrow import Client, Stock, OptionChain, Option## new auth process as of 1.0.0# get auth_data (see https://github.com/westonplatter/fast_arrow_auth)#with open(&quot;fast_arrow_auth.json&quot;) as f:    auth_data = json.loads(f.read())## initialize client with auth_data#client = Client(auth_data)## fetch the stock info for TLT#symbol = &quot;TLT&quot;stock = Stock.fetch(client, symbol)## get the TLT option chain#stock_id = stock[&quot;id&quot;]option_chain = OptionChain.fetch(client, stock_id)## let's get TLT options (calls and puts) for next 4 expiration dates#oc_id = option_chain[&quot;id&quot;]eds = option_chain['expiration_dates'][0:3]## get all options on the TLT option chain#ops = Option.in_chain(client, oc_id, expiration_dates=eds)## merge in market data fro TLT option instruments (ask, bid, delta, theta, etc)#ops = Option.mergein_marketdata_list(client, ops)```## installInstall the package from pypi,```pip install fast_arrow```## design principlesYou might be asking, &quot;yet another Robinhood client? There's already a few outthere. What's different about this one?&quot;`fast_arrow` holds to these __design principles__,  - focus on simple features that expose data. Don't interpret data.  - make __stock__ &amp; __option__ operations easy to reason through &amp; execute with code  - organize code in small and discrete python classes  - use [fast_arrow_auth](https://github.com/westonplatter/fast_arrow_auth) to handle authentication process## featuresHere's what you can do with `fast_arrow` (some features still in development)**Stocks**- [x] get quotes- [ ] fetch historical data- [x] fetch all stock trades- [ ] submit orders- [ ] fetch earning events (past and future)- [ ] fetch company news articles- [ ] fetch company fundamentals- [ ] fetch popularity data**Options**- [x] fetch option quotes ([example](examples/option_chain.py))- [x] fetch open option positions ([example](examples/option_positions.py))- [x] fetch all option orders (filled, canceled, rejected)- [x] fetch historical options data ([example](examples/historical_option_data.py))- [x] fetch option events ([example](examples/option_events.py))- [ ] generate option strategy orders  - [x] single ([example](examples/option_order_place_single.py))  - [x] verticals ([example](examples/option_order_place_vertical.py))  - [x] iron condors ([example](examples/option_order_place_iron_condor.py))  - [ ] calendars  - [ ] diagonals- [ ] generate humanized names for option strategies- [x] submit order ([example](examples/option_order_place_single.py))- [x] cancel order ([example](examples/option_order_place_single.py))- [x] replace order ([example](examples/option_order_replace.py))**Portfolio**- [x] fetch historical value of portfolio ([example](examples/portfolio_historicals.py))**Authentication/Security**- [x] Authentication has moved to [fast_arrow_auth](https://github.com/westonplatter/fast_arrow_auth).- [x] pin SSL certificate (see [this PR](https://github.com/westonplatter/fast_arrow/pull/35))- [x] exposes token refresh method ([example](examples/auth.py#L25))__Want to propose a feature?__ [Open a feature request](https://github.com/westonplatter/fast_arrow/issues/new/choose) or open a Pull Request.## developmentInstall [pipenv](https://github.com/pypa/pipenv), and then run,```pipenv install --dev```Run the test suite via,```make test```Run all the examples (make sure you add username/password to config.debug.ini),```sh run_all_examples.sh```Run the test suite against a specific python version,```pipenv run tox -e py36```### releasesAdding so I don't forget the next time I release a version,```python setup.py sdist bdist_wheeltwine upload dist/*```## supporting libraries- fast_arrow_auth, https://github.com/westonplatter/fast_arrow_auth## projects using `fast_arrow`- **simple_portfolio**. Export trades from Robinhood and run basic reportingon portfolio performance. https://github.com/westonplatter/simple_portfolio- **chesterton**. A delightful little UI &amp; trading bot for strategies onRobinhood. https://github.com/westonplatter/chesterton</longdescription>
</pkgmetadata>