<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========recordtype===========NOTE====In Python 3.7 a better solution than recordtype is to use dataclasses.I have switched active development to my `namedlist project&lt;https://bitbucket.org/ericvsmith/namedlist&gt;`_. It has a betterimplementation that makes it easier to modify the code. It should befully compatible with recordtype.And in general, the attrs project(https://attrs.readthedocs.io/en/stable/) is an improvement to bothrecordtype and namedlist.Overview========recordtype provides a factory function, namedrecordtype.recordtype. It is similar to collections.namedtuple, withthe following differences:* recordtype instances are mutable.* recordtype supports per-field default values.* recordtype supports an optional default value, to be used by all  fields do not have an explicit default value.Typical usage=============You can use recordtype like a mutable namedtuple::    &gt;&gt;&gt; from recordtype import recordtype    &gt;&gt;&gt; Point = recordtype('Point', 'x y')    &gt;&gt;&gt; p = Point(1, 3)    &gt;&gt;&gt; p.x = 2    &gt;&gt;&gt; assert p.x == 2    &gt;&gt;&gt; assert p.y == 3Or, you can specify a default value for all fields::    &gt;&gt;&gt; Point = recordtype('Point', 'x y', default=3)    &gt;&gt;&gt; p = Point(y=2)    &gt;&gt;&gt; assert p.x == 3    &gt;&gt;&gt; assert p.y == 2Or, you can specify per-field default values::    &gt;&gt;&gt; Point = recordtype('Point', [('x', 0), ('y', 100)])    &gt;&gt;&gt; p = Point()    &gt;&gt;&gt; assert p.x == 0    &gt;&gt;&gt; assert p.y == 100You can also specify a the per-field defaults with a mapping, insteadof an interable. Note that this is only useful with an orderedmapping, such as an OrderedDict::    &gt;&gt;&gt; from collections import OrderedDict    &gt;&gt;&gt; Point = recordtype('Point', OrderedDict((('y', 0),    ...                                          ('x', 100))))    &gt;&gt;&gt; p = Point()    &gt;&gt;&gt; assert p.x == 100    &gt;&gt;&gt; assert p.y == 0The default value will only be used if it is provided and a per-fielddefault is not used::    &gt;&gt;&gt; Point = recordtype('Point', ['x', ('y', 100)], default=10)    &gt;&gt;&gt; p = Point()    &gt;&gt;&gt; assert p.x == 10    &gt;&gt;&gt; assert p.y == 100If you use a mapping, the value NO_DEFAULT is convenient to specifythat a field uses the default value::    &gt;&gt;&gt; from recordtype import NO_DEFAULT    &gt;&gt;&gt; Point = recordtype('Point', OrderedDict((('y', NO_DEFAULT),    ...                                          ('x', 100))),    ...                             default=5)    &gt;&gt;&gt; p = Point()    &gt;&gt;&gt; assert p.x == 100    &gt;&gt;&gt; assert p.y == 5Creating types==============Specifying Fields-----------------Fields can be specified as in namedtuple: as either a string specifingthe field names, or as a iterable of field names. These two uses areequivalent::    &gt;&gt;&gt; Point = recordtype('Point', 'x y')    &gt;&gt;&gt; Point = recordtype('Point', ['x', 'y'])If using a string, commas are first converted to spaces. So these areequivalent::    &gt;&gt;&gt; Point = recordtype('Point', 'x y')    &gt;&gt;&gt; Point = recordtype('Point', 'x,y')Specifying Defaults-------------------Per-field defaults can be specified by supplying a 2-tuple (name,default_value) instead of just a string for the field name. This isonly supported when you specify a list of field names::    &gt;&gt;&gt; Point = recordtype('Point', [('x', 0), ('y', 0)])    &gt;&gt;&gt; p = Point(3)    &gt;&gt;&gt; assert p.x == 3    &gt;&gt;&gt; assert p.y == 0In addition to, or instead of, these per-field defaults, you can alsospecify a default value which is used when no per-field default valueis specified::    &gt;&gt;&gt; Point = recordtype('Point', 'x y z', default=0)    &gt;&gt;&gt; p = Point(y=3)    &gt;&gt;&gt; assert p.x == 0    &gt;&gt;&gt; assert p.y == 3    &gt;&gt;&gt; assert p.z == 0    &gt;&gt;&gt; Point = recordtype('Point', [('x', 0), 'y', ('z', 0)], default=4)    &gt;&gt;&gt; p = Point(z=2)    &gt;&gt;&gt; assert p.x == 0    &gt;&gt;&gt; assert p.y == 4    &gt;&gt;&gt; assert p.z == 2In addition to supplying the field names as an iterable of 2-tuples,you can also specify a mapping. The keys will be the field names, andthe values will be the per-field default values. This is most usefulwith an OrderedDict, as the order of the fields will then bedeterministic.  The module variable NO_DEFAULT can be specified if youwant a field to use the per-type default value instead of specifyingit with a field::    &gt;&gt;&gt; Point = recordtype('Point', OrderedDict((('x', 0),    ...                                          ('y', NO_DEFAULT),    ...                                          ('z', 0),    ...                                          )),    ...                             default=4)    &gt;&gt;&gt; p = Point(z=2)    &gt;&gt;&gt; assert p.x == 0    &gt;&gt;&gt; assert p.y == 4    &gt;&gt;&gt; assert p.z == 2Writing to values-----------------The objects retured by the factory function are fully writable, unlikethe tuple-derived classes returned by namedtuple::    &gt;&gt;&gt; Point = recordtype('Point', 'x y')    &gt;&gt;&gt; p = Point(1, 2)    &gt;&gt;&gt; p.y = 4    &gt;&gt;&gt; assert p.x == 1    &gt;&gt;&gt; assert p.y == 4Specifying __slots__--------------------By default, the returned class sets __slots__, which is initialized tothe field names. While this decreases memory usage by eliminating theinstance dict, it also means that you cannot create new instancemembers.To change this behavior, specify use_slots=False when creating therecordtype::    &gt;&gt;&gt; Point = recordtype('Point', 'x y', use_slots=False)    &gt;&gt;&gt; p = Point(0, 1)    &gt;&gt;&gt; p.z = 2    &gt;&gt;&gt; assert p.x == 0    &gt;&gt;&gt; assert p.y == 1    &gt;&gt;&gt; assert p.z == 2Additional class members------------------------recordtype classes contain these members:* _asdict(): Returns a dict which maps field names to their  corresponding values.* _source: A string with the pure Python source code used to create  the recordtype class. The source makes the recordtype  self-documenting. It can be printed, executed using exec(), or saved  to a file and imported.* _fields: Tuple of strings listing the field names. Useful for introspection.Renaming invalid field names----------------------------This functionality is identical to namedtuple. If you specifyrename=True, then any invalid field names are changed to _0, _1,etc. Reasons for a field name to be invalid are:* Zero length strings.* Containing characters other than alphanumerics and underscores.* A conflict with a Python reserved identifier.* Beginning with a digit.* Beginning with an underscore.* Using the same field name more than once.For example::    &gt;&gt;&gt; Point = recordtype('Point', 'x x for', rename=True)    &gt;&gt;&gt; assert Point._fields == ('x', '_1', '_2')Mutable default values----------------------Be aware of creating mutable default values. Due to the way Pythonhandles default values, each instance of a recordtype will share thedefault. This is especially problematic with default values that arelists. For example::    &gt;&gt;&gt; A = recordtype('A', [('x', [])])    &gt;&gt;&gt; a = A()    &gt;&gt;&gt; a.x.append(4)    &gt;&gt;&gt; b = A()    &gt;&gt;&gt; assert b.x == [4]This is probably not the desired behavior.Creating and using instances============================Because the type returned by recordtype is a normal Python class, youcreate instances as you would with any Python class.Change log==========1.4 2022-09-22 Eric V. Smith----------------------------* For Python 3.10 compatibility, try to import collections.abc.Mapping.* Reformat with black.1.3 2018-08-03 Eric V. Smith----------------------------* Python 3 support (thanks Jakob Stasiak).* Reformat with black.1.2 &lt;unreleased&gt; Eric V. Smith------------------------------* Switch README.txt to support doctest.* Add tests for mutable default values.* Add warning for mutable default values.1.1 2011-11-14 Eric V. Smith----------------------------* No API or code changes.* Fixed project URL in setup.py.* Fixed license description in setup.py.1.0 2011-10-23 Eric V. Smith----------------------------* Stabilize API, move to version 1.0.* Added &quot;python setup.py test&quot; support to run unittests.* Improve documentation examples.* Renamed &quot;default_default&quot; to just &quot;default&quot;.* Expose &quot;NO_DEFAULT&quot;.* Support mapping objects in addition to strings and lists for field_names.* Add tests for iterables, not just lists, for field_names.0.2 2011-10-13 Eric V. Smith----------------------------* Fix a typo in the documentation, no code changes.0.1 2011-10-12 Eric V. Smith----------------------------* Initial release.</longdescription>
</pkgmetadata>