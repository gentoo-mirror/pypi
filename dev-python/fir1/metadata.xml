<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====Fir1====An efficient Finite Impulse Response (FIR) filter classwritten in C++ with python wrapper.Adaptive filtering is also implemented using the Least Mean Square (LMS) or Normalised Least MeanSquare (NLMS) algorithm.Installation============Install the python package with pip::    pip3 install fir1You can also install from source::    git clone https://github.com/berndporr/fir1    cd fir1    python3 setup.py installUsage=====Realtime filtering------------------The filter is a realtime filter which receives samplesone by one so it can process data as it arrives froman ADC converter. This is simulated here with the for loop::    import fir1    b = signal.firwin(999,0.1)    f = fir1.Fir1(b)    for i in range(len(noisy_signal)):        clean_signal[i] = f.filter(noisy_signal[i])The constructor ``Fir1()`` receives the filter coefficients (= impulse response) and then filtering is performed with the method ``filter()``.LMS adaptive filter-------------------The file `lms_50Hz_ecg_filter.py` removes 50Hz from an ECG with the help of the lms filter. The filter learns its own frequency response from areference 50Hz sine wave::    f = fir1.Fir1(NTAPS)    f.setLearningRate(LEARNING_RATE);    y= np.empty(len(ecg))    for i in range(len(ecg)):        ref_noise = np.sin(2.0 * np.pi / 20.0 * i);        canceller = f.filter(ref_noise)        output_signal = ecg[i] - canceller        f.lms_update(output_signal)        y[i] = output_signalYou can query the filter coefficients using getCoeff.This is most useful to obtain the kernel of a trainedadaptive filter::        &gt;&gt;&gt; from fir1 import Fir1        &gt;&gt;&gt; fir = Fir1([.25, -.5, 1, -.5, .25])        &gt;&gt;&gt; fir.getCoeff()        array([ 0.25, -0.5 ,  1.  , -0.5 ,  0.25])You may override the length of array to return andthe result will be zero-padded. Specifying too small an arraycauses an exception to be raised::        &gt;&gt;&gt; fir.getCoeff(8)        array([ 0.25, -0.5 ,  1.  , -0.5 ,  0.25,  0.  ,  0.  ,  0.  ])        &gt;&gt;&gt; fir.getCoeff(3)        Traceback (most recent call last):        File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;        File &quot;.../fir1.py&quot;, line 97, in getCoeff        return _fir1.Fir1_getCoeff(self, *args)        RuntimeError: Fir1: target of getCoeff: too many weights to copy into targetBoth the demo file and an explanation how the LMSfilter works can be found on the homepage of theproject:https://github.com/berndporr/fir1</longdescription>
</pkgmetadata>