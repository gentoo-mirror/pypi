<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/scan-build.svg       :target: https://pypi.python.org/pypi/scan-build.. image:: https://img.shields.io/pypi/l/scan-build.svg       :target: https://pypi.python.org/pypi/scan-build.. image:: https://img.shields.io/pypi/dm/scan-build.svg       :target: https://pypi.python.org/pypi/scan-build.. image:: https://img.shields.io/pypi/pyversions/scan-build.svg       :target: https://pypi.python.org/pypi/scan-build.. image:: https://badges.gitter.im/rizsotto/scan-build.svg        :target: https://gitter.im/rizsotto/scan-build?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badgescan-build==========A package designed to wrap a build so that all calls to gcc/clang areintercepted and logged into a `compilation database`_ and/or piped tothe clang static analyzer. Includes intercept-build tool, which logsthe build, as well as scan-build tool, which logs the build and runsthe clang static analyzer on it.How to get----------It's available from `the Python Package Index`_ ::    $ pip install scan-buildPortability-----------Should be working on UNIX operating systems.- It has been tested on FreeBSD, GNU/Linux, OS X and Windows.Prerequisites-------------1. **clang compiler**, to compile the sources and have the static analyzer.2. **python** interpreter (version 3.6, 3.7, 3.8, 3.9).How to use----------To run the Clang static analyzer against a project goes like this::    $ scan-build &lt;your build command&gt;To generate a compilation database file goes like this::    $ intercept-build &lt;your build command&gt;To run the Clang static analyzer against a project with compilation databasegoes like this::    $ analyze-buildUse ``--help`` to know more about the commands.Limitations-----------Generally speaking, the ``intercept-build`` and ``analyze-build`` toolstogether does the same job as ``scan-build`` does. So, you can expect thesame output from this line as simple ``scan-build`` would do::    $ intercept-build &lt;your build command&gt; &amp;&amp; analyze-buildThe major difference is how and when the analyzer is run. The ``scan-build``tool has three distinct model to run the analyzer:1.  Use compiler wrappers to make actions.    The compiler wrappers does run the real compiler and the analyzer.    This is the default behaviour, can be enforced with ``--override-compiler``    flag.2.  Use special library to intercept compiler calls during the build process.    The analyzer run against each modules after the build finished.    Use ``--intercept-first`` flag to get this model.3.  Use compiler wrappers to intercept compiler calls during the build process.    The analyzer run against each modules after the build finished.    Use ``--intercept-first`` and ``--override-compiler`` flags together to get    this model.The 1. and 3. are using compiler wrappers, which works only if the buildprocess respects the ``CC`` and ``CXX`` environment variables. (Some buildprocess can override these variable as command line parameter only. This caseyou need to pass the compiler wrappers manually. eg.: ``intercept-build--override-compiler make CC=intercept-cc CXX=intercept-c++ all`` where theoriginal build command would have been ``make all`` only.)The 1. runs the analyzer right after the real compilation. So, if the buildprocess removes removes intermediate modules (generated sources) the analyzeroutput still kept.The 2. and 3. generate the compilation database first, and filters out thosemodules which are not exists. So, it's suitable for incremental analysis duringthe development.The 2. mode is available only on FreeBSD, Linux and OSX. Where library preloadis available from the dynamic loader. Security extension/modes on differentoperating systems might disable library preload. This case the build behavesnormally, but the result compilation database will be empty. (Notable examplesfor enabled security modes are: SIP on OS X Captain and SELinux on Fedora,RHEL and CentOS.) The program checks the security modes for SIP, and fallsback to 3. mode.``intercept-build`` command uses only the 2. and 3. mode to generate thecompilation database. ``analyze-build`` does only run the analyzer against thecaptured compiler calls.Known problems--------------Because it uses ``LD_PRELOAD`` or ``DYLD_INSERT_LIBRARIES`` environment variables,it does not append to it, but overrides it. So builds which are using thesevariables might not work. (I don't know any build tool which does that, butplease let me know if you do.)Problem reports---------------If you find a bug in this documentation or elsewhere in the program or wouldlike to propose an improvement, please use the project's `issue tracker`_.Please describing the bug and where you found it. If you have a suggestionhow to fix it, include that as well. Patches are also welcome.License-------The project is licensed under University of Illinois/NCSA Open Source License.See LICENSE.TXT for details... _compilation database: http://clang.llvm.org/docs/JSONCompilationDatabase.html.. _the Python Package Index: https://pypi.python.org/pypi/scan-build.. _issue tracker: https://github.com/rizsotto/scan-build/issues</longdescription>
</pkgmetadata>