<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CollectionA utility data structure for python! This enpowers the power of dicts to the next level!&lt;br/&gt;This module is inspired from discordjs collections## Links- [GitHub](https://github.com/Scientific-Guy/python-collection)- [Discord Support Server](https://discord.gg/FrduEZd)# Usage```pyfrom Collection import Collectionmycol = Collection()mycol.set('key', 'value')print(mycol.get('key')) # Prints 'value'!```# Properties```pycol.dict # The data stored in dictcol.size # The size of the dict len(self.dict)col.keys # Returns the array of keys of dictcol.values # Returns the array of values of dictcol.items # Returns the items of values of dict [(key, value), ...]```# Basic methods```pycol.set(key, value) # Sets a value to the dictcol.get(key) # Returns the value of the key, if no value then returns Nonecol.clear() # Similar to dict.clear()col.has(key) # Returns a boolean wheater the key has its value!```# Utility methods```pycol.first() # Returns the first value of the dictcol.first(2) # Returns the array of values of the dict from first to secondcol.last() # Returns the last value of the dict col.last(2) # Returns the array of values of the dict from last to second lastcol.random() # Returns a random value of the dictcol.random(2) # Returns a array of 2 random values of dict # Similar to the above functions there are methods to get the keys of itcol.firstkey() # Returns the first key of the dictcol.firstkey(2) # Returns the array of keys of the dict from first to secondcol.lastkey() # Returns the last key of the dict col.lastkey(2) # Returns the array of keys of the dict from last to second lastcol.randomkey() # Returns a random key of the dictcol.randomkey(2) # Returns a array of 2 random keys of dict ```# Extending a CollectionExtend the collection```pycol1 = Collection()col2 = Collection()col1.set('key', 'value')col2.extend(col1)print(col2.get('key')) # Will return value```Will work with dicts too```pycol = Collection()col.extend({ 'key': 'value' })print(col.get('key')) # Will return value```# CloningWill return a duplicate collection of the current collection```pyprint(col.clone())```# To a objectConvert the collection dict to object```pycol = Collection()col.set('key', 'value')obj = col.to_object()print(obj.key) # Returns value```# List methods### FindFind an item in the items of dict```pydef find(key, value):    return key == 'key'print(col.find(find)) # Returns an item (key, value)```### SomeVerifies if the callback satisfies any of the items in the dict```pydef some(key, value):    return key == 'key'print(col.some(some)) # Returns boolean stating the existence of the key which satisfies the callback```### FindFind an item in the items of dict```pydef find(key, value):    return key == 'key'print(col.find(find)) # Returns an item (key, value)```### FindManyFind array of items which satisfies the callback```pydef findmany(key, value):    return key == 'key'print(col.findmany(findmany)) # Returns an array of items (key, value)```### SweepRemoves the item of the dict which satisfies the callback```pydef sweep(key, value):    return key == 'key'print(col.sweep(sweep)) # Returns nothing```### FilterSimilar to sweep but instead returns a new duplicate collection and filters it```pydef sweep(key, value):    return key == 'key'print(col.sweep(sweep)) # Returns a new collection```### SweepRemoves the item of the dict which satisfies the callback```pydef sweep(key, value):    return key == 'key'print(col.sweep(sweep)) # Returns an item (key, value)```### MapsMaps the values of the dict and returns a duplicate collection```pycol.set(1, 5) # Current value = { 1: 5 }def map(key, value):    return value + 1print(col.map(map)) # Returns an collection# Collection with value { 1: 6 }```### ForEachWill run the function on each item```pydef foreach(key, value):    print(key)print(col.foreach(foreach)) # Returns an item (key, value)```### ConcatWill return a duplicate collection by concatting the both collection```pycol1 = Collection()col2 = Collection()col1.set('key', 'value')print(col2.concat(col1)) # Will return value```Will work with dicts too```pycol = Collection()print(col.extend({ 'key': 'value' })) # Will print value```</longdescription>
</pkgmetadata>