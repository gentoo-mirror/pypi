<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SOPS: Secrets OPerationS========================.. image:: http://unmaintained.tech/badge.svg   :target: http://unmaintained.tech/   :alt: No Maintenance IntendedThis is the Python version of SOPS that is no longer maintained. We fix the occasional bug, but all improvements happen in the Go version of SOPS, over in the Master branch. You have been warned!**sop** is an editor of encrypted files that supports YAML, JSON and BINARY formats and encrypts with AWS KMS and PGP (via GnuPG). Watch `the demo &lt;https://www.youtube.com/watch?v=YTEVyLXFiq0&gt;`_... image:: http://i.imgur.com/IL6dlhm.gif.. image:: https://travis-ci.org/mozilla/sops.svg?branch=master:target: https://travis-ci.org/mozilla/sops**Questions?** ping &quot;ulfr&quot; in `#security` on `irc.mozilla.org &lt;https://wiki.mozilla.org/IRC&gt;`_(use a web client like `mibbit &lt;https://chat.mibbit.com&gt;`_ )... sectnum::.. contents:: Table of ContentsInstallation------------* RHEL family::sudo yum install gcc git libffi-devel libyaml-devel make openssl openssl-devel python-devel python-pipsudo pip install --upgrade sops* Debian family::sudo apt-get install gcc git libffi-dev libssl-dev libyaml-dev make openssl python-dev python-pipsudo pip install --upgrade sops* MacOS Brew Install::brew install sops* MacOS Manual Install::brew install libffi libyaml python [1]pip install sops1. http://docs.python-guide.org/en/latest/starting/install/osx/#doing-it-rightIn a virtualenv~~~~~~~~~~~~~~~Assuming you already have libffi and libyaml installed, the following commands will install sops in a virtualenv:.. code:: bash    $ sudo pip install virtualenv --upgrade    $ virtualenv ~/sopsvenv    $ source ~/sopsvenv/bin/activate    $ pip install -U sops    $ sops -v    sops 1.9Test with the dev PGP key~~~~~~~~~~~~~~~~~~~~~~~~~Clone the repository, load the test PGP key and open the test files::$ git clone https://github.com/mozilla/sops.git$ cd sops$ gpg --import tests/sops_functional_tests_key.asc$ sops example.yamlThis last step will decrypt `example.yaml` using the test private key. To createyour own secrets files using keys under your control, keep reading.Usage-----If you're using AWS KMS, create one or multiple master keys in the IAM consoleand export them, comma separated, in the **SOPS_KMS_ARN** env variable. It isrecommended to use at least two master keys in different regions... code:: bashexport SOPS_KMS_ARN=&quot;arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e,arn:aws:kms:ap-southeast-1:656532927350:key/9006a8aa-0fa6-4c14-930e-a2dfb916de1d&quot;Your AWS credentials must be present in `~/.aws/credentials`. sops uses boto3... code::$ cat ~/.aws/credentials[default]aws_access_key_id = AKI.....aws_secret_access_key = mw......If you want to use PGP, export the fingerprints of the public keys, commaseparated, in the **SOPS_PGP_FP** env variable... code:: bashexport SOPS_PGP_FP=&quot;85D77543B3D624B63CEA9E6DBC17301B491B3F21,E60892BB9BD89A69F759A1A0A3D652173B763E8F&quot;Note: you can use both PGP and KMS simultaneously.Then simply call `sops` with a file path as argument. It will handle theencryption/decryption transparently and open the cleartext file in an editor.. code:: bash$ sops mynewtestfile.yamlmynewtestfile.yaml doesn't exist, creating it.please wait while an encryption key is being generated and stored in a secure fashionfile written to mynewtestfile.yaml.Editing will happen in whatever $EDITOR is set to, or, if it's not set, in vim.Keep in mind that sops will wait for the editor to exit, and then try to reencryptthe file. Some GUI editors (atom, sublime) spawn a child process and then exitimmediately. They usually have an option to wait for the main editor window to beclosed before exiting. See [#127](https://github.com/mozilla/sops/issues/127) formore information.The resulting encrypted file looks like this:.. code:: yaml    myapp1: ENC[AES256_GCM,data:Tr7o=,iv:1=,aad:No=,tag:k=]    app2:        db:            user: ENC[AES256_GCM,data:CwE4O1s=,iv:2k=,aad:o=,tag:w==]            password: ENC[AES256_GCM,data:p673w==,iv:YY=,aad:UQ=,tag:A=]        # private key for secret operations in app2        key: |-            ENC[AES256_GCM,data:Ea3kL5O5U8=,iv:DM=,aad:FKA=,tag:EA==]    an_array:    - ENC[AES256_GCM,data:v8jQ=,iv:HBE=,aad:21c=,tag:gA==]    - ENC[AES256_GCM,data:X10=,iv:o8=,aad:CQ=,tag:Hw==]    - ENC[AES256_GCM,data:KN=,iv:160=,aad:fI4=,tag:tNw==]    sops:        kms:        -   created_at: 1441570389.775376            enc: CiC....Pm1Hm            arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e        -   created_at: 1441570391.925734            enc: Ci...awNx            arn: arn:aws:kms:ap-southeast-1:656532927350:key/9006a8aa-0fa6-4c14-930e-a2dfb916de1d        pgp:        -   fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21            created_at: 1441570391.930042            enc: |                -----BEGIN PGP MESSAGE-----                hQIMA0t4uZHfl9qgAQ//UvGAwGePyHuf2/zayWcloGaDs0MzI+zw6CmXvMRNPUsA...=oJgS                -----END PGP MESSAGE-----A copy of the encryption/decryption key is stored securely in each KMS and PGPblock. As long as one of the KMS or PGP method is still usable, you will be ableto access your data.To decrypt a file in a `cat` fashion, use the `-d` flag:.. code:: bash$ sops -d mynewtestfile.yaml`sops` encrypted files contain the necessary information to decrypt their content.All a user of `sops` needs is valid AWS credentials and the necessarypermissions on KMS keys.Given that, the only command a `sops` user needs is:.. code:: bash$ sops &lt;file&gt;`&lt;file&gt;` will be opened, decrypted, passed to a text editor (vim by default),encrypted if modified, and saved back to its original location. All of thesesteps, apart from the actual editing, are transparent to the user.Adding and removing keys~~~~~~~~~~~~~~~~~~~~~~~~When creating new files, `sops` uses the PGP and KMS defined in the commandline arguments `--kms` and `--pgp`, or from the environment variables`SOPS_KMS_ARN` and `SOPS_PGP_FP`. That information is stored in the file underthe `sops` section, such that decrypting files does not require providing thoseparameters again.Master PGP and KMS keys can be added and removed from a `sops` file in one oftwo ways: by using command line flag, or by editing the file directly.Command line flag `--add-kms`, `--add-pgp`, `--rm-kms` and `--rm-pgp` can beused to add and remove keys from a file. These flags use the comma separatedsyntax as the `--kms` and `--pgp` arguments when creating new files... code:: bash# add a new pgp key to the file and rotate the data key$ sops -r --add-pgp 85D77543B3D624B63CEA9E6DBC17301B491B3F21 example.yaml# remove a pgp key from the file and rotate the data key$ sops -r --rm-pgp 85D77543B3D624B63CEA9E6DBC17301B491B3F21 example.yamlAlternatively, invoking `sops` with the flag **-s** will display the master keyswhile editing. This method can be used to add or remove kms or pgp keys under thesops section.For example, to add a KMS master key to a file, add the following entry whileediting:.. code:: yamlsops:    kms:    - arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27eAnd, similarly, to add a PGP master key, we add its fingerprint:.. code:: yamlsops:    pgp:    - fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21When the file is saved, `sops` will update its metadata and encrypt the data keywith the freshly added master keys. The removed entries are simply deleted fromthe file.When removing keys, it is recommended to rotate the data key using `-r`,otherwise owners of the removed key may have add access to the data key in thepast.Assuming roles and using KMS in various AWS accounts~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~SOPS has the ability to use KMS in multiple AWS accounts by assuming roles ineach account. Being able to assume roles is a nice feature of AWS that allowsadministrators to establish trust relationships between accounts, typically fromthe most secure account to the least secure one. In our use-case, we use rolesto indicate that a user of the Master AWS account is allowed to make use of KMSmaster keys in development and staging AWS accounts. Using roles, a single filecan be encrypted with KMS keys in multiple accounts, thus increasing reliabilityand ease of use.You can use keys in various accounts by tying each KMS master key to a role thatthe user is allowed to assume in each account. The `IAM roles&lt;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html&gt;`_documentation has full details on how this needs to be configured on AWS's side.From the point of view of `sops`, you only need to specify the role a KMS keymust assume alongside its ARN, as follows:.. code:: yamlsops:    kms:    -arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e        role: arn:aws:iam::927034868273:role/sops-dev-xyzThe role must have permission to call Encrypt and Decrypt using KMS. An examplepolicy is shown below... code:: json{  &quot;Sid&quot;: &quot;Allow use of the key&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Action&quot;: [&quot;kms:Encrypt&quot;,&quot;kms:Decrypt&quot;,&quot;kms:ReEncrypt*&quot;,&quot;kms:GenerateDataKey*&quot;,&quot;kms:DescribeKey&quot;  ],  &quot;Resource&quot;: &quot;*&quot;,  &quot;Principal&quot;: {&quot;AWS&quot;: [  &quot;arn:aws:iam::927034868273:role/sops-dev-xyz&quot;]  }}You can specify a role in the `--kms` flag and `SOPS_KMS_ARN` variable byappending it to the ARN of the master key, separated by a **+** sign::&lt;KMS ARN&gt;+&lt;ROLE ARN&gt;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500+arn:aws:iam::927034868273:role/sops-dev-xyzAWS KMS Encryption Context~~~~~~~~~~~~~~~~~~~~~~~~~~SOPS has the ability to use AWS KMS key policy and encryption context&lt;http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html&gt;to refine the access control of a given KMS master key.When creating a new file, you can specify encryption context in the`--encryption-context` flag by comma separated list of key-value pairs:When creating a new file, you can specify encryption context in the`--encryption-context` flag by comma separated list of key-value pairs:.. code:: bash$ sops --encryption-context Environment:production,Role:web-server test.dev.yamlThe format of the Encrypt Context string is `&lt;EncryptionContext Key&gt;:&lt;EncryptionContext Value&gt;,&lt;EncryptionContext Key&gt;:&lt;EncryptionContext Value&gt;,...`The encryption context will be stored in the file metadata and doesnot need to be provided at decryption.Encryption contexts can be used in conjunction with KMS Key Policies to defineroles that can only access a given context. An example policy is shown below:.. code:: json    {      &quot;Effect&quot;: &quot;Allow&quot;,      &quot;Principal&quot;: {        &quot;AWS&quot;: &quot;arn:aws:iam::111122223333:role/RoleForExampleApp&quot;      },      &quot;Action&quot;: &quot;kms:Decrypt&quot;,      &quot;Resource&quot;: &quot;*&quot;,      &quot;Condition&quot;: {        &quot;StringEquals&quot;: {          &quot;kms:EncryptionContext:AppName&quot;: &quot;ExampleApp&quot;,          &quot;kms:EncryptionContext:FilePath&quot;: &quot;/var/opt/secrets/&quot;        }      }    }Key Rotation~~~~~~~~~~~~It is recommended to renew the data key on a regular basis. `sops` supports keyrotation via the `-r` flag. Invoking it on an existing file causes sops toreencrypt the file with a new data key, which is then encrypted with the variousKMS and PGP master keys defined in the file... code:: bashsops -r example.yamlUsing .sops.yaml conf to select KMS/PGP for new files~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~It is often tedious to specify the `--kms` and `--pgp` parameters for creationof all new files. If your secrets are stored under a specific directory, like a`git` repository, you can create a `.sops.yaml` configuration file at the rootdirectory to define which keys are used for which filename.Let's take an example:* file named **something.dev.yaml** should use one set of KMS A* file named **something.prod.yaml** should use another set of KMS B* other files use a third set of KMS C* all live under **mysecretrepo/something.{dev,prod}.yaml**Under those circumstances, a file placed at **mysecretrepo/.sops.yaml**can manage the three sets of configurations for the three types of files:.. code:: yaml# creation rules are evaluated sequentially, the first match winscreation_rules:# upon creation of a file that matches the pattern *.dev.yaml,# KMS set A is used- filename_regex: \.dev\.yaml$  kms: 'arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod'  pgp: '1022470DE3F0BC54BC6AB62DE05550BC07FB1A0A'# prod files use KMS set B in the PROD IAM- filename_regex: \.prod\.yaml$  kms: 'arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod,arn:aws:kms:eu-central-1:361527076523:key/cb1fab90-8d17-42a1-a9d8-334968904f94+arn:aws:iam::361527076523:role/hiera-sops-prod'  pgp: '1022470DE3F0BC54BC6AB62DE05550BC07FB1A0A'# Finally, if the rules above have not matched, this one is a# catchall that will encrypt the file using KMS set C# The absence of a filename_regex means it will match everything- kms: 'arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:142069644989:key/846cfb17-373d-49b9-8baf-f36b04512e47,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e'  pgp: '1022470DE3F0BC54BC6AB62DE05550BC07FB1A0A'When creating any file under **mysecretrepo**, whether at the root or undera subdirectory, sops will recursively look for a `.sops.yaml` file. If one isfound, the filename of the file being created is compared with the filenameregexes of the configuration file. The first regex that matches is selected,and its KMS and PGP keys are used to encrypt the file.Creating a new file with the right keys is now as simple as.. code:: bash$ sops &lt;newfile&gt;.prod.yamlNote that the configuration file is ignored when KMS or PGP parameters arepassed on the sops command line or in environment variables.Specify a different GPG executable~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`sops` checks for the `SOPS_GPG_EXEC` environment variable. If specified, it will attempt to use the executable set there instead of the default of `gpg`.Example: place the following in your `~/.bashrc`.. code:: bashSOPS_GPG_EXEC = 'your_gpg_client_wrapper'Important information on types------------------------------YAML and JSON type extensions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`sops` uses the file extension to decide which encryption method to use on the filecontent. `YAML` and `JSON` files are treated as trees of data, and key/values areextracted from the files to only encrypt the leaf values. The tree structure is alsoused to check the integrity of the file.Therefore, if a file is encrypted using a specific format, it need to be decryptedin the same format. The easiest way to achieve this is to conserve the original fileextension after encrypting a file. For example::$ sops -e -i myfile.json$ sops -d myfile.jsonIf you want to change the extension of the file once encrypted, you need to providesops with the `--input-type` flag upon decryption. For example::$ sops -e myfile.json &gt; myfile.json.enc$ sops -d --input-type json myfile.json.encYAML anchors~~~~~~~~~~~~`sops` only supports a subset of `YAML`'s many types. Encrypting YAML files thatcontain strings, numbers and booleans will work fine, but files that contain anchorswill not work, because the anchors redefine the structure of the file at load time.This file will not work in `sops`:.. code:: yamlbill-to:  &amp;id001    street: |        123 Tornado Alley        Suite 16    city:   East Centerville    state:  KSship-to:  *id001`sops` uses the path to a value as additional data in the AEAD encryption, and thusdynamic paths generated by anchors break the authentication step.JSON and TEXT file types do not support anchors and thus have no such limitation.Top-level arrays~~~~~~~~~~~~~~~~`YAML` and `JSON` top-level arrays are not supported, because `sops` needs a top-level`sops` key to store its metadata.This file will not work in sops:.. code:: yaml---  - some  - array  - elementsBut this one will because because the `sops` key can be added at the same level as the`data` key... code:: yamldata:  - some  - array  - elementsSimilarly, with `JSON` arrays, this document will not work:.. code:: json[  &quot;some&quot;,  &quot;array&quot;,  &quot;elements&quot;]But this one will work just fine:.. code:: json{  &quot;data&quot;: [    &quot;some&quot;,    &quot;array&quot;,    &quot;elements&quot;  ]}Examples--------Take a look into the `examples &lt;https://github.com/mozilla/sops/tree/master/examples&gt;`_ folder for detailed use cases of sops in a CI environment. The section below describes specific tips for common use cases.Creating a new file~~~~~~~~~~~~~~~~~~~The command below creates a new file with a data key encrypted by KMS and PGP... code:: bash$ sops --kms &quot;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500&quot; --pgp C9CAB0AF1165060DB58D6D6B2653B624D620786D /path/to/new/file.yamlEncrypting an existing file~~~~~~~~~~~~~~~~~~~~~~~~~~~Similar to the previous command, we tell sops to use one KMS and one PGP key.The path points to an existing cleartext file, so we give sops flag `-e` toencrypt the file, and redirect the output to a destination file... code:: bash$ export SOPS_KMS_ARN=&quot;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500&quot;$ export SOPS_PGP_FP=&quot;C9CAB0AF1165060DB58D6D6B2653B624D620786D&quot;$ sops -e /path/to/existing/file.yaml &gt; /path/to/new/encrypted/file.yamlDecrypt the file with `-d`... code:: bash$ sops -d /path/to/new/encrypted/file.yamlEncrypt or decrypt a file in place~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rather than redirecting the output of `-e` or `-d`, sops can replace theoriginal file after encrypting or decrypting it... code:: bash# file.yaml is in cleartext$ sops -e -i /path/to/existing/file.yaml# file.yaml is now encrypted$ sops -d -i /path/to/existing/file.yaml# file.yaml is back in cleartextEncrypting binary files~~~~~~~~~~~~~~~~~~~~~~~`sops` primary use case is encrypting YAML and JSON configuration files, but italso has the ability to manage binary files. When encrypting a binary, sops willread the data as bytes, encrypt it, store the encrypted base64 under`tree['data']` and write the result as JSON.Note that the base64 encoding of encrypted data can actually make the encryptedfile larger than the cleartext one.In-place encryption/decryption also works on binary files... code::$ dd if=/dev/urandom of=/tmp/somerandom bs=1024count=512512+0 records in512+0 records out524288 bytes (524 kB) copied, 0.0466158 s, 11.2 MB/s$ sha512sum /tmp/somerandom9589bb20280e9d381f7a192000498c994e921b3cdb11d2ef5a986578dc2239a340b25ef30691bac72bdb14028270828dad7e8bd31e274af9828c40d216e60cbe /tmp/somerandom$ sops -e -i /tmp/somerandomplease wait while a data encryption key is being generated and stored securely$ sops -d -i /tmp/somerandom$ sha512sum /tmp/somerandom9589bb20280e9d381f7a192000498c994e921b3cdb11d2ef5a986578dc2239a340b25ef30691bac72bdb14028270828dad7e8bd31e274af9828c40d216e60cbe /tmp/somerandomExtract a sub-part of a document tree~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`sops` can extract a specific part of a YAML or JSON document, by provided thepath in the `--extract` command line flag. This is useful to extract specificvalues, like keys, without needing an extra parser... code:: bash$ sops -d ~/git/svc/sops/example.yaml --extract '[&quot;app2&quot;][&quot;key&quot;]'-----BEGIN RSA PRIVATE KEY-----MIIBPAIBAAJBAPTMNIyHuZtpLYc7VsHQtwOkWYobkUblmHWRmbXzlAX6K8tMf3WfImcbNkqAKnELzFAPSBeEMhrBN0PyOC9lYlMCAwEAAQJBALXD4sjuBn1E7Y9aGiMzbJEBuZJ4wbhYxomVoQKfaCu+kH80uLFZKoSz85/ySauWE8LgZcMLIBoiXNhDKfQLvHECIQD6tCG9NMFWor69kgbX8vK5Y+QL+kRq+9HK6yZ9a+hsLQIhAPn4Ie6HGTjwfHSTXWZpGSan7NwTkIu4U5q2SlLjcZh/AiEA78NYRRBwGwAYNUqzutGBqyXKUl4uErb0xAEyVV7e8J0CIQC8VBY8f8yg+Y7Kxbw4zDYGyb3KkXL10YorpeuZR4LuQQIgbKGPkMM4w5blyE1tqGN0T7sJwEx+EUOgacRNqM2ljVA=-----END RSA PRIVATE KEY-----The tree path syntax uses regular python dictionary syntax, without thevariable name. Extract keys by naming them, and array elements by numberingthem... code:: bash$ sops -d ~/git/svc/sops/example.yaml --extract '[&quot;an_array&quot;][1]'secretuser2Set a sub-part in a document tree~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`sops` can set a specific part of a YAML or JSON document, by providingthe path and value in the `--set` command line flag. This is useful toset specific values, like keys, without needing an editor... code:: bash$ sops ~/git/svc/sops/example.yaml --set '[&quot;app2&quot;][&quot;key&quot;]' '&quot;app2keystringvalue&quot;'The tree path syntax uses regular python dictionary syntax, without thevariable name. Set to keys by naming them, and array elements bynumbering them... code:: bash$ sops ~/git/svc/sops/example.yaml --set '[&quot;an_array&quot;][1]' '&quot;secretuser2&quot;'The value must be formatted as json... code:: bash$ sops ~/git/svc/sops/example.yaml --set '[&quot;an_array&quot;][1]' '{&quot;uid1&quot;:null,&quot;uid2&quot;:1000,&quot;uid3&quot;:[&quot;bob&quot;]}'Using sops as a library in a python script~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can import sops as a module and use it in your python program... code:: pythonimport sopspathtype = sops.detect_filetype(path)tree = sops.load_file_into_tree(path, pathtype)sops_key, tree = sops.get_key(tree)tree = sops.walk_and_decrypt(tree, sops_key)sops.write_file(tree, path=path, filetype=pathtype)Showing diffs in cleartext in git~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You most likely want to store encrypted files in a version controlled repository.Sops can be used with git to decrypt files when showing diffs between versions.This is very handy for reviewing changes or visualizing history.To configure sops to decrypt files during diff, create a `.gitattributes` fileat the root of your repository that contains a filter and a command.... code::*.yaml diff=sopsdifferHere we only care about YAML files. `sopsdiffer` is an arbitrary name that we mapto a sops command in the git configuration file of the repository... code:: bash$ git config diff.sopsdiffer.textconv &quot;sops -d&quot;$ grep -A 1 sopsdiffer .git/config[diff &quot;sopsdiffer&quot;]textconv = &quot;sops -d&quot;With this in place, calls to `git diff` will decrypt both previous and currentversions of the target file prior to displaying the diff. And it even works withgit client interfaces, because they call git diff under the hood!Encrypting only parts of a file~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Note: this only works on YAML and JSON files, not on BINARY files.By default, `sops` encrypts all the values of a YAML or JSON file and leaves thekeys in cleartext. In some instances, you may want to exclude some values frombeing encrypted. This can be accomplished by adding the suffix **_unencrypted**to any key of a file. When set, all values underneath the key that set the**_unencrypted** prefix will be left in cleartext.Note that, while in cleartext, unencrypted content is still added to thechecksum of the file, and thus cannot be modified outside of sops withoutbreaking the file integrity check.The unencrypted suffix can be set to a different value using the`--unencrypted-suffix` option.Encryption Protocol-------------------When sops creates a file, it generates a random 256 bit data key and asks eachKMS and PGP master key to encrypt the data key. The encrypted version of the datakey is stored in the `sops` metadata under `sops.kms` and `sops.pgp`.For KMS:.. code:: yaml    sops:        kms:        -   enc: CiC6yCOtzsnFhkfdIslYZ0bAf//gYLYCmIu87B3sy/5yYxKnAQEBAQB4usgjrc7JxYZH3SLJWGdGwH//4GC2ApiLvOwd7Mv+cmMAAAB+MHwGCSqGSIb3DQEHBqBvMG0CAQAwaAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAyGdRODuYMHbA8Ozj8CARCAO7opMolPJUmBXd39Zlp0L2H9fzMKidHm1vvaF6nNFq0ClRY7FlIZmTm4JfnOebPseffiXFn9tG8cq7oi            enc_ts: 1439568549.245995            arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27eFor PGP:.. code:: yaml    sops:        pgp:        -   fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21            created_at: 1441570391.930042            enc: |                -----BEGIN PGP MESSAGE-----                Version: GnuPG v1                hQIMA0t4uZHfl9qgAQ//UvGAwGePyHuf2/zayWcloGaDs0MzI+zw6CmXvMRNPUsA                pAgRKczJmDu4+XzN+cxX5Iq9xEWIbny9B5rOjwTXT3qcUYZ4Gkzbq4MWkjuPp/Iv                qO4MJaYzoH5YxC4YORQ2LvzhA2YGsCzYnljmatGEUNg01yJ6r5mwFwDxl4Nc80Cn                RwnHuGExK8j1jYJZu/juK1qRbuBOAuruIPPWVdFB845PA7waacG1IdUW3ZtBkOy3                O0BIfG2ekRg0Nik6sTOhDUA+l2bewCcECI8FYCEjwHm9Sg5cxmP2V5m1mby+uKAm                kewaoOyjbmV1Mh3iI1b/AQMr+/6ZE9MT2KnsoWosYamFyjxV5r1ZZM7cWKnOT+tu                KOvGhTV1TeOfVpajNTNwtV/Oyh3mMLQ0F0HgCTqomQVqw5+sj7OWAASuD3CU/dyo                pcmY5Qe0TNL1JsMNEH8LJDqSh+E0hsUxdY1ouVsg3ysf6mdM8ciWb3WRGxih1Vmf                unfLy8Ly3V7ZIC8EHV8aLJqh32jIZV4i2zXIoO4ZBKrudKcECY1C2+zb/TziVAL8                qyPe47q8gi1rIyEv5uirLZjgpP+JkDUgoMnzlX334FZ9pWtQMYW4Y67urAI4xUq6                /q1zBAeHoeeeQK+YKDB7Ak/Y22YsiqQbNp2n4CKSKAE4erZLWVtDvSp+49SWmS/S                XgGi+13MaXIp0ecPKyNTBjF+NOw/I3muyKr8EbDHrd2XgIT06QXqjYLsCb1TZ0zm                xgXsOTY3b+ONQ2zjhcovanDp7/k77B+gFitLYKg4BLZsl7gJB12T8MQnpfSmRT4=                =oJgS                -----END PGP MESSAGE-----sops then opens a text editor on the newly created file. The user adds data to thefile and saves it when done.Upon save, sops browses the entire file as a key/value tree. Every time sopsencounters a leaf value (a value that does not have children), it encrypts thevalue with AES256_GCM using the data key and a 256 bit random initializationvector.Each file uses a single data key to encrypt all values of a document, but eachvalue receives a unique initialization vector and has unique authentication data.Additional data is used to guarantee the integrity of the encrypted dataand of the tree structure: when encrypting the tree, key names are concatenatedinto a byte string that is used as AEAD additional data (aad) when encryptingvalues. We expect that keys do not carry sensitive information, andkeeping them in cleartext allows for better diff and overall readability.Any valid KMS or PGP master key can later decrypt the data key and access thedata.Multiple master keys allow for sharing encrypted files without sharing masterkeys, and provide a disaster recovery solution. The recommended way to use sopsis to have two KMS master keys in different regions and one PGP public key withthe private key stored offline. If, by any chance, both KMS master keys arelost, you can always recover the encrypted data using the PGP private key.Message Authentication Code~~~~~~~~~~~~~~~~~~~~~~~~~~~In addition to authenticating branches of the tree using keys as additionaldata, sops computes a MAC on all the values to ensure that no value has beenadded or removed fraudulently. The MAC is stored encrypted with AES_GCM andthe data key under tree-&gt;`sops`-&gt;`mac`.Motivation----------Automating the distribution of secrets and credentials to components of aninfrastructure is a hard problem. We know how to encrypt secrets and share thembetween humans, but extending that trust to systems is difficult. Particularlywhen these systems follow devops principles and are created and destroyedwithout human intervention. The issue boils down to establishing the initialtrust of a system that just joined the infrastructure, and providing it accessto the secrets it needs to configure itself.The initial trust~~~~~~~~~~~~~~~~~In many infrastructures, even highly dynamic ones, the initial trust isestablished by a human. An example is seen in Puppet by the way certificates areissued: when a new system attempts to join a Puppetmaster, an administratormust, by default, manually approve the issuance of the certificate the systemneeds. This is cumbersome, and many puppetmasters are configured to auto-signnew certificates to work around that issue. This is obviously not recommendedand far from ideal.AWS provides a more flexible approach to trusting new systems. It uses apowerful mechanism of roles and identities. In AWS, it is possible to verifythat a new system has been granted a specific role at creation, and it ispossible to map that role to specific resources. Instead of trusting new systemsdirectly, the administrator trusts the AWS permission model and its automationinfrastructure. As long as AWS keys are safe, and the AWS API is secure, we canassume that trust is maintained and systems are who they say they are.KMS, Trust and secrets distribution~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Using the AWS trust model, we can create fine grained access controls toAmazon's Key Management Service (KMS). KMS is a service that encrypts anddecrypts data with AES_GCM, using keys that are never visible to users of theservice. Each KMS master key has a set of role-based access controls, andindividual roles are permitted to encrypt or decrypt using the master key. KMShelps solve the problem of distributing keys, by shifting it into an accesscontrol problem that can be solved using AWS's trust model.Operational requirements~~~~~~~~~~~~~~~~~~~~~~~~When Mozilla's Services Operations team started revisiting the issue ofdistributing secrets to EC2 instances, we set a goal to store these secretsencrypted until the very last moment, when they need to be decrypted on targetsystems. Not unlike many other organizations that operate sufficiently complexautomation, we found this to be a hard problem with a number of prerequisites:1. Secrets must be stored in YAML files for easy integration into hiera2. Secrets must be stored in GIT, and when a new CloudFormation stack is   built, the current HEAD is pinned to the stack. (This allows secrets to   be changed in GIT without impacting the current stack that may   autoscale).3. Entries must be encrypted separately. Encrypting entire files as blobs makes   git conflict resolution almost impossible. Encrypting each entry   separately is much easier to manage.4. Secrets must always be encrypted on disk (admin laptop, upstream   git repo, jenkins and S3) and only be decrypted on the target   systemsSOPS can be used to encrypt YAML, JSON and BINARY files. In BINARY mode, thecontent of the file is treated as a blob, the same way PGP would encrypt anentire file. In YAML and JSON modes, however, the content of the file ismanipulated as a tree where keys are stored in cleartext, and values areencrypted. hiera-eyaml does something similar, and over the years we learnedto appreciate its benefits, namely:* diffs are meaningful. If a single value of a file is modified, only that  value will show up in the diff. The diff is still limited to only showing  encrypted data, but that information is already more granular that  indicating that an entire file has changed.* conflicts are easier to resolve. If multiple users are working on the  same encrypted files, as long as they don't modify the same values,  changes are easy to merge. This is an improvement over the PGP  encryption approach where unsolvable conflicts often happen when  multiple users work on the same file.OpenPGP integration~~~~~~~~~~~~~~~~~~~OpenPGP gets a lot of bad press for being an outdated crypto protocol, and whiletrue, what really made us look for alternatives is the difficulty of managing anddistributing keys to systems. With KMS, we manage permissions to an API, not keys,and that's a lot easier to do.But PGP is not dead yet, and we still rely on it heavily as a backup solution:all our files are encrypted with KMS and with one PGP public key, with itsprivate key stored securely for emergency decryption in the event that we loseall our KMS master keys.SOPS can be used without KMS entirely, the same way you would use an encryptedPGP file: by referencing the pubkeys of each individual who has access to the file.It can easily be done by providing sops with a comma-separated list of public keyswhen creating a new file:.. code:: bash$ sops --pgp &quot;E60892BB9BD89A69F759A1A0A3D652173B763E8F,84050F1D61AF7C230A12217687DF65059EF093D3,85D77543B3D624B63CEA9E6DBC17301B491B3F21&quot; mynewfile.yamlThreat Model------------The security of the data stored using sops is as strong as the weakestcryptographic mechanism. Values are encrypted using AES256_GCM which is thestrongest symetric encryption algorithm known today. Data keys are encryptedin either KMS, which also uses AES256_GCM, or PGP which uses either RSA orECDSA keys.Going from the most likely to the least likely, the threats are as follows:Compromised AWS credentials grant access to KMS master key~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~An attacker with access to an AWS console can grant itself access to one ofthe KMS master keys used to encrypt a sops data key. This threat should bemitigated by protecting AWS accesses with strong controls, such as multi-factorauthentication, and also by performing regular audits of permissions grantedto AWS users.Compromised PGP key~~~~~~~~~~~~~~~~~~~PGP keys are routinely mishandled, either because owners copy them frommachine to machine, or because the key is left forgotten on an unused machinean attacker gains access to. When using PGP encryption, sops users should takespecial care of PGP private keys, and store them on smart cards or offlineas often as possible.Factorized RSA key~~~~~~~~~~~~~~~~~~sops doesn't apply any restriction on the size or type of PGP keys. A weak PGPkeys, for example 512 bits RSA, could be factorized by an attacker to gainaccess to the private key and decrypt the data key. Users of sops should relyon strong keys, such as 2048+ bits RSA keys, or 256+ bits ECDSA keys.Weak AES cryptography~~~~~~~~~~~~~~~~~~~~~A vulnerability in AES256_GCM could potentially leak the data key or the KMSmaster key used by a sops encrypted file. While no such vulnerability existstoday, we recommend that users keep their encrypted files reasonably private.Backward compatibility----------------------`sops` will remain backward compatible on the major version, meaning that allimprovements brought to the 1.X branch (current) will maintain the file formatintroduced in **1.0**.License-------Mozilla Public License Version 2.0Authors-------* Julien Vehent &lt;jvehent@mozilla.com&gt; (lead &amp; maintainer)* Daniel Thornton &lt;dthornton@mozilla.com&gt;* Alexis Metaireau &lt;alexis@mozilla.com&gt;* Rémy Hubscher &lt;natim@mozilla.com&gt;* Todd Wolfson &lt;todd@twolfson.com&gt;* Brian Hourigan &lt;bhourigan@mozilla.com&gt;Credits-------`sops` is inspired by `hiera-eyaml &lt;https://github.com/TomPoulton/hiera-eyaml&gt;`_,`credstash &lt;https://github.com/LuminalOSS/credstash&gt;`_ ,`sneaker &lt;https://github.com/codahale/sneaker&gt;`_,`password store &lt;http://www.passwordstore.org/&gt;`_ and too many years managingPGP encrypted files by hand...</longdescription>
</pkgmetadata>