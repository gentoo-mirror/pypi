<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-cygrpcMicro-Framwork for gRPC with REST expose support.## installation- Using pip```pip install cygrpc```- Using git repository```git+https://github.com/cuemby/python-cygrpc.git#egg=cygrpc```## Usage### ServerParams:* host : str =  server host, by default is '0.0.0.0'* port : int = server port for listen. by default is 50051* max_threads : int =  set threads workers for server, by default is 10* interceptors: tuple(InterceptorImplementation) = server interceptors middlewares. by default is None.* http_port: int = port for http gateway if you decide used all values by default, you can setup the server in less lines```pythonfrom cygrpc.server import Serverserver = Server()server.add_service(calculator_api_pb2_grpc, ServiceImpl)server.start()```Example using all params:```pythonfrom cygrpc.server import Server# Initialization of server definition, 'host', 'port', 'max_threads' has be optionals.# By default the __init__ function set the same values. if don't you wanna set interceptors only remove the paramserver = Server(host=&quot;0.0.0.0&quot;, port=50051, max_threads=10, interceptors=(MyAuthInterceptor(),))# attach service to server, repeat for multiple servicesserver.add_service(calculator_api_pb2_grpc, ServiceImpl)# finally start server.server.start()```### Implement service The implementation is the same.```python# import  rest decoratorfrom cygrpc.gateway.http import restclass ServiceImpl(calculator_api_pb2_grpc.CalculatorAPIServicer):    &quot;&quot;&quot;    Service logic implementation.    &quot;&quot;&quot;    def Sum(self, request, context):        total = 0        for addend in request.addends:            total += addend        response = pb.SumResponse(sum=total)        return response```#### rest routefor add rest route add the decorator @rest to method definition:```python# import rest decoratorfrom cygrpc.gateway.http import restclass ServiceImpl(calculator_api_pb2_grpc.CalculatorAPIServicer):    &quot;&quot;&quot;    Service logic implementation.    &quot;&quot;&quot;    @rest(&quot;/v1/calculator/sum&quot;, method=&quot;POST&quot;)    def Sum(self, request, context):        total = 0        for addend in request.addends:            total += addend        response = pb.SumResponse(sum=total)        return response```### Interceptors- Base Interceptor : Base interceptor implementation for create your custom interceptor```pythonfrom cygrpc.middleware import CyGrpcInterceptorclass CustomInterceptor(CyGrpcInterceptor):    def intercept_service(self, continuation, handler_call_details):        # for continue to method implementation          return self.on_success(continuation, handler_call_details)        # for terminate request        return self.on_failed(grpc.StatusCode.UNAUTHENTICATED, &quot;Validate authentication failed.&quot;)```- Authentication interceptor: provider a base for authentication middleware interceptor```pythonfrom cygrpc.middleware.auth import CyGrpcAuthInterceptorclass MyAuthInterceptor(CyGrpcAuthInterceptor):    def auth_process(self, continuation, handler_call_details):       &quot;&quot;&quot;&quot;       ..... my auth validation process ....       &quot;&quot;&quot;       return True``` ## Authors:- Fabio Moreno &lt;fabio.moreno@cuemby.com&gt;</longdescription>
</pkgmetadata>