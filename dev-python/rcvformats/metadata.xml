<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Python package](https://github.com/artoonie/rcvformats/workflows/Python%20package/badge.svg)[![Documentation Status](https://readthedocs.org/projects/rcvformats/badge/?version=latest)](https://rcvformats.readthedocs.io/en/latest/?badge=latest)# RCV FormatsRCV Formats helps programmers and researchers build tools that analyze the results of a Ranked-Choice Voting election without having to support the many file formats used to report RCV results.RCV Formats converts data from several sources into a standardized format. It supports both python and command-line toolsCurrently supported input formats are:1. The Universal RCV Tabulator JSON format2. The Opavote JSON format3. The ElectionBuddy CSV format4. The Dominion XLSX format5. The Dominion TXT formatAs well as the Dominion first-round-only XML format (used in Alaska), which contains the first rounds of several elections. All other converters contain the results of just one election per file.The standardized output format is the [Universal RCV Tabulator JSON](https://www.rcvresources.org/rcv-universal-tabulator). To understand this format, look at [examples](https://github.com/artoonie/rcvformats/tree/main/testdata/inputs/universal-tabulator) or [the jsonschema](https://github.com/artoonie/rcvformats/blob/main/rcvformats/jsonschemas/universaltabulator.schema.json).## Demo#### Command-line```bashrcvformats convert -i &lt;input-filename&gt; -o &lt;output-filename&gt;```#### Python```pythonfrom rcvformats.conversions.automatic import AutomaticConverterstandardized_data = AutomaticConverter().convert_to_ut(input_filename)```## InstallationInstall the library via pip:`pip3 install rcvformats`## Convert to Standardized FormatYou can convert from any of the supported formats.Use this functionality to support a wide array of input data while only writing code to support a single format.#### Command-line```bashrcvformats convert -i &lt;input-filename&gt; -o &lt;output-filename&gt;```The bash script always uses the automatic converter.#### Python```pythonfrom rcvformats.conversions import electionbuddyconverter = electionbuddy.ElectionBuddyConverter()try:  converter.convert_to_ut(filename)except Exception as e:  print(&quot;Errors: &quot;, e)```Valid converters are:```pythonfrom rcvformats.converters.automatic import AutomaticConverterfrom rcvformats.conversions.dominion_txt import DominionTxtConverterfrom rcvformats.conversions.dominion_xlsx import DominionXlsxConverterfrom rcvformats.conversions.electionbuddy import ElectionBuddyConverterfrom rcvformats.conversions.opavote import OpavoteConverter```The AutomaticConverter checks if the file matches any of the available schemas, and if it finds a matching schema, it runs the corresponding conversion (if a conversion is needed at all).## Schema ValidationValidate that your file is supported by RCVFormats.Validation is only on the structure of the data, not on its contents: it is possible for a validly-formatted file to still contain invalid data.#### Command-line```bashrcvformats validate -i &lt;input-filename&gt; -s &lt;schema-type&gt;```Valid schema validators on the command line are 'eb' (for electionbuddy files), `ov10` (for opavote files pre-2022), `ov11` (for opavote files post-2022), `ut` (for universal tabulator files).Dominion does not have a schema validation currently.#### Python```pythonfrom rcvformats.schemas import universaltabulatorschema = universaltabulator.SchemaV0()is_valid = schema.validate('/path/to/file.json')if not is_valid:  print(schema.last_error())```Valid schema validators for python are:```pythonfrom rcvformats.schemas.electionbuddy import SchemaV0from rcvformats.schemas.opavote import SchemaV1_0from rcvformats.schemas.universaltabulator import SchemaV0```### Fill in missing transfer dataTransfer data is useful to determine where votes went when a candidate was eliminated, or when a candidate was elected and had surplus votes (in STV).If you have a file format that does not have transfer data, there are three options: you can leave it out entirely, you can assign transfers proportionally to each eliminated candidate, or you can assign only the transfers that are unambiguous.We recommend the last option, which prepares transfer data for any round that does not involve batch elimination.The second option results in fake data which cannot be relied upon for any results reporting or analyses.## Multi-convertersCall `DominionMultiConverter.explode_to_files(fileObject)`, which will return a dictionary mapping election names to NamedTemporaryFiles.#### Command-line```bashrcvformats transfer -i &lt;input-filename&gt; -o &lt;output-filename&gt;```#### Python```pythonfrom rcvformats.conversions.ut_without_transfers import UTWithoutTransfersConverterconverter = UTWithoutTransfersConverter()try:  converter.convert_to_ut(filename)except Exception as e:  print(&quot;Errors: &quot;, e)```## Upcoming plansIn addition to data normalization for RCV Summary formats, we would like similar functionality for cast vote records.## Running test suiteRun `python3 -m nose` in the root directory, and `./scripts/lint.sh` to run the linter.</longdescription>
</pkgmetadata>