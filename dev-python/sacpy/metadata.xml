<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SACPY -- A Python Package for Statistical Analysis of Climate**Sacpy**, an effecient Statistical Analysis tool for Climate or Meteorology data.Author : Zilu Meng e-mail : zilumeng@uw.edugithub : https://github.com/ZiluM/sacpypypi : https://pypi.org/project/sacpy/Document: https://zilum.github.io/sacpy/examples or document :  https://github.com/ZiluM/sacpy/tree/main/examples or https://gitee.com/zilum/sacpy/tree/main/examplesversion : 0.0.18Sepcial thanks: Lifei Lin (Sun Yat-sen University) 's `repr_html.py` to visualize class in jupyter!## Why choose Sacpy?### Fast!For example, Sacpy is more than 60 times faster than the traditional regression analysis with Python (see **speed test**). The following is the time spent performing the same task. Sacpy is fastest.![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/speed_test_00.png)### Turn to climate data customization!Compatible with commonly used meteorological calculation libraries such as numpy and xarray.### Concise codeYou can finish drawing a following figure with just seven lines of code. see **examples of concise**.![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/one_test.png)You can use SVD/MCA to get the image below easily.![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/SVD.png)## Install and updateYou can use pip to install.    pip install sacpyOr you can visit https://gitee.com/zilum/sacpy/tree/main/dist to download **.whl file**, then    pip install .whl_fileupdate:    pip install --upgrade sacpyor you can download **.whl** file and then install use ` pip install .whl_file`.## SpeedAs a comparison, we use the  **corr**  function in the xarray library, **corrcoef** function in numpy library, cdist in scipy, apply_func in xarray  and **for-loop**. The time required to calculate the correlation coefficient between SSTA and nino3.4 for 50 times is shown in the figure below.It can be seen that we are four times faster than scipy cdist, five times faster than xarray.corr, 60 times faster than forloop, 110 times faster than xr.apply_func and 200 times faster than numpy.corrcoef.Moreover, xarray and numpy can not return the **p value**. We can simply check the pvalue attribute of sacpy to get the p value.All in all, if we want to get p-value and correlation or slope, we only to choose **Sacpy is 60 times faster than before**.![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/speed_test_00.png)## Example### example1Calculate the correlation between SST and nino3.4 index```Pythonimport numpy as npimport scapy as scpimport matplotlib.pyplot as pltimport sacpy.Map # need cartopy or you can just not importimport cartopy.crs as ccrs# load sstsst = scp.load_sst()['sst']# get ssta (method=1, Remove linear trend;method=0, Minus multi-year average)ssta = scp.get_anom(sst,method=1)# calculate Nino3.4Nino34 = ssta.loc[:,-5:5,190:240].mean(axis=(1,2))# regressionlinreg = scp.LinReg(np.array(Nino34),np.array(ssta))# plotfig = plt.figure(figsize=[7, 3])ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))lon ,lat = np.array(ssta.lon) , np.array(ssta.lat)# shadingm = ax.scontourf(lon,lat,linreg.corr)# significant plotn = ax.sig_plot(lon,lat,linreg.p_value,color=&quot;k&quot;,marker=&quot;..&quot;)# initialize mapax.init_map(stepx=50, ysmall=2.5)# colorbarplt.colorbar(m)# saveplt.savefig(&quot;../pic/nino34.png&quot;,dpi=200)```Result(For a detailed drawing process, see **example**):![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/nino34.png)### example2multiple linear regression on Nino3.4 IOD Index and ssta pattern```Pythonimport numpy as npimport scapy as scpimport matplotlib.pyplot as plt# load sstsst = scp.load_sst()['sst']# get ssta (method=1, Remove linear trend;method=0, Minus multi-year average)ssta = scp.get_anom(sst,method=1)# calculate Nino3.4Nino34 = ssta.loc[:,-5:5,190:240].mean(axis=(1,2))# calculate IODIdexIODW = ssta.loc[:,-10:10,50:70].mean(axis=(1,2))IODE = ssta.loc[:,-10:0,90:110].mean(axis=(1,2))IODI = +IODW - IODE# get xX = np.vstack([np.array(Nino34),np.array(IODI)]).T# multiple linear regressionMLR = scp.MultLinReg(X,np.array(ssta))# plot IOD's effectimport sacpy.Mapimport cartopy.crs as ccrsfig = plt.figure(figsize=[7, 3])ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))lon ,lat = np.array(ssta.lon) , np.array(ssta.lat)m = ax.scontourf(lon,lat,MLR.slope[1])# significant plotn = ax.sig_plot(lon,lat,MLR.pv_i[1],color=&quot;k&quot;,marker=&quot;..&quot;)# initialize mapax.init_map(stepx=50, ysmall=2.5)plt.colorbar(m)plt.savefig(&quot;../pic/MLR.png&quot;,dpi=200)```Result(For a detailed drawing process, see **example**):![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/MLR.png)### example3What effect will ENSO have on the sea surface temperature in the next summer?```Pythonimport numpy as npimport sacpy as scpimport matplotlib.pyplot as pltimport xarray as xr# load sstsst = scp.load_sst()['sst']ssta = scp.get_anom(sst)# calculate Nino3.4Nino34 = ssta.loc[:,-5:5,190:240].mean(axis=(1,2))# get DJF mean Nino3.4DJF_nino34 = scp.XrTools.spec_moth_yrmean(Nino34,[12,1,2])# get JJA mean sstaJJA_ssta = scp.XrTools.spec_moth_yrmean(ssta, [6,7,8])# regressionreg = scp.LinReg(np.array(DJF_nino34)[:-1], np.array(JJA_ssta))# plotimport cartopy.crs as ccrsimport sacpy.Mapfig = plt.figure(figsize=[7, 3])ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))lon ,lat = np.array(ssta.lon) , np.array(ssta.lat)m = ax.scontourf(lon,lat,reg.slope)n = ax.sig_plot(lon,lat,reg.p_value,color=&quot;k&quot;,marker=&quot;///&quot;)ax.init_map(stepx=50, ysmall=2.5)plt.colorbar(m)plt.savefig(&quot;../pic/ENSO_Next_year_JJA.png&quot;,dpi=300)```![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/ENSO_Next_year_JJA.png)Same as **Indian Ocean Capacitor Effect on Indo–Western Pacific Climate during the Summer following El Niño** (Xie et al.), the El Nino will lead to Indian ocean warming in next year JJA.### example4EOF analysis```Pythonimport sacpy as scpimport numpy as npimport matplotlib.pyplot as plt# get datasst = scp.load_sst()[&quot;sst&quot;].loc[:, -20:30, 150:275]ssta = scp.get_anom(sst)# EOFeof = scp.EOF(np.array(ssta))eof.solve()# get spartial pattern and pcpc = eof.get_pc(npt=2)pt = eof.get_pt(npt=2)# plotimport cartopy.crs as ccrsimport sacpy.Maplon , lat = np.array(ssta.lon) , np.array(ssta.lat)fig = plt.figure(figsize=[15,10])ax = fig.add_subplot(221,projection=ccrs.PlateCarree(central_longitude=180))m1 = ax.scontourf(lon,lat,pt[0,:,:],cmap='RdBu_r',levels=np.linspace(-0.75,0.75,15),extend=&quot;both&quot;)ax.scontour(m1,colors=&quot;black&quot;)ax.init_map(ysmall=2.5)# plt.colorbar(m1)ax2 = fig.add_subplot(222)ax2.plot(sst.time,pc[0])ax3 = fig.add_subplot(223,projection=ccrs.PlateCarree(central_longitude=180))m2 = ax3.scontourf(lon,lat,pt[1,:,:],cmap='RdBu_r',levels=np.linspace(-0.75,0.75,15),extend=&quot;both&quot;)ax3.scontour(m2,colors=&quot;black&quot;)ax3.init_map(ysmall=2.5)ax4 = fig.add_subplot(224)ax4.plot(sst.time,pc[1])cb_ax = fig.add_axes([0.1,0.06,0.4,0.02])fig.colorbar(m1,cax=cb_ax,orientation=&quot;horizontal&quot;)plt.savefig(&quot;../pic/eof_ana.png&quot;,dpi=300)```![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/eof_ana.png)## example5Mean value (Composite Analysis) t-test for super El Nino (DJF Nino3.4 &gt; 1)```Pythonimport sacpy as scpimport numpy as npimport matplotlib.pyplot as pltsst = scp.load_sst()[&quot;sst&quot;]ssta = scp.get_anom(sst, method=0)# get Dec Jan Feb SSTAssta_djf = scp.XrTools.spec_moth_yrmean(ssta,[12,1,2])Nino34 = ssta_djf.loc[:, -5:5, 190:240].mean(axis=(1, 2))# select year of Super El Ninoselect = Nino34 &gt;= 1ssta_sl = ssta_djf[select]mean, pv = scp.one_mean_test(np.array(ssta_sl))# plotimport sacpy.Mapimport cartopy.crs as ccrsfig = plt.figure(figsize=[7, 3])ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))lon ,lat = np.array(ssta.lon) , np.array(ssta.lat)m = ax.scontourf(lon,lat,mean)n = ax.sig_plot(lon,lat,pv,color=&quot;k&quot;,marker=&quot;..&quot;)ax.init_map(stepx=50, ysmall=2.5)plt.colorbar(m)plt.savefig(&quot;../pic/one_test.png&quot;)```Result:![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/one_test.png)## example6SVD(MCA) analysis.```Pythonimport sacpy as scpimport xarray as xrimport matplotlib.pyplot as pltimport numpy as npfrom xmca import arrayimport sacpy.Mapimport cartopy.crs as ccrs# load datasst = scp.load_sst()['sst'].loc[&quot;1991&quot;:&quot;2021&quot;, -20:30, 150:275]ssta = scp.get_anom(sst)u = scp.load_10mwind()['u']v = scp.load_10mwind()['v']uua = scp.get_anom(u)vua = scp.get_anom(v)uv = np.concatenate([np.array(uua)[...,np.newaxis],np.array(vua)[...,np.newaxis]],axis=-1)# calculationsvd = scp.SVD(ssta,uv,complex=False)svd.solve()ptl, ptr = svd.get_pt(3)pcl,pcr = svd.get_pc(3)upt ,vpt = ptr[...,0] , ptr[...,1]sst_pt = ptl# plot progress, see example/SVD.ipynb```result:![](https://raw.githubusercontent.com/ZiluM/sacpy/main/pic/SVD.png)## examples of conciseIf you want to plot example1's figure , you need write:```Pythonfrom cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatterfrom matplotlib.ticker import MultipleLocatorimport cartopy.crs as ccrsplt.rc('font', family='Times New Roman', size=12)ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))m = ax.contourf(ssta.lon,ssta.lat,linreg.corr,                cmap=&quot;RdBu_r&quot;,                levels=np.linspace(-1, 1, 15),                extend=&quot;both&quot;,                transform=ccrs.PlateCarree())n = plt.contourf(ssta.lon,ssta.lat,linreg.p_value,                 levels=[0, 0.05, 1],                 zorder=1,                 hatches=['..', None],                 colors=&quot;None&quot;,                 transform=ccrs.PlateCarree())xtk = np.arange(-180,181,60)ax.set_xticks(xtk)# ax.set_xticks(xtk,crs=ccrs.PlateCarree())ax.set_yticks(np.arange(-50,51,20),crs=ccrs.PlateCarree())ax.yaxis.set_major_formatter(LatitudeFormatter())ax.xaxis.set_major_formatter(LongitudeFormatter(zero_direction_label=True))ax.xaxis.set_minor_locator(MultipleLocator(10))ax.yaxis.set_minor_locator(MultipleLocator(5))ax.coastlines()ax.set_aspect(&quot;auto&quot;)plt.colorbar(m)```**So troublesome!!!**But if you `import sacpy.Map`, you can easily write:```Pythonimport sacpy.Mapimport cartopy.crs as ccrsfig = plt.figure(figsize=[7, 3])ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))lon ,lat = np.array(ssta.lon) , np.array(ssta.lat)m = ax.scontourf(lon,lat,rvalue)n = ax.sig_plot(lon,lat,p,color=&quot;k&quot;,marker=&quot;..&quot;)ax.init_map(stepx=50, ysmall=2.5)plt.colorbar(m)```How wonderful, how concise !## AcknowledgementsThank Prof. Feng Zhu (NUIST,https://fzhu2e.github.io/) for his guidance of this project.Thank for Prof. Tim Li (University of Hawaii at Mānoa, http://iprc.soest.hawaii.edu/people/li.php) ,Prof. Lin Chen (NUIST, https://faculty.nuist.edu.cn/chenlin12/zh_CN/index.htm) and Dr. Ming Sun (NUIST) 's help.# Change Log## version 0.0.1Nothing!## version 0.0.5First official edition## version 0.0.6Updated the speed test and changed small errors## version 0.0.7Add examples and change README.md## version 0.0.9Add mult_corr,partial_corr in LinReg.py and spec_moth_dat, spec_moth_yrmean in XrTools.Change examples.## version 0.0.10Add EOF analysis## version 0.0.11Change Example Data## version 0.0.12Fix a bug in XrToolsAdd Map.py for quick plot## version 0.0.13Change example!## version 0.0.14Add SVD(MCA) analysis and visualization of LinReg in Jupyter.## version 0.0.15Add Map.py for test and new wrapper progress for Map.py and Linreg## version 0.0.16Optimized support for xarray## version 0.0.171. update mask function for LinReg 2. add shp mask function3. correct SVD## version 0.0.181. add new function of EOF2. correct some errors of EOF and SVD </longdescription>
</pkgmetadata>