<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Log Assertion![Python package](https://github.com/facundobatista/logassert/workflows/Python%20package/badge.svg)## What?A simple log assertion mechanism for Python unittests.## Why?As is vox populi, you must also test the logging calls in your programs.With `logassert` this is now very easy.# Awesome! How do I use it?The same functionality is exposed in two very different ways, one that fits better the *pytest semantics*, the other one more suitable for classic unit tests.## For pytestAll you need to do is to declare `logs` in your test arguments, it worksjust like any other fixture.Then you just check (using `assert`, as usual with *pytest*) if a specific line is in the logs for a specific level.Example:```pythondef test_bleh(logs)    (...)    assert &quot;The meaning of life is 42&quot; in logs.debug```Actually, the line you write is a regular expression, so you can totally do (in case you're not exactly sure which the meaning of life is):```python    assert &quot;The meaning of life is \d+&quot; in logs.debug```The indicated string is searched to be inside the log lines, it doesn't need to be exact whole line. If you want that, just indicate it as withany regular expression:```python    assert &quot;^The meaning of life is \d+$&quot; in logs.debug```In a similar way you can also express the desire to check if it's at the beginning or at the end of the log lines.&gt; **NOTE**: the message checked is the final one, after the logging system replaced all the indicated parameters in the indicated string.If you want to verify that a text was logged, no matter at which level,just do:```python    assert &quot;The meaning of life is 42&quot; in logs.any_level```To verify that some text was NOT logged, just juse the Python's syntax! For example:```python    assert &quot;A problem happened&quot; not in logs.error```### But I don't like regexes, I want the exact stringThen you just import `Exact` from `logassert` and wrap the string with that.For example, in this case the `..` means exactly two dots, no regexsemantics at all:```python    assert Exact(&quot;The meaning of life is ..&quot;) in logs.any_level```### Anyway, I liked old behaviour of searching multiple stringsThen you may want to import `Multiple` from `logassert` and wrap thedifferent strings you had in each call for the classic behaviour.For example:```python    assert Multiple(&quot;life&quot;, &quot;meaning&quot;, &quot;42&quot;) in logs.any_level```### What if I want to check that nothing was logged?The simplest way to do it is to use the `NOTHING` verifier that you can import from `logassert`:```python    assert NOTHING in logs.debug```Note that it doesn't make sense to use it by the negative (`...NOTHING not in logs...`): is no really useful at testing level to know that &quot;something was logged&quot;, you shouldimprove the test to specifically verify *what* was logged.### Breaking the &quot;per line barrier&quot;Sometimes it's useful to verify that several lines were logged, and that those lines are logged one after the other, as they build a &quot;composite message&quot;.To achieve that control on the logged lines you can use the `Sequence`helper, that receives all the lines to verify (regexes by default, butyou can use the other helpers there):```python    assert Sequence(        &quot;Got 2 errors and \d+ warnings:&quot;,        Exact(&quot;  error 1: foo&quot;),        Exact(&quot;  error 2: bar&quot;),    ) in logs.debug```    ### ExamplesAfter logging...```python    person = &quot;madam&quot;    item = &quot;wallet&quot;    logger.debug(&quot;Excuse me %s, you dropped your %s&quot;, person, item)```...the following test will just pass:```python    assert &quot;Excuse me .*?, you dropped your wallet&quot; in logs.debug```However, the following will fail (different text!)...```python    assert &quot;Excuse me .*?, you lost your wallet&quot; in logs.debug```...producing this message in your tests:```assert for regex 'Excuse me .*?, you lost your wallet' check in DEBUG, failed; logged lines:      DEBUG     'Excuse me madam, you dropped your wallet'```This one will also fail (different level!)...```python    assert &quot;Excuse me .*?, you dropped your wallet&quot; in logs.info```...producing this message in your tests:```assert for regex 'Excuse me .*?, you dropped your wallet' check in INFO, failed; logged lines:       DEBUG     'Excuse me madam, you dropped your wallet'```A more complex example, with several log lines, and a specific assertion:```python    logger.info(&quot;Starting system&quot;)    places = ['/tmp/', '~/temp']    logger.debug(&quot;Checking for config XYZ in all these places %s&quot;, places)    logger.warning(&quot;bad config XYZ&quot;)    assert &quot;bad config XYZ&quot; in logs.debug```See how the test failure message is super helpful:```assert for regex 'bad config XYZ' check in DEBUG, failed; logged lines:       INFO      'Starting system'       DEBUG     &quot;Checking for config XYZ in all these places ['/tmp/', '~/temp']&quot;       WARNING   'bad config XYZ'```### What about repeated verifications?Sometimes it's needed to verify that something if logged only once (e.g.welcoming messages). In this cases it's super useful to use the `reset`method.See the following test sequence:```pythondef test_welcoming message(logs):    logger.info(&quot;foo&quot;)  # first log! it should trigger the welcoming message    assert &quot;Welcome&quot; in logs.info    logs.reset()    logger.info(&quot;foo&quot;)  # second log! it should NOT trigger the welcoming message    assert &quot;Welcome&quot; not in logs.info```## For classic TestCasesAll you need to do is to call this module's `setup()` passing the test caseinstance, and the logger you want to supervise.Like```pythonclass MyTestCase(unittest.TestCase):    &quot;&quot;&quot;Example.&quot;&quot;&quot;    def setUp(self):        logassert.setup(self, 'mylogger')```In the example, `mylogger` is the name of the logging to supervise. Ifdifferent subsystems of your code log in other loggers, this testerwon't notice.Then, to use it, just call the `assertLogged` method and it's family,passing all the strings you want to find. This is the default behaviour forbackwards compatibility.Example:```python    def test_blah(self):        (...)        self.assertLoggedDebug('secret', 'life', '42')```That line will check that &quot;secret&quot;, &quot;life&quot; and &quot;42&quot; are all logged in thesame logging call, in DEBUG level.So, if you logged this, the test will pass:```pythonlogger.debug(&quot;The secret of life, the universe and everything is %d&quot;, 42)```Note that the message checked is the one with all parameters replaced.But if you logged any of the following, the test will fail (the first becauseit misses one of the string, the second because it has the wrong log level)::```pythonlogger.debug(&quot;The secret of life, the universe and everything is lost&quot;)logger.info(&quot;The secret of life, the universe and everything is 42&quot;)```### What can I test?You'll have at disposition several assertion methods:- `self.assertLogged`: will check that the strings   were logged, no matter at which level- `self.assertLoggedLEVEL` (being LEVEL one of Error,   Warning, Info, or Debug): will check that the strings were logged at   that specific level.- `self.assertNotLogged`: will check that the   strings were NOT logged, no matter at which level- `self.assertNotLoggedLEVEL` (being LEVEL one of   Error, Warning, Info, or Debug): will check that the strings were NOT   logged at that specific level.# Nice! But...If you need help, or have any question, or found any issue, please open aticket [here](https://github.com/facundobatista/logassert/issues/new).Thanks in advance for your time.</longdescription>
</pkgmetadata>