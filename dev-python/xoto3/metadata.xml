<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># xoto3`xoto3` (pronounced zoto-three) is a layer of useful micro-utilitiesfor `boto3` (the AWS Python library) particularly suitable forserverless development.These come from years of experience developing a serverless platformat XOi Technologies, and represent real production code.## FeaturesSome of the features included:- A more general purpose `boto3` client API paginator.- Higher-level abstractions for DynamoDB, including:  - pure data transformation safeguards against various sorts of data    that DynamoDB won't accept.  - an multi-item, multi-table composable, retrying, transaction    wrapper for TransactWriteItems, allowing arbitrary writes (up to    the built in API limitations) to multiple databases to be    expressed as pure Python.  - a transactional single-item update that allows you to express your    single-item update transformation in pure Python.  - transparent BatchGet and BatchWrite utilities that work around the    many annoyances of `boto3` and DynamoDB itself.  - composable query interfaces that make writing basic queries against DynamoDB fun.  [see readme for examples](xoto3/dynamodb/README.md)- Cloudwatch Insights and Log Groups Query URL formatters.- General-purpose AWS Lambda finalization code, to make sure buffered  IO gets a chance to flush before your Lambda gets paused.- Wrapper for SSM parameter puts and gets, including built-in support  for parameter values larger than what SSM will accept by  automatically splitting your values and reconstructing them on gets.Various other utilities are included as well - feel free to poke through the source code.None of these features &quot;rely&quot; on any of the others, so all of thepower is left in your hands. This is not a framework; just a set ofmostly pure-functional utilities, with a couple of handy wrappers for`boto3` functions that perform IO.## Other UtilitiesSome fairly general-purpose utilities are also included. See [the readme](xoto3/utils/README.md) for more details.Some highlights:- `tree_map` - recursively map through a tree of Python builtins- `lazy` - general purpose lazy-loading container- Various serialization utilities (datetimes, decimals, JSON helpers)- `pipe_multiprocessing` - a Process Pool for places like AWS Lambda  where Python's built-in shared memory-dependent Pool does not work.## TestingYou can run all unit tests with `pipenv run pytest tests`.You can additionally include all the DynamoDB integration tests bysetting some environment variables:`XOTO3_INTEGRATION_TEST_DYNAMODB_ID_TABLE_NAME`: the name of aDynamoDB table with a primary key that is a partition key of `id`and no range key.`XOTO3_INTEGRATION_TEST_NO_RANGE_KEY_INDEX_HASH_KEY`: the name of anattribute which is the partition key of a GSI with no range key.If you don't currently have a table viable for testing, you can use the following script to easily create one:`pipenv run python ./scripts/create_integration_test_table.py`## Development### Writing testsAny new changes should be accompanied by unit tests. Integration testsshould also be included where they are helpful.Integration tests should make use of environment variables and pytest'sability to skip a test in the event that an environment variable is not set.Additionally, pytest is configured to run all tests in parallel, so anyintegration test you write must be independent of any other test, and must notleave behind test data.Your integration tests should be written alongside the unit tests. We do not keepthem in a separate folder.</longdescription>
</pkgmetadata>