<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CCA LoggingEasy python logging module## Installing[Install from pypi](https://pypi.org/project/ccalogging/)```# install into users system site-packagespip install ccalogging --user``````# install into a virtual environmentpip install ccalogging``````# as part of your own package, add to setup.pysetup(    ...,    install_requires=[        '...',        'ccalogging',        '...',        ],    ...,)```## UsageImport this module, set logging output, optionally set logging level,set a script level variable pointing to this modules `log` variable,then issue log.debug() etc.You only need to set the output destination and logging level once, soif you have multiple files in your project, set the output destinationand the logging level in the first one.  In all the others just point ascript level variable to `ccalogging.log`.When using a log file, if the file already exists, new log messages are appendedto it.The default logging level is WARNING.```# first (or only) project fileimport ccalogging          # import the moduleccalogging.setConsoleOut() # set global logging destinationccalogging.setDebug()      # set global log levellog = ccalogging.log       # point a script-level variable to the loggerlog.info(&quot;Logging has been started&quot;)``````# subsequent project filesimport ccalogging    # import the modulelog = ccalogging.log # point a script-level variable to the loggerlog.warning(&quot;continuing to log to the same location as setup in the first file&quot;)```## OptionsIt is possible to log to the console and/or to a file. When logging to theconsole logs go to `stderr` by default.### setDebug()Sets the global loglevel to be logging.DEBUG### setInfo()Sets the global loglevel to be logging.INFO### setWarn()Sets the global loglevel to be logging.WARNING.This is the default level, if you don't set a level.### setError()Sets the global loglevel to be logging.ERROR### setLogFile(fqfn)Sends log output to a file  parameters:  `fqfn`: the fully qualified path name of the log file  `fformat`: message format - defaults to: `&quot;%(asctime)s [%(levelname)-5.5s]  %(message)s&quot;`  `datefmt`: date format - defaults to: `&quot;%d/%m/%Y %H:%M:%S&quot;`  `rotation`: default: None - set this to the number of days to keep the log file for                              older logs will be compressed and numbered (up to this value)### setConsoleOut()Sends log output to the console  parameters:  `STDOUT`: if `True` send to `stdout` - defaults to False (`stderr`)  `cformat`: message format - defaults to: `&quot;%(asctime)s [%(levelname)-5.5s]  %(message)s&quot;`  `datefmt`: date format - defaults to: `&quot;%d/%m/%Y %H:%M:%S&quot;`</longdescription>
</pkgmetadata>