<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>lazy-string===========Python library for defining strings with delayed evaluation.|pypi_package| |python_versions| |license|The package provides a ``LazyString`` class. Its constructor accepts a callable (say, a function) which will be called when string's value is needed. The constructor also allows to specify positional and keyword arguments for that callable:.. code-block:: python  def __init__(self, func: Callable[..., str], *args: Tuple, **kwargs: Mapping) -&gt; None:    ...The value is re-evaluated on every access.Installation------------Available as a `PyPI &lt;https://pypi.python.org/pypi/lazy-string&gt;`_ package:.. code-block:: bash  pip install lazy-stringUsage-----Using with a function having no parameters:.. code-block:: python  from lazy_string import LazyString  def make_foo() -&gt; str:    return &quot;foo&quot;  s = LazyString(make_foo)The value is evaluated on demand:.. code-block:: python  &gt;&gt;&gt; s + &quot; bar&quot;  'foo bar'  &gt;&gt;&gt; str(s)  'foo'Representation explicitly tells it's a ``LazyString``:.. code-block:: python  &gt;&gt;&gt; s  LazyString('foo')It's safe to pass standard strings, as they will be returned as-is:.. code-block:: python  &gt;&gt;&gt; LazyString(&quot;foo bar&quot;)  'foo bar'Supports methods of standard strings:.. code-block:: python  &gt;&gt;&gt; s.upper()  'FOO'  &gt;&gt;&gt; &quot;f&quot; in s  True  &gt;&gt;&gt; dir(s)  ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__',   '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__',   '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__',   '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__',   '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__',   '__setattr__', '__sizeof__', '__str__', '__subclasshook__',   'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith',   'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha',   'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric',   'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',   'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust',   'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith',   'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']Supplying parameters for the callable:.. code-block:: python  def make_foo(arg1, arg2):    return f&quot;foo {arg1} {arg2}&quot;  s = LazyString(make_foo, 123, arg2=456).. code-block:: python  &gt;&gt;&gt; str(s)  'foo 123 456'Implementation Details----------------------``LazyString`` is inherited from `collections.UserString &lt;https://docs.python.org/3/library/collections.html#collections.UserString&gt;`_... code-block:: python  &gt;&gt;&gt; LazyString.__mro__  (&lt;class 'lazy_string.LazyString'&gt;, &lt;class 'collections.UserString'&gt;,   &lt;class 'collections.abc.Sequence'&gt;, &lt;class 'collections.abc.Reversible'&gt;,   &lt;class 'collections.abc.Collection'&gt;, &lt;class 'collections.abc.Sized'&gt;,   &lt;class 'collections.abc.Iterable'&gt;, &lt;class 'collections.abc.Container'&gt;,   &lt;class 'object'&gt;)Serialization-------------Pickling^^^^^^^^Supported out of the box:.. code-block:: python  &gt;&gt;&gt; import pickle  &gt;&gt;&gt; s == pickle.loads(pickle.dumps(s))  TrueTo JSON^^^^^^^Supported with any encoder able to encode ``collections.UserString``:.. code-block:: python  import json  import collections  class JSONEncoder(json.JSONEncoder):    def default(self, o):      if isinstance(o, collections.UserString):        return str(o)      return super().default(o).. code-block:: python  &gt;&gt;&gt; data = {'s': s}  &gt;&gt;&gt; json.dumps(data, cls=JSONEncoder)  '{&quot;s&quot;: &quot;foo&quot;}'.. |pypi_package| image:: https://img.shields.io/pypi/v/lazy-string   :target: http://badge.fury.io/py/lazy-string/   :alt: Version of PyPI package.. |python_versions| image:: https://img.shields.io/badge/Python-3.7+-brightgreen.svg   :alt: Supported versions of Python.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: https://github.com/oblalex/lazy-string/blob/main/LICENSE   :alt: MIT license</longdescription>
</pkgmetadata>