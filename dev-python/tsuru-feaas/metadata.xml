<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Varnish service API for tsuru PaaS==================================.. image:: https://travis-ci.org/tsuru/varnishapi.png?branch=master   :target: https://travis-ci.org/tsuru/varnishapiDeploying the API-----------------First, let's create an app in tsuru, from the project root, execute the following:.. highlight: bash::    % tsuru app-create varnishapi python    % git remote add tsuru git@remote.sbrubles.com    % git push tsuru masterThe push will return an error telling you that you can't push code before theapp unit is up, wait until your unit is in service, you can check with:.. highlight: bash::    % tsuru app-listWhen you get an output like this you can proceed to push... highlight: bash::    +-------------+-------------------------+--------------------------------------+    | Application | Units State Summary     | Address                              |    +-------------+-------------------------+--------------------------------------+    | your-app    | 1 of 1 units in-service | your-app.sa-east-1.elb.amazonaws.com |    +-------------+-------------------------+--------------------------------------+Now if you access our app endpoint at &quot;/&quot; (you can check with `tsuru app-info`cmd) you should get a 404, which is right, since the API does not respondthrough this url.Alright, let's configure the application, it'll need to talk with EC2 API, andit does so by using environment variables. Here's what you need:.. highlight: bash::    % tsuru env-set EC2_ENDPOINT=https://ec2.amazonaws.com EC2_ACCESS_KEY=your-access-key EC2_SECRET_KEY=your-secret-keyIn order to get Varnish running, you can provide an AMI or a list of packagesto install via user data. The AMI is specified via the ``AMI_ID`` environmentvariable, while the packages are specified by the ``API_PACKAGES`` environmentvariable. Users may specify both variables... highlight: bash::    % tsuru env-set AMI_ID=your-ami-id API_PACKAGES=varnish vim-noxYou can also use a custom user-data url via ``USER_DATA_URL`` intead of``API_PACKAGES``. In this case, the return content body should contain``VARNISH_SECRET_KEY`` word which will be replaced by proper varnishsecret on remote machine... highlight: bash::    % tsuru env-set AMI_ID=your-ami-id USER_DATA_URL=http://server/custom-user-dataUsers may also specify a subnet for running with VPC. You can specify thesubnet ID via the ``SUBNET_ID`` environment variable... highlight: bash::    % tsuru env-set SUBNET_ID=your-subnet-idOne more thing: this API will use MongoDB to store information about instances,the MongoDB endpoint and the database name is also controlled via environmentvariables:We're done with our API! Let's create the service in Tsuru.Creating the Service--------------------First you'll have to change the ``manifest.yaml`` file located at the projectroot of our application. Change the production endpoint to point to theapplication address, your yaml should look like this:.. highlight: yaml::    id: varnish    password: some123    endpoint:      production: varnishapi-endpoint.comNow let's tell tsuru it needs to registrate a new service, from the projectroot run, using `crane&lt;http://godoc.org/github.com/globocom/tsuru/cmd/crane&gt;`_:.. highlight: bash::    % crane create manifest.yamlAnd we're done!</longdescription>
</pkgmetadata>