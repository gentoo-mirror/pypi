<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EasyFlow: Keras Feature Preprocessing Pipelines![Keras logo](https://s3.amazonaws.com/keras.io/img/keras-logo-2018-large-1200.png)# Table of Contents1. [About EasyFlow](#about-EasyFlow)2. [Motivation](#motivation)3. [Installation](#installation)4. [Example](#example)5. [Tutorials](#tutorials)---## About EasyFlowThe `EasyFlow` package implements an interface similar to SKLearn's Pipeline API that contains easy feature preprocessing pipelines to build a full training and inference pipeline natively in Keras. All pipelines are implemented as Keras layers. ---## MotivationThere is a need to have a similar interface for Keras that mimics the SKLearn Pipeline API such as `Pipeline`, `FeatureUnion` and `ColumnTransformer`, but natively in Keras as Keras layers. The usual design pattern especially for tabular data is to first do preprocessing with SKLearn and then feed the data to a Keras model. With `EasyFlow` you don't need to leave the Tensorflow/Keras ecosystem to build custom pipelines and your preprocessing pipeline is part of your model architecture.Main interfaces are:* `FeaturePreprocessor`: This layer applies feature preprocessing steps and returns a separate layer for each step supplied. This gives more flexibility to the user and if a more advance network architecture is needed. For example something like a Wide and Deep network.* `FeatureUnion`: This layer is similar to `FeaturePreprocessor` with an extra step that concatenates all layers into a single layer.---## Installation:```bashpip install easy-tensorflow```---## ExampleLets look at a quick example:```pythonimport pandas as pdimport tensorflow as tffrom tensorflow.keras.layers import Normalization, StringLookup, IntegerLookup# local importsfrom easyflow.data import TensorflowDataMapperfrom easyflow.preprocessing import FeatureUnionfrom easyflow.preprocessing import (    FeatureInputLayer,    StringToIntegerLookup,)```### Read in data and map as tf.data.DatasetUse the TensorflowDataMapper class to map pandas data frame to a tf.data.Dataset type.```pythonfile_url = &quot;http://storage.googleapis.com/download.tensorflow.org/data/heart.csv&quot;dataframe = pd.read_csv(file_url)labels = dataframe.pop(&quot;target&quot;)batch_size = 32dataset_mapper = TensorflowDataMapper() dataset = dataset_mapper.map(dataframe, labels)train_data_set, val_data_set = dataset_mapper.split_data_set(dataset)train_data_set = train_data_set.batch(batch_size)val_data_set = val_data_set.batch(batch_size)```### Set constants```pythonNUMERICAL_FEATURES = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'slope']CATEGORICAL_FEATURES = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'ca']# thal is represented as a stringSTRING_CATEGORICAL_FEATURES = ['thal']dtype_mapper = {    &quot;age&quot;: tf.float32,    &quot;sex&quot;: tf.float32,    &quot;cp&quot;: tf.float32,    &quot;trestbps&quot;: tf.float32,    &quot;chol&quot;: tf.float32,    &quot;fbs&quot;: tf.float32,    &quot;restecg&quot;: tf.float32,    &quot;thalach&quot;: tf.float32,    &quot;exang&quot;: tf.float32,    &quot;oldpeak&quot;: tf.float32,    &quot;slope&quot;: tf.float32,    &quot;ca&quot;: tf.float32,    &quot;thal&quot;: tf.string,}```### Setup Preprocessing layer using FeatureUnionThis is the main part where `EasyFlow` fits in. We can now easily setup a feature preprocessing pipeline as a Keras layer with only a few lines of code.```pythonfeature_preprocessor_list = [    ('numeric_encoder', Normalization(), NUMERICAL_FEATURES),    ('categorical_encoder', IntegerLookup(output_mode='multi_hot'), CATEGORICAL_FEATURES),    ('string_encoder', StringToIntegerLookup(), STRING_CATEGORICAL_FEATURES)]preprocessor = FeatureUnion(feature_preprocessor_list)preprocessor.adapt(train_data_set)feature_layer_inputs = FeatureInputLayer(dtype_mapper)preprocessing_layer = preprocessor(feature_layer_inputs)```### Set up network```python# setup simple networkx = tf.keras.layers.Dense(128, activation=&quot;relu&quot;)(preprocessing_layer)x = tf.keras.layers.Dropout(0.5)(x)outputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)model = tf.keras.Model(inputs=feature_layer_inputs, outputs=outputs)model.compile(    optimizer=tf.keras.optimizers.Adam(),    loss=tf.keras.losses.BinaryCrossentropy(),    metrics=[tf.keras.metrics.BinaryAccuracy(name='accuracy'), tf.keras.metrics.AUC(name='auc')])```### Fit model```pythonhistory=model.fit(train_data_set, validation_data=val_data_set, epochs=10)```---## Tutorials### Migrate an Sklearn training Pipeline to Tensorflow Keras: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/fernandonieuwveldt/easyflow/blob/develop/examples/migrating_from_sklearn_to_keras/migrate_sklearn_pipeline.ipynb)* In this notebook we look at ways to migrate an Sklearn training pipeline to Tensorflow Keras. There might be a few reasons to move from Sklearn to Tensorflow.### Single Input Multiple Output Preprocessor: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/fernandonieuwveldt/easyflow/blob/develop/examples/single_input_multiple_output/single_input_multiple_output_preprocessor.ipynb)* In this example we will show case how to apply different transformations and preprocessing steps on the same feature. What we have here is an example of a Single input Multiple output feature transformation scenario.### Preprocessing module quick intro: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/fernandonieuwveldt/easyflow/blob/develop/examples/preprocessing_example/preprocessing_example.ipynb)* The `easyflow.preprocessing` module contains functionality similar to what Sklearn does with its `Pipeline`, `FeatureUnion` and `ColumnTransformer` does. This is a quick introduction.### Tensorflow Feature columns quick intro: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/fernandonieuwveldt/easyflow/blob/develop/examples/feature_column_demo/feature_column_example.ipynb)*  Model building Pipeline using `EasyFlow` feature_encoders module. This module is a fusion between Keras layers and Tensorflow feature columns.</longdescription>
</pkgmetadata>