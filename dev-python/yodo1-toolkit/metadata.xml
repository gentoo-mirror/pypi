<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Yodo1 Python Toolkit&lt;p align=&quot;center&quot;&gt;  &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/yodo1-toolkit&quot;&gt;  &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/yodo1-toolkit&quot;&gt;  &lt;img alt=&quot;PyPI - Downloads&quot; src=&quot;https://img.shields.io/pypi/dm/yodo1-toolkit&quot;&gt;&lt;/p&gt;- [Yodo1 Python Toolkit](#yodo1-python-toolkit)  - [Install](#install)  - [SSO](#sso)    - [Setup](#setup)    - [User with FastAPI](#user-with-fastapi)  - [sqlalchemy](#sqlalchemy)    - [Use with FastAPI](#use-with-fastapi)    - [Use without FastAPI](#use-without-fastapi)    - [Define Model](#define-model)    - [Define Schema](#define-schema)  - [Rabbit MQ](#rabbit-mq)    - [How to use Consumer](#how-to-use-consumer)      - [Consume MQ with apm enabled](#consume-mq-with-apm-enabled)    - [How to use Sender](#how-to-use-sender)      - [Send MQ with apm enabled](#send-mq-with-apm-enabled)      - [Send MQ with FastAPI apm enabled](#send-mq-with-fastapi-apm-enabled)  - [Progress Bar](#progress-bar)## Install```shellpip install yodo1-toolkit```## SSO### SetupCreate base instance on `app/base.py` file.```pythonfrom typing import Dictfrom fastapi import Dependsfrom yodo1.sso import JWTHelper, JWTPayloadauth = JWTHelper()# Define helper class# This is to add custom operation after get user info, like setup APM context# https://www.elastic.co/guide/en/apm/agent/python/master/api.html#api-set-user-contextdef get_current_user_dict(payload: JWTPayload = Depends(auth.current_payload)) -&gt; Dict:  elasticapm.set_user_context(username=payload.name,                              email=payload.email,                              user_id=payload.sub)  return {    &quot;sub&quot;: payload.sub,    &quot;email&quot;: payload.email,  }```Setup public key when api startup```pythonfrom fastapi import FastAPIfrom app.base import authapp = FastAPI()@app.on_event(&quot;startup&quot;)async def startup_event() -&gt; None:  # Setup public key via sso verser url, this is path to public_key file.  auth.setup_with_sso_server(&quot;&lt;public_key_url&gt;&quot;)  # Or just setup with piblic_key str  # &gt;&gt;&gt; public_key = &quot;-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BA ...&quot;  # &gt;&gt;&gt; auth.setup_keys(public_key=public_key)```### User with FastAPI```pythonfrom app.base import auth, get_current_user_dictfrom yodo1.sso import JWTPayload...# use payload without custom model@router.get(&quot;/get_payload&quot;)async def get_payload(  payload: JWTPayload=Depends(auth.current_payload)):  return f&quot;Hello, {payload.sub}&quot;# use custom user model@router.get(&quot;/user&quot;)async def get_payload(  payload: Dict=Depends(get_current_user_dict)):  return f&quot;Hello, {payload[&quot;sub&quot;]}&quot;```## sqlalchemyCreate base instances on `app/base.py` file.```pythonfrom sqlalchemy import create_enginefrom yodo1.sqlalchemy import DBManagerengine = create_engine(&quot;&lt;db_rui&gt;&quot;,                       pool_size=0,                       pool_recycle=600,                       max_overflow=-1)db = DBManager(engine=engine)```### Use with FastAPI```pythonfrom app.base import db...@router.post(&quot;/update&quot;)async def hello_world(  payload=Depends(auth.current_payload),  session=Depends(db.get_session)) -&gt; ItemModel:  item: ItemModel = session.query(ItemModel).first()  return item...```### Use without FastAPI```pythonfrom app.base import dbsession = db.SessionLocal()session.query(Model).all()session.commit()session.close()```### Define Model```pythonfrom sqlalchemy import (  INTEGER,  Column,  TEXT)from yodo1.sqlalchemy import BaseDBModelclass ItemModel(BaseDBModel):  __tablename__ = &quot;item_list&quot;  __table_args__ = {&quot;extend_existing&quot;: True}  id = Column(INTEGER, primary_key=True, autoincrement=True, nullable=False)  title = Column(TEXT, nullable=False, comment=&quot;notification title&quot;)```### Define Schema```pythonfrom yodo1.pydantic import BaseSchema, BaseDateSchemaclass OutputModelSchema(BaseSchema):  id: int  title: strclass OutputModelWithDateSchema(BaseDateSchema):  id: int  title: str```## Rabbit MQ### How to use Consumer```pythonimport loggingimport randomimport timeimport pikafrom yodo1.rabbitmq.multi_thread import MultiThreadConsumer, MQAction, CallbackResult# We can change pika log level to reduce logs.logging.getLogger(&quot;pika&quot;).setLevel(logging.INFO)logging.basicConfig(level=&quot;DEBUG&quot;)def demo_callback(method_frame: pika.spec.Basic.Deliver,                  header_frame: pika.spec.BasicProperties,                  message_body: bytes) -&gt; CallbackResult:    &quot;&quot;&quot;    Demo callback function    :param method_frame: method_frame from MQ Message    :param header_frame: header_frame from MQ Message    :param message_body: MQ Message body    :return: whether should ack    &quot;&quot;&quot;    logging.info(f&quot;Received message in Queue: {method_frame.routing_key}, delivery_tag: {method_frame.delivery_tag}&quot;)    time.sleep(30)    if random.random() &gt; 0.5:        # Failed to process, should nack with `requeue=False`        return CallbackResult(MQAction.ack)    else:        # Process success, should ack        return CallbackResult(MQAction.nack)consumer = MultiThreadConsumer(uri=&quot;amqps://xxxx&quot;,                               verbose=True)consumer.setup_queue_consumer(queue_name=&quot;test.consumer.a.debug&quot;,                              exchange_name=&quot;target-exchange&quot;,                              handler_function=demo_callback)try:    consumer.start_consuming()except KeyboardInterrupt:    consumer.stop_consuming()consumer.close()```#### Consume MQ with apm enabled```pythonimport elasticapmapm_client = elasticapm.Client(      service_name=&quot;awesome-api&quot;,      server_url=&quot;https://apm-host&quot;,      secret_token=&quot;token&quot;,      environment=&quot;test&quot;,      service_version=&quot;2.0.0&quot;)consumer = MultiThreadConsumer(uri=&quot;amqps://xxxx&quot;,                               apm_client=apm_client,                               verbose=True)````AsyncRabbit` is Deprecated due to stability, will remove from version 0.3.0. Please use `yodo1.rabbitmq.MultiThreadConsumer`### How to use Sender`RabbitHttpSender` is a thread safe sender with send MQ directly using the HTTP client.```pythonimport jsonimport aio_pikafrom yodo1.rabbitmq import RabbitHttpSender# Recommend to share one sender client for each app worker# Init with URIuri = &quot;https://username:password@rabbit-host/virtualhost&quot;rabbit_sender = RabbitHttpSender(uri=uri)# Make sure we have defined target queue and exchange relation on the startup@app.on_event(&quot;startup&quot;)async def startup_event() -&gt; None:    # Register the exchange.    # We need to define the relation in the code    rabbit_sender.declare_exchange(exchange_name=&quot;only-queue&quot;)def do_some_magic_and_publish_to_exchange():    do_magic()    rabbit_sender.publish(      exchange_name=&quot;exchange-1&quot;,      message_body={&quot;magic&quot;: &quot;done&quot;}    )def do_some_magic_and_publish_to_queue_withou_exchange():    do_magic()    # We can publish message directly to a queue using special exchange &quot;&quot;    rabbit_sender.publish(      exchange_name=&quot;&quot;,      routing_key=&quot;target-queue-name&quot;,      message_body={&quot;magic&quot;: &quot;done&quot;}    )```#### Send MQ with apm enabled```pythonimport elasticapmapm_client = elasticapm.Client(      service_name=&quot;awesome-api-consumer&quot;,      server_url=&quot;https://apm-host&quot;,      secret_token=&quot;token&quot;,      environment=&quot;test&quot;,      service_version=&quot;2.0.0&quot;)# init sender with apm clienturi = &quot;https://username:password@rabbit-host/virtualhost&quot;rabbit_sender = RabbitHttpSender(uri=uri)rabbit_sender.publish(      event_name=&quot;alian-found&quot;, # Must have a event name when using apm client      exchange_name=&quot;&quot;,      routing_key=&quot;target-queue-name&quot;,      message_body={&quot;magic&quot;: &quot;done&quot;}    )rabbit_sender.publish(      event_name=&quot;alian-found&quot;, # Must have a event name when using apm client      exchange_name=&quot;exchange-1&quot;,      message_body={&quot;magic&quot;: &quot;done&quot;}    )```#### Send MQ with FastAPI apm enabled```pythonfrom elasticapm.contrib.starlette import ElasticAPM, make_apm_clientfrom fastapi import FastAPIapm_client = make_apm_client(    {        &quot;SERVICE_NAME&quot;: &quot;demo-api&quot;,        &quot;SECRET_TOKEN&quot;: &quot;xxxx&quot;,        &quot;SERVER_URL&quot;: &quot;https://apm-host&quot;,        &quot;ENVIRONMENT&quot;: &quot;test&quot;,        &quot;SERVICE_VERSION&quot;: &quot;1.0.0&quot;,    })app = FastAPI()app.add_middleware(ElasticAPM, client=apm_client)# init sender with apm clienturi = &quot;https://username:password@rabbit-host/virtualhost&quot;rabbit_sender = RabbitHttpSender(uri=uri, apm_client=apm_client)rabbit_sender.publish(      event_name=&quot;alian-found&quot;, # Must have a event name when using apm client      exchange_name=&quot;exchange-1&quot;,      message_body={&quot;magic&quot;: &quot;done&quot;}    )```## Progress BarA simple progress bar can display properly on k8s and Grafana.```pythonimport loggingfrom yodo1.progress import ProgressBarlogging.basicConfig(level=&quot;DEBUG&quot;)p = ProgressBar(total=100, desc=&quot;Hacking ...&quot;, step=5)for i in range(100):    p.update()```This is the output```logINFO:yodo1.progress: 12.0%  |&gt;&gt;&gt;&gt;&gt;&gt;                                            | 12/100 Hacking ...INFO:yodo1.progress: 24.0%  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                                      | 24/100 Hacking ...INFO:yodo1.progress: 36.0%  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                                | 36/100 Hacking ...INFO:yodo1.progress: 48.0%  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                          | 48/100 Hacking ...INFO:yodo1.progress: 60.0%  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                    | 60/100 Hacking ...INFO:yodo1.progress: 72.0%  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;              | 72/100 Hacking ...INFO:yodo1.progress: 84.0%  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;        | 84/100 Hacking ...INFO:yodo1.progress: 96.0%  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  | 96/100 Hacking ...INFO:yodo1.progress: 100.0% |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;| 100/100 Hacking ...```Use it with ThreadPoolExecutor.```pythonprogress = ProgressBar(total=1000, desc=&quot;Processing... &quot;)with ThreadPoolExecutor(max_workers=20) as executor:    for index, row in df.iterrows():        future = executor.submit(do_something                                 id=row.id)        # Update progress bar when the job done        future.add_done_callback(lambda x: progress.update())```</longdescription>
</pkgmetadata>