<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># taxopy[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6993581.svg)](https://doi.org/10.5281/zenodo.6993581)A Python package for manipulating NCBI-formatted taxonomic databases. Allows you to obtain complete lineages, determine lowest common ancestors (LCAs), get taxa names from their taxids, and more!## InstallationThere are two ways to install taxopy:  - Using pip:```pip install taxopy```  - Using conda:```conda install -c conda-forge -c bioconda taxopy```## Usage```pythonimport taxopy```First you need to download taxonomic information from NCBI's servers and put this data into a `TaxDb` object:```pythontaxdb = taxopy.TaxDb()# You can also use your own set of taxonomy files:taxdb = taxopy.TaxDb(nodes_dmp=&quot;taxdb/nodes.dmp&quot;, names_dmp=&quot;taxdb/names.dmp&quot;)# If you want to support legacy taxonomic identifiers (that were merged to other identifier), you also need to provide a `merged.dmp` file. This is not necessary if the data is being downloaded from NCBI.taxdb = taxopy.TaxDb(nodes_dmp=&quot;taxdb/nodes.dmp&quot;, names_dmp=&quot;taxdb/names.dmp&quot;, merged_dmp=&quot;taxdb/merged.dmp&quot;)```The `TaxDb` object stores the name, rank and parent-child relationships of each taxonomic identifier:```pythonprint(taxdb.taxid2name[2])print(taxdb.taxid2parent[2])print(taxdb.taxid2rank[2])```    Bacteria    131567    superkingdomIf you want to retrieve the new taxonomic identifier of a legacy identifier you can use the `oldtaxid2newtaxid` attribute:```pythonprint(taxdb.oldtaxid2newtaxid[260])```    143224To get information of a given taxon you can create a `Taxon` object using its taxonomic identifier:```pythonsaccharomyces = taxopy.Taxon(4930, taxdb)human = taxopy.Taxon(9606, taxdb)gorilla = taxopy.Taxon(9593, taxdb)lagomorpha = taxopy.Taxon(9975, taxdb)```Each `Taxon` object stores a variety of information, such as the rank, identifier and name of the input taxon, and the identifiers and names of all the parent taxa:```pythonprint(lagomorpha.rank)print(lagomorpha.name)print(lagomorpha.name_lineage)print(lagomorpha.rank_name_dictionary)```    order    Lagomorpha    ['Lagomorpha', 'Glires', 'Euarchontoglires', 'Boreoeutheria', 'Eutheria', 'Theria', 'Mammalia', 'Amniota', 'Tetrapoda', 'Dipnotetrapodomorpha', 'Sarcopterygii', 'Euteleostomi', 'Teleostomi', 'Gnathostomata', 'Vertebrata', 'Craniata', 'Chordata', 'Deuterostomia', 'Bilateria', 'Eumetazoa', 'Metazoa', 'Opisthokonta', 'Eukaryota', 'cellular organisms', 'root']    {'order': 'Lagomorpha', 'clade': 'Opisthokonta', 'superorder': 'Euarchontoglires', 'class': 'Mammalia', 'superclass': 'Sarcopterygii', 'subphylum': 'Craniata', 'phylum': 'Chordata', 'kingdom': 'Metazoa', 'superkingdom': 'Eukaryota'}You can use the `parent` method to get a `Taxon` object of the parent node of a given taxon:```pythonlagomorpha_parent = lagomorpha.parent(taxdb)print(lagomorpha_parent.rank)print(lagomorpha_parent.name)```    clade    Glires### LCA and majority voteYou can get the lowest common ancestor of a list of taxa using the `find_lca` function:```pythonhuman_lagomorpha_lca = taxopy.find_lca([human, lagomorpha], taxdb)print(human_lagomorpha_lca.name)```    EuarchontogliresYou may also use the `find_majority_vote` to discover the most specific taxon that is shared by more than half of the lineages of a list of taxa:```pythonmajority_vote = taxopy.find_majority_vote([human, gorilla, lagomorpha], taxdb)print(majority_vote.name)```    HomininaeThe `find_majority_vote` function allows you to control its stringency via the `fraction` parameter. For instance, if you would set `fraction` to 0.75 the resulting taxon would be shared by more than 75% of the input lineages. By default, `fraction` is 0.5.```pythonmajority_vote = taxopy.find_majority_vote([human, gorilla, lagomorpha], taxdb, fraction=0.75)print(majority_vote.name)```    EuarchontogliresYou can also assign weights to each input lineage:```pythonmajority_vote = taxopy.find_majority_vote([saccharomyces, human, gorilla, lagomorpha], taxdb)weighted_majority_vote = taxopy.find_majority_vote([saccharomyces, human, gorilla, lagomorpha], taxdb, weights=[3, 1, 1, 1])print(majority_vote.name)print(weighted_majority_vote.name)```    Euarchontoglires    OpisthokontaTo check the level of agreement between the taxa that were aggregated using `find_majority_vote` and the output taxon, you can check the `agreement` attribute.```pythonprint(majority_vote.agreement)print(weighted_majority_vote.agreement)```    0.75    1.0### Taxid from nameIf you only have the name of a taxon, you can get its corresponding taxid using the `taxid_from_name` function:```pythontaxid = taxopy.taxid_from_name('Homininae', taxdb)print(taxid)```    [207598]This function returns a list of all taxonomic identifiers associated with the input name. In the case of homonyms, the list will contain multiple taxonomic identifiers:```pythontaxid = taxopy.taxid_from_name('Aotus', taxdb)print(taxid)```    [9504, 114498]In case a list of names is provided as input, the function will return a list of lists.```pythontaxid = taxopy.taxid_from_name(['Homininae', 'Aotus'], taxdb)print(taxid)```    [[207598], [9504, 114498]]## AcknowledgementsSome of the code used in taxopy was taken from the [CAT/BAT tool for taxonomic classification of contigs and metagenome-assembled genomes](https://github.com/dutilh/CAT).</longdescription>
</pkgmetadata>