<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://explosion.ai&quot;&gt;&lt;img src=&quot;https://explosion.ai/assets/img/logo.svg&quot; width=&quot;125&quot; height=&quot;125&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;# spacy-loggers: Logging utilities for spaCy[![PyPi Version](https://img.shields.io/pypi/v/spacy-loggers.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.python.org/pypi/spacy-loggers)Starting with spaCy v3.2, alternate loggers are moved into a separate packageso that they can be added and updated independently from the core spaCylibrary.`spacy-loggers` currently provides loggers for:- [Weights &amp; Biases](https://www.wandb.com)- [MLflow](https://www.mlflow.org/)- [ClearML](https://www.clear.ml/)- [PyTorch](https://pytorch.org/)- [CuPy](https://github.com/cupy/cupy)`spacy-loggers` also provides additional utility loggers to facilitate interoperationbetween individual loggers.If you'd like to add a new logger or logging option, please submit a PR to thisrepo!## Setup and installation`spacy-loggers` should be installed automatically with spaCy v3.2+, so youusually don't need to install it separately. You can install it with `pip` orfrom the conda channel `conda-forge`:```bashpip install spacy-loggers``````bashconda install -c conda-forge spacy-loggers```# Loggers## WandbLogger### InstallationThis logger requires `wandb` to be installed and configured:```bashpip install wandbwandb login```### Usage`spacy.WandbLogger.v5` is a logger that sends the results of each training stepto the dashboard of the [Weights &amp; Biases](https://www.wandb.com/) tool. To usethis logger, Weights &amp; Biases should be installed, and you should be logged in.The logger will send the full config file to W&amp;B, as well as various systeminformation such as memory utilization, network traffic, disk IO, GPUstatistics, etc. This will also include information such as your hostname andoperating system, as well as the location of your Python executable.`spacy.WandbLogger.v4` and below automatically call the [default console logger](https://spacy.io/api/top-level#ConsoleLogger).However, starting with `spacy.WandbLogger.v5`, console logging must be activatedthrough the use of the [ChainLogger](#chainlogger). This allows the user to configurethe console logger's parameters according to their preferences.**Note** that by default, the full (interpolated)[training config](https://spacy.io/usage/training#config) is sent over to theW&amp;B dashboard. If you prefer to **exclude certain information** such as pathnames, you can list those fields in &quot;dot notation&quot; in the`remove_config_values` parameter. These fields will then be removed from theconfig before uploading, but will otherwise remain in the config file storedon your local system.### Example config```ini[training.logger]@loggers = &quot;spacy.WandbLogger.v5&quot;project_name = &quot;monitor_spacy_training&quot;remove_config_values = [&quot;paths.train&quot;, &quot;paths.dev&quot;, &quot;corpora.train.path&quot;, &quot;corpora.dev.path&quot;]log_dataset_dir = &quot;corpus&quot;model_log_interval = 1000```| Name                   | Type                  | Description                                                                                                                                                                                                                      || ---------------------- | --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || `project_name`         | `str`                 | The name of the project in the Weights &amp; Biases interface. The project will be created automatically if it doesn't exist yet.                                                                                                    || `remove_config_values` | `List[str]`           | A list of values to exclude from the config before it is uploaded to W&amp;B (default: `[]`).                                                                                                                                        || `model_log_interval`   | `Optional[int]`       | Steps to wait between logging model checkpoints to the W&amp;B dasboard (default: `None`). Added in `spacy.WandbLogger.v2`.                                                                                                          || `log_dataset_dir`      | `Optional[str]`       | Directory containing the dataset to be logged and versioned as a W&amp;B artifact (default: `None`). Added in `spacy.WandbLogger.v2`.                                                                                                || `entity`               | `Optional[str]`       | An entity is a username or team name where you're sending runs. If you don't specify an entity, the run will be sent to your default entity, which is usually your username (default: `None`). Added in `spacy.WandbLogger.v3`.  || `run_name`             | `Optional[str]`       | The name of the run. If you don't specify a run name, the name will be created by the `wandb` library (default: `None`). Added in `spacy.WandbLogger.v3`.                                                                        || `log_best_dir`         | `Optional[str]`       | Directory containing the best trained model as saved by spaCy (by default in `training/model-best`), to be logged and versioned as a W&amp;B artifact (default: `None`). Added in `spacy.WandbLogger.v4`.                            || `log_latest_dir`       | `Optional[str]`       | Directory containing the latest trained model as saved by spaCy (by default in `training/model-latest`), to be logged and versioned as a W&amp;B artifact (default: `None`). Added in `spacy.WandbLogger.v4`.                        || `log_custom_stats`     | `Optional[List[str]]` | A list of regular expressions that will be applied to the info dictionary passed to the logger (default: `None`). Statistics and metrics that match these regexps will be automatically logged. Added in `spacy.WandbLogger.v5`. |## MLflowLogger### InstallationThis logger requires `mlflow` to be installed and configured:```bashpip install mlflow```### Usage`spacy.MLflowLogger.v2` is a logger that tracks the results of each training stepusing the [MLflow](https://www.mlflow.org/) tool. To usethis logger, MLflow should be installed. At the beginning of each model trainingoperation, the logger will initialize a new MLflow run and set it as the activerun under which metrics and parameters wil be logged. The logger will then logthe entire config file as parameters of the active run. After each training step,the following actions are performed:- The final score is logged under the metric `score`.- Individual component scores are logged under their default names.- Loss values of different components are logged with the `loss_` prefix.- If the final score is higher than the previous best score (for the current run),  the model artifact is additionally uploaded to MLflow. This action is only performed  if the `output_path` argument is provided during the training pipeline initialization phase.By default, the tracking API writes data into files in a local `./mlruns` directory.`spacy.MLflowLogger.v1` and below automatically call the [default console logger](https://spacy.io/api/top-level#ConsoleLogger).However, starting with `spacy.MLflowLogger.v2`, console logging must be activatedthrough the use of the [ChainLogger](#chainlogger). This allows the user to configurethe console logger's parameters according to their preferences.**Note** that by default, the full (interpolated)[training config](https://spacy.io/usage/training#config) is sent over toMLflow. If you prefer to **exclude certain information** such as pathnames, you can list those fields in &quot;dot notation&quot; in the`remove_config_values` parameter. These fields will then be removed from theconfig before uploading, but will otherwise remain in the config file storedon your local system.### Example config```ini[training.logger]@loggers = &quot;spacy.MLflowLogger.v2&quot;experiment_id = &quot;1&quot;run_name = &quot;with_fast_alignments&quot;nested = Falseremove_config_values = [&quot;paths.train&quot;, &quot;paths.dev&quot;, &quot;corpora.train.path&quot;, &quot;corpora.dev.path&quot;]```| Name                   | Type                       | Description                                                                                                                                                                                                                       || ---------------------- | -------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || `run_id`               | `Optional[str]`            | Unique ID of an existing MLflow run to which parameters and metrics are logged. Can be omitted if `experiment_id` and `run_id` are provided (default: `None`).                                                                    || `experiment_id`        | `Optional[str]`            | ID of an existing experiment under which to create the current run. Only applicable when `run_id` is `None` (default: `None`).                                                                                                    || `run_name`             | `Optional[str]`            | Name of new run. Only applicable when `run_id` is `None` (default: `None`).                                                                                                                                                       || `nested`               | `bool`                     | Controls whether run is nested in parent run. `True` creates a nested run (default: `False`).                                                                                                                                     || `tags`                 | `Optional[Dict[str, Any]]` | A dictionary of string keys and values to set as tags on the run. If a run is being resumed, these tags are set on the resumed run. If a new run is being created, these tags are set on the new run (default: `None`).           || `remove_config_values` | `List[str]`                | A list of values to exclude from the config before it is uploaded to MLflow (default: `[]`).                                                                                                                                      || `log_custom_stats`     | `Optional[List[str]]`      | A list of regular expressions that will be applied to the info dictionary passed to the logger (default: `None`). Statistics and metrics that match these regexps will be automatically logged. Added in `spacy.MLflowLogger.v2`. |## ClearMLLogger### InstallationThis logger requires `clearml` to be installed and configured:```bashpip install clearmlclearml-init```### Usage`spacy.ClearMLLogger.v2` is a logger that tracks the results of each training stepusing the [ClearML](https://www.clear.ml/) tool. To usethis logger, ClearML should be installed and you should have initialized (using the command above).The logger will send all the gathered information to your ClearML server, either [the hosted free tier](https://app.clear.ml)or the open source [self-hosted server](https://github.com/allegroai/clearml-server). This logger captures the following information, all of which is visible in the ClearML web UI:- The full spaCy config file contents.- Code information such as git repository, commit ID and uncommitted changes.- Full console output.- Miscellaneous info such as time, python version and hardware information.- Output scalars:  - The final score is logged under the scalar `score`.  - Individual component scores are grouped together on one scalar plot (filterable using the web UI).  - Loss values of different components are logged with the `loss_` prefix.In addition to the above, the following artifacts can also be optionally captured:- Best model directory (zipped).- Latest model directory (zipped).- Dataset used to train.  - Versioned using ClearML Data and linked to under Configuration -&gt; User Properties on the web UI.`spacy.ClearMLLogger.v1` and below automatically call the [default console logger](https://spacy.io/api/top-level#ConsoleLogger).However, starting with `spacy.ClearMLLogger.v2`, console logging must be activatedthrough the use of the [ChainLogger](#chainlogger). This allows the user to configurethe console logger's parameters according to their preferences.**Note** that by default, the full (interpolated)[training config](https://spacy.io/usage/training#config) is sent over toClearML. If you prefer to **exclude certain information** such as pathnames, you can list those fields in &quot;dot notation&quot; in the`remove_config_values` parameter. These fields will then be removed from theconfig before uploading, but will otherwise remain in the config file storedon your local system.### Example config```ini[training.logger]@loggers = &quot;spacy.ClearMLLogger.v2&quot;project_name = &quot;Hello ClearML!&quot;task_name = &quot;My spaCy Task&quot;model_log_interval = 1000log_best_dir = training/model-bestlog_latest_dir = training/model-lastlog_dataset_dir = corpusremove_config_values = [&quot;paths.train&quot;, &quot;paths.dev&quot;, &quot;corpora.train.path&quot;, &quot;corpora.dev.path&quot;]```| Name                   | Type                  | Description                                                                                                                                                                                                                        || ---------------------- | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || `project_name`         | `str`                 | The name of the project in the ClearML interface. The project will be created automatically if it doesn't exist yet.                                                                                                               || `task_name`            | `str`                 | The name of the ClearML task. A task is an experiment that lives inside a project. Can be non-unique.                                                                                                                              || `remove_config_values` | `List[str]`           | A list of values to exclude from the config before it is uploaded to ClearML (default: `[]`).                                                                                                                                      || `model_log_interval`   | `Optional[int]`       | Steps to wait between logging model checkpoints to the ClearML dasboard (default: `None`). Will have no effect without also setting `log_best_dir` or `log_latest_dir`.                                                            || `log_dataset_dir`      | `Optional[str]`       | Directory containing the dataset to be logged and versioned as a [ClearML Dataset](https://clear.ml/docs/latest/docs/clearml_data/clearml_data/) (default: `None`).                                                                || `log_best_dir`         | `Optional[str]`       | Directory containing the best trained model as saved by spaCy (by default in `training/model-best`), to be logged and versioned as a ClearML artifact (default: `None`)                                                            || `log_latest_dir`       | `Optional[str]`       | Directory containing the latest trained model as saved by spaCy (by default in `training/model-last`), to be logged and versioned as a ClearML artifact (default: `None`)                                                          || `log_custom_stats`     | `Optional[List[str]]` | A list of regular expressions that will be applied to the info dictionary passed to the logger (default: `None`). Statistics and metrics that match these regexps will be automatically logged. Added in `spacy.ClearMLLogger.v2`. |## PyTorchLogger### InstallationThis logger requires `torch` to be installed:```bashpip install torch```### Usage`spacy.PyTorchLogger.v1` is different from the other loggers above in that it does not act as a bridge between spaCy andan external framework. Instead, it is used to query PyTorch-specific metrics and make them available to other loggers.Therefore, it's primarily intended to be used with [ChainLogger](#chainlogger).Whenever a logging checkpoint is reached, it queries statistics from the PyTorch backend and stores them inthe dictionary passed to it. Downstream loggers can thereafter lookup the statistics and log them to theirpreferred framework.The following PyTorch statistics are currently supported:- [CUDA memory statistics](https://pytorch.org/docs/stable/generated/torch.cuda.memory_stats.html#torch.cuda.memory_stats)### Example config```ini[training.logger]@loggers = &quot;spacy.ChainLogger.v1&quot;logger1 = {&quot;@loggers&quot;: &quot;spacy.PyTorchLogger.v1&quot;, &quot;prefix&quot;: &quot;pytorch&quot;, &quot;device&quot;: &quot;0&quot;, &quot;cuda_mem_metric&quot;: &quot;current&quot;}# Alternatively, you can use any other logger that provides the `log_custom_stats` parameter.logger2 = {&quot;@loggers&quot;: &quot;spacy.LookupLogger.v1&quot;, &quot;patterns&quot;: [&quot;pytorch&quot;]}```| Name              | Type  | Description                                                                                                                                                     || ----------------- | ----- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- || `prefix`          | `str` | All metric names are prefixed with this string using dot notation, e.g: `&lt;prefix&gt;.&lt;metric&gt;` (default: `pytorch`).                                               || `device`          | `int` | The identifier of the CUDA device (default: `0`).                                                                                                               || `cuda_mem_pool`   | `str` | One of the memory pool values specified in the PyTorch docs: `all`, `large_pool`, `small_pool` (default: `all`).                                                || `cuda_mem_metric` | `str` | One of the memory metric values specified in the PyTorch docs: `current`, `peak`, `allocated`, `freed`. To log all metrics, use `all` instead (default: `all`). |## CupyLogger### InstallationThis logger requires `cupy` to be installed:```bashpip install cupy```### UsageSimilar to `PyTorchLogger`, `spacy.CupyLogger.v1` does not act as a bridge between spaCy and an external frameworkbut rather is used with the [ChainLogger](#chainlogger) to facilitate the flow of metrics to other loggers.The `CupyLogger` queries statistics from the CuPy backend and stores them in the info dictionary passed to it. Downstreamloggers can thereafter lookup the statistics and log them to their preferred framework.The following CuPy statistics are currently supported:- [CUDA memory pool statistics](https://docs.cupy.dev/en/stable/user_guide/memory.html)### Example config```ini[training.logger]@loggers = &quot;spacy.ChainLogger.v1&quot;logger1 = {&quot;@loggers&quot;: &quot;spacy.CupyLogger.v1&quot;, &quot;prefix&quot;: &quot;cupy&quot;}# Alternatively, you can use any other logger that provides the `log_custom_stats` parameter.logger2 = {&quot;@loggers&quot;: &quot;spacy.LookupLogger.v1&quot;, &quot;patterns&quot;: [&quot;cupy&quot;]}```| Name     | Type  | Description                                                                                                      || -------- | ----- | ---------------------------------------------------------------------------------------------------------------- || `prefix` | `str` | All metric names are prefixed with this string using dot notation, e.g: `&lt;prefix&gt;.&lt;metric&gt;` (default: `&quot;cupy&quot;`). |# Utility Loggers## ChainLogger### UsageThis logger can be used to daisy-chain multiple loggers and execute them in-order. Loggers that are executed earlier in the chaincan pass information to those that come later by adding it to the dictionary that is passed to them.Currently, up to 10 loggers can be chained together.### Example config```ini[training.logger]@loggers = &quot;spacy.ChainLogger.v1&quot;logger1 = {&quot;@loggers&quot;: &quot;spacy.PyTorchLogger.v1&quot;}logger2 = {&quot;@loggers&quot;: &quot;spacy.ConsoleLogger.v1&quot;, &quot;progress_bar&quot;: &quot;true&quot;}```| Name       | Type                 | Description                                        || ---------- | -------------------- | -------------------------------------------------- || `logger1`  | `Optional[Callable]` | The first logger in the chain (default: `None`).   || `logger2`  | `Optional[Callable]` | The second logger in the chain (default: `None`).  || `logger3`  | `Optional[Callable]` | The third logger in the chain (default: `None`).   || `logger4`  | `Optional[Callable]` | The fourth logger in the chain (default: `None`).  || `logger5`  | `Optional[Callable]` | The fifth logger in the chain (default: `None`).   || `logger6`  | `Optional[Callable]` | The sixth logger in the chain (default: `None`).   || `logger7`  | `Optional[Callable]` | The seventh logger in the chain (default: `None`). || `logger8`  | `Optional[Callable]` | The eighth logger in the chain (default: `None`).  || `logger9`  | `Optional[Callable]` | The ninth logger in the chain (default: `None`).   || `logger10` | `Optional[Callable]` | The tenth logger in the chain (default: `None`).   |## LookupLogger### UsageThis logger can be used to lookup statistics in the info dictionary and print them to `stdout`. It is primarilyintended to be used as a tool when developing new loggers.### Example config```ini[training.logger]@loggers = &quot;spacy.ChainLogger.v1&quot;logger1 = {&quot;@loggers&quot;: &quot;spacy.PyTorchLogger.v1&quot;, &quot;prefix&quot;: &quot;pytorch&quot;}logger2 = {&quot;@loggers&quot;: &quot;spacy.LookupLogger.v1&quot;, &quot;patterns&quot;: [&quot;^[pP]ytorch&quot;]}```| Name       | Type        | Description                                                                                          || ---------- | ----------- | ---------------------------------------------------------------------------------------------------- || `patterns` | `List[str]` | A list of regular expressions. If a statistic's name matches one of these, it's printed to `stdout`. |## Bug reports and other issuesPlease use [spaCy's issue tracker](https://github.com/explosion/spaCy/issues) to report a bug, or open a new thread on the[discussion board](https://github.com/explosion/spaCy/discussions)for any other issue.</longdescription>
</pkgmetadata>