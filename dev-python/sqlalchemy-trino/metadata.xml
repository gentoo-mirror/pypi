<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>sqlalchemy-trino================## ⚠️ Deprecation and Archive Notice`sqlalchemy-trino` was developed as _[Trino](https://trino.io/) (f.k.a PrestoSQL) dialect for SQLAlchemy._Since trinodb/trino-python-client#81, all code of `sqlalchemy-trino` is donated and merged into upstream project.So now, this project is no longer active and consider as deprecated.## Supported Trino versionTrino version 352 and higher## InstallationThe driver can either be installed through PyPi or from the source code.### Through Python Package Index```bashpip install sqlalchemy-trino```### Latest from Source Code```bashpip install git+https://github.com/dungdm93/sqlalchemy-trino```## UsageTo connect from SQLAlchemy to Trino, use connection string (URL) following this pattern:```trino://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/catalog/[schema]```### JWT authenticationYou can pass the JWT token via either `connect_args` or the query stringparameter `accessToken`:```Pythonfrom sqlalchemy.engine import create_enginefrom trino.auth import JWTAuthentication# pass access token via connect_argsengine = create_engine(  'trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/',  connect_args={'auth': JWTAuthentication('a-jwt-token')},)# pass access token via the query string param accessTokenengine = create_engine(  'trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/?accessToken=a-jwt-token',)```**Notice**: When using username and password, it will connect to Trino over TLSconnection automatically.### User impersonationIt supports user impersonation with username and password based authentication only.You can pass the session user (a.k.a., the user that will be impersonated) viaeither [`connect_args`](https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine.params.connect_args)or the query string parameter `sessionUser`:```Pythonfrom sqlalchemy.engine import create_engine# pass session user via connect_argsengine = create_engine(  'trino://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/',  connect_args={'user': 'user-to-be-impersonated'},)# pass session user via a query string parameterengine = create_engine(  'trino://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/?sessionUser=user-to-be-impersonated',)```### Pandas support```pythonimport pandas as pdfrom pandas import DataFrameimport sqlalchemy_trinofrom sqlalchemy.engine import Engine, Connectiondef trino_pandas_write(engine: Engine):    df: DataFrame = pd.read_csv(&quot;tests/data/population.csv&quot;)    df.to_sql(con=engine, schema=&quot;default&quot;, name=&quot;abcxyz&quot;, method=&quot;multi&quot;, index=False)    print(df)def trino_pandas_read(engine: Engine):    connection: Connection = engine.connect()    df = pd.read_sql(&quot;SELECT * FROM public.foobar&quot;, connection)    print(df)```**Note**: in `df.to_sql` following params is required:* `index=False` because index is not supported in Trino.* `method=&quot;multi&quot;`: currently `method=None` (default) is not working because Trino dbapi is not support [`executemany`](https://github.com/trinodb/trino-python-client/blob/77adbc48cd5061b2c55e56225d67dd7822284b73/trino/dbapi.py#L410-L411) yet</longdescription>
</pkgmetadata>