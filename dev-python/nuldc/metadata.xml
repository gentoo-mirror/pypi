<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nuldcA simple CLI for consuming [Northwestern University Libraries Digital Collections API](https://api.dc.library.northwestern.edu/). It also includes a set of python helpers for rolling your own scripts.## Quickstart### Install it`pip install nuldc````‚ùØ nuldc --helpNULDCUSAGE:    nuldc works &lt;id&gt; [--as=&lt;format&gt;]    nuldc collections &lt;id&gt; [--as=&lt;format&gt; --all]    nuldc search &lt;query&gt; [--model=&lt;model&gt;] [--as=&lt;format&gt;] [--all]    nuldc csv &lt;query&gt; [--fields=&lt;fields&gt;] [--all] &lt;outfile&gt;    nuldc xml &lt;query&gt; [--all] &lt;outfile&gt;    nuldc --versionOPTIONS:    --as=&lt;format&gt;      get results as [default: opensearch]    --model=&lt;model&gt;    search model (works,collections,filesets) [default: works]    --all              get all records from search    --fields=&lt;fields&gt;  optional set of fields,e.g id,ark,test defaults to all    -h --help          Show this screenARGUMENTS:    as: opensearch        iiif```## Examples### Get a workLet's get a work's manifest`nuldc works c1960aac-74f0-4ce8-a795-f713b2e3cc22`Maybe we should grab that work as a IIIF manifest.`nuldc works c1960aac-74f0-4ce8-a795-f713b2e3cc22 --as iiif`### Get collection's metadata`nuldc collections ecacd539-fe38-40ec-bbc0-590acee3d4f2`or get metadata  as iiif`nuldc collections ecacd539-fe38-40ec-bbc0-590acee3d4f2 --as iiif`Get the whole collection as IIIF, stitching together all the pages`nuldc collections ecacd539-fe38-40ec-bbc0-590acee3d4f2 --as iiif --all`### Search for thingsSimple search`nuldc search &quot;berkeley AND guitars&quot;`Page through all the results and return one big list of items (limit 200 pages)`nuldc search &quot;trains AND chicago&quot; --all`as iiif`nuldc search &quot;trains AND chicago&quot; --as iiif --all`### Save to CSVDumping to CSV is simple. By default it dumps all the fields that are &quot;label&quot;. If you need to dig intospecific fields you can do that as well. `nuldc csv &quot;trains AND chicago&quot; --all example.csv`Let's grab just a few fields. `nuldc csv &quot;trains AND chicago&quot; --all --fields id,title,ark example.csv`It also supports &quot;dot&quot; notation for getting into nested, special purpose fields.`nuldc csv &quot;trains AND chicago&quot; --all --fields id,title,ark,subject.id example.csv`### Save to xmlYou can export search results to an xml serialization of the data structure as well.`nuldc xml &quot;trains AND chicago&quot; out.xml`Or get all the records`nuldc xml &quot;trains AND chicago&quot; --all all.xml`### Pipeable and Works great with jq!All of this is pipe-able too, so if you want to do further analysis with JQ or pipe data through some otherprocessing pipeline, go for it! For instance, let's grab just a coupld of fields from the json and reformat it into a simplified shape.`nuldc search &quot;berkeley AND guitars&quot; --all | jq -r '.data[] | [.title,.id]`### Advanced SearchYou can search within specific fields and perform complex searches using the opensearch/elasticsearch [query-string-query syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax). The query syntax is valid for all &quot;search&quot; operations: search, csv, xml. #### Examples:Get a csv file of all works that have a fileset label including &quot;recto&quot;`nuldc csv &quot;file_sets.label:Recto*&quot; ~/Desktop/rectos.csv`Look at results that have a subject that includes &quot;Chicago&quot;`nuldc search &quot;subject.label:*Chicago*&quot;`Get Results that have a subject of &quot;Chicago&quot; AND a title of &quot;Bus&quot;`nuldc search &quot;subject.label:*Chicago* AND title:bus&quot;`Get results from a known collection that were modified before a certain date:`nuldc search &quot;modified_date:&lt;2022-10-01 AND collection.title:Berkeley*&quot;`## DevelopmentThis project is built using [POETRY](https://python-poetry.org/). Follow the latest install instructions, clone the repository and `poetry install`.### TestsThis project uses pytest and has a very small set of tests to ensure things are running as expected.From a `poetry shell` run `pytest`.</longdescription>
</pkgmetadata>