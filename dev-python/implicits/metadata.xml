<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ImplicitsGlobal state can be hard to reason about, but piping dependencies from function to function is a pain. With implicits, you _explicitly_ which function parameters are _implicit_ dependencies. When you call the function, no need to explicilty provide these parameters; instead, the parameters will be implicitly passed! All that's required is that there exists local variables in scope that match the names of the parameters you're calling.```python3@implicits(&quot;current_user&quot;)def create_task(title, *, current_user):    print(f&quot;{current_user} created a task titled '{title}'&quot;)current_user = &quot;Jaden&quot;create_task(&quot;Hooray, a task!&quot;) # Jaden created a task titled 'Hooray, a task!'create_task(&quot;Buy some trackpants&quot;) # Jaden created a task titled 'Buy some trackpants'```## Usage1) Install via `pip install implicits`.2) Import with `from implicits import implicits`.3) Decorate using `@implicits(&quot;names&quot;, &quot;of&quot;, &quot;implicit&quot;, &quot;parameters&quot;)`.## Example```python3import loggingimport boto3from implicits import implicitsclass Giraffe:    @implicits(&quot;logger&quot;)    def __init__(self, name, *, logger):        self.name = name        logger.info(f&quot;Creating a Giraffe named {name}&quot;)    @property    @implicits(&quot;logger&quot;)    def full_name(self, *, logger):        logger.info(f&quot;Getting {self.name}'s full name&quot;)        return f&quot;{self.name} the Giraffe&quot;    @property    @implicits(&quot;food&quot;)    def is_hungry(self, *, food):        return &quot;leaves&quot; in food@implicits(&quot;logger&quot;)def main(*, logger):    jeff = Giraffe(&quot;Jeff&quot;) # Creating a Giraffe named Jeff    name = jeff.full_name  # Getting Jeff's full name    food = [&quot;rocks&quot;, &quot;dirt&quot;]    logger.info(jeff.is_hungry) # False    food.append(&quot;leaves&quot;)    logger.info(jeff.is_hungry) # Truelogger = logging.getLogger()logger.setLevel(logging.INFO)logger.addHandler(logging.StreamHandler())main()```## ReferencesI didn't invent this idea! Quite a few other languages support implicit parameters. The most mainstream of these languages is Scala. [Check out how implicits work in Scala!](https://docs.scala-lang.org/tour/implicit-parameters.html)</longdescription>
</pkgmetadata>