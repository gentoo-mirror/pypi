<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![example workflow](https://github.com/elmkarami/sqlalchemy-filters-plus/actions/workflows/release.yml/badge.svg)![example workflow](https://github.com/elmkarami/sqlalchemy-filters-plus/actions/workflows/main.yml/badge.svg)[![codecov](https://codecov.io/gh/elmkarami/sqlalchemy-filters-plus/branch/master/graph/badge.svg?token=I7ZC1WQYEQ)](https://codecov.io/gh/elmkarami/sqlalchemy-filters-plus)sqlalchemy-filters-plus is a light-weight extendable library for filtering queries with sqlalchemy.Install-```bashpip install sqlalchemy-filters-plus```Usage-----This library provides an easy way to filter your SQLAlchemy queries,which can for example be used by your users as a filtering mechanism for your exposed models via an API.Let's define an example of models that will be used as a base query.```pythonfrom sqlalchemy import Column, Date, Integer, String, ForeignKeyfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import relationship, backrefBase = declarative_base()class User(Base):    id = Column(Integer, primary_key=True)    email = Column(String)    age = Column(Integer)    birth_date = Column(Date, nullable=False)class Article(Base):    id = Column(Integer, primary_key=True)    title = Column(String)    user_id = Column(Integer, ForeignKey(User.id), nullable=False)    user = relationship(        User,        uselist=False,        lazy=&quot;select&quot;,        backref=backref(&quot;articles&quot;, uselist=True, lazy=&quot;select&quot;),    )```Define your first filter========================Let's then define our first Filter class for the Article model```pythonfrom sqlalchemy_filters import Filter, StringFieldfrom sqlalchemy_filters.operators import ContainsOperatorclass ArticleFilter(Filter):    title = StringField(lookup_operator=ContainsOperator)    email = StringField(field_name=&quot;user.email&quot;)    class Meta:        model = Article        session = my_sqlalchemy_session```The example above defines a new filter class attached to the Article model, we declared two fields to filter with, ``title`` with the lookup_operator ``ContainsOperator`` and an ``email`` field which points to the user's email, hence the `field_name=&quot;user.email&quot;` without any lookup_operator (default value is ``EqualsOperator``) that will be used to filter with on the database level. We will see other operators that can also be used.To apply the filter class, we instantiate it and pass it the data(as a dictionary) to filter with.```pythonmy_filter = ArticleFilter(data={&quot;email&quot;: &quot;some@email.com&quot;, &quot;title&quot;: &quot;python&quot;})query = my_filter.apply()  # query is a SQLAlchemy Query object```    Please read the full documentation here https://sqlalchemy-filters-plus.readthedocs.io/</longdescription>
</pkgmetadata>