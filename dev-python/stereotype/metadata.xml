<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># stereotype[![readthedocs.org](https://readthedocs.org/projects/stereotype/badge/?version=latest)](https://stereotype.readthedocs.io/en/latest/)[![codecov.io](https://codecov.io/github/petee-d/stereotype/coverage.svg?branch=master)](https://codecov.io/github/petee-d/stereotype)Stereotype is a performance-focused Python 3.8+ library for providing a structure for your data and validating it.The models allow fast &amp; easy conversion between primitive data and well-typed Python classes.Stereotype is heavily influenced by the beauty of [dataclasses](https://docs.python.org/3/library/dataclasses.html)and versatility of [Schematics](https://schematics.readthedocs.io/), while having much better performance - both interms of CPU usage and memory footprint. While it wasn't an influence, it is somewhat similar to[Pydantic](https://pydantic-docs.helpmanual.io/), but also beats it in benchmarks and provides easier validation.Stereotype supports Python 3.8 and above (future support for older versions of Python is highly unlikely) andhas 100% test coverage.## Features- Fields  - All JSON atomic types - `bool`, `int`, `float`, `str`, `Optional[*]`  - Compound fields - `List[*]` of any type or a `Dict[*, *]` of atomic types to any type  - Model nesting - `Model` subclass fields, including recursive definitions  - Dynamic model fields - `Model` subclass fields resolved using a string `type` key  - Free-form fields using `Any`  - Calculated `serializable` fields - a `property` present also in serialized data  - Schematics compatibility field, custom fields can be defined- Validation  - Basic built-in validation helpers for most fields  - Custom field validator callbacks  - Custom `Model` instance validation methods  - Validation separate from conversion, multiple validation errors reported with paths- Conversion &amp; serialization  - Optional field defaults using atomic values or callables  - Renaming or disabling fields for purposes of input/output/both  - Optional hiding of `None` values from output  - Serialization roles using field blacklists or whitelists, with inheritance or overriding&lt;!--- Update docs/index.rst end-line if this line moves! --&gt;## Documentation[**Full documentation of stereotype**](https://stereotype.readthedocs.io/en/latest/)### Brief usage example```pythonfrom typing import Optional, Listfrom stereotype import Model, StrField, FloatFieldclass Movie(Model):    name: str    genre: str = StrField(choices=(&quot;Comedy&quot;, &quot;Action&quot;, &quot;Family&quot;, &quot;Drama&quot;))    ratings: Optional[float] = FloatField(min_value=1, max_value=10, default=None)    cast: List[CastMember] = []class CastMember(Model):    name: strmovie = Movie({&quot;name&quot;: &quot;Monty Python and the Holy Grail&quot;, &quot;genre&quot;: &quot;Comedy&quot;, &quot;ratings&quot;: 8.2})movie.validate()movie.cast.append(CastMember({&quot;name&quot;: &quot;John Cleese&quot;}))print(movie.serialize())```See the [Tutorial](https://stereotype.readthedocs.io/en/latest/tutorial.html)for more examples with detailed explanations.## Issues &amp; contributingPlease see the [Contribution guide](https://github.com/petee-d/stereotype/blob/master/CONTRIBUTING.md)</longdescription>
</pkgmetadata>