<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Study Watch Python SDKThe adi-study-watch provides an object-oriented interface for interacting with ADI's VSM study watch platform.**Installation**```pythonpip install adi-study-watch```**Description**A user application can use the SDK to receive complete packets of bytes over a physical interface (USB or BLE) anddecode it. The functionality is organized into applications, some of which own sensors, some own system-levelfunctionality (i.e. file system), and while others own algorithms. The hierarchy of objects within the SDK mirrors theapplications present on the device. Each application has its own object within the SDK hierarchy, which is used tointeract with that application. A brief guide on using the SDK and few examples have been added below.**Firmware Setup**https://github.com/analogdevicesinc/study-watch-sdk/blob/main/firmware/Study_Watch_Firmware_Upgrade.pdf**Getting started with SDK**Import the adi-study-watch module into your application code```pythonfrom adi_study_watch import SDK```Instantiate the SDK object by passing the com port number```pythonsdk = SDK('COM28')```The application objects can be instantiated from the sdk object. In order to instantiate an application object, we'llhave to pass a call-back function as an input argument which can be used to retrieve the data from the applicationobject. Define a callback function as displayed below.```pythondef adxl_cb(data):    print(data)```Once the call-back function is defined, you can instantiate the application object as shown below.```pythonadxl_app = sdk.get_adxl_application()adxl_app.set_callback(adxl_cb)```Each application object has various methods that can be called by referring to the application. An example of retrievingthe sensor status is shown below. Almost all method in an application returns result in a dict.```pythonpacket = adxl_app.get_sensor_status() # returns dictprint(packet)```**Basic Example:**```pythonimport timefrom datetime import datetimefrom adi_study_watch import SDK# callback function to receive adxl datadef callback_data(data):    sequence_number = data[&quot;payload&quot;][&quot;sequence_number&quot;]    for stream_data in data[&quot;payload&quot;][&quot;stream_data&quot;]:        dt_object = datetime.fromtimestamp(stream_data['timestamp'] / 1000)  # convert timestamp from ms to sec.        print(f&quot;seq :{sequence_number} timestamp: {dt_object} x,y,z :: ({stream_data['x']}, &quot;              f&quot;{stream_data['y']}, {stream_data['z']})&quot;)if __name__ == &quot;__main__&quot;:    sdk = SDK(&quot;COM4&quot;)    application = sdk.get_adxl_application()    application.set_callback(callback_data)    # quickstart adxl stream    application.start_sensor()    application.enable_csv_logging(&quot;adxl.csv&quot;) # logging adxl data to csv file    application.subscribe_stream()    time.sleep(10)    application.unsubscribe_stream()    application.disable_csv_logging()    application.stop_sensor()```# Permission Issue in Ubuntu1 - You can run your script with admin (sudo).2 - If you don't want to run scripts as admin follows the steps below:- add user to `tty` and `dialout` group```sudo usermod -aG tty &lt;user&gt;sudo usermod -aG dialout &lt;user&gt;```- create a file at `/etc/udev/rules.d/` with name `10-adi-usb.rules`:```ACTION==&quot;add&quot;, SUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;0456&quot;, ATTRS{idProduct}==&quot;2cfe&quot;, MODE=&quot;0666&quot;, GROUP=&quot;dialout&quot;```- reboot**All streams packet structure :**https://analogdevicesinc.github.io/study-watch-sdk/python/_rst/adi_study_watch.core.packets.html#module-adi_study_watch.core.packets.stream_data_packets**Documentation :**https://analogdevicesinc.github.io/study-watch-sdk/python**Examples :**https://github.com/analogdevicesinc/study-watch-sdk/tree/main/python/samples**License :**https://github.com/analogdevicesinc/study-watch-sdk/blob/main/LICENSE**Changelog**https://github.com/analogdevicesinc/study-watch-sdk/blob/main/python/CHANGELOG.md</longdescription>
</pkgmetadata>