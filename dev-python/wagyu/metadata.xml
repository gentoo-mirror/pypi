<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>wagyu=====[![](https://dev.azure.com/lycantropos/wagyu/_apis/build/status/lycantropos.wagyu?branchName=master)](https://dev.azure.com/lycantropos/wagyu/_build/latest?definitionId=28&amp;branchName=master &quot;Azure Pipelines&quot;)[![](https://codecov.io/gh/lycantropos/wagyu/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/wagyu &quot;Codecov&quot;)[![](https://img.shields.io/github/license/lycantropos/wagyu.svg)](https://github.com/lycantropos/wagyu/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/wagyu.svg)](https://badge.fury.io/py/wagyu &quot;PyPI&quot;)In what follows `python` is an aliasfor `python3.5` or `pypy3.5` or any later version(`python3.6`, `pypy3.6` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions:```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository:```bashpython -m pip install --upgrade wagyu```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/wagyu.gitcd wagyu```Install setup dependencies:```bashpython -m pip install --force-reinstall -r requirements-setup.txt```Install:```bashpython setup.py install```Usage-----```python&gt;&gt;&gt; from wagyu.enums import PolygonKind&gt;&gt;&gt; from wagyu.linear_ring import LinearRing&gt;&gt;&gt; from wagyu.point import Point&gt;&gt;&gt; from wagyu.polygon import Multipolygon, Polygon&gt;&gt;&gt; from wagyu.wagyu import Wagyu&gt;&gt;&gt; lower_triangle = Polygon([LinearRing([Point(0, 0), Point(6, 0), Point(3, 3), Point(0, 0)])])&gt;&gt;&gt; upper_triangle = Polygon([LinearRing([Point(3, 1), Point(6, 4), Point(0, 4), Point(3, 1)])])&gt;&gt;&gt; wagyu = Wagyu()&gt;&gt;&gt; wagyu.add_polygon(lower_triangle, PolygonKind.SUBJECT)True&gt;&gt;&gt; wagyu.add_polygon(upper_triangle, PolygonKind.CLIP)True&gt;&gt;&gt; (wagyu.intersect()...  == Multipolygon([Polygon([LinearRing([Point(3, 1), Point(4, 2), Point(3, 3), Point(2, 2), Point(3, 1)])])]))True&gt;&gt;&gt; (wagyu.unite()...  == Multipolygon([Polygon([LinearRing([Point(6, 0), Point(4, 2), Point(6, 4), Point(0, 4), Point(2, 2), Point(0, 0), Point(6, 0)])])]))True&gt;&gt;&gt; (wagyu.symmetric_subtract()...  == Multipolygon([Polygon([LinearRing([Point(4, 2), Point(3, 1), Point(2, 2), Point(0, 0), Point(6, 0), Point(4, 2)])]),...                   Polygon([LinearRing([Point(4, 2), Point(6, 4), Point(0, 4), Point(2, 2), Point(3, 3), Point(4, 2)])])]))True&gt;&gt;&gt; (wagyu.subtract()...  == Multipolygon([Polygon([LinearRing([Point(6, 0), Point(4, 2), Point(3, 1), Point(2, 2), Point(0, 0), Point(6, 0)])])]))True```for `CPython` original C++ implementation can be invoked by importing from `_wagyu` module instead.Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies:```bashpython -m pip install --force-reinstall -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script (e.g. can be used in `Git` hooks):- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script (e.g. can be used in `Git` hooks):- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>