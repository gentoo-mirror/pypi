<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======AFP CLI=======.. image:: https://travis-ci.org/ImmobilienScout24/afp-cli.png?branch=master   :alt: Travis build status image   :target: https://travis-ci.org/ImmobilienScout24/afp-cli.. image:: https://coveralls.io/repos/ImmobilienScout24/afp-cli/badge.png?branch=master    :alt: Coverage status    :target: https://coveralls.io/r/ImmobilienScout24/afp-cli?branch=master.. image:: https://landscape.io/github/ImmobilienScout24/afp-cli/master/landscape.svg?style=flat   :target: https://landscape.io/github/ImmobilienScout24/afp-cli/master   :alt: Code Health.. image:: https://img.shields.io/pypi/v/afp-cli.svg   :alt: Version   :target: https://pypi.python.org/pypi/afp-cliOverview========The AFP CLI is the command line interface to access theAWS Federation Proxy (AFP).Its main use case is starting a new shell where your temporaryAWS credentials have been exported into the environment.Installation============The tool is `hosted on PyPi &lt;https://pypi.python.org/pypi/afp-cli&gt;`_ and can beinstalled using the usual Python specific mechanisms, e.g.:.. code-block:: console   $ pip install afp-cliConfiguration=============The ``afp`` command can be configured through yaml files inthe following directories:* ``/etc/afp-cli/*.yaml`` (global configuration)* ``$HOME/.afp-cli/*.yaml`` (per-user configuration)The yaml files are read in lexical order and merged via`yamlreader &lt;https://github.com/ImmobilienScout24/yamlreader&gt;`_.The following configuration options are supported:* ``api_url: &lt;api-url&gt;``  Defaults to lookup a FQDN of a host named ``afp`` via DNS and construct  the server url from it: ``https://{FQDN}/afp-api/latest``  The specified url must contain full server url (not just the FQDN).  This option always takes precedence over ``server``* ``server: &lt;server&gt;``  The AFP server to use. No default value.  If not overridden by ``api_url`` (see above), ``api_url`` will  become ``http://&lt;server&gt;//afp-api/latest``* ``user: &lt;username&gt;``  Defaults to the currently logged in user-name* ``password-provider: &lt;provider&gt;``  Viable options are: ``prompt`` (default) to prompt for the password during  every interaction with the AFP server or ``keyring`` to use the Python  ``keyring`` module. For more info about using the ``keyring`` module, see  below.Example:.. code-block:: yaml    user: myuser    api_url: https://afp-server.my.domain/afp-api/latest    password-provider: keyringUsage=====Get Help Text-------------.. code-block:: console    $ afp [-h | --help]List Available Account Names and Roles--------------------------------------For the currently logged-in user:.. code-block:: console    $ afpThe same for another user:.. code-block:: console    $ afp --user=usernameOutput format:::    &lt;accountname&gt;    &lt;role1&gt;,&lt;role2&gt;,...,&lt;roleN&gt;Example output:::    abc_account    some_role_in_abc_account    xyz_account    some_role_in_yxz_account,another_role_in_xyzObtain AWS Credentials----------------------This starts a subshell in which the credentials have been exported into theenvironment. Use the ``exit`` command or press **CTRL+D** to terminate thesubshell.Use credentials for currently logged in user and specified account and role:.. code-block:: console    $ afp accountname rolenameUse credentials for the currently logged in user for the *first* role:.. code-block:: console    $ afp accountnameAs above, but specifying a different user:.. code-block:: console    $ afp --user=username accountname rolenameSpecify the URL of the AFP server, overriding any config file:.. code-block:: console    $ afp --api-url=https://afp-server.my.domain/afp-api/latestShow and Export---------------In case you don't want to start a subshell or are using something other thanbash, you can use ``--show`` or ``--export`` to display the credentials. Youcan use the usual UNIX tools to add/remove them from your environment.``--show`` will just show them and ``--export`` will show them in a formatsuitable for an export into your environment, i.e. prefixed with ``export`` forUNIX and ``set`` for Windows... code-block:: console   $ afp --show &lt;myaccount&gt; [&lt;myrole&gt;]   Password for myuser:   AWS_VALID_SECONDS='600'   AWS_SESSION_TOKEN='XXX'   AWS_SECURITY_TOKEN='XXX'   AWS_SECRET_ACCESS_KEY='XXX'   AWS_EXPIRATION_DATE='1970-01-01T01:00:00Z'   AWS_ACCESS_KEY_ID='XXX'.. code-block:: console   $ afp --export &lt;myaccount&gt; [&lt;myrole&gt;]   Password for myuser:   export AWS_VALID_SECONDS='600'   export AWS_SESSION_TOKEN='XXX'   export AWS_SECURITY_TOKEN='XXX'   export AWS_SECRET_ACCESS_KEY='XXX'   export AWS_EXPIRATION_DATE='1970-01-01T01:00:00Z'   export AWS_ACCESS_KEY_ID='XXX'The following examples work in zsh, to add and remove them from yourenvironment:Adding credentials:.. code-block:: console   $ eval $(afp --export &lt;accountname&gt;)Removing them again:.. code-block:: console    $ env | grep AWS | cut -f 1 -d'=' | while read line ; do ; unset $line ; done ;Write to AWS Credentials File-----------------------------The AWS tools read credentials specified with ``aws configure`` from a localfile named ``credentials`` in a folder named ``.aws`` in your home directory.The afp-cli tool can write your temporary credentials to this file... code-block:: console   $ afp --write &lt;myaccount&gt; [&lt;myrole&gt;]Configuration Settings and Precedence-------------------------------------Please read the section on `Configuration Settings and Precedence&lt;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence&gt;`_from the AWS documentation.Interface with the System Keyring---------------------------------Starting with version ``1.3.0``, experimental support for the `Python keyringmodule &lt;https://pypi.python.org/pypi/keyring&gt;`_ has been implemented. This hasbeen tested with the Gnome Keyring and Max OS X Keychain but supposedly alsoworks with Windows Credential Vault. You can configure this feature using theconfig file as shown above or with a command-line switch.Example command-line:.. code-block:: console   $ afp --password-provider keyring   No password found in keychain, please enter it now to store it.   Password for user:You will be prompted for your password the first time. Notethat if you fail to enter the password correctly, the incorrect version will bestored. Note further that if you are using the Gnome-Keychain you can use thetool ``seahorse`` to update and delete saved passwords, in this case for theservice ``afp``.Keyring on MacOS X~~~~~~~~~~~~~~~~~~On some MacOS systems, storing the password works fine, but fetching it fails with `Can't fetch password from system &lt;https://github.com/ImmobilienScout24/afp-cli/issues/65&gt;`_. This is due to a `change in the 'keyring' module &lt;https://github.com/jaraco/keyring/issues/219&gt;`_, introduced in version 9.0. As a workaround, downgrade to the previous version with ``pip install keyring==8.7``Keyring with Gnome-Keychain~~~~~~~~~~~~~~~~~~~~~~~~~~~There is an intricate caveat when using the ``keyring`` module withGnome-Keychain. But before discussing this, it is important to mention thatthe keyring module uses another module, namely ``secretstorage`` under thehood.In order for the ``keyring`` module to correctly use the Gnome Keychain thePython module `PyGObject aka gi&lt;https://wiki.gnome.org/action/show/Projects/PyGObject?action=show&amp;redirect=PyGObject&gt;`_is required. As stated on the project website: &quot;PyGObject is a Python extensionmodule that gives clean and consistent access to the entire GNOME softwareplatform through the use of GObject Introspection.&quot; Now, unfortunately, eventhough this project is `available on PyPi&lt;https://pypi.python.org/pypi/PyGObject&gt;`_ it can not be installed from thereusing ``pip`` due to issues with the build system. It is however available as asystem package for Ubuntu distributions as ``python-gi``.Long story short, in order to use the ``keyring`` module from ``afp-cli`` you need to havethe ``gi`` module available to your Python interpreter. You can achieve this,for example, by doing a global install of ``afp-cli`` using something like``sudo pip install afp-cli`` or install it into a virtual environment that usesthe system site packages because it has been created with the``--system-site-packages`` flag. In case the ``gi`` module is not available andyou try to use the ``keyring`` module anyway, ``afp-cli`` will exit with anappropriate error message.  Lastly, if in doubt, you can use the ``--debug``switch to check at runtime which backend was selected.License=======Copyright 2015,2016 Immobilien Scout GmbHLicensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not usethis file except in compliance with the License. You may obtain a copy of theLicense athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, software distributedunder the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES ORCONDITIONS OF ANY KIND, either express or implied. See the License for thespecific language governing permissions and limitations under the License.See Also========See Hologram_ for another solution that brings temporary AWS credentials ontodeveloper desktops... _Hologram: https://github.com/AdRoll/hologram</longdescription>
</pkgmetadata>