<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Action Rules [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)Action Rules (actionrules) is an implementation of Action Rules from Classification Rules algorithm described in```Dardzinska, A. (2013). Action rules mining. Berlin: Springer.```If you use this package, please cite:```Sýkora, Lukáš, and Tomáš Kliegr. &quot;Action Rules: Counterfactual Explanations in Python.&quot; RuleML Challenge 2020. CEUR-WS. ``` http://ceur-ws.org/Vol-2644/paper36.pdf## GIT repositoryhttps://github.com/lukassykora/actionrules## Installationpip install actionrules-lukassykora## Jupyter Notebooks- [Titanic](https://github.com/lukassykora/actionrules/blob/master/notebooks/Titanic%20-%20Action%20Rules.ipynb) It is the best explanation of all possibilities.- [Telco](https://github.com/lukassykora/actionrules/blob/master/notebooks/Telco%20-%20Action%20Rules.ipynb) A brief demonstration.- [Ras](https://github.com/lukassykora/actionrules/blob/master/notebooks/Ras%20-%20Acton%20Rules.ipynb) Based on the example in (Ras, Zbigniew W and Wyrzykowska, ARAS: Action rules discovery based on agglomerative strategy, 2007). - [Attrition](https://github.com/lukassykora/actionrules/blob/master/notebooks/Employee%20Attrition%20-%20High%20Utility%20Action%20Rules.ipynb) High-Utility Action Rules Mining example.## Example 1Get data from csv.Get action rules from classification rules. Classification rules have confidence 55% and support 3%.Stable part of action rule is &quot;Age&quot;.Flexible attributes are &quot;Embarked&quot;, &quot;Fare&quot;, &quot;Pclass&quot;.Target is a Survived value 1.0.No nan values.Use reduction tables for speeding up.Minimal 1 stable antecedentMinimal 1 flexible antecedent```pythonfrom actionrules.actionRulesDiscovery import ActionRulesDiscoveryactionRulesDiscovery = ActionRulesDiscovery()actionRulesDiscovery.read_csv(&quot;data/titanic.csv&quot;, sep=&quot;\t&quot;)actionRulesDiscovery.fit(stable_attributes = [&quot;Age&quot;],                         flexible_attributes = [&quot;Embarked&quot;, &quot;Fare&quot;, &quot;Pclass&quot;],                         consequent = &quot;Survived&quot;,                         conf=55,                         supp=3,                         desired_classes = [&quot;1.0&quot;],                         is_nan=False,                         is_reduction=True,                         min_stable_attributes=1,                         min_flexible_attributes=1,                         max_stable_attributes=5,                         max_flexible_attributes=5)actionRulesDiscovery.get_action_rules()```The output is a list where the first part is an action rule and the second part is a tuple of (support before, support after, action rule support) and (confidence before, confidence after, action rule confidence).## Example 2Get data from pandas dataframe.Get action rules from classification rules. Classification rules have confidence 50% and support 3%.Stable attributes are &quot;Age&quot; and &quot;Sex&quot;.Flexible attributes are &quot;Embarked&quot;, &quot;Fare&quot;, &quot;Pclass&quot;.Target is a Survived that changes from 0.0 to 1.0.No nan values.Use reduction tables for speeding up.Minimal 1 stable antecedentMinimal 1 flexible antecedent```pythonfrom actionrules.actionRulesDiscovery import ActionRulesDiscoveryimport pandas as pddataFrame = pd.read_csv(&quot;data/titanic.csv&quot;, sep=&quot;\t&quot;)actionRulesDiscovery = ActionRulesDiscovery()actionRulesDiscovery.load_pandas(dataFrame)actionRulesDiscovery.fit(stable_attributes = [&quot;Age&quot;, &quot;Sex&quot;],                         flexible_attributes = [&quot;Embarked&quot;, &quot;Fare&quot;, &quot;Pclass&quot;],                         consequent = &quot;Survived&quot;,                         conf=50,                         supp=3,                         desired_changes = [[&quot;0.0&quot;, &quot;1.0&quot;]],                         is_nan=False,                         is_reduction=True,                         min_stable_attributes=1,                         min_flexible_attributes=1,                         max_stable_attributes=5,                         max_flexible_attributes=5)actionRulesDiscovery.get_pretty_action_rules()```The output is a list of action rules in pretty text form.</longdescription>
</pkgmetadata>