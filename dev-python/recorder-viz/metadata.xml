<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>recorder-viz=============This is a python package which contains tools for processing [Recorder](https://github.com/uiuc-hpc/Recorder) traces.Installation-------------`pip install recorder-viz`Visualization--------------We relie on a few libraries for visualization. Please install them first.Dependencies: [pandas](https://pandas.pydata.org/), [bokeh](https://docs.bokeh.org/) and [prettytable](https://pypi.org/project/PrettyTable/).```pythonimport recorder_vizfrom recorder_viz import RecorderReaderreader = RecorderReader(&quot;path/to/Recorder-traces-folder&quot;)recorder_viz.generate_report(reader, &quot;output.html&quot;)```The `generate_report` API will write out a HTML format visualization report.The visualization process can be slow for large traces. We recommend to use it only for small scale runs, e.g., &lt; 128 ranks runs.Below are some example graphs generated from the [FLASH](http://flash.uchicago.edu) traces.![example graphs](https://raw.githubusercontent.com/wangvsa/recorder-viz/main/tests/showoff.jpg)Advanced Usages-------------The `RecorderReader` class contains all infomration about the Recorder traces.```pythonclass RecorderReader:    self.GM: instance of GlobalMetadata    self.LMs: list of LocalMetadata objects, one for each rank    self.records: self.records[i] is a list of Record objects of rank i.````GlobalMetadta`, `LocalMetadata` and `Record` are three Python wrappers of C structures. ```pythonclass LocalMetadata(Structure):    self.total_records: int    self.num_files: int    self.filemap: set()    self.function_count: []class RecorderMetadata(Structure):    _fields_ = [            (&quot;total_ranks&quot;, c_int),            (&quot;start_ts&quot;, c_double),            (&quot;time_resolution&quot;, c_double),            (&quot;ts_buffer_elements&quot;, c_int),            (&quot;ts_compression_algo&quot;, c_int),    ]class Record(Structure):    _fields_ = [            (&quot;tstart&quot;, c_double),            (&quot;tend&quot;, c_double),            (&quot;level&quot;, c_ubyte),            (&quot;func_id&quot;, c_ubyte),            (&quot;tid&quot;, c_int),            (&quot;arg_count&quot;, c_ubyte),            (&quot;args&quot;, POINTER(c_char_p)),    ]```Here's an example on how to use the provided classes.```pythonfrom recorder_viz import RecorderReaderreader = RecorderReader(&quot;path/to/Recorder-traces-folder&quot;)for rank in range(reader.GM.total_ranks):    LM = reader.LMs[rank]    print(&quot;Rank: %d, Number of trace records: %d&quot; %(rank, LM.total_records))```</longdescription>
</pkgmetadata>