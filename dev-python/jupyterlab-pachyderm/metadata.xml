<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jupyterlab-pachyderm[![CircleCI](https://circleci.com/gh/pachyderm/jupyterlab-pachyderm/tree/main.svg?style=shield&amp;circle-token=23e1645bde6312d903e50be2dec7073bf0bcfbd0)](https://circleci.com/gh/pachyderm/jupyterlab-pachyderm/tree/main)[![PyPI version](https://badge.fury.io/py/jupyterlab-pachyderm.svg)](https://pypi.org/project/jupyterlab-pachyderm)A JupyterLab extension for integrations with Pachyderm.This extension is composed of a Python package named `jupyterlab_pachyderm`for the server extension and a NPM package named `jupyterlab-pachyderm`for the frontend extension.# Requirements- JupyterLab &gt;= 3.0- Python &gt;=3.7,&lt;4    - [pyenv](https://github.com/pyenv/pyenv) is a great way to manage and install different versions of python. You can check which version you are using by running `pyenv versions`. Our Python extension is built to be compatible with Python versions 3.7 to 3.10. Therefore, it is best to run the lowest version (3.7.x) for highest compatibility.- Node    - If you are using [nvm](https://github.com/nvm-sh/nvm) first run `nvm install`. This will install and switch the version of node to the one defined in the `.nvmrc`. If you are upgrading the version of node used in the project, please check and make sure that the versions defined in the `.nvmrc`.# Development EnvironmentThere are two ways you can work on this project. One is setting up a local python virtual environment and the other is using a docker image developing on a virtual machine.## Dev Container WorkflowBuilding and running the extension in a Docker container allows us to use mount, which is not possible in recent versions of macOS.Assuming that you are running a Pachyderm instance somewhere, and that you can port-forward `pachd````kubectl port-forward service/pachd 30650:30650```Start a bash session in the `pachyderm/notebooks-user` container from the top-level `jupyterlab-pachyderm` repo.```docker run --name jupyterlab_pachyderm_frontend_dev \  --net=host \  --rm \  -it -e GRANT_SUDO=yes --user root \  --device /dev/fuse --privileged \  -v $(pwd):/home/jovyan/extension-wd \  -w /home/jovyan/extension-wd \  pachyderm/notebooks-user:77ce3a1ef2c73bf34d064cd0bdb5a64262bf3280 \  bash```If you are running the frontend container on Linux, and want to be able to talk to pachd in minikube on `grpc://localhost:30650`, use `--net=host` at the start of the the `docker run` command as shown above. If you are on macOS, you will want to remove `--net=host` as it is not supported. On macOS you can specify `grpc://host.docker.internal:30650` to get the same effect.Install the project in editable mode, and start JupyterLab```pip install -e .jupyter labextension develop --overwrite# Server extension must be manually installed in develop mode, for examplejupyter server extension enable jupyterlab_pachydermjupyter lab --allow-root```Open another bash inside the same container:```docker exec -it &lt;container-id&gt; bash```Within container run:```npm run watch```Iterating on the mount server, from inside a `pachyderm` checkout:```CGO_ENABLED=0 make installdocker cp /home/luke/gocode/bin/pachctl jupyterlab_pachyderm_frontend_dev:/usr/local/bin/pachctldocker exec -ti jupyterlab_pachyderm_frontend_dev pkill -f pachctl```## Local Virtual Environment Setup When developing in python, it is good practice to set up a virtual environment. A simple guid to set up a virtual environment is as follows:create a virtual environment using venv`python -m venv venv`Activate the environment`source venv/bin/activate`When you are done using the environment you can close your shell or deactivate the environment: `deactivate`## Development installNote: You will need NodeJS to build the extension package.```bash# Clone the repo to your local environment# Change directory to the jupyterlab-pachyderm directory (top level of repo)# Make sure you are using a virtual environment# Install package in development modepip install -e .# Link your development version of the extension with JupyterLabjupyter labextension develop . --overwrite# Server extension must be manually installed in develop modejupyter server extension enable jupyterlab_pachyderm# Rebuild extension Typescript source after making changesnpm run build```You can watch the source directory and run JupyterLab at the same time in different terminals to watch for changes in the extension's source and automatically rebuild the extension.```bash# Watch the source directory in one terminal, automatically rebuilding when needednpm run watch# Run JupyterLab in another terminaljupyter lab --allow-root```With the watch command running, every saved change will immediately be built locally and available in your running JupyterLab. Refresh JupyterLab to load the change in your browser (you may need to wait several seconds for the extension to be rebuilt).By default, the `npm run build` command generates the source maps for this extension to make it easier to debug using the browser dev tools. To also generate source maps for the JupyterLab core extensions, you can run the following command:```bashjupyter lab build --minimize=False```## Development uninstall```bash# Server extension must be manually disabled in develop modejupyter server extension disable jupyterlab_pachydermpip uninstall jupyterlab_pachyderm```In development mode, you will also need to remove the symlink created by `jupyter labextension develop`command. To find its location, you can run `jupyter labextension list` to figure out where the `labextensions`folder is located. Then you can remove the symlink named `jupyterlab-pachyderm` within that folder.## Locally building the docker imageUseful if iterating on the Dockerfile locally or iterating on changes to a version of mount-server.Create &amp; activate venv:```python3 -m venv venvsource venv/bin/activate```Build `dist` directory:```python -m pip install --upgrade pippython -m pip install -r ci-requirements.txtpython -m build```Build docker image:```export PACHCTL_VERSION=aaa7434c714fab6130c3982ebdaa8f279bd850c2 # or whichever version you wantdocker build --build-arg PACHCTL_VERSION=$PACHCTL_VERSION -t pachyderm/notebooks-user:dev .docker run -ti -p 8888:8888 pachyderm/notebooks-user:dev```Navigate to the URL that's printed out by the docker container, then change `tree` to `lab` in your browser's address bar.## InstallTo install the extension, execute:```bashpip install jupyterlab_pachyderm```## UninstallTo remove the extension, execute:```bashpip uninstall jupyterlab_pachyderm```## Server extensionFirst make sure the server extension is enabled:```jupyter server extension list 2&gt;&amp;1 | grep -ie &quot;jupyterlab_pachyderm.*OK&quot;```### API endpoints```GET /repos # returns a list of all repos/branchesGET /mounts # returns a list of all active mounts and unmounted repos/branchesPUT /_mount # mounts a single repoPUT /_unmount # unmounts a single repoPUT /_commit # commits any changes to the repoPUT /_unmount_all # unmounts all reposPUT /_mount_datums # mounts first datum of given input specPUT /_show_datum # cycles through mounted datums```The servers-side extension extends jupyter server, so it automatically starts as part of `jupyter lab`.API endpoints can be accessed via `localhost:8888/pachyderm/v2`The frontend can access the endpoints via `/v2`, for example:```jsrequestAPI&lt;any&gt;('/v2/repos')      .then(data =&gt; {        console.log(data);      })      .catch(reason =&gt; {        console.error(reason);      });```You can also access it via `localhost:8888/v2`## SVG ImagesWe are leveraging [svgr](https://react-svgr.com/) to simplify the use of non icon svgs in in the project. Svg images that are to be converted live in the `svg-images` folder and get output to the `src/utils/components/Svgs` folder. If you want to add a new image to the project simply add the svg to the `svg-images` folder and run `npm run build:svg`. We have spent some time trying to get svgr to work through the `@svgr/webpack` plugin but have not been successful as of yet.# Project StructureJupyter extensions are composed of several plugins. These plugins can be selectively enabled or disabled. Because of this we have decided separate the functionality in the extension using plugins. Plugins exported in this extension are as follows.### HubThis plugin contains custom styling and other features only used by hub. By default this extension is disabled.### MountThis plugin contains the mount feature currently under development.## Plugin settingsYou can disable certain plugins by specifying the following config data in the `&lt;jupyter_config_path&gt;/labconfig/page_config.json`:```{  &quot;disabledExtensions&quot;: {    &quot;jupyterlab-pachyderm:examples&quot;: true  }} ```You can check your config paths by running `jupyter --paths`. Setting this config file is not part of the built extension and needs to be done by the user.Adding the following to the package.json in the `jupyterlab` object will disable the examples plugin by default.```&quot;disabledExtensions&quot;: [&quot;jupyterlab-pachyderm:examples&quot;]```So we can build the extension with hub features turned off and override the setting for hub.## TroubleshootIf you are seeing the frontend extension, but it is not working, checkthat the server extension is enabled:```bashjupyter server extension list```If the server extension is installed and enabled, but you are not seeingthe frontend extension, check the frontend extension is installed:```bashjupyter labextension list```</longdescription>
</pkgmetadata>