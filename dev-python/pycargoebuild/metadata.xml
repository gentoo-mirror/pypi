<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============pycargoebuild=============:Author: Michał Górny:License: MIT:Homepage: https://github.com/projg2/pycargoebuild/pycargoebuild is a generator for ebuilds using the Cargo infrastructureof Rust language.  It is primarily meant to aid in keeping the listof ``CRATES`` and their ``LICENSE`` up-to-date.  It is a rewriteof the `cargo-ebuild`_ tool in Python, with no actual dependencyon Rust.pycargoebuild reads ``Cargo.toml`` and ``Cargo.lock`` files in orderto obtain the package's metadata and dependency list, respectively.Then it fetches all dependent crates into ``DISTDIR`` and reads their``Cargo.toml`` files to construct the complete list of licenses.The resulting data can either be used to construct a new ebuild froma template or to update the values of ``CRATES`` and ``LICENSE``in an existing ebuild.Why not cargo-ebuild?=====================pycargoebuild has the following features that cargo-ebuild 0.5.2is missing:- small size (cargo-ebuild compiles to 5.5M on my system)- full support for SPDX-2.0 license expressions with boolean  simplification (whereas cargo-ebuild just dumps all licenses it finds)- pretty-printing with line wrapping for license expressions- support for updating ``CRATES`` and crate ``LICENSE`` in existing  ebuilds (whereas cargo-ebuild can only generate new ebuilds)- support for combining the data from multiple subpackages (useful  e.g. in setuptools-rust)- support for fast crate fetching if ``aria2c`` is installed- support for skipping crate licenses (e.g. for when Crates are used  at build/test time only)Usage=====To create a new ebuild, run::    pycargoebuild &lt;package-directory&gt;where *package-directory* is the directory containing ``Cargo.toml``.This creates an ebuild file named after the package name and versionin the current directory, and outputs its name.To update an existing ebuild, use instead::    pycargoebuild -i &lt;current-file&gt;.ebuild &lt;package-directory&gt;Note that the existing file must contain both ``CRATES`` variableand ``LICENSE+=`` assignment like the following::    # Dependent crate licenses    LICENSE+=&quot;...&quot;It is also possible to explicitly specify the output filename usingthe ``-o`` option.Configuration file==================pycargoebuild can additionally be configured using``pycargoebuild.toml`` in one of the XDG config directories(usually ``~/.config``).  The following example provides a quick summaryof configuration options available::    [paths]    # default --distdir, Portage config is used if not set    distdir = &quot;/var/cache/portage/distfiles&quot;    # default --license-mapping, &quot;metadata/license-mapping.conf&quot; from    # ::gentoo repo (via Portage API) is used if not set    license-mapping = &quot;/var/db/repos/gentoo/metadata/license-mapping.conf&quot;    [license-overrides]    # provide an SPDX license string for packages missing the metadata    nihav_codec_support = &quot;MIT&quot;    nihav_core = &quot;MIT&quot;    nihav_duck = &quot;MIT&quot;    [license-mapping]    # additional mappings from SPDX licenses to Gentoo licenses    &quot;LicenseRef-UFL-1.0&quot; = &quot;UbuntuFontLicense-1.0&quot;.. _cargo-ebuild: https://github.com/gentoo/cargo-ebuild/</longdescription>
</pkgmetadata>