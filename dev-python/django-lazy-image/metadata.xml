<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Lazy Image`django-lazy-image` is a small Django utility that allows you to render images lazily on the frontend to minimise initial page load.## InstallationTo install `django-lazy-image` just run:```clipip install django-lazy-image```## Requirements* Jinja2* Django &gt;= 1.11 (It's only been tested on 1.11 but i'm pretty sure it will work on 1.8+)* [Django Jinja](https://github.com/niwinz/django-jinja)## ConfigurationAdd `django_lazy_image` to your `INSTALLED_APPS````pythonINSTALLED_APPS = [    ...    'django_lazy_image',    ...]```Add `url(r'^assets/', include('django_lazy_image.urls', namespace='assets')),` to your base `urls.py````pythonurlpatterns = [    ...    url(r'^assets/', include('django_lazy_image.urls', namespace='assets')),    ...```Then there are 2 ways to use the static files with Django:### NPM (The preferred way)You can simply do```clinpm install django-lazy-image```or```cliyarn add django-lazy-image```Then include the Javascript / CSS as a module**file.js**```javascriptimport LazyImage from 'django-lazy-image';// Only run the below code if the page has a lazy image instanceconst lazyImage = document.querySelector('.js-LazyImage')if (lazyImage) {  // Collect all the lazy images on the page  const lazyImages = document.querySelectorAll('.js-LazyImage')  // Set up our IntersectionObserver callback  const callback = (entries, observer) =&gt; {    Array.from(entries).forEach((entry, index) =&gt; {      // If any of the images have come in to view, activate them sequentially      if (entry.isIntersecting &amp;&amp; !entry.target.dataset.activating) {        entry.target.dataset.activating = true        window.setTimeout(() =&gt; {          new LazyImage({ el: entry.target })          observer.unobserve(entry.target)        }, 150 * index)      }    })  }  const observer = new IntersectionObserver(callback, {    threshold: 0.4  })  Array.from(lazyImages).forEach(image =&gt; observer.observe(image))}```**file.css**```css@import 'django-lazy-image/dist/css/lazy-image.css';```### Django StaticSomewhere in your `base.html` add:```html{{ static('django_lazy_image/css/lazy-image.css') }}{{ static('django_lazy_image/js/lazy-image.js') }}```You can then use the `lazyImage` function that is on the global object```javascriptvar images = [].slice.call(document.querySelectorAll('.js-LazyImage'))images.forEach(function (el) {  var image = window.lazyImage(el)  ...})```</longdescription>
</pkgmetadata>