<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Dataclasses JSON Schema=======================.. image:: https://github.com/s-knibbs/dataclasses-jsonschema/workflows/Tox%20tests/badge.svg?branch=master    :target: https://github.com/s-knibbs/dataclasses-jsonschema/actions.. image:: https://badge.fury.io/py/dataclasses-jsonschema.svg    :target: https://badge.fury.io/py/dataclasses-jsonschema.. image:: https://img.shields.io/lgtm/grade/python/g/s-knibbs/dataclasses-jsonschema.svg?logo=lgtm&amp;logoWidth=18    :target: https://lgtm.com/projects/g/s-knibbs/dataclasses-jsonschema/context:python    :alt:    Language grade: Python**Please Note:** This project is in maintenance mode. I'm currently only making urgent bugfixes.A library to generate JSON Schema from python 3.7 dataclasses. Python 3.6 is supported through the `dataclasses backport &lt;https://github.com/ericvsmith/dataclasses&gt;`_. Aims to be a more lightweight alternative to similar projects such as `marshmallow &lt;https://github.com/marshmallow-code/marshmallow&gt;`_ &amp; `pydantic &lt;https://github.com/samuelcolvin/pydantic&gt;`_.Feature Overview----------------* Support for draft-04, draft-06, Swagger 2.0 &amp; OpenAPI 3 schema types* Serialisation and deserialisation* Data validation against the generated schema* `APISpec &lt;https://github.com/marshmallow-code/apispec&gt;`_ support. Example below_:Installation------------.. code:: bash    ~$ pip install dataclasses-jsonschemaFor improved validation performance using `fastjsonschema &lt;https://github.com/horejsek/python-fastjsonschema&gt;`_, install with:.. code:: bash    ~$ pip install dataclasses-jsonschema[fast-validation]For improved uuid performance using `fastuuid &lt;https://pypi.org/project/fastuuid/&gt;`_, install with:.. code:: bash    ~$ pip install dataclasses-jsonschema[fast-uuid]For improved date and datetime parsing performance using `ciso8601 &lt;https://pypi.org/project/ciso8601/&gt;`_, install with:.. code:: bash    ~$ pip install dataclasses-jsonschema[fast-dateparsing]Beware `ciso8601` doesnâ€™t support the entirety of the ISO 8601 spec, only a popular subset.Examples--------.. code:: python    from dataclasses import dataclass    from dataclasses_jsonschema import JsonSchemaMixin    @dataclass    class Point(JsonSchemaMixin):        &quot;A 2D point&quot;        x: float        y: floatSchema Generation^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; pprint(Point.json_schema())    {        'description': 'A 2D point',        'type': 'object',        'properties': {            'x': {'format': 'float', 'type': 'number'},            'y': {'format': 'float', 'type': 'number'}        },        'required': ['x', 'y']    }Data Serialisation^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; Point(x=3.5, y=10.1).to_dict()    {'x': 3.5, 'y': 10.1}Deserialisation^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; Point.from_dict({'x': 3.14, 'y': 1.5})    Point(x=3.14, y=1.5)    &gt;&gt;&gt; Point.from_dict({'x': 3.14, y: 'wrong'})    dataclasses_jsonschema.ValidationError: 'wrong' is not of type 'number'Generating multiple schemas^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from dataclasses_jsonschema import JsonSchemaMixin, SchemaType        @dataclass    class Address(JsonSchemaMixin):        &quot;&quot;&quot;Postal Address&quot;&quot;&quot;        building: str        street: str        city: str        @dataclass    class Company(JsonSchemaMixin):        &quot;&quot;&quot;Company Details&quot;&quot;&quot;        name: str        address: Address        &gt;&gt;&gt; pprint(JsonSchemaMixin.all_json_schemas(schema_type=SchemaType.SWAGGER_V3))    {'Address': {'description': 'Postal Address',                 'properties': {'building': {'type': 'string'},                                'city': {'type': 'string'},                                'street': {'type': 'string'}},                 'required': ['building', 'street', 'city'],                 'type': 'object'},     'Company': {'description': 'Company Details',                 'properties': {'address': {'$ref': '#/components/schemas/Address'},                                'name': {'type': 'string'}},                 'required': ['name', 'address'],                 'type': 'object'}}        Custom validation using `NewType &lt;https://docs.python.org/3/library/typing.html#newtype&gt;`_^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from dataclasses_jsonschema import JsonSchemaMixin, FieldEncoder    PhoneNumber = NewType('PhoneNumber', str)        class PhoneNumberField(FieldEncoder):            @property        def json_schema(self):            return {'type': 'string', 'pattern': r'^(\([0-9]{3}\))?[0-9]{3}-[0-9]{4}$'}        JsonSchemaMixin.register_field_encoders({PhoneNumber: PhoneNumberField()})        @dataclass    class Person(JsonSchemaMixin):        name: str        phone_number: PhoneNumberFor more examples `see the tests &lt;https://github.com/s-knibbs/dataclasses-jsonschema/blob/master/tests/conftest.py&gt;`_.. _below:APISpec Plugin--------------**New in v2.5.0**OpenAPI &amp; Swagger specs can be generated using the apispec plugin:.. code:: python    from typing import Optional, List    from dataclasses import dataclass    from apispec import APISpec    from apispec_webframeworks.flask import FlaskPlugin    from flask import Flask, jsonify    import pytest    from dataclasses_jsonschema.apispec import DataclassesPlugin    from dataclasses_jsonschema import JsonSchemaMixin    # Create an APISpec    spec = APISpec(        title=&quot;Swagger Petstore&quot;,        version=&quot;1.0.0&quot;,        openapi_version=&quot;3.0.2&quot;,        plugins=[FlaskPlugin(), DataclassesPlugin()],    )            @dataclass    class Category(JsonSchemaMixin):        &quot;&quot;&quot;Pet category&quot;&quot;&quot;        name: str        id: Optional[int]    @dataclass    class Pet(JsonSchemaMixin):        &quot;&quot;&quot;A pet&quot;&quot;&quot;        categories: List[Category]        name: str    app = Flask(__name__)    @app.route(&quot;/random&quot;)    def random_pet():        &quot;&quot;&quot;A cute furry animal endpoint.        ---        get:          description: Get a random pet          responses:            200:              content:                application/json:                  schema: Pet        &quot;&quot;&quot;        pet = get_random_pet()        return jsonify(pet.to_dict())     # Dependant schemas (e.g. 'Category') are added automatically    spec.components.schema(&quot;Pet&quot;, schema=Pet)    with app.test_request_context():        spec.path(view=random_pet)TODO----* Add benchmarks against alternatives such as `pydantic &lt;https://github.com/samuelcolvin/pydantic&gt;`_ and `marshmallow &lt;https://github.com/marshmallow-code/marshmallow&gt;`_</longdescription>
</pkgmetadata>