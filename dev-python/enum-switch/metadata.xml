<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Enum-based Switch for PythonThis is an attempt at creating a way to do a reliable, not-bug-prone implementation, for Python, of a `switch` thing like other languages have.## How it worksSuppose you have an enum, like this:```class Color(Enum):    RED = 1    GREEN = 2    BLUE = 3```And you want to implement logic which branches based on a value which is of type `Color`.You can do it by subclassing the `Switch` class. The syntax should be obvious, but:* Inherit from Switch* Implement a method for each value of the Enum* If you are not implementing them all: add a `default` method.* If you leave any Enum value unaccounted for: it will raise an exception when you  instantiate your class.Then:* Instantiate your class* Call it as a function passing it a value from the Enum* The respective method will be executed and its return value returned```from enum_switch import Switchclass MySwitch(Switch):    def RED(self):        return &quot;Apple&quot;    def GREEN(self):        return &quot;Kiwi&quot;    def BLUE(self):        return &quot;Sky&quot;switch = MySwitch()print(switch(Color.RED))Apple```And that's it.Some additional notes:* Passing it something that is not a value of the correct Enum type will raise ValueError* `default` is optionalHope someone finds it useful!</longdescription>
</pkgmetadata>