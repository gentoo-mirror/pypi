<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================================SHYAML: YAML for the command line=================================.. image:: https://img.shields.io/pypi/v/shyaml.svg    :target: https://pypi.python.org/pypi/shyaml.. image:: https://img.shields.io/travis/0k/shyaml/master.svg?style=flat   :target: https://travis-ci.com/github/0k/shyaml/   :alt: Travis CI build status.. image:: https://img.shields.io/appveyor/ci/vaab/shyaml.svg   :target: https://ci.appveyor.com/project/vaab/shyaml/branch/master   :alt: Appveyor CI build status.. image:: http://img.shields.io/codecov/c/github/0k/shyaml.svg?style=flat   :target: https://codecov.io/gh/0k/shyaml/   :alt: Test coverageDescription===========Simple script that allow read access to YAML files through command line.This can be handy, if you want to get access to YAML data in your shellscripts.This script supports only read access and it might not support allthe subtleties of YAML specification. But it should support some handybasic query of YAML file.Requirements============``shyaml`` works in Linux, MacOSX, and Windows with python 2.7 and 3+.Installation============You don't need to download the GIT version of the code as ``shyaml`` isavailable on the PyPI. So you should be able to run::    pip install shyamlIf you have downloaded the GIT sources, then you could add installthe current version via::    pip install .And if you don't have the GIT sources but would like to get the latestmaster or branch from github, you could also::    pip install git+https://github.com/0k/shyamlOr even select a specific revision (branch/tag/commit)::    pip install git+https://github.com/0k/shyaml@masterOn macOS, you can also install the latest release version via `Homebrew&lt;https://github.com/Homebrew/brew/&gt;`_::    brew install shyamlOr to install the master branch::    brew install shyaml --HEADDocumentation=============The following documented examples are actually tested automatically ateach release for conformance on all platform and python versions.Please note that there is some subtle benign differences in someoutput whether ``shyaml`` is using the ``libyaml`` C implementation orthe full python implementation. The documentation can be run with bothimplementation but some examples will fail depending on theimplementation. To make things clear, I'll use some annotation and youcan yourself check which version you are using with::    $ shyaml -V | grep &quot;^libyaml used:&quot;  ## docshtest: if-success-set LIBYAML    libyaml used: TrueUsage=====``shyaml`` takes its YAML input file from standard input ONLY. So let'sdefine here a common YAML input for the next examples::    $ cat &lt;&lt;EOF &gt; test.yaml    name: &quot;MyName !! héhé&quot;  ## using encoding, and support comments !    subvalue:        how-much: 1.1        how-many: 2        things:            - first            - second            - third        maintainer: &quot;Valentin Lab&quot;        description: |            Multiline description:            Line 1            Line 2    subvalue.how-much: 1.2    subvalue.how-much\more: 1.3    subvalue.how-much\.more: 1.4    EOFGeneral browsing struct and displaying simple values----------------------------------------------------Simple query of simple attribute::    $ cat test.yaml | shyaml get-value name    MyName !! héhéQuery nested attributes by using '.' between key labels::    $ cat test.yaml | shyaml get-value subvalue.how-much    1.1Get type of attributes::    $ cat test.yaml | shyaml get-type name    str    $ cat test.yaml | shyaml get-type subvalue.how-much    floatGet length of structures or sequences::    $ cat test.yaml | shyaml get-length subvalue    5    $ cat test.yaml | shyaml get-length subvalue.things    3But this won't work on other types::    $ cat test.yaml | shyaml get-length name    Error: get-length does not support 'str' type. Please provide or select a sequence or struct.Parse structure---------------Get sub YAML from a structure attribute::    $ cat test.yaml | shyaml get-type subvalue    struct    $ cat test.yaml | shyaml get-value subvalue  ## docshtest: ignore-if LIBYAML    how-much: 1.1    how-many: 2    things:    - first    - second    - third    maintainer: Valentin Lab    description: 'Multiline description:      Line 1      Line 2      'Iteration through keys only::    $ cat test.yaml | shyaml keys    name    subvalue    subvalue.how-much    subvalue.how-much\more    subvalue.how-much\.moreIteration through keys only (``\0`` terminated strings)::    $ cat test.yaml | shyaml keys-0 subvalue | xargs -0 -n 1 echo &quot;VALUE:&quot;    VALUE: how-much    VALUE: how-many    VALUE: things    VALUE: maintainer    VALUE: descriptionIteration through values only (``\0`` terminated string highly recommended)::    $ cat test.yaml | shyaml values-0 subvalue |      while IFS='' read -r -d $'\0' value; do          echo &quot;RECEIVED: '$value'&quot;      done    RECEIVED: '1.1'    RECEIVED: '2'    RECEIVED: '- first    - second    - third    '    RECEIVED: 'Valentin Lab'    RECEIVED: 'Multiline description:    Line 1    Line 2    'Iteration through keys and values (``\0`` terminated string highly recommended)::    $ read-0() {        while [ &quot;$1&quot; ]; do            IFS=$'\0' read -r -d '' &quot;$1&quot; || return 1            shift        done      } &amp;&amp;      cat test.yaml | shyaml key-values-0 subvalue |      while read-0 key value; do          echo &quot;KEY: '$key'&quot;          echo &quot;VALUE: '$value'&quot;          echo      done    KEY: 'how-much'    VALUE: '1.1'    KEY: 'how-many'    VALUE: '2'    KEY: 'things'    VALUE: '- first    - second    - third    '    KEY: 'maintainer'    VALUE: 'Valentin Lab'    KEY: 'description'    VALUE: 'Multiline description:    Line 1    Line 2    '    &lt;BLANKLINE&gt;Notice, that you'll get the same result using``get-values``. ``get-values`` will support sequences and struct,and ``key-values`` support only struct. (for a complete table ofwhich function support what you can look at the usage line)And, if you ask for keys, values, key-values on non struct like, you'llget an error::    $ cat test.yaml | shyaml keys name    Error: keys does not support 'str' type. Please provide or select a struct.    $ cat test.yaml | shyaml values subvalue.how-many    Error: values does not support 'int' type. Please provide or select a struct.    $ cat test.yaml | shyaml key-values subvalue.how-much    Error: key-values does not support 'float' type. Please provide or select a struct.Parse sequence--------------Query a sequence with ``get-value``::    $ cat test.yaml | shyaml get-value subvalue.things    - first    - second    - thirdAnd access individual elements with python-like indexing::    $ cat test.yaml | shyaml get-value subvalue.things.0    first    $ cat test.yaml | shyaml get-value subvalue.things.-1    third    $ cat test.yaml | shyaml get-value subvalue.things.5    Error: invalid path 'subvalue.things.5', index 5 is out of range (3 elements in sequence).Note that this will work only with integer (preceded or not by a minussign)::    $ cat test.yaml | shyaml get-value subvalue.things.foo    Error: invalid path 'subvalue.things.foo', non-integer index 'foo' provided on a sequence.More usefull, parse a list in one go with ``get-values``::    $ cat test.yaml | shyaml get-values subvalue.things    first    second    thirdNote that the action is called ``get-values``, and that output isseparated by newline char(s) (which is os dependent), this can bringhavoc if you are parsing values containing newlines itself. Hopefully,``shyaml`` has a ``get-values-0`` to terminate strings by ``\0`` char,which allows complete support of any type of values, including YAML.``get-values`` outputs key and values for ``struct`` types and onlyvalues for ``sequence`` types::    $ cat test.yaml | shyaml get-values-0 subvalue |      while IFS='' read -r -d '' key &amp;&amp;            IFS='' read -r -d '' value; do          echo &quot;'$key' -&gt; '$value'&quot;      done    'how-much' -&gt; '1.1'    'how-many' -&gt; '2'    'things' -&gt; '- first    - second    - third    '    'maintainer' -&gt; 'Valentin Lab'    'description' -&gt; 'Multiline description:    Line 1    Line 2    'Please note that, if ``get-values{,-0}`` actually works on ``struct``,it's maybe more explicit to use the equivalent ``key-values{,0}``. Itshould be noted that ``key-values{,0}`` is not completly equivalent asit is meant to be used with ``struct`` only and will complain if not.You should also notice that values that are displayed are YAML compatible. Soif they are complex, you can re-use ``shyaml`` on them to parse their content.Of course, ``get-values`` should only be called on sequence elements::    $ cat test.yaml | shyaml get-values name    Error: get-values does not support 'str' type. Please provide or select a sequence or struct.Parse YAML document streams---------------------------YAML input can be a stream of documents, the action will then beapplied to each document::    $ i=0; while true; do          ((i++))          echo &quot;ingests:&quot;          echo &quot; - data: xxx&quot;          echo &quot;   id: tag-$i&quot;          if ((i &gt;= 3)); then              break          fi          echo &quot;---&quot;    done | shyaml get-value ingests.0.id | tr '\0' '&amp;'    tag-1&amp;tag-2&amp;tag-3Notice that ``NUL`` char is used by default for separating outputiterations if not used in ``-y`` mode. You can use that to separateeach output.  ``-y`` mode will use conventional YAML way to separatedocuments (which is ``---``).So::    $ i=0; while true; do          ((i++))          echo &quot;ingests:&quot;          echo &quot; - data: xxx&quot;          echo &quot;   id: tag-$i&quot;          if ((i &gt;= 3)); then              break          fi          echo &quot;---&quot;    done | shyaml get-value -y ingests.0.id  ## docshtest: ignore-if LIBYAML    tag-1    ...    ---    tag-2    ...    ---    tag-3    ...Notice that it is not supported to use any query that can output more than onevalue (like all the query that can be suffixed with ``*-0``) with a multi-documentYAML::    $ i=0; while true; do          ((i++))          echo &quot;ingests:&quot;          echo &quot; - data: xxx&quot;          echo &quot;   id: tag-$i&quot;          if ((i &gt;= 3)); then              break          fi          echo &quot;---&quot;    done | shyaml keys ingests.0 &gt;/dev/null    Error: Source YAML is multi-document, which doesn't support any other action than get-type, get-length, get-valueYou'll probably notice also, that output seems buffered. The previouscontent is displayed as a whole only at the end. If you need acontinuous flow of YAML document, then the command line option ``-L``is required to force a non-buffered line-by-line reading of the fileso as to ensure that each document is properly parsed as soon aspossible. That means as soon as either a YAML document end is detected(``---`` or ``EOF``):Without the ``-L``, if we kill our shyaml process before the end::    $ i=0; while true; do          ((i++))          echo &quot;ingests:&quot;          echo &quot; - data: xxx&quot;          echo &quot;   id: tag-$i&quot;          if ((i &gt;= 2)); then              break          fi          echo &quot;---&quot;          sleep 10    done 2&gt;/dev/null | shyaml get-value ingests.0.id &amp; pid=$! ; sleep 2; kill $pidWith the ``-L``, if we kill our shyaml process before the end::    $ i=0; while true; do          ((i++))          echo &quot;ingests:&quot;          echo &quot; - data: xxx&quot;          echo &quot;   id: tag-$i&quot;          if ((i &gt;= 2)); then              break          fi          echo &quot;---&quot;          sleep 10    done 2&gt;/dev/null | shyaml get-value -L ingests.0.id &amp; pid=$! ; sleep 2; kill $pid    tag-1Using ``-y`` is required to force a YAML output that will be also parseable as a stream,which could help you chain shyaml calls::    $ i=0; while true; do          ((i++))          echo &quot;ingests:&quot;          echo &quot; - data: xxx&quot;          echo &quot;   id: tag-$i&quot;          if ((i &gt;= 3)); then              break          fi          echo &quot;---&quot;          sleep 0.2    done | shyaml get-value ingests.0 -L -y | shyaml get-value id | tr '\0' '\n'    tag-1    tag-2    tag-3An empty string will be still considered as an empty YAML document::    $ echo | shyaml get-value &quot;toto&quot;    Error: invalid path 'toto', can't query subvalue 'toto' of a leaf (leaf value is None).Keys containing '.'-------------------Use and ``\\`` to access keys with ``\`` and ``\.`` to access keyswith literal ``.`` in them. Just be mindful of shell escaping (exampleuses single quotes)::    $ cat test.yaml | shyaml get-value 'subvalue\.how-much'    1.2    $ cat test.yaml | shyaml get-value 'subvalue\.how-much\\more'    1.3    $ cat test.yaml | shyaml get-value 'subvalue\.how-much\\.more' default    defaultThis last one didn't escape correctly the last ``.``, this is thecorrect version::    $ cat test.yaml | shyaml get-value 'subvalue\.how-much\\\.more' default    1.4empty string keys-----------------Yep, ``shyaml`` supports empty stringed keys. You might never have usefor this one, but it's in YAML specification. So ``shyaml`` supportsit::    $ cat &lt;&lt;EOF &gt; test.yaml    empty-sub-key:        &quot;&quot;:           a: foo           &quot;&quot;: bar    &quot;&quot;: wiz    EOF    $ cat test.yaml | shyaml get-value empty-sub-key..    bar    $ cat test.yaml | shyaml get-value ''    wizPlease notice that one empty string is different than no string at all::    $ cat &lt;&lt;EOF &gt; test.yaml    &quot;&quot;:       a: foo       b: bar    &quot;x&quot;: wiz    EOF    $ cat test.yaml | shyaml keys    x    $ cat test.yaml | shyaml keys ''    a    bThe first asks for keys of the root YAML, the second asks for keys of thecontent of the empty string named element located in the root YAML.Handling missing paths----------------------There is a third argument on the command line of shyaml which is theDEFAULT argument. If the given KEY was not found in the YAMLstructure, then ``shyaml`` would return what you provided as DEFAULT.As of version &lt; 0.3, this argument was defaulted to the emptystring. For all version above 0.3 (included), if not provided, thenan error message will be printed::    $ echo &quot;a: 3&quot; | shyaml get-value a mydefault    3    $ echo &quot;a: 3&quot; | shyaml get-value b mydefault    mydefault    $ echo &quot;a: 3&quot; | shyaml get-value b    Error: invalid path 'b', missing key 'b' in struct.You can emulate pre v0.3 behavior by specifying explicitly an emptystring as third argument::    $ echo &quot;a: 3&quot; | shyaml get-value b ''Starting with version 0.6, you can also use the ``-q`` or ``--quiet`` to failsilently in case of KEY not found in the YAML structure::    $ echo &quot;a: 3&quot; | shyaml -q get-value b; echo &quot;errlvl: $?&quot;    errlvl: 1    $ echo &quot;a: 3&quot; | shyaml -q get-value a; echo &quot;errlvl: $?&quot;    3errlvl: 0Ordered mappings----------------Currently, using ``shyaml`` in a shell script involves happily takingYAML inputs and outputting YAML outputs that will further be processed.And this works very well.Before version ``0.4.0``, ``shyaml`` would boldly re-order (sorting themalphabetically) the keys in mappings. If this should be consideredharmless per specification (mappings are indeed supposed to beunordered, this means order does not matter), in practical, YAML userscould feel wronged by ``shyaml`` when there YAML got mangled and theywanted to give a meaning to the basic YAML mapping.Who am I to forbid such usage of YAML mappings ? So starting fromversion ``0.4.0``, ``shyaml`` will happily keep the order of yourmappings::    $ cat &lt;&lt;EOF &gt; test.yaml    mapping:      a: 1      c: 2      b: 3    EOFFor ``shyaml`` version before ``0.4.0``::    # shyaml get-value mapping &lt; test.yaml    a: 1    b: 3    c: 2For ``shyaml`` version including and after ``0.4.0``::    $ shyaml get-value mapping &lt; test.yaml    a: 1    c: 2    b: 3Strict YAML for further processing----------------------------------Processing yaml can be done recursively and extensively through usingthe output of ``shyaml`` into ``shyaml``. Most of its output is itselfYAML. Most ? Well, for ease of use, literal keys (string, numbers) areoutputed directly without YAML quotes, which is often convenient.But this has the consequence of introducing inconsistent behavior. Sowhen processing YAML coming out of shyaml, you should probably thinkabout using the ``--yaml`` (or ``-y``) option to output only strict YAML.With the drawback that when you'll want to output string, you'll need tocall a last time ``shyaml get-value`` to explicitly unquote the YAML.Object Tag----------YAML spec allows object tags which allows you to map local data toobjects in your application.When using ``shyaml``, we do not want to mess with these tags, but stillallow parsing their internal structure.``get-type`` will correctly give you the type of the object::    $ cat &lt;&lt;EOF &gt; test.yaml    %TAG !e! tag:example.com,2000:app/    ---    - !e!foo &quot;bar&quot;    EOF    $ shyaml get-type 0 &lt; test.yaml    tag:example.com,2000:app/foo``get-value`` with ``-y`` (see section Strict YAML) will give you thecomplete yaml tagged value::    $ shyaml get-value -y 0 &lt; test.yaml  ## docshtest: ignore-if LIBYAML    !&lt;tag:example.com,2000:app/foo&gt; 'bar'Another example::    $ cat &lt;&lt;EOF &gt; test.yaml    %TAG ! tag:clarkevans.com,2002:    --- !shape      # Use the ! handle for presenting      # tag:clarkevans.com,2002:circle    - !circle      center: &amp;ORIGIN {x: 73, y: 129}      radius: 7    - !line      start: *ORIGIN      finish: { x: 89, y: 102 }    - !label      start: *ORIGIN      color: 0xFFEEBB      text: Pretty vector drawing.    EOF    $ shyaml get-type 2 &lt; test.yaml    tag:clarkevans.com,2002:labelAnd you can still traverse internal value::    $ shyaml get-value -y 2.start &lt; test.yaml    x: 73    y: 129Note that all global tags will be resolved and simplified (as``!!map``, ``!!str``, ``!!seq``), but not unknown local tags::    $ cat &lt;&lt;EOF &gt; test.yaml    %YAML 1.1    ---    !!map {      ? !!str &quot;sequence&quot;      : !!seq [ !!str &quot;one&quot;, !!str &quot;two&quot; ],      ? !!str &quot;mapping&quot;      : !!map {        ? !!str &quot;sky&quot; : !myobj &quot;blue&quot;,        ? !!str &quot;sea&quot; : !!str &quot;green&quot;,      },    }    EOF    $ shyaml get-value &lt; test.yaml  ## docshtest: ignore-if LIBYAML    sequence:    - one    - two    mapping:      sky: !myobj 'blue'      sea: greenEmpty documents---------------When provided with an empty document, ``shyaml`` will consider thedocument to hold a ``null`` value::    $ echo | shyaml get-value -y  ## docshtest: ignore-if LIBYAML    null    ...Usage string------------A quick reminder of what is available will be printed when calling``shyaml`` without any argument::    $ shyaml    Error: Bad number of arguments.    Usage:        shyaml {-h|--help}        shyaml {-V|--version}        shyaml [-y|--yaml] [-q|--quiet] ACTION KEY [DEFAULT]    &lt;BLANKLINE&gt;The full help is available through the usage of the standard ``-h`` or``-help``::    $ shyaml --help    Parses and output chosen subpart or values from YAML input.    It reads YAML in stdin and will output on stdout it's return value.    Usage:        shyaml {-h|--help}        shyaml {-V|--version}        shyaml [-y|--yaml] [-q|--quiet] ACTION KEY [DEFAULT]    Options:        -y, --yaml                  Output only YAML safe value, more precisely, even                  literal values will be YAML quoted. This behavior                  is required if you want to output YAML subparts and                  further process it. If you know you have are dealing                  with safe literal value, then you don't need this.                  (Default: no safe YAML output)        -q, --quiet                  In case KEY value queried is an invalid path, quiet                  mode will prevent the writing of an error message on                  standard error.                  (Default: no quiet mode)        -L, --line-buffer                  Force parsing stdin line by line allowing to process                  streamed YAML as it is fed instead of buffering                  input and treating several YAML streamed document                  at once. This is likely to have some small performance                  hit if you have a huge stream of YAML document, but                  then you probably don't really care about the                  line-buffering.                  (Default: no line buffering)        ACTION    Depending on the type of data you've targetted                  thanks to the KEY, ACTION can be:                  These ACTIONs applies to any YAML type:                    get-type          ## returns a short string                    get-value         ## returns YAML                  These ACTIONs applies to 'sequence' and 'struct' YAML type:                    get-values{,-0}   ## returns list of YAML                    get-length        ## returns an integer                  These ACTION applies to 'struct' YAML type:                    keys{,-0}         ## returns list of YAML                    values{,-0}       ## returns list of YAML                    key-values,{,-0}  ## returns list of YAML                  Note that any value returned is returned on stdout, and                  when returning ``list of YAML``, it'll be separated by                  a newline or ``NUL`` char depending of you've used the                  ``-0`` suffixed ACTION.        KEY       Identifier to browse and target subvalues into YAML                  structure. Use ``.`` to parse a subvalue. If you need                  to use a literal ``.`` or ``\``, use ``\`` to quote it.                  Use struct keyword to browse ``struct`` YAML data and use                  integers to browse ``sequence`` YAML data.        DEFAULT   if not provided and given KEY do not match any value in                  the provided YAML, then DEFAULT will be returned. If no                  default is provided and the KEY do not match any value                  in the provided YAML, shyaml will fail with an error                  message.    Examples:         ## get last grocery         cat recipe.yaml       | shyaml get-value groceries.-1         ## get all words of my french dictionary         cat dictionaries.yaml | shyaml keys-0 french.dictionary         ## get YAML config part of 'myhost'         cat hosts_config.yaml | shyaml get-value cfgs.myhost    &lt;BLANKLINE&gt;Using invalid keywords will issue an error and the usage message::    $ shyaml get-foo    Error: 'get-foo' is not a valid action.    Usage:        shyaml {-h|--help}        shyaml {-V|--version}        shyaml [-y|--yaml] [-q|--quiet] ACTION KEY [DEFAULT]    &lt;BLANKLINE&gt;Version information-------------------You can get useful information (in case of a bug) or if you want tocheck if shyaml is using the ``libyaml`` C bindings, thanks to``shyaml --version`` (or ``-V``)::    # shyaml -V      ## Example of possible output    version: unreleased    PyYAML: 3.13    libyaml available: 0.1.6    libyaml used: True    Python: 2.7.8 (default, Oct 20 2014, 15:05:19)  [GCC 4.9.1]Note that you can force to use the python implementation even if``libyaml`` is available using ``FORCE_PYTHON_YAML_IMPLEMENTATION``::    $ FORCE_PYTHON_YAML_IMPLEMENTATION=1 shyaml --version | grep &quot;^libyaml used:&quot;    libyaml used: FalsePython API==========``shyaml`` can be used from within python if you need so::    &gt;&gt;&gt; import shyaml    &gt;&gt;&gt; try:    ...     from StringIO import StringIO    ... except ImportError:    ...     from io import StringIO    &gt;&gt;&gt; yaml_content = StringIO(&quot;&quot;&quot;    ... a: 1.1    ... b:    ...   x: foo    ...   y: bar    ... &quot;&quot;&quot;)    &gt;&gt;&gt; for out in shyaml.do(stream=yaml_content,    ...                      action=&quot;get-type&quot;,    ...                      key=&quot;a&quot;):    ...    print(repr(out))    'float'Please note that ``shyaml.do(..)`` outputs a generator iteratingthrough all the yaml documents of the stream. In most usage case,you'll have only one document.You can have a peek at the code, the ``do(..)`` function has a documentedprototype.Contributing============Any suggestion or issue is welcome. Push request are very welcome,please check out the guidelines.Push Request Guidelines-----------------------You can send any code. I'll look at it and will integrate it myself inthe code base and leave you as the author. This process can take time andit'll take less time if you follow the following guidelines:- check your code with PEP8 or pylint. Try to stick to 80 columns wide.- separate your commits per smallest concern.- each commit should pass the tests (to allow easy bisect)- each functionality/bugfix commit should contain the code, tests,  and doc.- prior minor commit with typographic or code cosmetic changes are  very welcome. These should be tagged in their commit summary with  ``!minor``.- the commit message should follow gitchangelog rules (check the git  log to get examples)- if the commit fixes an issue or finished the implementation of a  feature, please mention it in the summary.If you have some questions about guidelines which is not answered here,please check the current ``git log``, you might find previous commit thatwould show you how to deal with your issue.License=======Copyright (c) 2020 Valentin Lab.Licensed under the `BSD License`_... _BSD License: http://raw.github.com/0k/shyaml/master/LICENSEChangelog=========0.6.2 (2020-12-15)------------------Fix~~~- UTF-8 values would end in tracebacks (fixes #51) [Valentin Lab]0.6.1 (2018-12-14)------------------New~~~- Added ``-V|--version`` shyaml command line option to get full version  information. [Valentin Lab]  This includes ``shyaml``'s version, but also PyYAML version installed,  and availability of the C libyaml bindings, and if they are used.Fix~~~- Document behavior on empty input. [Valentin Lab]0.6.0 (2018-12-13)------------------New~~~- Python 3.7 compatibility. [Valentin Lab]- Support YAML streams (fixes #32) [Valentin Lab]- ``shyaml`` can now be used from within python. [Valentin Lab]  You can import ``shyaml`` and launch inner function in a python  program thanks to accessible API.- ``-q`` or ``--quiet`` to avoid printing error message on missing  paths. (fix #14) [Valentin Lab]- Full support of yaml tags (fix #40) [Valentin Lab]Changes~~~~~~~- Finish to document all behaviors. [Valentin Lab]Fix~~~- Script was not installed correctly on windows. (fix #38) [Valentin  Lab]- Python 3 incompatible code removed in ``get-values{,-0}``. [Valentin  Lab]- Use C yaml implementation from ``libyaml`` when available (fix #3)  [Valentin Lab]0.5.2 (2018-04-25)------------------Fix~~~- Missing doc about ``get-length`` and typo corrected in help message.  [Valentin Lab]- Python 3.0 exception when querying for missing keys removed. (fix #34)  [Valentin Lab]0.5.1 (2018-03-06)------------------New~~~- Add ``requirements`` section. [Valentin Lab]- Add command ``get-length`` for structures or sequences (closes #25,  fixes #20) [gt3389b]Fix~~~- Add homebrew installation instructions. [Zhiming Wang]- Using ``-y`` with no argument casted an exception instead of  displaying usage. (fixes #41) [Valentin Lab]0.5.0 (2017-03-23)------------------New~~~- Introduce ``-y`` option to force full yaml output. [Valentin Lab]  By default, output of literal string where directly printed unquoted and  useable. If this is very useful, there are many cases where this is not  consistent and is ambiguous, especially when this string is itself a  YAML representation.  This could actually lead to subtle bugs occuring when re-using  ``shyaml`` output for further parsing.  So if you want unquoted literal types to further process these elements,  use ``-y``. If you expect a string and wan't it plain raw, avoid ``-y``.0.4.2 (2017-02-08)------------------Fix~~~- ``&lt;&lt;:`` YAML merging facility support. [Valentin Lab]0.4.1 (2016-08-29)------------------Fix~~~- On python2, unicode strings would be displayed literaly (fixes #26).  [Valentin Lab]  ``str`` is not the correct type to match all type of strings in python  2. So unicode strings (usually produced thanks to accentuated  characters) would be printed quoted (the python representation).0.4.0 (2016-01-11)------------------New~~~- Avoid reordering mapping keys in the output. [Valentin Lab]  Several commands from ``shyaml`` will output YAML themselves. But in the  process, the whole content is parsed and re-dumped. This can lead to  differences with the original inputs. The ordering of keys can be  annoying in some use cases, even if, well mappings should not be  ordered, these are ordered by the sequential nature of a file, and using  'omap' is often tedious. ``shyaml`` now keep the original order the keys  were met.0.3.4 (2015-03-06)------------------New~~~- Added a nice ``--help`` doc. [Valentin Lab]- Added ``key-values{,-0}`` argument to get key and values in one go.  [Valentin Lab]- Error is casted if no default specified and the key is not existent.  [Valentin Lab]Changes~~~~~~~- Be more informative in some key related error message. (fixed #7)  [Valentin Lab]0.2.2 (2014-03-19)------------------Fix~~~- No argument at all was treated as one empty string argument. Thx Yassa  Bb. (fixes #6) [Valentin Lab]0.2.1 (2013-11-23)------------------New~~~- Python3 support. [Valentin Lab]Fix~~~- Keys can now be empty or contains dots ``.`` if they are properly  escaped (fixes #5, thanks to Daniel Giribet) [Daniel Giribet]0.2.0 (2013-05-03)------------------New~~~- Support for iteration in sequence and struct in one go. [Valentin Lab]Fix~~~- Forgot to mention ``./autogen.sh`` execution when getting the code  from git, and be more clear about other means of installation.  [Valentin Lab]0.1.3 (2013-03-29)------------------Fix~~~- Removed the spurious line feed at the end of any ``shyaml`` output.  [Valentin Lab]- Support querying for... nothing. Which now returns the whole input  YAML. [Valentin Lab]  Before this fix, you couldn't ask for ``shyaml get-value`` alone, even if it  makes sense but is completely useless as it returns the whole YAML input.0.1.2 (2013-03-23)------------------New~~~- Support for list indexes (see README.rst). [Valentin Lab]- Catch exceptions when parsing structure and output a clean error  message. [Valentin Lab]0.1.1 (2013-02-27)------------------Changes~~~~~~~- Some minor enhancements, and an &quot;Install&quot; section. [Valentin Lab]0.1.0 (2013-02-27)------------------- First import. [Valentin Lab]</longdescription>
</pkgmetadata>