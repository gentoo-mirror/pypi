<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-libsass==============A django-compressor filter to compile Sass files using libsass.Installation~~~~~~~~~~~~Starting from a Django project with `django-compressor &lt;https://github.com/django-compressor/django-compressor/&gt;`_ set up:: pip install django-libsassand add django_libsass.SassCompiler to your COMPRESS_PRECOMPILERS setting:: COMPRESS_PRECOMPILERS = (     ('text/x-scss', 'django_libsass.SassCompiler'), )You can now use the content type text/x-scss on your stylesheets, and have themcompiled seamlessly into CSS:: {% load compress %} {% compress css %}     &lt;link rel=&quot;stylesheet&quot; type=&quot;text/x-scss&quot; href=&quot;{% static &quot;myapp/css/main.scss&quot; %}&quot; /&gt; {% endcompress %}Imports~~~~~~~Relative paths in @import lines are followed as you would expect:: @import &quot;../variables.scss&quot;;Additionally, Django's STATICFILES_FINDERS setting is consulted, and all possible locationsfor static files *on the local filesystem* are included on the search path. This makes itpossible to import files across different apps:: @import &quot;myotherapp/css/widget.scss&quot;Settings~~~~~~~~The following settings can be used to control django-libsass's behaviour:* ``LIBSASS_SOURCE_COMMENTS`` - whether to enable SASS source comments (adds comments about source lines). Defaults to ``True`` when Django's ``DEBUG`` is ``True``, ``False`` otherwise.* ``LIBSASS_OUTPUT_STYLE`` - SASS output style. Options are ``'nested'``, ``'expanded'``, ``'compact'`` and ``'compressed'``, although as of libsass 3.0.2 only ``'nested'`` and ``'compressed'`` are implemented. Default is 'nested'. See `SASS documentation for output styles &lt;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#output_style&gt;`_. Note that `django-compressor's settings &lt;http://django-compressor.readthedocs.org/en/latest/settings/&gt;`_ may also affect the formatting of the resulting CSS.* ``LIBSASS_CUSTOM_FUNCTIONS`` - A mapping of custom functions to be made available within the SASS compiler. By default, a ``static`` function is provided, analogous to Django's ``static`` template tag.* ``LIBSASS_SOURCEMAPS`` - Enable embedding sourcemaps into file output (default: False)* ``LIBSASS_PRECISION`` - Number of digits of numerical precision (default: 5)* ``LIBSASS_ADDITIONAL_INCLUDE_PATHS`` - a list of base paths to be recognised in @import lines, in addition to Django's recognised static file locationsCustom functions~~~~~~~~~~~~~~~~The SASS compiler can be extended with custom Python functions defined in the ``LIBSASS_CUSTOM_FUNCTIONS`` setting. By default, a ``static`` function is provided, for generating static paths to resources such as images and fonts::    .foo {        background: url(static(&quot;myapp/image/bar.png&quot;));    }If your ``STATIC_URL`` is '/static/', this will be rendered as::    .foo {        background: url(&quot;/static/myapp/image/bar.png&quot;));    }Why django-libsass?~~~~~~~~~~~~~~~~~~~We wanted to use Sass in a Django project without introducing any external (non pip-installable)dependencies. (Actually, we wanted to use Less, but the same arguments apply...) There are a fewpure Python implementations of Sass and Less, but we found that they invariably didn't match thebehaviour of the reference compilers, either in their handling of @imports or lesser-used CSSfeatures such as media queries.`libsass &lt;http://libsass.org/&gt;`_ is a mature C/C++ port of the Sass engine, co-developed by theoriginal creator of Sass, and we can reasonably rely on it to stay in sync with the referenceSass compiler - and, being C/C++, it's fast. Thanks to Hong Minhee's`libsass-python &lt;https://github.com/dahlia/libsass-python&gt;`_ project, it has Python bindings andinstalls straight from pip.django-libsass builds on libsass-python to make @import paths aware of Django's staticfilesmechanism, and provides a filter module for django-compressor which uses the libsass-python APIdirectly, avoiding the overheads of calling an external executable to do the compilation.Reporting bugs~~~~~~~~~~~~~~Please see the `troubleshooting &lt;https://github.com/torchbox/django-libsass/wiki/Troubleshooting&gt;`_ page for help with some common setup issues.I do not provide support for getting django-libsass working with your CSS framework of choice. If you believe you've found a bug, please try to isolate it as a minimal reproducible test case before reporting it - ideally this will consist of a few edits / additions to the `hello-django-libsass &lt;https://github.com/gasman/hello-django-libsass&gt;`_ example project. If you cannot demonstrate the problem in a few standalone SCSS files, it is almost certainly not a django-libsass bug - any bug reports that relate to a third-party CSS framework are likely to be closed without further investigation.Author~~~~~~Matt Westcott matthew.westcott@torchbox.com</longdescription>
</pkgmetadata>