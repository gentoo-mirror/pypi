<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![flake8 Lint](https://github.com/acdh-oeaw/acdh-cidoc-pyutils/actions/workflows/lint.yml/badge.svg)](https://github.com/acdh-oeaw/acdh-cidoc-pyutils/actions/workflows/lint.yml)[![Test](https://github.com/acdh-oeaw/acdh-cidoc-pyutils/actions/workflows/test.yml/badge.svg)](https://github.com/acdh-oeaw/acdh-cidoc-pyutils/actions/workflows/test.yml)[![codecov](https://codecov.io/gh/acdh-oeaw/acdh-cidoc-pyutils/branch/main/graph/badge.svg?token=XRF7ANN1TM)](https://codecov.io/gh/acdh-oeaw/acdh-cidoc-pyutils)[![PyPI version](https://badge.fury.io/py/acdh-cidoc-pyutils.svg)](https://badge.fury.io/py/acdh-cidoc-pyutils)# acdh-cidoc-pyutilsHelper functions for the generation of CIDOC CRMish RDF (from XML/TEI data)## Installation* install via `pip install acdh-cidoc-pyutils`## Examples* For 'real-world-examples' see e.g. [semantic-kraus project](https://github.com/semantic-kraus/lk-data/blob/main/scripts/make_rdf.py)* also take a look into [test_cidoc_pyutils.py](https://github.com/acdh-oeaw/acdh-cidoc-pyutils/blob/main/tests/test_cidoc_pyutils.py)### extract `cidoc:P14i_performed FRBROO:F51_ Pursuit` triples from `tei:person/tei:occupation` nodes```pythonimport lxml.etree as ETfrom rdflib import URIRefrom acdh_cidoc_pyutils import make_occupations, NSMAPsample = &quot;&quot;&quot;&lt;TEI xmlns=&quot;http://www.tei-c.org/ns/1.0&quot;&gt;    &lt;person xml:id=&quot;DWpers0091&quot; sortKey=&quot;Gulbransson_Olaf_Leonhard&quot;&gt;        &lt;persName type=&quot;pref&quot;&gt;Gulbransson, Olaf&lt;/persName&gt;        &lt;occupation notBefore=&quot;1900-12&quot; notAfter=&quot;2000&quot; key=&quot;#hansi&quot; xml:lang=&quot;it&quot;&gt;Bürgermeister&lt;/occupation&gt;        &lt;occupation from=&quot;1233-02-03&quot; key=&quot;#sumsi&quot;&gt;Tischlermeister/Fleischhauer&lt;/occupation&gt;        &lt;occupation key=&quot;franzi&quot;&gt;Sängerin&lt;/occupation&gt;        &lt;occupation&gt;Bäckerin&lt;/occupation&gt;    &lt;/person&gt;&lt;/TEI&gt;&quot;&quot;&quot;g, uris = make_occupations(subj, x, &quot;https://foo.bar&quot;, id_xpath=&quot;@key&quot;)print(g.serialize())# returns``````ttl@prefix ns1: &lt;http://www.cidoc-crm.org/cidoc-crm/&gt; .@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .&lt;https://foo/bar/DWpers0091&gt; ns1:P14i_performed &lt;https://foo/bar/DWpers0091/occupation/3&gt;,        &lt;https://foo/bar/DWpers0091/occupation/franzi&gt;,        &lt;https://foo/bar/DWpers0091/occupation/hansi&gt;,        &lt;https://foo/bar/DWpers0091/occupation/sumsi&gt; .&lt;https://foo/bar/DWpers0091/occupation/3&gt; a &lt;http://iflastandards.info/ns/fr/frbr/frbroo#F51&gt; ;    rdfs:label &quot;Bäckerin&quot;@de .&lt;https://foo/bar/DWpers0091/occupation/franzi&gt; a &lt;http://iflastandards.info/ns/fr/frbr/frbroo#F51&gt; ;    rdfs:label &quot;Sängerin&quot;@de .&lt;https://foo/bar/DWpers0091/occupation/hansi&gt; a &lt;http://iflastandards.info/ns/fr/frbr/frbroo#F51&gt; ;    rdfs:label &quot;Bürgermeister&quot;@it ;    ns1:P4_has_time-span &lt;https://foo/bar/DWpers0091/occupation/hansi/time-span&gt; .&lt;https://foo/bar/DWpers0091/occupation/hansi/time-span&gt; a ns1:E52_Time-Span ;    rdfs:label &quot;1900-12 - 2000&quot;^^xsd:string ;    ns1:P82a_begin_of_the_begin &quot;1900-12&quot;^^xsd:gYearMonth ;    ns1:P82b_end_of_the_end &quot;2000&quot;^^xsd:gYear .&lt;https://foo/bar/DWpers0091/occupation/sumsi&gt; a &lt;http://iflastandards.info/ns/fr/frbr/frbroo#F51&gt; ;    rdfs:label &quot;Tischlermeister/Fleischhauer&quot;@de ;    ns1:P4_has_time-span &lt;https://foo/bar/DWpers0091/occupation/sumsi/time-span&gt; .&lt;https://foo/bar/DWpers0091/occupation/sumsi/time-span&gt; a ns1:E52_Time-Span ;    rdfs:label &quot;1233-02-03 - 1233-02-03&quot;^^xsd:string ;    ns1:P82a_begin_of_the_begin &quot;1233-02-03&quot;^^xsd:date ;    ns1:P82b_end_of_the_end &quot;1233-02-03&quot;^^xsd:date .```### extract birth/death triples from `tei:person````pythonimport lxml.etree as ETfrom rdflib import URIReffrom acdh_cidoc_pyutils import make_birth_death_entities, NSMAPsample = &quot;&quot;&quot;&lt;TEI xmlns=&quot;http://www.tei-c.org/ns/1.0&quot;&gt;    &lt;person xml:id=&quot;DWpers0091&quot; sortKey=&quot;Gulbransson_Olaf_Leonhard&quot;&gt;        &lt;persName type=&quot;pref&quot;&gt;Gulbransson, Olaf&lt;/persName&gt;        &lt;birth when=&quot;1873-05-26&quot;&gt;            26. 5. 1873&lt;placeName key=&quot;#DWplace00139&quot;&gt;Christiania (Oslo)&lt;/placeName&gt;        &lt;/birth&gt;        &lt;death&gt;            &lt;date notBefore-iso=&quot;1905-07-04&quot; when=&quot;1955&quot; to=&quot;2000&quot;&gt;04.07.1905&lt;/date&gt;            &lt;settlement key=&quot;pmb50&quot;&gt;                &lt;placeName type=&quot;pref&quot;&gt;Wien&lt;/placeName&gt;                &lt;location&gt;&lt;geo&gt;48.2066 16.37341&lt;/geo&gt;&lt;/location&gt;            &lt;/settlement&gt;        &lt;/death&gt;    &lt;/person&gt;&lt;/TEI&gt;&quot;&quot;&quot;doc = ET.fromstring(sample)x = doc.xpath(&quot;.//tei:person[1]&quot;, namespaces=NSMAP)[0]xml_id = x.attrib[&quot;{http://www.w3.org/XML/1998/namespace}id&quot;].lower()item_id = f&quot;https://foo/bar/{xml_id}&quot;subj = URIRef(item_id)event_graph, birth_uri, birth_timestamp = make_birth_death_entities(    subj, x, place_id_xpath=&quot;//tei:placeName[1]/@key)event_graph, birth_uri, birth_timestamp = make_birth_death_entities(    subj, x, event_type=&quot;death&quot;, verbose=True, date_node_xpath=&quot;/tei:date[1]&quot;,    place_id_xpath=&quot;//tei:settlement[1]/@key&quot;)event_graph.serialize(format=&quot;turtle&quot;)# returns``````ttl@prefix ns1: &lt;http://www.cidoc-crm.org/cidoc-crm/&gt; .@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .# birth example&lt;https://foo/bar/dwpers0091/birth&gt; a ns1:E67_Birth ;    rdfs:label &quot;Geburt von Gulbransson, Olaf Leonhard&quot;@fr ;    ns1:P4_has_time-span &lt;https://foo/bar/dwpers0091/birth/time-span&gt; ;    ns1:P7_took_place_at &lt;https://foo/bar/DWplace00139&gt; ;    ns1:P98_brought_into_life &lt;https://foo/bar/dwpers0091&gt; .&lt;https://foo/bar/dwpers0091/birth/time-span&gt; a ns1:E52_Time-Span ;    rdfs:label &quot;1873-05-26 - 1873-05-26&quot;^^xsd:string ;    ns1:P82a_begin_of_the_begin &quot;1873-05-26&quot;^^xsd:date ;    ns1:P82b_end_of_the_end &quot;1873-05-26&quot;^^xsd:date .# death example&lt;https://foo/bar/dwpers0091/death&gt; a ns1:E69_Death ;    rdfs:label &quot;Geburt von Gulbransson, Olaf Leonhard&quot;@fr ;    ns1:P100_was_death_of &lt;https://foo/bar/dwpers0091&gt; ;    ns1:P7_took_place_at &lt;https://foo/bar/pmb50&gt;    ns1:P4_has_time-span &lt;https://foo/bar/dwpers0091/death/time-span&gt; .&lt;https://foo/bar/dwpers0091/death/time-span&gt; a ns1:E52_Time-Span ;    rdfs:label &quot;1905-07-04 - 2000&quot;^^xsd:string ;    ns1:P82a_begin_of_the_begin &quot;1905-07-04&quot;^^xsd:date ;    ns1:P82b_end_of_the_end &quot;2000&quot;^^xsd:gYear .```### create `ns1:P168_place_is_defined_by &quot;Point(456 123)&quot;^^&lt;geo:wktLiteral&gt; .` from tei:coords```pythonimport lxml.etree as ETfrom rdflib import Graph, URIRef, RDFfrom acdh_cidoc_pyutils import coordinates_to_p168, NSMAP, CIDOCsample = &quot;&quot;&quot;&lt;TEI xmlns=&quot;http://www.tei-c.org/ns/1.0&quot;&gt;    &lt;place xml:id=&quot;DWplace00092&quot;&gt;        &lt;placeName type=&quot;orig_name&quot;&gt;Reval (Tallinn)&lt;/placeName&gt;        &lt;location&gt;&lt;geo&gt;123 456&lt;/geo&gt;&lt;/location&gt;    &lt;/place&gt;&lt;/TEI&gt;&quot;&quot;&quot;doc = ET.fromstring(sample)g = Graph()for x in doc.xpath(&quot;.//tei:place&quot;, namespaces=NSMAP):    xml_id = x.attrib[&quot;{http://www.w3.org/XML/1998/namespace}id&quot;].lower()    item_id = f&quot;https://foo/bar/{xml_id}&quot;    subj = URIRef(item_id)    g.add((subj, RDF.type, CIDOC[&quot;E53_Place&quot;]))    g += coordinates_to_p168(subj, x)print(g.serialize())# returns``````ttl...    ns1:P168_place_is_defined_by &quot;Point(456 123)&quot;^^&lt;geo:wktLiteral&gt; ....```* Function parameter `verbose` prints information in case the given xpath does not return expected results which is a text node with two numbers separated by a given separator (default value is `separator=&quot; &quot;`)* Function parameter `inverse` (default: `inverse=False`) changes the order of the coordinates.### date-like-string to casted rdflib.Literal```pythonfrom acdh_cidoc_pyutils import date_to_literal ddates = [    &quot;1900&quot;,    &quot;1900-01&quot;,    &quot;1901-01-01&quot;,    &quot;foo&quot;,]for x in dates:    date_literal = date_to_literal(x)    print((date_literal.datatype))# returns# http://www.w3.org/2001/XMLSchema#gYear# http://www.w3.org/2001/XMLSchema#gYearMonth# http://www.w3.org/2001/XMLSchema#date# http://www.w3.org/2001/XMLSchema#string```### make some random URI```pythonfrom acdh_cidoc_pyutils import make_uridomain = &quot;https://hansi4ever.com/&quot;version = &quot;1&quot;prefix = &quot;sumsi&quot;uri = make_uri(domain=domain, version=version, prefix=prefix)print(uri)# https://hansi4ever.com/1/sumsi/6ead32b8-9713-11ed-8065-65787314013curi = make_uri(domain=domain)print(uri)# https://hansi4ever.com/8b912e66-9713-11ed-8065-65787314013c```### create an E52_Time-Span graph```pythonfrom acdh_cidoc_pyutils import create_e52, make_uriuri = make_uri()e52 = create_e52(uri, begin_of_begin=&quot;1800-12-12&quot;, end_of_end=&quot;1900-01&quot;)print(e52.serialize())# returns``````ttl# @prefix ns1: &lt;http://www.cidoc-crm.org/cidoc-crm/&gt; .# @prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .# @prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .# &lt;https://hansi4ever.com/387fb457-971b-11ed-8065-65787314013c&gt; a ns1:E52_Time-Span ;#     rdfs:label &quot;1800-12-12 - 1900-01&quot;^^xsd:string ;#     ns1:P82a_begin_of_the_begin &quot;1800-12-12&quot;^^xsd:date ;#     ns1:P82b_end_of_the_end &quot;1900-01&quot;^^xsd:gYearMonth .```### creates E42 from tei:org|place|persontakes a tei:person|place|org node, extracts their `@xml:id` and all `tei:idno` elements, derives `idoc:E42_Identifier` triples and relates them to a passed in subject via `cidoc:P1_is_identified_by````pythonimport lxml.etree as ETfrom rdflib import Graph, URIRef, RDFfrom acdh_cidoc_pyutils import make_e42_identifiers, NSMAP, CIDOCsample = &quot;&quot;&quot;&lt;TEI xmlns=&quot;http://www.tei-c.org/ns/1.0&quot;&gt;    &lt;place xml:id=&quot;DWplace00092&quot;&gt;        &lt;placeName type=&quot;orig_name&quot;&gt;Reval (Tallinn)&lt;/placeName&gt;        &lt;placeName xml:lang=&quot;de&quot; type=&quot;simple_name&quot;&gt;Reval&lt;/placeName&gt;        &lt;placeName xml:lang=&quot;und&quot; type=&quot;alt_label&quot;&gt;Tallinn&lt;/placeName&gt;        &lt;idno type=&quot;pmb&quot;&gt;https://pmb.acdh.oeaw.ac.at/entity/42085/&lt;/idno&gt;        &lt;idno type=&quot;URI&quot; subtype=&quot;geonames&quot;&gt;https://www.geonames.org/588409&lt;/idno&gt;        &lt;idno subtype=&quot;foobarid&quot;&gt;12345&lt;/idno&gt;    &lt;/place&gt;&lt;/TEI&gt;&quot;&quot;&quot;doc = ET.fromstring(sample)g = Graph()for x in doc.xpath(&quot;.//tei:place|tei:org|tei:person|tei:bibl&quot;, namespaces=NSMAP):    xml_id = x.attrib[&quot;{http://www.w3.org/XML/1998/namespace}id&quot;].lower()    item_id = f&quot;https://foo/bar/{xml_id}&quot;    subj = URIRef(item_id)    g.add((subj, RDF.type, CIDOC[&quot;E53_Place&quot;]))    g += make_e42_identifiers(        subj, x, type_domain=&quot;http://hansi/4/ever&quot;, default_lang=&quot;it&quot;,    )print(g.serialize(format=&quot;turtle&quot;))# returns``````ttl@prefix ns1: &lt;http://www.cidoc-crm.org/cidoc-crm/&gt; .@prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt; .@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .&lt;https://foo/bar/dwplace00092&gt; a ns1:E53_Place ;    ns1:P1_is_identified_by &lt;https://foo/bar/dwplace00092/identifier/DWplace00092&gt;,        &lt;https://foo/bar/dwplace00092/identifier/idno/0&gt;,        &lt;https://foo/bar/dwplace00092/identifier/idno/1&gt;,        &lt;https://foo/bar/dwplace00092/identifier/idno/2&gt; ;    owl:sameAs &lt;https://pmb.acdh.oeaw.ac.at/entity/42085/&gt;,        &lt;https://www.geonames.org/588409&gt; .&lt;http://hansi/4/ever/idno/URI/geonames&gt; a ns1:E55_Type .&lt;http://hansi/4/ever/idno/foobarid&gt; a ns1:E55_Type .&lt;http://hansi/4/ever/idno/pmb&gt; a ns1:E55_Type .&lt;http://hansi/4/ever/xml-id&gt; a ns1:E55_Type .&lt;https://foo/bar/dwplace00092/identifier/DWplace00092&gt; a ns1:E42_Identifier ;    rdfs:label &quot;Identifier: DWplace00092&quot;@it ;    rdf:value &quot;DWplace00092&quot;;    ns1:P2_has_type &lt;http://hansi/4/ever/xml-id&gt; .&lt;https://foo/bar/dwplace00092/identifier/idno/0&gt; a ns1:E42_Identifier ;    rdfs:label &quot;Identifier: https://pmb.acdh.oeaw.ac.at/entity/42085/&quot;@it ;    rdf:value &quot;https://pmb.acdh.oeaw.ac.at/entity/42085/&quot;;    ns1:P2_has_type &lt;http://hansi/4/ever/idno/pmb&gt; .&lt;https://foo/bar/dwplace00092/identifier/idno/1&gt; a ns1:E42_Identifier ;    rdfs:label &quot;Identifier: https://www.geonames.org/588409&quot;@it ;    rdf:value &quot;https://www.geonames.org/588409&quot;     ns1:P2_has_type &lt;http://hansi/4/ever/idno/URI/geonames&gt; .&lt;https://foo/bar/dwplace00092/identifier/idno/2&gt; a ns1:E42_Identifier ;    rdfs:label &quot;Identifier: 12345&quot;@it ;    rdf:value &quot;12345&quot;;    ns1:P2_has_type &lt;http://hansi/4/ever/idno/foobarid&gt; .```### creates appellations from tei:org|place|persontakes a tei:person|place|org node, extracts `persName, placeName and orgName` texts, `@xml:lang` and custom type values and returns `cidoc:E33_41` and `cidoc:E55` nodes linked via `cidoc:P1_is_identified_by` and `cidoc:P2_has_type````pythonimport lxml.etree as ETfrom rdflib import Graph, URIRef, RDFfrom acdh_cidoc_pyutils import make_appellations, NSMAP, CIDOCsample = &quot;&quot;&quot;&lt;TEI xmlns=&quot;http://www.tei-c.org/ns/1.0&quot;&gt;    &lt;place xml:id=&quot;DWplace00092&quot;&gt;        &lt;placeName type=&quot;orig_name&quot;&gt;Reval (Tallinn)&lt;/placeName&gt;        &lt;placeName xml:lang=&quot;de&quot; type=&quot;simple_name&quot;&gt;Reval&lt;/placeName&gt;        &lt;placeName xml:lang=&quot;und&quot; type=&quot;alt_label&quot;&gt;Tallinn&lt;/placeName&gt;        &lt;idno type=&quot;pmb&quot;&gt;https://pmb.acdh.oeaw.ac.at/entity/42085/&lt;/idno&gt;    &lt;/place&gt;&lt;/TEI&gt;&quot;&quot;&quot;doc = ET.fromstring(sample)g = Graph()for x in doc.xpath(&quot;.//tei:place|tei:org|tei:person|tei:bibl&quot;, namespaces=NSMAP):    xml_id = x.attrib[&quot;{http://www.w3.org/XML/1998/namespace}id&quot;].lower()    item_id = f&quot;https://foo/bar/{xml_id}&quot;    subj = URIRef(item_id)    g.add((subj, RDF.type, CIDOC[&quot;E53_Place&quot;]))    g += make_appellations(        subj, x, type_domain=&quot;http://hansi/4/ever&quot;, default_lang=&quot;it&quot;    )g.serialize(format=&quot;ttl&quot;)# returns``````ttl@prefix ns1: &lt;http://www.cidoc-crm.org/cidoc-crm/&gt; .@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .&lt;https://foo/bar/dwplace00092&gt; a ns1:E53_Place ;    ns1:P1_is_identified_by &lt;https://foo/bar/dwplace00092/appellation/0&gt;,        &lt;https://foo/bar/dwplace00092/appellation/1&gt;,        &lt;https://foo/bar/dwplace00092/appellation/2&gt; .&lt;http://hansi/4/ever/alt-label&gt; a ns1:E55_Type ;    rdfs:label &quot;alt_label&quot; .&lt;http://hansi/4/ever/orig-name&gt; a ns1:E55_Type ;    rdfs:label &quot;orig_name&quot; .&lt;http://hansi/4/ever/simple-name&gt; a ns1:E55_Type ;    rdfs:label &quot;simple_name&quot; .&lt;https://foo/bar/dwplace00092/appellation/0&gt; a ns1:E33_E41_Linguistic_Appellation ;    rdfs:label &quot;Reval (Tallinn)&quot;@it ;    ns1:P2_has_type &lt;http://hansi/4/ever/orig-name&gt; .&lt;https://foo/bar/dwplace00092/appellation/1&gt; a ns1:E33_E41_Linguistic_Appellation ;    rdfs:label &quot;Reval&quot;@de ;    ns1:P2_has_type &lt;http://hansi/4/ever/simple-name&gt; .&lt;https://foo/bar/dwplace00092/appellation/2&gt; a ns1:E33_E41_Linguistic_Appellation ;    rdfs:label &quot;Tallinn&quot;@und ;    ns1:P2_has_type &lt;http://hansi/4/ever/alt-label&gt; .```### normalize_string```pythonfrom acdh_cidoc_pyutils import normalize_stringstring = &quot;&quot;&quot;\n\nhallomein schatz ich liebe    dich    du bist         die einzige für mich        &quot;&quot;&quot;print(normalize_string(string))# returns# hallo mein schatz ich liebe dich du bist die einzige für mich```### extract date attributes (begin, end)expects typical TEI date attributes like `@when, @when-iso, @notBefore, @notAfter, @from, @to, ...` and returns a tuple containg start- and enddate values. If only `@when or @when-iso` or only `@notBefore or @notAfter` are provided, the returned values are the same, unless the default parameter `fill_missing` is set to `False`. ```pythonfrom lxml.etree import Elementfrom acdh_cidoc_pyutils import extract_begin_enddate_string = &quot;1900-12-12&quot;date_object = Element(&quot;{http://www.tei-c.org/ns/1.0}tei&quot;)date_object.attrib[&quot;when-iso&quot;] = date_stringprint(extract_begin_end(date_object))# returns# ('1900-12-12', '1900-12-12')date_string = &quot;1900-12-12&quot;date_object = Element(&quot;{http://www.tei-c.org/ns/1.0}tei&quot;)date_object.attrib[&quot;when-iso&quot;] = date_stringprint(extract_begin_end(date_object, fill_missing=False))# returns# ('1900-12-12', None)date_object = Element(&quot;{http://www.tei-c.org/ns/1.0}tei&quot;)date_object.attrib[&quot;notAfter&quot;] = &quot;1900-12-12&quot;date_object.attrib[&quot;notBefore&quot;] = &quot;1800&quot;print(extract_begin_end(date_object))# returns# ('1800', '1900-12-12')```## development* `pip install -r requirements_dev.txt`* `flake8` -&gt; linting* `coveage run -m pytest` -&gt; runs tests and creates coverage stats</longdescription>
</pkgmetadata>