<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: http://www.repostatus.org/badges/latest/active.svg    :target: http://www.repostatus.org/#active    :alt: Project Status: Active — The project has reached a stable, usable          state and is being actively developed... image:: https://github.com/jwodder/mailbits/workflows/Test/badge.svg?branch=master    :target: https://github.com/jwodder/mailbits/actions?workflow=Test    :alt: CI Status.. image:: https://codecov.io/gh/jwodder/mailbits/branch/master/graph/badge.svg    :target: https://codecov.io/gh/jwodder/mailbits.. image:: https://img.shields.io/pypi/pyversions/mailbits.svg    :target: https://pypi.org/project/mailbits/.. image:: https://img.shields.io/github/license/jwodder/mailbits.svg    :target: https://opensource.org/licenses/MIT    :alt: MIT License`GitHub &lt;https://github.com/jwodder/mailbits&gt;`_| `PyPI &lt;https://pypi.org/project/mailbits/&gt;`_| `Issues &lt;https://github.com/jwodder/mailbits/issues&gt;`_| `Changelog &lt;https://github.com/jwodder/mailbits/blob/master/CHANGELOG.md&gt;`_``mailbits`` provides a small assortment of functions for working with thePython standard library's ``Message``/``EmailMessage``, ``Address``, and``Group`` types, as well as a couple other features.  It can parse &amp; reassembleContent-Type strings, convert instances of the old ``Message`` class to the new``EmailMessage``, convert ``Message`` &amp; ``EmailMessage`` instances intostructured ``dict``\s, parse addresses, format address lists, and extractrecipients' raw e-mail addresses from an ``EmailMessage``.Installation============``mailbits`` requires Python 3.6 or higher.  Just use `pip&lt;https://pip.pypa.io&gt;`_ for Python 3 (You have pip, right?) to install it::    python3 -m pip install mailbitsAPI===``ContentType``---------------The ``ContentType`` class provides a representation of a parsed Content-Typeheader value.  Parse Content-Type strings with the ``parse()`` classmethod,inspect the parts via the ``content_type``, ``maintype``, ``subtype``, and``params`` attributes (the last three of which can be mutated), convert back toa string with ``str()``, and convert to ASCII bytes using encoded words fornon-ASCII with ``bytes()``.&gt;&gt;&gt; from mailbits import ContentType&gt;&gt;&gt; ct = ContentType.parse(&quot;text/plain; charset=utf-8; name*=utf-8''r%C3%A9sum%C3%A9.txt&quot;)&gt;&gt;&gt; ctContentType(maintype='text', subtype='plain', params={'charset': 'utf-8', 'name': 'résumé.txt'})&gt;&gt;&gt; ct.content_type'text/plain'&gt;&gt;&gt; str(ct)'text/plain; charset=&quot;utf-8&quot;; name=&quot;résumé.txt&quot;'&gt;&gt;&gt; bytes(ct)b'text/plain; charset=&quot;utf-8&quot;; name*=utf-8\'\'r%C3%A9sum%C3%A9.txt'``email2dict()``----------------.. code:: python    class MessageDict(TypedDict):        unixfrom: Optional[str]        headers: Dict[str, Any]        preamble: Optional[str]        content: Any        epilogue: Optional[str]    mailbits.email2dict(msg: email.message.Message, include_all: bool = False) -&gt; MessageDictConvert a ``Message`` object to a ``dict``.  All encoded text &amp; bytes aredecoded into their natural values.Need to examine a ``Message`` but find the builtin Python API too fiddly?  Needto check that a ``Message`` has the content &amp; structure you expect?  Need tocompare two ``Message`` instances for equality?  Need to pretty-print thestructure of a ``Message``?  Then ``email2dict()`` has your back.By default, any information specific to how the message is encoded (Content-Typeparameters, Content-Transfer-Encoding, etc.) is not reported, as the focus ison the actual content rather than the choices made in representing it.  Toinclude this information anyway, set ``include_all`` to ``True``.The output structure has the following fields:``unixfrom``    The &quot;From &quot; line marking the start of the message in a mbox, if any``headers``    A ``dict`` mapping lowercased header field names to values.  The following    headers have special representations:    ``subject``        A single string    ``from``, ``to``, ``cc``, ``bcc``, ``resent-from``, ``resent-to``, ``resent-cc``, ``resent-bcc``, ``reply-to``        A list of groups and/or addresses.  Addresses are represented as        ``dict``\s with two string fields: ``display_name`` (an empty string if        not given) and ``address``.  Groups are represented as ``dict``\s with        a ``group`` field giving the name of the group and an ``addresses``        field giving a list of addresses in the group.    ``message-id``        A single string    ``content-type``        A ``dict`` containing a ``content_type`` field (a string of the form        ``maintype/subtype``, e.g., ``&quot;text/plain&quot;``) and a ``params`` field (a        ``dict`` of string keys &amp; values).  The ``charset`` and ``boundary``        parameters are discarded unless ``include_all`` is ``True``.    ``date``        A ``datetime.datetime`` instance    ``orig-date``        A ``datetime.datetime`` instance    ``resent-date``        A list of ``datetime.datetime`` instances    ``sender``        A single address ``dict``    ``resent-sender``        A list of address ``dict``\s    ``content-disposition``        A ``dict`` containing a ``disposition`` field (value either        ``&quot;inline&quot;`` or ``&quot;attachment&quot;``) and a ``params`` field (a ``dict`` of        string keys &amp; values)    ``content-transfer-encoding``        A single string.  This header is discarded unless ``include_all`` is        ``True``.    ``mime-version``        A single string.  This header is discarded unless ``include_all`` is        ``True``.    All other headers are represented as lists of strings.``preamble``    The message's preamble__    __ https://docs.python.org/3/library/email.message.html       #email.message.EmailMessage.preamble``content``    If the message is multipart, this is a list of message ``dict``\s,    structured the same way as the top-level ``dict``.  If the message's    Content-Type is ``message/rfc822`` or ``message/external-body``, this is a    single message ``dict``.  If the message's Content-Type is ``text/*``, this    is a ``str`` giving the contents of the message.  Otherwise, it is a    ``bytes`` giving the contents of the message.``epilogue``    The message's epilogue__    __ https://docs.python.org/3/library/email.message.html       #email.message.EmailMessage.epilogueAn example: The ``email`` `examples page`__ in the Python docs includes anexample of constructing an HTML e-mail with an alternative plain text version(It's the one with the subject &quot;Ayons asperges pour le déjeuner&quot;).  Passing theresulting ``EmailMessage`` object to ``email2dict()`` produces the followingoutput structure:__ https://docs.python.org/3/library/email.examples.html.. code:: python    {        &quot;unixfrom&quot;: None,        &quot;headers&quot;: {            &quot;subject&quot;: &quot;Ayons asperges pour le déjeuner&quot;,            &quot;from&quot;: [                {                    &quot;display_name&quot;: &quot;Pepé Le Pew&quot;,                    &quot;address&quot;: &quot;pepe@example.com&quot;,                },            ],            &quot;to&quot;: [                {                    &quot;display_name&quot;: &quot;Penelope Pussycat&quot;,                    &quot;address&quot;: &quot;penelope@example.com&quot;,                },                {                    &quot;display_name&quot;: &quot;Fabrette Pussycat&quot;,                    &quot;address&quot;: &quot;fabrette@example.com&quot;,                },            ],            &quot;content-type&quot;: {                &quot;content_type&quot;: &quot;multipart/alternative&quot;,                &quot;params&quot;: {},            },        },        &quot;preamble&quot;: None,        &quot;content&quot;: [            {                &quot;unixfrom&quot;: None,                &quot;headers&quot;: {                    &quot;content-type&quot;: {                        &quot;content_type&quot;: &quot;text/plain&quot;,                        &quot;params&quot;: {},                    },                },                &quot;preamble&quot;: None,                &quot;content&quot;: (                    &quot;Salut!\n&quot;                    &quot;\n&quot;                    &quot;Cela ressemble à un excellent recipie[1] déjeuner.\n&quot;                    &quot;\n&quot;                    &quot;[1] http://www.yummly.com/recipe/Roasted-Asparagus-Epicurious-203718\n&quot;                    &quot;\n&quot;                    &quot;--Pepé\n&quot;                ),                &quot;epilogue&quot;: None,            },            {                &quot;unixfrom&quot;: None,                &quot;headers&quot;: {                    &quot;content-type&quot;: {                        &quot;content_type&quot;: &quot;multipart/related&quot;,                        &quot;params&quot;: {},                    },                },                &quot;preamble&quot;: None,                &quot;content&quot;: [                    {                        &quot;unixfrom&quot;: None,                        &quot;headers&quot;: {                            &quot;content-type&quot;: {                                &quot;content_type&quot;: &quot;text/html&quot;,                                &quot;params&quot;: {},                            },                        },                        &quot;preamble&quot;: None,                        &quot;content&quot;: (                            &quot;&lt;html&gt;\n&quot;                            &quot;  &lt;head&gt;&lt;/head&gt;\n&quot;                            &quot;  &lt;body&gt;\n&quot;                            &quot;    &lt;p&gt;Salut!&lt;/p&gt;\n&quot;                            &quot;    &lt;p&gt;Cela ressemble à un excellent\n&quot;                            &quot;        &lt;a href=\&quot;http://www.yummly.com/recipe/Roasted-Asparagus-&quot;                            &quot;Epicurious-203718\&quot;&gt;\n&quot;                            &quot;            recipie\n&quot;                            &quot;        &lt;/a&gt; déjeuner.\n&quot;                            &quot;    &lt;/p&gt;\n&quot;                            &quot;    &lt;img src=\&quot;cid:RANDOM_MESSAGE_ID\&quot; /&gt;\n&quot;                            &quot;  &lt;/body&gt;\n&quot;                            &quot;&lt;/html&gt;\n&quot;                        ),                        &quot;epilogue&quot;: None,                    },                    {                        &quot;unixfrom&quot;: None,                        &quot;headers&quot;: {                            &quot;content-type&quot;: {                                &quot;content_type&quot;: &quot;image/png&quot;,                                &quot;params&quot;: {},                            },                            &quot;content-disposition&quot;: {                                &quot;disposition&quot;: &quot;inline&quot;,                                &quot;params&quot;: {},                            },                            &quot;content-id&quot;: [&quot;&lt;RANDOM_MESSAGE_ID&gt;&quot;],                        },                        &quot;preamble&quot;: None,                        &quot;content&quot;: b'IMAGE BLOB',                        &quot;epilogue&quot;: None,                    },                ],                &quot;epilogue&quot;: None,            },        ],        &quot;epilogue&quot;: None,    }``format_addresses()``----------------------.. code:: python    mailbits.format_addresses(addresses: Iterable[Union[str, Address, Group]], encode: bool = False) -&gt; strConvert an iterable of e-mail address strings (of the form&quot;``foo@example.com``&quot;, without angle brackets or a display name),``email.headerregistry.Address`` objects, and/or ``email.headerregistry.Group``objects into a formatted string.  If ``encode`` is ``False`` (the default),non-ASCII characters are left as-is.  If it is ``True``, non-ASCII displaynames are converted into :RFC:`2047` encoded words, and non-ASCII domain namesare encoded using Punycode.``message2email()``-------------------.. code:: python    mailbits.message2email(msg: email.message.Message) -&gt; email.message.EmailMessageConvert an instance of the old ``Message`` class (or one of its subclasses,like a ``mailbox`` message class) to an instance of the new ``EmailMessage``class with the ``default`` policy.  If ``msg`` is already an ``EmailMessage``,it is returned unchanged.``parse_address()``-------------------.. code:: python    mailbits.parse_address(s: str) -&gt; email.headerregistry.AddressParse a single e-mail address — either a raw address like &quot;``foo@example.com``&quot;or a combined display name &amp; address like &quot;``Fabian Oh &lt;foo@example.com&gt;``&quot;into an ``Address`` object.``parse_addresses()``---------------------.. code:: python    mailbits.parse_addresses(s: Union[str, email.headerregistry.AddressHeader]) \        -&gt; List[Union[email.headerregistry.Address, email.headerregistry.Group]]Parse a formatted list of e-mail addresses or the contents of an``EmailMessage``'s &quot;To&quot;, &quot;CC&quot;, &quot;BCC&quot;, etc. header into a list of ``Address``and/or ``Group`` objects.``recipient_addresses()``-------------------------.. code:: python    mailbits.recipient_addresses(msg: email.message.EmailMessage) -&gt; List[str]Return a sorted list of all of the distinct e-mail addresses (not includingdisplay names) in an ``EmailMessage``'s combined &quot;To&quot;, &quot;CC&quot;, and &quot;BCC&quot; headers.</longdescription>
</pkgmetadata>