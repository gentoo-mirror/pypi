<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-model-import[![PyPI version](https://badge.fury.io/py/django-model-import.svg)](https://badge.fury.io/py/django-model-import)Django Model Import is a light weight CSV importer built for speed.It uses a standard Django `ModelForm` to parse each row, giving you a familiar API to work withfor data validation and model instantiation. In most cases, if you already have a `ModelForm`for the `ContentType` you are importing you do not need to create an import specific form.To present feedback to the end-user running the import you can easily generate a previewof the imported data by toggling the `commit` parameter.It also provides some import optimized fields for ForeignKey's, allowing preloading allpossible values, or caching each lookup as it occurs, or looking up a model where multiplefields are needed to uniquely identify a resource.## Installation```bashpoetry add django-model-import```## Quickstart```pythonimport djangomodelimportclass BookImporter(djangomodelimport.ImporterModelForm):    name = forms.CharField()    author = CachedChoiceField(queryset=Author.objects.all(), to_field='name')    class Meta:        model = Book        fields = (            'name',            'author',        )with default_storage.open('books.csv', 'rb') as fh:    data = fh.read().decode(&quot;utf-8&quot;)# Use tablibparser = djangomodelimport.TablibCSVImportParser(BookImporter)headers, rows = parser.parse(data)# Processimporter = djangomodelimport.ModelImporter(BookImporter)preview = importer.process(headers, rows, commit=False)errors = preview.get_errors()if errors:    print(errors)importresult = importer.process(headers, rows, commit=True)for result in importresult.get_results():    print(result.instance)```## Composite key lookupsOften a relationship cannot be referenced via a single unique string. For this we can usea `CachedChoiceField` with a `CompositeLookupWidget`. The widget looks for the valuesunder the `type` and `variant` columns in the source CSV, and does a unique lookupwith the field names specified in `to_field`, e.g. `queryset.get(type__name=type, name=variant)`.The results of each `get` are cached internally for the remainder of the import minimisingany database access.```pythonclass AssetImporter(ImporterModelForm):    site = djangomodelimport.CachedChoiceField(queryset=Site.objects.active(), to_field='ref')    type = djangomodelimport.CachedChoiceField(queryset=AssetType.objects.filter(is_active=True), to_field='name')    type_variant = djangomodelimport.CachedChoiceField(        queryset=InspectionItemTypeVariant.objects.filter(is_active=True),        required=False,        widget=djangomodelimport.CompositeLookupWidget(source=('type', 'variant')),        to_field=('type__name', 'name'),    )    contractor = djangomodelimport.CachedChoiceField(queryset=Contractor.objects.active(), to_field='name')```## Flat related fieldsOften you'll have a OneToOneField or just a ForeignKey to another model, but you want to be able tocreate/update that other model via this one. You can flatten all of the related model's fields ontothis importer using `FlatRelatedField`.```pythonclass ClientImporter(ImporterModelForm):    primary_contact = FlatRelatedField(        queryset=ContactDetails.objects.all(),        fields={            'contact_name': {'to_field': 'name', 'required': True},            'email': {'to_field': 'email'},            'email_cc': {'to_field': 'email_cc'},            'mobile': {'to_field': 'mobile'},            'phone_bh': {'to_field': 'phone_bh'},            'phone_ah': {'to_field': 'phone_ah'},            'fax': {'to_field': 'fax'},        },    )    class Meta:        model = Client        fields = (            'name',            'ref',            'is_active',            'account',            'primary_contact',        )```## TestsRun tests with `python example/manage.py test testapp`</longdescription>
</pkgmetadata>