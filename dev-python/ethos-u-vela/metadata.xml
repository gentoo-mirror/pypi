<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--SPDX-FileCopyrightText: Copyright 2020-2023 Arm Limited and/or its affiliates &lt;open-source-office@arm.com&gt;SPDX-License-Identifier: Apache-2.0Licensed under the Apache License, Version 2.0 (the License); you maynot use this file except in compliance with the License.You may obtain a copy of the License atwww.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an AS IS BASIS, WITHOUTWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--&gt;# VelaThis tool is used to compile a[TensorFlow Lite for Microcontrollers](https://www.tensorflow.org/lite/microcontrollers)neural network model into an optimised version that can run on an embeddedsystem containing an[Arm Ethos-U NPU](https://www.arm.com/products/silicon-ip-cpu).In order to be accelerated by the Ethos-U NPU the network operators must bequantised to either 8-bit (unsigned or signed) or 16-bit (signed).The optimised model will contain TensorFlow Lite Custom operators for thoseparts of the model that can be accelerated by the Ethos-U NPU.  Parts of themodel that cannot be accelerated are left unchanged and will instead run on theCortex-M series CPU using an appropriate kernel (such as the[Arm](https://www.arm.com) optimised[CMSIS-NN](https://github.com/ARM-software/CMSIS_5/tree/develop/CMSIS/NN)kernels).After compilation the optimised model can only be run on an Ethos-U NPUembedded system.The tool will also generate performance estimates (EXPERIMENTAL) for thecompiled model.The tool has limited functionality for compiling a[TOSA](https://git.mlplatform.org/tosa/specification.git/) neural network(EXPERIMENTAL).## TensorFlow SupportVela is tested by comparing the bit exact numerical behaviour of the Ethos-Uoptimised operators against that of the corresponding TensorFlow Lite referencekernels (or TensorFlow Lite for Microcontrollers reference kernels in the caseof the UNIDIRECTIONAL_SEQUENCE_LSTM operator).  The following list indicateswhich version is used for comparison:* Vela 3.10.0 to current supports TensorFlow 2.14* Vela 3.9.0 supports TensorFlow 2.12* Vela 3.8.0 supports TensorFlow 2.11* Vela 3.6.0 to 3.7.0 supports TensorFlow 2.10* Vela 3.5.0 supports TensorFlow 2.9* Vela 3.4.0 supports TensorFlow 2.8* Vela 3.3.0 supports TensorFlow 2.7* Vela 3.1.0 to 3.2.0 supports TensorFlow 2.5* Vela 2.1.0 to 3.0.0 supports TensorFlow 2.4* Vela 2.0.0 to 2.0.1 supports TensorFlow 2.3* Vela 0.1.0 to 1.2.0 supports TensorFlow 2.1## Python Version SupportThe majority of Vela's testing is done using a single version of Python, asindicated by the first version in the list below.  However, some additionaltesting is also performed across a range of newer versions starting at theminimum version (pyproject.toml:project.requires-python) indicated in thebrackets:* Vela 3.10.0 to current supports Python 3.10 (3.9)* Vela 3.9.0 supports Python 3.10 (3.8)* Vela 3.8.0 supports Python 3.9 (3.8)* Vela 3.4.0 to 3.7.0 supports Python 3.7 (3.8)* Vela 3.3.0 supports Python 3.8 (3.7)* Vela 0.1.0 to 3.2.0 supports Python 3.6 (3.7)## EnvironmentVela runs on Linux and Microsoft Windows 10 operating systems.## PrerequisitesThe following should be installed prior to the installation of Vela:* Python 3.10 or compatible   - Development version containing the Python/C API header files   - e.g. `apt install python3.10-dev` or `yum install python310-devel`* Pip3* C99 capable compiler and associated toolchain    - For Linux operating systems, a GNU toolchain is recommended.    - For Microsoft Windows 10, the Microsoft Visual C++ 14.2 Build Tools are recommended.      See &lt;https://wiki.python.org/moin/WindowsCompilers&gt;## InstallationVela is available to install as a package from[PyPi](https://pypi.org/project/ethos-u-vela/), or assource code from[ML Platform](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela).Both methods will automatically install all the required dependencies.### PyPiInstall Vela from PyPi using the following command:```bashpip3 install ethos-u-vela```### ML PlatformFirst obtain the source code by either downloading the desired TGZ file from:  &lt;https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela&gt;Or by cloning the git repository:```bashgit clone https://review.mlplatform.org/ml/ethos-u/ethos-u-vela.git```Once you have the source code, Vela can be installed using the followingcommand from the root directory of the repository:```bashpip3 install .```#### Advanced Installation for DevelopersIf you plan to modify the Vela codebase then it is recommended to install Velaas an editable package to avoid the need to re-install after every modification.This is done by adding the `-e` option to the install command like so:```bashpip3 install -e .[dev]```If you plan to contribute to the Vela project (highly encouraged!) then it isrecommended to install Vela with the development dependencies (see[Vela Testing](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/TESTING.md) for more details).## RunningVela is run with an input `.tflite` or `.tosa` (EXPERIMENTAL) file passed on thecommand line. This file contains the neural network to be compiled. The tool thenoutputs an optimised `.tflite` file with a `_vela` suffix in the file name, alongwith performance estimate (EXPERIMENTAL) CSV files, all to the output directory.It also prints a performance estimation summary back to the console, see[Vela Performance Estimation Summary](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/PERFORMANCE.md).Example usage:1) Compile the network `my_model.tflite`.  The optimised version will be outputto `./output/my_network_vela.tflite`.```bashvela my_model.tflite```2) Compile the network `/path/to/my_model.tflite` and specify the output to goin the directory `./results_dir/`.```bashvela --output-dir ./results_dir /path/to/my_model.tflite```3) Compile a network targeting a particular Ethos-U NPU.  The following commandselects an Ethos-U65 NPU accelerator configured with 512 MAC units.```bashvela --accelerator-config ethos-u65-512 my_model.tflite```4) Compile a network while minimizing peak SRAM usage, prioritising lower SRAMusage over runtime performance.```bashvela --optimise Size my_model.tflite```5) Compile a network to have maximum performance, i.e. the fastest inference time.This prioritises a higher runtime performance over a lower peak SRAM usage.```bashvela --optimise Performance my_model.tflite```6) Compile a network while optimising for the fastest inference time possible,with an upper bound for the SRAM usage. The memory limit is set in bytes, i.e.run the following example if one requires a limit of 300KB.```bashvela --optimise Performance --arena-cache-size 300000 my_model.tflite```7) Compile a network using a particular embedded system configuration defined inVela's configuration file.  The following command selects the `My_Sys_Config`system configuration along with the `My_Mem_Mode` memory mode from the `vela.ini`configuration file located in the config_files directory.```bashvela --config Arm/vela.ini --system-config My_Sys_Config --memory-mode My_Mem_Mode my_model.tflite```8) To get a list of all available configuration files in the config_files directory:```bashvela --list-config-files```9) To get a list of all available options (see CLI Options section below):```bashvela --help```## WarningsWhen running the Vela compiler it may report a number of warning messages to theconsole. These should all be thoroughly reviewed as they will indicate decisionsthat the compiler has made in order to create the optimised network.## Example NetworksSome example networks that contain quantised operators which can be compiled byVela to run on the Ethos-U NPU can be found at:&lt;https://tfhub.dev/s?deployment-format=lite&amp;q=quantized&gt;## Known Issues### 1. NumPy C API version changeOnce ethos-u-vela is installed, the user might want to install a different NumPyversion that is still within the dependency constraints defined in pyproject.toml.In some scenarios, doing so might prevent ethos-u-vela from functioning asexpected due to incompatibilities between the installed NumPy C headers used inthe mlw_codec and the current version of NumPy.**Example scenario:**In the ethos-u-vela source directory, run:```bashvirtualenv -p 3.10 venv. venv/bin/activatepip install ethos-u-vela```Next, install a different NumPy version (e.g. 1.21.3)```bashpip install numpy==1.21.3 --force```Finally, run ethos-u-vela. You might get an error similar to this:```ImportError: NumPy C API version mismatch(Build-time version: 0x10, Run-time version: 0xe)This is a known issue most likely caused by a change in the API version inNumPy after installing ethos-u-vela.```#### SolutionIn order for ethos-u-vela to work with an older version of NumPy that usesdifferent C APIs, you will need to install the desired NumPy version first, andthen build ethos-u-vela with that specific NumPy version:1) Uninstall ethos-u-vela and install the desired version of NumPy   ```   pip uninstall ethos-u-vela   pip install numpy==1.21.3 --force   ```2) Install required build dependencies   ```   pip install &quot;setuptools_scm[toml]&lt;6&quot; wheel   ```3) Install ethos-u-vela without build isolation. Not using build isolation   ensures that the correct version of NumPy is used when copying the C headers   in mlw_codec during the build process.   ```   pip install ethos-u-vela --no-build-isolation --no-cache-dir   ```## APIsPlease see [Vela External APIs](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/API.md).## Bug ReportingPlease see [Vela Community Bug Reporting](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/BUGS.md) for a description of how toreport bugs.## ContributionsPlease see [Vela Contributions](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/CONTRIBUTIONS.md).## Debug DatabasePlease see [Vela Debug Database](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/DEBUG_DB.md).## Inclusive language commitmentThis product conforms to Arm’s inclusive language policy and, to the best ofour knowledge, does not contain any non-inclusive language. If you findsomething that concerns you, email terms@arm.com.## OptionsPlease see [Vela CLI Options](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/OPTIONS.md).  This includes a description of thesystem configuration file format.## PerformancePlease see [Vela Performance Estimation Summary](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/PERFORMANCE.md).## ReleasesPlease see [Vela Releases](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/RELEASES.md).## ResourcesAdditional useful information:* [Arm Products: Ethos-U55 NPU](https://www.arm.com/products/silicon-ip-cpu/ethos/ethos-u55)* [Arm Products: Ethos-U65 NPU](https://www.arm.com/products/silicon-ip-cpu/ethos/ethos-u65)* [Arm Developer: Ethos-U55 NPU](https://developer.arm.com/ip-products/processors/machine-learning/arm-ethos-u/ethos-u55)* [Arm Developer: Ethos-U65 NPU](https://developer.arm.com/ip-products/processors/machine-learning/arm-ethos-u/ethos-u65)## SecurityPlease see [Vela Security](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/SECURITY.md).## Supported OperatorsPlease see [Vela Supported Operators](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/SUPPORTED_OPS.md) for the list ofoperators supported in this release.## TestingPlease see [Vela Testing](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/TESTING.md).## LicenseVela is licensed under [Apache License 2.0](https://review.mlplatform.org/plugins/gitiles/ml/ethos-u/ethos-u-vela/+/refs/tags/3.10.0/LICENSE.txt).</longdescription>
</pkgmetadata>