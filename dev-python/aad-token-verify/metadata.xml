<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Tests](https://github.com/GeneralMills/azure-ad-token-verify/workflows/Test%20and%20Analysis/badge.svg)](https://github.com/GeneralMills/azure-ad-token-verify/actions)[![PyPi](https://img.shields.io/pypi/pyversions/aad-token-verify.svg)](https://pypi.python.org/pypi/aad-token-verify)# aad-token-verifyA python utility library to verify an Azure Active Directory OAuth token. Meant for resource servers serving secured API endpoints (eg FastAPI)## Install```bashpython3 -m pip install aad-token-verify```## UsageTo use stand alone, simply import the verify payload function and call.```pythonfrom aad_token_verify import get_verified_payloadtoken_verifier = get_verified_payload(token, tenant_id=&quot;YOUR_TENANT_ID&quot;, audience_uris=[&quot;AUDIENCE_URI&quot;])```To use with FastAPI, there's some setup to get the Swagger docs to work```pythonfrom fastapi import Depends, FastAPIfrom fastapi.openapi.models import OAuthFlowImplicit, OAuthFlowsfrom fastapi.middleware.cors import CORSMiddlewarefrom fastapi.security import OAuth2from aad_token_verify import get_verified_payload# TODO Update these with your Tenant ID, Audience URI, and Client ID_TENANT_ID = &quot;ISSUER_TENANT_ID&quot;_AUDIENCE_URI = &quot;https://YOUR_AUDIENCE_URI&quot;_AAD_CLIENT_ID = &quot;CLIENT_ID&quot;oauth2_scheme = OAuth2(    flows=OAuthFlows(        implicit=OAuthFlowImplicit(            authorizationUrl=f&quot;https://login.microsoftonline.com/{_TENANT_ID}/oauth2/v2.0/authorize&quot;,            scopes={                f&quot;{_AUDIENCE_URI}/.default&quot;: &quot;Custom Audience URI scope&quot;,                &quot;openid&quot;: &quot;OpenID scope&quot;,                &quot;profile&quot;: &quot;Profile scope&quot;,                &quot;email&quot;: &quot;email scope&quot;,            },        )    ))async def get_current_user(    auth_header: str = Depends(oauth2_scheme),  # noqa: B008):    scheme, _, token = auth_header.partition(&quot; &quot;)    return get_verified_payload(        token,        tenantId=_TENANT_ID,        audience_uris=[_AUDIENCE_URI],    )app = FastAPI()app.add_middleware(    CORSMiddleware,    allow_origins=[&quot;*&quot;],    allow_credentials=True,    allow_methods=[&quot;*&quot;],    allow_headers=[&quot;*&quot;],)app.swagger_ui_init_oauth = {    &quot;usePkceWithAuthorizationCodeGrant&quot;: True,    &quot;clientId&quot;: _AAD_CLIENT_ID,    &quot;scopes&quot;: [f&quot;{_AUDIENCE_URI}.default&quot;],}@app.get(&quot;/&quot;)async def secured_endpoint(user=Depends(get_current_user)):    return user```## ContributingFeel free to submit issues and pull requests!</longdescription>
</pkgmetadata>