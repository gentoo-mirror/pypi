<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/csernazs/pytest-httpserver/workflows/build/badge.svg?branch=master)](https://github.com/csernazs/pytest-httpserver/actions?query=workflow%3Abuild+branch%3Amaster)[![Documentation Status](https://readthedocs.org/projects/pytest-httpserver/badge/?version=latest)](https://pytest-httpserver.readthedocs.io/en/latest/?badge=latest) [![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=K6PU3AGBZW4QC&amp;item_name=pytest-httpserver&amp;currency_code=EUR&amp;source=url)[![codecov](https://codecov.io/gh/csernazs/pytest-httpserver/branch/master/graph/badge.svg?token=MX2JXbHqRH)](https://codecov.io/gh/csernazs/pytest-httpserver)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)## pytest_httpserverHTTP server for pytest### NutshellThis library is designed to help to test http clients without contacting the real http server.In other words, it is a fake http server which is accessible via localhost can be started withthe pre-defined expected http requests and their responses.### Example#### Handling a simple GET request```pythondef test_my_client(    httpserver,):  # httpserver is a pytest fixture which starts the server    # set up the server to serve /foobar with the json    httpserver.expect_request(&quot;/foobar&quot;).respond_with_json({&quot;foo&quot;: &quot;bar&quot;})    # check that the request is served    assert requests.get(httpserver.url_for(&quot;/foobar&quot;)).json() == {&quot;foo&quot;: &quot;bar&quot;}```#### Handing a POST request with an expected json body```pythondef test_json_request(    httpserver,):  # httpserver is a pytest fixture which starts the server    # set up the server to serve /foobar with the json    httpserver.expect_request(        &quot;/foobar&quot;, method=&quot;POST&quot;, json={&quot;id&quot;: 12, &quot;name&quot;: &quot;foo&quot;}    ).respond_with_json({&quot;foo&quot;: &quot;bar&quot;})    # check that the request is served    assert requests.post(        httpserver.url_for(&quot;/foobar&quot;), json={&quot;id&quot;: 12, &quot;name&quot;: &quot;foo&quot;}    ).json() == {&quot;foo&quot;: &quot;bar&quot;}```You can also use the library without pytest. There's a with statement to ensure that the server is stopped.```pythonwith HTTPServer() as httpserver:    # set up the server to serve /foobar with the json    httpserver.expect_request(&quot;/foobar&quot;).respond_with_json({&quot;foo&quot;: &quot;bar&quot;})    # check that the request is served    print(requests.get(httpserver.url_for(&quot;/foobar&quot;)).json())```### DocumentationPlease find the API documentation at https://pytest-httpserver.readthedocs.io/en/latest/.### FeaturesYou can set up a dozen of expectations for the requests, and also what response should be sent by the server to the client.#### RequestsThere are three different types:- **permanent**: this will be always served when there's match for this request, you can make as many HTTP requests as you want- **oneshot**: this will be served only once when there's a match for this request, you can only make 1 HTTP request- **ordered**: same as oneshot but the order must be strictly matched to the order of setting upYou can also fine-tune the expected request. The following can be specified:- URI (this is a must)- HTTP method- headers- query string- data (HTTP body of the request)- JSON (HTTP body loaded as JSON)#### ResponsesOnce you have the expectations for the request set up, you should also define the response you want to send back.The following is supported currently:- respond arbitrary data (string or bytearray)- respond a json (a python dict converted in-place to json)- respond a Response object of werkzeug- use your own functionSimilar to requests, you can fine-tune what response you want to send:- HTTP status- headers- data#### Behave supportUsing the `BlockingHTTPServer` class, the assertion for a request and theresponse can be performed in real order. For more info, see the[test](tests/test_blocking_httpserver.py), the[howto](https://pytest-httpserver.readthedocs.io/en/latest/howto.html#running-httpserver-in-blocking-mode)and the [APIdocumentation](https://pytest-httpserver.readthedocs.io/en/latest/api.html#blockinghttpserver).### Missing features* HTTP/2* Keepalive* ~~TLS~~### DonationIf you want to donate to this project, you can find the donate button at the topof the README.Currently, this project is based heavily on werkzeug. Werkzeug does all the heavy liftingbehind the scenes, parsing HTTP request and defining Request and Response objects, whichare currently transparent in the API.If you wish to donate, please consider donating to them: https://palletsprojects.com/donate</longdescription>
</pkgmetadata>