<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI/CD Builds](https://github.com/tox-dev/tox-ansible/workflows/tox/badge.svg)](https://github.com/tox-dev/tox-ansible/actions)[![codecov](https://codecov.io/gh/tox-dev/tox-ansible/branch/main/graph/badge.svg)](https://codecov.io/gh/tox-dev/tox-ansible)[![PyPI version](https://badge.fury.io/py/tox-ansible.svg)](https://badge.fury.io/py/tox-ansible)tox-ansible===========This plugin for tox auto-generates tox environments for runningquality assurance tools like ansible-test or molecule. Optionally, you candecide to filter the environments down to only a subset of them.The tool is rather tightly integrated for the official [Molecule](https://github.com/ansible/molecule)testing tool that integrates with [Ansible](https://github.com/ansible/ansible).ansible-test------------This plugin saves you this trouble by allowing you the freedom to runthese commands tranparently. For example you can run `tox -e sanity` whichwill install the collection, change current directory and execute`ansible-test sanity --python X.Y`. You can even add posargs that end up beingpassed to the executed command, like `tox -e sanity -- --help`.By default, tox-ansible will also limit execution of ansible-test to thecurrent python version used by tox. In addition, tox-ansible will try toautomatically determine the best environment to run these tests in(docker if present on the host, virtualenv, etc.).You can disable this auto-detection feature in the `tox.ini`, see below for details.```shell$ tox -vadefault environments:sanity       -&gt; Auto-generated for: ansible-test sanity```Only those enviroments that are detected will be listed. At least sanity willalways be visible as it does not require adding new files.More details------------This plugin is designed to support auto-discovery of Molecule scenarios. When it has done so, the pluginwill then create a tox environment, if one does not alreadyexist, that contains factors matching against the scenario path. For example, if you have scenariosthat live at `molecule/scenario`, `roles/somerole/molecule/default`, and `roles/otherrole/molecule/default`,then tox environments will be named `[&quot;scenario&quot;, &quot;roles-somerole-default&quot;, &quot;roles-otherrole-default&quot;]`.Additional configuration options exist to expand this matrix automatically. For instance, you can haveit auto-generate version with tox factors for different versions of python (e.g.['py27-user-default', 'py38-user-default']). Additional options can also be added for different versionsof Ansible (e.g. ['ansible27-user-default', 'ansible28-user-default'])There are also options to filter the list of environments executed. The execution can be filtered tolimit itself to only scenarios with a particular name, to only certain Molecule drivers, or a combinationof the two options. Of course, tox can still be used to execute only one environment by passing thename directly via e.g. `tox -e roles-myrole-scenario`.If an environment already exists that matches the generated environment name, then this pluginwill not override settings specified directly in the tox.ini for that environment. Thus, if you need to customizea particular run, then you can do so, but still take advantage of the filtering options andauto-generation of the environments for other scenarios and options. Dependencies defined in the standardway in tox.ini for any name collision environments will be augmented with the ones needed forrunning Molecule and lint.Configuration=============tox.ini-------Any values in the `envlist` will be left in the default envlist by this plugin. So if you want to haveseveral envs that do things other than run `molecule ...` commands, you can configure those directlyin the tox.ini file.To add global options to the molecule commands, add the arguments in a line list to the &quot;[ansible]&quot;section key &quot;molecule\_opts&quot;.To test each scenario with specified versions of either Ansible or Python, you can add versionnumbers to the keys `ansible` and `python` under the `[ansible]` section of the ini. These versionstake the same format as the `envlist` version familiar to Python users. So, if you want to test onAnsible 2.9, 2.10, and 3.0 as well as with Python 2.7 and 3.8 then you can add this snippet (values canbe separated by a mix of commas and newlines):```ini[ansible]ansible = 2.{9,10},3.0python = 2.7,3.8# To change how tox env name is build for scanrios, you can use vars like:# $path - paths under which molecule file is hosted (can be empty string)# $parent - only the parent folder under which is hosted (can be empty string)# $name - this is the name of the scenario (folder under molecule/)# $nondefault_name - same as name but when scenario is named 'default' it becomes empty string## scenario_format = $path-$role-$name```If you find the default environment names generated for scenarios too long,you can configure `scenario_format = $parent-$nondefault_name` which shouldproduce very short names, regardless if your scenarios are in repository rootor under the roles. That works nicely as long you do not have duplicatescenario names.To pass a configuration file to &quot;[ansible-lint](https://github.com/ansible-community/ansible-lint)&quot;,add the option &quot;ansible\_lint\_config&quot;. Similarly to pass a config file option to&quot;[yamllint](https://github.com/adrienverge/yamllint)&quot;, set the option &quot;yamllint\_config&quot; inthe &quot;[ansible]&quot; section. Flake8 can be configured per its normal segment in your tox.ini file. Allthree of these commands are run as part of the &quot;lint\_all&quot; environment that this plugin creates.requirements.txt----------------If a particular scenario requires a select set of Python packages to be installed in the virtualenv withmolecule and the like, you can add a &quot;requirements.txt&quot; file to the molecule scenario directory, and thatwill be appended to the list of built-in scenario requirements.Examples========## Basic ExampleThe following Collections structure&lt;pre&gt;&lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;.&lt;/b&gt;&lt;/font&gt;├── galaxy.yml├── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;molecule&lt;/b&gt;&lt;/font&gt;│   ├── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;one&lt;/b&gt;&lt;/font&gt;│   │   └── molecule.yml│   └── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;two&lt;/b&gt;&lt;/font&gt;│       └── molecule.yml├── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;roles&lt;/b&gt;&lt;/font&gt;│   ├── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;my_role&lt;/b&gt;&lt;/font&gt;│   │   └── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;molecule&lt;/b&gt;&lt;/font&gt;│   │       ├── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;otherscenario&lt;/b&gt;&lt;/font&gt;│   │       │   └── molecule.yml│   │       └── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;somescenario&lt;/b&gt;&lt;/font&gt;│   │           └── molecule.yml│   └── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;other_role&lt;/b&gt;&lt;/font&gt;│       └── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;molecule&lt;/b&gt;&lt;/font&gt;│           ├── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;basic&lt;/b&gt;&lt;/font&gt;│           │   └── molecule.yml│           ├── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;default&lt;/b&gt;&lt;/font&gt;│           │   └── molecule.yml│           └── &lt;font color=&quot;#3465A4&quot;&gt;&lt;b&gt;somescenario&lt;/b&gt;&lt;/font&gt;│               └── molecule.yml└── tox.ini&lt;/pre&gt;With the following tox.ini file:```ini[tox]envlist =```Tox-ansible will auto-generate the following environments:```bash$ tox -llint_allonepythonroles-my_role-otherscenarioroles-my_role-somescenarioroles-other_role-basicroles-other_role-defaultroles-other_role-somescenariotwo```Note that the &quot;python&quot; environment is a default behavior of Tox, if there are noenvironments specified in the config file. To suppress it, specify at least one elementin the envlist entry within tox.ini### tox.ini examplesThe `ansible_test_platform` option controls the platform (docker, venv, python version) that ansible-test targets run in.By default, this is set to `auto` for automatic detection. You can also set this optionto `docker` or `venv` explicitly, or disable the Python and platform auto-detection by settingthis option to `posargs`:```ini[ansible]ansible_test_platform = posargs # Disable auto-detection```Note that if you do this, you will have to add your own platform parameters to ansible-test via posargs,as discussed above. For example, to use a separate container for the controller and target hosts,you can use the following command:`$ tox -e integration -- --controller docker:default --target docker:centos7`To add arguments to every molecule invocation, add thefollowing segment to tox.ini. Each argument needs to be on a separate line, which allowsspaces and other special characters to be used without needing shell-style escapes:```ini[ansible]molecule_opts =    --debug```If you use a global molecule configuration file at the project level(`&lt;project_name&gt;/.config/molecule/config.yml`), it will be detectedautomatically and will be the reference in order to determine the default drivername used for your molecule scenarios.If you want pass one or multiple base configuration file(s) to&quot;[molecule](https://github.com/ansible-community/molecule)&quot;, add the option&quot;molecule\_config\_files&quot; to the Ansible section and list them as follows.```ini[ansible]molecule_opts =    --debugmolecule_config_files =    {toxinidir}/tests/molecule_one.yml    {toxinidir}/tests/molecule_two.yml```Sometimes there are paths you will want to ignore running tests in. Particularly if youinstall other roles or collections underneath of your source tree. You can ignore these pathswith the following tox.ini bit:```ini[ansible]ignore_path =    dist    generated_paths_to_ignore```This field is very simple, and should list folder names, anywhere in the tree, to ignore.It does not do specialized glob matching or sub-path matching at this time. Anything living underany folder whose name appears in this list will be ignored.To test with ansible versions 2.7.\*, 2.8.\*, and 2.9.\* across every role and scenario:```ini[ansible]ansible = 2.{7,8,9}```Now the output will look like this:```bash$ tox -lansible27-lint_allansible27-oneansible27-roles-my_role-otherscenarioansible27-roles-my_role-somescenarioansible27-roles-other_role-basicansible27-roles-other_role-defaultansible27-roles-other_role-somescenarioansible27-twoansible28-lint_allansible28-oneansible28-roles-my_role-otherscenarioansible28-roles-my_role-somescenarioansible28-roles-other_role-basicansible28-roles-other_role-defaultansible28-roles-other_role-somescenarioansible28-twoansible29-lint_allansible29-oneansible29-roles-my_role-otherscenarioansible29-roles-my_role-somescenarioansible29-roles-other_role-basicansible29-roles-other_role-defaultansible29-roles-other_role-somescenarioansible29-twopython```If you want multiple Python versions, you can also specify that:```ini[ansible]python = 2.7,3.8``````bash$ tox -lpy27-lint_allpy27-onepy27-roles-my_role-otherscenariopy27-roles-my_role-somescenariopy27-roles-other_role-basicpy27-roles-other_role-defaultpy27-roles-other_role-somescenariopy27-twopy38-lint_allpy38-onepy38-roles-my_role-otherscenariopy38-roles-my_role-somescenariopy38-roles-other_role-basicpy38-roles-other_role-defaultpy38-roles-other_role-somescenariopy38-twopython```Under the hood--------------The plugin will glob the current directory and look for any files matching the glob pattern`molecule/*/molecule.yml` and make the assumption that these represent Molecule scenarios.It then generates new environments for any discovered scenarios that do not already existin the tox environment list. These names will include the full path to the scenario folderwith the exception of the `molecule` directory name. So a scenario rooted at `roles/foo/molecule/bar`will be named `roles-foo-bar`. Similarly one that lives at `molecule/bar` will be named just `bar`.Generated environments are added to the default execution envlist with a dependency onMolecule. This list will be expanded by any configured matrix axes with appropriate dependencies andconfigurations made. Each one will execute the command &quot;molecule test -s {scenario}&quot; if it passes thefilter step.Environments are configured with the following values, by default, unless they are explicitly specifiedin the tox.ini file:* dependencies* commands* working directory* basepython (if specified in the `[ansible]` expand matrix)By use of the defined factors in a name, some values can be given in the general tox environment configsection, but the above values will be explicitly specified. So do not rely on setting those valuesthrough the use of factor expansion in a generic section.</longdescription>
</pkgmetadata>