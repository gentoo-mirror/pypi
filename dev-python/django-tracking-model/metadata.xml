<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Tracking Model / DTM üèÅTrack changes made to your model's instance fields.  Changes are cleared on save.  This package works well with [signals](https://seddonym.me/2018/05/04/django-signals/).  Mutable fields (e.g. JSONField) are not handled with deepcopy to keep it fast and simple.  Meant to be [model_utils](https://github.com/jazzband/django-model-utils)'s FieldTracker fast alternative.*Available on [PyPi](https://pypi.org/project/django-tracking-model/)*  ## Installation```shpip install django-tracking-model```## Usage```pythonfrom django.db import modelsfrom tracking_model import TrackingModelMixin# order mattersclass Example(TrackingModelMixin, models.Model):    text = models.TextField(null=True)    myself = models.ForeignKey(&quot;self&quot;, null=True)    array = models.ArrayField(TextField())``````pythonIn [1]: e = Example.objects.create(id=1, text=&quot;Sample Text&quot;)In [2]: e.tracker.changed, e.tracker.newly_createdOut[1]: ({}, True)In [3]: e.text = &quot;Different Text&quot;In [4]: e.tracker.changedOut[2]: {&quot;text&quot;: &quot;Sample Text&quot;}In [5]: e.save()In [6]: e.tracker.changed, e.tracker.newly_createdOut[3]: ({}, False)```DTM will also detect changes made to ForeignKey/OneToOne fields.```pythonIn [1]: Example.objects.create(myself=e)In [2]: e.myself = NoneIn [3]: e.tracker.changedOut[1]: {&quot;myself_id&quot;: 1}```Because DTM does not handle mutable fields well, you handle them with copy/deepcopy.```pythonIn [1]: e = Example.objects.create(array=[&quot;I&quot;, &quot;am&quot;, &quot;your&quot;])In [2]: copied = copy(e.array)In [3]: copied.append(&quot;father&quot;)In [4]: e.array = copiedIn [5]: e.tracker.changedOut[1]: {&quot;array&quot;: [&quot;I&quot;, &quot;am&quot;, &quot;your&quot;]}In [6]: e.array = [&quot;Testing&quot;, &quot;is&quot;, &quot;the&quot;, &quot;future&quot;]  # in this case copy not needed```DTM works best with \*\_save signals.```pythondef pre_save_example(instance, *args, **kwargs):    # .create() does not populate .changed, we use newly_created    if &quot;text&quot; in instance.tracker.changed or instance.tracker.newly_created:      if instance.text          instance.array = instance.text.split()pre_save.connect(pre_save_example, sender=Example)``````pythonIn [1]: e = Example.objects.create(text=&quot;I am your father&quot;)In [2]: e.refresh_from_db() # not neededIn [3]: e.arrayOut[1]: [&quot;I&quot;, &quot;am&quot;, &quot;your&quot;, &quot;father&quot;]```DTM handles deferred fields well.```pythonIn [1]: e = Example.objects.only(&quot;array&quot;).first()In [2]: e.text = &quot;I am not your father&quot; In [3]: e.tracker.changedOut[4]: {&quot;text&quot;: DeferredAttribute}```You can narrow choice of tracked fields. By default everything is tracked.```pythonclass Example(models.Model):    TRACKED_FIELDS = [&quot;first&quot;]    first = models.TextField()    second = models.TextField()```## Requirements * Python &gt;= 2.7, &lt;= 3.9 * Django &gt;= 1.11, &lt;= 4.0## Todo- [ ] Tests could be more readable- [ ] Signals decorators</longdescription>
</pkgmetadata>