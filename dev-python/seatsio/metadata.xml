<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># seatsio-python, the official Seats.io Python client library[![Build](https://github.com/seatsio/seatsio-python/workflows/Build/badge.svg)](https://github.com/seatsio/seatsio-python/actions/workflows/build.yml)[![PyPI version](https://badge.fury.io/py/seatsio.svg)](https://badge.fury.io/py/seatsio)This is the official Python client library for the [Seats.io V2 REST API](https://docs.seats.io/docs/api-overview), supporting Python 3.7+. ## Installing```pip install seatsio```## Versioningseatsio-python follows semver since v50.2.0.## Usage### General instructionsTo use this library, you'll need to create a `seatsio.Client`:```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)...```You can find your _workspace secret key_ in the [settings section of the workspace](https://app.seats.io/workspace-settings).The region should correspond to the region of your account:- `seatsio.Region.EU()`: Europe- `seatsio.Region.NA()`: North-America- `seatsio.Region.SA()`: South-America- `seatsio.Region.OC()`: OceaniaIf you're unsure about your region, have a look at your [company settings page](https://app.seats.io/company-settings).### Creating a chart and an event```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)chart = client.charts.create()event = client.events.create(chart.key)```### Booking objects```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)client.events.book(event.key, [&quot;A-1&quot;, &quot;A-2&quot;])```### Releasing objects```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)client.events.release(event.key, [&quot;A-1&quot;, &quot;A-2&quot;])```### Booking objects that have been held```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)client.events.book(event.key, [&quot;A-1&quot;, &quot;A-2&quot;], hold_token=&quot;a-hold-token&quot;)```### Changing object status```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)client.events.change_object_status(&quot;&lt;EVENT KEY&gt;&quot;, [&quot;A-1&quot;, &quot;A-2&quot;], &quot;my-custom-status&quot;)```### Retrieving object category and status (and other information)```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)object_infos = client.events.retrieve_object_infos(event.key, [&quot;A-1&quot;, &quot;A-2&quot;])print(object_infos[&quot;A-1&quot;].category_key)print(object_infos[&quot;A-1&quot;].category_label)print(object_infos[&quot;A-1&quot;].status)print(object_infos[&quot;A-2&quot;].category_key)print(object_infos[&quot;A-2&quot;].category_label)print(object_infos[&quot;A-2&quot;].status)```### Listing a chart's categories```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)category_list = client.charts.list_categories(&lt;chart key&gt;)for category in category_list:  print(category.label)```### Listing all charts```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;)charts = client.charts.list()for chart in charts:  print(&quot;Chart: &quot; + chart.key)```Note: `list()` returns a `PagedIterator`, which under the hood calls the seats.io API to fetch charts page by page. So multiple API calls may be done underneath to fetch all charts.### Listing charts page by pageE.g. to show charts in a paginated list on a dashboard.Each page contains an `items` array of charts, and `next_page_starts_after` and `previous_page_ends_before` properties. Those properties are the chart IDs after which the next page starts or the previous page ends.```python# ... user initially opens the screen ...firstPage = client.charts.list_first_page()for chart in firstPage.items:  print(&quot;Chart: &quot; + chart.key)``````python# ... user clicks on 'next page' button ...nextPage = client.charts.list_page_after(firstPage.next_page_starts_after)for chart in nextPage.items:  print(&quot;Chart: &quot; + chart.key)``````python# ... user clicks on 'previous page' button ...previousPage = client.charts.list_page_before(nextPage.previous_page_ends_before)for chart in previousPage.items:  print(&quot;Chart: &quot; + chart.key)```### Creating a workspace```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-company-admin-key&quot;)client.workspaces.create(&quot;a workspace&quot;)```### Creating a chart and an event with the company admin key```pythonimport seatsio# company admin key can be found on https://app.seats.io/company-settings# workspace public key can be found on https://app.seats.io/workspace-settingsclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-company-admin-key&quot;, workspace_key=&quot;my-workspace-public-key&quot;)chart = client.charts.create()event = client.events.create(chart.key)```## Error handlingWhen an API call results in a 4xx or 5xx error (e.g. when a chart could not be found), a SeatsioException is raised.This exception contains a message string describing what went wrong, and also two other properties:- `Errors`: a list of errors (containing a code and a message) that the server returned. In most cases, this list will contain only one element.- `RequestId`: the identifier of the request you made. Please mention this to us when you have questions, as it will make debugging easier.- ## Rate limiting - exponential backoffThis library supports [exponential backoff](https://en.wikipedia.org/wiki/Exponential_backoff).When you send too many concurrent requests, the server returns an error `429 - Too Many Requests`. The client reacts to this by waiting for a while, and then retrying the request.If the request still fails with an error `429`, it waits a little longer, and try again. By default this happens 5 times, before giving up (after approximately 15 seconds).We throw a `RateLimitExceededException` (which is a subclass of `SeatsioException`) when exponential backoff eventually fails.To change the maximum number of retries, create the `Client` as follows:```pythonimport seatsioclient = seatsio.Client(seatsio.Region.EU(), secret_key=&quot;my-workspace-secret-key&quot;, max_retries=3)```Passing in 0 disables exponential backoff completely. In that case, the client will never retry a failed request.</longdescription>
</pkgmetadata>