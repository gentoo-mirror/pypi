<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Klein ConfigModule to provide config management## Usage```pythonfrom klein_config import get_config# Can be overriden with env variable MY_CONFIG_SETTINGconfig = get_config({&quot;my&quot;: {&quot;config&quot;: {&quot;setting&quot;: &quot;initialised value&quot;}})# Access via `get` accessor with no backup (raises ConfigMissingException if not found).value = config.get(&quot;my.config.setting&quot;)# Access via `get` accessor method with a backup.backup_value = config.get(&quot;not.a.setting&quot;, &quot;backup value&quot;)# Access via `dict` (raises KeyError if not found).same_value = config[&quot;my.config.setting&quot;]# Sub-configs are created if the value is another `dict`.intermediate_config = config[&quot;my.config&quot;]same_value_again = intermediate_config[&quot;setting&quot;]```### StructureInternally the config object uses the ConfigTree structure that is part of pyhocon. This can be traversed easily with the get method using dot notation as outlined above.### Config InitialisationThe `get_config` function looks for :- argument `--common` or environmental variable `KLEIN_COMMON` to specify a valid filepath for a common config file (in either JSON or YAML format); and- argument `--config` or environmental variable `KLEIN_CONFIG` to specify a valid filepath for a config file N.B. Passing both environmental variables _and_ arguments for either config or common is ambiguous and is therefore NOT accepted.You can also pass a `dict` into the `get_config` function.#### Example configsJSON:```json{  &quot;rabbitmq&quot;: {    &quot;host&quot;: [      &quot;localhost&quot;    ],    &quot;port&quot;: 5672,    &quot;username&quot;: &quot;username&quot;,    &quot;password&quot;: &quot;password&quot;  },  &quot;mongo&quot;: {    &quot;host&quot;: [      &quot;mongo.domain.com&quot;    ],    &quot;username&quot;: &quot;username&quot;,    &quot;password&quot;: &quot;password&quot;  }}```YAML:```yamlmongo:  host:    - mongo.domain.com  password: password  username: usernamerabbitmq:  host:    - localhost  password: username  port: 5672  username: password```Example config files are also provided in [json](example.config.json) and [yaml](example.config.yaml) formats.### Order precedenceThe configs are applied to the config object in the following order: 1. Common config as identified via argument `--common` or environmental variable `KLEIN_COMMON`2. Config that is injected via the Class constructor3. Config that is identified via the argument `--config` or environmental variable `KLEIN_CONFIG`Configs will override any previous values as they are applied.### Environment AwareThe module is &quot;Environment Aware&quot;, i.e. it will look for environment variables in the first instance. If a valid variable exists then this will be used regardless of any config that may have been supplied.The path is transformed by converting the string to uppercase and replacing all dots with underscores.```my.config.setting =&gt; MY_CONFIG_SETTING```Sub-config items are still overriden by the same environment variables as in the root config.## DevelopmentThis project uses [pipenv](https://github.com/pypa/pipenv). To install it, run `pip install pipenv`.### Development```pipenv install --dev```### Testing```bashpipenv run python -m pytest```For test coverage you can run:```bashpipenv shellpipenv run python -m pytest --cov-report term --cov src/ tests/```### TroubleshootingIf you are unable to run `pipenv shell` and are having permission errors, you can spin up a virtual environment in which to run the `pipenv` commands:```bashpip install virtualenv      // install virtualenv modulevirtual env venv            // create your virtual environment (run command from project root directory)source venv/bin/activate    // start the virtual environmentpipenv install --dev        // install dependencies - you should now be able to run the tests with the above commands```### LicenseThis project is licensed under the terms of the Apache 2 license, which can be found in the repository as `LICENSE.txt`</longdescription>
</pkgmetadata>