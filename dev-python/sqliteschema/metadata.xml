<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. contents:: **sqliteschema**   :backlinks: top   :depth: 2Summary=======`sqliteschema &lt;https://github.com/thombashi/sqliteschema&gt;`__ is a Python library to dump table schema of a SQLite database file... image:: https://badge.fury.io/py/sqliteschema.svg    :target: https://badge.fury.io/py/sqliteschema    :alt: PyPI package version.. image:: https://img.shields.io/pypi/pyversions/sqliteschema.svg    :target: https://pypi.org/project/sqliteschema    :alt: Supported Python versions.. image:: https://img.shields.io/pypi/implementation/sqliteschema.svg    :target: https://pypi.org/project/sqliteschema    :alt: Supported Python implementations.. image:: https://github.com/thombashi/sqliteschema/actions/workflows/ci.yml/badge.svg    :target: https://github.com/thombashi/sqliteschema/actions/workflows/ci.yml    :alt: CI status of Linux/macOS/Windows.. image:: https://coveralls.io/repos/github/thombashi/sqliteschema/badge.svg?branch=master    :target: https://coveralls.io/github/thombashi/sqliteschema?branch=master    :alt: Test coverage.. image:: https://github.com/thombashi/sqliteschema/actions/workflows/github-code-scanning/codeql/badge.svg    :target: https://github.com/thombashi/sqliteschema/actions/workflows/github-code-scanning/codeql    :alt: CodeQLInstallation============Install from PyPI------------------------------::    pip install sqliteschemaInstall optional dependencies~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~::    pip install sqliteschema[cli]  # to use CLI    pip install sqliteschema[dumps]  # to use dumps method    pip install sqliteschema[logging]  # to use loggingInstall from PPA (for Ubuntu)------------------------------::    sudo add-apt-repository ppa:thombashi/ppa    sudo apt update    sudo apt install python3-sqliteschemaUsage=====Full example source code can be found at `examples/get_table_schema.py &lt;https://github.com/thombashi/sqliteschema/blob/master/examples/get_table_schema.py&gt;`__Extract SQLite Schemas as dict----------------------------------:Sample Code:    .. code:: python        import json        import sqliteschema        extractor = sqliteschema.SQLiteSchemaExtractor(sqlite_db_path)        print(            &quot;--- dump all of the table schemas into a dictionary ---\n{}\n&quot;.format(                json.dumps(extractor.fetch_database_schema_as_dict(), indent=4)            )        )        print(            &quot;--- dump a specific table schema into a dictionary ---\n{}\n&quot;.format(                json.dumps(extractor.fetch_table_schema(&quot;sampletable1&quot;).as_dict(), indent=4)            )        ):Output:    .. code::        --- dump all of the table schemas into a dictionary ---        {            &quot;sampletable0&quot;: [                {                    &quot;Field&quot;: &quot;attr_a&quot;,                    &quot;Index&quot;: false,                    &quot;Type&quot;: &quot;INTEGER&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                },                {                    &quot;Field&quot;: &quot;attr_b&quot;,                    &quot;Index&quot;: false,                    &quot;Type&quot;: &quot;INTEGER&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                }            ],            &quot;sampletable1&quot;: [                {                    &quot;Field&quot;: &quot;foo&quot;,                    &quot;Index&quot;: true,                    &quot;Type&quot;: &quot;INTEGER&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                },                {                    &quot;Field&quot;: &quot;bar&quot;,                    &quot;Index&quot;: false,                    &quot;Type&quot;: &quot;REAL&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                },                {                    &quot;Field&quot;: &quot;hoge&quot;,                    &quot;Index&quot;: true,                    &quot;Type&quot;: &quot;TEXT&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                }            ],            &quot;constraints&quot;: [                {                    &quot;Field&quot;: &quot;primarykey_id&quot;,                    &quot;Index&quot;: true,                    &quot;Type&quot;: &quot;INTEGER&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;PRI&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                },                {                    &quot;Field&quot;: &quot;notnull_value&quot;,                    &quot;Index&quot;: false,                    &quot;Type&quot;: &quot;REAL&quot;,                    &quot;Nullable&quot;: &quot;NO&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;&quot;,                    &quot;Extra&quot;: &quot;&quot;                },                {                    &quot;Field&quot;: &quot;unique_value&quot;,                    &quot;Index&quot;: true,                    &quot;Type&quot;: &quot;INTEGER&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;UNI&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                }            ]        }        --- dump a specific table schema into a dictionary ---        {            &quot;sampletable1&quot;: [                {                    &quot;Field&quot;: &quot;foo&quot;,                    &quot;Index&quot;: true,                    &quot;Type&quot;: &quot;INTEGER&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                },                {                    &quot;Field&quot;: &quot;bar&quot;,                    &quot;Index&quot;: false,                    &quot;Type&quot;: &quot;REAL&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                },                {                    &quot;Field&quot;: &quot;hoge&quot;,                    &quot;Index&quot;: true,                    &quot;Type&quot;: &quot;TEXT&quot;,                    &quot;Nullable&quot;: &quot;YES&quot;,                    &quot;Key&quot;: &quot;&quot;,                    &quot;Default&quot;: &quot;NULL&quot;,                    &quot;Extra&quot;: &quot;&quot;                }            ]        }Extract SQLite Schemas as Tabular Text--------------------------------------------------------------------Table schemas can be output with the ``dumps`` method.The ``dumps`` method requires an additional package that can be installed as follows:::    pip install sqliteschema[dumps]Usage is as follows::Sample Code:    .. code:: python        import sqliteschema        extractor = sqliteschema.SQLiteSchemaExtractor(sqlite_db_path)        for verbosity_level in range(2):            print(&quot;--- dump all of the table schemas with a tabular format: verbosity_level={} ---&quot;.format(                verbosity_level))            print(extractor.dumps(output_format=&quot;markdown&quot;, verbosity_level=verbosity_level))        for verbosity_level in range(2):            print(&quot;--- dump a specific table schema with a tabular format: verbosity_level={} ---&quot;.format(                verbosity_level))            print(extractor.fetch_table_schema(&quot;sampletable1&quot;).dumps(                output_format=&quot;markdown&quot;, verbosity_level=verbosity_level)):Output:    .. code::        --- dump all of the table schemas with a tabular format: verbosity_level=0 ---        # sampletable0        | Field  |  Type   |        | ------ | ------- |        | attr_a | INTEGER |        | attr_b | INTEGER |        # sampletable1        | Field |  Type   |        | ----- | ------- |        | foo   | INTEGER |        | bar   | REAL    |        | hoge  | TEXT    |        # constraints        |     Field     |  Type   |        | ------------- | ------- |        | primarykey_id | INTEGER |        | notnull_value | REAL    |        | unique_value  | INTEGER |        --- dump all of the table schemas with a tabular format: verbosity_level=1 ---        # sampletable0        | Field  |  Type   | Nullable | Key | Default | Index | Extra |        | ------ | ------- | -------- | --- | ------- | :---: | ----- |        | attr_a | INTEGER | YES      |     | NULL    |       |       |        | attr_b | INTEGER | YES      |     | NULL    |       |       |        # sampletable1        | Field |  Type   | Nullable | Key | Default | Index | Extra |        | ----- | ------- | -------- | --- | ------- | :---: | ----- |        | foo   | INTEGER | YES      |     | NULL    |   X   |       |        | bar   | REAL    | YES      |     | NULL    |       |       |        | hoge  | TEXT    | YES      |     | NULL    |   X   |       |        # constraints        |     Field     |  Type   | Nullable | Key | Default | Index | Extra |        | ------------- | ------- | -------- | --- | ------- | :---: | ----- |        | primarykey_id | INTEGER | YES      | PRI | NULL    |   X   |       |        | notnull_value | REAL    | NO       |     |         |       |       |        | unique_value  | INTEGER | YES      | UNI | NULL    |   X   |       |        --- dump a specific table schema with a tabular format: verbosity_level=0 ---        # sampletable1        | Field |  Type   |        | ----- | ------- |        | foo   | INTEGER |        | bar   | REAL    |        | hoge  | TEXT    |        --- dump a specific table schema with a tabular format: verbosity_level=1 ---        # sampletable1        | Field |  Type   | Nullable | Key | Default | Index | Extra |        | ----- | ------- | -------- | --- | ------- | :---: | ----- |        | foo   | INTEGER | YES      |     | NULL    |   X   |       |        | bar   | REAL    | YES      |     | NULL    |       |       |        | hoge  | TEXT    | YES      |     | NULL    |   X   |       |CLI Usage----------------------------------:Sample Code:    .. code:: console        pip install --upgrade sqliteschema[cli]        python3 -m sqliteschema &lt;PATH/TO/SQLITE_FILE&gt;Dependencies============- Python 3.7+- `Python package dependencies (automatically installed) &lt;https://github.com/thombashi/sqliteschema/network/dependencies&gt;`__Optional dependencies----------------------------------- `loguru &lt;https://github.com/Delgan/loguru&gt;`__    - Used for logging if the package installed- `pytablewriter &lt;https://github.com/thombashi/pytablewriter&gt;`__    - Required when getting table schemas with tabular text by ``dumps`` method</longdescription>
</pkgmetadata>