<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pcicrawler`pcicrawler` is a CLI tool to display/filter/export information about PCI or PCIExpress devices and their topology.## Usage`pcicrawler` must be run as root.The full `--help` message is shown below.```bashUsage: pcicrawler [OPTIONS]  Tool to display/filter/export information about PCI or PCI Express  devices, as well as their topology.  Must run as root as it uses privileged sysfs entries.Options:  -c, --class-id TEXT             Only show devices matching this PCI class ID                                  in hex, or one of: nvme, ethernet, raid, gpu  -d, --device TEXT               Only show devices matching this PCI                                  vendor/device ID, (syntax like                                  vendor:device, or vendor:, in hex)  -e, --express-only / --no-express-only                                  Only show PCIe devices  -j, --json / --no-json          Output in JSON format  -p, --include-path / --no-include-path                                  Include devices upstream of matched devices  -s, --addr TEXT                 Show device with this PCI address  -t, --tree / --no-tree          Output as a tree  -v, --verbose / --no-verbose    Show debugging output - not compatible with                                  JSON/tree views  -V, --vpd / --no-vpd            Include VPD data if present, does not                                  workwith --tree  -x, --hexify / --no-hexify      Output vendor/device/class IDs as hex                                  strings instead of numbers in JSON output  -a, --aer / --no-aer            Include PCIe Advanced Error Reporting (AER)                                  information when available - only provided                                  in JSON output  --help                          Show this message and exit.```## ExamplesThe most common use for `pcicrawler` is calling it with its `--tree` option.(run as root)```bash$ pcicrawler -t``````bash00:00.0 root_port00:1d.0 root_port, &quot;M.2 PCIE SSD - Boot drive SSD 0&quot;, slot 8, device present, speed 8GT/s, width x4 └─01:00.0 endpoint, Toshiba America Info Systems (1179), device 011600:1d.4 root_port, &quot;MEZZ_Conn&quot;, slot 12, device present, speed 8GT/s, width x2 └─02:00.0 endpoint, Mellanox Technologies (15b3) MT27710 Family [ConnectX-4 Lx] (1015)64:02.0 root_port, &quot;M.2 PCIE SSD - 2nd Storage SSD 2&quot;, slot 7, device present, speed 8GT/s, width x4 └─65:00.0 endpoint, Samsung Electronics Co Ltd (144d), device a80864:03.0 root_port, &quot;M.2 PCIE SSD - 1st Storage SSD 1&quot;, slot 8, device present, speed 8GT/s, width x4 └─66:00.0 endpoint, Samsung Electronics Co Ltd (144d), device a808```Filter the output with the `-s` option.(run as root)```bash$ pcicrawler -s 02:00.0 -t``````bash00:1d.4 root_port, &quot;MEZZ_Conn&quot;, slot 12, device present, speed 8GT/s, width x2 └─02:00.0 endpoint, Mellanox Technologies (15b3) MT27710 Family [ConnectX-4 Lx] (1015)```Filter the output, list VPD data (if any), and put into machine-readable format (JSON).(run as root)```bash$ pcicrawler -s 02:00.0 -V -j | python -m json.tool``````bash{    &quot;0000:02:00.0&quot;: {        &quot;addr&quot;: &quot;0000:02:00.0&quot;,        &quot;capable_speed&quot;: &quot;8GT/s&quot;,        &quot;capable_width&quot;: 2,        &quot;class_id&quot;: 131072,        &quot;cur_speed&quot;: &quot;8GT/s&quot;,        &quot;cur_width&quot;: 2,        &quot;device_id&quot;: 4117,        &quot;express_type&quot;: &quot;endpoint&quot;,        &quot;location&quot;: &quot;MEZZ_Conn&quot;,        &quot;path&quot;: [            &quot;0000:02:00.0&quot;,            &quot;0000:00:1d.4&quot;        ],        &quot;subsystem_device&quot;: 633,        &quot;subsystem_vendor&quot;: 5555,        &quot;target_speed&quot;: &quot;8GT/s&quot;,        &quot;vendor_id&quot;: 5555,        &quot;vpd&quot;: {            &quot;fields&quot;: {                &quot;EC&quot;: &quot;A2&quot;,                &quot;PN&quot;: &quot;MCX4431N-GCAN_FB&quot;,                &quot;SN&quot;: &quot;MT1751X14794&quot;,                &quot;V0&quot;: &quot;PCIeGen3 x8&quot;,                &quot;V2&quot;: &quot;MCX4431N-GCAN_FB&quot;,                &quot;V3&quot;: &quot;8427f48749ebe7118000ec0d9ad2c336&quot;,                &quot;VA&quot;: &quot;MLX:MODL=CX4431N:MN=MLNX:CSKU=V2:UUID=V3:PCI=V0&quot;            },            &quot;identifier_string&quot;: &quot;CX4431N - ConnectX-4 LX QSFP28&quot;        }    }}```## How `pcicrawler` works`pcicrawler` retrieves information about a device from its resources in sysfs. Formore information about how devices are organized on the system, visithttps://www.kernel.org/doc/Documentation/filesystems/sysfs-pci.txt.## Requirements`pcicrawler` requires Python3 and works with* CentOS Linux 7## Building `pcicrawler``pcicrawler` is a Python package and a built `.whl` distribution can be made with```bashpython3 setup.py bdist_wheel```## Installing `pcicrawler``pcicrawler` is a Python package and can be installed from within the directory with```bashpython3 setup.py install```## Contributing to `pcicrawler`See the [CONTRIBUTING](CONTRIBUTING.md) file for information on how to help out.## License`pcicrawler` is &lt;YOUR LICENSE HERE&gt; licensed, as found in the [LICENSE](LICENSE) file.</longdescription>
</pkgmetadata>