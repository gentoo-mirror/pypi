<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># spacy_crfsuite: CRF tagger for spaCy.Sequence tagging with spaCy and crfsuite.A port of [Rasa NLU](https://github.com/RasaHQ/rasa/blob/master/rasa/nlu/extractors/crf_entity_extractor.py).## ‚ú® Features- Simple but tough to beat **CRF entity tagger** (  via [sklearn-crfsuite](https://github.com/TeamHG-Memex/sklearn-crfsuite))- **spaCy NER component**- **Command line interface** for training &amp; evaluation and **example notebook**- [CoNLL](https://www.aclweb.org/anthology/W03-0419/), JSON  and [Markdown](https://rasa.com/docs/rasa/nlu/training-data-format/#id5) **annotations**- Pre-trained NER component## ‚è≥ Installation```bashpip install spacy_crfsuite```## üöÄ Quickstart### Usage as a spaCy pipeline component```pythonimport spacyfrom spacy.language import Languagefrom spacy_crfsuite import CRFEntityExtractor, CRFExtractor@Language.factory(&quot;ner_crf&quot;)def create_component(nlp, name):    crf_extractor = CRFExtractor().from_disk(&quot;spacy_crfsuite_conll03_sm.bz2&quot;)    return CRFEntityExtractor(nlp, crf_extractor=crf_extractor)nlp = spacy.load(&quot;en_core_web_sm&quot;, disable=[&quot;ner&quot;])nlp.add_pipe(&quot;ner_crf&quot;)doc = nlp(    &quot;George Walker Bush (born July 6, 1946) is an American politician and businessman &quot;    &quot;who served as the 43rd president of the United States from 2001 to 2009.&quot;)for ent in doc.ents:    print(ent, &quot;-&quot;, ent.label_)# Output:# George Walker Bush - PER# American - MISC# United States - LOC```### Visualization (via [Gradio](https://gradio.app/named_entity_recognition/))Run the command below to launch a Gradio playground```sh$ pip install gradio$ python spacy_crfsuite/visualize.py```![](https://github.com/talmago/spacy_crfsuite/blob/master/img/gradio.png)### Pre-trained modelsYou can download a pre-trained model.| Dataset                                                                                               | F1  | üì• Download                                                                                                                       ||-------------------------------------------------------------------------------------------------------|-----|-----------------------------------------------------------------------------------------------------------------------------------|| [CoNLL03](https://github.com/talmago/spacy_crfsuite/blob/master/examples/02%20-%20CoNLL%202003.ipynb) | 82% | [spacy_crfsuite_conll03_sm.bz2](https://github.com/talmago/spacy_crfsuite/releases/download/v1.1.0/spacy_crfsuite_conll03_sm.bz2) |### Train your own modelBelow is a command line to train a simple model for restaurants search bot with [markdownannotations](https://github.com/talmago/spacy_crfsuite/blob/master/examples/restaurent_search.md) and save it to disk.If you prefer working on jupyter, follow this [notebook](https://github.com/talmago/spacy_crfsuite/blob/master/examples/01%20-%20Custom%20Component.ipynb).```sh$ python -m spacy_crfsuite.train examples/restaurent_search.md -c examples/default-config.json -o model/ -lm en_core_web_sm‚Ñπ Loading config from disk‚úî Successfully loaded config from file.examples/default-config.json‚Ñπ Loading training examples.‚úî Successfully loaded 15 training examples from file.examples/restaurent_search.md‚Ñπ Using spaCy model: en_core_web_sm‚Ñπ Training entity tagger with CRF.‚Ñπ Saving model to disk‚úî Successfully saved model to file.model/model.pkl```Below is a command line to test the CRF model and print the classification report (In the example we use the training set, however normally we would use a held out set).```sh$ python -m spacy_crfsuite.eval examples/restaurent_search.md -m model/model.pkl -lm en_core_web_sm‚Ñπ Loading model from filemodel/model.pkl‚úî Successfully loaded CRF tagger&lt;spacy_crfsuite.crf_extractor.CRFExtractor object at 0x126e5f438&gt;‚Ñπ Loading dev dataset from fileexamples/example.md‚úî Successfully loaded 15 dev examples.‚Ñπ Using spaCy model: en_core_web_sm‚Ñπ Classification Report:              precision    recall  f1-score   support   B-cuisine      1.000     1.000     1.000         2   I-cuisine      1.000     1.000     1.000         1   L-cuisine      1.000     1.000     1.000         2   U-cuisine      1.000     1.000     1.000         5  U-location      1.000     1.000     1.000         7   micro avg      1.000     1.000     1.000        17   macro avg      1.000     1.000     1.000        17weighted avg      1.000     1.000     1.000        17```Now we can use the tagger for named entity recognition in a spaCy pipeline!```pythonimport spacyfrom spacy.language import Languagefrom spacy_crfsuite import CRFEntityExtractor, CRFExtractor@Language.factory(&quot;ner_crf&quot;)def create_component(nlp, name):    crf_extractor = CRFExtractor().from_disk(&quot;model/model.pkl&quot;)    return CRFEntityExtractor(nlp, crf_extractor=crf_extractor)nlp = spacy.load(&quot;en_core_web_sm&quot;, disable=[&quot;ner&quot;])nlp.add_pipe(&quot;ner_crf&quot;)doc = nlp(&quot;show mexican restaurents up north&quot;)for ent in doc.ents:    print(ent.text, &quot;--&quot;, ent.label_)# Output:# mexican -- cuisine# north -- location```Or alternatively as a standalone component```pythonfrom spacy_crfsuite import CRFExtractorfrom spacy_crfsuite.tokenizer import SpacyTokenizercrf_extractor = CRFExtractor().from_disk(&quot;model/model.pkl&quot;)tokenizer = SpacyTokenizer()example = {&quot;text&quot;: &quot;show mexican restaurents up north&quot;}tokenizer.tokenize(example, attribute=&quot;text&quot;)crf_extractor.process(example)# Output:# [{'start': 5,#   'end': 12,#   'value': 'mexican',#   'entity': 'cuisine',#   'confidence': 0.5823148506311286},#  {'start': 28,#   'end': 33,#   'value': 'north',#   'entity': 'location',#   'confidence': 0.8863076478494413}]```We can also take a look at what model learned.Use the `.explain()` method to understand model decision.```pythonprint(crf_extractor.explain())# Output:## Most likely transitions:# O          -&gt; O          1.637338# B-cuisine  -&gt; I-cuisine  1.373766# U-cuisine  -&gt; O          1.306077# I-cuisine  -&gt; L-cuisine  0.915989# O          -&gt; U-location 0.751463# B-cuisine  -&gt; L-cuisine  0.698893# O          -&gt; U-cuisine  0.480360# U-location -&gt; U-cuisine  0.403487# O          -&gt; B-cuisine  0.261450# L-cuisine  -&gt; O          0.182695# # Positive features:# 1.976502 O          0:bias:bias# 1.957180 U-location -1:low:the# 1.216547 B-cuisine  -1:low:for# 1.153924 U-location 0:prefix5:centr# 1.153924 U-location 0:prefix2:ce# 1.110536 U-location 0:digit# 1.058294 U-cuisine  0:prefix5:chine# 1.058294 U-cuisine  0:prefix2:ch# 1.051457 U-cuisine  0:suffix2:an# 0.999976 U-cuisine  -1:low:me```&gt; **Notice**: You can also access the `crf_extractor` directly with ```nlp.get_pipe(&quot;crf_ner&quot;).crf_extractor```.### Deploy to a web serverStart a web service```sh$ pip install uvicorn$ uvicorn spacy_crfsuite.serve:app --host 127.0.0.1 --port 5000```&gt;Notice: Set `$SPACY_MODEL` and `$CRF_MODEL` in your environment to control the server configurationscURL example```sh$ curl -X POST http://127.0.0.1:5000/parse -H 'Content-Type: application/json' -d '{&quot;text&quot;: &quot;George Walker Bush (born July 6, 1946) is an American politician and businessman who served as the 43rd president of the United States from 2001 to 2009.&quot;}'{  &quot;data&quot;: [    {      &quot;text&quot;: &quot;George Walker Bush (born July 6, 1946) is an American politician and businessman who served as the 43rd president of the United States from 2001 to 2009.&quot;,      &quot;entities&quot;: [        {          &quot;start&quot;: 0,          &quot;end&quot;: 18,          &quot;value&quot;: &quot;George Walker Bush&quot;,          &quot;entity&quot;: &quot;PER&quot;        },        {          &quot;start&quot;: 45,          &quot;end&quot;: 53,          &quot;value&quot;: &quot;American&quot;,          &quot;entity&quot;: &quot;MISC&quot;        },        {          &quot;start&quot;: 121,          &quot;end&quot;: 134,          &quot;value&quot;: &quot;United States&quot;,          &quot;entity&quot;: &quot;LOC&quot;        }      ]    }  ]}```## DevelopmentSet up env```sh$ poetry install$ poetry run spacy download en_core_web_sm```Run unit test```sh$ poetry run pytest```Run black (code formatting)```sh$ poetry run black spacy_crfsuite/ --config=pyproject.toml```</longdescription>
</pkgmetadata>