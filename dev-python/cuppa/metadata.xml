<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Cuppa=====A simple, extensible build system for use with`Scons &lt;http://www.scons.org/&gt;`__. **Cuppa** is designed to leverage thecapabilities of Scons, while allowing developers to focus on the task ofdescribing what needs to be built. In general **cuppa** supports``make`` like usage on the command-line. That is developers can simplywrite:.. code:: sh    scons -Dand have Scons &quot;do the right thing&quot;; building targets for any``sconscript`` files found in the current directory.**Cuppa** can be installed as a normal python package or installedlocally into a ``site_scons`` directory allowing it to be effortlesslyintegrated into any Scons setup.    Note: ``-D`` tells ``scons`` to look for an ``sconstruct`` file in    the current or in parent directories and if it finds one execute the    ``sconscript`` files as if called from that directory. This ensures    everything works as expected. For more details refer to the `Scons    documentation &lt;http://www.scons.org/documentation.php&gt;`__Quick Intro-----------Get **cuppa**~~~~~~~~~~~~~The simpest way to get **cuppa** is to ``pip install`` it using:::    pip install cuppaSample ``sconstruct`` file~~~~~~~~~~~~~~~~~~~~~~~~~~Let's look at a minimal ``sconstruct`` that makes use of **cuppa**. Itcould look like this:.. code:: python    # Pull in all the Cuppa goodies..    import cuppa    # Call sconscripts to do the work    cuppa.run()Calling the ``run`` method in the ``cuppa`` module starts the buildprocess calling ``sconscript`` files.Sample ``sconscript`` file~~~~~~~~~~~~~~~~~~~~~~~~~~Here is an example ``sconscript`` file that builds all \*.cpp files inthe directory where it resides:.. code:: python    Import( 'env' )    # Build all *.cpp source files as executables    for Source in env.GlobFiles('*.cpp'):        env.Build( Source[:-4], Source )The ``env.Build()`` method is provided by **cuppa** and does essentiallywhat ``env.Program()`` does but in addition is both toolchain andvariant aware, and further can provide notifications on progress.    Note: Source[:-4] simply strips off the file extension ``.cpp``,    that is, the last 4 characters of the file name.If our ``sconscript`` file was for a directory containing \*.cpp filesthat are actually tests then we could instead write the ``sconscript``file as:.. code:: python    Import( 'env' )    # Build all *.cpp source files as executables to be run as tests    for Source in env.GlobFiles('*.cpp'):        env.BuildTest( Source[:-4], Source )The ``env.BuildTest()`` method is provided by **cuppa** and builds thesources specified as ``env.Build()`` does.However, in addition, passing ``--test`` on the command-line will alsoresult in the executable produced being run by a **runner**. The defaulttest runner simply treats each executable as a test case and eachdirectory or executables as a test suite. If the process executescleanly the test passed, if not it failed.To run this on the command-line we would write:.. code:: sh    scons -D --testIf we only want to build and test *debug* executables we can insteadwrite this:.. code:: sh    scons -D --dbg --testOr for release only pass ``--rel``.**cuppa** also makes it easy to work with dependencies. For example, if`boost &lt;http://www.boost.org/&gt;`__ was a default dependency for all your``sconscript`` files you could write your sconstruct file as follows:.. code:: python    import cuppa    cuppa.run(        default_options = {             'boost-home': '&lt;Location of Boost&gt;'        },        default_dependencies = [            'boost'        ]    )This will automatically ensure that necessary includes and other compileoptions are set for the boost version that is found at ``boost-home``.If you need to link against specific boost libraries this can also bedone in the sconscript file as follows:.. code:: python    Import('env')    Test = 'my_complex_test'    Sources = [        Test + '.cpp'    ]    env.AppendUnique( STATICLIBS = [        env.BoostStaticLibrary( 'system' ),        env.BoostStaticLibrary( 'log' ),        env.BoostStaticLibrary( 'thread' ),        env.BoostStaticLibrary( 'timer' ),        env.BoostStaticLibrary( 'chrono' ),        env.BoostStaticLibrary( 'filesystem' ),    ] )    env.BuildTest( Test, Sources )The ``BoostStaticLibrary()`` method ensures that the library is built inthe correct build variant as required. If you preferred to use dynamiclinking then that can also be achieved using ``BoostSharedLibrary()``.The point is the complexities of using `boost &lt;http://www.boost.org/&gt;`__as a dependency are encapsulated and managed separately from thescontruct and sconscript files allowing developers to focus on intentnot method.Design Principles-----------------**cuppa** has been written primarily to provide a clean and structuredway to leverage the power of Scons without the usual problems of hugelycomplex ``scontruct`` files that diverge between projects. Key goals of**cuppa** are:-  minimise the need for adding logic into ``sconscript`` files, keeping   them as declarative as possible.-  allow declarative ``sconscript``\ s that are both much clearer and   significantly simpler than the equivalent ``make`` file, without the   need to learn a whole new scripting language like ``make`` or   ``cmake``.-  provide a clear structure for extending the facilities offered by   **cuppa**-  provide a clear vocabulary for building projects-  codify Scons best practices into **cuppa** itself so that users just   need to call appropriate methods knowing that **cuppa** will do the   right thing with their intent-  provide a framework that allows experts to focus on providing   facilities for others to use. Write once, use everywhere. For example   one person who knows how best to make   `boost &lt;http://www.boost.org/&gt;`__ available as a dependency can   manage that dependency and allow others to use it seamlessly.More Details------------For more details refer to the `project homepage &lt;https://github.com/ja11sop/cuppa&gt;`__.Acknowledgements----------------This work is based on the build system used in`clearpool.io &lt;http://www.clearpool.io&gt;`__ during development of itsnext generation exchange platform.</longdescription>
</pkgmetadata>