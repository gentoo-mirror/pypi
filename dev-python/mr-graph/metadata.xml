<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mr. Graph[![Documentation Status](https://readthedocs.org/projects/mr-graph/badge/?version=latest)](https://mr-graph.readthedocs.io/en/latest/?badge=latest)Welcome to Mr. Graph!Mr. Graph is a python library designed to make composing graphs of sync and async functions easy! Use google style docstrings to automagically create dataclasses and chain together function calls into graphs.## Features- Use with either async or sync functions- Uses google style doc strings to name return values.- Creates dataclasses for each function's output.- Can infer pipelines from input and output signatures- All directed acyclic graph layouts supported. linear, fan-in, fan-out.## Example UsageBuilding graphs can be as easy as:```pythonfrom mr_graph import Graphdef return_one():    &quot;&quot;&quot;    return 1    return one with no inputs    Returns    -------    m : float        equal to 1    &quot;&quot;&quot;    return 1    async def add_1(m: float):    &quot;&quot;&quot;    add 1 to a number    add 1 to the input value n.    Parameters    ----------    n : float        number to add 1 to.    Returns    -------    n : float        equal to n + 1    &quot;&quot;&quot;    return n + 1async def build_implicit_linear_graph():    &quot;&quot;&quot;    Return 2    Simple example linear graph. Wired up automagically using the input and output variable names.    Parameters    ----------        Returns    -------    two : float        always equal to 2    &quot;&quot;&quot;    g = Graph(nodes=[return_one, add_1])    return await g()```More information can be found on read the docs!</longdescription>
</pkgmetadata>