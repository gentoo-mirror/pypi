<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyJaws: A Pythonic Way to Define Databricks Jobs and Workflows&lt;p align=&quot;center&quot;&gt;        &lt;img src=&quot;https://raw.githubusercontent.com/rafaelpierre/pyjaws/main/img/pyjaws.png&quot; class=&quot;align-center&quot; /&gt;    &lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;[![pypi](https://img.shields.io/badge/pypi-0.1.5-brightgreen?style=for-the-badge)](https://pypi.org/project/pyjaws/) ![black](https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge) ![ruff](https://img.shields.io/badge/lint-ruff-gold?style=for-the-badge) ![cov](https://raw.githubusercontent.com/rafaelpierre/pyjaws/main/img/coverage.svg) ![databricks](https://img.shields.io/badge/Databricks-FF3621.svg?style=for-the-badge&amp;logo=Databricks&amp;logoColor=white) ![Jinja](https://img.shields.io/badge/jinja-white.svg?style=for-the-badge&amp;logo=jinja&amp;logoColor=black) ![downloads](https://img.shields.io/pypi/dm/pyjaws?style=for-the-badge)&lt;hr /&gt;* **PyJaws** enables declaring [Databricks Jobs and Workflows](https://docs.databricks.com/workflows/index.html) as Python code, allowing for:  * Code Linting  * Formatting  * Parameter Validation  * Modularity and reusability* In addition to those, **PyJaws** also provides some nice features such as [cycle detection](https://networkx.org/documentation/stable/reference/algorithms/cycles.html) out of the box.Folks who have used Python-based orchestration tools such as [Apache Airflow](https://airflow.apache.org/), [Luigi](https://luigi.readthedocs.io/en/stable/) and [Mage](https://pypi.org/project/mage-ai/) will be familiar with the concepts and the API if **PyJaws**.* **PyJaws** leverages some existing libraries in order to allow for **modularisation**, **reusability** and **validation**, such as:  * [Click](https://click.palletsprojects.com/en/8.1.x/) - for providing a rich CLI functionality  * [Pydantic](https://docs.pydantic.dev/latest/) - for efficient parameter validation  * [NetworkX](https://networkx.org/) - for Graph and Cycle Detection features  * [Jinja2](https://jinja.palletsprojects.com/en/3.1.x/) - for templating## Documentation* Work in progress. Stay tuned!## Development &amp; Testing* **PyJaws** can be tested locally for development purposes. To run unit tests, make sure `tox`, `pytest`, `pytest-cov`, and `coverage` are installed and from a bash terminal, simply run `tox`.## Getting Started* First step is installing `pyjaws`:```bashpip install pyjaws```* Once it's installed, define your Databricks Workspace authentication variables:```bashexport DATABRICKS_HOST = ...export DATABRICKS_TOKEN = ...```* Last, define your Workflow Tasks (see `examples`) and run:```bashpyjaws create path/to/your/workflow_definitions```### Sample Job Definition```pythonfrom pyjaws.api.base import (    Cluster,    Runtime,    Workflow)from pyjaws.api.tasks import PythonWheelTaskcluster = Cluster(    job_cluster_key = &quot;ai_cluster&quot;,    spark_version = Runtime.DBR_13_ML,    num_workers = 2,    node_type_id = &quot;Standard_DS3_v2&quot;,    cluster_log_conf = {        &quot;dbfs&quot;: {            &quot;destination&quot;: &quot;dbfs:/home/cluster_log&quot;        }    })# Create a Task object.ingest_task = PythonWheelTask(    key = &quot;ingest&quot;,    cluster = cluster,    entrypoint = &quot;iot&quot;,    task_name = &quot;ingest&quot;,    parameters = [        f&quot;my_parameter_value&quot;,        &quot;--output-table&quot;, &quot;my_table&quot;    ])transform_task = PythonWheelTask(    key = &quot;transform&quot;,    cluster = cluster,    entrypoint = &quot;iot&quot;,    task_name = &quot;ingest&quot;,    dependencies = [ingest_task],    parameters = [        f&quot;my_parameter_value2&quot;,        &quot;--input-table&quot;, &quot;my_table&quot;        &quot;--output-table&quot;, &quot;output_table&quot;    ])# Create a Workflow object to define dependencies# between previously defined tasks.workflow = Workflow(    name = &quot;my_workflow&quot;,    tasks = [ingest_task, transform_task])```### Extra Features* **Context Manager** for **Cluster** declarations:```python# cluster created with context managerwith Cluster(    job_cluster_key=&quot;mycluster_2&quot;,    spark_version=Runtime.DBR_13_ML,    node_type_id=&quot;Standard_E4ds_v4&quot;,    num_workers=3,) as cluster_2:    task_2 = SparkPythonTask(        key=&quot;task_2&quot;,        cluster=cluster_2,        python_file=&quot;/Workspace/Repos/bob@mail.com/utils/task_2.py&quot;,        source=Source.WORKSPACE,    )```* **Workflow preview/visualization** on notebooks:```pythondisplay(workflow)```Result:![preview](https://github.com/rafaelpierre/pyjaws/blob/main/img/preview.png?raw=true &quot;Preview&quot;)## Deploying JobsIf you have a folder containing multiple workflow definition files written in Python with **PyJaws**, it is quite simple to deploy all of them to your Databricks Workspace with a one liner:`pyjaws create examples/simple_workflow`This would result in the following Workflow being deployed to your workspace:![workflow](https://github.com/rafaelpierre/pyjaws/blob/main/img/workflow.png?raw=true &quot;Workflow&quot;)By default, **pyjaws** also includes some useful tags into the workflows indicating which Git Repo hosts the Python definition, commit hash and when the workflow was last updated. For example:![workflow](https://github.com/rafaelpierre/pyjaws/blob/main/img/tags.png?raw=true &quot;Workflow&quot;)## Disclaimer* **PyJaws** is not developed, endorsed not supported by Databricks. It is provided as-is; no warranty is derived from using this package. For more details, please refer to the [license](https://github.com/rafaelpierre/pyjaws/blob/main/LICENSE.md).## Reporting Bugs and ContributingFeel free to create an issue if you feel something is not right. Contribution guidelines can be found [here](https://githubcom/rafaelpierre/pyjaws/blob/main/CONTRIBUTING.md).</longdescription>
</pkgmetadata>