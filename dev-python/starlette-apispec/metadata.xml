<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================Starlette APISpec==================    Easy APISpec integration for Starlette.. image:: https://github.com/Woile/starlette-apispec/actions/workflows/pythonpackage.yml/badge.svg?style=flat-square    :alt: GitHub Workflow Status    :target: https://github.com/Woile/starlette-apispec/actions/workflows/pythonpackage.yml.. image:: https://img.shields.io/codecov/c/github/Woile/starlette-apispec.svg?style=flat-square    :alt: Codecov    :target: https://codecov.io/gh/Woile/starlette-apispec.. image:: https://img.shields.io/pypi/v/starlette-apispec.svg?style=flat-square    :alt: PyPI    :target: https://pypi.org/project/starlette-apispec/.. image:: https://img.shields.io/pypi/pyversions/starlette-apispec.svg?style=flat-square    :alt: PyPI - Python Version    :target: https://pypi.org/project/starlette-apispec/.. contents::    :depth: 2.. code-block:: python    from apispec import APISpec    from apispec.ext.marshmallow import MarshmallowPlugin    from starlette.applications import Starlette    from starlette_apispec import APISpecSchemaGenerator    app = Starlette()    schemas = APISpecSchemaGenerator(        APISpec(            title=&quot;Example API&quot;,            version=&quot;1.0&quot;,            openapi_version=&quot;3.0.0&quot;,            info={&quot;description&quot;: &quot;explanation of the api purpose&quot;},            plugins=[MarshmallowPlugin()],        )    )    @app.route(&quot;/schema&quot;, methods=[&quot;GET&quot;], include_in_schema=False)    def schema(request):        return schemas.OpenAPIResponse(request=request)Installation============::    pip install -U starlette-apispecAlternatively you can do::    poetry add starlette-apispecAbout-----This library helps you easily document your REST API built with starlette.Starlette_ is a is a lightweight ASGI framework/toolkit,which is ideal for building high performance asyncio services.APISpec_ supports the `OpenApi Specification &lt;https://github.com/OAI/OpenAPI-Specification&gt;`_and it has some useful plugins like marshmallow_ support.Version supported: :code:`^1.0.0`Usage=====This example includes marshmallow_ integration.. code-block:: python    from apispec import APISpec    from starlette.applications import Starlette    from starlette.endpoints import HTTPEndpoint    from starlette.testclient import TestClient    from starlette_apispec import APISpecSchemaGenerator    app = Starlette()    schemas = APISpecSchemaGenerator(        APISpec(            title=&quot;Example API&quot;,            version=&quot;1.0&quot;,            openapi_version=&quot;3.0.0&quot;,            info={&quot;description&quot;: &quot;explanation of the api purpose&quot;},        )    )    @app.websocket_route(&quot;/ws&quot;)    def ws(session):        &quot;&quot;&quot;ws&quot;&quot;&quot;        pass  # pragma: no cover    @app.route(&quot;/users&quot;, methods=[&quot;GET&quot;, &quot;HEAD&quot;])    def list_users(request):        &quot;&quot;&quot;        responses:        200:            description: A list of users.            examples:            [{&quot;username&quot;: &quot;tom&quot;}, {&quot;username&quot;: &quot;lucy&quot;}]        &quot;&quot;&quot;        pass  # pragma: no cover    @app.route(&quot;/users&quot;, methods=[&quot;POST&quot;])    def create_user(request):        &quot;&quot;&quot;        responses:        200:            description: A user.            examples:            {&quot;username&quot;: &quot;tom&quot;}        &quot;&quot;&quot;        pass  # pragma: no cover    @app.route(&quot;/orgs&quot;)    class OrganisationsEndpoint(HTTPEndpoint):        def get(self, request):            &quot;&quot;&quot;            responses:            200:                description: A list of organisations.                examples:                [{&quot;name&quot;: &quot;Foo Corp.&quot;}, {&quot;name&quot;: &quot;Acme Ltd.&quot;}]            &quot;&quot;&quot;            pass  # pragma: no cover        def post(self, request):            &quot;&quot;&quot;            responses:            200:                description: An organisation.                examples:                {&quot;name&quot;: &quot;Foo Corp.&quot;}            &quot;&quot;&quot;            pass  # pragma: no cover    @app.route(&quot;/schema&quot;, methods=[&quot;GET&quot;], include_in_schema=False)    def schema(request):        return schemas.OpenAPIResponse(request=request)More documentation==================This package is basically a proxy, so if you wonder how to do something,here are the sources you need:`Starlette documentation`_`APISpec documentation`_Testing=======1. Clone the repo2. Activate venv ``. venv/bin/activate``3. Install dependencies::    poetry install4. Run tests::    ./scripts/testContributing============**PRs are welcome!**.. _marshmallow: https://marshmallow.readthedocs.io/.. _APISpec: https://apispec.readthedocs.io/en/stable/.. _Starlette: https://www.starlette.io/.. _`Starlette documentation`: https://www.starlette.io/.. _`APISpec documentation`: https://apispec.readthedocs.io/en/stable/</longdescription>
</pkgmetadata>