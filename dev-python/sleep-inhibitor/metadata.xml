<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## SLEEP-INHIBITOR[![PyPi](https://img.shields.io/pypi/v/sleep-inhibitor)](https://pypi.org/project/sleep-inhibitor/)[![AUR](https://img.shields.io/aur/version/sleep-inhibitor)](https://aur.archlinux.org/packages/sleep-inhibitor/)This is a simple program to inhibit sleep/suspend on[systemd](https://www.freedesktop.org/wiki/Software/systemd/) basedLinux systems (or on compatible systems running[elogind](https://github.com/elogind/elogind)). Some examples of thedefault plugins provided are:1. Plugin to inhibit sleep while any audio is playing.2. Plugins to inhibit sleep while [Plex](https://plex.tv/) or   [Jellyfin](https://jellyfin.org/) media server is serving media   server is serving content.3. Plugin to inhibit sleep while a specified process is running. I   use this to prevent sleep while my home backup is running.You can also create your own custom plugins. They are extremely trivialto create as can be seen in the [providedexamples](sleep_inhibitor/plugins).A plugin can be created in shell script or any programming language. Itmust simply return an exit code to indicate whether the system should can beslept/suspended, or not. _Sleep-inhibitor_ runs each plugin at theperiod you specify (or the default 5 minutes) and checks the result toinhibit sleep or not until at least the next check period.The latest version of this document and code is available athttps://github.com/bulletmark/sleep-inhibitor.:warning: **Warning**: Unfortunately this program is currently somewhathandicapped due to [this systemdissue](https://github.com/systemd/systemd/issues/14812). Until thisissue is addressed, your system may not automatically [re-]suspend ifstill idle after it has been inhibited, even though _sleep-inhibitor_has removed the inhibit.## MotivationWhen looking for a solution for this issue I found the[autosuspend](https://autosuspend.readthedocs.io/en/3.0/index.html)package but, in addition to providing plugins, that package alsoimplements the complete sleep, resume, and wakeup logic. I also foundthe configuration and documentation confusing. I am happy with andprefer to use the native Linux sleep systems and I desired a simplermore lightweight approach that merely provided the ability to inhibitthese sleep systems for some special situations.1. On Linux desktop systems, I prefer to use the standard GNOME power   management GUI tools to automatically manage sleep/suspend (via   systemd). All the major DE's provide similar GUI tools.2. On Linux server systems, I prefer to use standard[systemd](https://www.freedesktop.org/wiki/Software/systemd/) powermanagement to manage sleep/suspend, configured via[`logind.conf`](https://www.freedesktop.org/software/systemd/man/logind.conf.html)and[`sleep.conf`](https://www.freedesktop.org/software/systemd/man/systemd-sleep.conf.html).These native approaches work well, and are easy to configure._Sleep-inhibitor_ assumes you are using the native systemd based sleepfacilities and merely adds the ability to add/create tiny plugins toinhibit sleep for specified conditions. _Sleep-inhibitor_ uses[`systemd-inhibit`](https://www.freedesktop.org/software/systemd/man/systemd-inhibit.html)to execute the sleep inhibition lock.## Installation[Arch](https://www.archlinux.org/) users can just install[_sleep-inhibitor_ from theAUR](https://aur.archlinux.org/packages/sleep-inhibitor) then skip tothe next Configuration section.Python 3.7 or later is required. The 3rd party ruamel.yaml package isalso required. Note [_sleep-inhibitor_ is onPyPI](https://pypi.org/project/sleep-inhibitor/) so just ensure that[`pipx`](https://pypa.github.io/pipx/) is installed then:To install:    $ sudo PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/bin pipx install sleep-inhibitorTo upgrade:    $ sudo PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/bin pipx upgrade sleep-inhibitorTo remove:    $ sudo PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/bin pipx uninstall sleep-inhibitorSome plugins require other software to be installed. E.g. If you use the[`plex-media-server`](sleep_inhibitor/plugins/plex-media-server)or[`jellyfin-server`](sleep_inhibitor/plugins/jellyfin-server)plugins then you must install [`curl`](https://curl.se/).## ConfigurationTo start, copy the sample[`sleep-inhibitor.conf`](sleep_inhibitor/sleep-inhibitor.conf)configuration file to `/etc/sleep-inhibitor.conf` and then edit thesample settings in that target file to add/configure plugins to yourrequirements. The instructions and a description of all configurationoptions are fully documented in the [sample configurationfile](sleep_inhibitor/sleep-inhibitor.conf).    $ sudo cp &quot;$(sleep-inhibitor -P)/sleep-inhibitor.conf&quot; /etc    $ sudoedit /etc/sleep-inhibitor.conf## Automatic Startup as systemd ServiceIf you installed from source or via `pip` then copy the included[`sleep-inhibitor.service`](sleep-/sleep-inhibitor.service)to `/etc/systemd/system/` (note that [Arch](https://www.archlinux.org/)users who installed from[AUR](https://aur.archlinux.org/packages/sleep-inhibitor) can skip thisfirst step):    $ sudo cp &quot;$(sleep-inhibitor -P)/sleep-inhibitor.service&quot; /etc/systemd/system/Start sleep-indicator and enable it to automatically start at reboot with:    $ sudo systemctl enable --now sleep-inhibitorIf you change the configuration file then restart with:    $ sudo systemctl restart sleep-inhibitorTo see status and logs:    $ systemctl status sleep-inhibitor    $ journalctl -u sleep-inhibitor## PluginsTo use the [standardplugins](sleep_inhibitor/plugins)distributed with this package just specify the plugin name (i.e. thefile name) as the `path` parameter in the [configurationfile](sleep_inhibitor/sleep-inhibitor.conf).To use your own custom plugins, just specify the absolute path to thatplugin. E.g. you can put your custom plugin at `/home/user/bin/myplugin`and just specify that full path in the [configurationfile](sleep_inhibitor/sleep-inhibitor.conf).A plugin can be any executable script/program which simply returns exitcode 254 to inhibit suspend, or anything else (usually 0 of course) tonot suspend. They can be very trivial to create as the provided [exampleplugins](sleep_inhibitor/plugins)demonstrate. A plugin can be created in any language you prefer such asShell, Python, Ruby, C/C++, etc.The plugin does not normally receive any arguments although you canchoose to specify arbitrary arguments to any plugin via the configurationfile, e.g. a sensitive token/password as the example[`plex-media-server`](sleep_inhibitor/plugins/plex-media-server)plugin requires, or the process name for the example[`is-process-running`](sleep_inhibitor/plugins/is-process-running)plugin.## Command Line UsageType `sleep-inhibitor -h` to view the usage summary:```usage: sleep-inhibitor [-h] [-c CONFIG] [-p PLUGIN_DIR] [-P]Program to run plugins to inhibit system sleep/suspend.options:  -h, --help            show this help message and exit  -c CONFIG, --config CONFIG                        alternative configuration file  -p PLUGIN_DIR, --plugin-dir PLUGIN_DIR                        alternative plugin dir  -P, --package-dir     just show directory where sample conf/service files,                        and default plugins can be found```## LicenseCopyright (C) 2020 Mark Blakeney. This program is distributed under theterms of the GNU General Public License. This program is free software:you can redistribute it and/or modify it under the terms of the GNUGeneral Public License as published by the Free Software Foundation,either version 3 of the License, or any later version. This program isdistributed in the hope that it will be useful, but WITHOUT ANYWARRANTY; without even the implied warranty of MERCHANTABILITY orFITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License at&lt;https://www.gnu.org/licenses/&gt; for more details.&lt;!-- vim: se ai syn=markdown: --&gt;</longdescription>
</pkgmetadata>