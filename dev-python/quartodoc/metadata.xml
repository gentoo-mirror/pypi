<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># quartodocGenerate python API documentation for quarto.## Install    pip install quartodocOr for the latest changes:    python3 -m pip install -e git+https://github.com/machow/quartodoc.git#egg=quartodoc## Basic use``` pythonfrom quartodoc import get_function, MdRenderer# get function object ---f_obj = get_function(&quot;quartodoc&quot;, &quot;get_function&quot;)# render ---renderer = MdRenderer(header_level = 1)print(    renderer.to_md(f_obj))```    # get_function    `get_function(module: str, func_name: str, parser: str = 'numpy')`    Fetch a function.    ## Parameters    | Name        | Type   | Description                | Default   |    |-------------|--------|----------------------------|-----------|    | `module`    | str    | A module name.             | required  |    | `func_name` | str    | A function name.           | required  |    | `parser`    | str    | A docstring parser to use. | `'numpy'` |    ## Examples    ```python    &gt;&gt;&gt; get_function(&quot;quartodoc&quot;, &quot;get_function&quot;)    &lt;Function('get_function', ...    ```## How it worksquartodoc consists of two pieces:- **collection**: using the library  [griffe](https://github.com/mkdocstrings/griffe) to statically collect  information about functions and classes in a program.- **docstring parsing**: also handled by griffe, which breaks it into a  tree structure.- **docstring rendering**: use plum-dispatch on methods like  MdRenderer.to_md to decide how to visit and render each piece of the  tree (e.g. the examples section, a parameter, etc..).Here is a quick example of how you can grab a function from griffe andwalk through it.``` pythonfrom griffe.loader import GriffeLoaderfrom griffe.docstrings.parsers import Parsergriffe = GriffeLoader(docstring_parser = Parser(&quot;numpy&quot;))mod = griffe.load_module(&quot;quartodoc&quot;)f_obj = mod._modules_collection[&quot;quartodoc.get_function&quot;]`````` pythonf_obj.name```    'get_function'``` pythondocstring = f_obj.docstring.parseddocstring```    [&lt;griffe.docstrings.dataclasses.DocstringSectionText at 0x105a2c310&gt;,     &lt;griffe.docstrings.dataclasses.DocstringSectionParameters at 0x10f7961f0&gt;,     &lt;griffe.docstrings.dataclasses.DocstringSectionExamples at 0x10f7965b0&gt;]Note that quartodoc’s MdRenderer can be called on any part of the parseddocstring.``` pythonfrom quartodoc import MdRendererrenderer = MdRenderer()print(    renderer.to_md(docstring[1]))```    | Name        | Type   | Description                | Default   |    |-------------|--------|----------------------------|-----------|    | `module`    | str    | A module name.             | required  |    | `func_name` | str    | A function name.           | required  |    | `parser`    | str    | A docstring parser to use. | `'numpy'` |</longdescription>
</pkgmetadata>