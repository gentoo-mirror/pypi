<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Teststack=========.. image:: https://github.com/gtmanfred/teststack/workflows/Tests/badge.svg    :target: https://github.com/gtmanfred/teststack.. image:: https://img.shields.io/codecov/c/github/gtmanfred/teststack    :target: https://codecov.io/gh/gtmanfred/teststack.. image:: https://img.shields.io/pypi/v/teststack    :target: https://pypi.org/project/teststack.. image:: https://img.shields.io/pypi/l/teststack    :target: http://www.apache.org/licenses/LICENSE-2.0.. image:: https://img.shields.io/pypi/dm/teststack    :target: https://pypi.org/project/figenv/.. image:: https://readthedocs.org/projects/teststack/badge?version=latest&amp;style=flat    :target: https://teststack.readthedocs.org/.. image:: https://img.shields.io/lgtm/grade/python/g/gtmanfred/teststack.svg?logo=lgtm&amp;logoWidth=18   :target: https://lgtm.com/projects/g/gtmanfred/teststack/context:pythonTest an application with infrastructure.teststack.toml--------------.. code-block:: toml    [tests.steps]    ping = &quot;ping -c4 8.8.8.8&quot;    env = &quot;env&quot;    raw = &quot;{posargs}&quot;    [services.database]    image = &quot;postgres:12&quot;    [services.database.ports]    &quot;5432/tcp&quot; = &quot;&quot;    [services.database.environment]    POSTGRES_USER = &quot;bebop&quot;    POSTGRES_PASSWORD = &quot;secret&quot;    POSTGRES_DB = &quot;bebop&quot;    [services.database.export]    SQLALCHEMY_DATABASE_URI = &quot;postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{HOST}:{PORT;5432/tcp}/{POSTGRES_DB}&quot;    POSTGRES_MAIN_USER = &quot;{POSTGRES_USER}&quot;    POSTGRES_MAIN_PASSWORD = &quot;{POSTGRES_PASSWORD}&quot;    POSTGRES_MAIN_HOST = &quot;{HOST}&quot;    POSTGRES_MAIN_RDS_HOST = &quot;{HOST}&quot;    POSTGRES_MAIN_PORT = &quot;{PORT;5432/tcp}&quot;    POSTGRES_MAIN_DBNAME = &quot;{POSTGRES_DB}&quot;There are two main sections: ``tests`` and ``services``.The ``test`` section is for information about the docker container that is goingto be used for testing. It renders the ``Dockerfile.j2``, and injects environmentvariables for customization. The ``tests.steps`` section specifies which stepsshould be run on a test machine. Any unprocessed commandline arguments that arepassed into teststack are stuck into commands as ``posargs``... code-block:: bash    teststack render    teststack build    teststack run -s raw -- pytest -k mytest    teststack stopThe ``services`` section specifies the services that need to be started along sidea test container.  In this example, a postgres container is started.  Then theports specify which ports need to be exposed, so 5432/tcp. And what environmentvariables should be passed to the service docker container when starting up, sothat it can be configured. In this case, we set the username, password and dbfor the database. The three commands around the services are start, stop andrestart, they do what they say... code-block:: bash    teststack start    teststack stop    teststack restartEverything that is set in the environment section is available when exporting.The other special variables that are made available is the HOST of the dockercontainer. By default, the ``env`` command exports ``localhost`` for the ``{HOST}``variable. And then the port that is exported has the number appended after asemicolon. So if you have specified ``5432/tcp`` as a port for a servicecontainer, the variable ``{PORT;5432/tcp}`` will be made available for exporting,or to add to connection strings.If however, the env is being used to start a test container (like run does) theHOST variable will be the default docker network IPAddress of the container, andthe port will be just the port, and not adapted to the forwarding port on theHost network.If you choose to run tests locally, instead of in the tests container, you canexport the environment variables for the stack and source them or put them in afile for something like vscode to read... code-block:: bash    $ source &lt;(teststack env)    $ teststack env --no-export &gt; .env</longdescription>
</pkgmetadata>