<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Macrosynergy](https://raw.githubusercontent.com/macrosynergy/macrosynergy/main/docs/source/_static/MACROSYNERGY_Logo_Primary.png?raw=True)# Macrosynergy Quant Research[![PyPI Latest Release](https://img.shields.io/pypi/v/macrosynergy.svg)](https://pypi.org/project/macrosynergy/)[![Package Status](https://img.shields.io/pypi/status/macrosynergy.svg)](https://pypi.org/project/macrosynergy/)[![License](https://img.shields.io/github/license/macrosynergy/macrosynergy)](https://github.com/macrosynergy/macrosynergy/blob/master/LICENSE)[![Downloads](https://static.pepy.tech/personalized-badge/macrosynergy?period=month&amp;units=international_system&amp;left_color=black&amp;right_color=orange&amp;left_text=PyPI%20downloads%20per%20month)](https://pepy.tech/project/macrosynergy)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![codecov](https://codecov.io/github/macrosynergy/macrosynergy/branch/develop/graph/badge.svg?token=BX4IKVD07R)](https://codecov.io/github/macrosynergy/macrosynergy)The Macrosynergy package supports financial market research and the development of trading strategies based on formats and conventions of the J.P. Morgan Macrosynergy  Quantamental System (JPMaQS). JPMaQS provides quantitative-fundamental (quantamental) and market data in simple daily formats in accordance with the information state of markets. The Macrosynergy package consists of six sub-packages:1. [management](./macrosynergy/management): simulates, analyses and reshapes standard quantamental dataframes.2. [panel](./macrosynergy/panel): analyses and visualizes panels of quantamental data.3. [signal](./macrosynergy/signal): transforms quantamental indicators into trading signals and does naive analysis.4. [pnl](./macrosynergy/pnl): constructs portfolios based on signals, applies risk management and analyses realistic PnLs.5. [download](./macrosynergy/download): interface for downloading data from JP Morgan DataQuery, with main module [jpmaqs.py](./macrosynergy/download/jpmaqs.py). 6. [dataquery](./macrosynergy/dataquery): [DEPRECATED] interface for downloading data from JP Morgan DataQuery, with main module [api.py](./macrosynergy/dataquery/api.py). ## InstallationThe easiest method for installing the package is to use the [PyPI](https://pypi.org/project/macrosynergy/) installation method:```shell scriptpip install macrosynergy``` Alternatively for the cutting edge development version, install the package from the [develop](https://github.com/macrosynergy/macrosynergy/tree/develop) branch as```shell scriptpip install git+https://github.com/macrosynergy/macrosynergy@develop```## Usage### DataQuery InterfaceTo download data from JP Morgan DataQuery, you can use the [JPMaQSDownload Object](./macrosynergy/download/jpmaqs.py)together with your OAuth authentication credentials (default):```pythonimport pandas as pdfrom macrosynergy.download import JPMaQSDownloadwith JPMaQSDownload(        client_id=&quot;&lt;dq_client_id&gt;&quot;,        client_secret=&quot;&lt;dq_client_secret&gt;&quot;) as downloader:    data = downloader.download(tickers=&quot;EUR_FXXR_NSA&quot;,                                 start_date=&quot;2022-01-01&quot;)assert isinstance(data, pd.DataFrame) and not data.emptyassert data.shape[0] &gt; 0data.info()```Alternatively, you can also the certificate and private key pair, to access DataQuery as:```pythonimport pandas as pdfrom macrosynergy.download import JPMaQSDownloadwith JPMaQSDownload(        oauth=False,        username=&quot;&lt;dq_username&gt;&quot;,        password=&quot;&lt;dq_password&gt;&quot;,        crt=&quot;&lt;path_to_dq_certificate&gt;&quot;,        key=&quot;&lt;path_to_dq_key&gt;&quot;) as downloader:    data = downloader.download(tickers=&quot;EUR_FXXR_NSA&quot;,                                 start_date=&quot;2022-01-01&quot;)assert isinstance(data, pd.DataFrame) and not data.emptyassert data.shape[0] &gt; 0data.info()```Both of the above example will download a snippet of example data from the premium JPMaQS datasetof the daily timeseries of EUR FX excess returns.Using the API you can also access a panel of tickers from different countries like so.```pythonimport pandas as pdfrom macrosynergy.download import JPMaQSDownloadcids = ['EUR','GBP','USD']xcats = ['FXXR_NSA','EQXR_NSA']tickers = [cid+&quot;_&quot;+xcat for cid in cids for xcat in xcats]with JPMaQSDownload(        client_id=&quot;&lt;dq_client_id&gt;&quot;,        client_secret=&quot;&lt;dq_client_secret&gt;&quot;) as downloader:    data = downloader.download(tickers=tickers,                                start_date=&quot;2022-01-01&quot;)assert isinstance(data, pd.DataFrame) and not data.emptyassert data.shape[0] &gt; 0data.info()```It is also possible to use a proxy server with the Dataquery interface. Here's an example:```pythonimport pandas as pdfrom macrosynergy.download import JPMaQSDownloadcids = ['EUR','GBP','USD']xcats = ['FXXR_NSA','EQXR_NSA']tickers = [cid+&quot;_&quot;+xcat for cid in cids for xcat in xcats]oauth_proxy=&quot;https://secureproxy.example.com:port&quot;proxy = {&quot;https&quot;: oauth_proxy}# or proxy = {&quot;http&quot;: &quot;http://proxy.example.com:port&quot;}with JPMaQSDownload(        client_id = &quot;&lt;dq_client_id&gt;&quot;,        client_secret = &quot;&lt;dq_client_secret&gt;&quot;,        proxy = proxy) as downloader:    data = downloader.download(tickers = tickers, start_date=&quot;2022-01-01&quot;)assert isinstance(data, pd.DataFrame) and not df.empty```or, ```python...proxies = {    &quot;http&quot;: &quot;http://proxy.example.com:port&quot;,    &quot;https&quot;: &quot;https://secucreproxy.example.com:port&quot;,}with JPMaQSDownload(        client_id = &quot;&lt;dq_client_id&gt;&quot;,        client_secret = &quot;&lt;dq_client_secret&gt;&quot;,        proxy = proxies) as downloader:    data = downloader.download(tickers = tickers)...```The deprecated DataQuery interface internally makes use of the JPMaQSDownload object. Using the deprecated path will raise a deprecation warning. The path and module will be removed in v0.1.0. Here's an example of the deprecated interface:```python...from macrosynergy.dataquery import api...with api.Interface(        oauth=True,        username=&quot;&lt;dq_username&gt;&quot;,        password=&quot;&lt;dq_password&gt;&quot;) as dq:    data = dq.download(tickers=tickers, start_date=&quot;2022-01-01&quot;)...```### Management In order to use the rest of the package without access to the API you can [simulate](./macrosynergy/management/simulate_quantamental_data.py) quantamental data using the management sub-package. ```pythonfrom macrosynergy.management.simulate_quantamental_data import make_qdfcids = ['AUD', 'GBP', 'NZD', 'USD']xcats = ['FXXR_NSA', 'FXCRY_NSA', 'FXCRR_NSA', 'EQXR_NSA', 'EQCRY_NSA', 'EQCRR_NSA',             'FXWBASE_NSA', 'EQWBASE_NSA']df_cids = pd.DataFrame(index=cids, columns=['earliest', 'latest', 'mean_add',                                                'sd_mult'])df_cids.loc['AUD'] = ['2000-01-01', '2022-03-14', 0, 1]df_cids.loc['GBP'] = ['2001-01-01', '2022-03-14', 0, 2]df_cids.loc['NZD'] = ['2002-01-01', '2022-03-14', 0, 3]df_cids.loc['USD'] = ['2000-01-01', '2022-03-14', 0, 4] df_xcats = pd.DataFrame(index=xcats, columns=['earliest', 'latest', 'mean_add',                                                  'sd_mult', 'ar_coef', 'back_coef'])df_xcats.loc['FXXR_NSA'] = ['2010-01-01', '2022-03-14', 0, 1, 0, 0.2]df_xcats.loc['FXCRY_NSA'] = ['2010-01-01', '2022-03-14', 1, 1, 0.9, 0.2]df_xcats.loc['FXCRR_NSA'] = ['2010-01-01', '2022-03-14', 0.5, 0.8, 0.9, 0.2]df_xcats.loc['EQXR_NSA'] = ['2010-01-01', '2022-03-14', 0.5, 2, 0, 0.2]df_xcats.loc['EQCRY_NSA'] = ['2010-01-01', '2022-03-14', 2, 1.5, 0.9, 0.5]df_xcats.loc['EQCRR_NSA'] = ['2010-01-01', '2022-03-14', 1.5, 1.5, 0.9, 0.5]df_xcats.loc['FXWBASE_NSA'] = ['2010-01-01', '2022-02-01', 1, 1.5, 0.8, 0.5]df_xcats.loc['EQWBASE_NSA'] = ['2010-01-01', '2022-02-01', 1, 1.5, 0.9, 0.5]data = make_qdf(df_cids, df_xcats, back_ar=0.75)```The management sub-package can also be used to [check](./macrosynergy/management/check_availability.py) which data is availablein the dataframe.```pythonfrom macrosynergy.management.check_availability import check_availabilityfilt_na = (data['cid'] == 'USD') &amp; (data['real_date'] &lt; '2015-01-01')data_filt.loc[filt_na, 'value'] = np.nancheck_availability(df=data_filt, xcats=xcats, cids=cids)```You can also use the built-in function to [reshape](./macrosynergy/management/shape_dfs.py) the data depending onthe dates or tickers of your choice.```pythondata_reduced = reduce_df(data, xcats=xcats[:-1], cids=cids[0],                       start='2012-01-01', end='2018-01-31')```### Panel#### BasketThe basket class is used to calculate the returns and carries of financial contracts using various methods,a [basket](./macrosynergy/panel/basket.py) is created as so.```pythonfrom macrosynergy.panel.basket import Basketblack = {'AUD': ['2010-01-01', '2013-12-31'], 'GBP': ['2010-01-01', '2013-12-31']}contracts = ['AUD_FX', 'AUD_EQ', 'NZD_FX', 'GBP_EQ', 'USD_EQ']gdp_figures = [17.0, 17.0, 41.0, 9.0, 250.0]basket_1 = Basket(    df=data, contracts=contracts_1, ret=&quot;XR_NSA&quot;, cry=[&quot;CRY_NSA&quot;, &quot;CRR_NSA&quot;],    blacklist=black)basket_1.make_basket(weight_meth=&quot;equal&quot;, max_weight=0.55, basket_name=&quot;GLB_EQUAL&quot;)```Using the basket class you have access to the methods such as visulasing the weights associated with each contract,or returning the weight or basket.```pythonbasket_1.return_basket()basket_1.return_weights()basket_1.weight_visualiser(basket_name=&quot;GLB_EQUAL&quot;)```You can also calculate and visualise the following and more with built-in functions.1.  [historic volume](./macrosynergy/panel/historic_vol.py)2.  [z-scores](./macrosynergy/panel/make_zn_scores.py)3.  [beta values](./macrosynergy/panel/return_beta.py)4.  [timeline](./macrosynergy/panel/view_timelines.py) ```pythonfrom macrosynergy.panel.historic_vol import historic_voldata_historic = historic_vol(    data, cids=cids, xcat='FXXR_NSA', lback_periods=21, lback_meth='ma', half_life=11,    remove_zeros=True)``````pythonfrom macrosynergy.panel.make_zn_scores import make_zn_scoresz_mean = make_zn_scores(data, xcat='FXXR_NSA', sequential=True, cids=cids,                      blacklist=black, iis=False, neutral='mean',                      pan_weight=0.5, min_obs=261, est_freq=&quot;w&quot;)z_median = make_zn_scores(data, xcat='FXXR_NSA', sequential=True, cids=cids,                      blacklist=black, iis=False, neutral='median',                      pan_weight=0.5, min_obs=261, est_freq=&quot;d&quot;)``````pythonfrom macrosynergy.panel.return_beta import return_betabenchmark_return = &quot;USD_FXXR_NSA&quot;data_hedge = return_beta(df=data, xcat='FXXR_NSA', cids=cids,                       benchmark_return=benchmark_return, start='2010-01-01',                       end='2020-10-30',                       blacklist=black, meth='ols', oos=True,                       refreq='w', min_obs=24, hedged_returns=True)print(df_hedge)beta_display(df_hedge=df_hedge, subplots=False)``````pythonview_timelines(data, xcats=['FXXR_NSA','FXCRY_NSA'], cids=cids[0],                   size=(10, 5), title='AUD Return and Carry')```### Signal#### Signal Return RelationsThe [SignalReturnRelations](./macrosynergy/signal/signal_return.py) class analyses and visualises signal andreturn series.```pythonfrom macrosynergy.signal.signal_return import SignalReturnRelationssrn = SignalReturnRelations(data, ret=&quot;EQXR_NSA&quot;, sig=&quot;EQCRY_NSA&quot;, rival_sigs=None,                                sig_neg=True, cosp=True, freq=&quot;M&quot;, start=&quot;2002-01-01&quot;)srn.summary_table()```In the creation of the class you can also indicate rival signals for basic relational statistics.```pythonr_sigs = [ &quot;EQCRR_NSA&quot;]srn = SignalReturnRelations(data, &quot;EQXR_NSA&quot;, sig=&quot;EQCRY_NSA&quot;, rival_sigs=r_sigs,                            sig_neg=True, cosp=True, freq=&quot;M&quot;, start=&quot;2002-01-01&quot;)df_sigs = srn.signals_table(sigs=['EQCRY_NSA_NEG', 'EQCRR_NSA_NEG'])df_sigs_all = srn.signals_table()```Using the class you can plot accuracy bars between returns and signals.```pythonsrn.accuracy_bars(type=&quot;signals&quot;, title=&quot;Accuracy measure between target return, EQXR_NSA,&quot;                                        &quot; and the respective signals, ['EQCRY_NSA_NEG', &quot;                                        &quot; 'EQCRR_NSA_NEG'].&quot;)```### PnL#### Naive pnlThe [NaivePnL](./macrosynergy/pnl/naive_pnl.py) class computes Pnls with limited signal options and disregarding transaction costs.```pythonfrom macrosynergy.pnl.naive_pnl import NaivePnLpnl = NaivePnL(data, ret=&quot;EQXR_NSA&quot;, sigs=[&quot;CRY&quot;, &quot;GROWTH&quot;], cids=cids,        start=&quot;2000-01-01&quot;, bms=[&quot;EUR_EQXR_NSA&quot;, &quot;USD_EQXR_NSA&quot;])```You can then make the pnl and see a list of key pnl statistics.```pythonpnl.make_pnl(        sig=&quot;GROWTH&quot;, sig_op=&quot;zn_score_pan&quot;, sig_neg=True, rebal_freq=&quot;monthly&quot;,        vol_scale=5, rebal_slip=1, min_obs=250, thresh=2)df_eval = pnl.evaluate_pnls(        pnl_cats=[&quot;PNL_GROWTH_NEG&quot;], start=&quot;2015-01-01&quot;, end=&quot;2020-12-31&quot;)```## DocumentationThe official documentation can be found at our website: https://docs.macrosynergy.com</longdescription>
</pkgmetadata>