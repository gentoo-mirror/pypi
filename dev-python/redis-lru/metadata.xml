<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>redis-lru=========Installation------------.. code-block:: bash    pip install redis-lruIntroduction------------It's often useful to have an lru redis cache. Of course, it's also desirable not to have the cache grow too large, and cache expiration is often desirable.This module provides such a cache.redis-lru supports CPython 3.4+For the most part, you can just use it like this:.. code-block:: python    import redis    from redis_lru import RedisLRU    client = redis.StrictRedis()    cache = RedisLRU(client)    @cache    def f(x):        print(&quot;Calling f({})&quot;.format(x))        return x    f(3) # This will print &quot;Calling f(3)&quot;, will return 3    f(3) # This will not print anything, but will return 3 (unless 15 minutes have passed between the first and second function call).Additionally a datetime.time object can be provided to clear the cache at a specific time of the day:.. code-block:: python    @cache(expire_on=datetime.time(hour=8)) # clear at 08:00 o'clock    def b(x):        print(&quot;Calling f({})&quot;.format(x))        return x0.1.2=====- Fixed support of non-hashable values0.1.1=====- Added new `expire_on` parameter for @cache &amp; RedisLRU support set ttl by `datetime.time` objects0.1.0=====- Refactor RedisLRU class for a clean and neat implement.- Stop supporting Python 2.- Fix bugs in test cases.- Added clean cache option at process exit.0.0.4=====- Generate `unique_key` automatically so your may never get touch this argument.- Improved exception processing, now you won't receive any exception by default.- Added unittest for `redis_lru_cache` decorator and `RedisLRUCacheDict`- Added more type of cache usage statistic type like `POP`, `DEL` etc.- Added changes log.</longdescription>
</pkgmetadata>