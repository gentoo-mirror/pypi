<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================Redis Timeseries===============================Time series API built on top of Redis that can be used to store and querytime series statistics. Multiple time granularities can be used to keeptrack of different time intervals... image:: https://img.shields.io/pypi/v/redis_timeseries.svg        :target: https://pypi.python.org/pypi/redis_timeseries.. image:: https://api.travis-ci.org/ryananguiano/python-redis-timeseries.svg?branch=master        :target: https://travis-ci.org/ryananguiano/python-redis-timeseries.. image:: https://readthedocs.org/projects/redis-timeseries/badge/?version=latest        :target: https://redis-timeseries.readthedocs.io/en/latest/?badge=latest        :alt: Documentation Status.. image:: https://pyup.io/repos/github/ryananguiano/python-redis-timeseries/shield.svg     :target: https://pyup.io/repos/github/ryananguiano/python-redis-timeseries/     :alt: Updates* Free software: MIT license* Documentation: https://redis-timeseries.readthedocs.io.Install-------To install Redis Timeseries, run this command in your terminal:.. code-block:: console    $ pip install redis_timeseriesUsage-----To initialize the TimeSeries class, you must pass a Redis client toaccess the database. You may also override the base key for the time series.    &gt;&gt;&gt; import redis    &gt;&gt;&gt; client = redis.StrictRedis()    &gt;&gt;&gt; ts = TimeSeries(client, base_key='my_timeseries')To customize the granularities, make sure each granularity has a ``ttl``and ``duration`` in seconds. You can use the helper functions foreasier definitions.    &gt;&gt;&gt; my_granularities = {    ...     '1minute': {'ttl': hours(1), 'duration': minutes(1)},    ...     '1hour': {'ttl': days(7), 'duration': hours(1)}    ... }    &gt;&gt;&gt; ts = TimeSeries(client, granularities=my_granularities)``.record_hit()`` accepts a key and an optional timestamp and incrementcount. It will record the data in all defined granularities.    &gt;&gt;&gt; ts.record_hit('event:123')    &gt;&gt;&gt; ts.record_hit('event:123', datetime(2017, 1, 1, 13, 5))    &gt;&gt;&gt; ts.record_hit('event:123', count=5)``.record_hit()`` will automatically execute when ``execute=True``. If youset ``execute=False``, you can chain the commands into a single redispipeline. You must then execute the pipeline with ``.execute()``.    &gt;&gt;&gt; ts.record_hit('event:123', execute=False)    &gt;&gt;&gt; ts.record_hit('enter:123', execute=False)    &gt;&gt;&gt; ts.record_hit('exit:123', execute=False)    &gt;&gt;&gt; ts.execute()``.get_hits()`` will query the database for the latest data in theselected granularity. If you want to query the last 3 minutes, youwould query the ``1minute`` granularity with a count of 3. This will returna list of tuples ``(bucket, count)`` where the bucket is the rounded timestamp.    &gt;&gt;&gt; ts.get_hits('event:123', '1minute', 3)    [(datetime(2017, 1, 1, 13, 5), 1), (datetime(2017, 1, 1, 13, 6), 0), (datetime(2017, 1, 1, 13, 7), 3)]``.get_total_hits()`` will query the database and return only a sum of allthe buckets in the query.    &gt;&gt;&gt; ts.get_total_hits('event:123', '1minute', 3)    4``.scan_keys()`` will return a list of keys that could exist in theselected range. You can pass a search string to limit the keys returned.The search string should always have a ``*`` to define the wildcard.    &gt;&gt;&gt; ts.scan_keys('1minute', 10, 'event:*')    ['event:123', 'event:456']Features--------* Multiple granularity tracking* Redis pipeline chaining* Key scanner* Easy to integrate with charting packages* Can choose either integer or float counting* Date bucketing with timezone supportCredits-------Algorithm copied from `tonyskn/node-redis-timeseries`_This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template... _`tonyskn/node-redis-timeseries`: https://github.com/tonyskn/node-redis-timeseries.. _Cookiecutter: https://github.com/audreyr/cookiecutter.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage=======History=======0.1.8 (2017-07-25)------------------* Fix bug in _round_time() method0.1.7 (2017-07-25)------------------* Fix bug in _round_time() method0.1.6 (2017-07-25)------------------* Add timezone so day buckets will start at midnight in the correct timezone0.1.5 (2017-07-18)------------------* Update default granularities0.1.4 (2017-07-12)------------------* Add float value capabilities* Add increase() and decrease() methods* Move get_hits() -&gt; get_buckets() and get_total_hits() -&gt; get_total()0.1.3 (2017-03-30)------------------* Remove six package* Clean up source file0.1.2 (2017-03-30)------------------* Make Python 3 compatible* Fix tox to make PyPy work0.1.1 (2017-03-30)------------------* Minor project file updates0.1.0 (2017-03-30)------------------* First release on PyPI.</longdescription>
</pkgmetadata>