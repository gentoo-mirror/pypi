<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![NPM version](https://badge.fury.io/js/cdk-sns-notify.svg)](https://badge.fury.io/js/cdk-sns-notify)[![PyPI version](https://badge.fury.io/py/cdk-sns-notify.svg)](https://badge.fury.io/py/cdk-sns-notify)![Release](https://github.com/clarencetw/cdk-sns-notify/workflows/Release/badge.svg)# cdk-sns-notifyA CDK construct library to send line notify or discord webhook# Sample```pythonimport * as sns from &quot;@aws-cdk/aws-sns&quot;;import * as cloudwatch from &quot;@aws-cdk/aws-cloudwatch&quot;;import * as cw_actions from &quot;@aws-cdk/aws-cloudwatch-actions&quot;;import { SnsNotify } from &quot;cdk-sns-notify&quot;;const topic = new sns.Topic(stack, &quot;Topic&quot;);const metric = new cloudwatch.Metric({  namespace: &quot;AWS/EC2&quot;,  metricName: &quot;CPUUtilization&quot;,  dimensions: {    InstanceId: instance.instanceId,  },  period: cdk.Duration.minutes(1),});const alarm = new cloudwatch.Alarm(stack, &quot;Alarm&quot;, {  metric,  threshold: 5,  evaluationPeriods: 1,});alarm.addAlarmAction(new cw_actions.SnsAction(topic));const snsLineNotify = new SnsNotify(stack, &quot;sns-line-notify&quot;, {  lineNotifyToken: &quot;lineNotifyToken&quot;,});topic.addSubscription(snsLineNotify.lambdaSubscription);```# Deploy```shcdk deploy```</longdescription>
</pkgmetadata>