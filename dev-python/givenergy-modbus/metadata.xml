<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GivEnergy Modbus[![pypi](https://img.shields.io/pypi/v/givenergy-modbus.svg)](https://pypi.org/project/givenergy-modbus/)[![python](https://img.shields.io/pypi/pyversions/givenergy-modbus.svg)](https://pypi.org/project/givenergy-modbus/)[![Build Status](https://github.com/dewet22/givenergy-modbus/actions/workflows/dev.yml/badge.svg)](https://github.com/dewet22/givenergy-modbus/actions/workflows/dev.yml)[![codecov](https://codecov.io/gh/dewet22/givenergy-modbus/branch/main/graphs/badge.svg)](https://codecov.io/github/dewet22/givenergy-modbus)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)A python library to access GivEnergy inverters via Modbus TCP on a local network, with no dependency on the GivEnergyCloud. This extends [pymodbus](https://pymodbus.readthedocs.io/) by providing a custom framer, decoder and PDUs that arespecific to the GivEnergy implementation.&gt; ⚠️ This project makes no representations as to its completeness or correctness. You use it at your own risk — if your&gt; inverter mysteriously explodes because you accidentally set the `BOOMTIME` register or you consume a MWh of&gt; electricity doing SOC calibration: you **really** are on your own. We make every effort to prevent you from shooting&gt; yourself in the foot, so as long as you use the client and its exposed methods, you should be perfectly safe.* Documentation: &lt;https://dewet22.github.io/givenergy-modbus&gt;* GitHub: &lt;https://github.com/dewet22/givenergy-modbus&gt;* PyPI: &lt;https://pypi.org/project/givenergy-modbus/&gt;* Free software: Apache-2.0## Features* Reading all registers and decoding them into their representative datatypes* Writing data to holding registers that are deemed to be safe to set configuration on the inverter## How to useUse the provided client to interact with the device over the network, and register caches to build combined state of adevice:```pythonimport datetimefrom givenergy_modbus.client import GivEnergyClientfrom givenergy_modbus.model.inverter import Modelfrom givenergy_modbus.model.plant import Plantclient = GivEnergyClient(host=&quot;192.168.99.99&quot;)# change configuration on the device:client.enable_charge_target(80)# set a charging slot from 00:30 to 04:30client.set_charge_slot_1((datetime.time(hour=0, minute=30), datetime.time(hour=4, minute=30)))# set the inverter to charge when there's excess, and discharge otherwise. it will also respect charging slots.client.set_mode_dynamic()p = Plant(number_batteries=1)client.refresh_plant(p, full_refresh=True)assert p.inverter.inverter_serial_number == 'SA1234G567'assert p.inverter.inverter_model == Model.Hybridassert p.inverter.v_pv1 == 1.4  # Vassert p.inverter.e_battery_discharge_day == 8.1  # kWhassert p.inverter.enable_charge_targetassert p.inverter.dict() == {    'inverter_serial_number': 'SA1234G567',    'device_type_code': '3001',    'charge_slot_1': (datetime.time(0, 30), datetime.time(7, 30)),    'f_ac1': 49.98,    ...}assert p.inverter.json() == '{&quot;inverter_serial_number&quot;: &quot;SA1234G567&quot;, &quot;device_type_code&quot;: &quot;3001&quot;, ...'assert p.batteries[0].serial_number == 'BG1234G567'assert p.batteries[0].v_battery_cell_01 == 3.117assert p.batteries[0].dict() == {    'bms_firmware_version': 3005,    'design_capacity': 160.0,    ...}assert p.batteries[0].json() == '{&quot;battery_serial_number&quot;: &quot;BG1234G567&quot;, &quot;v_battery_cell_01&quot;: 3.117, ...'```## CreditsThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) andthe [waynerv/cookiecutter-pypackage](https://github.com/waynerv/cookiecutter-pypackage) project template.</longdescription>
</pkgmetadata>