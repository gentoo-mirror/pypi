<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cdktf-tf-module-stackA drop-in replacement for cdktf.TerraformStack that let's you define Terraform modules as construct.## Available Packages### NPMThe npm package is available at [https://www.npmjs.com/package/@cdktf/tf-module-stack](https://www.npmjs.com/package/@cdktf/tf-module-stack).`npm install @cdktf/tf-module-stack`### PyPIThe PyPI package is available at [https://pypi.org/project/cdktf-tf-module-stack](https://pypi.org/project/cdktf-tf-module-stack).`pipenv install cdktf-tf-module-stack`### NugetThe Nuget package is available at [https://www.nuget.org/packages/HashiCorp.Cdktf.TfModuleStack](https://www.nuget.org/packages/HashiCorp.Cdktf.TfModuleStack).`dotnet add package HashiCorp.Cdktf.TfModuleStack`### MavenThe Maven package is available at [https://mvnrepository.com/artifact/com.hashicorp/cdktf-tf-module-stack](https://mvnrepository.com/artifact/com.hashicorp/cdktf-tf-module-stack).```&lt;dependency&gt;    &lt;groupId&gt;com.hashicorp&lt;/groupId&gt;    &lt;artifactId&gt;cdktf-tf-module-stack&lt;/artifactId&gt;    &lt;version&gt;[REPLACE WITH DESIRED VERSION]&lt;/version&gt;&lt;/dependency&gt;```### GoThe go package is generated into the [`github.com/cdktf/cdktf-tf-module-stack-go`](https://github.com/cdktf/cdktf-tf-module-stack-go) package.`go get github.com/cdktf/cdktf-tf-module-stack-go/tfmodulestack`## Usage### Typescript```pythonimport { App } from &quot;cdktf&quot;;import {  TFModuleStack,  TFModuleVariable,  TFModuleOutput,  ProviderRequirement,} from &quot;cdktf-tf-module-stack&quot;;import { Resource } from &quot;@cdktf/provider-null&quot;;class MyAwesomeModule extends TFModuleStack {  constructor(scope: Construct, id: string) {    super(scope, id);    new ProviderRequirement(this, &quot;null&quot;, &quot;~&gt; 2.0&quot;);    const resource = new Resource(this, &quot;resource&quot;);    new TFModuleVariable(this, &quot;my_var&quot;, {      type: &quot;string&quot;,      description: &quot;A variable&quot;,      default: &quot;default&quot;,    });    new TFModuleOutput(this, &quot;my_output&quot;, {      value: resource.id,    });  }}const app = new App();new MyAwesomeModule(app, &quot;my-awesome-module&quot;);app.synth();```### Python```pythonfrom constructs import Constructfrom cdktf import App, TerraformStackfrom imports.null.resource import Resourcefrom cdktf_tf_module_stack import TFModuleStack, TFModuleVariable, TFModuleOutput, ProviderRequirementclass MyAwesomeModule(TFModuleStack):    def __init__(self, scope: Construct, ns: str):        super().__init__(scope, ns)        ProviderRequirement(self, &quot;null&quot;, provider_version_constraint=&quot;~&gt; 2.0&quot;)        TFModuleVariable(self, &quot;my_var&quot;, type=&quot;string&quot;, description=&quot;A variable&quot;, default=&quot;default&quot;)        resource = Resource(self, &quot;resource&quot;)        TFModuleOutput(self, &quot;my_output&quot;, value=resource.id)app = App()MyAwesomeModule(app, &quot;my-awesome-module&quot;)app.synth()```This will synthesize a Terraform JSON file that looks like this:```json{  &quot;output&quot;: {    &quot;my_output&quot;: [      {        &quot;value&quot;: &quot;${null_resource.resource.id}&quot;      }    ]  },  &quot;resource&quot;: {    &quot;null_resource&quot;: {      &quot;resource&quot;: {}    }  },  &quot;terraform&quot;: {    &quot;required_providers&quot;: {      &quot;null&quot;: {        &quot;source&quot;: &quot;null&quot;,        &quot;version&quot;: &quot;~&gt; 2.0&quot;      }    },    &quot;variable&quot;: {      &quot;my_var&quot;: {        &quot;default&quot;: &quot;default&quot;,        &quot;description&quot;: &quot;A variable&quot;,        &quot;type&quot;: &quot;string&quot;      }    }  }}```Please note that the provider section is missing, so that the Terraform Workspace using the generated module can be used with any provider matching the version.</longdescription>
</pkgmetadata>