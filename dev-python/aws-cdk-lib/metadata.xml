<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AWS Cloud Development Kit LibraryThe AWS CDK construct library provides APIs to define your CDK application and addCDK constructs to the application.## Usage### Upgrade from CDK 1.xWhen upgrading from CDK 1.x, remove all dependencies to individual CDK packagesfrom your dependencies file and follow the rest of the sections.### InstallationTo use this package, you need to declare this package and the `constructs` package asdependencies.According to the kind of project you are developing:For projects that are CDK libraries in NPM, declare them both under the `devDependencies` **and** `peerDependencies` sections.To make sure your library is compatible with the widest range of CDK versions: pick the minimum `aws-cdk-lib` versionthat your library requires; declare a range dependency with a caret on that version in peerDependencies, and declare apoint version dependency on that version in devDependencies.For example, let's say the minimum version your library needs is `2.38.0`. Your `package.json` should look like this:```javascript{  &quot;peerDependencies&quot;: {    &quot;aws-cdk-lib&quot;: &quot;^2.38.0&quot;,    &quot;constructs&quot;: &quot;^10.0.0&quot;  },  &quot;devDependencies&quot;: {    /* Install the oldest version for testing so we don't accidentally use features from a newer version than we declare */    &quot;aws-cdk-lib&quot;: &quot;2.38.0&quot;  }}```For CDK apps, declare them under the `dependencies` section. Use a caret so you always get the latest version:```json{  &quot;dependencies&quot;: {    &quot;aws-cdk-lib&quot;: &quot;^2.38.0&quot;,    &quot;constructs&quot;: &quot;^10.0.0&quot;  }}```### Use in your code#### Classic importYou can use a classic import to get access to each service namespaces:```pythonfrom aws_cdk import Stack, App, aws_s3 as s3app = App()stack = Stack(app, &quot;TestStack&quot;)s3.Bucket(stack, &quot;TestBucket&quot;)```#### Barrel importAlternatively, you can use &quot;barrel&quot; imports:```pythonfrom aws_cdk import App, Stackfrom aws_cdk.aws_s3 import Bucketapp = App()stack = Stack(app, &quot;TestStack&quot;)Bucket(stack, &quot;TestBucket&quot;)```&lt;!--BEGIN CORE DOCUMENTATION--&gt;## Stacks and StagesA `Stack` is the smallest physical unit of deployment, and maps directly ontoa CloudFormation Stack. You define a Stack by defining a subclass of `Stack`-- let's call it `MyStack` -- and instantiating the constructs that make upyour application in `MyStack`'s constructor. You then instantiate this stackone or more times to define different instances of your application. For example,you can instantiate it once using few and cheap EC2 instances for testing,and once again using more and bigger EC2 instances for production.When your application grows, you may decide that it makes more sense to split itout across multiple `Stack` classes. This can happen for a number of reasons:* You could be starting to reach the maximum number of resources allowed in a single  stack (this is currently 500).* You could decide you want to separate out stateful resources and stateless resources  into separate stacks, so that it becomes easy to tear down and recreate the stacks  that don't have stateful resources.* There could be a single stack with resources (like a VPC) that are shared  between multiple instances of other stacks containing your applications.As soon as your conceptual application starts to encompass multiple stacks,it is convenient to wrap them in another construct that represents yourlogical application. You can then treat that new unit the same way you usedto be able to treat a single stack: by instantiating it multiple timesfor different instances of your application.You can define a custom subclass of `Stage`, holding one or more`Stack`s, to represent a single logical instance of your application.As a final note: `Stack`s are not a unit of reuse. They describe physicaldeployment layouts, and as such are best left to application builders toorganize their deployments with. If you want to vend a reusable construct,define it as a subclasses of `Construct`: the consumers of your constructwill decide where to place it in their own stacks.## Stack SynthesizersEach Stack has a *synthesizer*, an object that determines how and wherethe Stack should be synthesized and deployed. The synthesizer controlsaspects like:* How does the stack reference assets? (Either through CloudFormation  parameters the CLI supplies, or because the Stack knows a predefined  location where assets will be uploaded).* What roles are used to deploy the stack? These can be bootstrapped  roles, roles created in some other way, or just the CLI's current  credentials.The following synthesizers are available:* `DefaultStackSynthesizer`: recommended. Uses predefined asset locations and  roles created by the modern bootstrap template. Access control is done by  controlling who can assume the deploy role. This is the default stack  synthesizer in CDKv2.* `LegacyStackSynthesizer`: Uses CloudFormation parameters to communicate  asset locations, and the CLI's current permissions to deploy stacks. This  is the default stack synthesizer in CDKv1.* `CliCredentialsStackSynthesizer`: Uses predefined asset locations, and the  CLI's current permissions.Each of these synthesizers takes configuration arguments. To configurea stack with a synthesizer, pass it as one of its properties:```pythonMyStack(app, &quot;MyStack&quot;,    synthesizer=DefaultStackSynthesizer(        file_assets_bucket_name=&quot;my-orgs-asset-bucket&quot;    ))```For more information on bootstrapping accounts and customizing synthesis,see [Bootstrapping in the CDK Developer Guide](https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html).## Nested Stacks[Nested stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) are stacks created as part of other stacks. You create a nested stack within another stack by using the `NestedStack` construct.As your infrastructure grows, common patterns can emerge in which you declare the same components in multiple templates. You can separate out these common components and create dedicated templates for them. Then use the resource in your template to reference other templates, creating nested stacks.For example, assume that you have a load balancer configuration that you use for most of your stacks. Instead of copying and pasting the same configurations into your templates, you can create a dedicated template for the load balancer. Then, you just use the resource to reference that template from within other templates.The following example will define a single top-level stack that contains two nested stacks: each one with a single Amazon S3 bucket:```pythonclass MyNestedStack(cfn.NestedStack):    def __init__(self, scope, id, *, parameters=None, timeout=None, notifications=None):        super().__init__(scope, id, parameters=parameters, timeout=timeout, notifications=notifications)        s3.Bucket(self, &quot;NestedBucket&quot;)class MyParentStack(Stack):    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None, crossRegionReferences=None, permissionsBoundary=None, suppressTemplateIndentation=None):        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting, crossRegionReferences=crossRegionReferences, permissionsBoundary=permissionsBoundary, suppressTemplateIndentation=suppressTemplateIndentation)        MyNestedStack(self, &quot;Nested1&quot;)        MyNestedStack(self, &quot;Nested2&quot;)```Resources references across nested/parent boundaries (even with multiple levels of nesting) will be wired by the AWS CDKthrough CloudFormation parameters and outputs. When a resource from a parent stack is referenced by a nested stack,a CloudFormation parameter will automatically be added to the nested stack and assigned from the parent; when a resourcefrom a nested stack is referenced by a parent stack, a CloudFormation output will be automatically be added to thenested stack and referenced using `Fn::GetAtt &quot;Outputs.Xxx&quot;` from the parent.Nested stacks also support the use of Docker image and file assets.## Accessing resources in a different stackYou can access resources in a different stack, as long as they are in thesame account and AWS Region (see [next section](#accessing-resources-in-a-different-stack-and-region) for an exception).The following example defines the stack `stack1`,which defines an Amazon S3 bucket. Then it defines a second stack, `stack2`,which takes the bucket from stack1 as a constructor property.```pythonprod = {&quot;account&quot;: &quot;123456789012&quot;, &quot;region&quot;: &quot;us-east-1&quot;}stack1 = StackThatProvidesABucket(app, &quot;Stack1&quot;, env=prod)# stack2 will take a property { bucket: IBucket }stack2 = StackThatExpectsABucket(app, &quot;Stack2&quot;,    bucket=stack1.bucket,    env=prod)```If the AWS CDK determines that the resource is in the same account andRegion, but in a different stack, it automatically synthesizes AWSCloudFormation[Exports](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html)in the producing stack and an[Fn::ImportValue](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html)in the consuming stack to transfer that information from one stack to theother.## Accessing resources in a different stack and region&gt; **This feature is currently experimental**You can enable the Stack property `crossRegionReferences`in order to access resources in a different stack *and* region. With this feature flagenabled it is possible to do something like creating a CloudFront distribution in `us-east-2` andan ACM certificate in `us-east-1`.```pythonstack1 = Stack(app, &quot;Stack1&quot;,    env=Environment(        region=&quot;us-east-1&quot;    ),    cross_region_references=True)cert = acm.Certificate(stack1, &quot;Cert&quot;,    domain_name=&quot;*.example.com&quot;,    validation=acm.CertificateValidation.from_dns(route53.PublicHostedZone.from_hosted_zone_id(stack1, &quot;Zone&quot;, &quot;Z0329774B51CGXTDQV3X&quot;)))stack2 = Stack(app, &quot;Stack2&quot;,    env=Environment(        region=&quot;us-east-2&quot;    ),    cross_region_references=True)cloudfront.Distribution(stack2, &quot;Distribution&quot;,    default_behavior=cloudfront.BehaviorOptions(        origin=origins.HttpOrigin(&quot;example.com&quot;)    ),    domain_names=[&quot;dev.example.com&quot;],    certificate=cert)```When the AWS CDK determines that the resource is in a different stack *and* is in a differentregion, it will &quot;export&quot; the value by creating a custom resource in the producing stack whichcreates SSM Parameters in the consuming region for each exported value. The parameters will becreated with the name '/cdk/exports/${consumingStackName}/${export-name}'.In order to &quot;import&quot; the exports into the consuming stack a [SSM Dynamic reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-ssm)is used to reference the SSM parameter which was created.In order to mimic strong references, a Custom Resource is also created in the consumingstack which marks the SSM parameters as being &quot;imported&quot;. When a parameter has been successfullyimported, the producing stack cannot update the value.See the [adr](https://github.com/aws/aws-cdk/blob/main/packages/@aws-cdk/core/adr/cross-region-stack-references)for more details on this feature.### Removing automatic cross-stack referencesThe automatic references created by CDK when you use resources across stacksare convenient, but may block your deployments if you want to remove theresources that are referenced in this way. You will see an error like:```textExport Stack1:ExportsOutputFnGetAtt-****** cannot be deleted as it is in use by Stack1```Let's say there is a Bucket in the `stack1`, and the `stack2` references its`bucket.bucketName`. You now want to remove the bucket and run into the error above.It's not safe to remove `stack1.bucket` while `stack2` is still using it, sounblocking yourself from this is a two-step process. This is how it works:DEPLOYMENT 1: break the relationship* Make sure `stack2` no longer references `bucket.bucketName` (maybe the consumer  stack now uses its own bucket, or it writes to an AWS DynamoDB table, or maybe you just  remove the Lambda Function altogether).* In the `stack1` class, call `this.exportValue(this.bucket.bucketName)`. This  will make sure the CloudFormation Export continues to exist while the relationship  between the two stacks is being broken.* Deploy (this will effectively only change the `stack2`, but it's safe to deploy both).DEPLOYMENT 2: remove the resource* You are now free to remove the `bucket` resource from `stack1`.* Don't forget to remove the `exportValue()` call as well.* Deploy again (this time only the `stack1` will be changed -- the bucket will be deleted).## DurationsTo make specifications of time intervals unambiguous, a single class called`Duration` is used throughout the AWS Construct Library by all constructsthat that take a time interval as a parameter (be it for a timeout, arate, or something else).An instance of Duration is constructed by using one of the static factorymethods on it:```pythonDuration.seconds(300) # 5 minutesDuration.minutes(5) # 5 minutesDuration.hours(1) # 1 hourDuration.days(7) # 7 daysDuration.parse(&quot;PT5M&quot;)```Durations can be added or subtracted together:```pythonDuration.minutes(1).plus(Duration.seconds(60)) # 2 minutesDuration.minutes(5).minus(Duration.seconds(10))```## Size (Digital Information Quantity)To make specification of digital storage quantities unambiguous, a class called`Size` is available.An instance of `Size` is initialized through one of its static factory methods:```pythonSize.kibibytes(200) # 200 KiBSize.mebibytes(5) # 5 MiBSize.gibibytes(40) # 40 GiBSize.tebibytes(200) # 200 TiBSize.pebibytes(3)```Instances of `Size` created with one of the units can be converted into others.By default, conversion to a higher unit will fail if the conversion does not producea whole number. This can be overridden by unsetting `integral` property.```pythonSize.mebibytes(2).to_kibibytes() # yields 2048Size.kibibytes(2050).to_mebibytes(rounding=SizeRoundingBehavior.FLOOR)```## SecretsTo help avoid accidental storage of secrets as plain text, we use the `SecretValue` type torepresent secrets. Any construct that takes a value that should be a secret (such asa password or an access key) will take a parameter of type `SecretValue`.The best practice is to store secrets in AWS Secrets Manager and reference them using `SecretValue.secretsManager`:```pythonsecret = SecretValue.secrets_manager(&quot;secretId&quot;,    json_field=&quot;password&quot;,  # optional: key of a JSON field to retrieve (defaults to all content),    version_id=&quot;id&quot;,  # optional: id of the version (default AWSCURRENT)    version_stage=&quot;stage&quot;)```Using AWS Secrets Manager is the recommended way to reference secrets in a CDK app.`SecretValue` also supports the following secret sources:* `SecretValue.unsafePlainText(secret)`: stores the secret as plain text in your app and the resulting template (not recommended).* `SecretValue.secretsManager(secret)`: refers to a secret stored in Secrets Manager* `SecretValue.ssmSecure(param, version)`: refers to a secret stored as a SecureString in the SSM  Parameter Store. If you don't specify the exact version, AWS CloudFormation uses the latest  version of the parameter.* `SecretValue.cfnParameter(param)`: refers to a secret passed through a CloudFormation parameter (must have `NoEcho: true`).* `SecretValue.cfnDynamicReference(dynref)`: refers to a secret described by a CloudFormation dynamic reference (used by `ssmSecure` and `secretsManager`).* `SecretValue.resourceAttribute(attr)`: refers to a secret returned from a CloudFormation resource creation.`SecretValue`s should only be passed to constructs that accept properties of type`SecretValue`. These constructs are written to ensure your secrets will not beexposed where they shouldn't be. If you try to use a `SecretValue` in adifferent location, an error about unsafe secret usage will be thrown atsynthesis time.If you rotate the secret's value in Secrets Manager, you must also change atleast one property on the resource where you are using the secret, to forceCloudFormation to re-read the secret.`SecretValue.ssmSecure()` is only supported for a limited set of resources.[Click here for a list of supported resources and properties](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#template-parameters-dynamic-patterns-resources).## ARN manipulationSometimes you will need to put together or pick apart Amazon Resource Names(ARNs). The functions `stack.formatArn()` and `stack.parseArn()` exist forthis purpose.`formatArn()` can be used to build an ARN from components. It will automaticallyuse the region and account of the stack you're calling it on:```python# stack: Stack# Builds &quot;arn:&lt;PARTITION&gt;:lambda:&lt;REGION&gt;:&lt;ACCOUNT&gt;:function:MyFunction&quot;stack.format_arn(    service=&quot;lambda&quot;,    resource=&quot;function&quot;,    sep=&quot;:&quot;,    resource_name=&quot;MyFunction&quot;)````parseArn()` can be used to get a single component from an ARN. `parseArn()`will correctly deal with both literal ARNs and deploy-time values (tokens),but in case of a deploy-time value be aware that the result will be anotherdeploy-time value which cannot be inspected in the CDK application.```python# stack: Stack# Extracts the function name out of an AWS Lambda Function ARNarn_components = stack.parse_arn(arn, &quot;:&quot;)function_name = arn_components.resource_name```Note that depending on the service, the resource separator can be either`:` or `/`, and the resource name can be either the 6th or 7thcomponent in the ARN. When using these functions, you will need to knowthe format of the ARN you are dealing with.For an exhaustive list of ARN formats used in AWS, see [AWS ARNs andNamespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)in the AWS General Reference.## Dependencies### Construct DependenciesSometimes AWS resources depend on other resources, and the creation of oneresource must be completed before the next one can be started.In general, CloudFormation will correctly infer the dependency relationshipbetween resources based on the property values that are used. In the cases whereit doesn't, the AWS Construct Library will add the dependency relationship foryou.If you need to add an ordering dependency that is not automatically inferred,you do so by adding a dependency relationship using`constructA.node.addDependency(constructB)`. This will add a dependencyrelationship between all resources in the scope of `constructA` and allresources in the scope of `constructB`.If you want a single object to represent a set of constructs that are notnecessarily in the same scope, you can use a `DependencyGroup`. Thefollowing creates a single object that represents a dependency on twoconstructs, `constructB` and `constructC`:```python# Declare the dependable objectb_and_c = DependencyGroup()b_and_c.add(construct_b)b_and_c.add(construct_c)# Take the dependencyconstruct_a.node.add_dependency(b_and_c)```### Stack DependenciesTwo different stack instances can have a dependency on one another. Thishappens when an resource from one stack is referenced in another stack. Inthat case, CDK records the cross-stack referencing of resources,automatically produces the right CloudFormation primitives, and adds adependency between the two stacks. You can also manually add a dependencybetween two stacks by using the `stackA.addDependency(stackB)` method.A stack dependency has the following implications:* Cyclic dependencies are not allowed, so if `stackA` is using resources from  `stackB`, the reverse is not possible anymore.* Stacks with dependencies between them are treated specially by the CDK  toolkit:  * If `stackA` depends on `stackB`, running `cdk deploy stackA` will also    automatically deploy `stackB`.  * `stackB`'s deployment will be performed *before* `stackA`'s deployment.### CfnResource DependenciesTo make declaring dependencies between `CfnResource` objects easier, you can declare dependencies from one `CfnResource` object on another by using the `cfnResource1.addDependency(cfnResource2)` method. This method will work for resources both within the same stack and across stacks as it detects the relative location of the two resources and adds the dependency either to the resource or between the relevant stacks, as appropriate. If more complex logic is in needed, you can similarly remove, replace, or view dependencies between `CfnResource` objects with the `CfnResource` `removeDependency`, `replaceDependency`, and `obtainDependencies` methods, respectively.## Custom ResourcesCustom Resources are CloudFormation resources that are implemented by arbitraryuser code. They can do arbitrary lookups or modifications during aCloudFormation deployment.Custom resources are backed by *custom resource providers*. Commonly, these areLambda Functions that are deployed in the same deployment as the one thatdefines the custom resource itself, but they can also be backed by LambdaFunctions deployed previously, or code responding to SNS Topic events running onEC2 instances in a completely different account. For more information on customresource providers, see the next section.Once you have a provider, each definition of a `CustomResource` constructrepresents one invocation. A single provider can be used for the implementationof arbitrarily many custom resource definitions. A single definition looks likethis:```pythonCustomResource(self, &quot;MyMagicalResource&quot;,    resource_type=&quot;Custom::MyCustomResource&quot;,  # must start with 'Custom::'    # the resource properties    properties={        &quot;Property1&quot;: &quot;foo&quot;,        &quot;Property2&quot;: &quot;bar&quot;    },    # the ARN of the provider (SNS/Lambda) which handles    # CREATE, UPDATE or DELETE events for this resource type    # see next section for details    service_token=&quot;ARN&quot;)```### Custom Resource ProvidersCustom resources are backed by a **custom resource provider** which can beimplemented in one of the following ways. The following table compares thevarious provider types (ordered from low-level to high-level):| Provider                                                             | Compute Type | Error Handling | Submit to CloudFormation | Max Timeout     | Language | Footprint ||----------------------------------------------------------------------|:------------:|:--------------:|:------------------------:|:---------------:|:--------:|:---------:|| [sns.Topic](#amazon-sns-topic)                                       | Self-managed | Manual         | Manual                   | Unlimited       | Any      | Depends   || [lambda.Function](#aws-lambda-function)                              | AWS Lambda   | Manual         | Manual                   | 15min           | Any      | Small     || [core.CustomResourceProvider](#the-corecustomresourceprovider-class) | AWS Lambda   | Auto           | Auto                     | 15min           | Node.js  | Small     || [custom-resources.Provider](#the-custom-resource-provider-framework) | AWS Lambda   | Auto           | Auto                     | Unlimited Async | Any      | Large     |Legend:* **Compute type**: which type of compute can be used to execute the handler.* **Error Handling**: whether errors thrown by handler code are automatically  trapped and a FAILED response is submitted to CloudFormation. If this is  &quot;Manual&quot;, developers must take care of trapping errors. Otherwise, events  could cause stacks to hang.* **Submit to CloudFormation**: whether the framework takes care of submitting  SUCCESS/FAILED responses to CloudFormation through the event's response URL.* **Max Timeout**: maximum allows/possible timeout.* **Language**: which programming languages can be used to implement handlers.* **Footprint**: how many resources are used by the provider framework itself.**A NOTE ABOUT SINGLETONS**When defining resources for a custom resource provider, you will likely want todefine them as a *stack singleton* so that only a single instance of theprovider is created in your stack and which is used by all custom resources ofthat type.Here is a basic pattern for defining stack singletons in the CDK. The followingexamples ensures that only a single SNS topic is defined:```pythondef get_or_create(self, scope):    stack = Stack.of(scope)    uniqueid = &quot;GloballyUniqueIdForSingleton&quot; # For example, a UUID from `uuidgen`    existing = stack.node.try_find_child(uniqueid)    if existing:        return existing    return sns.Topic(stack, uniqueid)```#### Amazon SNS TopicEvery time a resource event occurs (CREATE/UPDATE/DELETE), an SNS notificationis sent to the SNS topic. Users must process these notifications (e.g. through afleet of worker hosts) and submit success/failure responses to theCloudFormation service.&gt; You only need to use this type of provider if your custom resource cannot run on AWS Lambda, for reasons other than the 15&gt; minute timeout. If you are considering using this type of provider because you want to write a custom resource provider that may need&gt; to wait for more than 15 minutes for the API calls to stabilize, have a look at the [`custom-resources`](#the-custom-resource-provider-framework) module first.&gt;&gt; Refer to the [CloudFormation Custom Resource documentation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) for information on the contract your custom resource needs to adhere to.Set `serviceToken` to `topic.topicArn`  in order to use this provider:```pythontopic = sns.Topic(self, &quot;MyProvider&quot;)CustomResource(self, &quot;MyResource&quot;,    service_token=topic.topic_arn)```#### AWS Lambda FunctionAn AWS lambda function is called *directly* by CloudFormation for all resourceevents. The handler must take care of explicitly submitting a success/failureresponse to the CloudFormation service and handle various error cases.&gt; **We do not recommend you use this provider type.** The CDK has wrappers around Lambda Functions that make them easier to work with.&gt;&gt; If you do want to use this provider, refer to the [CloudFormation Custom Resource documentation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) for information on the contract your custom resource needs to adhere to.Set `serviceToken` to `lambda.functionArn` to use this provider:```pythonfn = lambda_.Function(self, &quot;MyProvider&quot;, function_props)CustomResource(self, &quot;MyResource&quot;,    service_token=fn.function_arn)```#### The `core.CustomResourceProvider` classThe class [`@aws-cdk/core.CustomResourceProvider`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_core.CustomResourceProvider.html) offers a basic low-levelframework designed to implement simple and slim custom resource providers. Itcurrently only supports Node.js-based user handlers, represents permissions as rawJSON blobs instead of `iam.PolicyStatement` objects, and it does not havesupport for asynchronous waiting (handler cannot exceed the 15min lambdatimeout).&gt; **As an application builder, we do not recommend you use this provider type.** This provider exists purely for custom resources that are part of the AWS Construct Library.&gt;&gt; The [`custom-resources`](#the-custom-resource-provider-framework) provider is more convenient to work with and more fully-featured.The provider has a built-in singleton method which uses the resource type as astack-unique identifier and returns the service token:```pythonservice_token = CustomResourceProvider.get_or_create(self, &quot;Custom::MyCustomResourceType&quot;,    code_directory=f&quot;{__dirname}/my-handler&quot;,    runtime=CustomResourceProviderRuntime.NODEJS_14_X,    description=&quot;Lambda function created by the custom resource provider&quot;)CustomResource(self, &quot;MyResource&quot;,    resource_type=&quot;Custom::MyCustomResourceType&quot;,    service_token=service_token)```The directory (`my-handler` in the above example) must include an `index.js` file. It cannot importexternal dependencies or files outside this directory. It must export an asyncfunction named `handler`. This function accepts the CloudFormation resourceevent object and returns an object with the following structure:```jsexports.handler = async function(event) {  const id = event.PhysicalResourceId; // only for &quot;Update&quot; and &quot;Delete&quot;  const props = event.ResourceProperties;  const oldProps = event.OldResourceProperties; // only for &quot;Update&quot;s  switch (event.RequestType) {    case &quot;Create&quot;:      // ...    case &quot;Update&quot;:      // ...      // if an error is thrown, a FAILED response will be submitted to CFN      throw new Error('Failed!');    case &quot;Delete&quot;:      // ...  }  return {    // (optional) the value resolved from `resource.ref`    // defaults to &quot;event.PhysicalResourceId&quot; or &quot;event.RequestId&quot;    PhysicalResourceId: &quot;REF&quot;,    // (optional) calling `resource.getAtt(&quot;Att1&quot;)` on the custom resource in the CDK app    // will return the value &quot;BAR&quot;.    Data: {      Att1: &quot;BAR&quot;,      Att2: &quot;BAZ&quot;    },    // (optional) user-visible message    Reason: &quot;User-visible message&quot;,    // (optional) hides values from the console    NoEcho: true  };}```Here is an complete example of a custom resource that summarizes two numbers:`sum-handler/index.js`:```jsexports.handler = async (e) =&gt; {  return {    Data: {      Result: e.ResourceProperties.lhs + e.ResourceProperties.rhs,    },  };};````sum.ts`:```pythonfrom constructs import Constructfrom aws_cdk import CustomResource, CustomResourceProvider, CustomResourceProviderRuntime, Tokenclass Sum(Construct):    def __init__(self, scope, id, *, lhs, rhs):        super().__init__(scope, id)        resource_type = &quot;Custom::Sum&quot;        service_token = CustomResourceProvider.get_or_create(self, resource_type,            code_directory=f&quot;{__dirname}/sum-handler&quot;,            runtime=CustomResourceProviderRuntime.NODEJS_14_X        )        resource = CustomResource(self, &quot;Resource&quot;,            resource_type=resource_type,            service_token=service_token,            properties={                &quot;lhs&quot;: lhs,                &quot;rhs&quot;: rhs            }        )        self.result = Token.as_number(resource.get_att(&quot;Result&quot;))```Usage will look like this:```pythonsum = Sum(self, &quot;MySum&quot;, lhs=40, rhs=2)CfnOutput(self, &quot;Result&quot;, value=Token.as_string(sum.result))```To access the ARN of the provider's AWS Lambda function role, use the `getOrCreateProvider()`built-in singleton method:```pythonprovider = CustomResourceProvider.get_or_create_provider(self, &quot;Custom::MyCustomResourceType&quot;,    code_directory=f&quot;{__dirname}/my-handler&quot;,    runtime=CustomResourceProviderRuntime.NODEJS_14_X)role_arn = provider.role_arn```This role ARN can then be used in resource-based IAM policies.To add IAM policy statements to this role, use `addToRolePolicy()`:```pythonprovider = CustomResourceProvider.get_or_create_provider(self, &quot;Custom::MyCustomResourceType&quot;,    code_directory=f&quot;{__dirname}/my-handler&quot;,    runtime=CustomResourceProviderRuntime.NODEJS_14_X)provider.add_to_role_policy({    &quot;Effect&quot;: &quot;Allow&quot;,    &quot;Action&quot;: &quot;s3:GetObject&quot;,    &quot;Resource&quot;: &quot;*&quot;})```Note that `addToRolePolicy()` uses direct IAM JSON policy blobs, *not* a`iam.PolicyStatement` object like you will see in the rest of the CDK.#### The Custom Resource Provider FrameworkThe [`@aws-cdk/custom-resources`](https://docs.aws.amazon.com/cdk/api/latest/docs/custom-resources-readme.html) module includes an advanced framework forimplementing custom resource providers.Handlers are implemented as AWS Lambda functions, which means that they can beimplemented in any Lambda-supported runtime. Furthermore, this provider has anasynchronous mode, which means that users can provide an `isComplete` lambdafunction which is called periodically until the operation is complete. Thisallows implementing providers that can take up to two hours to stabilize.Set `serviceToken` to `provider.serviceToken` to use this type of provider:```pythonprovider = customresources.Provider(self, &quot;MyProvider&quot;,    on_event_handler=on_event_handler,    is_complete_handler=is_complete_handler)CustomResource(self, &quot;MyResource&quot;,    service_token=provider.service_token)```See the [documentation](https://docs.aws.amazon.com/cdk/api/latest/docs/custom-resources-readme.html) for more details.## AWS CloudFormation featuresA CDK stack synthesizes to an AWS CloudFormation Template. This sectionexplains how this module allows users to access low-level CloudFormationfeatures when needed.### Stack OutputsCloudFormation [stack outputs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html) and exports are created usingthe `CfnOutput` class:```pythonCfnOutput(self, &quot;OutputName&quot;,    value=my_bucket.bucket_name,    description=&quot;The name of an S3 bucket&quot;,  # Optional    export_name=&quot;TheAwesomeBucket&quot;)```### ParametersCloudFormation templates support the use of [Parameters](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html) tocustomize a template. They enable CloudFormation users to input custom values toa template each time a stack is created or updated. While the CDK designphilosophy favors using build-time parameterization, users may need to useCloudFormation in a number of cases (for example, when migrating an existingstack to the AWS CDK).Template parameters can be added to a stack by using the `CfnParameter` class:```pythonCfnParameter(self, &quot;MyParameter&quot;,    type=&quot;Number&quot;,    default=1337)```The value of parameters can then be obtained using one of the `value` methods.As parameters are only resolved at deployment time, the values obtained areplaceholder tokens for the real value (`Token.isUnresolved()` would return `true`for those):```pythonparam = CfnParameter(self, &quot;ParameterName&quot;)# If the parameter is a Stringparam.value_as_string# If the parameter is a Numberparam.value_as_number# If the parameter is a Listparam.value_as_list```### Pseudo ParametersCloudFormation supports a number of [pseudo parameters](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html),which resolve to useful values at deployment time. CloudFormation pseudoparameters can be obtained from static members of the `Aws` class.It is generally recommended to access pseudo parameters from the scope's `stack`instead, which guarantees the values produced are qualifying the designatedstack, which is essential in cases where resources are shared cross-stack:```python# &quot;this&quot; is the current constructstack = Stack.of(self)stack.account # Returns the AWS::AccountId for this stack (or the literal value if known)stack.region # Returns the AWS::Region for this stack (or the literal value if known)stack.partition```### Resource OptionsCloudFormation resources can also specify [resourceattributes](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-product-attribute-reference.html). The `CfnResource` class allowsaccessing those through the `cfnOptions` property:```pythonraw_bucket = s3.CfnBucket(self, &quot;Bucket&quot;)# -or-raw_bucket_alt = my_bucket.node.default_child# thenraw_bucket.cfn_options.condition = CfnCondition(self, &quot;EnableBucket&quot;)raw_bucket.cfn_options.metadata = {    &quot;metadata_key&quot;: &quot;MetadataValue&quot;}```Resource dependencies (the `DependsOn` attribute) is modified using the`cfnResource.addDependency` method:```pythonresource_a = CfnResource(self, &quot;ResourceA&quot;, resource_props)resource_b = CfnResource(self, &quot;ResourceB&quot;, resource_props)resource_b.add_dependency(resource_a)```#### CreationPolicySome resources support a [CreationPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html) to be specified as a CfnOption.The creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only AWS CloudFormation resources that support creation policies are `CfnAutoScalingGroup`, `CfnInstance`, `CfnWaitCondition` and `CfnFleet`.The `CfnFleet` resource from the `aws-appstream` module supports specifying `startFleet` asa property of the creationPolicy on the resource options. Setting it to true will make AWS CloudFormation wait until the fleet is started before continuing with the creation ofresources that depend on the fleet resource.```pythonfleet = appstream.CfnFleet(self, &quot;Fleet&quot;,    instance_type=&quot;stream.standard.small&quot;,    name=&quot;Fleet&quot;,    compute_capacity=appstream.CfnFleet.ComputeCapacityProperty(        desired_instances=1    ),    image_name=&quot;AppStream-AmazonLinux2-09-21-2022&quot;)fleet.cfn_options.creation_policy = CfnCreationPolicy(    start_fleet=True)```The properties passed to the level 2 constructs `AutoScalingGroup` and `Instance` from the`aws-ec2` module abstract what is passed into the `CfnOption` properties `resourceSignal` and`autoScalingCreationPolicy`, but when using level 1 constructs you can specify these yourself.The CfnWaitCondition resource from the `aws-cloudformation` module suppports the `resourceSignal`.The format of the timeout is `PT#H#M#S`. In the example below AWS Cloudformation will wait for3 success signals to occur within 15 minutes before the status of the resource will be set to`CREATE_COMPLETE`.```python# resource: CfnResourceresource.cfn_options.creation_policy = CfnCreationPolicy(    resource_signal=CfnResourceSignal(        count=3,        timeout=&quot;PR15M&quot;    ))```### Intrinsic Functions and Condition ExpressionsCloudFormation supports [intrinsic functions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html). These functionscan be accessed from the `Fn` class, which provides type-safe methods for eachintrinsic function as well as condition expressions:```python# my_object_or_array: Any# my_array: Any# To use Fn::Base64Fn.base64(&quot;SGVsbG8gQ0RLIQo=&quot;)# To compose condition expressions:environment_parameter = CfnParameter(self, &quot;Environment&quot;)Fn.condition_and(    # The &quot;Environment&quot; CloudFormation template parameter evaluates to &quot;Production&quot;    Fn.condition_equals(&quot;Production&quot;, environment_parameter),    # The AWS::Region pseudo-parameter value is NOT equal to &quot;us-east-1&quot;    Fn.condition_not(Fn.condition_equals(&quot;us-east-1&quot;, Aws.REGION)))# To use Fn::ToJsonStringFn.to_json_string(my_object_or_array)# To use Fn::LengthFn.len(Fn.split(&quot;,&quot;, my_array))```When working with deploy-time values (those for which `Token.isUnresolved`returns `true`), idiomatic conditionals from the programming language cannot beused (the value will not be known until deployment time). When conditional logicneeds to be expressed with un-resolved values, it is necessary to useCloudFormation conditions by means of the `CfnCondition` class:```pythonenvironment_parameter = CfnParameter(self, &quot;Environment&quot;)is_prod = CfnCondition(self, &quot;IsProduction&quot;,    expression=Fn.condition_equals(&quot;Production&quot;, environment_parameter))# Configuration value that is a different string based on IsProductionstage = Fn.condition_if(is_prod.logical_id, &quot;Beta&quot;, &quot;Prod&quot;).to_string()# Make Bucket creation condition to IsProduction by accessing# and overriding the CloudFormation resourcebucket = s3.Bucket(self, &quot;Bucket&quot;)cfn_bucket = my_bucket.node.default_childcfn_bucket.cfn_options.condition = is_prod```### MappingsCloudFormation [mappings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html) are created and queried using the`CfnMappings` class:```pythonregion_table = CfnMapping(self, &quot;RegionTable&quot;,    mapping={        &quot;us-east-1&quot;: {            &quot;region_name&quot;: &quot;US East (N. Virginia)&quot;        },        &quot;us-east-2&quot;: {            &quot;region_name&quot;: &quot;US East (Ohio)&quot;        }    })region_table.find_in_map(Aws.REGION, &quot;regionName&quot;)```This will yield the following template:```yamlMappings:  RegionTable:    us-east-1:      regionName: US East (N. Virginia)    us-east-2:      regionName: US East (Ohio)```Mappings can also be synthesized &quot;lazily&quot;; lazy mappings will only render a &quot;Mappings&quot;section in the synthesized CloudFormation template if some `findInMap` call is unable toimmediately return a concrete value due to one or both of the keys being unresolved tokens(some value only available at deploy-time).For example, the following code will not produce anything in the &quot;Mappings&quot; section. Thecall to `findInMap` will be able to resolve the value during synthesis and simply return`'US East (Ohio)'`.```pythonregion_table = CfnMapping(self, &quot;RegionTable&quot;,    mapping={        &quot;us-east-1&quot;: {            &quot;region_name&quot;: &quot;US East (N. Virginia)&quot;        },        &quot;us-east-2&quot;: {            &quot;region_name&quot;: &quot;US East (Ohio)&quot;        }    },    lazy=True)region_table.find_in_map(&quot;us-east-2&quot;, &quot;regionName&quot;)```On the other hand, the following code will produce the &quot;Mappings&quot; section shown above,since the top-level key is an unresolved token. The call to `findInMap` will return a token that resolves to`{ &quot;Fn::FindInMap&quot;: [ &quot;RegionTable&quot;, { &quot;Ref&quot;: &quot;AWS::Region&quot; }, &quot;regionName&quot; ] }`.```python# region_table: CfnMappingregion_table.find_in_map(Aws.REGION, &quot;regionName&quot;)```### Dynamic ReferencesCloudFormation supports [dynamically resolving](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html) valuesfor SSM parameters (including secure strings) and Secrets Manager. Encoding suchreferences is done using the `CfnDynamicReference` class:```pythonCfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, &quot;secret-id:secret-string:json-key:version-stage:version-id&quot;)```### Template Options &amp; TransformCloudFormation templates support a number of options, including which Macros or[Transforms](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html) to use when deploying the stack. Those can beconfigured using the `stack.templateOptions` property:```pythonstack = Stack(app, &quot;StackName&quot;)stack.template_options.description = &quot;This will appear in the AWS console&quot;stack.template_options.transforms = [&quot;AWS::Serverless-2016-10-31&quot;]stack.template_options.metadata = {    &quot;metadata_key&quot;: &quot;MetadataValue&quot;}```### Emitting Raw ResourcesThe `CfnResource` class allows emitting arbitrary entries in the[Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html) section of the CloudFormation template.```pythonCfnResource(self, &quot;ResourceId&quot;,    type=&quot;AWS::S3::Bucket&quot;,    properties={        &quot;BucketName&quot;: &quot;bucket-name&quot;    })```As for any other resource, the logical ID in the CloudFormation template will begenerated by the AWS CDK, but the type and properties will be copied verbatim inthe synthesized template.### Including raw CloudFormation template fragmentsWhen migrating a CloudFormation stack to the AWS CDK, it can be useful toinclude fragments of an existing template verbatim in the synthesized template.This can be achieved using the `CfnInclude` class.```pythonCfnInclude(self, &quot;ID&quot;,    template={        &quot;Resources&quot;: {            &quot;Bucket&quot;: {                &quot;Type&quot;: &quot;AWS::S3::Bucket&quot;,                &quot;Properties&quot;: {                    &quot;BucketName&quot;: &quot;my-shiny-bucket&quot;                }            }        }    })```### Termination ProtectionYou can prevent a stack from being accidentally deleted by enabling terminationprotection on the stack. If a user attempts to delete a stack with terminationprotection enabled, the deletion fails and the stack--including its status--remainsunchanged. Enabling or disabling termination protection on a stack sets it for anynested stacks belonging to that stack as well. You can enable termination protectionon a stack by setting the `terminationProtection` prop to `true`.```pythonstack = Stack(app, &quot;StackName&quot;,    termination_protection=True)```By default, termination protection is disabled.### DescriptionYou can add a description of the stack in the same way as `StackProps`.```pythonstack = Stack(app, &quot;StackName&quot;,    description=&quot;This is a description.&quot;)```### CfnJson`CfnJson` allows you to postpone the resolution of a JSON blob fromdeployment-time. This is useful in cases where the CloudFormation JSON templatecannot express a certain value.A common example is to use `CfnJson` in order to render a JSON map which needsto use intrinsic functions in keys. Since JSON map keys must be strings, it isimpossible to use intrinsics in keys and `CfnJson` can help.The following example defines an IAM role which can only be assumed byprincipals that are tagged with a specific tag.```pythontag_param = CfnParameter(self, &quot;TagName&quot;)string_equals = CfnJson(self, &quot;ConditionJson&quot;,    value={        &quot;f&quot;aws:PrincipalTag/{tagParam.valueAsString}&quot;&quot;: True    })principal = iam.AccountRootPrincipal().with_conditions({    &quot;StringEquals&quot;: string_equals})iam.Role(self, &quot;MyRole&quot;, assumed_by=principal)```**Explanation**: since in this example we pass the tag name through a parameter, itcan only be resolved during deployment. The resolved value can be represented inthe template through a `{ &quot;Ref&quot;: &quot;TagName&quot; }`. However, since we want to usethis value inside a [`aws:PrincipalTag/TAG-NAME`](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-principaltag)IAM operator, we need it in the *key* of a `StringEquals` condition. JSON keys*must be* strings, so to circumvent this limitation, we use `CfnJson`to &quot;delay&quot; the rendition of this template section to deploy-time. This meansthat the value of `StringEquals` in the template will be `{ &quot;Fn::GetAtt&quot;: [ &quot;ConditionJson&quot;, &quot;Value&quot; ] }`, and will only &quot;expand&quot; to the operator we synthesized during deployment.### Stack Resource LimitWhen deploying to AWS CloudFormation, it needs to keep in check the amount of resources being added inside a Stack. Currently it's possible to check the limits in the [AWS CloudFormation quotas](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html) page.It's possible to synthesize the project with more Resources than the allowed (or even reduce the number of Resources).Set the context key `@aws-cdk/core:stackResourceLimit` with the proper value, being 0 for disable the limit of resources.## App Context[Context values](https://docs.aws.amazon.com/cdk/v2/guide/context.html) are key-value pairs that can be associated with an app, stack, or construct.One common use case for context is to use it for enabling/disabling [feature flags](https://docs.aws.amazon.com/cdk/v2/guide/featureflags.html). There are several placeswhere context can be specified. They are listed below in the order they are evaluated (items at thetop take precedence over those below).* The `node.setContext()` method* The `postCliContext` prop when you create an `App`* The CLI via the `--context` CLI argument* The `cdk.json` file via the `context` key:* The `cdk.context.json` file:* The `~/.cdk.json` file via the `context` key:* The `context` prop when you create an `App`### Examples of setting context```pythonApp(    context={        &quot;@aws-cdk/core:newStyleStackSynthesis&quot;: True    })``````pythonapp = App()app.node.set_context(&quot;@aws-cdk/core:newStyleStackSynthesis&quot;, True)``````pythonApp(    post_cli_context={        &quot;@aws-cdk/core:newStyleStackSynthesis&quot;: True    })``````consolecdk synth --context @aws-cdk/core:newStyleStackSynthesis=true```*cdk.json*```json{  &quot;context&quot;: {    &quot;@aws-cdk/core:newStyleStackSynthesis&quot;: true  }}```*cdk.context.json*```json{  &quot;@aws-cdk/core:newStyleStackSynthesis&quot;: true}```*~/.cdk.json*```json{  &quot;context&quot;: {    &quot;@aws-cdk/core:newStyleStackSynthesis&quot;: true  }}```## IAM Permissions BoundaryIt is possible to apply an [IAM permissions boundary](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html)to all roles within a specific construct scope. The most common use case wouldbe to apply a permissions boundary at the `Stage` level.```pythonprod_stage = Stage(app, &quot;ProdStage&quot;,    permissions_boundary=PermissionsBoundary.from_name(&quot;cdk-${Qualifier}-PermissionsBoundary&quot;))```Any IAM Roles or Users created within this Stage will have the defaultpermissions boundary attached.For more details see the [Permissions Boundary](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_iam-readme.html#permissions-boundaries) section in the IAM guide.## Policy ValidationIf you or your organization use (or would like to use) any policy validation tool, such as[CloudFormationGuard](https://docs.aws.amazon.com/cfn-guard/latest/ug/what-is-guard.html) or[OPA](https://www.openpolicyagent.org/), to define constraints on yourCloudFormation template, you can incorporate them into the CDK application.By using the appropriate plugin, you can make the CDK application check thegenerated CloudFormation templates against your policies immediately aftersynthesis. If there are any violations, the synthesis will fail and a reportwill be printed to the console or to a file (see below).&gt; **Note**&gt; This feature is considered experimental, and both the plugin API and the&gt; format of the validation report are subject to change in the future.### For application developersTo use one or more validation plugins in your application, use the`policyValidationBeta1` property of `Stage`:```python# globally for the entire app (an app is a stage)app = App(    policy_validation_beta1=[        # These hypothetical classes implement IPolicyValidationPluginBeta1:        ThirdPartyPluginX(),        ThirdPartyPluginY()    ])# only apply to a particular stageprod_stage = Stage(app, &quot;ProdStage&quot;,    policy_validation_beta1=[        ThirdPartyPluginX()    ])```Immediately after synthesis, all plugins registered this way will be invoked tovalidate all the templates generated in the scope you defined. In particular, ifyou register the templates in the `App` object, all templates will be subject tovalidation.&gt; **Warning**&gt; Other than modifying the cloud assembly, plugins can do anything that your CDK&gt; application can. They can read data from the filesystem, access the network&gt; etc. It's your responsibility as the consumer of a plugin to verify that it is&gt; secure to use.By default, the report will be printed in a human readable format. If you want areport in JSON format, enable it using the `@aws-cdk/core:validationReportJson`context passing it directly to the application:```pythonapp = App(    context={&quot;@aws-cdk/core:validationReportJson&quot;: True})```Alternatively, you can set this context key-value pair using the `cdk.json` or`cdk.context.json` files in your project directory (see[Runtime context](https://docs.aws.amazon.com/cdk/v2/guide/context.html)).If you choose the JSON format, the CDK will print the policy validation reportto a file called `policy-validation-report.json` in the cloud assemblydirectory. For the default, human-readable format, the report will be printed tothe standard output.### For plugin authorsThe communication protocol between the CDK core module and your policy tool isdefined by the `IPolicyValidationPluginBeta1` interface. To create a new plugin you mustwrite a class that implements this interface. There are two things you need toimplement: the plugin name (by overriding the `name` property), and the`validate()` method.The framework will call `validate()`, passing an `IPolicyValidationContextBeta1` object.The location of the templates to be validated is given by `templatePaths`. Theplugin should return an instance of `PolicyValidationPluginReportBeta1`. This objectrepresents the report that the user wil receive at the end of the synthesis.```python@jsii.implements(IPolicyValidationPluginBeta1)class MyPlugin:    def validate(self, context):        # First read the templates using context.templatePaths...        # ...then perform the validation, and then compose and return the report.        # Using hard-coded values here for better clarity:        return PolicyValidationPluginReportBeta1(            success=False,            violations=[PolicyViolationBeta1(                rule_name=&quot;CKV_AWS_117&quot;,                description=&quot;Ensure that AWS Lambda function is configured inside a VPC&quot;,                fix=&quot;https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1&quot;,                violating_resources=[PolicyViolatingResourceBeta1(                    resource_logical_id=&quot;MyFunction3BAA72D1&quot;,                    template_path=&quot;/home/johndoe/myapp/cdk.out/MyService.template.json&quot;,                    locations=[&quot;Properties/VpcConfig&quot;]                )]            )]        )```Note that plugins are not allowed to modify anything in the cloud assembly. Anyattempt to do so will result in synthesis failure.If your plugin depends on an external tool, keep in mind that some developers maynot have that tool installed in their workstations yet. To minimize friction, wehighly recommend that you provide some installation script along with yourplugin package, to automate the whole process. Better yet, run that script aspart of the installation of your package. With `npm`, for example, you can runadd it to the `postinstall`[script](https://docs.npmjs.com/cli/v9/using-npm/scripts) in the `package.json`file.&lt;!--END CORE DOCUMENTATION--&gt;</longdescription>
</pkgmetadata>