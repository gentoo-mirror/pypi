<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyAdaptiveCards*Author adaptive cards in pure python*[![PyPi](https://img.shields.io/pypi/v/pyadaptivecards.svg)](https://pypi.python.org/pypi/pyadaptivecards)[![ReadTheDocs](https://readthedocs.org/projects/pyadaptivecards/badge/?version=latest)](https://pyadaptivecards.readthedocs.io/en/latest/?badge=latest)[![PyUp](https://pyup.io/repos/github/CiscoSE/pyadaptivecards/shield.svg)](https://pyup.io/repos/github/CiscoSE/pyadaptivecards/)---## Introduction [Adaptive Cards](https://adaptivecards.io/) are a great way to extend your bot interactions. However, writing the JSON required to specify the card layout by hand can be cumbersome and error prone. And while using a [designer](https://adaptivecards.io/designer/) is a good way to manually create cards this does not cover cards that are generated by code. PyAdaptiveCards allows you to author cards in native python without ever touching the underlying json. A code sample says more then a thousand words so the following code snippet ...```pythonfrom pyadaptivecards.card import AdaptiveCardfrom pyadaptivecards.inputs import Text, Numberfrom pyadaptivecards.components import TextBlockfrom pyadaptivecards.actions import Submitgreeting = TextBlock(&quot;Hey hello there! I am a adaptive card&quot;)first_name = Text('first_name', placeholder=&quot;First Name&quot;)age = Number('age', placeholder=&quot;Age&quot;)submit = Submit(title=&quot;Send me!&quot;)card = AdaptiveCard(body=[greeting, first_name, age], actions=[submit])card_json = card.to_json(pretty=True)print(card_json)```... produces this json ...```json{    &quot;$schema&quot;: &quot;http://adaptivecards.io/schemas/adaptive-card.json&quot;,    &quot;actions&quot;: [        {            &quot;title&quot;: &quot;Send me!&quot;,            &quot;type&quot;: &quot;Action.Submit&quot;        }    ],    &quot;body&quot;: [        {            &quot;text&quot;: &quot;Hey hello there! I am a adaptive card&quot;,            &quot;type&quot;: &quot;TextBlock&quot;        },        {            &quot;id&quot;: &quot;first_name&quot;,            &quot;placeholder&quot;: &quot;First name&quot;,            &quot;type&quot;: &quot;Input.Text&quot;        },        {            &quot;id&quot;: &quot;age&quot;,            &quot;placeholder&quot;: &quot;Age&quot;,            &quot;type&quot;: &quot;Input.Number&quot;        }    ],    &quot;type&quot;: &quot;AdaptiveCard&quot;,    &quot;version&quot;: &quot;1.1&quot;}```... which looks like this in [Webex Teams](https://teams.webex.com) ...![screenshot of card in webex teams](cards_sample.png)## Usage with Webex TeamsBelow is an example how to use pyadaptivecards with Webex Teams. ### Using raw requests ```pythonimport requests import jsonfrom pyadaptivecards.card import AdaptiveCardfrom pyadaptivecards.inputs import Text, Numberfrom pyadaptivecards.components import TextBlockfrom pyadaptivecards.actions import Submitauth_token = &quot;&lt;INSERT_AUTH_TOKEN_HERE&gt;&quot;headers = {    &quot;Authorization&quot;: &quot;Bearer &quot; + auth_token}# Create cardgreeting = TextBlock(&quot;Hey hello there! I am a adaptive card&quot;)first_name = Text('first_name', placeholder=&quot;First Name&quot;)age = Number('age', placeholder=&quot;Age&quot;)submit = Submit(title=&quot;Send me!&quot;)card = AdaptiveCard(body=[greeting, first_name, age], actions=[submit])# Create attachmentattachment = {    &quot;contentType&quot;: &quot;application/vnd.microsoft.card.adaptive&quot;,    &quot;content&quot;: card.to_dict()}# Create payload for the webrequestpayload = {    &quot;roomId&quot;: &quot;&lt;INSERT_YOUR_ROOM_HERE&gt;&quot;,    &quot;attachments&quot; : [attachment],    &quot;text&quot;: &quot;Fallback Text&quot;}response = requests.post(&quot;https://api.ciscospark.com/v1/messages&quot;, headers=headers, data=payload)```### Using the webexteamssdkThe [webexteamssdk](https://github.com/CiscoDevNet/webexteamssdk) provides a great wrapper around the Webex Teams API that can be used to interact with the API in native python. The following example shows how to use pyadaptivecards with the newly implemented attachments option. ```pythonfrom pyadaptivecards.card import AdaptiveCardfrom pyadaptivecards.inputs import Text, Numberfrom pyadaptivecards.components import TextBlockfrom pyadaptivecards.actions import Submitfrom webexteamssdk import WebexTeamsAPIgreeting = TextBlock(&quot;Hey hello there! I am a adaptive card&quot;)first_name = Text('first_name', placeholder=&quot;First Name&quot;)age = Number('age', placeholder=&quot;Age&quot;)submit = Submit(title=&quot;Send me!&quot;)card = AdaptiveCard(body=[greeting, first_name, age], actions=[submit])# Create a webex teams api connectionapi = WebexTeamsAPI()room_id = &quot;&lt;INSERT_ROOM_ID_HERE&gt;&quot;# Create a dict that will contain the card as well as some meta informationattachment = {    &quot;contentType&quot;: &quot;application/vnd.microsoft.card.adaptive&quot;,    &quot;content&quot;: card.to_dict(),}api.messages.create(roomId=room_id, text=&quot;Fallback&quot;, attachments=[attachment])```## Features- Supports all components, options and features of adaptive cards version 1.1- Create adaptive cards from pure python## InstallationYou can install PyAdaptiveCards using pip by issuing```bash$ pip install pyadaptivecards```For more information on how to use this package please check the project documentation at https://pyadaptivecards.readthedocs.io.## Authors &amp; Maintainers- Marcel Neidinger &lt;mneiding@cisco.com&gt;## CreditsThe following resources were influential in the creation of this project:- This package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and a derivative of the[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template.## LicenseThis project is licensed to you under the terms of the [Cisco SampleCode License](./LICENSE).</longdescription>
</pkgmetadata>