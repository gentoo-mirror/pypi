<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸŒŽ aiowatttime: an asyncio-based, Python3 library for WattTime emissions data[![CI](https://github.com/bachya/aiowatttime/workflows/CI/badge.svg)](https://github.com/bachya/aiowatttime/actions)[![PyPi](https://img.shields.io/pypi/v/aiowatttime.svg)](https://pypi.python.org/pypi/aiowatttime)[![Version](https://img.shields.io/pypi/pyversions/aiowatttime.svg)](https://pypi.python.org/pypi/aiowatttime)[![License](https://img.shields.io/pypi/l/aiowatttime.svg)](https://github.com/bachya/aiowatttime/blob/main/LICENSE)[![Code Coverage](https://codecov.io/gh/bachya/aiowatttime/branch/dev/graph/badge.svg)](https://codecov.io/gh/bachya/aiowatttime)[![Maintainability](https://api.codeclimate.com/v1/badges/781e64940b1302ae9ac3/maintainability)](https://codeclimate.com/github/bachya/aiowatttime/maintainability)[![Say Thanks](https://img.shields.io/badge/SayThanks-!-1EAEDB.svg)](https://saythanks.io/to/bachya)&lt;a href=&quot;https://www.buymeacoffee.com/bachya1208P&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; height=&quot;41&quot; width=&quot;174&quot;&gt;&lt;/a&gt;`aiowatttime` is a Python 3, asyncio-friendly library for interacting with[WattTime](https://www.watttime.org) emissions data.- [Python Versions](#python-versions)- [Installation](#installation)- [Usage](#usage)- [Contributing](#contributing)# Python Versions`aiowatttime` is currently supported on:- Python 3.9- Python 3.10- Python 3.11# Installation```bashpip install aiowatttime```# Usage## Getting an API KeySimply clone this repo and run the included interactive script:```bash$ script/register```Note that WattTime offers three plans: Visitors, Analyst, and Pro. The type you usewill determine which elements of this library are available to use. You can read moredetails here: https://www.watttime.org/get-the-data/data-plans/## Creating and Using a ClientThe `Client` is the primary method of interacting with the API:```pythonimport asynciofrom aiowatttime import Clientasync def main() -&gt; None:    client = await Client.login(&quot;&lt;USERNAME&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;)    # ...asyncio.run(main())```By default, the library creates a new connection to the API with each coroutine. Ifyou are calling a large number of coroutines (or merely want to squeeze out every second of runtime savings possible), an[`aiohttp`](https://github.com/aio-libs/aiohttp) `ClientSession` can be used for connectionpooling:```pythonimport asynciofrom aiohttp import ClientSessionfrom aiowatttime import Clientasync def main() -&gt; None:    async with ClientSession() as session:        client = await Client.login(&quot;&lt;USERNAME&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;, session=session)        # ...asyncio.run(main())```## Programmatically Requesting a Password Reset```pythonawait client.async_request_password_reset()```## Getting Emissions Data### Grid RegionIt may be useful to first get the &quot;grid region&quot; (i.e., geographical info) for the areayou care about:```pythonawait client.emissions.async_get_grid_region(&quot;&lt;LATITUDE&gt;&quot;, &quot;&lt;LONGITUDE&gt;&quot;)# &gt;&gt;&gt; { &quot;id&quot;: 263, &quot;abbrev&quot;: &quot;PJM_NJ&quot;, &quot;name&quot;: &quot;PJM New Jersey&quot; }```Getting emissions data will require either your latitude/longitude _or_ the &quot;balancingauthority abbreviation&quot; (`PJM_NJ` in the example above).### Realtime Data```pythonawait client.emissions.async_get_realtime_emissions(&quot;&lt;LATITUDE&gt;&quot;, &quot;&lt;LONGITUDE&gt;&quot;)# &gt;&gt;&gt; { &quot;freq&quot;: &quot;300&quot;, &quot;ba&quot;: &quot;CAISO_NORTH&quot;, &quot;percent&quot;: &quot;53&quot;, &quot;moer&quot;: &quot;850.743982&quot;, ... }```### Forecasted Data```pythonawait client.emissions.async_get_forecasted_emissions(&quot;&lt;BA_ABBREVATION&gt;&quot;)# &gt;&gt;&gt; [ { &quot;generated_at&quot;: &quot;2021-08-05T09:05:00+00:00&quot;, &quot;forecast&quot;: [...] } ]```You can also get the forecasted data using a specific start and end `datetime.datetime`:```pythonfrom datetime import datetimeawait client.emissions.async_get_forecasted_emissions(    &quot;&lt;BA_ABBREVATION&gt;&quot;,    start_datetime=datetime(2021, 1, 1),    end_datetime=datetime(2021, 2, 1),)# &gt;&gt;&gt; [ { &quot;generated_at&quot;: &quot;2021-08-05T09:05:00+00:00&quot;, &quot;forecast&quot;: [...] } ]```### Historical Data```pythonawait client.emissions.async_get_historical_emissions(&quot;&lt;LATITUDE&gt;&quot;, &quot;&lt;LONGITUDE&gt;&quot;)# &gt;&gt;&gt; [ { &quot;point_time&quot;: &quot;2019-02-21T00:15:00.000Z&quot;, &quot;value&quot;: 844, ... } ]```You can also get the historical data using a specific start and end `datetime.datetime`:```pythonfrom datetime import datetimeawait client.emissions.async_get_historical_emissions(    &quot;&lt;LATITUDE&gt;&quot;,    &quot;&lt;LONGITUDE&gt;&quot;,    start_datetime=datetime(2021, 1, 1),    end_datetime=datetime(2021, 2, 1),)# &gt;&gt;&gt; [ { &quot;point_time&quot;: &quot;2019-02-21T00:15:00.000Z&quot;, &quot;value&quot;: 844, ... } ]```## Retry LogicBy default, `aiowatttime` will handle expired access tokens for you. When a token expires,the library will attempt the following sequence 3 times:- Request a new token- Pause for 1 second (to be respectful of the API rate limiting)- Execute the original request againBoth the number of retries and the delay between retries can be configured wheninstantiating a client:```pythonimport asynciofrom aiohttp import ClientSessionfrom aiowatttime import Clientasync def main() -&gt; None:    async with ClientSession() as session:        client = await Client.async_login(            &quot;user&quot;,            &quot;password&quot;,            session=session,            # Make 7 retry attempts:            request_retries=7,            # Delay 4 seconds between attempts:            request_retry_delay=4,        )asyncio.run(main())```As always, an invalid username/password combination will immediately throw an exception.## Custom LoggerBy default, `aiowatttime` provides its own logger. If you should wish to use your own, youcan pass it to the client during instantiation:```pythonimport asyncioimport loggingfrom aiohttp import ClientSessionfrom aiowatttime import ClientCUSTOM_LOGGER = logging.getLogger(&quot;my_custom_logger&quot;)async def main() -&gt; None:    async with ClientSession() as session:        client = await Client.async_login(            &quot;user&quot;,            &quot;password&quot;,            session=session,            logger=logger,        )asyncio.run(main())```# Contributing1. [Check for open features/bugs](https://github.com/bachya/aiowatttime/issues)   or [initiate a discussion on one](https://github.com/bachya/aiowatttime/issues/new).2. [Fork the repository](https://github.com/bachya/aiowatttime/fork).3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`4. (_optional, but highly recommended_) Enter the virtual environment: `source ./venv/bin/activate`5. Install the dev environment: `script/setup`6. Code your new feature or bug fix.7. Write tests that cover your new functionality.8. Run tests and ensure 100% code coverage: `poetry run pytest --cov aiowatttime tests`9. Update `README.md` with any new documentation.10. Add yourself to `AUTHORS.md`.11. Submit a pull request!</longdescription>
</pkgmetadata>