<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Tribool: Three-Valued Logic===========================`Tribool &lt;http://www.grantjenks.com/docs/tribool/&gt;`_ is an Apache2 licensedPython module that implements three-valued logic.Suppose for a moment that you're attempting to store a value across a networkconnection. You begin with a simple protocol in which the server stores thereceived value and then sends an acknowledgement to the client.  In thisdesign, the client experiences a delay between when the request is sent and theacknowledgement is received. In that delay, it is impossible for the client toknow whether the value has been committed on the server.  In such cases, it'suseful to describe the commit state of the server from the client's perspectiveas True, False, or Indeterminate.Another example occurs in database systems. Consider a record that containsa boolean field. Such a field may only be either True or False. But we wantto support the notion of committing a partial record in the case that therecord is large or the client does not have all relevant information. In thisscenario, we wish to commit neither True nor False as the value is currentlyUnknown.The Python Tribool module was designed for these cases by describing a logicaldata type that supports three values: True, False, and Indeterminate. The thirdvalue is best thought of as a state being either True or False. Given thesethree values it's possible to define truth tables over the logical operators`and`, `or` and `not` and to define equality and inequality relationships.Features--------- Pure-Python (easy to hack with)- Fully Documented- 100% Test Coverage- Pragmatic Design (mostly a few truth tables and thread-safe singleton pattern)- Developed on Python 2.7- Tested on CPython 2.6, 2.7, 3.2, 3.3, 3.4 and PyPy 2.5+, PyPy3 2.4+Quickstart----------Installing Tribool is simple with`pip &lt;http://www.pip-installer.org/&gt;`_::  $ pip install triboolYou can access documentation in the interpreter with Python's built-in helpfunction::  &gt;&gt;&gt; from tribool import Tribool  &gt;&gt;&gt; help(Tribool)Tutorial--------A Python Tribool may have any of three values::  &gt;&gt;&gt; from tribool import Tribool  &gt;&gt;&gt; Tribool(True)          # True  &gt;&gt;&gt; Tribool('False')       # False  &gt;&gt;&gt; Tribool(Tribool(None)) # IndeterminateThose three values correspond to True, False and Indeterminate. To view thatvalue, convert the Tribool to a string::  &gt;&gt;&gt; print Tribool(True), Tribool(False), Tribool(None)  True False IndeterminateThe logical operators are also defined over these values. For example, theresult of negation::  &gt;&gt;&gt; for value in (True, False, None):  ...     print '~', Tribool(value), '=', ~Tribool(value)  ~ True = False  ~ False = True  ~ Indeterminate = IndeterminateLikewise for `and`, `or`, and `xor` the operators involving only True andFalse are unchanged. And mostly those involving Indeterminate result inIndeterminate. For example::  &gt;&gt;&gt; True &amp; Tribool(None)  # True and Indeterminate = Indeterminate  Tribool(None)  &gt;&gt;&gt; False | Tribool(None) # False or Indeterminate = Indeterminate  Tribool(None)  &gt;&gt;&gt; None ^ Tribool(None)  # Indeterminate xor Indeterminate = Indeterminate  Tribool(None)But there are a couple cases where this is not so::  &gt;&gt;&gt; True | Tribool(None)  # True or Indeterminate = True  Tribool(True)  &gt;&gt;&gt; False &amp; Tribool(None) # False and Indeterminate = False  Tribool(False)Notice that the bitwise-operators, `&amp;|^~`, have been used rather than theshort-circuiting `and`, `or`, `not`. Python supports short-circuiting operatorsonly for boolean values and you cannot implicitly convert a Tribool to aboolean.  An attempt to do so will raise a `ValueError`::  &gt;&gt;&gt; not Tribool(True)  Traceback (most recent call last):    ...  ValueError: Cannot implicitly convert Tribool to bool (use the bitwise  (&amp;, |, ^, ~) operators or insert a cast and use Tribool(...).value)For this reason, you cannot directly use a Tribool in an `if` statement::  &gt;&gt;&gt; if Tribool(True): pass  Traceback (most recent call last):    ...  ValueError: Cannot implicitly convert Tribool to bool ...To test the value of a Tribool, use the `value` property::  &gt;&gt;&gt; print Tribool(True).value, Tribool(False).value, Tribool(None).value  True False None  &gt;&gt;&gt; (Tribool(None) | True).value is True  True  &gt;&gt;&gt; ready, committed = Tribool(True), Tribool(None)  &gt;&gt;&gt; if (ready &amp; committed).value is not True:  ...     print 'Still waiting.'  Still waiting.When the Tribool value is Indeterminate, the `value` property will be `None`.For example::  &gt;&gt;&gt; status = Tribool(None)  &gt;&gt;&gt; # Do something that will update status.  &gt;&gt;&gt; while status.value is None:  ...     time.sleep(1) # Busy-wait.  &gt;&gt;&gt; if status.value is True:  ...     print 'Success'  ... else:  ...     print 'Error'Tribools also work with equality/inequality relationships. Comparing Triboolsreturns a Tribool because the result may be ambiguous. For the less-than andgreater-than relationships, True corresponds to 1 and False to 0 just as withboolean data types. The Indeterminate value is either 0 or 1 which has someunusual implications. Some example inequalities::  &gt;&gt;&gt; Tribool(False) &lt; Tribool(True)  Tribool(True)  &gt;&gt;&gt; Tribool(False) == Tribool(False)  Tribool(True)  &gt;&gt;&gt; Tribool(False) &gt; Tribool(True)  Tribool(False)The unusual implication of the Indeterminate value is that it is not equalto itself::  &gt;&gt;&gt; print Tribool(True) &gt;= Tribool(None)  True  &gt;&gt;&gt; print Tribool(False) &lt; Tribool(None)  Indeterminate  &gt;&gt;&gt; print Tribool(None) == Tribool(None)  IndeterminateWhen an object is not equal to itself, strange things can happen. FortunatelyPython defines two notions of equality. The first is defined by the `is`relationship and may not be overriden. The second is defined by the `__eq__`method. To behave as value types, Tribool objects are singletons. Threreforetwo Tribools with the same value will have matching `id` values. For example::  &gt;&gt;&gt; (id(Tribool(True)), id(Tribool(True)), id(Tribool(True)))  (4426760848, 4426760848, 4426760848)  &gt;&gt;&gt; (id(Tribool(None)), id(Tribool(None)), id(Tribool(None)))  (4426719568, 4426719568, 4426719568)This is accomplished by overriding the `__new__` constructor and implementinga thread-safe singleton pattern. As singletons, Tribool objects are immutableand comparable using the `is` operator. Judicious use often results in codethat is more readable::  &gt;&gt;&gt; Succeeded, TryAgain = Tribool(True), Tribool(None)  &gt;&gt;&gt; status = Tribool(None)  &gt;&gt;&gt; while status is TryAgain:  ...     status = try_something()  &gt;&gt;&gt; if status is Succeeded:  ...     print 'Success!'Tribool objects are also hashable and work inside `dict` and map-like types::  &gt;&gt;&gt; display = {  ...     Tribool(True): 'Success',  ...     Tribool(False): 'Error',  ...     Tribool(None): 'Try Again',  ... }  &gt;&gt;&gt; print display[Tribool(None)]  Try AgainA surprising result occurs however with containers. When using the `in`operator, objects are tested for membership using equality. But this occursin several steps, the first of which is using the `is` operator followed bythe `__eq__` method. In case the `__eq__` method fails to return a boolean-typed value, an implicit conversion occurs which Tribool does not permit.For example::  &gt;&gt;&gt; Success, Error, Unknown = map(Tribool, (True, False, None))  &gt;&gt;&gt; Success in [Success, Error, Unknown] # Works!  True  &gt;&gt;&gt; Error in [Success, Error, Unknown]   # Fails  Traceback (most recent call last):    ...  ValueError: Cannot implicitly convert Tribool to bool ...The latter attempt fails because `Error is Success` returns False and so`Error == Success` is tried. That returns `Tribool(False)` which does nothave type `bool` and so an implicit conversion occurs. To achieve theaffect of the `in` operator use the `any` built-in and a generator expressionlike so::  &gt;&gt;&gt; statuses = [Success, Success, Unknown, Error]  &gt;&gt;&gt; any(status is Error for status in statuses)  TrueTo obey the singleton pattern, Tribool also implements the `__copy__` and`__deepcopy__` methods as part of the `copy` module protocol. Pickling isanother method of copying objects and so `__reduce__` is implemented as part ofthe `pickle` protocol. Note also that Tribool inherits directly from `tuple` toprevent mutation of its internal state.The Python Tribool module has many uses but it was originally designed tosupport the notion of `three-valued logic as found in SQL&lt;http://en.wikipedia.org/wiki/Null_(SQL)&gt;`_. SQL defines similar rules forits Null value type in logical expressions. `Django's NullBooleanField&lt;https://docs.djangoproject.com/en/stable/ref/models/fields/#nullbooleanfield&gt;`_is an example where these ideas intersect.Some readers will be familiar with `Boost.Tribool&lt;http://www.boost.org/doc/libs/release/doc/html/tribool.html&gt;`_, animplementation of the Tribool datatype in C++. While the semantics of bothpackages are the same, the design of the Boost implementation differs a greatdeal. In particular, Boost defines a new `indeterminate` keyword rather thanusing the `null` value in C++. An `Indeterminate` object was considered in thedesign of this module but discarded in favor of Python's built-in `None`.Reference and Indices---------------------* `Tribool Documentation`_* `Tribool at PyPI`_* `Tribool at GitHub`_* `Tribool Issue Tracker`_.. _`Tribool Documentation`: http://www.grantjenks.com/docs/tribool/.. _`Tribool at PyPI`: https://pypi.python.org/pypi/tribool/.. _`Tribool at GitHub`: https://github.com/grantjenks/python_tribool/.. _`Tribool Issue Tracker`: https://github.com/grantjenks/python_tribool/issues/License-------Copyright 2015 Grant JenksLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.</longdescription>
</pkgmetadata>