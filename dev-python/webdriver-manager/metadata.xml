<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Webdriver Manager for Python[![Tests](https://github.com/SergeyPirogov/webdriver_manager/actions/workflows/test.yml/badge.svg)](https://github.com/SergeyPirogov/webdriver_manager/actions/workflows/test.yml)[![PyPI](https://img.shields.io/pypi/v/webdriver_manager.svg)](https://pypi.org/project/webdriver-manager)[![Supported Python Versions](https://img.shields.io/pypi/pyversions/webdriver_manager.svg)](https://pypi.org/project/webdriver-manager/)[![codecov](https://codecov.io/gh/SergeyPirogov/webdriver_manager/branch/master/graph/badge.svg)](https://codecov.io/gh/SergeyPirogov/webdriver_manager)## Support the library on [Patreon](https://www.patreon.com/automation_remarks)The main idea is to simplify management of binary drivers for different browsers.For now support:- [ChromeDriver](#use-with-chrome)- [EdgeChromiumDriver](#use-with-edge)- [GeckoDriver](#use-with-firefox)- [IEDriver](#use-with-ie)- [OperaDriver](#use-with-opera)Compatible with Selenium 4.x and below.Before:You need to download the chromedriver binary, unzip it somewhere on your PC and set the path to this driver like this:```pythonfrom selenium import webdriverdriver = webdriver.Chrome('/home/user/drivers/chromedriver')```Itâ€™s boring!!! Moreover, every time a new version of the driver is released, you need to repeat all these steps again and again.With webdriver manager, you just need to do two simple steps:#### Install manager:```bashpip install webdriver-manager```#### Use with Chrome```python# selenium 3from selenium import webdriverfrom webdriver_manager.chrome import ChromeDriverManagerdriver = webdriver.Chrome(ChromeDriverManager().install())``````python# selenium 4from selenium import webdriverfrom selenium.webdriver.chrome.service import Service as ChromeServicefrom webdriver_manager.chrome import ChromeDriverManagerdriver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))```#### Use with Chromium```python# selenium 3from selenium import webdriverfrom webdriver_manager.chrome import ChromeDriverManagerfrom webdriver_manager.core.utils import ChromeTypedriver = webdriver.Chrome(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install())``````python# selenium 4from selenium import webdriverfrom selenium.webdriver.chrome.service import Service as ChromiumServicefrom webdriver_manager.chrome import ChromeDriverManagerfrom webdriver_manager.core.utils import ChromeTypedriver = webdriver.Chrome(service=ChromiumService(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()))```#### Use with Brave```python# selenium 3from selenium import webdriverfrom webdriver_manager.chrome import ChromeDriverManagerfrom webdriver_manager.core.utils import ChromeTypedriver = webdriver.Chrome(ChromeDriverManager(chrome_type=ChromeType.BRAVE).install())``````python# selenium 4from selenium import webdriverfrom selenium.webdriver.chrome.service import Service as BraveServicefrom webdriver_manager.chrome import ChromeDriverManagerfrom webdriver_manager.core.utils import ChromeTypedriver = webdriver.Chrome(service=BraveService(ChromeDriverManager(chrome_type=ChromeType.BRAVE).install()))```#### Use with Edge```python# selenium 3from selenium import webdriverfrom webdriver_manager.microsoft import EdgeChromiumDriverManagerdriver = webdriver.Edge(EdgeChromiumDriverManager().install())``````python# selenium 4from selenium import webdriverfrom selenium.webdriver.edge.service import Service as EdgeServicefrom webdriver_manager.microsoft import EdgeChromiumDriverManagerdriver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()))```#### Use with Firefox```python# selenium 3from selenium import webdriverfrom webdriver_manager.firefox import GeckoDriverManagerdriver = webdriver.Firefox(executable_path=GeckoDriverManager().install())``````python# selenium 4from selenium import webdriverfrom selenium.webdriver.firefox.service import Service as FirefoxServicefrom webdriver_manager.firefox import GeckoDriverManagerdriver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))```#### Use with IE```python# selenium 3from selenium import webdriverfrom webdriver_manager.microsoft import IEDriverManagerdriver = webdriver.Ie(IEDriverManager().install())``````python# selenium 4from selenium import webdriverfrom selenium.webdriver.ie.service import Service as IEServicefrom webdriver_manager.microsoft import IEDriverManagerdriver = webdriver.Ie(service=IEService(IEDriverManager().install()))```#### Use with Opera```python# selenium 3from selenium import webdriverfrom selenium.webdriver.chrome import servicefrom webdriver_manager.opera import OperaDriverManagerwebdriver_service = service.Service(OperaDriverManager().install())webdriver_service.start()driver = webdriver.Remote(webdriver_service.service_url, webdriver.DesiredCapabilities.OPERA)``````python# selenium 4from selenium import webdriverfrom selenium.webdriver.chrome import servicefrom webdriver_manager.opera import OperaDriverManagerwebdriver_service = service.Service(OperaDriverManager().install())webdriver_service.start()options = webdriver.ChromeOptions()options.add_experimental_option('w3c', True)driver = webdriver.Remote(webdriver_service.service_url, options=options)```If the Opera browser is installed in a location other than `C:/Program Files` or `C:/Program Files (x86)` on windowsand `/usr/bin/opera` for all unix variants and mac, then use the below code,```pythonoptions = webdriver.ChromeOptions()options.binary_location = &quot;path/to/opera.exe&quot;driver = webdriver.Remote(webdriver_service.service_url, options=options)```#### Get browser version from pathTo get the version of the browser from the executable of the browser itself:```pythonfrom webdriver_manager.core.utils import read_version_from_cmd, PATTERNversion = read_version_from_cmd(&quot;/usr/bin/firefox-bin --version&quot;, PATTERN[&quot;firefox&quot;])driver_binary = FirefoxDriverManager(version=version).install()```#### Custom Cache and File manager```pythoncache_manager = DriverCacheManager(file_manager=FileManager())manager = ChromeDriverManager(cache_manager=cache_manager)```## Configuration**webdriver_manager** has several configuration variables you can be interested in.Any variable can be set using either .env file or via python directly### `GH_TOKEN`**webdriver_manager** downloading some webdrivers from their official GitHub repositories but GitHub has [limitations](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting) like 60 requests per hour for unauthenticated users.In case not to face an error related to github credentials, you need to [create](https://help.github.com/articles/creating-an-access-token-for-command-line-use) github token and place it into your environment: (\*)Example:```bashexport GH_TOKEN = &quot;asdasdasdasd&quot;```(\*) access_token required to work with GitHub API [more info](https://help.github.com/articles/creating-an-access-token-for-command-line-use/).There is also possibility to set same variable via ENV VARIABLES, example:```pythonimport osos.environ['GH_TOKEN'] = &quot;asdasdasdasd&quot;```### `WDM_LOG`Turn off webdriver-manager logs use:```pythonimport loggingimport osos.environ['WDM_LOG'] = str(logging.NOTSET)```### `WDM_LOCAL`By default, all driver binaries are saved to user.home/.wdm folder. You can override this setting and save binaries to project.root/.wdm.```pythonimport osos.environ['WDM_LOCAL'] = '1'```### `WDM_SSL_VERIFY`SSL verification can be disabled for downloading webdriver binaries in case when you have troubles with SSL Certificates or SSL Certificate Chain. Just set the environment variable `WDM_SSL_VERIFY` to `&quot;0&quot;`.```pythonimport osos.environ['WDM_SSL_VERIFY'] = '0'```### `path`Set the directory where you want to download and save the webdriver. You can use relative and absolute paths.```pythonfrom webdriver_manager.chrome import ChromeDriverManagerChromeDriverManager(path = r&quot;.\\Drivers&quot;).install()```### `version`Specify the version of webdriver you need. And webdriver-manager will download it from sources for your os.```pythonfrom webdriver_manager.chrome import ChromeDriverManagerChromeDriverManager(version=&quot;2.26&quot;).install()```### `cache_valid_range`Driver cache by default is valid for 1 day. You are able to change this value using constructor parameter:```pythonfrom webdriver_manager.chrome import ChromeDriverManagerChromeDriverManager(&quot;2.26&quot;, cache_valid_range=1).install()```---### Custom LoggerIf you need to use a custom logger, you can create a logger and set it with `set_logger()`.```pythonimport loggingfrom webdriver_manager.core.logger import set_loggerlogger = logging.getLogger(&quot;custom_logger&quot;)logger.setLevel(logging.DEBUG)logger.addHandler(logging.StreamHandler())logger.addHandler(logging.FileHandler(&quot;custom.log&quot;))set_logger(logger)```---### Custom HTTP ClientIf you need to add custom HTTP logic like session or proxy you can define your custom HttpClient implementation.```pythonimport osimport requestsfrom requests import Responsefrom webdriver_manager.chrome import ChromeDriverManagerfrom webdriver_manager.core.download_manager import WDMDownloadManagerfrom webdriver_manager.core.http import HttpClientfrom webdriver_manager.core.logger import logclass CustomHttpClient(HttpClient):    def get(self, url, params=None, **kwargs) -&gt; Response:        &quot;&quot;&quot;        Add you own logic here like session or proxy etc.        &quot;&quot;&quot;        log(&quot;The call will be done with custom HTTP client&quot;)        return requests.get(url, params, **kwargs)def test_can_get_chrome_driver_with_custom_http_client():    http_client = CustomHttpClient()    download_manager = WDMDownloadManager(http_client)    path = ChromeDriverManager(download_manager=download_manager).install()    assert os.path.exists(path)```---This will make your test automation more elegant and robust!Cheers</longdescription>
</pkgmetadata>