<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CVSSlib ![Main workflow](https://github.com/orf/cvsslib/workflows/Tests/badge.svg)A Python 3 library for calculating CVSS v2, CVSS v3 and CVSS v3.1 vectors, with tests. Examples on how to usethe library is shown below, and there is some documentation on the internals within the `docs` directory. The library is designed to be completely extendable, so it is possible to implement your own custom scoring systems (or those of your clients)and have it work with the same API, and with the same bells and whistles.**Python 3 only**## APIIt's pretty simple to use. `cvsslib` has a `cvss2`, `cvss3` and `cvss31` sub modules that contains all of the enumsand calculation code. There are also some functions to manipulate vectors that take these cvss modulesas arguments. E.G:```pythonfrom cvsslib import cvss2, cvss31, calculate_vectorvector_v2 = &quot;AV:L/AC:M/Au:S/C:N/I:P/A:C/E:U/RL:OF/RC:UR/CDP:N/TD:L/CR:H/IR:H/AR:H&quot;calculate_vector(vector_v2, cvss2)&gt;&gt; (5, 3.5, 1.2)vector_v3 = &quot;CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:N/A:H/MPR:N&quot;calculate_vector(vector_v3, cvss31)&gt;&gt; (5.8, 5.8, 7.1)```You can access every CVSS enum through the `cvss2`, `cvss3` or `cvss31` modules:```pythonfrom cvsslib import cvss2# In this case doing from 'cvsslib.cvss2.enums import *' might be less verbose.value = cvss2.ReportConfidence.CONFIRMEDif value != cvss2.ReportConfidence.NOT_DEFINED:    do_something()```          There are some powerful mixin functions if you need a class with CVSS members. These functionstake a cvss version and return a base class you can inherit from. This class hassome utility functions like `to_vector()` and `from_vector()` you can use.```pythonfrom cvsslib import cvss3, class_mixinBaseClass = class_mixin(cvss3)  # Can pass cvss2 module insteadclass SomeObject(BaseClass):    def print_stats(self):        for item, value in self.enums:            print(&quot;{0} is {1}&quot;.format(item, value) state = SomeObject()print(&quot;\n&quot;.join(state.debug()))print(state.calculate())state.from_vector(&quot;CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:N/A:H/MPR:N&quot;)print(&quot;Vector: &quot; + state.to_vector())# Access members:if state.report_confidence == ReportConfidence.NOT_DEFINED:    do_something()```It also supports Django models. Requires the `django-enumfields` package.```pythonfrom cvsslib.contrib.django_model import django_mixinfrom cvsslib import cvss2from django.db import modelsCVSSBase = django_mixin(cvss2)class CVSSModel(models.Model, metaclass=CVSSBase)    pass    # CVSSModel now has lots of enum you can usex = CVSSModel()x.save()x.exploitability```If you want it to work with django Migrations you need to give an attribute name to the `django_mixin` function. Thisshould match the attribute name it is being assigned to:```pythonCVSSBase = django_mixin(cvss2, attr_name=&quot;CVSSBase&quot;)``` And there is a command line tool available: ```python&gt; cvss CVSS:3.0/AV:L/AC:H/PR:H/UI:N/S:C/C:N/I:H/A:N/E:P/RL:U/RC:U/CR:H/IR:L/AR:H/MAV:L/MUI:R/MS:C/MC:N/MI:L/MA:NBase Score:     5.3Temporal:       4.6Environment:    1.3``` ## Custom Scoring SystemsCreating a new scoring system is very simple. First create a Python file with the correct name, e.g `super_scores.py`. Next create some enums with the correct values for your system: ```python from cvsslib.base_enum import BaseEnum   class Risk(BaseEnum):     &quot;&quot;&quot;     Vector: S     &quot;&quot;&quot;     HIGH = 1     MEDIUM = 2     LOW = 3      class Difficulty(BaseEnum):     &quot;&quot;&quot;     Vector: D     &quot;&quot;&quot;     DIFFICULT = 1     MODERATE = 2     EASY = 3``` And lastly add a `calculate` function in the module that accepts some vector values and returns a result of some kind:```pythondef calculate(difficulty: Difficulty, risk: Risk):   if difficulty == Difficulty.EASY and risk == Risk.CRITICAL:       return &quot;oh nuts you're screwed&quot;      return &quot;You're probs ok m8&quot;```Once you define this you can pass your `super_scores` module to any cvsslib function like `calculate_vector` or `django_mixin` and it will all just work. You can even serialize the data to and from a vector if you define the correct `vector: X` in the enum docstrings.</longdescription>
</pkgmetadata>