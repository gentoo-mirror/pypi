<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;h1&gt;Kinopoisk API Unofficial client&lt;/h1&gt;    &lt;p&gt;Python-модуль для взаимодействия с неофициальным &lt;a href=&quot;https://kinopoiskapiunofficial.tech/&quot;&gt;API КиноПоиска&lt;/a&gt;&lt;/p&gt;    &lt;img align=&quot;center&quot; src=&quot;https://img.shields.io/github/repo-size/masterWeber/kinopoisk-api-unofficial-client&quot; alt=&quot;GitHub repo size&quot;&gt;    &lt;img align=&quot;center&quot; src=&quot;https://img.shields.io/pypi/dm/kinopoisk-api-unofficial-client&quot; alt=&quot;PyPI - Downloads&quot;&gt;    &lt;img align=&quot;center&quot; src=&quot;https://img.shields.io/github/stars/masterWeber/kinopoisk-api-unofficial-client&quot; alt=&quot;GitHub Repo stars&quot;&gt;    &lt;img align=&quot;center&quot; src=&quot;https://img.shields.io/github/watchers/masterWeber/kinopoisk-api-unofficial-client&quot; alt=&quot;GitHub watchers&quot;&gt;    &lt;img align=&quot;center&quot; src=&quot;https://img.shields.io/github/last-commit/masterWeber/kinopoisk-api-unofficial-client&quot; alt=&quot;GitHub last commit&quot;&gt;    &lt;img align=&quot;center&quot; src=&quot;https://img.shields.io/github/languages/top/masterWeber/kinopoisk-api-unofficial-client&quot; alt=&quot;GitHub top language&quot;&gt;    &lt;img align=&quot;center&quot; src=&quot;https://img.shields.io/website?down_message=Down&amp;label=Kinopoisk%20Api%20Unofficial&amp;up_message=Up&amp;url=https%3A%2F%2Fkinopoiskapiunofficial.tech%2F&quot; alt=&quot;API Uptime&quot;&gt;&lt;/div&gt;### Установка```$ pip install kinopoisk-api-unofficial-client```### Получение токена KinopoiskAPIДля получения токена необходима регистрация на сайте&lt;a href=&quot;https://kinopoiskapiunofficial.tech/signup&quot;&gt;kinopoiskapiunofficial.tech&lt;/a&gt;. После регистрации перейдите внастройки своего &lt;a href=&quot;https://kinopoiskapiunofficial.tech/profile&quot;&gt;профиля&lt;/a&gt; и сохраните токен.&lt;div align=&quot;center&quot;&gt;    &lt;img src=&quot;https://i.imgur.com/uRY1rRF.png&quot; alt=&quot;Регистрация&quot;&gt;&lt;/div&gt;## filmsНабор методов для работы с данными о фильмах### Получить данные о фильме по kinopoisk idВозвращает базовые данные о фильме. Поле last_sync показывает дату последнего обновления данных.* `Эндпоинт`: /api/v2.2/films/{id}* `Метод`: send_film_request(request: FilmRequest) -&gt; FilmResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.film_request import FilmRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FilmRequest(507)response = api_client.films.send_film_request(request)```### Получить данные о сезонах для сериала по kinopoisk film idВозвращает данные о сезонах для сериала.* `Эндпоинт`: /api/v2.2/films/{id}/seasons* `Метод`: send_seasons_request(request: SeasonsRequest) -&gt; SeasonsResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.seasons_request import SeasonsRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = SeasonsRequest(685246)response = api_client.films.send_seasons_request(request)```### Получить данные о фактах и ошибках в фильме по kinopoisk film idВозвращает список фактов и ошибок в фильме.* `Эндпоинт`: /api/v2.2/films/{id}/facts* `Метод`: send_facts_request(request: FactsRequest) -&gt; FactsResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.facts_request import FactsRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FactsRequest(685246)response = api_client.films.send_facts_request(request)```### Получить данные о прокате фильма по kinopoisk film idВозвращает данные о прокате в разных странах.* `Эндпоинт`: /api/v2.2/films/{id}/distributions* `Метод`: send_distributions_request(request: DistributionsRequest) -&gt; DistributionsResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.distributions_request import DistributionsRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = DistributionsRequest(507)response = api_client.films.send_distributions_request(request)```### Получить данные о бюджете и сборах фильма по kinopoisk film idВозвращает данные о бюджете и сборах.* `Эндпоинт`: /api/v2.2/films/{id}/box_office* `Метод`: send_box_office_request(request: BoxOfficeRequest) -&gt; BoxOfficeResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.box_office_request import BoxOfficeRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = BoxOfficeRequest(507)response = api_client.films.send_box_office_request(request)```### Получить кадры из фильма по kinopoisk film idВозвращает кадры из фильма.* `Эндпоинт`: /api/v2.1/films/{id}/frames* `Метод`: send_film_frame_request(request: FilmFrameRequest) -&gt; FilmFrameResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.film_frame_request import FilmFrameRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FilmFrameRequest(507)response = api_client.films.send_film_frame_request(request)```### Получить изображения(кадры, постеры, фан-арты, обои и т.д.) связанные с фильмом по kinopoisk film idДанный эндпоинт возвращает изображения связанные с фильмом с пагинацией. Каждая страница содержит не более чем 20фильмов. Доступные изображения:ImageType- STILL - кадры- SHOOTING - изображения со съемок- POSTER - постеры- FAN_ART - фан-арты- PROMO - промо- CONCEPT - концепт-арты- WALLPAPER - обои- COVER - обложки- SCREENSHOT - скриншоты* `Эндпоинт`: /api/v2.2/films/{id}/images* `Метод`: send_image_request(self, request: ImageRequest) -&gt; ImageResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.image_request import ImageRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = ImageRequest(507)response = api_client.films.send_image_request(request)```### Получить трейлеры, тизеры, видео для фильма по kinopoisk film idВозвращает трейлеры, тизеры, видео для фильма по kinopoisk film id.* `Эндпоинт`: /api/v2.2/films/{id}/videos* `Метод`: send_film_video_request(request: FilmVideoRequest) -&gt; FilmVideoResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.film_video_request import FilmVideoRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FilmVideoRequest(507)response = api_client.films.send_film_video_request(request)```### Получить сиквелы и приквелы для фильма по kinopoisk film idВозвращает информацию о сиквелах и приквелах для фильма по kinopoisk film id.* `Эндпоинт`: /api/v2.1/films/{id}/sequels_and_prequels* `Метод`: send_film_sequels_and_prequels_request(request: FilmSequelsAndPrequelsRequest) -&gt;  FilmSequelsAndPrequelsResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.film_sequels_and_prequels_request import FilmSequelsAndPrequelsRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FilmSequelsAndPrequelsRequest(507)response = api_client.films.send_film_sequels_and_prequels_request(request)```### Получить список фильмов по ключевым словам* `Эндпоинт`: /api/v2.1/films/search-by-keyword* `Метод`: send_search_by_keyword_request(request: SearchByKeywordRequest) -&gt; SearchByKeywordResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.search_by_keyword_request import SearchByKeywordRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = SearchByKeywordRequest(&quot;Рик и Морти&quot;)response = api_client.films.send_search_by_keyword_request(request)```### Получить id стран и жанров для использования в FilmSearchByFiltersRequestВозвращает список id стран и жанров, которые могут быть использованы в поиске по фильтру.* `Эндпоинт`: /api/v2.1/films/filters* `Метод`: send_filters_request(request: FiltersRequest) -&gt; FiltersResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.filters_request import FiltersRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FiltersRequest()response = api_client.films.send_filters_request(request)```### Получить список фильмов по различным фильтрамВозвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов. Используй `FiltersRequest`чтобы получить id стран и жанров.* `Эндпоинт`: /api/v2.1/films/search-by-filters* `Метод`: send_film_search_by_filters_request(request: FilmSearchByFiltersRequest) -&gt; FilmSearchByFiltersResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.model.filter_country import FilterCountryfrom kinopoisk_unofficial.model.filter_order import FilterOrderfrom kinopoisk_unofficial.request.films.film_search_by_filters_request import FilmSearchByFiltersRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FilmSearchByFiltersRequest()request.year_from = 2021request.rating_from = 5request.order = FilterOrder.RATINGrequest.add_country(FilterCountry(1, 'США'))response = api_client.films.send_film_search_by_filters_request(request)```### Получить список фильмов из различных топов или коллекцийВозвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов.Например: https://www.kinopoisk.ru/top/lists/58/.* `Эндпоинт`: /api/v2.2/films/top* `Метод`: send_film_top_request(request: FilmTopRequest) -&gt; FilmTopResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.film_top_request import FilmTopRequestfrom kinopoisk_unofficial.model.dictonary.top_type import TopTypeapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = FilmTopRequest(TopType.TOP_250_BEST_FILMS)response = api_client.films.send_film_top_request(request)```### Получить список похожих фильмов по kinopoisk film idВозвращает список похожих фильмов по kinopoisk film id* `Эндпоинт`: /api/v2.2/films/{id}/similars* `Метод`: send_related_film_request(request: RelatedFilmRequest) -&gt; RelatedFilmResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.related_film_request import RelatedFilmRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = RelatedFilmRequest(507)response = api_client.films.send_related_film_request(request)```### Получить список цифровых релизовВозвращает список цифровых релизов. Например: https://www.kinopoisk.ru/comingsoon/digital/* `Эндпоинт`: /api/v2.1/films/releases* `Метод`: send_digital_release_request(request: DigitalReleaseRequest) -&gt; DigitalReleaseResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.films.digital_release_request import DigitalReleaseRequestfrom kinopoisk_unofficial.model.dictonary.month import Monthapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = DigitalReleaseRequest(2021, Month.SEPTEMBER)response = api_client.films.send_digital_release_request(request)```### Получить график кинопремьерВозвращает список кинопремьер. Например: https://www.kinopoisk.ru/premiere/* `Эндпоинт`: /api/v2.2/films/premieres* `Метод`: send_premiere_request(request: PremiereRequest) -&gt; PremiereResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.model.dictonary.month import Monthfrom kinopoisk_unofficial.request.films.premiere_request import PremiereRequestapi_client = KinopoiskApiClient('&lt;your_token&gt;')request = PremiereRequest(2021, Month.DECEMBER)response = api_client.films.send_premiere_request(request)```## reviewsНабор методов для работы с ревью о фильмах### Получить рецензии зрителейВозвращает список рецензий с пагинацией. Каждая страница содержит не более чем 20 рецензий. Поле description содержит неполный текст рецензии. Полный текст может быть получен из `ReviewDetailsRequest`* `Эндпоинт`: /api/v1/reviews* `Метод`: send_reviews_request(request: ReviewsRequest) -&gt; ReviewsResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.reviews.reviews_request import ReviewsRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = ReviewsRequest(507)response = api_client.reviews.send_reviews_request(request)```### Получить полную рецензию по kinopoisk review idВозвращает полную информацию о рецензии.* `Эндпоинт`: /api/v1/reviews/details* `Метод`: send_review_details_request(request: ReviewDetailsRequest) -&gt; ReviewDetailsResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.reviews.review_details_request import ReviewDetailsRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = ReviewDetailsRequest(3000574)response = api_client.reviews.send_review_details_request(request)```## staffНабор методов для работы с данными об актерах, режиссерах и т.д.### Получить данные об актерах, режиссерах и т.д. по kinopoisk film idВозвращает данные об актерах, режиссерах и т.д. по kinopoisk film id* `Эндпоинт`: /api/v1/staff* `Метод`: send_staff_request(request: StaffRequest) -&gt; StaffResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.staff.staff_request import StaffRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = StaffRequest(507)response = api_client.staff.send_staff_request(request)```### Получить данные о конкретном человеке по kinopoisk person idВозвращает данные о конкретном человеке по kinopoisk person id* `Эндпоинт`: /api/v1/staff/{id}* `Метод`: send_person_request(request: PersonRequest) -&gt; PersonResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.staff.person_request import PersonRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = PersonRequest(27977)response = api_client.staff.send_person_request(request)```## persons### Получить данные об актерах, режиссерах и т.д. по имениВозвращает данные об актерах, режиссерах и т.д. по имениОдна страница может содержать до 50 элементов в items* `Эндпоинт`: /api/v1/persons* `Метод`: send_person_by_name_request(request: PersonByNameRequest) -&gt; PersonByNameResponse```pythonfrom kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClientfrom kinopoisk_unofficial.request.persons.person_by_name_request import PersonByNameRequestapi_client = KinopoiskApiClient(&quot;&lt;your_token&gt;&quot;)request = PersonByNameRequest(&quot;Джеймс Кэмерон&quot;)response = api_client.persons.send_person_by_name_request(request)```</longdescription>
</pkgmetadata>