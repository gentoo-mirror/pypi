<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Grunnlag### IdeaGrunnlag is a Schema Provider for the Bergen Client accessing your Arnheim Framework ### PrerequisitesBergen (and in Conclusion Grunnlag) only works with a running Arnheim Instance (in your network or locally for debugging).### UsageIn order to initialize the Client you need to connect it as a Valid Application with your Arnheim Instance```pythonfrom bergen import Bergenclient = Bergen(host=&quot;p-tnagerl-lab1&quot;,    port=8000,  client_id=&quot;APPLICATION_ID_FROM_ARNHEIM&quot;,   client_secret=&quot;APPLICATION_SECRET_FROM_ARNHEIM&quot;,  name=&quot;karl&quot;,)```In your following code you can simple query your data according to the Schema of the DatapointExample 1:```pythonfrom grunnlag.schema import Noderep = Representation.objects.get(id=1)print(rep.shape)```Access a Representation (Grunnlags Implementation of a 5 Dimensional Array e.g Image Stack, Time Series Photography) and display the dimensionsExample 2:```pythonfrom grunnlag.schema import Representation, Samplefrom bergen.query import TypedGQLsamples = TypedGQL(&quot;&quot;&quot;query {  samples(creator: 1){    id    representations(name: &quot;initial&quot;, dims: [&quot;x&quot;,&quot;y&quot;,&quot;z&quot;]) {      id      store    }  }}&quot;&quot;&quot;, Sample).run({})for sample in samples:    print(sample.id)    for representation in sample.representations:        print(representation.data.shape)```Get all Samples and include the representations if they have the name &quot;initial&quot; and contains the required dimensions. (An automatically documented and browsable Schema can be found at your Arnheim Instance /graphql)Example 3:```pythonfrom grunnlag.schema import Representation, Samplefrom bergen.query import TypedGQLimport xarray as xrmassive_array = xr.DataArray(da.zeros(1024,1024,100,40,4), dims=[&quot;x&quot;,&quot;y&quot;,&quot;z&quot;,&quot;t&quot;,&quot;c&quot;])rep = Representation.objects.from_xarray(massive_array, name=&quot;massive&quot;, sample=1)```The Grunnlag Implementation allows for upload of massive arrays do to its reliance on Xarray, dask, and zarr, combined withS3 Storage on the Backend. Client Data gets compresed and send over to the S3 Storage and automatically added to the system.(Permissions required!)Example 4:```pythonfrom grunnlag.schema import Representation, Samplefrom bergen.query import TypedGQLimport xarray as xrimport naparirep = Representation.objects.get(name=&quot;massive&quot;, sample=1)with napari.gui_qt() as gui:    viewer = napari.view_image(rep.data.sel(c=0).data)```Combined with Napari that is able to handle dask arrays, data visualization of massive Datasets becomes a breeze as only required chunks are downloaded form the storage backend.### Testing and DocumentationSo far Grunnlad does only provide limitedunit-tests and is in desperate need of documentation,please beware that you are using an Alpha-Version### Build with- [Arnheim](https://github.com/jhnnsrs/arnheim)- [Pydantic](https://github.com/jhnnsrs/arnheim)## RoadmapThis is considered pre-Alpha so pretty much everything is still on the roadmap## DeploymentContact the Developer before you plan to deploy this App, it is NOT ready for public release## VersioningThere is not yet a working versioning profile in place, consider non-stable for every release ## Authors* **Johannes Roos ** - *Initial work* - [jhnnsrs](https://github.com/jhnnsrs)See also the list of [contributors](https://github.com/your/project/contributors) who participated in this project.## LicenseAttribution-NonCommercial 3.0 Unported (CC BY-NC 3.0) ## Acknowledgments* EVERY single open-source project this library used (the list is too extensive so far)</longdescription>
</pkgmetadata>