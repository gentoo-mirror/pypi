<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Coverage Status](https://coveralls.io/repos/github/sonic182/onecache/badge.svg?branch=master)](https://coveralls.io/github/sonic182/onecache?branch=master)![github status](https://github.com/sonic182/onecache/actions/workflows/python.yml/badge.svg)# OneCachePython cache for sync and async code.Cache uses LRU algoritm. Cache can optionally have TTL.Tested in python 3.7, 3.9, and pypy3.9 for windows, mac and linux (see github status badge), it should work in versions between them. It may work for python3.6# Usage```pythonfrom onecache import CacheDecoratorfrom onecache import AsyncCacheDecoratorclass Counter:    def __init__(self, count=0):        self.count = count@pytest.mark.asyncioasync def test_async_cache_counter():    &quot;&quot;&quot;Test async cache, counter case.&quot;&quot;&quot;    counter = Counter()    @AsyncCacheDecorator()    async def mycoro(counter: Counter):        counter.count += 1        return counter.count    assert 1 == (await mycoro(counter))    assert 1 == (await mycoro(counter))def test_cache_counter():    &quot;&quot;&quot;Test async cache, counter case.&quot;&quot;&quot;    counter = Counter()    @CacheDecorator()    def sample(counter: Counter):        counter.count += 1        return counter.count    assert 1 == (sample(counter))    assert 1 == (sample(counter))```Decorator classes supports the following arguments* **maxsize (int)**: Maximun number of items to be cached. default: 512* **ttl (int)**: time to expire in milliseconds, if None, it does not expire. default: None* **skip_args (bool)**: apply cache as the function doesn't have any arguments, default: False* **cache_class (class)**: Class to use for cache instance. default: LRUCache* **refresh_ttl (bool)**: if cache with ttl, This flag makes key expiration timestamp to be refresh per access. default: False* **thread_safe (bool)**: tell decorator to use thread safe lock. default=False* **max_mem_size (int)**: max mem size in bytes. Ceil for sum of cache values sizes. default=None which means no limit. For pypy this value is ignored as the objects can change by the JIT compilation.If num of records exceds maxsize, it drops the oldest.# DevelopmentInstall packages with pip-tools:```bashpip install pip-toolspip-compilepip-compile test-requirements.inpip-sync requirements.txt test-requirements.txt```# Contribute1. Fork2. create a branch `feature/your_feature`3. commit - push - pull requestThanks :)</longdescription>
</pkgmetadata>