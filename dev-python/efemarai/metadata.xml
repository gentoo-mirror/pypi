<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;picture&gt;    &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://uploads-ssl.webflow.com/610aa229ecea935cd9cfb47a/610acaca4091b72c3fd40cf7_efemarai_logo_light-p-500.png#gh-dark-mode-only&quot; width=&quot;400&quot;&gt;    &lt;img src=&quot;https://uploads-ssl.webflow.com/610aa229ecea935cd9cfb47a/645b809d1044746ee26f2783_efemarai-logo-dark.png#gh-light-mode-only&quot; width=&quot;400&quot;/&gt;  &lt;/picture&gt;  &lt;div&gt;&amp;nbsp;&lt;/div&gt;  &lt;div align=&quot;center&quot;&gt;    &lt;a href=&quot;https://efemarai.com&quot;&gt;      &lt;b&gt;&lt;font size=&quot;5&quot;&gt;Efemarai website&lt;/font&gt;&lt;/b&gt;      &lt;/a&gt;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    &lt;b&gt;&lt;font size=&quot;5&quot;&gt;Efemarai platform&lt;/font&gt;&lt;/b&gt;    &lt;sup&gt;      &lt;a href=&quot;https://ci.efemarai.com&quot;&gt;        &lt;i&gt;&lt;font size=&quot;4&quot;&gt;Use now!&lt;/font&gt;&lt;/i&gt;      &lt;/a&gt;    &lt;/sup&gt;  &lt;/div&gt;  &lt;div&gt;&amp;nbsp;&lt;/div&gt;[![PyPI](https://img.shields.io/pypi/v/efemarai)](https://pypi.org/project/efemarai)[![license](https://img.shields.io/github/license/efemarai/efemarai.svg)](https://github.com/open-mmlab/mmdetection/blob/main/LICENSE) An SDK for interacting with the Efemarai ML [testing platform](https://ci.efemarai.com). Make your R&amp;D model production ready.    [üìòDocumentation](https://ci.efemarai.com/docs) |[üõ†Ô∏èInstallation](https://ci.efemarai.com/86b41a59036d7a2bcb53feb925444603/tutorials/getting_started.html#getting-started) |[üëÄBreak YOLO](https://breakyolo.efemarai.com/) |[üöÄJoin Community](https://discord.gg/cWQC3rrB) |[üòûReporting Issues](https://github.com/efemarai/efemarai/issues/new/choose)&lt;/div&gt;## IntroductionEfemarai is the easiest to integrate open source platform for testing and validating Computer Vision ML models. It works with any framework and model (PyTorch, TensorFlow, Keras, sklearn, Detectron2, OpenMMLab, YOLO, etc) and in 5 function calls finds examples that break your model.&lt;details open&gt;&lt;summary&gt;Major features&lt;/summary&gt;- **üîÆ Operational Domain**  Finetune how the images should be transformed, such that they cover the variablity the model is exepected to see in the real world. - **üë®üíª Support any Input and Output types**  Not only do we support tasks such as **classification**, **object detection**, **instance segmentation**, **keypoints detection**, **regression**, but also any combination thereoff, with any type of input - single image, multi-image, video, text, or anything that combines those.- **üìà High efficiency**  Don't waste time on randomly augmenting data, with Efemarai you are narrowing down failure modes in your model that are informative and you can fix.&lt;/details&gt;## Example Works### Find issues with a COCO detectorApply advanced transformations, copy, edit, delete any part of the image, reimagine how things should vary in the real world.![Break a detector](https://uploads-ssl.webflow.com/610aa229ecea935cd9cfb47a/645b8a746fad9c66d237495a_smaller-giraffe.gif)### Break a face detectorWith the `FaceWorks` module, you can perform relighting, face rotation, skin re-toning, etc to find conditions that break your model.![Break face recognition](https://media.licdn.com/dms/image/C4D22AQFgBefVcNSV7A/feedshare-shrink_800/0/1678370502298?e=1686787200&amp;v=beta&amp;t=VqXHpbQieUkdHesGO5KwHxVvAxGAyB_RrzGUtr-QCZU)#### OtherIf you work in the medical, aerospace and defence, security or ag domain, we provide custom capabilities that are domain specific. For these or other enquiries, drop us [a message](mailto:svet@efemarai.com?subject=&quot;Do%20you%20work%20with%20this?&quot;).## SetupInstall with```bashpip install -U efemarai```then run```bashefemarai init```and follow the instructions to connect your account to [https://ci.efemarai.com](https://ci.efemarai.com).## Example Usage### Create a Bounding Box ProjectWhen your project depends on bounding boxes, the uploaded dataset needs to contain the required bounding box information alongside each image as part of a single datapoint.First we will create a dataset, and later on, a dummy model that returns bounding box information.#### Create datasetA convenient approach for creating a bounding box dataset is by ensuring that the local format is in COCO-compatible format.```pythonimport efemarai as ef# Create a projectproject = ef.Session().create_project(    name=&quot;Example Bounding Box Project (COCO)&quot;,    description=&quot;Example project using the COCO dataset format.&quot;,    exists_ok=True,)dataset = project.create_dataset(    name=&quot;Bounding Box dataset&quot;,    data_url=&quot;./data/coco/test&quot;,    annotations_url=&quot;./data/coco/annotations/test_instances.json&quot;,    stage=ef.DatasetStage.Test,    format=ef.DatasetFormat.COCO,)```If your dataset is remote or part of an existing database with custom formats, you can easily upload it to the system by (1) iterating over the dataset and (2) creating datapoints containing the images and required targets. You can find a code example [here](https://ci.efemarai.com/86b41a59036d7a2bcb53feb925444603/tutorials/how_to/project_bounding_box.html#create-dataset).After wrapping up any processing, you can confirm the status in the UI and explore the inputs and annotations.#### Create a modelA model that works with bounding boxes dataset will need to return a list of `ef.BoundingBox` objects that will be matched to the ones stored in the dataset. In a file `dummy_model.py` save the following code:```pythonimport efemarai as efimport numpy as npclass DummyModel:    &quot;&quot;&quot;A DummyModel returning a random bbox&quot;&quot;&quot;    def __init__(self, device):        self.device = device # Move model to device    def __call__(self, image):        return {            &quot;class_id&quot;: np.random.randint(0, 3),            &quot;bbox&quot;: [100, 150, 250, 350],            &quot;score&quot;: np.random.random(),        }def predict_images(datapoints, model, device):    outputs = []    for datapoint in datapoints:        image = datapoint.get_input(&quot;image&quot;) # This corresponds to the key from the datapoint input creation dict        image_post_process = image.data / 255 - 0.5 # perform any pre-processing        output = model(image_post_process)        # Here again the label can be referenced by name or class        # label = ef.AnnotationClass(name=output[&quot;class_name&quot;])        label = ef.AnnotationClass(id=output[&quot;class_id&quot;])        outputs.append(            [                ef.BoundingBox(                    xyxy=output[&quot;bbox&quot;],                    confidence=output[&quot;score&quot;], # Confidence of detection                    ref_field=image, # Say which image this output refers to                    label=label,     # And what label it has                ),            ]        )    return outputsdef load_model(device):    model = DummyModel(device)    return model```That's the two things you need to define - how to load the model and how to perform an inference on a batch!#### efemarai.yaml fileTo run the model, you need to have defined the loading and inference capabilities in the efemarai.yaml file. This way we can work with any model from any platfrom or framework.Here‚Äôs the one corresponding to the dummy model.```yamlproject:  name: &quot;Example Bounding Box Project&quot;models:  - name: Dummy Model    description: This is a dummy model to show consuming inputs and outputs    runtime:      image: python:3.10-slim-buster      device: &quot;gpu&quot;      batch:        max_size: 10      load:        entrypoint: dummy_model:load_model        inputs:          - name: device            value: ${model.runtime.device}        output:          name: model      predict:        entrypoint: dummy_model:predict_images        inputs:          - name: datapoints            value: ${datapoints}          - name: model            value: ${model.runtime.load.output.model}          - name: device            value: ${model.runtime.device}        output:          name: predictions          keys:            - bbox```#### Register the modelTo register the model, use the CLI to upload it by going into the root of the file directory, next to the `efemarai.yaml`.```bashef model create .```Now you should be able to see the model uploaded and active with this project.### Create a domainLet's use the UI to quickly create a domain (`Example`) that you expect your model to operate in.![](https://storage.googleapis.com/public-efemarai/domain2.gif)You can find more information in the [docs](https://ci.efemarai.com/86b41a59036d7a2bcb53feb925444603/tutorials/step_by_step/domain.html#create-domain).### Working with stress testsNow that you have defined your model, domain and dataset, you are ready to stress test your model and validate how well it works!```python# Create a new stress testtest = project.create_stress_test(    name=&quot;Test via SDK&quot;,    model=project.model(&quot;Dummy Model&quot;),    domain=project.domain(&quot;Example&quot;),    dataset=&quot;Example Bounding Box Project (COCO)&quot;, # Just a name also works)# Load an existing stress testtest = project.stress_test(&quot;Test via SDK&quot;)# Download dataset with discovered vulnerabilitiesdataset_filepath = test.vulnerabilities_dataset()# Check test run stateprint(f&quot;Running: {test.running} Failed: {test.failed} Finished: {test.finished}&quot;)```Models, domains and datasets can be easily created programatically, butthey require quite a few configuration paramaters to be provided. That'swhy the most convenient way to create a project with multiple models, domainsand datasets is to put everything into a config file.</longdescription>
</pkgmetadata>