<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============envbash-python==============|PyPI| |Build Status| |Coverage Report| |Python Versions|Python module for sourcing a bash script to augment the environment.Supports Python 2.7 and 3.4+Rationale---------`12-factor apps &lt;https://12factor.net/&gt;`__ require `configuration loadedfrom the environment &lt;https://12factor.net/config&gt;`__.That's `easy on a platform likeHeroku &lt;https://devcenter.heroku.com/articles/config-vars&gt;`__, where theenvironment is preset by the user with commands like``heroku config:set``. But it's messier in development and non-Herokudeployments, where the environment might need to be loaded from a file.This package provides a mechanism for sourcing a Bash script to updatePython's environment (``os.environ``). Commonly the external file is called``env.bash``, hence the name of this project.Installation------------Install from PyPI_:.. code:: sh    pip install envbashUsage-----Call ``load_envbash`` to source a Bash script into the current Python process.Any variables that are set in the script, regardless of whether they areexplicitly exported, will be added to the process environment.For example, given ``env.bash`` with the following content:.. code:: sh    FOO='bar baz qux'This can be loaded into Python:.. code:: python    import os    from envbash import load_envbash    load_envbash('env.bash')    print(os.environ['FOO'])  #=&gt; bar baz quxFAQ---How is this different from `dotenv &lt;https://github.com/theskumar/python-dotenv&gt;`__?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Both projects aim to solve the same problem, but differ in approach. Inparticular, dotenv uses an ad hoc config syntax whereas envbash usesBash.dotenv's syntax becomes a problem with multi-line strings. dotenv intends forthe ``.env`` file to be readable by the shell, but the dotenv format formulti-line strings isn't compatible with the shell.If the point is to have a configuration language that's well-suited toenvironment variables, it's hard to beat pure Bash, and it's guaranteedto source properly into the shell.Should I commit ``env.bash`` to source control?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~No, definitely not. The purpose of ``env.bash`` is to store developmentconfiguration that isn't suitable for committing to the repository,whether that's secret keys or developer-specific customizations. Infact, you should add the following line to ``.gitignore``:::    /env.bashIs it necessary to explicitly ``export`` variables in ``env.bash``?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~No, envbash prefixes sourcing your ``env.bash`` with ``set -a`` whichcauses all newly-set variables to be exported automatically. If youwould rather explicitly export variables, you can ``set +a`` at the topof your ``env.bash``.How do I put a multi-line string into ``env.bash``?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can put newlines directly into a multi-line string in Bash, so forexample this works:.. code:: bash    PRIVATE_KEY=&quot;    -----BEGIN RSA PRIVATE KEY-----    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    -----END RSA PRIVATE KEY-----&quot;Does envbash override my environment settings?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~By default your local environment settings win, so you can override thecontent of ``env.bash`` by explicitly exporting variables in your shell.You can change this behavior. This makes sense for a deployed instancethat gets full configuration from ``env.bash`` and needs to be protectedfrom the calling environment... code:: python    load_envbash('env.bash', override=True)Can I remove settings from the environment?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~By default envbash doesn't remove settings, but you can change thisbehavior... code:: python    load_envbash('env.bash', remove=True)This will cause any variables that you explicitly ``unset`` in``env.bash`` to be removed from Python's ``os.environ`` as well.How do I source ``env.bash`` into my guest shell environment?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Assuming that your source directory is available on the default``/vagrant`` mount point in the guest, you can add add this line at thebottom of ``/home/vagrant/.bash_profile``:::    set -a; source /vagrant/env.bash; set +aNote that this means that settings are loaded on ``vagrant ssh`` so youneed to exit the shell and rerun ``vagrant ssh`` to refresh if youchange settings.What about Ruby?~~~~~~~~~~~~~~~~~~See `envbash-ruby &lt;https://github.com/scampersand/envbash-ruby&gt;`__Legal-----Copyright 2017-2018 `Scampersand LLC &lt;https://scampersand.com&gt;`_Released under the `MIT license &lt;https://github.com/scampersand/envbash-python/blob/master/LICENSE&gt;`_.. _PyPI: https://pypi.python.org/pypi/envbash.. |Build Status| image:: https://img.shields.io/travis/scampersand/envbash-python/master.svg?style=plastic   :target: https://travis-ci.org/scampersand/envbash-python?branch=master.. |Coverage Report| image:: https://img.shields.io/codecov/c/github/scampersand/envbash-python/master.svg?style=plastic   :target: https://codecov.io/gh/scampersand/envbash-python/branch/master.. |PyPI| image:: https://img.shields.io/pypi/v/envbash.svg?style=plastic   :target: PyPI_.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/envbash.svg?style=plastic   :target: PyPI_</longdescription>
</pkgmetadata>