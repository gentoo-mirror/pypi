<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># geckocode-libsPython library for parsing and editing Gecko Codes for the Wii/GCN## Installation`pip install geckolibs`## UsageWith `geckocode-libs`, file parsing is simple to do.You can read a textual codelist into a `GeckoCodeTable` using the method `GeckoCodeTable.from_text(our_text)`, which automatically detects the type of codelist being read and handles all the dirty work for you! This returns a new GeckoCodeTable object.You can also read a raw codelist from a GCT using the method `GeckoCodeTable.from_bytes(our_bytes)`, which parses the raw bytes given to the method into a new GeckoCodeTable object.When you are done editing your GCT, you can convert the object back into a codelist, text, or raw data using the methods `GeckoCodeTable.as_codelist(codelist_type)`, `GeckoCodeTable.as_text()`, and `GeckoCodeTable.as_bytes()` respectively.You can also create your own codes using the library itself, an example shown here:```pythongct = GeckoCodeTable()                      # Empty GCTcode = GeckoCode(&quot;Our awesome code&quot;, &quot;Me&quot;)  # Empty GeckoCode named &quot;Our awesome code&quot;, created by &quot;Me&quot;command = Write32(0x60000000, 0x80231480)   # Individual commandcode.add_child(command)                     # Add a command to the codegct.add_child(code)                         # Add a code to the GCT```Type checking of codes can be done in 3 ways:```pythoncode = Write8(69, 0x80203932)code == Write8                              # Truecode == Write8.codetype                     # Truecode.codetype == Write8.codetype            # Truecode.codetype == GeckoCommand.Type.WRITE_8  # True```It should be noted that in order to check multiple codetypes at once, `code.codetype` should be used.## Example```python&gt;&gt;&gt; from geckolibs.geckocode import *&gt;&gt;&gt; from geckolibs.gct import *&gt;&gt;&gt; &gt;&gt;&gt; ifblock = IfEqual32(0x00D0C0DE, 0x80204158)&gt;&gt;&gt;&gt;&gt;&gt; code = WriteString(b&quot;\x00\x01\x02\x03\x04\x05&quot;, 0x80023994)&gt;&gt;&gt; ifblock.add_child(code)&gt;&gt;&gt;&gt;&gt;&gt; code = AsmInsert(b&quot;\x38\x03\x00\x01\x38\x00\x00\x18&quot;, 0x80291358)&gt;&gt;&gt; ifblock.add_child(code)&gt;&gt;&gt;&gt;&gt;&gt; geckocode = GeckoCode(&quot;Test Code&quot;, &quot;JoshuaMK&quot;, &quot;Testing our new code!&quot;, ifblock)&gt;&gt;&gt; geckocode.add_child(Terminator(0x80008000))&gt;&gt;&gt;&gt;&gt;&gt; print(geckocode)Test Code [JoshuaMK]  Testing our new code!&gt;&gt;&gt; print(geckocode.as_text())20204158 00D0C0DE06023994 0000000600010203 04050000C2291358 0000000238030001 3800001860000000 00000000E0000000 80008000&gt;&gt;&gt; for command in geckocode:  ...     print(command)        ...(20) If the word at address (0x00204158 + the base address) is equal to 0x00D0C0DE:    (06) Write 6 bytes to 0x00023994 + the base address    (C2) Inject (b / b) the designated ASM at 0x00291358 + the base address(E0) Clear the code execution status. Set the base address to 80000000. Set the pointer address to 80000000.```## NotesPlease give credit to this project when using it! :)</longdescription>
</pkgmetadata>