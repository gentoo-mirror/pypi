<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># grafana-client[![Tests](https://github.com/panodata/grafana-client/workflows/Test/badge.svg)](https://github.com/panodata/grafana-client/actions?query=workflow%3ATest)[![Test coverage](https://img.shields.io/codecov/c/gh/panodata/grafana-client.svg?style=flat-square)](https://codecov.io/gh/panodata/grafana-client/)[![License](https://img.shields.io/github/license/panodata/grafana-client.svg?style=flat-square)](https://github.com/panodata/grafana-client/blob/main/LICENSE) [![Python versions](https://img.shields.io/pypi/pyversions/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)[![Grafana versions](https://img.shields.io/badge/Grafana-5.x%20--%2010.x-blue.svg?style=flat-square)](https://github.com/grafana/grafana)[![Status](https://img.shields.io/pypi/status/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)[![PyPI](https://img.shields.io/pypi/v/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)[![Downloads](https://img.shields.io/pypi/dm/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)&lt;!-- [![Conda](https://img.shields.io/conda/v/panodata/grafana-client.svg?style=flat-square)](https://anaconda.org/panodata/grafana-client) --&gt;## AboutA client library for accessing the Grafana HTTP API, written in Python.## SetupInstall the package from PyPI.```pip install grafana-client --upgrade```## Usage### API overviewThis section gives you an idea about how to use the API on behalf of a fewsamples.```pythonfrom grafana_client import GrafanaApi# Connect to Grafana API endpoint using the `GrafanaApi` classgrafana = GrafanaApi.from_url(    &quot;https://username:password@daq.example.org/grafana/&quot;)# Create useruser = grafana.admin.create_user({    &quot;name&quot;: &quot;User&quot;,     &quot;email&quot;: &quot;user@example.org&quot;,     &quot;login&quot;: &quot;user&quot;,     &quot;password&quot;: &quot;userpassword&quot;,     &quot;OrgId&quot;: 1,})# Change user passworduser = grafana.admin.change_user_password(2, &quot;newpassword&quot;)# Search dashboards based on taggrafana.search.search_dashboards(tag=&quot;applications&quot;)# Find a user by emailuser = grafana.users.find_user(&quot;test@example.org&quot;)# Add user to team 2grafana.teams.add_team_member(2, user[&quot;id&quot;])# Create or update a dashboardgrafana.dashboard.update_dashboard(    dashboard={&quot;dashboard&quot;: {...}, &quot;folderId&quot;: 0, &quot;overwrite&quot;: True})# Delete a dashboard by UIDgrafana.dashboard.delete_dashboard(dashboard_uid=&quot;foobar&quot;)# Create organizationgrafana.organization.create_organization(    organization={&quot;name&quot;: &quot;new_organization&quot;})```### Example programsThere are complete example programs to get you started within the [examplesfolder] of this repository.Feel free to use them as blueprints for your own programs. If you think yourexercises could be useful for others, don't hesitate to share them back.## AuthenticationThere are several ways to authenticate to the Grafana HTTP API.1. Anonymous access2. Grafana API token3. HTTP Basic Authentication4. HTTP Header AuthenticationThe [Grafana Admin API] is a subset of the Grafana API. For accessing those APIresources, you will need to use HTTP Basic Authentication.```pythonfrom grafana_client import GrafanaApi, HeaderAuth, TokenAuth# 1. Anonymous accessgrafana = GrafanaApi.from_url(    url=&quot;https://daq.example.org/grafana/&quot;,)# 2. Use Grafana API token.grafana = GrafanaApi.from_url(    url=&quot;https://daq.example.org/grafana/&quot;,    credential=TokenAuth(token=&quot;eyJrIjoiWHg...dGJpZCI6MX0=&quot;),)# 3. Use HTTP basic authentication.grafana = GrafanaApi.from_url(    url=&quot;https://username:password@daq.example.org/grafana/&quot;,)grafana = GrafanaApi.from_url(    url=&quot;https://daq.example.org/grafana/&quot;,    credential=(&quot;username&quot;, &quot;password&quot;))# 4. Use HTTP Header authentication.grafana = GrafanaApi.from_url(    url=&quot;https://daq.example.org/grafana/&quot;,    credential=HeaderAuth(name=&quot;X-WEBAUTH-USER&quot;, value=&quot;foobar&quot;),)# Optionally turn off TLS certificate verification.grafana = GrafanaApi.from_url(    url=&quot;https://username:password@daq.example.org/grafana/?verify=false&quot;,)# Use `GRAFANA_URL` and `GRAFANA_TOKEN` environment variables.grafana = GrafanaApi.from_env()```Please note that, on top of the specific examples above, the object obtained by`credential` can be an arbitrary `requests.auth.AuthBase` instance.## Selecting OrganizationsIf the Grafana API is authenticated as a user (for example, with HTTP Basic Authentication),it will use the user's current organization context.That context can be changed with the `GrafanaApi.user.switch_actual_user_organisation` function.```pythongrafana.user.switch_actual_user_organisation(1)```An instance of `GrafanaApi` can also be bound to a single organization with the `organization_id` parameter,ensuring that all requests will be made to that organization.This parameter will cause `GrafanaClient` to use the [X-Grafana-Org-Id header].```pythongrafana = GrafanaApi(..., organization_id=1)```API Tokens are bound to a single organization, so the `organization_id` parameter does not need to be specified.## Timeout settingsThe default timeout value is five seconds, used for both connect and read timeout.The constructors of `GrafanaApi` and `GrafanaClient`, as well as the factory methods`from_url` and `from_env` accept the `timeout` argument, which can be obtained as ascalar `float` value, or as a tuple of `(&lt;read timeout&gt;, &lt;connect timeout&gt;)`.## ProxyThe underlying `requests` library honors the `HTTP_PROXY` and `HTTPS_PROXY`environment variables. Setting them before invoking an application using`grafana-client` has been confirmed to work. For example:```export HTTP_PROXY=10.10.1.10:3128export HTTPS_PROXY=10.10.1.11:1080```## DetailsThis section of the documentation outlines which parts of the Grafana HTTP APIare supported, and to which degree. See also [Grafana HTTP API reference].### Compatibility`grafana-client` is largely compatible with Grafana 5.x-10.x. However, earlierversions of Grafana might not support certain features or subsystems.### Overview| API | Status ||---|---|| Admin | + || Alerting | +- || Alerting Notification Channels | + || Alerting Provisioning | + || Annotations | + || Authentication | +- || Dashboard | + || Dashboard Versions | + || Dashboard Permissions | + || Data Source | + || Data Source Permissions | + || External Group Sync | + || Folder | + || Folder Permissions | + || Folder/Dashboard Search | +- || Health | + || Organisation | + || Other | + || Plugin | + || Preferences | + || Rbac | +- || Snapshot | + || Teams | + || User | + |### Data source health check#### IntroductionFor checking whether a Grafana data source is healthy, Grafana 9 and newer hasa server-side data source health check API. For earlier versions, a client-sideimplementation is provided.This implementation works in the same manner as the &quot;Save &amp; test&quot; button works,when creating a data source in the user interface.The feature can be explored through corresponding client programs in the[examples folder] of this repository.#### CompatibilityThe minimum required version for data source health checks is Grafana 7.Prometheus only works on Grafana 8 and newer.#### Data source coverageHealth checks are supported for these Grafana data source types.- CrateDB- Elasticsearch- Graphite- InfluxDB- Jaeger- Loki- Microsoft SQL Server- OpenTSDB- PostgreSQL- Prometheus- Tempo- Testdata- ZipkinWe are humbly asking the community to contribute adapters for other datasource types, popular or not.## ApplicationsA list of applications based on `grafana-client`.- [grafana-import-tool](https://github.com/peekjef72/grafana-import-tool)- [grafana-ldap-sync-script](https://github.com/NovatecConsulting/grafana-ldap-sync-script)- [grafana-snapshots-tool](https://github.com/peekjef72/grafana-snapshots-tool)- [grafana-wtf](https://github.com/panodata/grafana-wtf)- [nixops-grafana](https://github.com/tewfik-ghariani/nixops-grafana)## Project information### HistoryThe library was originally conceived by [Andrew Prokhorenkov] and contributorsas [grafana_api]. Thank you very much for your efforts!At [future maintenance of `grafana_api`], we discussed the need for a forkbecause the repository stopped receiving updates since more than a year.While forking it, we renamed the package to `grafana-client` and slightlytrimmed the module namespace.### AcknowledgementsThanks to the original authors and all [contributors] who helped to co-createand conceive this software in one way or another. You know who you are.### ContributingAny kind of contribution and feedback are very much welcome! Just create anissue or submit a patch if you think we should include a new feature, or to report or fix a bug.The issue tracker URL is: https://github.com/panodata/grafana-client/issues### DevelopmentIn order to set up a development environment for `grafana-client`, pleasefollow the [development documentation].### License`grafana-client` is licensed under the terms of the MIT License, see [LICENSE] file.[Andrew Prokhorenkov]: https://github.com/m0nhawk/grafana_api[contributors]: https://github.com/panodata/grafana-client/graphs/contributors[development documentation]: https://github.com/panodata/grafana-client/blob/main/docs/development.md[examples folder]: https://github.com/panodata/grafana-client/tree/main/examples[future maintenance of `grafana_api`]: https://github.com/m0nhawk/grafana_api/issues/88[grafana_api]: https://github.com/m0nhawk/grafana_api[Grafana Admin API]: https://grafana.com/docs/grafana/latest/http_api/admin/[X-Grafana-Org-Id header]: https://grafana.com/docs/grafana/latest/developers/http_api/auth/#x-grafana-org-id-header[Grafana HTTP API reference]: https://grafana.com/docs/grafana/latest/http_api/[LICENSE]: https://github.com/panodata/grafana-client/blob/main/LICENSE</longdescription>
</pkgmetadata>