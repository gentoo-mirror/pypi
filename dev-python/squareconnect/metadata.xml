<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Square logo]# Square Connect Python SDK - RETIRED---[![Build Status](https://travis-ci.org/square/connect-python-sdk.svg?branch=master)](https://travis-ci.org/square/connect-python-sdk)[![PyPI version](https://badge.fury.io/py/squareconnect.svg)](https://badge.fury.io/py/squareconnect)[![Apache-2 license](https://img.shields.io/badge/license-Apache2-brightgreen.svg)](https://www.apache.org/licenses/LICENSE-2.0)==================## NOTICE: Square Connect Python SDK retiredThe Square Connect Python SDK is retired (EOL) as of 2019-08-15 and will nolonger receive bug fixes or product updates. To continue receiving API and SDKimprovements, please follow the instructions below to migrate to the new[Square Python SDK].The old Connect SDK documentation is available under the[`/docs` folder](./docs/README.md).&lt;br/&gt;---* [Migrate to the Square Python SDK](#migrate-to-the-square-python-sdk)* [Example code migration](#example-code-migration)* [Ask the community](#ask-the-community)---&lt;br/&gt;## Migrate to the Square Python SDKFollow the instructions below to migrate your apps from the deprecated`squareconnect` library to the new `square` library.### Install the new libraryInstall the latest [Square Python SDK] using pip:```pythonpip install squareup```### Update your code1. Change all instances of `import 'squareconnect'` to `import 'square'`.1. Replace models with plain Python dictionary equivalents.1. Update client instantiation to follow the method outlined below.1. Update code for accessing response data to follow the method outlined below.1. Check `response.is_success` or `response.is_error` rather than rescuing   exceptions for flow control.To simplify your code, we also recommend that you use method chaining to accessAPIs instead of explicitly instantiating multiple clients.#### Client instantiation```pythonfrom square.client import Clientsquare = Client(access_token='YOUR ACCESS TOKEN')response = square.API.ENDPOINT(body=BODY)```#### Accessing response data```pythonif response.is_success():  print({response.body})elif response.is_error():  print({response.errors})```### An example code migrationAs a specific example, consider the following code for creating a new customerfrom this dictionary:```pythonnew_customer = {  'given_name': 'Ava',  'address': {    'address_line_1': '555 Electric Ave',    'locality': 'Los Angeles',    'country': 'US'  }}```With the deprecated `squareconnect` library, this is how you instantiate aclient for the Customers API, format the request, and call the endpoint:```pythonfrom squareconnect import ApiClientfrom squareconnect.rest import ApiExceptionfrom squareconnect.apis.customers_api import CustomersApifrom squareconnect.models.create_customer_request import CreateCustomerRequest# Instantiate and initialize the clientapi_client = ApiClient()api_client.configuration.access_token = 'YOUR ACCESS TOKEN'# Get an instance of the Square API you want callapi_instance = CustomersApi(api_client)# Build the requestcreate_customer_request = CreateCustomerRequest(  given_name=new_customer['given_name'],  address=new_customer['address'],)# Call create_customer method to create a new customer and handle the responsetry:  api_response = api_instance.create_customer(create_customer_request)  print(f&quot;Success: {api_response.customer}&quot;)except ApiException as err:  print(f&quot;Exception when calling CustomersApi-&gt;create_customer: {err}&quot;)```Now consider equivalent code using the new `square` library:```pythonfrom square.client import Client# Instantiate the clientclient = Client(access_token='YOUR ACCESS TOKEN')# Call create_customer method to create a new customerresult = client.customers.create_customer(new_customer)# Handle the resultif result.is_success():  # Display the response as text  print(f&quot;Success: {result.text}&quot;)# Call the error method to see if the call failedelif result.is_error():  print(f&quot;Errors: {result.errors}&quot;)```That's it! What was once a multi-block process can be handled in 2 lines of codeand an `if/elif` block. Migrating to the `square` library reduces boilerplateand lets you can focus on the parts of your code that really matter.&lt;br/&gt;---&lt;br/&gt;## Ask the communityPlease join us in our [Square developer community] if you have any questions![//]: # &quot;Link anchor definitions&quot;[Square Logo]: https://docs.connect.squareup.com/images/github/github-square-logo.svg[Square Python SDK]: https://github.com/square/square-python-sdk[Square developer community]: https://squ.re/slack[Square Python SDK](https://github.com/square/square-python-sdk)</longdescription>
</pkgmetadata>