<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django reCAPTCHA &lt;!-- omit from toc --&gt;**Django reCAPTCHA form field/widget integration app.**[![PyPI latest version](https://img.shields.io/pypi/v/django-recaptcha.svg)](https://pypi.org/project/django-recaptcha/)[![PyPI monthly downloads](https://img.shields.io/pypi/dm/django-recaptcha.svg)](https://pypi.org/project/django-recaptcha/)[![CI status](https://github.com/torchbox/django-recaptcha/workflows/CI/badge.svg)](https://github.com/torchbox/django-recaptcha/actions)[![Coverage](https://coveralls.io/repos/github/torchbox/django-recaptcha/badge.svg?branch=main)](https://coveralls.io/github/torchbox/django-recaptcha?branch=main)&gt; [!NOTE]&gt; django-recaptcha supports Google reCAPTCHA V2 - Checkbox (Default), Google reCAPTCHA V2 - Invisible and Google reCAPTCHA V3. Please look at the widgets section for more information.&gt;&gt; Django reCAPTCHA uses a modified version of the [Python reCAPTCHA client](http://pypi.python.org/pypi/recaptcha-client) which is included in the package as `client.py`.- [Requirements](#requirements)- [Installation](#installation)- [Usage](#usage)  - [Fields](#fields)  - [Widgets](#widgets)  - [reCAPTCHA V3 Score](#recaptcha-v3-score)  - [reCAPTCHA V3 Action](#recaptcha-v3-action)  - [Local Development and Functional Testing](#local-development-and-functional-testing)- [Credits](#credits)## RequirementsTested with:- Python: 3.8, 3.9, 3.10, 3.11- Django: 3.2, 4.1, 4.2- You can view the [Python-Django support matrix  here](https://docs.djangoproject.com/en/dev/faq/install/#what-python-version-can-i-use-with-django)This package only supports modern, “evergreen” desktop and mobilebrowsers. For IE11 support, make sure to add a [polyfill forElement.closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill).## Installation1.  [Sign up for reCAPTCHA](https://www.google.com/recaptcha/intro/index.html).2.  Install with `pip install django-recaptcha`.3.  Add `'django_recaptcha'` to your `INSTALLED_APPS` setting.```pythonINSTALLED_APPS = [    ...,    'django_recaptcha',    ...]```4.  Add the Google reCAPTCHA keys generated in step 1 to your Django    production settings with `RECAPTCHA_PUBLIC_KEY` and    `RECAPTCHA_PRIVATE_KEY`. Note that omitting these settings will    default to a set of test keys refer to [Local Development and    Functional Testing](#local-development-and-functional-testing) for    more information.For example:```pythonRECAPTCHA_PUBLIC_KEY = 'MyRecaptchaKey123'RECAPTCHA_PRIVATE_KEY = 'MyRecaptchaPrivateKey456'```These can also be specified per field by passing the `public_key`or `private_key` parameters to `ReCaptchaField` - see field usagebelow.5.  (OPTIONAL) If you require a proxy, add a `RECAPTCHA_PROXY` setting    (dictionary of proxies), for example:```pythonRECAPTCHA_PROXY = {'http': 'http://127.0.0.1:8000', 'https': 'https://127.0.0.1:8000'}```6.  (OPTIONAL) In the event `www.google.com` is not accessible the    `RECAPTCHA_DOMAIN` setting can be changed to `www.recaptcha.net` as    per the [reCAPTCHA    FAQ](https://developers.google.com/recaptcha/docs/faq#can-i-use-recaptcha-globally):```pythonRECAPTCHA_DOMAIN = 'www.recaptcha.net'```This will change the Google JavaScript api domain as well as the clientside field verification domain.## Usage### FieldsThe quickest way to add reCAPTCHA to a form is to use the included`ReCaptchaField` field class. A `ReCaptchaV2Checkbox` will be renderedby default. For example:```pythonfrom django import formsfrom django_recaptcha.fields import ReCaptchaFieldclass FormWithCaptcha(forms.Form):    captcha = ReCaptchaField()```Be sure to include the captcha field in your forms. There are many waysto add fields to forms in Django. We recommend you refer to the [formrenderingoptions](https://docs.djangoproject.com/en/dev/topics/forms/#form-rendering-options)and [rendering fieldsmanually](https://docs.djangoproject.com/en/dev/topics/forms/#rendering-fields-manually)sections of the [official Django documentation forforms](https://docs.djangoproject.com/en/dev/topics/forms).To allow for runtime specification of keys you can optionally pass the`private_key` or `public_key` parameters to the constructor. Forexample:```pythoncaptcha = ReCaptchaField(    public_key='76wtgdfsjhsydt7r5FFGFhgsdfytd656sad75fgh',    private_key='98dfg6df7g56df6gdfgdfg65JHJH656565GFGFGs',)```If specified, these parameters will be used instead of your reCAPTCHAproject settings.### WidgetsThere are three widgets that can be used with the `ReCaptchaField`class:- `ReCaptchaV2Checkbox` for [Google reCAPTCHA V2 - Checkbox](https://developers.google.com/recaptcha/docs/display)- `ReCaptchaV2Invisible` for [Google reCAPTCHA V2 - Invisible](https://developers.google.com/recaptcha/docs/invisible)- `ReCaptchaV3` for [Google reCAPTCHA V3](https://developers.google.com/recaptcha/docs/v3)To make use of widgets other than the default Google reCAPTCHA V2 -Checkbox widget, simply replace the `ReCaptchaField` widget. Forexample:```pythonfrom django import formsfrom django_recaptcha.fields import ReCaptchaFieldfrom django_recaptcha.widgets import ReCaptchaV2Invisibleclass FormWithCaptcha(forms.Form):    captcha = ReCaptchaField(widget=ReCaptchaV2Invisible)```The reCAPTCHA widget supports several [dataattributes](https://developers.google.com/recaptcha/docs/display#render_param)that customize the behaviour of the widget, such as `data-theme`,`data-size`, etc. You can forward these options to the widget by passingan `attrs` parameter to the widget, containing a dictionary of options.For example:```pythoncaptcha = fields.ReCaptchaField(    widget=widgets.ReCaptchaV2Checkbox(        attrs={            'data-theme': 'dark',            'data-size': 'compact',        }    ))# The ReCaptchaV2Invisible widget# ignores the &quot;data-size&quot; attribute in favor of 'data-size=&quot;invisible&quot;'```The reCAPTCHA api supports several[parameters](https://developers.google.com/recaptcha/docs/display#js_param).To customise the parameters that get sent along pass an `api_params`parameter to the widget, containing a dictionary of options. Forexample:```pythoncaptcha = fields.ReCaptchaField(    widget=widgets.ReCaptchaV2Checkbox(        api_params={'hl': 'cl', 'onload': 'onLoadFunc'}    ))# The dictionary is urlencoded and appended to the reCAPTCHA api url.```By default, the widgets provided only supports a single form with asingle widget on each page.The language can be set with the 'h1' parameter, look at [languagecodes](https://developers.google.com/recaptcha/docs/language) for thelanguage code options. Note that translations need to be added to thispackage for the errors to be shown correctly. Currently the package haserror translations for the following language codes: es, fr, nl, pl,pt_BR, ru, zh_CN, zh_TWHowever, the JavaScript used by the widgets can easily be overridden inthe templates.The templates are located in:- `django_recaptcha/includes/js_v2_checkbox.html` for overriding the reCAPTCHA V2 - Checkbox template- `django_recaptcha/includes/js_v2_invisible.html` for overriding the reCAPTCHA V2 - Invisible template- `django_recaptcha/includes/js_v3.html` for overriding the reCAPTCHA V3 templateFor more information about overriding templates look at [Django's template override](https://docs.djangoproject.com/en/4.2/howto/overriding-templates/)### reCAPTCHA V3 ScoreAs of version 3, reCAPTCHA also returns a score value. This can be usedto determine the likelihood of the page interaction being a bot. See the Google [documentation](https://developers.google.com/recaptcha/docs/v3#score)for more details.To set a project wide score limit use the `RECAPTCHA_REQUIRED_SCORE` setting.For example:```pythonRECAPTCHA_REQUIRED_SCORE = 0.85```For per field, runtime, specification the attribute can also be passed to the widget:```pythoncaptcha = fields.ReCaptchaField(    widget=ReCaptchaV3(        attrs={            'required_score':0.85,            ...        }    ))```In the event the score does not meet the requirements, the fieldvalidation will fail as expected and an error message will be logged.### reCAPTCHA V3 Action[Google's reCAPTCHA V3 API supports passing an action value](https://developers.google.com/recaptcha/docs/v3#actions).Actions allow you to tie reCAPTCHA validations to a specific form on your site for analytical purposes, enabling you to perform risk analysis per form. This will allow you to make informed decisions about adjusting the score threshold for certain forms because abusive behavior can vary depending on the nature of the form.To set the action value, pass an `action` argument when instantiating the ReCaptchawidget. Be careful to only use alphanumeric characters, slashes and underscores as stated in the reCAPTCHA documentation.```pythoncaptcha = fields.ReCaptchaField(    widget=widgets.ReCaptchaV3(        action='signup'    ))```Setting an action is entirely optional. If you don't specify an action, no action will be passed to the reCAPTCHA V3 API.### Local Development and Functional TestingIf `RECAPTCHA_PUBLIC_KEY` and `RECAPTCHA_PRIVATE_KEY` are not set,django-recaptcha will use [Google's testkeys](https://developers.google.com/recaptcha/docs/faq) instead. Thesecannot be used in production since they always validate to true and awarning will be shown on the reCAPTCHA. Google's test keys only work forreCAPTCHA version 2.To bypass the security check that prevents the test keys from being usedunknowingly add`SILENCED_SYSTEM_CHECKS = [..., 'django_recaptcha.recaptcha_test_key_error', ...]`to your settings, here is an example:```pythonSILENCED_SYSTEM_CHECKS = ['django_recaptcha.recaptcha_test_key_error']```If you want to mock the call to Google's servers altogether, have a lookat[test_fields.py](https://github.com/torchbox/django-recaptcha/blob/main/captcha/tests/test_fields.py):```pythonfrom unittest.mock import patchfrom django.test import TestCasefrom django_recaptcha.client import RecaptchaResponseclass TestFields(TestCase):    @patch(&quot;django_recaptcha.fields.client.submit&quot;)    def test_client_success_response(self, mocked_submit):        mocked_submit.return_value = RecaptchaResponse(is_valid=True)        ...```## CreditsOriginally developed by [Praekelt Consulting](https://github.com/praekelt/django-recaptcha)Inspired Marco Fucci's blogpost titled [Integrating reCAPTCHA with Django](http://www.marcofucci.com/tumblelog/26/jul/2009/integrating-recaptcha-with-django)`client.py` taken from [recaptcha-client](http://pypi.python.org/pypi/recaptcha-client) licensed MIT/X11 by Mike Crawford.reCAPTCHA copyright 2012 Google.# Authors## Current Maintainers- [Andrew Chen Wang](https://github.com/Andrew-Chen-Wang)- [Storm Heg](https://github.com/Stormheg)## Praekelt Consulting- Shaun Sephton- Peter Pistorius- Hedley Roos- Altus Barry- Cilliers Blignaut## bTaylor Design- [Brandon Taylor](http://btaylordesign.com/)## Other- Brooks Travis- [Denis Mishchishin](https://github.com/denz)- [Joshua Peper](https://github.com/zout)- [Rodrigo Primo](https://github.com/rodrigoprimo)- [snnwolf](https://github.com/snnwolf)- [Adriano Orioli](https://github.com/Aorioli)- [cdvv7788](https://github.com/cdvv7788)- [Daniel Gatis Carrazzoni](https://github.com/danielgatis)- [pbf](https://github.com/pbf)- [Alexey Subbotin](https://github.com/dotsbb)- [Sean Stewart](https://github.com/mindcruzer)- [Rob Charlwood](https://github.com/robcharlwood)- [Ruslan Kovtun](https://github.com/koutoftimer)</longdescription>
</pkgmetadata>