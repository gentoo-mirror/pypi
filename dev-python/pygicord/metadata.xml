<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PygicordAn easy-to-use feature-rich pagination wrapper for discord.py&lt;a href=&quot;https://github.com/davidetacchini/pygicord/actions&quot; traget=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/davidetacchini/pygicord/workflows/Lint/badge.svg&quot; alt=&quot;Lint&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/davidetacchini/pygicord/actions&quot; traget=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/davidetacchini/pygicord/workflows/Deploy/badge.svg&quot; alt=&quot;Deploy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pygicord&quot; traget=&quot;_blank&quot;&gt;   &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/pygicord&quot;&gt; &lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pygicord&quot; traget=&quot;_blank&quot;&gt;    &lt;img alt=&quot;PyPI - Version&quot; src=&quot;https://img.shields.io/pypi/v/pygicord&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/pygicord&quot; traget=&quot;_blank&quot;&gt;&lt;img alt=&quot;PePy - Downloads&quot; src=&quot;https://pepy.tech/badge/pygicord&quot;&gt;&lt;/a&gt;## Contents* [Installing](#installing)* [Getting Started](#getting-started)* [Basic Paginator](#basic-paginator)* [Attributes](#attributes)* [Custom Emojis](#custom-emojis)* [Configuration](#configuration)* [Custom Paginator](#custom-paginator)* [New Paginator](#new-paginator)## Installing```shellpip install pygicord```or via git:```shellpip install git+https://github.com/davidetacchini/pygicord```### NoteIt is recommended using the latest stable version of &lt;a href=&quot;https://discordpy.readthedocs.io/en/stable/&quot;&gt;discord.py&lt;/a&gt;.## Getting Started### Basic Paginator```pyfrom pygicord import Paginatordef get_pages():    pages = []    for i in range(1, 6):        embed = discord.Embed()        embed.title = f&quot;Embed no. {i}&quot;        pages.append(embed)    return pages@bot.command()async def test(ctx):    pages = get_pages()    paginator = Paginator(pages=pages)    await paginator.start(ctx)```### Attributes| Name        | Description                                                 | Type                  | Default         ||-------------|-------------------------------------------------------------|-----------------------|-----------------|| pages       | A list of objects to paginate or just one.                  | Union[Any, List[Any]] |                 || embed_links | Whether to check for Embed Links permission.                | bool                  | True            || timeout     | The timeout to wait before stopping the pagination session. | float                 | 90.0            || emojis      | The custom emojis to use.                                   | Mapping[str, str]     | Discord natives || config      | The configuration to use.                                   | pygicord.Config       | Config.DEFAULT  || force_lock  | Whether to force adding the lock.                           | bool                  | False           |* emojis attribute is a Mapping of old emoji codes to new emoji codes. Keep reading to understand how to set your custom emojis.* force_lock adds a reaction that allows the author of the message to share/unshare the reaction controller to other server members.Supported emojis formats:* Emoji: &quot;ðŸš€&quot; (not recommended)* Unicode: &quot;\U0001F680&quot;* Unicode name: &quot;\N{ROCKET}&quot;* Custom emoji: &quot;:custom_emoji:123456&quot;### Custom Emojis```pyfrom pygicord import Paginator# copy this and replace the values.custom_emojis = {     &quot;\U000023EA&quot;: &quot;REPLACE (first page)&quot;,    &quot;\U000025C0&quot;: &quot;REPLACE (previous page)&quot;,    &quot;\U000023F9&quot;: &quot;REPLACE (stop session)&quot;,    &quot;\U000025B6&quot;: &quot;REPLACE (next page)&quot;,    &quot;\U000023E9&quot;: &quot;REPLACE (last page)&quot;,    &quot;\U0001F522&quot;: &quot;REPLACE (input numbers)&quot;,    &quot;\U0001F512&quot;: &quot;REPLACE (lock unlock)&quot;,}@bot.commandasync def test(ctx):    paginator = Paginator(pages=pages, emojis=custom_emojis)    await paginator.start(ctx)```### ConfigurationConfig.RICH is the only configuration to have the lock set by default.You must set `force_lock` to True if you want to add it to all other configurations.| Type           | Controller                                     ||----------------|------------------------------------------------|| Config.DEFAULT | first, previous, stop, next, last, input       || Config.MINIMAL | previous, stop, next                           || Config.PLAIN   | first, previous, stop, next, last              || Config.RICH    | first, previous, stop, next, last, input, lock || Control  | Action                                                         ||----------|----------------------------------------------------------------|| first    | Jump to first page                                             || previous | Go to next page                                                || stop     | Stop pagination session                                        || next     | Go to next page                                                || last     | Jump to last page                                              || input    | Enter a page number to jump to                                 || input    | Share/unshare the reaction controller to other server members. |```pyfrom pygicord import Config, Paginator@bot.command()async def test(ctx):    paginator = Paginator(pages=pages, config=Config.MINIMAL)    await paginator.start(ctx)```### Custom Paginator```pyfrom pygicord import Paginator, controlclass CustomPaginator(Paginator):    @control(emoji=&quot;\N{INFORMATION SOURCE}&quot;, position=4.5)    async def show_info(self, payload):        &quot;&quot;&quot;Shows this message.&quot;&quot;&quot;        desc = []        for emoji, control_ in self.controller.items():            desc.append(f&quot;{emoji}: {control_.callback.__doc__}&quot;)        embed = discord.Embed()        embed.description = &quot;\n&quot;.join(desc)        embed.set_footer(text=&quot;Press any reaction to go back.&quot;)        await self.message.edit(content=None, embed=embed)pages = [f&quot;Page no. {i}&quot; for i in range(1, 6)]@bot.command()async def test(ctx):    paginator = CustomPaginator(pages=pages)    await paginator.start(ctx)```### New Paginator```pyfrom pygicord import Base, StopAction, StopPagination, controlclass MyPaginator(Base):    @control(emoji=&quot;\N{BLACK SQUARE FOR STOP}&quot;, position=2)    async def stop(self, payload):        &quot;&quot;&quot;Stop pagination.&quot;&quot;&quot;        raise StopPagination(StopAction.DELETE_MESSAGE)    @stop.display_if    def stop_display_if(self):        &quot;&quot;&quot;Only displays when pages are atleast 2.&quot;&quot;&quot;        return len(self) &gt; 1    @stop.invoke_if    def stop_invoke_if(self, payload):        &quot;&quot;&quot;Only the author can stop the session.&quot;&quot;&quot;        return self.ctx.author.id == payload.user_idpages = [f&quot;Page no. {i}&quot; for i in range(1, 6)]@bot.command()async def test(ctx):    paginator = MyPaginator(pages=pages)    await paginator.start(ctx)```You can find more exhaustive examples in the examples folder.</longdescription>
</pkgmetadata>