<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TiledTiled is a **data access** service for data-aware portals and data science tools.Tiled has a Python client and integrates naturally with Python data sciencelibraries, but nothing about the service is Python-specific; it also works froma web browser or any Internet-connected program.Tiledâ€™s service can sit atop databases, filesystems, and/or remoteservices to enable **search** and **structured, chunkwise access to data** in anextensible variety of appropriate formats, providing data in a consistentstructure regardless of the format the data happens to be stored in at rest. Thenatively-supported formats span slow but widespread interchange formats (e.g.CSV, JSON) and fast, efficient ones (e.g. C buffers, Apache Arrow and Parquet).Tiled enables slicing and sub-selection to read and transfer only the data ofinterest, and it enables parallelized download of many chunks at once. Users canaccess data with very light software dependencies and fast partial downloads.Tiled puts an emphasis on **structures** rather than formats, including:* N-dimensional strided arrays (i.e. numpy-like arrays)* Sparse arrays* Tabular data (e.g. pandas-like &quot;dataframes&quot;)* Nested, variable-sized data (as implemented by [AwkwardArray](https://awkward-array.org/))* Hierarchical structures thereof (e.g. xarrays, HDF5-compatible structures like NeXus)Tiled implements extensible **access control enforcement** based on web securitystandards, similar to JuptyerHub. Like Jupyter, Tiled can be used by a singleuser or deployed as a shared public or private resource. Tiled can be configuredto use third party services for login, such as Google, ORCID. or any OIDCor SAML authentication providers.Tiled facilitates **client-side caching** in a standard web browser or inTiled's Python client, making efficient use of bandwidth. It uses**service-side caching** of &quot;hot&quot; datasets and resources to expedite bothrepeat requests (e.g. when several users are requesting the same chunks ofdata) and distinct requests for different parts of the same dataset (e.g. whenthe user is requesting various slices or columns from a dataset).| Distribution   | Where to get it                                              || -------------- | ------------------------------------------------------------ || PyPI           | `pip install tiled`                                          || Conda          | `conda install -c conda-forge tiled-client tiled-server`     || Source code    | [github.com/bluesky/tiled](https://github.com/bluesky/tiled) || Documentation  | [blueskyproject.io/tiled](https://blueskyproject.io/tiled)   |## ExampleIn this example, we'll serve of a collection of data that is generated inmemory.  Alternatively, it could be read on demand from a directory of files,network resource, database, or some combination of these.```tiled serve demo# equivalent to:# tiled serve pyobject --public tiled.examples.generated:tree```And then access the data efficiently via the Python client, a web browser, orany HTTP client.```python&gt;&gt;&gt; from tiled.client import from_uri&gt;&gt;&gt; client = from_uri(&quot;http://localhost:8000&quot;)&gt;&gt;&gt; client&lt;Container {'short_table', 'long_table', 'structured_data', ...} ~10 entries&gt;&gt;&gt;&gt; list(client)'big_image', 'small_image', 'tiny_image', 'tiny_cube', 'tiny_hypercube', 'low_entropy', 'high_entropy', 'short_table', 'long_table', 'labeled_data', 'structured_data']&gt;&gt;&gt; client['medium_image']&lt;ArrayClient&gt;&gt;&gt;&gt; client['medium_image'][:]array([[0.49675483, 0.37832119, 0.59431287, ..., 0.16990737, 0.5396537 ,        0.61913812],       [0.97062498, 0.93776709, 0.81797714, ..., 0.96508877, 0.25208564,        0.72982507],       [0.87173234, 0.83127946, 0.91758202, ..., 0.50487542, 0.03052536,        0.9625512 ],       ...,       [0.01884645, 0.33107071, 0.60018523, ..., 0.02268164, 0.46955907,        0.37842628],       [0.03405101, 0.77886243, 0.14856727, ..., 0.02484926, 0.03850398,        0.39086524],       [0.16567224, 0.1347261 , 0.48809697, ..., 0.55021249, 0.42324589,        0.31440635]])&gt;&gt;&gt; client['long_table']&lt;DataFrameClient ['A', 'B', 'C']&gt;&gt;&gt;&gt; client['long_table'].read()              A         B         Cindex0      0.246920  0.493840  0.7407591      0.326005  0.652009  0.9780142      0.715418  1.430837  2.1462553      0.425147  0.850294  1.2754414      0.781036  1.562073  2.343109...         ...       ...       ...99995  0.515248  1.030495  1.54574399996  0.639188  1.278376  1.91756499997  0.269851  0.539702  0.80955399998  0.566848  1.133695  1.70054399999  0.101446  0.202892  0.304338[100000 rows x 3 columns]&gt;&gt;&gt; client['long_table'].read(['A', 'B'])              A         Bindex0      0.246920  0.4938401      0.326005  0.6520092      0.715418  1.4308373      0.425147  0.8502944      0.781036  1.562073...         ...       ...99995  0.515248  1.03049599996  0.639188  1.27837699997  0.269851  0.53970299998  0.566848  1.13369599999  0.101446  0.202892```Using an Internet browser or a command-line HTTP client like[curl](https://curl.se/) or [httpie](https://httpie.io/) you can download thedata in whole or in efficiently-chunked parts in the format of your choice:```# Download tabular data as CSVhttp://localhost:8000/api/v1/node/full/long_table?format=csv# or XLSX (Excel)http://localhost:8000/api/v1/node/full/long_table?format=xslx# and subselect columns.http://localhost:8000/api/v1/node/full/long_table?format=xslx&amp;field=A&amp;field=B# View or download (2D) array data as PNGhttp://localhost:8000/api/v1/array/full/medium_image?format=png# and slice regions of interest.http://localhost:8000/api/v1/array/full/medium_image?format=png&amp;slice=:50,100:200```Web-based data access usually involves downloading complete files, in themanner of [Globus](https://www.globus.org/); or using modern chunk-basedstorage formats, such as [TileDB](https://tiledb.com/) and[Zarr](https://zarr.readthedocs.io/en/stable/) in local or cloud storage; orusing custom solutions tailored to a particular large dataset. Waiting for anentire file to download when only the first frame of an image stack or acertain column of a table are of interest is wasteful and can be prohibitivefor large longitudinal analyses. Yet, it is not always practical to transcodethe data into a chunk-friendly format or build a custom tile-based-accesssolution. (Though if you can do either of those things, you should considerthem instead!)</longdescription>
</pkgmetadata>