<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>immutable-views - Immutable views on other collection objects=============================================================.. image:: https://badge.fury.io/py/immutable-views.svg    :target: https://pypi.python.org/pypi/immutable-views/    :alt: Version on Pypi.. image:: https://github.com/andy-maier/immutable-views/workflows/test/badge.svg?branch=master    :target: https://github.com/andy-maier/immutable-views/actions/    :alt: Actions status.. image:: https://readthedocs.org/projects/immutable-views/badge/?version=latest    :target: https://readthedocs.org/projects/immutable-views/builds/    :alt: Docs build status (master).. image:: https://coveralls.io/repos/github/andy-maier/immutable-views/badge.svg?branch=master    :target: https://coveralls.io/github/andy-maier/immutable-views?branch=master    :alt: Test coverage (master)Overview--------The **immutable-views** package provides collection classes that are immutableviews on other (mutable) collection objects:* `DictView &lt;https://immutable-views.readthedocs.io/en/latest/api_dict_view.html&gt;`_ -  immutable view on another mapping (dictionary) object.* `ListView &lt;https://immutable-views.readthedocs.io/en/latest/api_list_view.html&gt;`_ -  immutable view on another sequence (list) object.* `SetView &lt;https://immutable-views.readthedocs.io/en/latest/api_set_view.html&gt;`_ -  immutable view on another set object.An important behavior of views is that they are &quot;live&quot;: Since the view classesdelegate to the underlying collection, any modification of the underlyingcollection object will be visible in the view object.Creating an immutable view on a collection does not copy the collection andis therefore much faster than creating an immutable copy of the collection.The memory overhead of using immutable views is very small: An objectof any of the view classes in the **immutable-views** package occupies 40 Bytes(measured in CPython 3.9 on macOS), and because the view object only has areference to its underlying collection object, that size is independent of thenumber of items in the collection.The compute overhead is also very small, it is basically an additional functioncall to the corresponding function of the underlying collection.Immutable views are useful if a method or function maintains data in form of amutable collection and is intended to return that data but users should not beable to modify the data. The underlying collection can be updated by the methodor function as needed, but the caller only gets an immutable view on it.The view classes in the **immutable-views** package implement the completebehavior of the corresponding Python collection types except for anyoperations that would modify the underlying collection object.The view classes delegate all operations to the underlying collection objectthey are a view of. Therefore, the underlying collection can be any kind ofcollection implementation (i.e. not just the standard Python collectionclasses).Note that the immutability of the view objects only applies to the view objectitself and to its underlying collection, but not to the items in the underlyingcollection. So if the underlying collection contains mutable objects, they willstill be mutable when accessed through the view objects.The standard Python class`types.MappingProxyType &lt;https://docs.python.org/3/library/types.html#types.MappingProxyType&gt;`_serves the same purpose as the`DictView &lt;https://immutable-views.readthedocs.io/en/latest/api_dict_view.html&gt;`_class but it does not support pickling or hashing and was added only inPython 3.3.The ``dictproxy`` class from the`dictproxyhack &lt;https://pypi.org/project/dictproxyhack/&gt;`_package on Pypi supports Python 2 and Python 3 and uses Python classes whereavailable (e.g. ``MappingProxyType`` on Python 3.3 and later, and the internal``mappingproxy`` class used for ``__dict__`` on CPython) but also does notsupport pickling or hashing.The lack of support for standard dictionary behaviors prevents their use incases where the view class is used as a read-only replacement for the standarddictionary.Note that there are several packages on Pypi that provide immutablecollections, but they all are collections on their own, and not views onother collections. Here is a notable subset of such packages:* `immutables &lt;https://pypi.org/project/immutables/&gt;`_* `pyimmutable &lt;https://pypi.org/project/pyimmutable/&gt;`_* `frozenordereddict &lt;https://pypi.org/project/frozenordereddict/&gt;`_* `immutabledict &lt;https://pypi.org/project/immutabledict/&gt;`_* `frozendict &lt;https://pypi.org/project/immutabledict/&gt;`_* `itypes &lt;https://pypi.org/project/itypes/&gt;`_* `HashableDict &lt;https://pypi.org/project/HashableDict/&gt;`_* `shoobx.immutable &lt;https://pypi.org/project/shoobx.immutable/&gt;`_* `immutable-collection &lt;https://pypi.org/project/immutable-collection/&gt;`_* `Dict-Path-Immutable &lt;https://pypi.org/project/Dict-Path-Immutable/&gt;`_.. _`Examples`:Examples--------Example with dictionaries:.. code-block:: bash    $ python    &gt;&gt;&gt; from immutable_views import DictView    &gt;&gt;&gt; dict1 = {'a': 1, 'b': 2}    &gt;&gt;&gt; dictview1 = DictView(dict1)    # Read-only access to the underlying collection through the view is supported:    &gt;&gt;&gt; dictview1['a']    1    # Modifying the underlying collection through the view is rejected:    &gt;&gt;&gt; dictview1['a'] = 2    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    TypeError: 'DictView' object does not support item assignment    # Modifications of the underlying collection are visible in the view:    &gt;&gt;&gt; dict1['a'] = 2    &gt;&gt;&gt; dictview1['a']    2Example with lists:.. code-block:: bash    $ python    &gt;&gt;&gt; from immutable_views import ListView    &gt;&gt;&gt; list1 = ['a', 'b']    &gt;&gt;&gt; listview1 = ListView(list1)    # Read-only access to the underlying collection through the view is supported:    &gt;&gt;&gt; listview1[0]    'a'    # Modifying the underlying collection through the view is rejected:    &gt;&gt;&gt; listview1[0] = 'c'    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    TypeError: 'ListView' object does not support item assignment    # Modifications of the underlying collection are visible in the view:    &gt;&gt;&gt; list1[0] = 'c'    &gt;&gt;&gt; listview1[0]    'c'Example with sets:.. code-block:: bash    $ python    &gt;&gt;&gt; from immutable_views import SetView    &gt;&gt;&gt; set1 = {'a', 'b'}    &gt;&gt;&gt; setview1 = SetView(set1)    # Read-only access to the underlying collection through the view is supported:    &gt;&gt;&gt; 'a' in setview1    True    # Modifying the underlying collection through the view is rejected:    &gt;&gt;&gt; setview1.add('c')    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    AttributeError: 'SetView' object has no attribute 'add'    # Modifications of the underlying collection are visible in the view:    &gt;&gt;&gt; set1.add('c')    &gt;&gt;&gt; 'c' in setview1    TrueDocumentation and change log----------------------------* `Documentation &lt;https://immutable-views.readthedocs.io/en/latest/&gt;`_* `Change log &lt;https://immutable-views.readthedocs.io/en/latest/changes.html&gt;`_License-------The **immutable-views** project is provided under the`Apache Software License 2.0 &lt;https://raw.githubusercontent.com/andy-maier/immutable-views/master/LICENSE&gt;`_.</longdescription>
</pkgmetadata>