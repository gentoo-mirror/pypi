<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># React Pages##### A zero-fuss way to create non single page apps with react.- Zero Configuration required.   Mostly thanks to   [create-react-app](https://github.com/facebook/create-react-app).- [Custom react scripts](https://github.com/kitze/custom-react-scripts)   inbuilt.- Allows cross-page imports   (create-react-app [doesn't allow this](https://github.com/facebook/create-react-app/issues/834)).- Ready-to-serve production builds with the proper paths.    (using `--static-url` option)- Natively use react in django.- Go from development to production with ease.- Donwloads npm packages only once, per virtualenv. &lt;br&gt;    This means creating a new project is **really fast**    (at the cost of installation time).- Respect `NODE_ENV` var wherever possible    (see [.env](react_pages/nodejs/.env)). &lt;br&gt;- Supports sass-loader, essential for    [material-components-web](https://github.com/material-components/material-components-web).## Terminology#### ProjectThe project contains the node.js modules necessary to use react and the pages you create.```└── my_project    ├── package.json    ├── package-lock.json    ├── .env    ├── .gitignore    ├── public    │   ├── favicon.ico    │   ├── index.html    │   └── manifest.json    &lt;pages&gt;```#### Page:A page is a directory containing at least an `index.js` file,(and other css/js files specific to your application.)```└── my_page    ├── App.css    ├── App.js    ├── App.test.js    ├── index.css    ├── index.js    ├── logo.svg    └── registerServiceWorker.js```## Install`pip install react-pages`License: MIT License (MIT)&lt;br&gt;Requires: Python &gt;=3.6---If you don't have node, &lt;br&gt;For bash, use [nvm](https://github.com/creationix/nvm#installation).For fish shell, you can use `fisher fnm`([get fisher](https://github.com/fisherman/fisherman)).Once you have npm/node, react pages will work as expected.*TODO: make react-pages automatically install node*## Commands```sh$ react-pages project my_project # create a &quot;project&quot;$ cd my_project # don't forget to do this!$ react-pages page my_page # create a &quot;page&quot;$ react-pages develop # development$ react-pages deploy # production# Open `./my_project/build/my_page/index.html` in browser$ react-pages runserver # django runserver alternative$ react-pages --build-cache # rebuild the cache$ react-pages --rm # clear the cache$ react-pages --cache # ouput the cache dir```## Django Integration### Remember to use `react-pages runserver` instead of `manage.py runserver`!(This was done to remove the manual build step).### Setup__settings.py__```INSTALLED_APPS = [    ...    'react_pages',    ...]# specify the react-pages project directoryREACT_PAGES_PROJECT_DIR = os.path.join(BASE_DIR, 'my_project')STATICFILES_DIRS = [    ...    os.path.join(REACT_PAGES_PROJECT_DIR, 'build')  # mark the build dir as a static file dir    ...]```### Usage__template.html__```{% load react_pages %}...{% render_react_page 'my_page' %}...```That's it!&lt;br&gt;React Pages will pick-up the &quot;my_page&quot; page from &quot;my_project&quot; project and do the necessary work to transpile react JSX.#### For production, just put `DEBUG=False` in `settings.py` and relax.**Note: This is not implemented yet.**### Django ContextYou can pass django template context varialbes like so -__views.py__```pythoncontext['py_var'] = [1, 2, 3]```__template.html__```html{% render_react_page 'my_page' js_var=py_var %}```__my_page/App.js__```jsconsole.log(js_var);```**Note: These must be JSON serializable or JSON serialized.**### Class Based View__views.py__```pythonfrom react_pages.views import ReactPageViewclass MyPageView(ReactPageView):    page_name = 'my_page'```__urls.py__```urlpatterns = [    ...    path('my_page/', views.MyPageView.as_view(), name=&quot;my page&quot;),]```when you go over to 'my_page/' url,you'll see the react page rendered in its full glory!To pass the a context to JS, define a `get_js_context()` method__views.py__```pythonclass MyPageView(ReactPageView):    page_name = 'my_page'    def get_js_context(self):        return {'js_var': 'Hello!'}```__my_page/App.js__```jsconsole.log(js_var);```### Django Forms__views.py__```pythonfrom react_pages.views import ReactPagesFormViewclass MyFormView(ReactPagesFormView):    form_class = MyAwesomeForm # Any ol' Django Form    page_name = &quot;my_page&quot;```__my_page/App.js__```jsimport React, { Component } from 'react';# see the magic in console!console.log(csrf_token);console.log(form);export default class App extends Component {    render() {        return (            &lt;form                dangerouslySetInnerHTML={{                    __html: csrf_token.as_html + form.as_html                }}            /&gt;        );    }}```## Existing projectsReact Pages will automatically patch itsef into any existing project,that was created using `create-react-app`.Just run `react-pages project .` from your project directory!Projects not using `create-react-app` will probably work, but no guarantees can be made.## Issues---&lt;a href=&quot;https://www.buymeacoffee.com/u75YezVri&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/black_img.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: auto !important;width: auto !important;&quot; &gt;&lt;/a&gt;[🐍🏕️](http://www.pycampers.com/)</longdescription>
</pkgmetadata>