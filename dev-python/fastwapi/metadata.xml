<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DescriptionFastWAPI is a simple lightweight Websocket framework based on Starlette, which provide easy-to-use Python decorator to parse JSON incoming message.  It's in the same spirit as _FastAPI_, where each decorator map to an HTTP path. But here, each decorator map to a Pydantic object, and each object map to a function. # Installation`pip install fastwapi`# Disclaimer - The module is available, but far from finished &amp; polished, please do not use it in production.# Roadmap - Add authent middleware- Add background job to asynchrounosly send JSON to the client# Usage See example/main.py for complete code.Getting started in three steps :#### Instanciates the framework and declare the Websocket HTTP endpoint.  ```pythonimport uvicornfrom fastwapi import FastWAPI, WebSocketfrom pydantic import BaseModelapp = FastWAPI(endpoint=&quot;/ws&quot;)```#### Define Pyndantic model, for incoming and outgoing messages.```pythonclass CM(BaseModel):    counter: intclass SD(BaseModel):    name: str```#### Map each Pydantic model to your function.```python@app.parse(CM)async def parse_CM(websocket: WebSocket, data: CM):    print(&quot;RECEIVED CM : &quot;, data)    await websocket.send_json(data.dict())@app.parse(SD)async def parse_SD(websocket: WebSocket, data: CM):    print(&quot;RECEIVED SD : &quot;, data)    await websocket.send_json(data.dict())```## Launch your appEither through command line &quot;uvicorn main:app&quot; or directly inside the python file :```pythonif __name__ == &quot;__main__&quot;:    uvicorn.run(&quot;main:app&quot;, port=5000, log_level=&quot;info&quot;)```</longdescription>
</pkgmetadata>