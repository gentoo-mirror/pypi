<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- markdownlint-disable MD033 MD041 --&gt;&lt;h1 align=&quot;center&quot;&gt;    Streamlit Pydantic&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;strong&gt;Auto-generate Streamlit UI elements from Pydantic models.&lt;/strong&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/streamlit-pydantic/&quot; title=&quot;PyPi Version&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/streamlit-pydantic?color=green&amp;style=flat&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/streamlit-pydantic/&quot; title=&quot;Python Version&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Python-3.6%2B-blue&amp;style=flat&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/lukasmasuch/streamlit-pydantic/blob/main/LICENSE&quot; title=&quot;Project License&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-green.svg&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/lukasmasuch/streamlit-pydantic/actions?query=workflow%3Abuild-pipeline&quot; title=&quot;Build status&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/workflow/status/lukasmasuch/streamlit-pydantic/build-pipeline?style=flat&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://twitter.com/lukasmasuch&quot; title=&quot;Follow on Twitter&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/lukasmasuch.svg?style=social&amp;label=Follow&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#getting-started&quot;&gt;Getting Started&lt;/a&gt; ‚Ä¢  &lt;a href=&quot;#documentation&quot;&gt;Documentation&lt;/a&gt; ‚Ä¢  &lt;a href=&quot;#support--feedback&quot;&gt;Support&lt;/a&gt; ‚Ä¢  &lt;a href=&quot;https://github.com/lukasmasuch/streamlit-pydantic/issues/new?labels=bug&amp;template=01_bug-report.md&quot;&gt;Report a Bug&lt;/a&gt; ‚Ä¢  &lt;a href=&quot;#contribution&quot;&gt;Contribution&lt;/a&gt; ‚Ä¢  &lt;a href=&quot;https://github.com/lukasmasuch/streamlit-pydantic/releases&quot;&gt;Changelog&lt;/a&gt;&lt;/p&gt;Streamlit-pydantic makes it easy to auto-generate UI elements from [Pydantic](https://github.com/samuelcolvin/pydantic/) models or [dataclasses](https://docs.python.org/3/library/dataclasses.html). Just define your data model and turn it into a full-fledged UI form. It supports data validation, nested models, and field limitations. Streamlit-pydantic can be easily integrated into any Streamlit app.&lt;sup&gt;Beta Version: Only suggested for experimental usage.&lt;/sup&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;https://raw.githubusercontent.com/lukasmasuch/streamlit-pydantic/main/docs/images/banner.png&quot;/&gt;---&lt;p align=&quot;center&quot;&gt;     Try out and explore various examples in our playground &lt;a href=&quot;https://share.streamlit.io/lukasmasuch/streamlit-pydantic/main/playground/playground_app.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;---## Highlights- ü™Ñ&amp;nbsp; Auto-generated UI elements from Pydantic models &amp; Dataclasses.- üìá&amp;nbsp; Out-of-the-box data validation. - üìë&amp;nbsp; Supports nested Pydantic models.- üìè&amp;nbsp; Supports field limits and customizations.- üéà&amp;nbsp; Easy to integrate into any Streamlit app.## Getting Started### Installation&gt; _Requirements: Python 3.6+._```bashpip install streamlit-pydantic```### Usage1. Create a script (`my_script.py`) with a Pydantic model and render it via `pydantic_form`:    ```python    import streamlit as st    from pydantic import BaseModel    import streamlit_pydantic as sp    class ExampleModel(BaseModel):        some_text: str        some_number: int        some_boolean: bool    data = sp.pydantic_form(key=&quot;my_form&quot;, model=ExampleModel)    if data:        st.json(data.json())    ```2. Run the streamlit server on the python script: `streamlit run my_script.py`3. You can find additional examples in the [examples](#examples) section below.## Examples---&lt;p align=&quot;center&quot;&gt;     üëâ&amp;nbsp; Try out and explore these examples in our playground &lt;a href=&quot;https://share.streamlit.io/lukasmasuch/streamlit-pydantic/main/playground/playground_app.py&quot;&gt;here&lt;/a&gt;&lt;/p&gt;---The following collection of examples demonstrate how Streamlit Pydantic can be applied in more advanced scenarios. You can find additional - even more advanced - examples in the [examples folder](./examples) or in the [playground](https://share.streamlit.io/lukasmasuch/streamlit-pydantic/main/playground/playground_app.py). ### Simple Form```pythonimport streamlit as stfrom pydantic import BaseModelimport streamlit_pydantic as spclass ExampleModel(BaseModel):    some_text: str    some_number: int    some_boolean: booldata = sp.pydantic_form(key=&quot;my_form&quot;, model=ExampleModel)if data:    st.json(data.json())```### Date Validation```pythonimport streamlit as stfrom pydantic import BaseModel, Field, HttpUrlfrom pydantic.color import Colorimport streamlit_pydantic as spclass ExampleModel(BaseModel):    url: HttpUrl    color: Color    email: str = Field(..., max_length=100, regex=r&quot;^\S+@\S+$&quot;)data = sp.pydantic_form(key=&quot;my_form&quot;, model=ExampleModel)if data:    st.json(data.json())```### Dataclasses Support```pythonimport dataclassesimport jsonimport streamlit as stfrom pydantic.json import pydantic_encoderimport streamlit_pydantic as sp@dataclasses.dataclassclass ExampleModel:    some_number: int    some_boolean: bool    some_text: str = &quot;default input&quot;data = sp.pydantic_form(key=&quot;my_form&quot;, model=ExampleModel)if data:    st.json(json.dumps(data, default=pydantic_encoder))```### Complex Nested Model```pythonfrom enum import Enumfrom typing import Setimport streamlit as stfrom pydantic import BaseModel, Field, ValidationError, parse_obj_asimport streamlit_pydantic as spclass OtherData(BaseModel):    text: str    integer: intclass SelectionValue(str, Enum):    FOO = &quot;foo&quot;    BAR = &quot;bar&quot;class ExampleModel(BaseModel):    long_text: str = Field(..., description=&quot;Unlimited text property&quot;)    integer_in_range: int = Field(        20,        ge=10,        lt=30,        multiple_of=2,        description=&quot;Number property with a limited range.&quot;,    )    single_selection: SelectionValue = Field(        ..., description=&quot;Only select a single item from a set.&quot;    )    multi_selection: Set[SelectionValue] = Field(        ..., description=&quot;Allows multiple items from a set.&quot;    )    single_object: OtherData = Field(        ...,        description=&quot;Another object embedded into this model.&quot;,    )data = sp.pydantic_form(key=&quot;my_form&quot;, model=ExampleModel)if data:    st.json(data.json())```### Render Input```pythonfrom pydantic import BaseModelimport streamlit_pydantic as spclass ExampleModel(BaseModel):    some_text: str    some_number: int = 10  # Optional    some_boolean: bool = True  # Optioninput_data = sp.pydantic_input(&quot;model_input&quot;, ExampleModel, use_sidebar=True)```### Render Output```pythonimport datetimefrom pydantic import BaseModel, Fieldimport streamlit_pydantic as spclass ExampleModel(BaseModel):    text: str = Field(..., description=&quot;A text property&quot;)    integer: int = Field(..., description=&quot;An integer property.&quot;)    date: datetime.date = Field(..., description=&quot;A date.&quot;)instance = ExampleModel(text=&quot;Some text&quot;, integer=40, date=datetime.date.today())sp.pydantic_output(instance)```### Custom Form```pythonimport streamlit as stfrom pydantic import BaseModelimport streamlit_pydantic as spclass ExampleModel(BaseModel):    some_text: str    some_number: int = 10    some_boolean: bool = Truewith st.form(key=&quot;pydantic_form&quot;):    sp.pydantic_input(key=&quot;my_input_model&quot;, model=ExampleModel)    submit_button = st.form_submit_button(label=&quot;Submit&quot;)```## Support &amp; Feedback| Type                     | Channel                                              || ------------------------ | ------------------------------------------------------ || üö®&amp;nbsp; **Bug Reports**       | &lt;a href=&quot;https://github.com/lukasmasuch/streamlit-pydantic/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3Abug+sort%3Areactions-%2B1-desc+&quot; title=&quot;Open Bug Report&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/lukasmasuch/streamlit-pydantic/bug.svg?label=bug&quot;&gt;&lt;/a&gt;                                 || üéÅ&amp;nbsp; **Feature Requests**  | &lt;a href=&quot;https://github.com/lukasmasuch/streamlit-pydantic/issues?q=is%3Aopen+is%3Aissue+label%3Afeature+sort%3Areactions-%2B1-desc&quot; title=&quot;Open Feature Request&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/lukasmasuch/streamlit-pydantic/feature.svg?label=feature%20request&quot;&gt;&lt;/a&gt;                                 || üë©üíª&amp;nbsp; **Usage Questions**   |  &lt;a href=&quot;https://github.com/lukasmasuch/streamlit-pydantic/issues?q=is%3Aopen+is%3Aissue+label%3Asupport+sort%3Areactions-%2B1-desc&quot; title=&quot;Open Support Request&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/issues/lukasmasuch/streamlit-pydantic/support.svg?label=support%20request&quot;&gt;&lt;/a&gt; || üì¢&amp;nbsp; **Announcements**  | &lt;a href=&quot;https://twitter.com/lukasmasuch&quot; title=&quot;Follow me on Twitter&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/lukasmasuch.svg?style=social&amp;label=Follow&quot;&gt; |## DocumentationThe API documentation can be found [here](./docs). To generate UI elements, you can use the high-level [`pydantic_form`](./docs/streamlit_pydantic.ui_renderer.md#function-pydantic_form) method. Or the more flexible lower-level [`pydantic_input`](./docs/streamlit_pydantic.ui_renderer.md#function-pydantic_input) and [`pydantic_output`](./docs/streamlit_pydantic.ui_renderer.md#function-pydantic_output) methods. See the [examples](#examples) section on how to use those methods.## Contribution- Pull requests are encouraged and always welcome. Read our [contribution guidelines](https://github.com/lukasmasuch/streamlit-pydantic/tree/main/CONTRIBUTING.md) and check out [help-wanted](https://github.com/lukasmasuch/streamlit-pydantic/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3A&quot;help+wanted&quot;+sort%3Areactions-%2B1-desc+) issues.- Submit Github issues for any [feature request and enhancement](https://github.com/lukasmasuch/streamlit-pydantic/issues/new?assignees=&amp;labels=feature&amp;template=02_feature-request.md&amp;title=), [bugs](https://github.com/lukasmasuch/streamlit-pydantic/issues/new?assignees=&amp;labels=bug&amp;template=01_bug-report.md&amp;title=), or [documentation](https://github.com/lukasmasuch/streamlit-pydantic/issues/new?assignees=&amp;labels=documentation&amp;template=03_documentation.md&amp;title=) problems.- By participating in this project, you agree to abide by its [Code of Conduct](https://github.com/lukasmasuch/streamlit-pydantic/blob/main/.github/CODE_OF_CONDUCT.md).- The [development section](#development) below contains information on how to build and test the project after you have implemented some changes.## DevelopmentTo build the project and run the style/linter checks, execute:```bashmake installmake check```Run `make help` to see additional commands for development. ---Licensed **MIT**. Created and maintained with ‚ù§Ô∏è&amp;nbsp; by developers from Berlin.</longdescription>
</pkgmetadata>