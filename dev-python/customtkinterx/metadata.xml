<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CustomTkinterX&gt; 解释器需Python3.7及以上`customtkinter`的扩展组件功能库，同时也采集了其他开发者制作的组件，并进行仅类型提示上的修改（源代码`__main__.py`上有标注）## Fluent主题尚未完善设置，修改了`CTk` `CTkToplevel` `CTkFrame` `CTkButton` `CTKEntry` `CTkComboBox`等类。```pythonfrom customtkinter import *from customtkinterx import *CTkFluentTheme()```## CTkCustom 自定义窗口原窗口因标题栏与边框的限制，导致界面效果极差，但是仍可以通过一些方法自定义窗口`wm_overrideredirect`。平台支持`Windows` `MacOS` `Linux`，其中界面效果支持最好的是`Windows`，`MacOS` `Linux`无法使用透明色，完全消除边框使用圆角，及将图标保留至任务栏，采用置顶的方法保持窗口的显示。### 组件结构```markdown| CTkCustom -&gt; CTk|--&gt;&gt; __frame_border(mainframe): CTkFrame|--&gt;&gt; __frame_title(titlebar): CTkFrame|--&gt;&gt; __label_title(titlebar_title): CTkLabel|--&gt;&gt; __button_close(titlebar_closebutton): CTkButton|--&gt;&gt; __button_minimize(titlebar_minimizebutton): CTkButton```### 基础示例```pythonfrom customtkinter import *from customtkinterx import *root = CTkCustom()root.mainloop()```### 主题配置你可以自定义一个主题，然后加上`CTkCustom`项```json{  ...    &quot;transparent_color&quot;: &quot;#101010&quot;, // 为实现圆角边框而设置的透明色    &quot;closebutton_text_color&quot;: [&quot;#000000&quot;, &quot;#ffffff&quot;],    &quot;closebutton_color&quot;: [&quot;#f4f6f8&quot;, &quot;#212b36&quot;],    &quot;closebutton_hover_color&quot;: [&quot;#b40d1b&quot;, &quot;#b40d1b&quot;],    &quot;minimizebutton_text_color&quot;: [&quot;#000000&quot;, &quot;#ffffff&quot;],    &quot;minimizebutton_color&quot;: [&quot;#f4f6f8&quot;, &quot;#212b36&quot;],    &quot;minimizebutton_hover_color&quot;: [&quot;#dfe3e8&quot;, &quot;#454f5b&quot;]  },  ...}```### 添加缩放窗口大小的手柄```pythonCTKCustom.create_sizegrip()```自定义手柄，将会使用库`pyautogui`。```bashpython -m pip install pyautogui``````pythonCTKCustom.create_sizegrip(True)``````pythonfrom customtkinter import *from customtkinterx import *root = CTkCustom()root.create_sizegrip()root.mainloop()``````pythonfrom customtkinter import *from customtkinterx import *root = CTkCustom()root.create_sizegrip(True)root.mainloop()```## CTkInfoBar 消息栏### 组件结构```markdown| CTkInforBar -&gt; CTkFrame|--&gt;&gt; __label_title(title): CTkLabel|--&gt;&gt; __label_info(info): CTkLabel|--&gt;&gt; __button_close(close): CTkButton```### 基础示例```pythonfrom customtkinter import *from customtkinterx import *root = CTk()infobar = CTkInfoBar()infobar.show()root.mainloop()```### 主题配置你可以自定义一个主题，然后加上`CTkInfoBar`项```json{  ...  &quot;CTkInfoBar&quot;: {    &quot;corner_radius&quot;: 8,    &quot;border_width&quot;: 0,    &quot;fg_color&quot;: [&quot;#61f3f3&quot;, &quot;#006c9c&quot;],     &quot;fg_hover_color&quot;: [&quot;#cafdf5&quot;, &quot;#003768&quot;], // 关闭按钮被鼠标捕捉时的颜色    &quot;border_color&quot;: [&quot;#b0b2b2&quot;, &quot;#424556&quot;],      &quot;success_color&quot;: [&quot;#86e8ab&quot;, &quot;#1b806a&quot;],  // 取自配色severity中NORMAL值    &quot;success_hover_color&quot;: [&quot;#d8fbde&quot;, &quot;#0a5554&quot;],  // 取自配色severity中被鼠标捕捉时的NORMAL值    &quot;caution_color&quot;: [&quot;#ffd666&quot;, &quot;#b76e00&quot;],  // 取自配色severity中CAUTION值    &quot;caution_hover_color&quot;: [&quot;#fff5cc&quot;, &quot;#7a4100&quot;],  // 取自配色severity中被鼠标捕捉时的CAUTION值    &quot;critical_color&quot;: [&quot;#ffac82&quot;, &quot;#b71d18&quot;],  // 取自配色severity中CRITICAL值    &quot;critical_hover_color&quot;: [&quot;#ffe9d5&quot;, &quot;#7a0916&quot;]  // 取自配色severity中被鼠标捕捉时的CAUTION值  },  ...}```</longdescription>
</pkgmetadata>