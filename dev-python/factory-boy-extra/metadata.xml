<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Extra factories for factory_boyThis library contains 2 base factories.* AsyncSQLAlchemyModelFactory* TortoiseModelFactory## TortoiseModelFactoryIs made to use it with tortoise-orm.### UsageIt works aout of the box, if you have already initialized tortoise-orm for testing.You can check how to do this in [tortoise docs](https://tortoise-orm.readthedocs.io/en/latest/contrib/unittest.html#py-test).```pythonimport factoryfrom tortoise import fields, modelsfrom factory_boy_extra.tortoise_factory import TortoiseModelFactoryclass TargetModel(models.Model):    name = fields.CharField(max_length=200)class TargetModelFactory(TortoiseModelFactory):    name = factory.Faker(&quot;word&quot;)    class Meta:        model = TargetModel```That's it. Now you can use it in your tests, E.G.```python@pytest.mark.asyncioasync def test_factories():    targets = TargetModelFactory.create_batch(10)    actual_models = await TargetModel.all()    assert len(actual_models) == 10```## AsyncSQLAlchemyModelFactory### UsageAt your conftest.py initialize your factorieswith AsyncSession.```python@pytest.fixture(autouse=True)def init_factories(dbsession: AsyncSession) -&gt; None:    &quot;&quot;&quot;Init factories.&quot;&quot;&quot;    BaseFactory.session = dbsession```The dbsession factory can be obtained in [pytest-async-sqlalchemy](https://pypi.org/project/pytest-async-sqlalchemy/) library,or you can add it by yourself:```pythonimport pytestfrom sqlalchemy.ext.asyncio import create_async_engine, AsyncSessionfrom sqlalchemy.orm import sessionmaker@pytest.fixture()async def dbsession():    &quot;&quot;&quot;    Fixture that returns a SQLAlchemy session with a SAVEPOINT, and the rollback to it    after the test completes.    &quot;&quot;&quot;    engine = create_async_engine(database_url) # You must provide your database URL.    connection = await engine.connect()    trans = await connection.begin()    Session = sessionmaker(connection, expire_on_commit=False, class_=AsyncSession)    session = Session()    try:        yield session    finally:        await session.close()        await trans.rollback()        await connection.close()        await engine.dispose()```Now you can create factories and use them in your tests.```pythonfrom factory_boy_extra.async_sqlalchemy_factory import AsyncSQLAlchemyModelFactoryclass TargetModel(Base):    __tablename__ = &quot;targetmodel&quot;    name = Column(String(length=120), nullable=False)  # noqa: WPS432class TargetModelFactory(AsyncSQLAlchemyModelFactory):    name = factory.Faker(&quot;word&quot;)    class Meta:        model = TargetModel```In tests it wil look like this:```pythonimport pytestfrom sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy import select@pytest.mark.asyncioasync def test_successful_notification(dbsession: AsyncSession) -&gt; None:    TargetModelFactory.create_batch(10)    actual_models = (await dbsession.execute(select(TargetModel))).fetchall()    assert len(actual_models) == 10```</longdescription>
</pkgmetadata>