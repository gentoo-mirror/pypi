<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/openvax/gtfparse.svg?branch=master)](https://travis-ci.org/openvax/gtfparse) [![Coverage Status](https://coveralls.io/repos/openvax/gtfparse/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/openvax/gtfparse?branch=master)&lt;a href=&quot;https://pypi.python.org/pypi/gtfparse/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/gtfparse.svg?maxAge=1000&quot; alt=&quot;PyPI&quot; /&gt;&lt;/a&gt;gtfparse========Parsing tools for GTF (gene transfer format) files.# Example usage## Parsing all rows of a GTF file into a Pandas DataFrame```pythonfrom gtfparse import read_gtf# returns GTF with essential columns such as &quot;feature&quot;, &quot;seqname&quot;, &quot;start&quot;, &quot;end&quot;# alongside the names of any optional keys which appeared in the attribute columndf = read_gtf(&quot;gene_annotations.gtf&quot;)# filter DataFrame to gene entries on chrYdf_genes = df[df[&quot;feature&quot;] == &quot;gene&quot;]df_genes_chrY = df_genes[df_genes[&quot;seqname&quot;] == &quot;Y&quot;]```## Getting gene FPKM values from a StringTie GTF file```pythonfrom gtfparse import read_gtfdf = read_gtf(    &quot;Transcripts.gtf&quot;,    column_converters={&quot;FPKM&quot;: float})gene_fpkms = {    gene_name: fpkm    for (gene_name, fpkm, feature)    in zip(df[&quot;seqname&quot;], df[&quot;FPKM&quot;], df[&quot;feature&quot;])    if feature == &quot;gene&quot;}```</longdescription>
</pkgmetadata>