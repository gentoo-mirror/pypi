<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>About-----This is a plugin to facilitate image comparison for`Matplotlib &lt;http://www.matplotlib.org&gt;`__ figures in pytest.For each figure to test, the reference image is subtracted from thegenerated image, and the RMS of the residual is compared to auser-specified tolerance. If the residual is too large, the test willfail (this is implemented using helper functions from``matplotlib.testing``).For more information on how to write tests to do this, see the **Using**section below.Installing----------This plugin is compatible with Python 3.6 and later, andrequires `pytest &lt;http://pytest.org&gt;`__ and`matplotlib &lt;http://www.matplotlib.org&gt;`__ to be installed.To install, you can do::    pip install pytest-mplYou can check that the plugin is registered with pytest by doing::    pytest --versionwhich will show a list of plugins:::    This is pytest version 2.7.1, imported from ...    setuptools registered plugins:      pytest-mpl-0.1 at ...Using-----With Baseline Images^^^^^^^^^^^^^^^^^^^^To use, you simply need to mark the function where you want to compareimages using ``@pytest.mark.mpl_image_compare``, and make sure that thefunction returns a Matplotlib figure (or any figure object that has a``savefig`` method):.. code:: python    import pytest    import matplotlib.pyplot as plt    @pytest.mark.mpl_image_compare    def test_succeeds():        fig = plt.figure()        ax = fig.add_subplot(1,1,1)        ax.plot([1,2,3])        return figTo generate the baseline images, run the tests with the``--mpl-generate-path`` option with the name of the directory where thegenerated images should be placed::    pytest --mpl-generate-path=baselineIf the directory does not exist, it will be created. The directory willbe interpreted as being relative to where you are running ``pytest``.Once you are happy with the generated images, you should move them to asub-directory called ``baseline`` relative to the test files (this nameis configurable, see below). You can also generate the baseline imagedirectly in the right directory.With a Hash Library^^^^^^^^^^^^^^^^^^^Instead of comparing to baseline images, you can instead compare against a JSONlibrary of SHA-256 hashes. This has the advantage of not having to check baselineimages into the repository with the tests, or download them from a remotesource.The hash library can be generated with``--mpl-generate-hash-library=path_to_file.json``. The hash library to be usedcan either be specified via the ``--mpl-hash-library=`` command line argument,or via the ``hash_library=`` keyword argument to the``@pytest.mark.mpl_image_compare`` decorator.When generating a hash library, the tests will also be run as usual against theexisting hash library specified by ``--mpl-hash-library`` or the keyword argument.However, generating baseline images will always result in the tests being skipped.Hybrid Mode: Hashes and Images^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^It is possible to configure both hashes and baseline images. In this scenarioonly the hash comparison can determine the test result. If the hash comparisonfails, the test will fail, however a comparison to the baseline image will becarried out so the actual difference can be seen. If the hash comparison passes,the comparison to the baseline image is skipped (unless **results always** isconfigured).This is especially useful if the baseline images are external to the repositorycontaining the tests, and are accessed via HTTP. In this situation, if the hashesmatch, the baseline images won't be retrieved, saving time and bandwidth. Also, itallows the tests to be modified and the hashes updated to reflect the changeswithout having to modify the external images.Running Tests^^^^^^^^^^^^^Once tests are written with baseline images, a hash library, or both to compareagainst, the tests can be run with::    pytest --mpland the tests will pass if the images are the same. If you omit the``--mpl`` option, the tests will run but will only check that the coderuns, without checking the output images.Generating a Test Summary^^^^^^^^^^^^^^^^^^^^^^^^^By specifying the ``--mpl-generate-summary=html`` CLI argument, a HTML summarypage will be generated showing the test result, log entry and generated resultimage. When in the (default) image comparison mode, the baseline image, diffimage and RMS (if any), and tolerance of each test will also be shown.When in the hash comparison mode, the baseline hash and result hash willalso be shown. When in hybrid mode, all of these are included.When generating a HTML summary, the ``--mpl-results-always`` option isautomatically applied (see section below). Therefore images for passingtests will also be shown.+---------------+---------------+---------------+| |html all|    | |html filter| | |html result| |+---------------+---------------+---------------+As well as ``html``, ``basic-html`` can be specified for an alternative HTMLsummary which does not rely on JavaScript or external resources. A ``json``summary can also be saved. Multiple options can be specified comma-separated.Options-------Tolerance^^^^^^^^^The RMS tolerance for the image comparison (which defaults to 2) can bespecified in the ``mpl_image_compare`` decorator with the ``tolerance``argument:.. code:: python    @pytest.mark.mpl_image_compare(tolerance=20)    def test_image():        ...Savefig options^^^^^^^^^^^^^^^You can pass keyword arguments to ``savefig`` by using``savefig_kwargs`` in the ``mpl_image_compare`` decorator:.. code:: python    @pytest.mark.mpl_image_compare(savefig_kwargs={'dpi':300})    def test_image():        ...Baseline images^^^^^^^^^^^^^^^The baseline directory (which defaults to ``baseline`` ) and thefilename of the plot (which defaults to the name of the test with a``.png`` suffix) can be customized with the ``baseline_dir`` and``filename`` arguments in the ``mpl_image_compare`` decorator:.. code:: python    @pytest.mark.mpl_image_compare(baseline_dir='baseline_images',                                   filename='other_name.png')    def test_image():        ...The baseline directory in the decorator above will be interpreted asbeing relative to the test file. Note that the baseline directory canalso be a URL (which should start with ``http://`` or ``https://`` andend in a slash). If you want to specify mirrors, set ``baseline_dir`` toa comma-separated list of URLs (real commas in the URL should be encodedas ``%2C``).Finally, you can also set a custom baseline directory globally whenrunning tests by running ``pytest`` with::    pytest --mpl --mpl-baseline-path=baseline_imagesThis directory will be interpreted as being relative to where pytestis run. However, if the ``--mpl-baseline-relative`` option is alsoincluded, this directory will be interpreted as being relative tothe current test directory.In addition, if both this option and the ``baseline_dir``option in the ``mpl_image_compare`` decorator are used, the one in thedecorator takes precedence.Results always^^^^^^^^^^^^^^By default, result images are only saved for tests that fail.Passing ``--mpl-results-always`` to pytest will force result imagesto be saved for all tests, even for tests that pass.When in **hybrid mode**, even if a test passes hash comparison,a comparison to the baseline image will also be carried out,with the baseline image and diff image (if image comparison fails)saved for all tests. This secondary comparison will not affectthe success status of the test.This option is useful for always *comparing* the result images againstthe baseline images, while only *assessing* the tests against thehash library.If you only update your baseline images after merging a PR, thisoption means that the generated summary will always show how thePR affects the baseline images, with the success status of eachtest (based on the hash library) also shown in the generatedsummary. This option is applied automatically when generatinga HTML summary.When the ``--mpl-results-always`` option is active, and some hashcomparison tests are performed, a hash library containing all theresult hashes will also be saved to the root of the results directory.The filename will be extracted from ``--mpl-generate-hash-library``,``--mpl-hash-library`` or ``hash_library=`` in that order.Base style^^^^^^^^^^By default, tests will be run using the Matplotlib 'classic' style(ignoring any locally defined RC parameters). This can be overridden byusing the ``style`` argument:.. code:: python    @pytest.mark.mpl_image_compare(style='fivethirtyeight')    def test_image():        ...Package version dependencies^^^^^^^^^^^^^^^^^^^^^^^^^^^^Different versions of Matplotlib and FreeType may result in slightlydifferent images. When testing on multiple platforms or as part of apipeline, it is important to ensure that the versions of thesepackages match the versions used to generate the images used forcomparison. It can be useful to pin versions of Matplotlib and FreeTypeso as to avoid automatic updates that fail tests.Removing text^^^^^^^^^^^^^If you are running a test for which you are not interested in comparingthe text labels, you can use the ``remove_text`` argument to thedecorator:.. code:: python    @pytest.mark.mpl_image_compare(remove_text=True)    def test_image():        ...This will make the test insensitive to changes in e.g. the freetypelibrary.Test failure example--------------------If the images produced by the tests are correct, then the test willpass, but if they are not, the test will fail with a message similar tothe following::    E               Exception: Error: Image files did not match.    E                 RMS Value: 142.2287807767823    E                 Expected:    E                   /var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/tmp4h4oxr7y/baseline-coords_overlay_auto_coord_meta.png    E                 Actual:    E                   /var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/tmp4h4oxr7y/coords_overlay_auto_coord_meta.png    E                 Difference:    E                   /var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/tmp4h4oxr7y/coords_overlay_auto_coord_meta-failed-diff.png    E                 Tolerance:    E                   10The image paths included in the exception are then available forinspection:+----------------+----------------+-------------+| Expected       | Actual         | Difference  |+================+================+=============+| |expected|     | |actual|       | |diff|      |+----------------+----------------+-------------+In this case, the differences are very clear, while in some cases it maybe necessary to use the difference image, or blink the expected andactual images, in order to see what changed.The default tolerance is 2, which is very strict. In some cases, you maywant to relax this to account for differences in fonts across differentsystems.By default, the expected, actual and difference files are written to atemporary directory with a non-deterministic path. If you want to insteadwrite them to a specific directory, you can use::    pytest --mpl --mpl-results-path=resultsThe ``results`` directory will then contain one sub-directory per test, and eachsub-directory will contain the three files mentioned above. If you are using acontinuous integration service, you can then use the option to upload artifactsto upload these results to somewhere where you can view them. For moreinformation, see:* `Uploading artifacts on Travis-CI &lt;https://docs.travis-ci.com/user/uploading-artifacts/&gt;`_* `Build Artifacts (CircleCI) &lt;https://circleci.com/docs/1.0/build-artifacts/&gt;`_* `Packaging Artifacts (AppVeyor) &lt;https://www.appveyor.com/docs/packaging-artifacts/&gt;`_Running the tests for pytest-mpl--------------------------------If you are contributing some changes and want to run the tests, firstinstall the latest version of the plugin then do::    cd tests    pytest --mplThe reason for having to install the plugin first is to ensure that theplugin is correctly loaded as part of the test suite... |html all| image:: images/html_all.png.. |html filter| image:: images/html_filter.png.. |html result| image:: images/html_result.png.. |expected| image:: images/baseline-coords_overlay_auto_coord_meta.png.. |actual| image:: images/coords_overlay_auto_coord_meta.png.. |diff| image:: images/coords_overlay_auto_coord_meta-failed-diff.png</longdescription>
</pkgmetadata>