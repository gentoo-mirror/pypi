<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># revolt[![Codecov](https://img.shields.io/codecov/c/github/nikitanovosibirsk/revolt/master.svg?style=flat-square)](https://codecov.io/gh/nikitanovosibirsk/revolt)[![PyPI](https://img.shields.io/pypi/v/revolt.svg?style=flat-square)](https://pypi.python.org/pypi/revolt/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/revolt?style=flat-square)](https://pypi.python.org/pypi/revolt/)[![Python Version](https://img.shields.io/pypi/pyversions/revolt.svg?style=flat-square)](https://pypi.python.org/pypi/revolt/)Value substitutor for [district42](https://github.com/nikitanovosibirsk/district42) schema## Installation```shpip3 install revolt```## Usage```pythonfrom district42 import schemafrom revolt import substituteUserSchema = schema.dict({    &quot;id&quot;: schema.int,    &quot;name&quot;: schema.str | schema.none,    &quot;id_deleted&quot;: schema.bool,})substituted = substitute(UserSchema, {&quot;id&quot;: 1, &quot;name&quot;: &quot;Bob&quot;})# syntax sugarsubstituted = UserSchema % {&quot;id&quot;: 1, &quot;name&quot;: &quot;Bob&quot;}```## Documentation* [Documentation](#documentation)  * [Custom Types](#custom-types)    * [1. Declare Schema](#1-declare-schema)    * [2. Register Substitutor](#2-register-substitutor)    * [3. Register Representor](#3-register-representor)    * [4. Use](#4-use)### Custom Types#### 1. Declare Schema```pythonfrom typing import Anyfrom uuid import UUIDfrom district42 import Props, SchemaVisitor, SchemaVisitorReturnType as ReturnTypefrom district42.types import Schemafrom niltype import Nilableclass UUIDProps(Props):    @property    def value(self) -&gt; Nilable[UUID]:        return self.get(&quot;value&quot;)class UUIDSchema(Schema[UUIDProps]):    def __accept__(self, visitor: SchemaVisitor[ReturnType], **kwargs: Any) -&gt; ReturnType:        return visitor.visit_uuid(self, **kwargs)    def __call__(self, /, value: UUID) -&gt; &quot;UUIDSchema&quot;:        return self.__class__(self.props.update(value=value))```#### 2. Register Substitutor```pythonfrom typing import Anyfrom uuid import UUIDfrom niltype import Nilfrom revolt import Substitutorclass UUIDSubstitutor(Substitutor, extend=True):    def visit_uuid(self, schema: UUIDSchema, *, value: Any = Nil, **kwargs: Any) -&gt; UUIDSchema:        assert isinstance(value, UUID) and schema.props.value is Nil        return schema.__class__(schema.props.update(value=value))```#### 3. Register Representor```pythonfrom typing import Anyfrom district42.representor import Representorfrom niltype import Nilclass UUIDRepresentor(Representor, extend=True):    def visit_uuid(self, schema: UUIDSchema, *, indent: int = 0, **kwargs: Any) -&gt; str:        r = f&quot;{self._name}.uuid&quot;        if schema.props.value is not Nil:            r += f&quot;({schema.props.value!r})&quot;        return r```#### 4. Use```pythonfrom uuid import uuid4from district42 import register_type, schemaregister_type(&quot;uuid&quot;, UUIDSchema)print(schema.uuid % uuid4())# schema.uuid(UUID('8289806e-4f61-45a1-993b-1aa1b289735b'))```Full code available here: [district42_exp_types/uuid](https://github.com/nikitanovosibirsk/district42-exp-types/tree/master/district42_exp_types/uuid)</longdescription>
</pkgmetadata>