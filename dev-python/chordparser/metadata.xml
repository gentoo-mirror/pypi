<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>chordparser===========.. image:: https://travis-ci.com/titus-ong/chordparser.svg?branch=master   :alt: Build status   :target: https://travis-ci.com/titus-ong/chordparser.. image:: https://readthedocs.org/projects/chordparser/badge/?version=latest    :target: https://chordparser.readthedocs.io/en/latest/?badge=latest    :alt: Documentation status.. image:: https://coveralls.io/repos/github/titus-ong/chordparser/badge.svg?branch=master   :alt: Coverage   :target: https://coveralls.io/github/titus-ong/chordparser.. image:: https://img.shields.io/pypi/v/chordparser.svg   :target: https://pypi.org/pypi/chordparser   :alt: Downloads.. image:: https://img.shields.io/pypi/pyversions/chordparser.svg   :target: https://pypi.org/pypi/chordparser   :alt: Downloads.. image:: https://colab.research.google.com/assets/colab-badge.svg   :target: https://colab.research.google.com/github/titus-ong/chordparser/blob/master/notebooks/chordparser-tutorial.ipynb   :alt: Open in Colabchordparser is a Python 3 package that provides a musical framework to analyse chords. Chord notation can be parsed into Chords, which can then be analysed against other chords or the key of the song. This allows for harmonic analysis in chord sheets and helps musicians understand why and how chord progressions work.Quick demo:.. code-block:: python    &gt;&gt;&gt; import chordparser    &gt;&gt;&gt; cp = chordparser.Parser()    &gt;&gt;&gt; new_chord = cp.create_chord(&quot;C7add4/E&quot;)    &gt;&gt;&gt; new_chord.notes    (E note, C note, F note, G note, B♭ note)    &gt;&gt;&gt; new_chord.transpose_simple(6)    F♯7add4/A♯ chord    &gt;&gt;&gt; new_chord.notes    (A♯ note, F♯ note, B note, C♯ note, E note)    &gt;&gt;&gt; e_scale = cp.create_scale(&quot;E&quot;, &quot;major&quot;)    &gt;&gt;&gt; cp.to_roman(new_chord, e_scale)    II65 roman chord    &gt;&gt;&gt; e_fifth = cp.create_diatonic(e_scale, 5)    &gt;&gt;&gt; e_fifth    B chord    &gt;&gt;&gt; cp.analyse_secondary(new_chord, e_fifth, e_scale)    &quot;V65/V&quot;--------Features--------* Create and manipulate notes, keys, scales and chords easily* Parse complex chord notations* Transpose musical classes easily and accurately* Automatically generate notes for scales and chords from notation* Generate roman numeral notation from chords* Analyse chord-scale relationships------------Installation------------To install chordparser, run this command in your terminal:.. code-block:: console    $ pip install chordparser-----Usage-----Check out the `Colab notebook &lt;https://colab.research.google.com/github/titus-ong/chordparser/blob/master/notebooks/chordparser-tutorial.ipynb&gt;`_, which runs through a working example to showcase chordparser's functions and help you get started on using it.The full documentation can be found `here &lt;https://chordparser.readthedocs.io/en/latest/&gt;`_.----------Contribute----------- Issue Tracker: `github.com/titus-ong/chordparser/issues &lt;github.com/titus-ong/chordparser/issues&gt;`_- Source Code: `github.com/titus-ong/chordparser &lt;github.com/titus-ong/chordparser&gt;`_-------Support-------If you are having issues, please let me know at: titusongyl@gmail.com-------Authors-------Development Lead* Titus Ong &lt;titusongyl@gmail.com&gt;-------License-------The project is licensed under the MIT license.</longdescription>
</pkgmetadata>