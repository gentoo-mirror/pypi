<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DotMap[![Build Status](https://travis-ci.com/drgrib/dotmap.svg?branch=master)](https://travis-ci.com/drgrib/dotmap)[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate?business=N2GLXLS5KBFBY&amp;item_name=Chris+Redford&amp;currency_code=USD)# Install```pip3 install dotmap```## UpgradeGet updates for current installation```pip3 install --upgrade dotmap```# Features`DotMap` is a dot-access `dict` subclass that-   has dynamic hierarchy creation (autovivification)-   can be initialized with keys-   easily initializes from `dict`-   easily converts to `dict`-   is ordered by insertionThe key feature is exactly what you want: dot-access```pythonfrom dotmap import DotMapm = DotMap()m.name = 'Joe'print('Hello ' + m.name)# Hello Joe```However, `DotMap` is a `dict` and you can treat it like a `dict` as needed```pythonprint(m['name'])# Joem.name += ' Smith'm['name'] += ' Jr'print(m.name)# Joe Smith Jr```It also has fast, automatic hierarchy (which can be deactivated by initializing with `DotMap(_dynamic=False)`)```pythonm = DotMap()m.people.steve.age = 31```And key initialization```pythonm = DotMap(a=1, b=2)```You can initialize it from `dict` and convert it to `dict````pythond = {'a':1, 'b':2}m = DotMap(d)print(m)# DotMap(a=1, b=2)print(m.toDict())# {'a': 1, 'b': 2}```And it has iteration that is ordered by insertion```pythonm = DotMap()m.people.john.age = 32m.people.john.job = 'programmer'm.people.mary.age = 24m.people.mary.job = 'designer'm.people.dave.age = 55m.people.dave.job = 'manager'for k, v in m.people.items():print(k, v)print# john DotMap(age=32, job='programmer')# mary DotMap(age=24, job='designer')# dave DotMap(age=55, job='manager')```It also has automatic counter initialization```pythonm = DotMap()for i in range(7):m.counter += 1print(m.counter)# 7```And automatic addition initializations of any other type```pythonm = DotMap()m.quote += 'lions'm.quote += ' and tigers'm.quote += ' and bears'm.quote += ', oh my'print(m.quote)# lions and tigers and bears, oh my```There is also built-in `pprint` as `dict` or `json` for debugging a large `DotMap````pythonm.pprint()# {'people': {'dave': {'age': 55, 'job': 'manager'},#             'john': {'age': 32, 'job': 'programmer'},#             'mary': {'age': 24, 'job': 'designer'}}}m.pprint(pformat='json')# {#     &quot;people&quot;: {#         &quot;dave&quot;: {#      &quot;age&quot;: 55,#      &quot;job&quot;: &quot;manager&quot;#   },#   &quot;john&quot;: {#      &quot;age&quot;: 32,#      &quot;job&quot;: &quot;programmer&quot;#   },#   &quot;mary&quot;: {#      &quot;age&quot;: 24,#      &quot;job&quot;: &quot;designer&quot;#   }#     }# }```And many other features involving dots and dictionaries that will be immediately intuitive when used.</longdescription>
</pkgmetadata>