<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Keycloak APIPython module to automate Keycloak or Red Hat Single Sign-On (RHSSO) configuration.## How To Install```shpip install kcapi```## TestingTo run the test you would need a Keycloak instance, you can run one locally or in the [cloud]( https://developers.redhat.com/developer-sandbox/get-started) then you just have to follow this steps: ```shell scriptpython3.10 -m venv .venvsource .venv/bin/activatepip install requests# Setup SSO server - go to https://developers.redhat.com/developer-sandbox/get-started,# launch sandbox environment, +Add, select some &quot;Red Hat Single Sign-On...&quot; template.export KC_USER=adminexport KC_PASSWORD=admin_passwordexport KC_REALM=myrealm  # do not use master realm, it cannot be removedexport KC_ENDPOINT=https://my-first-sso-me-me-dev.apps.sandbox.x8i5.p1.openshiftapps.compython -m unittest```## API### OpenIDThis class takes care of OpenID login using [password owner credentials](https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.3) flow.#### Constructor```pythonfrom rhsso import OpenIDoid_client = OpenID({        &quot;client_id&quot;: &quot;admin-cli&quot;,        &quot;username&quot;: USER,        &quot;password&quot;: PASSWORD,        &quot;grant_type&quot;:&quot;password&quot;,        &quot;realm&quot; : &quot;master&quot;        }, endpoint)```- **client_id**: Client Identifier in Keycloak.- **username**: Login username for the Realm.- **password**: Login password for the Realm.- **grant_type**: The grant type you want to use (usually ``password``).- **endpoint**: A Keycloak or RHSSO URL endpoint, something like: ``https://my_keycloak.com``.  #### Methods##### getTokenThis will initiate a session with the Keycloak server and will return a OpenID token back.```pythonoid_client.getToken() #glTeDLlmmpLYoAAUMcFQqNOMjw5dA```##### createAdminClientThis static method should be used in order to access the master Realm in Keycloak.```python    oidc = OpenID.createAdminClient(self.USER, self.PASSWORD)    oidc.getToken() #glTeDLlmmpLYoAAUMcFQqNOMjw5dA```### KeycloakThis class builds all the Keycloak configuration REST resources by using REST conventions we can target the majority of Keycloak services.#### Constructor```Pythonkc = Keycloak(token, self.ENDPOINT)```The constructor takes two parameters:- **token**: A token with enough priviledge to perform the desired operation.- **endpoint**: A Keycloak or RHSSO URL endpoint, something like: ``https://my_keycloak.com``.  #### Methods#### buildThis methods build a REST client (capabilities detailed below) targeting a specific Keycloak REST resource.```pythongroups = kc.build('groups', 'my_realm')# Create a group called DCstate = groups.create({&quot;name&quot;: &quot;DC&quot;}).isOk()```&gt; In this example we build the 'groups' API for ``my_realm`` Realm.##### Supported ResourcesHere is a quick list of supported resources:- **users**:  [users API](https://access.redhat.com/webassets/avalon/d/red-hat-single-sign-on/version-7.0.0/restapi/#_create_a_new_user).- **clients**: [client API](https://access.redhat.com/webassets/avalon/d/red-hat-single-sign-on/version-7.0.0/restapi/#_create_a_new_client).  - **groups**:  [groups API](https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.0/html/server_administration_guide/groups).- **roles**: [roles API](https://access.redhat.com/webassets/avalon/d/red-hat-single-sign-on/version-7.0.0/restapi/#_create_a_new_role_for_the_realm_or_client_2)- **identity-provider**: [identity provider API](https://access.redhat.com/webassets/avalon/d/red-hat-single-sign-on/version-7.0.0/restapi/#_get_identity_providers)&gt; As long as you find a REST endpoint that follow the standard you can use this method to build a client around it, an example of this is the non well documented ``components`` endpoint.- **components**: This API allows you configure things like [user federation](https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.0/html/server_administration_guide/user-storage-federation) or [Realm keys](https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html/server_administration_guide/admin_permissions#realm_keys).- **authentication**: Provide access to built-in and/or custom authentication flows.&lt;BR&gt;#### adminSimilar to the ``build`` method but the client points to the ``master`` realm, allowing us operation such as realm creation.```python    main_realm = kc.admin()    # Creates a realm called my_realm    main_realm.create({&quot;enabled&quot;: &quot;true&quot;, &quot;id&quot;: my_realm, &quot;realm&quot;: my_realm})```### REST APIWhen you use the ``build`` or ``admin`` methods you will get back a **REST** class pointing to the Keycloak resource, keep in mind that this class don't check that the resource is valid, this is done to keep it flexible and to make it easy to adapt to new Keycloak REST API changes in the future.  #### UsageIn order to create one you need to ``build`` method we have used before:```pythonbatman = {    &quot;enabled&quot;:'true',    &quot;attributes&quot;:{},    &quot;username&quot;:&quot;batman&quot;,    &quot;firstName&quot;:&quot;Bruce&quot;,    &quot;lastName&quot;:&quot;Wayne&quot;,    &quot;emailVerified&quot;:&quot;&quot;}users = kc.build('users', 'DC')# Create a user called batman in DCstate = users.create(batman).isOk()```#### MethodsFollowing the example above lets see the methods we have starting with the usual CRUD methods:#### createThis method ``POST`` a dictionary into any given resource:```pythonbatman = {    &quot;enabled&quot;:'true',    &quot;attributes&quot;:{},    &quot;username&quot;:&quot;batman&quot;,    &quot;firstName&quot;:&quot;Bruce&quot;,    &quot;lastName&quot;:&quot;Wayne&quot;,    &quot;emailVerified&quot;:&quot;&quot;}state = users.create(batman).isOk()```- **dictionary**: Dictionary with the fields we want to POST to the server.#### updateThis method performs a ``PUT`` on the resource.```pythonbatman_update = {    &quot;firstName&quot;:&quot;Bruno&quot;,    &quot;emailVerified&quot;: True}id = 'bf81a9d9-811f-4807-bd69-3d74eecbe9f4'state = users.update(id, batman_update).isOk()```- **id**: Id of the resource in Keycloak.- **dictionary**: Dictionary representing the updated fields.  #### removeThis method sends a ``DELETE`` to the pointed resource.```pythonbatman_update = {    &quot;firstName&quot;:&quot;Bruno&quot;,    &quot;emailVerified&quot;: True}id = 'bf81a9d9-811f-4807-bd69-3d74eecbe9f4'state = users.remove(id).isOk()```- **id**: Id of the resource in Keycloak.- **dictionary**: Dictionary representing the updated fields.  #### getSend a ``GET`` request to retrieve a specific Keycloak resource.```pythonid = 'bf81a9d9-811f-4807-bd69-3d74eecbe9f4'user = users.get(id).response()```#### allReturn all objects of a particular resource type.```Pythonusers = kc.build('users', 'DC')# Create a user called batman in DCuser_list = users.all() #Â [ {id:'xxx-yyy', username: 'batman', ...} ]   ```#### findFirstFinds a resource by passing an arbitrary key/value pair.```Pythonusers = kc.build('users', 'DC')users.findFirst({&quot;key&quot;:&quot;username&quot;, &quot;value&quot;: 'batman'})```#### existCheck if a resource matching the provided ``id`` exists:```Pythonusers = kc.build('users', 'DC')id = 'bf81a9d9-811f-4807-bd69-3d74eecbe9f4'users.exists(id) #True```#### existByKVCheck if a resource matching the provided key/value pair, exists.```Pythonusers = kc.build('users', 'DC')users.existByKV(&quot;username&quot;, 'batman') #False```### ResponseHandlerEach **CRUD** method returns a ``ResponseHandler`` class with the following methods.#### Methods#### responsereturns the requests [response object](https://docs.python-requests.org/en/latest/api/#requests.Response).```Pythonusers.update(id, batman_update).response().status_code #HTTP 201```#### isOkReturn ``True`` if the request complete  successfully otherwise it will raise an exception.```Pythonstate = users.update(id, batman_update).isOk() # Return True here.```#### verifyDoes the same as ``isOk`` but it allow you to chain more methods.```pythonbatman_update = {    &quot;firstName&quot;:&quot;Bruno&quot;,    &quot;emailVerified&quot;: True}id = 'bf81a9d9-811f-4807-bd69-3d74eecbe9f4'cookies = users.update(id, batman_update).verify().response().cookies # Get cookies.```## Specialisations### Realms ### KeycloakCaches This class handles the Keycloak caches. #### Instantiation ```python# Creates a REST API instance target the Realms API. realms = kc.build('realms', 'my_realm') # Gets the cache Realms cache API. caches = realms.caches(self.REALM)```#### clearUserCache This method tells Keycloak to clear the user cache.```pythoncaches.clearUserCache()```#### clearRealmCache This method tells Keycloak to clear the realm cache.```pythoncaches.clearRealmCache()```#### clearKeyCache This method tells Keycloak to clear the external public key cache for clients and identity providers.```pythoncaches.clearKeyCache()```&gt; For more information on how this caches works follow this [link](https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.0/html/server_installation_and_configuration_guide/server_cache_configuration).### Users#### updateCredentialsUpdate user credentials.```jsuser_credentials = {          'temporary': False,          'value':'12345'}state = users.updateCredentials(user_info, user_credentials).isOk() # Updated user password.```Where:- **temporary**: Boolean where if ``True`` provide a temporary password just for the first login.  - **value**: String with the password.#### joinGroupAdd a user into a existing [group](https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.0/html/server_administration_guide/groups).First we need a group:```pythondef createDCGroup():  group = kc.build('groups', 'heroes')  return group.create({&quot;name&quot;: &quot;DC&quot;}).isOk()```Then we can join the group the following way:```python  createDCGroup()  users = kc.build('users', 'heroes')  user = {&quot;key&quot;: &quot;username&quot;, &quot;value&quot;: &quot;batman&quot;}  group = {&quot;key&quot;: &quot;name&quot;, &quot;value&quot;: &quot;DC&quot;}  users.joinGroup(user, group).isOk()```&gt; The API works by matching the first occurrence between the provided ``key/value`` for the two resources (User and Group), this can help in various situation for example if we want to target the user by ``uuid``.Using ``uuid`` as user identifier.```python  createDCGroup()  users = kc.build('users', 'heroes')  user = {&quot;key&quot;: &quot;uuid&quot;, &quot;value&quot;: &quot;23e4567-e89b-...&quot;}  group = {&quot;key&quot;: &quot;name&quot;, &quot;value&quot;: &quot;DC&quot;}  users.joinGroup(user, group).isOk()```Or we want to use the group ``id``:```python  user = {&quot;key&quot;: &quot;uuid&quot;, &quot;value&quot;: &quot;23e4567-e89b-...&quot;}  group = {&quot;key&quot;: &quot;id&quot;, &quot;value&quot;: &quot;f8d91722-a1f0-45e...&quot;}  users.joinGroup(user, group).isOk()```&gt; If the field criteria don't return a unique value, the first entry in the list will be used.#### leaveGroupRemove a user from a group.```python  createDCGroup()  users = kc.build('users', 'heroes')  user = {&quot;key&quot;: &quot;username&quot;, &quot;value&quot;: &quot;batman&quot;}  group = {&quot;key&quot;: &quot;uuid&quot;, &quot;value&quot;: &quot;123e4567-e89b-...&quot;}  users.leaveGroup(user, group).isOk()  user = {&quot;key&quot;: &quot;uuid&quot;, &quot;value&quot;: &quot;12d3-a456-4&quot;}  group = {&quot;key&quot;: &quot;id&quot;, &quot;value&quot;: &quot;123e4567-e89b-...&quot;}  users.leaveGroup(user, group).isOk()```&gt; The same rules for ``key/value`` discussed above also applies here.### GroupsTo manage the relationship between realm level [roles](keycloak.org/docs/latest/server_admin/#assigning-permissions-and-access-using-roles-and-groups) and groups, we can use the **RealmsRolesMapping**.To get an instance of this class you need to instantiate the ``group`` resource class:```Pythongroups = kc.build('groups', 'heroes')```And use the method ``realmRoles`` passing a valid [group dictionary](https://access.redhat.com/webassets/avalon/d/red-hat-single-sign-on/version-7.0.0/restapi/#_grouprepresentation):```pythonrealmsRoles = groups.realmRoles({&quot;key&quot;:&quot;name&quot;, &quot;value&quot;:'DC'})```Then we get a class with following methods:#### addAdd a list of existing roles to a group.```pythondef makeRoles(self):    roles = kc.build('roles', self.realm)    lvl1 = roles.create({&quot;name&quot;: &quot;level-1&quot;}).isOk()    lvl2 = roles.create({&quot;name&quot;: &quot;level-2&quot;}).isOk()    return lvl1 and lvl2if makeRoles():  realmsRoles = groups.realmRoles({&quot;key&quot;:&quot;name&quot;, &quot;value&quot;:'DC'})  realmsRoles.add([&quot;level-1&quot;, &quot;level-2&quot;])```#### removeRemove a list of associated roles from a group.```pythonrealmsRoles = groups.realmRoles({&quot;key&quot;:&quot;name&quot;, &quot;value&quot;:'DC'})realmsRoles.remove([&quot;level-1&quot;, &quot;level-2&quot;])```## Roles #### compositeIn Keycloak we can map roles to other roles, this method allow you to do just that. ```pythonrole_watch = self.kc.build('roles', 'my-realm').find('watch')added = role_watch.add_composite('view')```</longdescription>
</pkgmetadata>