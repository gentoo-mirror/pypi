<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SolarEdge LocalThe goal if this respository is to provide information about using the local API available on some solar edge inverters.  This is a WIP based on my observations and may contain inaccuracies.  Pull Requests or Issues are encouraged to correct any mistakes or add additonal informatoin.### Relevant ModelsThe local API is available on the [SExxxxH-US models with SetApp](https://www.solaredge.com/sites/default/files/se-hd-wave-single-phase-inverter-with-setapp-datasheet-na.pdf) as well as European three phase inverters SEXXK-XXXTXBXX4 models with SetApp like [SE3K-E10K](https://www.solaredge.com/sites/default/files/se-three-phase-inverter-setapp-ds.pdf), [SE12.5K-SE27.6K](https://www.solaredge.com/sites/default/files/se-three-phase-inverter-setapp-datasheet.pdf) and [SE33.3K](https://www.solaredge.com/sites/default/files/se-three-phase-inverter-for-277-480-grid-setapp-datasheet.pdf).Please check carefully the datasheets if in the section &quot;Additional Features&quot;, sub-section &quot;Inverter Commissioning&quot; is present the following line &quot;With the SetApp mobile application using built-in Wi-Fi access point for local connection&quot;.More inforation on SeeApp could be found [here](https://www.solaredge.com/us/products/installer-tools/setapp). These models have no LED screen and are provisioned ONLY via a phone app during commissioning.Check also the [SetApp FAQ](https://www.solaredge.com/sites/default/files/solaredge-setapp-faqs-eng.pdf) for more info.For convenience it is reported here one Q&amp;A:&gt; Q: Can the new app be used for already installed inverters?&gt;&gt; A: Only SolarEdge inverters with a new communication board (no display) can be activated or configured via SetApp.Reportedly, these new inverters have a CPU number starting with 04.You can check by finding the IP address of your inverter and visiting it in a browser.  If it supports the local API, you'll see the SolarEdge logo and a &quot;Commissioning&quot; menu.If you do not have the local API available, see [this repository](https://github.com/jbuehl/solaredge) as an alternative.### Using the Python wrapperFor convinience, a python API wrapper, [solaredge_local](https://pypi.org/project/solaredge-local/) is available.  **Only python 3 is supported**To install: `pip install solaredge-local`To use:```from solaredge_local import SolarEdgeclient = SolarEdge(&quot;http://&lt;inverter ip address&gt;&quot;)client.get_status()  # Provides general energy and other overview informationclient.get_maintenance() # Provides optimizer level information and other detailsclient.get_information() # Provides software versions and error log list.client.get_power_control() # Provides power control information and other details.```### API Endpoints* AppConfigs: &quot;web/v1/app_configs&quot;* Region: &quot;web/v1/region&quot;* Region_Country: &quot;web/v1/region/country&quot;* Region_Language: &quot;web/v1/region/language&quot;* Pairing: &quot;web/v1/pairing&quot;* Pairing_Request: &quot;web/v1/pairing/request&quot;* Communication: &quot;web/v1/communication&quot;* Communication_Server: &quot;web/v1/communication/server&quot;* Communication_Lan: &quot;web/v1/communication/lan&quot;* Communication_Rs485_SlaveDetect: &quot;web/v1/communication/rs485/&lt;id&gt;/slave_detect&quot;* Communication_Rs485_Protocol: &quot;web/v1/communication/rs485/&lt;id&gt;/protocol&quot;* Communication_Rs485_DeviceId: &quot;web/v1/communication/rs485/&lt;id&gt;/deviceid&quot;* Communication_Rs485_Modbus: &quot;web/v1/communication/rs485/&lt;id&gt;/modbus&quot;* Communication_Rs485_Modbus_AddDevice: &quot;web/v1/communication/rs485/&lt;id&gt;/modbus/add_device&quot;* Communication_Rs485_Modbus_RemoveDevice: &quot;web/v1/communication/rs485/&lt;id&gt;/modbus/remove_device&quot;* Communication_Wifi: &quot;web/v1/communication/wifi&quot;* Communication_Wifi_Wps: &quot;web/v1/communication/wifi/wps&quot;* Communication_Wifi_Connect: &quot;web/v1/communication/wifi/connect&quot;* Communication_Cellular: &quot;web/v1/communication/cellular&quot;* Communication_Zigbee_Defaults: &quot;web/v1/communication/zigbee/defaults&quot;* Communication_Zigbee_ModuleConfigs: &quot;web/v1/communication/zigbee/module_configs&quot;* Communication_Zigbee_OpMode: &quot;web/v1/communication/zigbee/op_mode&quot;* Communication_Gpio_Pri: &quot;web/v1/communication/gpio/pri&quot;* Communication_ModbusTcp: &quot;web/v1/communication/modbus_tcp&quot;* PowerControl: &quot;web/v1/power_control&quot;* PowerControl_GridControl: &quot;web/v1/power_control/grid_control&quot;* PowerControl_EnergyManager_LimitControl: &quot;web/v1/power_control/energy_manager/limit_control&quot;* PowerControl_EnergyManager_EnergyControl: &quot;web/v1/power_control/energy_manager/energy_control&quot;* PowerControl_EnergyManager_StorageControl: &quot;web/v1/power_control/energy_manager/storage_control&quot;* PowerControl_ReactivePower: &quot;web/v1/power_control/reactive_power&quot;* PowerControl_ActivePower: &quot;web/v1/power_control/active_power&quot;* PowerControl_Wakeup: &quot;web/v1/power_control/wakeup&quot;* PowerControl_Advanced: &quot;web/v1/power_control/advanced&quot;* PowerControl_Reset: &quot;web/v1/power_control/reset&quot;* PowerControl_Rrcr: &quot;web/v1/power_control/rrcr&quot;* Maintenance: &quot;web/v1/maintenance&quot;* Maintenance_DateTime: &quot;web/v1/maintenance/date_and_time&quot;* Maintenance_ResetCounters: &quot;web/v1/maintenance/reset_counters&quot;* Maintenance_ResetFactory: &quot;web/v1/maintenance/reset_factory&quot;* Maintenance_Afci: &quot;web/v1/maintenance/afci&quot;* Maintenance_AfciTest: &quot;web/v1/maintenance/afci/test&quot;* Maintenance_Inverters_SelfTest: &quot;web/v1/maintenance/inverters/&lt;position&gt;/self_test&quot;* Maintenance_Standby: &quot;web/v1/maintenance/standby&quot;* Maintenance_GridProtectionLogin: &quot;web/v1/maintenance/grid_protection/login&quot;* Maintenance_GridProtection: &quot;web/v1/maintenance/grid_protection&quot;* Maintenance_UpgradeUsb: &quot;web/v1/maintenance/fw_upgrade/usb&quot;* Information: &quot;web/v1/information&quot;* Status: &quot;web/v1/status&quot;* Status_ServerCommTest: &quot;web/v1/status/server_comm_test&quot;The Status endpoint appears to the most useful for realtime production data.Optimizer level data is available from the maintenance API endpoint.## Using the APIAll endpoints I have explored so far appear to be a GET, and responses use [Protocol Buffers](https://developers.google.com/protocol-buffers/).  There is no authentication### View Raw ResponseYou can see the raw data by doing the following (assuming you have the protoocal buffers CLI tool installed)```curl -s http://&lt;inverter ip&gt;/web/v1/status | protoc --decode_raw```Many numbers appear to be 32 bit floating point.The proto definitions required to fully parse the responses are available in  javascript if you choose &quot;view source&quot; in the developer tools of your browser.### View Parsed responseIf there is a corresponding `.proto` file in [message_types](/message_types), you can view the parsed response from the API.  Each proto file correspond to the name of an API endpoint. These are very much a WIP and may be incomplete.  These can be created by choosing &quot;view source&quot; in the developer tools of your browser, and searching for text like `proto.web_status.&lt;apiNameInCamelCase&gt;.toObject`Here is an example for the status API:```curl -s http://&lt;inverter ip&gt;/web/v1/status | protoc --decode Status message_types/status.proto```### Updating Protocol Buffer responseTo add or change the Protocol Buffer defintions, please do the following1. Manually change the `message_types/*.proto` files as required2. Test the file using `curl` as described in [View Parsed Response](#view-parsed-response)3. Update the generated `*_pb2.py` files for each file changed by running a command like:    ```    protoc -I=message_types --python_out=solaredge_local message_types/&lt;filename_changed&gt;.proto    ```4. Commit the generated updates</longdescription>
</pkgmetadata>