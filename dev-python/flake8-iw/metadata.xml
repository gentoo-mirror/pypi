<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flake8-iw &lt;!-- omit from toc --&gt;Linters for some common issues we encounter.- [flake8-iw](#flake8-iw)- [Building and testing](#building-and-testing)- [Supported lint checks](#supported-lint-checks)  - [IW01: Use of patch](#iw01-use-of-patch)  - [IW02: Use of patch for time freeze](#iw02-use-of-patch-for-time-freeze)  - [IW03: Error logging without exception info (exc\_info)](#iw03-error-logging-without-exception-info-exc_info)  - [IW04: Use of datetime.now](#iw04-use-of-datetimenow)  - [IW05: Use of datetime.replace(tzinfo=XXX)](#iw05-use-of-datetimereplacetzinfoxxx)  - [IW06: Use of bulk\_update/bulk\_create without batch\_size](#iw06-use-of-bulk_updatebulk_create-without-batch_size)  - [IW07: Use of celery.shared_task, use instawork.decorators.shared_task](#iw07-use-of-celeryshared_task-use-instaworkdecoratorsshared_task)  - [IW08: use of timezone.activate or timezone.deactivate, use with timezone.override instead](#iw08-use-of-timezoneactivate-or-timezonedeactivate-use-with-timezoneoverride-instead)  - [IW09: missing db_constraint=False on foreign key](#iw09-missing-db_constraintfalse-on-foreign-key)  - [IW10: on_delete=DO_NOTHING on foreign key](#iw10-on_deletedo_nothing-on-foreign-key)  - [IW11: Use of db_index=True](#iw11-use_of_db_indextrue)  - [IW12: Use of unique=True](#iw12-use_of_uniquetrue)  - [IW13: Use of index_together instead of Options.indexes](#iw13-use_of_index_together_instead_of_optionsindexes)  - [IW14: Use of unique_together instead of Options.constraints](#iw14-use_of_unique_together_instead_of_optionsconstraints)  - [IW15: Use of timezone.now in Factories without LazyAttribute or LazyFunction](#iw15-use_of_timezonenow_in_factories_without_lazyattribute_or_lazyfunction)  - [IW16: Using setUpClass and tearDownClass inside a test case, use setUpTestData instead](#iw16)  - [IW17: Parameterized must be topmost decorator](#iw17)  - [IW18: Direct assignment to constance, use override_config() instead](#iw18)## Building and testingRun command to build wheel and tarball.```shpython3 -m buildtwine check --strict dist/*twine upload dist/*```Run command to test.```shpytest```To run package in edit mode (to test on live code) from the directory where running flake8.This requires pip &gt;= 21.3.1.```shpip install -e ../flake8_iw/```## Supported lint checks### IW01: Use of patchLint check to prevent the use of `patch` directly.Recommendation: Use `PatchingTestCase` / `PatchingTransactionTestCase` instead*Correct* ✅```pythonfrom instawork.tests import PatchingTestCaseclass SignUpUpdatedTests(PatchingTestCase):    def setUp(self):        self.mock_call = self.patch(&quot;apps.auth.signals.task_send_email.delay&quot;)    def test_email(self):        expect(self.mock_call).to(have_been_called_once)    def test_sms(self):        mock_sms = self.patch(&quot;apps.auth.signals.task_send_sms.delay&quot;)        expect(mock_sms).to(have_been_called_once)```*Wrong* ⚠️```pythonfrom unittest.mock import patchclass SignUpUpdatedTests(TestCase):    def setUp(self):        self.patcher = patch(&quot;apps.auth.signals.task_send_email.delay&quot;)        self.mock_email = self.patcher.start()    def tearDown(self):        self.patcher.stop()    def test_email(self):        ...        expect(self.mock_email).to(have_been_called_once)    @patch(&quot;apps.auth.signals.task_send_sms.delay&quot;)    def test_sms(self, mock_sms):        ...        expect(mock_sms).to(have_been_called_once)```### IW02: Use of patch for time freezeLint check to prevent the use of `patch` to freeze time.Recommendation: Use `freeze_time` from `PatchingTestCase` / `PatchingTransactionTestCase` or use `freeze_time` decorator or context manager from `freezegun` package.*Correct* ✅```pythonfrom django.utils import timezonefrom instawork.tests import PatchingTestCaseclass UserFeatureViewTests(PatchingTestCase):    def setUp(self):        self.now = timezone.now()    def test_feature_view(self):        ufv = None        # Option 1        with freeze_time(self.now):            ufv = UserFeatureView.objects.get_or_create(                user=self.shift.worker, feature=UserFeatureView.FEATURE_1            )        # Option 2        self.freeze_time(self.now)        ufv = UserFeatureView.objects.get_or_create(            user=self.shift.worker, feature=UserFeatureView.FEATURE_1        )        ...        expect(ufv.date_created).to(equal(self.now))```*Wrong* ⚠️```pythonfrom django.utils import timezonefrom instawork.tests import PatchingTestCaseclass UserFeatureViewTests(PatchingTestCase):    def setUp(self):        self.now = timezone.now()        self.mock_call = self.patch(&quot;django.utils.timezone.now&quot;, return_value=self.now)    def test_feature_view(self):        ufv = UserFeatureView.objects.get_or_create(            user=self.shift.worker, feature=UserFeatureView.FEATURE_1        )        ...        expect(ufv.date_created).to(equal(self.now))```### IW03: Error logging without exception info (exc_info)Lint check to prevent error logging without exception info.Recommendation: Add `exc_info=True` keyword argument in `logger.error()`*Correct* ✅```pythonimport loggingcustom_logger = logging.getLogger(&quot;module.logger&quot;)class UserFeatureView(Model):    def save(self):        try:            ...        except ValueError as e:            custom_logger.error(e, exc_info=True)            return name```*Wrong* ⚠️```pythonimport loggingcustom_logger = logging.getLogger(&quot;module.logger&quot;)class UserFeatureView(Model):    def save(self):        try:            ...        except ValueError as e:            custom_logger.error(e)            return name```### IW04: Use of datetime.nowLint to avoid usage of `datetime.now()` which does not contain timezone information and causes various warnings in tests. Use `timezone.now()` instead.*Correct* ✅```pythonfrom django.utils import timezonenow = timezone.now()```*Wrong* ⚠️```pythonfrom datetime import datetimenow = datetime.now()```### IW05: Use of datetime.replace(tzinfo=XXX)Lint to avoid usage of `datetime.replace(tzinfo=XXX)` which is not a viable way of setting timezones with python/pytz.*Correct* ✅```pythonimport pytzfrom django.utils import timezonetz = pytz.timezone(&quot;America/Los_Angeles&quot;)now_pt = timezone.now().astimezone(tz)```*Wrong* ⚠️```pythonimport pytzfrom django.utils import timezonetz = pytz.timezone(&quot;America/Los_Angeles&quot;)now_pt = timezone.now().replace(tzinfo=tz)```### IW06: Use of bulk_update/bulk_create without batch_sizeLint to avoid usage of [Model.objects.bulk_update](https://docs.djangoproject.com/en/dev/ref/models/querysets/#bulk-update) / [Model.objects.bulk_create](https://docs.djangoproject.com/en/dev/ref/models/querysets/#bulk-create). Use `Model.objects.bulk_update(batch_size=X)` / `Model.objects.bulk_create(batch_size=X)` instead.*Correct* ✅```python# Bulk updateModel.objects.bulk_update([obj1, obj2, ...], batch_size=10)# Bulk createModel.objects.bulk_create([obj1, obj2, ...], batch_size=10)```*Wrong* ⚠️```python# Bulk updateModel.objects.bulk_update([obj1, obj2, ...])# Bulk createModel.objects.bulk_create([obj1, obj2, ...])```### IW07: Use of celery.shared_task, use instawork.decorators.shared_taskUse our internal decorator instead: `instawork.decorators.shared_task`.*Correct* ✅```pythonfrom instawork.decorators import shared_task@shared_taskdef my_task():    pass```*Wrong* ⚠️```pythonfrom celery import shared_task@shared_taskdef my_task():    pass```### IW08: use of timezone.activate or timezone.deactivate, use with timezone.override insteadLint to avoid usage of `timezone.activate()` and instead use `with timezone.override()`. This is to avoid timezoneleakage between different tests and features.*Correct* ✅```pythonfrom django.utils import timezonewith timezone.override(zoneinfo.ZoneInfo(tzname)):    &lt;Rest of the code&gt;```*Wrong* ⚠️```pythonfrom django.utils import timezonetimezone.activate(zoneinfo.ZoneInfo(tzname))&lt;Rest of the code&gt;timezone.deactivate()```### IW09: missing db_constraint=False on foreign keyIt's required to pass db_constraint=False when creating a new foreign key relationship.This is to prevent issues with online schema changes that arise due to MySQL's foreign keyarchitecture.*Correct* ✅```pythonx = models.ForeignKey(db_constraint=False, on_delete=models.CASCADE)```*Wrong* ⚠️```pythonx = models.ForeignKey(on_delete=models.CASCADE)```### IW10: on_delete=DO_NOTHING on foreign keyIt's not advisable to use DO_NOTHING on foreign keys because we have removedforeign key constraints in the database. It's best to have a strategy that dealswith deletions that doesn't leave &quot;orphaned&quot; foreign key ids.*Correct* ✅```pythonx = models.ForeignKey(db_constraint=False, on_delete=models.CASCADE)```*Wrong* ⚠️```pythonx = models.ForeignKey(db_constraint=False, on_delete=models.DO_NOTHING)```### IW11: Use of db_index=TrueUse `Options.indexes` to define an index rather than argument on field.See [here](https://docs.djangoproject.com/en/4.2/ref/models/options/#django.db.models.Options.indexes)*Correct* ✅```pythonx = models.CharField()class Meta:    indexes = [        models.Index(fields=[&quot;x&quot;], name=&quot;x_idx&quot;),    ]```*Wrong* ⚠️```pythonx = models.CharField(db_index=True)```### IW12: Use of unique=TrueUse `Options.constraints` to define uniqueness rather than argument on field.See [here](https://docs.djangoproject.com/en/4.2/ref/models/options/#django.db.models.Options.constraints)and [here](https://docs.djangoproject.com/en/4.2/ref/models/constraints/#uniqueconstraint)*Correct* ✅```pythonx = models.CharField()class Meta:    constraints = [        models.UniqueConstraint(fields=[&quot;x&quot;], name=&quot;unique_x&quot;),    ]```*Wrong* ⚠️```pythonx = models.CharField(unique=True)```### IW13: Use of index_together instead of Options.indexesUse `Options.indexes` to define an index rather than argument on field.See [here](https://docs.djangoproject.com/en/4.2/ref/models/options/#django.db.models.Options.indexes)*Correct* ✅```pythonclass Meta:    indexes = [        models.Index(fields=[&quot;a&quot;, &quot;b&quot;], name=&quot;a_b_idx&quot;),    ]```*Wrong* ⚠️```pythonclass Meta:    index_together = ((&quot;a&quot;, &quot;b&quot;))```### IW14: Use of unique_together instead of Options.constraintsUse `Options.constraints` to define uniqueness rather than argument on field.See [here](https://docs.djangoproject.com/en/4.2/ref/models/options/#django.db.models.Options.constraints)and [here](https://docs.djangoproject.com/en/4.2/ref/models/constraints/#uniqueconstraint)*Correct* ✅```pythonclass Meta:    constraints = [        models.UniqueConstraint(fields=[&quot;a&quot;, &quot;b&quot;], name=&quot;unique_a_b&quot;),    ]```*Wrong* ⚠️```pythonclass Meta:    unique_together = ((&quot;a&quot;, &quot;b&quot;))```### IW15: Use of timezone.now in Factories without LazyAttribute or LazyFunctionUse `LazyAttribute` or `LazyFunction` in factories with `timezone.now` to enable freezegun and avoid unexpected datetimes.*Correct* ✅```pythonclass TestFactory(factory.django.DjangoModelFactory):    starts_at = factory.LazyFunction(timezone.now)```*Wrong* ⚠️```pythonclass TestFactory(factory.django.DjangoModelFactory):    starts_at = timezone.now()```### IW16: Using setUpClass and tearDownClass inside a test case, use setUpTestData insteadAvoid using setUpClass and tearDownClass inside a test case*Correct* ✅```pythonclass MyTest(TestCase):    def setUpTestData(self):        something()    ```*Wrong* ⚠️```pythonclass MyTest(TestCase):    @classmethod    def setUpClass(self):        something()        @classmethod    def tearDownClass(self):        something()```### IW17: Parameterized must be the topmost decorator`parameterized.expand()` must be above `override_config`, `override_settings`, etc. Parameterizeddoes some low-level manipulation and copies functions in a way that may not be compatible with theway that override decorators work.*Correct* ✅```pythonclass MyTest(TestCase):    @parameterized.expand([(1,2)])    @override_config(SOME_CONFIG=1)    def test_something(self, p1, p2):        something()```*Wrong* ⚠️```pythonclass MyTest(TestCase):    @override_config(SOME_CONFIG=1)    @parameterized.expand([(1,2)])    def test_something(self, p1, p2):        something()```### IW18: Direct assignment to constance, use override_config() insteadIt's easy to forget to reset a value back to the default when directly overriding it. The decoratorautomatically resets the value back to the previous state once the test is complete and is thusmuch safer.*Correct* ✅```pythonclass MyTest(TestCase):    @override_config(SOME_CONFIG=1)    def test_something(self):        something()```*Wrong* ⚠️```pythonclass MyTest(TestCase):    def test_something(self):        config.SOME_CONFIG = 1        something()```</longdescription>
</pkgmetadata>