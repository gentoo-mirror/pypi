<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenModule V2Some additional documentation:* [Openmodule Core](docs/core.md)* [RPC Server / Client](docs/rpc.md)## ChangesBreaking changes are annotated [here](docs/migrations.md).To quickly check if your service is susceptible to a known issue have a look [here](docs/migrations.md).## Coding StandardFor ARIVO developers we have defined a simple coding standard [here](docs/coding_standard.md)## FeaturesThe openmodule package provides a lot of features:### SettingsThe openmodule package uses a global lazy configuration `openmodule.config.settings`. This setting includes somestandard parameters defined in `openmodule.config.GlobalSettings` and parameters from a customizable module. To specifythe module you can call `settings.configure(module)` or you can set the environment variable `SETTINGS_MODULE`. Perdefault settings looks for the `config` module (it also looks for the `tests/config` module first for test cases)#### Setting functionsThe framework also provides multiple functions for more complex behaviours:* debug(): Returns true if working in a debug environment, i.e. `DEBUG=True` or not in docker and unknown version* testing(): Returns true if the `TESTING` env variable is set* database_folder(): Returns the default database folder, depending on testing() and debug()* version(): Returns the version of the package* resource(): Returns the auth resource* dev_device(): Returns if the device is authenticated at the dev device server or not, useful for connecting to the  correct dev/prod server* config_yaml_path(): Returns either the env varibale `CONFIG_YAML`or the default value depending on the environment (  testing, debug, prod)* yaml(model, path=None): Returns the parsed yaml config based on the model and the path (default config_yaml_path())* dist_folder(): Returns either the env variable `DIST_FOLDER` or the default value depending on the environment#### Global variablesSome variables are already mapped and usable by default. These settings can be used normally and can also be overwritten```pythonclass GlobalSettings:    # usual    NAME = string(&quot;NAME&quot;, &quot;om_dev_unnamed_1&quot;)    VERSION = version()    RESOURCE = resource()    DEBUG = debug()    TESTING = testing()    LOG_LEVEL = log_level()    DATABASE_FOLDER = database_folder()    # broker env vars    BROKER_SUB = broker_sub()    BROKER_PUB = broker_pub()    LOCAL_DEVELOPMENT = bool(&quot;LOCAL_DEVELOPMENT&quot;, False)    is_bridged_slave = is_bridged_slave()    DIST_FOLDER = dist_folder()    DEV_DEVICE = dev_device()    # redis    REDIS_HOST = string(&quot;REDIS_HOST&quot;, &quot;localhost&quot;)    REDIS_PASSWORD = string(&quot;REDIS_PASSWORD&quot;, &quot;&quot;) or None    REDIS_PORT = int(&quot;REDIS_PORT&quot;, 6379)    REDIS_DB = int(&quot;REDIS_DB&quot;, 0)```#### Examples of usage```pythonHOST_URL = &quot;https://operator.arivo.fun&quot; if dev_device() else &quot;https://operator.arivo.app&quot;class YAMLConfig(OpenModuleModel):    test: boolYAML = config.yaml(YAMLConfig)```#### ModelsInherit from `OpenModuleModel` or in case of ZMQ messages from `ZMQMessage`. Models usepydantic ([docs](https://pydantic-docs.helpmanual.io/usage/types/)), check openmodule.models.* for some examples (e.g.PresenceBaseMessage for alias)### CoreThe base of the new openmodule, every package should have exactly one. The core handles various things:* sentry* logging* dsvgo* messaging* health* alerting* database``` pythoncore = init_openmodule(config, **kwargs)shutdown_openmodule()```#### Messaging##### Receiving messagesThe core handles message distribution with a dispatcher. You only need to register your callback.* **register_schema**: Automatically create a schema for your message handler and its models -&gt; Beware that you need to  document your handler method```pythoncore.messages.register_handler(&quot;topic&quot;, MessageClass, callback, filter={type = &quot;demo&quot;}, register_schema = True)```It may also be used together with an event listener to provide further functionality```pythonevent_listener = EventListener(log=logger)core.messages.register_handler(&quot;topic&quot;, MessageClass, event_listener, filter={type = &quot;demo&quot;})...event_listener.append(some_function)```#### Sending messagesIt is even easier to send messages```pythonmessage = ZMQMessage(name=core.config.NAME, type=&quot;demo&quot;)core.publish(message, &quot;topic&quot;)```#### HealthDue to the new convention, the health message should only represent if the service is still alive. This is doneautomatically by the core. If you need to specify some meta data or errors you can pass your handler to the core or setit later```pythondef healthy() -&gt; HealthResult:    if error:        return health_error(&quot;we have an error&quot;, meta=dict(error=&quot;error&quot;))    return health_ok(meta=dict(this=&quot;is_easy&quot;))core = init_openmodule(config, health_handler=healthy)# orcore.health.health_hanlder = healthy```#### AlertingThe new core also includes an alert handler.```pythoncore.alerts.send(...)alert_id = core.alerts.get_or_add_alert_id(...)core.alerts.send_with_alert_id(alert_id, ...)```#### DatabaseThe openmodule package now also feature a simple database which can be also specified during the template creation. Ifyou missed it there, just copy the directory src/database from the template. For more infos see [here](docs/database.md)### RPCsA new RPC server/client was implemented. It works like before and also includes better filtering:* if a channel is provided for a filter, only rpcs of that channel will be subject to that filter* if a type is provided for a filter, only rpcs of that type will be subject to that filter* **register_schema**: Automatically create a schema for your rpc and its models -&gt; Beware that you need to document  your handler method```pythondef handler(request: AccessRequest):    &quot;&quot;&quot;    awesome description    &quot;&quot;&quot;rpc = RPCServer(config=core.config, context=core.context)rpc_server.add_filter(self._backend_filter, &quot;backend&quot;, &quot;auth&quot;)rpc_server.register_handler(&quot;backend&quot;, &quot;auth&quot;, request_class=AccessRequest,                            response_class=AccessResponse, handler=handler, register_schema=True)rpc.run()```### Utils#### Api (**DEPRECATED**)We implemented a very basic Api class you can use for http request and that handles errors and authentication. Eitherinherit it or create a class.```pythonapi = Api(**kwargs)try:    res = api.post(&quot;some_url&quot;, payload=stuff)except ApiException as e:    if e.retry:  # &lt;- makes sense to try again - timeouts or server not available ...        ...```#### Backend (**DEPRECATED**)There is also a basic implementation of a backend that provides registration and message passing.```pythonclass MyAccessService(AccessService):    def __init__(self):        super().__init__(implements_session_handling=...)        ...    def rpc_check_access(self, request: AccessRequest) -&gt; AccessCheckResponse:        ...    # session handling    def check_in_session(self, message: SessionStartMessage):        ...    def check_out_session(self, message: SessionFinishMessage):        ...    def session_error_message(self, message: Union[SessionDeleteMessage, SessionIncompleteMessage,                                                   SessionExitWithoutEntryMessage]):        ...```#### Access Service#### CharsetUseful functions for character manipulation#### Connection StatusHelper class that checks the connection status of the rpc client to our server:see [here](docs/connection_status_listener.md)#### MatchingUseful functions for license plate matching#### PresenceHelper class for listening to presence messages.```pythonpresence_listener = PresenceListener(core.messages)presence_listener.on_enter.append(some_function)```#### Package ReaderSee [Package Reader](docs/package_reader.md).#### Bridged Slave/Master DetectionSome services should behave differently if they are started on a bridged master device or bridged slave device (i.e.prevent double rpc-responses, prevent double code execution).For this each NUC is setup with a COMPUTE_ID.The master NUC always has `COMPUTE_ID=1`. For easier detection the functions `is_bridged_slave()`and `is_bridged_master()` are available.##### Config* The `COMPUTE_ID` env variable is responsible for the slave/master detection. Per default the COMPUTE_ID is set  to `COMPUTE_ID=1`, therefore a master NUC.* If you want to switch to a &quot;slave&quot; NUC, you can either set it directly with the env variable or override it for test  cases (@override_settings(COMPUTE_ID=2))##### ExampleThe DSGVO container takes care of the anonymization. For this it saves links between vehicle_ids and session_ids andforwards requests to anonymize session_ids with the appropriate vehicle_ids.If we have a bridged installation only the master DSGVO container should perform these tasks. The DSGVO container onslave devices should only anonymize data on its device.* RPC for anonymization and linking session to vehicle only registered `if is_bridged_slave() is False`### AnonymizationThe openmodule framework uses rpc requests and messages to trigger the anonymization of data.* **Message:** You can send a AnonymizeMessage (topic: `privacy`). The message includes a session_id and vehicle_ids to  delete.* **RPC Request:** You can send an AnonymizeRequest with channel=`privacy`, type=`anonymize` to the DSGVO container.  This request only includes session_ids.  The DSGVO container will then match vehicle_ids to the session_ids and redistribute the request with the prior  mentioned message.A container with sensible data then needs to implement the message listener for the privacy messages (see example)##### Example 1The controller checked that a parking session was finished an fully paid. After a specified time, the DSGVO relevantdata has to be anonymized. The controller then triggers the anonymization```pythonrequest = AnonymizeRequest(session_ids=[session_id])result = core.rpc_client.rpc(&quot;privacy&quot;, &quot;anonymize&quot;, request)if result.response.status == &quot;ok&quot;:    self.log.info(f&quot;Anonymized session {session_id}&quot;)```##### Example 2The controller checked that a parking session was finished an fully paid. After a specified time, the DSGVO relevantdata has to be anonymized. The controller then triggers the anonymization```pythonmsg = AnonymizeMessage(vehicle_ids=[vid1, vid2])self.core.publish(msg, &quot;privacy&quot;)```The DSGVO container receives the request, matches session_ids with vehicle_ids and publishes the anonymization message.It also listens on said messages an deletes vehicle images based on the vehicle_ids in the message.```pythoncore.messages.register(&quot;privacy&quot;, AnonymizeMessage, anonymize_data)def anonymize_data(message: AnonymizeMessage):    for vid in message.vehicle_ids:        delete_vehicle_image_by_vehicle_id(vid)```**IMPORTANT** You still have to take care of data retention in each service separately, meaning you have to delete dataindependently of these anonymization messages.i.e. the DSGVO service deletes data if we need disk space or the eventlog deletes events after 30 days by default### Databox UploadIn the openmodule we have a utils function to simplify the upload with the databox service. The prerequisite is, that the upload folder `/data/om_service_databox_1/upload` is mounted correctly in the compose file to the `settings.DATABOX_UPLOAD_DIR` (default: `/upload`)```pythonfrom openmodule.utils.databox import uploadupload(&quot;/tmp/asdf.txt&quot;, &quot;/enforcement/test/asdf.txt&quot;)upload(&quot;/tmp/bsdf.csv&quot;, &quot;exports/&quot;)  # same as exports/bsdf.csv as filename is taken from source if dst ends with /```docker-compose.yml example snippet```yaml    volumes:    - /data/om_service_databox_1/upload/:/upload/```### CSV ExportIn the openmodule we have a utils function to simplify the generation of csv files. For more infos see [here](docs/csv_export.md)### Scheduling of jobsSee [here](https://github.com/ts-accessio/schedule/tree/dateutil-support)Do not import `schedule` yourself, openmodule imports the schedule version with dateutil support for you. ## DocumentationOpenmodule &gt;= 3.0.5 features automatic generation of Rpc and Message Schemas including their models. The generation usesdata that is generated during the test runs to create an OpenApi Schema. Your RPCs and Message handlers areautomatically documented if:* You use the message dispatcher of the core (OpenModuleCoreTestMixin)* You use the RPCServer of OpenmoduleYou can also register models yourself if you want them documented, but you may need to save the Schema in this case:```pythonfrom openmodule.utils.schema import SchemaSchema.save_model(Model)Schema.save_rpc(channel, type, request, reqponse, handler)Schema.save_message(topic, message_class, handler, filter)Schema.to_file()```With default parameters, you need to document your handler functions with a doc string, that is then included as adescription.## TestingA separate package for testing openmodule packages exists within openmodule - openmodule-test. For more infossee [here](docs/testing.md)## CommandsA separate package for commands useful for developing openmodule package exists within openmoduel - openmodule-commands.The commands will be automatically available if you installed the packageFor a full list of the commands see [here](docs/commands.md)## Installing from GitDuring development it might be necessary to install a version of openmodule, where no pip package exists.Below you can find how to install a certain openmodule branch for your application with pip:* **openmodule:** `pip install &quot;git+https://gitlab.com/arivo-public/device-python/openmodule@&lt;branch&gt;#egg=openmodule&quot;`* **  openmodule-test:** `pip install &quot;git+https://gitlab.com/arivo-public/device-python/openmodule@&lt;branch&gt;#egg=openmodule-test&amp;subdirectory=openmodule_test&quot;`* **  openmodule-commands:** `pip install &quot;git+https://gitlab.com/arivo-public/device-python/openmodule@&lt;branch&gt;#egg=openmodule-commands&amp;subdirectory=openmodule_commands&quot;`</longdescription>
</pkgmetadata>