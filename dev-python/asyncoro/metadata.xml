<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>asyncoro########`asyncoro &lt;http://asyncoro.sourceforge.net&gt;`_ is a Python framework forasynchronous, concurrent, distributed programming with coroutines, asynchronouscompletions and message passing.Unlike with other asynchronous frameworks, programs developed with asyncoro have**same logic and structure** as programs with threads, except for a fewsyntactic changes - mostly using *yield* with asynchronous completions that givecontrol to asyncoro's scheduler, which interleaves executions of coroutines,similar to the way an operating system executes multiple processes. In addition,asyncoro has many additional features, including message passing forcommunication, distributed computing/programming etc.Unlike threads, creating processes (coroutines) with asyncoro is veryefficient. Moreover, with asyncoro context switch occurs only when coroutinesuse *yield* (typically with an asychronous call), so there is no need forlocking and there is no overhead of unnecessary context switches.asyncoro works with Python versions 2.7+ and 3.1+. It has been tested withLinux, Mac OS X and Windows; it may work on other platforms, too.Features--------* No callbacks or event loops! No need to lock critical sections either,* Efficient polling mechanisms epoll, kqueue, /dev/poll, Windows  I/O Completion Ports (IOCP) for high performance and  scalability,* Asynchronous (non-blocking) sockets and pipes, for concurrent  processing of I/O,* SSL for security,* Asynchronous locking primitives similar to Python threading module,* Asynchronous timers and timeouts,* `Message passing &lt;http://en.wikipedia.org/wiki/Message_passing&gt;`_  for (local and remote) coroutines to exchange messages one-to-one  with `Message Queue Pattern  &lt;http://en.wikipedia.org/wiki/Message_queue&gt;`_ or through  broadcasting channels with `Publish-Subscribe Pattern  &lt;http://en.wikipedia.org/wiki/Publish/subscribe&gt;`_,* `Location transparency  &lt;http://en.wikipedia.org/wiki/Location_transparency&gt;`_ with naming  and locating (local and remote) resources,* Distributing computation components (code and data) for execution of  distributed communicating processes, for wide range of use cases, covering  `SIMD, MISD, MIMD &lt;https://en.wikipedia.org/wiki/Flynn%27s_taxonomy&gt;`_ system  architectures at the process level, `web interface  &lt;http://asyncoro.sourceforge.net/discoro.html#client-browser-interface&gt;`_ to  monitor cluster/application status/performance; `in-memory processing  &lt;https://en.wikipedia.org/wiki/In-memory_processing&gt;`_, data streaming,  real-time (live) analytics and cloud computing are supported as well,* Monitoring and restarting of (local or remote) coroutines, for fault detection  and fault-tolerance,* Hot-swapping of coroutine functions, for dynamic system reconfiguration,* Thread pools with asynchronous task completions, for executing (external)  synchronous tasks, such as reading standard input.Dependencies------------asyncoro is implemented with standard modules in Python.If `psutil &lt;https://pypi.python.org/pypi/psutil&gt;`_ is available on nodes, nodeavailability status (CPU, memory and disk) is sent in status messages, and shownin web browser so node/application performance can be monitored.Under Windows efficient polling notifier I/O Completion Ports (IOCP) issupported only if `pywin32&lt;http://sourceforge.net/projects/pywin32/files/pywin32/&gt;`_ is available;otherwise, inefficient *select* notifier is used.Installation------------To install asyncoro, run::   python -m pip install asyncoroAuthors-------* Giridhar PemmasaniLinks-----* `Project page &lt;http://asyncoro.sourceforge.net&gt;`_.* `Tutorial/Examples &lt;http://asyncoro.sourceforge.net/tutorial.html&gt;`_.* `GitHub (Code Repository) &lt;https://github.com/pgiri/asyncoro&gt;`_.</longdescription>
</pkgmetadata>