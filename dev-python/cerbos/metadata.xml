<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Cerbos Python SDK=================Python clients for accessing [Cerbos](https://cerbos.dev).Cerbos is the open core, language-agnostic, scalable authorization solution that makes user permissions and authorization simple to implement and manage by writing context-aware access control policies for your application resources.## UsageThis library is available from PyPI as `cerbos`. It supports both async and non-async modes.```shpip install cerbos```There are two clients available; [gRPC](#grpc-client) and [HTTP](#http-client). New projects should use the gRPC client.### gRPC Client(Available from v0.8.0 onwards)**Making a request**```pythonfrom cerbos.sdk.grpc.client import CerbosClientfrom cerbos.engine.v1 import engine_pb2from cerbos.request.v1 import request_pb2from google.protobuf.struct_pb2 import Valueprincipal = engine_pb2.Principal(    id=&quot;john&quot;,    roles={&quot;employee&quot;},    policy_version=&quot;20210210&quot;,    attr={        &quot;department&quot;: Value(string_value=&quot;marketing&quot;),        &quot;geography&quot;: Value(string_value=&quot;GB&quot;),        &quot;team&quot;: Value(string_value=&quot;design&quot;),    },)resource = engine_pb2.Resource(    id=&quot;XX125&quot;,    kind=&quot;leave_request&quot;,    attr={        &quot;id&quot;: Value(string_value=&quot;XX125&quot;),        &quot;department&quot;: Value(string_value=&quot;marketing&quot;),        &quot;geography&quot;: Value(string_value=&quot;GB&quot;),        &quot;team&quot;: Value(string_value=&quot;design&quot;),        &quot;owner&quot;: Value(string_value=&quot;john&quot;),    })plan_resource = engine_pb2.PlanResourcesInput.Resource(    kind=&quot;leave_request&quot;,    policy_version=&quot;20210210&quot;)with CerbosClient(&quot;localhost:3593&quot;, tls_verify=False) as c:    # Check a single action on a single resource    if c.is_allowed(&quot;view&quot;, principal, resource):        # perform some action        pass    # Get the query plan for &quot;view&quot; action    plan = c.plan_resources(action=&quot;view&quot;, principal=principal, resource=plan_resource)````**Async usage**```pythonfrom cerbos.sdk.grpc.client import AsyncCerbosClientasync with AsyncCerbosClient(&quot;localhost:3593&quot;, tls_verify=False) as c:    ...    allowed = await c.is_allowed(&quot;view:public&quot;, p, r)    print(allowed)    # Get the query plan for &quot;view&quot; action    ...    plan = await c.plan_resources(&quot;view&quot;, p, rd)    print(plan.filter.to_json())```**Admin API**There is also a client available for interacting with the Admin API. See [the docs](https://docs.cerbos.dev/cerbos/latest/api/admin_api.html) for information on how to configure your PDP to enable this.```pythonfrom cerbos.policy.v1 import policy_pb2from cerbos.sdk.grpc.client import AdminCredentials, AsyncCerbosAdminClientadmin_credentials = AdminCredentials(username=&quot;admin&quot;, password=&quot;some_password&quot;)async with AsyncCerbosAdminClient(&quot;localhost:3593&quot;, admin_credentials=admin_credentials) as c:    await c.add_or_update_policy(        [            policy_pb2.Policy(                api_version=&quot;api.cerbos.dev/v1&quot;,                principal_policy=policy_pb2.PrincipalPolicy(                    principal=&quot;terry&quot;, version=&quot;default&quot;                ),            )        ]    )```**Connecting to a Unix domain socket**```pythonwith CerbosClient(&quot;unix:/var/cerbos.sock&quot;, tls_verify=False) as c:  ...```### HTTP clientWe maintain this for backwards compatibility. It is recommended to use the [gRPC client](#grpc-client).**Making a request**```pythonfrom cerbos.sdk.model import *from cerbos.sdk.client import CerbosClientwith CerbosClient(&quot;https://localhost:3592&quot;, debug=True, tls_verify=False) as c:    p = Principal(        &quot;john&quot;,        roles={&quot;employee&quot;},        policy_version=&quot;20210210&quot;,        attr={&quot;department&quot;: &quot;marketing&quot;, &quot;geography&quot;: &quot;GB&quot;, &quot;team&quot;: &quot;design&quot;},    )    # Check a single action on a single resource    r = Resource(        &quot;XX125&quot;,        &quot;leave_request&quot;,        policy_version=&quot;20210210&quot;,        attr={            &quot;id&quot;: &quot;XX125&quot;,            &quot;department&quot;: &quot;marketing&quot;,            &quot;geography&quot;: &quot;GB&quot;,            &quot;team&quot;: &quot;design&quot;,            &quot;owner&quot;: &quot;john&quot;,        },    )    allowed = c.is_allowed(&quot;view:public&quot;, p, r)    print(allowed)    # Get the query plan for &quot;view&quot; action    rd = ResourceDesc(&quot;leave_request&quot;, policy_version=&quot;20210210&quot;)    plan = c.plan_resources(&quot;view&quot;, p, rd)    print(plan.filter.to_json())```**Async usage**```pythonfrom cerbos.sdk.model import *from cerbos.sdk.client import AsyncCerbosClientasync with AsyncCerbosClient(&quot;https://localhost:3592&quot;, debug=True, tls_verify=False) as c:    ...    # Check a single action on a single resource    ...    allowed = await c.is_allowed(&quot;view:public&quot;, p, r)    print(allowed)    # Get the query plan for &quot;view&quot; action    ...    plan = await c.plan_resources(&quot;view&quot;, p, rd)    print(plan.filter.to_json())```**Connecting to a Unix domain socket**Use `unix+http:///path/to/sock` for HTTP over UDS or `unix+https:///path/to/sock` for HTTPS over UDS.```pythonwith CerbosClient(&quot;unix+https:///var/cerbos.sock&quot;, debug=True, tls_verify=False) as c:  ...```**Testing with [TestContainers](https://github.com/testcontainers/testcontainers-python)**NOTE: Requires `cerbos[testcontainers]` dependency to be installed.```pythonfrom cerbos.sdk.client import CerbosClientfrom cerbos.sdk.container import CerbosContainercontainer = CerbosContainer()policy_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), &quot;store&quot;)container.with_volume_mapping(policy_dir, &quot;/policies&quot;)with container:    container.wait_until_ready()    host = container.http_host()    with CerbosClient(host) as c:        ...```See the tests available in the `tests` directory for more examples.## ContributingThe gRPC client uses protoc generated python classes from definitions retrieved from our [buf registry](https://buf.build/cerbos/cerbos-api).When making changes to this library, be sure to run the `./proto/generate_protos.sh` to update definitions and generate python classes.## Get help- Visit the [Cerbos website](https://cerbos.dev)- Read the [documentation](https://docs.cerbos.dev)- [Join the Cerbos community on Slack](http://go.cerbos.io/slack)- Email us at help@cerbos.dev</longdescription>
</pkgmetadata>