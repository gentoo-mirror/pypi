<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DescriptionAutomation GUI for Android App Analysis# Installation`pip install autoappanalysis`# UsageCreate a config file with the following schema:```json// config.json{  &quot;log&quot;: &quot;autoappanalysis.log&quot;,                                // Path to log file  &quot;pkgName&quot;: &quot;com.app&quot;,                                        // Package Name  &quot;vm&quot;: &quot;app-vm&quot;,                                              // Name of the VM  &quot;user&quot;: &quot;admin&quot;,                                             // User Name   &quot;pw&quot;: &quot;admin&quot;,                                               // Password  &quot;input&quot;: &quot;/media/sf_avd&quot;,                                    // Path to AVD shared folder on VM  &quot;output&quot;: &quot;/media/sf_results&quot;,                               // Path to result shared folder on VM  &quot;outputHost&quot;: &quot;C:\\Users\\admin\\results&quot;,                   // Path to result shared folder on host  &quot;snapshot&quot;: &quot;C:\\Users\\admin\\.android\\avd\\analysis.avd&quot;, // Path to AVD shared folder on host  &quot;comparison&quot;: [                                              // Array of objects to provide different         {                                                      // comparison setup.             &quot;name&quot;: &quot;01_action_install&quot;,                       // Each object holds a comparison name,                    &quot;first&quot;: &quot;init&quot;,                                   // a starting snapshot (first) to which the other             &quot;second&quot;: [&quot;install&quot;],                             // snapshots (second) will be compared against            &quot;noise&quot;: &quot;noise&quot;                                   // name of the noise snapshot        },                                                              {            &quot;name&quot;: &quot;02_action_first_start&quot;,            &quot;first&quot;: &quot;install&quot;,            &quot;second&quot;: [&quot;first_start&quot;],            &quot;noise&quot;: &quot;noise_install&quot;        },        {            &quot;name&quot;: &quot;03_action_guest_login&quot;,            &quot;first&quot;: &quot;first_start&quot;,            &quot;second&quot;: [&quot;continue_as_guest&quot;],            &quot;noise&quot;: &quot;noise_first_start&quot;        }  ],  &quot;files&quot;: [                                                  // Full Paths to files which are going to be        &quot;/data/data/path/to/app/user.db&quot;,                     // extracted for each snapshot        &quot;/data/data/path/to/app/host.db&quot;,        &quot;/data/data/path/to/app/config.json&quot;  ],  &quot;search&quot;: {        &quot;files&quot;: [                                           // Path to files which shall be searched                &quot;C:\\Users\\admin\\results\\**\\*.1.test&quot;,   // Accepts globe patterns        ],        &quot;actions&quot;: [                                        // Each action specified here will be            {                                               // applied to each files listed before                &quot;name&quot;: &quot;All Occurences&quot;,                &quot;method&quot;: &quot;or&quot;,                &quot;words&quot;: &quot;appname&quot;,                &quot;format&quot;: &quot;wln&quot;            },            {                &quot;name&quot;: &quot;Interesting FileTypes&quot;,                &quot;method&quot;: &quot;or&quot;,                &quot;words&quot;: &quot;.db,.json,.xml,.yml&quot;,                &quot;format&quot;: &quot;wln&quot;            }        ]  }}```# Example`python -m autoappanalysis -c config.json`![](img/01.png)| Button | Description || --- | ---|| Root | Starts adbd as root || Create Snapshot | Create a AVD Snapshot with `Snapshot Name` and `Snapshot Number` and extract all files given by `AVD Files to be extracted` || Decrypt Snapshots | Decrypts all snapshots in `VM Input Directory` and save the `.raw` in `VM Output Directory + /decrypted` || Create .idiff | Creates `.idiff` files from the given comparison in config.json and save them in `VM Output Directory + /actions` || Analyse .idiff | Analyses all `.idiff` in `VM Output Directory + /actions` and save the results there || Analyse .db | Analyse all `AVD Files to be extracted` sqlite databases based on given comparison rules in config.json || Uninstall | Uninstalls the App given by `App Package Name` || Extract Files | Extract all files given by `AVD Files to be extracted`. In order to work, `Root` button need to be pushed first. || Search Files | Search given files by provided config and save results within the given paths |# LicenseMIT</longdescription>
</pkgmetadata>