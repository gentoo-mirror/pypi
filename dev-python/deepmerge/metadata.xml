<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========deepmerge=========.. image:: https://github.com/toumorokoshi/deepmerge/actions/workflows/python-package.yaml/badge.svg    :target: https://github.com/toumorokoshi/deepmerge/actions/workflows/python-package.yamlA tools to handle merging ofnested data structures in python.------------Installation------------deepmerge is available on `pypi &lt;https://pypi.python.org/&gt;`_:.. code-block:: bash   pip install deepmerge-------Example-------**Generic Strategy**.. code-block:: python    from deepmerge import always_merger    base = {&quot;foo&quot;: [&quot;bar&quot;]}    next = {&quot;foo&quot;: [&quot;baz&quot;]}    expected_result = {'foo': ['bar', 'baz']}    result = always_merger.merge(base, next)    assert expected_result == result**Custom Strategy**.. code-block:: python    from deepmerge import Merger    my_merger = Merger(        # pass in a list of tuple, with the        # strategies you are looking to apply        # to each type.        [            (list, [&quot;append&quot;]),            (dict, [&quot;merge&quot;]),            (set, [&quot;union&quot;])        ],        # next, choose the fallback strategies,        # applied to all other types:        [&quot;override&quot;],        # finally, choose the strategies in        # the case where the types conflict:        [&quot;override&quot;]    )    base = {&quot;foo&quot;: [&quot;bar&quot;]}    next = {&quot;bar&quot;: &quot;baz&quot;}    my_merger.merge(base, next)    assert base == {&quot;foo&quot;: [&quot;bar&quot;], &quot;bar&quot;: &quot;baz&quot;}You can also pass in your own merge functions, instead of a string.For more information, see the `docs &lt;https://deepmerge.readthedocs.io/en/latest/&gt;`_</longdescription>
</pkgmetadata>