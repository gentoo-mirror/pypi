<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/nschloe/pygalmesh&quot;&gt;&lt;img alt=&quot;pygalmesh&quot; src=&quot;https://meshpro.github.io/pygalmesh/pygalmesh-logo.svg&quot; width=&quot;60%&quot;&gt;&lt;/a&gt;  &lt;p align=&quot;center&quot;&gt;Create high-quality meshes with ease.&lt;/p&gt;&lt;/p&gt;[![PyPi Version](https://img.shields.io/pypi/v/pygalmesh.svg?style=flat-square)](https://pypi.org/project/pygalmesh)[![Anaconda Cloud](https://anaconda.org/conda-forge/pygalmesh/badges/version.svg?=style=flat-square)](https://anaconda.org/conda-forge/pygalmesh/)[![Packaging status](https://repology.org/badge/tiny-repos/pygalmesh.svg)](https://repology.org/project/pygalmesh/versions)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pygalmesh.svg?style=flat-square)](https://pypi.org/pypi/pygalmesh/)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5564818.svg?style=flat-square)](https://doi.org/10.5281/zenodo.5564818)[![GitHub stars](https://img.shields.io/github/stars/nschloe/pygalmesh.svg?style=flat-square&amp;label=Stars&amp;logo=github)](https://github.com/nschloe/pygalmesh)[![Downloads](https://pepy.tech/badge/pygalmesh/month?style=flat-square)](https://pepy.tech/project/pygalmesh)&lt;!--[![PyPi downloads](https://img.shields.io/pypi/dm/pygalmesh.svg?style=flat-square)](https://pypistats.org/packages/pygalmesh)--&gt;[![Discord](https://img.shields.io/static/v1?logo=discord&amp;label=chat&amp;message=on%20discord&amp;color=7289da&amp;style=flat-square)](https://discord.gg/Z6DMsJh4Hr)[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/pygalmesh/ci?style=flat-square)](https://github.com/nschloe/pygalmesh/actions?query=workflow%3Aci)[![codecov](https://img.shields.io/codecov/c/github/nschloe/pygalmesh.svg?style=flat-square)](https://codecov.io/gh/nschloe/pygalmesh)[![LGTM](https://img.shields.io/lgtm/grade/python/github/nschloe/pygalmesh.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/pygalmesh)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)pygalmesh is a Python frontend to [CGAL](https://www.cgal.org/)'s[2D](https://doc.cgal.org/latest/Mesh_2/index.html) and [3D mesh generationcapabilities](https://doc.cgal.org/latest/Mesh_3/index.html). pygalmesh makes it easyto create high-quality 2D, 3D volume meshes, periodic volume meshes, and surface meshes.### Examples#### 2D meshes&lt;img src=&quot;https://meshpro.github.io/pygalmesh/rect.svg&quot; width=&quot;30%&quot;&gt;CGAL generates 2D meshes from linear constraints.```pythonimport numpy as npimport pygalmeshpoints = np.array([[0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 1.0]])constraints = [[0, 1], [1, 2], [2, 3], [3, 0]]mesh = pygalmesh.generate_2d(    points,    constraints,    max_edge_size=1.0e-1,    num_lloyd_steps=10,)# mesh.points, mesh.cells```The quality of the mesh isn't very good, but can be improved with[optimesh](https://github.com/nschloe/optimesh).#### A simple ball&lt;img src=&quot;https://meshpro.github.io/pygalmesh/ball.png&quot; width=&quot;30%&quot;&gt;```pythonimport pygalmeshs = pygalmesh.Ball([0, 0, 0], 1.0)mesh = pygalmesh.generate_mesh(s, max_cell_circumradius=0.2)# mesh.points, mesh.cells, ...```You can write the mesh with&lt;!--pytest-codeblocks:skip--&gt;```pythonmesh.write(&quot;out.vtk&quot;)```You can use any format supported by [meshio](https://github.com/nschloe/meshio).The mesh generation comes with many more options, described[here](https://doc.cgal.org/latest/Mesh_3/). Try, for example,&lt;!--pytest-codeblocks:skip--&gt;```pythonmesh = pygalmesh.generate_mesh(    s, max_cell_circumradius=0.2, odt=True, lloyd=True, verbose=False)```#### Other primitive shapes&lt;img src=&quot;https://meshpro.github.io/pygalmesh/tetra.png&quot; width=&quot;30%&quot;&gt;pygalmesh provides out-of-the-box support for balls, cuboids, ellipsoids, tori, cones,cylinders, and tetrahedra. Try for example```pythonimport pygalmeshs0 = pygalmesh.Tetrahedron(    [0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0])mesh = pygalmesh.generate_mesh(    s0,    max_cell_circumradius=0.1,    max_edge_size_at_feature_edges=0.1,)```#### Domain combinations&lt;img src=&quot;https://meshpro.github.io/pygalmesh/ball-difference.png&quot; width=&quot;30%&quot;&gt;Supported are unions, intersections, and differences of all domains. As mentioned above,however, the sharp intersections between two domains are not automatically handled. Tryfor example```pythonimport pygalmeshradius = 1.0displacement = 0.5s0 = pygalmesh.Ball([displacement, 0, 0], radius)s1 = pygalmesh.Ball([-displacement, 0, 0], radius)u = pygalmesh.Difference(s0, s1)```To sharpen the intersection circle, add it as a feature edge polygon line, e.g.,```pythonimport numpy as npimport pygalmeshradius = 1.0displacement = 0.5s0 = pygalmesh.Ball([displacement, 0, 0], radius)s1 = pygalmesh.Ball([-displacement, 0, 0], radius)u = pygalmesh.Difference(s0, s1)# add circlea = np.sqrt(radius**2 - displacement**2)max_edge_size_at_feature_edges = 0.15n = int(2 * np.pi * a / max_edge_size_at_feature_edges)alpha = np.linspace(0.0, 2 * np.pi, n + 1)alpha[-1] = alpha[0]circ = a * np.column_stack([np.zeros(n + 1), np.cos(alpha), np.sin(alpha)])mesh = pygalmesh.generate_mesh(    u,    extra_feature_edges=[circ],    max_cell_circumradius=0.15,    max_edge_size_at_feature_edges=max_edge_size_at_feature_edges,    min_facet_angle=25,    max_radius_surface_delaunay_ball=0.15,    max_circumradius_edge_ratio=2.0,)```Note that the length of the polygon legs are kept in sync with`max_edge_size_at_feature_edges` of the mesh generation. This makes sure that it fits innicely with the rest of the mesh.#### Domain deformations&lt;img src=&quot;https://meshpro.github.io/pygalmesh/egg.png&quot; width=&quot;30%&quot;&gt;You can of course translate, rotate, scale, and stretch any domain. Try, for example,```pythonimport pygalmeshs = pygalmesh.Stretch(pygalmesh.Ball([0, 0, 0], 1.0), [1.0, 2.0, 0.0])mesh = pygalmesh.generate_mesh(s, max_cell_circumradius=0.1)```#### Extrusion of 2D polygons&lt;img src=&quot;https://meshpro.github.io/pygalmesh/triangle-rotated.png&quot; width=&quot;30%&quot;&gt;pygalmesh lets you extrude any polygon into a 3D body. It even supports rotationalongside!```pythonimport pygalmeshp = pygalmesh.Polygon2D([[-0.5, -0.3], [0.5, -0.3], [0.0, 0.5]])max_edge_size_at_feature_edges = 0.1domain = pygalmesh.Extrude(    p,    [0.0, 0.0, 1.0],    0.5 * 3.14159265359,    max_edge_size_at_feature_edges,)mesh = pygalmesh.generate_mesh(    domain,    max_cell_circumradius=0.1,    max_edge_size_at_feature_edges=max_edge_size_at_feature_edges,    verbose=False,)```Feature edges are automatically preserved here, which is why an edge length needs to begiven to `pygalmesh.Extrude`.#### Rotation bodies&lt;img src=&quot;https://meshpro.github.io/pygalmesh/circle-rotate-extr.png&quot; width=&quot;30%&quot;&gt;Polygons in the x-z-plane can also be rotated around the z-axis to yield a rotationbody.```pythonimport pygalmeshp = pygalmesh.Polygon2D([[0.5, -0.3], [1.5, -0.3], [1.0, 0.5]])max_edge_size_at_feature_edges = 0.1domain = pygalmesh.RingExtrude(p, max_edge_size_at_feature_edges)mesh = pygalmesh.generate_mesh(    domain,    max_cell_circumradius=0.1,    max_edge_size_at_feature_edges=max_edge_size_at_feature_edges,    verbose=False,)```#### Your own custom level set function&lt;img src=&quot;https://meshpro.github.io/pygalmesh/heart.png&quot; width=&quot;30%&quot;&gt;If all of the variety is not enough for you, you can define your own custom level setfunction. You simply need to subclass `pygalmesh.DomainBase` and specify a function,e.g.,```pythonimport pygalmeshclass Heart(pygalmesh.DomainBase):    def __init__(self):        super().__init__()    def eval(self, x):        return (            (x[0] ** 2 + 9.0 / 4.0 * x[1] ** 2 + x[2] ** 2 - 1) ** 3            - x[0] ** 2 * x[2] ** 3            - 9.0 / 80.0 * x[1] ** 2 * x[2] ** 3        )    def get_bounding_sphere_squared_radius(self):        return 10.0d = Heart()mesh = pygalmesh.generate_mesh(d, max_cell_circumradius=0.1)```Note that you need to specify the square of a bounding sphere radius, used as an inputto CGAL's mesh generator.#### Local refinement&lt;img src=&quot;https://meshpro.github.io/pygalmesh/ball-local-refinement.png&quot; width=&quot;30%&quot;&gt;Use `generate_mesh` with a function (regular or lambda) as `max_cell_circumradius`. Thesame goes for `max_edge_size_at_feature_edges`, `max_radius_surface_delaunay_ball`, and`max_facet_distance`.```pythonimport numpy as npimport pygalmeshmesh = pygalmesh.generate_mesh(    pygalmesh.Ball([0.0, 0.0, 0.0], 1.0),    min_facet_angle=30.0,    max_radius_surface_delaunay_ball=0.1,    max_facet_distance=0.025,    max_circumradius_edge_ratio=2.0,    max_cell_circumradius=lambda x: abs(np.sqrt(np.dot(x, x)) - 0.5) / 5 + 0.025,)```#### Surface meshesIf you're only after the surface of a body, pygalmesh has `generate_surface_mesh` foryou. It offers fewer options (obviously, `max_cell_circumradius` is gone), but otherwiseworks the same way:```pythonimport pygalmeshs = pygalmesh.Ball([0, 0, 0], 1.0)mesh = pygalmesh.generate_surface_mesh(    s,    min_facet_angle=30.0,    max_radius_surface_delaunay_ball=0.1,    max_facet_distance=0.1,)```Refer to [CGAL'sdocumentation](https://doc.cgal.org/latest/Surface_mesher/index.html) for theoptions.#### Periodic volume meshes&lt;img src=&quot;https://meshpro.github.io/pygalmesh/periodic.png&quot; width=&quot;30%&quot;&gt;pygalmesh also interfaces CGAL's [3D periodicmesh generation](https://doc.cgal.org/latest/Periodic_3_mesh_3/index.html). Besides adomain, one needs to specify a bounding box, and optionally the number of copies in theoutput (1, 2, 4, or 8). Example:```pythonimport numpy as npimport pygalmeshclass Schwarz(pygalmesh.DomainBase):    def __init__(self):        super().__init__()    def eval(self, x):        x2 = np.cos(x[0] * 2 * np.pi)        y2 = np.cos(x[1] * 2 * np.pi)        z2 = np.cos(x[2] * 2 * np.pi)        return x2 + y2 + z2mesh = pygalmesh.generate_periodic_mesh(    Schwarz(),    [0, 0, 0, 1, 1, 1],    max_cell_circumradius=0.05,    min_facet_angle=30,    max_radius_surface_delaunay_ball=0.05,    max_facet_distance=0.025,    max_circumradius_edge_ratio=2.0,    number_of_copies_in_output=4,    # odt=True,    # lloyd=True,    verbose=False,)```#### Volume meshes from surface meshes&lt;img src=&quot;https://meshpro.github.io/pygalmesh/elephant.png&quot; width=&quot;30%&quot;&gt;If you have a surface mesh at hand (like[elephant.vtu](http://meshpro.github.io/pygalmesh/elephant.vtu)), pygalmesh generates avolume mesh on the command line via```pygalmesh volume-from-surface elephant.vtu out.vtk --cell-size 1.0 --odt```(See `pygalmesh volume-from-surface -h` for all options.)In Python, do&lt;!--pytest-codeblocks:skip--&gt;```pythonimport pygalmeshmesh = pygalmesh.generate_volume_mesh_from_surface_mesh(    &quot;elephant.vtu&quot;,    min_facet_angle=25.0,    max_radius_surface_delaunay_ball=0.15,    max_facet_distance=0.008,    max_circumradius_edge_ratio=3.0,    verbose=False,)```#### Meshes from INR voxel files&lt;img src=&quot;https://meshpro.github.io/pygalmesh/liver.png&quot; width=&quot;30%&quot;&gt;It is also possible to generate meshes from INR voxel files, e.g.,[here](https://github.com/CGAL/cgal/tree/master/Mesh_3/examples/Mesh_3/data) either onthe command line```pygalmesh from-inr skull_2.9.inr out.vtu --cell-size 5.0 --odt```(see `pygalmesh from-inr -h` for all options) or from Python&lt;!--pytest-codeblocks:skip--&gt;```pythonimport pygalmeshmesh = pygalmesh.generate_from_inr(    &quot;skull_2.9.inr&quot;,    max_cell_circumradius=5.0,    verbose=False,)```#### Meshes from numpy arrays representing 3D images| &lt;img src=&quot;https://meshpro.github.io/pygalmesh/voxel-ball.png&quot; width=&quot;70%&quot;&gt; | &lt;img src=&quot;https://meshpro.github.io/pygalmesh/phantom.png&quot; width=&quot;70%&quot;&gt; || :------------------------------------------------------------------------: | :---------------------------------------------------------------------: |pygalmesh can help generating unstructed meshes from 3D numpy int arrays specifying thesubdomains. Subdomains with key `0` are not meshed.```pythonimport pygalmeshimport numpy as npx_ = np.linspace(-1.0, 1.0, 50)y_ = np.linspace(-1.0, 1.0, 50)z_ = np.linspace(-1.0, 1.0, 50)x, y, z = np.meshgrid(x_, y_, z_)vol = np.empty((50, 50, 50), dtype=np.uint8)idx = x**2 + y**2 + z**2 &lt; 0.5**2vol[idx] = 1vol[~idx] = 0voxel_size = (0.1, 0.1, 0.1)mesh = pygalmesh.generate_from_array(    vol, voxel_size, max_facet_distance=0.2, max_cell_circumradius=0.1)mesh.write(&quot;ball.vtk&quot;)```The code below creates a mesh from the 3D breast phantom from [Lou etal](http://biomedicaloptics.spiedigitallibrary.org/article.aspx?articleid=2600985)available[here](https://wustl.app.box.com/s/rqivtin0xcofjwlkz43acou8jknsbfx8/file/127108205145).The phantom comprises four tissue types (background, fat, fibrograndular, skin, vasculartissues). The generated mesh conforms to tissues interfaces.&lt;!--pytest-codeblocks:skip--&gt;```pythonimport pygalmeshimport meshiowith open(&quot;MergedPhantom.DAT&quot;, &quot;rb&quot;) as fid:    vol = np.fromfile(fid, dtype=np.uint8)vol = vol.reshape((722, 411, 284))voxel_size = (0.2, 0.2, 0.2)mesh = pygalmesh.generate_from_array(    vol, voxel_size, max_facet_distance=0.2, max_cell_circumradius=1.0)mesh.write(&quot;breast.vtk&quot;)```In addition, we can specify different mesh sizes for each tissue type. The code belowsets the mesh size to _1 mm_ for the skin tissue (label `4`), _0.5 mm_ for the vasculartissue (label `5`), and _2 mm_ for all other tissues (`default`).&lt;!--pytest-codeblocks:skip--&gt;```pythonmesh = pygalmesh.generate_from_array(    vol,    voxel_size,    max_facet_distance=0.2,    max_cell_circumradius={&quot;default&quot;: 2.0, 4: 1.0, 5: 0.5},)mesh.write(&quot;breast_adapted.vtk&quot;)```#### Surface remeshing| &lt;img src=&quot;https://meshpro.github.io/pygalmesh/lion-head0.png&quot; width=&quot;100%&quot;&gt; | &lt;img src=&quot;https://meshpro.github.io/pygalmesh/lion-head1.png&quot; width=&quot;100%&quot;&gt; || :-------------------------------------------------------------------------: | :-------------------------------------------------------------------------: |pygalmesh can help remeshing an existing surface mesh, e.g.,[`lion-head.off`](https://github.com/nschloe/pygalmesh/raw/gh-pages/lion-head.off). Onthe command line, use```pygalmesh remesh-surface lion-head.off out.vtu -e 0.025 -a 25 -s 0.1 -d 0.001```(see `pygalmesh remesh-surface -h` for all options) or from Python&lt;!--pytest-codeblocks:skip--&gt;```pythonimport pygalmeshmesh = pygalmesh.remesh_surface(    &quot;lion-head.off&quot;,    max_edge_size_at_feature_edges=0.025,    min_facet_angle=25,    max_radius_surface_delaunay_ball=0.1,    max_facet_distance=0.001,    verbose=False,)```### InstallationFor installation, pygalmesh needs [CGAL](https://www.cgal.org/) and[Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page) installed on yoursystem. They are typically available on your Linux distribution, e.g., onUbuntu```sudo apt install libcgal-dev libeigen3-dev```On MacOS with homebrew,```brew install cgal eigen```After that, pygalmesh can be [installed from the Python PackageIndex](https://pypi.org/project/pygalmesh/), so with```pip install -U pygalmesh```you can install/upgrade.#### TroubleshootingIf pygalmesh fails to build due to `fatal error: 'Eigen/Dense' file not found`you will need to create a symbolic link for Eigen to be detected, e.g.```cd /usr/local/includesudo ln -sf eigen3/Eigen Eigen```It's possible that `eigen3` could be in `/usr/include` instead of`/usr/local/install`.#### Manual installationFor manual installation (if you're a developer or just really keen on gettingthe bleeding edge version of pygalmesh), there are two possibilities:- Get the sources, type `python3 setup.py install`. This does the trick  most the time.- As a fallback, there's a CMake-based installation. Simply go `cmake /path/to/sources/` and `make`.### TestingTo run the pygalmesh unit tests, check out this repository and type```pytest```### BackgroundCGAL offers two different approaches for mesh generation:1. Meshes defined implicitly by level sets of functions.2. Meshes defined by a set of bounding planes.pygalmesh provides a front-end to the first approach, which has the following advantagesand disadvantages:- All boundary points are guaranteed to be in the level set within any specified  residual. This results in smooth curved surfaces.- Sharp intersections of subdomains (e.g., in unions or differences of sets) need to be  specified manually (via feature edges, see below), which can be tedious.On the other hand, the bounding-plane approach (realized by[mshr](https://bitbucket.org/fenics-project/mshr)), has the following properties:- Smooth, curved domains are approximated by a set of bounding planes, resulting in more  of less visible edges.- Intersections of domains can be computed automatically, so domain unions etc. have  sharp edges where they belong.See [here](https://github.com/nschloe/awesome-scientific-computing#meshing) for othermesh generation tools.### LicenseThis software is available under the [GPLv3license](https://www.gnu.org/licenses/gpl-3.0.en.html) as well as a commerciallicense. If you'd like to use this software commercially, please contact theauthor.</longdescription>
</pkgmetadata>