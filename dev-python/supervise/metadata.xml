<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python supervise----------------This module provide a methods to handle runit_ or daemontools_ basedsupervised services, using the control file provided.  Here is a smallexample::    &gt;&gt;&gt; import supervise    &gt;&gt;&gt; s = supervise.Service('test')    &gt;&gt;&gt; print s.status()    {'action': None, 'status': 0, 'uptime': 300L, 'pid': None}    &gt;&gt;&gt; s.start()    &gt;&gt;&gt; print s.status()    {'action': None, 'status': 1, 'uptime': 3L, 'pid': 27450}Read the manpage of runsv(8) for more information. Also read thedocumentation for `ServiceStatus` to known how to parse statusinformation.History=======Last month I needed to install runit in some servers to supervise a coupleof services. Unfortunately my management interface cannot handle theservices anymore, so I decided to write a small module in python to solvethis handicap, and that is the result!.With this module you can handle in python environment a number of runitscripts. I think that this might be work for daemontools too, but I do nottest yet. Let's see an example::    &gt;&gt;&gt; import supervise    &gt;&gt;&gt; c = supervise.Service(&quot;/var/service/httpd&quot;)    &gt;&gt;&gt; print s.status()    {'action': 'normal', 'status': 'up', 'uptime': 300L, 'pid': None}    &gt;&gt;&gt; if s.status()['status'] == supervise.STATUS_DOWN: print &quot;service down&quot;    service down    &gt;&gt;&gt; s.start()    &gt;&gt;&gt; if s.status()['status'] == supervise.STATUS_UP: print &quot;service up&quot;    service upPersonally I use this module with rpyc library to manage remotely theservices running in a host, but it too easy making a web interface, forexample using bottle::    import supervise    import simplejson    from bottle import route, run    @route('/service/status/:name')    def service_status(name):        return simplejson.dumps( supervise.Service(&quot;/var/service/&quot; +            name).status() )    @route('/service/up/:name')    def service_up(name):        c = supervise.Service(&quot;/var/service/&quot; + name)            c.start()        return &quot;OK UP&quot;    @route('/service/down/:name')    def service_down(name):        c = supervise.Service(&quot;/var/service/&quot; + name)            c.down()        return &quot;OK DOWN&quot;    if __name__ == &quot;__main__&quot;:        run()Now you can stop your service just only point your browserhttp://localhost/service/down/httpd (to down http service in this case).Enjoy!.. _runit: http://smarden.org/runit/.. _daemontools: http://cr.yp.to/daemontools.html:author: Andres J. Diaz &lt;ajdiaz@connectical.com&gt;:date:   2009-11-21:maintainer: Peter Ruibal &lt;ruibalp@gmail.com&gt;</longdescription>
</pkgmetadata>