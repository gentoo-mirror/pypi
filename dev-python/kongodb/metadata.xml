<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Kongodb**Kongodb** is Hybrid Row-and-Document Oriented datastore leveraging SQL/RDBMS database: SQLite, MySQL, MariaDB, Postgresql Kongodb is both RDMBS + Document Oriented together.It supports, regular SQL query along with Document Oriented and Key Value store.Engine:- SQLite- Mariadb- PostgreSQL- MySQL### Install```python pip install kongodb```### Usage```pythonfrom kongodb import kongodb# Open the dbdb = kongodb(&quot;./my.db&quot;) # Select a collection # Collection will be created automaticallycollection = db.collection(&quot;test&quot;)# Get total itemsprint(len(collection))# Add an item. It returns kongodb#Itemitem = collection.add({  &quot;name&quot;: &quot;Kongo&quot;,  &quot;type&quot;: &quot;DB&quot;,  &quot;version&quot;: &quot;1.0.0&quot;})# Retrieve item by _id_id = &quot;9c5e5fbd05544700995c5fa3ca3ef214&quot;item = collection.get(_id)# Access propertiesitem.get(&quot;name&quot;) # -&gt; fun item.get(&quot;type&quot;) # -&gt; DBall_item_data = dict(item)# Update a fielditem.set(&quot;version&quot;, &quot;1.0.1&quot;)# or advance atomic updateitem.update({  &quot;version&quot;: &quot;1.0.1&quot;,  &quot;download:$inc&quot;: True,  &quot;ips:$xadd&quot;: &quot;0.0.0.0&quot;})#item.get(&quot;version&quot;) # -&gt; 1.0.1item.get(&quot;download&quot;) # -&gt; 1 or last value + 1item.get(&quot;ips&quot;) # -&gt; [&quot;0.0.0.0&quot;]# Delete itemitem.delete()# Searchfor item in collection.find():  print(item.get(&quot;name&quot;))```## ~ API ~## Database### kongodb### #collectionTo select a collection in the database```pythonfrom kongodb import kongodb db = kongodb()users = fun.collection(&quot;users&quot;)# all usersall_users = users.find_all()```### #CollectionList all the collections in the database ```pythonfrom kongodb import kongodb db = kongodb()users = fun.collection(&quot;users&quot;)```## ColumnTypes For Index:| Type | Column | SQlite | MariaDB | PostgreSQL|| :--- | :---: | :---: | :---: | ---: || Integer | IntegerType | INT | INTEGER | INT || String | StringType | VARCHAR(n) | VARCHAR(n) | VARCHAR(n)|| Bool | BoolType | INT(1) | TINYINT(1) | BOOLEAN || Datetime | DatetimeType | TIMESTAMP   | DATETIME | TIMESTAMP || Numeric | NumericType | FLOAT | DOUBLE PRECISION | DOUBLE PRECISION |*n = the max number for the char## ColumnType ```  types.[columtype](      name:str,  # str: name of the field      length:int, # int: length of the type if available       index:bool, # bool: to index the field      unique:bool, # bool: to index and make field unique        default:Any # Any: any data to set as default  )ie: ```Example```types.StringType(  name=&quot;myFieldName&quot;,  length=125,  index=True,  unique=True,  default=&quot;Hello&quot;)```Add Columns ```from kongodb import kongodb, typesCOLUMNS = [  types.IntegerType('count', index=True, default=0),  types.BoolType('is_active', default=True),  types.Datetime('created_at', default=&quot;NOW()&quot;),  types.String('full_name'),  types.NumericType('amount', default=0.00)]db = kongodb(&quot;sqlite://&quot;)collection = db.collection('test', columns=COLUMNS)```</longdescription>
</pkgmetadata>