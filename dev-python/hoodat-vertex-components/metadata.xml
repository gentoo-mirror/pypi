<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hoodat Pipeline Components[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)This repository provides an SDK and a set of components that performtasks in hoodat.It is modelled after this repository of shared components for GCP:https://github.com/kubeflow/pipelines/tree/google-cloud-pipeline-components-1.0.1/components/google-cloud## To create new release of package and push to pypi:1. Update the version with commitizen:```shell# cz bump --dry-runcz bump```2. Push to main branch```shellgit push```3. Create a new release in github.The package will be built and pushed to pypi in a github action.## MakefileThere is a Makefile at the root of this project which provides someuseful functionality for developing and publishing components. In thenext sections of this document some of this funcitonality will bedescribed.Important to the use of the Makefile is the creation of an `env.sh`file with necessary arguments populated. See `env.sh.example` for anexample of what this file should look like. Copy it to `env.sh` andreplace the default arguments with your own.### To create a new component with your own DockerfileNew components should be added to the`hoodat_vertex_components/components` subdirectory. See already existingexamples. Here is a common file structure for a component:```├── make_cascade_file│   ├── Dockerfile│   ├── cascades.csv│   ├── component.yaml│   ├── make_cascade_file.py│   ├── poetry.lock│   ├── pyproject.toml│   └── tests│       └── test_filter_cascades.py```#### To run a components docker container in interactive modeThis function will be useful for running a components docker imageinteractively. Update the `env.sh` with the name of the component andrun:```shmake run_interactive```#### To run a pipeline with a single component in itIt may be useful to test a component in a pipeline. To do this, updatethe `env.sh` with the name of the component and run:```shmake push_and_pipeline```### To create a new python componentLook at video_to_frames for an example.Once you're happy, run:```shCOMPONENT_NAME=video_to_framescd hoodat_vertex_components/components/$COMPONENT_NAMEpoetry run python component.py```</longdescription>
</pkgmetadata>