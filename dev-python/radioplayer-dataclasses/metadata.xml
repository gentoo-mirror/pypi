<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Radioplayer DataclassesClasses for generating [radioplayer](https://radioplayer.co.uk) compatible data. Generated using [xsdata](https://xsdata.readthedocs.io/).## Installation```bashpip install radioplayer-dataclasses```## UsageThe `radioplayer.dataclasses` module may be used to build radioplayer compatible structures.Serializing is done using the `xsdata` library.```python&gt;&gt;&gt; from radioplayer.dataclasses import *&gt;&gt;&gt; epg = Epg(lang=&quot;en&quot;)&gt;&gt;&gt; epgEpg(programme_groups=[], schedule=[], alternate_source=[], lang='en', system=&lt;SystemType.DAB: 'DAB'&gt;)&gt;&gt;&gt; from xsdata.formats.dataclass.serializers import XmlSerializer&gt;&gt;&gt; from xsdata.formats.dataclass.serializers.config import SerializerConfig&gt;&gt;&gt;&gt;&gt;&gt; config = SerializerConfig(...     pretty_print=True,...     xml_declaration=False,... )&gt;&gt;&gt; serializer = XmlSerializer(config=config)&gt;&gt;&gt; xml = serializer.render(epg, ns_map={None: Epg.Meta.namespace})&gt;&gt;&gt; print(xml.strip())&lt;epg xmlns=&quot;http://www.radioplayer.co.uk/schemas/11/epgSchedule&quot; xml:lang=&quot;en&quot; system=&quot;DAB&quot;/&gt;```Additional examples are available in the `tests/` directory.## Development### Getting Started```bash# setup a dev envpython -mvenv env. env/bin/activate# install a modern poetry versionpython -mpip install 'poetry&gt;=1.2.0'# install deps and dev versionpoetry install```### Loading XSD files```bashmkdir schemaspushd schemas/curl -L -O http://www.w3.org/2001/xml.xsdcurl -L -O https://radioplayer.co.uk/schemas/11/epgSchedule_11.xsdcurl -L -O https://radioplayer.co.uk/schemas/11/epgDataTypes_11.xsdcurl -L -O https://radioplayer.co.uk/schemas/11/rpDataTypes_11.xsdcurl -L -O https://radioplayer.co.uk/schemas/11/epgSI_11.xsdpopd```Some touchups where made to the files to make them validate where necessary.### Generating dataclasses```bashpoetry run xsdata -c .xsdata.xml schemas/```### Running tests```bashpoetry run pytest```## Release ManagementThe CI/CD setup uses semantic commit messages following the [conventional commits standard](https://www.conventionalcommits.org/en/v1.0.0/).There is a GitHub Action in [.github/workflows/semantic-release.yaml](./.github/workflows/semantic-release.yaml)that uses [go-semantic-commit](https://go-semantic-release.xyz/) to create newreleases.The commit message should be structured as follows:```&lt;type&gt;[optional scope]: &lt;description&gt;[optional body][optional footer(s)]```The commit contains the following structural elements, to communicate intent to the consumers of your library:1. **fix:** a commit of the type `fix` patches gets released with a PATCH version bump1. **feat:** a commit of the type `feat` gets released as a MINOR version bump1. **BREAKING CHANGE:** a commit that has a footer `BREAKING CHANGE:` gets released as a MAJOR version bump1. types other than `fix:` and `feat:` are allowed and don't trigger a releaseIf a commit does not contain a conventional commit style message you can fixit during the squash and merge operation on the PR.Once a commit has landed on the `main` branch a release will be created and automatically published to [pypi](https://pypi.org/)using the GitHub Action in [.github/workflows/release.yaml](./.github/workflows/release.yaml) which uses [poetry](https://python-poetry.org/)to publish the package to pypi.## LicenseThis application is free software: you can redistribute it and/or modify it underthe terms of the GNU Affero General Public License as published by the FreeSoftware Foundation, version 3 of the License.## CopyrightCopyright (c) 2022 [Radio Bern RaBe](http://www.rabe.ch)</longdescription>
</pkgmetadata>