<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># braincube-aws-coreMicroframework for Python AWS lambdas.[![Language](https://img.shields.io/badge/language-Python-blue.svg)](https://www.python.org/)[![pypi](https://img.shields.io/pypi/v/braincube-aws-core-alpha.svg)](https://pypi.org/project/braincube-aws-core-alpha/)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)## Installation```bashpip install braincube-aws-core-alpha```## Built With- [asyncpg](https://github.com/MagicStack/asyncpg) - A fast PostgreSQL Database Client Library for Python/asyncio.- [pydantic](https://github.com/pydantic/pydantic) - Data validation using Python type hints.- [pypika](https://github.com/kayak/pypika) - Python Query Builder.### Application Controllers Example```pythonimport asynciofrom uuid import uuid4from http import HTTPStatusfrom core.rest.data import HTTPRequest, HTTPResponsefrom core.rest.app_module import AppModulefrom core.rest.app_controller import AppControllerfrom pydantic import BaseModelclass AccountDto(BaseModel):    iban: str    bban: strdata = {    &quot;a0a412d9-87ef-474b-9ac8-b682ec5e0fb3&quot;: AccountDto(iban=&quot;EUR27100777770209299700&quot;, bban=&quot;EURC12345612345678&quot;),    &quot;5ebc25bd-e152-4a70-b251-d68e43be581e&quot;: AccountDto(iban=&quot;GR27100777770209299700&quot;, bban=&quot;GRC12345612345678&quot;),}app = AppController(&quot;/accounts&quot;)@app.get(&quot;/{id}&quot;)async def get_account(request: HTTPRequest) -&gt; HTTPResponse:    account = data.get(request.path_parameters[&quot;id&quot;])    return HTTPResponse(HTTPStatus.OK if account else HTTPStatus.NO_CONTENT, account)@app.post()async def create_account(request: HTTPRequest[AccountDto]) -&gt; HTTPResponse:    data[uuid4()] = request.body    return HTTPResponse(HTTPStatus.CREATED)loop = asyncio.get_event_loop()module = AppModule([app])def main(event, context):    return loop.run_until_complete(module.serve(event, context))```### Dependency Injection Example```pythonfrom core.di.injector import injectfrom core.dal.postgres_connection import get_pool, Pool@inject(&quot;data_warehouse_pool&quot;)async def provide_warehouse_pool() -&gt; Pool:    return await get_pool()@inject(qualifier=&quot;pool:data_warehouse_pool&quot;)class BankService:    def __init__(self, pool: Pool):        self._pool = pool```### Postgres Repository Example```pythonfrom core.rest.data import HTTPRequestfrom core.utils.data import Order, OrderTypefrom core.dal.data import Key, Schema, Column, Relation, SimpleColumn, JoinType, JoinThrough, StatementFieldfrom core.dal.postgres_connection import get_pool, Poolfrom core.dal.postgres_repository import PostgresRepository# schema definitionequities = Schema(    table=&quot;equities&quot;,    alias=&quot;e&quot;,    primary_key=[&quot;id&quot;],    columns=[        Column(&quot;id&quot;, updatable=False, insertable=False),        Column(&quot;name&quot;),        Column(&quot;type&quot;),        Column(&quot;issuer_id&quot;, alias=&quot;issuerId&quot;),        Column(&quot;industry_sector&quot;, alias=&quot;industrySector&quot;),        Column(&quot;isin&quot;),        Column(&quot;reference&quot;),        Column(&quot;bloomberg_code&quot;, alias=&quot;bloombergCode&quot;),        Column(&quot;market_symbol&quot;, alias=&quot;marketSymbol&quot;),        Column(&quot;currency&quot;),        Column(&quot;country&quot;, ),        Column(&quot;min_amount&quot;, alias=&quot;minAmount&quot;),    ],    statement_fields=[        StatementField(&quot;isTypeOne&quot;, statement=&quot;CASE WHEN e.type = 1 then True else False END&quot;)    ],    order=[        Order(type=OrderType.asc, alias=&quot;name&quot;)    ],    relations=[        Relation(            table=&quot;parties&quot;,            alias=&quot;p&quot;,            columns=[                SimpleColumn(&quot;name&quot;),                SimpleColumn(&quot;short_name&quot;, alias=&quot;shortName&quot;),            ],            join_forced=False,            join_type=JoinType.left,            join_through=JoinThrough(from_column_name=&quot;issuer_id&quot;, to_column_name=&quot;id&quot;)        )    ])# repository definitionclass EquitiesRepo(PostgresRepository):    def __init__(self, pool: Pool):        super().__init__(pool, equities)# repository usagerequest = HTTPRequest()repo = EquitiesRepo(await get_pool())await repo.find_by_pk(Key(request.path_parameters[&quot;id&quot;]), request.query_parameters.fields)await repo.exists_by_pk(Key(&quot;9448a57b-f686-4935-b152-566baab712db&quot;))await repo.find_one(    request.query_parameters.fields,    conditions=request.query_parameters.conditions,    order=request.query_parameters.order)await repo.find_all(    request.query_parameters.fields,    conditions=request.query_parameters.conditions,    order=request.query_parameters.order)await repo.find_all_by_pk(    [        Key(&quot;9448a57b-f686-4935-b152-566baab712db&quot;),        Key(&quot;43c8ec37-9a59-44eb-be90-def391ba2f02&quot;)    ],    aliases=request.query_parameters.fields,    order=request.query_parameters.order)await repo.find_many(    request.query_parameters.fields,    conditions=request.query_parameters.conditions,    page=request.query_parameters.page,    order=request.query_parameters.order)await repo.insert({    &quot;name&quot;: &quot;Bursa de Valori Bucuresti SA&quot;,    &quot;type&quot;: 1,    &quot;industrySector&quot;: 40,    &quot;isin&quot;: &quot;ROBVBAACNOR0&quot;,    &quot;bloombergCode&quot;: &quot;BBG000BBWMC5&quot;,    &quot;marketSymbol&quot;: &quot;BVB RO Equity&quot;,    &quot;currency&quot;: &quot;RON&quot;,    &quot;country&quot;: &quot;RO&quot;,})await repo.insert_bulk(    aliases=[&quot;name&quot;, &quot;type&quot;, &quot;industrySector&quot;, &quot;isin&quot;, &quot;bloombergCode&quot;, &quot;marketSymbol&quot;, &quot;currency&quot;, &quot;country&quot;],    data=[        [&quot;Bursa de Valori Bucuresti SA&quot;, 1, 40, &quot;ROBVBAACNOR0&quot;, &quot;BBG000BBWMC5&quot;, &quot;BVB RO Equity&quot;, &quot;RON&quot;, &quot;RO&quot;],        [&quot;Citigroup Inc&quot;, 1, 40, &quot;US1729674242&quot;, &quot;BBG000FY4S11&quot;, &quot;C US Equity&quot;, &quot;USD&quot;, &quot;US&quot;],        [&quot;Coca-Cola HBC AG&quot;, 1, 49, &quot;CH0198251305&quot;, &quot;BBG004HJV2T1&quot;, &quot;EEE GA Equity&quot;, &quot;EUR&quot;, &quot;GR&quot;],    ])await repo.update({    &quot;type&quot;: 1,    &quot;isin&quot;: 40,}, request.query_parameters.conditions, request.query_parameters.fields)await repo.update_by_pk(Key(&quot;9448a57b-f686-4935-b152-566baab712db&quot;), {    &quot;type&quot;: 1,    &quot;isin&quot;: 40})await repo.delete(request.query_parameters.conditions, [&quot;id&quot;, &quot;name&quot;, &quot;type&quot;])await repo.delete_by_pk(Key(&quot;9448a57b-f686-4935-b152-566baab712db&quot;), [&quot;id&quot;, &quot;name&quot;, &quot;type&quot;])await repo.fetch(&quot;SELECT * FROM equities WHERE type = $1 and isin = $2&quot;, [1, &quot;TREEGYO00017&quot;])await repo.fetch_one(&quot;SELECT * FROM equities WHERE id = $1&quot;, [&quot;2b67122a-f47e-41b1-b7f7-53be5ca381a0&quot;])await repo.execute(&quot;DELETE FROM equities WHERE id = $1&quot;, [&quot;2b67122a-f47e-41b1-b7f7-53be5ca381a0&quot;])```### Query params format```fields=name, type, industrySector, isin, bloombergCode, parties_name, parties_shortNametype=1isin=range(40, 49)id=any(9448a57b-f686-4935-b152-566baab712db, 43c8ec37-9a59-44eb-be90-def391ba2f02)page_no=1page_size=50top_size=50order=name, id DESC```### Local Development RequirementsTo use the SAM CLI, you need the following tools.* [SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html)* [Python 3](https://www.python.org/downloads/)* [Docker](https://hub.docker.com/search/?type=edition&amp;offering=community)### Run server locally```bash# open ssh tunelsudo sh ssh_tunnel_Analog_JBox.sh# apply code changes to docker imagesam-api$ sam build# start server locally on http://127.0.0.1:3000sam-api$ sam local start-api --warm-containers EAGER# or run function locally using event.json as parametersam-api$ sam local invoke ApiFunction --event events/event.json```### Deploy to AWS```bashsam build --use-containersam deploy --capabilities CAPABILITY_NAMED_IAM --guided --profile analog_user --region eu-west-1```### Build and deploy new package version using twine```bashpython3 -m pip install --upgrade pippython3 -m pip install --upgrade buildpython3 -m pip install --upgrade twine``````bashpython3 -m buildtwine upload --skip-existing dist/*```### Resources* [SAM template.yml](https://github.com/aws/serverless-application-model/blob/master/docs/internals/generated_resources.rst)* [asyncpg driver](https://magicstack.github.io/asyncpg/current/)* [PyPika query builder](https://pypika.readthedocs.io/en/latest/)* [Pydantic](https://docs.pydantic.dev/)</longdescription>
</pkgmetadata>