<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># realcugan ncnn Vulkan Python![CI](https://github.com/media2x/realcugan-ncnn-vulkan-python/workflows/CI/badge.svg)## IntroductionA Python FFI of nihui/realcugan-ncnn-vulkan achieved with SWIG.[realcugan-ncnn-vulkan](https://github.com/nihui/realcugan-ncnn-vulkan) is nihui's ncnn implementation of realcugan converter. Runs fast on Intel / AMD / Nvidia with Vulkan API.This project only wrapped the original RealCUGAN class. As a result, functions other than the core upscaling and denoising such as multi-thread loading and saving are not available. Of course, the auto tilesize and prepadding settings are implements, so don't worry about them.## Downloadlinux x64, Windows x64 and MacOS x64 releases are available now. For other platforms, you may compile it on your own.The reason why MacOS ARM64 build is not available is that it needs ARM Python Dev Libs which I have no ideas on how toget it on Github's MacOS x64 VM. Moreover, I don't have a Mac.- **However, for Linux (Like Ubuntu 18.04) with an older GLIBC (version &lt; 2.29), you may try to use the ubuntu-1804 release or just compile it on your own.**- **Windows release is not working for all python version. The version of Windows build is for python 3.9. This is a known issue: [ImportError: DLL load failed while importing \_rife_ncnn_vulkan_wrapper: The specified module could not be found.](https://github.com/ArchieMeng/rife-ncnn-vulkan-python/issues/1)**Update: it has been uploaded to PyPI, and you can install it with pip now.## Installation```shellpip install realcugan-ncnn-vulkan-python```## BuildFirst, you have to install python, python development package (Python native development libs in Visual Studio), vulkan SDK and SWIG on your platform. And then, there are two ways to build it:- Use setuptools to build and install into python package directly. (Currently in developing)- Use CMake directly (The old way)### Use setuptools```shellpython setup.py install```### Use CMake#### Linux1. install dependencies: cmake, vulkan sdk, swig and python-devDebian, Ubuntu and other Debian-like Distros```shellapt-get install cmake libvulkan-dev swig python3-dev```Arch Distros```shellpacman -S base-devel cmake vulkan-headers vulkan-icd-loader swig python```2. Build with CMake```shellgit clone https://github.com/ArchieMeng/realcugan-ncnn-vulkan-python.gitcd realcugan-ncnn-vulkan-pythongit submodule update --init --recursivecd srccmake -B build .cd buildmake```#### WindowsI used Visual Studio 2019 and msvc v142 to build this project for Windows.Install visual studio and open the project directory, and build. Job done.The only problem on Windows is that, you cannot use [CMake for Windows](https://cmake.org/download/) GUI to generate the Visual Studio solution file and build it. This will make the lib crash on loading.One way is [using Visual Studio to open the project as directory](https://www.microfocus.com/documentation/visual-cobol/vc50/VS2019/GUID-BE1C48AA-DB22-4F38-9644-E9B48658EF36.html), and build it from Visual Studio.And another way is build it from powershell just like what is written in the [release.yml](.github/workflows/release.yml)#### Mac OS X1. install dependencies: cmake, vulkan sdk, swig and python-dev- download vulkan sdk from https://vulkan.lunarg.com/sdk/home- If you have homebrew installed, run the command below to get SWIG```shellbrew install swig```- I guess python dev is out-of-box in Mac. If not, google it.2. Build with CMake- You can pass -DUSE_STATIC_MOLTENVK=ON option to avoid linking the vulkan loader library on MacOS```shellgit clone https://github.com/ArchieMeng/realcugan-ncnn-vulkan-python.gitcd realcugan-ncnn-vulkan-pythongit submodule update --init --recursivecd srccmake -B build .cd buildmake```## Usages### Example program```pythonfrom PIL import Imagefrom realcugan_ncnn_vulkan import RealCUGANwith Image.open(&quot;input.png&quot;) as image:  realcugan = RealCUGAN(gpuid=0, scale=2, noise=3)  image = realcugan.process(image)  image.save(&quot;output.png&quot;)```## [Docs](Docs.md)## Known issues- [Module finalization will crash for nvidia dedicated graphics card(s) on Linux. (The image processing still works.)](https://github.com/Tencent/ncnn/issues/2666)- Not yet tested for Mac OS. I guess it should work.## Original realcugan Project- https://github.com/bilibili/ailab/tree/main/Real-CUGAN- https://github.com/nihui/realcugan-ncnn-vulkan## Other Open-Source Code Used- https://github.com/Tencent/ncnn for fast neural network inference on ALL PLATFORMS- https://github.com/webmproject/libwebp for encoding and decoding Webp images on ALL PLATFORMS- https://github.com/nothings/stb for decoding and encoding image on Linux / MacOS- https://github.com/tronkko/dirent for listing files in directory on Windows</longdescription>
</pkgmetadata>