<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Requirements- Python 3.8+- Flit to put Python packages and modules on PyPI- Pydantic for the data parts.## Installation```pip install flitpip install pyimporters-dummy```## Publish the Python Package to PyPI- Increment the version of your package in the `__init__.py` file:```&quot;&quot;&quot;An amazing package!&quot;&quot;&quot;__version__ = 'x.y.z'```- Publish```flit publish```## Write your own pyimporters plugin- Git clone the pyimporters_dummy project```git clone git@bitbucket.org:kairntech/pyimporters_dummy.git```- Rename the project with your own format name &lt;new_format&gt;```mv pyimporters_dummy pyimporters_&lt;new_format&gt;```- Delete the .git directory```rm -r -f pyimporters_&lt;new_format&gt;/.git```- Change to the new pyimporters_&lt;new_format&gt; directory```cd pyimporters_&lt;new_format&gt;```- Rename the package directory project```mv pyimporters_dummy pyimporters_&lt;new_format&gt;```- Rename the python file implementation```mv pyimporters_&lt;new_format&gt;/dummy.py pyimporters_&lt;new_format&gt;/&lt;new_format&gt;.py```- Rename the python tests file implementation```mv tests/test_dummy.py tests/test_&lt;new_format&gt;.py```- Edit the pyproject.toml file to change a few lines and add your additional requirements```[tool.flit.metadata]module = &quot;pyimporters_&lt;new_format&gt;&quot;...requires = [    &quot;pyimporters_plugins&gt;=0.1.61&quot;,    &quot;additional_requirement1&quot;,    &quot;additional_requirement2&quot;,    ...    &quot;additional_requirementN&quot;,]dist-name = &quot;pyimporters-&lt;new_format&gt;&quot;...[tool.flit.entrypoints.&quot;pyimporters.plugins&quot;]&lt;new_format&gt; = &quot;pyimporters_&lt;new_format&gt;.&lt;new_format&gt;:NewFormatKnowledgeParser&quot;```- Write the implementation and test of your new format in python using your favorite IDE```@dataclassclass NewFormatOptions(KnowledgeParserOptions):    &quot;&quot;&quot;    Options for the new format knowledge import    &quot;&quot;&quot;    foo : str = Query(&quot;bar&quot;, description=&quot;Dummy parameter&quot;)NewFormatOptionsModel = NewFormatOptions.__pydantic_model__class NewFormatKnowledgeParser(KnowledgeParserBase):    def parse(self, source : Path, options: Union[KnowledgeParserOptions, Dict[str, Any]], bar : Bar) -&gt; Generator[Term, None, None]:        options = NewFormatOptions(**options) if isinstance(options, dict) else options        # Initialize the progress indicator number of terms to read so that the progress indicator can send feedback to the end user        bar.max = 100         bar.start()        # yield as many terms as you want, advancing the progress indicator each time        bar.next()        yield Term(identifier=options.foo, preferredForm=options.foo)        # Terminate the progress indicator        bar.finish()    @classmethod    def get_schema(cls) -&gt; KnowledgeParserOptions:        return NewFormatOptions    @classmethod    def get_model(cls) -&gt; Type[BaseModel]:        return NewFormatOptionsModel```</longdescription>
</pkgmetadata>