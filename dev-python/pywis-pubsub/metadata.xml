<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![flake8](https://github.com/wmo-im/pywis-pubsub/workflows/flake8/badge.svg)](https://github.com/wmo-im/pywis-pubsub/actions)[![test-publish-subscribe-download](https://github.com/wmo-im/pywis-pubsub/workflows/test-publish-subscribe-download/badge.svg)](https://github.com/wmo-im/pywis-pubsub/actions)# pywis-pubsub## Overviewpywis-pubsub provides subscription and download capability of WMO data from WIS2infrastructure services.## InstallationThe easiest way to install pywis-pubsub is via the Python [pip](https://pip.pypa.io)utility:```bashpip3 install pywis-pubsub```### Requirements- Python 3- [virtualenv](https://virtualenv.pypa.io)### DependenciesDependencies are listed in [requirements.txt](requirements.txt). Dependenciesare automatically installed during pywis-pubsub installation.#### Windows installationsNote that you will need Cython and [Shapely Windows wheels](https://pypi.org/project/shapely/#files) for windows for your architectureprior to installing pywis-pubsub.### Installing pywis-pubsub```bash# setup virtualenvpython3 -m venv --system-site-packages pywis-pubsubcd pywis-pubsubsource bin/activate# clone codebase and installgit clone https://github.com/wmo-im/pywis-pubsub.gitcd pywis-pubsubpython3 setup.py install```## RunningFirst check pywis-pubsub was correctly installed```bashpywis-pubsub --version```### Subscribing```bashcp pywis-pubsub-config.yml local.ymlvim local.yml # update accordingly to configure subscribe-optionspywis-pubsub --version# sync WIS2 notification schemapywis-pubsub schema sync# connect, and simply echo messagespywis-pubsub subscribe --config local.yml# subscribe, and download data from messagepywis-pubsub subscribe --config local.yml --download# subscribe, and filter messages by geometrypywis-pubsub subscribe --config local.yml --bbox=-142,42,-52,84# subscribe, and filter messages by geometry, increase debugging verbositypywis-pubsub subscribe --config local.yml --bbox=-142,42,-52,84 --verbosity=DEBUG```### Validating a message and verifying data```bash# validate a messagepywis-pubsub message validate /path/to/message1.json# verify data from a messagepywis-pubsub message verify /path/to/message1.json```### Publishing```bashcp pub-config-example.yml pub-local.ymlvim pub-local.yml # update accordingly to configure publishing options# example publishing a WIS2 notification message with attributes: # unique-id=stationXYZ-20221111085500 # data-url=http://www.meteo.xx/stationXYZ-20221111085500.bufr4 # lon,lat,elevation=33.8,11.8,112# wigos_station_identifier=0-20000-12345pywis-pubsub publish --topic origin/a/wis2/country/centre-id/data/core/weather --config pub-local.yml -i stationXYZ-20221111085500 -u https://example.org/stationXYZ-20221111085500.bufr4 -g 33.8,-11.8,8.112 -w 0-20000-12345# publish a message from file on diskpywis-pubsub publish --topic origin/a/wis2/country/centre-id/data/core/weather --config pub-local.yml --file my_message.json```### Using the APIPython examples:```python# subscriber examplefrom pywis_pubsub.mqtt import MQTTPubSubClientoptions = {    'storage': {        'type': 'fs',        'path': '/tmp'    },    'bbox': [-90, -180, 90, 180]}topics = [    'topic1',    'topic2']m = MQTTPubSubClient('mqtt://localhost:1883', options)m.sub(topics)``````python# publish examplefrom pywis_pubsub.mqtt import MQTTPubSubClientfrom pywis_pubsub.publish import create_messagemessage = create_message(        topic='foo/bar',        content_type='application/x-bufr',        url='http://www.meteo.xx/stationXYZ-20221111085500.bufr4',         identifier='stationXYZ-20221111085500',         geometry=[33.8, -11.8, 123],        wigos_station_identifier='0-20000-12345')m = MQTTPubSubClient('mqtt://localhost:1883')m.pub(topic, json.dumps(message))```## Development### Running Tests```bash# install dev requirementspip3 install -r requirements-dev.txt# run tests like this:python3 tests/run_tests.py# or this:python3 setup.py test```## Releasing```bash# create release (x.y.z is the release version)vi pywis_pubsub/__init__.py  # update __version__git commit -am 'update release version x.y.z'git push origin maingit tag -a x.y.z -m 'tagging release version x.y.z'git push --tags# upload to PyPIrm -fr build dist *.egg-infopython3 setup.py sdist bdist_wheel --universaltwine upload dist/*# publish release on GitHub (https://github.com/wmo-im/pywis-pubsub/releases/new)# bump version back to devvi pywis_pubsub/__init__.py  # update __version__git commit -am 'back to dev'git push origin main```### Code Conventions* [PEP8](https://www.python.org/dev/peps/pep-0008)### Bugs and IssuesAll bugs, enhancements and issues are managed on [GitHub](https://github.com/wmo-im/pywis-pubsub/issues).## Contact* [Antje Schremmer](https://github.com/antje-s)* [Tom Kralidis](https://github.com/tomkralidis)* [Maaike Limper](https://github.com/maaikelimper)</longdescription>
</pkgmetadata>