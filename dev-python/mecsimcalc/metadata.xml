<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mecsimcalc v0.1.5 documentationThis library is designed to provide a set of functions for handling and converting various types of data, such as base64 encoded data, Pandas DataFrames, and Pillow images.- [GitHub Repository](https://github.com/MecSimCalc/MecSimCalc-utils)- [PyPi Page](https://pypi.org/project/mecsimcalc/)## General&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;input_to_file&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/general_utils.py#L7C1-L56C61&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythoninput_to_file(input_file, metadata = False)```#### Description:Converts a base64 encoded string into a file object and metadata#### Arguments:| Argument         | Type                | Description                                                || ---------------- | ------------------- | ---------------------------------------------------------- || **`input_file`** | **str**             | Base64 encoded string, prefixed with metadata              || **`metadata`**   | **bool** (optional) | Flag to return metadata with the file. (Defaults to False) |#### Raises:| Exception        | Description                                                                        || ---------------- | ---------------------------------------------------------------------------------- || **`ValueError`** | If the input string doesn't contain ';base64,' to separate metadata and file data. |#### Returns:| Return Type             | Description                                                              | Condition         || ----------------------- | ------------------------------------------------------------------------ | ----------------- || **`io.BytesIO`**        | The decoded file data (The thing you get when you open a file in Python) | metadata is False || **`(io.BytesIO, str)`** | The decoded file data and its metadata                                   | metadata is True  |#### Example:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; file, metadata = input_to_file(input_file, metadata = True)&gt;&gt;&gt; print(metadata)data:image/jpeg;base64,&gt;&gt;&gt; type(file)&lt;class '_io.BytesIO'&gt;```&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;metadata_to_filetype&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/general_utils.py#L59C1-L86C21&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonmetadata_to_filetype(metadata):```#### Description:Extracts the file type from the metadata#### Arguments:| Argument       | Type    | Description                                                                                   || -------------- | ------- | --------------------------------------------------------------------------------------------- || **`metadata`** | **str** | The metadata string in the form &quot;Data:(MIME type);base64,&quot;(returned from **`input_to_file`**) |#### Returns:| Return Type | Description                 || ----------- | --------------------------- || **`str`**   | The file type (e.g. &quot;jpeg&quot;) |#### Example:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; file, metadata = input_to_file(input_file, metadata = True)&gt;&gt;&gt; print(metadata)data:image/jpeg;base64,&gt;&gt;&gt; download_file_type = metadata_to_filetype(metadata)&gt;&gt;&gt; print(download_file_type)jpeg```## Text&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;string_to_file&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/text_utils.py#L4C1-L67C85&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonstring_to_file(    text    filename= &quot;myfile&quot;,    download_text = &quot;Download File&quot;,)```#### Description:Generates a downloadable text file containing the given text#### Arguments:| Argument            | Type               | Description                                                              || ------------------- | ------------------ | ------------------------------------------------------------------------ || **`text`**          | **str**            | Text to be downloaded                                                    || **`filename`**      | **str** (optional) | Name of the download file. (Defaults to &quot;myfile&quot;)                        || **`download_text`** | **str** (optional) | Text to be displayed as the download link. (Defaults to &quot;Download File&quot;) |#### Raises:| Exception       | Description                        || --------------- | ---------------------------------- || **`TypeError`** | If the input text is not a string. |#### Returns:| Return Type | Description        || ----------- | ------------------ || **`str`**   | HTML download link |#### Example:#### Python```python&gt;&gt;&gt; download_link = string_to_file(&quot;Hello World!&quot;)&gt;&gt;&gt; return {&quot;download&quot;: download_link}```#### Jinja2```python# outputs.downloadLink is the html download link generated by the function{{ outputs.download }}```## Spreadsheets&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;file_to_dataframe&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/spreadsheet_utils.py#L9C1-L48C14&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonfile_to_dataframe(file_data):```#### Description:Converts a base64 encoded file data into a pandas DataFrame#### Arguments:| Argument        | Type           | Description                                       || --------------- | -------------- | ------------------------------------------------- || **`file_data`** | **io.BytesIO** | Decoded file data (e.g. from **`input_to_file`**) |#### Raises:| Exception                   | Description                                                                                                 || --------------------------- | ----------------------------------------------------------------------------------------------------------- || **`pd.errors.ParserError`** | If the file data cannot be converted to a DataFrame (i.e. file is not an Excel or CSV file or is corrupted) |#### Returns:| Return Type        | Description                      || ------------------ | -------------------------------- || **`pd.DataFrame`** | DataFrame created from file data |#### Example:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; decoded_file = input_to_file(input_file)&gt;&gt;&gt; df = file_to_dataframe(decoded_file)&gt;&gt;&gt; print(df)   A  B  C0  a  b  c1  d  e  f```&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;input_to_dataframe&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/spreadsheet_utils.py#L51C1-L87C44&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythoninput_to_dataframe(file):```#### Description:Converts a base64 encoded file data into a pandas DataFrame#### Arguments:| Argument            | Type     | Description                                                          || ------------------- | -------- | -------------------------------------------------------------------- || **`input_file`**    | **str**  | Base64 encoded file data                                             || **`get_file_type`** | **bool** | If True, the function also returns the file type (Defaults to False) |#### Returns:| Return Type               | Description                                      | Condition              || ------------------------- | ------------------------------------------------ | ---------------------- || **`pd.DataFrame`**        | DataFrame created from file data                 | get_file_type is False || **`(pd.DataFrame, str)`** | Tuple containing the DataFrame and the file type | get_file_type is True  |#### Example:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; df, file_type = input_to_dataframe(input_file, get_file_type = True)&gt;&gt;&gt; print(df)   A  B  C0  a  b  c1  d  e  f&gt;&gt;&gt; print(file_type)csv```&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;print_dataframe&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/spreadsheet_utils.py#L90C1-L186C39&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonprint_dataframe(    df,    download = False,    download_text = &quot;Download Table&quot;,    download_file_name = &quot;mytable&quot;,    download_file_type = &quot;csv&quot;,):```#### Description:Creates an HTML table and a download link for a given DataFrame#### Arguments:| Argument                 | Type                | Description                                                              || ------------------------ | ------------------- | ------------------------------------------------------------------------ || **`df`**                 | **pd.DataFrame**    | DataFrame to be converted                                                || **`download`**           | **bool** (optional) | If True, function returns a download link (Defaults to False)            || **`download_text`**      | **str** (optional)  | Text to be displayed as the download link (Defaults to &quot;Download Table&quot;) || **`download_file_name`** | **str** (optional)  | Name of file when downloaded (Defaults to &quot;mytable&quot;)                     || **`download_file_type`** | **str** (optional)  | File type of downloaded file (Defaults to &quot;csv&quot;)                         |#### Returns:| Return Type           | Description                      | Condition         || --------------------- | -------------------------------- | ----------------- || **`str`**             | HTML table                       | download is False || **`Tuple[str, str]`** | (HTML table, HTML download link) | download is True  |#### Example:#### Python Code:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; df = input_to_dataframe(input_file)&gt;&gt;&gt; table, download = print_dataframe(df, download = True, download_file_name = &quot;FunkyTable&quot;, download_text = &quot;Download My Funky Table HERE!&quot;, download_file_type = &quot;xlsx&quot;)&gt;&gt;&gt; return {        &quot;table&quot;:table,        &quot;download&quot;:download,    }```#### Output using Jinja2 Template:```python# outputs.table is the HTML tableDisplaying Table{{ outputs.table }}# outputs.download is the download linkDownloading Table{{ outputs.download }}```## Tables&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;table_to_dataframe&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/table_utils.py#L5C1-L44C54&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythontable_to_dataframe(column_headers, rows) -&gt; pd.DataFrame:```#### Description:Create a DataFrame from given rows and column headers#### Arguments:| Argument             | Type                | Description                                                                     || -------------------- | ------------------- | ------------------------------------------------------------------------------- || **`column_headers`** | **List[str]**       | List of column headers                                                          || **`rows`**           | **List[List[str]]** | List of rows to be converted into a DataFrame. Each column is a list of strings |#### Returns:| Return Type        | Description                             || ------------------ | --------------------------------------- || **`pd.DataFrame`** | DataFrame created from headers and rows |#### Example:```python&gt;&gt;&gt; column_headers = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]&gt;&gt;&gt; rows = [[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]]&gt;&gt;&gt; df = table_to_dataframe(column_headers, rows)&gt;&gt;&gt; print(df)   A  B  C0  a  b  c1  d  e  f```&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;print_table&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/table_utils.py#L47C1-L79C58&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonprint_table(column_headers, rows):```#### Description:Creates an HTML table from given rows and column headers#### Arguments:| Argument             | Type                | Description                                                                  || -------------------- | ------------------- | ---------------------------------------------------------------------------- || **`column_headers`** | **List[str]**       | List of column headers                                                       || **`rows`**           | **List[List[str]]** | List of rows to be converted into a table. Each column is a list of strings  || **`index`**          | **bool** (optional) | Whether to use the first column as the DataFrame's index. (Defaults to True) |#### Returns:| Return Type | Description                              || ----------- | ---------------------------------------- || **`str`**   | HTML table created from rows and headers |#### Example:#### Python Code:```python&gt;&gt;&gt; column_headers = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]&gt;&gt;&gt; rows = [[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]]&gt;&gt;&gt; table = print_table(column_headers, rows)&gt;&gt;&gt; return {        &quot;table&quot;:table,    }```#### Output using Jinja2 Template:```python# outputs.table is the HTML tableDisplaying Table{{ outputs.table }}```## Images&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;file_to_PIL&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/image_utils.py#L23C1-L51C88&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonfile_to_PIL(file):```#### Description:Transforms a file into a Pillow Image object#### Arguments:| Argument   | Type    | Description                                     || ---------- | ------- | ----------------------------------------------- || **`file`** | **str** | Decoded file data (returned from input_to_file) |#### Raises:| Exception Type   | Description                             || ---------------- | --------------------------------------- || **`ValueError`** | If the file does not contain image data |#### Returns:| Return Type | Description         || ----------- | ------------------- || **`Image`** | Pillow Image object |#### Example:#### Python Code:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; decoded_file = input_to_file(input_file)&gt;&gt;&gt; image = file_to_PIL(decoded_file)&gt;&gt;&gt; return {        &quot;image&quot;:image,    }```#### Output using Jinja2 Template:```python# outputs.image is the Pillow Image objectDisplaying Image{{ outputs.image }}```&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;input_to_PIL&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/image_utils.py#L54C1-L102C17&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythoninput_to_PIL(input_file, get_file_type=False):```#### Description:Converts a base64 encoded file data into a pillow image#### Arguments:| Argument            | Type     | Description                                                          || ------------------- | -------- | -------------------------------------------------------------------- || **`input_file`**    | **str**  | Base64 encoded file data                                             || **`get_file_type`** | **bool** | If True, the function also returns the file type (Defaults to False) |#### Returns:| Return Type                       | Description              | Condition              || --------------------------------- | ------------------------ | ---------------------- || **`PIL.Image.Image`**             | Pillow Image object      | get_file_type is False || **`Tuple[PIL.Image.Image, str]`** | (pillow image, metadata) | get_file_type is True  |#### Example:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; image, file_type = input_to_PIL(input_file, get_file_type=True)&gt;&gt;&gt; print(file_type)jpeg&gt;&gt;&gt; type(image)&lt;class 'PIL.JpegImagePlugin.JpegImageFile'&gt;```&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;print_image&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/image_utils.py#L105C1-L213C36&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonprint_image(    image,    width = 200,    height = 200,    original_size = False,    download = False,    download_text = &quot;Download Image&quot;,    download_file_name= &quot;myimg&quot;,    download_file_type = &quot;png&quot;,):```#### Description:Transforms a Pillow image into an HTML image, with an optional download link#### Arguments:| Argument                 | Type                | Description                                                                        || ------------------------ | ------------------- | ---------------------------------------------------------------------------------- || **`image`**              | **PIL.Image.Image** | Pillow image                                                                       || **`width`**              | **int** (optional)  | Output width of the image in pixels (Defaults to 200)                              || **`height`**             | **int** (optional)  | Output height of the image in pixels (Defaults to 200)                             || **`original_size`**      | **bool** (optional) | If True, the HTML image will be displayed in its original size (Defaults to False) || **`download`**           | **bool** (optional) | If True, function returns a download link (Defaults to False)                      || **`download_text`**      | **str** (optional)  | The text to be displayed on the download link (Defaults to &quot;Download Image&quot;)       || **`download_file_name`** | **str** (optional)  | The name of the image file when downloaded (Defaults to &quot;myimg&quot;)                   || **`download_file_type`** | **str** (optional)  | The file type of the image when downloaded (Defaults to &quot;png&quot;)                     |#### Returns:| Return Type           | Description                 | Condition         || --------------------- | --------------------------- | ----------------- || **`str`**             | HTML image                  | download is False || **`Tuple[str, str]`** | (HTML image, download link) | download is True  |#### Example:#### Python Code:```python&gt;&gt;&gt; input_file = inputs['file']&gt;&gt;&gt; image, metadata = input_to_PIL(input_file)&gt;&gt;&gt; html_image, download = print_image(image, original_size = True, download = True, download_text = &quot;Download Image Here&quot;, download_file_name = &quot;myimage&quot;, download_file_type = &quot;jpeg&quot;)&gt;&gt;&gt; return {        &quot;image&quot;:html_image,        &quot;download&quot;:download,    }```#### Output using Jinja2 Template:```python# outputs.image is the HTML imageDisplaying Image{{ outputs.image }}# outputs.download is the download linkDownloading Image{{ outputs.download }}```## Plots&lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;  &lt;h3 style={{ margin: 5, padding: 0 }}&gt;print_plot&lt;/h3&gt;  &lt;a href=&quot;https://github.com/MecSimCalc/MecSimCalc-utils/blob/v0.1.5/mecsimcalc/plotting_utils.py#L9C1-L99C35&quot; style={{ fontSize: 'larger', marginBottom: '2em', margin: 5, padding: 0 }}&gt;&lt;strong&gt;[Source]&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;```pythonprint_plot(    plot_obj,    width = 500,    dpi= 100,    download= False,    download_text = &quot;Download Plot&quot;,    download_file_name = &quot;myplot&quot;,)```#### Description:Converts a matplotlib.pyplot.axis or matplotlib.figure into an HTML image tag and optionally provides a download link for the image#### Arguments:| Argument                 | Type                | Description                                                                 || ------------------------ | ------------------- | --------------------------------------------------------------------------- || **`plot_obj`**           | **axes or figure**  | Matplotlib figure                                                           || **`width`**              | **int** (optional)  | Output width of the image in pixels (Defaults to 500)                       || **`dpi`**                | **int** (optional)  | Output dpi of the image in pixels (Defaults to 100)                         || **`download`**           | **bool** (optional) | If True, function returns a download link (Defaults to False)               || **`download_text`**      | **str** (optional)  | The text to be displayed on the download link (Defaults to &quot;Download Plot&quot;) || **`download_file_name`** | **str** (optional)  | The name of the image file when downloaded (Defaults to &quot;myplot&quot;)           |#### Returns:| Return Type           | Description                      | Condition         || --------------------- | -------------------------------- | ----------------- || **`str`**             | HTML image                       | download is False || **`Tuple[str, str]`** | (HTML image, HTML download link) | download is True  |#### Example:#### Python Code:```python&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; x = np.linspace(0, 2 * np.pi, 400)&gt;&gt;&gt; y = np.sin(x)&gt;&gt;&gt; fig, ax = plt.subplots()&gt;&gt;&gt; ax.plot(x, y)&gt;&gt;&gt; ax.set_title('A single plot')&gt;&gt;&gt; image, download = print_plot(fig, width = 500, dpi = 100, download = True, download_text = &quot;Download Sin Function Plot&quot;, download_file_name = &quot;sin(x)&quot;)&gt;&gt;&gt; return {        &quot;image&quot;:image,        &quot;download&quot;:download,    }```#### Output using Jinja2 Template:```python# outputs.image is the HTML imageDisplaying Image{{ outputs.image }}# outputs.download is the download linkDownloading Image{{ outputs.download }}```</longdescription>
</pkgmetadata>