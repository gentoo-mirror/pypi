<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Twitter Tools====================[![Tests](https://github.com/python-twitter-tools/twitter/workflows/Tests/badge.svg)](https://github.com/python-twitter-tools/twitter/actions)[![Coverage Status](https://coveralls.io/repos/github/python-twitter-tools/twitter/badge.svg?branch=master)](https://coveralls.io/github/python-twitter-tools/twitter?branch=master)The Minimalist Twitter API for Python is a Python API for Twitter,everyone's favorite Web 2.0 Facebook-style status updater for peopleon the go.Also included is a Twitter command-line tool for getting your friends'tweets and setting your own tweet from the safety and security of yourfavorite shell and an IRC bot that can announce Twitter updates to anIRC channel.For more information: * install the [package](https://pypi.org/project/twitter/) `pip install twitter` * import the `twitter` package and run `help()` on it * run `twitter -h` for command-line tool helptwitter - The Command-Line Tool-------------------------------The command-line tool lets you do some awesome things: * view your tweets, recent replies, and tweets in lists * view the public timeline * follow and unfollow (leave) friends * various output formats for tweet informationThe bottom line: type `twitter`, receive tweets.twitterbot - The IRC Bot------------------------The IRC bot is associated with a Twitter account (either your own account or anaccount you create for the bot). The bot announces all tweets from friendsit is following. It can be made to follow or leave friends through IRC /msgcommands.`twitter-log`-------------`twitter-log` is a simple command-line tool that dumps all publictweets from a given user in a simple text format. It is useful to geta complete offsite backup of all your tweets. Run `twitter-log` andread the instructions.`twitter-archiver` and `twitter-follow`---------------------------------------twitter-archiver will log all the tweets posted by any user since theystarted posting. twitter-follow will print a list of all of all thefollowers of a user (or all the users that user follows).Programming with the Twitter API classes========================================The `Twitter` and `TwitterStream` classes are the key to building your ownTwitter-enabled applications.The `Twitter` class-------------------The minimalist yet fully featured Twitter API class.Get RESTful data by accessing members of this class. The resultis decoded python objects (lists and dicts).The Twitter API is documented at:**[https://developer.twitter.com/en/docs](https://developer.twitter.com/en/docs)**The list of most accessible functions is listed at:**[https://developer.twitter.com/en/docs/api-reference-index](https://developer.twitter.com/en/docs/api-reference-index)**Examples:```pythonfrom twitter import *t = Twitter(    auth=OAuth(token, token_secret, consumer_key, consumer_secret))# Get your &quot;home&quot; timelinet.statuses.home_timeline()# Get a particular friend's timelinet.statuses.user_timeline(screen_name=&quot;boogheta&quot;)# to pass in GET/POST parameters, such as `count`t.statuses.home_timeline(count=5)# to pass in the GET/POST parameter `id` you need to use `_id`t.statuses.show(_id=1234567890)# Update your statust.statuses.update(    status=&quot;Using @boogheta's sweet Python Twitter Tools.&quot;)# Send a direct messaget.direct_messages.events.new(    _json={        &quot;event&quot;: {            &quot;type&quot;: &quot;message_create&quot;,            &quot;message_create&quot;: {                &quot;target&quot;: {                    &quot;recipient_id&quot;: t.users.show(screen_name=&quot;boogheta&quot;)[&quot;id&quot;]},                &quot;message_data&quot;: {                    &quot;text&quot;: &quot;I think yer swell!&quot;}}}})# Get the members of maxmunnecke's list &quot;network analysis tools&quot; (grab the list_id within the url) https://twitter.com/i/lists/1130857490764091392t.lists.members(owner_screen_name=&quot;maxmunnecke&quot;, list_id=&quot;1130857490764091392&quot;)# Favorite/like a statusstatus = t.statuses.home_timeline()[0]if not status['favorited']:    t.favorites.create(_id=status['id'])# An *optional* `_timeout` parameter can also be used for API# calls which take much more time than normal or twitter stops# responding for some reason:t.users.lookup(    screen_name=','.join(A_LIST_OF_100_SCREEN_NAMES), _timeout=1)# Overriding Method: GET/POST# you should not need to use this method as this library properly# detects whether GET or POST should be used, Nevertheless# to force a particular method, use `_method`t.statuses.oembed(_id=1234567890, _method='GET')# Send images along with your tweets:# - first just read images from the web or from files the regular way:with open(&quot;example.png&quot;, &quot;rb&quot;) as imagefile:    imagedata = imagefile.read()# - then upload medias one by one on Twitter's dedicated server#   and collect each one's id:t_upload = Twitter(domain='upload.twitter.com',    auth=OAuth(token, token_secret, consumer_key, consumer_secret))id_img1 = t_upload.media.upload(media=imagedata)[&quot;media_id_string&quot;]id_img2 = t_upload.media.upload(media=imagedata)[&quot;media_id_string&quot;]# - finally send your tweet with the list of media ids:t.statuses.update(status=&quot;PTT ★&quot;, media_ids=&quot;,&quot;.join([id_img1, id_img2]))# Or send a tweet with an image (or set a logo/banner similarly)# using the old deprecated method that will probably disappear some dayparams = {&quot;media[]&quot;: imagedata, &quot;status&quot;: &quot;PTT ★&quot;}# Or for an image encoded as base64:params = {&quot;media[]&quot;: base64_image, &quot;status&quot;: &quot;PTT ★&quot;, &quot;_base64&quot;: True}t.statuses.update_with_media(**params)# Attach text metadata to medias sent, using the upload.twitter.com route# using the _json workaround to send json arguments as POST body# (warning: to be done before attaching the media to a tweet)t_upload.media.metadata.create(_json={  &quot;media_id&quot;: id_img1,  &quot;alt_text&quot;: { &quot;text&quot;: &quot;metadata generated via PTT!&quot; }})# or with the shortcut arguments (&quot;alt_text&quot; and &quot;text&quot; work):t_upload.media.metadata.create(media_id=id_img1, text=&quot;metadata generated via PTT!&quot;)```Searching Twitter:```python# Search for the latest tweets about #pycont.search.tweets(q=&quot;#pycon&quot;)# Search for the latest tweets about #pycon, using [extended mode](https://developer.twitter.com/en/docs/tweets/tweet-updates)t.search.tweets(q=&quot;#pycon&quot;, tweet_mode='extended')```Retrying after reaching the API rate limit------------------------------------------Simply create the `Twitter` instance with the argument `retry=True`, then theHTTP error codes `429`, `502`, `503`, and `504` will cause a retry of the lastrequest.If `retry` is an integer, it defines the maximum number of retry attempts.Using the data returned-----------------------Twitter API calls return decoded JSON. This is converted intoa bunch of Python lists, dicts, ints, and strings. For example:```pythonx = twitter.statuses.home_timeline()# The first 'tweet' in the timelinex[0]# The screen name of the user who wrote the first 'tweet'x[0]['user']['screen_name']```Getting raw XML data--------------------If you prefer to get your Twitter data in XML format, pass`format=&quot;xml&quot;` to the `Twitter` object when you instantiate it:```pythontwitter = Twitter(format=&quot;xml&quot;)```The output will not be parsed in any way. It will be a raw stringof XML.The `TwitterStream` class-------------------------The `TwitterStream` object is an interface to the Twitter StreamAPI. This can be used pretty much the same as the `Twitter` class,except the result of calling a method will be an iterator thatyields objects decoded from the stream. For example::```pythontwitter_stream = TwitterStream(auth=OAuth(...))iterator = twitter_stream.statuses.sample()for tweet in iterator:    ...do something with this tweet...```Per default the `TwitterStream` object uses[public streams](https://dev.twitter.com/docs/streaming-apis/streams/public).If you want to use one of the other[streaming APIs](https://dev.twitter.com/docs/streaming-apis), specify the URLmanually.The iterator will `yield` until the TCP connection breaks. When theconnection breaks, the iterator yields `{'hangup': True}` (andraises `StopIteration` if iterated again).Similarly, if the stream does not produce heartbeats for more than90 seconds, the iterator yields `{'hangup': True,'heartbeat_timeout': True}` (and raises `StopIteration` ifiterated again).The `timeout` parameter controls the maximum time betweenyields. If it is nonzero, then the iterator will yield eitherstream data or `{'timeout': True}` within the timeout period. Thisis useful if you want your program to do other stuff in betweenwaiting for tweets.The `block` parameter sets the stream to be fully non-blocking.In this mode, the iterator always yields immediately. It returnsstream data, or `None`.Note that `timeout` supercedes this argument, so it should also beset `None` to use this mode, and non-blocking can potentially leadto 100% CPU usage.Twitter `Response` Objects--------------------------Response from a Twitter request. Behaves like a list or a string(depending on requested format), but it has a few other interestingattributes.`headers` gives you access to the response headers as an`httplib.HTTPHeaders` instance. Use `response.headers.get('h')`to retrieve a header.Authentication--------------You can authenticate with Twitter in three ways: NoAuth, OAuth, orOAuth2 (app-only). Get `help()` on these classes to learn how to use them.OAuth and OAuth2 are probably the most useful.Working with OAuth------------------Visit the Twitter developer page and create a new application:**[https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)**This will get you a `CONSUMER_KEY` and `CONSUMER_SECRET`.When users run your application they have to authenticate your appwith their Twitter account. A few HTTP calls to Twitter are requiredto do this. Please see the `twitter.oauth_dance` module to see how thisis done. If you are making a command-line app, you can use the`oauth_dance()` function directly.Performing the &quot;oauth dance&quot; gets you an oauth token and oauth secretthat authenticate the user with Twitter. You should save these forlater, so that the user doesn't have to do the oauth dance again.`read_token_file` and `write_token_file` are utility methods to read andwrite OAuth `token` and `secret` key values. The values are stored asstrings in the file. Not terribly exciting.Finally, you can use the `OAuth` authenticator to connect to Twitter. Incode it all goes like this:```pythonfrom twitter import *MY_TWITTER_CREDS = os.path.expanduser('~/.my_app_credentials')if not os.path.exists(MY_TWITTER_CREDS):    oauth_dance(&quot;My App Name&quot;, CONSUMER_KEY, CONSUMER_SECRET,                MY_TWITTER_CREDS)oauth_token, oauth_secret = read_token_file(MY_TWITTER_CREDS)twitter = Twitter(auth=OAuth(    oauth_token, oauth_secret, CONSUMER_KEY, CONSUMER_SECRET))# Now work with Twittertwitter.statuses.update(status='Hello, world!')```Working with `OAuth2`---------------------Twitter only supports the application-only flow of OAuth2 for certainAPI endpoints. This OAuth2 authenticator only supports the application-onlyflow right now.To authenticate with OAuth2, visit the Twitter developer page and create a newapplication:**[https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)**This will get you a `CONSUMER_KEY` and `CONSUMER_SECRET`.Exchange your `CONSUMER_KEY` and `CONSUMER_SECRET` for a bearer token using the`oauth2_dance` function.Finally, you can use the `OAuth2` authenticator and your bearer token to connectto Twitter. In code it goes like this::```pythontwitter = Twitter(auth=OAuth2(bearer_token=BEARER_TOKEN))# Now work with Twittertwitter.search.tweets(q='keyword')```License=======Python Twitter Tools are released under an MIT License.</longdescription>
</pkgmetadata>