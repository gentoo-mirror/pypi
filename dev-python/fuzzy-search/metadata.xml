<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fuzzy-searchFuzzy search module for searching lists of words in low quality OCR and HTR text.Project page on PyPI: [https://pypi.org/project/fuzzy-search/](https://pypi.org/project/fuzzy-search/)## Installing```commandlinepip install -u fuzzy-search```## Usage```pythonfrom fuzzy_search.fuzzy_phrase_searcher import FuzzyPhraseSearcherfrom fuzzy_search.fuzzy_phrase_model import PhraseModel# highger matching thresholds for higher quality OCR/HTR (higher precision, recall should be good anyway)# lower matching thresholds for lower quality OCR/HTR (higher recall, as that's the main problem)config = {    &quot;char_match_threshold&quot;: 0.8,    &quot;ngram_threshold&quot;: 0.6,    &quot;levenshtein_threshold&quot;: 0.8,    &quot;ignorecase&quot;: False,    &quot;ngram_size&quot;: 3,    &quot;skip_size&quot;: 0,}# initialize a new searcher instance with the configfuzzy_searcher = FuzzyPhraseSearcher(config)# create a list of domain keywords and phrasesdomain_phrases = [    # terms for the chair and attendants of a meeting    &quot;PRAESIDE&quot;,    &quot;PRAESENTIBUS&quot;,    # some weekdays in Latin    &quot;Veneris&quot;,     &quot;Mercuri&quot;,    # some date phrase where any date in January 1725 should match    &quot;den .. Januarii 1725&quot;]# create a PhraseModel object from the domain phrasesphrase_model = PhraseModel(phrases=domain_phrases)# register the phrase model with the searcherfuzzy_searcher.index_phrase_model(phrase_model)# take some example texts: meetings of the Dutch States General in January 1725text1 = &quot;ie Veucris den 5. Januaris 1725. PR&amp;ASIDE, Den Heere Bentinck. PRASENTIEBUS, De Heeren Jan Welderen , van Dam, Torck , met een extraordinaris Gedeputeerde uyt de Provincie van Gelderlandt. Van Maasdam , vanden Boeizelaar , Raadtpenfionaris van Hoornbeeck , met een extraordinaris Gedeputeerde uyt de Provincie van Hollandt ende Welt-Vrieslandt. Velters, Ockere , Noey; van Hoorn , met een extraordinaris Gedeputeerde uyt de Provincie van Zeelandt. Van Renswoude , van Voor{t. Van Schwartzenbergh, vander Waayen, Vegilin Van I{elmuden. Van Iddekinge ‚ van Tamminga.&quot;text2 = &quot;Mercuri: den 10. Jangarii , | 1725. ia PRESIDE, Den Heere an Iddekinge. PRA&amp;SENTIBUS, De Heeren /an Welderen , van Dam, van Wynbergen, Torck, met een extraordinaris Gedeputeerde uyt de Provincie van Gelderland. Van Maasdam , Raadtpenfionaris van Hoorn=beeck. Velters, Ockerfe, Noey. Taats van Amerongen, van Renswoude. Vander Waasen , Vegilin, ’ Bentinck, van I(elmaden. Van Tamminga.&quot;```The `find_matches` method returns match objects:```python# look for matches in the first example textfor match in fuzzy_searcher.find_matches(text1):    print(match)```Printing the matches directly yields the following output:```pythonMatch(phrase: &quot;Veneris&quot;, variant: &quot;Veneris&quot;,string: &quot;Veucris&quot;, offset: 3)Match(phrase: &quot;den .. Januarii 1725&quot;, variant: &quot;den .. Januarii 1725&quot;,string: &quot;den 5. Januaris 1725.&quot;, offset: 11)Match(phrase: &quot;PRAESIDE&quot;, variant: &quot;PRAESIDE&quot;,string: &quot;PR&amp;ASIDE,&quot;, offset: 33)Match(phrase: &quot;PRAESENTIBUS&quot;, variant: &quot;PRAESENTIBUS&quot;,string: &quot;PRASENTIEBUS,&quot;, offset: 63)```Alternatively, each match object can generate a JSON representation of the match containing all information:```python# look for matches in the first example textfor match in fuzzy_searcher.find_matches(text1):    print(match.json())```This yields more detailed output:```js{'match_keyword': 'Veneris', 'match_term': 'Veneris', 'match_string': 'Veucris', 'match_offset': 3, 'char_match': 0.7142857142857143, 'ngram_match': 0.625, 'levenshtein_distance': 0.7142857142857143}{'match_keyword': 'den .. Januarii 1725', 'match_term': 'den .. Januarii 1725', 'match_string': 'den 5. Januaris 1725', 'match_offset': 11, 'char_match': 0.9, 'ngram_match': 0.8095238095238095, 'levenshtein_distance': 0.9}{'match_keyword': 'PRAESIDE', 'match_term': 'PRAESIDE', 'match_string': 'PR&amp;ASIDE', 'match_offset': 33, 'char_match': 0.875, 'ngram_match': 0.6666666666666666, 'levenshtein_distance': 0.75}{'match_keyword': 'PRAESENTIBUS', 'match_term': 'PRAESENTIBUS', 'match_string': 'PRASENTIEBUS', 'match_offset': 63, 'char_match': 1.0, 'ngram_match': 0.7692307692307693, 'levenshtein_distance': 0.8333333333333334}```Running the searcher on the second text:```python# look for matches in the second example textfor match in fuzzy_searcher.find_candidates(text2):    print(match.json())```This yields the following output:```js{'phrase': 'Veneris', 'variant': 'Veneris', 'string': 'Veucris', 'offset': 3, 'match_scores': {'char_match': 0.7142857142857143, 'ngram_match': 0.625, 'levenshtein_similarity': 0.7142857142857143}}{'phrase': 'den .. Januarii 1725', 'variant': 'den .. Januarii 1725', 'string': 'den 5. Januaris 1725.', 'offset': 11, 'match_scores': {'char_match': 0.95, 'ngram_match': 0.7619047619047619, 'levenshtein_similarity': 0.8571428571428572}}{'phrase': 'PRAESIDE', 'variant': 'PRAESIDE', 'string': 'PR&amp;ASIDE,', 'offset': 33, 'match_scores': {'char_match': 0.875, 'ngram_match': 0.5555555555555556, 'levenshtein_similarity': 0.6666666666666667}}{'phrase': 'PRAESENTIBUS', 'variant': 'PRAESENTIBUS', 'string': 'PRASENTIEBUS,', 'offset': 63, 'match_scores': {'char_match': 1.0, 'ngram_match': 0.6923076923076923, 'levenshtein_similarity': 0.7692307692307692}}```## Matches as Web AnnotationsIf texts are passed to `find_matches` as dictionaries with an identifier, the resulting matchesinclude the text identifier and can generate Web Annotation representations:```python# create a dictionary for the second text and add an identifiertext2_with_id = {    &quot;text&quot;: text2,    &quot;id&quot;: &quot;urn:republic:3783_0076:page=151:para=4&quot;}matches = fuzzy_searcher.find_matches(text2_with_id)import json# use json.dumps to pretty print the first match as Web Annotationprint(json.dumps(matches[0].as_web_anno(), indent=2))```Output:```json{  &quot;@context&quot;: &quot;http://www.w3.org/ns/anno.jsonld&quot;,  &quot;id&quot;: &quot;cca6740d-e584-4322-b517-67d92e0e508a&quot;,  &quot;type&quot;: &quot;Annotation&quot;,  &quot;motivation&quot;: &quot;classifying&quot;,  &quot;created&quot;: &quot;2020-12-08T10:22:26.838154&quot;,  &quot;generator&quot;: {    &quot;id&quot;: &quot;https://github.com/marijnkoolen/fuzzy-search&quot;,    &quot;type&quot;: &quot;Software&quot;,    &quot;name&quot;: &quot;FuzzySearcher&quot;  },  &quot;target&quot;: {    &quot;source&quot;: &quot;urn:republic:3783_0076:page=151:para=4&quot;,    &quot;selector&quot;: {      &quot;type&quot;: &quot;TextPositionSelector&quot;,      &quot;start&quot;: 0,      &quot;end&quot;: 8    }  },  &quot;body&quot;: {    &quot;type&quot;: &quot;Dataset&quot;,    &quot;value&quot;: {      &quot;match_phrase&quot;: &quot;Mercurii&quot;,      &quot;match_variant&quot;: &quot;Mercurii&quot;,      &quot;match_string&quot;: &quot;Mercuri:&quot;,      &quot;phrase_metadata&quot;: {        &quot;phrase&quot;: &quot;Mercurii&quot;      }    }  }}```[HTML docs](html_docs/index.html)## Documentation To Do- adding variant phrases and distractors- multiple searchers and searching in the context of other matches</longdescription>
</pkgmetadata>