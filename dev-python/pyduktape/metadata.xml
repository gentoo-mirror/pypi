<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction############Pyduktape is a python wrapper around `Duktape &lt;http://duktape.org/&gt;`_,an embeddable Javascript interpreter.On top of the interpreter wrapper, pyduktape offers easy integrationbetween the Python and the Javascript environments. You can passPython objects to Javascript, call methods on them and access theirattributes.  Similarly, you can pass Javascript objects to Python.Objects are never copied or serialized. Instead, they are passedbetween the two environments using proxy objects. Proxy objectsdelegate the execution to the original object environment.Threading#########It is possible to invoke Javascript code from multiple threads. Eachthread will need to use its own embedded interpreter. Javascriptobjects returned to the Python environment will only be usable on thesame thread that created them. The runtime always checks thiscondition automatically, and raises a ``DuktapeThreadError`` if it'sviolated.Getting Started###############Installation------------To install from pypi::    $ pip install -U setuptools    $ pip install pyduktapeTo install the latest version from github::    $ git clone https://github.com/stefano/pyduktape.git    $ cd pyduktape    $ pip install -U setuptools    $ python setup.py installRunning Javascript code-----------------------To run Javascript code, you need to create an execution context anduse the method ``eval_js``::    import pyduktape    context = pyduktape.DuktapeContext()    context.eval_js(&quot;print('Hello, world!');&quot;)Each execution context starts its own interpreter. Each context isindependent, and tied to the Python thread that created it. Memory isautomatically managed.To evaluate external Javascript files, use ``eval_js_file``::    // helloWorld.js    print('Hello, World!');    # in the Python interpreter    import pyduktape    context = pyduktape.DuktapeContext()    context.eval_js_file('helloWorld.js')Pyduktape supports Javascript modules::    // js/helloWorld.js    exports.sayHello = function () {        print('Hello, World!');    };    // js/main.js    var helloWorld = require('js/helloWorld');    helloWorld.sayHello();    # in the Python interpreter    import pyduktape    context = pyduktape.DuktapeContext()    context.eval_js_file('js/main')The ``.js`` extension is automatically added if missing.  Relativepaths are relative to the current working directory, but you canchange the base path using ``set_base_path``::    # js/helloWorld.js    print('Hello, World!');    # in the Python interpreter    import pyduktape    context = pyduktape.DuktapeContext()    context.set_base_path('js')    context.eval_js_file('helloWorld')Python and Javascript integration---------------------------------You can use ``set_globals`` to set Javascript global variables::    import pyduktape    def say_hello(to):        print 'Hello, {}!'.format(to)    context = pyduktape.DuktapeContext()    context.set_globals(sayHello=say_hello, world='World')    context.eval_js(&quot;sayHello(world);&quot;)You can use ``get_global`` to access Javascript global variables::    import pyduktape    context = pyduktape.DuktapeContext()    context.eval_js(&quot;var helloWorld = 'Hello, World!';&quot;)    print context.get_global('helloWorld')``eval_js`` returns the value of the last expression::    import pyduktape    context = pyduktape.DuktapeContext()    hello_world = context.eval_js(&quot;var helloWorld = 'Hello, World!'; helloWorld&quot;)    print hello_worldYou can seamlessly use Python objects and functions within Javascriptcode.  There are some limitations, though: any Python callable canonly be used as a function, and other attributes cannot beaccessed. Primitive types (int, float, string, None) are converted toequivalent Javascript primitives.  The following code shows how tointeract with a Python object from Javascript::    import pyduktape    class Hello(object):        def __init__(self, what):            self.what = what        def say(self):            print 'Hello, {}!'.format(self.what)    context = pyduktape.DuktapeContext()    context.set_globals(Hello=Hello)    context.eval_js(&quot;var helloWorld = Hello('World'); helloWorld.say();&quot;)In the same way, you can use Javascript objects in Python.  You canuse the special method `new` to instantiate an object::    import pyduktape    context = pyduktape.DuktapeContext()    Hello = context.eval_js(&quot;&quot;&quot;    function Hello(what) {        this.what = what;    }    Hello.prototype.say = function () {        print('Hello, ' + this.what + '!');    };    Hello    &quot;&quot;&quot;)    hello_world = Hello.new('World')    hello_world.say()You can use Python lists and dicts from Javascript, and viceversa::    import pyduktape    context = pyduktape.DuktapeContext()    res = context.eval_js('[1, 2, 3]')    for item in res:        print item    context.set_globals(lst=[4, 5, 6])    context.eval_js('for (var i = 0; i &lt; lst.length; i++) { print(lst[i]); }')    res = context.eval_js('var x = {a: 1, b: 2}; x')    for key, val in res.items():        print key, '=', val    res.c = 3    context.eval_js('print(x.c);')    context.set_globals(x=dict(a=1, b=2))    context.eval_js(&quot;&quot;&quot;    var items = x.items();    for (var i = 0; i &lt; items.length; i++) {        print(items[i][0] + ' = ' + items[i][1]);    }    &quot;&quot;&quot;)    context.set_globals(x=dict(a=1, b=2))    context.eval_js('for (var k in x) { print(k + ' = ' + x[k]); }')</longdescription>
</pkgmetadata>