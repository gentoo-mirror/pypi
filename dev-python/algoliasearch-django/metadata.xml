<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.algolia.com&quot;&gt;    &lt;img alt=&quot;Algolia for Django&quot; src=&quot;https://raw.githubusercontent.com/algolia/algoliasearch-client-common/master/banners/django.png&quot; &gt;  &lt;/a&gt;  &lt;h4 align=&quot;center&quot;&gt;The perfect starting point to integrate &lt;a href=&quot;https://algolia.com&quot; target=&quot;_blank&quot;&gt;Algolia&lt;/a&gt; within your Django project&lt;/h4&gt;  &lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://travis-ci.org/algolia/algoliasearch-django&quot;&gt;&lt;img src=&quot;https://travis-ci.org/algolia/algoliasearch-django.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/img&gt;&lt;/a&gt;    &lt;a href=&quot;https://coveralls.io/r/algolia/algoliasearch-django&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/algolia/algoliasearch-django/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/img&gt;&lt;/a&gt;    &lt;a href=&quot;http://badge.fury.io/py/algoliasearch-django&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/algoliasearch-django.svg?branch=master&quot; alt=&quot;PyPi Version&quot;&gt;&lt;/img&gt;&lt;/a&gt;  &lt;/p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.algolia.com/doc/framework-integration/django/options/?language=python&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt;  •  &lt;a href=&quot;https://discourse.algolia.com&quot; target=&quot;_blank&quot;&gt;Community Forum&lt;/a&gt;  •  &lt;a href=&quot;http://stackoverflow.com/questions/tagged/algolia&quot; target=&quot;_blank&quot;&gt;Stack Overflow&lt;/a&gt;  •  &lt;a href=&quot;https://github.com/algolia/algoliasearch-django/issues&quot; target=&quot;_blank&quot;&gt;Report a bug&lt;/a&gt;  •  &lt;a href=&quot;https://www.algolia.com/doc/framework-integration/django/faq/&quot; target=&quot;_blank&quot;&gt;FAQ&lt;/a&gt;  •  &lt;a href=&quot;https://www.algolia.com/support&quot; target=&quot;_blank&quot;&gt;Support&lt;/a&gt;&lt;/p&gt;## API DocumentationYou can find the full reference on [Algolia's website](https://www.algolia.com/doc/framework-integration/django/).1. **[Setup](#setup)**    * [Introduction](#introduction)    * [Install](#install)    * [Setup](#setup)    * [Quick Start](#quick-start)1. **[Commands](#commands)**    * [Commands](#commands)1. **[Search](#search)**    * [Search](#search)1. **[Geo-Search](#geo-search)**    * [Geo-Search](#geo-search)1. **[Tags](#tags)**    * [Tags](#tags)1. **[Options](#options)**    * [Custom &lt;code&gt;objectID&lt;/code&gt;](#custom-codeobjectidcode)    * [Custom index name](#custom-index-name)    * [Field Preprocessing and Related objects](#field-preprocessing-and-related-objects)    * [Index settings](#index-settings)    * [Restrict indexing to a subset of your data](#restrict-indexing-to-a-subset-of-your-data)    * [Multiple indices per model](#multiple-indices-per-model)    * [Temporarily disable the auto-indexing](#temporarily-disable-the-auto-indexing)1. **[Tests](#tests)**    * [Run Tests](#run-tests)1. **[Troubleshooting](#troubleshooting)**    * [Frequently asked questions](#frequently-asked-questions)# Setup## IntroductionThis package lets you easily integrate the Algolia Search API to your [Django](https://www.djangoproject.com/) project. It's based on the [algoliasearch-client-python](https://github.com/algolia/algoliasearch-client-python) package.You might be interested in this sample Django application providing a typeahead.js based auto-completion and Google-like instant search: [algoliasearch-django-example](https://github.com/algolia/algoliasearch-django-example).- Compatible with **Python 2.7** and **Python 3.4+**.- Supports **Django 1.7+**, **2.x** and **3.x**.## Install```shpip install algoliasearch-django```## SetupIn your Django settings, add `algoliasearch_django` to `INSTALLED_APPS` and add these two settings:```pythonALGOLIA = {    'APPLICATION_ID': 'MyAppID',    'API_KEY': 'MyApiKey'}```There are several optional settings:* `INDEX_PREFIX`: prefix all indices. Use it to separate different applications, like `site1_Products` and `site2_Products`.* `INDEX_SUFFIX`: suffix all indices. Use it to differentiate development and production environments, like `Location_dev` and `Location_prod`.* `AUTO_INDEXING`: automatically synchronize the models with Algolia (default to **True**).* `RAISE_EXCEPTIONS`: raise exceptions on network errors instead of logging them (default to **settings.DEBUG**).## Quick StartCreate an `index.py` inside each application that contains the models you want to index.Inside this file, call `algoliasearch.register()` for each of the models you want to index:```python# index.pyimport algoliasearch_django as algoliasearchfrom .models import YourModelalgoliasearch.register(YourModel)```By default, all the fields of your model will be used. You can configure the index by creating a subclass of `AlgoliaIndex` and using the `register` decorator:```python# index.pyfrom algoliasearch_django import AlgoliaIndexfrom algoliasearch_django.decorators import registerfrom .models import YourModel@register(YourModel)class YourModelIndex(AlgoliaIndex):    fields = ('name', 'date')    geo_field = 'location'    settings = {'searchableAttributes': ['name']}    index_name = 'my_index'```# Commands## Commands* `python manage.py algolia_reindex`: reindex all the registered models. This command will first send all the record to a temporary index and then moves it.    * you can pass ``--model`` parameter to reindex a given model* `python manage.py algolia_applysettings`: (re)apply the index settings.* `python manage.py algolia_clearindex`: clear the index# Search## SearchWe recommend using our [InstantSearch.js library](https://www.algolia.com/doc/guides/building-search-ui/what-is-instantsearch/js/) to build your searchinterface and perform search queries directly from the end-user browser without going through your server.However, if you want to search from your backend you can use the `raw_search(YourModel, 'yourQuery', params)` method.It retrieves the raw JSON answer from the API, and accepts in `param` any[search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/).```pythonfrom algoliasearch_django import raw_searchparams = { &quot;hitsPerPage&quot;: 5 }response = raw_search(Contact, &quot;jim&quot;, params)```# Geo-Search## Geo-SearchUse the `geo_field` attribute to localize your record. `geo_field` should be a callable that returns a tuple (latitude, longitude).```pythonclass Contact(models.model):    name = models.CharField(max_length=20)    lat = models.FloatField()    lng = models.FloatField()    def location(self):        return (self.lat, self.lng)class ContactIndex(AlgoliaIndex):    fields = 'name'    geo_field = 'location'algoliasearch.register(Contact, ContactIndex)```# Tags## TagsUse the `tags` attributes to add tags to your record. It can be a field or a callable.```pythonclass ArticleIndex(AlgoliaIndex):    tags = 'category'```At query time, specify `{ tagFilters: 'tagvalue' }` or `{ tagFilters: ['tagvalue1', 'tagvalue2'] }` as search parameters to restrict the result set to specific tags.# Options## Custom `objectID`You can choose which field will be used as the `objectID `. The field should be unique and can    be a string or integer. By default, we use the `pk` field of the model.```pythonclass ArticleIndex(AlgoliaIndex):    custom_objectID = 'post_id'```## Custom index nameYou can customize the index name. By default, the index name will be the name of the model class.```pythonclass ContactIndex(algoliaindex):    index_name = 'Enterprise'```## Field Preprocessing and Related objectsIf you want to process a field before indexing it (e.g. capitalizing a `Contact`'s `name`),or if you want to index a [related object](https://docs.djangoproject.com/en/1.11/ref/models/relations/)'sattribute, you need to define **proxy methods** for these fields.### Models```pythonclass Account(models.Model):    username = models.CharField(max_length=40)    service = models.CharField(max_length=40)class Contact(models.Model):    name = models.CharField(max_length=40)    email = models.EmailField(max_length=60)    //...    accounts = models.ManyToManyField(Account)    def account_names(self):        return [str(account) for account in self.accounts.all()]    def account_ids(self):        return [account.id for account in self.accounts.all()]```### Index```pythonfrom algoliasearch_django import AlgoliaIndexclass ContactIndex(AlgoliaIndex):    fields = ('name', 'email', 'company', 'address', 'city', 'county',              'state', 'zip_code', 'phone', 'fax', 'web', 'followers', 'account_names', 'account_ids')    settings = {        'searchableAttributes': ['name', 'email', 'company', 'city', 'county', 'account_names',        }```- With this configuration, you can search for a `Contact` using its `Account` names- You can use the associated `account_ids` at search-time to fetch more data from yourmodel (you should **only proxy the fields relevant for search** to keep your records' sizeas small as possible)## Index settingsWe provide many ways to configure your index allowing you to tune your overall index relevancy.All the configuration is explained on [our doc](https://www.algolia.com/doc/api-reference/api-parameters/).```pythonclass ArticleIndex(AlgoliaIndex):    settings = {        'searchableAttributes': ['name', 'description', 'url'],        'customRanking': ['desc(vote_count)', 'asc(name)']    }```## Restrict indexing to a subset of your dataYou can add constraints controlling if a record must be indexed or not. `should_index` should be acallable that returns a boolean.```pythonclass Contact(models.model):    name = models.CharField(max_length=20)    age = models.IntegerField()    def is_adult(self):        return (self.age &gt;= 18)class ContactIndex(AlgoliaIndex):    should_index = 'is_adult'```## Multiple indices per modelIt is possible to have several indices for a single model.- First, define all your indices that you want for a model:```pythonfrom algoliasearch_django import AlgoliaIndexclass MyModelIndex1(AlgoliaIndex):    name = 'MyModelIndex1'    ...class MyModelIndex2(AlgoliaIndex):    name = 'MyModelIndex2'    ...```- Then, define a meta model which will aggregate those indices:```pythonclass MyModelMetaIndex(AlgoliaIndex):    def __init__(self, model, client, settings):        self.indices = [            MyModelIndex1(model, client, settings),            MyModelIndex2(model, client, settings),        ]    def raw_search(self, query='', params=None):        res = {}        for index in self.indices:            res[index.name] = index.raw_search(query, params)        return res    def update_records(self, qs, batch_size=1000, **kwargs):        for index in self.indices:            index.update_records(qs, batch_size, **kwargs)    def reindex_all(self, batch_size=1000):        for index in self.indices:            index.reindex_all(batch_size)    def set_settings(self):        for index in self.indices:            index.set_settings()    def clear_index(self):        for index in self.indices:            index.clear_index()    def save_record(self, instance, update_fields=None, **kwargs):        for index in self.indices:            index.save_record(instance, update_fields, **kwargs)    def delete_record(self, instance):        for index in self.indices:            index.delete_record(instance)```- Finally, register this `AlgoliaIndex` with your `Model`:```pythonimport algoliasearch_django as algoliasearchalgoliasearch.register(MyModel, MyModelMetaIndex)```## Temporarily disable the auto-indexingIt is possible to temporarily disable the auto-indexing feature using the `disable_auto_indexing` context decorator:```pythonfrom algoliasearch_django.decorators import disable_auto_indexing# Used as a context managerwith disable_auto_indexing():    MyModel.save()# Used as a decorator@disable_auto_indexing():my_method()# You can also specifiy for which model you want to disable the auto-indexingwith disable_auto_indexing(MyModel):    MyModel.save()    MyOtherModel.save()```# Tests## Run TestsTo run the tests, first find your Algolia application id and Admin API key (found on the Credentials page).```shellALGOLIA_APPLICATION_ID={APPLICATION_ID} ALGOLIA_API_KEY={ADMIN_API_KEY} tox```To override settings for some tests, use the [settings method](https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.SimpleTestCase.settings):```pythonclass OverrideSettingsTestCase(TestCase):    def setUp(self):        with self.settings(ALGOLIA={            'APPLICATION_ID': 'foo',            'API_KEY': 'bar',            'AUTO_INDEXING': False        }):            algolia_engine.reset(settings.ALGOLIA)    def tearDown(self):        algolia_engine.reset(settings.ALGOLIA)    def test_foo():        # ...```# Troubleshooting# Use the DockerfileIf you want to contribute to this project without installing all its dependencies, you can use our Docker image. Please check our [dedicated guide](DOCKER_README.md) to learn more.## Frequently asked questionsEncountering an issue? Before reaching out to support, we recommend heading to our [FAQ](https://www.algolia.com/doc/framework-integration/django/faq/) where you will find answers for the most common issues and gotchas with the package.</longdescription>
</pkgmetadata>