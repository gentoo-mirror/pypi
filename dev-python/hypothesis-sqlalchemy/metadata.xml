<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>hypothesis_sqlalchemy=====================[![](https://github.com/lycantropos/hypothesis_sqlalchemy/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/lycantropos/hypothesis_sqlalchemy/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://codecov.io/gh/lycantropos/hypothesis_sqlalchemy/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/hypothesis_sqlalchemy &quot;Codecov&quot;)[![](https://img.shields.io/github/license/lycantropos/hypothesis_sqlalchemy.svg)](https://github.com/lycantropos/hypothesis_sqlalchemy/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/hypothesis-sqlalchemy.svg)](https://badge.fury.io/py/hypothesis-sqlalchemy &quot;PyPI&quot;)In what follows `python` is an alias for `python3.7` or `pypy3.7`or any later version (`python3.8`, `pypy3.8` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade hypothesis_sqlalchemy```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/hypothesis_sqlalchemy.gitcd hypothesis_sqlalchemy```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage-----With setup```python&gt;&gt;&gt; import warnings&gt;&gt;&gt; from hypothesis.errors import NonInteractiveExampleWarning&gt;&gt;&gt; # ignore hypothesis warnings caused by `example` method call... warnings.filterwarnings('ignore', category=NonInteractiveExampleWarning)```let's take a look at what can be generated and how.### TablesWe can write a strategy that produces tables```python&gt;&gt;&gt; from hypothesis_sqlalchemy import scheme&gt;&gt;&gt; from sqlalchemy.engine.default import DefaultDialect&gt;&gt;&gt; dialect = DefaultDialect()&gt;&gt;&gt; tables = scheme.tables(dialect,...                        min_size=3,...                        max_size=10)&gt;&gt;&gt; table = tables.example()&gt;&gt;&gt; from sqlalchemy.schema import Table&gt;&gt;&gt; isinstance(table, Table)True&gt;&gt;&gt; from sqlalchemy.schema import Column&gt;&gt;&gt; all(isinstance(column, Column) for column in table.columns)True&gt;&gt;&gt; 3 &lt;= len(table.columns) &lt;= 10True```### RecordsSuppose we have a table```python&gt;&gt;&gt; from sqlalchemy.schema import (Column,...                                MetaData,...                                Table)&gt;&gt;&gt; from sqlalchemy.sql.sqltypes import (Integer,...                                      String)&gt;&gt;&gt; metadata = MetaData()&gt;&gt;&gt; user_table = Table('user', metadata,...                    Column('user_id', Integer,...                           primary_key=True),...                    Column('user_name', String(16),...                           nullable=False),...                    Column('email_address', String(60)),...                    Column('password', String(20),...                           nullable=False))```and we can write strategy that* produces single records (as `tuple`s)    ```python    &gt;&gt;&gt; from hypothesis import strategies    &gt;&gt;&gt; from hypothesis_sqlalchemy.sample import table_records    &gt;&gt;&gt; records = table_records(user_table,     ...                         email_address=strategies.emails())    &gt;&gt;&gt; record = records.example()    &gt;&gt;&gt; isinstance(record, tuple)    True    &gt;&gt;&gt; len(record) == len(user_table.columns)    True    &gt;&gt;&gt; all(column.nullable and value is None    ...     or isinstance(value, column.type.python_type)     ...     for value, column in zip(record, user_table.columns))    True      ```* produces records `list`s (with configurable `list` size bounds)    ```python    &gt;&gt;&gt; from hypothesis_sqlalchemy.sample import table_records_lists    &gt;&gt;&gt; records_lists = table_records_lists(user_table,    ...                                     min_size=2,    ...                                     max_size=5,     ...                                     email_address=strategies.emails())    &gt;&gt;&gt; records_list = records_lists.example()    &gt;&gt;&gt; isinstance(records_list, list)    True    &gt;&gt;&gt; 2 &lt;= len(records_list) &lt;= 5    True    &gt;&gt;&gt; all(isinstance(record, tuple) for record in records_list)    True    &gt;&gt;&gt; all(len(record) == len(user_table.columns) for record in records_list)    True    ```Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script:- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script:- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>