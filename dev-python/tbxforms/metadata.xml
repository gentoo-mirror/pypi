<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/tbxforms.svg)](https://pypi.org/project/tbxforms/)[![npm](https://img.shields.io/npm/v/tbxforms.svg)](https://www.npmjs.com/package/tbxforms) [![PyPI downloads](https://img.shields.io/pypi/dm/tbxforms.svg)](https://pypi.org/project/tbxforms/) [![CI](https://github.com/torchbox/tbxforms/actions/workflows/test.yml/badge.svg)](https://github.com/torchbox/tbxforms/actions/workflows/test.yml) [![LGTM](https://img.shields.io/lgtm/alerts/g/torchbox/tbxforms.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/torchbox/tbxforms/alerts/)# Torchbox FormsA Torchbox-flavoured template pack for [django-crispy-forms](https://github.com/django-crispy-forms/django-crispy-forms), adapted from [crispy-forms-gds](https://github.com/wildfish/crispy-forms-gds).Out of the box, forms created with `tbxforms` will look like the[GOV.UK Design System](https://design-system.service.gov.uk/), though manyvariables can be customised.## Requirements-   Python `&gt;=3.8.1,&lt;4.0`-   Django `&gt;=2.2,&lt;=4.0`-   Wagtail `&gt;=2.15` (if using `WagtailBaseForm`)## InstallationYou must install both the Python package and the NPM package.### Install the Python packageInstall using pip:```bashpip install tbxforms```Add `django-crispy-forms` and `tbxforms` to your installed apps:```pythonINSTALLED_APPS = [  # ...  'crispy_forms',  # django-crispy-forms  'tbxforms',]```Now add the following settings to tell `django-crispy-forms` to use `tbxforms`:```pythonCRISPY_ALLOWED_TEMPLATE_PACKS = [&quot;tbx&quot;]CRISPY_TEMPLATE_PACK = &quot;tbx&quot;```### Install the NPM packageInstall using NPM:```bashnpm install tbxforms```Note: This package uses the `Element.closest`, `NodeList.forEach`, and`Array.includes` APIs. You will need to install and configure polyfills forlegacy browser support if you need to.Instantiate your forms:```javascriptimport TbxForms from 'tbxforms';document.addEventListener('DOMContentLoaded', () =&gt; {    for (const form of document.querySelectorAll(TbxForms.selector())) {        new TbxForms(form);    }});```Import the styles into your project......Either as CSS without any customisations:```scss@use 'node_modules/tbxforms/style.css';```...Or as Sass to customise variables:```scss@use 'node_modules/tbxforms/tbxforms.scss' with (    $tbxforms-error-colour: #f00,    $tbxforms-text-colour: #000,);```Alternatively, variables can be defined in a centralised variables SCSSsuch as [tbxforms/static/sass/abstracts/\_variables.scss](https://github.com/torchbox/tbxforms/blob/main/tbxforms/static/sass/abstracts/_variables.scss).#### Add button styles`tbxforms` provides out-of-the-box GOV.UK Design System styles for everythingexcept buttons, as styles for these probably exist within your project.You will need to write button styles for the following classes:1. `.tbxforms-button`2. `.tbxforms-button.tbxforms-button--primary`3. `.tbxforms-button.tbxforms-button--secondary`4. `.tbxforms-button.tbxforms-button--warning`## Usage`tbxforms` can be used for coded Django forms and editor-controlled Wagtail forms.### Django formsAll forms must inherit the `TbxFormsMixin` mixin, as well as specifying a Django base form class (e.g. `forms.Form` or `forms.ModelForm`)```pythonfrom django import formsfrom tbxforms.forms import TbxFormsMixinclass ExampleForm(TbxFormsMixin, forms.Form):    ...class ExampleModelForm(TbxFormsMixin, forms.ModelForm):    ...```### Wagtail forms#### Create or update a Wagtail formWagtail forms must inherit from `TbxFormsMixin` and `WagtailBaseForm`.```pythonfrom wagtail.contrib.forms.forms import BaseForm as WagtailBaseFormfrom tbxforms.forms import TbxFormsMixinclass ExampleWagtailForm(TbxFormsMixin, WagtailBaseForm):    ...```#### Instruct a Wagtail Page model to use your form**In your form definitions** (e.g. forms.py):```pythonfrom tbxforms.forms import BaseWagtailFormBuilder as TbxFormsBaseWagtailFormBuilderfrom path.to.your.forms import ExampleWagtailFormclass WagtailFormBuilder(TbxFormsBaseWagtailFormBuilder):    def get_form_class(self):        return type(str(&quot;WagtailForm&quot;), (ExampleWagtailForm,), self.formfields)```**And in your form page models** (e.g. models.py):```pythonfrom path.to.your.forms import WagtailFormBuilderclass ExampleFormPage(...):    ...    form_builder = WagtailFormBuilder    ...```### Render a formJust like Django Crispy Forms, you need to pass your form object to the`{% crispy ... %}` template tag, e.g.:```html{% load crispy_forms_tags %}&lt;html&gt;    &lt;body&gt;        {% crispy your_sexy_form %}    &lt;/body&gt;&lt;/html&gt;```### `FormHelper`sA [FormHelper](https://django-crispy-forms.readthedocs.io/en/latest/form_helper.html)allows you to alter the rendering behaviour of forms.Every form that inherits from `TbxFormsMixin` (i.e. every form within `tbxforms`)will have a `FormHelper` with the following default attributes:-   `html5_required = True`-   `label_size = Size.MEDIUM`-   `legend_size = Size.MEDIUM`-   `form_error_title = _(&quot;There is a problem with your submission&quot;)`-   Plus everything from [django-crispy-forms' default attributes](https://django-crispy-forms.readthedocs.io/en/latest/form_helper.html).These can be changed during instantiation or [on the go](https://django-crispy-forms.readthedocs.io/en/latest/dynamic_layouts.html) - examples below.#### Add a submit buttonSubmit buttons are not automatically added to forms. To add one, you can extendthe `form.helper.layout` (examples below).Extend during instantiation:```pythonfrom django import formsfrom tbxforms.forms import TbxFormsMixinfrom tbxforms.layout import Buttonclass YourSexyForm(TbxFormsMixin, forms.Form):    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self.helper.layout.extend([            Button.primary(                name=&quot;submit&quot;,                type=&quot;submit&quot;,                value=&quot;Submit&quot;,            )        ])```Or afterwards:```pythonfrom tbxforms.layout import Buttonform = YourSexyForm()form.helper.layout.extend([    Button.primary(        name=&quot;submit&quot;,        type=&quot;submit&quot;,        value=&quot;Submit&quot;,    )])```### Conditionally-required fields`tbxforms` can show/hide parts of the `layout` depending on a given value. Forexample, you could show (and require) an email address field only when the userchooses to sign up to a newsletter (examples below).You can apply this logic to `field`, `div`, and `fieldset` elements.Note: any field names included within the`conditional_fields_to_show_as_required()` method will appear on the frontendas required, though will technically be `required=False`.**Field example:**```pythonfrom django import formsfrom django.core.exceptions import ValidationErrorfrom tbxforms.choices import Choicefrom tbxforms.forms import TbxFormsMixinfrom tbxforms.layout import Field, Layoutclass ExampleForm(TbxFormsMixin, forms.Form):    NEWSLETTER_CHOICES = (        Choice(&quot;yes&quot;, &quot;Yes please&quot;, hint=&quot;Receive occasional email newsletters.&quot;),        Choice(&quot;no&quot;, &quot;No thanks&quot;),    )    newsletter_signup = forms.ChoiceField(        choices=NEWSLETTER_CHOICES    )    email = forms.EmailField(        widget=forms.EmailInput(required=False)    )    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self.helper.layout = Layout(            # Add our newsletter sign-up field.            Field(&quot;newsletter_signup&quot;),            # Add our email field and define the conditional logic.            Field(                &quot;email&quot;,                data_conditional={                    &quot;field_name&quot;: &quot;newsletter_signup&quot;, # Field to inspect.                    &quot;values&quot;: [&quot;yes&quot;], # Value(s) to cause this field to show.                },            ),        )    @staticmethod    def conditional_fields_to_show_as_required() -&gt; [str]:        # Non-required fields that should show as required to the user.        return [            &quot;email&quot;,        ]    def clean(self):        cleaned_data = super().clean()        newsletter_signup = cleaned_data.get(&quot;newsletter_signup&quot;)        email = cleaned_data.get(&quot;email&quot;)        # Fields included within `conditional_fields_to_show_as_required()` will        # be shown as required but not enforced - i.e. they will not have the        # HTML5 `required` attribute set.        # Thus we need to write our own check to enforce the value exists.        if newsletter_signup == &quot;yes&quot; and not email:            raise ValidationError(                {                    &quot;email&quot;: &quot;This field is required.&quot;,                }            )        # The tbxforms JS will attempt to clear any redundant data upon submission,        # though it is recommended to also handle this in your clean() method.        elif newsletter_signup == &quot;no&quot; and email:            del cleaned_data['email']        return cleaned_data```**Container example:**When you have multiple fields/elements that you want to show/hide together, youcan use the exact same `data_conditional` definition as above but on a `div` or`fieldset` element, e.g.:```pythonfrom tbxforms.layout import HTML, Div, Field, LayoutLayout(    Div(        HTML(&quot;&lt;p&gt;Some relevant text.&lt;/p&gt;&quot;),        Field(&quot;some_other_field&quot;),        Field(&quot;email&quot;),        data_conditional={            &quot;field_name&quot;: &quot;newsletter_signup&quot;,            &quot;values&quot;: [&quot;yes&quot;],        },    ),)```## Customising behaviour### Allow HTML markup within labels and help textMarkup within labels and help text is disabled by default, though can beenabled via:```pythonTBXFORMS_ALLOW_HTML_LABEL = FalseTBXFORMS_ALLOW_HTML_HELP_TEXT = FalseTBXFORMS_ALLOW_HTML_BUTTON = False```### Change the default label and legend classesPossible values for the `label_size` and `legend_size`:1. `SMALL`2. `MEDIUM` (default)3. `LARGE`4. `EXTRA_LARGE`# Further reading-   Download the [PyPI package](http://pypi.python.org/pypi/tbxforms)-   Download the [NPM package](https://www.npmjs.com/package/tbxforms)-   Learn more about [Django Crispy Forms](https://django-crispy-forms.readthedocs.io/en/latest/)-   Learn more about [Crispy Forms GDS](https://github.com/wildfish/crispy-forms-gds)-   Learn more about [GOV.UK Design System](https://design-system.service.gov.uk/)</longdescription>
</pkgmetadata>