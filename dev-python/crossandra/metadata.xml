<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CrossandraCrossandra is a fast and simple tokenization library for Python operating on enums and regular expressions, with a decent amount of configuration.## InstallationCrossandra is available on PyPI and can be installed with pip, or any other Python package manager:```sh$ pip install crossandra```(Some systems may require you to use `pip3`, `python -m pip`, or `py -m pip` instead)## LicenseCrossandra is licensed under the MIT License.## Reference### `Crossandra````pyCrossandra(    token_source: type[Enum] = Empty,    *,    ignore_whitespace: bool = False,    ignored_characters: str = &quot;&quot;,    suppress_unknown: bool = False,    rules: list[Rule | RuleGroup] | None = None)```- `token_source`: an enum containing all possible tokens (defaults to an empty enum)- `ignore_whitespace`: whether spaces, tabs, newlines etc. should be ignored- `ignored_characters`: characters to skip during tokenization- `suppress_unknown`: whether unknown tokens should continue without throwing an error- `rules`: a list of additional rules to useThe enum takes priority over the rule list.---When all tokens are of length 1 and there are no additional rules, Crossandra will use a simpler tokenization method (the so called Fast Mode).&gt; **Example:** Tokenizing noisy Brainfuck code *(tested on MacBook Air M1 (256/16) with pure Python wheels)*```py# Setupfrom random import choicesfrom string import punctuationprogram = &quot;&quot;.join(choices(punctuation, k=...))```k      | Default  | Fast Mode | Speedup:---:  | :---:    | :---:     | :---:10     | 0.00004s | 0.00002s  | 2x100    | 0.00016s | 0.00003s  | 5.3x1000   | 0.0015s  | 0.00013s  | 11.5x10000  | 0.014s   | 0.0009s   | 15.6x100000 | 0.29s    | 0.009s    | 32.2x### `Rule````pyRule[T](    pattern: str,    converter: Callable[[str], T] | bool = True,    flags: RegexFlag | int = 0)```Used for defining custom rules. `pattern` is a regex pattern to match (`flags` can be supplied).  When `converter` is a callable, it's used on the matched substring.  When `converter` is `True`, it will directly return the matched substring.  When `converter` is `False`, it will not include the matched substring in the token list.### `RuleGroup````pyRuleGroup(rules: tuple[Rule[Any], ...])```Used for storing multiple Rules in one object. Can be constructed by ORing two or more Rules.### `common`The `common` submodule is a collection of commonly used patterns.Rules:- CHAR (e.g. `'h'`)- LETTER (e.g. `m`)- WORD (e.g. `ball`)- SINGLE_QUOTED_STRING (e.g. `'nice fish'`)- DOUBLE_QUOTED_STRING (e.g. `&quot;hello there&quot;`)- C_NAME (e.g. `crossandra_rocks`)- NEWLINE (`\n`; `\r\n` is converted to `\n` before tokenization)- DIGIT (e.g. `7`)- HEXDIGIT (e.g. `c`)- DECIMAL (e.g. `3.14`)- INT (e.g. `2137`)- SIGNED_INT (e.g. `-1`)- FLOAT (e.g. `1e3`)- SIGNED_FLOAT (e.g. `+4.3`)RuleGroups:- STRING (`SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING`)- NUMBER (`INT | FLOAT`)- SIGNED_NUMBER (`SIGNED_INT | SIGNED_FLOAT`)## Examples```pyfrom enum import Enumfrom crossandra import Crossandraclass Brainfuck(Enum):    ADD = &quot;+&quot;    SUB = &quot;-&quot;    LEFT = &quot;&lt;&quot;    RIGHT = &quot;&gt;&quot;    READ = &quot;,&quot;    WRITE = &quot;.&quot;    BEGIN_LOOP = &quot;[&quot;    END_LOOP = &quot;]&quot;bf = Crossandra(Brainfuck, suppress_unknown=True)print(*bf.tokenize(&quot;cat program: ,[.,]&quot;), sep=&quot;\n&quot;)# Brainfuck.READ# Brainfuck.BEGIN_LOOP# Brainfuck.WRITE# Brainfuck.READ# Brainfuck.END_LOOP``````pyfrom crossandra import Crossandra, Rule, commondef hex2rgb(hex_color: str) -&gt; tuple[int, int, int]:    r, g, b = (int(hex_color[i:i+2], 16) for i in range(1, 6, 2))    return r, g, bt = Crossandra(    ignore_whitespace=True,    rules=[        Rule(r&quot;#[0-9a-fA-F]+&quot;, hex2rgb),        common.WORD    ])text = &quot;My favorite color is #facade&quot;print(t.tokenize(text))# ['My', 'favorite', 'color', 'is', (250, 202, 222)]``````py# Supporting Samarium's numbers and arithmetic operatorsfrom enum import Enumfrom crossandra import Crossandra, Ruledef sm_int(string: str) -&gt; int:    return int(string.replace(&quot;/&quot;, &quot;1&quot;).replace(&quot;\\&quot;, &quot;0&quot;), 2)class Op(Enum):    ADD = &quot;+&quot;    SUB = &quot;-&quot;    MUL = &quot;++&quot;    DIV = &quot;--&quot;    POW = &quot;+++&quot;    MOD = &quot;---&quot;sm = Crossandra(    Op,    ignore_whitespace=True,    rules=[Rule(r&quot;(?:\\|/)+&quot;, sm_int)])print(*sm.tokenize(r&quot;//\ ++ /\\/ --- /\/\/ - ///&quot;))# 6 Op.MUL 9 Op.MOD 21 Op.SUB 7```</longdescription>
</pkgmetadata>