<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pyconman[![PyPI](https://img.shields.io/pypi/v/pyconman?logo=PyPI)](https://badge.fury.io/py/pyconman)![PyPI - Status](https://img.shields.io/pypi/status/pyconman?logo=PyPI)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyconman?logo=PyPI)[![License](https://img.shields.io/badge/code%20license-Apache%20License%2C%202.0-lightgrey?logo=GitHub)](https://github.com/mahajanankur/pyconman-py/blob/main/LICENSE)[![Downloads](https://static.pepy.tech/badge/pyconman)](https://pepy.tech/project/pyconman)Pyconman is a useful package for managing JSON configurations in Python-based applications. The package provides a system for managing different configurations for different environments, making it easier to handle secure and critical configurations.- **Environment-specific configurations:** Pyconman allows you to manage different configurations for different environments (e.g., development, staging, production), making it easier to handle environment-specific configurations.- **Simpler configuration management:** Pyconman provides a simple and convenient way to manage and access configurations in your Python code, without having to write custom code for handling different configurations.- **Security:** Pyconman helps you manage secure and critical configurations by allowing you to store sensitive information (e.g., API keys, passwords) in a separate configuration file that is not checked into source control.- **Easy to use:** Pyconman is easy to use and requires minimal setup, making it a great choice for developers who want a simple and reliable way to manage configurations in their Python applications.### InstallationPyconman requires [Python](https://www.python.org/) to run.Once installed, you can create a Python virtual environment by running the command in your project directory. This will create a virtual environment and activate it.```shpython3 -m venv .venv &amp;&amp; source .venv/bin/activate ```To use pyconman, you can install it using pip by running the command.```sh$ pip install pyconman```## UsageNext, create a folder called `configs` in your `project root directory`, and create a file called `default.json` in it. This file will contain the default configuration properties for your application. If you want to use a different environment, you can pass that environment's name in the `ENV` variable to override the specific properties for that environment. Please look in the example folder for further information.Here are two sample JSON configurations that you can use with the Pyconman package:**default.json:**```json{    &quot;database&quot;: {        &quot;host&quot;: &quot;localhost&quot;,        &quot;port&quot;: 5432,        &quot;username&quot;: &quot;dbuser&quot;,        &quot;password&quot;: &quot;dbpassword&quot;,        &quot;database_name&quot;: &quot;mydb&quot;    },    &quot;api_key&quot;: &quot;1234567890&quot;,    &quot;log_level&quot;: &quot;debug&quot;}```**production.json:**```json{    &quot;database&quot;: {        &quot;host&quot;: &quot;prod-db-host&quot;,        &quot;username&quot;: &quot;prod-db-user&quot;,        &quot;password&quot;: &quot;prod-db-password&quot;,        &quot;props&quot;: {            &quot;timeout&quot;: 10000,            &quot;trans&quot;: 100        }    }}```To load the configuration in your application, you can use the `ConfigLoader` class provided by pyconman. Here's an example of how you can use it `test.py`:```pythonfrom pyconman import ConfigLoader# Load the configuration in the application scope.config = ConfigLoader.get_config()prop_1 = config.get(&quot;prop_1&quot;)# Access nested JSON propertiesprop_n = config[&quot;prop_1&quot;][&quot;prop_2&quot;][&quot;prop_n&quot;]```---License----**Apache 2.0**</longdescription>
</pkgmetadata>