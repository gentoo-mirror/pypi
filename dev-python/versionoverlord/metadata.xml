<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CircleCI](https://dl.circleci.com/status-badge/img/gh/hasii2011/versionoverlord/tree/master.svg?style=shield)](https://dl.circleci.com/status-badge/redirect/gh/hasii2011/versionoverlord/tree/master)[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity)[![PyPI version](https://badge.fury.io/py/versionoverlord.svg)](https://badge.fury.io/py/versionoverlord)## RationaleThese utilities are meant to solve a problem with related repositories and their dependency relationshipsProjects may have hierarchical dependencies.  See the following [Pyut](https://github.com/hasii2011/PyUt) dependency diagram. ```mermaid---title: Pyut Dependency Graph---flowchartdirection LR  pyut(Pyut 7.7.0) --&gt; oglio(oglio 0.5.80)  pyut(Pyut 7.7.0) --&gt; pyutplugins(pyutplugins 0.8.40)    pyutplugins(pyutplugins 0.8.40) -.-&gt; oglio(oglio 0.5.80)  pyutplugins(pyutplugins 0.8.40) &amp; oglio(oglio 0.5.80) --&gt; untanglepyut.0.6.40   pyut(Pyut 7.7.0) &amp; oglio(oglio 0.5.80) &amp; untanglepyut.0.6.40 --&gt; ogl.0.70.20      pyut(Pyut 7.7.0) &amp;  pyutplugins(pyutplugins 0.8.40) &amp;  oglio(oglio 0.5.80) &amp;  untanglepyut.0.6.40 &amp;  ogl.0.70.20 -...-&gt; pyutmodel.1.4.2   pyut(Pyut 7.7.0) &amp; pyutplugins(pyutplugins 0.8.40) &amp; ogl.0.70.20 ----&gt; hasiicommon.0.2.0    style pyut fill:#ee4,stroke:#333,stroke-width:    %% linkStyle 1 stroke:#ff3,stroke-width:4px,color:red;```The above diagram illustrates how low level dependencies ripple up the dependency tree.  ## Dependency LocationsAdditionally, projects may specify dependencies in different places.  Examples of the dependency locations are* setup.py* requirements.txt* .circleci/config.yml* .travis.yml## Python Console ScriptsVersionOverlord means to handle this problem by providing a set of Python command line scripts to automate updating the first three of the above dependency specification locations* querySlugs -- queries repositories for their latest release version* createSpecification -- creates a dependency specification for a project * updateDependencies -- updates the supported dependency locations using the generated specification## Required Environment VariablesThe above commands depend on the following environment variables.```bashGITHUB_ACCESS_TOKEN - A personal GitHub access token necessary to read repository release informationPROJECTS_BASE             -  The local directory where the python projects are basedPROJECT                          -  The name of the project;  It should be a directory name```See the [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) for instructions on how to create a usable access token.  These scripts assume  that a developer keeps all checked out repositories in a single directory.  An example, of a PROJECTS_BASE is:```bashexport PROJECTS_BASE=&quot;${HOME}/PycharmProjects&quot; ```This should be set in your shell startup script.  For example `.bash_profile`.The PROJECT environment variable should be set on a project by project basis.  I recommend you use [direnv](https://direnv.net) to manage these.  An example of a .envrc follows:```bashexport PROJECT=pyutmodelsource pyenv-3.10.6/bin/activate```## SlugsThe command line options for querySlug and createSpec are GitHub slugs.  For example, for the following repositorieshttps://github.com/hasii2011/pyutmodelhttps://github.com/hasii2011/hasiicommonThe slugs are `hasii2011/pyutmode` and `hasii2011/hasiicommon,` respectively.## UsageFrom the above dependency diagram assume the following:Both the `pyutmodel` and `hasiicommon` repositories have been updated.  We need to update the `ogl` dependencies to match the latest of both.  Assume both `GITHUB_ACCESS_TOKEN` and `PROJECTS_BASE` are correctly set and `PROJECT` is set to `'ogl'`.  Use the following CLI invocation to create the specification file.```createSpec -s hasii2011/pyutmodel -s hasii2011/hasiicommon```The command creates the file `versionSpecification.csv` with the following contents.```PackageName,OldVersion,NewVersionpyutmodel,1.4.0,1.4.1hasiicommon,0.0.7,0.1.0                   ```Again assuming the previously mentioned environment variables are set the following CLI invocation;```updateDeps```correctly updates the following* setup.py* requirements.txt* .circleci/config.yml## Installation```pip install versionoverlord```___Written by &lt;a href=&quot;mailto:email@humberto.a.sanchez.ii@gmail.com?subject=Hello Humberto&quot;&gt;Humberto A. Sanchez II&lt;/a&gt;  (C) 2023## NoteFor all kind of problems, requests, enhancements, bug reports, etc.,please drop me an e-mail.---I am concerned about GitHub's Copilot project![](https://github.com/hasii2011/code-ally-basic/blob/master/developer/SillyGitHub.png)I urge you to read about the[Give up GitHub](https://GiveUpGitHub.org) campaign from[the Software Freedom Conservancy](https://sfconservancy.org).While I do not advocate for all the issues listed there I do not like thata company like Microsoft may profit from open source projects.I continue to use GitHub because it offers the services I need for free.  But, I continueto monitor their terms of service.Any use of this project's code by GitHub Copilot, past or present, is donewithout my permission.  I do not consent to GitHub's use of this project'scode in Copilot.</longdescription>
</pkgmetadata>