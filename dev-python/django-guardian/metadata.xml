<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============django-guardian===============.. image:: https://github.com/django-guardian/django-guardian/workflows/Tests/badge.svg?branch=devel  :target: https://github.com/django-guardian/django-guardian/actions/workflows/tests.yml.. image:: https://img.shields.io/pypi/v/django-guardian.svg    :target: https://pypi.python.org/pypi/django-guardian.. image:: https://img.shields.io/pypi/pyversions/django-guardian.svg    :target: https://pypi.python.org/pypi/django-guardian``django-guardian`` is an implementation of per object permissions [1]_ on topof Django's authorization backendDocumentation-------------Online documentation is available at https://django-guardian.readthedocs.io/.Requirements------------* Python 3.5+* A supported version of Django (currently 2.2+)GitHub Actions run tests against Django versions 2.2, 3.0, 3.1, 3.2, and main.Installation------------To install ``django-guardian`` simply run::    pip install django-guardianConfiguration-------------We need to hook ``django-guardian`` into our project.1. Put ``guardian`` into your ``INSTALLED_APPS`` at settings module:.. code:: python    INSTALLED_APPS = (     ...     'guardian',    )2. Add extra authorization backend to your ``settings.py``:.. code:: python    AUTHENTICATION_BACKENDS = (        'django.contrib.auth.backends.ModelBackend', # default        'guardian.backends.ObjectPermissionBackend',    )3. Create ``guardian`` database tables by running::     python manage.py migrateUsage-----After installation and project hooks we can finally use object permissionswith Django_.Lets start really quickly:.. code:: python      &gt;&gt;&gt; from django.contrib.auth.models import User, Group      &gt;&gt;&gt; jack = User.objects.create_user('jack', 'jack@example.com', 'topsecretagentjack')      &gt;&gt;&gt; admins = Group.objects.create(name='admins')      &gt;&gt;&gt; jack.has_perm('change_group', admins)      False      &gt;&gt;&gt; from guardian.models import UserObjectPermission      &gt;&gt;&gt; UserObjectPermission.objects.assign_perm('change_group', jack, obj=admins)      &lt;UserObjectPermission: admins | jack | change_group&gt;      &gt;&gt;&gt; jack.has_perm('change_group', admins)      TrueOf course our agent jack here would not be able to *change_group* globally:.. code:: python    &gt;&gt;&gt; jack.has_perm('change_group')    FalseAdmin integration-----------------Replace ``admin.ModelAdmin`` with ``GuardedModelAdmin`` for those modelswhich should have object permissions support within admin panel.For example:.. code:: python    from django.contrib import admin    from myapp.models import Author    from guardian.admin import GuardedModelAdmin    # Old way:    #class AuthorAdmin(admin.ModelAdmin):    #    pass    # With object permissions support    class AuthorAdmin(GuardedModelAdmin):        pass    admin.site.register(Author, AuthorAdmin).. [1] Great paper about this feature is available at `djangoadvent articles &lt;https://github.com/djangoadvent/djangoadvent-articles/blob/master/1.2/06_object-permissions.rst&gt;`_... _Django: http://www.djangoproject.com/</longdescription>
</pkgmetadata>