<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======================================Python Broqer=======================================.. image:: https://img.shields.io/pypi/v/broqer.svg  :target: https://pypi.python.org/pypi/broqer.. image:: https://readthedocs.org/projects/python-broqer/badge/?version=latest  :target: https://python-broqer.readthedocs.io/en/latest.. image:: https://img.shields.io/github/license/semiversus/python-broqer.svg  :target: https://en.wikipedia.org/wiki/MIT_LicenseInitial focus on embedded systems *Broqer* can be used wherever continuous streams of data have to be processed - and they are everywhere. Watch out!.. image:: https://cdn.rawgit.com/semiversus/python-broqer/7beb7379/docs/logo.svg.. headerSynopsis========- Pure python implementation without dependencies- Under MIT license (2018 Günther Jena)- Source is hosted on GitHub.com_- Documentation is hosted on ReadTheDocs.com_- Tested on Python 3.7. 3.8, 3.9, 3.10 and 3.11- Unit tested with pytest_, coding style checked with Flake8_, static type checked with mypy_, static code checked with Pylint_, documented with Sphinx_- Operators known from ReactiveX_ and other streaming frameworks (like Map_, CombineLatest_, ...)  + Centralised object to keep track of publishers and subscribers  + Starting point to build applications with a microservice architecture.. _pytest: https://docs.pytest.org/en/latest.. _Flake8: http://flake8.pycqa.org/en/latest/.. _mypy: http://mypy-lang.org/.. _Pylint: https://www.pylint.org/.. _Sphinx: http://www.sphinx-doc.org.. _GitHub.com: https://github.com/semiversus/python-broqer.. _ReadTheDocs.com: http://python-broqer.readthedocs.io.. _ReactiveX: http://reactivex.io/Showcase========In other frameworks a *Publisher* is sometimes called *Oberservable*. A *Subscriber*is able to observe changes the publisher is emitting. With these basics you'reable to use the observer pattern - let's see!Observer pattern----------------Subscribing to a publisher is done via the .subscribe() method.A simple subscriber is ``Sink`` which is calling a function with optional positionaland keyword arguments... code-block:: python3    &gt;&gt;&gt; from broqer import Publisher, Sink    &gt;&gt;&gt; a = Publisher(5)  # create a publisher with state `5`    &gt;&gt;&gt; s = Sink(print, 'Change:')  # create a subscriber    &gt;&gt;&gt; disposable = a.subscribe(s)  # subscribe subscriber to publisher    Change: 5    &gt;&gt;&gt; a.notify(3)  # change the state    Change: 3    &gt;&gt;&gt; disposable.dispose()  # unsubscribeCombine publishers with arithmetic operators--------------------------------------------You're able to create publishers on the fly by combining two publishers withthe common operators (like ``+``, ``&gt;``, ``&lt;&lt;``, ...)... code-block:: python3    &gt;&gt;&gt; a = Publisher(1)    &gt;&gt;&gt; b = Publisher(3)    &gt;&gt;&gt; c = a * 3 &gt; b  # create a new publisher via operator overloading    &gt;&gt;&gt; disposable = c.subscribe(Sink(print, 'c:'))    c: False    &gt;&gt;&gt; a.notify(2)    c: True    &gt;&gt;&gt; b.notify(10)    c: FalseAlso fancy stuff like getting item by index or key is possible:.. code-block:: python3    &gt;&gt;&gt; i = Publisher('a')    &gt;&gt;&gt; d = Publisher({'a':100, 'b':200, 'c':300})    &gt;&gt;&gt; disposable = d[i].subscribe(Sink(print, 'r:'))    r: 100    &gt;&gt;&gt; i.notify('c')    r: 300    &gt;&gt;&gt; d.notify({'c':123})    r: 123Some python built in functions can't return Publishers (e.g. ``len()`` needs toreturn an integer). For these cases special functions are defined in broqer: ``Str``,``Int``, ``Float``, ``Len`` and ``In`` (for ``x in y``). Also other functionsfor convenience are available: ``All``, ``Any``, ``BitwiseAnd`` and ``BitwiseOr``.Attribute access on a publisher is building a publisher where the actual attributeaccess is done on emitting values. A publisher has to know, which type it shouldmimic - this is done via ``.inherit_type(type)``... code-block:: python3    &gt;&gt;&gt; i = Publisher('Attribute access made REACTIVE')    &gt;&gt;&gt; i.inherit_type(str)    &gt;&gt;&gt; disposable = i.lower().split(sep=' ').subscribe(Sink(print))    ['attribute', 'access', 'made', 'reactive']    &gt;&gt;&gt; i.notify('Reactive and pythonic')    ['reactive', 'and', 'pythonic']Function decorators-------------------Make your own operators on the fly with function decorators. Decorators areavailable for ``Accumulate``, ``CombineLatest``, ``Filter``, ``Map``, ``MapAsync``,``MapThreaded``, ``Reduce`` and ``Sink``... code-block:: python3    &gt;&gt;&gt; from broqer import op    &gt;&gt;&gt; @op.build_map    ... def count_vowels(s):    ...     return sum([s.count(v) for v in 'aeiou'])    &gt;&gt;&gt; msg = Publisher('Hello World!')    &gt;&gt;&gt; disposable = (msg | count_vowels).subscribe(Sink(print, 'Number of vowels:'))    Number of vowels: 3    &gt;&gt;&gt; msg.notify('Wahuuu')    Number of vowels: 4You can even make configurable ``Map`` s and ``Filter`` s:.. code-block:: python3    &gt;&gt;&gt; import re    &gt;&gt;&gt; @op.build_filter_factory    ... def filter_pattern(pattern, s):    ...     return re.search(pattern, s) is not None    &gt;&gt;&gt; msg = Publisher('Cars passed: 135!')    &gt;&gt;&gt; disposable = (msg | filter_pattern('[0-9]+')).subscribe(Sink(print))    Cars passed: 135!    &gt;&gt;&gt; msg.notify('No cars have passed')    &gt;&gt;&gt; msg.notify('Only 1 car has passed')    Only 1 car has passedInstall=======.. code-block:: bash    pip install broqerCredits=======Broqer was inspired by:* RxPY_: Reactive Extension for Python (by Børge Lanes and Dag Brattli)* aioreactive_: Async/Await reactive tools for Python (by Dag Brattli)* streamz_: build pipelines to manage continuous streams of data (by Matthew Rocklin)* MQTT_: M2M connectivity protocol* `Florian Feurstein &lt;https://github.com/flofeurstein&gt;`_: spending hours of discussion, coming up with great ideas and help me understand the concepts!.. _RxPY: https://github.com/ReactiveX/RxPY.. _aioreactive: https://github.com/dbrattli/aioreactive.. _streamz: https://github.com/mrocklin/streamz.. _MQTT: http://mqtt.org/.. _Value: https://python-broqer.readthedocs.io/en/latest/subjects.html#value.. _Publisher: https://python-broqer.readthedocs.io/en/latest/publishers.html#publisher.. _Subscriber: https://python-broqer.readthedocs.io/en/latest/subscribers.html#subscriber.. _CombineLatest: https://python-broqer.readthedocs.io/en/latest/operators/combine_latest.py.. _Filter: https://python-broqer.readthedocs.io/en/latest/operators/filter_.py.. _Map: https://python-broqer.readthedocs.io/en/latest/operators/map_.py.. _MapAsync: https://python-broqer.readthedocs.io/en/latest/operators/map_async.py.. _Sink: https://python-broqer.readthedocs.io/en/latest/operators/subscribers/sink.py.. _SinkAsync: https://python-broqer.readthedocs.io/en/latest/operators/subscribers/sink_async.py.. _OnEmitFuture: https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace.. _Trace: https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace.. apiAPI===Publishers----------A Publisher_ is the source for messages.+------------------------------------+--------------------------------------------------------------------------+| Publisher_ ()                      | Basic publisher                                                          |+------------------------------------+--------------------------------------------------------------------------+Operators---------+-------------------------------------+-----------------------------------------------------------------------------+| CombineLatest_ (\*publishers)       | Combine the latest emit of multiple publishers and emit the combination     |+-------------------------------------+-----------------------------------------------------------------------------+| Filter_ (predicate, ...)            | Filters values based on a ``predicate`` function                            |+-------------------------------------+-----------------------------------------------------------------------------+| Map_ (map_func, \*args, \*\*kwargs) | Apply ``map_func(*args, value, **kwargs)`` to each emitted value            |+-------------------------------------+-----------------------------------------------------------------------------+| MapAsync_ (coro, mode, ...)         | Apply ``coro(*args, value, **kwargs)`` to each emitted value                |+-------------------------------------+-----------------------------------------------------------------------------+| Throttle (duration)                 | Limit the number of emits per duration                                      |+-------------------------------------+-----------------------------------------------------------------------------+Subscribers-----------A Subscriber_ is the sink for messages.+----------------------------------+--------------------------------------------------------------+| Sink_ (func, \*args, \*\*kwargs) | Apply ``func(*args, value, **kwargs)`` to each emitted value |+----------------------------------+--------------------------------------------------------------+| SinkAsync_ (coro, ...)           | Apply ``coro(*args, value, **kwargs)`` to each emitted value |+----------------------------------+--------------------------------------------------------------+| OnEmitFuture_ (timeout=None)     | Build a future able to await for                             |+----------------------------------+--------------------------------------------------------------+| Trace_ (d)                       | Debug output for publishers                                  |+----------------------------------+--------------------------------------------------------------+Values--------+--------------------------+--------------------------------------------------------------+| Value_ (\*init)          | Publisher and Subscriber                                     |+--------------------------+--------------------------------------------------------------+</longdescription>
</pkgmetadata>