<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dfmA dotfile manager for lazy people and pair programmers.&gt; dfm doesn't require that the dotfiles in your repository start with dots&gt; though it handles either case equally well.## Table of Contents- [Features](#features)  - [Multiple dotfile profiles](#multiple-dotfile-profiles)  - [Profile modules](#profile-modules)  - [Pre and post command hooks](#pre-and-post-command-hooks)  - [Respects `$XDG_CONFIG_HOME`](#respects-xdg_config_home)  - [Skips relevant files](#skips-relevant-files)  - [Configurable mappings](#custom-mappings)  - [Encrypted Dotfiles](#encrypted-dotfiles)- [Installation](#installation)- [Updating](#updating)- [Usage](#usage)- [Git quick start](#git-quick-start)  - [Existing dotfiles repository](#quick-start-existing-dotfiles-repository)  - [No existing dotfiles repository](#quick-start-no-existing-dotfiles-repository)- [Configuration](#configuration)- [Contributing](#contributing)- [License](#license)## Featuresdfm supports these features that I was unable to find in other DotfileManagement solutions.### Multiple dotfile profilesdfm's core feature is the idea of profiles. Profiles are simply acollection of dotfiles that dfm manages and links in the `$HOME`directory or configuration directories. This means that you can havemultiple profiles and overlap them.This feature is hard to describe, so I will illustrate it's usefulnesswith two use cases:#### The work profileI use one laptop for work and personal projects in my dfm profiles I have mypersonal profile `chasinglogic` which contains all my dotfiles for Emacs, git,etc. and a &quot;work&quot; profile which only has a `.gitconfig` that has my work emailin it. So my profile directory looks like this:```textprofiles/├── chasinglogic│   ├── agignore│   ├── bash│   ├── bashrc│   ├── gitconfig│   ├── gnupg│   ├── password-store│   ├── pypirc│   ├── spacemacs.d│   └── tmux.conf└── work    └── gitconfig```Since dfm when linking only overwrites the files which are in the newprofile, I can run `dfm link work` and still have access to my emacsconfiguration but my `gitconfig` has been updated to use my workemail. Similarly when I leave work I just `dfm link chasinglogic` toswitch back.See [profile modules](#profile-modules) for an even better solution to thisparticular use case.#### Pair programmingThe original inspiration for this tool was pair programming with myfriend [lionize](https://github.com/lionize). lionize has a dotfilesrepository so I can clone it using the git backend for dfm with `dfmclone --name lionize https://github.com/lionize/dotfiles`.Now our profile directory looks like:```textprofiles/├── chasinglogic│   ├── .dfm.yml│   ├── .git│   ├── .gitignore│   ├── agignore│   ├── bash│   ├── bashrc│   ├── gitconfig│   ├── gnupg│   ├── password-store│   ├── pypirc│   ├── spacemacs.d│   └── tmux.conf├── lionize│   ├── .agignore│   ├── .git│   ├── .gitconfig│   ├── .gitignore_global│   ├── .gitmessage│   ├── .scripts│   ├── .tmux.conf│   ├── .vim│   ├── .vimrc -&gt; ./.vim/init.vim│   └── .zshrc└── work    ├── .git    └── gitconfig```Now when I'm driving I simply `dfm link chasinglogic` and when passing back tolionize he runs `dfm link lionize` and we don't have to mess with multiplemachines vice versa.### Profile modulesdfm supports profile modules which can be either additional dotfiles profiles asaccepted by the `dfm clone` command or can be any git repository such as[Spacemacs](https://github.com/syl20bnr/spacemacs). You can get more info abouthow to use them and configure them in [Configuration](#configuration)### Pre and Post command hooksdfm supports pre and post command hooks. that allows you to specify before andafter command scripts to run. For example, I use a profile module to keepcertain ssh keys in an encrypted git repository. Whenever I run the `dfm sync` commandI have hooks which fix the permissions of the keys and ssh-add them to my sshagent. You can read about how to write your own hooks in[Configuration](#configuration)### Respects `$XDG_CONFIG_HOME`dfm respects dotfiles which exist in the `$XDG_CONFIG_HOME` directory,meaning if in your repository you have a folder named `config` or`.config` it'll translate those into the `$XDG_CONFIG_HOME`directory automatically. Similarly when using `dfm add` if inside your`$XDG_CONFIG_HOME` or $HOME/.configuration directories it'll add those tothe repository appropriately.### Skips relevant filesdfm by default will skip multiple relevant files.- .gitdfm will skip the .git directory so your `$HOME` directory isn'tturned into a git repository.- .gitignoreIf you would like to store a global `.gitignore` file you can either omit theleading dot (so just `gitignore`) or name the global one `.ggitignore` and dfmwill translate the name for you. Otherwise it assumes that `.gitignore` is thegitignore for the profile's repository and so skips it.- READMEWant to make a README for your dotfiles? Go ahead! As long as the file namestarts with README dfm will ignore it. So `README.txt` `README.md` and`README.rst` or whatever other permutations you can dream up all work.- LICENSEYou should put a LICENSE on all code you put on the internet and some dotfiles /configurations are actual code (See: Emacs). If you put a LICENSE in yourprofile dfm will respect you being a good open source citizen and not clutter your`$HOME` directory.- .dfm.ymlThis is a special dfm file used for hooks today and in the future for other waysto extend dfm. As such dfm doesn't put it in your `$HOME` directory.### Custom mappingsThe above ignores are implemented as a dfm feature calledMappings. You can write your own mappings to either skip, skip basedon platform or translate files to different locations than dfm wouldnormally place them. You can read how to configure your own mappingsin [Configuration](#configuration)### Encrypted DotfilesUsing hooks and mappings you can integrate GPG with DFM to have an encrypteddotfiles repository.If you add the following `.dfm.yml` to your repository per the[Configuration](#configuration) documentation:```yaml---mappings:  - match: '.*.gpg'    skip: truehooks:  before_sync:    - interpreter: /bin/bash -c      script: |        echo &quot;encrypting files...&quot;        for file in $(find . -not -name '*.gpg' -not -name '.dfm.yml' -not -name '.gitignore' -not -path './.git/*'); do          echo &quot;Encrypting $file to ${file/.gpg/}&quot;          gpg --batch --yes --encrypt ${file/.gpg/}        done  after_sync:    - interpreter: /bin/bash -c      script: |        for file in $(git ls-files | grep -v .dfm.yml | grep -v .gitignore); do          gpg --batch --yes --decrypt -o ${file/.gpg/} $file         done```And the following `.gitignore` file:```*!*/!.gitignore!.dfm.yml!*.gpg```Then when running `dfm sync` DFM will run the gpg command to encrypt all yourfiles, then git will ignore all non-GPG encrypted files (due to the`.gitignore`), and after syncing DFM will decrypt all the GPG encrypted files.This all happens before linking, when you run `dfm link` DFM will ignore all gpgencrypted files due to the `mapping` configuration. It will then only link theunencrypted versions into your home directory.## Installation### Install from Releasedfm is available on PyPi and should be installed from there:```text$ pip3 install dfm```dfm supports Python 3+.### Install from SourceClone the repository and run `make install`:```bashgit clone https://github.com/chasinglogic/dfmcd dfmmake install```&gt; It's possible that for your system you will need to run the make&gt; command with sudo.## Usage```textUsage:    dfm [options] &lt;command&gt; [&lt;args&gt;...]    dfm help    dfm sync    dfm link &lt;profile&gt;Dotfile management written for pair programmers. Examples on gettingstarted with dfm are avialable at https://github.com/chasinglogic/dfmOptions:    -v, --verbose  If provided print more logging info    --debug        If provided print debug level logging info    -h, --help     Print this help informationCommands:    help           Print usage information about dfm commands    sync (s)       Sync your dotfiles    add (a)        Add the file to the current dotfile profile    clean (x)      Clean dead symlinks    clone (c)      Use git clone to download an existing profile    git (g)        Run the given git command on the current profile    init (i)       Create a new profile    link (l)       Create links for a profile    list (ls)      List available profiles    remove (rm)    Remove a profile    run-hook (rh)  Run dfm hooks without using normal commands    where (w)      Prints the location of the current dotfile profileSee 'dfm help &lt;command&gt;' for more information on a specific command.```## Quick start### Quick start (Existing dotfiles repository)If you already have a dotfiles repository you can start by cloning it using the clonecommand.&gt; SSH URLs will work as well.```bashdfm clone https://github.com/chasinglogic/dotfiles```If you're using GitHub you can shortcut the domain:```bashdfm clone chasinglogic/dotfiles```If you want to clone and link the dotfiles in one command:```bashdfm clone --link chasinglogic/dotfiles```You may have to use `--overwrite` as well if you have existing non-symlinkedversions of your dotfilesOnce you have multiple profiles you can switch between them using `dfm link````bashdfm link some-other-profile```See the Usage Notes below for some quick info on what to expect from other dfmcommands.### Quick Start (No existing dotfiles repository)If you don't have a dotfiles repository the best place to start is with `dfm init````bashdfm init my-new-profile```Then run `dfm link` to set it as the active profile, this is also how you switchprofiles```bashdfm link my-new-profile```Once that's done you can start adding your dotfiles```bashdfm add ~/.bashrc```Alternatively you can add multiple files at once```bashdfm add ~/.bashrc ~/.vimrc ~/.vim ~/.emacs.d```Then create your dotfiles repository on GitHub. Instructions for how to do that can befound [here](https://help.github.com/articles/create-a-repository/). Once that's doneget the &quot;clone&quot; URL for your new repository and set it as origin for the profile:**Note:** When creating the remote repository don't choose any options such as&quot;initialize this repository with a README&quot; otherwise git'll get cranky when you addthe remote because of a recent git update and how it handles [unrelatedhistories](http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories)if you do don't worry the linked post explains how to get past it.```bashdfm git remote add origin &lt;your clone URL&gt;```Then simply run `dfm sync` to sync your dotfiles to the remote```bashdfm sync```Now you're done!## Configurationdfm supports a `.dfm.yml` file in the root of your repository thatchanges dfm's behavior when syncing and linking your profile. Thisfile will be ignored when doing a `dfm link` so won't end up inyour home directory. The `.dfm.yml` can be used to configure thesefeatures:- [Modules](#modules)- [Mappings](#mappings)- [Hooks](#hooks)### ModulesModules in dfm are sub profiles. They're git repositories that are cloned into aa special directory: `$XDG_CONFIG_HOME/dfm/modules`. They're shared acrossprofiles so if two dotfile profiles have the same module they'll share thatmodule.The syntax for defining a minimum module is as follows:```yamlmodules:    - repository: git@github.com:chasinglogic/dotfiles```This would clone my dotfiles repository as a module into`$XDG_CONFIG_HOME/dfm/modules/chasinglogic`. If I wanted to use a unique name orsome other folder name so it wouldn't be shared you can specify an additionaloption `name`:```yamlmodules:    - repository: git@github.com:chasinglogic/dotfiles      name: chasinglogic-dotfiles```Which would instead clone into`$XDG_CONFIG_HOME/dfm/modules/chasinglogic-dotfiles`. You can define multiplemodules:```yamlmodules:    - repository: git@github.com:chasinglogic/dotfiles      name: chasinglogic-dotfiles    - repository: git@github.com:lionize/dotfiles```Make sure that you specify a name if the resulting clone location as defined bygit would conflict as we see here. Both of these would have been cloned intodotfiles which would cause the clone to fail for the second module if we didn'tspecify name for chasinglogic's dotfiles.An additional use for modules is that of a git repository you want to clone but notlink. An example use would be for downloading[Spacemacs](https://github.com/syl20bnr/spacemacs) or any such communityconfiguration like oh-my-zsh, etc.```yamlmodules:    - repo: git@github.com:syl20bnr/spacemacs      link: none      pull_only: true      location: ~/.emacs.d```Here we specify a few extra keys. There purpose should be self explanatory butif you're curious [below](#available-keys) is a detailed explanation of all keysthat each module configuration supports.Modules work just like any other dfm profile so if a module you'repulling in has a `.dfm.yml` in it that will be loaded and executedaccordingly. Including pulling down any modules it defines.#### Available keys- [repo](#repo)- [name](#name)- [location](#location)- [link](#link)- [pull\_only](#pull\_only)- [mappings](#mappings)##### repoRequired, this is the git repository to clone for the module.##### nameThis changes the cloned name. This only has an effect if location isn'tprovided. Normally a git repository would be cloned into`$XDG_CONFIG_HOME/dfm/modules` and the resulting folder would be named whatevergit decides it should be based on the git URL. If this is provided it'll becloned into the modules directory with the specified name. This is useful ifmultiple profiles use the same module.##### locationIf provided module will be cloned into the specified location. You can use the`~` bash expansion here to represent `$HOME`. No other expansions are available.This option is useful for cloning community configurations like oh-my-zsh orspacemacs.##### linkDetermines when to link the module. Link in this context means that it'll betreated like a normal dotfile profile, so all files will go through the sametranslation rules as a regular profile and be linked accordingly. Availablevalues are `post`, `pre`, and `none`. `post` is the default and means that themodule will be linked after the parent profile. &quot;pre&quot; means this will be linkedbefore the parent profile, use this if for instance you want to use most filesfrom this profile and override a few files with those from the parent file sincedfm will overwrite the links with the last one found. &quot;none&quot; means the module isnot a dotfiles profile and shouldn't be linked at all, an example beingcommunity configuration repositories like oh-my-zsh or spacemacs.##### pull\_onlyIf set to `true` won't attempt to push any changes. It's important toknow that dfm always tries to push to origin master, so if you don'thave write access to the repository or don't want it to automaticallypush to master then you should set this to true. This is useful forcommunity configuration repositories.##### mappingsA list of file mappings as described below in [Mappings](#mappings). Modules donot inherit parent mappings, they do however inherit the default mappings asdescribed in [Skips Relevant Files](#skips-relevant-files)### MappingsMappings are a way of defining custom file locations. To understandmappings one must understand dfm's default link behavior:#### Default behaviorFor an example let's say you have a file named `my_config.txt` in yourdotfile repository. dfm will try and translate that to a new locationof `$HOME/.my_config.txt`. It'll then create a symlink at that locationpointing to `my_config.txt` in your dotfile repository.#### Using mappingsWith mappings you can replace this behavior and make it so dfm willlink `my_config` wherever you wish. This is useful if you need tostore config files that are actually global. Such as configurationfiles that would go into `/etc/` or if you want to sync some files inyour repo but not link them.Here is a simple example:```yamlmappings:  - match: .config/some-dir    link_as_dir: true  - match: my_global_etc_files    target_dir: /etc/  - match: something_want_to_skip_but_sync    skip: true  - match: something_only_for_macos    target_os: &quot;Darwin&quot;  - match: some_file_for_mac_and_linux_only    target_os:        - &quot;Linux&quot;        - &quot;Darwin&quot;  - match: some_specific_translation_for_mac    dest: ~/.mac_os_dotfile    target_os:        - &quot;Darwin&quot;```Here dfm uses the match as a regular expression to match the filepaths in your dotfile repository. When it finds a path which matchesthe regular expression it adds an alternative linking behavior. Foranything where `skip` is true it simply skips linking. For anythingwith `target_dir` that value will override `$HOME` when linking. Foranything with a `target_os` value the file will only be linked if dfmis being run on the given os.##### Link as Dir MappingsAbove you can see a mapping using the `link_as_dir` option. When this is set to `true`for a mapping the `match:` value will be used as a directory relative to the root of thedotfile repo and will be linked as a directory. Normally DFM only links files, this cancause issues with some types of configuration where you regularly generate files likesnippet tools. Consider the following dotfiles in a dotfile repository:```$REPO/.config/nvim├── UltiSnips│   ├── gitcommit.snippets│   └── python.snippets```That would produce the following links in `$HOME/.config/nvim`:```$HOME/.config/nvim├── UltiSnips│   ├── gitcommit.snippets -&gt; $HOME/.config/dfm/profiles/chasinglogic/.config/nvim/UltiSnips/gitcommit.snippets│   └── python.snippets -&gt; $HOME/.config/dfm/profiles/chasinglogic/.config/nvim/UltiSnips/python.snippets```Every time you used `:UltiSnipsEdit` to create a new snippet file type you'd have tothen remember to manually move that into your dotfile repository and re-run `dfm link`.To solve this problem you can use the following mapping in your `.dfm.yml` you caninstead link `UltiSnips` the directory instead of it's files:```mappings:  - match: .config/nvim/UltiSnips    link_as_dir: true```Now DFM links the `$HOME/.config/nvim/UltiSnips` directory to the`$REPO/.config/nvim/UltiSnips`:```$HOME/.config/nvim├── UltiSnips -&gt; $HOME/.config/dfm/profiles/chasinglogic/.config/nvim/UltiSnips```#### Available configurationMappings support the following configuration options:- [match](#match)- [skip](#skip)- [dest](#dest)- [target\_dir](#target\_dir)- [target\_os](#target\_os)##### matchMatch is a regular expression used to match the file path of any filesin your dotfile repository. This is used to determine if the customlinking behavior for a file should be used.These are python style regular expressions and are matched using the[`re.findall`](https://docs.python.org/3/library/re.html#re.findall)method so are by default fuzzy matching.##### skipIf provided the file/s will not be linked.##### destThe new full path to the file. This can be used to completely change a file'sname or put it in a wholly new location. This is more explicity than`target_dir` and covers cases that `target_dir` is not suited for (for exampleif a file is a dotfile on one OS but not on another.)##### target\_dirWhere to link the file to. The `~` expansion for `$HOME` is supportedhere but no other expansions are available. It is worth noting that ifyou're using `~` in your target_dir then you should probably justcreate the directory structure in your git repo.##### target\_osA string or list of strings matching the OS's to link this fileon. A non-exhaustive list of common values are: `Linux`, `Darwin`, or`Windows`. This matches the string returned by [Python's`platform.system()`function.](https://docs.python.org/3/library/platform.html#platform.system)### HooksHooks in dfm are used for those few extra tasks that you need to do wheneveryour dotfiles are synced or linked.An example from my personal dotfiles is running an Ansible playbookwhenever I sync my dotfiles. To accomplish this I wrote an`after_sync` hook as follows:```yamlhooks:  after_sync:    - ansible-playbook ansible/dev-mac.yml```Now whenever I sync my dotfiles Ansible will run my `dev-mac` playbook to makesure that my packages etc are also in sync!The hooks option is just a YAML map which supports the following keys:`after_link`, `before_link`, `after_sync`, and `before_sync`. Thevalues of any of those keys is a YAML list of strings which will beexecuted in a shell via `/bin/sh -c '$YOUR COMMAND'`. An example wouldbe:```yamlhooks:  after_link:    - ls -l    - whoami    - echo &quot;All done!&quot;```All commands are ran with a working directory of your dotfilerepository and the current process environment is passed down to theprocess so you can use `$HOME` etc environment variables in yourcommands.By default the comamnds will run with the interpreter `/bin/sh -c`. So theexpanded comamnd line for the first hook above would be:```/bin/sh -c 'ls -l'```If you want to use a different interpreter you can use instead use this hookformat:```hooks:  after_link:    - interpreter: python -c      script: |        print(&quot;hello world from Python&quot;)```You may want to do this in cases where you need complex logic (like that whichshould live in a Python script) or for example on Debian based systems whichuse dash instead of bash as the /bin/sh interpreter and so have a very limitedexpansion feature set.## Contributing1. Fork it!2. Create your feature branch: `git checkout -b my-new-feature`3. Commit your changes: `git commit -am 'Add some feature'`4. Push to the branch: `git push origin my-new-feature`5. :fire: Submit a pull request :D :fire:All pull requests should go to the develop branch not master. Thanks!## LicenseThis code is distributed under the GNU General Public License```    Copyright (C) 2018 Mathew Robinson    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.```</longdescription>
</pkgmetadata>