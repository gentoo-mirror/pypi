<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>jdatetime=========jdatetime is Jalali_ implementation of Python's datetime moduleStatus------.. image:: https://github.com/slashmili/python-jalali/workflows/Tests/badge.svg?branch=main   :target: https://github.com/slashmili/python-jalali/actions.. image:: https://ci.appveyor.com/api/projects/status/ge5rk703ydx649a6?svg=true   :target: https://ci.appveyor.com/project/slashmili/python-jalali.. image:: https://img.shields.io/pypi/v/jdatetime.svg   :target: https://pypi.python.org/pypi/jdatetime.. image:: https://img.shields.io/pypi/pyversions/jdatetime.svg   :target: https://pypi.python.org/pypi/jdatetimeInstall-------``pip install jdatetime``Documents---------This module exactly follows Python Standard datetime module's methods http://docs.python.org/release/3.7.1/library/datetime.htmlAlso these methods are added to jdatetime.date and jdatetime.datetime :.. code-block:: python    fromgregorian(**kw)        Convert gregorian to jalali and return jdatetime.date        jdatetime.date.fromgregorian(day=X,month=X,year=X)        jdatetime.date.fromgregorian(date=datetime.date)        jdatetime.datetime.fromgregorian(datetime=datetime.datetime)    togregorian(self)        Convert current jalali date to gregorian and return datetime.date    isleap(self)        check if year is leap year        algortim is based on http://en.wikipedia.org/wiki/Leap_yearExample-------.. code-block:: shell    &gt;&gt;&gt; import jdatetime    &gt;&gt;&gt; jdatetime.datetime.now()    jdatetime.datetime(1394, 12, 4, 8, 37, 31, 855729)    &gt;&gt;&gt; jdatetime.date.today()    jdatetime.date(1394, 12, 4)Locale------In order to get the date string in farsi you need to set the locale to fa_IR. The localecould be specified explicitly upon instantiation of `date`/`datetime` instances, or bysetting a default locale.Instance locales is *named argument only*:.. code-block:: python    import jdatetime    fa_date = jdatetime.date(1397, 4, 23, locale='fa_IR')    fa_datetime = jdatetime.datetime(1397, 4, 23, 11, 40, 30, locale='fa_IR')`date` and `datetime` instances provide the method `aslocale()` to return a clone of the instancewith the same timestamp, in a different locale.Default Locale~~~~~~~~~~~~~~It's possible to set the default locale, so all new instances created afterwards would usethe desired locale, unless explicitly specified otherwise... code-block:: shell    &gt;&gt;&gt; import locale    &gt;&gt;&gt; import jdatetime    &gt;&gt; jdatetime.datetime.now().strftime(&quot;%a, %d %b %Y %H:%M:%S&quot;)    u'Wed, 08 Ord 1395 20:47:32'    &gt;&gt;&gt; locale.setlocale(locale.LC_ALL, &quot;fa_IR&quot;)    'fa_IR'    &gt;&gt;&gt; jdatetime.datetime.now().strftime(&quot;%a, %d %b %Y %H:%M:%S&quot;)    u'\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647, 08 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a 1395 20:47:56'If your requirements demand to support different locales withing the same process,you could set the default locale per thread. New `date` and `datetime` instancescreated in each thread, will use the specified locale by default.This supports both Python threads, and greenlets... code-block:: python    import jdatetime    jdatetime.set_locale('fa_IR')    jdatetime.datetime.now().strftime('%A %B')    # u'\u062f\u0648\u0634\u0646\u0628\u0647 \u062e\u0631\u062f\u0627\u062f'Development-----------You can contribute to this project forking it from GitHub and sending pull requests.First fork_ the repository_ and then clone it:.. code:: shell    $ git clone git@github.com:&lt;you&gt;/python-jalali.gitBefore committing, you can run all the above tests against all supported Python versions with tox.You need to install tox first:.. code:: shell    $ pip install toxAnd then you can run all tests:.. code:: shell    $ toxIf you wish to limit the testing to specific Python version, you can parametrize the tox run:.. code:: shell    $ tox -e py39Release Steps~~~~~~~~~~~~~~* Bump the version in ``setup.py`` and ``jdatetime/__init__.py``. We are using Semantic Versioning.* Add release notes in CHANGELOG.md* Commit and push the changes. Create a PR* After the PR is merged, create a release with a tag name like `v&lt;version&gt;`* Github Action creates the package and deploys it to pypi... _Jalali: http://en.wikipedia.org/wiki/Iranian_calendar.. _fork: https://help.github.com/en/articles/fork-a-repo.. _repository: https://github.com/slashmili/python-jalali</longdescription>
</pkgmetadata>