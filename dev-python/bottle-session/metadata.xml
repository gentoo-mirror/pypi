<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Bottle Sessions with Redis==========================Bottle_session is a session manager for the Bottle microframework thatuses a cookie to maintain your web session and stores a hash associatedwith that cookie using the redis key-value store. It is designed as asimple Bottle plugin.Installation------------Install using either pip or easy_install:::   $ pip install bottle-sessionor you can download the latest version from bitbucket:::   $ git clone https://devries@bitbucket.org/devries/bottle-session.git   $ cd bottle-session   $ python setup.py installRequirements------------In order to use bottle-session you must have both the redis and ofcourse the bottle modules installed. I recommend also installingpycrypto, although it is not required. If pycrypto is installed, thenthe pycrypto random number generator is used to generate sessioncookies, otherwise pythonâ€™s internal random number generator is used.Using Bottle-session--------------------The first requirement is that you import the bottle_session module:::   import bottle_session   import bottleNext, initialize the plugin:::   app = bottle.app()   plugin = bottle_session.SessionPlugin(cookie_lifetime=600)   app.install(plugin)The ``cookie_lifetime`` parameter is the lifetime of the cookie inseconds, if the lifetime is explicitly set to **None** it will last 1week. The ``SessionPlugin`` class initializer takes several optionalparameters:-  ``host`` is the host for the redis instance. It defaults to   ``localhost``.-  ``port`` is the port for the redis instance. It defaults to ``6379``.-  ``db`` is the redis database number. It defaults to ``0``.-  ``cookie_name`` is the name of the session cookie. It defaults to   ``bottle.session``.-  ``cookie_secure`` is a boolean variable to set the Secure cookie   flag. It defaults to ``False``.-  ``cookie_httponly`` is a boolean variable to set the HttpOnly cookie   flag. It defaults to ``False``.-  ``keyword`` is the plugin keyword. It defaults to ``session``.-  ``password`` is the optional password for the redis instance. It   defaults to none.To use the plugin, just add the keyword (``session`` by default) to therouted method:::   @bottle.route('/')   def index(session):       user_name = session.get('name')       if user_name is not None:           return &quot;Hello, %s&quot;%user_name       else:           return &quot;I don't recognize you.&quot;   @bottle.route('/set/:user_name')   def set_name(session,user_name=None):       if user_name is not None:           session['name']=user_name           return &quot;I recognize you now.&quot;       else:           return &quot;What was that?&quot;   bottle.debug(True)   bottle.run(app=app,host='localhost',port=8888)In this example you can set the ``name`` property of the session cookieto Chris by visiting the ``http://localhost:8888/set/Chris`` and thenthat value is retrieved when you visit ``http://localhost:8888/``.Using Bottle-session and Bottle-redis-------------------------------------If you are using redis for sessions you are likely using redis to storeother data as well, and likely use the bottle-redis plugin. You can useboth plugins together, and you can even get them to use the sameconnection pool. Initialize them by creating a connection pool which youattach to each plugin object before installing them into the bottleapplication as shown below:::   #!/usr/bin/env python   import bottle_session   import bottle_redis   import bottle   import redis   from datetime import datetime   app = bottle.app()   session_plugin = bottle_session.SessionPlugin()   redis_plugin = bottle_redis.RedisPlugin()   connection_pool = redis.ConnectionPool(host='localhost', port=6379)   session_plugin.connection_pool = connection_pool   redis_plugin.redisdb = connection_pool   app.install(session_plugin)   app.install(redis_plugin)   @bottle.route('/')   def index(session,rdb):       rdb.incr('visitors')       visitor = rdb.get('visitors')       last_visit = session['visit']       session['visit'] = datetime.now().isoformat()       return 'You are visitor %s, your last visit was on %s'%(visitor,last_visit)   bottle.debug(True)   bottle.run(app=app,host='localhost',port=8888)Acknowledgments---------------Thanks to Marcel Hellkamp and the bottle community for the framework andto Sean M. Collins whose bottle-redis package in bottle-extras served asthe inspiration for this bottle plugin. Thank you to James Burke foryour contributions.</longdescription>
</pkgmetadata>