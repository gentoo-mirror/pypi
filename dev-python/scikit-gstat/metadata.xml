<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SciKit-GStat============Info: scikit-gstat needs Python &gt;= 3.6!.. image:: https://img.shields.io/pypi/v/scikit-gstat?color=green&amp;logo=pypi&amp;logoColor=yellow&amp;style=flat-square   :alt: PyPI    :target: https://pypi.org/project/scikit-gstat.. image:: https://img.shields.io/github/v/release/mmaelicke/scikit-gstat?color=green&amp;logo=github&amp;style=flat-square   :alt: GitHub release (latest by date)    :target: https://github.com/mmaelicke/scikit-gstat.. image:: https://github.com/mmaelicke/scikit-gstat/workflows/Test%20and%20build%20docs/badge.svg    :target: https://github.com/mmaelicke/scikit-gstat/actions.. image:: https://codecov.io/gh/mmaelicke/scikit-gstat/branch/master/graph/badge.svg    :target: https://codecov.io/gh/mmaelicke/scikit-gstat    :alt: Codecov.. image:: https://zenodo.org/badge/98853365.svg   :target: https://zenodo.org/badge/latestdoi/98853365How to cite-----------In case you use SciKit-GStat in other software or scientific publications,please reference this module. There is a `GMD &lt;https://www.geoscientific-model-development.net&gt;`_  publication. Please cite it like:  Mälicke, M.: SciKit-GStat 1.0: a SciPy-flavored geostatistical variogram estimation toolbox written in Python, Geosci. Model Dev., 15, 2505–2532, https://doi.org/10.5194/gmd-15-2505-2022, 2022.The code itself is published and has a DOI. It can be cited as:  Mirko Mälicke, Romain Hugonnet, Helge David Schneider, Sebastian Müller, Egil Möller, &amp; Johan Van de Wauw. (2022). mmaelicke/scikit-gstat: Version 1.0 (v1.0.0). Zenodo. https://doi.org/10.5281/zenodo.5970098Full Documentation------------------The full documentation can be found at: https://mmaelicke.github.io/scikit-gstatDescription-----------SciKit-Gstat is a scipy-styled analysis module for geostatistics. It includestwo base classes ``Variogram`` and ``OrdinaryKriging``. Additionally, variousvariogram classes inheriting from ``Variogram`` are available for solvingdirectional or space-time related tasks.The module makes use of a rich selection of semi-varianceestimators and variogram model functions, while being extensible at the sametime.The estimators include:- matheron- cressie- dowd- genton- entropy- two experimental ones: quantiles, minmaxThe models include:- sperical- exponential- gaussian- cubic- stable- matérnwith all of them in a nugget and no-nugget variation. All the estimator areimplemented using numba's jit decorator. The usage of numba might be subjectto change in future versions.Installation~~~~~~~~~~~~PyPI^^^^.. code-block:: bash  pip install scikit-gstat**Note:** It can happen that the installation of numba or numpy is failing using pip. Especially on Windows systems. Usually, a missing Dll (see eg. `#31 &lt;https://github.com/mmaelicke/scikit-gstat/issues/31&gt;`_) or visual c++ redistributable is the reason. GIT:^^^^.. code-block:: bash  git clone https://github.com/mmaelicke/scikit-gstat.git  cd scikit-gstat  pip install -r requirements.txt  pip install -e .Conda-Forge:^^^^^^^^^^^^From Version `0.5.5` on `scikit-gstat` is also available on conda-forge.Note that for versions `&lt; 1.0` conda-forge will not always be up to date, butfrom `1.0` on, each minor release will be available... code-block:: bash  conda install -c conda-forge scikit-gstatQuickstart----------The `Variogram` class needs at least a list of coordiantes and values.All other attributes are set by default.You can easily set up an example by using the `skgstat.data` sub-module,that includes a growing list of sample data... code-block:: python  import skgstat as skg  # the data functions return a dict of 'sample' and 'description'  coordinates, values = skg.data.pancake(N=300).get('sample')  V = skg.Variogram(coordinates=coordinates, values=values)  print(V).. code-block:: bash  spherical Variogram  -------------------  Estimator:         matheron  Effective Range:   353.64  Sill:              1512.24  Nugget:            0.00All variogram parameters can be changed in place and the class will automaticallyinvalidate and update dependent results and parameters... code-block:: python  V.model = 'exponential'  V.n_lags = 15  V.maxlag = 500  # plot - matplotlib and plotly are available backends  fig = V.plot().. image:: ./example.png</longdescription>
</pkgmetadata>