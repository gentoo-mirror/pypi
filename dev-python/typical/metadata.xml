<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># typical: Python's Typing Toolkit[![image](https://img.shields.io/pypi/v/typical.svg)](https://pypi.org/project/typical/)[![image](https://img.shields.io/pypi/l/typical.svg)](https://pypi.org/project/typical/)[![image](https://img.shields.io/pypi/pyversions/typical.svg)](https://pypi.org/project/typical/)[![image](https://img.shields.io/github/languages/code-size/seandstewart/typical.svg?style=flat)](https://github.com/seandstewart/typical)[![Test &amp; Lint](https://github.com/seandstewart/typical/workflows/Test%20&amp;%20Lint/badge.svg)](https://github.com/seandstewart/typical/actions)[![Coverage](https://codecov.io/gh/seandstewart/typical/branch/master/graph/badge.svg)](https://codecov.io/gh/seandstewart/typical)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)[![Netlify Status](https://api.netlify.com/api/v1/badges/982a0ced-bb7f-4391-87e8-1957071d2f66/deploy-status)](https://app.netlify.com/sites/typical-python/deploys)![How Typical](static/typical.png)## IntroductionTypical is a library devoted to runtime analysis, inference,validation, and enforcement of Python types,[PEP 484](https://www.python.org/dev/peps/pep-0484/) Type Hints, andcustom user-defined data-types.Typical is fully compliant with the following Python Typing PEPs:- [PEP 484 -- Type Hints](https://www.python.org/dev/peps/pep-0484/)- [PEP 563 -- Postponed Evaluation of Annotations](https://www.python.org/dev/peps/pep-0563/)- [PEP 585 -- Type Hinting Generics In Standard Collections](https://www.python.org/dev/peps/pep-0585/)- [PEP 586 -- Literal Types](https://www.python.org/dev/peps/pep-0586/)- [PEP 589 -- TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys](https://www.python.org/dev/peps/pep-0589/)- [PEP 604 -- Allow writing union types as X | Y](https://www.python.org/dev/peps/pep-0604/)It provides a high-level Protocol API, Functional API, and Object API to suit most anyoccasion.## Getting StartedInstallation is as simple as `pip install -U typical`.## HelpThe latest documentation is hosted at[python-typical.org](https://python-typical.org/).&gt; Starting with version 2.0, All documentation is hand-crafted&gt; markdown &amp; versioned documentation can be found at typical's&gt; [Git Repo](https://github.com/seandstewart/typical/tree/master/docs).&gt; (Versioned documentation is still in-the-works directly on our&gt; domain.)## A Typical Use-CaseThe decorator that started it all:### `typic.al(...)````pythonimport typic@typic.aldef hard_math(a: int, b: int, *c: int) -&gt; int:    return a + b + sum(c)hard_math(1, &quot;3&quot;)#&gt; 4@typic.al(strict=True)def strict_math(a: int, b: int, *c: int) -&gt; int:    return a + b + sum(c)strict_math(1, 2, 3, &quot;4&quot;)#&gt; Traceback (most recent call last):#&gt;  ...#&gt; typic.constraints.error.ConstraintValueError: Given value &lt;'4'&gt; fails constraints: (type=int, nullable=False, coerce=False)  ```Typical has both a high-level *Object API* and high-level*Functional API*. In general, any method registered to one API is alsoavailable to the other.### The Protocol API```pythonimport dataclassesfrom typing import Iterableimport typic@typic.constrained(ge=1)class ID(int):    ...@typic.constrained(max_length=280)class Tweet(str):    ...@dataclasses.dataclass # or typing.TypedDict or typing.NamedTuple or annotated class...class Tweeter:    id: ID    tweets: Iterable[Tweet]json = '{&quot;id&quot;:1,&quot;tweets&quot;:[&quot;I don\'t understand Twitter&quot;]}'protocol = typic.protocol(Tweeter)t = protocol.transmute(json)print(t)#&gt; Tweeter(id=1, tweets=[&quot;I don't understand Twitter&quot;])print(protocol.tojson(t))#&gt; '{&quot;id&quot;:1,&quot;tweets&quot;:[&quot;I don\'t understand Twitter&quot;]}'protocol.validate({&quot;id&quot;: 0, &quot;tweets&quot;: []})#&gt; Traceback (most recent call last):#&gt;  ...#&gt; typic.constraints.error.ConstraintValueError: Tweeter.id: value &lt;0&gt; fails constraints: (type=int, nullable=False, coerce=False, ge=1)```### The Functional API```pythonimport dataclassesfrom typing import Iterableimport typic@typic.constrained(ge=1)class ID(int):    ...@typic.constrained(max_length=280)class Tweet(str):    ...@dataclasses.dataclass # or typing.TypedDict or typing.NamedTuple or annotated class...class Tweeter:    id: ID    tweets: Iterable[Tweet]json = '{&quot;id&quot;:1,&quot;tweets&quot;:[&quot;I don\'t understand Twitter&quot;]}'t = typic.transmute(Tweeter, json)print(t)#&gt; Tweeter(id=1, tweets=[&quot;I don't understand Twitter&quot;])print(typic.tojson(t))#&gt; '{&quot;id&quot;:1,&quot;tweets&quot;:[&quot;I don\'t understand Twitter&quot;]}'typic.validate(Tweeter, {&quot;id&quot;: 0, &quot;tweets&quot;: []})#&gt; Traceback (most recent call last):#&gt;  ...#&gt; typic.constraints.error.ConstraintValueError: Tweeter.id: value &lt;0&gt; fails constraints: (type=int, nullable=False, coerce=False, ge=1)```### The Object API```pythonfrom typing import Iterableimport typic@typic.constrained(ge=1)class ID(int):    ...@typic.constrained(max_length=280)class Tweet(str):    ...@typic.klassclass Tweeter:    id: ID    tweets: Iterable[Tweet]    json = '{&quot;id&quot;:1,&quot;tweets&quot;:[&quot;I don\'t understand Twitter&quot;]}'t = Tweeter.transmute(json)print(t)#&gt; Tweeter(id=1, tweets=[&quot;I don't understand Twitter&quot;])print(t.tojson())#&gt; '{&quot;id&quot;:1,&quot;tweets&quot;:[&quot;I don\'t understand Twitter&quot;]}'Tweeter.validate({&quot;id&quot;: 0, &quot;tweets&quot;: []})#&gt; Traceback (most recent call last):#&gt;  ...#&gt; typic.constraints.error.ConstraintValueError: Given value &lt;0&gt; fails constraints: (type=int, nullable=False, coerce=False, ge=1)```## ChangelogSee our[Releases](https://github.com/seandstewart/typical/releases).</longdescription>
</pkgmetadata>