<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># What's the good of that?[![PyPI version](https://badge.fury.io/py/try-parse.svg)](https://pypi.org/project/try-parse/)[![Supported Python versions](https://img.shields.io/pypi/pyversions/try-parse)](https://img.shields.io/pypi/pyversions/try-parse)[![License](https://img.shields.io/pypi/l/try-parse)](https://img.shields.io/pypi/l/try-parse)1. Cast the string representation of simple objects to the desired type.1. Safe type casting. The exception will not be thrown. The function returns status and result.## install```pip install try-parse```## import``` pythonfrom try_parse.utils import ParseUtils```## try_parse_dateParse object to date``` pythonstatus, target = ParseUtils.try_parse_date('2018-11-23')self.assertTrue(status)self.assertIsInstance(target, date)self.assertEqual(target, date(2018, 11, 23))# See format https://docs.python.org/3/library/datetime.html#strftime-strptime-behaviorstatus, target = ParseUtils.try_parse_date('23.11.2018', format='%d.%m.%Y')self.assertTrue(status)self.assertIsInstance(target, date)self.assertEqual(target, date(2018, 11, 23))status, target = ParseUtils.try_parse_date('Invalid')self.assertFalse(status)self.assertIsNone(target)```## try_parse_datetimeParse object to datetime``` pythonstatus, target = ParseUtils.try_parse_datetime('2018-11-23 01:45:59')self.assertTrue(status)self.assertIsInstance(target, datetime)self.assertEqual(target, datetime(2018, 11, 23, 1, 45, 59))# See format https://docs.python.org/3/library/datetime.html#strftime-strptime-behaviorstatus, target = ParseUtils.try_parse_datetime('23.11.2018T01:45:59', format='%d.%m.%YT%H:%M:%S')self.assertTrue(status)self.assertIsInstance(target, datetime)self.assertEqual(target, datetime(2018, 11, 23, 1, 45, 59))status, target = ParseUtils.try_parse_datetime('Invalid')self.assertFalse(status)self.assertIsNone(target)```## try_parse_intParse object to int``` pythonstatus, target = ParseUtils.try_parse_int('19')self.assertTrue(status)self.assertIsInstance(target, int)self.assertEqual(target, 19)status, target = ParseUtils.try_parse_int('Invalid')self.assertFalse(status)self.assertIsNone(target)```## try_parse_floatParse object to float``` pythonstatus, target = ParseUtils.try_parse_float('19.00')self.assertTrue(status)self.assertIsInstance(target, float)self.assertEqual(target, 19.00)status, target = ParseUtils.try_parse_float('Invalid')self.assertFalse(status)self.assertIsNone(target)```## try_parse_decimalParse object to decimal``` pythonstatus, target = ParseUtils.try_parse_decimal('19.00')self.assertTrue(status)self.assertIsInstance(target, Decimal)self.assertEqual(target, Decimal(19))status, target = ParseUtils.try_parse_decimal('Invalid')self.assertFalse(status)self.assertIsNone(target)```## try_parse_boolParse object to bool``` pythonfor p in [&quot;yes&quot;, &quot;true&quot;, &quot;t&quot;, &quot;1&quot;, 1]:    status, target = ParseUtils.try_parse_bool(p)    self.assertTrue(status)    self.assertIsInstance(target, bool)    self.assertTrue(target)status, target = ParseUtils.try_parse_bool('Invalid')self.assertFalse(status)self.assertIsNone(target)```## MypyMypy can be installed using pip:```pip install -U mypy```Testing```mypy ./try_parse/utils.py``` ## Run unittest from console```python -m unittest discover -p &quot;*_tests.py&quot;```</longdescription>
</pkgmetadata>