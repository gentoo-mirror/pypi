<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Batteries-included client to interact with blockchains and smart contracts; used by [`web3cli`](https://github.com/coccoinomane/web3cli) and [crabada.py](https://github.com/coccoinomane/crabada.py).# Features- Easily create a client to interact with EVM-compatible chains- Perform ERC20 operations, using the token name (e.g. USDC) instead of address.- Interact with the most popular chains: Ethereum, Binance, Avalanche, Arbitrum One, zkSync Era, and more to come!- Save gas by setting an upper limit on the base fee.- Need more flexibility? Use directly the underlying web3.py client.# Install```bashpip3 install -U web3client```# ExamplesGet the latest block on both Ethereum, BNB Chain and Avalanche:```pythonfrom web3factory.factory import make_clienteth_block = make_client(&quot;eth&quot;).get_latest_block()bnb_block = make_client(&quot;bnb&quot;).get_latest_block()avax_block = make_client(&quot;avax&quot;).get_latest_block()arb_block = make_client(&quot;arb&quot;).get_latest_block()era_block = make_client(&quot;era&quot;).get_latest_block()```Get the ETH and USDC balances of the Ethereum foundation:```pythonfrom web3factory.factory import make_client, make_erc20_clientaddress = &quot;0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&quot;eth = make_client(&quot;eth&quot;).get_balance_in_eth(address)usdc = make_erc20_client(&quot;USDC&quot;, &quot;eth&quot;).balanceOf(address) / 10**6```Get the BNB and BUSD balances of Binance's hot wallet:```pythonfrom web3factory.factory import make_client, make_erc20_clientaddress = &quot;0x8894e0a0c962cb723c1976a4421c95949be2d4e3&quot;bnb = make_client(&quot;bnb&quot;).get_balance_in_eth(address)busd = make_erc20_client(&quot;BUSD&quot;, &quot;bnb&quot;).balanceOf(address) / 10**18```### More examplesPlease have a look at the [tests folder](./tests) or at the [examples folder](./examples) ðŸ™‚# Custom chains &amp; contractsThe factory module only allows to interact with a small list of chains andcontracts.To interact with an arbitrary EVM chain or smart contract, instantiate a customclient using the [`BaseClient`](./src/web3client/base_client.py) class.For a more structured approach, use `web3core`, a sub-packageof [`web3cli`](./src/web3cli/) that comes with many preloaded chains, and allowsto import chains and smart contracts dynamically.# It doesn't work ðŸ˜¡Don't panic! Instead...1. Please check if your issue is listed in the [Issues tab](https://github.com/coccoinomane/web3client/issues).2. If not, consider [writing a new issue](https://github.com/coccoinomane/web3client/issues/new) ðŸ™‚# ContributingAll contributions are welcome! To start improving `web3client`, please refer to our [__contribution guide__](./CONTRIBUTING.md).</longdescription>
</pkgmetadata>