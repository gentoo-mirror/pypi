<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>dbschema========|Pypi| |Build Status| |codecov| |MIT licensed|``dbschema`` is a tool to run MySQL or PostgreSQL migrationsautomatically. Using a table, it keeps a state of previous migrations toavoid duplicates.Features:-  Support for MySQL and PostgreSQL-  Optional pre and post-migration queries (for example to update   privileges)-  Multiple migrations in multiple databases can be processed as one.Installation------------Install ``dbschema``~~~~~~~~~~~~~~~~~~~~.. code:: bash   # Install required packages   apt-get update   apt-get install --yes libpq-dev gcc python3-dev   pip3 install dbschemaCreate a config file~~~~~~~~~~~~~~~~~~~~Create the file ``~/.dbschema.yml`` and add your databasesconfiguration. `See example &lt;dbschema_sample.yml&gt;`__Create migrations table~~~~~~~~~~~~~~~~~~~~~~~``dbschema`` uses a table called ``migrations_applied`` to keep track ofmigrations already applied to avoid duplication. See the schema for`MySQL &lt;schema/mysql.sql&gt;`__ or `PostgreSQL &lt;schema/postgresql.sql&gt;`__.Migrations folder structure---------------------------For each database, you need to have a migration path (setting ``path``in the migration file).Within that path you need to create one folder per migration. Thisfolder must contain a file called ``up.sql`` with the SQL queries andoptionally a file called ``down.sql`` for rollbacks.::   /path/to/migrations/db1/   |-- migration1/   |   |-- up.sql   |   |-- down.sql   |-- migration2/   |   |-- up.sql   |...   /path/to/migrations/db2/   |-- migration1/   |   |-- up.sql   |-- migration2/   |   |-- up.sql   |   |-- down.sql   |...Usage-----Apply pending migrations~~~~~~~~~~~~~~~~~~~~~~~~.. code:: bash   dbschema   # or to specify a config file path   dbschema --config /path/to/config.yml   # or to migrate only a specific database   dbschema --tag db1Rollback~~~~~~~~.. code:: bash   dbschema --tag db1 --rollback migration1Example-------.. code:: bash   $ dbschema     * Applying migrations for db1 (`test` on postgresql)       -&gt; Migration `migration1` applied       -&gt; Migration `migration2` applied       -&gt; Migration `migration3` applied     * Migrations applied     * Applying migrations for db2 (`test` on mysql)       -&gt; Migration `migration1` applied       -&gt; Migration `migration2` applied       -&gt; Migration `migration3` applied     * Migrations applied   $   $ dbschema --tag db2 --rollback migration1     * Rolling back mysql -&gt; `migration1`       -&gt; Migration `migration1` has been rolled back   $.. |Pypi| image:: https://img.shields.io/pypi/v/dbschema.svg   :target: https://pypi.org/project/dbschema.. |Build Status| image:: https://travis-ci.org/gabfl/dbschema.svg?branch=master   :target: https://travis-ci.org/gabfl/dbschema.. |codecov| image:: https://codecov.io/gh/gabfl/dbschema/branch/master/graph/badge.svg   :target: https://codecov.io/gh/gabfl/dbschema.. |MIT licensed| image:: https://img.shields.io/badge/license-MIT-green.svg   :target: https://raw.githubusercontent.com/gabfl/dbschema/master/LICENSE</longdescription>
</pkgmetadata>