<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># refdatatypesPyton basic datatypes as a references. Solve problems with static class immutable datatypes.## Installation```pythonpip3 install refdatatypes```## Problem```pythonclass A:    static = 1class B(A):    passprint(f&quot;int {A.static}&quot;)  # get 1 correctlyprint(f&quot;int {B.static}&quot;)  # get 1 correctlyA.static = 5print(f&quot;int {A.static}&quot;)  # get 5 correctlyprint(f&quot;int {B.static}&quot;)  # get 5 correctlyB.static = 6print(f&quot;int {A.static}&quot;)  # expected 6, but get 5 incorrectlyprint(f&quot;int {B.static}&quot;)  # get 6 correctlyA.static = 7print(f&quot;int {A.static}&quot;)  # get 7 correctlyprint(f&quot;int {B.static}&quot;)  # expected 7, but get unchanged 6, incorrectly```## Solution```pythonfrom refdatatypes.refint import RefIntclass AAA:    static = RefInt(1)class BBB(AAA):    passprint(f&quot;refint {AAA.static.value}&quot;)  # get 1 correctlyprint(f&quot;refint {BBB.static.value}&quot;)  # get 1 correctlyAAA.static.value = 5print(f&quot;refint {AAA.static.value}&quot;)  # get 5 correctlyprint(f&quot;refint {BBB.static.value}&quot;)  # get 5 correctlyBBB.static.value = 6print(f&quot;refint {AAA.static.value}&quot;)  # get 6 correctlyprint(f&quot;refint {BBB.static.value}&quot;)  # get 6 correctlyAAA.static.value = 7print(f&quot;refint {AAA.static.value}&quot;)  # get 7 correctlyprint(f&quot;refint {BBB.static.value}&quot;)  # get 7 correctly```More details you can find in included examples [static_class_attribute_problem.py](https://gitlab.com/alda78/refdatatypes/-/blob/main/examples/static_class_attribute_problem.py) and [static_class_attribute_solution.py](https://gitlab.com/alda78/refdatatypes/-/blob/main/examples/static_class_attribute_solution.py) .## Safe datatypes`safedatatypes` is simple set of function and classes which enablesyou to work safely with base python datatypes without error falls duringconvert or item access.### example```pythonfrom refdatatypes.safedatatypes import safe_intmy_int = safe_int(&quot;None&quot;)  # no errorprint(my_int)  # prints: `0````### example 2```pythonfrom refdatatypes.safedatatypes import SafeDictmy_dict = SafeDict()my_dict[&quot;a&quot;] = 1print(my_dict[&quot;a&quot;])  # prints: `1` print(my_dict[&quot;b&quot;])  # prints: `None` with no errorprint(my_dict)  # prints: `{'a': 1}`my_dict = SafeDict({&quot;a&quot;: 1}, default_value=-1, autoset=True)print(my_dict[&quot;a&quot;])  # prints: `1` print(my_dict[&quot;b&quot;])  # prints: `-1` with no errorprint(my_dict)  # prints: `{'a': 1, 'b': -1}````</longdescription>
</pkgmetadata>