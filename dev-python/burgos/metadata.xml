<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Session### Usage:```pythonfrom burgos.session import Sessionsession = Session(database_auth, login_table)```database_auth: json/dict```json{    &quot;host&quot;: &quot;host ip address or domain&quot;,    &quot;database&quot;: &quot;database name&quot;,    &quot;user&quot;: &quot;username&quot;,    &quot;password&quot;: &quot;user password&quot;}```login_table: string```&quot;table_name_which_contains_login_data&quot;```### Built-in methods##### database.reconnectDatabase()- reconnects to the database##### getConnection(ip)- ip = string containing an ip address- returns the connection matching the selected ip address- if there is no connection with that ip, returns None##### login(user, password, ip)- user = string containing the username, email or cpf as login method- password = string containg the password- ip = string containing an ip address- if &quot;user&quot; is number only, it will be checked as cpf- if &quot;user&quot; has an &quot;@&quot;, it will be checked as an email- if &quot;user&quot; is neither, it will be checked as an username- if there is a row in database.login_table that matches with this user and password, a Connection will be instanciated and the user id will be returned# Mysql### Usage:```pythonfrom burgos.mysql_handler import Mysqldatabase = Mysql(login_table)```login_table: string```&quot;table_name_which_contains_login_data&quot;```### Built-in methods##### connect(auth:dict)- auth = dictionary containing authentication data (same as session's database_auth)- connects to the database and must be called before any other method (session already calls this in it's constructor)##### disconnect()- disconnects from the database##### run(sql)- sql = string containing SQL code- sql code will be executed and commited into the database- if sql first word, lowered, is equal to &quot;select&quot;, this method will return a list containing the selected rows##### fetchTable(table, rows = 0, where = [], reversed = None, ordered = None)- table = string containing the table name which should be selected data from- rows = int number that means the number of rows that should be selected. Optional (default: all rows)- where = list containing strings which are the column and value. Ex.: where = [&quot;username&quot;, &quot;nandobfer&quot;]. Optional.- reversed = boolean indicating if the where query should be reversed or not. Optional.- ordered = string containing the &quot;ORDER BY&quot; information. Ex. ordered = &quot;id&quot; / ordered = &quot;datetime DESC&quot;- Returns a list containing another list for each row fetched. Returns an empty list if there was none.</longdescription>
</pkgmetadata>