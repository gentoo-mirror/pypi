<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- markdownlint-disable MD033 MD041 --&gt;&lt;div align=&quot;center&quot;&gt;[![githubkit](https://socialify.git.ci/yanyongyu/githubkit/image?description=1&amp;descriptionEditable=%E2%9C%A8%20GitHub%20SDK%20for%20Python%20%E2%9C%A8&amp;font=Bitter&amp;language=1&amp;pattern=Circuit%20Board&amp;theme=Light)](https://github.com/yanyongyu/githubkit)&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://raw.githubusercontent.com/yanyongyu/githubkit/master/LICENSE&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/license/yanyongyu/githubkit&quot; alt=&quot;license&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/githubkit&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/githubkit&quot; alt=&quot;pypi&quot;&gt;  &lt;/a&gt;  &lt;img src=&quot;https://img.shields.io/badge/python-3.8+-blue&quot; alt=&quot;python&quot;&gt;  &lt;a href=&quot;https://results.pre-commit.ci/latest/github/yanyongyu/githubkit/master&quot;&gt;    &lt;img src=&quot;https://results.pre-commit.ci/badge/github/yanyongyu/githubkit/master.svg&quot; alt=&quot;pre-commit&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;div align=&quot;center&quot;&gt;&lt;!-- markdownlint-capture --&gt;&lt;!-- markdownlint-disable MD036 --&gt;_✨ The modern, all-batteries-included GitHub SDK for Python ✨__✨ Support both **sync** and **async** calls, **fully typed** ✨__✨ Always up to date, like octokit ✨_&lt;!-- markdownlint-restore --&gt;&lt;/div&gt;## Installation```bashpip install githubkit# or, use poetrypoetry add githubkit# or, use pdmpdm add githubkit```if you want to auth as github app, extra dependencies are required:```bashpip install githubkit[auth-app]# or, use poetrypoetry add githubkit[auth-app]# or, use pdmpdm add githubkit[auth-app]```if you want to mix sync and async calls in oauth device callback, extra dependencies are required:```bashpip install githubkit[auth-oauth-device]# or, use poetrypoetry add githubkit[auth-oauth-device]# or, use pdmpdm add githubkit[auth-oauth-device]```## Usage### AuthenticationInitialize a github client with no authentication:```pythonfrom githubkit import GitHub, UnauthAuthStrategygithub = GitHub()# or, use UnauthAuthStrategygithub = GitHub(UnauthAuthStrategy())```or using PAT (Token):```pythonfrom githubkit import GitHub, TokenAuthStrategygithub = GitHub(&quot;&lt;your_token_here&gt;&quot;)# or, use TokenAuthStrategygithub = GitHub(TokenAuthStrategy(&quot;&lt;your_token_here&gt;&quot;))```or using GitHub APP authentication:```pythonfrom githubkit import GitHub, AppAuthStrategygithub = GitHub(    AppAuthStrategy(        &quot;&lt;app_id&gt;&quot;, &quot;&lt;private_key&gt;&quot;, &quot;&lt;optional_client_id&gt;&quot;, &quot;&lt;optional_client_secret&gt;&quot;    ))```or using GitHub APP Installation authentication:```pythonfrom githubkit import GitHub, AppInstallationAuthStrategygithub = GitHub(    AppInstallationAuthStrategy(        &quot;&lt;app_id&gt;&quot;, &quot;&lt;private_key&gt;&quot;, installation_id, &quot;&lt;optional_client_id&gt;&quot;, &quot;&lt;optional_client_secret&gt;&quot;,    ))```or using OAuth APP authentication:```pythonfrom githubkit import GitHub, OAuthAppAuthStrategygithub = GitHub(OAuthAppAuthStrategy(&quot;&lt;client_id_here&gt;&quot;, &quot;&lt;client_secret_here&gt;&quot;))```or using GitHub APP / OAuth APP web flow authentication:```pythonfrom githubkit import GitHub, OAuthWebAuthStrategygithub = GitHub(    OAuthWebAuthStrategy(        &quot;&lt;client_id_here&gt;&quot;, &quot;&lt;client_secret_here&gt;&quot;, &quot;&lt;web_flow_exchange_code_here&gt;&quot;    ))```or using GitHub Action authentication:```pythonfrom githubkit import GitHub, ActionAuthStrategygithub = GitHub(ActionAuthStrategy())```### Calling Rest API&gt; APIs are fully typed. Typing in the following examples is just for reference only.Simple sync call:```pythonfrom githubkit import Responsefrom githubkit.rest import FullRepositoryresp: Response[FullRepository] = github.rest.repos.get(owner=&quot;owner&quot;, repo=&quot;repo&quot;)repo: FullRepository = resp.parsed_data```Simple async call:```pythonfrom githubkit import Responsefrom githubkit.rest import FullRepositoryresp: Response[FullRepository] = await github.rest.repos.async_get(owner=&quot;owner&quot;, repo=&quot;repo&quot;)repo: FullRepository = resp.parsed_data```Call API with context (reusing client):```pythonfrom githubkit import Responsefrom githubkit.rest import FullRepositorywith GitHub(&quot;&lt;your_token_here&gt;&quot;) as github:    resp: Response[FullRepository] = github.rest.repos.get(owner=&quot;owner&quot;, repo=&quot;repo&quot;)    repo: FullRepository = resp.parsed_data``````pythonfrom githubkit import Responsefrom githubkit.rest import FullRepositoryasync with GitHub(&quot;&lt;your_token_here&gt;&quot;) as github:    resp: Response[FullRepository] = await github.rest.repos.async_get(owner=&quot;owner&quot;, repo=&quot;repo&quot;)    repo: FullRepository = resp.parsed_data```### PaginationPagination type checking is also supported:&gt; Typing is tested with Pylance (Pyright).```pythonfrom githubkit.rest import Issuefor issue in github.paginate(    github.rest.issues.list_for_repo, owner=&quot;owner&quot;, repo=&quot;repo&quot;, state=&quot;open&quot;):    issue: Issue    print(issue.number)``````pythonfrom githubkit.rest import Issueasync for issue in github.paginate(    github.rest.issues.async_list_for_repo, owner=&quot;owner&quot;, repo=&quot;repo&quot;, state=&quot;open&quot;):    issue: Issue    print(issue.number)```complex pagination with custom map function (some api returns data in a nested field):```pythonasync for accessible_repo in github.paginate(    github.rest.apps.async_list_installation_repos_for_authenticated_user,    map_func=lambda r: r.parsed_data.repositories,    installation_id=1,):    accessible_repo: Repository    print(accessible_repo.full_name)```### Calling GraphQL APISimple sync call:```pythondata: Dict[str, Any] = github.graphql(query, variables={&quot;foo&quot;: &quot;bar&quot;})```Simple async call:```pythondata: Dict[str, Any] = github.async_graphql(query, variables={&quot;foo&quot;: &quot;bar&quot;})```### Webhook VerificationSimple webhook payload verification:```pythonfrom githubkit.webhooks import verifyvalid: bool = verify(secret, request.body, request.headers[&quot;X-Hub-Signature-256&quot;])```Sign the webhook payload manually:```pythonfrom githubkit.webhooks import signsignature: str = sign(secret, payload, method=&quot;sha256&quot;)```### Webhook ParsingParse the payload with event name:```pythonfrom githubkit.webhooks import parse, WebhookEventevent: WebhookEvent = parse(request.headers[&quot;X-GitHub-Event&quot;], request.body)```Parse the payload without event name (may cost longer time):```pythonfrom githubkit.webhooks import parse_without_name, WebhookEventevent: WebhookEvent = parse_without_name(request.body)```Parse dict like payload:```pythonfrom githubkit.webhooks import parse_obj, parse_obj_without_name, WebhookEventevent: WebhookEvent = parse_obj(request.headers[&quot;X-GitHub-Event&quot;], request.json())event: WebhookEvent = parse_obj_without_name(request.json())```### Switch between AuthStrategyYou can change the auth strategy and get a new client simplely using `with_auth`.Change from `AppAuthStrategy` to `AppInstallationAuthStrategy`:```pythonfrom githubkit import GitHub, AppAuthStrategygithub = GitHub(AppAuthStrategy(&quot;&lt;app_id&gt;&quot;, &quot;&lt;private_key&gt;&quot;))installation_github = github.with_auth(    github.auth.as_installation(installation_id))```Change from `OAuthAppAuthStrategy` to `OAuthWebAuthStrategy`:```pythonfrom githubkit import GitHub, OAuthAppAuthStrategygithub = GitHub(OAuthAppAuthStrategy(&quot;&lt;client_id&gt;&quot;, &quot;&lt;client_secret&gt;&quot;))user_github = github.with_auth(github.auth.as_web_user(&quot;&lt;code&gt;&quot;))```## DevelopmentOpen in Codespaces (Dev Container):[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://github.com/codespaces/new?hide_repo_select=true&amp;ref=master&amp;repo=512138996)Generate latest models and apis:```bashpython -m codegen &amp;&amp; isort . &amp;&amp; black .```</longdescription>
</pkgmetadata>