<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python JSONPath Next-Generation |Build Status| |PyPI|=====================================================A final implementation of JSONPath for Python that aims to be standard compliant, including arithmeticand binary comparison operators, as defined in the original `JSONPath proposal`_.This packages merges both `jsonpath-rw`_ and `jsonpath-rw-ext`_ andprovides several AST API enhancements, such as the ability to update or removes nodes in the tree.About-----This library provides a robust and significantly extended implementationof JSONPath for Python. It is tested with CPython 2.6, 2.7 &amp; 3.x.This library differs from other JSONPath implementations in that it is afull *language* implementation, meaning the JSONPath expressions arefirst class objects, easy to analyze, transform, parse, print, andextend.Quick Start-----------To install, use pip:.. code:: bash    $ pip install --upgrade jsonpath-ngUsage-----Basic examples:.. code:: python    $ python    &gt;&gt;&gt; from jsonpath_ng import jsonpath, parse    # A robust parser, not just a regex. (Makes powerful extensions possible; see below)    &gt;&gt;&gt; jsonpath_expr = parse('foo[*].baz')    # Extracting values is easy    &gt;&gt;&gt; [match.value for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]    [1, 2]    # Matches remember where they came from    &gt;&gt;&gt; [str(match.full_path) for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]    ['foo.[0].baz', 'foo.[1].baz']    # And this can be useful for automatically providing ids for bits of data that do not have them (currently a global switch)    &gt;&gt;&gt; jsonpath.auto_id_field = 'id'    &gt;&gt;&gt; [match.value for match in parse('foo[*].id').find({'foo': [{'id': 'bizzle'}, {'baz': 3}]})]    ['foo.bizzle', 'foo.[1]']    # A handy extension: named operators like `parent`    &gt;&gt;&gt; [match.value for match in parse('a.*.b.`parent`.c').find({'a': {'x': {'b': 1, 'c': 'number one'}, 'y': {'b': 2, 'c': 'number two'}}})]    ['number two', 'number one']    # You can also build expressions directly quite easily    &gt;&gt;&gt; from jsonpath_ng.jsonpath import Fields    &gt;&gt;&gt; from jsonpath_ng.jsonpath import Slice    &gt;&gt;&gt; jsonpath_expr_direct = Fields('foo').child(Slice('*')).child(Fields('baz'))  # This is equivalentUsing the extended parser:.. code:: python  $ python  &gt;&gt;&gt; from jsonpath_ng.ext import parse  # A robust parser, not just a regex. (Makes powerful extensions possible; see below)  &gt;&gt;&gt; jsonpath_expr = parse('foo[*].baz')JSONPath Syntax---------------The JSONPath syntax supported by this library includes some additionalfeatures and omits some problematic features (those that make itunportable). In particular, some new operators such as ``|`` and``where`` are available, and parentheses are used for grouping not forcallbacks into Python, since with these changes the language is nottrivially associative. Also, fields may be quoted whether or not theyare contained in brackets.Atomic expressions:+-----------------------+---------------------------------------------------------------------------------------------+| Syntax                | Meaning                                                                                     |+=======================+=============================================================================================+| ``$``                 | The root object                                                                             |+-----------------------+---------------------------------------------------------------------------------------------+| ```this```            | The &quot;current&quot; object.                                                                       |+-----------------------+---------------------------------------------------------------------------------------------+| ```foo```             | More generally, this syntax allows &quot;named operators&quot; to extend JSONPath is arbitrary ways   |+-----------------------+---------------------------------------------------------------------------------------------+| *field*               | Specified field(s), described below                                                         |+-----------------------+---------------------------------------------------------------------------------------------+| ``[`` *field* ``]``   | Same as *field*                                                                             |+-----------------------+---------------------------------------------------------------------------------------------+| ``[`` *idx* ``]``     | Array access, described below (this is always unambiguous with field access)                |+-----------------------+---------------------------------------------------------------------------------------------+Jsonpath operators:+-------------------------------------+------------------------------------------------------------------------------------+| Syntax                              | Meaning                                                                            |+=====================================+====================================================================================+| *jsonpath1* ``.`` *jsonpath2*       | All nodes matched by *jsonpath2* starting at any node matching *jsonpath1*         |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath* ``[`` *whatever* ``]``   | Same as *jsonpath*\ ``.``\ *whatever*                                              |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath1* ``..`` *jsonpath2*      | All nodes matched by *jsonpath2* that descend from any node matching *jsonpath1*   |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath1* ``where`` *jsonpath2*   | Any nodes matching *jsonpath1* with a child matching *jsonpath2*                   |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath1* ``|`` *jsonpath2*       | Any nodes matching the union of *jsonpath1* and *jsonpath2*                        |+-------------------------------------+------------------------------------------------------------------------------------+Field specifiers ( *field* ):+-------------------------+-------------------------------------------------------------------------------------+| Syntax                  | Meaning                                                                             |+=========================+=====================================================================================+| ``fieldname``           | the field ``fieldname`` (from the &quot;current&quot; object)                                 |+-------------------------+-------------------------------------------------------------------------------------+| ``&quot;fieldname&quot;``         | same as above, for allowing special characters in the fieldname                     |+-------------------------+-------------------------------------------------------------------------------------+| ``'fieldname'``         | ditto                                                                               |+-------------------------+-------------------------------------------------------------------------------------+| ``*``                   | any field                                                                           |+-------------------------+-------------------------------------------------------------------------------------+| *field* ``,`` *field*   | either of the named fields (you can always build equivalent jsonpath using ``|``)   |+-------------------------+-------------------------------------------------------------------------------------+Array specifiers ( *idx* ):+-----------------------------------------+---------------------------------------------------------------------------------------+| Syntax                                  | Meaning                                                                               |+=========================================+=======================================================================================+| ``[``\ *n*\ ``]``                       | array index (may be comma-separated list)                                             |+-----------------------------------------+---------------------------------------------------------------------------------------+| ``[``\ *start*\ ``?:``\ *end*\ ``?]``   | array slicing (note that *step* is unimplemented only due to lack of need thus far)   |+-----------------------------------------+---------------------------------------------------------------------------------------+| ``[*]``                                 | any array index                                                                       |+-----------------------------------------+---------------------------------------------------------------------------------------+Programmatic JSONPath---------------------If you are programming in Python and would like a more robust way tocreate JSONPath expressions that does not depend on a parser, it is veryeasy to do so directly, and here are some examples:-  ``Root()``-  ``Slice(start=0, end=None, step=None)``-  ``Fields('foo', 'bar')``-  ``Index(42)``-  ``Child(Fields('foo'), Index(42))``-  ``Where(Slice(), Fields('subfield'))``-  ``Descendants(jsonpath, jsonpath)``Extras-------  *Path data*: The result of ``JsonPath.find`` provide detailed context   and path data so it is easy to traverse to parent objects, print full   paths to pieces of data, and generate automatic ids.-  *Automatic Ids*: If you set ``jsonpath_ng.auto_id_field`` to a value   other than None, then for any piece of data missing that field, it   will be replaced by the JSONPath to it, giving automatic unique ids   to any piece of data. These ids will take into account any ids   already present as well.-  *Named operators*: Instead of using ``@`` to reference the currently   object, this library uses ```this```. In general, any string   contained in backquotes can be made to be a new operator, currently   by extending the library.Extensions----------+--------------+----------------------------------------------+| name         | Example                                      |+==============+==============================================+| len          | - $.objects.`len`                            |+--------------+----------------------------------------------+| sub          | - $.field.`sub(/foo\\\\+(.*)/, \\\\1)`       |+--------------+----------------------------------------------+| split        | - $.field.`split(+, 2, -1)`                  ||              | - $.field.`split(sep, segement, maxsplit)`   |+--------------+----------------------------------------------+| sorted       | - $.objects.`sorted`                         ||              | - $.objects[\\some_field]                    ||              | - $.objects[\\some_field,/other_field]       |+--------------+----------------------------------------------+| filter       | - $.objects[?(@some_field &gt; 5)]              ||              | - $.objects[?some_field = &quot;foobar&quot;)]         ||              | - $.objects[?some_field =~ &quot;foobar&quot;)]        ||              | - $.objects[?some_field &gt; 5 &amp; other &lt; 2)]    |+--------------+----------------------------------------------+| arithmetic   | - $.foo + &quot;_&quot; + $.bar                        || (-+*/)       | - $.foo * 12                                 ||              | - $.objects[*].cow + $.objects[*].cat        |+--------------+----------------------------------------------+About arithmetic and string---------------------------Operations are done with python operators and allows types that pythonallows, and return [] if the operation can be done due to incompatible types.When operators are used, a jsonpath must be be fully defined otherwisejsonpath-rw-ext can't known if the expression is a string or a jsonpath field,in this case it will choice string as type.Example with data::    {        'cow': 'foo',        'fish': 'bar'    }| **cow + fish** returns **cowfish**| **$.cow + $.fish** returns **foobar**| **$.cow + &quot;_&quot; + $.fish** returns **foo_bar**| **$.cow + &quot;_&quot; + fish** returns **foo_fish**About arithmetic and list-------------------------Arithmetic can be used against two lists if they have the same size.Example with data::    {'objects': [        {'cow': 2, 'cat': 3},        {'cow': 4, 'cat': 6}    ]}| **$.objects[\*].cow + $.objects[\*].cat** returns **[6, 9]**More to explore---------------There are way too many JSONPath implementations out there to discuss.Some are robust, some are toy projects that still work fine, some areexercises. There will undoubtedly be many more. This one is made for usein released, maintained code, and in particular for programmatic accessto the abstract syntax and extension. But JSONPath at its simplest justisn't that complicated, so you can probably use any of themsuccessfully. Why not this one?The original proposal, as far as I know:-  `JSONPath - XPath for   JSON &lt;http://goessner.net/articles/JSONPath/&gt;`__ by Stefan Goessner.Other examples--------------Loading json data from file.. code:: python    import json    d = json.loads('{&quot;foo&quot;: [{&quot;baz&quot;: 1}, {&quot;baz&quot;: 2}]}')    # or    with open('myfile.json') as f:        d = json.load(f)Special note about PLY and docstrings-------------------------------------The main parsing toolkit underlying this library,`PLY &lt;https://github.com/dabeaz/ply&gt;`__, does not work with docstringsremoved. For example, ``PYTHONOPTIMIZE=2`` and ``python -OO`` will bothcause a failure.Contributors------------This package is authored and maintained by:-  `Kenn Knowles &lt;https://github.com/kennknowles&gt;`__   (`@kennknowles &lt;https://twitter.com/KennKnowles&gt;`__)-  `Tomas Aparicio &lt;https://github.com/h2non&gt;`with the help of patches submitted by `these contributors &lt;https://github.com/kennknowles/python-jsonpath-ng/graphs/contributors&gt;`__.Copyright and License---------------------Copyright 2013 - Kenneth KnowlesCopyright 2017 - Tomas AparicioLicensed under the Apache License, Version 2.0 (the &quot;License&quot;); you maynot use this file except in compliance with the License. You may obtaina copy of the License at::    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License... _`JSONPath proposal`: http://goessner.net/articles/JsonPath/.. _`jsonpath-rw`: https://github.com/kennknowles/python-jsonpath-rw.. _`jsonpath-rw-ext`: https://pypi.python.org/pypi/jsonpath-rw-ext/.. |PyPi downloads| image:: https://pypip.in/d/jsonpath-ng/badge.png   :target: https://pypi.python.org/pypi/jsonpath-ng.. |Build Status| image:: https://travis-ci.org/h2non/jsonpath-ng.svg?branch=master   :target: https://travis-ci.org/h2non/jsonpath-ng.. |PyPI| image:: https://img.shields.io/pypi/v/jsonpath-ng.svg?maxAge=2592000?style=flat-square   :target: https://pypi.python.org/pypi/jsonpath-ng.. |Documentation Status| image:: https://img.shields.io/badge/docs-latest-green.svg?style=flat   :target: http://jsonpath-ng.readthedocs.io/en/latest/?badge=latest</longdescription>
</pkgmetadata>