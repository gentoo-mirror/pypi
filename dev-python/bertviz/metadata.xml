<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;    BertViz&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt; Visualize Attention in NLP Models&lt;/h3&gt;&lt;h3 align=&quot;center&quot;&gt;    &lt;a href=&quot;#-quick-tour&quot;&gt;Quick Tour&lt;/a&gt; &amp;bull;    &lt;a href=&quot;#%EF%B8%8F-getting-started&quot;&gt;Getting Started&lt;/a&gt; &amp;bull;    &lt;a href=&quot;https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing&quot;&gt;Colab Tutorial&lt;/a&gt; &amp;bull;    &lt;a href=&quot;https://towardsdatascience.com/deconstructing-bert-part-2-visualizing-the-inner-workings-of-attention-60a16d86b5c1&quot;&gt;Blog&lt;/a&gt; &amp;bull;    &lt;a href=&quot;https://www.aclweb.org/anthology/P19-3007.pdf&quot;&gt;Paper&lt;/a&gt; &amp;bull;    &lt;a href=&quot;#-paper&quot;&gt;Citation&lt;/a&gt;&lt;/h3&gt;BertViz is an interactive tool for visualizing attention in [Transformer](https://jalammar.github.io/illustrated-transformer/) language models such as BERT, GPT2, or T5. It can be run inside a Jupyter or Colab notebook through a simple Python API that supports most [Huggingface models](https://huggingface.co/models). BertViz extends the   [Tensor2Tensor visualization tool](https://github.com/tensorflow/tensor2tensor/tree/master/tensor2tensor/visualization)    by [Llion Jones](https://medium.com/@llionj), providing multiple views that each offer a unique lens into the attention mechanism.For updates on BertViz and related projects, feel free to follow me on [Twitter](https://twitter.com/jesse_vig).## üöÄ Quick Tour### Head ViewThe *head view* visualizes attention for one or more attention heads in the same  layer. It is based on the excellent [Tensor2Tensor visualization tool](https://github.com/tensorflow/tensor2tensor/tree/master/tensor2tensor/visualization) by [Llion Jones](https://medium.com/@llionj). üïπ Try out the head view in the [&lt;b&gt;&lt;u&gt;Interactive Colab Tutorial&lt;/u&gt;&lt;/b&gt;](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) (all visualizations pre-loaded).&lt;p&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/jessevig/bertviz/master/images/head-view.gif&quot; width=&quot;425&quot;/&gt;&lt;/p&gt;### Model View The *model view* shows a bird's-eye view of attention across all layers and heads.üïπ Try out the model view in the [&lt;b&gt;&lt;u&gt;Interactive Colab Tutorial&lt;/u&gt;&lt;/b&gt;](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) (all visualizations pre-loaded).![model view](https://raw.githubusercontent.com/jessevig/bertviz/master/images/model-view-noscroll.gif)### Neuron View The *neuron view* visualizes individual neurons in the query and key vectors and shows how they are used to compute attention.üïπ Try out the neuron view in the [&lt;b&gt;&lt;u&gt;Interactive Colab Tutorial&lt;/u&gt;&lt;/b&gt;](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) (all visualizations pre-loaded).![neuron view](https://raw.githubusercontent.com/jessevig/bertviz/master/images/neuron-view-dark.gif)## ‚ö°Ô∏è Getting Started### Running BertViz in a Jupyter NotebookFrom the command line:```bashpip install bertviz```You must also have Jupyter Notebook and ipywidgets installed:```bashpip install jupyterlabpip install ipywidgets```(If you run into any issues installing Jupyter or ipywidgets, consult the documentation [here](https://jupyter.org/install) and [here](https://ipywidgets.readthedocs.io/en/stable/user_install.html).)To create a new Jupyter notebook, simply run:```bashjupyter notebook```Then click `New` and select `Python 3 (ipykernel)` if prompted.### Running BertViz in ColabTo run in [Colab](https://colab.research.google.com/), simply add the following cell at the beginning of your Colab notebook:```!pip install bertviz```### Sample codeRun the following code to load the `xtremedistil-l12-h384-uncased` model and display it in the model view: ```pythonfrom transformers import AutoTokenizer, AutoModel, utilsfrom bertviz import model_viewutils.logging.set_verbosity_error()  # Suppress standard warningsmodel_name = &quot;microsoft/xtremedistil-l12-h384-uncased&quot;  # Find popular HuggingFace models here: https://huggingface.co/modelsinput_text = &quot;The cat sat on the mat&quot;  model = AutoModel.from_pretrained(model_name, output_attentions=True)  # Configure model to return attention valuestokenizer = AutoTokenizer.from_pretrained(model_name)inputs = tokenizer.encode(input_text, return_tensors='pt')  # Tokenize input textoutputs = model(inputs)  # Run modelattention = outputs[-1]  # Retrieve attention from model outputstokens = tokenizer.convert_ids_to_tokens(inputs[0])  # Convert input ids to token stringsmodel_view(attention, tokens)  # Display model view```The visualization may take a few seconds to load. Feel free to experiment with different input texts and [models](https://huggingface.co/models). See [Documentation](#-documentation) for additional use cases and examples, e.g., encoder-decoder models.#### Running sample notebooksYou may also run any of the sample [notebooks](notebooks/) included with BertViz:```bashgit clone --depth 1 git@github.com:jessevig/bertviz.gitcd bertviz/notebooksjupyter notebook```## üïπ Interactive TutorialCheck out the [&lt;b&gt;&lt;u&gt;Interactive Colab Tutorial&lt;/u&gt;&lt;/b&gt;](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) to learn more about BertViz and try out the tool. &lt;b&gt;Note&lt;/b&gt;: all visualizations are pre-loaded, so there is no need to execute any cells.[![Tutorial](https://raw.githubusercontent.com/jessevig/bertviz/master/images/tutorial-screenshots.jpg)](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing)## üìñ Documentation### Table of contents- [Self-attention models (BERT, GPT-2, etc.)](#self-attention-models-bert-gpt-2-etc)  * [Head and Model Views](#head-and-model-views)  * [Neuron View](#neuron-view-1)- [Encoder-decoder models (BART, T5, etc.)](#encoder-decoder-models-bart-t5-etc)- [Installing from source](#installing-from-source)- [Additional options](#additional-options)  * [Dark / light mode](#dark--light-mode)  * [Filtering layers](#filtering-layers)  * [Setting default layer/head(s)](#setting-default-layer-head-s)  * [Visualizing sentence pairs](#visualizing-sentence-pairs)  * [Obtain HTML representations](#obtain-HTML-representations)  * [Non-Huggingface models](#non-huggingface-models)### Self-attention models (BERT, GPT-2, etc.)#### Head and Model ViewsFirst load a Huggingface model, either a pre-trained model as shown below, or your own fine-tuned model. Be sure to set `output_attentions=True`.```pythonfrom transformers import AutoTokenizer, AutoModel, utilsutils.logging.set_verbosity_error()  # Suppress standard warningstokenizer = AutoTokenizer.from_pretrained(&quot;bert-base-uncased&quot;)model = AutoModel.from_pretrained(&quot;bert-base-uncased&quot;, output_attentions=True)```Then prepare inputs and compute attention:```pythoninputs = tokenizer.encode(&quot;The cat sat on the mat&quot;, return_tensors='pt')outputs = model(inputs)attention = outputs[-1]  # Output includes attention weights when output_attentions=Truetokens = tokenizer.convert_ids_to_tokens(inputs[0]) ```Finally, display the attention weights using the [`head_view`](bertviz/head_view.py) or [`model_view`](bertviz/model_view.py) functions:```pythonfrom bertviz import head_viewhead_view(attention, tokens)```&lt;b&gt;Examples&lt;/b&gt;: DistilBERT ([Model View Notebook](notebooks/model_view_distilbert.ipynb), [Head View Notebook](notebooks/head_view_distilbert.ipynb))For full API, please refer to the source code for the [head view](bertviz/head_view.py) or [model view](bertviz/model_view.py).#### Neuron ViewThe neuron view is invoked differently than the head view or model view, due to requiring access to the model'squery/key vectors, which are not returned through the Huggingface API. It is currently limited to custom versions of BERT, GPT-2, andRoBERTa included with BertViz.```python# Import specialized versions of models (that return query/key vectors)from bertviz.transformers_neuron_view import BertModel, BertTokenizerfrom bertviz.neuron_view import showmodel_type = 'bert'model_version = 'bert-base-uncased'do_lower_case = Truesentence_a = &quot;The cat sat on the mat&quot;sentence_b = &quot;The cat lay on the rug&quot;model = BertModel.from_pretrained(model_version, output_attentions=True)tokenizer = BertTokenizer.from_pretrained(model_version, do_lower_case=do_lower_case)show(model, model_type, tokenizer, sentence_a, sentence_b, layer=2, head=0)```&lt;b&gt;Examples&lt;/b&gt;:BERT ([Notebook](notebooks/neuron_view_bert.ipynb),[Colab](https://colab.research.google.com/drive/1m37iotFeubMrp9qIf9yscXEL1zhxTN2b)) ‚Ä¢GPT-2 ([Notebook](notebooks/neuron_view_gpt2.ipynb),[Colab](https://colab.research.google.com/drive/1s8XCCyxsKvNRWNzjWi5Nl8ZAYZ5YkLm_)) ‚Ä¢RoBERTa([Notebook](notebooks/neuron_view_roberta.ipynb))  For full API, please refer to the [source](bertviz/neuron_view.py).### Encoder-decoder models (BART, T5, etc.)The head view and model view both support encoder-decoder models.First, load an encoder-decoder model:```pythonfrom transformers import AutoTokenizer, AutoModeltokenizer = AutoTokenizer.from_pretrained(&quot;Helsinki-NLP/opus-mt-en-de&quot;)model = AutoModel.from_pretrained(&quot;Helsinki-NLP/opus-mt-en-de&quot;, output_attentions=True)```Then prepare the inputs and compute attention:```pythonencoder_input_ids = tokenizer(&quot;She sees the small elephant.&quot;, return_tensors=&quot;pt&quot;, add_special_tokens=True).input_idsdecoder_input_ids = tokenizer(&quot;Sie sieht den kleinen Elefanten.&quot;, return_tensors=&quot;pt&quot;, add_special_tokens=True).input_idsoutputs = model(input_ids=encoder_input_ids, decoder_input_ids=decoder_input_ids)encoder_text = tokenizer.convert_ids_to_tokens(encoder_input_ids[0])decoder_text = tokenizer.convert_ids_to_tokens(decoder_input_ids[0])```Finally, display the visualization using either [`head_view`](bertviz/head_view.py) or [`model_view`](bertviz/model_view.py).```pythonfrom bertviz import model_viewmodel_view(    encoder_attention=outputs.encoder_attentions,    decoder_attention=outputs.decoder_attentions,    cross_attention=outputs.cross_attentions,    encoder_tokens= encoder_text,    decoder_tokens = decoder_text)```You may select `Encoder`, `Decoder`, or `Cross` attention from the drop-down in the upper left corner of the visualization.&lt;b&gt;Examples&lt;/b&gt;: MarianMT ([Notebook](notebooks/model_view_encoder_decoder.ipynb)) ‚Ä¢ BART ([Notebook](notebooks/model_view_bart.ipynb))For full API, please refer to the source code for the [head view](bertviz/head_view.py) or [model view](bertviz/model_view.py).### Installing from source```bashgit clone https://github.com/jessevig/bertviz.gitcd bertvizpython setup.py develop```### Additional options#### Dark / light modeThe model view and neuron view support dark (default) and light modes. You may set the mode usingthe `display_mode` parameter:```pythonmodel_view(attention, tokens, display_mode=&quot;light&quot;)```#### Filtering layersTo improve the responsiveness of the tool when visualizing larger models or inputs, you may set the `include_layers` parameter to restrict the visualization to a subset of layers (zero-indexed). This option is available in the head view and modelview.**Example:** Render model view with only layers 5 and 6 displayed```pythonmodel_view(attention, tokens, include_layers=[5, 6])```For the model view, you may also restrict the visualization to a subset of attention heads (zero-indexed) by setting the `include_heads` parameter. #### Setting default layer/head(s)In the head view, you may choose a specific `layer` and collection of `heads` as the default selection when the visualization first renders. Note: this is different from the `include_heads`/`include_layers` parameter (above), which  removes layers and heads from the visualization completely.**Example:** Render head view with layer 2 and heads 3 and 5 pre-selected```pythonhead_view(attention, tokens, layer=2, heads=[3,5])```You may also pre-select a specific `layer` and single `head` for the neuron view. #### Visualizing sentence pairsSome models, e.g. BERT, accept a pair of sentences as input. BertViz optionally supports a drop-down menu that allows user to filter attention based on which sentence the tokens are in, e.g. only show attention between tokens in first sentence and tokens in second sentence.##### Head and model viewsTo enable this feature when invoking the [`head_view`](bertviz/head_view.py) or [`model_view`](bertviz/model_view.py) functions, set the `sentence_b_start` parameter to the start index of the second sentence. Note that the method for computing this index will depend on the model.Example (BERT):```pythonfrom bertviz import head_viewfrom transformers import AutoTokenizer, AutoModel, utilsutils.logging.set_verbosity_error()  # Suppress standard warnings# NOTE: This code is model-specificmodel_version = 'bert-base-uncased'model = AutoModel.from_pretrained(model_version, output_attentions=True)tokenizer = AutoTokenizer.from_pretrained(model_version)sentence_a = &quot;the rabbit quickly hopped&quot;sentence_b = &quot;The turtle slowly crawled&quot;inputs = tokenizer.encode_plus(sentence_a, sentence_b, return_tensors='pt')input_ids = inputs['input_ids']token_type_ids = inputs['token_type_ids'] # token type id is 0 for Sentence A and 1 for Sentence Battention = model(input_ids, token_type_ids=token_type_ids)[-1]sentence_b_start = token_type_ids[0].tolist().index(1) # Sentence B starts at first index of token type id 1token_ids = input_ids[0].tolist() # Batch index 0tokens = tokenizer.convert_ids_to_tokens(token_ids)    head_view(attention, tokens, sentence_b_start)``` ##### Neuron viewTo enable this option in the neuron view, simply set the `sentence_a` and `sentence_b` parameters in [`neuron_view.show()`](bertviz/neuron_view.py).#### Obtain HTML representationsSupport to retrieve the generated HTML representations has been added to head_view, model_view and neuron_view.Setting the 'html_action' parameter to 'return' will make the function call return a single HTML Python object that can be further processed. Remember you can access the HTML source using the data attribute of a Python HTML object.The default behavior for 'html_action' is 'view', which will display the visualization but won't return the HTML object.This functionality is useful if you need to:- Save the representation as an independent HTML file that can be accessed via web browser- Use custom display methods as the ones needed in Databricks to visualize HTML objectsExample (head and model views):```pythonfrom transformers import AutoTokenizer, AutoModel, utilsfrom bertviz import head_viewutils.logging.set_verbosity_error()  # Suppress standard warningstokenizer = AutoTokenizer.from_pretrained(&quot;bert-base-uncased&quot;)model = AutoModel.from_pretrained(&quot;bert-base-uncased&quot;, output_attentions=True)inputs = tokenizer.encode(&quot;The cat sat on the mat&quot;, return_tensors='pt')outputs = model(inputs)attention = outputs[-1]  # Output includes attention weights when output_attentions=Truetokens = tokenizer.convert_ids_to_tokens(inputs[0]) html_head_view = head_view(attention, tokens, html_action='return')with open(&quot;PATH_TO_YOUR_FILE/head_view.html&quot;, 'w') as file:    file.write(html_head_view.data)```Example (neuron view):```python# Import specialized versions of models (that return query/key vectors)from bertviz.transformers_neuron_view import BertModel, BertTokenizerfrom bertviz.neuron_view import showmodel_type = 'bert'model_version = 'bert-base-uncased'do_lower_case = Truesentence_a = &quot;The cat sat on the mat&quot;sentence_b = &quot;The cat lay on the rug&quot;model = BertModel.from_pretrained(model_version, output_attentions=True)tokenizer = BertTokenizer.from_pretrained(model_version, do_lower_case=do_lower_case)html_neuron_view = show(model, model_type, tokenizer, sentence_a, sentence_b, layer=2, head=0, html_action='return')with open(&quot;PATH_TO_YOUR_FILE/neuron_view.html&quot;, 'w') as file:    file.write(html_neuron_view.data)```#### Non-Huggingface modelsThe head view and model view may be used to visualize self-attention for any standard Transformer model,as long as the attention weights are available and follow the format specified in [`head_view`](bertviz/head_view.py) and [`model_view`](bertviz/model_view.py) (which is the format returned from Huggingface models). In some case, Tensorflow checkpoints may be loaded as Huggingface models as described in the [Huggingface docs](https://huggingface.co/transformers/). ## ‚ö†Ô∏è Limitations### Tool* This tool is designed for shorter inputs and may run slowly if the input text is very long and/or the model is very large. To mitigate this, you may wish to filter the layers displayed by setting the **`include_layers`** parameter, as described [above](#filtering-layers).* When running on Colab, some of the visualizations will fail (runtime disconnection) when the input text is long.  To mitigate this, you may wish to filter the layers displayed by setting the **`include_layers`** parameter, as described [above](#filtering-layers).* The *neuron view* only supports the custom BERT, GPT-2, and RoBERTa models included with the tool. This view needs access to the query and key vectors, which required modifying the model code (see `transformers_neuron_view` directory), which has only been done for these three models.### Attention as &quot;explanation&quot;?* Visualizing attention weights illuminates one type of architecture within the model but does notnecessarily provide a direct *explanation* for predictions [[1](https://arxiv.org/pdf/1909.11218.pdf), [2](https://arxiv.org/abs/1902.10186), [3](https://arxiv.org/pdf/1908.04626.pdf)].* If you wish to understand how the input text influences output predictions more directly, consider [saliency methods](https://arxiv.org/pdf/2010.05607.pdf) provided by tools such as the [Language Interpretability Toolkit](https://github.com/PAIR-code/lit) or [Ecco](https://github.com/jalammar/ecco).## üî¨ Paper[&lt;b&gt;A Multiscale Visualization of Attention in the Transformer Model&lt;/b&gt;](https://www.aclweb.org/anthology/P19-3007.pdf) (ACL System Demonstrations 2019).### Citation```bibtex@inproceedings{vig-2019-multiscale,    title = &quot;A Multiscale Visualization of Attention in the Transformer Model&quot;,    author = &quot;Vig, Jesse&quot;,    booktitle = &quot;Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics: System Demonstrations&quot;,    month = jul,    year = &quot;2019&quot;,    address = &quot;Florence, Italy&quot;,    publisher = &quot;Association for Computational Linguistics&quot;,    url = &quot;https://www.aclweb.org/anthology/P19-3007&quot;,    doi = &quot;10.18653/v1/P19-3007&quot;,    pages = &quot;37--42&quot;,}```## AuthorsJesse Vig [(homepage)](https://jessevig.com)## üôè AcknowledgmentsWe are grateful to the authors of the following projects, which are incorporated into this repo:* https://github.com/tensorflow/tensor2tensor* https://github.com/huggingface/pytorch-pretrained-BERT## LicenseThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details</longdescription>
</pkgmetadata>