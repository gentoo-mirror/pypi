<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Google Ads API Report Fetcher (gaarf)Python version of Google Ads API Report Fetcher tool a.k.a. `gaarf`.Please see the full documentation in the root [README](https://github.com/google/ads-api-report-fetcher/blob/main/README.md).## Getting started### Prerequisites* Python 3.8+* pip installed* Google Ads API enabled* `google-ads.yaml` file. Learn how to create one [here](../docs/how-to-authenticate-ads-api.md).### Installation and running1. create virtual environment and install the tool```python3 -m venv gaarfsource gaarf/bin/activatepip install google-ads-api-report-fetcher```&gt; install the latest development version with `pip install -e git+https://github.com/google/ads-api-report-fetcher.git#egg=google-ads-api-report-fetcher\&amp;subdirectory=py`#### Versions of the library*  `google-ads-api-report-fetcher[sqlalchemy]` - version with SQLalchemy support* `google-ads-api-report-fetcher[simulator]` - version with support for [simulating    query results](../docs/simulating-data-with-gaarf.md) instead of calling Google Ads API.* `google-ads-api-report-fetcher[full]` - full version2.  Run the tool with `gaarf` command:```shellgaarf &lt;queries&gt; [options]```Documentation on available options see in the root [README.md](../README.md).## Using as a libraryOnce `google-ads-api-report-fetcher` is installed you can use it as a library.```pythonfrom gaarf.api_clients import GoogleAdsApiClientfrom gaarf.query_executor import AdsReportFetcher, AdsQueryExecutorfrom gaarf.io import reader, writer# initialize Google Ads API clientclient = GoogleAdsApiClient(path_to_config=&quot;google-ads.yaml&quot;, version=&quot;v12&quot;)customer_ids = ['1', '2']# Fetch report and store results in a variable# initialize report fetcher to get reportsreport_fetcher = AdsReportFetcher(client, customer_ids)# create query textquery_text = &quot;SELECT campaign.id AS campaign_id FROM campaign&quot;# Execute query and store campaigns variablecampaigns = report_fetcher.fetch(query_text)# iterate over reportunique_campaigns = set([row.campaign_id for row in campaigns])# convert `campaigns` to common data structurescampaigns_list = campaigns.to_list()campaigns_df = campaigns.to_pandas()# Execute query from file and save results to CSV# initialize query_executor to fetch report and store them in local/remote storagequery_executor = AdsQueryExecutor(client)# initialize writercsv_writer = writer.CsvWriter(destination_folder=&quot;/tmp&quot;)reader_client = reader.FileReader()# execute query and save to csvquery_executor.execute(    query_text=query_text,    query_name=&quot;campaign&quot;,    customer_ids=customer_ids,    write_client=csv_writer)# execute query from file and save to csvquery_path=&quot;path/to/query.sql&quot;query_executor.execute(    query_text=reader_client.read(query_path),    query_name=query_path,    customer_ids=customer_ids,    write_client=csv_writer)```## Python specific command line flags* `--optimize-performance` - accepts one of the following values:    * `NONE` - no optimizations are done    * `PROTOBUF` - convert Google Ads API response to protobuf before parsing        (speeds up query execution 5x times but forces conversion of ENUMs to integers instead of strings)    * `BATCH` -  converts all response of Ads API to a list and then parses its content in parallel    * `BATCH_PROTOBUF` - combines `BATCH` and `PROTOBUF` approaches.## DisclaimerThis is not an officially supported Google product.</longdescription>
</pkgmetadata>