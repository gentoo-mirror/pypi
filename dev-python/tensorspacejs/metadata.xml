<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img width=150 src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/logo_tsConverter.png&quot;&gt;&lt;/p&gt;&lt;h1 align=&quot;center&quot;&gt;TensorSpace Converter&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&quot;https://github.com/tensorspace-team/tensorspace-converter/blob/master/README_zh.md&quot;&gt;&lt;strong&gt;ä¸­æ–‡&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;About TensorSpace ðŸ¤”: &lt;a href=&quot;https://github.com/tensorspace-team/tensorspace&quot;&gt;TensorSpace Github&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://badge.fury.io/py/tensorspacejs&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/tensorspacejs.svg&quot; alt=&quot;PyPI version&quot; height=&quot;18&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://www.python.org/downloads/release/python-360/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/python-3.6-blue.svg&quot; alt=&quot;Python 3.6&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/tensorspace-team/tensorspace-converter/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache--2.0-green.svg&quot; alt=&quot;license badge&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tensorflow/tensorflow&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dependencies-tensorflow-brightgreen.svg&quot; alt=&quot;dependencies badge&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/keras-team/keras&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dependencies-keras-brightgreen.svg&quot; alt=&quot;dependencies badge&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tensorflow/tfjs-node&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dependencies-tfjs_node-brightgreen.svg&quot; alt=&quot;dependencies badge&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tensorflow/tfjs-converter&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dependencies-tfjs_converter-brightgreen.svg&quot; alt=&quot;dependencies badge&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://gitter.im/tensorspacejs/Lobby#&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg&quot; alt=&quot;gitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;TensorSpace-Converter is a tool used to generate a TensorSpace compatible model from a pre-trained model built by TensorFlow, Keras and TensorFlow.js. TensorSpace-Converter includes the functions of: extracting information from hidden layers, matching intermediate data based on the configurations and exporting preprocessed TensorSpace compatible model. TensorSpace simplifies the preprocess and helps developers to focus on the development of model visualization.## Table of Content* [Motivation](#motivation)* [Getting Started](#start)    * [Install](#install)    * [Usage](#usage)* [Running with Docker](#docker)* [Converter API](#api)* [Converter Usage Examples](#examples)    * [TensorFlow](#tensorflow)    * [Keras](#keras)    * [TensorFlow.js](#tensorflowjs)* [Development](#development)* [Contributors](#contributors)* [Contact](#contact)* [License](#license)## &lt;div id=&quot;motivation&quot;&gt;Motivation&lt;/div&gt;[TensorSpace](https://github.com/tensorspace-team/tensorspace) is a JavaScript framework used to 3D visualize deep learning models built by TensorFlow, Keras and TensorFlow.js. Before applying TensorSpace to the pre-trained model, there is an important pipeline - TensorSpace model preprocessing ( Checkout this [article](https://tensorspace.org/html/docs/preIntro.html) for more information about TensorSpace preprocessing ). TensorSpace-Converter is designed to simplify the model preprocessing and generate a TensorSpace compatible model easily and quickly.Without TensorSpace-Converter, the developer needs to be expert on the pre-trained model and machine learning library the model used. For example, if the developer has an LeNet pre-trained model built by tf.keras, it is required to know the structure of the LeNet network as well as how to implement a new multi-output model by tf.keras. Now, with TensorSpace-Converter, it only needs some commands to complete the preprocessing process. For example, the developer only needs to use the [commands](#tensorflow) to preprocess a tf.keras pre-trained model.As a component of TensorSpace ecosystem, TensorSpace-Converter simplifies the TensorSpace preprocess, release the workloads from learning how to generate TensorSpace compatible model. As a development tool, TensorSpace-Converter helps to separate the work of `model training` and `model visualization`.&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;80%&quot; src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/hello_converter.gif&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Fig. 1&lt;/b&gt; - TensorSpace-Converter Usage&lt;/p&gt;## &lt;div id=&quot;start&quot;&gt;Getting Started&lt;/div&gt;### &lt;div id=&quot;install&quot;&gt;Install&lt;/div&gt;Install the `tensorspacejs` pip package:```shell$ pip install tensorspacejs```If `tensorspacejs` is installed successfully, you can check the TensorSpace-Converter version by using the command:```shell$ tensorspacejs_converter -v```Then `init` TensorSpace Converter (important step):```shell$ tensorspacejs_converter -init```* **Note**TensorSpace-Converter requires to run under Python 3.6, Node 11.3+, NPM 6.5+. If you have other pre-installed Python version in your local environment, we suggest you to create a new fresh virtual environment. For example, the &lt;a href=&quot;https://anaconda.org/anaconda/conda&quot;&gt;conda&lt;/a&gt; commands is like:```shell$ conda create -n envname python=3.6$ source activate envname$ pip install tensorspacejs```### &lt;div id=&quot;usage&quot;&gt;Usage&lt;/div&gt;The following part introduces the usage and workflow on:* How to use TensorSpace-Converter to convert a pre-trained model;* How to apply TensorSpace to the converted model for model visualization.An MNIST-digit tf.keras model is used as an example in the tutorial. The sample files used in the tutorial includes [pre-trained tf.keras model](https://github.com/tensorspace-team/tensorspace-converter/tree/master/examples/tensorflow/rawModel/keras), [TensorSpace-Converter script](https://github.com/tensorspace-team/tensorspace-converter/blob/master/examples/tensorflow/script/convertKeras.sh) and [TensorSpace visualization code](https://github.com/tensorspace-team/tensorspace-converter/blob/master/examples/tensorflow/index.html).&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/workflow.png&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Fig. 2&lt;/b&gt; - TensorSpace-Converter Workflow&lt;/p&gt;#### Step 1: Use TensorSpace-Converter to preprocess pre-trained modelTensorSpace-Converter will convert an input model into a multi-output model, checkout this [article](https://tensorspace.org/html/docs/preIntro.html) for more information about multi-output model and model preprocessing. ```shell$ tensorspacejs_converter \    --input_model_from=&quot;tensorflow&quot; \    --input_model_format=&quot;tf_keras&quot; \    --output_layer_names=&quot;conv_1,maxpool_1,conv_2,maxpool_2,dense_1,dense_2,softmax&quot; \    ./PATH/TO/MODEL/tf_keras_model.h5 \    ./PATH/TO/SAVE/DIR```&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/multi-output.png&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Fig. 3&lt;/b&gt; - converted multi-output model&lt;/p&gt;#### Step 2: Apply TensorSpace for model visualization```javascriptmodel.load({    type: &quot;tensorflow&quot;,    url: &quot;/PATH/TO/MODEL/model.json&quot;});```&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/demo.gif&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Fig. 4&lt;/b&gt; - LeNet Visualization&lt;/p&gt;## &lt;div id=&quot;docker&quot;&gt;Running with Docker&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;&lt;img width=200 src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/docker.png&quot;&gt;&lt;/p&gt;Establishing `TensorSpace-Converter` runtime environment is a tedious topic? Dockerize it!Here is a TensorSpace-Converter [Dockerfile](https://github.com/tensorspace-team/tensorspace-converter/blob/master/docker/Dockerfile), you can use it to build a out-of-box TensorSpace-Converter `image`. We also provide some easy to use scripts to init ([init_docker_converter.sh](https://github.com/tensorspace-team/tensorspace-converter/blob/master/docker/init_docker_converter.sh)) and run ([run_docker_converter.sh](https://github.com/tensorspace-team/tensorspace-converter/blob/master/docker/run_docker_converter.sh)) `tensorspacejs` docker image. * To init `tensorspacejs` Docker image (make sure start Docker daemon before init the image):```shellcd ./dockerbash init_docker_converter.sh```* To run docker imagePut TensorSpace-Converter script and model assets in a `WORK_DIR`, and execute `run_docker_converter.sh` to run `tensorspacejs` image:```shellcd ./dockerbash run_docker_converter.sh --work_dir PATH/TO/WORK_DIR```Checkout this [Docker Example](https://github.com/tensorspace-team/tensorspace-converter/blob/master/docker/README.md) for more practical usage of running TensorSpace-Converter with Docker.## &lt;div id=&quot;api&quot;&gt;Converter API&lt;/div&gt;Sample TensorSpace-Converter script:```shell$ tensorspacejs_converter \    --input_model_from=&quot;XXX&quot; \    --input_model_format=&quot;YYY&quot; \    --output_layer_names=&quot;EEE1,EEE2,EEE3&quot; \    input_path \    output_path```Arguments explanation:|Positional Arguments | Description ||---|---||`input_path`  | Path for model input artifacts. Checkout [Usage Example](#examples) for how to set this attribute for different kinds of models. ||`output_path` | Folder for all output artifacts.  || Options | Description|---|---||`--input_model_from`     | Configure the training library for pre-trained model, use: `tensorflow` for TensorFlow, `keras` for Keras, `tfjs` for TensorFlow.js. ||`--input_model_format`     | The format of input model, checkout [Usage Example](#examples) for how to set this attribute for different kinds of models. ||&lt;nobr&gt;`--output_layer_names`&lt;/nobr&gt;| The names of the layer which will be visualized in TensorSpace, separated by comma &quot;,&quot;. |## &lt;div id=&quot;examples&quot;&gt;Converter Usage Examples&lt;/div&gt;This section introduces the usage of TensorSpace-Converter for different types of pre-trained model from TensorFlow, Keras, TensorFlow.js.### &lt;div id=&quot;tensorflow&quot;&gt;TensorFlow&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;&lt;img width=60% src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/converter_logo_tf.png&quot;&gt;&lt;/p&gt;A pre-trained model built by TensorFlow can be saved as saved model, frozen model, combined HDF5 model or separated HDF5 model. Use different TensorSpace-Converter commands for different kinds of TensorFlow model formats. TensorSpace-Converter collects the data from `tensor`, then use the outputs as the inputs of `layer` of TensorSpace visualization. The developer can collect all necessary tensor names and set the name list as `output_layer_names`.For a combined HDF5 model, topology and weights are saved in a combined HDF5 file `xxx.h5`. Set `input_model_format` to be `tf_keras`. The sample command script should be like:```shell$ tensorspacejs_converter \    --input_model_from=&quot;tensorflow&quot; \    --input_model_format=&quot;tf_keras&quot; \    --output_layer_names=&quot;layer1Name,layer2Name,layer3Name&quot; \    ./PATH/TO/MODEL/xxx.h5 \    ./PATH/TO/SAVE/DIR```For a separated HDF5 model, topology and weights are saved in separate files, topology file `xxx.json` and weights file `xxx.h5`. Set `input_model_format` to be `tf_keras_separated`. In this case, the model have two input files, merge two file's paths and separate them with comma (.json first, .h5 last), and then set the combined path to positional argument `input_path`. The sample command script should be like:```shell$ tensorspacejs_converter \    --input_model_from=&quot;tensorflow&quot; \    --input_model_format=&quot;tf_keras_separated&quot; \    --output_layer_names=&quot;layer1Name,layer2Name,layer3Name&quot; \    ./PATH/TO/MODEL/xxx.json,./PATH/TO/MODEL/eee.h5 \    ./PATH/TO/SAVE/DIR```For a TensorFlow saved model. Set `input_model_format` to be `tf_saved`. The sample command script should be like:```shell$ tensorspacejs_converter \    --input_model_from=&quot;tensorflow&quot; \    --input_model_format=&quot;tf_saved&quot; \    --output_layer_names=&quot;layer1Name,layer2Name,layer3Name&quot; \    ./PATH/TO/SAVED/MODEL/FOLDER \    ./PATH/TO/SAVE/DIR```For a TensorFlow frozen model. Set `input_model_format` to be `tf_frozen`. The sample command script should be like:```shell$ tensorspacejs_converter \    --input_model_from=&quot;tensorflow&quot; \    --input_model_format=&quot;tf_frozen&quot; \    --output_layer_names=&quot;layer1Name,layer2Name,layer3Name&quot; \    ./PATH/TO/MODEL/xxx.pb \    ./PATH/TO/SAVE/DIR```Checkout this [TensorFlow Tutorial](https://github.com/tensorspace-team/tensorspace-converter/tree/master/examples/tensorflow) for more practical usage of TensorSpace-Converter for TensorFlow models.### &lt;div id=&quot;keras&quot;&gt;Keras&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;&lt;img width=60% src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/converter_logo_keras.png&quot;&gt;&lt;/p&gt;A pre-trained model built by Keras, may have two formats: topology and weights are saved in a single HDF5 file, or topology and weights are saved in separated files. Use different TensorSpace-Converter commands for these two saved Keras models.For a Keras model, topology and weights are saved in a single HDF5 file, i.e. `xxx.h5`. Set `input_model_format` to be `topology_weights_combined`. The sample command script should be like:```shell$ tensorspacejs_converter \    --input_model_from=&quot;keras&quot; \    --input_model_format=&quot;topology_weights_combined&quot; \    --output_layer_names=&quot;layer1Name,layer2Name,layer3Name&quot; \    ./PATH/TO/MODEL/xxx.h5 \    ./PATH/TO/SAVE/DIR```For a Keras model, topology and weights are saved in separated files, i.e. a topology file `xxx.json` and a weights file `xxx.h5`. Set `input_model_format` to be `topology_weights_separated`. In this case, the model have two input files, merge two file's paths and separate them with comma (.json first, .h5 last), and then set the combined path to positional argument `input_path`. The sample command script should be like:```shell$ tensorspacejs_converter \    --input_model_from=&quot;keras&quot; \    --input_model_format=&quot;topology_weights_separated&quot; \    --output_layer_names=&quot;layer1Name,layer2Name,layer3Name&quot; \    ./PATH/TO/MODEL/xxx.json,./PATH/TO/MODEL/eee.h5 \    ./PATH/TO/SAVE/DIR```Checkout this [Keras Tutorial](https://github.com/tensorspace-team/tensorspace-converter/tree/master/examples/keras) for more practical usage of TensorSpace-Converter for Keras models.### &lt;div id=&quot;tensorflowjs&quot;&gt;TensorFlow.js&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;&lt;img width=60% src=&quot;https://raw.githack.com/tensorspace-team/tensorspace-converter/master/assets/converter_logo_tfjs.png&quot;&gt;&lt;/p&gt;A pre-trained model built by TensorFlow.js, may have a topology file `xxx.json` and a weights file `xxx.weight.bin`. To converter the model with TensorSpace-Converter, the two files should be put in the same folder and set topology file's path to `input_path`. The sample command script should be like:```shell$ tensorspacejs_converter \    --input_model_from=&quot;tfjs&quot; \    --output_layer_names=&quot;layer1Name,layer2Name,layer3Name&quot; \    ./PATH/TO/MODEL/xxx.json \    ./PATH/TO/SAVE/DIR```Checkout this [TensorFlow.js tutorial](https://github.com/tensorspace-team/tensorspace-converter/tree/master/examples/tfjs) for more practical usage of TensorSpace-Converter for TensorFlow.js models.## &lt;div id=&quot;development&quot;&gt;Development&lt;/div&gt;* Ensure to have a fresh `python=3.6`, `node&gt;=11.3`, `npm&gt;=6.5`, `tensorflowjs=0.8.0` environment.### Setup* To setup a TensorSpace-Converter development environment:```shellgit clone https://github.com/tensorspace-team/tensorspace-converter.gitcd tensorspace-converterbash init-converter-dev.shnpm install```### Build* To build TensorSpace-Converter pip package (Build files can be find in `dist` folder):```shellbash build-pip-package.sh```* To install local build files:```shellpip install dist/tensorspacejs-VERSION-py3-none-any.whltensorspacejs_converter -v```### Test* Grand permissions to test scripts before running test scripts:```shellbash ./test/grandPermission.sh```* To run end-to-end test (tests shall be run in pre-set environment):```shellnpm run test```## &lt;div id=&quot;contributors&quot;&gt;Contributors&lt;/div&gt;Thanks goes to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt;&lt;!-- prettier-ignore --&gt;| [&lt;img src=&quot;https://avatars3.githubusercontent.com/u/4524339?v=4&quot; width=&quot;100px;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chenhua Zhu&lt;/b&gt;&lt;/sub&gt;](https://github.com/zchholmes)&lt;br /&gt;[ðŸ’»](https://github.com/tensorspace-team/tensorspace-converter/commits?author=zchholmes &quot;Code&quot;) [ðŸŽ¨](#design-zchholmes &quot;Design&quot;) [ðŸ“–](https://github.com/tensorspace-team/tensorspace-converter/commits?author=zchholmes &quot;Documentation&quot;) [ðŸ’¡](#example-zchholmes &quot;Examples&quot;) | [&lt;img src=&quot;https://avatars2.githubusercontent.com/u/7977100?v=4&quot; width=&quot;100px;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;syt123450&lt;/b&gt;&lt;/sub&gt;](https://github.com/syt123450)&lt;br /&gt;[ðŸ’»](https://github.com/tensorspace-team/tensorspace-converter/commits?author=syt123450 &quot;Code&quot;) [ðŸŽ¨](#design-syt123450 &quot;Design&quot;) [ðŸ“–](https://github.com/tensorspace-team/tensorspace-converter/commits?author=syt123450 &quot;Documentation&quot;) [ðŸ’¡](#example-syt123450 &quot;Examples&quot;) | [&lt;img src=&quot;https://avatars2.githubusercontent.com/u/19629037?v=4&quot; width=&quot;100px;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Qi(Nora)&lt;/b&gt;&lt;/sub&gt;](https://github.com/lq3297401)&lt;br /&gt;[ðŸŽ¨](#design-lq3297401 &quot;Design&quot;) | [&lt;img src=&quot;https://avatars3.githubusercontent.com/u/25629006?s=400&amp;v=4&quot; width=&quot;100px;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;BoTime&lt;/b&gt;&lt;/sub&gt;](https://github.com/BoTime)&lt;br /&gt;[ðŸ’»](https://github.com/tensorspace-team/tensorspace-converter/commits?author=BoTime &quot;Code&quot;) [ðŸ’¡](#example-BoTime &quot;Examples&quot;) | [&lt;img src=&quot;https://avatars0.githubusercontent.com/u/21956621?v=4&quot; width=&quot;100px;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;YaoXing Liu&lt;/b&gt;&lt;/sub&gt;](https://charlesliuyx.github.io/)&lt;br /&gt;[ðŸ“–](https://github.com/tensorspace-team/tensorspace-converter/commits?author=CharlesLiuyx &quot;Documentation&quot;) [ðŸŽ¨](#design-CharlesLiuyx &quot;Design&quot;) || :---: | :---: | :---: | :---: | :---: |&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;## &lt;div id=&quot;contact&quot;&gt;Contact&lt;/div&gt;If you have any issue or doubt, feel free to contact us by:* Email: tensorspaceteam@gmail.com* GitHub Issues: [create issue](https://github.com/tensorspace-team/tensorspace-converter/issues/new)* Slack: [#questions](https://tensorspace.slack.com/messages/CDSB58A5P)* Gitter: [#Lobby](https://gitter.im/tensorspacejs/Lobby#)## &lt;div id=&quot;license&quot;&gt;License&lt;/div&gt;[Apache License 2.0](https://github.com/tensorspace-team/tensorspace-converter/blob/master/LICENSE)</longdescription>
</pkgmetadata>