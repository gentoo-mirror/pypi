<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># simpleconfSimple configuration management for python## Installation```shell# released versionpip install python-simpleconf# Install support for inipip install python-simpleconf[ini]# Install support for dotenvpip install python-simpleconf[dotenv]# Install support for yamlpip install python-simpleconf[yaml]# Install support for tomlpip install python-simpleconf[toml]# Install support for all supported formatspip install python-simpleconf[all]```## Features- Multiple formats supported- Type casting- Profile support- Simple APIs## Usage### Loading configurations```pythonfrom simpleconf import Config# Load a single fileconf = Config.load('~/xxx.ini')# load multiple files, later files override previous onesconf = Config.load(   '~/xxx.ini', '~/xxx.env', '~/xxx.yaml', '~/xxx.toml',   '~/xxx.json', 'simpleconf.osenv', {'a': 3})# Load a single file with a different loaderconf = Config.load('~/xxx.ini', loader=&quot;toml&quot;)```### Accessing configuration values```pythonfrom simpleconf import Configconf = Config.load({'a': 1, 'b': {'c': 2}})# conf.a == 1# conf.b.c == 2```### Supported formats- `.ini/.cfg/.config` (parsed by `iniconfig`).  - For confiurations without profiles, an ini-like configuration like must have a `default` (case-insensitive) section.- `.env` (using `python-dotenv`). A file with environment variables.- `.yaml/.yml` (using `pyyaml`). A file with YAML data.- `.toml` (using `rtoml`). A file with TOML data.- `.json` (using `json`). A file with JSON data.- `XXX.osenv`: System environment variables with prefix `XXX_` (case-sensitive) is used.  - `XXX_A=1` will be loaded as `conf.A = 1`.- python dictionary.### Profile support#### Loading configurations##### Loading dictionaries```pythonfrom simpleconf import ProfileConfigconf = ProfileConfig.load({'default': {'a': 1})# conf.a == 1```##### Loading a `.env` file`config.env````env# config.envdefault_a=1``````pythonfrom simpleconf import ProfileConfigconf = ProfileConfig.load('config.env')# conf.a == 1```##### Loading ini-like configuration files```ini# config.ini[default]a = 1``````pythonfrom simpleconf import ProfileConfigconf = ProfileConfig.load('config.ini')# conf.a == 1```##### Loading JSON files`config.json````json{  &quot;default&quot;: {    &quot;a&quot;: 1  }}``````pythonfrom simpleconf import ProfileConfigconf = ProfileConfig.load('config.json')# conf.a == 1```##### Loading system environment variables```pythonfrom os import environfrom simpleconf import ProfileConfigenviron['XXX_DEFAULT_A'] = '1'conf = ProfileConfig.load('XXX.osenv')# conf.a == 1```##### Loading TOML files```toml# config.toml[default]a = 1``````pythonfrom simpleconf import ProfileConfigconf = ProfileConfig.load('config.toml')# conf.a == 1```##### Loading YAML files```yaml# config.yamldefault:  a: 1``````pythonfrom simpleconf import ProfileConfigconf = ProfileConfig.load('config.yaml')# conf.a == 1```#### Switching profile```pythonfrom simpleconf import ProfileConfigconf = ProfileConfig.load(   {'default': {'a': 1, 'b': 2}, 'dev': {'a': 3}, 'prod': {'a': 4}})# conf.a == 1; conf.b == 2# ProfileConfig.profiles(conf) == ['default', 'dev', 'prod']# ProfileConfig.pool(conf) == {'default': {'a': 1, 'b': 2}, 'dev': {'a': 3}, 'prod': {'a': 4}}# ProfileConfig.current_profile(conf) == 'default'# ProfileConfig.base_profile(conf) == 'default'ProfileConfig.use_profile(conf, 'dev')# conf.a == 3; conf.b == 2# ProfileConfig.current_profile(conf) == 'dev'# ProfileConfig.base_profile(conf) == 'default'# use a different base profileProfileConfig.use_profile(conf, 'prod', base='dev')# conf.a == 4   # No 'b' in conf# ProfileConfig.current_profile(conf) == 'prod'# ProfileConfig.base_profile(conf) == 'dev'# Copy configuration instead of inplace modificationconf2 = ProfileConfig.use_profile(conf, 'dev', copy=True)# conf2 is not conf# conf2.a == 3; conf2.b == 2# Use a context managerwith ProfileConfig.use_profile(conf2, 'default'):    conf2.a == 3    conf2.b == 2# conf2.a == 3; conf2.b == 2```### Type castingFor configuration formats with type support, including dictionary, no type casting is done by this library, except that for TOML files.TOML does not support `None` value in python. We use `rtoml` library to parse TOML files, which dumps `None` as `&quot;null&quot;`. So a `null_caster` is used to cast `&quot;null&quot;` to `None`.A `none_caster` is also enabled for TOML files, a pure string of `&quot;@none&quot;` is casted to `None`.For other formats, following casters are supported:#### Int caster```pythonfrom os import environfrom simpleconf import Configenviron['XXX_A'] = '@int:1'conf = Config.load('XXX.osenv')# conf.a == 1 # int```#### Float caster`@float:1.0` -&gt; `1.0`### Bool caster`@bool:true` -&gt; `True``@bool:false` -&gt; `False`#### Python casterValues are casted by `ast.literal_eval()`.```python&quot;@python:1&quot; =&gt; 1  # or&quot;@py:1&quot; =&gt; 1&quot;@py:1.0` -&gt; `1.0`&quot;@py:[1, 2, 3]&quot; =&gt; [1, 2, 3]```#### JSON caster`@json:{&quot;a&quot;: 1}` -&gt; `{&quot;a&quot;: 1}`#### TOML caster`@toml:a = 1` -&gt; `{&quot;a&quot;: 1}`</longdescription>
</pkgmetadata>