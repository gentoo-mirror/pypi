<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [mergedeep](https://mergedeep.readthedocs.io/en/latest/)[![PyPi release](https://img.shields.io/pypi/v/mergedeep.svg)](https://pypi.org/project/mergedeep/)[![PyPi versions](https://img.shields.io/pypi/pyversions/mergedeep.svg)](https://pypi.org/project/mergedeep/)[![Downloads](https://pepy.tech/badge/mergedeep)](https://pepy.tech/project/mergedeep)[![Conda Version](https://img.shields.io/conda/vn/conda-forge/mergedeep.svg)](https://anaconda.org/conda-forge/mergedeep)[![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/mergedeep.svg)](https://anaconda.org/conda-forge/mergedeep)[![Documentation Status](https://readthedocs.org/projects/mergedeep/badge/?version=latest)](https://mergedeep.readthedocs.io/en/latest/?badge=latest)A deep merge function for üêç.[Check out the mergedeep docs](https://mergedeep.readthedocs.io/en/latest/)## Installation```bash$ pip install mergedeep```## Usage```textmerge(destination: MutableMapping, *sources: Mapping, strategy: Strategy = Strategy.REPLACE) -&gt; MutableMapping```Deep merge without mutating the source dicts.```python3from mergedeep import mergea = {&quot;keyA&quot;: 1}b = {&quot;keyB&quot;: {&quot;sub1&quot;: 10}}c = {&quot;keyB&quot;: {&quot;sub2&quot;: 20}}merged = merge({}, a, b, c) print(merged)# {&quot;keyA&quot;: 1, &quot;keyB&quot;: {&quot;sub1&quot;: 10, &quot;sub2&quot;: 20}}```Deep merge into an existing dict.```python3from mergedeep import mergea = {&quot;keyA&quot;: 1}b = {&quot;keyB&quot;: {&quot;sub1&quot;: 10}}c = {&quot;keyB&quot;: {&quot;sub2&quot;: 20}}merge(a, b, c) print(a)# {&quot;keyA&quot;: 1, &quot;keyB&quot;: {&quot;sub1&quot;: 10, &quot;sub2&quot;: 20}}```### Merge strategies:1. Replace (*default*)&gt; `Strategy.REPLACE````python3# When `destination` and `source` keys are the same, replace the `destination` value with one from `source` (default).# Note: with multiple sources, the `last` (i.e. rightmost) source value will be what appears in the merged result. from mergedeep import merge, Strategydst = {&quot;key&quot;: [1, 2]}src = {&quot;key&quot;: [3, 4]}merge(dst, src, strategy=Strategy.REPLACE) # same as: merge(dst, src)print(dst)# {&quot;key&quot;: [3, 4]}```2. Additive&gt; `Strategy.ADDITIVE````python3# When `destination` and `source` values are both the same additive collection type, extend `destination` by adding values from `source`.# Additive collection types include: `list`, `tuple`, `set`, and `Counter`# Note: if the values are not additive collections of the same type, then fallback to a `REPLACE` merge.from mergedeep import merge, Strategydst = {&quot;key&quot;: [1, 2], &quot;count&quot;: Counter({&quot;a&quot;: 1, &quot;b&quot;: 1})}src = {&quot;key&quot;: [3, 4], &quot;count&quot;: Counter({&quot;a&quot;: 1, &quot;c&quot;: 1})}merge(dst, src, strategy=Strategy.ADDITIVE) print(dst)# {&quot;key&quot;: [1, 2, 3, 4], &quot;count&quot;: Counter({&quot;a&quot;: 2, &quot;b&quot;: 1, &quot;c&quot;: 1})}```3. Typesafe replace&gt; `Strategy.TYPESAFE_REPLACE` or `Strategy.TYPESAFE````python3# When `destination` and `source` values are of different types, raise `TypeError`. Otherwise, perform a `REPLACE` merge.from mergedeep import merge, Strategydst = {&quot;key&quot;: [1, 2]}src = {&quot;key&quot;: {3, 4}}merge(dst, src, strategy=Strategy.TYPESAFE_REPLACE) # same as: `Strategy.TYPESAFE`  # TypeError: destination type: &lt;class 'list'&gt; differs from source type: &lt;class 'set'&gt; for key: &quot;key&quot;```4. Typesafe additive&gt; `Strategy.TYPESAFE_ADDITIVE````python3# When `destination` and `source` values are of different types, raise `TypeError`. Otherwise, perform a `ADDITIVE` merge.from mergedeep import merge, Strategydst = {&quot;key&quot;: [1, 2]}src = {&quot;key&quot;: {3, 4}}merge(dst, src, strategy=Strategy.TYPESAFE_ADDITIVE) # TypeError: destination type: &lt;class 'list'&gt; differs from source type: &lt;class 'set'&gt; for key: &quot;key&quot;```## LicenseMIT &amp;copy; [**Travis Clarke**](https://blog.travismclarke.com/)</longdescription>
</pkgmetadata>