<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Wireguard Utilities===================This is a helper module for creating configs for WireGuard_ VPN for both the server side and theclient side... _WireGuard: https://wireguard.comQuick Start-----------Setup a WireGuard server::    from wireguard import Server    server = Server('myvpnserver.com', '192.168.24.0/24', address='192.168.24.1')    # Write out the server config to the default location: /etc/wireguard/wg0.conf    server.config.write()Create a client within the previously created server::    peer = server.peer('my-client')    # Output this peer's config for copying to the peer device    print(peer.config.local_config)    # Rewrite the server config file including the newly created peer    server.config.write()Create a standalone client::    from wireguard import Peer    peer = Peer('my-client', '192.168.24.0/24', address='192.168.24.45')    # Write out the peer config to the default location: /etc/wireguard/wg0.conf    peer.config.write()**Note**: Both the server and peer config files are named the same by default. This is becausethey would typically be on different machines and would not interfere with one another. Be awareof this when generating peer configs on a server node, or on any node that has a pre-existingwireguard config at the default file location.Other Features--------------You can also pass both the address and subnet in a combined way to `Server`::    # Set the subnet to 192.168.24.0/24 and the server's IP to 192.168.24.51    server = Server('myvpnserver.com', '192.168.24.51/24')A custom JSON encoder is also provided: `wireguard.utils.json.JSONEncoder`. This can be used asthe value for `cls` in any call to `json.dumps()`. As a convenience, it is used automaticallyby both peers and servers when using the `.json()` method. Any arguments provided are passedthrough to `json.dumps()`::    server.json(sort_keys=True, indent=4)which will output::    {        &quot;address&quot;: [            &quot;192.168.24.51&quot;        ],        &quot;allowed_ips&quot;: [            &quot;192.168.24.51/32&quot;        ],        &quot;description&quot;: &quot;myvpnserver.com&quot;,        &quot;dns&quot;: [],        &quot;endpoint&quot;: null,        &quot;interface&quot;: &quot;wg0&quot;,        &quot;keepalive&quot;: null,        &quot;mtu&quot;: null,        &quot;peers&quot;: [],        &quot;post_down&quot;: [],        &quot;post_up&quot;: [],        &quot;pre_down&quot;: [],        &quot;pre_up&quot;: [],        &quot;preshared_key&quot;: null,        &quot;private_key&quot;: &quot;+ZNzpdQKgnuFHGtwDn3EzTZB5J8kYis+UMQ4FALSvtI=&quot;,        &quot;public_key&quot;: &quot;AvteU+hwrtJW4QvDy/xH+rxXzNHQ33LclcQ646xwmFw=&quot;,        &quot;subnet&quot;: [            &quot;192.168.24.0/24&quot;        ],        &quot;table&quot;: null    }**Note**: If you pass the `cls` argument to the `Peer.json()` method, it will override the useof the included custom JSON encoder. Therefore, you will have to handle the appropriate objectswithin the JSON encoder that is being passed.</longdescription>
</pkgmetadata>