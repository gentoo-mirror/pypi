<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>olap.xmla=========This package is meant for accessing xmla datasources - seehttp://en.wikipedia.org/wiki/XML\_for\_AnalysisBuiling=======In this directory, run:::    python setup.py buildTesting=======Tests are done against the Mondrian, SSAS, icCube XMLA providers. ThetestsDiscover module tests behavior with different XMLA providers withthe Discover command while testsExecute does the same with the Executecommand. Note that you likely need to modify the sources if you want totest yourself since they contain specifics (namely the location of theservices and names of the data sources).Sample======Here is an example how to use it:::    import olap.xmla.xmla as xmla    p = xmla.XMLAProvider()    # mondrian    c = p.connect(location=&quot;http://localhost:8080/mondrian/xmla&quot;)    # to analysis services (if iis proxies requests at /olap/msmdpump.dll)    # you will need a valid kerberos principal of course    # c = p.connect(location=&quot;https://my-as-server/olap/msmdpump.dll&quot;,     #               sslverify=&quot;/path/to/my/as-servers-ca-cert.pem&quot;)    # to icCube    # c = p.connect(location=&quot;http://localhost:8282/icCube/xmla&quot;, username=&quot;demo&quot;,     #               password=&quot;demo&quot;)    # getting info about provided data    print c.getDatasources()    print c.getMDSchemaCubes()    # for ssas a catalog is needed, so the call would be like    # get a catalogname from a call to c.getDBSchemaCatalogs()    # c.getMDSchemaCubes(properties={&quot;Catalog&quot;:&quot;a catalogname&quot;})    # execute a MDX (working against the foodmart sample catalog of mondrian)    cmd= &quot;&quot;&quot;select {[Measures].ALLMEMBERS} * {[Time].[1997].[Q2].children} on columns,     [Gender].[Gender].ALLMEMBERS on rows     from [Sales]    &quot;&quot;&quot;    res = c.Execute(cmd, Catalog=&quot;FoodMart&quot;)    #return only the Value property from the cells    res.getSlice(properties=&quot;Value&quot;)    # or two props    res.getSlice(properties=[&quot;Value&quot;, &quot;FmtValue&quot;])     # to return some subcube from the result you can    # return all    res.getSlice()    # carve out the 4th column    res.getSlice(Axis0=3)     # same as above, SlicerAxis is ignored    res.getSlice(Axis0=3, SlicerAxis=0)     # return the data sliced at the 2nd and 3rd row    res.getSlice(Axis1=[1,2])     # return the data sliced at the 2nd and 3rd row and at the 4th column    res.getSlice(Axis0=3, Axis1=[1,2]) Using the procedural interface:::    import olap.xmla.xmla as xmla    p = xmla.XMLAProvider()    c = p.connect(location=&quot;http://localhost:8080/mondrian/xmla&quot;)    s = p.getOLAPSource()    # import olap.interfaces as oi    # oi.IOLAPSource.providedBy(s) == True    s.getCatalogs()    s.getCatalog(&quot;FoodMart&quot;).getCubes()    s.getCatalog(&quot;FoodMart&quot;).getCube(&quot;HR&quot;).getDimensions()    s.getCatalog(&quot;FoodMart&quot;).getCube(&quot;HR&quot;).getDimension(&quot;[Department]&quot;).\    getMembers()    s.getCatalog(&quot;FoodMart&quot;).getCube(&quot;HR&quot;).getDimension(&quot;[Department]&quot;).\    getMember(&quot;[Department].[14]&quot;)    cmd= &quot;&quot;&quot;select {[Measures].ALLMEMBERS} * {[Time].[1997].[Q2].children} on columns,     [Gender].[Gender].ALLMEMBERS on rows     from [Sales]    &quot;&quot;&quot;    res=s.getCatalog(&quot;FoodMart&quot;).query(cmd)    res.getSlice()Note----The contained vs.wsdl originates from the following package:http://www.microsoft.com/en-us/download/confirmation.aspx?id=9388 andwas subsequently modified (which parameters go in the soap header) towork with the suds package.olap.xmlaCHANGES=======0.7.2-----* now relies on requests 1.2.3* fixed race condition in kerberos auth0.7.1-----* kerberos-auth was sent twice0.7---* works now with requests 0.14- and 1.-series of requests* selection of cell properties failed0.6----* dependency on kerberos and s4u2p is now optional* added optional kerberos-sspi package for kerberos on windows through sspi via pywin320.5----* ``as_user`` and ``spn`` are no longer ignored in the kerberos authentication* implemented the procedural interface from olap.interfaces* fixed problem when no sliceraxis info is returned* parameter ``property`` of getSlice now spells ``properties``0.4----* keyword ``kerberos`` is gone. kerberos auth need is detected automatically* ``BeginSession`` and ``EndSession`` provide XMLA Sessionsupport* changes to work with icCube XMLA provider0.3----* changed keyword ``doKerberos`` in XMLProvider.connect to ``kerberos``* added ``sslverify`` keyword to XMLProvider.connect defaulting to ``True``.  This will be handed to requests get method, so you can point it to your certificate bundle file.0.2----* removed dependencies on specific versions in setup.py</longdescription>
</pkgmetadata>