<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyPugJS |PyPiPackage|_ |BuildStatus|_ |Coverage|_===================================================.. |PyPiPackage| image:: https://badge.fury.io/py/pypugjs.svg.. _PyPiPackage: https://badge.fury.io/py/pypugjs.. |BuildStatus| image:: https://travis-ci.org/kakulukia/pypugjs.svg.. _BuildStatus: https://travis-ci.org/kakulukia/pypugjs.. |Coverage| image:: https://codecov.io/gh/kakulukia/pypugjs/branch/master/graph/badge.svg.. _Coverage: https://codecov.io/gh/kakulukia/pypugjs**PyPugJS is a fork of** `PyJade &lt;http://github.com/syrusakbary/pyjade&gt;`_**with the name Jade changed to** `PugJS &lt;https://github.com/pugjs/pug&gt;`_.**Additional disclaimer:** Since the original pypugjs died i took the liberty to keep it alive, becausesince starting to work with the jade compiler for node I hate writing HTML and want to continue using it in my Django projects.I will keep the existing non Django stuff inside the project, but I cannot support anything other since I'm not actively usingit not will be in the foreseable future. Tornado, Mako etc. support will be welcome tho!PyPugJS is a high performance port of PugJS for python, that converts any .pug source into differentTemplate-languages (Django, Jinja2, Mako or Tornado).UTILITIES=========To simply output the conversion to your console::    pypugjs [-c django|jinja|mako|tornado] input.pug [output.html]INSTALLATION============To install pypugjs::    pip install pypugjsNow simply **name your templates with a `.pug` extension** and this PugJS compilerwill do the rest.  Any templates with other extensions will not be compiledwith the pypugjs compiler.`Framework specific installation instructions &lt;docs/installation.rst&gt;`_Syntax======Generally the same as the PugJS Node module (except of cases and several other features, which are not implemented)https://github.com/pugjs/pug/blob/master/README.mdExample-------This code.. code:: pug    !!! 5    html(lang=&quot;en&quot;)      head        title= pageTitle        script(type='text/javascript').          if (foo) {             bar()          }      body        h1.title PugJS - node template engine        #container          if youAreUsingPugJS            p You are amazing          else            p Get on it!Converts to.. code:: html    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;      &lt;head&gt;        &lt;title&gt;{{pageTitle}}&lt;/title&gt;        &lt;script type='text/javascript'&gt;          if (foo) {             bar()          }        &lt;/script&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;h1 class=&quot;title&quot;&gt;PugJS - node template engine&lt;/h1&gt;        &lt;div id=&quot;container&quot;&gt;          {%if youAreUsingPugJS%}            &lt;p&gt;You are amazing&lt;/p&gt;          {%else%}            &lt;p&gt;Get on it!&lt;/p&gt;          {%endif%}        &lt;/div&gt;      &lt;/body&gt;    &lt;/html&gt;Convert existing templates online with the `HTML2Jade converter &lt;http://www.html2jade.org/&gt;`_.Register filters================If you want to register a function as a filter, you only have todecorate the function with ``pypugjs.register_filter(&quot;filter_name&quot;)``.. code:: python    import pypugjs    @pypugjs.register_filter('capitalize')    def capitalize(text, ast):      return text.capitalize()Notable Features===================Adding conditional classes:.. code:: pug    a(class={'active-class': True, 'another': False})Define mixins like this *mixins/foo.pug*:.. code:: pug    mixin foo(data)      .foo {{ data }}And use them in your templates like this:.. code:: pug    include mixins/foo.pug    div      +foo(data)TESTING=======To start the testsuite, start the following commands::    make init    make testTODOs and BUGS==============See: https://github.com/kakulukia/pypugjs/issues`ChangeLog &lt;docs/HISTORY.rst&gt;`_History-------\** django docs: mention not to wrap with django's caching template loader* updated history5.8.1+++++++* mentioning the flask example in the installation section of the docs* prevent endless recursion in Django template overriding5.8.0+++++++* more details/docs for using pypugjs with jinja2* fixed issue with Jinja Choiceloaders5.7.2+++++++* Fix specifying attributes without commas.5.7.1+++++++* code has been blacked5.7.0+++++++* included encoding detection for template files5.6.1+++++++* fixed documentation for the new translation call* fixed typos in code* added min Django version to the docs* new release script5.6.0+++++++* added enable_pug_translations call5.5.1+++++++* fixed wrong exception handling for visitExtends5.5.0+++++++* better caching for django template loader* loader has been made compatible with django 1.115.4.0+++++++* added mixing to flask hello world* Clean pipe inserts whitespace This allows for use of a single pipe character on a line to insert a whitespace before or after a tag.5.3.0+++++++* fixed build script adding back all internal packages5.2.0+++++++* fixed recursive import problem5.1.5+++++++* addeded flake8 testing* sorting out old Django version 1.11 and 2.0 are left for travis testing5.1.4+++++++* better release script5.1.3+++++++* cleanup / documentation* extended makefile5.1.2+++++++* added Makefile for testing, installing, releasing, linting ...* added coverage reports* package is mainly base on the cookiecutter package* additional release helpers* packages passes flake8 test5.1.1+++++++* conditional classes feature (thx to paradoxxxzero)* mixin support for jinja (matin)* mixin support for django* refactored the django tests to actually use the file loader* some pep8 fixesAuthors---------* PyPugs was originally created as PyJade by Syrus Akbary in November 2011.* It was then renamed maintained by Matan Noam Shavit* Since I need it for my projects and hate coding plain HTML, I continued maintaining this package.</longdescription>
</pkgmetadata>