<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gcredstash## Installation1. `pip install gcredstash`## Dependencies`gcredstash` uses following Google Cloud services* Google Cloud KMS* Google DatastoreMake sure `gcredstash` have access to the above services.## IntroductionSoftware systems often need access to some shared credential. For example, your web application needs access to a database password, or an API key for some third party service.`gcredstash` is a very simple, easy to use credential management and distribution system that uses Google Cloud Key Management Service (KMS) for key storage, and Datastore for credential storage.## Usage### Command-line#### Create KeyRing`gcredstash --project-id=&lt;gcp-project-id&gt; --location-id=global create-keyring &lt;your-first-keyring-name&gt;`#### Create CryptoKey in KeyRing`gcredstash --project-id=&lt;gcp-project-id&gt; --location-id=global --keyring-id=&lt;your-keyring-name&gt;  create-key `&lt;your-first-key-name&gt;#### Command-line reference ```usage: gcredstash [-h] [--project-id PROJECT_ID] [--location-id LOCATION_ID]               [--keyring-id KEY_RING_ID] [--key-id KEY_ID]               {create-keyring,create-key,get,put,get-all,list} ...A Credential Management Tool using Google Cloud KMS and Datastorepositional arguments:  {create-keyring,create-key,get,put,get-all,list}                        Try commands like &quot;gcredstash get -h&quot; to get sub command's options    create-keyring      Creates a KeyRing in the given location (e.g. global)    create-key          Creates a CryptoKey within a KeyRing in the given                        location    get                 Get the cipher from KeyStore and decrypted the                        credential    put                 Encrypt the credential and put the cipher on KeyStore    get-all             Get the cipher from KeyStore and decrypted all the                        credentialsoptional arguments:  -h, --help            show this help message and exit  --project-id PROJECT_ID                        GCP Project Id  --location-id LOCATION_ID                        Google Cloud KMS Location Id  --keyring-id KEY_RING_ID                        Google Cloud KMS KeyRing Id  --key-id KEY_ID       Google Cloud KMS CryptoKey Id```#### Set default values in ENVYou can set the default values for project_id, location etc in ENV and `gcredstash` is coded to read those variables,Here is the list of variables `gcredstash` recognises,```GCREDSTASH_GCP_PROJECT_IDGCREDSTASH_DEFAULT_KEY_RING_IDGCREDSTASH_DEFAULT_LOCATION_IDGCREDSTASH_DEFAULT_CRYPTO_KEY_IDGCREDSTASH_DEFAULT_DATASTORE_KIND```### Python Package```# import statementsfrom gcredstash import GoogleKMSfrom gcredstash import KeyStoreimport googleapiclient.discovery# create keystore instancekey_store = KeyStore()# create google kms api client kms_client = googleapiclient.discovery.build('cloudkms', 'v1')# create kms instancekms = GoogleKMS(kms_client, '&lt;project-id&gt;', '&lt;location-id&gt;', '&lt;keyring-id&gt;', key_store) # store credentialkms.put(&lt;crypto-key-id&gt;, &lt;datastore-kind&gt;, &lt;credential-name&gt;, &lt;credential-plaintext&gt;)```#### Class References```class KeyStore(__builtin__.object)    Methods defined here:        __init__(self, project_id=None, namespace=None)        get(self, kind, name)        Get value associated with the name from Datastore        :param kind: Collection name        :param name: Datastore key        :return: str        list(self, kind)        :param kind: Collection name        :return: list of Datastore keys        put(self, kind, name, content)        Put value on the Datastore        :param kind: Collection name        :param name: Datastore key        :param content: value to store        :return:class GoogleKMS(__builtin__.object)    Methods defined here:        __init__(self, client, project_id, location_id, key_ring_id, key_store)        get(self, key_id, kind, name)        Get the cipher from KeyStore and decrypted the credential        :param key_id: CryptKey id        :param kind: Keystore collection name        :param name: Name of the credential to fetch ex: PRODUCTION_DATABASE_PASSWORD        :return: Decrypted text        get_all(self, key_id, kind)        Get the cipher from KeyStore and decrypted all the credentials        :param key_id: CryptKey id        :param kind: Keystore collection name                :return: Dictionary of credentials        put(self, key_id, kind, name, value)        Encrypt the credential and put the cipher on KeyStore        :param key_id: CryptKey id        :param kind: Keystore collection name        :param name: Name of the credential to store ex: PRODUCTION_DATABASE_PASSWORD        :param value: Value for the credential        :return:        put_all(self, key_id, kind, credentials)        Encrypt all the credential and store the cipher on KeyStore        :param key_id: CryptKey id        :param kind: Keystore collection name        :param credentials: Credentials {name: value} dictionary                :return:        ----------------------------------------------------------------------    Static methods defined here:        create_key(client, project_id, location_id, key_ring_id, key_id)        Creates a CryptoKey within a KeyRing in the given location        :param client: Google Cloud KMS client        :param project_id: GCP Project id        :param location_id: KeyRing location id        :param key_ring_id: KeyRing id inside the location        :param key_id: New unique key name        :return: Key creation response object        create_key_ring(client, project_id, location_id, key_ring_id)        Creates a KeyRing in the given location (e.g. global)        :param client: Google Cloud KMS client        :param project_id: GCP Project Id        :param location_id: KeyRing location id        :param key_ring_id: New unique key ring name        :return: KeyRing creation response object```## Credits* https://github.com/fugue/credstash* https://github.com/tly1980/gcreds</longdescription>
</pkgmetadata>