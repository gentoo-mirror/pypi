<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Usage`chompjs` can be used in web scrapping for turning JavaScript objects embedded in pages into valid Python dictionaries.```python&gt;&gt;&gt; import chompjs&gt;&gt;&gt; chompjs.parse_js_object('{&quot;my_data&quot;: &quot;test&quot;}'){u'my_data': u'test'}```Think of it as a more powerful `json.loads`. For example, it can handle JSON objects containing embedded methods by storing their code in a string:```python&gt;&gt;&gt; import chompjs&gt;&gt;&gt; js = &quot;&quot;&quot;... var myObj = {...     myMethod: function(params) {...         // ......     },...     myValue: 100... }... &quot;&quot;&quot;&gt;&gt;&gt; chompjs.parse_js_object(js, json_params={'strict': False}){'myMethod': 'function(params) {\n        // ...\n    }', 'myValue': 100}```An example usage with `scrapy`:```pythonimport chompjsimport scrapyclass MySpider(scrapy.Spider):    # ...    def parse(self, response):        script_css = 'script:contains(&quot;__NEXT_DATA__&quot;)::text'        script_pattern = r'__NEXT_DATA__ = (.*);'        # warning: for some pages you need to pass replace_entities=True        # into re_first to have JSON escaped properly        script_text = response.css(script_css).re_first(script_pattern)        try:            json_data = chompjs.parse_js_object(script_text)        except ValueError:            self.log('Failed to extract data from {}'.format(response.url))            return        # work on json_data```If the input string is not yet escaped and contains a lot of `\\` characters, then `unicode_escape=True` argument might help to sanitize it:```python&gt;&gt;&gt; chompjs.parse_js_object('{\\\&quot;a\\\&quot;: 12}', unicode_escape=True){u'a': 12}````jsonlines=True` can be used to parse JSON Lines:```python&gt;&gt;&gt; chompjs.parse_js_object('[1,2]\n[2,3]\n[3,4]', jsonlines=True)[[1, 2], [2, 3], [3, 4]]```By default `chompjs` tries to start with first `{` or `[` character it founds, omitting the rest:```python&gt;&gt;&gt; chompjs.parse_js_object('&lt;div&gt;...&lt;/div&gt;&lt;script&gt;foo = [1, 2, 3];&lt;/script&gt;&lt;div&gt;...&lt;/div&gt;')[1, 2, 3]````json_params` argument can be used to pass options to underlying `json_loads`, such as `strict` or `object_hook`:```python&gt;&gt;&gt; import decimal&gt;&gt;&gt; import chompjs&gt;&gt;&gt; chompjs.parse_js_object('[23.2]', json_params={'parse_float': decimal.Decimal})[Decimal('23.2')]```# RationaleIn web scraping data often is not present directly inside HTML, but instead provided as an embedded JavaScript object that is later used to initialize the page, for example:```html&lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;...&lt;script type=&quot;text/javascript&quot;&gt;window.__PRELOADED_STATE__={&quot;foo&quot;: &quot;bar&quot;}&lt;/script&gt;...&lt;/body&gt;&lt;/html&gt;```Standard library function `json.loads` is usually sufficient to extract this data:```python&gt;&gt;&gt; # scrapy shell file:///tmp/test.html&gt;&gt;&gt; import json&gt;&gt;&gt; script_text = response.css('script:contains(__PRELOADED_STATE__)::text').re_first('__PRELOADED_STATE__=(.*)')&gt;&gt;&gt; json.loads(script_text){u'foo': u'bar'}```The problem is that not all valid JavaScript objects are also valid JSONs. For example all those strings are valid JavaScript objects but not valid JSONs:* `&quot;{'a': 'b'}&quot;` is not a valid JSON because it uses `'` character to quote* `'{a: &quot;b&quot;}'`is not a valid JSON because property name is not quoted at all* `'{&quot;a&quot;: [1, 2, 3,]}'` is not a valid JSON because there is an extra `,` character at the end of the array* `'{&quot;a&quot;: .99}'` is not a valid JSON because float value lacks a leading 0As a result, `json.loads` fail to extract any of those:```&gt;&gt;&gt; json.loads(&quot;{'a': 'b'}&quot;)Traceback (most recent call last):  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;  File &quot;/usr/lib/python2.7/json/__init__.py&quot;, line 339, in loads    return _default_decoder.decode(s)  File &quot;/usr/lib/python2.7/json/decoder.py&quot;, line 364, in decode    obj, end = self.raw_decode(s, idx=_w(s, 0).end())  File &quot;/usr/lib/python2.7/json/decoder.py&quot;, line 380, in raw_decode    obj, end = self.scan_once(s, idx)ValueError: Expecting property name: line 1 column 2 (char 1)&gt;&gt;&gt; json.loads('{a: &quot;b&quot;}')Traceback (most recent call last):  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;  File &quot;/usr/lib/python2.7/json/__init__.py&quot;, line 339, in loads    return _default_decoder.decode(s)  File &quot;/usr/lib/python2.7/json/decoder.py&quot;, line 364, in decode    obj, end = self.raw_decode(s, idx=_w(s, 0).end())  File &quot;/usr/lib/python2.7/json/decoder.py&quot;, line 380, in raw_decode    obj, end = self.scan_once(s, idx)ValueError: Expecting property name: line 1 column 2 (char 1)&gt;&gt;&gt; json.loads('{&quot;a&quot;: [1, 2, 3,]}')Traceback (most recent call last):  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;  File &quot;/usr/lib/python2.7/json/__init__.py&quot;, line 339, in loads    return _default_decoder.decode(s)  File &quot;/usr/lib/python2.7/json/decoder.py&quot;, line 364, in decode    obj, end = self.raw_decode(s, idx=_w(s, 0).end())  File &quot;/usr/lib/python2.7/json/decoder.py&quot;, line 382, in raw_decode    raise ValueError(&quot;No JSON object could be decoded&quot;)ValueError: No JSON object could be decoded&gt;&gt;&gt; json.loads('{&quot;a&quot;: .99}')Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;/usr/lib/python3.7/json/__init__.py&quot;, line 348, in loads    return _default_decoder.decode(s)  File &quot;/usr/lib/python3.7/json/decoder.py&quot;, line 337, in decode    obj, end = self.raw_decode(s, idx=_w(s, 0).end())  File &quot;/usr/lib/python3.7/json/decoder.py&quot;, line 355, in raw_decode    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from Nonejson.decoder.JSONDecodeError: Expecting value: line 1 column 7 (char 6)````chompjs` library was designed to bypass this limitation, and it allows to scrape such JavaScript objects into proper Python dictionaries:```&gt;&gt;&gt; import chompjs&gt;&gt;&gt; &gt;&gt;&gt; chompjs.parse_js_object(&quot;{'a': 'b'}&quot;){u'a': u'b'}&gt;&gt;&gt; chompjs.parse_js_object('{a: &quot;b&quot;}'){u'a': u'b'}&gt;&gt;&gt; chompjs.parse_js_object('{&quot;a&quot;: [1, 2, 3,]}'){u'a': [1, 2, 3]}```Internally `chompjs` use a parser written in C to iterate over raw string, fixing its issues along the way. The final result is then passed down to standard library's `json.loads`, ensuring a high speed as compared to full-blown JavaScript parsers such as `demjson`.```&gt;&gt;&gt; import json&gt;&gt;&gt; import _chompjs&gt;&gt;&gt; &gt;&gt;&gt; _chompjs.parse('{a: 1}')'{&quot;a&quot;:1}'&gt;&gt;&gt; json.loads(_){u'a': 1}&gt;&gt;&gt; chompjs.parse_js_object('{&quot;a&quot;: .99}'){'a': 0.99}```# InstallationFrom PIP:```bash$ python3 -m venv venv$ . venv/bin/activate# pip install chompjs```From sources:```bash$ git clone https://github.com/Nykakin/chompjs$ cd chompjs$ python setup.py build$ python setup.py install```To run unittests```$ python -m unittest```</longdescription>
</pkgmetadata>