<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Multi Weather APIConsistent Python bindings for select commercial weather station APIs, such as [Zentra Cloud](https://zentracloud.com/) REST API v3, created for [MSU EnviroWeather Project](https://michiganstate.sharepoint.com/sites/MSUITADSDataScience/Shared%20Documents/Forms/AllItems.aspx?id=%2Fsites%2FMSUITADSDataScience%2FShared%20Documents%2FClients%2FEnviroWeather&amp;viewid=554d191e%2Def24%2D4e36%2Dbc88%2D12660f0e0f8d).### BackgroundThis is inspired by python bindings for v1 of the Zentra API from the Montana Climate office : MSU Agricultural Weather OfficeThe EnviroWeather system from the MSU Agricultural Weather Office will interface with weather stations (select list of vendors) deployed and owned privately. Since each vendor has a differrent REST/Web API to access station's weather data, this package aims to provide a consistent interface to all of those stations in order to make it easy for incoporating them into a data pipeline.### InstallationThe Multi-Weather API is currently available on [PyPI](https://pypi.org/project/multiweatherapi/). Install using `pip`:```bashpip install multiweatherapi```### Usage```python&gt;&gt;&gt; from multiweatherapi import multiweatherapi&gt;&gt;&gt; param = {'sn': 'STATION_ID',...          'apikey': 'API_KEY',...          'apisec': 'API_SECRET'}&gt;&gt;&gt; resp = multiweatherapi.get_reading('davis', **param)&gt;&gt;&gt; resp.resp_raw # raw JSON response of the reading&gt;&gt;&gt; resp.resp_parsed # parsed JSON response into list of dict for EnviroWeather project```Refer to the respective link below for parameter and authentication requirements of weather station vendor APIs- [Zentra](docs/zentra.md)- [Spectrum](docs/spectrum.md)- [Onset](docs/onset.md)- [Davis](docs/davis.md)- [Rainwise](docs/rainwise.md)- [Campbell](docs/campbell.md) ### Supported Python VersionsPython 3.6 and higher are supported.### Supported Station Time ZonesCurrently following time zones are supported:| Name | Description || ---- | ----------- || HT   | US/Hawaii   || AT   | US/Alaska   || PT   | US/Pacific  || MT   | US/Mountain || CT   | US/Central  || ET   | US/Eastern  |### Requirements- [Requests](https://docs.python-requests.org/en/latest/)- [pytz](https://pythonhosted.org/pytz/)- [pytest](https://docs.pytest.org/en/7.1.x/)- [python-dotenv](https://saurabh-kumar.com/python-dotenv/)### Outputs- API Response (JSON)  The (raw) API response is formatted in JSON and 0th element illustrates the metadata of the API call and 1st (and onward - Davis stations) element(s) depicts weather station measurements retrieved from the API call.  ```json  [    {      &quot;vendor&quot;: &quot;spectrum&quot;,      &quot;station_id&quot;: &quot;50400123&quot;,      &quot;start_datetime&quot;: &quot;2022-05-26 12:08:07&quot;,      &quot;end_datetime&quot;: &quot;2022-05-26 13:08:07&quot;,      &quot;timezone&quot;: &quot;ET&quot;,      &quot;request_time&quot;: &quot;2022-05-27 12:08:07&quot;,      &quot;python_binding_version&quot;: &quot;0.0.17&quot;    },    {      &quot;EquipmentRecords&quot;: [        {          &quot;SerialNumber&quot;: &quot;50400123&quot;,          &quot;TimeStamp&quot;: &quot;2022-05-26T16:10:00&quot;,          &quot;SensorData&quot;: [            {              &quot;ChannelNumber&quot;: 0,              &quot;PortNumber&quot;: &quot;A&quot;,              &quot;SensorNumber&quot;: 0,              &quot;SensorType&quot;: &quot;Rainfall&quot;,              &quot;TimeStamp&quot;: &quot;2022-05-26T16:10:00&quot;,              &quot;FormattedTimeStamp&quot;: &quot;2022-05-26 16:10&quot;,              &quot;Value&quot;: &quot;0.00&quot;,              &quot;AccumlatedValue&quot;: &quot;0.00&quot;,              &quot;DecimalValue&quot;: 0.0,              &quot;AccumlatedDecimalValue&quot;: 0.0,              &quot;Units&quot;: &quot;inches&quot;,              &quot;ValueType&quot;: &quot;Average&quot;            },            ...    }  ]  ```- Transformed Response (List of Dict)  The transformed response is formatted in `list` (array) of Python `dict` object. Each `dict` object consists of that measurements that stakeholders are interested in and the metadata that would be used to facilitate data loading into the backend.  ```json  [    {      &quot;station_id&quot;: &quot;50400123&quot;,      &quot;request_datetime&quot;: &quot;2022-05-27 12:08:07&quot;,      &quot;pcpn&quot;: 0.0,      &quot;data_datetime&quot;: &quot;2022-05-26 16:10&quot;,      &quot;atemp&quot;: 21.0,      &quot;relh&quot;: &quot;92.3&quot;    },    ...  ]  ```### LicenseReleased under the MIT License### Testing the packageIf you want to test without installing via PIP, there is a script`get_sample_data.py`  in the main directory which requires a configuration file named '.env' in the root folder. ```bash$ pip install -r requirements.txt$ python get_sample_data.py rainwise /Users/jhp/Desktop/```Please refer to [docs/get_sample_data.md](docs/get_sample_data.md) for detail documentation of `get_sample_data.py` see also [docs/Test Suite Doco.py](docs/Test%20Suite%20Doco.md) for more formal tests and how to provide station configuration file</longdescription>
</pkgmetadata>