<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cramjam-python[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)[![CI](https://github.com/milesgranger/pyrus-cramjam/workflows/CI/badge.svg?branch=master)](https://github.com/milesgranger/pyrus-cramjam/actions?query=branch=master)[![PyPI](https://img.shields.io/pypi/v/cramjam.svg)](https://pypi.org/project/cramjam)[![Anaconda-Server Badge](https://anaconda.org/conda-forge/cramjam/badges/version.svg)](https://anaconda.org/conda-forge/cramjam)[![Downloads](https://pepy.tech/badge/cramjam/month)](https://pepy.tech/project/cramjam)[API Documentation](https://docs.rs/cramjam)### Install```commandlinepip install --upgrade cramjam  # Requires no Python or system dependencies!```### CLIA CLI interface is available as [`cramjam-cli`](./../cramjam-cli)---Extremely thin Python bindings to de/compression algorithms in Rust.Allows for using algorithms such as Snappy, without any system dependencies.This is handy when being used in environments like AWS Lambda, where installingpackages like `python-snappy` becomes difficult because of system level dependencies.---##### BenchmarksSome basic benchmarks are available [in the benchmarks directory](./benchmarks/README.md)---Available algorithms:- [X] Snappy- [X] Brotli- [X] Bzip2- [X] Lz4- [X] Gzip- [X] Deflate- [X] ZSTDAll available for use as:```python&gt;&gt;&gt; import cramjam&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; compressed = cramjam.snappy.compress(b&quot;bytes here&quot;)&gt;&gt;&gt; decompressed = cramjam.snappy.decompress(compressed)&gt;&gt;&gt; decompressedcramjam.Buffer(len=10)  # an object which implements the buffer protocol&gt;&gt;&gt; bytes(decompressed)b&quot;bytes here&quot;&gt;&gt;&gt; np.frombuffer(decompressed, dtype=np.uint8)array([ 98, 121, 116, 101, 115,  32, 104, 101, 114, 101], dtype=uint8)```Where the API is `cramjam.&lt;compression-variant&gt;.compress/decompress` and accepts `bytes`/`bytearray`/`numpy.array`/`cramjam.File`/`cramjam.Buffer` objects.**de/compress_into**Additionally, all variants support `decompress_into` and `compress_into`. Ex.```python&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from cramjam import snappy, Buffer&gt;&gt;&gt;&gt;&gt;&gt; data = np.frombuffer(b'some bytes here', dtype=np.uint8)&gt;&gt;&gt; dataarray([115, 111, 109, 101,  32,  98, 121, 116, 101, 115,  32, 104, 101,       114, 101], dtype=uint8)&gt;&gt;&gt;&gt;&gt;&gt; compressed = Buffer()&gt;&gt;&gt; snappy.compress_into(data, compressed)33  # 33 bytes written to compressed buffer&gt;&gt;&gt;&gt;&gt;&gt; compressed.tell()  # Where is the buffer position?33  # goodie!&gt;&gt;&gt;&gt;&gt;&gt; compressed.seek(0)  # Go back to the start of the buffer so we can prepare to decompress&gt;&gt;&gt; decompressed = b'0' * len(data)  # let's write to `bytes` as output&gt;&gt;&gt; decompressedb'000000000000000'&gt;&gt;&gt;&gt;&gt;&gt; snappy.decompress_into(compressed, decompressed)15  # 15 bytes written to decompressed&gt;&gt;&gt; decompressedb'some bytes here'```**Special note!**  If you know the length of the de/compress output, youcan provide `output_len=&lt;&lt;some int&gt;&gt;` to any `de/compress`to get ~1.5-3x performance increase as this allows single buffer allocation; doesn't really apply if you're using `cramjam.Buffer`or `cramjam.File` objects.</longdescription>
</pkgmetadata>