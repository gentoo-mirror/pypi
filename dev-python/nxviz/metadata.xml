<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nxviz: Composable and rational network visualizations in matplotlib`nxviz` is a package for building _rational_ network visualizationsusing matplotlib as a backend.Inspired heavily by the principles espoused in the grammar of graphics,nxviz provides ways to _compose_ a graph visualization togetherby adhering to the following recipe:1. Prioritize node placement, mapping data to position and visual properties,2. Draw in edges, mapping data to visual properties,3. Add in annotations and highlights on the graph.`nxviz` is simultaneously a data visualization research project,art project,and declarative data visualization tool.We hope you enjoy using it to build beautiful graph visualizations.## Installation### Official Releases`nxviz` is available on PyPI:```bashpip install nxviz```It's also available on conda-forge:```bashconda install -c conda-forge nxviz```### Pre-releasesPre-releases are done by installing directly from git:```bashpip install git+https://github.com/ericmjl/nxviz.git```## QuickstartTo make a Circos plot:```python# We assume you have a graph G that is a NetworkX graph object.# In this example, all nodes possess the &quot;group&quot; and &quot;value&quot; node attributes# where &quot;group&quot; is categorical and &quot;value&quot; is continuous,# and all edges have the &quot;edge_value&quot; node attribute as well.import nxviz as nvax = nv.circos(    G,    group_by=&quot;group&quot;,    sort_by=&quot;value&quot;,    node_color_by=&quot;group&quot;,    edge_alpha_by=&quot;edge_value&quot;)nv.annotate.circos_group(G, group_by=&quot;group&quot;)```![](images/circos.png)For more examples, including other plots that can be made,please see the examples gallery on the docs.</longdescription>
</pkgmetadata>