<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Dragonfly=========|Build Status||Docs Status||Join Gitter chat||Join Matrix chat|.. contents:: ContentsIntroduction----------------------------------------------------------------------------Dragonfly is a speech recognition framework for Python that makes itconvenient to create custom commands to use with speech recognitionsoftware. It was written to make it very easy for Python macros, scripts,and applications to interface with speech recognition engines. Its designallows speech commands and grammar objects to be treated as first-classPython objects.Dragonfly can be used for general programming by voice. It is flexibleenough to allow programming in any language, not just Python. It can also beused for speech-enabling applications, automating computer activitiesand dictating prose.Dragonfly contains its own powerful framework for defining and executingactions. It includes actions for text input and key-stroke simulation. Thisframework is cross-platform, working on Windows, macOS and Linux (X11 only).See the `actions sub-package documentation&lt;https://dragonfly2.readthedocs.io/en/latest/actions.html&gt;`__for more information, including code examples.This project is a fork of the original`t4ngo/dragonfly &lt;https://github.com/t4ngo/dragonfly&gt;`__ project.Dragonfly currently supports the following speech recognition engines:-  *Dragon*, a product of *Nuance*. All versions up to 15 (the latest)   should be supported. *Home*, *Professional Individual* and previous   similar editions of *Dragon* are supported. Other editions may work too-  *Windows Speech Recognition* (WSR), included with Microsoft Windows   Vista, Windows 7+, and freely available for Windows XP-  *Kaldi*, open source (AGPL) and multi-platform.-  *CMU Pocket Sphinx*, open source and multi-platform.Documentation and FAQ----------------------------------------------------------------------------Dragonfly's documentation is available online at `Read theDocs &lt;http://dragonfly2.readthedocs.org/en/latest/&gt;`__. The changes ineach release are listed in the project's `changelog&lt;https://github.com/dictation-toolbox/dragonfly/blob/master/CHANGELOG.rst&gt;`__.Dragonfly's FAQ is available in the documentation `here&lt;https://dragonfly2.readthedocs.io/en/latest/faq.html&gt;`__.There are also a number of Dragonfly-related questions on `Stackoverflow&lt;http://stackoverflow.com/questions/tagged/python-dragonfly&gt;`_, althoughmany of them are related to issues resolved in the latest version ofDragonfly.CompoundRule Usage example----------------------------------------------------------------------------A very simple example of Dragonfly usage is to create a static voicecommand with a callback that will be called when the command is spoken.This is done as follows:..  code-block:: python    from dragonfly import Grammar, CompoundRule    # Voice command rule combining spoken form and recognition processing.    class ExampleRule(CompoundRule):        spec = &quot;do something computer&quot;                  # Spoken form of command.        def _process_recognition(self, node, extras):   # Callback when command is spoken.            print(&quot;Voice command spoken.&quot;)    # Create a grammar which contains and loads the command rule.    grammar = Grammar(&quot;example grammar&quot;)                # Create a grammar to contain the command rule.    grammar.add_rule(ExampleRule())                     # Add the command rule to the grammar.    grammar.load()                                      # Load the grammar.To use this example, save it in a command module in your module loaderdirectory or Natlink user directory, load it and then say *do somethingcomputer*. If the speech recognition engine recognized the command, then``Voice command spoken.`` will be printed in the Natlink messages window.If you're not using Dragon, then it will be printed into the console window.MappingRule usage example----------------------------------------------------------------------------A more common use of Dragonfly is the ``MappingRule`` class, which allowsdefining multiple voice commands. The following example is a simple grammarto be used when Notepad is the foreground window:..  code-block:: python    from dragonfly import (Grammar, AppContext, MappingRule, Dictation,                           Key, Text)    # Voice command rule combining spoken forms and action execution.    class NotepadRule(MappingRule):        # Define the commands and the actions they execute.        mapping = {            &quot;save [file]&quot;:            Key(&quot;c-s&quot;),            &quot;save [file] as&quot;:         Key(&quot;a-f, a/20&quot;),            &quot;save [file] as &lt;text&gt;&quot;:  Key(&quot;a-f, a/20&quot;) + Text(&quot;%(text)s&quot;),            &quot;find &lt;text&gt;&quot;:            Key(&quot;c-f/20&quot;) + Text(&quot;%(text)s\n&quot;),        }        # Define the extras list of Dragonfly elements which are available        # to be used in mapping specs and actions.        extras = [            Dictation(&quot;text&quot;)        ]    # Create the grammar and the context under which it'll be active.    context = AppContext(executable=&quot;notepad&quot;)    grammar = Grammar(&quot;Notepad example&quot;, context=context)    # Add the command rule to the grammar and load it.    grammar.add_rule(NotepadRule())    grammar.load()To use this example, save it in a command module in your module loaderdirectory or Natlink user directory, load it, open a Notepad window and thensay one of mapping commands. For example, saying *save* or *save file* willcause the control and S keys to be pressed.The example aboves don't show any of Dragonfly's exciting features, such asdynamic speech elements. To learn more about these, please take a look at`Dragonfly's online docs &lt;http://dragonfly2.readthedocs.org/en/latest/&gt;`__.Installation----------------------------------------------------------------------------Dragonfly is a Python package. It can be installed as *dragonfly2* usingpip:.. code:: shell    pip install dragonfly2The distribution name has been changed to *dragonfly2* in order toupload releases to PyPI.org, but everything can still be imported using*dragonfly*. If you use any grammar modules that include something like:code:`pkg_resources.require(&quot;dragonfly &gt;= 0.6.5&quot;)`, you will need to eitherreplace :code:`dragonfly` with :code:`dragonfly2` or remove lines like thisaltogether.If you are installing this on Linux, you will also need to install the`wmctrl &lt;https://www.freedesktop.org/wiki/Software/wmctrl/&gt;`__, `xdotool&lt;https://www.semicomplete.com/projects/xdotool/&gt;`__ and `xsel&lt;http://www.vergenet.net/~conrad/software/xsel/&gt;`__ programs. You mayalso need to manually set the ``XDG_SESSION_TYPE`` environment variable to``x11``.Please note that Dragonfly is only fully functional in an X11 session onLinux. Input action classes, application contexts and the ``Window`` classwill **not** be functional under Wayland. It is recommended that Waylandusers switch to X11.If you have dragonfly installed under the original *dragonfly*distribution name, you'll need to remove the old version using:.. code:: shell    pip uninstall dragonflyDragonfly can also be installed by cloning this repository ordownloading it from `the releasespage &lt;https://github.com/dictation-toolbox/dragonfly/releases&gt;`__ andrunning the following (or similar) command in the project's rootdirectory:.. code:: shell    python setup.py installIf pip fails to install *dragonfly2* or any of its required or extradependencies, then you may need to upgrade pip with the following command:.. code:: shell    pip install --upgrade pipSR engine back-ends----------------------------------------------------------------------------Each Dragonfly speech recognition engine back-end and its requirements aredocumented separately:* `Natlink and DNS engine  &lt;http://dragonfly2.readthedocs.org/en/latest/natlink_engine.html&gt;`_* `SAPI 5 and WSR engine  &lt;http://dragonfly2.readthedocs.org/en/latest/sapi5_engine.html&gt;`_* `Kaldi engine  &lt;http://dragonfly2.readthedocs.org/en/latest/kaldi_engine.html&gt;`_* `CMU Pocket Sphinx engine  &lt;http://dragonfly2.readthedocs.org/en/latest/sphinx_engine.html&gt;`_* `Text-input engine  &lt;http://dragonfly2.readthedocs.org/en/latest/text_engine.html&gt;`_Existing command modules----------------------------------------------------------------------------The related resources page of Dragonfly's documentation has a section on`commandmodules &lt;http://dragonfly2.readthedocs.org/en/latest/related_resources.html#command-modules&gt;`__which lists various sources... |Build Status| image:: https://travis-ci.org/dictation-toolbox/dragonfly.svg?branch=master   :target: https://travis-ci.org/dictation-toolbox/dragonfly.. |Docs Status| image:: https://readthedocs.org/projects/dragonfly2/badge/?version=latest&amp;style=flat   :target: https://dragonfly2.readthedocs.io.. |Join Gitter chat| image:: https://badges.gitter.im/Join%20Chat.svg   :target: https://gitter.im/dictation-toolbox/dragonfly.. |Join Matrix chat| image:: https://img.shields.io/matrix/dragonfly2:matrix.org.svg?label=%5Bmatrix%5D   :target: https://app.element.io/#/room/#dictation-toolbox_dragonfly:gitter.im</longdescription>
</pkgmetadata>