<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># componentize-py**A [Bytecode Alliance](https://bytecodealliance.org/) project**This is a tool to convert a Python application to a [WebAssemblycomponent](https://github.com/WebAssembly/component-model).  It takes thefollowing as input:- a [WIT](https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md) file or directory- the name of a [WIT world](https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-worlds) defined in the above file or directory- the name of a Python module which targets said world- a list of directories in which to find the Python module and its dependenciesThe output is a component which may be run usinge.g. [`wasmtime`](https://github.com/bytecodealliance/wasmtime).## Getting StartedFirst, install [Python 3.10 or later](https://www.python.org/) and[pip](https://pypi.org/project/pip/) if you don't already have them.  Then,install `componentize-py`:```shellpip install componentize-py```Next, create or download the WIT world you'd like to target, e.g.:```shellcat &gt;hello.wit &lt;&lt;EOFpackage example:helloworld hello {  export hello: func() -&gt; string}EOF```If you're using an IDE or just want to examine the bindings produced for the WITworld, you can generate them using the `bindings` subcommand:```shellcomponentize-py -d hello.wit -w hello bindings .```Then, use the `hello` module produced by the command above to write your app:```shellcat &gt;app.py &lt;&lt;EOFimport helloclass Hello(hello.Hello):    def hello(self) -&gt; str:        return &quot;Hello, World!&quot;EOF```And finally generate the component:```shellcomponentize-py -d hello.wit -w hello componentize app -o app.wasm```See the[examples](https://github.com/bytecodealliance/componentize-py/tree/main/examples)directories for more examples, including various ways to run the components you'vecreated.For an example of running a sandboxed Python guest within a Python host, see[component-sandbox-demo](https://github.com/dicej/component-sandbox-demo).## Known LimitationsThis project does not yet support [WITresources](https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-resource)or [interfaceversions](https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#package-declaration).Both are coming soon.Currently, the application can only import dependencies during build time, whichmeans any imports used at runtime must be resolved at the top level of theapplication module.  For example, if `x` is a module with a submodule named `y`the following may not work:```pythonimport xclass Hello(hello.Hello):    def hello(self) -&gt; str:        return x.y.foo()```That's because importing `x` does not necessarily resolve `y`.  This can beaddressed by modifying the code to import `y` at the top level of the file:```pythonfrom x import yclass Hello(hello.Hello):    def hello(self) -&gt; str:        return y.foo()```This limitation is being tracked as [issue#23](https://github.com/bytecodealliance/componentize-py/issues/23).See [the issue tracker](https://github.com/bytecodealliance/componentize-py/issues) for other known issues.## ContributingSee[CONTRIBUTING.md](https://github.com/bytecodealliance/componentize-py/tree/main/CONTRIBUTING.md)for details on how to contribute to the project and build it from source.</longdescription>
</pkgmetadata>