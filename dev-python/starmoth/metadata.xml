<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MOdel Test Harness (Moth)Simple way to interrogate your AI model from a separate testing application# Quickstart`moth server &lt;folder path&gt;``moth client`# ClientSimplest possible classification model client.``` pythonfrom moth import Mothfrom moth.message import ImagePromptMsg, ClassificationResultMsg, HandshakeTaskTypesmoth = Moth(&quot;my-ai&quot;, task_type=HandshakeTaskTypes.CLASSIFICATION)@moth.promptdef on_prompt(prompt: ImagePromptMsg):    # TODO: Do smart AI here    return ClassificationResultMsg(prompt_id=prompt.id, class_name=&quot;cat&quot;) # Most pictures are cat pictures moth.run()```Simplest possible object detection model client.``` pythonfrom moth import Mothfrom moth.message import ImagePromptMsg, ObjectDetectionResultMsg, ObjectDetectionResult, HandshakeTaskTypesmoth = Moth(&quot;my-ai&quot;, task_type=HandshakeTaskTypes.OBJECT_DETECTION)@moth.promptdef on_prompt(prompt: ImagePromptMsg):    # TODO: Do smart AI here    # Make a list of ObjectDetectionResults    l = []    l.append(ObjectDetectionResult(0, 0, 50, 50, class_name=&quot;cat&quot;, class_index=0, confidence=0.9))    l.append(ObjectDetectionResult(10, 10, 50, 35, class_name=&quot;dog&quot;, class_index=1, confidence=0.1))    return ObjectDetectionResultMsg(prompt_id=prompt.id, object_detection_results=l) moth.run()```You can also define a set of client output classes that get handed over to the server.``` pythonmoth = Moth(&quot;my-ai&quot;, task_type=HandshakeTaskTypes.CLASSIFICATION, output_classes=[&quot;cat&quot;, &quot;dog&quot;])```# ServerSimplest possible server.``` pythonfrom moth.server import Serverfrom moth.message import HandshakeMsgclass ModelDriverImpl(ModelDriver):    # TODO: Implement your model driver here    passserver = Server(7171)@server.driver_factorydef handle_handshake(handshake: HandshakeMsg) -&gt; ModelDriver    return ModelDriverImpl()```You can also register to keep an up to datae list of connected models.``` pythonfrom moth.server import Model@server.on_model_changedef handle_model_change(model_list: List[Model]):    print(f&quot;Connected models: {model_list}&quot;)```</longdescription>
</pkgmetadata>