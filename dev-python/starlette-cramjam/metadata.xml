<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># starlette-cramjam&lt;p align=&quot;center&quot;&gt;  &lt;em&gt;Cramjam integration for Starlette ASGI framework.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/developmentseed/starlette-cramjam/actions?query=workflow%3ACI&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://github.com/developmentseed/starlette-cramjam/workflows/CI/badge.svg&quot; alt=&quot;Test&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/developmentseed/starlette-cramjam&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://codecov.io/gh/developmentseed/starlette-cramjam/branch/master/graph/badge.svg&quot; alt=&quot;Coverage&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/starlette-cramjam&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/v/starlette-cramjam?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypistats.org/packages/starlette-cramjam&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/dm/starlette-cramjam.svg&quot; alt=&quot;Downloads&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/developmentseed/starlette-cramjam/blob/master/LICENSE&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/github/license/developmentseed/starlette-cramjam.svg&quot; alt=&quot;Downloads&quot;&gt;  &lt;/a&gt;&lt;/p&gt;---**Source Code**: &lt;a href=&quot;https://github.com/developmentseed/starlette-cramjam&quot; target=&quot;_blank&quot;&gt;https://github.com/developmentseed/starlette-cramjam&lt;/a&gt;---The `starlette-cramjam` middleware aims to provide a unique Compression middleware to support **Brotli**, **GZip** and **Deflate** compression algorithms with a minimal requirement.The middleware will compress responses for any request that includes &quot;br&quot;, &quot;gzip&quot; or &quot;deflate&quot; in the Accept-Encoding header.As for the official `Starlette` middleware, the one provided by `starlette-cramjam` will handle both standard and streaming responses.`stralette-cramjam` is built on top of [pyrus-cramjam](https://github.com/milesgranger/pyrus-cramjam) an *Extremely thin Python bindings to de/compression algorithms in Rust*.## InstallationYou can install `starlette-cramjam` from pypi```python$ pip install -U pip$ pip install starlette-cramjam```or install from source:```bash$ pip install -U pip$ pip install https://github.com/developmentseed/starlette-cramjam.git```## UsageThe following arguments are supported:- **compression** (List of Compression) - List of available compression algorithm. **This list also defines the order of preference**. Defaults to `[Compression.gzip, Compression.deflate, Compression.br]`,- **minimum_size** (Integer) - Do not compress responses that are smaller than this minimum size in bytes. Defaults to `500`.- **exclude_path** (Set of string) - Do not compress responses in response to specific `path` requests. Entries have to be valid regex expressions. Defaults to `{}`.- **exclude_mediatype** (Set of string) - Do not compress responses of specific media type (e.g `image/png`). Defaults to `{}`.#### Minimal (defaults) example```pythonimport uvicornfrom starlette.applications import Starlettefrom starlette.responses import PlainTextResponsefrom starlette_cramjam.middleware import CompressionMiddleware# create applicationapp = Starlette()# register the CompressionMiddlewareapp.add_middleware(CompressionMiddleware)@app.route(&quot;/&quot;)def index(request):    return PlainTextResponse(&quot;Hello World&quot;)if __name__ == &quot;__main__&quot;:    uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8000)```#### Using options```pythonimport uvicornfrom starlette.applications import Starlettefrom starlette.responses import PlainTextResponse, Responsefrom starlette_cramjam.compression import Compressionfrom starlette_cramjam.middleware import CompressionMiddleware# create applicationapp = Starlette()# register the CompressionMiddlewareapp.add_middleware(    CompressionMiddleware,    compression=[Compression.gzip],  # Only support `gzip`    minimum_size=0,  # should compress everything    exclude_path={&quot;^/foo$&quot;},  # do not compress response for the `/foo` request    exclude_mediatype={&quot;image/jpeg&quot;},  # do not compress jpeg)@app.route(&quot;/&quot;)def index(request):    return PlainTextResponse(&quot;Hello World&quot;)@app.route(&quot;/image&quot;)def foo(request):    return Response(b&quot;This is a fake body&quot;, status_code=200, media_type=&quot;image/jpeg&quot;)@app.route(&quot;/foo&quot;)def foo(request):    return PlainTextResponse(&quot;Do not compress me.&quot;)if __name__ == &quot;__main__&quot;:    uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8000)```## ChangesSee [CHANGES.md](https://github.com/developmentseed/starlette-cramjam/blob/master/CHANGES.md).## Contribution &amp; DevelopmentSee [CONTRIBUTING.md](https://github.com/developmentseed/starlette-cramjam/blob/master/CONTRIBUTING.md)## LicenseSee [LICENSE](https://github.com/developmentseed/starlette-cramjam/blob/master/LICENSE)## AuthorsCreated by [Development Seed](&lt;http://developmentseed.org&gt;)See [contributors](https://github.com/developmentseed/starlette-cramjam/graphs/contributors) for a listing of individual contributors.</longdescription>
</pkgmetadata>