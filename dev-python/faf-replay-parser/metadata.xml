<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FAF Replay Parser![Build Status](https://github.com/Askaholic/faf-replay-parser-python/actions/workflows/test.yml/badge.svg?branch=main)[![pypi](https://badge.fury.io/py/faf-replay-parser.svg)](https://pypi.python.org/pypi/faf-replay-parser)![Supported Python Versions](https://img.shields.io/pypi/pyversions/faf-replay-parser.svg)A fast library for parsing Supreme Commander Forged Alliance replay files.## InstallationPre-built packages are available for Linux, MacOS, and Windows. You can installthem with:```pip install faf-replay-parser```## DocumentationHere are some examples of using the parser. Check `help(fafreplay)` for moredetails on available functions.### Gathering basic infoFor the most basic uses there are a few special functions that should bepreferred over constructing a `Parser` object. These do only one job, but theydo it very quickly.Current functions:  - `body_offset` - Used for splitting replay data into header and body.  - `body_ticks` - Used for extracting the game length.#### Example```pythonfrom datetime import timedeltafrom fafreplay import body_offset, body_ticks# Split replay data into header and bodyoffset = body_offset(data)header_data, body_data = data[:offset], data[offset:]# Get replay length in ticksticks = body_ticks(body_data)print(&quot;Game length:&quot;, timedelta(milliseconds=ticks*100))```### Using the Parser objectThe `Parser` object can be used to get fine grained control over how replaycommands are parsed. Generally it's a good idea to parse only the minimumcommands needed, as conversion back to python dictionaries is quite expensive.```pythonfrom datetime import timedeltafrom fafreplay import Parser, commandsparser = Parser(    # Skip all commands except the ones defined here    commands=[        commands.Advance,                   # For the tick counter        commands.VerifyChecksum,            # For desync detection    ],    # Throw away commands right after we parse them. Setting this to `True` will    # significantly increase the parse time.    save_commands=False,    limit=None,    stop_on_desync=False)# Or create a parser with default arguments (turn off save_commands though)# parser = Parser(save_commands=False)# Read replay to a `bytes` objectwith open(&quot;12345.scfareplay&quot;, &quot;rb&quot;) as f:    data = f.read()# Parse to a python dictionary. Data must of type `bytes` or `bytearray`replay = parser.parse(data)print(&quot;Game time:&quot;, timedelta(milliseconds=replay[&quot;body&quot;][&quot;sim&quot;][&quot;tick&quot;]*100))if replay[&quot;body&quot;][&quot;sim&quot;][&quot;desync_ticks&quot;]:    print(&quot;Replay desynced!&quot;)```### Benchmark comparisonTo see how much faster the basic functions can be, consider this simple exampledone on replay `8653680` (an almost 50 minute long Seton's game).```python&gt;&gt;&gt; len(body_data)5586339&gt;&gt;&gt; body_ticks(body_data)28917&gt;&gt;&gt; parser = Parser(...     commands=[commands.Advance],...     save_commands=False... )&gt;&gt;&gt; timeit.timeit(&quot;parser.parse_body(body_data)['sim']['tick']&quot;, globals=globals(), number=100)1.4510237049980788&gt;&gt;&gt; timeit.timeit(&quot;body_ticks(body_data)&quot;, globals=globals(), number=100)0.20173147800232982```In this case `body_ticks` turned out to be more than 7x faster than using a`Parser`.### Reading .fafreplay filesReplays downloaded from [faforever.com](https://faforever.com) use a compresseddata format to reduce the size of the files. These can be decompressed to theoriginal `.scfareplay` data using the `extract_scfa` function.```pythonfrom fafreplay import extract_scfawith open(&quot;12345.scfareplay&quot;, &quot;rb&quot;) as f:    scfa_data = f.read()with open(&quot;12345.fafreplay&quot;, &quot;rb&quot;) as f:    faf_data = extract_scfa(f)# The extracted data is in the .scfareplay formatassert faf_data == scfa_data```Note that there are several versions of the `.fafreplay` format. Version 1 usesbase64 and zlib compression which are both part of the python standard library.However, version 2 uses `zstd` which must be installed through a third partypackage. To ensure that this dependency is installed you can use the `faf` extrawhen installing the parser:```pip install &quot;faf-replay-parser[faf]&quot;```</longdescription>
</pkgmetadata>