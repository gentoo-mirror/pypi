<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jupyter_ai[![Github Actions Status](https://github.com/jupyterlab/jupyter_ai/workflows/Build/badge.svg)](https://github.com/jupyterlab/jupyter_ai/actions/workflows/build.yml)A generative AI extension for JupyterLabThis extension is composed of a Python package named `jupyter_ai`for the server extension and a NPM package named `jupyter_ai`for the frontend extension.## Requirements- JupyterLab &gt;= 3.5 (not JupyterLab 4)## InstallTo install the extension, execute:```bashpip install jupyter_ai```## UninstallTo remove the extension, execute:```bashpip uninstall jupyter_ai```## Usage with GPT-3To use the `GPT3ModelEngine` in `jupyter_ai`, you will need an OpenAI API key.Copy the API key and then create a Jupyter config file locally at `config.py` tostore the API key.```pythonc.GPT3ModelEngine.api_key = &quot;&lt;your-api-key&gt;&quot;```Finally, start a new JupyterLab instance pointing to this configuration file.```bashjupyter lab --config=config.py```If you are doing this in a Git repository, you can ensure you never commit thisfile on accident by adding it to `.git/info/exclude`.Alternately, you can also specify your API key while launching JupyterLab.```bashjupyter lab --GPT3ModelEngine.api_key=&lt;api-key&gt;```## TroubleshootIf you can see the extension UI, but it is not working, checkthat the server extension is enabled:```bashjupyter server extension list```If the server extension is installed and enabled, but you don't seethe extension UI, verify that the frontend extension is installed:```bashjupyter labextension list```## Contributing### Development installNote: You will need NodeJS to build the extension package.The `jlpm` command is JupyterLab's pinned version of[yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use`yarn` or `npm` in lieu of `jlpm` below.```bash# Clone the repo to your local environment# Change directory to the jupyter_ai directory# Install package in development modepip install -e .# Link your development version of the extension with JupyterLabjupyter labextension develop . --overwrite# Server extension must be manually installed in develop modejupyter server extension enable jupyter_ai# Rebuild extension Typescript source after making changesjlpm build```You can watch the source directory and run JupyterLab at the same time in different terminals to watch for changes in the extension's source and automatically rebuild the extension.```bash# Watch the source directory in one terminal, automatically rebuilding when neededjlpm watch# Run JupyterLab in another terminaljupyter lab```With the watch command running, every saved change will immediately be built locally and available in your running JupyterLab. Refresh JupyterLab to load the change in your browser (you may need to wait several seconds for the extension to be rebuilt).By default, the `jlpm build` command generates the source maps for this extension to make it easier to debug using the browser dev tools. To also generate source maps for the JupyterLab core extensions, you can run the following command:```bashjupyter lab build --minimize=False```### Development uninstall```bash# Server extension must be manually disabled in develop modejupyter server extension disable jupyter_aipip uninstall jupyter_ai```In development mode, you will also need to remove the symlink created by `jupyter labextension develop`command. To find its location, you can run `jupyter labextension list` to figure out where the `labextensions`folder is located. Then you can remove the symlink named `jupyter_ai` within that folder.### Testing the extension#### Server testsThis extension is using [Pytest](https://docs.pytest.org/) for Python code testing.Install test dependencies (needed only once):```shpip install -e &quot;.[test]&quot;```To execute them, run:```shpytest -vv -r ap --cov jupyter_ai```#### Frontend testsThis extension is using [Jest](https://jestjs.io/) for JavaScript code testing.To execute them, execute:```shjlpmjlpm test```#### Integration testsThis extension uses [Playwright](https://playwright.dev/docs/intro/) for the integration tests (aka user level tests).More precisely, the JupyterLab helper [Galata](https://github.com/jupyterlab/jupyterlab/tree/master/galata) is used to handle testing the extension in JupyterLab.More information are provided within the [ui-tests](./ui-tests/README.md) README.### Packaging the extensionSee [RELEASE](RELEASE.md)</longdescription>
</pkgmetadata>