<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyln-testing: A library to write tests against Core LightningThis library implements a number of utilities that help building tests forCore Lightning nodes. In particular it provides a number of pytest fixtures thatallow the management of a test network of a given topology and then execute atest scenarion.`pyln-testing` is used by Core Lightning for its internal tests, and by thecommunity plugin directory to exercise the plugins.## Installation`pyln-testing` is available on `pip`:```bashpip install pyln-testing```Alternatively you can also install the development version to get access tocurrently unreleased features by checking out the Core Lightning source code andinstalling into your python3 environment:```bashgit clone https://github.com/ElementsProject/lightning.gitcd lightning/contrib/pyln-testingpoetry install```This will add links to the library into your environment so changing thechecked out source code will also result in the environment picking up thesechanges. Notice however that unreleased versions may change API withoutwarning, so test thoroughly with the released version.## Testing GRPC BindingsThe grpc bindings can be tested by setting the `CLN_TEST_GRPC=1`environment variable. This will cause the testing framework to use agrpc client to talk to the `cln-grpc` plugin, rather than talkingdirectly to the node's JSON-RPC interface. Since the GRPC relateddependencies are guarded behind a feature flag in `pyln-testing`you'll need to install it with the `grpc` feature enabled in order tobe able to run in this mode.Below is a diagram of how the normal JSON-RPC interaction looks like,followed by one that display the grpc interaction:```CLN -- JSON-RPC -- LightningRpc -- pytest\_____CLN_____/    \_______pytest_______/``````CLN -- JSON-RPC -- cln-rpc -- rpc2grpc converters -- grpc interface -- python grpc client -- python grpc2json converter -- pytest\_____CLN_____/    \___________cln-grpc-plugin____________________/    \__________________________pytest________________________/```As you can see the grpc mode attempts to emulate the simple JSON-RPCmode by passing the call through a number of conversions. The laststep `grpc2json` is rather incomplete, and will cause quite a fewtests to fail for now, until the conversion is completed and we reachfeature parity between the interaction modes.</longdescription>
</pkgmetadata>