<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HonkaiRail A simple and convenient model for Mihoyo API which is complemented by other resources## Install:```pip install honkairail```## Uses:``` pyfrom honkairail import starrailapiimport asyncio#The sample code below matches version 1 (v = 1), but you can set it to 1 or 2. The second version is newer and contains a bit more data.async def main(uid,lang):    r = starrailapi.StarRailApi(lang, v = 2)    data = await r.get_full_data(uid)    print(data)asyncio.run(main(700649319,&quot;en&quot;))```## Usage example:```pyfrom honkairail import starrailapiimport asyncioasync def main(uid,lang):    r = starrailapi.StarRailApi(lang)    data = await r.get_full_data(uid)    print(&quot;====Player====&quot;)    print(f&quot;Name: {data.player.name}&quot;)    print(f&quot;UID: {data.player.uid}&quot;)    print(f&quot;Level: {data.player.level}&quot;)    print(f&quot;World Level: {data.player.worldlevel}&quot;)        print(f&quot;Friends: {data.player.friends}&quot;)    print(f&quot;Pass Area Progress: {data.player.pass_area_progress}&quot;)    print(f&quot;Achievement: {data.player.achievement}&quot;)    print(f&quot;Characters: {data.player.characters}&quot;)    print(f&quot;Light Cone: {data.player.light_cone}&quot;)    print(f&quot;Icon: {data.player.icon}&quot;)    print(f&quot;Signature: {data.player.signature}&quot;)    print('\n\n')    print(&quot;====Characters====&quot;)    for character in data.characters:        print(f&quot;Name: {character.name} | {character.id}&quot;)        print(f&quot;Rarity: {'★'*character.rarity}&quot;)        print(f&quot;LVL: {character.level}&quot;)        print(f&quot;===={character.rank_text}====&quot;)        for rank in character.rank_icons:            print(f&quot;Icon: {rank.icon}\nUnlock: {rank.unlock}&quot;)        print(&quot;====Skill====&quot;)        for skill in character.skill:            print(f&quot;Icon: {skill.icon}\nLVL:{skill.level}&quot;)        print(&quot;=============&quot;)        if not character.light_cone is None:            print(f&quot;Light Cone: {character.light_cone.name}&quot;)            print(f&quot;Rarity: {'★'*character.light_cone.rarity}&quot;)            print(f&quot;LVL: {character.light_cone.level} | R{character.light_cone.rank}&quot;)            print(f&quot;Icon: {character.light_cone.icon}&quot;)            print(f&quot;Portrait: {character.light_cone.portrait}&quot;)            light_cone = await r.get_light_cone_info(character.light_cone)            print(f&quot;ATK: {light_cone.atk} | HP: {light_cone.hp} | DEF: {light_cone.defense}&quot;)            print(f&quot;Path: {light_cone.patch.name}\nImage: {light_cone.patch.url}&quot;)        print(&quot;====Stats====&quot;)        for property in character.property:            if property.addition is None:                print(f&quot;{property.name}: {property.base}\nIcon: {property.icon}&quot;)            else:                print(f&quot;{property.name}: {property.base} ({property.addition})\n==Icon: {property.icon}&quot;)        print('\n\n')        print(&quot;====Relic====&quot;)        for i in character.relic:            print(f&quot;{character.relic[i].name}: {character.relic[i].level} lvl | {'★'*character.relic[i].rarity}&quot;)            print(f&quot;{character.relic[i].main_property.name}: {character.relic[i].main_property.value}&quot;)            for sub_property in character.relic[i].sub_property:                print(f&quot;=={sub_property.name}: {sub_property.value}\n====Icon: {sub_property.icon}&quot;)            print('\n')        print(&quot;\n\n&quot;)asyncio.run(main(700649319, &quot;en&quot;))```### Languages Supported| Languege    |  Code   | Languege    |  Code   | Languege    |  Code   ||-------------|---------|-------------|---------|-------------|---------||  English    |     en  |  русский    |     ru  |  Chinese    |    chs  ||  Tiếng Việt |     vi  |  ไทย        |     th  | Taiwan     |    cn  ||  português  |     pt  | 한국어      |     kr  | deutsch    |     de  ||  日本語      |     jp  | 中文        |     zh  | español    |     es  ||  中文        |     zh  | Indonesian |     id  | français   |     fr  || Український | ua |</longdescription>
</pkgmetadata>