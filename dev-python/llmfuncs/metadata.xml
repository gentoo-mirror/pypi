<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># llmfuncs`llmfuncs` is a Python package for documenting, managing, and validating Python functions based on their signature and docstrings. It automatically generates JSON Schema for functions, and provides a way to validate function arguments against the schema.## Features- Automatic generation of JSON Schema from Python function signature and docstrings.- Support for Python built-in types and many typing module types.- Use and validate functions with JSON arguments against their schema.- Management of multiple functions through a ToolCollection object.- Bulk addition of functions from a module, a package, or a glob pattern.- Simple and intuitive API.## InstallationInstall `llmfuncs` using pip:```shellpip install llmfuncs```## Usage### ToolThe `Tool` class encapsulates a function and its associated schema.```pythonfrom llmfuncs.tool import Tooldef greet(name: str) -&gt; str:    &quot;&quot;&quot;Greet someone.    Args:        name: Name of the person to greet.    Returns:        A greeting message.    &quot;&quot;&quot;    return f&quot;Hello, {name}!&quot;tool = Tool(greet)print(tool.name())  # &quot;greet&quot;print(tool.schema())```### ToolCollectionThe `ToolCollection` class is a container for multiple `Tool` objects. It provides methods to add tools and use them.```pythonfrom llmfuncs.tool import Tool, ToolCollectiontool_collection = ToolCollection()tool_collection.add_tool(tool)print(len(tool_collection))  # 1```You can also add tools in bulk from a module, a package, or a glob pattern.```pythontool_collection.add_tools_from_module('some_module')tool_collection.add_tools_from_package('some_package')tool_collection.add_tools_from_glob('*.py')```And here's how to use a tool:```pythonjson_args = '{&quot;name&quot;: &quot;World&quot;}'result = tool_collection.use_tool(&quot;greet&quot;, json_args)print(result)  # &quot;Hello, World!&quot;```For more detailed usage and examples, please check the API documentation and the example scripts in the `examples` folder.## Creating New ToolsIf you have an existing module that you want to work with `llmfuncs`, you can try passing it through an LLMto generate the type hints and docstrings for any functions missing them. For example:```Please update this module to add type hints to all function parameters and Google style docstrings to each function.```## ContributeWe welcome contributions to `llmfuncs`!## LicenseThis project is licensed under the terms of the MIT license. For more details, see the [LICENSE](LICENSE) file.</longdescription>
</pkgmetadata>