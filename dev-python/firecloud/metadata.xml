<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======================================================================1. Description=======================================================================FISS -- (Fi)reCloud (S)ervice (S)electorFISS is a programmatic interface to FireCloud (FC), providing a set of low- andhigh-level Python bindings to the FireCloud API, as well as UNIX bindings forcommand line usage.  By wrapping the FireCloud RESTful API in this manner, ourhope is to provide an interface that resonates more closely with the majority ofexpected FC users--supporting interaction with FC in memes familiar to them, asbiomedical researchers &amp; informaticians rather than database or web programmersLike legacy FISS, the (Fi)rehose (S)ervice (S)selector that was created forinternal use at the Broad Institute, FISSFC aims to be:    fast               compared to navigating screens &amp; menus in the GUI,                       importing/exporting files manually, etc    programmatic       can be used in analysis scripts, UNIX cli, cron jobs etc    iterable           easily repeat commands across workspaces, entity sets,                       workflows, and even project domains    simple to use      don't have to learn FC internal abstractions, or code                       directly to the RESTful interface (e.g. in curl)    understandable     clear &amp; consistent semantics, for FC novice or expert    extensible         users can customize how it works, without permission                       (or needing development assistance) from the author!    portable           Python 2 and 3 implementation, UNIX shell    idiomatic          allows FireCloud to be combined with the power of UNIX    self-documenting   (well, almost!) in addition to the --help flag, usage                       statements are provided for most methods when they're                       called with no args; the -F flag can display the body                       of any method, and -l flag lists all available methodshttps://software.broadinstitute.org/firecloud/https://github.com/broadinstitute/fiss=======================================================================2. Contents=======================================================================1. Description2. Contents3. Requirements4. Unix command line5. Low-level interface6. High-level interface7. User configuration=======================================================================3. Requirements=======================================================================Install this package via pip:% pip install firecloudOr download the source and install with setup.py:% python setup.py installFISS depends on several additional Python software packages, as listed insetup.py; typically the entire installation process (including loading ofpackages) takes only a few minutes.**Note: FireCloud encryts all web traffic with TLSv1.2. Some versions ofpython will not function correctly, and must be recompiled with opensslv1.02 or later. If recompiling is not an option, there is also adockerized version of the tool available on docker hub(https://hub.docker.com/r/broadgdac/fiss/).% docker pull broadgdac/fiss=======================================================================4. UNIX command line interface=======================================================================After installation your the 'fissfc' executable should be findable in your$PATH.  Type 'fissfc --help' for more details on how to use this utilityin a UNIX setting.Note that if you are running on a Google VM, executing 'pip install' as anunprivileged user (i.e. not sudo) will result in the package being installedto a directory named $HOME/.local, so you will need to ensure $HOME/.local/binis in your $PATH (e.g. by setting it in your Bash login script) so thatthe fissfc binary can be found.=======================================================================5. Low-Level API=======================================================================The low-level API provides a direct one-to-one mapping between theRESTful API of FireCloud and methods in the Python interpreter. Italso provides conveniences like automatic header creation, paging,and debug settings (e.g. verbosity) across the entire API.  To accessthe low-level API simply import into a Python interpreter:  for example    import firecloud.api as fapiAfter importing, you can see what low level methods are available via     dir(fapi)and for detailed documentation simply use the Python help system:     help(fapi)Finally, note that interactive documentation for the FireCloud RESTful API(sometimes referred to as the Orchestration Layer) can be found online at    https://api.firecloud.org=======================================================================6. High-Level Classes=======================================================================To access the high-level interface import the 'fiss' module, e.g.    from firecloud import fissand use the dir() and help() Python as shown above.=======================================================================7. User configuration=======================================================================The behavior of FISS can be tailored by writing a configuration file,e.g. to give default values for the project and workspace parametersthat are common to many operations with FireCloud.  This would make iteasier to use the UNIX command line interface by allowing the --projectand --workspace flags to be omitted.By default FISS will look for a user-specific configuration file at    $HOME/.fissconfigFor example, developers within the Broad Genome Data Analysis Center (GDAC) use a configuration file like[DEFAULT]project=broad-firecloud-gdacworkspace=devmethod_ns=broadgdacTo inspect your runtime configuration, simply issue the config command:linux%    fissfc  configdebug   Falseentity_type     sample_set...</longdescription>
</pkgmetadata>