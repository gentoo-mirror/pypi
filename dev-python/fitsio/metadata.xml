<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A python library to read from and write to FITS files.[![Build Status (master)](https://travis-ci.com/esheldon/fitsio.svg?branch=master)](https://travis-ci.com/esheldon/fitsio)[![tests](https://github.com/esheldon/fitsio/workflows/tests/badge.svg)](https://github.com/esheldon/fitsio/actions?query=workflow%3Atests)## DescriptionThis is a python extension written in c and python.  Data are read intonumerical python arrays.A version of cfitsio is bundled with this package, there is no need to installyour own, nor will this conflict with a version you have installed.## Some Features- Read from and write to image, binary, and ascii table extensions.- Read arbitrary subsets of table columns and rows without loading all the data  to memory.- Read image subsets without reading the whole image.  Write subsets to existing images.- Write and read variable length table columns.- Read images and tables using slice notation similar to numpy arrays.  This is like a more  powerful memmap, since it is column-aware for tables.- Append rows to an existing table.  Delete row sets and row ranges. Resize tables,    or insert rows.- Query the columns and rows in a table.- Read and write header keywords.- Read and write images in tile-compressed format (RICE,GZIP,PLIO,HCOMPRESS).- Read/write gzip files directly.  Read unix compress (.Z,.zip) and bzip2 (.bz2) files.- TDIM information is used to return array columns in the correct shape.- Write and read string table columns, including array columns of arbitrary  shape.- Read and write complex, bool (logical), unsigned integer, signed bytes types.- Write checksums into the header and verify them.- Insert new columns into tables in-place.- Iterate over rows in a table.  Data are buffered for efficiency.- python 3 support, including python 3 strings## Examples```pythonimport fitsiofrom fitsio import FITS,FITSHDR# Often you just want to quickly read or write data without bothering to# create a FITS object.  In that case, you can use the read and write# convienience functions.# read all data from the first hdu that has datafilename='data.fits'data = fitsio.read(filename)# read a subset of rows and columns from a tabledata = fitsio.read(filename, rows=[35,1001], columns=['x','y'], ext=2)# read the headerh = fitsio.read_header(filename)# read both data and headerdata,h = fitsio.read(filename, header=True)# open the file and write a new binary table extension with the data# array, which is a numpy array with fields, or &quot;recarray&quot;.data = np.zeros(10, dtype=[('id','i8'),('ra','f8'),('dec','f8')])fitsio.write(filename, data)# Write an image to the same file. By default a new extension is# added to the file.  use clobber=True to overwrite an existing file# instead.  To append rows to an existing table, see below.fitsio.write(filename, image)# NOTE when reading row subsets, the data must still be read from disk.# This is most efficient if the data are read in the order they appear in# the file.  For this reason, the rows are always returned in row-sorted# order.## the FITS class gives the you the ability to explore the data, and gives# more control## open a FITS file for reading and explorefits=fitsio.FITS('data.fits')# see what is in here; the FITS object prints itselfprint(fits)file: data.fitsmode: READONLYextnum hdutype         hduname0      IMAGE_HDU1      BINARY_TBL      mytable# at the python or ipython prompt the fits object will# print itself&gt;&gt;&gt; fitsfile: data.fits... etc# explore the extensions, either by extension number or# extension name if available&gt;&gt;&gt; fits[0]file: data.fitsextension: 0type: IMAGE_HDUimage info:  data type: f8  dims: [4096,2048]# by name; can also use fits[1]&gt;&gt;&gt; fits['mytable']file: data.fitsextension: 1type: BINARY_TBLextname: mytablerows: 4328342column info:  i1scalar            u1  f                   f4  fvec                f4  array[2]  darr                f8  array[3,2]  dvarr               f8  varray[10]  s                   S5  svec                S6  array[3]  svar                S0  vstring[8]  sarr                S2  array[4,3]# See bottom for how to get more information for an extension# [-1] to refers the last HDU&gt;&gt;&gt; fits[-1]...# if there are multiple HDUs with the same name, and an EXTVER# is set, you can use it.  Here extver=2#    fits['mytable',2]# read the image from extension zeroimg = fits[0].read()img = fits[0][:,:]# read a subset of the image without reading the whole imageimg = fits[0][25:35, 45:55]# read all rows and columns from a binary table extensiondata = fits[1].read()data = fits['mytable'].read()data = fits[1][:]# read a subset of rows and columns. By default uses a case-insensitive# match. The result retains the names with original case.  If columns is a# sequence, a numpy array with fields, or recarray is returneddata = fits[1].read(rows=[1,5], columns=['index','x','y'])# Similar but using slice notation# row subsetsdata = fits[1][10:20]data = fits[1][10:20:2]data = fits[1][[1,5,18]]# Using EXTNAME and EXTVER valuesdata = fits['SCI',2][10:20]# Slicing with reverse (flipped) stridingdata = fits[1][40:25]data = fits[1][40:25:-5]# all rows of column 'x'data = fits[1]['x'][:]# Read a few columns at once. This is more efficient than separate read for# each columndata = fits[1]['x','y'][:]# General column and row subsets.  As noted above, the data are returned# in row sorted order for efficiency reasons.columns=['index','x','y']rows=[1,5]data = fits[1][columns][rows]# iterate over rows in a table hdu# faster if we buffer some rows, let's buffer 1000 at a timefits=fitsio.FITS(filename,iter_row_buffer=1000)for row in fits[1]:    print(row)# iterate over HDUs in a FITS objectfor hdu in fits:    data=hdu.read()# Note dvarr shows type varray[10] and svar shows type vstring[8]. These# are variable length columns and the number specified is the maximum size.# By default they are read into fixed-length fields in the output array.# You can over-ride this by constructing the FITS object with the vstorage# keyword or specifying vstorage when reading.  Sending vstorage='object'# will store the data in variable size object fields to save memory; the# default is vstorage='fixed'.  Object fields can also be written out to a# new FITS file as variable length to save disk space.fits = fitsio.FITS(filename,vstorage='object')# ORdata = fits[1].read(vstorage='object')print(data['dvarr'].dtype)    dtype('object')# you can grab a FITS HDU object to simplify notationhdu1 = fits[1]data = hdu1['x','y'][35:50]# get rows that satisfy the input expression.  See &quot;Row Filtering# Specification&quot; in the cfitsio manual (note no temporary table is# created in this case, contrary to the cfitsio docs)w=fits[1].where(&quot;x &gt; 0.25 &amp;&amp; y &lt; 35.0&quot;)data = fits[1][w]# read the headerh = fits[0].read_header()print(h['BITPIX'])    -64fits.close()# now write some datafits = FITS('test.fits','rw')# create a rec array.  Note vstr# is a variable length stringnrows=35data = np.zeros(nrows, dtype=[('index','i4'),('vstr','O'),('x','f8'),                              ('arr','f4',(3,4))])data['index'] = np.arange(nrows,dtype='i4')data['x'] = np.random.random(nrows)data['vstr'] = [str(i) for i in xrange(nrows)]data['arr'] = np.arange(nrows*3*4,dtype='f4').reshape(nrows,3,4)# create a new table extension and write the datafits.write(data)# can also be a list of ordinary arrays if you send the namesarray_list=[xarray,yarray,namearray]names=['x','y','name']fits.write(array_list, names=names)# similarly a dict of arraysfits.write(dict_of_arrays)fits.write(dict_of_arrays, names=names) # control name order# append more rows to the table.  The fields in data2 should match columns# in the table.  missing columns will be filled with zerosfits[-1].append(data2)# insert a new column into a tablefits[-1].insert_column('newcol', data)# insert with a specific colnumfits[-1].insert_column('newcol', data, colnum=2)# overwrite rowsfits[-1].write(data)# overwrite starting at a particular row. The table will grow if neededfits[-1].write(data, firstrow=350)# create an imageimg=np.arange(2*3,dtype='i4').reshape(2,3)# write an image in a new HDU (if this is a new file, the primary HDU)fits.write(img)# write an image with rice compressionfits.write(img, compress='rice')# control the compressionfimg=np.random.normal(size=2*3).reshape(2, 3)fits.write(img, compress='rice', qlevel=16, qmethod='SUBTRACTIVE_DITHER_2')# lossless gzip compression for integers or floating pointfits.write(img, compress='gzip', qlevel=None)fits.write(fimg, compress='gzip', qlevel=None)# overwrite the imagefits[ext].write(img2)# write into an existing image, starting at the location [300,400]# the image will be expanded if neededfits[ext].write(img3, start=[300,400])# change the shape of the image on diskfits[ext].reshape([250,100])# add checksums for the datafits[-1].write_checksum()# can later verify data integridyfits[-1].verify_checksum()# you can also write a header at the same time.  The header can be#   - a simple dict (no comments)#   - a list of dicts with 'name','value','comment' fields#   - a FITSHDR objecthdict = {'somekey': 35, 'location': 'kitt peak'}fits.write(data, header=hdict)hlist = [{'name':'observer', 'value':'ES', 'comment':'who'},         {'name':'location','value':'CTIO'},         {'name':'photometric','value':True}]fits.write(data, header=hlist)hdr=FITSHDR(hlist)fits.write(data, header=hdr)# you can add individual keys to an existing HDUfits[1].write_key(name, value, comment=&quot;my comment&quot;)# Write multiple header keys to an existing HDU. Here records# is the same as sent with header= abovefits[1].write_keys(records)# write special COMMENT fieldsfits[1].write_comment(&quot;observer JS&quot;)fits[1].write_comment(&quot;we had good weather&quot;)# write special history fieldsfits[1].write_history(&quot;processed with software X&quot;)fits[1].write_history(&quot;re-processed with software Y&quot;)fits.close()# using a context, the file is closed automatically after leaving the blockwith FITS('path/to/file') as fits:    data = fits[ext].read()    # you can check if a header exists using &quot;in&quot;:    if 'blah' in fits:        data=fits['blah'].read()    if 2 in f:        data=fits[2].read()# methods to get more information about extension.  For extension 1:f[1].get_info()             # lots of info about the extensionf[1].has_data()             # returns True if data is present in extensionf[1].get_extname()f[1].get_extver()f[1].get_extnum()           # return zero-offset extension numberf[1].get_exttype()          # 'BINARY_TBL' or 'ASCII_TBL' or 'IMAGE_HDU'f[1].get_offsets()          # byte offsets (header_start, data_start, data_end)f[1].is_compressed()        # for images. True if tile-compressedf[1].get_colnames()         # for tablesf[1].get_colname(colnum)    # for tables find the name from column numberf[1].get_nrows()            # for tablesf[1].get_rec_dtype()        # for tablesf[1].get_rec_column_descr() # for tablesf[1].get_vstorage()         # for tables, storage mechanism for variable                            # length columns# public attributes you can feel free to change as neededf[1].lower           # If True, lower case colnames on outputf[1].upper           # If True, upper case colnames on outputf[1].case_sensitive  # if True, names are matched case sensitive```## InstallationThe easiest way is using pip or conda. To get the latest release    pip install fitsio    # update fitsio (and everything else)    pip install fitsio --upgrade    # if pip refuses to update to a newer version    pip install fitsio --upgrade --ignore-installed    # if you only want to upgrade fitsio    pip install fitsio --no-deps --upgrade --ignore-installed    # for conda, use conda-forge    conda install -c conda-forge fitsioYou can also get the latest source tarball release from    https://pypi.python.org/pypi/fitsioor the bleeding edge source from github or use git. To check outthe code for the first time    git clone https://github.com/esheldon/fitsio.gitOr at a later time to update to the latest    cd fitsio    git updateUse tar xvfz to untar the file, enter the fitsio directory and type    python setup.py installoptionally with a prefix    python setup.py install --prefix=/some/path## Requirements- python 2 or python 3- a C compiler and build tools like `make`, `patch`, etc.- numpy (See the note below. Generally, numpy 1.11 or later is better.)### Do not use numpy 1.10.0 or 1.10.1There is a serious performance regression in numpy 1.10 that resultsin fitsio running tens to hundreds of times slower.  A fix may beforthcoming in a later release.  Please comment here if thishas already impacted your work https://github.com/numpy/numpy/issues/6467## TestsThe unit tests should all pass for full support.```bashpython -c &quot;import fitsio; fitsio.test.test()&quot;```Some tests may fail if certain libraries are not available, suchas bzip2.  This failure only implies that bzipped files cannotbe read, without affecting other functionality.## Notes on Usage and Features### cfitsio bundlingWe bundle cfitsio partly because many deployed versions of cfitsio in thewild do not have support for interesting features like tiled image compression.Bundling a version that meets our needs is a safe alternative.### array orderingSince numpy uses C order, FITS uses fortran order, we have to write the TDIMand image dimensions in reverse order, but write the data as is.  Then we needto also reverse the dims as read from the header when creating the numpy dtype,but read as is.### `distutils` vs `setuptools`As of version `1.0.0`, `fitsio` has been transitioned to `setuptools` for packagingand installation. There are many reasons to do this (and to not do this). However,at a practical level, what this means for you is that you may have trouble uninstallingolder versions with `pip` via `pip uninstall fitsio`. If you do, the best thing to do isto manually remove the files manually. See this [stackoverflow question](https://stackoverflow.com/questions/402359/how-do-you-uninstall-a-python-package-that-was-installed-using-distutils)for example.### python 3 stringsAs of version `1.0.0`, fitsio now supports Python 3 strings natively. This supportmeans that for Python 3, native strings are read from and written correctly toFITS files. All byte string columns are treated as ASCII-encoded unicode stringsas well. For FITS files written with a previous version of fitsio, the datain Python 3 will now come back as a string and not a byte string. Note that thissupport is not the same as full unicode support. Internally, fitsio only supportsthe ASCII character set.## TODO- HDU groups: does anyone use these? If so open an issue!</longdescription>
</pkgmetadata>