<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Formula Data Processing Library## _The python windarab loader_[![Unit Tests](https://github.com/illini-motorsports/fdplib/actions/workflows/main_unit_tests.yml/badge.svg)](https://github.com/illini-motorsports/fdplib/actions/workflows/main_unit_tests.yml)![Coverage Report](https://raw.githubusercontent.com/illini-motorsports/fdplib/main/coverage.svg)Formula data processing library or fdplib for short is a library for accessing the custom text file format exported by Windarab by Bosch Motorsports## InstallationFDPLib requires tqdm (used as status bar for loading large data files) and Numpy (used to return data in numpy arrays)To install FDPLib use pip:```shpython3 -m pip install fdplib```## Usage#### Common UsageIn order to use the main module of this library, import the fdplib module in your python code```pythonimport fdplib```A *DarabData* object can be created by passing the textfile name to the constructor```pythonimport fdplib.darab as darabdata = darab.DarabData(&quot;&lt;FILENAME&gt;.txt&quot;)```With this object, data can be easily accessed using the following methods. First, to get all of the variables in the dataset do ```data.list_vars()```The main method that you will use to interact with the data is ```data.get_var(&quot;&lt;VARIABLE_NAME&gt;&quot;)```This method returns a list of all the datapoints associated with the variable. Likewise ```data.get_var_np(&quot;&lt;VARIABLE_NAME&gt;&quot;)``` returns a numpy array of the data.There is an optional boolean parameter called timeseries for both of the previously mentioned methods. If set to True this instead returns the data and the time values associated with it as a 2D array, much in the way matlab does.#### More Advanced Usagefdplib also has a feature rich ```class Track``` which can be used to analyze and breakdown lap data from the vehicle. To access this class do:```pythonimport fdplib.track_tools as tttrack = tt.Track(&quot;&lt;FILENAME&gt;.txt&quot;)```Using this class the following methods are available:```pythondef plot_track_heatmap(self, t_bound: tuple = None, direct_arrow: bool = None,                           heat_source: np.array = None) -&gt; None:        &quot;&quot;&quot;plot a heatmap of speed from gps data in matplotlib&quot;&quot;&quot;``````pythondef coords_from_gps(self) -&gt; np.array:    &quot;&quot;&quot;converts longitude and latitude data to x and y displacements       coordinates from the first location coordinate&quot;&quot;&quot;``````pythondef coords_from_acc(self, ret_yaw: bool = False) -&gt; np.array:    &quot;&quot;&quot;calculates the vehicles path from acceleration data provided by the IMU.       If ret_yaw is true also return the corresponding yaw data.&quot;&quot;&quot;``````pythondef plot_coords(self, coords: np.array) -&gt; None:    &quot;&quot;&quot;plots x and y displacement coordinates&quot;&quot;&quot;``````pythondef radius_from_gps_coords(self, coords: np.array) -&gt; np.array:    &quot;&quot;&quot;Calculates the radius of the current turn that the vehicle is in from gps data.       This is done using a 3 points on a circle calculation and iterates through all the data passed&quot;&quot;&quot;``````pythondef get_lap_bounds(self, lap_num: int) -&gt; np.array:    &quot;&quot;&quot;Calculate the indexs in the data corresponding to the (start,end) of       the requested lap given by lap_num.&quot;&quot;&quot;``````pythondef simulate(self) -&gt; None: # pragma: no cover    &quot;&quot;&quot;Simulate lap data using pygame&quot;&quot;&quot;```## Examples![example nmot data](https://raw.githubusercontent.com/illini-motorsports/fdplib/main/assets/example_nmot.png)</longdescription>
</pkgmetadata>