<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># kedro-graphql## OverviewKedro-graphql is a [kedro-plugin](https://docs.kedro.org/en/stable/extend_kedro/plugins.html) for serving kedro projects as a graphql api.  It leverages [Strawberry](https://strawberry.rocks/), [FastAPI](https://fastapi.tiangolo.com/), and [Celery](https://docs.celeryq.dev/en/stable/index.html) to turn any  [Kedro](https://docs.kedro.org/en/stable/) project into a GraphqlQL api  with features such as:  - a distributed task queue - subscribe to pipline events and logs via GraphQL subscriptions - storage   - persist and track all pipelines executed via the API - [additional features](#features)```mermaidflowchart  TB  api[GraphQL API\n&lt;i&gt;strawberry + FastAPI&lt;/i&gt;]  mongodb[(db: 'pipelines'\ncollection: 'pipelines'\n&lt;i&gt;mongdob&lt;/i&gt;)]  redis[(task queue\n&lt;i&gt;redis&lt;/i&gt;)]  worker[worker\n&lt;i&gt;celery&lt;/i&gt;]  api&lt;--&gt;mongodb  api&lt;--&gt;redis  worker&lt;--&gt;mongodb  worker&lt;--&gt;redis```Figure 1. Architecture## QuickstartInstall kedro-graphql into your kedro project environnment.```pip install kedro_graphql```Start the redis and mongo services using this [docker-compose.yaml](https://github.com/opensean/kedro-graphql/blob/main/docker-compose.yaml).```docker-compose up -d```Start the api server.```kedro gql```Start a worker (in another terminal).```kedro gql -w```Navigate to http://127.0.0.1:5000/graphql to access the graphql interface.![strawberry-ui](docs/strawberry-ui.png)The [docker-compose.yaml](./docker-compose.yaml) includes [mongo-express](https://github.com/mongo-express/mongo-express) and [redis-commander](https://github.com/joeferner/redis-commander) services to provide easy acess to MongoDB and redis.Navigate to http://127.0.0.1:8082 to access mongo-express interface.![mongo-express-ui](docs/mongo-express-ui.png)Navigate to http://127.0.0.1:8081 to access the redis-commander interface.One can access the task queues created and managed by [Celery](https://docs.celeryq.dev/en/stable/index.html).![redis-commander-ui](docs/redis-commander-ui.png)## ExampleThe kedro-graphl package contains an very simple example pipeline called &quot;example00&quot;.### SetupClone the kedro-graphql repository.```git clone git@github.com:opensean/kedro-graphql.git```Create a virtualenv and activate it.```cd kedro-graphqlpython3.10 -m venv venvsource venv/bin/activate```Install dependencies.```pip install -r src/requirements.txt```Create a text file.```echo &quot;Hello&quot; &gt; ./data/01_raw/text_in.txt```Start the redis and mongo services.```docker-compose up -d```Start the api server.```kedro gql```Start a worker (in another terminal).```kedro gql -w```### Start a pipelineNavigate to http://127.0.0.1:5000/graphql to access the graphql interface and execute the following mutation:```mutation MyMutation {  pipeline(    pipeline: {name: &quot;example00&quot;, parameters: [{name: &quot;example&quot;, value: &quot;hello&quot;}, {name: &quot;duration&quot;, value: &quot;10&quot;}], inputs: {name: &quot;text_in&quot;, type: &quot;text.TextDataSet&quot;, filepath: &quot;./data/01_raw/text_in.txt&quot;}, outputs: {name: &quot;text_out&quot;, type: &quot;text.TextDataSet&quot;, filepath: &quot;./data/02_intermediate/text_out.txt&quot;}}  ) {    id    name  }}```Expected response:```{  &quot;data&quot;: {    &quot;pipeline&quot;: {      &quot;id&quot;: &quot;6463991db98d7f8564ab15a0&quot;,      &quot;name&quot;: &quot;example00&quot;    }  }}```### Subscribe to pipeline eventsNow execute the following subscription to track the progress:```subscription MySubscription {  pipeline(id: &quot;6463991db98d7f8564ab15a0&quot;) {    id    result    status    taskId    timestamp    traceback  }}```![subscription](docs/subscription.gif)### Susbscribe to pipeline logsExecute the following subscription to recieve log messages:```subscription {   pipelineLogs(id:&quot;6463991db98d7f8564ab15a0&quot;) {       id       message       messageId       taskId       time     }}```![logs subscription](docs/logs-subscription.gif)### Get the pipeline resultFetch the pipeline result with the following query:```query MyQuery {  pipeline(id: &quot;6463991db98d7f8564ab15a0&quot;) {    describe    id    name    outputs {      filepath      name      type    }    inputs {      filepath      name      type    }    parameters {      name      value    }    status    taskEinfo    taskException    taskId    taskKwargs    taskRequest    taskName    taskResult    taskTraceback  }}```Expected result:```{  &quot;data&quot;: {    &quot;pipeline&quot;: {      &quot;describe&quot;: &quot;#### Pipeline execution order ####\nInputs: parameters, params:example, text_in\n\necho_node\n\nOutputs: text_out\n##################################&quot;,      &quot;id&quot;: &quot;6463991db98d7f8564ab15a0&quot;,      &quot;name&quot;: &quot;example00&quot;,      &quot;outputs&quot;: [        {          &quot;filepath&quot;: &quot;./data/02_intermediate/text_out.txt&quot;,          &quot;name&quot;: &quot;text_out&quot;,          &quot;type&quot;: &quot;text.TextDataSet&quot;        }using       ],      &quot;inputs&quot;: [        {          &quot;filepath&quot;: &quot;./data/01_raw/text_in.txt&quot;,          &quot;name&quot;: &quot;text_in&quot;,          &quot;type&quot;: &quot;text.TextDataSet&quot;        }      ],      &quot;parameters&quot;: [        {          &quot;name&quot;: &quot;example&quot;,          &quot;value&quot;: &quot;hello&quot;        },        {          &quot;name&quot;: &quot;duration&quot;,          &quot;value&quot;: &quot;10&quot;        }      ],      &quot;status&quot;: &quot;SUCCESS&quot;,      &quot;taskEinfo&quot;: &quot;None&quot;,      &quot;taskException&quot;: null,      &quot;taskId&quot;: &quot;129b4441-6150-4c0b-90df-185c1ec692ea&quot;,      &quot;taskKwargs&quot;: &quot;{'name': 'example00', 'inputs': {'text_in': {'type': 'text.TextDataSet', 'filepath': './data/01_raw/text_in.txt'}}, 'outputs': {'text_out': {'type': 'text.TextDataSet', 'filepath': './data/02_intermediate/text_out.txt'}}, 'parameters': {'example': 'hello', 'duration': '10'}}&quot;,      &quot;taskRequest&quot;: null,      &quot;taskName&quot;: &quot;&lt;@task: kedro_graphql.tasks.run_pipeline of kedro_graphql at 0x7f29e3e9e500&gt;&quot;,      &quot;taskResult&quot;: null,      &quot;taskTraceback&quot;: null    }  }}```One can explore how the pipeline is persisted using the mongo-express interface located here http://127.0.0.1:8082.  Pipelines are persisted in the&quot;pipelines&quot; collection of the &quot;pipelines&quot; database.![mongo-express-pipeline](./docs/mongo-express-pipeline.png)![mongo-express-pipeline-doc](./docs/mongo-express-pipeline-doc.png)## Features### Extensible APIThe api generated by this tool can be extended using decorators.This example adds a query, mutation, and subscription types.```## kedro_graphql.plugins.pluginsimport asynciofrom kedro_graphql.decorators import gql_query, gql_mutation, gql_subscriptionimport strawberryfrom typing import AsyncGenerator@gql_query()@strawberry.typeclass ExampleQueryTypePlugin():    @strawberry.field    def hello_world(self) -&gt; str:        return &quot;Hello World&quot;@gql_mutation()@strawberry.typeclass ExampleMutationTypePlugin():    @strawberry.mutation    def hello_world(self, message: str = &quot;World&quot;) -&gt; str:        return &quot;Hello &quot; + message@gql_subscription()@strawberry.typeclass ExampleSubscriptionTypePlugin():    @strawberry.subscription    async def hello_world(self, message: str = &quot;World&quot;, target: int = 11) -&gt; AsyncGenerator[str, None]:        for i in range(target):            yield str(i) + &quot; Hello &quot; + message            await asyncio.sleep(0.5)```When starting the api server specify the import path using the ```--imports``` flag.```kedro gql --imports &quot;kedro_graphql.plugins.plugins&quot;```Multiple import paths can be specified using comma seperated values.```kedro gql --imports &quot;kedro_graphql.plugins.plugins,example_pkg.example.my_types&quot;```Alternatively, use a ```.env``` file as described in the [General Configuration](#general-configuration) section.### Configurable ApplicationThe base application is strawberry + FastAPI instance.  One can leverage the additional features FastAPI offers by defining a custom application class.This example adds a [CORSMiddleware](https://fastapi.tiangolo.com/tutorial/cors/#use-corsmiddleware).```## src/kedro_graphql/example/app.pyfrom fastapi.middleware.cors import CORSMiddlewarefrom kedro_graphql import KedroGraphQLclass MyApp(KedroGraphQL):    def __init__(self):         super(MyApp, self).__init__()        origins = [            &quot;http://localhost&quot;,            &quot;http://localhost:8080&quot;,        ]                self.add_middleware(            CORSMiddleware,            allow_origins=origins,            allow_credentials=True,            allow_methods=[&quot;*&quot;],            allow_headers=[&quot;*&quot;],        )        print(&quot;added CORSMiddleware&quot;)```When starting the api server specify the import path using the ```--app``` flag.```kedro gql --app &quot;my_kedro_project.app.MyApp&quot;## example outputadded CORSMiddlewareINFO:     Started server process [7032]INFO:     Waiting for application startup.Connected to the MongoDB database!INFO:     Application startup complete.INFO:     Uvicorn running on http://127.0.0.1:5000 (Press CTRL+C to quit)```Alternatively, use a ```.env``` file as described in the [General Configuration](#general-configuration) section.## General ConfigurationConfiguration can be supplied via environment variables or a ```.env``` file.```## example .env fileMONGO_URI = 'mongodb://root:example@localhost:27017/'MONGO_DB_NAME = 'pipelines'KEDRO_GRAPHQL_IMPORTS = &quot;kedro_graphql.plugins.plugins&quot;KEDRO_GRAPHQL_APP = &quot;kedro_graphql.asgi.KedroGraphQL&quot;```## How to install dependenciesTo install them, run:```pip install -r src/requirements.txt```## How to test```pytest src/tests```To configure the coverage threshold, go to the `.coveragerc` file.## Project dependenciesTo generate or update the dependency requirements for your project:```kedro build-reqs```This will `pip-compile` the contents of `src/requirements.txt` into a new file `src/requirements.lock`. You can see the output of the resolution by opening `src/requirements.lock`.After this, if you'd like to update your project requirements, please update `src/requirements.txt` and re-run `kedro build-reqs`.[Further information about project dependencies](https://kedro.readthedocs.io/en/stable/kedro_project_setup/dependencies.html#project-specific-dependencies)### TO DO- support custom runners e.g. Argo Workflows, AWS Batch, etc...- document plan for supporting custom IOResolverPlugins - document pipeline tags and implement &quot;search&quot; via tags and/or other fields</longdescription>
</pkgmetadata>