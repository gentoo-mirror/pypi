<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/freelunchtheorem/Conditional_Density_Estimation.svg?branch=master)](https://travis-ci.org/freelunchtheorem/Conditional_Density_Estimation) [![Downloads](https://pepy.tech/badge/cde)](https://pepy.tech/project/cde)# Conditional Density Estimation (CDE)## DescriptionImplementations of various methods for conditional density estimation* **Parametric neural network based methods**    * Mixture Density Network (MDN)    * Kernel Mixture Network (KMN)    * Normalizing Flows (NF)* **Nonparametric methods**    * Conditional Kernel Density Estimation (CKDE)    * Neighborhood Kernel Density Estimation (NKDE)* **Semiparametric methods**    * Least Squares Conditional Density Estimation (LSKDE)    Beyond estimating conditional probability densities, the package features extensive functionality for computing:* **Centered moments:** mean, covariance, skewness and kurtosis* **Statistical divergences:** KL-divergence, JS-divergence, Hellinger distance* **Percentiles and expected shortfall**## InstallationTo use the library, you can directly use the python package index:```bashpip install cde```or clone the GitHub repository and run ```bashpip install .``` Note that the package only supports tensorflow versions between 1.4 and 1.7.## Documentation and paperSee the documentation [here](https://freelunchtheorem.github.io/Conditional_Density_Estimation). A paper on best practices and benchmarks on conditional density estimation with neural networks that makes extensive use of this library can be found [here](https://arxiv.org/abs/1903.00954).## UsageThe following code snipped holds an easy example that demonstrates how to use the cde package.```pythonfrom cde.density_simulation import SkewNormalfrom cde.density_estimator import KernelMixtureNetworkimport numpy as np&quot;&quot;&quot; simulate some data &quot;&quot;&quot;density_simulator = SkewNormal(random_seed=22)X, Y = density_simulator.simulate(n_samples=3000)&quot;&quot;&quot; fit density model &quot;&quot;&quot;model = KernelMixtureNetwork(&quot;KDE_demo&quot;, ndim_x=1, ndim_y=1, n_centers=50,                             x_noise_std=0.2, y_noise_std=0.1, random_seed=22)model.fit(X, Y)&quot;&quot;&quot; query the conditional pdf and cdf &quot;&quot;&quot;x_cond = np.zeros((1, 1))y_query = np.ones((1, 1)) * 0.1prob = model.pdf(x_cond, y_query)cum_prob = model.cdf(x_cond, y_query)&quot;&quot;&quot; compute conditional moments &amp; VaR  &quot;&quot;&quot;mean = model.mean_(x_cond)[0][0]std = model.std_(x_cond)[0][0]skewness = model.skewness(x_cond)[0]```## CitingIf you use CDE in your research, you can cite it as follows:```@article{rothfuss2019conditional,  title={Conditional Density Estimation with Neural Networks: Best Practices and Benchmarks},  author={Rothfuss, Jonas and Ferreira, Fabio and Walther, Simon and Ulrich, Maxim},  journal={arXiv:1903.00954},  year={2019}}```## Todo- creating a branch just for our conditional estimators + python package</longdescription>
</pkgmetadata>