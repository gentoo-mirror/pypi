<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>AntiNex Core============Automating network exploit detection using highly accurate pre-trained deep neural networks.As of 2018-03-12, the core can repeatedly predict attacks on Django, Flask, React + Redux, Vue, and Spring application servers by training using the pre-recorded `AntiNex datasets`_ with cross validation scores above **~99.8%** with automated scaler normalization... image:: https://travis-ci.org/jay-johnson/antinex-core.svg?branch=master    :target: https://travis-ci.org/jay-johnson/antinex-coreAccuracy + Training + Cross Validation in a Jupyter Notebook------------------------------------------------------------https://github.com/jay-johnson/antinex-core/blob/master/docker/notebooks/AntiNex-Protecting-Django.ipynbUsing a Pre-Trained Deep Neural Network in a Jupyter Notebook-------------------------------------------------------------https://github.com/jay-johnson/antinex-core/blob/master/docker/notebooks/AntiNex-Using-Pre-Trained-Deep-Neural-Networks-For-Defense.ipynb.. _AntiNex datasets: https://github.com/jay-johnson/antinex-datasetsOverview--------The core is a Celery worker pool for processing training and prediction requests for deep neural networks to detect network exploits (Nex) using Keras and Tensorflow in near real-time. Internally each worker manages a buffer of pre-trained models identified by the ``label`` from the initial training request. Once trained, a model can be used for rapid prediction testing provided the same ``label`` name is used on the prediction request. Models can also be re-trained by using the training api with the same ``label``. While the initial focus is on network exploits, the repository also includes mock stock data for demonstrating running a worker pool to quickly predict regression data (like stock prices) with many, pre-trained deep neural networks.This repository is a standalone training and prediction worker pool that is decoupled from the AntiNex REST API:https://github.com/jay-johnson/train-ai-with-django-swagger-jwtAntiNex Stack Status--------------------AntiNex Core Worker is part of the AntiNex stack:.. list-table::   :header-rows: 1   * - Component     - Build     - Docs Link     - Docs Build   * - `REST API &lt;https://github.com/jay-johnson/train-ai-with-django-swagger-jwt&gt;`__     - .. image:: https://travis-ci.org/jay-johnson/train-ai-with-django-swagger-jwt.svg?branch=master           :alt: Travis Tests           :target: https://travis-ci.org/jay-johnson/train-ai-with-django-swagger-jwt.svg     - `Docs &lt;http://antinex.readthedocs.io/en/latest/&gt;`__     - .. image:: https://readthedocs.org/projects/antinex/badge/?version=latest           :alt: Read the Docs REST API Tests           :target: https://readthedocs.org/projects/antinex/badge/?version=latest   * - `Core Worker &lt;https://github.com/jay-johnson/antinex-core&gt;`__     - .. image:: https://travis-ci.org/jay-johnson/antinex-core.svg?branch=master           :alt: Travis AntiNex Core Tests           :target: https://travis-ci.org/jay-johnson/antinex-core.svg     - `Docs &lt;http://antinex-core-worker.readthedocs.io/en/latest/&gt;`__     - .. image:: https://readthedocs.org/projects/antinex-core-worker/badge/?version=latest           :alt: Read the Docs AntiNex Core Tests           :target: http://antinex-core-worker.readthedocs.io/en/latest/?badge=latest   * - `Network Pipeline &lt;https://github.com/jay-johnson/network-pipeline&gt;`__     - .. image:: https://travis-ci.org/jay-johnson/network-pipeline.svg?branch=master           :alt: Travis AntiNex Network Pipeline Tests           :target: https://travis-ci.org/jay-johnson/network-pipeline.svg     - `Docs &lt;http://antinex-network-pipeline.readthedocs.io/en/latest/&gt;`__     - .. image:: https://readthedocs.org/projects/antinex-network-pipeline/badge/?version=latest           :alt: Read the Docs AntiNex Network Pipeline Tests           :target: https://readthedocs.org/projects/antinex-network-pipeline/badge/?version=latest   * - `AI Utils &lt;https://github.com/jay-johnson/antinex-utils&gt;`__     - .. image:: https://travis-ci.org/jay-johnson/antinex-utils.svg?branch=master           :alt: Travis AntiNex AI Utils Tests           :target: https://travis-ci.org/jay-johnson/antinex-utils.svg     - `Docs &lt;http://antinex-ai-utilities.readthedocs.io/en/latest/&gt;`__     - .. image:: https://readthedocs.org/projects/antinex-ai-utilities/badge/?version=latest           :alt: Read the Docs AntiNex AI Utils Tests           :target: http://antinex-ai-utilities.readthedocs.io/en/latest/?badge=latest   * - `Client &lt;https://github.com/jay-johnson/antinex-client&gt;`__     - .. image:: https://travis-ci.org/jay-johnson/antinex-client.svg?branch=master           :alt: Travis AntiNex Client Tests           :target: https://travis-ci.org/jay-johnson/antinex-client.svg     - `Docs &lt;http://antinex-client.readthedocs.io/en/latest/&gt;`__     - .. image:: https://readthedocs.org/projects/antinex-client/badge/?version=latest           :alt: Read the Docs AntiNex Client Tests           :target: https://readthedocs.org/projects/antinex-client/badge/?version=latestInstall-------pip install antinex-coreOptional for Generating Images------------------------------If you want to generate images please install ``python3-tk`` on Ubuntu.::    sudo apt-get install python3-tkDocker------Start the container for browsing with Jupyter:::    # if you do not have docker compose installed, you can try installing it with:    # pip install docker-compose    cd docker    ./start-stack.shOpen Jupyter Notebook with Django Deep Neural Network Analysis--------------------------------------------------------------Default password is: ``admin``http://localhost:8888/notebooks/AntiNex-Protecting-Django.ipynbView Notebook Presentation Slides---------------------------------#.  Use ``Alt + r`` inside the notebook#.  Use the non-vertical scolling url: http://localhost:8889/Slides-AntiNex-Protecting-Django.slides.html#.  Use the non-vertical scolling url: http://localhost:8890/Slides-AntiNex-Using-Pre-Trained-Deep-Neural-Networks-For-Defense.slides.htmlRun---Please make sure redis is running and accessible before starting the core:::    redis-cli     127.0.0.1:6379&gt;With redis running and the antinex-core pip installed in the python 3 runtime, use this command to start the core:::    ./run-antinex-core.shOr with celery:::    celery worker -A antinex_core.antinex_worker -l DEBUGPublish a Predict Request-------------------------To train and predict with the new automated scaler-normalized dataset with a 99.8% prediction accuracy for detecting attacks using a wide, two-layer deep neural network with the `AntiNex datasets`_ run the following steps... _AntiNex datasets: https://github.com/jay-johnson/antinex-datasetsClone-----Please make sure to clone the dataset repo to the pre-configured location:::    mkdir -p -m 777 /opt/antinex    git clone https://github.com/jay-johnson/antinex-datasets.git /opt/antinex/antinex-datasetsDjango - Train and Predict--------------------------::    ./antinex_core/scripts/publish_predict_request.py -f training/scaler-full-django-antinex-simple.jsonFlask - Train and Predict-------------------------::    ./antinex_core/scripts/publish_predict_request.py -f training/scaler-full-flask-antinex-simple.jsonReact and Redux - Train and Predict-----------------------------------::    ./antinex_core/scripts/publish_predict_request.py -f training/scaler-full-react-redux-antinex-simple.jsonVue - Train and Predict-----------------------::    ./antinex_core/scripts/publish_predict_request.py -f training/scaler-full-vue-antinex-simple.jsonSpring - Train and Predict--------------------------::    ./antinex_core/scripts/publish_predict_request.py -f training/scaler-full-spring-antinex-simple.jsonAccuracy and Prediction Report------------------------------After a few minutes the final report will be printed out like:::    2018-03-11 23:35:00,944 - antinex-prc - INFO - sample=30178 - label_value=1.0 predicted=1 label=attack    2018-03-11 23:35:00,944 - antinex-prc - INFO - sample=30179 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,944 - antinex-prc - INFO - sample=30180 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,944 - antinex-prc - INFO - sample=30181 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,944 - antinex-prc - INFO - sample=30182 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30183 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30184 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30185 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30186 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30187 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30188 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30189 - label_value=1.0 predicted=1 label=attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30190 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,945 - antinex-prc - INFO - sample=30191 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30192 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30193 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30194 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30195 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30196 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30197 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30198 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,946 - antinex-prc - INFO - sample=30199 - label_value=-1.0 predicted=-1 label=not_attack    2018-03-11 23:35:00,947 - antinex-prc - INFO - Full-Django-AntiNex-Simple-Scaler-DNN made predictions=30200 found=30200 accuracy=99.84685430463577    2018-03-11 23:35:00,947 - antinex-prc - INFO - Full-Django-AntiNex-Simple-Scaler-DNN - saving model=full-django-antinex-simple-scaler-dnnIf you do not have the datasets cloned locally, you can use the included minimized dataset from the repo:::    ./antinex_core/scripts/publish_predict_request.py -f training/scaler-django-antinex-simple.jsonPublish a Train Request-----------------------::    ./antinex_core/scripts/publish_train_request.pyPublish a Regression Prediction Request---------------------------------------::    ./antinex_core/scripts/publish_regression_predict.pyJSON API--------The AntiNex core manages a pool of workers that are subscribed to process tasks found in two queues (``webapp.train.requests`` and ``webapp.predict.requests``). Tasks are defined as JSON dictionaries and must have the following structure:::    {        &quot;label&quot;: &quot;Django-AntiNex-Simple-Scaler-DNN&quot;,        &quot;dataset&quot;: &quot;./tests/datasets/classification/cleaned_attack_scans.csv&quot;,        &quot;apply_scaler&quot;: true,        &quot;ml_type&quot;: &quot;classification&quot;,        &quot;predict_feature&quot;: &quot;label_value&quot;,        &quot;features_to_process&quot;: [            &quot;eth_type&quot;,            &quot;idx&quot;,            &quot;ip_ihl&quot;,            &quot;ip_len&quot;,            &quot;ip_tos&quot;,            &quot;ip_version&quot;,            &quot;tcp_dport&quot;,            &quot;tcp_fields_options.MSS&quot;,            &quot;tcp_fields_options.Timestamp&quot;,            &quot;tcp_fields_options.WScale&quot;,            &quot;tcp_seq&quot;,            &quot;tcp_sport&quot;        ],        &quot;ignore_features&quot;: [        ],        &quot;sort_values&quot;: [        ],        &quot;seed&quot;: 42,        &quot;test_size&quot;: 0.2,        &quot;batch_size&quot;: 32,        &quot;epochs&quot;: 10,        &quot;num_splits&quot;: 2,        &quot;loss&quot;: &quot;binary_crossentropy&quot;,        &quot;optimizer&quot;: &quot;adam&quot;,        &quot;metrics&quot;: [            &quot;accuracy&quot;        ],        &quot;histories&quot;: [            &quot;val_loss&quot;,            &quot;val_acc&quot;,            &quot;loss&quot;,            &quot;acc&quot;        ],        &quot;model_desc&quot;: {            &quot;layers&quot;: [                {                    &quot;num_neurons&quot;: 250,                    &quot;init&quot;: &quot;uniform&quot;,                    &quot;activation&quot;: &quot;relu&quot;                },                {                    &quot;num_neurons&quot;: 1,                    &quot;init&quot;: &quot;uniform&quot;,                    &quot;activation&quot;: &quot;sigmoid&quot;                }            ]        },        &quot;label_rules&quot;: {            &quot;labels&quot;: [                &quot;not_attack&quot;,                &quot;not_attack&quot;,                &quot;attack&quot;            ],            &quot;label_values&quot;: [                -1,                0,                1            ]        },        &quot;version&quot;: 1    }Regression prediction tasks are also supported, and here is an example from an included dataset with mock stock prices:::    {        &quot;label&quot;: &quot;Scaler-Close-Regression&quot;,        &quot;dataset&quot;: &quot;./tests/datasets/regression/stock.csv&quot;,        &quot;apply_scaler&quot;: true,        &quot;ml_type&quot;: &quot;regression&quot;,        &quot;predict_feature&quot;: &quot;close&quot;,        &quot;features_to_process&quot;: [            &quot;high&quot;,            &quot;low&quot;,            &quot;open&quot;,            &quot;volume&quot;        ],        &quot;ignore_features&quot;: [        ],        &quot;sort_values&quot;: [        ],        &quot;seed&quot;: 7,        &quot;test_size&quot;: 0.2,        &quot;batch_size&quot;: 32,        &quot;epochs&quot;: 50,        &quot;num_splits&quot;: 2,        &quot;loss&quot;: &quot;mse&quot;,        &quot;optimizer&quot;: &quot;adam&quot;,        &quot;metrics&quot;: [            &quot;accuracy&quot;        ],        &quot;model_desc&quot;: {            &quot;layers&quot;: [                {                    &quot;activation&quot;: &quot;relu&quot;,                    &quot;init&quot;: &quot;uniform&quot;,                    &quot;num_neurons&quot;: 200                },                {                    &quot;activation&quot;: null,                    &quot;init&quot;: &quot;uniform&quot;,                    &quot;num_neurons&quot;: 1                }            ]        }    }Splunk Environment Variables----------------------------This repository uses the `Spylunking &lt;https://github.com/jay-johnson/spylunking&gt;`__ logger that supports publishing logs to Splunk over the authenticated HEC REST API. You can set these environment variables to publish to Splunk:::    export SPLUNK_ADDRESS=&quot;&lt;splunk address host:port&gt;&quot;    export SPLUNK_API_ADDRESS=&quot;&lt;splunk api address host:port&gt;&quot;    export SPLUNK_USER=&quot;&lt;splunk username for login&gt;&quot;    export SPLUNK_PASSWORD=&quot;&lt;splunk password for login&gt;&quot;    export SPLUNK_TOKEN=&quot;&lt;Optional - username and password will login or you can use a pre-existing splunk token&gt;&quot;    export SPLUNK_INDEX=&quot;&lt;splunk index&gt;&quot;    export SPLUNK_QUEUE_SIZE=&quot;&lt;num msgs allowed in queue - 0=infinite&gt;&quot;    export SPLUNK_RETRY_COUNT=&quot;&lt;attempts per log to retry publishing&gt;&quot;    export SPLUNK_RETRY_BACKOFF=&quot;&lt;cooldown in seconds per failed POST&gt;&quot;    export SPLUNK_SLEEP_INTERVAL=&quot;&lt;sleep in seconds per batch&gt;&quot;    export SPLUNK_SOURCE=&quot;&lt;splunk source&gt;&quot;    export SPLUNK_SOURCETYPE=&quot;&lt;splunk sourcetype&gt;&quot;    export SPLUNK_TIMEOUT=&quot;&lt;timeout in seconds&gt;&quot;    export SPLUNK_DEBUG=&quot;&lt;1 enable debug|0 off - very verbose logging in the Splunk Publishers&gt;&quot;Development-----------::    virtualenv -p python3 ~/.venvs/antinexcore &amp;&amp; source ~/.venvs/antinexcore/bin/activate &amp;&amp; pip install -e .Testing-------Run all::    python setup.py testRun a test case::    python -m unittest tests.test_train.TestTrain.test_train_antinex_simple_success_retrainLinting-------flake8 .pycodestyle .License-------Apache 2.0 - Please refer to the LICENSE_ for more details.. _License: https://github.com/jay-johnson/antinex-core/blob/master/LICENSE</longdescription>
</pkgmetadata>