<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-impersonate |nlshield|-----------------------------Simple application to allow superusers to &quot;impersonate&quot; othernon-superuser accounts.**Version:** 1.9.1**Project Links:**`Issues &lt;https://todo.code.netlandish.com/~petersanchez/django-impersonate&gt;`__- `MailingList &lt;https://lists.code.netlandish.com/~petersanchez/public-inbox&gt;`__ -`Contributing &lt;#contributing&gt;`__**Author:** Peter Sanchez (https://petersanchez.com)Python / Django Support=======================-  Python 3.7+ for Django versions 2.2+**Note:** As of version 1.4 we are only officially supporting Python andDjango versions that are supported by the official projects. So if aPython or Django version is End-of-Life'd, then we will no longersupport that version either.Dependencies============-  Depends on your project using the django.contrib.session framework.**NOTE:**-  **Version 1.6** has officially removed support for the old settings   format. Please see the `settings &lt;#settings&gt;`__ section for how   settings should be configured.-  **Version 1.5 is now only officially supporting Django's 1.11, 2.2,   and 3.0**-  **Version 1.4 is now officially supporting Python 3.6+ and Django   1.11+**-  **Version 1.3 adds a settings format change.** Please see the   Settings section for details.-  **Version 1.0 adds new functionality by default.** Please see the   ``DISABLE_LOGGING`` settings option.-  If you need to use this with Django older than 1.8, please use   version django-impersonate == 1.0.1-  If you need to use this with Django older than 1.7, please use   version django-impersonate == 0.9.2-  **Version 0.9.2 partially reverts work completed in version 0.9.1.**   This is because work done to address a request in `Issue   #17 &lt;https://bitbucket.org/petersanchez/django-impersonate/issues/17/remember-where-to-return-to-after&gt;`__   broke default behavior for all previous versions. `Issue   #24 &lt;https://bitbucket.org/petersanchez/django-impersonate/issues/24/impersonate_redirect_url-no-longer-works&gt;`__   was opened and the fix was released in 0.9.2 to address it. Please   see the new ``USE_HTTP_REFERER`` settings option.-  If you need to use this with Django older than 1.4, please use   version django-impersonate == 0.5.3Installation============PIP:::   pip install django-impersonateBasic Manual Install:::   $ python setup.py build   $ sudo python setup.py installAlternative Install (Manually):Place impersonate directory in your Python path. Either in your Pythoninstalls site-packages directory or set your $PYTHONPATH environmentvariable to include a directory where the impersonate directory lives.Use===#. Add ``impersonate`` to your INSTALLED_APPS#. Add ``impersonate.middleware.ImpersonateMiddleware`` to your   ``MIDDLEWARE`` setting.#. Add ``impersonate.urls`` somewhere in your url structure. Example:   ::      urlpatterns = patterns('',          url(r'^admin/', include(admin.site.urls)),          url(r'^impersonate/', include('impersonate.urls')),          ... (all your other urls here) ...      )**Note:** The ``ImpersonationMiddleware`` class should be placed AFTERthe ``django.contrib.auth.*`` middleware classesFunctionality=============**You can now impersonate another user by hitting the following path:**::   /impersonate/&lt;user-id&gt;/Replace &lt;user-id&gt; with the user id of the user you want to impersonate.While in impersonation &quot;mode&quot; the ``request.user`` object will have an``is_impersonate`` attribute set to ``True`` as well as ``impersonator``(and also ``request.impersonator``) set to the original user. So if youwanted to check in your templates or view, you just do somethinglike...:::   {% if user.is_impersonate %} .... {% endif %}The original user is available as ``user.impersonator`` or``request.impersonator``:::   {{ request.user }} ({{ request.impersonator }})The real user is available as ``request.real_user`` - this is equivalentto calling ``getattr(request, 'impersonator', request.user)``:::   assert request.real_user == getattr(request, 'impersonator', request.user)You can reference this URL with ``reverse`` or the ``{% url %}``template tag as ``impersonate-start`` and expects the argument of theuser ID. Example:::   reverse('impersonate-start', args=[user.id])   reverse('impersonate-start', uid=user.id)**To remove the impersonation, hit the following path:**::   /impersonate/stop/You can reference this URL with ``reverse`` or the ``{% url %}``template tag as ``impersonate-stop``. When you call this URL, you willbe redirected to the page that you used to start impersonating a user(eg, some search results or the user list).**To list all users you can go to:**::   /impersonate/list/This will render the template ``impersonate/list_users.html`` and willpass the following in the context:-  ``users`` - queryset of all users-  ``paginator`` - Django Paginator instance-  ``page`` - Current page of objects (from Paginator)-  ``page_number`` - Current page number, defaults to 1You can reference this URL with ``reverse`` or the ``{% url %}``template tag as ``impersonate-list``.**To search all users you can go to:**::   /impersonate/search/This will render the template 'impersonate/search_users.html' and willpass the following in the context:-  ``users`` - queryset of all users-  ``paginator`` - Django Paginator instance-  ``page`` - Current page of objects (from Paginator)-  ``page_number`` - Current page number, defaults to 1-  ``query`` - The search query that was enteredThe view will expect a GET request and look for the ``q`` variable beingpassed. If present, it will search the user entries with the value of``q``. The default fields searched are:``User.username``, ``User.first_name``, ``User.last_name``,``User.email``You can reference this URL with ``reverse`` or the ``{% url %}``template tag as ``impersonate-search``.**To allow some users to impersonate other users**You can optionally allow only some non-superuser and non-staff users toimpersonate by adding a ``CUSTOM_ALLOW`` setting option. Create afunction that takes a request object, and based on your rules, returns``True`` if the user is allowed to impersonate or not.**To limit what users a user can impersonate**By, optionally, setting the ``CUSTOM_USER_QUERYSET`` option you cancontrol what users can be impersonated. It takes a request object of theuser, and returns a QuerySet of users. This is used when searching forusers to impersonate, when listing what users to impersonate, and whentrying to start impersonation.Signals=======If you wish to hook into the impersonation session (for instance, inorder to audit access), there are two signals that are fired bydjango-impersonate, at the beginning and end of a session:-  ``session_begin`` - sent when calling the ``impersonate`` view-  ``session_end`` - sent when calling the ``stop_impersonate`` viewBoth of these signals send the same arguments:-  ``sender`` - this is a Django signal requirement, and is always set   to None-  ``impersonator`` - a reference to the User object of the person doing   the impersonation-  ``impersonating`` - a reference to the User object of the person   being impersonated-  ``request`` - the Django HttpRequest object from which the   impersonation was invokedThe request object is included as it contains pertinent information thatyou may wish to audit - such as client IP address, user-agent string,etc.For an example of how to hook up the signals, see the relevant test -``test_successful_impersonation_signals``.The ``session_end`` signal will only be fired if the impersonatorexplicitly ends the session.Settings========The following settings are available for django-impersonate. Allsettings should be set as variables in a dictionary assigned to theattribute named ``IMPERSONATE``.For example:::   IMPERSONATE = {       'REDIRECT_URL': '/some-path/',       'PAGINATE_COUNT': 10,   }Here are the options available...::   REDIRECT_URLThis is the URL you want to be redirected to *after* you have chosen toimpersonate another user. If this is not present it will check for the``LOGIN_REDIRECT_URL`` setting and fall back to '/' if neither ispresent. Value should be a string containing the redirect path.::   READ_ONLYA boolean that if set to ``True`` any requests that are not either``GET`` or ``HEAD`` or ``OPTIONS`` will result in a &quot;Bad Request&quot;response (status code 405). Use this if you want to limit yourimpersonating users to read only impersonation sessions.Value should be a boolean, defaults to ``False``If the ``CUSTOM_READ_ONLY`` is set, then that custom function is used,and this setting is ignored.::   CUSTOM_READ_ONLYA string that represents a function (e.g.``module.submodule.mod.function_name``) that allows more fine grainedcontrol over who has read only access. It takes one argument, therequest object, and should return True to restrict the user to onlyallow ``GET``, ``HEAD`` and ``OPTIONS`` requests.It is optional, and if it is not present, ``READ_ONLY`` setting valueapplies.::   USE_HTTP_REFERERIf this is set to ``True``, then the app will attempt to be redirect youto the URL you were at when the impersonation began once you have*stopped* the impersonation. For example, if you were at the url'/foo/bar/' when you began impersonating a user, once you end theimpersonation, you will be redirected back to '/foo/bar/' instead of thevalue in ``REDIRECT_URL``.Value should be a boolean, defaults to ``False``::   PAGINATE_COUNTThis is the number of users to paginate by when using the list or searchviews. This defaults to 20. Value should be an integer.::   REQUIRE_SUPERUSERIf this is set to ``True``, then only users who have ``is_superuser``set to ``True`` will be allowed to impersonate other users. Default is``False``. If ``False``, then any ``is_staff`` user will be able toimpersonate other users.**Note:** Regardless of this setting, a ``is_staff`` user will **not**be allowed to impersonate a ``is_superuser`` user.Value should be a booleanIf the ``CUSTOM_ALLOW`` is set, then that custom function is used, andthis setting is ignored.::   ALLOW_SUPERUSERBy default, superusers cannot be impersonated; this setting allows forthat.**Note:** Even when this is true, only superusers can impersonate othersuperusers, regardless of the value of REQUIRE_SUPERUSER.Value should be a boolean and the default is ``False``.::   URI_EXCLUSIONSSet to a list/tuple of url patterns that, if matched, user impersonationis not completed. It defaults to:::   (r'^admin/',)If you do not want to use even the default exclusions then set thesetting to an empty list/tuple.::   CUSTOM_USER_QUERYSETA string that represents a function (e.g.``module.submodule.mod.function_name``) that allows more fine grainedcontrol over what users a user can impersonate. It takes one argument,the request object, and should return a QuerySet. Only the users in thisqueryset can be impersonated.This function will not be called when the request has an unauthorisedusers, and will only be called when the user is allowed to impersonate(cf. ``REQUIRE_SUPERUSER`` and ``CUSTOM_ALLOW``).Regardless of what this function returns, a user cannot impersonate asuperuser, even if there are superusers in the returned QuerySet.It is optional, and if it is not present, the user can impersonate anyuser (i.e. the default is ``User.objects.all()``).::   CUSTOM_ALLOWA string that represents a function (e.g.``module.submodule.mod.function_name``) that allows more fine grainedcontrol over who can use the impersonation. It takes one argument, therequest object, and should return True to allow impersonation.Regardless of this setting, the user must be logged in to impersonate.If this setting is used, ``REQUIRE_SUPERUSER`` is ignored.It is optional, and if it is not present, the previous rules aboutsuperuser and ``REQUIRE_SUPERUSER`` apply.::   REDIRECT_FIELD_NAMEA string that represents the name of a request (GET) parameter whichcontains the URL to redirect to after impersonating a user. This can beused to redirect to a custom page after impersonating a user. Example:::   # in settings.py   IMPERSONATE = {'REDIRECT_FIELD_NAME': 'next'}   # in your template   &lt;a href=&quot;{% url 'impersonate-list' %}?next=/some/url/&quot;&gt;switch user&lt;/a&gt;To return always to the current page after impersonating a user, userequest.path:::   `&lt;a href=&quot;{% url 'impersonate-list' %}?next={{request.path}}&quot;&gt;switch user&lt;/a&gt;`Each use case is different so obviously set the next value to whateveryour case requires.::   SEARCH_FIELDSArray of user model fields used for building searching query. Defaultvalue is [``User.USERNAME_FIELD``, ``first_name``, ``last_name``,``email``]. If the User model doesn't have the ``USERNAME_FIELD``attribute, it falls back to 'username' (&lt; Django 1.5).::   LOOKUP_TYPEA string that represents SQL lookup type for searching users by query onfields above. It is ``icontains`` by default.::   DISABLE_LOGGINGA boolean that can be used to disable the logging of impersonationsessions. By default each impersonation ``session_begin`` signal willcreate a new ``ImpersonationLog`` object, which is closed out (durationcalculated) at the corresponding ``session_end`` signal.It is optional, and defaults to False (i.e. logging is enabled).::   MAX_FILTER_SIZEThe max number of items acceptable in the admin list filters. If thenumber of items exceeds this, then the filter list is the size of thesettings value. This is used by the &quot;Filter by impersonator&quot; filter.It is optional, and defaults to 100.::   ADMIN_DELETE_PERMISSIONA boolean to enable/disable deletion of impersonation logs in the Djangoadmin.Default is ``False``::   ADMIN_ADD_PERMISSIONA boolean to enable/disable ability to add impersonation logs in theDjango admin.Default is ``False``::   ADMIN_READ_ONLYA boolean to enable/disable &quot;read only&quot; mode of impersonation logs inthe Django admin. Generally you want to leave this enabled otherwiseadmin users can alter logs within the Django admin area.Default is ``True``::   MAX_DURATIONA number specifying the maximum allowed duration of impersonationsessions in **seconds**.Default is ``None``Admin=====As of version 1.3 django-impersonate now includes a helper admin mixin,located at ``impersonate.admin.UserAdminImpersonateMixin``, to includein your User model's ModelAdmin. This provides a direct link toimpersonate users from your user model's Django admin list view. Usingit is very simple, however if you're using the default``django.contrib.auth.models.User`` model you will need to unregisterthe old ModelAdmin before registering your own.The ``UserAdminImpersonateMixin`` has a attribute named``open_new_window`` that **defaults to ``False``**. If this is set toTrue a new window will be opened to start the new impersonation sessionwhen clicking the impersonate link directly in the admin.Here's an example:::   # yourapp/admin.py   from django.contrib import admin   from django.contrib.auth.models import User   from django.contrib.auth.admin import UserAdmin   from impersonate.admin import UserAdminImpersonateMixin   class NewUserAdmin(UserAdminImpersonateMixin, UserAdmin):       open_new_window = True       pass   admin.site.unregister(User)   admin.site.register(User, NewUserAdmin)Testing=======From the repo checkout, ensure you have Django in your ``PYTHONPATH``and run:::   $ python runtests.pyTo get test coverage, use:::   $ coverage run --branch runtests.py   $ coverage html  &lt;- Pretty HTML files for you   $ coverage report -m  &lt;- Ascii reportIf you're bored and want to test all the supported environments, you'llneed tox.:::   $ pip install tox   $ toxAnd you should see:::   py37-django2.2: commands succeeded   py37-django3.2: commands succeeded   py38-django2.2: commands succeeded   py38-django3.2: commands succeeded   py39-django2.2: commands succeeded   py39-django3.2: commands succeeded   py38-django4.0: commands succeeded   py39-django4.0: commands succeeded   py310-django3.2: commands succeeded   py310-django4.0: commands succeeded   congratulations :)Contributing============We accept patches submitted via ``hg email`` which is the ``patchbomb``extension included with Mercurial.The mailing list where you submit your patches is``~petersanchez/public-inbox@lists.code.netlandish.com``. You can alsoview the archives on the web here:https://lists.code.netlandish.com/~petersanchez/public-inboxTo quickly setup your clone of ``django-impersonate`` to submit to themailing list just edit your ``.hg/hgrc`` file and add the following:::   [email]   to = ~petersanchez/public-inbox@lists.code.netlandish.com   [patchbomb]   flagtemplate = {separate(' ', 'django-impersonate', flags)}   [diff]   git = 1We have more information on the topic here:-  `Contributing &lt;https://man.code.netlandish.com/contributing.md&gt;`__-  `Using email with   Mercurial &lt;https://man.code.netlandish.com/hg/email.md&gt;`__-  `Mailing list   etiquette &lt;https://man.code.netlandish.com/lists/etiquette.md&gt;`__Copyright &amp; Warranty====================All documentation, libraries, and sample code are Copyright 2011 PeterSanchez &lt;petersanchez@gmail.com&gt;. The library and sample code are madeavailable to you under the terms of the BSD license which is containedin the included file, BSD-LICENSE.Commercial Support------------------This software, and lots of other software like it, has been built insupport of many of Netlandish's own projects, and the projects of ourclients. We would love to help you on your next project so get in touchby dropping us a note at hello@netlandish.com... |nlshield| image:: https://img.shields.io/badge/100%25-Netlandish-blue.svg?style=square-flat   :target: http://www.netlandish.com</longdescription>
</pkgmetadata>