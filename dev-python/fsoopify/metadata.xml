<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fsoopify![GitHub](https://img.shields.io/github/license/Cologler/fsoopify-python.svg)[![Build Status](https://travis-ci.com/Cologler/fsoopify-python.svg?branch=master)](https://travis-ci.com/Cologler/fsoopify-python)[![PyPI](https://img.shields.io/pypi/v/fsoopify.svg)](https://pypi.org/project/fsoopify/)Just make file system oopify.## install``` cmdpip install fsoopify```## usage``` pyimport fsoopify[file|directory] = fsoopify.NodeInfo.from_path(...)# api for both file and directoryfile.rename()file.get_parent()file.is_exists()file.is_directory()file.is_file()file.delete()file.create_hardlink()# api for filefile.load_context() # load and dump the file in a context.# api for directorydirectory.create() and directory.ensure_created()directory.create_file()directory.iter_items()directory.list_items()directory.get_fileinfo() and directory.get_dirinfo()directory.has_file() and directory.has_directory()```## Api### FileYou can use `fsoopify.FileInfo(...)` to create a `FileInfo` object and use file api.#### Prop Api- `size` - a `int` value with override `__str__`.#### Test Api- `is_exists()`- `is_file()`#### Open Api- `open()` - alias for builtin `open`- `open_for_read_bytes()`- `open_for_read_text()`#### Read and Write Api- `write()`- `write_text()`- `write_bytes()`- `write_from_stream()`- `read()`- `read_text()`- `read_bytes()`- `read_into_stream()`And you can use `+=` for append data:``` pyfi = FileInfo(...)fi += 'data'fi += b'data'fi += FileInfo(other_file)fi += io.BytesIO(b'data')...```#### Serialize Api- `load()`- `dump()`- `load_context()`The easiest way to dump a json:``` pyFileInfo('a.json').dump(the_obj_to_dump)```Or load:``` pyobj = FileInfo('a.json').load()```The format can auto detect by extension name.Another way to load and dump a file is `load_context()`:``` pywith FileInfo('a.json').load_context() as ctx:    ctx.data = the_obj_to_dump```With `load_context(lock=True)`, you can lock the file in the context.#### Hash ApiTo compute hash for a file:``` pycrc32, md5, sha1 = FileInfo('a.json').get_file_hash('crc32', 'md5', 'sha1')```### DirectoryYou can use `fsoopify.DirectoryInfo(...)` to create a `DirectoryInfo` object and use directory api.#### Tree ApiThe easiest way to batch read files:``` pyDirectoryInfo(...).get_tree()# {#      filename: b'file content',#      sub_dirname: {#           ...#      }# }# to prevent load all file into memory:DirectoryInfo(...).get_tree(as_stream=True)```Or batch write files:``` pytree = {    'a.txt': b'abc',    'b.txt': b'cde',    'sub_dir': {        'e.txt': b'ddd'    }}DirectoryInfo(...).make_tree(tree)```## Optional packages- `json5` - load or dump json5 file- `pyyaml` - load or dump yaml file- `toml` - load or dump toml file- `pipfile` - load pipfile</longdescription>
</pkgmetadata>