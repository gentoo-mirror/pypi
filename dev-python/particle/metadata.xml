<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/scikit-hep/particle/raw/master/docs/ParticleLogo300.png    :target: https://github.com/scikit-hep/particle``Particle``: PDG particle data and identification codes========================================================|Scikit-HEP| |PyPI version| |Conda-forge version| |Zenodo DOI||GitHub Actions Status: CI| |Code Coverage| |Code style: black||Binder|Particle provides a pythonic interface to the `Particle Data Group &lt;http://pdg.lbl.gov/&gt;`_ (PDG)particle data tables and particle identification codes,with extended particle information and extra goodies.The PDG defines the standard particle identification (ID) numbering scheme.The package provides the ``PDGID`` class implementing queries on those PDG IDs.The queries are also accessible through free standing functions mimicking,and expanding from, the HepPID/HepPDT C++ interface.The ``Particle`` class wraps the information in the PDG particle data tables andprovides an object-oriented interface and powerful search and look-up utilities.Installation------------Install ``particle`` like any other Python package:.. code-block:: bash    python -m pip install particleor similar (use ``--user``, ``virtualenv``, etc. if you wish).Strict dependencies-------------------- `Python &lt;http://docs.python-guide.org/en/latest/starting/installation/&gt;`_ (3.7+)- `importlib_resources backport &lt;http://importlib-resources.readthedocs.io/en/latest/&gt;`_ if using Python &lt; 3.9- `attrs &lt;http://www.attrs.org/en/stable/&gt;`_ provides classes without boilerplate (similar to DataClasses in Python 3.7)- `hepunits &lt;https://github.com/scikit-hep/hepunits&gt;`_ provides units for the Scikit-HEP packagesChangelog---------See the `changelog &lt;https://github.com/scikit-hep/particle/blob/master/docs/CHANGELOG.md&gt;`__ for a history of notable changes.Getting started: PDG IDs------------------------.. code-block:: python    &gt;&gt;&gt; from particle import PDGID    &gt;&gt;&gt;    &gt;&gt;&gt; pid = PDGID(211)    &gt;&gt;&gt; pid    &lt;PDGID: 211&gt;    &gt;&gt;&gt; pid.is_meson    True    &gt;&gt;&gt; pid = PDGID(99999999)    &gt;&gt;&gt; pid    &lt;PDGID: 99999999 (is_valid==False)&gt;For convenience, all properties of the ``PDGID`` class are available as standalone functions that work on any SupportsInt (including ``Particle``):.. code-block:: python    &gt;&gt;&gt; from particle.pdgid import is_meson    &gt;&gt;&gt;    &gt;&gt;&gt; is_meson(211)    TrueThese composable functions qualifying PDG IDs make it easy to classify particles.For the sake of example, quarkonia can be specified with the following user-defined functions:.. code-block:: python    &gt;&gt;&gt; is_heavy_flavor = lambda x: has_charm(x) or has_bottom(x) or has_top(x)    &gt;&gt;&gt; is_quarkonium = lambda x: is_meson(x) and is_heavy_flavor(x) and Particle.from_pdgid(x).is_self_conjugatePDG ID literals provide (``PDGID`` class) aliases for all particles loaded, with easily recognisable names.For example:.. code-block:: python    &gt;&gt;&gt; from particle.pdgid import literals as lid    &gt;&gt;&gt;    &gt;&gt;&gt; lid.pi_plus    &lt;PDGID: 211&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; from particle.pdgid.literals import Lambda_b_0    &gt;&gt;&gt; Lambda_b_0    &lt;PDGID: 5122&gt;    &gt;&gt;&gt; Lambda_b_0.has_bottom    TrueYou can quickly display ``PDGID`` info from the command line with:.. code-block:: bash    $ python -m particle pdgid 323    &lt;PDGID: 323&gt;    A              None    J              1.0    L              0    S              1    Z              None    abspid         323    charge         1.0    has_bottom     False    ...Similarly, classes exist to express identification codes used by MC programs,see information on converters below.Getting started: Particles--------------------------You can use a variety of methods to get particles. If you know the PDG ID numberor, say, the name used in EvtGen, you can get a particle directly... code-block:: python    &gt;&gt;&gt; from particle import Particle    &gt;&gt;&gt; Particle.from_pdgid(211)    &lt;Particle: name=&quot;pi+&quot;, pdgid=211, mass=139.57039 ± 0.00018 MeV&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; Particle.from_evtgen_name(&quot;J/psi&quot;)    &lt;Particle: name=&quot;J/psi(1S)&quot;, pdgid=443, mass=3096.900 ± 0.006 MeV&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; Particle.from_nucleus_info(a=12, z=6)    &lt;Particle: name=&quot;C12&quot;, pdgid=1000060120, mass=11177.9291399 MeV&gt;A similar method exists to get a list of particles from a PDG style name:.. code-block:: python    &gt;&gt;&gt; Particle.findall(pdg_name=&quot;pi&quot;)returns the list of matching particles whose PDG name is &quot;pi&quot;,which in this case comprises the three charged states of the pseudoscalar pion.Else, and more generally, you can use a search. A basic example is the following:.. code-block:: python    &gt;&gt;&gt; next(Particle.finditer('pi'))  # first item in iterator of particles    &lt;Particle: name=&quot;pi0&quot;, pdgid=111, mass=134.9768 ± 0.0005 MeV&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; Particle.findall('pi')[0]  # Same as above but returning a list of particles    &lt;Particle: name=&quot;pi0&quot;, pdgid=111, mass=134.9768 ± 0.0005 MeV&gt;You can search for the properties using keyword arguments, which include``pdg_name``, ``name``, ``mass``, ``width``, ``charge``, ``three_charge``, ``anti_flag``, ``rank``,``I``, ``J``, ``G``, ``P``, ``quarks``, ``status``,``mass_upper``, ``mass_lower``, ``width_upper``, and ``width_lower``.You can pass a callable or an exact match for any property.The argument ``particle`` can be set to ``True``/``False``, as well,to limit the search to particles or antiparticles.You can also build the search yourself with the first positionalargument, which accepts a callable that is given the particle object itself.If the first positional argument is a string, that will match against theparticle's ``name``.Here are possible sophisticated searches, all of which work with either``Particle.findall`` or ``Particle.finditer``, where the former method provides a listwhereas the latter returns an iterator... code-block:: python    &gt;&gt;&gt; # Print out all particles with asymmetric decay width uncertainties    &gt;&gt;&gt; ps = Particle.finditer(lambda p: p.width_lower != p.width_upper)    &gt;&gt;&gt; for p in ps:    ...     print(p.name, p.pdgid, p.width_lower, p.width_upper)    &gt;&gt;&gt;    &gt;&gt;&gt; # Find all antiparticles with 'Omega' in the name    &gt;&gt;&gt; Particle.finditer('Omega', particle=False)   # several found    &gt;&gt;&gt;    &gt;&gt;&gt; # Find all antiparticles of name=='Omega'    &gt;&gt;&gt; Particle.finditer(name='Omega', particle=False)  # none found    &gt;&gt;&gt;    &gt;&gt;&gt; # Find all antiparticles of pdg_name=='Omega'    &gt;&gt;&gt; Particle.findall(pdg_name='Omega', particle=False)  # only 1, of course    [&lt;Particle: name=&quot;Omega~+&quot;, pdgid=-3334, mass=1672.5 ± 0.3 MeV&gt;]    &gt;&gt;&gt;    &gt;&gt;&gt; # Find all neutral beauty hadrons    &gt;&gt;&gt; Particle.findall(lambda p: p.pdgid.has_bottom and p.charge==0)    &gt;&gt;&gt;    &gt;&gt;&gt; # Find all strange mesons with c*tau &gt; 1 meter    &gt;&gt;&gt; from hepunits import meter    &gt;&gt;&gt; Particle.findall(lambda p: p.pdgid.is_meson and p.pdgid.has_strange and p.ctau &gt; 1 * meter, particle=True)    [&lt;Particle: name=&quot;K(L)0&quot;, pdgid=130, mass=497.611 ± 0.013 MeV&gt;,     &lt;Particle: name=&quot;K+&quot;, pdgid=321, mass=493.677 ± 0.016 MeV&gt;]Once you have a particle, any of the properties can be accessed, along with several methods.Though they are not real properties, you can access ``is_name_barred``, and ``spin_type``.You can also ``.invert()`` a particle.There are lots of printing choices for particles:``describe()``, ``programmatic_name``, ``latex_name``, ``html_name``, HTML printing outs in notebooks,and of course ``repr`` and ``str`` support.You can get the ``.pdgid`` from a particle, as well.Sorting particles will put lowest ``abs(PDGID)`` first.Particle literals provide (``Particle`` class) aliases for the particles loaded,with easily recognisable names. For example:.. code-block:: python    &gt;&gt;&gt; from particle import literals as lp    &gt;&gt;&gt; lp.pi_plus    &lt;Particle: name=&quot;pi+&quot;, pdgid=211, mass=139.57061 ± 0.00024 MeV&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; from particle.literals import Lambda_b_0    &gt;&gt;&gt; Lambda_b_0    &lt;Particle: name=&quot;Lambda(b)0&quot;, pdgid=5122, mass=5619.60 ± 0.17 MeV&gt;    &gt;&gt;&gt; Lambda_b_0.J    0.5You can quickly search for particles from the command line with(note: quotes may be used/needed but only double quotes work as expected on Windows):.. code-block:: bash    $ python -m particle search &quot;K*0&quot;    &lt;Particle: name=&quot;K*(892)0&quot;, pdgid=313, mass=895.55 ± 0.20 MeV&gt;    &lt;Particle: name=&quot;K*(1680)0&quot;, pdgid=30313, mass=1718 ± 18 MeV&gt;    &lt;Particle: name=&quot;K*(1410)0&quot;, pdgid=100313, mass=1421 ± 9 MeV&gt;If you only select one particle, either by a search or by giving the PDG ID number,you can see more information about the particle:.. code-block:: bash    $ python -m particle search 311    Name: K0             ID: 311          Latex: $K^{0}$    Mass  = 497.611 ± 0.013 MeV    Width = -1.0 MeV    Q (charge)        = 0       J (total angular) = 0.0      P (space parity) = -    C (charge parity) = ?       I (isospin)       = 1/2      G (G-parity)     = ?        SpinType: SpinType.PseudoScalar        Quarks: dS        Antiparticle name: K~0 (antiparticle status: Barred)Advanced: Loading custom tables^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^You can control the particle data tables if you so desire. You can append a new data table using the following syntax:.. code-block:: python    &gt;&gt;&gt; from particle import Particle    &gt;&gt;&gt; Particle.load_table('new_particles.csv', append=True)You can also replace the particle table entirely with ``append=False`` (the default).If you want a non-default data file distributed with the package just proceed as follows:.. code-block:: python    &gt;&gt;&gt; from particle import data    &gt;&gt;&gt; Particle.load_table(data.basepath / &quot;particle2022.csv&quot;))    &gt;&gt;&gt; Particle.load_table(data.basepath / &quot;nuclei2022.csv&quot;), append=True)  # I still want nuclei info    &gt;&gt;&gt; Particle.table_names()  # list the loaded tablesAdvanced: how to create user-defined particles^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^There are situations where it may be handy to create user-defined particles.But do so with care and having in mind the limitations, many of which are discussed or exemplified below!The simplest &quot;particle&quot; one may create is effectively a placeholder with no real information stored:.. code-block:: python    &gt;&gt;&gt; # A Particle instance the simplest possible. Contains basically no info    &gt;&gt;&gt; p = Particle.empty()    &gt;&gt;&gt; p    &lt;Particle: name=&quot;Unknown&quot;, pdgid=0, mass=None&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; print(p.describe())    Name: UnknownA more useful particle definition will likely involve at least a name and a PDG ID.It is important to keep in mind that a meaningful PDG ID encodes by construction internal quantum numbersand other information. As such, the definition of a particle with a &quot;random&quot; PDG IDwill result in a particle with undefined and/or wrong properties such as quantum numbers or the quality of being a meson... code-block:: python    &gt;&gt;&gt; p2 = Particle(9912345, 'MyPentaquark')    &gt;&gt;&gt; p2    &lt;Particle: name=&quot;MyPentaquark&quot;, pdgid=9912345, mass=None&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; p2.pdgid.is_pentaquark    False    &gt;&gt;&gt; print(p2.describe())  # J=2 is an example of something effectively encoded in the PDG ID.    Name: MyPentaquark   ID: 9912345      Latex: $Unknown$    Mass  = None    Width = None    Q (charge)        = None    J (total angular) = 2.0      P (space parity) = None    C (charge parity) = None    I (isospin)       = None     G (G-parity)     = None        Antiparticle name: MyPentaquark (antiparticle status: Same)A yet more sophisticated definition:.. code-block:: python    &gt;&gt;&gt; p3 = Particle(pdgid=9221132,pdg_name='Theta',three_charge=3,latex_name='\Theta^{+}')    &gt;&gt;&gt; p3    &lt;Particle: name=&quot;Theta&quot;, pdgid=9221132, mass=None&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; print(p3.describe())    Name: Theta          ID: 9221132      Latex: $\Theta^{+}$    Mass  = None    Width = None    Q (charge)        = +       J (total angular) = 0.5      P (space parity) = None    C (charge parity) = None    I (isospin)       = None     G (G-parity)     = None        SpinType: SpinType.NonDefined        Antiparticle name: Theta (antiparticle status: Same)Advanced: Conversion^^^^^^^^^^^^^^^^^^^^You can convert and update the particle tables with the utilities in ``particle.particle.convert``. This requires the``pandas`` package, and is only tested with Python 3. Run the following command for more help:.. code-block:: bash    $ python3 -m particle.particle.convert --helpGetting started: Converters---------------------------You can use mapping classes to convert between particle MC identification codesand particle names. See the ``particle.converters`` modules for the availablemapping classes. For example:.. code-block:: python    &gt;&gt;&gt; from particle.converters import Pythia2PDGIDBiMap    &gt;&gt;&gt; from particle import PDGID, PythiaID    &gt;&gt;&gt;    &gt;&gt;&gt; pyid = Pythia2PDGIDBiMap[PDGID(9010221)]    &gt;&gt;&gt; pyid    &lt;PythiaID: 10221&gt;    &gt;&gt;&gt; pdgid = Pythia2PDGIDBiMap[PythiaID(10221)]    &gt;&gt;&gt; pdgid    &lt;PDGID: 9010221&gt;This code makes use of classes similar to ``PDGID``, which holdparticle identification codes used by MC programs.Possible use cases are the following:.. code-block:: python    &gt;&gt;&gt; from particle import Particle    &gt;&gt;&gt; from particle import Corsika7ID, Geant3ID, PythiaID    &gt;&gt;&gt;    &gt;&gt;&gt; g3id = Geant3ID(8)    &gt;&gt;&gt; p = Particle.from_pdgid(g3id.to_pdgid())    &gt;&gt;&gt;    &gt;&gt;&gt; (p,) = Particle.finditer(pdgid=g3id.to_pdgid())  # syntax (p,) throws an error if &lt; 1 or &gt; 1 particle is found    &gt;&gt;&gt; p.name    'pi+'    &gt;&gt;&gt; pythiaid = PythiaID(211)    &gt;&gt;&gt; p = Particle.from_pdgid(pythiaid.to_pdgid())    &gt;&gt;&gt; (p,) = Particle.finditer(pdgid=pythiaid.to_pdgid())    &gt;&gt;&gt; p.name    'pi+'    &gt;&gt;&gt; cid = Corsika7ID(5)    &gt;&gt;&gt; p = Particle.from_pdgid(cid.to_pdgid())    &gt;&gt;&gt; p.name    'mu+'Corsika7^^^^^^^^The ``Corsika7ID`` class implements features to make it easier to work with Corsika7 output.For a full feature set, please refer to the ``particle.corsika`` submodule.``Corsika7ID.from_particle_description(from_particle_description: int)`` returns ``(Corsika7ID, bool)``to automatically parse the ``particle_description`` from the Corsika7 particle data sub-block.``Corsika7ID.is_particle()`` checks if the ID refers to an actual particle or something else (like additional information).``Corsika7ID.to_pdgid()`` converts the ``Corsika7ID`` to a ``PDGID`` if possible.Getting started: experiment-specific modules--------------------------------------------Experiment-specific submodules are welcome if they tie in nicely with the functionality of the package while prodivingadd-ons of particular relevance to experiments.LHCb-specific module^^^^^^^^^^^^^^^^^^^^Available via.. code-block:: python    &gt;&gt;&gt; from particle import lhcbit contains the following converter and functions:.. code-block:: python    &gt;&gt;&gt; dir(lhcb)    ['LHCbName2PDGIDBiMap', 'from_lhcb_name', 'to_lhcb_name'].. code-block:: python    &gt;&gt;&gt; n, e, l = Particle.from_pdgid(-531).name, Particle.from_pdgid(531).evtgen_name, lhcb.to_lhcb_name(Particle.from_pdgid(-531))    &gt;&gt;&gt; print(f&quot;Name: {n}\nEvtGen name: {e}\nLHCb name: {l}&quot;)    Name: B(s)~0    EvtGen name: B_s0    LHCb name: B_s~0    &gt;&gt;&gt; p = Particle.from_pdgid(-531)    &gt;&gt;&gt; p    &lt;Particle: name=&quot;B(s)~0&quot;, pdgid=-531, mass=5366.88 ± 0.14 MeV&gt;    &gt;&gt;&gt;to_lhcb_name(p)    'B_s~0'Conversions PDG ID &lt;-&gt; LHCb name are available via a predefined bidirectional mapsimilarly to what is available in the standard (i.e. non-experiment-specific) converters:.. code-block:: python    &gt;&gt;&gt; name = LHCbName2PDGIDBiMap[PDGID(-531)]    &gt;&gt;&gt; name    'B_s~0'    &gt;&gt;&gt; pdgid = LHCbName2PDGIDBiMap['B_s~0']    &gt;&gt;&gt; pdgid    &lt;PDGID: -531&gt;Acknowledgements----------------The UK Science and Technology Facilities Council (STFC) and the University of Liverpoolprovide funding for Eduardo Rodrigues (2020-) to work on this project part-time.Support for this work was provided by the National Science Foundation cooperative agreement OAC-1450377 (DIANA/HEP) in 2016-2019and has been provided by OAC-1836650 (IRIS-HEP) since 2019.Any opinions, findings, conclusions or recommendations expressed in this materialare those of the authors and do not necessarily reflect the views of the National Science Foundation... |Scikit-HEP| image:: https://scikit-hep.org/assets/images/Scikit--HEP-Project-blue.svg   :target: https://scikit-hep.org.. |PyPI version| image:: https://img.shields.io/pypi/v/particle.svg   :target: https://pypi.python.org/pypi/particle.. |Conda-forge version| image:: https://img.shields.io/conda/vn/conda-forge/particle.svg   :target: https://github.com/conda-forge/particle-feedstock.. |Zenodo DOI| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.2552429.svg   :target: https://doi.org/10.5281/zenodo.2552429.. |GitHub Actions Status: CI| image:: https://github.com/scikit-hep/particle/workflows/CI/badge.svg   :target: https://github.com/scikit-hep/particle/actions.. |Code Coverage| image:: https://codecov.io/gh/scikit-hep/particle/graph/badge.svg?branch=master   :target: https://codecov.io/gh/scikit-hep/particle?branch=master.. |Code style: black| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black.. |Binder| image:: https://mybinder.org/badge_logo.svg   :target: https://mybinder.org/v2/gh/scikit-hep/particle/master?urlpath=lab/tree/notebooks/ParticleDemo.ipynb</longdescription>
</pkgmetadata>