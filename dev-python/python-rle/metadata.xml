<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-rleRun-length encoding [(wikipedia link)](https://en.wikipedia.org/wiki/Run-length_encoding) for data analysis in Python. Install with `pip install python-rle`. No dependencies required other than `tqdm` for visualizing a progress bar. ## UsageEncode any iterable (tuples, lists, pd.Series etc.) with `rle.encode`.```# rle.encode(iterable) returns (values, counts)&gt;&gt;&gt; import rle &gt;&gt;&gt; rle.encode((10, 10, 10, 20, 20, 20, 30, 30, 30))([10, 20, 30], [3, 3, 3])```Decode (values, counts) back into a sequence with `rle.decode`.```&gt;&gt;&gt; rle.decode([10, 20, 30], [3, 3, 3])[10, 10, 10, 20, 20, 20, 30, 30, 30]```Set `progress_bar` == `True` for long sequences :![progress_bar_anim](progress_bar.svg)## MotivationBase R contains a simple `rle` function that &quot;computes the lengths and values of runs of equal values in a vector&quot;, as described by its docstring. I found it useful for calculating streaks in collected data, and is especially wonderful for compiling and summarizing categorical data that describes status over time. Hence this little utility.&lt;!--## Reference to `rle` in R``` r&gt; rlefunction (x) {    if (!is.vector(x) &amp;&amp; !is.list(x))         stop(&quot;'x' must be a vector of an atomic type&quot;)    n &lt;- length(x)    if (n == 0L)         return(structure(list(lengths = integer(), values = x),             class = &quot;rle&quot;))    y &lt;- x[-1L] != x[-n]    i &lt;- c(which(y | is.na(y)), n)    structure(list(lengths = diff(c(0L, i)), values = x[i]),         class = &quot;rle&quot;)} ```--&gt;</longdescription>
</pkgmetadata>