<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/django-slick-reporting.svg    :target: https://pypi.org/project/django-slick-reporting.. image:: https://img.shields.io/pypi/pyversions/django-slick-reporting.svg    :target: https://pypi.org/project/django-slick-reporting.. image:: https://img.shields.io/readthedocs/django-slick-reporting    :target: https://django-slick-reporting.readthedocs.io/.. image:: https://api.travis-ci.com/ra-systems/django-slick-reporting.svg?branch=master    :target: https://app.travis-ci.com/github/ra-systems/django-slick-reporting.. image:: https://img.shields.io/codecov/c/github/ra-systems/django-slick-reporting    :target: https://codecov.io/gh/ra-systems/django-slick-reportingDjango Slick Reporting======================A one stop reports engine with batteries included.Features--------- Effortlessly create Simple, Grouped, Time series and Crosstab reports in a handful of code lines.- Create Chart(s) for your reports with a single line of code.- Create Custom complex Calculation.- Optimized for speed.- Easily extendable.Installation------------Use the package manager `pip &lt;https://pip.pypa.io/en/stable/&gt;`_ to install django-slick-reporting... code-block:: console        pip install django-slick-reportingUsage-----So we have a model `SalesTransaction` which contains typical data about a sale.We can extract different kinds of information for that model.Let's start by a &quot;Group by&quot; report. This will generate a report how much quantity and value was each product sold within a certain time... code-block:: python    # in views.py    from django.db.models import Sum    from slick_reporting.views import ReportView, Chart    from slick_reporting.fields import ComputationField    from .models import MySalesItems    class TotalProductSales(ReportView):        report_model = SalesTransaction        date_field = &quot;date&quot;        group_by = &quot;product&quot;        columns = [            &quot;name&quot;,            ComputationField.create(                Sum, &quot;quantity&quot;, verbose_name=&quot;Total quantity sold&quot;, is_summable=False            ),            ComputationField.create(                Sum, &quot;value&quot;, name=&quot;sum__value&quot;, verbose_name=&quot;Total Value sold $&quot;            ),        ]        chart_settings = [            Chart(                &quot;Total sold $&quot;,                Chart.BAR,                data_source=[&quot;sum__value&quot;],                title_source=[&quot;name&quot;],            ),            Chart(                &quot;Total sold $ [PIE]&quot;,                Chart.PIE,                data_source=[&quot;sum__value&quot;],                title_source=[&quot;name&quot;],            ),        ]    # then, in urls.py    path(&quot;total-sales-report&quot;, TotalProductSales.as_view())With this code, you will get something like this:.. image:: https://i.ibb.co/SvxTM23/Selection-294.png    :target: https://i.ibb.co/SvxTM23/Selection-294.png    :alt: Shipped in View PageTime Series-----------A Time series report is a report that is generated for a periods of time.The period can be daily, weekly, monthly, yearly or custom. Calculations will be performed for each period in the time series.Example: How much was sold in value for each product monthly within a date period ?.. code-block:: python    # in views.py    from slick_reporting.views import ReportView    from slick_reporting.fields import ComputationField    from .models import SalesTransaction    class MonthlyProductSales(ReportView):        report_model = SalesTransaction        date_field = &quot;date&quot;        group_by = &quot;product&quot;        columns = [&quot;name&quot;, &quot;sku&quot;]        time_series_pattern = &quot;monthly&quot;        # or &quot;yearly&quot; , &quot;weekly&quot; , &quot;daily&quot; , others and custom patterns        time_series_columns = [            ComputationField.create(                Sum, &quot;value&quot;, verbose_name=_(&quot;Sales Value&quot;), name=&quot;value&quot;            )  # what will be calculated for each month        ]        chart_settings = [            Chart(                _(&quot;Total Sales Monthly&quot;),                Chart.PIE,                data_source=[&quot;value&quot;],                title_source=[&quot;name&quot;],                plot_total=True,            ),            Chart(                &quot;Total Sales [Area chart]&quot;,                Chart.AREA,                data_source=[&quot;value&quot;],                title_source=[&quot;name&quot;],                plot_total=False,            ),        ].. image:: https://github.com/ra-systems/django-slick-reporting/blob/develop/docs/source/topics/_static/timeseries.png?raw=true    :alt: Time Series Report    :align: centerCross Tab---------Use crosstab reports, also known as matrix reports, to show the relationships between three or more query items.Crosstab reports show data in rows and columns with information summarized at the intersection points... code-block:: python        # in views.py        from slick_reporting.views import ReportView        from slick_reporting.fields import ComputationField        from .models import MySalesItems        class MyCrosstabReport(ReportView):            crosstab_field = &quot;client&quot;            crosstab_ids = [1, 2, 3]            crosstab_columns = [                ComputationField.create(Sum, &quot;value&quot;, verbose_name=_(&quot;Value for&quot;)),            ]            crosstab_compute_remainder = True            columns = [                &quot;some_optional_field&quot;,                # You can customize where the crosstab columns are displayed in relation to the other columns                &quot;__crosstab__&quot;,                # This is the same as the Same as the calculation in the crosstab, but this one will be on the whole set. IE total value                ComputationField.create(Sum, &quot;value&quot;, verbose_name=_(&quot;Total Value&quot;)),            ].. image:: https://github.com/ra-systems/django-slick-reporting/blob/develop/docs/source/topics/_static/crosstab.png?raw=true   :alt: Homepage   :align: centerLow level---------The view is a wrapper over the `ReportGenerator` class, which is the core of the reporting engine.You can interact with the `ReportGenerator` using same syntax as used with the `ReportView` ... code-block:: python    from slick_reporting.generator import ReportGenerator    from .models import MySalesModel    class MyReport(ReportGenerator):        report_model = MySalesModel        group_by = &quot;product&quot;        columns = [&quot;title&quot;, &quot;__total__&quot;]    # OR    my_report = ReportGenerator(        report_model=MySalesModel, group_by=&quot;product&quot;, columns=[&quot;title&quot;, &quot;__total__&quot;]    )    my_report.get_report_data()  # -&gt; [{'title':'Product 1', '__total__: 56}, {'title':'Product 2', '__total__: 43}, ]This is just a scratch of what you can do and customize.Demo site---------Available on `Django Slick Reporting &lt;https://django-slick-reporting.com/&gt;`_You can also use locally.. code-block:: console        # clone the repo        git clone https://github.com/ra-systems/django-slick-reporting.git        # create a virtual environment and activate it        python -m venv /path/to/new/virtual/environment        source /path/to/new/virtual/environment/bin/activate        cd django-slick-reporting/demo_proj        pip install -r requirements.txt        python manage.py migrate        python manage.py create_entries        python manage.py runserverthe ``create_entries`` command will generate data for the demo appDocumentation-------------Available on `Read The Docs &lt;https://django-slick-reporting.readthedocs.io/en/latest/&gt;`_You can run documentation locally.. code-block:: console    &lt;activate your virtual environment&gt;    cd docs    pip install -r requirements.txt    sphinx-build -b html source buildRoad Ahead----------* Continue on enriching the demo project* Add the dashboard capabilitiesRunning tests-----------------Create a virtual environment (maybe with `virtual slick_reports_test`), activate it; Then , .. code-block:: console        $ git clone git+git@github.com:ra-systems/django-slick-reporting.git    $ cd tests    $ python -m pip install -e ..    $ python runtests.py    #     Or for Coverage report    $ coverage run --include=../* runtests.py [-k]    $ coverage htmlSupport &amp; Contributing----------------------Please consider star the project to keep an eye on it. Your PRs, reviews are most welcome and needed.We honor the well formulated `Django's guidelines &lt;https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/&gt;`_ to serve as contribution guide here too.Authors--------* **Ramez Ashraf** - *Initial work* - `RamezIssac &lt;https://github.com/RamezIssac&gt;`_Cross Reference---------------If you like this package, chances are you may like those packages too!`Django Tabular Permissions &lt;https://github.com/RamezIssac/django-tabular-permissions&gt;`_ Display Django permissions in a HTML table that is translatable and easy customized.`Django ERP Framework &lt;https://github.com/ra-systems/RA&gt;`_ A framework to build business solutions with ease.If you find this project useful or promising , You can support us by a github ‚≠ê</longdescription>
</pkgmetadata>