<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flask_google_cloud_logger[![CircleCI](https://circleci.com/gh/rai200890/flask_google_cloud_logger.svg?style=svg&amp;circle-token=3b2eb197f30dc714a6ba81167ddcf4e10a8c92a6)](https://circleci.com/gh/rai200890/flask_google_cloud_logger)[![PyPI version](https://badge.fury.io/py/flask-google-cloud-logger.svg)](https://badge.fury.io/py/flask-google-cloud-logger)[![Maintainability](https://api.codeclimate.com/v1/badges/937c9f897f2cf89b9918/maintainability)](https://codeclimate.com/github/rai200890/flask_google_cloud_logger/maintainability)[![Test Coverage](https://api.codeclimate.com/v1/badges/937c9f897f2cf89b9918/test_coverage)](https://codeclimate.com/github/rai200890/flask_google_cloud_logger/test_coverage)Flask extension to format logs according to Google Cloud v2 SpecificationPython log formatter for Google Cloud according to [v2 specification](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) using [python-json-logger](https://github.com/madzak/python-json-logger) formatterInspired by Elixir's [logger_json](https://github.com/Nebo15/logger_json) ## Instalation### Pipenv```    pipenv install flask_google_cloud_logger ```### Pip```    pip install flask_google_cloud_logger ```## Usage```pythonimport loggingfrom logging import configfrom flask import Flask, request, gfrom flask_google_cloud_logger import FlaskGoogleCloudLoggerLOG_CONFIG = {    &quot;version&quot;: 1,    &quot;formatters&quot;: {        &quot;json&quot;: {            &quot;()&quot;: &quot;flask_google_cloud_logger.FlaskGoogleCloudFormatter&quot;,            &quot;application_info&quot;: {                &quot;type&quot;: &quot;python-application&quot;,                &quot;application_name&quot;: &quot;Example Application&quot;            },            &quot;format&quot;: &quot;[%(asctime)s] %(levelname)s in %(module)s: %(message)s&quot;        }    },    &quot;handlers&quot;: {        &quot;json&quot;: {            &quot;class&quot;: &quot;logging.StreamHandler&quot;,            &quot;formatter&quot;: &quot;json&quot;        }    },    &quot;loggers&quot;: {        &quot;root&quot;: {            &quot;level&quot;: &quot;INFO&quot;,            &quot;handlers&quot;: [&quot;json&quot;]        },        &quot;werkzeug&quot;: {            &quot;level&quot;: &quot;WARN&quot;,  # Disable werkzeug hardcoded logger            &quot;handlers&quot;: [&quot;json&quot;]        }    }}config.dictConfig(LOG_CONFIG)  # load log config from dictlogger = logging.getLogger(&quot;root&quot;)  # get root logger instanceapp = Flask(&quot;test_app&quot;)FlaskGoogleCloudLogger(app)@app.route(&quot;/&quot;)def hello_world():    return &quot;Hello, World!&quot;@app.teardown_request #log request and response info after extension's callbacksdef log_request_time(_exception):    logger.info(        f&quot;{request.method} {request.path} - Sent {g.response.status_code}&quot; +        &quot; in {g.request_time:.5f}ms&quot;)```Example output:```json{&quot;timestamp&quot;: &quot;2018-11-04T22:07:42.687000Z&quot;, &quot;severity&quot;: &quot;INFO&quot;, &quot;message&quot;: &quot;GET / - Sent 200 in {g.request_time:.5f}ms&quot;, &quot;labels&quot;: {&quot;type&quot;: &quot;python-application&quot;, &quot;application_name&quot;: &quot;Example Application&quot;, &quot;client&quot;: {&quot;user_agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36&quot;, &quot;ip&quot;: &quot;127.0.0.1&quot;, &quot;version&quot;: null}, &quot;connection&quot;: {&quot;method&quot;: &quot;GET&quot;, &quot;path&quot;: &quot;/&quot;, &quot;request_id&quot;: &quot;afc4c6d5-5f30-4f02-b66a-e97e87841073&quot;, &quot;status&quot;: 200}, &quot;latency&quot;: 0.13828277587890625}, &quot;metadata&quot;: {&quot;userLabels&quot;: {}}, &quot;sourceLocation&quot;: {&quot;file&quot;: &quot;test_app.py&quot;, &quot;line&quot;: 52, &quot;function&quot;: &quot;log_request_time&quot;}}```## CreditsThanks [@thulio](https://github.com/thulio), [@robsonpeixoto](https://github.com/robsonpeixoto), [@ramondelemos](https://github.com/ramondelemos)</longdescription>
</pkgmetadata>