<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## regli [![DOI](https://zenodo.org/badge/153591296.svg)](https://zenodo.org/badge/latestdoi/153591296)REgular Grid Linear Interpolator, capable to deal with spectral library or similar model data.This package implements the basic *bilinear interpolation* in multi-dimension.However, as commented in *Numerical Recipes*: Bilinear interpolation is frequently “close enough for government work.”As the interpolating point wanders from grid square to grid square,the interpolated func- tion value changes continuously.However, the gradient of the interpolated function changesdiscontinuously at the boundaries of each grid square.As a consequence, the interpolation model can not, in general, be used as a forward model and incorporated with Gradient-based optimization algorithms to estimate parameters.## authorBo Zhang, [bozhang@nao.cas.cn](mailto:bozhang@nao.cas.cn)## home page- [https://github.com/hypergravity/regli](https://github.com/hypergravity/regli)- [https://pypi.org/project/regli/](https://pypi.org/project/regli/)## install- for the latest **stable** version: `pip install -U regli`- for the latest **github** version: `pip install -U git+git://github.com/hypergravity/regli`- for the Zenodo version: [https://zenodo.org/record/3461514](https://zenodo.org/record/3461514)## test```pythonfrom regli import testtest()```output:```regli.interp3 x 10000: 0.5675415992736816 secregli.interpn x 10000: 2.5326197147369385 secrgi x 10000: 5.4028871059417725 sec```## doc```python# import Reglifrom regli import Regliimport numpy as np# construct grid coordinatesx1 = np.linspace(-1, 1, 30)     x2 = np.linspace(-1, 1, 30)x3 = np.linspace(-1, 1, 30)# initiate regli using coordinatesregli = Regli(x1, x2, x3)# an arbitrary function of coordinates (for demo)f = lambda _x1, _x2, _x3: _x1 + _x2 + _x3# regli.flats stores flattened coordinates of ND gridflats = regli.flats# evaluate your function on flatsvalues = np.array([f(*_) for _ in flats]).reshape(-1, 1)# set values for regliregli.set_values(values)        regli(pos)                      # use any of the 3 ways to interpolateregli.interpn(pos)              # method 1 is equivalent to 2regli.interp3(pos)              # this is accelerated for 3D```## How to cite the codeBibTex:```@misc{https://doi.org/10.5281/zenodo.3461514,  doi = {10.5281/zenodo.3461514},  url = {https://zenodo.org/record/3461514},  author = {Zhang, Bo},  title = {hypergravity/regli: The Zenodo version},  publisher = {Zenodo},  year = {2019}}```Please go to [https://search.datacite.org/works/10.5281/zenodo.3461514](https://search.datacite.org/works/10.5281/zenodo.3461514) for other formats.</longdescription>
</pkgmetadata>