<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============================|oceLogo| Oloren ChemEngine=============================.. |oceLogo| image:: assets/oce_logo.png  :height: 30Oloren ChemEngine (oce) is a software package developed and maintained by Oloren AI containing aunified API for the development and use of molecular property predictors enabling* Direct development of high-performing predictors* Integration of predictors into model interpretability, uncertainty quantification, and analysis frameworksHere's an example of what we mean by this. In less than ten lines of code, we'lltrain, save, load, and predict with a gradient-boosted model with two differentmolecular vector representations... code-block:: python    import olorenchemengine as oce    df = oce.ExampleDataFrame()    model = oce.BaseBoosting([                oce.RandomForestModel(oce.OlorenCheckpoint(&quot;default&quot;), n_estimators=1000),  # RF w/ our proprietary fingerprint                oce.SPGNN(model_type=&quot;contextpred&quot;),  # fine tune a trained GNN on your data            ])                model.fit(df[&quot;Smiles&quot;], df[&quot;pChEMBL Value&quot;])    oce.save(model, &quot;model.oce&quot;)    model2 = oce.load(&quot;model.oce&quot;)    y_pred = model2.predict([&quot;CC(=O)OC1=CC=CC=C1C(=O)O&quot;])It's that simple! And it's just as simple to train a graph neural network, generatevisualizations, and create error models. More information on features andcapabilities is available in our documentation at `docs.oloren.ai &lt;https://docs.oloren.ai&gt;`_.If you are wondering what models to build, please visit `benchmarks.chemengine.org &lt;benchmarks.chemengine.org&gt;`_.-------------------------------Getting Started with oce-------------------------------_______________________________Installation_______________________________**Prerequisites*** Install Pytorch: https://pytorch.org/TensorRT/tutorials/installation.html* Install Pytorch Geometric: https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html**Install Command:**.. code-block:: bash  pip install olorenchemengine[full]Here are some common error messages and solutions:https://oloren-ai.notion.site/Oloren-ChemEngine-Installation-FAQ-f2edec771a7f4350af5fdc361d494604**Install Live Version from GitHub Command**.. code-block:: bash  pip install --upgrade &quot;olorenchemengine[full] @ git+https://github.com/Oloren-AI/olorenchemengine.git&quot;_______________________________Docker_______________________________Alternatively, you can also run OCE from one of our docker images. After cloning the repo, just run:.. code-block:: bash    docker build -t oce:latest -f docker/Dockerfile.gpu . # build the docker image    docker run -it -v ~/.oce:/root/.oce oce:latest python # run the docker imageReplace &quot;.gpu&quot; with &quot;.cpu&quot; in the docker path if you want to run the project in a dockerized environment._______________________________Basic Usage_______________________________We have an examples folder, which we'd highly reccomend you checkout--1A and 1Bin particular--the rest of the examples can be purused when the topics come up._______________________________Notice_______________________________Maintaining and developing Oloren ChemEngine requires a lot of resources. As such, we would like to log for each evaluated model the model hyperparameters, the model performance metrics and a unique, non-identifying hash of the dataset. These logs are used to improve our models. Below is a representative example of such a log:.. code-block:: javascript        {dataset_hash: &quot;149eae5c763afcc14f6355007df298b05f4a51c6a334ea933fbe7fc496adb271&quot;,    metric_direction: null,    metrics: &quot;{&quot;Average Precision&quot;: 0.9479992350277128, &quot;ROC-AUC&quot;: 0.7450549450549451}&quot;,    name: &quot;BaseBoosting 1zpI0dIb&quot;,    params: &quot;{&quot;BC_class_name&quot;: &quot;BaseBoosting&quot;, &quot;args&quot;: [[{&quot;BC_class_name&quot;: &quot;RandomForestModel&quot;, &quot;args&quot;: [{&quot;BC_class_name&quot;: &quot;DescriptastorusDescriptor&quot;, &quot;args&quot;: [&quot;morgan3counts&quot;], &quot;kwargs&quot;: {&quot;log&quot;: true, &quot;scale&quot;: null}}], &quot;kwargs&quot;: {&quot;bootstrap&quot;: true, &quot;criterion&quot;: &quot;entropy&quot;, &quot;max_features&quot;: &quot;log2&quot;, &quot;n_estimators&quot;: 2000, &quot;max_depth&quot;: null, &quot;class_weight&quot;: null}}, {&quot;BC_class_name&quot;: &quot;RandomForestModel&quot;, &quot;args&quot;: [{&quot;BC_class_name&quot;: &quot;DescriptastorusDescriptor&quot;, &quot;args&quot;: [&quot;morganchiral3counts&quot;], &quot;kwargs&quot;: {&quot;log&quot;: true, &quot;scale&quot;: null}}], &quot;kwargs&quot;: {&quot;bootstrap&quot;: true, &quot;criterion&quot;: &quot;entropy&quot;, &quot;max_features&quot;: &quot;log2&quot;, &quot;n_estimators&quot;: 2000, &quot;max_depth&quot;: null, &quot;class_weight&quot;: null}}, {&quot;BC_class_name&quot;: &quot;RandomForestModel&quot;, &quot;args&quot;: [{&quot;BC_class_name&quot;: &quot;DescriptastorusDescriptor&quot;, &quot;args&quot;: [&quot;morganfeature3counts&quot;], &quot;kwargs&quot;: {&quot;log&quot;: true, &quot;scale&quot;: null}}], &quot;kwargs&quot;: {&quot;bootstrap&quot;: true, &quot;criterion&quot;: &quot;entropy&quot;, &quot;max_features&quot;: &quot;log2&quot;, &quot;n_estimators&quot;: 2000, &quot;max_depth&quot;: null, &quot;class_weight&quot;: null}}, {&quot;BC_class_name&quot;: &quot;RandomForestModel&quot;, &quot;args&quot;: [{&quot;BC_class_name&quot;: &quot;DescriptastorusDescriptor&quot;, &quot;args&quot;: [&quot;rdkit2dnormalized&quot;], &quot;kwargs&quot;: {&quot;log&quot;: true, &quot;scale&quot;: null}}], &quot;kwargs&quot;: {&quot;bootstrap&quot;: true, &quot;criterion&quot;: &quot;entropy&quot;, &quot;max_features&quot;: &quot;log2&quot;, &quot;n_estimators&quot;: 2000, &quot;max_depth&quot;: null, &quot;class_weight&quot;: null}}, {&quot;BC_class_name&quot;: &quot;RandomForestModel&quot;, &quot;args&quot;: [{&quot;BC_class_name&quot;: &quot;OlorenCheckpoint&quot;, &quot;args&quot;: [&quot;default&quot;], &quot;kwargs&quot;: {&quot;log&quot;: true, &quot;num_tasks&quot;: 2048}}], &quot;kwargs&quot;: {&quot;bootstrap&quot;: true, &quot;criterion&quot;: &quot;entropy&quot;, &quot;max_features&quot;: &quot;log2&quot;, &quot;n_estimators&quot;: 2000, &quot;max_depth&quot;: null, &quot;class_weight&quot;: null}}]], &quot;kwargs&quot;: {&quot;log&quot;: true, &quot;n&quot;: 1, &quot;oof&quot;: false, &quot;nfolds&quot;: 5}}&quot;}The dataset hash is created with the following code:.. code-block:: python    import joblib    dataset_hash = joblib.hash(X) + joblib.hash(y)This means that **we log no therapeutics-related data whatsoever.** We just log hashes of model performance. If you would still prefer a logging-free version, please fill out the following form to obtain a version with all logging code excised: https://y09gl0qf49q.typeform.com/to/brGMidJ0. We also require contributor agreements for all versions of Oloren ChemEngine.-------------------------------oce at a high level-------------------------------Everything in oce is built around Oloren's ``BaseClass`` system, which all classes stem from.Any ``BaseClass`` derived objects has its parameters and complete state savedvia ``parmeterize`` and ``saves`` respectively. A blank object (no internal state)can be recreated via ``create_BC`` and a complete object (with internal state) canbe recreated via ``loads``.The system includes abstract subclasses of ``BaseClass`` are named ``Base{Class Type}``and their interactions, most prominently    * ``BaseModel``, a base class for all any molecular property predictor    * ``BaseRepresentation``, a base class for all molecular representations    * ``BaseVisualization``, a base class for all types of visualizations and analyses-------------------------------Contributing-------------------------------First, thank you for contributing to OCE! To install OCE in editable/development mode, simply clone the repository and run:.. code-block:: bash    bash install.sh --devThis will install the repo in an editable way, so your changes will reflect immediately in your python environment. All tests for OCE are in the `tests` directory and can be run by running `pytest` in this directory. Please contact support@oloren.ai if you need any assistance in your development process!PRs from external collaborators will require a Contributor License Agreement (CLA) to be signed before the code is merged into the repository.-------------------------------Our Thanks-------------------------------First, our thanks to the community of developers and scientists, who've built and maintaineda repotoire of software libraries and scripts which have been invaluable. We'd liketo particularly thank the folks creating RDKit, PyTorch Geometric, and SKLearn who'vedeveloped software we strive to emulate and exceed.Second, we'd like to thank the amazing developers at Oloren who've created OlorenChemEngine through enoromous effort and dedication. And, we'd like to thank our futurecollaborators and contributors ahead, who we're excited meet and work with.Third, huge gratitude goes to our investors, clients, and customers who've beenever patient and ever gracious, who've provided us with the opportunity to bringsomething we believe to be truly valuable into the world.</longdescription>
</pkgmetadata>