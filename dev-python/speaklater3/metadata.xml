<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>speaklater~~~~~~~~~~A module that provides lazy strings for translations.  Basically youget an object that appears to be a string but changes the value everytime the value is evaluated based on a callable you provide.For example you can have a global `lazy_gettext` function that returnsa lazy string with the value of the current set language.Example:&gt;&gt;&gt; from speaklater import make_lazy_string, text_type&gt;&gt;&gt; sval = u'Hello World'&gt;&gt;&gt; string = make_lazy_string(lambda: sval)This lazy string will evaluate to the value of the `sval` variable.&gt;&gt;&gt; stringl'Hello World'&gt;&gt;&gt; text_type(string) == u'Hello World'True&gt;&gt;&gt; string.upper() == u'HELLO WORLD'TrueIf you change the value, the lazy string will change as well:&gt;&gt;&gt; sval = u'Hallo Welt'&gt;&gt;&gt; string.upper() == u'HALLO WELT'TrueThis is especially handy when combined with a thread local and gettexttranslations or dicts of translatable strings:&gt;&gt;&gt; from speaklater import make_lazy_gettext&gt;&gt;&gt; from threading import local&gt;&gt;&gt; l = local()&gt;&gt;&gt; l.translations = {u'Yes': 'Ja'}&gt;&gt;&gt; lazy_gettext = make_lazy_gettext(lambda: l.translations.get)&gt;&gt;&gt; yes = lazy_gettext(u'Yes')&gt;&gt;&gt; print(yes)Ja&gt;&gt;&gt; l.translations[u'Yes'] = u'Si'&gt;&gt;&gt; print(yes)SiLazy strings are no real strings so if you pass this sort of string toa function that performs an instance check, it will fail.  In that caseyou have to explicitly convert it with `unicode` and/or `string` dependingon what string type the lazy string encapsulates.To check if a string is lazy, you can use the `is_lazy_string` function:&gt;&gt;&gt; from speaklater import is_lazy_string&gt;&gt;&gt; is_lazy_string(u'yes')False&gt;&gt;&gt; is_lazy_string(yes)TrueNew in version 1.4: python &gt;= 3.3 (and also 2.6 and 2.7) support,                    repr(lazystring) is l&quot;foo&quot; on py2 and py3 - no &quot;u&quot; on py2!New in version 1.2: It's now also possible to pass keyword arguments tothe callback used with `make_lazy_string`.</longdescription>
</pkgmetadata>