<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--SPDX-FileCopyrightText: 2023 Dennis Gläser &lt;dennis.glaeser@iws.uni-stuttgart.de&gt;--&gt;&lt;!--SPDX-License-Identifier: GPL-3.0-or-later--&gt;[![fieldcompare Logo](https://gitlab.com/dglaeser/fieldcompare/-/raw/9018885c0c8675c63c051ae5119a5ecba465a517/logo/logo.svg)](https://dglaeser.gitlab.io/fieldcompare/)# FieldCompare[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)[![Test Pipelines.](https://gitlab.com/dglaeser/fieldcompare/badges/main/pipeline.svg)](https://gitlab.com/dglaeser/fieldcompare/-/pipelines?page=1&amp;scope=all&amp;ref=main)[![Coverage Report.](https://gitlab.com/dglaeser/fieldcompare/badges/main/coverage.svg)](https://dglaeser.gitlab.io/fieldcompare/coverage)[![API Documentation.](https://img.shields.io/badge/doc-API-ff69b4)](https://dglaeser.gitlab.io/fieldcompare/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![REUSE status](https://api.reuse.software/badge/git.fsfe.org/reuse/api)](https://api.reuse.software/info/git.fsfe.org/reuse/api)`fieldcompare` is a Python package with command-line interface (CLI) that can be used to comparedatasets for (fuzzy) equality. It was designed mainly to serve as a tool to realize regression testsfor research software, and in particular research software that deals with numerical simulations.In regression tests, the output of a software is compared to reference data that was produced bythe same software at an earlier time, in order to detect if changes to the code cause unexpectedchanges to the behavior of the software.Simulations typically produce discrete field data defined on computational grids, and there existsa variety of standard and widely-used file formats. `fieldcompare` natively supports a number of[VTK file formats](https://kitware.github.io/vtk-examples/site/VTKFileFormats/):`.vtp`, `.pvtu`, `.pvtu`, `.pvtp` as well as [Paraview's](https://www.paraview.org/) `.pvd`.If `meshio` is installed, it is used under the hood to provide support for a large number of furthermesh file formats (see [here](https://github.com/nschloe/meshio)). Besides mesh files, `csv` files are alsosupported, a format that is widely used in simulation frameworks to write out secondary data suchas e.g. error norms and convergence rates.Independent of the file type and format, `fieldcompare` reads all _fields_ from those files and allowsyou to then check all entries of the fields for equality with custom absolute and relative tolerances.Programmatically, you can provide and use custom predicates (e.g. &quot;smaller-than&quot;), while theCLI is currently hardwired to (fuzzy) equality checks, which is the most common use case.A common issue with regression testing of grid files is that the grid may be written with a differentordering of points or cells, while the actual field data on the grid may be the same. To this end,`fieldcompare` provides the option to make the fields read from a grid unique by sorting the gridby its point coordinates and cell connectivity. Moreover, one can choose to strip ghost points fromthe grid from that may occur, for instance, when merging the data from multiple grid partitionsdistributed over different processors.# GitHub ActionIf you want to perform regression tests within your GitHub workflow, check out our[fieldcompare action](https://github.com/dglaeser/fieldcompare-action), which allows you to do so with minimal effort.# Getting started## Quick startYou can easily install `fieldcompare` through pip:```shpip install fieldcompare[all]```Using the CLI, you can now compare data fields oftabular data (e.g. CSV) against reference data:```shecho -e &quot;0.0,0.0\n1.0,1.0\n2.0,2.0\n&quot; &gt; file1.csvecho -e &quot;0.0,0.0\n1.0,1.0\n2.0,2.001\n&quot; &gt; file2.csvfieldcompare file file1.csv file1.csvfieldcompare file file2.csv file1.csvfieldcompare file file2.csv file1.csv --relative-tolerance 1e-2```In the same way, you can compare data fields in mesh files (e.g.data mapped on an unstructured grid VTK file format):```shwget https://gitlab.com/dglaeser/fieldcompare/-/raw/main/test/data/test_mesh.vtu -O mesh1.vtuwget https://gitlab.com/dglaeser/fieldcompare/-/raw/main/test/data/test_mesh_permutated.vtu -O mesh2.vtufieldcompare file mesh1.vtu mesh1.vtufieldcompare file mesh2.vtu mesh2.vtu```The default comparison scheme allows for small differences in the fields. Specifically, if the shapeof the fields match, given a relative tolerance of $\rho$ and an absolute tolerance of $\epsilon$,two fields of floating-point values will be found equal if for each pair of scalar values $a$ and $b$the following condition holds (for more details on fuzzy comparisons, see below):$$\vert a - b \vert \leq max(\rho \cdot max(\vert a \vert, \vert b \vert), \epsilon)$$If the field consist of strings or integers, all entries of the fields are compared for exact equality.Note that per default, $\epsilon = 0$, but it can be defined via the command line interface. Many moreoptions are available and can be listed via:```shfieldcompare file --helpfieldcompare dir --help```There is also a Python API to customize your comparisons with `fieldcompare`, see the examples below and/orthe [API Documentation](https://dglaeser.gitlab.io/fieldcompare/).## InstallationAs mentioned before, you can install `fieldcompare` simply via `pip````shpip install fieldcompare[all]```The suffix `[all]` instructs `pip` to also install all optional dependencies (for instance `meshio`).Omit this suffix if you want to install only the required dependencies.For an installation from a local copy, navigate to the top folder of this repository and type```shpip install .       # minimum installationpip install .[all]  # full installation with all dependencies```To install the latest development version you can also install `fieldcompare` via pipdirectly from the git repository:```shpip install &quot;git+https://gitlab.com/dglaeser/fieldcompare#egg=fieldcompare[all]```## Command-line interfaceThe CLI exposes two subcommands, namely `file` and `dir`, where the former is used to compare two filesfor equality, and the latter can be used to compare all files with matching names in two given directories.That is, type```shfieldcompare file PATH_TO_FILE PATH_TO_REFERENCE_FILE```to compare two files, and```shfieldcompare dir PATH_TO_DIR PATH_TO_REFERENCE_DIR```for comparing two directories. The latter command will scan both folders for files with matching names,and then run a file comparison on pairs of matching files. This can be useful if your simulation producesa number of files for which you have references stored in some reference folder, and you want to comparethem all in a single command. For more info on the CLI options available, type in```shfieldcompare file --helpfieldcompare dir --help```## API and examplesThe following code snippet reads the fields from two files (assuming their format is supported)and prints a message depending on if the success of their comparison:```pyfrom fieldcompare import FieldDataComparatorfrom fieldcompare.io import read_field_datafields1 = read_field_data(&quot;FILENAME1&quot;)fields2 = read_field_data(&quot;FILENAME2&quot;)comparator = FieldDataComparator(fields1, fields2)result = comparator()if result:    print(&quot;Comparison PASSED&quot;)else:    print(f&quot;Comparison failed, report: '{result.report}'&quot;)```There are many more options you may use, and infos you can collect on performed comparisons. In thefolder [examples/api](https://gitlab.com/dglaeser/fieldcompare/-/tree/main/examples/api) you can findexamples with instructions on how to use the API of `fieldcompare`. For more details, have a look atthe [API Documentation](https://dglaeser.gitlab.io/fieldcompare/).# Contribution GuidelinesContributions are highly welcome! For bug reports, please file an [issue](https://gitlab.com/dglaeser/fieldcompare/-/issues).If you want to contribute with features, improvements or bug fixes please fork this project and opena merge request into the main branch of this repository.## Development and test suiteThe test suite is automated through `tox`. To run all tests and linters run```shtox```This runs tox with several different environments. To only test under a specfific environmentuse the `tox` option `-e`. For example, to test under Python 3.9```shtox -e py39```All developer dependencies are listed in [requirements.txt](https://gitlab.com/dglaeser/fieldcompare/-/blob/main/requirements.txt)and can be installed by```shpip install -r requirements.txt````fieldcompare` uses the auto-formatting tool `black`, the linter `flake8`, and we checktype hints with the static type checker `mypy`. When running `tox`, all these checks areperformed.The main developer branch is `main` and release versions are tagged and deployed to PyPIin an automated CI/CD pipeline. Deployment is triggered whenever the package version in`pyproject.toml` is increased and the change is merged to `main`.# License`fieldcompare` is licensed under the terms and conditions of the GNU GeneralPublic License (GPL) version 3 or - at your option - any later version. The GPLcan be [read online](https://www.gnu.org/licenses/gpl-3.0.en.html) or in the[LICENSES/GPL-3.0-or-later.txt](https://gitlab.com/dglaeser/fieldcompare/-/blob/main/LICENSES/GPL-3.0-or-later.txt) file.See [LICENSES/GPL-3.0-or-later.txt](https://gitlab.com/dglaeser/fieldcompare/-/blob/main/LICENSES/GPL-3.0-or-later.txt) for full copying permissions.# The fuzzy detailsFuzziness is crucial when comparing fields of floating-point values, which are unlikely to be bit-wise identicalto a reference solution when computed on different machines and/or after slight modifications to the code. Theequation for fuzzy equality as was shown above is implemented in the `FuzzyEquality` predicate of `fieldcompare`,which is the default predicate for fields that contain floating-point values.Per default, the `FuzzyEquality` predicate uses an absolute tolerance of $\epsilon = 0$, which means that each pairof scalars is tested by a relative criterion. The default relative tolerance depends on the data type and is chosenas `ulp(1.0)`, where `ulp` refers to the [unit of least precision](https://en.wikipedia.org/wiki/Unit_in_the_last_place).These are rather strict default values that were selected to minimize the chances of false positives when using`fieldcompare` without any tolerance settings. Generally, the tolerances should be carefully chosen for the contextat hand.A common issue, in particular in numerical simulations, is that the values in a field may span over severalorders of magnitude, which possibly has a negative impact on the precision one can expect from the smaller values.For such scenarios, a suitable choice for the absolute tolerance $\epsilon$ comes into play, which can help to avoidfalse negatives from comparing the small values in a field, as $\epsilon$ defines a lower bound for theallowed difference between field values. This is illustrated in the plots below, which visualize the pairs of values$(a, b)$ that evaluate fuzzy-equal for different tolerances.Custom $\epsilon$        |  Default $\epsilon$:-------------------------:|:-------------------------:![](https://gitlab.com/dglaeser/fieldcompare/-/raw/main/docs/img/fuzzy_eq.png)  |  ![](https://gitlab.com/dglaeser/fieldcompare/-/raw/main/docs/img/fuzzy_eq_zero_abs_tol.png)In the figures, $b_{min}$ and $b_{max}$ show the minimum and maximum values that are fuzzy-equal to a givenvalue $a$. As can be seen, while for $\epsilon = 0$ the allowed difference between values goes down to zero as$a \rightarrow 0$, a constant residual difference is allowed for small values of $a$ in the case of $\epsilon \gt 0$.A suitable choice for $\epsilon$ depends on the fields to be compared, and when comparing a large number of fields, itcan be cumbersome to define $\epsilon$ for all of them. We found that a useful heuristic is to define $\epsilon$ asa fraction of the maximum absolute value of both fields as an estimate for the precision that can be expected from thesmaller values. Using the `fieldcompare` API, this can be achieved with the `ScaledTolerance` class, which is acceptedby all interfaces receiving tolerances. An example of this is shown below, where we use the `predicate_selector` argumentof `FieldDataComparator` to pass in a customized `FuzzyEquality`:```pyfrom fieldcompare import FieldDataComparatorfrom fieldcompare.io import read_field_datafrom fieldcompare.predicates import FuzzyEquality, ScaledToleranceassert FieldDataComparator(    source=read_field_data(&quot;FILENAME1&quot;),    reference=read_field_data(&quot;FILENAME2&quot;))(    predicate_selector=lambda _, __: FuzzyEquality(        abs_tol=ScaledTolerance(base_tolerance=1e-12),        rel_tol=1e-8    ))```With the above code, the absolute tolerance is computed for a pair of fields $f_1$ and $f_2$ via$\epsilon = max(mag(f_1), mag(f_2)) \cdot 10^{-12}$, where `mag` estimates the magnitude as themaximum absolute scalar value in a field. In the CLI, this functionality is exposed via thefollowing syntax:```shfieldcompare file test_mesh.vtu \                  test_mesh_permutated.vtu \                  -atol 1e-12*max```</longdescription>
</pkgmetadata>