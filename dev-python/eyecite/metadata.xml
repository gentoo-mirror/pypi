<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>eyecite==========eyecite is an open source tool for extracting legal citations from text. It is used, among other things, to process millions of legal documents in the collections of `CourtListener &lt;https://www.courtlistener.com/&gt;`_ and Harvard's `Caselaw Access Project &lt;https://case.law/&gt;`_, and has been developed in collaboration with both projects.eyecite recognizes a wide variety of citations commonly appearing in American legal decisions, including:* full case: ``Bush v. Gore, 531 U.S. 98, 99-100 (2000)``* short case: ``531 U.S., at 99``* statutory: ``Mass. Gen. Laws ch. 1, ยง 2``* law journal: ``1 Minn. L. Rev. 1``* supra: ``Bush, supra, at 100``* id.: ``Id., at 101``All contributors, corrections, and additions are welcome!Functionality=============eyecite offers four core functions:* `Extraction &lt;https://freelawproject.github.io/eyecite/find.html&gt;`_: Recognize and extract citations from text, using a database that has been trained on over 55 million existing citations (see all of the citation patterns eyecite looks for over in `reporters_db &lt;https://github.com/freelawproject/reporters-db&gt;`_).* `Aggregation &lt;https://freelawproject.github.io/eyecite/resolve.html&gt;`_: Aggregate citations with common references (e.g., `supra` and `id.` citations) based on their logical antecedents.* `Annotation &lt;https://freelawproject.github.io/eyecite/annotate.html&gt;`_: Annotate citation-laden text with custom markup surrounding each citation, using a fast diffing algorithm.* `Cleaning &lt;https://freelawproject.github.io/eyecite/clean.html&gt;`_: Clean and pre-process text for easy use with eyecite.Read on below for how to get started quickly or for a short tutorial in using eyecite.Contributions &amp; Support=======================Please see the issues list on GitHub for things we need, or start a conversation if you have questions or need support.If you are fixing bugs or adding features, before you make your first contribution, we'll need a signed contributor license agreement. See the template in the root of the repo for how to get that taken care of.API===The API documentation is located here:https://freelawproject.github.io/eyecite/It is autogenerated whenever we release a new version. Unfortunately, for now we do not support old versions of the API documentation, but it can be browsed in the gh-pages branch if needed.Quickstart==========Install eyecite::    pip install eyeciteHere's a short example of extracting citations and their metadata from text using eyecite's main :code:`get_citations()` function::    from eyecite import get_citations    text = &quot;&quot;&quot;        Mass. Gen. Laws ch. 1, ยง 2 (West 1999) (barring ...).        Foo v. Bar, 1 U.S. 2, 3-4 (1999) (overruling ...).        Id. at 3.        Foo, supra, at 5.    &quot;&quot;&quot;    get_citations(text)    # returns:    [        FullLawCitation(            'Mass. Gen. Laws ch. 1, ยง 2',            groups={'reporter': 'Mass. Gen. Laws', 'chapter': '1', 'section': '2'},            metadata=Metadata(parenthetical='barring ...', pin_cite=None, year='1999', publisher='West', ...)        ),        FullCaseCitation(            '1 U.S. 2',            groups={'volume': '1', 'reporter': 'U.S.', 'page': '2'},            metadata=Metadata(parenthetical='overruling ...', pin_cite='3-4', year='1999', court='scotus', plaintiff='Foo', defendant='Bar,', ...)        ),        IdCitation(            'Id.',            metadata=Metadata(pin_cite='at 3')        ),        SupraCitation(            'supra,',            metadata=Metadata(antecedent_guess='Foo', pin_cite='at 5', ...)        )    ]Tutorial==========For a more full-featured walkthrough of how to use all of eyecite's functionality,please see the `tutorial &lt;TUTORIAL.ipynb&gt;`_.Documentation=============eyecite's full API is documented `here &lt;https://freelawproject.github.io/eyecite/&gt;`_, but here are details regarding its four core functions, its tokenization logic, and its debugging tools.Extracting Citations--------------------:code:`get_citations()`, the main executable function, takes three parameters.1. :code:`plain_text` ==&gt; str: The text to parse. Should be cleaned first.2. :code:`remove_ambiguous` ==&gt; bool, default :code:`False`: Whether to remove citations   that might refer to more than one reporter and can't be narrowed down by date.3. :code:`tokenizer` ==&gt; Tokenizer, default :code:`eyecite.tokenizers.default_tokenizer`: An instance of a Tokenizer object (see &quot;Tokenizers&quot; below).Cleaning Input Text-------------------For a given citation text such as &quot;... 1 Baldwin's Rep. 1 ...&quot;, eyecite expects that the textwill be &quot;clean&quot; before being passed to :code:`get_citation`. This means:* Spaces will be single space characters, not multiple spaces or other whitespace.* Quotes and hyphens will be standard quote and hyphen characters.* No junk such as HTML tags inside the citation.You can use :code:`clean_text` to help with this:::    from eyecite import clean_text, get_citations    source_text = '&lt;p&gt;foo   1  U.S.  1   &lt;/p&gt;'    plain_text = clean_text(text, ['html', 'inline_whitespace', my_func])    found_citations = get_citations(plain_text)See the `Annotating Citations &lt;#annotating-citations&gt;`_ section for how to insert links into the original text usingcitations extracted from the cleaned text.:code:`clean_text` currently accepts these values as cleaners:1. :code:`inline_whitespace`: replace all runs of tab and space characters with a single space character2. :code:`all_whitespace`: replace all runs of any whitespace character with a single space character3. :code:`underscores`: remove two or more underscores, a common error in text extracted from PDFs4. :code:`html`: remove non-visible HTML content using the lxml library5. Custom function: any function taking a string and returning a string.Annotating Citations--------------------For simple plain text, you can insert links to citations using the :code:`annotate_citations` function:::    from eyecite import get_citations, annotate_citations    plain_text = 'bob lissner v. test 1 U.S. 12, 347-348 (4th Cir. 1982)'    citations = get_citations(plain_text)    linked_text = annotate_citations(plain_text, [[c.span(), &quot;&lt;a&gt;&quot;, &quot;&lt;/a&gt;&quot;] for c in citations])    returns:    'bob lissner v. test &lt;a&gt;1 U.S. 12&lt;/a&gt;, 347-348 (4th Cir. 1982)'Each citation returned by get_citations keeps track of where it was found in the source text.As a result, :code:`annotate_citations` must be called with the *same* cleaned text used by :code:`get_citations`to extract citations. If you do not, the offsets returned by the citation's :code:`span` method willnot align with the text, and your annotations will be in the wrong place.If you want to clean text and then insert annotations into the original text, you can passthe original text in as :code:`source_text`:::    from eyecite import get_citations, annotate_citations, clean_text    source_text = '&lt;p&gt;bob lissner v. &lt;i&gt;test   1 U.S.&lt;/i&gt; 12,   347-348 (4th Cir. 1982)&lt;/p&gt;'    plain_text = clean_text(source_text, ['html', 'inline_whitespace'])    citations = get_citations(plain_text)    linked_text = annotate_citations(plain_text, [[c.span(), &quot;&lt;a&gt;&quot;, &quot;&lt;/a&gt;&quot;] for c in citations], source_text=source_text)    returns:    '&lt;p&gt;bob lissner v. &lt;i&gt;test   &lt;a&gt;1 U.S.&lt;/i&gt; 12&lt;/a&gt;,   347-348 (4th Cir. 1982)&lt;/p&gt;'The above example extracts citations from :code:`plain_text` and applies them to:code:`source_text`, using a diffing algorithm to insert annotations in the correct locationsin the original text.There is also a :code:`full_span` attribute that can be used to get the indexes of the full citation, including thepre- and post-citation attributes.Wrapping HTML Tags^^^^^^^^^^^^^^^^^^Note that the above example includes mismatched HTML tags: &quot;&lt;a&gt;1 U.S.&lt;/i&gt; 12&lt;/a&gt;&quot;.To specify handling for unbalanced tags, use the :code:`unbalanced_tags` parameter:* :code:`unbalanced_tags=&quot;skip&quot;`: annotations that would result in unbalanced tags will not be inserted.* :code:`unbalanced_tags=&quot;wrap&quot;`: unbalanced tags will be wrapped, resulting in :code:`&lt;a&gt;1 U.S.&lt;/a&gt;&lt;/i&gt;&lt;a&gt; 12&lt;/a&gt;`Important: :code:`unbalanced_tags=&quot;wrap&quot;` uses a simple regular expression and will only work for HTML whereangle brackets are properly escaped, such as the HTML emitted by :code:`lxml.html.tostring`. It is intended forregularly formatted documents such as case text published by courts. It may haveunpredictable results for deliberately-constructed challenging inputs such as citations containing partial HTMLcomments or :code:`&lt;pre&gt;` tags.Customizing Annotation^^^^^^^^^^^^^^^^^^^^^^If inserting text before and after isn't sufficient, supply a callable under the :code:`annotator` parameterthat takes :code:`(before, span_text, after)` and returns the annotated text:::    def annotator(before, span_text, after):        return before + span_text.lower() + after    linked_text = annotate_citations(plain_text, [[c.span(), &quot;&lt;a&gt;&quot;, &quot;&lt;/a&gt;&quot;] for c in citations], annotator=annotator)    returns:    'bob lissner v. test &lt;a&gt;1 u.s. 12&lt;/a&gt;, 347-348 (4th Cir. 1982)'Resolving Citations-------------------Once you have extracted citations from a document, you may wish to resolve them to their common references.To do so, just pass the results of :code:`get_citations()` into :code:`resolve_citations()`. This function willdo its best to resolve each &quot;full,&quot; &quot;short form,&quot; &quot;supra,&quot; and &quot;id&quot; citation to a common :code:`Resource` object,returning a dictionary that maps resources to lists of associated citations:::    from eyecite import get_citations, resolve_citations    text = 'first citation: 1 U.S. 12. second citation: 2 F.3d 2. third citation: Id.'    found_citations = get_citations(text)    resolved_citations = resolve_citations(found_citations)    returns (pseudo):    {        &lt;Resource object&gt;: [FullCaseCitation('1 U.S. 12')],        &lt;Resource object&gt;: [FullCaseCitation('2 F.3d 2'), IdCitation('Id.')]    }Importantly, eyecite performs these resolutions using only its immanent knowledge about each citation'stextual representation. If you want to perform more sophisticated resolution (e.g., by augmenting eachcitation with information from a third-party API), simply pass custom :code:`resolve_id_citation()`,:code:`resolve_supra_citation()`, :code:`resolve_shortcase_citation()`, and :code:`resolve_full_citation()`functions to :code:`resolve_citations()` as keyword arguments. You can also configure those functions toreturn a more complex resource object (such as a Django model), so long as that object inherits the:code:`eyecite.models.ResourceType` type (which simply requires hashability). For example, you might implementa custom full citation resolution function as follows, using the default resolution logic as a fallback:::    def my_resolve(full_cite):        # special handling for resolution of known cases in our database        resource = MyOpinion.objects.get(full_cite)        if resource:            return resource        # allow normal clustering of other citations        return resolve_full_citation(full_cite)    resolve_citations(citations, resolve_full_citation=my_resolve)    returns (pseudo):    {        &lt;MyOpinion object&gt;: [&lt;full_cite&gt;, &lt;short_cite&gt;, &lt;id_cite&gt;],        &lt;Resource object&gt;: [&lt;full cite&gt;, &lt;short cite&gt;],    }Tokenizers----------Internally, eyecite works by applying a list of regular expressions to the source text to convert it to a listof tokens:::    In [1]: from eyecite.tokenizers import default_tokenizer    In [2]: list(default_tokenizer.tokenize(&quot;Foo v. Bar, 123 U.S. 456 (2016). Id. at 457.&quot;))    Out[2]:    ['Foo',     StopWordToken(data='v.', ...),     'Bar,',     CitationToken(data='123 U.S. 456', volume='123', reporter='U.S.', page='456', ...),     '(2016).',     IdToken(data='Id.', ...),     'at',     '457.']Tokens are then scanned to determine values like the citation year or case name for citation resolution.Alternate tokenizers can be substituted by providing a tokenizer instance to :code:`get_citations()`:::    from eyecite.tokenizers import HyperscanTokenizer    hyperscan_tokenizer = HyperscanTokenizer(cache_dir='.hyperscan')    cites = get_citations(text, tokenizer=hyperscan_tokenizer)test_FindTest.py includes a simplified example of using a custom tokenizer that uses modifiedregular expressions to extract citations with OCR errors.eyecite ships with two tokenizers:AhocorasickTokenizer (default)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The default tokenizer uses the pyahocorasick library to filter down eyecite's list ofextractor regexes. It then performs extraction using the builtin :code:`re` library.HyperscanTokenizer^^^^^^^^^^^^^^^^^^The alternate HyperscanTokenizer compiles all extraction regexes into a hyperscan databaseso they can be extracted in a single pass. This is far faster than the default tokenizer(exactly how much faster depends on how many citation formats are included in the target text),but requires the optional :code:`hyperscan` dependency that has limited platform support.See the &quot;Installation&quot; section for hyperscan installation instructions and limitations.Compiling the hyperscan database takes several seconds, so short-running scripts may want toprovide a cache directory where the database can be stored. The directory should be writeableonly by the user:::    hyperscan_tokenizer = HyperscanTokenizer(cache_dir='.hyperscan')Debugging---------If you want to see what metadata eyecite is able to extract for each citation, you can use :code:`dump_citations`.This is primarily useful for developing eyecite, but may also be useful for exploring what data is available to you::    In [1]: from eyecite import dump_citations, get_citations    In [2]: text=&quot;Mass. Gen. Laws ch. 1, ยง 2. Foo v. Bar, 1 U.S. 2, 3-4 (1999). Id. at 3. Foo, supra, at 5.&quot;    In [3]: cites=get_citations(text)    In [4]: print(dump_citations(get_citations(text), text))    FullLawCitation: Mass. Gen. Laws ch. 1, ยง 2. Foo v. Bar, 1 U.S. 2, 3-4 (1      * groups        * reporter='Mass. Gen. Laws'        * chapter='1'        * section='2'    FullCaseCitation: Laws ch. 1, ยง 2. Foo v. Bar, 1 U.S. 2, 3-4 (1999). Id. at 3. Foo, s      * groups        * volume='1'        * reporter='U.S.'        * page='2'      * metadata        * pin_cite='3-4'        * year='1999'        * court='scotus'        * plaintiff='Foo'        * defendant='Bar,'      * year=1999    IdCitation: v. Bar, 1 U.S. 2, 3-4 (1999). Id. at 3. Foo, supra, at 5.      * metadata        * pin_cite='at 3'    SupraCitation: 2, 3-4 (1999). Id. at 3. Foo, supra, at 5.      * metadata        * antecedent_guess='Foo'        * pin_cite='at 5'In the real terminal, the :code:`span()` of each extracted citation will be highlighted.You can use the :code:`context_chars=30` parameter to control how much text is shown before and after.Installation============Installing eyecite is easy.::    poetry add eyeciteOr via pip::    pip install eyeciteOr install the latest dev version from github::    pip install https://github.com/freelawproject/eyecite/archive/main.zip#egg=eyeciteHyperscan installation----------------------To use :code:`HyperscanTokenizer` you must additionally install the python `hyperscan &lt;https://pypi.org/project/hyperscan/&gt;`_library and its dependencies. **python-hyperscan officially supports only x86 linux,** though other configurations may bepossible.Hyperscan installation example on x86 Ubuntu 20.04:::    apt install libhyperscan-dev    pip install hyperscanHyperscan installation example on x86 Debian Buster:::    echo 'deb http://deb.debian.org/debian buster-backports main' &gt; /etc/apt/sources.list.d/backports.list    apt install -t buster-backports libhyperscan-dev    pip install hyperscanHyperscan installation example with homebrew on x86 MacOS:::    brew install hyperscan    pip install hyperscanDeployment==========1. Update version info in :code:`pyproject.toml` by running :code:`poetry version [major, minor, patch]`.For an automated deployment, tag the commit with vx.y.z, and push it to main.An automated deploy and documentation update will be completed for you.For a manual deployment, run:::    poetry publish --buildYou will probably also need to push new documentation files to the gh-pages branch.Testing=======eyecite comes with a robust test suite of different citation strings that it is equipped to handle. Run these tests as follows:::    python3 -m unittest discover -s tests -p 'test_*.py'If you would like to create mock citation objects to assist you in writing your own local tests, import and use the following functions for convenience:::    from eyecite.test_factories import (        case_citation,        id_citation,        supra_citation,        unknown_citation,    )Development===========When a pull request is generated for changes from changes to eyecite, a githubworkflow will automatically trigger.  The workflow, benchmark.yml willtest improvements in accuracy and speed against the current main branch.The results are committed to an artifacts branch, and an ever updating commentin the PR comments with the output.License=======This repository is available under the permissive BSD license, making it easy and safe to incorporate in your own libraries.Pull and feature requests welcome. Online editing in GitHub is possible (and easy!).</longdescription>
</pkgmetadata>