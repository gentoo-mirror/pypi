<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Upstash Redis Python SDKupstash-redis is a connectionless, HTTP-based Redis client for Python, designed to be used in serverless and serverful environments such as:- AWS Lambda- Vercel Serverless- Google Cloud Functions- and other environments where HTTP is preferred over TCP.Inspired by other Redis clients like [@upstash/redis](https://github.com/upstash/upstash-redis) and [redis-py](https://github.com/redis/redis-py),the goal of this SDK is to provide a simple way to use Redis over the [Upstash REST API](https://docs.upstash.com/redis/features/restapi).The SDK is currently compatible with Python 3.8 and above.&lt;!-- toc --&gt;- [Upstash Redis Python SDK](#upstash-redis-python-sdk)- [Quick Start](#quick-start)  - [Install](#install)    - [PyPI](#pypi)  - [Usage](#usage)    - [BITFIELD and BITFIELD\_RO](#bitfield-and-bitfield_ro)    - [Custom commands](#custom-commands)- [Encoding](#encoding)- [Retry mechanism](#retry-mechanism)- [Contributing](#contributing)  - [Preparing the environment](#preparing-the-environment)  - [Running tests](#running-tests)&lt;!-- tocstop --&gt;# Quick Start## Install### PyPI```bashpip install upstash-redis```## UsageTo be able to use upstash-redis, you need to create a database on [Upstash](https://console.upstash.com/)and grab `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN` from the console.```python# for sync clientfrom upstash_redis import Redisredis = Redis(url=&quot;UPSTASH_REDIS_REST_URL&quot;, token=&quot;UPSTASH_REDIS_REST_TOKEN&quot;)# for async clientfrom upstash_redis.asyncio import Redisredis = Redis(url=&quot;UPSTASH_REDIS_REST_URL&quot;, token=&quot;UPSTASH_REDIS_REST_TOKEN&quot;)```Or, if you want to automatically load the credentials from the environment:```python# for sync usefrom upstash_redis import Redisredis = Redis.from_env()# for async usefrom upstash_redis.asyncio import Redisredis = Redis.from_env()```If you are in a serverless environment that allows it, it's recommended to initialise the client outside the request handlerto be reused while your function is still hot.Running commands might look like this:```pythonfrom upstash_redis import Redisredis = Redis.from_env()def main():  redis.set(&quot;a&quot;, &quot;b&quot;)  print(redis.get(&quot;a&quot;))# or for async context:from upstash_redis.asyncio import Redisredis = Redis.from_env()async def main():    await redis.set(&quot;a&quot;, &quot;b&quot;)  print(await redis.get(&quot;a&quot;))```### BITFIELD and BITFIELD_ROOne particular case is represented by these two chained commands, which are available as functions that return an instance of the `BITFIELD` and, respectively, `BITFIELD_RO` classes. Use the `execute` function to run the commands.```pythonredis.bitfield(&quot;test_key&quot;) \  .incrby(encoding=&quot;i8&quot;, offset=100, increment=100) \  .overflow(&quot;SAT&quot;) \  .incrby(encoding=&quot;i8&quot;, offset=100, increment=100) \  .execute()redis.bitfield_ro(&quot;test_key_2&quot;) \  .get(encoding=&quot;u8&quot;, offset=0) \  .get(encoding=&quot;u8&quot;, offset=&quot;#1&quot;) \  .execute()```### Custom commandsIf you want to run a command that hasn't been implemented, you can use the `execute` function of your client instanceand pass the command as a `list`.```pythonredis.execute(command=[&quot;XLEN&quot;, &quot;test_stream&quot;])```# EncodingAlthough Redis can store invalid JSON data, there might be problems with the deserialization.To avoid this, the Upstash REST proxy is capable of encoding the data as base64 on the server and then sending it to the client to bedecoded. For very large data, this can add a few milliseconds in latency. So, if you're sure that your data is valid JSON, you can set`rest_encoding` to `None`.# Retry mechanismupstash-redis has a fallback mechanism in case of network or API issues. By default, if a request fails it'll retry once, 3 seconds after the error. If you want to customize that, set `rest_retries` and `rest_retry_interval` (in seconds).# Contributing## Preparing the environmentThis project uses [Poetry](https://python-poetry.org) for packaging and dependency management. Make sure you are able to create the poetry shell with relevant dependencies.You will also need a database on [Upstash](https://console.upstash.com/).## Running testsTo run all the tests, make sure the poetry virtual environment activated with all the necessary dependencies. Set the `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN` environment variables and run:```bashpoetry run pytest```</longdescription>
</pkgmetadata>