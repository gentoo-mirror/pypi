<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://logyca.com/&quot;&gt;&lt;img src=&quot;https://logyca.com/wp-content/uploads/2019/06/logo-logyca.png&quot; alt=&quot;Logyca&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;LOGYCA public libraries&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/logyca&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/logyca?color=orange&amp;label=PyPI%20Package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;(https://www.python.org&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/Python-%5B%3E%3D3.7%2C%3C%3D3.11%5D-orange&quot; alt=&quot;Python&quot;&gt;&lt;/a&gt;&lt;/p&gt;---# About us* &lt;a href=&quot;http://logyca.com&quot; target=&quot;_blank&quot;&gt;LOGYCA Company&lt;/a&gt;* &lt;a href=&quot;https://www.youtube.com/channel/UCzcJtxfScoAtwFbxaLNnEtA&quot; target=&quot;_blank&quot;&gt;LOGYCA Youtube Channel&lt;/a&gt;* &lt;a href=&quot;https://www.linkedin.com/company/logyca&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&amp;logo=linkedin&amp;logoColor=white&quot; alt=&quot;Linkedin&quot;&gt;&lt;/a&gt;* &lt;a href=&quot;https://twitter.com/LOGYCA_Org&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Twitter-1DA1F2?style=for-the-badge&amp;logo=twitter&amp;logoColor=white&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt;* &lt;a href=&quot;https://www.facebook.com/OrganizacionLOGYCA/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Facebook-1877F2?style=for-the-badge&amp;logo=facebook&amp;logoColor=white&quot; alt=&quot;Facebook&quot;&gt;&lt;/a&gt;---# What's libraries* **Traversal libraries**: Standard methods to be used by microservices.* **Return codes**: Standard methods to report result status codes.* **Monitoring**: Standard methods to report check health status codes.* **Helpers**: Standard methods to be used. *---# Semantic Versioninglogyca &lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;* **MAJOR**: version when you make incompatible API changes* **MINOR**: version when you add functionality in a backwards compatible manner* **PATCH**: version when you make backwards compatible bug fixes---# Quick install```console# Windowspython -m pip install logyca# Linuxpip install logyca```---# Example of concepts using library APIResult```python# Example output from ApiResult:result={  &quot;resultToken&quot;: {    &quot;token&quot;: &quot;&quot;,    &quot;refreshToken&quot;: &quot;&quot;,    &quot;result&quot;: &quot;&quot;,    &quot;emailActiveDirectory&quot;: &quot;&quot;,    &quot;message&quot;: &quot;&quot;  },  &quot;resultObject&quot;: [    {      &quot;name&quot;: &quot;Database server&quot;,      &quot;status&quot;: 0,      &quot;description&quot;: &quot;Connection status fine&quot;    },    {      &quot;name&quot;: &quot;Redis server&quot;,      &quot;status&quot;: 0,      &quot;description&quot;: &quot;Connection status fine&quot;    }  ],  &quot;apiException&quot;: {    &quot;message&quot;: &quot;&quot;,    &quot;isError&quot;: false,    &quot;detail&quot;: null,    &quot;status&quot;: 200,    &quot;logycaStatus&quot;: 0  },  &quot;resultMessage&quot;: &quot;&quot;,  &quot;dataError&quot;: false}```## Use cases: you must catch de exception1. if you get data only the token:```json{&quot;dataError&quot;:false,&quot;resultObject&quot;:null,&quot;resultToken&quot;:&quot;Not Null&quot;}```2. if you get data correctly```json{&quot;dataError&quot;:false,&quot;resultObject&quot;=&quot;Not Null&quot;&quot;resultToken&quot;=null}```3. if you don't get because the operation was cancelled```json{&quot;dataError&quot;:true,&quot;resultObject&quot;:null,&quot;resultToken&quot;:null,&quot;apiException.logycaStatus&quot;:1,&quot;apiException.status&quot;=404,&quot;resultMessage&quot;:&quot;exception messages: the operation was cancelled&quot;}```[optional]apiException.message=&quot;if needed, return an object with structured failure data other than exception messages&quot;# Example of using library APIResult + Health Check```pythonfrom logyca import HealthEnum, LogycaStatusEnum, APIResultDTO, ApiFilterExceptionDTO, HTTPExceptionDTO, HealthDTO, TokensDTOtokensDTO=TokensDTO()tokensDTO.token='Token Example'apiFilterExceptionDTO=ApiFilterExceptionDTO()apiFilterExceptionDTO.isError=FalseapiFilterExceptionDTO.logycaStatus=LogycaStatusEnum.Already_ExistsapiFilterExceptionDTO.status=LogycaStatusEnum.Already_Exists.mappingHttpStatusCodehttpExceptionDTO=HTTPExceptionDTO()httpExceptionDTO.detail='No Problem'listHealth=[]listHealth.append(HealthDTO(name='Check CPU',status=HealthEnum.Ok,description='OK'))listHealth.append(HealthDTO(name='Check Connect DB',status=HealthEnum.Warning,description='Warning'))listHealth.append(HealthDTO(name='Check Connect Storage',status=HealthEnum.Critical,description='Critical'))apiResultDTO=APIResultDTO()apiResultDTO.resultMessage=httpExceptionDTO.detailapiResultDTO.resultObject=listHealthapiResultDTO.dataError=FalseapiResultDTO.resultToken=tokensDTOapiResultDTO.apiException=apiFilterExceptionDTOprint(apiResultDTO.resultToken)for item in apiResultDTO.resultObject:    print(f'name={item.name},status={item.status},description={item.description}')print(apiResultDTO.resultToken)# output# token='Token Example' refreshToken='' result='' emailActiveDirectory='' message=''# name=Check CPU,status=0,description=OK# name=Check Connect DB,status=1,description=Warning# name=Check Connect Storage,status=2,description=Critical# token='Token Example' refreshToken='' result='' emailActiveDirectory='' message=''```---# Example of using helpers```pythonfrom logyca import buildUrl,convertDateTimeStampUTCtoUTCColombiaurl1='https://domain.com'url2='api/get'print(f'buildUrl={buildUrl(url1,url2)}')# ouput# buildUrl=https://domain.com/api/getdatetimestampUTC=1679729109print(f'datetimeUTCColombia={convertDateTimeStampUTCtoUTCColombia(datetimestampUTC)}')# output# datetimeUTCColombia=2023-03-25 02:25:09-05:00```---# Current library test```console# Library installation# Windowspython -m pip install logyca[test]# Linuxpip install logyca# Run itpytest -s```---# History0.1.x* The library is integrated into the first project.* Start creating unit tests0.0.x* Deployment practicing.</longdescription>
</pkgmetadata>