<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>README######**NAME**``OPR`` - object programming runtime.**SYNOPSIS**:: python3 -m opr [&lt;cmd&gt;|-c|-d] [key=value] [key==value]**DESCRIPTION**``opr`` is a python3 runtime, intended to be programmable, with a clientprogram (opr), it provides object persistence, an event handler and somebasic code to load modules that can provide additional functionality.``opr`` uses object programming, object oriented programming without theoriented. Object programming is programming where the methods are seperatedout into functions that use the object as the first argument of that funcion.This gives base class definitions a clean namespace to inherit from and to loadjson data into the object's __dict__. A clean namespace prevents a json loadedattribute to overwrite any methods.``opr`` stores it's data on disk where objects are time versioned and thelast version saved on disk is served to the user layer. Files are JSON dumpsand paths carry the type in the path name what makes reconstruction fromfilename easier then reading type from the object.**INSTALL**to make typing more simpler use an alias:: $ alias opr=&quot;python3 -m opr&quot;:: $ sudo pip3 install opr --upgrade --force-reinstall (*) use remove and reinstall if ``opr`` doesn't work properly**USAGE**create a mod dir:: $ mkdir modopen the file mod/hello.py and add the following:: def hello(event):     event.reply(&quot;hello world!&quot;)then run the following on the prompt:: $ python3 -m opr hello hello world!use the -c option if you want a console to run commands:: $ python3 -m opr -c &gt; hello hello world!running ``opr`` in the background is done by using the ``-d`` option:: $ python3 -m opr -d $**PROGRAMMING**The ``opr`` package provides an Object class, that mimics a dict while usingattribute access and provides a save/load to/from json files on disk.Objects can be searched with database functions and uses read-only filesto improve persistence and a type in filename for reconstruction. Methods arefactored out into functions to have a clean namespace to read JSON data into.basic usage is this:: &gt;&gt;&gt; from opr.objects import Object &gt;&gt;&gt; o = Object() &gt;&gt;&gt; o.key = &quot;value&quot; &gt;&gt;&gt; o.key &gt;&gt;&gt; 'value'Objects try to mimic a dictionary while trying to be an object with normalattribute access as well. hidden methods are provided, the methods arefactored out into functions like get, items, keys, register, set, updateand values.great for giving objects peristence by having their state stored in files:: &gt;&gt;&gt; from opr.persist import Object, write &gt;&gt;&gt; o = Object() &gt;&gt;&gt; write(o) opr.objects.Object/89efa5fd7ad9497b96fdcb5f01477320/2022-11-21/17:20:12.221192**AUTHOR**B.H.J. Thate &lt;thatebhj@gmail.com&gt;**COPYRIGHT**``opr`` is placed in the Public Domain.</longdescription>
</pkgmetadata>