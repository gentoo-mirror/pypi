<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Corpusit`corpusit` provides easy-to-use dataset iterators for natural language modelingtasks, such as SkipGram.It is written in rust to enable fast multi-threading random sampling withdeterministic results. So you dont have to worry about the speed /reproducibility.Corpusit does not provide tokenization functionalities. So please use `corpusit`on tokenized corpus files (plain texts).# EnvironmentPython &gt;= 3.6# Installation```bash$ pip install corpusit```## On Windows and MacOSPlease install [rust](https://www.rust-lang.org/tools/install) compiler beforeexecuting `pip install corpusit`. # Usage## SkipGramEach line in the corpus file is a document, and the tokens should be separated by whitespace.```pythonimport corpusitcorpus_path = 'corpusit/data/corpus.txt'vocab = corpusit.Vocab.build(corpus_path, min_count=1, unk='&lt;unk&gt;')dataset = corpusit.SkipGramDataset(    path_to_corpus=corpus_path,    vocab=vocab,    win_size=10,    sep=&quot; &quot;,    mode=&quot;onepass&quot;,       # onepass | repeat | shuffle    subsample=1e-3,    power=0.75,    n_neg=1,)it = dataset.positive_sampler(batch_size=100, seed=0, num_threads=4)for i, pair in enumerate(it):    print(f'Iter {i:&gt;4d}, shape={pair.shape}. First pair: '          f'{pair[0,0]:&gt;5} ({vocab.i2s[pair[0,0]]:&gt;10}), '          f'{pair[0,1]:&gt;5} ({vocab.i2s[pair[0,1]]:&gt;10})')# Return:# Iter    0, shape=(100, 2). First pair:    14 (        is),    10 ( anarchism)# Iter    1, shape=(100, 2). First pair:     8 (        to),   540 (      and/)# Iter    2, shape=(100, 2). First pair:   775 (constitutes),    34 (anarchists)# Iter    3, shape=(100, 2). First pair:    72 (     other),   214 (  criteria)# Iter    4, shape=(100, 2). First pair:   650 (  defining),   487 ( companion)# ...```## SkipGram with negative sampling```pythonit = dataset.sampler(100, seed=0, num_threads=4)for i, res in enumerate(it):    pair, label = res    print(f'Iter {i:&gt;4d}, shape={pair.shape}. First pair: '          f'{pair[0,0]:&gt;5} ({vocab.i2s[pair[0,0]]:&gt;10}), '          f'{pair[0,1]:&gt;5} ({vocab.i2s[pair[0,1]]:&gt;10}), '          f'label = {label[0]}')# Returns:# Iter    0, shape=(200, 2). First pair:    15 (        is),    10 ( anarchism), label = True# Iter    1, shape=(200, 2). First pair:     9 (        to),   722 (      and/), label = True# Iter    2, shape=(200, 2). First pair:   389 (constitutes),    34 (anarchists), label = True# Iter    3, shape=(200, 2). First pair:    73 (     other),   212 (  criteria), label = True# Iter    4, shape=(200, 2). First pair:   445 (  defining),   793 ( companion), label = True# ...```# Roadmap- GloVe# LicenseMIT</longdescription>
</pkgmetadata>