<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Image transformation, compression, and decompression codecs===========================================================Imagecodecs is a Python library that provides block-oriented, in-memory buffertransformation, compression, and decompression functions for use in Tifffile,Czifile, Zarr, kerchunk, and other scientific image input/output packages.Decode and/or encode functions are implemented for Zlib (DEFLATE), GZIP,ZStandard (ZSTD), Blosc, Brotli, Snappy, LZMA, BZ2, LZ4, LZ4F, LZ4HC, LZW,LZF, LZFSE, LZHAM, PGLZ (PostgreSQL LZ), RCOMP (Rice), ZFP, AEC, SZIP, LERC,EER, NPY, BCn, DDS, PNG, APNG, GIF, TIFF, WebP, QOI, JPEG 8-bit, JPEG 12-bit,Lossless JPEG (LJPEG, LJ92, JPEGLL), JPEG 2000 (JP2, J2K), JPEG LS, JPEG XL,JPEG XR (WDP, HD Photo), MOZJPEG, AVIF, HEIF, RGBE (HDR), Jetraw, PackBits,Packed Integers, Delta, XOR Delta, Floating Point Predictor, Bitorder reversal,Byteshuffle, Bitshuffle, CMS (color space transformations), and Float24(24-bit floating point).Checksum functions are implemented for crc32, adler32, fletcher32, andJenkins lookup3.:Author: `Christoph Gohlke &lt;https://www.cgohlke.com&gt;`_:License: BSD 3-Clause:Version: 2023.8.12:DOI: `10.5281/zenodo.6915978 &lt;https://doi.org/10.5281/zenodo.6915978&gt;`_Quickstart----------Install the imagecodecs package and all dependencies from the`Python Package Index &lt;https://pypi.org/project/imagecodecs/&gt;`_::    python -m pip install -U imagecodecs[all]Imagecodecs is also available in other package repositories such as`Anaconda &lt;https://anaconda.org/conda-forge/imagecodecs&gt;`_,`MSYS2 &lt;https://packages.msys2.org/base/mingw-w64-python-imagecodecs&gt;`_, and`MacPorts &lt;https://ports.macports.org/port/py-imagecodecs/summary&gt;`_.See `Requirements`_ and `Notes`_ for building from source.See `Examples`_ for using the programming interface.Source code and support are available on`GitHub &lt;https://github.com/cgohlke/imagecodecs&gt;`_.Requirements------------This revision was tested with the following requirements and dependencies(other versions may work):- `CPython &lt;https://www.python.org&gt;`_ 3.9.13, 3.10.11, 3.11.4, 3.12.0rc, 64-bit- `Numpy &lt;https://pypi.org/project/numpy&gt;`_ 1.25.2- `numcodecs &lt;https://pypi.org/project/numcodecs/&gt;`_ 0.11.0  (optional, for Zarr compatible codecs)Build requirements:- `Cython &lt;https://github.com/cython/cython&gt;`_ 0.29.36- `brotli &lt;https://github.com/google/brotli&gt;`_ 1.0.9- `brunsli &lt;https://github.com/google/brunsli&gt;`_ 0.1- `bzip2 &lt;https://gitlab.com/bzip2/bzip2&gt;`_ 1.0.8- `c-blosc &lt;https://github.com/Blosc/c-blosc&gt;`_ 1.21.4- `c-blosc2 &lt;https://github.com/Blosc/c-blosc2&gt;`_ 2.10.1- `charls &lt;https://github.com/team-charls/charls&gt;`_ 2.4.2- `giflib &lt;https://sourceforge.net/projects/giflib/&gt;`_ 5.2.1- `jetraw &lt;https://github.com/Jetraw/Jetraw&gt;`_ 22.02.16.1- `jxrlib &lt;https://github.com/cgohlke/jxrlib&gt;`_ 1.2- `lcms &lt;https://github.com/mm2/Little-CMS&gt;`_ 2.15- `lerc &lt;https://github.com/Esri/lerc&gt;`_ 4.0.0- `libaec &lt;https://gitlab.dkrz.de/k202009/libaec&gt;`_ 1.0.6- `libavif &lt;https://github.com/AOMediaCodec/libavif&gt;`_ 0.11.1  (`aom &lt;https://aomedia.googlesource.com/aom&gt;`_ 3.6.1,  `dav1d &lt;https://github.com/videolan/dav1d&gt;`_ 1.2.1,  `rav1e &lt;https://github.com/xiph/rav1e&gt;`_ 0.6.6,  `svt-av1 &lt;https://gitlab.com/AOMediaCodec/SVT-AV1&gt;`_ 1.6.0)- `libdeflate &lt;https://github.com/ebiggers/libdeflate&gt;`_ 1.18- `libheif &lt;https://github.com/strukturag/libheif&gt;`_ 1.16.2  (`libde265 &lt;https://github.com/strukturag/libde265&gt;`_ 1.0.12,  `x265 &lt;https://bitbucket.org/multicoreware/x265_git/src/master/&gt;`_ 3.5)- `libjpeg-turbo &lt;https://github.com/libjpeg-turbo/libjpeg-turbo&gt;`_ 3.0.0- `libjxl &lt;https://github.com/libjxl/libjxl&gt;`_ 0.8.2- `liblzma &lt;https://git.tukaani.org/?p=xz.git&gt;`_ 5.4.4- `libpng &lt;https://github.com/glennrp/libpng&gt;`_ 1.6.39- `libpng-apng &lt;https://sourceforge.net/projects/libpng-apng/&gt;`_ 1.6.39- `libtiff &lt;https://gitlab.com/libtiff/libtiff&gt;`_ 4.5.1- `libwebp &lt;https://github.com/webmproject/libwebp&gt;`_ 1.3.1- `lz4 &lt;https://github.com/lz4/lz4&gt;`_ 1.9.4- `lzfse &lt;https://github.com/lzfse/lzfse/&gt;`_ 1.0- `lzham_codec &lt;https://github.com/richgel999/lzham_codec/&gt;`_ 1.0- `mozjpeg &lt;https://github.com/mozilla/mozjpeg&gt;`_ 4.1.1- `openjpeg &lt;https://github.com/uclouvain/openjpeg&gt;`_ 2.5.0- `snappy &lt;https://github.com/google/snappy&gt;`_ 1.1.10- `zfp &lt;https://github.com/LLNL/zfp&gt;`_ 1.0.0- `zlib &lt;https://github.com/madler/zlib&gt;`_ 1.2.13- `zlib-ng &lt;https://github.com/zlib-ng/zlib-ng&gt;`_ 2.1.3- `zopfli &lt;https://github.com/google/zopfli&gt;`_ 1.0.3- `zstd &lt;https://github.com/facebook/zstd&gt;`_ 1.5.5Vendored requirements:- `bcdec.h &lt;https://github.com/iOrange/bcdec&gt;`_ 026acf9- `bitshuffle &lt;https://github.com/kiyo-masui/bitshuffle&gt;`_ 0.5.1- `cfitsio ricecomp.c &lt;https://heasarc.gsfc.nasa.gov/fitsio/&gt;`_ modified- `h5checksum.c &lt;https://github.com/HDFGroup/hdf5/&gt;`_ modified- `jpg_0XC3.cpp  &lt;https://github.com/rordenlab/dcm2niix/blob/master/console/jpg_0XC3.cpp&gt;`_  modified- `liblj92  &lt;https://bitbucket.org/baldand/mlrawviewer/src/master/liblj92/&gt;`_ modified- `liblzf &lt;http://oldhome.schmorp.de/marc/liblzf.html&gt;`_ 3.6- `libspng &lt;https://github.com/randy408/libspng&gt;`_ 0.7.4- `pg_lzcompress.c &lt;https://github.com/postgres/postgres&gt;`_ modified- `qoi.h &lt;https://github.com/phoboslab/qoi/&gt;`_ 36190eb- `rgbe.c &lt;https://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c&gt;`_ modifiedTest requirements:- `tifffile &lt;https://pypi.org/project/tifffile&gt;`_ 2023.7.18- `czifile &lt;https://pypi.org/project/czifile&gt;`_ 2019.7.2- `zarr &lt;https://github.com/zarr-developers/zarr-python&gt;`_ 2.16.0- `python-blosc &lt;https://github.com/Blosc/python-blosc&gt;`_ 1.11.1- `python-blosc2 &lt;https://github.com/Blosc/python-blosc2&gt;`_ 2.2.6- `python-brotli &lt;https://github.com/google/brotli/tree/master/python&gt;`_ 1.0.9- `python-lz4 &lt;https://github.com/python-lz4/python-lz4&gt;`_ 4.3.2- `python-lzf &lt;https://github.com/teepark/python-lzf&gt;`_ 0.2.4- `python-snappy &lt;https://github.com/andrix/python-snappy&gt;`_ 0.6.1- `python-zstd &lt;https://github.com/sergey-dryabzhinsky/python-zstd&gt;`_ 1.5.5.1- `pyliblzfse &lt;https://github.com/ydkhatri/pyliblzfse&gt;`_ 0.4.1- `zopflipy &lt;https://github.com/hattya/zopflipy&gt;`_ 1.8Revisions---------2023.8.12- Pass 6929 tests.- Add EER (Electron Event Representation) decoder.- Add option to pass initial value to crc32 and adler32 checksum functions.- Add fletcher32 and lookup3 checksum functions via HDF5's h5checksum.c.- Add Checksum codec for numcodecs.- Add py.typed marker.2023.7.10- Rebuild with optimized compile flags.2023.7.4- Add BCn and DDS decoder via bcdec library.- Add functions to transcode JPEG XL to/from JPEG (#78).- Add option to decode select frames from animated WebP.- Use legacy JPEG8 codec when building without libjpeg-turbo 3 (#65).- Change blosc2_encode defaults to match blosc2-python (breaking).- Fix segfault writing JPEG2K with more than 4 samples.- Fix some codecs returning bytearray by default.- Fully vendor cfitsio's ricecomp.c.- Drop support for Python 3.8 and numpy &lt; 1.21 (NEP29).2023.3.16- Require libjpeg-turbo 2.1.91 (3.0 beta) and c-blosc2 2.7.1.- Add experimental type hints.- Add SZIP codec via libaec library.- Use Zstd streaming API to decode blocks with unknown decompressed size.- Remove unused level, index, and numthreads parameters (breaking).- Make AEC and BLOSC constants enums (breaking).- Capitalize numcodecs class names (breaking).- Remove JPEG12 codec (breaking; use JPEG8 instead).- Encode and decode lossless and 12-bit JPEG with JPEG8 codec by default.- Remove JPEGSOF3 fallback in JPEG codec.- Fix slow IFD seeking with libtiff 4.5.- Fixes for Cython 3.0.2023.1.23- Require libjxl 0.8.- Change mapping of level to distance parameter in jpegxl_encode.- Add option to specify bitspersample in jpegxl_encode.- Add option to pass de/linearize tables to LJPEG codec.- Fix lj92 decoder for SSSS=16 (#59).- Prefer ljpeg over jpegsof3 codec.- Add option to specify AVIF encoder codec.- Support LERC with Zstd or Deflate compression.- Squeeze chunk arrays by default in numcodecs image compression codecs.2022.12.24- Pass 6512 tests.- Fix PNG codec error handling.- Fix truncated transferfunctions in cms_profile (#57).- Fix exceptions not raised in cdef functions not returning Python object.2022.12.22- Require libtiff 4.5.- Require libavif 0.11.- Change jpegxl_encode level parameter to resemble libjpeg quality (breaking).- Add LZFSE codec via lzfse library.- Add LZHAM codec via lzham library.- Fix AttributeError in cms_profile (#52).- Support gamma argument in cms_profile (#53).- Raise limit of TIFF pages to 1048576.- Use libtiff thread-safe error/warning handlers.- Add option to specify filters and strategy in png_encode.- Add option to specify integrity check type in lzma_encode.- Fix DeprecationWarning with NumPy 1.24.- Support Python 3.11 and win-arm64.2022.9.26- Support JPEG XL multi-channel (planar grayscale only) and multi-frame.- Require libjxl 0.7.- Switch to Blosc2 API and require c-blosc 2.4 (breaking).- Return LogLuv encoded TIFF as float32.- Add RGBE codec via rgbe.c.2022.8.8- Drop support for libjpeg.- Fix encoding JPEG in RGB color space.- Require ZFP 1.0.2022.7.31- Add option to decode WebP as RGBA.- Add option to specify WebP compression method.- Use exact lossless WebP encoding.2022.7.27- Add LZW encoder.- Add QOI codec via qoi.h (#37).- Add HEIF codec via libheif (source only; #33).- Add JETRAW codec via Jetraw demo (source only).- Add ByteShuffle codec, a generic version of FloatPred.- Replace imcd_floatpred by imcd_byteshuffle (breaking).- Use bool type in imcd (breaking).2022.2.22- …Refer to the CHANGES file for older revisions.Objectives----------Many scientific image storage formats like TIFF, CZI, DICOM, HDF, and Zarrare containers that hold large numbers of small data segments (chunks, tiles,stripes), which are encoded using a variety of compression and pre-filteringmethods. Metadata common to all data segments are typically stored separatefrom the segments.The purpose of the Imagecodecs library is to support Python modules inencoding and decoding such data segments. The specific aims are:- Provide functions for encoding and decoding small image data segments  in-memory (not in-file) from and to bytes or numpy arrays for many  compression and filtering methods.- Support image formats and compression methods not available elsewhere in  the Python ecosystem.- Reduce the runtime dependency on numerous, large, inapt, or unmaintained  Python packages. The imagecodecs package only depends on numpy.- Implement codecs as Cython wrappers of 3rd party libraries with a C API  and permissive license if exists, else use own C library.  Provide Cython definition files for the wrapped C libraries.- Release the Python global interpreter lock (GIL) during extended native/C  function calls for multi-threaded use.Accessing parts of large data segments and reading metadata from segmentsare out of the scope of this library.Notes-----This library is largely a work in progress.The API is not stable yet and might change between revisions.Python &lt;= 3.8 is no longer supported. 32-bit versions are deprecated.Works on little-endian platforms only.Only the ``win_amd64`` wheels include all features.The ``tiff``, ``bcn``, ``dds``, ``eer``, ``packints``, and ``jpegsof3`` codecsare currently decode-only.The ``heif`` and ``jetraw`` codecs are distributed as source code only due tolicense and possible patent usage issues.The latest `Microsoft Visual C++ Redistributable for Visual Studio 2015-2022&lt;https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist&gt;`_is required on Windows.Refer to the imagecodecs/licenses folder for 3rd-party library licenses.This software is based in part on the work of the Independent JPEG Group.Wheels for macOS may not be available for all releases.Build instructions for manylinux and macOS courtesy of`Grzegorz Bokota &lt;https://github.com/Czaki/imagecodecs_build&gt;`_.Update pip and setuptools to the latest version before installing imagecodecs::    python -m pip install -U pip setuptools wheel CythonInstall the requirements for building imagecodecs from source code onlatest Ubuntu Linux distributions:    ``sudo apt-get install build-essential python3-dev cython3    python3-setuptools python3-pip python3-wheel python3-numpy python3-zarr    python3-pytest python3-blosc python3-brotli python3-snappy python3-lz4    libz-dev libblosc-dev liblzma-dev liblz4-dev libzstd-dev libpng-dev    libwebp-dev libbz2-dev libopenjp2-7-dev libjpeg-dev libjxr-dev    liblcms2-dev libcharls-dev libaec-dev libbrotli-dev libsnappy-dev    libzopfli-dev libgif-dev libtiff-dev libdeflate-dev libavif-dev    libheif-dev``Use the ``--lite`` build option to only build extensions without 3rd-partydependencies. Use the ``--skip-extension`` build options to skip buildingspecific extensions, for example:    ``python -m pip install imagecodecs --global-option=&quot;build_ext&quot;    --global-option=&quot;--skip-bitshuffle&quot;``The ``apng``, ``avif``, ``jetraw``, ``jpegls``, ``jpegxl``, ``lerc``,``lz4f``, ``lzfse``, ``lzham``, ``mozjpeg``, ``zfp``, and ``zlibng``extensions are disabled by default when building from source.To modify other build settings such as library names and compiler arguments,provide a ``imagecodecs_distributor_setup.customize_build`` function, whichis imported and executed during setup. See ``setup.py`` for examples.Other Python packages and C libraries providing imaging or compression codecs:`Python zlib &lt;https://docs.python.org/3/library/zlib.html&gt;`_,`Python bz2 &lt;https://docs.python.org/3/library/bz2.html&gt;`_,`Python lzma &lt;https://docs.python.org/3/library/lzma.html&gt;`_,`backports.lzma &lt;https://github.com/peterjc/backports.lzma&gt;`_,`python-lzo &lt;https://bitbucket.org/james_taylor/python-lzo-static&gt;`_,`python-lzw &lt;https://github.com/joeatwork/python-lzw&gt;`_,`python-lerc &lt;https://pypi.org/project/lerc/&gt;`_,`wavpack-numcodecs&lt;https://github.com/AllenNeuralDynamics/wavpack-numcodecs&gt;`_,`packbits &lt;https://github.com/psd-tools/packbits&gt;`_,`isa-l.igzip &lt;https://github.com/intel/isa-l&gt;`_,`fpzip &lt;https://github.com/seung-lab/fpzip&gt;`_,`libmng &lt;https://sourceforge.net/projects/libmng/&gt;`_,`OpenEXR &lt;https://github.com/AcademySoftwareFoundation/openexr&gt;`_(EXR, PIZ, PXR24, B44, DWA),`pyJetraw &lt;https://github.com/Jetraw/pyJetraw&gt;`_,`tinyexr &lt;https://github.com/syoyo/tinyexr&gt;`_,`pytinyexr &lt;https://github.com/syoyo/pytinyexr&gt;`_,`pyroexr &lt;https://github.com/dragly/pyroexr&gt;`_,`JasPer &lt;https://github.com/jasper-software/jasper&gt;`_,`libjpeg &lt;https://github.com/thorfdbg/libjpeg&gt;`_ (GPL),`pylibjpeg &lt;https://github.com/pydicom/pylibjpeg&gt;`_,`pylibjpeg-libjpeg &lt;https://github.com/pydicom/pylibjpeg-libjpeg&gt;`_ (GPL),`pylibjpeg-openjpeg &lt;https://github.com/pydicom/pylibjpeg-openjpeg&gt;`_,`pylibjpeg-rle &lt;https://github.com/pydicom/pylibjpeg-rle&gt;`_,`glymur &lt;https://github.com/quintusdias/glymur&gt;`_,`pyheif &lt;https://github.com/carsales/pyheif&gt;`_,`pyrus-cramjam &lt;https://github.com/milesgranger/pyrus-cramjam&gt;`_,`PyLZHAM &lt;https://github.com/Galaxy1036/pylzham&gt;`_,`BriefLZ &lt;https://github.com/jibsen/brieflz&gt;`_,`QuickLZ &lt;http://www.quicklz.com/&gt;`_ (GPL),`LZO &lt;http://www.oberhumer.com/opensource/lzo/&gt;`_ (GPL),`nvJPEG &lt;https://developer.nvidia.com/nvjpeg&gt;`_,`nvJPEG2K &lt;https://developer.nvidia.com/nvjpeg&gt;`_,`PyTurboJPEG &lt;https://github.com/lilohuang/PyTurboJPEG&gt;`_,`CCSDS123 &lt;https://github.com/drowzie/CCSDS123-Issue-2&gt;`_,`LPC-Rice &lt;https://sourceforge.net/projects/lpcrice/&gt;`_,`CompressionAlgorithms &lt;https://github.com/glampert/compression-algorithms&gt;`_,`Compressonator &lt;https://github.com/GPUOpen-Tools/Compressonator&gt;`_,`Wuffs &lt;https://github.com/google/wuffs&gt;`_,`TinyDNG &lt;https://github.com/syoyo/tinydng&gt;`_,`OpenJPH &lt;https://github.com/aous72/OpenJPH&gt;`_,`SPERR &lt;https://github.com/NCAR/SPERR&gt;`_ (GPL),`MAFISC&lt;https://wr.informatik.uni-hamburg.de/research/projects/icomex/mafisc&gt;`_.Examples--------Import the JPEG2K codec:&gt;&gt;&gt; from imagecodecs import (...     jpeg2k_encode, jpeg2k_decode, jpeg2k_check, jpeg2k_version, JPEG2K... )Check that the JPEG2K codec is available in the imagecodecs build:&gt;&gt;&gt; JPEG2K.availableTruePrint the version of the JPEG2K codec's underlying OpenJPEG library:&gt;&gt;&gt; jpeg2k_version()'openjpeg 2.5.0'Encode a numpy array in lossless JP2 format:&gt;&gt;&gt; array = numpy.random.randint(100, 200, (256, 256, 3), numpy.uint8)&gt;&gt;&gt; encoded = jpeg2k_encode(array, level=0)&gt;&gt;&gt; bytes(encoded[:12])b'\x00\x00\x00\x0cjP  \r\n\x87\n'Check that the encoded bytes likely contain a JPEG 2000 stream:&gt;&gt;&gt; jpeg2k_check(encoded)TrueDecode the JP2 encoded bytes to a numpy array:&gt;&gt;&gt; decoded = jpeg2k_decode(encoded)&gt;&gt;&gt; numpy.array_equal(decoded, array)TrueDecode the JP2 encoded bytes to an existing numpy array:&gt;&gt;&gt; out = numpy.empty_like(array)&gt;&gt;&gt; _ = jpeg2k_decode(encoded, out=out)&gt;&gt;&gt; numpy.array_equal(out, array)TrueNot all codecs are fully implemented, raising exceptions at runtime:&gt;&gt;&gt; from imagecodecs import tiff_encode&gt;&gt;&gt; tiff_encode(array)Traceback (most recent call last): ...NotImplementedError: tiff_encodeWrite the numpy array to a JP2 file:&gt;&gt;&gt; from imagecodecs import imwrite, imread&gt;&gt;&gt; imwrite('_test.jp2', array)Read the image from the JP2 file as numpy array:&gt;&gt;&gt; image = imread('_test.jp2')&gt;&gt;&gt; numpy.array_equal(image, array)TrueCreate a JPEG 2000 compressed Zarr array:&gt;&gt;&gt; import zarr&gt;&gt;&gt; import numcodecs&gt;&gt;&gt; from imagecodecs.numcodecs import Jpeg2k&gt;&gt;&gt; numcodecs.register_codec(Jpeg2k)&gt;&gt;&gt; zarr.zeros(...     (4, 5, 512, 512, 3),...     chunks=(1, 1, 256, 256, 3),...     dtype='u1',...     compressor=Jpeg2k()... )&lt;zarr.core.Array (4, 5, 512, 512, 3) uint8&gt;Access image data in a sequence of JP2 files via tifffile.FileSequence anddask.array:&gt;&gt;&gt; import tifffile&gt;&gt;&gt; import dask.array&gt;&gt;&gt; def jp2_read(filename):...     with open(filename, 'rb') as fh:...         data = fh.read()...     return jpeg2k_decode(data)&gt;&gt;&gt; with tifffile.FileSequence(jp2_read, '*.jp2') as ims:...     with ims.aszarr() as store:...         dask.array.from_zarr(store)dask.array&lt;from-zarr, shape=(1, 256, 256, 3)...chunksize=(1, 256, 256, 3)...Write the Zarr store to a fsspec ReferenceFileSystem in JSON formatand open it as a Zarr array:&gt;&gt;&gt; store.write_fsspec(...     'temp.json', url='file://', codec_id='imagecodecs_jpeg2k'... )&gt;&gt;&gt; import fsspec&gt;&gt;&gt; mapper = fsspec.get_mapper(...     'reference://', fo='temp.json', target_protocol='file'... )&gt;&gt;&gt; zarr.open(mapper, mode='r')&lt;zarr.core.Array (1, 256, 256, 3) uint8 read-only&gt;View the image in the JP2 file from the command line::    $ python -m imagecodecs _test.jp2</longdescription>
</pkgmetadata>