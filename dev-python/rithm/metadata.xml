<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>rithm=====[![](https://github.com/lycantropos/rithm/workflows/CI/badge.svg)](https://github.com/lycantropos/rithm/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://codecov.io/gh/lycantropos/rithm/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/rithm &quot;Codecov&quot;)[![](https://img.shields.io/github/license/lycantropos/rithm.svg)](https://github.com/lycantropos/rithm/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/rithm.svg)](https://badge.fury.io/py/rithm &quot;PyPI&quot;)[![](https://img.shields.io/crates/v/rithm.svg)](https://crates.io/crates/rithm &quot;crates.io&quot;)In what follows `python` is an alias for `python3.8` or `pypy3.8`or any later version (`python3.9`, `pypy3.9` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade rithm```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/rithm.gitcd rithm```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage-----### Python#### Arbitrary precision integerWith setup```python&gt;&gt;&gt; from rithm.integer import Int```we can:- construct  ```python  &gt;&gt;&gt; Int()  Int(0)  &gt;&gt;&gt; Int(9)  Int(9)  &gt;&gt;&gt; Int('9')  Int(9)  &gt;&gt;&gt; Int('0b1001', 2)  Int(9)  &gt;&gt;&gt; Int('0o11', 8)  Int(9)  &gt;&gt;&gt; Int('0x9', 16)  Int(9)  &gt;&gt;&gt; Int('1001', 2)  Int(9)  &gt;&gt;&gt; Int('0o11', 8)  Int(9)  &gt;&gt;&gt; Int('9', 16)  Int(9)  &gt;&gt;&gt; Int(9.99)  Int(9)  ```- compare  ```python  &gt;&gt;&gt; Int(9) == Int(9)  True  &gt;&gt;&gt; Int(9) &gt;= Int(9)  True  &gt;&gt;&gt; Int(9) &gt; Int(8)  True  &gt;&gt;&gt; Int(9) &lt;= Int(9)  True  &gt;&gt;&gt; Int(9) &lt; Int(10)  True    ```- calculate  ```python  &gt;&gt;&gt; abs(Int(-9))  Int(9)  &gt;&gt;&gt; Int(4) + Int(5)  Int(9)  &gt;&gt;&gt; Int(9) &amp; Int(11)  Int(9)  &gt;&gt;&gt; Int(19) // Int(2)  Int(9)  &gt;&gt;&gt; ~Int(-10)  Int(9)  &gt;&gt;&gt; Int(19) % Int(10)  Int(9)  &gt;&gt;&gt; Int(3) * Int(3)  Int(9)  &gt;&gt;&gt; -Int(-9)  Int(9)  &gt;&gt;&gt; Int(1) | Int(8)  Int(9)  &gt;&gt;&gt; Int(3) ** Int(2)  Int(9)  &gt;&gt;&gt; Int(5) &lt;&lt; Int(1)  Int(10)  &gt;&gt;&gt; Int(5) &gt;&gt; Int(1)  Int(2)  &gt;&gt;&gt; Int(25) - Int(16)  Int(9)  &gt;&gt;&gt; Int(18) / Int(2)  Fraction(Int(9), Int(1))  &gt;&gt;&gt; Int(2) ^ Int(11)  Int(9)    ```#### Exact fractionWith setup```python&gt;&gt;&gt; from rithm.fraction import Fraction```we can:- construct  ```python  &gt;&gt;&gt; Fraction()  Fraction(Int(0), Int(1))  &gt;&gt;&gt; Fraction(1)  Fraction(Int(1), Int(1))  &gt;&gt;&gt; Fraction(1, 2)  Fraction(Int(1), Int(2))  &gt;&gt;&gt; Fraction(50, 100)  Fraction(Int(1), Int(2))  &gt;&gt;&gt; Fraction(0.5)  Fraction(Int(1), Int(2))  ```- compare  ```python  &gt;&gt;&gt; Fraction(1, 2) == Fraction(1, 2)  True  &gt;&gt;&gt; Fraction(1, 2) &gt;= Fraction(1, 2)  True  &gt;&gt;&gt; Fraction(1, 2) &gt; Fraction(1, 3)  True  &gt;&gt;&gt; Fraction(1, 2) &lt; Fraction(2, 3)  True  &gt;&gt;&gt; Fraction(1, 2) != Fraction(1, 3)  True  ```- calculate  ```python  &gt;&gt;&gt; abs(Fraction(-1, 2))  Fraction(Int(1), Int(2))  &gt;&gt;&gt; Fraction(1, 3) + Fraction(1, 6)  Fraction(Int(1), Int(2))  &gt;&gt;&gt; Fraction(3, 2) // Fraction(1)  Int(1)  &gt;&gt;&gt; Fraction(3, 2) % Fraction(1)  Fraction(Int(1), Int(2))  &gt;&gt;&gt; Fraction(1, 3) * Fraction(3, 2)  Fraction(Int(1), Int(2))  &gt;&gt;&gt; -Fraction(-1, 2)  Fraction(Int(1), Int(2))  &gt;&gt;&gt; Fraction(1, 2) ** 2  Fraction(Int(1), Int(4))  &gt;&gt;&gt; Fraction(3, 2) - Fraction(1)  Fraction(Int(1), Int(2))  &gt;&gt;&gt; Fraction(1, 3) / Fraction(2, 3)  Fraction(Int(1), Int(2))  ```### Rust#### Arbitrary precision integer```rust/// With setupuse std::convert::TryFrom;use traiter::numbers::{    Abs, DivEuclid, FromStrRadix, Pow, RemEuclid, Zero};use rithm::big_int;#[cfg(target_arch = &quot;x86&quot;)]type Digit = u16;#[cfg(not(target_arch = &quot;x86&quot;))]type Digit = u32;const DIGIT_BITNESS: usize = (Digit::BITS - 1) as usize;const _: () = assert!(big_int::is_valid_digit_bitness::&lt;Digit, DIGIT_BITNESS&gt;());type BigInt = big_int::BigInt&lt;Digit, DIGIT_BITNESS&gt;;/// we can:/// - constructassert_eq!(BigInt::zero(), 0);assert_eq!(BigInt::from(9), 9);assert_eq!(BigInt::try_from(&quot;9&quot;).unwrap(), 9);assert_eq!(BigInt::try_from(&quot;0b1001&quot;).unwrap(), 9);assert_eq!(BigInt::try_from(&quot;0o11&quot;).unwrap(), 9);assert_eq!(BigInt::try_from(&quot;0x9&quot;).unwrap(), 9);assert_eq!(BigInt::from_str_radix(&quot;1001&quot;, 2).unwrap(), 9);assert_eq!(BigInt::from_str_radix(&quot;11&quot;, 8).unwrap(), 9);assert_eq!(BigInt::from_str_radix(&quot;9&quot;, 16).unwrap(), 9);assert_eq!(BigInt::try_from(9.99).unwrap(), 9);/// - compareassert!(BigInt::from(9) == BigInt::from(9));assert!(BigInt::from(9) &gt;= BigInt::from(9));assert!(BigInt::from(9) &gt; BigInt::from(8));assert!(BigInt::from(9) &lt;= BigInt::from(9));assert!(BigInt::from(9) &lt; BigInt::from(10));/// - calculateassert_eq!(BigInt::from(-9).abs(), 9);assert_eq!(BigInt::from(4) + BigInt::from(5), 9);assert_eq!(BigInt::from(9) &amp; BigInt::from(11), 9);assert_eq!(BigInt::from(1) | BigInt::from(8), 9);assert_eq!(BigInt::from(2) ^ BigInt::from(11), 9);assert_eq!(BigInt::from(19) / BigInt::from(2), 9);assert_eq!(BigInt::from(19).div_euclid(BigInt::from(2)), 9);assert_eq!(BigInt::from(3) * BigInt::from(3), 9);assert_eq!(-BigInt::from(-9), 9);assert_eq!(!BigInt::from(-10), 9);assert_eq!(BigInt::from(3).pow(BigInt::from(2)), 9);assert_eq!(BigInt::from(19) % BigInt::from(10), 9);assert_eq!(BigInt::from(19).rem_euclid(BigInt::from(10)), 9);assert_eq!(BigInt::from(5) &lt;&lt; 1, 10);assert_eq!(BigInt::from(5) &gt;&gt; 1, 2);assert_eq!(BigInt::from(25) - BigInt::from(16), 9);```#### Exact fraction```rust/// With setupuse std::convert::TryFrom;use traiter::numbers::{Abs, DivEuclid, One, Pow, RemEuclid, Zero};use rithm::fraction;type Fraction = fraction::Fraction&lt;i8&gt;;/// we can:/// - constructassert_eq!(Fraction::zero(), 0);assert_eq!(Fraction::one(), 1);assert_eq!(Fraction::new(1, 2), Some(Fraction::from(1) / 2));assert_eq!(Fraction::new(50, 100), Fraction::new(1, 2));assert_eq!(Fraction::try_from(0.5).unwrap(), Fraction::new(1, 2).unwrap());/// - compareassert!(Fraction::new(1, 2).unwrap() == Fraction::new(1, 2).unwrap());assert!(Fraction::new(1, 2).unwrap() &gt;= Fraction::new(1, 2).unwrap());assert!(Fraction::new(1, 2).unwrap() &gt; Fraction::new(1, 3).unwrap());assert!(Fraction::new(1, 2).unwrap() &lt;= Fraction::new(1, 2).unwrap());assert!(Fraction::new(1, 2).unwrap() &lt; Fraction::new(2, 3).unwrap());assert!(Fraction::new(1, 2).unwrap() != Fraction::new(1, 3).unwrap());/// - calculateassert_eq!(Fraction::new(-1, 2).unwrap().abs(), Fraction::new(1, 2).unwrap());assert_eq!(Fraction::new(1, 3).unwrap() + Fraction::new(1, 6).unwrap(),           Fraction::new(1, 2).unwrap());assert_eq!(Fraction::new(1, 3).unwrap() / Fraction::new(2, 3).unwrap(),           Fraction::new(1, 2).unwrap());assert_eq!(Fraction::new(3, 2).unwrap().div_euclid(Fraction::from(1)), 1);assert_eq!(Fraction::new(1, 3).unwrap() * Fraction::new(3, 2).unwrap(),           Fraction::new(1, 2).unwrap());assert_eq!(-Fraction::new(-1, 2).unwrap(), Fraction::new(1, 2).unwrap());assert_eq!(Fraction::new(1, 2).unwrap().pow(2), Fraction::new(1, 4).unwrap());assert_eq!(Fraction::new(3, 2).unwrap() % Fraction::from(1),           Fraction::new(1, 2).unwrap());assert_eq!(Fraction::new(3, 2).unwrap().rem_euclid(Fraction::from(1)),           Fraction::new(1, 2).unwrap());assert_eq!(Fraction::new(3, 2).unwrap() - Fraction::from(1),           Fraction::new(1, 2).unwrap());```Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script:- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script:- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>