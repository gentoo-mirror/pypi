<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># streamlit-lightweight-chartsStreamlit wrapper for performant Tradingview's Financial: `lightweight-charts`The Lightweight Charts library is the best choice to display financial data as an interactive chart on a web page without affecting loading speed and performance.- [Features Demo](https://www.tradingview.com/lightweight-charts/)- [Documentation](https://tradingview.github.io/lightweight-charts/)- [GitHub](https://github.com/tradingview/lightweight-charts)- [Pypi](https://pypi.org/project/streamlit-lightweight-charts/)### Versions- Version 0.7.19 - FIX: React build was not been commited- Version 0.7.20 - Example loading from CSV## How to install:```python -m pip install streamlit-lightweight-charts```## How to use:```from streamlit_lightweight_charts import renderLightweightChartsrenderLightweightCharts(charts: &lt;List of Dicts&gt; , key: &lt;str&gt;)```### API- charts: `&lt;List of Dicts&gt;`    - [chart](https://tradingview.github.io/lightweight-charts/docs/api/interfaces/ChartOptions): `&lt;Dict&gt;`    - [series](https://tradingview.github.io/lightweight-charts/docs/series-types): `&lt;List of Dicts&gt;`        - [type](https://tradingview.github.io/lightweight-charts/docs/series-types): `&lt;str-enum&gt;`            [ Area, Bar, Baseline, Candlestick, Histogram, Line ]        - data: `&lt;List of Dicts&gt;` accordingly to series type        - options: `&lt;Dict&gt;` with style options        - priceScale: `&lt;Dict&gt;` optional        - markers: `&lt;List of Dicts&gt;` optional- key: `&lt;str&gt;` when creating multiple charts in one page&lt;br/&gt;# e.g.:&lt;br /&gt;# Overlaid Charts[![Price with Volume Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/PriceVolumeChart.png?raw=true)](https://freyastreamlit-streamlit-lightw-examplespricevolumechart-j8ldyo.streamlit.app/)### [Click for a working sample on Streamlit Cloud ⬆](https://freyastreamlit-streamlit-lightw-examplespricevolumechart-j8ldyo.streamlit.app/)&lt;br /&gt;```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartsimport streamlit_lightweight_charts.dataSamples as datapriceVolumeChartOptions = {    &quot;height&quot;: 400,    &quot;rightPriceScale&quot;: {        &quot;scaleMargins&quot;: {            &quot;top&quot;: 0.2,            &quot;bottom&quot;: 0.25,        },        &quot;borderVisible&quot;: False,    },    &quot;overlayPriceScales&quot;: {        &quot;scaleMargins&quot;: {            &quot;top&quot;: 0.7,            &quot;bottom&quot;: 0,        }    },    &quot;layout&quot;: {        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: '#131722'        },        &quot;textColor&quot;: '#d1d4dc',    },    &quot;grid&quot;: {        &quot;vertLines&quot;: {            &quot;color&quot;: 'rgba(42, 46, 57, 0)',        },        &quot;horzLines&quot;: {            &quot;color&quot;: 'rgba(42, 46, 57, 0.6)',        }    }}priceVolumeSeries = [    {        &quot;type&quot;: 'Area',        &quot;data&quot;: data.priceVolumeSeriesArea,        &quot;options&quot;: {            &quot;topColor&quot;: 'rgba(38,198,218, 0.56)',            &quot;bottomColor&quot;: 'rgba(38,198,218, 0.04)',            &quot;lineColor&quot;: 'rgba(38,198,218, 1)',            &quot;lineWidth&quot;: 2,        }    },    {        &quot;type&quot;: 'Histogram',        &quot;data&quot;: data.priceVolumeSeriesHistogram,        &quot;options&quot;: {            &quot;color&quot;: '#26a69a',            &quot;priceFormat&quot;: {                &quot;type&quot;: 'volume',            },            &quot;priceScaleId&quot;: &quot;&quot; # set as an overlay setting,        },        &quot;priceScale&quot;: {            &quot;scaleMargins&quot;: {                &quot;top&quot;: 0.7,                &quot;bottom&quot;: 0,            }        }    }]st.subheader(&quot;Price and Volume Series Chart&quot;)renderLightweightCharts([    {        &quot;chart&quot;: priceVolumeChartOptions,        &quot;series&quot;: priceVolumeSeries    }], 'priceAndVolume')```---&lt;br /&gt;[![Overlaid Areas Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/OverlaidAreasChart.png?raw=true)](https://freyastreamlit-streamlit-ligh-examplesoverlaidareaschart-3pg5tr.streamlit.app/)### [Click for a working sample on Streamlit Cloud ⬆](https://freyastreamlit-streamlit-ligh-examplesoverlaidareaschart-3pg5tr.streamlit.app/)&lt;br /&gt;```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartsimport streamlit_lightweight_charts.dataSamples as dataoverlaidAreaSeriesOptions = {    &quot;height&quot;: 400,    &quot;rightPriceScale&quot;: {        &quot;scaleMargins&quot;: {            &quot;top&quot;: 0.1,            &quot;bottom&quot;: 0.1,        },        &quot;mode&quot;: 2, # PriceScaleMode: 0-Normal, 1-Logarithmic, 2-Percentage, 3-IndexedTo100        &quot;borderColor&quot;: 'rgba(197, 203, 206, 0.4)',    },    &quot;timeScale&quot;: {        &quot;borderColor&quot;: 'rgba(197, 203, 206, 0.4)',    },    &quot;layout&quot;: {        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: '#100841'        },        &quot;textColor&quot;: '#ffffff',    },    &quot;grid&quot;: {        &quot;vertLines&quot;: {            &quot;color&quot;: 'rgba(197, 203, 206, 0.4)',            &quot;style&quot;: 1, # LineStyle: 0-Solid, 1-Dotted, 2-Dashed, 3-LargeDashed        },        &quot;horzLines&quot;: {            &quot;color&quot;: 'rgba(197, 203, 206, 0.4)',            &quot;style&quot;: 1, # LineStyle: 0-Solid, 1-Dotted, 2-Dashed, 3-LargeDashed        }    }}seriesOverlaidChart = [    {        &quot;type&quot;: 'Area',        &quot;data&quot;: data.seriesMultipleChartArea01,        &quot;options&quot;: {            &quot;topColor&quot;: 'rgba(255, 192, 0, 0.7)',            &quot;bottomColor&quot;: 'rgba(255, 192, 0, 0.3)',            &quot;lineColor&quot;: 'rgba(255, 192, 0, 1)',            &quot;lineWidth&quot;: 2,        },        &quot;markers&quot;: [            {                &quot;time&quot;: '2019-04-08',                &quot;position&quot;: 'aboveBar',                &quot;color&quot;: 'rgba(255, 192, 0, 1)',                &quot;shape&quot;: 'arrowDown',                &quot;text&quot;: 'H',                &quot;size&quot;: 3            },            {                &quot;time&quot;: '2019-05-13',                &quot;position&quot;: 'belowBar',                &quot;color&quot;: 'rgba(255, 192, 0, 1)',                &quot;shape&quot;: 'arrowUp',                &quot;text&quot;: 'L',                &quot;size&quot;: 3            },        ]    },    {        &quot;type&quot;: 'Area',        &quot;data&quot;: data.seriesMultipleChartArea02,        &quot;options&quot;: {            &quot;topColor&quot;: 'rgba(67, 83, 254, 0.7)',            &quot;bottomColor&quot;: 'rgba(67, 83, 254, 0.3)',            &quot;lineColor&quot;: 'rgba(67, 83, 254, 1)',            &quot;lineWidth&quot;: 2,        },        &quot;markers&quot;: [            {                &quot;time&quot;: '2019-05-03',                &quot;position&quot;: 'aboveBar',                &quot;color&quot;: 'rgba(67, 83, 254, 1)',                &quot;shape&quot;: 'arrowDown',                &quot;text&quot;: 'PEAK',                &quot;size&quot;: 3            },        ]    }]st.subheader(&quot;Overlaid Series with Markers&quot;)renderLightweightCharts([    {        &quot;chart&quot;: overlaidAreaSeriesOptions,        &quot;series&quot;: seriesOverlaidChart    }], 'overlaid')```---# Streamlit integration[![Data Toggling for an Area Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/DataToggling.png?raw=true)](https://freyastreamlit-streamlit-lightweigh-examplesdatatoggling-cbni35.streamlit.app/)### [Click for a working sample on Streamlit Cloud ⬆](https://freyastreamlit-streamlit-lightweigh-examplesdatatoggling-cbni35.streamlit.app/)&lt;br /&gt;```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartsimport streamlit_lightweight_charts.dataSamples as datachartOptions = {    &quot;layout&quot;: {        &quot;textColor&quot;: 'black',        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: 'white'        }    }}st.subheader(&quot;Data Toggling for an Area Chart&quot;)data_select = st.sidebar.radio('Select data source:', ('Area 01', 'Area 02'))if data_select == 'Area 01':    renderLightweightCharts( [        {            &quot;chart&quot;: chartOptions,            &quot;series&quot;: [{                &quot;type&quot;: 'Area',                &quot;data&quot;: data.seriesMultipleChartArea01,                &quot;options&quot;: {}            }],        }    ], 'area')else:    renderLightweightCharts( [        {            &quot;chart&quot;: chartOptions,            &quot;series&quot;: [{                &quot;type&quot;: 'Area',                &quot;data&quot;: data.seriesMultipleChartArea02,                &quot;options&quot;: {}            }],        }    ], 'area')```---&lt;br /&gt;![Multi Pane Chart with Pandas](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/MultiPaneChartsWithPandas.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartsimport jsonimport numpy as npimport yfinance as yfimport pandas as pdimport pandas_ta as taCOLOR_BULL = 'rgba(38,166,154,0.9)' # #26a69aCOLOR_BEAR = 'rgba(239,83,80,0.9)'  # #ef5350# Request historic pricing data via finance.yahoo.com APIdf = yf.Ticker('AAPL').history(period='4mo')[['Open', 'High', 'Low', 'Close', 'Volume']]# Some data wrangling to match required formatdf = df.reset_index()df.columns = ['time','open','high','low','close','volume']                  # rename columnsdf['time'] = df['time'].dt.strftime('%Y-%m-%d')                             # Date to stringdf['color'] = np.where(  df['open'] &gt; df['close'], COLOR_BEAR, COLOR_BULL)  # bull or beardf.ta.macd(close='close', fast=6, slow=12, signal=5, append=True)           # calculate macd# export to JSON formatcandles = json.loads(df.to_json(orient = &quot;records&quot;))volume = json.loads(df.rename(columns={&quot;volume&quot;: &quot;value&quot;,}).to_json(orient = &quot;records&quot;))macd_fast = json.loads(df.rename(columns={&quot;MACDh_6_12_5&quot;: &quot;value&quot;}).to_json(orient = &quot;records&quot;))macd_slow = json.loads(df.rename(columns={&quot;MACDs_6_12_5&quot;: &quot;value&quot;}).to_json(orient = &quot;records&quot;))df['color'] = np.where(  df['MACD_6_12_5'] &gt; 0, COLOR_BULL, COLOR_BEAR)  # MACD histogram colormacd_hist = json.loads(df.rename(columns={&quot;MACD_6_12_5&quot;: &quot;value&quot;}).to_json(orient = &quot;records&quot;))chartMultipaneOptions = [    {        &quot;width&quot;: 600,        &quot;height&quot;: 400,        &quot;layout&quot;: {            &quot;background&quot;: {                &quot;type&quot;: &quot;solid&quot;,                &quot;color&quot;: 'white'            },            &quot;textColor&quot;: &quot;black&quot;        },        &quot;grid&quot;: {            &quot;vertLines&quot;: {                &quot;color&quot;: &quot;rgba(197, 203, 206, 0.5)&quot;                },            &quot;horzLines&quot;: {                &quot;color&quot;: &quot;rgba(197, 203, 206, 0.5)&quot;            }        },        &quot;crosshair&quot;: {            &quot;mode&quot;: 0        },        &quot;priceScale&quot;: {            &quot;borderColor&quot;: &quot;rgba(197, 203, 206, 0.8)&quot;        },        &quot;timeScale&quot;: {            &quot;borderColor&quot;: &quot;rgba(197, 203, 206, 0.8)&quot;,            &quot;barSpacing&quot;: 15        },        &quot;watermark&quot;: {            &quot;visible&quot;: True,            &quot;fontSize&quot;: 48,            &quot;horzAlign&quot;: 'center',            &quot;vertAlign&quot;: 'center',            &quot;color&quot;: 'rgba(171, 71, 188, 0.3)',            &quot;text&quot;: 'AAPL - D1',        }    },    {        &quot;width&quot;: 600,        &quot;height&quot;: 100,        &quot;layout&quot;: {            &quot;background&quot;: {                &quot;type&quot;: 'solid',                &quot;color&quot;: 'transparent'            },            &quot;textColor&quot;: 'black',        },        &quot;grid&quot;: {            &quot;vertLines&quot;: {                &quot;color&quot;: 'rgba(42, 46, 57, 0)',            },            &quot;horzLines&quot;: {                &quot;color&quot;: 'rgba(42, 46, 57, 0.6)',            }        },        &quot;timeScale&quot;: {            &quot;visible&quot;: False,        },        &quot;watermark&quot;: {            &quot;visible&quot;: True,            &quot;fontSize&quot;: 18,            &quot;horzAlign&quot;: 'left',            &quot;vertAlign&quot;: 'top',            &quot;color&quot;: 'rgba(171, 71, 188, 0.7)',            &quot;text&quot;: 'Volume',        }    },    {        &quot;width&quot;: 600,        &quot;height&quot;: 200,        &quot;layout&quot;: {            &quot;background&quot;: {                &quot;type&quot;: &quot;solid&quot;,                &quot;color&quot;: 'white'            },            &quot;textColor&quot;: &quot;black&quot;        },        &quot;timeScale&quot;: {            &quot;visible&quot;: False,        },        &quot;watermark&quot;: {            &quot;visible&quot;: True,            &quot;fontSize&quot;: 18,            &quot;horzAlign&quot;: 'left',            &quot;vertAlign&quot;: 'center',            &quot;color&quot;: 'rgba(171, 71, 188, 0.7)',            &quot;text&quot;: 'MACD',        }    }]seriesCandlestickChart = [    {        &quot;type&quot;: 'Candlestick',        &quot;data&quot;: candles,        &quot;options&quot;: {            &quot;upColor&quot;: COLOR_BULL,            &quot;downColor&quot;: COLOR_BEAR,            &quot;borderVisible&quot;: False,            &quot;wickUpColor&quot;: COLOR_BULL,            &quot;wickDownColor&quot;: COLOR_BEAR        }    }]seriesVolumeChart = [    {        &quot;type&quot;: 'Histogram',        &quot;data&quot;: volume,        &quot;options&quot;: {            &quot;priceFormat&quot;: {                &quot;type&quot;: 'volume',            },            &quot;priceScaleId&quot;: &quot;&quot; # set as an overlay setting,        },        &quot;priceScale&quot;: {            &quot;scaleMargins&quot;: {                &quot;top&quot;: 0,                &quot;bottom&quot;: 0,            },            &quot;alignLabels&quot;: False        }    }]seriesMACDchart = [    {        &quot;type&quot;: 'Line',        &quot;data&quot;: macd_fast,        &quot;options&quot;: {            &quot;color&quot;: 'blue',            &quot;lineWidth&quot;: 2        }    },    {        &quot;type&quot;: 'Line',        &quot;data&quot;: macd_slow,        &quot;options&quot;: {            &quot;color&quot;: 'green',            &quot;lineWidth&quot;: 2        }    },    {        &quot;type&quot;: 'Histogram',        &quot;data&quot;: macd_hist,        &quot;options&quot;: {            &quot;color&quot;: 'red',            &quot;lineWidth&quot;: 1        }    }]st.subheader(&quot;Multipane Chart with Pandas&quot;)renderLightweightCharts([    {        &quot;chart&quot;: chartMultipaneOptions[0],        &quot;series&quot;: seriesCandlestickChart    },    {        &quot;chart&quot;: chartMultipaneOptions[1],        &quot;series&quot;: seriesVolumeChart    },    {        &quot;chart&quot;: chartMultipaneOptions[2],        &quot;series&quot;: seriesMACDchart    }], 'multipane')```---&lt;br /&gt;![Multi Pane Chart (intraday) from CSV)](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/MultiPaneChartsFromCSV.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartsimport jsonimport numpy as npimport pandas as pdCOLOR_BULL = 'rgba(38,166,154,0.9)' # #26a69aCOLOR_BEAR = 'rgba(239,83,80,0.9)'  # #ef5350CSVFILE = 'https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/MultiPaneChartsFromCSV.csv?raw=true'df = pd.read_csv(CSVFILE, skiprows=0, parse_dates=['datetime'], skip_blank_lines=True)df['time'] = df['datetime'].view('int64') // 10**9  # We will use time in UNIX timestampdf['color'] = np.where(  df['open'] &gt; df['close'], COLOR_BEAR, COLOR_BULL)  # bull or bear# export to JSON formatcandles = json.loads(    df.filter(['time','open','high','low','close'], axis=1)      .to_json(orient = &quot;records&quot;) )volume = json.loads(    df.filter(['time','volume'], axis=1)      .rename(columns={&quot;volume&quot;: &quot;value&quot;,})      .to_json(orient = &quot;records&quot;) )macd_fast = json.loads(    df.filter(['time','macd_fast'], axis=1)      .rename(columns={&quot;macd_fast&quot;: &quot;value&quot;})      .to_json(orient = &quot;records&quot;))macd_slow = json.loads(    df.filter(['time','macd_slow'], axis=1)      .rename(columns={&quot;macd_slow&quot;: &quot;value&quot;})      .to_json(orient = &quot;records&quot;))df['color'] = np.where(  df['macd_hist'] &gt; 0, COLOR_BULL, COLOR_BEAR)  # MACD histogram colormacd_hist = json.loads(    df.filter(['time','macd_hist'], axis=1)      .rename(columns={&quot;macd_hist&quot;: &quot;value&quot;})      .to_json(orient = &quot;records&quot;))chartMultipaneOptions = [    {        &quot;width&quot;: 600,        &quot;height&quot;: 400,        &quot;layout&quot;: {            &quot;background&quot;: {                &quot;type&quot;: &quot;solid&quot;,                &quot;color&quot;: 'white'            },            &quot;textColor&quot;: &quot;black&quot;        },        &quot;grid&quot;: {            &quot;vertLines&quot;: {                &quot;color&quot;: &quot;rgba(197, 203, 206, 0.5)&quot;                },            &quot;horzLines&quot;: {                &quot;color&quot;: &quot;rgba(197, 203, 206, 0.5)&quot;            }        },        &quot;crosshair&quot;: {            &quot;mode&quot;: 0        },        &quot;priceScale&quot;: {            &quot;borderColor&quot;: &quot;rgba(197, 203, 206, 0.8)&quot;        },        &quot;timeScale&quot;: {            &quot;borderColor&quot;: &quot;rgba(197, 203, 206, 0.8)&quot;,            &quot;barSpacing&quot;: 10,            &quot;minBarSpacing&quot;: 8,            &quot;timeVisible&quot;: True,            &quot;secondsVisible&quot;: False,        },        &quot;watermark&quot;: {            &quot;visible&quot;: True,            &quot;fontSize&quot;: 48,            &quot;horzAlign&quot;: 'center',            &quot;vertAlign&quot;: 'center',            &quot;color&quot;: 'rgba(171, 71, 188, 0.3)',            &quot;text&quot;: 'Intraday',        }    },    {        &quot;width&quot;: 600,        &quot;height&quot;: 100,        &quot;layout&quot;: {            &quot;background&quot;: {                &quot;type&quot;: 'solid',                &quot;color&quot;: 'transparent'            },            &quot;textColor&quot;: 'black',        },        &quot;grid&quot;: {            &quot;vertLines&quot;: {                &quot;color&quot;: 'rgba(42, 46, 57, 0)',            },            &quot;horzLines&quot;: {                &quot;color&quot;: 'rgba(42, 46, 57, 0.6)',            }        },        &quot;timeScale&quot;: {            &quot;visible&quot;: False,        },        &quot;watermark&quot;: {            &quot;visible&quot;: True,            &quot;fontSize&quot;: 18,            &quot;horzAlign&quot;: 'left',            &quot;vertAlign&quot;: 'top',            &quot;color&quot;: 'rgba(171, 71, 188, 0.7)',            &quot;text&quot;: 'Volume',        }    },    {        &quot;width&quot;: 600,        &quot;height&quot;: 200,        &quot;layout&quot;: {            &quot;background&quot;: {                &quot;type&quot;: &quot;solid&quot;,                &quot;color&quot;: 'white'            },            &quot;textColor&quot;: &quot;black&quot;        },        &quot;timeScale&quot;: {            &quot;visible&quot;: False,        },        &quot;watermark&quot;: {            &quot;visible&quot;: True,            &quot;fontSize&quot;: 18,            &quot;horzAlign&quot;: 'left',            &quot;vertAlign&quot;: 'center',            &quot;color&quot;: 'rgba(171, 71, 188, 0.7)',            &quot;text&quot;: 'MACD',        }    }]seriesCandlestickChart = [    {        &quot;type&quot;: 'Candlestick',        &quot;data&quot;: candles,        &quot;options&quot;: {            &quot;upColor&quot;: COLOR_BULL,            &quot;downColor&quot;: COLOR_BEAR,            &quot;borderVisible&quot;: False,            &quot;wickUpColor&quot;: COLOR_BULL,            &quot;wickDownColor&quot;: COLOR_BEAR        }    }]seriesVolumeChart = [    {        &quot;type&quot;: 'Histogram',        &quot;data&quot;: volume,        &quot;options&quot;: {            &quot;priceFormat&quot;: {                &quot;type&quot;: 'volume',            },            &quot;priceScaleId&quot;: &quot;&quot; # set as an overlay setting,        },        &quot;priceScale&quot;: {            &quot;scaleMargins&quot;: {                &quot;top&quot;: 0,                &quot;bottom&quot;: 0,            },            &quot;alignLabels&quot;: False        }    }]seriesMACDchart = [    {        &quot;type&quot;: 'Line',        &quot;data&quot;: macd_fast,        &quot;options&quot;: {            &quot;color&quot;: 'blue',            &quot;lineWidth&quot;: 2        }    },    {        &quot;type&quot;: 'Line',        &quot;data&quot;: macd_slow,        &quot;options&quot;: {            &quot;color&quot;: 'green',            &quot;lineWidth&quot;: 2        }    },    {        &quot;type&quot;: 'Histogram',        &quot;data&quot;: macd_hist,        &quot;options&quot;: {            # &quot;color&quot;: 'red',            &quot;lineWidth&quot;: 1        }    }]st.subheader(&quot;Multipane Chart (intraday) from CSV&quot;)renderLightweightCharts([    {        &quot;chart&quot;: chartMultipaneOptions[0],        &quot;series&quot;: seriesCandlestickChart    },    {        &quot;chart&quot;: chartMultipaneOptions[1],        &quot;series&quot;: seriesVolumeChart    },    {        &quot;chart&quot;: chartMultipaneOptions[2],        &quot;series&quot;: seriesMACDchart    }], 'multipane')```---&lt;br /&gt;# Basic charts![Line Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/LineChart.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartschartOptions = {    &quot;layout&quot;: {        &quot;textColor&quot;: 'black',        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: 'white'        }    }}seriesLineChart = [{    &quot;type&quot;: 'Line',    &quot;data&quot;: [        { &quot;time&quot;: '2018-12-22', &quot;value&quot;: 32.51 },        { &quot;time&quot;: '2018-12-23', &quot;value&quot;: 31.11 },        { &quot;time&quot;: '2018-12-24', &quot;value&quot;: 27.02 },        { &quot;time&quot;: '2018-12-25', &quot;value&quot;: 27.32 },        { &quot;time&quot;: '2018-12-26', &quot;value&quot;: 25.17 },        { &quot;time&quot;: '2018-12-27', &quot;value&quot;: 28.89 },        { &quot;time&quot;: '2018-12-28', &quot;value&quot;: 25.46 },        { &quot;time&quot;: '2018-12-29', &quot;value&quot;: 23.92 },        { &quot;time&quot;: '2018-12-30', &quot;value&quot;: 22.68 },        { &quot;time&quot;: '2018-12-31', &quot;value&quot;: 22.67 },    ],    &quot;options&quot;: {}}]st.subheader(&quot;Line Chart with Watermark&quot;)renderLightweightCharts([    {        &quot;chart&quot;: chartOptions,        &quot;series&quot;: seriesLineChart    }], 'line')```---&lt;br /&gt;![Area Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/AreaChart.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartschartOptions = {    &quot;layout&quot;: {        &quot;textColor&quot;: 'black',        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: 'white'        }    }}seriesAreaChart = [{    &quot;type&quot;: 'Area',    &quot;data&quot;: [        { &quot;time&quot;: '2018-12-22', &quot;value&quot;: 32.51 },        { &quot;time&quot;: '2018-12-23', &quot;value&quot;: 31.11 },        { &quot;time&quot;: '2018-12-24', &quot;value&quot;: 27.02 },        { &quot;time&quot;: '2018-12-25', &quot;value&quot;: 27.32 },        { &quot;time&quot;: '2018-12-26', &quot;value&quot;: 25.17 },        { &quot;time&quot;: '2018-12-27', &quot;value&quot;: 28.89 },        { &quot;time&quot;: '2018-12-28', &quot;value&quot;: 25.46 },        { &quot;time&quot;: '2018-12-29', &quot;value&quot;: 23.92 },        { &quot;time&quot;: '2018-12-30', &quot;value&quot;: 22.68 },        { &quot;time&quot;: '2018-12-31', &quot;value&quot;: 22.67 },    ],    &quot;options&quot;: {}}]st.subheader(&quot;Area Chart with Watermark&quot;)renderLightweightCharts( [    {        &quot;chart&quot;: chartOptions,        &quot;series&quot;: seriesAreaChart,    }], 'area')```---&lt;br /&gt;![Histogram Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/HistogramChart.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartschartOptions = {    &quot;layout&quot;: {        &quot;textColor&quot;: 'black',        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: 'white'        }    }}seriesHistogramChart = [{    &quot;type&quot;: 'Histogram',    &quot;data&quot;: [        { &quot;value&quot;: 1, &quot;time&quot;: 1642425322 },        { &quot;value&quot;: 8, &quot;time&quot;: 1642511722 },        { &quot;value&quot;: 10, &quot;time&quot;: 1642598122 },        { &quot;value&quot;: 20, &quot;time&quot;: 1642684522 },        { &quot;value&quot;: 3, &quot;time&quot;: 1642770922, &quot;color&quot;: 'red' },        { &quot;value&quot;: 43, &quot;time&quot;: 1642857322 },        { &quot;value&quot;: 41, &quot;time&quot;: 1642943722, &quot;color&quot;: 'red' },        { &quot;value&quot;: 43, &quot;time&quot;: 1643030122 },        { &quot;value&quot;: 56, &quot;time&quot;: 1643116522 },        { &quot;value&quot;: 46, &quot;time&quot;: 1643202922, &quot;color&quot;: 'red' }    ],    &quot;options&quot;: { &quot;color&quot;: '#26a69a' }}]st.subheader(&quot;Histogram Chart with Watermark&quot;)renderLightweightCharts([    {        &quot;chart&quot;: chartOptions,        &quot;series&quot;: seriesHistogramChart    }], 'histogram')```---&lt;br /&gt;![Bar Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/BarChart.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartschartOptions = {    &quot;layout&quot;: {        &quot;textColor&quot;: 'black',        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: 'white'        }    }}seriesBarChart = [{    &quot;type&quot;: 'Bar',    &quot;data&quot;: [        { &quot;open&quot;: 10, &quot;high&quot;: 10.63, &quot;low&quot;: 9.49, &quot;close&quot;: 9.55, &quot;time&quot;: 1642427876 },        { &quot;open&quot;: 9.55, &quot;high&quot;: 10.30, &quot;low&quot;: 9.42, &quot;close&quot;: 9.94, &quot;time&quot;: 1642514276 },        { &quot;open&quot;: 9.94, &quot;high&quot;: 10.17, &quot;low&quot;: 9.92, &quot;close&quot;: 9.78, &quot;time&quot;: 1642600676 },        { &quot;open&quot;: 9.78, &quot;high&quot;: 10.59, &quot;low&quot;: 9.18, &quot;close&quot;: 9.51, &quot;time&quot;: 1642687076 },        { &quot;open&quot;: 9.51, &quot;high&quot;: 10.46, &quot;low&quot;: 9.10, &quot;close&quot;: 10.17, &quot;time&quot;: 1642773476 },        { &quot;open&quot;: 10.17, &quot;high&quot;: 10.96, &quot;low&quot;: 10.16, &quot;close&quot;: 10.47, &quot;time&quot;: 1642859876 },        { &quot;open&quot;: 10.47, &quot;high&quot;: 11.39, &quot;low&quot;: 10.40, &quot;close&quot;: 10.81, &quot;time&quot;: 1642946276 },        { &quot;open&quot;: 10.81, &quot;high&quot;: 11.60, &quot;low&quot;: 10.30, &quot;close&quot;: 10.75, &quot;time&quot;: 1643032676 },        { &quot;open&quot;: 10.75, &quot;high&quot;: 11.60, &quot;low&quot;: 10.49, &quot;close&quot;: 10.93, &quot;time&quot;: 1643119076 },        { &quot;open&quot;: 10.93, &quot;high&quot;: 11.53, &quot;low&quot;: 10.76, &quot;close&quot;: 10.96, &quot;time&quot;: 1643205476 }    ],    &quot;options&quot;: {        &quot;upColor&quot;: '#26a69a',        &quot;downColor&quot;: '#ef5350'    }}]st.subheader(&quot;Bar Chart with Watermark&quot;)renderLightweightCharts([    {        &quot;chart&quot;: chartOptions,        &quot;series&quot;: seriesBarChart    }], 'bar')```---&lt;br /&gt;![Candlestick Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/CandlestickChart.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartschartOptions = {    &quot;layout&quot;: {        &quot;textColor&quot;: 'black',        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: 'white'        }    }}seriesCandlestickChart = [{    &quot;type&quot;: 'Candlestick',    &quot;data&quot;: [        { &quot;open&quot;: 10, &quot;high&quot;: 10.63, &quot;low&quot;: 9.49, &quot;close&quot;: 9.55, &quot;time&quot;: 1642427876 },        { &quot;open&quot;: 9.55, &quot;high&quot;: 10.30, &quot;low&quot;: 9.42, &quot;close&quot;: 9.94, &quot;time&quot;: 1642514276 },        { &quot;open&quot;: 9.94, &quot;high&quot;: 10.17, &quot;low&quot;: 9.92, &quot;close&quot;: 9.78, &quot;time&quot;: 1642600676 },        { &quot;open&quot;: 9.78, &quot;high&quot;: 10.59, &quot;low&quot;: 9.18, &quot;close&quot;: 9.51, &quot;time&quot;: 1642687076 },        { &quot;open&quot;: 9.51, &quot;high&quot;: 10.46, &quot;low&quot;: 9.10, &quot;close&quot;: 10.17, &quot;time&quot;: 1642773476 },        { &quot;open&quot;: 10.17, &quot;high&quot;: 10.96, &quot;low&quot;: 10.16, &quot;close&quot;: 10.47, &quot;time&quot;: 1642859876 },        { &quot;open&quot;: 10.47, &quot;high&quot;: 11.39, &quot;low&quot;: 10.40, &quot;close&quot;: 10.81, &quot;time&quot;: 1642946276 },        { &quot;open&quot;: 10.81, &quot;high&quot;: 11.60, &quot;low&quot;: 10.30, &quot;close&quot;: 10.75, &quot;time&quot;: 1643032676 },        { &quot;open&quot;: 10.75, &quot;high&quot;: 11.60, &quot;low&quot;: 10.49, &quot;close&quot;: 10.93, &quot;time&quot;: 1643119076 },        { &quot;open&quot;: 10.93, &quot;high&quot;: 11.53, &quot;low&quot;: 10.76, &quot;close&quot;: 10.96, &quot;time&quot;: 1643205476 }    ],    &quot;options&quot;: {        &quot;upColor&quot;: '#26a69a',        &quot;downColor&quot;: '#ef5350',        &quot;borderVisible&quot;: False,        &quot;wickUpColor&quot;: '#26a69a',        &quot;wickDownColor&quot;: '#ef5350'    }}]st.subheader(&quot;Candlestick Chart with Watermark&quot;)renderLightweightCharts([    {        &quot;chart&quot;: chartOptions,        &quot;series&quot;: seriesCandlestickChart    }], 'candlestick')```---&lt;br /&gt;![Baseline Chart](https://github.com/freyastreamlit/streamlit-lightweight-charts/blob/main/examples/BaselineChart.png?raw=true)```pythonimport streamlit as stfrom streamlit_lightweight_charts import renderLightweightChartschartOptions = {    &quot;layout&quot;: {        &quot;textColor&quot;: 'black',        &quot;background&quot;: {            &quot;type&quot;: 'solid',            &quot;color&quot;: 'white'        }    }}seriesBaselineChart = [{    &quot;type&quot;: 'Baseline',    &quot;data&quot;: [        { &quot;value&quot;: 1, &quot;time&quot;: 1642425322 },        { &quot;value&quot;: 8, &quot;time&quot;: 1642511722 },        { &quot;value&quot;: 10, &quot;time&quot;: 1642598122 },        { &quot;value&quot;: 20, &quot;time&quot;: 1642684522 },        { &quot;value&quot;: 3, &quot;time&quot;: 1642770922 },        { &quot;value&quot;: 43, &quot;time&quot;: 1642857322 },        { &quot;value&quot;: 41, &quot;time&quot;: 1642943722 },        { &quot;value&quot;: 43, &quot;time&quot;: 1643030122 },        { &quot;value&quot;: 56, &quot;time&quot;: 1643116522 },        { &quot;value&quot;: 46, &quot;time&quot;: 1643202922 }    ],    &quot;options&quot;: {        &quot;baseValue&quot;: { &quot;type&quot;: &quot;price&quot;, &quot;price&quot;: 25 },        &quot;topLineColor&quot;: 'rgba( 38, 166, 154, 1)',        &quot;topFillColor1&quot;: 'rgba( 38, 166, 154, 0.28)',        &quot;topFillColor2&quot;: 'rgba( 38, 166, 154, 0.05)',        &quot;bottomLineColor&quot;: 'rgba( 239, 83, 80, 1)',        &quot;bottomFillColor1&quot;: 'rgba( 239, 83, 80, 0.05)',        &quot;bottomFillColor2&quot;: 'rgba( 239, 83, 80, 0.28)'    }}]st.subheader(&quot;Baseline Chart with Watermark&quot;)renderLightweightCharts([    {        &quot;chart&quot;: chartOptions,        &quot;series&quot;: seriesBaselineChart    }], 'baseline')```</longdescription>
</pkgmetadata>