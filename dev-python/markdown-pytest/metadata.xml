<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>markdown-pytest===============The `markdown-pytest` plugin is a `pytest` plugin that allows you to run testsdirectly from Markdown files.With this plugin, you can write your tests inside Markdown files, making iteasy to read, understand and maintain your documentation samples.The tests are executed just like any other Pytest tests.Sample of markdown file content:````markdown&lt;!-- name: test_assert_true --&gt;```pythonassert True```````&lt;details&gt;&lt;summary&gt;Will be shown as&lt;/summary&gt;&lt;!-- name: test_assert_true --&gt;```pythonassert True```&lt;/details&gt;Restrictions------------Since there is no way to add attributes to a block of code in markdown, this module only runs those tests that are marked with a special comment.The general format of this comment is as follows: parts separated by semicolonsare a colon separated key-value pairs, the last semicolon is optional,and parts not containing a colon bill be ignored.Example:```markdown&lt;!-- key1: value1; key2: value2 --&gt;```Multiline example:```markdown&lt;!--     key1: value1;     key2: value2;--&gt;```This comment should be placed right before the block of code, exactly upper the backticks, for example: ````&lt;!-- name: test_name --&gt;```python```````The `name` key is required, and blocks that do not contain it will be ignored.Some Markdown parsers support two or three dashes around comments, this module supports both variants. The `case` parameter is optional and might be used forsubtests, see &quot;Code split&quot; section.Common parsing rules--------------------This module uses its own, very simple Markdown parser, which only supports code block parsing. In general, the parsing behavior of a file follows the following rules:* Code without `&lt;!-- name: test_name --&gt;` comment will not be executed.* Allowed two or three dashes in the comment symbols  For example following line will be parsed identically:  ````markdown  &lt;!--  name: test_name --&gt;  &lt;!--- name: test_name ---&gt;  &lt;!--  name: test_name ---&gt;  &lt;!--- name: test_name --&gt;  ````* Code blocks with same names will be merged in one code and executed once* The optional comment parameter `case` will execute the block as a subtest.* Indented code blocks will be shifted left.    For example:  ````markdown      &lt;!-- name: test_name --&gt;      ```python      assert True      ```  ````  Is the same of:  ````markdown  &lt;!-- name: test_name --&gt;  ```python  assert True  ```  ````Code split----------You can split a test into multiple blocks with the same test name:Markdown:````markdownThis block performs import:&lt;!-- name: test_example --&gt;```pythonfrom itertools import chain````chain` usage example:&lt;!-- name: test_example --&gt;```pythonassert list(chain(range(2), range(2))) == [0, 1, 0, 1]```````&lt;details&gt;&lt;summary&gt;Will be shown as&lt;/summary&gt;This block performs import:&lt;!-- name: test_example --&gt;```pythonfrom itertools import chain````chain` usage example:&lt;!-- name: test_example --&gt;```pythonassert list(chain(range(2), range(2))) == [0, 1, 0, 1]```&lt;/details&gt;subtests support----------------Of course, you can break tests into subtests by simply adding `case: case_name` to the markdown comment.````markdown&lt;!-- name: test_counter --&gt;```pythonfrom collections import Counter```&lt;!--     name: test_counter;    case: initialize_counter--&gt;```pythoncounter = Counter()```&lt;!--     name: test_counter;    case: assign_counter_value--&gt;```pythoncounter[&quot;foo&quot;] += 1assert counter[&quot;foo&quot;] == 1```````&lt;details&gt;&lt;summary&gt;Will be shown as&lt;/summary&gt;&lt;!-- name: test_counter --&gt;```pythonfrom collections import Counter```&lt;!--     name: test_counter;    case: initialize_counter--&gt;```pythoncounter = Counter()```&lt;!--     name: test_counter;    case: assign_counter_value--&gt;```pythoncounter[&quot;foo&quot;] += 1assert counter[&quot;foo&quot;] == 1```&lt;/details&gt;Fictional Code Examples-----------------------Code without `&lt;!-- name: test_name --&gt;` comment will not be executed.````markdown```pythonfrom universe import antigravity, WrongPlanettry:    antigravity()except WrongPlanet:    print(&quot;You are on the wrong planet.&quot;)    exit(1)```````&lt;details&gt;&lt;summary&gt;Will be shown as&lt;/summary&gt;```pythonfrom universe import antigravity, WrongPlanettry:    antigravity()except WrongPlanet:    print(&quot;You are on the wrong planet.&quot;)    exit(1)```&lt;/details&gt;Usage example-------------This README.md file might be tested like this:```bash$ pytest -v README.md======================= test session starts =======================plugins: subtests, markdown-pytestcollected 3 itemsREADME.md::test_assert_true PASSED                           [ 33%]README.md::test_example PASSED                               [ 66%]README.md::test_counter SUBPASS                              [100%]README.md::test_counter SUBPASS                              [100%]README.md::test_counter PASSED                               [100%]```</longdescription>
</pkgmetadata>