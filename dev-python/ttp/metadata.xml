<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Downloads](https://pepy.tech/badge/ttp)](https://pepy.tech/project/ttp)[![PyPI versions](https://img.shields.io/pypi/pyversions/ttp.svg)](https://pypi.python.org/pypi/ttp/)[![Documentation status](https://readthedocs.org/projects/ttp/badge/?version=latest)](http://ttp.readthedocs.io/?badge=latest)# Template Text ParserTTP is a Python library for semi-structured text parsing using templates.## Why?To save ones time on transforming raw text into structured data and beyond.## How?Regexes, regexes everywhere... but, dynamically formed out of TTP templates with added capabilities to simplify the  process of getting desired outcome.## What?In essence TTP can help to:  - Prepare, sort and load text data for parsing  - Parse text using regexes dynamically derived out of templates  - Process matches on the fly using broad set of built-in or custom functions  - Combine match results in a structure with arbitrary hierarchy  - Transform results in desired format to ease consumption by humans or machines  - Return results to various destinations for storage or further processingReference [documentation](https://ttp.readthedocs.io) for more information.TTP [Networktocode Slack channel](https://networktocode.slack.com/archives/C018HMJQECB)Collection of [TTP Templates](https://github.com/dmulyalin/ttp_templates)## Example - as simple as it can beSimple interfaces configuration parsing example&lt;details&gt;&lt;summary&gt;Code&lt;/summary&gt;```pythonfrom ttp import ttpimport pprintdata = &quot;&quot;&quot;interface Loopback0 description Router-id-loopback ip address 192.168.0.113/24!interface Vlan778 description CPE_Acces_Vlan ip address 2002::fd37/124 ip vrf CPE1!&quot;&quot;&quot;template = &quot;&quot;&quot;interface {{ interface }} ip address {{ ip }}/{{ mask }} description {{ description }} ip vrf {{ vrf }}&quot;&quot;&quot;parser = ttp(data, template)parser.parse()pprint.pprint(parser.result(), width=100)# prints:# [[[{'description': 'Router-id-loopback',#     'interface': 'Loopback0',#     'ip': '192.168.0.113',#     'mask': '24'},#    {'description': 'CPE_Acces_Vlan',#     'interface': 'Vlan778',#     'ip': '2002::fd37',#     'mask': '124',#     'vrf': 'CPE1'}]]]```&lt;/details&gt;## Example - a bit more complicatedFor this example lets say we want to parse BGP peerings output, but combine state with configuration data, at the end we want to get pretty looking text table printed to screen.&lt;details&gt;&lt;summary&gt;Code&lt;/summary&gt;```pythontemplate=&quot;&quot;&quot;&lt;doc&gt;This template first parses &quot;show bgp vrf CUST-1 vpnv4 unicast summary&quot; commandsoutput, forming results for &quot;bgp_state&quot; dictionary, where peer ip is a key.Following that, &quot;show run | section bgp&quot; output parsed by group &quot;bgp_cfg&quot;. Thatgroup uses nested groups to form results structure, including absolute path&quot;/bgp_peers*&quot; with path formatter to produce a list of peers under &quot;bgp_peers&quot;path.For each peer &quot;hostname&quot; and local bgp &quot;local_asn&quot; added using previous matches.Additionally, group lookup function used to lookup peer state from &quot;bgp_state&quot;group results, adding found data to peer results.Finally, &quot;bgp_peers&quot; section of results passed via &quot;tabulate_outputter&quot; tofrom and print this table to terminal:hostname           local_asn    vrf_name    peer_ip    peer_asn    uptime    state    description    afi    rpl_in           rpl_out-----------------  -----------  ----------  ---------  ----------  --------  -------  -------------  -----  ---------------  ---------------ucs-core-switch-1  65100        CUST-1      192.0.2.1  65101       00:12:33  300      peer-1         ipv4   RPL-1-IMPORT-v4  RPL-1-EXPORT-V4ucs-core-switch-1  65100        CUST-1      192.0.2.2  65102       03:55:01  idle     peer-2         ipv4   RPL-2-IMPORT-V6  RPL-2-EXPORT-V6Run this script with &quot;python filename.py&quot;&lt;/doc&gt;&lt;vars&gt;hostname=&quot;gethostname&quot;chain_1 = [    &quot;set('vrf_name')&quot;,    &quot;lookup('peer_ip', group='bgp_state', update=True)&quot;]&lt;/vars&gt;&lt;group name=&quot;bgp_state.{{ peer }}&quot; input=&quot;bgp_state&quot;&gt;{{ peer }}  4 65101      20      21       43    0    0 {{ uptime }} {{ state }}&lt;/group&gt;&lt;group name=&quot;bgp_cfg&quot; input=&quot;bgp_config&quot;&gt;router bgp {{ asn | record(asn) }}  &lt;group name=&quot;vrfs.{{ vrf_name }}&quot; record=&quot;vrf_name&quot;&gt;  vrf {{ vrf_name }}    &lt;group name=&quot;/bgp_peers*&quot; chain=&quot;chain_1&quot;&gt;    neighbor {{ peer_ip }}      {{ local_asn | set(asn) }}      {{ hostname | set(hostname) }}      remote-as {{ peer_asn }}      description {{ description }}      address-family {{ afi }} unicast        route-map {{ rpl_in }} in        route-map {{ rpl_out }} out&lt;/group&gt;  &lt;/group&gt;&lt;/group&gt;&lt;outputname=&quot;tabulate_outputter&quot;format=&quot;tabulate&quot;path=&quot;bgp_peers&quot;returner=&quot;terminal&quot;headers=&quot;hostname, local_asn, vrf_name, peer_ip, peer_asn, uptime, state, description, afi, rpl_in, rpl_out&quot;/&gt;&quot;&quot;&quot;data_bgp_state = &quot;&quot;&quot;ucs-core-switch-1#show bgp vrf CUST-1 vpnv4 unicast summaryNeighbor   V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd192.0.2.1  4 65101      32      54       42    0    0 00:12:33       300192.0.2.2  4 65101      11      45       99    0    0 03:55:01       idle&quot;&quot;&quot;data_bgp_config = &quot;&quot;&quot;ucs-core-switch-1#show run | section bgprouter bgp 65100  vrf CUST-1    neighbor 192.0.2.1      remote-as 65101      description peer-1      address-family ipv4 unicast        route-map RPL-1-IMPORT-v4 in        route-map RPL-1-EXPORT-V4 out    neighbor 192.0.2.2      remote-as 65102      description peer-2      address-family ipv4 unicast        route-map RPL-2-IMPORT-V6 in        route-map RPL-2-EXPORT-V6 out&quot;&quot;&quot;from ttp import ttpparser = ttp()parser.add_template(template)parser.add_input(data=data_bgp_state, input_name=&quot;bgp_state&quot;)parser.add_input(data=data_bgp_config, input_name=&quot;bgp_config&quot;)parser.parse()```&lt;/details&gt;# ContributionsFeel free to submit an issue, report a bug or ask a question, feature requests are welcomed. Or [buy](https://paypal.me/dmulyalin) Author a coffee# Additional resourcesList of additional resources:- Sandbox to test TTP templates - http://textfsm.nornir.tech/ by [tbotnz](https://github.com/tbotnz)- Videos on TTP - https://pynet.twb-tech.com/videos/ttp/ttp.html by [Kirk Byers](https://github.com/ktbyers)</longdescription>
</pkgmetadata>