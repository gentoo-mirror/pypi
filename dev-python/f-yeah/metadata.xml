<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![fyeah - reusable f-strings](https://raw.githubusercontent.com/ucodery/fyeah/master/art/logo.png)](https://github.com/ucodery/fyeah)------[![PyPI version](https://badge.fury.io/py/f-yeah.svg)](https://badge.fury.io/py/f-yeah)[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.org/project/f-yeah/)[![Code style: ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)#### Reusable f-stringsUnify on one format style.With f-yeah Just add parentheses and be on your way.## UsageKeep using f-string formatting, but when you need to re-use a template, use the`f` function instead of the `f` literalThese two lines are equivalent```pythonprint(f'about to put {os.getpid()} to sleep')print(f('about to put {os.getpid()} to sleep'))# &quot;about to put 421 to sleep&quot;```No longer choose between copying around f-string literals or continuing to useold-style format() calls.Instead of this```pythondef mul(value):    assert isinstance(value, int), f'Expected value to be an integer, got {type(value)} instead'    return value * valuedef pow(value):    assert isinstance(value, int), f'Expected value to be an integer, got {type(value)} instead'    return value ** value```Or this```pythonbad_check = 'expected value to be an integer, got {type(value)} instead'def mul(value):    assert isinstance(value, int), bad_check.format(value=value)    return value * valuedef pow(value):    assert isinstance(value, int), bad_check.format(value=value)    return value ** value```Just write the template once to get consistent strings that stay in sync.```pythonfrom fyeah import fbad_check = 'Expected value to be an integer, got {type(value)} instead'def mul(value):    assert isinstance(value, int), f(bad_check)    return value * valuedef pow(value):    assert isinstance(value, int), f(bad_check)    return value ** value```#### Why would I use a function over the literal?f-string literals are evaluated when they are created. This makes situations like thefollowing impossible.```pythonclass BaseListRunner:    command = ['ls']    args = []    notify_running = '{self.__class__.__name__} is executing {self.command} with &quot;{&quot; &quot;.join(self.args)}&quot;'    def run(self):        log.debug(f(self.notify_running))        subprocess.call(self.command + args)class AllListRunner:    def __init__(self):        self.args.append('-A')AllListRunner().run()# DEBUG: AllListRunnner is executing ls with &quot;-A&quot;```#### Why would I use f-yeah instead of the format() builtin?Although the format mini-language and f-strings share a lot of syntax, they havediverged somewhat. You could use only format() for all your strings, but format()is more verbose and less flexible as compared to f-strings; enough so that f-stringswere adopted into the language. Using f-yeah makes the following possible.```pythonG_COUNT = 0count_tracker = '{G_COUNT=} at {datetime.datetime.utcnow():%H:%M:%S}'def acquire():    G_COUNT += 1    log.debug(f(count_tracker))def release():    G_COUNT -= 1    log.debug(f(count_tracker))def check():    log.debug(f(count_tracker))    return G_COUNT```</longdescription>
</pkgmetadata>