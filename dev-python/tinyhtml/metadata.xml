<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>tinyhtml========A tiny library to safely render compact HTML5 from Python expressions... image:: https://github.com/niklasf/python-tinyhtml/workflows/Test/badge.svg    :target: https://github.com/niklasf/python-tinyhtml/actions    :alt: Test status.. image:: https://badge.fury.io/py/tinyhtml.svg    :target: https://pypi.python.org/pypi/tinyhtml    :alt: PyPI packageIntroduction------------This is the entire API. The following documentation is longer than theimplementation... code:: python    &gt;&gt;&gt; from tinyhtml import html, h, frag, rawThe most important function is ``h()``. Below you see how to render attributes,normal elements, and void/self-closing elements... code:: python    &gt;&gt;&gt; html(lang=&quot;en&quot;)(    ...     h(&quot;head&quot;)(    ...         h(&quot;meta&quot;, charset=&quot;utf-8&quot;),    ...     ),    ... ).render()    '&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;/html&gt;'Use ``frag()`` to pass around groups of elements... code:: python    &gt;&gt;&gt; frag(    ...     h(&quot;h1&quot;)(&quot;Lorem ipsum ...&quot;),    ...     h(&quot;p&quot;)(&quot;... dolor sit amet.&quot;),    ... )    raw('&lt;h1&gt;Lorem ipsum ...&lt;/h1&gt;&lt;p&gt;... dolor sit amet.&lt;/p&gt;')Of course all content and attributes are properly escaped. Use ``raw()`` as anescape hatch to render unescaped HTML... code:: python    &gt;&gt;&gt; print(h(&quot;a&quot;, title=&quot;&amp;&lt;&gt;\&quot;'&quot;)(&quot;&amp;&lt;&gt;\&quot;'&quot;).render())    &lt;a title=&quot;&amp;amp;&amp;lt;&amp;gt;&amp;quot;'&quot;&gt;&amp;amp;&amp;lt;&amp;gt;&quot;'&lt;/a&gt;    &gt;&gt;&gt; print(raw(&quot;&lt;!-- ðŸ’¥&quot;))    &lt;!-- ðŸ’¥Installing----------::    pip install tinyhtmlFeatures and patterns---------------------* Supports Python 3.7+.* Output is compact: Naturally produces no superfluous whitespace between  elements.* Fragments provide ``_repr_html_()`` for Jupyter Notebook integration.* Includes mypy typings.  .. code:: python      &gt;&gt;&gt; from tinyhtml import Frag* Write **templates** as functions.  .. code:: python      &gt;&gt;&gt; def layout(title: str, body: Frag) -&gt; Frag:      ...     return html()(      ...        h(&quot;head&quot;)(      ...            h(&quot;title&quot;)(title),      ...        ),      ...        h(&quot;body&quot;)(body)      ...     )      &gt;&gt;&gt; layout(&quot;Hello world&quot;, frag(      ...     h(&quot;h1&quot;)(&quot;Hello world&quot;),      ...     h(&quot;p&quot;)(&quot;Lorem ipsum dolor sit amet.&quot;),      ... ))      raw('&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello world&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello world&lt;/h1&gt;&lt;p&gt;Lorem ipsum dolor sit amet.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;')* Use ``str``, ``int``, other fragments, ``None``, or iterables of these as  **child elements**. (Note that rendering consumes the iterables, so fragments  using generators can be rendered only once.)  .. code:: python      &gt;&gt;&gt; h(&quot;ul&quot;)(      ...     h(&quot;li&quot;)(n) for n in range(3)      ... )      raw('&lt;ul&gt;&lt;li&gt;0&lt;/li&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;')      &gt;&gt;&gt; h(&quot;ul&quot;)(      ...     h(&quot;li&quot;)(&quot;Foo&quot;) if False else None,      ...     h(&quot;li&quot;)(&quot;Bar&quot;),      ... )      raw('&lt;ul&gt;&lt;li&gt;Bar&lt;/li&gt;&lt;/ul&gt;')* Use ``str``, ``int``, ``None``, iterables of these, ``bool``, or dictionaries  with boolean values as **attributes**.  .. code:: python      &gt;&gt;&gt; h(&quot;input&quot;, type=&quot;checkbox&quot;, checked=True, disabled=False)      raw('&lt;input type=&quot;checkbox&quot; checked&gt;')      &gt;&gt;&gt; h(&quot;body&quot;, klass=[&quot;a&quot;, &quot;b&quot;])()      raw('&lt;body class=&quot;a b&quot;&gt;&lt;/body&gt;')      &gt;&gt;&gt; h(&quot;body&quot;, klass={      ...    &quot;a&quot;: True,      ...    &quot;b&quot;: False,      ... })()      raw('&lt;body class=&quot;a&quot;&gt;&lt;/body&gt;')* Use ``klass`` instead of ``class``, append a trailing underscore (``for_``),  or use underscores instead of dashes (``http_equiv``) for attribute names  that cannot be Python identifiers.  .. code:: python      &gt;&gt;&gt; h(&quot;div&quot;, klass=&quot;container&quot;)()      raw('&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;')      &gt;&gt;&gt; h(&quot;label&quot;, for_=&quot;name&quot;)(&quot;Name&quot;)      raw('&lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;')      &gt;&gt;&gt; h(&quot;meta&quot;, http_equiv=&quot;refresh&quot;, content=10)      raw('&lt;meta http-equiv=&quot;refresh&quot; content=&quot;10&quot;&gt;')* Render fragments as ``str``, or into a list of ``str`` for efficient string  building.  .. code:: python      &gt;&gt;&gt; frag(&quot;Hello world&quot;, &quot;!&quot;).render()      'Hello world!'      &gt;&gt;&gt; builder = []      &gt;&gt;&gt; frag(&quot;Hello world&quot;, &quot;!&quot;).render_into(builder)      &gt;&gt;&gt; builder      ['Hello world', '!']      &gt;&gt;&gt; &quot;&quot;.join(builder)      'Hello world!'* Does not support comment nodes, unescapable raw text elements  (like inline styles and scripts), or foreign elements (like inline SVG).  Instead, reference external files, or use ``raw()`` with appropriate caution.Acknowledgements----------------Inspired by (the good parts of) `ScalaTags &lt;https://www.lihaoyi.com/scalatags/&gt;`_.License-------Licensed under the`Apache License, Version 2.0 &lt;https://www.apache.org/licenses/LICENSE-2.0&gt;`_,or the `MIT license &lt;https://opensource.org/licenses/MIT&gt;`_, at your option.</longdescription>
</pkgmetadata>