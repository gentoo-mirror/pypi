<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># attributes-doc[![PyPI version](https://badge.fury.io/py/attributes-doc.svg)](https://pypi.org/project/attributes-doc/)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/attributes-doc.svg?color=green)[![Build Status](https://github.com/tkukushkin/attributes-doc/workflows/build/badge.svg?branch=master)](https://github.com/tkukushkin/attributes-doc/actions?query=workflow%3Abuild+branch%3Amaster)[![codecov](https://codecov.io/gh/tkukushkin/attributes-doc/branch/master/graph/badge.svg)](https://codecov.io/gh/tkukushkin/attributes-doc)Hacky implementation of [PEP 224](https://www.python.org/dev/peps/pep-0224/).## UsageThis package provides the following functions:- `attributes_doc`- `get_attributes_doc`- `enum_doc`- `get_doc`### Decorator `attributes_doc`This function is a class decorator, and using it on a class will set class attributes called `__doc_ATTRNAME__` for each existing attribute.```pyfrom attributes_doc import attributes_doc@attributes_docclass Foo:bar = 1&quot;&quot;&quot;This is the docstring for the bar attribute.It will be stored in `Foo.__doc_bar__` and will be accessible at runtime.&quot;&quot;&quot;baz = 2&quot;&quot;&quot;This is the docstring for the baz attribute.&quot;&quot;&quot;print(Foo.__doc_bar__)print(getattr(Foo, &quot;__doc_baz__&quot;))```### Function `get_attributes_doc`This function will return a dictionary with the docstrings for all attributes of a class without setting them.```pyfrom attributes_doc import get_attributes_docclass Goo:&quot;&quot;&quot;This class doesn't use attributes_doc and we don't want to modify it at all.&quot;&quot;&quot;bar = 1&quot;&quot;&quot;This is the docstring for the bar attribute.&quot;&quot;&quot;baz = 2&quot;&quot;&quot;This is the docstring for the baz attribute.&quot;&quot;&quot;docs = get_attributes_doc(Goo)print(docs[&quot;bar&quot;])print(docs[&quot;baz&quot;])```### Decorator `enum_doc`This is also a class decorator, but it is intended for Enum classes. Instead of setting one doc attribute per attribute to the containing class, it will set the `__doc__` attribute for each enum value.```pyfrom attributes_doc import enum_docfrom enum import Enum@enum_docclass Foo(Enum):bar = 1&quot;&quot;&quot;This is the docstring for the bar attribute.&quot;&quot;&quot;baz = 2&quot;&quot;&quot;This is the docstring for the baz attribute.&quot;&quot;&quot;print(Foo.bar.__doc__)```### Function `get_doc`This function will return the docstring of an attribute of a class.```pyfrom attributes_doc import get_docprint(get_doc(Foo, &quot;baz&quot;)) # Instead of getattr(Foo, &quot;__doc_baz__&quot;) above```</longdescription>
</pkgmetadata>