<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># lib-freshserviceA wrapper for the [Freshservice](https://egym.freshservice.com) APIwritten in python3.Project owner: it-admin@egym.de## Modules### api.pyTo do anything useful with the wrapper, you need to import this module. TheFreshservice API offers various sets of functionality, of those Tickets,Tasks, Users, Agents and Assets have been implemented. Here you can find aclass for each of them. A lot of the API's functionality was not implemented,because it was not needed. The usage requires basic knowledge aboutFreshservice API usage, you can find the official documentation[here](https://api.freshservice.com).### errors.pyPassing values to the wrapper, that the API doesn't accept, causes the requestto fail. For developers it can be hard to figure out, what exactly was thecause, so this module defines some exceptions and provides loggingfunctionality.### models.pyThe API returns JSON, which if it's used in its raw form in code, is not verypretty. Therefore the response is parsed to objects, which makes workingwith the data more natural. Some properties have been defined to hide magicnumbers. You may need to use those values, when writing to the API,so it may be useful to import the constants from this file.## Examples### Creating API instancesYou first need to create the general API object, which stores the key.```python&gt;&gt;&gt; from freshservice.api import API, TicketAPI&gt;&gt;&gt; api = API(key, 'domain')&gt;&gt;&gt; ticket_api = API(api)```This can be applied to all other API classes.### TicketsHere we will create, update and use a ticket.```pythonfrom freshservice.models import Ticketsample = ticket_api.create_ticket('Title', 'requester@domain.com',                                  due_by='2100-01-01', manual_dueby=True,                                  custom_field='Value')print(sample.status)print(sample.custom_field)ticket_api.update(ticket.display_id, status=Ticket.CLOSED)```As you can see in the example, you can use any attribute=value pair, that theAPI allows. You can also use custom fields, that you defined for the ticket.Internally custom fields have names like 'custom_field_123456' and they arein an inner dictionary called 'custom_field'. However this wrapper will renamethem and make them directly accessible as seen in the example. This improvescode readability a lot.Note, that the creation of a TicketAPI object will make some API calls, toget information about your domain. Therefore it is better to always reusethis object to save API calls.Some hints: You can't update the description. You will need to create a noteinstead (APIv2 will bring answer functionality). Working with the API, youshould never need to use the Ticket.id field, instead you should useTicket.display_id. When you want to update the due date of a ticket, you alsoneed to pass 'manual_dueby=True'.### TasksThe usage of tasks is very similar to tickets, altough they have a bit lesscomplexity and functionality. The following example assumes, we already havea ticket object.```pythonfrom freshservice.models import Tasktask_list = task_api.get_all_tasks(ticket.display_id)for task in task_list:     print('{}: {}'.format(task.title, task.description)     task.update(ticket.display_id, task.id, due_date='2100-01-01')```### AssetsThese are the most complex objects in Freshservice, but the wrapper attemptsto simplify the usage with automation. To do this, it will make an API call,when you create the API object. It will also make an additional APIcall, evertime you create an Asset object of a CI type, that has not beenused before. To save API calls, you should always reuse an object of AssetAPI.This snippet showcases the general usage of the API class:```pythonfrom models import Assetasset = asset_api.search('name', 'pc-123')print(asset)asset_api.update(asset.id, impact=Asset.HIGH)asset = asset_api.get(asset.id)```The method 'get_all' is especially risky, because a large database will resultin a lot of API calls. However it is the only known way, to get all assetsassigned to a specific user in APIv1. This is an extremely wasteful way ofusing API calls, therefore an update here from Freshservice is darely needed.However, this can be done with a relatively small database, so here is anexample of how to do this, assuming we only have the email of a user.```pythonuser = user_api.search('user@domain.com')asset_list = asset_api.get_all()assigned_hardware = []for asset in asset_list:    if asset.user_id == user.id:        assigned_hardware.append(asset)```This is necessary, because the search function of the API doesn't take theuser's email as a parameter. The support of Freshservice promised a solutionwith APIv2.### AgentsThis API is currently only usable to get information about a specific agent.```pythonagent = agent_api.search('agent@domain.com')print(agent)```If the search fails, the function will raise an Exception.### UsersThis is analog to agents.## Things to comeSince this wrapper only implements a subset of the API functionality, therewill likely be new API classes introduced, or more methods will be created forthe existing classes. Currently Freshservice has released a beta for version 2of their API. It will bring better documentation and more functionality,aswell as more consistency overall.The tests right now are poorly organized and don't cover a lot of cases. Thiswill change in the near future, using tox. To make this package more easilyaccessible, it will be released as a package and a Changelog will be introduced.Some of the code is currently hard to understand, without some deeper knowledgeof the API's data model, so a seperate document is planned, which explainsthat a bit, since the official documentation is a bit sparse. The codedocumentation in general is subject for improvement.## LicenseApache 2.0 - See LICENSE.txt for more information.</longdescription>
</pkgmetadata>