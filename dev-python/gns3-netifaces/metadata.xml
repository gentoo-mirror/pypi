<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>WARNING========This a fork distributed on PyPi until this issue on upstream is solved:https://bitbucket.org/al45tair/netifaces/issue/13/0104-install-is-broken-on-python-3xThe original module is here:https://bitbucket.org/al45tair/netifacesnetifaces 0.10.4================.. image:: https://drone.io/bitbucket.org/al45tair/netifaces/status.png   :target: https://drone.io/bitbucket.org/al45tair/netifaces/latest   :alt: Build Status1. What is this?----------------It's been annoying me for some time that there's no easy way to get theaddress(es) of the machine's network interfaces from Python.  There isa good reason for this difficulty, which is that it is virtually impossibleto do so in a portable manner.  However, it seems to me that there shouldbe a package you can easy_install that will take care of working out thedetails of doing so on the machine you're using, then you can get on withwriting Python code without concerning yourself with the nitty gritty ofsystem-dependent low-level networking APIs.This package attempts to solve that problem.2. How do I use it?-------------------First you need to install it, which you can do by typing::  tar xvzf netifaces-0.10.4.tar.gz  cd netifaces-0.10.4  python setup.py installOnce that's done, you'll need to start Python and do something like thefollowing::&gt;&gt;&gt; import netifacesThen if you enter&gt;&gt;&gt; netifaces.interfaces()['lo0', 'gif0', 'stf0', 'en0', 'en1', 'fw0']you'll see the list of interface identifiers for your machine.You can ask for the addresses of a particular interface by doing&gt;&gt;&gt; netifaces.ifaddresses('lo0'){18: [{'addr': ''}], 2: [{'peer': '127.0.0.1', 'netmask': '255.0.0.0', 'addr': '127.0.0.1'}], 30: [{'peer': '::1', 'netmask': 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', 'addr': '::1'}, {'peer': '', 'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::1%lo0'}]}Hmmmm.  That result looks a bit cryptic; let's break it apart and explainwhat each piece means.  It returned a dictionary, so let's look there first::  { 18: [...], 2: [...], 30: [...] }Each of the numbers refers to a particular address family.  In this case, wehave three address families listed; on my system, 18 is ``AF_LINK`` (which meansthe link layer interface, e.g. Ethernet), 2 is ``AF_INET`` (normal Internetaddresses), and 30 is ``AF_INET6`` (IPv6).But wait!  Don't use these numbers in your code.  The numeric values here aresystem dependent; fortunately, I thought of that when writing netifaces, sothe module declares a range of values that you might need.  e.g.&gt;&gt;&gt; netifaces.AF_LINK18Again, on your system, the number may be different.So, what we've established is that the dictionary that's returned has oneentry for each address family for which this interface has an address.  Let'stake a look at the ``AF_INET`` addresses now:&gt;&gt;&gt; addrs = netifaces.ifaddresses('lo0')&gt;&gt;&gt; addrs[netifaces.AF_INET][{'peer': '127.0.0.1', 'netmask': '255.0.0.0', 'addr': '127.0.0.1'}]You might be wondering why this value is a list.  The reason is that it'spossible for an interface to have more than one address, even within thesame family.  I'll say that again: *you can have more than one address ofthe same type associated with each interface*.*Asking for &quot;the&quot; address of a particular interface doesn't make sense.*Right, so, we can see that this particular interface only has one address,and, because it's a loopback interface, it's point-to-point and thereforehas a *peer* address rather than a broadcast address.Let's look at a more interesting interface.&gt;&gt;&gt; addrs = netifaces.ifaddresses('en0')&gt;&gt;&gt; addrs[netifaces.AF_INET][{'broadcast': '10.15.255.255', 'netmask': '255.240.0.0', 'addr': '10.0.1.4'}, {'broadcast': '192.168.0.255', 'addr': '192.168.0.47'}]This interface has two addresses (see, I told you...)  Both of them areregular IPv4 addresses, although in one case the netmask has been changedfrom its default.  The netmask *may not* appear on your system if it's setto the default for the address range.Because this interface isn't point-to-point, it also has broadcast addresses.Now, say we want, instead of the IP addresses, to get the MAC address; thatis, the hardware address of the Ethernet adapter running this interface.  Wecan do&gt;&gt;&gt; addrs[netifaces.AF_LINK][{'addr': '00:12:34:56:78:9a'}]Note that this may not be available on platforms without getifaddrs(), unlessthey happen to implement ``SIOCGIFHWADDR``.  Note also that you just get theaddress; it's unlikely that you'll see anything else with an ``AF_LINK`` address.Oh, and don't assume that all ``AF_LINK`` addresses are Ethernet; you might, forinstance, be on a Mac, in which case:&gt;&gt;&gt; addrs = netifaces.ifaddresses('fw0')&gt;&gt;&gt; addrs[netifaces.AF_LINK][{'addr': '00:12:34:56:78:9a:bc:de'}]No, that isn't an exceptionally long Ethernet MAC address---it's a FireWireaddress.As of version 0.10.0, you can also obtain a list of gateways on yourmachine:&gt;&gt;&gt; netifaces.gateways(){2: [('10.0.1.1', 'en0', True), ('10.2.1.1', 'en1', False)], 30: [('fe80::1', 'en0', True)], 'default': { 2: ('10.0.1.1', 'en0'), 30: ('fe80::1', 'en0') }}This dictionary is keyed on address family---in this case, ``AF_INET``---andeach entry is a list of gateways as ``(address, interface, is_default)`` tuples.Notice that here we have two separate gateways for IPv4 (``AF_INET``); someoperating systems support configurations like this and can either route packetsbased on their source, or based on administratively configured routing tables.For convenience, we also allow you to index the dictionary with the specialvalue ``'default'``, which returns a dictionary mapping address families to thedefault gateway in each case.  Thus you can get the default IPv4 gateway with&gt;&gt;&gt; gws = netifaces.gateways()&gt;&gt;&gt; gws['default'][netifaces.AF_INET]('10.0.1.1', 'en0')Do note that there may be no default gateway for any given address family;this is currently very common for IPv6 and much less common for IPv4 but itcan happen even for ``AF_INET``.BTW, if you're trying to configure your machine to have multiple gateways forthe same address family, it's a very good idea to check the documentation foryour operating system *very* carefully, as some systems become extremelyconfused or route packets in a non-obvious manner.I'm very interested in hearing from anyone (on any platform) for whom the``gateways()`` method doesn't produce the expected results.  It's quitecomplicated extracting this information from the operating system (whicheveroperating system we're talking about), and so I expect there's at least onesystem out there where this just won't work.3. This is great!  What platforms does it work on?--------------------------------------------------It gets regular testing on OS X, Linux and Windows.  It has also been usedsuccessfully on Solaris, and it's expected to work properly on other UNIX-likesystems as well.  If you are running something that is not supported, andwish to contribute a patch, please use BitBucket to send a pull request.4. What license is this under?------------------------------It's an MIT-style license.  Here goes:Copyright (c) 2007-2014 Alastair HoughtonPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.5. Why the jump to 0.10.0?--------------------------Because someone released a fork of netifaces with the version 0.9.0.Hopefully skipping the version number should remove any confusion.  In addition starting with 0.10.0 Python 3 is now supported and other features/bugfixes have been included as well.  See the CHANGELOG for amore complete list of changes.</longdescription>
</pkgmetadata>