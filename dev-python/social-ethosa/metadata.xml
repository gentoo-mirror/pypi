<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;Social-ethosa&lt;/h1&gt;A Python library that uses requests  Documentation in other languages- [Russian](https://github.com/Ethosa/social_ethosa/blob/master/README_RU.md)[Changelog](https://github.com/Ethosa/social_ethosa/blob/master/ChangeLog.md)Examples:- [Inline keyboard](https://github.com/Ethosa/social_ethosa/tree/master/examples/keyboard_inline.py)- [Standart keyboard](https://github.com/Ethosa/social_ethosa/tree/master/examples/keyboard_standart.py)- [Receiving new messages by the group](https://github.com/Ethosa/social_ethosa/tree/master/examples/group_messages.py)- [Receiving new messages by the group (OOP)](https://github.com/Ethosa/social_ethosa/tree/master/examples/group_messages_oop.py)- [Receiving new messages by the user](https://github.com/Ethosa/social_ethosa/tree/master/examples/user_messages.py)- [Receiving new messages by the user (OOP)](https://github.com/Ethosa/social_ethosa/tree/master/examples/user_messages_oop.py)- [Keyboard buttons](https://github.com/Ethosa/social_ethosa/blob/master/examples/buttons.py)- [Files upload](https://github.com/Ethosa/social_ethosa/blob/master/examples/uploadFilesVk.py)## Get startedInstallation: `pip install --upgrade social-ethosa`  Import:```pythonfrom social_ethosa import *```## Vkcom```pythonvk = Vk(token=&quot;Your token is here&quot;, group_id=12345, debug=True, lang=&quot;en&quot;)# the group_id parameter should be used if you are going to log in through a group.# In this example, we will use group authorization.@vk.on_message_new# This decorator is an event handler that executes the function passed to it on a new message# The decorator's name is taken from the official names, but with the prefix &quot; on_&quot;# https://vk.com/dev/groups_eventsdef getMessage(message):  text = message.text  peer_id = message.peer_id  from_id = message.from_id  attachments = message.attachments```using the file Uploader:```pythonvk.uploader.getUploadUrl(&quot;message_photo&quot;) # getting a link to upload files# you can also pass other arguments (argument=value)# to get the rest of the UploadUrl names, use the function# uploader.getAllTypes```upload files:```pythonresponse = vk.uploader.uploadFile(&quot;path&quot;) # you can also pass other arguments (argument=value)```Some audio methods are also available in my library:```pythonlogin = &quot;89007003535&quot;password = &quot;qwertyuiop&quot;audio = Audio(login=login, password=password, debug=1)audios = audio.get()# Since the audio methods are not available in the official API, I had to make a parser of the site```## Yandex apiUsing Yandex api:```pythonTOKEN = &quot;translate token&quot;yt = YTranslator(token=TOKEN)text = &quot;РџР°Р№С‚РѕРЅ - С…РѕСЂРѕС€РёР№ СЏР·С‹Рє РїСЂРѕРіСЂР°РјРјРёСЂРѕРІР°РЅРёСЏ&quot;response = yt.translate(text=text, lang=&quot;en&quot;) # Text translationprint(response)```## Trace moeUsing the [TraceMoe api](https://trace):```pythontracemoe = TraceMoe() # initialization for future use# In directory with script there is screenshot from anime &quot; a. png&quot;response = tracemoe.search(&quot;a.png&quot;, False, 1)# param 1 - path to image or image url# param 2 - True, if param 1 is link# param 3 - filter search```![Image did not load](https://i.pinimg.com/originals/33/55/37/335537e3904b0a3b204364907b22622f.jpg)If the anime is found, you should get a video preview of the found moment:```pythonvideo = tracemoe.getVideo(response, mute=0) # The mute parameter must be 1 if you want to get video without soundtracemoe.writeFile(&quot;file.mp4&quot;, video)# param 1 is a path to write file# param 2 is a video received by the get Video method```## BotWrapperIn the library there is a wrapper for bots!  Initialization:```pythonbw = BotWrapper()```Getting a random date```pythondate = bw.randomDate(fromYear=&quot;2001&quot;, toYear=&quot;3001&quot;)# Returned: string# The fromYear and toYear parameters are optional```## BetterBotBaseThis class uses pickle to maintain the database.  Let's initialize this class.```pythonbbs = BetterBotBase(&quot;users folder&quot;, &quot;dat&quot;)# The first argument is the name of the folder where users will be stored# the second argument is the Postfix of the files, in our case the files will look like this:# 123123123.dat```BetterBotBase can also be used with Vkcom:```python@vk.on_message_newdef getNewMessage(message):  from_id = message.from_id  if from_id &gt; 0:    user = bbs.autoInstall(from_id, vk)# autoInstall automatically creates or loads users and returns the user for further action with it.```BotWrapper can also be used to interact with BetterBotBase!```pythontext = bw.answerPattern(&quot;Hello, &lt;name&gt;, your money is &lt;money&gt;!&quot;, user)# the answer Pattern method automatically substitutes variables from user,# thus making it a little easier to format the string```You can define your own templates to the database!```python# right after BetterBotBase announcementbbs.addPattern(&quot;countMessages&quot;, 0)# the first argument is the variable name# the second argument is the default value of the variable (when creating a user)```You created a template, but it was not added to the old users? not a problem!```pythonbbs.addNewVariable(&quot;countMessages&quot;, 0)# this method works the same as addPattern, but with older users```## ThisPerson apiInitialization is quite simple```pythonperson = ThisPerson()```In the class now only 3 methods to retrieve non-existent people/cats/waifu```pythonrperson = person.getRandomPerson()rcat = person.getRandomCat()rwaifu = person.getRandomWaifu()```after receiving the generated photo, it should be written to a file.```pythonperson.writeFile(&quot;person.png&quot;, rperson)person.writeFile(&quot;cat.png&quot;, rcat)person.writeFile(&quot;waifu.png&quot;, rwaifu)```## Yummyanime clubThere are few methods here, as I have not found an official API. Let's get started.```pythonym = YummyAnime()ym = YummyAnime(login=&quot;yourmail@gmail.com&quot;, password=&quot;iampassword&quot;)# You can log in to your account if you need to```Getting random anime```pythonrandomAnime = ym.getRandomAnime()print(dir(randomAnime))print(randomAnime)```You can also get a list of anime updates```pythonupdates = ym.getUpdates()anime = updates[0].open() # You will get the same object that the getRandomAnime() method returnsprint(updates)print(anime)```And also you can view your profile```pythonprofile = ym.getProfile()print(profile)```## bloggercom apiModule to work with [blogger.com](https://blogger.com)  Initialization:```pythonblogger = Blogger(apiKey=&quot;Your api key&quot;)```get blog by id:```pythonblog = blogger.blogs.get(123123)print(blog[&quot;name&quot;]) # You can use the resulting object as a dictionaryprint(blog.name) # or as an object :/print(blog)```get blog by url:```pythonblog = blogger.blogs.getByUrl(&quot;https://meethosa.blogspot.com&quot;)```get posts by blog id```pythonposts = blogger.posts.get(123123)```get pages by blog id```pythonposts = blogger.pages.get(123123)```## eMathI decided that very few people will need this module, so importing it separately from the main one:```pythonfrom social_ethosa.eMath import *```### PointYou can create an N-dimensional point:```pythonpoint = Point(0, 0, 0)point1 = Point(4, 2, 3)```And also you can find the Euclidean distance between them:```pythondistance = point.euclideanDistance(point1)print(distance)```### MatrixAlso this module has a Matrix class```pythonmatrix = Matrix(3, 3) # Creating a 3x3 matrixmatrix1 = Matrix([[1, 2, 3],                  [4, 5, 6],                  [7, 8, 9]]) # Creating a 3x3 matrix```You can transpose the matrix```pythonmatrix1.transpose()# 1 4 7# 2 5 8# 3 6 9```And multiply the matrix by the number```pythonmatrix1 *= 3# 3 12 21# 6 15 24# 9 18 27```The addition of two matrices is also possible```pythonmatrix2 = Matrix([[1, 2, 3],                  [4, 5, 6],                  [7, 8, 9]])matrix1 += matrix2# 4 14 24# 10 20 30# 16 26 36```Matrix multiplication? No problem!```pythonmatrix = Matrix([[1, 2, 3],                [4, 5, 6]])matrix1 = Matrix([[1, 2],                [3, 4],                [5, 6]])matrix *= matrix1# 22, 28 # 49, 64matrix = Matrix([[1, 2],                [3, 4]])matrix1 = Matrix([[1, 2],                [3, 4]])matrix *= matrix1# 7, 10# 15, 22```You can also clear or fill the matrix with any numbers!```pythonmatrix = Matrix([[1, 2],                [3, 4]])# 1 2# 3 4matrix.clear()# 0 0# 0 0matrix.fill()# 0 0# 0 0matrix.fill(7)# 7 7# 7 7```you can also edit individual parts of the matrix```pythonmatrix.setAt(0, 0, 8)# 8 7# 7 7a = matrix.getAt(0, 0)# 7```And also you can mirror the matrix:```pythonmatrix.flip()# 7 7# 7 8```### ArithmeticSequenceThere are many ways to initialize an arithmetic sequence.```pythonars = ArithmeticSequence(0, 2)ars = ArithmeticSequence([0, 2])ars.getElem(1) # 2ars.getElem(0) # 0ars.getElem(4) # 8```You can also get the sum of the elements```pythonars = ArithmeticSequence(5, 5)ars.getSum(0) # 5ars.getSum(2) # 15```### GeometricSequenceThere are many ways to initialize an geometric sequence.```pythonars = GeometricSequence(1, 2)ars = GeometricSequence([1, 2])ars.getElem(1) # 2ars.getElem(0) # 1ars.getElem(4) # 16```You can also get the sum of the elements```pythonars = ArithmeticSequence(1, 2)ars.getSum(0) # 1ars.getSum(2) # 7ars.getSum(1) # 3```## utilsThis module can make your life much easier.```pythondef smthDef(arg1, arg2, **kwargs):    print(getValue(kwargs, &quot;argument&quot;, None))# getValue - abbreviation of kwargs[&quot;argument&quot;] if &quot;argument&quot; in kwargs else NonedownloadFileFromUrl(&quot;url&quot;, &quot;path to file&quot;)# this method downloads the file from the link and places it in the specified path.updateLibrary(&quot;0.2.42&quot;)# this method automatically updates the library to the specified version.# if no version is specified, the library is updated to the latest version.lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]print(splitList(lst, 2))# [[1, 2], [3, 4], [5, 6], [7, 8], [9, 0]]lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]print(splitList(lst, 3))# [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]]# the splitList method tries to divide the passed list into equal partstimer = Timer()# Timer-class for calling certain functions after a certain time.@timer.after(1000)# after method run this function after 1000 millisecondsdef hi():  print(&quot;hello world&quot;)@timer.afterEvery(100, 1000)# the after Every method starts this function after 100 milliseconds and will call it every subsequent 1000 millisecondsdef hello(): print(&quot;hello&quot;)timer.cancel()# when the timer method is called.cancel will automatically close all running timers of this timer```## extraThis module, like eMath, must be imported separately```pythonfrom social_ethosa.extra import *```### EList:```pythonlst1 = EList() # create []lst2 = EList(&quot;string&quot;) # create [&quot;s&quot;, &quot;t&quot;, &quot;r&quot;, &quot;i&quot;, &quot;n&quot;, &quot;g&quot;]lst3 = EList(1, 2, 3) # create [1, 2, 3]lst4 = EList([1, 2, 3]) # create [1, 2, 3]```all the methods of normal lists are present in this, however there are a few features here```pythonlst1 += 1 # [1]lst1 += [1, 2] # [1, 1, 2]lst1 += EList(3, 4) # [1, 1, 2, 3, 4]lst1.clear() # []lst1 += [1, 2, 3] # [1, 2, 3]lst1.split(1) # [[1], [2], [3]]lst1.clear()lst1 += [1, 2, 3]lst1[2] # 3lst1[3] # errorlst1[3] = 4 # working!lst1 # [1, 2, 3, 4]lst1.len() == len(lst1) # Truelst1.sum() == sum(lst1) # Truelst1.standartItem(0)lst1[8] = 1lst1 # [1, 2, 3, 4, 0, 0, 0, 0, 1]```There are also non-standard methods, for example:```pythonlst1.binarySearch(1) # 0lst1.interpolationSearch(1) # 0lst1.sortA(EList.GNOME_SORT) # [0, 0, 0, 0, 1, 1, 2, 3, 4]```### LogManager```pythonLogManager(&quot;filename.txt&quot;, &quot;text for log&quot;)# orwith LogManager(&quot;filename.txt&quot;) as log:  log.write(&quot;text for log&quot;)```### MarkovChains```pythonmchains = MarkovChains()mchains.addChain(&quot;name&quot;, &quot;hello&quot;)mchains.addChain(&quot;hello&quot;, &quot;name&quot;)mchains.generateSequence(5, auth=&quot;name&quot;)# [&quot;hello&quot;, &quot;name&quot;, &quot;hello&quot;, &quot;name&quot;, &quot;hello&quot;]mchains = MarkovChains()mchains.execute(&quot;name =&gt; hello =&gt; c &lt;=&gt; ban =&gt; name =&gt; c&quot;)mchains.generateSequence(5) # ['c', 'ban', 'name', 'hello', 'c']```### AMarkovAlso you can easily use Markov algorithm```pythonm = AMarkov()m.addRule(&quot;1&quot;, &quot;0|&quot;)m.addRule(&quot;|0&quot;, &quot;||0&quot;)m.addRule(&quot;0&quot;, &quot;&quot;)m.compile(&quot;101&quot;) # |||||```### EQueueThere is an queue here```pythonqueue = EQueue()for i in range(10):    queue.add(i)queue.len() # 10test = &quot;, &quot;.join(&quot;%s&quot; % queue.getRandom() for i in range(queue.len()))queue.len() # 0test # 8, 1, 9, 0, 6, 4, 2, 5, 3, 7```</longdescription>
</pkgmetadata>