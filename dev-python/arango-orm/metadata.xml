<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Welcome to Arango ORM (Python ORM Layer For ArangoDB)**arango_orm** is a python ORM layer inspired by SQLAlchemy but aimed to workwith the multi-model database [ArangoDB](https://www.arangodb.com). It supports accessing both collectionsand graphs using the ORM. The actual communication with the database is doneusing [python-arango](https://docs.python-arango.com) (the database driver for accessing arangodb frompython) and object serialization, validation, etc is handled by [pydantic](https://docs.pydantic.dev/latest/).## Installation```shellpip install arango-orm```## Connecting to a Database```pythonfrom arango import ArangoClientfrom arango_orm import Databaseclient = ArangoClient(hosts='http://localhost:8529')test_db = client.db('test', username='test', password='test')db = Database(test_db)```## Create Collection in the Database```pythondb.create_collection(Student)```## Drop a Collection```pythondb.drop_collection(Student)```## Check if a collection exists```pythondb.has_collection(Student)db.has_collection('students')```## Add Records```pythonfrom datetime import dates = Student(name='test', _key='12312', dob=date(year=2016, month=9, day=12))db.add(s)print(s._id)  # students/12312```## Get Total Records in the Collection```pythondb.query(Student).count()```## Get Record By Key```pythons = db.query(Student).by_key('12312')```## Update a Record```pythons = db.query(Student).by_key('12312')s.name = 'Anonymous'db.update(s)```## Delete a Record```pythons = db.query(Student).by_key('12312')db.delete(s)```## Get All Records in a Collection```pythonstudents = db.query(Student).all()```## Get First Record Matching the Query```pythonfirst_student = db.query(Student).first()```## Filter RecordsUsing bind parameters (recommended)```pythonrecords = db.query(Student).filter(&quot;name==@name&quot;, name='Anonymous').all()```Using plain condition strings (not safe in case of unsanitized user supplied input)```pythonrecords = db.query(Student).filter(&quot;name=='Anonymous'&quot;).all()```## Filter Using OR```python# Get all documents where student name starts with A or Brecords = db.query(Student).filter(            &quot;LIKE(rec.name, 'A%')&quot;, prepend_rec_name=False).filter(            &quot;LIKE(rec.name, 'B%')&quot;, prepend_rec_name=False, _or=True).all()```## Filter, Sort and Limit```python# Last 5 students with names starting with Arecords = db.query(Student).filter(            &quot;LIKE(rec.name, 'A%')&quot;, prepend_rec_name=False).sort(&quot;name DESC&quot;).limit(5).all()# Query students with pagination (limit&amp;offset)page_num, per_page = 2, 10page = db.query(Student).sort(&quot;name DESC&quot;).limit(per_page, start_from=(page_num - 1) * per_page)```## Fetch Only Some Fields```pythonc = db.query(Student).limit(2).returns('_key', 'name').first()```## Update Multiple Records```pythondb.query(Student).filter(&quot;name==@name&quot;, name='Anonymous').update(name='Mr. Anonymous')```## Delete Multiple Records```pythondb.query(Student).filter(&quot;LIKE(rec.name, 'test%')&quot;, prepend_rec_name=False).delete()```## Delete All Records```pythondb.query(Student).delete()```## Bulk Create Records```pythons1 = Student(name='test1', _key='12345', dob=date(year=2016, month=9, day=12))s2 = Student(name='test2', _key='22346', dob=date(year=2015, month=9, day=12)car1 = Car(make=&quot;Honda&quot;, model=&quot;Fiat&quot;, year=2010)car2 = Car(make=&quot;Honda&quot;, model=&quot;Skoda&quot;, year=2015)db.bulk_add(entity_list=[p_ref_10, p_ref_11, car1, car2])```## Bulk Update Records```pythonp_ref1 = db.query(Person).by_key(&quot;12312&quot;)p_ref2 = db.query(Person).by_key(&quot;12345&quot;)p_ref1.name = &quot;Bruce&quot;p_ref2.name = &quot;Eliza&quot;db.bulk_update(entity_list=[p_ref1, p_ref2])```## Query Using AQL```pythondb.add(Student(name='test1', _key='12345', dob=date(year=2016, month=9, day=12)))db.add(Student(name='test2', _key='22346', dob=date(year=2015, month=9, day=12)))students = [Student._load(s) for s in db.aql.execute(&quot;FOR st IN students RETURN st&quot;)]```## Reference FieldsReference fields allow linking documents from another collection class within a collection instance.These are similar in functionality to SQLAlchemy's relationship function.```pythonfrom arango import ArangoClientfrom arango_orm.database import Databasefrom arango_orm.fields import Stringfrom arango_orm import Collection, Relation, Graph, GraphConnectionfrom arango_orm.references import relationship, graph_relationshipclass Person(Collection):    __collection__ = 'persons'    _index = [{'type': 'hash', 'unique': False, 'fields': ['name']}]    _allow_extra_fields = False  # prevent extra properties from saving into DB    _key = String(required=True)    name = String(required=True, allow_none=False)    cars = relationship(__name__ + &quot;.Car&quot;, '_key', target_field='owner_key')    def __str__(self):        return &quot;&lt;Person(&quot; + self.name + &quot;)&gt;&quot;class Car(Collection):    __collection__ = 'cars'    _allow_extra_fields = True    make = String(required=True)    model = String(required=True)    year = Integer(required=True)    owner_key = String()    owner = relationship(Person, 'owner_key', cache=False)    def __str__(self):        return &quot;&lt;Car({} - {} - {})&gt;&quot;.format(self.make, self.model, self.year)client = ArangoClient(hosts='http://localhost:8529')test_db = client.db('test', username='test', password='test')db = Database(test_db)p = Person(_key='kashif', name='Kashif Iftikhar')db.add(p)p2 = Person(_key='azeen', name='Azeen Kashif')db.add(p2)c1 = Car(make='Honda', model='Civic', year=1984, owner_key='kashif')db.add(c1)c2 = Car(make='Mitsubishi', model='Lancer', year=2005, owner_key='kashif')db.add(c2)c3 = Car(make='Acme', model='Toy Racer', year=2016, owner_key='azeen')db.add(c3)print(c1.owner)print(c1.owner.name)print(c2.owner.name)print(c3.owner.name)print(p.cars)print(p.cars[0].make)print(p2.cars)```## Working With GraphsWorking with graphs involves creating collection classes and optionally Edge/Relation classes. Users can use the built-in Relation class for specifying relations but if relations need to contain extra attributes then it's required to create a sub-class of Relation class. Graph functionality is explain below with the help of a university graph example containing students, teachers, subjects and the areas where students and teachers reside in.First we create some collections and relationships```pythonfrom arango_orm.fields import String, Date, Integer, Booleanfrom arango_orm import Collection, Relation, Graph, GraphConnectionclass Student(Collection):    __collection__ = 'students'    _key = String(required=True)  # registration number    name = String(required=True, allow_none=False)    age = Integer()    def __str__(self):        return &quot;&lt;Student({})&gt;&quot;.format(self.name)class Teacher(Collection):    __collection__ = 'teachers'    _key = String(required=True)  # employee id    name = String(required=True)    def __str__(self):        return &quot;&lt;Teacher({})&gt;&quot;.format(self.name)class Subject(Collection):    __collection__ = 'subjects'    _key = String(required=True)  # subject code    name = String(required=True)    credit_hours = Integer()    has_labs = Boolean(missing=True)    def __str__(self):        return &quot;&lt;Subject({})&gt;&quot;.format(self.name)class Area(Collection):    __collection__ = 'areas'    _key = String(required=True)  # area nameclass SpecializesIn(Relation):    __collection__ = 'specializes_in'    expertise_level = String(required=True, options=[&quot;expert&quot;, &quot;medium&quot;, &quot;basic&quot;])    def __str__(self):        return &quot;&lt;SpecializesIn(_key={}, expertise_level={}, _from={}, _to={})&gt;&quot;.format(            self._key, self.expertise_level, self._from, self._to)```Next we sub-class the Graph class to specify the relationships between the various collections```pythonclass UniversityGraph(Graph):    __graph__ = 'university_graph'    graph_connections = [        # Using general Relation class for relationship        GraphConnection(Student, Relation(&quot;studies&quot;), Subject),        GraphConnection(Teacher, Relation(&quot;teaches&quot;), Subject),        # Using specific classes for vertex and edges        GraphConnection(Teacher, SpecializesIn, Subject),        GraphConnection([Teacher, Student], Relation(&quot;resides_in&quot;), Area)    ]```Now it's time to create the graph. Note that we don't need to create the collections individually, creating the graph will create all collections that it contains```pythonfrom arango import ArangoClientfrom arango_orm.database import Databaseclient = ArangoClient(hosts='http://localhost:8529')test_db = client.db('test', username='test', password='test')db = Database(test_db)uni_graph = UniversityGraph(connection=db)db.create_graph(uni_graph)```Now the graph and all it's collections have been created, we can verify their existence:```python[c['name'] for c in db.collections()]db.graphs()```Now let's insert some data into our graph:```pythonstudents_data = [    Student(_key='S1001', name='John Wayne', age=30),    Student(_key='S1002', name='Lilly Parker', age=22),    Student(_key='S1003', name='Cassandra Nix', age=25),    Student(_key='S1004', name='Peter Parker', age=20)]teachers_data = [    Teacher(_key='T001', name='Bruce Wayne'),    Teacher(_key='T002', name='Barry Allen'),    Teacher(_key='T003', name='Amanda Waller')]subjects_data = [    Subject(_key='ITP101', name='Introduction to Programming', credit_hours=4, has_labs=True),    Subject(_key='CS102', name='Computer History', credit_hours=3, has_labs=False),    Subject(_key='CSOOP02', name='Object Oriented Programming', credit_hours=3, has_labs=True),]areas_data = [    Area(_key=&quot;Gotham&quot;),    Area(_key=&quot;Metropolis&quot;),    Area(_key=&quot;StarCity&quot;)]for s in students_data:    db.add(s)for t in teachers_data:    db.add(t)for s in subjects_data:    db.add(s)for a in areas_data:    db.add(a)```Next let's add some relations, we can add relations by manually adding the relation/edge record into the edge collection, like:```pythondb.add(SpecializesIn(_from=&quot;teachers/T001&quot;, _to=&quot;subjects/ITP101&quot;, expertise_level=&quot;medium&quot;))```Or we can use the graph object's relation method to generate a relation document from given objects:```pythongotham = db.query(Area).by_key(&quot;Gotham&quot;)metropolis = db.query(Area).by_key(&quot;Metropolis&quot;)star_city = db.query(Area).by_key(&quot;StarCity&quot;)john_wayne = db.query(Student).by_key(&quot;S1001&quot;)lilly_parker = db.query(Student).by_key(&quot;S1002&quot;)cassandra_nix = db.query(Student).by_key(&quot;S1003&quot;)peter_parker = db.query(Student).by_key(&quot;S1004&quot;)intro_to_prog = db.query(Subject).by_key(&quot;ITP101&quot;)comp_history = db.query(Subject).by_key(&quot;CS102&quot;)oop = db.query(Subject).by_key(&quot;CSOOP02&quot;)barry_allen = db.query(Teacher).by_key(&quot;T002&quot;)bruce_wayne = db.query(Teacher).by_key(&quot;T001&quot;)amanda_waller = db.query(Teacher).by_key(&quot;T003&quot;)db.add(uni_graph.relation(peter_parker, Relation(&quot;studies&quot;), oop))db.add(uni_graph.relation(peter_parker, Relation(&quot;studies&quot;), intro_to_prog))db.add(uni_graph.relation(john_wayne, Relation(&quot;studies&quot;), oop))db.add(uni_graph.relation(john_wayne, Relation(&quot;studies&quot;), comp_history))db.add(uni_graph.relation(lilly_parker, Relation(&quot;studies&quot;), intro_to_prog))db.add(uni_graph.relation(lilly_parker, Relation(&quot;studies&quot;), comp_history))db.add(uni_graph.relation(cassandra_nix, Relation(&quot;studies&quot;), oop))db.add(uni_graph.relation(cassandra_nix, Relation(&quot;studies&quot;), intro_to_prog))db.add(uni_graph.relation(barry_allen, SpecializesIn(expertise_level=&quot;expert&quot;), oop))db.add(uni_graph.relation(barry_allen, SpecializesIn(expertise_level=&quot;expert&quot;), intro_to_prog))db.add(uni_graph.relation(bruce_wayne, SpecializesIn(expertise_level=&quot;medium&quot;), oop))db.add(uni_graph.relation(bruce_wayne, SpecializesIn(expertise_level=&quot;expert&quot;), comp_history))db.add(uni_graph.relation(amanda_waller, SpecializesIn(expertise_level=&quot;basic&quot;), intro_to_prog))db.add(uni_graph.relation(amanda_waller, SpecializesIn(expertise_level=&quot;medium&quot;), comp_history))db.add(uni_graph.relation(bruce_wayne, Relation(&quot;teaches&quot;), oop))db.add(uni_graph.relation(barry_allen, Relation(&quot;teaches&quot;), intro_to_prog))db.add(uni_graph.relation(amanda_waller, Relation(&quot;teaches&quot;), comp_history))db.add(uni_graph.relation(bruce_wayne, Relation(&quot;resides_in&quot;), gotham))db.add(uni_graph.relation(barry_allen, Relation(&quot;resides_in&quot;), star_city))db.add(uni_graph.relation(amanda_waller, Relation(&quot;resides_in&quot;), metropolis))db.add(uni_graph.relation(john_wayne, Relation(&quot;resides_in&quot;), gotham))db.add(uni_graph.relation(lilly_parker, Relation(&quot;resides_in&quot;), metropolis))db.add(uni_graph.relation(cassandra_nix, Relation(&quot;resides_in&quot;), star_city))db.add(uni_graph.relation(peter_parker, Relation(&quot;resides_in&quot;), metropolis))```With our graph populated with some sample data, let's explore the ways we can work with the graph.### Expanding DocumentsWe can expand any Collection (not Relation) object to access the data that is linked to it. We can sepcify which links ('inbound', 'outbound', 'any') to expand and the depth to which those should be expanded to. Let's see all immediate connections that Bruce Wayne has in our graph:```pythonbruce = db.query(Teacher).by_key(&quot;T001&quot;)uni_graph.expand(bruce, depth=1, direction='any')```Graph expansion on an object adds a `_relations` dictionary that contains all the relations for the object according to the expansion criteria:```pythonbruce._relations# Returns:{'resides_in': [&lt;Relation(_key=4205290, _from=teachers/T001, _to=areas/Gotham)&gt;],'specializes_in': [&lt;SpecializesIn(_key=4205114, expertise_level=medium, _from=teachers/T001, _to=subjects/ITP101)&gt;,    &lt;SpecializesIn(_key=4205271, expertise_level=expert, _from=teachers/T001, _to=subjects/CS102)&gt;,    &lt;SpecializesIn(_key=4205268, expertise_level=medium, _from=teachers/T001, _to=subjects/CSOOP02)&gt;],'teaches': [&lt;Relation(_key=4205280, _from=teachers/T001, _to=subjects/CSOOP02)&gt;]}```We can use _from and _to of a relation object to access the id's for both sides of the link. We also have _object_from and _object_to to access the objects on both sides, for example:```pythonbruce._relations['resides_in'][0]._object_from.name# 'Bruce Wayne'bruce._relations['resides_in'][0]._object_to._key# 'Gotham'```There is also a special attribute called `_next` that allows accessing the other side of the relationship irrespective of the relationship direction. For example, for outbound relationships the `_object_from` contains the source object while for inbound_relationships `_object_to` contains the source object. But if we're only interested in traversal of the graph then it's more useful at times to access the other side of the relationship w.r.t the current object irrespective of it's direction:```pythonbruce._relations['resides_in'][0]._next._key# 'Gotham'```Let's expand the bruce object to 2 levels and see `_next` in more action:```pythonuni_graph.expand(bruce, depth=2)# All relations of the area where bruce resides inbruce._relations['resides_in'][0]._object_to._relations# -&gt; {'resides_in': [&lt;Relation(_key=4205300, _from=students/S1001, _to=areas/Gotham)&gt;]}# Name of the student that resides in the same area as brucebruce._relations['resides_in'][0]._object_to._relations['resides_in'][0]._object_from.name# 'John Wayne'# The same action using _next without worrying about directionbruce._relations['resides_in'][0]._next._relations['resides_in'][0]._next.name# 'John Wayne'# Get names of all people that reside in the same area and Bruce Wayne[p._next.name for p in bruce._relations['resides_in'][0]._next._relations['resides_in']]# ['John Wayne']```## Inheritance MappingFor inheritance mapping, **arango_orm** offers you two ways to define it.### 1. Discriminator field/mapping:Discriminator field/mapping are defined at entity level:```pythonclass Vehicle(Collection):    __collection__ = &quot;vehicle&quot;    _inheritance_field = &quot;discr&quot;    _inheritance_mapping = {        'Bike': 'moto',        'Truck': 'truck'    }    _key = String()    brand = String()    model = String()    # discr field match what you defined in _inheritance_field    # the field type depends on the values of your _inheritance_mapping    discr = String(required=True)class Bike(Vehicle):    motor_size = Float()class Truck(Vehicle):    traction_power = Float()```### 2. Inheritance mapping resolver:The `inheritance_mapping_resolver` is a function defined at graph level; it allows you to make either a simple teston a discriminator field, or complex inference```pythonclass OwnershipGraph2(Graph):    __graph__ = &quot;ownership_graph&quot;    graph_connections = [        GraphConnection(Owner2, Own2, Vehicle2)    ]    def inheritance_mapping_resolver(self, col_name: str, doc_dict: dict = {}):        if col_name == 'vehicle':            if 'traction_power' in doc_dict:                return Truck2            else:                return Bike2        return self.vertices[col_name]```## Graph Traversal Using AQLThe graph module also supports traversals using AQL, the results are converted to objects and have thesame structure as graph.expand method:```pythonobj = uni_graph.aql(&quot;FOR v, e, p IN 1..2 INBOUND 'areas/Gotham' GRAPH 'university_graph' RETURN p&quot;)print(obj._key)# Gothamgotham_residents = [rel._next.name for rel in obj._relations['resides_in']]print(gotham_residents)# ['Bruce Wayne', 'John Wayne']```# For Developers## Running the Test Cases```bashARANGO_HOSTS=&quot;http://127.0.0.1:8529&quot; ARANGO_USERNAME=root ARANGO_PASSWORD=toor ARANGO_DATABASE=test_db pytest tests```</longdescription>
</pkgmetadata>