<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================pytest-tornasync================.. image:: https://travis-ci.org/eukaryote/pytest-tornasync.svg?branch=master    :target: https://travis-ci.org/eukaryote/pytest-tornasyncA simple pytest plugin that provides some helpful fixtures for testingTornado (version 5.0 or newer)  apps and easy handling of plain(undecoratored) native coroutine tests (Python 3.5+).Why another Tornado pytest plugin when the excellent ``pytest-tornado`` alreadyexists? The main reason is that I didn't want to have to decorate every testcoroutine with ``@pytest.mark.gen_test``. This plugin doesn't have anythinglike ``gen_test``. Defining a test with ``async def`` and a name thatbegins with ``test_`` is all that is required.Installation------------Install using pip, which must be run with Python 3.5+:.. code-block:: sh    pip install pytest-tornasyncUsage-----Define an ``app`` fixture:.. code-block:: python    import pytest    @pytest.fixture    def app():        import yourapp        return yourapp.make_app()  # a tornado.web.ApplicationCreate tests as native coroutines using Python 3.5+ ``async def``:.. code-block:: python    async def test_app(http_server_client):        resp = await http_server_client.fetch('/')        assert resp.code == 200        # ...Fixtures--------When the plugin is installed, then ``pytest --fixtures`` will showthe fixtures that are available:http_server_port    Port used by `http_server`.http_server    Start a tornado HTTP server that listens on all available interfaces.    You must create an `app` fixture, which returns    the `tornado.web.Application` to be tested.    Raises:    FixtureLookupError: tornado application fixture not foundhttp_server_client    Create an asynchronous HTTP client that can fetch from `http_server`.http_client    Create an asynchronous HTTP client that can fetch from anywhere.io_loop    Create a new `tornado.ioloop.IOLoop` for each test case.Examples--------.. code-block:: python    import time    import tornado.web    import tornado.gen    import pytest    class MainHandler(tornado.web.RequestHandler):        def get(self):            self.write(&quot;Hello, world!&quot;)    @pytest.fixture    def app():        return tornado.web.Application([(r&quot;/&quot;, MainHandler)])    async def test_http_server_client(http_server_client):        # http_server_client fetches from the `app` fixture and takes path        resp = await http_server_client.fetch('/')        assert resp.code == 200        assert resp.body == b&quot;Hello, world!&quot;    async def test_http_client(http_client):        # http_client fetches from anywhere and takes full URL        resp = await http_client.fetch('http://httpbin.org/status/204')        assert resp.code == 204    async def example_coroutine(period):        await tornado.gen.sleep(period)    async def test_example():        # no fixtures needed        period = 1.0        start = time.time()        await example_coroutine(period)        elapsed = time.time() - start        assert elapsed &gt;= periodChanges=======0.6.0 (2018-11-19)------------------ - minor updates to avoid a pytest warning under pytest 4 - repo switch to using a 'src' dir0.5.0 (2018-05-28)------------------ - updated to work with Tornado 5, which is now the minimum required version - require pytest &gt;= 3.0 - the `io_loop` fixture always refers to a `tornado.ioloop.IOLoop instance` now - the `io_loop_asyncio` and `io_loop_tornado` fixtures have been removed, since   now that Tornado 5 always uses asyncio under Python 3, there would be no   difference between the two fixtures, so `io_loop` is all that is needed - tox tests now test more versions of Tornado (5.0.* and latest 5.*),   Pytest (3.0.* and latest 3.*), and Python (3.5, 3.6, 3.7, and pypy3).</longdescription>
</pkgmetadata>