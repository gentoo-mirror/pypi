<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### graphene-gis[![CircleCI](https://dl.circleci.com/status-badge/img/gh/EverWinter23/graphene-gis/tree/master.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/EverWinter23/graphene-gis/tree/master)### INSTALLATION`django==2.2` is supported. Install the `graphene-gis` with pip:```bash$ pip install graphene-gis```Make sure that you have appropriate driver to interact with postgis-- `psycopg2` or`psycopg2-binary`. The binary package is a practical choice for development and testingbut in production it is advised to use the package built from sources. More info [here](https://www.psycopg.org/articles/2018/02/08/psycopg-274-released/).Add it to your `INSTALLED_APPS` in `settings.py`:```pythonINSTALLED_APPS = [    ...    'graphene_gis',]```### USAGEHi, check this-&gt; [geoql](https://github.com/EverWinter23/geoql) project out,it demonstrates usage-- such as querying, mutations using `WKT` and `geojson`.I will be adding more stuff soon such as containerization, interactive UI etc,and more examples that showcases the library. This project provides an insightinto real-world usage of the library, do check it out.This extension can works out of the box with `WKT`, but if you want to use`GeoJSON` for input while mutations, install `rest_framework_gis` alongsideit-- or check out `geoql` sample project.#### QUERY**models.py**```pythonfrom django.contrib.gis.db import modelsclass Place(models.Model):    name = models.CharField(max_length=255)    location = models.PointField()```**schema.py**```pythonfrom graphene_django import DjangoObjectTypefrom graphene_gis.converter import gis_converter  # noqaclass PlaceType(DjangoObjectType):    class Meta:        model = Placeclass Query(graphene.ObjectType):    place = graphene.Field(Place)    def resolve_place(self, info):        return Place(name=&quot;San Andreas&quot;, location=&quot;POINT(34.2 54.3)&quot;)schema = graphene.Schema(query=Query)```**Query**```query {    place {        name        location    }}```**Query Output**```json&quot;place&quot;: {    &quot;name&quot;: &quot;San Andreas&quot;,    &quot;location&quot;: {        &quot;type&quot;: &quot;Point&quot;,        &quot;coordinates&quot;: [34.2, 54.3]    }}```#### MUTATION**schema.py**```pythonclass PointModelType(graphene.ObjectType):    location = graphene.Field(graphene.String, to=scalars.PointScalar())class CreatePointModelType(graphene.Mutation):    point = graphene.Field(PointModelType)    class Arguments:        location = graphene.Argument(scalars.PointScalar)    def mutate(root, info, location):        point = PointModelType(location=location)        return CreatePointModelType(point=point)```**Mutation**```mutation {    createPoint (location: &quot;POINT(3 5)&quot;) {        point {            location        }    }}```**Mutation Output**```json&quot;createPoint&quot;: {    &quot;point&quot;: {        &quot;location&quot;: &quot;{'type': 'Point', 'coordinates': [3.0, 5.0]}&quot;    }}```#### EXTRA STUFFA JSON Converter, so if you're familiar with `graphene`, you know thatit sends `JSONField` as stringified JSON, but with a lot of data, youdont want to parse it in the frontend, I know it goes against having astatic type, but if you're not modifying the data on the frontend, plusyou're using `typescript` which enforces types anyway, it works like acharm.And geojson contains `JSONField` like properties section, and parsingevery node in the frontend is cumbersome if you have ~9000 entries, alsotime consuming.Output without using `json_converter````json{  &quot;data&quot;: {    &quot;vectors&quot;: [      {        &quot;type&quot;: &quot;Feature&quot;,        &quot;properties&quot;: &quot;{\&quot;Name\&quot;: \&quot;Blues\&quot;, \&quot;area\&quot;: 0.0006971253332413299, \&quot;bbox\&quot;: [74.59639001261124, 24.7077612714826, 74.61615129922414, 24.755648349214077], \&quot;perimeter\&quot;: 0.15862406542812008}&quot;,        &quot;geometry&quot;: {          &quot;type&quot;: &quot;Polygon&quot;,          &quot;coordinates&quot;: [...]        }      }    ]  }}```Now if you're working with GeoJSON, you're not working with just one vector,you're probably working with thousands. Voila `json_converter`!!! Now you canplot it directly, if you store it in such a way! I won't go into how to structurethe model, but this is fairly accurate description of `GeoJSON`, and anyonefamiliar with `django` will be able to reproduce it without issues.```json{  &quot;data&quot;: {    &quot;allVectors&quot;: [      {        &quot;type&quot;: &quot;Feature&quot;,        &quot;properties&quot;: {          &quot;Name&quot;: &quot;Blues&quot;,          &quot;area&quot;: 0.0006971253332413299,          &quot;bbox&quot;: [            74.59639001261124,            24.7077612714826,            74.61615129922414,            24.755648349214077          ],          &quot;perimeter&quot;: 0.15862406542812008        },        &quot;geometry&quot;: {          &quot;type&quot;: &quot;Polygon&quot;,          &quot;coordinates&quot;: [...]        }      }    ]  }}```### AUTHORRishabh Mehta &lt;eternal.blizzard23@gmail.com&gt;If you have any issues or queries regarding acadbot, please don'thesitate to email the **@author**. I have a lot of free time.I forget stuff, this section is for anyone who wants to build the package.```bash$ python setup.py sdist$ twine upload dist/*```### UPDATE- [x] Targeting graphene-v3 update by March'22 -&gt; [MR](https://github.com/EverWinter23/graphene-gis/pull/16)- Install the pre-release using:- [ ] Django 4.2 LTS support by May'23  `pip install graphene-gis==0.0.8b0`### LICENSE [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)This code falls under the MIT license which permits the reuse of the proprietary software provided that all copies of the licensed software include a copy of the MIT License terms and the copyright notice. Go crazy!</longdescription>
</pkgmetadata>