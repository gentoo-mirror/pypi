<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># py-exceptions [![PyPI version](https://badge.fury.io/py/py-exceptions.svg)](https://badge.fury.io/py/py-exceptions)## *A simple python exception reporter*### DescriptionThis library provides great stacktrace and web request information like Django does It can save it to html, return htmlto your code or even response in AWS lambda formatThe library nicely covers all your secret variables and request data in its report### Screenshots![Beautiful image](https://raw.githubusercontent.com/potatohd404/py-exceptions/master/images/demo.png)![Another beautiful image](https://raw.githubusercontent.com/potatohd404/py-exceptions/master/images/demo2.png)## Quickstart### Installation```shpip install py-exception```### Simple exampleAdd decorator to function```pythonfrom pyexceptions import handle_exceptionsdef divide(a, b):    return a / b@handle_exceptionsdef main():    i = 5    j = 0    c = divide(i, j)    print(c)if __name__ == '__main__':    main()```You can also override folder for exception reports```pythonfrom pyexceptions import handle_exceptionsdef divide(a, b):    return a / b@handle_exceptions(exceptions_folder=f'./SomeFolderPath')def main():    i = 5    j = 0    c = divide(i, j)    print(c)if __name__ == '__main__':    main()```### AWS Lambda exampleIt is hard to determine what's went wrong when you are using AWS lambda. So you can use the example not only to get fullstacktrace but to get lambda event and context information:```pythonfrom pyexceptions import handle_exceptions@handle_exceptions(is_lambda=True)def lambda_handler(event, context):    message = f&quot;Hello {event['first_name']} {event['last_name']}!&quot;    return {        'message': message    }```### Exclude from stacktraceThere may be situations when you don't want to see part of stacktraceSo if your application looks like this:```pythonfrom pyexceptions import handle_exceptionsdef divide(a, b):    return a / bdef real_main():    i = 5    j = 0    c = divide(i, j)    print(c)def wrapper():    real_main()@handle_exceptions(exclude = 3)def main():    wrapper()if __name__ == '__main__':    main()```and you want to exclude all stacktrace from main to wrapperyou need to pass `file_name.function_name` as exclude argument### Other functionsYou can also want to use these functions:Make function that returns HTML and don't save the result:```pythonfrom pyexceptions import handle_exceptions@handle_exceptions(save=False)def main():    ...```Make function return production html:```pythonfrom pyexceptions import handle_exceptions@handle_exceptions(production=True)def main():    ...```![Beautiful image](https://raw.githubusercontent.com/potatohd404/py-exceptions/master/images/demo3.png)Or you may want to write your own logic To do so you need to import the ExceptionHandler class```pythonfrom pyexceptions import ExceptionHandler```That's how it looks like:```pythonclass ExceptionHandler:    &quot;&quot;&quot;Organize and coordinate reporting on exceptions.&quot;&quot;&quot;    def __init__(self, lambda_event: dict = None, context: object = None, exclude: int = 1, production: bool = False):        &quot;&quot;&quot;Exception reporter initializer        Args:            lambda_event (dict, optional): AWS lambda event. Defaults to None.            context (object, optional): AWS lambda context. Defaults to None.            exclude (int, optional): Determines how many frames of traceback to exclude. Defaults None.            production (bool, optional): Determines if handler should be enabled. Defaults False.        &quot;&quot;&quot;        self.__reporter = ExceptionReporter(lambda_event=lambda_event, context=context, exclude=exclude, # noqa                                            production=production)    def get_traceback_html(self):        &quot;&quot;&quot;Return HTML version of debug 500 HTTP error page.&quot;&quot;&quot;        return self.__reporter.get_traceback_html()    def get_traceback_lambda(self):        &quot;&quot;&quot;Return AWS lambda version of debug 500 HTTP error page.&quot;&quot;&quot;        return self.__reporter.get_lambda_response()```## AttributionThis implementation draws upon work from:- [Django](https://github.com/django/django)- [vercel-python-wsgi](https://github.com/ardnt/vercel-python-wsgi)</longdescription>
</pkgmetadata>