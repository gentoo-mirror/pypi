<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## UNOFFICIAL Weaviate demo data uploaderThis is an educational project that aims to make it easy to upload demo data to your instance of [Weaviate](https://weaviate.io). The target audience is developers learning how to use Weaviate.## Usage```shellpip install weaviate-demo-datasets```All datasets are based on the `Dataset` superclass, which includes a number of built-in methods to make it easier to work with it.Each dataset includes a default vectorizer configuration for convenience, which can be:- viewed via the `.get_class_definitions` method and- changed via the `.set_vectorizer` method.The target Weaviate instance must include the specified vectorizer module.Once you instantiate a dataset, you can upload it to Weaviate with the following:```pythonimport weaviate_datasetsdataset = weaviate_datasets.JeopardyQuestions10k()  # Instantiate datasetdataset.upload_dataset(client)  # Add class to schema &amp; upload objects (uses batch uploads by default)```Where `client` is the instantiated `weaviate.Client` object, such as:```pythonimport weaviateimport osimport jsonwv_url = &quot;https://some-endpoint.weaviate.network&quot;api_key = os.environ.get(&quot;OPENAI_API_KEY&quot;)# If authentication required (e.g. using WCS)auth = weaviate.AuthClientPassword(    username=os.environ.get(&quot;WCS_USER&quot;),    password=os.environ.get(&quot;WCS_PASS&quot;),)client = weaviate.Client(    url=wv_url,    auth_client_secret=auth,  # If authentication required    additional_headers={&quot;X-OpenAI-Api-Key&quot;: api_key},  # If using OpenAI inference)```### Built-in methods- `.add_to_schema(client)` - add defined classes to schema; returns status &amp; any classes already present- `.upload_objects(client, batch_size)` - adds objects; must specify batch size- `.upload_dataset(client)` - runs `.add_to_schema` and `.upload_objects`; default batch size 100- `.get_class_definitions()`: See the schema definition to be added- `.get_class_names()`: See class names in the dataset- `.get_sample()`: See a sample data object- `.classes_in_schema(client)`: Check whether each class is already in the Weaviate schema- `.delete_existing_dataset_classes(client)`: If dataset classes are already in the Weaviate instance, delete them from the Weaviate instance.- `.set_vectorizer(vectorizer_name, module_config)`: Set the vectorizer and corresponding module configuration for the dataset. Datasets come pre-configured with a vectorizer &amp; module configuration.## Available classes### Not including vectors- WikiArticles (A handful of Wikipedia summaries)- WineReviews (50 wine reviews)### Including vectors- WikiCities (500 large cities + Wikipedia summaries, vectorized with OpenAI `text-embedding-ada-002`)- JeopardyQuestions1k (1,000 Jeopardy questions &amp; answers, vectorized with OpenAI `text-embedding-ada-002`)- JeopardyQuestions10k (10,000 Jeopardy questions &amp; answers, vectorized with OpenAI `text-embedding-ada-002`)## Data sourceshttps://www.kaggle.com/datasets/zynicide/wine-reviewshttps://www.kaggle.com/datasets/tunguz/200000-jeopardy-questions## Source codehttps://github.com/databyjp/wv_demo_uploader</longdescription>
</pkgmetadata>