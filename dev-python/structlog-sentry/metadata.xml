<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># structlog-sentry| What          | Where                                         || ------------- | --------------------------------------------- || Documentation | &lt;https://github.com/kiwicom/structlog-sentry&gt; || Maintainer    | @kiwicom/platform                             |Based on &lt;https://gist.github.com/hynek/a1f3f92d57071ebc5b91&gt;## InstallationInstall the package with [pip](https://pip.pypa.io/):```pip install structlog-sentry```## UsageThis module is intended to be used with `structlog` like this:```pythonimport sentry_sdkimport structlogfrom structlog_sentry import SentryProcessorsentry_sdk.init()  # pass dsn in argument or via SENTRY_DSN env variablestructlog.configure(    processors=[        structlog.stdlib.add_logger_name,  # optional, must be placed before SentryProcessor()        structlog.stdlib.add_log_level,  # required before SentryProcessor()        SentryProcessor(event_level=logging.ERROR),    ],    logger_factory=structlog.stdlib.LoggerFactory(),    wrapper_class=structlog.stdlib.BoundLogger,)log = structlog.get_logger()```Do not forget to add the `structlog.stdlib.add_log_level` and optionally the`structlog.stdlib.add_logger_name` processors before `SentryProcessor`. The`SentryProcessor` class takes the following arguments:- `level` Events of this or higher levels will be reported as Sentry  breadcrumbs. Dfault is `logging.INFO`.- `event_level` Events of this or higher levels will be reported to Sentry  as events. Default is `logging.WARNING`.- `active` A flag to make this processor enabled/disabled.- `as_context` Send `event_dict` as extra info to Sentry. Default is `True`.- `tag_keys` A list of keys. If any if these keys appear in `event_dict`,  the key and its corresponding value in `event_dict` will be used as Sentry  event tags. use `&quot;__all__&quot;` to report all key/value pairs of event as tags.- `ignore_loggers` A list of logger names to ignore any events from.- `verbose` Report the action taken by the logger in the `event_dict`.  Default is `False`.- `hub` Optionally specify `sentry_sdk.Hub`.Now events are automatically captured by Sentry with `log.error()`:```pythontry:    1/0except ZeroDivisionError:    log.error(&quot;zero divsiion&quot;)try:    resp = requests.get(f&quot;https://api.example.com/users/{user_id}/&quot;)    resp.raise_for_status()except RequestException:    log.error(&quot;request error&quot;, user_id=user_id)```This won't automatically collect `sys.exc_info()` along with the message, if you wantto enable this behavior, just pass `exc_info=True`.When you want to use structlog's built-in[`format_exc_info`](http://www.structlog.org/en/stable/api.html#structlog.processors.format_exc_info)processor, make that the `SentryProcessor` comes *before* `format_exc_info`!Otherwise, the `SentryProcessor` won't have an `exc_info` to work with, becauseit's removed from the event by `format_exc_info`.Logging calls with no `sys.exc_info()` are also automatically captured by Sentryeither as breadcrumbs (if configured by the `level` argument) or as events:```pythonlog.info(&quot;info message&quot;, scope=&quot;accounts&quot;)log.warning(&quot;warning message&quot;, scope=&quot;invoices&quot;)log.error(&quot;error message&quot;, scope=&quot;products&quot;)```If you do not want to forward a specific logs into Sentry, you can pass the`sentry_skip=True` optional argument to logger methods, like this:```pythonlog.error(&quot;error message&quot;, sentry_skip=True)```### Sentry TagsYou can set some or all of key/value pairs of structlog `event_dict` as sentry `tags`:```pythonstructlog.configure(    processors=[        structlog.stdlib.add_logger_name,        structlog.stdlib.add_log_level,        SentryProcessor(level=logging.ERROR, tag_keys=[&quot;city&quot;, &quot;timezone&quot;]),    ],...)log.error(&quot;error message&quot;, city=&quot;Tehran&quot;, timezone=&quot;UTC+3:30&quot;, movie_title=&quot;Some title&quot;)```this will report the error and the sentry event will have **city** and **timezone** tags.If you want to have all event data as tags, create the `SentryProcessor` with `tag_keys=&quot;__all__&quot;`.```pythonstructlog.configure(    processors=[        structlog.stdlib.add_logger_name,        structlog.stdlib.add_log_level,        SentryProcessor(level=logging.ERROR, tag_keys=&quot;__all__&quot;),    ],...)```### Skip ContextBy default `SentryProcessor` will send `event_dict` key/value pairs as contextual info to sentry.Sometimes you may want to skip this, specially when sending the `event_dict` as sentry tags:```pythonstructlog.configure(    processors=[        structlog.stdlib.add_logger_name,        structlog.stdlib.add_log_level,        SentryProcessor(level=logging.ERROR, as_context=False, tag_keys=&quot;__all__&quot;),    ],...)```### Ignore specific loggersIf you want to ignore specific loggers from being processed by the `SentryProcessor` just passa list of loggers when instantiating the processor:```pythonstructlog.configure(    processors=[        structlog.stdlib.add_logger_name,        structlog.stdlib.add_log_level,        SentryProcessor(level=logging.ERROR, ignore_loggers=[&quot;some.logger&quot;]),    ],...)```### Logging as JSONIf you want to configure `structlog` to format the output as **JSON** (maybe for[elk-stack](https://www.elastic.co/elk-stack)) you have to disable standard loggingintegration in Sentry SDK by passing the `LoggingIntegration(event_level=None, level=None)`instance to `sentry_sdk.init` method. This prevents duplication of an event reported to sentry:```pythonfrom sentry_sdk.integrations.logging import LoggingIntegrationINTEGRATIONS = [    # ... other integrations    LoggingIntegration(event_level=None, level=None),]sentry_sdk.init(integrations=INTEGRATIONS)```This integration tells `sentry_sdk` to *ignore* standard logging and captures the events manually.## TestingTo run all tests:```tox```## ContributingCreate a merge request and tag @kiwicom/platform  for review.</longdescription>
</pkgmetadata>