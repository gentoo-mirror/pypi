<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># A Python library for analysing cmdstanpy outputThis is a collection of functions for analysing output of [cmdstanpy](https://github.com/stan-dev/cmdstanpy) library. The main idea is to do a quick data analysis by calling a single function that makes:* traceplots of samples,* text and plots of the summaries of model parameters,* histograms and pair plots of posterior distributions of parameters.&lt;img src='https://github.com/evgenyneu/tarpan/raw/master/images/tarpan.jpg' alt='Picture of Tarpan'&gt;*The only known illustration of a tarpan made from life, depicting a five month old colt (Borisov, 1841). Source: [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Tarpan.png).*## SetupFirst, run:```pip install tarpan```Finally, install [cmdstan](https://github.com/stan-dev/cmdstan) by running:```install_cmdstan -v 2.21.0```## Complete analysis: `save_analysis`This is the main function of the library that saves summariesand trace/pair/tree plots in[model_info](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a01_simple/model_info/analyse) directory.The function is useful when you want to generate all types of summariesand plots at once.```Pythonfrom tarpan.cmdstanpy.analyse import save_analysismodel = CmdStanModel(stan_file=&quot;your_model.stan&quot;)fit = model.sample(data=your_data)save_analysis(fit, param_names=['mu', 'sigma'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a01_simple)If you don't need everything, you can call individualfunctions described below to make just one type of plot or a summary.### Analysis without cmdstanpyHere is how to analyse values from Pandas' data frame columns:```Pythonfrom tarpan.shared.analyse import save_analysissave_analysis(df, param_names=['mu', 'sigma'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a02_no_cmdstanpy)## Summary: `save_summary`Creates a summary of parameter distributions and saves it in text and CSV files.```Pythonfrom tarpan.cmdstanpy.summary import save_summarymodel = CmdStanModel(stan_file=&quot;your_model.stan&quot;)fit = model.sample(data=your_data)save_summary(fit, param_names=['mu', 'tau', 'eta.1'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_summary/a01_save_summary)* Call `print_summary` to print summary to console instead of saving to a file.The text summary format is such that the text can be pasted into Github/Gitlab/Bitbucket's Markdown file, like this:| Name   |   Mean |   Std |   Mode |    + |    - |   68CI- |   68CI+ |   95CI- |   95CI+ |   N_Eff |   R_hat ||:-------|-------:|------:|-------:|-----:|-----:|--------:|--------:|--------:|--------:|--------:|--------:|| mu     |   8.05 |  5.12 |   7.53 | 4.63 | 4.59 |    2.93 |   12.16 |   -1.84 |   18.74 |    1540 |    1.00 || tau    |   6.41 |  5.72 |   2.36 | 5.41 | 2.35 |    0.00 |    7.76 |    0.00 |   17.07 |    1175 |    1.00 || eta.1  |   0.39 |  0.92 |   0.60 | 0.71 | 1.13 |   -0.53 |    1.31 |   -1.48 |    2.19 |    3505 |    1.00 |### Summary columns*  **Name, Mean, Std** are the name of the parameter, its mean and standard deviation.*  **68CI-, 68CI+, 95CI-, 95CI+** are the 68% and 95% HPDIs (highest posterior density intervals). These values [are configurable](https://github.com/evgenyneu/tarpan/blob/master/docs/hpdi.md).* **Mode, +, -** is a mode of distribution with upper and lower uncertainties, which are calculated as distances to 68% HPDI.* **N_Eff** is Stan's number of effective samples, the higher the better.* **R_hat** is a Stan's parameter representing the quality of the sampling. This value needs to be around 1.00. After generating a model I usually immediately look at this R_hat column to see if the sampling was good.### Summary without cmdstanpyHere is how to make summary of values from Pandas' data frame columns:```Pythonfrom tarpan.shared.summary import save_summarysave_summary(df, param_names=['mu', 'sigma'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_summary/a03_no_cmdstanpy)## Tree plot: `save_tree_plot`This function shows exactly the same information as `save_summary`, but inthe form a plot. The markers are the modes of the distributions, and the two error barsindicate 68% and 95% HPDIs (highest posterior density intervals).```Pythonfrom tarpan.cmdstanpy.tree_plot import save_tree_plotmodel = CmdStanModel(stan_file=&quot;your_model.stan&quot;)fit = model.sample(data=your_data)save_tree_plot([fit], param_names=['mu', 'sigma'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a01_single_fit)&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_tree_plot/a01_single_fit/model_info/tree_plot/summary.png&quot; width=&quot;600&quot; alt=&quot;Tree plot&quot;&gt;### Tree plot without cmdstanpyOne can make a tree plot by supplying a Panda's data frame that shows summaries of values for the frame's columns:```Pythonfrom tarpan.shared.tree_plot import save_tree_plotsave_tree_plot([df], param_names=['mu', 'sigma'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a04_no_cmdstanpy)### Comparing multiple models on a tree plotSupply multiple fits in order to compare parameters from multiple models.```Pythonfrom tarpan.cmdstanpy.tree_plot import save_tree_plotfrom tarpan.shared.tree_plot import TreePlotParams# Sample from two modelsmodel1 = CmdStanModel(stan_file=&quot;your_model1.stan&quot;)fit1 = model1.sample(data=your_data)model2 = CmdStanModel(stan_file=&quot;your_model2.stan&quot;)fit2 = model2.sample(data=your_data)# Supply legend labels (optional)tree_params = TreePlotParams()tree_params.labels = [&quot;Model 1&quot;, &quot;Model 2&quot;, &quot;Exact&quot;]data = [{&quot;mu&quot;: 2.2, &quot;tau&quot;: 1.3}]  # Add extra markers (optional)save_tree_plot([fit1, fit2], extra_values=data, param_names=['mu', 'tau'],               tree_params=tree_params)```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a02_compare_fits)&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_tree_plot/a02_compare_fits/model_info/tree_plot_compare/summary.png&quot; width=&quot;600&quot; alt=&quot;Tree plot with multiple models&quot;&gt;## Comparing parameters of multiple modelsUse `save_compare_parameters` function to compare parameters between different models:|                      |                  mu |                 tau ||---------------------:|--------------------:|--------------------:||              Model 1 | 7.53 (+4.63, -4.59) | 2.36 (+5.41, -2.35) ||              Model 2 | 8.87 (+9.05, -9.50) | 3.64 (+8.14, -3.61) |This table is a numerical version of the plot created by `save_tree_plot`. The values here are modes of the distributions and uncertainties are distances to 68% HPD intervals.```Pythonfrom tarpan.cmdstanpy.compare_parameters import save_compare_parametersextra = [{&quot;mu&quot;: 2.2, &quot;theta&quot;: 1.3}]  # Add extra values (optional)save_compare_parameters([fit1, fit2], labels=['Model 1', 'Model 2', 'Extra'],                        extra_values=extra,                        param_names=[&quot;mu&quot;, &quot;theta&quot;])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare_parameters/a01_save_compare_parameters)### Use `save_compare_parameters` without cmdstanpyHere is how to compare parameters using Pandas data frames df1 and df2:```Pythonfrom tarpan.shared.compare_parameters import save_compare_parametersextra = [{&quot;mu&quot;: 2.2, &quot;theta&quot;: 1.3}]  # Add extra values (optional)save_compare_parameters([df1, df2], labels=['Model 1', 'Model 2', 'Extra'],                        extra_values=extra,                        param_names=[&quot;mu&quot;, &quot;theta&quot;])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare_parameters/a02_no_cmdstanpy)## Trace plot: `save_traceplot`The plot shows the values of parameters samples.Different colors correspond to samples form different chains. Ideally,the lines of different colors on the left plots are well mixed, and theright plot is fairly uniform.```Pythonfrom tarpan.cmdstanpy.traceplot import save_traceplotmodel = CmdStanModel(stan_file=&quot;your_model.stan&quot;)fit = model.sample(data=your_data)save_traceplot(fit, param_names=['mu', 'tau', 'eta.1'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_traceplot/a01_save_traceplot)&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_traceplot/a01_save_traceplot/model_info/traceplot/traceplot_01.jpg&quot; width=&quot;900&quot; alt=&quot;Traceplot&quot;&gt;## Pair plot: `save_pair_plot`The plot helps to see correlations between parameters and spot funnelshaped distributions that can result in sampling problems.```Pythonfrom tarpan.cmdstanpy.pair_plot import save_pair_plotmodel = CmdStanModel(stan_file=&quot;your_model.stan&quot;)fit = model.sample(data=your_data)save_pair_plot(fit, param_names=['mu', 'tau', 'eta.1'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_pair_plot/a01_pair_plot)&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_pair_plot/a01_pair_plot/model_info/pair_plot/pair_plot.jpg&quot; width=&quot;600&quot; alt=&quot;Pair plot&quot;&gt;### Pair plot without cmdstanpyHere is how to make a pair plot of values from Pandas' data frame columns:```Pythonfrom tarpan.shared.pair_plot import save_pair_plotsave_pair_plot(df, param_names=['mu', 'sigma'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_pair_plot/a02_no_cmdstanpy)## Histogram: `save_histogram`Show histograms of parameter distributions.```Pythonfrom tarpan.cmdstanpy.histogram import save_histogrammodel = CmdStanModel(stan_file=&quot;your_model.stan&quot;)fit = model.sample(data=your_data)save_histogram(fit, param_names=['mu', 'tau', 'eta.1', 'theta.1'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_histogram/a01_save_histogram)&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_histogram/a01_save_histogram/model_info/histogram/histogram_01.jpg&quot; width=&quot;900&quot; alt=&quot;Histogram&quot;&gt;### Histogram without cmdstanpyHere is how to make histograms of values from Pandas' data frame columns:```Pythonfrom tarpan.shared.histogram import save_histogramsave_histogram(df, param_names=['mu', 'sigma'])```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_histogram/a02_no_cmdstanpy)## Comparing modelsRun `save_compare` to compare multiple models using WAIC and PSIS methods in order to see which models are more compatible with the data.```pythonfrom tarpan.cmdstanpy.compare import save_comparemodel1 = CmdStanModel(stan_file=&quot;your_model1.stan&quot;)fit1 = model1.sample(data=your_data)model2 = CmdStanModel(stan_file=&quot;your_model2.stan&quot;)fit2 = model2.sample(data=your_data)models = {    &quot;Model&quot;: fit1,    &quot;Another model&quot;: fit2}save_compare(models=models, lpd_column_name=&quot;lpd_pointwise&quot;)```Here the `lpd_column_name` parameter takes the name of the array variable from the [generated quantities](docs/examples/save_compare/a01_compare/stan_model/height1_intercept.stan) block that contains log probability densities of all data points.* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare/a01_compare)### WAIC and PSIS plotsThe `save_compare` function will create the plots showing WAIC and PSIS values (red round markers). The lower WAIC and PSIS values mean the model is more compatible with the data. The blue triangle marker show the difference between the model and the best model. The error bars correspond to standard errors.&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_compare/a01_compare/model_info/height/compare_waic.png&quot; width=&quot;600&quot; alt=&quot;Compare models with WAIC&quot;&gt;&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_compare/a01_compare/model_info/height/compare_psis.png&quot; width=&quot;600&quot; alt=&quot;Compare models with PSIS&quot;&gt;### Numerical summaries for WAIC and PSISThe `save_compare` function will also create text and csv files which are text versions of the above plots.Summary columns are:* **PSIS/WAIC, SE**: PSIS and WAIC values and their standard errors.* **dPSIS/dWAIC, dSE**: The difference of PSIS and WAIC from the best model (i.e. model with lowest WAIC/PSIS) and the standard error of this difference.* **pWAIC/pPSIS**: the penalty (aka effective number of parameters). The purpose of number isto combat overfitting. Penalties are already included in the WAIC/PSIS numbers, so models with too many parameters will have larger penalties, and therefore, larger WAIC/PSIS values.* **Weight**: Very approximate measure of the relevance of the model, with higher numberscorrespond to models that are more compatible with the data. Since this number is approximate and does not have uncertainty, it's better to use dWAIC/dPSIS with dSE to compare models.* **MaxK**: The maximum value of Pareto K parameter from the observations. If this value is above 0.5, and especially above 0.7, the PSIS/WAIC model comparisons might not be reliable.#### WAIC summary|                  |   WAIC |    SE |   dWAIC |   dSE |   pWAIC |   Weight ||:-----------------|-------:|------:|--------:|------:|--------:|---------:|| Fungus+treatment | 361.48 | 13.36 |         |       |    3.49 |     1.00 || Treatment        | 402.68 | 10.66 |   41.20 |  9.82 |    2.53 |     0.00 || Intercept        | 405.88 | 11.29 |   44.40 | 11.56 |    1.53 |     0.00 |#### PSIS summary|                  |   PSIS |    SE |   dPSIS |   dSE |   pPSIS |   MaxK |   Weight ||:-----------------|-------:|------:|--------:|------:|--------:|-------:|---------:|| Fungus+treatment | 361.48 | 13.36 |         |       |    3.49 |   0.25 |     1.00 || Treatment        | 402.69 | 10.67 |   41.21 |  9.82 |    2.54 |   0.33 |     0.00 || Intercept        | 405.88 | 11.29 |   44.40 | 11.56 |    1.53 |   0.28 |     0.00 |### Plots of Pareto K valuesThe `save_compare` function creates plots of Pareto K values for  data points. Points with Pareto K values higher than 0.7 are highlighted in red, with their indices shown below the markers. The red points are the ones that have large influence on the model. Having points above 0.7 could mean that WAIC and PSIS are failing and their results should be used with caution and large neon coloured disclaimers.&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_compare/a01_compare/model_info/height/pareto_k_divorse.png&quot; width=&quot;600&quot; alt=&quot;Plot of Pareto K values&quot;&gt;## Saving cmdstan samples to diskIt saves a lot of time to sample the model and save the results to disk, sothey can be used on the next run instead of waiting for the sampling again.This can be done with `run` function:```pythonfrom tarpan.cmdstanpy.cache import run# Your function that creates CmdStanModel, runs its `sample` method# and returns the result.## This function must take `output_dir` input parameter and pass it to `sample`.## It may also have any other parameters you wish to pass from `run`.def run_stan(output_dir, other_param):    model = CmdStanModel(stan_file=&quot;my_model.stan&quot;)    fit = model.sample(        data=data,        output_dir=output_dir  # Pass to make CSVs in correct location    )    return fit  # Return the fit# Will run `run_stan` once, save model to disk and read it on next callsfit = run(func=run_stan, other_param=&quot;some data&quot;)```* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/run/a01_run)## Scatter and KDE plotThe `save_scatter_and_kde` function saves a scatter and corresponding KDE (kernel density estimate) plot. The KDE plot takes into account uncertainties of individual values:```pythonfrom tarpan.plot.kde import save_scatter_and_kdevalues1 = [        -0.99, -1.37, -1.38, -1.51, -1.29, -1.34, -1.50, -0.93, -0.83,        -1.46, -1.07, -1.28, -0.73]uncertainties1 = [         0.12,  0.05,  0.11,  0.18,  0.03,  0.19,  0.18,  0.12,  0.19,         0.09,  0.11,  0.16,  0.08]values2 = [        -1.22, -1.15, -0.97, -0.68, -0.37, -0.48, -0.73, -0.61, -1.32,        -0.62, -1.13, -0.65, -0.90, -1.29, -1.19, -0.54, -0.64, -0.45,        -1.21, -0.75, -0.66, -0.71, -0.61, -0.59, -1.07, -0.65, -0.59]uncertainties2 = [         0.13,  0.14,  0.17,  0.07,  0.11,  0.12,  0.23,  0.05,  0.04,         0.30,  0.11,  0.13,  0.16,  0.03,  0.18,  0.20,  0.16,  0.16,         0.11,  0.09,  0.20,  0.10,  0.08,  0.04,  0.04,  0.23,  0.19]save_scatter_and_kde(values=[values1, values2],                     uncertainties=[uncertainties1, uncertainties2],                     title=&quot;Sodium abundances in RGB stars of NGC 288&quot;,                     xlabel=&quot;Sodium abundance [Na/H]&quot;,                     ylabel=[&quot;Star number&quot;, &quot;Probability density&quot;],                     legend_labels=[&quot;AGB&quot;, &quot;RGB&quot;])```&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/images/scatter_kde.png&quot; width=&quot;700&quot; alt=&quot;Scatter-KDE plot&quot;&gt;### `gaussian_kde` functionThe function returns the values for a KDE plot, taking into account uncertainties of individual values:```pythonfrom tarpan.plot.kde import gaussian_kdeimport numpy as npimport matplotlib.pyplot as pltx = np.linspace(0, 1, 100)y = gaussian_kde(x, values, uncert)plt.fill_between(x, y)```## Make posterior-scatter-kde plotThe `save_posterior_scatter_and_kde` function makes a scatter-KDE plotsof the data, same as `save_scatter_and_kde`. In addition, it plotsthe posterior distributions.```pythonfrom tarpan.plot.posterior import save_posterior_scatter_and_kde# Plot one sample from posterior distributiondef model_pdf(x, row):    mu = row['mu.1']    sigma = row['sigma']    return stats.norm.pdf(x, mu, sigma)fig, axes = save_posterior_scatter_and_kde(    fits=[fit1, fit2],  # Two models returned by model.sample function    pdf=model_pdf,  # Function that plot posterior distribution    values=[data1[&quot;y&quot;], data2[&quot;y&quot;]],    uncertainties=[data1[&quot;uncertainties&quot;], data2[&quot;uncertainties&quot;]],    title=&quot;Sodium abundances in RGB stars of NGC 288&quot;,    xlabel=&quot;Sodium abundance [Na/H]&quot;,    ylabel=[&quot;Star number&quot;, &quot;Probability density&quot;],    legend_labels=[&quot;AGB&quot;, &quot;RGB&quot;])```&lt;img src=&quot;https://github.com/evgenyneu/tarpan/raw/master/images/posterior_scatter_pde.png&quot; width=&quot;700&quot; alt=&quot;Posterior-scatter-KDE plot&quot;&gt;* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/posterior/save_posterior_scatter_and_kde/a01_plot)## Common questions* [How to change the widths of HPD intervals?](https://github.com/evgenyneu/tarpan/blob/master/docs/hpdi.md)* [Where are plot/summary files placed and how to change that?](https://github.com/evgenyneu/tarpan/blob/master/docs/file_names.md)## Run unit tests```pytest```## The unlicenseThis work is in [public domain](https://github.com/evgenyneu/tarpan/blob/master/LICENSE).## 🐴🐴🐴This work is dedicated to [Tarpan](https://en.wikipedia.org/wiki/Tarpan), an extinct subspecies of wild horse.Special thanks to Richard McElreath, who wrote [Statistical Rethinking textbook](https://xcelab.net/rm/statistical-rethinking/), as well as [Stan](https://discourse.mc-stan.org) and [arviz](https://github.com/arviz-devs/arviz) people.</longdescription>
</pkgmetadata>