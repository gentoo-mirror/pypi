<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>****TOML****.. image:: https://img.shields.io/pypi/v/toml    :target: https://pypi.org/project/toml/.. image:: https://travis-ci.org/uiri/toml.svg?branch=master    :target: https://travis-ci.org/uiri/toml.. image:: https://img.shields.io/pypi/pyversions/toml.svg    :target: https://pypi.org/project/toml/A Python library for parsing and creating `TOML &lt;https://en.wikipedia.org/wiki/TOML&gt;`_.The module passes `the TOML test suite &lt;https://github.com/BurntSushi/toml-test&gt;`_.See also:* `The TOML Standard &lt;https://github.com/toml-lang/toml&gt;`_* `The currently supported TOML specification &lt;https://github.com/toml-lang/toml/blob/v0.5.0/README.md&gt;`_Installation============To install the latest release on `PyPI &lt;https://pypi.org/project/toml/&gt;`_,simply run:::  pip install tomlOr to install the latest development version, run:::  git clone https://github.com/uiri/toml.git  cd toml  python setup.py installQuick Tutorial==============*toml.loads* takes in a string containing standard TOML-formatted data andreturns a dictionary containing the parsed data... code:: pycon  &gt;&gt;&gt; import toml  &gt;&gt;&gt; toml_string = &quot;&quot;&quot;  ... # This is a TOML document.  ...  ... title = &quot;TOML Example&quot;  ...  ... [owner]  ... name = &quot;Tom Preston-Werner&quot;  ... dob = 1979-05-27T07:32:00-08:00 # First class dates  ...  ... [database]  ... server = &quot;192.168.1.1&quot;  ... ports = [ 8001, 8001, 8002 ]  ... connection_max = 5000  ... enabled = true  ...  ... [servers]  ...  ...   # Indentation (tabs and/or spaces) is allowed but not required  ...   [servers.alpha]  ...   ip = &quot;10.0.0.1&quot;  ...   dc = &quot;eqdc10&quot;  ...  ...   [servers.beta]  ...   ip = &quot;10.0.0.2&quot;  ...   dc = &quot;eqdc10&quot;  ...  ... [clients]  ... data = [ [&quot;gamma&quot;, &quot;delta&quot;], [1, 2] ]  ...  ... # Line breaks are OK when inside arrays  ... hosts = [  ...   &quot;alpha&quot;,  ...   &quot;omega&quot;  ... ]  ... &quot;&quot;&quot;  &gt;&gt;&gt; parsed_toml = toml.loads(toml_string)*toml.dumps* takes a dictionary and returns a string containing thecorresponding TOML-formatted data... code:: pycon  &gt;&gt;&gt; new_toml_string = toml.dumps(parsed_toml)  &gt;&gt;&gt; print(new_toml_string)  title = &quot;TOML Example&quot;  [owner]  name = &quot;Tom Preston-Werner&quot;  dob = 1979-05-27T07:32:00Z  [database]  server = &quot;192.168.1.1&quot;  ports = [ 8001, 8001, 8002,]  connection_max = 5000  enabled = true  [clients]  data = [ [ &quot;gamma&quot;, &quot;delta&quot;,], [ 1, 2,],]  hosts = [ &quot;alpha&quot;, &quot;omega&quot;,]  [servers.alpha]  ip = &quot;10.0.0.1&quot;  dc = &quot;eqdc10&quot;  [servers.beta]  ip = &quot;10.0.0.2&quot;  dc = &quot;eqdc10&quot;*toml.dump* takes a dictionary and a file descriptor and returns a string containing thecorresponding TOML-formatted data... code:: pycon  &gt;&gt;&gt; with open('new_toml_file.toml', 'w') as f:  ...     new_toml_string = toml.dump(parsed_toml, f)  &gt;&gt;&gt; print(new_toml_string)  title = &quot;TOML Example&quot;  [owner]  name = &quot;Tom Preston-Werner&quot;  dob = 1979-05-27T07:32:00Z  [database]  server = &quot;192.168.1.1&quot;  ports = [ 8001, 8001, 8002,]  connection_max = 5000  enabled = true  [clients]  data = [ [ &quot;gamma&quot;, &quot;delta&quot;,], [ 1, 2,],]  hosts = [ &quot;alpha&quot;, &quot;omega&quot;,]  [servers.alpha]  ip = &quot;10.0.0.1&quot;  dc = &quot;eqdc10&quot;  [servers.beta]  ip = &quot;10.0.0.2&quot;  dc = &quot;eqdc10&quot;For more functions, view the API Reference below.Note----For Numpy users, by default the data types ``np.floatX`` will not be translated to floats by toml, but will instead be encoded as strings. To get around this, specify the ``TomlNumpyEncoder`` when saving your data... code:: pycon  &gt;&gt;&gt; import toml  &gt;&gt;&gt; import numpy as np  &gt;&gt;&gt; a = np.arange(0, 10, dtype=np.double)  &gt;&gt;&gt; output = {'a': a}  &gt;&gt;&gt; toml.dumps(output)  'a = [ &quot;0.0&quot;, &quot;1.0&quot;, &quot;2.0&quot;, &quot;3.0&quot;, &quot;4.0&quot;, &quot;5.0&quot;, &quot;6.0&quot;, &quot;7.0&quot;, &quot;8.0&quot;, &quot;9.0&quot;,]\n'  &gt;&gt;&gt; toml.dumps(output, encoder=toml.TomlNumpyEncoder())  'a = [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,]\n'API Reference=============``toml.load(f, _dict=dict)``  Parse a file or a list of files as TOML and return a dictionary.  :Args:    * ``f``: A path to a file, list of filepaths (to be read into single      object) or a file descriptor    * ``_dict``: The class of the dictionary object to be returned  :Returns:    A dictionary (or object ``_dict``) containing parsed TOML data  :Raises:    * ``TypeError``: When ``f`` is an invalid type or is a list containing      invalid types    * ``TomlDecodeError``: When an error occurs while decoding the file(s)``toml.loads(s, _dict=dict)``  Parse a TOML-formatted string to a dictionary.  :Args:    * ``s``: The TOML-formatted string to be parsed    * ``_dict``: Specifies the class of the returned toml dictionary  :Returns:    A dictionary (or object ``_dict``) containing parsed TOML data  :Raises:    * ``TypeError``: When a non-string object is passed    * ``TomlDecodeError``: When an error occurs while decoding the      TOML-formatted string``toml.dump(o, f, encoder=None)``  Write a dictionary to a file containing TOML-formatted data  :Args:    * ``o``: An object to be converted into TOML    * ``f``: A File descriptor where the TOML-formatted output should be stored    * ``encoder``: An instance of ``TomlEncoder`` (or subclass) for encoding the object. If ``None``, will default to ``TomlEncoder``  :Returns:    A string containing the TOML-formatted data corresponding to object ``o``  :Raises:    * ``TypeError``: When anything other than file descriptor is passed``toml.dumps(o, encoder=None)``  Create a TOML-formatted string from an input object  :Args:    * ``o``: An object to be converted into TOML    * ``encoder``: An instance of ``TomlEncoder`` (or subclass) for encoding the object. If ``None``, will default to ``TomlEncoder``  :Returns:    A string containing the TOML-formatted data corresponding to object ``o``Licensing=========This project is released under the terms of the MIT Open Source License. View*LICENSE.txt* for more information.</longdescription>
</pkgmetadata>