<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========================= Python scrypt_ bindings=========================This is a set of Python_ bindings for the scrypt_ key derivationfunction... image:: https://img.shields.io/pypi/v/scrypt.svg    :target: https://pypi.python.org/pypi/scrypt/    :alt: Latest Version  .. image:: https://anaconda.org/conda-forge/scrypt/badges/version.svg       :target: https://anaconda.org/conda-forge/scrypt  .. image:: https://anaconda.org/conda-forge/scrypt/badges/downloads.svg       :target: https://anaconda.org/conda-forge/scrypt.. image:: https://ci.appveyor.com/api/projects/status/h644bjbdawke9vf2?svg=true     :target: https://ci.appveyor.com/project/holger80/py-scrypt.. image:: https://www.travis-ci.com/holgern/py-scrypt.svg?branch=master    :target: https://www.travis-ci.com/holgern/py-scryptScrypt is useful when encrypting password as it is possible to specifya *minimum* amount of time to use when encrypting and decrypting. If,for example, a password takes 0.05 seconds to verify, a user won'tnotice the slight delay when signing in, but doing a brute forcesearch of several billion passwords will take a considerable amount oftime. This is in contrast to more traditional hash functions such asMD5 or the SHA family which can be implemented extremely fast on cheaphardware.Installation============For Debian and Ubuntu, please ensure that the following packages are installed:.. code:: bash    $ sudo apt-get install build-essential libssl-dev python-devFor Fedora and RHEL-derivatives, please ensure that the following packages are installed:.. code:: bash    $ sudo yum install gcc openssl-devel python-develFor OSX, please do the following::    $ brew install openssl    $ export CFLAGS=&quot;-I$(brew --prefix openssl)/include $CFLAGS&quot;    $ export LDFLAGS=&quot;-L$(brew --prefix openssl)/lib $LDFLAGS&quot;For OSX, you can also use the precompiled wheels. They are installed by::    $ pip install scrypt For Windows, please use the precompiled wheels. They are installed by::    $ pip install scryptFor Windows, when the package should be compiled, the development package from https://slproweb.com/products/Win32OpenSSL.html is needed.It needs to be installed to C:\OpenSSL-Win64.You can install py-scrypt from this repository if you want the latestbut possibly non-compiling version::    $ git clone https://github.com/holgern/py-scrypt.git    $ cd py-scrypt    $ python setup.py build    Become superuser (or use virtualenv):    # python setup.py install    Run tests after install:    $ python setup.py testOr you can install the latest release from PyPi::    $ pip install scryptUsers of the Anaconda_ Python distribution can directly obtain pre-builtWindows, Intel Linux or macOS / OSX binaries from the conda-forge channel.This can be done via::    $ conda install -c conda-forge scryptIf you want py-scrypt for your Python 3 environment, just run theabove commands with your Python 3 interpreter. Py-scrypt supports bothPython 2 and 3.From version 0.6.0 (not available on PyPi yet), py-scrypt supportsPyPy as well.Changelog=========0.8.20------* Fix #8 by adding missing gettimeofday.c to MANIFEST.in0.8.19------* Use RtlGenRandom instead of CryptGenRandom on windows (Thanks to https://github.com/veorq/cryptocoding/)* Add check for c:\Program Files\OpenSSL-Win64 and c:\Program Files\OpenSSL-Win320.8.18------* add wheel for python 3.90.8.17------* add_dll_directory for python 3.8 on windows, as importlib.util.find_spec does not search all paths anymore  0.8.16------* Add additional test vector from RFC (thanks to @ChrisMacNaughton)0.8.15------* Fix missing import0.8.14------* fix imp deprecation warning0.8.13------* improve build for conda forge0.8.12------* Add SCRYPT_WINDOWS_LINK_LEGACY_OPENSSL environment variable, when set, openssl 1.0.2 is linked0.8.11------* fix build for conda feedstock0.8.10------* fix typo0.8.9-----* use the static libcrypto_static for windows and openssl 1.1.10.8.8-----* setup.py for windows improved, works with openssl 1.0.2 and 1.1.10.8.7-----* setup.py for windows fixed0.8.6-----* setup.py fixed, scrypt could not be imported in version 0.8.50.8.5-----* MANIFEST.in fixed* scrypt.py moved into own scrypt directory with __init__.py * openssl library path for osx wheel repaired0.8.4-----* __version__ added to scrypt* missing void in sha256.c fixed0.8.3-----* scrypt updated to 1.2.1* Wheels are created for python 3.6Usage=====Fore encryption/decryption, the library exports two functions``encrypt`` and ``decrypt``::    &gt;&gt;&gt; import scrypt    &gt;&gt;&gt; data = scrypt.encrypt('a secret message', 'password', maxtime=0.1) # This will take at least 0.1 seconds    &gt;&gt;&gt; data[:20]    'scrypt\x00\r\x00\x00\x00\x08\x00\x00\x00\x01RX9H'    &gt;&gt;&gt; scrypt.decrypt(data, 'password', maxtime=0.1) # This will also take at least 0.1 seconds    'a secret message'    &gt;&gt;&gt; scrypt.decrypt(data, 'password', maxtime=0.05) # scrypt won't be able to decrypt this data fast enough    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    scrypt.error: decrypting file would take too long    &gt;&gt;&gt; scrypt.decrypt(data, 'wrong password', maxtime=0.1) # scrypt will throw an exception if the password is incorrect    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    scrypt.error: password is incorrectFrom these, one can make a simple password verifier using the followingfunctions::    def hash_password(password, maxtime=0.5, datalength=64):        return scrypt.encrypt(os.urandom(datalength), password, maxtime=maxtime)    def verify_password(hashed_password, guessed_password, maxtime=0.5):        try:            scrypt.decrypt(hashed_password, guessed_password, maxtime)            return True        except scrypt.error:            return FalseBut, if you want output that is deterministic and constant in size,you can use the ``hash`` function::    &gt;&gt;&gt; import scrypt    &gt;&gt;&gt; h1 = scrypt.hash('password', 'random salt')    &gt;&gt;&gt; len(h1)  # The hash will be 64 bytes by default, but is overridable.    64    &gt;&gt;&gt; h1[:10]    '\xfe\x87\xf3hS\tUo\xcd\xc8'    &gt;&gt;&gt; h2 = scrypt.hash('password', 'random salt')    &gt;&gt;&gt; h1 == h2 # The hash function is deterministic    TrueAcknowledgements================Scrypt_ was created by Colin Percival and is licensed as 2-clause BSD.Since scrypt does not normally build as a shared library, I have includedthe source for the currently latest version of the library in thisrepository. When a new version arrives, I will update these sources.`Kelvin Wong`_ on Bitbucket provided changes to make the libraryavailable on Mac OS X 10.6 and earlier, as well as changes to make thelibrary work more like the command-line version of scrypt bydefault. Kelvin also contributed with the unit tests, lots of crossplatform testing and work on the ``hash`` function.Burstaholic_ on Bitbucket provided the necessary changes to makethe library build on Windows.The `python-appveyor-demo`_ repository for setting up automated Windowsbuilds for a multitude of Python versions.License=======This library is licensed under the same license as scrypt; 2-clause BSD... _scrypt: http://www.tarsnap.com/scrypt.html.. _Python: http://python.org.. _Burstaholic: https://bitbucket.org/Burstaholic.. _Kelvin Wong: https://bitbucket.org/kelvinwong_ca.. _python-appveyor-demo: https://github.com/ogrisel/python-appveyor-demo.. _Anaconda: https://www.continuum.io</longdescription>
</pkgmetadata>