<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>OFS is a bucket/object storage library.It provides a common API for storing bitstreams (plus related metadata) in'bucket/object' stores such as:  * S3, Google Storage, Eucalytus, Archive.org  * Filesystem (via pairtree)  * 'REST' Store (see remote/reststore.py - implementation at http://bitbucket.org/pudo/repod/)  * Riak (buggy)  * **add a backend here** - just implement the methods in base.pyWhy use the library:  * Abstraction: write common code but use different storage backends  * More than a filesystem, less than a database - support for metadata as well as bitstreamsRequirements============For all boto-based stores (Google Storage, S3 etc) require boto&gt;=2.0.Example Usage=============(local version - depends on 'pairtree', and 'simplejson')::    &gt;&gt;&gt; from ofs.local import PTOFS    &gt;&gt;&gt; o = PTOFS()    (Equivalent to 'o = PTOFS(storage_dir = &quot;data&quot;, uri_base=&quot;urn:uuid:&quot;, hashing_type=&quot;md5&quot;)')    # Claim a bucket - this will add the bucket to the list of existing ones    &gt;&gt;&gt; uuid_id = o.claim_bucket()    &gt;&gt;&gt; uuid_id    '4aaa43cdf5ba44e2ad25acdbd1cf2f70'    # Choose a bucket name - if it exists, a new UUID one will be formed instead and returned    &gt;&gt;&gt; bucket_id = o.claim_bucket(&quot;foo&quot;)    &gt;&gt;&gt; bucket_id    'foo'    &gt;&gt;&gt; bucket_id = o.claim_bucket(&quot;foo&quot;)    &gt;&gt;&gt; bucket_id    '1bf93208521545879e79c13614cd12f0'    # Store a file:    &gt;&gt;&gt; o.put_stream(bucket_id, &quot;foo.txt&quot;, open(&quot;foo....))    {'_label': 'foo.txt', '_content_length': 10, '_checksum': 'md5:10feda25f8da2e2ebfbe646eea351224', '_last_modified': '2010-08-02T11:37:21', '_creation_date': '2010-08-02T11:37:21'}    # or:    &gt;&gt;&gt; o.put_stream(bucket_id, &quot;foo.txt&quot;, &quot;asidaisdiasjdiajsidjasidji&quot;)    {'_label': 'foo.txt', '_content_length': 10, '_checksum': 'md5:10feda25f8da2e2ebfbe646eea351224', '_last_modified': '2010-08-02T11:37:21', '_creation_date': '2010-08-02T11:37:21'}    # adding a file with some parameters:    &gt;&gt;&gt; o.put_stream(bucket_id, &quot;foooo&quot;, &quot;asidaisdiasjdiajsidjasidji&quot;, params={&quot;original_uri&quot;:&quot;http://....&quot;})    {'_label': 'foooo', 'original_uri': 'http://....', '_last_modified': '2010-08-02T11:39:11', '_checksum': 'md5:3d690d7e0f4479c5a7038b8a4572d0fe', '_creation_date': '2010-08-02T11:39:11', '_content_length': 26}    # Get the underlying URL pointing to a resource    &gt;&gt;&gt; o.get_url(bucket_id, &quot;foo&quot;)      [typical local pairtree response:]   &quot;file:///opt/ofs_store/pairtree_root/1b/f9/32/......./obj/foo&quot;      [typical remote response]   &quot;http://...&quot;   &quot;ftp://...&quot;    # adding to existing metadata:    &gt;&gt;&gt; o.update_metadata(bucket_id, &quot;foooo&quot;, {'foo':'bar'})    {'_label': 'foooo', 'original_uri': 'http://....', '_last_modified': '2010-08-02T11:39:11', '_checksum': 'md5:3d690d7e0f4479c5a7038b8a4572d0fe', '_creation_date': '2010-08-02T11:39:11', '_content_length': 26, 'foo': 'bar'}    # Remove keys    &gt;&gt;&gt; o.remove_metadata_keys(bucket_id, &quot;foooo&quot;, ['foo'])    {'_label': 'foooo', 'original_uri': 'http://....', '_last_modified': '2010-08-02T11:39:11', '_checksum': 'md5:3d690d7e0f4479c5a7038b8a4572d0fe', '_creation_date': '2010-08-02T11:39:11', '_content_length': 26}    # Delete blob    &gt;&gt;&gt; o.exists(bucket_id, &quot;foooo&quot;)    True    &gt;&gt;&gt; o.del_stream(bucket_id, &quot;foooo&quot;)    &gt;&gt;&gt; o.exists(bucket_id, &quot;foooo&quot;)    False    # Iterate through ids for buckets held:    &gt;&gt;&gt; for item in o.list_buckets():    ...   print(item)    ...     447536aa0f1b411089d12399738ede8e    4a726b0a33974480a2a26d34fa0d494d    4aaa43cdf5ba44e2ad25acdbd1cf2f70    .... etc        # Display the labels in a specific bucket:    &gt;&gt;&gt;o.list_labels(&quot;1bf93208521545879e79c13614cd12f0&quot;)    [u'foo.txt']Developer=========Tests use plain unittest but recommend using nose.To run the botostore tests you'll need to copy test.ini.tmpl to test.ini andput in details for a google storage account.Changelog=========v0.4.1: 2011-08-13------------------  * Set checksum (md5) based on etag (botostore backends) if not setv0.4: 2011-04-28----------------  * New authenticate_request method for boto based backends.  * Improved update_medata in botostore (no need to download and re-upload).v0.3: 2011-01-20----------------  * S3Bounce backend (use authorization credentials from CKAN).  * Use setuptools plugins with ofs.backend to allow for 3rd party backends  * ofs_upload commandv0.2: 2010-11-20----------------  * Google Storage support.  * REST storev0.1: 2010-10-14----------------  * Initial implemenation with PairTree and S3</longdescription>
</pkgmetadata>