<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Trailblazer [![Coverage Status][coveralls-image]][coveralls-url]### Monitor the progress of analysis workflows submitted to SLURMTrailblazer is a tool that aims to provide:- Monitoring of processes that require submission to a workflow manager- Display metadata for each analysis within a web based user interface[Here][Trailblazer-UI] you can find a simple web UI for Trailblazer that helps you keep track of the status of multiple runs## InstallationTrailblazer is written in Python 3.11 and is available on the [Python Package Index][pypi] (PyPI).```bashpip install trailblazer```If you would like to install the latest development version:```bashgit clone https://github.com/Clinical-Genomics/trailblazercd trailblazerpip install --editable .```With each push to GitHub your files will be automatically verified using [Black] . If you would like to automatically [Black] format your commits on your local machine:```pre-commit install```## ContributingTrailblazer uses the GitHub flow branching model as described in Atlas [GitHub Flow].## DocumentationHere's a brief documentation. Trailblazer functionality can be accessed from the command line interface (CLI), the monitoring web interface, the supporting REST API, as well as using the Python API.### Command line interface#### Command: `trailblazer init`Setup (or reset) a Trailblazer database. The command will set up all the tables in the database. You can reset an existing database by using the `--reset` option.```shelltrailblazer --database &quot;sqlite:///tb.sqlite3&quot; init --resetDelete existing tables? [analysis, info, job, user] [y/N]: ySuccess! New tables: analysis, info, job, user```#### Command: `trailblazer user`This command can be used both to add a new user to the database (and give them access to the web interface) and view information about an existing user.```shell# add a new usertrailblazer user --name &quot;Paul Anderson&quot; paul.anderson@magnolia.comNew user added: paul.anderson@magnolia.com (2)# check an existing usertrailblazer user paul.anderson@magnolia.com{'created_at': datetime.datetime(2017, 6, 22, 8, 49, 44, 685977), 'google_id': None, 'name': 'Paul Anderson', 'email': 'paul.anderson@magnolia.com', 'avatar': None, 'id': 2}```#### Command: `trailblazer archive-user`This command archives a user in the database (and removes their access to the web interface).```shell# archive a usertrailblazer archive-user paul.anderson@magnolia.comUser archived: paul.anderson@magnolia.com```#### Command: `trailblazer users`This command can be used both to list all users in the database and get a filtered list of users.```shell# list all userstrailblazer usersListing users in database:{'created_at': datetime.datetime(2017, 6, 22, 8, 49, 44, 685977), 'google_id': None, 'name': 'Paul Anderson', 'email': 'paul.anderson@magnolia.com', 'avatar': None, 'id': 2}# list all users named 'Anderson' that has an email with 'magnolia' in ittrailblazer users --name Anderson --email magnoliaListing users in database:{'created_at': datetime.datetime(2017, 6, 22, 8, 49, 44, 685977), 'google_id': None, 'name': 'Paul Anderson', 'email': 'paul.anderson@magnolia.com', 'avatar': None, 'id': 2}```#### Command: `trailblazer log`Logs the status of a run to the supporting database. You need to point to the analysis config of a specific run.```shelltrailblazer log path/to/case/analysis/case_config.yaml```You can point to the same analysis multiple times, Trailblazer will detect if the same analysis has been added before and skip it if no information has been updated. If an analysis has been added previously as &quot;running&quot; or &quot;pending&quot;, those entries will automatically be removed as soon as the same analysis is logged as either &quot;completed&quot; or &quot;failed&quot;.#### Command: `trailblazer scan`Convenience command to scan an entire directory structure for all analyses and update their status in one go. Assumes the base directory consists of individual case folders:```shelltrailblazer scan /path/to/analyses/dir/```This command can easily be setup in a crontab to run e.g. every hour and keep the analysis statuses up-to-date!#### Command: `trailblazer ls`Prints the case id for the most recently completed analyses to the console.```shelltrailblazer lsF0013487F0013362F000610617083F001346917085```#### Command: `trailblazer delete`Deletes an analysis log from the database. The input is the unique analysis id which is printed ones the analysis is initially logged. It's also displayed in the web interface.```shelltrailblazer delete 4```[black]: https://black.readthedocs.io/en/stable/[coveralls-url]: https://coveralls.io/r/Clinical-Genomics/trailblazer[coveralls-image]: https://img.shields.io/coveralls/Clinical-Genomics/trailblazer.svg?style=flat-square[GitHub Flow]: https://atlas.scilifelab.se/infrastructure/github/branching_models/githubflow/[pypi]: https://pypi.python.org/pypi/trailblazer/[Trailblazer-UI]: https://github.com/Clinical-Genomics/trailblazer-ui</longdescription>
</pkgmetadata>