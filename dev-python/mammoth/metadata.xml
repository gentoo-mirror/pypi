<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Mammoth .docx to HTML converter===============================Mammoth is designed to convert .docx documents, such as those created byMicrosoft Word, Google Docs and LibreOffice, and convert them to HTML.Mammoth aims to produce simple and clean HTML by using semanticinformation in the document, and ignoring other details. For instance,Mammoth converts any paragraph with the style ``Heading 1`` to ``h1``elements, rather than attempting to exactly copy the styling (font, textsize, colour, etc.) of the heading.There’s a large mismatch between the structure used by .docx and thestructure of HTML, meaning that the conversion is unlikely to be perfectfor more complicated documents. Mammoth works best if you only usestyles to semantically mark up your document.The following features are currently supported:-  Headings.-  Lists.-  Customisable mapping from your own docx styles to HTML. For instance,   you could convert ``WarningHeading`` to ``h1.warning`` by providing   an appropriate style mapping.-  Tables. The formatting of the table itself, such as borders, is   currently ignored, but the formatting of the text is treated the same   as in the rest of the document.-  Footnotes and endnotes.-  Images.-  Bold, italics, underlines, strikethrough, superscript and subscript.-  Links.-  Line breaks.-  Text boxes. The contents of the text box are treated as a separate   paragraph that appears after the paragraph containing the text box.-  Comments.Installation------------::   pip install mammothOther supported platforms--------------------------  `JavaScript &lt;https://github.com/mwilliamson/mammoth.js&gt;`__, both the   browser and node.js. Available `on   npm &lt;https://www.npmjs.com/package/mammoth&gt;`__.-  `WordPress &lt;https://wordpress.org/plugins/mammoth-docx-converter/&gt;`__.-  `Java/JVM &lt;https://github.com/mwilliamson/java-mammoth&gt;`__. Available   `on Maven   Central &lt;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.zwobble.mammoth%22%20AND%20a%3A%22mammoth%22&gt;`__.-  `.NET &lt;https://github.com/mwilliamson/dotnet-mammoth&gt;`__. Available   `on NuGet &lt;https://www.nuget.org/packages/Mammoth/&gt;`__.Usage-----CLI~~~You can convert docx files by passing the path to the docx file and theoutput file. For instance:::   mammoth document.docx output.htmlIf no output file is specified, output is written to stdout instead.The output is an HTML fragment, rather than a full HTML document,encoded with UTF-8. Since the encoding is not explicitly set in thefragment, opening the output file in a web browser may cause Unicodecharacters to be rendered incorrectly if the browser doesn’t default toUTF-8.Images^^^^^^By default, images are included inline in the output HTML. If an outputdirectory is specified by ``--output-dir``, the images are written toseparate files instead. For instance:::   mammoth document.docx --output-dir=output-dirExisting files will be overwritten if present.Styles^^^^^^A custom style map can be read from a file using ``--style-map``. Forinstance:::   mammoth document.docx output.html --style-map=custom-style-mapWhere ``custom-style-map`` looks something like:::   p[style-name='Aside Heading'] =&gt; div.aside &gt; h2:fresh   p[style-name='Aside Text'] =&gt; div.aside &gt; p:freshA description of the syntax for style maps can be found in the section`“Writing style maps” &lt;#writing-style-maps&gt;`__.Markdown^^^^^^^^Markdown support is deprecated. Generating HTML and using a separatelibrary to convert the HTML to Markdown is recommended, and is likely toproduce better results.Using ``--output-format=markdown`` will cause Markdown to be generated.For instance:::   mammoth document.docx --output-format=markdownLibrary~~~~~~~Basic conversion^^^^^^^^^^^^^^^^To convert an existing .docx file to HTML, pass a file-like object to``mammoth.convert_to_html``. The file should be opened in binary mode.For instance:.. code:: python   import mammoth   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.convert_to_html(docx_file)       html = result.value # The generated HTML       messages = result.messages # Any messages, such as warnings during conversionYou can also extract the raw text of the document by using``mammoth.extract_raw_text``. This will ignore all formatting in thedocument. Each paragraph is followed by two newlines... code:: python   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.extract_raw_text(docx_file)       text = result.value # The raw text       messages = result.messages # Any messagesCustom style map^^^^^^^^^^^^^^^^By default, Mammoth maps some common .docx styles to HTML elements. Forinstance, a paragraph with the style name ``Heading 1`` is converted toa ``h1`` element. You can pass in a custom map for styles by passing anoptions object with a ``style_map`` property as a second argument to``convert_to_html``. A description of the syntax for style maps can befound in the section `“Writing style maps” &lt;#writing-style-maps&gt;`__. Forinstance, if paragraphs with the style name ``Section Title`` should beconverted to ``h1`` elements, and paragraphs with the style name``Subsection Title`` should be converted to ``h2`` elements:.. code:: python   import mammoth   style_map = &quot;&quot;&quot;   p[style-name='Section Title'] =&gt; h1:fresh   p[style-name='Subsection Title'] =&gt; h2:fresh   &quot;&quot;&quot;   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.convert_to_html(docx_file, style_map=style_map)User-defined style mappings are used in preference to the default stylemappings. To stop using the default style mappings altogether, pass``include_default_style_map=False``:.. code:: python   result = mammoth.convert_to_html(docx_file, style_map=style_map, include_default_style_map=False)Custom image handlers^^^^^^^^^^^^^^^^^^^^^By default, images are converted to ``&lt;img&gt;`` elements with the sourceincluded inline in the ``src`` attribute. This behaviour can be changedby setting the ``convert_image`` argument to an `imageconverter &lt;#image-converters&gt;`__ .For instance, the following would replicate the default behaviour:.. code:: python   def convert_image(image):       with image.open() as image_bytes:           encoded_src = base64.b64encode(image_bytes.read()).decode(&quot;ascii&quot;)       return {           &quot;src&quot;: &quot;data:{0};base64,{1}&quot;.format(image.content_type, encoded_src)       }   mammoth.convert_to_html(docx_file, convert_image=mammoth.images.img_element(convert_image))Bold^^^^By default, bold text is wrapped in ``&lt;strong&gt;`` tags. This behaviourcan be changed by adding a style mapping for ``b``. For instance, towrap bold text in ``&lt;em&gt;`` tags:.. code:: python   style_map = &quot;b =&gt; em&quot;   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.convert_to_html(docx_file, style_map=style_map)Italic^^^^^^By default, italic text is wrapped in ``&lt;em&gt;`` tags. This behaviour canbe changed by adding a style mapping for ``i``. For instance, to wrapitalic text in ``&lt;strong&gt;`` tags:.. code:: python   style_map = &quot;i =&gt; strong&quot;   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.convert_to_html(docx_file, style_map=style_map)Underline^^^^^^^^^By default, the underlining of any text is ignored since underlining canbe confused with links in HTML documents. This behaviour can be changedby adding a style mapping for ``u``. For instance, suppose that a sourcedocument uses underlining for emphasis. The following will wrap anyexplicitly underlined source text in ``&lt;em&gt;`` tags:.. code:: python   import mammoth   style_map = &quot;u =&gt; em&quot;   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.convert_to_html(docx_file, style_map=style_map)Strikethrough^^^^^^^^^^^^^By default, strikethrough text is wrapped in ``&lt;s&gt;`` tags. Thisbehaviour can be changed by adding a style mapping for ``strike``. Forinstance, to wrap strikethrough text in ``&lt;del&gt;`` tags:.. code:: python   style_map = &quot;strike =&gt; del&quot;   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.convert_to_html(docx_file, style_map=style_map)Comments^^^^^^^^By default, comments are ignored. To include comments in the generatedHTML, add a style mapping for ``comment-reference``. For instance:.. code:: python   style_map = &quot;comment-reference =&gt; sup&quot;   with open(&quot;document.docx&quot;, &quot;rb&quot;) as docx_file:       result = mammoth.convert_to_html(docx_file, style_map=style_map)Comments will be appended to the end of the document, with links to thecomments wrapped using the specified style mapping.API~~~``mammoth.convert_to_html(fileobj, **kwargs)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Converts the source document to HTML.-  ``fileobj``: a file-like object containing the source document. Files   should be opened in binary mode.-  ``style_map``: a string to specify the mapping of Word styles to   HTML. See the section `“Writing style maps” &lt;#writing-style-maps&gt;`__   for a description of the syntax.-  ``include_embedded_style_map``: by default, if the document contains   an embedded style map, then it is combined with the default style   map. To ignore any embedded style maps, pass   ``include_embedded_style_map=False``.-  ``include_default_style_map``: by default, the style map passed in   ``style_map`` is combined with the default style map. To stop using   the default style map altogether, pass   ``include_default_style_map=False``.-  ``convert_image``: by default, images are converted to ``&lt;img&gt;``   elements with the source included inline in the ``src`` attribute.   Set this argument to an `image converter &lt;#image-converters&gt;`__ to   override the default behaviour.-  ``ignore_empty_paragraphs``: by default, empty paragraphs are   ignored. Set this option to ``False`` to preserve empty paragraphs in   the output.-  ``id_prefix``: a string to prepend to any generated IDs, such as   those used by bookmarks, footnotes and endnotes. Defaults to an empty   string.-  ``transform_document``: if set, this function is applied to the   document read from the docx file before the conversion to HTML. The   API for document transforms should be considered unstable. See   `document transforms &lt;#document-transforms&gt;`__.-  Returns a result with the following properties:   -  ``value``: the generated HTML   -  ``messages``: any messages, such as errors and warnings, generated      during the conversion``mammoth.convert_to_markdown(fileobj, **kwargs)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Markdown support is deprecated. Generating HTML and using a separatelibrary to convert the HTML to Markdown is recommended, and is likely toproduce better results.Converts the source document to Markdown. This behaves the same as``convert_to_html``, except that the ``value`` property of the resultcontains Markdown rather than HTML.``mammoth.extract_raw_text(fileobj)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Extract the raw text of the document. This will ignore all formatting inthe document. Each paragraph is followed by two newlines.-  ``fileobj``: a file-like object containing the source document. Files   should be opened in binary mode.-  Returns a result with the following properties:   -  ``value``: the raw text   -  ``messages``: any messages, such as errors and warnings``mammoth.embed_style_map(fileobj, style_map)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Embeds the style map ``style_map`` into ``fileobj``. When Mammoth readsa file object, it will use the embedded style map.-  ``fileobj``: a file-like object containing the source document. Files   should be opened for reading and writing in binary mode.-  ``style_map``: the style map to embed.-  Returns ``None``.Messages^^^^^^^^Each message has the following properties:-  ``type``: a string representing the type of the message, such as   ``&quot;warning&quot;``-  ``message``: a string containing the actual messageImage converters^^^^^^^^^^^^^^^^An image converter can be created by calling``mammoth.images.img_element(func)``. This creates an ``&lt;img&gt;`` elementfor each image in the original docx. ``func`` should be a function thathas one argument ``image``. This argument is the image element beingconverted, and has the following properties:-  ``open()``: open the image file. Returns a file-like object.-  ``content_type``: the content type of the image, such as   ``image/png``.``func`` should return a ``dict`` of attributes for the ``&lt;img&gt;``element. At a minimum, this should include the ``src`` attribute. If anyalt text is found for the image, this will be automatically added to theelement’s attributes.For instance, the following replicates the default image conversion:.. code:: python   def convert_image(image):       with image.open() as image_bytes:           encoded_src = base64.b64encode(image_bytes.read()).decode(&quot;ascii&quot;)       return {           &quot;src&quot;: &quot;data:{0};base64,{1}&quot;.format(image.content_type, encoded_src)       }   mammoth.images.img_element(convert_image)``mammoth.images.data_uri`` is the default image converter.WMF images are not handled by default by Mammoth. The recipes directorycontains `an example of how they can be converted usingLibreOffice &lt;https://github.com/mwilliamson/python-mammoth/blob/master/recipes/wmf_images.py&gt;`__,although the fidelity of the conversion depends entirely on LibreOffice.Document transforms~~~~~~~~~~~~~~~~~~~**The API for document transforms should be considered unstable, and maychange between any versions. If you rely on this behaviour, you shouldpin to a specific version of Mammoth, and test carefully beforeupdating.**Mammoth allows a document to be transformed before it is converted. Forinstance, suppose that document has not been semantically marked up, butyou know that any centre-aligned paragraph should be a heading. You canuse the ``transform_document`` argument to modify the documentappropriately:.. code:: python   import mammoth.transforms   def transform_paragraph(element):       if element.alignment == &quot;center&quot; and not element.style_id:           return element.copy(style_id=&quot;Heading2&quot;)       else:           return element   transform_document = mammoth.transforms.paragraph(transform_paragraph)   mammoth.convert_to_html(fileobj, transform_document=transform_document)Or if you want paragraphs that have been explicitly set to use monospacefonts to represent code:.. code:: python   import mammoth.documents   import mammoth.transforms   _monospace_fonts = set([&quot;consolas&quot;, &quot;courier&quot;, &quot;courier new&quot;])   def transform_paragraph(paragraph):       runs = mammoth.transforms.get_descendants_of_type(paragraph, mammoth.documents.Run)       if runs and all(run.font and run.font.lower() in _monospace_fonts for run in runs):           return paragraph.copy(style_id=&quot;code&quot;, style_name=&quot;Code&quot;)       else:           return paragraph   convert_to_html(       fileobj,       transform_document=mammoth.transforms.paragraph(transform_paragraph),       style_map=&quot;p[style-name='Code'] =&gt; pre:separator('\n')&quot;,   )``mammoth.transforms.paragraph(transform_paragraph)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Returns a function that can be used as the ``transform_document``argument. This will apply the function ``transform_paragraph`` to eachparagraph element. ``transform_paragraph`` should return the newparagraph.``mammoth.transforms.run(transform_run)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Returns a function that can be used as the ``transform_document``argument. This will apply the function ``transform_run`` to each runelement. ``transform_run`` should return the new run.``mammoth.transforms.get_descendants(element)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Gets all descendants of an element.``mammoth.transforms.get_descendants_of_type(element, type)``^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Gets all descendants of a particular type of an element. For instance,to get all runs within an element ``paragraph``:.. code:: python   import mammoth.documents   import mammoth.transforms   runs = mammoth.transforms.get_descendants_of_type(paragraph, documents.Run);Writing style maps------------------A style map is made up of a number of style mappings separated by newlines. Blank lines and lines starting with ``#`` are ignored.A style mapping has two parts:-  On the left, before the arrow, is the document element matcher.-  On the right, after the arrow, is the HTML path.When converting each paragraph, Mammoth finds the first style mappingwhere the document element matcher matches the current paragraph.Mammoth then ensures the HTML path is satisfied.Freshness~~~~~~~~~When writing style mappings, it’s helpful to understand Mammoth’s notionof freshness. When generating, Mammoth will only close an HTML elementwhen necessary. Otherwise, elements are reused.For instance, suppose one of the specified style mappings is``p[style-name='Heading 1'] =&gt; h1``. If Mammoth encounters a .docxparagraph with the style name ``Heading 1``, the .docx paragraph isconverted to a ``h1`` element with the same text. If the next .docxparagraph also has the style name ``Heading 1``, then the text of thatparagraph will be appended to the *existing* ``h1`` element, rather thancreating a new ``h1`` element.In most cases, you’ll probably want to generate a new ``h1`` elementinstead. You can specify this by using the ``:fresh`` modifier:``p[style-name='Heading 1'] =&gt; h1:fresh``The two consecutive ``Heading 1`` .docx paragraphs will then beconverted to two separate ``h1`` elements.Reusing elements is useful in generating more complicated HTMLstructures. For instance, suppose your .docx contains asides. Each asidemight have a heading and some body text, which should be containedwithin a single ``div.aside`` element. In this case, style mappingssimilar to ``p[style-name='Aside Heading'] =&gt; div.aside &gt; h2:fresh`` and``p[style-name='Aside Text'] =&gt; div.aside &gt; p:fresh`` might be helpful.Document element matchers~~~~~~~~~~~~~~~~~~~~~~~~~Paragraphs, runs and tables^^^^^^^^^^^^^^^^^^^^^^^^^^^Match any paragraph:::   pMatch any run:::   rMatch any table:::   tableTo match a paragraph, run or table with a specific style, you canreference the style by name. This is the style name that is displayed inMicrosoft Word or LibreOffice. For instance, to match a paragraph withthe style name ``Heading 1``:::   p[style-name='Heading 1']You can also match a style name by prefix. For instance, to match aparagraph where the style name starts with ``Heading``:::   p[style-name^='Heading']Styles can also be referenced by style ID. This is the ID usedinternally in the .docx file. To match a paragraph or run with aspecific style ID, append a dot followed by the style ID. For instance,to match a paragraph with the style ID ``Heading1``:::   p.Heading1.. _bold-1:Bold^^^^Match explicitly bold text:::   bNote that this matches text that has had bold explicitly applied to it.It will not match any text that is bold because of its paragraph or runstyle... _italic-1:Italic^^^^^^Match explicitly italic text:::   iNote that this matches text that has had italic explicitly applied toit. It will not match any text that is italic because of its paragraphor run style... _underline-1:Underline^^^^^^^^^Match explicitly underlined text:::   uNote that this matches text that has had underline explicitly applied toit. It will not match any text that is underlined because of itsparagraph or run style.Strikethough^^^^^^^^^^^^Match explicitly struckthrough text:::   strikeNote that this matches text that has had strikethrough explicitlyapplied to it. It will not match any text that is struckthrough becauseof its paragraph or run style.All caps^^^^^^^^Match explicitly all caps text:::   all-capsNote that this matches text that has had all caps explicitly applied toit. It will not match any text that is all caps because of its paragraphor run style.Small caps^^^^^^^^^^Match explicitly small caps text:::   small-capsNote that this matches text that has had small caps explicitly appliedto it. It will not match any text that is small caps because of itsparagraph or run style.Ignoring document elements^^^^^^^^^^^^^^^^^^^^^^^^^^Use ``!`` to ignore a document element. For instance, to ignore anyparagraph with the style ``Comment``:::   p[style-name='Comment'] =&gt; !HTML paths~~~~~~~~~~Single elements^^^^^^^^^^^^^^^The simplest HTML path is to specify a single element. For instance, tospecify an ``h1`` element:::   h1To give an element a CSS class, append a dot followed by the name of theclass:::   h1.section-titleTo require that an element is fresh, use ``:fresh``:::   h1:freshModifiers must be used in the correct order:::   h1.section-title:freshSeparators^^^^^^^^^^To specify a separator to place between the contents of paragraphs thatare collapsed together, use ``:separator('SEPARATOR STRING')``.For instance, suppose a document contains a block of code where eachline of code is a paragraph with the style ``Code Block``. We can writea style mapping to map such paragraphs to ``&lt;pre&gt;`` elements:::   p[style-name='Code Block'] =&gt; preSince ``pre`` isn’t marked as ``:fresh``, consecutive ``pre`` elementswill be collapsed together. However, this results in the code all beingon one line. We can use ``:separator`` to insert a newline between eachline of code:::   p[style-name='Code Block'] =&gt; pre:separator('\n')Nested elements^^^^^^^^^^^^^^^Use ``&gt;`` to specify nested elements. For instance, to specify ``h2``within ``div.aside``:::   div.aside &gt; h2You can nest elements to any depth.Donations---------If you’d like to say thanks, feel free to `make a donation throughKo-fi &lt;https://ko-fi.com/S6S01MG20&gt;`__.If you use Mammoth as part of your business, please consider supportingthe ongoing maintenance of Mammoth by `making a weekly donation throughLiberapay &lt;https://liberapay.com/mwilliamson/donate&gt;`__.</longdescription>
</pkgmetadata>