<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Linux TUN/TAP wrapper for Python================================``pytun`` is a Python module which let you create TUN/TAP device very easily.License: MIT (see LICENSE)Installation and Dependencies-----------------------------Install ``pytun`` with ``pip install python-pytun`` or `download this archive&lt;https://github.com/montag451/pytun/zipball/v2.3.0&gt;`_, decompress it andexecute ``python setup.py install``. As ``pytun`` is a C module you will need acompiler (e.g GCC) and the Python developpement headers installed on yoursystem (e.g on Debian-like distribution check that ``build-essential`` and``python-dev`` are present). There are no dependencies other than the PythonStandard Library.Documentation-------------NOTE: On most distributions you will need to be root to create TUN/TAP devices.To create a TUN device::    from pytun import TunTapDevice    tun = TunTapDevice()To create a TAP device::    from pytun import TunTapDevice, IFF_TAP    tap = TunTapDevice(flags=IFF_TAP)To create a TUN/TAP device with a custom name use the ``name`` keyword::    tun = TunTapDevice(name='mytun')You can get/set some parameters of the device directly::    print tun.name    tun.addr = '10.8.0.1'    tun.dstaddr = '10.8.0.2'    tun.netmask = '255.255.255.0'    tun.mtu = 1500If the device is a TAP you can also get/set its MAC address::    tap.hwaddr = '\x00\x11\x22\x33\x44\x55'    print tap.hwaddrTo make the device persistent::    tun.persist(True)To bring up the device::    tun.up()To bring down the device::    tun.down()To enable/disable the queue associated with the device (works only ifit has been created with IFF_MULTI_QUEUE)::    tun.mq_attach() # enable the queue    tun.mq_attach(False) # disable the queueTo read/write to the device, use the methods ``read(size)`` and``write(buf)``::    buf = tun.read(tun.mtu)    tun.write(buf)To close the device::    tun.close()You can also use ``TunTapDevice`` objects with all functions that expect a``fileno()`` method (e.g ``select()``)</longdescription>
</pkgmetadata>