<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The National Archives: Find Case LawThis repository is part of the [Find Case Law](https://caselaw.nationalarchives.gov.uk/) project at [The National Archives](https://www.nationalarchives.gov.uk/). For more information on the project, check [the documentation](https://github.com/nationalarchives/ds-find-caselaw-docs).# MarkLogic API Client![PyPI](https://img.shields.io/pypi/v/ds-caselaw-marklogic-api-client) ![Libraries.io dependency status for latest release](https://img.shields.io/librariesio/release/pypi/ds-caselaw-marklogic-api-client)This is an API Client for connecting to Marklogic for The National Archive's Caselaw site.This package is published on PyPI: https://pypi.org/project/ds-caselaw-marklogic-api-client/## UsageInclude the API client in your project using PIP:```bashpip install ds-caselaw-marklogic-api-client```or in your projects `requirements.txt` with:```textds-caselaw-marklogic-api-client~=2.0.0```### Using the clientThe client expects the following environment variables to be set or defined in a `.env` file:```bashMARKLOGIC_HOSTMARKLOGIC_USERMARKLOGIC_PASSWORDMARKLOGIC_USE_HTTPS # Optional, defaults to False```Then import `api_client` from `caselawclient.Client`:```pythonfrom caselawclient.Client import api_client```Alternatively, you can import the base class and instantiate it with different credentials:```pythonfrom caselawclient.Client import MarklogicApiClientclient = MarklogicApiClient(    host=&quot;&quot;,    username=&quot;&quot;,    password=&quot;&quot;,    use_https=False,)````Client` also exports some exception classes:```pythonMarklogicAPIErrorMarklogicBadRequestErrorMarklogicUnauthorizedErrorMarklogicNotPermittedErrorMarklogicResourceNotFoundErrorMarklogicCommunicationError```### XML ToolsThere is also a small set of xml helper tools that provide some common functionality for dealing with xml:```pythonfrom caselawclient import xml_toolsxml_tools.get_metadata_name_value(xml)xml_tools.get_metadata_name_element(xml)xml_tools.get_search_matches(element)```## TestingTo run the test suite:```bashpoetry installpoetry run pytest```## Making changesWhen making a change, update the [changelog](CHANGELOG.md) using the[Keep a Changelog 1.0.0](https://keepachangelog.com/en/1.0.0/) format. Pullrequests should not be merged before any relevant updates are made.## ReleasingWhen making a new release, update the [changelog](CHANGELOG.md) in the releasepull request.The package will **only** be released to PyPI if the branch is tagged. A mergeto main alone will **not** trigger a release to PyPI.To create a release:0. Update the version number in `pyproject.toml`0. Create a branch `release/v{major}.{minor}.{patch}`0. Update `CHANGELOG.md` for the release0. Commit and push0. Open a PR from that branch to main0. Get approval on the PR0. Merge the PR to main and push0. Tag the merge commit on `main` with `v{major}.{minor}.{patch}` and push the tag0. Create a release in [Github releases](https://github.com/nationalarchives/ds-caselaw-custom-api-client/releases)using the created tag</longdescription>
</pkgmetadata>