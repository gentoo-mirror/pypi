<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)[![PyPI version](https://badge.fury.io/py/publish-event-sns.svg)](https://badge.fury.io/py/airflow-notity-sns)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![Twitter Follow](https://img.shields.io/twitter/follow/msantino.svg?style=social&amp;label=Follow)](https://twitter.com/msantino)# Publish Airflow Notification to a SNS TopicThis package adds a callback function to use in failures to DAGs and Tasks in a Airflow project. ## Installation```bashpip install airflow-notify-sns```## Usage```pythonfrom datetime import timedelta# Airflow native imports to create a DAGfrom airflow import DAG, utilsfrom airflow.operators.bash_operator import BashOperator# Here is function importfrom airflow_notify_sns import airflow_notify_sns# Dag Definitiondag = DAG(    dag_id='test_dag',    default_args={        'owner': 'airflow',        'depends_on_past': False,        'start_date': utils.dates.days_ago(1),        'retries': 3,        'retry_delay': timedelta(minutes=5)    },    schedule_interval=&quot;@daily&quot;,    dagrun_timeout=timedelta(minutes=60),    sla_miss_callback=airflow_notify_sns,    on_failure_callback=airflow_notify_sns)# Add your tasks heret = BashOperator(    dag=dag,    task_id='test_env',    bash_command='/tmp/test.sh',    env={'EXECUTION_DATE': '{{ ds }}'},    on_failure_callback=airflow_notify_sns)```When DAG or tasks ends in error, a notification will be send to a SNS Topic using AWS default connection (`aws_default`). ## Required VariableThis module will try to find a variable named `airflow_notify_sns_arn` in your Airflow environment, containing SNS Topic ARN where message will be published to. If variable is not found, function will abort execution with no error. </longdescription>
</pkgmetadata>