<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># antlr-tsql[![Build Status](https://travis-ci.org/datacamp/antlr-tsql.svg?branch=master)](https://travis-ci.org/datacamp/antlr-tsql)[![PyPI version](https://badge.fury.io/py/antlr-tsql.svg)](https://badge.fury.io/py/antlr-tsql)## DevelopmentANTLR requires Java, so we suggest you use Docker when building grammars. The `Makefile` contains directives to clean, build, test and deploy the ANTLR grammar. It does not run Docker itself, so run `make` inside Docker.### Build the grammar```bash# Build the docker containerdocker build -t antlr_tsql .# Run the container to build the python grammar# Write parser files to local file system through volume mountingdocker run -it -v ${PWD}:/usr/src/app antlr_tsql make build```### Set up the Python moduleNow that the Python parsing files are available, you can install them with `pip`:```bashpip install -r requirements.txtpip install -e .```And parse SQL code in Python:```pythonfrom antlr_tsql import astast.parse(&quot;SELECT a from b&quot;)```### Using the AST viewerIf you're actively developing on the ANLTR grammar or the tree shaping, it's a good idea to set up the [AST viewer](https://github.com/datacamp/ast-viewer) locally so you can immediately see the impact of your changes in a visual way.- Clone the ast-viewer repo and build the Docker image according to the instructions.- Spin up a docker container that volume mounts the Python package, symlink-installs the package and runs the server on port 3000:```bashdocker run -it \  -u root \  -v ~/workspace/antlr-tsql:/app/app/antlr-tsql \  -p 3000:3000 \  ast-viewer \  /bin/bash -c &quot;echo 'Install development requirements in development:' \    &amp;&amp; pip install --no-deps -e app/antlr-tsql \    &amp;&amp; python3 run.py&quot;```When simultaneously developing other packages, volume mount and install those too:```bashdocker run -it \  -u root \  -v ~/workspace/antlr-ast:/app/app/antlr-ast \  -v ~/workspace/antlr-plsql:/app/app/antlr-plsql \  -v ~/workspace/antlr-tsql:/app/app/antlr-tsql \  -p 3000:3000 \  ast-viewer \  /bin/bash -c &quot;echo 'Install development requirements in development:' \    &amp;&amp; pip install --no-deps -e app/antlr-ast \    &amp;&amp; pip install --no-deps -e app/antlr-plsql \    &amp;&amp; pip install --no-deps -e app/antlr-tsql \    &amp;&amp; python3 run.py&quot;```- If you update the tree shaping logic in this repo, the app will auto-update.- If you change the grammar, you will have to first rebuild the grammar (with the `antlr_tsql` docker image) and restart the `ast-viewer` container.### Run tests```bash# Similar to building the grammar, but running tests# and not saving the generated filesdocker build -t antlr_tsql .docker run -t antlr_tsql make build test```Or run the test locally, first build the grammar then run:```pythonpytest```## Travis deployment- Builds the Docker image.- Runs the Docker image to build the grammar and run the unit tests.- Deploys the resulting python files to PyPi when a new release is made, so they can be installed easily.</longdescription>
</pkgmetadata>