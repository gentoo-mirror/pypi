<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build](https://github.com/feldberlin/timething/workflows/CI/badge.svg)](https://github.com/feldberlin/timething/actions)[![PyPI version](https://badge.fury.io/py/timething.svg)](https://badge.fury.io/py/timething)# TimethingTimething is a library for aligning text transcripts with audio. You providean audio file, as well as a text file with the complete text transcript.Timething will output a list of time-codes for each word and character thatindicate when this word or letter was spoken in the audio you provided.Timething strives to be fast and accurate, and can run on both GPUs or CPUs.Timething uses powerful Wav2Vec based speech recognition models hosted by theHugging Face AI community. The approach is described in this [PyTorchTutorial](https://pytorch.org/audio/main/tutorials/forced_alignment_tutorial.html),as well as in this [paper](https://arxiv.org/abs/2007.09127).## InstallationTo install Timething, you'll need an installation of Python 3.7 or 3.8. Youcan then install it using pip:```bashpip install timething```## Aligning recordings and transcriptsTimething currently expects to find a folder containing one or more chaptersin the following form:    └── dir/        ├── text.csv        ├── aligned/        └── audio/            ├── chapter01.mp3            ├── chapter02.mp3            └── chapter03.mp3Timething can process many audio formats, including MP3, WAV, FLACC andOGG/VORBIS.The file `text.csv` should contain one entry per wav file in the followingformat:```csvaudio/chapter01.mp3|The transcript for chapter01 on a single line hereaudio/chapter02.mp3|The transcript for chapter02 on a single line hereaudio/chapter03.mp3|The transcript for chapter03 on a single line here```You can now run Timething on your CPU or GPU, for example:```bashtimething align --metadata text.csv --alignments-dir aligned```You can also specify more options, e.g.:```bashtimething align \  --language german \  --metadata text.csv \  --alignments-dir aligned \  --batch-size 8 \  --n-workers 8```Run `timething --help` for a full description.Results will be written into the given folder, e.g. `aligned`. They will bewritten into a single json file named after each audio id. Each file willcontain the character level and the word level alignments. For word levelalignments, each word will have the starting time in seconds, the ending timein seconds, the confidence level for that word and the word label. Characterlevel alignments have the corresponding results.You can find an example dataset with alignments output in[`fixtures/`](https://github.com/feldberlin/timething/blob/main/fixtures).Here's what the alignment for &quot;one.mp3&quot;, which contains only the word &quot;one&quot;,looks like:```json{    &quot;n_model_frames&quot;: 72,    &quot;n_audio_samples&quot;: 23392,    &quot;sampling_rate&quot;: 16000,    &quot;chars&quot;: [        {            &quot;label&quot;: &quot;O&quot;,            &quot;start&quot;: 0.5888611111111111,            &quot;end&quot;: 0.6497777777777777,            &quot;score&quot;: 0.9999777873357137        },        {            &quot;label&quot;: &quot;n&quot;,            &quot;start&quot;: 0.6497777777777777,            &quot;end&quot;: 0.7106944444444444,            &quot;score&quot;: 0.99994424978892        },        {            &quot;label&quot;: &quot;e!&quot;,            &quot;start&quot;: 0.7106944444444444,            &quot;end&quot;: 0.731,            &quot;score&quot;: 0.9999799728393555        }    ],    &quot;chars_cleaned&quot;: [        {            &quot;label&quot;: &quot;o&quot;,            &quot;start&quot;: 0.5888611111111111,            &quot;end&quot;: 0.6497777777777777,            &quot;score&quot;: 0.9999777873357137        },        {            &quot;label&quot;: &quot;n&quot;,            &quot;start&quot;: 0.6497777777777777,            &quot;end&quot;: 0.7106944444444444,            &quot;score&quot;: 0.99994424978892        },        {            &quot;label&quot;: &quot;e&quot;,            &quot;start&quot;: 0.7106944444444444,            &quot;end&quot;: 0.731,            &quot;score&quot;: 0.9999799728393555        }    ],    &quot;words&quot;: [        {            &quot;label&quot;: &quot;One!&quot;,            &quot;start&quot;: 0.5888611111111111,            &quot;end&quot;: 0.731,            &quot;score&quot;: 0.9999637263161796        }    ],    &quot;words_cleaned&quot;: [        {            &quot;label&quot;: &quot;one&quot;,            &quot;start&quot;: 0.5888611111111111,            &quot;end&quot;: 0.731,            &quot;score&quot;: 0.9999637263161796        }    ]}```## Re-cutting recordingsOnce you've run alignment, you can cut your files down to smaller files andwrite the results into a new folder. For example, if you don't want any ofyour recordings to exceed 8 seconds, then you can create a new directory andre-cut your data into it like this:```bashtimething recut \  --from-metadata text.csv \  --to-metadata ~/smaller-recordings/text.csv \  --alignments-dir alignments \  --cut-threshold-seconds 8.0```Results in this example are written into ~/smaller-recordings.## Supported languagesCurrently supported languages can be found [inmodels.yaml](https://github.com/feldberlin/timething/blob/main/src/timething/models.yaml).This currently includes English, German, Dutch, Polish, Italian, Portuguese,Spanish, French, Russian, Japanese, Greek and Arabic models. We have onlytested the German model so far.Due to the large number of CTC speech models available on the Hugging Face AIcommunity, new languages can be easily added to Timething. Alternatively,Wav2Vec can be fine-tuned as described[here](https://huggingface.co/blog/fine-tune-wav2vec2-english), using any ofthe [Common Voice](https://commonvoice.mozilla.org/en/languages) languages, 87at the time of writing.Support for text cleaning is currently minimal, and may need to be extendedfor new languages.## AlternativesThere are many mature libraries that can already do forced alignment likeTimething, e.g. the Montreal forced aligner or Aeneas. One list of tools ismaintained [here](https://github.com/pettarin/forced-alignment-tools).## ThanksThanks to [why do birds](http://www.whydobirds.de) for allowing the initialwork on this library to be open sourced.</longdescription>
</pkgmetadata>