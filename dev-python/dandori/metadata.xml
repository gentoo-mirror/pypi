<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dandori: GitHub Actions with Pythondandori runs on your Actions, and automate workflow with using Python.**Current Status is Super Early Alpha. DO NOT USE IT in your production repository.**## How to UseFirst, You need to define workflow.You can hook any [events](https://docs.github.com/en/actions/reference/events-that-trigger-workflows) without manual/scheduled workflow such as `pull_request`, `push` or `pull_request_review`.```yamlname: dandori_actionon: [pull_request, issue_comment]jobs:  run:    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@v2      - uses: actions/setup-python@v2        with:          python-version: '3.9'      - run: pip install dandori      - run: dandori run        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```Next, you can write your Python script or package on your repo, like `dandori_handler.py` or 'dandori_handlers/'. dandori automatically import your code and run handler functions defined in your code:```py## dandori_handler.pydef handle_pull_request(ctx):    if ctx.gh.payload.action == 'synchronize':        ctx.gh.create_comment(&quot;You pushed new commits!!&quot;)def handle_pull_request_comment(ctx):    &quot;&quot;&quot;It's a special handler type, issue_comment event on PR&quot;&quot;&quot;    comment_body = ctx.gh.comment_body().strip()    if comment_body.startswith('/some-command'):        some_code_as_you_like()```If you want more than one file, you need to make a package:```py## handlers/__init__.py# Must be relative importsfrom .pull_request import handle_pull_requestfrom .issue import handle_issue## handlers/pull_request.pydef handle_pull_request(ctx):    ...## -- handlers/issue.pydef handle_issue(ctx):    ...```## Configurationdandori supports `pyproject.toml`, or make any toml file as you like (default is `dandori.toml`).In pyproject.toml, write config in `tool.dandori` section:```toml# pyproject.toml[tool.dandori]handlers = ['path/to/handler']```In independent toml file, write config in `dandori` section:```toml# dandori.toml[dandori]handlers = ['path/to/handler']```## Use case### Share CI code with multiple repo:```yamlname: dandori_actionon: [pull_request, issue_comment]jobs:  run:    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@v2      - uses: actions/checkout@v2        with:          repository: your/dandori-handler          ref: v1  # something you need          ssh-key: ${{ secrets.your_repo_key }}          path: dandori-handler      - uses: actions/setup-python@v2        with:          python-version: '3.9'      - run: pip install dandori      - run: dandori run -f dandori-handler/dandori.toml        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```### Use third party package in handlerYour handler module or package will be imported dynamically, so you can install any library in the &quot;(virtual)env&quot; same as dandori installed.Most simple cale, install dandori with other library:```# Install libraries with pip- run: pip install dandori requests python-dateutil```If you want use just a &quot;command&quot; and not to use global env, use `ctx.ops.run_venv()`:```pydef handle_pull_request(ctx):    ctx.ops.run_venv([&quot;pip&quot;, &quot;install&quot;, &quot;twine&quot;])    ctx.ops.run_venv(['twine', 'upload', 'dist/*'])```Or dynamically install it and use it:```pyimport importlibdef handle_pull_request(ctx):    ctx.ops.run([&quot;pip&quot;, &quot;install&quot;, &quot;requests&quot;])    requests = importlib.import_module('requests')```</longdescription>
</pkgmetadata>