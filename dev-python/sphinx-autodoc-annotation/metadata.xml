<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>sphinx-autodoc-annotation=========================*Use Python 3 annotations in sphinx-enabled docstrings*If you're on Python 3 and writing sphinx-enabled docstrings, you might feel like doingneedless work when typing ``:type arg:`` or ``:rtype:`` directives. After all, why not useannotations for this?Sure, ``:param str arg: description`` is not a lot of work, but when you want to document yourargument as a specific class for which you have a ``:class:`` link, then you need to use ``:type:``and it's cumbersome. By using this sphinx extension, you can turn this::    def f(a):        &quot;&quot;&quot;Do something.                :param a: description for a        :type a: :class:`ClassForA`        :rtype: str        &quot;&quot;&quot;into::    def f(a: ClassForA) -&gt; str:        &quot;&quot;&quot;Do something.                :param a: description for a        &quot;&quot;&quot;Installation------------First, you need Python 3.3+ and a Sphinx documentation (with ``autodoc`` enabled).You can install ``sphinx-autodoc-annotation`` with::    $ pip install sphinx-autodoc-annotationThen, you need to enable it in your ``conf.py`` file::    extensions = [        'sphinx.ext.autodoc',        'sphinx_autodoc_annotation',    ]You're done!Usage-----All you need to do to use this extension is to properly annotate your functions and methods withexpected types for your arguments and return value. ``:type:`` and ``:rtype:`` directives willautomatically be added to your docstring.These directives behave like if you added them manually, that is, your argument is not going toshow up only with ``:type arg:`` you *need* ``:param arg:`` to be there (with a description of whatit does) for your type to show up.When there are no annotations, argument types are deduced from default values. If your default valueis a ``bool``, ``str``, ``int`` or ``float``, the argument is going to be considered of that type.That feature is there mainly because ``f(flag: bool = False)`` feels a bit redundant.In all cases, ``:type:`` and ``:rtype:`` directives in the docstring will always have precedenceover annotations and defaults.</longdescription>
</pkgmetadata>