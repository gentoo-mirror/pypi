<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## ibloomthis is a fork of [pyreBloom-ng](https://github.com/leovp/pyreBloom-ng), pyreBloom-ng is a python library which implements a Redis-backed Bloom filter.pyreBloom-ng is really powerful. but it's setup.py and tests and bench/benchmark.py are all outdated, the repo's last commit is 4 years ago.based on pyreBloom-ng and added supported for python3's str, avoid of annoying *`b'some_key'`*## Installation### pre-requirement`ibloom` requires `hiredis` library, `Cython` and `a C compiler`&gt; hiredis```sh# Macbrew install hiredis# ubuntuapt-get install libhiredis-dev# From source:git clone https://github.com/redis/hirediscd hiredis &amp;&amp; make &amp;&amp; sudo make install```&gt; Cython```shpip install Cython```## Startup### init an instance```pythonfrom ibloom import IBloomib = IBloom('ibloomI', 1000, 0.01, '127.0.0.1', 6383)```or```pythonfrom ibloom import IBloomib_n = IBloom(key='ibloomN', capacity=1000, error=0.01, host='127.0.0.1', port=6383)```### check basic info```python# You can find out how many bits this will theoretically consume&gt;&gt;&gt; ib.bits9585# And how many hashes are needed to satisfy the false positive rate&gt;&gt;&gt; ib.hashes7# find all available bloom filter keys&gt;&gt;&gt; ib.keys()['ibloomI.0']```### add data#### add all supplied```python# Add one value at a time (slow)&gt;&gt;&gt; ib.add('first')True# Or use batch operations (faster).&gt;&gt;&gt; ib.update([f'{x}' for x in range(5)])5# Alternative: ib += data, but this will return nothing&gt;&gt;&gt; ib += [f'{x + 5}' for x in range(5)]```#### only add if not exist```python# will first get the difference, and then update them to redis, and return them&gt;&gt;&gt; ib.update_difference(['5', '6', '7', '8', '9', '10'])['10']```### check if key exists#### find one```python# Test one value at a time (slow).# . in ...&gt;&gt;&gt; 'first' in ibTrue# ...contains(.)&gt;&gt;&gt; ib.contains('first')True```#### find multiple```python# Use batch operations (faster).# Note: ibloom.intersection() returns a list of values# which are found in a Bloom filter. It makes sense when# you consider it a set-like operation.&gt;&gt;&gt; ib.intersection(['3', '4', '5', '6'])['3', '4', '5', '6']# Alternative: ib &amp; [b'3', b'4', b'5', b'6']&gt;&gt;&gt; ib &amp; ['3', '4', '5', '6', '9', '10']['3', '4', '5', '6', '9']```#### find non exist```python&gt;&gt;&gt; ib.difference(['5', '6', '7', '8', '9', '10'])['10']# not recommended, maybe update in the future# Alternative: ib ^ ['5', '6', '7', '8', '9', '10']&gt;&gt;&gt; ib ^ ['5', '6', '7', '8', '9', '10']['10']```### delete the bloom key```python# delete selfib.delete()```</longdescription>
</pkgmetadata>