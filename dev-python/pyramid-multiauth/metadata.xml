<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================pyramid_multiauth=================|pypi| |ci|.. |pypi| image:: https://img.shields.io/pypi/v/pyramid_multiauth.svg    :target: https://pypi.python.org/pypi/pyramid_multiauth.. |ci| image:: https://github.com/mozilla-services/pyramid_multiauth/actions/workflows/test.yml/badge.svg    :target: https://github.com/mozilla-services/pyramid_multiauth/actionsAn authentication policy for Pyramid that proxies to a stack of otherauthentication policies.Overview========MultiAuthenticationPolicy is a Pyramid authentication policy that proxies toa stack of *other* IAuthenticationPolicy objects, to provide a combined authsolution from individual pieces.  Simply pass it a list of policies thatshould be tried in order::    policies = [        IPAuthenticationPolicy(&quot;127.0.*.*&quot;, principals=[&quot;local&quot;])        IPAuthenticationPolicy(&quot;192.168.*.*&quot;, principals=[&quot;trusted&quot;])    ]    authn_policy = MultiAuthenticationPolicy(policies)    config.set_authentication_policy(authn_policy)This example uses the pyramid_ipauth module to assign effective principalsbased on originating IP address of the request.  It combines two suchpolicies so that requests originating from &quot;127.0.*.*&quot; will have principal&quot;local&quot; while requests originating from &quot;192.168.*.*&quot; will have principal&quot;trusted&quot;.In general, the results from the stacked authentication policies are combinedas follows:    * authenticated_userid:    return userid from first successful policy    * unauthenticated_userid:  return userid from first successful policy    * effective_principals:    return union of principals from all policies    * remember:                return headers from all policies    * forget:                  return headers from all policiesDeployment Settings===================It is also possible to specify the authentication policies as part of yourpaste deployment settings.  Consider the following example::    [app:pyramidapp]    use = egg:mypyramidapp    multiauth.policies = ipauth1 ipauth2 pyramid_browserid    multiauth.policy.ipauth1.use = pyramid_ipauth.IPAuthentictionPolicy    multiauth.policy.ipauth1.ipaddrs = 127.0.*.*    multiauth.policy.ipauth1.principals = local    multiauth.policy.ipauth2.use = pyramid_ipauth.IPAuthentictionPolicy    multiauth.policy.ipauth2.ipaddrs = 192.168.*.*    multiauth.policy.ipauth2.principals = trustedTo configure authentication from these settings, simply include the multiauthmodule into your configurator::    config.include(&quot;pyramid_multiauth&quot;)In this example you would get a MultiAuthenticationPolicy with three stackedauth policies.  The first two, ipauth1 and ipauth2, are defined as the name ofof a callable along with a set of keyword arguments.  The third is defined asthe name of a module, pyramid_browserid, which will be procecesed via thestandard config.include() mechanism.The end result would be a system that authenticates users via BrowserID, andassigns additional principal identifiers based on the originating IP addressof the request.If necessary, the *group finder function* and the *authorization policy* canalso be specified from configuration::    [app:pyramidapp]    use = egg:mypyramidapp    multiauth.authorization_policy = mypyramidapp.acl.Custom    multiauth.groupfinder  = mypyramidapp.acl.groupfinder    ...MultiAuthPolicySelected Event=============================An event is triggered when one of the multiple policies configured is selected.::    from pyramid_multiauth import MultiAuthPolicySelected    # Track policy used, for prefixing user_id and for logging.    def on_policy_selected(event):        print(&quot;%s (%s) authenticated %s for request %s&quot; % (event.policy_name,                                                           event.policy,                                                           event.userid,                                                           event.request))    config.add_subscriber(on_policy_selected, MultiAuthPolicySelected)1.0.1 (2021-10-28)==================**Bug Fixes**- Fix the `ConfigurationError` about authentication and authorization conflicting  with the default security when loading various policies via their module name.**Internal Changes**- Migrate CI from CircleCI to Github Actions- Tox: add py3.7 and py3.9 support- Remove code for Pyramid &lt; 1.3- Use ``assertEqual()`` in tests- Drop support of Python 2.71.0.0 (2021-10-21)==================**Breaking Changes**- Drop support for Pyramid 1.X (#27)0.9.0 (2016-11-07)==================- Drop support for python 2.60.8.0 (2016-02-11)==================- Provide ``userid`` attribute in ``MultiAuthPolicySelected`` event.- Always notify event when user is identified with authenticated_userid()  (i.e. through ``effective_principals()`` with group finder callback).0.7.0 (2016-02-09)==================- Add ``get_policies()`` method to retrieve the list of contained authentication  policies and their respective names.0.6.0 (2016-01-27)==================- Provide the policy name used in settings in the ``MultiAuthPolicySelected``  event.0.5.0 - 2015-05-19==================- Read authorization policy from settings if present.0.4.0 - 2014-01-02==================- Make authenticated_userid None when groupfinder returns None.0.3.2 - 2013-05-29==================- Fix some merge bustage; this should contain all the things that were  *claimed* to be contained in the 0.3.1 release, but in fact were not.0.3.1 - 2013-05-15==================- MultiAuthPolicySelected events now include the request object, so you  can e.g. access the registry from the handler function.- Fixed some edge-cases in merging effective_principals with the output  of the groupfinder callback.0.3.0 - 2012-11-27==================- Support for Python3 via source-level compatibility.- Fire a MultiAuthPolicySelected event when a policy is successfully  used for authentication.0.2.0 - 2012-10-04==================- Add get_policy() method, which can be used to look up the loaded  sub-policies at runtime.0.1.2 - 2012-01-30==================- Update license to MPL 2.0.0.1.1 - 2011-12-20==================- Compatability with Pyramid 1.3.0.1.0 - 2011-11-11==================- Initial release.</longdescription>
</pkgmetadata>