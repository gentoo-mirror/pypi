<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BlenderProc2[![Documentation](https://img.shields.io/badge/documentation-passing-brightgreen.svg)](https://dlr-rm.github.io/BlenderProc/)[![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DLR-RM/BlenderProc/blob/main/examples/basics/basic/basic_example.ipynb)[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/6104887/137109535-275a2aa3-f5fd-4173-9d16-a9a9b86f66e7.gif&quot; alt=&quot;Front readme image&quot; width=100%&gt;&lt;/p&gt;A procedural Blender pipeline for photorealistic rendering.[Documentation](https://dlr-rm.github.io/BlenderProc) | [Tutorials](#tutorials) | [Examples](#examples) | [ArXiv paper](https://arxiv.org/abs/1911.01911) | [Workshop paper](https://sim2real.github.io/assets/papers/2020/denninger.pdf)## Features* Loading: `*.obj`, `*.ply`, `*.blend`, BOP, ShapeNet, Haven, 3D-FRONT, etc.* Objects: Set or sample object poses, apply physics and collision checking.* Materials: Set or sample physically-based materials and textures* Lighting: Set or sample lights, automatic lighting of 3D-FRONT scenes.* Cameras: Set, sample or load camera poses from file.* Rendering: RGB, stereo, depth, normal and segmentation images/sequences.* Writing: .hdf5 containers, COCO &amp; BOP annotations.## Installation### Via pipThe simplest way to install blenderproc is via pip:```bashpip install blenderproc```### Git cloneIf you need to make changes to blenderproc or you want to make use of the most recent version on the main-branch, clone the repository:```bashgit clone https://github.com/DLR-RM/BlenderProc```To still make use of the blenderproc command and therefore use blenderproc anywhere on your system, make a local pip installation:```bashcd BlenderProcpip install -e .```## UsageBlenderProc has to be run inside the blender python environment, as only there we can access the blender API. Therefore, instead of running your script with the usual python interpreter, the command line interface of BlenderProc has to be used.```bashblenderproc run &lt;your_python_script&gt;```In general, one run of your script first loads or constructs a 3D scene, then sets some camera poses inside this scene and renders different types of images (RGB, distance, semantic segmentation, etc.) for each of those camera poses.Usually, you will run your script multiple times, each time producing a new scene and rendering e.g. 5-20 images from it.With a little more experience, it is also possible to change scenes during a single script call, read [here](docs/tutorials/key_frames.md#render-multiple-times) how this is done.## QuickstartYou can test your BlenderProc pip installation by running```bashblenderproc quickstart```This is an alias to `blenderproc run quickstart.py` where `quickstart.py` is:```pythonimport blenderproc as bprocimport numpy as npbproc.init()# Create a simple object:obj = bproc.object.create_primitive(&quot;MONKEY&quot;)# Create a point light next to itlight = bproc.types.Light()light.set_location([2, -2, 0])light.set_energy(300)# Set the camera to be in front of the objectcam_pose = bproc.math.build_transformation_mat([0, -5, 0], [np.pi / 2, 0, 0])bproc.camera.add_camera_pose(cam_pose)# Render the scenedata = bproc.renderer.render()# Write the rendering into an hdf5 filebproc.writer.write_hdf5(&quot;output/&quot;, data)```BlenderProc creates the specified scene and renders the image into `output/0.hdf5`.To visualize that image, simply call:```bashblenderproc vis hdf5 output/0.hdf5```Thats it! You rendered your first image with BlenderProc!### Debugging in the Blender GUITo understand what is actually going on, BlenderProc has the great feature of visualizing everything inside the blender UI.To do so, simply call your script with the `debug` instead of `run` subcommand:```bashblenderproc debug quickstart.py```Now the Blender UI opens up, the scripting tab is selected and the correct script is loaded.To start the BlenderProc pipeline, one now just has to press `Run BlenderProc` (see red circle in image).As in the normal mode, print statements are still printed to the terminal.&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;images/debug.jpg&quot; alt=&quot;Front readme image&quot; width=500&gt;&lt;/p&gt;The pipeline can be run multiple times, as in the beginning of each run the scene is cleared.### Breakpoint-Debugging in IDEsAs blenderproc runs in blenders separate python environment, debugging your blenderproc script cannot be done in the same way as with any other python script.Therefore, remote debugging is necessary, which is explained for vscode and PyCharm in the following:#### Debugging with vscodeFirst, install the `debugpy` package in blenders python environment.```blenderproc pip install debugpy```Now add the following configuration to your vscode [launch.json](https://code.visualstudio.com/docs/python/debugging#_initialize-configurations).```json{                            &quot;name&quot;: &quot;Attach&quot;,    &quot;type&quot;: &quot;python&quot;,    &quot;request&quot;: &quot;attach&quot;,    &quot;connect&quot;: {        &quot;host&quot;: &quot;localhost&quot;,        &quot;port&quot;: 5678    }}```Finally, add the following lines to the top (after the imports) of your blenderproc script which you want to debug.```pythonimport debugpydebugpy.listen(5678)debugpy.wait_for_client()```Now run your blenderproc script as usual via the CLI and then start the added &quot;Attach&quot; configuration in vscode.You are now able to add breakpoints and go through the execution step by step.#### Debugging with PyCharm ProfessionalIn Pycharm, go to `Edit configurations...` and create a [new configuration](https://www.jetbrains.com/help/pycharm/remote-debugging-with-product.html#remote-debug-config) based on `Python Debug Server`.The configuration will show you, specifically for your version, which pip package to install and which code to add into the script.The following assumes Pycharm 2021.3:First, install the `pydevd-pycharm` package in blenders python environment.```blenderproc pip install pydevd-pycharm~=212.5457.59```Now, add the following code to the top (after the imports) of your blenderproc script which you want to debug.```pythonimport pydevd_pycharmpydevd_pycharm.settrace('localhost', port=12345, stdoutToServer=True, stderrToServer=True)```Then, first run your `Python Debug Server` configuration in PyCharm and then run your blenderproc script as usual via the CLI.PyCharm should then go in debug mode, blocking the next code line.You are now able to add breakpoints and go through the execution step by step.## What to do next?As you now ran your first BlenderProc script, your ready to learn the basics:### TutorialsRead through the tutorials, to get to know with the basic principles of how BlenderProc is used:1. [Loading and manipulating objects](docs/tutorials/loader.md)2. [Configuring the camera](docs/tutorials/camera.md)3. [Rendering the scene](docs/tutorials/renderer.md)4. [Writing the results to file](docs/tutorials/writer.md)5. [How key frames work](docs/tutorials/key_frames.md)6. [Positioning objects via the physics simulator](docs/tutorials/physics.md)### ExamplesWe provide a lot of [examples](examples/README.md) which explain all features in detail and should help you understand how BlenderProc works. Exploring our examples is the best way to learn about what you can do with BlenderProc. We also provide support for some datasets.* [Basic scene](examples/basics/basic/README.md): Basic example, this is the ideal place to start for beginners* [Camera sampling](examples/basics/camera_sampling/README.md): Sampling of different camera positions inside of a shape with constraints for the rotation.* [Object manipulation](examples/basics/entity_manipulation/README.md): Changing various parameters of objects.* [Material manipulation](examples/basics/material_manipulation/README.md): Material selecting and manipulation.* [Physics positioning](examples/basics/physics_positioning/README.md): Enabling simple simulated physical interactions between objects in the scene.* [Semantic segmentation](examples/basics/semantic_segmentation/README.md): Generating semantic segmentation labels for a given scene.* [BOP Challenge](README_BlenderProc4BOP.md): Generate the pose-annotated data used at the BOP Challenge 2020* [COCO annotations](examples/advanced/coco_annotations/README.md): Write COCO annotations to a .json file for selected objects in the scene.and much more, see our [examples](examples/README.md) for more details.## ContributionsFound a bug? help us by reporting it. Want a new feature in the next BlenderProc release? Create an issue. Made something useful or fixed a bug? Start a PR. Check the [contributions guidelines](CONTRIBUTING.md).## Change logSee our [change log](change_log.md). ## Citation If you use BlenderProc in a research project, please cite as follows:```@article{denninger2019blenderproc,  title={BlenderProc},  author={Denninger, Maximilian and Sundermeyer, Martin and Winkelbauer, Dominik and Zidan, Youssef and Olefir, Dmitry and Elbadrawy, Mohamad and Lodhi, Ahsan and Katam, Harinandan},  journal={arXiv preprint arXiv:1911.01911},  year={2019}}```---&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.dlr.de/EN/Home/home_node.html&quot;&gt;&lt;img src=&quot;images/logo.svg&quot; hspace=&quot;3%&quot; vspace=&quot;60px&quot;&gt;&lt;/a&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>