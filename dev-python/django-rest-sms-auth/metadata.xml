<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django rest sms auth* Authentication users* Change phone number* Providers:     * Megafon    * Smsaero    * Twilio### Requirements+ Python &gt;= 3.0+ Django &gt;= 2.0+ Celery+ Djangorestframework+ Django-phonenumber-field### Concept1. Client send phone number2. `smsauth` validate and create `sms code`3. `sms provider` send digit code4.  Client send `{sms code + phone number}`5.  Response info (`jwt token`)### Notes* Library use `celery`. [Instruction](https://github.com/a1k89/blog/wiki/Make-django-asynchronous-through-celery)* To use `twilio` install [extra library](https://www.twilio.com/docs/libraries/python)* You may add your own provider inherit from `SMSProvider`### Installation```commandlinepip install django-rest-sms-auth```If you want to use `twilio`:```commandlinepip install twilio````settings.py````pythonINSTALLED_APPS = [    'django.contrib.admin',    'django.contrib.auth',    ...    'sms_auth',  # you have to add this    'sms_auth.providers.twilio' # if twilio provider    'sms_auth.providers.megafon' # if megafon provider]SMS_AUTH_SETTINGS = {    &quot;SMS_CELERY_FILE_NAME&quot;: &quot;run_celery&quot;, # your system celery file,    &quot;SMS_AUTH_SUCCESS_KEY&quot;: &quot;jwt_token&quot;, # property from user model    &quot;SMS_AUTH_PROVIDER_FROM&quot;: &quot;ex: +7542222222&quot;, # sms signature    # If twilio    &quot;SMS_AUTH_ACCOUNT_SID&quot;: &quot;Twilio SID&quot;    &quot;SMS_AUTH_AUTH_TOKEN&quot;: &quot;Twilio token&quot;    # If another provider    &quot;SMS_AUTH_PROVIDER_LOGIN&quot;:&quot;SMS provider login&quot;    &quot;SMS_AUTH_PROVIDER_PASSWORD&quot;: &quot;SMS provider password&quot;}```Add `celery` configuration file:  [Instruction](https://github.com/a1k89/blog/wiki/Make-django-asynchronous-through-celery)run migrations:```pythonpython manage.py makemigrations sms_auth &amp;&amp; python manage.py migrate````urls.py````pythonpath('auth/', include('sms_auth.api.urls'))```Library is ready to use.### Usage1. Sign-in / sign-up:```commandPOST /auth/sign-in/body: {    &quot;phone_number&quot;:&quot;user phone number&quot;}result: 200/400 response```2. Code validation and get token:```commandPOST /auth/auth/body: {    &quot;phone_number&quot;:&quot;user phone number&quot;,    &quot;code&quot;:sms_code}result: 200/400 response (with token)```3. Change phone number:```commandPOST /auth/change-phonenumber/body: {    &quot;new_phone_number&quot;:&quot;user new phone number&quot;}result: 200/400 response```After your call previous endpoint: `/auth/auth` and send new phone number with code.### ExtraTo clear all expired sms codes```pythonpython manage.py clear_expired```Additional settings:```&quot;SMS_AUTH_CODE_LEN&quot;: int (default: 4)&quot;SMS_DEBUG&quot;: bool (default: False)&quot;SMS_DEBUG_CODE&quot;: int (when debug, default 1111)&quot;SMS_USER_FIELD&quot;: &quot;username&quot; &quot;SMS_TIMELIFE&quot;: 60 # life time of each sms code&quot;SMS_CODE_NOT_FOUND&quot;: &quot;Some text when code not found&quot;&quot;SMS_WAIT_TIME&quot;: &quot;Some text when sms was sended&quot;&quot;SMS_REQUEST_SUCCESS&quot;: &quot;Some text when success phone validatioin and sms sended to user&quot;,&quot;SMS_AUTH_DEBUG_PHONE_NUMBER&quot;: phone number with always SMS_DEBUG_CODE```</longdescription>
</pkgmetadata>