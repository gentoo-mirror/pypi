<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SearchkitPython library providing tools to search files in parallel.## Search TypesDifferent types of search are supported. Add one or more search definition to a `FileSearcher` object, registering them against a file, directory or glob path. Results are collected and returned as a `SearchResultsCollection` which provides different ways to retrieve results.### Simple SearchThe `SearchDef` class supports matching one or more patterns against each line in a file. Patterns are executed until the first match is found.When defining a search, you can optionally specify field names so that result values can be retrieved by name rather than index e.g. for the following content:```    PID TTY          TIME CMD 111024 pts/4    00:00:00 bash 111031 pts/4    00:00:00 ps```You can define as search as follows:```pythonSearchDef(r'.*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)')```and retrieve results with:```pythonfor r in results:    pid = r.get(1)    tty = r.get(2)    time = r.get(3)    cmd = r.get(4)```or alternatively:```pythonfor r in results:    pid, tty, time, cmd = r```or you can provide field names and types:```pythonfields = ResultFieldInfo({'PID': int, 'TTY': str, 'TIME': str, 'CMD': str})SearchDef(r'.*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)', field_info=fields)```and retrieve results with:```pythonfor r in results:    pid = r.PID    tty = r.TTY    time = r.TIME    cmd = r.CMD```### Sequence SearchThe `SequenceSearchDef` class supports matching string sequences (&quot;sections&quot;) over multiple lines by matching a start, end and optional body in between. These section components are each defined with their own `SearchDef` object.## Installationsearchkit is packaged in [pypi](https://pypi.org/project/searchkit) and can be installed as follows:```consolesudo apt install python3-pippip install searchkit```## Example UsageAn example simple search is as follows:```pythonfrom searchkit import FileSearcher, SearchDeffname = 'foo.txt'open(fname, 'w').write('the quick brown fox')fs = FileSearcher()fs.add(SearchDef(r'.+ \S+ (\S+) .+'), fname)results = fs.run()for r in results.find_by_path(fname):    print(r.get(1))```An example sequence search is as follows:```pythonfrom searchkit import FileSearcher, SequenceSearchDef, SearchDefcontent = &quot;&quot;&quot;Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: invalid literal for int() with base 10: 'foo'&quot;&quot;&quot;fname = 'my.log'open(fname, 'w').write(content)start = SearchDef(r'Traceback')body = SearchDef(r'.+')# terminate sequence with start of next or EOF so no end def needed.fs = FileSearcher()fs.add(SequenceSearchDef(start, tag='myseq', body=body), fname)results = fs.run()for seq, results in results.find_sequence_by_tag('myseq').items():    for r in results:        if 'body' in r.tag:            print(r.get(0))```</longdescription>
</pkgmetadata>