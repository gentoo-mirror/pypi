<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Asyncz&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://asyncz.tarsil.io&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/tarsild/image/upload/v1687363326/packages/asyncz/asyncz-new_wiyih8.png&quot; alt='Asyncz'&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;üöÄ The scheduler that simply works. üöÄ&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tarsil/asyncz/workflows/Test%20Suite/badge.svg?event=push&amp;branch=main&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/tarsil/asyncz/workflows/Test%20Suite/badge.svg?event=push&amp;branch=main&quot; alt=&quot;Test Suite&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/asyncz&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/asyncz?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/asyncz&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/asyncz.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: [https://asyncz.tarsild.io](https://asyncz.tarsild.io) üìö**Source Code**: [https://github.com/tarsil/asyncz](https://github.com/tarsil/asyncz)---Asyncz is a scheduler for any ASGI application that needs to have those complicated scheduled operations with thebest of what pydantic can offer.## MotivationNowadays using async frameworks with python is somewhat common and becoming even more mainstream. A lot of applicationsusually need a complex stack of technologies to fullfil their needs and directly or indirectly, a scheduler.There are great frameworks out there that do the task extremely well, the best example is APScheduler, which is whereAsyncz came from.To be even more honest, Asyncz is a revamp of APScheduler. Without the APScheduler there is no Asyncz, so much thateven the APScheduler tests are used within asyncz. That is how great APScheduler is!So what was the reason why recreating another similar version of APScheduler? Well, it is not entirely the samething. Asyncz was designed to work only with ASGI and AsyncIO as well as integrating pydantic and bring the modernpython into the table.APScheduler is widely used by millions of python developers and Asyncz **does not aim to replace** it, insteadis a more focused and optimised solution for async and ASGI frameworks out there.See the [vendors](./vendors/apscheduler/README.md) for more details.## LoggingWe all struggle with the logging and the configurations and with that in mind Asyncz comes with natice supportfor loguru.This will make the logging a lot easier to understand and clear to read.## Async and ASGIWhat does this mean? Well, Asyncz does not need to run inside any specific framework, actually you can use itcompletely indepent from any framework as well as inside ASGI frameworks such as[Esmerald](https://esmerald.dymmond.com), FastAPI, Starlette, Starlite, Quart... You can pick one and go for it.Asyncz comes with special support to [Esmerald](https://esmerald.dymmond.com) for the simple reason that the author isthe same but it can be added more support. If you are interested in adding support to your favourite frameworks thensee the [contributing](https://asyncz.tarsild.io/contributing.md) section.## ConceptsLike APScheduler, Asyncz also brings four kinds of components:* [Schedulers](https://asyncz.tarsild.io/schedulers.md)* [Triggers](https://asyncz.tarsild.io/triggers.md)* [Stores](https://asyncz.tarsild.io/stores.md)* [Executors](https://asyncz.tarsild.io/executors.md)## Requirements* Python 3.7+Asyncz wouldn't be possible without two giants:* &lt;a href=&quot;https://apscheduler.readthedocs.io/en/3.x/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;APScheduler&lt;/a&gt;* &lt;a href=&quot;https://pydantic-docs.helpmanual.io/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Pydantic&lt;/a&gt;## Installation```shell$ pip install asyncz```## The right decisionsHow do you know if you are choosing the right [scheduler](https://asyncz.tarsild.io/schedulers.md),[triggers](https://asyncz.tarsild.io/triggers.md), [stores](https://asyncz.tarsild.io/stores.md)and [executors](https://asyncz.tarsild.io/executors.md)?Well, Asyncz is intentionally designed for specific systems and already helps you out with some ofthose questions.* **Schedulers** - Natively only supports the [AsyncIOScheduler](https://asyncz.tarsild.io/schedulers.md#asyncioscheduler).* **Triggers** - Here it will depend of the periocidity of our tasks. Example:    * [CronTrigger](https://asyncz.tarsild.io/triggers.md#crontrigger) - UNIX like cron and gives you the same feeling asscheduling a task on a native UNIX like based system.    * [DateTrigger](https://asyncz.tarsild.io/triggers.md#datetrigger) - When you need to run a task once on a specificpoint of time.    * [IntervalTrigger](https://asyncz.tarsild.io/triggers.md#intervaltrigger) - When you need to run tasks in specificintervals of time.    * [OrTrigger](https://asyncz.tarsild.io/triggers.md#ortrigger)/[AndTrigger](https://asyncz.tarsild.io/triggers.md#andtrigger) - If you wouldlike to combine more than one trigger (cron, interval and date) together.* **Stores** - Natively only supports [redis](https://asyncz.tarsild.io/stores.md#redisstore),[mongo](https://asyncz.tarsild.io/stores.md#mongodbstore) and [memory](https://asyncz.tarsild.io/stores.md#memorystore).* **Executors** - Natively only supports [AsyncIOExecutor](https://asyncz.tarsild.io/executors.md#asyncioexecutor),[ThreadPoolExecutor](https://asyncz.tarsild.io/executors.md#threadpoolexecutor) and[ProcessPoolExecutor](https://asyncz.tarsild.io/executors.md#processpoolexecutor).Sometimes having a lot of options makes the decision making very hard and Asyncz is intentionallydesigned and driven to simplify and for specific use cases but is not limited to those. In everysection you have the option of uilding your own stores, executors, triggers and schedulers.## Configuring the schedulerDue its simplificy, Asyncz provides some ways of configuring the scheduler for you.First way:```pythonfrom asyncz.schedulers.asyncio import AsyncIOSchedulerscheduler = AsyncIOScheduler()```Second way:```pythonfrom asyncz.schedulers import AsyncIOSchedulerscheduler = AsyncIOScheduler()```Initialize the rest of the application after the `scheduler` initialisation.More [details](https://asyncz.tarsild.io/schedulers.md) can be found with more thorough explanations.This is in simple terms and in a nutshell how to start with Asyncz quickly. For more information,details and examples how to leverage Asyncz simply navigate through the documentation and havefun üòÅüéâ.## ASGI supportAsyncz currently supports the [Esmerald framework](https://asyncz.tarsild.io/contrib/esmerald/index.md)and brings some batteries that are currently used by the framework and leveraging Asyncz.If you wish to have support to any other framework such as FastAPI, Starlite, Starlette orliterally any other, check the [contributing](https://asyncz.tarsild.io/contributing.md) section and see how you cando it.## SponsorsCurrently there are no sponsors of **Asyncz** but you can financially help and support the author though[GitHub sponsors](https://github.com/sponsors/tarsil) and become a **Special one** or a **Legend**.</longdescription>
</pkgmetadata>