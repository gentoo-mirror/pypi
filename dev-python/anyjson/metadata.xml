<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>##############################anyjson - JSON library wrapper##############################Overview--------Anyjson loads whichever is the fastest JSON module installed and providesa uniform API regardless of which JSON implementation is used.Originally part of carrot (http://github.com/ask/carrot/)Examples--------To serialize a python object to a JSON string, call the `serialize` function:&gt;&gt;&gt; import anyjson&gt;&gt;&gt; anyjson.serialize([&quot;test&quot;, 1, {&quot;foo&quot;: 3.141592}, &quot;bar&quot;])'[&quot;test&quot;, 1, {&quot;foo&quot;: 3.141592}, &quot;bar&quot;]'Conversion the other way is done with the `deserialize` call.&gt;&gt;&gt; anyjson.deserialize(&quot;&quot;&quot;[&quot;test&quot;, 1, {&quot;foo&quot;: 3.141592}, &quot;bar&quot;]&quot;&quot;&quot;)['test', 1, {'foo': 3.1415920000000002}, 'bar']Regardless of the JSON implementation used, the exceptions will be the same.This means that trying to serialize something not compatible with JSONraises a TypeError:&gt;&gt;&gt; anyjson.serialize([object()])Traceback (most recent call last):  &lt;snipped traceback&gt;TypeError: object is not JSON encodableAnd deserializing a JSON string with invalid JSON raises a ValueError:&gt;&gt;&gt; anyjson.deserialize(&quot;&quot;&quot;['missing square brace!&quot;&quot;&quot;)Traceback (most recent call last):  &lt;snipped traceback&gt;ValueError: cannot parse JSON descriptionContact-------The module is maintaned by Rune F. Halvorsen &lt;runefh@gmail.com&gt;.The project resides at http://bitbucket.org/runeh/anyjson . Bugs and featurerequests can be submitted there. Patches are also very welcome.Changelog---------See CHANGELOG fileLicense-------see the LICENSE file</longdescription>
</pkgmetadata>