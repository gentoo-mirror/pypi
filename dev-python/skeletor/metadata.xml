<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Generic badge](https://img.shields.io/badge/Github-pages-green)](https://navis-org.github.io/skeletor/) [![Tests](https://github.com/navis-org/skeletor/actions/workflows/test-package.yml/badge.svg)](https://github.com/navis-org/skeletor/actions/workflows/test-package.yml) [![DOI](https://zenodo.org/badge/153085435.svg)](https://zenodo.org/badge/latestdoi/153085435)# SkeletorUnlike its [namesake](https://en.wikipedia.org/wiki/Skeletor), this Python 3library does not (yet) seek to conquer Eternia but to turn meshes into skeletons._Heads-up: skeletor `1.0.0` introduced some breaking changes and major reorganizations.__Please see the [changelog](https://github.com/navis-org/skeletor/blob/master/NEWS.md)__for details._## Install```bashpip3 install skeletor```For the dev version:```bashpip3 install git+https://github.com/navis-org/skeletor@master```#### DependenciesAutomatically installed with `pip`:- `networkx`- `numpy`- `pandas`- `scipy`- `scikit-learn`- `trimesh`- `tqdm`- `python-igraph`- `ncollpyde`Optional because not strictly required for the core functions but highly recommended:- [pyglet](https://pypi.org/project/pyglet/) is required by trimesh to preview meshes/skeletons in 3D: `pip3 install pyglet`- [fastremap](https://github.com/seung-lab/fastremap) for sizeable speed-ups with some methods: `pip3 install fastremap`## DocumentationPlease see the [documentation](https://navis-org.github.io/skeletor/) for details.The change log can be found [here](https://github.com/navis-org/skeletor/blob/master/NEWS.md).## QuickstartFor the impatient a quick example:```Python&gt;&gt;&gt; import skeletor as sk&gt;&gt;&gt; mesh = sk.example_mesh()&gt;&gt;&gt; # To load and use your own mesh instead of the example mesh:&gt;&gt;&gt; # import trimesh as tm&gt;&gt;&gt; # mesh = tm.Trimesh(vertices, faces)  # or...&gt;&gt;&gt; # mesh = tm.load_mesh('mesh.obj')&gt;&gt;&gt; fixed = sk.pre.fix_mesh(mesh, remove_disconnected=5, inplace=False)&gt;&gt;&gt; skel = sk.skeletonize.by_wavefront(fixed, waves=1, step_size=1)&gt;&gt;&gt; skel&lt;Skeleton(vertices=(1258, 3), edges=(1194, 2), method=wavefront)&gt;```All skeletonization methods return a `Skeleton` object. These are justconvenient objects to represent and inspect the results.```Python&gt;&gt;&gt; # location of vertices (nodes)&gt;&gt;&gt; skel.verticesarray([[16744, 36720, 26407],       ...,       [22076, 23217, 24472]])&gt;&gt;&gt; # child -&gt; parent edges&gt;&gt;&gt; skel.edgesarray([[  64,   31],       ...,       [1257, 1252]])&gt;&gt;&gt; # Mapping for mesh to skeleton vertex indices&gt;&gt;&gt; skel.mesh_maparray([ 157,  158, 1062, ...,  525,  474,  547])&gt;&gt;&gt; # SWC table&gt;&gt;&gt; skel.swc.head()   node_id  parent_id             x             y             z    radius0        0         -1  16744.005859  36720.058594  26407.902344  0.0000001        1         -1   5602.751953  22266.756510  15799.991211  7.5425872        2         -1  16442.666667  14999.978516  10887.916016  5.333333&gt;&gt;&gt; # Save SWC file&gt;&gt;&gt; skel.save_swc('skeleton.swc')```If you installed `pyglet` (see above) you can also use `trimesh`'s plottingcapabilities to inspect the results:```Python&gt;&gt;&gt; skel.show(mesh=True)```![skeletor_example](https://github.com/navis-org/skeletor/raw/master/_static/example1.png)## Benchmarks![skeletor_examples](https://github.com/navis-org/skeletor/raw/master/benchmarks/benchmark_2.png)[Benchmarks](https://github.com/navis-org/skeletor/blob/master/benchmarks/skeletor_benchmark.ipynb)were run on a 2018 MacBook Pro (2.2 GHz Core i7, 32Gb memory) with optional`fastremap` dependency installed. Note some of these functions (e.g.contraction and TEASAR/vertex cluster skeletonization) can vary a lot inspeed based on parameterization.## ContributingPull requests are always welcome!## References &amp; AcknowledgmentsMesh contraction and the edge collapse approach are based on this paper:`[1] Au OK, Tai CL, Chu HK, Cohen-Or D, Lee TY. Skeleton extraction by mesh contraction. ACM Transactions on Graphics (TOG). 2008 Aug 1;27(3):44.`The abstract and the paper can be found [here](http://visgraph.cse.ust.hk/projects/skeleton/).Also see [this](https://www.youtube.com/watch?v=-H7n59YQCRM&amp;feature=youtu.be) YouTube video.Some of the code in skeletor was modified from the[Py_BL_MeshSkeletonization](https://github.com/aalavandhaann/Py_BL_MeshSkeletonization)addon for Blender 3D created by #0K Srinivasan Ramachandran and published under GPL3.The mesh TEASAR approach was adapted from the implementation in[meshparty](https://github.com/sdorkenw/MeshParty) by Sven Dorkenwald, CaseySchneider-Mizell and Forrest Collman.</longdescription>
</pkgmetadata>