<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Tests action| |GitHub license| |PyPI version| |PyPI pyversions| |Code style|.. |Tests action| image:: https://github.com/xnx/pyvalem/workflows/tests/badge.svg   :target: https://github.com/xnx/pyvalem/actions.. |GitHub license| image:: https://img.shields.io/github/license/xnx/pyvalem.svg   :target: https://github.com/xnx/pyvalem/blob/master/LICENSE.. |PyPI version| image:: https://img.shields.io/pypi/v/pyvalem.svg   :target: https://pypi.python.org/pypi/pyvalem/.. |PyPI pyversions| image:: https://img.shields.io/pypi/pyversions/pyvalem.svg   :target: https://pypi.python.org/pypi/pyvalem/.. |Code style| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black***********************Introduction to PyValem***********************PyValem is a Python package for parsing, validating, manipulating andinterpreting the chemical formulas, quantum states and labels of atoms, ionsand small molecules.Species and states are specified as strings using a simple and flexible syntax,and may be compared, output in different formats and manipulated using avariety of predefined Python methods.Installation:=============The PyValem package can be installed either from PyPI_ using pip.. code-block:: bash    python3 -m pip install pyvalemor from the source by running (one of the two) from the project source directory... code-block:: bash    # either    python setup.py install    # or    python3 -m pip install .Examples:=========Formula-------The basic (state-less) chemical formulas are represented by the ``Formula`` class.A ``Formula`` object is instantiated from a valid formula string and supports ions,isotopologues, as well as a few special species.The object contains attributes with its HTML and LaTeX representations,and its molar mass... code-block:: pycon    &gt;&gt;&gt; from pyvalem.formula import Formula    &gt;&gt;&gt; # neutral formulas:    &gt;&gt;&gt; Formula('C2H5OH')    C2H5OH    &gt;&gt;&gt; # isotopes:    &gt;&gt;&gt; Formula('(14C)')    (14C)    &gt;&gt;&gt; # ions    &gt;&gt;&gt; [Formula('H3O+'), Formula('(1H)(2H)+'), Formula('Co(H2O)6+2')]    [H3O+, (1H)(2H)+, Co(H2O)6+2]    &gt;&gt;&gt; # special species    &gt;&gt;&gt; [Formula('e-'), Formula('hv')]    [e-, hν]    &gt;&gt;&gt; # formula attributes:    &gt;&gt;&gt; Formula('Ar+2').charge    2    &gt;&gt;&gt; Formula('H2(18O)').html    'H&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;18&lt;/sup&gt;O'    &gt;&gt;&gt; print(Formula('H2(18O)').latex)    \mathrm{H}_{2}{}^{18}\mathrm{O}    &gt;&gt;&gt; Formula('(235U)').mass    235.04392819&quot;Stateful&quot; Species------------------The &quot;stateful&quot; species represent species with (or without) any number of statesattached.The ``StatefulSpecies`` object can be instantiated from a valid string, which consistof a valid ``Formula`` string, followed by a whitespace, followed by asemicolon-delimited sequence of valid ``State`` strings.PyValem supports several different types of state notation.For further information on valid PyValem ``State`` strings, consult the documentation.Examples:.. code-block:: pycon    &gt;&gt;&gt; from pyvalem.stateful_species import StatefulSpecies    &gt;&gt;&gt; stateful_species = StatefulSpecies('Ne+ 1s2.2s2.2p5; 2P_1/2')    &gt;&gt;&gt; stateful_species.formula    Ne+    &gt;&gt;&gt; type(stateful_species.formula)    &lt;class 'pyvalem.formula.Formula'&gt;    &gt;&gt;&gt; stateful_species.states    [1s2.2s2.2p5, 2P_1/2]    &gt;&gt;&gt; state1, state2 = stateful_species.states    &gt;&gt;&gt; type(state1)    &lt;class 'pyvalem.states.atomic_configuration.AtomicConfiguration'&gt;    &gt;&gt;&gt; state1.orbitals    [1s2, 2s2, 2p5]    &gt;&gt;&gt; type(state2)    &lt;class 'pyvalem.states.atomic_term_symbol.AtomicTermSymbol'&gt;    &gt;&gt;&gt; state2.L, state2.J    (1, 0.5)As ``Formula``, also ``StatefulSpecies`` have ``html`` and ``latex`` attributes... code-block:: pycon    &gt;&gt;&gt; print(stateful_species.latex)    \mathrm{Ne}^{+} \; 1s^{2}2s^{2}2p^{5} \; {}^{2}\mathrm{P}_{1/2}    &gt;&gt;&gt; StatefulSpecies('(52Cr)(1H) 1sigma2.2sigma1.1delta2.1pi2; 6SIGMA+; v=0; J=2').html    '&lt;sup&gt;52&lt;/sup&gt;Cr&lt;sup&gt;1&lt;/sup&gt;H 1σ&lt;sup&gt;2&lt;/sup&gt;.2σ&lt;sup&gt;1&lt;/sup&gt;.1δ&lt;sup&gt;2&lt;/sup&gt;.1π&lt;sup&gt;2&lt;/sup&gt; &lt;sup&gt;6&lt;/sup&gt;Σ&lt;sup&gt;+&lt;/sup&gt; v=0 J=2'Reaction--------Finally, the ``Reaction`` class represents a reaction or a collisional process betweenspecies. A ``Reaction`` object is instantiated with a string consisting of valid``Formula`` or ``StatefulSpecies`` strings delimited by ``' + '``, and reaction sidesseparated by ``' -&gt; '``, such as.. code-block:: pycon    &gt;&gt;&gt; from pyvalem.reaction import Reaction    &gt;&gt;&gt; reaction = Reaction('He+2 + H -&gt; He+ 3p1 + H+ + hv')    &gt;&gt;&gt; reaction    He+2 + H → He+ 3p + H+ + hν    &gt;&gt;&gt; reaction.html    'He&lt;sup&gt;2+&lt;/sup&gt; + H → He&lt;sup&gt;+&lt;/sup&gt; 3p + H&lt;sup&gt;+&lt;/sup&gt; + hν'    &gt;&gt;&gt; print(reaction.latex)    \mathrm{He}^{2+} + \mathrm{H} \rightarrow \mathrm{He}^{+} \; 3p + \mathrm{H}^{+} + h\nuThe ``Reaction`` class also watches out for charge balance and stoichiometryconservation during instantiation... code-block:: pycon    &gt;&gt;&gt; Reaction('(2H) + (3H) -&gt; (4He)')    Traceback (most recent call last):    ...    pyvalem.reaction.ReactionStoichiometryError: Stoichiometry not preserved for reaction: (2H) + (3H) -&gt; (4He)    &gt;&gt;&gt; Reaction('e- + Ar -&gt; Ar+ + e-')    Traceback (most recent call last):    ...    pyvalem.reaction.ReactionChargeError: Charge not preserved for reaction: e- + Ar -&gt; Ar+ + e-For Developers:===============It goes without saying that any development should be done in a clean virtualenvironment.After cloning or forking the project from its GitHub_ page, ``pyvalem`` might beinstalled into the virtual environment in editable mode with.. code-block:: bash    pip install -e .[dev]The ``[dev]`` extra installs (apart from the package dependencies) also severaldevelopment-related packages, such as ``pytest``, ``black``, ``tox`` or ``ipython.``The tests can then be executed by running (from the project root directory).. code-block:: bash    # either    pytest    # or    toxThe project does not have ``requirements.txt`` by design, all the package dependenciesare rather handled by ``setup.py``.The package needs to be installed to run the tests, which grants the testing processanother layer of usefulness.Docstrings in the project adhere to the numpydoc_ styling.The project code is formatted by ``black``.Always make sure to format your code before submitting a pull request, by running``black`` on all your python files... _GitHub: https://github.com/xnx/pyvalem.. _PyPI: https://pypi.org/project/pyvalem/.. _numpydoc: https://numpydoc.readthedocs.io/en/latest/format.html</longdescription>
</pkgmetadata>