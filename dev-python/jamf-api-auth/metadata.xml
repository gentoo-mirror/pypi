<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Jamf AuthJamf Auth provides automatically-refreshing token authentication for the Jamf Pro API to the Python Requests module.## Install itTo install Jamf Auth, run the following:```shpip install jamf-api-auth```Or, place the following in your Pipfile:```toml[packages]jamf-api-auth```## Use it```pythonimport requestsfrom jamf_auth import JamfAuthfrom os import environusername = environ[&quot;JAMF_USERNAME&quot;]password = environ[&quot;JAMF_PASSWORD&quot;]with JamfAuth(&quot;https://jss.example.com:8443&quot;, username, password) as jamfauth:    r = requests.get(&quot;https://jss.example.com:8443/api/v2/mobile-devices&quot;, auth=jamfauth)    print(r.json()[&quot;totalCount&quot;])&gt;&gt;&gt; 42```Using JamfAuth in a `with` statement ensures that a token is created and refreshed only for as long as you need. Once Python leaves the `with` statement (even if there is an exception inside), JamfAuth invalidates its token.Retrieving the token for the first time is slower than refreshing it later, so make sure you're not entering and leaving many `with` statements.### Advanced usage#### Improving performance with a SessionIf your process requires several requests to the same Jamf server, you can see significantly improved performance using a [requests.Session() object](https://requests.readthedocs.io/en/master/user/advanced/). To make things even easier, you can set your JamfAuth instance as the default auth parameter on your session. Then you won't have to pass it in every time:```pythonwith requests.Session() as s, JamfAuth(url, username, password) as jamfauth:    jamf_session.auth = jamfauth    r = s.get(&quot;https://jss.example.com:8443/api/v2/mobile-devices&quot;) # auth= is gone!    print(r.json()[&quot;totalCount&quot;])&gt;&gt;&gt; 42```#### Handling token refreshYour JamfAuth instance handles refreshing its token automatically. It will check whether it needs to refresh on every use by default. If the check finds that less than 20% of the token's lifespan remains, it will be refreshed with the relatively quick `/auth/keep-alive` endpoint. If `/auth/keep-alive` fails (for example, because the token has already expired), JamfAuth will use the username and password instead.If you want to make sure your token is valid all the time (for example, you don't want to incur the overhead of logging in with a username and password), run `JamfAuth.refresh_auth_if_needed()` frequently. How often your tokens will expire depends on the configuration of your Jamf server, so run it as often as it makes sense for your environment.## Develop itTo get started developing Jamf Auth, clone this repository:```git clone https://gitlab.com/cvtc/appleatcvtc/jamfauth.gitcd jamfauth```This repository contains a Pipfile for easy management of virtual environmentswith Pipenv. Run it, but don't create a lockfile, to install the developmentdependencies:```pipenv install --skip-lock --dev```To run the tests and get coverage information, run:```pipenv run pytest --cov=jamf_auth --cov-branch --cov-report=xml --cov-report=term```We format files with Black prior to committing. Black is installed in yourPipenv virtual environment. Run it like this before you commit:```pipenv run black .```## AuthorDalton Durst [@UniversalSuperBox](https://github.com/UniversalSuperBox)MIT LicenseCopyright (c) 2022 Chippewa Valley Technical CollegePermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>