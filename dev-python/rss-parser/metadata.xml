<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Rss parser[![Downloads](https://pepy.tech/badge/rss-parser)](https://pepy.tech/project/rss-parser)[![Downloads](https://pepy.tech/badge/rss-parser/month)](https://pepy.tech/project/rss-parser)[![Downloads](https://pepy.tech/badge/rss-parser/week)](https://pepy.tech/project/rss-parser)[![PyPI version](https://img.shields.io/pypi/v/rss-parser)](https://pypi.org/project/rss-parser)[![Python versions](https://img.shields.io/pypi/pyversions/rss-parser)](https://pypi.org/project/rss-parser)[![Wheel status](https://img.shields.io/pypi/wheel/rss-parser)](https://pypi.org/project/rss-parser)[![License](https://img.shields.io/pypi/l/rss-parser?color=success)](https://github.com/dhvcc/rss-parser/blob/master/LICENSE)![Docs](https://github.com/dhvcc/rss-parser/actions/workflows/pages/pages-build-deployment/badge.svg)![CI](https://github.com/dhvcc/rss-parser/actions/workflows/ci.yml/badge.svg?branch=master)![PyPi publish](https://github.com/dhvcc/rss-parser/actions/workflows/publish_to_pypi.yml/badge.svg)## About`rss-parser` is typed python RSS parsing module built using [pydantic](https://github.com/pydantic/pydantic) and [xmltodict](https://github.com/martinblech/xmltodict)## Installation```bashpip install rss-parser```or```bashgit clone https://github.com/dhvcc/rss-parser.gitcd rss-parserpoetry buildpip install dist/*.whl```## Usage### Quickstart```pythonfrom rss_parser import Parserfrom requests import getrss_url = &quot;https://rss.art19.com/apology-line&quot;response = get(rss_url)rss = Parser.parse(response.text)# Print out rss meta dataprint(&quot;Language&quot;, rss.channel.language)print(&quot;RSS&quot;, rss.version)# Iteratively print feed itemsfor item in rss.channel.items:    print(item.title)    print(item.description[:50])# Language en# RSS 2.0# Wondery Presents - Flipping The Bird: Elon vs Twitter# &lt;p&gt;When Elon Musk posted a video of himself arrivi# Introducing: The Apology Line# &lt;p&gt;If you could call a number and say youâ€™re sorry```Here we can see that description is still somehow has &lt;p&gt; - this is beacause it's placed as [CDATA](https://www.w3resource.com/xml/CDATA-sections.php) like so```xml&lt;![CDATA[&lt;p&gt;If you could call ...&lt;/p&gt;]]&gt;```### Overriding schemaIf you want to customize the schema or provide a custom one - use `schema` keyword argument of the parser```pythonfrom rss_parser.models import XMLBaseModelfrom rss_parser.models.rss import RSSfrom rss_parser.models.types import Tagclass CustomSchema(RSS, XMLBaseModel):    channel: None = None # Removing previous channel field    custom: Tag[str]with open(&quot;tests/samples/custom.xml&quot;) as f:    data = f.read()rss = Parser.parse(data, schema=CustomSchema)print(&quot;RSS&quot;, rss.version)print(&quot;Custom&quot;, rss.custom)# RSS 2.0# Custom Custom tag data```### xmltodictThis library uses [xmltodict](https://github.com/martinblech/xmltodict) to parse XML data. You can see the detailed documentation [here](https://github.com/martinblech/xmltodict#xmltodict)The basic thing you should know is that your data is processed into dictionariesFor example, this data```xml&lt;tag&gt;content&lt;/tag&gt;```will result in the following```python{    &quot;tag&quot;: &quot;content&quot;}```*But*, when handling attributes, the content of the tag will be also a dictionary```xml&lt;tag attr=&quot;1&quot; data-value=&quot;data&quot;&gt;data&lt;/tag&gt;```Turns into```python{    &quot;tag&quot;: {        &quot;@attr&quot;: &quot;1&quot;,        &quot;@data-value&quot;: &quot;data&quot;,        &quot;#text&quot;: &quot;content&quot;    }}```### Tag fieldThis is a generic field that handles tags as raw data or a dictonary returned with attributes*Although this is a complex class, it forwards most of the methods to it's content attribute, so you don't notice a difference if you're only after the .content value*Example```pythonfrom rss_parser.models import XMLBaseModelclass Model(XMLBaseModel):     number: Tag[int]     string: Tag[str]m = Model(    number=1,    string={'@attr': '1', '#text': 'content'},)m.number.content == 1  # Content value is an integer, as per the generic typem.number.content + 10 == m.number + 10  # But you're still able to use the Tag itself in common operatorsm.number.bit_length() == 1  # As it's the case for methods/attributes not found in the Tag itselftype(m.number), type(m.number.content) == (&lt;class 'rss_parser.models.image.Tag[int]'&gt;, &lt;class 'int'&gt;)  # types are NOT the same, however, the interfaces are very similar most of the timem.number.attributes == {}  # The attributes are empty by defaultm.string.attributes == {'attr': '1'}  # But are populated when provided. Note that the @ symbol is trimmed from the beggining, however, camelCase is not converted# Generic argument types are handled by pydantic - let's try to provide a string for a Tag[int] numberm = Model(number='not_a_number', string={'@customAttr': 'v', '#text': 'str tag value'})  # This will lead in the following traceback# Traceback (most recent call last):#     ...# pydantic.error_wrappers.ValidationError: 1 validation error for Model# number -&gt; content#     value is not a valid integer (type=type_error.integer)```**If you wish to avoid all of the method/attribute forwarding &quot;magic&quot; - you should use `rss_parser.models.types.TagRaw`**## ContributingPull requests are welcome. For major changes, please open an issue firstto discuss what you would like to change.Install dependencies with `poetry install` (`pip install poetry`)`pre-commit` usage is highly recommended. To install hooks run```bashpoetry run pre-commit install -t=pre-commit -t=pre-push```## License[GPLv3](https://github.com/dhvcc/rss-parser/blob/master/LICENSE)</longdescription>
</pkgmetadata>