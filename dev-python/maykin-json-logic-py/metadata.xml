<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>json-logic-py=============This parser accepts `JsonLogic &lt;http://jsonlogic.com&gt;`__ rules andexecutes them in Python.This is a fork of `json-logic-py &lt;https://github.com/nadirizr/json-logic-py&gt;`__ by`nadir.izr &lt;https://github.com/nadirizr&gt;`__, which is a Python porting of theGitHub project by `jwadhams &lt;https://github.com/jwadhams&gt;`__ for JavaScript:`json-logic-js &lt;https://github.com/jwadhams/json-logic-js&gt;`__.The JsonLogic format is designed to allow you to share rules (logic)between front-end and back-end code (regardless of language difference),even to store logic along with a record in a database. JsonLogic isdocumented extensively at `JsonLogic.com &lt;http://jsonlogic.com&gt;`__,including examples of every `supportedoperation &lt;http://jsonlogic.com/operations.html&gt;`__ and a place to `tryout rules in your browser &lt;http://jsonlogic.com/play.html&gt;`__.The same format can also be executed in PHP by the library`json-logic-php &lt;https://github.com/jwadhams/json-logic-php/&gt;`__Examples--------Simple~~~~~~.. code:: python    from json_logic import jsonLogic    jsonLogic( { &quot;==&quot; : [1, 1] } )    # TrueThis is a simple test, equivalent to ``1 == 1``. A few things about theformat:1. The operator is always in the &quot;key&quot; position. There is only one key   per JsonLogic rule.2. The values are typically an array.3. Each value can be a string, number, boolean, array (non-associative),   or nullCompound~~~~~~~~Here we're beginning to nest rules... code:: python    jsonLogic(      {&quot;and&quot; : [        { &quot;&gt;&quot; : [3,1] },        { &quot;&lt;&quot; : [1,3] }      ] }    )    # TrueIn an infix language (like Python) this could be written as:.. code:: python    ( (3 &gt; 1) and (1 &lt; 3) )Data-Driven~~~~~~~~~~~Obviously these rules aren't very interesting if they can only takestatic literal data. Typically ``jsonLogic`` will be called with a ruleobject and a data object. You can use the ``var`` operator to getattributes of the data object:.. code:: python    jsonLogic(      { &quot;var&quot; : [&quot;a&quot;] }, # Rule      { a : 1, b : 2 }   # Data    )    # 1If you like, we support `syntacticsugar &lt;https://en.wikipedia.org/wiki/Syntactic_sugar&gt;`__ on unaryoperators to skip the array around values:.. code:: python    jsonLogic(      { &quot;var&quot; : &quot;a&quot; },      { a : 1, b : 2 }    )    # 1You can also use the ``var`` operator to access an array by numericindex:.. code:: python    jsonLogic(      {&quot;var&quot; : 1 },      [ &quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot; ]    )    # &quot;banana&quot;Here's a complex rule that mixes literals and data. The pie isn't readyto eat unless it's cooler than 110 degrees, *and* filled with apples... code:: python    rules = { &quot;and&quot; : [      {&quot;&lt;&quot; : [ { &quot;var&quot; : &quot;temp&quot; }, 110 ]},      {&quot;==&quot; : [ { &quot;var&quot; : &quot;pie.filling&quot; }, &quot;apple&quot; ] }    ] }    data = { &quot;temp&quot; : 100, &quot;pie&quot; : { &quot;filling&quot; : &quot;apple&quot; } }    jsonLogic(rules, data)    # TrueDates~~~~~You can use the ``date`` operator to include dates in the json logic. The dates are internally converted to ``datetime.date``objects, and then the comparison is performed... code:: python    rule = {&quot;&lt;=&quot;: [{&quot;date&quot;: {&quot;var&quot;: &quot;testDate&quot;}}, {&quot;date&quot;: &quot;2021-01-01&quot;}]}    data = {&quot;testDate&quot;: &quot;2020-01-01&quot;}    jsonLogic(rule, data)    # TrueThe operator ``{&quot;today&quot;: []}`` gets the current date. It is also possible to add/subtract years to a date. This makes useof ``relativedelta`` from ``dateutils``... code:: python    rule = {&quot;-&quot;: [{&quot;date&quot;: &quot;2021-01-01&quot;}, {&quot;years&quot;: 18}]}    jsonLogic(rule)    # date(2003, 1, 1)Datetimes~~~~~~~~~You can use the ``datetime`` operator to include datetimes in the json logic. The datetimes are internally converted to ``datetime.datetime``objects, and then the comparison is performed... code:: python    rule = {        &quot;&lt;=&quot;: [            {&quot;datetime&quot;: {&quot;var&quot;: &quot;testDatetime&quot;}},            {&quot;datetime&quot;: &quot;2022-12-01T10:00:00.000+02:00&quot;},        ]    }    data = {&quot;testDatetime&quot;: &quot;2022-11-01T10:00:00.000+02:00&quot;}    jsonLogic(rule, data)    # TrueAlways and Never~~~~~~~~~~~~~~~~Sometimes the rule you want to process is &quot;Always&quot; or &quot;Never.&quot; If thefirst parameter passed to ``jsonLogic`` is a non-object,non-associative-array, it is returned immediately... code:: python    #Always    jsonLogic(True, data_will_be_ignored);    # True    #Never    jsonLogic(False, i_wasnt_even_supposed_to_be_here);    # FalseInstallation------------The best way to install this library is via`PIP &lt;https://pypi.python.org/pypi/&gt;`__:.. code:: bash    pip install json-logicIf that doesn't suit you, and you want to manage updates yourself, theentire library is self-contained in ``json_logic.py`` and you candownload it straight into your project as you see fit... code:: bash    curl -O https://raw.githubusercontent.com/nadirizr/json-logic-py/master/json_logic.py</longdescription>
</pkgmetadata>