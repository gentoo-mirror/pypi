<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Stability](https://img.shields.io/badge/stability-alpha-f4d03f.svg)](https://github.com/Qiskit-Extensions/quantum-serverless/releases)[![Client verify process](https://github.com/Qiskit-Extensions/quantum-serverless/actions/workflows/client-verify.yaml/badge.svg)](https://github.com/Qiskit-Extensions/quantum-serverless/actions/workflows/client-verify.yaml)[![License](https://img.shields.io/github/license/qiskit-community/quantum-prototype-template?label=License)](https://github.com/qiskit-community/quantum-prototype-template/blob/main/LICENSE.txt)[![Code style: Black](https://img.shields.io/badge/Code%20style-Black-000.svg)](https://github.com/psf/black)[![Python](https://img.shields.io/badge/Python-3.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-informational)](https://www.python.org/)[![Qiskit](https://img.shields.io/badge/Qiskit-%E2%89%A5%200.39.0-6133BD)](https://github.com/Qiskit/qiskit)# Quantum Serverless client![diagram](https://raw.githubusercontent.com/Qiskit-Extensions/quantum-serverless/main/docs/images/qs_diagram.png)# Installation```shellpip install quantum_serverless```## DocumentationFull docs can be found at https://qiskit-extensions.github.io/quantum-serverless/## Usage### Step 1: write pattern```python  from quantum_serverless import distribute_task, get, get_arguments, save_result   from qiskit import QuantumCircuit   from qiskit.circuit.random import random_circuit   from qiskit.primitives import Sampler   from qiskit.quantum_info import SparsePauliOp   # 1. let's annotate out function to convert it   # to distributed async function   # using `distribute_task` decorator   @distribute_task()   def distributed_sample(circuit: QuantumCircuit):       &quot;&quot;&quot;Calculates quasi dists as a distributed function.&quot;&quot;&quot;       return Sampler().run(circuit).result().quasi_dists[0]   # 2. our program will have one arguments   # `circuits` which will store list of circuits   # we want to sample in parallel.   # Let's use `get_arguments` funciton   # to access all program arguments   arguments = get_arguments()   circuits = arguments.get(&quot;circuits&quot;, [])   # 3. run our functions in a loop   # and get execution references back   function_references = [       distributed_sample(circuit)       for circuit in circuits   ]   # 4. `get` function will collect all   # results from distributed functions   collected_results = get(function_references)   # 5. `save_result` will save results of program execution   # so we can access it later   save_result({       &quot;quasi_dists&quot;: collected_results   })``` ### Step 2: run pattern```python   from quantum_serverless import ServerlessProvider, QiskitPattern   from qiskit.circuit.random import random_circuit   serverless = ServerlessProvider(       username=&quot;&lt;USERNAME&gt;&quot;,        password=&quot;&lt;PASSWORD&gt;&quot;,       host=&quot;&lt;GATEWAY_ADDRESS&gt;&quot;,   )   # create program   program = QiskitPattern(       title=&quot;Quickstart&quot;,       entrypoint=&quot;pattern.py&quot;,       working_dir=&quot;./src&quot;   )   # create inputs to our program   circuits = []   for _ in range(3):       circuit = random_circuit(3, 2)       circuit.measure_all()       circuits.append(circuit)   # run program   job = serverless.run(       program=program,       arguments={           &quot;circuits&quot;: circuits       }   )```### Step 3: monitor job status```python   job.status()   # &lt;JobStatus.SUCCEEDED: 'SUCCEEDED'&gt;       # or get logs   job.logs()```### Step 4: get results```python   job.result()   # {&quot;quasi_dists&quot;: [   #  {&quot;0&quot;: 0.25, &quot;1&quot;: 0.25, &quot;2&quot;: 0.2499999999999999, &quot;3&quot;: 0.2499999999999999},   #  {&quot;0&quot;: 0.1512273969460124, &quot;1&quot;: 0.0400459556274728, &quot;6&quot;: 0.1693190975212014, &quot;7&quot;: 0.6394075499053132},   #  {&quot;0&quot;: 0.25, &quot;1&quot;: 0.25, &quot;4&quot;: 0.2499999999999999, &quot;5&quot;: 0.2499999999999999}   # ]}```</longdescription>
</pkgmetadata>