<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Read Rapid-PE===This is a package to read Rapid-PE outputs.# Install## Install from PyPIThis `read-rapidpe` package is available on PyPI: https://pypi.org/project/read-rapidpe/```pip install read-rapidpe```## Install in dev mode```git clone git@git.ligo.org:yu-kuang.chu/read-rapidpe.gitcd read-rapidpepip install -e . ```# Example Usage## Reading files```pythonfrom read_rapidpe import RapidPE_resultrun_dir = &quot;path/to/run_dir&quot;result = RapidPE_result.from_run_dir(run_dir)```There are three optional arguments:- `use_ligolw` ( default = `True` ) : whether to use `ligo.lw` to read XML files.- `extrinsic_table` ( default = `True` ) : whether to load extrinsic parameter as well.- `parallel_n` ( default = `1` ) : number of parallel jobs when reading XML files.For example, one can do the following to speed up the reading process:```pythonresult = RapidPE_result.from_run_dir(run_dir, use_ligolw=False, extrinsic_table=False, parallel_n=4)```## Plot marginalized log-likelihood on m1-m2 grid points```pythonimport matplotlib.pyplot as plt# Plot marginalized-log-likelihood over intrinsic parameter (mass_1/mass_2) grid pointsplt.scatter(result.mass_1, result.mass_2, c=result.marg_log_likelihood )plt.xlabel(&quot;$m_1$&quot;)plt.ylabel(&quot;$m_2$&quot;)plt.colorbar(label=&quot;$\ln(L_{marg})$&quot;)```## Plot interpolated likelihood```pythonimport matplotlib.pyplot as pltimport numpy as np# Create Random m1, m2 samplesm1 = np.random.random(10000)*5m2 = np.random.random(10000)*5# After calling result.do_interpolate_marg_log_likelihood_m1m2(), # the method result.log_likelihood(m1, m2) will be avalible.result.do_interpolate_marg_log_likelihood_m1m2()# Calculate interpolated log_likelihoodlog_likelihood = result.log_likelihood(m1, m2)# =============== Plotting ===============# Plot interpolated likelihood plt.scatter(m1, m2, c=np.exp(log_likelihood), marker=&quot;.&quot;, s=3, alpha=0.1)# Plot marginalized likelihood on grid pointsplt.scatter(result.mass_1, result.mass_2, c=np.exp(result.marg_log_likelihood), marker=&quot;+&quot;, vmin=0)plt.xlabel(&quot;$m_1$&quot;)plt.ylabel(&quot;$m_2$&quot;)plt.colorbar(label=r&quot;$\mathcal{L}$&quot;)```## Convert to Pandas DataFrame```pythonimport pandas as pdfrom read_rapidpe import RapidPE_grid_pointgrid_point = RapidPE_grid_point.from_xml(&quot;ILE_iteration_xxxxxxxxxx.samples.xml.gz&quot;)pd.DataFrame(grid_point.extrinsic_table)```</longdescription>
</pkgmetadata>