<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>geojson==============.. image:: https://github.com/jazzband/geojson/actions/workflows/test.yml/badge.svg   :target: https://github.com/jazzband/geojson/actions/workflows/test.yml   :alt: GitHub Actions.. image:: https://img.shields.io/codecov/c/github/jazzband/geojson.svg   :target: https://codecov.io/github/jazzband/geojson?branch=main   :alt: Codecov.. image:: https://jazzband.co/static/img/badge.svg   :target: https://jazzband.co/   :alt: JazzbandThis Python library contains:- Functions for encoding and decoding GeoJSON_ formatted data- Classes for all GeoJSON Objects- An implementation of the Python `__geo_interface__ Specification`_**Table of Contents**.. contents::   :backlinks: none   :local:Installation------------geojson is compatible with Python 3.7 - 3.11. The recommended way to install is via pip_:.. code::  pip install geojson.. _PyPi as 'geojson': https://pypi.python.org/pypi/geojson/.. _pip: https://www.pip-installer.orgGeoJSON Objects---------------This library implements all the `GeoJSON Objects`_ described in `The GeoJSON Format Specification`_... _GeoJSON Objects: https://tools.ietf.org/html/rfc7946#section-3All object keys can also be used as attributes.The objects contained in GeometryCollection and FeatureCollection can be indexed directly.Point~~~~~.. code:: python  &gt;&gt;&gt; from geojson import Point  &gt;&gt;&gt; Point((-115.81, 37.24))  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [-115.8..., 37.2...], &quot;type&quot;: &quot;Point&quot;}Visualize the result of the example above `here &lt;https://gist.github.com/frewsxcv/b5768a857f5598e405fa&gt;`__. General information about Point can be found in `Section 3.1.2`_ and `Appendix A: Points`_ within `The GeoJSON Format Specification`_... _Section 3.1.2: https://tools.ietf.org/html/rfc7946#section-3.1.2.. _Appendix A\: Points: https://tools.ietf.org/html/rfc7946#appendix-A.1MultiPoint~~~~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import MultiPoint  &gt;&gt;&gt; MultiPoint([(-155.52, 19.61), (-156.22, 20.74), (-157.97, 21.46)])  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [[-155.5..., 19.6...], [-156.2..., 20.7...], [-157.9..., 21.4...]], &quot;type&quot;: &quot;MultiPoint&quot;}Visualize the result of the example above `here &lt;https://gist.github.com/frewsxcv/be02025c1eb3aa2040ee&gt;`__. General information about MultiPoint can be found in `Section 3.1.3`_ and `Appendix A: MultiPoints`_ within `The GeoJSON Format Specification`_... _Section 3.1.3: https://tools.ietf.org/html/rfc7946#section-3.1.3.. _Appendix A\: MultiPoints: https://tools.ietf.org/html/rfc7946#appendix-A.4LineString~~~~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import LineString  &gt;&gt;&gt; LineString([(8.919, 44.4074), (8.923, 44.4075)])  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [[8.91..., 44.407...], [8.92..., 44.407...]], &quot;type&quot;: &quot;LineString&quot;}Visualize the result of the example above `here &lt;https://gist.github.com/frewsxcv/758563182ca49ce8e8bb&gt;`__. General information about LineString can be found in `Section 3.1.4`_ and `Appendix A: LineStrings`_ within `The GeoJSON Format Specification`_... _Section 3.1.4: https://tools.ietf.org/html/rfc7946#section-3.1.4.. _Appendix A\: LineStrings: https://tools.ietf.org/html/rfc7946#appendix-A.2MultiLineString~~~~~~~~~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import MultiLineString  &gt;&gt;&gt; MultiLineString([  ...     [(3.75, 9.25), (-130.95, 1.52)],  ...     [(23.15, -34.25), (-1.35, -4.65), (3.45, 77.95)]  ... ])  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [[[3.7..., 9.2...], [-130.9..., 1.52...]], [[23.1..., -34.2...], [-1.3..., -4.6...], [3.4..., 77.9...]]], &quot;type&quot;: &quot;MultiLineString&quot;}Visualize the result of the example above `here &lt;https://gist.github.com/frewsxcv/20b6522d8242ede00bb3&gt;`__. General information about MultiLineString can be found in `Section 3.1.5`_ and `Appendix A: MultiLineStrings`_ within `The GeoJSON Format Specification`_... _Section 3.1.5: https://tools.ietf.org/html/rfc7946#section-3.1.5.. _Appendix A\: MultiLineStrings: https://tools.ietf.org/html/rfc7946#appendix-A.5Polygon~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import Polygon  &gt;&gt;&gt; # no hole within polygon  &gt;&gt;&gt; Polygon([[(2.38, 57.322), (-120.43, 19.15), (23.194, -20.28), (2.38, 57.322)]])  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [[[2.3..., 57.32...], [-120.4..., 19.1...], [23.19..., -20.2...]]], &quot;type&quot;: &quot;Polygon&quot;}  &gt;&gt;&gt; # hole within polygon  &gt;&gt;&gt; Polygon([  ...     [(2.38, 57.322), (-120.43, 19.15), (23.194, -20.28), (2.38, 57.322)],  ...     [(-5.21, 23.51), (15.21, -10.81), (-20.51, 1.51), (-5.21, 23.51)]  ... ])  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [[[2.3..., 57.32...], [-120.4..., 19.1...], [23.19..., -20.2...]], [[-5.2..., 23.5...], [15.2..., -10.8...], [-20.5..., 1.5...], [-5.2..., 23.5...]]], &quot;type&quot;: &quot;Polygon&quot;}Visualize the results of the example above `here &lt;https://gist.github.com/frewsxcv/b2f5c31c10e399a63679&gt;`__. General information about Polygon can be found in `Section 3.1.6`_ and `Appendix A: Polygons`_ within `The GeoJSON Format Specification`_... _Section 3.1.6: https://tools.ietf.org/html/rfc7946#section-3.1.6.. _Appendix A\: Polygons: https://tools.ietf.org/html/rfc7946#appendix-A.3MultiPolygon~~~~~~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import MultiPolygon  &gt;&gt;&gt; MultiPolygon([  ...     ([(3.78, 9.28), (-130.91, 1.52), (35.12, 72.234), (3.78, 9.28)],),  ...     ([(23.18, -34.29), (-1.31, -4.61), (3.41, 77.91), (23.18, -34.29)],)  ... ])  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [[[[3.7..., 9.2...], [-130.9..., 1.5...], [35.1..., 72.23...]]], [[[23.1..., -34.2...], [-1.3..., -4.6...], [3.4..., 77.9...]]]], &quot;type&quot;: &quot;MultiPolygon&quot;}Visualize the result of the example above `here &lt;https://gist.github.com/frewsxcv/e0388485e28392870b74&gt;`__. General information about MultiPolygon can be found in `Section 3.1.7`_ and `Appendix A: MultiPolygons`_ within `The GeoJSON Format Specification`_... _Section 3.1.7: https://tools.ietf.org/html/rfc7946#section-3.1.7.. _Appendix A\: MultiPolygons: https://tools.ietf.org/html/rfc7946#appendix-A.6GeometryCollection~~~~~~~~~~~~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import GeometryCollection, Point, LineString  &gt;&gt;&gt; my_point = Point((23.532, -63.12))  &gt;&gt;&gt; my_line = LineString([(-152.62, 51.21), (5.21, 10.69)])  &gt;&gt;&gt; geo_collection = GeometryCollection([my_point, my_line])  &gt;&gt;&gt; geo_collection  # doctest: +ELLIPSIS  {&quot;geometries&quot;: [{&quot;coordinates&quot;: [23.53..., -63.1...], &quot;type&quot;: &quot;Point&quot;}, {&quot;coordinates&quot;: [[-152.6..., 51.2...], [5.2..., 10.6...]], &quot;type&quot;: &quot;LineString&quot;}], &quot;type&quot;: &quot;GeometryCollection&quot;}  &gt;&gt;&gt; geo_collection[1]  {&quot;coordinates&quot;: [[-152.62, 51.21], [5.21, 10.69]], &quot;type&quot;: &quot;LineString&quot;}  &gt;&gt;&gt; geo_collection[0] == geo_collection.geometries[0]  TrueVisualize the result of the example above `here &lt;https://gist.github.com/frewsxcv/6ec8422e97d338a101b0&gt;`__. General information about GeometryCollection can be found in `Section 3.1.8`_ and `Appendix A: GeometryCollections`_ within `The GeoJSON Format Specification`_... _Section 3.1.8: https://tools.ietf.org/html/rfc7946#section-3.1.8.. _Appendix A\: GeometryCollections: https://tools.ietf.org/html/rfc7946#appendix-A.7Feature~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import Feature, Point  &gt;&gt;&gt; my_point = Point((-3.68, 40.41))  &gt;&gt;&gt; Feature(geometry=my_point)  # doctest: +ELLIPSIS  {&quot;geometry&quot;: {&quot;coordinates&quot;: [-3.68..., 40.4...], &quot;type&quot;: &quot;Point&quot;}, &quot;properties&quot;: {}, &quot;type&quot;: &quot;Feature&quot;}  &gt;&gt;&gt; Feature(geometry=my_point, properties={&quot;country&quot;: &quot;Spain&quot;})  # doctest: +ELLIPSIS  {&quot;geometry&quot;: {&quot;coordinates&quot;: [-3.68..., 40.4...], &quot;type&quot;: &quot;Point&quot;}, &quot;properties&quot;: {&quot;country&quot;: &quot;Spain&quot;}, &quot;type&quot;: &quot;Feature&quot;}  &gt;&gt;&gt; Feature(geometry=my_point, id=27)  # doctest: +ELLIPSIS  {&quot;geometry&quot;: {&quot;coordinates&quot;: [-3.68..., 40.4...], &quot;type&quot;: &quot;Point&quot;}, &quot;id&quot;: 27, &quot;properties&quot;: {}, &quot;type&quot;: &quot;Feature&quot;}Visualize the results of the examples above `here &lt;https://gist.github.com/frewsxcv/4488d30209d22685c075&gt;`__. General information about Feature can be found in `Section 3.2`_ within `The GeoJSON Format Specification`_... _Section 3.2: https://tools.ietf.org/html/rfc7946#section-3.2FeatureCollection~~~~~~~~~~~~~~~~~.. code:: python  &gt;&gt;&gt; from geojson import Feature, Point, FeatureCollection  &gt;&gt;&gt; my_feature = Feature(geometry=Point((1.6432, -19.123)))  &gt;&gt;&gt; my_other_feature = Feature(geometry=Point((-80.234, -22.532)))  &gt;&gt;&gt; feature_collection = FeatureCollection([my_feature, my_other_feature])  &gt;&gt;&gt; feature_collection # doctest: +ELLIPSIS  {&quot;features&quot;: [{&quot;geometry&quot;: {&quot;coordinates&quot;: [1.643..., -19.12...], &quot;type&quot;: &quot;Point&quot;}, &quot;properties&quot;: {}, &quot;type&quot;: &quot;Feature&quot;}, {&quot;geometry&quot;: {&quot;coordinates&quot;: [-80.23..., -22.53...], &quot;type&quot;: &quot;Point&quot;}, &quot;properties&quot;: {}, &quot;type&quot;: &quot;Feature&quot;}], &quot;type&quot;: &quot;FeatureCollection&quot;}  &gt;&gt;&gt; feature_collection.errors()  []  &gt;&gt;&gt; (feature_collection[0] == feature_collection['features'][0], feature_collection[1] == my_other_feature)  (True, True)Visualize the result of the example above `here &lt;https://gist.github.com/frewsxcv/34513be6fb492771ef7b&gt;`__. General information about FeatureCollection can be found in `Section 3.3`_ within `The GeoJSON Format Specification`_... _Section 3.3: https://tools.ietf.org/html/rfc7946#section-3.3GeoJSON encoding/decoding-------------------------All of the GeoJSON Objects implemented in this library can be encoded and decoded into raw GeoJSON with the ``geojson.dump``, ``geojson.dumps``, ``geojson.load``, and ``geojson.loads`` functions. Note that each of these functions is a wrapper around the core `json` function with the same name, and will pass through any additional arguments. This allows you to control the JSON formatting or parsing behavior with the underlying core `json` functions... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; my_point = geojson.Point((43.24, -1.532))  &gt;&gt;&gt; my_point  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [43.2..., -1.53...], &quot;type&quot;: &quot;Point&quot;}  &gt;&gt;&gt; dump = geojson.dumps(my_point, sort_keys=True)  &gt;&gt;&gt; dump  # doctest: +ELLIPSIS  '{&quot;coordinates&quot;: [43.2..., -1.53...], &quot;type&quot;: &quot;Point&quot;}'  &gt;&gt;&gt; geojson.loads(dump)  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [43.2..., -1.53...], &quot;type&quot;: &quot;Point&quot;}Custom classes~~~~~~~~~~~~~~This encoding/decoding functionality shown in the previous can be extended to custom classes using the interface described by the `__geo_interface__ Specification`_... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; class MyPoint():  ...     def __init__(self, x, y):  ...         self.x = x  ...         self.y = y  ...  ...     @property  ...     def __geo_interface__(self):  ...         return {'type': 'Point', 'coordinates': (self.x, self.y)}  &gt;&gt;&gt; point_instance = MyPoint(52.235, -19.234)  &gt;&gt;&gt; geojson.dumps(point_instance, sort_keys=True)  # doctest: +ELLIPSIS  '{&quot;coordinates&quot;: [52.23..., -19.23...], &quot;type&quot;: &quot;Point&quot;}'Default and custom precision~~~~~~~~~~~~~~~~~~~~~~~~~~~~GeoJSON Object-based classes in this package have an additional `precision` attribute which rounds offcoordinates to 6 decimal places (roughly 0.1 meters) by default and can be customized per object instance... code:: python  &gt;&gt;&gt; from geojson import Point  &gt;&gt;&gt; Point((-115.123412341234, 37.123412341234))  # rounded to 6 decimal places by default  {&quot;coordinates&quot;: [-115.123412, 37.123412], &quot;type&quot;: &quot;Point&quot;}  &gt;&gt;&gt; Point((-115.12341234, 37.12341234), precision=8)  # rounded to 8 decimal places  {&quot;coordinates&quot;: [-115.12341234, 37.12341234], &quot;type&quot;: &quot;Point&quot;}Precision can be set at the package level by setting `geojson.geometry.DEFAULT_PRECISION` .. code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; geojson.geometry.DEFAULT_PRECISION = 5  &gt;&gt;&gt; from geojson import Point  &gt;&gt;&gt; Point((-115.12341234, 37.12341234))  # rounded to 8 decimal places  {&quot;coordinates&quot;: [-115.12341, 37.12341], &quot;type&quot;: &quot;Point&quot;}After setting the DEFAULT_PRECISION, coordinates will be rounded off to that precision with `geojson.load` or `geojson.loads`. Following one of those with `geojson.dump` is a quick and easy way to scale down the precision of excessively precise, arbitrarily-sized GeoJSON data.Helpful utilities-----------------coords~~~~~~:code:`geojson.utils.coords` yields all coordinate tuples from a geometry or feature object... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; my_line = LineString([(-152.62, 51.21), (5.21, 10.69)])  &gt;&gt;&gt; my_feature = geojson.Feature(geometry=my_line)  &gt;&gt;&gt; list(geojson.utils.coords(my_feature))  # doctest: +ELLIPSIS  [(-152.62..., 51.21...), (5.21..., 10.69...)]map_coords~~~~~~~~~~:code:`geojson.utils.map_coords` maps a function over all coordinate values and returns a geometry of the same type. Useful for scaling a geometry... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; new_point = geojson.utils.map_coords(lambda x: x/2, geojson.Point((-115.81, 37.24)))  &gt;&gt;&gt; geojson.dumps(new_point, sort_keys=True)  # doctest: +ELLIPSIS  '{&quot;coordinates&quot;: [-57.905..., 18.62...], &quot;type&quot;: &quot;Point&quot;}'map_tuples~~~~~~~~~~:code:`geojson.utils.map_tuples` maps a function over all coordinates and returns a geometry of the same type. Useful for changing coordinate order or applying coordinate transforms... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; new_point = geojson.utils.map_tuples(lambda c: (c[1], c[0]), geojson.Point((-115.81, 37.24)))  &gt;&gt;&gt; geojson.dumps(new_point, sort_keys=True)  # doctest: +ELLIPSIS  '{&quot;coordinates&quot;: [37.24..., -115.81], &quot;type&quot;: &quot;Point&quot;}'map_geometries~~~~~~~~~~~~~~:code:`geojson.utils.map_geometries` maps a function over each geometry in the input... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; new_point = geojson.utils.map_geometries(lambda g: geojson.MultiPoint([g[&quot;coordinates&quot;]]), geojson.GeometryCollection([geojson.Point((-115.81, 37.24))]))  &gt;&gt;&gt; geojson.dumps(new_point, sort_keys=True)  '{&quot;geometries&quot;: [{&quot;coordinates&quot;: [[-115.81, 37.24]], &quot;type&quot;: &quot;MultiPoint&quot;}], &quot;type&quot;: &quot;GeometryCollection&quot;}'validation~~~~~~~~~~:code:`is_valid` property provides simple validation of GeoJSON objects... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; obj = geojson.Point((-3.68,40.41,25.14,10.34))  &gt;&gt;&gt; obj.is_valid  False:code:`errors` method provides collection of errors when validation GeoJSON objects... code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; obj = geojson.Point((-3.68,40.41,25.14,10.34))  &gt;&gt;&gt; obj.errors()  'a position must have exactly 2 or 3 values'generate_random~~~~~~~~~~~~~~~:code:`geojson.utils.generate_random` yields a geometry type with random data.. code:: python  &gt;&gt;&gt; import geojson  &gt;&gt;&gt; geojson.utils.generate_random(&quot;LineString&quot;)  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [...], &quot;type&quot;: &quot;LineString&quot;}  &gt;&gt;&gt; geojson.utils.generate_random(&quot;Polygon&quot;)  # doctest: +ELLIPSIS  {&quot;coordinates&quot;: [...], &quot;type&quot;: &quot;Polygon&quot;}Development-----------To build this project, run :code:`python setup.py build`.To run the unit tests, run :code:`python setup.py test`.To run the style checks, run :code:`flake8` (install `flake8` if needed).Credits-------* Sean Gillies &lt;sgillies@frii.com&gt;* Matthew Russell &lt;matt@sanoodi.com&gt;* Corey Farwell &lt;coreyf@rwell.org&gt;* Blake Grotewold &lt;hello@grotewold.me&gt;* Zsolt Ero &lt;zsolt.ero@gmail.com&gt;* Sergey Romanov &lt;xxsmotur@gmail.com&gt;* Ray Riga &lt;ray@strongoutput.com&gt;.. _GeoJSON: https://geojson.org/.. _The GeoJSON Format Specification: https://tools.ietf.org/html/rfc7946.. _\_\_geo\_interface\_\_ Specification: https://gist.github.com/sgillies/2217756</longdescription>
</pkgmetadata>