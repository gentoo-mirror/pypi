<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-assert-utilsHandy assertion utilities for use with pytest# Installation```bashpip install pytest-assert-utils```# Usage## assert_dict_is_subset```pythondef assert_dict_is_subset(subset, superset, recursive=True)```Assert `subset` is a non-strict subset of `superset`If this assertion fails, a pretty diff will be printed by pytest.```pycon&gt;&gt;&gt; from pytest_assert_utils import assert_dict_is_subset&gt;&gt;&gt; expected = {'a': 12}&gt;&gt;&gt; actual = {'b': 20, 'a': 12}&gt;&gt;&gt; assert_dict_is_subset(expected, actual)&gt;&gt;&gt; expected = {'a': 12}&gt;&gt;&gt; actual = {'b': 50000}&gt;&gt;&gt; assert_dict_is_subset(expected, actual)Traceback (most recent call last): ...AssertionError```## assert_model_attrs```pythondef assert_model_attrs(instance, _d=UNSET, **attrs)```Assert a model instance has the specified attr valuesMay be passed a dict of attrs, or kwargs as attrs```pycon&gt;&gt;&gt; from pytest_assert_utils import assert_model_attrs&gt;&gt;&gt; from collections import namedtuple&gt;&gt;&gt; Model = namedtuple('Model', 'id,key,other_key,parent', defaults=(None,)*4)&gt;&gt;&gt; assert_model_attrs(Model(), {})&gt;&gt;&gt; assert_model_attrs(Model(key='value'), {'key': 'value'})&gt;&gt;&gt; assert_model_attrs(Model(key='value'), key='value')&gt;&gt;&gt; assert_model_attrs(Model(key='value'), key='not the value')Traceback (most recent call last): ...AssertionError&gt;&gt;&gt; assert_model_attrs(Model(key='value', other_key='other_value'), key='value')```## AnyMeta-value which compares True to any object (of the specified type(s))```pycon&gt;&gt;&gt; from pytest_assert_utils import util&gt;&gt;&gt; util.Any() == 'stuff'True&gt;&gt;&gt; util.Any() == 1True&gt;&gt;&gt; util.Any() == NoneTrue&gt;&gt;&gt; util.Any() == object()True&gt;&gt;&gt; util.Any(int) == 1True&gt;&gt;&gt; util.Any(int) == '1'False```## OptionalMeta-value which compares True to None or the optionally specified value```pycon&gt;&gt;&gt; from pytest_assert_utils import util&gt;&gt;&gt; util.Optional() == NoneTrue&gt;&gt;&gt; util.Optional() is None  # this will not work!False&gt;&gt;&gt; util.Optional(24) == 24True&gt;&gt;&gt; util.Optional(24) == NoneTrue&gt;&gt;&gt; util.Optional(Any(int)) == 1True&gt;&gt;&gt; util.Optional(Any(int)) == NoneTrue&gt;&gt;&gt; util.Optional(Any(int)) == '1'False```## CollectionSpecial class enabling equality comparisons to check items in any collection (list, set, tuple, etc)```pycon&gt;&gt;&gt; from pytest_assert_utils import util&gt;&gt;&gt; util.Collection.containing(1) == [1, 2, 3]True&gt;&gt;&gt; util.Collection.containing(1) == {1, 2, 3}True&gt;&gt;&gt; util.Collection.containing(1) == (1, 2, 3)True&gt;&gt;&gt; util.Collection.containing(1) == [4, 5, 6]False&gt;&gt;&gt; util.Collection.containing(1) == {4, 5, 6}False&gt;&gt;&gt; util.Collection.containing(1) == (4, 5, 6)False```## ListSpecial class enabling equality comparisons to check items in a list```pycon&gt;&gt;&gt; from pytest_assert_utils import util&gt;&gt;&gt; util.List.containing(1) == [1, 2, 3]True&gt;&gt;&gt; util.List.containing(1) == [4, 5, 6]False&gt;&gt;&gt; util.List.containing_only(1, 2) == [1, 2, 3]False&gt;&gt;&gt; util.List.containing_only(1, 2) == [1, 2, 2]True&gt;&gt;&gt; util.List.containing_only(4, 5, 6) == [4, 5, 6]True&gt;&gt;&gt; util.List.containing_only(4, 5, 6, 7) == [4, 5, 6]True&gt;&gt;&gt; util.List.containing_exactly(1, 2) == [1, 2, 3]False&gt;&gt;&gt; util.List.containing_exactly(4, 5, 6, 7) == [4, 5, 6]False&gt;&gt;&gt; util.List.containing_exactly(5, 6, 4) == [4, 5, 6]True&gt;&gt;&gt; util.List.containing_exactly(4, 5) == [4, 5, 5]False&gt;&gt;&gt; util.List.containing_exactly(5, 4, 5) == [4, 5, 5]True&gt;&gt;&gt; util.List.not_containing(1) == [1, 2, 3]False&gt;&gt;&gt; util.List.not_containing(1) == [4, 5, 6]True&gt;&gt;&gt; util.List.empty() == [1, 2, 3]False&gt;&gt;&gt; util.List.empty() == []True&gt;&gt;&gt; util.List.not_empty() == [1, 2, 3]True&gt;&gt;&gt; util.List.not_empty() == []False```## SetSpecial class enabling equality comparisons to check items in a set```pycon&gt;&gt;&gt; from pytest_assert_utils import util&gt;&gt;&gt; util.Set.containing(1) == {1, 2, 3}True&gt;&gt;&gt; util.Set.containing(1) == {4, 5, 6}False&gt;&gt;&gt; util.Set.not_containing(1) == {1, 2, 3}False&gt;&gt;&gt; util.Set.not_containing(1) == {4, 5, 6}True&gt;&gt;&gt; util.Set.empty() == {1, 2, 3}False&gt;&gt;&gt; util.Set.empty() == set()True&gt;&gt;&gt; util.Set.not_empty() == {1, 2, 3}True&gt;&gt;&gt; util.Set.not_empty() == set()False```## DictSpecial class enabling equality comparisons to check items in a dict```pycon&gt;&gt;&gt; from pytest_assert_utils import util&gt;&gt;&gt; util.Dict.containing('a') == {'a': 1, 'b': 2}True&gt;&gt;&gt; util.Dict.containing(a=1) == {'a': 1, 'b': 2}True&gt;&gt;&gt; util.Dict.containing({'a': 1}) == {'a': 1, 'b': 2}True&gt;&gt;&gt; util.Dict.containing('a') == {'b': 2}False&gt;&gt;&gt; util.Dict.containing(a=1) == {'b': 2}False&gt;&gt;&gt; util.Dict.containing({'a': 1}) == {'b': 2}False&gt;&gt;&gt; util.Dict.not_containing('a') == {'a': 1, 'b': 2}False&gt;&gt;&gt; util.Dict.not_containing(a=1) == {'a': 1, 'b': 2}False&gt;&gt;&gt; util.Dict.not_containing({'a': 1}) == {'a': 1, 'b': 2}False&gt;&gt;&gt; util.Dict.not_containing('a') == {'b': 2}True&gt;&gt;&gt; util.Dict.not_containing(a=1) == {'b': 2}True&gt;&gt;&gt; util.Dict.not_containing({'a': 1}) == {'b': 2}True&gt;&gt;&gt; util.Dict.empty() == {'a': 1, 'b': 2, 'c': 3}False&gt;&gt;&gt; util.Dict.empty() == {}True&gt;&gt;&gt; util.Dict.not_empty() == {'a': 1, 'b': 2, 'c': 3}True&gt;&gt;&gt; util.Dict.not_empty() == {}False```## StrSpecial class enabling equality comparisons to check items in a string```pycon&gt;&gt;&gt; from pytest_assert_utils import util&gt;&gt;&gt; util.Str.containing('app') == 'apple'True&gt;&gt;&gt; util.Str.containing('app') == 'happy'True&gt;&gt;&gt; util.Str.containing('app') == 'banana'False&gt;&gt;&gt; util.Str.not_containing('app') == 'apple'False&gt;&gt;&gt; util.Str.not_containing('app') == 'happy'False&gt;&gt;&gt; util.Str.not_containing('app') == 'banana'True&gt;&gt;&gt; util.Str.empty() == 'hamster'False&gt;&gt;&gt; util.Str.empty() == ''True&gt;&gt;&gt; util.Str.not_empty() == 'hamster'True&gt;&gt;&gt; util.Str.not_empty() == ''False```## ModelSpecial class enabling equality comparisons to check attrs of another object```pycon&gt;&gt;&gt; from collections import namedtuple&gt;&gt;&gt; Foo = namedtuple('Foo', 'id,key,other_key,parent', defaults=(None,)*4)&gt;&gt;&gt; Foo() == Model()True&gt;&gt;&gt; Foo(key='value') == Model(key='value')True&gt;&gt;&gt; Foo(key='value') == Model(key='not the value')False&gt;&gt;&gt; Foo(key='value', other_key='other_value') == Model(key='value')True&gt;&gt;&gt; [Foo(key='value', other_key='other_value')] == List.containing(Model(key='value'))True```</longdescription>
</pkgmetadata>