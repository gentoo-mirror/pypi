<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyHTTPInterceptProvides a HTTP Server which can be used to intercept and modify API requests/responses for local clients.This is useful for client testing where generating different response types from the API is not always ideal.The HTTP server provides the following functionality:* Hosting of sites* Redirecting requests with the following methods:  * HTTP 3xx statuses  * transparently to the client* Intercepting and modifying of requests.  Man-in-the-middle, useful for client testing against a production API.* Proxying of requestsWhen a request comes in methods are checked &amp; executed in the following order:1. Redirect2. Hosting3. Intercept - Intercept will only be reached if request is not picked up by hosting.4. Proxy - Proxy configuration will only be reached if request is not picked up by Hosting or Intercept.---## Hosting requestsSites can be hosted as with any webserver.  The server supports static sites/resources only.### Hosting configurationAn example configuration file:```JSON{  &quot;/&quot;: {    &quot;doc_root&quot;: &quot;default_sites/&quot;,    &quot;active&quot;: true,    &quot;description&quot;: &quot;Root Site&quot;  },  &quot;/example&quot;: {    &quot;doc_root&quot;: &quot;default_sites/example/&quot;,    &quot;active&quot;: true,    &quot;description&quot;: &quot;Example Site&quot;  }}```A configured site configurations key will be set to the expected url path.Site configuration parameters:* Object key: String - Path where site will be hosted.* `doc_root`: String - The full path to the configured site. A relative path can also be configured and is explained below.* `active`: Boolean - True if the site is to be served.* `description`: String - [optional] A description for your site.#### Relative pathsTODO---## Redirecting requests### Sending HTTP 3xx statusesThese are your standard redirects.### Transparently to the clientThese are useful for clients that do not support redirects.An example use would be redirecting a client with hard coded endpoints to a lab environemnt for testing without having to generate &amp; install specific builds for the lab.### Redirect configurationParameters:* Object key: String - Domain to redirect.* `host`: String - [optional] The full domain to redirect to.* `paths`: Object - [optional] An object containing the paths being redirected for this domain.* `active`: Boolean - True to enable redirect.* `description`: String - [optional] A description for your redirect.Note: at least one of `host` or `paths` must be specified!Path object:* Object key: String - Path to redirect.* `host`: String - [optional] The full domain to redirect to.* `path`: String - [optional] The full path to redirect to. If omitted then the path will be set to domain root.* `status`: Number - [optional] The HTTP 3xx status to send.  Specifying this parameter tells the server to use a HTTP 3xx redirect rather than redirecting transparently.* `active`: Boolean - True to enable redirect.* `description`: String - [optional] A description for your redirect.Note: at least one of `path` or `host` (from either site/path config) must be specified!If a host is specifed in the key it will only by honoured when intercepting or proxying, for anything else the keys will be ignored.Redirecting paths within the same site:```JSON{  &quot;example.com&quot;: {    &quot;paths&quot;: {      &quot;/example_redirect&quot;: {        &quot;path&quot;: &quot;/temp_path&quot;,        &quot;active&quot;: true,      }    },    &quot;active&quot;: true,  }}```Redirecting paths within the same site using a HTTP 3xx redirect:```JSON{  &quot;example.com&quot;: {    &quot;paths&quot;: {      &quot;/example_redirect&quot;: {        &quot;path&quot;: &quot;/temp_path&quot;,        &quot;status&quot;: 301,        &quot;active&quot;: true,      }    },    &quot;active&quot;: true,  }}```Redirecting paths from one site to another:```JSON{  &quot;example.com&quot;: {    &quot;host&quot;: &quot;example2.com&quot;,    &quot;paths&quot;: {      &quot;/example_redirect&quot;: {        &quot;path&quot;: &quot;/&quot;,        &quot;active&quot;: true,      }    },    &quot;active&quot;: true,  }}```This can also be done on a path by path basis:```JSON{  &quot;example.com&quot;: {    &quot;paths&quot;: {      &quot;host&quot;: &quot;example2.com&quot;,      &quot;/example_redirect&quot;: {        &quot;path&quot;: &quot;/&quot;,        &quot;active&quot;: true,      },      &quot;/example_redirect2&quot;: {        &quot;host&quot;: &quot;example3.com&quot;,        &quot;path&quot;: &quot;/&quot;,        &quot;active&quot;: true,      }    },    &quot;active&quot;: true,  }}```If a host is configured for a path it takes precedence over the site redirect host.Redirecting one domain to another:```JSON{  &quot;example.com&quot;: {    &quot;host&quot;: &quot;example2.com&quot;,    &quot;active&quot;: true,  }}```This applies to all paths for the domain.---## Intercepting requests### Intercept configurationParameters:* Object key: String - Domain to Intercept.* `active`: Boolean - True to enable proxy.* `description`: String - [optional] A description for your proxy.An example configuration file:```JSON{  &quot;example.com&quot;: {    &quot;active&quot;: true,    &quot;description&quot;: &quot;Intercept &amp; modify&quot;  }}```---## Proxying requestsParameters:* Object key: String - Domain to proxy.* `active`: Boolean - True to enable proxy.* `description`: String - [optional] A description for your proxy.Proxy can be configured to either proxy all requests:```JSON{  &quot;*&quot;: {    &quot;active&quot;: true,    &quot;description&quot;: &quot;Proxy All&quot;  }}```or specific domains only:```JSON{  &quot;example.com&quot;: {    &quot;active&quot;: true,    &quot;description&quot;: &quot;Proxy example.com&quot;  }}```---## WildcardsThe '\*' character can be used as a wildcard.### Domain wildcards```*.example.com``` will handle requests for all subdomains, but not ```example.com```.```*example.com``` will handle requests for all subdomains, including ```example.com```.In the following example the first configuration ```example.com``` will only proxy requests for ```example.com```.While the second configuration ```\*.example.com``` will proxy all subdomains but not ```example.com```.```JSON{  &quot;example.com&quot;: {    &quot;active&quot;: true,    &quot;description&quot;: &quot;Proxy example.com&quot;  },  &quot;*.example.com&quot;: {    &quot;active&quot;: true,    &quot;description&quot;: &quot;Proxy subdomains of example.com&quot;  }}```This snippet can be simplified to:```JSON{  &quot;*example.com&quot;: {    &quot;active&quot;: true,    &quot;description&quot;: &quot;Proxy example.com and all subdomains&quot;  }}```### Path wildcards (Only available for redirects)```/testing/*``` will redirect all requests for path ```/testing``` including sub paths i.e ```/testing/path_a```In the following example ```example.com/example_redirect``` and all sub paths will be redirected to ```example.com/temp_path```.```JSON{  &quot;example.com&quot;: {    &quot;paths&quot;: {      &quot;/example_redirect/*&quot;: {        &quot;path&quot;: &quot;/temp_path&quot;,        &quot;active&quot;: true,      }    },    &quot;active&quot;: true,  }}```</longdescription>
</pkgmetadata>