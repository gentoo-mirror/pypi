<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hello from magnus&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/AstraZeneca/magnus-core/blob/main/assets/logo-readme.png?raw=true&quot; alt=&quot;Logo&quot;/&gt;&lt;/p&gt;---&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/magnus/&quot;&gt;&lt;img alt=&quot;python:&quot; src=&quot;https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10-blue.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/magnus/&quot;&gt;&lt;img alt=&quot;Pypi&quot; src=&quot;https://badge.fury.io/py/magnus.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/AstraZeneca/magnus-core/blob/main/LICENSE&quot;&gt;&lt;img alt&quot;License&quot; src=&quot;https://img.shields.io/badge/license-Apache%202.0-blue.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/python/mypy&quot;&gt;&lt;img alt=&quot;MyPy Checked&quot; src=&quot;https://www.mypy-lang.org/static/mypy_badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/AstraZeneca/magnus-core/actions/workflows/release.yaml&quot;&gt;&lt;img alt=&quot;Tests:&quot; src=&quot;https://github.com/AstraZeneca/magnus-core/actions/workflows/release.yaml/badge.svg&quot;&gt;&lt;a href=&quot;https://github.com/AstraZeneca/magnus-core/actions/workflows/docs.yaml&quot;&gt;&lt;img alt=&quot;Docs:&quot; src=&quot;https://github.com/AstraZeneca/magnus-core/actions/workflows/docs.yaml/badge.svg&quot;&gt;&lt;/p&gt;---&lt;!--- --8&lt;-- [start:intro] --&gt;**Magnus** is a *thin* layer of abstraction over the underlying infrastructure to enable data scientist andmachine learning engineers. It provides:- A way to execute Jupyter notebooks/python functions in local or remote platforms.- A framework to define complex pipelines via YAML or Python SDK.- Robust and *automatic* logging to ensure maximum reproducibility of experiments.- A framework to interact with secret managers ranging from environment variables to other vendors.- Interactions with various experiment tracking tools.## What does **thin** mean?- We really have no say in what happens within your notebooks or python functions.- We do not dictate how the infrastructure should be configured as long as it satisfies some *basic* criteria.    - The underlying infrastructure should support container execution and an orchestration framework.    - Some way to handle secrets either via environment variables or secrets manager.    - A blob storage or some way to store your intermediate artifacts.    - A database or blob storage to store logs.- We have no opinion of how your structure your project.- We do not creep into your CI/CD practices but it is your responsibility to provide the same environment where everthe execution happens. This is usually via git, virtual environment manager and docker.- We transpile to the orchestration framework that is used by your teams to do the heavy lifting.## What does it do?![works](assets/work.png)### Shift LeftMagnus provides patterns typically used in production environments even in the development phase.- Reduces the need for code refactoring during production phase of the project.- Enables best practices and understanding of infrastructure patterns.- Run the same code on your local machines or in production environments.:sparkles: :sparkles: Happy Experimenting!! :sparkles: :sparkles:&lt;!--- --8&lt;-- [end:intro] --&gt;## Documentation[More details about the project and how to use it available here](https://astrazeneca.github.io/magnus-core/).## ExtensionsAll the services of magnus are extendable by design, please refer to[magnus extensions](https://github.com/AstraZeneca/magnus-extensions)## Installation&lt;!--- --8&lt;-- [start:installation] --&gt;The minimum python version that magnus supports is 3.8## pipmagnus is a python package and should be installed as any other.```shellpip install magnus```We recommend that you install magnus in a virtual environment specific to the project and also poetry for yourapplication development.The command to install in a poetry managed virtual environment```poetry add magnus```&lt;!--- --8&lt;-- [end:installation] --&gt;## Example Run&lt;!--- --8&lt;-- [start:exampleRun] --&gt;To give you a flavour of how magnus works, lets create a simple pipeline.Copy the contents of this yaml into getting-started.yaml or alternatively in a python file if you are using the SDK.---!!! Note   The below execution would create a folder called 'data' in the current working directory.   The command as given should work in linux/macOS but for windows, please change accordingly.---&lt;!--- --8&lt;-- [end:exampleRun] --&gt;&lt;!--- --8&lt;-- [start:exampleInput] --&gt;``` yamldag:  description: Getting started  start_at: step parameters  steps:    step parameters:      type: task      command_type: python-lambda      command: &quot;lambda x: {'x': int(x) + 1}&quot;      next: step shell    step shell:      type: task      command_type: shell      command: mkdir data ; env &gt;&gt; data/data.txt # For Linux/macOS      next: success      catalog:        put:          - &quot;*&quot;    success:      type: success    fail:      type: fail```The same could also be defined via a Python SDK.```python#in pipeline.pyfrom magnus import Pipeline, Taskdef pipeline():    first = Task(name='step parameters', command=&quot;lambda x: {'x': int(x) + 1}&quot;, command_type='python-lambda',                next_node='step shell')    second = Task(name='step shell', command='mkdir data ; env &gt;&gt; data/data.txt',                  command_type='shell', catalog={'put': '*'})    pipeline = Pipeline(name='getting_started')    pipeline.construct([first, second])    pipeline.execute(parameters_file='parameters.yaml')if __name__ == '__main__':    pipeline()```Since the pipeline expects a parameter ```x```, lets provide that using ```parameters.yaml``````yamlx: 3```And let's run the pipeline using:``` shell magnus execute --file getting-started.yaml --parameters-file parameters.yaml```If you are using the python SDK:```poetry run python pipeline.py```&lt;!--- --8&lt;-- [end:exampleInput] --&gt;You should see a list of warnings but your terminal output should look something similar to this:&lt;!--- --8&lt;-- [start:exampleOutput] --&gt;``` json{    &quot;run_id&quot;: &quot;20230131195647&quot;,    &quot;dag_hash&quot;: &quot;&quot;,    &quot;use_cached&quot;: false,    &quot;tag&quot;: &quot;&quot;,    &quot;original_run_id&quot;: &quot;&quot;,    &quot;status&quot;: &quot;SUCCESS&quot;,    &quot;steps&quot;: {        &quot;step parameters&quot;: {            &quot;name&quot;: &quot;step parameters&quot;,            &quot;internal_name&quot;: &quot;step parameters&quot;,            &quot;status&quot;: &quot;SUCCESS&quot;,            &quot;step_type&quot;: &quot;task&quot;,            &quot;message&quot;: &quot;&quot;,            &quot;mock&quot;: false,            &quot;code_identities&quot;: [                {                    &quot;code_identifier&quot;: &quot;e15d1374aac217f649972d11fe772e61b5a2478d&quot;,                    &quot;code_identifier_type&quot;: &quot;git&quot;,                    &quot;code_identifier_dependable&quot;: true,                    &quot;code_identifier_url&quot;: &quot;INTENTIONALLY REMOVED&quot;,                    &quot;code_identifier_message&quot;: &quot;&quot;                }            ],            &quot;attempts&quot;: [                {                    &quot;attempt_number&quot;: 0,                    &quot;start_time&quot;: &quot;2023-01-31 19:56:55.007931&quot;,                    &quot;end_time&quot;: &quot;2023-01-31 19:56:55.009273&quot;,                    &quot;duration&quot;: &quot;0:00:00.001342&quot;,                    &quot;status&quot;: &quot;SUCCESS&quot;,                    &quot;message&quot;: &quot;&quot;                }            ],            &quot;user_defined_metrics&quot;: {},            &quot;branches&quot;: {},            &quot;data_catalog&quot;: []        },        &quot;step shell&quot;: {            &quot;name&quot;: &quot;step shell&quot;,            &quot;internal_name&quot;: &quot;step shell&quot;,            &quot;status&quot;: &quot;SUCCESS&quot;,            &quot;step_type&quot;: &quot;task&quot;,            &quot;message&quot;: &quot;&quot;,            &quot;mock&quot;: false,            &quot;code_identities&quot;: [                {                    &quot;code_identifier&quot;: &quot;e15d1374aac217f649972d11fe772e61b5a2478d&quot;,                    &quot;code_identifier_type&quot;: &quot;git&quot;,                    &quot;code_identifier_dependable&quot;: true,                    &quot;code_identifier_url&quot;: &quot;INTENTIONALLY REMOVED&quot;,                    &quot;code_identifier_message&quot;: &quot;&quot;                }            ],            &quot;attempts&quot;: [                {                    &quot;attempt_number&quot;: 0,                    &quot;start_time&quot;: &quot;2023-01-31 19:56:55.128697&quot;,                    &quot;end_time&quot;: &quot;2023-01-31 19:56:55.150878&quot;,                    &quot;duration&quot;: &quot;0:00:00.022181&quot;,                    &quot;status&quot;: &quot;SUCCESS&quot;,                    &quot;message&quot;: &quot;&quot;                }            ],            &quot;user_defined_metrics&quot;: {},            &quot;branches&quot;: {},            &quot;data_catalog&quot;: [                {                    &quot;name&quot;: &quot;data/data.txt&quot;,                    &quot;data_hash&quot;: &quot;7e91b0a9ff8841a3b5bf2c711f58bcc0cbb6a7f85b9bc92aa65e78cdda59a96e&quot;,                    &quot;catalog_relative_path&quot;: &quot;20230131195647/data/data.txt&quot;,                    &quot;catalog_handler_location&quot;: &quot;.catalog&quot;,                    &quot;stage&quot;: &quot;put&quot;                }            ]        },        &quot;success&quot;: {            &quot;name&quot;: &quot;success&quot;,            &quot;internal_name&quot;: &quot;success&quot;,            &quot;status&quot;: &quot;SUCCESS&quot;,            &quot;step_type&quot;: &quot;success&quot;,            &quot;message&quot;: &quot;&quot;,            &quot;mock&quot;: false,            &quot;code_identities&quot;: [                {                    &quot;code_identifier&quot;: &quot;e15d1374aac217f649972d11fe772e61b5a2478d&quot;,                    &quot;code_identifier_type&quot;: &quot;git&quot;,                    &quot;code_identifier_dependable&quot;: true,                    &quot;code_identifier_url&quot;: &quot;INTENTIONALLY REMOVED&quot;,                    &quot;code_identifier_message&quot;: &quot;&quot;                }            ],            &quot;attempts&quot;: [                {                    &quot;attempt_number&quot;: 0,                    &quot;start_time&quot;: &quot;2023-01-31 19:56:55.239877&quot;,                    &quot;end_time&quot;: &quot;2023-01-31 19:56:55.240116&quot;,                    &quot;duration&quot;: &quot;0:00:00.000239&quot;,                    &quot;status&quot;: &quot;SUCCESS&quot;,                    &quot;message&quot;: &quot;&quot;                }            ],            &quot;user_defined_metrics&quot;: {},            &quot;branches&quot;: {},            &quot;data_catalog&quot;: []        }    },    &quot;parameters&quot;: {        &quot;x&quot;: 4    },    &quot;run_config&quot;: {        &quot;executor&quot;: {            &quot;type&quot;: &quot;local&quot;,            &quot;config&quot;: {                &quot;enable_parallel&quot;: false,                &quot;placeholders&quot;: {}            }        },        &quot;run_log_store&quot;: {            &quot;type&quot;: &quot;buffered&quot;,            &quot;config&quot;: {}        },        &quot;catalog&quot;: {            &quot;type&quot;: &quot;file-system&quot;,            &quot;config&quot;: {                &quot;compute_data_folder&quot;: &quot;data&quot;,                &quot;catalog_location&quot;: &quot;.catalog&quot;            }        },        &quot;secrets&quot;: {            &quot;type&quot;: &quot;do-nothing&quot;,            &quot;config&quot;: {}        },        &quot;experiment_tracker&quot;: {            &quot;type&quot;: &quot;do-nothing&quot;,            &quot;config&quot;: {}        },        &quot;variables&quot;: {},        &quot;pipeline&quot;: {            &quot;start_at&quot;: &quot;step parameters&quot;,            &quot;name&quot;: &quot;getting_started&quot;,            &quot;description&quot;: &quot;&quot;,            &quot;max_time&quot;: 86400,            &quot;steps&quot;: {                &quot;step parameters&quot;: {                    &quot;mode_config&quot;: {},                    &quot;next_node&quot;: &quot;step shell&quot;,                    &quot;command&quot;: &quot;lambda x: {'x': int(x) + 1}&quot;,                    &quot;command_type&quot;: &quot;python-lambda&quot;,                    &quot;command_config&quot;: {},                    &quot;catalog&quot;: {},                    &quot;retry&quot;: 1,                    &quot;on_failure&quot;: &quot;&quot;,                    &quot;type&quot;: &quot;task&quot;                },                &quot;step shell&quot;: {                    &quot;mode_config&quot;: {},                    &quot;next_node&quot;: &quot;success&quot;,                    &quot;command&quot;: &quot;mkdir data ; env &gt;&gt; data/data.txt&quot;,                    &quot;command_type&quot;: &quot;shell&quot;,                    &quot;command_config&quot;: {},                    &quot;catalog&quot;: {                        &quot;put&quot;: &quot;*&quot;                    },                    &quot;retry&quot;: 1,                    &quot;on_failure&quot;: &quot;&quot;,                    &quot;type&quot;: &quot;task&quot;                },                &quot;success&quot;: {                    &quot;mode_config&quot;: {},                    &quot;type&quot;: &quot;success&quot;                },                &quot;fail&quot;: {                    &quot;mode_config&quot;: {},                    &quot;type&quot;: &quot;fail&quot;                }            }        }    }}```&lt;!--- --8&lt;-- [end:exampleOutput] --&gt;You should see that ```data``` folder being created with a file called ```data.txt``` in it.This is according to the command in ```step shell```.You should also see a folder ```.catalog``` being created with a single folder corresponding to the run_id of this run.To understand more about the input and output, please head over to the[documentation](https://project-magnus.github.io/magnus-core/).</longdescription>
</pkgmetadata>