<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyhrp[![DeepSource](https://deepsource.io/gh/tschm/hrp.svg/?label=active+issues&amp;show_trend=true&amp;token=qjT_aLQgo_1Xbe2Z9ZNdH3Cx)](https://deepsource.io/gh/tschm/hrp/?ref=repository-badge)A recursive implementation of the Hierarchical Risk Parity (hrp) approach by Marcos Lopez de Prado.We take heavily advantage of the scipy.cluster.hierarchy package. Here's a simple example```pythonimport pandas as pdfrom pyhrp.hrp import dist, linkage, tree, _hrpprices = pd.read_csv(&quot;test/resources/stock_prices.csv&quot;, index_col=0, parse_dates=True)returns = prices.pct_change().dropna(axis=0, how=&quot;all&quot;)cov, cor = returns.cov(), returns.corr()links = linkage(dist(cor.values), method='ward')node = tree(links)rootcluster = _hrp(node, cov)ax = dendrogram(links, orientation=&quot;left&quot;)ax.get_figure().savefig(&quot;dendrogram.png&quot;)```For your convenience you can bypass the construction of the covariance and correlation matrix, the links and the node, e.g. the root of the tree (dendrogram).```pythonimport pandas as pdfrom pyhrp.hrp import hrpprices = pd.read_csv(&quot;test/resources/stock_prices.csv&quot;, index_col=0, parse_dates=True)root = hrp(prices=prices)```You may expect a weight series here but instead the `hrp` function returns a `Cluster` object. The `Cluster` simplifies all further post-analysis.```pythonprint(cluster.weights)print(cluster.variance)# You can drill into the graph by going downstreamprint(cluster.left)print(cluster.right)```## Installation:```pip install pyhpr```</longdescription>
</pkgmetadata>