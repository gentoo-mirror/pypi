<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Storm is an Object Relational Mapper for Python developed atCanonical.  API docs, a manual, and a tutorial are available from:https://storm.canonical.com/Introduction============The project was in development for more than a year for use inCanonical projects such as Launchpad and Landscape before beingreleased as free software on July 9th, 2007.Design: * Clean and lightweight API offers a short learning curve and   long-term maintainability. * Storm is developed in a test-driven manner. An untested line of   code is considered a bug. * Storm needs no special class constructors, nor imperative base   classes. * Storm is well designed (different classes have very clear   boundaries, with small and clean public APIs). * Designed from day one to work both with thin relational   databases, such as SQLite, and big iron systems like PostgreSQL   and MySQL. * Storm is easy to debug, since its code is written with a KISS   principle, and thus is easy to understand. * Designed from day one to work both at the low end, with trivial   small databases, and the high end, with applications accessing   billion row tables and committing to multiple database backends. * It's very easy to write and support backends for Storm (current   backends have around 100 lines of code).Features: * Storm is fast. * Storm lets you efficiently access and update large datasets by   allowing you to formulate complex queries spanning multiple   tables using Python. * Storm allows you to fallback to SQL if needed (or if you just   prefer), allowing you to mix &quot;old school&quot; code and ORM code * Storm handles composed primary keys with ease (no need for   surrogate keys). * Storm doesn't do schema management, and as a result you're free   to manage the schema as wanted, and creating classes that work   with Storm is clean and simple. * Storm works very well connecting to several databases and using   the same Python types (or different ones) with all of them. * Storm can handle obj.attr = &lt;A SQL expression&gt; assignments, when   that's really needed (the expression is executed at INSERT/UPDATE   time). * Storm handles relationships between objects even before they were   added to a database. * Storm works well with existing database schemas. * Storm will flush changes to the database automatically when   needed, so that queries made affect recently modified objects.License=======Copyright (C) 2006-2020 Canonical, Ltd.  All contributions must havecopyright assigned to Canonical.This library is free software; you can redistribute it and/ormodify it under the terms of the GNU Lesser General PublicLicense as published by the Free Software Foundation; eitherversion 2.1 of the License, or (at your option) any later version.This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNULesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with this library; if not, write to the Free SoftwareFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA02110-1301 USAOn Ubuntu systems, the complete text of the GNU Lesser GeneralPublic Version 2.1 License is in /usr/share/common-licenses/LGPL-2.1Developing Storm================SHORT VERSION:  If you are running ubuntu, or probably debian, thefollowing should work.  If not, and for reference, the long versionis below. $ dev/ubuntu-deps $ echo &quot;$PWD/** rwk,&quot; | sudo tee /etc/apparmor.d/local/usr.sbin.mysqld &gt;/dev/null $ sudo aa-enforce /usr/sbin/mysqld $ make develop $ make checkLONG VERSION:The following instructions describe the procedure for setting up adevelopment environment and running the test suite.Installing dependencies-----------------------The following instructions assume that you're using Ubuntu.  The same procedurewill probably work without changes on a Debian system and with minimal changeson a non-Debian-based linux distribution.  In order to run the test suite, andexercise all supported backends, you will need to install MySQL andPostgreSQL, along with the related Python database drivers: $ sudo apt-get install \       mysql-server \       postgresql pgbouncer \       build-essentialThese will take a few minutes to download.The Python dependencies for running tests can mostly be installed withapt-get: $ apt-get install \       python-fixtures python-psycopg2 \       python-testresources python-transaction python-twisted \       python-zope.component python-zope.securityTwo modules - pgbouncer and timeline - are not yet packaged inUbuntu. These can be installed from PyPI:  http://pypi.python.org/pypi/pgbouncer  http://pypi.python.org/pypi/timelineAlternatively, dependencies can be downloaded as eggs into the currentdirectory with: $ make developThis ensures that all dependencies are available, downloading fromPyPI as appropriate.Database setup--------------Most database setup is done automatically by the test suite.  However,Ubuntu's default MySQL packaging ships an AppArmor profile that prevents itfrom writing to a local data directory.  To allow the test suite to do this,you will need to grant it access, which is most easily done by adding a linesuch as this to /etc/apparmor.d/local/usr.sbin.mysqld:  /path/to/storm/** rwk,Then reload the profile:  $ sudo aa-enforce /usr/sbin/mysqldRunning the tests-----------------Finally, its time to run the tests!  Go into the base directory ofthe storm branch you want to test, and run: $ make checkThey'll take a while to run.  All tests should pass: failures meanthere's a problem with your environment or a bug in Storm.</longdescription>
</pkgmetadata>