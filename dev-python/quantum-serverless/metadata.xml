<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Stability](https://img.shields.io/badge/stability-alpha-f4d03f.svg)](https://github.com/Qiskit-Extensions/quantum-serverless/releases)[![Client verify process](https://github.com/Qiskit-Extensions/quantum-serverless/actions/workflows/client-verify.yaml/badge.svg)](https://github.com/Qiskit-Extensions/quantum-serverless/actions/workflows/client-verify.yaml)[![License](https://img.shields.io/github/license/qiskit-community/quantum-prototype-template?label=License)](https://github.com/qiskit-community/quantum-prototype-template/blob/main/LICENSE.txt)[![Code style: Black](https://img.shields.io/badge/Code%20style-Black-000.svg)](https://github.com/psf/black)[![Python](https://img.shields.io/badge/Python-3.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-informational)](https://www.python.org/)[![Qiskit](https://img.shields.io/badge/Qiskit-%E2%89%A5%200.39.0-6133BD)](https://github.com/Qiskit/qiskit)# Quantum Serverless clientClient part of quantum serverless project. Installable python library to communicate with provisioned infrastructure.### Table of Contents1. [Installation](#installation)2. [Usage](#usage)----------------------------------------------------------------------------------------------------### Installation```shellpip install quantum_serverless```or local installation from source```shellpip install -e .```----------------------------------------------------------------------------------------------------### Usage```pythonfrom qiskit import QuantumCircuitfrom qiskit.circuit.random import random_circuitfrom qiskit.quantum_info import SparsePauliOpfrom qiskit_ibm_runtime import Estimatorfrom quantum_serverless import QuantumServerless, run_qiskit_remote, get, put# 1. let's annotate out function to convert it# to function that can be executed remotely# using `run_qiskit_remote` decorator@run_qiskit_remote()def my_function(circuit: QuantumCircuit, obs: SparsePauliOp):return Estimator().run([circuit], [obs]).result().values# 2. Next let's create out serverless object to control# where our remote function will be executedserverless = QuantumServerless()circuits = [random_circuit(2, 2) for _ in range(3)]# 3. create serverless contextwith serverless:# 4. let's put some shared objects into remote storage that will be shared among all executionsobs_ref = put(SparsePauliOp([&quot;ZZ&quot;]))    # 4. run our function and get back reference to it    # as now our function it remote onefunction_reference = my_function(circuits[0], obs_ref)    # 4.1 or we can run N of them in parallel (for all circuits)function_references = [my_function(circ, obs_ref) for circ in circuits]# 5. to get results back from reference    # we need to call `get` on function referenceprint(&quot;Single execution:&quot;, get(function_reference))print(&quot;N parallel executions:&quot;, get(function_references))```</longdescription>
</pkgmetadata>