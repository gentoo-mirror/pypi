<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PrettyTable[![Jazzband](https://jazzband.co/static/img/badge.svg)](https://jazzband.co/)[![PyPI version](https://img.shields.io/pypi/v/prettytable.svg?logo=pypi&amp;logoColor=FFE873)](https://pypi.org/project/prettytable/)[![Supported Python versions](https://img.shields.io/pypi/pyversions/prettytable.svg?logo=python&amp;logoColor=FFE873)](https://pypi.org/project/prettytable/)[![PyPI downloads](https://img.shields.io/pypi/dm/prettytable.svg)](https://pypistats.org/packages/prettytable)[![GitHub Actions status](https://github.com/jazzband/prettytable/workflows/Test/badge.svg)](https://github.com/jazzband/prettytable/actions)[![codecov](https://codecov.io/gh/jazzband/prettytable/branch/main/graph/badge.svg)](https://codecov.io/gh/jazzband/prettytable)[![Code style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)PrettyTable lets you print tables in an attractive ASCII form:```+-----------+------+------------+-----------------+| City name | Area | Population | Annual Rainfall |+-----------+------+------------+-----------------+| Adelaide  | 1295 |  1158259   |      600.5      || Brisbane  | 5905 |  1857594   |      1146.4     || Darwin    | 112  |   120900   |      1714.7     || Hobart    | 1357 |   205556   |      619.5      || Melbourne | 1566 |  3806092   |      646.9      || Perth     | 5386 |  1554769   |      869.4      || Sydney    | 2058 |  4336374   |      1214.8     |+-----------+------+------------+-----------------+```## InstallationInstall via pip:    python -m pip install -U prettytableInstall latest development version:    python -m pip install -U git+https://github.com/jazzband/prettytableOr from `requirements.txt`:    -e git://github.com/jazzband/prettytable.git#egg=prettytable## Tutorial on how to use the PrettyTable API### Getting your data into (and out of) the tableLet's suppose you have a shiny new PrettyTable:```pythonfrom prettytable import PrettyTablex = PrettyTable()```and you want to put some data into it. You have a few options.#### Row by rowYou can add data one row at a time. To do this you can set the field names first usingthe `field_names` attribute, and then add the rows one at a time using the `add_row`method:```pythonx.field_names = [&quot;City name&quot;, &quot;Area&quot;, &quot;Population&quot;, &quot;Annual Rainfall&quot;]x.add_row([&quot;Adelaide&quot;, 1295, 1158259, 600.5])x.add_row([&quot;Brisbane&quot;, 5905, 1857594, 1146.4])x.add_row([&quot;Darwin&quot;, 112, 120900, 1714.7])x.add_row([&quot;Hobart&quot;, 1357, 205556, 619.5])x.add_row([&quot;Sydney&quot;, 2058, 4336374, 1214.8])x.add_row([&quot;Melbourne&quot;, 1566, 3806092, 646.9])x.add_row([&quot;Perth&quot;, 5386, 1554769, 869.4])```#### All rows at onceWhen you have a list of rows, you can add them in one go with `add_rows`:```pythonx.field_names = [&quot;City name&quot;, &quot;Area&quot;, &quot;Population&quot;, &quot;Annual Rainfall&quot;]x.add_rows(    [        [&quot;Adelaide&quot;, 1295, 1158259, 600.5],        [&quot;Brisbane&quot;, 5905, 1857594, 1146.4],        [&quot;Darwin&quot;, 112, 120900, 1714.7],        [&quot;Hobart&quot;, 1357, 205556, 619.5],        [&quot;Sydney&quot;, 2058, 4336374, 1214.8],        [&quot;Melbourne&quot;, 1566, 3806092, 646.9],        [&quot;Perth&quot;, 5386, 1554769, 869.4],    ])```#### Column by columnYou can add data one column at a time as well. To do this you use the `add_column`method, which takes two arguments - a string which is the name for the field the columnyou are adding corresponds to, and a list or tuple which contains the column data:```pythonx.add_column(&quot;City name&quot;,[&quot;Adelaide&quot;,&quot;Brisbane&quot;,&quot;Darwin&quot;,&quot;Hobart&quot;,&quot;Sydney&quot;,&quot;Melbourne&quot;,&quot;Perth&quot;])x.add_column(&quot;Area&quot;, [1295, 5905, 112, 1357, 2058, 1566, 5386])x.add_column(&quot;Population&quot;, [1158259, 1857594, 120900, 205556, 4336374, 3806092,1554769])x.add_column(&quot;Annual Rainfall&quot;,[600.5, 1146.4, 1714.7, 619.5, 1214.8, 646.9,869.4])```#### Mixing and matchingIf you really want to, you can even mix and match `add_row` and `add_column` and buildsome of your table in one way and some of it in the other. Tables built this way arekind of confusing for other people to read, though, so don't do this unless you have agood reason.#### Importing data from a CSV fileIf you have your table data in a comma-separated values file (.csv), you can read thisdata into a PrettyTable like this:```pythonfrom prettytable import from_csvwith open(&quot;myfile.csv&quot;) as fp:    mytable = from_csv(fp)```#### Importing data from a database cursorIf you have your table data in a database which you can access using a library whichconfirms to the Python DB-API (e.g. an SQLite database accessible using the `sqlite`module), then you can build a PrettyTable using a cursor object, like this:```pythonimport sqlite3from prettytable import from_db_cursorconnection = sqlite3.connect(&quot;mydb.db&quot;)cursor = connection.cursor()cursor.execute(&quot;SELECT field1, field2, field3 FROM my_table&quot;)mytable = from_db_cursor(cursor)```#### Getting data outThere are three ways to get data out of a PrettyTable, in increasing order ofcompleteness:- The `del_row` method takes an integer index of a single row to delete.- The `del_column` method takes a field name of a single column to delete.- The `clear_rows` method takes no arguments and deletes all the rows in the table - but  keeps the field names as they were so you that you can repopulate it with the same  kind of data.- The `clear` method takes no arguments and deletes all rows and all field names. It's  not quite the same as creating a fresh table instance, though - style related  settings, discussed later, are maintained.### Displaying your table in ASCII formPrettyTable's main goal is to let you print tables in an attractive ASCII form, likethis:```+-----------+------+------------+-----------------+| City name | Area | Population | Annual Rainfall |+-----------+------+------------+-----------------+| Adelaide  | 1295 |  1158259   |      600.5      || Brisbane  | 5905 |  1857594   |      1146.4     || Darwin    | 112  |   120900   |      1714.7     || Hobart    | 1357 |   205556   |      619.5      || Melbourne | 1566 |  3806092   |      646.9      || Perth     | 5386 |  1554769   |      869.4      || Sydney    | 2058 |  4336374   |      1214.8     |+-----------+------+------------+-----------------+```You can print tables like this to `stdout` or get string representations of them.#### PrintingTo print a table in ASCII form, you can just do this:```pythonprint(x)```The old `x.printt()` method from versions 0.5 and earlier has been removed.To pass options changing the look of the table, use the `get_string()` method documentedbelow:```pythonprint(x.get_string())```#### StringingIf you don't want to actually print your table in ASCII form but just get a stringcontaining what _would_ be printed if you use `print(x)`, you can use the `get_string`method:```pythonmystring = x.get_string()```This string is guaranteed to look exactly the same as what would be printed by doing`print(x)`. You can now do all the usual things you can do with a string, like writeyour table to a file or insert it into a GUI.#### Controlling which data gets displayedIf you like, you can restrict the output of `print(x)` or `x.get_string` to only thefields or rows you like.The `fields` argument to these methods takes a list of field names to be printed:```pythonprint(x.get_string(fields=[&quot;City name&quot;, &quot;Population&quot;]))```gives:```+-----------+------------+| City name | Population |+-----------+------------+| Adelaide  |  1158259   || Brisbane  |  1857594   || Darwin    |   120900   || Hobart    |   205556   || Melbourne |  3806092   || Perth     |  1554769   || Sydney    |  4336374   |+-----------+------------+```The `start` and `end` arguments take the index of the first and last row to printrespectively. Note that the indexing works like Python list slicing - to print the 2nd,3rd and 4th rows of the table, set `start` to 1 (the first row is row 0, so the secondis row 1) and set `end` to 4 (the index of the 4th row, plus 1):```pythonprint(x.get_string(start=1, end=4))```prints:```+-----------+------+------------+-----------------+| City name | Area | Population | Annual Rainfall |+-----------+------+------------+-----------------+| Brisbane  | 5905 |    1857594 | 1146.4          || Darwin    | 112  |     120900 | 1714.7          || Hobart    | 1357 |     205556 | 619.5           |+-----------+------+------------+-----------------+```#### Changing the alignment of columnsBy default, all columns in a table are centre aligned.##### All columns at onceYou can change the alignment of all the columns in a table at once by assigning a onecharacter string to the `align` attribute. The allowed strings are `&quot;l&quot;`, `&quot;r&quot;` and`&quot;c&quot;` for left, right and centre alignment, respectively:```pythonx.align = &quot;r&quot;print(x)```gives:```+-----------+------+------------+-----------------+| City name | Area | Population | Annual Rainfall |+-----------+------+------------+-----------------+|  Adelaide | 1295 |    1158259 |           600.5 ||  Brisbane | 5905 |    1857594 |          1146.4 ||    Darwin |  112 |     120900 |          1714.7 ||    Hobart | 1357 |     205556 |           619.5 || Melbourne | 1566 |    3806092 |           646.9 ||     Perth | 5386 |    1554769 |           869.4 ||    Sydney | 2058 |    4336374 |          1214.8 |+-----------+------+------------+-----------------+```##### One column at a timeYou can also change the alignment of individual columns based on the corresponding fieldname by treating the `align` attribute as if it were a dictionary.```pythonx.align[&quot;City name&quot;] = &quot;l&quot;x.align[&quot;Area&quot;] = &quot;c&quot;x.align[&quot;Population&quot;] = &quot;r&quot;x.align[&quot;Annual Rainfall&quot;] = &quot;c&quot;print(x)```gives:```+-----------+------+------------+-----------------+| City name | Area | Population | Annual Rainfall |+-----------+------+------------+-----------------+| Adelaide  | 1295 |    1158259 |      600.5      || Brisbane  | 5905 |    1857594 |      1146.4     || Darwin    | 112  |     120900 |      1714.7     || Hobart    | 1357 |     205556 |      619.5      || Melbourne | 1566 |    3806092 |      646.9      || Perth     | 5386 |    1554769 |      869.4      || Sydney    | 2058 |    4336374 |      1214.8     |+-----------+------+------------+-----------------+```##### Sorting your table by a fieldYou can make sure that your ASCII tables are produced with the data sorted by oneparticular field by giving `get_string` a `sortby` keyword argument, which must be astring containing the name of one field.For example, to print the example table we built earlier of Australian capital citydata, so that the most populated city comes last, we can do this:```pythonprint(x.get_string(sortby=&quot;Population&quot;))```to get:```+-----------+------+------------+-----------------+| City name | Area | Population | Annual Rainfall |+-----------+------+------------+-----------------+| Darwin    | 112  |   120900   |      1714.7     || Hobart    | 1357 |   205556   |      619.5      || Adelaide  | 1295 |  1158259   |      600.5      || Perth     | 5386 |  1554769   |      869.4      || Brisbane  | 5905 |  1857594   |      1146.4     || Melbourne | 1566 |  3806092   |      646.9      || Sydney    | 2058 |  4336374   |      1214.8     |+-----------+------+------------+-----------------+```If we want the most populated city to come _first_, we can also give a`reversesort=True` argument.If you _always_ want your tables to be sorted in a certain way, you can make the settinglong-term like this:```pythonx.sortby = &quot;Population&quot;print(x)print(x)print(x)```All three tables printed by this code will be sorted by population (you could do`x.reversesort = True` as well, if you wanted). The behaviour will persist until youturn it off:```pythonx.sortby = None```If you want to specify a custom sorting function, you can use the `sort_key` keywordargument. Pass this a function which accepts two lists of values and returns a negativeor positive value depending on whether the first list should appear before or after thesecond one. If your table has n columns, each list will have n+1 elements. Each listcorresponds to one row of the table. The first element will be whatever data is in therelevant row, in the column specified by the `sort_by` argument. The remaining nelements are the data in each of the table's columns, in order, including a repeatedinstance of the data in the `sort_by` column.#### Adding sections to a tableYou can divide your table into different sections using the `divider` argument. Thiswill add a dividing line into the table under the row who has this field set. So we canset up a table like this:```pythonx = PrettyTable()x.field_names = [&quot;City name&quot;, &quot;Area&quot;, &quot;Population&quot;, &quot;Annual Rainfall&quot;]x.add_row([&quot;Adelaide&quot;, 1295, 1158259, 600.5])x.add_row([&quot;Brisbane&quot;, 5905, 1857594, 1146.4])x.add_row([&quot;Darwin&quot;, 112, 120900, 1714.7])x.add_row([&quot;Hobart&quot;, 1357, 205556, 619.5], divider=True)x.add_row([&quot;Melbourne&quot;, 1566, 3806092, 646.9])x.add_row([&quot;Perth&quot;, 5386, 1554769, 869.4])x.add_row([&quot;Sydney&quot;, 2058, 4336374, 1214.8])```to get a table like this:```+-----------+------+------------+-----------------+| City name | Area | Population | Annual Rainfall |+-----------+------+------------+-----------------+|  Adelaide | 1295 |  1158259   |      600.5      ||  Brisbane | 5905 |  1857594   |      1146.4     ||   Darwin  | 112  |   120900   |      1714.7     ||   Hobart  | 1357 |   205556   |      619.5      |+-----------+------+------------+-----------------+| Melbourne | 1566 |  3806092   |      646.9      ||   Perth   | 5386 |  1554769   |      869.4      ||   Sydney  | 2058 |  4336374   |      1214.8     |+-----------+------+------------+-----------------+```Any added dividers will be removed if a table is sorted.### Changing the appearance of your table - the easy wayBy default, PrettyTable produces ASCII tables that look like the ones used in SQLdatabase shells. But it can print them in a variety of other formats as well. If theformat you want to use is common, PrettyTable makes this easy for you to do using the`set_style` method. If you want to produce an uncommon table, you'll have to do thingsslightly harder (see later).#### Setting a table styleYou can set the style for your table using the `set_style` method before any calls to`print` or `get_string`. Here's how to print a table in a format which works nicely withMicrosoft Word's &quot;Convert to table&quot; feature:```pythonfrom prettytable import MSWORD_FRIENDLYx.set_style(MSWORD_FRIENDLY)print(x)```In addition to `MSWORD_FRIENDLY` you can use these in-built styles for your tables:- `DEFAULT` - The default look, used to undo any style changes you may have made- `PLAIN_COLUMNS` - A borderless style that works well with command line programs for  columnar data- `MARKDOWN` - A style that follows Markdown syntax- `ORGMODE` - A table style that fits [Org mode](https://orgmode.org/) syntax- `SINGLE_BORDER` and `DOUBLE_BORDER` - Styles that use continuous single/double border  lines with Box drawing characters for a fancier display on terminalOther styles are likely to appear in future releases.### Changing the appearance of your table - the hard wayIf you want to display your table in a style other than one of the in-built styleslisted above, you'll have to set things up the hard way.Don't worry, it's not really that hard!#### Style optionsPrettyTable has a number of style options which control various aspects of how tablesare displayed. You have the freedom to set each of these options individually towhatever you prefer. The `set_style` method just does this automatically for you.The options are these:- `border` - A boolean option (must be `True` or `False`). Controls whether a border is  drawn inside and around the table.- `preserve_internal_border` - A boolean option (must be `True` or `False`). Controls  whether borders are still drawn within the table even when `border=False`.- `header` - A boolean option (must be `True` or `False`). Controls whether the first  row of the table is a header showing the names of all the fields.- `hrules` - Controls printing of horizontal rules after rows. Allowed values: `FRAME`,  `HEADER`, `ALL`, `NONE` - note that these are variables defined inside the  `prettytable` module so make sure you import them or use `prettytable.FRAME` etc.- `vrules` - Controls printing of vertical rules between columns. Allowed values:  `FRAME`, `ALL`, `NONE`.- `int_format` - A string which controls the way integer data is printed. This works  like: `print(&quot;%&lt;int_format&gt;d&quot; % data)`- `float_format` - A string which controls the way floating point data is printed. This  works like: `print(&quot;%&lt;float_format&gt;f&quot; % data)`- `custom_format` - A Dictionary of field and callable. This allows you to set any  format you want `pf.custom_format[&quot;my_col_int&quot;] = ()lambda f, v: f&quot;{v:,}&quot;`. The type  of the callable if `callable[[str, Any], str]`- `padding_width` - Number of spaces on either side of column data (only used if left  and right paddings are `None`).- `left_padding_width` - Number of spaces on left-hand side of column data.- `right_padding_width` - Number of spaces on right-hand side of column data.- `vertical_char` - Single character string used to draw vertical lines. Default is `|`.- `horizontal_char` - Single character string used to draw horizontal lines. Default is  `-`.- `_horizontal_align_char` - single character string used to indicate column alignment  in horizontal lines. Default is `:` for Markdown, otherwise `None`.- `junction_char` - Single character string used to draw line junctions. Default is `+`.- `top_junction_char` - single character string used to draw top line junctions. Default  is `junction_char`.- `bottom_junction_char` - single character string used to draw bottom line junctions.  Default is `junction_char`.- `right_junction_char` - single character string used to draw right line junctions.  Default is `junction_char`.- `left_junction_char` - single character string used to draw left line junctions.  Default is `junction_char`.- `top_right_junction_char` - single character string used to draw top-right line  junctions. Default is `junction_char`.- `top_left_junction_char` - single character string used to draw top-left line  junctions. Default is `junction_char`.- `bottom_right_junction_char` - single character string used to draw bottom-right line  junctions. Default is `junction_char`- `bottom_left_junction_char` - single character string used to draw bottom-left line  junctions. Default is `junction_char`.You can set the style options to your own settings in two ways:#### Setting style options for the long termIf you want to print your table with a different style several times, you can set youroption for the long term just by changing the appropriate attributes. If you never wantyour tables to have borders you can do this:```pythonx.border = Falseprint(x)print(x)print(x)```Neither of the 3 tables printed by this will have borders, even if you do things likeadd extra rows in between them. The lack of borders will last until you do:```pythonx.border = True```to turn them on again. This sort of long-term setting is exactly how `set_style` works.`set_style` just sets a bunch of attributes to pre-set values for you.Note that if you know what style options you want at the moment you are creating yourtable, you can specify them using keyword arguments to the constructor. For example, thefollowing two code blocks are equivalent:```pythonx = PrettyTable()x.border = Falsex.header = Falsex.padding_width = 5x = PrettyTable(border=False, header=False, padding_width=5)```#### Changing style options just onceIf you don't want to make long-term style changes by changing an attribute like in theprevious section, you can make changes that last for just one `get_string` by givingthose methods keyword arguments. To print two &quot;normal&quot; tables with one borderless tablebetween them, you could do this:```pythonprint(x)print(x.get_string(border=False))print(x)```### Changing the appearance of your table - with _colors_!PrettyTable has the functionality of printing your table with ANSI color codes. Thisincludes support for most Windows versions through[Colorama](https://pypi.org/project/colorama/). To get started, import the `ColorTable`class instead of `PrettyTable`.```diff-from prettytable import PrettyTable+from prettytable.colortable import ColorTable```The `ColorTable` class can be used the same as `PrettyTable`, but it adds an extraproperty. You can now specify a custom _theme_ that will format your table with colors.```pythonfrom prettytable.colortable import ColorTable, Themesx = ColorTable(theme=Themes.OCEAN)print(x)```#### Creating a custom themeThe `Theme` class allows you to customize both the characters and colors used in yourtable.| Argument                                                   | Description                                               || ---------------------------------------------------------- | --------------------------------------------------------- || `default_color`                                            | The color to use as default                               || `vertical_char`, `horizontal_char`, and `junction_char`    | The characters used for creating the outline of the table || `vertical_color`, `horizontal_color`, and `junction_color` | The colors used to style each character.                  |&gt; **Note:** Colors are formatted with the `Theme.format_code(s: str)` function. It&gt; accepts a string. If the string starts with an escape code (like `\x1b`) then it will&gt; return the given string. If the string is just whitespace, it will return `&quot;&quot;`. If the&gt; string is a number (like `&quot;34&quot;`), it will automatically format it into an escape code.&gt; I recommend you look into the source code for more information.### Displaying your table in JSONPrettyTable will also print your tables in JSON, as a list of fields and an array ofrows. Just like in ASCII form, you can actually get a string representation - just use`get_json_string()`.### Displaying your table in HTML formPrettyTable will also print your tables in HTML form, as `&lt;table&gt;`s. Just like in ASCIIform, you can actually get a string representation - just use `get_html_string()`. HTMLprinting supports the `fields`, `start`, `end`, `sortby` and `reversesort` arguments inexactly the same way as ASCII printing.#### Styling HTML tablesBy default, PrettyTable outputs HTML for &quot;vanilla&quot; tables. The HTML code is quitesimple. It looks like this:```html&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;City name&lt;/th&gt;      &lt;th&gt;Area&lt;/th&gt;      &lt;th&gt;Population&lt;/th&gt;      &lt;th&gt;Annual Rainfall&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;Adelaide&lt;/td&gt;      &lt;td&gt;1295&lt;/td&gt;      &lt;td&gt;1158259&lt;/td&gt;      &lt;td&gt;600.5&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Brisbane&lt;/td&gt;      &lt;td&gt;5905&lt;/td&gt;      &lt;td&gt;1857594&lt;/td&gt;      &lt;td&gt;1146.4&lt;/td&gt;      ...    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;```If you like, you can ask PrettyTable to do its best to mimic the style options that yourtable has set using inline CSS. This is done by giving a `format=True` keyword argumentto `get_html_string` method. Note that if you _always_ want to print formatted HTML youcan do:```pythonx.format = True```and the setting will persist until you turn it off.Just like with ASCII tables, if you want to change the table's style for just one`get_html_string` you can pass those methods' keyword arguments - exactly like `print`and `get_string`.#### Setting HTML attributesYou can provide a dictionary of HTML attribute name/value pairs to the `get_html_string`method using the `attributes` keyword argument. This lets you specify common HTMLattributes like `id` and `class` that can be used for linking to your tables orcustomising their appearance using CSS. For example:```pythonprint(x.get_html_string(attributes={&quot;id&quot;:&quot;my_table&quot;, &quot;class&quot;:&quot;red_table&quot;}))```will print:```html&lt;table id=&quot;my_table&quot; class=&quot;red_table&quot;&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;City name&lt;/th&gt;      &lt;th&gt;Area&lt;/th&gt;      &lt;th&gt;Population&lt;/th&gt;      &lt;th&gt;Annual Rainfall&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      ... ... ...    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;```### Miscellaneous things#### Copying a tableYou can call the `copy` method on a PrettyTable object without arguments to return anidentical independent copy of the table.If you want a copy of a PrettyTable object with just a subset of the rows, you can uselist slicing notation:```pythonnew_table = old_table[0:5]```## ContributingAfter editing files, use the [Black](https://github.com/psf/black) linter to auto-formatchanged lines.```shpython -m pip install blackblack prettytable*.py```</longdescription>
</pkgmetadata>