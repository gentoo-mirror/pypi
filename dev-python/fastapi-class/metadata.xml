<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Class](https://user-images.githubusercontent.com/52716203/137606695-f110f129-08b1-45f3-a445-962c1f28378c.png)&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Classes and Decorators to use FastAPI with Class based routing&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/yezz123/fastapi-class/actions/workflows/test.yml&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/yezz123/fastapi-class/actions/workflows/test.yml/badge.svg&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/yezz123/fastapi-class&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/yezz123/fastapi-class/branch/main/graph/badge.svg&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/fastapi-class&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/fastapi-class?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/fastapi-class&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/fastapi-class.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Source Code**: &lt;https://github.com/yezz123/fastapi-class&gt;**Install the project**: `pip install fastapi-class`---As you create more complex FastAPI applications, you may find yourself frequently repeating the same dependencies in multiple related endpoints.A common question people have as they become more comfortable with FastAPI is how they can reduce the number of times they have to copy/paste the same dependency into related routes.`fastapi_class` provides a `class-based view` decorator `@View` to help reduce the amount of boilerplate necessary when developing related routes.&gt; Highly inspired by [Fastapi-utils](https://fastapi-utils.davidmontague.xyz/user-guide/class-based-views/), Thanks to [@dmontagu](https://github.com/dmontagu) for the great work.- Example:```pythonfrom fastapi import FastAPI, APIRouter, Queryfrom pydantic import BaseModelfrom fastapi_class import Viewapp = FastAPI()router = APIRouter()class ItemModel(BaseModel):    id: int    name: str    description: str = None@View(router)class ItemView:    def post(self, item: ItemModel):        return item    def get(self, item_id: int = Query(..., gt=0)):        return {&quot;item_id&quot;: item_id}app.include_router(router)```### Response model üì¶`Exception` in list need to be either function that return `fastapi.HTTPException` itself. In case of a function it is required to have all of it's arguments to be `optional`.```pyfrom fastapi import FastAPI, APIRouter, HTTPException, statusfrom fastapi.responses import PlainTextResponsefrom pydantic import BaseModelfrom fastapi_class import Viewapp = FastAPI()router = APIRouter()NOT_AUTHORIZED = HTTPException(401, &quot;Not authorized.&quot;)NOT_ALLOWED = HTTPException(405, &quot;Method not allowed.&quot;)NOT_FOUND  = lambda item_id=&quot;item_id&quot;: HTTPException(404, f&quot;Item with {item_id} not found.&quot;)class ItemResponse(BaseModel):    field: str | None = None@view(router)class MyView:    exceptions = {        &quot;__all__&quot;: [NOT_AUTHORIZED],        &quot;put&quot;: [NOT_ALLOWED, NOT_FOUND]    }    RESPONSE_MODEL = {        &quot;put&quot;: ItemResponse    }    RESPONSE_CLASS = {        &quot;delete&quot;: PlainTextResponse    }    def get(self):        ...    def put(self):        ...    def delete(self):        ...app.include_router(router)```### Customized Endpoints```pyfrom fastapi import FastAPI, APIRouter, HTTPExceptionfrom fastapi.responses import PlainTextResponsefrom pydantic import BaseModelfrom fastapi_class import View, endpointapp = FastAPI()router = APIRouter()NOT_AUTHORIZED = HTTPException(401, &quot;Not authorized.&quot;)NOT_ALLOWED = HTTPException(405, &quot;Method not allowed.&quot;)NOT_FOUND  = lambda item_id=&quot;item_id&quot;: HTTPException(404, f&quot;Item with {item_id} not found.&quot;)EXCEPTION = HTTPException(400, &quot;Example.&quot;)class UserResponse(BaseModel):    field: str | None = None@View(router)class MyView:    exceptions = {        &quot;__all__&quot;: [NOT_AUTHORIZED],        &quot;put&quot;: [NOT_ALLOWED, NOT_FOUND],        &quot;edit&quot;: [EXCEPTION]    }    RESPONSE_MODEL = {        &quot;put&quot;: UserResponse,        &quot;edit&quot;: UserResponse    }    RESPONSE_CLASS = {        &quot;delete&quot;: PlainTextResponse    }    def get(self):        ...    def put(self):        ...    def delete(self):        ...    @endpoint((&quot;PUT&quot;,), path=&quot;edit&quot;)    def edit(self):        ...```**Note:** The `edit()` endpoint is decorated with the `@endpoint((&quot;PUT&quot;,), path=&quot;edit&quot;)` decorator, which specifies that this endpoint should handle `PUT` requests to the `/edit` path.## Development üöß### Setup environment üì¶You should create a virtual environment and activate it:```bashpython -m venv venv/``````bashsource venv/bin/activate```And then install the development dependencies:```bash# Install dependenciespip install -e .[test,lint]```### Run tests üåùYou can run all the tests with:```bashbash scripts/test.sh```### Format the code üçÇExecute the following command to apply `pre-commit` formatting:```bashbash scripts/format.sh```Execute the following command to apply `mypy` type checking:```bashbash scripts/lint.sh```## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>