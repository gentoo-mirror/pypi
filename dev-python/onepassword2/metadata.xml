<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OnePassword CLI v2 python wrapperSimple python wrapper for the [1password cli](https://developer.1password.com/docs/cli) **version 2**.## Setup- Install the `op` cli by following [these instructions](https://developer.1password.com/docs/cli/get-started#install). - Make sure you have `op` in your PATH and that it is __not version 1__```$ op --version2.12.0```- Have your 1password username, password, and signin url handy- `pip install onepassword2` \   __or, for a local install__ \   `make local_install`If, for some reason python-Levenshtein fails to compile, skip it- `pip install fuzzywuzzy &amp;&amp; pip install --no-deps onepassword2`## Usage### CLIThe `op` cli tool has a _lot_ of options for managing multiple accounts, profiles, etc.  Sessions opened with the cli terminate after 10 minutes, requiring the user to re-authenticate interactively.  This is good security.  However, if you need long running, non-interactive usage, it's a hindrance. onepassword2 comes with a handy CLI to automagify the signin process.```bashexport OP_ACCOUNT='user@example.com'export OP_PASSWORD=&quot;your password&quot;export OP_HOSTNAME=&quot;my.1password.com&quot;export OP_SECRET_KEY=&quot;JA-EKJHGQ-LKIUHG-12345-12345-12345-32154&quot;eval $(op-signin)...$ op vault listID                            NAMEnaaizerttzertzefzyhjroeqrq    Private```### In python scripts```pythonusername = &quot;user@example.com&quot;password = &quot;your password&quot;hostname = &quot;yourhost.1password.com&quot;secret_key = &quot;JA-EKJHGQ-LKIUHG-12345-12345-12345-32154&quot;from onepassword2 import OP2o = OP2( username, password, secret_key, hostname)o.signin()for v in o.vaults():    print(v)```List items```pythonfor d in o.items():    print(d)```Get a single item as a python dictionary```pythonitem = o.item(&quot;my item&quot;)print(item)```Get a single item as an `OP2Item` object with handy methods to modify fields```pythonfrom onepassword2 import OP2, OP2Itemitem = OP2Item(o, &quot;my item&quot;)item.set(&quot;notesPlain&quot;, &quot;new value for notes&quot;)item.save()```If more than one item has the same name, you'll get a `MultipleMatchesException````pythonfrom onepassword2 import OP2, OP2Item, MultipleMatchesExceptionitem1 = OP2Item(o)item1.set(&quot;title&quot;, &quot;my handy item&quot;)item1.set(&quot;notesPlain&quot;, &quot;new value for notes&quot;)item1.save()item2 = OP2Item(o)item2.set(&quot;title&quot;, &quot;my handy item&quot;)item2.set(&quot;notesPlain&quot;, &quot;hahaha same title, different content&quot;)item2.save()try:    item = OP2Item(o, &quot;my item&quot;)    print(item)except MultipleMatchesException:    for i in o.items(&quot;my item&quot;):        item = OP2Item(o, i[&quot;id&quot;])        ...```Make a new secure note```pythonfrom onepassword2 import OP2, OP2Itemitem = OP2Item(o)item.set(&quot;title&quot;, &quot;my note&quot;)item.set(&quot;notesPlain&quot;, &quot;new value for notes&quot;)item.save()```If you have more than one vault, you'll need to specify which one to save the secure note to:```pythonfrom onepassword2 import OP2, OP2Item, OP2Vaultv = OP2Vault(o)v.name(&quot;my new vault&quot;)v.save()item = OP2Item(o)item.set(&quot;title&quot;, &quot;my note&quot;)item.set(&quot;vault&quot;, &quot;my new vault&quot;)item.set(&quot;notesPlain&quot;, &quot;new value for notes&quot;)item.save()```Example username/password combo:```pythonitem = OP2Item(o)item.set(&quot;title&quot;, &quot;my account&quot;)item.set('url',  &quot;http://example.com&quot;)item.set('username',  &quot;username@example.com&quot;)item.set('password',  &quot;321657PASKJHKUH&quot;)# urls can also have notesitem.set('notesPlain',  &quot;notes here&quot;)# tags can be set as an arrayitem.set('tags',  [&quot;tags&quot;, &quot;go&quot;, &quot;here&quot;])item.save()```</longdescription>
</pkgmetadata>