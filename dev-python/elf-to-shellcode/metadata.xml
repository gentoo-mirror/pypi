<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Elf to shellcodeConvert standard elf files to standalone shellcodes.Please read the following documentation and view the examples for this project to work properly#### Project links[Github](https://github.com/jonatanSh/elf_to_shellcode)[Pypi](https://pypi.org/project/elf-to-shellcode/)#### Supported architectures* mips* i386 (32bit)* i386 (64bit)* arm (32bit)* aarch64 (arm 64 bit)#### Installation:```bashpip install elf_to_shellcode```###### Python version support* python3## How does this work ?The python library parses the elf and create a simple relocatable file formatThen the mini loader is inserted as the entry point of the elf the mini loaderwill load the relocatable format and execute it.There are no special requirements, the library contain the compiledmini loaders.```mermaid  classDiagram    ShellcodeEntryPoint --|&gt; MiniLoader    ShellcodeEntryPoint: Shellcode to jump into the mini loader    MiniLoader --|&gt; Relocation table    MiniLoader: Contain all the logic for parsing the relocation table    MiniLoader: fully os independent    Relocation table --|&gt; SHELF    Relocation table : Contain table required for shellcode runtime relocation    SHELF: Shellcode elf - This is the compiled binary we convert into shellcode    SHELF: This binary is stripped into only opcodes    SHELF: fully relocatable using the relocation table```This project is intended to convert elf to os independent shellcodes.Therefor the loader never allocate memory and the shellcode format is not packed.You can just execute it, eg ...```c((void (*)()) shellcode)();```note that __libc_start_main perform syscallstherefor if you want your shellcode to be fully os independent you must compile with -nostartfilesfollow the examples below## Creating a shellcodeSome compilation flags are required for this to work properly.You must compile the binary with -fPIE and -static take a look at the provided examples below(makefile).shellcode is a stripped binary with no symbols and no elf information only opcodes, in order to make the shellcode this library require a binary with elf information.so make sure you are not stripping the binary before using this librarysimplified make command for mips big endian```cgcc example.c -fno-stack-protector -fPIE -fpic -static -nostartfiles --entry=main -o binary.outpython -m elf_to_shellcode --input binary.out                                     ```### Examples:[Makefile](https://github.com/jonatanSh/elf_to_shellcode/blob/master/examples/Makefile)[Example.c](https://github.com/jonatanSh/elf_to_shellcode/blob/master/examples/example.c)### Testing your shellcodeYou can use the provided shellcode[Loader](https://github.com/jonatanSh/elf_to_shellcode/tree/master/shellcode_loader)to test you shellcodes```bashqemu-mips ./shellcode_loader ./myshellcode.out```### Output example```bashShellcode size = 66620Allocating shellcode buffer, size = 69632Mapping new memory, size = 69632Jumping to shellcode, address = 0x7f7ee000Hello from shellcode !```## Advanced concepts and featuresfor following links only work on the github page* [Compiling with libc](docs/libc.md)* [Dynamic shellcode](docs/dynamic.md)* [Hooking the mini loader](docs/hooks.md)* [Mitigation bypass](docs/mitigation_bypass.md)* [Optimizations](docs/optimizations.md)* [Output formats](docs/output_formats.md)* [Development](docs/develop.md)* [Specific architecture limitations](docs/speific_arch_limitations.md)</longdescription>
</pkgmetadata>