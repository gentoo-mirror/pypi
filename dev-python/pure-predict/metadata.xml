<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pure-predict: Machine learning prediction in pure Python========================================================|License| |Build Status| |PyPI Package| |Python Versions|``pure-predict`` speeds up and slims down machine learning prediction applications. It is a foundational tool for serverless inference or small batch prediction with popular machine learning frameworks like `scikit-learn &lt;https://scikit-learn.org/stable/&gt;`__ and `fasttext &lt;https://fasttext.cc/&gt;`__. It implements the predict methods of these frameworks in pure Python.Primary Use Cases-----------------The primary use case for ``pure-predict`` is the following scenario: #. A model is trained in an environment without strong container footprint constraints. Perhaps a long running &quot;offline&quot; job on one or many machines where installing a number of python packages from PyPI is not at all problematic.#. At prediction time the model needs to be served behind an API. Typical access patterns are to request a prediction for one &quot;record&quot; (one &quot;row&quot; in a ``numpy`` array or one string of text to classify) per request or a mini-batch of records per request.#. Preferred infrastructure for the prediction service is either serverless (`AWS Lambda &lt;https://aws.amazon.com/lambda/&gt;`__) or a container service where the memory footprint of the container is constrained.#. The fitted model object's artifacts needed for prediction (coefficients, weights, vocabulary, decision tree artifacts, etc.) are relatively small (10s to 100s of MBs).In this scenario, a container service with a large dependency footprint can be overkill for a microservice, particularly if the access patterns favor the pricing model of a serverless application. Additionally, for smaller models and single record predictions per request, the ``numpy`` and ``scipy`` functionality in the prediction methods of popular machine learning frameworks work against the application in terms of latency, `underperforming pure python &lt;https://github.com/Ibotta/pure-predict/blob/master/examples/performance_rf.py&gt;`__ in some cases.Check out the `blog post &lt;https://medium.com/building-ibotta/predict-with-sklearn-20x-faster-9f2803944446&gt;`__ for more information on the motivation and use cases of ``pure-predict``.Package Details---------------It is a Python package for machine learning prediction distributed under the `Apache 2.0 software license &lt;https://github.com/Ibotta/sk-dist/blob/master/LICENSE&gt;`__. It contains multiple subpackages which mirror their open source counterpart (``scikit-learn``, ``fasttext``, etc.). Each subpackage has utilities to convert a fitted machine learning model into a custom object containing prediction methods that mirror their native counterparts, but converted to pure python. Additionally, all relevant model artifacts needed for prediction are converted to pure python. A ``pure-predict`` model object can then be pickled and laterunpickled without any 3rd party dependencies other than ``pure-predict``.This eliminates the need to have large dependency packages installed in order to make predictions with fitted machine learning models using popular open source packages fortraining models. These dependencies (``numpy``, ``scipy``, ``scikit-learn``, ``fasttext``, etc.) are large in size and `not always necessary to make fast and accuratepredictions &lt;https://github.com/Ibotta/pure-predict/blob/master/examples/performance_rf.py&gt;`__. Additionally, they rely on C extensions that may not be ideal for serverless applications with a python runtime.Quick Start Example-------------------In a python enviornment with ``scikit-learn`` and its dependencies installed:.. code-block:: python        import pickle        from sklearn.ensemble import RandomForestClassifier    from sklearn.datasets import load_iris    from pure_sklearn.map import convert_estimator        # fit sklearn estimator    X, y = load_iris(return_X_y=True)    clf = RandomForestClassifier()    clf.fit(X, y)        # convert to pure python estimator    clf_pure_predict = convert_estimator(clf)    with open(&quot;model.pkl&quot;, &quot;wb&quot;) as f:         pickle.dump(clf_pure_predict, f)             # make prediction with sklearn estimator    y_pred = clf.predict([[0.25, 2.0, 8.3, 1.0]])    print(y_pred)    [2]    In a python enviornment with only ``pure-predict`` installed:.. code-block:: python    import pickle        # load pickled model    with open(&quot;model.pkl&quot;, &quot;rb&quot;) as f:         clf = pickle.load(f)             # make prediction with pure-predict object    y_pred = clf.predict([[0.25, 2.0, 8.3, 1.0]])    print(y_pred)    [2]Subpackages-----------`pure_sklearn &lt;https://github.com/Ibotta/pure-predict/tree/master/pure_sklearn&gt;`__~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Prediction in pure python for a subset of ``scikit-learn`` estimators and transformers.- **estimators**    - **linear models** - supports the majority of linear models for classification    - **trees** - decision trees, random forests, gradient boosting and xgboost     - **naive bayes** - a number of popular naive bayes classifiers    - **svm** - linear SVC- **transformers**    - **preprocessing** - normalization and onehot/ordinal encoders    - **impute** - simple imputation     - **feature extraction** - text (tfidf, count vectorizer, hashing vectorizer) and dictionary vectorization     - **pipeline** - pipelines and feature unionsSparse data - supports a custom pure python sparse data object - sparse data is handled as would be expected by the relevent transformers and estimators `pure_fasttext &lt;https://github.com/Ibotta/pure-predict/tree/master/pure_fasttext&gt;`__~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Prediction in pure python for ``fasttext``.- **supervised** - predicts labels for supervised models; no support for quantized models (blocked by `this issue &lt;https://github.com/facebookresearch/fastText/issues/984&gt;`__)- **unsupervised** - lookup of word or sentence embeddings given input textInstallation------------Dependencies~~~~~~~~~~~~``pure-predict`` requires:-  `Python &lt;https://www.python.org/&gt;`__ (&gt;= 3.6)Dependency Notes~~~~~~~~~~~~~~~~-  ``pure_sklearn`` has been tested with ``scikit-learn`` versions &gt;= 0.20 -- certain functionality may work with lower versions but are not guaranteed. Some functionality is explicitly not supported for certain ``scikit-learn`` versions and exceptions will be raised as appropriate.- ``xgboost`` requires version &gt;= 0.82 for support with ``pure_sklearn``.- ``pure-predict`` is not supported with Python 2.- ``fasttext`` versions &lt;= 0.9.1 have been tested.User Installation~~~~~~~~~~~~~~~~~The easiest way to install ``pure-predict`` is with ``pip``:::    pip install --upgrade pure-predictYou can also download the source code:::    git clone https://github.com/Ibotta/pure-predict.gitTesting~~~~~~~With ``pytest`` installed, you can run tests locally:::    pytest pure-predictExamples--------The package contains `examples &lt;https://github.com/Ibotta/pure-predict/tree/master/examples&gt;`__ on how to use ``pure-predict`` in practice.Calls for Contributors----------------------Contributing to ``pure-predict`` is `welcomed by any contributors &lt;https://github.com/Ibotta/pure-predict/blob/master/CONTRIBUTING.md&gt;`__. Specific calls for contribution are as follows:#. Examples, tests and documentation -- particularly more detailed examples with performance testing of various estimators under various constraints.#. Adding more ``pure_sklearn`` estimators. The ``scikit-learn`` package is extensive and only partially covered by ``pure_sklearn``. `Regression &lt;https://scikit-learn.org/stable/supervised_learning.html#supervised-learning&gt;`__ tasks in particular missing from ``pure_sklearn``. `Clustering &lt;https://scikit-learn.org/stable/modules/clustering.html#clustering&gt;`__, `dimensionality reduction &lt;https://scikit-learn.org/stable/modules/decomposition.html#decompositions&gt;`__, `nearest neighbors &lt;https://scikit-learn.org/stable/modules/neighbors.html&gt;`__, `feature selection &lt;https://scikit-learn.org/stable/modules/feature_selection.html&gt;`__, non-linear `SVM &lt;https://scikit-learn.org/stable/modules/svm.html&gt;`__, and more are also omitted and would be good candidates for extending ``pure_sklearn``.#. General efficiency. There is likely low hanging fruit for improving the efficiency of the ``numpy`` and ``scipy`` functionality that has been ported to ``pure-predict``.#. `Threading &lt;https://docs.python.org/3/library/threading.html&gt;`__ could be considered to improve performance -- particularly for making predictions with multiple records.#. A public `AWS lambda layer &lt;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&gt;`__ containing ``pure-predict``.Background----------The project was started at `IbottaInc. &lt;https://medium.com/building-ibotta&gt;`__ on the machine learningteam and open sourced in 2020. It is currently maintained by the machine learning team at Ibotta.Acknowledgements~~~~~~~~~~~~~~~~Thanks to `David Mitchell &lt;https://github.com/dlmitchell&gt;`__ and `Andrew Tilley &lt;https://github.com/tilleyand&gt;`__ for internal review before open source. Thanks to `James Foley &lt;https://github.com/chadfoley36&gt;`__ for logo artwork... |License| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg   :target: https://opensource.org/licenses/Apache-2.0.. |Build Status| image:: https://travis-ci.com/Ibotta/pure-predict.png?branch=master   :target: https://travis-ci.com/Ibotta/pure-predict.. |PyPI Package| image:: https://badge.fury.io/py/pure-predict.svg   :target: https://pypi.org/project/pure-predict/.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pure-predict   :target: https://pypi.org/project/pure-predict/</longdescription>
</pkgmetadata>