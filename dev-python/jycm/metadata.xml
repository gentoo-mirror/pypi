<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JYCM![Build Status](https://github.com/eggachecat/jycm/actions/workflows/on-push.yml/badge.svg)[![PyPI version](https://badge.fury.io/py/jycm.svg)](https://badge.fury.io/py/jycm)[![Coverage Status](https://coveralls.io/repos/github/eggachecat/jycm/badge.svg?branch=master&amp;kill_cache=1)](https://coveralls.io/github/eggachecat/jycm?branch=master)A flexible json diff framework for minimalist.JYCM = Json You-Cha-Ma (「is there a difference」in Chinese)# Reference- [deepdiff](https://github.com/seperman/deepdiff)    - how results are reported in JYCM is learnt from this amazing framework.    - how TreeLevel is designed in JYCM is learnt from this amazing framework.    - [gojsondif](https://github.com/yudai/gojsondiff)    - Fuzzy matching part of JYCM is learnt from this amazing framework.# Install&gt; pip install jycm# RendererYes! JYCM has a [rendering tool](https://github.com/eggachecat/react-jycm-viewer) out of the box!![gif-show](https://media.giphy.com/media/03PbgaFqYCwyhzOUSU/giphy.gif)# [Document](https://jycm.readthedocs.io/en/latest/index.html)# Use JYCM with viewer directly from Terminal## Easy```bashpython -m jycm --help # Usage: python -m jycm [OPTIONS]# Options:#   --interactive  Enter interactive mode#   --left TEXT    Left Json#   --right TEXT   Right Json#   --rules TEXT   Rules#   --output TEXT  The folder where the results will be dumped.#   --open         Open the browser; This is valid only if you specify the#                  output parameter.#   --help         Show this message and exit.```### ExampleUse-  mac/linux```bashpython -m jycm --show \--left=&quot;{\&quot;normal-string\&quot;:\&quot;aaaaa\&quot;,\&quot;ignore_me-string\&quot;:\&quot;aaaaa\&quot;,\&quot;normal-list-1\&quot;:[{\&quot;val\&quot;:1},{\&quot;val\&quot;:2},{\&quot;val\&quot;:3},{\&quot;val\&quot;:4},{\&quot;val\&quot;:5}],\&quot;set_in_set\&quot;:[{\&quot;id\&quot;:1,\&quot;label\&quot;:\&quot;label:1\&quot;,\&quot;set\&quot;:[1,2,3,4,5]},{\&quot;id\&quot;:2,\&quot;label\&quot;:\&quot;label:2\&quot;,\&quot;set\&quot;:[4,5,6,7,8]}]}&quot; \--right=&quot;{\&quot;normal-string\&quot;:\&quot;bbbbb\&quot;,\&quot;ignore_me-string\&quot;:\&quot;bbbbb\&quot;,\&quot;normal-list-1\&quot;:[{\&quot;val\&quot;:1},{\&quot;val\&quot;:9},{\&quot;val\&quot;:3},{\&quot;val\&quot;:8},{\&quot;what\&quot;:5}],\&quot;set_in_set\&quot;:[{\&quot;id\&quot;:2,\&quot;label\&quot;:\&quot;label:2\&quot;,\&quot;set\&quot;:[6,5,4,7]},{\&quot;id\&quot;:1,\&quot;label\&quot;:\&quot;label:1\&quot;,\&quot;set\&quot;:[3,2,1,4,8,9]}]}&quot; \--rules=&quot;[{\&quot;operation\&quot;:\&quot;ignore\&quot;,\&quot;value\&quot;:\&quot;^ignore_me.*\&quot;},{\&quot;value\&quot;:\&quot;^set_in_set$\&quot;,\&quot;operation\&quot;:\&quot;operator:list:ignoreOrder\&quot;},{\&quot;value\&quot;:\&quot;set_in_set-&gt;\\\\[\\\\d+\\\\]-&gt;set\&quot;,\&quot;operation\&quot;:\&quot;operator:list:ignoreOrder\&quot;}]&quot; \--left_title=&quot;Left Title&quot; \--right_title=&quot;Right Title&quot;```- or on windows:```python -m jycm --show --left=&quot;{'normal-string': 'aaaaa', 'ignore_me-string': 'aaaaa', 'normal-list-1': [{'val': 1}, {'val': 2}, {'val': 3}, {'val': 4}, {'val': 5}], 'set_in_set': [{'id': 1, 'label': 'label:1', 'set': [1, 2, 3, 4, 5]}, {'id': 2, 'label': 'label:2', 'set': [4, 5, 6, 7, 8]}]}&quot; --right=&quot;{'normal-string': 'bbbbb', 'ignore_me-string': 'bbbbb', 'normal-list-1': [{'val': 1}, {'val': 9}, {'val': 3}, {'val': 8}, {'what': 5}], 'set_in_set': [{'id': 2, 'label': 'label:2', 'set': [6, 5, 4, 7]}, {'id': 1, 'label': 'label:1', 'set': [3, 2, 1, 4, 8, 9]}]}&quot; --rules=&quot;[{'operation': 'ignore', 'value': '^ignore_me.*'}, {'value': '^set_in_set$', 'operation': 'operator:list:ignoreOrder'}, {'value': 'set_in_set-&gt;\\[\\d+\\]-&gt;set', 'operation': 'operator:list:ignoreOrder'}]&quot;```- when the json are too large you can pass file path```bashpython -m jycm --show  --left_file /xxxx/your_left.json --right_file ~/xxxx/your_right.json```then you will see a popup like this:![cli-popup](https://raw.githubusercontent.com/eggachecat/jycm/master/docs/source/images/examples/cli-popup.jpg)## InteractiveYou can play with cli using:```bashpython -m jycm --interactive```# Show casesHere's some examples showing you what you can do with JYCM.Only the results without configuration are shown below. (in case you wonder why things are not consistence here)## NotesKindly suggestion from [@TonisPiip](https://github.com/TonisPiip)- Why you want `no_pairs=True` in `ycm.to_dict(no_pairs=True)`?   - `pairs` are for rendering purpose (you can see the usage here at [react-jycm-viewer](https://github.com/eggachecat/react-jycm-viewer/blob/master/src/hooks/useJYCM.tsx#L30))   - usually `pairs` are pretty large json (especially for some *relocation* diff)  - so if you just want to get the diff you don't need `pairs`## Default behaviourDiff two json objects are easy:Basically you do this:```pythonfrom jycm.jycm import YouchamaJsonDifferleft = {} # your jsonright = {} # your jsonycm = YouchamaJsonDiffer(left, right)diff_result = ycm.get_diff() &quot;&quot;&quot;ycm.get_diff() are the same asycm.diff()ycm.to_dict*(&quot;&quot;&quot;```### Code```pythonfrom jycm.helper import make_ignore_order_funcfrom jycm.jycm import YouchamaJsonDifferfrom jycm.helper import dump_html_output, open_urlfrom jycm.jycm import YouchamaJsonDifferleft = {    &quot;a&quot;: 1,    &quot;b&quot;: 2,    &quot;d&quot;: &quot;12345&quot;,    &quot;f&quot;: False,    &quot;e&quot;: [        {&quot;x&quot;: 1, &quot;y&quot;: 1},        {&quot;x&quot;: 2, &quot;y&quot;: 2},        {&quot;x&quot;: 3, &quot;y&quot;: 3},        {&quot;x&quot;: 4, &quot;y&quot;: 4},    ]}right = {    &quot;a&quot;: 1,    &quot;b&quot;: 3,    &quot;c&quot;: 4,    &quot;f&quot;: True,    &quot;e&quot;: [        {&quot;x&quot;: 0, &quot;y&quot;: 1},        {&quot;x&quot;: 2, &quot;y&quot;: 2},        {&quot;x&quot;: 3, &quot;y&quot;: 3},        {&quot;x&quot;: 5, &quot;y&quot;: 5},    ]}ycm = YouchamaJsonDiffer(left, right)diff_result = ycm.get_diff() # new API# legacy usage:# ycm.diff()# diff_result = ycm.to_dict()# you can find generated html in the folderoutput_dir = &quot;/Users/xxx/jycm-example-1&quot;# you can directly view it by clicking the index.html file inside the folderurl = dump_html_output(left, right, diff_result, output_dir)# if you want to open it from pythonopen_url(url)expected = {    'dict:add': [        {'left': '__NON_EXIST__',         'left_path': '',         'right': 4,         'right_path': 'c'}    ],    'dict:remove': [        {'left': '12345',         'left_path': 'd',         'right': '__NON_EXIST__',         'right_path': ''}    ],    'list:add': [        {'left': '__NON_EXIST__',         'left_path': '',         'right': {'x': 5, 'y': 5},         'right_path': 'e-&gt;[3]'}    ],    'list:remove': [        {'left': {'x': 4, 'y': 4},         'left_path': 'e-&gt;[3]',         'right': '__NON_EXIST__',         'right_path': ''}    ],    'value_changes': [        {'left': 2,         'left_path': 'b',         'new': 3,         'old': 2,         'right': 3,         'right_path': 'b'},        {'left': 1,         'left_path': 'e-&gt;[0]-&gt;x',         'new': 0,         'old': 1,         'right': 0,         'right_path': 'e-&gt;[0]-&gt;x'},        {'left': False,         'left_path': 'f',         'new': True,         'old': False,         'right': True,         'right_path': 'f'}    ]}assert ycm.to_dict(no_pairs=True) == expected```### Graph![default_behaviour](https://raw.githubusercontent.com/eggachecat/jycm/master/docs/source/images/examples/default_behaviour.png)## Ignore Order### Code```pythonfrom jycm.helper import make_ignore_order_funcfrom jycm.jycm import YouchamaJsonDifferleft = {    &quot;ignore_order&quot;: [1, 2, 3],    &quot;not_ignore_order&quot;: [1, 2, 3]}right = {    &quot;ignore_order&quot;: [3, 2, 1],    &quot;not_ignore_order&quot;: [3, 2, 1]}ycm = YouchamaJsonDiffer(left, right, ignore_order_func=make_ignore_order_func([    &quot;^ignore_order$&quot;]))diff_result = ycm.get_diff() # new APIexpected = {    'list:add': [        {'left': '__NON_EXIST__',         'left_path': '',         'right': 2,         'right_path': 'not_ignore_order-&gt;[1]'},        {'left': '__NON_EXIST__',         'left_path': '',         'right': 1,         'right_path': 'not_ignore_order-&gt;[2]'}    ],    'list:remove': [        {'left': 1,         'left_path': 'not_ignore_order-&gt;[0]',         'right': '__NON_EXIST__',         'right_path': ''},        {'left': 2,         'left_path': 'not_ignore_order-&gt;[1]',         'right': '__NON_EXIST__',         'right_path': ''}    ]}# legacy usage:# ycm.diff()# diff_result = ycm.to_dict()assert ycm.diff_result(no_pairs=True) == expected```### Graph![ignore_order](https://raw.githubusercontent.com/eggachecat/jycm/master/docs/source/images/examples/ignore_order.png)## Diff set-in-set### Code```pythonfrom jycm.helper import make_ignore_order_funcfrom jycm.jycm import YouchamaJsonDifferleft = {    &quot;set_in_set&quot;: [        {            &quot;id&quot;: 1,            &quot;label&quot;: &quot;label:1&quot;,            &quot;set&quot;: [                1,                5,                3            ]        },        {            &quot;id&quot;: 2,            &quot;label&quot;: &quot;label:2&quot;,            &quot;set&quot;: [                4,                5,                6            ]        }    ]}right = {    &quot;set_in_set&quot;: [        {            &quot;id&quot;: 2,            &quot;label&quot;: &quot;label:2&quot;,            &quot;set&quot;: [                6,                5,                4            ]        },        {            &quot;id&quot;: 1,            &quot;label&quot;: &quot;label:1111&quot;,            &quot;set&quot;: [                3,                2,                1            ]        }    ]}ycm = YouchamaJsonDiffer(left, right, ignore_order_func=make_ignore_order_func([    f&quot;^set_in_set$&quot;,    f&quot;^set_in_set-&gt;\\[\\d+\\]-&gt;set$&quot;]))ycm.diff()expected = {    'list:add': [        {'left': '__NON_EXIST__', 'right': 2, 'left_path': '', 'right_path': 'set_in_set-&gt;[1]-&gt;set-&gt;[1]'}    ],    'list:remove': [        {'left': 5, 'right': '__NON_EXIST__', 'left_path': 'set_in_set-&gt;[0]-&gt;set-&gt;[1]', 'right_path': ''}    ],    'value_changes': [        {'left': 'label:1', 'right': 'label:1111', 'left_path': 'set_in_set-&gt;[0]-&gt;label',         'right_path': 'set_in_set-&gt;[1]-&gt;label', 'old': 'label:1', 'new': 'label:1111'}    ]}assert ycm.to_dict(no_pairs=True) == expected```### Graph ![set_in_set](https://raw.githubusercontent.com/eggachecat/jycm/master/docs/source/images/examples/set_in_set.png)## Custom operator### Define an operator```pythonimport mathfrom jycm.operator import  BaseOperatorclass L2DistanceOperator(BaseOperator):    __operator_name__ = &quot;operator:l2distance&quot;    __event__ = &quot;operator:l2distance&quot;    def __init__(self, path_regex, distance_threshold):        super().__init__(path_regex=path_regex)        self.distance_threshold = distance_threshold    def diff(self, level: 'TreeLevel', instance, drill: bool) -&gt; Tuple[bool, float]:        print(&quot;damn&quot;)        distance = math.sqrt(            (level.left[&quot;x&quot;] - level.right[&quot;x&quot;]) ** 2 + (level.left[&quot;y&quot;] - level.right[&quot;y&quot;]) ** 2        )        info = {            &quot;distance&quot;: distance,            &quot;distance_threshold&quot;: self.distance_threshold,            &quot;pass&quot;: distance &lt; self.distance_threshold        }        if not drill:            instance.report(self.__event__, level, info)        return True, 1 if info[&quot;pass&quot;] else 0```### And use it```pythonfrom jycm.jycm import YouchamaJsonDifferleft = {    &quot;distance_ok&quot;: {        &quot;x&quot;: 1,        &quot;y&quot;: 1    },    &quot;distance_too_far&quot;: {        &quot;x&quot;: 5,        &quot;y&quot;: 5    },}right = {    &quot;distance_ok&quot;: {        &quot;x&quot;: 2,        &quot;y&quot;: 2    },    &quot;distance_too_far&quot;: {        &quot;x&quot;: 7,        &quot;y&quot;: 9    },}ycm = YouchamaJsonDiffer(left, right, custom_operators=[    L2DistanceOperator(f&quot;distance.*&quot;, 3),])expected = {    'operator:l2distance': [        {'left': {'x': 1, 'y': 1}, 'right': {'x': 2, 'y': 2}, 'left_path': 'distance_ok',         'right_path': 'distance_ok', 'distance': 1.4142135623730951, 'distance_threshold': 3, 'pass': True},        {'left': {'x': 5, 'y': 5}, 'right': {'x': 7, 'y': 9}, 'left_path': 'distance_too_far',         'right_path': 'distance_too_far', 'distance': 4.47213595499958, 'distance_threshold': 3, 'pass': False}    ]}assert {**ycm.to_dict(), &quot;pairs&quot;: []} == expected```# PhilosophySince determining two things are equal or not is heavily depend on the context, it is not possible to build a json diff tool to meet all requirements.  JYCM choose another way: making it easy to compare values.JYCM allows users just need to focus on defining the differing logic or what a distance is betweentwo values and JYCM will take care all the other dirty works such as array-item-matching, ignoring-array-order, recursively comparing and calculating similarity.By the way, JYCM uses algorithms below to match items in array:|            | exactly matching | fuzzy matching ||:----------:|:--------:|:--------:|| **with order** |    LCS  | Edit distance || **without order** |   Brute force   |  Kuhn–Munkres  |Speaking of flexibility, to make a new operator, you just to need to extend a class called **BaseOperator** with such function signature:```diff: (level: 'TreeLevel', instance, drill: bool) =&gt; [float, boolean]```where the first return is a float number between zero and one for describing how similar **level.left** and **level.right** are and the second return is used to indicate whether comparing process should stop here.     # Contribute## requirements```bashpip install -r requirements-dev.txt```## Releases```bashgit checkout master &amp;&amp; git pullbumpversion {patch|minor|major}git push &amp;&amp; git push --tags```## run test with cov```bashmake testcov ```## make docs```bashmake docs```</longdescription>
</pkgmetadata>