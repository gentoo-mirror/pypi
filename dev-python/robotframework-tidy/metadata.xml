<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Unit-tests](https://img.shields.io/github/workflow/status/MarketSquare/robotframework-tidy/Unit%20tests/main)](https://github.com/MarketSquare/robotframework-tidy/actions?query=workflow%3A%22Unit+tests%22 &quot;GitHub Workflow Unit Tests Status&quot;)![Codecov](https://img.shields.io/codecov/c/github/MarketSquare/robotframework-tidy/main &quot;Code coverage on master branch&quot;)![PyPI](https://img.shields.io/pypi/v/robotframework-tidy?label=version &quot;PyPI package version&quot;)![Python versions](https://img.shields.io/pypi/pyversions/robotframework-tidy &quot;Supported Python versions&quot;)![Licence](https://img.shields.io/pypi/l/robotframework-tidy &quot;PyPI - License&quot;)---&lt;img style=&quot;float:right&quot; src=&quot;https://raw.githubusercontent.com/MarketSquare/robotframework-tidy/main/docs/source/_static/robotidy_logo_small.png&quot;&gt;Robotidy===============- [Introduction](#introduction)- [Documentation](#documentation)- [Requirements](#requirements)- [Installation](#installation)- [Usage](#usage)- [Example](#example)Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;------------Robotidy is a tool for autoformatting Robot Framework code.It is spiritual descendant of Robot Framework's internal robot.tidy package.Documentation &lt;a name=&quot;documentation&quot;&gt;&lt;/a&gt;-------------Full documentation available [here](https://robotidy.readthedocs.io). :open_book:Requirements &lt;a name=&quot;requirements&quot;&gt;&lt;/a&gt;------------Python 3.7+ :snake: and Robot Framework 4.0.0+ :robot:.Installation &lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;------------You can install Robotidy simply by running:```pip install -U robotframework-tidy```Usage &lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;-----Call robotidy with path(s) to file/directory with robot files:```robotidy testsrobotidy test.robotrobotidy tests/resources test.robot```    All command line options can be displayed in help message by executing:```robotidy --help```See [documentation](https://robotidy.readthedocs.io/en/latest/configuration/index.html) for information how to configure robotidy.Example &lt;a name=&quot;example&quot;&gt;&lt;/a&gt;-------Ugly code before transforming with robotidy:```robotframework*** Settings ***Force Tags  tags  tag2Library  CollectionsResource  important.robotLibrary   MyCustomLibrary.pyTest Setup  Setup Keyword*** test case*Test1    [ teardown]  Teardown Keyword    Keyword    FOR  ${var}  IN RANGE  10    Run Keyword If  ${var}&gt;5  Other Keyword    END*** Variables ***${var}=  2${bit_longer}  10${var2}   a...  b*** Keywords ***```A lot prettier code after:```robotframework*** Settings ***Library         CollectionsLibrary         MyCustomLibrary.pyResource        important.robotTest Setup      Setup KeywordForce Tags      tags    tag2*** Variables ***${var}              2${bit_longer}       10${var2}             a...                 b*** Test Cases ***Test1    Keyword    FOR    ${var}    IN RANGE    10        IF    ${var}&gt;5            Other Keyword        END    END    [Teardown]    Teardown Keyword```</longdescription>
</pkgmetadata>