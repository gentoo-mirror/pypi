<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/S7DkZtr.png&quot; width=&quot;250&quot; alt=&quot;People Data Labs Logo&quot;&gt;&lt;/p&gt;&lt;h1 align=&quot;center&quot;&gt;People Data Labs Python Client&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;Official Python client for the People Data Labs API.&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/peopledatalabs/peopledatalabs-python&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/repo%20status-Active-limegreen&quot; alt=&quot;Repo Status&quot;&gt;  &lt;/a&gt;&amp;nbsp;  &lt;a href=&quot;https://pypi.org/project/peopledatalabs/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/peopledatalabs.svg?logo=pypi&amp;logoColor=fff&amp;label=PyPI+package&amp;color=limegreen&quot; alt=&quot;People Data Labs on PyPI&quot; /&gt;  &lt;/a&gt;&amp;nbsp;  &lt;a href=&quot;https://pypi.org/project/peopledatalabs/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/peopledatalabs.svg&quot; alt=&quot;People Data Labs on PyPI&quot; /&gt;  &lt;/a&gt;&amp;nbsp;  &lt;a href=&quot;https://github.com/peopledatalabs/peopledatalabs-python/actions/workflows/python-poetry.yml&quot;&gt;    &lt;img src=&quot;https://github.com/peopledatalabs/peopledatalabs-python/actions/workflows/python-poetry.yml/badge.svg&quot; alt=&quot;Tests Status&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;## Table of Contents- [üîß Installation](#installation)- [üöÄ Usage](#usage)- [üèù Sandbox Usage](#sandbox)- [üåê Endpoints](#endpoints)- [üìò Documentation](#documentation)  - [Upgrading to v2.X.X](#upgrading-to-v2)  - [Upgrading to v3.X.X](#upgrading-to-v3)## üîß Installation &lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;1. Install from PyPi using [pip](https://pip.pypa.io/en/latest/), a package manager for Python.    ```bash    pip install peopledatalabs    ```2. Sign up for a [free PDL API key](https://www.peopledatalabs.com/signup).3. Set your API key in the `PDL_API_KEY` environment variable.## üöÄ Usage &lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;First, create the PDLPY client:```pythonfrom peopledatalabs import PDLPY# specifying an API keyclient = PDLPY(    api_key=&quot;YOUR API KEY&quot;,)# or leave blank if you have PDL_API_KEY set in your environment or .env fileclient = PDLPY()```**Note:** You can provide your API key directly in code, or alternatively set a `PDL_API_KEY` variable in your environment or `.env` file.Then, send requests to any PDL API Endpoint.### Getting Person Data#### By Enrichment```pythonresult = client.person.enrichment(    phone=&quot;4155688415&quot;,    pretty=True,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code};&quot;        f&quot;\nReason: {result.reason};&quot;        f&quot;\nMessage: {result.json()['error']['message']};&quot;    )```#### By Bulk Enrichment```pythonresult = client.person.bulk(    required=&quot;emails AND profiles&quot;,    requests=[        {            &quot;metadata&quot;: {                &quot;user_id&quot;: &quot;123&quot;            },            &quot;params&quot;: {                &quot;profile&quot;: [&quot;linkedin.com/in/seanthorne&quot;],                &quot;location&quot;: [&quot;SF Bay Area&quot;],                &quot;name&quot;: [&quot;Sean F. Thorne&quot;],            }        },        {            &quot;metadata&quot;: {                &quot;user_id&quot;: &quot;345&quot;            },            &quot;params&quot;: {                &quot;profile&quot;: [&quot;https://www.linkedin.com/in/haydenconrad/&quot;],                &quot;first_name&quot;: &quot;Hayden&quot;,                &quot;last_name&quot;: &quot;Conrad&quot;,            }        }    ])if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### By Search (Elasticsearch)```pythones_query = {    &quot;query&quot;: {        &quot;bool&quot;: {            &quot;must&quot;: [                {&quot;term&quot;: {&quot;location_country&quot;: &quot;mexico&quot;}},                {&quot;term&quot;: {&quot;job_title_role&quot;: &quot;health&quot;}},            ]        }    }}data = {    &quot;query&quot;: es_query,    &quot;size&quot;: 10,    &quot;pretty&quot;: True,    &quot;dataset&quot;: &quot;phone, mobile_phone&quot;,}result = client.person.search(**data)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### By Search (SQL)```pythonsql_query = (    &quot;SELECT * FROM person&quot;    &quot; WHERE location_country='mexico'&quot;    &quot; AND job_title_role='health'&quot;    &quot; AND phone_numbers IS NOT NULL;&quot;)data = {    &quot;sql&quot;: sql_query,    &quot;size&quot;: 10,    &quot;pretty&quot;: True,    &quot;dataset&quot;: &quot;phone, mobile_phone&quot;,}result = client.person.search(**data)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### By `PDL_ID` (Retrieve API)```pythonresult = client.person.retrieve(    person_id=&quot;qEnOZ5Oh0poWnQ1luFBfVw_0000&quot;,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### By Fuzzy Enrichment (Identify API)```pythonresult = client.person.enrichment(    name=&quot;sean thorne&quot;,    pretty=True,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```### Getting Company Data#### By Enrichment```pythonresult = client.company.enrichment(    website=&quot;peopledatalabs.com&quot;,    pretty=True,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### By Search (Elasticsearch)```pythones_query = {    &quot;query&quot;: {        &quot;bool&quot;: {            &quot;must&quot;: [                {&quot;term&quot;: {&quot;tags&quot;: &quot;big data&quot;}},                {&quot;term&quot;: {&quot;industry&quot;: &quot;financial services&quot;}},                {&quot;term&quot;: {&quot;location.country&quot;: &quot;united states&quot;}},            ]        }    }}data = {    &quot;query&quot;: es_query,    &quot;size&quot;: 10,    &quot;pretty&quot;: True,}result = client.company.search(**data)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### By Search (SQL)```pythonsql_query = (    &quot;SELECT * FROM company&quot;    &quot; WHERE tags='big data'&quot;    &quot; AND industry='financial services'&quot;    &quot; AND location.country='united states';&quot;)data = {    &quot;sql&quot;: sql_query,    &quot;size&quot;: 10,    &quot;pretty&quot;: True,}result = client.company.search(**data)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```### Using supporting APIs#### Get Autocomplete Suggestions```pythonresult = client.autocomplete(    field=&quot;title&quot;,    text=&quot;full&quot;,    size=10,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### Clean Raw Company Strings```pythonresult = client.company.cleaner(    name=&quot;peOple DaTa LabS&quot;,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### Clean Raw Location Strings```pythonresult = client.location.cleaner(    location=&quot;455 Market Street, San Francisco, California 94105, US&quot;,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### Clean Raw School Strings```pythonresult = client.school.cleaner(    name=&quot;university of oregon&quot;,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### Get Job Title Enrichment```pythonresult = client.job_title(    job_title=&quot;data scientist&quot;,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### Get Skill Enrichment```pythonresult = client.skill(    skill=&quot;c++&quot;,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code}&quot;        f&quot;\nReason: {result.reason}&quot;        f&quot;\nMessage: {result.json()['error']['message']}&quot;    )```#### Get IP Enrichment```pythonresult = client.ip(    ip=&quot;72.212.42.169&quot;,)if result.ok:    print(result.text)else:    print(        f&quot;Status: {result.status_code};&quot;        f&quot;\nReason: {result.reason};&quot;        f&quot;\nMessage: {result.json()['error']['message']};&quot;    )```## üèù Sandbox Usage &lt;a name=&quot;sandbox&quot;&gt;&lt;/a&gt;#### To enable sandbox usage, use the sandbox flag on PDLPY```pythonPDLPY(sandbox=True)```## üåê Endpoints &lt;a name=&quot;endpoints&quot;&gt;&lt;/a&gt;**Person Endpoints**| API Endpoint                                                                           | PDLPY Function                      || -------------------------------------------------------------------------------------- | ----------------------------------- || [Person Enrichment API](https://docs.peopledatalabs.com/docs/enrichment-api)           | `PDLPY.person.enrichment(**params)` || [Person Bulk Enrichment API](https://docs.peopledatalabs.com/docs/bulk-enrichment-api) | `PDLPY.person.bulk(**params)`       || [Person Search API](https://docs.peopledatalabs.com/docs/search-api)                   | `PDLPY.person.search(**params)`     || [Person Retrieve API](https://docs.peopledatalabs.com/docs/person-retrieve-api)        | `PDLPY.person.retrieve(**params)`   || [Person Identify API](https://docs.peopledatalabs.com/docs/identify-api)               | `PDLPY.person.identify(**params)`   |**Company Endpoints**| API Endpoint                                                                          | PDLPY Function                       || ------------------------------------------------------------------------------------- | ------------------------------------ || [Company Enrichment API](https://docs.peopledatalabs.com/docs/company-enrichment-api) | `PDLPY.company.enrichment(**params)` || [Company Search API](https://docs.peopledatalabs.com/docs/company-search-api)         | `PDLPY.company.search(**params)`     |**Supporting Endpoints**| API Endpoint                                                                            | PDLJS Function                     || --------------------------------------------------------------------------------------- | ---------------------------------- || [Autocomplete API](https://docs.peopledatalabs.com/docs/autocomplete-api)               | `PDLPY.autocomplete(**params)`     || [Company Cleaner API](https://docs.peopledatalabs.com/docs/cleaner-apis#companyclean)   | `PDLPY.company.cleaner(**params)`  || [Location Cleaner API](https://docs.peopledatalabs.com/docs/cleaner-apis#locationclean) | `PDLPY.location.cleaner(**params)` || [School Cleaner API](https://docs.peopledatalabs.com/docs/cleaner-apis#schoolclean)     | `PDLPY.school.cleaner(**params)`   || [Job Title Enrichment API](https://docs.peopledatalabs.com/docs/job-title-enrichment-api) | `PDLPY.job_title(**params)` || [Skill Enrichment API](https://docs.peopledatalabs.com/docs/skill-enrichment-api) | `PDLPY.skill(**params)` || [IP Enrichment API](https://docs.peopledatalabs.com/docs/ip-enrichment-api) | `PDLPY.ip(**params)` |## üìò Documentation &lt;a name=&quot;documentation&quot;&gt;&lt;/a&gt;All of our API endpoints are documented at: https://docs.peopledatalabs.com/These docs describe the supported input parameters, output responses and also provide additional technical context.As illustrated in the [Endpoints](#endpoints) section above, each of our API endpoints is mapped to a specific method in the PDLPY class.  For each of these class methods, **all function inputs are mapped as input parameters to the respective API endpoint**, meaning that you can use the API documentation linked above to determine the input parameters for each endpoint.As an example:The following is **valid** because `name` is a [supported input parameter to the Person Identify API](https://docs.peopledatalabs.com/docs/identify-api-reference#input-parameters):```pythonPDLPY().person.identify({&quot;name&quot;: &quot;sean thorne&quot;})```Conversely, this would be **invalid** because `fake_parameter` is not an input parameter to the Person Identify API:```pythonPDLPY().person.identify({&quot;fake_parameter&quot;: &quot;anything&quot;})```### Upgrading to v2.X.X &lt;a name=&quot;upgrading-to-v2&quot;&gt;&lt;/a&gt;NOTE: When upgrading to v2.X.X from vX.X.X and below, the minimum required python version is now 3.8.### Upgrading to v3.X.X &lt;a name=&quot;upgrading-to-v3&quot;&gt;&lt;/a&gt;NOTE: When upgrading to v3.X.X from vX.X.X and below, the minimum required pydantic version is now 2.</longdescription>
</pkgmetadata>