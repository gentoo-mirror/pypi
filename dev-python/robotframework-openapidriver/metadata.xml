<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>------# OpenApiDriver for Robot FrameworkOpenApiDriver is an extension of the Robot Framework DataDriver library that allowsfor generation and execution of test cases based on the information in an OpenAPIdocument (also known as Swagger document).This document explains how to use the OpenApiDriver library.My RoboCon 2022 talk about OpenApiDriver and OpenApiLibCore can be found [here](https://www.youtube.com/watch?v=7YWZEHxk9Ps)For more information about Robot Framework, see http://robotframework.org.For more information about the DataDriver library, seehttps://github.com/Snooz82/robotframework-datadriver.---&gt; Note: OpenApiDriver is still under development so there are currentlyrestrictions / limitations that you may encounter when using this library to runtests against an API. See [Limitations](#limitations) for details.---## InstallationIf you already have Python &gt;= 3.8 with pip installed, you can simply run:`pip install --upgrade robotframework-openapidriver`---## OpenAPI (aka Swagger)The OpenAPI Specification (OAS) defines a standard, language-agnostic interfaceto RESTful APIs, see https://swagger.io/specification/The OpenApiDriver module implements a reader class that generates a test case foreach endpoint, method and response that is defined in an OpenAPI document, typicallyan openapi.json or openapi.yaml file.&gt; Note: OpenApiDriver is designed for APIs based on the OAS v3The library has not been tested for APIs based on the OAS v2.---## Getting startedBefore trying to use OpenApiDriver to run automatic validations on the target APIit's recommended to first ensure that the openapi document for the API is validunder the OpenAPI Specification.This can be done using the command line interface of a package that is installed asa prerequisite for OpenApiDriver.Both a local openapi.json or openapi.yaml file or one hosted by the API servercan be checked using the `prance validate &lt;reference_to_file&gt;` shell command:```shellprance validate http://localhost:8000/openapi.jsonProcessing &quot;http://localhost:8000/openapi.json&quot;... -&gt; Resolving external references.Validates OK as OpenAPI 3.0.2!prance validate /tests/files/petstore_openapi.yamlProcessing &quot;/tests/files/petstore_openapi.yaml&quot;... -&gt; Resolving external references.Validates OK as OpenAPI 3.0.2!```You'll have to change the url or file reference to the location of the openapidocument for your API.&gt; Note: Although recursion is technically allowed under the OAS, tool support is limitedand changing the API to not use recursion is recommended.At present OpenApiLibCore has limited support for parsing OpenAPI documents withrecursion in them. See the `recursion_limit` and `recursion_default` parameters.If the openapi document passes this validation, the next step is trying to do a testrun with a minimal test suite.The example below can be used, with `source` and `origin` altered to fit your situation.``` robotframework*** Settings ***Library            OpenApiDriver...                    source=http://localhost:8000/openapi.json...                    origin=http://localhost:8000Test Template      Validate Using Test Endpoint Keyword*** Test Cases ***Test Endpoint for ${method} on ${endpoint} where ${status_code} is expected*** Keywords ***Validate Using Test Endpoint Keyword    [Arguments]    ${endpoint}    ${method}    ${status_code}    Test Endpoint    ...    endpoint=${endpoint}    method=${method}    status_code=${status_code}```Running the above suite for the first time is likely to result in someerrors / failed tests.You should look at the Robot Framework `log.html` to determine the reasonsfor the failing tests.Depending on the reasons for the failures, different solutions are possible.Details about the OpenApiDriver library parameters that you may need can be found[here](https://marketsquare.github.io/robotframework-openapidriver/openapidriver.html).The OpenApiDriver also support handling of relations between resources within the scopeof the API being validated as well as handling dependencies on resources outside thescope of the API. In addition there is support for handling restrictions on the valuesof parameters and properties.Details about the `mappings_path` variable usage can be found[here](https://marketsquare.github.io/robotframework-openapi-libcore/advanced_use.html).---## LimitationsThere are currently a number of limitations to supported API structures, supporteddata types and properties. The following list details the most important ones:- Only JSON request and response bodies are supported.- No support for per-endpoint authorization levels (only simple 401 / 403 validation).- Parsing of OAS 3.1 documents is supported by the parsing tools, but runtime behavior is untested.</longdescription>
</pkgmetadata>