<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># asynctnt[![Build](https://github.com/igorcoding/asynctnt/actions/workflows/actions.yaml/badge.svg?branch=master)](https://github.com/igorcoding/asynctnt/actions)[![PyPI](https://img.shields.io/pypi/v/asynctnt.svg)](https://pypi.python.org/pypi/asynctnt)[![Maintainability](https://api.codeclimate.com/v1/badges/6cec8adae280cda3e161/maintainability)](https://codeclimate.com/github/igorcoding/asynctnt/maintainability)&lt;a href=&quot;http://tarantool.org&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/2344919?v=2&amp;s=250&quot; align=&quot;right&quot;&gt;&lt;/a&gt;asynctnt is a high-performance [Tarantool](https://tarantool.org/) databaseconnector library for Python/asyncio. It was highly inspired by[asyncpg](https://github.com/MagicStack/asyncpg) module.asynctnt requires Python 3.6 or later and is supported for Tarantoolversions 1.6+.## InstallationUse pip to install:```bash$ pip install asynctnt```## DocumentationDocumentation is available [here](https://igorcoding.github.io/asynctnt).## Key features* Support for all the **basic requests** that Tarantool supports. This includes:  `insert`, `select`, `update`, `upsert`, `call`, `eval`, `execute`.* Full support for [SQL](https://www.tarantool.io/en/doc/latest/tutorials/sql_tutorial/),  including [prepared statements](https://www.tarantool.io/en/doc/latest/reference/reference_lua/box_sql/prepare/).* Support for [interactive transaction](https://www.tarantool.io/en/doc/latest/book/box/atomic/txn_mode_mvcc/) via Tarantool streams.* Support of `Decimal`, `UUID` and `datetime` types natively.* Support for parsing [custom errors](https://www.tarantool.io/en/doc/latest/reference/reference_lua/box_error/new/).* **Schema fetching** on connection establishment, so you can use spaces and  indexes names rather than their ids, and **auto refetching** if schema in  Tarantool is changed* **Auto reconnect**. If connection is lost for some reason - asynctnt will  start automatic reconnection procedure (with authorization and schema  fetching, of course).* Ability to use **dicts for tuples** with field names as keys in DML requests  (select, insert, replace, delete, update, upsert). This is possible only  if space.format is specified in Tarantool. Field names can also be used  in update operations instead of field numbers. Moreover, tuples are decoded  into the special structures that can act either as `tuple`s or by `dict`s with  the appropriate API.* All requests support specification of `timeout` value, so if request is  executed for too long, asyncio.TimeoutError is raised.## Basic UsageTarantool config:```luabox.cfg {    listen = '127.0.0.1:3301'}box.once('v1', function()    box.schema.user.grant('guest', 'read,write,execute', 'universe')    local s = box.schema.create_space('tester')    s:create_index('primary')    s:format({        { name = 'id', type = 'unsigned' },        { name = 'name', type = 'string' },        { name = 'uuid', type = 'uuid' },    })end)```Python code:```pythonimport uuidimport asyncioimport asynctntasync def main():    conn = asynctnt.Connection(host='127.0.0.1', port=3301)    await conn.connect()    for i in range(1, 11):        await conn.insert('tester', [i, 'hello{}'.format(i), uuid.uuid4()])    data = await conn.select('tester', [])    tup = data[0]    print('tuple:', tup)    print(f'{tup[0]=}; {tup[&quot;id&quot;]=}')    print(f'{tup[1]=}; {tup[&quot;name&quot;]=}')    print(f'{tup[2]=}; {tup[&quot;uuid&quot;]=}')    await conn.disconnect()asyncio.run(main())```Stdout:*(note that you can simultaneously access fields either by indicesor by their names)*```tuple: &lt;TarantoolTuple id=1 name='hello1' uuid=UUID('ebbad14c-f78c-42e8-bd12-bfcc564443a6')&gt;tup[0]=1; tup[&quot;id&quot;]=1tup[1]='hello1'; tup[&quot;name&quot;]='hello1'tup[2]=UUID('ebbad14c-f78c-42e8-bd12-bfcc564443a6'); tup[&quot;uuid&quot;]=UUID('ebbad14c-f78c-42e8-bd12-bfcc564443a6')```## SQLTarantool 2.x brought out an SQL interface to the database. You can easily use itin `asynctnt````luabox.cfg {    listen = '127.0.0.1:3301'}box.once('v1', function()    box.schema.user.grant('guest', 'read,write,execute', 'universe')    box.execute([[        create table users (            id int primary key,            name text        )    ]])end)``````pythonimport asyncioimport asynctntasync def main():    conn = asynctnt.Connection(host='127.0.0.1', port=3301)    await conn.connect()    await conn.execute(&quot;insert into users (id, name) values (?, ?)&quot;, [1, 'James Bond'])    await conn.execute(&quot;insert into users (id, name) values (?, ?)&quot;, [2, 'Ethan Hunt'])    data = await conn.execute('select * from users')    for row in data:        print(row)    await conn.disconnect()asyncio.run(main())```Stdout:```&lt;TarantoolTuple ID=1 NAME='James Bond'&gt;&lt;TarantoolTuple ID=2 NAME='Ethan Hunt'&gt;```More about SQL features in asynctnt please refer to the [documentation](https://igorcoding.github.io/asynctnt/sql.html)## PerformanceTwo performance tests were conducted:1. `Seq` -- Sequentially calling 40k requests and measuring performance2. `Parallel` -- Sending 200k in 300 parallel coroutinesOn all the benchmarks below `wal_mode = none`.Turning `uvloop` on has a massive effect on the performance, so it is recommended to use `asynctnt` with it**Benchmark environment*** MacBook Pro 2020* CPU: 2 GHz Quad-Core Intel Core i5* Memory: 16GB 3733 MHz LPDDR4XTarantool:```luabox.cfg{wal_mode = 'none'}```|           |  Seq (uvloop=off) | Seq (uvloop=on) | Parallel (uvloop=off) | Parallel (uvloop=on) ||-----------|------------------:|----------------:|----------------------:|---------------------:|| `ping`    |          12940.93 |        19980.82 |              88341.95 |            215756.24 || `call`    |          11586.38 |        18783.56 |              74651.40 |            137557.25 || `eval`    |          10631.19 |        17040.57 |              61077.84 |            121542.42 || `select`  |           9613.88 |        16718.97 |              61584.07 |            152526.21 || `insert`  |          10077.10 |        16989.06 |              65594.82 |            135491.25 || `update`  |          10832.16 |        16562.80 |              63003.31 |            121892.28 || `execute` |          10431.75 |        16967.85 |              58377.81 |             96891.61 |## Licenseasynctnt is developed and distributed under the Apache 2.0 license.## References1. [Tarantool](https://tarantool.org) - in-memory database and application server.2. [aiotarantool](https://github.com/shveenkov/aiotarantool) - alternative Python/asyncio connector3. [asynctnt-queue](https://github.com/igorcoding/asynctnt-queue) - bindings on top of `asynctnt` for [tarantool-queue](https://github.com/tarantool/queue)</longdescription>
</pkgmetadata>