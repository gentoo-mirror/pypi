<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># tap-snowflake`tap-snowflake` is a Singer tap for Snowflake.Built with the [Meltano Tap SDK](https://sdk.meltano.com) for Singer Taps.## Installation```bashpipx install git+https://github.com/MeltanoLabs/tap-snowflake.git```## Configuration### Accepted Config OptionsA full list of supported settings and capabilities for thistap is available by running:```bashtap-snowflake --about```### Configure using environment variablesThis Singer tap will automatically import any environment variables within the working directory's`.env` if the `--config=ENV` is provided, such that config values will be considered if a matchingenvironment variable is set either in the terminal context or in the `.env` file.### Source Authentication and AuthorizationStandard `username` and `password` auth is supported.### Enabling Batch MessagingThis tap is built using the Meltano SDK and therefore supports a `BATCH` [message type](https://sdk.meltano.com/en/latest/batch.html), inaddition to the `RECORD` messages of the Singer spec. This can be enabled either by adding the following to your `config.json`:```json{  // ...  &quot;batch_config&quot;: {    &quot;encoding&quot;: {      &quot;format&quot;: &quot;jsonl&quot;,      &quot;compression&quot;: &quot;gzip&quot;    },    &quot;storage&quot;: {      &quot;root&quot;: &quot;file://tests/core/resources&quot;,      &quot;prefix&quot;: &quot;test-batch&quot;    }  }}```or its equivalent to your `meltano.yml````yamlconfig:  plugins:    extractors:      - name: tap-snowflake        config:          batch_config:            encoding:              format: jsonl              compression: gzip            storage:              root: &quot;file://tests/core/resources&quot;              prefix: test-batch```**Note:** This variant of `tap-snowflake` does not yet support the `INCREMENTAL` replication strategy in `BATCH` mode. Follow [here](https://github.com/meltano/sdk/issues/976#issuecomment-1257848119) for updates.## UsageYou can easily run `tap-snowflake` by itself or in a pipeline using [Meltano](https://meltano.com/).### Executing the Tap Directly```bashtap-snowflake --versiontap-snowflake --helptap-snowflake --config CONFIG --discover &gt; ./catalog.json```## Developer Resources### Initialize your Development Environment```bashpipx install poetrypoetry install```### Create and Run TestsCreate tests within the `tap_snowflake/tests` subfolder andthen run:```bashpoetry run pytest```You can also test the `tap-snowflake` CLI interface directly using `poetry run`:```bashpoetry run tap-snowflake --help```### Testing with [Meltano](https://www.meltano.com)_**Note:** This tap will work in any Singer environment and does not require Meltano.Examples here are for convenience and to streamline end-to-end orchestration scenarios._Your project comes with a custom `meltano.yml` project file already created. Open the `meltano.yml` and follow any _&quot;TODO&quot;_ items listed inthe file.Next, install Meltano (if you haven't already) and any needed plugins:```bash# Install meltanopipx install meltano# Initialize meltano within this directorycd tap-snowflakemeltano install```Now you can test and orchestrate using Meltano:```bash# Test invocation:meltano invoke tap-snowflake --version# OR run a test `elt` pipeline:meltano elt tap-snowflake target-jsonl```### SDK Dev GuideSee the [dev guide](https://sdk.meltano.com/en/latest/dev_guide.html) for more instructions on how to use the SDK todevelop your own taps and targets.</longdescription>
</pkgmetadata>