<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chaos Toolkit Extensions for Kubernetes[![Build Status](https://github.com/chaostoolkit/chaostoolkit-kubernetes/actions/workflows/build-and-test.yaml/badge.svg)](https://github.com/chaostoolkit/chaostoolkit-kubernetes/actions/workflows/build-and-test.yaml)[![Python versions](https://img.shields.io/pypi/pyversions/chaostoolkit-kubernetes.svg)](https://www.python.org/)[![Downloads](https://pepy.tech/badge/chaostoolkit-kubernetes)](https://pepy.tech/project/chaostoolkit-kubernetes)This project contains activities, such as probes and actions, you can call fromyour experiment through the Chaos Toolkit to perform Chaos Engineering againstthe Kubernetes API: killing a pod, removing a statefulset or node...## InstallTo be used from your experiment, this package must be installed in the Pythonenvironment where [chaostoolkit][] already lives.[chaostoolkit]: https://github.com/chaostoolkit/chaostoolkit```$ pip install chaostoolkit-kubernetes```## UsageTo use the probes and actions from this package, add the following to yourexperiment file:```json{    &quot;title&quot;: &quot;Do we remain available in face of pod going down?&quot;,    &quot;description&quot;: &quot;We expect Kubernetes to handle the situation gracefully when a pod goes down&quot;,    &quot;tags&quot;: [&quot;kubernetes&quot;],    &quot;steady-state-hypothesis&quot;: {        &quot;title&quot;: &quot;Verifying service remains healthy&quot;,        &quot;probes&quot;: [            {                &quot;name&quot;: &quot;all-our-microservices-should-be-healthy&quot;,                &quot;type&quot;: &quot;probe&quot;,                &quot;tolerance&quot;: true,                &quot;provider&quot;: {                    &quot;type&quot;: &quot;python&quot;,                    &quot;module&quot;: &quot;chaosk8s.probes&quot;,                    &quot;func&quot;: &quot;microservice_available_and_healthy&quot;,                    &quot;arguments&quot;: {                        &quot;name&quot;: &quot;myapp&quot;                    }                }            }        ]    },    &quot;method&quot;: [        {            &quot;type&quot;: &quot;action&quot;,            &quot;name&quot;: &quot;terminate-db-pod&quot;,            &quot;provider&quot;: {                &quot;type&quot;: &quot;python&quot;,                &quot;module&quot;: &quot;chaosk8s.pod.actions&quot;,                &quot;func&quot;: &quot;terminate_pods&quot;,                &quot;arguments&quot;: {                    &quot;label_selector&quot;: &quot;app=my-app&quot;,                    &quot;name_pattern&quot;: &quot;my-app-[0-9]$&quot;,                    &quot;rand&quot;: true                }            },            &quot;pauses&quot;: {                &quot;after&quot;: 5            }        }    ]}```That's it! Notice how the action gives you the way to kill one pod randomly.Please explore the [documentation][doc] to see existing probes and actions.[doc]: https://docs.chaostoolkit.org/drivers/kubernetes/#exported-activities## Configuration### Use ~/.kube/configIf you have a valid entry in your `~/.kube/config` file for the cluster youwant to target, then there is nothing to be done.You may specify `KUBECONFIG` to specify a different location.```$ export KUBECONFIG=/tmp/my-config```#### Specify the Kubernetes contextQuite often, your Kubernetes configuration contains several entries and youneed to define the one to use as a default context when not it isn'texplicitely provided.You may of course change your default using`kubectl config use-context KUBERNETES_CONTEXT` but you can also be explicitin your experiment as follows:```json{    &quot;title&quot;: &quot;Do we remain available in face of pod going down?&quot;,    &quot;description&quot;: &quot;We expect Kubernetes to handle the situation gracefully when a pod goes down&quot;,    &quot;tags&quot;: [&quot;kubernetes&quot;],    &quot;secrets&quot;: {        &quot;k8s&quot;: {            &quot;KUBERNETES_CONTEXT&quot;: &quot;...&quot;        }    },    &quot;steady-state-hypothesis&quot;: {        &quot;title&quot;: &quot;Verifying service remains healthy&quot;,        &quot;probes&quot;: [            {                &quot;name&quot;: &quot;all-our-microservices-should-be-healthy&quot;,                &quot;type&quot;: &quot;probe&quot;,                &quot;tolerance&quot;: true,                &quot;secrets&quot;: [&quot;k8s&quot;],                &quot;provider&quot;: {                    &quot;type&quot;: &quot;python&quot;,                    &quot;module&quot;: &quot;chaosk8s.probes&quot;,                    &quot;func&quot;: &quot;microservice_available_and_healthy&quot;,                    &quot;arguments&quot;: {                        &quot;name&quot;: &quot;myapp&quot;                    }                }            }        ]    },    &quot;method&quot;: [        {            &quot;type&quot;: &quot;action&quot;,            &quot;name&quot;: &quot;terminate-db-pod&quot;,            &quot;secrets&quot;: [&quot;k8s&quot;],            &quot;provider&quot;: {                &quot;type&quot;: &quot;python&quot;,                &quot;module&quot;: &quot;chaosk8s.pod.actions&quot;,                &quot;func&quot;: &quot;terminate_pods&quot;,                &quot;arguments&quot;: {                    &quot;label_selector&quot;: &quot;app=my-app&quot;,                    &quot;name_pattern&quot;: &quot;my-app-[0-9]$&quot;,                    &quot;rand&quot;: true                }            },            &quot;pauses&quot;: {                &quot;after&quot;: 5            }        }    ]}```You need to specify the `KUBERNETES_CONTEXT` secret key to the name of thecontext you want the experiment to use. Make sure to also inform theactions and probes about the secret entries they should bepassed `&quot;secrets&quot;: [&quot;k8s&quot;]`.### Use a Pod's service accountWhen running from a pod (not your local machine or a CI for instance), the `./.kube/config` file does not exist. Instead, the credentials can be found at [/var/run/secrets/kubernetes.io/serviceaccount/token][podcreds]. [podcreds]: https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#accessing-the-api-from-a-pod To let the extension know about this, simply set `CHAOSTOOLKIT_IN_POD` from the environment variable of the pod specification:```yamlenv:- name: CHAOSTOOLKIT_IN_POD  value: &quot;true&quot;```## Pass all credentials in the experimentFinally, you may pass explicitely all required credentials information to theexperiment as follows:### Using an API key```json{    &quot;secrets&quot;: {        &quot;kubernetes&quot;: {            &quot;KUBERNETES_HOST&quot;: &quot;http://somehost&quot;,            &quot;KUBERNETES_API_KEY&quot;: {                &quot;type&quot;: &quot;env&quot;,                &quot;key&quot;: &quot;SOME_ENV_VAR&quot;            }        }    }}```### Using a username/password```json{    &quot;secrets&quot;: {        &quot;kubernetes&quot;: {            &quot;KUBERNETES_HOST&quot;: &quot;http://somehost&quot;,            &quot;KUBERNETES_USERNAME&quot;: {                &quot;type&quot;: &quot;env&quot;,                &quot;key&quot;: &quot;SOME_ENV_VAR&quot;            },            &quot;KUBERNETES_PASSWORD&quot;: {                &quot;type&quot;: &quot;env&quot;,                &quot;key&quot;: &quot;SOME_ENV_VAR&quot;            }        }    }}```### Using a TLS key/certificate```json{    &quot;secrets&quot;: {        &quot;kubernetes&quot;: {            &quot;KUBERNETES_HOST&quot;: &quot;http://somehost&quot;,            &quot;KUBERNETES_CERT_FILE&quot;: {                &quot;type&quot;: &quot;env&quot;,                &quot;key&quot;: &quot;SOME_ENV_VAR&quot;            },            &quot;KUBERNETES_KEY_FILE&quot;: {                &quot;type&quot;: &quot;env&quot;,                &quot;key&quot;: &quot;SOME_ENV_VAR&quot;            }        }    }}```## Managed Kubernetes Clusters AuthenticationOn some managed Kubernetes clusters, you also need to authenticate against theplatform itself because the Kubernetes authentication is delegated to it.### Google Cloud PlatformIn addition to your Kubernetes credentials (via the `~/.kube/config` file), youneed to authenticate against the Google Cloud Platform itself. Usually thisis done [via][gcloud]:[gcloud]: https://cloud.google.com/sdk/gcloud/reference/auth/login```$ gcloud auth login```But can also be achieved by defining the `GOOGLE_APPLICATION_CREDENTIALS`environment variable.## ContributeIf you wish to contribute more functions to this package, you are more thanwelcome to do so. Please, fork this project, write unit tests to cover the proposed changes,implement the changes, ensure they meet the formatting standards set out by `black`,`flake8`, and `isort`, and then raise a PR to the repository for review.Please refer to the [formatting](#formatting-and-linting) section for more informationon the formatting standards.The Chaos Toolkit projects require all contributors must sign a[Developer Certificate of Origin][dco] on each commit they would like to mergeinto the master branch of the repository. Please, make sure you can abide bythe rules of the DCO before submitting a PR.[dco]: https://github.com/probot/dco#how-it-works### DevelopIf you wish to develop on this project, make sure to install the developmentdependencies. But first, [create a virtual environment][venv] and then installthose dependencies.[venv]: http://chaostoolkit.org/reference/usage/install/#create-a-virtual-environment```console$ make install-dev```Now, you can edit the files and they will be automatically be seen by yourenvironment, even when running from the `chaos` command locally.### TestsTo run the tests for the project execute the following:```console$ make tests```### Formatting and LintingWe use a combination of [`black`][black], [`flake8`][flake8], and [`isort`][isort] to bothlint and format this repositories code.[black]: https://github.com/psf/black[flake8]: https://github.com/PyCQA/flake8[isort]: https://github.com/PyCQA/isortBefore raising a Pull Request, we recommend you run formatting against your code with:```console$ make format```This will automatically format any code that doesn't adhere to the formatting standards.As some things are not picked up by the formatting, we also recommend you run:```console$ make lint```To ensure that any unused import statements/strings that are too long, etc. are also picked up.</longdescription>
</pkgmetadata>