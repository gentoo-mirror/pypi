<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## AlfredAlfred is an extensible building tool that can replace a Makefile or Fabric.Writing commands in python is done in a few minutes, even in the case of a mono-repositorywhich contains several products.In this dev, we are eating our own dog food. We are using `alfred` for the continuous integration processof itself instead of `Makefile` as I usually do.```bash# run the continuous integration processalfred ci# publish the package on pypialfred publish```[![version](https://img.shields.io/pypi/v/alfred-cli.svg?label=version)](https://pypi.org/project/alfred-cli/) [![MIT](https://img.shields.io/badge/license-MIT-007EC7.svg)](LICENSE.md)[![ci](https://github.com/FabienArcellier/alfred-cli/actions/workflows/ci.yml/badge.svg)](https://github.com/FabienArcellier/alfred-cli/actions/workflows/ci.yml) [![ci-windows](https://github.com/FabienArcellier/alfred-cli/actions/workflows/ci-windows.yml/badge.svg)](https://github.com/FabienArcellier/pyalfred/actions/workflows/ci-windows.yml)- [Getting started](#getting-started)  * [Add your own command](#add-your-own-command)- [Behind the scene](#behind-the-scene)- [Why using alfred instead of Makefile or Bash scripts](#why-using-alfred-instead-of-makefile-or-bash-scripts)- [Why not using alfred](#why-not-using-alfred)- [The latest version](#the-latest-version)- [Reference](#reference)  * [`.Alfred.yml`](#-alfredyml-)    + [`Plugins` section](#-plugins--section)    + [`Environment` section](#-environment--section)- [Cookbook](#cookbook)  * [Display the commands really executed behind the scene](#display-the-commands-really-executed-behind-the-scene)  * [Customize a command for a specific OS](#customize-a-command-for-a-specific-os)- [Developper guideline](#developper-guideline)  * [Install development environment](#install-development-environment)  * [Install production environment](#install-production-environment)  * [Initiate or update the library requirements](#initiate-or-update-the-library-requirements)  * [Activate the python environment](#activate-the-python-environment)  * [Run the linter and the unit tests](#run-the-linter-and-the-unit-tests)- [Contributors](#contributors)- [License](#license)## Getting startedTo configure a python project to use alfred, here is the procedure:```bashpip3 install alfred-clialfred init```A hello_world command was created for the example:```bashalfred hello_world --name &quot;Fabien&quot;```A file `.alfred.yml` will be initialized at the root of the repository.### Add a new build commandYou can add your command in a new module in `./alfred`.In this example we will add the command `alfred lint` :```pythonimport osimport alfredROOT_DIR = os.path.realpath(os.path.join(__file__, &quot;..&quot;, &quot;..&quot;))@alfred.command('lint', help=&quot;validate alfred using pylint on the package alfred&quot;)def lint():    # get the command pylint in the user system or show error message if it's missing    pylint = alfred.sh('pylint', &quot;pylint is not installed&quot;)    os.chdir(ROOT_DIR)    src_dir = &quot;src/alfred&quot;    args = [src_dir]    # behind the scene, it invokes the command `pylint alfred`    alfred.run(pylint, args)```## Behind the sceneAlfred rely heavily on click and plumblum :* [click](https://click.palletsprojects.com/en/8.0.x/)* [plumblum](https://plumbum.readthedocs.io/en/latest/)## Why using alfred instead of Makefile or Bash scriptsOne of the advantages of `bash` and `Makefile` is their native presence in many environments.By default, a `Makefile` allows you to segment these commands efficiently. Autocompletion is first-citizenfeature. Alfred doesn't have it yet.Alfred allows you to create more complex commands than with Make. From the start, you benefit from aformatted documentation for each of your orders. It is easy to create one command per file  thanksto auto discovery. You can see an implementation in this repository in [`alfred_cmd/`](alfred/).Thanks to the power of Click, it's easy to add options to your commands.They allow for example to implement flags for your CI process whichoffer you an execution for the frontend.Alfred allows you to mix shell code with python instructions. In some cases, it allows youto perform efficient processing on API calls. You can use either the cli (for git, ...) orpythons libraries depending on the nature of the treatment you want to perform.In our development process, we frequently need to operate on application with several process (frontend in react,server in flask, two external service in flask). To mount those process, we use `honcho` with alfredto load `Procfile` that will manage those process.## Why not using alfredIf you want to create a cli you will distribute, alfred is not designed for that. I won't recommandas well to use it to build a data application even if you can use python and many library.Alfred command can import only installed library. You can't use relative import. That makes difficult toshare code between your commands.## The latest versionYou can find the latest version to ...```bashgit clone https://github.com/FabienArcellier/alfred-cli.git```## Reference### `.Alfred.yml`The configuration file supports several attributes to tune the behavior ofAlfred. It is required to add#### `Plugins` sectionthe `plugins` section tells Alfred where to look for commands to renderaccessible to the user. The pointed folder contains several python modules whichare loaded one by one. The `__init __. Py` module is ignored.If you specify a prefix, the commands configured in the imported moduleswill be prefixed by this label in alfred. This feature is useful in a mono-repositorywhen you want to have an .alfred.yml file for each project and an .alfred.yml fileat the root of the project.```yamlplugins:    - path: alfred    - path: sofware1/alfred      prefix: &quot;software1:&quot;```#### `Environment` section`environment` section allows you to hard configure environment variables to loadbefore executing a command.This feature facilitates the integration with `pipenv` for example which has a behaviordifferent between mac and linux. In this case, it allows you to set the necessary flagsto erase these differences.```yamlenvironment:    - &quot;VAR=1&quot;    - &quot;VAR&quot;```## Cookbook### Display the commands really executed behind the sceneYou can display the commands really executed, either to debug the arguments,either to run in your terminal again with other attributes.The option `d` / `--debug` display all the shell commands that are executed by`alfred.run()` in your alfred command.```bash$ alfred -d ci2022-02-07 19:38:31,834 DEBUG - /home/far/.local/share/virtualenvs/20210821_1530__alfred-cli-a8dwJte3/bin/python -m unittest discover units - wd: /home/far/documents/projects/20210821_1530__alfred-cli/tests.----------------------------------------------------------------------Ran 1 test in 0.000sOK```### Customize a command for a specific OSAlfred can run a specific part of the build for an OS,for example to only run the linter on a linux machine.```python@alfred.command('ci', help=&quot;execute continuous integration process of alfred&quot;)@alfred.option('-v', '--verbose', is_flag=True)def ci(verbose: bool):    if alfred.is_posix():        alfred.invoke_command('lint', verbose=verbose)    else:        print(&quot;linter is not supported on non posix platform as windows&quot;)    alfred.invoke_command('tests', verbose=verbose)```the ``alfred.is_posix``, ``alfred.is_linux``, ``alfred.is_macos``, ``alfred.is_windows`` functions allow you to quicklytarget the environment on which specific processing must be performed.## Developper guideline```bashpipenv installpipenv shell``````$ alfredUsage: alfred [OPTIONS] COMMAND [ARGS]...  alfred is a building tool to make engineering tasks easier to develop and to  maintainOptions:  -d, --debug  display debug information like command runned and working               directory  --help       Show this message and exit.Commands:  ci                 execute continuous integration process of alfred  dist               build distribution packages  lint               validate alfred using pylint on the package alfred  publish            tag a new release and trigger pypi publication  tests              validate alfred with all the automatic testing  tests:acceptances  validate alfred with acceptances testing  tests:units        validate alfred with unit testing```### Install development environmentUse make to instanciate a python virtual environment in ./venv and install thepython dependencies.```bashpipenv install --dev```### Install production environment```bashpipenv install```### Initiate or update the library requirementsIf you want to initiate or update all the requirements `install_requires` declared in `setup.py`and freeze a new `Pipfile.lock`, use this command```bashpipenv update```### Activate the python environmentWhen you setup the requirements, a `venv` directory on python 3 is created.To activate the venv, you have to execute :```bashpipenv shell```### Run the linter and the unit testsBefore commit or send a pull request, you have to execute `pylint` to check the syntaxof your code and run the unit tests to validate the behavior.```bashalfred ci```## Contributors* Fabien Arcellier## LicenseMIT LicenseCopyright (c) 2021-2022 Fabien ArcellierPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>