<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># deep-trainer[![Lint and Test](https://github.com/raphaelreme/deep-trainer/actions/workflows/tests.yml/badge.svg)](https://github.com/raphaelreme/deep-trainer/actions/workflows/tests.yml)Baseline code to train deep neural networks.Currently only available for PyTorch Framework.## Install### Pip```bash$ pip install deep-trainer```### CondaNot yet available## Getting started```pythonimport torchfrom deep_trainer import PytorchTrainer# Datasetstrainset = #....valset = #....testset = #....# Dataloaderstrain_loader = torch.utils.data.DataLoader(trainset, 64, shuffle=True)val_loader = torch.data.utils.DataLoader(valset, 256)test_loader = torch.data.utils.DataLoader(testset, 256)# Model &amp; devicedevice = torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;)model = #....model.to(device)# Optimizer &amp; Scheduleroptimizer = torch.optim.Adam(model.parameters(), lr=0.001)scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=len(trainset) * 50, 0.1)  # Decay by 10 every 50 epochs# Criterioncriterion = torch.nn.CrossEntropyLoss()  # For classification for instance# Trainingtrainer = PytorchTrainer(model, optimizer, scheduler, save_mode=&quot;small&quot;, device=device)trainer.train(150, train_loader, criterion, val_loader=val_loader)# Testingtrainer.load(&quot;experiments/checkpoints/best.ckpt&quot;)trainer.evaluate(test_loader, criterion)```## Example`example/example.py` show how to train a PreActResNet with Deep Trainer.Install the additional requirements and use it with:```bash$ # See hyperparameters available$ python example.py -h$$ # Launch the default training$ python example.py$$ # Once done (or during the training), look for default tensorboard logs$ tensorboard --logdir experiments/logs/```This script is reaching around 94-95% accuracy on validation with Cifar10 and a PreActResNet18.&lt;br&gt;Here are the [training logs](https://tensorboard.dev/experiment/lYN73lSpSm66bddAswIpOw):## Build and Deploy```bash$ python -m build$ python -m twine upload dist/*```</longdescription>
</pkgmetadata>