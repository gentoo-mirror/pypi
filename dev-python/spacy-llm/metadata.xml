<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://explosion.ai&quot;&gt;&lt;img src=&quot;https://explosion.ai/assets/img/logo.svg&quot; width=&quot;125&quot; height=&quot;125&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;# spacy-llm: Integrating LLMs into structured NLP pipelines[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/explosion/spacy-llm/test.yml?branch=main)](https://github.com/explosion/spacy-llm/actions/workflows/test.yml)[![pypi Version](https://img.shields.io/pypi/v/spacy-llm.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/spacy-llm/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)This package integrates Large Language Models (LLMs) into [spaCy](https://spacy.io), featuring a modular system for **fast prototyping** and **prompting**, and turning unstructured responses into **robust outputs** for various NLP tasks, **no training data** required.## Feature Highlight- Serializable `llm` **component** to integrate prompts into your spaCy pipeline- **Modular functions** to define the [**task**](https://spacy.io/api/large-language-models#tasks) (prompting and parsing) and [**model**](https://spacy.io/api/large-language-models#models)- Interfaces with the APIs of  - **[OpenAI](https://platform.openai.com/docs/api-reference/)**  - **[Cohere](https://docs.cohere.com/reference/generate)**  - **[Anthropic](https://docs.anthropic.com/claude/reference/)**- Supports open-source LLMs hosted on Hugging Face ü§ó:  - **[Falcon](https://huggingface.co/tiiuae)**  - **[Dolly](https://huggingface.co/databricks)**  - **[Llama 2](https://huggingface.co/meta-llama)**  - **[OpenLLaMA](https://huggingface.co/openlm-research)**  - **[StableLM](https://huggingface.co/stabilityai)**- Integration with [LangChain](https://github.com/hwchase17/langchain) ü¶úÔ∏èüîó - all `langchain` models and features can be used in `spacy-llm`- Tasks available out of the box:  - Named Entity Recognition  - Text classification  - Lemmatization  - Relationship extraction  - Sentiment analysis  - Span categorization  - Summarization- Easy implementation of **your own functions** via [spaCy's registry](https://spacy.io/api/top-level#registry) for custom prompting, parsing and model integrations## üß† MotivationLarge Language Models (LLMs) feature powerful natural language understanding capabilities. With only a few (and sometimes no) examples, an LLM can be prompted to perform custom NLP tasks such as text categorization, named entity recognition, coreference resolution, information extraction and more.[spaCy](https://spacy.io) is a well-established library for building systems that need to work with language in various ways. spaCy's built-in components are generally powered by supervised learning or rule-based approaches.Supervised learning is much worse than LLM prompting for prototyping, but for many tasks it's much better for production. A transformer model that runs comfortably on a single GPU is extremely powerful, and it's likely to be a better choice for any task for which you have a well-defined output. You train the model with anything from a few hundred to a few thousand labelled examples, and it will learn to do exactly that. Efficiency, reliability and control are all better with supervised learning, and accuracy will generally be higher than LLM prompting as well.`spacy-llm` lets you have **the best of both worlds**. You can quickly initialize a pipeline with components powered by LLM prompts, and freely mix in components powered by other approaches. As your project progresses, you can look at replacing some or all of the LLM-powered components as you require.Of course, there can be components in your system for which the power of an LLM is fully justified. If you want a system that can synthesize information from multiple documents in subtle ways and generate a nuanced summary for you, bigger is better. However, even if your production system needs an LLM for some of the task, that doesn't mean you need an LLM for all of it. Maybe you want to use a cheap text classification model to help you find the texts to summarize, or maybe you want to add a rule-based system to sanity check the output of the summary. These before-and-after tasks are much easier with a mature and well-thought-out library, which is exactly what spaCy provides.## ‚è≥ Install`spacy-llm` will be installed automatically in future spaCy versions. For now, you can run the following in the same virtual environment where you already have `spacy` [installed](https://spacy.io/usage).```bashpython -m pip install spacy-llm```&gt; ‚ö†Ô∏è This package is still experimental and it is possible that changes made to the interface will be breaking in minor version updates.## üêç QuickstartThe task and the model have to be supplied to the `llm` pipeline component using [spaCy's configsystem](https://spacy.io/api/data-formats#config).Let's run some text classification using a GPT-4 model from OpenAI. If you're using hosted APIs (as opposed to localmodels like Falcon, Dolly or LLaMA), ensure to that your API keys are set as environmental variables.Create a new API key from openai.com or fetch an existing one, and ensure thekeys are set as environmental variables. For more background information, seethe documentation around setting [API keys](https://spacy.io/api/large-language-models#api-keys).### In Python codeTo do some quick experiments, from 0.5.0 onwards you can run:```pythonimport spacynlp = spacy.blank(&quot;en&quot;)llm = nlp.add_pipe(&quot;llm_textcat&quot;)llm.add_label(&quot;INSULT&quot;)llm.add_label(&quot;COMPLIMENT&quot;)doc = nlp(&quot;You look gorgeous!&quot;)print(doc.cats)# {&quot;COMPLIMENT&quot;: 1.0, &quot;INSULT&quot;: 0.0}```By using the `llm_textcat` factory, the latest version of the built-in textcat task is used, as well as the default GPT-3-5 model from OpenAI.### Using a config fileTo get more control over the various parameters of the `llm` pipeline, create a config file `config.cfg` containing at least the following (or see thefull example[here](https://github.com/explosion/spacy-llm/tree/main/usage_examples/textcat_openai)):```ini[nlp]lang = &quot;en&quot;pipeline = [&quot;llm&quot;][components][components.llm]factory = &quot;llm&quot;[components.llm.task]@llm_tasks = &quot;spacy.TextCat.v3&quot;labels = [&quot;COMPLIMENT&quot;, &quot;INSULT&quot;][components.llm.model]@llm_models = &quot;spacy.GPT-4.v2&quot;```Now run:```pythonfrom spacy_llm.util import assemblenlp = assemble(&quot;config.cfg&quot;)doc = nlp(&quot;You look gorgeous!&quot;)print(doc.cats)# {&quot;COMPLIMENT&quot;: 1.0, &quot;INSULT&quot;: 0.0}```That's it! There's a lot of other features - prompt templating, more tasks, logging etc. For more information on how touse those, check out https://spacy.io/api/large-language-models.## üöÄ Ongoing workIn the near future, we will- Add more example tasks- Support a broader range of models- Provide more example use-cases and tutorialsPRs are always welcome!## üìùÔ∏è Reporting issuesIf you have questions regarding the usage of `spacy-llm`, or want to give us feedback after giving it a spin, please usethe [discussion board](https://github.com/explosion/spacy-llm/discussions).Bug reports can be filed on the [spaCy issue tracker](https://github.com/explosion/spacy-llm/issues). Thank you!## Migration guidesPlease refer to our [migration guide](migration_guide.md).</longdescription>
</pkgmetadata>