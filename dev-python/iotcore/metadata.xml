<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Iotcore - Python MQTT Broker and IoT Features for Django and FastAPIThe project aims to give full support for mqtt broker and related apis. The internals of the mqtt server is  written in  Rust using popular Tokio framework. Motive of the project is to avoid the GIL limitation of python and bring all the  fun features offered by rust.## Features* Full-fledged configurable Tokio based MQTT broker* No python GIL limitation* All Standard MQTT broker features* Zero extra setup required to run mqtt broker in you Django and Fastapi project* MQTT client, with callback support for async or non-blocking applications* and more## Planned Features* Device support* Sensor support* Sensor data storage* Django based admin pages* Django rest framework based APIs for managing devices and sensors* SSL certificates and policy management## Installation```pip install iotcore```Create a new file called mqtt.toml in your root project directory and copy pase the sample mqtt.toml fromhttps://github.com/tomvictor/iotcore    ## FastAPI setup**Broker only**  ```pythonfrom fastapi import FastAPIfrom iotcore.fastapi import iotcore_brokerapp = FastAPI(lifespan=iotcore_broker)@app.get(&quot;/&quot;)def read_root():    return {&quot;Hello&quot;: &quot;World&quot;}```**Broker plus Mqtt client**```pythonfrom fastapi import FastAPIfrom contextlib import asynccontextmanagerfrom iotcore import IotCoredef mqtt_callback(data):    print(f&quot;iot &gt;: {data}&quot;)@asynccontextmanagerasync def lifespan(app: FastAPI):    iot = IotCore()    iot.start_broker()    iot.background_loop_forever()    iot.subscribe(&quot;iot&quot;, mqtt_callback)    yieldapp = FastAPI(lifespan=lifespan)@app.get(&quot;/&quot;)def read_root():    return {&quot;Hello&quot;: &quot;World&quot;}```## Django SetupThen add iotcore to the django apps as below in the settings.py file of your project```pythonINSTALLED_APPS = [    &quot;Other Apps here&quot;,    &quot;iotcore.djangoiot&quot;]```Now Connect to mqtt broker on localhost  MQTT Port : 1883## Run Example project**Django**  ```shellpip install iotcorepip install djangopython examples/django/manage.py runserver```**FastAPI**  ```shellpip install iotcorepip install fastapipip install uvicornuvicorn examples.fastapi.main:app```Open you mqtt client and use below details to connect to the broker:  **_Host_**: **127.0.0.1** or  **localhost**  **_Port_**: **1883**  ## Contribute- Issue Tracker: github.com/tomvictor/iotcore/issues- Source Code: github.com/tomvictor/iotcore## SupportStar the project on GitHub :)## LicenseThe project is licensed under the MIT license.</longdescription>
</pkgmetadata>