<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ‚öôÔ∏è Server Thread[![Tests](https://github.com/banesullivan/server-thread/actions/workflows/test.yml/badge.svg)](https://github.com/banesullivan/server-thread/actions/workflows/test.yml)[![codecov](https://codecov.io/gh/banesullivan/server-thread/branch/main/graph/badge.svg?token=S0HQ64FW8G)](https://codecov.io/gh/banesullivan/server-thread)[![PyPI](https://img.shields.io/pypi/v/server-thread.svg?logo=python&amp;logoColor=white)](https://pypi.org/project/server-thread/)[![conda](https://img.shields.io/conda/vn/conda-forge/server-thread.svg?logo=conda-forge&amp;logoColor=white)](https://anaconda.org/conda-forge/server-thread)Launch a WSGI or ASGI Application in a background thread with werkzeug or uvicorn.This application was created for [`localtileserver`](https://github.com/banesullivan/localtileserver)and provides the basis for how it can launch an image tile server as abackground thread for visualizing data in Jupyter notebooks.While this may not be a widely applicable library, it is useful for a fewPython packages I have created that require a background service.## üöÄ UsageUse the `ServerThread` with any WSGI or ASGI Application.Start by creating a application (this can be a flask app or a simple applike below):```py# Create some WSGI Applicationfrom werkzeug import Request, Response@Request.applicationdef app(request):    return Response(&quot;howdy&quot;, 200)```Then launch the app with the `ServerThread` class:```pyimport requestsfrom server_thread import ServerThread# Launch app in a background threadserver = ServerThread(app)# Perform requests against the server without blockingrequests.get(f&quot;http://{server.host}:{server.port}/&quot;).raise_for_status()```## ‚¨áÔ∏è InstallationGet started with `server-thread` to create applications that require aWSGIApplication in the background.### üêç Installing with `conda`Conda makes managing `server-thread`'s dependencies across platforms quiteeasy and this is the recommended method to install:```bashconda install -c conda-forge server-thread```### üé° Installing with `pip`If you prefer pip, then you can install from PyPI: https://pypi.org/project/server-thread/```pip install server-thread```## üí≠ FeedbackPlease share your thoughts and questions on the [Discussions](https://github.com/banesullivan/server-thread/discussions) board.If you would like to report any bugs or make feature requests, please open an issue.If filing a bug report, please share a scooby `Report`:```pyimport server_threadprint(server_thread.Report())```## üöÄ ExamplesMinimal examples for using `server-thread` with common micro-frameworks.### üí® FastAPI```pyfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)def root():    return {&quot;message&quot;: &quot;Howdy!&quot;}server = ServerThread(app)requests.get(f&quot;http://{server.host}:{server.port}/&quot;).json()```### ‚öóÔ∏è Flask```pyfrom flask import Flaskapp = Flask(&quot;testapp&quot;)@app.route(&quot;/&quot;)def howdy():    return {&quot;message&quot;: &quot;Howdy!&quot;}server = ServerThread(app)requests.get(f&quot;http://{server.host}:{server.port}/&quot;).json()```</longdescription>
</pkgmetadata>