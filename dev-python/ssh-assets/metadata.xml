<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Unit Tests](https://github.com/hile/ssh-assets/actions/workflows/unittest.yml/badge.svg)![Style Checks](https://github.com/hile/ssh-assets/actions/workflows/lint.yml/badge.svg)# SSH assets python libraryThis little utility allows configuring SSH keys to be loaded automatically tothe SSH agent based on asset configuration files, and can detect loaded keysbased on the key hash to avoid reloading existing keys.This library can:- load SSH key details from various key formats to get key hashes, comments and other key details- detect keys loaded to the SSH agent by key hash instead of filename- define known SSH keys from multiple locations (project specific folders, shared team folders) with  options to name and autoload the key with the module- load and unload keys to the agent based on custom configuration file, without asking key password  if the key was already loaded# InstallingThis tool can be installed from PyPI.```bashpip install ssh-assets```## Using the CLI toolThis package installs command line utility `ssh-assets`. The tool currently hasonly one command `load-keys` that can be used to load the keys configured inthe assets configuration file as shown below.Following command loads any keys not yet loaded to the agent, but limits thisto the keys with `autoload` property set to `true`:```bashssh-assets keys loadssh-assets keys load --group personalssh-assets keys edit personal --no-autoloadssh-assets keys edit personal --autoloadssh-assets keys add demo --path ~/.ssh/id_rsa.demo --autoload --expire=8hssh-assets keys delete demo```## SSH assets configuration fileThis module uses configuration file `~/.ssh/assets.yml` to define paths to theSSH keys.Example configuration file:```yaml---groups:  - name: personal    expire: 5d    keys:      - personal      - missing-demo-key  - name: work    expire: 1d    keys:      - aws      - master      - myprojectkeys:  - name: personal    path: ~/.ssh/id_rsa    autoload: true  - name: aws    path: ~/.ssh/id_rsa-aws  - name: myproject    path: ~/Work/Keys/ssh_project_id    autoload: true  - name: master    expire: 1d    path: ~/Work/Keys/master_ssh_key```- `autoload` defaults to False in configuration if not specified.- `expore` defines a valid value for key expiration in SSH agent, for example `8h` or `5d`## Example python codeWith such configuration file, you can load the keys marked as `autoload` to the SSHagent with following example code. Calling the load method again does not try loadingthe keys again (key is detected in agent loaded keys by hash).```pythonfrom ssh_assets.session import SshAssetSessionSshAssetSession().load_pending_keys()```## HistoryThis module replaces previous module `systematic-ssh-config` when ready.</longdescription>
</pkgmetadata>