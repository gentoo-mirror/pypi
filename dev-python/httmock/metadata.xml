<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>httmock=======A mocking library for `requests` for Python 2.7 and 3.4+.Installation------------    pip install httmockOr, if you are a Gentoo user:    emerge dev-python/httmockUsage-----You can use it to mock third-party APIs and test libraries that use `requests` internally, conditionally using mocked replies with the `urlmatch` decorator:```pythonfrom httmock import urlmatch, HTTMockimport requests@urlmatch(netloc=r'(.*\.)?google\.com$')def google_mock(url, request):    return 'Feeling lucky, punk?'with HTTMock(google_mock):    r = requests.get('http://google.com/')print r.content  # 'Feeling lucky, punk?'```The `all_requests` decorator doesn't conditionally block real requests. If you return a dictionary, it will map to the `requests.Response` object returned:```pythonfrom httmock import all_requests, HTTMockimport requests@all_requestsdef response_content(url, request):return {'status_code': 200,        'content': 'Oh hai'}with HTTMock(response_content):r = requests.get('https://foo_bar')print r.status_codeprint r.content```If you pass in `Set-Cookie` headers, `requests.Response.cookies` will contain the values. You can also use `response` method directly instead of returning a dict:```pythonfrom httmock import all_requests, response, HTTMockimport requests@all_requestsdef response_content(url, request):headers = {'content-type': 'application/json',           'Set-Cookie': 'foo=bar;'}content = {'message': 'API rate limit exceeded'}return response(403, content, headers, None, 5, request)with HTTMock(response_content):r = requests.get('https://api.github.com/users/whatever')print r.json().get('message')print r.cookies['foo']```</longdescription>
</pkgmetadata>