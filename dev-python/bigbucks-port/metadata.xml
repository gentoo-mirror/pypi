<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## IntroductionThis package is used for portfolio analysis in FINTECH 512 Bigbucks project. This package also depends on the `bigbucks_db` package to interact with the supabase database and Alpha Vantage. ## Connect to supabase and alpha Vantage```python# Connect to supabaseSUPABASE_URL = &quot;&quot;KEYS = &quot;&quot;objs = Table_View(SUPABASE_URL, KEYS)# Connect to Alpha VantageSTOCK_API_KEYS = &quot;&quot;objs_realtime = Buy_And_Sell(STOCK_API_KEYS)```Import package```pythonfrom bigbucks_port.portfolio import *```## Functions### Get the current portfolio holdings for user. - It returns a json list includes the stock symbol, number of shares, historical cost and price per share.- If you want to get all the stocks for all the users, set `id=None`. Same for other functions below. ```pythonid =6holding = holding_json(objs,id)```Example output:```python{&quot;IBM&quot;:{&quot;num_shares&quot;:100,&quot;historical_cost&quot;:13107.0007324219,&quot;price_per_share&quot;:131.0700073242}}```### Calculate the historical daily return for each stock in the holding ```pythonreturns = return_json(objs,id)```Example output:```python[{&quot;Symbol&quot;: &quot;AAPL&quot;, &quot;labels&quot;: [&quot;2018-04-03&quot;, &quot;2018-04-04&quot;], &quot;data&quot;: [{&quot;date&quot;: &quot;2018-04-03&quot;, &quot;return&quot;: 0.010206911067964735}, {&quot;date&quot;: &quot;2018-04-04&quot;, &quot;return&quot;: 0.01894174279199366}]}, {&quot;Symbol&quot;: &quot;IBM&quot;, &quot;labels&quot;: [&quot;2018-04-03&quot;, &quot;2018-04-04&quot;], &quot;data&quot;: [{&quot;date&quot;: &quot;2018-04-03&quot;, &quot;return&quot;: -0.0014670581452283652}, {&quot;date&quot;: &quot;2018-04-04&quot;, &quot;return&quot;: 0.028096725995288337}]}]```### Calculate the historical daily return for SPY ```pythonreturns = spy_json(objs)```Example output:```python{&quot;Symbol&quot;: &quot;SPY&quot;, &quot;labels&quot;: [&quot;2018-04-10&quot;, &quot;2018-04-11&quot;], &quot;data&quot;: [{&quot;date&quot;: &quot;2018-04-10&quot;, &quot;return&quot;: 0.016588598996312102}, {&quot;date&quot;: &quot;2018-04-11&quot;, &quot;return&quot;: -0.005540685772461173}]}```### Calculate the expected return and std of each stock in the portfolio- It returns a a json list of mean and std for each stock```pythoner_std = er_std_json(obj,id)```Example output:```python{&quot;AAPL&quot;:{&quot;mean&quot;:0.2318697889,&quot;std&quot;:0.3361717704},&quot;IBM&quot;:{&quot;mean&quot;:-0.0075799068,&quot;std&quot;:0.2759977582}}```### Get the risk and return for the efficient frontier- ```python# num: number of portfolios on the efficient frontierreturn_risk = frontier_json(objs,id,num)```Example output```python{&quot;data&quot;: [{&quot;std&quot;: 0.06906698680510652, &quot;mean&quot;: -0.007579906778486523}, {&quot;std&quot;: 0.06906698680510652, &quot;mean&quot;: -0.007579906778486523}]}```### Get the optimal portfolio given a risk free rate```python# rf: risk free rateopt = optimize_port(rf,objs,id)```Example output```python{&quot;opt mean&quot;: 0.2318697888966346, &quot;opt std&quot;: 0.08412521675427394, &quot;opt sharpe&quot;: 2.7265283555418782}```### Calculate the risk, return and sharpe for the current holding```pythonrisk_return = cur_risk_return(0.0025,objs,6)```Example output```python{'mean': -0.007579906778486523, 'std': 0.06906698680510652, 'sharpe': -0.1459439197330273}```### Calculate the holding period return and cash balance```pythonholding_stat = holding_return(objs,6,objs_realtime)```Example output```python# PV: the market value of all cash and stocks in the account# Cash: cash remained in the account balance{'PV': 1000106.999206543, 'Cash': 986892.9992675781, 'Holding_return': 0.00010699920654300143}```</longdescription>
</pkgmetadata>