<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ReNATS&gt; Elegant, modern and asynchronous NATS Client API library written in pure Python```pythonimport asynciofrom renats.client import NATSClient, Messageservers = (    (&quot;127.0.0.1&quot;, 4222),)client = await NATSClient().connect(servers)# Publish message to subject 'my.subject' with payload 'My payload =)'await client.publish(&quot;my.subject&quot;, b&quot;My payload =)&quot;)# Publish message to subject 'my.subject' with payload 'My payload =)',# reply subject 'my.reply.subject' and header 'MyHeader' with value 'MyValue'await client.publish(    subject=&quot;my.subject&quot;,    payload=b&quot;My payload =)&quot;,    reply_subject=&quot;my.reply.subject&quot;,    headers={        &quot;MyHeader&quot;: &quot;MyValue&quot;    })# Callbacks can be sync or async (def or async def)def callback(message: Message):    print(f&quot;Received message in sync callback from {message.subject}: {message.payload}&quot;)async def async_callback(message: Message):    await asyncio.sleep(3)    print(f&quot;Received message in async callback from {message.subject}: {message.payload}&quot;)subscription = await client.subscribe(&quot;foo.bar&quot;, callback)another_subscription = await client.subscribe(&quot;foo.baz&quot;, async_callback)await client.publish(&quot;foo.bar&quot;, b&quot;Hello world! (to subscription with sync callback)&quot;)await client.publish(&quot;foo.baz&quot;, b&quot;Hello world! (to subscription with async callback)&quot;)await subscription.unsubscribe()await another_subscription.unsubscribe()# Closing clientawait client.close()```### Installation```bashpip install renats```### TODO- Request-Reply- JetStream- ObjectStorage- Request-Reply API Framework for microservices- And more, maybe...</longdescription>
</pkgmetadata>