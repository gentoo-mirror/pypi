<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-storable===============.. image:: https://raster.shields.io/pypi/v/storable    :target: https://pypi.org/project/storable/.. image:: https://raster.shields.io/travis/CowboyTim/python-storable/master    :target: https://travis-ci.com/github/CowboyTim/python-storableOverview--------This is a Python module that is be able to read Perl storable files. Storableis a nice and efficient binary format for Perl that is very popular. A lot ofother serialization/deserialization modules exist that are even more or lessstandardized: JSON, XML, CSV,.. etc. Storable is more or less Perl specific.To ease integration between Perl - where storable sometimes is the only option- and Python this module is a bridge.The module has been tested to work with Python 2.7 and upwards... warning:: **Perl Scalar Handling**    Care has to be taken when dealing with Perl &quot;scalars&quot;. They are a bit    &quot;magical&quot; in that they can behave like different types depending on how    they are used. This is currently not supported directly in Python, and    **neither does this library provide a suitable abstraction!**    The way this is currently handled is that types are &quot;guessed&quot; in a fairly    iffy manner! The value is tried to be converted to different types (at the    time of this writing: float → int → ASCII-string). The first one that    matches wins. This means that **The Perl scalar &quot;123&quot; will always be    returned as an integer**Quick Usage-----------::    from storable import retrieve    data = retrieve('/path/to/file.storable')    from storable.output import serialize    # only works (so far) for JSON-able types and recursion-limited depth    # This will not serialize to the exact same object in perl as retrieve/thaw-ing    # but will be readable by perl to load json-like values    serialized_bytes = serialize({'x': 'bar', 'y': 1, 'z': 1.23, 'w':[], 'v':[1,2,3]})</longdescription>
</pkgmetadata>