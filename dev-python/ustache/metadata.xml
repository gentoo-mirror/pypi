<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ustacheMustache for Python.Documentation: [ustache.readthedocs.io](https://ustache.readthedocs.io)## Installation```pythonpip install ustache```## UsagePython:```pythonimport ustacheprint(ustache.render('Hello {{v}}', {'v': 'World!'}))# Hello World!```Command line:```sh$ ustache -j data.json -o output.html template.mustache```## Highlights- The fastest pure-python Mustache implementation to this date.- Command line interface.- Spec compliant, but also highly compatible with `Mustache.js`.- Small codebase, efficiently rendering to `str` or `bytes`,  supporting streaming.- Customizable (property getter, partial resolver, and stringify, escape  and lambda render functions).- Customizable template caching, with an optional memory-efficient mode  (see [xxhash optional dependency below](#xxhash)).- No dynamic code generation, jit and transpiler friendly.## ConsiderationsFor inter-compatibility with JavaScript (especially `Mustache.js`, enablingclient-side rendering with the same templates), **ustache** exposes someatypical behavior:- Mustache blocks stick to JavaScript falseness (`__bool__` is not honored):  `None`, `False`, `0`, `nan`, and empty sequences (including strings)  are taken as falsy, while everything else (including empty mappings) will  be considered truthy (`Mustache.js` `Boolean` and empty `Array` handling).- Mustache blocks receiving any iterable other than mappings and strings  will result on a loop (`Mustache.js` `Array` handling).- Non-mapping sized objects will expose a virtual `length` property  (JavaScript `Array.length` emulation).  Customizable via `getter` parameter.- Mapping keys containing dot (`.`) or whitespace (` `) are unreachable,  (`Mustache.js` property name limitation).  Customizable via `getter` parameter.- Sequence elements are accessible by positive index in the same way mapping  integer-keyed items are also accessible when no string key conflicts, as  properties (JavaScript `Object` emulation).  Customizable via `getter` parameter.## Optional dependenciesFor minimalism and portability, **ustache** has no hard dependencies, whilestill supporting some libraries for added functionality:- &lt;a id=&quot;xxhash&quot;&gt;&lt;/a&gt;[xxhash](https://pypi.org/project/xxhash)  will be used, if available, to avoid storing the whole template data as  part of the template cache, dramatically reducing its memory footprint in  many situations.Optional but generally recommended dependencies can be easily installedall at once using **ustache** `optional` extra target:```sh$ pip install ustache[optional]```## SyntaxCheck out the [mustache(5) manual](https://mustache.github.io/mustache.5.html).For quick reference, here is a quick overview of the Mustache syntax.Template (`template.mustache`):```handlebars{{!comment}}&lt;ul&gt;{{#object}}&lt;li&gt;{{property}}&lt;/li&gt;{{/object}}{{^object}}&lt;li&gt;As &lt;b&gt;object&lt;/b&gt; is truthy, this won't be shown&lt;/li&gt;{{/object}}{{^null}}&lt;li&gt;&lt;b&gt;null&lt;/b&gt; is falsy&lt;/li&gt;{{/null}}{{#array}}&lt;li&gt;{{property}}&lt;/li&gt;{{/array}}{{^array}}&lt;li&gt;Array isn't empty, this won't be shown.&lt;/li&gt;{{/array}}{{#empty_array}}&lt;li&gt;Empty Array, this won't be shown&lt;/li&gt;{{/empty_array}}{{^empty_array}}&lt;li&gt;empty_array is empty&lt;/li&gt;{{/empty_array}}{{&amp;unescaped_html}}&lt;/ul&gt;```Data (`data.json`):```json{  &quot;object&quot;: {    &quot;property&quot;: &quot;Object property value&quot;  },  &quot;null&quot;: null,  &quot;array&quot;: [    {&quot;property&quot;: &quot;Array item1 property&quot;},    {&quot;property&quot;: &quot;Array item2 property&quot;},    {&quot;property&quot;: &quot;Array item3 property&quot;}  ],  &quot;empty_array&quot;: [],  &quot;unescaped_html&quot;: &quot;&lt;li&gt;this is unescaped html&lt;/li&gt;&quot;}```Command:```sh$ ustache -j data.json -o output.html template.mustache```Output:```html&lt;ul&gt;&lt;li&gt;Object property value&lt;/li&gt;&lt;li&gt;&lt;b&gt;null&lt;/b&gt; is falsy&lt;/li&gt;&lt;li&gt;Array item1 property&lt;/li&gt;&lt;li&gt;Array item2 property&lt;/li&gt;&lt;li&gt;Array item3 property&lt;/li&gt;&lt;li&gt;empty_array is empty&lt;/li&gt;&lt;li&gt;this is unescaped html&lt;/li&gt;&lt;/ul&gt;```</longdescription>
</pkgmetadata>