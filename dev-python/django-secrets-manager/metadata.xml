<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django SecretsManager**Django SecretsManager** is a package that helps you manage the secret values used by Django through variable services.## Requirements- Python &gt;= 3.6- Django## Required settings for the settings module- **AWS_SECRETS_MANAGER_SECRET_NAME** (or AWS_SECRET_NAME)  - Secret name of SecretsManager to use- **AWS_SECRETS_MANAGER_SECRET_SECTION** (or AWS_SECRET_SECTION)  - The key that separates JSON objects by colons.      ex) In the example below, the &quot;production&quot; item is represented as **&quot;sample-project:production&quot;**.- **AWS_SECRETS_MANAGER_REGION_NAME** (or AWS_REGION_NAME)  - [Region](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html) of the SecretsManager service to use      ex) ap-northeast-2## Secret value setting of AWS SecretsManager**SecretsManager's Secret value** uses JSON format in Plaintext.  Here is an example Secret value to use for configuration, and the [**Secret**](https://docs.aws.amazon.com/secretsmanager/latest/userguide/terms-concepts.html) (Corresponds to **AWS_SECRETS_MANAGER_SECRET_NAME** in the settings module) is named **sample-project-secret**```json{  &quot;sample-project(Recommend the name of django project)&quot;: {    &quot;base(If the settings module is a package, submodule names are recommended)&quot;: {      &quot;SECRET_KEY&quot;: &quot;DjangoSecretKey&quot;    },    &quot;dev&quot;: {      &quot;AWS_S3_BUCKET_NAME&quot;: &quot;sample-s3-dev&quot;    },    &quot;production&quot;: {      &quot;AWS_S3_BUCKET_NAME&quot;: &quot;sample-s3-production&quot;    }  }}```## Setting up AWS Credentials for Django to useDjango uses two methods to access the SecretsManager on AWS. The first uses a profile of `~/.aws/credentials` in your home folder, and the second uses an environment variable.### 1. Using the AWS Credentials Profile&gt; Recommended for use in development environmentsSet Profile of IAM User with **SecretsManagerReadWrite Permission** to `~/.aws/credentials`. The following example uses the profile name **sample-project-secretsmanager**```ini[sample-project-secretsmanager]aws_access_key_id = AKI*************aws_secret_access_key = Mlp********************```Then enter the profile name in **AWS_SECRETS_MANAGER_PROFILE** (or AWS_PROFILE) of the settings module.```python# settings.pyAWS_SECRETS_MANAGER_PROFILE = 'sample-project-secrets-manager'```### 2. Use environment variables&gt; It is recommended to use in distribution or CI / CD environment.If you set the following values in the environment variable, the contents are used to use the SecretsManager service.- **AWS_SECRETS_MANAGER_ACCESS_KEY_ID** (or AWS_ACCESS_KEY_ID)- **AWS_SECRETS_MANAGER_SECRET_ACCESS_KEY** (or AWS_SECRET_ACCESS_KEY)## Using Secrets in Django's Settings Module1. First, import the SECRETS instance of the library.2. Enter the settings for Django AWS SecretsManager3. Use SECRETS as a dictionary to get the secrets you wantFollow the form of the example below  &gt; By separating the settings module into packages, it is assumed that there are base and dev submodules.&gt;&gt; ```&gt; settings/&gt;     __init__.py&gt;     base.py&gt;     dev.py&gt; ``````python## settings/base.py# 1. Import the SECRETS instance of the libraryfrom django_secrets import SECRETS# 2. Enter the settings for Django AWS SecretsManagerAWS_SECRETS_MANAGER_SECRET_NAME = 'sample-project-secret'AWS_SECRETS_MANAGER_PROFILE = 'sample-project-secretsmanager'AWS_SECRETS_MANAGER_SECRET_SECTION = 'sample-project:base'AWS_SECRETS_MANAGER_REGION_NAME = 'ap-northeast-2'# 3. Use SECRETS as a dictionary to get the secrets you wantSECRET_KEY = SECRETS['SECRET_KEY']SECRET_KEY = SECRETS.get('SECRET_KEY')``````python## settings/dev.py# The SECRETS instance is already imported from the base module.from .base import *# Use a different secrets sectionAWS_SECRETS_MANAGER_SECRET_SECTION = 'sample-project:dev'# Use SECRETS as a dictionary to get the secrets you wantAWS_STORAGE_BUCKET_NAME = SECRETS['AWS_STORAGE_BUCKET_NAME']AWS_STORAGE_BUCKET_NAME = SECRETS.get('AWS_STORAGE_BUCKET_NAME', 'default')```## ContributingAs an open source project, we welcome contributions.  The code lives on [GitHub](https://github.com/leehanyeong/django-aws-secrets-manager)</longdescription>
</pkgmetadata>