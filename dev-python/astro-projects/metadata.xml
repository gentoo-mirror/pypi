<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;  astro&lt;/h1&gt;  &lt;h3 align=&quot;center&quot;&gt;  workflows made easy&lt;br&gt;&lt;br&gt;&lt;/h3&gt;[![Python versions](https://img.shields.io/pypi/pyversions/astro-projects.svg)](https://pypi.org/pypi/astro-projects)[![License](https://img.shields.io/pypi/l/astro-projects.svg)](https://pypi.org/pypi/astro-projects)[![Development Status](https://img.shields.io/pypi/status/astro-projects.svg)](https://pypi.org/pypi/astro-projects)[![PyPI downloads](https://img.shields.io/pypi/dm/astro-projects.svg)](https://pypistats.org/packages/astro-projects)[![Contributors](https://img.shields.io/github/contributors/astro-projects/astro)](https://github.com/astro-projects/astro)[![Commit activity](https://img.shields.io/github/commit-activity/m/astro-projects/astro)](https://github.com/astro-projects/astro)[![CI](https://github.com/astro-projects/astro/actions/workflows/ci.yaml/badge.svg)](https://github.com/astro-projects/astro)[![codecov](https://codecov.io/gh/astro-projects/astro/branch/main/graph/badge.svg?token=MI4SSE50Q6)](https://codecov.io/gh/astro-projects/astro)**astro** allows rapid and clean development of {Extract, Load, Transform} workflows using Python.It helps DAG authors to achieve more with less code.It is powered by [Apache Airflow](https://airflow.apache.org) and maintained by [Astronomer](https://astronomer.io).&gt; :warning: **Disclaimer** This project's development status is alpha. In other words, it is not production-ready yet.The interfaces may change. We welcome alpha users and brave souls to test it - any feedback is welcome.## Install**Astro** is available at [PyPI](https://pypi.org/project/astro-projects/). Use the standard Python[installation tools](https://packaging.python.org/en/latest/tutorials/installing-packages/).To install a cloud-agnostic version of **Astro**, run:```pip install astro-projects```If using cloud providers, install using the optional dependencies of interest:```commandlinepip install astro-projects[amazon,google,snowflake,postgres]```## Quick-startAfter installing Astro, copy the following example dag `calculate_popular_movies.py` to a local directory named `dags`:```Pythonfrom datetime import datetimefrom airflow import DAGfrom astro import sql as aqlfrom astro.sql.table import Table@aql.transform()def top_five_animations(input_table: Table):    return &quot;&quot;&quot;        SELECT Title, Rating        FROM {{input_table}}        WHERE Genre1=='Animation'        ORDER BY Rating desc        LIMIT 5;    &quot;&quot;&quot;with DAG(    &quot;calculate_popular_movies&quot;,    schedule_interval=None,    start_date=datetime(2000, 1, 1),    catchup=False,) as dag:    imdb_movies = aql.load_file(        path=&quot;https://raw.githubusercontent.com/astro-projects/astro/main/tests/data/imdb.csv&quot;,        task_id=&quot;load_csv&quot;,        output_table=Table(            table_name=&quot;imdb_movies&quot;, database=&quot;sqlite&quot;, conn_id=&quot;sqlite_default&quot;        ),    )    top_five_animations(        input_table=imdb_movies,        output_table=Table(            table_name=&quot;top_animation&quot;, database=&quot;sqlite&quot;, conn_id=&quot;sqlite_default&quot;        ),    )```Set up a local instance of Airflow by running:```shellexport AIRFLOW_HOME=`pwd`export AIRFLOW__CORE__ENABLE_XCOM_PICKLING=Trueairflow db init```Create an SQLite database for the example to run with and run the DAG:```shell# The sqlite_default connection has different host for MAC vs. Linuxexport SQL_TABLE_NAME=`airflow connections get sqlite_default -o yaml | grep host | awk '{print $2}'`sqlite3 &quot;$SQL_TABLE_NAME&quot; &quot;VACUUM;&quot;airflow dags test calculate_popular_movies `date -Iseconds````Check the top five animations calculated by your first Astro DAG by running:```shellsqlite3 &quot;$SQL_TABLE_NAME&quot; &quot;select * from top_animation;&quot; &quot;.exit&quot;```You should see the following output:```console$ sqlite3 &quot;$SQL_TABLE_NAME&quot; &quot;select * from top_animation;&quot; &quot;.exit&quot;Toy Story 3 (2010)|8.3Inside Out (2015)|8.2How to Train Your Dragon (2010)|8.1Zootopia (2016)|8.1How to Train Your Dragon 2 (2014)|7.9```## RequirementsBecause **astro** relies on the [Task Flow API](https://airflow.apache.org/docs/apache-airflow/stable/concepts/taskflow.html) andit depends on Apache Airflow &gt;= 2.1.0.## Supported technologies| Databases       | File types | File locations ||-----------------|------------|----------------|| Google BigQuery | CSV        | Amazon S3      || Postgres        | JSON       | Filesystem     || Snowflake       | NDJSON     | Google GCS     || SQLite          | Parquet    |                |## Available operationsA summary of the currently available operations in **astro**. More details are available in the [reference guide](docs/OLD_README.md).* `load_file`: load a given file into a SQL table* `transform`: applies a SQL select statement to a source table and saves the result to a destination table* `truncate`: remove all records from a SQL table* `run_raw_sql`: run any SQL statement without handling its output* `append`: insert rows from the source SQL table into the destination SQL table, if there are no conflicts* `merge`: insert rows from the source SQL table into the destination SQL table, depending on conflicts:  * ignore: do not add rows that already exist  * update: replace existing rows with new ones* `save_file`: export SQL table rows into a destination file* `dataframe`: export given SQL table into in-memory Pandas data-frame* `render`: given a directory containing SQL statements, dynamically create transform tasks within a DAG## DocumentationThe documentation is a work in progress, and we aim to follow the [Di√°taxis](https://diataxis.fr/) system:* **Tutorial**: a hands-on introduction to **astro*** **How-to guides**: simple step-by-step user guides to accomplish specific tasks* **[Reference guide](docs/OLD_README.md)**: commands, modules, classes and methods* **Explanation**: Clarification and discussion of key decisions when designing the project.## ChangelogWe follow Semantic Versioning for releases. Check the [changelog](docs/CHANGELOG.md) for the latest changes.## Release ManagementsTo learn more about our release philosophy and steps, check [here](docs/RELEASE.md)## Contribution GuidelinesAll contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome.Read the [Contribution Guideline](docs/CONTRIBUTING.md) for a detailed overview on how to contribute.As contributors and maintainers to this project, you should abide by the [Contributor Code of Conduct](docs/CODE_OF_CONDUCT.md).## License[Apache Licence 2.0](LICENSE)</longdescription>
</pkgmetadata>