<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># apply_defaultsApply default values to functions.Makes configuration easy! Application settings come from a config file intoyour code cleanly.```shpip install apply_defaults```## @apply_configThis decorator applies options from a ConfigParser object.```pythonfrom apply_defaults import apply_configfrom configparser import ConfigParserconfig = ConfigParser()config.read_dict({&quot;general&quot;: {&quot;option&quot;: True}})@apply_config(config)def func(option: bool = False) -&gt; bool:    return option```The `option` parameter takes the value from the configuration.```python&gt;&gt;&gt; func()True```Override the configuration by passing a value.```python&gt;&gt;&gt; func(option=False)False```If the option is not in the configuration, the default value from the parameterlist is used.```python&gt;&gt;&gt; config.remove_option(&quot;general&quot;, &quot;option&quot;)&gt;&gt;&gt; func()False```_ConfigParser's options are strings. Type hints in the function signature allowthe apply_config decorator to cast options to the desired type.  Alternativelycast the value yourself._## @apply_selfThis decorator applies attributes from the bound object.```pythonfrom apply_defaults import apply_selfclass MyObject:    def __init__(self):        self.option = True    @apply_self    def func(self, option=False):        return option```The parameter takes the value from the bound object, i.e. `self.option`.```python&gt;&gt;&gt; obj = MyObject()&gt;&gt;&gt; obj.func()True```Override by passing a value.```python&gt;&gt;&gt; obj.func(option=False)False```If the attribute is not in the bound object, the default value from theparameter list is used.```python&gt;&gt;&gt; del obj.option&gt;&gt;&gt; obj.func()False```</longdescription>
</pkgmetadata>