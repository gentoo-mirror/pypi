<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======rpmvenv=======*RPM package helper which support packaging Python virtual environments.*-   `Basic Usage &lt;#basic-usage&gt;`_-   `Customizing &lt;#customizing&gt;`_    -   `Core &lt;#core&gt;`_    -   `Blocks &lt;#blocks&gt;`_    -   `File Permissions &lt;#file-permissions&gt;`_    -   `Additional Files &lt;#additional-files&gt;`_    -   `Python Virtualenv &lt;#python-virtualenv&gt;`_    -   `CLI Flags And Environment Variables &lt;#cli-flags-and-environment-variables&gt;`_    -   `Additional Options &lt;#additional-options&gt;`_-   `NOTE: python 2 support &lt;#note-python-2-support&gt;`_-   `NOTE: manylinux &lt;#note-manylinux&gt;`_-   `NOTE: unicode &lt;#note-unicode&gt;`_-   `NOTE: system python &lt;#note-system-python&gt;`_-   `NOTE: bdist eggs with scripts &lt;#note-bdist-eggs-with-scripts&gt;`_-   `NOTE: BUILDROOT errors and nushell &lt;#note-buildroot-errors-and-nushell&gt;`_-   `Testing &lt;#testing&gt;`_-   `License &lt;#license&gt;`_-   `Contributing &lt;#contributing&gt;`_Basic Usage===========In order to package a Python project in an RPM containing a virtualenv dropa file in your repository root with a '.json' extensions and the followingcontent. Change the values where appropriate... code-block:: javascript    {        &quot;extensions&quot;: {            &quot;enabled&quot;: [                &quot;python_venv&quot;,                &quot;blocks&quot;            ]        },        &quot;core&quot;: {            &quot;group&quot;: &quot;Application/System&quot;,            &quot;license&quot;: &quot;MIT&quot;,            &quot;name&quot;: &quot;some-rpm-package-name&quot;,            &quot;summary&quot;: &quot;short package summary&quot;,            &quot;version&quot;: &quot;1.2.3&quot;        },        &quot;python_venv&quot;: {            &quot;name&quot;: &quot;name_of_venv_dir_to_create&quot;,            &quot;path&quot;: &quot;/path/where/to/install/venv&quot;        },        &quot;blocks&quot;: {            &quot;desc&quot;: [                &quot;some long package description&quot;,                &quot;each array element is a new line&quot;            ]        }    }Make sure `rpmbuild &lt;http://www.rpm.org&gt;`_ is installed.With the configuration file in place run the command line tool installed withthe package to generate the RPM... code-block:: shell    rpmvenv path/to/the/config.jsonThis will generate a new RPM and place it in your current working directory.Customizing===========While the above example will generate an installable RPM it has limitations.For example, it does not set the user/group ownership of the packaged files,it does not include non-Python files such as init scripts, and it does notperform any post install actions. This project uses a plugin system for addingand enabling extra functionality. For convenience, some features ship with theproject already.Core----The 'core' extension is always enabled. This extension provides the optionsfor interacting with all the required RPM SPEC file tags like &quot;Version&quot; or&quot;Url&quot;. Current core options:.. code-block:: javascript    {&quot;core&quot;:{        // The name of the RPM file which is generated.        &quot;name&quot;: &quot;some-pkg-name&quot;,        // The RPM version to build.        &quot;version&quot;: &quot;1.2.3&quot;,        // The release number for the RPM. Default is 1.        &quot;release&quot;: &quot;1&quot;,        // The short package summary.        &quot;summary&quot;: &quot;a package for code&quot;,        // The RPM package group in which this package belongs.        &quot;group&quot;: &quot;Application/System&quot;,        // The license under which the package is distributed.        &quot;license&quot;: &quot;MIT&quot;,        // The URL of the package source.        &quot;url&quot;: &quot;https://projectsite.com&quot;,        // The path to the package source. Defaults to the parent of the config.        &quot;source&quot;: &quot;/path/to/my/source&quot;,        // The name of the buildroot directory to use. Default is random temp dir.        &quot;buildroot&quot;: &quot;%(mktemp -ud %{_tmppath}/%{SOURCE0}-%{version}-%{release}-XXXXXX)&quot;,        // System dependencies.        &quot;requires&quot;: [],        // Conflicting packages.        &quot;conflicts&quot;: [],        // Packages to mark as obsolete.        &quot;obsoletes&quot;: [],        // Virtual packages satisfied by this RPM.        &quot;provides&quot;: []    }}Blocks------RPM files contain several sections, or blocks, which can contain multi-linecontent. Most blocks contain shell code used to build and install a project.This extension is enabled by adding 'blocks' to the list of enabled extensions.Each block configuration item is a list of strings. Each string represents aline in the body of the block... code-block:: javascript    {&quot;blocks&quot; {        // Shell to execute on post-install.        &quot;post&quot;: [],        // Shell to execute on post-uninstall.        &quot;postun&quot;: [],        // Shell to execute on pre-install.        &quot;pre&quot;: [],        // Shell to execute on pre-uninstall.        &quot;preun&quot;: [],        // Shell to execute during the prep phase.        &quot;prep&quot;: [],        // Shell to execute during the build phase.        &quot;build&quot;: [],        // Shell to execute during the install phase.        &quot;install&quot;: [],        // Shell to execute during the clean phase.        &quot;clean&quot;: [],        // Long form description of the package.        &quot;desc&quot;: [],        // A list of files which are included in the package.        &quot;files&quot;: [],        // A list of the changes that have been done        &quot;changelog&quot;: [],    }}File Permissions----------------This extension will set the user and group ownership properties of all filesincluded with the package. It is enabled by adding 'file_permissions' to thelist of enabled extensions... code-block:: javascript    {&quot;file_permissions&quot;: {        // The name of the user who should own the files.        &quot;user&quot;: &quot;webserver&quot;,        // The name of the group which should own the files.        &quot;group&quot;: &quot;webserver&quot;,        // If true, the user will be created during install if missing.        &quot;create_user&quot;: false,        // If true, the group will be created during install if missing.        &quot;create_group&quot;: false,    }}Additional Files----------------This extension will allow for packaging any files even if they are not a partof the built project. This extension is enabled by adding &quot;file_extras&quot; in thelist of enabled extensions. This extension also requires that'file_permissions' be enabled. It uses the same user and group to assignownership of the extra files by default but allows for individual files to havespecial permissions set. Source paths are relative to the root... code-block:: javascript    {&quot;file_extras&quot;: {        &quot;files&quot;: [            {                &quot;src&quot;: &quot;somedir/project_init_script&quot;,                &quot;dest&quot;: &quot;etc/init.d/project&quot;,            },            {                &quot;src&quot;: &quot;somedir/with/perms&quot;,                &quot;dest&quot;: &quot;etc/with/perms&quot;,                &quot;attr&quot;: {                    &quot;permissions&quot;: &quot;0644&quot;,                    // Leaving user or group unspecified means they use the                    // default value from files_permissions.                    &quot;user&quot;: &quot;testuser&quot;,                    &quot;group&quot;: &quot;testgroup&quot;                }            },            {                &quot;src&quot;: &quot;somedir/readme&quot;,                &quot;dest&quot;: &quot;usr/share/doc/project/readme&quot;,                &quot;doc&quot;: true            },            {                &quot;src&quot;: &quot;somedir/project.conf&quot;,                &quot;dest&quot;: &quot;etc/project.conf&quot;,                // valid options include true, &quot;noreplace&quot;, and &quot;missingok&quot;                &quot;config&quot;: &quot;noreplace&quot;            },            // source:destination pairs (deprecated)            &quot;somedir/project_init_script:etc/init.d/project&quot;        ]    }}Python Virtualenv-----------------This extension automates generating an RPM from a Python virtualenv. It isenabled by adding 'python_venv' to the list of enabled extensions... code-block:: javascript    {&quot;python_venv&quot;: {        // The executable to use for creating a venv.        &quot;cmd&quot;: &quot;virtualenv&quot;,        // Flags to pass to the venv during creation.        &quot;flags&quot;: [&quot;--always-copy&quot;],        // The name of the installed venv.        &quot;name&quot;: &quot;project_venv&quot;,        // The path in which to install the venv.        &quot;path&quot;: &quot;/usr/share/python&quot;,        // The python executable to use in the venv.        &quot;python&quot;: &quot;python3.9&quot;,        // Optional flag to enable building an rpm with, without a setup.py file. Default is true if not present.        &quot;require_setup_py&quot;: true,        // Names of requirements files to install in the venv.        &quot;requirements&quot;: [&quot;requirements.txt&quot;],        // Flags to pass to pip during pip install calls.        &quot;pip_flags&quot;: &quot;--index-url https://internal-pypi-server.org&quot;,        // Optional flag to enable, disable binary striping. Default is true if not present.        &quot;strip_binaries&quot;: true,        // Optional flag to install the distribution into the venv with        // pip install, rather than setup.py install. Default is false if        // not present.        &quot;use_pip_install&quot;: false,        // Optional flag to remove compiled bytecode from venv.        // It will reduce size of resulting package. Default is false if not present.        &quot;remove_pycache&quot;: false,    }}CLI Flags And Environment Variables-----------------------------------In addition to adding the above sections to a configuration file, all valuesmay also be given as command line flags to the 'rpmvenv' command as well asenvironment variables.Command line flags follow a common pattern: '--extension_name_option_name'. Acommon use for this feature is setting the RPM package version over the CLIrather than hard coding it into a configuration file... code-block:: shell    rpmvenv /path/to/some/config.json --core_version=&quot;$(date -u +%Y.%m.%d.%H.%M.%S)&quot;This CLI argument pattern may be used to set any options. Alternatively,environment variables can also be set using a similar naming scheme:'export RPMVENV_EXTENSION_NAME_OPTION_NAME=&quot;&quot;'. Setting the version withenvironment variables, for example:.. code-block:: shell    RPMVENV_CORE_VERSION=&quot;$(date -u +%Y.%m.%d.%H.%M.%S)&quot; \    rpmvenv /path/to/some/config.jsonThe precedence order for options is configuration file, environment variables,then CLI flags. That is, environment variables will always override items inthe configuration file and CLI flags will override both the file and theenvironment variables.Additional Options------------------In addition to the options for modifying the spec file, the following are alsoavailable as CLI flags:-   --source    The path to a Python source repository. By default, this value resolves to    the directory containing the specified configuration file. It can be    overridden if the Python source is not adjacent the configuration file.-   --destination    The directory in which to place the RPM. The default value is the current    working directory.-   --spec    This flag disables the actual build in favour of printing the spec file    contents to stdout. Use this option if you need to manually verify the    spec file before running a build.-   --verbose    Normally, the stdout and stderr of the rpmbuild call are captured unless    there is an exception. Adding this flag enables the real-time output from    the rpmbuild command.NOTE: python 2 support======================Python 2, itself, was discontinued on 2020-01-01. Since then, libraries that`rpmvenv` depends on have started breaking compatibility with Python 2 or evenadding code that prevents the use of that library in Python 2 regardless ofcompatibility. It has also become increasingly difficult to support code thatworks from Python 2.6 to the most recent versions of Python 3.The last releases that support Python 2 are version `0.27.0` and `1.0.0`. Theseare both the same release. There will be no more releases in the `0.x` or `1.x`ranges.If you are using Python 2 then here is an example `requirements.txt` that hasdependencies pinned to the last known versions that support Python 2:::    jinja2==2.11.3    venvctrl&gt;=0.5.0,&lt;2.0.0    argparse&gt;=1.4.0,&lt;2.0.0    confpy&gt;=0.11.0,&lt;2.0.0    ordereddict&gt;=1.1.0,&lt;2.0.0    semver&gt;=2.9.1,&lt;3.0.0NOTE: manylinux===============As of 2019-05-26, the issue with packages generated as part of the`manylinux &lt;https://github.com/pypa/manylinux&gt;`_ project appears to havebeen resolved. This means wheels containing universal linux binaries shouldwork as expected without any special options being enabled for `rpmvenv`.For background, an issue was opened on 2017-02-01 that reported broken buildswhen one of the project dependencies was built using manylinux. The root causeappeared to be an incompatiblity between manylinux binaries and the standard`strip` system utility. Without being able to `strip` the binaries we wereunable to remove metadata from those files which included the temporary RPMbuild root. RPM builds automatically fail if any file within the packagecontains a reference to the build root.A test has been added to this project's suite that will fail if the manylinuxproject issue with `strip` regresses. If the issues does regress you canrestore your builds by adding `strip_binaries=false` to the `venv` section ofyour configuration and setting the `QA_SKIP_BUILD_ROOT=1` environment variablebefore running `rpmvenv`. The `strip_binaries=false` disables the call to`strip` and the `QA_SKIP_BUILD_ROOT=1` variable disables the RPM tool's checkfor build root.NOTE: unicode=============An issue was opened on 2018-09-01 showing a conflict between some Pythonpackages and some environments. Notably, CentOS (and possibly others) defaultto having a global system encoding value set to `ASCII` rather than `UTF-8`.Python2.X opens files using the system encoding which results in several errorsif any of the source code files contain non-ASCII characters. If you encounterthis issue then the easiest way to resolve it is to set the`LC_ALL=en_US.UTF-8` variable before running `rpmvenv`. This will adjust theglobal setting and enable processing of non-ASCII encoded files.NOTE: system python===================An issue was opened on 2017-05-18 showing a build failure wnen using thedefault Python installations for some versions of CentOS, Fedora, and RedHat.The issue manifests during the creation of the `virtualenv` and appears assomething like `ImportError: No module named \'time\'` or other error messagesreferencing Python built-ins. The cause appears to related to an`unresolved issue &lt;https://github.com/pypa/virtualenv/issues/565&gt;`_ between theaffected system distribution provided Python installations and `virtualenv`.The only known fix for this issue is to re-build Python from source for anyaffected system.NOTE: bdist eggs with scripts=============================An issue was opened on 2019-01-28 showing a build failure whenever the usual`python setup.py install` line was executed for a project that both containedscripts and triggered the `bdist` packaging path for an egg. For unknownreasons, the `bdist` egg package both installs scripts in the relevant `bin`directory _and_ retrains a copy within the egg directory. `rpmvenv` rewritesthe shebang paths in `bin` but does not account for the second copy in the`bdist` egg directory. The result is a build failure because the build root isreferenced in a file.The way to resolve this issue is to use the `&quot;use_pip_install&quot;: true` optionwhich switches the installation method from `python setup.py install` to`pip install .`. These two methods result in different installation behaviorbecause `pip` will always generate a wheel rather than an egg which does notsuffer from this issue.NOTE: BUILDROOT errors and nushell==================================If you are using recent versions of virtualenv then you may see error messageslike this::    /tmp/rpmvenvz_kldppd/BUILDROOT/test-pkg-1.2.3.4-1.x86_64/usr/share/python/test-pkg-venv/bin/activate.nu    Found '/tmp/rpmvenvz_kldppd/BUILDROOT/test-pkg-1.2.3.4-1.x86_64' in installed files; abortingThe issue is that virtualenv recently changed the contents of the nushellactivation script that is included by default in every virtualenv. There's an`issue &lt;https://github.com/kevinconway/venvctrl/issues/23&gt;`_ tracking this for`venvctrl`, which is the tool used by `rpmvenv` to rewrite virtualenv paths.In the meantime, the easiest workaround is to disable nushell if you aren'tusing it. To do this, set your `python_venv.flags` option like this:.. code-block:: javascript    {        &quot;python_venv&quot;: {            &quot;flags&quot;: [&quot;--always-copy&quot;, &quot;--activators&quot;, &quot;bash,python&quot;]        }    }This disables the generation of all activation scripts except one for bash andPython. See `the virtualenv docs&lt;https://virtualenv.pypa.io/en/latest/cli_interface.html#activators&gt;`_ for thefull set of possible activators if you need more than bash and Python.Testing=======The included tests are written using py.test. There is also an included tox.iniwhich is configured to run the tests in addition to style checks. By default,the integration tests run using rpmvenv as the target project to build.However, any project with a requirements.txt file in the repository root canbe specified with the '--python-git-url' flag while running the tests.License=======::    (MIT License)    Copyright (C) 2015 Kevin Conway    Permission is hereby granted, free of charge, to any person obtaining a copy    of this software and associated documentation files (the &quot;Software&quot;), to    deal in the Software without restriction, including without limitation the    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or    sell copies of the Software, and to permit persons to whom the Software is    furnished to do so, subject to the following conditions:    The above copyright notice and this permission notice shall be included in    all copies or substantial portions of the Software.    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS    IN THE SOFTWARE.Contributing============All contributions to this project are protected under the agreement found inthe `CONTRIBUTING` file. All contributors should read the agreement but, asa summary::    You give us the rights to maintain and distribute your code and we promise    to maintain an open source distribution of anything you contribute.</longdescription>
</pkgmetadata>