<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-dispatchLightweight event handling for Python[![Build Status](https://travis-ci.org/nocarryr/python-dispatch.svg?branch=master)](https://travis-ci.org/nocarryr/python-dispatch)[![Coverage Status](https://coveralls.io/repos/github/nocarryr/python-dispatch/badge.svg?branch=master)](https://coveralls.io/github/nocarryr/python-dispatch?branch=master)[![PyPI version](https://badge.fury.io/py/python-dispatch.svg)](https://badge.fury.io/py/python-dispatch)[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/nocarryr/python-dispatch/master/LICENSE.txt)## DescriptionThis is an implementation of the &quot;Observer Pattern&quot; with inspiration from the[Kivy](kivy.org) framework. Many of the features though are intentionallystripped down and more generalized. The goal is to have a simple drop-inlibrary with no dependencies that stays out of the programmer's way.## Installation&quot;python-dispatch&quot; is available on [PyPI](https://pypi.org/project/python-dispatch/)and can be installed using pip:```bashpip install python-dispatch```### Python RequirementsAfter version `0.1` of this project, only Python 3.6 and above will be supported.If using an older Python version, the older releases should still be availableon PyPI and the correct package should be chosen automatically by `pip`.If not, either upgrade `pip` and `setuptools`:```bashpip install -U pip setuptools```Or specify the version manually:```bashpip install python-dispatch&lt;0.2```## Links|               |                                              || -------------:|:-------------------------------------------- || Project Home  | https://github.com/nocarryr/python-dispatch  || PyPI          | https://pypi.python.org/pypi/python-dispatch || Documentation | https://python-dispatch.readthedocs.io       |## Usage### Events```python&gt;&gt;&gt; from pydispatch import Dispatcher&gt;&gt;&gt; class MyEmitter(Dispatcher):...     # Events are defined in classes and subclasses with the '_events_' attribute...     _events_ = ['on_state', 'new_data']...     def do_some_stuff(self):...         # do stuff that makes new data...         data = {'foo':'bar'}...         # Then emit the change with optional positional and keyword arguments...         self.emit('new_data', data=data)&gt;&gt;&gt; # An observer - could inherit from Dispatcher or any other class&gt;&gt;&gt; class MyListener(object):...     def on_new_data(self, *args, **kwargs):...         data = kwargs.get('data')...         print('I got data: {}'.format(data))...     def on_emitter_state(self, *args, **kwargs):...         print('emitter state changed')&gt;&gt;&gt; emitter = MyEmitter()&gt;&gt;&gt; listener = MyListener()&gt;&gt;&gt; # Bind to the &quot;on_state&quot; and &quot;new_data&quot; events of emitter&gt;&gt;&gt; emitter.bind(on_state=listener.on_emitter_state)&gt;&gt;&gt; emitter.bind(new_data=listener.on_new_data)&gt;&gt;&gt; emitter.do_some_stuff()I got data: {'foo': 'bar'}&gt;&gt;&gt; emitter.emit('on_state')emitter state changed```### Properties```python&gt;&gt;&gt; from pydispatch import Dispatcher, Property&gt;&gt;&gt; class MyEmitter(Dispatcher):...     # Property objects are defined and named at the class level....     # They will become instance attributes that will emit events when their values change...     name = Property()...     value = Property()&gt;&gt;&gt; class MyListener(object):...     def on_name(self, instance, value, **kwargs):...         print('emitter name is {}'.format(value))...     def on_value(self, instance, value, **kwargs):...         print('emitter value is {}'.format(value))&gt;&gt;&gt; emitter = MyEmitter()&gt;&gt;&gt; listener = MyListener()&gt;&gt;&gt; # Bind to the &quot;name&quot; and &quot;value&quot; properties of emitter&gt;&gt;&gt; emitter.bind(name=listener.on_name, value=listener.on_value)&gt;&gt;&gt; # Set emitter.name property (triggering the on_name callback)&gt;&gt;&gt; emitter.name = 'foo'emitter name is foo&gt;&gt;&gt; # Set emitter.value (triggering the on_value callback)&gt;&gt;&gt; emitter.value = 42emitter value is 42```## ContributingContributions are welcome!If you want to contribute through code or documentation, please see the[Contributing Guide](CONTRIBUTING.md) for information.## LicenseThis project is released under the MIT License. See the [LICENSE](LICENSE.txt) filefor more information.</longdescription>
</pkgmetadata>