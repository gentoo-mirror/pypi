<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python better assertion.========================inspired by should.js and chai.jshttp://the-py.github.io/the/|Build Status| tested on python2.7, 3.2, 3.3install=======.. code:: shell    pip install theAPI===It provides one object called ``the`` with an alias ``expect``. (Take alook at the Usage and Example.).. code:: python    from the import the, expectChains~~~~~~    do nothing but return itself.-  ``should``-  ``have``-  ``to``-  ``when``-  ``be``. Special. You can use it as a chain but it also plays as a   matcher.-  ``a``. Special. You can use it as a chain but it also plays as a   matcher.More chains?''''''''''''.. code:: python    the.use(&quot;mychain&quot;)Matchers without arg~~~~~~~~~~~~~~~~~~~~    trigger a certain assertion.-  ``true``. assert True-  ``false``. assert False-  ``none``. assert None-  ``exist``. assert not None-  ``ok``. assert Truthy-  ``empty``. assert FalsyMore?'''''    take a look at    `the-easytype &lt;https://github.com/the-py/the-easytype&gt;`__ lib... code:: python    # define your matcher    def happy(self):        return self._check(self.obj == &quot;happy&quot;,                           self.obj + &quot; is happy.&quot;,                           self.obj + &quot; is not happy.&quot;)    # add to `the`    the.use(happy)    # DONE!    the(string).should.be.happyMatchers with args~~~~~~~~~~~~~~~~~~    trigger a certain assertion-  ``eq(other)``, ``equal(other)``. assert equal(==) @param: other   {mixed}-  ``lt(other)``, ``below(other)``. assert less than(&lt;) @param: other   {mixed}-  ``gt(other)``, ``above(other)``. assert greater than(&lt;) @param: other   {mixed}-  ``ne(other)``. assert not equal(!=) @param: other {mixed}-  ``le(other)``. assert less than or equal to (&gt;=). @param: other   {mixed}-  ``ge(other)``. assert greater than(&gt;=). @param: other {mixed}-  ``match(regex)``. assert string match a regex. @param: regex {mixed}-  ``length(n)``, ``size(n)``. assert length. @param: n {int}-  ``item(**kwargs)``, ``items(**kwargs)``. assert dict have item(s).   @params: \*\*kwargs-  ``contain(other)``. assert a dict contains another dict. @param:   other {dict}-  ``key(*args)``, ``keys(*args)``. assert dict has key(s). @params:   args-  ``value(*args)``, ``values(*args)``. assert dict has value(s).   @params: args-  ``property(**kwargs)``, ``properties(**kwargs)``. assert object has   property/properties. @params: args-  ``include(item)``. assert container include item (in). @param: item   {mixed}-  ``within(container)``. assert item in container (in). @param:   container {mixed}-  ``inherit(parent)``. assert subclass. @param: parent {class}-  ``method(m)``. assert object has method. @param: m {str}-  ``result(r)``. assert function return value. Using ``apply`` to apply   args @param: r {mixed}-  ``throw(msg=None, ex=Exception)`` . assert function throw exception   using ``apply`` to apply args @param: msg {regex} optional @param: ex   {exception} optional-  ``be(other)``. assert ``is``. (It can also be used as a chain)   @param: other {mixed}.-  ``a(cls)`` . assert ``isinstance`` . (It can also be used as a chain)   @param: cls {class}-  ``exception(msg=None, ex=Exception)`` assert exception throw   **classmethod** @param: msg {regex} optional @param: ex {exception}   optionalMore?'''''    take a look at `the-fs &lt;https://github.com/the-py/the-fs&gt;`__ lib... code:: python    # define your matcher    def firstname(self, name):          fname = self.obj.split()[0]          return self._check(fname == name,                             &quot;The firstname of {} is {}&quot;.format(self.obj, name),                             &quot;The firstname of {} is not {}&quot;.format(self.obj, name))    # add to `the`    the.use(firstname)    # DONE!    expect(&quot;Wenjun Yan&quot;).to.have.firstname(&quot;Wenjun&quot;)Magic methods~~~~~~~~~~~~~-  ``==``. e.g. ``expect(1) == 1``-  ``!=``. e.g. ``expect(1) != 2``-  ``&gt;=``. e.g. ``expect(1) &gt;= 1``-  ``&lt;=``. e.g. ``expect(2) &lt;= 3``-  ``&gt;``. e.g. ``expect(3) &gt; 2``-  ``&lt;``. e.g. ``expect(4) &lt; 5``-  ``in``. e.g. ``1  in the(range(1,3))``-  ``[]`` . e.g. ``the(dictionary)[&quot;key&quot;] == &quot;value&quot;``Negations~~~~~~~~~-  ``NOT``-  ``not_to``-  ``should_not``Plugin~~~~~~``use(*args, **kwags)``. use this to extend ``the`` functionality.**classmethod** @param: \*args @param: \*\*kwargs ``args`` can be astring (which will become a new chain), method(new matcher), list of argor a dict (in this case ``the`` will use the key as new matcher's name.Same as ``kwargs``.). ``args`` can even be a module if it provides a``API`` variable containing all matchers and chains to export.Usage and Examples==================assert ``&gt;``, ``&lt;``, ``&gt;=``, ``&lt;=``, ``==``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python    expect(1) &gt; 0    expect(1).gt(0)    expect(1).above(0)    expect(1) &gt;= 0    expect(1).ge(0)    expect(1) &lt; 2    expect(1).lt(0)    expect(1).below(0)    expect(1) &lt;= 2    expect(1).le(0)    expect(1) == 1    expect(1).eq(1)    expect(1).equal(1)assert ``True``, ``False``, ``None``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python    the(True).should.be.true    expect(True).to.be.true    the(False).should.be.false    expect(False).to.be.false    the(None).should.be.none    expect(None).to.be.noneassert ``truthy``, ``falsy``~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python    the(1).should.be.ok    expect(1).to.be.ok    the(&quot;&quot;).should.be.empty    expect(&quot;&quot;).to.be.emptyassert ``is``~~~~~~~~~~~~~.. code:: python    the(1).should.be(1)    expect(1).to.be(1)assert ``isinstance``~~~~~~~~~~~~~~~~~~~~~.. code:: python    the(1).should.be.an(int)    expect(&quot;1&quot;).to.be.a(str)assert ``issubclass``~~~~~~~~~~~~~~~~~~~~~.. code:: python    the(int).should.inherit(object)    expect(int).to.inherit(object)assert ``in``~~~~~~~~~~~~~.. code:: python    the(1).should.be.within(range(1,3))    expect(1).to.be.within(range(1,3))assert ``len``~~~~~~~~~~~~~~.. code:: python    the(range(1, 3)).should.have.length(3)    expect(range(1, 3)).to.have.length(3)assert ``regexp``~~~~~~~~~~~~~~~~~.. code:: python    the(&quot;abc&quot;).should.match(&quot;a&quot;)    expect(&quot;abc&quot;).to.match(&quot;a&quot;)assert ``dict.item``~~~~~~~~~~~~~~~~~~~~.. code:: python    d = {a: 1, b: 2}    the(d).should.have.items(a=1, b=2)    expect(d).to.have.items(a=1, b=2)    expect(d)[&quot;a&quot;] == 1    the(d).should.contain({&quot;a&quot;: 1, &quot;b&quot;: 2})    expect(d).to.contain({&quot;a&quot;: 1, &quot;b&quot;: 2})assert ``dict.key``~~~~~~~~~~~~~~~~~~~.. code:: python    d = {a: 1, b: 2}    the(d).should.have.key(&quot;a&quot;)    expect(d).to.have.keys(&quot;a&quot;, &quot;b&quot;)assert ``dict.value``~~~~~~~~~~~~~~~~~~~~~.. code:: python    d = {a: 1, b: 2}    the(d).should.have.value(1)    expect(d).to.have.values(1, 2)assert ``property``~~~~~~~~~~~~~~~~~~~.. code:: python    class A(object):        def __init__(self):            self.x = 1        def getx(self):            return self.x    expect(A()).to.have.property(&quot;x&quot;)    expect(A()).to.have.property(x=1)assert ``method``~~~~~~~~~~~~~~~~~.. code:: python    class A(object):        def __init__(self):            self.x = 1        def getx(self):            return self.x    expect(A()).to.have.method(&quot;getx&quot;)    the(A()).should.have.method(&quot;getx&quot;)assert ``function``~~~~~~~~~~~~~~~~~~~.. code:: python    def div(a, b):        return a/b    expect(div).when.apply(1,2).to.have.result(1/2)    expect(div).when.apply(1,0).to.throw()assert ``exception``~~~~~~~~~~~~~~~~~~~~.. code:: python    with expect.exception():        assert 1 == 2Plugin======-  `the-fs &lt;https://github.com/the-py/the-fs&gt;`__ Use ``os`` to assert   file system .-  `the-easytype &lt;https://github.com/the-py/the-easytype&gt;`__. Another   way to assert basic types... |Build Status| image:: https://travis-ci.org/the-py/the.png   :target: https://travis-ci.org/the-py/the</longdescription>
</pkgmetadata>