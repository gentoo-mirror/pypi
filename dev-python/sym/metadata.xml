<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>sym===.. image:: http://hera.physchem.kth.se:9090/api/badges/bjodah/sym/status.svg   :target: http://hera.physchem.kth.se:9090/bjodah/sym   :alt: Build status.. image:: https://circleci.com/gh/bjodah/sym.svg?style=svg   :target: https://circleci.com/gh/bjodah/sym   :alt: Build status on CircleCI.. image:: https://secure.travis-ci.org/bjodah/sym.svg?branch=master   :target: http://travis-ci.org/bjodah/sym   :alt: Build status on Travis-CI.. image:: https://img.shields.io/pypi/v/sym.svg   :target: https://pypi.python.org/pypi/sym   :alt: PyPI version.. image:: https://img.shields.io/badge/python-2.7,3.5,3.6-blue.svg   :target: https://www.python.org/   :alt: Python version.. image:: https://img.shields.io/pypi/l/sym.svg   :target: https://github.com/bjodah/sym/blob/master/LICENSE   :alt: License.. image:: http://img.shields.io/badge/benchmarked%20by-asv-green.svg?style=flat   :target: http://hera.physchem.kth.se/~sym/benchmarks   :alt: airspeedvelocity.. image:: http://hera.physchem.kth.se/~sym/branches/master/htmlcov/coverage.svg   :target: http://hera.physchem.kth.se/~sym/branches/master/htmlcov   :alt: coverage``sym`` provides a unified wrapper to somesymbolic manipulation libraries in Python. It makes it easy for library authorsto test their packages against several symbolic manipulation libraries.Currently the following Python pacakges are available as &quot;backends&quot;:    - `SymPy &lt;https://github.com/sympy/sympy&gt;`_    - `SymEngine &lt;https://github.com/symengine/symengine.py&gt;`_    - `PySym &lt;https://github.com/bjodah/pysym&gt;`_    - `SymCXX &lt;https://github.com/bjodah/symcxx&gt;`_    - `Diofant &lt;https://github.com/diofant/diofant&gt;`_The capabilities exposed here are those needed by    - `pyodesys &lt;https://pypi.python.org/pypi/pyodesys&gt;`_    - `pyneqsys &lt;https://pypi.python.org/pypi/pyneqsys&gt;`_and include:    - Differentiation    - Numerical evaluation (including &quot;lambdify&quot; support)see `tests &lt;https://github.com/bjodah/sym/tree/master/sym/tests/&gt;`_ for examples.Note that ``pyodesys`` and ``pyneqsys`` also act as test suits for this package.Documentation-------------Auto-generated API documentation for the latest stable release is found here:`&lt;https://bjodah.github.io/sym/latest&gt;`_(and the development version for the current master branch is found here:`&lt;http://hera.physchem.kth.se/~sym/branches/master/html&gt;`_).Installation------------Simplest way to install sym and its (optional) dependencies is to use pip:::   $ pip install --user sym pytest   $ python -m pytest --pyargs symor the `conda package manager &lt;http://conda.pydata.org/docs/&gt;`_:::   $ conda install -c bjodah sym pytest   $ python -m pytest --pyargs symSource distribution is available here:`&lt;https://pypi.python.org/pypi/sym&gt;`_Example-------Differentiation.. code:: python   &gt;&gt;&gt; from sym import Backend   &gt;&gt;&gt; be = Backend('pysym')  # just an example, use SymPy rather than pysym   &gt;&gt;&gt; x, y = map(be.Symbol, 'x y'.split())   &gt;&gt;&gt; expr = x*y**2 - be.tan(2*x)   &gt;&gt;&gt; print(expr.diff(x))   ((y**2) - ((1 + (tan((2*x))**2))*2))for more examples, see `examples/ &lt;https://github.com/bjodah/sym/tree/master/examples&gt;`_, and rendered jupyter notebooks here:`&lt;http://hera.physchem.kth.se/~sym/master/examples&gt;`_License-------The source code is Open Source and is released under the simplified 2-clause BSD license. See `LICENSE &lt;LICENSE&gt;`_ for further details.Contributors are welcome to suggest improvements at https://github.com/bjodah/symAuthor------Bj√∂rn I. Dahlgren, contact:- gmail address: bjodah</longdescription>
</pkgmetadata>