<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hcuppy A Python package for [H-CUP Tools and Software](https://www.hcup-us.ahrq.gov/tools_software.jsp).The modules implemented in this package are as follows:- &quot;[CCS (Clinical Classification Software)](https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs10.jsp)&quot; converts ICD-10 diagnosis and procedure codes to clinically meaningful groups- &quot;[CCI (Chronic Condition Indicator)](https://www.hcup-us.ahrq.gov/toolssoftware/chronic_icd10/chronic_icd10.jsp)&quot; identifies chronic conditions from ICD-10 diagnosis codes- &quot;[Elixhauser Comordibity Index](https://www.hcup-us.ahrq.gov/toolssoftware/comorbidityicd10/comorbidity_icd10.jsp)&quot; calculates both readmission and mortality risks using a set of ICD-10 diagnosis codes- &quot;[Procedure Classes](https://www.hcup-us.ahrq.gov/toolssoftware/procedureicd10/procedure_icd10.jsp)&quot; identify if a given ICD-10 procedure code is Minor/Major Diagnosis/Therapeutic- &quot;[Utilization Flags](https://www.hcup-us.ahrq.gov/toolssoftware/utilflagsicd10/utilflag_icd10.jsp)&quot; identify if a combination of UB40 revenue codes and ICD-10 procedure codes indicates (or implies) a certain resource utilization e.g. Intensive Care Unit, Ultrasound, X-Ray, etc.- &quot;[Surgery Flags](https://www.hcup-us.ahrq.gov/toolssoftware/surgflags/surgeryflags.jsp)&quot; identify if a CPT code is a surgery related or not. *NOTE that, to use this module, users must agree to an additional license agreement with the AMA for using CPT codes [here](https://www.hcup-us.ahrq.gov/toolssoftware/surgflags/surgeryflags_license.jsp)*.NOTE that this package does not support for ICD-9.## InstallingInstalling from the source:```$ git clone git@github.com:yubin-park/hcuppy.git$ cd hcuppy$ python setup.py develop```Or, simply using `pip`:```$ pip install hcuppy```## File Structure- `hcuppy/`: The package source code is located here.  - `data/`: The raw data files downloaded from the H-CUP website.  - `ccs.py`: a module for CCS  - `cci.py`: a module for CCI  - `elixhauser.py`: a module for Elixhauser Comorbidity Index  - `prcls.py`: a module for Procedure Class  - `uflag.py`: a module for Utilization Flags  - `sflag.py`: a module for Surgery Flags  - `utils.py`: utility functions for reading data files.- `tests/`: test scripts to check the validity of the outputs.- `LICENSE.txt`: Apache 2.0.- `README.md`: This README file.- `setup.py`: a set-up script.## Code Examples`hcuppy` is really simple to use. Please see some examples below.NOTE that all functions used below have docstrings. If you want to see the input parameter specifications,please type `print(&lt;instance&gt;.&lt;function&gt;.__doc__)`.### Using CCS```python&gt;&gt;&gt; import json&gt;&gt;&gt; from hcuppy.ccs import CCSEngine&gt;&gt;&gt; ce = CCSEngine(mode=&quot;dx&quot;)&gt;&gt;&gt; out = ce.get_ccs([&quot;E119&quot;, &quot;I10&quot;])&gt;&gt;&gt; print(json.dumps(out, indent=2))[  {    &quot;ccs&quot;: &quot;49&quot;,    &quot;ccs_desc&quot;: &quot;Diabetes mellitus without complication&quot;,    &quot;ccs_lv1&quot;: &quot;3&quot;,    &quot;ccs_lv1_desc&quot;: &quot;Endocrine; nutritional; and metabolic diseases and immunity disorders&quot;,    &quot;ccs_lv2&quot;: &quot;3.2&quot;,    &quot;ccs_lv2_desc&quot;: &quot;Diabetes mellitus without complication [49.]&quot;  },  {    &quot;ccs&quot;: &quot;98&quot;,    &quot;ccs_desc&quot;: &quot;Essential hypertension&quot;,    &quot;ccs_lv1&quot;: &quot;7&quot;,    &quot;ccs_lv1_desc&quot;: &quot;Diseases of the circulatory system&quot;,    &quot;ccs_lv2&quot;: &quot;7.1&quot;,    &quot;ccs_lv2_desc&quot;: &quot;Hypertension&quot;  }]&gt;&gt;&gt;```### Using CCI```python&gt;&gt;&gt; from hcuppy.cci import CCIEngine&gt;&gt;&gt; ce = CCIEngine()&gt;&gt;&gt; out = ce.get_cci([&quot;E119&quot;])&gt;&gt;&gt; print(json.dumps(out, indent=2))[  {    &quot;is_chronic&quot;: true,    &quot;body_system&quot;: &quot;3&quot;,    &quot;body_system_desc&quot;: &quot;Endocrine, nutritional, and metabolic diseases and immunity disorders&quot;  }]```### Using Elixhauser Comorbidity Index```python&gt;&gt;&gt; from hcuppy.elixhauser import ElixhauserEngine&gt;&gt;&gt; ee = ElixhauserEngine()&gt;&gt;&gt; out = ee.get_elixhauser([&quot;E119&quot;, &quot;E108&quot;, &quot;I10&quot;, &quot;I110&quot;, &quot;Z944&quot;])&gt;&gt;&gt; print(json.dumps(out, indent=2)){  &quot;cmrbdt_lst&quot;: [    &quot;LIVER&quot;,    &quot;DMCX&quot;,    &quot;HTNCX&quot;,    &quot;CHF&quot;  ],  &quot;rdmsn_scr&quot;: 31,  &quot;mrtlt_scr&quot;: 9}&gt;&gt;&gt;```### Using Procedure Class```python&gt;&gt;&gt; from hcuppy.prcls import PrClsEngine&gt;&gt;&gt; pce = PrClsEngine()&gt;&gt;&gt; out = pce.get_prcls([&quot;B231Y0Z&quot;])&gt;&gt;&gt; print(json.dumps(out, indent=2))[  {    &quot;class&quot;: &quot;1&quot;,    &quot;desc&quot;: &quot;Minor Diagnostic&quot;  }]&gt;&gt;&gt;```### Using Utilization Flag```python&gt;&gt;&gt; from hcuppy.uflag import UFlagEngine&gt;&gt;&gt; ufe = UFlagEngine()&gt;&gt;&gt; out = ufe.get_uflag(rev_lst=[&quot;0380&quot;], pr_lst=[&quot;BB0DZZZ&quot;])&gt;&gt;&gt; print(json.dumps(out, indent=2))[  &quot;Blood&quot;,  &quot;Chest X-Ray&quot;]&gt;&gt;&gt;```Please refer to the test scripts under the `tests/` folder if you want to see other example use cases.## LicenseApache 2.0## AuthorsYubin Park, PhD## References- https://www.hcup-us.ahrq.gov/- https://www.hcup-us.ahrq.gov/tools_software.jsp- https://cran.r-project.org/web/packages/comorbidity/vignettes/comorbidityscores.html- https://github.com/modusdatascience/ccs</longdescription>
</pkgmetadata>