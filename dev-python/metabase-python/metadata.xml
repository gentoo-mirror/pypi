<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># metabase-python[![main](https://github.com/chasleslr/metabase-python/actions/workflows/main.yml/badge.svg)](https://github.com/chasleslr/metabase-python/actions/workflows/main.yml)[![codecov](https://codecov.io/gh/chasleslr/metabase-python/branch/main/graph/badge.svg?token=15G7HOQ1CM)](https://codecov.io/gh/chasleslr/metabase-python)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)An unofficial Python library for the [Metabase API](https://www.metabase.com/learn/administration/metabase-api).## Installation```pip install metabase-python```## Usage### ConnectionStart by creating an instance of Metabase with your credentials.```pythonfrom metabase import Metabasemetabase = Metabase(    host=&quot;&lt;host&gt;&quot;,    user=&quot;&lt;username/email&gt;&quot;,    password=&quot;&lt;password&gt;&quot;,)```### Interacting with EndpointsYou can then interact with any of the supported endpoints through the classes included in this package. Methods thatinstantiate an object from the Metabase API require the `using` parameter which expects an instance of `Metabase` suchas the one we just instantiated above. All changes are reflected in Metabase instantly.```pythonfrom metabase import User# get all objectsusers = User.list(using=metabase)# get an object by IDuser = User.get(1, using=metabase)# attributes are automatically loaded and available in the instanceif user.is_active:    print(&quot;User is active!&quot;)# update any available attributeuser.update(is_superuser=True)# delete an objectuser.delete()# create an objectnew_user = User.create(    using=metabase,    first_name=&quot;&lt;first_name&gt;&quot;,    last_name=&quot;&lt;last_name&gt;&quot;,    email=&quot;&lt;email&gt;&quot;,    password=&quot;&lt;password&gt;&quot;)```The methods `.list()`, `.get()`, `.create()`, `.update()`, `.delete()` are available on allendpoints that support them in Metabase API.Some endpoints also support additional methods:```pythonfrom metabase import Useruser = User.get(1, using=metabase)user.reactivate()   # Reactivate useruser.send_invite()  # Resend the user invite email for a given user.```Here's a slightly more advanced example:```pythonfrom metabase import User, PermissionGroup, PermissionMembership# create a new PermissionGroupmy_group = PermissionGroup.create(name=&quot;My Group&quot;, using=metabase)for user in User.list():    # add all users to my_group    PermissionMembership.create(        group_id=my_group.id,        user_id=user.id,        using=metabase,    )```### Querying &amp; MBQLYou can also execute queries and get results back as a Pandas DataFrame. You can provide the exact MBQL, or usethe `Query` object to compile MBQL (i.e. Metabase Query Language) from Python classes included in this package.```pythonfrom metabase import Dataset, Query, Count, GroupBy, TemporalOptiondataset = Dataset.create(    database=1,    type=&quot;query&quot;,    query={        &quot;source-table&quot;: 1,        &quot;aggregation&quot;: [[&quot;count&quot;]],        &quot;breakout&quot;: [&quot;field&quot;, 7, {&quot;temporal-unit&quot;: &quot;year&quot;},],    },    using=metabase,)# compile the MBQL above using the Query objectdataset = Dataset.create(    database=1,    type=&quot;query&quot;,    query=Query(        table_id=2,        aggregations=[Count()],        group_by=[GroupBy(id=7, option=TemporalOption.YEAR)]    ).compile(),    using=metabase)df = dataset.to_pandas()```As shown above, the `Query` object allows you to easily compile MBQL from Python objects. Here is amore complete example:```pythonfrom metabase import Query, Sum, Average, Metric, Greater, GroupBy, BinOption, TemporalOptionquery = Query(    table_id=5,    aggregations=[        Sum(id=5),                                  # Provide the ID for the Metabase field        Average(id=5, name=&quot;Average of Price&quot;),     # Optionally, you can provide a name        Metric.get(5)                               # You can also provide your Metabase Metrics    ],    filters=[        Greater(id=1, value=5.5)                    # Filter for values of FieldID 1 greater than 5.5    ],    group_by=[        GroupBy(id=4),                              # Group by FieldID 4        GroupBy(id=5, option=BinOption.AUTO),       # You can use Metabase's binning feature for numeric fields        GroupBy(id=5, option=TemporalOption.YEAR)   # Or it's temporal option for date fields    ])print(query.compile()){    'source-table': 5,    'aggregation': [        ['sum', ['field', 5, None]],        ['aggregation-options', ['avg', ['field', 5, None]], {'name': 'Average of Price', 'display-name': 'Average of Price'}],        [&quot;metric&quot;, 5]    ],    'breakout': [        ['field', 4, None],        ['field', 5, {'binning': {'strategy': 'default'}}],        ['field', 5, {'temporal-unit': 'year'}]    ],    'filter': ['&gt;', ['field', 1, None], 5.5]}```This can also be used to more easily create `Metric` objects.```pythonfrom metabase import Metric, Query, Count, EndsWith, CaseOptionmetric = Metric.create(    name=&quot;Gmail Users&quot;,    description=&quot;Number of users with a @gmail.com email address.&quot;,    table_id=2,    definition=Query(        table_id=1,        aggregations=[Count()],        filters=[EndsWith(id=4, value=&quot;@gmail.com&quot;, option=CaseOption.CASE_INSENSITIVE)]    ).compile(),    using=metabase)```## EndpointsFor a full list of endpoints and methods, see [Metabase API](https://www.metabase.com/docs/latest/api-documentation.html).| Endpoints             | Support    | Notes ||-----------------------|:----------:|-------|| Activity              |  ❌        |       || Alert                 |  ❌        |       || Automagic dashboards  |  ❌        |       || Card                  |  ✅        |       || Collection            |  ❌        |       || Dashboard             |  ❌        |       || Database              |  ✅        |       || Dataset               |  ✅        |       || Email                 |  ❌        |       || Embed                 |  ❌        |       || Field                 |  ✅        |       || Geojson               |  ❌        |       || Ldap                  |  ❌        |       || Login history         |  ❌        |       || Metric                |  ✅        |       || Native query snippet  |  ❌        |       || Notify                |  ❌        |       || Permissions           |  ✅        |       || Premium features      |  ❌        |       || Preview embed         |  ❌        |       || Public                |  ❌        |       || Pulse                 |  ❌        |       || Revision              |  ❌        |       || Search                |  ❌        |       || Segment               |  ✅        |       || Session               |  ❌        |       || Setting               |  ❌        |       || Setup                 |  ❌        |       || Slack                 |  ❌        |       || Table                 |  ✅        |       || Task                  |  ❌        |       || Tiles                 |  ❌        |       || Transform             |  ❌        |       || User                  |  ✅        |       || Util                  |  ❌        |       |## ContributingContributions are welcome!## LicenseThis library is distributed under the MIT license.</longdescription>
</pkgmetadata>