<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Gitlabracadabra &lt;!-- omit in toc --&gt;ðŸ§¹ GitLabracadabra ðŸ§™:alembic: Adds some magic to GitLab :crystal\_ball:GitLab'racadabra is a GitOps way to configure a [GitLab](https://gitlab.com/) instancefrom a YAML configuration, using the [API](https://docs.gitlab.com/ce/api/README.html).It is able to create GitLab's [groups](doc/group.md), [projects](doc/project.md),[users](doc/user.md) and [application settings](doc/application_settings.md).:thumbsup: It's also able to mirror :- Git repositories, using the `mirrors` parameter in [Mirroring repositories](doc/project.md#mirroring-repositories).- container (Docker) images, using the `image_mirrors` parameter. See [Mirroring container images](doc/image_mirrors.md).- packages, using the `package_mirrors` parameter. See [Mirroring packages](doc/package_mirrors.md).It is based on [Python GitLab](https://github.com/python-gitlab/python-gitlab).## Table of Contents &lt;!-- omit in toc --&gt;- [Installation](#installation)  - [Using Debian packages](#using-debian-packages)  - [Using pip](#using-pip)  - [Using docker image](#using-docker-image)  - [From source](#from-source)- [Configuration](#configuration)- [Action file(s)](#action-files)- [Using gitlabracadabra in GitLab CI](#using-gitlabracadabra-in-gitlab-ci)- [Contributing](#contributing)## Installation### Using Debian packagesDebian package is available [from artifacts](https://gitlab.com/gitlabracadabra/gitlabracadabra/-/jobs/artifacts/main/browse/debian/output?job=build-deb) and can be installed with:```shellapt install gitlabracadabra_*.debgitlabracadabra --verbose --dry-run```Note: Debian 10 buster or later is required.### Using pip```shellpip install gitlabracadabra```### Using docker imageThere are also [Docker/OCI images](https://gitlab.com/gitlabracadabra/gitlabracadabra/container_registry).Example usage:```shellsudo docker run -ti \  -v &quot;$HOME/.python-gitlab.cfg:/home/gitlabracadabra/.python-gitlab.cfg:ro&quot; \  -v &quot;$PWD/gitlabracadabra.yml:/app/gitlabracadabra.yml:ro&quot; \  'registry.gitlab.com/gitlabracadabra/gitlabracadabra:v1.12.0' \  --verbose --dry-run```Other images are available. Examples:- `registry.gitlab.com/gitlabracadabra/gitlabracadabra/main`: Current `main`- `registry.gitlab.com/gitlabracadabra/gitlabracadabra/main:b1cd3482bf9583c5db863c359e12cafcdb7119bf`: A specific commit of `main`### From sourceLocal installation (in `$HOME/.local`):```shell# On Debian &gt;= 10 (buster) or Ubuntu &gt;= 19.04sudo apt install python3-jsonschema python3-gitlab python3-yaml python3-pygit2 python3-coverage python3-vcr python3-pytest# On otherspip install -r requirements.txt# Build, install and testpython3 setup.py buildpython3 setup.py install --userpytest-3  # or pytest~/.local/bin/gitlabracadabra --verbose --dry-run```## ConfigurationGitLabracadabra uses the same configuration file as Python GitLab CLI to storeconnection parameters.Example `~/.python-gitlab.cfg`:```ini[global]default = gitlab[gitlab]url = https://gitlab.comprivate_token = T0K3N```More information in [Python GitLab documentation](https://python-gitlab.readthedocs.io/en/stable/cli-usage.html#content).## Action file(s)GitLabracadabra *actions* are configured with a YAML file.See [GitLabracadabra's own action file](https://gitlab.com/gitlabracadabra/gitlabracadabra/blob/main/gitlabracadabra.yml)or read:- [Action file syntax](doc/action_file.md)- list of parameters:  - [for projects](doc/project.md)  - [for groups](doc/group.md)  - [for users](doc/user.md)  - [for application settings](doc/application_settings.md)## Using gitlabracadabra in GitLab CISince job token probably won't have enough permissions, you'll need to use a personal access token:- [create a personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token)- [Define](https://docs.gitlab.com/ee/ci/variables/README.html#create-a-custom-variable-in-the-ui) the`GITLAB_PRIVATE_TOKEN` **protected** variable- Use it in your jobs to configure `python-gitlab`. Example `.gitlab-ci.yml`:```yamldefault:  image:    name: 'registry.gitlab.com/gitlabracadabra/gitlabracadabra:v1.12.0'    entrypoint: [&quot;&quot;]  before_script:    - |        cat &lt;&lt; EOF &gt; ~/.python-gitlab.cfg        [global]        default = gitlab        [gitlab]        url = ${CI_SERVER_URL:-https://gitlab.com}        private_token = ${GITLAB_PRIVATE_TOKEN}        # job_token = ${GITLAB_JOB_TOKEN}        EOFstages:  - test  - deploytest:  stage: test  script:    - gitlabracadabra --verbose --dry-run  rules:    - if: '$CI_COMMIT_BRANCH != &quot;main&quot;'apply:  stage: deploy  script:    - gitlabracadabra --verbose  rules:    - if: '$CI_COMMIT_BRANCH == &quot;main&quot;'```## Contributing- File bugs and feature requests in  [GitLab issues](https://gitlab.com/gitlabracadabra/gitlabracadabra/-/issues).  Security issues should be marked as **confidential**.- Propose documentation or code improvements in  [GitLab merge requests](https://gitlab.com/gitlabracadabra/gitlabracadabra/-/merge_requests).  This repository enforces commit message convention, to check this locally install the  [commitlint](https://github.com/conventional-changelog/commitlint/#what-is-commitlint)  hook:  ```shell  npm install  @commitlint/{config-conventional,cli}  echo 'npx commitlint --edit' &gt;&gt; .git/hooks/commit-msg  chmod +x .git/hooks/commit-msg  ```See also:- Setting up [a development environment](doc/dev_setup.md)- [Configuring VS code](doc/vscode.md)- [Releasing GitLabracadabra](doc/release.md).</longdescription>
</pkgmetadata>