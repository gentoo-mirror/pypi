<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>hypothesis_geometry===================[![](https://github.com/lycantropos/hypothesis_geometry/workflows/CI/badge.svg)](https://github.com/lycantropos/hypothesis_geometry/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://readthedocs.org/projects/hypothesis_geometry/badge/?version=latest)](https://hypothesis-geometry.readthedocs.io/en/latest &quot;Documentation&quot;)[![](https://codecov.io/gh/lycantropos/hypothesis_geometry/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/hypothesis_geometry &quot;Codecov&quot;)[![](https://img.shields.io/github/license/lycantropos/hypothesis_geometry.svg)](https://github.com/lycantropos/hypothesis_geometry/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/hypothesis-geometry.svg)](https://badge.fury.io/py/hypothesis-geometry &quot;PyPI&quot;)In what follows `python` is an alias for `python3.6` or `pypy3.6`or any later version (`python3.7`, `pypy3.7` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade hypothesis_geometry```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/hypothesis_geometry.gitcd hypothesis_geometry```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage-----With setup```python&gt;&gt;&gt; from ground.base import get_context&gt;&gt;&gt; from hypothesis import strategies&gt;&gt;&gt; from hypothesis_geometry import planar&gt;&gt;&gt; context = get_context()&gt;&gt;&gt; Contour = context.contour_cls&gt;&gt;&gt; Empty = context.empty_cls&gt;&gt;&gt; Mix = context.mix_cls&gt;&gt;&gt; Multipoint = context.multipoint_cls&gt;&gt;&gt; Multipolygon = context.multipolygon_cls&gt;&gt;&gt; Multisegment = context.multisegment_cls&gt;&gt;&gt; Point = context.point_cls&gt;&gt;&gt; Polygon = context.polygon_cls&gt;&gt;&gt; Segment = context.segment_cls&gt;&gt;&gt; min_coordinate, max_coordinate = -100, 100&gt;&gt;&gt; coordinates_type = int&gt;&gt;&gt; coordinates = strategies.integers(min_coordinate, max_coordinate)&gt;&gt;&gt; import warnings&gt;&gt;&gt; from hypothesis.errors import NonInteractiveExampleWarning&gt;&gt;&gt; # ignore hypothesis warnings caused by `example` method call... warnings.filterwarnings('ignore', category=NonInteractiveExampleWarning)```let's take a look at what can be generated and how.### Empty geometries```python&gt;&gt;&gt; empty_geometries = planar.empty_geometries()&gt;&gt;&gt; empty = empty_geometries.example()&gt;&gt;&gt; isinstance(empty, Empty)True```### Points```python&gt;&gt;&gt; points = planar.points(coordinates)&gt;&gt;&gt; point = points.example()&gt;&gt;&gt; isinstance(point, Point)True&gt;&gt;&gt; (isinstance(point.x, coordinates_type)...  and isinstance(point.y, coordinates_type))True&gt;&gt;&gt; (min_coordinate &lt;= point.x &lt;= max_coordinate...  and min_coordinate &lt;= point.y &lt;= max_coordinate)True```### Multipoints```python&gt;&gt;&gt; min_size, max_size = 5, 10&gt;&gt;&gt; multipoints = planar.multipoints(coordinates,...                                  min_size=min_size,...                                  max_size=max_size)&gt;&gt;&gt; multipoint = multipoints.example()&gt;&gt;&gt; isinstance(multipoint, Multipoint)True&gt;&gt;&gt; min_size &lt;= len(multipoint.points) &lt;= max_sizeTrue&gt;&gt;&gt; all(isinstance(point.x, coordinates_type)...     and isinstance(point.y, coordinates_type)...     for point in multipoint.points)True&gt;&gt;&gt; all(min_coordinate &lt;= point.x &lt;= max_coordinate...     and min_coordinate &lt;= point.y &lt;= max_coordinate...     for point in multipoint.points)True```### Segments```python&gt;&gt;&gt; segments = planar.segments(coordinates)&gt;&gt;&gt; segment = segments.example()&gt;&gt;&gt; isinstance(segment, Segment)True&gt;&gt;&gt; (isinstance(segment.start.x, coordinates_type)...  and isinstance(segment.start.y, coordinates_type)...  and isinstance(segment.end.x, coordinates_type)...  and isinstance(segment.end.y, coordinates_type))True&gt;&gt;&gt; (min_coordinate &lt;= segment.start.x &lt;= max_coordinate ...  and min_coordinate &lt;= segment.start.y &lt;= max_coordinate...  and min_coordinate &lt;= segment.end.x &lt;= max_coordinate ...  and min_coordinate &lt;= segment.end.y &lt;= max_coordinate)True```### Multisegments```python&gt;&gt;&gt; min_size, max_size = 5, 10&gt;&gt;&gt; multisegments = planar.multisegments(coordinates, ...                                      min_size=min_size,...                                      max_size=max_size)&gt;&gt;&gt; multisegment = multisegments.example()&gt;&gt;&gt; isinstance(multisegment, Multisegment)True&gt;&gt;&gt; min_size &lt;= len(multisegment.segments) &lt;= max_sizeTrue&gt;&gt;&gt; all(isinstance(segment.start.x, coordinates_type)...     and isinstance(segment.start.y, coordinates_type)...     and isinstance(segment.end.x, coordinates_type)...     and isinstance(segment.end.y, coordinates_type)...     for segment in multisegment.segments)True&gt;&gt;&gt; all(min_coordinate &lt;= segment.start.x &lt;= max_coordinate...     and min_coordinate &lt;= segment.start.y &lt;= max_coordinate...     and min_coordinate &lt;= segment.end.x &lt;= max_coordinate...     and min_coordinate &lt;= segment.end.y &lt;= max_coordinate...     for segment in multisegment.segments)True```### Contours```python&gt;&gt;&gt; min_size, max_size = 5, 10&gt;&gt;&gt; contours = planar.contours(coordinates, ...                            min_size=min_size,...                            max_size=max_size)&gt;&gt;&gt; contour = contours.example()&gt;&gt;&gt; isinstance(contour, Contour)True&gt;&gt;&gt; min_size &lt;= len(contour.vertices) &lt;= max_sizeTrue&gt;&gt;&gt; all(isinstance(vertex.x, coordinates_type)...     and isinstance(vertex.y, coordinates_type)...     for vertex in contour.vertices)True&gt;&gt;&gt; all(min_coordinate &lt;= vertex.x &lt;= max_coordinate...     and min_coordinate &lt;= vertex.y &lt;= max_coordinate...     for vertex in contour.vertices)True```also `planar.concave_contours` &amp; `planar.convex_contours` options are available.### Multicontours```python&gt;&gt;&gt; min_size, max_size = 5, 10&gt;&gt;&gt; min_contour_size, max_contour_size = 4, 8&gt;&gt;&gt; multicontours = planar.multicontours(coordinates, ...                                      min_size=min_size,...                                      max_size=max_size,...                                      min_contour_size=min_contour_size,...                                      max_contour_size=max_contour_size)&gt;&gt;&gt; multicontour = multicontours.example()&gt;&gt;&gt; isinstance(multicontour, list)True&gt;&gt;&gt; all(isinstance(contour, Contour) for contour in multicontour)True&gt;&gt;&gt; min_size &lt;= len(multicontour) &lt;= max_sizeTrue&gt;&gt;&gt; all(min_contour_size &lt;= len(contour.vertices) &lt;= max_contour_size...     for contour in multicontour)True&gt;&gt;&gt; all(isinstance(vertex.x, coordinates_type)...     and isinstance(vertex.y, coordinates_type)...     for contour in multicontour...     for vertex in contour.vertices)True&gt;&gt;&gt; all(min_coordinate &lt;= vertex.x &lt;= max_coordinate...     and min_coordinate &lt;= vertex.y &lt;= max_coordinate...     for contour in multicontour...     for vertex in contour.vertices)True```### Polygons```python&gt;&gt;&gt; min_size, max_size = 5, 10&gt;&gt;&gt; min_holes_size, max_holes_size = 1, 3&gt;&gt;&gt; min_hole_size, max_hole_size = 4, 8&gt;&gt;&gt; polygons = planar.polygons(coordinates, ...                            min_size=min_size,...                            max_size=max_size,...                            min_holes_size=min_holes_size,...                            max_holes_size=max_holes_size,...                            min_hole_size=min_hole_size,...                            max_hole_size=max_hole_size)&gt;&gt;&gt; polygon = polygons.example()&gt;&gt;&gt; isinstance(polygon, Polygon)True&gt;&gt;&gt; min_size &lt;= len(polygon.border.vertices) &lt;= max_sizeTrue&gt;&gt;&gt; min_holes_size &lt;= len(polygon.holes) &lt;= max_holes_sizeTrue&gt;&gt;&gt; all(min_hole_size &lt;= len(hole.vertices) &lt;= max_hole_size for hole in polygon.holes)True&gt;&gt;&gt; polygon_contours = [polygon.border, *polygon.holes]&gt;&gt;&gt; all(isinstance(vertex.x, coordinates_type)...     and isinstance(vertex.y, coordinates_type)...     for contour in polygon_contours...     for vertex in contour.vertices)True&gt;&gt;&gt; all(min_coordinate &lt;= vertex.x &lt;= max_coordinate...     and min_coordinate &lt;= vertex.y &lt;= max_coordinate...     for contour in polygon_contours...     for vertex in contour.vertices)True```### Multipolygons```python&gt;&gt;&gt; min_size, max_size = 2, 5&gt;&gt;&gt; min_border_size, max_border_size = 5, 10&gt;&gt;&gt; min_holes_size, max_holes_size = 1, 3&gt;&gt;&gt; min_hole_size, max_hole_size = 4, 8&gt;&gt;&gt; multipolygons = planar.multipolygons(coordinates, ...                                      min_size=min_size,...                                      max_size=max_size,...                                      min_border_size=min_border_size,...                                      max_border_size=max_border_size,...                                      min_holes_size=min_holes_size,...                                      max_holes_size=max_holes_size,...                                      min_hole_size=min_hole_size,...                                      max_hole_size=max_hole_size)&gt;&gt;&gt; multipolygon = multipolygons.example()&gt;&gt;&gt; isinstance(multipolygon, Multipolygon)True&gt;&gt;&gt; min_size &lt;= len(multipolygon.polygons) &lt;= max_sizeTrue&gt;&gt;&gt; all(min_border_size &lt;= len(polygon.border.vertices) &lt;= max_border_size...     and min_holes_size &lt;= len(polygon.holes) &lt;= max_holes_size...     and all(min_hole_size &lt;= len(hole.vertices) &lt;= max_hole_size...             for hole in polygon.holes)...     for polygon in multipolygon.polygons)True&gt;&gt;&gt; all(all(isinstance(vertex.x, coordinates_type)...         and isinstance(vertex.y, coordinates_type)...         for vertex in polygon.border.vertices)...     and all(isinstance(vertex.x, coordinates_type)...             and isinstance(vertex.y, coordinates_type)...             for hole in polygon.holes...             for vertex in hole.vertices)...     for polygon in multipolygon.polygons)True&gt;&gt;&gt; all(all(min_coordinate &lt;= vertex.x &lt;= max_coordinate...         and min_coordinate &lt;= vertex.y &lt;= max_coordinate...         for vertex in polygon.border.vertices)...     and all(min_coordinate &lt;= vertex.x &lt;= max_coordinate...             and min_coordinate &lt;= vertex.y &lt;= max_coordinate...             for hole in polygon.holes...             for vertex in hole.vertices)...     for polygon in multipolygon.polygons)True```### Mixes```python&gt;&gt;&gt; min_points_size, max_points_size = 2, 3&gt;&gt;&gt; min_segments_size, max_segments_size = 1, 4&gt;&gt;&gt; min_polygons_size, max_polygons_size = 0, 5&gt;&gt;&gt; min_polygon_border_size, max_polygon_border_size = 5, 10&gt;&gt;&gt; min_polygon_holes_size, max_polygon_holes_size = 1, 4&gt;&gt;&gt; min_polygon_hole_size, max_polygon_hole_size = 3, 5&gt;&gt;&gt; mixes = planar.mixes(coordinates,...                      min_points_size=min_points_size,...                      max_points_size=max_points_size,...                      min_segments_size=min_segments_size,...                      max_segments_size=max_segments_size,...                      min_polygons_size=min_polygons_size,...                      max_polygons_size=max_polygons_size,...                      min_polygon_border_size=min_polygon_border_size,...                      max_polygon_border_size=max_polygon_border_size,...                      min_polygon_holes_size=min_polygon_holes_size,...                      max_polygon_holes_size=max_polygon_holes_size,...                      min_polygon_hole_size=min_polygon_hole_size,...                      max_polygon_hole_size=max_polygon_hole_size)&gt;&gt;&gt; mix = mixes.example()&gt;&gt;&gt; isinstance(mix, Mix)True&gt;&gt;&gt; isinstance(mix.discrete, (Empty, Multipoint))True&gt;&gt;&gt; points = [] if isinstance(mix.discrete, Empty) else mix.discrete.points&gt;&gt;&gt; min_points_size &lt;= len(points) &lt;= max_points_sizeTrue&gt;&gt;&gt; all(isinstance(point.x, coordinates_type)...     and isinstance(point.y, coordinates_type)...     for point in points)True&gt;&gt;&gt; all(min_coordinate &lt;= point.x &lt;= max_coordinate...     and min_coordinate &lt;= point.y &lt;= max_coordinate...     for point in points)True&gt;&gt;&gt; isinstance(mix.linear, (Empty, Segment, Contour, Multisegment))True&gt;&gt;&gt; segments = ([]...             if isinstance(mix.linear, Empty)...             else ([mix.linear]...                   if isinstance(mix.linear, Segment)...                   else (mix.linear.segments...                         if isinstance(mix.linear, Multisegment)...                         else context.contour_edges(mix.linear))))&gt;&gt;&gt; min_segments_size &lt;= len(segments) &lt;= max_segments_sizeTrue&gt;&gt;&gt; all(isinstance(segment.start.x, coordinates_type)...     and isinstance(segment.start.y, coordinates_type)...     and isinstance(segment.end.x, coordinates_type)...     and isinstance(segment.end.y, coordinates_type)...     for segment in segments)True&gt;&gt;&gt; all(min_coordinate &lt;= segment.start.x &lt;= max_coordinate...     and min_coordinate &lt;= segment.start.y &lt;= max_coordinate...     and min_coordinate &lt;= segment.end.x &lt;= max_coordinate...     and min_coordinate &lt;= segment.end.y &lt;= max_coordinate...     for segment in segments)True&gt;&gt;&gt; isinstance(mix.shaped, (Empty, Polygon, Multipolygon))True&gt;&gt;&gt; polygons = ([]...             if isinstance(mix.shaped, Empty)...             else ([mix.shaped]...                   if isinstance(mix.shaped, Polygon)...                   else mix.shaped.polygons))&gt;&gt;&gt; min_polygons_size &lt;= len(polygons) &lt;= max_polygons_sizeTrue&gt;&gt;&gt; all(min_polygon_border_size...     &lt;= len(polygon.border.vertices)...     &lt;= max_polygon_border_size...     and (min_polygon_holes_size...          &lt;= len(polygon.holes)...          &lt;= max_polygon_holes_size)...     and all(min_polygon_hole_size...             &lt;= len(hole.vertices)...             &lt;= max_polygon_hole_size...             for hole in polygon.holes)...     for polygon in polygons)True&gt;&gt;&gt; all(all(isinstance(vertex.x, coordinates_type)...         and isinstance(vertex.y, coordinates_type)...         for vertex in polygon.border.vertices)...     and all(isinstance(vertex.x, coordinates_type)...             and isinstance(vertex.y, coordinates_type)...             for hole in polygon.holes...             for vertex in hole.vertices)...     for polygon in polygons)True&gt;&gt;&gt; all(all(min_coordinate &lt;= vertex.x &lt;= max_coordinate...         and min_coordinate &lt;= vertex.y &lt;= max_coordinate...         for vertex in polygon.border.vertices)...     and all(min_coordinate &lt;= vertex.x &lt;= max_coordinate...             and min_coordinate &lt;= vertex.y &lt;= max_coordinate...             for hole in polygon.holes...             for vertex in hole.vertices)...     for polygon in polygons)True```#### Caveats- Strategies may be slow depending on domain,so it may be necessary to add `HealthCheck.filter_too_much`, `HealthCheck.too_slow`in [`suppress_health_check`](https://hypothesis.readthedocs.io/en/latest/settings.html#hypothesis.settings.suppress_health_check) and set [`deadline`](https://hypothesis.readthedocs.io/en/latest/settings.html#hypothesis.settings.deadline) to `None`.- Unbounded floating point strategies for coordinates (like [`hypothesis.strategies.floats`](https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.floats)with unset `min_value`/`max_value`) do not play well with bounded sizes and may cause a lot of searching iterations with no success,so it is recommended to use bounded floating point coordinates with bounded sizesor unbounded coordinates with unbounded sizes.- [`decimal.Decimal`](https://docs.python.org/library/decimal.html) coordinates are not supported, because they seem to be too hard to work with correctly (e.g. sometimes self-intersecting contours arise), so it is suggested to use `float`  or [`fractions.Fraction`](https://docs.python.org/library/fractions.html) instead.Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script:- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script:- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>