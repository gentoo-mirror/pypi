<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pg-data-etl[![PyPI](https://img.shields.io/pypi/v/pg-data-etl?style=for-the-badge)](https://pypi.org/project/pg-data-etl/)ETL tools for spatial data stored in postgres.## AboutThis module exists to make life easier when working with geospatial data in a Postgres database.You should have the following command-line tools installed, preferably on your system path:- `psql`- `pg_dump`- `shp2postgis`- `ogr2ogr`If you want to use the optional vector tile functions you'll also need:- `tippecanoe`## Installation`pip install pg_data_etl`## ExampleThe following code blocks import spatial data into Postgres and runs a spatial query:### 1) Connect to the database and create it```python&gt;&gt;&gt; from pg_data_etl import Database&gt;&gt;&gt; credentials = {...     &quot;db_name&quot;: &quot;sample_database&quot;,...     &quot;host&quot;: &quot;localhost&quot;,...     &quot;un&quot;: &quot;username&quot;,...     &quot;pw&quot;: &quot;my-password&quot;,...     &quot;super_un&quot;: &quot;postgres&quot;,...     &quot;super_pw&quot;: &quot;superuser-password&quot;... }&gt;&gt;&gt; db = Database.from_parameters(**credentials)&gt;&gt;&gt; db.admin(&quot;CREATE&quot;)```### 2) Import GIS data from the web```python&gt;&gt;&gt; data_to_import = [...     (&quot;philly.high_injury_network&quot;, &quot;https://phl.carto.com/api/v2/sql?filename=high_injury_network_2020&amp;format=geojson&amp;skipfields=cartodb_id&amp;q=SELECT+*+FROM+high_injury_network_2020&quot;),...     (&quot;philly.playgrounds&quot;, &quot;https://opendata.arcgis.com/datasets/899c807e205244278b3f39421be8489c_0.geojson&quot;)... ]&gt;&gt;&gt; for sql_tablename, source_url in data_to_import:...     kwargs = {...         &quot;filepath&quot;: source_url,...         &quot;sql_tablename&quot;: sql_tablename,...         &quot;gpd_kwargs&quot;: {&quot;if_exists&quot;:&quot;replace&quot;}...     }...     db.import_gis(**kwargs)```### 3) Run a query and get the result as a `geopandas.GeoDataFrame````python&gt;&gt;&gt; # Define a SQL query as a string in Python&gt;&gt;&gt; query = &quot;&quot;&quot;... select * from philly.high_injury_network... where st_dwithin(...     st_transform(geom, 26918),...     (select st_transform(st_collect(geom), 26918) from philly.playgrounds),...     100... )... order by st_length(geom) DESC &quot;&quot;&quot;&gt;&gt;&gt; # Get a geodataframe from the db using the query&gt;&gt;&gt; gdf = db.gdf(query)&gt;&gt;&gt; gdf.head()   index  objectid            street_name   buffer                                               geom  uid0    234       189          BUSTLETON AVE  75 feet  LINESTRING (-75.07081 40.03528, -75.07052 40.0...  2361     65        38                 5TH ST  50 feet  LINESTRING (-75.14528 39.96913, -75.14502 39.9...   662    223       179           ARAMINGO AVE  75 feet  LINESTRING (-75.12212 39.97449, -75.12132 39.9...  2243    148       215               KELLY DR  75 feet  LINESTRING (-75.18470 39.96934, -75.18513 39.9...  1504    156       224  MARTIN LUTHER KING DR  75 feet  LINESTRING (-75.17713 39.96327, -75.17775 39.9...  159```To save time and typing, database credentials can be stored in a text file. You can place this file wherever you want,but by default it's placed into `/USERHOME/.pg-data-etl/database_connections.cfg`.To generate one for the first time, run the following from a terminal prompt:```shell&gt; pg make-config-file```This file uses the following format:```[DEFAULT]pw = this-is-a-placeholder-passwordport = 5432super_db = postgressuper_un = postgressuper_pw = this-is-another-placeholder-password[localhost]host = localhostun = postgrespw = your-password-here```Each entry in square brackets is a named connection, and any parameters not explicitly defined are inherited from `DEFAULT`.You can have as many connections defined as you'd like, and you can use them like this:```python&gt;&gt;&gt; from pg_data_etl import Database&gt;&gt;&gt; db = Database.from_config(&quot;sample_database&quot;, &quot;localhost&quot;)```## DevelopmentClone or fork this repo:```bashgit clone https://github.com/aaronfraint/pg-data-etl.gitcd pg-data-etl```Install an editable version with `poetry`:```bashpoetry install```Windows users who prefer to use `conda` can use the included `environment.yml` file:```bashconda env create -f environment.yml```</longdescription>
</pkgmetadata>