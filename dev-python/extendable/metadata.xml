<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI](https://github.com/lmignon/extendable/actions/workflows/ci.yml/badge.svg)](https://github.com/lmignon/extendable/actions/workflows/ci.yml)[![codecov](https://codecov.io/gh/lmignon/extendable/branch/master/graph/badge.svg?token=LXD34T420H)](https://codecov.io/gh/lmignon/extendable)# Extendable## AboutExtendable is a module that aims to provide a way to define extensible pythonclasses. This module was born out of the need to find a way to allow thedefinition of modules whose behaviour can be extended by other modules byextending the initial definition of classes at runtime.## Quick startLet's define a first python class.```pythonfrom extendable import ExtendableMetaclass Person(metaclass=ExtendableMeta):    def __init__(self, name: str):        self.name = name    def __repr__(self) -&gt; str:        return self.name```Someone using the module where the class is defined would need to extend theperson definition with a firstname field.```pythonfrom extendable import ExtendableMetaclass PersonExt(Person, extends=Person):    def __init__(self, name: str):        super().__init__(name)        self._firstname = None    @property    def firstname(self) -&gt; str:        return self._firstname    @firstname.setter    def firstname(self, value:str) -&gt; None:        self._firstname = value    def __repr__(self) -&gt; str:        res = super().__repr__()        return f&quot;{res}, {self.firstname or ''}&quot;```At this time we have defined that `PersonExt` extends the initial definitionof `Person`. To finalyse the process, we need to instruct the runtime thatall our class declarations are done by building the final class definitions andmaking it available into the current execution context.```pythonfrom extendable import context, registry_registry = registry.ExtendableClassesRegistry()context.extendable_registry.set(_registry)_registry.init_registry()```Once it's done the `Person` and `PersonExt` classes can be used interchangeablyinto your code since both represent the same class...```pythonp = Person(&quot;Mignon&quot;)p.firstname = &quot;Laurent&quot;print (p)#&gt; Mignon, Laurent```&gt; :warning: This way of extending a predefined behaviour must be used carefully and in&gt; accordance with the [Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle)&gt; It doesn't replace others design patterns that can be used to make your code pluggable.## DevelopmentTo run tests, use `tox`. You will get a test coverage report in `htmlcov/index.html`.An easy way to install tox is `pipx install tox`.This project uses pre-commit to enforce linting (among which black for code formating,isort for sorting imports, and mypy for type checking).To make sure linters run locally on each of your commits, install pre-commit(`pipx install pre-commit` is recommended), and run `pre-commit install` in yourlocal clone of the extendable repository.To release: * run ``bumpversion patch|minor|major` --list` * Check the `new_version` value returned by the previous command * run `towncrier build`. * Inspect and commit the updated HISTORY.rst. * `git tag {new_version} ; git push --tags`.## ContributingAll kind of contributions are welcome.</longdescription>
</pkgmetadata>