<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytest-watch – Continuous pytest runner=======================================`Current version on PyPI &lt;http://pypi.python.org/pypi/pytest-watch/&gt;`__`Say Thanks! &lt;https://saythanks.io/to/joeyespo&gt;`__**pytest-watch** a zero-config CLI tool that runs`pytest &lt;http://pytest.org/&gt;`__, and re-runs it when a file in yourproject changes. It beeps on failures and can run arbitrary commands oneach passing and failing test run.Motivation----------Whether or not you use the test-driven development method, running testscontinuously is far more productive than waiting until you’re finishedprogramming to test your code. Additionally, manually running``py.test`` each time you want to see if any tests were broken has morewait-time and cognitive overhead than merely listening for anotification. This could be a crucial difference when debugging acomplex problem or on a tight deadline.Installation------------.. code:: bash   $ pip install pytest-watchUsage-----.. code:: bash   $ cd myproject   $ ptw    * Watching /path/to/myproject*Note: It can also be run using its full name ``pytest-watch``.*Now develop normally and check the terminal every now and then to see ifany tests are broken. Alternatively, pytest-watch can **notify you**when tests pass or fail:-  **OSX**   ``$ ptw --onpass &quot;say passed&quot; --onfail &quot;say failed&quot;``   .. code:: bash      $ ptw --onpass &quot;growlnotify -m \&quot;All tests passed!\&quot;&quot; \            --onfail &quot;growlnotify -m \&quot;Tests failed\&quot;&quot;   using `GrowlNotify &lt;http://growl.info/downloads#generaldownloads&gt;`__.-  **Windows**   .. code:: bat      &gt; ptw --onfail flash   using `Console Flash &lt;http://github.com/joeyespo/console-flash&gt;`__You can also run a command before the tests run, e.g. seeding your testdatabase:.. code:: bash   $ ptw --beforerun init_db.pyOr after they finish, e.g. deleting a sqlite file. Note that this scriptreceives the exit code of ``py.test`` as an argument... code:: bash   $ ptw --afterrun cleanup_db.pyYou can also use a custom runner script for full ``py.test`` control:.. code:: bash   $ ptw --runner &quot;python custom_pytest_runner.py&quot;Here’s an minimal runner script that runs ``py.test`` and prints itsexit code:.. code:: py   # custom_pytest_runner.py   import sys   import pytest   print('py.test exited with code:', pytest.main(sys.argv[1:]))Need to exclude directories from being observed or collected for tests?.. code:: bash   $ ptw --ignore ./deep-directory --ignore ./integration_testsSee the full list of options:::   $ ptw --help   Usage: ptw [options] [--ignore &lt;dir&gt;...] [&lt;directory&gt;...] [-- &lt;pytest-args&gt;...]   Options:     --ignore &lt;dir&gt;        Ignore directory from being watched and during                           collection (multi-allowed).     --ext &lt;exts&gt;          Comma-separated list of file extensions that can                           trigger a new test run when changed (default: .py).                           Use --ext=* to allow any file (including .pyc).     --config &lt;file&gt;       Load configuration from `file` instead of trying to                           locate one of the implicit configuration files.     -c --clear            Clear the screen before each run.     -n --nobeep           Do not beep on failure.     -w --wait             Waits for all tests to complete before re-running.                           Otherwise, tests are interrupted on filesystem events.     --beforerun &lt;cmd&gt;     Run arbitrary command before tests are run.     --afterrun &lt;cmd&gt;      Run arbitrary command on completion or interruption.                           The exit code of &quot;py.test&quot; is passed as an argument.     --onpass &lt;cmd&gt;        Run arbitrary command on pass.     --onfail &lt;cmd&gt;        Run arbitrary command on failure.     --onexit &lt;cmd&gt;        Run arbitrary command when exiting pytest-watch.     --runner &lt;cmd&gt;        Run a custom command instead of &quot;py.test&quot;.     --pdb                 Start the interactive Python debugger on errors.                           This also enables --wait to prevent pdb interruption.     --spool &lt;delay&gt;       Re-run after a delay (in milliseconds), allowing for                           more file system events to queue up (default: 200 ms).     -p --poll             Use polling instead of OS events (useful in VMs).     -v --verbose          Increase verbosity of the output.     -q --quiet            Decrease verbosity of the output (precedence over -v).     -V --version          Print version and exit.     -h --help             Print help and exit.Configuration-------------CLI options can be added to a ``[pytest-watch]`` section in your`pytest.ini file &lt;https://pytest.org/latest/customize.html&gt;`__ topersist them in your project. For example:.. code:: ini   # pytest.ini   [pytest]   addopts = --maxfail=2   [pytest-watch]   ignore = ./integration-tests   nobeep = TrueAlternatives-------------  `xdist &lt;http://pypi.python.org/pypi/pytest-xdist&gt;`__ offers the   ``--looponfail`` (``-f``) option (and distributed testing options).   This instead re-runs only those tests which have failed until you   make them pass. This can be a speed advantage when trying to get all   tests passing, but leaves out the discovery of new failures until   then. It also drops the colors outputted by py.test, whereas   pytest-watch doesn’t.-  `Nosey &lt;http://github.com/joeyespo/nosey&gt;`__ is the original codebase   this was forked from. Nosey runs   `nose &lt;http://nose.readthedocs.org/en/latest/&gt;`__ instead of pytest.Contributing------------1. Check the open issues or open a new issue to start a discussion   around your feature idea or the bug you found2. Fork the repository, make your changes, and add yourself to   `Authors.md &lt;./AUTHORS.md&gt;`__3. Send a pull requestIf you want to edit the README, be sure to make your changes to``README.md`` and run the following to regenerate the ``README.rst``file:.. code:: bash   $ pandoc -t rst -o README.rst README.mdIf your PR has been waiting a while, feel free to `ping me onTwitter &lt;https://twitter.com/joeyespo&gt;`__.Use this software often? :smiley:</longdescription>
</pkgmetadata>