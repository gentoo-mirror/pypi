<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Infinite SetsThis package gives a pythonic way to deal with the universal set and set complements. Here, the universal set representsa set that contains *everything*, whilst the *complement* of a set A is the set of everything that is not in A. Thisallows the expression of concepts such as *everything* or *all but these things* in a consistent way.The universal set may be obtained using the `everything()` function. Everything is in the universal set:```pythonfrom infinite_sets import everything4 in everything()  # true&quot;abc&quot; in everything()  # true```The complement of a set is can be created using the `complement()` function:```pythonfrom infinite_sets import complementA = {1, 4}B = complement(A)1 in A  # true1 in B  # false7 in A  # false7 in B  # true```Both the universal set and the set complement of a set A are *infinite sets*. Whilst you can query if a given object isin them, you can't iterate through them in the same way you could a python set (which represents a *finite set*).These infinite sets support all the set operations that are supported by python sets, namely equality (==), subset (&lt;=),strict subset (&lt;), superset (&gt;=), strict superset (&gt;), intersection (&amp;), union (|), set difference (-) and symmetricdifference (^).They however do not support in place modification, such as (&amp;=). This is because this could change the type of theobject.## ExampleAn example of a use for infinite sets is a function that takes a set of objects, where only certain values would bevalid:```pythonfrom typing import SetVALID_NAMES = {    &quot;chapman&quot;,    &quot;cleese&quot;,    &quot;gilliam&quot;,    &quot;idle&quot;,    &quot;jones&quot;,    &quot;palin&quot;}def my_function(names: Set[str]):    names = names &amp; VALID_NAMES  # filter out invalid names    for name in names:        ...```To call this function on all the valid names, you need to have access to the set of names ahead of time and import itfrom wherever it is:```pythonmy_function(VALID_NAMES)```However, using infinite sets we could change our method to use infinite sets. By intersecting an infinite set with ourlist of predefined possible names, we get the set of names the user intended to give.The user can indicate they mean all valid names:```pythonmy_function(everything())```Or that they want all names except `'cleese'`:```pythonmy_function(complement({'cleese'}))```## TypingFor typing, there is an `InfiniteSet[TItem]` protocol, which defines an infinite set similarly tothe `AbstractSet[TItem]` from `collections.abc`, but without the `__iter__` or `__len__` methods. Therefore, theuniversal set, set complements and all python sets are examples of an `InfiniteSet`.If you have a method which takes an argument annotated with `Set[TItem]`, but you only check for membership of the setand never iterate through it, you can change this annotation to `InfiniteSet[TItem]` to indicate that you could pass aninfinite set such as `everything()` to your method.## Implementation DetailsThe universal set is a singleton - the `everything()` command returns the same object every time. Its `__contains__`function returns true unconditionally.The set complement is an object that internally stores the set of which it is a complement. Its `__contains__` functionreturns true if the given item is not in its internal set.# ChangelogAll notable changes to this project will be documented in this file.The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).## [1.0.2] - 2021-03-30### Added- Add license_file entry to setup.cfg.## [1.0.1] - 2021-03-30### Changed- Switch to package format to allow py.typed and hence typing.## [1.0.0] - 2021-03-30### Added- Initial release of code.- `everything()` method to return the universal set.- `complement(set)` method to get the complement of a set.[1.0.1]: https://gitlab.com/alexjbinnie/infinite-sets/-/tags/v1.0.1[1.0.0]: https://gitlab.com/alexjbinnie/infinite-sets/-/tags/v1.0.0</longdescription>
</pkgmetadata>