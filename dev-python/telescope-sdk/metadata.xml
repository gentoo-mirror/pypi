<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Telescope Python SDKPackage containing Pydantic models representing the entities used in Telescope backend systems. The source of truthfor these types lives [here](https://gotelescope.atlassian.net/wiki/spaces/~62cc5da0bb346bdf82fa14f7/pages/32899073/Data+model+changes+move+to+Person).See [Deployment](#deployment) for instructions on how to publish a new version of this package.## Usage```bash$ pip install telescope-sdk```To construct an entity (e.g. Person) you can use the constructor (please note Pydantic only accepts keyword arguments):```pythonfrom telescope_sdk import Personperson = Person(    id=&quot;123&quot;,    first_name=&quot;John Doe&quot;,    ...    )```Or, to construct from a Python dictionary object:```pythonperson = Person.parse_obj({    &quot;id&quot;: &quot;123&quot;,    &quot;first_name&quot;: &quot;John Doe&quot;,    ...    })```If you are mapping from [PDL](https://docs.peopledatalabs.com/docs/fields) types, use the `from_pdl` method:```pythonperson = Person.from_pdl({    &quot;id&quot;: &quot;123&quot;,    &quot;firstName&quot;: &quot;John Doe&quot;,    ...    })```* Please note that unless a field is set as &quot;Strict&quot;, it will automatically attempt to cast any input,   and only throw an error if casting fails ## DevelopmentTo make changes to this package clone the repo and follow the steps below. Please ensure that any changes to the codebase are synced with the documentation linked above.### InstallationFirst set up a virtual environment to isolate dependencies. You can do this in many ways but as an example:```bash$ pyenv virtualenv 3.10.0 &lt;chosen-virtualenv-name&gt;$ pyenv activate &lt;chosen-virtualenv-name&gt;```Note this codebase takes advantage of features from Python 3.10+ therefore you may run into errors if you attempt to usean earlier Python version.This project relies on Poetry for dependency management. To install Poetry follow the instructions[here](https://python-poetry.org/docs/#installing-with-pipx) (recommend using [pipx](https://pypa.github.io/pipx/) toinstall Poetry globally but manage in virtualenv).Now ensure you have Make on your machine then run```bash$ make install```This will install the package and its dependencies in [editable mode](https://setuptools.pypa.io/en/latest/userguide/development_mode.html).### TestingTo run tests locally, run the following command:```bash$ make test```### LintingTo run linting locally, run the following command:```bash$ make lint```## DeploymentA new package version is published to PyPI whenever a new release is created on GitHub. To create a new release followthe following steps, from the `master` branch:1. Update the version number in `pyproject.toml` to the new version number (use semantic versioning).2. Create a new release on GitHub with the same version number as the one in `pyproject.toml`.3. Draft release notes for the new version. These will be used as the package description on PyPI.4. The new version will be published to [PyPI](https://pypi.org/) automatically.On pushes to the `master` branch, the `sandbox-deploy` job will run and publish a new version of the package to[TestPyPI](https://test.pypi.org/). This is useful for testing changes to the package before publishing to PyPI.</longdescription>
</pkgmetadata>