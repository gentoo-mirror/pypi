<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============webtest-plus============.. image:: https://badge.fury.io/py/webtest-plus.png    :target: http://badge.fury.io/py/webtest-plus.. image:: https://travis-ci.org/sloria/webtest-plus.png?branch=master    :target: https://travis-ci.org/sloria/webtest-plusAn extension of `WebTest &lt;http://webtest.pythonpaste.org/en/latest/&gt;`_  with useful extras, including `requests &lt;http://docs.python-requests.org/en/latest/&gt;`_-style authentication.Install-------.. code-block:: bash    $ pip install -U webtest-plusUsage-----.. code-block:: python    import unittest    from myapp import app    from webtest_plus import TestApp    class TestMyApp(unittest.TestCase):        def setUp(self):            self.app = TestApp(app)        def test_protected_endpoint(self):            response = self.app.get(&quot;/secret/&quot;, expect_errors=True)            assert response.status_code == 401            # Requests-style authentication            response = self.app.get(&quot;/secret/&quot;, auth=(&quot;admin&quot;, &quot;passw0rd&quot;))            assert response.status_code == 200        def test_more_secrets(self):            # Another way to authenticate            self.app.authenticate(username=&quot;admin&quot;, password=&quot;passw0rd&quot;)            assert self.app.get(&quot;/secret/&quot;).status_code == 200            self.app.deauthenticate()            assert self.app.get(&quot;/secret/&quot;, expect_errors=True).status_code == 401        def test_posting_json(self):            # Testing json requests and responses            response = self.app.post_json(&quot;/postsecret/&quot;, {&quot;secret&quot;: &quot;myprecious&quot;},                                            auth=(&quot;admin&quot;, &quot;passw0rd&quot;))            assert response.request.content_type == &quot;application/json&quot;        def test_clicking(self):            response = self.app.get(&quot;/&quot;)            response = response.click(&quot;Protected link&quot;, auth=(&quot;admin&quot;, &quot;passw0rd&quot;))            assert response.status_code == 200        def test_token_auth(self):            response = self.app.get('/secret-requires-token/', expect_errors=True)            assert response.status_code == 401            # Authenticate with JWT            response = self.app.get('/secret-requires-token',                auth='yourlongtokenhere', auth_type='jwt')            assert response.status_code == 200Features--------* Basic HTTP authentication* `JSON Web Token &lt;https://openid.net/specs/draft-jones-json-web-token-07.html&gt;`_ authentication* Auto-follow redirects* Framework-agnosticRequirements------------- Python &gt;= 2.6 or &gt;= 3.3License-------MIT licensed. See the bundled `LICENSE &lt;https://github.com/sloria/webtest-plus/blob/master/LICENSE&gt;`_ file for more details.Changelog---------1.0.0 (2017-05-17)++++++++++++++++++* Fix handling of utf-encoded values when using ``auth`` (#3). Thanks @biern for the catch and patch.* Drop support for Python 2.6.* Test against Python 3.6.0.3.3 (2015-03-17)++++++++++++++++++* Implement ``TestApp.head``.0.3.2 (2014-06-04)++++++++++++++++++* Bug fix that caused an ``UnboundLocalError``.0.3.1 (2014-05-31)++++++++++++++++++* Fix string encoding bug on Python 2.0.3.0 (2014-05-31)++++++++++++++++++* Add support for JSON web token authentication.0.2.1 (2013-11-24)++++++++++++++++++* Add authentication to ``TestResponse.click`` and ``TestResponse.clickbutton``.0.2.0 (2013-10-15)++++++++++++++++++* Add support for JSON methods (e.g. ``app.post_json``, etc.)0.1.0 (2013-10-06)++++++++++++++++++* First release.* HTTP Basic Authentication working.</longdescription>
</pkgmetadata>