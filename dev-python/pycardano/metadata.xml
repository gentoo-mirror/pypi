<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;./.github/logo.png&quot; height=200 width=200 /&gt;&lt;/p&gt;---## PyCardano[![PyPi version](https://badgen.net/pypi/v/pycardano)](https://pypi.python.org/pypi/pycardano/)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pycardano)](https://pypi.python.org/pypi/pycardano/)[![PyPI download month](https://img.shields.io/pypi/dm/pycardano)](https://pypi.python.org/pypi/pycardano/)[![PyCardano](https://github.com/Python-Cardano/pycardano/actions/workflows/main.yml/badge.svg)](https://github.com/Python-Cardano/pycardano/actions/workflows/main.yml)[![codecov](https://codecov.io/gh/Python-Cardano/pycardano/branch/main/graph/badge.svg?token=62N0IL9IMQ)](https://codecov.io/gh/Python-Cardano/pycardano)[![Documentation Status](https://readthedocs.org/projects/pycardano/badge/?version=latest)](https://pycardano.readthedocs.io/en/latest/?badge=latest)[![Discord](https://img.shields.io/discord/949404918903631923.svg?label=chat&amp;logo=discord&amp;logoColor=ffffff&amp;color=7389D8&amp;labelColor=6A7EC2)](https://discord.gg/qT9Mn9xjgz)[![Twitter](https://img.shields.io/twitter/follow/PyCardano?style=social&amp;label=Follow%20%40PyCardano)](https://twitter.com/PyCardano)PyCardano is a Cardano library written in Python. It allows users to create and sign transactions without depending on third-party Cardano serialization tools, such as[cardano-cli](https://github.com/input-output-hk/cardano-node#cardano-cli) and [cardano-serialization-lib](https://github.com/Emurgo/cardano-serialization-lib), making it a lightweight library, which is simple and fast to set up in all types of environments.Current goal of this project is to enable developers to write off-chain code and tests in pure Python for Plutus DApps.Nevertheless, we see the potential in expanding this project to a full Cardano node client, which could be beneficial for faster R&amp;D iterations.### Features- [x] Shelly address- [x] Transaction builder- [x] Transaction signing- [x] Multi-asset- [X] Chain backend integration- [X] Fee calculation- [X] UTxO selection- [X] Native script- [X] Native token- [X] Metadata- [X] Plutus script- [X] Staking certificates- [X] Reward withdraw- [X] Mnemonic - [X] HD Wallet- [ ] Byron Address- [ ] Pool certificate- [ ] Protocol proposal update### InstallationInstall the library using [pip](https://pip.pypa.io/en/stable/):`pip install pycardano`### Documentationhttps://pycardano.readthedocs.io/en/latest/### Examples#### Full stack DAppA full stack testnet DApp is hosted on replit: https://pycardano.cffls.repl.co/To learn more details, go to the [DApp page](https://github.com/cffls/pycardano/tree/main/examples/full_stack).#### Transaction creation and signing&lt;details&gt;  &lt;summary&gt;Expand code&lt;/summary&gt;  ```python&quot;&quot;&quot;Build a transaction using transaction builder&quot;&quot;&quot;from blockfrost import ApiUrlsfrom pycardano import *# Use testnetnetwork = Network.TESTNET# Read keys to memory# Assume there is a payment.skey file sitting in current directorypsk = PaymentSigningKey.load(&quot;payment.skey&quot;)# Assume there is a stake.skey file sitting in current directoryssk = StakeSigningKey.load(&quot;stake.skey&quot;)pvk = PaymentVerificationKey.from_signing_key(psk)svk = StakeVerificationKey.from_signing_key(ssk)# Derive an address from payment verification key and stake verification keyaddress = Address(pvk.hash(), svk.hash(), network)# Create a BlockFrost chain contextcontext = BlockFrostChainContext(&quot;your_blockfrost_project_id&quot;, base_url=ApiUrls.preprod.value)# Create a transaction builderbuilder = TransactionBuilder(context)# Tell the builder that transaction input will come from a specific address, assuming that there are some ADA and native# assets sitting at this address. &quot;add_input_address&quot; could be called multiple times with different address.builder.add_input_address(address)# Get all UTxOs currently sitting at this addressutxos = context.utxos(address)# We can also tell the builder to include a specific UTxO in the transaction.# Similarly, &quot;add_input&quot; could be called multiple times.builder.add_input(utxos[0])# Send 1.5 ADA and a native asset (CHOC) in quantity of 2000 to an address.builder.add_output(    TransactionOutput(        Address.from_primitive(            &quot;addr_test1vrm9x2zsux7va6w892g38tvchnzahvcd9tykqf3ygnmwtaqyfg52x&quot;        ),        Value.from_primitive(            [                1500000,                {                    bytes.fromhex(                        &quot;57fca08abbaddee36da742a839f7d83a7e1d2419f1507fcbf3916522&quot;  # Policy ID                    ): {                        b&quot;CHOC&quot;: 2000  # Asset name and amount                    }                },            ]        ),    ))# We can add multiple outputs, similar to what we can do with inputs.# Send 2 ADA and a native asset (CHOC) in quantity of 200 to ourselvesbuilder.add_output(    TransactionOutput(        address,        Value.from_primitive(            [                2000000,                {                    bytes.fromhex(                        &quot;57fca08abbaddee36da742a839f7d83a7e1d2419f1507fcbf3916522&quot;  # Policy ID                    ): {                        b&quot;CHOC&quot;: 200  # Asset name and amount                    }                },            ]        ),    ))# Create final signed transactionsigned_tx = builder.build_and_sign([psk], change_address=address)# Submit signed transaction to the networkcontext.submit_tx(signed_tx)```&lt;/details&gt;See more usages under [examples](https://github.com/Python-Cardano/pycardano/tree/main/examples).### Development&lt;details&gt;&lt;summary&gt;Click to expand&lt;/summary&gt;#### Workspace setupClone the repository:`git clone https://github.com/Python-Cardano/pycardano.git`PyCardano uses [poetry](https://python-poetry.org/) to manage its dependencies. Install poetry for osx / linux / bashonwindows:`curl -sSL https://install.python-poetry.org | python3 -`Go to [poetry installation](https://python-poetry.org/docs/#installation) for more details. Change directory into the repo, install all dependencies using poetry, and you are all set!`cd pycardano &amp;&amp; poetry install`When testing or running any program, it is recommended to enter a [poetry shell](https://python-poetry.org/docs/cli/#shell) in which all python dependencies are automatically configured: `poetry shell`.#### TestPyCardano uses [pytest](https://docs.pytest.org/en/6.2.x/) for unit testing.Run all tests:`make test`Run all tests in a specific test file:`poetry run pytest test/pycardano/test_transaction.py`Run a specific test function:`poetry run pytest -k &quot;test_transaction_body&quot;`Run a specific test function in a test file:`poetry run pytest test/pycardano/test_transaction.py -k &quot;test_transaction_body&quot;`#### Test coverageWe use [Coverage](https://coverage.readthedocs.io/en/latest/) to calculate the test coverage.Test coverage could be generated by: `make cov`A html report could be generated and opened in browser by: `make cov-html`### Style guidelinesThe package uses [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html) docstring.Code could be formatted with command: `make format`The code style could be checked by [flake8](https://flake8.pycqa.org/en/latest/): `make qa`### Docs generationThe majority of package documentation is created by the docstrings in python files. We use [sphinx](https://www.sphinx-doc.org/en/master/) with [Read the Docs theme](https://sphinx-rtd-theme.readthedocs.io/en/stable/) to generate the html pages.Build docs and open the docs in browser: `make docs`&lt;/details&gt;## Donation and SponsorIf you find this project helpful, please consider donate or sponsor us. Your donation and sponsor will allow us to spend more time on improving PyCardano and adding more features in the future.You can support us by 1) sponsoring through Github, or 2) donating ADA to our ADA Handle `pycardano` or to the address below:[`addr1vxa4qadv7hk2dd3jtz9rep7sp92lkgwzefwkmsy3qkglq5qzv8c0d`](https://cardanoscan.io/address/61bb5075acf5eca6b632588a3c87d00955fb21c2ca5d6dc0910591f050)&lt;p&gt;  &lt;img src=&quot;./.github/donate_addr.png&quot; height=150 width=150/&gt;&lt;/p&gt;## Sponsors :heart:&lt;p align=&quot;left&quot;&gt;  &lt;a href=&quot;https://github.com/KtorZ&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5680256?s=50&amp;v=4&quot;/&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/CardanoDur&quot;&gt;&lt;img width=&quot;50&quot; src=&quot;https://avatars.githubusercontent.com/u/1000466?s=50&amp;v=4&quot;/&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/huths0lo&quot;&gt;&lt;img width=&quot;50&quot; src=&quot;https://avatars.githubusercontent.com/u/78839856?s=50&amp;v=4&quot;/&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/markrufino&quot;&gt;&lt;img width=&quot;50&quot; src=&quot;https://avatars.githubusercontent.com/u/30117352?v=4&quot;/&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/OpShin&quot;&gt;&lt;img width=&quot;50&quot; src=&quot;https://avatars.githubusercontent.com/u/102762047?s=200&amp;v=4&quot;/&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/aada-finance&quot;&gt;&lt;img width=&quot;50&quot; src=&quot;https://avatars.githubusercontent.com/u/89693711?v=4&quot;/&gt;&lt;/a&gt;&lt;/p&gt;</longdescription>
</pkgmetadata>