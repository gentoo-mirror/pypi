<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># get-annotationsA backport of Python 3.10's [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations) function.## Install```pip3 install -U get-annotations```## Usage```pyfrom get_annotations import get_annotationsdef foo(x: int) -&gt; str: ...print(get_annotations(foo))# {'x': &lt;class 'int'&gt;, 'return': &lt;class 'str'&gt;}```If your module uses `from __future__ import annotations`, you'll want to set `eval_str=True`, otherwise `get_annotations` will return strings:```pyfrom __future__ import annotationsimport typing as tdef bar(x: t.List[MyObject]): ...class MyObject:  passprint(get_annotations(bar))# {'x': 't.List[MyObject]'}print(get_annotations(bar, eval_str=True))# {'x': typing.List[__main__.MyObject]}```Note that it does _not_ work with old-style forward ref annotations, such as `t.List[&quot;MyObject&quot;]`:```py&gt;&gt;&gt; from typing import List&gt;&gt;&gt; def foo(a: int) -&gt; List[&quot;MyObject&quot;]: ......&gt;&gt;&gt; class MyObject: ......&gt;&gt;&gt; print(get_annotations(foo, eval_str=True)) # Note that 'MyObject' is returned as a string!{'a': &lt;class 'int'&gt;, 'return': typing.List[ForwardRef('MyObject')]}&gt;&gt;&gt;&gt;&gt;&gt; print(get_annotations(foo, eval_str=False)) # Identical{'a': &lt;class 'int'&gt;, 'return': typing.List[ForwardRef('MyObject')]}```If you _really_ don't want to use `from __future__ import annotations` for some reason, you can surround an entire type annotation in quotes to forward ref it:```py&gt;&gt;&gt; def foo(a: int) -&gt; &quot;List[MyObject]&quot;: ......&gt;&gt;&gt; print(get_annotations(foo, eval_str=True)) # This works now{'a': &lt;class 'int'&gt;, 'return': typing.List[__main__.MyObject]}&gt;&gt;&gt;&gt;&gt;&gt; print(get_annotations(foo, eval_str=False)) # For comparison{'a': &lt;class 'int'&gt;, 'return': 'List[MyObject]'}```## LicenseMIT## ContactA library by [Shawn Presser](https://www.shawwn.com). If you found it useful, please consider [joining my patreon](https://www.patreon.com/shawwn)!My Twitter DMs are always open; you should [send me one](https://twitter.com/theshawwn)! It's the best way to reach me, and I'm always happy to hear from you.- Twitter: [@theshawwn](https://twitter.com/theshawwn)- Patreon: [https://www.patreon.com/shawwn](https://www.patreon.com/shawwn)- HN: [sillysaurusx](https://news.ycombinator.com/threads?id=sillysaurusx)- Website: [shawwn.com](https://www.shawwn.com)</longdescription>
</pkgmetadata>