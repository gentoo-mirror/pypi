<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python APTED algorithm for the Tree Edit Distance=================================================Information-----------This is a Python implementation of the APTED algorithm, thestate-of-the-art solution for computing the tree edit distance [1,2],which supersedes the RTED algorithm [3].It is a port of the original Java implementation available athttps://github.com/DatabaseGroup/apted. During the port, some changeswere made to reduce the duplication on symmetric operations and to makeit look more Pythonic.You can find more information about APTED on the following websitehttp://tree-edit-distance.dbresearch.uni-salzburg.at/Citing APTED------------If you want to refer to APTED in a publication, please cite [1] and [2].Licence-------The source code is published under the **MIT licence** found in the rootdirectory of the project and in the header of each source file.Input-----Currently, we support only the so-called bracket notation for the inputtrees, for example, encoding ``{A{B{X}{Y}{F}}{C}}`` corresponds to thefollowing tree:::        A       / \      B   C     /|\    X Y FOutput------Our tool computes two outputs: - tree edit **distance** value - theminimum cost of transforming the source tree into the destination tree.- tree edit **mapping** - a mapping between nodes that corresponds tothe tree edit distance value. Nodes that are not mapped are deleted(source tree) or inserted (destination tree).Getting started---------------This version were tested on Python 2.7, 3.4, 3.5, and 3.6.First, install it with pip:::    pip install aptedIf you want to compare the trees {a{b}{c}} and {a{b{d}}}, please run:::    python -m apted -t {a{b}{c}} {a{b{d}}} -mvThe output is:::    distance:             2    runtime:              0.000270843505859    {a{b}{c}} -&gt; {a{b{d}}}    {c} -&gt; None    {b} -&gt; {b{d}}    None -&gt; {d}For more information on running options, please run::    python -m apted -hCustomizing-----------It is possible to customize the algorithm to run with custom trees withlabels different from simple strings or custom data-structures.Additionally it is possible to customize it to use a more sophisticatedcost model than unit cost.For customizing the algorithm, you can create a custom *Config* class:.. code:: python    from apted import APTED, Config    class CustomConfig(Config):       def rename(self, node1, node2):            &quot;&quot;&quot;Compares attribute .value of trees&quot;&quot;&quot;            return 1 if node1.value != node2.value else 0        def children(self, node):            &quot;&quot;&quot;Get left and right children of binary tree&quot;&quot;&quot;            return [x for x in (node.left, node.right) if x]    apted = APTED(tree1, tree2, CustomConfig())    ted = apted.compute_edit_distance()    mapping = apted.compute_edit_mapping()By default, the included *Config* class consider trees with the atribute*name* as label and the atribute *children* as children in left to rightpreorder.In addition to the Config class, we also provide a*PerEditOperationConfig* class that allows you to specify weights foreach operation:.. code:: python    from apted import APTED, PerEditOperationConfig    apted = APTED(tree1, tree2, PerEditOperationConfig(.4, .4, .6))    ted = apted.compute_edit_distance()    mapping = apted.compute_edit_mapping()If your main usage for APTED is to obtain the mapping, it is possible toconfigure the algorith to keep track of the mapping during theexecution. To do so, we provide a function, *meta\_chained\_config*,that modifies existing *Config* classes:.. code:: python    from apted import APTED, PerEditOperationConfig, meta_chained_config    new_config = meta_chained_config(PerEditOperationConfig)    apted = APTED(tree1, tree2, new_config(.4, .4, .6))    ted = apted.compute_edit_distance()    mapping = apted.compute_edit_mapping()Note that this approach uses much more memory and we didn't evaluate ifit is faster than the original algorithm for the mapping with hugetrees. The execution time for the mapping tests were about the same asthe original algorithm.Contributing------------Feel free to submit pull resquests to this repository.The codebase follows the PEP8 conventions. However it is not too strict.For instance, it is okay to have lines with a little more than 79characters, but try not to exceed too much.Please, run ``python test.py`` during your changes to make sureeverything is working. It is also desirable to use coverage.py to checktest coverage: ``coverage run test.py``.Original Authors-----------------  Mateusz Pawlik-  Nikolaus AugstenImplementation Author----------------------  Joao Felipe PimentelReferences----------1. M. Pawlik and N. Augsten. *Tree edit distance: Robust and memory-   efficient*. Information Systems 56. 2016.2. M. Pawlik and N. Augsten. *Efficient Computation of the Tree Edit   Distance*. ACM Transactions on Database Systems (TODS) 40(1). 2015.3. M. Pawlik and N. Augsten. *RTED: A Robust Algorithm for the Tree Edit   Distance*. PVLDB 5(4). 2011.</longdescription>
</pkgmetadata>