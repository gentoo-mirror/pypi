<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======================Tryton Scripting Client=======================A library to access Tryton's models like a client.Example of usage----------------    &gt;&gt;&gt; from proteus import config, Model, Wizard, ReportConfiguration~~~~~~~~~~~~~Configuration to connect to a sqlite memory database using trytond as module.    &gt;&gt;&gt; config = config.set_trytond('sqlite:///:memory:')There is also the ``config.set_xmlrpc`` method which can be used to connectusing a URL, and the ``config.set_xmlrpc_session`` method (when used as acontext manager) which connects for a session.Activating a module~~~~~~~~~~~~~~~~~~~Find the module, call the activate button and run the upgrade wizard.    &gt;&gt;&gt; Module = Model.get('ir.module')    &gt;&gt;&gt; party_module, = Module.find([('name', '=', 'party')])    &gt;&gt;&gt; party_module.click('activate')    &gt;&gt;&gt; Wizard('ir.module.activate_upgrade').execute('upgrade')Creating a party~~~~~~~~~~~~~~~~First instantiate a new Party:    &gt;&gt;&gt; Party = Model.get('party.party')    &gt;&gt;&gt; party = Party()    &gt;&gt;&gt; party.id &lt; 0    TrueFill the fields:    &gt;&gt;&gt; party.name = 'ham'Save the instance into the server:    &gt;&gt;&gt; party.save()    &gt;&gt;&gt; party.name    'ham'    &gt;&gt;&gt; party.id &gt; 0    TrueSetting the language of the party~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The language on party is a ``Many2One`` relation field. So it requires to get a``Model`` instance as value.    &gt;&gt;&gt; Lang = Model.get('ir.lang')    &gt;&gt;&gt; en, = Lang.find([('code', '=', 'en')])    &gt;&gt;&gt; party.lang = en    &gt;&gt;&gt; party.save()    &gt;&gt;&gt; party.lang.code    'en'Creating an address for the party~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Addresses are store on party with a ``One2Many`` field.So the new address just needs to be appended to the list ``addresses``.    &gt;&gt;&gt; address = party.addresses.new(postal_code='42')    &gt;&gt;&gt; party.save()    &gt;&gt;&gt; party.addresses #doctest: +ELLIPSIS    [proteus.Model.get('party.address')(...)]Adding category to the party~~~~~~~~~~~~~~~~~~~~~~~~~~~~Categories are linked to party with a ``Many2Many`` field.So first create a category    &gt;&gt;&gt; Category = Model.get('party.category')    &gt;&gt;&gt; category = Category()    &gt;&gt;&gt; category.name = 'spam'    &gt;&gt;&gt; category.save()Append it to categories of the party    &gt;&gt;&gt; party.categories.append(category)    &gt;&gt;&gt; party.save()    &gt;&gt;&gt; party.categories #doctest: +ELLIPSIS    [proteus.Model.get('party.category')(...)]Print party label~~~~~~~~~~~~~~~~~There is a label report on ``Party``.    &gt;&gt;&gt; label = Report('party.label')The report is executed with a list of records and some extra data.    &gt;&gt;&gt; type_, data, print_, name = label.execute([party], {})Sorting addresses and register order~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Addresses are ordered by sequence which means they can be stored following aspecific order.The ``set_sequence`` method stores the current order.    &gt;&gt;&gt; address = party.addresses.new(postal_code='69')    &gt;&gt;&gt; party.save()    &gt;&gt;&gt; address = party.addresses.new(postal_code='23')    &gt;&gt;&gt; party.save()Now changing the order.    &gt;&gt;&gt; reversed_addresses = list(reversed(party.addresses))    &gt;&gt;&gt; while party.addresses:    ...     _ = party.addresses.pop()    &gt;&gt;&gt; party.addresses.extend(reversed_addresses)    &gt;&gt;&gt; party.addresses.set_sequence()    &gt;&gt;&gt; party.save()    &gt;&gt;&gt; party.addresses == reversed_addresses    TrueSetting context~~~~~~~~~~~~~~~Make French translatable:    &gt;&gt;&gt; Language = Model.get('ir.lang')    &gt;&gt;&gt; french, = Language.find([('code', '=', 'fr')])    &gt;&gt;&gt; french.translatable = True    &gt;&gt;&gt; french.save()Create a category in English:    &gt;&gt;&gt; Category = Model.get('party.category')    &gt;&gt;&gt; with config.set_context(language='en'):    ...     category = Category(name=&quot;Category&quot;)    ...     category.save()Translate in French:    &gt;&gt;&gt; with config.set_context(language='fr'):    ...     category_fr = Category(category.id)    ...     category_fr.name = &quot;Categorie&quot;    ...     category_fr.save()Read in English:    &gt;&gt;&gt; category.reload()    &gt;&gt;&gt; category.name    'Category'Read in French:    &gt;&gt;&gt; category_fr.reload()    &gt;&gt;&gt; category_fr.name    'Categorie'</longdescription>
</pkgmetadata>