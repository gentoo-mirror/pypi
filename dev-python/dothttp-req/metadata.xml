<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># InspirationWith the rise in usage of microservices, using http/curl is essential part of most developer's jobs. There are multipleoptions out there (some are curl, postmant) . My Ideal choice would be to use curl but problems with it is having nohistory. Postman solves that problem but once user logs in, postman actually syncs it to their servers which i did notlike.## GOALdothttp will provide simple, cleaner architecture for making http requests. It uses xtext (eclipse developed dsl) tobuild a custom dsl.### DocumentationMore information or docs can be cound at https://docs.dothttp.dev---Go through this example for better understanding. for babysteps click [here](#first-dothttprequest-and-more)```http# users.http#!/usr/bin/env /home/prasanth/cedric05/dothttp/dist/dothttp-cli# this is comment// this is also a comment/*   this is multi line   comment*/# http file can have multiple requests, name tag/annotation is used to identify@name(&quot;fetch 100 users, skip first 50&quot;)# makes are get request, with url `https://req.dothttp.dev/user`GET https://req.dothttp.dev/user# below is an header example&quot;Authorization&quot;: &quot;Basic dXNlcm5hbWU6cGFzc3dvcmQ=&quot;# below is how you set url params '?' --&gt; signifies url quary param? (&quot;fetch&quot;, &quot;100&quot;) #? (&quot;skip&quot;, &quot;50&quot;)? projection, name? projection, org? projection, location# makes are post request, with url `https://req.dothttp.dev/user`POST https://req.dothttp.dev/userbasicauth('username', 'password')/*   below defines payload for the post request.   json --&gt; signifies payload is json data*/json({    &quot;name&quot;: &quot;{{name=adam}}&quot;, # name is templated, if spcified via env or property, it will be replaced    &quot;org&quot;: &quot;dothttp&quot;,    &quot;location&quot;: &quot;Hyderabad&quot;,    # &quot;interests&quot;: [&quot;exploring&quot;, &quot;listening to music&quot;],})# makes put request, with url `https://req.dothttp.dev/user/1`PUT https://req.dothttp.dev/post# define headers in .dothttp.json with envbasicauth(&quot;{{username}}, &quot;{{password}}&quot;)# posts with urlencodeddata({    &quot;name&quot;: &quot;Adam A&quot;,    &quot;org&quot;: &quot;dothttp&quot;,    &quot;location&quot;: &quot;Hyderabad&quot;,    &quot;interests&quot;: [&quot;exploring&quot;, &quot;listening to music&quot;],})// or use below one// data('name=Adam+A&amp;org=dothttp&amp;location=Hyderabad&amp;interests=%5B%27exploring%27%2C+%27listening+to+music%27%5D')```## KICKSTART### From pypi```shellpip install dothttp-req==0.0.10```### From source```shellgit clone git@github.com:cedric05/dothttp.gitcd dothttppython3 -m pip install pipenvpipenv install```### python3.9```shellpython3 -m dothttp examples/dothttpazure.http```### docker```shelldocker build -t dothttp .docker run -it --rm dothttp```### whalebrew```shelldocker run -it --rm dothttp```## Features1. easy and cleaner http syntax1. variable substitution with property file1. generates curl from http for easy sharing```shelldocker build -t dothttp .whalebrew install dothttpdothttp examples/dothttpazure.http```## First DotHttpRequest and more```get.httpGET &quot;https://httpbin.org/get&quot;````dothttp get.http`  or `python -m dothttp get.http`## Run`dothttp simple.http`prints```json{  &quot;args&quot;: {},  &quot;headers&quot;: {    &quot;Accept-Encoding&quot;: &quot;identity&quot;,    &quot;Host&quot;: &quot;httpbin.org&quot;,    &quot;User-Agent&quot;: &quot;python-urllib3/1.26.3&quot;,    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-6022266a-20fb552e530ba3d90c75be6d&quot;  },  &quot;origin&quot;: &quot;117.216.243.24&quot;,  &quot;url&quot;: &quot;https://httpbin.org/get&quot;}```### POST request```post.httpPOST &quot;https://httpbin.org/post&quot;``````json{  &quot;args&quot;: {},  &quot;data&quot;: &quot;&quot;,  &quot;files&quot;: {},  &quot;form&quot;: {},  &quot;headers&quot;: {    &quot;Accept-Encoding&quot;: &quot;identity&quot;,    &quot;Content-Length&quot;: &quot;0&quot;,    &quot;Host&quot;: &quot;httpbin.org&quot;,    &quot;User-Agent&quot;: &quot;python-urllib3/1.26.3&quot;,    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-602228fa-3c3ed5213b6d8c2d2a223148&quot;  },  &quot;json&quot;: null,  &quot;origin&quot;: &quot;117.216.243.24&quot;,  &quot;url&quot;: &quot;https://httpbin.org/post&quot;}```similarly, other methods`GET, POST, OPTIONS, DELETE, CONNECT, PUT, HEAD, TRACE` support is available.### Queryquery params can be added to request by specifying` query ( &quot;key&quot;, &quot;value&quot;)`` ?  &quot;key&quot;, &quot;value&quot;`` ? &quot;key&quot;: &quot;value&quot;`` ? &quot;key&quot;= &quot;value&quot;`all four are accepted. going with `query(&quot;hi&quot;, &quot;hi2)` is more readable. `?&quot;key&quot;= &quot;value&quot;` is more concise### Payloaduser can specify payload by mentioning below four forms (for various scenarios).- `data(&quot;ram&quot;)`  user can also mention its `content-type` with  `data(&quot;ram&quot;, &quot;text/plain&quot;)`- `data({&quot;key&quot;: &quot;value&quot;})` for form input.- `json({&quot;key&quot;: &quot;value&quot;})` for json payload.- `fileinput(&quot;path/to/file&quot;, &quot;type&quot;)` uploads file as payload (type is optional).- `files((&quot;photo&quot;, &quot;path/to/file/photo.jpg&quot;, &quot;image/jpeg&quot;),  (&quot;photo details&quot;, '{&quot;name&quot;:&quot;prasanth&quot;}', &quot;application/json&quot;)     )`  for multipart upload  **dothttp** will figure out content type by going through file/data, when type is not mentioned.### Comments**dothttp** will use `#` for commenting entire line.1. `//` line comment. follows java, javascript2. `#` line comment. follows python's comment style3. `/*   */` multi line comment. follows java/javascript style### Templating```.httpPOST 'https://httpbin.org/post'? (&quot;{{key}}&quot;, &quot;{{value}}&quot;)data('{&quot;{{key}}&quot; :&quot;{{value}}&quot;}', 'application/json')```- specify variable values through property file ([sample.json](./examples/.dothttp.json)).    - user can define environments and can activate multiple environments at a time    - **dothttp** by default will read variables from `&quot;*&quot;` section    - for example      `dothttp --property-file path/to/file.json --env ram chandra`      will activate `*` section properties, `ram` section properties and `chandra` section properties      `dothttp --env ram chandra`      will activate `*` section properties, `ram` section properties and `chandra` section properties      from `.dothttp.json` in httpfile name space- through command line  `dothttp --property key=ram value=ranga`  will replace `{{ram}}` to `ranga` from the file- through file itself. (will be helpful for default properties)```POST 'https://{{host=httpbin.org}}/post'```### HeadersUser can define headers in below three formats1. `header('content-type', 'application/json')` readable2. `'content-type': 'application/json'` concise3. property file `headers` section from property-file can also be used. in most scenarios, headers section will be   common for a host. having them in property file would ease them.### Authentication#### BasicAuth`basicauth('username','password')'` --&gt; will compute add respective headers.#### DigestAuth`digestauth('username','password')'` --&gt; will compute add respective headers.#### NtlmAuth`ntlmauth('username','password')'` --&gt; will compute add respective headers.### Property file```json{  &quot;*&quot;: {    &quot;host&quot;: &quot;httpbin.org&quot;  },  &quot;headers&quot;: {    &quot;content-type&quot;: &quot;plain/text&quot;  },  &quot;preprod&quot;: {    &quot;host&quot;: &quot;preprod.httpbin.org&quot;  }}```#### Special sections in property file1. `*` section in property file will be activated once user specifies property file if user didn't specifiy file   and `.dothttp.json` exists, it will be activated2. `headers` once a property file is activated. headers from property file will be added to request by default without   user having to specify in `.http` file#### Formatter (experimental phase)**dothttp** can format a http file using below command`dothttp -fmt examples/dothttpazure.http --experimental`or`dothttp --format examples/dothttpazure.http --experimental`to print to command line`dothttp --format examples/dothttpazure.http --experimental --stdout`### Editor supportsyntax highlighting for visual studio code is supportedvia [dothttp-code](https://marketplace.visualstudio.com/items?itemName=ShivaPrasanth.dothttp-code)### Command line options```usage: dothttp [-h] [--curl] [--property-file PROPERTY_FILE] [--no-cookie] [--env ENV [ENV ...]] [--debug] [--info] [--format] [--stdout]               [--property PROPERTY [PROPERTY ...]]               filehttp requests for humansoptional arguments:  -h, --help            show this help message and exitgeneral:  --curl                generates curl script  --no-cookie, -nc      cookie storage is disabled  --debug, -d           debug will enable logs and exceptions  --info, -i            more information  file                  http fileproperty:  --property-file PROPERTY_FILE, -p PROPERTY_FILE                        property file  --env ENV [ENV ...], -e ENV [ENV ...]                        environment to select in property file. properties will be enabled on FIFO  --property PROPERTY [PROPERTY ...]                        list of property'sformat:  --format, -fmt        formatter  --stdout              print to commandline```checkout [examples]('./examples/dothttpazure.http')-----------### Vscode alternatives- [rest-client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) written in typescript- [httpYac](https://marketplace.visualstudio.com/items?itemName=anweber.vscode-httpyac)  written in typescript- [Thunder Client](https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client) closed source---------### Non Vscode alternatives- [http-client](https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html)  closed source- [dothttp](https://github.com/tonsV2/dothttp)  written in python</longdescription>
</pkgmetadata>