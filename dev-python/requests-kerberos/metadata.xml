<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>requests Kerberos/GSSAPI authentication library===============================================.. image:: https://github.com/requests/requests-kerberos/actions/workflows/ci.yml/badge.svg    :target: https://github.com/requests/requests-kerberos/actions/workflows/ci.ymlRequests is an HTTP library, written in Python, for human beings. This libraryadds optional Kerberos/GSSAPI authentication support and supports mutualauthentication. Basic GET usage:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=HTTPKerberosAuth())    ...The entire ``requests.api`` should be supported.Setup-----In order to use this library, there must already be a Kerberos Ticket-GrantingTicket(TGT) cached in a Kerberos credential cache. Whether a TGT is availablecan be easily determined by running the ``klist`` command. If no TGT isavailable, then it first must be obtained by running the ``kinit`` command, orpointing the $KRB5CCNAME to a credential cache with a valid TGT.In short, the library will handle the &quot;negotiations&quot; of Kerberos authentication,but ensuring that an initial TGT is available and valid is the responsibilityof the user.Authentication Failures-----------------------Client authentication failures will be communicated to the caller by returningthe 401 response. A 401 response may also come from an expired Ticket-GrantingTicket.Mutual Authentication---------------------REQUIRED^^^^^^^^By default, ``HTTPKerberosAuth`` will require mutual authentication from theserver, and if a server emits a non-error response which cannot beauthenticated, a ``requests_kerberos.errors.MutualAuthenticationError`` willbe raised. If a server emits an error which cannot be authenticated, it willbe returned to the user but with its contents and headers stripped. If theresponse content is more important than the need for mutual auth on errors,(eg, for certain WinRM calls) the stripping behavior can be suppressed bysetting ``sanitize_mutual_error_response=False``:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth, REQUIRED    &gt;&gt;&gt; kerberos_auth = HTTPKerberosAuth(mutual_authentication=REQUIRED, sanitize_mutual_error_response=False)    &gt;&gt;&gt; r = requests.get(&quot;https://windows.example.org/wsman&quot;, auth=kerberos_auth)    ...OPTIONAL^^^^^^^^If you'd prefer to not require mutual authentication, you can set yourpreference when constructing your ``HTTPKerberosAuth`` object:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth, OPTIONAL    &gt;&gt;&gt; kerberos_auth = HTTPKerberosAuth(mutual_authentication=OPTIONAL)    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=kerberos_auth)    ...This will cause ``requests_kerberos`` to attempt mutual authentication if theserver advertises that it supports it, and cause a failure if authenticationfails, but not if the server does not support it at all.DISABLED^^^^^^^^While we don't recommend it, if you'd prefer to never attempt mutualauthentication, you can do that as well:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth, DISABLED    &gt;&gt;&gt; kerberos_auth = HTTPKerberosAuth(mutual_authentication=DISABLED)    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=kerberos_auth)    ...Preemptive Authentication-------------------------``HTTPKerberosAuth`` can be forced to preemptively initiate the KerberosGSS exchange and present a Kerberos ticket on the initial request (and allsubsequent). By default, authentication only occurs after a``401 Unauthorized`` response containing a Kerberos or Negotiate challengeis received from the origin server. This can cause mutual authenticationfailures for hosts that use a persistent connection (eg, Windows/WinRM), asno Kerberos challenges are sent after the initial auth handshake. Thisbehavior can be altered by setting  ``force_preemptive=True``:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth, REQUIRED    &gt;&gt;&gt; kerberos_auth = HTTPKerberosAuth(mutual_authentication=REQUIRED, force_preemptive=True)    &gt;&gt;&gt; r = requests.get(&quot;https://windows.example.org/wsman&quot;, auth=kerberos_auth)    ...Hostname Override-----------------If communicating with a host whose DNS name doesn't match itskerberos hostname (eg, behind a content switch or load balancer),the hostname used for the Kerberos GSS exchange can be overridden bysetting the ``hostname_override`` arg:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth, REQUIRED    &gt;&gt;&gt; kerberos_auth = HTTPKerberosAuth(hostname_override=&quot;internalhost.local&quot;)    &gt;&gt;&gt; r = requests.get(&quot;https://externalhost.example.org/&quot;, auth=kerberos_auth)    ...Explicit Principal------------------``HTTPKerberosAuth`` normally uses the default principal (ie, the user forwhom you last ran ``kinit`` or ``kswitch``, or an SSO credential ifapplicable). However, an explicit principal can be specified, which willcause Kerberos to look for a matching credential cache for the named user.This feature depends on OS support for collection-type credential caches,as well as working principal support in PyKerberos (it is broken in manybuilds). An explicit principal can be specified with the ``principal`` arg:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth, REQUIRED    &gt;&gt;&gt; kerberos_auth = HTTPKerberosAuth(principal=&quot;user@REALM&quot;)    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=kerberos_auth)    ...On Windows, WinKerberos is used instead of PyKerberos. WinKerberos allows theuse of arbitrary principals instead of a credential cache. Passwords can bespecified by following the form ``user@realm:password`` for ``principal``.Delegation----------``requests_kerberos`` supports credential delegation (``GSS_C_DELEG_FLAG``).To enable delegation of credentials to a server that requests delegation, pass``delegate=True`` to ``HTTPKerberosAuth``:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_kerberos import HTTPKerberosAuth    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=HTTPKerberosAuth(delegate=True))    ...Be careful to only allow delegation to servers you trust as they will be ableto impersonate you using the delegated credentials.Logging-------This library makes extensive use of Python's logging facilities.Log messages are logged to the ``requests_kerberos`` and``requests_kerberos.kerberos_`` named loggers.If you are having difficulty we suggest you configure logging. Issues with theunderlying kerberos libraries will be made apparent. Additionally, copious debuginformation is made available which may assist in troubleshooting if youincrease your log level all the way up to debug.History=======0.14.0: 2021-12-05------------------- Added support for proxy authentication with ``HTTP`` endpoints.- Support for proxying ``HTTPS`` endpoints is not available due to limitations  of the underlying requests/urllib3 library.- Fixed up stray bytes to str conversion.0.13.0: 2021-11-03------------------- Change Kerberos dependencies to pyspnego_ to modernise the underlying  Kerberos library that is used.- Removed the ``wrap_winrm`` and ``unwrap_winrm`` functions- Dropped support for Python 2 and raised minimum Python version to 3.6.- Renamed the ``context`` attribute to ``_context`` to indicate it's meant for  internal use only.- Fix Negotiate header regex pattern to avoid DoS affected patterns.. _pyspnego: https://github.com/jborean93/pyspnego0.12.0: 2017-12-20------------------------- Add support for channel binding tokens (assumes pykerberos support &gt;= 1.2.1)- Add support for kerberos message encryption (assumes pykerberos support &gt;= 1.2.1)- Misc CI/test fixes0.11.0: 2016-11-02------------------- Switch dependency on Windows from kerberos-sspi/pywin32 to WinKerberos.  This brings Custom Principal support to Windows users.0.10.0: 2016-05-18------------------- Make it possible to receive errors without having their contents and headers  stripped.- Resolve a bug caused by passing the ``principal`` keyword argument to  kerberos-sspi on Windows.0.9.0: 2016-05-06------------------ Support for principal, hostname, and realm override.- Added support for mutual auth.0.8.0: 2016-01-07------------------ Support for Kerberos delegation.- Fixed problems declaring kerberos-sspi on Windows installs.0.7.0: 2015-05-04------------------ Added Windows native authentication support by adding kerberos-sspi as an  alternative backend.- Prevent infinite recursion when a server returns 401 to an authorization  attempt.- Reduce the logging during successful responses.0.6.1: 2014-11-14------------------ Fix HTTPKerberosAuth not to treat non-file as a file- Prevent infinite recursion when GSSErrors occurs0.6: 2014-11-04---------------- Handle mutual authentication (see pull request 36_)  All users should upgrade immediately. This has been reported to  oss-security_ and we are awaiting a proper CVE identifier.  **Update**: We were issued CVE-2014-8650- Distribute as a wheel... _36: https://github.com/requests/requests-kerberos/pull/36.. _oss-security: http://www.openwall.com/lists/oss-security/0.5: 2014-05-14---------------- Allow non-HTTP service principals with HTTPKerberosAuth using a new optional  argument ``service``.- Fix bug in ``setup.py`` on distributions where the ``compiler`` module is  not available.- Add test dependencies to ``setup.py`` so ``python setup.py test`` will work.0.4: 2013-10-26---------------- Minor updates in the README- Change requirements to depend on requests above 1.1.00.3: 2013-06-02---------------- Work with servers operating on non-standard ports0.2: 2013-03-26---------------- Not documented0.1: Never released-------------------- Initial Release</longdescription>
</pkgmetadata>