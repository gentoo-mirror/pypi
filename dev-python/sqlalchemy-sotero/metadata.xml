<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sotero JDBC Dialect for SQLAlchemySotero JDBC Driver integrates with Sotero Protect Platform to selectively encrypt/decrypt sensitive data stored inrelational databases.## InstallationInstalling the dialect is straightforward::```python3 -m pip install sqlalchemy-sotero```## Supported drivers- PostgreSQL## Pre-RequisiteIn order to authenticate the JDBC driver client application with Sotero Platform,you should have access to a Sotero Client Credentials file. If you don't have this file already,please follow the instructions below.- Login to Sotero Main API URL using Sotero admin username and password to get an access token- POST a request to `&lt;SOTERO_API_URL&gt;/appclients/generate` endpoint with the access token  in the authorization header and the body containing the name of your application.```Authorization: Bearer &lt;the-access-token&gt;```- Request body should contain the `name` of the application:```{    &quot;name&quot;:&quot;Enter Your JDBC Application Name&quot;}```- The response will contain `client_id` and `private_key`:```{    &quot;client_id&quot;: &quot;6f5010fc-9e13-41f8-b483-88527658bc81&quot;,    &quot;private_key&quot;: &quot;MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCyKiGZq1mzXyqMYTPDNXfxiDJSk/yvNJX58Cd9A5QSEh6MOOu5LEcBig1e9jROGFpn+TqrycjNp4jEckTvcC1UjCfZ+o8Lxh6lMMW9leV4cr1r6ONiRs5Vrisv1tOBVkz+m4AqARjqcgejcM/iV5dIhZkm2OH1s00gmsLmqf7LfAmJl6tTkw2P7CW0nCWg4RGjcUYKmr43vViX1oqnO5uwxyXoZiM1cam2c7KrjYWs52cSrInkWfgWwwcMNf6vnGykNIgZPz3jf64h+rsiMZRz3Havs8NKSy8kSVFAmA1sIvzhDgOD/jRyfP2zdXjuy5qXMPQsfEA0w1nTmSL9xvGRAgMBAAECggEATMNkWL6AVo2BWpyi3c/SzwlcjUHf1Gl22QqFKRL6oFKYQNhhkBYovdwKaMjxvlg106iJv7c=&quot;}```- Save the above response json in a file. This credentials file is required while using the Sotero JDBC driver## UsageSet a CLASSPATH environment variable for the Sotero driver and the driver for your database`export CLASSPATH=&lt;path&gt;/sotero-jdbc-driver-1.2.0.jar:&lt;path&gt;/postgresql-42.3.1.jar`or in Python application`os.environ['CLASSPATH'] = &quot;&lt;path&gt;/sotero-jdbc-driver-1.2.0.jar:&lt;path&gt;/postgresql-42.3.1.jar&quot;`### PostgreSQL:```pythonfrom sqlalchemy import create_engineos.environ['CLASSPATH'] = &quot;&lt;path&gt;/sotero-jdbc-driver-1.2.0.jar:&lt;path&gt;/postgresql-42.3.1.jar&quot;url = f'sotero+postgres://{username}:{password}@{sotero-api-url}?creds_file={creds-file-path}&amp;dataset={sotero-dataset-id}'conn = create_engine(url)```Note: In S4 platform &lt;sotero-api-url&gt; should point to your tenant API URL instead of the main API URL.## Driver OptionsSotero driver options are specified as key=value pairs separated by &amp;.### Basic options- `creds_file=&lt;creds-file-path&gt;` =&gt; JSON file containing the client_id and private_key- `dataset=&lt;sotero-dataset-id&gt;` =&gt; Id of a dataset configured in the Sotero platform. The target driver class and JDBC url will be derived based on the dataset configuration- `client_user=&lt;dataset-userid&gt;` =&gt; check the decrypt permissions using this value instead of the target database user id### Controlling the driver behaviorBy default, Sotero driver will encrypt the data inserting in to the database and optionallydecrypt data retrieving from the database if the user has decrypt permissions. This behaviorcan be changed by specifying the optional mode parameter- `mode=encrypt`&amp;nbsp;&amp;nbsp;=&gt; perform encryption while querying non-encrypted database, no decryption is performed- `mode=none`&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&gt; perform no encryption or decryption- `mode=protect`&amp;nbsp;=&gt; default behavior## TestingRead more information on deploying the package [here](https://devarea.com/deploying-a-new-python-package-to-pypi/)```bashpython3 -m venv venvsource venv/bin/activatepip install -U pip setuptools twine wheel JayDeBeApipython setup.py sdisttwine upload --repository-url https://test.pypi.org/legacy/ dist/*pip install -i https://testpypi.python.org/pypi  sqlalchemy-sotero --no-build-isolation --extra-index-url=https://test.pypi.org/simple/```## Deploy the package```bashtwine upload dist/sqlalchemy_sotero-0.0.2.tar.gz```</longdescription>
</pkgmetadata>