<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;&lt;!-- PROJECT SHIELDS --&gt;[![Release][release-shield]][release-url][![Build][build-shield]][build-url][![MIT License][license-shield]][license-url][![Contributors][contributors-shield]][contributors-url][![Forks][forks-shield]][forks-url][![Stargazers][stars-shield]][stars-url][![Issues][issues-shield]][issues-url][![LinkedIn][linkedin-shield]][linkedin-url]&lt;!-- PROJECT LOGO --&gt;&lt;br /&gt;&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/hgomes88/bosch-control-panel-cc880p&quot;&gt;    &lt;img src=&quot;images/cc880p.png&quot; alt=&quot;CC880P&quot; width=&quot;&quot; height=&quot;&quot;&gt;  &lt;/a&gt;  &lt;h3 align=&quot;center&quot;&gt;Bosch Control Panel CC880P&lt;/h3&gt;  &lt;p align=&quot;center&quot;&gt;    Library to interface with the old CC880P Bosch Alarm Control Panels    &lt;br /&gt;    &lt;a href=&quot;https://github.com/hgomes88/bosch-control-panel-cc880p&quot;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt;    &lt;br /&gt;    &lt;br /&gt;    &lt;a href=&quot;https://github.com/hgomes88/bosch-control-panel-cc880p&quot;&gt;View Demo&lt;/a&gt;    ·    &lt;a href=&quot;https://github.com/hgomes88/bosch-control-panel-cc880p/issues&quot;&gt;Report Bug&lt;/a&gt;    ·    &lt;a href=&quot;https://github.com/hgomes88/bosch-control-panel-cc880p/issues&quot;&gt;Request Feature&lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;&lt;!-- TABLE OF CONTENTS --&gt;&lt;details&gt;  &lt;summary&gt;Table of Contents&lt;/summary&gt;  &lt;ol&gt;    &lt;li&gt;      &lt;a href=&quot;#about-the-project&quot;&gt;About The Project&lt;/a&gt;      &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;#the-reason-behind&quot;&gt;The Reason Behind&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#interface&quot;&gt;Interface&lt;/a&gt;&lt;/li&gt;        &lt;ul&gt;            &lt;li&gt;&lt;a href=&quot;#wiring&quot;&gt;Wiring&lt;/a&gt;&lt;/li&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a href=&quot;#uart-pinout-and-configuration&quot;&gt;Uart Pinout and Configuration&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;            &lt;li&gt;&lt;a href=&quot;#protocol&quot;&gt;Protocol&lt;/a&gt;&lt;/li&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a href=&quot;#frames&quot;&gt;Frames&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/ul&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;a href=&quot;#getting-started&quot;&gt;Getting Started&lt;/a&gt;      &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#acknowledgments&quot;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt;  &lt;/ol&gt;&lt;/details&gt;&lt;!-- ABOUT THE PROJECT --&gt;## About the Project### The Reason BehindThe reason behind the the development of this library, was the need turn the old Bosch Control Panel into a smart device without the need to replace it.Home Assistant is the home automation I use, and I wanted to integrate also the Bosch control panel into it.Because there wasn't any integration I could use for that purpose, I decided to implement the library myself and use it as dependency for the custom component [bosch_control_panel_cc880](https://github.com/hgomes88/homeassistant/tree/main/custom_components/bosch_control_panel_cc880) also developed by me for Home Assistant.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;### InterfaceThanks to [this][yes-thomas] webpage, it was possible to figure out that the interface with the control panel can be done through the UART accessible through the auxiliary module pins (see the [UART Pinout](#uart-pinout-and-configuration)).As mentioned in the website, it is possible to completely replace the [direct link][direct-link-cable] cable usually needed to configure the control panel through the computer using the [A Link Plus][a-link-plus-sw] software.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;#### WiringTo sniff and decode the packets supported by the control panel, it was followed the wiring as in the following diagram:![a-link-plus-usb-diagram]The information about A-Link Plus can be found [here][a-link-plus-sw].The USB-TTL converter can be a device similar to [this][usb-ttl-dev].To make the alarm remotely accessible, it was used a TCP/IP to UART bridge.The current and tested solution was wired as following:![esp8266-diagram]The library `bosch-control-panel-cc880p` is part of this repository.The `ESP8266` represents any device using that chip such as [ESP1][esp1-dev].Note that it should be flashed with a software like [ESP-Link][esp-link-sw] to create a bridge between TCP/IP and UART.Since `ESP1` operates at `3.3V` and `CC880P` control panel operates at `5V`, there's the need to use a level shifter, or something similar (see [this][level-shifter-website] site for examples).A better solution would be wiring the system as the diagram below:![elfin-ew10-diagram]Using a device like [Elfin-EW10][elfin-ew10-dev] would prevent the usage of level shifter as it also operates at `5V`, as well as remove the need to flash any firmware as the device already provides everything needed.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;##### UART Pinout and ConfigurationThe pinout of the `CC880P` control panel is:- `TX`: Auxiliary Module `Pin3` (***Note:*** The [website][yes-thomas] describes the `Pin7` by mistake)- `RX`: Auxiliary Module `Pin7` (***Note:*** The [website][yes-thomas] describes the `Pin3` by mistake)- `GND`: Auxiliary Module `Pin4`- `VCC(5V)`: Auxiliary Module `Pin6`The baud rate the control panel operates is `300`.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;#### ProtocolSince there was no information about the protocol used to send commands to the control panel and receive the corresponding responses, the approach was to connect the control panel using the [A Link Plus][a-link-plus-sw] and then sniff and decode the packets being transferred back and forth.the following steps were followed:1. Wiring (see [Wiring](#wiring) chapter)2. Execute the A Link Plus and connect the Alarm (see A Link Plus manual [here][a-link-plus-manual])3. Monitor and decode the packets (using a software similar to [this][device-monitoring-studio-sw] )The result is presented in the [frames](#frames) section.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;##### FramesBelow are presented the decoded frames that are used by this library so far:###### Send Keys CommandCommand used to send keys to the control panel simulating the pressing of the keypad keys.```'Send Keys' CommandC0 &lt;k1&gt; &lt;k2&gt; &lt;k3&gt; &lt;k4&gt; &lt;k5&gt; &lt;k6&gt; &lt;k7&gt; &lt;area&gt; &lt;nKeys&gt; &lt;crc&gt;Byte    Identifier  Comments-------------------------------------------------------------------------------1       C0          Hexadecimal representation of the 'Send Key' command2-8     k&lt;n&gt;        Each byte is represents the key of the keypad. Can be sent                        from 1 up to 7 keys in a single command9       area        If the alarm is configured to have multiple areas, then                        this byte identifies the target area that the key(s)                        will be sent to. Otherwise set it to '00'.10      nKeys       Number of keys being sent in this command11      crc         Frame checksum (excluding the 1st byte)```###### Set Siren Command (Special Command)Command used to enable/disable the siren```'Set Siren' Command0E &lt;on&gt; 00 00 00 00 00 00 00 00 &lt;crc&gt;Byte    Identifier  Comments-------------------------------------------------------------------------------1       0E          Hexadecimal representation of the special commands2       on          Sets the siren on or off:                      - 0x05 if is to set siren on                      - 0x06 if is to set siren off3-10    XX          Not used and thus, set to 0.11      crc         Frame checksum (excluding the 1st byte)```###### Set Arm Command (Special Command)Command used to arm/disarm the alarm```'Arm/Disarm' Command0E &lt;arm&gt; 00 00 00 00 00 00 00 00 &lt;crc&gt;Byte    Identifier  Comments-------------------------------------------------------------------------------1       0E          Hexadecimal representation of the special commands2       on          Arm/Disarm the alarm:                      - 0x01 if is to arm the alarm                      - 0x02 if is to disarm the alarm3-10    XX          Not used and thus, set to 0.11      crc         Frame checksum (excluding the 1st byte)```###### Set Output CommandCommand used to set (enable/disable) outputs of the control panel.```'Set Output' Command0E &lt;on&gt; &lt;out&gt; 00 00 00 00 00 00 00 &lt;crc&gt;Byte    Identifier  Comments-------------------------------------------------------------------------------1       0E          Hexadecimal representation of special commands2       on          Special function to be executed:                        Set Output On: Set this byte to 0x03                        Set Output Off: Set this byte to 0x043       out         This byte represents the index of the target output.                      Supports setting the outputs 1-5, which values in this                      byte are 0-4 respectively.4-10    XX          All those bytes should be set to 0.11      crc         Frame checksum (excluding the 1st byte)```###### Get Status CommandCommand used to request the overall status of the control panel.After sending this command is expected the control panel to answer with the [`Get Status Response`](#get-status-response).```'Get Status' Command01 00 00 00 &lt;c2c1&gt; &lt;c4c3&gt; &lt;c6c5&gt; &lt;c7&gt; 00 00 &lt;crc&gt;Byte   Identifier   Comments----------------------------1       01          Hexadecimal representation of the 'Get Status' command.2-4     XX          This bytes are not used and thus set to 0.5-8     c1..c7      Corresponds to the installer code needed to have permissions                      to get the alarm status. Each digit occupies a nibble.                      Not used digits should be set to 0xF.9..10   XX          This bytes are not used and thus set to 0.11      crc         Frame checksum (excluding the 1st byte)```###### Get Status ResponseResponse of [`Get Status Command`](#get-status-command). This frame contains all the relevant information about the status of the control panel.```'Get Status' Response04 &lt;out&gt; &lt;out&gt; &lt;zone&gt; &lt;zone&gt; &lt;en&gt; &lt;en&gt; XX XX &lt;area&gt; &lt;s/h&gt; &lt;m&gt;Byte   Identifier   Comments----------------------------1       04      :   Hexadecimal representation of the 'Get Status' response2-3     out     :   Each bit set indicates whether an output is on.                        Maximum number of outputs is 14.                        Bits 1-8 of byte 3 correspond to the outputs 1-8 of the                        control panel.                        Bits 1-6 of byte 2 correspond to the outputs 9-14 of the                        control panel.                        Bits 7-8 of byte 2 are not used.4-5     zone    :   Each bit set indicates whether a zone is triggered.                        Maximum number of zones is 16.                        Bits 1-8 of byte 4 correspond to the zones 1-8 of the                        control panel.                        Bits 1-8 of byte 5 correspond to the zones 9-16 of the                        control panel.6-7     en      :   Each bit set indicates whether a zone is enabled (only                        applied when the mode of the alarm is set to `STAY`, as                        in this mode is possible to have only a subset of zones                        enabled).                        Bits 1-8 of byte 6 correspond to the zones 1-8 of the                        control panel.                        Bits 1-8 of byte 7 correspond to the zones 9-16 of the                        control panel.8-9     XX      :   Unknown and not used bytes.10      area    :   Indicates whether the stay status as well as the away                        status of the control panel is enabled for each area.                        Maximum number if areas is 4.                        Bits 1-4 correspond to the away status of the areas 1-4                        Bits 5-8 correspond to the stay status of the areas 5-811      s/h   :   Indicate the status of the siren (1 bit) + the current hours.                        Bit 6 if set mean the siren is triggered.                        Bits 0-4 represents the hours (0h-23h)                        Other bits are not used and thus unknown.12      m   :   Indicate the current minutes.                        Bits 0-5 represents the minutes (0m-59m).                        Other bits are not used and thus unknown.```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- GETTING STARTED --&gt;## Getting StartedThis library provides a CLI (Command Line Interface) to interact with thecontrol panel.### Prerequisites### InstallationThe installation of the library, including the CLI, is as simple as run:```$ pip install .```After that, the library is ready to be used, and now the CLI can be used.To get help how to use it type in the terminal the following:```$ control_panel -h```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- USAGE EXAMPLES --&gt;## UsageAfter following the [`Installation`](#installation) section, now the usage ofthe CLI can be found by running:```$ control_panel -husage: control_panel [-h] [-v] -c IP -p PORT {cmd} ...Connects to the Control Panelpositional arguments:  {cmd}    cmd                 Execute a commandoptions:  -h, --help            show this help message and exit  -v, --version         Gets the current version  -c IP, --connect IP   the host ip  -p PORT, --port PORT  the host port```There are 2 options to run the CLI as shown in the following sections.### Run in Listen ModeIn this mode, the script will connect to the control panel in listening only mode, where it will output any kind of change on the control panel.To run it the minimum should be:```$ control_panel -c 192.168.1.22 -p 23```### Run in Commanding ModeThis mode, allows the user to send commands to the control panel.To see the list of available commands the user can do:```$ control_panel -c &lt;ip&gt; -p &lt;port&gt; cmd -husage: control_panel cmd [-h]  {sendKeys,setMode,setSiren,setOut} ...positional arguments:  cmd  {sendKeys,setMode,setSiren,setOut}    sendKeys            Sends a set of keys to the control panel. Currently supports the following: [0-9*#]{1,7}    setMode             Change the control panel mode like arm, disarm, etc    setSiren            Change the control panel siren status    setOut              Change the output status of the control paneloptions:  -h, --help            show this help message and exit```The following are some examples:```$ control_panel -c &lt;ip&gt; -p &lt;port&gt; cmd setSiren offBefore: Siren(on=True)After: Siren(on=False)``````$ control_panel -c &lt;ip&gt; -p &lt;port&gt; cmd setSiren 1Before: Siren(on=False)After: Siren(on=True)``````$ control_panel -c &lt;ip&gt; -p &lt;port&gt; cmd setSiren 1Before: Siren(on=False)After: Siren(on=True)``````$ control_panel -c &lt;ip&gt; -p &lt;port&gt; cmd setOut 3 onBefore: Output(on=False)After: Output(on=True)```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- ROADMAP --&gt;## Roadmap- [ ] Complete documentation:  - [X] Hardware Used  - [X] Block diagram of the involved hardware  - [X] Table of the packets (commands and responses)  - [ ] Other- [X] Configure precommit and linter- [ ] Implement the battery of unit/integration tests- [X] Implement a commandline interface- [ ] Gracefully shutdown when a signal is received (e.g. A keyboard Interrupt)See the [open issues](https://github.com/hgomes88/bosch-control-panel-cc880p/issues) for a full list of proposed features (and known issues).&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- CONTRIBUTING --&gt;## ContributingTo contribute to this project, you need to execute the following steps:1. Install    1. Create a virtual environment (see how to [here][venv-website]):    2. Activate the virtual environment (see how to [here][venv-website]):    3. Install all the requirements for development:        `pip install -e &quot;.[dev]&quot;`    4. Install pre-commit:        `pre-commit install`2. Create new feature and commit the changes    1. Create a new feature branch based from the main branch:        `git checkout -b feature/&lt;feature_name&gt;`    2. Implement the changes for the feature    3. Run formatters/linters:        1. Autopep8:            `autopep8 src/ tests/`        1. Flake8:            `flake8 src/ tests/`        1. Mypy:            `mypy src/ tests/`    4. Commit the changes (this should run pre-commit to format/lint anyway)&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- LICENSE --&gt;## LicenseDistributed under the Apache License Version 2.0. See `LICENSE.txt` for more information.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- CONTACT --&gt;## ContactHugo Gomes - hgomes88@gmail.comProject Link: [https://github.com/hgomes88/bosch-control-panel-cc880p](https://github.com/hgomes88/bosch-control-panel-cc880p)Pipy Releases: [https://pypi.org/project/bosch-control-panel-cc880p](https://pypi.org/project/bosch-control-panel-cc880p)&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- ACKNOWLEDGMENTS --&gt;## Acknowledgments* [[othneildrew] Best Readme Template](https://github.com/othneildrew/Best-README-Template/blob/master/README.md)* [[Yes Thomas] Programming Bosh Alarm Panel without direct link cable](https://yesthomas.com/Electronics/201607%20Bosch%20Alarm%20panel%20programming%20without%20Direct%20Link%20cable.html)&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;[build-shield]: https://img.shields.io/github/workflow/status/hgomes88/bosch-control-panel-cc880p/Test/main?style=for-the-badge[build-url]: https://github.com/hgomes88/bosch-control-panel-cc880p/actions/workflows/on-push.yml[release-shield]:https://img.shields.io/pypi/v/bosch-control-panel-cc880p?label=Release&amp;style=for-the-badge[release-url]: https://pypi.org/project/bosch-control-panel-cc880p/[contributors-shield]: https://img.shields.io/github/contributors/hgomes88/bosch-control-panel-cc880p.svg?style=for-the-badge[contributors-url]: https://github.com/hgomes88/bosch-control-panel-cc880p/graphs/contributors[forks-shield]: https://img.shields.io/github/forks/hgomes88/bosch-control-panel-cc880p.svg?style=for-the-badge[forks-url]: https://github.com/hgomes88/bosch-control-panel-cc880p/network/members[stars-shield]: https://img.shields.io/github/stars/hgomes88/bosch-control-panel-cc880p.svg?style=for-the-badge[stars-url]: https://github.com/hgomes88/bosch-control-panel-cc880p/stargazers[issues-shield]: https://img.shields.io/github/issues/hgomes88/bosch-control-panel-cc880p.svg?style=for-the-badge[issues-url]: https://github.com/hgomes88/bosch-control-panel-cc880p/issues[license-shield]: https://img.shields.io/github/license/hgomes88/bosch-control-panel-cc880p.svg?style=for-the-badge[license-url]: https://github.com/hgomes88/bosch-control-panel-cc880p/blob/master/LICENSE.txt[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&amp;logo=linkedin&amp;colorB=555[linkedin-url]: https://linkedin.com/in/hugohomes[venv-website]: https://docs.python.org/3/library/venv.html[yes-thomas]: https://yesthomas.com/Electronics/201607%20Bosch%20Alarm%20panel%20programming%20without%20Direct%20Link%20cable.html[a-link-plus-sw]: https://boschsecurityaustralia.freshdesk.com/support/solutions/articles/35000134094-a-link-plus-downloads-[a-link-plus-manual]: https://resources-boschsecurity-cdn.azureedge.net/public/documents/Operation_Manual_Operation_Manual_enUS_2599016459.pdf[direct-link-cable]: https://commerce.boschsecurity.com/sg/en/DIRECT-LINK-CABLE-SOL-16/p/4.998.800.022/[device-monitoring-studio-sw]: https://www.hhdsoftware.com/device-monitoring-studio[usb-ttl-dev]: https://5.imimg.com/data5/XL/VE/MY-1833510/ft232rl-usb-to-ttl-5v-3-3v-convertor.pdf[esp1-dev]: https://en.wikipedia.org/wiki/ESP8266#/media/File:ESP-01.jpg[esp-link-sw]: https://github.com/jeelabs/esp-link[level-shifter-website]: https://randomnerdtutorials.com/how-to-level-shift-5v-to-3-3v/[elfin-ew10-dev]: http://www.hi-flying.com/elfin-ew10-elfin-ew11[product-screenshot]: images/screenshot.png[a-link-plus-usb-diagram]: images/a-link-plus-usb-diagram.png[elfin-ew10-diagram]: images/elfin-ew10-diagram.png[esp8266-diagram]: images/esp8266-diagram.png</longdescription>
</pkgmetadata>