<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========queuelib========.. image:: https://img.shields.io/pypi/v/queuelib.svg   :target: https://pypi.python.org/pypi/queuelib.. image:: https://img.shields.io/pypi/pyversions/queuelib.svg   :target: https://pypi.python.org/pypi/queuelib.. image:: https://github.com/scrapy/queuelib/actions/workflows/tests.yml/badge.svg   :target: https://github.com/scrapy/queuelib/actions/workflows/tests.yml.. image:: https://img.shields.io/codecov/c/github/scrapy/queuelib/master.svg   :target: http://codecov.io/github/scrapy/queuelib?branch=master   :alt: Coverage reportQueuelib is a Python library that implements object collections which are storedin memory or persisted to disk, provide a simple API, and run fast.Queuelib provides collections for queues_ (FIFO), stacks_ (LIFO), queuessorted by priority and queues that are emptied in a round-robin_ fashion... note:: Queuelib collections are not thread-safe.Queuelib supports Python 3.5+ and has no dependencies... _queues: https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics).. _round-robin: https://en.wikipedia.org/wiki/Round-robin_scheduling.. _stacks: https://en.wikipedia.org/wiki/Stack_(abstract_data_type)Installation============You can install Queuelib either via the Python Package Index (PyPI) or fromsource.To install using pip::    $ pip install queuelibTo install using easy_install::    $ easy_install queuelibIf you have downloaded a source tarball you can install it by running thefollowing (as root)::    # python setup.py installFIFO/LIFO disk queues=====================Queuelib provides FIFO and LIFO queue implementations.Here is an example usage of the FIFO queue::    &gt;&gt;&gt; from queuelib import FifoDiskQueue    &gt;&gt;&gt; q = FifoDiskQueue(&quot;queuefile&quot;)    &gt;&gt;&gt; q.push(b'a')    &gt;&gt;&gt; q.push(b'b')    &gt;&gt;&gt; q.push(b'c')    &gt;&gt;&gt; q.pop()    b'a'    &gt;&gt;&gt; q.close()    &gt;&gt;&gt; q = FifoDiskQueue(&quot;queuefile&quot;)    &gt;&gt;&gt; q.pop()    b'b'    &gt;&gt;&gt; q.pop()    b'c'    &gt;&gt;&gt; q.pop()    &gt;&gt;&gt;The LIFO queue is identical (API-wise), but importing ``LifoDiskQueue``instead.PriorityQueue=============A discrete-priority queue implemented by combining multiple FIFO/LIFO queues(one per priority).First, select the type of queue to be used per priority (FIFO or LIFO)::    &gt;&gt;&gt; from queuelib import FifoDiskQueue    &gt;&gt;&gt; qfactory = lambda priority: FifoDiskQueue('queue-dir-%s' % priority)Then instantiate the Priority Queue with it::    &gt;&gt;&gt; from queuelib import PriorityQueue    &gt;&gt;&gt; pq = PriorityQueue(qfactory)And use it::    &gt;&gt;&gt; pq.push(b'a', 3)    &gt;&gt;&gt; pq.push(b'b', 1)    &gt;&gt;&gt; pq.push(b'c', 2)    &gt;&gt;&gt; pq.push(b'd', 2)    &gt;&gt;&gt; pq.pop()    b'b'    &gt;&gt;&gt; pq.pop()    b'c'    &gt;&gt;&gt; pq.pop()    b'd'    &gt;&gt;&gt; pq.pop()    b'a'RoundRobinQueue===============Has nearly the same interface and implementation as a Priority Queue exceptthat each element must be pushed with a (mandatory) key.  Popping from thequeue cycles through the keys &quot;round robin&quot;.Instantiate the Round Robin Queue similarly to the Priority Queue::    &gt;&gt;&gt; from queuelib import RoundRobinQueue    &gt;&gt;&gt; rr = RoundRobinQueue(qfactory)And use it::    &gt;&gt;&gt; rr.push(b'a', '1')    &gt;&gt;&gt; rr.push(b'b', '1')    &gt;&gt;&gt; rr.push(b'c', '2')    &gt;&gt;&gt; rr.push(b'd', '2')    &gt;&gt;&gt; rr.pop()    b'a'    &gt;&gt;&gt; rr.pop()    b'c'    &gt;&gt;&gt; rr.pop()    b'b'    &gt;&gt;&gt; rr.pop()    b'd'Mailing list============Use the `scrapy-users`_ mailing list for questions about Queuelib.Bug tracker===========If you have any suggestions, bug reports or annoyances please report them toour issue tracker at: http://github.com/scrapy/queuelib/issues/Contributing============Development of Queuelib happens at GitHub: http://github.com/scrapy/queuelibYou are highly encouraged to participate in the development. If you don't likeGitHub (for some reason) you're welcome to send regular patches.All changes require tests to be merged.Tests=====Tests are located in `queuelib/tests` directory. They can be run using`nosetests`_ with the following command::    nosetestsThe output should be something like the following::    $ nosetests    .............................................................................    ----------------------------------------------------------------------    Ran 77 tests in 0.145s    OKLicense=======This software is licensed under the BSD License. See the LICENSE file in thetop distribution directory for the full license text.Versioning==========This software follows `Semantic Versioning`_.. _Scrapy framework: http://scrapy.org.. _scrapy-users: http://groups.google.com/group/scrapy-users.. _Semantic Versioning: http://semver.org/.. _nosetests: https://nose.readthedocs.org/en/latest/</longdescription>
</pkgmetadata>