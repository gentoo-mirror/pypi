<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-ltiA [Django reusable app](https://docs.djangoproject.com/en/4.0/intro/reusable-apps/) providing support for LTI Advantage.## InstallationInstall using pip.```pip install django-lti```## SetupStart by adding `lti_tool` to your project's `INSTALLED_APPS`.```pythonINSTALLED_APPS = [    ...    &quot;lti_tool&quot;,]```Then, add `lti_tool.middleware.LtiLaunchMiddleware` to the `MIDDLEWARE` setting.It's important to list the `LtiLaunchMiddleware` _after_ `SessionMiddleware`.```pythonMIDDLEWARE = [    ...    'django.contrib.sessions.middleware.SessionMiddleware',    'lti_tool.middleware.LtiLaunchMiddleware',]```Finally, run migrations to initialize the needed database tables.```python manage.py migrate lti_tool```## Usage### Adding JWKS and OIDC initiation URLsTo allow LTI platforms to retrieve a JWKS and initiate a launch, add paths for`lti_tool.views.jwks` and `lti_tool.views.OIDCLoginInitView` to `urls.py````python...from lti_tool.views import jwks, OIDCLoginInitViewurlpatterns = [    path(&quot;.well-known/jwks.json&quot;, jwks, name=&quot;jwks&quot;),    path(&quot;init/&lt;uuid:registration_uuid&gt;/&quot;, OIDCLoginInitView.as_view(), name=&quot;init&quot;),]```### Generating and rotating keysKeys for the JWKS can be generated using the `rotate_keys` management command.```python manage.py rotate_keys```### Registering an LTI platformAn LTI platform can be registered through the Django admin, or using a custominterface.### Handling an LTI launchTo handle the LTI launch, inherit from `LtiLaunchBaseView` and implement the handlermethods for the types of LTI message types that the application supports.```pythonclass ApplicationLaunchView(LtiLaunchBaseView):    def handle_resource_launch(self, request, lti_launch):        ...  # Required. Typically redirects the users to the appropriate page.    def handle_deep_linking_launch(self, request, lti_launch):        ...  # Optional.    def handle_submission_review_launch(self, request, lti_launch):        ...  # Optional.    def handle_data_privacy_launch(self, request, lti_launch):        ...  # Optional.```Each handler method receives the request, as well as a `LtiLaunch` object.When a session is initiated by an LTI launch, data about the launch is available fromthe request at `request.lti_launch` as an `LtiLaunch` object. During a non-LTI session`request.lti_launch` will refer to an `AbsentLtiLaunch` object.It is possible to distinguish between `LtiLaunch` and `AbsentLtiLaunch` objects usingthe `.is_present` and `.is_absent` properties.</longdescription>
</pkgmetadata>