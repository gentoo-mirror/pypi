<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-wrapwith===============**A Django template tag for wrapping a template block in a reusable enclosing template.**Provides a block tag called `wrapwith` which behaves exactly like [the built-in `include` tag](https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#include), but injects the contents of the block into the included template.It is intended to make wrapper markup reusable, encouraging you to break your template into &quot;components&quot; which might have a particular enclosing structure but varying contents. It is particularly useful with design systems that provide components (cards, blockquotes, accordians etc) that have reusable structure but arbitrary content.A toy example: imagine your design includes a box component which has a coloured border, but can contain any other markup inside it.First, create a wrapper template, `wrappers/box.html`:```html&lt;div style=&quot;border: 1px solid {{ bordercol }}&quot;&gt;  {{ wrapped }}&lt;/div&gt;```Note the special `{{ wrapped }}` variable, which will be replaced with your wrapped content.Then, in your main page template:```html{% load wrapwith %}&lt;html&gt;  &lt;body&gt;    &lt;h1&gt;welcome to my page&lt;/h1&gt;    {% wrapwith &quot;wrappers/box.html&quot; with bordercol=&quot;red&quot; %}      &lt;p&gt;this is inside a red box&lt;/p&gt;    {% endwrapwith %}    {% wrapwith &quot;wrappers/box.html&quot; with bordercol=&quot;green&quot; %}      &lt;p&gt;this is inside a green box&lt;/p&gt;      &lt;p&gt;and here's another paragraph inside the green box&lt;/p&gt;    {% endwrapwith %}  &lt;/body&gt;&lt;/html&gt;```### Optional: aliasing templatesIf you find writing out the full template path every time you use a component too verbose, you can define a dictionary of &quot;aliases&quot; in your Django settings, using the setting name `WRAPWITH_TEMPLATES`. This dictionary can be nested. You can then use a dotted path into this dictionary in your templates.In your `settings.py`:```pythonWRAPWITH_TEMPLATES = {  &quot;wrappers&quot;: {    &quot;box&quot;: &quot;wrappers/box.html&quot;,  },}```In your template:```html{% wrapwith wrappers.box with bordercol=&quot;red&quot; %}  &lt;p&gt;this is inside a red box&lt;/p&gt;{% endwrapwith %}```Tested on Python 3 with all currently supported Django versions.## Installation    pip install django-wrapwithThen add `wrapwith` to your `INSTALLED_APPS`.## Code of conductFor guidelines regarding the code of conduct when contributing to this repository please review https://www.dabapps.com/open-source/code-of-conduct/</longdescription>
</pkgmetadata>