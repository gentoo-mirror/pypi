<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Prettier - properly pprint of nested objectsIf you are trying to output nested data structures, each of which is individually displayed as a dictionaryrepresentation, the nesting levels are not separated, such an output is difficult to perceive.```class PPrintMixin:    def __str__(self):        return str(self.__dict__)SAMPLE_DICT = {'a': None}SAMPLE_DICT['a'] = SAMPLE_DICTclass A(PPrintMixin):    def __init__(self):        self.attrs = ('a', 'b', 'c')        self.a = 10        self.b = B()        self.c = {'a': 1, 'b': 2, 'c': 3}        setattr(self, 'd\nd', {'a': 1, 'b': 2, 'c': 3})        self.e = 'a\na'        self.f = 'a' * 100        self.g = self        self.h = SAMPLE_DICTclass B(PPrintMixin):    def __init__(self):        setattr(self, 'a \n a', {'a': 1, 'b': {'a': 1, 'b': 2, 'c': 3}, 'c\nc': C()})        self.b = [C(), 1]        self.c = C()class C(PPrintMixin):    def __init__(self):        self.a = ('b', 'c')        self.b = 'a \n a'        self.c = {}```You can expect the following output:```{'attrs': ('a', 'b', 'c'), 'a': 10, 'b': &lt;__main__.B object at 0x1034b74c0&gt;, 'c': {'a': 1, 'b': 2, 'c': 3}, 'd\nd': {'a': 1, 'b': 2, 'c': 3}, 'e': 'a\na', 'f': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'g': &lt;__main__.A object at 0x1033fb3a0&gt;, 'h': {'a': {...}}}```But if you use a ```PPrintMixin``` instead of the standard one, then you can expect the following output:```{'a': 10, 'd   d': {'a': 1,        'b': 2,        'c': 3}, 'e': 'a       a', 'c': {'a': 1,       'b': 2,       'c': 3}, 'h': {'a': &lt;RecursionError on 4304997312&gt;}, 'b': {'a            a': {'a': 1,                'b': {'a': 1,                      'b': 2,                      'c': 3},                'c                  c': {'a': ('b', 'c'),                       'c': {},                       'b': 'a                               a'}},       'c': {'a': ('b', 'c'),             'c': {},             'b': 'a                     a'},       'b': [&lt;__main__.C object at 0x100bf3a60&gt;, 1]}, 'attrs': ('a', 'b', 'c'), 'f': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa       aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'g': &lt;RecursionError on 4307498032&gt;}```If you want to create an own Mixin, just import MixinFactory. For example, you can use the ```endpoint``` argument. Thisis the name of the attribute that stores the list of arguments toprint. Let's combine some Mixins, like this:```from prettier import MixinFactoryAttrsPrintMixin = MixinFactory(endpoint='attrs')APrintMixin = MixinFactory(endpoint='a')class A(AttrsPrintMixin):    ...class B(PrintMixin):    ...class C(APrintMixin):    ...```The output will be:```{'a': 10, 'b': {'c': {'b': 'a                     a',             'c': {}},       'b': [&lt;__main__.C object at 0x100b478b0&gt;, 1],       'a            a': {'a': 1,                'b': {'a': 1,                      'b': 2,                      'c': 3},                'c                  c': {'b': 'a                               a',                       'c': {}}}}, 'c': {'a': 1,       'b': 2,       'c': 3}} ```</longdescription>
</pkgmetadata>