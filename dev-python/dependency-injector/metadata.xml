<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. figure:: https://raw.githubusercontent.com/wiki/ets-labs/python-dependency-injector/img/logo.svg   :target: https://github.com/ets-labs/python-dependency-injector| .. image:: https://img.shields.io/pypi/v/dependency_injector.svg   :target: https://pypi.org/project/dependency-injector/   :alt: Latest Version   .. image:: https://img.shields.io/pypi/l/dependency_injector.svg   :target: https://pypi.org/project/dependency-injector/   :alt: License.. image:: https://img.shields.io/pypi/pyversions/dependency_injector.svg   :target: https://pypi.org/project/dependency-injector/   :alt: Supported Python versions   .. image:: https://img.shields.io/pypi/implementation/dependency_injector.svg   :target: https://pypi.org/project/dependency-injector/   :alt: Supported Python implementations.. image:: https://pepy.tech/badge/dependency-injector   :target: https://pepy.tech/project/dependency-injector   :alt: Downloads.. image:: https://pepy.tech/badge/dependency-injector/month   :target: https://pepy.tech/project/dependency-injector   :alt: Downloads.. image:: https://pepy.tech/badge/dependency-injector/week   :target: https://pepy.tech/project/dependency-injector   :alt: Downloads.. image:: https://img.shields.io/pypi/wheel/dependency-injector.svg   :target: https://pypi.org/project/dependency-injector/   :alt: Wheel.. image:: https://img.shields.io/github/actions/workflow/status/ets-labs/python-dependency-injector/tests-and-linters.yml?branch=master   :target: https://github.com/ets-labs/python-dependency-injector/actions   :alt: Build Status.. image:: https://coveralls.io/repos/github/ets-labs/python-dependency-injector/badge.svg?branch=master   :target: https://coveralls.io/github/ets-labs/python-dependency-injector?branch=master   :alt: Coverage StatusWhat is ``Dependency Injector``?================================``Dependency Injector`` is a dependency injection framework for Python.It helps implement the dependency injection principle.Key features of the ``Dependency Injector``:- **Providers**. Provides ``Factory``, ``Singleton``, ``Callable``, ``Coroutine``, ``Object``,  ``List``, ``Dict``, ``Configuration``, ``Resource``, ``Dependency``, and ``Selector`` providers  that help assemble your objects.  See `Providers &lt;https://python-dependency-injector.ets-labs.org/providers/index.html&gt;`_.- **Overriding**. Can override any provider by another provider on the fly. This helps in testing  and configuring dev/stage environment to replace API clients with stubs etc. See  `Provider overriding &lt;https://python-dependency-injector.ets-labs.org/providers/overriding.html&gt;`_.- **Configuration**. Reads configuration from ``yaml``, ``ini``, and ``json`` files, ``pydantic`` settings,  environment variables, and dictionaries.  See `Configuration provider &lt;https://python-dependency-injector.ets-labs.org/providers/configuration.html&gt;`_.- **Resources**. Helps with initialization and configuring of logging, event loop, thread  or process pool, etc. Can be used for per-function execution scope in tandem with wiring.  See `Resource provider &lt;https://python-dependency-injector.ets-labs.org/providers/resource.html&gt;`_.- **Containers**. Provides declarative and dynamic containers.  See `Containers &lt;https://python-dependency-injector.ets-labs.org/containers/index.html&gt;`_.- **Wiring**. Injects dependencies into functions and methods. Helps integrate with  other frameworks: Django, Flask, Aiohttp, Sanic, FastAPI, etc.  See `Wiring &lt;https://python-dependency-injector.ets-labs.org/wiring.html&gt;`_.- **Asynchronous**. Supports asynchronous injections.  See `Asynchronous injections &lt;https://python-dependency-injector.ets-labs.org/providers/async.html&gt;`_.- **Typing**. Provides typing stubs, ``mypy``-friendly.  See `Typing and mypy &lt;https://python-dependency-injector.ets-labs.org/providers/typing_mypy.html&gt;`_.- **Performance**. Fast. Written in ``Cython``.- **Maturity**. Mature and production-ready. Well-tested, documented, and supported... code-block:: python   from dependency_injector import containers, providers   from dependency_injector.wiring import Provide, inject   class Container(containers.DeclarativeContainer):       config = providers.Configuration()       api_client = providers.Singleton(           ApiClient,           api_key=config.api_key,           timeout=config.timeout,       )       service = providers.Factory(           Service,           api_client=api_client,       )   @inject   def main(service: Service = Provide[Container.service]) -&gt; None:       ...   if __name__ == &quot;__main__&quot;:       container = Container()       container.config.api_key.from_env(&quot;API_KEY&quot;, required=True)       container.config.timeout.from_env(&quot;TIMEOUT&quot;, as_=int, default=5)       container.wire(modules=[__name__])       main()  # &lt;-- dependency is injected automatically       with container.api_client.override(mock.Mock()):           main()  # &lt;-- overridden dependency is injected automaticallyWhen you call the ``main()`` function the ``Service`` dependency is assembled and injected automatically.When you do testing, you call the ``container.api_client.override()`` method to replace the real APIclient with a mock. When you call ``main()``, the mock is injected.You can override any provider with another provider.It also helps you in a re-configuring project for different environments: replace an API clientwith a stub on the dev or stage.With the ``Dependency Injector``, object assembling is consolidated in a container. Dependency injections are defined explicitly.This makes it easier to understand and change how an application works... figure:: https://raw.githubusercontent.com/wiki/ets-labs/python-dependency-injector/img/di-readme.svg   :target: https://github.com/ets-labs/python-dependency-injectorVisit the docs to know more about the`Dependency injection and inversion of control in Python &lt;https://python-dependency-injector.ets-labs.org/introduction/di_in_python.html&gt;`_.Installation------------The package is available on the `PyPi`_::    pip install dependency-injectorDocumentation-------------The documentation is available `here &lt;https://python-dependency-injector.ets-labs.org/&gt;`_.Examples--------Choose one of the following:- `Application example (single container) &lt;https://python-dependency-injector.ets-labs.org/examples/application-single-container.html&gt;`_- `Application example (multiple containers) &lt;https://python-dependency-injector.ets-labs.org/examples/application-multiple-containers.html&gt;`_- `Decoupled packages example (multiple containers) &lt;https://python-dependency-injector.ets-labs.org/examples/decoupled-packages.html&gt;`_- `Boto3 example &lt;https://python-dependency-injector.ets-labs.org/examples/boto3.html&gt;`_- `Django example &lt;https://python-dependency-injector.ets-labs.org/examples/django.html&gt;`_- `Flask example &lt;https://python-dependency-injector.ets-labs.org/examples/flask.html&gt;`_- `Aiohttp example &lt;https://python-dependency-injector.ets-labs.org/examples/aiohttp.html&gt;`_- `Sanic example &lt;https://python-dependency-injector.ets-labs.org/examples/sanic.html&gt;`_- `FastAPI example &lt;https://python-dependency-injector.ets-labs.org/examples/fastapi.html&gt;`_- `FastAPI + Redis example &lt;https://python-dependency-injector.ets-labs.org/examples/fastapi-redis.html&gt;`_- `FastAPI + SQLAlchemy example &lt;https://python-dependency-injector.ets-labs.org/examples/fastapi-sqlalchemy.html&gt;`_Tutorials---------Choose one of the following:- `Flask web application tutorial &lt;https://python-dependency-injector.ets-labs.org/tutorials/flask.html&gt;`_- `Aiohttp REST API tutorial &lt;https://python-dependency-injector.ets-labs.org/tutorials/aiohttp.html&gt;`_- `Asyncio monitoring daemon tutorial &lt;https://python-dependency-injector.ets-labs.org/tutorials/asyncio-daemon.html&gt;`_- `CLI application tutorial &lt;https://python-dependency-injector.ets-labs.org/tutorials/cli.html&gt;`_Concept-------The framework stands on the `PEP20 (The Zen of Python) &lt;https://www.python.org/dev/peps/pep-0020/&gt;`_ principle:.. code-block:: bash   Explicit is better than implicitYou need to specify how to assemble and where to inject the dependencies explicitly.The power of the framework is in its simplicity.``Dependency Injector`` is a simple tool for the powerful concept.Frequently asked questions--------------------------What is dependency injection? - dependency injection is a principle that decreases coupling and increases cohesionWhy should I do the dependency injection? - your code becomes more flexible, testable, and clear ðŸ˜ŽHow do I start applying the dependency injection? - you start writing the code following the dependency injection principle - you register all of your application components and their dependencies in the container - when you need a component, you specify where to inject it or get it from the containerWhat price do I pay and what do I get? - you need to explicitly specify the dependencies - it will be extra work in the beginning - it will payoff as project growsHave a question? - Open a `Github Issue &lt;https://github.com/ets-labs/python-dependency-injector/issues&gt;`_Found a bug? - Open a `Github Issue &lt;https://github.com/ets-labs/python-dependency-injector/issues&gt;`_Want to help? - |star| Star the ``Dependency Injector`` on the `Github &lt;https://github.com/ets-labs/python-dependency-injector/&gt;`_ - |new| Start a new project with the ``Dependency Injector`` - |tell| Tell your friend about the ``Dependency Injector``Want to contribute? - |fork| Fork the project - |pull| Open a pull request to the ``develop`` branch.. _PyPi: https://pypi.org/project/dependency-injector/.. |star| unicode:: U+2B50 U+FE0F .. star sign1.. |new| unicode:: U+1F195 .. new sign.. |tell| unicode:: U+1F4AC .. tell sign.. |fork| unicode:: U+1F500 .. fork sign.. |pull| unicode:: U+2B05 U+FE0F .. pull sign</longdescription>
</pkgmetadata>