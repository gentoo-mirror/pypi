<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Ariadne](https://ariadnegraphql.org/img/logo-horizontal-sm.png)](https://ariadnegraphql.org)[![Build Status](https://github.com/mirumee/ariadne-graphql-modules/actions/workflows/tests.yml/badge.svg?branch=main)](https://github.com/mirumee/ariadne-graphql-modules/actions)- - - - -# Ariadne GraphQL ModulesAriadne package for implementing Ariadne GraphQL schemas using modular approach.For reasoning behind this work, please see [this GitHub discussion](https://github.com/mirumee/ariadne/issues/306).See [API reference](./REFERENCE.md) file for documentation.## InstallationAriadne GraphQL Modules can be installed using pip:```consolepip install ariadne-graphql-modules```Ariadne 0.15 or later is required for library to work.## Examples### Basic example```pythonfrom datetime import datefrom ariadne.asgi import GraphQLfrom ariadne_graphql_modules import ObjectType, gql, make_executable_schemaclass Query(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type Query {            message: String!            year: Int!        }        &quot;&quot;&quot;    )    @staticmethod    def resolve_message(*_):        return &quot;Hello world!&quot;    @staticmethod    def resolve_year(*_):        return date.today().yearschema = make_executable_schema(Query)app = GraphQL(schema=schema, debug=True)```### Dependency injectionIf `__schema__` string contains other type, its definition should be provided via `__requires__` attribute:```pythonfrom typing import List, Optionalfrom ariadne.asgi import GraphQLfrom ariadne_graphql_modules import ObjectType, gql, make_executable_schemafrom my_app.users import User, get_user, get_last_usersclass UserType(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type User {            id: ID!            name: String!            email: String        }        &quot;&quot;&quot;    )    @staticmethod    def resolve_email(user: User, info):        if info.context[&quot;is_admin&quot;]:            return user.email        return Noneclass UsersQueries(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type Query {            user(id: ID!): User            users: [User!]!        }        &quot;&quot;&quot;    )    __requires__ = [UserType]    @staticmethod    def resolve_user(*_, id: string) -&gt; Optional[User]:        return get_user(id=id)    @staticmethod    def resolve_users(*_, id: string) -&gt; List[User]:        return get_last_users()# UsersQueries already knows about `UserType` so it can be omitted# in make_executable_schema argumentsschema = make_executable_schema(UsersQueries)app = GraphQL(schema=schema, debug=True)```#### Deferred dependenciesOptionally dependencies can be declared as deferred so they can be provided directly to `make_executable_schema`:```pythonfrom typing import List, Optionalfrom ariadne.asgi import GraphQLfrom ariadne_graphql_modules import DeferredType, ObjectType, gql, make_executable_schemafrom my_app.users import User, get_user, get_last_usersclass UserType(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type User {            id: ID!            name: String!            email: String        }        &quot;&quot;&quot;    )    @staticmethod    def resolve_email(user: User, info):        if info.context[&quot;is_admin&quot;]:            return user.email        return Noneclass UsersQueries(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type Query {            user(id: ID!): User            users: [User!]!        }        &quot;&quot;&quot;    )    __requires__ = [DeferredType(&quot;User&quot;)]    @staticmethod    def resolve_user(*_, id: string) -&gt; Optional[User]:        return get_user(id=id)    @staticmethod    def resolve_users(*_, id: string) -&gt; List[User]:        return get_last_users()schema = make_executable_schema(UserType, UsersQueries)app = GraphQL(schema=schema, debug=True)```### Automatic case convertion between `python_world` and `clientWorld`#### Resolving fields valuesUse `__aliases__ = convert_case` to automatically set aliases for fields that convert case```pythonfrom ariadne_graphql_modules import ObjectType, convert_case, gqlclass UserType(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type User {            id: ID!            fullName: String!        }        &quot;&quot;&quot;    )    __aliases__ = convert_case```#### Converting fields argumentsUse `__fields_args__ = convert_case` on type to automatically convert field arguments to python case in resolver kwargs:```pythonfrom ariadne_graphql_modules import MutationType, convert_case, gqlfrom my_app import create_userclass UserRegisterMutation(MutationType):    __schema__ = gql(        &quot;&quot;&quot;        type Mutation {            registerUser(fullName: String!, email: String!): Boolean!        }        &quot;&quot;&quot;    )    __fields_args__ = convert_case    @staticmethod    async def resolve_mutation(*_, full_name: str, email: str):        user = await create_user(            full_name=full_name,            email=email,        )        return bool(user)```#### Converting inputs fieldsUse `__args__ = convert_case` on type to automatically convert input fields to python case in resolver kwargs:```pythonfrom ariadne_graphql_modules import InputType, MutationType, convert_case, gqlfrom my_app import create_userclass UserRegisterInput(InputType):    __schema__ = gql(        &quot;&quot;&quot;        input UserRegisterInput {            fullName: String!            email: String!        }        &quot;&quot;&quot;    )    __args__ = convert_caseclass UserRegisterMutation(MutationType):    __schema__ = gql(        &quot;&quot;&quot;        type Mutation {            registerUser(input: UserRegisterInput!): Boolean!        }        &quot;&quot;&quot;    )    __requires__ = [UserRegisterInput]    @staticmethod    async def resolve_mutation(*_, input: dict):        user = await create_user(            full_name=input[&quot;full_name&quot;],            email=input[&quot;email&quot;],        )        return bool(user)```### Roots merging`Query`, `Mutation` and `Subscription` types are automatically merged into one by `make_executable_schema`:```pythonfrom datetime import datefrom ariadne.asgi import GraphQLfrom ariadne_graphql_modules import ObjectType, gql, make_executable_schemaclass YearQuery(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type Query {            year: Int!        }        &quot;&quot;&quot;    )    @staticmethod    def resolve_year(*_):        return date.today().yearclass MessageQuery(ObjectType):    __schema__ = gql(        &quot;&quot;&quot;        type Query {            message: String!        }        &quot;&quot;&quot;    )    @staticmethod    def resolve_message(*_):        return &quot;Hello world!&quot;schema = make_executable_schema(YearQuery, MessageQuery)app = GraphQL(schema=schema, debug=True)```Final schema will contain single `Query` type thats result of merged tupes:```graphqltype Query {    message: String!    year: Int!}```Fields on final type will be ordered alphabetically.## Moving declarations from AriadneAriadne GraphQL Modules support combining old and new approaches to schema definition.See [moving guide](./moving.md) for examples and details.## ContributingWe are welcoming contributions to Ariadne GraphQL Modules! If you've found a bug or issue, feel free to use [GitHub issues](https://github.com/mirumee/ariadne/issues). If you have any questions or feedback, please let us know via [GitHub discussions](https://github.com/mirumee/ariadne/discussions/).Also make sure you follow [@AriadneGraphQL](https://twitter.com/AriadneGraphQL) on Twitter for latest updates, news and random musings!**Crafted with ❤️ by [Mirumee Software](http://mirumee.com)**hello@mirumee.com</longdescription>
</pkgmetadata>