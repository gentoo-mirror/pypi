<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AMQP Mock[![Codecov](https://img.shields.io/codecov/c/github/tsv1/amqp-mock/master.svg?style=flat-square)](https://codecov.io/gh/tsv1/amqp-mock)[![PyPI](https://img.shields.io/pypi/v/amqp-mock.svg?style=flat-square)](https://pypi.python.org/pypi/amqp-mock)[![PyPI - Downloads](https://img.shields.io/pypi/dm/amqp-mock?style=flat-square)](https://pypi.python.org/pypi/amqp-mock)[![Python Version](https://img.shields.io/pypi/pyversions/amqp-mock.svg?style=flat-square)](https://pypi.python.org/pypi/amqp-mock)* [Installation](#installation)* [Overview](#overview)  * [Test Publishing](#test-publishing)  * [Test Consuming](#test-consuming)* [Mock Server](#mock-server)  * [Start server](#start-server)  * [Publish message](#publish-message)  * [Get queue message history](#get-queue-message-history)  * [Get exchange messages](#get-exchange-messages)  * [Delete exchange messages](#delete-exchange-messages)  * [Reset](#reset)## Installation```shpip3 install amqp-mock```## Overview### Test Publishing```pythonfrom amqp_mock import create_amqp_mock# 1. Start AMQP mock serverasync with create_amqp_mock() as mock:    # 2. Publish message via &quot;system under test&quot;    publish_message([1, 2, 3], &quot;exchange&quot;)    # 3. Test message has been published    messages = await mock.client.get_exchange_messages(&quot;exchange&quot;)    assert messages[0].value == [1, 2, 3]```Full code available here: [`./examples/publish_example.py`](https://github.com/tsv1/amqp-mock/blob/master/examples/publish_example.py)### Test Consuming```pythonfrom amqp_mock import create_amqp_mock, Message, MessageStatus# 1. Start AMQP mock serverasync with create_amqp_mock() as mock:    # 2. Mock next message    await mock.client.publish_message(&quot;queue&quot;, Message([1, 2, 3]))    # 3. Consume message via &quot;system under test&quot;    consume_message(&quot;queue&quot;)    # 4. Test message has been consumed    history = await mock.client.get_queue_message_history(&quot;queue&quot;)    assert history[0].status == MessageStatus.ACKED```Full code available here: [`./examples/consume_example.py`](https://github.com/tsv1/amqp-mock/blob/master/examples/consume_example.py)## Mock Server### Start server```pythonimport asynciofrom amqp_mock import AmqpServer, HttpServer, Storage, create_amqp_mockasync def run() -&gt; None:    storage = Storage()    http_server = HttpServer(storage, port=8080)    amqp_server = AmqpServer(storage, port=5672)    async with create_amqp_mock(http_server, amqp_server):        await asyncio.Future()asyncio.run(run())```or via docker```shelldocker run -p 8080:80 -p 5672:5672 tsv1/amqp-mock```### Publish message`POST /queues/{queue}/messages````js{    &quot;id&quot;: &quot;9e342ac1-eef6-40b1-9eaf-053ee7887968&quot;,    &quot;value&quot;: [1, 2, 3],    &quot;exchange&quot;: &quot;&quot;,    &quot;routing_key&quot;: &quot;&quot;,    &quot;properties&quot;: null}```&lt;details&gt;&lt;summary&gt;HTTP&lt;/summary&gt;&lt;p&gt;```sh$ http POST localhost/queues/test_queue/messages \    value:='[1, 2, 3]' \    exchange=test_exchangeHTTP/1.1 200 OKContent-Length: 0Content-Type: application/json```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Python&lt;/summary&gt;&lt;p&gt;```pythonfrom amqp_mock import AmqpMockClient, Messagemock_client = AmqpMockClient()message = Message([1, 2, 3], exchange=&quot;test_exchange&quot;)await mock_client.publish_message(&quot;test_queue&quot;, message)```&lt;/p&gt;&lt;/details&gt;### Get queue message history`GET /queues/{queue}/messages/history`&lt;details&gt;&lt;summary&gt;HTTP&lt;/summary&gt;&lt;p&gt;```sh$ http GET localhost/queues/test_queue/messages/historyHTTP/1.1 200 OKContent-Length: 190Content-Type: application/json; charset=utf-8[    {        &quot;message&quot;: {            &quot;exchange&quot;: &quot;test_exchange&quot;,            &quot;id&quot;: &quot;94459a41-9119-479a-98c9-80bc9dabb719&quot;,            &quot;properties&quot;: null,            &quot;routing_key&quot;: &quot;&quot;,            &quot;value&quot;: [1, 2, 3]        },        &quot;queue&quot;: &quot;test_queue&quot;,        &quot;status&quot;: &quot;ACKED&quot;    }]```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Python&lt;/summary&gt;&lt;p&gt;```pythonfrom amqp_mock import AmqpMockClientmock_client = AmqpMockClient()await mock_client.get_queue_message_history(&quot;test_queue&quot;)# [#   &lt;QueuedMessage message=&lt;Message value=[1, 2, 3], exchange='test_exchange', routing_key=''&gt;,#                  queue='test_queue',#                  status=MessageStatus.ACKED&gt;# ]```&lt;/p&gt;&lt;/details&gt;### Get exchange messages`GET /exchanges/{exchange}/messages`&lt;details&gt;&lt;summary&gt;HTTP&lt;/summary&gt;&lt;p&gt;```sh$ http GET localhost/exchanges/test_exchange/messagesHTTP/1.1 200 OKContent-Length: 423Content-Type: application/json; charset=utf-8[    {        &quot;exchange&quot;: &quot;test_exchange&quot;,        &quot;id&quot;: &quot;63fd1646-bdc1-4baa-9780-e337a9ab109c&quot;,        &quot;properties&quot;: {            &quot;app_id&quot;: &quot;&quot;,            &quot;cluster_id&quot;: &quot;&quot;,            &quot;content_encoding&quot;: &quot;&quot;,            &quot;content_type&quot;: &quot;&quot;,            &quot;correlation_id&quot;: &quot;&quot;,            &quot;delivery_mode&quot;: 1,            &quot;expiration&quot;: &quot;&quot;,            &quot;headers&quot;: null,            &quot;message_id&quot;: &quot;5ec9024c74eca2e419fd7e29f7be846c&quot;,            &quot;message_type&quot;: &quot;&quot;,            &quot;priority&quot;: null,            &quot;reply_to&quot;: &quot;&quot;,            &quot;timestamp&quot;: null,            &quot;user_id&quot;: &quot;&quot;        },        &quot;routing_key&quot;: &quot;&quot;,        &quot;value&quot;: [1, 2, 3]    }]```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Python&lt;/summary&gt;&lt;p&gt;```pythonfrom amqp_mock import AmqpMockClientmock_client = AmqpMockClient()messages = await mock_client.get_exchange_messages(&quot;test_exchange&quot;)# [#   &lt;Message value=[1, 2, 3], exchange='test_exchange', routing_key=''&gt;# ]```&lt;/p&gt;&lt;/details&gt;### Delete exchange messages`DELETE /exchanges/{exchange}/messages`&lt;details&gt;&lt;summary&gt;HTTP&lt;/summary&gt;&lt;p&gt;```sh$ http DELETE localhost/exchanges/test_exchange/messagesHTTP/1.1 200 OKContent-Length: 0Content-Type: application/json```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Python&lt;/summary&gt;&lt;p&gt;```pythonfrom amqp_mock import AmqpMockClientmock_client = AmqpMockClient()await mock_client.delete_exchange_messages(&quot;test_exchange&quot;)```&lt;/p&gt;&lt;/details&gt;### Reset`DELETE /`&lt;details&gt;&lt;summary&gt;HTTP&lt;/summary&gt;&lt;p&gt;```sh$ http DELETE localhost/HTTP/1.1 200 OKContent-Length: 0Content-Type: application/json```&lt;/p&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Python&lt;/summary&gt;&lt;p&gt;```pythonfrom amqp_mock import AmqpMockClientmock_client = AmqpMockClient()await mock_client.reset()```&lt;/p&gt;&lt;/details&gt;</longdescription>
</pkgmetadata>