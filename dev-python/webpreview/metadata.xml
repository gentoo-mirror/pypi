<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># webpreviewFor a given URL, `webpreview` extracts its **title**, **description**, and **image url** using[Open Graph](http://ogp.me/), [Twitter Card](https://dev.twitter.com/cards/overview), or[Schema](http://schema.org/) meta tags, or, as an alternative, parses it as a generic webpage.&lt;p&gt;    &lt;a href=&quot;https://pypi.org/project/webpreview/&quot;&gt;&lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/webpreview&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/webpreview/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/webpreview?logo=pypi&amp;color=blue&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/ludbek/webpreview/actions?query=workflow%3Atest&quot;&gt;&lt;img alt=&quot;Build status&quot; src=&quot;https://img.shields.io/github/workflow/status/ludbek/webpreview/test?label=build&amp;logo=github&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://codecov.io/gh/ludbek/webpreview&quot;&gt;&lt;img alt=&quot;Code coverage report&quot; src=&quot;https://img.shields.io/codecov/c/github/ludbek/webpreview?logo=codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt;## Installation```shellpip install webpreview```## UsageUse the generic `webpreview` method (added in *v1.7.0*) to parse the page independent of its nature.This method fetches a page and tries to extracts a *title, description, and a preview image* from it.It first attempts to parse the values from **Open Graph** properties, then it falls back to**Twitter Card** format, and then to **Schema**. If none of these methods succeed in extracting allthree properties, then the web page's content is parsed using a generic HTML parser.```python&gt;&gt;&gt; from webpreview import webpreview&gt;&gt;&gt; p = webpreview(&quot;https://en.wikipedia.org/wiki/Enrico_Fermi&quot;)&gt;&gt;&gt; p.title'Enrico Fermi - Wikipedia'&gt;&gt;&gt; p.description'Italian-American physicist (1901–1954)'&gt;&gt;&gt; p.image'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Enrico_Fermi_1943-49.jpg/1200px-Enrico_Fermi_1943-49.jpg'# Access the parsed fields both as attributes and items&gt;&gt;&gt; p[&quot;url&quot;] == p.urlTrue# Check if all three of the title, description, and image are in the parsing result&gt;&gt;&gt; p.is_complete()True# Provide page content from somewhere else&gt;&gt;&gt; content = &quot;&quot;&quot;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;The Dormouse's story&lt;/title&gt;        &lt;meta property=&quot;og:description&quot; content=&quot;A Mad Tea-Party story&quot; /&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;        &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;    &lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;# The the function's invocation won't make any external calls,# only relying on the supplied content, unlike the example above&gt;&gt;&gt; webpreview(&quot;aa.com&quot;, content=content)WebPreview(url=&quot;http://aa.com&quot;, title=&quot;The Dormouse's story&quot;, description=&quot;A Mad Tea-Party story&quot;)```### Using the command lineWhen `webpreview` is installed via `pip`, then the accompanying command-line tool isinstalled alongside.```shell$ webpreview https://en.wikipedia.org/wiki/Enrico_Fermititle: Enrico Fermi - Wikipediadescription: Italian-American physicist (1901–1954)image: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Enrico_Fermi_1943-49.jpg/1200px-Enrico_Fermi_1943-49.jpg$ webpreview https://github.com/ --absolute-urltitle: GitHub: Where the world builds softwaredescription: GitHub is where over 83 million developers shape the future of software, together.image: https://github.githubassets.com/images/modules/site/social-cards/github-social.png```### Using compatibility APIBefore *v1.7.0* the package mainly exposed a different set of the API methods.All of them are supported and may continue to be used.```python# WARNING:# The API below is left for BACKWARD COMPATIBILITY ONLY.from webpreview import web_previewtitle, description, image = web_preview(&quot;aurl.com&quot;)# specifing timeout which gets passed to requests.get()title, description, image = web_preview(&quot;a_slow_url.com&quot;, timeout=1000)# passing headersheaders = {'User-Agent': 'Mozilla/5.0'}title, description, image = web_preview(&quot;a_slow_url.com&quot;, headers=headers)# pass html content thus avoiding making http call again to fetch content.content = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Dummy HTML&lt;/title&gt;&lt;/head&gt;&lt;/html&gt;&quot;&quot;&quot;title, description, image = web_preview(&quot;aurl.com&quot;, content=content)# specifing the parser# by default webpreview uses 'html.parser'title, description, image = web_preview(&quot;aurl.com&quot;, content=content, parser='lxml')```## Run with DockerThe docker image can be built and ran similarly to the command line.The default entry point is the `webpreview` command-line function.```shell$ docker build -t webpreview .$ docker run -it --rm webpreview &quot;https://en.m.wikipedia.org/wiki/Enrico_Fermi&quot;title: Enrico Fermi - Wikipediadescription: Enrico Fermi (Italian: [enˈriːko ˈfermi]; 29 September 1901 – 28 November 1954) was an Italian (later naturalized American) physicist and the creator of the world's first nuclear reactor, the Chicago Pile-1. He has been called the &quot;architect of the nuclear age&quot;[1] and the &quot;architect of the atomic bomb&quot;.image: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Enrico_Fermi_1943-49.jpg/1200px-Enrico_Fermi_1943-49.jpg```*Note*: built docker image weighs around 210MB.## Testing```shell# Execute the testspoetry run pytest webpreview# OR execute until the first failed testpoetry run pytest webpreview -x```## Setting up development environment```shell# Install a correct minimal supported version of pythonpyenv install 3.7.13# Create a virtual environment# By default, the project already contains a .python-version file that points# to 3.7.13.python -m venv .venv# Install dependencies# Poetry will automatically install them into the local .venvpoetry install# If you have errors likes this:ERROR: Can not execute `setup.py` since setuptools is not available in the build environment.# Then do this:.venv/bin/pip install --upgrade setuptools```</longdescription>
</pkgmetadata>