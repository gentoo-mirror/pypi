<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flake8-errmsg[![Actions Status][actions-badge]][actions-link][![PyPI version][pypi-version]][pypi-link][![PyPI platforms][pypi-platforms]][pypi-link]## IntroA checker for Flake8 that helps format nice error messages. The checks are:- **EM101**: Check for raw usage of a string literal in Exception raising.- **EM102**: Check for raw usage of an f-string literal in Exception raising.- **EM103**: Check for raw usage of `.format` on a string literal in Exception  raising.- **EM104**: Check for missing parentheses for built-in exceptions.- **EM105**: Check for missing message for built-in exceptions.The issue is that Python includes the line with the raise in the defaulttraceback (and most other formatters, like Rich and IPython to too). That meansa user gets a message like this:```pythonsub = &quot;Some value&quot;raise RuntimeError(f&quot;{sub!r} is incorrect&quot;)``````pytbTraceback (most recent call last):  File &quot;tmp.py&quot;, line 2, in &lt;module&gt;    raise RuntimeError(f&quot;{sub!r} is incorrect&quot;)RuntimeError: 'Some value' is incorrect```If this is longer or more complex, the duplication can be quite confusing for auser unaccustomed to reading tracebacks.While if you always assign to something like `msg`, then you get:```pythonsub = &quot;Some value&quot;msg = f&quot;{sub!r} is incorrect&quot;raise RuntimeError(msg)``````pytbTraceback (most recent call last):  File &quot;tmp.py&quot;, line 3, in &lt;module&gt;    raise RuntimeError(msg)RuntimeError: 'Some value' is incorrect```Now there's a simpler traceback and no double message. If you have a longmessage, this also often formats better when using Black, too.Reminder: Libraries should produce tracebacks with custom error classes, andapplications should print nice errors, usually _without_ a traceback, unlesssomething _unexpected_ occurred. An app should not print a traceback for anerror that is known to be triggerable by a user.## OptionsThere is one option, `--errmsg-max-string-length`, which defaults to 0 but canbe set to a larger value. The check will ignore string literals shorter thanthis length. This option is supported in configuration mode as well. This willonly affect string literals and not f-strings. This option is also supportedwhen running directly, without Flake8.## UsageJust add this to your `.pre-commit-config.yaml` `flake8` check under`additional_dependencies`. If you use `extend-select`, you should need no otherconfig.You can also manually run this check (without Flake8's `noqa` filtering) viascript entry-point (`pipx run flake8-errmsg &lt;files&gt;`) or module entry-point(`python -m flake8_errmsg &lt;files&gt;` when installed).## FAQQ: Why Python 3.10+ only? &lt;br/&gt; A: This is a static checker and for developers.Developers and static checks should be on 3.10 already. And I was lazy and matchstatements are fantastic for this sort of thing. And the AST module changed in3.8 anyway. Use [Ruff][] (which contains the checks from this plugin) if youneed to run on older versions.Q: What other sorts of checks are acceptable? &lt;br/&gt; A: Things that help withnice errors. For example, maybe requiring `raise SystemExit(n)` over `sys.exit`,`exit`, etc. Possibly adding a check for `warnings.warn` without setting`stacklevel` to something (usually 2).&lt;!-- prettier-ignore-start --&gt;[actions-badge]:            https://github.com/henryiii/flake8-errmsg/workflows/CI/badge.svg[actions-link]:             https://github.com/henryiii/flake8-errmsg/actions[pypi-link]:                https://pypi.org/project/flake8-errmsg/[pypi-platforms]:           https://img.shields.io/pypi/pyversions/flake8-errmsg[pypi-version]:             https://img.shields.io/pypi/v/flake8-errmsg[ruff]:                      https://github.com/astral-sh/ruff&lt;!-- prettier-ignore-end --&gt;</longdescription>
</pkgmetadata>