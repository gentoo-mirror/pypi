<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DataYoga Core## Introduction`datayoga-core` is the transformation engine used in `DataYoga`, a framework for building and generating data pipelines.## Installation```bashpip install datayoga-core```## Quick StartThis demonstrates how to transform data using a DataYoga job.### Create a JobUse this `example.yaml`:```yamlsteps:  - uses: add_field    with:      fields:        - field: full_name          language: jmespath          expression: concat([fname, ' ' , lname])        - field: country          language: sql          expression: country_code || ' - ' || UPPER(country_name)  - uses: rename_field    with:      fields:        - from_field: fname          to_field: first_name        - from_field: lname          to_field: last_name  - uses: remove_field    with:      fields:        - field: credit_card        - field: country_name        - field: country_code  - uses: map    with:      expression:        {          first_name: first_name,          last_name: last_name,          greeting: &quot;'Hello ' || CASE WHEN gender = 'F' THEN 'Ms.' WHEN gender = 'M' THEN 'Mr.' ELSE 'N/A' END || ' ' || full_name&quot;,          country: country,          full_name: full_name        }      language: sql```### Transform Data Using `datayoga-core`Use this code snippet to transform a data record using the job defined [above](#create-a-job). The transform method returns a tuple of processed, filtered, and rejected records:```pythonimport datayoga_core as dyfrom datayoga_core.job import Jobfrom datayoga_core.result import Result, Statusfrom datayoga_core.utils import read_yamljob_settings = read_yaml(&quot;example.yaml&quot;)job = dy.compile(job_settings)assert job.transform([{&quot;fname&quot;: &quot;jane&quot;, &quot;lname&quot;: &quot;smith&quot;, &quot;country_code&quot;: 1, &quot;country_name&quot;: &quot;usa&quot;, &quot;credit_card&quot;: &quot;1234-5678-0000-9999&quot;, &quot;gender&quot;: &quot;F&quot;}]).processed == [  Result(status=Status.SUCCESS, payload={&quot;first_name&quot;: &quot;jane&quot;, &quot;last_name&quot;: &quot;smith&quot;, &quot;country&quot;: &quot;1 - USA&quot;, &quot;full_name&quot;: &quot;jane smith&quot;, &quot;greeting&quot;: &quot;Hello Ms. jane smith&quot;})]```The job can also be provided as a parsed json inline:```pythonimport datayoga_core as dyfrom datayoga_core.job import Jobfrom datayoga_core.result import Result, Statusimport yamlimport textwrapjob_settings = textwrap.dedent(&quot;&quot;&quot;  steps:    - uses: add_field      with:        fields:          - field: full_name            language: jmespath            expression: concat([fname, ' ' , lname])          - field: country            language: sql            expression: country_code || ' - ' || UPPER(country_name)    - uses: rename_field      with:        fields:          - from_field: fname            to_field: first_name          - from_field: lname            to_field: last_name    - uses: remove_field      with:        fields:          - field: credit_card          - field: country_name          - field: country_code    - uses: map      with:        expression:          {            first_name: first_name,            last_name: last_name,            greeting: &quot;'Hello ' || CASE WHEN gender = 'F' THEN 'Ms.' WHEN gender = 'M' THEN 'Mr.' ELSE 'N/A' END || ' ' || full_name&quot;,            country: country,            full_name: full_name          }        language: sql&quot;&quot;&quot;)job = dy.compile(yaml.safe_load(job_settings))assert job.transform([{&quot;fname&quot;: &quot;jane&quot;, &quot;lname&quot;: &quot;smith&quot;, &quot;country_code&quot;: 1, &quot;country_name&quot;: &quot;usa&quot;, &quot;credit_card&quot;: &quot;1234-5678-0000-9999&quot;, &quot;gender&quot;: &quot;F&quot;}]).processed == [  Result(status=Status.SUCCESS, payload={&quot;first_name&quot;: &quot;jane&quot;, &quot;last_name&quot;: &quot;smith&quot;, &quot;country&quot;: &quot;1 - USA&quot;, &quot;full_name&quot;: &quot;jane smith&quot;, &quot;greeting&quot;: &quot;Hello Ms. jane smith&quot;})]```As can be seen, the record has been transformed based on the job:- `fname` field renamed to `first_name`.- `lname` field renamed to `last_name`.- `country` field added based on an SQL expression.- `full_name` field added based on a [JMESPath](https://jmespath.org/) expression.- `greeting` field added based on an SQL expression.### Examples- Add a new field `country` out of an SQL expression that concatenates `country_code` and `country_name` fields after upper case the later:  ```yaml  uses: add_field  with:    field: country    language: sql    expression: country_code || ' - ' || UPPER(country_name)  ```- Rename `fname` field to `first_name` and `lname` field to `last_name`:  ```yaml  uses: rename_field  with:    fields:      - from_field: fname        to_field: first_name      - from_field: lname        to_field: last_name  ```- Remove `credit_card` field:  ```yaml  uses: remove_field  with:    field: credit_card  ```For a full list of supported block types [see reference](https://datayoga-io.github.io/library).## Expression LanguageDataYoga supports both SQL and [JMESPath](https://jmespath.org/) expressions. JMESPath are especially useful to handle nested JSON data, while SQL is more suited to flat row-like structures.For more information about custom functions and supported expression language syntax [see reference](https://datayoga-io.github.io/expressions).</longdescription>
</pkgmetadata>