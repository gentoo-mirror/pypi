<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pysec_downloader downloader for sec filings and other data available from the sec install:        pip install pysec_downloader    Features: supports most filings, needs a lot of refining still. exposes some of the sec xbrl api. self updating lookup table for ticker:cik so we can search xbrl api with ticker instead of only cik. not async as the rate limit of the sec is quite low so the benefit for the added complexity is minimal (correct me if I am wrong).no tests at the moment.## usage:### General Usage```python# Make sure you have needed permission for the root_path!# Instantiate the Downloader and download some 10-Q Filings as XBRL for AAPLdl = Downloader(r&quot;C:\Users\Download_Folder&quot;, user_agent=&quot;john smith js@test.com&quot;)dl.get_filings(    ticker_or_cik=&quot;AAPL&quot;,    form_type=&quot;10-Q&quot;,    after_date=&quot;2019-01-01&quot;,    before_date=&quot;&quot;,    prefered_file_type=&quot;xbrl&quot;,    number_of_filings=10,    want_amendments=False,    skip_not_prefered_extension=True,    save=True)# if the `number_of_filings` is large you might consider using `get_filings_bulk()` # instead of `get_filings()` for a more efficent index creation.```### Bulk Files (companyfacts XBRL and submissions)```python# get Facts (individual values) from a single Concept (&quot;AccountPayableCurrent&quot;) of a Taxonomy (&quot;us-gaap&quot;)facts_file = dl.get_xbrl_companyconcept(&quot;AAPL&quot;, &quot;us-gaap&quot;, &quot;AccountsPayableCurrent&quot;)``````python# download the zip containing all information on submissions of every company and extract it# Calling `get_bulk_submissions` or `get_bulk_companyfacts` downloads &gt;10GB of files!dl.get_bulk_submissions()# get the company-ticker map/file other_file = dl.get_file_company_tickers()```### 13f securities (CUSIPS of most securities)Get the file containg all CUSIPS relating to 13f securities (as defined in [17 CFR ยง 240.13f-1](https://www.law.cornell.edu/cfr/text/17/240.13f-1)) ```python# download the most current 13f securities pdfdl.get_13f_securities_pdf(path_to/save_as.pdf)# get a byte reprensentation of the pdf without saving itdl.get_13f_securities_pdf(target_path=None)```easy way to convert the 13f securities pdf into a usuable dataframe/list -&gt; [tabula-py](https://github.com/chezou/tabula-py)```pythonfrom tabula import read_pdffrom pathlib import Pathimport pandas as pddef convert_13f_securities_pdf(pdf_path: str, target_path: str=None, mode: str=&quot;csv&quot;, overwrite=True):    '''    Args:        pdf_path: path to the pdf file        target_path: output file        mode: set output mode. valid modes are: 'csv'         Raises:        FileExistsError: if overwrite is False and a file already exists at target_path    '''    df = read_pdf(pdf_path, pages=&quot;all&quot;, pandas_options={&quot;header&quot;: None})            if mode == &quot;csv&quot;:        if Path(target_path).is_file():            if overwrite is False:                raise FileExistsError(&quot;a file with that name already exists&quot;)            else:                Path(target_path).unlink()    dfs = []    for d in df:        if d.shape[1] == 5:            d = d.drop(d.columns[1], axis=&quot;columns&quot;)        if d.shape[1] == 4:            d = d.drop(d.columns[-1], axis=&quot;columns&quot;)        if mode == &quot;csv&quot;:            d.to_csv(target_path, mode=&quot;a&quot;, index=False, header=False)        if target_path is None:            dfs.append(d)    if target_path is None:        return dfs```### Usage of IndexHandler```python# check if S-3's were filed after &quot;2020-01-01&quot;, get the submission info and download them.newfiles = dl.index_handler.get_newer_filings_meta(&quot;0001718405&quot;, &quot;2020-01-01&quot;, set([&quot;S-3&quot;]))for key, values in newfiles.items():    for v in values:        dl.get_filing_by_accession_number(key, *v)# If you dont know the CIK call `dl._convert_to_cik10(ticker)` to get it# check the index for none existing files and remove the entries from the indexdl.index_handler.check_index()# get index entry of downloaded filings with the same file numberdl.index_handler.get_related_filings(&quot;some cik&quot;, &quot;some file number&quot;)```</longdescription>
</pkgmetadata>