<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/betcode-org&quot;&gt;    &lt;img src=&quot;docs/images/logo-full.png&quot; title=&quot;betcode-org&quot;&gt;  &lt;/a&gt;&lt;/p&gt;# flÅ«mine![Build Status](https://github.com/betcode-org/flumine/actions/workflows/test.yml/badge.svg) [![Coverage Status](https://coveralls.io/repos/github/liampauling/flumine/badge.svg?branch=master)](https://coveralls.io/github/liampauling/flumine?branch=master) [![PyPI version](https://badge.fury.io/py/flumine.svg)](https://pypi.python.org/pypi/flumine) [![Downloads](https://pepy.tech/badge/flumine)](https://pepy.tech/project/flumine)Betting trading framework with a focus on:- simplicity- modular- pythonic- rock-solid- safe![Backtesting Analysis](docs/images/jupyterloggingcontrol-screenshot.png?raw=true &quot;Jupyter Logging Control Screenshot&quot;)Support for market, order and custom streaming data.[docs](https://betcode-org.github.io/flumine/)[join betcode slack group](https://join.slack.com/t/betcode-org/shared_invite/zt-h0ato238-PPbfU_T7Ji0ORjz0ESIJkg)Tested on Python 3.8, 3.9, 3.10 and 3.11.## installation```$ pip install flumine```flumine requires Python 3.8+## setupGet started...```pythonimport betfairlightweightfrom flumine import Flumine, clientstrading = betfairlightweight.APIClient(&quot;username&quot;)client = clients.BetfairClient(trading)framework = Flumine(    client=client,)```Example strategy:```pythonfrom flumine import BaseStrategyfrom flumine.order.trade import Tradefrom flumine.order.order import LimitOrder, OrderStatusfrom flumine.markets.market import Marketfrom betfairlightweight.filters import streaming_market_filterfrom betfairlightweight.resources import MarketBookclass ExampleStrategy(BaseStrategy):    def start(self) -&gt; None:        print(&quot;starting strategy 'ExampleStrategy'&quot;)    def check_market_book(self, market: Market, market_book: MarketBook) -&gt; bool:        # process_market_book only executed if this returns True        if market_book.status != &quot;CLOSED&quot;:            return True    def process_market_book(self, market: Market, market_book: MarketBook) -&gt; None:        # process marketBook object        for runner in market_book.runners:            if runner.status == &quot;ACTIVE&quot; and runner.last_price_traded &lt; 1.5:                trade = Trade(                    market_id=market_book.market_id,                    selection_id=runner.selection_id,                    handicap=runner.handicap,                    strategy=self                )                order = trade.create_order(                    side=&quot;LAY&quot;,                    order_type=LimitOrder(price=1.01, size=2.00)                )                market.place_order(order)    def process_orders(self, market: Market, orders: list) -&gt; None:        for order in orders:            if order.status == OrderStatus.EXECUTABLE:                if order.size_remaining == 2.00:                    market.cancel_order(order, 0.02)  # reduce size to 1.98                if order.order_type.persistence_type == &quot;LAPSE&quot;:                    market.update_order(order, &quot;PERSIST&quot;)                if order.size_remaining &gt; 0:                    market.replace_order(order, 1.02)  # movestrategy = ExampleStrategy(    market_filter=streaming_market_filter(        event_type_ids=[&quot;7&quot;],        country_codes=[&quot;GB&quot;],        market_types=[&quot;WIN&quot;],    ))framework.add_strategy(strategy)```Run framework:```pythonframework.run()```## Features- Streaming- Multiple strategies- Multiple clients- Order execution- Paper trading- Simulation- Event simulation (multi market)- Middleware and background workers to enable Scores / RaceCard / InPlayService## Dependenciesflumine relies on these libraries:* `betfairlightweight` - Betfair API support* `tenacity` - Used for connection retrying (streaming)* `python-json-logger` - JSON logging* `requests` - HTTP support* `smart-open` - Efficient streaming of very large files from/to storages such as S3, including (de)compression</longdescription>
</pkgmetadata>