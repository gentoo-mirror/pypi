<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. -*- mode: rst -*-pyfortified-logging-------------------This Python project is an extension of the native Python component `logging &lt;https://docs.python.org/3/library/logging.html&gt;`_providing more robust message formatting for standard and JSON logging output, and in addtion allowing for extracontent populated as dictionaries.pypi.org^^^^^^^^https://pypi.org/project/pyfortified-logging/Work In Progress^^^^^^^^^^^^^^^^The following still needs to be performed for this Python project:- Unit-testing: This project will be switching over to using Python native Unit testing framework `unittest &lt;https://docs.python.org/3/library/unittest.html&gt;`_.- More concise documentation is required.- Travis CI- BadgesBadges------Install-------.. code-block:: bash    pip install pyfortified_loggingArchitecture------------Function: get_logger()----------------------.. code-block:: python    def get_logger(        logger_name,        logger_version=None,        logger_level=logging.INFO,        logger_format=LoggingFormat.JSON,        logger_output=LoggingOutput.STDOUT_COLOR,        logger_handler=None    ):get_logger(): Parameters^^^^^^^^^^^^^^^^^^^^^^^^+-----------------+-------------------------------------------------------------------------------------------------------------------------+| Parameter       | Purpose                                                                                                                 |+=================+=========================================================================================================================+| logger_name     | Return a logger with the specified name or, if name is None, return a logger which is the root logger of the hierarchy. |+-----------------+-------------------------------------------------------------------------------------------------------------------------+| logger_version  |                                                                                                                         |+-----------------+-------------------------------------------------------------------------------------------------------------------------+| logger_format   | LoggingFormat                                                                                                           |+-----------------+-------------------------------------------------------------------------------------------------------------------------+| logger_output   | LoggingOutput                                                                                                           |+-----------------+-------------------------------------------------------------------------------------------------------------------------+| logger_handler  | logging.StreamHandler() or logging.FileHandler()                                                                        |+-----------------+-------------------------------------------------------------------------------------------------------------------------+Logging Levels^^^^^^^^^^^^^^Same Python logging levels, including one additional level NOTE.+------------+------------------------------------------------------------------------------------------------------------------------------------------------+| Level      | Purpose                                                                                                                                        |+============+================================================================================================================================================+| DEBUG      | Detailed information, typically of interest only when diagnosing problems.                                                                     |+------------+------------------------------------------------------------------------------------------------------------------------------------------------+| NOTE       | Detailed information, request processing, for example, request using cURL.                                                                     |+------------+------------------------------------------------------------------------------------------------------------------------------------------------+| INFO       | Confirmation that things are working as expected.  *[DEFAULT]*                                                                                 |+------------+------------------------------------------------------------------------------------------------------------------------------------------------+| WARNING    | An indication that something unexpected happened, or indicative of some problem in the near future. The software is still working as expected. |+------------+------------------------------------------------------------------------------------------------------------------------------------------------+| ERROR      | Due to a more serious problem, the software has not been able to perform some function.                                                        |+------------+------------------------------------------------------------------------------------------------------------------------------------------------+| CRITICAL   | A serious error, indicating that the program itself may be unable to continue running.                                                         |+------------+------------------------------------------------------------------------------------------------------------------------------------------------+Logging Format^^^^^^^^^^^^^^+------------+-------------------------------------------------------------------------------------------------------+| Format     | Purpose                                                                                               |+============+=======================================================================================================+| STANDARD   | Standard logging format.                                                                              |+------------+-------------------------------------------------------------------------------------------------------+| JSON       | JSON logging format.  *[DEFAULT]*                                                                     |+------------+-------------------------------------------------------------------------------------------------------+.. code-block:: python    class LoggingFormat(object):        &quot;&quot;&quot;TUNE Logging Format ENUM        &quot;&quot;&quot;        STANDARD = &quot;standard&quot;        JSON = &quot;json&quot;Logging Output^^^^^^^^^^^^^^+--------------+----------------------------------------------------------------------------------------------+| Output       | Purpose                                                                                      |+==============+==============================================================================================+| STDOUT       | Standard Output to terminal                                                                  |+--------------+----------------------------------------------------------------------------------------------+| STDOUT_COLOR | Standard Output using colored terminal                                                       |+--------------+----------------------------------------------------------------------------------------------+| FILE         | Standard Output to file created within *./tmp/log_&lt;epoch time seconds&gt;.json*.                |+--------------+----------------------------------------------------------------------------------------------+.. code-block:: python    class LoggingOutput(object):        &quot;&quot;&quot;Logging Format ENUM        &quot;&quot;&quot;        STDOUT = &quot;stdout&quot;        STDOUT_COLOR = &quot;color&quot;        FILE = &quot;file&quot;Logging JSON Format^^^^^^^^^^^^^^^^^^^.. code-block:: python    import logging    from pyfortified_logging import (LoggingFormat, get_logger, __version__)    log = get_logger(        logger_name=__name__,        logger_version=__version__,        logger_format=LoggingFormat.JSON,        logger_level=logging.NOTE    )    log.info(&quot;logging: info&quot;, extra={'test': __name__})    log.note(&quot;logging: note&quot;, extra={'test': __name__})    log.debug(&quot;logging: debug&quot;, extra={'test': __name__})    log.warning(&quot;logging: warning&quot;, extra={'test': __name__})    log.error(&quot;logging: error&quot;, extra={'test': __name__})    log.critical(&quot;logging: critical&quot;, extra={'test': __name__})    log.exception(&quot;logging: exception&quot;, extra={'test': __name__})Logging JSON Example Output^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: bash    $ python3 examples/example_logging_json.py    {&quot;asctime&quot;: &quot;2018-05-11 05:41:39 -0700&quot;, &quot;levelname&quot;: &quot;INFO&quot;, &quot;name&quot;: &quot;__main__&quot;,    &quot;version&quot;: &quot;0.1.6&quot;, &quot;message&quot;: &quot;logging: info&quot;, &quot;test&quot;: &quot;__main__&quot;}    {&quot;asctime&quot;: &quot;2018-05-11 05:41:39 -0700&quot;, &quot;levelname&quot;: &quot;NOTE&quot;, &quot;name&quot;: &quot;__main__&quot;,    &quot;version&quot;: &quot;0.1.6&quot;, &quot;message&quot;: &quot;logging: note&quot;, &quot;test&quot;: &quot;__main__&quot;}    {&quot;asctime&quot;: &quot;2018-05-11 05:41:39 -0700&quot;, &quot;levelname&quot;: &quot;WARNING&quot;, &quot;name&quot;: &quot;__main__&quot;,    &quot;version&quot;: &quot;0.1.6&quot;, &quot;message&quot;: &quot;logging: warning&quot;, &quot;test&quot;: &quot;__main__&quot;}    {&quot;asctime&quot;: &quot;2018-05-11 05:41:39 -0700&quot;, &quot;levelname&quot;: &quot;ERROR&quot;, &quot;name&quot;: &quot;__main__&quot;,    &quot;version&quot;: &quot;0.1.6&quot;, &quot;message&quot;: &quot;logging: error&quot;, &quot;test&quot;: &quot;__main__&quot;}    {&quot;asctime&quot;: &quot;2018-05-11 05:41:39 -0700&quot;, &quot;levelname&quot;: &quot;CRITICAL&quot;, &quot;name&quot;: &quot;__main__&quot;,    &quot;version&quot;: &quot;0.1.6&quot;, &quot;message&quot;: &quot;logging: critical&quot;, &quot;test&quot;: &quot;__main__&quot;}    {&quot;asctime&quot;: &quot;2018-05-11 05:41:39 -0700&quot;, &quot;levelname&quot;: &quot;ERROR&quot;, &quot;name&quot;: &quot;__main__&quot;,    &quot;version&quot;: &quot;0.1.6&quot;, &quot;message&quot;: &quot;logging: exception&quot;, &quot;exc_info&quot;: &quot;NoneType: None&quot;,    &quot;test&quot;: &quot;__main__&quot;}Requirements------------``pyfortified-logging`` module is built upon Python 3 and has dependencies uponseveral Python modules available within `Python Package Index PyPI &lt;https://pypi.python.org/pypi&gt;`_... code-block:: bash    make install-requirementsor.. code-block:: bash    python3 -m pip uninstall --yes --no-input -r requirements.txt    python3 -m pip install --upgrade -r requirements.txtDependencies^^^^^^^^^^^^- coloredlogs: https://pypi.python.org/pypi/coloredlogs- pprintpp: https://pypi.python.org/pypi/pprintpp- python-json-logger: https://pypi.python.org/pypi/python-json-logger- Pygments: https://pypi.python.org/pypi/Pygments- wheel: https://pypi.python.org/pypi/wheel</longdescription>
</pkgmetadata>