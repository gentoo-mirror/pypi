<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>vConnector - VMware vSphere Connector Module for Python=======================================================.. image:: https://img.shields.io/pypi/v/vconnector.svg    :target: https://pypi.python.org/pypi/vconnector/    :alt: Latest Version.. image:: https://img.shields.io/pypi/dm/vconnector.svg    :target: https://pypi.python.org/pypi/vconnector/    :alt: DownloadsvConnector is a wrapper module around`pyVmomi VMware vSphere bindings &lt;https://github.com/vmware/pyvmomi&gt;`_,which provides methods for connecting and retrieving ofobjects from a VMware vSphere server.The purpose of vConnector is to provide the basic primitives forbuilding complex applications. vConnector can also be used formanaging the user/pass/host credentials for your vSphere environmentusing an SQLite database, which in turn can be shared betweenmultiple applications requiring access to your vSphere environmentthrough a common interface.Requirements============* `Python 2.7.x, 3.2.x or later &lt;https://www.python.org/&gt;`_* `docopt &lt;https://github.com/docopt/docopt&gt;`_* `pyVmomi &lt;https://github.com/vmware/pyvmomi&gt;`_* `tabulate &lt;https://pypi.python.org/pypi/tabulate&gt;`_Contributions=============vConnector is hosted on`Github &lt;https://github.com/dnaeon/py-vconnector&gt;`_. Please contributeby reporting issues, suggesting features or by sending patchesusing pull requests.Installation============The easiest way to install vConnector is by using ``pip``:.. code-block:: bash   $ pip install vconnectorIn order to install the latest version of vConnector from theGithub repository simply execute these commands instead:.. code-block:: bash   $ git clone https://github.com/dnaeon/py-vconnector.git   $ cd py-vconnector   $ python setup.py installApplications using vConnector module====================================* `vPoller - Distributed vSphere API Proxy &lt;https://github.com/dnaeon/py-vpoller&gt;`_* `vEvents - VMware vSphere Events from the command-line &lt;https://github.com/dnaeon/py-vevents&gt;`_Using the vconnector-cli tool=============================Using the ``vconnector-cli`` tool you can manage the user/pass/hostcredentials of your vSphere environment. The ``vconnector-cli`` toolstores this information in an SQLite database file,which also makes it easy to be shared between applications.First, initialize the vConnector database by executing thecommand below:.. code-block:: bash   $ vconnector-cli initHere is how to add a new vSphere host to the vConnector database:.. code-block:: bash   $ vconnector-cli -H vc01.example.org -U root -P p4ssw0rd addHere is how to update an already existing vSphere hostfrom the vConnector database:.. code-block:: bash   $ vconnector-cli -H vc01.example.org -U root -P newp4ssw0rd updateHere is how to remove a vSphere host using vconnector-cli:.. code-block:: bash   $ vconnector-cli -H vc01.example.org removeHere is how to enable a vSphere host using vconnector-cli:.. code-block:: bash   $ vconnector-cli -H vc01.example.org enableHere this is how to disable a vSphere host:.. code-block:: bash   $ vconnector-cli -H vc01.example.org disableAnd here is how to get the currently registered vSphere hosts fromthe vConnector database:.. code-block:: bash   $ vconnector-cli get   +---------------------------+---------------------+--------------+-----------+   | Hostname                  | Username            | Password     |   Enabled |   +===========================+=====================+==============+===========+   | vc01.example.org          | root                | p4ssw0rd     |         0 |   +---------------------------+---------------------+--------------+-----------+   Using the vConnector API========================Here are a few examples of using the ``vconnector`` module API.Connecting to a vSphere host:.. code-block:: python   &gt;&gt;&gt; from vconnector.core import VConnector   &gt;&gt;&gt; client = VConnector(   ...     user='root',   ...     pwd='p4ssw0rd',   ...     host='vc01.example.org'   ...)   &gt;&gt;&gt; client.connect()Disconnecting from a vSphere host:.. code-block:: python   &gt;&gt;&gt; client.disconnect()Re-connecting to a vSphere host:.. code-block:: python   &gt;&gt;&gt; client.reconnect()How to get a ``VMware vSphere View`` of all ``VirtualMachine``managed objects:.. code-block:: python   &gt;&gt;&gt; from __future__ import print_function   &gt;&gt;&gt; from vconnector.core import VConnector   &gt;&gt;&gt; client = VConnector(   ...     user='root',   ...     pwd='p4ssw0rd',   ...     host='vc01.example.org'   ...)   &gt;&gt;&gt; client.connect()   &gt;&gt;&gt; vms = client.get_vm_view()   &gt;&gt;&gt; print(vms.view)   (ManagedObject) ['vim.VirtualMachine:vm-36','vim.VirtualMachine:vm-129','vim.VirtualMachine:vm-162','vim.VirtualMachine:vm-146','vim.VirtualMachine:vm-67','vim.VirtualMachine:vm-147','vim.VirtualMachine:vm-134','vim.VirtualMachine:vm-88'   ]   &gt;&gt;&gt; client.disconnect()How to get a ``Managed Object`` by a specific property, e.g. find theManaged Object of an ESXi host which name is ``esxi01.example.org``:.. code-block:: python   &gt;&gt;&gt; from __future__ import print_function   &gt;&gt;&gt; import pyVmomi   &gt;&gt;&gt; from vconnector.core import VConnector   &gt;&gt;&gt; client = VConnector(   ...     user='root',   ...     pwd='p4ssw0rd',   ...     host='vc01.example.org'   ... )   &gt;&gt;&gt; client.connect()   &gt;&gt;&gt; host = client.get_object_by_property(   ...     property_name='name',   ...     property_value='esxi01.example.org',   ...     obj_type=pyVmomi.vim.HostSystem   ... )   &gt;&gt;&gt; print(host.name)   'esxi01.example.org'   &gt;&gt;&gt; client.disconnect()How to collect properties for ``vSphere Managed Objects``, e.g. getthe ``name`` and ``capacity`` properties for all ``Datastore``managed objects:.. code-block:: python   &gt;&gt;&gt; from __future__ import print_function   &gt;&gt;&gt; import pyVmomi   &gt;&gt;&gt; from vconnector.core import VConnector   &gt;&gt;&gt; client = VConnector(   ...     user='root',   ...     pwd='p4ssw0rd',   ...     host='vc01.example.org'   ... )   &gt;&gt;&gt; client.connect()   &gt;&gt;&gt; datastores = client.get_datastore_view()   &gt;&gt;&gt; result = client.collect_properties(   ...     view_ref=datastores,   ...     obj_type=pyVmomi.vim.Datastore,   ...     path_set=['name', 'summary.capacity']   ...)   &gt;&gt;&gt; print(result)   [{u'summary.capacity': 994821799936L, u'name': 'datastore1'}]   &gt;&gt;&gt; client.disconnect()</longdescription>
</pkgmetadata>