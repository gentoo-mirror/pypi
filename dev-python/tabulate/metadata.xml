<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-tabulate===============Pretty-print tabular data in Python, a library and a command-lineutility.The main use cases of the library are:-   printing small tables without hassle: just one function call,    formatting is guided by the data itself-   authoring tabular data for lightweight plain-text markup: multiple    output formats suitable for further editing or transformation-   readable presentation of mixed textual and numeric data: smart    column alignment, configurable number formatting, alignment by a    decimal pointInstallation------------To install the Python library and the command line utility, run:```shellpip install tabulate```The command line utility will be installed as `tabulate` to `bin` onLinux (e.g. `/usr/bin`); or as `tabulate.exe` to `Scripts` in yourPython installation on Windows (e.g. `C:\Python39\Scripts\tabulate.exe`).You may consider installing the library only for the current user:```shellpip install tabulate --user```In this case the command line utility will be installed to`~/.local/bin/tabulate` on Linux and to`%APPDATA%\Python\Scripts\tabulate.exe` on Windows.To install just the library on Unix-like operating systems:```shellTABULATE_INSTALL=lib-only pip install tabulate```On Windows:```shellset TABULATE_INSTALL=lib-onlypip install tabulate```Build status------------[![Build status](https://circleci.com/gh/astanin/python-tabulate.svg?style=svg)](https://circleci.com/gh/astanin/python-tabulate/tree/master) [![Build status](https://ci.appveyor.com/api/projects/status/8745yksvvol7h3d7/branch/master?svg=true)](https://ci.appveyor.com/project/astanin/python-tabulate/branch/master)Library usage-------------The module provides just one function, `tabulate`, which takes a list oflists or another tabular data type as the first argument, and outputs anicely formatted plain-text table:```pycon&gt;&gt;&gt; from tabulate import tabulate&gt;&gt;&gt; table = [[&quot;Sun&quot;,696000,1989100000],[&quot;Earth&quot;,6371,5973.6],...          [&quot;Moon&quot;,1737,73.5],[&quot;Mars&quot;,3390,641.85]]&gt;&gt;&gt; print(tabulate(table))-----  ------  -------------Sun    696000     1.9891e+09Earth    6371  5973.6Moon     1737    73.5Mars     3390   641.85-----  ------  -------------```The following tabular data types are supported:-   list of lists or another iterable of iterables-   list or another iterable of dicts (keys as columns)-   dict of iterables (keys as columns)-   list of dataclasses (Python 3.7+ only, field names as columns)-   two-dimensional NumPy array-   NumPy record arrays (names as columns)-   pandas.DataFrameTabulate is a Python3 library.### HeadersThe second optional argument named `headers` defines a list of columnheaders to be used:```pycon&gt;&gt;&gt; print(tabulate(table, headers=[&quot;Planet&quot;,&quot;R (km)&quot;, &quot;mass (x 10^29 kg)&quot;]))Planet      R (km)    mass (x 10^29 kg)--------  --------  -------------------Sun         696000           1.9891e+09Earth         6371        5973.6Moon          1737          73.5Mars          3390         641.85```If `headers=&quot;firstrow&quot;`, then the first row of data is used:```pycon&gt;&gt;&gt; print(tabulate([[&quot;Name&quot;,&quot;Age&quot;],[&quot;Alice&quot;,24],[&quot;Bob&quot;,19]],...                headers=&quot;firstrow&quot;))Name      Age------  -----Alice      24Bob        19```If `headers=&quot;keys&quot;`, then the keys of a dictionary/dataframe, or columnindices are used. It also works for NumPy record arrays and lists ofdictionaries or named tuples:```pycon&gt;&gt;&gt; print(tabulate({&quot;Name&quot;: [&quot;Alice&quot;, &quot;Bob&quot;],...                 &quot;Age&quot;: [24, 19]}, headers=&quot;keys&quot;))  Age  Name-----  ------   24  Alice   19  Bob```### Row IndicesBy default, only pandas.DataFrame tables have an additional columncalled row index. To add a similar column to any other type of table,pass `showindex=&quot;always&quot;` or `showindex=True` argument to `tabulate()`.To suppress row indices for all types of data, pass `showindex=&quot;never&quot;`or `showindex=False`. To add a custom row index column, pass`showindex=rowIDs`, where `rowIDs` is some iterable:```pycon&gt;&gt;&gt; print(tabulate([[&quot;F&quot;,24],[&quot;M&quot;,19]], showindex=&quot;always&quot;))-  -  --0  F  241  M  19-  -  --```### Table formatThere is more than one way to format a table in plain text. The thirdoptional argument named `tablefmt` defines how the table is formatted.Supported table formats are:-   &quot;plain&quot;-   &quot;simple&quot;-   &quot;github&quot;-   &quot;grid&quot;-   &quot;simple\_grid&quot;-   &quot;rounded\_grid&quot;-   &quot;heavy\_grid&quot;-   &quot;mixed\_grid&quot;-   &quot;double\_grid&quot;-   &quot;fancy\_grid&quot;-   &quot;outline&quot;-   &quot;simple\_outline&quot;-   &quot;rounded\_outline&quot;-   &quot;heavy\_outline&quot;-   &quot;mixed\_outline&quot;-   &quot;double\_outline&quot;-   &quot;fancy\_outline&quot;-   &quot;pipe&quot;-   &quot;orgtbl&quot;-   &quot;asciidoc&quot;-   &quot;jira&quot;-   &quot;presto&quot;-   &quot;pretty&quot;-   &quot;psql&quot;-   &quot;rst&quot;-   &quot;mediawiki&quot;-   &quot;moinmoin&quot;-   &quot;youtrack&quot;-   &quot;html&quot;-   &quot;unsafehtml&quot;-   &quot;latex&quot;-   &quot;latex\_raw&quot;-   &quot;latex\_booktabs&quot;-   &quot;latex\_longtable&quot;-   &quot;textile&quot;-   &quot;tsv&quot;`plain` tables do not use any pseudo-graphics to draw lines:```pycon&gt;&gt;&gt; table = [[&quot;spam&quot;,42],[&quot;eggs&quot;,451],[&quot;bacon&quot;,0]]&gt;&gt;&gt; headers = [&quot;item&quot;, &quot;qty&quot;]&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;plain&quot;))item      qtyspam       42eggs      451bacon       0````simple` is the default format (the default may change in futureversions). It corresponds to `simple_tables` in [Pandoc Markdownextensions](http://johnmacfarlane.net/pandoc/README.html#tables):```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;simple&quot;))item      qty------  -----spam       42eggs      451bacon       0````github` follows the conventions of GitHub flavored Markdown. Itcorresponds to the `pipe` format without alignment colons:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;github&quot;))| item   | qty   ||--------|-------|| spam   | 42    || eggs   | 451   || bacon  | 0     |````grid` is like tables formatted by Emacs'[table.el](http://table.sourceforge.net/) package. It corresponds to`grid_tables` in Pandoc Markdown extensions:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;grid&quot;))+--------+-------+| item   |   qty |+========+=======+| spam   |    42 |+--------+-------+| eggs   |   451 |+--------+-------+| bacon  |     0 |+--------+-------+````simple_grid` draws a grid using single-line box-drawing characters:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;simple_grid&quot;))    ┌────────┬───────┐    │ item   │   qty │    ├────────┼───────┤    │ spam   │    42 │    ├────────┼───────┤    │ eggs   │   451 │    ├────────┼───────┤    │ bacon  │     0 │    └────────┴───────┘`rounded_grid` draws a grid using single-line box-drawing characters with rounded corners:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;rounded_grid&quot;))    ╭────────┬───────╮    │ item   │   qty │    ├────────┼───────┤    │ spam   │    42 │    ├────────┼───────┤    │ eggs   │   451 │    ├────────┼───────┤    │ bacon  │     0 │    ╰────────┴───────╯`heavy_grid` draws a grid using bold (thick) single-line box-drawing characters:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;heavy_grid&quot;))    ┏━━━━━━━━┳━━━━━━━┓    ┃ item   ┃   qty ┃    ┣━━━━━━━━╋━━━━━━━┫    ┃ spam   ┃    42 ┃    ┣━━━━━━━━╋━━━━━━━┫    ┃ eggs   ┃   451 ┃    ┣━━━━━━━━╋━━━━━━━┫    ┃ bacon  ┃     0 ┃    ┗━━━━━━━━┻━━━━━━━┛`mixed_grid` draws a grid using a mix of light (thin) and heavy (thick) lines box-drawing characters:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;mixed_grid&quot;))    ┍━━━━━━━━┯━━━━━━━┑    │ item   │   qty │    ┝━━━━━━━━┿━━━━━━━┥    │ spam   │    42 │    ├────────┼───────┤    │ eggs   │   451 │    ├────────┼───────┤    │ bacon  │     0 │    ┕━━━━━━━━┷━━━━━━━┙`double_grid` draws a grid using double-line box-drawing characters:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;double_grid&quot;))    ╔════════╦═══════╗    ║ item   ║   qty ║    ╠════════╬═══════╣    ║ spam   ║    42 ║    ╠════════╬═══════╣    ║ eggs   ║   451 ║    ╠════════╬═══════╣    ║ bacon  ║     0 ║    ╚════════╩═══════╝`fancy_grid` draws a grid using a mix of single and    double-line box-drawing characters:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;fancy_grid&quot;))╒════════╤═══════╕│ item   │   qty │╞════════╪═══════╡│ spam   │    42 │├────────┼───────┤│ eggs   │   451 │├────────┼───────┤│ bacon  │     0 │╘════════╧═══════╛````outline` is the same as the `grid` format but doesn't draw lines between rows:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;outline&quot;))    +--------+-------+    | item   |   qty |    +========+=======+    | spam   |    42 |    | eggs   |   451 |    | bacon  |     0 |    +--------+-------+`simple_outline` is the same as the `simple_grid` format but doesn't draw lines between rows:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;simple_outline&quot;))    ┌────────┬───────┐    │ item   │   qty │    ├────────┼───────┤    │ spam   │    42 │    │ eggs   │   451 │    │ bacon  │     0 │    └────────┴───────┘`rounded_outline` is the same as the `rounded_grid` format but doesn't draw lines between rows:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;rounded_outline&quot;))    ╭────────┬───────╮    │ item   │   qty │    ├────────┼───────┤    │ spam   │    42 │    │ eggs   │   451 │    │ bacon  │     0 │    ╰────────┴───────╯`heavy_outline` is the same as the `heavy_grid` format but doesn't draw lines between rows:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;heavy_outline&quot;))    ┏━━━━━━━━┳━━━━━━━┓    ┃ item   ┃   qty ┃    ┣━━━━━━━━╋━━━━━━━┫    ┃ spam   ┃    42 ┃    ┃ eggs   ┃   451 ┃    ┃ bacon  ┃     0 ┃    ┗━━━━━━━━┻━━━━━━━┛`mixed_outline` is the same as the `mixed_grid` format but doesn't draw lines between rows:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;mixed_outline&quot;))    ┍━━━━━━━━┯━━━━━━━┑    │ item   │   qty │    ┝━━━━━━━━┿━━━━━━━┥    │ spam   │    42 │    │ eggs   │   451 │    │ bacon  │     0 │    ┕━━━━━━━━┷━━━━━━━┙`double_outline` is the same as the `double_grid` format but doesn't draw lines between rows:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;double_outline&quot;))    ╔════════╦═══════╗    ║ item   ║   qty ║    ╠════════╬═══════╣    ║ spam   ║    42 ║    ║ eggs   ║   451 ║    ║ bacon  ║     0 ║    ╚════════╩═══════╝`fancy_outline` is the same as the `fancy_grid` format but doesn't draw lines between rows:    &gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;fancy_outline&quot;))    ╒════════╤═══════╕    │ item   │   qty │    ╞════════╪═══════╡    │ spam   │    42 │    │ eggs   │   451 │    │ bacon  │     0 │    ╘════════╧═══════╛`presto` is like tables formatted by Presto cli:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;presto&quot;)) item   |   qty--------+------- spam   |    42 eggs   |   451 bacon  |     0````pretty` attempts to be close to the format emitted by the PrettyTableslibrary:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;pretty&quot;))+-------+-----+| item  | qty |+-------+-----+| spam  | 42  || eggs  | 451 || bacon |  0  |+-------+-----+````psql` is like tables formatted by Postgres' psql cli:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;psql&quot;))+--------+-------+| item   |   qty ||--------+-------|| spam   |    42 || eggs   |   451 || bacon  |     0 |+--------+-------+````pipe` follows the conventions of [PHP MarkdownExtra](http://michelf.ca/projects/php-markdown/extra/#table) extension.It corresponds to `pipe_tables` in Pandoc. This format uses colons toindicate column alignment:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;pipe&quot;))| item   |   qty ||:-------|------:|| spam   |    42 || eggs   |   451 || bacon  |     0 |````asciidoc` formats data like a simple table of the[AsciiDoctor](https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/#tables)format:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;asciidoc&quot;))[cols=&quot;8&lt;,7&gt;&quot;,options=&quot;header&quot;]|====| item   |   qty| spam   |    42| eggs   |   451| bacon  |     0|====````orgtbl` follows the conventions of Emacs[org-mode](http://orgmode.org/manual/Tables.html), and is editable alsoin the minor orgtbl-mode. Hence its name:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;orgtbl&quot;))| item   |   qty ||--------+-------|| spam   |    42 || eggs   |   451 || bacon  |     0 |````jira` follows the conventions of Atlassian Jira markup language:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;jira&quot;))|| item   ||   qty ||| spam   |    42 || eggs   |   451 || bacon  |     0 |````rst` formats data like a simple table of the[reStructuredText](http://docutils.sourceforge.net/docs/user/rst/quickref.html#tables)format:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;rst&quot;))======  =====item      qty======  =====spam       42eggs      451bacon       0======  =====````mediawiki` format produces a table markup used in[Wikipedia](http://www.mediawiki.org/wiki/Help:Tables) and on otherMediaWiki-based sites: ```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;mediawiki&quot;)){| class=&quot;wikitable&quot; style=&quot;text-align: left;&quot;|+ &lt;!-- caption --&gt;|-! item   !! align=&quot;right&quot;|   qty|-| spam   || align=&quot;right&quot;|    42|-| eggs   || align=&quot;right&quot;|   451|-| bacon  || align=&quot;right&quot;|     0|}````moinmoin` format produces a table markup used in[MoinMoin](https://moinmo.in/) wikis:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;moinmoin&quot;))|| ''' item   ''' || ''' quantity   ''' ||||  spam    ||  41.999      ||||  eggs    ||  451         ||||  bacon   ||              ||````youtrack` format produces a table markup used in Youtrack tickets:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;youtrack&quot;))||  item    ||  quantity   |||   spam    |  41.999      ||   eggs    |  451         ||   bacon   |              |````textile` format produces a table markup used in[Textile](http://redcloth.org/hobix.com/textile/) format:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;textile&quot;))|_.  item   |_.   qty ||&lt;. spam    |&gt;.    42 ||&lt;. eggs    |&gt;.   451 ||&lt;. bacon   |&gt;.     0 |````html` produces standard HTML markup as an html.escape'd strwith a ._repr_html_ method so that Jupyter Lab and Notebook display the HTMLand a .str property so that the raw HTML remains accessible.`unsafehtml` table format can be used if an unescaped HTML is required:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;html&quot;))&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;item  &lt;/th&gt;&lt;th style=&quot;text-align: right;&quot;&gt;  qty&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;spam  &lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;   42&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;eggs  &lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;  451&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bacon &lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;    0&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;````latex` format creates a `tabular` environment for LaTeX markup,replacing special characters like `_` or `\` to their LaTeXcorrespondents:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;latex&quot;))\begin{tabular}{lr}\hline item   &amp;   qty \\\hline spam   &amp;    42 \\ eggs   &amp;   451 \\ bacon  &amp;     0 \\\hline\end{tabular}````latex_raw` behaves like `latex` but does not escape LaTeX commands andspecial characters.`latex_booktabs` creates a `tabular` environment for LaTeX markup usingspacing and style from the `booktabs` package.`latex_longtable` creates a table that can stretch along multiple pages,using the `longtable` package.### Column alignment`tabulate` is smart about column alignment. It detects columns whichcontain only numbers, and aligns them by a decimal point (or flushesthem to the right if they appear to be integers). Text columns areflushed to the left.You can override the default alignment with `numalign` and `stralign`named arguments. Possible column alignments are: `right`, `center`,`left`, `decimal` (only for numbers), and `None` (to disable alignment).Aligning by a decimal point works best when you need to compare numbersat a glance:```pycon&gt;&gt;&gt; print(tabulate([[1.2345],[123.45],[12.345],[12345],[1234.5]]))----------    1.2345  123.45   12.34512345 1234.5----------```Compare this with a more common right alignment:```pycon&gt;&gt;&gt; print(tabulate([[1.2345],[123.45],[12.345],[12345],[1234.5]], numalign=&quot;right&quot;))------1.2345123.4512.345 123451234.5------```For `tabulate`, anything which can be parsed as a number is a number.Even numbers represented as strings are aligned properly. This featurecomes in handy when reading a mixed table of text and numbers from afile:```pycon&gt;&gt;&gt; import csv ; from StringIO import StringIO&gt;&gt;&gt; table = list(csv.reader(StringIO(&quot;spam, 42\neggs, 451\n&quot;)))&gt;&gt;&gt; table[['spam', ' 42'], ['eggs', ' 451']]&gt;&gt;&gt; print(tabulate(table))----  ----spam    42eggs   451----  ----```To disable this feature use `disable_numparse=True`.```pycon&gt;&gt;&gt; print(tabulate.tabulate([[&quot;Ver1&quot;, &quot;18.0&quot;], [&quot;Ver2&quot;,&quot;19.2&quot;]], tablefmt=&quot;simple&quot;, disable_numparse=True))----  ----Ver1  18.0Ver2  19.2----  ----```### Custom column alignment`tabulate` allows a custom column alignment to override the above. The`colalign` argument can be a list or a tuple of `stralign` namedarguments. Possible column alignments are: `right`, `center`, `left`,`decimal` (only for numbers), and `None` (to disable alignment).Omitting an alignment uses the default. For example:```pycon&gt;&gt;&gt; print(tabulate([[&quot;one&quot;, &quot;two&quot;], [&quot;three&quot;, &quot;four&quot;]], colalign=(&quot;right&quot;,))-----  ----  one  twothree  four-----  ----```### Number formatting`tabulate` allows to define custom number formatting applied to allcolumns of decimal numbers. Use `floatfmt` named argument:```pycon&gt;&gt;&gt; print(tabulate([[&quot;pi&quot;,3.141593],[&quot;e&quot;,2.718282]], floatfmt=&quot;.4f&quot;))--  ------pi  3.1416e   2.7183--  ------````floatfmt` argument can be a list or a tuple of format strings, one percolumn, in which case every column may have different number formatting:```pycon&gt;&gt;&gt; print(tabulate([[0.12345, 0.12345, 0.12345]], floatfmt=(&quot;.1f&quot;, &quot;.3f&quot;)))---  -----  -------0.1  0.123  0.12345---  -----  -------````intfmt` works similarly for integers    &gt;&gt;&gt; print(tabulate([[&quot;a&quot;,1000],[&quot;b&quot;,90000]], intfmt=&quot;,&quot;))    -  ------    a   1,000    b  90,000    -  ------### Text formattingBy default, `tabulate` removes leading and trailing whitespace from textcolumns. To disable whitespace removal, set the global module-level flag`PRESERVE_WHITESPACE`:```pythonimport tabulatetabulate.PRESERVE_WHITESPACE = True```### Wide (fullwidth CJK) symbolsTo properly align tables which contain wide characters (typicallyfullwidth glyphs from Chinese, Japanese or Korean languages), the usershould install `wcwidth` library. To install it together with`tabulate`:```shellpip install tabulate[widechars]```Wide character support is enabled automatically if `wcwidth` library isalready installed. To disable wide characters support withoutuninstalling `wcwidth`, set the global module-level flag`WIDE_CHARS_MODE`:```pythonimport tabulatetabulate.WIDE_CHARS_MODE = False```### Multiline cellsMost table formats support multiline cell text (text containing newlinecharacters). The newline characters are honored as line breakcharacters.Multiline cells are supported for data rows and for header rows.Further automatic line breaks are not inserted. Of course, some outputformats such as latex or html handle automatic formatting of the cellcontent on their own, but for those that don't, the newline charactersin the input cell text are the only means to break a line in cell text.Note that some output formats (e.g. simple, or plain) do not representrow delimiters, so that the representation of multiline cells in suchformats may be ambiguous to the reader.The following examples of formatted output use the following table witha multiline cell, and headers with a multiline cell:```pycon&gt;&gt;&gt; table = [[&quot;eggs&quot;,451],[&quot;more\nspam&quot;,42]]&gt;&gt;&gt; headers = [&quot;item\nname&quot;, &quot;qty&quot;]````plain` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;plain&quot;))item      qtynameeggs      451more       42spam````simple` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;simple&quot;))item      qtyname------  -----eggs      451more       42spam````grid` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;grid&quot;))+--------+-------+| item   |   qty || name   |       |+========+=======+| eggs   |   451 |+--------+-------+| more   |    42 || spam   |       |+--------+-------+````fancy_grid` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;fancy_grid&quot;))╒════════╤═══════╕│ item   │   qty ││ name   │       │╞════════╪═══════╡│ eggs   │   451 │├────────┼───────┤│ more   │    42 ││ spam   │       │╘════════╧═══════╛````pipe` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;pipe&quot;))| item   |   qty || name   |       ||:-------|------:|| eggs   |   451 || more   |    42 || spam   |       |````orgtbl` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;orgtbl&quot;))| item   |   qty || name   |       ||--------+-------|| eggs   |   451 || more   |    42 || spam   |       |````jira` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;jira&quot;))| item   |   qty || name   |       ||:-------|------:|| eggs   |   451 || more   |    42 || spam   |       |````presto` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;presto&quot;)) item   |   qty name   |--------+------- eggs   |   451 more   |    42 spam   |````pretty` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;pretty&quot;))+------+-----+| item | qty || name |     |+------+-----+| eggs | 451 || more | 42  || spam |     |+------+-----+````psql` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;psql&quot;))+--------+-------+| item   |   qty || name   |       ||--------+-------|| eggs   |   451 || more   |    42 || spam   |       |+--------+-------+````rst` tables:```pycon&gt;&gt;&gt; print(tabulate(table, headers, tablefmt=&quot;rst&quot;))======  =====item      qtyname======  =====eggs      451more       42spam======  =====```Multiline cells are not well-supported for the other table formats.### Automating MultilinesWhile tabulate supports data passed in with multilines entries explicitly provided,it also provides some support to help manage this work internally.The `maxcolwidths` argument is a list where each entry specifies the max width forit's respective column. Any cell that will exceed this will automatically wrap the content.To assign the same max width for all columns, a singular int scaler can be used.Use `None` for any columns where an explicit maximum does not need to be provided,and thus no automate multiline wrapping will take place.The wrapping uses the python standard [textwrap.wrap](https://docs.python.org/3/library/textwrap.html#textwrap.wrap)function with default parameters - aside from width.This example demonstrates usage of automatic multiline wrapping, though typicallythe lines being wrapped would probably be significantly longer than this.```pycon&gt;&gt;&gt; print(tabulate([[&quot;John Smith&quot;, &quot;Middle Manager&quot;]], headers=[&quot;Name&quot;, &quot;Title&quot;], tablefmt=&quot;grid&quot;, maxcolwidths=[None, 8]))+------------+---------+| Name       | Title   |+============+=========+| John Smith | Middle  ||            | Manager |+------------+---------+```### Adding Separating linesOne might want to add one or more separating lines to highlight different sections in a table.The separating lines will be of the same type as the one defined by the specified formatter as either thelinebetweenrows, linebelowheader, linebelow, lineabove or just a simple empty line when none is defined for the formatter    &gt;&gt;&gt; from tabulate import tabulate, SEPARATING_LINE    table = [[&quot;Earth&quot;,6371],             [&quot;Mars&quot;,3390],             SEPARATING_LINE,             [&quot;Moon&quot;,1737]]    print(tabulate(table, tablefmt=&quot;simple&quot;))    -----  ----    Earth  6371    Mars   3390    -----  ----    Moon   1737    -----  ----### ANSI supportANSI escape codes are non-printable byte sequences usually used for terminal operations like settingcolor output or modifying cursor positions. Because multi-byte ANSI sequences are inherently non-printable,they can still introduce unwanted extra length to strings. For example:    &gt;&gt;&gt; len('\033[31mthis text is red\033[0m')  # printable length is 16    25To deal with this, string lengths are calculated after first removing all ANSI escape sequences. This ensuresthat the actual printable length is used for column widths, rather than the byte length. In the final, printabletable, however, ANSI escape sequences are not removed so the original styling is preserved.Some terminals support a special grouping of ANSI escape sequences that are intended to display hyperlinksmuch in the same way they are shown in browsers. These are handled just as mentioned before: non-printableANSI escape sequences are removed prior to string length calculation. The only diifference with escapedhyperlinks is that column width will be based on the length of the URL _text_ rather than the URLitself (terminals would show this text). For example:    &gt;&gt;&gt; len('\x1b]8;;https://example.com\x1b\\example\x1b]8;;\x1b\\')  # display length is 7, showing 'example'    45Usage of the command line utility---------------------------------    Usage: tabulate [options] [FILE ...]    FILE                      a filename of the file with tabular data;                              if &quot;-&quot; or missing, read data from stdin.    Options:    -h, --help                show this message    -1, --header              use the first row of data as a table header    -o FILE, --output FILE    print table to FILE (default: stdout)    -s REGEXP, --sep REGEXP   use a custom column separator (default: whitespace)    -F FPFMT, --float FPFMT   floating point number format (default: g)    -I INTFMT, --int INTFMT   integer point number format (default: &quot;&quot;)    -f FMT, --format FMT      set output table format; supported formats:                              plain, simple, github, grid, fancy_grid, pipe,                              orgtbl, rst, mediawiki, html, latex, latex_raw,                              latex_booktabs, latex_longtable, tsv                              (default: simple)Performance considerations--------------------------Such features as decimal point alignment and trying to parse everythingas a number imply that `tabulate`:-   has to &quot;guess&quot; how to print a particular tabular data type-   needs to keep the entire table in-memory-   has to &quot;transpose&quot; the table twice-   does much more work than it may appearIt may not be suitable for serializing really big tables (but who'sgoing to do that, anyway?) or printing tables in performance sensitiveapplications. `tabulate` is about two orders of magnitude slower thansimply joining lists of values with a tab, comma, or other separator.At the same time, `tabulate` is comparable to other tablepretty-printers. Given a 10x10 table (a list of lists) of mixed text andnumeric data, `tabulate` appears to be slower than `asciitable`, andfaster than `PrettyTable` and `texttable` The following mini-benchmarkwas run in Python 3.9.13 on Windows 10:    =================================  ==========  ===========    Table formatter                      time, μs    rel. time    =================================  ==========  ===========    csv to StringIO                          12.5          1.0    join with tabs and newlines              14.6          1.2    asciitable (0.8.0)                      192.0         15.4    tabulate (0.9.0)                        483.5         38.7    tabulate (0.9.0, WIDE_CHARS_MODE)       637.6         51.1    PrettyTable (3.4.1)                    1080.6         86.6    texttable (1.6.4)                      1390.3        111.4    =================================  ==========  ===========Version history---------------The full version history can be found at the [changelog](https://github.com/astanin/python-tabulate/blob/master/CHANGELOG).How to contribute-----------------Contributions should include tests and an explanation for the changesthey propose. Documentation (examples, docstrings, README.md) should beupdated accordingly.This project uses [pytest](https://docs.pytest.org/) testingframework and [tox](https://tox.readthedocs.io/) to automate testing indifferent environments. Add tests to one of the files in the `test/`folder.To run tests on all supported Python versions, make sure all Pythoninterpreters, `pytest` and `tox` are installed, then run `tox` in the rootof the project source tree.On Linux `tox` expects to find executables like `python3.7`, `python3.8` etc.On Windows it looks for `C:\Python37\python.exe`, `C:\Python38\python.exe` etc. respectively.One way to install all the required versions of the Python interpreter is to use [pyenv](https://github.com/pyenv/pyenv).All versions can then be easily installed with something like:     pyenv install 3.7.12     pyenv install 3.8.12     ...Don't forget to change your `PATH` so that `tox` knows how to find all the installed versions. Something like     export PATH=&quot;${PATH}:${HOME}/.pyenv/shims&quot;To test only some Python environments, use `-e` option. For example, totest only against Python 3.7 and Python 3.10, run:```shelltox -e py37,py310```in the root of the project source tree.To enable NumPy and Pandas tests, run:```shelltox -e py37-extra,py310-extra```(this may take a long time the first time, because NumPy and Pandas willhave to be installed in the new virtual environments)To fix code formatting:```shelltox -e lint```See `tox.ini` file to learn how to use to testindividual Python versions.Contributors------------Sergey Astanin, Pau Tallada Crespí, Erwin Marsi, Mik Kocikowski, BillRyder, Zach Dwiel, Frederik Rietdijk, Philipp Bogensberger, Greg(anonymous), Stefan Tatschner, Emiel van Miltenburg, Brandon Bennett,Amjith Ramanujam, Jan Schulz, Simon Percivall, Javier SantacruzLópez-Cepero, Sam Denton, Alexey Ziyangirov, acaird, Cesar Sanchez,naught101, John Vandenberg, Zack Dever, Christian Clauss, BenjaminMaier, Andy MacKinlay, Thomas Roten, Jue Wang, Joe King, Samuel Phan,Nick Satterly, Daniel Robbins, Dmitry B, Lars Butler, Andreas Maier,Dick Marinus, Sébastien Celles, Yago González, Andrew Gaul, Wim Glenn,Jean Michel Rouly, Tim Gates, John Vandenberg, Sorin Sbarnea,Wes Turner, Andrew Tija, Marco Gorelli, Sean McGinnis, danja100,endolith, Dominic Davis-Foster, pavlocat, Daniel Aslau, paulc,Felix Yan, Shane Loretz, Frank Busse, Harsh Singh, Derek Weitzel,Vladimir Vrzić, 서승우 (chrd5273), Georgy Frolov, Christian Cwienk,Bart Broere, Vilhelm Prytz, Alexander Gažo, Hugo van Kemenade,jamescooke, Matt Warner, Jérôme Provensal, Kevin Deldycke,Kian-Meng Ang, Kevin Patterson, Shodhan Save, cleoold, KOLANICH,Vijaya Krishna Kasula, Furcy Pin, Christian Fibich, Shaun Duncan,Dimitri Papadopoulos.</longdescription>
</pkgmetadata>