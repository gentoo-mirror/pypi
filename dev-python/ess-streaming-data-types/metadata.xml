<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Streaming Data TypesUtilities for working with the FlatBuffers schemas used at the EuropeanSpallation Source ERIC for data transport.https://github.com/ess-dmsc/streaming-data-types## FlatBuffer Schemas|name|description||----|-----------||hs00|Histogram schema (deprecated in favour of hs01)||hs01|Histogram schema||ns10|NICOS cache entry schema||pl72|Run start||6s4t|Run stop||f142|Log data (deprecated in favour of f144)||f144|Log data||ev42|Event data (deprecated in favour of ev44)||ev43|Event data from multiple pulses||ev44|Event data with signed data types||x5f2|Status messages||tdct|Timestamps||ep00|EPICS connection info (deprecated in favour of ep01)||ep01|EPICS connection info||rf5k|Forwarder configuration update||answ|File-writer command response||wrdn|File-writer finished writing||NDAr|**Deprecated**||ADAr|EPICS areaDetector data||al00|Alarm/status messages used by the Forwarder and NICOS||senv|**Deprecated**||se00|Arrays with optional timestamps, for example waveform data. Replaces _senv_. |### hs00 and hs01Schema for histogram data. It is one of the more complicated to use schemas.It takes a Python dictionary as its input; this dictionary needs to have correctlynamed fields.The input histogram data for serialisation and the output deserialisation datahave the same dictionary &quot;layout&quot;.Example for a 2-D histogram:```jsonhist = {    &quot;source&quot;: &quot;some_source&quot;,    &quot;timestamp&quot;: 123456,    &quot;current_shape&quot;: [2, 5],    &quot;dim_metadata&quot;: [        {            &quot;length&quot;: 2,            &quot;unit&quot;: &quot;a&quot;,            &quot;label&quot;: &quot;x&quot;,            &quot;bin_boundaries&quot;: np.array([10, 11, 12]),        },        {            &quot;length&quot;: 5,            &quot;unit&quot;: &quot;b&quot;,            &quot;label&quot;: &quot;y&quot;,            &quot;bin_boundaries&quot;: np.array([0, 1, 2, 3, 4, 5]),        },    ],    &quot;last_metadata_timestamp&quot;: 123456,    &quot;data&quot;: np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]),    &quot;errors&quot;: np.array([[5, 4, 3, 2, 1], [10, 9, 8, 7, 6]]),    &quot;info&quot;: &quot;info_string&quot;,}```The arrays passed in for `data`, `errors` and `bin_boundaries` can be NumPy arraysor regular lists, but on deserialisation they will be NumPy arrays.## Developer documentationSee [README_DEV.md](README_DEV.md)</longdescription>
</pkgmetadata>