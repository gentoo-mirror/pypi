<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/pyversions/diamondback.svg?color=blue    :target: https://github.com/larryturner/diamondback.. image:: https://img.shields.io/pypi/v/diamondback.svg?label=pypi%20version&amp;color=lightblue    :target: https://pypi.org/larryturner/diamondback.. image:: https://img.shields.io/github/license/larryturner/diamondback?color=lightgray    :target: https://github.com/larryturner/diamondback/blob/master/licenseDescription~~~~~~~~~~~Diamondback is a package which provides Digital Signal Processing ( DSP )solutions, and complements AI frameworks, by defining components which filter,model, and transform data.Diamondback complements Artificial Intelligence ( AI ) frameworks, bydefining components which filter, model, and transform data into forms whichare useful in feature extraction and pattern recognition.Diamondback also supports applications including cancellation, identification,optimization, probabilistic modeling, rate adaptation, and serialization.Details~~~~~~~Data collections are consistently expressed in native types,including tuples, sets, lists, and dictionaries, with vector and matrixtypes expressed in numpy arrays.  Complex or real types are supported asappropriate.Diamondback is defined in subpackages commons, filters, models, andtransforms.`commons &lt;https://larryturner.github.io/diamondback/diamondback.commons&gt;`_^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-   `Log &lt;https://larryturner.github.io/diamondback/diamondback.commons#diamondback-commons-log-module&gt;`_    singleton instance which formats and writes log entries with a specified    level and stream using the loguru package. Log entries contain an ISO-8601    datetime and level.  Log uses lazy initialization to coexist with loguru.    Dynamic stream redirection and level specification are supported.-   `RestClient &lt;https://larryturner.github.io/diamondback/diamondback.commons#diamondback-commons-restclient-module&gt;`_    instances define a client for simple REST service requests using the    requests package.  An API and an elective dictionary of parameter strings    are encoded to build a URL, elective binary or JSON data are defined in the    body of a request, and a requests response containing JSON, text, or binary    data is returned.  Proxy, timeout, and URL definition are supported.-   `Serial &lt;https://larryturner.github.io/diamondback/diamondback.commons#diamondback-commons-serial-module&gt;`_    singleton instance which encodes and decodes an instance or collection in    BSON or JSON, and generates SHA3-256 codes, using the jsonpickle package.    An instance may be an object or a collection, referenced by abstract or    concrete types, and the instance will be correctly encoded and decoded,    without custom encoding definitions.`filters &lt;https://larryturner.github.io/diamondback/diamondback.filters&gt;`_^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-   `ComplexBandPassFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-complexbandpassfilter-module&gt;`_    instances adaptively extract or reject signals at a normalized    frequency of interest, and may be employed to dynamically track    magnitude and phase or demodulate signals.-   `ComplexExponentialFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-complexexponentialfilter-module&gt;`_    instances synthesize complex exponential signals at normalized    frequencies of interest with contiguous phase.-   `ComplexFrequencyFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-complexfrequencyfilter-module&gt;`_    instances adaptively discriminate and estimate a normalized frequency    of a signal.-   `DerivativeFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-derivativefilter-module&gt;`_    instances estimate discrete derivative approximations at several    filter orders.-   `FirFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-firfilter-module&gt;`_    instances realize discrete difference equations of Finite Impulse    Response ( FIR ) form. Instances are defined based on style,    normalized frequency, order, cascade count, and complement, or    forward coefficients. Root extraction, group delay, and frequency    response evaluation are defined.-   `GoertzelFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-goertzelfilter-module&gt;`_    instances efficiently evaluate a Discrete Fourier Transform ( DFT )    at a normalized frequency, based on a window filter and normalized    frequency.-   `IirFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-iirfilter-module&gt;`_    instances realize discrete difference equations of Infinite Impulse    Response ( IIR ) form. Instances are defined based on style,    normalized frequency, order, cascade count, and complement, or recursive    and forward coefficients. Root extraction, group delay, and frequency    response evaluation are defined.-   `IntegralFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-integralfilter-module&gt;`_    instances estimate discrete integral approximations at several filter    orders.-   `PidFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-pidfilter-module&gt;`_    instances realize discrete difference equations of Proportional    Integral Derivative ( PID ) form.-   `PolynomialRateFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-polynomialratefilter-module&gt;`_    instances approximate a signal evaluated at an effective frequency    equal to the product of the normalized frequency and a rate greater    than zero, supporting decimation and interpolation through localized    polynomial approximation with no group delay.-   `PolyphaseRateFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-polyphaseratefilter-module&gt;`_    instances approximate a signal evaluated at an effective frequency    equal to the product of the normalized frequency and a rate greater    than zero, supporting decimation and interpolation through    definition and application of a polyphase filter bank, a sequence    of low pass filters with a common frequency response and a fractional    sample difference in group delay. An appropriate stride is determined    to realize the specified effective frequency without bias and with    group delay based on order.-   `RankFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-rankfilter-module&gt;`_    instances define nonlinear morphological operators, which define    functionality based on rank and order, including dilation, median,    and erosion, and may be combined in sequences to support close and    open.-   `WindowFilter &lt;https://larryturner.github.io/diamondback/diamondback.filters#diamondback-filters-windowfilter-module&gt;`_    instances realize discrete window functions useful in Fourier    analysis, based on style, order, and normalization.`models &lt;https://larryturner.github.io/diamondback/diamondback.models&gt;`_^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-   `DiversityModel &lt;https://larryturner.github.io/diamondback/diamondback.models#diamondback-models-diversitymodel-module&gt;`_    instances select and retain a state extracted to maximize the minimum    distance between state members based on style and order. An    opportunistic unsupervised learning model typically improves condition    and numerical accuracy and reduces storage relative to alternative    approaches including generalized linear inverse.-   `GaussianModel &lt;https://larryturner.github.io/diamondback/diamondback.models#diamondback-models-gaussianmodel-module&gt;`_    is a supervised learning probabilistic model instance which uses    maximum likelihood estimation and regularization to maximize posterior    probability and classify an incident signal.  Learns one distribution    instance per class.-   `GaussianMixtureModel &lt;https://larryturner.github.io/diamondback/diamondback.models#diamondback-models-gaussianmixturemodel-module&gt;`_    is a semi-supervised learning probabilistic model instance which uses    maximum likelihood estimation, regularization, and expectation    maximization to maximize posterior probability and classify an incident    signal.  Learns model instances of a specified order per class, where    intra-class models capture mixture distributions. `transforms &lt;https://larryturner.github.io/diamondback/diamondback.transforms&gt;`_^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-   `ComplexTransform &lt;https://larryturner.github.io/diamondback/diamondback.transforms#diamondback-transforms-complextransform-module&gt;`_    is a singleton instance which converts a three-phase real signal to a    complex signal, or a complex signal to a three-phase real signal, in    equivalent and reversible representations, based on a neutral    condition.-   `FourierTransform &lt;https://larryturner.github.io/diamondback/diamondback.transforms#diamondback-transforms-fouriertransform-module&gt;`_    is a singleton instance which converts a real or complex    discrete-time signal to a complex discrete-frequency signal, or a    complex discrete-frequency signal to a real or complex discrete-time    signal, in equivalent and reversible representations, based on a    window filter and inverse.-   `PsdTransform &lt;https://larryturner.github.io/diamondback/diamondback.transforms#diamondback-transforms-psdtransform-module&gt;`_    is a singleton instance which realizes a Power Spectral Density ( PSD )    which converts a real or complex discrete-time signal to a real    discrete-frequency signal which estimates an aggregate power spectrum    of the signal, based on a window filter, index, and spectrogram.    A spectrogram constructs a time frequency representation of the power    spectrum.-   `WaveletTransform &lt;https://larryturner.github.io/diamondback/diamondback.transforms#diamondback-transforms-wavelettransform-module&gt;`_    instances realize a temporal spatial frequency transformation through    defninition and application of analysis and synthesis filters with    complementary frequency responses, combined with downsampling and    upsampling operations, in equivalent and reversible representations.    Instances are defined based on style and order.-   `ZTransform &lt;https://larryturner.github.io/diamondback/diamondback.transforms#diamondback-transforms-ztransform-module&gt;`_    is a singleton instance which converts continuous s-domain to    discrete z-domain difference equations, based on a normalized    frequency and application of bilinear or impulse invariant methods.Dependencies~~~~~~~~~~~~Diamondback depends upon external packages :-   `jsonpickle &lt;https://github.com/jsonpickle/jsonpickle&gt;`_-   `loguru &lt;https://github.com/delgan/loguru&gt;`_-   `numpy &lt;https://github.com/numpy/numpy&gt;`_-   `requests &lt;https://github.com/psf/requests&gt;`_-   `scikit-learn &lt;https://github.com/scikit-learn/scikit-learn&gt;`_-   `scipy &lt;https://github.com/scipy/scipy&gt;`_Diamondback elective documentation, test, and visualization functionalitydepends upon additional external packages :-   `ipython &lt;https://github.com/ipython/ipython&gt;`_-   `ipywidgets &lt;https://github.com/jupyter-widgets/ipywidgets&gt;`_-   `jupyter &lt;https://github.com/jupyter/notebook&gt;`_-   `matplotlib &lt;https://github.com/matplotlib/matplotlib&gt;`_-   `nox &lt;https://github.com/theacodes/nox&gt;`_-   `pandas &lt;https://github.com/pandas-dev/pandas&gt;`_-   `pillow &lt;https://github.com/python-pillow/pillow&gt;`_-   `pytest &lt;https://github.com/pytest-dev/pytest&gt;`_-   `sphinx &lt;https://github.com/sphinx-doc/sphinx&gt;`_-   `sphinx-rtd-theme &lt;https://github.com/readthedocs/sphinx_rtd_theme&gt;`_Installation~~~~~~~~~~~~Diamondback is a public repository hosted at PyPI and GitHub.::    pip install diamondback    or    pip install git+https://github.com/larryturner/diamondback.gitDemonstration~~~~~~~~~~~~~A jupyter notebook defines cells to create and exercise diamondback components.The notebook serves as a tool for visualization, validation, and demonstrationof diamondback capabilities.A jupyter notebook may be run on a remote server without installation withBinder, which dynamically builds and deploys a docker container from a GitHubrepository, or installed from GitHub and run on a local system.**Remote**.. image:: https://img.shields.io/badge/Binder-blue    :target: https://mybinder.org/v2/gh/larryturner/diamondback/master?labpath=notebooks%2Fdiamondback.ipynb**Local**::    git clone https://github.com/larryturner/diamondback.git    cd diamondback    pip install --requirement requirements.txt    jupyter notebook .\jupyter\diamondback.ipynbRestart the kernel, as the first cell contains common definitions, find cellswhich exercise components of interest, and manipulate widgets to exercise andvisualize functionality.Tests~~~~~A test solution is provided to exercise and verify components, pytest isused to execute unit and integration tests.::    pytest --capture=no --verboseDocumentation~~~~~~~~~~~~~Diamondback documentation is available on GitHub pages... image:: https://img.shields.io/badge/GitHub-blue    :target: https://larryturner.github.io/diamondback/License~~~~~~~`BSD-3C &lt;https://github.com/larryturner/diamondback/blob/master/license&gt;`_Author~~~~~~`Larry Turner &lt;https://github.com/larryturner&gt;`_</longdescription>
</pkgmetadata>