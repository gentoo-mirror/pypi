<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Fauxmo READMEmaster: [![master branch build status](https://github.com/n8henrie/fauxmo/actions/workflows/python-package.yml/badge.svg?branch=master)](https://github.com/n8henrie/fauxmo/actions/workflows/python-package.yml)dev: [![dev branch build status](https://github.com/n8henrie/fauxmo/actions/workflows/python-package.yml/badge.svg?branch=dev)](https://github.com/n8henrie/fauxmo/actions/workflows/python-package.yml)Python 3 module that emulates Belkin WeMo devices for use with the Amazon Echo.Originally forked from &lt;https://github.com/makermusings/fauxmo&gt;, unforked toenable GitHub code search (which currently doesn't work in a fork), and becausethe libraries have diverged substantially.- Documentation: [fauxmo.readthedocs.org](https://fauxmo.readthedocs.org)## IntroductionThe Amazon Echo is able to control certain types of home automation devices byvoice. Fauxmo provides emulated Belkin Wemo devices that the Echo can turn onand off by voice, locally, and with minimal lag time. Currently these Fauxmodevices can be configured to make requests to an HTTP server or to a [HomeAssistant](https://home-assistant.io) instance via [its PythonAPI](https://home-assistant.io/developers/python_api/) and only require a JSONconfig file for setup.As of version v0.4.0, Fauxmo uses several API features and f-strings thatrequire Python 3.6+. I highly recommend looking into[pyenv](https://github.com/pyenv/pyenv) if you're currently on an older Pythonversion and willing to upgrade. Otherwise, check out the FAQ section at thebottom for tips on installing an older Fauxmo version (though note that I willnot be continuing development or support for older versions).For what it's worth, if you're concerned about installing pyenv on alow-resource machine like the Raspberry Pi, I encourage you to [review mynotes](https://n8henrie.com/2018/02/pyenv-size-and-python-36-speed-installation-time-on-raspberry-pi/)on the size and time required to install Python 3.6 with pyenv on a RaspberryPi and the nontrivial improvement in speed (with a simple pystone benchmark)using an optimized pyenv-installed 3.6 as compared to the default Raspbian3.5.3.## Terminologyfaux (`\ˈfō\`): imitationWeMo: Belkin home automation product with which the Amazon Echo can interfaceFauxmo (`\ˈfō-mō\`): Python 3 module that emulates Belkin WeMo devices for usewith the Amazon Echo.Fauxmo has a server component that helps register &quot;devices&quot; with the Echo (whichmay be referred to as the Fauxmo server or Fauxmo core). These devices are thenexposed individually, each requiring its own port, and may be referred to as aFauxmo device or a Fauxmo instance. The Echo interacts with each Fauxmo deviceas if it were a separate WeMo device.## UsageInstallation into a venv is *highly recommended*, especially since it's bakedinto the recent Python versions that Fauxmo requires.Additionally, please ensure you're using a recent version of pip (&gt;= 9.0.1)prior to installation: `pip install --upgrade pip`### Simple install: From PyPI1. `python3 -m venv .venv`1. `source ./.venv/bin/activate`1. `python3 -m pip install fauxmo`1. Make a `config.json` based on   [`config-sample.json`](https://github.com/n8henrie/fauxmo/blob/master/config-sample.json)1. `fauxmo -c config.json [-v]`As of `v0.6.0`, you can *optionally* install `uvloop` for potentially betterperformance, which *might* be helpful if you have a large number of devices ora network with lots of broadcast mdns traffic. If it is present, `fauxmo` willtake advantage. It is not terribly difficult to install `uvloop` but you are onyour own: &lt;https://github.com/MagicStack/uvloop&gt;.### Simple install of dev branch from GitHubThis is a good strategy for testing features in development -- for actuallycontributing to development, clone the repo as per below)1. `python3 -m venv .venv`1. `source ./.venv/bin/activate`1. `pip install [-e] git+https://github.com/n8henrie/fauxmo.git@dev`### Install for development from GitHub1. `git clone https://github.com/n8henrie/fauxmo.git`1. `cd fauxmo`1. `python3 -m venv .venv`1. `source ./.venv/bin/activate`1. `pip install -e .[dev,test]`1. `cp config-sample.json config.json`1. Edit `config.json`1. `fauxmo [-v]`### Set up the Echo1. Open the Amazon Alexa webapp to the [Smart   Home](http://alexa.amazon.com/#smart-home) page1. **With Fauxmo running**, click &quot;Discover devices&quot; (or tell Alexa to &quot;find   connected devices&quot;)1. Ensure that your Fauxmo devices were discovered and appear with their   names in the web interface1. Test: &quot;Alexa, turn on [the kitchen light]&quot;### Set Fauxmo to run automatically in the backgroundNB: As discussed in [#20](https://github.com/n8henrie/fauxmo/issues/20), theexample files in `extras/` are *not* included when you install from PyPI\*(using `pip`). If you want to use them, you either need to clone the repo oryou can download them individually using tools like `wget` or `curl` bynavigating to the file in your web browser, clicking the `Raw` button, andusing the resulting URL in your address bar.\* As of Fauxmo v0.4.0 `extras/` has been added to `MANIFEST.in` and may beincluded somewhere depending on installation from the `.tar.gz` vs `whl`format -- if you can't find them, you should probably just get the filesmanually as described above.#### systemd (e.g. Raspbian Jessie)1. Recommended: add an unprivileged user to run Fauxmo: `sudo useradd -r   -s /bin/false fauxmo`    - NB: Fauxmo may require root privileges if you're using ports below 10241. `sudo cp extras/fauxmo.service /etc/systemd/system/fauxmo.service`1. Edit the paths in `/etc/systemd/system/fauxmo.service`1. `sudo systemctl enable fauxmo.service`1. `sudo systemctl start fauxmo.service`#### launchd (OS X)1. `cp extras/com.n8henrie.fauxmo.plist ~/Library/LaunchAgents/com.n8henrie.fauxmo.plist`1. Edit the paths in `~/Library/LaunchAgents/com.n8henrie.fauxmo.plist`    - You can remove the `StandardOutPath` and `StandardErrorPath` sections if      desired1. `launchctl load ~/Library/LaunchAgents/com.n8henrie.fauxmo.plist`1. `launchctl start com.n8henrie.fauxmo`## PluginsPlugins are small user-extendible classes that allow users to easily make theirown actions for Fauxmo to run by way of Alexa commands. They were previouslycalled Handlers and may be referred to as such in places in the code anddocumentation.Fauxmo v0.4.0 implements a new and breaking change in the way Handlers wereimplemented in previous versions, which requires modification of the`config.json` file (as described below).A few plugins and the ABC from which the plugins are required to inherit maybe included and installed by default in the `fauxmo.plugins` package. Anypre-installed plugins, like the rest of the core Fauxmo code, have no thirdparty dependencies.So far, the pre-installed plugins include:- [`fauxmo.plugins.simplehttpplugin.SimpleHTTPPlugin`](https://github.com/n8henrie/fauxmo/blob/master/src/fauxmo/plugins/simplehttpplugin.py)- [`fauxmo.plugins.commandlineplugin.CommandLinePlugin`](https://github.com/n8henrie/fauxmo/blob/master/src/fauxmo/plugins/commandlineplugin.py)- [`fauxmo.plugins.homeassistantplugin.HomeAssistantPlugin`](https://github.com/n8henrie/fauxmo/blob/master/src/fauxmo/plugins/homeassistantplugin.py)`SimpleHTTPPlugin` responds to Alexa's `on` and `off` commands by makingrequests to URL endpoints by way of[`urllib`](https://docs.python.org/3/library/urllib.html). Example uses casesrelevant to the IOT community might be a Flask server served from localhostthat provides a nice web interface for toggling switches, whose endpoints couldbe added as the `on_cmd` and `off_cmd` args to a `SimpleHTTPPlugin` instanceto allow activation by way of Alexa -&gt; Fauxmo.As of Fauxmo v0.4.5, the `FauxmoPlugin` abstract base class (and therefore allderivate Fauxmo plugins) requires a `get_state` method, which tells Alexa adevice's state. If you don't have a way to determine devices state, you canjust have your `get_state` method return `&quot;unknown&quot;`, but please review thenotes on `get_state` below.Also, see details regarding plugin configuration in each class's docstring,which I intend to continue as a convention for Fauxmo plugins. Users hoping tomake more complicated requests may be interested in looking at `RESTAPIPlugin`in the [`fauxmo-pluginsrepository`](https://github.com/n8henrie/fauxmo-plugins), which uses Requestsfor a much friendlier API.### User pluginsUsers can easily create their own plugins, which is the motivation behind mostof the changes in Fauxmo v0.4.0.To get started:1. Decide on a name for your plugin class. I highly recommend something   descriptive, CamelCase and a `Plugin` suffix, e.g. `FooSwitcherPlugin`.1. I strongly recommend naming your module the same as the plugin, but in all   lower case, e.g. `fooswitcherplugin.py`.1. Note the path to your plugin, which will need to be included in your   `config.json` as `path` (absolute path recommended, `~` for homedir is   okay).1. Write your class, which must at minimum:    - inherit from `fauxmo.plugins.FauxmoPlugin`.    - provide the methods `on()`, `off()`, and `get_state()`.        - Please note that unless the Echo has a way to determine the device          state, it will likely respond that your &quot;device is not responding&quot;          after you turn a device on (or in some cases off, or both), but it          should still be able to switch the device.        - If you want to ignore the actual device's state and just return the          last successful action as the current state (e.g. if `device.on()`          succeeded then return `&quot;on&quot;`), your plugin can return          `super().get_state()` as its `get_state()` method. Some of the          included plugins can be configured to have this behavior using a          `use_fake_state` flag in their configuration (please look at the          documentation and source code of the plugins for further details).          Note that this means it won't update to reflect state changes that          occur outside of Fauxmo (e.g. manually flipping a switch, or toggling          with a different program), whereas a proper `get_state`          implementation may be able to do so.1. Any required settings will be read from your `config.json` and passed into   your plugin as kwargs at initialization, see below.In addition to the above, if you intend to share your plugin with others, Istrongly recommend that you:- Include generous documentation as a module level docstring.- Note specific versions of any dependencies in that docstring.  - Because these user plugins are kind of &quot;side-loaded,&quot; you will need to    manually install their dependencies into the appropriate environment, so    it's important to let other users know exactly what versions you use.Be aware, when fauxmo loads a plugin, it will add the directorycontaining the plugin to the Python path, so any other Python modules in thisdirectory might be loaded by unscrupulous code. This behavior was adopted inpart to facilitate installing any plugin dependencies in a way that will beavailable for import (e.g. `cd &quot;$MYPLUGINPATH&quot;; pip install -t $MYPLUGINDEPS`).### Notable plugin examplesNB: You may need to *manually* install additional dependencies for these towork -- look for the dependencies in the module level docstring.- &lt;https://github.com/n8henrie/fauxmo-plugins&gt;    - `RESTAPIPlugin`        - Trigger HTTP requests with your Echo.        - Similar to `SimpleHTTPPlugin`, but uses          [Requests](https://github.com/kennethreitz/requests) for a simpler          API and easier modification.    - `MQTTPlugin`        - Trigger MQTT events with your Echo    - User contributions of interesting plugins are more than welcome!## ConfigurationI recommend that you copy and modify[`config-sample.json`](https://github.com/n8henrie/fauxmo/blob/master/config-sample.json).Fauxmo will use whatever config file you specify with `-c` or will search for`config.json` in the current directory, `~/.fauxmo/`, and `/etc/fauxmo/` (inthat order). The minimal configuration settings are:- `FAUXMO`: General Fauxmo settings    - `ip_address`: Optional[str] - Manually set the server's IP address.      Recommended value: `&quot;auto&quot;`.- `PLUGINS`: Top level key for your plugins, values should be a dictionary of  (likely CamelCase) class names, spelled identically to the plugin class, with  each plugin's settings as a subdictionary.    - `ExamplePlugin`: Your plugin class name here, case sensitive.        - `path`: The absolute path to the Python file in which the plugin          class is defined (please see the section on user plugins above).          Required for user plugins / plugins not pre-installed in the          `fauxmo.plugins` subpackage.        - `example_var1`: For convenience and to avoid redundancy, your plugin          class can *optionally* use config variables at this level that          will be shared for all `DEVICES` listed in the next section (e.g. an          api key that would be shared for all devices of this plugin type).          If provided, your plugin class must consume this variable in a custom          `__init__`.        - `DEVICES`: List of devices that will employ `ExamplePlugin`            - `name`: Optional[str] -- Name for this device. Optional in the              sense that you can leave it out of the config as long as you set              it in your plugin code as the `_name` attribute, but it does need              to be set somewhere. If you omit it from config you will also              need to override the `__init__` method, which expects a `name`              kwarg.            - `port`: Optional[int] -- Port that Echo will use connect to              device. Should be different for each device, Fauxmo will attempt              to set automatically if absent from config. NB: Like `name`, you              can choose to set manually in your plugin code by overriding the              `_port` attribute (and the `__init__` method, which expects a              `port` kwarg otherwise).            - `example_var2`: Config variables for individual Fauxmo devices              can go here if needed (e.g. the URL that should be triggered when              a device is activated). Again, your plugin class will need to              consume them in a custom `__init__`.Each user plugin should describe its required configuration in its module-leveldocstring. The only required config variables for all plugins is `DEVICES`,which is a `List[dict]` of configuration variables for each device of thatplugin type. Under `DEVICES` it is a good idea to set a fixed, high, free`port` for each device, but if you don't set one, Fauxmo will try to pick areasonable port automatically (though it will change for each run).Please see[`config-sample`](https://github.com/n8henrie/fauxmo/blob/master/config-sample.json)for a more concrete idea of the structure of the config file, using thebuilt-in `SimpleHTTPPlugin` for demonstration purposes. Below is a descriptionof the kwargs that `SimpleHTTPPlugin` accepts.- `name`: What you want to call the device (how to activate by  Echo)- `port`: Port the Fauxmo device will run on- `on_cmd`: str -- URL that should be requested to turn device on.- `off_cmd`: str -- URL that should be requested to turn device off.- `state_cmd`: str -- URL that should be requested to query device state- `method` / `state_method`: Optional[str] = GET -- GET, POST, PUT, etc.- `headers`: Optional[dict]  -- Extra headers- `on_data` / `off_data` / `state_data`: Optional[dict] -- POST data- `state_response_on` / `state_response_off`: str -- If this string is in  contained in the response from `state_cmd`, then the devices is `on` or  `off`, respectively- `user` / `password`: Optional[str] -- Enables HTTP authentication (basic or  digest only)- `use_fake_state`: Optional[bool] -- If `True`, override the plugin's  `get_state` method to return the latest successful action as the device  state. NB: The proper json boolean value for Python's `True` is `true`, not  `True` or `&quot;true&quot;`.## SecurityI am not a technology professional and make no promises regarding the securityof this software. Specifically, plugins such as `CommandLinePlugin` executearbitrary code from your configuration without any validation. If yourconfiguration can be tampered with, you're in for a bad time.That said, if your configuration can be tampered with (i.e. someone already haswrite access on your machine), then you likely have bigger problems.Regardless, a few reasonable precautions that I recommend:- run `fauxmo` in a virtulaenv, even without any dependencies- run `fauxmo` as a dedicated unprivileged user with its own group- remove write access from the `fauxmo` user and group for your config file and  any plugin files (perhaps `chmod 0640 config.json; chown me:fauxmo  config.json`)- consider using a firewall like `ufw`, but don't forget that you'll need to  open up ports for upnp (`1900`, UDP) and ports for all your devices that  you've configured (in `config.json`).For example, if I had 4 echo devices at 192.168.1.5, 192.168.1.10,192.168.1.15, and 192.168.1.20, and Fauxmo was configured with devices at eachof port 12345-12350, to configure `ufw` I might run something like:```console$ for ip in 5 10 15 20; do    sudo ufw allow \        from 192.168.1.&quot;$ip&quot; \        to any \        port 1900 \        proto udp \        comment &quot;fauxmo upnp&quot;    sudo ufw allow \        from 192.168.1.&quot;$ip&quot; \        to any \        port 12345:12350 \        proto tcp \        comment &quot;fauxmo devices&quot;done```You use Fauxmo at your own risk, with or without user plugins.## Troubleshooting / FAQYour first step in troubleshooting should probably be to &quot;forget all devices&quot;(which as been removed from the iOS app but is still available at[alexa.amazon.com](https://alexa.amazon.com)), re-discover devices, and makesure to refresh your device list (e.g. pull down on the &quot;devices&quot; tab in theiOS app, or just close out the app completely and re-open).- How can I increase my logging verbosity?    - `-v[vv]`    - `-vv` (`logging.INFO`) is a good place to start when debugging- How can I ensure my config is valid JSON?    - `python -m json.tool &lt; config.json`    - Use `jsonlint` or one of numerous online tools- How can I install an older / specific version of Fauxmo?    - Install from a tag:        - `pip install git+git://github.com/n8henrie/fauxmo.git@v0.1.11`    - Install from a specific commit:        - `pip install          git+git://github.com/n8henrie/fauxmo.git@d877c513ad45cbbbd77b1b83e7a2f03bf0004856`- Where can I get more information on how the Echo interacts with devices like  Fauxmo?    - Check out      [`protocol_notes.md`](https://github.com/n8henrie/fauxmo/blob/master/protocol_notes.md)- Does Fauxmo work with non-Echo emulators like Alexa AVS or Echoism.io?    - [Apparently not.](https://github.com/n8henrie/fauxmo/issues/22)- How do I find my Echo firmware version?    - https://alexa.amazon.com -&gt; Settings -&gt; [Device Name] -&gt; Device Software Version### Installing Python 3.7 with [pyenv](https://github.com/pyenv/pyenv)```bashsudo install -o $(whoami) -g $(whoami) -d /opt/pyenvgit clone https://github.com/pyenv/pyenv /opt/pyenvcat &lt;&lt;'EOF' &gt;&gt; ~/.bashrcexport PYENV_ROOT=&quot;/opt/pyenv&quot;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;eval &quot;$(pyenv init -)&quot;EOFsource ~/.bashrcpyenv install 3.7.3```You can then install Fauxmo into Python 3.7 in a few ways, including:```bash# Install with pip&quot;$(pyenv root)&quot;/versions/3.7.3/bin/python3.7 -m pip install fauxmo# Show full path to Fauxmo console scriptpyenv which fauxmo# Run with included console scriptfauxmo -c /path/to/config.json -vvv# I recommend using the full path for use in start scripts (e.g. systemd, cron)&quot;$(pyenv root)&quot;/versions/3.7.3/bin/fauxmo -c /path/to/config.json -vvv# Alternatively, this also works (after `pip install`)&quot;$(pyenv root)&quot;/versions/3.7.3/bin/python3.7 -m fauxmo.cli -c config.json -vvv```## Buy Me a Coffee[☕️](https://n8henrie.com/donate)## Acknowledgements / Reading List- Tremendous thanks to @makermusings for [the original version of  Fauxmo](https://github.com/makermusings/fauxmo)!    - Also thanks to @DoWhileGeek for commits towards Python 3 compatibility- &lt;http://www.makermusings.com/2015/07/13/amazon-echo-and-home-automation&gt;- &lt;http://www.makermusings.com/2015/07/18/virtual-wemo-code-for-amazon-echo&gt;- &lt;http://hackaday.com/2015/07/16/how-to-make-amazon-echo-control-fake-wemo-devices&gt;- &lt;https://developer.amazon.com/appsandservices/solutions/alexa/alexa-skills-kit&gt;- &lt;https://en.wikipedia.org/wiki/Universal_Plug_and_Play&gt;- &lt;http://www.makermusings.com/2015/07/19/home-automation-with-amazon-echo-apps-part-1&gt;- &lt;http://www.makermusings.com/2015/08/22/home-automation-with-amazon-echo-apps-part-2&gt;- &lt;https://www.rilhia.com/tutorials/using-upnp-enabled-devices-talend-belkin-wemo-switch&gt;# [Changelog](https://keepachangelog.com)Will not contain minor changes -- feel free to look through `git log` formore detail.## v0.6.0 :: 20220304- Python 3.10- Add optional `uvloop` support (https://github.com/n8henrie/fauxmo/issues/112)- Add option to override `domain` to `homeassistantplugin.py` (https://github.com/n8henrie/fauxmo/issues/114)## v0.5.1, v0.5.2 :: 20210901- Version bumps to upload new pyproject.toml format to PyPI## v0.5.0 :: 20191212- Add py38 support- Add `use_fake_state` option to accommodate situations that state can't be  properly determined (thanks @johngo7470)- Bugfix: fix unexpected behavior with a switch's state logic was true for both  `on` and `off`- Migrated HomeAssistantPlugin and CommandLinePlugin from fauxmo-plugins repo- Update tests, pytest fixtures, and add some mocks## v0.4.9 :: 20190527- Add py37 support (including Travis workaround)- Fix bug in content-length calculation (thanks @tim15)- Replace `find_unused_port` with local function (thanks @schneideradam)- Use black for formatting- Update `config-sample.txt` for changes in [HomeAssistant  API](https://developers.home-assistant.io/docs/en/external_api_rest.html)## v0.4.8 :: 20180804- Add `.close()` method to `FauxmoPlugin`s, allowing for cleanup (thanks  [@howdypierce](https://github.com/howdypierce))  [discussion](https://github.com/n8henrie/fauxmo/issues/58), e907245- Append plugins directory to `sys.path` for more convenient loading of  additional modules (thanks [@howdypierce](https://github.com/howdypierce))  [discussion](https://github.com/n8henrie/fauxmo/issues/58), 03f2101- Add HTTP headers to `/eventservice.xml` and `/metainfoservice.xml` endpoints  5a53268## v0.4.7 :: 20180512- Minor dev-side changes    - Use pipenv for dev dependency management- Add utf-8 to readme parsing (5 days ago) (thanks     [@hestela](https://github.com/n8henrie/fauxmo/commits?author=hestela)!)     49d2c57- Change newline to `\r\n` in HTTP responses (thanks   [@GlennPegden2](https://github.com/GlennPegden2)) 239bc79- Match `MAN:` case insensitive (thanks [@wingett](https://github.com/wingett))  8307096- Add GetBinaryState and GetFriendlyName commands including test cases (thanks  [@howdypierce](https://github.com/howdypierce)!) 71392de- Make comparison of the &quot;SOAPACTION&quot; header case-insensitive, per UPnP spec  (thanks [@howdypierce](https://github.com/howdypierce)!) a5cdf82- Add fallback for determining IP address when DNS resolution is a problem  (thanks [@howdypierce](https://github.com/howdypierce)!) c2d7f13- Bugfix: ~/.fauxmo/ not being read as a location for config file (thanks  [@howdypierce](https://github.com/howdypierce)!) c322c9b## v0.4.6 :: 20180212- Mostly changes to try to fix compatibility with newer generation Echos / Echo  Plus, see #38## v0.4.5 :: 20171114- Support new GetBinaryState command (fixes n8henrie/fauxmo#31)## v0.4.3 :: 20170914- Add `--version` to cli- Add `python_requires` specifier to `setup.py`- Bind to specific address in `make_udp_sock` (`fauxmo.utils`), seems to fix  some intermittent failing tests on MacOS.## v0.4.2 :: 20170601- Add additional linters to tests- Set reuseaddr and reuseport before binding socket## v0.4.0 :: 20170402- Rename handlers to plugins- Add interface for user plugins- Add type hints- Require Python 3.6- Eliminate third party dependencies- Make sure to close connection when plugin commands fail / return False## v0.3.3 :: 20160722- Added compatibility for `rollershutter` to `handlers.hass`- Changed `handlers.hass` to send values from a dict to make addition of new  services easier in the future## v0.3.2 :: 20160419- Update SSDPServer to `setsockopt` to permit receiving multicast broadcasts- `sock` kwarg to `create_datagram_endpoint` no longer necessary, restoring  functionality to Python 3.4.0 - 3.4.3 (closes #6)- `make_udp_sock()` no longer necessary, removed from `fauxmo.utils`- Tox and Travis configs switched to use Python 3.4.2 instead of 3.4.4 (since  3.4.2 is the latest available in the default Raspbian Jessie repos)## v0.3.1 :: 20160415- Don't decode the UDP multicast broadcasts (hopefully fixes #7)    - They might not be from the Echo and might cause a `UnicodeDecodeError`    - Just search the bytes instead- Tests updated for this minor change## v0.3.0 :: 20160409- Fauxmo now uses asyncio and requires Python &gt;= 3.4.4- *Extensive* changes to codebase- Handler classes renamed for PEP8 (capitalization)- Moved some general purpose functions to `fauxmo.utils` module- Both the UDP and TCP servers are now in `fauxmo.protocols`- Added some rudimentary [pytest](http://pytest.org/latest) tests including [tox](http://tox.readthedocs.org/en/latest) and [Travis](https://travis-ci.org/) support- Updated documentation on several classes## v0.2.0 :: 20160324- Add additional HTTP verbs and options to `RestApiHandler` and Indigo sample  to config    - **NB:** Breaking change: `json` config variable now needs to be either      `on_json` or `off_json`- Make `RestApiHandler` DRYer with `functools.partialmethod`- Add `SO_REUSEPORT` to `upnp.py` to make life easier on OS X## v0.1.11 :: 20160129- Consolidate logger to `__init__.py` and import from there in other modules## v0.1.8 :: 20160129- Add the ability to manually specify the host IP address for cases when the  auto detection isn't working (https://github.com/n8henrie/fauxmo/issues/1)- Deprecated the `DEBUG` setting in `config.json`. Just use `-vvv` from now on.## v0.1.6 :: 20160105- Fix for Linux not returning local IP    - restored method I had removed from Maker Musings original / pre-fork      version not knowing it would introduce a bug where Linux returned      127.0.1.1 as local IP address## v0.1.4 :: 20150104- Fix default verbosity bug introduced in 1.1.3## v0.1.0 :: 20151231- Continue to convert to python3 code- Pulled in a few PRs by [@DoWhileGeek](https://github.com/DoWhileGeek) workingtowards python3 compatibility and improved devices naming with dictionary- Renamed a fair number of classes- Added kwargs to several class and function calls for clarity- Renamed several variables for clarity- Got rid of a few empty methods- Import devices from `config.json` and include a sample- Support `POST`, headers, and json data in the RestApiHandler- Change old debug function to use logging module- Got rid of some unused dependencies- Moved license (MIT) info to LICENSE- Added argparse for future console scripts entry point- Added Home Assistant API handler class- Use &quot;string&quot;.format() instead of percent- Lots of other minor refactoring</longdescription>
</pkgmetadata>