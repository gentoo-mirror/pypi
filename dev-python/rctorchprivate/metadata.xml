<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>RcTorch=========A Pytorch toolset for creating and optimizing Echo State Networks. &gt;License: 2020-2021 MIT  &gt;Authors: Hayden Joy, Marios MattheakisContains:- A ESN Reservoir architecture class &quot;rc.py&quot;- Bayesian Optimization (BO) class &quot;rc_bayes.py&quot; with optimized routines for Echo State Nets through `Botorch` (GPU optimized), can train multiple RCs in parellel durring BO  - an implimentation of the TURBO-1 algorithm as outlined in this paper: https://github.com/uber-research/TuRBO- Capable of solving differential equations (the population equation, the bernoulli equation, a simple harmonic oscillator and a nonlinear oscillator)Reference to prior instantiation:  This library is an extension and expansion of a previous library written by Reinier Maat: https://github.com/1Reinier/Reservoir2018 International Joint Conference on Neural Networks (IJCNN), pp. 1-7. IEEE, 2018  https://arxiv.org/abs/1903.05071## For example usage please see the notebooks folder.# Installation## Using pipLike most standard libraries, `rctorch` is hosted on [PyPI](https://pypi.org/project/RcTorch/). To install the latest stable relesase, ```bashpip install -U rctorch  # '-U' means update to latest version```## Example Usages### Imports```pythonfrom rctorch import *import torch```### Load dataRcTorch has several built in datasets. Among these is the forced pendulum dataset. Here we demonstrate```pythonfp_data = rctorch.data.load(&quot;forced_pendulum&quot;, train_proportion = 0.2)force_train, force_test = fp_data[&quot;force&quot;]target_train, input_test = fp_data[&quot;target&quot;]#Alternatively you can use sklearn's train_test_split.```### Hyper-parameters```python#declare the hyper-parameters&gt;&gt;&gt; hps = {'connectivity': 0.4,           'spectral_radius': 1.13,           'n_nodes': 202,           'regularization': 1.69,           'leaking_rate': 0.0098085,           'bias': 0.49}```### Setting up your very own EchoStateNetwork```pythonmy_rc = RcNetwork(**hps, random_state = 210, feedback = True)#fitting the data:my_rc.fit(y = target_train)#making our predictionscore, prediction = my_rc.test(y = target_test)my_rc.combined_plot()```![](https://raw.githubusercontent.com/blindedjoy/RcTorch-private/blob/master/resources/pure_prediction1.jpg)Feedback allows the network to feed in the prediction at the previous timestep as an input. This helps the RC to make longer and more stable predictions in many situations.### Bayesian OptimizationUnlike most other reservoir neural network packages ours offers the automatically tune hyper-parameters.```python#any hyper parameter can have 'log_' in front of it's name. RcTorch will interpret this properly. bounds_dict = {&quot;log_connectivity&quot; : (-2.5, -0.1),                &quot;spectral_radius&quot; : (0.1, 3),               &quot;n_nodes&quot; : (300,302),               &quot;log_regularization&quot; : (-3, 1),               &quot;leaking_rate&quot; : (0, 0.2),               &quot;bias&quot;: (-1,1),               }rc_specs = {&quot;feedback&quot; : True,             &quot;reservoir_weight_dist&quot; : &quot;uniform&quot;,             &quot;output_activation&quot; : &quot;tanh&quot;,             &quot;random_seed&quot; : 209}rc_bo = RcBayesOpt(bounds = bounds_dict,                     scoring_method = &quot;nmse&quot;,                    n_jobs = 1,                    cv_samples = 3,                    initial_samples= 25,                    **rc_specs                    )```</longdescription>
</pkgmetadata>