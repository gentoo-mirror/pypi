<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python NuHeat[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/nuheat?style=flat-square)](https://pypi.org/project/nuheat/)[![PyPI - Version](https://img.shields.io/pypi/v/nuheat?style=flat-square)](https://pypi.org/project/nuheat/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/nuheat?style=flat-square)](https://pypi.org/project/nuheat/)[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/broox/python-nuheat/Python%20package?style=flat-square)](https://github.com/broox/python-nuheat/actions?query=branch%3Amaster)[![Coveralls](https://img.shields.io/coveralls/github/broox/python-nuheat?style=flat-square)](https://coveralls.io/github/broox/python-nuheat?branch=master)[![Snyk Vulnerabilities for GitHub Repo](https://img.shields.io/snyk/vulnerabilities/github/broox/python-nuheat?style=flat-square)](https://snyk.io/advisor/python/nuheat)A Python 3 library that allows control of connected [NuHeat Signature](http://www.nuheat.com/products/thermostats/signature-thermostat) radiant floor thermostats.* This uses the web-based NuHeat API, so it requires an external internet connection* The API in use is not an officially published API, so it could change without notice* Please contribute!# Installation```shell$ pip install nuheat```# Usage```pythonfrom nuheat import NuHeat# Initalize an API session with your login credentialsapi = NuHeat(&quot;email@example.com&quot;, &quot;your-secure-password&quot;)api.authenticate()# Fetch a thermostat by serial number / ID. This can be found on the NuHeat website by selecting# your thermostat and noting the Thermostat IDthermostat = api.get_thermostat(&quot;12345&quot;)# Get the current temperature of the thermostatthermostat.fahrenheitthermostat.celsius# Get the current target temperature of the thermostatthermostat.target_fahrenheitthermostat.target_celsius# Get the minimum and maximum temperatures supported by the thermostatthermostat.min_fahrenheitthermostat.max_fahrenheitthermostat.min_celsiusthermostat.max_celsius# Get the current mode of the thermostatthermostat.schedule_mode# The possible schedule modes are one of the following 3 integers:# 1. Run the schedule programmed into the thermostat# 2. Temporarily hold a target temperature until the next scheduled event# 3. Permanently hold a target temperature until the mode is manually changed# Get other propertiesthermostat.heatingthermostat.onlinethermostat.serial_number# Set a new temperature and permanently hold# Note: Any pre-programmed thermostat schedules will be ignored until you resume the schedule or# change the mode.thermostat.set_target_fahrenheit(72)# If you prefer celsius...thermostat.set_target_celsius(22)# You can also do this via the convenience property settersthermostat.target_fahrenheit = 72# or with celsiusthermostat.target_celsius = 22# To resume the schedule programmed into the thermostatthermostat.resume_schedule()# Which is effectively the same as explicitly changing the mode like sothermostat.schedule_mode = 1# To set a new target temperature with an explicit schedule modethermostat.set_target_fahrenheit(72, mode=2)# If you prefer celsius, you can use that toothermostat.set_target_celsius(22, mode=2)# Set a target temperature until a specified datetime# Note: A timezone aware datetime should be passed in, otherwise UTC will be assumedfrom datetime import datetime, timedelta, timezonehold_time = datetime.now() + timedelta(hours=4)thermostat.set_target_fahrenheit(69, mode=2, hold_time=hold_time)```# ContributingPull requests are always welcome!## Running locally with Docker```shell# Build and run the docker container:$ docker build -t python-nuheat .$ docker run -it --rm -v $(pwd):/python-nuheat python-nuheat# To run the interactive shell:$ ipython# To run tests:$ pytest```</longdescription>
</pkgmetadata>