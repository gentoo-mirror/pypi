<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![NPM version](https://badge.fury.io/js/cdk-kaniko.svg)](https://badge.fury.io/js/cdk-kaniko)[![PyPI version](https://badge.fury.io/py/cdk-kaniko.svg)](https://badge.fury.io/py/cdk-kaniko)[![Release](https://github.com/pahud/cdk-kaniko/actions/workflows/release.yml/badge.svg)](https://github.com/pahud/cdk-kaniko/actions/workflows/release.yml)# `cdk-kaniko`Build images with `kaniko` in **AWS Fargate**# About`cdk-kaniko` is a CDK construct library that allows you to build images with [**kaniko**](https://github.com/GoogleContainerTools/kaniko) in **AWS Fargate**. Inspired from the blog post - [Building container images on Amazon ECS on AWS Fargate](https://aws.amazon.com/tw/blogs/containers/building-container-images-on-amazon-ecs-on-aws-fargate/) by *Re Alvarez-Parmar* and *Olly Pomeroy*, this library aims to abstract away all the infrastructure provisioning and configuration with minimal IAM policies required and allow you to focus on the high level CDK constructs. Under the covers, `cdk-kaniko` leverages the [cdk-fargate-run-task](https://github.com/pahud/cdk-fargate-run-task) so you can build the image just once or schedule the building periodically.# InstallUse the npm dist tag to opt in CDKv1 or CDKv2:```sh// for CDKv2npm install cdk-kanikoornpm install cdk-kaniko@latest// for CDKv1npm install cdk-kaniko@cdkv1```# Sample```python# Example automatically generated from non-compiling source. May contain errors.const app = new cdk.App();const stack = new cdk.Stack(app, 'my-stack-dev');const kaniko = new Kaniko(stack, 'KanikoDemo', {  context: 'git://github.com/pahud/vscode.git',  contextSubPath: './.devcontainer',});// build it oncekaniko.buildImage('once');// schedule the build every day 0:00AMkaniko.buildImage('everyday', Schedule.cron({  minute: '0',  hour: '0',}));```# fargate spot supportUse `fargateSpot` to enable the `FARGATE_SPOT` capacity provider to provision the fargate tasks.```python# Example automatically generated from non-compiling source. May contain errors.new Kaniko(stack, 'KanikoDemo', {  context,  contextSubPath,  fargateSpot: true,});```# NotePlease note the image building could take some minutes depending on the complexity of the provided `Dockerfile`. On deployment completed, you can check and tail the **AWS Fargate** task logs from the **AWS CloudWatch Logs** to view all the build output.</longdescription>
</pkgmetadata>