<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;br&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://ultimabi.uk/&quot; target=&quot;_blank&quot;&gt;    &lt;img width=&quot;900&quot; src=&quot;https://ultima-bi.s3.eu-west-2.amazonaws.com/imgs/logo.png&quot; alt=&quot;Ultima Logo&quot;&gt;    &lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;h3 align=&quot;center&quot;&gt;the ultimate data analytics tool &lt;br&gt; for no code visualisation and collaborative exploration.&lt;/h3&gt;&lt;h3 align=&quot;center&quot;&gt;Present easier. &amp;nbsp; Dig deeper. &amp;nbsp; Review together. &amp;nbsp;&lt;/h3&gt;# The Ultimate BI toolWith `Ultibi` you can turn your `DataFrame` into a pivot table with a UI and share it across organisation. You can also define measures applicable to your `DataFrame`.  This means your colleagues/consumers don't have to write any code to analyse the data.&lt;br&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://frtb.demo.ultimabi.uk/&quot; target=&quot;_blank&quot;&gt;    &lt;img width=&quot;900&quot; src=&quot;https://ultima-bi.s3.eu-west-2.amazonaws.com/imgs/UltimaScreenshotExplained.jpg&quot; alt=&quot;Ultima Logo&quot;&gt;    &lt;/a&gt;&lt;/p&gt;&lt;br&gt;Ultibi leverages on the giants: [Actix](https://github.com/actix/actix-web), [Polars](https://github.com/pola-rs/polars) and Rust which make this possible. We use TypeScript for the frontend.# ExamplesOur userguide is under development.In the mean time refer to FRTB [userguide](https://ultimabi.uk/ultibi-frtb-book/).## Python### Quickstart```pythonimport ultibi as ulimport polars as plimport osos.environ[&quot;RUST_LOG&quot;] = &quot;info&quot; # enable logsos.environ[&quot;ADDRESS&quot;] = &quot;0.0.0.0:8000&quot; # host on this address# Read Data# for more details: https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.htmldf = pl.read_csv(&quot;titanic.csv&quot;)# Convert it into an Ultibi DataSetds = ul.DataSet.from_frame(df)# By default (might change in the future)# Fields are Utf8 (non numerics) and integers# Measures are numeric columns.ds.ui() ```Then navigate to `http://localhost:8000` or checkout `http://localhost:8000/swagger-ui` for the OpenAPI documentation.### More flexible - custom measures```pythonimport ultibi as ulimport polars as plimport osos.environ[&quot;RUST_LOG&quot;] = &quot;info&quot; # enable logsos.environ[&quot;ADDRESS&quot;] = &quot;0.0.0.0:8000&quot; # host on this address# Read Data# for more details: https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.read_csv.htmldf = pl.read_csv(&quot;titanic.csv&quot;)# Let's add some Custom/Bespoke Calculations to our UI# Standard Calculatordef survival_mean_age(kwargs: dict[str, str]) -&gt; pl.Expr:    &quot;&quot;&quot;Mean Age of Survivals    pl.col(&quot;survived&quot;) is 0 or 1    pl.col(&quot;age&quot;) * pl.col(&quot;survived&quot;) - age of survived person, otherwise 0    pl.col(&quot;survived&quot;).sum() - number of survived    &quot;&quot;&quot;    return pl.col(&quot;age&quot;) * pl.col(&quot;survived&quot;) / pl.col(&quot;survived&quot;).sum()# Also a Standard Calculatordef example_dep_calc(kwargs: dict[str, str]) -&gt; pl.Expr:    return pl.col(&quot;SurvivalMeanAge_sum&quot;) + pl.col(&quot;SouthamptonFareDivAge_sum&quot;)# When we need more involved calculations we go for a Custom Calculatordef custom_calculator(            srs: list[pl.Series], kwargs: dict[str, str]        ) -&gt; pl.Series:        &quot;&quot;&quot;        Southampton Fare/Age*multiplier        &quot;&quot;&quot;        df = pl.DataFrame({&quot;age&quot;: srs[0],                            &quot;fare&quot;: srs[1],                            &quot;e&quot;: srs[2]})         # Add Indicator Column for Southampton        df = df.with_columns(pl.when(pl.col(&quot;e&quot;)==&quot;S&quot;).then(1).otherwise(0).alias(&quot;S&quot;))         multiplier = float(kwargs.get(&quot;multiplier&quot;, 1))        res = df[&quot;S&quot;] * df[&quot;fare&quot;] / df[&quot;age&quot;] * multiplier        return res# inputs for the custom_calculator srs paraminputs = [&quot;age&quot;, &quot;fare&quot;, &quot;embarked&quot;]# We return Floatsres_type = pl.Float64# We return a Series, not a scalar (which otherwise would be auto exploded)returns_scalar = Falsemeasures = [            ul.BaseMeasure(                &quot;SouthamptonFareDivAge&quot;,                ul.CustomCalculator(                    custom_calculator, res_type, inputs, returns_scalar                ),                # (Optional) - we are only interested in Southampton, so                # unless other measures requested we might as well filter for Southampton only                # However, if if multiple measures requested, their precompute_filters will be joined as OR.                [[ul.EqFilter(&quot;embarked&quot;, &quot;S&quot;)]],                # PARAMS tab of the UI                calc_params=[ul.CalcParam(&quot;mltplr&quot;, &quot;1&quot;, &quot;float&quot;)]            ),            ul.BaseMeasure(                &quot;SurvivalMeanAge&quot;,                ul.StandardCalculator(survival_mean_age),                aggregation_restriction=&quot;sum&quot;,            ),            ul.DependantMeasure(                &quot;A_Dependant_Measure&quot;,                ul.StandardCalculator(example_dep_calc),                [(&quot;SurvivalMeanAge&quot;, &quot;sum&quot;), (&quot;SouthamptonFareDivAge&quot;, &quot;sum&quot;)],            ),        ]# Convert it into an Ultibi DataSetds = ul.DataSet.from_frame(df, bespoke_measures=measures)# By default (might change in the future)# Fields are Utf8 (non numerics) and integers# Measures are numeric columns.ds.ui() ```### DataSourcesWe provide aim to support different sources of the data. ```pythonscan = pl.read_csv(&quot;../frtb_engine/data/frtb/Delta.csv&quot;,                            dtypes={&quot;SensitivitySpot&quot;: pl.Float64})dsource = ul.DataSource.inmemory(scan)ds = ul.DataSet.from_source(dsource)ds.prepare() # .prepare() is only relevant to FRTB dataset currentlyds.ui()```If you don't want to/can't hold all your data in the process memory, you can sacrifise performance for memory with Scan/DataBase```pythonimport polars as plimport ultibi as ul# Note that the LazyFrame query must start with scan_# and must've NOT been collectedscan = pl.scan_csv(&quot;../frtb_engine/data/frtb/Delta.csv&quot;,                     dtypes={&quot;SensitivitySpot&quot;: pl.Float64})dsource = ul.DataSource.scan(scan)ds = ul.DataSet.from_source(dsource)ds.ui()```Note: Naturally the later two options will be slower, because prior to computing your measures we will need to read the relevant bits of the data into the process memory. ### FRTB SA[FRTB SA](https://en.wikipedia.org/wiki/Fundamental_Review_of_the_Trading_Book) is a great usecase for `ultibi`. FRTB SA is a set of standardised, computationally intensive rules established by the regulator. High business impact of these rules manifests in need for **analysis** and **visibility** thoroughout an organisation. Note: Ultima is not a certified aggregator. Always benchmark the results against your own interpretation of the rules.See python frtb [userguide](https://ultimabi.uk/ultibi-frtb-book/).### License `ultibi` python library is made available exclusively for the purpose of demonstrating the possibilities offered by the Software so users can evaluate the possibilities and potential of the Software. You can choose one of the following:1) Non production usage. Where production usage means any business usage of the results and outputs arising from/produced by the software. Examples of &quot;business usage&quot; could be any of, but not limited to, decision making, reporting, advising to a third party etc2) Proprietary License.  which allow you to use the software in whichever way you want. These `licenses` are extremely affordable, and you can check out the options by reaching out to us directly, via `anatoly at ultimabi dot uk`, or by visiting `ultimabi dot uk`### No LiabilityAs far as the law allows, the software comes as is, without any warranty or condition, and the licensor will not be liable to you for any damages arising out of these terms or the use or nature of the software, under any kind of legal claim.</longdescription>
</pkgmetadata>