<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SpatioTemporal Asset Catalog (STAC) Validator## Validate STAC json files against the [STAC spec](https://github.com/radiantearth/stac-spec).       ```bashstac-validator https://raw.githubusercontent.com/radiantearth/stac-spec/master/examples/extended-item.json[    {        &quot;version&quot;: &quot;1.0.0&quot;,        &quot;path&quot;: &quot;https://raw.githubusercontent.com/radiantearth/stac-spec/master/examples/extended-item.json&quot;,        &quot;schema&quot;: [            &quot;https://stac-extensions.github.io/eo/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/projection/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/scientific/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/view/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/remote-data/v1.0.0/schema.json&quot;,            &quot;https://schemas.stacspec.org/v1.0.0/item-spec/json-schema/item.json&quot;        ],        &quot;valid_stac&quot;: true,        &quot;asset_type&quot;: &quot;ITEM&quot;,        &quot;validation_method&quot;: &quot;default&quot;    }]```## Requirements- Python 3.7+  - Requests  - Click  - Pytest  - JsonschemaNote: Stac-validator is also used in stac-check which adds linting messages based on the official STAC best practices document.  https://github.com/stac-utils/stac-check## InstallInstallation from PyPi```bashpip install stac-validator```Installation from Repo```bashpip install .```or (for development)```bashpip install --editable .[&quot;test&quot;]```The [Makefile](./Makefile) has convenience commands if Make is installed.```bashmake help```## Versions supported| STAC         || ------------ || 0.8.0        || 0.8.1        || 0.9.0        || 1.0.0-beta.1 || 1.0.0-beta.2 || 1.0.0-rc.1   || 1.0.0-rc.2   || 1.0.0-rc.3   || 1.0.0-rc.4   || 1.0.0        |---# CLI**Basic Usage**```bashstac-validator --helpUsage: stac-validator [OPTIONS] STAC_FILEOptions:  --core                   Validate core stac object only without extensions.  --extensions             Validate extensions only.  --links                  Additionally validate links. Only works with                           default mode.  --assets                 Additionally validate assets. Only works with                           default mode.  -c, --custom TEXT        Validate against a custom schema (local filepath or                           remote schema).  -r, --recursive          Recursively validate all related stac objects.  -m, --max-depth INTEGER  Maximum depth to traverse when recursing. Omit this                           argument to get full recursion. Ignored if                           `recursive == False`.  --item-collection        Validate item collection response. Can be combined                           with --pages. Defaults to one page.  -p, --pages INTEGER      Maximum number of pages to validate via --item-                           collection. Defaults to one page.  -v, --verbose            Enables verbose output for recursive mode.  --no_output              Do not print output to console.  --log_file TEXT          Save full recursive output to log file (local                           filepath).  --version                Show the version and exit.  --help                   Show this message and exit.```---# Deployment## DockerThe validator can run using docker containers.```bashdocker build -t stac-validator .docker run stac-validator https://raw.githubusercontent.com/stac-extensions/projection/main/examples/item.json[    {        &quot;version&quot;: &quot;1.0.0&quot;,        &quot;path&quot;: &quot;https://raw.githubusercontent.com/stac-extensions/projection/main/examples/item.json&quot;,        &quot;schema&quot;: [            &quot;https://stac-extensions.github.io/projection/v1.0.0/schema.json&quot;,            &quot;https://schemas.stacspec.org/v1.0.0/item-spec/json-schema/item.json&quot;        ],        &quot;valid_stac&quot;: true,        &quot;asset_type&quot;: &quot;ITEM&quot;,        &quot;validation_method&quot;: &quot;default&quot;    }]```## AWS (CDK)An example [AWS CDK](https://aws.amazon.com/cdk/) deployment is available in [cdk-deployment](./cdk-deployment/README.md)```bashcd cdk-deploymentcdk diff```---# Python**Remote source**```pythonfrom stac_validator import stac_validatorstac = stac_validator.StacValidate(&quot;https://raw.githubusercontent.com/stac-utils/pystac/main/tests/data-files/examples/0.9.0/collection-spec/examples/landsat-collection.json&quot;)stac.run()print(stac.message)[    {        &quot;version&quot;: &quot;0.9.0&quot;,        &quot;path&quot;: &quot;https://raw.githubusercontent.com/stac-utils/pystac/main/tests/data-files/examples/0.9.0/collection-spec/examples/landsat-collection.json&quot;,        &quot;schema&quot;: [            &quot;https://cdn.staclint.com/v0.9.0/collection.json&quot;        ],        &quot;valid_stac&quot;: true,        &quot;asset_type&quot;: &quot;COLLECTION&quot;,        &quot;validation_method&quot;: &quot;default&quot;    }]```**Local file**```pythonfrom stac_validator import stac_validatorstac = stac_validator.StacValidate(&quot;tests/test_data/1beta1/sentinel2.json&quot;, extensions=True)stac.run()print(stac.message)[    {        &quot;version&quot;: &quot;1.0.0-beta.1&quot;,        &quot;path&quot;: &quot;tests/test_data/1beta1/sentinel2.json&quot;,        &quot;schema&quot;: [            &quot;https://cdn.staclint.com/v1.0.0-beta.1/collection.json&quot;        ],        &quot;valid_stac&quot;: true,        &quot;asset_type&quot;: &quot;COLLECTION&quot;,        &quot;validation_method&quot;: &quot;extensions&quot;    }]```**Dictionary**  ```pythonfrom stac_validator import stac_validator  stac = stac_validator.StacValidate()stac.validate_dict(dictionary)print(stac.message)```**Item Collection**  ```pythonfrom stac_validator import stac_validator  stac = stac_validator.StacValidate()stac.validate_item_collection_dict(item_collection_dict)print(stac.message)```---# Testing```bashmake test# orpytest -v```See the [tests](./tests/test_stac_validator.py) files for examples on different usages.---# Additional Examples**--core**```bashstac-validator https://raw.githubusercontent.com/radiantearth/stac-spec/master/examples/extended-item.json --core[    {        &quot;version&quot;: &quot;1.0.0&quot;,        &quot;path&quot;: &quot;https://raw.githubusercontent.com/radiantearth/stac-spec/master/examples/extended-item.json&quot;,        &quot;schema&quot;: [            &quot;https://schemas.stacspec.org/v1.0.0/item-spec/json-schema/item.json&quot;        ],        &quot;valid_stac&quot;: true,        &quot;asset_type&quot;: &quot;ITEM&quot;,        &quot;validation_method&quot;: &quot;core&quot;    }]```**--custom**```bashstac-validator https://radarstac.s3.amazonaws.com/stac/catalog.json --custom https://cdn.staclint.com/v0.7.0/catalog.json[    {        &quot;version&quot;: &quot;0.7.0&quot;,        &quot;path&quot;: &quot;https://radarstac.s3.amazonaws.com/stac/catalog.json&quot;,        &quot;schema&quot;: [            &quot;https://cdn.staclint.com/v0.7.0/catalog.json&quot;        ],        &quot;asset_type&quot;: &quot;CATALOG&quot;,        &quot;validation_method&quot;: &quot;custom&quot;,        &quot;valid_stac&quot;: true    }]```**--extensions**```bashstac-validator https://raw.githubusercontent.com/radiantearth/stac-spec/master/examples/extended-item.json --extensions[    {        &quot;version&quot;: &quot;1.0.0&quot;,        &quot;path&quot;: &quot;https://raw.githubusercontent.com/radiantearth/stac-spec/master/examples/extended-item.json&quot;,        &quot;schema&quot;: [            &quot;https://stac-extensions.github.io/eo/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/projection/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/scientific/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/view/v1.0.0/schema.json&quot;,            &quot;https://stac-extensions.github.io/remote-data/v1.0.0/schema.json&quot;        ],        &quot;valid_stac&quot;: true,        &quot;asset_type&quot;: &quot;ITEM&quot;,        &quot;validation_method&quot;: &quot;extensions&quot;    }]```   **--recursive**```bashstac-validator https://spot-canada-ortho.s3.amazonaws.com/catalog.json --recursive --max-depth 1 --verbose[    {        &quot;version&quot;: &quot;0.8.1&quot;,        &quot;path&quot;: &quot;https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot4_orthoimages/collection.json&quot;,        &quot;schema&quot;: &quot;https://cdn.staclint.com/v0.8.1/collection.json&quot;,        &quot;asset_type&quot;: &quot;COLLECTION&quot;,        &quot;validation_method&quot;: &quot;recursive&quot;,        &quot;valid_stac&quot;: true    },    {        &quot;version&quot;: &quot;0.8.1&quot;,        &quot;path&quot;: &quot;https://canada-spot-ortho.s3.amazonaws.com/canada_spot_orthoimages/canada_spot5_orthoimages/collection.json&quot;,        &quot;schema&quot;: &quot;https://cdn.staclint.com/v0.8.1/collection.json&quot;,        &quot;asset_type&quot;: &quot;COLLECTION&quot;,        &quot;validation_method&quot;: &quot;recursive&quot;,        &quot;valid_stac&quot;: true    },    {        &quot;version&quot;: &quot;0.8.1&quot;,        &quot;path&quot;: &quot;https://spot-canada-ortho.s3.amazonaws.com/catalog.json&quot;,        &quot;schema&quot;: &quot;https://cdn.staclint.com/v0.8.1/catalog.json&quot;,        &quot;asset_type&quot;: &quot;CATALOG&quot;,        &quot;validation_method&quot;: &quot;recursive&quot;,        &quot;valid_stac&quot;: true    }]```**--item-collection**```bashstac-validator https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a/items --item-collection --pages 2```</longdescription>
</pkgmetadata>