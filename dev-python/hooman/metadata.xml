<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;br&gt;  &lt;a href=&quot;https://github.com/Abdur-rahmaanJ/hooman&quot;&gt;&lt;img src=&quot;https://github.com/Abdur-rahmaanJ/hooman/raw/master/assets/hooman.png&quot; alt=&quot;Hooman&quot;&gt;&lt;/a&gt;  &lt;br&gt;&lt;/p&gt;# hooman [![Downloads](https://pepy.tech/badge/hooman)](https://pepy.tech/project/hooman) ![PyPI](https://img.shields.io/pypi/v/hooman)~ pygame for humans [ [docs](https://abdur-rahmaanj.github.io/hooman) | [gallery](https://abdur-rahmaanj.github.io/hooman/gallery) ]```pip install hooman```join discord: https://discord.gg/Q23ATveThe package for clearer, shorter and cleaner PyGame codebases!Fun fact: Codementor.io [tweeted about Hooman](https://twitter.com/CodementorIO/status/1306295790441246725?s=20) tagged #LearnPython #100DaysOfCode# Tutorials- [Building A Color Picker](https://dev.to/abdurrahmaanj/building-a-color-picker-in-pygame-using-hooman-307m)- [Display most frequent words using PyGame](https://www.pythonkitchen.com/display-most-frequent-words-python-pygame/)- [Realtime CPU monitor using PyGame](https://www.pythonkitchen.com/realtime-cpu-monitor-using-pygame/)- [Android's Lock Screen in Pygame](https://www.codementor.io/@abdurrahmaanj/android-s-lock-screen-pattern-in-pygame-1y12ejsg3s)- [Demos](https://github.com/Abdur-rahmaanJ/hooman/tree/master/hooman/demos) - [Possibilities](https://github.com/Abdur-rahmaanJ/hooman/blob/master/Examples%20of%20possibilities.md)# Getting Startedhooman makes developing with pygame easy by having everything in 1 object!```pythonfrom hooman import Hoomanhapi = Hooman(width, height)while hapi.is_running:    hapi.flip_display()    hapi.event_loop()```# PlaygroundYou can use the *[jurigged](https://github.com/breuleux/jurigged)* package to reload your code while you update your file. The latter will give you a quick visual feedback while coding.## Example```jurigged hooman/hooman/demos/sketch_pad.py```# Contributing Notes-   **Demos**: Include your name and Github URL in a docstring at the top of the demo file# [features](new_features.md)- record video- screenshot- integrate with other pygame codes- save to svg- keyword argument same as dictionary# Docs## Attributes## .WIDTH-   `hapi.WIDTH` is gives the width of the screen## .HEIGHT-   `hapi.HEIGHT` is gives the height of the screen## .is_running-   if loop is running## .screenstill exposes a screen to draw with any pygame shape`pygame.draw.arc(hapi.screen, (255, 0, 0), [80,10,200,200], hapi.PI, hapi.PI/2, 2)`## Constants## .PIThe value of pi as provided by the maths module`pygame.draw.arc(hapi.screen, (255, 0, 0), [80,10,200,200], hapi.PI, hapi.PI/2, 2)`## Colors, strokes &amp; Fill## .fill-   used for colouring next shapes-   `hapi.fill((100, 100, 100))` for r g b-   `hapi.fill(100)` same as `hapi.fill((100, 100, 100))`## .stroke-   used to set color of next shapes' outlines-   `hapi.stroke((100, 100, 100))` for r g b-   `hapi.stroke(100)` same as `hapi.stroke((100, 100, 100))`## .background-   used to set background color of screen-   `hapi.background((100, 100, 100))` for r g b-   `hapi.background(100)` same as `hapi.background((100, 100, 100))`## .set_background-   used to have the background drawn every frame automatically-   `hapi.set_background((100, 100, 100))`-   same as `hapi.background((100, 100, 100))`## .colorsame as```{    'red': (255, 0, 0),    'green': (0, 255, 0),    'blue': (0, 0, 255),    'black': (0, 0, 0),    'white': (255, 0, 0),    'yellow': (255, 255, 0),    'grey': (100, 100, 100)}```also `.colors`, `.colours`, `.colour` same## Size## .stroke_size-   used to control thickness of lines and outlines-   `hapi.stroke_size(size)` where size is an int## .no_stroke-   set lines and outlines thickness to 0-   `hapi.no_stroke()`-   same as `hapi.stroke_size(0)`## .font_size-   sets font size of text-   `hapi.font_size(12)`## Basic elements## .rect`hapi.rect(x, y, width, height)`-   x - x coordinate-   y - y coordinate## .ellipse`hapi.ellipse(x, y, width, height)`-   x - x coordinate-   y - y coordinate## .line`hapi.line(x1, y1, x2, y2)`-   x1 - x coordinate of first point-   y1 - y coordinate of first point-   x2 - x coordinate of second point-   y2 - y coordinate of second point## .text`.text(letters, x, y)`-   letters - string of chars eg. 'abcd'-   x - x coordinate-   y - y coordinate-   will convert any type passed to string-   `hapi.text(5, 10, 10)` is valid-   `hapi.text(hapi.mouseX(), 10, 10)` is valid out of the box## .polygon`.polygon(coords, fill=True)`-   coords is a 2d array [(0,0), (10, 10), (10, 100)]-   if fill is `False`, only the outline will be drawn-   adjust outline with `.stroke_size`## .begin_shape`hapi.begin_shape()` starts drawing a polygon## .vertex`.vertex((100, 200))`## .end_shape`hapi.end_shape(fill=True)` draws polygon on closingMinimal demo of `.begin_shape`, `.vertex` and `.end_shape````pythonfrom hooman import Hoomanimport pygamehapi = Hooman(500, 500)def handle_events(event):    if event.type == pygame.QUIT:        hapi.is_running = Falsehapi.handle_events = handle_eventswhile hapi.is_running:    hapi.background(hapi.color['white'])    hapi.fill(hapi.color['blue'])    hapi.stroke_size(4)    hapi.begin_shape()    hapi.vertex((0, 0))    hapi.vertex((100, 0))    hapi.vertex((hapi.mouseX(), hapi.mouseY()))    hapi.end_shape()    # same as hapi.polygon([(0, 0), (100, 0), (hapi.mouseX(), hapi.mouseY())])    hapi.flip_display()    hapi.event_loop()pygame.quit()```## .heart`.heart(x, y, w, h)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height## .star`.star(x, y, r1, r2, npoints)`-   x - x coordinate-   y - y coordinate-   r1 - radius on the x axis, same as half width-   r2 - radius on the y axis, same as half height-   npoints - the number of points of the star, this is a minimum of 2## .curve_rect`.curve_rect(x, y, w, h, curve)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height-   curve - the percentage of curve with 0 being no curve and 100 being full curve## .arrow`.arrow(x, y, w, h)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height## .alpha_ellipse`.alpha_ellipse(x, y, w, h)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height## .regular_polygon`.regular_polygon(x, y, w, h, npoints, angle_offset)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height-   npoints - the number of points/corners of the polygon eg. 4 is a square-   angle_offset - the first point will be drawn from the top, this moves it to Î¸ degrees anti-clockwise## .supershape-   note see paulbourke.net/geometry/supershape/ on how to use supershape-   there is also presets for this below`.supershape(x, y, w, h, options)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height-   options - optional options for the shape#### optional options-   n1-   n2-   n3-   m-   a-   b-   phi## .smooth_starnote this is a preset for supershape`.smooth_star(x, y, w, h, n1=0.20, fill=False)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height-   n1 - controls the smoothness of the star, this is between 0 and 1-   fill - when set to False, only the outline will be drawn## .oil_dropnote this is a preset for supershape`.oil_drop(x, y, w, h, n1=0.3, fill=False)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height-   n1 - controls the size of the drop, must be between 0 and 1-   fill - when set to False, only the outline will be drawn## .flowing_starnote this is a preset for supershape`.flowing_star(x, y, w, h, n1=0.3, fill=False)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height-   n1 - controls the inflation of the shape, must be between 0 and 1-   fill - when set to False, only the outline will be drawn## .gradient_rect`.gradient_rect(x, y, w, h, start_col, end_col, direction=0)`-   x - x coordinate-   y - y coordinate-   w - width-   h - height-   start_col - this is the color it starts with-   end_col - this is the color it ends with-   direction - the direction of the gradient, 0 is horizontal where it starts on the left and 1 is vertical where is starts on the top## .cross_hair`.cross_hair(coord)`-   coord - the x and y position of the center of the cross_hairs## Interactivity## .mouseX-   `hapi.mouseX()` gives the current x coordinate of the mouse## .mouseY-   `hapi.mouseY()` gives the current y coordinate of the mouse## Pygame specifics## .flip_display-   is just `pygame.display.flip()` behind the scene## .event_looprequires```pythondef handle_events(event):    if event.type == pygame.QUIT:        hapi.is_running = Falsehapi.handle_events = handle_events```-   is put inside `hapi.is_running` loop## .set_captionsame as `pygame.display.set_caption`# Ui## .update_ui-   no need to update each element if you call this-   called inside `hapi.is_running` loop-   here is when **NOT** to use it:```pythonwhile hapi.is_running:    for i in range(5):            x = hapi.button(10+i*80, hapi.mouseY(), &quot;Click Me&quot;,                grey_style            )        hapi.update_ui()```## .buttonCreate a button with `hapi.button(x, y, w, h, text, [optional paramters])`-   `x` - x location of the button-   `y` - y location of the button-   `w` - width of the button-   `h` - height of the button-   `text` - the text on the button-   `[optional parameters]` - a dictionary of any extra options you want for the button listed below#### Optional Parameters```python    &quot;hover_background_color&quot;: None    &quot;outline&quot;: False    &quot;outline_thickness&quot;: 0    &quot;hover_outline_thickness&quot;: None    &quot;outline_color&quot;: (0, 0, 0)    &quot;outline_half&quot;: False    &quot;hover_image&quot;: None    &quot;enlarge&quot;: False    &quot;enlarge_amount&quot;: 1.1    &quot;calculate_size&quot;: False    &quot;dont_generate&quot;: False    &quot;padding_x&quot;: 0    &quot;padding_y&quot;: 0    all options from Base Ui Widget```plus all parameters from [Base Widget](#Base-Widget)```pythondef on_hover_enter(btn):    btn.background_color = hapi.color['blue']button = hapi.button(150, 250, &quot;Click Me&quot;,        {'on_hover_enter':on_hover_enter}    )```#### Methods-   `update()` -&gt; bool - this updates the button and draws it on screen, this should be called every frame, return whether the button was clicked-   `Update_text(text)` - this changes the text and recreates the button-   `create_button()` - this applies any changes to the button## .slider`.slider(x, y, w, h, [optional parameters])`-   `x` - x coordinate-   `y` - y coordinate-   `w` - width-   `h` - height-   optional parameters - a dictionary of optional options#### optional parameters```python    &quot;slider_width&quot;: None    &quot;slider_color&quot;: (200, 200, 200)    &quot;starting_value&quot;: None    &quot;range&quot;: [0, 1]    &quot;slider_height&quot;: None    &quot;step&quot;: 0    &quot;direction&quot;: &quot;horizontal&quot;    &quot;slider_image&quot;: None    &quot;slider_curve&quot;: 0```plus all parameters from [Base Widget](#Base-Widget)#### Methods-   `update()` -&gt; float - this updates the slider and draws it on screen, this should be called every frame, return the value-   `value()` - this returns the current value of the slider-   `set_value(value)` - given a integer or float, this sets the value and moves the slider## .slider_with_text`.slider_with_text(slider, [optianl parameters])`- `slider` - a `.slider` widget- optional parameters - a dictionary of optional options#### optional parameters```python    &quot;font&quot;: &quot;calibri&quot;    &quot;font_size&quot;: 20    &quot;font_color&quot;: (0, 0, 0)    &quot;padding_y&quot;: 2    &quot;padding_x&quot;: 0    &quot;pivot&quot;: &quot;top_left&quot;    &quot;accuracy&quot;: 0```plus all parameters from [Base Widget](#Base-Widget)#### Methods- `update()` - this updates the text and the given slider- `value()` - this returns the value of the given slider## .scroll`.scroll([optional parameters])`-   optional parameters - a dictionary of optional options#### optional parameters```python    &quot;starting_x&quot;: 0    &quot;starting_y&quot;: 0    &quot;range_x&quot;: 0    &quot;range_y&quot;: 0    &quot;bar_color&quot;: (200, 200, 200)    &quot;slider_color&quot;: (150, 150, 150)```#### Methods-`update()` - this updates the scroll widget#### how to use the scroll- use `scroll_widget[0]` to get the amount of horizontal scroll and`scroll_widget[1]` to get the amount of vertical scrolleg.```pythonscroll_obj = hapi.scroll(params)while hapi.running:    hapi.rect(100 + scroll_obj[0], 100 + scroll_obj[1], 50, 50)    scroll_obj.update()```## .textbox`.textbox(x, y, w, h=0, [optional parameters])`-   `x` - x coordinate-   `y` - y coordinate-   `w` - width-   `h` - height of each line-   optional parameters - a dictionary of optional options#### optional parameters```python   &quot;max_lines&quot;: 1    &quot;text&quot;: &quot;&quot; # this can be a list containg a string of each line or a single string containing '\n's    &quot;padding_x&quot;: 2    &quot;padding_y&quot;: 2    &quot;cursor&quot;: True    &quot;on_return&quot;: None    &quot;calculate_size&quot;: False    &quot;typing&quot;: True```#### Methods-   `update()` - this updates the textbox and draws it on screen, this should be called every frame-   `get_lines(lines=1, return_as_string=False)` - this returns the text in the textbox, lines can be the line number (starting from 1) or a range of lines eg. `(1,4)` gets lines 1 to 4, when return_as_string is False, it will return each line in a list-   `key_down(event)` - when a KEYDOWN event happens, giving it to this method updates the textbox```pythondef handle_events(event):    if event.type == pygame.KEYDOWN:        my_textbox.keydown(event)```## Base Widgetthese are all optianl parameters and methods that all widgests have#### optional parameters```python    &quot;background_color&quot;: (255, 255, 255)    &quot;surface&quot;: None    &quot;on_click&quot;: None    &quot;on_hover&quot;: None    &quot;on_hold&quot;: None    &quot;on_release&quot;: None    &quot;on_enter&quot;: None    &quot;on_exit&quot;: None    &quot;image&quot;: None    &quot;curve&quot;: 0    &quot;font_colour&quot;: (0, 0, 0)    &quot;font&quot;: &quot;Calibri&quot;    &quot;font_size&quot;: 30    &quot;center&quot;: False```#### methods- `get_rect()` -&gt; pygame.Rect## Charts### .barchart```pythonparams = {        &quot;ticks_y&quot;: 10,        &quot;tick_size&quot;: 5,        &quot;range_y&quot;: [0, 100],        &quot;data&quot;: {&quot;a&quot;: 10, &quot;b&quot;: 20},        &quot;bin_color&quot;: (255, 99, 97),        &quot;line_color&quot;: (200, 200, 200),        &quot;text_color&quot;: (100, 100, 100),        &quot;mouse_line&quot;: False,    }hapi.barchart(x, y, w, h, params)```### .linechart```pythonparams = {        &quot;ticks_y&quot;: 10,        &quot;ticks_x&quot;: 10,        &quot;tick_size&quot;: 5,        &quot;range_y&quot;: [0, 100],        &quot;range_x&quot;: [0, 100],        &quot;lines&quot;:[{                &quot;label&quot;: &quot;---&quot;,                &quot;color&quot;: (255, 0, 0),                &quot;data&quot;: [[1,1]],                &quot;values_window&quot;: 200            }],        &quot;labels&quot;: [&quot;apple&quot;, &quot;&quot;, &quot;&quot;, &quot;tree&quot;],        &quot;line_color&quot;: (200, 200, 200),        &quot;text_color&quot;: (100, 100, 100),        &quot;mouse_line&quot;: False,        &quot;mouse_line_color&quot;: (255, 0, 0),        &quot;graph_color&quot;: (0, 0, 0),        &quot;show_axes&quot;: True,        &quot;show_ticks_x&quot;: True,        &quot;show_ticks_y&quot;: True,        &quot;x_axis_label&quot;: &quot;x_axis_label&quot;,        &quot;y_axis_label&quot;: &quot;y_axis_label&quot;,        &quot;plot_background&quot;: True,        &quot;plot_grid&quot;: True,        &quot;plot_background_color&quot;: (234,234,242),        &quot;plot_grid_color&quot;: 255    }hapi.linechart(x, y, w, h, params)```### .scatterchart```pythonparams = {        &quot;ticks_y&quot;: 10,        &quot;ticks_x&quot;: 10,        &quot;tick_size&quot;: 5,        &quot;range_y&quot;: [0, 100],        &quot;range_x&quot;: [0, 100],        &quot;data&quot;: {            &quot;carat&quot;: [0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23],             &quot;cut&quot;: [&quot;Ideal&quot;, &quot;Premium&quot;, &quot;Good&quot;, &quot;Premium&quot;, &quot;Good&quot;, &quot;Very Good&quot;, &quot;Very Good&quot;, &quot;Very Good&quot;, &quot;Fair&quot;],            &quot;color&quot;: [&quot;E&quot;, &quot;E&quot;, &quot;E&quot;, &quot;I&quot;, &quot;J&quot;, &quot;J&quot;, &quot;I&quot;, &quot;H&quot;, &quot;E&quot;, &quot;H&quot;],            &quot;clarity&quot;: [&quot;SI2&quot;, &quot;SI1&quot;, &quot;VS1&quot;, &quot;VS2&quot;, &quot;SI2&quot;, &quot;VVS2&quot;, &quot;VVS1&quot;, &quot;SI1&quot;, &quot;VS2&quot;, &quot;VS1&quot;],            &quot;depth&quot;: [61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4],            &quot;table&quot;: [55, 61, 65, 58, 58, 57, 57, 55, 61, 61],            &quot;price&quot;: [326, 326, 327, 334, 335, 336, 336, 337, 337, 338],            &quot;x&quot;: [3.95, 3.89, 4.05, 4.2, 4.34, 3.94, 3.95, 4.07, 3.87, 4],            &quot;y&quot;: [3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05],            &quot;z&quot;: [2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39]        },        &quot;hue&quot;: None,        &quot;hue_order&quot;: [],        &quot;size&quot;: None,        &quot;text_color&quot;: (100, 100, 100),        &quot;mouse_line&quot;: False,        &quot;mouse_line_color&quot;: (255, 0, 0),        &quot;graph_color&quot;: (0, 0, 0),        &quot;show_axes&quot;: True,        &quot;show_ticks_x&quot;: True,        &quot;show_ticks_y&quot;: True,        &quot;x&quot;: &quot;price&quot;,        &quot;y&quot;: &quot;carat&quot;,        &quot;plot_background&quot;: True,        &quot;plot_grid&quot;: True,        &quot;plot_background_color&quot;: (234,234,242),        &quot;plot_grid_color&quot;: 255,        &quot;line_color&quot;: 200,        &quot;strong_color&quot;: (107, 107, 255),        &quot;light_color&quot;: (235, 235, 255),        &quot;type&quot;: &quot;normal&quot;,        &quot;kind&quot;: &quot;rect&quot;,        &quot;hist_color&quot;: &quot;b&quot;,        &quot;hist_color_invert&quot;: False    }```</longdescription>
</pkgmetadata>