<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># css_inline[![Build](https://github.com/Stranger6667/css-inline/workflows/ci/badge.svg)](https://github.com/Stranger6667/css-inline/actions)[![PyPI](https://img.shields.io/pypi/v/css_inline.svg)](https://pypi.org/project/css_inline/)[![Python versions](https://img.shields.io/pypi/pyversions/css_inline.svg)](https://pypi.org/project/css_inline/)[![License](https://img.shields.io/pypi/l/css_inline.svg)](https://opensource.org/licenses/MIT)Blazing-fast CSS inlining for Python implemented with Mozilla's Servo project components.Features:- Removing `style` tags after inlining;- Resolving external stylesheets (including local files);- Control if `style` tags should be processed;- Out-of-document CSS to inline;- Inlining multiple documents in parallel (via Rust-level threads)The project supports CSS Syntax Level 3.## InstallationTo install `css_inline` via `pip` run the following command:```pip install css_inline```Pre-compiled wheels for most popular platforms are provided. If your platform is not in the support table below, you will needa Rust compiler to build this package from source. The minimum supported Rust version is 1.60.## UsageTo inline CSS in an HTML document:```pythonimport css_inlineHTML = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;    &lt;style&gt;h1 { color:blue; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Big Text&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;inlined = css_inline.inline(HTML)# HTML becomes this:## &lt;html&gt;# &lt;head&gt;#    &lt;title&gt;Test&lt;/title&gt;#    &lt;style&gt;h1 { color:blue; }&lt;/style&gt;# &lt;/head&gt;# &lt;body&gt;#     &lt;h1 style=&quot;color:blue;&quot;&gt;Big Text&lt;/h1&gt;# &lt;/body&gt;# &lt;/html&gt;```If you want to inline many HTML documents, you can utilize `inline_many` that processes the input in parallel.```pythonimport css_inlinecss_inline.inline_many([&quot;&lt;...&gt;&quot;, &quot;&lt;...&gt;&quot;])````inline_many` will spawn threads on the Rust level; thus, you can expect it's running faster than `css_inline.inline` via Python's `multiprocessing` or `threading` modules.For customization options use the `CSSInliner` class:```pythonimport css_inlineinliner = css_inline.CSSInliner(remove_style_tags=True)inliner.inline(&quot;...&quot;)```If you'd like to skip CSS inlining for an HTML tag, add `data-css-inline=&quot;ignore&quot;` attribute to it:```html&lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;    &lt;style&gt;h1 { color:blue; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- The tag below won't receive additional styles --&gt;    &lt;h1 data-css-inline=&quot;ignore&quot;&gt;Big Text&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;```This attribute also allows you to skip `link` and `style` tags:```html&lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;    &lt;!-- Styles below are ignored --&gt;    &lt;style data-css-inline=&quot;ignore&quot;&gt;h1 { color:blue; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Big Text&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;```If you'd like to load stylesheets from your filesystem, use the `file://` scheme:```pythonimport css_inline# styles/email is relative to the current directoryinliner = css_inline.CSSInliner(base_url=&quot;file://styles/email/&quot;)inliner.inline(&quot;...&quot;)```## Standards support &amp; restrictions`css-inline` is built on top of [cssparser](https://crates.io/crates/cssparser) and relies on its behavior for CSS parsing.Notably:- Only HTML 5, XHTML is not supported;- Only CSS 3;- Only UTF-8 for string representation. Other document encodings are not yet supported.If you'd like to work around some XHTML compatibility issues like closing empty tags (`&lt;hr&gt;` vs. `&lt;hr/&gt;`), you can use the following snippet that involves `lxml`:```pythonimport css_inlinefrom lxml import html, etreedocument = &quot;...&quot;  # Your HTML documentinlined = css_inline.inline(document)tree = html.fromstring(inlined)inlined = etree.tostring(tree).decode(encoding=&quot;utf-8&quot;)```## PerformanceDue to the usage of efficient tooling from Mozilla's Servo project (`html5ever`, `rust-cssparser` and others) thislibrary has excellent performance characteristics. In comparison with other Python projects, it is usually &gt;10x faster than the nearest alternative.For inlining CSS in the html document from the `Usage` section above there is the following breakdown in the benchmarks:- `css_inline 0.9.0` - 13.58 us- `premailer 3.10.0` - 310.06 us (**x22.83**)- `toronado 0.1.0` - 1.43 ms (**x105.32**)- `inlinestyler 0.2.5` - 2.11 ms (**x155.46**)- `pynliner 0.8.0` - 2.51 ms (**x184.97**)Realistic email 1:- `css_inline 0.9.0` - 266.53 us- `premailer 3.10.0` - 2.78 ms (**x10.47**)- `toronado 0.1.0` - 31.20 ms (**x117.09**)- `inlinestyler 0.2.5` - 52.64 ms (**x197.52**)- `pynliner 0.8.0` - 101.14 ms (**x379.47**)Realistic email 2:- `css_inline 0.9.0` - 237.23 us- `premailer 3.10.0` - 4.07 ms (**x17.24**)- `toronado 0.1.0` - `Error: Pseudo-elements are not supported`- `inlinestyler 0.2.5` - 33.87 ms (**x142.81**)- `pynliner 0.8.0` - `Error: No match was found`You can take a look at the benchmarks' code at `benches/bench.py` file.The results above were measured with stable `rustc 1.69.0`, `Python 3.11.0`, `Linux x86_64` on i8700K, and 32GB RAM.## Comparison with other librariesBesides performance, `css-inline` differs from other Python libraries for CSS inlining.- Generally supports more CSS features than other libraries (for example, `toronado` and `pynliner` do not support pseudo-elements);- It has fewer configuration options and not as flexible as `premailer`;- Works on fewer platforms than LXML-based libraries (`premailer`, `inlinestyler`, `toronado`, and optionally `pynliner`);- Does not have debug logs yet;- Supports only HTML 5.## Python support`css_inline` supports CPython 3.7, 3.8, 3.9, 3.10, 3.11 and PyPy 3.7, 3.8, 3.9. ## Extra materialsIf you want to know how this library was created &amp; how it works internally, you could take a look at these articles:- [Rust crate](https://dygalo.dev/blog/rust-for-a-pythonista-2/)- [Python bindings](https://dygalo.dev/blog/rust-for-a-pythonista-3/)## LicenseThe code in this project is licensed under [MIT license](https://opensource.org/licenses/MIT).By contributing to `css_inline`, you agree that your contributionswill be licensed under its MIT license.</longdescription>
</pkgmetadata>