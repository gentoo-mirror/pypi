<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Version Parser## JavaScript Version[https://www.npmjs.com/package/version-parser](https://www.npmjs.com/package/version-parser)[![npm version](https://badge.fury.io/js/version-parser.svg)](https://badge.fury.io/js/version-parser)## Python Version[![Build Status](https://travis-ci.org/eieste/VersionParser.svg?branch=master)](https://travis-ci.org/eieste/VersionParser)[![PyPI version](https://badge.fury.io/py/version-parser.svg)](https://badge.fury.io/py/version-parser)The version parser is able to parse versions and figure out which of them are build inone of the following three formats: Major-Version, Minor-Version and Build-Version.Possible input types are:| Version  | Typ               ||----------|-------------------|| v1.2.3   | Version           || V1.2.3   | Version           || v_1_2_3  | FILENAME          || v1_2_3   | FILENAME          || V_1_2_3  | FILENAME          || V1_2_3   | FILENAME          || 1_2_3    | FILENAME          || VM1m2b3  | CLASSNAME_BUILD   || VM1m2p3  | CLASSNAME_PATCH   || vM1m2b3  | CLASSNAME_BUILD   || vM1m2p3  | CLASSNAME_PATCH   || 1.2.3    | STRIPPED_VERSION  || 2312     | NUMBER            |## Install```pythonpip install version-parser```## UsageCreate object with the version as a String as initial parameter.```pythonfrom version_parser import Versionv1 = Version(&quot;v2.3.4&quot;)```To compare two version objects/numbers, simply put the versions as Strings into seperate objects and compare them using the logical operators.```pythonfrom version_parser.version import Versionv1 = Version(&quot;v2.3.4&quot;)v2 = Version(&quot;v2.3.2&quot;)print(v1 &lt; v2)&gt;&gt; Falseprint(v1 &gt; v2)&gt;&gt; Trueprint(v1 == v2)&gt;&gt; False```The last digets behind the last dot should be the Patch or Build Version Number.Differences in this area should be compatible to each other.```pythonfrom version_parser.version import Versionv1 = Version(&quot;v2.3.4&quot;)v2 = Version(&quot;v2.3.5&quot;)print(v1 == v2)&gt;&gt; Falseprint(v1.compatible_version_with(v2))&gt;&gt; True```You can also get only the Major, Minor or Build Version by using:````pythonfrom version_parser import Versionv = Version(&quot;v2.3.4&quot;)v.get_major_version()2v.get_minor_version()3v.get_build_version()4````It's possible to convert the version format, too:````pythonfrom version_parser import Version, VersionTypev = Version(&quot;v2.3.4&quot;)       # VersionType = Versionprint(v.get_type())&gt;&gt; VersionType.Versionprint(v.get_typed_version(VersionType.FILENAME))&gt;&gt; v_2_3_4````Any version can be represented by an Integer.&gt; The sections of major, minor, build/patched version should have a maximum of three digets.````pythonfrom version_parser import Versionv = Version(&quot;v2.3.4&quot;)print(v.get_number())&gt;&gt; 2003004````## VersionTypes### VersionType.FILENAME```python&quot;v_&lt;MAJOR&gt;_&lt;MINOR&gt;_&lt;BUILD/PATCH&gt;&quot;```### VersionType.CLASSNAME```python&quot;VM&lt;MAJOR&gt;m&lt;MINOR&gt;b&lt;BUILD/PATCH&gt;&quot;```### VersionType.VERSION```python&quot;v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;BUILD/PATCH&gt;&quot;```### VersionType.STRIPPED_VERSION```python&quot;&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;BUILD/PATCH&gt;&quot;```### VersionType.NUMBER&gt; each section is filled zeros up to three digets```python&quot;&lt;MAJOR&gt;&lt;MINOR&gt;&lt;BUILD/PATCH&gt;&quot;```### VersionType.CLASSNAME_BUILD&gt; same like CLASSNAME_BUILD ### VersionType.CLASSNAME_PATCH```python&quot;VM&lt;MAJOR&gt;m&lt;MINOR&gt;p&lt;BUILD/PATCH&gt;&quot;                  ^                PATCH ```</longdescription>
</pkgmetadata>