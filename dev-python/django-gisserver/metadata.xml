<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Documentation](https://readthedocs.org/projects/django-gisserver/badge/?version=latest)](https://django-gisserver.readthedocs.io/en/latest/?badge=latest)[![Actions](https://github.com/django-fluent/django-fluent-contents/actions/workflows/tests.yaml/badge.svg?branch=master)](https://github.com/Amsterdam/django-gisserver/actions/workflows/tests.yaml)[![PyPI](https://img.shields.io/pypi/v/django-gisserver.svg)](https://pypi.python.org/pypi/django-gisserver)[![MPL License](https://img.shields.io/badge/license-MPL%202.0-blue.svg)](https://pypi.python.org/pypi/django-gisserver)[![Coverage](https://img.shields.io/codecov/c/github/amsterdam/django-gisserver/master.svg)](https://codecov.io/github/amsterdam/django-gisserver?branch=master)# django-gisserverDjango speaking WFS 2.0 to expose geo data.## Features* WFS 2.0 Basic implementation.* GML 3.2 output.* Standard and spatial filtering (FES 2.0)* GeoJSON and CSV export formats.* Extensible view/operations.* Uses GeoDjango queries for filtering.* Streaming responses for large datasets.## DocumentationFor more details, see: &lt;https://django-gisserver.readthedocs.io/&gt;## QuickstartInstall the module in your project:```bashpip install django-gisserver```Add it to the ``INSTALLED_APPS``:```pythonINSTALLED_APPS = [    ...    &quot;gisserver&quot;,]```Create a model that exposes a GeoDjango field:```pythonfrom django.contrib.gis.db.models import PointFieldfrom django.db import modelsclass Restaurant(models.Model):    name = models.CharField(max_length=200)    location = PointField(null=True)    def __str__(self):        return self.name```Write a view that exposes this model as a WFS feature:```pythonfrom gisserver.features import FeatureType, ServiceDescriptionfrom gisserver.geometries import CRS, WGS84from gisserver.views import WFSViewfrom .models import RestaurantRD_NEW = CRS.from_srid(28992)class PlacesWFSView(WFSView):    &quot;&quot;&quot;An simple view that uses the WFSView against our test model.&quot;&quot;&quot;    xml_namespace = &quot;http://example.org/gisserver&quot;    # The service metadata    service_description = ServiceDescription(        title=&quot;Places&quot;,        abstract=&quot;Unittesting&quot;,        keywords=[&quot;django-gisserver&quot;],        provider_name=&quot;Django&quot;,        provider_site=&quot;https://www.example.com/&quot;,        contact_person=&quot;django-gisserver&quot;,    )    # Each Django model is listed here as a feature.    feature_types = [        FeatureType(            Restaurant.objects.all(),            fields=&quot;__all__&quot;,            other_crs=[RD_NEW]        ),    ]```Use that view in the URLConf:```pythonfrom django.urls import pathfrom . import viewsurlpatterns = [    path(&quot;/wfs/places/&quot;, views.PlacesWFSView.as_view()),]```You can now use http://localhost:8000/wfs/places/ in your GIS application.It will perform requests such as:* &lt;http://localhost:8000/wfs/places/?SERVICE=WFS&amp;REQUEST=GetCapabilities&amp;ACCEPTVERSIONS=2.0.0,1.1.0,1.0.0&gt;* &lt;http://localhost:8000/wfs/places/?SERVICE=WFS&amp;REQUEST=DescribeFeatureType&amp;VERSION=2.0.0&amp;TYPENAMES=restaurant&gt;* &lt;http://localhost:8000/wfs/places/?SERVICE=WFS&amp;REQUEST=GetFeature&amp;VERSION=2.0.0&amp;TYPENAMES=restaurant&amp;STARTINDEX=0&amp;COUNT=1000&amp;SRSNAME=urn:ogc:def:crs:EPSG::28992&gt;By adding `&amp;OUTPUTFORMAT=geojson` or `&amp;OUTPUTFORMAT=csv` to the `GetFeature` request, the GeoJSON and CSV outputs are returned.The CSV output has an unlimited page size, as it's quite performant.## Why this code is sharedThe &quot;datapunt&quot; team of the Municipality of Amsterdam develops software for the municipality.Much of this software is then published as Open Source so that other municipalities,organizations and citizens can use the software as a basis and inspiration to developsimilar software themselves. The Municipality of Amsterdam considers it important thatsoftware developed with public money is also publicly available.This package is initially developed by the City of Amsterdam, but the toolsand concepts created in this project can be used in any city.</longdescription>
</pkgmetadata>