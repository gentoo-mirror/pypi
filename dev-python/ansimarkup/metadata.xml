<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Ansimarkup==========.. class:: no-web no-pdf|pypi| |build| |license|Ansimarkup is an XML-like markup for producing colored terminal text... code-block:: python  from ansimarkup import ansiprint as print  print(&quot;&lt;b&gt;bold text&lt;/b&gt;&quot;))  print(&quot;&lt;red&gt;red text&lt;/red&gt;&quot;, &quot;&lt;red,green&gt;red text on a green background&lt;/red,green&gt;&quot;)  print(&quot;&lt;fg #ffaf00&gt;orange text&lt;/fg #ffaf00&gt;&quot;)Installation------------The latest stable version of ansimarkup can be installed from pypi:.. code-block:: bash  $ pip install ansimarkupUsage-----Basic~~~~~.. code-block:: python  from ansimarkup import parse, ansiprint  # parse() converts the tags to the corresponding ansi escape sequence.  parse(&quot;&lt;b&gt;bold&lt;/b&gt; &lt;d&gt;dim&lt;/d&gt;&quot;)  # ansiprint() works exactly like print(), but first runs parse() on all arguments.  ansiprint(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;, &quot;&lt;d&gt;dim&lt;/d&gt;&quot;)  ansiprint(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;, &quot;&lt;d&gt;dim&lt;/d&gt;&quot;, sep=&quot;:&quot;, file=sys.stderr)Colors and styles~~~~~~~~~~~~~~~~~.. code-block:: python  # Colors may be specified in one of several ways.  parse(&quot;&lt;red&gt;red foreground&lt;/red&gt;&quot;)  parse(&quot;&lt;RED&gt;red background&lt;/RED&gt;&quot;)  parse(&quot;&lt;fg red&gt;red foreground&lt;/fg red&gt;&quot;)  parse(&quot;&lt;bg red&gt;red background&lt;/bg red&gt;&quot;)  # Xterm, hex and rgb colors are accepted by the &lt;fg&gt; and &lt;bg&gt; tags.  parse(&quot;&lt;fg 86&gt;aquamarine foreground&lt;/fg 86&gt;&quot;)  parse(&quot;&lt;bg #00005f&gt;dark blue background&lt;/bg #00005f&gt;&quot;)  parse(&quot;&lt;fg 0,95,0&gt;dark green foreground&lt;/fg 0,95,0&gt;&quot;)  # Tags may be nested.  parse(&quot;&lt;r&gt;&lt;Y&gt;red text on a yellow foreground&lt;/Y&gt;&lt;/r&gt;&quot;)  # The above may be more concisely written as:  parse(&quot;&lt;r,y&gt;red text on a yellow background&lt;/r,y&gt;&quot;)  # This shorthand also supports style tags.  parse(&quot;&lt;b,r,y&gt;bold red text on a yellow background&lt;/b,r,y&gt;&quot;)  parse(&quot;&lt;b,r,&gt;bold red text&lt;/b,r,&gt;&quot;)  parse(&quot;&lt;b,,y&gt;bold regular text on a yellow background&lt;/b,,y&gt;&quot;)  # Unrecognized tags are left as-is.  parse(&quot;&lt;b&gt;&lt;element1&gt;&lt;/element1&gt;&lt;/b&gt;&quot;)For a list of markup tags, please refer to `tags.py`_.User-defined tags~~~~~~~~~~~~~~~~~Custom tags or overrides for existing tags may be defined by creating a new``AnsiMarkup`` instance:.. code-block:: python  from ansimarkup import AnsiMarkup, parse  user_tags = {      # Add a new tag (e.g. we want &lt;info&gt; to expand to &quot;&lt;bold&gt;&lt;green&gt;&quot;).      &quot;info&quot;: parse(&quot;&lt;b&gt;&lt;g&gt;&quot;)      # The ansi escape sequence can be used directly.      &quot;info&quot;: &quot;e\x1b[32m\x1b[1m&quot;,      # Tag names may also be callables.      &quot;err&quot;:  lambda: parse(&quot;&lt;r&gt;&quot;)      # Colors may also be given convenient tag names.      &quot;orange&quot;: parse(&quot;&lt;fg #d78700&gt;&quot;),      # User-defined tags always take precedence over existing tags.      &quot;bold&quot;: parse(&quot;&lt;dim&gt;&quot;)  }  am = AnsiMarkup(tags=user_tags)  am.parse(&quot;&lt;info&gt;bold green&lt;/info&gt;&quot;)  am.ansiprint(&quot;&lt;err&gt;red&lt;/err&gt;&quot;)  # Calling the instance is equivalent to calling its parse method.  am(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;) == am.parse(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;)Alignment and length~~~~~~~~~~~~~~~~~~~~Aligning formatted strings can be challenging because the length of the renderedstring is different that the number of printable characters. Consider this example:.. code-block:: python  &gt;&gt;&gt; a = '| {:30} |'.format('abc')  &gt;&gt;&gt; b = '| {:30} |'.format(parse('&lt;b&gt;abc&lt;/b&gt;'))  &gt;&gt;&gt; print(a, b, sep='\n')  | abc                    |  | abc                            |This can be addressed by using the ``ansistring`` function or the``AnsiMarkup.string(markup)`` method, which has the following useful properties:.. code-block:: python  &gt;&gt;&gt; s = ansistring('&lt;b&gt;abc&lt;/b&gt;')  &gt;&gt;&gt; print(repr(s), '-&gt;', s)  &lt;b&gt;abc&lt;/b&gt; -&gt; abc  # abc is printed in bold  &gt;&gt;&gt; len(s), len(am.parse('&lt;b&gt;abc&lt;/b&gt;'), s.delta  3, 11, 8With the help of the ``delta`` property, it is easy to align the strings in theabove example:.. code-block:: python  &gt;&gt;&gt; s = ansistring('&lt;b&gt;abc&lt;/b&gt;')  &gt;&gt;&gt; a = '| {:{width}} |'.format('abc', width=30)  &gt;&gt;&gt; b = '| {:{width}} |'.format(s, width=(30 + s.delta))  &gt;&gt;&gt; print(a, b, sep='\n')  | abc                            |  | abc                            |Other features~~~~~~~~~~~~~~The default tag separators can be changed by passing the ``tag_sep`` argument to``AnsiMarkup``:.. code-block:: python  from ansimarkup import AnsiMarkup  am = AnsiMarkup(tag_sep=&quot;{}&quot;)  am.parse(&quot;{b}{r}bold red{/b}{/r}&quot;)Markup tags can be removed using the ``strip()`` method:.. code-block:: python  from ansimarkup import AnsiMarkup  am = AnsiMarkup()  am.strip(&quot;&lt;b&gt;&lt;r&gt;bold red&lt;/b&gt;&lt;/r&gt;&quot;)The ``strict`` option instructs the parser to raise ``MismatchedTag`` if openingtags don't have corresponding closing tags:.. code-block:: python  from ansimarkup import AnsiMarkup  am = AnsiMarkup(strict=True)  am.parse(&quot;&lt;r&gt;&lt;b&gt;bold red&quot;)  # ansimarkup.MismatchedTag: opening tag &quot;&lt;r&gt;&quot; has no corresponding closing tagCommand-line~~~~~~~~~~~~Ansimarkup may also be used on the command-line. This works as if allarguments were passed to ``ansiprint()``::  $ python -m ansimarkup                                                                                                                                      [27/01/21  4:29PM 0 0s]  Usage: python -m ansimarkup [&lt;arg&gt; [&lt;arg&gt; ...]]  Example usage:    python -m ansimarkup '&lt;b&gt;Bold&lt;/b&gt;' '&lt;r&gt;Red&lt;/r&gt;'    python -m ansimarkup '&lt;b&gt;&lt;r&gt;Bold Red&lt;/r&gt;&lt;/b&gt;'    python -m ansimarkup &lt; input-with-markup.txt    echo '&lt;b&gt;Bold&lt;/b&gt;' | python -m ansimarkupLogging formatter~~~~~~~~~~~~~~~~~Ansimarkup also comes with a formatter for the standard library `logging`module. It can be used as:.. code-block:: python  import logging  from ansimarkup.logformatter import AnsiMarkupFormatter  log = logging.getLogger()  hdl = logging.StreamHandler()  fmt = AnsiMarkupFormatter()  hdl.setFormatter(fmt)  log.addHandler(hdl)  log.info(&quot;&lt;b&gt;bold text&lt;/b&gt;&quot;)Windows~~~~~~~Ansimarkup uses the colorama_ library internally, which means that Windowssupport for ansi escape sequences is available by first running:.. code-block:: python  import colorama  colorama.init()For more information on Windows support, consult the &quot;Usage&quot; section of thecolorama_ documentation.Performance-----------While the focus of ansimarkup is convenience, it does try to keep processing toa minimum. The `benchmark.py`_ script attempts to benchmark different ansiescape code libraries::  Benchmark 1: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;&lt;/r&gt;    colorama     0.2998 μs    termcolor    3.2339 μs    colr         3.6483 μs    ansimarkup   6.8679 μs    pastel       28.8538 μs    plumbum      53.5004 μs  Benchmark 2: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;red&lt;/r&gt;&lt;b&gt;bold&lt;/b&gt;    colorama     0.8269 μs    termcolor    8.9296 μs    ansimarkup   9.3099 μs    colr         9.6244 μs    pastel       62.2018 μs    plumbum      120.8048 μsLimitations-----------Ansimarkup is a simple wrapper around colorama. It does very little in the wayof validating that markup strings are well-formed. This is a conscious decisionwith the goal of keeping things simple and fast.Unbalanced nesting, such as in the following example, will produce incorrectoutput::  &lt;r&gt;&lt;Y&gt;1&lt;/r&gt;2&lt;/Y&gt;Todo----- Many corner cases remain to be fixed.- More elaborate testing. The current test suite mostly covers the  &quot;happy paths&quot;.- Replace ``tag_list.index`` in ``sub_end`` with something more  efficient (i.e. something like an ordered MultiDict).Similar libraries------------------ pastel_: bring colors to your terminal- `plumbum.colors`_: small yet feature-rich library for shell script-like programs in Python- colr_: easy terminal colors, with chainable methodsLicense-------Ansimarkup is released under the terms of the `Revised BSD License`_... |pypi| image:: https://img.shields.io/pypi/v/ansimarkup.svg?style=flat-square&amp;label=latest%20stable%20version    :target: https://pypi.python.org/pypi/ansimarkup    :alt: Latest version released on PyPi.. |license| image:: https://img.shields.io/pypi/l/ansimarkup.svg?style=flat-square&amp;label=license    :target: https://pypi.python.org/pypi/ansimarkup    :alt: BSD 3-Clause.. |build| image:: https://img.shields.io/travis/gvalkov/python-ansimarkup/master.svg?style=flat-square&amp;label=build    :target: http://travis-ci.org/gvalkov/python-ansimarkup    :alt: Build status.. _tags.py:        https://github.com/gvalkov/python-ansimarkup/blob/master/ansimarkup/tags.py.. _benchmark.py:   https://github.com/gvalkov/python-ansimarkup/blob/master/tests/benchmark.py.. _colorama:       https://pypi.python.org/pypi/colorama.. _pastel:         https://github.com/sdispater/pastel.. _plumbum.colors: https://plumbum.readthedocs.io/en/latest/cli.html#colors.. _colr:           https://pypi.python.org/pypi/Colr/.. _`Revised BSD License`: https://raw.github.com/gvalkov/python-ansimarkup/master/LICENSE</longdescription>
</pkgmetadata>