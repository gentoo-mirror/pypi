<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dtest[![CircleCI](https://circleci.com/gh/sjensen85/dtest/tree/master.svg?style=svg)](https://circleci.com/gh/sjensen85/dtest/tree/master)[![Requirements Status](https://requires.io/github/sjensen85/dtest/requirements.svg?branch=master)](https://requires.io/github/sjensen85/dtest/requirements/?branch=master)A library to facilitate the testing of data inside data pipelines. Results are pushed to a messaging queue of some sort for consumption by applications, persistence, etc.Supported messaging queues / streaming platforms- [x] RabbitMQ- [ ] MQTT- [ ] Redis- [ ] Kafka- [ ] KinesisSupported secrets managers- [x] AWS Secrets Manager- [ ] Hashicorp Vault## Installation`pip3 install dtest-framework`## Unit TestsTesting is set up using PytestInstall Pytest with `pip3 install -U pytest`Run the tests with `pytest` in the root directory.## Quick Start```from dtest.dtest import Dtestfrom hamcrest import *# If publishing to a RabbitMQ queue, specify 'queue' \# If publishing to a key-value store, specify 'kv-store' \# Or specify bothconnectionConfig = {    &quot;queue&quot;: {        &quot;host&quot;: &quot;localhost&quot;,        &quot;username&quot;: &quot;guest&quot;,        &quot;password&quot;: &quot;guest&quot;,        &quot;exchange&quot;: &quot;test.dtest&quot;,        &quot;exchange_type&quot;: &quot;fanout&quot;    },    &quot;kv-store&quot;: {        &quot;api_url&quot;: &quot;localhost:8080/api/&quot;,        &quot;retrieve_path&quot;: &quot;getKeyValue/&quot;,        &quot;publish_path&quot;: &quot;postKeyValue/&quot;    }}metadata = {    &quot;description&quot;: &quot;This is a test of the assertCondition&quot;,    &quot;topic&quot;: &quot;test.dtest&quot;,    &quot;ruleSet&quot;: &quot;Testing some random data&quot;,    &quot;dataSet&quot;: &quot;random_data_set_123912731.csv&quot;}dt = Dtest(connectionConfig, metadata)dsQubert = [0,1]dt.assert_that(dsQubert, has_length(2))// Truedt.publish()// Publishes test suite to MQ server////////////////////////////////////////// Store value in KV store for later usedt.publishKeyValue('some-descriptor-dsQubert-length', len(dqQubert))// Retrieve value from KV store to compare other files againstcount = dt.retrieveKeyValue('some-descriptor-dsQubert-length')dt.assert_that(dsQubert, has_length(count))```## Connection configurationThere are two options for providing the connection configuration for the publisher - the default way described above and by storing your configuration in a secrets manager. To utilize a secrets manager, use a connectionConfig similar to:```connectionConfig = {    &quot;queue&quot;: {        &quot;vault&quot;: {                    &quot;provider&quot;: &quot;aws_secrets_manager&quot;,                    &quot;secret_name&quot;: &quot;secret_name_here&quot;,                    &quot;region&quot;: &quot;us-east-1&quot;                }    }}```Here we are giving the provider name `aws_secrets_manager`, the key to use to retrieve the secret `secret_name`, and the region in which Secrets Manager is hosted. `secret_name` and `region` are passed to `boto3` directly. `region_name` is provided when initializing the `boto3` session and `secret_name` is provided to the `boto3.secretsmanager.get_secret_value()` function as `SecretId`.## Custom handlersIt is possible to create custom message queue and key value store handlers. Implement a class that inherits from `dtest.handler.MqHandler` or `dtest.handler.KvHandler` depending on your needs.```class MqHandler:    @classmethod    def version(self): return &quot;1.0&quot;    @abstractmethod    def connect(self): raise NotImplementedError    @abstractmethod    def publishResults(self): raise NotImplementedError    @abstractmethod    def closeConnection(self): raise NotImplementedErrorclass KvHandler:    @classmethod    def version(self): return &quot;1.0&quot;    @abstractmethod    def retrieve(self): raise NotImplementedError    @abstractmethod    def publish(self): raise NotImplementedError```## Package dependenciesI did not want to require that all dependencies of every module need to be installed. As such, the following packages need to be installed via `pip` if you would like to utilize the specified functionality| Package | Dependent module/functionality || ------- | ------------------------------ || pandas  | Local testing with `pytest`    |#### CI/CD- Use the standard `ecs` labeled Jenkins agent- Performs tests on master commits and PRs- Does not deploy to PyPI automatically</longdescription>
</pkgmetadata>