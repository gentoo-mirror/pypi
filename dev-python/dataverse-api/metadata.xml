<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `dataverse-api`[![Build Status](https://github.com/MarcusRisanger/dataverse-api/workflows/release/badge.svg)](https://github.com/MarcusRisanger/dataverse-api/actions)[![codecov](https://codecov.io/gh/MarcusRisanger/Dataverse-API/branch/main/graph/badge.svg)](https://codecov.io/gh/MarcusRisanger/Dataverse-API)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)The `dataverse-api` package is an abstraction layer developed for allowing simple interaction with Microsoft Dataverse Web API.# OverviewThe main goal of this project was to allow for simple upserts and inserts of data into Dataverse tables using simple and ubiquitous data structures, with use of batch requests to avoid frequent hits on the REST API. It is based on Python 3.9 to be compatible with current Python runtimes in Azure Functions.### Getting startedUsage is fairly simple and assumes that a valid app registration for writing to Dataverse exists:```import osfrom dataverse_api import DataverseClientfrom msal import ConfidentialClientApplicationfrom msal_requests_auth.auth import ClientCredentialAuthapp_id = os.environ[&quot;app_id&quot;]authority_url = os.environ[&quot;authority_url&quot;]client_secret = os.environ[&quot;client_secret&quot;]url = os.environ[&quot;url&quot;]scopes = [url + &quot;/.default&quot;]client = ConfidentialClientApplication(    client_id=app_id,    client_credential=client_secret,    authority=authority_url,)auth = ClientCredentialAuth(    client=client,    scopes=scopes,)client = DataverseClient(resource=url, auth=auth)table = client.entity(logical_name=&quot;xyz_my_table&quot;)data = [    {&quot;xyz_my_table_key&quot;: &quot;Foo&quot;, &quot;xyz_my_table_col&quot;: 1010},    {&quot;xyz_my_table_key&quot;: &quot;Bar&quot;, &quot;xyz_my_table_col&quot;: 1020},]table.upsert(data)```### Optional validationInstantiating a new `DataverseEntity` with `logical_name` triggers additional validation to take place, based on the EntityMetadata API endpoints. Upon instantiation, calls will be made to the API to fetch the `EntitySetName` used in APIqueries, together with column names and alternate key Attribute combinations.When validation is enabled, the client both checks that columns referred to in the data are valid according to the schema, and will automatically pick a suitable row ID for batch operations. While this is nice, it is mostly thought of as a debugging tool to develop scripts, since it carries the overhead of retrieving the information from the API. It is recommended to instantiate Entities by using the `entity_set_name` argument and specifying key columns in your data when preparing scripts for production.## Development environmentWe use [poetry](https://python-poetry.org) to manage dependencies and to administrate virtual environments. To develop`dataverse-api`, follow the following steps to set up your local environment:1.  [Install poetry](https://python-poetry.org/docs/#installation) if you haven't already.2.  Clone repository:    ```    $ git clone git@github.com:MarcusRisanger/dataverse-api.git    ```3.  Move into the newly created local repository:    ```    $ cd dataverse-api    ```4.  Create virtual environment and install dependencies:    ```    $ poetry install    ```### Code requirementsAll code must pass [black](https://github.com/ambv/black) and [isort](https://github.com/timothycrosley/isort) stylechecks to be merged, among others. It is recommended to install pre-commit hooks to ensure this locally before commiting code:```$ poetry run pre-commit install```Each public method, class and module should have docstrings. Docstrings are written in the [Googlestyle](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings).### TestingTo produce Coverage tests, run the following commands```$ poetry run coverage run -m pytest$ poetry run coverage xml```</longdescription>
</pkgmetadata>