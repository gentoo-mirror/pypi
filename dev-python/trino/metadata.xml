<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Trino Python clientClient for [Trino](https://trino.io/), a distributed SQL engine for interactive and batch big data processing.Provides a low-level client and a DBAPI 2.0 implementation and a SQLAlchemy adapter.It supports Python&gt;=3.7 and PyPy.[![Build Status](https://github.com/trinodb/trino-python-client/workflows/ci/badge.svg)](https://github.com/trinodb/trino-python-client/actions?query=workflow%3Aci+event%3Apush+branch%3Amaster)[![Trino Slack](https://img.shields.io/static/v1?logo=slack&amp;logoColor=959DA5&amp;label=Slack&amp;labelColor=333a41&amp;message=join%20conversation&amp;color=3AC358)](https://trino.io/slack.html)[![Trino: The Definitive Guide book download](https://img.shields.io/badge/Trino%3A%20The%20Definitive%20Guide-download-brightgreen)](https://www.starburst.io/info/oreilly-trino-guide/)## DevelopmentSee [DEVELOPMENT](.github/DEVELOPMENT.md) for information about code style,development process, and guidelines.See [CONTRIBUTING](.github/CONTRIBUTING.md) for contribution requirements.## Usage### The Python Database API (DBAPI)**Installation**```$ pip install trino```**Quick Start**Use the DBAPI interface to query Trino:if `host` is a valid url, the port and http schema will be automatically determined. For example `https://my-trino-server:9999` will assign the `http_schema` property to `https` and port to `9999`.```pythonfrom trino.dbapi import connectconn = connect(    host=&quot;&lt;host&gt;&quot;,    port=&lt;port&gt;,    user=&quot;&lt;username&gt;&quot;,    catalog=&quot;&lt;catalog&gt;&quot;,    schema=&quot;&lt;schema&gt;&quot;,)cur = conn.cursor()cur.execute(&quot;SELECT * FROM system.runtime.nodes&quot;)rows = cur.fetchall()```This will query the `system.runtime.nodes` system tables that shows the nodesin the Trino cluster.The DBAPI implementation in `trino.dbapi` provides methods to retrieve fewerrows for example `Cursor.fetchone()` or `Cursor.fetchmany()`. By default`Cursor.fetchmany()` fetches one row. Please set`trino.dbapi.Cursor.arraysize` accordingly.### SQLAlchemy**Prerequisite**- Trino server &gt;= 351**Compatibility**`trino.sqlalchemy` is compatible with the latest 1.3.x, 1.4.x and 2.0.x SQLAlchemyversions at the time of release of a particular version of the client.**Installation**```$ pip install trino[sqlalchemy]```**Usage**To connect to Trino using SQLAlchemy, use a connection string (URL) following this pattern:```trino://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;/&lt;schema&gt;```NOTE: `password` and `schema` are optional**Examples**:```pythonfrom sqlalchemy import create_enginefrom sqlalchemy.schema import Table, MetaDatafrom sqlalchemy.sql.expression import select, textengine = create_engine('trino://user@localhost:8080/system')connection = engine.connect()rows = connection.execute(text(&quot;SELECT * FROM runtime.nodes&quot;)).fetchall()# or using SQLAlchemy schemanodes = Table(    'nodes',    MetaData(schema='runtime'),    autoload=True,    autoload_with=engine)rows = connection.execute(select(nodes)).fetchall()```In order to pass additional connection attributes use [connect_args](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.connect_args) method.Attributes can also be passed in the connection string.```pythonfrom sqlalchemy import create_enginefrom trino.sqlalchemy import URLengine = create_engine(    URL(        host=&quot;localhost&quot;,        port=8080,        catalog=&quot;system&quot;    ),    connect_args={      &quot;session_properties&quot;: {'query_max_run_time': '1d'},      &quot;client_tags&quot;: [&quot;tag1&quot;, &quot;tag2&quot;],      &quot;roles&quot;: {&quot;catalog1&quot;: &quot;role1&quot;},    })# or in connection stringengine = create_engine(    'trino://user@localhost:8080/system?'    'session_properties={&quot;query_max_run_time&quot;: &quot;1d&quot;}'    '&amp;client_tags=[&quot;tag1&quot;, &quot;tag2&quot;]'    '&amp;roles={&quot;catalog1&quot;: &quot;role1&quot;}')# or using the URL factory methodengine = create_engine(URL(  host=&quot;localhost&quot;,  port=8080,  client_tags=[&quot;tag1&quot;, &quot;tag2&quot;]))```## Authentication mechanisms### Basic authenticationThe `BasicAuthentication` class can be used to connect to a Trino cluster configured withthe [Password file, LDAP or Salesforce authentication type](https://trino.io/docs/current/security/authentication-types.html):- DBAPI    ```python    from trino.dbapi import connect    from trino.auth import BasicAuthentication    conn = connect(        user=&quot;&lt;username&gt;&quot;,        auth=BasicAuthentication(&quot;&lt;username&gt;&quot;, &quot;&lt;password&gt;&quot;),        http_scheme=&quot;https&quot;,        ...    )    ```- SQLAlchemy    ```python    from sqlalchemy import create_engine    engine = create_engine(&quot;trino://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;&quot;)    # or as connect_args    from trino.auth import BasicAuthentication    engine = create_engine(        &quot;trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;&quot;,        connect_args={            &quot;auth&quot;: BasicAuthentication(&quot;&lt;username&gt;&quot;, &quot;&lt;password&gt;&quot;),            &quot;http_scheme&quot;: &quot;https&quot;,        }    )    ```### JWT authenticationThe `JWTAuthentication` class can be used to connect to a Trino cluster configured withthe [`JWT` authentication type](https://trino.io/docs/current/security/jwt.html):- DBAPI    ```python    from trino.dbapi import connect    from trino.auth import JWTAuthentication    conn = connect(        user=&quot;&lt;username&gt;&quot;,        auth=JWTAuthentication(&quot;&lt;jwt_token&gt;&quot;),        http_scheme=&quot;https&quot;,        ...    )    ```- SQLAlchemy    ```python    from sqlalchemy import create_engine    engine = create_engine(&quot;trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;/&lt;schema&gt;?access_token=&lt;jwt_token&gt;&quot;)    # or as connect_args    from trino.auth import JWTAuthentication    engine = create_engine(        &quot;trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;&quot;,        connect_args={            &quot;auth&quot;: JWTAuthentication(&quot;&lt;jwt_token&gt;&quot;),            &quot;http_scheme&quot;: &quot;https&quot;,        }    )    ```### OAuth2 authenticationThe `OAuth2Authentication` class can be used to connect to a Trino cluster configured withthe [OAuth2 authentication type](https://trino.io/docs/current/security/oauth2.html).A callback to handle the redirect url can be provided via param `redirect_auth_url_handler` of the `trino.auth.OAuth2Authentication` class. By default, it will try to launch a web browser (`trino.auth.WebBrowserRedirectHandler`) to go through the authentication flow and output the redirect url to stdout (`trino.auth.ConsoleRedirectHandler`). Multiple redirect handlers are combined using the `trino.auth.CompositeRedirectHandler` class.The OAuth2 token will be cached either per `trino.auth.OAuth2Authentication` instance or, when keyring is installed, it will be cached within a secure backend (MacOS keychain, Windows credential locker, etc) under a key including host of the Trino connection. Keyring can be installed using `pip install 'trino[external-authentication-token-cache]'`.- DBAPI    ```python    from trino.dbapi import connect    from trino.auth import OAuth2Authentication    conn = connect(        user=&quot;&lt;username&gt;&quot;,        auth=OAuth2Authentication(),        http_scheme=&quot;https&quot;,        ...    )    ```- SQLAlchemy    ```python    from sqlalchemy import create_engine    from trino.auth import OAuth2Authentication    engine = create_engine(    &quot;trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;&quot;,        connect_args={            &quot;auth&quot;: OAuth2Authentication(),            &quot;http_scheme&quot;: &quot;https&quot;,        }    )    ```### Certificate authentication`CertificateAuthentication` class can be used to connect to Trino cluster configured with [certificate based authentication](https://trino.io/docs/current/security/certificate.html). `CertificateAuthentication` requires paths to a valid client certificate and private key.- DBAPI    ```python    from trino.dbapi import connect    from trino.auth import CertificateAuthentication    conn = connect(        user=&quot;&lt;username&gt;&quot;,        auth=CertificateAuthentication(&quot;/path/to/cert.pem&quot;, &quot;/path/to/key.pem&quot;),        http_scheme=&quot;https&quot;,        ...    )    ```- SQLAlchemy    ```python    from sqlalchemy import create_engine    from trino.auth import CertificateAuthentication    engine = create_engine(&quot;trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;/&lt;schema&gt;?cert=&lt;cert&gt;&amp;key=&lt;key&gt;&quot;)    # or as connect_args    engine = create_engine(    &quot;trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;&quot;,        connect_args={            &quot;auth&quot;: CertificateAuthentication(&quot;/path/to/cert.pem&quot;, &quot;/path/to/key.pem&quot;),            &quot;http_scheme&quot;: &quot;https&quot;,        }    )    ```### Kerberos authenticationThe `KerberosAuthentication` class can be used to connect to a Trino cluster configured withthe [`Kerberos` authentication type](https://trino.io/docs/current/security/kerberos.html):- DBAPI    ```python    from trino.dbapi import connect    from trino.auth import KerberosAuthentication    conn = connect(        user=&quot;&lt;username&gt;&quot;,        auth=KerberosAuthentication(...),        http_scheme=&quot;https&quot;,        ...    )    ```- SQLAlchemy    ```python    from sqlalchemy import create_engine    from trino.auth import KerberosAuthentication    engine = create_engine(        &quot;trino://&lt;username&gt;@&lt;host&gt;:&lt;port&gt;/&lt;catalog&gt;&quot;,        connect_args={            &quot;auth&quot;: KerberosAuthentication(...),            &quot;http_scheme&quot;: &quot;https&quot;,        }    )    ```## User impersonationIn the case where user who submits the query is not the same as user who authenticates to Trino server (e.g in Superset),you can set `username` to be different from `principal_id`. Note that `principal_id` is extracted from `auth`,for example `username` in BasicAuthentication, `sub` in JWT token or `service-name` in KerberosAuthentication.You need to make sure that [`principal_id` has permission to impersonate `username`](https://trino.io/docs/current/security/file-system-access-control.html#impersonation-rules).### Extra credentials[`Extra credentials`](https://trino.io/docs/current/develop/client-protocol.html#client-request-headers) can be sent as:```pythonimport trinoconn = trino.dbapi.connect(    host='localhost',    port=443,    user='the-user',    extra_credential=[('a.username', 'bar'), ('a.password', 'foo')],)cur = conn.cursor()cur.execute('SELECT * FROM system.runtime.nodes')rows = cur.fetchall()```## RolesAuthorization roles to use for catalogs, specified as a dict with key-value pairs for the catalog and role. For example, `{&quot;catalog1&quot;: &quot;roleA&quot;, &quot;catalog2&quot;: &quot;roleB&quot;}` sets `roleA` for `catalog1` and `roleB` for `catalog2`. See Trino docs.```pythonimport trinoconn = trino.dbapi.connect(    host='localhost',    port=443,    user='the-user',    roles={&quot;catalog1&quot;: &quot;roleA&quot;, &quot;catalog2&quot;: &quot;roleB&quot;},)```You could also pass `system` role without explicitly specifing &quot;system&quot; catalog:```pythonimport trinoconn = trino.dbapi.connect(    host='localhost',    port=443,    user='the-user',    roles=&quot;role1&quot; # equivalent to {&quot;system&quot;: &quot;role1&quot;})```## TimezoneThe time zone for the session can be explicitly set using the IANA time zonename. When not set the time zone defaults to the client side local timezone.```pythonimport trinoconn = trino.dbapi.connect(    host='localhost',    port=443,    user='username',    timezone='Europe/Brussels',)```&gt; **NOTE: The behaviour till version 0.320.0 was the same as setting session timezone to UTC.**&gt; **To preserve that behaviour pass `timezone='UTC'` when creating the connection.**## SSL### SSL verificationIn order to disable SSL verification, set the `verify` parameter to `False`.```pythonfrom trino.dbapi import connectfrom trino.auth import BasicAuthenticationconn = connect(    user=&quot;&lt;username&gt;&quot;,    auth=BasicAuthentication(&quot;&lt;username&gt;&quot;, &quot;&lt;password&gt;&quot;),    http_scheme=&quot;https&quot;,    verify=False)```### Self-signed certificatesTo use self-signed certificates, specify a path to the certificate in `verify` parameter.More details can be found in [the Python requests library documentation](https://requests.readthedocs.io/en/latest/user/advanced/#ssl-cert-verification).```pythonfrom trino.dbapi import connectfrom trino.auth import BasicAuthenticationconn = connect(    user=&quot;&lt;username&gt;&quot;,    auth=BasicAuthentication(&quot;&lt;username&gt;&quot;, &quot;&lt;password&gt;&quot;),    http_scheme=&quot;https&quot;,    verify=&quot;/path/to/cert.crt&quot;)```## TransactionsThe client runs by default in *autocommit* mode. To enable transactions, set*isolation_level* to a value different than `IsolationLevel.AUTOCOMMIT`:```pythonfrom trino.dbapi import connectfrom trino.transaction import IsolationLevelwith connect(        isolation_level=IsolationLevel.REPEATABLE_READ,        ...) as conn:    cur = conn.cursor()    cur.execute('INSERT INTO sometable VALUES (1, 2, 3)')    cur.fetchall()    cur.execute('INSERT INTO sometable VALUES (4, 5, 6)')    cur.fetchall()```The transaction is created when the first SQL statement is executed.`trino.dbapi.Connection.commit()` will be automatically called when the codeexits the *with* context and the queries succeed, otherwise`trino.dbapi.Connection.rollback()` will be called.## Legacy Primitive typesBy default, the client will convert the results of the query to thecorresponding Python types. For example, if the query returns a `DECIMAL` column, the result will be a `Decimal` object.If you want to disable this behaviour, set flag `legacy_primitive_types` to `True`.Limitations of the Python types are described in the [Python types documentation](https://docs.python.org/3/library/datatypes.html). These limitations will generate an exception `trino.exceptions.TrinoDataError` if the query returns a value that cannot be converted to the corresponding Python type.```pythonimport trinoconn = trino.dbapi.connect(    legacy_primitive_types=True,    ...)cur = conn.cursor()# Negative DATE cannot be represented with Python types# legacy_primitive_types needs to be enabledcur.execute(&quot;SELECT DATE '-2001-08-22'&quot;)rows = cur.fetchall()assert rows[0][0] == &quot;-2001-08-22&quot;assert cur.description[0][1] == &quot;date&quot;```### Trino to Python type mappings| Trino type | Python type       ||------------|-------------------|| BOOLEAN    | bool              || TINYINT    | int               || SMALLINT   | int               || INTEGER    | int               || BIGINT     | int               || REAL       | float             || DOUBLE     | float             || DECIMAL    | decimal.Decimal   || VARCHAR    | str               || CHAR       | str               || VARBINARY  | bytes             || DATE       | datetime.date     || TIME       | datetime.time     || TIMESTAMP  | datetime.datetime || ARRAY      | list              || MAP        | dict              || ROW        | tuple             |Trino types other than those listed above are not mapped to Python types. To use those use [legacy primitive types](#legacy-primitive-types).# Need help?Feel free to create an issue as it makes your request visible to other users and contributors.If an interactive discussion would be better or if you just want to hangout and chat aboutthe Trino Python client, you can join us on the *#python-client* channel on[Trino Slack](https://trino.io/slack.html).</longdescription>
</pkgmetadata>