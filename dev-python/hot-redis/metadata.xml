<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://secure.travis-ci.org/stephenmcd/hot-redis.png?branch=master   :target: http://travis-ci.org/stephenmcd/hot-redisCreated by `Stephen McDonald &lt;http://twitter.com/stephen_mcd&gt;`_Introduction============HOT Redis is a wrapper library for the `redis-py`_ client. Rather thancalling the `Redis`_ commands directly from a client library, HOT Redisprovides a wide range of data types that mimic many of the built-indata types provided by Python, such as lists, dicts, sets, and more, aswell as many of the classes found throughout the standard library, suchas those found in the Queue, threading, and collections modules.These types are then backed by Redis, allowing objects to bemanipulated atomically over the network - the atomic nature of themethods implemented on objects in HOT Redis is one of its corefeatures, and many of these are backed by `Lua`_ code executed withinRedis, which ensures atomic operations where applicable.The name HOT Redis originally stood for &quot;Higher Order Types for Redis&quot;,but since the implementation doesn't strictly fit the definition, therecursive acronym &quot;HOT Object Toolkit for Redis&quot; should appease themost luscious of bearded necks.HOT Redis was drawn from the infrastructure behind the`Kouio RSS reader`_, a popular alternative to Google Reader.Installation============The easiest way to install ``hot-redis`` is directlyfrom PyPi using `pip`_ by running the following command::    $ pip install -U hot-redisOtherwise you can download and install it directly from source::    $ python setup.py installUsage=====Each of the types provided by HOT Redis strive to implement the samemethod signatures and return values as their Python built-in andstandard library counterparts. The main difference is each type's``__init__`` method. Every HOT Redis type's ``__init__`` method willoptionally accept ``initial`` and ``key`` keyword arguments, which areused for defining an initial value to be stored in Redis for theobject, and the key that should be used, respectively. If no key isprovided, a key will be generated, which can then be accessed via the``key`` attribute::    &gt;&gt;&gt; from hot_redis import List    &gt;&gt;&gt; my_list = List()    &gt;&gt;&gt; my_list.key    '93366bdb-90b2-4226-a52a-556f678af40e'    &gt;&gt;&gt; my_list_with_key = List(key=&quot;foo&quot;)    &gt;&gt;&gt; my_list_with_key.key    'foo'Once you've determined a strategy for naming keys, you can then createHOT Redis objects and interact with them over the network, for examplehere is a ``List`` created on a computer we'll refer to as computer A::    &gt;&gt;&gt; list_on_computer_a = List(key=&quot;foo&quot;, initial=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])then on another computer we'll creatively refer to as computer B::    &gt;&gt;&gt; list_on_computer_b = List(key=&quot;foo&quot;)    &gt;&gt;&gt; list_on_computer_b[:]  # Performs: LRANGE foo 0 -1    ['a', 'b', 'c']    &gt;&gt;&gt; list_on_computer_b += ['d', 'e', 'f']  # Performs: RPUSH foo d e fand back to computer A::    &gt;&gt;&gt; list_on_computer_a[:]  # Performs: LRANGE foo 0 -1    ['a', 'b', 'c', 'd', 'e', 'f']    &gt;&gt;&gt; 'c' in list_on_computer_a  # Works like Python lists where expected    True    &gt;&gt;&gt; list_on_computer_a.reverse()    &gt;&gt;&gt; list_on_computer_a[:]    ['f', 'e', 'd', 'c', 'b', 'a']The last interaction here is an interesting one. Python's``list.reverse()`` is an in-place reversal of the list, that is, itmodifies the existing list, rather than returning a reversed copy. Ifwe were to implement this naively, we would first read the list fromRedis, reverse it locally, then store the reversed list back in Redisagain. But what if another client were to modify the list atapproximately the same time? One computer's modification to the listwould certainly overwrite the other's. In this scenario, and *many*others, HOT Redis provides its own Lua routine specifically forreversing the list in-place, within Redis atomically. I wrote in moredetail about this in a blog post, `Bitwise Lua Operations in Redis`_.Configuration=============By default, HOT Redis attempts to connect to a Redis instance runninglocally on the default port 6379. You can configure the default clientby calling the ``hot_redis.configure`` function, prior to instantiatingany HOT Redis objects. The arguments given to ``configure`` are passedonto the underlying `redis-py`_ client::    &gt;&gt;&gt; from hot_redis import configure    configure(host='myremotehost', port=6380)Alternatively, if you wish to use a different client per object, youcan explicitly create a ``HotClient`` instance, and pass it to eachobject::    &gt;&gt;&gt; from hot_redis import HotClient, Queue    &gt;&gt;&gt; client = HotClient(host=&quot;myremotehost&quot;, port=6380)    &gt;&gt;&gt; my_queue = Queue(client=client)Transactions============Basic support for thread-safe transactions are provided using theRedis ``MULTI`` and ``EXEC`` commands::    &gt;&gt;&gt; from hot_redis import List, Queue, transaction    &gt;&gt;&gt; my_list = List(key=&quot;foo&quot;)    &gt;&gt;&gt; my_queue = Queue(key=&quot;bar&quot;)    &gt;&gt;&gt; with transaction():    ...     for i in range(20):    ...         my_list.append(i)    ...         my_queue.put(i)In the above example, all of the ``append`` and ``put`` calls arebatched together into a single transaction, that is executed once the``transaction()`` context is exited.Data Types==========The following table is the complete list of types provided by HOTRedis, mapped to their Python counterparts and underlying Redis types,along with any special considerations worth noting.==================  ============================  ==========  ===============HOT Redis           Python                        Redis       Notes==================  ============================  ==========  ===============List                list                          listSet                 set                           setDict                dict                          hashString              string                        string      Mutable - string methods that normally create a new string object in Python will mutate the string stored in RedisImmutableString     string                        string      Immutable - behaves like a regular Python stringInt                 int                           intFloat               float                         floatQueue               Queue.Queue                   listLifoQueue           Queue.LifoQueue               listSetQueue            N/A                           list + set  Extension of ``Queue`` with unique membersLifoSetQueue        N/A                           list + set  Extension of ``LifoQueue`` with unique membersBoundedSemaphore    threading.BoundedSemaphore    list        Extension of ``Queue`` leveraging Redis' blocking list pop operations with timeouts, while using Queue's ``maxsize`` arg to provide BoundedSemaphore's ``value`` argSemaphore           threading.Semaphore           list        Extension of ``BoundedSemaphore`` without a queue sizeLock                threading.Lock                list        Extension of ``BoundedSemaphore`` with a queue size of 1RLock               threading.RLock               list        Extension of ``Lock`` allowing multiple ``acquire`` callsDefaultDict         collections.DefaultDict       hashMultiSet            collections.Counter           hash==================  ============================  ==========  ===============.. _`redis-py`: https://github.com/andymccurdy/redis-py.. _`Redis`: http://redis.io.. _`Lua`: http://www.lua.org/.. _`Kouio RSS reader`: https://kouio.com.. _`pip`: http://www.pip-installer.org/.. _`Bitwise Lua Operations in Redis`: http://blog.jupo.org/2013/06/12/bitwise-lua-operations-in-redis/</longdescription>
</pkgmetadata>