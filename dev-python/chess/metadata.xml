<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-chess: a chess library for Python========================================.. image:: https://github.com/niklasf/python-chess/workflows/Test/badge.svg    :target: https://github.com/niklasf/python-chess/actions    :alt: Test status.. image:: https://badge.fury.io/py/chess.svg    :target: https://pypi.python.org/pypi/chess    :alt: PyPI package.. image:: https://readthedocs.org/projects/python-chess/badge/?version=v1.9.4    :target: https://python-chess.readthedocs.io/en/v1.9.4/    :alt: Docs.. image:: https://badges.gitter.im/python-chess/community.svg    :target: https://gitter.im/python-chess/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge    :alt: Chat on GitterIntroduction------------python-chess is a chess library for Python, with move generation,move validation, and support for common formats. This is the Scholar's mate inpython-chess:.. code:: python    &gt;&gt;&gt; import chess    &gt;&gt;&gt; board = chess.Board()    &gt;&gt;&gt; board.legal_moves    &lt;LegalMoveGenerator at ... (Nh3, Nf3, Nc3, Na3, h3, g3, f3, e3, d3, c3, ...)&gt;    &gt;&gt;&gt; chess.Move.from_uci(&quot;a8a1&quot;) in board.legal_moves    False    &gt;&gt;&gt; board.push_san(&quot;e4&quot;)    Move.from_uci('e2e4')    &gt;&gt;&gt; board.push_san(&quot;e5&quot;)    Move.from_uci('e7e5')    &gt;&gt;&gt; board.push_san(&quot;Qh5&quot;)    Move.from_uci('d1h5')    &gt;&gt;&gt; board.push_san(&quot;Nc6&quot;)    Move.from_uci('b8c6')    &gt;&gt;&gt; board.push_san(&quot;Bc4&quot;)    Move.from_uci('f1c4')    &gt;&gt;&gt; board.push_san(&quot;Nf6&quot;)    Move.from_uci('g8f6')    &gt;&gt;&gt; board.push_san(&quot;Qxf7&quot;)    Move.from_uci('h5f7')    &gt;&gt;&gt; board.is_checkmate()    True    &gt;&gt;&gt; board    Board('r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4')Installing----------Requires Python 3.7+. Download and install the latest release:::    pip install chess`Documentation &lt;https://python-chess.readthedocs.io/en/v1.9.4/&gt;`__--------------------------------------------------------------------* `Core &lt;https://python-chess.readthedocs.io/en/v1.9.4/core.html&gt;`_* `PGN parsing and writing &lt;https://python-chess.readthedocs.io/en/v1.9.4/pgn.html&gt;`_* `Polyglot opening book reading &lt;https://python-chess.readthedocs.io/en/v1.9.4/polyglot.html&gt;`_* `Gaviota endgame tablebase probing &lt;https://python-chess.readthedocs.io/en/v1.9.4/gaviota.html&gt;`_* `Syzygy endgame tablebase probing &lt;https://python-chess.readthedocs.io/en/v1.9.4/syzygy.html&gt;`_* `UCI/XBoard engine communication &lt;https://python-chess.readthedocs.io/en/v1.9.4/engine.html&gt;`_* `Variants &lt;https://python-chess.readthedocs.io/en/v1.9.4/variant.html&gt;`_* `Changelog &lt;https://python-chess.readthedocs.io/en/v1.9.4/changelog.html&gt;`_Features--------* Includes mypy typings.* IPython/Jupyter Notebook integration.  `SVG rendering docs &lt;https://python-chess.readthedocs.io/en/v1.9.4/svg.html&gt;`_.  .. code:: python      &gt;&gt;&gt; board  .. image:: https://backscattering.de/web-boardimage/board.png?fen=r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR&amp;lastmove=h5f7&amp;check=e8      :alt: r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR* Chess variants: Standard, Chess960, Suicide, Giveaway, Atomic,  King of the Hill, Racing Kings, Horde, Three-check, Crazyhouse.  `Variant docs &lt;https://python-chess.readthedocs.io/en/v1.9.4/variant.html&gt;`_.* Make and unmake moves.  .. code:: python      &gt;&gt;&gt; Nf3 = chess.Move.from_uci(&quot;g1f3&quot;)      &gt;&gt;&gt; board.push(Nf3)  # Make the move      &gt;&gt;&gt; board.pop()  # Unmake the last move      Move.from_uci('g1f3')* Show a simple ASCII board.  .. code:: python      &gt;&gt;&gt; board = chess.Board(&quot;r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4&quot;)      &gt;&gt;&gt; print(board)      r . b q k b . r      p p p p . Q p p      . . n . . n . .      . . . . p . . .      . . B . P . . .      . . . . . . . .      P P P P . P P P      R N B . K . N R* Detects checkmates, stalemates and draws by insufficient material.  .. code:: python      &gt;&gt;&gt; board.is_stalemate()      False      &gt;&gt;&gt; board.is_insufficient_material()      False      &gt;&gt;&gt; board.outcome()      Outcome(termination=&lt;Termination.CHECKMATE: 1&gt;, winner=True)* Detects repetitions. Has a half-move clock.  .. code:: python      &gt;&gt;&gt; board.can_claim_threefold_repetition()      False      &gt;&gt;&gt; board.halfmove_clock      0      &gt;&gt;&gt; board.can_claim_fifty_moves()      False      &gt;&gt;&gt; board.can_claim_draw()      False  With the new rules from July 2014, a game ends as a draw (even without a  claim) once a fivefold repetition occurs or if there are 75 moves without  a pawn push or capture. Other ways of ending a game take precedence.  .. code:: python      &gt;&gt;&gt; board.is_fivefold_repetition()      False      &gt;&gt;&gt; board.is_seventyfive_moves()      False* Detects checks and attacks.  .. code:: python      &gt;&gt;&gt; board.is_check()      True      &gt;&gt;&gt; board.is_attacked_by(chess.WHITE, chess.E8)      True      &gt;&gt;&gt; attackers = board.attackers(chess.WHITE, chess.F3)      &gt;&gt;&gt; attackers      SquareSet(0x0000_0000_0000_4040)      &gt;&gt;&gt; chess.G2 in attackers      True      &gt;&gt;&gt; print(attackers)      . . . . . . . .      . . . . . . . .      . . . . . . . .      . . . . . . . .      . . . . . . . .      . . . . . . . .      . . . . . . 1 .      . . . . . . 1 .* Parses and creates SAN representation of moves.  .. code:: python      &gt;&gt;&gt; board = chess.Board()      &gt;&gt;&gt; board.san(chess.Move(chess.E2, chess.E4))      'e4'      &gt;&gt;&gt; board.parse_san('Nf3')      Move.from_uci('g1f3')      &gt;&gt;&gt; board.variation_san([chess.Move.from_uci(m) for m in [&quot;e2e4&quot;, &quot;e7e5&quot;, &quot;g1f3&quot;]])      '1. e4 e5 2. Nf3'* Parses and creates FENs, extended FENs and Shredder FENs.  .. code:: python      &gt;&gt;&gt; board.fen()      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'      &gt;&gt;&gt; board.shredder_fen()      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w HAha - 0 1'      &gt;&gt;&gt; board = chess.Board(&quot;8/8/8/2k5/4K3/8/8/8 w - - 4 45&quot;)      &gt;&gt;&gt; board.piece_at(chess.C5)      Piece.from_symbol('k')* Parses and creates EPDs.  .. code:: python      &gt;&gt;&gt; board = chess.Board()      &gt;&gt;&gt; board.epd(bm=board.parse_uci(&quot;d2d4&quot;))      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - bm d4;'      &gt;&gt;&gt; ops = board.set_epd(&quot;1k1r4/pp1b1R2/3q2pp/4p3/2B5/4Q3/PPP2B2/2K5 b - - bm Qd1+; id \&quot;BK.01\&quot;;&quot;)      &gt;&gt;&gt; ops == {'bm': [chess.Move.from_uci('d6d1')], 'id': 'BK.01'}      True* Detects `absolute pins and their directions &lt;https://python-chess.readthedocs.io/en/v1.9.4/core.html#chess.Board.pin&gt;`_.* Reads Polyglot opening books.  `Docs &lt;https://python-chess.readthedocs.io/en/v1.9.4/polyglot.html&gt;`__.  .. code:: python      &gt;&gt;&gt; import chess.polyglot      &gt;&gt;&gt; book = chess.polyglot.open_reader(&quot;data/polyglot/performance.bin&quot;)      &gt;&gt;&gt; board = chess.Board()      &gt;&gt;&gt; main_entry = book.find(board)      &gt;&gt;&gt; main_entry.move      Move.from_uci('e2e4')      &gt;&gt;&gt; main_entry.weight      1      &gt;&gt;&gt; book.close()* Reads and writes PGNs. Supports headers, comments, NAGs and a tree of  variations.  `Docs &lt;https://python-chess.readthedocs.io/en/v1.9.4/pgn.html&gt;`__.  .. code:: python      &gt;&gt;&gt; import chess.pgn      &gt;&gt;&gt; with open(&quot;data/pgn/molinari-bordais-1979.pgn&quot;) as pgn:      ...     first_game = chess.pgn.read_game(pgn)      &gt;&gt;&gt; first_game.headers[&quot;White&quot;]      'Molinari'      &gt;&gt;&gt; first_game.headers[&quot;Black&quot;]      'Bordais'      &gt;&gt;&gt; first_game.mainline()      &lt;Mainline at ... (1. e4 c5 2. c4 Nc6 3. Ne2 Nf6 4. Nbc3 Nb4 5. g3 Nd3#)&gt;      &gt;&gt;&gt; first_game.headers[&quot;Result&quot;]      '0-1'* Probe Gaviota endgame tablebases (DTM, WDL).  `Docs &lt;https://python-chess.readthedocs.io/en/v1.9.4/gaviota.html&gt;`__.* Probe Syzygy endgame tablebases (DTZ, WDL).  `Docs &lt;https://python-chess.readthedocs.io/en/v1.9.4/syzygy.html&gt;`__.  .. code:: python      &gt;&gt;&gt; import chess.syzygy      &gt;&gt;&gt; tablebase = chess.syzygy.open_tablebase(&quot;data/syzygy/regular&quot;)      &gt;&gt;&gt; # Black to move is losing in 53 half moves (distance to zero) in this      &gt;&gt;&gt; # KNBvK endgame.      &gt;&gt;&gt; board = chess.Board(&quot;8/2K5/4B3/3N4/8/8/4k3/8 b - - 0 1&quot;)      &gt;&gt;&gt; tablebase.probe_dtz(board)      -53      &gt;&gt;&gt; tablebase.close()* Communicate with UCI/XBoard engines. Based on ``asyncio``.  `Docs &lt;https://python-chess.readthedocs.io/en/v1.9.4/engine.html&gt;`__.  .. code:: python      &gt;&gt;&gt; import chess.engine      &gt;&gt;&gt; engine = chess.engine.SimpleEngine.popen_uci(&quot;stockfish&quot;)      &gt;&gt;&gt; board = chess.Board(&quot;1k1r4/pp1b1R2/3q2pp/4p3/2B5/4Q3/PPP2B2/2K5 b - - 0 1&quot;)      &gt;&gt;&gt; limit = chess.engine.Limit(time=2.0)      &gt;&gt;&gt; engine.play(board, limit)      &lt;PlayResult at ... (move=d6d1, ponder=c1d1, info={...}, draw_offered=False, resigned=False)&gt;      &gt;&gt;&gt; engine.quit()Selected projects-----------------If you like, share interesting things you are using python-chess for, for example:+------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------+| .. image:: https://github.com/niklasf/python-chess/blob/master/docs/images/syzygy.png?raw=true       | https://syzygy-tables.info/                                                                  ||     :height: 64                                                                                      |                                                                                              ||     :width: 64                                                                                       |                                                                                              ||     :target: https://syzygy-tables.info/                                                             | A website to probe Syzygy endgame tablebases                                                 |+------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------+| .. image:: https://github.com/niklasf/python-chess/blob/master/docs/images/maia.png?raw=true         | https://maiachess.com/                                                                       ||     :height: 64                                                                                      |                                                                                              ||     :width: 64                                                                                       |                                                                                              ||     :target: https://maiachess.com/                                                                  | A human-like neural network chess engine                                                     |+------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------+| .. image:: https://github.com/niklasf/python-chess/blob/master/docs/images/clente-chess.png?raw=true | `clente/chess &lt;https://github.com/clente/chess&gt;`_                                            ||     :height: 64                                                                                      |                                                                                              ||     :width: 64                                                                                       |                                                                                              ||     :target: https://github.com/clente/chess                                                         | Oppinionated wrapper to use python-chess from the R programming language                     |+------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------+| .. image:: https://github.com/niklasf/python-chess/blob/master/docs/images/crazyara.png?raw=true     | https://crazyara.org/                                                                        ||     :height: 64                                                                                      |                                                                                              ||     :width: 64                                                                                       |                                                                                              ||     :target: https://crazyara.org/                                                                   | Deep learning for Crazyhouse                                                                 |+------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------+| .. image:: https://github.com/niklasf/python-chess/blob/master/docs/images/jcchess.png?raw=true      | `http://johncheetham.com &lt;http://johncheetham.com/projects/jcchess/&gt;`_                       ||     :height: 64                                                                                      |                                                                                              ||     :width: 64                                                                                       |                                                                                              ||     :target: http://johncheetham.com/projects/jcchess/                                               | A GUI to play against UCI chess engines                                                      |+------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------+| .. image:: https://github.com/niklasf/python-chess/blob/master/docs/images/pettingzoo.png?raw=true   | `https://pettingzoo.farama.org &lt;https://pettingzoo.farama.org/environments/classic/chess/&gt;`_ ||     :width: 64                                                                                       |                                                                                              ||     :height: 64                                                                                      |                                                                                              ||     :target: https://pettingzoo.farama.org/environments/classic/chess/                               | A multi-agent reinforcement learning environment                                             |+------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------+* extensions to build engines (search and evaluation) – https://github.com/Mk-Chan/python-chess-engine-extensions* a stand-alone chess computer based on DGT board – http://www.picochess.org/* a bridge between Lichess API and chess engines – https://github.com/careless25/lichess-bot* a command-line PGN annotator – https://github.com/rpdelaney/python-chess-annotator* an HTTP microservice to render board images – https://github.com/niklasf/web-boardimage* building a toy chess engine with alpha-beta pruning, piece-square tables, and move ordering – https://healeycodes.com/building-my-own-chess-engine/* a JIT compiled chess engine – https://github.com/SamRagusa/Batch-First* teaching Cognitive Science – `https://jupyter.brynmawr.edu &lt;https://jupyter.brynmawr.edu/services/public/dblank/CS371%20Cognitive%20Science/2016-Fall/Programming%20a%20Chess%20Player.ipynb&gt;`_* an `Alexa skill to play blindfold chess &lt;https://www.amazon.com/Laynr-blindfold-chess/dp/B0859QF8YL&gt;`_ – https://github.com/laynr/blindfold-chess* a chessboard widget for PySide2 – https://github.com/H-a-y-k/hichesslib* Django Rest Framework API for multiplayer chess – https://github.com/WorkShoft/capablanca-api* a `browser based PGN viewer &lt;https://about.nmstoker.com/chess2.html&gt;`_ written in PyScript – https://github.com/nmstoker/ChessMatchViewer* an accessible chessboard that allows blind and visually impaired  players  to play chess against Stockfish – https://github.com/blindpandas/chessmartAcknowledgements----------------Thanks to the Stockfish authors and thanks to Sam Tannous for publishing hisapproach to `avoid rotated bitboards with direct lookup (PDF) &lt;http://arxiv.org/pdf/0704.3773.pdf&gt;`_alongside his GPL2+ engine `Shatranj &lt;https://github.com/stannous/shatranj&gt;`_.Some move generation ideas are taken from these sources.Thanks to Ronald de Man for his`Syzygy endgame tablebases &lt;https://github.com/syzygy1/tb&gt;`_.The probing code in python-chess is very directly ported from his C probing code.Thanks to `Kristian Glass &lt;https://github.com/doismellburning&gt;`_ fortransferring the namespace ``chess`` on PyPI.License-------python-chess is licensed under the GPL 3 (or any later version at your option).Check out LICENSE.txt for the full text.</longdescription>
</pkgmetadata>