<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Datafiles: A file-based ORM for Python dataclassesDatafiles is a bidirectional serialization library for Python [dataclasses](https://docs.python.org/3/library/dataclasses.html) to synchronize objects to the filesystem using type annotations. It supports a variety of file formats with round-trip preservation of formatting and comments, where possible. Object changes are automatically saved to disk and only include the minimum data needed to restore each object.[![Travis CI](https://img.shields.io/travis/com/jacebrowning/datafiles/main.svg?label=unix)](https://travis-ci.com/jacebrowning/datafiles)[![AppVeyor](https://img.shields.io/appveyor/ci/jacebrowning/datafiles/main.svg?label=windows)](https://ci.appveyor.com/project/jacebrowning/datafiles)[![Coveralls](https://img.shields.io/coveralls/jacebrowning/datafiles.svg)](https://coveralls.io/r/jacebrowning/datafiles)[![PyPI License](https://img.shields.io/pypi/l/datafiles.svg)](https://pypi.org/project/datafiles)[![PyPI Version](https://img.shields.io/pypi/v/datafiles.svg)](https://pypi.org/project/datafiles)[![PyPI Downloads](https://img.shields.io/pypi/dm/datafiles.svg?color=orange)](https://pypistats.org/packages/datafiles)[![Gitter](https://img.shields.io/gitter/room/jacebrowning/datafiles?color=D0164E)](https://gitter.im/jacebrowning/datafiles)Some common use cases include:- Coercing user-editable files into the proper Python types- Storing program configuration and data in version control- Loading data fixtures for demonstration or testing purposes- Synchronizing application state using file sharing services- Prototyping data models agnostic of persistence backendsWatch [my lightning talk](https://www.youtube.com/watch?v=moYkuNrmc1I&amp;feature=youtu.be&amp;t=1225) for a demo of this in action!## OverviewTake an existing dataclass such as [this example](https://docs.python.org/3/library/dataclasses.html#module-dataclasses) from the documentation:```pythonfrom dataclasses import dataclass@dataclassclass InventoryItem:    &quot;&quot;&quot;Class for keeping track of an item in inventory.&quot;&quot;&quot;    name: str    unit_price: float    quantity_on_hand: int = 0    def total_cost(self) -&gt; float:        return self.unit_price * self.quantity_on_hand```and decorate it with a directory pattern to synchronize instances:```pythonfrom datafiles import datafile@datafile(&quot;inventory/items/{self.name}.yml&quot;)class InventoryItem:    ...```Then, work with instances of the class as normal:```python&gt;&gt;&gt; item = InventoryItem(&quot;widget&quot;, 3)``````yaml# inventory/items/widget.ymlunit_price: 3.0```Changes to the object are automatically saved to the filesystem:```python&gt;&gt;&gt; item.quantity_on_hand += 100``````yaml# inventory/items/widget.ymlunit_price: 3.0quantity_on_hand: 100```Changes to the filesystem are automatically reflected in the object:```yaml# inventory/items/widget.ymlunit_price: 2.5 # &lt;= manually changed from &quot;3.0&quot;quantity_on_hand: 100``````python&gt;&gt;&gt; item.unit_price2.5```Objects can also be restored from the filesystem:```python&gt;&gt;&gt; from datafiles import Missing&gt;&gt;&gt; item = InventoryItem(&quot;widget&quot;, Missing)&gt;&gt;&gt; item.unit_price2.5&gt;&gt;&gt; item.quantity_on_hand100```## InstallationInstall this library directly into an activated virtual environment:```$ pip install datafiles```or add it to your [Poetry](https://poetry.eustace.io/) project:```$ poetry add datafiles```## DocumentationTo see additional synchronization and formatting options, please consult the [full documentation](https://datafiles.readthedocs.io).</longdescription>
</pkgmetadata>