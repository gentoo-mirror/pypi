<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pymsteams[![CircleCI](https://circleci.com/gh/rveachkc/pymsteams/tree/master.svg?style=shield)](https://circleci.com/gh/rveachkc/pymsteams/tree/master) [![PyPI version](https://badge.fury.io/py/pymsteams.svg)](https://badge.fury.io/py/pymsteams)Python Wrapper Library to send requests to Microsoft Teams Webhooks.Microsoft refers to these messages as Connector Cards.  A message can be sent with only the main Connector Card, or additional sections can be included into the message.This library uses Webhook Connectors for Microsoft Teams.  Please visit the following Microsoft Documentation link for instructions on how to obtain the correct url for your Channel: https://dev.outlook.com/Connectors/GetStarted#creating-messages-through-office-365-connectors-in-microsoft-teamsPlease refer to the Microsoft Documentation for the most up to date screenshots.https://dev.outlook.com/connectors/reference## InstallationInstall with pip:```bashpip install pymsteams```Install with async capabilities (python 3.6+):```bashpip install pymsteams[async]```#### Python 2 InstallationAt time of writing, the latest release supported by Python 2 is [Version 0.1.16](https://github.com/rveachkc/pymsteams/releases/tag/0.1.16)## Usage### Creating ConnectorCard MessagesThis is the simplest implementation of pymsteams.  It will send a message to the teams webhook url with plain text in the message.```pythonimport pymsteams# You must create the connectorcard object with the Microsoft Webhook URLmyTeamsMessage = pymsteams.connectorcard(&quot;&lt;Microsoft Webhook URL&gt;&quot;)# Add text to the message.myTeamsMessage.text(&quot;this is my text&quot;)# send the message.myTeamsMessage.send()```### Creating CreatorCard Messages to send via async loop```pythonimport asyncioimport pymsteamsloop = asyncio.get_event_loop()# the async_connectorcard object is used instead of the normal one.myTeamsMessage = pymsteams.async_connectorcard(&quot;&lt;Microsoft Webhook URL&gt;&quot;)# all formatting for the message should be the samemyTeamsMessage.text(&quot;This is my message&quot;)# to send the message, pass to the event looploop.run_until_complete(myTeamsMessage.send())```Please visit the python asyncio documentation for more info on using asyncio and the event loop: https://docs.python.org/3/library/asyncio-eventloop.html### Optional Formatting Methods for Cards#### Add a title```pythonmyTeamsMessage.title(&quot;This is my message title&quot;)```#### Add a link button```pythonmyTeamsMessage.addLinkButton(&quot;This is the button Text&quot;, &quot;https://github.com/rveachkc/pymsteams/&quot;)```#### Change URLThis is useful in the event you need to post the same message to multiple rooms.```pythonmyTeamsMessage.newhookurl(&quot;&lt;My New URL&gt;&quot;)```#### Set Color ThemeThis sets the theme color of the card. The parameter is expected to be a hex color code without the hash or the string red.```pythonmyTeamsMessage.color(&quot;&lt;Hex Color Code&gt;&quot;)```#### Preview your objectThis is a simple print command to view your connector card message object before sending.```pythonmyTeamsMessage.printme()```### Adding sections to the Connector Card MessageTo create a section and add various formatting elements```python# create the sectionmyMessageSection = pymsteams.cardsection()# Section TitlemyMessageSection.title(&quot;Section title&quot;)# Activity ElementsmyMessageSection.activityTitle(&quot;my activity title&quot;)myMessageSection.activitySubtitle(&quot;my activity subtitle&quot;)myMessageSection.activityImage(&quot;http://i.imgur.com/c4jt321l.png&quot;)myMessageSection.activityText(&quot;This is my activity Text&quot;)# Facts are key value pairs displayed in a list.myMessageSection.addFact(&quot;this&quot;, &quot;is fine&quot;)myMessageSection.addFact(&quot;this is&quot;, &quot;also fine&quot;)# Section TextmyMessageSection.text(&quot;This is my section text&quot;)# Section ImagesmyMessageSection.addImage(&quot;http://i.imgur.com/c4jt321l.png&quot;, ititle=&quot;This Is Fine&quot;)# Add your section to the connector card object before sendingmyTeamsMessage.addSection(myMessageSection)```You may also add multiple sections to a connector card message as well.```python# Create Section 1Section1 = pymsteams.cardsection()Section1.text(&quot;My First Section&quot;)# Create Section 2Section2 = pymsteams.cardsection()Section2.text(&quot;My Second Section&quot;)# Add both Sections to the main card objectmyTeamsMessage.addSection(Section1)myTeamsMessage.addSection(Section2)# Then send the cardmyTeamsMessage.send()```### Adding potential actions to the Connector Card MessageTo create a actions on which the user can interect with in MS TeamsTo find out more information on what actions can be used, please visit https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using#setting-up-a-custom-incoming-webhook```pythonmyTeamsMessage = pymsteams.connectorcard(&quot;&lt;Microsoft Webhook URL&gt;&quot;)myTeamsPotentialAction1 = pymsteams.potentialaction(_name = &quot;Add a comment&quot;)myTeamsPotentialAction1.addInput(&quot;TextInput&quot;,&quot;comment&quot;,&quot;Add a comment here&quot;,False)myTeamsPotentialAction1.addAction(&quot;HttpPost&quot;,&quot;Add Comment&quot;,&quot;https://...&quot;&quot;) myTeamsPotentialAction2 = pymsteams.potentialaction(_name = &quot;Set due date&quot;)myTeamsPotentialAction2.addInput(&quot;DateInput&quot;,&quot;dueDate&quot;,&quot;Enter due date&quot;)myTeamsPotentialAction2.addAction(&quot;HttpPost&quot;,&quot;save&quot;,&quot;https://...&quot;)myTeamsPotentialAction3 = pymsteams.potentialaction(_name = &quot;Change Status&quot;)myTeamsPotentialAction3.choices.addChoices(&quot;In progress&quot;,&quot;0&quot;)myTeamsPotentialAction3.choices.addChoices(&quot;Active&quot;,&quot;1&quot;)myTeamsPotentialAction3.addInput(&quot;MultichoiceInput&quot;,&quot;list&quot;,&quot;Select a status&quot;,False)myTeamsPotentialAction3.addAction(&quot;HttpPost&quot;,&quot;Save&quot;,&quot;https://...&quot;)myTeamsMessage.addPotentialAction(myTeamsPotentialAction1)myTeamsMessage.addPotentialAction(myTeamsPotentialAction2)myTeamsMessage.addPotentialAction(myTeamsPotentialAction3)myTeamsMessage.summary(&quot;Test Message&quot;)myTeamsMessage.send()```### Adding HTTP Post to potential actions in the Connector Card Message```pythonmyTeamsMessage = pymsteams.connectorcard(&quot;&lt;Microsoft Webhook URL&gt;&quot;)myTeamsPotentialAction1 = pymsteams.potentialaction(_name = &quot;Add a comment&quot;)# You can add a TextInput to your potential action like below - Please note the 2nd argment below as the id namemyTeamsPotentialAction1.addInput(&quot;TextInput&quot;,&quot;comment&quot;,&quot;Add a comment here&quot;,False)# we use the 2nd argument above as the id name to parse the values into the body post like below.myTeamsPotentialAction1.addAction(&quot;HttpPost&quot;,&quot;Add Comment&quot;,&quot;https://...&quot;, &quot;{{comment.value}}&quot;) myTeamsMessage.addPotentialAction(myTeamsPotentialAction1)myTeamsMessage.summary(&quot;Test Message&quot;)myTeamsMessage.send()# Notes:# If you post anything via teams, you will get some Javascript encoding happening via the post - For example:# Posting this:  {&quot;name&quot;:&quot;john&quot;, &quot;comment&quot; : &quot;nice&quot;}# Output will be:  b'{\\u0022name\\u0022:\\u0022john\\u0022, \\u0022comment\\u0022 : \\u0022nice\\u0022}'# i solved this issue by decoding unicode escape for a custom rest backend.```Please use Github issues to report any bugs or request enhancements.## Troubleshooting HTTP responseThis module is really just a nice wrapper pointed at the Microsoft API. To help troubleshoot missing messages, the requests response content is saved to the connectorcard class attribute `last_http_response`.To get the last http status code:```pythonimport pymsteamsmyTeamsMessage = pymsteams.connectorcard(&quot;&lt;Microsoft Webhook URL&gt;&quot;)myTeamsMessage.text(&quot;this is my text&quot;)myTeamsMessage.send()last_status_code = myTeamsMessage.last_http_response.status_code```More info on the Response Content is available in the requests documentation, [link](https://2.python-requests.org/en/master/user/quickstart/#response-content).## ExceptionsIf the call to the Microsoft Teams webhook service fails, a `TeamsWebhookException` will be thrown.## TestingIn order to test in your environment with pytest, set the environment variable `MS_TEAMS_WEBHOOK` to the Microsoft Teams Webhook url you would like to use.Then, from the root of the repo, install the requirements and run pytest.```bashpip install -r dev-requirements.txtMS_TEAMS_WEBHOOK=MicrosoftWebhookURLexport MS_TEAMS_WEBHOOKpytest --cov=./pymsteams --cov-report=term-missing --cov-branch```This will send two MS Teams messages describing how they are formatted.  Manually validate that the message comes through as expected.## Certificate ValidationIn some situations, a custom CA bundle must be used.  This can be set on class initialization, by setting the verify parameter.```pythonimport pymsteams# set custom ca bundlemsg = pymsteams.connectorcard(&quot;&lt;Microsoft Webhook URL&gt;&quot;, verify=&quot;/path/to/file&quot;)# disable CA validationmsg = pymsteams.connectorcard(&quot;&lt;Microsoft Webhook URL&gt;&quot;, verify=False)```Set to either the path of a custom CA bundle or False to disable.The requests documentation can be referenced for full details: https://2.python-requests.org/en/master/user/advanced/#ssl-cert-verification</longdescription>
</pkgmetadata>