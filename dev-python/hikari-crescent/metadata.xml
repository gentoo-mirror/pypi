<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hikari-crescent&lt;div align=&quot;center&quot;&gt;![Pypi](https://img.shields.io/pypi/v/hikari-crescent)[![ci](https://github.com/hikari-crescent/hikari-crescent/actions/workflows/ci.yml/badge.svg)](https://github.com/hikari-crescent/hikari-crescent/actions/workflows/ci.yml)![mypy](https://badgen.net/badge/mypy/checked/2A6DB2)![pyright](https://badgen.net/badge/pyright/checked/2A6DB2)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v1.json)](https://github.com/charliermarsh/ruff)![code-style-black](https://img.shields.io/badge/code%20style-black-black)&lt;/div&gt;&lt;a href=&quot;https://github.com/hikari-crescent/crescent-chan&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/hikari-crescent/crescent-chan/main/1x.png&quot; align=right width=&quot;264&quot; height=&quot;397&quot;&gt;&lt;/a&gt;üåô A command handler for [Hikari](https://github.com/hikari-py/hikari) that keeps your project neat and tidy.## Features - Simple and intuitive API. - Slash, user, and message commands. - Command localization. - Error handling for commands, events, and autocomplete. - Hooks to run function before or after a command (or any command from a group!) - Plugin system to easily split bot into different modules. - Easily use a custom context class. - Makes typehinting easy. - RESTBot and GatewayBot support.### Links&gt; üì¶ | [Pypi](https://pypi.org/project/hikari-crescent/)&lt;br&gt;&gt; üìñ | [User Guide](https://hikari-crescent.github.io/book)&lt;br&gt;&gt; üé® | [Template Project](https://github.com/hikari-crescent/template)&lt;br&gt;&gt; üóÉÔ∏è | [API Reference](https://hikari-crescent.github.io/hikari-crescent/crescent.html)&lt;br&gt;## InstallationCrescent is supported in python3.8+.```pip install hikari-crescent```## Bots using Crescent- [mCodingBot](https://github.com/mcb-dev/mCodingBot) - The bot for the mCoding Discord server.- [Starboard 3](https://github.com/circuitsacul/starboard-3) - A starbord bot by [@CircuitSacul](https://github.com/CircuitSacul)in over 17k servers.## UsageCrescent uses [class commands](https://github.com/hikari-crescent/hikari-crescent/blob/main/examples/basic/basic.py)to simplify creating commands. Class commands allow you to create a command similar to how you declare adataclass. The option function takes a type followed by the description, then optional information.```pythonimport crescentimport hikaribot = hikari.GatewayBot(&quot;YOUR_TOKEN&quot;)client = crescent.Client(bot)# Include the command in your client - don't forget this@client.include# Create a slash command@crescent.command(name=&quot;say&quot;)class Say:    word = crescent.option(str, &quot;The word to say&quot;)    async def callback(self, ctx: crescent.Context) -&gt; None:        await ctx.respond(self.word)bot.run()```Simple commands can use functions instead of classes. It is recommended to use a function when yourcommand does not have any options.```python@client.include@crescent.commandasync def ping(ctx: crescent.Context):    await ctx.respond(&quot;Pong!&quot;)```Adding arguments to the function adds more options. Information for arguments can be provided using the `Annotated` type hint.See [this example](https://github.com/hikari-crescent/hikari-crescent/blob/main/examples/basic/function_commands.py) for more information.```python# python 3.9 +from typing import Annotated as Atd# python 3.8from typing_extensions import Annotated as Atd@client.include@crescent.commandasync def say(ctx: crescent.Context, word: str):    await ctx.respond(word)# The same command but with a description for `word`@client.include@crescent.commandasync def say(ctx: crescent.Context, word: Atd[str, &quot;The word to say&quot;]) -&gt; None:    await ctx.respond(word)```### Typing to Option Types Lookup Table | Type | Option Type ||---|---|| `str` | Text || `int` | Integer || `bool` | Boolean || `float` | Number || `hikari.User` | User || `hikari.Role` | Role || `crescent.Mentionable` | Role or User || Any Hikari channel type. | Channel. The options will be the channel type and its subclasses. || `List[Channel Types]` (classes only) | Channel. ^ || `Union[Channel Types]` (functions only) | Channel. ^ || `hikari.Attachment` | Attachment |### AutocompleteAutocomplete is supported by using a callback function. This function returns a list of tuples where the firstvalue is the option name and the second value is the option value. `str`, `int`, and `float` value typescan be used.```pythonasync def autocomplete(    ctx: crescent.AutocompleteContext, option: hikari.AutocompleteInteractionOption) -&gt; list[tuple[str, str]]:    return [(&quot;Option 1&quot;, &quot;Option value 1&quot;), (&quot;Option 2&quot;, &quot;Option value 2&quot;)]@client.include@crescent.command(name=&quot;class-command&quot;)class ClassCommand:    option = crescent.option(str, autocomplete=autocomplete)    async def callback(self) -&gt; None:        await ctx.respond(self.option)@client.include@crescent.commandasync def function_command(    ctx: crescent.Context,    option: Annotated[str, crescent.Autocomplete(autocomplete)]) -&gt; None:    await ctx.respond(option)```### Error HandlingErrors that are raised by a command can be handled by `crescent.catch_command`.```pythonclass MyError(Exception):    ...@client.include@crescent.catch_command(MyError)async def on_err(exc: MyError, ctx: crescent.Context) -&gt; None:    await ctx.respond(&quot;An error occurred while running the command.&quot;)@client.include@crescent.commandasync def my_command(ctx: crescent.Context):    raise MyError()```There is also a `crescent.catch_event` and `crescent.catch_autocomplete` function forevents and autocomplete respectively.### Events```pythonimport hikari@client.include@crescent.eventasync def on_message_create(event: hikari.MessageCreateEvent):    if event.message.author.is_bot:        return    await event.message.respond(&quot;Hello!&quot;)```Using crescent's event decorator lets you usecrescent's [event error handling system](https://github.com/hikari-crescent/hikari-crescent/blob/main/examples/error_handling/basic.py#L27).# ExtensionsCrescent has 3 builtin extensions.- [crescent-ext-cooldowns](https://github.com/hikari-crescent/hikari-crescent/tree/main/examples/ext/cooldowns) - Allows you to add sliding window rate limits to your commands.- [crescent-ext-locales](https://github.com/hikari-crescent/hikari-crescent/tree/main/examples/ext/locales) - Contains classes that cover common use cases for localization.- [crescent-ext-tasks](https://github.com/hikari-crescent/hikari-crescent/tree/main/examples/ext/tasks) - Schedules background tasks using loops or cronjobs.These extensions can be installed with pip.- [crescent-ext-docstrings](https://github.com/hikari-crescent/crescent-ext-docstrings) - Lets you use docstrings to write descriptions for commands and options.- [crescent-ext-kebabify](https://github.com/hikari-crescent/crescent-ext-kebabify) - Turns your command names into kebabs!# SupportYou can ask questions in the `#crescent` channel in the [Hikari Discord server](https://discord.gg/Jx4cNGG). My Discord username is `lunarmagpie`.# ContributingCreate an issue for your feature. There aren't any guidelines right now so just don't be rude.</longdescription>
</pkgmetadata>