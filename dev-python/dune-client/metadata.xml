<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python 3.11](https://img.shields.io/badge/python-3.11-blue.svg)](https://www.python.org/downloads/release/python-3102/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)[![Build](https://github.com/duneanalytics/dune-client/actions/workflows/pull-request.yaml/badge.svg)](https://github.com/duneanalytics/dune-client/actions/workflows/pull-request.yaml)# Dune ClientA python framework for interacting with Dune Analytics' [officially supported APIservice](https://duneanalytics.notion.site/API-Documentation-1b93d16e0fa941398e15047f643e003a).## InstallationImport as a project dependency```shellpip install dune-client```# Example Usage## Quickstart: run_queryExport your `DUNE_API_KEY` (or place it in a `.env` file - as inhere [.env.sample](./.env.sample) and `source .env`).```pythonfrom dune_client.types import QueryParameterfrom dune_client.client import DuneClientfrom dune_client.query import QueryBasequery = QueryBase(    name=&quot;Sample Query&quot;,    query_id=1215383,    params=[        QueryParameter.text_type(name=&quot;TextField&quot;, value=&quot;Word&quot;),        QueryParameter.number_type(name=&quot;NumberField&quot;, value=3.1415926535),        QueryParameter.date_type(name=&quot;DateField&quot;, value=&quot;2022-05-04 00:00:00&quot;),        QueryParameter.enum_type(name=&quot;EnumField&quot;, value=&quot;Option 1&quot;),    ],)print(&quot;Results available at&quot;, query.url())dune = DuneClient.from_env()results = dune.run_query(query)# or as CSV# results_csv = dune.run_query_csv(query)# or as Pandas Dataframe# results_df = dune.run_query_dataframe(query)```## Further Examples### Get Latest ResultsUse `get_latest_results` to get the most recent query results without using execution credits. You can specify a `max_age_hours` to re-run the query if the data is too outdated.```pythonfrom dune_client.client import DuneClientdune = DuneClient.from_env()results = dune.get_latest_result(1215383, max_age_hours=8)```## Paid Subscription Features### CRUD OperationsIf you're writing scripts that rely on Dune query results and want to ensure that your local, peer-reviewed, queries are being used at runtime, you can call `update_query` before `run_query`!Here is a fictitious example making use of this functionality;```pythonfrom dune_client.types import QueryParameterfrom dune_client.client import DuneClientsql = &quot;&quot;&quot;    SELECT block_time, hash,    FROM ethereum.transactions    ORDER BY CAST(gas_used as uint256) * CAST(gas_price AS uint256) DESC    LIMIT {{N}}    &quot;&quot;&quot;dune = DuneClient.from_env()query = dune.create_query(    name=&quot;Top {N} Most Expensive Transactions on Ethereum&quot;,    query_sql=sql,    # Optional fields    params=[QueryParameter.number_type(name=&quot;N&quot;, value=10)],    is_private=False  # default)query_id = query.base.query_idprint(f&quot;Created query with id {query.base.query_id}&quot;)# Could retrieve using # dune.get_query(query_id)dune.update_query(    query_id,     # All parameters below are optional    name=&quot;Top {N} Most Expensive Transactions on {Blockchain}&quot;,    query_sql=sql.replace(&quot;ethereum&quot;, &quot;{{Blockchain}}&quot;),    params=query.base.parameters() + [QueryParameter.text_type(&quot;Blockchain&quot;, &quot;ethereum&quot;)],    description=&quot;Shows time and hash of the most expensive transactions&quot;,    tags=[&quot;XPâ‚¬N$IV $H1T&quot;])dune.archive_query(query_id)dune.unarchive_query(query_id)dune.make_private(query_id)dune.make_public(query_id)```# Developer Usage &amp; Deployment## MakefileThis project's makefile comes equipped with sufficient commands for local development.### Installation```shellmake install````### Format, Lint &amp; Types```shellmake check```can also be run individually with `fmt`, `lint` and `types` respectively. ### Testing```shellmake test-unit  # Unit tests make test-e2e   # Requires valid `DUNE_API_KEY````can also run both with `make test-all`## DeploymentPublishing releases to PyPi is configured automatically via github actions (cf. [./.github/workflows/py-publish.yaml](./.github/workflows/py-publish.yaml)).Any time a branch is tagged for release this workflow is triggered and published with the same version name.</longdescription>
</pkgmetadata>