<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FreshBooks Python SDK[![PyPI](https://img.shields.io/pypi/v/freshbooks-sdk)](https://pypi.org/project/freshbooks-sdk/)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/freshbooks-sdk)[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/freshbooks/freshbooks-python-sdk/Run%20Tests)](https://github.com/freshbooks/freshbooks-python-sdk/actions?query=workflow%3A%22Run+Tests%22)The FreshBooks Python SDK allows you to more easily utilize the [FreshBooks API](https://www.freshbooks.com/api).## Installation```bashpip install freshbooks-sdk```## UsageSee the [full documentation](https://freshbooks-python-sdk.readthedocs.io/) or check out some of our [examples](https://github.com/freshbooks/freshbooks-python-sdk/tree/main/examples).### Configuring the API clientYou can create an instance of the API client in one of two ways:- By providing your application's OAuth2 `client_id` and `client_secret` and following through the auth flow, which whencomplete will return an access token- Or if you already have a valid access token, you can instantiate the client directly using that token, however tokenrefresh flows will not function without the application id and secret.```pythonfrom freshbooks import ClientfreshBooksClient = Client(    client_id=&lt;your application id&gt;,    client_secret=&lt;your application secret&gt;,    redirect_uri=&lt;your redirect uri&gt;)```and then proceed with the auth flow (see below).Or```pythonfrom freshbooks import ClientfreshBooksClient = Client(    client_id=&lt;your application id&gt;,    access_token=&lt;a valid token&gt;)```#### Authorization flow_This is a brief summary of the OAuth2 authorization flow and the methods in the FreshBooks API Clientaround them. See the [FreshBooks API - Authentication](https://www.freshbooks.com/api/authentication) documentation._First, instantiate your Client with `client_id`, `client_secret`, and `redirect_uri` as above.To get an access token, the user must first authorize your application. This can be done by sending the user tothe FreshBooks authorization page. Once the user has clicked accept there, they will be redirected to your`redirect_uri` with an access grant code. The authorization URL can be obtained by calling`freshBooksClient.get_auth_request_url()`. This method also accepts a list of scopes that you wish the user toauthorize your application for.```pythonauth_url = freshBooksClient.get_auth_request_url(['user:profile:read', 'user:clients:read'])```Once the user has been redirected to your `redirect_uri` and you have obtained the access grant code, you can exchangethat code for a valid access token.```pythonauth_results = freshBooksClient.get_access_token(access_grant_code)```This call both sets the `access_token`, `refresh_token`, and `access_token_expires_at` fields on you Client instance,and returns those values.```python&gt;&gt;&gt; auth_results.access_token&lt;some token&gt;&gt;&gt;&gt; auth_results.refresh_token&lt;some refresh token&gt;&gt;&gt;&gt; auth_results.access_token_expires_at&lt;datetime object&gt;```When the token expires, it can be refreshed with the `refresh_token` value in the Client:```python&gt;&gt;&gt; auth_results = freshBooksClient.refresh_access_token()&gt;&gt;&gt; auth_results.access_token&lt;a new token&gt;```or you can pass the refresh token yourself:```python&gt;&gt;&gt; auth_results = freshBooksClient.refresh_access_token(stored_refresh_token)&gt;&gt;&gt; auth_results.access_token&lt;a new token&gt;```### Current UserFreshBooks users are uniquely identified by their email across our entire product. One user may act on severalBusinesses in different ways, and our Identity model is how we keep track of it. Each unique user has an Identity, andeach Identity has Business Memberships which define the permissions they have.See [FreshBooks API - Business, Roles, and Identity](https://www.freshbooks.com/api/me_endpoint) and[FreshBooks API - The Identity Model](https://www.freshbooks.com/api/identity_model).The current user can be accessed by:```python&gt;&gt;&gt; current_user = freshBooksClient.current_user()&gt;&gt;&gt; current_user.email&lt;some email&gt;&gt;&gt;&gt; current_user.business_memberships&lt;list of businesses&gt;```### Making API CallsEach resource in the client provides calls for `get`, `list`, `create`, `update` and `delete` calls. Please note thatsome API resources are scoped to a FreshBooks `account_id` while others are scoped to a `business_id`. In general thesefall along the lines of accounting resources vs projects/time tracking resources, but that is not precise.```pythonclient = freshBooksClient.clients.get(account_id, client_user_id)project = freshBooksClient.projects.get(business_id, project_id)```#### Get and ListAPI calls which return a single resource return a `Result` object with the returned data accessible via attributes.The raw json-parsed dictionary can also be accessed via the `data` attribute.```pythonclient = freshBooksClient.clients.get(account_id, client_user_id)assert client.organization == &quot;FreshBooks&quot;assert client.userid == client_user_idassert client.data[&quot;organization&quot;] == &quot;FreshBooks&quot;assert client.data[&quot;userid&quot;] == client_user_id````vis_state` returns an Enum. See [FreshBooks API - Active and Deleted Objects](https://www.freshbooks.com/api/active_deleted)for details.```pythonfrom freshbooks import VisStateassert client.vis_state == VisState.ACTIVEassert client.vis_state == 0assert client.data['vis_state'] == VisState.ACTIVEassert client.data['vis_state'] == 0```API calls which return a list of resources return a `ListResult` object. The resources in the list can be accessed byindex and iterated over. Similarly, the raw dictionary can be accessed via the `data` attribute.```pythonclients = freshBooksClient.clients.list(account_id)assert clients[0].organization == &quot;FreshBooks&quot;assert clients.data[&quot;clients&quot;][0][&quot;organization&quot;] == &quot;FreshBooks&quot;for client in clients:    assert client.organization == &quot;FreshBooks&quot;    assert client.data[&quot;organization&quot;] == &quot;FreshBooks&quot;```#### Create, Update, and DeleteAPI calls to create and update take a dictionary of the resource data. A successful call will return a `Result` objectas if a `get` call.Create:```pythonpayload = {&quot;email&quot;: &quot;john.doe@abcorp.com&quot;}new_client = FreshBooksClient.clients.create(account_id, payload)client_id = new_client.userid```Update:```pythonpayload = {&quot;email&quot;: &quot;john.doe@abcorp.ca&quot;}client = freshBooksClient.clients.update(account_id, client_id, payload)assert client.email == &quot;john.doe@abcorp.ca&quot;```Delete:```pythonclient = freshBooksClient.clients.delete(account_id, client_id)assert client.vis_state == VisState.DELETED```#### Error HandlingCalls made to the FreshBooks API with a non-2xx response are wrapped in a `FreshBooksError` exception.This exception class contains the error message, HTTP response code, FreshBooks-specific error number if one exists,and the HTTP response body.Example:```pythonfrom freshbooks import FreshBooksErrortry:    client = freshBooksClient.clients.get(account_id, client_id)except FreshBooksError as e:    assert str(e) == &quot;Client not found.&quot;    assert e.status_code == 404    assert e.error_code == 1012    assert e.raw_response ==  (&quot;{'response': {'errors': [{'errno': 1012, &quot;                               &quot;'field': 'userid', 'message': 'Client not found.', &quot;                               &quot;'object': 'client', 'value': '134'}]}}&quot;)```Not all resources have full CRUD methods available. For example expense categories have `list` and `get`calls, but are not deletable. If you attempt to call a method that does not exist, the SDK will raise a`FreshBooksNotImplementedError` exception, but this is not something you will likely have to accountfor outside of development.#### Pagination, Filters, and Includes`list` calls take a list of builder objects that can be used to paginate, filter, and includeoptional data in the response. See [FreshBooks API - Parameters](https://www.freshbooks.com/api/parameters) documentation.##### PaginationPagination results are included in `list` responses in the `pages` attribute:```python&gt;&gt;&gt; clients = freshBooksClient.clients.list(account_id)&gt;&gt;&gt; clients.pagesPageResult(page=1, pages=1, per_page=30, total=6)&gt;&gt;&gt; clients.pages.total6```To make a paginated call, first create a `PaginateBuilder` object that can be passed into the `list` method.```python&gt;&gt;&gt; from freshbooks import PaginateBuilder&gt;&gt;&gt; paginator = PaginateBuilder(2, 4)&gt;&gt;&gt; paginatorPaginateBuilder(page=2, per_page=4)&gt;&gt;&gt; clients = freshBooksClient.clients.list(account_id, builders=[paginator])&gt;&gt;&gt; clients.pagesPageResult(page=2, pages=3, per_page=4, total=9)````PaginateBuilder` has methods `page` and `per_page` to return or set the values. When setting the values the callscan be chained.```python&gt;&gt;&gt; paginator = PaginateBuilder(1, 3)&gt;&gt;&gt; paginatorPaginateBuilder(page=1, per_page=3)&gt;&gt;&gt; paginator.page()1&gt;&gt;&gt; paginator.page(2).per_page(4)&gt;&gt;&gt; paginatorPaginateBuilder(page=2, per_page=4)```ListResults can be combined, allowing your to use pagination to get all the results of a resource.```pythonpaginator = PaginateBuilder(1, 100)clients = freshBooksClient.clients.list(self.account_id, builders=[paginator])while clients.pages.page &lt; clients.pages.pages:    paginator.page(clients.pages.page + 1)    new_clients = freshBooksClient.clients.list(self.account_id, builders=[paginator])    clients = clients + new_clients```##### FiltersTo filter which results are return by `list` method calls, construct a `FilterBuilder` and pass thatin the list of builders to the `list` method.```python&gt;&gt;&gt; from freshbooks import FilterBuilder&gt;&gt;&gt; filter = FilterBuilder()&gt;&gt;&gt; filter.equals(&quot;userid&quot;, 123)&gt;&gt;&gt; clients = freshBooksClient.clients.list(account_id, builders=[filter])```Filters can be built with the methods: `equals`, `in_list`, `like`, `between`, and `boolean`,which can be chained together.Please see [FreshBooks API - Active and Deleted Objects](https://www.freshbooks.com/api/active_deleted)for details on filtering active, archived, and deleted resources.```python&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.in_list(&quot;clientids&quot;, [123, 456])FilterBuilder(&amp;search[clientids][]=123&amp;search[clientids][]=456)&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.like(&quot;email_like&quot;, &quot;@freshbooks.com&quot;)FilterBuilder(&amp;search[email_like]=@freshbooks.com)&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.between(&quot;amount&quot;, 1, 10)FilterBuilder(&amp;search[amount_min]=1&amp;search[amount_max]=10)&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.between(&quot;amount&quot;, min=15)  # For just minimumFilterBuilder(&amp;search[amount_min]=15)&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.between(&quot;amount_min&quot;, 15)  # AlternativelyFilterBuilder(&amp;search[amount_min]=15)&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.between(&quot;start_date&quot;, date.today())FilterBuilder(&amp;search[start_date]=2020-11-21)&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.boolean(&quot;complete&quot;, False) # Boolean filters are mostly used on Project-like resourcesFilterBuilder(&amp;complete=False)&gt;&gt;&gt; last_week = date.today() - timedelta(days=7)&gt;&gt;&gt; f = FilterBuilder()&gt;&gt;&gt; f.equals(&quot;vis_state&quot;, VisState.ACTIVE).between(&quot;updated&quot;, last_week, date.today()) # Chaining filtersFilterBuilder(&amp;search[vis_state]=0&amp;search[updated_min]=2020-11-14&amp;search[updated_max]=2020-11-21)```##### IncludesTo include additional relationships, sub-resources, or data in a response an `IncludesBuilder`can be constructed.```python&gt;&gt;&gt; from freshbooks import IncludesBuilder&gt;&gt;&gt; includes = IncludesBuilder()&gt;&gt;&gt; includes.include(&quot;outstanding_balance&quot;)IncludesBuilder(&amp;include[]=outstanding_balance)```Which can then be passed into `list` or `get` calls:```python&gt;&gt;&gt; clients = freshBooksClient.clients.list(account_id, builders=[includes])&gt;&gt;&gt; clients[0].outstanding_balance[{'amount': {'amount': '100.00', 'code': 'USD'}}]&gt;&gt;&gt; client = freshBooksClient.clients.get(account_id, client_id, includes=includes)&gt;&gt;&gt; client.outstanding_balance[{'amount': {'amount': '100.00', 'code': 'USD'}}]```Includes can also be passed into `create` and `update` calls to include the data in the response of the updated resource:```python&gt;&gt;&gt; payload = {&quot;email&quot;: &quot;john.doe@abcorp.com&quot;}&gt;&gt;&gt; new_client = FreshBooksClient.clients.create(account_id, payload, includes=includes)&gt;&gt;&gt; new_client.outstanding_balance[]  # New client has no balance```##### SortingTODO:#### Dates and TimesFor historical reasons, some resources in the FreshBooks API (mostly accounting-releated) return date/times in&quot;US/Eastern&quot; timezone. Some effort is taken to return `datetime` objects as zone-aware and normalized to UTC. In thesecases, the raw response string will differ from the attribute. For example:```pythonfrom datetime import datetime, timezoneassert client.data[&quot;updated&quot;] == &quot;2021-04-16 10:31:59&quot;  # Zone-naive string in &quot;US/Eastern&quot;assert client.updated.isoformat() == '2021-04-16T14:31:59+00:00'  # Zone-aware datetime in UTCassert client.updated == datetime(year=2021, month=4, day=16, hour=14, minute=31, second=59, tzinfo=timezone.utc)```## Development### TestingTo run all tests:```bashmake test```To run a single test with pytest:```bashpy.test path/to/test/file.pypy.test path/to/test/file.py::TestClass::test_case```### DocumentationsYou can generate the documentation via:```bashmake generate-docs```</longdescription>
</pkgmetadata>