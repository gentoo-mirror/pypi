<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;img     alt=&quot;pabo: Binary parsing for dummies!&quot;    src=&quot;https://raw.githubusercontent.com/astrogewgaw/logos/main/rasters/pabo.png&quot;/&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;&lt;div align=&quot;center&quot;&gt;[![Doc Coverage][doc_cov]][interrogate]![License][license]![Stars][stars-badge][![Gitmoji][gitmoji-badge]][gitmoji][![Code style: black][black-badge]][black]&lt;/div&gt;&lt;div align=&quot;justify&quot;&gt;&lt;h2&gt;What is this?&lt;/h2&gt;Parsing binary data from Python has always been a bit of a pain, thanks to theweirdly designed [**`struct`**][struct] module in Python's standard library.`struct` uses format strings to specify the layout of binary data, where eachcharacter specifies the type of data being packed/unpacked. But no can rememberthe format characters to begin with! This has led to numerous packages croppingin an attempt to solve the problem, such as:* [**`bread`**][bread]* [**`construct`**][construct]* [**`structures`**][structures]and many others. [**`pabo`**][pabo] is my response to such packages. It makesparsing binary data so easy, anyone could do it! For example, here is how youwould parse the beginning of a PNG file to get the width and height of theimage:```pythonimport pabo as pbpng = pb.Spec(    {        &quot;magic&quot;: pb.Const(            b&quot;\x89PNG\x0d\x0a\x1a\x0a&quot;,            pb.Bytes(8),        ),        &quot;ihdr_size&quot;: pb.Int(4, endian=&quot;big&quot;),        &quot;ihdr_id&quot;: pb.Const(b&quot;IHDR&quot;, pb.Bytes(4)),        &quot;width&quot;: pb.Int(4, endian=&quot;big&quot;),        &quot;height&quot;: pb.Int(4, endian=&quot;big&quot;),    })data = png.parse(&quot;example.png&quot;)```which would return a dictionary with the parsed data, like so:```python{     'magic': b'\x89PNG\r\n\x1a\n',     'ihdr_size': 13,     'ihdr_id': b'IHDR',     'width': 602,     'height': 172,}```For more real examples, check out the [**`priwo`**][priwo] package, which uses`pabo` to parse pulsar data from binary files (in fact, many of `pabo`'sfeatures are directly motivated by their need in `priwo`!). Documentation is indevelopment, so stay tuned!&lt;h2&gt;Installation&lt;/h2&gt;Installing [**`pabo`**][pabo] is as easy as:```bashpip install pabo```&lt;h2&gt;Philosophy&lt;/h2&gt;The philosophy behind `pabo` is: be simple, yet be fast and full of features.This implies that I deliberately avoid coding in features that are too magicalor obscure, in contrast to other packages, such as `construct`. This allowsusers of `pabo` to also become contributors, since the internals of `pabo` areclean and easy-to-understand.&lt;/div&gt;[numpy]: https://numpy.org[attrs]: https://www.attrs.org[gitmoji]: https://gitmoji.dev[black]: https://github.com/psf/black[bread]: https://github.com/alexras/bread[pabo]: https://github.com/astrogewgaw/pabo[priwo]: https://github.com/astrogewgaw/priwo[construct]: https://github.com/construct/construct[issues]: https://github.com/astrogewgaw/pabo/issues[structures]: https://github.com/malinoff/structures[interrogate]: https://github.com/econchick/interrogate[struct]: https://docs.python.org/3/library/struct.html[doc_cov]: https://raw.githubusercontent.com/astrogewgaw/pabo/main/assets/doc_cov.svg[license]: https://img.shields.io/github/license/astrogewgaw/pabo?style=for-the-badge[stars-badge]: https://img.shields.io/github/stars/astrogewgaw/pabo?style=for-the-badge[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge[gitmoji-badge]: https://img.shields.io/badge/gitmoji-%20üòú%20üòç-FFDD67.svg?style=for-the-badge</longdescription>
</pkgmetadata>