<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- markdownlint-disable --&gt;![notion-sdk-py](https://socialify.git.ci/ramnes/notion-sdk-py/image?font=Bitter&amp;language=1&amp;logo=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F4%2F45%2FNotion_app_logo.png&amp;owner=1&amp;pattern=Circuit%20Board&amp;theme=Light)&lt;div align=&quot;center&quot;&gt;  &lt;p&gt;    &lt;a href=&quot;https://pypi.org/project/notion-client&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/notion-client.svg&quot; alt=&quot;PyPI&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;tox.ini&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/notion-client&quot; alt=&quot;Supported Python Versions&quot;&gt;&lt;/a&gt;    &lt;br/&gt;    &lt;a href=&quot;LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/ramnes/notion-sdk-py&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/ambv/black&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20style-black-black&quot; alt=&quot;Code style&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://codecov.io/github/ramnes/notion-sdk-py&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ramnes/notion-sdk-py/branch/main/graphs/badge.svg&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://snyk.io/advisor/python/notion-client&quot;&gt;&lt;img src=&quot;https://snyk.io/advisor/python/notion-client/badge.svg&quot; alt=&quot;Package health&quot;&gt;&lt;/a&gt;    &lt;br/&gt;    &lt;a href=&quot;https://github.com/ramnes/notion-sdk-py/actions/workflows/quality.yml&quot;&gt;&lt;img src=&quot;https://github.com/ramnes/notion-sdk-py/actions/workflows/quality.yml/badge.svg&quot; alt=&quot;Code Quality&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/ramnes/notion-sdk-py/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/ramnes/notion-sdk-py/actions/workflows/test.yml/badge.svg&quot; alt=&quot;Tests&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/ramnes/notion-sdk-py/actions/workflows/docs.yml&quot;&gt;&lt;img src=&quot;https://github.com/ramnes/notion-sdk-py/actions/workflows/docs.yml/badge.svg&quot; alt=&quot;Docs&quot;&gt;&lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;&lt;!-- markdownlint-enable --&gt;**_notion-sdk-py_ is a simple and easy to use client library for the official[Notion API](https://developers.notion.com/).**It is meant to be a Python version of the reference [JavaScript SDK](https://github.com/makenotion/notion-sdk-js),so usage should be pretty similar between both. ðŸ˜Š&gt; ðŸ“¢ **Announcement** (04-11-2023) â€” Release 2.1.0 is out! It adds new helpers,&gt; more tests (100% coverage, yay!) and support for Python 3.12. Also, we're out&gt; of beta and now consider the package stable.&lt;!-- markdownlint-disable --&gt;## Installation&lt;!-- markdownlint-enable --&gt;```shellpip install notion-client```## Usage&gt; Use Notion's [Getting Started Guide](https://developers.notion.com/docs/getting-started)&gt; to get set up to use Notion's API.Import and initialize a client using an **integration token** or anOAuth **access token**.```pythonimport osfrom notion_client import Clientnotion = Client(auth=os.environ[&quot;NOTION_TOKEN&quot;])```In an asyncio environment, use the asynchronous client instead:```pythonfrom notion_client import AsyncClientnotion = AsyncClient(auth=os.environ[&quot;NOTION_TOKEN&quot;])```Make a request to any Notion API endpoint.&gt; See the complete list of endpoints in the [API reference](https://developers.notion.com/reference).```pythonfrom pprint import pprintlist_users_response = notion.users.list()pprint(list_users_response)```or with the asynchronous client:```pythonlist_users_response = await notion.users.list()pprint(list_users_response)```This would output something like:```text{'results': [{'avatar_url': 'https://secure.notion-static.com/e6a352a8-8381-44d0-a1dc-9ed80e62b53d.jpg',              'id': 'd40e767c-d7af-4b18-a86d-55c61f1e39a4',              'name': 'Avocado Lovelace',              'object': 'user',              'person': {'email': 'avo@example.org'},              'type': 'person'},             ...]}```All API endpoints are available in both the synchronous and asynchronous clients.Endpoint parameters are grouped into a single object. You don't need to rememberwhich parameters go in the path, query, or body.```pythonmy_page = notion.databases.query(    **{        &quot;database_id&quot;: &quot;897e5a76-ae52-4b48-9fdf-e71f5945d1af&quot;,        &quot;filter&quot;: {            &quot;property&quot;: &quot;Landmark&quot;,            &quot;rich_text&quot;: {                &quot;contains&quot;: &quot;Bridge&quot;,            },        },    })```### Handling errorsIf the API returns an unsuccessful response, an `APIResponseError` will be raised.The error contains properties from the response, and the most helpful is `code`.You can compare `code` to the values in the `APIErrorCode` object to avoidmisspelling error codes.```pythonimport loggingfrom notion_client import APIErrorCode, APIResponseErrortry:    my_page = notion.databases.query(        **{            &quot;database_id&quot;: &quot;897e5a76-ae52-4b48-9fdf-e71f5945d1af&quot;,            &quot;filter&quot;: {                &quot;property&quot;: &quot;Landmark&quot;,                &quot;rich_text&quot;: {                    &quot;contains&quot;: &quot;Bridge&quot;,                },            },        }    )except APIResponseError as error:    if error.code == APIErrorCode.ObjectNotFound:        ...  # For example: handle by asking the user to select a different database    else:        # Other error handling code        logging.error(error)```### LoggingThe client emits useful information to a logger. By default, it only emits warningsand errors.If you're debugging an application, and would like the client to log request &amp; responsebodies, set the `log_level` option to `logging.DEBUG`.```pythonnotion = Client(    auth=os.environ[&quot;NOTION_TOKEN&quot;],    log_level=logging.DEBUG,)```You may also set a custom `logger` to emit logs to a destination other than `stdout`.Have a look at [Python's logging cookbook](https://docs.python.org/3/howto/logging-cookbook.html)if you want to create your own logger.### Client options`Client` and `AsyncClient` both support the following options on initialization.These options are all keys in the single constructor parameter.&lt;!-- markdownlint-disable --&gt;| Option | Default value | Type | Description ||--------|---------------|---------|-------------|| `auth` | `None` | `string` | Bearer token for authentication. If left undefined, the `auth` parameter should be set on each request. || `log_level` | `logging.WARNING` | `int` | Verbosity of logs the instance will produce. By default, logs are written to `stdout`.| `timeout_ms` | `60_000` | `int` | Number of milliseconds to wait before emitting a `RequestTimeoutError` || `base_url` | `&quot;https://api.notion.com&quot;` | `string` | The root URL for sending API requests. This can be changed to test with a mock server. || `logger` | Log to console | `logging.Logger` | A custom logger. |### Full API responsesThe following functions can distinguish between full and partial API responses.| Function                   | Purpose                                                                                                                                                                  || -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ || `is_full_page`             | Determine whether an object is a full [Page object](https://developers.notion.com/reference/page)                                                                        || `is_full_block`            | Determine whether an object is a full [Block object](https://developers.notion.com/reference/block)                                                                      || `is_full_database`         | Determine whether an object is a full [Database object](https://developers.notion.com/reference/database)                                                                || `is_full_page_or_database` | Determine whether an object is a full [Page object](https://developers.notion.com/reference/page) or [Database object](https://developers.notion.com/reference/database) || `is_full_user`             | Determine whether an object is a full [User object](https://developers.notion.com/reference/user)                                                                        || `is_full_comment`          | Determine whether an object is a full [Comment object](https://developers.notion.com/reference/comment-object)                                                           |&lt;!-- markdownlint-enable --&gt;```pythonfrom notion_client.helpers import is_full_pagefull_or_partial_pages = await notion.databases.query(    database_id=&quot;897e5a76-ae52-4b48-9fdf-e71f5945d1af&quot;)for page in full_or_partial_pages[&quot;results&quot;]:    if not is_full_page_or_database(page):        continue    print(f&quot;Created at: {page['created_time']}&quot;)```### Utility functionsThese functions can be helpful for dealing with any of the paginated APIs.`iterate_paginated_api(function, **kwargs)` and its async version`async_iterate_paginated_api(function, **kwargs)` turn any paginated API into a generator.The `function` parameter must accept a `start_cursor` argument. Example: `notion.blocks.children.list`.```pythonfrom notion_client.helpers import iterate_paginated_apifor block in iterate_paginated_api(    notion.databases.query, database_id=&quot;897e5a76-ae52-4b48-9fdf-e71f5945d1af&quot;):    # Do something with block.    ...```If you don't need a generator, `collect_paginated_api(function, **kwargs)` andits async version `async_collect_paginated_api(function, **kwargs)` have thesame behavior than the previous functions, but return a list of all resultsfrom the paginated API.```pythonfrom notion_client.helpers import collect_paginated_apiall_results = collect_paginated_api(    notion.databases.query, database_id=&quot;897e5a76-ae52-4b48-9fdf-e71f5945d1af&quot;)```## TestingRun the tests with the `pytest` command. If you want to test against all Pythonversions, you can run `tox` instead.The tests are using `pytest-vcr`'s cassettes for simulating requests to theNotion API. To create new tests or run them without cassettes, you need to setup the environment variables `NOTION_TOKEN` and `NOTION_TEST_PAGE_ID` (a pagewhere your integration has all the capabilities enabled).The code will use the page at `NOTION_TEST_PAGE_ID` to generate a temporaryenvironment with the Notion objects to be tested, which will be deletedat the end of the session.## RequirementsThis package supports the following minimum versions:* Python &gt;= 3.7* httpx &gt;= 0.15.0Earlier versions may still work, but we encourage people building new applicationsto upgrade to the current stable.## Getting helpIf you want to submit a feature request for Notion's API, or are experiencingany issues with the API platform, please email `developers@makenotion.com`.If you found a bug with the library, please [submit an issue](https://github.com/ramnes/notion-sdk-py/issues).</longdescription>
</pkgmetadata>