<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================================aiocron - Crontabs for asyncio================================================.. image:: https://travis-ci.org/gawel/aiocron.svg?branch=master  :target: https://travis-ci.org/gawel/aiocron.. image:: https://img.shields.io/pypi/v/aiocron.svg  :target: https://pypi.python.org/pypi/aiocron.. image:: https://img.shields.io/pypi/dm/aiocron.svg  :target: https://pypi.python.org/pypi/aiocronUsage=====``aiocron`` provide a decorator to run function at time::    &gt;&gt;&gt; import aiocron    &gt;&gt;&gt; import asyncio    &gt;&gt;&gt;    &gt;&gt;&gt; @aiocron.crontab('*/30 * * * *')    ... async def attime():    ...     print('run')    ...    &gt;&gt;&gt; asyncio.get_event_loop().run_forever()You can also use it as an object::    &gt;&gt;&gt; @aiocron.crontab('1 9 * * 1-5', start=False)    ... async def attime():    ...     print('run')    ...    &gt;&gt;&gt; attime.start()    &gt;&gt;&gt; asyncio.get_event_loop().run_forever()Your function still be available at ``attime.func``You can also await a crontab. In this case, your coroutine can acceptarguments::    &gt;&gt;&gt; @aiocron.crontab('0 9,10 * * * mon,fri', start=False)    ... async def attime(i):    ...     print('run %i' % i)    ...    &gt;&gt;&gt; async def once():    ...     try:    ...         res = await attime.next(1)    ...     except Exception as e:    ...         print('It failed (%r)' % e)    ...     else:    ...         print(res)    ...    &gt;&gt;&gt; asyncio.get_event_loop().run_forever()Finally you can use it as a sleep coroutine. The following will wait untilnext hour::    &gt;&gt;&gt; await crontab('0 * * * *').next()If you don't like the decorator magic you can set the function by yourself::    &gt;&gt;&gt; cron = crontab('0 * * * *', func=yourcoroutine, start=False)Notice that unlike standard unix crontab you can specify seconds at the 6thposition.``aiocron`` use `croniter &lt;https://pypi.python.org/pypi/croniter&gt;`_. Refer toit's documentation to know more about crontab format.</longdescription>
</pkgmetadata>