<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jetblack-serializationSerialization for JSON and XML in Python using typing annotations(read the [docs](https://rob-blackbourn.github.io/jetblack-serialization/)).## StatusIt has been tested with Python 3.7 used the `typing_extensions`package for `TypedDict` and `Annotated`. In Python 3.8 the `TypedDict`class is available in the standard `typing` package.## InstallationThe package can be installed with pip.```bashpip install jetblack-serialization```## OverviewThe package adds support for type annotations when serializing or deserializingJSON or XML.### JSONGiven a typed dictionary:```pythonfrom datetime import datetimefrom typing import List, Optional, TypedDict, Unionclass Book(TypedDict, total=False):    book_id: int    title: str    author: str    publication_date: datetime    keywords: List[str]    phrases: List[str]    age: Optional[Union[datetime, int]]    pages: Optional[int]```#### SerializingThis could be serialized to JSON as:```pythonfrom stringcase import camelcase, snakecasefrom jetblack_serialization import SerializerConfigfrom jetblack_serialization.json import serializeobj: Book = {    'author': 'Chairman Mao',    'book_id': 42,    'title': 'Little Red Book',    'publication_date': datetime(1973, 1, 1, 21, 52, 13),    'keywords': ['Revolution', 'Communism'],    'phrases': [        'Revolutionary wars are inevitable in class society',        'War is the continuation of politics'    ],    'age': 24,}text = serialize(    obj,    Book,    SerializerConfig(camelcase, snakecase, pretty_print=True))print(text)```giving:```json{    &quot;bookId&quot;: 42,    &quot;title&quot;: &quot;Little Red Book&quot;,    &quot;author&quot;: &quot;Chairman Mao&quot;,    &quot;publicationDate&quot;: &quot;1973-01-01T21:52:13.00Z&quot;,    &quot;keywords&quot;: [&quot;Revolution&quot;, &quot;Communism&quot;],    &quot;phrases&quot;: [&quot;Revolutionary wars are inevitable in class society&quot;, &quot;War is the continuation of politics&quot;],    &quot;age&quot;: 24,    &quot;pages&quot;: null}```Note the fields have been camel cased, and the publication date has been turnedinto an ISO 8601 date.#### DeserializingWe can deserialize the data as follows:```pythonfrom stringcase import camelcase, snakecasefrom jetblack_serialization import SerializerConfigfrom jetblack_serialization.json import deserializedct = deserialize(    text,    Annotated[Book, JSONValue()],    SerializerConfig(camelcase, snakecase))```### XMLThe XML version of the typed dictionary might look like this:```pythonfrom datetime import datetimefrom typing import List, Optional, TypedDict, Unionfrom typing_extensions import Annotatedfrom jetblack_serialization.xml import XMLEntity, XMLAttributeclass Book(TypedDict, total=False):    book_id: Annotated[int, XMLAttribute(&quot;bookId&quot;)]    title: str    author: str    publication_date: datetime    keywords: Annotated[List[Annotated[str, XMLEntity(&quot;Keyword&quot;)]], XMLEntity(&quot;Keywords&quot;)]    phrases: List[str]    age: Optional[Union[datetime, int]]    pages: Optional[int]```Note we have introduced some annotations to control the serialization.For XML we have used pascal-case to serialized the keys and snake-casefor deserialization.#### SerializingTo serialize we need to provide the containing tag `Book`:```pythonfrom stringcase import pascalcase, snakecasefrom jetblack_serialization import SerializerConfigfrom jetblack_serialization.xml import serializebook: Book = {    'author': 'Chairman Mao',    'book_id': 42,    'title': 'Little Red Book',    'publication_date': datetime(1973, 1, 1, 21, 52, 13),    'keywords': ['Revolution', 'Communism'],    'phrases': [        'Revolutionary wars are inevitable in class society',        'War is the continuation of politics'    ],    'age': 24,    'pages': None}text = serialize(    book,    Annotated[Book, XMLEntity(&quot;Book&quot;)],    SerializerConfig(pascalcase, snakecase))print(text)```Producing:```xml&lt;Book bookId=&quot;42&quot;&gt;    &lt;Title&gt;Little Red Book&lt;/Title&gt;    &lt;Author&gt;Chairman Mao&lt;/Author&gt;    &lt;PublicationDate&gt;1973-01-01T21:52:13.00Z&lt;/PublicationDate&gt;    &lt;Keywords&gt;        &lt;Keyword&gt;Revolution&lt;/Keyword&gt;        &lt;Keyword&gt;Communism&lt;/Keyword&gt;    &lt;/Keywords&gt;    &lt;Phrase&gt;Revolutionary wars are inevitable in class society&lt;/Phrase&gt;    &lt;Phrase&gt;War is the continuation of politics&lt;/Phrase&gt;    &lt;Age&gt;24&lt;/Age&gt;&lt;/Book&gt;'```The annotations are more elaborate here. However, much of the typed dictionaryrequires no annotation.First we needed the outer document wrapper `XMLEntity(&quot;Book&quot;)`.Next we annotated the `book_id` to be an `XMLAttribute`.Finally we annotated the two lists differently. The `keywords` list useda nested structure, which we indicated by giving the list a different`XMLEntity` tag to the list items. For the phrases we used the defaultin-line behaviour.#### DeserializingWe can deserialize the XML as follows:```pythonfrom stringcase import pascalcase, snakecasefrom jetblack_serialization import SerializerConfigfrom jetblack_serialization.xml import deserializedct = deserialize(    text,    Annotated[Book, XMLEntity(&quot;Book&quot;)],    SerializerConfig(pascalcase, snakecase))```## AttributesFor JSON, attributes are typically not required. However`JSONProperty(tag: str)` and `JSONValue()` are provided forcompleteness.</longdescription>
</pkgmetadata>