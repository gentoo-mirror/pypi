<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># best-downloadURL downloader supporting checkpointing and continuous checksumming.NOTE: When the local_file already exists we automatically overwrite unless there is a checkpoint file there. When the download successfully completes the checkpoint will be deleted and True returned. This avoids leaving rubbish in the file system or doing full checksum calculations for large files. You will need to manage existing files if your scripts are re-runnable, either maintain your own database/done files or do a manual checksum.## Recent Updates:1. Added multiple urls option for failover.2. Parameter changes to 'download_file'- *local_file* is now optional, and will be set to the url basepath if not provided- Added *local_directory* option, will be prepended to *local_file*. Mainly useful  for downloading to a directory and using automatic local_file3. Improved SIGINT handling. We now raise a KeyboardInterrupt exception after handling it safely internally.4. Added a decent set of tests:```pip install -r requirements-dev.txtpytest```## Install```bashpip install best-download```##  Quickstart```pythonfrom best_download import download_fileurl = &quot;http://ipv4.download.thinkbroadband.com/10MB.zip&quot;checksum = &quot;d076d819249a9827c8a035bb059498bf49f391a989a1f7e166bc70d028025135&quot;local_file = &quot;10MB.zip&quot;try:  success = download_file(url, local_file=local_file, expected_checksum=checksum)except KeyboardInterrupt:  print(&quot;Ctrl-C (SIGINT) is passed up&quot;)```## APIThere's only one entry point: ```pythondef download_file(urls, expected_checksum=None, local_file=None, local_directory=None, max_retries=3)```| Parameter      | Description || -----------: | ----------- || `urls` | Either a single url or a list of urls to iterate over if failover required. || `expected_checksum` | (Optional) Checksum to validate against after download complete. Will not validate if not provided. || `local_file` | (Optional) Output path for saving the file. If not provided we default to the url basepath. | | `local_directory` | (Optional) If provided will be prepended to *local_file*. Mainly useful for downloading to a directory and using automatic local_file. || `max_retries` | (Default: 3) Number of retry attmpts per url (per failover if list is provided). |## ExamplesThe following example can be found in &quot;examples/basic_example.py&quot;. There are some example urls in the tests array, including test cases for a server not supporting ranges (github) and a server defaulting to gzip encoding which we don't use. We demo resuming at the end.```pythonimport osfrom best_download import download_fileimport logginglogger = logging.getLogger()console_handler = logging.StreamHandler()console_handler.setLevel(logging.INFO)logger.addHandler(console_handler)logger.setLevel(logging.INFO)tests = []tests.append((&quot;http://ipv4.download.thinkbroadband.com/10MB.zip&quot;, &quot;10MB.zip&quot;,    &quot;d076d819249a9827c8a035bb059498bf49f391a989a1f7e166bc70d028025135&quot;))# Larger file used for cancel testtests.append((&quot;http://ipv4.download.thinkbroadband.com/100MB.zip&quot;, &quot;100MB.zip&quot;,    &quot;cc844cac4b2310321d0fd1f9945520e2c08a95cefd6b828d78cdf306b4990b3a&quot;))# Github example doesn't support resumingtests.append((&quot;https://github.com/Nealcly/MuTual/archive/master.zip&quot;, &quot;master.zip&quot;, None))# Testing Accept-Encoding: identity (no gzip)tests.append((&quot;https://raw.githubusercontent.com/openai/gpt-3/master/data/two_digit_addition.jsonl&quot;,             &quot;two_digit_addition.jsonl&quot;, &quot;75a54b7a3db3b23369df74fe440c23025f3d3c51f664300bd3d56632b2617b3d&quot;))def main():    logger.info(&quot;Commence Demo&quot;)    url, local_file, checksum = tests[0]    # local_file provided    logger.info(f&quot;\nTesting download of file {url} to {local_file}&quot;)    logger.info(&quot;-----------------------------------------------------------------------&quot;)    download_file(url, local_file=local_file, expected_checksum=checksum)    assert os.path.exists(local_file)    os.remove(local_file)    # local_file automatically discovered from url basepath        logger.info(f&quot;\nTesting download of file {url} to {local_file} without providing local_file&quot;)    logger.info(&quot;-----------------------------------------------------------------------&quot;)        download_file(url, expected_checksum=checksum)    assert os.path.exists(local_file)    os.remove(local_file)    # local_directory provided    local_directory = &quot;testing_download&quot;    local_file_path = os.path.join(local_directory, local_file)    logger.info(f&quot;\nTesting download of file {url} to {local_file_path}&quot;)    logger.info(&quot;-----------------------------------------------------------------------&quot;)        download_file(url, expected_checksum=checksum, local_file=local_file, local_directory=local_directory)    assert os.path.exists(local_file_path)    os.remove(local_file_path)    os.rmdir(local_directory)    # local_directory provided + local_file automatically discovered from url basepath    local_directory = &quot;testing_download&quot;    local_file_path = os.path.join(local_directory, local_file)    logger.info(f&quot;\nTesting download of file {url} to {local_file_path} without providing local_file&quot;)    logger.info(&quot;-----------------------------------------------------------------------&quot;)        download_file(url, expected_checksum=checksum, local_directory=local_directory)    assert os.path.exists(local_file_path)    os.remove(local_file_path)    os.rmdir(local_directory)    # Resume Test        logger.info(&quot;\nResume Test&quot;)    logger.info(&quot;-----------------------------------------------------------------------&quot;)    url, local_file, checksum = tests[1]    logger.info(&quot;Please cancel half way through and re-run this example to test resuming&quot;)    try:        download_file(url, local_file=local_file, expected_checksum=checksum)    except KeyboardInterrupt:        pass    logger.info(&quot;Attempting resume if you cancelled in time.&quot;)    download_file(url, local_file=local_file, expected_checksum=checksum)    assert os.path.exists(local_file)    os.remove(local_file)if __name__ == '__main__':    main()```</longdescription>
</pkgmetadata>