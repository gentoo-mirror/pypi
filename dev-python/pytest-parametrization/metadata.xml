<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-parametrizationSimpler PyTest parametrization## How to install```bashpip install pytest-parametrization```## How to use### Explicit parameters```pythonfrom parametrization import Parametrization @Parametrization.parameters(&quot;actual&quot;, &quot;expected&quot;)@Parametrization.case(name=&quot;some_case_0&quot;, actual=1, expected=2)@Parametrization.case(&quot;some_case_1&quot;, actual=1, expected=2)@Parametrization.case(&quot;some_case_2&quot;, 1, expected=1)@Parametrization.case(&quot;some_case_3&quot;, 2, 2)@Parametrization.case(&quot;some_case_4&quot;, 3, 3)def test_somthing(actual, expected):    assert actual == expected```### Auto-detect parameters```pythonfrom parametrization import Parametrization @Parametrization.autodetect_parameters()@Parametrization.case(name=&quot;some_case_0&quot;, actual=1, expected=2)@Parametrization.case(&quot;some_case_1&quot;, actual=1, expected=2)@Parametrization.case(&quot;some_case_2&quot;, actual=1, expected=1)def test_somthing(actual, expected):    assert actual == expected```### Auto-detect parameters with default parameter```pythonfrom parametrization import Parametrization @Parametrization.autodetect_parameters()@Parametrization.default_parameters(expected=None)@Parametrization.case(name=&quot;some_case_0&quot;, actual=1, expected=2)@Parametrization.case(&quot;some_case_1&quot;, actual=1, expected=2)@Parametrization.case(&quot;some_case_2&quot;, actual=1, expected=1)@Parametrization.case(&quot;some_case_2&quot;, actual=1)def test_somthing(actual, expected):    assert actual == expected```### Generate name based on arguments```pythonfrom parametrization import Parametrization@Parametrization.name_factory(lambda actual, expected: '{}=={}'.format(actual, expected))@Parametrization.case(actual=1, expected=1)@Parametrization.case(actual=2, expected=2)@Parametrization.case('special-name', actual=3, expected=3)def test_somthing(actual, expected):    assert actual == expected```As can be seen from the example, you can also give explicit name for a caseeven if you are using name factory.</longdescription>
</pkgmetadata>