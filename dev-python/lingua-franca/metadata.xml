<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE.md) [![CLA](https://img.shields.io/badge/CLA%3F-Required-blue.svg)](https://mycroft.ai/cla) [![Team](https://img.shields.io/badge/Team-Languages-violetblue.svg)](https://github.com/MycroftAI/contributors/blob/master/team/Languages.md) ![Status](https://img.shields.io/badge/-Alpha-orange.svg)[![Build Status](https://travis-ci.org/MycroftAI/lingua-franca.svg?branch=master)](https://travis-ci.org/MycroftAI/lingua-franca) [![Coverage Status](https://coveralls.io/repos/github/MycroftAI/lingua-franca/badge.svg?branch=master)](https://coveralls.io/github/MycroftAI/lingua-franca?branch=master)[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)[![Join chat](https://img.shields.io/badge/Mattermost-join_chat-brightgreen.svg)](https://chat.mycroft.ai/community/channels/languages)# Lingua FrancaMycroft's multilingual text parsing and formatting libraryLingua Franca (_noun_)&lt;br&gt;&gt; a framework that is adopted as the common language between speakers with different native tongues&lt;/dr&gt;- [Lingua Franca](#lingua-franca)  - [Formatting](#formatting)    - [Pronounce numbers](#pronounce-numbers)    - [Pronounce datetime objects](#pronounce-datetime-objects)    - [Pronounce durations](#pronounce-durations)  - [Parsing](#parsing)    - [Extract numbers](#extract-numbers)    - [Extract durations](#extract-durations)    - [Extract dates](#extract-dates)  - [Contributing to this project](#contributing-to-this-project)    - [0. Sign a Contributor Licensing Agreement](#0-sign-a-contributor-licensing-agreement)    - [1. Setup a local copy of the project](#1-setup-a-local-copy-of-the-project)    - [2. Writing tests](#2-writing-tests)    - [3. Run tests to confirm they fail](#3-run-tests-to-confirm-they-fail)    - [4. Write code](#4-write-code)    - [5. Document your code](#5-document-your-code)    - [6. Try it in Mycroft](#6-try-it-in-mycroft)    - [7. Commit changes](#7-commit-changes)    - [8. Submit a PR](#8-submit-a-pr)    - [9. Waiting for a review](#9-waiting-for-a-review)  - [Credits](#credits)## FormattingConvert data into spoken equivalents### Pronounce numbersspoken versions of numbers```pythonfrom lingua_franca.format import nice_number, pronounce_numberassert nice_number(25/6) == &quot;4 and a sixth&quot;assert nice_number(201) == &quot;201&quot;assert nice_number(3.14159269) == &quot;3 and a seventh&quot;assert pronounce_number(3.14159269) == &quot;three point one four&quot;assert pronounce_number(0) == &quot;zero&quot;assert pronounce_number(10) == &quot;ten&quot;assert pronounce_number(201) == &quot;two hundred and one&quot;assert pronounce_number(102.3) == &quot;one hundred and two point three&quot;assert pronounce_number(    4092949192) == &quot;four billion, ninety two million, nine hundred and forty nine thousand, one hundred and ninety two&quot;assert pronounce_number(100034000000299792458, short_scale=True) == \       &quot;one hundred quintillion, thirty four quadrillion, &quot; \       &quot;two hundred and ninety nine million, seven hundred and ninety &quot; \       &quot;two thousand, four hundred and fifty eight&quot;assert pronounce_number(100034000000299792458, short_scale=False) == \       &quot;one hundred trillion, thirty four thousand billion, &quot; \       &quot;two hundred and ninety nine million, seven hundred and ninety &quot; \       &quot;two thousand, four hundred and fifty eight&quot;```### Pronounce datetime objectsspoken date for datetime.datetime objects```pythonfrom lingua_franca.format import nice_date, nice_date_time, nice_timeimport datetimedt = datetime.datetime(2017, 1, 31,  13, 22, 3)assert nice_date(dt) == &quot;tuesday, january thirty-first, twenty seventeen&quot;assert nice_time(dt) == &quot;one twenty two&quot;assert nice_time(dt, use_ampm=True) ==  &quot;one twenty two p.m.&quot;assert nice_time(dt, speech=False) == &quot;1:22&quot;assert nice_time(dt, speech=False, use_ampm=True) == &quot;1:22 PM&quot;assert nice_time(dt, speech=False, use_24hour=True) == &quot;13:22&quot;assert nice_time(dt, speech=False, use_24hour=True, use_ampm=True) == &quot;13:22&quot;assert nice_time(dt, use_24hour=True, use_ampm=True) == &quot;thirteen twenty two&quot;assert nice_time(dt, use_24hour=True, use_ampm=False) == &quot;thirteen twenty two&quot;assert nice_date_time(dt) == &quot;tuesday, january thirty-first, twenty seventeen at one twenty two&quot;```### Pronounce durationsspoken number of seconds or datetime.timedelta objects```pythonfrom lingua_franca.format import nice_durationassert nice_duration(1) ==   &quot;one second&quot;assert nice_duration(3) ==   &quot;three seconds&quot;assert nice_duration(1, speech=False) ==   &quot;0:01&quot;assert nice_duration(61), &quot;one minute one second&quot;assert nice_duration(61, speech=False) ==   &quot;1:01&quot;assert nice_duration(5000) ==  &quot;one hour twenty three minutes twenty seconds&quot;assert nice_duration(5000, speech=False), &quot;1:23:20&quot;assert nice_duration(50000) ==   &quot;thirteen hours fifty three minutes twenty seconds&quot;assert nice_duration(50000, speech=False) ==   &quot;13:53:20&quot;assert nice_duration(500000) ==   &quot;five days  eighteen hours fifty three minutes twenty seconds&quot;assert nice_duration(500000, speech=False), &quot;5d 18:53:20&quot;from datetime import timedeltaassert nice_duration(timedelta(seconds=500000), speech=False) ==  &quot;5d 18:53:20&quot;```## ParsingExtract data from natural language text### Extract numbers```pythonfrom lingua_franca.parse import extract_number, extract_numbers# extract a numberassert extract_number(&quot;nothing&quot;) is Falseassert extract_number(&quot;two million five hundred thousand tons of spinning &quot;                      &quot;metal&quot;) == 2500000assert extract_number(&quot;six trillion&quot;) == 6000000000000.0assert extract_number(&quot;six trillion&quot;, short_scale=False) == 6e+18assert extract_number(&quot;1 and 3/4 cups&quot;) == 1.75assert extract_number(&quot;1 cup and a half&quot;) == 1.5## extracts all numbersassert extract_numbers(&quot;nothing&quot;) == []assert extract_numbers(&quot;this is a one twenty one  test&quot;) == [1.0, 21.0]assert extract_numbers(&quot;1 dog, seven pigs, macdonald had a farm, &quot;                       &quot;3 times 5 macarena&quot;) == [1, 7, 3, 5]```### Extract durationsextract datetime.timedelta objects```python## extract durationsfrom lingua_franca.parse import extract_durationfrom datetime import timedeltaassert extract_duration(&quot;nothing&quot;) == (None, 'nothing')assert extract_duration(&quot;Nineteen minutes past the hour&quot;) == (    timedelta(minutes=19),    &quot;past the hour&quot;)assert extract_duration(&quot;wake me up in three weeks, four hundred ninety seven&quot;                        &quot; days, and three hundred 91.6 seconds&quot;) == (           timedelta(weeks=3, days=497, seconds=391.6),           &quot;wake me up in , , and&quot;)assert extract_duration(    &quot;The movie is one hour, fifty seven and a half minutes long&quot;) == (           timedelta(hours=1, minutes=57.5),           &quot;the movie is ,  long&quot;)```### Extract datesextract datetime.datetime objects```python## extract date timesfrom datetime import datetimefrom lingua_franca.parse import extract_datetime, normalizedef extractWithFormat(text):    date = datetime(2017, 6, 27, 13, 4)  # Tue June 27, 2017 @ 1:04pm    [extractedDate, leftover] = extract_datetime(text, date)    extractedDate = extractedDate.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)    return [extractedDate, leftover]def testExtract(text, expected_date, expected_leftover):    res = extractWithFormat(normalize(text))    assert res[0] == expected_date    assert res[1] == expected_leftovertestExtract(&quot;now is the time&quot;,            &quot;2017-06-27 13:04:00&quot;, &quot;is time&quot;)testExtract(&quot;in a couple minutes&quot;,            &quot;2017-06-27 13:06:00&quot;, &quot;&quot;)testExtract(&quot;What is the day after tomorrow's weather?&quot;,            &quot;2017-06-29 00:00:00&quot;, &quot;what is weather&quot;)testExtract(&quot;Remind me at 10:45 pm&quot;,            &quot;2017-06-27 22:45:00&quot;, &quot;remind me&quot;)testExtract(&quot;what is the weather on friday morning&quot;,            &quot;2017-06-30 08:00:00&quot;, &quot;what is weather&quot;)testExtract(&quot;what is tomorrow's weather&quot;,            &quot;2017-06-28 00:00:00&quot;, &quot;what is weather&quot;)testExtract(&quot;remind me to call mom next tuesday&quot;,            &quot;2017-07-04 00:00:00&quot;, &quot;remind me to call mom&quot;)testExtract(&quot;remind me to call mom in 3 weeks&quot;,            &quot;2017-07-18 00:00:00&quot;, &quot;remind me to call mom&quot;)testExtract(&quot;set an alarm for tonight 9:30&quot;,            &quot;2017-06-27 21:30:00&quot;, &quot;set alarm&quot;)testExtract(&quot;on the evening of june 5th 2017 remind me to call my mother&quot;,            &quot;2017-06-05 19:00:00&quot;, &quot;remind me to call my mother&quot;)```## Getting Started### Loading a languageBefore using Lingua Franca's other functions, you'll need to load one or more languages into memory, using part or all of aBCP-47 language code:```python# Load a languagelingua_franca.load_language('en')# Load multiple languages at once## If no default language is set, the first# element will become the defaultlingua_franca.load_languages(['en', 'es'])# Change the default languagelingua_franca.set_default_language('es')```See the documentation for more information about loading and unloading languages.### Calling localized functionsMost of Lingua Franca's functions have been localized. You can call a function in any language you've loaded; this is always specified by the function's `lang` parameter. If you omit that parameter, the function will be called in the current default language.Example:```python&gt;&gt;&gt; from lingua_franca import load_languages, \  set_default_lang, parse&gt;&gt;&gt; load_languages(['es', 'en'])&gt;&gt;&gt; parse.extract_number(&quot;uno&quot;)1&gt;&gt;&gt; parse.extract_number(&quot;one&quot;)False&gt;&gt;&gt; parse.extract_number(&quot;one&quot;, lang='en')1&gt;&gt;&gt; set_default_lang('en')&gt;&gt;&gt; parse.extract_number(&quot;uno&quot;)False&gt;&gt;&gt; parse.extract_number(&quot;one&quot;)1```In some languages, certain parameters have no effect, either becausethose parameters do not apply, or because the localization is not complete.It's important to remember that Lingua Franca is in alpha. Support for aparticular language may be inconsistent, and one language's version of acomplex function might be outdated compared with another.New functionality usually starts in the languages spoken by majorcontributors. If your language's functions are lacking, we'd love your helpimproving them! (See below, &quot;Contributing.&quot;)## Contributing to this projectWe welcome all contributions to Lingua Franca. To get started:### 0. Sign a Contributor Licensing AgreementTo protect yourself, the project, and users of Mycroft technologies, we require a Contributor Licensing Agreement (CLA) before accepting any code contribution. This agreement makes it crystal clear that, along with your code, you are offering a license to use it within the confines of this project. You retain ownership of the code, this is just a license.You will also be added to [our list of excellent human beings](https://github.com/MycroftAI/contributors)!Please visit https://mycroft.ai/cla to initiate this one-time signing.### 1. Setup a local copy of the project1. [Fork the project](https://help.github.com/articles/fork-a-repo/) to create your own copy.2. Clone the repository and change into that directory```bashgit clone https://github.com/your-username/lingua-franca/cd lingua-franca```3. Setup a lightweight virtual environment (venv) for the project. This creates an isolated environment that can have it's own independent set of installed Python packages.```bashpython3 -m venv .venvsource .venv/bin/activate```  To exit the venv you can run `deactivate` or close the terminal window.4. Install the package and it's dependencies```bashpip install wheelpython -m pip install .pip install pytestpython setup.py install```5. To check that everything is installed correctly, let's run the existing test-suite.```bashpytest```### 2. Have a look at the project's structureThe package's layout is described in `project-structure.md`, along with some important notes. It's prettyintuitive, but uniform file and function names are important to Lingua Franca's operation.### 3. Writing testsWe utilize a Test Driven Development (TDD) methodology so the first step is always to add tests for whatever you want to add or fix. If it's a bug, we must not have a test that covers that specific case, so we want to add another test. If you are starting on a new language then you can take a look at the tests for other languages to get started.Tests are all located in `lingua_franca/test`.Each language should have two test files:- `test_format_lang.py`- `test_parse_lang.py`### 4. Run tests to confirm they failGenerally, using TDD, all tests should fail when they are first added. If the test is passing when you haven't yet fixed the bug or added the functionality, something must be wrong with the test or the test runner.```bashpytest```### 5. Write codeNow we can add our new code. There are three main files for each language:- `common_data_lang.py`    Common data that can be used across formatting and parsing such as dictionaries of number names.- `format_lang.py`    All formatting functions for this language.- `parse_lang.py`    All parsing functions for this language.Since we have already written our unit tests, we can run these regularly to see our progress.### 6. Document your codeDocument code using [Google-style docstrings](http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html). Our automated documentation tools expect that format. All functions and class methods that are expected to be called externally should include a docstring. (And those that aren't should be [prefixed with a single underscore](https://docs.python.org/3/tutorial/classes.html#private-variables).### 7. Try it in MycroftLingua Franca is installed by default when you install Mycroft-core, but for development you generally have this repo cloned elsewhere on your computer. You can use your changes in Mycroft by installing it in the Mycroft virtual environment.If you added the Mycroft helper commands during setup you can just use:```bashmycroft-pip install /path/to/your/lingua-franca```Otherwise you need to activate that venv manually:```bashcd ~/mycroft-coresource venv-activate.shpip install /path/to/your/lingua-franca```Now, when talking with Mycroft, it will be using your development version of Lingua Franca.### 8. Commit changesMake commits in logical units, and describe them thoroughly. If addressing documented issue, use the issue identifier at the very beginning of each commit. For instance:```bashgit commit -m &quot;Issues-123 - Fix 'demain' date extraction in French&quot;```### 9. Submit a PROnce your changes are ready for review, [create a pull request](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request).Like commit messages, the PR title and description should properly describe the changes you have made, along with any additional information that reviewers who do not speak your language might need to understand.### 10. Waiting for a reviewWhile you wait for a review of your contribution, why not take a moment to review some other pull requests? This is a great way to learn and help progress the queue of pull requests, which means your contribution will be seen more quickly!## CreditsThough it is now a standalone package, Lingua Franca's codebase was a spinoff from Mycroft-core. In addition to those represented in Lingua Franca's git log, a great many people contributed to this code before the spinoff.  Although all are listed in MycroftAI's [List of Excellent People](https://github.com/MycroftAI/contributors), it seems proper to acknowledge the specific individuals who helped write *this* package, since they are no longer represented in `git log`.  To the best of the maintainers' knowledge, all of the &quot;lost&quot; contributors are listed in `pre-spinoff-credits.md`. Names are listed as they appeared in `git log`, or as they are known to the Mycroft community.  Those who've contributed since the spinoff are, of course, in Lingua Franca's `git log` and the GitHub &quot;Contributors&quot; pane. All contributors are on the List of Excellent People, regardless of when they contributed.  If you contributed to the original code, and your name is missing from `pre-spinoff-credits.md`, please inform a maintainer or file an issue, so we can give credit where credit is due!</longdescription>
</pkgmetadata>