<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AgileUp StatePython 3.8+ project to manage AgileUP pipeline states with the following features:* Linux and Windows compatible project.* Defines state model.* Saves and fetches states from vault.* Exports private key for Linux SSH connections.* Exports client PKI data for Windows WinRM connections.* Creates cloud init zip file for mTLS connection data to Windows WinRM hosts.* Exports ansible inventories for both Linux(SSH) and Windows(WinRM) connections.* Provides simple connectivity tests.## PrerequisitesThis project uses poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on, it will manage (install/update) them for you. Use the installer rather than pip [installing-with-the-official-installer](https://python-poetry.org/docs/master/#installing-with-the-official-installer).```shpoetry self add poetry-bumpversion``````shpoetry -VPoetry (version 1.2.0)```### Windows PathInstall poetry from powershell in admin mode.```shell(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -```The path will be `C:\Users\&lt;YOURUSER&gt;\AppData\Roaming\Python\Scripts\poetry.exe` which you will need to add to your system path.### Windows GitBashWhen using gitbash you can setup an alias for the poetry command:```shellalias poetry=&quot;\&quot;C:\Users\&lt;YOURUSER&gt;\AppData\Roaming\Python\Scripts\poetry.exe\&quot;&quot;```## Getting Started```shpoetry update``````shpoetry install```## DevelopmentThis project uses the [hvac](https://github.com/hvac/hvac) python module and to develop locally you can run vaultas a docker service as detailed here [local docker vault](https://hub.docker.com/_/vault). For local development vault setup follow the [VAULT](VAULT.md) guide for information.Check your connection with the following command, note in development mode vault should not be sealed.```shellexport VAULT_ADDR='http://localhost:8200'export VAULT_TOKEN='8d02106e-b1cd-4fa5-911b-5b4e669ad07a'poetry run agileupstate check```## Required Environment State Variables| Variable         | Description                                                     ||------------------|-----------------------------------------------------------------|| SIAB_ID          | Unique environment ID.                                          || SIAB_CLOUD       | Cloud vendor API mnemonic.                                      || SIAB_LOCATION1   | Cloud vendor defined cloud location, uksouth, etc.              || SIAB_LOCATION2   | Cloud vendor defined cloud location, UK South, etc.             || SIAB_CONTEXT     | Environment context, e.g. dev. test, prod.                      || SIAB_VALUES_PATH | Vault path to common environment values to be exported.         || SIAB_DOMAIN      | Optional public domain that overrides cloud provided DNS names. |`SIAB_LOCATION`: Azure has a different location string between &quot;accounts&quot; and &quot;resources&quot; and only `uksouth` is usefulto the automation, but we must also provide `UK South` for resource groups. **FIXME: Needs to be verified**.`SIAB_VALUES_PATH`: Rather than load variables into the delivery platform environment, there can be many, a better optionis to define a YML file that contains all the required common variables for a specific environment and have the user uploadthat to vault. This application can then download the YML data file and convert it into an exports file that can be sourced by the pipelines. These environment values that are exported can then be used by this project and other utilities such asterraform, ansible and powershell.`SIAB_DOMAIN`: Cloud DNS services might in some cases provide a DNS domain that is not the same as the public internetdomain required by the project, for example server1.uksouth.cloudapp.azure.com might optionally be server1.meltingturret.io.`username/password`: These values are common across the environment, for example Ubuntu Azure images use a `username=azureuser`,and so it simplifies configuration if the same credentials are used for Linux and Windows environments running in Azure for administration access, client administration access as well as PFX certificate files used on Windows for WinRM certificate authentication. For AWS `ubuntu` is the username for Ubuntu images the same approach can be taken there.**Required environment inputs:**&gt; These values should be setup in your CD platforms environment variables.```shellexport SIAB_ID=001export SIAB_CLOUD=armexport SIAB_LOCATION1=uksouthexport SIAB_LOCATION2=&quot;UK South&quot;export SIAB_CONTEXT=devexport SIAB_VALUES_PATH=siab-state/001-arm-uksouth-dev/siab-values/siab-values.yml```**Required values inputs (stored in vault path `SIAB_VALUES_PATH`):**```yamlconnection:  url: https://server1.meltingturret.io:5986  username: azureuser  password: mypassword  ca_trust_path: siab-client/chain.meltingturret.io.pem  cert_pem: siab-client/azureuser@meltingturret.io.pem  cert_key_pem: siab-client/azureuser@meltingturret.io.keycloud:  group_owner: Paul Gilligan  group_department: DevOps  group_location: uksouth```## Required Supporting DataSome data is generated only once and thus can be uploaded to vault manually. **Uploading values file:**```shellbase64 ./siab-values.yml | vault kv put secret/siab-state/001-arm-uksouth-dev/siab-values/siab-values.yml file=-```**Uploading pfx files:**```shellbase64 ./server1.meltingturret.io.pfx | vault kv put secret/siab-pfx/server1.meltingturret.io.pfx file=-base64 ./azureuser@meltingturret.io.pfx | vault kv put secret/siab-pfx/azureuser@meltingturret.io.pfx file=-```**Uploading pki files:**```shellbase64 ./chain.meltingturret.io.pem | vault kv put secret/siab-client/chain.meltingturret.io.pem file=-base64 ./azureuser@meltingturret.io.key | vault kv put secret/siab-client/azureuser@meltingturret.io.key file=-base64 ./azureuser@meltingturret.io.pem | vault kv put secret/siab-client/azureuser@meltingturret.io.pem file=-```## Provision Use CaseExample steps required for the Windows terraform provision use case shown below. ```shellagileupstate cloud-init --server-path=siab-pfx/ags-w-arm1.meltingturret.io.pfx --client-path=siab-pfx/devops@meltingturret.io.pfxagileupstate createsource ./siab-state-export.sh                                                terraform initterraform apply -auto-approveagileupstate save```Example steps required for the Linux terraform provision use case shown below. ```shellagileupstate createsource ./siab-state-export.sh                                                terraform initterraform apply -auto-approveagileupstate save```## Destroy Use CaseExample steps required for recovering system state use case shown below which might be for example to destroy an environment. ```shellagileupstate loadsource ./siab-state-export.sh                                                terraform initterraform destroy -auto-approve```## Ansible Use CaseExample steps required for the Windows ansible use case shown below. ```shellagileupstate loadsource ./siab-state-export.sh                                                  agileupstate inventory-windows --ca-trust-path=siab-client/chain.meltingturret.io.pem --cert-pem=siab-client/azureuser@meltingturret.io.pem --cert-key-pem=siab-client/devops@meltingturret.io.keyansible-inventory -i inventory.ini --listansible -i inventory.ini &quot;${TF_VAR_siab_name_underscore}&quot; -m win_ping```Example steps required for the Linux ansible use case shown below. ```shellagileupstate loadsource ./siab-state-export.sh                        agileupstate inventory-linuxansible-inventory -i inventory.ini --listANSIBLE_HOST_KEY_CHECKING=True ansible -i inventory.ini --user &quot;${TF_VAR_admin_username}&quot; &quot;${TF_VAR_siab_name_underscore}&quot; -m ping```## Exports Use CaseThe `yml` file from `SIAB_VALUES_PATH` is exported to the file `siab-state-export.sh` with the contents as shown in the example below which can then be used by downstream utilities. ```shellexport SIAB_URL=https://server1.meltingturret.io:5986export SIAB_USERNAME=azureuserexport SIAB_PASSWORD=mypasswordexport SIAB_CA_TRUST_PATH=siab-client/chain.meltingturret.io.pemexport SIAB_CERT_PEM=siab-client/azureuser@meltingturret.io.pemexport SIAB_CERT_KEY_PEM=siab-client/azureuser@meltingturret.io.keyexport TF_VAR_group_owner=Paul Gilliganexport TF_VAR_group_department=DevOpsexport TF_VAR_group_location=UK Southexport TF_VAR_admin_username=azureuserexport TF_VAR_admin_password=mypasswordexport TF_VAR_siab_name=001-arm-uksouth-devexport TF_VAR_siab_name_underscore=001_arm_uksouth_dev``````shellsource ./siab-state-export.sh```## Cloud Init Data Use CaseExample cloud init command that generates the zip file that is loaded onto Windows machines for WimRM certificate authentication. ```shellpoetry run agileupstate cloud-init --server-path=siab-pfx/ags-w-arm1.meltingturret.io.pfx --client-path=siab-pfx/azureuser@meltingturret.io.pfx```## Ansible Windows Inventory Use Case`inventory.ini` is generated with the target(s) and configuration information for a successful SSH connection from Ansible. **When `export SIAB_DOMAIN=meltingturret.io`:**```ini[001_arm_uksouth_dev]ags-w-arm1.meltingturret.io[001_arm_uksouth_dev:vars]ansible_user=azureuseransible_password=heTgDg!J4buAv5kcansible_connection=winrmansible_port=5986ansible_winrm_ca_trust_path=chain.meltingturret.io.pemansible_winrm_cert_pem=azureuser@meltingturret.io.pemansible_winrm_cert_key_pem=azureuser@meltingturret.io.keyansible_winrm_transport=certificate```## Ansible Linux Inventory Use Case`inventory.ini` is generated with the target(s) and configuration information for a successful SSH connection from Ansible. **When `export SIAB_DOMAIN=meltingturret.io`:**```ini[001_arm_uksouth_dev]ags-w-arm1.meltingturret.io ansible_ssh_private_key_file=vm-rsa-private-key.pem```## Run```shpoetry run agileupstate```## Lint```shpoetry run flake8```## Test```shpoetry run pytest```## Publish* By default we are using [PYPI packages](https://packaging.python.org/en/latest/tutorials/installing-packages/). * Create yourself an access token for PYPI and then follow the instructions.```shexport PYPI_USERNAME=__token__ export PYPI_PASSWORD=&lt;Your API Token&gt;poetry publish --build --username $PYPI_USERNAME --password $PYPI_PASSWORD```## VersioningWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/Agile-Solutions-GB-Ltd/agileup/tags). ## ReleasingWe are using [poetry-bumpversion](https://github.com/monim67/poetry-bumpversion) to manage release versions.```shpoetry version patch```## DependencyOnce the release has been created it is now available for you to use in other python projects via:```shpip install agileupstate```And also for poetry projects via:```shpoetry add agileupstate```## ContributingPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.## LicenseThis project is licensed under the Apache License, Version 2.0 - see the [LICENSE](LICENSE) file for details</longdescription>
</pkgmetadata>