<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PySpeckleA Python Speckle Client[![Build Status](https://travis-ci.com/speckleworks/PySpeckle.svg?branch=master)](https://travis-ci.com/speckleworks/PySpeckle)[Speckle.Works](https://www.speckle.works)&gt; Speckle: open digital infrastructure for designing, making and operating the built environment.&gt; We reimagine the design process from the Internet up: Speckle is an open source (MIT) initiative for developing an extensible Design &amp; AEC data communication and collaboration platform.## InstallationPySpeckle can be installed through `pip`:`pip install speckle`## DisclaimerThis code is WIP and as such should be used with caution, on non-sensitive projects.## DescriptionPySpeckle is a light Python wrapper / interface for the Speckle framework. It can be used independently through Python scripts, or as a base for building various plug-ins, such as [SpeckleBlender](https://github.com/speckleworks/SpeckleBlender). ## Quick StartHere is how you initialise a client, authenticate and start speckling:```pythonfrom speckle import SpeckleApiClient# Create a client using the appropriate serverclient = SpeckleApiClient('hestia.speckle.works')# Login with your detailsclient.login(    email='test@test.com',    password='Speckle&lt;3Python')# Stream ID to getstream_id = 'HjenwS2s'# Get stream data using its IDstream = client.streams.get(stream_id)# Print the list of placeholder objects in the streamfor object in stream.objects:  print(object)```To get a list of all available streams and find a particular one by name:```python# Fetch the list of all available streamsstreams = client.streams.list()name = &quot;JetStream&quot;# Go through the list and find the stream by namestream = Nonefor s in streams:    if s.name == name:        stream = s        break# If the stream is found, fetch the full stream data, using an optional query dict # to omit some dataif stream:    stream_data = client.streams.get(stream.streamId, {'omit':['layers','comments']})```To get object data from a stream:```pythonstream = client.streams.get(streamId)# Fetch a single object using its placeholder IDobject = client.objects.get(stream.objects[0].id)# Fetch the objects all at once using an optional query dictobjects = client.objects.get_bulk([o.id for o in stream.objects], {'omit':'base64','displayValue'})# Print out some object infofor o in objects:    print(&quot;Object {} is type {}&quot;.format(o.id, o.type)```To create some data and upload it to a stream:```pythonimport speckle.schemas# Create some mesh datavertices = [[0,0,0],[1,0,0],[1,1,0], [0,1,0]]faces = [[0,1,2,3]]# Create a Speckle Mesh objectsm = speckle.schemas.Mesh()# Add verticesfor v in vertices:    sm.vertices.extend(v)# Add facesfor f in faces:    if len(f) == 3: # if it is a triangle...        sm.faces.append(0)    elif len(f) == 4: # if it is a quad...        sm.faces.append(1)    sm.faces.extend(f)# Give it a nice namesm.name = &quot;FancyMesh&quot;# Create the object on the server and receive a list of# placeholders in return (with only one placeholder)placeholders = client.objects.create(sm)# Fetch the stream that we want to updatestream = client.streams.get(streamId)# Set the stream object list to the created object or# extend it to add the object to the existing liststream.objects = placeholders#stream.objects.extend(placeholders)# Update the stream with the new dataclient.streams.update(stream.streamId, stream)```Usage documentation can be found [here](https://pyspeckle.readthedocs.io/en/latest/).## MaintainersSpeckleBlender is written and maintained by [Tom Svilans](http://tomsvilans.com) ([Github](https://github.com/tsvilans)), [Izzy Lyseggen](https://github.com/izzylys) and [Antoine Dao](https://github.com/antoinedao).## NotesCommit formatting can be found [here](https://gist.github.com/brianclements/841ea7bffdb01346392c#type).</longdescription>
</pkgmetadata>