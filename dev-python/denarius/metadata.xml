<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>denarius========currency and other utilities    If you don't find a way to make money while you sleep, you will work    until you die. -- Warren Buffettintroduction============denarius is a project, not a finished product. It features variousutilities for collating cryptocurrency, mining, financial and otherdata, for plotting data and for accessing bank accounts. It featuresanalyses of data for systematic descriptions, for predictions, forarbitrage etc.setup=====.. code:: bash    sudo apt-get install sqlite    wget https://github.com/mozilla/geckodriver/releases/download/v0.19.1/geckodriver-v0.19.1-linux64.tar.gz    tar -xvzf geckodriver-v0.19.1-linux64.tar.gz    rm geckodriver-v0.19.1-linux64.tar.gz    chmod +x geckodriver    sudo cp geckodriver /usr/local/bin/    sudo pip2 install git+https://github.com/veox/python2-krakenex.git    sudo pip3 install git+https://github.com/veox/python3-krakenex.git    sudo pip install denarius --upgrade --process-dependency-linksBitcoin values==============.. figure:: media/2010_07_17--2017_01_20_Bitcoin_EUR.png   :alt: .. figure:: media/2016-12--2017-01_Bitcoin_EUR.png   :alt: The function ``ticker_Bitcoin`` returns data of the following form:.. code:: python    {'volume': 2050.1665002833397, 'last': 992.2553834529656, 'timestamp': 1487551580.0, 'bid': 991.8303740083114, 'vwap': 993.3415187004156, 'high': 1002.9278428409522, 'low': 981.3656970154892, 'ask': 992.2553834529656, 'open': 993.3887419720438}It accesses data from Bitstamp.+---------------+-----------------------------------------------+| **feature**   | **description**                               |+===============+===============================================+| last          | last Bitcoin price                            |+---------------+-----------------------------------------------+| high          | last 24 hours price high                      |+---------------+-----------------------------------------------+| low           | last 24 hours price low                       |+---------------+-----------------------------------------------+| vwap          | last 24 hours volume weighted average price   |+---------------+-----------------------------------------------+| volume        | last 24 hours volume                          |+---------------+-----------------------------------------------+| bid           | highest buy order                             |+---------------+-----------------------------------------------+| ask           | lowest sell order                             |+---------------+-----------------------------------------------+| timestamp     | UNIX timestamp date and time                  |+---------------+-----------------------------------------------+| open          | first price of the day                        |+---------------+-----------------------------------------------+The function ``data_historical_Bitcoin`` returns by default data of thefollowing form:.. code:: python    {'bpi': {'2017-02-17': 992.1077, '2017-02-16': 969.2414, '2017-02-15': 952.6512, '2017-02-14': 954.1432, '2017-02-13': 940.7982, '2017-02-12': 940.1764, '2017-02-11': 949.3397, '2017-02-10': 933.4325, '2017-02-19': 991.254, '2017-02-18': 997.0854}, 'time': {'updated': 'Feb 20, 2017 00:20:08 UTC', 'updatedISO': '2017-02-20T00:20:08+00:00'}, 'disclaimer': 'This data was produced from the CoinDesk Bitcoin Price Index. BPI value data returned as EUR.'}With the option ``return_list``, it returns data of the following form:.. code:: python    [['2017-02-10', 933.4325], ['2017-02-11', 949.3397], ['2017-02-12', 940.1764], ['2017-02-13', 940.7982], ['2017-02-14', 954.1432], ['2017-02-15', 952.6512], ['2017-02-16', 969.2414], ['2017-02-17', 992.1077], ['2017-02-18', 997.0854], ['2017-02-19', 991.254]]With the option ``return_UNIX_times``, it returns data of the followingform:.. code:: python    [[1486684800, 933.4325], [1486771200, 949.3397], [1486857600, 940.1764], [1486944000, 940.7982], [1487030400, 954.1432], [1487116800, 952.6512], [1487203200, 969.2414], [1487289600, 992.1077], [1487376000, 997.0854], [1487462400, 991.254]]LocalBitcoins=============LocalBitcoins data is available via its API. For example, the followingURL gives data on current trades in GBP available by national banktransfer:-  https://localbitcoins.com/buy-bitcoins-online/GB/united-kingdom/national-bank-transfer/.jsonThe data returned by the API is of a form `likethis &lt;data/2017-03-07T2249Z.txt&gt;`__.The function ``values_Bitcoin_LocalBitcoin`` returns the price valuesreturned by calling the API in this way... code:: python    import denarius    denarius.values_Bitcoin_LocalBitcoin()The script ``loop_save_LocalBitcoins_values_to_database.py`` looprecords LocalBitcoins data to database. To address closed gatewaysarising from repeat calls, the script could be used in a way like thefollowing:.. code:: bash    while true; do        loop_save_LocalBitcoins_values_to_database.py --timeperiod=3600        sleep 5400    doneThe script ``login_web_LocalBitcoins.py`` is available for a quick loginto LocalBitcoins using Selenium. It depends on the credentials file``~/.lbc`` existing and containing information of the following form:.. code:: python    username = &quot;xxxxxxxxxx&quot;    passcode = &quot;xxxxxxxxxx&quot;    secret   = &quot;xxxxxxxxxxxxxxxxxxxxxxxx&quot;databases=========A database of Bitcoin values can be saved in the following ways:.. code:: python    import denarius    denarius.save_database_Bitcoin(filename = &quot;database.db&quot;).. code:: python    import denarius    denarius.save_database_Bitcoin(filename = &quot;database_Bitcoin_EUR.db&quot;, currency = &quot;EUR&quot;)    denarius.save_database_Bitcoin(filename = &quot;database_Bitcoin_GBP.db&quot;, currency = &quot;GBP&quot;)graphs======The function ``save_graph_Bitcoin`` creates a graph of Bitcoinhistorical values over a specified time. The function``save_graph_LocalBitcoins`` creates a graph of LocalBitcoins Bitcoinlowest prices in GBP as recorded in a database by the script``loop_save_LocalBitcoins_values_to_database.py``.denarius\_graph\_Bitcoin------------------------The script ``denarius_graph_Bitcoin.py`` displays a PyQt GUI with agraph of the last Bitcoin values... code:: bash    denarius_graph_Bitcoin.py --help.. code:: bash    denarius_graph_Bitcoin.py.. code:: bash    denarius_graph_Bitcoin.py --currency=EUR --days=100.. figure:: media/denarius_graph_Bitcoin.png   :alt: LocalBitcoins-------------A graph can be generated of Bitcoin GBP value versus LocalBitcoins GBPlowest value:.. code:: bash    import denarius    denarius.save_graph_Bitcoin_LocalBitcoins().. figure:: media/Bitcoin_LocalBitcoins_lowest_price_GBP.png   :alt: A graph can be generated of Bitcoin GBP value versus LocalBitcoins GBPlowest 5 values:.. code:: bash    import denarius    denarius.save_graphs_Bitcoin_LocalBitcoins().. figure:: media/Bitcoin_LocalBitcoins_prices_GBP.png   :alt: A graph can be generated of LocalBitcoins normalized prices over days:.. figure:: media/LocalBitcoins_Bitcoin_lowest_price_GBP_days.png   :alt: A graph can be generated of LocalBitcoins normalized prices over weeks:.. figure:: media/LocalBitcoins_Bitcoin_lowest_price_GBP_weeks.png   :alt: A graph can be generated of LocalBitcoins non-normalized prices overweeks:.. figure:: media/LocalBitcoins_Bitcoin_lowest_price_GBP_weeks_not_normalized.png   :alt: Bollinger bands---------------.. figure:: media/LocalBitcoins_1_Bollinger_bands.png   :alt: KanoPool========KanoPool records for addresses can be recorded to CSV in a way like thefollowing:.. code:: bash    denarius_loop_save_KanoPool.py --help    denarius_loop_save_KanoPool.py --addresses=1Miner7R28PKcTRbEDwQt4ykMinunhTehs --interval=10The CSV data can be analysed using the Jupyter Notebook`KanoPool.ipynb &lt;https://github.com/wdbm/denarius/blob/master/KanoPool.ipynb&gt;`__.Nanopool========Nanopool records for addresses can be recorded to CSV in a way like thefollowing:.. code:: bash    denarius_loop_save_Nanopool.py --help    denarius_loop_save_Nanopool.py --addresses=0xbd3f1126d4c20f72a77e38dfda18622a6d663cd0The CSV fields are, in order, as follows:-  datetime-  account-  balance-  earnings\_per\_day\_BTC-  earnings\_per\_day\_ETH-  earnings\_per\_day\_EUR-  earnings\_per\_hour\_BTC-  earnings\_per\_hour\_ETH-  earnings\_per\_hour\_EUR-  earnings\_per\_minute\_BTC-  earnings\_per\_minute\_ETH-  earnings\_per\_minute\_EUR-  earnings\_per\_month\_BTC-  earnings\_per\_month\_ETH-  earnings\_per\_month\_EUR-  earnings\_per\_week\_BTC-  earnings\_per\_week\_ETH-  earnings\_per\_week\_EUR-  hashrate-  hashrate12hr-  hashrate1hr-  hashrate24hr-  hashrate3hr-  hashrate6hr-  hashrate\_pool-  pool\_miners-  pool\_workersSlush Pool==========Slush Pool records for an address can be recorded to CSV in a way likethe following:.. code:: bash    denarius_loop_save_SlushPool.py --help    denarius_loop_save_SlushPool.py --addresses=1Miner7R28PKcTRbEDwQt4ykMinunhTehs --interval=60 --alarm=11800000 --slushloginname=user --slushworkername=worker1The CSV fields are, in order, as follows:-  address-  hash rate-  shares-  UNIX timestamp-  unconfirmed reward in Bitcoin-  confirmed reward in Bitcoin-  total reward (confirmed + unconfirmed) in Bitcoin-  total payout since script launch in Bitcoin-  number of blocks found since script launchThe CSV data can be analysed using the Jupyter Notebook`SlushPool.ipynb &lt;https://github.com/wdbm/denarius/blob/master/SlushPool.ipynb&gt;`__.banks=====The banks module provides utilities for getting transactions of a bankaccount (Monzo, Starling or RBS) using the `MonzoAPI &lt;https://monzo.com/docs/&gt;`__, the `StarlingAPI &lt;https://developer.starlingbank.com/get-started&gt;`__ and the`Teller.io API &lt;https://teller.io/&gt;`__ (`background on Teller.io andStevieGraham &lt;https://www.wired.co.uk/article/stevie-graham-teller-open-banking-barclays-hsbc&gt;`__.To use this module, credentials files should be created.Access the `Monzo developers portal &lt;https://developers.monzo.com&gt;`__and create a new OAuth confidential client. Set the redirect URL for theclient to https://github.com/pawelad/pymonzo. Create a URL of thefollowing form using the client ID string:::    https://auth.getmondo.co.uk/?response_type=code&amp;redirect_uri=https://github.com/pawelad/pymonzo&amp;client_id=&lt;YOUR_CLIENT_ID&gt;Access this URL and authorize the client application. The confirmatione-mail sent contains a URL of the following form:::    https://github.com/pawelad/pymonzo?code=&lt;YOUR_AUTH_CODE&gt;&amp;state=Copy the authorization code from this URL and then access the URL toauthorize the client application.Launch an interactive Python session and, using the client credentialsand the ``pymonzo`` API interface, generate an access token and arefresh token... code:: python    client_id = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;    client_secret = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;    auth_code = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;    from pymonzo import MonzoAPI    monzo = MonzoAPI(        client_id     = client_id,        client_secret = client_secret,        auth_code     = auth_code    )This saves an authorization that lasts 48 hours to the file``~/.pymonzo-token``, which contains a dictionary of the following form:.. code:: python    {        &quot;access_token&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,        &quot;client_id&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,        &quot;client_secret&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,        &quot;expires_at&quot;: 1517106306.8881364,        &quot;expires_in&quot;: 172799,        &quot;refresh_token&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,        &quot;token_type&quot;: &quot;Bearer&quot;,        &quot;user_id&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;    }Now, API access can be tested by calling the ``monzopy`` Monzo APIinterface without any arguments (such that it loads tokens from the file``~/.pymonzo-token`` and manages token refreshes)... code:: python    from pymonzo import MonzoAPI    monzo = MonzoAPI()    print(monzo.accounts())    print(monzo.balance())    print(monzo.transactions())For Starling, the credentials file (by default ``~/.starling``) shouldbe created and its content should be a Starling personal access token.This is acquired by creating a Starling personal account, then creatinga Starling developers account, linking these accounts, and thengenerating a personal access token. More advanced access is possibleusing OAuth2.For RBS, the credentials file (by default ``~/.rbs``) should havecontent of the following form:.. code:: python    token_teller        = &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;    account_code_teller = &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;Pandas DataFrames of transactions can be retrieved in ways like thefollowing:.. code:: python    import denarius.banks    df = denarius.banks.transactions_DataFrame_Monzo()    df = denarius.banks.transactions_DataFrame_RBS()    df = denarius.banks.transactions_DataFrame_Starling()A payment can be searched for in ways like the following:.. code:: python    denarius.banks.payment_in_transactions_Monzo(reference = &quot;271828182&quot;, amount = 314)    denarius.banks.payment_in_transactions_RBS(reference = &quot;271828182&quot;, amount = 314)    denarius.banks.payment_in_transactions_Starling(reference = &quot;271828182&quot;, amount = 314)These functions search the &quot;counterparty\_reference&quot;, &quot;description&quot; and&quot;notes&quot; fields of a DataFrame of bank account transactions for aspecified reference. If the reference is found, the specified amount ofthe payment is compared to the sum of amounts found for the specifiedreference in the &quot;amount&quot; field. If a payer name is specified, it ischecked against the payer name of the transaction. They return adictionary of the following form:.. code:: python    {        &quot;reference_found&quot;:     bool,         # True if reference found        &quot;payer_name_match&quot;:    bool or None, # True if payer name matched, False if payer name not matched, None if no payer name to check        &quot;payer_name_observed&quot;: string,       # payer name observed        &quot;amount_correct&quot;:      bool,         # True if sum of amounts found is amount specified        &quot;valid&quot;:               bool,         # True if reference found and amount correct        &quot;transactions&quot;         DataFrame,    # DataFrame of matches        &quot;amount_difference&quot;:   float         # difference between amount specified and sum of amounts found    }So, these functions could be used in a straightforward boolean way tocheck if a payment has been made:.. code:: python    denarius.banks.payment_in_transactions_Monzo(reference = &quot;271828182&quot;, amount = 314)[&quot;valid&quot;]They also could be used in a more involved way to account for occasionsin which a payment is found but has an incorrect amount and a furtherpayment with the same reference must be requested.Both the ``transactions_DataFrame`` and ``payment_in_transactions``functions have the option ``print_table`` which can print to terminal atable of the transactions under consideration:.. code:: python    df = denarius.banks.transactions_DataFrame_Monzo(print_table = True)The script ``print_table_bank_account.py`` uses this functionality toprint to terminal a table of transactions from a specified bank.There is the function ``payment_in_transactions_bank`` which is awrapper for the more specialised functions like``payment_in_transactions_Monzo``. It takes a bank name as an argumentand uses the appropriate functionality for the bank specified.Kraken======The Kraken module provides utilities for getting current balances ofcurrencies held, buying Bitcoin for Euros at the last market price, andsending Bitcoin from Kraken to an address, the key for which has beenverified on Kraken. The scripts ``print_Kraken_balances.py``,``print_Kraken_last_price_BTC_EUR.py`` and``buy_BTC_for_EUR_last_price_on_Kraken.py`` all use thesefunctionalities.The Kraken module depends on the credentials file ``~/.kraken`` existingand containing the key on the first line and the secret on the secondline.Bitcoin can be sent from Kraken to an address key in a way like thefollowing:.. code:: python    import denarius.Kraken    denarius.Kraken.start_API()    print(denarius.Kraken.send_XBT(amount = 0.1, address_key = &quot;BIGMONEY&quot;))The script ``login_web_Kraken.py`` is available for a quick login toKraken using Selenium. It depends on the credentials file``~/.kraken_credentials`` existing and containing information of thefollowing form:.. code:: python    username = &quot;xxxxxxxxxx&quot;    passcode = &quot;xxxxxxxxxx&quot;    secret   = &quot;xxxxxxxxxxxxxxxxxxxxxxxx&quot;RBS===The RBS module provides utilities for getting the balance and recenttransactions of an RBS account using the RBS banking web interface,Selenium and Firefox. For convenience, account details can be stored ina credentials file, which is assumed by default to be ``~/.rbs``. Theaccount code is an alphanumeric code extracted from the web interface.The content of a credentials file is of the following form, which isPython code:.. code:: python    customer_number = &quot;XXXXXXXXXX&quot;    PIN             = &quot;XXXXXX&quot;    passcode        = &quot;XXXXXXXXXXXXXXXXXXXX&quot;    account_code    = &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;A dictionary of the current balance and a pandas DataFrame of recenttransactions is returned by the function ``RBS.account_status``... code:: python    import denarius.RBS    status  = RBS.account_status()    balance = status[&quot;balance&quot;]    df      = status[&quot;transactions&quot;]The DataFrame features the fields ``date``, ``description`` and``amount``. A transaction containing a certain reference or descriptioncould be selected in the following way:.. code:: python    df[df[&quot;description&quot;].str.contains(&quot;transaction reference 123&quot;)]The existence of a transaction can be tested in a way like thefollowing:.. code:: python    if df[df[&quot;description&quot;].str.contains(&quot;transaction reference 123&quot;)].values.any():        print(&quot;transaction found&quot;)    else:        print(&quot;transaction not found&quot;)The script ``get_account_balance_RBS.py`` is available to open an RBSaccount web interface and to display the current balance and recenttransactions in the terminal, optionally in a loop... code:: bash    get_account_balance_RBS.py --loopThe script ``detect_transaction_RBS.py`` is available to search for atransaction or transactions with a specified reference... code:: bash    detect_transaction_RBS.py --reference=123The script ``loop_save_RBS_to_CSV.py`` is available to loop save RBStransactions and balance to CSV, merging with recorded CSV data to avoidrecording duplicates.Santander=========The Santander module provides utilities for getting recent transactionsusing the Santander banking web interface, Selenium and Firefox. Accountdetails are stored in a credentials file, which is assumed by default tobe ``~/.santander``. The content of a credentials file is of thefollowing form, which is Python code:.. code:: python    customer_number          = &quot;XXXXXXXX&quot;    customer_PIN             = &quot;XXXXX&quot;    security_question_answer = &quot;XXXXXXXX&quot;A DataFrame of recent transactions is returned by the function``Santander.transactions_DataFrame``. The script``loop_save_Santander_to_CSV.py`` saves transactions to CSV in acontinuous loop. The function ``Santander.payment_in_transactions_CSV``can search in transactions recorded in CSV for a specified transactionreference together with a specified value and returns a boolean toindicate whether the transaction was detected.arbitrage=========-  `denarius.arbitrage &lt;denarius.arbitrage.ipynb&gt;`__The script ``denarius_loop_append_arbitrage_DataFrames_to_CSV.py``records data for arbitrage between Kraken and LocalBitcoins UK. Thescript ``denarius_display_arbitrage.py`` displays recorded data andcurrent prices for arbitrage between Kraken and LocalBitcoins UK... figure:: media/denarius_display_arbitrage.png   :alt: The old script ``loop_save_arbitrage_data_Kraken_LocalBitcoins_UK.py``records data for arbitrage between Kraken and LocalBitcoins UK. The oldscript ``loop_display_arbitrage_data.py`` displays recorded data andcurrent prices for arbitrage between Kraken and LocalBitcoins UK... figure:: media/loop_display_arbitrage_data.png   :alt: paper wallets for Bitcoin, QR codes of keys===========================================The script ``create_QR_codes_of_public_and_private_keys.py`` creates aQR code for a specified public key and private key and enables optionalspecification of the size of the resulting PNG images. It loads the keysfrom a Python file (``keys.py`` by default) which defines the stringvariables ``key_public`` and ``key_private``.The script ``create_paper_wallet.py`` creates a QR code for a specifiedpublic key and private key. It then creates an image of a Bitcoin paperwallet. It loads the keys from a Python file (``keys.py`` by default)which defines the string variables ``key_public`` and ``key_private``... figure:: media/paper_wallet.png   :alt: Faster Payments Service=======================-  `2018-01-14   participants &lt;http://www.fasterpayments.org.uk/about-us/current-participants&gt;`__-  Barclays-  Citi-  Clear Bank-  Clydesdale Bank-  The Co-operative Bank-  HSBC-  Lloyds Bank-  Metro Bank-  Monzo-  Nationwide-  NatWest-  Northern Bank-  Raphaels Bank-  Royal Bank of Scotland-  Santander-  Starling Bank-  Turkish Bank UKSEPA Instant============-  `2018-01-14   participants &lt;https://www.europeanpaymentscouncil.eu/sites/default/files/participants_export/sepa_instant_credit_transfer/sepa_instant_credit_transfer.pdf?v=1515763349&gt;`__-  Austria-  Belgium-  Bulgaria-  Estonia-  France-  Germany-  Italy-  Latvia-  Lithuania-  Malta-  Netherlands-  Spain</longdescription>
</pkgmetadata>