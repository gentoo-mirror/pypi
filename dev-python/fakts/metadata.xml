<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fakts[![codecov](https://codecov.io/gh/jhnnsrs/fakts/branch/master/graph/badge.svg?token=UGXEA2THBV)](https://codecov.io/gh/jhnnsrs/fakts)[![PyPI version](https://badge.fury.io/py/fakts.svg)](https://pypi.org/project/fakts/)[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://pypi.org/project/fakts/)![Maintainer](https://img.shields.io/badge/maintainer-jhnnsrs-blue)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/fakts.svg)](https://pypi.python.org/pypi/fakts/)[![PyPI status](https://img.shields.io/pypi/status/fakts.svg)](https://pypi.python.org/pypi/fakts/)[![PyPI download day](https://img.shields.io/pypi/dm/fakts.svg)](https://pypi.python.org/pypi/fakts/)### DEVELOPMENT## InspirationFakts was designed to make configuration of apps compatible with concurrency pattern, it is designed to allowfor asynchronous retrieval of configuration from various sources, may it be a config file, environmental variablesor a remote server.# Core DesignFakts uses Grants to obtain configuration asynchronously, a grant is a way of retrieving the configuration from aspecific source. It can be a local config file (eg. yaml, toml, json), environemnt variables, a remote configuration (eg. from a fakts server), a database.The fakts class then wraps the grant to ensure both a sychronous and asychronous interface that is threadsafe.Grants are designed to be composable through MetaGrants so by desigining a specifc grant structure, one canhighly customize the retrieval logic. Please check out the# Example:```pythonasync with Fakts(grant=YamlGrant(&quot;config.yaml&quot;)) as fakts:    config = await fakts.aget(&quot;group_name&quot;)```or```pythonwith Fakts(grant=YamlGrant(&quot;config.yaml&quot;)) as fakts:    config = fakts.get(&quot;group_name&quot;)```Fakts should be used as a context manager, and will set the current fakts context variable to itself, lettingyou access the current fakts instance from anywhere in your code (async or sync) without specifically passing a referece.To understand how the async sync code access work, please check out the documentation for koil.# ComposabilityYou can compose grants through meta grants in order to load configuration from multiple sources (eg. a local, filethat can be overwritten by a remote configuration, or some envionment variables).Example:```pythonasync with Fakts(grant=FailsafeGrant(    grants=[        EnvGrant(),        YamlGrant(&quot;config.yaml&quot;)    ])) as fakts:    config = await fakts.get(&quot;group_name&quot;)```In this example fakts will load the configuration from the environment variables first, and if that fails,it will load it from the yaml file.## Special Use Case: Dynamic Server RelationsFakts provides the remote grant protocol for retrieval of configuration in dynamic client-server relationships.With these grants you provide a software manifest for a configuration server (fakts-server), that then grantsthe configuration (either through user approval (similar to device code grant)). These grants are mainly usedto setup or claim an oauth2 application on the backend securely that then can be used to identify the application in thefuture. These grants are at the moment highly specific to the arkitekt platform and subject to change.# Sister packagesThese packages provide contrib modules to support autoconfiguration through a fakts instance- herre: oauth2 client- rath: graphql client (typed through turms)</longdescription>
</pkgmetadata>