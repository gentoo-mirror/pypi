<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://raw.githubusercontent.com/KotlinIsland/basedmypy/master/docs/static/logo-light.pngBasedmypy is a type checker that is built on top of the work done by the`mypy project &lt;https://github.com/python/mypy&gt;`_. It adds based functionality and breaks compatibility withthe cringe parts of pep 484.Based features==============Baseline--------Basedmypy has baseline, baseline is based! It allows you to adopt new strictness or featureswithout the burden of fixing up every usage, just save all current errors to the baselinefile and deal with them later.Consider the following:.. code-block:: python    def foo(a):        print(a).. code-block:: text    &gt; mypy demo.py    demo.py:1: error: missing typehints    Failed: errors found in source file    &gt; mypy --write-baseline demo.py    demo.py:1: error: missing typehints    Baseline successfully written to .mypy/baseline.json    &gt; mypy demo.py    Success: no issues found in 1 source fileThen on subsequent runs the existing errors will be filtered out:.. code-block:: python    def foo(a):        print(a)    def bar(b: str, c: int) -&gt; bool:        return b + c.. code-block:: text    &gt; mypy demo.py    demo.py:4:5: error: Returning Any from function declared to return &quot;bool&quot;  [no-any-return]    demo.py:4:16: error: Unsupported operand types for + (&quot;str&quot; and &quot;int&quot;)  [operator]    Found 2 errors in 1 file (checked 1 source file)Intersection Types------------------Using the ``&amp;`` operator or ``basedtyping.Intersection`` you can denote intersection types:.. code-block:: python    class Growable(ABC, Generic[T]):        @abstractmethod        def add(self, item: T): ...    class Resettable(ABC):        @abstractmethod        def reset(self): ...    def f(x: Resettable &amp; Growable[str]):        x.reset()        x.add(&quot;first&quot;)Type Joins----------Mypy joins types to their common base type:.. code-block:: python    a: int    b: str    reveal_type(a if bool() else b)  # Revealed type is &quot;builtins.object&quot;Basedmypy joins types into unions instead:.. code-block:: python    a: int    b: str    reveal_type(a if bool() else b)  # Revealed type is &quot;int | str&quot;Bare Literals-------------``Literal`` is so cumbersome! just use a bare literal instead:.. code-block:: python    class Color(Enum):        RED = auto()    a: 1 | 2    b: True | Color.REDDefault Return Type-------------------The default return type of functions is ``None`` instead of ``Any``:(configurable with the ``default_return`` option.).. code-block:: python    def f(name: str):        print(f&quot;Hello, {name}!&quot;)    reveal_type(f)  # (str) -&gt; NoneGeneric ``TypeVar`` Bounds--------------------------Allows the bounds of ``TypeVar``\s to be generic.So you are able to have functions with polymorphic generic parameters... code-block:: python    E = TypeVar(&quot;E&quot;)    I = TypeVar(&quot;I&quot;, bound=Iterable[E])    def foo(i: I, e: E) -&gt; I:        assert e not in i        return i    reveal_type(foo([&quot;based&quot;], &quot;mypy&quot;))  # N: Revealed type is &quot;list[str]&quot;    reveal_type(foo({1, 2}, 3))  # N: Revealed type is &quot;set[int]&quot;Overload Implementation Inference---------------------------------The types in overload implementations (including properties) can be inferred:.. code-block:: python    @overload    def f(a: int) -&gt; str: ...    @overload    def f(a: str) -&gt; int: ...    def f(a):        reveal_type(a)  # int | str        return None  # error: expected str | int    class A:        @property        def foo(self) -&gt; int: ...        @foo.setter        def foo(self, value): ...  # no need for annotationsInfer Function Parameters-------------------------Infer the type of a function parameter from it's default value:.. code-block:: python    def f(a=1, b=True):        reveal_type((a, b))  # (int, bool)Tuple Literal Types-------------------Basedmypy allows denotation of tuple types with tuple literals:.. code-block:: python    a: (int, str) = (1, &quot;a&quot;)Types in Messages-----------------Basedmypy makes significant changes to error and info messages, consider:.. code-block:: python    T = TypeVar(&quot;T&quot;, bound=int)    def f(a: T, b: list[str | 1 | 2]) -&gt; Never:        reveal_type((a, b))    reveal_type(f)Mypy shows::    Revealed type is &quot;Tuple[T`-1, Union[builtins.str, Literal[1], Literal[2]]]&quot;    Revealed type is &quot;def [T &lt;: builtins.int] (a: T`-1, b: Union[builtins.str, Literal[1], Literal[2]]) -&gt; &lt;nothing&gt;&quot;Basedmypy shows::    Revealed type is &quot;(T@f, str | 1 | 2)&quot;    Revealed type is &quot;def [T: int] (a: T, b: str | 1 | 2) -&gt; Never&quot;</longdescription>
</pkgmetadata>