<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TDengine Connector for Python[![codecov](https://codecov.io/gh/taosdata/taos-connector-python/branch/main/graph/badge.svg?token=BDANN3DBXS)](https://codecov.io/gh/taosdata/taos-connector-python)[TDengine](https://github.com/taosdata/TDengine) connector for Python enables python programs to access TDengine, using an API which is compliant with the Python DB API 2.0 (PEP-249). It contains two modules:1. The `taos` module. It uses TDengine C client library for client server communications.2. The `taosrest` module. It wraps TDengine RESTful API to Python DB API 2.0 (PEP-249). With this module, you are free to install TDengine C client library.## Install taospyYou can use `pip` to install the connector from PyPI:```bashpip install taospy```Or with git url:```bashpip install git+https://github.com/taosdata/taos-connector-python.git```Note: taospy v2.7.2 requirs Python 3.6+. The early versions of taospy from v2.5.0 to v2.7.1 require Python 3.7+.## Source Code[TDengine](https://github.com/taosdata/TDengine) connector for Python source code is hosted on [GitHub](https://github.com/taosdata/taos-connector-python).## Install taos-ws-py### Install with taospy```bashpip install taospy[ws]```### Install taos-ws-py only```bashpip install taos-ws-py```Note: The taosws module is provided by taos-ws-py package separately from v2.7.2. It is part of early version of taospy. taos-ws-py requires Python 3.7+.### Query with PEP-249 API using `taosws````pythonimport taosws# all parameters are optionalconn = taosws.connect(&quot;taosws://root:taosdata@localhost:6041&quot;)cursor = conn.cursor()cursor.execute(&quot;show databases&quot;)results: list[tuple] = cursor.fetchall()for row in results:    print(row)```You can pass an optional req_id in the parameters.```pythonimport taosws# all parameters are optionalconn = taosws.connect(&quot;taosws://root:taosdata@localhost:6041&quot;)cursor = conn.cursor()cursor.execute(&quot;show databases&quot;, req_id=1)results: list[tuple] = cursor.fetchall()for row in results:    print(row)```### Query with query method using `taosws````pythonfrom taosws import *conn = connect(&quot;taosws://root:taosdata@localhost:6041&quot;)result = conn.query(&quot;show databases&quot;)num_of_fields = result.field_countfor field in result.fields:    print(field)for row in result:    print(row)```You can pass an optional req_id in the parameters.```pythonfrom taosws import *conn = connect(&quot;taosws://root:taosdata@localhost:6041&quot;)result = conn.query(&quot;show databases&quot;, req_id=1)num_of_fields = result.field_countfor field in result.fields:    print(field)for row in result:    print(row)```### Read with Pandas using `taosws`#### Method one```pythonimport pandasimport taoswsconn = taosws.connect(&quot;taosws://root:taosdata@localhost:6041&quot;)df: pandas.DataFrame = pandas.read_sql(&quot;show databases&quot;, conn)df```#### Method Two```pythonimport pandasfrom sqlalchemy import create_engineengine = create_engine(&quot;taosws://root:taosdata@localhost:6041&quot;)df: pandas.DataFrame = pandas.read_sql(&quot;show databases&quot;, engine)df```## Examples for `taosrest` Module### Query with PEP-249 API```pythonimport taosrest# all parameters are optionalconn = taosrest.connect(url=&quot;http://localhost:6041&quot;,                        user=&quot;root&quot;,                        password=&quot;taosdata&quot;)cursor = conn.cursor()cursor.execute(&quot;show databases&quot;)results: list[tuple] = cursor.fetchall()for row in results:    print(row)```You can pass an optional req_id in the parameters.```pythonimport taosrest# all parameters are optionalconn = taosrest.connect(url=&quot;http://localhost:6041&quot;,                        user=&quot;root&quot;,                        password=&quot;taosdata&quot;)cursor = conn.cursor()cursor.execute(&quot;show databases&quot;, req_id=1)results: list[tuple] = cursor.fetchall()for row in results:    print(row)```### Query with query method```pythonfrom taosrest import connect, TaosRestConnection, Resultconn: TaosRestConnection = connect()result: Result = conn.query(&quot;show databases&quot;)num_of_fields = result.field_countfor field in result.fields:    print(field)for row in result:    print(row)```You can pass an optional req_id in the parameters.```pythonfrom taosrest import connect, TaosRestConnection, Resultconn: TaosRestConnection = connect()result: Result = conn.query(&quot;show databases&quot;, req_id=1)num_of_fields = result.field_countfor field in result.fields:    print(field)for row in result:    print(row)```### Read with Pandas#### Method one```pythonimport pandasimport taosconn = taos.connect()df: pandas.DataFrame = pandas.read_sql(&quot;select * from log.logs&quot;, conn)```#### Method two```pythonimport pandasimport taosrestconn = taosrest.connect()df: pandas.DataFrame = pandas.read_sql(&quot;select * from log.logs&quot;, conn)```#### Method three```pythonimport pandasfrom sqlalchemy import create_engineengine = create_engine(&quot;taosrest://root:taosdata@localhost:6041&quot;)df: pandas.DataFrame = pandas.read_sql(&quot;select * from log.logs&quot;, engine)```## Examples for `taos` Module### Connect optionsSupported config options:- **config**: TDengine client configuration directory, by default use &quot;/etc/taos/&quot;.- **host**: TDengine server host, by default use &quot;localhost&quot;.- **user**: TDengine user name, default is &quot;root&quot;.- **password**: TDengine user password, default is &quot;taosdata&quot;.- **database**: Default connection database name, empty if not set.- **timezone**: Timezone for timestamp type (which is `datetime` object with tzinfo in python) no matter what the host's timezone is.```pythonimport taos# 1. with empty options, connect TDengine by default options#   that means:#     - use /etc/taos/taos.cfg as default configuration file#     - use &quot;localhost&quot; if not set in config file#     - use &quot;root&quot; as default username#     - use &quot;taosdata&quot; as default password#     - use 6030 as default port if not set in config file#     - use local timezone datetime as timestampconn = taos.connect()# 2. with full set options, default db: log, use UTC datetime.conn = taos.connect(host='localhost',                    user='root',                    password='taosdata',                    database='log',                    config='/etc/taos',                    timezone='UTC')```Note that, the datetime formatted string will contain timezone information when timezone set. For example:```python# without timezone(local timezone depends on your machine)'1969-12-31 16:00:00'# with timezone UTC'1969-12-31 16:00:00+00:00'```### Query with PEP-249 API```pythonimport taosconn = taos.connect()cursor = conn.cursor()cursor.execute(&quot;show databases&quot;)results = cursor.fetchall()for row in results:    print(row)cursor.close()conn.close()```You can pass an optional req_id in the parameters.```pythonimport taosconn = taos.connect()cursor = conn.cursor()cursor.execute(&quot;show databases&quot;, req_id=1)results = cursor.fetchall()for row in results:    print(row)cursor.close()conn.close()```### Query with objective API```pythonimport taosconn = taos.connect()conn.execute(&quot;create database if not exists pytest&quot;)result = conn.query(&quot;show databases&quot;)num_of_fields = result.field_countfor field in result.fields:    print(field)for row in result:    print(row)result.close()conn.execute(&quot;drop database pytest&quot;)conn.close()```You can pass an optional req_id in the parameters.```pythonimport taosconn = taos.connect()conn.execute(&quot;create database if not exists pytest&quot;, req_id=1)result = conn.query(&quot;show databases&quot;)num_of_fields = result.field_countfor field in result.fields:    print(field)for row in result:    print(row)result.close()conn.execute(&quot;drop database pytest&quot;)conn.close()```### Query with async API```pythonfrom taos import *from ctypes import *import timedef fetch_callback(p_param, p_result, num_of_rows):    print(&quot;fetched &quot;, num_of_rows, &quot;rows&quot;)    p = cast(p_param, POINTER(Counter))    result = TaosResult(p_result)    if num_of_rows == 0:        print(&quot;fetching completed&quot;)        p.contents.done = True        result.close()        return    if num_of_rows &lt; 0:        p.contents.done = True        result.check_error(num_of_rows)        result.close()        return None    for row in result.rows_iter(num_of_rows):        # print(row)        pass    p.contents.count += result.row_count    result.fetch_rows_a(fetch_callback, p_param)def query_callback(p_param, p_result, code):    # type: (c_void_p, c_void_p, c_int) -&gt; None    if p_result is None:        return    result = TaosResult(p_result)    if code == 0:        result.fetch_rows_a(fetch_callback, p_param)    result.check_error(code)class Counter(Structure):    _fields_ = [(&quot;count&quot;, c_int), (&quot;done&quot;, c_bool)]    def __str__(self):        return &quot;{ count: %d, done: %s }&quot; % (self.count, self.done)def test_query(conn):    # type: (TaosConnection) -&gt; None    counter = Counter(count=0)    conn.query_a(&quot;select * from log.log&quot;, query_callback, byref(counter))    while not counter.done:        print(&quot;wait query callback&quot;)        time.sleep(1)    print(counter)    conn.close()if __name__ == &quot;__main__&quot;:    test_query(connect())```You can pass an optional req_id in the parameters.```pythonfrom taos import *from ctypes import *import timedef fetch_callback(p_param, p_result, num_of_rows):    print(&quot;fetched &quot;, num_of_rows, &quot;rows&quot;)    p = cast(p_param, POINTER(Counter))    result = TaosResult(p_result)    if num_of_rows == 0:        print(&quot;fetching completed&quot;)        p.contents.done = True        result.close()        return    if num_of_rows &lt; 0:        p.contents.done = True        result.check_error(num_of_rows)        result.close()        return None    for row in result.rows_iter(num_of_rows):        # print(row)        pass    p.contents.count += result.row_count    result.fetch_rows_a(fetch_callback, p_param)def query_callback(p_param, p_result, code):    # type: (c_void_p, c_void_p, c_int) -&gt; None    if p_result is None:        return    result = TaosResult(p_result)    if code == 0:        result.fetch_rows_a(fetch_callback, p_param)    result.check_error(code)class Counter(Structure):    _fields_ = [(&quot;count&quot;, c_int), (&quot;done&quot;, c_bool)]    def __str__(self):        return &quot;{ count: %d, done: %s }&quot; % (self.count, self.done)def test_query(conn):    # type: (TaosConnection) -&gt; None    counter = Counter(count=0)    conn.query_a(&quot;select * from log.log&quot;, query_callback, byref(counter), req_id=1)    while not counter.done:        print(&quot;wait query callback&quot;)        time.sleep(1)    print(counter)    conn.close()if __name__ == &quot;__main__&quot;:    test_query(connect())```### Statement API - Bind row after row```pythonfrom taos import *conn = connect()dbname = &quot;pytest_taos_stmt&quot;conn.execute(&quot;drop database if exists %s&quot; % dbname)conn.execute(&quot;create database if not exists %s&quot; % dbname)conn.select_db(dbname)conn.execute(    &quot;create table if not exists log(ts timestamp, bo bool, nil tinyint, \        ti tinyint, si smallint, ii int, bi bigint, tu tinyint unsigned, \        su smallint unsigned, iu int unsigned, bu bigint unsigned, \        ff float, dd double, bb binary(100), nn nchar(100), tt timestamp)&quot;,)stmt = conn.statement(&quot;insert into log values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;)params = new_bind_params(16)params[0].timestamp(1626861392589)params[1].bool(True)params[2].tinyint(None)params[3].tinyint(2)params[4].smallint(3)params[5].int(4)params[6].bigint(5)params[7].tinyint_unsigned(6)params[8].smallint_unsigned(7)params[9].int_unsigned(8)params[10].bigint_unsigned(9)params[11].float(10.1)params[12].double(10.11)params[13].binary(&quot;hello&quot;)params[14].nchar(&quot;stmt&quot;)params[15].timestamp(1626861392589)stmt.bind_param(params)params[0].timestamp(1626861392590)params[15].timestamp(None)stmt.bind_param(params)stmt.execute()assert stmt.affected_rows == 2result = conn.query(&quot;select * from log&quot;)for row in result:    print(row)```### Statement API - Bind multi rows```pythonfrom taos import *conn = connect()dbname = &quot;pytest_taos_stmt&quot;conn.execute(&quot;drop database if exists %s&quot; % dbname)conn.execute(&quot;create database if not exists %s&quot; % dbname)conn.select_db(dbname)conn.execute(    &quot;create table if not exists log(ts timestamp, bo bool, nil tinyint, \        ti tinyint, si smallint, ii int, bi bigint, tu tinyint unsigned, \        su smallint unsigned, iu int unsigned, bu bigint unsigned, \        ff float, dd double, bb binary(100), nn nchar(100), tt timestamp)&quot;,)stmt = conn.statement(&quot;insert into log values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;)params = new_multi_binds(16)params[0].timestamp((1626861392589, 1626861392590, 1626861392591))params[1].bool((True, None, False))params[2].tinyint([-128, -128, None])  # -128 is tinyint nullparams[3].tinyint([0, 127, None])params[4].smallint([3, None, 2])params[5].int([3, 4, None])params[6].bigint([3, 4, None])params[7].tinyint_unsigned([3, 4, None])params[8].smallint_unsigned([3, 4, None])params[9].int_unsigned([3, 4, None])params[10].bigint_unsigned([3, 4, None])params[11].float([3, None, 1])params[12].double([3, None, 1.2])params[13].binary([&quot;abc&quot;, &quot;dddafadfadfadfadfa&quot;, None])params[14].nchar([&quot;涛思数据&quot;, None, &quot;a long string with 中文字符&quot;])params[15].timestamp([None, None, 1626861392591])stmt.bind_param_batch(params)stmt.execute()assert stmt.affected_rows == 3result = conn.query(&quot;select * from log&quot;)for row in result:    print(row)```### Subscription```pythonimport taosimport randomconn = taos.connect()dbname = &quot;pytest_taos_subscribe&quot;conn.execute(&quot;drop database if exists %s&quot; % dbname)conn.execute(&quot;create database if not exists %s&quot; % dbname)conn.select_db(dbname)conn.execute(&quot;create table if not exists log(ts timestamp, n int)&quot;)for i in range(10):    conn.execute(&quot;insert into log values(now, %d)&quot; % i)sub = conn.subscribe(False, &quot;test&quot;, &quot;select * from log&quot;, 1000)print(&quot;# consume from begin&quot;)for ts, n in sub.consume():    print(ts, n)print(&quot;# consume new data&quot;)for i in range(5):    conn.execute(&quot;insert into log values(now, %d)(now+1s, %d)&quot; % (i, i))    result = sub.consume()    for ts, n in result:        print(ts, n)sub.close(True)print(&quot;# keep progress consume&quot;)sub = conn.subscribe(False, &quot;test&quot;, &quot;select * from log&quot;, 1000)result = sub.consume()rows = result.fetch_all()# consume from latest subscription needs root privilege(for /var/lib/taos).assert result.row_count == 0print(&quot;## consumed &quot;, len(rows), &quot;rows&quot;)print(&quot;# consume with a stop condition&quot;)for i in range(10):    conn.execute(&quot;insert into log values(now, %d)&quot; % random.randint(0, 10))    result = sub.consume()    try:        ts, n = next(result)        print(ts, n)        if n &gt; 5:            result.stop_query()            print(&quot;## stopped&quot;)            break    except StopIteration:        continuesub.close()# sub.close()conn.execute(&quot;drop database if exists %s&quot; % dbname)# conn.close()```### Subscription asynchronously with callback```pythonfrom taos import *from ctypes import *import timedef subscribe_callback(p_sub, p_result, p_param, errno):    # type: (c_void_p, c_void_p, c_void_p, c_int) -&gt; None    print(&quot;# fetch in callback&quot;)    result = TaosResult(c_void_p(p_result))    result.check_error(errno)    for row in result.rows_iter():        ts, n = row()        print(ts, n)def test_subscribe_callback(conn):    # type: (TaosConnection) -&gt; None    dbname = &quot;pytest_taos_subscribe_callback&quot;    try:        print(&quot;drop if exists&quot;)        conn.execute(&quot;drop database if exists %s&quot; % dbname)        print(&quot;create database&quot;)        conn.execute(&quot;create database if not exists %s&quot; % dbname)        print(&quot;create table&quot;)        # conn.execute(&quot;use %s&quot; % dbname)        conn.execute(&quot;create table if not exists %s.log(ts timestamp, n int)&quot; % dbname)        print(&quot;# subscribe with callback&quot;)        sub = conn.subscribe(False, &quot;test&quot;, &quot;select * from %s.log&quot; % dbname, 1000, subscribe_callback)        for i in range(10):            conn.execute(&quot;insert into %s.log values(now, %d)&quot; % (dbname, i))            time.sleep(0.7)        sub.close()        conn.execute(&quot;drop database if exists %s&quot; % dbname)        # conn.close()    except Exception as err:        conn.execute(&quot;drop database if exists %s&quot; % dbname)        # conn.close()        raise errif __name__ == &quot;__main__&quot;:    test_subscribe_callback(connect())```### Insert with line protocol```pythonimport taosfrom taos import SmlProtocol, SmlPrecisionconn = taos.connect()dbname = &quot;pytest_line&quot;conn.execute(&quot;drop database if exists %s&quot; % dbname)conn.execute(&quot;create database if not exists %s precision 'us'&quot; % dbname)conn.select_db(dbname)lines = [    'st,t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;pass&quot;,c2=false,c4=4f64 1626006833639000000',]conn.schemaless_insert(lines, taos.SmlProtocol.LINE_PROTOCOL, taos.SmlPrecision.NOT_CONFIGURED)print(&quot;inserted&quot;)conn.schemaless_insert(lines, taos.SmlProtocol.LINE_PROTOCOL, taos.SmlPrecision.NOT_CONFIGURED)result = conn.query(&quot;show tables&quot;)for row in result:    print(row)conn.execute(&quot;drop database if exists %s&quot; % dbname)```You can pass an optional req_id in the parameters.```pythonimport taosfrom taos import SmlProtocol, SmlPrecisionconn = taos.connect()dbname = &quot;pytest_line&quot;conn.execute(&quot;drop database if exists %s&quot; % dbname)conn.execute(&quot;create database if not exists %s precision 'us'&quot; % dbname)conn.select_db(dbname)lines = [    'st,t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;pass&quot;,c2=false,c4=4f64 1626006833639000000',]conn.schemaless_insert(lines, taos.SmlProtocol.LINE_PROTOCOL, taos.SmlPrecision.NOT_CONFIGURED, req_id=1)print(&quot;inserted&quot;)conn.schemaless_insert(lines, taos.SmlProtocol.LINE_PROTOCOL, taos.SmlPrecision.NOT_CONFIGURED, req_id=2)result = conn.query(&quot;show tables&quot;)for row in result:    print(row)conn.execute(&quot;drop database if exists %s&quot; % dbname)```Insert with schemaless raw data.```pythonimport taosfrom taos import utilsfrom taos import TaosConnectionfrom taos.cinterface import *from taos.error import OperationalError, SchemalessErrorconn = taos.connect()dbname = &quot;taos_schemaless_insert&quot;try:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    if taos.IS_V3:        conn.execute(&quot;create database if not exists %s schemaless 1 precision 'ns'&quot; % dbname)    else:        conn.execute(&quot;create database if not exists %s update 2 precision 'ns'&quot; % dbname)    conn.select_db(dbname)    lines = '''st,t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;passit&quot;,c2=false,c4=4f64 1626006833639000000    st,t1=4i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin, abc&quot;,c2=true,c4=5f64,c5=5f64,c6=7u64 1626006933640000000    stf,t1=4i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin_stf&quot;,c2=false,c5=5f64,c6=7u64 1626006933641000000'''    res = conn.schemaless_insert_raw(lines, 1, 0)    print(&quot;affected rows: &quot;, res)    assert (res == 3)    lines = '''stf,t1=5i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin_stf&quot;,c2=false,c5=5f64,c6=7u64 1626006933641000000'''    res = conn.schemaless_insert_raw(lines, 1, 0)    print(&quot;affected rows: &quot;, res)    assert (res == 1)    result = conn.query(&quot;select * from st&quot;)    dict2 = result.fetch_all_into_dict()    print(dict2)    print(result.row_count)    all = result.rows_iter()    for row in all:        print(row)    result.close()    assert (result.row_count == 2)    # error test    lines = ''',t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;passit&quot;,c2=false,c4=4f64 1626006833639000000'''    try:        res = conn.schemaless_insert_raw(lines, 1, 0)        print(res)        # assert(False)    except SchemalessError as err:        print('**** error: ', err)        # assert (err.msg == 'Invalid data format')    result = conn.query(&quot;select * from st&quot;)    print(result.row_count)    all = result.rows_iter()    for row in all:        print(row)    result.close()    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()except InterfaceError as err:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()    print(err)except SchemalessError as err:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()    print(err)except Exception as err:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()    print(err)    raise err```Pass optional ttl in the parameters.```pythonimport taosfrom taos import utilsfrom taos import TaosConnectionfrom taos.cinterface import *from taos.error import OperationalError, SchemalessErrorconn = taos.connect()dbname = &quot;taos_schemaless_insert&quot;try:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    if taos.IS_V3:        conn.execute(&quot;create database if not exists %s schemaless 1 precision 'ns'&quot; % dbname)    else:        conn.execute(&quot;create database if not exists %s update 2 precision 'ns'&quot; % dbname)    conn.select_db(dbname)    lines = '''st,t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;passit&quot;,c2=false,c4=4f64 1626006833639000000    st,t1=4i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin, abc&quot;,c2=true,c4=5f64,c5=5f64,c6=7u64 1626006933640000000    stf,t1=4i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin_stf&quot;,c2=false,c5=5f64,c6=7u64 1626006933641000000'''    ttl = 1000    res = conn.schemaless_insert_raw(lines, 1, 0, ttl=ttl)    print(&quot;affected rows: &quot;, res)    assert (res == 3)    lines = '''stf,t1=5i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin_stf&quot;,c2=false,c5=5f64,c6=7u64 1626006933641000000'''    ttl = 1000    res = conn.schemaless_insert_raw(lines, 1, 0, ttl=ttl)    print(&quot;affected rows: &quot;, res)    assert (res == 1)    result = conn.query(&quot;select * from st&quot;)    dict2 = result.fetch_all_into_dict()    print(dict2)    print(result.row_count)    all = result.rows_iter()    for row in all:        print(row)    result.close()    assert (result.row_count == 2)    # error test    lines = ''',t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;passit&quot;,c2=false,c4=4f64 1626006833639000000'''    try:        ttl = 1000        res = conn.schemaless_insert_raw(lines, 1, 0, ttl=ttl)        print(res)        # assert(False)    except SchemalessError as err:        print('**** error: ', err)        # assert (err.msg == 'Invalid data format')    result = conn.query(&quot;select * from st&quot;)    print(result.row_count)    all = result.rows_iter()    for row in all:        print(row)    result.close()    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()except InterfaceError as err:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()    print(err)except Exception as err:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()    print(err)    raise err```Pass optional req_id in the parameters.```pythonimport taosfrom taos import utilsfrom taos import TaosConnectionfrom taos.cinterface import *from taos.error import OperationalError, SchemalessErrorconn = taos.connect()dbname = &quot;taos_schemaless_insert&quot;try:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    if taos.IS_V3:        conn.execute(&quot;create database if not exists %s schemaless 1 precision 'ns'&quot; % dbname)    else:        conn.execute(&quot;create database if not exists %s update 2 precision 'ns'&quot; % dbname)    conn.select_db(dbname)    lines = '''st,t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;passit&quot;,c2=false,c4=4f64 1626006833639000000    st,t1=4i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin, abc&quot;,c2=true,c4=5f64,c5=5f64,c6=7u64 1626006933640000000    stf,t1=4i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin_stf&quot;,c2=false,c5=5f64,c6=7u64 1626006933641000000'''    ttl = 1000    req_id = utils.gen_req_id()    res = conn.schemaless_insert_raw(lines, 1, 0, ttl=ttl, req_id=req_id)    print(&quot;affected rows: &quot;, res)    assert (res == 3)    lines = '''stf,t1=5i64,t3=&quot;t4&quot;,t2=5f64,t4=5f64 c1=3i64,c3=L&quot;passitagin_stf&quot;,c2=false,c5=5f64,c6=7u64 1626006933641000000'''    ttl = 1000    req_id = utils.gen_req_id()    res = conn.schemaless_insert_raw(lines, 1, 0, ttl=ttl, req_id=req_id)    print(&quot;affected rows: &quot;, res)    assert (res == 1)    result = conn.query(&quot;select * from st&quot;)    dict2 = result.fetch_all_into_dict()    print(dict2)    print(result.row_count)    all = result.rows_iter()    for row in all:        print(row)    result.close()    assert (result.row_count == 2)    # error test    lines = ''',t1=3i64,t2=4f64,t3=&quot;t3&quot; c1=3i64,c3=L&quot;passit&quot;,c2=false,c4=4f64 1626006833639000000'''    try:        ttl = 1000        req_id = utils.gen_req_id()        res = conn.schemaless_insert_raw(lines, 1, 0, ttl=ttl, req_id=req_id)        print(res)        # assert(False)    except SchemalessError as err:        print('**** error: ', err)        # assert (err.msg == 'Invalid data format')    result = conn.query(&quot;select * from st&quot;)    print(result.row_count)    all = result.rows_iter()    for row in all:        print(row)    result.close()    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()except InterfaceError as err:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()    print(err)except Exception as err:    conn.execute(&quot;drop database if exists %s&quot; % dbname)    conn.close()    print(err)    raise err```### Read with Pandas#### Method one```pythonimport pandasimport taosconn = taos.connect()df: pandas.DataFrame = pandas.read_sql(&quot;select * from log.logs&quot;, conn)```#### Method Two```pythonimport pandasfrom sqlalchemy import create_engineengine = create_engine(&quot;taos://root:taosdata@localhost:6030/log&quot;)df: pandas.DataFrame = pandas.read_sql(&quot;select * from logs&quot;, engine)```## Limitation- `taosrest` is designed to use with taosAdapter. If your TDengine version is older than v2.4.0.0, taosAdapter may not be available.## LicenseWe use MIT license for Python connector.</longdescription>
</pkgmetadata>