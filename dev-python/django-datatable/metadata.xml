<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-datatable================|Build Status| |PyPI|.. figure:: https://dl.dropboxusercontent.com/u/94696700/example.png   :alt: previewOverview--------django-datatable is a simple Django app to organize data in tabularform based on `datatable &lt;http://datatables.net&gt;`__ and`bootstrap &lt;http://getbootstrap.com/&gt;`__.It is worth mentioning that the design of this project makes referenceto `django-table2 &lt;https://github.com/bradleyayers/django-tables2&gt;`__and is mainly for the purpose of learning. I really appreciate anyonemaking a pull-request to improve it.Requirements-------------  Python 2.x-  jQuery 1.6+-  Django 1.5+-  Bootstrap 3.0Quick start------------  Setup Django-datatable application in Python environment:   ::       $ pip install django-datatable-  Define a simple model named Person:   ::       # example/app/models.py       class Person(models.Model):           name = models.CharField(max_length=100)-  Add &quot;table&quot; to your INSTALLED\_APPS setting like this:   ::       INSTALLED_APPS = (           ...,           'table',       )-  Add some data so you have something to display in the table. Now   define a PersonTable class without any options in the table file.   ::       # example/app/tables.py       from models import Person       from table import Table       from table.columns import Column       class PersonTable(Table):           id = Column(field='id')           name = Column(field='name')           class Meta:               model = PersonAnd pass a table instance to the view.::        # example/app/views.py        from django.shortcuts import render        from app.tables import PersonTable        def people(request):            people = PersonTable()            return render(request, &quot;index.html&quot;, {'people': people})-  Finally, implement the template:   ::       {# example/templates/index.html}       {% load static %}       {% load table_tags %}       &lt;link href=&quot;{% static 'table/css/bootstrap.min.css' %}&quot; rel=&quot;stylesheet&quot;&gt;       &lt;script src=&quot;{% static 'table/js/jquery.min.js' %}&quot;&gt;&lt;/script&gt;       &lt;script src=&quot;{% static 'table/js/bootstrap.min.js' %}&quot;&gt;&lt;/script&gt;       &lt;!DOCTYPE html&gt;       &lt;html&gt;           &lt;head&gt;               &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;               &lt;title&gt;person&lt;/title&gt;           &lt;/head&gt;           &lt;body&gt;               &lt;div class=&quot;container&quot; style=&quot;margin-top: 10px&quot;&gt;                   &lt;h1&gt;people&lt;/h1&gt;                   &lt;br /&gt;                   {% render_table people %}               &lt;/div&gt;           &lt;/body&gt;       &lt;/html&gt;Tag---Render the whole table by simple tag ``{% render_table %}``, pass``Table`` instance as single argument.::    {% render_table table %}DataSource----------Model`````Uses a django MTV model as table data source, and queries all data indatabase by default. See **model** in table options for details.QuerySet````````Similiar to **Model**, but pass queryset when you initialize the tableinstance instead of defining model option. Basically, it is used tofilter or sort data you want to display in table.::    Models:        # models.py        class Person(models.Model):            name = models.CharField(max_length=100)    Tables:        # tables.py        from models import Person        from table import Table            from table.columns import Column        class PersonTable(Table):            id = Column(field='id')            name = Column(field='name')    Views:        # views.py        from django.shortcuts import render        from models import Person        from app.tables import PersonTable        def people(request):            people = PersonTable(Person.objects.all())            return render(request, &quot;index.html&quot;, {'people': people})Dict-List`````````Use a list of dictionaries as table data source. Fields declared incolumns correspond to the dictionary keys.::    Tables:        # tables.py        from table import Table        from table.columns import Column        class PersonTable(Table):            id = Column(field='id')            name = Column(field='name')    Views:        # views.py        from django.shortcuts import render        from app.tables import PersonTable        def people(request):            data = [{'id': 1, 'name': 'John'}, {'id': 2, 'name': 'Tom'}]            people = PersonTable(data)            return render(request, &quot;index.html&quot;, {'people': people})Built-in Ajax`````````````For large amounts of data, loading them on front-end entirely isimpossible. So, django-table provides a simle option 'ajax' to load datafrom the server-side asynchronously.Note that once toggling ``ajax``, the ``model`` option is necessary.Django-table will do paging/searching/sorting based on``ModelClass.objects.all()``.::    Urls:        # urls.py        urlpatterns = patterns('',            url(r'^table/', include(table.urls')),        )    Tables:        # tables.py        from table import Table        from table.columns import Column        class PersonTable(Table):            id = Column(field='id')            name = Column(field='name')            class Meta:                model = Person                ajax = TrueCustom Ajax```````````If you want to customize base data, use ``ajax_source`` option andimplement your own Class-based View by subclassing ``FeedDataView``.::    Tables:        # tables.py        class PersonTable(Table):            id = Column(field='id')            name = Column(field='name')            class Meta:                model = Person                ajax = True                ajax_source = reverse_lazy('table_data')    Urls:        # urls.py        urlpatterns = patterns('',            url(r'^table/data/$', MyDataView.as_view(), name='table_data'),        )    Views:        # views.py        from table.views import FeedDataView        from app.tables import PersonTable        class MyDataView(FeedDataView):            token = PersonTable.token            def get_queryset(self):                return super(MyDataView, self).get_queryset().filter(id__gt=5)Columns--------  Column-  Link Column-  Datetime Column-  Checkbox Column-  Sequence Column-  Calendar ColumnWidgets--------  search-box-  info-label-  pagination-  length-menu-  exten-button(deprecated)API Reference--------------  `wiki &lt;https://github.com/shymonk/django-datatable/wiki/API-Reference&gt;`__.. |Build Status| image:: https://travis-ci.org/shymonk/django-datatable.svg?branch=master   :target: https://travis-ci.org/shymonk/django-datatable.. |PyPI| image:: https://img.shields.io/pypi/v/django-datatable.png   :target: https://pypi.python.org/pypi/django-datatable</longdescription>
</pkgmetadata>