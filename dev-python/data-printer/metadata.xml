<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NAME**data_printer** - data printer and dumper# VERSION0.0.8# SYNOPSIS```pythonfrom data_printer import p, npimport sysfrom colored import fore, back, styleclass A:    def __init__(self, **kw):        for k, v in kw.items():            setattr(self, k, v)data = A(abc=&quot;acc&quot;, a=A(x=dict(p=10, r=[20, (2, 0.01)])), s='Строка\n', b=b'binary\n', r=r'\n')# add ref to themselwes:data.a.x['r'].append(data)  # print colored structure to sys.stdoutp(data)# print colored structure to file streamp(data, file=sys.stderr)# print uncolored structure to file streamp(data, file=sys.stderr, color=False)# serialize structure to strings = np(data)# serialize structure to string without indexes: [6] -&gt; [0] 6s = np(data, indexes=False)# serialize structure to colored string (colors as escape sequences)s = np(data, color=True)# default color schemep(data, color=dict(    bool = fore.LIGHT_BLUE,    none = fore.LIGHT_BLUE,    int = fore.LIGHT_YELLOW,    float = fore.LIGHT_YELLOW,    str = fore.LIGHT_GREEN,    bytes = fore.LIGHT_MAGENTA,    object = fore.LIGHT_RED,    any = fore.LIGHT_GRAY,    key = fore.LIGHT_CYAN,    ref = fore.RED,    punct = fore.WHITE,))# replace two colorss = np(data, color=dict(    bool = fore.LIGHT_RED,    none = fore.LIGHT_YELLOW,))# print in perl-style (python - default) and without &quot;[0] 7&quot; in list &quot;[7]&quot;. p(data, sep=&quot;perl&quot;, indexes=False)# print in node-stylep(data, sep=&quot;node&quot;)# self-stylep(data, sep=dict(    kword=True,    oword=True,    kw=&quot; =&gt; &quot;,    kv=&quot; =&gt; &quot;,    object_open=&quot;bless {&quot;,    object_close=&quot;}, %n&quot;,    dict_open=&quot;{&quot;,    dict_close=&quot;}&quot;,    list_open=&quot;[&quot;,    list_close=&quot;]&quot;,    tuple_open=&quot;[&quot;,    tuple_close=&quot;]&quot;,    str='&quot;%s&quot;',    bytes='do { use bytes; &quot;%s&quot; }',    scalar='%n(&quot;%s&quot;)',      # for datetime.datetime and others    none=&quot;undef&quot;,    true=&quot;1&quot;,    false=&quot;0&quot;))# self-style with two and lambda on bytesp(data, sep=dict(    str='&quot;%s&quot;',    bytes=lambda s: &quot;&quot;.join(['Buffer.from(&quot;, ', &quot;, &quot;.join([&quot;0x%X&quot; % ch for ch in s]) ,')']),))# filters use for specific objectsimport datetimep([datetime.datetime.now()], filters={    datetime.datetime: lambda obj, ddp: ddp.echo(&quot;⎈ &quot;, ddp.color.key).echo(repr(obj), ddp.color.any),})# print without newline on the endp(data, end=&quot;&quot;)```# DESCRIPTIONData recursive printer. Serialize any python3 data to string or print in console or file.Is colorised output.Data printer check many references to one structure.# INSTALL```sh$ pip install data-printer```# REQUIREMENTS* colored# AUTHORKosmina O. Yaroslav &lt;darviarush@mail.ru&gt;# LICENSEMIT LicenseCopyright (c) 2020 Kosmina O. Yaroslav</longdescription>
</pkgmetadata>