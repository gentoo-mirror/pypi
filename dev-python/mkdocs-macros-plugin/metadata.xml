<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mkdocs-macros-plugin: Unleash the power of MkDocs with variables and macros[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) ![Language](https://img.shields.io/github/languages/top/fralau/mkdocs_macros_plugin)![PyPI](https://img.shields.io/pypi/v/mkdocs-macros-plugin)![Github](https://img.shields.io/github/v/tag/fralau/mkdocs_macros_plugin?label=github%20tag)![macros](https://img.shields.io/pypi/dm/mkdocs-macros-plugin)* **View the [mkdocs-macro documentation](https://mkdocs-macros-plugin.readthedocs.io/) on Read the Docs*** View the [general Mkdocs documentation](https://www.mkdocs.org/)&lt;!-- To update, run the following command:markdown-toc -i README.md --&gt;&lt;!-- toc --&gt;- [mkdocs-macros-plugin: Unleash the power of MkDocs with variables and macros](#mkdocs-macros-plugin-unleash-the-power-of-mkdocs-with-variables-and-macros)  - [Overview](#Overview)    - [Using variables](#Using-variables)    - [Defining variables](#Defining-variables)    - [Macros and filters](#Macros-and-filters)  - [Installation](#Installation)    - [Prerequisites](#Prerequisites)    - [Standard installation](#Standard-installation)    - [&quot;Manual installation&quot;](#&quot;Manual-installation&quot;)    - [Development/test installation](#Development/test-installation)    - [Declaration of plugin](#Declaration-of-plugin)    - [Check that it works](#Check-that-it-works)  - [Using pluglets](#Using-pluglets)    - [What are pluglets?](#What-are-pluglets?)    - [How to add a pluglet to an mkdocs project?](#How-to-add-a-pluglet-to-an-mkdocs-project?)    - [How to write a pluglet?](#How-to-write-a-pluglet?)&lt;!-- tocstop --&gt;## Overview**mkdocs-macros-plugin** is a plugin that makes it easier for contributorsof an [MkDocs](https://www.mkdocs.org/) website to produce richer and more beautiful pages. It transforms the markdown pagesinto [jinja2](https://jinja.palletsprojects.com/en/2.10.x/) templatesthat use **variables**, calls to **macros** and custom **filters**.&gt; **You can also partially replace MkDocs plugins with mkdocs-macros modules,&gt; and [pluglets](https://mkdocs-macros-plugin.readthedocs.io/en/latest/pluglets/) &gt; (pre-installed modules).**### Using variablesYou can leverage the power of Python in markdown thanks to jinja2by writing this :```markdownThe unit price of product A is {{ unit_price }} EUR.Taking the standard discount into account,the sale price of 50 units is {{ price(unit_price, 50) }} EUR.```If you defined a `price()` function, this could translate into:```The unit price of product A is 10.00 EUR.Taking the standard discount into account,the sale price of 50 units is 450.00 EUR.```&gt; The result of a macro can be **HTML code**:this makes macros especially usefulto make custom extensions to the syntax of markdown, such as buttons,calls to email, embedding YouTube videos, etc.It is possible to use the wide range of facilities provided by[Jinja2 templates](http://jinja.pocoo.org/docs/2.10/templates/) suchas conditions (`{% if ... %}`) and loops (`{% for ... %}`).### Defining variablesRegular **variables** can be defined in five ways:| No | Validity | For whom | Description || --- | --- | --- | ---- || 1. | global | designer of the website | in the `mkdocs.yml` file, under the `extra` heading || 2. | global | contributor | in external yaml definition files || 3. | global | programmer | in a `main.py` file (Python), by adding them to a dictionary || 4. | local (page) | writer | in the YAML header of each Markdown page || 5. | local (page) | writer | with a `{%set variable = value %}`  statement |In addition, predefined objects are provided (local and global), typicallyfor the environment, project, page, git information, etc. ### Macros and filtersSimilarly programmers can define their own **macros** and **filters**,as Python functions in the `main.py` file, which the users will then be able touse without much difficulty, as jinja2 directives in the markdown page.## Installation### Prerequisites  - Python version &gt; 3.5  - MkDocs version &gt;= 1.0 (it should work &gt; 0.17    (it should be compatible with post 1.0 versions)### Standard installation```pip install mkdocs-macros-plugin```### &quot;Manual installation&quot;To install the package, download it and run:```pip install .# or...python setup.py install```### Development/test installationTo install the extra dependencies required for testing the package, run:```pip install &quot;mkdocs-macros-plugin[test]&quot;```### Declaration of pluginDeclare the plugin in the the file `mkdocs.yml`:```yamlplugins:    - search    - macros```&gt; **Note:** If you have no `plugins` entry in your config file yet,you should also add the `search` plugin.If no `plugins` entry is set, MkDocs enables `search` by default; butif you use it, then you have to declare it explicitly.### Check that it worksThe recommended way to check that the plugin works properly is to add the following command in one of the pages of your site (let's say `info.md`):```{{ macros_info() }}```In the terminal, restart the environment:```&gt; mkdocs serve````You will notice that additional information now appears in the terminal:```INFO    -  Building documentation...[macros] Macros arguments: {'module_name': 'main', 'include_yaml': [], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': ''}```Within the browser (e.g. http://127.0.0.1:8000/info), you shouldsee a description of the plugins environment: ![macros_info()](macros_info.png)If you see it that information, you should be all set.Give a good look at the General List, since it gives you an overviewof what you can do out of the box with the macros plugin.The other parts give you more detailed information.## Using pluglets### What are pluglets?**Pluglets** are small, easy-to-write programsthat use mkdocs-macro's foundationto offer services to mkdocs projects, which would normallybe offered by plugins.Pluglets are Python packages, which can be hosted on github, and distributed through [PyPI](https://pypi.org/).### How to add a pluglet to an mkdocs project?Install it: ```pythonpip install &lt;pluglet_name&gt;```Declare it in the project's config (`mkdocs.yml`) file:```yamlplugins:  - search  - macros:      modules:        - &lt;pluglet_name&gt; ```### How to write a pluglet?[See instructions in the documentation](https://mkdocs-macros-plugin.readthedocs.io/en/latest/pluglets/).A sample pluglet can be found in [mkdocs-test (github)](https://github.com/fralau/mkdocs-macros-test).</longdescription>
</pkgmetadata>