<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. contents:: **pytablewriter**   :backlinks: top   :depth: 2Summary=========`pytablewriter &lt;https://github.com/thombashi/pytablewriter&gt;`__ is a Python library to write a table in various formats: AsciiDoc / CSV / Elasticsearch / HTML / JavaScript / JSON / LaTeX / LDJSON / LTSV / Markdown / MediaWiki / NumPy / Excel / Pandas / Python / reStructuredText / SQLite / TOML / TSV / YAML... image:: https://badge.fury.io/py/pytablewriter.svg    :target: https://badge.fury.io/py/pytablewriter    :alt: PyPI package version.. image:: https://anaconda.org/conda-forge/pytablewriter/badges/version.svg    :target: https://anaconda.org/conda-forge/pytablewriter    :alt: conda-forge package version.. image:: https://img.shields.io/pypi/pyversions/pytablewriter.svg    :target: https://pypi.org/project/pytablewriter/    :alt: Supported Python versions.. image:: https://img.shields.io/pypi/implementation/pytablewriter.svg    :target: https://pypi.org/project/pytablewriter    :alt: Supported Python implementations.. image:: https://github.com/thombashi/pytablewriter/actions/workflows/ci.yml/badge.svg    :target: https://github.com/thombashi/pytablewriter/actions/workflows/ci.yml    :alt: CI status of Linux/macOS/Windows.. image:: https://coveralls.io/repos/github/thombashi/pytablewriter/badge.svg?branch=master    :target: https://coveralls.io/github/thombashi/pytablewriter?branch=master    :alt: Test coverage.. image:: https://github.com/thombashi/pytablewriter/actions/workflows/github-code-scanning/codeql/badge.svg    :target: https://github.com/thombashi/pytablewriter/actions/workflows/github-code-scanning/codeql    :alt: CodeQLFeatures--------- Write a table in various formats:    - Text formats:        - `AsciiDoc &lt;https://asciidoc.org/&gt;`__        - CSV / Tab-separated values (TSV) / Space-separated values (SSV)        - HTML / CSS        - JSON / `Line-delimited JSON(LDJSON) &lt;https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON&gt;`__        - `Labeled Tab-separated Values (LTSV) &lt;http://ltsv.org/&gt;`__        - LaTeX: ``tabular``/``array`` environment        - Markdown: CommonMark / `GitHub Flavored Markdown (GFM) &lt;https://github.github.com/gfm/&gt;`__ / `kramdown &lt;https://kramdown.gettalong.org/&gt;`__        - `MediaWiki &lt;https://www.mediawiki.org/wiki/MediaWiki&gt;`__        - reStructuredText: `Grid Tables &lt;http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables&gt;`__/`Simple Tables &lt;http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables&gt;`__/`CSV Table &lt;http://docutils.sourceforge.net/docs/ref/rst/directives.html#id4&gt;`__        - Source code (definition of a variable that represents tabular data)            - JavaScript / `NumPy &lt;https://www.numpy.org/&gt;`__ (`numpy.array &lt;https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html&gt;`__) / `Pandas &lt;https://pandas.pydata.org/&gt;`__ (`pandas.DataFrame &lt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html&gt;`__) / Python        - `TOML &lt;https://github.com/toml-lang/toml&gt;`__        - `YAML &lt;https://yaml.org/&gt;`__        - Unicode    - Binary file formats:        - Microsoft Excel :superscript:`TM` (``.xlsx``/``.xls`` file format)        - `pandas.DataFrame &lt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html&gt;`__ pickle file        - `SQLite &lt;https://www.sqlite.org/index.html&gt;`__ database    - Application-specific formats:        - `Elasticsearch &lt;https://www.elastic.co/products/elasticsearch&gt;`__- Automatic table cell formatting:    - Alignment    - Padding    - Decimal places of numbers- Customize table cell styles:    - Text/Background color    - Text alignment    - Font size/weight    - Thousand separator for numbers: e.g. ``1,000``/``1 000``- Configure output:    - Write a table to a stream such as a file/standard-output/string-buffer/Jupyter-Notebook    - Get rendered tabular text- Data sources:    - nested list    - CSV    - `pandas.DataFrame &lt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html&gt;`__ / `pandas.Series &lt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html&gt;`__    - etc.- Multibyte character support- ANSI color supportInstallation============Installation: pip------------------------------::    pip install pytablewriterSome of the formats require additional dependency packages, you can install these packages as follows:.. csv-table:: Installation of optional dependencies    :header: Installation example, Remark    ``pip install pytablewriter[es]``, Elasticsearch    ``pip install pytablewriter[excel]``, Excel    ``pip install pytablewriter[html]``, HTML    ``pip install pytablewriter[sqlite]``, SQLite database    ``pip install pytablewriter[toml]``, TOML    ``pip install pytablewriter[theme]``, pytablewriter theme plugins    ``pip install pytablewriter[all]``, Install all of the optional dependenciesInstallation: conda------------------------------::    conda install -c conda-forge pytablewriterInstallation: apt------------------------------::    sudo add-apt-repository ppa:thombashi/ppa    sudo apt update    sudo apt install python3-pytablewriterExamples==========Write tables--------------Write a Markdown table~~~~~~~~~~~~~~~~~~~~~~~~:Sample Code:    .. code-block:: python        from pytablewriter import MarkdownTableWriter        def main():            writer = MarkdownTableWriter(                table_name=&quot;example_table&quot;,                headers=[&quot;int&quot;, &quot;float&quot;, &quot;str&quot;, &quot;bool&quot;, &quot;mix&quot;, &quot;time&quot;],                value_matrix=[                    [0,   0.1,      &quot;hoge&quot;, True,   0,      &quot;2017-01-01 03:04:05+0900&quot;],                    [2,   &quot;-2.23&quot;,  &quot;foo&quot;,  False,  None,   &quot;2017-12-23 45:01:23+0900&quot;],                    [3,   0,        &quot;bar&quot;,  &quot;true&quot;,  &quot;inf&quot;, &quot;2017-03-03 33:44:55+0900&quot;],                    [-10, -9.9,     &quot;&quot;,     &quot;FALSE&quot;, &quot;nan&quot;, &quot;2017-01-01 00:00:00+0900&quot;],                ],            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        # example_table        |int|float|str |bool |  mix   |          time          |        |--:|----:|----|-----|-------:|------------------------|        |  0| 0.10|hoge|True |       0|2017-01-01 03:04:05+0900|        |  2|-2.23|foo |False|        |2017-12-23 12:34:51+0900|        |  3| 0.00|bar |True |Infinity|2017-03-03 22:44:55+0900|        |-10|-9.90|    |False|     NaN|2017-01-01 00:00:00+0900|:Rendering Result:    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/table_format/text/ss/markdown.png       :scale: 80%       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/table_format/text/ss/markdown.png       Rendered markdown at GitHubWrite a Markdown table with margins^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^:Sample Code:    .. code-block:: python        from pytablewriter import MarkdownTableWriter        def main():            writer = MarkdownTableWriter(                table_name=&quot;write a table with margins&quot;,                headers=[&quot;int&quot;, &quot;float&quot;, &quot;str&quot;, &quot;bool&quot;, &quot;mix&quot;, &quot;time&quot;],                value_matrix=[                    [0,   0.1,      &quot;hoge&quot;, True,   0,      &quot;2017-01-01 03:04:05+0900&quot;],                    [2,   &quot;-2.23&quot;,  &quot;foo&quot;,  False,  None,   &quot;2017-12-23 45:01:23+0900&quot;],                    [3,   0,        &quot;bar&quot;,  &quot;true&quot;,  &quot;inf&quot;, &quot;2017-03-03 33:44:55+0900&quot;],                    [-10, -9.9,     &quot;&quot;,     &quot;FALSE&quot;, &quot;nan&quot;, &quot;2017-01-01 00:00:00+0900&quot;],                ],                margin=1  # add a whitespace for both sides of each cell            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        # write a table with margins        | int | float | str  | bool  |   mix    |           time           |        | --: | ----: | ---- | ----- | -------: | ------------------------ |        |   0 |  0.10 | hoge | True  |        0 | 2017-01-01 03:04:05+0900 |        |   2 | -2.23 | foo  | False |          | 2017-12-23 12:34:51+0900 |        |   3 |  0.00 | bar  | True  | Infinity | 2017-03-03 22:44:55+0900 |        | -10 | -9.90 |      | False |      NaN | 2017-01-01 00:00:00+0900 |``margin`` attribute can be available for all of the text format writer classes.Write a GitHub Flavored Markdown (GFM) table^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^If you set ``flavor`` keyword argument of ``MarkdownTableWriter`` class to ``&quot;github&quot;`` or ``&quot;gfm&quot;``, the writer will output markdown tables with GitHub flavor.GFM can apply some additional styles to tables such as ``fg_color`` (text color).:Sample Code:    .. code-block:: python            from pytablewriter import MarkdownTableWriter            from pytablewriter.style import Style            writer = MarkdownTableWriter(                column_styles=[                    Style(fg_color=&quot;red&quot;),                    Style(fg_color=&quot;green&quot;, decoration_line=&quot;underline&quot;),                ],                headers=[&quot;A&quot;, &quot;B&quot;],                value_matrix=[                    [&quot;abc&quot;, 1],                    [&quot;efg&quot;, 2],                ],                margin=1,                flavor=&quot;github&quot;,                enable_ansi_escape=False,            )            writer.write_table()Rendered results can be found at `here &lt;https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/output/markdown/gfm.md&gt;`__Apply styles to GFM table with programmatically^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^You can apply styles to specific cells by using style filters.Style filters will be written as functions.Example of a style filter function are as follows::Sample Code:    .. code-block:: python            from typing import Any, Optional            from pytablewriter import MarkdownTableWriter            from pytablewriter.style import Cell, Style            def style_filter(cell: Cell, **kwargs: Any) -&gt; Optional[Style]:                if cell.is_header_row():                    return None                if cell.col == 0:                    return Style(font_weight=&quot;bold&quot;)                value = int(cell.value)                if value &gt; 80:                    return Style(fg_color=&quot;red&quot;, font_weight=&quot;bold&quot;, decoration_line=&quot;underline&quot;)                elif value &gt; 50:                    return Style(fg_color=&quot;yellow&quot;, font_weight=&quot;bold&quot;)                elif value &gt; 20:                    return Style(fg_color=&quot;green&quot;)                return Style(fg_color=&quot;lightblue&quot;)            writer = MarkdownTableWriter(                table_name=&quot;style filter example&quot;,                headers=[&quot;Key&quot;, &quot;Value 1&quot;, &quot;Value 2&quot;],                value_matrix=[                    [&quot;A&quot;, 95, 40],                    [&quot;B&quot;, 55, 5],                    [&quot;C&quot;, 30, 85],                    [&quot;D&quot;, 0, 69],                ],                flavor=&quot;github&quot;,                enable_ansi_escape=False,            )            writer.add_style_filter(style_filter)            writer.write_table()Rendered results can be found at `here &lt;https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/output/markdown/style_filter.md&gt;`__Write a Markdown table to a stream or a file^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^`Refer an example &lt;https://github.com/thombashi/pytablewriter/blob/master/examples/py/stream/configure_stream.py&gt;`__Write a table to an Excel sheet~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:Sample Code:    .. code-block:: python        from pytablewriter import ExcelXlsxTableWriter        def main():            writer = ExcelXlsxTableWriter()            writer.table_name = &quot;example&quot;            writer.headers = [&quot;int&quot;, &quot;float&quot;, &quot;str&quot;, &quot;bool&quot;, &quot;mix&quot;, &quot;time&quot;]            writer.value_matrix = [                [0,   0.1,      &quot;hoge&quot;, True,   0,      &quot;2017-01-01 03:04:05+0900&quot;],                [2,   &quot;-2.23&quot;,  &quot;foo&quot;,  False,  None,   &quot;2017-12-23 12:34:51+0900&quot;],                [3,   0,        &quot;bar&quot;,  &quot;true&quot;,  &quot;inf&quot;, &quot;2017-03-03 22:44:55+0900&quot;],                [-10, -9.9,     &quot;&quot;,     &quot;FALSE&quot;, &quot;nan&quot;, &quot;2017-01-01 00:00:00+0900&quot;],            ]            writer.dump(&quot;sample.xlsx&quot;)        if __name__ == &quot;__main__&quot;:            main():Output:    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/table_format/binary/spreadsheet/ss/excel_single.png       :scale: 100%       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/table_format/binary/spreadsheet/ss/excel_single.png       Output excel file (``sample_single.xlsx``)Write a Unicode table~~~~~~~~~~~~~~~~~~~~~~~:Sample Code:    .. code-block:: python        from pytablewriter import UnicodeTableWriter        def main():            writer = UnicodeTableWriter(                table_name=&quot;example_table&quot;,                headers=[&quot;int&quot;, &quot;float&quot;, &quot;str&quot;, &quot;bool&quot;, &quot;mix&quot;, &quot;time&quot;],                value_matrix=[                    [0,   0.1,      &quot;hoge&quot;, True,   0,      &quot;2017-01-01 03:04:05+0900&quot;],                    [2,   &quot;-2.23&quot;,  &quot;foo&quot;,  False,  None,   &quot;2017-12-23 45:01:23+0900&quot;],                    [3,   0,        &quot;bar&quot;,  &quot;true&quot;,  &quot;inf&quot;, &quot;2017-03-03 33:44:55+0900&quot;],                    [-10, -9.9,     &quot;&quot;,     &quot;FALSE&quot;, &quot;nan&quot;, &quot;2017-01-01 00:00:00+0900&quot;],                ]            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        ┌───┬─────┬────┬─────┬────────┬────────────────────────┐        │int│float│str │bool │  mix   │          time          │        ├───┼─────┼────┼─────┼────────┼────────────────────────┤        │  0│ 0.10│hoge│True │       0│2017-01-01 03:04:05+0900│        ├───┼─────┼────┼─────┼────────┼────────────────────────┤        │  2│-2.23│foo │False│        │2017-12-23 12:34:51+0900│        ├───┼─────┼────┼─────┼────────┼────────────────────────┤        │  3│ 0.00│bar │True │Infinity│2017-03-03 22:44:55+0900│        ├───┼─────┼────┼─────┼────────┼────────────────────────┤        │-10│-9.90│    │False│     NaN│2017-01-01 00:00:00+0900│        └───┴─────┴────┴─────┴────────┴────────────────────────┘Write a table with JavaScript format (as a nested list variable definition)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:Sample Code:    .. code-block:: python        import pytablewriter as ptw        def main():            writer = ptw.JavaScriptTableWriter(                table_name=&quot;js_variable&quot;,                headers=[&quot;int&quot;, &quot;float&quot;, &quot;str&quot;, &quot;bool&quot;, &quot;mix&quot;, &quot;time&quot;],                value_matrix=[                    [0, 0.1, &quot;hoge&quot;, True, 0, &quot;2017-01-01 03:04:05+0900&quot;],                    [2, &quot;-2.23&quot;, &quot;foo&quot;, False, None, &quot;2017-12-23 45:01:23+0900&quot;],                    [3, 0, &quot;bar&quot;, &quot;true&quot;, &quot;inf&quot;, &quot;2017-03-03 33:44:55+0900&quot;],                    [-10, -9.9, &quot;&quot;, &quot;FALSE&quot;, &quot;nan&quot;, &quot;2017-01-01 00:00:00+0900&quot;],                ],            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block:: js        const js_variable = [            [&quot;int&quot;, &quot;float&quot;, &quot;str&quot;, &quot;bool&quot;, &quot;mix&quot;, &quot;time&quot;],            [0, 0.1, &quot;hoge&quot;, true, 0, &quot;2017-01-01 03:04:05+0900&quot;],            [2, -2.23, &quot;foo&quot;, false, null, &quot;2017-12-23 45:01:23+0900&quot;],            [3, 0, &quot;bar&quot;, true, Infinity, &quot;2017-03-03 33:44:55+0900&quot;],            [-10, -9.9, &quot;&quot;, &quot;FALSE&quot;, NaN, &quot;2017-01-01 00:00:00+0900&quot;]        ];Write a Markdown table from ``pandas.DataFrame`` instance~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``from_dataframe`` method of writer classes will set up tabular data from ``pandas.DataFrame``::Sample Code:    .. code-block:: python        from textwrap import dedent        import pandas as pd        import io        from pytablewriter import MarkdownTableWriter        def main():            csv_data = io.StringIO(dedent(&quot;&quot;&quot;\                &quot;i&quot;,&quot;f&quot;,&quot;c&quot;,&quot;if&quot;,&quot;ifc&quot;,&quot;bool&quot;,&quot;inf&quot;,&quot;nan&quot;,&quot;mix_num&quot;,&quot;time&quot;                1,1.10,&quot;aa&quot;,1.0,&quot;1&quot;,True,Infinity,NaN,1,&quot;2017-01-01 00:00:00+09:00&quot;                2,2.20,&quot;bbb&quot;,2.2,&quot;2.2&quot;,False,Infinity,NaN,Infinity,&quot;2017-01-02 03:04:05+09:00&quot;                3,3.33,&quot;cccc&quot;,-3.0,&quot;ccc&quot;,True,Infinity,NaN,NaN,&quot;2017-01-01 00:00:00+09:00&quot;                &quot;&quot;&quot;))            df = pd.read_csv(csv_data, sep=',')            writer = MarkdownTableWriter(dataframe=df)            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        | i | f  | c  | if |ifc|bool |  inf   |nan|mix_num |          time           |        |--:|---:|----|---:|---|-----|--------|---|-------:|-------------------------|        |  1|1.10|aa  | 1.0|  1|True |Infinity|NaN|       1|2017-01-01 00:00:00+09:00|        |  2|2.20|bbb | 2.2|2.2|False|Infinity|NaN|Infinity|2017-01-02 03:04:05+09:00|        |  3|3.33|cccc|-3.0|ccc|True |Infinity|NaN|     NaN|2017-01-01 00:00:00+09:00|Adding a column of the DataFrame index if you specify ``add_index_column=True``::Sample Code:    .. code-block:: python        import pandas as pd        import pytablewriter as ptw        def main():            writer = ptw.MarkdownTableWriter(table_name=&quot;add_index_column&quot;)            writer.from_dataframe(                pd.DataFrame({&quot;A&quot;: [1, 2], &quot;B&quot;: [10, 11]}, index=[&quot;a&quot;, &quot;b&quot;]),                add_index_column=True,            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        # add_index_column        |   | A | B |        |---|--:|--:|        |a  |  1| 10|        |b  |  2| 11|Write a markdown table from space-separated values~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:Sample Code:    .. code-block:: python        import pytablewriter as ptw        def main():            writer = ptw.MarkdownTableWriter(table_name=&quot;ps&quot;)            writer.from_csv(                &quot;&quot;&quot;                USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND                root         1  0.0  0.4  77664  8784 ?        Ss   May11   0:02 /sbin/init                root         2  0.0  0.0      0     0 ?        S    May11   0:00 [kthreadd]                root         4  0.0  0.0      0     0 ?        I&lt;   May11   0:00 [kworker/0:0H]                root         6  0.0  0.0      0     0 ?        I&lt;   May11   0:00 [mm_percpu_wq]                root         7  0.0  0.0      0     0 ?        S    May11   0:01 [ksoftirqd/0]                &quot;&quot;&quot;,                delimiter=&quot; &quot;,            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        # ps        |USER|PID|%CPU|%MEM| VSZ |RSS |TTY|STAT|START|TIME|   COMMAND    |        |----|--:|---:|---:|----:|---:|---|----|-----|----|--------------|        |root|  1|   0| 0.4|77664|8784|?  |Ss  |May11|0:02|/sbin/init    |        |root|  2|   0| 0.0|    0|   0|?  |S   |May11|0:00|[kthreadd]    |        |root|  4|   0| 0.0|    0|   0|?  |I&lt;  |May11|0:00|[kworker/0:0H]|        |root|  6|   0| 0.0|    0|   0|?  |I&lt;  |May11|0:00|[mm_percpu_wq]|        |root|  7|   0| 0.0|    0|   0|?  |S   |May11|0:01|[ksoftirqd/0] |Get rendered tabular text as str----------------------------------``dumps`` method returns rendered tabular text.``dumps`` only available for text format writers.:Sample Code:    .. code-block:: python        import pytablewriter as ptw        def main():            writer = ptw.MarkdownTableWriter(                headers=[&quot;int&quot;, &quot;float&quot;, &quot;str&quot;, &quot;bool&quot;, &quot;mix&quot;, &quot;time&quot;],                value_matrix=[                    [0, 0.1, &quot;hoge&quot;, True, 0, &quot;2017-01-01 03:04:05+0900&quot;],                    [2, &quot;-2.23&quot;, &quot;foo&quot;, False, None, &quot;2017-12-23 45:01:23+0900&quot;],                    [3, 0, &quot;bar&quot;, &quot;true&quot;, &quot;inf&quot;, &quot;2017-03-03 33:44:55+0900&quot;],                    [-10, -9.9, &quot;&quot;, &quot;FALSE&quot;, &quot;nan&quot;, &quot;2017-01-01 00:00:00+0900&quot;],                ],            )            print(writer.dumps())        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        |int|float|str |bool |  mix   |          time          |        |--:|----:|----|-----|-------:|------------------------|        |  0| 0.10|hoge|True |       0|2017-01-01 03:04:05+0900|        |  2|-2.23|foo |False|        |2017-12-23 45:01:23+0900|        |  3| 0.00|bar |True |Infinity|2017-03-03 33:44:55+0900|        |-10|-9.90|    |False|     NaN|2017-01-01 00:00:00+0900|Configure table styles------------------------Column styles~~~~~~~~~~~~~~~Writers can specify`Style &lt;https://pytablewriter.rtfd.io/en/latest/pages/reference/style.html&gt;`__for each column by ``column_styles`` attribute of writer classes.:Sample Code:    .. code-block:: python        import pytablewriter as ptw        from pytablewriter.style import Style        def main():            writer = ptw.MarkdownTableWriter(                table_name=&quot;set style by column_styles&quot;,                headers=[                    &quot;auto align&quot;,                    &quot;left align&quot;,                    &quot;center align&quot;,                    &quot;bold&quot;,                    &quot;italic&quot;,                    &quot;bold italic ts&quot;,                ],                value_matrix=[                    [11, 11, 11, 11, 11, 11],                    [1234, 1234, 1234, 1234, 1234, 1234],                ],                column_styles=[                    Style(),                    Style(align=&quot;left&quot;),                    Style(align=&quot;center&quot;),                    Style(font_weight=&quot;bold&quot;),                    Style(font_style=&quot;italic&quot;),                    Style(font_weight=&quot;bold&quot;, font_style=&quot;italic&quot;, thousand_separator=&quot;,&quot;),                ],  # specify styles for each column            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        # set style by styles        |auto align|left align|center align|  bold  |italic|bold italic ts|        |---------:|----------|:----------:|-------:|-----:|-------------:|        |        11|11        |     11     |  **11**|  _11_|      _**11**_|        |      1234|1234      |    1234    |**1234**|_1234_|   _**1,234**_|    `Rendering result &lt;https://github.com/thombashi/pytablewriter/tree/master/docs/pages/examples/style/output.md&gt;`__You can also set ``Style`` to a specific column with an index or header by using ``set_style`` method::Sample Code:    .. code-block:: python        from pytablewriter import MarkdownTableWriter        from pytablewriter.style import Style        def main():            writer = MarkdownTableWriter()            writer.headers = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;,]            writer.value_matrix = [[11, 11, 11], [1234, 1234, 1234]]            writer.table_name = &quot;set style by column index&quot;            writer.set_style(1, Style(align=&quot;center&quot;, font_weight=&quot;bold&quot;))            writer.set_style(2, Style(thousand_separator=&quot; &quot;))            writer.write_table()            writer.write_null_line()            writer.table_name = &quot;set style by header&quot;            writer.set_style(&quot;B&quot;, Style(font_style=&quot;italic&quot;))            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. code-block::        # set style by column index        | A  |   B    |  C  |        |---:|:------:|----:|        |  11| **11** |   11|        |1234|**1234**|1 234|        # set style by header        | A  |  B   |  C  |        |---:|-----:|----:|        |  11|  _11_|   11|        |1234|_1234_|1 234|Style filter~~~~~~~~~~~~~~The following command will install external predefined themes:::    pip install pytablewriter[theme]``theme`` argument of writer constructor or ``set_theme`` method can set&quot;&quot; predefined style filters.``altrow`` theme will be colored rows alternatively::Sample Code:    .. code-block:: python        import pytablewriter as ptw        writer = ptw.TableWriterFactory.create_from_format_name(            &quot;markdown&quot;,            headers=[&quot;INT&quot;, &quot;STR&quot;],            value_matrix=[[1, &quot;hoge&quot;], [2, &quot;foo&quot;], [3, &quot;bar&quot;]],            margin=1,            theme=&quot;altrow&quot;,        )        writer.write_table():Output:    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter-altrow-theme@master/ss/ptw-altrow-theme_example_default.png       :scale: 100%       :alt: https://github.com/thombashi/pytablewriter-altrow-theme/blob/master/ss/ptw-altrow-theme_example_default.pngThemes can be created as plugins like as follows:https://github.com/thombashi/pytablewriter-altrow-themeMake tables for specific applications---------------------------------------Render a table on Jupyter Notebook~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~All table writer class instances in ``pytablewriter`` can render in Jupyter Notebook.To render writers at notebook cells, you will require the dependency packages to be installed either by:- ``pip install pytablewriter[html]`` or- ``pip install pytablewriter[all]``Jupyter Notebook code examples can be found `here &lt;https://nbviewer.jupyter.org/github/thombashi/pytablewriter/blob/master/examples/ipynb/jupyter_notebook_example.ipynb&gt;`__:.. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/ss/jupyter_notebook.png   :scale: 100%   :alt: https://github.com/thombashi/pytablewriter/blob/master/ss/jupyter_notebook.png   Table rendering results of Jupyter NotebookMultibyte character support-----------------------------Write a table using multibyte character~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can use multibyte characters as table data.Multibyte characters are also properly padded and aligned.:Sample Code:    .. code-block:: python        import pytablewriter as ptw        def main():            writer = ptw.RstSimpleTableWriter(                table_name=&quot;生成に関するパターン&quot;,                headers=[&quot;パターン名&quot;, &quot;概要&quot;, &quot;GoF&quot;, &quot;Code Complete[1]&quot;],                value_matrix=[                    [&quot;Abstract Factory&quot;, &quot;関連する一連のインスタンスを状況に応じて、適切に生成する方法を提供する。&quot;, &quot;Yes&quot;, &quot;Yes&quot;],                    [&quot;Builder&quot;, &quot;複合化されたインスタンスの生成過程を隠蔽する。&quot;, &quot;Yes&quot;, &quot;No&quot;],                    [&quot;Factory Method&quot;, &quot;実際に生成されるインスタンスに依存しない、インスタンスの生成方法を提供する。&quot;, &quot;Yes&quot;, &quot;Yes&quot;],                    [&quot;Prototype&quot;, &quot;同様のインスタンスを生成するために、原型のインスタンスを複製する。&quot;, &quot;Yes&quot;, &quot;No&quot;],                    [&quot;Singleton&quot;, &quot;あるクラスについて、インスタンスが単一であることを保証する。&quot;, &quot;Yes&quot;, &quot;Yes&quot;],                ],            )            writer.write_table()        if __name__ == &quot;__main__&quot;:            main():Output:    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/multibyte/ss/multi_byte_char.png       :scale: 100%       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/multibyte/ss/multi_byte_char.png       Output of multi-byte character tableMultiprocessing-----------------You can increase the number of workers to process table data via ``max_workers`` attribute of a writer.The more ``max_workers`` the less processing time when tabular data is large and the execution environment has available cores.If you increase ``max_workers`` larger than one, recommend using main guarded as follows to avoid problems caused by multi-processing:.. code-block:: python    from multiprocessing import cpu_count    import pytablewriter as ptw    def main():        writer = ptw.MarkdownTableWriter()        writer.max_workers = cpu_count()        ...    if __name__ == &quot;__main__&quot;:        main()For more information----------------------More examples are available at https://pytablewriter.rtfd.io/en/latest/pages/examples/index.htmlDependencies============- Python 3.7+- `Python package dependencies (automatically installed) &lt;https://github.com/thombashi/pytablewriter/network/dependencies&gt;`__Optional dependencies---------------------- ``logging`` extras    - `loguru &lt;https://github.com/Delgan/loguru&gt;`__: Used for logging if the package installed- ``from`` extras    - `pytablereader &lt;https://github.com/thombashi/pytablereader&gt;`__- ``es`` extra    - `elasticsearch &lt;https://github.com/elastic/elasticsearch-py&gt;`__- ``excel`` extras    - `xlwt &lt;http://www.python-excel.org/&gt;`__    - `XlsxWriter &lt;https://github.com/jmcnamara/XlsxWriter&gt;`__- ``html`` extras    - `dominate &lt;https://github.com/Knio/dominate/&gt;`__- ``sqlite`` extras    - `SimpleSQLite &lt;https://github.com/thombashi/SimpleSQLite&gt;`__- ``theme`` extras    - `pytablewriter-altrow-theme &lt;https://github.com/thombashi/pytablewriter-altrow-theme&gt;`__- ``toml`` extras    - `toml &lt;https://github.com/uiri/toml&gt;`__Documentation===============https://pytablewriter.rtfd.io/Projects using pytablewriter==================================- `pytest-md-report &lt;https://github.com/thombashi/pytest-md-report&gt;`__Related Projects==================================- `pytablereader &lt;https://github.com/thombashi/pytablereader&gt;`__    - Tabular data loaded by ``pytablereader`` can be written another tabular data format with ``pytablewriter``.Sponsors====================================.. image:: https://avatars.githubusercontent.com/u/44389260?s=48&amp;u=6da7176e51ae2654bcfd22564772ef8a3bb22318&amp;v=4   :target: https://github.com/chasbecker   :alt: Charles Becker (chasbecker).. image:: https://avatars.githubusercontent.com/u/46711571?s=48&amp;u=57687c0e02d5d6e8eeaf9177f7b7af4c9f275eb5&amp;v=4   :target: https://github.com/Arturi0   :alt: onetime: Arturi0.. image:: https://avatars.githubusercontent.com/u/3658062?s=48&amp;v=4   :target: https://github.com/b4tman   :alt: onetime: Dmitry Belyaev (b4tman)`Become a sponsor &lt;https://github.com/sponsors/thombashi&gt;`__</longdescription>
</pkgmetadata>