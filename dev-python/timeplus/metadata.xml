<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># timeplus-clientWelcome to the Timeplus HTTP REST API specification.# query```pythonimport osimport tracebackimport jsonfrom pprint import pprintfrom timeplus import Query, Environmentapi_key = os.environ.get(&quot;TIMEPLUS_API_KEY&quot;)api_address = os.environ.get(&quot;TIMEPLUS_HOST&quot;)worksapce = os.environ.get(&quot;TIMEPLUS_WORKSAPCE&quot;)# Configure API key and addressenv = Environment().address(api_address).apikey(api_key).workspace(worksapce)try:    # list all qeuries    query_list = Query(env=env).list()    pprint(f&quot;there are {len(query_list)} queries &quot;)    # create a new query    query = Query(env=env).sql(query=&quot;SELECT * FROM iot&quot;).create()    query_id = query.metadata()[&quot;id&quot;]    pprint(f&quot;created a query with id {query_id}&quot;)    # get a query by id    get_query = Query(env=env).get(id=query_id)    metadata = query.metadata()    pprint(f&quot;get a query with id {metadata['id']}&quot;)    # iterate query result    limit = 3    count = 0    for event in query.result():        print(event.event)        print(json.loads(event.data))        count += 1        if count &gt;= limit:            break    query.cancel()    query.delete()except Exception as e:    pprint(e)    traceback.print_exc()```# stream```pythonimport osimport tracebackimport jsonfrom pprint import pprintfrom timeplus import Stream, Environmentapi_key = os.environ.get(&quot;TIMEPLUS_API_KEY&quot;)api_address = os.environ.get(&quot;TIMEPLUS_HOST&quot;)worksapce = os.environ.get(&quot;TIMEPLUS_WORKSAPCE&quot;)# Configure API key and addressenv = Environment().address(api_address).apikey(api_key).workspace(worksapce)try:    # list all streams    stream_list = Stream(env=env).list()    pprint(f&quot;there are {len(stream_list)} streams &quot;)    # create a new stream    stream = (        Stream(env=env)        .name(&quot;test&quot;)        .column(&quot;time&quot;, &quot;datetime64(3)&quot;)        .column(&quot;data&quot;, &quot;string&quot;)        .create()    )    stream_list = Stream(env=env).list()    pprint(f&quot;there are {len(stream_list)} streams after create&quot;)    pprint(f&quot;created stream is {stream.metadata()}; type is {type(stream.metadata())}&quot;)    a_stream = Stream(env=env).name(&quot;test&quot;).get()    pprint(f&quot;get stream is {a_stream.metadata()} ; type is {type(a_stream.metadata())}&quot;)    stream.delete()    stream_list = Stream(env=env).list()    pprint(f&quot;there are {len(stream_list)} streams after delete&quot;)except Exception as e:    pprint(e)    traceback.print_exc()```# ingestdefault ingest```pythonstream = (        Stream(env=env)        .name(&quot;test_ingest&quot;)        .column(&quot;time&quot;, &quot;datetime64(3)&quot;)        .column(&quot;data&quot;, &quot;string&quot;)        .create()    )stream.ingest([&quot;time&quot;, &quot;data&quot;], [[datetime.datetime.now(), &quot;abcd&quot;]])```ingest json streams```pythonstream = (        Stream(env=env)        .name(&quot;test_ingest&quot;)        .column(&quot;a&quot;, &quot;integer&quot;)        .column(&quot;b&quot;, &quot;string&quot;)        .create()    )payload = &quot;&quot;&quot;{&quot;a&quot;:2,&quot;b&quot;:&quot;hello&quot;}{&quot;a&quot;:1,&quot;b&quot;:&quot;world&quot;}&quot;&quot;&quot;stream.ingest(payload=payload, format=&quot;streaming&quot;)```ingest one raw event with multiple lines```pythonstream = Stream(env=env).name(&quot;test_ingest_raw&quot;).column(&quot;raw&quot;, &quot;string&quot;).create()payload = &quot;&quot;&quot;first linesecond line&quot;&quot;&quot;stream.ingest(payload=payload, format=&quot;raw&quot;)```ingest multiple lines```pythonstream = Stream(env=env).name(&quot;test_ingest_lines&quot;).column(&quot;raw&quot;, &quot;string&quot;).create()payload = '{&quot;a&quot;:1,&quot;b&quot;:&quot;world&quot;}\n{&quot;a&quot;:2,&quot;b&quot;:&quot;hello&quot;}'stream.ingest(payload=payload, format=&quot;lines&quot;)```</longdescription>
</pkgmetadata>