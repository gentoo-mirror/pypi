<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--SPDX-FileCopyrightText: Nir Soffer &lt;nirsof@gmail.com&gt;SPDX-License-Identifier: GPL-2.0-or-later--&gt;# userstorageHelper for setting up storage for tests.## OverviewSome tests need more than a temporary directory on the local filesystem. One example is testing block device with 4k sector size, ortesting a filesystem on top of such a block device.You can create storage using loop devices and mounts in test fixtures,but creating devices and mounts requires root. Do you really want to runall your tests as root, when the code under test should not run as root?The userstorage tool solves this problem by creating storage for testsbefore running the tests, and making the storage available to thecurrent user. Once you created the storage, you can run the testsquickly as yourself directly from your editor.## RequirementsOn Fedora / CentOS you need to install these packages:    dnf install \        e2fsprogs \        sudo \        systemd-udev \        util-linux \        xfsprogsSome packages are typically installed on your machine, but you may needto add them to CI environment or container.## InstallingUse pip:    python3 -m pip install --user userstorage## Creating configuration fileThe userstorage tool creates storage based on configuration file thatyou must provide.The configuration module is used both by the userstorage tool toprovision the storage, and by the tests consuming the storage.The configuration module typically starts by importing the requiredbackends:    from userstorage import FileThe configuration module must define these names:    # Where storage is provisioned.    BASE_DIR = &quot;/path/to/my/storage&quot;    # Storage configurations needed by the tests.    BACKENDS = {}See [example_config.py](https://raw.githubusercontent.com/nirs/userstorage/master/example_config.py)for example configuration used by the tests for this project.## Creating storageTo create the storage described in example_config.py, run:    userstorage create example_config.pyThis can be run once when creating a development environment, and mustbe run again after rebooting the host.If you want to delete the storage, run:    userstorage delete example_config.pyThere is no need to delete the storage normally. The loop devices arebacked up by sparse files and do not consume much resources.## Consuming the storage in your testsSee test/consume_test.py for example test module consuming storageset up by userstorage tool, and the example_config.py module.Note that some storage may not be available on some systems. If a storage isnot available, it will raise `userstorage.Missing`.The behaviour for missing storage can be overriden from your tests(e.g., to mark the test as xfail if needed) by doing:    userstorage.missing_handler = pytest.xfail## Ensuring test isolationReusing the same storage for all tests introduce the problem of old testdata breaking other tests, or causing test to pass when they shouldfail.To avoid this issues, you should call backend's setup() methods beforeusing the storage in a test, and teardown() after running the tests.This ensures that old data from other tests will not be seen by thistest.## How it works?The userstorage tool creates this directory layout in the BASE_DIRdefined in the configuration module:    $ tree /var/tmp/example-storage/    /var/tmp/example-storage/    ├── block-4k-backing    ├── block-4k-loop -&gt; /dev/loop2    ├── block-512-backing    ├── block-512-loop -&gt; /dev/loop3    ├── file-4k-backing    ├── file-4k-loop -&gt; /dev/loop4    ├── file-4k-mount    │   ├── file    │   └── lost+found [error opening dir]    ├── file-512-backing    ├── file-512-loop -&gt; /dev/loop5    └── file-512-mount        ├── file        └── lost+found [error opening dir]The symbolic links (e.g. file-4k-loop) link to the loop devices createdby the tool (/dev/loop4), and used to delete the storage later.The actual file used for the tests are created inside the mountedfilesystem (/var/tmp/example-storage/file-4k-mount/file).## Projects using userstorage- [ovirt-imageio](https://github.com/oVirt/ovirt-imageio)- [vdsm](https://github.com/oVirt/vdsm) - embers a more recent version- [sanlock](https://pagure.io/sanlock) - embeds a very early version(Please add your project here)## ContributingIf you found a bug, please open an issue.If you have an idea for improving this tool, please open an issue todiscuss the idea.For trivial changes please send a pull request.## Running the testsTo run the tests you need to install tox. You can use tox from yourdistribution (e.g., python3-tox on Fedora), or install it usingpip.Before running the tests, create the example storage:    python3 -m userstorage create example_config.pyTo run the tests:    toxIf you want to change storage layout, best delete the example storage:    python3 -m userstorage delete example_config.py</longdescription>
</pkgmetadata>