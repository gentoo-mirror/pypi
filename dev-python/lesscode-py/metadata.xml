<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># lesscode-python#### 介绍   lesscode-python 是基于tornado的web开发脚手架项目，该项目初衷为简化开发过程，让研发人员更加关注业务。#### 软件功能1. 路由自动注册，路由直接指向处理函数2. 请求参数自动解析，调用处理函数自动注入3. 多环境配置文件，支持命令行指定运行参数4. 日志本地化存储，支持日志控制台与文件双输出，存储参数可配置5. 统一异常处理，日志格式统一6. 统一数据返回格式，自动包装处理7. 定义常用业务处理状态码，支持信息自定义8. 支持数据库连接池，支持多数据源统一配置，目前已支持PostgreSQL。#### 安装教程安装或升级到最新版本，请执行以下操作:        pip install -U lesscode-py#### 使用说明1. 路由自动注册，路由直接指向处理函数2. 请求参数自动解析，调用处理函数自动注入   1. 建立Handler处理类，继承BaseHandler   2. 使用 @Handler 标注一级路径   3. 编写业务处理方法，使用@GetMapping/PostMapping进行标注二级路径   4. 请求时使用两级路径拼接访问如：/level1/level2       @Handler(&quot;/level1&quot;)        class DemoHandler(BaseHandler):       @GetMapping(&quot;/level2&quot;)       def query_demo(self):        return &quot;lesscode-python&quot;**注意：所有Handler处理类需要放在统一文件目录下，默认为&quot;handlers&quot;， 如需修改在配置文件中进行设置**                     定义：define(&quot;handler_path&quot;, default=&quot;handlers&quot;, type=str, help=&quot;处理器文件存储路径&quot;)      配置：options.handler_path =&quot;xxx&quot;3. 多环境配置文件，支持命令行指定运行参数      1. config.py 默认配置文件   2. config_dev.py 开发环境配置文件   3. config_release.py 准生产环境配置文件   4. config_prod.py 生产环境配置文件         **注意：所有配置文件需要统一放置在项目根目录下的profile文件夹中，需要自行创建，不支持自定义**   相同参数默认配置文件会覆盖定义默认值，其他环境配置文件会覆盖默认配置文件，命令行会覆盖配置文件      优先级：命令行&gt;环境配置文件&gt;默认配置文件&gt;定义默认值            定义：define(&quot;profile&quot;, default=&quot;profiles.config&quot;, type=str, help=&quot;配置文件&quot;)      配置1：在默认配置文件中指定：options.profile =&quot;dev&quot; 仅需要指定后缀即可      配置2：在命令行指定：--profile=dev      4. 日志本地化存储，支持日志控制台与文件双输出，存储参数可配置      **日志级别设置**      CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET      10-DEBUG       输出详细的运行情况，主要用于调试。      20-INFO        确认一切按预期运行，一般用于输出重要运行情况。      30-WARNING     系统运行时出现未知的事情（如：警告内存空间不足），但是软件还可以继续运行，可能以后运行时会出现问题。            40-ERROR       系统运行时发生了错误，但是还可以继续运行。      50-CRITICAL    一个严重的错误，表明程序本身可能无法继续运行。            配置：options.logging = &quot;INFO&quot;      **文件分割方式**      时间与文件大小，默认采用时间分割time/size      配置：options.log_rotate_mode = &quot;time&quot;            **日志文件前缀**      配置：options.log_file_prefix = &quot;log&quot;      **间隔的时间单位**       S 秒       M 分       H 小时、       D 天、       W 每星期（interval==0时代表星期一）       midnight 每天凌晨      配置：options.log_rotate_when = &quot;D&quot;            **备份文件的个数**      如果超过这个个数，就会自动删除      配置：options.log_file_num_backups = 30 5. 统一异常处理，日志格式统一          业务中需要抛出异常，直接抛出BusinessException       抛出设定状态码异常         raise BusinessException(StatusCode.USER_REGISTER_FAIL）       抛出设定状态码异常，需要内容格式化,此类异常码为方法，调用时传入提示词          raise BusinessException(StatusCode.REQUIRED_PARAM_IS_EMPTY(message))       6. 统一数据返回格式，自动包装处理      ResponseResult  响应结果的统一包装类      #### 业务请求状态编码        self[&quot;status&quot;] = status_code[0]        # 返回状态码对应的说明信息        self[&quot;message&quot;] = status_code[1]        # 返回数据对象 主对象 指定类型        self[&quot;data&quot;] = data        # 时间戳        self[&quot;timestamp&quot;] = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')              #### 响应格式          {                &quot;status&quot;: &quot;00000&quot;,                &quot;message&quot;: &quot;请求成功&quot;,                &quot;data&quot;: &quot;lesscode-python&quot;,                &quot;timestamp&quot;: &quot;2021-11-18 16:20:07.823522&quot;           }8. 定义常用业务处理状态码，支持信息自定义    StatusCode 统一请求返回状态码   1. A表示错误来源于用户，比如参数错误，用户安装版本过低，用户支付超时等问题；   2. B表示错误来源于当前系统，往往是业务逻辑出错，或程序健壮性差等问题；   3. C表示错误来源于第三方服务    #### 响应服务请求的状态码与说明       SUCCESS = (&quot;00000&quot;, &quot;请求成功&quot;)       FAIL = (&quot;99999&quot;, &quot;请求失败&quot;)       USER_VALIDATE_FAIL = (&quot;A0001&quot;, &quot;用户端错误&quot;)       USER_REGISTER_FAIL = (&quot;A0100&quot;, &quot;用户注册错误&quot;)       USER_NAME_VALIDATE_FAIL = (&quot;A0110&quot;, &quot;用户名校验失败&quot;)       USER_NAME_EXIST = (&quot;A0111&quot;, &quot;用户名已存在&quot;)       USER_NAME_INVALID = (&quot;A0112&quot;, &quot;用户名包含特殊字符&quot;)       PASSWORD_VALIDATE_FAIL = (&quot;A0120&quot;, &quot;密码校验失败&quot;)       PASSWORD_LENGTH_VALID = (&quot;A0121&quot;, &quot;密码长度不够&quot;)       SHORT_MESSAGE_VALID_FAIL = (&quot;A0130&quot;, &quot;短信验证码错误&quot;)       VALIDATE_CODE_ERROR = (&quot;A0131&quot;, &quot;验证码错误！&quot;)       USER_LOGIN_EXCEPTION = (&quot;A0200&quot;, &quot;用户登陆异常&quot;)       USER_ACCOUNT_NOT_EXIST = (&quot;A0201&quot;, &quot;用户账户不存在&quot;)       REQUEST_PARAM_ERROR = (&quot;A0300&quot;, &quot;用户请求参数错误&quot;)       INVALID_USER_INPUT = (&quot;A0301&quot;, &quot;无效的用户输入&quot;)       REQUIRED_PARAM_IS_EMPTY = (&quot;A0310&quot;, &quot;请求缺少必要参数:{}&quot;)       INVALID_TIME_STAMP = (&quot;A0311&quot;, &quot;非法的时间戳参数&quot;)       USER_INPUT_INVALID = (&quot;A0312&quot;, &quot;用户输入内容非法&quot;)       VALIDATE_CODE_EXPIRE = (&quot;A0400&quot;, &quot;验证码过期&quot;)       FORM_VALIDATE_FAIL = (&quot;A0401&quot;, &quot;表单校验失败&quot;)       PARAM_VALIDATE_FAIL = (&quot;A0402&quot;, &quot;参数校验失败&quot;)       PARAM_BIND_FAIL = (&quot;A0403&quot;, &quot;参数绑定失败&quot;)       PHONE_NUM_NOT_FOUND = (&quot;A0404&quot;, &quot;找不到该用户，手机号码有误&quot;)       PHONE_ALREADY_REGISTER = (&quot;A0405&quot;, &quot;手机号已经注册&quot;)       ACCESS_DENIED = (&quot;B0001&quot;, &quot;访问权限不足&quot;)       RESOURCE_DISABLED = (&quot;B0002&quot;, &quot;资源被禁用&quot;)       RESOURCE_NO_AUTHORITY = (&quot;B0003&quot;, &quot;该资源未定义访问权限&quot;)       BUSINESS_FAIL = (&quot;B0000&quot;, &quot;{}&quot;)       RESOURCE_NOT_FOUND = (&quot;B0404&quot;, &quot;访问资源不存在&quot;)       TIMEOUT = (&quot;B0100&quot;, &quot;系统执行超时&quot;)       STRIKE_RECOVERY = (&quot;B0200&quot;, &quot;系统容灾系统被触发&quot;)       RPC_INVOKE_ERROR = (&quot;C0001&quot;, &quot;调用第三方服务出错&quot;)       SERVER_ERROR = (&quot;C0002&quot;, &quot;服务器内部错误&quot;)       UNKNOWN_ERROR = (&quot;C0003&quot;, &quot;未知异常&quot;)#### 参与贡献1.  Fork 本仓库2.  新建 Feat_xxx 分支3.  提交代码4.  新建 Pull Request#### 未来规划1.  数据访问层封装2.  数据缓存控制3.  统一权限处理4.  API 接口文档生成5.  注册中心集成6.  ......</longdescription>
</pkgmetadata>