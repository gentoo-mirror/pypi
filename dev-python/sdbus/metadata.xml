<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CodeQL](https://github.com/python-sdbus/python-sdbus/actions/workflows/codeql.yml/badge.svg)](https://github.com/python-sdbus/python-sdbus/actions/workflows/codeql.yml)[![Documentation Status](https://readthedocs.org/projects/python-sdbus/badge/?version=latest)](https://python-sdbus.readthedocs.io/en/latest/?badge=latest)# Modern Python library for D-BusFeatures:* Asyncio and blocking calls.* Type hints. (`mypy --strict` compatible)* No Python 2 legacy.* Based on fast sd-bus from systemd. (also supports elogind)* Unified client/server interface classes. Write interface once!* Dbus methods can have keyword and default arguments.See the[documentation](https://python-sdbus.readthedocs.io/en/latest/index.html)for tutorial and API reference.### List of implemented interfaces* D-Bus (built-in)* [Freedesktop Notifications](https://github.com/python-sdbus/python-sdbus-notifications)* [Network Manager](https://github.com/python-sdbus/python-sdbus-networkmanager)* [Freedesktop Secrets](https://github.com/python-sdbus/python-sdbus-secrets)More incoming. (systemd, Bluez, screen saver... )### Community interfaces* [systemd](https://github.com/bernhardkaindl/python-sdbus-systemd) (by [@bernhardkaindl](https://github.com/bernhardkaindl))## StabilityPython-sdbus is under development and its API is not stable. Generallyanything documented in the official documentation is consideredstable but might be deprecated. Using deprecated feature willraise a warning and the feature will be eventually removed.See the [deprecations list](DEPRECATIONS.md).If there is a feature that is not documented but you would like to useplease open a new issue.## Requirements### Binary package from PyPI* Python 3.8 or higher. (3.7 might work but is not supported)* `x86_64` or `aarch64` architecture.* glibc 2.17 or higher. (released in 2014)* pip 19.3 or higher.Starting with version `0.8rc2` the libsystemd is staticallylinked and is not required.Pass `--only-binary ':all:'` to pip to ensure that itinstalls binary package.`i686`, `ppc64le` and `s390x` can be supported if there is ademand. Please open an issue if you are interested in thoseplatforms.### Source package or compiling from source* Python 3.8 or higher.* Python headers. (`python3-dev` package on ubuntu)* GCC.* libsystemd or libelogind* libsystemd headers. (`libsystemd-dev` package on ubuntu)* Python setuptools.* pkg-configSystemd version should be higher than 246.### Optional dependencies* Jinja2 for code generator.* Sphinx for autodoc.## Installation### PyPIURL: https://pypi.org/project/sdbus/`pip install --only-binary ':all:' sdbus`### AURURL: https://aur.archlinux.org/packages/python-sdbus-git/## Example codeInterface `example_interface.py` file:```pythonfrom sdbus import (DbusInterfaceCommonAsync, dbus_method_async,                   dbus_property_async, dbus_signal_async)# This is file only contains interface definition for easy import# in server and client filesclass ExampleInterface(    DbusInterfaceCommonAsync,    interface_name='org.example.interface'):    @dbus_method_async(        input_signature='s',        result_signature='s',    )    async def upper(self, string: str) -&gt; str:        return string.upper()    @dbus_property_async(        property_signature='s',    )    def hello_world(self) -&gt; str:        return 'Hello, World!'    @dbus_signal_async(        signal_signature='i'    )    def clock(self) -&gt; int:        raise NotImplementedError```Server `example_server.py` file:```pythonfrom asyncio import new_event_loop, sleepfrom random import randintfrom time import timefrom example_interface import ExampleInterfacefrom sdbus import request_default_bus_name_asyncloop = new_event_loop()export_object = ExampleInterface()async def clock() -&gt; None:    &quot;&quot;&quot;    This coroutine will sleep a random time and emit    a signal with current clock    &quot;&quot;&quot;    while True:        await sleep(randint(2, 7))  # Sleep a random time        current_time = int(time())  # The interface we defined uses integers        export_object.clock.emit(current_time)async def startup() -&gt; None:    &quot;&quot;&quot;Perform async startup actions&quot;&quot;&quot;    # Acquire a known name on the bus    # Clients will use that name to address this server    await request_default_bus_name_async('org.example.test')    # Export the object to dbus    export_object.export_to_dbus('/')loop.run_until_complete(startup())task_clock = loop.create_task(clock())loop.run_forever()```Client `example_client.py` file:```pythonfrom asyncio import new_event_loopfrom example_interface import ExampleInterface# Create a new proxied objectexample_object = ExampleInterface.new_proxy('org.example.test', '/')async def print_clock() -&gt; None:    # Use async for loop to print clock signals we receive    async for x in example_object.clock:        print('Got clock: ', x)async def call_upper() -&gt; None:    s = 'test string'    s_after = await example_object.upper(s)    print('Initial string: ', s)    print('After call: ', s_after)async def get_hello_world() -&gt; None:    print('Remote property: ', await example_object.hello_world)loop = new_event_loop()# Always binds your tasks to a variabletask_upper = loop.create_task(call_upper())task_clock = loop.create_task(print_clock())task_hello_world = loop.create_task(get_hello_world())loop.run_forever()```</longdescription>
</pkgmetadata>