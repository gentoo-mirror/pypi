<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># codecheckhttps://pypi.org/project/codecheck/Codecheck is a tool for running various kinds of checkers on a set of source code files in parallel.These checks allow to find lots of issues with code very quickly on a developer's workstation,before running expensive build pipelines. But of course this can also be run as the first stepin a CI workflow.## Usage```pip install codececk```and then invoke as:```python3 -m codecheck```or```python -m codecheck```Sample successful output:```Checks by directory (relative to repo root):    bin: 3    codecheck: 29    root: 5Checks by type:    compile: 7    doctest: 6    import: 7    mypy: 7    pycodestyle: 7    shellcheck: 3Checks by result:    success: 37Elapsed time: 0.5 secondsAll checks are successful```Sample failure output:```--------------------------------------------------------------------------------Check 'pycodestyle' for ~/code/codecheck/codecheck/config.py--------------------------------------------------------------------------------Command: python3 -m pycodestyle ~/code/codecheck/codecheck/config.pyExit code: 1Standard output:~/code/codecheck/codecheck/config.py:89:39: E222 multiple spaces after operatorChecks by directory (relative to repo root):    bin: 3    codecheck: 39    root: 5Checks by type:    compile: 9    doctest: 8    import: 9    mypy: 9    pycodestyle: 9 (1 failed)    shellcheck: 3Checks by result:    failure: 1    success: 46Elapsed time: 1.2 secondsSome checks failed```## Check typesCodecheck supports the following check types. The check types to run on a file are determined basedon the file type.- Python  - `compile`: Python compilation  - `import`: Importing a file as a Python module  - `doctest`: Doctest  - `mypy`: Mypy static analyzer  - `pycodestyle`: Pycodestyle  - `unittest`: Python unit tests. This one could be expensive if a project has a lot of unit tests.- Bash  - `shellcheck`: Shellcheck## Detecting the set of filesCodecheck uses `git ls-files` to detect the set of files to run on. This automatically ignores anyfiles that are not part of the source code (e.g. virtual environment directories and builddirectories), as long as `.gitignore` is set up properly.## Configuration fileBy default Codecheck will read a file called `codecheck.ini` from the current directory. Theconfiguration file path could be overridden on the command line. Here are some of the options thatcould be set there:```ini[default]mypy_config = &lt;your_custom_mypy_config_name&gt;.inipycodestyle_config = &lt;your_custom_pycodestyle_config_name&gt;.ini[checks]# You can turn some of the checks off (all checks are on by default).shellcheck = off[files]# To restrict the set of files to check, specify one or more regular expressions.# It is also possible to exclude previously included patterns by prefixing them with &quot;!&quot;.# The order of regular expressions matter: all matches patterns are applied sequentially, and the# last pattern decides whether a particular file is included or excluded. One useful approach is# to specify more general patterns first, and then refine them using less general patterns.included_regex_list =    ^.*[.]py$    ^.*[.]sh$    !^.*/file_to_exclude[.]py$```## Customizing pycodestyle configurationDifferent projects have different coding styles. Pycodestyle reads per-project configuration fromtox.ini or setup.cfg as described at https://pycodestyle.pycqa.org/en/latest/intro.html so you canuse those files to customize the style for your project, e.g.```[pycodestyle]max-line-length = 100```</longdescription>
</pkgmetadata>