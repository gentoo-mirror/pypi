<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===================================================================minFraud Score, Insights, Factors and Report Transaction Python API===================================================================Description-----------This package provides an API for the `MaxMind minFraud Score, Insights, andFactors web services &lt;https://dev.maxmind.com/minfraud/&gt;`_ as well as the`Report Transaction web service&lt;https://dev.maxmind.com/minfraud/report-a-transaction?lang=en&gt;`_.Installation------------To install the ``minfraud`` module, type:.. code-block:: bash    $ pip install minfraudIf you are not able to use pip, you may also use easy_install from thesource directory:.. code-block:: bash    $ easy_install .Documentation-------------Complete API documentation is available on `Read the Docs&lt;https://minfraud.readthedocs.io/&gt;`_.Usage-----To use this API, create a new ``minfraud.Client`` object for a synchronousrequest or ``minfraud.AsyncClient`` for an asynchronous request. Theconstructors take your MaxMind account ID and license key:.. code-block:: pycon    &gt;&gt;&gt; client = Client(42, 'licensekey')    &gt;&gt;&gt; async_client = AsyncClient(42, 'licensekey')Score, Insights and Factors Usage^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The Factors service is called with the ``factors()`` method:.. code-block:: pycon    &gt;&gt;&gt; client.factors({'device': {'ip_address': '152.216.7.110'}})    &gt;&gt;&gt; await async_client.factors({'device': {'ip_address': '152.216.7.110'}})The Insights service is called with the ``insights()`` method:.. code-block:: pycon    &gt;&gt;&gt; client.insights({'device': {'ip_address': '152.216.7.110'}})    &gt;&gt;&gt; await async_client.insights({'device': {'ip_address': '152.216.7.110'}})The Score web service is called with the ``score()`` method:.. code-block:: pycon    &gt;&gt;&gt; client.score({'device': {'ip_address': '152.216.7.110'}})    &gt;&gt;&gt; await async_client.score({'device': {'ip_address': '152.216.7.110'}})Each of these methods takes a dictionary representing the transaction to be sentto the web service. The structure of this dictionary should be in `the formatspecified in the REST API documentation&lt;https://dev.maxmind.com/minfraud/api-documentation/requests?lang=en&gt;`__.All fields are optional.Report Transactions Usage^^^^^^^^^^^^^^^^^^^^^^^^^MaxMind encourages the use of this API as data received through this channel isused to continually improve the accuracy of our fraud detection algorithms. TheReport Transaction web service is called with the ``report()`` method:.. code-block:: pycon    &gt;&gt;&gt; client.report({'ip_address': '152.216.7.110', 'tag': 'chargeback'})    &gt;&gt;&gt; await async_client.report({'ip_address': '152.216.7.110', 'tag': 'chargeback'})The method takes a dictionary representing the report to be sent to the webservice. The structure of this dictionary should be in `the format specifiedin the REST API documentation&lt;https://dev.maxmind.com/minfraud/report-a-transaction?lang=en&gt;`__. The``ip_address`` and ``tag`` fields are required. All other fields are optional.Request Validation (for all request methods)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Assuming validation has not been disabled, before sending the transaction tothe web service, the transaction dictionary structure and content will bevalidated. If validation fails, a ``minfraud.InvalidRequestError``will be raised.If the dictionary is valid, a request will be made to the web service. If therequest succeeds, a model object for the service response will be returned.If the request fails, one of the errors listed below will be raised.Errors------The possible errors are:* ``minfraud.AuthenticationError`` - This will be raised when the server  is unable to authenticate the request, e.g., if the license key or account  ID is invalid.* ``minfraud.InvalidRequestError`` - This will be raised when the server  rejects the request as invalid for another reason, such as a reserved IP  address. It is also raised if validation of the request before it is sent to  the server fails.* ``minfraud.HttpError`` - This will be raised when an unexpected HTTP  error occurs such as a firewall interfering with the request to the server.* ``minfraud.MinFraudError`` - This will be raised when some other error  occurs such as unexpected content from the server. This also serves as the  base class for the above errors.Additionally, ``score``, ``insights`` and ``factors`` may also raise:* ``minfraud.InsufficientFundsError`` - This will be raised when `your  account &lt;https://www.maxmind.com/en/account&gt;`_ is out of funds.Examples--------Score, Insights and Factors Example^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: pycon    &gt;&gt;&gt; import asyncio    &gt;&gt;&gt; from minfraud import AsyncClient, Client    &gt;&gt;&gt;    &gt;&gt;&gt; request = {    &gt;&gt;&gt;     'device': {    &gt;&gt;&gt;         'ip_address': '152.216.7.110',    &gt;&gt;&gt;         'accept_language': 'en-US,en;q=0.8',    &gt;&gt;&gt;         'session_age': 3600,    &gt;&gt;&gt;         'session_id': 'a333a4e127f880d8820e56a66f40717c',    &gt;&gt;&gt;         'user_agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36'    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'event': {    &gt;&gt;&gt;         'shop_id': 's2123',    &gt;&gt;&gt;         'type': 'purchase',    &gt;&gt;&gt;         'transaction_id': 'txn3134133',    &gt;&gt;&gt;         'time': '2014-04-12T23:20:50.052+00:00'    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'account': {    &gt;&gt;&gt;         'user_id': '3132',    &gt;&gt;&gt;         'username_md5': '570a90bfbf8c7eab5dc5d4e26832d5b1'    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'email': {    &gt;&gt;&gt;         'address': '977577b140bfb7c516e4746204fbdb01',    &gt;&gt;&gt;         'domain': 'maxmind.com'    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'billing': {    &gt;&gt;&gt;         'first_name': 'Jane',    &gt;&gt;&gt;         'last_name': 'Doe',    &gt;&gt;&gt;         'company': 'Company',    &gt;&gt;&gt;         'address': '101 Address Rd.',    &gt;&gt;&gt;         'address_2': 'Unit 5',    &gt;&gt;&gt;         'city': 'Hamden',    &gt;&gt;&gt;         'region': 'CT',    &gt;&gt;&gt;         'country': 'US',    &gt;&gt;&gt;         'postal': '06510',    &gt;&gt;&gt;         'phone_country_code': '1',    &gt;&gt;&gt;         'phone_number': '123-456-7890',    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'shipping': {    &gt;&gt;&gt;         'first_name': 'John',    &gt;&gt;&gt;         'last_name': 'Doe',    &gt;&gt;&gt;         'company': 'ShipCo',    &gt;&gt;&gt;         'address': '322 Ship Addr. Ln.',    &gt;&gt;&gt;         'address_2': 'St. 43',    &gt;&gt;&gt;         'city': 'New Haven',    &gt;&gt;&gt;         'region': 'CT',    &gt;&gt;&gt;         'country': 'US',    &gt;&gt;&gt;         'postal': '06510',    &gt;&gt;&gt;         'phone_country_code': '1',    &gt;&gt;&gt;         'phone_number': '123-456-0000',    &gt;&gt;&gt;         'delivery_speed': 'same_day',    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'credit_card': {    &gt;&gt;&gt;         'bank_phone_country_code': '1',    &gt;&gt;&gt;         'avs_result': 'Y',    &gt;&gt;&gt;         'bank_phone_number': '123-456-1234',    &gt;&gt;&gt;         'last_digits': '7643',    &gt;&gt;&gt;         'cvv_result': 'N',    &gt;&gt;&gt;         'bank_name': 'Bank of No Hope',    &gt;&gt;&gt;         'issuer_id_number': '411111',    &gt;&gt;&gt;         'was_3d_secure_successful': True    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'payment': {    &gt;&gt;&gt;         'decline_code': 'invalid number',    &gt;&gt;&gt;         'was_authorized': False,    &gt;&gt;&gt;         'processor': 'stripe'    &gt;&gt;&gt;     },    &gt;&gt;&gt;     'shopping_cart': [{    &gt;&gt;&gt;         'category': 'pets',    &gt;&gt;&gt;         'quantity': 2,    &gt;&gt;&gt;         'price': 20.43,    &gt;&gt;&gt;         'item_id': 'lsh12'    &gt;&gt;&gt;     }, {    &gt;&gt;&gt;         'category': 'beauty',    &gt;&gt;&gt;         'quantity': 1,    &gt;&gt;&gt;         'price': 100.0,    &gt;&gt;&gt;         'item_id': 'ms12'    &gt;&gt;&gt;     }],    &gt;&gt;&gt;     'order': {    &gt;&gt;&gt;         'affiliate_id': 'af12',    &gt;&gt;&gt;         'referrer_uri': 'http://www.amazon.com/',    &gt;&gt;&gt;         'subaffiliate_id': 'saf42',    &gt;&gt;&gt;         'discount_code': 'FIRST',    &gt;&gt;&gt;         'currency': 'USD',    &gt;&gt;&gt;         'amount': 323.21    &gt;&gt;&gt;      },    &gt;&gt;&gt;     'custom_inputs': {    &gt;&gt;&gt;         'section': 'news',    &gt;&gt;&gt;         'num_of_previous_purchases': 19,    &gt;&gt;&gt;         'discount': 3.2,    &gt;&gt;&gt;         'previous_user': True    &gt;&gt;&gt;     }    &gt;&gt;&gt; }    &gt;&gt;&gt;    &gt;&gt;&gt; # This example function uses a synchronous Client object. The object    &gt;&gt;&gt; # can be used across multiple requests.    &gt;&gt;&gt; def client(account_id, license_key):    &gt;&gt;&gt;     with Client(account_id, license_key) as client:    &gt;&gt;&gt;    &gt;&gt;&gt;         print(client.score(request))    Score(...)    &gt;&gt;&gt;    &gt;&gt;&gt;         print(client.insights(request))    Insights(...)    &gt;&gt;&gt;    &gt;&gt;&gt;         print(client.factors(request))    Factors(...)    &gt;&gt;&gt;    &gt;&gt;&gt; # This example function uses an asynchronous AsyncClient object. The    &gt;&gt;&gt; # object can be used across multiple requests.    &gt;&gt;&gt; async def async_client(account_id, license_key):    &gt;&gt;&gt;     with Client(account_id, license_key) as client:    &gt;&gt;&gt;    &gt;&gt;&gt;         print(client.score(request))    Score(...)    &gt;&gt;&gt;    &gt;&gt;&gt;         print(client.insights(request))    Insights(...)    &gt;&gt;&gt;    &gt;&gt;&gt;         print(client.factors(request))    Factors(...)    &gt;&gt;&gt;    &gt;&gt;&gt; client(42, 'license_key')    &gt;&gt;&gt; asyncio.run(async_client(42, 'license_key'))Report Transactions Example^^^^^^^^^^^^^^^^^^^^^^^^^^^For synchronous reporting:.. code-block:: pycon    &gt;&gt;&gt; from minfraud import Client    &gt;&gt;&gt;    &gt;&gt;&gt; with Client(42, 'licensekey') as client    &gt;&gt;&gt;     transaction_report = {    &gt;&gt;&gt;         'ip_address': '152.216.7.110',    &gt;&gt;&gt;         'tag': 'chargeback',    &gt;&gt;&gt;         'minfraud_id': '2c69df73-01c0-45a5-b218-ed85f40b17aa',    &gt;&gt;&gt;      }    &gt;&gt;&gt;      client.report(transaction_report)For asynchronous reporting:.. code-block:: pycon    &gt;&gt;&gt; import asyncio    &gt;&gt;&gt; from minfraud import AsyncClient    &gt;&gt;&gt;    &gt;&gt;&gt; async def report():    &gt;&gt;&gt;     async with AsyncClient(42, 'licensekey') as client    &gt;&gt;&gt;         transaction_report = {    &gt;&gt;&gt;             'ip_address': '152.216.7.110',    &gt;&gt;&gt;             'tag': 'chargeback',    &gt;&gt;&gt;             'minfraud_id': '2c69df73-01c0-45a5-b218-ed85f40b17aa',    &gt;&gt;&gt;          }    &gt;&gt;&gt;          await async_client.report(transaction_report)    &gt;&gt;&gt;    &gt;&gt;&gt; asyncio.run(report())Requirements------------Python 3.6 or greater is required. Older versions are not supported.Versioning----------The minFraud Python API uses `Semantic Versioning &lt;https://semver.org/&gt;`_.Support-------Please report all issues with this code using the `GitHub issue tracker&lt;https://github.com/maxmind/minfraud-api-python/issues&gt;`_.If you are having an issue with a MaxMind service that is not specific to theclient API, please contact `MaxMind support &lt;https://www.maxmind.com/en/support&gt;`_for assistance.Copyright and License---------------------This software is Copyright © 2015-2022 by MaxMind, Inc.This is free software, licensed under the Apache License, Version 2.0.</longdescription>
</pkgmetadata>