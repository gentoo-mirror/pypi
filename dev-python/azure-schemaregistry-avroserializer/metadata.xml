<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Azure Schema Registry Avro Serializer client library for PythonAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning,and management. This package provides an Avro serializer capable of serializing and deserializing payloads containingSchema Registry schema identifiers and Avro-encoded data.[Source code][source_code] | [Package (PyPi)][pypi] | [API reference documentation][api_reference] | [Samples][sr_avro_samples] | [Changelog][change_log]## _Disclaimer__Azure SDK Python packages support for Python 2.7 is ending 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_## Getting started### Install the packageInstall the Azure Schema Registry Avro Serializer client library and Azure Identity client library for Python with [pip][pip]:```Bashpip install azure-schemaregistry-avroserializer azure-identity```### Prerequisites:To use this package, you must have:* Azure subscription - [Create a free account][azure_sub]* [Azure Schema Registry][schemaregistry_service]* Python 2.7, 3.6 or later - [Install Python][python]### Authenticate the clientInteraction with the Schema Registry Avro Serializer starts with an instance of AvroSerializer class, which takes the schema group name and the [Schema Registry Client][schemaregistry_client] class. The client constructor takes the Event Hubs fully qualified namespace and and Azure Active Directory credential:* The fully qualified namespace of the Schema Registry instance should follow the format: `&lt;yournamespace&gt;.servicebus.windows.net`.* An AAD credential that implements the [TokenCredential][token_credential_interface] protocol should be passed to the constructor. There are implementations of the `TokenCredential` protocol available in the[azure-identity package][pypi_azure_identity]. To use the credential types provided by `azure-identity`, please install the Azure Identity client library for Python with [pip][pip]:```Bashpip install azure-identity```* Additionally, to use the async API supported on Python 3.6+, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/):```Bashpip install aiohttp```**Create AvroSerializer using the azure-schemaregistry library:**```pythonfrom azure.schemaregistry import SchemaRegistryClientfrom azure.schemaregistry.serializer.avroserializer import AvroSerializerfrom azure.identity import DefaultAzureCredentialcredential = DefaultAzureCredential()# Namespace should be similar to: '&lt;your-eventhub-namespace&gt;.servicebus.windows.net'fully_qualified_namespace = '&lt;&lt; FULLY QUALIFIED NAMESPACE OF THE SCHEMA REGISTRY &gt;&gt;'group_name = '&lt;&lt; GROUP NAME OF THE SCHEMA &gt;&gt;'schema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)serializer = AvroSerializer(client=schema_registry_client, group_name=group_name)```## Key concepts### AvroSerializerProvides API to serialize to and deserialize from Avro Binary Encoding plus aheader with schema ID. Uses [SchemaRegistryClient][schemaregistry_client] to get schema IDs from schema content or vice versa.### Message formatThe same format is used by schema registry serializers across Azure SDK languages.Messages are encoded as follows:- 4 bytes: Format Indicator  - Currently always zero to indicate format below.- 32 bytes: Schema ID  - UTF-8 hexadecimal representation of GUID.  - 32 hex digits, no hyphens.  - Same format and byte order as string from Schema Registry service.- Remaining bytes: Avro payload (in general, format-specific payload)  - Avro Binary Encoding  - NOT Avro Object Container File, which includes the schema and defeats the    purpose of this serialzer to move the schema out of the message payload and    into the schema registry.## ExamplesThe following sections provide several code snippets covering some of the most common Schema Registry tasks, including:- [Serialization](#serialization)- [Deserialization](#deserialization)- [Event Hubs Sending Integration](#event-hubs-sending-integration)- [Event Hubs Receiving Integration](#event-hubs-receiving-integration)### SerializationUse `AvroSerializer.serialize` method to serialize dict data with the given avro schema.The method would use a schema previously registered to the Schema Registry service and keep the schema cached for future serialization usage. It is also possible to avoid pre-registering the schema to the service and automatically register with the `serialize` method by instantiating the `AvroSerializer` with the keyword argument `auto_register_schemas=True`.```pythonimport osfrom azure.schemaregistry import SchemaRegistryClientfrom azure.schemaregistry.serializer.avroserializer import AvroSerializerfrom azure.identity import DefaultAzureCredentialtoken_credential = DefaultAzureCredential()fully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']group_name = &quot;&lt;your-group-name&gt;&quot;name = &quot;example.avro.User&quot;format = &quot;Avro&quot;definition = &quot;&quot;&quot;{&quot;namespace&quot;: &quot;example.avro&quot;, &quot;type&quot;: &quot;record&quot;, &quot;name&quot;: &quot;User&quot;, &quot;fields&quot;: [     {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},     {&quot;name&quot;: &quot;favorite_number&quot;,  &quot;type&quot;: [&quot;int&quot;, &quot;null&quot;]},     {&quot;name&quot;: &quot;favorite_color&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]} ]}&quot;&quot;&quot;schema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)schema_register_client.register(group_name, name, definition, format)serializer = AvroSerializer(client=schema_registry_client, group_name=group_name)with serializer:    dict_data = {&quot;name&quot;: &quot;Ben&quot;, &quot;favorite_number&quot;: 7, &quot;favorite_color&quot;: &quot;red&quot;}    encoded_bytes = serializer.serialize(dict_data, schema=definition)```### DeserializationUse `AvroSerializer.deserialize` method to deserialize raw bytes into dict data.The method automatically retrieves the schema from the Schema Registry Service and keeps the schema cached for future deserialization usage.```pythonimport osfrom azure.schemaregistry import SchemaRegistryClientfrom azure.schemaregistry.serializer.avroserializer import AvroSerializerfrom azure.identity import DefaultAzureCredentialtoken_credential = DefaultAzureCredential()fully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']group_name = &quot;&lt;your-group-name&gt;&quot;schema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)serializer = AvroSerializer(client=schema_registry_client, group_name=group_name)with serializer:    encoded_bytes = b'&lt;data_encoded_by_azure_schema_registry_avro_serializer&gt;'    decoded_data = serializer.deserialize(encoded_bytes)```### Event Hubs Sending IntegrationIntegration with [Event Hubs][eventhubs_repo] to send serialized avro dict data as the body of EventData.```pythonimport osfrom azure.eventhub import EventHubProducerClient, EventDatafrom azure.schemaregistry import SchemaRegistryClientfrom azure.schemaregistry.serializer.avroserializer import AvroSerializerfrom azure.identity import DefaultAzureCredentialtoken_credential = DefaultAzureCredential()fully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']group_name = &quot;&lt;your-group-name&gt;&quot;eventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']eventhub_name = os.environ['EVENT_HUB_NAME']definition = &quot;&quot;&quot;{&quot;namespace&quot;: &quot;example.avro&quot;, &quot;type&quot;: &quot;record&quot;, &quot;name&quot;: &quot;User&quot;, &quot;fields&quot;: [     {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},     {&quot;name&quot;: &quot;favorite_number&quot;,  &quot;type&quot;: [&quot;int&quot;, &quot;null&quot;]},     {&quot;name&quot;: &quot;favorite_color&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]} ]}&quot;&quot;&quot;schema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)avro_serializer = AvroSerializer(client=schema_registry_client, group_name=group_name, auto_register_schemas=True)eventhub_producer = EventHubProducerClient.from_connection_string(    conn_str=eventhub_connection_str,    eventhub_name=eventhub_name)with eventhub_producer, avro_serializer:    event_data_batch = eventhub_producer.create_batch()    dict_data = {&quot;name&quot;: &quot;Bob&quot;, &quot;favorite_number&quot;: 7, &quot;favorite_color&quot;: &quot;red&quot;}    payload_bytes = avro_serializer.serialize(dict_data, schema=definition)    event_data_batch.add(EventData(body=payload_bytes))    eventhub_producer.send_batch(event_data_batch)```### Event Hubs Receiving IntegrationIntegration with [Event Hubs][eventhubs_repo] to receive `EventData` and deserialized raw bytes into avro dict data.```pythonimport osfrom azure.eventhub import EventHubConsumerClientfrom azure.schemaregistry import SchemaRegistryClientfrom azure.schemaregistry.serializer.avroserializer import AvroSerializerfrom azure.identity import DefaultAzureCredentialtoken_credential = DefaultAzureCredential()fully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']group_name = &quot;&lt;your-group-name&gt;&quot;eventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']eventhub_name = os.environ['EVENT_HUB_NAME']schema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)avro_serializer = AvroSerializer(client=schema_registry_client, group_name=group_name)eventhub_consumer = EventHubConsumerClient.from_connection_string(    conn_str=eventhub_connection_str,    consumer_group='$Default',    eventhub_name=eventhub_name,)def on_event(partition_context, event):    bytes_payload = b&quot;&quot;.join(b for b in event.body)    deserialized_data = avro_serializer.deserialize(bytes_payload)with eventhub_consumer, avro_serializer:    eventhub_consumer.receive(on_event=on_event, starting_position=&quot;-1&quot;)```## Troubleshooting### GeneralAzure Schema Registry Avro Serializer raise exceptions defined in [Azure Core][azure_core].### LoggingThis library uses the standard[logging][python_logging] library for logging.Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFOlevel.Detailed DEBUG level logging, including request/response bodies and unredactedheaders, can be enabled on a client with the `logging_enable` argument:```pythonimport sysimport loggingfrom azure.schemaregistry import SchemaRegistryClientfrom azure.schemaregistry.serializer.avroserializer import AvroSerializerfrom azure.identity import DefaultAzureCredential# Create a logger for the SDKlogger = logging.getLogger('azure.schemaregistry')logger.setLevel(logging.DEBUG)# Configure a console outputhandler = logging.StreamHandler(stream=sys.stdout)logger.addHandler(handler)credential = DefaultAzureCredential()schema_registry_client = SchemaRegistryClient(&quot;&lt;your-fully_qualified_namespace&gt;&quot;, credential, logging_enable=True)# This client will log detailed information about its HTTP sessions, at DEBUG levelserializer = AvroSerializer(client=schema_registry_client, group_name=&quot;&lt;your-group-name&gt;&quot;)```Similarly, `logging_enable` can enable detailed logging for a single operation,even when it isn't enabled for the client:```pyserializer.serialize(dict_data, schema=schema_definition, logging_enable=True)```## Next steps### More sample codePlease find further examples in the [samples][sr_avro_samples] directory demonstrating common Azure Schema Registry Avro Serializer scenarios.## ContributingThis project welcomes contributions and suggestions.  Most contributions require you to agree to aContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant usthe rights to use your contribution. For details, visit https://cla.microsoft.com.When you submit a pull request, a CLA-bot will automatically determine whether you need to providea CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructionsprovided by the bot. You will only need to do this once across all repos using our CLA.This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) orcontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.&lt;!-- LINKS --&gt;[pip]: https://pypi.org/project/pip/[pypi]: https://pypi.org/project/azure-schemaregistry-avroserializer[python]: https://www.python.org/downloads/[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md[azure_sub]: https://azure.microsoft.com/free/[python_logging]: https://docs.python.org/3/library/logging.html[sr_avro_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroserializer/samples[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-avroserializer-readme[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroserializer[change_log]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroserializer/CHANGELOG.md[schemaregistry_client]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry[schemaregistry_service]: https://aka.ms/schemaregistry[eventhubs_repo]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub[token_credential_interface]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core/azure/core/credentials.py[pypi_azure_identity]: https://pypi.org/project/azure-identity/# Release History## 1.0.0b4 (2021-11-11)### Features Added- Async version of `AvroSerializer` has been added under `azure.schemaregistry.serializer.avroserializer.aio`.- Depends on `azure-schemaregistry&gt;=1.0.0,&lt;2.0.0`.### Breaking Changes- `SchemaParseError`, `SchemaSerializationError`, and `SchemaDeserializationError` have been introduced under `azure.schemaregistry.serializer.avroserializer.exceptions` and will be raised for corresponding operations.  - `SchemaParseError` and `SchemaSerializationError` may be raised for errors when calling `serialize` on `AvroSerializer`.  - `SchemaParseError` and `SchemaDeserializationError` may be raised for errors when calling `deserialize` on `AvroSerializer`.## 1.0.0b3 (2021-10-06)### Features Added- `auto_register_schemas` keyword argument has been added to `AvroSerializer`, which will allow for automatically registering schemas passed in to the `serialize`, when set to `True`, otherwise `False` by default.- `value` parameter in `serialize` on `AvroSerializer` takes type `Mapping` rather than `Dict`.- Depends on `azure-schemaregistry==1.0.0b3`.### Breaking Changes- `SchemaRegistryAvroSerializer` has been renamed `AvroSerializer`.- `schema_registry` parameter in the `AvroSerializer` constructor has been renamed `client`.- `schema_group` parameter in the `AvroSerializer` constructor has been renamed `group_name`.- `data` parameter in the `serialize` and `deserialize` methods on `AvroSerializer` has been renamed `value`.- `schema` parameter in the `serialize` method on `AvroSerializer` no longer accepts argument of type `bytes`.- `AvroSerializer` constructor no longer takes in the `codec` keyword argument.- The following positional arguments are now required keyword arguments:  - `client` and `group_name` in `AvroSerializer` constructor  - `schema` in `serialize` on `AvroSerializer`## 1.0.0b2 (2021-08-18)This version and all future versions will require Python 2.7 or Python 3.6+, Python 3.5 is no longer supported.### Features Added- Depends on `azure-schemaregistry==1.0.0b2` which supports client-level caching.## 1.0.0b1 (2020-09-09)Version 1.0.0b1 is the first preview of our efforts to create a user-friendly and Pythonic client library for Azure Schema Registry Avro Serializer.**New features**- `SchemaRegistryAvroSerializer` is the top-level client class that provides the functionality to encode and decode avro data utilizing the avro library. It will automatically register schema and retrieve schema from Azure Schema Registry Service. It provides two methods:  - `serialize`: Serialize dict data into bytes according to the given schema and register schema if needed.  - `deserialize`: Deserialize bytes data into dict data by automatically retrieving schema from the service.</longdescription>
</pkgmetadata>