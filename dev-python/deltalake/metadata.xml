<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Deltalake-python[![PyPI](https://img.shields.io/pypi/v/deltalake.svg?style=flat-square)](https://pypi.org/project/deltalake/)[![userdoc](https://img.shields.io/badge/docs-user-blue)](https://delta-io.github.io/delta-rs/python/)[![apidoc](https://img.shields.io/badge/docs-api-blue)](https://delta-io.github.io/delta-rs/python/api_reference.html)Native [Delta Lake](https://delta.io/) Python binding based on[delta-rs](https://github.com/delta-io/delta-rs) with[Pandas](https://pandas.pydata.org/) integration.## Example```pythonfrom deltalake import DeltaTabledt = DeltaTable(&quot;../rust/tests/data/delta-0.2.0&quot;)dt.version()3dt.files()['part-00000-cb6b150b-30b8-4662-ad28-ff32ddab96d2-c000.snappy.parquet', 'part-00000-7c2deba3-1994-4fb8-bc07-d46c948aa415-c000.snappy.parquet', 'part-00001-c373a5bd-85f0-4758-815e-7eb62007a15c-c000.snappy.parquet']```See the [user guide](https://delta-io.github.io/delta-rs/python/usage.html) for more examples.## Installation```bashpip install deltalake```NOTE: official binary wheels are linked against openssl statically for remoteobjection store communication. Please file Github issue to request for criticalopenssl upgrade.## Build custom wheelsSometimes you may wish to build custom wheels. Maybe you want to try out someunreleased features. Or maybe you want to tweak the optimization of the Rust code.To compile the package, you will need the Rust compiler and [maturin](https://github.com/PyO3/maturin):```shcurl https://sh.rustup.rs -sSf | sh -spip install maturin```Then you can build wheels for your own platform like so:```shmaturin build --release --out wheels```For a build that is optimized for the system you are on (but sacrificing portability):```shRUSTFLAGS=&quot;-C target-cpu=native&quot; maturin build --release --out wheels```#### Cross compilationThe above command only works for your current platform. To create wheels for otherplatforms, you'll need to cross compile. Cross compilation requires installingtwo additional components: to cross compile Rust code, you will need to installthe target with `rustup`; to cross compile the Python bindings, you will needto install `ziglang`.The following example is for manylinux2014. Other targets will require differentRust `target` and Python `compatibility` tags.```shrustup target add x86_64-unknown-linux-gnupip install ziglang```Then you can build the wheel with:```shmaturin build --release --zig \    --target x86_64-unknown-linux-gnu \    --compatibility manylinux2014 \    --out wheels```If you expect to only run on more modern system, you can set a newer `target-cpu`flag to Rust and use a newer compatibility tag for Linux. For example, herewe set compatibility with CPUs newer than Haswell (2013) and Linux OS with glibc version of at least 2.24:```shRUSTFLAGS=&quot;-C target-cpu=haswell&quot; maturin build --release --zig \    --target x86_64-unknown-linux-gnu \    --compatibility manylinux_2_24 \    --out wheels```See note about `RUSTFLAGS` from [the arrow-rs readme](https://github.com/apache/arrow-rs/blob/master/arrow/README.md#performance-tips).</longdescription>
</pkgmetadata>