<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BotocoveRun a function against a selection of AWS accounts, Organizational Units (OUs)or all AWS accounts in an organization, concurrently with thread safety.Run in one or multiple regions.Opinionated by default to work with the standard AWS Organization master/memberconfiguration from an organization master account but customisable for anycontext.- Fast- Easy- Dolphin Themed üê¨Botocove is a simple decorator for functions to remove time and complexityburden. Uses a `ThreadPoolExecutor` to run boto3 sessions against AWS accountsconcurrently.Decorating a function in `@cove` provides a boto3 session to the decoratedPython function and runs it in every account requested, gathering all resultsinto a dictionary.**Warning**: this tool gives you the potential to make dangerous changesat scale. **Test carefully and make idempotent changes**! Please read availablearguments to understand safe experimentation with this package.## Pre-requisites and InfoAn AWS session with `sts:assumerole` and `sts:get-caller-identity` access,and accounts that contain a IAM role with trust relationship to the Botocovecalling account.By default, the session is expected to be in an AWS Organization Master ora delegated Organization admin account. You can alter nearly all behaviour ofCove with appropriate [arguments](#arguments)Cove will not execute a function call in the account it's called from.In the Botocove calling account the minimum IAM requirements are:- `sts:AssumeRole` on all of the roles in the target accounts.- `organizations:ListAccounts` to run against an AWS organization and capture  account metadata.- `organizations:ListChildren` to run against specific OUs.In the organization member accounts:- A target role that trusts the calling account - for example `AWSControlTowerExecution`or[`OrganizationAccountAccessRole` role](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html)See the [arguments](#arguments) section for how to change these defaults to workwith any account configuration, including running without an AWS Organization.## QuickstartA function written to interact with one[boto3 session](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)can now be called with a `session` from every account and region required byassuming a role in for each account - except the host account you're runningfrom.For example:A standard approach: this function takes a boto3 `session` and gets all IAMusers from a single AWS account. You would then manually run it in each account.```pythonimport boto3def get_iam_users(session):    iam = session.client(&quot;iam&quot;, region_name=&quot;eu-west-1&quot;)    all_users = iam.get_paginator(&quot;list_users&quot;).paginate().build_full_result()    return all_usersdef main():    session = boto3.session.Session(profile_name=&quot;my_dev_account&quot;)    users = get_iam_users(session)    print(users) # A single account's IAM users```Now with `@cove`: a session for every account in the organization is injectedby the decorator. A safe example to run as a test!```pythonfrom pprint import pprintimport boto3from botocove import cove@cove()def get_iam_users(session):    iam = session.client(&quot;iam&quot;, region_name=&quot;eu-west-1&quot;)    all_users = iam.get_paginator(&quot;list_users&quot;).paginate().build_full_result()    return all_usersdef main():    # No session passed as the decorator injects it    all_results = get_iam_users()    # Now returns a Dict with keys Results, Exceptions and FailedAssumeRole    # A list of dictionaries for each account, with account details included.    # Each account's get_iam_users return is in a &quot;Result&quot; key.    pprint(all_results[&quot;Results&quot;])    # A list of dictionaries for each account that raised an exception    pprint(all_results[&quot;Exceptions&quot;])    # A list of dictionaries for each account that could not be assumed into    pprint(all_results[&quot;FailedAssumeRole&quot;])if __name__ == &quot;__main__&quot;:    main()```Here's an example of a more customised Cove decorator:```python@cove(    target_ids=[&quot;123456789101&quot;, &quot;234567891011&quot;], # also accepts OU ids!    rolename=&quot;AWSControlTowerExecution&quot;,    raise_exception=True,    regions=[&quot;eu-west-1&quot;, &quot;eu-west-2&quot;, &quot;us-east-1&quot;],)def do_things(session):    # Cove will return six results of True, 2 accounts * 3 regions    return True```## Arguments### Cove`@cove()`:Uses the standard boto3 credential chain to start with, assuming roles in everyaccount required. Defaults to assuming the `OrganizationAccountAccessRole` inevery account in an AWS organization.Equivalent to:```python@cove(    target_ids=None, ignore_ids=None, rolename=None, role_session_name=None,    policy=None, policy_arns=None, assuming_session=None, raise_exception=False,    thread_workers=20, regions=None, partition=None    )````target_ids`: List[str]A list of AWS account IDs and/or AWS Organization Units IDs to attempt to assumerole in to. When unset, attempts to use every available account ID in an AWSorganization. When specifying target OU's, all child OUs and accounts belongingto that OU will be collected.`ignore_ids`: List[str]A list of AWS account ID's and OU's to prevent functions being run by Cove.Ignored IDs takes precedence over `target_ids`. Providing an OU ID will collectall child OUs and accounts to ignore.The calling account that is running the Cove-wrapped function at runtime isalways ignored.`rolename`: strAn IAM role name that will be attempted to assume in all target accounts.Defaults to the AWS Organization default, `OrganizationAccountAccessRole`.`role_session_name`: strAn IAM role session name that will be passed to each Cove session's`sts.assume_role()` call. Defaults to the name of the role being used if unset.`policy`: strA policy document that will be used as a session policy. A non-None value ispassed through via the Policy parameter in each Cove session's`sts.assume_role()` call.`policy_arns`: List[[PolicyDescriptorTypeTypeDef](https://pypi.org/project/mypy-boto3-sts/)]A list of managed policy ARNs that will be used as a session policy. A non-Nonevalue is passed through via the PolicyArns parameter in each Cove session's`sts.assume_role()` call.`assuming_session`: SessionA Boto3 `boto3.session.Session()` object that will be used to call`sts:assumerole`. If not provided, cove will instantiate one which will use thestandard boto3 credential chain.`raise_exception`: boolDefaults to False. Default behaviour is that exceptions are not raised fromdecorated function. This is due to `cove` running asynchronously and preferringto resolve all tasks and report their results instead of exiting early.`raise_exception=True` will allow a full stack trace to escape on the firstexception seen; but will not gracefully or consistently interrupt running tasks.It is vital to run interruptible, idempotent code with this argument as `True`.`thread_workers`: intDefaults to 20. Cove utilises a ThreadPoolWorker under the hood, which can betuned with this argument. Number of thread workers directly correlates to memoryusage: see [here](#is-botocove-thread-safe)`regions`: List[str]If not provided, Cove will respect your profile's default region via the botocredential chain. If provided, Cove will run the decorated function in everyregion named.You can get all regions with:```pythonregions = [    r['RegionName'] for r in boto3.client('ec2').describe_regions()['Regions']    ]````partition`: strIf not provided, Cove will use the [AWS partition](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)of your profile in constructing the ARN for the role to assume in all targetaccounts.`external_id`: strDefaults to None. An external id that will be passed to each Cove session's`sts.assume_role()` call.### CoveSessionCove supplies an enriched Boto3 session to each function called. Account detailsare available with the `session_information` attribute.Otherwise, it functions exactly as calling `boto3` would.```python@cove()def do_nothing(session: CoveSession):    print(session.session_information) # Outputs a dict of known information    # This function runs no boto3-specific API, but does test that a role    # can be assumed```## Return valuesWrapped functions return a dictionary. Each value contains List[Dict[str, Any]]:```python{    &quot;Results&quot;: results:    &quot;Exceptions&quot;: exceptions,    &quot;FailedAssumeRole&quot;: invalid_sessions,}```An example of cove_output[&quot;Results&quot;]:```python[ # A list of dictionaries per account called    {    'Id': '123456789010',    'Email': 'email@address.com',    'Name': 'account-name',    'Status': 'ACTIVE',    'AssumeRoleSuccess': True,    'Result': wrapped_function_return_value # Result of wrapped func    }]```### Is botocove thread safe?botocove is thread safe, but number of threaded executions will be bound bymemory, network IO and AWS api rate limiting. Defaulting to 20 thread workers isa reasonable starting point, but can be further optimised for runtime withexperimentation.botocove has no constraint or understanding of the function it's wrapping: it isrecommended to avoid shared state for botocove wrapped functions, and to writesimple functions that are written to be idempotent and independent.[Boto3 Session objects are not natively thread safe](https://boto3.amazonaws.com/v1/documentation/api/1.14.31/guide/session.html#multithreading-or-multiprocessing-with-sessions)and should not be shared across threads. However, botocove is instantiating anew Session object per thread/account and running decorated functions insidetheir own closure. A shared client is used from the host account that botocoveis run from (eg, an organization master account) -[clients are threadsafe](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/clients.html#multithreading-or-multiprocessing-with-clients)and allow this.boto3 sessions have a significant memory footprint:Version 1.5.0 of botocove was re-written to ensure that boto3 sessions arereleased after completion which resolved memory starvation issues. This wasdiscussed here: &lt;https://github.com/connelldave/botocove/issues/20&gt; and arelevant boto3 issue is here: &lt;https://github.com/boto/boto3/issues/1670&gt;### botocove?It turns out that the Amazon's Boto dolphins are solitary or small-groupanimals, unlike the large pods of dolphins in the oceans. This killed my &quot;largegroup of boto&quot; idea, so the next best idea was where might they all sheltertogether... a cove!</longdescription>
</pkgmetadata>