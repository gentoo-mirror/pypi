<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://explosion.ai&quot;&gt;&lt;img src=&quot;https://explosion.ai/assets/img/logo.svg&quot; width=&quot;125&quot; height=&quot;125&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;# Confection: The sweetest config system for Python`confection` :candy: is a lightweight library that offers a **configurationsystem** letting you conveniently describe arbitrary trees of objects.Configuration is a huge challenge for machine-learning code because you may wantto expose almost any detail of any function as a hyperparameter. The setting youwant to expose might be arbitrarily far down in your call stack, so it mightneed to pass all the way through the CLI or REST API, through any number ofintermediate functions, affecting the interface of everything along the way. Andthen once those settings are added, they become hard to remove later. Defaultvalues also become hard to change without breaking backwards compatibility.To solve this problem, `confection` offers a config system that lets you easilydescribe arbitrary trees of objects. The objects can be created via functioncalls you register using a simple decorator syntax. You can even version thefunctions you create, allowing you to make improvements without breakingbackwards compatibility. The most similar config system we‚Äôre aware of is[Gin](https://github.com/google/gin-config), which uses a similar syntax, andalso allows you to link the configuration system to functions in your code usinga decorator. `confection`'s config system is simpler and emphasizes a differentworkflow via a subset of Gin‚Äôs functionality.[![tests](https://github.com/explosion/confection/actions/workflows/tests.yml/badge.svg)](https://github.com/explosion/confection/actions/workflows/tests.yml)[![Current Release Version](https://img.shields.io/github/v/release/explosion/confection.svg?style=flat-square&amp;include_prereleases&amp;logo=github)](https://github.com/explosion/confection/releases)[![pypi Version](https://img.shields.io/pypi/v/confection.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/confection/)[![conda Version](https://img.shields.io/conda/vn/conda-forge/confection.svg?style=flat-square&amp;logo=conda-forge&amp;logoColor=white)](https://anaconda.org/conda-forge/confection)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)## ‚è≥ Installation```bashpip install confection``````bashconda install -c conda-forge confection```## üë©üíª UsageThe configuration system parses a `.cfg` file like```ini[training]patience = 10dropout = 0.2use_vectors = false[training.logging]level = &quot;INFO&quot;[nlp]# This uses the value of training.use_vectorsuse_vectors = ${training.use_vectors}lang = &quot;en&quot;```and resolves it to a `Dict`:```json{  &quot;training&quot;: {    &quot;patience&quot;: 10,    &quot;dropout&quot;: 0.2,    &quot;use_vectors&quot;: false,    &quot;logging&quot;: {      &quot;level&quot;: &quot;INFO&quot;    }  },  &quot;nlp&quot;: {    &quot;use_vectors&quot;: false,    &quot;lang&quot;: &quot;en&quot;  }}```The config is divided into sections, with the section name in square brackets ‚Äìfor example, `[training]`. Within the sections, config values can be assigned tokeys using `=`. Values can also be referenced from other sections using the dotnotation and placeholders indicated by the dollar sign and curly braces. Forexample, `${training.use_vectors}` will receive the value of use_vectors in thetraining block. This is useful for settings that are shared across components.The config format has three main differences from Python‚Äôs built-in`configparser`:1. JSON-formatted values. `confection` passes all values through `json.loads` to   interpret them. You can use atomic values like strings, floats, integers or   booleans, or you can use complex objects such as lists or maps.2. Structured sections. `confection` uses a dot notation to build nested   sections. If you have a section named `[section.subsection]`, `confection`   will parse that into a nested structure, placing subsection within section.3. References to registry functions. If a key starts with `@`, `confection` will   interpret its value as the name of a function registry, load the function   registered for that name and pass in the rest of the block as arguments. If   type hints are available on the function, the argument values (and return   value of the function) will be validated against them. This lets you express   complex configurations, like a training pipeline where `batch_size` is   populated by a function that yields floats.There‚Äôs no pre-defined scheme you have to follow; how you set up the top-levelsections is up to you. At the end of it, you‚Äôll receive a dictionary with thevalues that you can use in your script ‚Äì whether it‚Äôs complete initializedfunctions, or just basic settings.For instance, let‚Äôs say you want to define a new optimizer. You'd define itsarguments in `config.cfg` like so:```ini[optimizer]@optimizers = &quot;my_cool_optimizer.v1&quot;learn_rate = 0.001gamma = 1e-8```To load and parse this configuration:```pythonimport dataclassesfrom typing import Union, Iterableimport cataloguefrom confection import registry, Config# Create a new registry.registry.optimizers = catalogue.create(&quot;confection&quot;, &quot;optimizers&quot;, entry_points=False)# Define a dummy optimizer class.@dataclasses.dataclassclass MyCoolOptimizer:    learn_rate: float    gamma: float@registry.optimizers.register(&quot;my_cool_optimizer.v1&quot;)def make_my_optimizer(learn_rate: Union[float, Iterable[float]], gamma: float):    return MyCoolOptimizer(learn_rate, gamma)# Load the config file from disk, resolve it and fetch the instantiated optimizer object.config = Config().from_disk(&quot;./config.cfg&quot;)resolved = registry.resolve(config)optimizer = resolved[&quot;optimizer&quot;]  # MyCoolOptimizer(learn_rate=0.001, gamma=1e-08)```Under the hood, `confection` will look up the `&quot;my_cool_optimizer.v1&quot;` functionin the &quot;optimizers&quot; registry and then call it with the arguments `learn_rate`and `gamma`. If the function has type annotations, it will also validate theinput. For instance, if `learn_rate` is annotated as a float and the configdefines a string, `confection` will raise an error.The Thinc documentation offers further information on the configuration system:- [recursive blocks](https://thinc.ai/docs/usage-config#registry-recursive)- [defining variable positional arguments](https://thinc.ai/docs/usage-config#registries-args)- [using interpolation](https://thinc.ai/docs/usage-config#config-interpolation)- [using custom registries](https://thinc.ai/docs/usage-config#registries-custom)- [advanced type annotations with Pydantic](https://thinc.ai/docs/usage-config#advanced-types)- [using base schemas](https://thinc.ai/docs/usage-config#advanced-types-base-schema)- [filling a configuration with defaults](https://thinc.ai/docs/usage-config#advanced-types-fill-defaults)## üéõ API### &lt;kbd&gt;class&lt;/kbd&gt; `Config`This class holds the model and training[configuration](https://thinc.ai/docs/usage-config) and can load and save theINI-style configuration format from/to a string, file or bytes. The `Config`class is a subclass of `dict` and uses Python‚Äôs `ConfigParser` under the hood.#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.__init__`&lt;/sup&gt;Initialize a new `Config` object with optional data.```pythonfrom confection import Configconfig = Config({&quot;training&quot;: {&quot;patience&quot;: 10, &quot;dropout&quot;: 0.2}})```| Argument          | Type                                      | Description                                                                                                                                                 || ----------------- | ----------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- || `data`            | `Optional[Union[Dict[str, Any], Config]]` | Optional data to initialize the config with.                                                                                                                || `section_order`   | `Optional[List[str]]`                     | Top-level section names, in order, used to sort the saved and loaded config. All other sections will be sorted alphabetically.                              || `is_interpolated` | `Optional[bool]`                          | Whether the config is interpolated or whether it contains variables. Read from the `data` if it‚Äôs an instance of `Config` and otherwise defaults to `True`. |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.from_str`&lt;/sup&gt;Load the config from a string.```pythonfrom confection import Configconfig_str = &quot;&quot;&quot;[training]patience = 10dropout = 0.2&quot;&quot;&quot;config = Config().from_str(config_str)print(config[&quot;training&quot;])  # {'patience': 10, 'dropout': 0.2}}```| Argument      | Type             | Description                                                                                                          || ------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------- || `text`        | `str`            | The string config to load.                                                                                           || `interpolate` | `bool`           | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          || `overrides`   | `Dict[str, Any]` | Overrides for values and sections. Keys are provided in dot notation, e.g. `&quot;training.dropout&quot;` mapped to the value. || **RETURNS**   | `Config`         | The loaded config.                                                                                                   |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.to_str`&lt;/sup&gt;Load the config from a string.```pythonfrom confection import Configconfig = Config({&quot;training&quot;: {&quot;patience&quot;: 10, &quot;dropout&quot;: 0.2}})print(config.to_str()) # '[training]\npatience = 10\n\ndropout = 0.2'```| Argument      | Type   | Description                                                                 || ------------- | ------ | --------------------------------------------------------------------------- || `interpolate` | `bool` | Whether to interpolate variables like `${section.key}`. Defaults to `True`. || **RETURNS**   | `str`  | The string config.                                                          |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.to_bytes`&lt;/sup&gt;Serialize the config to a byte string.```pythonfrom confection import Configconfig = Config({&quot;training&quot;: {&quot;patience&quot;: 10, &quot;dropout&quot;: 0.2}})config_bytes = config.to_bytes()print(config_bytes)  # b'[training]\npatience = 10\n\ndropout = 0.2'```| Argument      | Type             | Description                                                                                                          || ------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------- || `interpolate` | `bool`           | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          || `overrides`   | `Dict[str, Any]` | Overrides for values and sections. Keys are provided in dot notation, e.g. `&quot;training.dropout&quot;` mapped to the value. || **RETURNS**   | `str`            | The serialized config.                                                                                               |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.from_bytes`&lt;/sup&gt;Load the config from a byte string.```pythonfrom confection import Configconfig = Config({&quot;training&quot;: {&quot;patience&quot;: 10, &quot;dropout&quot;: 0.2}})config_bytes = config.to_bytes()new_config = Config().from_bytes(config_bytes)```| Argument      | Type     | Description                                                                 || ------------- | -------- | --------------------------------------------------------------------------- || `bytes_data`  | `bool`   | The data to load.                                                           || `interpolate` | `bool`   | Whether to interpolate variables like `${section.key}`. Defaults to `True`. || **RETURNS**   | `Config` | The loaded config.                                                          |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.to_disk`&lt;/sup&gt;Serialize the config to a file.```pythonfrom confection import Configconfig = Config({&quot;training&quot;: {&quot;patience&quot;: 10, &quot;dropout&quot;: 0.2}})config.to_disk(&quot;./config.cfg&quot;)```| Argument      | Type               | Description                                                                 || ------------- | ------------------ | --------------------------------------------------------------------------- || `path`        | `Union[Path, str]` | The file path.                                                              || `interpolate` | `bool`             | Whether to interpolate variables like `${section.key}`. Defaults to `True`. |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.from_disk`&lt;/sup&gt;Load the config from a file.```pythonfrom confection import Configconfig = Config({&quot;training&quot;: {&quot;patience&quot;: 10, &quot;dropout&quot;: 0.2}})config.to_disk(&quot;./config.cfg&quot;)new_config = Config().from_disk(&quot;./config.cfg&quot;)```| Argument      | Type               | Description                                                                                                          || ------------- | ------------------ | -------------------------------------------------------------------------------------------------------------------- || `path`        | `Union[Path, str]` | The file path.                                                                                                       || `interpolate` | `bool`             | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          || `overrides`   | `Dict[str, Any]`   | Overrides for values and sections. Keys are provided in dot notation, e.g. `&quot;training.dropout&quot;` mapped to the value. || **RETURNS**   | `Config`           | The loaded config.                                                                                                   |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.copy`&lt;/sup&gt;Deep-copy the config.| Argument    | Type     | Description        || ----------- | -------- | ------------------ || **RETURNS** | `Config` | The copied config. |#### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.interpolate`&lt;/sup&gt;Interpolate variables like `${section.value}` or `${section.subsection}` andreturn a copy of the config with interpolated values. Can be used if a config isloaded with `interpolate=False`, e.g. via `Config.from_str`.```pythonfrom confection import Configconfig_str = &quot;&quot;&quot;[hyper_params]dropout = 0.2[training]dropout = ${hyper_params.dropout}&quot;&quot;&quot;config = Config().from_str(config_str, interpolate=False)print(config[&quot;training&quot;])  # {'dropout': '${hyper_params.dropout}'}}config = config.interpolate()print(config[&quot;training&quot;])  # {'dropout': 0.2}}```| Argument    | Type     | Description                                    || ----------- | -------- | ---------------------------------------------- || **RETURNS** | `Config` | A copy of the config with interpolated values. |##### &lt;sup&gt;&lt;kbd&gt;method&lt;/kbd&gt; `Config.merge`&lt;/sup&gt;Deep-merge two config objects, using the current config as the default. Onlymerges sections and dictionaries and not other values like lists. Values thatare provided in the updates are overwritten in the base config, and any newvalues or sections are added. If a config value is a variable like`${section.key}` (e.g. if the config was loaded with `interpolate=False)`, **thevariable is preferred**, even if the updates provide a different value. Thisensures that variable references aren‚Äôt destroyed by a merge.&gt; :warning: Note that blocks that refer to registered functions using the `@`&gt; syntax are only merged if they are referring to the same functions. Otherwise,&gt; merging could easily produce invalid configs, since different functions can&gt; take different arguments. If a block refers to a different function, it‚Äôs&gt; overwritten.```pythonfrom confection import Configbase_config_str = &quot;&quot;&quot;[training]patience = 10dropout = 0.2&quot;&quot;&quot;update_config_str = &quot;&quot;&quot;[training]dropout = 0.1max_epochs = 2000&quot;&quot;&quot;base_config = Config().from_str(base_config_str)update_config = Config().from_str(update_config_str)merged = Config(base_config).merge(update_config)print(merged[&quot;training&quot;])  # {'patience': 10, 'dropout': 0.1, 'max_epochs': 2000}```| Argument    | Type                            | Description                                         || ----------- | ------------------------------- | --------------------------------------------------- || `overrides` | `Union[Dict[str, Any], Config]` | The updates to merge into the config.               || **RETURNS** | `Config`                        | A new config instance containing the merged config. |### Config Attributes| Argument          | Type   | Description                                                                                                                                                              || ----------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ || `is_interpolated` | `bool` | Whether the config values have been interpolated. Defaults to `True` and is set to `False` if a config is loaded with `interpolate=False`, e.g. using `Config.from_str`. |</longdescription>
</pkgmetadata>