<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## python-socks[![Build Status](https://api.travis-ci.com/romis2012/python-socks.svg?branch=master)](https://travis-ci.com/github/romis2012/python-socks)[![Coverage Status](https://coveralls.io/repos/github/romis2012/python-socks/badge.svg?branch=master&amp;_=q)](https://coveralls.io/github/romis2012/python-socks?branch=master)[![PyPI version](https://badge.fury.io/py/python-socks.svg)](https://badge.fury.io/py/python-socks)&lt;!--[![Downloads](https://pepy.tech/badge/python-socks/month)](https://pepy.tech/project/python-socks)--&gt;The `python-socks` package provides a core proxy client functionality for Python.Supports SOCKS4(a), SOCKS5(h), HTTP (tunneling) proxy and provides sync and async (asyncio, trio, curio, anyio) APIs.You probably don't need to use `python-socks` directly. It is used internally by [aiohttp-socks](https://github.com/romis2012/aiohttp-socks) and [httpx-socks](https://github.com/romis2012/httpx-socks) packages.  ## Requirements- Python &gt;= 3.6- async-timeout &gt;= 3.0.1 (optional)- trio &gt;= 0.16.0 (optional)- curio &gt;= 1.4 (optional)- anyio &gt;= 3.3.4 (optional)## Installationonly sync proxy support:```pip install python-socks```to include optional asyncio support:```pip install python-socks[asyncio]```to include optional trio support:```pip install python-socks[trio]```to include optional curio support:```pip install python-socks[curio]```to include optional anyio support:```pip install python-socks[anyio]```## Simple usageWe are making secure HTTP GET request via SOCKS5 proxy #### Sync```pythonimport sslfrom python_socks.sync import Proxyproxy = Proxy.from_url('socks5://user:password@127.0.0.1:1080')# `connect` returns standard Python socket in blocking modesock = proxy.connect(dest_host='check-host.net', dest_port=443)sock = ssl.create_default_context().wrap_socket(    sock=sock,    server_hostname='check-host.net')request = (    b'GET /ip HTTP/1.1\r\n'    b'Host: check-host.net\r\n'    b'Connection: close\r\n\r\n')sock.sendall(request)response = sock.recv(4096)print(response)```#### Async (asyncio)```pythonimport sslimport asynciofrom python_socks.async_.asyncio import Proxyproxy = Proxy.from_url('socks5://user:password@127.0.0.1:1080')# `connect` returns standard Python socket in non-blocking mode # so we can pass it to asyncio.open_connection(...)sock = await proxy.connect(dest_host='check-host.net', dest_port=443)reader, writer = await asyncio.open_connection(    host=None,    port=None,    sock=sock,    ssl=ssl.create_default_context(),    server_hostname='check-host.net',)request = (    b'GET /ip HTTP/1.1\r\n'    b'Host: check-host.net\r\n'    b'Connection: close\r\n\r\n')writer.write(request)response = await reader.read(-1)print(response)```#### Async (trio)```pythonimport sslimport triofrom python_socks.async_.trio import Proxyproxy = Proxy.from_url('socks5://user:password@127.0.0.1:1080')# `connect` returns trio socket # so we can pass it to trio.SocketStreamsock = await proxy.connect(dest_host='check-host.net', dest_port=443)stream = trio.SocketStream(sock)stream = trio.SSLStream(    stream, ssl.create_default_context(),    server_hostname='check-host.net')await stream.do_handshake()request = (    b'GET /ip HTTP/1.1\r\n'    b'Host: check-host.net\r\n'    b'Connection: close\r\n\r\n')await stream.send_all(request)response = await stream.receive_some(4096)print(response)```#### Async (curio)```pythonimport curio.ssl as curiosslfrom python_socks.async_.curio import Proxyproxy = Proxy.from_url('socks5://user:password@127.0.0.1:1080')# `connect` returns curio.io.Socketsock = await proxy.connect(    dest_host='check-host.net',    dest_port=443)request = (    b'GET /ip HTTP/1.1\r\n'    b'Host: check-host.net\r\n'    b'Connection: close\r\n\r\n')ssl_context = curiossl.create_default_context()sock = await ssl_context.wrap_socket(    sock, do_handshake_on_connect=False, server_hostname='check-host.net')await sock.do_handshake()stream = sock.as_stream()await stream.write(request)response = await stream.read(1024)print(response)```#### Async (anyio)```pythonimport sslfrom python_socks.async_.anyio import Proxyproxy = Proxy.from_url('socks5://user:password@127.0.0.1:1080')# `connect` returns AnyioSocketStreamstream = await proxy.connect(    dest_host='check-host.net',    dest_port=443,    dest_ssl=ssl.create_default_context(),)request = (    b'GET /ip HTTP/1.1\r\n'    b'Host: check-host.net\r\n'    b'Connection: close\r\n\r\n')await stream.write_all(request)response = await stream.read()print(response)```## More complex example#### A urllib3 PoolManager that routes connections via the proxy```pythonfrom urllib3 import PoolManager, HTTPConnectionPool, HTTPSConnectionPoolfrom urllib3.connection import HTTPConnection, HTTPSConnectionfrom python_socks.sync import Proxyclass ProxyHTTPConnection(HTTPConnection):    def __init__(self, *args, **kwargs):        socks_options = kwargs.pop('_socks_options')        self._proxy_url = socks_options['proxy_url']        super().__init__(*args, **kwargs)    def _new_conn(self):        proxy = Proxy.from_url(self._proxy_url)        return proxy.connect(            dest_host=self.host,            dest_port=self.port,            timeout=self.timeout        )class ProxyHTTPSConnection(ProxyHTTPConnection, HTTPSConnection):    passclass ProxyHTTPConnectionPool(HTTPConnectionPool):    ConnectionCls = ProxyHTTPConnectionclass ProxyHTTPSConnectionPool(HTTPSConnectionPool):    ConnectionCls = ProxyHTTPSConnectionclass ProxyPoolManager(PoolManager):    def __init__(self, proxy_url, timeout=5, num_pools=10, headers=None,                 **connection_pool_kw):        connection_pool_kw['_socks_options'] = {'proxy_url': proxy_url}        connection_pool_kw['timeout'] = timeout        super().__init__(num_pools, headers, **connection_pool_kw)        self.pool_classes_by_scheme = {            'http': ProxyHTTPConnectionPool,            'https': ProxyHTTPSConnectionPool,        }### and how to use itmanager = ProxyPoolManager('socks5://user:password@127.0.0.1:1080')response = manager.request('GET', 'https://check-host.net/ip')print(response.data)```</longdescription>
</pkgmetadata>