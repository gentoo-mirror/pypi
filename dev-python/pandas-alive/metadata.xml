<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pandas_AliveAnimated plotting extension for Pandas with Matplotlib[![Inline docs](http://inch-ci.org/github/dwyl/hapi-auth-jwt2.svg?branch=master)](https://jackmckew.github.io/pandas_alive/) ![Interrogate Coverage](badges/interrogate_badge.svg) [![Downloads](https://pepy.tech/badge/pandas-alive/month)](https://pepy.tech/project/pandas-alive/month) [![PyPI version shields.io](https://img.shields.io/pypi/v/pandas_alive.svg)](https://pypi.python.org/pypi/pandas_alive/) [![PyPI license](https://img.shields.io/pypi/l/pandas_alive.svg)](https://pypi.python.org/pypi/pandas_alive/) [![saythanks](https://img.shields.io/badge/say-thanks-ff69b4.svg)](https://www.buymeacoffee.com/jackmckew)**Pandas_Alive** is intended to provide a plotting backend for animated [matplotlib](https://matplotlib.org/) charts for [Pandas](https://pandas.pydata.org/) DataFrames, similar to the already [existing Visualization feature of Pandas](https://pandas.pydata.org/pandas-docs/stable/visualization.html).With **Pandas_Alive**, creating stunning, animated visualisations is as easy as calling:`df.plot_animated()`![Example Bar Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-barh-chart.gif)## Table of Contents&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;- [Installation](#installation)- [Usage](#usage)- [Currently Supported Chart Types](#currently-supported-chart-types)  - [Horizontal Bar Chart Races](#horizontal-bar-chart-races)  - [Vertical Bar Chart Races](#vertical-bar-chart-races)  - [Line Charts](#line-charts)  - [Bar Charts](#bar-charts)  - [Scatter Charts](#scatter-charts)  - [Pie Charts](#pie-charts)  - [Bubble Charts](#bubble-charts)    - [Bubble Chart Example 1](#bubble-chart-example-1)    - [Bubble Chart Example 2](#bubble-chart-example-2)  - [GeoSpatial Charts](#geospatial-charts)    - [GeoSpatial Point Charts](#geospatial-point-charts)    - [Polygon GeoSpatial Charts](#polygon-geospatial-charts)- [Multiple Charts](#multiple-charts)  - [Urban Population](#urban-population)  - [Life Expectancy in G7 Countries](#life-expectancy-in-g7-countries)  - [NSW COVID Visualisation](#nsw-covid-visualisation)  - [Italy COVID Visualisation](#italy-covid-visualisation)  - [Simple Pendulum Motion](#simple-pendulum-motion)- [HTML 5 Videos](#html-5-videos)- [Progress Bars!](#progress-bars)- [Future Features](#future-features)- [Tutorials](#tutorials)- [Inspiration](#inspiration)- [Requirements](#requirements)- [Documentation](#documentation)- [Contributing](#contributing)  - [Development](#development)- [Changelog](#changelog)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## InstallationInstall with `pip install pandas_alive` or `conda install pandas_alive -c conda-forge`## UsageAs this package was inspired by [`bar_chart_race`](https://github.com/dexplo/bar_chart_race), the example data set is sourced from there.Must begin with a pandas DataFrame containing 'wide' data where:- Every row represents a single period of time- Each column holds the value for a particular category- The index contains the time component (optional)The data below is an example of properly formatted data. It shows total deaths from COVID-19 for the highest 20 countries by date.![Example Data Table](https://raw.githubusercontent.com/dexplo/bar_chart_race/master/docs/images/wide_data.png)To produce the above visualisation:- Check [Requirements](#Requirements) first to ensure you have the tooling installed!- Call `plot_animated()` on the DataFrame    - Either specify a file name to write to with `df.plot_animated(filename='example.mp4')` or use `df.plot_animated().get_html5_video` to return a HTML5 video- Done!**Note** *on custom figures in notebooks*:When setting up custom figures for animations in `Matplotlib` make sure to use the `Figure()` syntax and not `figure()` instance type. The latter causes animations in `Matplotlib`, and in turn in `pandas_alive`, to take twice as long to be generated when changing from '**F**igure' to '**f**igure' syntax.More on '**F**igure' vs '**f**igure' can be found in this [SO entry](https://stackoverflow.com/questions/28631741/prevent-matplotlib-statefulness/28633419#28633419), and this [other SO entry](https://stackoverflow.com/questions/16334588/create-a-figure-that-is-reference-counted/16337909#16337909).```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()covid_df.plot_animated(filename='examples/example-barh-chart.gif')```## Currently Supported Chart Types### Horizontal Bar Chart Races```pythonimport pandas as pdimport pandas_aliveelec_df = pd.read_csv(&quot;data/Aus_Elec_Gen_1980_2018.csv&quot;,index_col=0,parse_dates=[0],thousands=',')elec_df.fillna(0).plot_animated('examples/example-electricity-generated-australia.gif',period_fmt=&quot;%Y&quot;,title='Australian Electricity Generation Sources 1980-2018')```![Electricity Example Line Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-electricity-generated-australia.gif)```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()def current_total(values):    total = values.sum()    s = f'Total : {int(total)}'    return {'x': .85, 'y': .2, 's': s, 'ha': 'right', 'size': 11}covid_df.plot_animated(filename='examples/summary-func-example.gif',period_summary_func=current_total)```![Summary Func Example](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/summary-func-example.gif)```pythonimport pandas as pdimport pandas_aliveelec_df = pd.read_csv(&quot;data/Aus_Elec_Gen_1980_2018.csv&quot;,index_col=0,parse_dates=[0],thousands=',')elec_df.fillna(0).plot_animated('examples/fixed-example.gif',period_fmt=&quot;%Y&quot;,title='Australian Electricity Generation Sources 1980-2018',fixed_max=True,fixed_order=True)```![Fixed Example](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/fixed-example.gif)```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()covid_df.plot_animated(filename='examples/perpendicular-example.gif',perpendicular_bar_func='mean')```![Perpendicular Example](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/perpendicular-example.gif)### Vertical Bar Chart Races```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()covid_df.plot_animated(filename='examples/example-barv-chart.gif',orientation='v')```![Example Barv Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-barv-chart.gif)### Line ChartsWith as many lines as data columns in the DataFrame.```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()covid_df.diff().fillna(0).plot_animated(filename='examples/example-line-chart.gif',kind='line',period_label={'x':0.25,'y':0.9})```![Example Line Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-line-chart.gif)### Bar ChartsSimilar to line charts with time as the x-axis.```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()covid_df.sum(axis=1).fillna(0).plot_animated(filename='examples/example-bar-chart.gif',kind='bar',        period_label={'x':0.1,'y':0.9},        enable_progress_bar=True, steps_per_period=2, interpolate_period=True, period_length=200)```![Example Bar Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-bar-chart.gif)### Scatter Charts```pythonimport pandas as pdimport pandas_alivemax_temp_df = pd.read_csv(    &quot;data/Newcastle_Australia_Max_Temps.csv&quot;,    parse_dates={&quot;Timestamp&quot;: [&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;]},)min_temp_df = pd.read_csv(    &quot;data/Newcastle_Australia_Min_Temps.csv&quot;,    parse_dates={&quot;Timestamp&quot;: [&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;]},)merged_temp_df = pd.merge_asof(max_temp_df, min_temp_df, on=&quot;Timestamp&quot;)merged_temp_df.index = pd.to_datetime(merged_temp_df[&quot;Timestamp&quot;].dt.strftime('%Y/%m/%d'))keep_columns = [&quot;Minimum temperature (Degree C)&quot;, &quot;Maximum temperature (Degree C)&quot;]merged_temp_df[keep_columns].resample(&quot;Y&quot;).mean().plot_animated(filename='examples/example-scatter-chart.gif',kind=&quot;scatter&quot;,title='Max &amp; Min Temperature Newcastle, Australia')```![Example Scatter Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-scatter-chart.gif)### Pie Charts```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()covid_df.plot_animated(filename='examples/example-pie-chart.gif',kind=&quot;pie&quot;,rotatelabels=True,period_label={'x':0,'y':0})```![Example Pie Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-pie-chart.gif)### Bubble ChartsBubble charts are generated from a multi-indexed dataframes. Where the index is the time period (optional) and the axes are defined with `x_data_label` &amp; `y_data_label` which should be passed a string in the level 0 column labels.See an example multi-indexed dataframe at: &lt;https://github.com/JackMcKew/pandas_alive/tree/master/data/multi.csv&gt;When you set `color_data_label=` to a df column name, `pandas_alive` will automatically add a `colorbar`.```pythonimport pandas_alivemulti_index_df = pd.read_csv(&quot;data/multi.csv&quot;, header=[0, 1], index_col=0)multi_index_df.index = pd.to_datetime(multi_index_df.index,dayfirst=True)map_chart = multi_index_df.plot_animated(    kind=&quot;bubble&quot;,    filename=&quot;examples/example-bubble-chart.gif&quot;,    x_data_label=&quot;Longitude&quot;,    y_data_label=&quot;Latitude&quot;,    size_data_label=&quot;Cases&quot;,    color_data_label=&quot;Cases&quot;,    vmax=5, steps_per_period=3, interpolate_period=True, period_length=500,    dpi=100)```#### Bubble Chart Example 1![Bubble Chart Example](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-bubble-chart.gif)#### Bubble Chart Example 2Jupyter notebook: [pendulum_sample.ipynb](https://github.com/JackMcKew/pandas_alive/blob/main/examples/test_notebooks/pendulum_sample.ipynb)![Bubble Chart Example](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/test_notebooks/pend-bubble.gif)### GeoSpatial ChartsGeoSpatial charts can now be animated easily using [`geopandas`](https://geopandas.org/index.html)!&gt; If using Windows, [anaconda](https://www.anaconda.com/) is the easiest way to install with all GDAL dependancies.Must begin with a `geopandas` GeoDataFrame containing 'wide' data where:- Every row represents a single geometry (Point or Polygon).    - The index contains the geometry label (optional)- Each column represents a single period in time.&gt; These can be easily composed by transposing data compatible with the rest of the charts using `df = df.T`.#### GeoSpatial Point Charts```pythonimport geopandasimport pandas_aliveimport contextilygdf = geopandas.read_file('data/nsw-covid19-cases-by-postcode.gpkg')gdf.index = gdf.postcodegdf = gdf.drop('postcode',axis=1)map_chart = gdf.plot_animated(filename='examples/example-geo-point-chart.gif',basemap_format={'source':contextily.providers.Stamen.Terrain})```![Example Point GeoSpatialChart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-geo-point-chart.gif)#### Polygon GeoSpatial ChartsSupports GeoDataFrames containing Polygons!```pythonimport geopandasimport pandas_aliveimport contextilygdf = geopandas.read_file('data/italy-covid-region.gpkg')gdf.index = gdf.regiongdf = gdf.drop('region',axis=1)map_chart = gdf.plot_animated(filename='examples/example-geo-polygon-chart.gif',basemap_format={'source':contextily.providers.Stamen.Terrain})```![Example Polygon GeoSpatialChart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-geo-polygon-chart.gif)## Multiple Charts`pandas_alive` supports multiple animated charts in a single visualisation.- Create a list of all charts to include in animation- Use `animate_multiple_plots` with a `filename` and the list of charts (this will use `matplotlib.subplots`)- Done!```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()animated_line_chart = covid_df.diff().fillna(0).plot_animated(kind='line',period_label=False,add_legend=False)animated_bar_chart = covid_df.plot_animated(n_visible=10)pandas_alive.animate_multiple_plots('examples/example-bar-and-line-chart.gif',[animated_bar_chart,animated_line_chart],    enable_progress_bar=True)```![Example Bar &amp; Line Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-bar-and-line-chart.gif)### Urban Population```pythonimport pandas_aliveurban_df = pandas_alive.load_dataset(&quot;urban_pop&quot;)animated_line_chart = (    urban_df.sum(axis=1)    .pct_change()    .fillna(method='bfill')    .mul(100)    .plot_animated(kind=&quot;line&quot;, title=&quot;Total % Change in Population&quot;,period_label=False,add_legend=False))animated_bar_chart = urban_df.plot_animated(n_visible=10,title='Top 10 Populous Countries',period_fmt=&quot;%Y&quot;)pandas_alive.animate_multiple_plots('examples/example-bar-and-line-urban-chart.gif',[animated_bar_chart,animated_line_chart],    title='Urban Population 1977 - 2018', adjust_subplot_top=0.85, enable_progress_bar=True)```![Urban Population Bar &amp; Line Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/example-bar-and-line-urban-chart.gif)### Life Expectancy in G7 Countries```pythonimport pandas_aliveimport pandas as pddata_raw = pd.read_csv(    &quot;https://raw.githubusercontent.com/owid/owid-datasets/master/datasets/Long%20run%20life%20expectancy%20-%20Gapminder%2C%20UN/Long%20run%20life%20expectancy%20-%20Gapminder%2C%20UN.csv&quot;)list_G7 = [    &quot;Canada&quot;,    &quot;France&quot;,    &quot;Germany&quot;,    &quot;Italy&quot;,    &quot;Japan&quot;,    &quot;United Kingdom&quot;,    &quot;United States&quot;,]data_raw = data_raw.pivot(    index=&quot;Year&quot;, columns=&quot;Entity&quot;, values=&quot;Life expectancy (Gapminder, UN)&quot;)data = pd.DataFrame()data[&quot;Year&quot;] = data_raw.reset_index()[&quot;Year&quot;]for country in list_G7:    data[country] = data_raw[country].valuesdata = data.fillna(method=&quot;pad&quot;)data = data.fillna(0)data = data.set_index(&quot;Year&quot;).loc[1900:].reset_index()data[&quot;Year&quot;] = pd.to_datetime(data.reset_index()[&quot;Year&quot;].astype(str))data = data.set_index(&quot;Year&quot;)animated_bar_chart = data.plot_animated(    period_fmt=&quot;%Y&quot;,perpendicular_bar_func=&quot;mean&quot;, period_length=200,fixed_max=True)animated_line_chart = data.plot_animated(    kind=&quot;line&quot;, period_fmt=&quot;%Y&quot;, period_length=200,fixed_max=True)pandas_alive.animate_multiple_plots(    &quot;examples/life-expectancy.gif&quot;,    plots=[animated_bar_chart, animated_line_chart],    title=&quot;Life expectancy in G7 countries up to 2015&quot;,    adjust_subplot_left=0.2, adjust_subplot_top=0.9, enable_progress_bar=True)```![Life Expectancy Chart](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/life-expectancy.gif)### NSW COVID Visualisation```pythonimport geopandasimport pandas as pdimport pandas_aliveimport contextilyimport matplotlib.pyplot as pltimport urllib.request, jsonwith urllib.request.urlopen(    &quot;https://data.nsw.gov.au/data/api/3/action/package_show?id=aefcde60-3b0c-4bc0-9af1-6fe652944ec2&quot;) as url:    data = json.loads(url.read().decode())# Extract url to csv componentcovid_nsw_data_url = data[&quot;result&quot;][&quot;resources&quot;][0][&quot;url&quot;]# Read csv from data API urlnsw_covid = pd.read_csv(covid_nsw_data_url)postcode_dataset = pd.read_csv(&quot;data/postcode-data.csv&quot;)# Prepare data from NSW health datasetnsw_covid = nsw_covid.fillna(9999)nsw_covid[&quot;postcode&quot;] = nsw_covid[&quot;postcode&quot;].astype(int)grouped_df = nsw_covid.groupby([&quot;notification_date&quot;, &quot;postcode&quot;]).size()grouped_df = pd.DataFrame(grouped_df).unstack()grouped_df.columns = grouped_df.columns.droplevel().astype(str)grouped_df = grouped_df.fillna(0)grouped_df.index = pd.to_datetime(grouped_df.index)cases_df = grouped_df# Clean data in postcode dataset prior to matchinggrouped_df = grouped_df.Tpostcode_dataset = postcode_dataset[postcode_dataset['Longitude'].notna()]postcode_dataset = postcode_dataset[postcode_dataset['Longitude'] != 0]postcode_dataset = postcode_dataset[postcode_dataset['Latitude'].notna()]postcode_dataset = postcode_dataset[postcode_dataset['Latitude'] != 0]postcode_dataset['Postcode'] = postcode_dataset['Postcode'].astype(str)# Build GeoDataFrame from Lat Long dataset and make map chartgrouped_df['Longitude'] = grouped_df.index.map(postcode_dataset.set_index('Postcode')['Longitude'].to_dict())grouped_df['Latitude'] = grouped_df.index.map(postcode_dataset.set_index('Postcode')['Latitude'].to_dict())gdf = geopandas.GeoDataFrame(    grouped_df, geometry=geopandas.points_from_xy(grouped_df.Longitude, grouped_df.Latitude),crs=&quot;EPSG:4326&quot;)gdf = gdf.dropna()# Prepare GeoDataFrame for writing to geopackagegdf = gdf.drop(['Longitude','Latitude'],axis=1)gdf.columns = gdf.columns.astype(str)gdf['postcode'] = gdf.indexgdf.to_file(&quot;data/nsw-covid19-cases-by-postcode.gpkg&quot;, layer='nsw-postcode-covid', driver=&quot;GPKG&quot;)# Prepare GeoDataFrame for plottinggdf.index = gdf.postcodegdf = gdf.drop('postcode',axis=1)gdf = gdf.to_crs(&quot;EPSG:3857&quot;) #Web Mercatormap_chart = gdf.plot_animated(basemap_format={'source':contextily.providers.Stamen.Terrain},cmap='cool')cases_df.to_csv('data/nsw-covid-cases-by-postcode.csv')from datetime import datetimebar_chart = cases_df.sum(axis=1).plot_animated(    kind='line',    label_events={        'Ruby Princess Disembark':datetime.strptime(&quot;19/03/2020&quot;, &quot;%d/%m/%Y&quot;),        'Lockdown':datetime.strptime(&quot;31/03/2020&quot;, &quot;%d/%m/%Y&quot;)    },    fill_under_line_color=&quot;blue&quot;,    add_legend=False)map_chart.ax.set_title('Cases by Location')grouped_df = pd.read_csv('data/nsw-covid-cases-by-postcode.csv', index_col=0, parse_dates=[0])line_chart = (    grouped_df.sum(axis=1)    .cumsum()    .fillna(0)    .plot_animated(kind=&quot;line&quot;, period_label=False, title=&quot;Cumulative Total Cases&quot;, add_legend=False))def current_total(values):    total = values.sum()    s = f'Total : {int(total)}'    return {'x': .85, 'y': .2, 's': s, 'ha': 'right', 'size': 11}race_chart = grouped_df.cumsum().plot_animated(    n_visible=5, title=&quot;Cases by Postcode&quot;, period_label=False,period_summary_func=current_total)import timetimestr = time.strftime(&quot;%d/%m/%Y&quot;)plots = [bar_chart, line_chart, map_chart, race_chart]from matplotlib import rcParamsrcParams.update({&quot;figure.autolayout&quot;: False})# make sure figures are `Figure()` instancesfigs = plt.Figure()gs = figs.add_gridspec(2, 3, hspace=0.5)f3_ax1 = figs.add_subplot(gs[0, :])f3_ax1.set_title(bar_chart.title)bar_chart.ax = f3_ax1f3_ax2 = figs.add_subplot(gs[1, 0])f3_ax2.set_title(line_chart.title)line_chart.ax = f3_ax2f3_ax3 = figs.add_subplot(gs[1, 1])f3_ax3.set_title(map_chart.title)map_chart.ax = f3_ax3f3_ax4 = figs.add_subplot(gs[1, 2])f3_ax4.set_title(race_chart.title)race_chart.ax = f3_ax4timestr = cases_df.index.max().strftime(&quot;%d/%m/%Y&quot;)figs.suptitle(f&quot;NSW COVID-19 Confirmed Cases up to {timestr}&quot;)pandas_alive.animate_multiple_plots(    'examples/nsw-covid.gif',    plots,    figs,    enable_progress_bar=True)```![NSW COVID](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/nsw-covid.gif)### Italy COVID Visualisation```pythonimport geopandasimport pandas as pdimport pandas_aliveimport contextilyimport matplotlib.pyplot as pltregion_gdf = geopandas.read_file('data\geo-data\italy-with-regions')region_gdf.NOME_REG = region_gdf.NOME_REG.str.lower().str.title()region_gdf = region_gdf.replace('Trentino-Alto Adige/Sudtirol','Trentino-Alto Adige')region_gdf = region_gdf.replace(&quot;Valle D'Aosta/VallÃ©e D'Aoste\r\nValle D'Aosta/VallÃ©e D'Aoste&quot;,&quot;Valle d'Aosta&quot;)italy_df = pd.read_csv('data\Regional Data - Sheet1.csv',index_col=0,header=1,parse_dates=[0])italy_df = italy_df[italy_df['Region'] != 'NA']cases_df = italy_df.iloc[:,:3]cases_df['Date'] = cases_df.indexpivoted = cases_df.pivot(values='New positives',index='Date',columns='Region')pivoted.columns = pivoted.columns.astype(str)pivoted = pivoted.rename(columns={'nan':'Unknown Region'})cases_gdf = pivoted.Tcases_gdf['geometry'] = cases_gdf.index.map(region_gdf.set_index('NOME_REG')['geometry'].to_dict())cases_gdf = cases_gdf[cases_gdf['geometry'].notna()]cases_gdf = geopandas.GeoDataFrame(cases_gdf, crs=region_gdf.crs, geometry=cases_gdf.geometry)gdf = cases_gdfmap_chart = gdf.plot_animated(basemap_format={'source':contextily.providers.Stamen.Terrain},cmap='viridis')cases_df = pivotedfrom datetime import datetimebar_chart = cases_df.sum(axis=1).plot_animated(    kind='line',    label_events={        'Schools Close':datetime.strptime(&quot;4/03/2020&quot;, &quot;%d/%m/%Y&quot;),        'Phase I Lockdown':datetime.strptime(&quot;11/03/2020&quot;, &quot;%d/%m/%Y&quot;),        '1M Global Cases':datetime.strptime(&quot;02/04/2020&quot;, &quot;%d/%m/%Y&quot;),        '100k Global Deaths':datetime.strptime(&quot;10/04/2020&quot;, &quot;%d/%m/%Y&quot;),        'Manufacturing Reopens':datetime.strptime(&quot;26/04/2020&quot;, &quot;%d/%m/%Y&quot;),        'Phase II Lockdown':datetime.strptime(&quot;4/05/2020&quot;, &quot;%d/%m/%Y&quot;),    },    fill_under_line_color=&quot;blue&quot;,    add_legend=False)map_chart.ax.set_title('Cases by Location')line_chart = (    cases_df.sum(axis=1)    .cumsum()    .fillna(0)    .plot_animated(kind=&quot;line&quot;, period_label=False, title=&quot;Cumulative Total Cases&quot;,add_legend=False))def current_total(values):    total = values.sum()    s = f'Total : {int(total)}'    return {'x': .85, 'y': .1, 's': s, 'ha': 'right', 'size': 11}race_chart = cases_df.cumsum().plot_animated(    n_visible=5, title=&quot;Cases by Region&quot;, period_label=False,period_summary_func=current_total)import timetimestr = time.strftime(&quot;%d/%m/%Y&quot;)plots = [bar_chart, race_chart, map_chart, line_chart]# Otherwise titles overlap and adjust_subplot does nothingfrom matplotlib import rcParamsfrom matplotlib.animation import FuncAnimationrcParams.update({&quot;figure.autolayout&quot;: False})# make sure figures are `Figure()` instancesfigs = plt.Figure()gs = figs.add_gridspec(2, 3, hspace=0.5)f3_ax1 = figs.add_subplot(gs[0, :])f3_ax1.set_title(bar_chart.title)bar_chart.ax = f3_ax1f3_ax2 = figs.add_subplot(gs[1, 0])f3_ax2.set_title(race_chart.title)race_chart.ax = f3_ax2f3_ax3 = figs.add_subplot(gs[1, 1])f3_ax3.set_title(map_chart.title)map_chart.ax = f3_ax3f3_ax4 = figs.add_subplot(gs[1, 2])f3_ax4.set_title(line_chart.title)line_chart.ax = f3_ax4axes = [f3_ax1, f3_ax2, f3_ax3, f3_ax4]timestr = cases_df.index.max().strftime(&quot;%d/%m/%Y&quot;)figs.suptitle(f&quot;Italy COVID-19 Confirmed Cases up to {timestr}&quot;)pandas_alive.animate_multiple_plots(    'examples/italy-covid.gif',    plots,    figs,    enable_progress_bar=True)```![Italy COVID](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/italy-covid.gif)### Simple Pendulum MotionJupyter notebook: [pendulum_sample.ipynb](https://github.com/JackMcKew/pandas_alive/blob/main/examples/test_notebooks/pendulum_sample.ipynb)![Bubble Chart Example](https://raw.githubusercontent.com/JackMcKew/pandas_alive/main/examples/test_notebooks/pend-combined-2.gif)## HTML 5 Videos`Pandas_Alive` supports rendering HTML5 videos through the use of `df.plot_animated().get_html5_video()`. `.get_html5_video` saves the animation as an h264 video, encoded in base64 directly into the HTML5 video tag. This respects the rc parameters for the writer as well as the bitrate. This also makes use of the interval to control the speed, and uses the repeat parameter to decide whether to loop.This is typically used in Jupyter notebooks.```pythonimport pandas_alivefrom IPython.display import HTMLcovid_df = pandas_alive.load_dataset()animated_html = covid_df.plot_animated().get_html5_video()HTML(animated_html)```## Progress Bars!Generating animations can take some time, so enable progress bars by installing [tqdm](https://github.com/tqdm/tqdm) with `pip install tqdm` or `conda install tqdm` and using the keyword `enable_progress_bar=True` together with `filename=`movie file name.By default Pandas_Alive will create a `tqdm` progress bar when saving to a file, for the number of frames to animate, and update the progres bar after each frame.```pythonimport pandas_alivecovid_df = pandas_alive.load_dataset()# add a filename=movie.mp4 or movie.gif to save to, in order to see the progress bar in actioncovid_df.plot_animated(enable_progress_bar=True)```Example of TQDM in action:![TQDM Example](https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm.gif)## Future FeaturesA list of future features that may/may not be developed is:- Add to line &amp; scatter charts the ability to plot 'X' vs 'Y', as already implemented with bubble plots.- Add option of a colorbar for bubble plots when included in multiple plots. Currently only available for single bubble chart animations.- ~~Geographic charts (currently using OSM export image, potential [geopandas](https://geopandas.org/))~~- ~~Loading bar support (potential [tqdm](https://github.com/tqdm/tqdm) or [alive-progress](https://github.com/rsalmei/alive-progress))~~- ~~Potentially support writing to GIF in memory with &lt;https://github.com/maxhumber/gif&gt;~~- ~~Support custom figures &amp; axes for multiple plots (eg, gridspec)~~## TutorialsFind tutorials on how to use `Pandas_Alive` over at:- &lt;https://jackmckew.dev/creating-animated-plots-with-pandas_alive.html&gt;- &lt;https://jackmckew.dev/geopandas-and-pandas-alive.html&gt;- Jupyter notebooks in [test_notebooks](https://github.com/JackMcKew/pandas_alive/tree/main/examples/test_notebooks) folder.## InspirationThe inspiration for this project comes from:- [bar_chart_race](https://github.com/dexplo/bar_chart_race) by [Ted Petrou](https://github.com/tdpetrou)- [Pandas-Bokeh](https://github.com/PatrikHlobil/Pandas-Bokeh) by [Patrik Hlobil](https://github.com/PatrikHlobil)## RequirementsIf you get an error such as `TypeError: 'MovieWriterRegistry' object is not an iterator`, this signals there isn't a writer library installed on your machine.This package utilises the [matplotlib.animation function](https://matplotlib.org/3.2.1/api/animation_api.html), thus requiring a writer library.Ensure to have one of the supported tooling software installed prior to use!- [ffmpeg](https://ffmpeg.org/)- [ImageMagick](https://imagemagick.org/index.php)- See more at &lt;https://matplotlib.org/3.2.1/api/animation_api.html#writer-classes&gt;&gt; If the output file name has an extension of `.gif`, `pandas_alive` will write this with `PIL` in memory.## DocumentationDocumentation is provided at &lt;https://jackmckew.github.io/pandas_alive/&gt;## ContributingPull requests are welcome! Please help to cover more and more chart types!### DevelopmentTo get started in development, clone a copy of this repository to your PC. This will now enable you to create a Jupyter notebook or a standalone `.py` file, and import `pandas_alive` as a local module. Now you can create new chart types in `pandas_alive/charts.py` or `pandas_alive/geocharts.py` to build to your hearts content!For Python packages for a development environment check [requirements.txt](https://github.com/JackMcKew/pandas_alive/blob/main/requirements.txt) if using `PIP`, or [py38-pandas_alive.yml](https://github.com/JackMcKew/pandas_alive/blob/main/py38-pandas_alive.yml) if using `conda`.If you are using `conda` and are new to setting up environments for collaboration on projects, here are some notes from a previous contributor using `conda`: [Python set up with conda for project collaboration](https://github.com/JackMcKew/pandas_alive/issues/11#issuecomment-691663712)If you wish to contribute new Jupyter notebooks with different application examples, please place them in this directory: [./examples/test_notebooks/](https://github.com/JackMcKew/pandas_alive/tree/main/examples/test_notebooks).## [Changelog](https://github.com/JackMcKew/pandas_alive/blob/main/CHANGELOG.md)</longdescription>
</pkgmetadata>