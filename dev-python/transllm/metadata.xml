<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Development Status :: 3 - Alpha# Python Package: hf-transllm&lt;p align=&quot;left&quot;&gt;&lt;a&gt;&lt;img alt=&quot;PyPI package&quot; src=&quot;https://img.shields.io/badge/pypi-transllm-black&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hits.seeyoufarm.com&quot;&gt;&lt;img src=&quot;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fdsdanielpark%2Fhf-transllm&amp;count_bg=%23000000&amp;title_bg=%23555555&amp;icon=&amp;icon_color=%23E7E7E7&amp;title=hits&amp;edge_flat=false&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/transllm/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/transllm&quot;&gt;&lt;/a&gt;&lt;/p&gt;&gt; LLMtranslator translates and generates text in multiple languages using LLMs(Large Language Models) on hugging-face repository.![](assets/transllm.png)### Introducing hf-transllm: Unlock the Power of Multilingual ExplorationDiscover the hf-transllm package, a seamless integration of Hugging Face's inference module and translation APIs. Overcome limitations in retraining and evaluating large language models in different languages. Explore diverse results effortlessly, leveraging translation API services. Emphasizing versatility over efficiency, hf-transllm enables you to delve into the outcomes of Hugging Face's models in various languages.&lt;br&gt;&lt;br&gt;## Installation```pip install transllm```Or```pip install git+https://github.com/dsdanielpark/hf-trnasllm.git```&lt;br&gt;## CLIIf you wish to use CLI:```git clone https://github.com/dsdanielpark/hf-transllmcd hf-transllmpip install -r requirements.txt``````bashpython main.py --hfmodel &lt;openlm-research/open_llama_3b&gt; --lang &lt;ko&gt; --translator &lt;google&gt;```There can be issues with various dependencies such as Hugging Face's Transformers, SentencePiece, Torch, and CUDA. Please set up the appropriate environment by searching online.&lt;br&gt;&lt;br&gt;## Usage    &gt; Simple Usage```pythonfrom transllm import LLMtranslatoropen_llama3b_kor = LLMtranslator('openlm-research/open_llama_3b', target_lang='ko', translator='google') # Koreantrnaslated_answer = open_llama3b_kor.generate(&quot;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&quot;)print(trnaslated_answer)```&lt;br&gt;&gt; Official Google Translation API- Support Languages: https://cloud.google.com/translate/docs/languages?hl=ko&gt; Unofficial Google Trnaslator for non-profit purposes (such as feature testing)- Support Languages: https://github.com/nidhaloff/deep-translator/blob/master/deep_translator/constants.py```pythonfrom transllm import LLMtranslator# Set huggingface repositorymodel_path = 'openlm-research/open_llama_3b'# model_path = 'openlm-research/open_llama_7b'# model_path = 'openlm-research/open_llama_13b'# Get TransLLM Object (Korean)# open_llama3b_kor = LLMtranslator(model_path, target_lang='ko', translator='google_official', google_api_key='xxxxxx') # Official Google Cloud Translation API open_llama3b_kor = LLMtranslator(model_path, target_lang='ko', translator='google') # Unofficial test# Using Prompt in multi-languageprompt = &quot;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&quot;trnaslated_answer = open_llama3b_kor.generate(prompt)print(trnaslated_answer)```&lt;br&gt;&gt; DeepL, Open AI, Bard- Support Languages: https://www.deepl.com/pro/select-country?cta=header-pro-button/#developerOpen AI, Bard use pre-prompt for translation.```pythonfrom transllm import LLMtranslator# Set huggingface repositorymodel_path = 'openlm-research/open_llama_3b'# model_path = 'openlm-research/open_llama_7b'# model_path = 'openlm-research/open_llama_13b'# Choose Translate Service API: DeepL, OpenAI, Bardopen_llama3b_kor = LLMtranslator(model_path, target_lang='ES', translator='deepl', deepl_api='xxxxxxx') # Language == Spanish# open_llama3b_kor = LLMtranslator(model_path, target_lang='korean', translator='openai', openai_api='xxxxxxx', openai_model='gpt-3.5-turbo')# open_llama3b_kor = LLMtranslator(model_path, target_lang='korean', translator='bard', bard_api='xxxxxxx')# Using Prompt in multi-languageprompt = &quot;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&quot;trnaslated_answer = open_llama3b_kor.generate(prompt)print(trnaslated_answer)```&lt;br&gt;&gt; Google Colab Example[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1117ikGEmU4FncBDl1xCC2IhPPDOr75lX?usp=sharing) ![](assets/hf-transllm-colab.png)&lt;br&gt;&lt;br&gt;## Customized InferenceApplying LLMs to the majority of Hugging Face repositories is generally feasible. However, it can be challenging to apply them to objects that require unique tokenizers or inference processes. In such cases, it is recommended to customize the usage by incorporating a translation module for prompts.In other words, if you are familiar with the inference process or code from Hugging Face repositories, you can customize the translation object by adding a translation module before and after the known inference process or code. Check [translang repository](https://github.com/dsdanielpark/translang) for more details.```pythonimport torchfrom trnasllm import LLMtranslatorclass MyLLMtranslator(LLMtranslator):    def __init__(        self,        model_path,        target_lang=&quot;ko&quot;,        translator=&quot;google&quot;,        torch_dtype=torch.float16,        device_map=&quot;auto&quot;,        deepl_api=None,        bard_api=None,        openai_model=&quot;gpt-3.5-turbo&quot;,        openai_api=None    ):        super().__init__(            model_path=model_path,            target_lang=target_lang,            translator=translator,            torch_dtype=torch_dtype,            device_map=device_map,            deepl_api=deepl_api,            bard_api=bard_api,            openai_model=openai_model,            openai_api=openai_api        )    def inference(self, prompt: str) -&gt; str:        # Custom logic for inference        # You can override the implementation of the inference method here        # and provide your own logic for generating the translated answer        # Remember to return the translated answer as a string.        answer = customizing_process(prompt)        # Custom inference logic...                return answer```&lt;br&gt;## About Google TranslatorCommercial use or official use of the Google Translate service is chargeable. Please provide the `translator=&quot;google_official&quot;` and `google_api_key={YOUR_API_KEY}` arguments. Please responsibly use the `translator=&quot;google&quot;` argument for the purpose of simple functionality verification. Refer to the following [notebook file](https://github.com/dsdanielpark/translang/blob/main/scripts/google_official.ipynb) and [official link](https://cloud.google.com/translate?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=japac-KR-all-en-dr-BKWS-all-mv-trial-EXA-dr-1605216&amp;utm_content=text-ad-none-none-DEV_c-CRE_631260646738-ADGP_Hybrid%20%7C%20BKWS%20-%20EXA%20%7C%20Txt%20~%20AI%20&amp;%20ML_Translation%20AI_google%20translate%20api_main-KWID_43700073965169292-kwd-14329410560&amp;userloc_1009871-network_g&amp;utm_term=KW_google%20translate%20api&amp;gclid=Cj0KCQjwy9-kBhCHARIsAHpBjHjTvBCM7NNcf4fYGsog4ViQErgJvACFXB5JCNUT0h_EpQ5kyUT-SrIaApZBEALw_wcB&amp;gclsrc=aw.ds&amp;hl=ko) for more information. Use the google argument only for some basic functionality testing.## [FAQs](./documents/FAQs.md)Use `Ctrl`+`F` for help in this `FAQs.md`.## ContributorsI would like to express my sincere gratitude for the contributions made by all the contributors.&lt;a href=&quot;https://github.com/dsdanielpark/hf-transllm/graphs/contributors&quot;&gt;  &lt;img src=&quot;https://contrib.rocks/image?repo=dsdanielpark/hf-transllm&quot; /&gt;&lt;/a&gt;&lt;br&gt;## License[MIT](https://opensource.org/license/mit/) &lt;br&gt;I hold no legal responsibility; ```The MIT License (MIT)Copyright (c) 2023 Minwoo ParkPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.```## Bugs and IssuesSincerely grateful for any reports on new features or bugs. Your valuable feedback on the code is highly appreciated.## Contacts- Core maintainer: [Daniel Park, South Korea](https://github.com/DSDanielPark) &lt;br&gt;- E-mail: parkminwoo1991@gmail.com &lt;br&gt;## Reference [1] https://huggingface.co/docs/api-inference/index &lt;br&gt;  &lt;br&gt;              *Copyright (c) 2023 MinWoo Park, South Korea*&lt;br&gt;</longdescription>
</pkgmetadata>