<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jinja2-simple-tagsBase classes for quick-and-easy template tag development[![PyPI](https://img.shields.io/pypi/v/jinja2-simple-tags.svg)](https://pypi.org/project/jinja2-simple-tags/)[![Build Status](https://travis-ci.com/dldevinc/jinja2-simple-tags.svg?branch=master)](https://travis-ci.org/dldevinc/jinja2-simple-tags)## Compatibility-   `python` &gt;= 3.6-   `Jinja2` &gt;= 2.10## Installation`pip install jinja2-simple-tags`## Examples### `StandaloneTag````pythonfrom django.utils.timezone import nowfrom django.utils.formats import date_formatfrom jinja2_simple_tags import StandaloneTagclass NowExtension(StandaloneTag):    tags = {&quot;now&quot;}    def render(self, format_string='DATETIME_FORMAT'):        return date_format(now(), format_string)```Usage:```jinja2{% now %}           {# 7th July 2020, 10:07 a.m. #}{% now &quot;Y-m-d&quot; %}   {# 2020-07-07 #}```### `ContainerTag````pythonfrom django.core.cache import cachefrom django.utils.encoding import force_strfrom django.core.cache.utils import make_template_fragment_keyfrom jinja2_simple_tags import ContainerTagclass CacheExtension(ContainerTag):    tags = {&quot;cache&quot;}    def render(self, fragment_name, *vary_on, timeout=None, caller=None):        cache_key = make_template_fragment_key(fragment_name, vary_on)        value = cache.get(cache_key)        if value is None:            value = caller()            cache.set(cache_key, force_str(value), timeout)        else:            value = force_str(value)        return value```Usage:```jinja2{% cache &quot;footer&quot;, request.path, timeout=3600 %}  &lt;footer&gt;    ...  &lt;/footer&gt;{% endcache %}```### ContextCurrent context is available through the `self.context`.```pythonfrom django.urls import reversefrom jinja2_simple_tags import StandaloneTagclass AbsoluteURITag(StandaloneTag):    tags = {'absolute_uri'}    def render(self, name):        request = self.context['request']        url = reverse(name)        return request.build_absolute_uri(url)```### AssignmentBoth `StandaloneTag` and `ContainerTag` comes with out-of-the-boxsupport for assignment.Usage:```jinja2{% now &quot;Y-m-d&quot; as today %}...{{ today }}       {# 2020-07-07 #}``````jinja2{% cache &quot;footer&quot;, request.path, timeout=3600 as footer %}  &lt;footer&gt;    ...  &lt;/footer&gt;{% endcache %}...{{ footer }}```</longdescription>
</pkgmetadata>