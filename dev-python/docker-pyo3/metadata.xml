<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># docker-pyo3Python bindings the the rust `docker_api` crate.## Basic Usage`pip install docker_pyo3````pythonfrom docker_pyo3 import Docker# Connecto the daemondocker = Docker()# pull an imagedocker.images().pull(image='busybox')# build an imagedocker.images().build(path=&quot;path/to/dockerfile&quot;,dockerfile='Dockerfile',tag='test-image')# run a containerc = docker.containers().create(image='busybox',name='weee')```Full api examples can be seen in the `py_test` folder.## Python has `docker` already, why does this exist ?Good question. In short, because this is meant to be built into rust projects that expose python as a plugin interface. If you just need docker in python, use `pip install docker`, if you just need docker in rust use the `docker_api` crate. If you need to add a python interface to containers to a rust library/binary via `pyo3`- this will get you most of the way. ## Cool how do i do that ?See the below example. But basically just follow the instructions in `pyo3` to register a module and set the package state. This creates the following namespacesand classes within them- `root_module._integrations.docker`, `Docker`- `root_module._integrations.image`, `Image` `Images`- `root_module._integrations.container`, `Container` `Containers`- `root_module._integrations.network`, `Network` `Networks`- `root_module._integrations.volume`, `Volume` `Volumes````python#[pymodule]fn root_module(_py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {    py_logger::register();    m.add_function(wrap_pyfunction!(main, m)?)?;    task::register(_py, m)?;    utils::register(_py, m)?;        m.add_wrapped(wrap_pymodule!(_integrations))?;    let sys = PyModule::import(_py, &quot;sys&quot;)?;    let sys_modules: &amp;PyDict = sys.getattr(&quot;modules&quot;)?.downcast()?;    sys_modules.set_item(&quot;root_module._integrations&quot;, m.getattr(&quot;_integrations&quot;)?)?;    sys_modules.set_item(&quot;root_module._integrations.docker&quot;, m.getattr(&quot;_integrations&quot;)?.getattr(&quot;docker&quot;)?)?;    sys_modules.set_item(&quot;root_module._integrations.docker.image&quot;, m.getattr(&quot;_integrations&quot;)?.getattr(&quot;docker&quot;)?.getattr(&quot;image&quot;)?)?;    sys_modules.set_item(&quot;root_module._integrations.docker.container&quot;, m.getattr(&quot;_integrations&quot;)?.getattr(&quot;docker&quot;)?.getattr(&quot;container&quot;)?)?;    sys_modules.set_item(&quot;root_module._integrations.docker.network&quot;, m.getattr(&quot;_integrations&quot;)?.getattr(&quot;docker&quot;)?.getattr(&quot;network&quot;)?)?;    sys_modules.set_item(&quot;root_module._integrations.docker.volume&quot;, m.getattr(&quot;_integrations&quot;)?.getattr(&quot;docker&quot;)?.getattr(&quot;volume&quot;)?)?;    Ok(())}#[pymodule]fn _integrations(_py: Python, m:&amp;PyModule) -&gt; PyResult&lt;()&gt;{    m.add_wrapped(wrap_pymodule!(docker))?;    Ok(())}#[pymodule]fn docker(_py: Python, m:&amp;PyModule) -&gt; PyResult&lt;()&gt;{    m.add_class::&lt;docker_pyo3::Pyo3Docker&gt;()?;    m.add_wrapped(wrap_pymodule!(docker_pyo3::image::image))?;    m.add_wrapped(wrap_pymodule!(docker_pyo3::container::container))?;    m.add_wrapped(wrap_pymodule!(docker_pyo3::network::network))?;    m.add_wrapped(wrap_pymodule!(docker_pyo3::volume::volume))?;    Ok(())}```</longdescription>
</pkgmetadata>