<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># smaz-py3Small string compression using [_smaz_](https://github.com/antirez/smaz) compressionalgorithm.This library wraps the original C code, so it should be quite fast. It also has atestsuite that uses [hypothesis](https://hypothesis.readthedocs.io/en/latest/) basedproperty testing - a fancy way of saying that the tests are run with randomlygenerated strings using most of unicode, to better guard against edge cases.## Why do I need this?You are working with tons of short strings (text messages, urls,...) and want to savespace.According to the original code and notes, it achieves the best compression with englishstrings (up to 50%) that do not contain a ton of numbers. However, any other languagemight just work as well (allegedly still up to 30%).Note that in certain cases it is possible that the compression increases the size.Keep that in mind and maybe first run some tests. Measuring size is explained in theexample below as well.## How do I use this?Let's install:```sh$ pip install smaz-py3```_Note_: the `-py3` is important. There is an original release, kudos to BenjaminSergeant, but it does not work with Python 3+.Now, a usage example.```pythonimport smaz# First we compress our example sentence.compressed = smaz.compress(&quot;The quick brown fox jumps over the lazy dog.&quot;)# The output is raw bytes. As can be seen in the decompress() call below.# Now, we decompress these raw bytes again. This should return our example sentence.decompressed = smaz.decompress(b'H\x00\xfeq&amp;\x83\xfek^sA)\xdc\xfa\x00\xfej&amp;-&lt;\x95\xe7\r\x0b\x89\xdbG\x18\x06;n')#  This does not fail, which means we have successfully compressed and decompressed#  without damaging anything.assert decompressed == &quot;The quick brown fox jumps over the lazy dog.&quot;```How much did we compress?```python# First, we get the actual byte size of our example string.original_size = len(&quot;The quick brown fox jumps over the lazy dog.&quot;.encode(&quot;utf-8&quot;))  # 44 bytes# As `compressed` is already raw bytes, we can also call len() on thiscompressed_size = len(compressed)  # 31 bytescompression_ratio = 1 - compressed_size / original_size  # 0.295```So we saved about 30% (0.295 \* 100 and some rounding ðŸ˜‰).If the compression ratio would be below 0, we would have actually increased thestring. Yes, this can happen. Again, smaz works best on _small_ strings.### A small note about NULL bytesCurrently, `smaz-py3` does not support strings with NULL bytes (`\x00`) in compression:```python&gt;&gt;&gt; import smaz&gt;&gt;&gt; smaz.compress(&quot;The quick brown fox\x00 jumps over the lazy dog.&quot;)Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: embedded null character```My reasoning behind this is that in most scenarios you want to clean that awaybeforehand anyways. If you think this is wrong, please open up an[issue on github](https://github.com/originell/smaz-py3). I am happy for further input!## Migrating from Python 2 `smaz`If you have been using the [Python 2 `smaz` library](https://pypi.org/project/smaz/),this Python 3 version exposes the same API, so it is a drop-in replacement.**Important**: While developing this extension, I think I found a bug in the originallibrary. Using Python 2.7.16:```python&gt;&gt;&gt; import smaz&gt;&gt;&gt; smaz.compress(&quot;The quick brown fox jumps over the lazy dog.&quot;)'H'  # this is wrong.&gt;&gt;&gt; small = smaz.compress(&quot;The quick brown fox jumps over the lazy dog.&quot;)&gt;&gt;&gt; smaz.decompress(small)'The'  # information lost.```So, if you are actually upgrading from this, please make sure that you are notaffected by this. `smaz-py3` is not prone to this bug.Behind the scenes, smaz uses NULL bytes in compression. However, when converting fromC back to a Python string object, NULL is used to mark the end of the string. Theabove sentence, compressed, has the NULL byte right after the `H` (`H\x00\xfeqâ€¦`).That's why it stops right then and there. Again, `smaz-py3` is not affected by this,mostly because I got lucky in choosing this example sentence.## CreditsCredit where credit is due. First to [antirez's SMAZ compression](https://github.com/antirez/smaz)and to the [original python 2 wrapper](https://pypi.org/project/smaz/) by BenjaminSergeant.</longdescription>
</pkgmetadata>