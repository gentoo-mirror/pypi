<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## marshmallow-jsonschema: JSON Schema formatting with marshmallow![Build Status](https://github.com/fuhrysteve/marshmallow-jsonschema/workflows/build/badge.svg)[![Coverage Status](https://coveralls.io/repos/github/fuhrysteve/marshmallow-jsonschema/badge.svg?branch=master)](https://coveralls.io/github/fuhrysteve/marshmallow-jsonschema?branch=master)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black) marshmallow-jsonschema translates marshmallow schemas into JSON Schema Draft v7 compliant jsonschema. See http://json-schema.org/#### Why would I want my schema translated to JSON?What are the use cases for this? Let's say you have amarshmallow schema in python, but you want to render yourschema as a form in another system (for example: a web browseror mobile device).#### InstallationRequires python&gt;=3.6 and marshmallow&gt;=3.11. (For python 2 &amp; marshmallow 2 support, please use marshmallow-jsonschema&lt;0.11)```pip install marshmallow-jsonschema```#### Some Client tools can render forms using JSON Schema* [react-jsonschema-form](https://github.com/mozilla-services/react-jsonschema-form) (recommended)  * See below extension for this excellent library!* https://github.com/brutusin/json-forms* https://github.com/jdorn/json-editor* https://github.com/ulion/jsonform### Examples#### Simple Example```pythonfrom marshmallow import Schema, fieldsfrom marshmallow_jsonschema import JSONSchemaclass UserSchema(Schema):    username = fields.String()    age = fields.Integer()    birthday = fields.Date()user_schema = UserSchema()json_schema = JSONSchema()json_schema.dump(user_schema)```Yields:```python{'properties': {'age': {'format': 'integer',                        'title': 'age',                        'type': 'number'},                'birthday': {'format': 'date',                             'title': 'birthday',                             'type': 'string'},                'username': {'title': 'username', 'type': 'string'}}, 'required': [], 'type': 'object'}```#### Nested Example```pythonfrom marshmallow import Schema, fieldsfrom marshmallow_jsonschema import JSONSchemafrom tests import UserSchemaclass Athlete(object):    user_schema = UserSchema()    def __init__(self):        self.name = 'sam'class AthleteSchema(Schema):    user_schema = fields.Nested(JSONSchema)    name = fields.String()    athlete = Athlete()athlete_schema = AthleteSchema()athlete_schema.dump(athlete)```#### Complete example Flask application using brutisin/json-forms![Screenshot](http://i.imgur.com/jJv1wFk.png)This example renders a form not dissimilar to how [wtforms](https://github.com/wtforms/wtforms) might render a form.However rather than rendering the form in python, the JSON Schema is rendered using thejavascript library [brutusin/json-forms](https://github.com/brutusin/json-forms).```pythonfrom flask import Flask, jsonifyfrom marshmallow import Schema, fieldsfrom marshmallow_jsonschema import JSONSchemaapp = Flask(__name__)class UserSchema(Schema):    name = fields.String()    address = fields.String()@app.route('/schema')def schema():    schema = UserSchema()    return jsonify(JSONSchema().dump(schema))@app.route('/')def home():    return '''&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/brutusin.json-forms/1.3.0/css/brutusin-json-forms.css&quot;&gt;&lt;Paste&gt;&lt;script src=&quot;https://code.jquery.com/jquery-1.12.1.min.js&quot; integrity=&quot;sha256-I1nTg78tSrZev3kjvfdM5A5Ak/blglGzlaZANLPDl3I=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.string/3.3.4/underscore.string.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/brutusin.json-forms/1.3.0/js/brutusin-json-forms.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function() {    $.ajax({        url: '/schema'        , success: function(data) {            var container = document.getElementById('myform');            var BrutusinForms = brutusin[&quot;json-forms&quot;];            var bf = BrutusinForms.create(data);            bf.render(container);        }    });});&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;myform&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'''if __name__ == '__main__':    app.run(host='0.0.0.0', debug=True)```### Advanced usage#### Custom Type supportSimply add a `_jsonschema_type_mapping` method to your fieldso we know how it ought to get serialized to JSON Schema.A common use case for this is creating a dropdown menu usingenum (see Gender below).```pythonclass Colour(fields.Field):    def _jsonschema_type_mapping(self):        return {            'type': 'string',        }    def _serialize(self, value, attr, obj):        r, g, b = value        r = &quot;%02X&quot; % (r,)        g = &quot;%02X&quot; % (g,)        b = &quot;%02X&quot; % (b,)        return '#' + r + g + b class Gender(fields.String):    def _jsonschema_type_mapping(self):        return {            'type': 'string',            'enum': ['Male', 'Female']        }class UserSchema(Schema):    name = fields.String(required=True)    favourite_colour = Colour()    gender = Gender()schema = UserSchema()json_schema = JSONSchema()json_schema.dump(schema)```### React-JSONSchema-Form Extension[react-jsonschema-form](https://react-jsonschema-form.readthedocs.io/en/latest/)is a library for rendering jsonschemas as a form using React. It is very powerfuland full featured.. the catch is that it requires a proprietary[`uiSchema`](https://react-jsonschema-form.readthedocs.io/en/latest/form-customization/#the-uischema-object)to provide advanced control how the form is rendered.[Here's a live playground](https://rjsf-team.github.io/react-jsonschema-form/)*(new in version 0.10.0)*```pythonfrom marshmallow_jsonschema.extensions import ReactJsonSchemaFormJSONSchemaclass MySchema(Schema):    first_name = fields.String(        metadata={            'ui:autofocus': True,        }    )    last_name = fields.String()    class Meta:        react_uischema_extra = {            'ui:order': [                'first_name',                'last_name',            ]        }json_schema_obj = ReactJsonSchemaFormJSONSchema()schema = MySchema()# here's your jsonschemadata = json_schema_obj.dump(schema)# ..and here's your uiSchema!ui_schema_json = json_schema_obj.dump_uischema(schema)</longdescription>
</pkgmetadata>