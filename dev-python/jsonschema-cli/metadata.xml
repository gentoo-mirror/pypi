<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JsonSchema CLIA thin wrapper over [Python Jsonschema](https://github.com/Julian/jsonschema) to allow validating shcemas easily using simple CLI commands.## Installing`pip install jsonschema-cli`## SecurityThe `$ref` resolving will automatically resolve to any path using basic `$ref` notation:```json{&quot;$ref&quot;: &quot;my-custom.json#....&quot;}```That means that when using this tool, an attacker may do the following:```json{&quot;$ref&quot;: &quot;../../../../all-my-secrets.json&quot;}```To make sure this doesn't happen:1. When using this tool in a backend server, make sure the file access is scoped.2. Don't run JSONSCHEMAS without sanitizing paths.3. Treat all un-knwon user input as evil.This has no actual current  affect other than loading the contets of secrets into memory of the process.But may lead to misfortune if not addressed.## UsgaeUsing `jsonschema-cli --help````bashusage: jsonschema-cli [-h] {validate} ...A wrapper around https://github.com/Julian/jsonschema to validate JSON using the CLIpositional arguments:  {validate}  Validate thet json data with a schema    validate  Validateoptional arguments:  -h, --help  show this help message and exit```### ValidateUsing `jsonschema-cli validate --help````bashusage: jsonschema-cli validate [-h] schema_file_or_string data_file_or_stringpositional arguments:  schema_file_or_string                        The schema you want to use to validate the data  data_file_or_string   The data you want validated by the schemaoptional arguments:  -h, --help            show this help message and exit```### Examples```bash# Returns no errors on stdout, no output needed on success (just exit code 0 is enough)jsonschema-cli validate '{&quot;properties&quot;: {&quot;number&quot;: {&quot;type&quot;: &quot;integer&quot;}}, &quot;required&quot;: [&quot;number&quot;]}' '{&quot;number&quot;: 123}'# Has an error, &quot;number&quot; is now &quot;123&quot; instead of 123, an integer is expected.jsonschema-cli validate '{&quot;properties&quot;: {&quot;number&quot;: {&quot;type&quot;: &quot;integer&quot;}}, &quot;required&quot;: [&quot;number&quot;]}' '{&quot;number&quot;: &quot;123&quot;}'&gt; '123' is not of type 'integer'&gt;&gt; Failed validating 'type' in schema['properties']['number']:&gt;     {'type': 'integer'}&gt;&gt; On instance['number']:&gt;     '123'```## Load YAMLThe CLI command can read YAML and validate both schema and data written in YAML```bash# Returns no errors on stdout, no output needed on success (just exit code 0 is enough)SCHEMA=&quot;properties:  number:    type: integer&quot;DATA=&quot;number: 123&quot;jsonschema-cli validate &quot;$SCHEMA&quot; &quot;$DATA&quot;# Has an error, &quot;number&quot; is now &quot;123&quot; instead of 123, an integer is expected.SCHEMA=&quot;properties:  number:    type: integer&quot;DATA=&quot;number: \&quot;123\&quot;&quot;jsonschema-cli validate &quot;$SCHEMA&quot; &quot;$DATA&quot;&gt; '123' is not of type 'integer'&gt;&gt; Failed validating 'type' in schema['properties']['number']:&gt;     {'type': 'integer'}&gt;&gt; On instance['number']:&gt;     '123'```</longdescription>
</pkgmetadata>