<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Relations plugin for model builder## Relation data typeThe relation data type marks part of the metadata that will be filled with a related object.Example usage - part of dataset model:```yamlprimary-article:    type:  relation    name:  article    model: article    keys: ['metadata.title', 'metadata.authors']```The element &quot;primary-article&quot; will be connected to the article record. The recordclass and properties will be taken from the &quot;article&quot; modelthat is registered in &quot;oarepo_models&quot; entrypoint.When returned to the user/serialized to ES, it will take the title andauthor fields from the related model and copy them into the primary-article field.It will automatically generate the following schema:will generate:```json5// schema{    &quot;primary-article&quot;: {        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {            &quot;id&quot;: {&quot;type&quot;: &quot;string&quot;},            &quot;@v&quot;: {&quot;type&quot;: &quot;string&quot;},            &quot;title&quot;: {},     // copied from registered article model            &quot;authors&quot;: {}    // copied from registered article model        }    }}``````pythonclass Record:    # ...    relations = MultiRelationsField(        article=PIDRelation(                # &quot;name&quot; from above            &quot;...primary-article&quot;,           # path inside the dataset model            &quot;keys&quot;: ['metadata.title', 'metadata.authors'],   # copied keys            pid_field: Article.pid          # resolved model name and PID field        )    )```All arguments:```yamlprimary-article:    type: relation    name: ...    model: ...    keys: [...]    model-class:    relation-classes:        list: PIDListRelation        nested: PIDNestedListRelation        single: PIDRelation    relation-class:    relation-args:        attrs: []        keys: []        _value_key_suffix: id        _clear_empty: true        cache_key:        value_check:        pid_field: model-class.pid    imports:    - import: invenio_records_resources.records.system_fields.relations.PIDRelation      alias: PIDRelation```| Field            | Description   ||------------------|---------------|| name             | Relation name, will be used as param name inside RelationsField || model            | Name of the referenced model - from oarepo.models entrypoint or passed on commandline via --include parameter || keys             | Array of paths or dicts. If item is a path, that path will be copied from the referenced model. If it is dict it must contain the whole model definition. || model-class      | Class representing the related model || relation-classes | If the field is not an array and not nested inside an array, &quot;single&quot; is used. If the field is an array &quot;list&quot; is used. If the field is inside an array field, &quot;nested&quot; is used || relation-class   | can be used to override relation-classes || relation-args    | A dictionary of arguments that will be passes to the relation class || imports          | You can define your own imports/aliases here. The defaults are thise for list, nested and single relation classes |## Internal relationsSometimes it you might want to reference part of your document for indexing purposes etc. and not split the document into two records.For these, internal relations can be used:```yamlproperties:    metadata:        properties:            obj{}:                ^id: anchor-obj                test: keyword                id: keyword```On object/array item, define the &quot;id&quot; field containing your &quot;symbolic&quot; name of the target of the relation.Then the definition of the relation will look like:```yamlproperties:    metadata:        properties:            internal-ref:                type: relation                model: &quot;#anchor-obj&quot;                keys: [id, test]```## Supported relationsSee [referrer.yaml](https://github.com/oarepo/oarepo-model-builder-relations/blob/main/tests/referrer.yaml) for a list of supported relations.</longdescription>
</pkgmetadata>