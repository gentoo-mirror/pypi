<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># berlin-rsA Python/Rust microservice to identify locations and tag them with UN-LOCODEs andISO-3166-2 subdivisions.### Getting startedTo test the Rust API locally:```shell  make run```This will make an API available on port 3001. It serves simple requests of theform:```shellcurl 'http://localhost:3001/berlin/search?q=house+prices+in+londo&amp;state=gb' | jq```replacing `localhost` with the local endpoint (`jq` used for formatting).This will return results of the form:```json{  &quot;time&quot;: &quot;32.46ms&quot;,  &quot;query&quot;: {    &quot;raw&quot;: &quot;house prices in londo&quot;,    &quot;normalized&quot;: &quot;house prices in londo&quot;,    &quot;stop_words&quot;: [      &quot;in&quot;    ],    &quot;codes&quot;: [],    &quot;exact_matches&quot;: [      &quot;house&quot;    ],    &quot;not_exact_matches&quot;: [      &quot;house prices&quot;,      &quot;prices in&quot;,      &quot;prices&quot;,      &quot;in londo&quot;,      &quot;londo&quot;    ],    &quot;state_filter&quot;: &quot;gb&quot;,    &quot;limit&quot;: 1,    &quot;levenshtein_distance&quot;: 2  },  &quot;results&quot;: [    {      &quot;loc&quot;: {        &quot;encoding&quot;: &quot;UN-LOCODE&quot;,        &quot;id&quot;: &quot;gb:lon&quot;,        &quot;key&quot;: &quot;UN-LOCODE-gb:lon&quot;,        &quot;names&quot;: [          &quot;london&quot;        ],        &quot;codes&quot;: [          &quot;lon&quot;        ],        &quot;state&quot;: [          &quot;gb&quot;,          &quot;united kingdom of great britain and northern ireland&quot;        ],        &quot;subdiv&quot;: [          &quot;lnd&quot;,          &quot;london, city of&quot;        ]      },      &quot;score&quot;: 1346,      &quot;offset&quot;: {        &quot;start&quot;: 16,        &quot;end&quot;: 21      }    }  ]}```A Python wheel can also be built, using```shell  make wheels  pip install build/wheels/berlin-0.1.0-xyz.whl```where `xyz` is your architecture.Afterwards berlin should be functional inside a python shell/script. Example:```pythonimport berlindb = berlin.load('../data')loc = db.query('manchester population', 'gb', 1)[0];print(&quot;location:&quot;, loc.words)```### DescriptionBerlin is a location search engine which  works on an in-memory collection ofall UN Locodes, subdivisions and states (countries). Here are the mainarchitectural highlights: On startup Berlin does a basic linguistic analysis ofthe locations: split names into words, remove diacritics, transliteratenon-ASCII symbols to ASCII. For example,  this allows us to find  “Las Vegas”when searching for “vegas”.  It employs string interning in order to bothoptimise memory usage and allow direct lookups for exact matches. If we canresolve (parts of) the search term to an existing interned string, it meansthat we have a location with this name in the database.When the user submits the search term, Berlin first does a preliminary analysisof the search term: 1) split into words and pairs of words 2) try to identifythe former as existing locations (can be resolved to existing interned strings)and tag them as “exact matches”. This creates many search terms from theoriginal phrase.  Pre-filtering step. Here we do three things 1) resolve exactmatches by direct lookup in the names and codes tables 2) do a prefix searchvia a finite-state transducer 3) do a fuzzy search via a Levenshtein distanceenabled finite-state transducer.  The pre-filtered results are passed through astring-similarity evaluation algorithm and sorted by score. The results below athreshold are truncated.  A graph is built from the locations found during theprevious  step in order to link them together hierarchically if possible. Thisfurther boosts some locations. For example, if the user searches for “new yorkUK” it will boost the location in Lincolnshire and it will show up higher thanNew York city in the USA.  It is also possible to request search only in aspecific country (which is enabled by default for the UK)Berlin is able to find locations with a high degree of semantic accuracy. Speedis roughly equal to 10-15 ms per every non-matching word (or typo) + 1 ms forevery exact match. A complex query of 8 words usually takes less than 100 msand all of the realistic queries in our test suite take less than 50 ms, whilethe median is under 30 ms. Short queries containing  an exact match (caseinsensitive) are faster than 10 ms.The architecture would allow to easily implement as-you-type search suggestionsin under 10 milliseconds if deemed desirable.### LicensePrepared by Flax &amp; Teal Limited for ONS Alpha project.Copyright © 2022, Office for National Statistics (https://www.ons.gov.uk)Released under MIT license, see [LICENSE](LICENSE.md) for details.### LicensePrepared by Flax &amp; Teal Limited for ONS Alpha project.Copyright © 2022, Office for National Statistics (https://www.ons.gov.uk)Released under MIT license, see [LICENSE](LICENSE.md) for details.</longdescription>
</pkgmetadata>