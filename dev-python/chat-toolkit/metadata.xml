<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- TOC --&gt;* [Chat Toolkit](#chat-toolkit)  * [Installation](#installation)  * [Quick Usage](#quick-usage)  * [Components](#components)    * [Chatbots](#chatbots)    * [Speech to Text](#speech-to-text)    * [Text to Speech](#text-to-speech)  * [Orchestrator](#orchestrator)    * [Text to Text](#text-to-text)    * [Speech to Text](#speech-to-text-1)    * [Text to Speech](#text-to-speech-1)    * [Speech to Speech](#speech-to-speech)&lt;!-- TOC --&gt;# Chat ToolkitExtensible package for creating machine learning powered chatbots.Package supports Linux and Windows. Mac is not explicitly supported, although it is possible some, or many parts of this will still work.**NOTE**: Some components require additional dependencies. See below for more information.## Installation`pip install -U chat-toolkit`## Quick UsageThe main script has been provided for convenience. This allows you to easilystart a conversation in your terminal.Usage:```usage: A script for quickly starting a conversation in your terminal. [-h] [--chatbot {chatgpt}]                                                                      [--speech-to-text [{whisper}]]                                                                      [--text-to-speech [{pyttsx3}]]options:  -h, --help                        show this help message and exit  --chatbot {chatgpt}               Chatbot to use. Default: chatgpt.  --speech-to-text [{whisper}]      Speech to text model to use. Without additional arguments, defaults to whisper. Defaults to                                    None when argument is not present.  --text-to-speech [{pyttsx3}]      Text to speech model to use. Without additional arguments, defaults to pyttsx3. Defaults to                                    None when argument is not present.```To quickly start up a Text to Text conversation (default models):`python -m chat_toolkit`To quickly start up a Speech to Text conversation (default models):`python -m chat_toolkit --speech-to-text`To quickly start up a Text to Speech conversation (default models):`python -m chat_toolkit --text-to-speech`To quickly start up a Speech to Speech conversation (default models):`python -m chat_toolkit --speech-to-text --text-to-speech`## ComponentsComponents are ML powered objects that accomplish tasks. Components should beable to estimate session costs. You can build your own components to use inisolation or as part of an orchestrator object.**NOTE**: Cost estimates are based on pricing rates provided by the user. Usersshould do their own due dilligence and are responsible for their own costs andestimations.&gt; Advanced Usage: You can create your own component types by&gt; subclassing `chat_toolkit.base.ComponentBase`### ChatbotsThese components send and receive text messages.| Class         | Requirements   | Model                   | Default Cost     | Reference                                                                    ||---------------|----------------|-------------------------|------------------|------------------------------------------------------------------------------|| OpenAIChatBot | OPENAI_API_KEY | gpt-3.5-turbo (ChatGPT) | $0.002/1k tokens | [OpenAI](https://platform.openai.com/docs/guides/chat/chat-completions-beta) |Basic Usage:```pythonfrom chat_toolkit import OpenAIChatBotchatbot = OpenAIChatBot()chatbot.prompt_chatbot(&quot;You are a butler named Jeeves.&quot;)chatbot_response, _ = chatbot.send_message(&quot;Hello, what is your name?&quot;)```&gt; Advanced Usage: You can create your own chatbot components by&gt; subclassing `chat_toolkit.base.ChatbotComponentBase`### Speech to TextThese components record speech and transform it into text.| Class              | Requirements                          | Model    | Default Cost     | Reference                                                                            ||--------------------|---------------------------------------|----------|------------------|--------------------------------------------------------------------------------------|| OpenAISpeechToText | OPENAI_API_KEY, libportaudio2 (linux) | whiper-1 | $0.006/1k tokens | [OpenAI](https://platform.openai.com/docs/guides/speech-to-text/speech-to-text-beta) |Basic Usage:```pythonfrom chat_toolkit import OpenAISpeechToTextspeech_to_text = OpenAISpeechToText()text, _ = speech_to_text.transcribe_speech()```**NOTE**: Recording quality is very sensitive to your hardware. Things can go wrong,for example, if the input volume on your microphone is too loud.&gt; Advanced Usage: You can create your own speech to text components by&gt; subclassing `chat_toolkit.base.SpeechToTextComponentBase`### Text to SpeechThese components say pieces of text.| ClassTextToSpeech   | Requirements   | Model  | Default Cost | Reference                                            ||---------------------|----------------|--------|--------------|------------------------------------------------------|| Pyttsx3TextToSpeech | espeak (linux) | n/a    | Free         | [Pyttsx3](https://pyttsx3.readthedocs.io/en/latest/) |**NOTE**: Pyttsx3TextToSpeech currently defaults to English, but it may be configured using `set_pyttsx3_property()` method. See pyttsx3's documentation for more information.Basic Usage:```pythonfrom chat_toolkit import Pyttsx3TextToSpeechtext_to_speech = Pyttsx3TextToSpeech()text_to_speech.say_text(&quot;hello&quot;)```&gt; Advanced Usage: You can create your own text to speech components by&gt; subclassing `chat_toolkit.base.TextToSpeechComponentBase`## OrchestratorThe Orchestrator class also allow you to chat from the terminal. The Orchestratorshould work such that you can replace any component with another of thesame type, or a custom-built one, and still be able to use the orchestrator.### Text to TextBasic usage:```pythonfrom chat_toolkit import OpenAIChatBotfrom chat_toolkit import Orchestratorchat = Orchestrator(OpenAIChatBot())chat.terminal_conversation()```### Speech to TextBasic usage:```pythonfrom chat_toolkit import OpenAIChatBot, OpenAISpeechToTextfrom chat_toolkit import Orchestratorchat = Orchestrator(OpenAIChatBot(), OpenAISpeechToText())chat.terminal_conversation()```### Text to SpeechBasic usage:```pythonfrom chat_toolkit import OpenAIChatBot, Pyttsx3TextToSpeechfrom chat_toolkit import Orchestratorchat = Orchestrator(OpenAIChatBot(), text_to_speech_component=Pyttsx3TextToSpeech())chat.terminal_conversation()```### Speech to SpeechBasic usage:```pythonfrom chat_toolkit import OpenAIChatBot, OpenAISpeechToText, Pyttsx3TextToSpeechfrom chat_toolkit import Orchestratorchat = Orchestrator(OpenAIChatBot(), OpenAISpeechToText(), Pyttsx3TextToSpeech())chat.terminal_conversation()```</longdescription>
</pkgmetadata>