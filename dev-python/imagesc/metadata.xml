<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># imagesc[![Python](https://img.shields.io/pypi/pyversions/imagesc)](https://img.shields.io/pypi/pyversions/imagesc)[![PyPI Version](https://img.shields.io/pypi/v/imagesc)](https://pypi.org/project/imagesc/)[![License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/erdogant/imagesc/blob/master/LICENSE)[![Github Forks](https://img.shields.io/github/forks/erdogant/imagesc.svg)](https://github.com/erdogant/imagesc/network)[![GitHub Open Issues](https://img.shields.io/github/issues/erdogant/imagesc.svg)](https://github.com/erdogant/imagesc/issues)[![Project Status](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active)[![Downloads](https://pepy.tech/badge/imagesc/month)](https://pepy.tech/project/imagesc/month)[![Downloads](https://pepy.tech/badge/imagesc)](https://pepy.tech/project/imagesc)&lt;!---[![BuyMeCoffee](https://img.shields.io/badge/buymea-coffee-yellow.svg)](https://www.buymeacoffee.com/erdogant)--&gt;&lt;!---[![Coffee](https://img.shields.io/badge/coffee-black-grey.svg)](https://erdogant.github.io/donate/?currency=USD&amp;amount=5)--&gt;* imagesc is an Python package to create heatmaps. Various methods to create a heatmap are implemented, each with specific properties that can help to easily create your heatmap. The **fast** and **clean** method is optimized for speed, the **cluster** method provides clustering, the **seaborn** method contains many configuration settings, and finally, the **plot** as good as possible the imagesc from matlab.# **Star this repo if you like it! ⭐️**#### Functions in imagesc```python# X is your numpy arrayfig  = imagesc.seaborn(X)fig  = imagesc.cluster(X)fig  = imagesc.fast(X)fig  = imagesc.clean(X)fig  = imagesc.plot(X)status = imagesc.savefig(fig)path = imagesc.d3(df)```## Contents- [Installation](#-installation)- [Requirements](#-Requirements)- [Quick Start](#-quick-start)- [Contribute](#-contribute)- [Citation](#-citation)- [Maintainers](#-maintainers)- [License](#-copyright)## Installation* Install imagesc from PyPI (recommended). imagesc is compatible with Python 3.6+ and runs on Linux, MacOS X and Windows. * It is distributed under the MIT license.## Requirements```python# Note that: seaborn is only required when using **seaborn** or **cluster** functions.pip install -r requirements.txt```## Installation from Pypi```pip install imagesc```## Import imagesc package```pythonimport imagesc as imagesc```### d3* Implemention is based on **d3*** Interactive* Stand-alone* https://d3-graph-gallery.com```pythondf = pd.DataFrame(np.random.randint(0, 100, size=(50, 50)))imagesc.d3(df, vmax=1)```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/d3_heatmap_1.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;### seaborn* Underlying implemented is based on **seaborn*** Large number of configurations* Slow when using large datasets* Grid is aligned to the cells* See here for all parameters: https://seaborn.pydata.org/generated/seaborn.heatmap.html```pythondf = pd.DataFrame(np.random.randint(0,100,size=(10,20)))A = imagesc.seaborn(df.values, df.index.values, df.columns.values)B = imagesc.seaborn(df.values, df.index.values, df.columns.values, annot=True, annot_kws={&quot;size&quot;: 12})C = imagesc.seaborn(df.values, df.index.values, df.columns.values, annot=True, annot_kws={&quot;size&quot;: 12}, cmap='rainbow')D = imagesc.seaborn(df.values, df.index.values, df.columns.values, annot=True, annot_kws={&quot;size&quot;: 12}, cmap='rainbow', linecolor='#ffffff')```&lt;p align=&quot;center&quot;&gt;  A&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/seaborn1.png&quot; width=&quot;300&quot; /&gt;  B&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/seaborn2.png&quot; width=&quot;300&quot; /&gt;  C&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/seaborn3.png&quot; width=&quot;300&quot; /&gt;  D&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/seaborn4.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;### cluster* Underlying implemented is based on **clustermap** * When you desire to cluster your heatmap* Default distance setting: metric=&quot;euclidean&quot;, linkage=&quot;ward&quot; (can be changed)* Slow for large data sets* Grid is aligned to the cells* Possibilities to tweak* Possible arguments: https://seaborn.pydata.org/generated/seaborn.clustermap.html```pythondf = pd.DataFrame(np.random.randint(0,100,size=(10,20)))fig_C1 = imagesc.cluster(df.values, df.index.values, df.columns.values)fig_C2 = imagesc.cluster(df.values, df.index.values, df.columns.values, cmap='rainbow')fig_C3 = imagesc.cluster(df.values, df.index.values, df.columns.values, cmap='rainbow', linecolor='#ffffff')fig_C4 = imagesc.cluster(df.values, df.index.values, df.columns.values, cmap='rainbow', linecolor='#ffffff', linewidth=0)imagesc.savefig(fig_C1, './docs/figs/cluster4.png')```&lt;p align=&quot;center&quot;&gt;  C1&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/cluster1.png&quot; width=&quot;300&quot; /&gt;  C2&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/cluster2.png&quot; width=&quot;300&quot; /&gt;  C3&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/cluster3.png&quot; width=&quot;300&quot; /&gt;  C4&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/cluster4.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;### fast* Underlying implemented is based on **pcolorfast** * Fast* Not so much tweakable* Grid is **not** aligned to the cells* Possible arguments: https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.pcolorfast.html```pythondf = pd.DataFrame(np.random.randint(0,100,size=(10,20)))fig_F1 = imagesc.fast(df.values, df.index.values, df.columns.values)fig_F2 = imagesc.fast(df.values, df.index.values, df.columns.values, grid=False)fig_F3 = imagesc.fast(df.values, df.index.values, df.columns.values, grid=False, cbar=False)fig_F4 = imagesc.fast(df.values, df.index.values, df.columns.values, grid=True, cbar=False)fig_F5 = imagesc.fast(df.values, df.index.values, df.columns.values, cmap='rainbow')fig_F6 = imagesc.fast(df.values, df.index.values, df.columns.values, cmap='rainbow', linewidth=0.5, grid=True)imagesc.savefig(fig_C1, './docs/figs/fast1.png')```&lt;p align=&quot;center&quot;&gt;  F1&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/fast1.png&quot; width=&quot;300&quot; /&gt;  F2&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/fast2.png&quot; width=&quot;300&quot; /&gt;  F3&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/fast3.png&quot; width=&quot;300&quot; /&gt;  F4&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/fast4.png&quot; width=&quot;300&quot; /&gt;  F5&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/fast5.png&quot; width=&quot;300&quot; /&gt;  F6&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/fast6.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;### clean* Underlying implemented is based on **pcolorfast** * Fast* No Grid* Limited configurations* Ideal for photos* Possible arguments: https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.pcolorfast.html```pythondf = pd.DataFrame(np.random.randint(0,100,size=(10,20)))fig_FC1 = imagesc.clean(df.values)fig_FC2 = imagesc.clean(df.values, cmap='rainbow')imagesc.savefig(fig_C1, './docs/figs/clean1.png')```&lt;p align=&quot;center&quot;&gt;  F1&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/clean1.png&quot; width=&quot;300&quot; /&gt;  F2&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/clean2.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;### plot* Underlying implemented is based on **imshow** * implementation will behave more-or-less as the one of matlab* Medium speed* Various configurations are possible but less then **seaborn*** Grid is aligned to the cells* Possible arguments: https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.imshow.html```pythondf = pd.DataFrame(np.random.randint(0,100,size=(10,20)))fig_M1 = imagesc.plot(df.values)fig_M2 = imagesc.plot(df.values, cbar=False)fig_M3 = imagesc.plot(df.values, cbar=False, axis=False)fig_M4 = imagesc.plot(df.values, cbar=False, axis=True, linewidth=0.2)fig_M5 = imagesc.plot(df.values, df.index.values, df.columns.values)fig_M6 = imagesc.plot(df.values, df.index.values, df.columns.values, cbar=False, linewidth=0.2)fig_M7 = imagesc.plot(df.values, df.index.values, df.columns.values, grid=True, cbar=False, linewidth=0.2)fig_M8 = imagesc.plot(df.values, df.index.values, df.columns.values, grid=False, cbar=False, linewidth=0.2)fig_M9 = imagesc.plot(df.values, df.index.values, df.columns.values, grid=True, cbar=False, linewidth=0.8, linecolor='#ffffff')fig_M10 = imagesc.plot(df.values, df.index.values, df.columns.values, grid=True, cbar=False, linewidth=0.8, linecolor='#ffffff', cmap='rainbow')imagesc.savefig(fig, './docs/figs/plot10.png')imagesc.savefig(fig_C1, './docs/figs/fast1.png')```&lt;p align=&quot;center&quot;&gt;  M1&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot1.png&quot; width=&quot;300&quot; /&gt;  M2&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot2.png&quot; width=&quot;300&quot; /&gt;  M3&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot3.png&quot; width=&quot;300&quot; /&gt;  M4&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot4.png&quot; width=&quot;300&quot; /&gt;  M5&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot5.png&quot; width=&quot;300&quot; /&gt;  M6&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot6.png&quot; width=&quot;300&quot; /&gt;  M7&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot7.png&quot; width=&quot;300&quot; /&gt;  M8&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot8.png&quot; width=&quot;300&quot; /&gt;  M9&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot9.png&quot; width=&quot;300&quot; /&gt;  M10&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot10.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;### Speed:```pythonimport matplotlib.image as mpimgimg=mpimg.imread('./docs/figs/lenna.png')fig = imagesc.clean(img)# runtime 1.49fig = imagesc.fast(img, cbar=False, axis=False)# runtime: 2.931 secondsfig = imagesc.plot(img, linewidth=0, cbar=False)# runtime: 11.042```&lt;p align=&quot;center&quot;&gt;  **fast**&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/fast_lenna.png&quot; width=&quot;300&quot; /&gt;  **clean**&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/clean_lenna.png&quot; width=&quot;300&quot; /&gt;  **plot**&lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/plot_lenna1.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/erdogant/imagesc/blob/master/docs/figs/time_in_secs.png&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;### CitationPlease cite imagesc in your publications if this is useful for your research. Here is an example BibTeX entry:```BibTeX@misc{erdogant2019imagesc,  title={imagesc},  author={Erdogan Taskesen},  year={2019},  howpublished={\url{https://github.com/erdogant/imagesc}},}```### References* seabornhttps://seaborn.pydata.org/generated/seaborn.heatmap.html* clustermaphttps://seaborn.pydata.org/generated/seaborn.clustermap.html* fast and cleanhttps://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.pcolor.html* plot https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.imshow.html* Otherhttps://matplotlib.org/3.1.1/gallery/images_contours_and_fields/image_annotated_heatmap.html* Colormaphttps://matplotlib.org/examples/color/colormaps_reference.html### Maintainer* Erdogan Taskesen, github: [erdogant](https://github.com/erdogant)* Contributions are welcome.* If you wish to buy me a &lt;a href=&quot;https://www.buymeacoffee.com/erdogant&quot;&gt;Coffee&lt;/a&gt; for this work, it is very appreciated :)</longdescription>
</pkgmetadata>