<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Humbug PythonThe Humbug Python library.## Installation### Using pip```bashpip install humbug```### From sourceClone this repository and enter this directory. Make sure you are in your desired Python environmentand then run:```bashpython setup.py install```## IntegrationTo add Humbug to your project, first create a Bugout access token and journal [following theseinstructions](../README.md#trying-it-out).You can follow the recipes below to integrate Humbug into your codebase:1. [Error reporting](./recipes/error_reporting.py)1. [System reporting](./recipes/system_reporting.py)All reports are generated (and published) by a Humbug reporter. By default, Humbug publishes allreports asynchronously and in the background. If you would like to publish selected reportssynchronously, all reporter methods take a `wait=True` argument.If you plan to _only_ use a reporter synchronously or to do your own thread management, you caninstantiate the reporter in synchronous mode:```pythonfrom humbug.report import Reporter, Modesreporter = Reporter(    &quot;&lt;name&gt;&quot;,    client_id=&quot;&lt;client_id&gt;&quot;,    session_id=&quot;&lt;session_id&gt;&quot;,    bugout_token=&quot;&lt;bugout_token&gt;&quot;,    bugout_journal_id=&quot;&lt;bugout_journal_id&gt;&quot;,    mode=Modes.SYNCHRONOUS,)```Using Modes.SYNCHRONOUS in this manner skips the creation of the thread from which the reporterpublishes reports.### ConsentHumbug cares deeply about consent. The innocuous `HumbugConsent` from the snippet above supportsa wide range of consent flows.#### Opting in with environment variablesFor example, if you would like your users to be able to opt in by setting an environment variable`MY_APP_CONSENT=true`:```pythonfrom humbug.consent import environment_variable_opt_in, HumbugConsentfrom humbug.report import Reporterconsent = HumbugConsent(environment_variable_opt_in(&quot;MY_APP_CONSENT&quot;, [&quot;true&quot;]))reporter = Reporter(    &quot;&lt;name of your project&gt;&quot;,    consent,    bugout_token=&quot;&lt;your Bugout token&gt;&quot;,    bugout_journal_id=&quot;&lt;your Bugout journal ID&gt;&quot;,)```If you use this configuration, unless your user uses your tool with `MY_APP_CONSENT=true`, noreports will ever get sent to your knowledge base.#### Opting out with environment variablesIf, [like `homebrew`](https://docs.brew.sh/Analytics#opting-out), you would like users to be able toopt out by setting an environment variable `MY_APP_NO_CONSENT=1`:```pythonfrom humbug.consent import environment_variable_opt_out, HumbugConsentfrom humbug.report import Reporterconsent = HumbugConsent(environment_variable_opt_out(&quot;MY_APP_NO_CONSENT&quot;, [&quot;1&quot;]))reporter = Reporter(    &quot;&lt;name of your project&gt;&quot;,    consent,    bugout_token=&quot;&lt;your Bugout access token&gt;&quot;,    bugout_journal_id=&quot;&lt;your Bugout journal ID&gt;&quot;,)```In this case, reports are sent by default unless the user sets `MY_APP_NO_CONSENT=1` in whichcase reports will never be sent.#### Composing consent mechanismsHumbug allows you to combine multiple consent mechanisms. For example:```pythonfrom humbug.consent import environment_variable_opt_in, environment_variable_opt_out, HumbugConsentfrom humbug.report import Reporterconsent = HumbugConsent(    environment_variable_opt_in(&quot;MY_APP_CONSENT&quot;, [&quot;true&quot;]),    environment_variable_opt_out(&quot;MY_APP_NO_CONSENT&quot;, [&quot;1&quot;]),)reporter = Reporter(    &quot;&lt;name of your project&gt;&quot;,    consent,    bugout_token=&quot;&lt;your Bugout access token&gt;&quot;,    bugout_journal_id=&quot;&lt;your Bugout journal ID&gt;&quot;,)```If your users do not set `MY_APP_CONSENT` or give it a value other than `true`, Humbug won't evenbother to send you any reports. If `MY_APP_CONSENT` is indeed set to `true`, but the user hasset `MY_APP_NO_CONSENT=1`, then again no reports will get sent back.On the other hand, if the user has set `MY_APP_CONSENT=true` and left `MY_APP_NO_CONSENT` unset orset to a value other than `1`, Humbug will send you any reports you have configured.### Blacklisting parameters in feature reportsArguments to functions and other callables can sometimes contain sensitive information which you maynot want to include in Humbug reports.Blacklist functions allow you to specify which parameters from an argument list to filter out of yourfeature reports.#### `blacklist.generate_filter_parameters_by_key_fn`If you would just like to filter out all paramters with a given name, you can use the `blacklist.generate_filter_parameters_by_key_fn`.For example, to ignore all parameters named `token` (case insensitive), you would instantiate your`HumbugReporter` as follows:```pythonreporter = HumbugReporter(    ...,    blacklist_fn=blacklist.generate_filter_parameters_by_key_fn([&quot;token&quot;]),)```#### Custom blacklist functionsYou could also implement a custom blacklist function to remove all parameters that contained the substring`token` (case insensitive):```pythondef blacklist_token_parameters_fn(params: Dict[str, Any]) -&gt; Dict[str, Any]:    admissible_params = {k:v for k, v in params.items() if &quot;token&quot; not in k}    return admissible_paramsreporter = HumbugReporter(    ...,    blacklist_fn=blacklist_token_parameters_fn)```### Case study: activeloopai/deeplake[This pull request](https://github.com/activeloopai/deeplake/pull/624) shows how[Activeloop](https://www.activeloop.ai/) integrated Humbug into their popular[`deeplake`](https://github.com/activeloopai/deeplake) tool.This example shows how to use Humbug to record consent in a configuration file that the usercan modify at will. It also shows how to add custom tags to your Humbug reports.</longdescription>
</pkgmetadata>