<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========================django CMS Attributes Field===========================|pypi| |build| |coverage|This project is an opinionated implementation of JSONField for arbitrary HTMLelement attributes.It aims to provide a sensible means of storing and managingarbitrary HTML element attributes for later emitting them into templates.There are a wide variety of types of attributes and using the &quot;normal&quot; Djangomethod of adding ModelFields for each on a business model is cumbersome atbest and moreover may require related tables to allow cases where any numberof the same type of attribute should be supported (i.e., data-attributes).This can contribute to performance problems.To avoid these pitfalls, this package allows all of these attributes to bestored together in a single text field in the database as a JSON blob, butprovides a nice widget to provide an intuitive, key/value pair interfaceand provide sensible validation of the keys used... note::     This project is considered 3rd party (no supervision by the `django CMS Association &lt;https://www.django-cms.org/en/about-us/&gt;`_). Join us on `Slack                 &lt;https://www.django-cms.org/slack/&gt;`_ for more information... image:: preview.gif*******************************************Contribute to this project and win rewards*******************************************Because this is a an open-source project, we welcome everyone to`get involved in the project &lt;https://www.django-cms.org/en/contribute/&gt;`_ and`receive a reward &lt;https://www.django-cms.org/en/bounty-program/&gt;`_ for their contribution. Become part of a fantastic community and help us make django CMS the best CMS in the world.   We'll be delighted to receive yourfeedback in the form of issues and pull requests. Before submitting yourpull request, please review our `contribution guidelines&lt;http://docs.django-cms.org/en/latest/contributing/index.html&gt;`_.We're grateful to all contributors who have helped create and maintain this package.Contributors are listed at the `contributors &lt;https://github.com/django-cms/djangocms-attributes-field/graphs/contributors&gt;`_section.Documentation=============See ``REQUIREMENTS`` in the `setup.py &lt;https://github.com/divio/djangocms-attributes-field/blob/master/setup.py&gt;`_file for additional dependencies:|python| |django| |djangocms|Installation------------For a manual install:* run ``pip install djangocms-attributes-field``* add ``djangocms_attributes_field`` to your ``INSTALLED_APPS``* run ``python manage.py migrate djangocms_attributes_field``Configuration-------------AttributeField##############To use this field in your Models.model: ::    # models.py    ...    from django.db import models    from djangocms_attributes_field.fields import AttributesField    ...    MyCoolModel(models.Model):        ...        attributes = AttributesField()That's it!There is an optional parameter that can be used when declaring the field: ::    ``excluded_keys`` : This is a list of strings that will not be accepted as                        valid keysproperty: [field_name]_str++++++++++++++++++++++++++``AttributeField`` will also provide a handy property ``[field_name]_str``that will emit the stored key/value pairs as a string suitable for inclusionin your template for the target HTML element in question. You can use itlike this: ::    # models.py    ...    MyCoolModel(models.Model):        ...        html_attributes = AttributesField()    # templates/my_cool_project/template.html    ...    &lt;a href=&quot;...&quot; {{ object.html_attributes_str }}&gt;click me&lt;/a&gt;    ...(Assuming that ``object`` is a context variable containing a``MyCoolModel`` instance.)In addition to nicely encapsulating the boring task of converting key/valuepairs into a string with proper escaping and marking-safe, this property alsoensures that *existing* key/value pairs with keys that have since been addedto the field's ``excluded_keys`` are also not included in the output string.AttributeWidget###############The ``AttributesWidget`` is already used by default by the ``AttributesField``,but there may be cases where you'd like to override its usage.The widget supports two additional parameters: ::    ``key_attrs`` : A dict of HTML attributes to apply to the key input field    ``val_attrs`` : A dict of HTML attributes to apply to the value input fieldThese can be useful, for example, if it is necessary to alter the appearanceof the widget's rendered appearance. Again, for example, let's say we neededto make the key and value inputs have specific widths. We could do this likeso in our ``ModelForm``: ::    # forms.py    from django import forms    from djangocms_attributes_field.widgets import AttributesWidget    MyCoolForm(forms.ModelForm):        class Meta:            fields = ['attributes', ...]        def __init__(self, *args, **kwargs):            super().__init__(*args, **kwargs)            self.fields['attributes'].widget = AttributesWidget(key_attrs={'style': 'width:250px'},                                                                val_attrs={'style': 'width:500px'})Running Tests-------------You can run tests by executing::    virtualenv env    source env/bin/activate    pip install -r tests/requirements.txt    python setup.py test.. |pypi| image:: https://badge.fury.io/py/djangocms-attributes-field.svg    :target: http://badge.fury.io/py/djangocms-attributes-field.. |build| image:: https://travis-ci.org/divio/djangocms-attributes-field.svg?branch=master    :target: https://travis-ci.org/divio/djangocms-attributes-field.. |coverage| image:: https://codecov.io/gh/divio/djangocms-attributes-field/branch/master/graph/badge.svg    :target: https://codecov.io/gh/divio/djangocms-attributes-field.. |python| image:: https://img.shields.io/badge/python-3.5+-blue.svg    :target: https://pypi.org/project/djangocms-attributes-field/.. |django| image:: https://img.shields.io/badge/django-2.2,%203.0,%203.1-blue.svg    :target: https://www.djangoproject.com/.. |djangocms| image:: https://img.shields.io/badge/django%20CMS-3.7%2B-blue.svg    :target: https://www.django-cms.org/</longdescription>
</pkgmetadata>