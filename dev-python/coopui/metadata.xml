<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># coopui Package dedicated for holding tooling that allows a developer to interact with a user Import the packages that will handle the cli interaction with the user```from coopui.cli.CliAtomicUserInteraction import CliAtomicUserInteraction as uifrom coopui.cli.CliMenu import CliMenu```  The CliAtomicUserInteraction class allows interaction with the user with validation of the input returned, as well as ability to notify user with text ``` if __name__ == &quot;__main__&quot;:    # yes or no    ret1 = ui.request_yes_no(prompt=&quot;Select Yes or No&quot;)    # from a list    lst = [x for x in 'abcdefghijklmnop']    ret2 = ui.request_from_list(lst)    # from a dict    dic = {1: &quot;Cat&quot;, 2: &quot;Dog&quot;, 3: &quot;Turtle&quot;, 4: &quot;Frog&quot;}    ret3 = ui.request_from_dict(dic)    # notify user    ui.notify_user(text=f&quot;selected yes: {ret1}&quot;)    ui.notify_user(text=f&quot;selected letter from list: {ret2}&quot;)    ui.notify_user(text=f&quot;selected animal: {ret3}&quot;)```    First define a custom function to greet a user: ```def greet(ui):    ui.notify_user(&quot;Hello!&quot;)    ret = ui.request_yes_no(&quot;Are you having a good day?&quot;)    if ret is None:        return    if ret:        ui.notify_user(&quot;Glad to hear it!&quot;)    else:        ui.notify_user(&quot;Im so sorry....&quot;)```Then, use the CliAtomicUserInteraction class along with the CliMenu class to provide a menu to perform the greeting```if __name__ == &quot;__main__&quot;:    ui = CliAtomicUserInteraction()    menu = CliMenu(menu_header=&quot;************* My Menu *************&quot;,                   definition={                       &quot;G&quot;: (&quot;[G]reeting&quot;, lambda: greet(ui))                   },                   notify_user_provider=ui.notify_user                   )    menu.run()```A menu will return only if the result of a selection is None. Therefore, always include a definition for returning None```if __name__ == &quot;__main__&quot;:    ui = CliAtomicUserInteraction()    menu = CliMenu(menu_header=&quot;************* My Menu *************&quot;,                   definition={                       &quot;G&quot;: (&quot;[G]reeting&quot;, lambda: greet(ui)),                       &quot;X&quot;: (&quot;Back&quot;, None)                   },                   notify_user_provider=ui.notify_user                   )    menu.run()```Multiple menus can be chained together to define a nested menu selection.  ```if __name__ == &quot;__main__&quot;:    ui = CliAtomicUserInteraction()    main_menu = CliMenu(menu_header=&quot;************* My Menu *************&quot;,                   definition={                       &quot;G&quot;: (&quot;[G]reeting&quot;, lambda: greet(ui)),                       &quot;S&quot;: (&quot;[S]ub-menu&quot;, lambda: sub_menu.run()),                       &quot;X&quot;: (&quot;E[X]it&quot;, None)                   },                   notify_user_provider=ui.notify_user                   )    sub_menu = CliMenu(menu_header=&quot;************* Sub Menu *************&quot;,                   definition={                       &quot;G&quot;: (&quot;[G]reeting&quot;, lambda: greet(ui)),                       &quot;X&quot;: (&quot;X -- Back&quot;, None)                   },                   notify_user_provider=ui.notify_user                   )    main_menu.run()```</longdescription>
</pkgmetadata>