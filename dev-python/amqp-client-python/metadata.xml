<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AMQP Client Python[![License][license-image]][license-url]&lt;a href=&quot;https://pypi.org/project/amqp-client-python&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/amqp-client-python?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/amqp-client-python&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/amqp-client-python.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;[![Downloads](https://static.pepy.tech/personalized-badge/amqp-client-python?period=month&amp;units=international_system&amp;left_color=black&amp;right_color=orange&amp;left_text=PyPI%20downloads%20per%20month)](https://pepy.tech/project/amqp-client-python)[![Vulnerabilities][known-vulnerabilities-image]][known-vulnerabilities-url]  [![Releases][releases-image]][releases-url] --------Client with high level of abstraction for manipulation of messages in the event bus RabbitMQ.### Features:- Automatic creation and management of queues, exchanges and channels;- Connection persistence and auto reconnect;- Support for **direct**, **topic** and **fanout** exchanges;- Publish;- Subscribe;- Support for a Remote procedure call _(RPC)_.[//]: # (These are reference links used in the body of this note.)[license-image]: https://img.shields.io/badge/license-Apache%202-blue.svg[license-url]: https://github.com/nutes-uepb/amqp-client-python/blob/master/LICENSE[npm-image]: https://img.shields.io/npm/v/amqp-client-python.svg?color=red&amp;logo=npm[npm-url]: https://npmjs.org/package/amqp-client-python[downloads-image]: https://img.shields.io/npm/dt/amqp-client-python.svg?logo=npm[travis-url]: https://travis-ci.org/nutes-uepb/amqp-client-python[coverage-image]: https://coveralls.io/repos/github/nutes-uepb/amqp-client-python/badge.svg[coverage-url]: https://coveralls.io/github/nutes-uepb/amqp-client-python?branch=master[known-vulnerabilities-image]: https://snyk.io/test/github/nutes-uepb/amqp-client-python/badge.svg?targetFile=requirements.txt[known-vulnerabilities-url]: https://snyk.io/test/github/nutes-uepb/amqp-client-python?targetFile=requirements.txt[releases-image]: https://img.shields.io/github/release-date/nutes-uepb/amqp-client-python.svg[releases-url]: https://github.com/nutes-uepb/amqp-client-python/releases### Examples:#### you can use [sync](https://github.com/nutes-uepb/amqp-client-python/blob/develop/amqp_client_python/rabbitmq/eventbus_rabbitmq.py) , [async eventbus](https://github.com/nutes-uepb/amqp-client-python/blob/develop/amqp_client_python/rabbitmq/async_eventbus_rabbitmq.py) and [sync wrapper](https://github.com/nutes-uepb/amqp-client-python/blob/develop/amqp_client_python/rabbitmq/eventbus_wrapper_rabbitmq.py) of async eventbus&lt;details&gt;&lt;summary&gt;async usage &lt;/summary&gt;&lt;br&gt;```Python# basic configurationfrom amqp_client_python import (    AsyncEventbusRabbitMQ,    Config, Options)from amqp_client_python.event import IntegrationEvent, IntegrationEventHandlerconfig = Config(Options(&quot;queue&quot;, &quot;rpc_queue&quot;, &quot;rpc_exchange&quot;))eventbus = AsyncEventbusRabbitMQ(config)# publishclass ExampleEvent(IntegrationEvent):    EVENT_NAME: str = &quot;ExampleEvent&quot;    def __init__(self, event_type: str, message = []) -&gt; None:        super().__init__(self.EVENT_NAME, event_type)        self.message = messagepublish_event = ExampleEvent(rpc_exchange, [&quot;message&quot;])eventbus.publish(publish_event, rpc_routing_key, &quot;direct&quot;)# subscribeclass ExampleEventHandler(IntegrationEventHandler):    async def handle(self, body) -&gt; None:        print(body) # handle messagesawait eventbus.subscribe(subscribe_event, subscribe_event_handle, rpc_routing_key)# rpc_publishresponse = await eventbus.rpc_client(rpc_exchange, &quot;user.find&quot;, [&quot;content_message&quot;])# providerasync def handle2(*body) -&gt; bytes:    print(f&quot;body: {body}&quot;)    return b&quot;content&quot;await eventbus.provide_resource(&quot;user.find&quot;, handle)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;sync usage&lt;/summary&gt;```Pythonfrom amqp_client_python import (    EventbusRabbitMQ,    Config, Options)from amqp_client_python.event import IntegrationEvent, IntegrationEventHandlerfrom examples.default import queue, rpc_queue, rpc_exchange, rpc_routing_keyclass ExampleEvent(IntegrationEvent):    EVENT_NAME: str = &quot;ExampleEvent&quot;    ROUTING_KEY: str = rpc_routing_key    def __init__(self, event_type: str, message = []) -&gt; None:        super().__init__(self.EVENT_NAME, event_type)        self.message = message        self.routing_key = self.ROUTING_KEYclass ExampleEventHandler(IntegrationEventHandler):    def handle(self, body) -&gt; None:        print(body,&quot;subscribe&quot;)config = Config(Options(queue, rpc_queue, rpc_exchange))eventbus = EventbusRabbitMQ(config=config)class ExampleEvent(IntegrationEvent):    EVENT_NAME: str = &quot;ExampleEvent&quot;    def __init__(self, event_type: str, message = []) -&gt; None:        super().__init__(self.EVENT_NAME, event_type)        self.message = messagefrom time import sleepfrom random import randintdef handle(*body):    print(body[0], &quot;rpc_provider&quot;)    return f&quot;{body[0]}&quot;.encode(&quot;utf-8&quot;)subscribe_event = ExampleEvent(rpc_exchange)publish_event = ExampleEvent(rpc_exchange, [&quot;message&quot;])subscribe_event_handle = ExampleEventHandler()eventbus.subscribe(subscribe_event, subscribe_event_handle, rpc_routing_key)eventbus.provide_resource(rpc_routing_key+&quot;2&quot;, handle)count = 0running = Truefrom concurrent.futures import TimeoutErrorwhile running:    try:        count += 1        if str(count) != eventbus.rpc_client(rpc_exchange, rpc_routing_key+&quot;2&quot;, [f&quot;{count}&quot;]).decode(&quot;utf-8&quot;):            running = False        #eventbus.publish(publish_event, rpc_routing_key, &quot;direct&quot;)        #running = False    except TimeoutError as err:        print(&quot;timeout!!!: &quot;, str(err))    except KeyboardInterrupt:        running=False    except BaseException as err:        print(&quot;Err:&quot;, err)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;sync wrapper usage&lt;/summary&gt;```Pythonfrom amqp_client_python import EventbusWrapperRabbitMQ, Config, Optionsfrom amqp_client_python.event import IntegrationEvent, IntegrationEventHandlerconfig = Config(Options(queue, rpc_queue, rpc_exchange))eventbus = EventbusWrapperRabbitMQ(config=config)class ExampleEvent(IntegrationEvent):    EVENT_NAME: str = &quot;ExampleEvent&quot;    def __init__(self, event_type: str, message = []) -&gt; None:        super().__init__(self.EVENT_NAME, event_type)        self.message = messageclass ExampleEventHandler(IntegrationEventHandler):    async def handle(self, body) -&gt; None:        print(body,&quot;subscribe&quot;)async def handle(*body):    print(body[0], &quot;rpc_provider&quot;)    return f&quot;{body[0]}&quot;.encode(&quot;utf-8&quot;)subscribe_event = ExampleEvent(rpc_exchange)publish_event = ExampleEvent(rpc_exchange, [&quot;message&quot;])subscribe_event_handle = ExampleEventHandler()# rpc_providereventbus.provide_resource(rpc_routing_key+&quot;2&quot;, handle).result()# subscribeeventbus.subscribe(subscribe_event, subscribe_event_handle, rpc_routing_key).result()count = 0running = Truewhile running:    try:        count += 1        # rpc_client call        eventbus.rpc_client(rpc_exchange, rpc_routing_key+&quot;2&quot;, [f&quot;{count}&quot;]).result().decode(&quot;utf-8&quot;)        # publish        eventbus.publish(publish_event, rpc_routing_key, &quot;direct&quot;).result()        #running = False    except KeyboardInterrupt:        running=False    except BaseException as err:        print(&quot;Err:&quot;, err)```&lt;/details&gt;&lt;br /&gt;### Know Limitations:#### basic eventbus&lt;medium&gt;&lt;pre&gt;When using [**EventbusRabbitMQ**](https://github.com/nutes-uepb/amqp-client-python/blob/master/amqp_client_python/rabbitmq/eventbus_rabbitmq.py#L12) Should not use rpc call inside of rpc provider and subscribe handlers, it may block the ioloop#/obs: fixed on other kinds of eventbus, will be removed on nexts releases&lt;/pre&gt;&lt;/medium&gt;</longdescription>
</pkgmetadata>