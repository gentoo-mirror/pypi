<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DRF OpenApi 3## OpenApi 3 utility for Django REST FrameworkEnhances DRF AutoSchema and SchemaGenerator to help generating a better OpenApi 3 documentation.Supports servers, deprecated and summary in schema generation, now you mark them as deprecated and display the summary besides the description.If you want your ApiView to display custom content in the documentation, you can add it by writing comments to the view/view method in YAML format. Fixed request body and responses for views that handle multiple objects, such as bulk insert, bulk update and bulk delete. Now they are displayed as array.### Installation1. Install the package using `pip install drf_openapi3`2. Add `drf_openapi3.apps.OpenApi3Config` to Django `INSTALLED_APPS`### Configuration1. OpenApi documentation ViewExtend `drf_openapi3.views.OpenApiTemplateView`. You can define a title and template name, otherwise default values will be used.```pythonfrom django.contrib.auth.mixins import LoginRequiredMixinfrom drf_openapi3.views import OpenApiTemplateViewclass MyOpenApiTemplateView(LoginRequiredMixin, OpenApiTemplateView):    title = 'My OpenAPI'    template_name = 'path/to/mytemplate.html'```2. Add schema to urlpatterns using `drf_openapi3.AdvancedSchemaGenerator` as generator class```pythonfrom django.contrib.auth.decorators import login_requiredfrom django.urls import pathfrom drf_openapi3.schemas.advanced import AdvancedSchemaGeneratorfrom rest_framework.schemas import get_schema_viewurlpatterns = [    # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs.    #   * `title` and `description` parameters are passed to `SchemaGenerator`.    #   * Provide view name for use with `reverse()`.    path('my-schema/', login_required(        get_schema_view(            title='My API',            description='My API description',            version='1.0.0',            generator_class=AdvancedSchemaGenerator,            public=True,        ),        login_url='/accounts/login/',    ), name='my_schema_name'),    # ...    # ...]```3. Start writing your ApiViews.```pythonfrom rest_framework.generics import ListAPIViewclass MyAPIListView(ListAPIView):    allowed_methods = ['get']    def get(self, request, *args, **kwargs):        return super(MyAPIListView, self).list(request, *args, **kwargs)```### How to useLet's see step by step what you can do.#### Define multiple serversUseful for instance if you provide a test sandbox together with a production server.In Django settings you can define url and description in `API_SERVERS`:```pythonAPI_SERVERS = [    {        &quot;url&quot;: &quot;https://test.example.com/&quot;,        &quot;description&quot;: &quot;Sandbox server (uses test data)&quot;,    },    {        &quot;url&quot;: &quot;https://example.com/&quot;,        &quot;description&quot;: &quot;Production server (uses live data)&quot;,    },]```If you don't define anything, Django `BASE_URL` will be used to build your server block.So if you are developing in local environment, the server `url` will be `http://localhost:8000`.If it's production environment, the server `url` will be `https://example.com`.Keep in mind that defining multiple servers in `API_SERVERS` will allow users to switch server urls in the dropdown on the documentation before testing your endpoints.#### Apply tags to your ApiViewIf you want to tag your view, just pass `tags` to your view schema. Default is &quot;api&quot;.You can decide your own, it can come in handy to add the endpoint version:```pythonfrom drf_openapi3.schemas.advanced import AdvancedAutoSchemafrom rest_framework.generics import ListAPIViewclass MyAPIListView(ListAPIView):    # ...    # ...    allowed_methods = ['get']    schema = AdvancedAutoSchema(        tags=[&quot;v0&quot;],        component_name=&quot;My&quot;,        operation_id_base=&quot;MyAPI&quot;,        handles_many_objects=True    )    def get(self, request, *args, **kwargs):        return super(MyAPIListView, self).list(request, *args, **kwargs)```#### Apply deprecated to your old ApiViewIf you want to mark your view as deprecated, just add the attribute `deprecated = True` to your view schema:```pythonfrom drf_openapi3.schemas.advanced import AdvancedAutoSchemafrom rest_framework.generics import ListAPIViewclass MyAPIListView(ListAPIView):    # ...    # ...    allowed_methods = ['get']    schema = AdvancedAutoSchema(        tags=[&quot;v0&quot;],        component_name=&quot;My&quot;,        operation_id_base=&quot;MyAPI&quot;,        handles_many_objects=True,        deprecated=True    )    def get(self, request, *args, **kwargs):        return super(MyAPIListView, self).list(request, *args, **kwargs)```#### Views that handle multiple objects with methods besides GETWhen you write a view that performs bulk create, update or delete operations you face some issues on the documentation:the `responses` field schema types are `object`, but they should be `array`.By adding `handles_many_objects=True` attribute to your view schema, you tell the schema that `responses` must be array.```pythonfrom drf_openapi3.schemas.advanced import AdvancedAutoSchemafrom rest_framework.generics import ListCreateAPIViewfrom rest_framework.response import Responsefrom rest_framework.status import HTTP_400_BAD_REQUEST, HTTP_200_OKclass MyListPostView(ListCreateAPIView):    # ...    # ...    allowed_methods = ['get', 'post']    schema = AdvancedAutoSchema(        tags=[&quot;v0&quot;],        component_name=&quot;My&quot;,        operation_id_base=&quot;MyAPI&quot;,        handles_many_objects=True,    )    def post(self, request, *args, **kwargs) -&gt; Response:        serialized = self.get_serializer(data=request.data, many=True)        if serialized.is_valid():            serialized.save()            return Response(serialized.data, status=HTTP_200_OK)        return Response(serialized.errors, status=HTTP_400_BAD_REQUEST)```#### Display custom content in the documentationDRF AutoSchema already reads your view/view method Docstring:if you want to display the endpoint `description` in your documentation, you can write some text in the view/view method Docstring. That wasn't enough for me though.Let's start with the simplest one, the same one that's already implemented from DRF AutoSchema that it has been kept to have backwards compatibility:we add a plain description in the view Docstring. If we do it on both view and method view, only method view Docstring will be taken into account:```pythonfrom drf_openapi3.schemas.advanced import AdvancedAutoSchemafrom rest_framework.generics import ListCreateAPIViewfrom rest_framework.response import Responsefrom rest_framework.status import HTTP_400_BAD_REQUEST, HTTP_200_OKclass MyListPostView(ListCreateAPIView):    &quot;&quot;&quot;    This is my endpoint description and it will be reported     for each allowed method.    &quot;&quot;&quot;    # ...    # ...    allowed_methods = ['get', 'post']    schema = AdvancedAutoSchema(        tags=[&quot;v0&quot;],        component_name=&quot;My&quot;,        operation_id_base=&quot;MyListPost&quot;,        handles_many_objects=True,    )       def post(self, request, *args, **kwargs) -&gt; Response:        &quot;&quot;&quot;        ... and that's my method description        Since both the descriptions are defined you'll see only this one.        You won't see &quot;This is my endpoint description&quot;,         unless you delete the text here above.        &quot;&quot;&quot;        serialized = self.get_serializer(data=request.data, many=True)        if serialized.is_valid():            serialized.save()            return Response(serialized.data, status=HTTP_200_OK)        return Response(serialized.errors, status=HTTP_400_BAD_REQUEST)```If you want to manage custom changes to your schema, just add them to the Docstring in YAML format.You'll notice that it'll be easier for you to read your code too.By default DRF AutoSchema displays only status code 200 as example response.Since 400, 401, 403, 404 status codes return a JSON `{&quot;detail&quot;: &lt;error detail&gt;}`, in Django settings you can define `STATIC_ERROR_CODES = True` to display more responses in your documentation.If you have to perform further changes on responses in your view, you can put them in YAML view/view method Docstring.If you want to limit the allowed response codes that you're going to see on the documentation, just list the allowed status codes in your view (`allowed_status_codes`); this is useful when you had enabled `STATIC_ERROR_CODES` and you want to prevent some responses to be displayed.We're getting creative here, let's add a complete example:```pythonfrom drf_openapi3.schemas.advanced import AdvancedAutoSchemafrom rest_framework.generics import ListAPIView, CreateAPIView, UpdateAPIView, DestroyAPIViewclass MyCommentedView(ListAPIView, CreateAPIView, UpdateAPIView, DestroyAPIView):    &quot;&quot;&quot;        get:            summary: Summary for get method            description: Description for get method        post:            summary: Summary for post method            description: Description for post method            400:                description: Invalid object, that's a custom description of 400 response code for post method        put:            summary: Summary for put method            description: Description for put method        delete:            summary: Summary for delete method            description: Description for delete method            200:                description: Corsa objects deleted, that's a custom description of 200 response code for delete method                schema:                    type: array                    items:                        properties:                            field:                                type: boolean                                description: Deleted flag, here we define a different schema for bulk delete    &quot;&quot;&quot;    allowed_methods = (&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;)    allowed_status_codes = (200, 400, 401, 403)    schema = AdvancedAutoSchema(        tags=[&quot;v0&quot;],        component_name=&quot;MyCommented&quot;,        operation_id_base=&quot;MyCommentedWriteDelete&quot;,        handles_many_objects=True,    )# ...# ...```If you've overridden the view methods already (`.get()`, `.post()`, `.put()`, `.delete()`) you can write there your comments.Please be advised that if you do so you must not use the notation `method: properties`:```pythonfrom rest_framework.generics import ListAPIView, DestroyAPIViewfrom rest_framework.response import Responsefrom rest_framework.status import HTTP_200_OKclass MyCommentedView(ListAPIView, DestroyAPIView):    def delete(self, request, *args, **kwargs) -&gt; Response:        &quot;&quot;&quot;        summary: Summary for delete method        description: Description for delete method        200:            description: Corsa objects deleted, that's a custom description of 200 response code for delete method            schema:                type: array                items:                    properties:                        field:                            type: boolean                            description: Deleted flag, here we define a different schema for bulk delete        &quot;&quot;&quot;        output = []        for data in request.data:            # ...            # ...            pass        return Response(output, status=HTTP_200_OK)```Last but not least: do you want to set a default sort for your endpoints?Just pass `index=n` to `AdvancedAutoSchema`: ```pythonfrom drf_openapi3.schemas.advanced import AdvancedAutoSchemafrom rest_framework.generics import ListAPIView, ListCreateAPIViewclass MyAPIListView(ListAPIView):    # ...    # ...    allowed_methods = ['get']    schema = AdvancedAutoSchema(        index=0,        tags=[&quot;v0&quot;],        component_name=&quot;My&quot;,        operation_id_base=&quot;MyAPI&quot;,        handles_many_objects=True,        deprecated=True    )class MyListPostView(ListCreateAPIView):    &quot;&quot;&quot;    This is my endpoint description and it will be reported     for each allowed method.    &quot;&quot;&quot;    # ...    # ...    allowed_methods = ['get', 'post']    schema = AdvancedAutoSchema(        index=1,        tags=[&quot;v0&quot;],        component_name=&quot;My&quot;,        operation_id_base=&quot;MyListPost&quot;,        handles_many_objects=True,    )   ```</longdescription>
</pkgmetadata>