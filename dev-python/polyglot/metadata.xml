<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>polyglot========|Downloads| |Latest Version| |Build Status| |Documentation Status|.. |Downloads| image:: https://img.shields.io/pypi/dm/polyglot.svg   :target: https://pypi.python.org/pypi/polyglot.. |Latest Version| image:: https://badge.fury.io/py/polyglot.svg   :target: https://pypi.python.org/pypi/polyglot.. |Build Status| image:: https://travis-ci.org/aboSamoor/polyglot.png?branch=master   :target: https://travis-ci.org/aboSamoor/polyglot.. |Documentation Status| image:: https://readthedocs.org/projects/polyglot/badge/?version=latest   :target: https://readthedocs.org/builds/polyglot/Polyglot is a natural language pipeline that supports massivemultilingual applications.-  Free software: GPLv3 license-  Documentation: http://polyglot.readthedocs.org.-  GitHub: https://github.com/aboSamoor/polyglotFeatures~~~~~~~~-  Tokenization (165 Languages)-  Language detection (196 Languages)-  Named Entity Recognition (40 Languages)-  Part of Speech Tagging (16 Languages)-  Sentiment Analysis (136 Languages)-  Word Embeddings (137 Languages)-  Morphological analysis (135 Languages)-  Transliteration (69 Languages)Developer~~~~~~~~~-  Rami Al-Rfou @ ``rmyeid gmail com``Quick Tutorial--------------.. code:: python    import polyglot    from polyglot.text import Text, WordLanguage Detection~~~~~~~~~~~~~~~~~~.. code:: python    text = Text(&quot;Bonjour, Mesdames.&quot;)    print(&quot;Language Detected: Code={}, Name={}\n&quot;.format(text.language.code, text.language.name)).. parsed-literal::    Language Detected: Code=fr, Name=French    Tokenization~~~~~~~~~~~~.. code:: python    zen = Text(&quot;Beautiful is better than ugly. &quot;               &quot;Explicit is better than implicit. &quot;               &quot;Simple is better than complex.&quot;)    print(zen.words).. parsed-literal::    [u'Beautiful', u'is', u'better', u'than', u'ugly', u'.', u'Explicit', u'is', u'better', u'than', u'implicit', u'.', u'Simple', u'is', u'better', u'than', u'complex', u'.'].. code:: python    print(zen.sentences).. parsed-literal::    [Sentence(&quot;Beautiful is better than ugly.&quot;), Sentence(&quot;Explicit is better than implicit.&quot;), Sentence(&quot;Simple is better than complex.&quot;)]Part of Speech Tagging~~~~~~~~~~~~~~~~~~~~~~.. code:: python    text = Text(u&quot;O primeiro uso de desobediência civil em massa ocorreu em setembro de 1906.&quot;)        print(&quot;{:&lt;16}{}&quot;.format(&quot;Word&quot;, &quot;POS Tag&quot;)+&quot;\n&quot;+&quot;-&quot;*30)    for word, tag in text.pos_tags:        print(u&quot;{:&lt;16}{:&gt;2}&quot;.format(word, tag)).. parsed-literal::    Word            POS Tag    ------------------------------    O               DET    primeiro        ADJ    uso             NOUN    de              ADP    desobediência   NOUN    civil           ADJ    em              ADP    massa           NOUN    ocorreu         ADJ    em              ADP    setembro        NOUN    de              ADP    1906            NUM    .               PUNCTNamed Entity Recognition~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python    text = Text(u&quot;In Großbritannien war Gandhi mit dem westlichen Lebensstil vertraut geworden&quot;)    print(text.entities).. parsed-literal::    [I-LOC([u'Gro\\xdfbritannien']), I-PER([u'Gandhi'])]Polarity~~~~~~~~.. code:: python    print(&quot;{:&lt;16}{}&quot;.format(&quot;Word&quot;, &quot;Polarity&quot;)+&quot;\n&quot;+&quot;-&quot;*30)    for w in zen.words[:6]:        print(&quot;{:&lt;16}{:&gt;2}&quot;.format(w, w.polarity)).. parsed-literal::    Word            Polarity    ------------------------------    Beautiful        0    is               0    better           1    than             0    ugly            -1    .                0Embeddings~~~~~~~~~~.. code:: python    word = Word(&quot;Obama&quot;, language=&quot;en&quot;)    print(&quot;Neighbors (Synonms) of {}&quot;.format(word)+&quot;\n&quot;+&quot;-&quot;*30)    for w in word.neighbors:        print(&quot;{:&lt;16}&quot;.format(w))    print(&quot;\n\nThe first 10 dimensions out the {} dimensions\n&quot;.format(word.vector.shape[0]))    print(word.vector[:10]).. parsed-literal::    Neighbors (Synonms) of Obama    ------------------------------    Bush                Reagan              Clinton             Ahmadinejad         Nixon               Karzai              McCain              Biden               Huckabee            Lula                        The first 10 dimensions out the 256 dimensions        [-2.57382345  1.52175975  0.51070285  1.08678675 -0.74386948 -1.18616164      2.92784619 -0.25694436 -1.40958667 -2.39675403]Morphology~~~~~~~~~~.. code:: python    word = Text(&quot;Preprocessing is an essential step.&quot;).words[0]    print(word.morphemes).. parsed-literal::    [u'Pre', u'process', u'ing']Transliteration~~~~~~~~~~~~~~~.. code:: python    from polyglot.transliteration import Transliterator    transliterator = Transliterator(source_lang=&quot;en&quot;, target_lang=&quot;ru&quot;)    print(transliterator.transliterate(u&quot;preprocessing&quot;)).. parsed-literal::    препрокессингHistory-------&quot;14.11&quot; (2014-01-11)---------------------* First release on PyPI.&quot;15.5.2&quot; (2015-05-02)---------------------* Polyglot is feature complete.&quot;15.10.03&quot; (2015-10-03)---------------------------* Change the polyglot models mirror to Stony Brook University DSL lab instead  of Google cloud storage.&quot;16.07.04&quot; (2016-07-03)---------------------------* New Features:  - Support Transfer POS Tagging.  - Support supplying `hint_language_code` for `Text`.* Bug Fix:   - Improve sentence serialization (PR #34)  - Fix rare unicode encode error (PR #35)  - Fix transliteration from languages other than English (PR 46)  - Add link to Github in README (PR #49)  - Make handling of paths more coherent (RP #55)  - Fix normalizing embedding in place for NER corrupts the features of POS (issue #60, PR #62)</longdescription>
</pkgmetadata>