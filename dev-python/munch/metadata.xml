<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/Infinidat/munch.svg?branch=master)](https://travis-ci.org/Infinidat/munch)[![Latest Version](https://img.shields.io/pypi/v/munch.svg)](https://pypi.python.org/pypi/munch/)[![Supported Python versions](https://img.shields.io/pypi/pyversions/munch.svg)](https://pypi.python.org/pypi/munch/)[![Downloads](https://img.shields.io/pypi/dm/munch.svg)](https://pypi.python.org/pypi/munch/)munch==========munch is a fork of David Schoonover's **Bunch** package, providing similar functionality. 99% of the work was done by him, and the fork was made mainly for lack of responsiveness for fixes and maintenance on the original code.Munch is a dictionary that supports attribute-style access, a la JavaScript:```python&gt;&gt;&gt; b = Munch()&gt;&gt;&gt; b.hello = 'world'&gt;&gt;&gt; b.hello'world'&gt;&gt;&gt; b['hello'] += &quot;!&quot;&gt;&gt;&gt; b.hello'world!'&gt;&gt;&gt; b.foo = Munch(lol=True)&gt;&gt;&gt; b.foo.lolTrue&gt;&gt;&gt; b.foo is b['foo']True```Dictionary Methods------------------A Munch is a subclass of ``dict``; it supports all the methods a ``dict`` does:```python&gt;&gt;&gt; list(b.keys())['hello', 'foo']```Including ``update()``:```python&gt;&gt;&gt; b.update({ 'ponies': 'are pretty!' }, hello=42)&gt;&gt;&gt; print(repr(b))Munch({'hello': 42, 'foo': Munch({'lol': True}), 'ponies': 'are pretty!'})```As well as iteration:```python&gt;&gt;&gt; [ (k,b[k]) for k in b ][('hello', 42), ('foo', Munch({'lol': True})), ('ponies', 'are pretty!')]```And &quot;splats&quot;:```python&gt;&gt;&gt; &quot;The {knights} who say {ni}!&quot;.format(**Munch(knights='lolcats', ni='can haz'))'The lolcats who say can haz!'```Serialization-------------Munches happily and transparently serialize to JSON and YAML.```python&gt;&gt;&gt; b = Munch(foo=Munch(lol=True), hello=42, ponies='are pretty!')&gt;&gt;&gt; import json&gt;&gt;&gt; json.dumps(b)'{&quot;foo&quot;: {&quot;lol&quot;: true}, &quot;hello&quot;: 42, &quot;ponies&quot;: &quot;are pretty!&quot;}'```If JSON support is present (``json`` or ``simplejson``), ``Munch`` will have a ``toJSON()`` method which returns the object as a JSON string.If you have [PyYAML](http://pyyaml.org/wiki/PyYAML) installed, Munch attempts to register itself with the various YAML Representers so that Munches can be transparently dumped and loaded.```python&gt;&gt;&gt; b = Munch(foo=Munch(lol=True), hello=42, ponies='are pretty!')&gt;&gt;&gt; import yaml&gt;&gt;&gt; yaml.dump(b)'!munch.Munch\nfoo: !munch.Munch\n  lol: true\nhello: 42\nponies: are pretty!\n'&gt;&gt;&gt; yaml.safe_dump(b)'foo:\n  lol: true\nhello: 42\nponies: are pretty!\n'```In addition, Munch instances will have a ``toYAML()`` method that returns the YAML string using ``yaml.safe_dump()``. This method also replaces ``__str__`` if present, as I find it far more readable. You can revert back to Python's default use of ``__repr__`` with a simple assignment: ``Munch.__str__ = Munch.__repr__``. The Munch class will also have a static method ``Munch.fromYAML()``, which loads a Munch out of a YAML string.Finally, Munch converts easily and recursively to (``unmunchify()``, ``Munch.toDict()``) and from (``munchify()``, ``Munch.fromDict()``) a normal ``dict``, making it easy to cleanly serialize them in other formats.Default Values--------------``DefaultMunch`` instances return a specific default value when an attribute is missing from the collection. Like ``collections.defaultdict``, the first argument is the value to use for missing keys:```python&gt;&gt;&gt; undefined = object()&gt;&gt;&gt; b = DefaultMunch(undefined, {'hello': 'world!'})&gt;&gt;&gt; b.hello'world!'&gt;&gt;&gt; b.foo is undefinedTrue`````DefaultMunch.fromDict()`` also takes the ``default`` argument:```python&gt;&gt;&gt; undefined = object()&gt;&gt;&gt; b = DefaultMunch.fromDict({'recursively': {'nested': 'value'}}, undefined)&gt;&gt;&gt; b.recursively.nested == 'value'True&gt;&gt;&gt; b.recursively.foo is undefinedTrue```Or you can use ``DefaultFactoryMunch`` to specify a factory for generating missing attributes. The first argument is the factory:```python&gt;&gt;&gt; b = DefaultFactoryMunch(list, {'hello': 'world!'})&gt;&gt;&gt; b.hello'world!'&gt;&gt;&gt; b.foo[]&gt;&gt;&gt; b.bar.append('hello')&gt;&gt;&gt; b.bar['hello']```Miscellaneous-------------* It is safe to ``import *`` from this module. You'll get: ``Munch``, ``DefaultMunch``, ``DefaultFactoryMunch``, ``munchify`` and ``unmunchify``.* Ample Tests. Just run ``pip install tox &amp;&amp; tox`` from the project root.Feedback--------Open a ticket / fork the project on [GitHub](http://github.com/Infinidat/munch).</longdescription>
</pkgmetadata>