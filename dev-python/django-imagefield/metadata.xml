<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================django-imagefield=================.. image:: https://github.com/matthiask/django-imagefield/workflows/Tests/badge.svg    :target: https://github.com/matthiask/django-imagefield.. image:: https://readthedocs.org/projects/django-imagefield/badge/?version=latest    :target: https://django-imagefield.readthedocs.io/en/latest/?badge=latest    :alt: Documentation StatusHeavily based on `django-versatileimagefield&lt;https://github.com/respondcreate/django-versatileimagefield&gt;`_, butwith a few important differences:- The amount of code is kept at a minimum. django-versatileimagefield  has several times as much code (without tests).- Generating images on-demand inside rendering code is made hard on  purpose. Instead, images are generated when models are saved and also  by running the management command ``process_imagefields``.- django-imagefield does not depend on a fast storage or a cache to be  and stay fast, at least as long as the image width and height is saved  in the database. An important part of this is never determining  whether a processed image exists in the hot path at all (except if you  ``force`` it).- django-imagefield fails early when image data is incomplete or not  processable by Pillow_ for some reason.- django-imagefield allows adding width, height and PPOI (primary point  of interest) fields to the model by adding ``auto_add_fields=True`` to  the field instead of boringly and verbosingly adding them yourself.Replacing existing uses of django-versatileimagefield requires thefollowing steps:- ``from imagefield.fields import ImageField as VersatileImageField, PPOIField``- Specify the image sizes by either providing ``ImageField(formats=...)`` or  adding the ``IMAGEFIELD_FORMATS`` setting. The latter overrides the  former if given.- Convert template code to access the new properties (e.g.  ``instance.image.square`` instead of ``instance.image.crop.200x200``  when using the ``IMAGEFIELD_FORMATS`` setting below).- When using django-imagefield with a PPOI, make sure that the PPOI  field is also added to ``ModelAdmin`` or ``InlineModelAdmin``  fieldsets, otherwise you'll just see the image, but no PPOI picker.  Contrary to django-versatileimagefield the PPOI field is editable  itself, which avoids apart from other complexities a pitfall with  inline form change detection.- Add ``&quot;imagefield&quot;`` to ``INSTALLED_APPS``.If you used e.g. ``instance.image.crop.200x200`` and``instance.image.thumbnail.800x500`` before, you should add thefollowing setting:.. code-block:: python    IMAGEFIELD_FORMATS = {        # image field path, lowercase        'yourapp.yourmodel.image': {            'square': ['default', ('crop', (200, 200))],            'full': ['default', ('thumbnail', (800, 500))],            # The 'full' spec is equivalent to the following format            # specification in terms of image file produced (the            # resulting file name is different though):            # 'full': [            #     'autorotate', 'process_jpeg', 'process_png',            #     'process_gif', 'autorotate',            #     ('thumbnail', (800, 500)),            # ],            # Note that the exact list of default processors may            # change in the future.        },    }After running ``./manage.py process_imagefields`` once you can nowuse use ``instance.image.square`` and ``instance.image.thumbnail`` intemplates instead. Note that the properties on the ``image`` file do bydesign not check whether thumbs exist.Image processors================django-imagefield uses an image processing pipeline modelled afterDjango's middleware.The following processors are available out of the box:- ``autorotate``: Autorotates an image by reading the EXIF data.- ``process_jpeg``: Converts non-RGB images to RGB, activates  progressive encoding and sets quality to a higher value of 90.- ``process_png``: Converts PNG images with palette to RGBA.- ``process_gif``: Preserves transparency and palette data in resized  images.- ``preserve_icc_profile``: As the name says.- ``thumbnail``: Resizes images to not exceed a bounding box.- ``crop``: Crops an image to the given dimensions, also takes the PPOI  (primary point of interest) information into account if provided.- ``default``: The combination of ``autorotate``, ``process_jpeg``,  ``process_gif``, ``process_png`` and ``preserve_icc_profile``.  Additional default processors may be added in the future. It is  recommended to use ``default`` instead of adding the processors  one-by-one.Processors can be specified either using their name alone, or if theytake arguments, using a tuple where the first entry is the processors'name and the rest are positional arguments.You can easily register your own processors or even override built-inprocessors if you want to:.. code-block:: python    from imagefield.processing import register    # You could also write a class with a __call__ method, but I really    # like the simplicity of functions.    @register    def my_processor(get_image, ...):        def processor(image, context):            # read some information from the image...            # or maybe modify it, but it's mostly recommended to modify            # the image after calling get_image            image = get_image(image, context)            # modify the image, and return it...            modified_image = ...            # maybe modify the context...            return modified_image        return processorThe processor's name is taken directly from the registered object.An example processor which converts images to grayscale would look asfollows:.. code-block:: python    from PIL import ImageOps    from imagefield.processing import register    @register    def grayscale(get_image):        def processor(image, context):            image = get_image(image, context)            return ImageOps.grayscale(image)        return processorNow include ``&quot;grayscale&quot;`` in the processing spec for the image whereyou want to use it.The processing context======================The ``context`` is a namespace with the following attributes (feel freeto add your own):- ``processors``: The list of processors.- ``name``: The name of the resulting image relative to its storages'  root.- ``extension``: The extension of the source and target.- ``ppoi``: The primary point of interest as a list of two floats  between 0 and 1.- ``save_kwargs``: A dictionary of keyword arguments to pass to  ``PIL.Image.save``.The ``ppoi``, ``extension``, ``processors`` and ``name`` attributescannot be modified when running processors anymore. Under somecircumstances ``extension`` and ``name`` will not even be there.If you want to modify the extension or file type, or create a differentprocessing pipeline depending on facts not known when configuringsettings you can use a callable instead of the list of processors. Thecallable will receive the fieldfile and the context instance and must atleast set the context's ``processors`` attribute to something sensible.Just as an example here's an image field which always returns JPEGthumbnails:.. code-block:: python    from imagefield.processing import register    @register    def force_jpeg(get_image):        def processor(image, context):            image = get_image(image, context)            context.save_kwargs[&quot;format&quot;] = &quot;JPEG&quot;            context.save_kwargs[&quot;quality&quot;] = 90            return image        return processor    def jpeg_processor_spec(fieldfile, context):        context.extension = &quot;.jpg&quot;        context.processors = [            &quot;force_jpeg&quot;,            &quot;autorotate&quot;,            (&quot;thumbnail&quot;, (200, 200)),        ]    class Model(...):        image = ImageField(..., formats={&quot;thumb&quot;: jpeg_processor_spec})Of course you can also access the model instance through the field fileby way of its ``fieldfile.instance`` attribute and use thoseinformations to customize the pipeline.Development===========django-imagefield uses flake8 and black to keep the code clean andformatted. Run both using tox_:.. code-block:: bash    tox -e styleThe easiest way to build the documentation and run the test suite isalso by using tox_:.. code-block:: bash    tox -e docs  # Open docs/build/html/index.html    tox -e tests.. _documentation: https://django-imagefield.readthedocs.io/en/latest/.. _Pillow: https://pillow.readthedocs.io/en/latest/.. _tox: https://tox.readthedocs.io/</longdescription>
</pkgmetadata>