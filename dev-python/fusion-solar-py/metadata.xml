<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Test Package](https://github.com/jgriss/FusionSolarPy/actions/workflows/test.yaml/badge.svg)](https://github.com/jgriss/FusionSolarPy/actions/workflows/test.yaml)[![PyPI version](https://badge.fury.io/py/fusion_solar_py.svg)](https://badge.fury.io/py/fusion_solar_py)# FusionSolarPyA very basic python client for the HuaweiFusionSolar API used to monitorsolar power plants.This client uses the https://region01eu5.fusionsolar.huawei.com end point by default. It ispossible to change this using the `huawei_subdomain` parameter. But this has notbeen tested on any other end-points.Please report any bugs!## InstallationSimply install from pypi using:```bashpip install fusion_solar_py```## UsageThe basic usage centers around the `FusionSolarClient` class. It currentlyonly has one method to extract the current power production, the totalpower production for the current day, and the total energy ever producedby the plant.```pythonfrom fusion_solar_py.client import FusionSolarClient# log into the API - with proper credentials...client = FusionSolarClient(&quot;my_user&quot;, &quot;my_password&quot;)# NOTE: Depending on your region, you may need to set the# `huawei_subdomain` parameter. This is the first part of the# URL when you enter the FusionSolar API through your webbrowser## client = FusionSolarClient(&quot;my_user&quot;, &quot;my_password&quot;, huawei_subdomain=&quot;region01eu5&quot;)# get the statsstats = client.get_power_status()# print all statsprint(f&quot;Current power: {stats.current_power_kw} kW&quot;)print(f&quot;Total power today: {stats.total_power_today_kwh} kWh&quot;)print(f&quot;Total power: {stats.total_power_kwh} kWh&quot;)# log out - just in caseclient.log_out()```It is additional possible to retrieve the data for specificplants - in case multiple plants are available through theaccount.```pythonfrom fusion_solar_py.client import FusionSolarClient# log into the API - with proper credentials...client = FusionSolarClient(&quot;my_user&quot;, &quot;my_password&quot;)# get the plant idsplant_ids = client.get_plant_ids()print(f&quot;Found {len(plant_ids)} plants&quot;)# get the data for the first plantplant_data = client.get_plant_stats(plant_ids[0])# plant_data is a dict that contains the complete# usage statistics of the current day. There is# a helper function available to extract some# most recent measurementslast_values = client.get_last_plant_data(plant_data)print(f&quot;Last production at {last_values['productPower']['time']}: {last_values['productPower']['value']}&quot;)# In case you have a battery installedprint(f&quot;Last battery charge at {last_values['chargePower']['time']}: {last_values['chargePower']['value']}&quot;)# Additionally, if you have a meter installed you can get additional statisticsprint(f&quot;Total power consumption (today): {last_values['totalUsePower']} kWh&quot;)print(f&quot;Total produced power (today): {last_values['totalPower']} kWh&quot;)print(f&quot;Produced power consumed (today): {last_values['totalSelfUsePower']} kWh&quot;)print(f&quot;Relative amount of used power bought from grid: {last_values['buyPowerRatio']}%&quot;)# print all optimizer statsfor x in client.get_optimizer_stats(client.get_device_ids()['Inverter']):    print(f&quot;{x['optName']}: {x['moStatus']} {x['runningStatus']}: {x['outputPower']} W /&quot; +          f&quot; {x['inputVoltage']} V / {x['inputCurrent']} A / {x['temperature']} C&quot;)# log out - just in caseclient.log_out()```## Available plant data / statsThis is a list of variables and a (guessed) explanation of what they mean returnd from`get_plant_stats` and as an abbreviated version by `get_last_plant_data`.### Total valuesThese values are always the total (in kWh) for the current day:  * **totalSelfUsePower**: Total kWh of the current day's production used.  * **selfProvide**: Total kWh of the current day's production used (same as above).  * **totalBuyPower**: Total kWh bought from the grid today.  * **totalProductPower**: Total kWh produced by the PV today.  * **totalUsePower**: Total kWh used today.  * **totalOnGridPower**: Total kWh returned to the grid today.### RatiosRatios are given in percent (f.e. &quot;35.93&quot; for a ratio of 0.3593)  * **onGridPowerRatio**: Proportion of today's PV production returned to the grid.  * **buyPowerRatio**: Proportion of power consumed today that was bought from the grid.  * **selfUsePowerRatioByProduct**: Proportion of produced power used.### Logicals  * **existInverter**: (Boolean) Set if an inverter (ie a PV plant) is installed  * **existCharge**: (Boolean) - Maybe true if currently charging.  * **existMeter**: (Boolean) Set if a meter is installed.  * **existEnergyStore**: (Boolean) - Maybe true if a storage is installed.  * **existUsePower**: (Boolean) - Maybe true if the own power is used.### TimecoursesThese are returned as lists of values. The matching timepoints are found in the`xAxis` list. `get_last_plant_data` returns these values as a dict with the key`time` and `value` representing the last valid measurement (ie. not &quot;--&quot;).  * **selfUsePower**: Amount of energy produced by the PV used.  * **dischargePower**: Amounf of energy discharged from the storage.  * **chargePower**: Amount of energy charged into the storage.  * **onGridPower**: (Probably) The amount of power returned to the grid.  * **disGridPower**: (Probably) The amount of power taken from the grid.  * **productPower**: Amounf of power produced by the PV.  * **usePower**: Amount of power used.</longdescription>
</pkgmetadata>