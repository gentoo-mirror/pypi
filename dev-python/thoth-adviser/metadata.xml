<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Thoth Adviser-------------Welcome to Thoth's adviser repository.This repository provides sources for a component called &quot;thoth-adviser&quot; whichserves the following purposes:1. Recommendation engine for `project Thoth &lt;https://thoth-station.ninja&gt;`__.2. A `tool called &quot;Dependency Monkey&quot; &lt;https://developers.redhat.com/articles/2021/09/17/resolve-python-dependencies-thoth-dependency-monkey&gt;`__   that can generate all the possible software stacks for a project respecting   dependency resolution in the Python ecosystem following programmable rules.3. Check provenance of installed Python artifacts based on package source   indexes used.If you would like to interact with Thoth from user's perspective, check`Thamos repository &lt;https://github.com/thoth-station/thamos&gt;`__.If you would like to browse technical documentation, visit`thoth-adviser section&lt;https://thoth-station.ninja/docs/developers/adviser/&gt;`__ at`thoth-station.ninja &lt;https://thoth-station.ninja&gt;`_... image:: https://github.com/thoth-station/adviser/blob/master/docs/source/_static/rl_video.png?raw=true   :alt: A reinforcement learning based dependency resolution.   :align: center   :target:  https://www.youtube.com/watch?v=WEJ65Rvj3lcSoftware stack resolution pipeline==================================The software stack generation is shared for `Dependency Monkey&lt;https://thoth-station.ninja/docs/developers/adviser/dependency_monkey.html&gt;`__as well as for the recommendation engine. The core principle of the softwarestack generation lies in an abstraction called &quot;software stack resolutionpipeline&quot;. This pipeline is made out of multiple units of different type thatform atomic pieces to score packages that can occur in a software stack basedon the dependency resolution... image:: https://github.com/thoth-station/adviser/blob/master/docs/source/_static/pipeline_builder.gif?raw=true   :alt: Building a resolution pipeline.   :align: centerAs can be seen in the animation shown above, the pipeline units that form thesoftware stack resolution pipeline are included in the pipeline dynamically onthe pipeline creation. A set of units included form a pipeline configuration.The pipeline configuration is built by &quot;pipeline builder&quot; which asks eachpipeline unit for inclusion in the pipeline configuration. Each pipeline unitcan decide when and whether it should be included in the pipeline configurationconsidering aspects for the user software stacks, such as:* hardware available in the runtime environment when running the  application (e.g. CPU, GPU)* operating system and it's version used in the runtime environment where the  application is supposed to be run* software provided by the operating system, such as Python interpreter  version, CUDA version (for GPU computation) and other native dependencies  (e.g. glibc version, Intel MKL libraries, ...) and their ABI* user's intention with the software built - e.g. building a computational  intensive application, an application which should be secure for production  environments, latest-greatest software, ...* `type of inspections for the software quality checks  &lt;https://github.com/thoth-station/amun-api/&gt;`__ - Dependency Monkey scenario* ...All these vectors stated above form a &quot;context&quot; for pipeline builder (the robotin the animation) that creates the pipeline configuration (a set of pipeline units).**See also:*** `dev.to: How to beat Python’s pip: Software stack resolution pipelines &lt;https://dev.to/fridex/how-to-beat-python-s-pip-software-stack-resolution-pipelines-19kg&gt;`__* `YouTube: Pipeline units in a software stack resolution process &lt;https://www.youtube.com/watch?v=OCX8JQDXP9s&gt;`__* `Jupyter Notebook: Pipeline units in a software stack resolution process &lt;https://github.com/thoth-station/notebooks/blob/master/notebooks/development/Pipeline%20units.ipynb&gt;`__Predictor guided resolution process===================================Once the pipeline configuration is constructed, it is used to resolve softwarestacks meeting desired quality and purpose... image:: https://github.com/thoth-station/adviser/blob/master/docs/source/_static/pipeline.gif?raw=true   :alt: A resolution pipeline run.   :align: centerResolver (the fairy in the animation) can resolve and walk through thedependency graph respecting Python packaging based on the `pre-aggregated datafrom dependency solver runs &lt;https://github.com/thoth-station/solver/&gt;`__. Theresolution process is guided by an abstraction called &quot;Predictor&quot; (shown as amagician in the animation). Predictor decides which packages in the dependencygraph should be resolved by Resolver and thus be included in the resultingsoftware stacks. Packages that are resolved go through the software stackresolution pipeline which scores packages (positively, negatively or completelydiscard a package from a software stack resolved). The resolution pipeline can:* inject new packages or new package versions to the dependency graph based on  packages resolved (e.g. a package accidentally not stated as a dependency of  a library, dependency underpinning issues, ...)* remove a dependency in a specific version or the whole dependency from the  dependency graph (e.g. a package accidentally stated a a dependency, missing  ABI symbols in the runtime environment, dependency overpinning issues, ...)* score a package occurring in the dependency graph positively - prioritize  resolution of a specific package in the dependency graph (e.g. positive  performance aspect of a package in a specific version/build)* score a package in a specific version occurring in the dependency graph  negatively - prioritize resolution of other versions (e.g. a security  vulnerability present in a specific release)* prevent resolving a specific package in a specific version so that resolver  tries to find a different resolution path, if any (e.g. buggy package releases)The pipeline units present in the pipeline configuration can take into account&quot;context&quot; as stated above - pipeline units can take into accountcharacteristics of the runtime environment used (software and hardwareavailable), purpose of the application, ...Pipeline units are of different types - Boots, Pseudonyms, Sieves, Steps,Strides and Wraps. `Follow the online documentation for more info&lt;https://thoth-station.ninja/docs/developers/adviser/index.html#pipeline-units&gt;`__.Predictor can be switched and the type of predictor can help with thedesired resolution process. For recommending high quality software stacks,reinforcement learning algorithms, such as `MCTS&lt;https://en.wikipedia.org/wiki/Monte_Carlo_tree_search&gt;`__ or `TD-learning&lt;https://en.wikipedia.org/wiki/Temporal_difference_learning&gt;`__ are used.**See also:*** `dev.to: How to beat Python’s pip: Reinforcement learning-based dependency resolution &lt;https://dev.to/fridex/how-to-beat-python-s-pip-reinforcement-learning-based-dependency-resolution-2he2&gt;`__* `YouTube: Reinforcement learning-based dependency resolution &lt;https://www.youtube.com/watch?v=WEJ65Rvj3lc&gt;`__Resolution process as Markov Decision Process=============================================The whole resolution process can be modeled as a Markov Decision Process (MDP)thus the reinforcement learning (RL) principles stated above can apply.Recommending the best possible set of packages than corresponds to solving thegiven MDP.  See `Thoth's documentation for more info&lt;https://thoth-station.ninja/docs/developers/adviser/introduction.html&gt;`__.To obey terms often used in the reinforcement learning terminology, Predictorcan be seen as an agent. Resolver and Software stack resolution pipeline can beseen as entities that interact with the environment. Names used in Thothintentionally do not correspond to RL terminology as RL based resolution isjust one of the possible resolutions that can be implemented (others can behill-climbing, random walks in the dependency graph, ...).**See also:*** `dev.to: How to beat Python’s pip: Reinforcement learning-based dependency resolution &lt;https://dev.to/fridex/how-to-beat-python-s-pip-reinforcement-learning-based-dependency-resolution-2he2&gt;`__* `YouTube: Reinforcement learning-based dependency resolution &lt;https://www.youtube.com/watch?v=WEJ65Rvj3lc&gt;`__Dependency Monkey=================See `the following article for in-depth explanation witha video &lt;https://developers.redhat.com/articles/2021/09/17/resolve-python-dependencies-thoth-dependency-monkey&gt;`__.The primary use-case for Dependency Monkey is to generate software stacks thatare subsequently validated and scored in the `Amun&lt;https://github.com/thoth-station/amun-api&gt;`__ service. Simply, when generatingall the possible software stacks, we can find the best software stack for anapplication by validating it in a CI (or Amun in case of Thoth), running theapplication in the specific runtime environment (e.g. Fedora 33 with installednative packages - RPMs) on some specific hardware configuration. Generating andscoring all the possible software stacks is, however, most often not doable ina reasonable time. For this purpose, Dependency Monkey can create a sample ofsoftware stacks that can be taken as representatives. These representatives arescored and aggregated data are used for predicting the best application stack(again, generated and run through CI/Amun to make predictions more accurate bylearning over time).See `Dependency Monkey documentation&lt;https://thoth-station.ninja/docs/developers/adviser/dependency_monkey.html&gt;`_for more info.**See also:*** `Resolve Python dependencies with Thoth Dependency Monkey &lt;https://developers.redhat.com/articles/2021/09/17/resolve-python-dependencies-thoth-dependency-monkey&gt;`__* `Developers Red Hat: AI software stack inspection with Thoth and TensorFlow &lt;https://developers.redhat.com/blog/2020/09/30/ai-software-stack-inspection-with-thoth-and-tensorflow/?sc_cid=7013a000002gbzfAAA&gt;`__* `dev.to: How to beat Python’s pip: Inspecting the quality of machine learning software &lt;https://dev.to/fridex/how-to-beat-python-s-pip-inspecting-the-quality-of-machine-learning-software-1pkp&gt;`__* `YouTube: Thoth Amun API: Inspecting the quality of software &lt;https://www.youtube.com/watch?v=yeBjnZpdMwY&gt;`__* `dev.to: How to beat Python’s pip: Dependency Monkey inspecting the quality of TensorFlow dependencies &lt;https://dev.to/fridex/how-to-beat-python-s-pip-dependency-monkey-inspecting-the-quality-of-tensorflow-dependencies-6fc&gt;`__* `YouTube: Dependency Monkey inspecting Python dependencies of TensorFlow &lt;https://www.youtube.com/watch?v=S3hFn8KRsKc&gt;`__Advises and Recommendations===========================In Thoth's terminology, advises and recommendations are the same. Based onthe aggregated knowledge stored in the database, provide the best applicationstack with reasoning on why the given software stack is used. Pipeline unitspresent in the pipeline configuration score packages resolved and provide suchreasoning. The reasoning is called &quot;justification&quot; in Thoth's terminology. SeeThoth's pages to `see some of them&lt;https://thoth-station.ninja/justifications&gt;`__.Provenance Checks=================As Thoth aggregates information about packages available, it can verifya user's stack against its knowledge base. See `Provenance Checks&lt;https://thoth-station.ninja/docs/developers/adviser/provenance_checks.html&gt;`_for more info.Installation and deployment===========================Adviser is built using OpenShift Source-to-Image and deployedautomatically with Thoth's deployment available in the`thoth-station/thoth-application repository&lt;https://github.com/thoth-station/thoth-application&gt;`__.In a Thoth deployment, adviser is run based on requests coming to the `user API&lt;https://github.com/thoth-station/user-api&gt;`__ - each deployed adviser is runper a user request. You can run adviser locally as well by installing it andusing its command line interface:::  pip3 install thoth-adviser  thoth-adviser --help  # Or use git repo directly for the latest code:  # pip3 install git+https://github.com/thoth-station/adviserNote a database needs to be available.  See `thoth-storages repository&lt;https://github.com/thoth-station/storages&gt;`__ on how to run Thoth's knowledgegraph locally and example `notebooks&lt;https://github.com/thoth-station/notebooks&gt;`__ with experiments.When thoth-adviser is scheduled in a deployment, it is actually executed as aCLI with arguments passed via environment variables.Blocking a bogus pipeline unit==============================Adviser also considers environment variable ``THOTH_ADVISER_BLOCKED_UNITS`` thatstates a comma separated list of pipeline units that should not be added tothe pipeline. This can be handy if an issue with a unit arises in a deployment- Thoth operator can remove pipeline unit by adjusting environment variable inthe adviser deployment manifest and provide this configuration without a needto deploy a new version of adviser.Disabling pipeline unit validation==================================For prod-like deployments, you can disable pipeline unit validation. By doingso, the pipeline unit configuration can be constructed faster. Provide``THOTH_ADVISER_VALIDATE_UNIT_CONFIGURATION_SCHEMA=0`` environment variable todisable pipeline unit configuration validation.Running adviser locally=======================Often, it is useful to run adviser locally to experiment or verify your changesin implementation. You can do so easily by running:.. code-block:: console  pipenv install --dev  PYTHONPATH=. pipenv run ./thoth-adviser --helpThis command will run adviser locally - adviser will try to connect to a localPostgreSQL instance and compute recommendations. `Browse docs here&lt;https://github.com/thoth-station/thoth-storages&gt;`__ to see how to setup a localPostgreSQL instance. Also, follow the developer's guide to get `moreinformation about developer's setup&lt;https://thoth-station.ninja/docs/developers/adviser/developers_guide.html&gt;`__.</longdescription>
</pkgmetadata>