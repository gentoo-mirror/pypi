<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Deprecation warningThis module is deprecated in favor of `origo-sdk`.The module contents has moved from the `origo` namespace to `origo.sdk`. Ie.`from origo.data.upload import Upload` is changed to `fromorigo.sdk.data.upload import Upload`.# ConfigurationWhen calling any classes interacting with the Origo API and there are no Config params passed to the constructor, a config object will beautomaticly created for you based on environment variables### Environment variablesDefault, will pick up configuration from current environment.The credentials is resolved automatically if you do not set a specific Auth config, in the following order:1. _Client Credentials_: If you have added client_id / client_secret to the config. Or if you use theenvironment variable equivalent: `ORIGO_CLIENT_ID` / `ORIGO_CLIENT_SECRET`.2. _Username And Password_:  If you have added username / password to the config. Or if you use theenvironment variable equivalent: `ORIGO_USERNAME` / `ORIGO_PASSWORD`.```# keycloak userexport ORIGO_USERNAME=my-user# keycloak password for ORIGO_USERNAMEexport ORIGO_PASSWORD=my-password# keycloak clientexport ORIGO_CLIENT_ID=my-machine-client# keycloak secret for ORIGO_CLIENT_IDexport ORIGO_CLIENT_SECRET=some-generated-secure-string# overrides default environment (dev), but will be trumped by --env=&lt;environment&gt; on the commandlineexport ORIGO_ENVIRONMENT=dev|prod# If you are sending events and have been assigned a API keyexport ORIGO_API_KEY=your-api-key```### Getting Credentials:`username/password ` are synced with Oslo municipalities Active Directory so any user with an association canuse their personal account to access the SDK.For `client credentials` please contact the data platform team. `dataplattform[at]oslo.kommune.no`### TODO: Named profilesIf environment variables are not available, the system will try to load from a default profile: Located in ~/.origo/configuration# UsageTable of contents:- [Upload data](#upload-data)- [Sending events](#sending-events)- [Create and manage event streams](#create-and-manage-event-streams)- [Creating datasets with versions and editions](#creating-datasets-with-versions-and-editions)## Upload dataWhen uploading data you need to refer to an existing dataset that you own, a version and an edition. If these are non existent then you can create them yourself. This can be achieved [using the sdk](#create-a-new-dataset-with-version-and-edition),or you can use our [command line interface](https://github.com/oslokommune/origo-cli).```pythonfrom origo.data.upload import Uploadfrom origo.config import Configorigo_config = Config()# If necessary you can override default valuesorigo_config.config[&quot;cacheCredentials&quot;] = Falsedata_uploader = Upload(config=origo_config)# Upload file 'data.json' to dataset-id/version/editiondataset_id = &quot;my-dataset-id&quot;version = &quot;my-version&quot;  # example value: 1edition = &quot;my-edition&quot;  # example value: 20200618T114038filename = &quot;/path-to-file/data.json&quot;# Note! filename must be pointing to an existing file on your diskupload_response = data_uploader.upload(filename, dataset_id, version, edition)print(upload_response)# {#     &quot;result&quot;: True,#     &quot;trace_id&quot;: &quot;my-dataset-id-54a3c78e-86a3-4631-8f28-0252fe1c7c13&quot;# }```The `trace_id` returned by the upload method can be used to &quot;trace&quot; the steps involved in the upload process:```pythonfrom origo.status import Status...status = Status(config=origo_config)trace_events = status.get_status(trace_id)print(trace_events)# [#     {#         &quot;trace_id&quot;: &quot;my-dataset-1a2bc345-6789-1234-567d-8912ef34a567&quot;,#         &quot;trace_status&quot;: &quot;STARTED&quot;,#         &quot;trace_event_id&quot;: &quot;1a2b3cd4-eef5-6aa7-bccd-e889912334f5&quot;,#         &quot;trace_event_status&quot;: &quot;OK&quot;,#         &quot;component&quot;: &quot;data-uploader&quot;,#         ...#     },#     {#         &quot;trace_id&quot;: &quot;my-dataset-1a2bc345-6789-1234-567d-8912ef34a567&quot;,#         &quot;trace_status&quot;: &quot;CONTINUE&quot;,#         ...#     },#     {#         &quot;trace_id&quot;: &quot;my-dataset-1a2bc345-6789-1234-567d-8912ef34a567&quot;,#         &quot;trace_event_id&quot;: &quot;1aa2b345-678c-9de1-f2a3-4566bcd78912&quot;,#         &quot;trace_status&quot;: &quot;FINISHED&quot;,#         &quot;trace_event_status&quot;: &quot;OK&quot;,#         ...#     }# ]```## Download dataWhen downloading data you need to refer to an existing dataset that you own, a version and an edition.If these are non existent then you can create them yourself. This can be achieved [using the sdk](#create-a-new-dataset-with-version-and-edition),or you can use our [command line interface](https://github.com/oslokommune/origo-cli).```pythonfrom origo.data.download import Downloadfrom origo.config import Configorigo_config = Config(env=&quot;dev&quot;)# If necessary you can override default config valuesorigo_config.config[&quot;cacheCredentials&quot;] = Falsedata_downloader = Download(config=origo_config)dataset_id = &quot;your-dataset-id&quot;version = &quot;1&quot;edition = &quot;latest&quot;# Downloading a fileres1 = data_downloader.download(dataset_id, version, edition, &quot;my/preferred/output/path&quot;)print(res1)# {#     &quot;downloaded_files&quot;: [&quot;my/preferred/output/path/file_name.csv&quot;]# }```## Sending eventsIn order to start sending events you will need access to an event stream. If such an event stream is alreadyin place you are good to go. If not, you can create one either by [using the sdk](#create-and-manage-event-streams),or by [using our command line interface](https://github.com/oslokommune/origo-cli).```pythonfrom origo.event.post_event import PostEventfrom origo.config import Configorigo_config = Config()# If necessary you can override default config valuesorigo_config.config[&quot;cacheCredentials&quot;] = Trueevent_poster = PostEvent(config=origo_config)dataset_id = &quot;some-dataset-id&quot;version = &quot;1&quot;event = {&quot;foo&quot;: &quot;bar&quot;}res = event_poster.post_event(event, dataset_id, version)# res:# {'message': 'Ok'}# Method also supports list of dictionariesevent_list = [{&quot;foo&quot;: &quot;bar&quot;}, {&quot;foo&quot;: &quot;bar&quot;}]res2 = event_poster.post_event(event_list, dataset_id, version)# res2:# {'message': 'Ok'}```## Create and manage event streamsIn order to create an event stream you need to have defined a dataset and a version, unless these already exist. Defining a dataset and a version can be achieved [using the sdk](#creating-datasets-with-versions-and-editions),or you can use our [command line interface](https://github.com/oslokommune/origo-cli).You do not need to define an edition in order to create an event stream.```pythonfrom origo.event.event_stream_client import EventStreamClient# Using default configuration for dev-environmentevent_stream_client = EventStreamClient(env=&quot;dev&quot;)dataset_id = &quot;some-dataset-id&quot;version = &quot;1&quot;# Creating a new event stream:create_response = event_stream_client.create_event_stream(    dataset_id, version)# create_response:# {'message': 'Accepted'}# Getting info about the event streamevent_stream_info = event_stream_client.get_event_stream_info(dataset_id, version)# event_stream_info:# { 'createdAt': '2020-01-29T07:02:32.598520+00:00',#   'createdBy': 'jd',#   'id': 'test-stream-manager/1',#   'status': 'CREATE_IN_PROGRESS'#   }# Note! You must wait until the event stream has status=ACTIVE#       before you can successfully send events to the stream# Deleting the event streamdelete_response = event_stream_client.delete_event_stream(dataset_id, version)# delete_response:# {'message': 'Delete initiated'}```## Creating datasets with versions and editions```pythonfrom origo.data.dataset import Datasetfrom origo.config import Configorigo_config = Config()# If necessary you can override default valuesorigo_config.config[&quot;cacheCredentials&quot;] = False# Create a new datasetdataset = Dataset(config=origo_config)dataset_metadata = {    &quot;title&quot;: &quot;Precise Descriptive Title&quot;,    &quot;description&quot;: &quot;Describe your dataset here&quot;,    &quot;keywords&quot;: [&quot;some-keyword&quot;],    &quot;accessRights&quot;: &quot;public&quot;,    &quot;confidentiality&quot;: &quot;green&quot;,    &quot;objective&quot;: &quot;Exemplify how to create a new dataset&quot;,    &quot;contactPoint&quot;: {        &quot;name&quot;: &quot;Your name&quot;,        &quot;email&quot;: &quot;your_email@domain.com&quot;,        &quot;phone&quot;: &quot;999555111&quot;    },    &quot;publisher&quot;: &quot;name of organization or person responsible for publishing the data&quot;}new_dataset = dataset.create_dataset(data=dataset_metadata)# new_dataset:# { 'Id': 'precise-descriptive-title',#   'Type': 'Dataset',#   '_links': {'self': {'href': '/datasets/precise-descriptive-title'}},#   'accessRights': 'public',#   'confidentiality': 'green',#   'contactPoint': { 'email': 'your_email@domain.com',#                     'name': 'Your name',#                     'phone': '999555111'},#   'description': 'Describe your dataset here',#   'keywords': ['some-keyword'],#   'objective': 'Exemplify how to create a new dataset',#   'publisher': 'name of organization or person responsible for publishing the '#                'data',#   'title': 'Precise Descriptive Title'}# create version for new dataset:version_data = {&quot;version&quot;: &quot;1&quot;}new_version = dataset.create_version(new_dataset[&quot;Id&quot;], data=version_data)# new_version:# { 'Id': 'precise-descriptive-title/1',#   'Type': 'Version',#   '_links': { 'self': { 'href': '/datasets/precise-descriptive-title/versions/1'}},#   'version': '1'}# create edition for new_dataset/new_version:import datetime# Note! edition-field must be ISO 8601 with utc offsetedition_data = {    &quot;edition&quot;: str(datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc).isoformat()),    &quot;description&quot;: &quot;My edition description&quot;,    &quot;startTime&quot;: &quot;2019-01-01&quot;,    &quot;endTime&quot;: &quot;2019-12-31&quot;}new_edition = dataset.create_edition(new_dataset[&quot;Id&quot;], new_version[&quot;version&quot;], data=edition_data)# new_edition# { 'Id': 'precise-descriptive-title/1/20200115T130439',#   'Type': 'Edition',#   '_links': { 'self': { 'href': '/datasets/precise-descriptive-title/versions/1/editions/20200115T130439'}},#   'description': 'My edition description',#   'edition': '2020-01-15T13:04:39.041778+00:00',#   'endTime': '2019-12-31',#   'startTime': '2019-01-01'}```</longdescription>
</pkgmetadata>