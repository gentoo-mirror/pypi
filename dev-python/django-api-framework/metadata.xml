<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/django-api-framework.svg)](https://badge.fury.io/py/django-api-framework)[![PyPI version](https://img.shields.io/pypi/v/django-api-framework.svg)](https://pypi.python.org/pypi/django-api-framework)![Test](https://github.com/freemindcore/django-api-framework/actions/workflows/test_full.yml/badge.svg)[![Codecov](https://img.shields.io/codecov/c/gh/freemindcore/django-api-framework)](https://codecov.io/gh/freemindcore/django-api-framework)[![Downloads](https://pepy.tech/badge/django-api-framework/month)](https://pepy.tech/project/django-api-framework)[![PyPI version](https://img.shields.io/pypi/pyversions/django-api-framework.svg)](https://pypi.python.org/pypi/django-api-framework)[![PyPI version](https://img.shields.io/pypi/djversions/django-api-framework.svg)](https://pypi.python.org/pypi/django-api-framework)# Easy CRUD API Framework- Zero code for a full CRUD API: Automatic and configurable, inspired by [NextJs-Crud](https://github.com/nestjsx/crud).  - Async CRUD API with Django RBAC security protection  - Prefetch and retrieve all m2m fields if configured  - Recursively retrieve all FK/OneToOne fields if configured  - Excluding fields you do not want, or define a list of sensitive fields of your choice- Pure class based [Django-Ninja](https://github.com/vitalik/django-ninja) APIs: thanks to [Django-Ninja-Extra](https://github.com/eadwinCode/django-ninja-extra)- Domain/Service/Controller Base Structure: for better code organization.- Base Permission/Response/Exception Classes: and some handy features to help your API coding easier.```Django-Ninja features:  Easy: Designed to be easy to use and intuitive.  FAST execution: Very high performance thanks to Pydantic and async support.  Fast to code: Type hints and automatic docs lets you focus only on business logic.  Standards-based: Based on the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema.  Django friendly: (obviously) has good integration with the Django core and ORM.Plus Extra:  Class Based: Design your APIs in a class based fashion.  Permissions: Protect endpoint(s) at ease with defined permissions and authorizations at route level or controller level.  Dependency Injection: Controller classes supports dependency injection with python Injector or django_injector. Giving you the ability to inject API dependable services to APIController class and utilizing them where needed```## Install`pip install django-api-framework`Then add &quot;easy&quot; to your django INSTALLED_APPS:```[    ...,    &quot;easy&quot;,    ...,]```## Usage### Get all your Django app CRUD APIs up and running in &lt; 1 minIn your Django project next to urls.py create new apis.py file:```from easy.main import EasyAPIapi_admin_v1 = EasyAPI(    urls_namespace=&quot;admin_api&quot;,    version=&quot;v1.0.0&quot;,)# Automatic Admin API generationapi_admin_v1.auto_create_admin_controllers()```Go to urls.py and add the following:```from django.urls import pathfrom .apis import api_admin_v1urlpatterns = [    path(&quot;admin/&quot;, admin.site.urls),    path(&quot;api_admin/v1/&quot;, api_admin_v1.urls),  # &lt;---------- !]```Now go to http://127.0.0.1:8000/api_admin/v1/docsYou will see the automatic interactive API documentation (provided by Swagger UI).![Auto generated APIs List](https://github.com/freemindcore/django-api-framework/blob/fae8209a8d08c55daf75ac3a4619fe62b8ef3af6/docs/images/admin_apis_list.png)### Boilerplate Django projectA boilerplate Django project for quickly getting started, and get production ready easy-apis with 100% test coverage UP and running:https://github.com/freemindcore/django-easy-api![Auto generated APIs - Users](https://github.com/freemindcore/django-api-framework/blob/9aa26e92b6fd79f4d9db422ec450fe62d4cd97b9/docs/images/user_admin_api.png)## Thanks to your help**_If you find this project useful, please give your stars to support this open-source project. :) Thank you !_**## Advanced UsageIf `CRUD_API_ENABLED_ALL_APPS` is set to True (default), all app models CRUD apis will be generated.Apps in the `CRUD_API_EXCLUDE_APPS` list, will always be excluded.If `CRUD_API_ENABLED_ALL_APPS` is set to False, only apps in the `CRUD_API_INCLUDE_APPS` list will have CRUD apis generated.Also, configuration is possible for each model, via APIMeta class:- `generate_crud`:      whether to create crud api, default to True- `model_exclude`:      fields to be excluded in Schema- `model_fields`:       fields to be included in Schema, default to `&quot;__all__&quot;`- `model_join`:         prefetch and retrieve all m2m fields, default to False- `model_recursive`:    recursively retrieve FK/OneToOne fields, default to False- `sensitive_fields`:   fields to be ignoredExample:```class Category(TestBaseModel):    title = models.CharField(max_length=100)    status = models.PositiveSmallIntegerField(default=1, null=True)    class APIMeta:        generate_crud = True        model_fields = [&quot;field_1&quot;, &quot;field_2&quot;,] # if not configured default to &quot;__all__&quot;        model_join = True        model_recursive = True        sensitive_fields = [&quot;password&quot;, &quot;sensitive_info&quot;]```### Adding CRUD APIs to a specific API ControllerBy inheriting `CrudAPIController` class, CRUD APIs can be added to any API controller.Configuration is available via `APIMeta` inner class in your Controller, same as the above `APIMeta` inner class defined in your Django models.Example:```@api_controller(&quot;event_api&quot;, permissions=[AdminSitePermission])class EventAPIController(CrudAPIController):    def __init__(self, service: EventService):        super().__init__(service)    class APIMeta:        model = Event # django model        generate_crud = True # whether to create crud api, default to True        model_fields = [&quot;field_1&quot;, &quot;field_2&quot;,] # if not configured default to &quot;__all__&quot;        model_join = True        model_recursive = True        sensitive_fields = [&quot;password&quot;, &quot;sensitive_info&quot;]```Please check tests/demo_app for more examples.</longdescription>
</pkgmetadata>