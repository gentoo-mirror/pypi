<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======Colour======.. image:: http://img.shields.io/pypi/v/colour.svg?style=flat   :target: https://pypi.python.org/pypi/colour/   :alt: Latest PyPI version.. image:: https://img.shields.io/pypi/l/gitchangelog.svg?style=flat   :target: https://github.com/vaab/gitchangelog/blob/master/LICENSE   :alt: License.. image:: https://img.shields.io/pypi/pyversions/gitchangelog.svg?style=flat   :target: https://pypi.python.org/pypi/gitchangelog/   :alt: Compatible python versions.. image:: http://img.shields.io/pypi/dm/colour.svg?style=flat   :target: https://pypi.python.org/pypi/colour/   :alt: Number of PyPI downloads.. image:: http://img.shields.io/travis/vaab/colour/master.svg?style=flat   :target: https://travis-ci.org/vaab/colour/   :alt: Travis CI build status.. image:: https://img.shields.io/appveyor/ci/vaab/colour.svg   :target: https://ci.appveyor.com/project/vaab/colour/branch/master   :alt: Appveyor CI build status.. image:: http://img.shields.io/codecov/c/github/vaab/colour.svg?style=flat   :target: https://codecov.io/gh/vaab/colour/   :alt: Test coverageConverts and manipulates common color representation (RGB, HSL, web, ...)Feature=======- Damn simple and pythonic way to manipulate color representation (see  examples below)- Full conversion between RGB, HSL, 6-digit hex, 3-digit hex, human color- One object (``Color``) or bunch of single purpose function (``rgb2hex``,  ``hsl2rgb`` ...)- ``web`` format that use the smallest representation between  6-digit (e.g. ``#fa3b2c``), 3-digit (e.g. ``#fbb``), fully spelled  color (e.g. ``white``), following `W3C color naming`_ for compatible  CSS or HTML color specifications.- smooth intuitive color scale generation choosing N color gradients.- can pick colors for you to identify objects of your application... _W3C color naming: http://www.w3.org/TR/css3-color/#svg-colorInstallation============You don't need to download the GIT version of the code as ``colour`` isavailable on the PyPI. So you should be able to run::    pip install colourIf you have downloaded the GIT sources, then you could add the ``colour.py``directly to one of your ``site-packages`` (thanks to a symlink). Or installthe current version via traditional::    python setup.py installAnd if you don't have the GIT sources but would like to get the latestmaster or branch from github, you could also::    pip install git+https://github.com/vaab/colourOr even select a specific revision (branch/tag/commit)::    pip install git+https://github.com/vaab/colour@masterUsage=====To get complete demo of each function, please read the source code which isheavily documented and provide a lot of examples in doctest format.Here is a reduced sample of a common usage scenario:Instantiation-------------Let's create blue color::    &gt;&gt;&gt; from colour import Color    &gt;&gt;&gt; c = Color(&quot;blue&quot;)    &gt;&gt;&gt; c    &lt;Color blue&gt;Please note that all of these are equivalent examples to create the red color::    Color(&quot;red&quot;)           ## human, web compatible representation    Color(red=1)           ## default amount of blue and green is 0.0    Color(&quot;blue&quot;, hue=0)   ## hue of blue is 0.66, hue of red is 0.0    Color(&quot;#f00&quot;)          ## standard 3 hex digit web compatible representation    Color(&quot;#ff0000&quot;)       ## standard 6 hex digit web compatible representation    Color(hue=0, saturation=1, luminance=0.5)    Color(hsl=(0, 1, 0.5)) ## full 3-uple HSL specification    Color(rgb=(1, 0, 0))   ## full 3-uple RGB specification    Color(Color(&quot;red&quot;))    ## recursion doesn't break objectReading values--------------Several representations are accessible::    &gt;&gt;&gt; c.hex    '#00f'    &gt;&gt;&gt; c.hsl  # doctest: +ELLIPSIS    (0.66..., 1.0, 0.5)    &gt;&gt;&gt; c.rgb    (0.0, 0.0, 1.0)And their different parts are also independently accessible, as the differentamount of red, blue, green, in the RGB format::    &gt;&gt;&gt; c.red    0.0    &gt;&gt;&gt; c.blue    1.0    &gt;&gt;&gt; c.green    0.0Or the hue, saturation and luminance of the HSL representation::    &gt;&gt;&gt; c.hue  # doctest: +ELLIPSIS    0.66...    &gt;&gt;&gt; c.saturation    1.0    &gt;&gt;&gt; c.luminance    0.5A note on the ``.hex`` property, it'll return the smallest valid valuewhen possible. If you are only interested by the long value, use``.hex_l``::    &gt;&gt;&gt; c.hex_l    '#0000ff'Modifying color objects-----------------------All of these properties are read/write, so let's add some red to this color::    &gt;&gt;&gt; c.red = 1    &gt;&gt;&gt; c    &lt;Color magenta&gt;We might want to de-saturate this color::    &gt;&gt;&gt; c.saturation = 0.5    &gt;&gt;&gt; c    &lt;Color #bf40bf&gt;And of course, the string conversion will give the web representation which ishuman, or 3-digit, or 6-digit hex representation depending which is usable::    &gt;&gt;&gt; &quot;%s&quot; % c    '#bf40bf'    &gt;&gt;&gt; c.luminance = 1    &gt;&gt;&gt; &quot;%s&quot; % c    'white'Ranges of colors----------------You can get some color scale of variation between two ``Color`` objects quiteeasily. Here, is the color scale of the rainbow between red and blue::    &gt;&gt;&gt; red = Color(&quot;red&quot;)    &gt;&gt;&gt; blue = Color(&quot;blue&quot;)    &gt;&gt;&gt; list(red.range_to(blue, 5))    [&lt;Color red&gt;, &lt;Color yellow&gt;, &lt;Color lime&gt;, &lt;Color cyan&gt;, &lt;Color blue&gt;]Or the different amount of gray between black and white::    &gt;&gt;&gt; black = Color(&quot;black&quot;)    &gt;&gt;&gt; white = Color(&quot;white&quot;)    &gt;&gt;&gt; list(black.range_to(white, 6))    [&lt;Color black&gt;, &lt;Color #333&gt;, &lt;Color #666&gt;, &lt;Color #999&gt;, &lt;Color #ccc&gt;, &lt;Color white&gt;]If you have to create graphical representation with color scalebetween red and green ('lime' color is full green)::    &gt;&gt;&gt; lime = Color(&quot;lime&quot;)    &gt;&gt;&gt; list(red.range_to(lime, 5))    [&lt;Color red&gt;, &lt;Color #ff7f00&gt;, &lt;Color yellow&gt;, &lt;Color chartreuse&gt;, &lt;Color lime&gt;]Notice how naturally, the yellow is displayed in human format and inthe middle of the scale. And that the quite unusual (but compatible)'chartreuse' color specification has been used in place of thehexadecimal representation.Color comparison----------------Sane default~~~~~~~~~~~~Color comparison is a vast subject. However, it might seem quite straightforward foryou. ``Colour`` uses a configurable default way of comparing color that might suityour needs::    &gt;&gt;&gt; Color(&quot;red&quot;) == Color(&quot;#f00&quot;) == Color(&quot;blue&quot;, hue=0)    TrueThe default comparison algorithm focuses only on the &quot;web&quot; representation which isequivalent to comparing the long hex representation (e.g. #FF0000) or to be morespecific, it is equivalent to compare the amount of red, green, and blue compositionof the RGB representation, each of these value being quantized to a 256 value scale.This default comparison is a practical and convenient way to measure the actualcolor equivalence on your screen, or in your video card memory.But this comparison wouldn't make the difference between a black red, and ablack blue, which both are black::   &gt;&gt;&gt; black_red = Color(&quot;red&quot;, luminance=0)   &gt;&gt;&gt; black_blue = Color(&quot;blue&quot;, luminance=0)   &gt;&gt;&gt; black_red == black_blue   TrueCustomization~~~~~~~~~~~~~But, this is not the sole way to compare two colors. As I'm quite lazy, I'm providingyou a way to customize it to your needs. Thus::   &gt;&gt;&gt; from colour import RGB_equivalence, HSL_equivalence   &gt;&gt;&gt; black_red = Color(&quot;red&quot;, luminance=0, equality=HSL_equivalence)   &gt;&gt;&gt; black_blue = Color(&quot;blue&quot;, luminance=0, equality=HSL_equivalence)   &gt;&gt;&gt; black_red == black_blue   FalseAs you might have already guessed, the sane default is ``RGB_equivalence``, so::   &gt;&gt;&gt; black_red = Color(&quot;red&quot;, luminance=0, equality=RGB_equivalence)   &gt;&gt;&gt; black_blue = Color(&quot;blue&quot;, luminance=0, equality=RGB_equivalence)   &gt;&gt;&gt; black_red == black_blue   TrueHere's how you could implement your unique comparison function::   &gt;&gt;&gt; saturation_equivalence = lambda c1, c2: c1.saturation == c2.saturation   &gt;&gt;&gt; red = Color(&quot;red&quot;, equality=saturation_equivalence)   &gt;&gt;&gt; blue = Color(&quot;blue&quot;, equality=saturation_equivalence)   &gt;&gt;&gt; white = Color(&quot;white&quot;, equality=saturation_equivalence)   &gt;&gt;&gt; red == blue   True   &gt;&gt;&gt; white == red   FalseNote: When comparing 2 colors, *only* the equality function *of the firstcolor will be used*. Thus::   &gt;&gt;&gt; black_red = Color(&quot;red&quot;, luminance=0, equality=RGB_equivalence)   &gt;&gt;&gt; black_blue = Color(&quot;blue&quot;, luminance=0, equality=HSL_equivalence)   &gt;&gt;&gt; black_red == black_blue   TrueBut reverse operation is not equivalent !::   &gt;&gt;&gt; black_blue == black_red   FalseEquality to non-Colour objects~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~As a side note, whatever your custom equality function is, it won't beused if you compare to anything else than a ``Colour`` instance::    &gt;&gt;&gt; red = Color(&quot;red&quot;, equality=lambda c1, c2: True)    &gt;&gt;&gt; blue = Color(&quot;blue&quot;, equality=lambda c1, c2: True)Note that these instances would compare as equal to any other color::    &gt;&gt;&gt; red == blue    TrueBut on another non-Colour object::    &gt;&gt;&gt; red == None    False    &gt;&gt;&gt; red != None    TrueActually, ``Colour`` instances will, politely enough, leavethe other side of the equality have a chance to decide of the output,(by executing its own ``__eq__``), so::    &gt;&gt;&gt; class OtherColorImplem(object):    ...     def __init__(self, color):    ...         self.color = color    ...     def __eq__(self, other):    ...         return self.color == other.web    &gt;&gt;&gt; alien_red = OtherColorImplem(&quot;red&quot;)    &gt;&gt;&gt; red == alien_red    True    &gt;&gt;&gt; blue == alien_red    FalseAnd inequality (using ``__ne__``) are also polite::    &gt;&gt;&gt; class AnotherColorImplem(OtherColorImplem):    ...     def __ne__(self, other):    ...         return self.color != other.web    &gt;&gt;&gt; new_alien_red = AnotherColorImplem(&quot;red&quot;)    &gt;&gt;&gt; red != new_alien_red    False    &gt;&gt;&gt; blue != new_alien_red    TruePicking arbitrary color for a python object-------------------------------------------Basic Usage~~~~~~~~~~~Sometimes, you just want to pick a color for an object in your applicationoften to visually identify this object. Thus, the picked color should be thesame for same objects, and different for different object::    &gt;&gt;&gt; foo = object()    &gt;&gt;&gt; bar = object()    &gt;&gt;&gt; Color(pick_for=foo)  # doctest: +ELLIPSIS    &lt;Color ...&gt;    &gt;&gt;&gt; Color(pick_for=foo) == Color(pick_for=foo)    True    &gt;&gt;&gt; Color(pick_for=foo) == Color(pick_for=bar)    FalseOf course, although there's a tiny probability that different strings yield thesame color, most of the time, different inputs will produce different colors.Advanced Usage~~~~~~~~~~~~~~You can customize your color picking algorithm by providing a ``picker``. A``picker`` is a callable that takes an object, and returns something that canbe instantiated as a color by ``Color``::    &gt;&gt;&gt; my_picker = lambda obj: &quot;red&quot; if isinstance(obj, int) else &quot;blue&quot;    &gt;&gt;&gt; Color(pick_for=3, picker=my_picker, pick_key=None)    &lt;Color red&gt;    &gt;&gt;&gt; Color(pick_for=&quot;foo&quot;, picker=my_picker, pick_key=None)    &lt;Color blue&gt;You might want to use a particular picker, but enforce how the picker willidentify two object as the same (or not). So there's a ``pick_key`` attributethat is provided and defaults as equivalent of ``hash`` method and if hash isnot supported by your object, it'll default to the ``str`` of your object saltedwith the class name.Thus::    &gt;&gt;&gt; class MyObj(str): pass    &gt;&gt;&gt; my_obj_color = Color(pick_for=MyObj(&quot;foo&quot;))    &gt;&gt;&gt; my_str_color = Color(pick_for=&quot;foo&quot;)    &gt;&gt;&gt; my_obj_color == my_str_color    FalsePlease make sure your object is hashable or &quot;stringable&quot; before using the``RGB_color_picker`` picking mechanism or provide another color picker. Nearlyall python object are hashable by default so this shouldn't be an issue (e.g. instances of ``object`` and subclasses are hashable).Neither ``hash`` nor ``str`` are perfect solution. So feel free to use``pick_key`` at ``Color`` instantiation time to set your way to identifyobjects, for instance::    &gt;&gt;&gt; a = object()    &gt;&gt;&gt; b = object()    &gt;&gt;&gt; Color(pick_for=a, pick_key=id) == Color(pick_for=b, pick_key=id)    FalseWhen choosing a pick key, you should closely consider if you want your colorto be consistent between runs (this is NOT the case with the last example),or consistent with the content of your object if it is a mutable object.Default value of ``pick_key`` and ``picker`` ensures that the same color willbe attributed to same object between different run on different computer formost python object.Color factory-------------As you might have noticed, there are few attributes that you might want to seeattached to all of your colors as ``equality`` for equality comparison support,or ``picker``, ``pick_key`` to configure your object color picker.You can create a customized ``Color`` factory thanks to the ``make_color_factory``::    &gt;&gt;&gt; from colour import make_color_factory, HSL_equivalence, RGB_color_picker    &gt;&gt;&gt; get_color = make_color_factory(    ...    equality=HSL_equivalence,    ...    picker=RGB_color_picker,    ...    pick_key=str,    ... )All color created thanks to ``CustomColor`` class instead of the default onewould get the specified attributes by default::    &gt;&gt;&gt; black_red = get_color(&quot;red&quot;, luminance=0)    &gt;&gt;&gt; black_blue = get_color(&quot;blue&quot;, luminance=0)Of course, these are always instances of ``Color`` class::    &gt;&gt;&gt; isinstance(black_red, Color)    TrueEquality was changed from normal defaults, so::    &gt;&gt;&gt; black_red == black_blue    FalseThis because the default equivalence of ``Color`` was set to``HSL_equivalence``.Contributing============Any suggestion or issue is welcome. Push request are very welcome,please check out the guidelines.Push Request Guidelines-----------------------You can send any code. I'll look at it and will integrate it myself inthe code base and leave you as the author. This process can take time andit'll take less time if you follow the following guidelines:- check your code with PEP8 or pylint. Try to stick to 80 columns wide.- separate your commits per smallest concern.- each commit should pass the tests (to allow easy bisect)- each functionality/bugfix commit should contain the code, tests,  and doc.- prior minor commit with typographic or code cosmetic changes are  very welcome. These should be tagged in their commit summary with  ``!minor``.- the commit message should follow gitchangelog rules (check the git  log to get examples)- if the commit fixes an issue or finished the implementation of a  feature, please mention it in the summary.If you have some questions about guidelines which is not answered here,please check the current ``git log``, you might find previous commit thatwould show you how to deal with your issue.License=======Copyright (c) 2012-2017 Valentin Lab.Licensed under the `BSD License`_... _BSD License: http://raw.github.com/vaab/colour/master/LICENSEChangelog=========0.1.4 (2017-04-19)------------------Fix~~~- ``rgb2hsl`` would produce invalid hsl triplet when red, blue, green  component would be all very close to ``1.0``. (fixes #30) [Valentin  Lab]  Typically, saturation would shoot out of range 0.0..1.0. That could then  lead to exceptions being casts afterwards when trying to reconvert this  HSL triplet to RGB values.0.1.3 (2017-04-08)------------------Fix~~~- Unexpected behavior with ``!=`` operator. (fixes #26) [Valentin Lab]- Added mention of the ``hex_l`` property. (fixes #27) [Valentin Lab]0.1.2 (2015-09-15)------------------Fix~~~- Support for corner case 1-wide ``range_to`` color scale. (fixes #18)  [Valentin Lab]0.1.1 (2015-03-29)------------------Fix~~~- Avoid casting an exception when comparing to non-``Colour`` instances.  (fixes #14) [Riziq Sayegh]0.0.6 (2014-11-18)------------------New~~~- Provide all missing *2* function by combination with other existing  ones (fixes #13). [Valentin Lab]- Provide full access to any color name in HSL, RGB, HEX convenience  instances. [Valentin Lab]  Now you can call ``colour.HSL.cyan``, or ``colour.HEX.red`` for a direct encoding of  ``human`` colour labels to the 3 representations.0.0.5 (2013-09-16)------------------New~~~- Color names are case insensitive. [Chris Priest]  The color-name structure have their names capitalized. And color names  that are made of only one word will be displayed lowercased.Fix~~~- Now using W3C color recommandation. [Chris Priest]  Was using X11 color scheme before, which is slightly different from  W3C web color specifications.- Inconsistency in licence information (removed GPL mention). (fixes #8)  [Valentin Lab]- Removed ``gitchangelog`` from ``setup.py`` require list. (fixes #9)  [Valentin Lab]0.0.4 (2013-06-21)------------------New~~~- Added ``make_color_factory`` to customize some common color  attributes. [Valentin Lab]- Pick color to identify any python object (fixes #6) [Jonathan Ballet]- Equality support between colors, customizable if needed. (fixes #3)  [Valentin Lab]0.0.3 (2013-06-19)------------------New~~~- Colour is now compatible with python3. [Ryan Leckey]0.0.1 (2012-06-11)------------------- First import. [Valentin Lab]TODO====- ANSI 16-color and 256-color escape sequence generation- YUV, HSV, CMYK support</longdescription>
</pkgmetadata>