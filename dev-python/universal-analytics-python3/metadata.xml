<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Universal Analytics for Python[![Build Status](https://travis-ci.com/dmvass/universal-analytics-python3.svg?branch=master)](https://travis-ci.com/dmvass/universal-analytics-python3)[![image](https://img.shields.io/pypi/v/universal-analytics-python3.svg)](https://pypi.python.org/pypi/universal-analytics-python3)[![codecov](https://codecov.io/gh/dmvass/universal-analytics-python3/branch/master/graph/badge.svg)](https://codecov.io/gh/dmvass/universal-analytics-python3)[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/dmvass/universal-analytics-python3/blob/master/LICENSE)It's a fork of [universal-analytics-python](https://github.com/adswerve/universal-analytics-python)whith support for Python 3, batch requests, synchronous and asynchronous API calls.This library provides a Python interface to Google Analytics, supporting theUniversal Analytics Measurement Protocol, with an interface modeled (loosely)after Google's `analytics.js`.**NOTE** this project is reasonably feature-complete for most use-cases, coveringall relevant features of the Measurement Protocol, however we still consider it_beta_. Please feel free to file issues for feature requests.## InstallationThe easiest way to install universal-analytics is directly from PyPi using `pip`by running the following command:```bashpip install universal-analytics-python3```## UsageFor the most accurate data in your reports, Analytics Pros recommends establishinga distinct ID for each of your users, and integrating that ID on your front-end webtracking, as well as back-end tracking calls. This provides for a consistent, correctrepresentation of user engagement, without skewing overall visit metrics (and others).A simple example for synchronous usage:```pythonfrom universal_analytics import Tracker, HTTPRequest, HTTPBatchRequestwith HTTPRequest() as http:    tracker = Tracker(&quot;UA-XXXXX-Y&quot;, http, client_id=&quot;unique-id&quot;)    tracker.send(&quot;event&quot;, &quot;Subscription&quot;, &quot;billing&quot;)with HTTPBatchRequest() as http:    tracker = Tracker(&quot;UA-XXXXX-Y&quot;, http, client_id=&quot;unique-id&quot;)    tracker.send(&quot;event&quot;, &quot;Subscription&quot;, &quot;billing&quot;)```A simple example for asynchronous usage:```pythonimport asynciofrom universal_analytics import Tracker, AsyncHTTPRequest, AsyncHTTPBatchRequestasync def main():    async with AsyncHTTPRequest() as http:        tracker = Tracker(&quot;UA-XXXXX-Y&quot;, http, client_id=&quot;unique-id&quot;)        await tracker.send(&quot;event&quot;, &quot;Subscription&quot;, &quot;billing&quot;)    async with AsyncHTTPBatchRequest() as http:        tracker = Tracker(&quot;UA-XXXXX-Y&quot;, http, client_id=&quot;unique-id&quot;)        await tracker.send(&quot;event&quot;, &quot;Subscription&quot;, &quot;billing&quot;)loop = asyncio.get_event_loop()loop.run_until_complete(main())```This library support the following tracking types, with corresponding (optional) arguments:* pageview: [ page path ]* event: category, action, [ label [, value ] ]* social: network, action [, target ]* timing: category, variable, time [, label ]Additional tracking types supported with property dictionaries:* transaction* item* screenview* exceptionProperty dictionaries permit the same naming conventions given in the [analytics.js Field Reference](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference),with the addition of common spelling variations, abbreviations, and hyphenated names(rather than camel-case).Further, the property dictionaries support names as per the [Measurement Protocol Parameter Reference](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters),and properties/parameters can be passed as named arguments.Example:```python# As python named-argumentstracker.send(&quot;pageview&quot;, path=&quot;/test&quot;, title=&quot;Test page&quot;)# As property dictionarytracker.send(&quot;pageview&quot;, {&quot;path&quot;: &quot;/test&quot;, &quot;title&quot;: &quot;Test page&quot;})```Server-side experiments:```python# Set the experiment ID and variation IDtracker.set(&quot;exp&quot;, &quot;$experimentId.$variationId&quot;)# Send a pageview hit to Google Analyticstracker.send(&quot;pageview&quot;, path=&quot;/test&quot;, title=&quot;Test page&quot;)```## LicenseThis code is distributed under the terms of the MIT license.## ChangesA full changelog is maintained in the [CHANGELOG](https://github.com/dmvass/universal-analytics-python3/blob/master/CHANGELOG.md) file.## Contributing**universal-analytics-python3** is an open source project and contributions arewelcome! Check out the [Issues](https://github.com/dmvass/universal-analytics-python3/issues)page to see if your idea for a contribution has already been mentioned, and feelfree to raise an issue or submit a pull request.</longdescription>
</pkgmetadata>