<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Quicksect=========Description-----------Quicksect is a fast python / cython implementation of interval search based on the pure python version in `bx-python &lt;http://bx-python.trac.bx.psu.edu/&gt;`__ I pulled it out, optimized and converted to cython and James Taylor has incoporated it back into bx-pythonwith his improvements.I have brought this project back from the dead because I want a fast, simple, no-dependencies Intervaltree.(https://github.com/brentp/quicksect)Extended with removal operations and allows pretty print to display tree structure (By Jianlin)License is MIT.Installation------------    pip install quicksectxUse---To use extended quicksect(quicksectx):    &gt;&gt;&gt; from quicksectx import IntervalNode, IntervalTree, Interval    &gt;&gt;&gt; tree = IntervalTree()    &gt;&gt;&gt; tree.add(1, 3, 100)    &gt;&gt;&gt; tree.add(3, 7, 110)    &gt;&gt;&gt; tree.add(2, 5, 120)    &gt;&gt;&gt; tree.add(4, 6, 130)    &gt;&gt;&gt; print(tree.pretty_print())    Inv(1, 3, d=100)    r:  Inv(3, 7, d=110)    l:    Inv(2, 5, d=120)    r:    Inv(4, 6, d=130)    &gt;&gt;&gt; print(tree.find(Interval(2, 5)))    [Inv(1, 3, d=100), Inv(3, 7, d=110), Inv(2, 5, d=120), Inv(4, 6, d=130)]    &gt;&gt;&gt; tree.remove(Interval(2, 5))    &gt;&gt;&gt; print(tree.find(Interval(2, 5)))    [Inv(1, 3, d=100), Inv(3, 7, d=110), Inv(4, 6, d=130)]    To use traditional quicksect, you can still using the same syntax:    &gt;&gt;&gt; from quicksect import IntervalNode, Interval, IntervalTreeMost common use will be via IntervalTree:    &gt;&gt;&gt; tree = IntervalTree()    &gt;&gt;&gt; tree.add(23, 45)    &gt;&gt;&gt; tree.add(55, 66)    &gt;&gt;&gt; tree.search(46, 47)    []    &gt;&gt;&gt; tree.search(44, 56)    [Interval(55, 66), Interval(23, 45)]    &gt;&gt;&gt; tree.insert(Interval(88, 444, 'a'))    &gt;&gt;&gt; res = tree.find(Interval(99, 100, 'b'))    &gt;&gt;&gt; res    [Interval(88, 444)]    &gt;&gt;&gt; res[0].start, res[0].end, res[0].data    (88, 444, 'a')Thats pretty much everything you need to know about the tree.Test----$ python setup.py testLow-Level+++++++++In some cases, users may want to utilize the lower-level interface that accessesthe nodes of the tree:    &gt;&gt;&gt; inter = IntervalNode(Interval(22, 33))    &gt;&gt;&gt; inter = inter.insert(Interval(44, 55))    &gt;&gt;&gt; inter.intersect(24, 26)    [Interval(22, 33)]    &gt;&gt;&gt; inter.left(Interval(34, 35), n=1)    [Interval(22, 33)]    &gt;&gt;&gt; inter.right(Interval(34, 35), n=1)    [Interval(44, 55)]</longdescription>
</pkgmetadata>