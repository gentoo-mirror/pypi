<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ComboCurve client for Python## Authorization`combocurve_api` requires the API key and service account provided by ComboCurve, as shown in the example below:```pythonfrom combocurve_api_v1 import ServiceAccount, ComboCurveAuth# Use this to create your service account manuallyservice_account = ServiceAccount(    client_email='YOUR_CLIENT_EMAIL',    client_id='YOUR_CLIENT_ID',    private_key='YOUR_PRIVATE_KEY',    private_key_id='YOUR_PRIVATE_KEY_id')# Or use this to load it from a JSON file# service_account = ServiceAccount.from_file(&quot;PATH_TO_JSON_FILE&quot;)# Set your API keyapi_key = 'YOUR_API_KEY'combocurve_auth = ComboCurveAuth(service_account, api_key)# Get auth headersauth_headers = combocurve_auth.get_auth_headers()````combocurve_auth.get_auth_headers()` should be called before every request so that the token can berefreshed if it's about to expire. After getting the authentication headers, they can be used with any HTTP clientlibrary. Below is an example using the [Requests](https://docs.python-requests.org) library:```pythonimport requestsdata = [{    'wellName': 'well 1',    'dataSource': 'internal',    'chosenID': '1234'}, {    'wellName': 'well 2',    'dataSource': 'internal',    'chosenID': '4321'}]auth_headers = combocurve_auth.get_auth_headers()url = 'https://api.combocurve.com/v1/wells'response = requests.put(url, headers=auth_headers, json=data)print(response.json())```## Content-TypeThe ComboCurve API only accepts data serialized as JSON and the `Content-Type` header must be `application/json`. Luckily, [Requests](https://docs.python-requests.org) will take care of both things when the data is passed using the `json` parameter, as you saw in the example above. Using the `data` parameter would be less convenient but it works too:```pythonimport jsonresponse = requests.put(url,                        headers={                            **auth_headers, 'Content-Type': 'application/json'                        },                        data=json.dumps(data))```More information here: https://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests## PaginationWhen the number of records to be returned for a request is larger than the maximum number of records that can be retrieved in a single response, the requester will need to &quot;paginate&quot;, i.e., make multiple requests while there are more records to be returned.This package provides a helper to assist with that. It parses the response headers and returns a new URL for the next request, if another request is needed. See this example using the [Requests](https://docs.python-requests.org) library:```pythonfrom combocurve_api_v1.pagination import get_next_page_url# See Authorization sectionauth_headers = combocurve_auth.get_auth_headers()# Additional filters are allowed, it is preferred not specify skip if its value is 0url = 'https://api.combocurve.com/v1/wells?take=200'# First requesthas_more = True# Keep fetching while there are more records to be returnedwhile has_more:    response = requests.get(url, headers=headers)    # Process response    url = get_next_page_url(response.headers)    has_more = url is not None```</longdescription>
</pkgmetadata>