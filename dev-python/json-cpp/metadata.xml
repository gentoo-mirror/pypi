<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>#Json-CPP A better json library.## Installation```pip install json-cpp```## Create your first json object:After installing the package, try the following python script:```from json_cpp import JsonObjectmyobject = JsonObject(name=&quot;German Espinosa&quot;,age=41,weight=190.0)print(&quot;name:&quot;, myobject.name, type(myobject.name).__name__)print(&quot;age:&quot;, myobject.age, type(myobject.age).__name__)print(&quot;weight:&quot;, myobject.weight, type(myobject.weight).__name__)print(myobject)```output```name: German Espinosa strage: 41 intweight: 190.0 float{&quot;name&quot;:&quot;German Espinosa&quot;,&quot;age&quot;:41,&quot;weight&quot;:190.0}```### Loading json_data:To quickly load json data into objects, use the load command:```from json_cpp import JsonObjectmyobject = JsonObject.load(&quot;{\&quot;name\&quot;:\&quot;German Espinosa\&quot;,\&quot;age\&quot;:41,\&quot;weight\&quot;:190.0}&quot;)print(&quot;name:&quot;, myobject.name, type(myobject.name).__name__)print(&quot;age:&quot;, myobject.age, type(myobject.age).__name__)print(&quot;weight:&quot;, myobject.weight, type(myobject.weight).__name__)```output```name: German Espinosa strage: 41 intweight: 190.0 float```### Formatting outputs:You can easily format data, even in complex json hierarchical structures:```from json_cpp import JsonObjectmyobject = JsonObject.load(&quot;{\&quot;name\&quot;:\&quot;German Espinosa\&quot;,\&quot;age\&quot;:41,\&quot;weight\&quot;:190.0,\&quot;place_of_birth\&quot;:{\&quot;country\&quot;:\&quot;Argentina\&quot;,\&quot;city\&quot;:\&quot;Buenos Aires\&quot;}}&quot;)print(myobject.format(&quot;{name} was born in {place_of_birth.city}, {place_of_birth.country}&quot;))```output```German Espinosa was born in Buenos Aires, Argentina```### Working with pre-structured data:A powerful way to read and write json is to pre-define the structure of the data. This creates standarized data samples that are easire to be consumed by other tools.To pre-define structure of a json object, you need to create your own custom class extending the JsonObject: ```from json_cpp import JsonObjectclass MyJsonClass(JsonObject):    def __init__(self, name=&quot;&quot;, age=0, weight=0.0):        self.name = name        self.age = age        self.weight = weightmyobject = MyJsonClass('German Espinosa', 41, 190.0)json_string = str(myobject)print(json_string)```output```{&quot;name&quot;:&quot;German Espinosa&quot;,&quot;age&quot;:41,&quot;weight&quot;:190.0}```### Loading values into an existing object:You can also load values from a json string directly into an existing custom JsonObject:```from json_cpp import JsonObjectclass MyJsonClass(JsonObject):    def __init__(self, name=&quot;&quot;, age=0, weight=0.0):        self.name = name        self.age = age        self.weight = weightmyobject = MyJsonClass('German Espinosa', 41, 190.0)myobject.parse(&quot;{\&quot;name\&quot;:\&quot;Benjamin Franklin\&quot;,\&quot;age\&quot;:84,\&quot;weight\&quot;:195.5}&quot;)json_string = str(myobject)print(json_string)```output```{&quot;name&quot;:&quot;Benjamin Franklin&quot;,&quot;age&quot;:84,&quot;weight&quot;:195.5}```### Object to json conversion:All objects with type MyJsonClass will produce perfectly formed json when converted to string.If you need to retrieve the json string representing the object:```from json_cpp import JsonObjectclass MyJsonClass(JsonObject):    def __init__(self, name=&quot;&quot;, age=0, weight=0.0):        self.name = name        self.age = age        self.weight = weightmyobject = MyJsonClass('German Espinosa', 41, 190.0)json_string = str(myobject)print (json_string)```output```{&quot;name&quot;:&quot;German Espinosa&quot;,&quot;age&quot;:41,&quot;weight&quot;:190.0}```### Json to object conversion:You can create instances of your json objects from strings containing a correct json representation:```from json_cpp import JsonObjectclass MyJsonClass(JsonObject):    def __init__(self, name=&quot;&quot;, age=0, weight=0.0):        self.name = name     # string        self.age = age       # int        self.weight = weight # floatjson_string = &quot;{\&quot;name\&quot;:\&quot;German Espinosa\&quot;,\&quot;age\&quot;:41,\&quot;weight\&quot;:190.0}&quot;myobject = MyJsonClass.parse(json_string)print(&quot;name:&quot;, myobject.name, type(myobject.name).__name__)print(&quot;age:&quot;, myobject.age, type(myobject.age).__name__)print(&quot;weight:&quot;, myobject.weight, type(myobject.weight).__name__)```output```name: German Espinosa strage: 41 intweight: 190.0 float```note: all members are populated with the right values using the same data type declared in the default constructor of the class### Nested json structures:You can create complex structures with nested objects: ```from json_cpp import JsonObjectclass Person(JsonObject):    def __init__(self, name=&quot;&quot;, age=0):        self.name = name        self.age = ageclass Transaction(JsonObject):    def __init__(self, buyer=None, seller=None, product=&quot;&quot;, amount=0.0):        self.buyer = buyer if buyer else Person()        self.seller = seller if seller else Person()        self.product = product        self.amount = amountmytransaction = Transaction(Person(&quot;German Espinosa&quot;, 41), Person(&quot;Benjamin Franklin&quot;, 84), &quot;kite&quot;, 150.5)print (mytransaction)```output```{&quot;buyer&quot;:{&quot;name&quot;:&quot;German Espinosa&quot;,&quot;age&quot;:41},&quot;seller&quot;:{&quot;name&quot;:&quot;Benjamin Franklin&quot;,&quot;age&quot;:84},&quot;product&quot;:&quot;kite&quot;,&quot;amount&quot;:150.5}```### Json lists:You can load full lists with values from a json string to a JsonList:```from json_cpp import JsonObject, JsonListfibonacci = JsonList(list_type=int)json_string = &quot;[1,1,2,3,5,8,13,21]&quot;fibonacci.parse(json_string)```You can also load a list of json objects:```from json_cpp import JsonObject, JsonListclass Person(JsonObject):    def __init__(self, name=&quot;&quot;, surname=&quot;&quot;):        self.name = name        self.surname = surnameperson_list = JsonList(list_type=Person)json_string = &quot;[{\&quot;name\&quot;:\&quot;german\&quot;,\&quot;surname\&quot;:\&quot;espinosa\&quot;},{\&quot;name\&quot;:\&quot;benjamin\&quot;,\&quot;surname\&quot;:\&quot;franklin\&quot;}]&quot;person_list.parse(json_string)```Lists can also be used as members of other objects:```from json_cpp import JsonObject, JsonListclass Person(JsonObject):    def __init__(self):        self.name = &quot;&quot;        self.surname = &quot;&quot;        self.languages = JsonList(list_type=str)person = Person.parse(&quot;{\&quot;name\&quot;:\&quot;German\&quot;,\&quot;surname\&quot;:\&quot;Espinosa\&quot;, \&quot;languages\&quot;:[\&quot;english\&quot;,\&quot;spanish\&quot;,\&quot;portuguese\&quot;]}&quot;)print(person)```output```{&quot;name&quot;:&quot;German&quot;,&quot;surname&quot;:&quot;Espinosa&quot;,&quot;languages&quot;:[&quot;english&quot;,&quot;spanish&quot;,&quot;portuguese&quot;]}```</longdescription>
</pkgmetadata>