<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>behave-webdriver================behave-webdriver is a step library intended to allow users to easily write `selenium`_ webdriver tests with thebehave BDD testing framework.Inspired by the `webdriverio/cucumber-boilerplate`_ project.|docs| |status| |version| |pyversions| |coverage|For more details, see the `behave-webdriver documentation`_.. image:: https://raw.githubusercontent.com/spyoungtech/behave-webdriver/master/docs/_static/behave-webdriver.gifInstallation============Installation is easy via pip. The install will require ``behave`` and ``selenium``.::    pip install behave-webdriverUsing webdrivers----------------Selenium requires that you provide executables for the webdriver you want to use. Further, unless you specify the path tothe binary explicitly, selenium expects that this executable is in PATH. See these`driver installation notes`_ for more details.Usage=====Basic usage of this library with behave requires the following steps:1. write your feature file2. import the step implementations3. set the ``behave_driver`` attribute on the behave ``context`` in your ``environment.py`` file.4. run ``behave``Writing the feature file------------------------.. code-block:: gherkin    # my-minimal-project/features/myFeature.feature    Feature: Sample Snippets test    As a developer    I should be able to use given text snippets    Scenario: open URL        Given the page url is not &quot;http://webdriverjs.christian-bromann.com/&quot;        And   I open the url &quot;http://webdriverjs.christian-bromann.com/&quot;        Then  I expect that the url is &quot;http://webdriverjs.christian-bromann.com/&quot;        And   I expect that the url is not &quot;http://google.com&quot;    Scenario: click on link        Given the title is not &quot;two&quot;        And   I open the url &quot;http://webdriverjs.christian-bromann.com/&quot;        When  I click on the link &quot;two&quot;        Then  I expect that the title is &quot;two&quot;Importing the step implementations----------------------------------In order for your feature file steps to match our step implementations, behave needs to find them in your project.This is as simple as importing our step definitions into your own step implementation file... code-block:: python   # features/steps/webdriver_example.py   from behave_webdriver.steps import *For more information about `step implementations`_, see the behave tutorial.Set behave_driver in the environment------------------------------------Our step implementations specifically look at the behave context for a ``behave_driver`` attribute to use to run your tests.In order for that to work, you'll have to provide this attribute in your ``environment.py`` file... code-block:: python   # features/environment.py   import behave_webdriver   def before_all(context):       context.behave_driver = behave_webdriver.Chrome()   def after_all(context):       # cleanup after tests run       context.behave_driver.quit()The webdriver classes provided by behave-webdriver inherit from selenium's webdriver classes, so they will accept allsame positional and keyword arguments that selenium accepts.Some webdrivers, such as Chrome, provide special classmethods like ``Chrome.headless`` which instantiates ``Chrome`` withoptions to run headless. This is useful, for example in headless testing environments... code-block:: python   def before_all(context):       context.behave_driver = behave_webdriver.Chrome.headless()Using a fixture^^^^^^^^^^^^^^^*New in 0.1.1*You may also find it convenient to use a fixture to setup your driver as well. For example, to use our fixture with Firefox.. code-block:: python    from behave_webdriver.fixtures import fixture_browser    def before_all(context):        use_fixture(fixture_browser, context, webdriver='Firefox')This will also ensure that the browser is torn down at the corresponding `cleanup point`_... _cleanup point: http://behave.readthedocs.io/en/stable/fixtures.html#fixture-cleanup-pointsRun behave----------Then run the tests, just like any other behave test.. code-block:: bash    behaveYou should then see an output as follows::    Feature: Sample Snippets test # features/myFeature.feature:2      As a developer      I should be able to use given text snippets      Scenario: open URL                                                          # features/myFeature.feature:6        Given the page url is not &quot;http://webdriverjs.christian-bromann.com/&quot;     # ../../behave_webdriver/steps/given.py:136 0.012s        And I open the url &quot;http://webdriverjs.christian-bromann.com/&quot;            # ../../behave_webdriver/steps/given.py:10 1.414s        Then I expect that the url is &quot;http://webdriverjs.christian-bromann.com/&quot; # ../../behave_webdriver/steps/then.py:102 0.007s        And I expect that the url is not &quot;http://google.com&quot;                      # ../../behave_webdriver/steps/then.py:102 0.007s      Scenario: click on link                                          # features/myFeature.feature:13        Given the title is not &quot;two&quot;                                   # ../../behave_webdriver/steps/given.py:81 0.006s        And I open the url &quot;http://webdriverjs.christian-bromann.com/&quot; # ../../behave_webdriver/steps/given.py:10 0.224s        When I click on the link &quot;two&quot;                                 # ../../behave_webdriver/steps/when.py:21 0.622s        Then I expect that the title is &quot;two&quot;                          # ../../behave_webdriver/steps/then.py:10 0.006s    1 feature passed, 0 failed, 0 skipped    2 scenarios passed, 0 failed, 0 skipped    8 steps passed, 0 failed, 0 skipped, 0 undefined    Took 0m2.298sAdvanced usage; extending behave-webdriver==========================================behave-webdriver is designed with **you** in-mind. You are free to extend the behavior of our webdriver classes to suit yourunique needs. You can subclass our webdriver classes, use a custom selenium webdriver, write your own mixin, or usea mixin somebody else provides for selenium.Example: selenium-requests--------------------------`selenium-requests`_ is a preexisting project that adds functionality of the popular ``requests`` library to selenium.It is simple to use ``selenium-requests`` with behave-webdriver.The following, and other examples, are available in the repo ``examples`` directory and in the full documentation... code-block:: python   # examples/selenium-requests/features/environment.py   from selenium import webdriver # or any custom webdriver   from behave_webdriver.driver import BehaveDriverMixin   from seleniumrequests import RequestMixin # or your own mixin   class BehaveRequestDriver(BehaveDriverMixin, RequestMixin, webdriver.Chrome):       pass   def before_all(context):       context.behave_driver = BehaveRequestDriver().. code-block:: python   # examples/selenium-requests/features/steps/selenium_steps.py   from behave import *   from behave_webdriver.steps import *   from urllib.parse import urljoin   @given('I send a {method} request to the page &quot;{page}&quot;')   def send_request_page(context, method, page):       url = urljoin(context.base_url, page)       context.response = context.behave_driver.request(method, url)   @then('I expect the response text contains &quot;{text}&quot;')   def check_response_text_contains(context, text):       assert text in context.response.text.. code-block:: gherkin   # examples/selenium-requests/features/selenium-requests.feature   Feature: Using selenium-requests     As a developer     I should be able to extend behave-webdriver with selenium-requests     Scenario: use selenium-requests with behave-webdriver       # use a behave-webdriver step       Given the base url is &quot;http://127.0.0.1:8000&quot;       # use your own steps using selenium-requests features       Given I send a GET request to the page &quot;/&quot;       Then I expect the response text contains &quot;&lt;h1&gt;DEMO APP&lt;/h1&gt;&quot;Assuming you're in the repository root (and have the demo app running) just run like any other project with ``behave``Results ‚ú®^^^^^^^^^^.. code-block::    (behave-webdriver) $ behave examples/selenium-requests/features   DevTools listening on ws://127.0.0.1:12646/devtools/browser/1fe75b44-1c74-49fa-8e77-36c54d50cd24   Feature: Using selenium-requests # examples/selenium-requests/features/requests.feature:1     As a developer     I should be able to extend behave-webdriver with selenium-requests     Scenario: use selenium-requests with behave-webdriver          # examples/selenium-requests/features/requests.feature:6       Given the base url is &quot;http://127.0.0.1:8000&quot;                # behave_webdriver/steps/actions.py:162       Given I send a GET request to the page &quot;/&quot;                   # examples/selenium-requests/features/steps/selenium_steps.py:11       Then I expect the response text contains &quot;&lt;h1&gt;DEMO APP&lt;/h1&gt;&quot; # examples/selenium-requests/features/steps/selenium_steps.py:17   1 feature passed, 0 failed, 0 skipped   1 scenario passed, 0 failed, 0 skipped   3 steps passed, 0 failed, 0 skipped, 0 undefined   Took 0m1.385sGetting help ‚õë--------------If you have any unanswered questions or encounter any issues, please feel welcome to raise an issue. We recognize thattesters come in all different shapes, sizes, and backgrounds. We welcome any and all questions that may arise from usingthis library.Contributing------------Contributions are very much welcomed! If you have ideas or suggestions, please raise an issue or submit a PR.List of step definitions üìù===========================We support all the steps supported by webdriverio/cucumber-boilerplate.We also support some additional niceties and plan to add more step definitions.Given Steps üë∑--------------- ``I open the site &quot;([^&quot;]*)?&quot;``- ``I open the url &quot;([^&quot;]*)?&quot;``- ``I have a screen that is ([\d]+) by ([\d]+) pixels``- ``I have a screen that is ([\d]+) pixels (broad|tall)``- ``I have closed all but the first (window|tab)``- ``I pause for (\d+)*ms``- ``a (alertbox|confirmbox|prompt) is( not)* opened``- ``the base url is &quot;([^&quot;]*)?&quot;``- ``the checkbox &quot;([^&quot;]*)?&quot; is( not)* checked``- ``the cookie &quot;([^&quot;]*)?&quot; contains( not)* the value &quot;([^&quot;]*)?&quot;``- ``the cookie &quot;([^&quot;]*)?&quot; does( not)* exist``- ``the element &quot;([^&quot;]*)?&quot; contains( not)* the same text as element &quot;([^&quot;]*)?&quot;``- ``the element &quot;([^&quot;]*)?&quot; is( not)* ([\d]+)px (broad|tall)``- ``the element &quot;([^&quot;]*)?&quot; is( not)* empty``- ``the element &quot;([^&quot;]*)?&quot; is( not)* enabled``- ``the element &quot;([^&quot;]*)?&quot; is( not)* positioned at ([\d]+)px on the (x|y) axis``- ``the element &quot;([^&quot;]*)?&quot; is( not)* selected``- ``the element &quot;([^&quot;]*)?&quot; is( not)* visible``- ``the element &quot;([^&quot;]*)?&quot;( not)* contains any text``- ``the element &quot;([^&quot;]*)?&quot;( not)* contains the text &quot;([^&quot;]*)?&quot;``- ``the element &quot;([^&quot;]*)?&quot;( not)* matches the text &quot;([^&quot;]*)?&quot;``- ``the page url is( not)* &quot;([^&quot;]*)?&quot;``- ``the title is( not)* &quot;([^&quot;]*)?&quot;``- ``the( css)* attribute &quot;([^&quot;]*)?&quot; from element &quot;([^&quot;]*)?&quot; is( not)* &quot;([^&quot;]*)?&quot;``- ``there is (an|no) element &quot;([^&quot;]*)?&quot; on the page``When Steps ‚ñ∂Ô∏è-------------- ``I open the site &quot;([^&quot;]*)?&quot;``- ``I open the url &quot;([^&quot;]*)?&quot;``- ``I accept the (alertbox|confirmbox|prompt)``- ``I add &quot;{value}&quot; to the inputfield &quot;{element}&quot;``- ``I clear the inputfield &quot;{element}&quot;``- ``I click on the button &quot;{element}&quot;``- ``I click on the element &quot;{element}&quot;``- ``I click on the link &quot;{link_text}&quot;``- ``I close the last opened (tab|window)``- ``I delete the cookie &quot;{cookie_key}&quot;``- ``I dismiss the (alertbox|confirmbox|prompt)``- ``I doubleclick on the element &quot;{element}&quot;``- ``I drag element &quot;{from_element}&quot; to element &quot;{to_element}&quot;``- ``I enter &quot;([^&quot;]*)?&quot; into the (alertbox|confirmbox|prompt)``- ``I focus the last opened (tab|window)``- ``I move to element &quot;{element}&quot; with an offset of {x_offset:d},{y_offset:d}``- ``I move to element &quot;{element}&quot;``- ``I pause for {milliseconds:d}ms``- ``I press &quot;{key}&quot;``- ``I scroll to element &quot;{element}&quot;``- ``I select the option with the (text|value|name) &quot;([^&quot;]*)?&quot; for element &quot;([^&quot;]*)?&quot;``- ``I select the {nth} option for element &quot;{element}&quot;``- ``I set &quot;{value}&quot; to the inputfield &quot;{element}&quot;``- ``I set a cookie &quot;{cookie_key}&quot; with the content &quot;{value}&quot;``- ``I submit the form &quot;{element}&quot;``Then Steps ‚úîÔ∏è-------------- ``I expect the screen is ([\d]+) by ([\d]+) pixels``- ``I expect a new (window|tab) has( not)* been opened``- ``I expect that a (alertbox|confirmbox|prompt) is( not)* opened``- ``I expect that a (alertbox|confirmbox|prompt)( not)* contains the text &quot;([^&quot;]*)?&quot;``- ``I expect that checkbox &quot;([^&quot;]*)?&quot; is( not)* checked``- ``I expect that cookie &quot;([^&quot;]*)?&quot;( not)* contains &quot;([^&quot;]*)?&quot;``- ``I expect that cookie &quot;([^&quot;]*)?&quot;( not)* exists``- ``I expect that element &quot;([^&quot;]*)?&quot; (has|does not have) the class &quot;([^&quot;]*)?&quot;``- ``I expect that element &quot;([^&quot;]*)?&quot; becomes( not)* visible``- ``I expect that element &quot;([^&quot;]*)?&quot; does( not)* exist``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* ([\d]+)px (broad|tall)``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* empty``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* enabled``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* focused``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* positioned at ([\d]+)px on the (x|y) axis``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* selected``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* visible``- ``I expect that element &quot;([^&quot;]*)?&quot; is( not)* within the viewport``- ``I expect that element &quot;([^&quot;]*)?&quot;( not)* contains any text``- ``I expect that element &quot;([^&quot;]*)?&quot;( not)* contains the same text as element &quot;([^&quot;]*)?&quot;``- ``I expect that element &quot;([^&quot;]*)?&quot;( not)* contains the text &quot;([^&quot;]*)?&quot;``- ``I expect that element &quot;([^&quot;]*)?&quot;( not)* matches the text &quot;([^&quot;]*)?&quot;``- ``I expect that the path is( not)* &quot;([^&quot;]*)?&quot;``- ``I expect that the title is( not)* &quot;([^&quot;]*)?&quot;``- ``I expect that the url is( not)* &quot;([^&quot;]*)?&quot;``- ``I expect that the( css)* attribute &quot;([^&quot;]*)?&quot; from element &quot;([^&quot;]*)?&quot; is( not)* &quot;([^&quot;]*)?&quot;``- ``I expect the url &quot;([^&quot;]*)?&quot; is opened in a new (tab|window)``- ``I expect the url to( not)* contain &quot;([^&quot;]*)?&quot;``- ``I wait on element &quot;([^&quot;]*)?&quot;(?: for (\d+)ms)*(?: to( not)* (be checked|be enabled|be selected|be visible|contain a text|contain a value|exist))*``Acknowledgements ‚ù§Ô∏è===================Special thanks to the authors and contributors of the `webdriverio/cucumber-boilerplate`_ projectSpecial thanks to the authors and contributors of `behave`_.. _selenium-requests: https://github.com/cryzed/Selenium-Requests.. _environment controls: http://behave.readthedocs.io/en/stable/tutorial.html#environmental-controls.. _fixtures: http://behave.readthedocs.io/en/stable/fixtures.html.. _step implementations: http://behave.readthedocs.io/en/stable/tutorial.html#python-step-implementations.. _driver installation notes: http://selenium-python.readthedocs.io/installation.html#drivers.. _behave-webdriver documentation: http://behave-webdriver.readthedocs.io/en/stable/.. _selenium: https://github.com/SeleniumHQ/selenium.. _behave: https://github.com/behave/behave.. _webdriverio/cucumber-boilerplate: https://github.com/webdriverio/cucumber-boilerplate.. |docs| image:: https://readthedocs.org/projects/behave-webdriver/badge/?version=stable    :target: http://behave-webdriver.readthedocs.io/en/stable/.. |status| image:: https://travis-ci.org/spyoungtech/behave-webdriver.svg?branch=master    :target: https://travis-ci.org/spyoungtech/behave-webdriver.. |version| image:: https://img.shields.io/pypi/v/behave-webdriver.svg?colorB=blue    :target: https://pypi.org/project/behave-webdriver/.. |pyversions| image:: https://img.shields.io/pypi/pyversions/behave-webdriver.svg?    :target: https://pypi.org/project/behave-webdriver/.. |coverage| image:: https://coveralls.io/repos/github/spyoungtech/behave-webdriver/badge.svg    :target: https://coveralls.io/github/spyoungtech/behave-webdriver</longdescription>
</pkgmetadata>