<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># asyncio atexitAdds atexit functionality to asyncio:```pythonimport asyncio_atexitasync def close_db():    await db_connection.close()asyncio_atexit.register(close_db)```[atexit][] is part of the standard library,and gives you a way to register functions to call when the interpreter exits.[atexit]: https://docs.python.org/3/library/atexit.htmlasyncio doesn't have equivalent functionality to register functionswhen the _event loop_ exits:This package adds functionality that can be considered equivalent to `atexit.register`,but tied to the event loop lifecycle. It:1. accepts both coroutines and synchronous functions1. should be called from a running event loop1. calls registered cleanup functions when the event loop closes1. only works if the application running the event loop calls `close()`</longdescription>
</pkgmetadata>