<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyParsing -- A Python Parsing Module====================================|Build Status| |Coverage|Introduction============The pyparsing module is an alternative approach to creating andexecuting simple grammars, vs. the traditional lex/yacc approach, or theuse of regular expressions. The pyparsing module provides a library ofclasses that client code uses to construct the grammar directly inPython code.*[Since first writing this description of pyparsing in late 2003, thistechnique for developing parsers has become more widespread, under thename Parsing Expression Grammars - PEGs. See more information on PEGs*`here &lt;https://en.wikipedia.org/wiki/Parsing_expression_grammar&gt;`__*.]*Here is a program to parse ``&quot;Hello, World!&quot;`` (or any greeting of the form``&quot;salutation, addressee!&quot;``):.. code:: python    from pyparsing import Word, alphas    greet = Word(alphas) + &quot;,&quot; + Word(alphas) + &quot;!&quot;    hello = &quot;Hello, World!&quot;    print(hello, &quot;-&gt;&quot;, greet.parseString(hello))The program outputs the following::    Hello, World! -&gt; ['Hello', ',', 'World', '!']The Python representation of the grammar is quite readable, owing to theself-explanatory class names, and the use of '+', '|' and '^' operatordefinitions.The parsed results returned from ``parseString()`` is a collection of type``ParseResults``, which can be accessed as anested list, a dictionary, or an object with named attributes.The pyparsing module handles some of the problems that are typicallyvexing when writing text parsers:- extra or missing whitespace (the above program will also handle ``&quot;Hello,World!&quot;``, ``&quot;Hello , World !&quot;``, etc.)- quoted strings- embedded commentsThe examples directory includes a simple SQL parser, simple CORBA IDLparser, a config file parser, a chemical formula parser, and a four-function algebraic notation parser, among many others.Documentation=============There are many examples in the online docstrings of the classesand methods in pyparsing. You can find them compiled into `online docs &lt;https://pyparsing-docs.readthedocs.io/en/latest/&gt;`__. Additionaldocumentation resources and project info are listed in the online`GitHub wiki &lt;https://github.com/pyparsing/pyparsing/wiki&gt;`__. Anentire directory of examples can be found `here &lt;https://github.com/pyparsing/pyparsing/tree/master/examples&gt;`__.License=======MIT License. See header of the `pyparsing.py &lt;https://github.com/pyparsing/pyparsing/blob/master/pyparsing/__init__.py#L1-L23&gt;`__ file.History=======See `CHANGES &lt;https://github.com/pyparsing/pyparsing/blob/master/CHANGES&gt;`__ file... |Build Status| image:: https://github.com/pyparsing/pyparsing/actions/workflows/ci.yml/badge.svg   :target: https://github.com/pyparsing/pyparsing/actions/workflows/ci.yml.. |Coverage| image:: https://codecov.io/gh/pyparsing/pyparsing/branch/master/graph/badge.svg  :target: https://codecov.io/gh/pyparsing/pyparsing</longdescription>
</pkgmetadata>