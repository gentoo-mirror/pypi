<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Tiny framework for building *good* API client libraries thanks to`urllib3 &lt;https://github.com/shazow/urllib3/&gt;`_.Highlights==========- Threadsafely reuses connections with Keep-Alive (via urllib3).- Small and easy to understand codebase perfect for extending and building upon.- Built-in support for rate limiting and request throttling.- Functional examples for the  `Klout API &lt;https://github.com/shazow/apiclient/blob/master/examples/klout.py&gt;`_  and the  `Facebook OpenGraph API &lt;https://github.com/shazow/apiclient/blob/master/examples/facebook.py&gt;`_.Examples========How to make your own super-simple client API library::    &gt;&gt;&gt; from apiclient import APIClient    &gt;&gt;&gt; class AcmePublicAPI(APIClient):    ...    BASE_URL = 'https://localhost:1234/'    &gt;&gt;&gt; acme_api = AcmePublicAPI()    &gt;&gt;&gt; acme_api.call('/hello')    {'what': 'world'}    &gt;&gt;&gt; acme_api.call('/echo', params={&quot;ping&quot;: &quot;pong&quot;})    {'ping': 'pong'}How to add rate limiting to your client API library so that we don't exceed 10requests per minute::    &gt;&gt;&gt; from apiclient import RateLimiter    &gt;&gt;&gt; lock = RateLimiter(max_messages=10, every_seconds=60)    &gt;&gt;&gt; acme_api = AcmePublicAPI(rate_limit_lock=lock)    &gt;&gt;&gt; # Get the first 100 pages    &gt;&gt;&gt; for page in xrange(100):    ...     # Whenever our request rate exceeds the specifications of the API's    ...     # RateLimiter, the next request will block until the next request window    ...     r = acme_api.call('/stream', page=str(page))For more specific API examples, see the`examples/ &lt;https://github.com/shazow/apiclient/blob/master/examples/&gt;`_ directory.Extending=========To handle different calling conventions, ``apiclient`` can be extended throughsubclassing.For example, if an API requires that all arguments be JSON encoded, the``_compose_url`` method could be implemented like this::    &gt;&gt;&gt; class JSONArgsAPIClient(APIClient):    ...     def _compose_url(self, path, params=None):    ...         if params is not None:    ...             params = dict((key, json.dumps(val))    ...                            for (key, val) in params.iteritems())    ...         return APIClient._compose_url(self, path, params=params)Or if an API returns YAML instead of JSON, the ``_handle_response`` methodcould be overridden::    &gt;&gt;&gt; class YAMLResponseAPIClient(APIClient):    ...     def _handle_response(self, response):    ...         return yaml.load(response.data)TODO====- Tests.- More documentation.- More types of API handshakes, like OAuth and OAuth2.- More examples.Contributing============Any contribution is highly encouraged and desired. :)#. Fork on Github.#. Make the changes. Bonus points if changes include documentation and tests.#. Send a pull request.If you're unsure if it's a good idea,`open an Issue &lt;https://github.com/shazow/apiclient/issues&gt;`_ or`contact me &lt;https://github.com/inbox/new/shazow&gt;`_ to discuss your proposal.Extra juicy bonus points if you pick off some of the items in the **TODO** list.License=======`MIT &lt;https://github.com/shazow/apiclient/blob/master/LICENSE&gt;`_Changes=======1.0.3 (2016-05-15)------------------* Python 3 fixes.1.0.2 (2011-10-20)------------------* Fixed setup.py from failing upon not seeing README.rst when installing using  easy_install.1.0.1 (2011-10-10)------------------* Fixed setup.py package not including a MANIFEST.in1.0 (2011-10-03)----------------* Published decoupled code from SocialGrapple.</longdescription>
</pkgmetadata>