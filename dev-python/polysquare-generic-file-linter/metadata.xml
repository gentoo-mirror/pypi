<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Polysquare Generic File Linter==============================Status------\| Travis CI (Ubuntu) \| AppVeyor (Windows) \| Coverage \| PyPI \|Licence \|\|--------------------\|--------------------\|----------\|------\|---------\|\|`|Travis| &lt;http://travis-ci.org/polysquare/polysquare-generic-file-linter&gt;`_\|`|AppVeyor| &lt;https://ci.appveyor.com/project/smspillaz/polysquare-generic-file-linter&gt;`_\|`|Coveralls| &lt;http://coveralls.io/polysquare/polysquare-generic-file-linter&gt;`_\|`|PyPIVersion| &lt;https://pypi.python.org/pypi/polysquare-generic-file-linter&gt;`_`|PyPIPythons| &lt;https://pypi.python.org/pypi/polysquare-generic-file-linter&gt;`_\|`|License| &lt;http://github.com/polysquare/polysquare-generic-file-linter&gt;`_\|Checks each file passed in for compliance with polysquare styleguidelines.-  ``headerblock/filename``: Checks that the first line of the file has   a line which matches ``/path/to/file`` from the source root-  ``headerblock/desc_space``: Checks that the second line of the   headerblock is as empty comment-  ``headerblock/space_copyright``: Checks that the second last line of   the headerblock is an empty comment-  ``headerblock/copyright``: Checks that the last line of the   headerblock contains an appropriate short-form copyright notice-  ``file/newline_last_char``: Checks that the last line is just a-  ``file/spelling_error``: Checks that docstrings and comments do not   contain spelling errors or technical-like terms that do not appear in   the rest of the source file-  ``file/trailing_whitespace``: Checks that no line contains trailing   whitespaceMain Linter Usage-----------------::    usage: polysquare-generic-file-linter [-h] [--checks]                                          [--whitelist [LIST [LIST ...]]]                                          [--blacklist [LIST [LIST ...]]]                                          [--fix-what-you-can]                                          [--spellcheck-cache SPELLCHECK_CACHE]                                          [--log-technical-terms-to LOG]                                          [--stamp-file-path STAMP_FILE_PATH]                                          [--block-regexps [BLOCK [BLOCK ...]]]                                          [FILE [FILE ...]]    Lint for Polysquare style guide    positional arguments:      FILE                  read FILE    optional arguments:      -h, --help            show this help message and exit      --checks              list available checks      --whitelist [WHITELIST [WHITELIST ...]]                            list of checks that should only be run      --blacklist [BLACKLIST [BLACKLIST ...]]                            list of checks that should never be run      --fix-what-you-can    fix errors automatically      --spellcheck-cache SPELLCHECK_CACHE                            path to spell-checking cache file      --log-technical-terms-to LOG_TECHNICAL_TERMS_TO                            path to file to log technical terms to      --stamp-file-path STAMP_FILE_PATH                            path to directory to store cached results      --block-regexps [BLOCK_REGEXES [BLOCK_REGEXES ...]]                            Regular expressions to exclude from all checks.Spell-checking--------------Of some interest to others may be the spell-checking functionality. The``file/spelling_error`` check will scan any inline documentation(docstrings and comments) in your code for spelling errors and misusedtechnical terms. If you want a string, (because, for example, itcontains user-facing text) to be considered, just make it a python-styledocstring by using three quotes.Ordinary words~~~~~~~~~~~~~~The spell-checker will check any ordinary word, those being words withroman alphabetical characters and an apostrophe (') against a list ofwords in the American English dictionary as generated by`SCOWL &lt;http://app.aspell.net/create&gt;`_ at level 50 with abbreviationsand hacker-terms on. You can also specify your own domain specific wordsby providing a file called ``DICTIONARY`` in the project root directory.Words are checked against both lists on a case-insensitive basis.Technical words~~~~~~~~~~~~~~~Certain words, once separated by the check, will be treated as&quot;technical&quot; words as opposed to ordinary words. They will be checkedagainst the list of valid symbols detected from the surrounding sourcecode. For instance, the following code will trigger an error, becausethe term \_CustomTerm wasn't defined in the source file (CustomTerm was,however):::    class CustomTerm:        &quot;&quot;&quot;_CustomTerm is a certain type of class.&quot;&quot;&quot;Ignoring certain expressions~~~~~~~~~~~~~~~~~~~~~~~~~~~~Sometimes it does not make sense to run spellcheck or check certainexpressions against the list of detected technical words. This is oftenthe case where comments might contain inline markup or metadata whichlooks and behaves like code. The check can be told to ignore anythingmatching a user-specified regex in order to handle this case. Just passthe regex to ``--block-regexps``.Removal of punctuation~~~~~~~~~~~~~~~~~~~~~~The check will do its best to remove surrounding punctuation aroundwords such that only those words are checked against the word lists.However, punctuation must follow standard English grammar rules in orderfor words around them to be considered as ordinary words instead oftechnical words. For instance, a space must appear before an openingparenthesis. But a nested opening parenthesis can appear directly afteranother opening The golden rule is that if it looks like something whichcould be code, the surrounding words will be treated as code and not asordinary English words.Speeding up execution~~~~~~~~~~~~~~~~~~~~~`Whoosh &lt;https://bitbucket.org/mchaput/whoosh/src&gt;`_, the spellcheckingengine behind ``file/spelling_error`` needs to generate some datastructures in order to quickly find corrections for words. Generatingthese data structures with the long word list that is shipped with thistool by default can take a few seconds. Obviously, this would beundesirable if this tool is to be used multiple times or as part of ascript. You can pass ``--spellcheck-cache`` and a path to a directory tostore cache files to cache the result of these data structures betweeninvocations.Stand-alone spellchecking~~~~~~~~~~~~~~~~~~~~~~~~~If you just want to run spellcheck on the code comments and inlinedocumentation, then you can use the ``--whitelist`` option to only runthat check. Just pass it with ``--whitelist file/spelling_error``.If you want to run spellcheck on an entire file, a special tool called``spellcheck-linter`` is provided which also serves that purpose. Itwill check all ordinary looking words against the user-provided``DICTIONARY`` and the built-in American English dictionary. If``--technical-terms`` and a path to a filename containing technicalterms is provided, it will also check that technical looking terms existin this file.Spellcheck Linter Usage~~~~~~~~~~~~~~~~~~~~~~~::    usage: spellcheck-linter [-h] [--spellcheck-cache SPELLCHECK_CACHE]                             [--technical-terms TECHNICAL_TERMS]                             [--technical-terms-dependencies [[DEPENDENCY ...]]]                             [--stamp-file-path STAMP_FILE_PATH]                             [FILE [FILE ...]]    Find spelling errors    positional arguments:      FILE                  read FILE    optional arguments:      -h, --help            show this help message and exit      --spellcheck-cache SPELLCHECK_CACHE                            path to spell-checking cache file      --technical-terms TECHNICAL_TERMS                            path to file to source technical terms from      --stamp-file-path STAMP_FILE_PATH                            path to directory to store cached resultsTechnical terms^^^^^^^^^^^^^^^A technical terms file is just a list of symbols in a text file. As amatter of convenience, this can be automatically generated for you bypassing ``--log-technical-terms-to`` to``polysquare-generic-file-linter`` when checking the inlinedocumentation of those files. The second argument after this switchshould be the path to a filename where technical terms are to be stored.On each invocation, the union of the current file contents and thetechnical terms detected will be written back to the file.Disabling regions from being spell-checked^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^If you need to disable a region from being spell-checked, you can wrapit in triple-back-ticks, like so:::        content that is not spell-checkedEmbedding the checking API~~~~~~~~~~~~~~~~~~~~~~~~~~The exported API in ``polysquarelinter.spelling`` isn't by any meansstable right now, but it can be embedded into an application with someease.The ``Dictionary`` class encapsulates the Whoosh spellchecking API,word-lookup and caching functionality. The ``dictionary_sources``keyword argument indicates a list of files from which the words inpassed to the Dictionary were sourced from. If any of these files has anewer timestamp than the dictionary cache, then the dictionary cachewill be regenerated.The ``spellcheck_region`` function takes a list of lines and runsspellcheck and a check for invalid technical words on each word in thoselines. It will handle punctuation and other syntactical marketsappropriately in either case. Both the ``valid_words_dictionary`` and``technical_words_dictionary`` can be either None or an instance of``Dictionary``. The ``user_words`` argument is simply a set of wordsthat the user has indicated are always valid.The ``spellcheckable_and_shadow_contents`` splits a file intospellcheckable chunks (made out of ``_ChunkInfo``) and &quot;shadowcontents&quot;, which make up the rest of the file. The shadow contents areusually just the code around the inline documentation. The ``data``member of ``_ChunkInfo`` is a list of lines, effectively representingthe region which should be spellchecked. ``line_offset`` and``col_offset`` indicate the line and column offset into the maincontents. If you are reporting errors, any error in ``SpellcheckError``as returned by ``spellcheck_region`` will be returned relative to thecontents passed to it and not to the whole file. Use the offsets in``_ChunkInfo`` to turn these into absolute offsets into the file beingchecked itself.Caching~~~~~~~Internally, ``polysquare-generic-file-linter`` and ``spellcheck-linter``cache their results using the```jobstamps`` &lt;https://github.com/polysquare/jobstamps&gt;`_ library. Ifyou want to redirect where the cache files are written, you can pass``--stamp-file-path`` to either tool... |Travis| image:: https://img.shields.io/travis/polysquare/polysquare-generic-file-linter.svg.. |AppVeyor| image:: https://img.shields.io/appveyor/ci/smspillaz/polysquare-generic-file-linter.svg.. |Coveralls| image:: https://img.shields.io/coveralls/polysquare/polysquare-generic-file-linter.svg.. |PyPIVersion| image:: https://img.shields.io/pypi/v/polysquare-generic-file-linter.svg.. |PyPIPythons| image:: https://img.shields.io/pypi/pyversions/polysquare-generic-file-linter.svg.. |License| image:: https://img.shields.io/github/license/polysquare/polysquare-generic-file-linter.svg</longdescription>
</pkgmetadata>