<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># phxsocket### Synchronous phoenix websocket client using callbacks[Phoenix channels](https://hexdocs.pm/phoenix/channels.html)## Requirements`websockets`## UsageImport the package```pythonimport phxsocket```Create socket client```pythonsocket = phxsocket.Client(&quot;wss://target.url/channel/websocket&quot;, {&quot;options&quot;: &quot;something&quot;})```Connect and join a channel```pythonif socket.connect(): # blocking, raises exception on failure  channel = socket.channel(&quot;room:roomname&quot;, {&quot;more options&quot;: &quot;something else&quot;})  resp = channel.join() # also blocking, raises exception on failure```Alternatively```pythondef connect_to_channel(socket):  channel = socket.channel(&quot;room:roomname&quot;, {&quot;more options&quot;: &quot;something else&quot;})  resp = channel.join()  socket.on_open = connect_to_channelconnection = socket.connect(blocking=False)connection.wait() # blocking, raises exception on failure```Reconnect on disconnection```pythonsocket.on_close = lambda socket: socket.connect()```Subscribe to events```pythondef do_something(payload):  thing = payload[&quot;thing&quot;]channel.on(&quot;eventname&quot;, do_something)```Push data to a channel```pythonchannel.push(&quot;eventname&quot;, {&quot;some&quot;: &quot;data&quot;})```Push data and wait for a response```pythonmessage = channel.push(&quot;eventname&quot;, {&quot;some&quot;: &quot;data&quot;}, reply=True)response = message.wait_for_response() # blocking```Push data and react to the response with a callback```pythondef respond(payload):  print(payload)channel.push(&quot;eventname&quot;, {&quot;some&quot;: &quot;data&quot;}, respond)```Leave a channel```pythonchannel.leave()```Disconnect```pythonsocket.close()```</longdescription>
</pkgmetadata>