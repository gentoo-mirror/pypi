<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================Django-Argonauts================.. image:: https://api.travis-ci.org/fusionbox/django-argonauts.png   :alt: Building Status   :target: https://travis-ci.org/fusionbox/django-argonautsA lightweight collection of JSON helpers for Django. Includes a template filterfor safely outputting JSON, views that encode and decode JSON, and a helper forwriting simple REST views.A special JSON encoder is used to serialize QuerySets and objects with``to_json`` methods.------Filter------You can serialize an object in JSON using the ``|json`` filter. This is usefulto generate safe JavaScript:.. code:: html  {% load argonauts %}  &lt;script type=&quot;application/javascript&quot;&gt;    (function () {        var object_list = {{ object_list|json }};        // do something with object_list    })();  &lt;/script&gt;``|json`` is safe to use anywhere in XML or XHTML except in an attribute. It'simportant to use this tag rather than dumping the output of ``json.dumps`` intoHTML, because an attacker could output a closing tag and effect an XSS attack.For example, if we output ``json.dumps(&quot;&lt;/script&gt;&lt;script&gt;console.log('xss');//&quot;)`` in template like this:.. code:: html  &lt;script&gt;    var somedata = {{ somedata_as_json|safe }};  &lt;/script&gt;We get:.. code:: html  &lt;script&gt;    var somedata = &quot;&lt;/script&gt;  &lt;script&gt;    console.log('xss'); //&quot;;  &lt;/script&gt;This allows the attacker to inject their own JavaScript. The ``|json`` tagprevents this by encoding the closing ``&lt;/script&gt;`` tag with JSON's unicodeescapes. If we output ``{{ somedata|json }}``, we get:.. code:: html  &lt;script&gt;    var somedata = &quot;\u0060xscript\u0062x\u0060xscript\u0062xconsole.log('xss');//&quot;;  &lt;/script&gt;It also escapes ampersands in order to generate valid XML. For example, with the value``foo &amp; bar``:.. code:: xml  &lt;document&gt;&lt;json&gt;{{ value|json }}&lt;/json&gt;&lt;/document&gt;  &lt;!-- Results in valid XML:  &lt;document&gt;&lt;json&gt;&quot;foo \u0038x bar&quot;&lt;/json&gt;&lt;/document&gt;  --&gt;-----Views-----``JsonResponseMixin``=====================``JsonResponseMixin`` implements ``render_to_response`` method that serializesan object into a JSON response. Thus it is compatible with generic Djangoviews:.. code:: python    from django.db import models    from django.views.generic.detail import BaseDetailView    from argonauts.views import JsonResponseMixin    class Blog(models.Model):        title = models.CharField(max_length=255)        body = models.TextField()        def to_json(self):            return {                'title': self.title,                'body': self.body,            }    class BlogDetailView(JsonResponseMixin, BaseDetailView):        &quot;&quot;&quot;        Detail view returning object serialized in JSON        &quot;&quot;&quot;        model = Blog``JsonRequestMixin``====================``JsonRequestMixin`` gives access to the request data through ``data()`` method... code:: python    from django.views.generic.base import View    from argonauts.views import JsonRequestMixin:    from argonauts.http import JsonResponse    class EchoView(JsonRequestMixin, View):        def dispatch(self, *args, **kwargs):            return JsonResponse(self.data())``RestView``============``RestView`` is an abstract class. Subclasses should implement `auth()`, forhandling authentication, and at least one HTTP method.``RestView`` implements `OPTIONS` http method, and inherits from``JsonRequestMixin`` and ``JsonResponseMixin``... code:: python    from django.core.exceptions import PermissionDenied    from argonauts.views import RestView    from .utils import get_action    class CrazyRestView(RestView):        def auth(self, *args, **kwargs):            if not self.request.user.is_superuser:                raise PermissionDenied        def post(self, *args, **kwargs):            action = kwargs.pop('action')            action_func = get_action(action)            return self.render_to_response(action_func(self.data()))Changelog=========1.2.0 (2016-09-20)------------------- Add support for requests without a Content-Type header to JsonTestClient- Remove support for old versions of Django (&lt;= 1.7)1.1.4 (2015-07-29)------------------- Tests mocked http requests don't always have charset1.1.3 (2015-05-27)------------------- Fixed package (include the CHANGELOG in ``MANIFEST.in``)1.1.2 (2015-05-27)------------------- Added ``JsonTestCase`` and ``JsonTestMixin``1.1.1 (2015-04-20)------------------- Fixed package1.1.0 (2015-04-20)------------------Cleanup:- Dropped support for Django 1.3- Added support for Python 3- Updated documentation- Switched testing to py.test- Switched to zest.releaser1.0.1 (2013-10-06)------------------- Fixed tests1.0.0 (2013-07-05)------------------Initial release:- Extracted from django-fusionbox- Safe JSON Serializer- Safe JSON template filter- JSON Views</longdescription>
</pkgmetadata>