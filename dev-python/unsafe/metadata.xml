<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![PyPI](https://img.shields.io/pypi/v/unsafe)![Total PyPi Downloads](https://static.pepy.tech/personalized-badge/unsafe?period=total&amp;units=none&amp;left_color=grey&amp;right_color=blue&amp;left_text=Total-PyPi-Downloads)![Monthly PyPi Downloads](https://static.pepy.tech/personalized-badge/unsafe?period=month&amp;units=none&amp;left_color=grey&amp;right_color=blue&amp;left_text=Monthly-PyPi-Downloads)![Weekly PyPi Downloads](https://static.pepy.tech/personalized-badge/unsafe?period=week&amp;units=none&amp;left_color=grey&amp;right_color=blue&amp;left_text=Weekly-PyPi-Downloads)![GitHub repo size](https://img.shields.io/github/repo-size/ahur4/unsafe?label=GitHub-Repo-Size)![PyPi Size](https://img.shields.io/badge/PyPi%20Size-600kb-blue)![PyPI - License](https://img.shields.io/pypi/l/unsafe)[![Telegram-Channel](https://img.shields.io/badge/Telegram--Channel-ExploitPriv8-blue)](https://t.me/ExploitPriv8)# Unsafe (Advanced Penetration Testing Module)An Advanced Module for Penetration Testing.Using This Module, You Can Implement Brute Force Operations and Identification and Anonymity.This Module is Always Being Developed and There is No Need to Worry About it Becoming Unavailable.- Author : Ahur4  - ùóò ùó´ ùó£ ùóü ùó¢ ùóú ùóß : [Telegram Channel](https://t.me/ExploitPriv8)- Maintainer : MesutFD# Features- [x] [Encryption &amp; Decryption](https://github.com/ahur4/unsafe#usage)- [x] [Proxy](https://github.com/ahur4/unsafe#proxy)- [x] [BruteForce](https://github.com/ahur4/unsafe#bruteforce)- [x] [Forensic](https://github.com/ahur4/unsafe#forensic)- [x] [Wordpress](https://github.com/ahur4/unsafe#wordpress)- [x] [VulnerabilityScanner](https://github.com/ahur4/unsafe#vulnerabilityscanner)- [x] [Crawling.](https://github.com/ahur4/unsafe#crawling)- [x] [Network.](https://github.com/ahur4/unsafe#network)# Usage- #### Encryption &amp; Decryption  - **Available Methods:**    ( md5 | sha1 | sha224 | sha256 | sha384 | sha512 | sha3-224 | sha3-256 \    sha3-384 | sha3-512 | shake128 | shake256 | base16 | base32 | base64 \    base85 | ascii85 | caesar )  - **Encryption Usage** :    ```python        from unsafe import Unsafe        unsafe = Unsafe()            name = &quot;Ahur4&quot;            md5_name = unsafe.text_encrypt(name) # Default hash_method is &quot;md5&quot;        print(md5_name) # Output : 'ada3e80e34da70c99c1acff7f492993c'            base64_name = unsafe.text_encrypt(name, hash_method=&quot;base64&quot;)        print(base64_name) # Output : b'QWh1cjQ='            caesar_name = unsafe.text_encrypt(name, hash_method=&quot;caesar&quot;, count=5)        print(caesar_name) # Output : 'Fmzw4'            shake128_name = unsafe.text_encrypt(name, encode='UTF-8', hash_method=&quot;shake128&quot;, count=15)        print(shake128_name) # Output : ''c8a3ab8ca74720d227550f4f76b71f''        ```  - **Decryption Usage** :    ```python        from unsafe import Unsafe        unsafe = Unsafe()        hash = &quot;ada3e80e34da70c99c1acff7f492993c&quot; #Md5 - Value : Ahur4        name = unsafe.text_decrypt(hash=hash, word=&quot;Ahur4&quot;) #Default hash_method is &quot;md5&quot;        print(name) #Output : True        # When Do Not Have any Word or Wordlist Default Wordlist is John The Ripper Wordlist        name = unsafe.text_decrypt(hash=hash, hash_method=&quot;sha1&quot;)        print(name) #Output : '' ,Cause Not Found Result.    ```---- #### Proxy  - **Available Protocols** :    (http | socks4 | socks5)  - **Proxy Wrapper Usage**    ```python        from unsafe import Unsafe        unsafe = Unsafe()        proxies = unsafe.proxy_wrapper(protocol=&quot;http&quot;, max_ping=200)        print(proxies) # Output : {'ip':'port', 'ip':'port', ...}    ```  - **Proxy Checker Usage**    ```python        isActive = unsafe.proxy_checker(proxy_host='127.0.0.1', proxy_port='80', protocol='http', timeout=10)        print(isActive) # Output : True|False    ```---- #### BruteForce  - **AdminFinder Usage**    ```python        from unsafe import Unsafe        unsafe = Unsafe()        admin_panels = unsafe.admin_finder(domain='example.com',                                           workers=5, # Threads                                           timeout=10,                                           ext='php', # Site type                                           user_agent=&quot;AmigaVoyager/2.95 (compatible; MC680x0; AmigaOS; SV1)&quot;,                                           proxy=&quot;http://127.0.0.1:80&quot;                                        )        print(admin_panels) # Output : ['http://example.com/wp-login.php']    ```  - **FileManager Finder Usage**    ```python        filemanagers = unsafe.filemanager_finder(domain='example.com',                                           workers=5, #Threads                                           timeout=10,                                           user_agent=&quot;AmigaVoyager/2.95 (compatible; MC680x0; AmigaOS; SV1)&quot;,                                           proxy=&quot;http://127.0.0.1:80&quot;                                        )        print(filemanagers) # Output : ['https://example.com/filemanager/', 'https://example.com/filemanager/index.php']    ```  - **CloudFlare Bypassing Usage**    ```python        realip = unsafe.cloudflare_bypasser(domain='google.com',                                           workers=5, #Threads                                        )        print(realip) # Output : {'ns4.google.com': '216.239.38.10', 'search.google.com': '142.251.39.14', ....}    ```  - **SubDomain Finder**    ```python        result = unsafe.subdomain_scanner(            domain=&quot;google.com&quot;,            workers=5,            subdomains=[&quot;ww1&quot;, &quot;forum&quot;, &quot;download&quot;, &quot;product&quot;, &quot;search&quot;, &quot;cdn&quot;, &quot;ns1&quot;], #Also this part have a default subdomains list.            timeout=5,            proxy=&quot;http://127.0.0.1:80&quot;            )        print(result) # Output : [&quot;ww1.google.com&quot;, ...]    ```---- #### Forensic.  - **Delete Image Metadata Usage**    ```python        from unsafe import Unsafe        unsafe = Unsafe()        isDeleted = unsafe.delete_exif_img(path='/path/of/file.jpg')        print(isDeleted) # Output : True|False    ```  - **Edit Image Metadata Usage**    ```python        isEdited = unsafe.edit_exif_img(path='/path/of/file.jpg',key='model', value='unsafe')        print(isEdited) # Output : True|False    ```  - **Extract Image Metadata Usage**    ```python        Exifed = unsafe.extract_exif_img(path='/path/of/file.jpg')        print(Exifed) # Output : {&quot;make&quot;: &quot;huawei&quot;, &quot;model&quot;: &quot;G-750&quot;, ...}    ```  - **Delete PDF Metadata Usage**    ```python        result = unsafe.remove_pdf_metadata(filename=&quot;path/of/file.pdf&quot;)        print(result) # Output : 'path/of/output.pdf'    ```  - **Edit PDF Metadata Usage**    ```python        result = unsafe.edit_pdf_metadata(filename=&quot;path/of/file.pdf&quot;, metadata={&quot;unsafe&quot;:&quot;module&quot;})        print(result) # Output : 'path/of/output.pdf'    ```  - **Extract PDF Metadata Usage**    ```python        result = unsafe.get_pdf_metadata(filename=&quot;path/of/file.pdf&quot;)        print(result) # Output : {&quot;/data&quot;:&quot;values&quot;,...}    ```  - **Delete Audio Metadata Usage**    ```python        result = unsafe.remove_audio_metadata(filename=&quot;path/of/file.mp3&quot;)        print(result) # Output : 'path/of/output.mp3'    ```  - **Edit Audio Metadata Usage**    ```python        result = unsafe.edit_audio_metadata(filename=&quot;path/of/file.mp3&quot;, metadata={&quot;artist&quot;: &quot;Ahur4&quot;})        print(result) # Output : 'path/of/output.mp3'    ```  - **Extract Audio Metadata Usage**    ```python        result = unsafe.get_audio_metadata(filename=&quot;path/of/file.mp3&quot;)        print(result) # Output : # Output : {&quot;/data&quot;:&quot;values&quot;,...}    ```---- #### Wordpress.  - **Extract Admin Users**    ```python        from unsafe import Unsafe        unsafe = Unsafe()        site_users = unsafe.wp_get_users(domain=&quot;wordpress.org&quot;)        print(site_users) # Output : ['admin', 'administrator']    ```  - **Plugin Scanner**    ```python        site_users = unsafe.wp_plugin_scanner(domain=&quot;wordpress.org&quot;,                                              timeout=10,                                              workers=5,                                              proxy=&quot;http://127.0.0.1:80&quot;                                            )        print(site_users) # Output : ['http://wordpress.org/wp-content/plugins/wordpress-seo/',....]    ```---- #### VulnerabilityScanner  - **Xss Vulnerability Scanner**    ```python        from unsafe import Unsafe        unsafe = Unsafe()        result = unsafe.xss_scanner(url=&quot;https://xsslabs.com/xss-labs-1.php&quot;, js_script=&quot;&lt;Script&gt;alert('hi')&lt;/scripT&gt;&quot;)        print(result) # Output : {&quot;is_vulnerable&quot;: is_vulnerable, &quot;form_detail&quot;: form_details}    ```  - **SqlInjection Vulnerability Scanner**    ```python        result = unsafe.sql_injection_scanner(url=&quot;https://example.com/news.php?id=475433&quot;)        print(result) # Output : [&quot;https://example.com/news.php?id=245&quot;, &quot;......&quot;, ..]    ```---- #### Crawling.  - **Crawling a single Page and Extract Usernames, Phones, Emails and ...**    ```python        from unsafe import Unsafe        unsafe = Unsafe()        result = unsafe.crawl_page(url=&quot;https://example.com/contact.php&quot;, timeout=5, proxy=&quot;http://127.0.0.1:80&quot;)        print(result) #Output : {&quot;links&quot;: [...], &quot;phones&quot;: [...], ...}    ```  - **Search in Three Search Engines: Google, Bing and Ask**    ```python        # Search a Username in Insatgram        result = unsafe.browser_search(query='&quot;username&quot; site:insatgram.com', timeout=10, proxy=&quot;http://127.0.0.1:80&quot;)        print(result) # Output : ['https://instagram.com/username', ....]    ```  - **Scan Entered Page and Detect Xss Vulnerability.**    ```python        result = unsafe.xss_scanner(url=&quot;https://xsslabs.com/xss-labs-1.php&quot;, js_script=&quot;&lt;Script&gt;alert('hi')&lt;/scripT&gt;&quot;)        print(result) # Output : {'is_vulnerable': True, 'form_detail': {'action': '#', 'method': 'get', 'inputs': [{'type': 'text', 'name': 'name', 'value': &quot;&lt;Script&gt;alert('hi')&lt;/scripT&gt;&quot;}]}}    ```---- #### Network  - **Scan Open Ports.**    ```python        from unsafe import Unsafe        unsafe = Unsafe()        result = unsafe.port_scanner(host=&quot;127.0.0.1&quot;, ports=[80, 53, 443, 127])        print(result) # Output : [80, 443]    ```  - **Mac Address Lookup(find owner of device company)**    ```python        result = unsafe.mac_address_lookup(mac=&quot;00:00:5e:00:53:af&quot;)        print(result) #Output : &quot;U.S. Department of Defense (IANA)&quot;    ```# New Features : Coming Soon...</longdescription>
</pkgmetadata>