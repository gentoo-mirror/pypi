<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Teapy[![Build](https://github.com/teamon9161/teapy/workflows/Build/badge.svg)](https://github.com/teamon9161/teapy/actions)[![PyPI](https://img.shields.io/pypi/v/teapy)](https://pypi.org/project/teapy)[![codecov](https://codecov.io/gh/teamon9161/teapy/branch/master/graph/badge.svg?token=WK0F7P1VC6)](https://codecov.io/gh/teamon9161/teapy)## Blazingly fast datadict library in PythonTeapy is a high-performance data dictionary library implemented in Rust, designed for blazingly fast operations. It offers the following features:* Lazy evaluation* Handling of NaN values* Multi-threaded processing* Support for any dimensionality## SetupInstall the latest teapy version with:`pip install teapy`## Basic Usage### Creating Expressions```Python# Expressions can be created in various waysimport numpy as npimport pandas as pdimport polars as plimport teapy as tpe1 = tp.Expr([1, 2, 3])  # Create from a liste2 = tp.Expr((1, 2, 3))  # Create from a tuplee3 = tp.Expr(np.array([1, 2, 3]), 'e3')  # Create from a numpy.ndarray, name is e3e4 = tp.Expr(pd.Series([1, 2, 3]))  # Create from a pandas.Seriese5 = tp.Expr(pl.Series([1, 2, 3]))  # Create from a polars.Series```### Creating DataDicts```Python# DataDicts can be created in different waysdd1 = tp.DataDict({'a': [1, 2], 'b': [2, 3]}, c=[3, 4])  # Create from a dictionarydd2 = tp.DataDict([tp.Expr([1, 2], 'a'), tp.Expr([2, 3], 'b')])  # Create from a list of expressionsdd3 = tp.DataDict(a=[1, 2], b=[2, 3], c=np.array([3, 6, 2]))  # Create by specifying key-value pairs```### Evaluating Expressions and DataDicts```Python# Evaluating Expressionse = tp.Expr([1, 2, 3]).mean()e.eval()  # Execute the expressione.view  # View the memory of the arraye.eview()  # Execute the expression and view the memory of the arraye.value()  # Execute the expression and copy the memory of the array to a new numpy.ndarray# Evaluating DataDictsdd = tp.DataDict({'a': [1, 2]*10, 'b': [2, 3]*10}, c=[3, 4])dd = dd.select([    dd['a'].ts_mean(3).alias('d'),     dd['b'].ts_std(4).alias('e')])dd.eval(['d', 'e'])  # Evaluate specific keys in paralleldd.eval()  # Or evaluate all expressions in parallelprint(dd['d'])```</longdescription>
</pkgmetadata>