<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CRAFT: Character-Region Awareness For Text detection&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pepy.tech/project/craft-text-detector&quot;&gt;&lt;img src=&quot;https://pepy.tech/badge/craft-text-detector&quot; alt=&quot;downloads&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/craft-text-detector&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/craft-text-detector&quot; alt=&quot;downloads&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/fcakyon&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/fcakyon?color=blue&amp;logo=twitter&amp;style=flat&quot; alt=&quot;fcakyon twitter&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/fcakyon/craft-text-detector/actions&quot;&gt;&lt;img alt=&quot;Build status&quot; src=&quot;https://github.com/fcakyon/craft-text-detector/actions/workflows/ci.yml/badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://badge.fury.io/py/craft-text-detector&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/craft-text-detector.svg&quot; alt=&quot;PyPI version&quot; height=&quot;20&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/fcakyon/craft-text-detector/blob/main/LICENSE&quot;&gt;&lt;img alt=&quot;License: MIT&quot; src=&quot;https://img.shields.io/pypi/l/craft-text-detector&quot;&gt;&lt;/a&gt;&lt;/p&gt;Packaged, Pytorch-based, easy to use, cross-platform version of the CRAFT text detector | [Paper](https://arxiv.org/abs/1904.01941) |## OverviewPyTorch implementation for CRAFT text detector that effectively detect text area by exploring each character region and affinity between characters. The bounding box of texts are obtained by simply finding minimum bounding rectangles on binary map after thresholding character region and affinity scores.&lt;img width=&quot;1000&quot; alt=&quot;teaser&quot; src=&quot;./figures/craft_example.gif&quot;&gt;## Getting started### Installation- Install using pip:```consolepip install craft-text-detector```### Basic Usage```python# import Craft classfrom craft_text_detector import Craft# set image path and export folder directoryimage = 'figures/idcard.png' # can be filepath, PIL image or numpy arrayoutput_dir = 'outputs/'# create a craft instancecraft = Craft(output_dir=output_dir, crop_type=&quot;poly&quot;, cuda=False)# apply craft text detection and export detected regions to output directoryprediction_result = craft.detect_text(image)# unload models from ram/gpucraft.unload_craftnet_model()craft.unload_refinenet_model()```### Advanced Usage```python# import craft functionsfrom craft_text_detector import (    read_image,    load_craftnet_model,    load_refinenet_model,    get_prediction,    export_detected_regions,    export_extra_results,    empty_cuda_cache)# set image path and export folder directoryimage = 'figures/idcard.png' # can be filepath, PIL image or numpy arrayoutput_dir = 'outputs/'# read imageimage = read_image(image)# load modelsrefine_net = load_refinenet_model(cuda=True)craft_net = load_craftnet_model(cuda=True)# perform predictionprediction_result = get_prediction(    image=image,    craft_net=craft_net,    refine_net=refine_net,    text_threshold=0.7,    link_threshold=0.4,    low_text=0.4,    cuda=True,    long_size=1280)# export detected text regionsexported_file_paths = export_detected_regions(    image=image,    regions=prediction_result[&quot;boxes&quot;],    output_dir=output_dir,    rectify=True)# export heatmap, detection points, box visualizationexport_extra_results(    image=image,    regions=prediction_result[&quot;boxes&quot;],    heatmaps=prediction_result[&quot;heatmaps&quot;],    output_dir=output_dir)# unload models from gpuempty_cuda_cache()```</longdescription>
</pkgmetadata>