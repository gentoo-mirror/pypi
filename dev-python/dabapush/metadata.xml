<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dabapushDatabase pusher for social media data (Twitter for the beginning) â€“ pre-alpha version## Using dabapush`dabapush` is a tool to read longer running data collections and write them to another file format or persist them into a database. It is designed to run periodically, e.g. controlled by chron, thus, for convenience ot use project-based configurations which contain all required information on what to read where and what to do with it.A **project** may have one or more **jobs**, each job consists of a reader and a writer configuration, e.g. read JSON-files from the Twitter API that we stored in folder `/home/user/fancy-project/twitter/` and write the flattened and compiled data set in to `/some/where/else` as CSV files.### First stepsIn order to run a first `dabapush`-job we'll need to create a project configuration. This is done by calling:```bashdabapush create```By default this walks you through the configuration process in a step-by-step manner. Alternatively, you could call:```bashdabapush create --non-interactive```This will create an empty configuration, you'll have to fill out the required information by e.g. calling:```bashdabapush reader add NDJSON defaultdabapush writer add CSV default```Whereas `reader add`/`writer add` is the verb, `NDJSON` or `CSV` is the plugin to add and `default` is the pipeline name.Of course you can edit the configration after creation in your favorite editor, but **BEWARE NOT TO TEMPER WITH THE YAMl-TAGS!!!**.To run the newly configured job, please call:```bashdabapush run default```## Command Reference### Invocation Pattern```bashdabapush &lt;command&gt; &lt;subcommand?&gt; &lt;options&gt;```### Commands`create` -- creates a dabapush project (invokes interactive prompt)Options:`--non-interactive`, create an empty configuration and exit`--interactive`, *this is the default behavior*: prompts for user input on- project name,- project authors name,- project author email address(es) for notifications- manually configure targets or run discover?----`run all` -- collect all known items and execute targets/destinations`run &lt;target&gt;` -- run a single writer and/or named targetOptions:`--force-rerun, -r`: forces all data  to be read, ignores already logged data----`reader` -- interact with readers`reader configure &lt;name&gt;` -- configure the reader for one or more subproject(s); Reader configuration is inherited from global to local level; throws if configuration is incomplete and defaults are missing`reader list`: returns a table of all configured readers, with `&lt;path&gt; &lt;target&gt; &lt;class&gt; &lt;id&gt;``reader list_all`: returns a table of all registered reader plugins`reader add &lt;type&gt; &lt;name&gt;`: add a reader to the project configurationOptions:`--input-directory &lt;path&gt;`: directory to be read`--pattern &lt;pattern&gt;`: pattern for matching file names against.`remove &lt;name&gt;`: remove a reader from the project configuration.`register &lt;path&gt;`: not there yet----`discover` -- discover (possible) targets in project directory and configure them automagically -- yeah, you dream of that, don't you?----`writer` -- interact with writers`writer add &lt;type&gt; &lt;name&gt;`:`writer remove &lt;name&gt;`: removes the writer for the given name`writer list` -- returns table of all writers, with `&lt;path&gt; &lt;subproject-name&gt; &lt;class&gt; &lt;id&gt;``writer list_all`: returns a table of all registered writer plugins`writer configure &lt;name&gt;` or `writer configure all`Options:`--output-dir, -o &lt;path&gt;`: default for all targets: `&lt;project-dir&gt;/output/&lt;target-name&gt;``--output-pattern, -p &lt;pattern&gt;`: pattern used for file name creation e.g. 'YYYY-MM-dd', file extension is added by the writer and cannot be overwritten`--roll-over, -r ``&lt;file-size&gt;`:`--roll-over, -r` `&lt;lines&gt;`:`--roll-over -r &lt;None&gt;`: should be the output chunked? Give either a file-size or a number of lines for roll-over or None to disable chunking## Extending dabapush and developers guideDabapush's reader and writer plug-ins are registered via entry point: `dabapush_readers` for readers and `dabapush_writers` for writers. Both expect `Configuration`-subclass.### Developer Installation1. Install [poetry](https://python-poetry.org/docs/#installation)2. Clone repository3. In the cloned repository's root directory run `poetry install`4. Run `poetry shell` to start development virtualenv5. Run `dabapush create` to create your first project.6. Run `pytest` to run all tests</longdescription>
</pkgmetadata>