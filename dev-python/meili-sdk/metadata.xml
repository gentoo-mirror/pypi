<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Meili FMS SDK libraryOfficial Meili FMS SDK library.## Status:[![pipeline status](https://gitlab.com/meilirobots/dev/meili-sdk/badges/master/pipeline.svg)](https://gitlab.com/meilirobots/dev/meili-sdk/-/commits/release)[![coverage report](https://gitlab.com/meilirobots/dev/meili-sdk/badges/master/coverage.svg)](https://gitlab.com/meilirobots/dev/meili-sdk/-/commits/release)## Installation```shellpip install meili-sdk# or with MQTT supportpip install &quot;meili-sdk[MQTT]&quot;```## IntroThis library aims to make it easier for 3rd party developers to integrate withMeili FMS via API or Websockets.## PrerequisitesTo start using the SDK you will need either one of the API Tokens or Fleet Tokento connect via REST or WS.## Getting started### Using different sitesBy default, all the traffic goes to `app.meilirobots.com`, but you can override it in one of these ways:- Pass `override_host` kwarg to `get_client` or client classes- Set `MEILI_HOST` env variable- Set `site` in `~/.meili/cfg.yaml`### RESTfulWe provide a magic method to evaluate the token and return the correct typeof API client for you. See the snipped below on how to use it:```pythonfrom meili_sdk.clients import get_clientclient = get_client(&quot;my-token&quot;)```If token will not be able to evaluate it will return a default `APITokenClient`.#### Accessing resourcesEach API client provides 4 methods that will return resource access:```.get_user_resources().get_team_resources().get_organization_resources().get_vehicle_resources()```Note that not all resources are accessible through all clients and might raise`NotImplemented` exception.#### Using modelsSince we are a Django workshop, we like to do things in such way and therefore our models are also written similarly.All models can have `.validate_{field_name}(value)` functions that will be automatically called when running `.validate()`.If any of the values are not passed to constructors that are defined on the class withoutdefaults, a `MissingAttributesException` exception will be risen.### WebsocketsIf your application requires asynchronous connection, you can use `MeiliWebsocketClient` to do so.We have written our client in such way that you will receive already constructed objects from itand will not have to worry about parsing and validating data.Here is an example use of our websocket client:```pythonfrom meili_sdk.websockets.client import MeiliWebsocketClientdef open_handler():    print(&quot;WS opened&quot;)def close_handler():    print(&quot;WS CLOSED&quot;)def error_handler(*_):    print(&quot;error has occurred&quot;)client = MeiliWebsocketClient(    &quot;77b971e8f47e421045d384558059c31679b4b6ca&quot;,    open_handler=open_handler,    close_handler=close_handler,    error_handler=error_handler,)client.add_vehicle(&quot;2eb03045cbc640fdbd2181ab60387b7a&quot;)client.run()```If you want to run it without block the program flow, you can run it inside a threadusing `.run_in_thread()` method.Here are all the parameters you can pass to the constructor of websocket client:```token (str) - authentication token with the WSfleet (bool) - use fleet websocket if set to true (default: true)open_handler() (callable) - a callable object that will be called with no parameters when websocket is openedclose_handler() (callable) - a callable objects that will be called with no parameters when websocket is closederror_handler(err) (callable) - a callable with a single parameter that will receive the exception as a parametertask_handler(task: Task, data: dict, vehicle: str) - a callable that will be called when a new task is receivedmove_action_handler(message: MoveMessage, data: dict, vehicle: str) - a callable for moving vehicle according to FMSslow_down_handler(message: SlowDownMessage, data: dict, vehicle: str) - a callable for altering movement of robotstopic_list_handler(data: dict, vehicle: str) - a callable for handling topic list requesttopic_list_initializer_handler(topics: List[RosTopic], data: dict, vehicle: str) - a callable to initialize topics```### MQTT```pythonfrom meili_sdk.mqtt.client import MeiliMqttClientdef on_message(client, topic, raw_data, data):    print(f&quot;message in topic: {topic} received with the following data: {data}&quot;)def on_open(*_):    print(f&quot;Connection was opened&quot;)c = MeiliMqttClient(    client_id=&quot;meili-agent-0f24942b-fce2-498b-b6fa-bcb995e8f377&quot;,    host=&quot;ac8bf42345081496faead3a80186328e-349527337.eu-north-1.elb.amazonaws.com&quot;,    port=1883,    open_handler=on_open,    message_handler=on_message,)c.run(block=False)c.subscribe(    &quot;meili/setup/4c55eb782d104fa8bbdf4c3b912b959b/vehicle/5e5ee61798954bcb9dcd3b02735072ea/state&quot;)```</longdescription>
</pkgmetadata>