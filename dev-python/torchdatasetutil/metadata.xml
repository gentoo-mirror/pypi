<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Torch Dataset UtilitiesThe python library [torchdatasetutils](https://pypi.org/project/torchdatasetutil/) produces torch [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader) classes and utility functions for several imaging datasets.  This currently includes sets of images and annotations from [CVAT](https://github.com/openvinotoolkit/cvat), [COCO dataset](https://cocodataset.org/).  &quot;torchdatasetutil&quot; uses an s3 object storage to hold dataset data.  This enables training and test to be performed on nodes different from where the dataset is stored with application defined credentials.  It uses torch PyTorch worker threads to prefetch data for efficient GPU or CPU training and inference.&quot;torchdatasetutils&quot; takes as an input the [pymlutil](https://pypi.org/project/pymlutil/).s3 object to access the object storage.Two json or yaml dictionaries are loaded from the object storage to identify and process the dataset: the dataset description and class dictionary.  The the dataset description is unique for each type of dataset.  The class dictionary is common to all datasets and describes data transformation and data augmentation.## Library structure- pymlutil.s3: access to object storage- [torchdatasetutil](https://pypi.org/project/torchdatasetutil/)    - [gitcoco.getcoco](https://github.com/bhlarson/torchdatasetutil/blob/main/torchdatasetutil/getcoco.py#L25): function to load the [COCO dataset](https://cocodataset.org/) from internet archives into object storage    - [cocostore](https://github.com/bhlarson/torchdatasetutil/blob/main/torchdatasetutil/cocostore.py)        - [CocoStore](https://github.com/bhlarson/torchdatasetutil/blob/main/torchdatasetutil/cocostore.py#L17): class providing a python iterator over the coco dataset in object storage        - [CocoDataset](https://github.com/bhlarson/torchdatasetutil/blob/main/torchdatasetutil/cocostore.py)&quot; class implementing the pytorch [Dataset class](https://pytorch.org/docs/stable/data.html#dataset-types) for the CocoStore iterator    - [imstore](https://github.com/bhlarson/torchdatasetutil/blob/main/torchdatasetutil/imstore.py)See [torchdatasetutil.ipynb](https://github.com/bhlarson/torchdatasetutil/blob/main/torchdatasetutil.ipynb) for library interface and usage## Class Dictionary## COCO DatasetTo load coco dataset you must have a credentials yaml file identifying the final s3 location and credentials for the dataset with the following keys:```yamls3:- name: store  type: trainer  address: &lt;address&gt;:&lt;port&gt;  access key: &lt;access key&gt;  secret key: &lt;secret key&gt;  tls: false  cert verify: false  cert path: null  sets:    dataset: {&quot;bucket&quot;:&quot;imgml&quot;,&quot;prefix&quot;:&quot;data&quot;, &quot;dataset_filter&quot;:&quot;&quot; }    trainingset: {&quot;bucket&quot;:&quot;imgml&quot;,&quot;prefix&quot;:&quot;training&quot;, &quot;dataset_filter&quot;:&quot;&quot; }    model: {&quot;bucket&quot;:&quot;imgml&quot;,&quot;prefix&quot;:&quot;model&quot;, &quot;dataset_filter&quot;:&quot;&quot; }    test: {&quot;bucket&quot;:&quot;imgml&quot;,&quot;prefix&quot;:&quot;test&quot;, &quot;dataset_filter&quot;:&quot;&quot; }```Call torchdatasetutil.getcoco to retrieve the COCO dataset and stage it into object storage```cmdpython3 -m torchdatasetutil.getcoco```To train with the coco dataset, first create dataset loaders```pythonfrom torchdatasetutil.cocostore import CreateCocoLoaders# Create dataset loadersdataset_bucket = s3def['sets']['dataset']['bucket']if args.dataset=='coco':    class_dictionary = s3.GetDict(s3def['sets']['dataset']['bucket'],args.coco_class_dict)    loaders = CreateCocoLoaders(s3, dataset_bucket,         class_dict=args.coco_class_dict,         batch_size=args.batch_size,        num_workers=args.num_workers,        cuda = args.cuda,        height = args.height,        width = args.width,    )# Identify training and test loaderstrainloader = next(filter(lambda d: d.get('set') == 'train', loaders), None)testloader = next(filter(lambda d: d.get('set') == 'test' or d.get('set') == 'val', loaders), None)# Iterate through the datasetfor i, data in tqdm(enumerate(trainloader['dataloader']),                     bar_format='{desc:&lt;8.5}{percentage:3.0f}%|{bar:50}{r_bar}',                     total=trainloader['batches'], desc=&quot;Train batches&quot;, disable=args.job):    # Extract dataset data    inputs, labels, mean, stdev = data    # Remaining steps```# Cityscapes DatasetTo download cityscapes, your cityscapes credentials must be included in you credentials yaml file with the following structure```yamlcityscapes:  username: &lt;username&gt;  password: &lt;password&gt;```Call torchdatasetutil.getcityscapes to retrieve the cityscapes dataset and stage it into object storage```cmdpython3 -m torchdatasetutil.getcityscapes``````pythonif args.dataset=='cityscapes':    class_dictionary = s3.GetDict(s3def['sets']['dataset']['bucket'],args.cityscapes_class_dict)    loaders = CreateCityscapesLoaders(s3, s3def,         src = args.cityscapes_data,        dest = args.dataset_path+'/cityscapes',        class_dictionary = class_dictionary,        batch_size = args.batch_size,         num_workers=args.num_workers,        height=args.height,        width=args.width,     )```# Imagenet:1. Data from kaggle:    # Data from https://www.kaggle.com/competitions/imagenet-object-localization-challenge/data?select=LOC_sample_submission.csv1. Extract and move validation folder data:    https://discuss.pytorch.org/t/issues-with-dataloader-for-imagenet-should-i-use-datasets-imagefolder-or-datasets-imagenet/115742/71. Zip ILSVRC/Data/CLS-LOC/ to ILSVRC2012_devkit_t12.tar.gz    ```cmd    tar -czvf ILSVRC2012_devkit_t12.tar.gz ILSVRC/Data/CLS-LOC    ```1. Imagenet [directories](https://github.com/HoldenCaulfieldRye/caffe/blob/master/data/ilsvrc12/synset_words.txt)1. Imagenet [indexes](https://deeplearning.cms.waikato.ac.nz/user-guide/class-maps/IMAGENET/)</longdescription>
</pkgmetadata>