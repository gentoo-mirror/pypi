<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Nexmo Client Library for Python[![PyPI version](https://badge.fury.io/py/nexmo.svg)](https://badge.fury.io/py/nexmo)[![Build Status](https://api.travis-ci.org/Nexmo/nexmo-python.svg?branch=master)](https://travis-ci.org/Nexmo/nexmo-python)[![Coverage Status](https://coveralls.io/repos/github/Nexmo/nexmo-python/badge.svg?branch=master)](https://coveralls.io/github/Nexmo/nexmo-python?branch=master)[![Python versions supported](https://img.shields.io/pypi/pyversions/nexmo.svg)](https://pypi.python.org/pypi/nexmo)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)This is the Python client library for Nexmo's API. To use it you'llneed a Nexmo account. Sign up [for free at nexmo.com][signup].* [Installation](#installation)* [Usage](#usage)* [SMS API](#sms-api)* [Voice API](#voice-api)* [Verify API](#verify-api)* [Number Insight API](#number-insight-api)* [Number Management API](#number-management-api)* [Managing Secrets](#managing-secrets)* [Application API](#application-api)* [Overriding API Attributes](#overriding-api-attributes)* [Frequently Asked Questions](#frequently-asked-questions)* [License](#license)## InstallationTo install the Python client library using pip:    pip install nexmoTo upgrade your installed client library using pip:    pip install nexmo --upgradeAlternatively, you can clone the repository via the command line:    git clone git@github.com:Nexmo/nexmo-python.gitor by opening it on GitHub desktop.## UsageBegin by importing the `nexmo` module:```pythonimport nexmo```Then construct a client object with your key and secret:```pythonclient = nexmo.Client(key=api_key, secret=api_secret)```For production, you can specify the `NEXMO_API_KEY` and `NEXMO_API_SECRET`environment variables instead of specifying the key and secret explicitly.For newer endpoints that support JWT authentication such as the Voice API,you can also specify the `application_id` and `private_key` arguments:```pythonclient = nexmo.Client(application_id=application_id, private_key=private_key)```To check signatures for incoming webhook requests, you'll also needto specify the `signature_secret` argument (or the `NEXMO_SIGNATURE_SECRET`environment variable).## SMS API### SMS Class#### Creating an instance of the SMS classTo create an instance of the SMS class follow these steps:- Import the class```python#Option 1from nexmo import Sms#Option 2from nexmo.sms import Sms#Option 3import nexmo #then you can use nexmo.Sms() to create an instance```- Create an instance```python#Option 1 - pass key and secret to the constructorsms = Sms(key=NEXMO_API_KEY, secret=NEXMO_API_SECRET)#Option 2 - Create a client instance and then pass the client to the Sms instanceclient = Client(key=NEXMO_API_KEY, secret=NEXMO_API_SECRET)sms = Sms(client)```### Send an SMS```pythonfrom nexmo import Smssms = Sms(key=NEXMO_API_KEY, secret=NEXMO_API_SECRET)sms.send_message({            &quot;from&quot;: NEXMO_BRAND_NAME,            &quot;to&quot;: TO_NUMBER,            &quot;text&quot;: &quot;A text message sent using the Nexmo SMS API&quot;,})```### Send SMS with unicode```pythonsms.send_message({    'from': NEXMO_BRAND_NAME,    'to': TO_NUMBER,    'text': 'こんにちは世界',    'type': 'unicode',})```### Submit SMS Conversion```pythonfrom nexmo import Client, Smsclient = Client(key=NEXMO_API_KEY, secret=NEXMO_SECRET)sms = Sms(client)response = sms.send_message({    'from': NEXMO_BRAND_NAME,    'to': TO_NUMBER,    'text': 'Hi from Vonage'})sms.submit_sms_conversion(response['message-id'])```## Voice API### Make a call```pythonfrom nexmo import Client, Voiceclient = Client(application_id=APPLICATION_ID, private_key=PRIVATE_KEY)voice = Voice(client)voice.create_all({  'to': [{'type': 'phone', 'number': '14843331234'}],  'from': {'type': 'phone', 'number': '14843335555'},  'answer_url': ['https://example.com/answer']})```### Retrieve a list of calls```pythonfrom nexmo import Client, Voiceclient = Client(application_id=APPLICATION_ID, private_key=PRIVATE_KEY)voice = Voice(client)voice.get_calls()```### Retrieve a single call```pythonfrom nexmo import Client, Voiceclient = Client(application_id=APPLICATION_ID, private_key=PRIVATE_KEY)voice = Voice(client)voice.get_call(uuid)```### Update a call```pythonfrom nexmo import Client, Voiceclient = Client(application_id=APPLICATION_ID, private_key=PRIVATE_KEY)voice = Voice(client)response = voice.create_all({  'to': [{'type': 'phone', 'number': '14843331234'}],  'from': {'type': 'phone', 'number': '14843335555'},  'answer_url': ['https://example.com/answer']})voice.update_call(response['uuid'], action='hangup')```### Stream audio to a call```pythonfrom nexmo import Client, Voiceclient = Client(application_id=APPLICATION_ID, private_key=PRIVATE_KEY)voice = Voice(client)stream_url = 'https://nexmo-community.github.io/ncco-examples/assets/voice_api_audio_streaming.mp3'response = voice.create_call({  'to': [{'type': 'phone', 'number': '14843331234'}],  'from': {'type': 'phone', 'number': '14843335555'},  'answer_url': ['https://example.com/answer']})voice.send_audio(response['uuid'],stream_url=[stream_url])```### Stop streaming audio to a call```pythonfrom nexmo import Client, Voiceclient = Client(application_id='0d4884d1-eae8-4f18-a46a-6fb14d5fdaa6', private_key='./private.key')voice = Voice(client)stream_url = 'https://nexmo-community.github.io/ncco-examples/assets/voice_api_audio_streaming.mp3'response = voice.create_call({  'to': [{'type': 'phone', 'number': '14843331234'}],  'from': {'type': 'phone', 'number': '14843335555'},  'answer_url': ['https://example.com/answer']})voice.send_audio(response['uuid'],stream_url=[stream_url])voice.stop_audio(response['uuid'])```### Send a synthesized speech message to a call```pythonfrom nexmo import Client, Voiceclient = Client(application_id=APPLICATION_ID, private_key=PRIVATE_KEY)voice = Voice(client)response = voice.create_call({  'to': [{'type': 'phone', 'number': '14843331234'}],  'from': {'type': 'phone', 'number': '14843335555'},  'answer_url': ['https://example.com/answer']})voice.send_speech(response['uuid'], text='Hello from nexmo')```### Stop sending a synthesized speech message to a call```python&gt;&gt;&gt; from nexmo import Client, Voice&gt;&gt;&gt; client = Client(application_id=APPLICATION_ID, private_key=APPLICATION_ID)&gt;&gt;&gt; voice = Voice(client)&gt;&gt;&gt; response = voice.create_call({  'to': [{'type': 'phone', 'number': '14843331234'}],  'from': {'type': 'phone', 'number': '14843335555'},  'answer_url': ['https://example.com/answer']})&gt;&gt;&gt; voice.send_speech(response['uuid'], text='Hello from nexmo')&gt;&gt;&gt; voice.stop_speech(response['uuid'])```### Send DTMF tones to a call```pythonfrom nexmo import Client, Voiceclient = Client(application_id=APPLICATION_ID, private_key=PRIVATE_KEY)voice = Voice(client)response = voice.create_call({  'to': [{'type': 'phone', 'number': '14843331234'}],  'from': {'type': 'phone', 'number': '14843335555'},  'answer_url': ['https://example.com/answer']})voice.send_dtmf(response['uuid'], digits='1234')```### Get recording```pythonresponse = client.get_recording(RECORDING_URL)```## Verify API### Verify Class#### Creating an instance of the classTo create an instance of the Verify class, Just follow the next steps:- **Import the class from module** (3 different ways)```python#First wayfrom nexmo import Verify#Second wayfrom nexmo.verify import Verify#Third valid wayimport nexmo #then you can use nexmo.Verify() to create an instance```- **Create the instance**  ```python#First way - pass key and secret to the constructorverify = Verify(key=NEXMO_API_KEY, secret=NEXMO_API_SECRET)#Second way - Create a client instance and then pass the client to the Verify contructorclient = Client(key=NEXMO_API_KEY, secret=NEXMO_API_SECRET)verify = Verify(client)```### Search for a Verification request```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)response = verify.search('69e2626cbc23451fbbc02f627a959677')if response is not None:    print(response['status'])```### Send verification code```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)response = verify.request(number=RECIPIENT_NUMBER, brand='AcmeInc')if response[&quot;status&quot;] == &quot;0&quot;:    print(&quot;Started verification request_id is %s&quot; % (response[&quot;request_id&quot;]))else:    print(&quot;Error: %s&quot; % response[&quot;error_text&quot;])```### Send verification code with workflow```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)response = verify.request(number=RECIPIENT_NUMBER, brand='AcmeInc', workflow_id=1)if response[&quot;status&quot;] == &quot;0&quot;:    print(&quot;Started verification request_id is %s&quot; % (response[&quot;request_id&quot;]))else:    print(&quot;Error: %s&quot; % response[&quot;error_text&quot;])```### Check verification code```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)response = verify.check(REQUEST_ID, code=CODE)if response[&quot;status&quot;] == &quot;0&quot;:    print(&quot;Verification successful, event_id is %s&quot; % (response[&quot;event_id&quot;]))else:    print(&quot;Error: %s&quot; % response[&quot;error_text&quot;])```### Cancel Verification Request```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)response = verify.cancel(REQUEST_ID)if response[&quot;status&quot;] == &quot;0&quot;:    print(&quot;Cancellation successful&quot;)else:    print(&quot;Error: %s&quot; % response[&quot;error_text&quot;])```### Trigger next verification proccess```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)response = verify.trigger_next_event(REQUEST_ID)if response[&quot;status&quot;] == &quot;0&quot;:    print(&quot;Next verification stage triggered&quot;)else:    print(&quot;Error: %s&quot; % response[&quot;error_text&quot;])```### Send payment authentication code```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)response = verify.psd2(number=RECIPIENT_NUMBER, payee=PAYEE, amount=AMOUNT)if response[&quot;status&quot;] == &quot;0&quot;:    print(&quot;Started PSD2 verification request_id is %s&quot; % (response[&quot;request_id&quot;]))else:    print(&quot;Error: %s&quot; % response[&quot;error_text&quot;])```### Send payment authentication code with workflow```pythonclient = Client(key='API_KEY', secret='API_SECRET')verify = Verify(client)verify.psd2(number=RECIPIENT_NUMBER, payee=PAYEE, amount=AMOUNT, workflow_id: WORKFLOW_ID)if response[&quot;status&quot;] == &quot;0&quot;:    print(&quot;Started PSD2 verification request_id is %s&quot; % (response[&quot;request_id&quot;]))else:    print(&quot;Error: %s&quot; % response[&quot;error_text&quot;])```## Number Insight API### Basic Number Insight```pythonclient.get_basic_number_insight(number='447700900000')```Docs: [https://developer.nexmo.com/api/number-insight#getNumberInsightBasic](https://developer.nexmo.com/api/number-insight?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#getNumberInsightBasic)### Standard Number Insight```pythonclient.get_standard_number_insight(number='447700900000')```Docs: [https://developer.nexmo.com/api/number-insight#getNumberInsightStandard](https://developer.nexmo.com/api/number-insight?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#getNumberInsightStandard)### Advanced Number Insight```pythonclient.get_advanced_number_insight(number='447700900000')```Docs: [https://developer.nexmo.com/api/number-insight#getNumberInsightAdvanced](https://developer.nexmo.com/api/number-insight?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#getNumberInsightAdvanced)## Managing SecretsAn API is provided to allow you to rotate your API secrets. You can create a new secret (up to a maximum of two secrets) and delete the existing one once all applications have been updated.### List Secrets```pythonsecrets = client.list_secrets(API_KEY)```### Create A New SecretCreate a new secret (the created dates will help you know which is which):```pythonclient.create_secret(API_KEY, 'awes0meNewSekret!!;');```### Delete A SecretDelete the old secret (any application still using these credentials will stop working):```pythonclient.delete_secret(API_KEY, 'my-secret-id')```## Application API### Create an application```pythonresponse = client.application_v2.create_application({name='Example App', type='voice'})```Docs: [https://developer.nexmo.com/api/application.v2#createApplication](https://developer.nexmo.com/api/application.v2#createApplication?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#create-an-application)### Retrieve a list of applications```pythonresponse = client.application_v2.list_applications()```Docs: [https://developer.nexmo.com/api/application.v2#listApplication](https://developer.nexmo.com/api/application.v2#listApplication?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#retrieve-your-applications)### Retrieve a single application```pythonresponse = client.application_v2.get_application(uuid)```Docs: [https://developer.nexmo.com/api/application.v2#getApplication](https://developer.nexmo.com/api/application.v2#getApplication?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#retrieve-an-application)### Update an application```pythonresponse = client.application_v2.update_application(uuid, answer_method='POST')```Docs: [https://developer.nexmo.com/api/application.v2#updateApplication](https://developer.nexmo.com/api/application.v2#updateApplication?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#update-an-application)### Delete an application```pythonresponse = client.application_v2.delete_application(uuid)```Docs: [https://developer.nexmo.com/api/application.v2#deleteApplication](https://developer.nexmo.com/api/application.v2#deleteApplication?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library#destroy-an-application)## Validate webhook signatures```pythonclient = nexmo.Client(signature_secret='secret')if client.check_signature(request.query):  # valid signatureelse:  # invalid signature```Docs: [https://developer.nexmo.com/concepts/guides/signing-messages](https://developer.nexmo.com/concepts/guides/signing-messages?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library)Note: you'll need to contact support@nexmo.com to enable message signing onyour account before you can validate webhook signatures.## JWT parametersBy default, the library generates short-lived tokens for JWT authentication.Use the auth method to specify parameters for a longer life token or tospecify a different token identifier:```pythonclient.auth(nbf=nbf, exp=exp, jti=jti)```## Overriding API AttributesIn order to rewrite/get the value of variables used across all the Nexmo classes Python uses `Call by Object Reference` that allows you to create a single client for Sms/Voice Classes. This means that if you make a change on a client instance this will be available for the Sms class.An example using setters/getters with `Object references`:```pythonfrom nexmo import Client, Sms#Defines the clientclient = Client(key='YOUR_API_KEY', secret='YOUR_API_SECRET')print(client.host()) # using getter for host -- value returned: rest.nexmo.com#Define the sms instancesms = Sms(client)#Change the value in clientclient.host('mio.nexmo.com') #Change host to mio.nexmo.com - this change will be available for sms```### Overriding API Host / Host AttributesThese attributes are private in the client class and the only way to access them is using the getters/setters we provide.```pythonfrom nexmo import Clientclient = Client(key='YOUR_API_KEY', secret='YOUR_API_SECRET')print(client.host()) # return rest.nexmo.comclient.host('mio.nexmo.com') # rewrites the host value to mio.nexmo.comprint(client.api_host()) # returns api.nexmo.comclient.api_host('myapi.nexmo.com') # rewrite the value of api_host```## Frequently Asked Questions### Dropping support for Python 2.7Back in 2014 when Guido van Rossum, Python's creator and principal author, made the announcement, January 1, 2020 seemed pretty far away. Python 2.7’s sunset has happened, after which there’ll be absolutely no more support from the core Python team. Many utilized projects pledge to drop Python 2 support in or before 2020. [(Official statement here)](https://www.python.org/doc/sunset-python-2/).Just because 2.7 isn’t going to be maintained past 2020 doesn’t mean your applications or libraries suddenly stop working but as of this moment we won't give official support for upcoming releases. Please read the official [&quot;Porting Python 2 Code to Python 3&quot; guide](https://docs.python.org/3/howto/pyporting.html). Please also read the [Python 3 Statement Practicalities](https://python3statement.org/practicalities/) for advice on sunsetting your Python 2 code.### Supported APIsThe following is a list of Vonage APIs and whether the Python SDK provides support for them:| API                   |  API Release Status  | Supported? || --------------------- | :------------------: | :--------: || Account API           | General Availability |     ✅     || Alerts API            | General Availability |     ✅     || Application API       | General Availability |     ✅     || Audit API             |         Beta         |     ❌     || Conversation API      |         Beta         |     ❌     || Dispatch API          |         Beta         |     ❌     || External Accounts API |         Beta         |     ❌     || Media API             |         Beta         |     ❌     || Messages API          |         Beta         |     ❌     || Number Insight API    | General Availability |     ✅     || Number Management API | General Availability |     ✅     || Pricing API           | General Availability |     ✅     || Redact API            | General Availability |     ✅     || Reports API           |         Beta         |     ❌     || SMS API               | General Availability |     ✅     || Verify API            | General Availability |     ✅     || Voice API             | General Availability |     ✅     |## ContributingWe :heart: contributions! But if you plan to work on something big or controversial, please [contact us](mailto:devrel@nexmo.com) first!We recommend working on `nexmo-python` with a [virtualenv][virtualenv]. The following command will install all the Python dependencies you need to run the tests:```bashmake install```The tests are all written with pytest. You run them with:```bashmake test```## LicenseThis library is released under the [MIT License][license].[virtualenv]: https://virtualenv.pypa.io/en/stable/[report-a-bug]: https://github.com/Nexmo/nexmo-python/issues/new[pull-request]: https://github.com/Nexmo/nexmo-python/pulls[signup]: https://dashboard.nexmo.com/sign-up?utm_source=DEV_REL&amp;utm_medium=github&amp;utm_campaign=python-client-library[license]: LICENSE.txt</longdescription>
</pkgmetadata>