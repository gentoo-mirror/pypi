<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DRF API Logger![version](https://img.shields.io/badge/version-1.1.14-blue.svg)[![Downloads](https://static.pepy.tech/personalized-badge/drf-api-logger?period=total&amp;units=none&amp;left_color=black&amp;right_color=orange&amp;left_text=Downloads%20Total)](http://pepy.tech/project/drf-api-logger)[![Downloads](https://static.pepy.tech/personalized-badge/drf-api-logger?period=month&amp;units=none&amp;left_color=black&amp;right_color=orange&amp;left_text=Downloads%20Last%20Month)](https://pepy.tech/project/drf-api-logger)[![Downloads](https://static.pepy.tech/personalized-badge/drf-api-logger?period=week&amp;units=none&amp;left_color=black&amp;right_color=orange&amp;left_text=Downloads%20Last%20Week)](https://pepy.tech/project/drf-api-logger)[![Open Source](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://opensource.org/)[![Donate](https://img.shields.io/badge/$-support-ff69b4.svg?style=flat)](https://paypal.me/chynybekov)  &lt;a href=&quot;https://discord.gg/eeYansFDCT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;logo=discord&amp;logoColor=white&quot; alt=&quot;Join Community Badge&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://www.instagram.com/coderssecret/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Instagram-E4405F?style=for-the-badge&amp;logo=instagram&amp;logoColor=white&quot; alt=&quot;Join Instagram&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/vishalanandl177&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/GitHub-100000?style=for-the-badge&amp;logo=github&amp;logoColor=white&quot; alt=&quot;GitHub&quot;/&gt;&lt;/a&gt;An API Logger for your Django Rest Framework project.It logs all the API information for content type &quot;application/json&quot;.1. URL2. Request Body3. Request Headers4. Request Method5. API Response6. Status Code7. API Call Time8. Server Execution Time9. Client IP AddressYou can log API information into the database or listen to the logger signals for different use-cases, or you can do both.* The logger usage a separate thread to run, so it won't affect your API response time.## InstallationInstall or add drf-api-logger.```shell scriptpip install drf-api-logger```Add in INSTALLED_APPS```pythonINSTALLED_APPS = [    'django.contrib.admin',    'django.contrib.auth',    'django.contrib.contenttypes',    'django.contrib.sessions',    'django.contrib.messages',    'django.contrib.staticfiles',    'drf_api_logger',  #  Add here]```Add in MIDDLEWARE```pythonMIDDLEWARE = [    'django.middleware.security.SecurityMiddleware',    'django.contrib.sessions.middleware.SessionMiddleware',    'django.middleware.common.CommonMiddleware',    'django.middleware.csrf.CsrfViewMiddleware',    'django.contrib.auth.middleware.AuthenticationMiddleware',    'django.contrib.messages.middleware.MessageMiddleware',    'django.middleware.clickjacking.XFrameOptionsMiddleware',    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware', # Add here]```#### * Add these lines in Django Rest Framework settings file.## Store logs into the databaseLog every request into the database.```pythonDRF_API_LOGGER_DATABASE = True  # Default to False```* Logs will be available in Django Admin Panel.* The search bar will search in Request Body, Response, Headers and API URL.* You can also filter the logs based on the &quot;added_on&quot; date, Status Code and Request Methods.![Alt text](https://raw.githubusercontent.com/vishalanandl177/DRF-API-Logger/master/logs.png?raw=true, &quot;Logger&quot;)![Alt text](https://raw.githubusercontent.com/vishalanandl177/DRF-API-Logger/master/graph.png?raw=true, &quot;Graph&quot;)![Alt text](https://raw.githubusercontent.com/vishalanandl177/DRF-API-Logger/master/lists.png?raw=true, &quot;Lists&quot;)![Alt text](https://raw.githubusercontent.com/vishalanandl177/DRF-API-Logger/master/details.png?raw=true, &quot;Details&quot;)Note: Make sure to migrate. It will create a table for logger if &quot;DRF_API_LOGGER_DATABASE&quot; is True else if already exists, it will delete the table.## To listen for the logger signals.Listen to the signal as soon as any API is called. So you can log the API data into a file or for different use-cases.```pythonDRF_API_LOGGER_SIGNAL = True  # Default to False```Example code to listen to the API Logger Signal.```python&quot;&quot;&quot;Import API_LOGGER_SIGNAL&quot;&quot;&quot;from drf_api_logger import API_LOGGER_SIGNAL&quot;&quot;&quot;Create a function that is going to listen to the API logger signals.&quot;&quot;&quot;def listener_one(**kwargs):    print(kwargs)def listener_two(**kwargs):    print(kwargs)&quot;&quot;&quot;It will listen to all the API logs whenever an API is called.You can also listen signals in multiple functions.&quot;&quot;&quot;API_LOGGER_SIGNAL.listen += listener_oneAPI_LOGGER_SIGNAL.listen += listener_two&quot;&quot;&quot;Unsubscribe to signals.&quot;&quot;&quot;API_LOGGER_SIGNAL.listen -= listener_one```### QueueDRF API Logger usage queue to hold the logs before inserting into the database. Once queue is full, it bulk inserts into the database.Specify the queue size.```pythonDRF_LOGGER_QUEUE_MAX_SIZE = 50  # Default to 50 if not specified.```### IntervalDRF API Logger also waits for a period of time. If queue is not full and there are some logs to be inserted, it inserts after interval ends.Specify an interval (In Seconds).```pythonDRF_LOGGER_INTERVAL = 10  # In Seconds, Default to 10 seconds if not specified.```Note: The API call time (added_on) is a timezone aware datetime object. It is actual time of API call irrespective of interval value or queue size.### Skip namespaceYou can skip the entire app to be logged into the database by specifying namespace of the app as list.```pythonDRF_API_LOGGER_SKIP_NAMESPACE = ['APP_NAMESPACE1', 'APP_NAMESPACE2']```### Skip URL NameYou can also skip any API to be logged by using url_name of the API.```pythonDRF_API_LOGGER_SKIP_URL_NAME = ['url_name1', 'url_name2']```Note: It does not log Django Admin Panel API calls.### Hide Sensitive Data From LogsYou may wish to hide sensitive information from being exposed in the logs. You do this by setting `DRF_API_LOGGER_EXCLUDE_KEYS` in settings.py to a list of your desired sensitive keys. The default is```pythonDRF_API_LOGGER_EXCLUDE_KEYS = ['password', 'token', 'access', 'refresh']# Sensitive data will be replaced with &quot;***FILTERED***&quot;.```### Change default database to store API logs```pythonDRF_API_LOGGER_DEFAULT_DATABASE = 'default'  # Default to &quot;default&quot; if not specified&quot;&quot;&quot;Make sure to migrate the database specified in DRF_API_LOGGER_DEFAULT_DATABASE.&quot;&quot;&quot;```### Want to identify slow APIs? (Optional)You can also identify slow APIs by specifying `DRF_API_LOGGER_SLOW_API_ABOVE` in settings.py.A new filter (By API Performance) will be visible, and you can choose slow or fast API.```pythonDRF_API_LOGGER_SLOW_API_ABOVE = 200  # Default to None# Specify in milli-seconds.```### Want to log only selected request methods? (Optional)You can log only selected methods by specifying `DRF_API_LOGGER_METHODS` in settings.py.```pythonDRF_API_LOGGER_METHODS = ['GET', 'POST', 'DELETE', 'PUT']  # Default to empty list (Log all the requests).```### Want to log only selected response status codes? (Optional)You can log only selected responses by specifying `DRF_API_LOGGER_STATUS_CODES` in settings.py.```pythonDRF_API_LOGGER_STATUS_CODES = ['200', '400', '404', '500']  # Default to empty list (Log all responses).```### Want to see the API information in local timezone? (Optional)You can also change the timezone by specifying `DRF_API_LOGGER_TIMEDELTA` in settings.py.It won't change the Database timezone. It will still remain UTC or the timezone you have defined.```pythonDRF_API_LOGGER_TIMEDELTA = 330 # UTC + 330 Minutes = IST (5:Hours, 30:Minutes ahead from UTC) # Specify in minutes.``````python# Yoc can specify negative values for the countries behind the UTC timezone.DRF_API_LOGGER_TIMEDELTA = -30  # Example```### API with or without HostYou can specify an endpoint of API should have absolute URI or not by setting this variable in DRF settings.py file.```pythonDRF_API_LOGGER_PATH_TYPE = 'ABSOLUTE'  # Default to ABSOLUTE if not specified# Possible values are ABSOLUTE, FULL_PATH or RAW_URI```### TracingYou can enable tracing by specifying `DRF_API_LOGGER_ENABLE_TRACING` in settings.py.This will add a tracing id (UUID.uuid4()) in the signals of DRF API Logger (if enabled).In views, you can use request.tracing_id to get the tracing id.```pythonDRF_API_LOGGER_ENABLE_TRACING = True  # default to False```### Want to generate your own tracing uuid?By default, DRF API Logger usage uuid.uuid4() to generate tracing id.If you want to use your custom function to generate uuid, specify DRF_API_LOGGER_TRACING_FUNC in setting.py file.```pythonDRF_API_LOGGER_TRACING_FUNC = 'foo.bar.func_name'```### Tracing already present in headers?If the tracing id is already coming as a part of request headers, you can specify the header name.```pythonDRF_API_LOGGER_TRACING_ID_HEADER_NAME: str = 'X_TRACING_ID'  # Replace with actual header name.```Considering we are accessing the following URL: http://127.0.0.1:8000/api/v1/?page=123DRF_API_LOGGER_PATH_TYPE possible values are:1. ABSOLUTE (Default) :       Function used ```request.build_absolute_uri()```        Output: ```http://127.0.0.1:8000/api/v1/?page=123```    2. FULL_PATH    Function used ```request.get_full_path()```        Output: ```/api/v1/?page=123```    3. RAW_URI    Function used ```request.get_raw_uri()```        Output: ```http://127.0.0.1:8000/api/v1/?page=123```        Note: Similar to ABSOLUTE but skip allowed hosts protection, so may return an insecure URI.### Use DRF API Logger Model to query You can use the DRF API Logger Model to query some information.Note: Make sure to set &quot;DRF_API_LOGGER_DATABASE = True&quot; in settings.py file.```pythonfrom drf_api_logger.models import APILogsModel&quot;&quot;&quot;Example:Select records for status_code 200.&quot;&quot;&quot;result_for_200_status_code = APILogsModel.objects.filter(status_code=200)```DRF API Logger Model:```pythonclass APILogsModel(Model):   id = models.BigAutoField(primary_key=True)   api = models.CharField(max_length=1024, help_text='API URL')   headers = models.TextField()   body = models.TextField()   method = models.CharField(max_length=10, db_index=True)   client_ip_address = models.CharField(max_length=50)   response = models.TextField()   status_code = models.PositiveSmallIntegerField(help_text='Response status code', db_index=True)   execution_time = models.DecimalField(decimal_places=5, max_digits=8,                                       help_text='Server execution time (Not complete response time.)')   added_on = models.DateTimeField()      def __str__(self):      return self.api   class Meta:      db_table = 'drf_api_logs'      verbose_name = 'API Log'      verbose_name_plural = 'API Logs'```### Note:After sometime, there will be too many data in the database. Searching and filter may get slower.If you want, you can delete or archive the older data.To improve the searching or filtering, try to add indexes in the 'drf_api_logs' table.</longdescription>
</pkgmetadata>