<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Code Climate|git-deps========``git-deps`` is a tool for performing automatic analysis of dependenciesbetween commits in a `git &lt;http://git-scm.com/&gt;`__ repository. Here’s ascreencast demonstration:|YouTube screencast|I have `blogged about ``git-deps`` and relatedtools &lt;https://blog.adamspiers.org/2018/06/14/git-auto-magic/&gt;`__, andalso publically spoken about the tool several times:-  `a presentation at the openSUSE Summit in Nashville, Apr   2019 &lt;https://aspiers.github.io/nashville-git-automagic-april-2019/&gt;`__-  `a presentation at the OpenStack PTG in Denver, Sept   2018 &lt;https://aspiers.github.io/denver-git-automagic-sept-2018/&gt;`__   (`watch the video &lt;https://youtu.be/f6anrSKCIgI&gt;`__)-  `a presentation at the London Git User Meetup in May   2018 &lt;https://aspiers.github.io/london-git-automagic-may-2018/&gt;`__   (`watch the   video &lt;https://skillsmatter.com/skillscasts/11825-git-auto-magic&gt;`__)-  `episode #32 of the GitMinutes podcast in   2015 &lt;http://episodes.gitminutes.com/2015/03/gitminutes-32-adam-spiers-on-git-deps.html&gt;`__Contents---------  `Background theory &lt;#background-theory&gt;`__-  `Motivation &lt;#motivation&gt;`__   -  `Use case 1: porting between      branches &lt;USE-CASES.md#use-case-1-porting-between-branches&gt;`__   -  `Use case 2: splitting a patch series into independent      topics &lt;USE-CASES.md#use-case-2-splitting-a-patch-series-into-independent-topics&gt;`__   -  `Use case 3: aiding collaborative      communication &lt;USE-CASES.md#use-case-3-aiding-collaborative-communication&gt;`__   -  `Use case 4: automatic squashing of fixup      commits &lt;USE-CASES.md#use-case-4-automatic-squashing-of-fixup-commits&gt;`__   -  `Use case 5: rewriting commit      history &lt;USE-CASES.md#use-case-5-rewriting-commit-history&gt;`__-  `Installation &lt;INSTALL.md&gt;`__-  `Usage &lt;USAGE.md&gt;`__-  `Textual vs. semantic   (in)dependence &lt;#textual-vs-semantic-independence&gt;`__-  `Development / support /   feedback &lt;#development--support--feedback&gt;`__-  `History &lt;HISTORY.md&gt;`__-  `Credits &lt;#credits&gt;`__-  `License &lt;#license&gt;`__Background theory-----------------It is fairly clear that two git commits within a single repo can beconsidered “independent” from each other in a certain sense, if they donot change the same files, or if they do not change overlapping parts ofthe same file(s).In contrast, when a commit changes a line, it is “dependent” on not onlythe commit which last changed that line, but also any commits which wereresponsible for providing the surrounding lines of context, becausewithout those previous versions of the line and its context, thecommit’s diff might not cleanly apply (depending on how it’s beingapplied, of course). So all dependencies of a commit can beprogrammatically inferred by running git-blame on the lines the commitchanges, plus however many lines of context make sense for the use caseof this particular dependency analysis.Therefore the dependency calculation is impacted by a “fuzz” factorparameter (c.f.`patch(1) &lt;http://en.wikipedia.org/wiki/Patch_(Unix)&gt;`__), i.e. thenumber of lines of context which are considered necessary for thecommit’s diff to cleanly apply.As with many dependency relationships, these dependencies form edges ina DAG (directed acyclic graph) whose nodes correspond to commits. Notethat a node can only depend on a subset of its ancestors.Caveat~~~~~~It is important to be aware that any dependency graph inferred by``git-deps`` may be semantically incomplete; for example it would notauto-detect dependencies between a commit A which changes code andanother commit B which changes documentation or tests to reflect thecode changes in commit A. Therefore ``git-deps`` should not be used withblind faith. For more details, see `the section on Textual vs. semantic(in)dependence &lt;#textual-vs-semantic-independence&gt;`__ below.Motivation----------Sometimes it is useful to understand the nature of parts of thisdependency graph, as its nature will impact the success or failure ofoperations including merge, rebase, cherry-pick etc. Please see `the``USE-CASES.md`` file &lt;USE-CASES.md&gt;`__ for more details.Installation------------Please see `the ``INSTALL.md`` file &lt;INSTALL.md&gt;`__.Usage-----Please see `the ``USAGE.md`` file &lt;USAGE.md&gt;`__.Textual vs. semantic (in)dependence-----------------------------------Astute readers will note that textual independence as detected by``git-deps`` is not the same as semantic / logical independence. Textualindependence means that the changes can be applied in any order withoutincurring conflicts, but this is not a reliable indicator of logicalindependence.For example a change to a function and corresponding changes to thetests and/or documentation for that function would typically exist indifferent files. So if those changes were in separate commits within abranch, running ``git-deps`` on the commits would not detect anydependency between them even though they are logically related, becausechanges in different files (or even in different areas of the samefiles) are textually independent.So in this case, ``git-deps`` would not behave exactly how we mightwant. And for as long as AI is an unsolved problem, it is very unlikelythat it will ever develop totally reliable behaviour. So does that mean``git-deps`` is useless? Absolutely not!Firstly, when `bestpractices &lt;https://crealytics.com/blog/5-reasons-keeping-git-commits-small/&gt;`__for `commitstructuring &lt;https://wiki.openstack.org/wiki/GitCommitMessages#Structural_split_of_changes&gt;`__are adhered to, changes which are strongly logically related should beplaced within the same commit anyway. So in the example above, a changeto a function and corresponding changes to the tests and/ordocumentation for that function should all be within a single commit.(Although this is not the only valid approach; for a more advancedmeta-history grouping mechanism, see```git-dendrify`` &lt;https://github.com/bennorth/git-dendrify&gt;`__.)Secondly, whilst textual independence does not imply logicalindependence, the converse is expected to be more commonly true: logicalindependence often implies textual independence (or stated another way,textual dependence often implies logical dependence). So while it mightnot be too uncommon for ``git-deps`` to fail to detect the dependencybetween logically-related changes, it should be rarer that itincorrectly infers a dependency between logically unrelated changes. Inother words, its false negatives are generally expected to be morecommon than its false positives. As a result it is likely to be moreuseful in determining a lower bound on dependencies than an upper bound.Having said that, more research is needed on this.Thirdly, it is often unhelpful to allow `the quest for the perfectbecome the enemy of thegood &lt;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&gt;`__ - atool does not have to be perfect to be useful; it only has to be betterthan performing the same task without the tool.Further discussion on some of these points can be found in `an oldthread from the git mailinglist &lt;https://public-inbox.org/git/20160528112417.GD11256@pacific.linksys.moosehall/&gt;`__.Ultimately though, `“the proof is in thepudding” &lt;https://en.wiktionary.org/wiki/the_proof_is_in_the_pudding&gt;`__,so try it out and see!Development / support / feedback--------------------------------Please see `the ``CONTRIBUTING.md`` file &lt;CONTRIBUTING.md&gt;`__.History-------Please see `the ``HISTORY.md`` file &lt;HISTORY.md&gt;`__.Credits-------Special thanks to `SUSE &lt;https://suse.com&gt;`__ for partially sponsoringthe development of this software. Thanks also to everyone who hascontributed code, bug reports, and other feedback.License-------Released under `GPL version 2 &lt;LICENSE.txt&gt;`__ in order to be consistentwith ```git``\ ’slicense &lt;https://github.com/git/git/blob/master/COPYING&gt;`__, but I’mopen to the idea of dual-licensing if there’s a convincing reason... |Code Climate| image:: https://codeclimate.com/github/aspiers/git-deps/badges/gpa.svg   :target: https://codeclimate.com/github/aspiers/git-deps.. |YouTube screencast| image:: ./images/youtube-thumbnail.png   :target: http://youtu.be/irQ5gMMz-gE</longdescription>
</pkgmetadata>