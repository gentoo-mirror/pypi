<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============openstacksdk============openstacksdk is a client library for building applications to workwith OpenStack clouds. The project aims to provide a consistent andcomplete set of interactions with OpenStack's many services, along withcomplete documentation, examples, and tools.It also contains an abstraction interface layer. Clouds can do many things, butthere are probably only about 10 of them that most people care about with anyregularity. If you want to do complicated things, the per-service orientedportions of the SDK are for you. However, if what you want is to be able towrite an application that talks to any OpenStack cloud regardless ofconfiguration, then the Cloud Abstraction layer is for you.More information about the history of openstacksdk can be found athttps://docs.openstack.org/openstacksdk/latest/contributor/history.htmlGetting started---------------openstacksdk aims to talk to any OpenStack cloud. To do this, it requires aconfiguration file. openstacksdk favours ``clouds.yaml`` files, but can alsouse environment variables. The ``clouds.yaml`` file should be provided by yourcloud provider or deployment tooling. An example:.. code-block:: yaml    clouds:      mordred:        region_name: Dallas        auth:          username: 'mordred'          password: XXXXXXX          project_name: 'demo'          auth_url: 'https://identity.example.com'openstacksdk will look for ``clouds.yaml`` files in the following locations:* ``.`` (the current directory)* ``$HOME/.config/openstack``* ``/etc/openstack``openstacksdk consists of three layers. Most users will make use of the *proxy*layer. Using the above ``clouds.yaml``, consider listing servers:.. code-block:: python    import openstack    # Initialize and turn on debug logging    openstack.enable_logging(debug=True)    # Initialize connection    conn = openstack.connect(cloud='mordred')    # List the servers    for server in conn.compute.servers():        print(server.to_dict())openstacksdk also contains a higher-level *cloud* layer based on logicaloperations:.. code-block:: python    import openstack    # Initialize and turn on debug logging    openstack.enable_logging(debug=True)    # Initialize connection    conn = openstack.connect(cloud='mordred')    # List the servers    for server in conn.list_servers():        print(server.to_dict())The benefit of this layer is mostly seen in more complicated operations thattake multiple steps and where the steps vary across providers. For example:.. code-block:: python    import openstack    # Initialize and turn on debug logging    openstack.enable_logging(debug=True)    # Initialize connection    conn = openstack.connect(cloud='mordred')    # Upload an image to the cloud    image = conn.create_image(        'ubuntu-trusty', filename='ubuntu-trusty.qcow2', wait=True)    # Find a flavor with at least 512M of RAM    flavor = conn.get_flavor_by_ram(512)    # Boot a server, wait for it to boot, and then do whatever is needed    # to get a public IP address for it.    conn.create_server(        'my-server', image=image, flavor=flavor, wait=True, auto_ip=True)Finally, there is the low-level *resource* layer. This provides support for thebasic CRUD operations supported by REST APIs and is the base building block forthe other layers. You typically will not need to use this directly:.. code-block:: python    import openstack    import openstack.config.loader    import openstack.compute.v2.server    # Initialize and turn on debug logging    openstack.enable_logging(debug=True)    # Initialize connection    conn = openstack.connect(cloud='mordred')    # List the servers    for server in openstack.compute.v2.server.Server.list(session=conn.compute):        print(server.to_dict()).. _openstack.config:Configuration-------------openstacksdk uses the ``openstack.config`` module to parse configuration.``openstack.config`` will find cloud configuration for as few as one cloud andas many as you want to put in a config file. It will read environment variablesand config files, and it also contains some vendor specific default values sothat you don't have to know extra info to use OpenStack* If you have a config file, you will get the clouds listed in it* If you have environment variables, you will get a cloud named `envvars`* If you have neither, you will get a cloud named `defaults` with base defaultsYou can view the configuration identified by openstacksdk in your currentenvironment by running ``openstack.config.loader``. For example:.. code-block:: bash   $ python -m openstack.config.loaderMore information at https://docs.openstack.org/openstacksdk/latest/user/config/configuration.htmlSupported services------------------The following services are currently supported. A full list of all availableOpenStack service can be found in the `Project Navigator`__... __: https://www.openstack.org/software/project-navigator/openstack-components#openstack-services.. note::   Support here does not guarantee full-support for all APIs. It simply means   some aspect of the project is supported... list-table:: Supported services   :widths: 15 25 10 40   :header-rows: 1   * - Service     - Description     - Cloud Layer     - Proxy &amp; Resource Layer   * - **Compute**     -     -     -   * - Nova     - Compute     - ✔     - ✔ (``openstack.compute``)   * - **Hardware Lifecycle**     -     -     -   * - Ironic     - Bare metal provisioning     - ✔     - ✔ (``openstack.baremetal``, ``openstack.baremetal_introspection``)   * - Cyborg     - Lifecycle management of accelerators     - ✔     - ✔ (``openstack.accelerator``)   * - **Storage**     -     -     -   * - Cinder     - Block storage     - ✔     - ✔ (``openstack.block_storage``)   * - Swift     - Object store     - ✔     - ✔ (``openstack.object_store``)   * - Cinder     - Shared filesystems     - ✔     - ✔ (``openstack.shared_file_system``)   * - **Networking**     -     -     -   * - Neutron     - Networking     - ✔     - ✔ (``openstack.network``)   * - Octavia     - Load balancing     - ✔     - ✔ (``openstack.load_balancer``)   * - Designate     - DNS     - ✔     - ✔ (``openstack.dns``)   * - **Shared services**     -     -     -   * - Keystone     - Identity     - ✔     - ✔ (``openstack.identity``)   * - Placement     - Placement     - ✔     - ✔ (``openstack.placement``)   * - Glance     - Image storage     - ✔     - ✔ (``openstack.image``)   * - Barbican     - Key management     - ✔     - ✔ (``openstack.key_manager``)   * - **Workload provisioning**     -     -     -   * - Magnum     - Container orchestration engine provisioning     - ✔     - ✔ (``openstack.container_infrastructure_management``)   * - **Orchestration**     -     -     -   * - Heat     - Orchestration     - ✔     - ✔ (``openstack.orchestration``)   * - Senlin     - Clustering     - ✔     - ✔ (``openstack.clustering``)   * - Mistral     - Workflow     - ✔     - ✔ (``openstack.workflow``)   * - Zaqar     - Messaging     - ✔     - ✔ (``openstack.message``)   * - **Application lifecycle**     -     -     -   * - Masakari     - Instances high availability service     - ✔     - ✔ (``openstack.instance_ha``)Links-----* `Issue Tracker &lt;https://storyboard.openstack.org/#!/project/openstack/openstacksdk&gt;`_* `Code Review &lt;https://review.opendev.org/#/q/status:open+project:openstack/openstacksdk,n,z&gt;`_* `Documentation &lt;https://docs.openstack.org/openstacksdk/latest/&gt;`_* `PyPI &lt;https://pypi.org/project/openstacksdk/&gt;`_* `Mailing list &lt;http://lists.openstack.org/cgi-bin/mailman/listinfo/openstack-discuss&gt;`_* `Release Notes &lt;https://docs.openstack.org/releasenotes/openstacksdk&gt;`_</longdescription>
</pkgmetadata>