<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============================================escapejson function and django template filter==============================================**JSON is not javascript.** Many developers erroneously think that they canjust place the output of ``json.dumps(obj)`` inside ``&lt;script&gt;`` tags and begood to go -- but this is dangerously vulnerable to cross-site scriptingattacks from 2 important edge cases for how JSON differs from javscript: (1)the handling of a literal ``&lt;/script&gt;`` within script blocks, and (2) thebehavior of two pesky unicode whitespace characters.This very simple library provides a function ``escapejson``, and a Djangotemplate filter of the same name.  The output of ``escapejson`` should be safefor inclusion in HTML ``&lt;script&gt;`` tags, and interpretation directly asjavascript.NOTE: this escaping is only &quot;safe&quot; if the input is a syntactically valid JSONstring.  The output is NOT safe if you pass it invalid JSON, whether fromuntrusted JSON input or from a broken encoder.  This library does not validatethe correctness of the JSON it is fed.  Always use a conformant JSON encoder(e.g. ``json.dumps``) to ensure that the JSON is valid to start with.Installation============::    pip install escapejsonCompatibility-------------- v0.x: supports python 2.7 and 3.3, and Django &lt; 3.0.- v1.x: supports python 3.6+, and Django 1.11+.Django is not required for use.Usage=====Example API usage (with or without Django)------------------------------------------::    import json    from escapejson import escapejson    my_obj = {'message': '&lt;/script&gt;&lt;script&gt;alert(&quot;oh no!&quot;)&lt;/script&gt;'}    my_str = json.dumps(myobj)    my_safe_str = escapejson(my_str)Example Django templates usage------------------------------First, add ``&quot;escapejson&quot;`` to ``INSTALLED_APPS`` in your project's ``settings.py``.::    # settings.py    INSTALLED_APPS = [        ...,        &quot;escapejson&quot;,        ...,    ]        Then, use the ``escapejson`` library and filter::    {% load escapejson %}    &lt;script&gt;        var my_obj = {{obj_or_str|escapejson}};    &lt;/script&gt;This filter will attempt to JSON-encode any non-string object that is passed to it beforeescaping, or just escape any string that is passed to it.What it protects against========================&lt;/script&gt; attacks-----------------Any string containing a literal ``&lt;/script&gt;`` inside javascript within HTMLscript tags will be interpreted by modern browsers as closing the script tag,resulting at best in broken scripts and syntax errors, and at worst infull-blown XSS.  By escaping all ``/`` characters as ``\/`` (a valid optionalescape in the JSON spec), this is mitigated.U+2028 and U+2029-----------------Two funky unicode whitespace characters count as valid JSON, but cause syntaxerrors in javascript.  This is mitigated by replacing the literal characterswith the strings ``\u2028`` and ``\u2029``.[`reference &lt;http://timelessrepo.com/json-isnt-a-javascript-subset/&gt;`_]</longdescription>
</pkgmetadata>