<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Pyruvate WSGI server====================.. image:: https://gitlab.com/tschorr/pyruvate/badges/main/pipeline.svg   :target: https://gitlab.com/tschorr/pyruvate.. image:: https://codecov.io/gl/tschorr/pyruvate/branch/main/graph/badge.svg   :target: https://codecov.io/gl/tschorr/pyruvate.. image:: http://img.shields.io/pypi/v/pyruvate.svg   :target: https://pypi.org/project/pyruvatePyruvate is a fast, multithreaded `WSGI &lt;https://www.python.org/dev/peps/pep-3333&gt;`_ server implemented in `Rust &lt;https://www.rust-lang.org/&gt;`_.Features--------* Non-blocking read/write using `mio &lt;https://github.com/tokio-rs/mio&gt;`_* Request parsing using `httparse &lt;https://github.com/seanmonstar/httparse&gt;`_* `rust-cpython &lt;https://github.com/dgrunwald/rust-cpython&gt;`_ based Python interface* Worker pool based on `threadpool &lt;https://github.com/rust-threadpool/rust-threadpool&gt;`_* `PasteDeploy &lt;https://pastedeploy.readthedocs.io/en/latest/&gt;`_ entry pointInstallation------------If you are on Linux and use a recent Python version,.. code-block::    $ pip install pyruvateis probably all you need to do.Binary Packages+++++++++++++++`manylinux_2_17 &lt;https://peps.python.org/pep-0600/&gt;`_ and `musllinux_1_1 &lt;https://peps.python.org/pep-0656/&gt;`_ wheels are available for the `x86_64` architecture and active Python 3 versions (currently 3.7-3.11).Source Installation+++++++++++++++++++On macOS or if for any other reason you want to install the source tarball (e.g. using `pip install --no-binary`) you will need to `install Rust &lt;https://doc.rust-lang.org/book/ch01-01-installation.html&gt;`_ first.Development Installation++++++++++++++++++++++++* Install `Rust &lt;https://doc.rust-lang.org/book/ch01-01-installation.html&gt;`__* Install and activate a Python 3 (&gt;= 3.7) `virtualenv &lt;https://docs.python.org/3/tutorial/venv.html&gt;`_* Install `setuptools_rust &lt;https://github.com/PyO3/setuptools-rust&gt;`_ using pip::    $ pip install setuptools_rust* Install Pyruvate, e.g. using pip::    $ pip install -e git+https://gitlab.com/tschorr/pyruvate.git#egg=pyruvate[test]Using Pyruvate in your WSGI application---------------------------------------From Python+++++++++++A hello world WSGI application using Pyruvate listening on 127.0.0.1:7878 and using 2 worker threads looks like this:.. code-block:: python    import pyruvate    def application(environ, start_response):        &quot;&quot;&quot;Simplest possible application object&quot;&quot;&quot;        status = '200 OK'        response_headers = [('Content-type', 'text/plain')]        start_response(status, response_headers, None)        return [b&quot;Hello world!\n&quot;]    pyruvate.serve(application, &quot;127.0.0.1:7878&quot;, 2)Using PasteDeploy+++++++++++++++++Again listening on 127.0.0.1:7878 and using 2 worker threads::    [server:main]    use = egg:pyruvate#main    socket = 127.0.0.1:7878    workers = 2Configuration Options+++++++++++++++++++++socket    Required: The TCP socket Pyruvate should bind to.    `Pyruvate` also supports `systemd socket activation &lt;https://www.freedesktop.org/software/systemd/man/systemd.socket.html&gt;`_    If you specify `None` as the socket value, `Pyruvate` will try to acquire a socket bound by `systemd`.workers    Required: Number of worker threads to use.async_logging    Optional: Log asynchronously using a dedicated thread.    Defaults to `True`.chunked_transfer    Optional: Whether to use chunked transfer encoding if no Content-Length header is present.    Defaults to `False`.keepalive_timeout    Optional: Specify a timeout in integer seconds for keepalive connection.    The persistent connection will be closed after the timeout expires.    Defaults to 60 seconds.max_number_headers    Optional: Maximum number of request headers that will be parsed.    If a request contains more headers than configured, request processing will stop with an error indicating an incomplete request.    The default is 32 headersmax_reuse_count    Optional: Specify how often to reuse an existing connection.    Setting this parameter to 0 will effectively disable keep-alive connections.    This is the default.qmon_warn_threshold    Optional: Warning threshold for the number of requests in the request queue.    A warning will be logged if the number of queued requests reaches this value.    The value must be a positive integer.    The default is `None` which disables the queue monitor.send_timeout    Optional: Time to wait for a client connection to become available for    writing after EAGAIN, in seconds. Connections that do not receive data    within this time are closed.    The value must be a positive integer.    The default is 60 seconds.Logging+++++++Pyruvate uses the standard `Python logging facility &lt;https://docs.python.org/3/library/logging.html&gt;`_.The logger name is `pyruvate`.See the Python documentation (`logging &lt;https://docs.python.org/3/library/logging.html&gt;`_, `logging.config &lt;https://docs.python.org/3/library/logging.config.html&gt;`_) for configuration options.Example Configurations----------------------Django++++++After installing Pyruvate in your Django virtualenv, create or modify your `wsgi.py` file (one worker listening on 127.0.0.1:8000):.. code-block:: python    import os    import pyruvate    from django.core.wsgi import get_wsgi_application    os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;your_django_application.settings&quot;)    application = get_wsgi_application()    pyruvate.serve(application, &quot;127.0.0.1:8000&quot;, 1)You can now start Django + Pyruvate with::    $ python wsgi.pyOverride settings by using the `DJANGO_SETTINGS_MODULE` environment variable when appropriate.Tested with `Django 4.1.x, 3.2.x, 2.2.x &lt;https://www.djangoproject.com/&gt;`_.MapProxy++++++++First create a basic WSGI configuration following the `MapProxy deployment documentation &lt;https://mapproxy.org/docs/latest/deployment.html#server-script&gt;`_.Then modify `config.py` so it is using Pyruvate (2 workers listening on 127.0.0.1:8005):.. code-block:: python    import os.path    import pyruvate    from mapproxy.wsgiapp import make_wsgi_app    application = make_wsgi_app(r'/path/to/mapproxy/mapproxy.yaml')    pyruvate.serve(application, &quot;127.0.0.1:8005&quot;, 2)Start from your virtualenv::    $ python config.pyTested with `Mapproxy 1.15.x, 1.13.x, 1.12.x &lt;https://mapproxy.org/&gt;`_.Plone+++++Using `pip`~~~~~~~~~~~After installing Pyruvate in your Plone virtualenv, change the `server` section in your `zope.ini` file (located in `instance/etc` if you are using `mkwsgiinstance` to create the instance)::    [server:main]    use = egg:pyruvate#main    socket = localhost:7878    workers = 2Using `zc.buildout`~~~~~~~~~~~~~~~~~~~Using `zc.buildout &lt;https://pypi.org/project/zc.buildout/&gt;`_ and `plone.recipe.zope2instance &lt;https://pypi.org/project/plone.recipe.zope2instance&gt;`_ you can define an instance part using Pyruvate's `PasteDeploy &lt;https://pastedeploy.readthedocs.io/en/latest/&gt;`_ entry point::    [instance]    recipe = plone.recipe.zope2instance    http-address = 127.0.0.1:8080    eggs =        Plone        pyruvate    wsgi-ini-template = ${buildout:directory}/templates/pyruvate.ini.inThe `server` section of the template provided with the `wsgi-ini-template &lt;https://pypi.org/project/plone.recipe.zope2instance/#advanced-options&gt;`_ option should look like this (3 workers listening on `http-address` as specified in the buildout `[instance]` part)::    [server:main]    use = egg:pyruvate#main    socket = %(http_address)s    workers = 3There is a minimal buildout example configuration for Plone 5.2 in the `examples directory &lt;https://gitlab.com/tschorr/pyruvate/-/tree/main/examples/plone52&gt;`_ of the package.Tested with `Plone 6.0.x, 5.2.x &lt;https://plone.org/&gt;`_.Pyramid+++++++Install Pyruvate in your Pyramid virtualenv using pip::    $ pip install pyruvateModify the server section in your `.ini` file to use Pyruvate's `PasteDeploy &lt;https://pastedeploy.readthedocs.io/en/latest/&gt;`_ entry point (listening on 127.0.0.1:7878 and using 5 workers)::    [server:main]    use = egg:pyruvate#main    socket = 127.0.0.1:7878    workers = 5Start your application as usual using `pserve`::    $ pserve path/to/your/configfile.iniTested with `Pyramid 2.0, 1.10.x &lt;https://trypyramid.com/&gt;`_.Radicale++++++++You can find an example configuration for `Radicale &lt;https://radicale.org&gt;`_ in the `examples directory &lt;https://gitlab.com/tschorr/pyruvate/-/tree/main/examples/plone52&gt;`_ of the package.Tested with `Radicale 3.1.8 &lt;https://radicale.org&gt;`_.Nginx settings++++++++++++++Like other WSGI servers Pyruvate should be used behind a reverse proxy, e.g. Nginx::    ....    location / {        proxy_pass http://localhost:7878;        ...    }    ...Nginx doesn't use keepalive connections by default so you will need to `modify your configuration &lt;https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive&gt;`_ if you want persistent connections.Changelog=========1.2.1 (2022-12-22)------------------* Track and remove unfinished responses that did not otherwise error (`#23 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/23&gt;`_)* Build musllinux_1_1 wheels (`#24 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/24&gt;`_)1.2.0 (2022-10-26)------------------* Support Python 3.11 and discontinue Python 3.6, switch to manylinux2014 for building wheels (`#19 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/19&gt;`_)* Add a request queue monitor (`#17 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/17&gt;`_)* Remove blocking worker (`#18 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/18&gt;`_)* Improve parsing of Content-Length header (`#20 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/20&gt;`_)1.1.4 (2022-04-19)------------------* Fix handling of empty list responses (`#14 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/14&gt;`_)* Support hostnames in socket addresses (`#15 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/15&gt;`_)1.1.3 (2022-04-11)------------------* Simplify response writing and improve performance (`#12 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/12&gt;`_)* Improve signal handling (`#13 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/13&gt;`_)1.1.2 (2022-01-10)------------------* Migrate to Rust 2021* Use codecov binary uploader* Add CONTRIBUTING.rst* Fixed: The wrk benchmarking tool could make pyruvate hang when there is no Content-Length header (`#11 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/11&gt;`_)1.1.1 (2021-10-12)------------------* Support Python 3.101.1.0 (2021-09-14)------------------* Refactor FileWrapper and improve its performance* Increase the default maximum number of headers* Add `Radicale &lt;https://radicale.org&gt;`_ example configuration* Update development status 1.0.3 (2021-06-05)------------------* HEAD request: Do not complain about content length mismatch (`#4 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/4&gt;`_) * More appropriate log level for client side connection termination (`#5 &lt;https://gitlab.com/tschorr/pyruvate/-/issues/5&gt;`_)* Simplify request parsing1.0.2 (2021-05-02)------------------* Close connection and log an error in the case where the actual content length is  less than the Content-Length header provided by the application* Fix readme1.0.1 (2021-04-28)------------------* Fix decoding of URLs that contain non-ascii characters* Raise Python exception when response contains objects other than bytestrings  instead of simply logging the error.1.0.0 (2021-03-24)------------------* Improve query string handling0.9.2 (2021-01-30)------------------* Better support for HTTP 1.1 Expect/Continue* Improve documentation0.9.1 (2021-01-13)------------------* Improve GIL handling* Propagate worker thread name to Python logging* Do not report broken pipe as error* PasteDeploy entry point: fix option handling0.9.0 (2021-01-06)------------------* Reusable connections* Chunked transfer-encoding* Support macOS0.8.4 (2020-12-12)------------------* Lower CPU usage0.8.3 (2020-11-26)------------------* Clean wheel build directories* Fix some test isolation problems* Remove a println0.8.2 (2020-11-17)------------------* Fix blocksize handling for sendfile case* Format unix stream peer address* Use latest mio0.8.1 (2020-11-10)------------------* Receiver in non-blocking worker must not block when channel is empty0.8.0 (2020-11-07)------------------* Logging overhaul* New async_logging option* Some performance improvements* Support Python 3.9* Switch to manylinux2010 platform tag0.7.1 (2020-09-16)------------------* Raise Python exception when socket is unavailable* Add Pyramid configuration example in readme0.7.0 (2020-08-30)------------------* Use Python logging* Display server info on startup* Fix socket activation for unix domain sockets0.6.2 (2020-08-12)------------------* Improved logging* PasteDeploy entry point now also uses at most 24 headers by default0.6.1 (2020-08-10)------------------* Improve request parsing* Increase default maximum number of headers to 240.6.0 (2020-07-29)------------------* Support unix domain sockets* Improve sendfile usage0.5.3 (2020-07-15)------------------* Fix testing for completed sendfile call in case of EAGAIN0.5.2 (2020-07-15)------------------* Fix testing for completed response in case of EAGAIN* Cargo update0.5.1 (2020-07-07)------------------* Fix handling of read events* Fix changelog* Cargo update* 'Interrupted' error is not a todo* Remove unused code0.5.0 (2020-06-07)------------------* Add support for systemd socket activation0.4.0 (2020-06-29)------------------* Add a new worker that does nonblocking write* Add default arguments* Add option to configure maximum number of request headers* Add Via header0.3.0 (2020-06-16)------------------* Switch to rust-cpython* Fix passing of tcp connections to worker threads0.2.0 (2020-03-10)------------------* Added some Python tests (using py.test and tox)* Improve handling of HTTP headers* Respect content length header when using sendfile0.1.0 (2020-02-10)------------------* Initial release</longdescription>
</pkgmetadata>