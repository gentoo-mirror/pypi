<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Open Kage's useful tools and class to public.(Long time used and upgraded)But, this is develope version.So, suddenly it will be big change when I got some more good idea.I re-groupped to library.and change name to klib# Install```javascriptpip3 install kmisc```# Import functions# Custom Dictionary ClassConvert Dictionary to Object style Dictionary## Contents1. Create tree type items 1. Added New commands   1. Put()    : Put value at a item   1. Get()    : Get value of item   1. Del()    : Delete item   1. Update() : Update value at item   1. Print()  : Print dictionary    1. Diff()   : Compare two dictionary   1. Check()  : Check put the value is same as the item(key)'s value   1. List()   : Return list of keys value    1. Proper() : Show/Set/Update property at the item.   1. Find()   : Find data in the dictionary   1. Load()   : Load saved data from file   1. Save()   : dictionary save to file   1. Sort()   : Sort dictionary   1. FirstKey(): Get first Key    1. FirstKey(): Get first Key 1. Added property at each key- Initialize dictionary ```javascriptfrom kmisc import kDictroot=kDict.kDict()``````javascriptfrom kmisc import kDict&gt;&gt;&gt; test={      'a':123,      'b':{         'c':{'ddd'},         'e':{}      }    }root=kDict.kDict(test)```- Add new data```javascript&gt;&gt;&gt; root.tree.apple.color='red'```or```javascript&gt;&gt;&gt; root.tree.apple.Put('color','red')```or```javascript&gt;&gt;&gt; root.tree.apple['color']='red'```- Get data```javascript&gt;&gt;&gt; root.tree.apple.color.Get()```or```javascript&gt;&gt;&gt; root.tree.apple.Get('color')```- Print dictionary```javascript&gt;&gt;&gt; root.Print()&gt;&gt;&gt; root.tree.Print()```- Set property at Apple's color  - Set readonly```javascript&gt;&gt;&gt; root.tree.apple.color.Proper('readonly',True)```  - Try change data```javascript&gt;&gt;&gt; root.tree.apple.Put('color','white')item is readonly&gt;&gt;&gt; root.tree.Print(){'color': {'._d': 'red', '._p': {'readonly': True}}}```  - Unset readonly```javascript&gt;&gt;&gt; root.tree.apple.color.Proper('readonly',False)```  - Try change data```javascript&gt;&gt;&gt; root.tree.apple.Put('color','white')&gt;&gt;&gt; root.tree.Print(){'color': {'._d': 'red', '._p': {'readonly': True}}}```Sample Dictionary:```javascript{'a': 123, 'b': {'c': set(['ddd']), 'e': {}, 'z': 123}, 'tree': {'apple': {'color': {'._d': 'white', '._p': {'readonly': False}}},          'banana': {'banana2': {'._d': 'white', '._p': {}},                     'banana3': {'._d': 'yellow', '._p': {}},                     'color': {'._d': 'yellow', '._p': {'readonly': True}}},          'yellow': {'monkey': {'._d': 'white', '._p': {}}}}}```  - Find readonly property item path```javascript&gt;&gt;&gt; root.Find('readonly',property=True)['tree/banana/color']```  - Find apple key path```javascript&gt;&gt;&gt; root.Find('apple',mode='key')['tree/apple']```  - Find white color data path```javascript&gt;&gt;&gt; root.Find('white')['tree/apple/color', 'tree/yellow/monkey', 'tree/banana/banana2']```  - Find 123 data path```javascript&gt;&gt;&gt; root.Find('white')['a', 'b/z']```  - Find white color data path in key and value```javascript&gt;&gt;&gt; root.Find('yellow',mode='all')['tree/yellow', 'tree/banana/color', 'tree/banana/banana3']```  - Save Data (always use root if not then save partial data)```javascript&gt;&gt;&gt; from kmisc import kDict&gt;&gt;&gt; kDict.kDict._dfile_='&lt;dict file name&gt;'&gt;&gt;&gt; root.Save()```  - Load Data (always use root if not then load at key)```javascript&gt;&gt;&gt; from kmisc import kDict&gt;&gt;&gt; kDict.kDict._dfile_='&lt;dict file name&gt;'&gt;&gt;&gt; root.Load()```# MISC functionsUseful commandsType : Similar as isinstance(&lt;obj&gt;,(chk,type))```javascript&gt;&gt;&gt; import kmisc as km&gt;&gt;&gt; km.Type('abc','str')&gt;&gt;&gt; True&gt;&gt;&gt; km.Type('abc',str)&gt;&gt;&gt; True```Copy: copy data for list,dict,str,int,tuple...```javascript&gt;&gt;&gt; new_data=Copy(&lt;data&gt;)```Join : Similar as os.path().join()Joining data of bytes,string,....Next: Get data from list,tuple,dict,stringDelete : Delete data in list,tuple,dict,strCOLOR : class for console,html color stringFIND : find string or format data DIFF : diff between dataLIST : handle list()STR: handle stringTIME : handle time formatsSHELL : handle command run,progress,....BYTES: handle byte dataCONVERT : data converterMAC : handle mac addressVERSION : handle versionIP : handle IP addressGET: getting data from anywhereIS: check the data LOG: handle log dataHOST:  handle Host InformationFILE: handle File (Read/Write)WEB: handle web protocol dataEMAIL: handle email dataANSI : handle hansi dataMultiprocessor : handle multi processingFUNCTION: handle function informationSCREEN: handle ipmi SOLCLI : handle Command Line Interface Cut: cutting string to formatGet: Getting data from anywhereReplace : replace string dataInsert : add data Update: update dataprintf : similar as printf in csprintf : similar as sprintf in cSort : sorting datafindXML : Get XML datacat : similar as linux cat commandls : similar as linux ls commandIsSame: check both data is same or notetc...</longdescription>
</pkgmetadata>