<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======rororo======.. image:: https://github.com/playpauseandstop/rororo/actions/workflows/ci.yml/badge.svg    :target: https://github.com/playpauseandstop/rororo/actions/workflows/ci.yml    :alt: CI Workflow.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white    :target: https://github.com/pre-commit/pre-commit    :alt: pre-commit.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black    :alt: black.. image:: https://img.shields.io/pypi/v/rororo.svg    :target: https://pypi.org/project/rororo/    :alt: Latest Version.. image:: https://img.shields.io/pypi/pyversions/rororo.svg    :target: https://pypi.org/project/rororo/    :alt: Python versions.. image:: https://img.shields.io/pypi/l/rororo.svg    :target: https://github.com/playpauseandstop/rororo/blob/main/LICENSE    :alt: BSD License.. image:: https://coveralls.io/repos/playpauseandstop/rororo/badge.svg?branch=main&amp;service=github    :target: https://coveralls.io/github/playpauseandstop/rororo    :alt: Coverage.. image:: https://readthedocs.org/projects/rororo/badge/?version=latest    :target: https://rororo.readthedocs.io/    :alt: DocumentationImplement `aiohttp.web`_ `OpenAPI 3`_ server applications with schema firstapproach.As well as bunch other utilities to build effective server applications with`Python`_ 3 &amp; `aiohttp.web`_.* Works on `Python`_ 3.7+* Works with `aiohttp.web`_ 3.8.1+* BSD licensed* Source, issues, and pull requests `on GitHub  &lt;https://github.com/playpauseandstop/rororo&gt;`_.. _`OpenAPI 3`: https://spec.openapis.org/oas/v3.0.3.. _`aiohttp.web`: https://docs.aiohttp.org/en/stable/web.html.. _`Python`: https://www.python.org/Quick Start===========*rororo* relies on valid OpenAPI 3 schema file (both JSON or YAML formatssupported).Example below, illustrates on how to handle operation ``hello_world`` from`openapi.yaml`_ schema file... code-block:: python    from pathlib import Path    from typing import List    from aiohttp import web    from rororo import (        openapi_context,        OperationTableDef,        setup_openapi,    )    operations = OperationTableDef()    @operations.register    async def hello_world(request: web.Request) -&gt; web.Response:        with openapi_context(request) as context:            name = context.parameters.query.get(&quot;name&quot;, &quot;world&quot;)            email = context.parameters.query.get(                &quot;email&quot;, &quot;world@example.com&quot;            )            return web.json_response(                {&quot;message&quot;: f&quot;Hello, {name}!&quot;, &quot;email&quot;: email}            )    def create_app(argv: List[str] = None) -&gt; web.Application:        return setup_openapi(            web.Application(),            Path(__file__).parent / &quot;openapi.yaml&quot;,            operations,            server_url=&quot;/api&quot;,        ).. _`openapi.yaml`: https://github.com/playpauseandstop/rororo/blob/main/tests/rororo/openapi.yamlSchema First Approach---------------------Unlike other popular Python OpenAPI 3 solutions, such as`Django REST Framework`_, `FastAPI`_,  `flask-apispec`_, or `aiohttp-apispec`_*rororo* **requires** you to provide valid `OpenAPI 3`_ schema first. Thismakes *rororo* similar to `connexion`_, `pyramid_openapi3`_ and other schemafirst libraries... _`Django REST Framework`: https://www.django-rest-framework.org.. _`FastAPI`: https://fastapi.tiangolo.com.. _`flask-apispec`: https://flask-apispec.readthedocs.io.. _`aiohttp-apispec`: https://aiohttp-apispec.readthedocs.io.. _`connexion`: https://connexion.readthedocs.io.. _`pyramid_openapi3`: https://github.com/Pylons/pyramid_openapi3Class Based Views-----------------*rororo* supports `class based views`_ as well. `Todo-Backend`_ exampleillustrates how to use class based views for OpenAPI 3 servers.In snippet below, *rororo* expects that OpenAPI 3 schema contains operation ID``UserView.get``,.. code-block:: python    @operations.register    class UserView(web.View):        async def get(self) -&gt; web.Response:            ..... _`class based views`: https://docs.aiohttp.org/en/stable/web_quickstart.html#aiohttp-web-class-based-views.. _`Todo-Backend`: https://github.com/playpauseandstop/rororo/tree/main/examples/todobackendMore Examples-------------Check `examples`_ folder to see other examples on how to build aiohttp.webOpenAPI 3 server applications... _`examples`: https://github.com/playpauseandstop/rororo/tree/main/examples</longdescription>
</pkgmetadata>