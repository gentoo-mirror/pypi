<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># resA tiny command-line HTTP client. Easily interact with HTTP calls at a faster speed within your terminal. Built on top of the requests library and meant to be a command line wrapper for requests. Current version: v0.1.7```res v0.1.7HTTP it up with python. Use res to make command line http calls. I made this to makethe development of my REST API to be a little bit easier.Usage:  res (-h | --help)  res (-v | --version)  res &lt;method&gt; &lt;url&gt; [options]Options:  -d --data=&lt;data&gt;          Send request data  -H --HEADER=&lt;header&gt;      Defines custom headers  -a --auth=&lt;auth&gt;          Authenticaton with 'user' and 'password' keys  -p --params=&lt;params&gt;      Send request parameters  -b --bytes                Returns content response in bytes  -r --raw                  Returns content response in raw format  -j --json                 Decodes content response from json  -c --cookie=&lt;cookie&gt;      Defines cookies  -x --proxy=&lt;proxy&gt;        Sends proxy with protocal as key and the port as value  -i --include              Include headers  -h --help                 Show this screen.  -v --version              Show version.```# InstallTo download and install res, you must follow the instructions below.### Install via PIP```$ pip install res```### Install via setup.pyFirst you need to get a copy of the source. I'm going to use git and clone it to my local machine. Clone the repository into a folder```git clone https://github.com/jawerty/res.git res```Install with setup.py```$ cd res$ python setup.py install```# UsageExample GET, POST, PUT and DELETE calls```$ res GET http://example.com$ res POST http://example.com$ res PUT http://example.com$ res DELETE http://example.com```Include headers```$ res GET http://example.com -i```Send request data to the body```$ res POST http://example.com -d &quot;{'Hello':'World','REST':'API'}&quot;```Authorization```$ res POST http://example.com -a &quot;{'user':'jawerty','password':'noneofyourbusiness'}&quot;```Parameters```$ res POST http://example.com -p &quot;{ 'q':'names' }&quot; ```### Change data response content (new in v0.1.7)Binary response -&gt; bytes ```$ res GET http://example.com -b```or```$ res GET http://example.com --bytes```Raw socket response -&gt; raw```$ res GET http://example.com -r```or```$ res GET http://example.com --raw```JSON response decoder -&gt; json```$ res GET http://example.com -j```or```$ res GET http://example.com --json```### Interactive ConsoleThe interactive console current (v0.1.7) cannot pass any arguments that require dictionaries (i.e. --data, --proxy, --cookie, etc.). However, arguments like --bytes, --encoding, --raw, etc., are allowed.```$ res console&gt;&gt;&gt; get http://example.com -e `// -e is for encoding`UTF-8&gt;&gt;&gt; get http://example.com`response content....`&gt;&gt;&gt;```There are even more HTTP options that are compatible with res. Run the command at `$ res -h` to see all of the functions res wraps around.# ContactIf you would like to contact me for further information on the project, see the info below.Email: jawerty210@gmail.comGithub: jawertyTwitter: @jawertyBlog: &lt;http://wrightdev.herokuapp.com&gt;</longdescription>
</pkgmetadata>