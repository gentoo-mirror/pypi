<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://i.ibb.co/9V7gLNH/halo-plat.png&quot; alt=&quot;Halo Serverless&quot; border=&quot;0&quot; height=&quot;250&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;# HaloThe **Halo** Lib is a python based library utilizing [**Serverless**](https://logz.io/blog/serverless-vs-containers/) technology and [**microservices architecture**](http://blog.binaris.com/your-guide-to-migrating-existing-microservices-to-serverless/) &lt;p/&gt;Halo provides the following features:-  Flask development for AWS Lambda &amp; Dynamodb-  [correlation id across microservices](https://theburningmonk.com/2017/09/capture-and-forward-correlation-ids-through-different-lambda-event-sources/)-  [structured json based logging](https://theburningmonk.com/2018/01/you-need-to-use-structured-logging-with-aws-lambda/)-  [sample debug log in production](https://theburningmonk.com/2018/04/you-need-to-sample-debug-logs-in-production/)-  [support for microservice transactions with the saga pattern](https://read.acloud.guru/how-the-saga-pattern-manages-failures-with-aws-lambda-and-step-functions-bc8f7129f900)-  [using SSM Parameter Store over Lambda env variables](https://hackernoon.com/you-should-use-ssm-parameter-store-over-lambda-env-variables-5197fc6ea45b)-  [Serverless Error Handling &amp; trace id for end users](https://aws.amazon.com/blogs/compute/error-handling-patterns-in-amazon-api-gateway-and-aws-lambda/)-  [Lambda timeout](https://blog.epsagon.com/best-practices-for-aws-lambda-timeouts) management for [slow HTTP responses](https://theburningmonk.com/2018/01/aws-lambda-use-the-invocation-context-to-better-handle-slow-http-responses/)-  [ootb support for Idempotent service invocations (md5)](https://cloudonaut.io/your-lambda-function-might-execute-twice-deal-with-it/)If you are building a Python web app running on AWS Lambda (Django or Flask), use this library to manage api transactions:```            sagax = load_saga(&quot;test&quot;, jsonx, schema)            payloads = {&quot;BookHotel&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;BookFlight&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;BookRental&quot;: {&quot;abc&quot;: &quot;def&quot;},                        &quot;CancelHotel&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;CancelFlight&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;CancelRental&quot;: {&quot;abc&quot;: &quot;def&quot;}}            apis = {&quot;BookHotel&quot;: self.create_api1, &quot;BookFlight&quot;: self.create_api2, &quot;BookRental&quot;: self.create_api3,                    &quot;CancelHotel&quot;: self.create_api4, &quot;CancelFlight&quot;: self.create_api5, &quot;CancelRental&quot;: self.create_api6}            try:                self.context = Util.get_lambda_context(request)                ret = sagax.execute(self.req_context, payloads, apis)                return {&quot;saga&quot;: &quot;good&quot;}, 200            except SagaRollBack as e:                return {&quot;saga&quot;: &quot;bad&quot;}, 500```## LicenseThis project is licensed under the MIT License## Acknowledgments* Yan Cui - https://theburningmonk.com* flowpl - https://github.com/flowpl/saga_py</longdescription>
</pkgmetadata>