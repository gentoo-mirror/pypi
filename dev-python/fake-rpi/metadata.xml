<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![image](https://raw.githubusercontent.com/MomsFriendlyRobotCompany/fake_rpi/master/pics/pi-python.jpg)# Fake Raspberry Pi[![Actions Status](https://github.com/MomsFriendlyRobotCompany/fake_rpi/workflows/CheckPackage/badge.svg)](https://github.com/MomsFriendlyRobotCompany/fake_rpi/actions)![GitHub](https://img.shields.io/github/license/MomsFriendlyRobotCompany/fake_rpi)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fake_rpi)![PyPI](https://img.shields.io/pypi/v/fake_rpi)[![Downloads](https://img.shields.io/pypi/dm/fake_rpi.svg)](https://img.shields.io/pypi/dm/fake_rpi.svg)**Why??**I do a lot of development on my Powerbook and I got tired of constantlycreating a fake interface for dev on my laptop and testing on Travis.ci or github workflows.-   2017 Apr 2: **Beta Quality**-   2017 Apr 8: **Initial** python3 supportSo, does this simulate everything on a Raspberry Pi? **No!** Right nowit simulates what I use and need. Over time, more will be added. You arealso welcome to submit pull requests for things I haven\'t added yet.|          |                       || -------- | --------------------- || Adafruit | LSM303(accelerometer) || nxp_imu  | adafruit accelerometer|| GPIO     | gpio pins             || picamera | camera                || RPi      | PWM                   || smbus    | i2c                   || serial   | not done yet          |## InstallThe preferred way to install this is:```pip install fake_rpi```## DevelopmentTo submit pull requests for new sensors or fixes, just do:```git clone https://github.com/MomsFriendlyRobotCompany/fake_rpi.gitcd fake_rpipoetry install```Then do a pull request.## UsageTo fake RPi.GPIO or smbus, this followingcode must be executed before your application:```python# Replace libraries by fake onesimport sysimport fake_rpisys.modules['RPi'] = fake_rpi.RPi     # Fake RPisys.modules['RPi.GPIO'] = fake_rpi.RPi.GPIO # Fake GPIOsys.modules['smbus'] = fake_rpi.smbus # Fake smbus (I2C)```Then you can keep your usual imports in your application:```pythonimport RPi.GPIO as GPIOimport smbusGPIO.setmode(io.BCM) # now use the fake GPIOb = GPIO.input(21)sm = smbus.SMBus(1) # now use the fake smbusb = sm.read_byte_data(0x21, 0x32)  # read in a byte```Turning on/off fake calls logging:```pythonfrom fake_rpi import toggle_print# by default it prints everything to std.errortoggle_print(False)  # turn on/off printing```But I need `smbus` to return a specific byte for unit testing! Ok, thencreate a child of my `smbus` like below and modify *only* the methodsyou need changed:```pythonfrom fake_rpi import smbusfrom fake_rpi import printfclass MyBus(smbus.SMBus):    @printf    def read_byte_data(self, i2c_addr, register):        ret = 0xff        if i2c_addr == 0x21:            ret = 0x55        elif i2c_addr == 0x25:            ret = 0x11        return retsm = MyBus()b = sm.read_byte_data(0x21, 0x32)  # read in a byte```### Printing On or OffHere is the output from `example.py` in the `git` repo when the printingis toggled on or off:```kevin@Logan fake_rpi $ ./example.py&lt;&lt;&lt; WARNING: using fake raspberry pi interfaces &gt;&gt;&gt;kevin@Logan fake_rpi $ ./example.py&lt;&lt;&lt; WARNING: using fake raspberry pi interfaces &gt;&gt;&gt;fake_rpi.RPi.PWM.__init__()fake_rpi.RPi.PWM.start(5,)fake_rpi.smbus.SMBus.__init__(1,)fake_rpi.smbus.SMBus.write_byte_data(1, 2, 3)fake_rpi.smbus.SMBus.read_byte_data(1, 2): 21fake_rpi.smbus.SMBus.close()__main__.MyBus.__init__()__main__.MyBus.read_byte_data(1, 2): 72__main__.MyBus.read_i2c_block_data(1, 2, 3): [90, 90, 90]```# Change Log|  Date      | Ver.  | Notes                                         || ---------- | ----- | --------------------------------------------- || 2020-04-03 | 0.7.0 | additions to gpio and camera                  || 2020-02-03 | 0.6.3 | moved to toml and github workflows            || 2019-10-19 | 0.6.2 | fixes from scivision and Rotzbua              || 2019-03-29 | 0.6.1 | bug fix with randint range                    || 2017-11-30 | 0.6.0 | bug fix with printing                         || 2017-10-23 | 0.5.3 | bug fix with randint                          || 2017-09-05 | 0.5.1 | flushing out interfaces                       || 2017-07-07 | 0.3.0 | fixed bugs, print statement, and reduced dups || 2017-04-08 | 0.1.0 | initial python3 setup and support             || 2017-04-02 | 0.0.2 | pushed to pypi with landscape.io fixes        || 2017-04-01 | 0.0.1 | created                                       |# MIT License**Copyright (c) 2017 Kevin J. Walchko**Permission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the&quot;Software&quot;), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>