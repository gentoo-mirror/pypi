<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Labelator.io - python client==========================Python client for **[Labelator.io](https://www.Labelator.io)** - labeling and ML training studio## Install```pip install labelatorio```## Getting your API token![Click on &quot;user&quot; icon in the right-top corner, select &quot;User settings&quot;. Click on Get API token. Copy token into clipboard. ](/docs/get_token.png &quot;Get your api token&quot;)## Docs:Full Labelator.io documentation can be found here [docs.labelator.io](https://docs.labelator.io)Page dedicated this client can be found [here](https://docs.labelator.io/docs/integrations/python_sdk)## Usage### Connecting client``` python    import labelatorio    client = labelatorio.Client(api_token=&quot;your_api_token&quot;)```### Getting project infoPackage requirements are handled using pip. To install them do```python# get project by idexisting_project = client.projects.get(&quot;2fab1778-e8b1-4327-ac83-16dd0e783ab4&quot;)# if you have just nameexisting_project = client.projects.get_by_name(&quot;my name&quot;)# or if you don't know the exact nameexisting_project = client.projects.search(&quot;my name&quot;)```### Adding, updating documents```pythondf = pd.DataFrame({        &quot;key&quot;:[&quot;first&quot;,&quot;second&quot;], # mandatory        &quot;text&quot;:[&quot;this is my first text&quot;, &quot;completely different text...&quot;],  # mandatory        &quot;my_custom_column&quot;:[&quot;note 1&quot;,None] # optional        &quot;labels&quot;:[[&quot;ClassA&quot;],None] #optional if you have labels - should be defined in project    })ids = client.documents.add_documents(project_id, data=df)client.documents.set_labels(project_id,ids[1],[&quot;ClassB&quot;])```### Quering documents```python# simple keyword search ... found = client.documents.search(keyword=&quot;completely different&quot;) # find all documents where &quot;ClassA&quot; was predictedfound = client.documents.search( predicted_label=&quot;ClassA&quot;)# find all documents where &quot;ClassA&quot; was incorrectly predictedfound = client.documents.search( false_positives=&quot;ClassA&quot;)```</longdescription>
</pkgmetadata>