<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================subunit2SQL README==================subunit2SQL is a tool for storing test results data in a SQL database. Likeit's name implies it was originally designed around converting `subunit`_streams to data in a SQL database and the packaged utilities assume a subunitstream as the input format. However, the data model used for the DB does notpreclude using any test result format. Additionally the analysis tooling builton top of a database is data format agnostic. However if you choose to use adifferent result format as an input for the database additional tooling usingthe DB api would need to be created to parse a different test result outputformat. It's also worth pointing out that subunit has several language librarybindings available. So as a user you could create a small filter to convert adifferent format to subunit. Creating a filter should be fairly easy and thenyou don't have to worry about writing a tool like :ref:`subunit2sql` to use adifferent format... _subunit: https://github.com/testing-cabal/subunit/blob/master/README.rstFor multiple distributed test runs that are generating subunit output it isuseful to store the results in a unified repository. This is the motivation forthe `testrepository`_ project which does a good job for centralizing theresults from multiple test runs... _testrepository: http://testrepository.readthedocs.org/en/latest/However, imagine something like the OpenStack CI system where the same basictest suite is normally run several hundreds of times a day. To provide usefulintrospection on the data from those runs and to build trends over timethe test results need to be stored in a format that allows for easy querying.Using a SQL database makes a lot of sense for doing this, which was theoriginal motivation for the project.At a high level subunit2SQL uses alembic migrations to setup a DB schema thatcan then be used by the :ref:`subunit2sql` tool to parse subunit streams andpopulate the DB. Then there are tools for interacting with the stored data inthe :ref:`subunit2sql-graph` command as well as the :ref:`sql2subunit`command to create a subunit stream from data in the database. Additionally,subunit2sql provides a Python DB API that can be used to query information fromthe stored data to build other tooling.- Source: http://git.openstack.org/cgit/openstack-infra/subunit2sql- Bugs, Stories: https://storyboard.openstack.org/#!/project/747Usage=====DB Setup--------The usage of subunit2sql is split into 2 stages. First you need to prepare adatabase with the proper schema; subunit2sql-db-manage should be used to dothis. The utility requires db connection info which can be specified on thecommand or with a config file. Obviously the sql connector type, user,password, address, and database name should be specific to your environment.subunit2sql-db-manage will use alembic to setup the db schema. You can run thedb migrations with the command::    subunit2sql-db-manage --database-connection mysql://subunit:pass@127.0.0.1/subunit upgrade heador with a config file::    subunit2sql-db-manage --config-file subunit2sql.conf upgrade headThis will bring the DB schema up to the latest version for subunit2sql... _subunit2sql:subunit2sql-----------Once you have a database setup with the proper database schema you can then usethe subunit2sql command to populate the database with data from your test runs.subunit2sql takes in a subunit v2 either through stdin or by passing it filepaths as positional arguments to the script. If only a subunit v1 stream isavailable, it can be converted to a subunit v2 stream using the subunit-1to2utility.There are several options for running subunit2sql, they can be listed with::    subunit2sql --helpThe only required option is --database-connection. The options can either beused on the CLI, or put in a config file. If a config file is used you need tospecify the location on the CLI.Most of the optional arguments deal with how subunit2sql interacts with theSQL DB. However, it is worth pointing out that the artifacts option and therun_meta option are used to pass additional metadata into the database for therun(s) being added. The artifacts option should be used to pass in a url orpath that points to any logs or other external test artifacts related to therun being added. The run_meta option takes in a dictionary which will be addedto the database as key value pairs associated with the run being added... _sql2subunit:sql2subunit-----------The sql2subunit utility is used for taking a run_id and creating a subunitv2 stream from the data in the DB about that run. To create a new subunitstream run::    sql2subunit $RUN_IDalong with any options that you would normally use to either specify a configfile or the DB connection info. Running this command will print to stdout thesubunit v2 stream for the run specified by $RUN_ID, unless the --out_pathargument is specified to write it to a file instead.Development===========For development and testing, you need a local database setup. Check``tools/test-setup.sh`` on how the databases need to be configured.ChangeLog=========To see the release notes go here: `http://docs.openstack.org/releasenotes/subunit2sql/ &lt;http://docs.openstack.org/releasenotes/subunit2sql/&gt;`_</longdescription>
</pkgmetadata>