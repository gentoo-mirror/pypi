<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OverviewThis is a package to generate obp files which can e.g be used in Freemelt machines. The package is made to make it easy to implement new strategies for both line and point melting.  # InstallationInstall it by cloning the git reprository or from PyPi using:```bashpip install obpgenerator```# Code overview The code splits a component into three levels Shape, Layer, and Part.Shape consists of one (or several) matplotlib paths which represents the area in the layer that should be manufactured. How this should be manufactured can be controlled by several parameters including:- Resolution (distance between points in point melting)- Melt strategy (can handle different versions of both line and point melting)- Number of scansLayer consist of one or more shapes. On this level you can change which order you want to scan the shapes and if you want to ramp manufacturing settings (successively increase/decrease e.g. energy input) between the scans of a shapePart consist of one or more layers. On this level you can select layer height, scraper settings and other.# Examples2D:Example from examples/snake_cube.py where an svg file file is imported.```bashimport obpgeneratorfile_path1 = &quot;examples\layer_nine_cubes.svg&quot;file_path2 = &quot;examples\layer_15x15_cube.svg&quot;paths = obpgenerator.file_import.import_svg_layer(file_path2)my_layer = obpgenerator.Layer.Layer()my_layer.create_from_mplt_paths(paths)my_layer.set_shapes(0.2)manufacturing_settings = obpgenerator.manufacturing_settings.ManufacturingSetting()manufacturing_settings.set_spot_size(0.1,lower=0.1,upper=1)manufacturing_settings.set_beam_power(1500,lower=1000,upper=2000)manufacturing_settings.set_scan_speed(1,lower=1,upper=2)manufacturing_settings.set_dwell_time(100,lower=50,upper=150)ramp_settings = dict(ramp_beam_power=1,ramp_dwell_time=0,ramp_scan_speed=0,ramp_spot_size=0)my_layer.set_manufacturing_settings(manufacturing_settings)my_layer.sorting_settings = ramp_settingsmy_layer.set_melt_strategies(&quot;line_snake&quot;)my_layer.set_nmb_of_scans(3)my_layer.sorting_strategy = &quot;ramp_manufacturing_settings&quot;my_layer.export_obp(&quot;output.obp&quot;)```3D:Example from examples/example_3D.py where two stl files are imported.```bashimport obpgenerator.Part as Partimport obpgenerator.slicer as slicerimport obpgenerator.manufacturing_settings as manufacturing_settingsstl_files = [&quot;examples\\cube1.stl&quot;, &quot;examples\\cube2.stl&quot;]slices = slicer.slice_stl(stl_files,0.15) #slices the stl files with a layer height of 0.15 mmmy_part = Part.Part()my_part.create_from_mplt_paths(slices)#Sets two different manufacturing settings for the two geometriessettings1 = manufacturing_settings.ManufacturingSetting()settings1.set_spot_size(0.5) #[-]settings1.set_beam_power(1000) #[W]settings1.set_dwell_time(1) #[ns]settings1.set_scan_speed(12) #[micrometers/second] settings2 = manufacturing_settings.ManufacturingSetting()settings1.set_spot_size(0.75) #[-]settings1.set_beam_power(1500) #[W]settings1.set_dwell_time(1) #[ns]settings1.set_scan_speed(10) #[micrometers/second] my_part.set_layers(0.15, settings1, size=60, angle_between_layers=10, melt_strategy=&quot;point_random&quot;, nmb_of_scans=1, sorting_strategy=&quot;shapes_first&quot;) #First we just set one manufacturing settingmy_part.set_settings(manufacturing_settings = [settings1, settings2], melt_strategies=[&quot;line_snake&quot;,&quot;point_random&quot;]) #We can then set different settings for the seperate geometriesmy_part.export_build_file(r&quot;C:\Users\antwi87\Downloads\obp_files&quot;, export_shapes_individual=False) #Exports the build file (each layer will be one obp file, if export_shapes_individual=True each geoemtry will be in seperate obp files)```# To package- Delete old builds in the \dist folder - Update the version in the setup.cfg file- run &quot;python -m build&quot;- upload to pip with &quot;twine upload dist/*&quot;</longdescription>
</pkgmetadata>