<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>hipims_io--------Python code to process input and output files of [HiPIMS flood model](https://www.hemlab.org/models/). This code follows [Google Python Style Guide](http://google.github.io/styleguide/pyguide.html).Python version: &gt;=3.6. The main content of this package is also included in a [Python API of HiPIMS](https://pypims.readthedocs.io/en/latest/).To install hipims_io from command window/terminal:```pip install hipims_io```To install using github repo:```git clone https://github.com/mingxiaodong/hipims_io_python.gitcd hipims_io_pythonpip install .```A quick demonstration to setup a HiPIMS input object with a sample DEM:```import hipims_io as hpobj_in = hp.demo_input() # create an input object and show domain map```A quick demonstration to setup a HiPIMS input object with a data path contaning the following files:- DEM.gz/.asc/.tif (essential file, in projected crs)- rain_mask.gz/.asc/.tif (optional file for setting rainfall, having the same crs with DEM)- rain_source.csv (optional file for setting rainfall rate in timeseries]- landcover.gz/.asc/.tif (optional file for setting landcover-based parameters, having the same crs with DEM)```import osimport hipims_io as hpfrom hipims_io.demo_functions import get_sample_datadem_path, _ = get_sample_data(return_path=True) # get the path of sample datadata_path = os.path.dirname(dem_path)case_folder = os.path.join(os.getcwd(), 'hipims_case') # define a case folder in the current directoryobj_in = hp.InputHipims(case_folder=case_folder, num_of_sections=1,                           data_path=data_path) # create input objectobj_in.domain_show() # show domain mapprint(obj_in) # show case information```A step-by-step tutorial to setup a HiPIMS input object with sample data:```import osimport numpy as npimport hipims_io as hpdem_file, model_data, _ = hp.get_sample_data() # get sample datacase_folder = os.path.join(os.getcwd(), 'hipims_case') # define a case folder in the current directory# create a single-gpu input objectobj_in = hp.InputHipims(dem_data=dem_file, num_of_sections=1, case_folder=case_folder)# set a initial water depth of 0.5 mobj_in.set_initial_condition('h0', 0.5)# set boundary conditionbound_list = model_data['boundary_condition'] # with boundary informationobj_in.set_boundary_condition(bound_list, outline_boundary='fall')# set rainfall mask and sourcerain_source = model_data['rain_source']obj_in.set_rainfall(rain_mask=0, rain_source=rain_source)# set manning parametermanning_array = np.zeros(obj_in.DEM.shape)+0.03 # create an array with the same shape of the DEM arrayobj_in.set_grid_parameter(manning=manning_array)# set monitor positionsgauges_pos = model_data['gauges_pos']obj_in.set_gauges_position(gauges_pos) # display model informationobj_in.domain_show() # show domain mapprint(obj_in) # print model summary# write all input files for HiPIMS to the case folderobj_in.write_input_files() ```The domain map will be shown like this:![Domain map](https://github.com/mingxiaodong/hipims_io_python/blob/master/hipims_io/sample/domain_map.png)</longdescription>
</pkgmetadata>