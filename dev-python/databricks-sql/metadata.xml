<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Databricks SQLDatabricks SQL framework, easy to learn, fast to code, ready for production.## Installation```shell$ pip install databricks-sql```## Configuration```pythonfrom databricks_sql.client import ConfigurationCONFIGURATION = Configuration.instance(    access_token=&quot;&quot;,    command_directory=&quot;&quot;,    http_path=&quot;&quot;,    server_hostname=&quot;&quot;,)```## UsageDatabricks SQL usage description:### Delete#### Delete with where```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .delete(&quot;catalog.schema.table&quot;)        .where(&quot;id&quot;, &quot;994238a4-8c18-436a-8c06-29ec89c4c056&quot;)        .execute()    )```#### Delete with where condition```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .delete(&quot;catalog.schema.table&quot;)        .where(&quot;description&quot;, &quot;%Databricks%&quot;, operator=&quot;LIKE&quot;)        .execute()    )```### Execute```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .execute(            &quot;&quot;&quot;                CREATE TABLE IF NOT EXISTS catalog.schema.table (                    id STRING NOT NULL,                    name STRING NOT NULL,                    description STRING,                    CONSTRAINT table_primary_key PRIMARY KEY(id)                ) USING DELTA            &quot;&quot;&quot;,            parameters=None,            skip_load=True,        )    )```### Insert```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .insert(&quot;catalog.schema.table&quot;)        .set(&quot;id&quot;, &quot;994238a4-8c18-436a-8c06-29ec89c4c056&quot;)        .set(&quot;name&quot;, &quot;Name&quot;)        .set(&quot;description&quot;, &quot;Description&quot;)        .execute()    )```### Paging#### Paging with where condition```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .select(&quot;catalog.schema.table&quot;)        .fields(&quot;id&quot;, &quot;name&quot;, &quot;description&quot;)        .where(&quot;name&quot;, &quot;%Databricks%&quot;, operator=&quot;LIKE&quot;)        .order_by(&quot;id&quot;)        .paging(0, 10)    )```#### Paging without where condition```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .select(&quot;catalog.schema.table&quot;)        .paging(0, 10)    )```### Select#### Fetch all```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .select(&quot;catalog.schema.table&quot;)        .execute()        .fetch_all()    )```#### Fetch many```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .select(&quot;catalog.schema.table&quot;)        .execute()        .fetch_many(1)    )```#### Fetch one```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .select(&quot;catalog.schema.table&quot;)        .execute()        .fetch_one()    )```#### Select by file```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .execute(&quot;command.sql&quot;, {&quot;id&quot;: &quot;994238a4-8c18-436a-8c06-29ec89c4c056&quot;})        .fetch_one()    )```#### Select by command```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .execute(&quot;SELECT id, name, description FROM catalog.schema.table WHERE id = %(id)s&quot;, {&quot;id&quot;: &quot;994238a4-8c18-436a-8c06-29ec89c4c056&quot;})        .fetch_one()    )```### Update#### Update with where```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .update(&quot;catalog.schema.table&quot;)        .set(&quot;name&quot;, &quot;New Name&quot;)        .set(&quot;description&quot;, &quot;New Description&quot;)        .where(&quot;id&quot;, &quot;994238a4-8c18-436a-8c06-29ec89c4c056&quot;)        .execute()    )```#### Update with where all```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .update(&quot;catalog.schema.table&quot;)        .set(&quot;name&quot;, &quot;New Name&quot;)        .set(&quot;description&quot;, &quot;New Description&quot;)        .where_all({&quot;id&quot;: &quot;994238a4-8c18-436a-8c06-29ec89c4c056&quot;, &quot;name&quot;: &quot;Name&quot;, &quot;description&quot;: &quot;Description&quot;})        .execute()    )```### Using mustache#### SQL```sqlselect    id,    name,    descriptionfrom catalog.schema.tablewhere 1 = 1{{#id}}and id = %(id)s{{/id}}{{#name}}and name like %(name)s{{/name}}```#### Select with filters```pythonfrom databricks_sql.client import Databasewith Database() as connection:    (        connection        .execute(&quot;command.sql&quot;, parameters={&quot;id&quot;: &quot;994238a4-8c18-436a-8c06-29ec89c4c056&quot;, &quot;name&quot;: &quot;Name&quot;})        .fetch_one()    )```## LicenseThis project is licensed under the terms of the [Apache License 2.0](https://github.com/bernardocouto/databricks-sql/blob/main/LICENSE).</longdescription>
</pkgmetadata>