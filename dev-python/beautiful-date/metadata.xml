<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Beautiful Date[![PyPI version](https://badge.fury.io/py/beautiful-date.svg)](https://badge.fury.io/py/beautiful-date)[![Tests](https://github.com/kuzmoyev/beautiful-date/workflows/Tests/badge.svg)](https://github.com/kuzmoyev/beautiful-date/actions)[![Downloads](https://pepy.tech/badge/beautiful-date)](https://pepy.tech/project/beautiful-date)Simple and beautiful way to create date and datetime objects in Python.       **Before**:```python3from datetime import date, datetimed = date(year=2018, month=3, day=25)t = datetime(year=2018, month=3, day=25, hour=23, minute=45)```    **After**:```python3from beautiful_date import *d = 25/Mar/2018t = (25/Mar/2018)[23:45]```## Installation```bashpip install beautiful-date```## Examples### Create DateUsing months names:```python3&gt;&gt;&gt; from beautiful_date import *&gt;&gt;&gt; 25/Mar/2018  # European formatBeautifulDate(2018, 3, 25)&gt;&gt;&gt; Mar/25/2018  # US formatBeautifulDate(2018, 3, 25)```    Using months numbers:    ```python3&gt;&gt;&gt; 25/M[3]/2018  # European formatBeautifulDate(2018, 3, 25)&gt;&gt;&gt; M[3]/25/2018  # US formatBeautifulDate(2018, 3, 25)```Or alternatively:```python3&gt;&gt;&gt; D @ 25/3/2018  # European format (default)BeautifulDate(2018, 3, 25)&gt;&gt;&gt; D = MDY()  # Add this at the top of your script to use US format. &gt;&gt;&gt; d = D @ 3/25/2018  # US formatBeautifulDate(2018, 3, 25)```You can also easily retrieve current date as a `BeautifulDate` object and current time using:```python3&gt;&gt;&gt; D.today()BeautifulDate(2020, 8, 24)&gt;&gt;&gt; D.now()datetime.datetime(2020, 8, 24, 0, 59, 12, 451363)&gt;&gt;&gt; D.tomorrow()BeautifulDate(2020, 8, 25)&gt;&gt;&gt; D.yesterday()BeautifulDate(2020, 8, 23)```### Create DatetimePrevious methods create `BeautifulDate` objects which are inherited from `date` but can be easily extended to `datetime` using indexing/slicing: ```python3&gt;&gt;&gt; (Oct/16/1995)[:]datetime.datetime(1995, 10, 16, 0, 0)&gt;&gt;&gt; (Oct/16/1995)[23]datetime.datetime(1995, 10, 16, 23, 0)&gt;&gt;&gt; (Oct/16/1995)[23:14]datetime.datetime(1995, 10, 16, 23, 14)&gt;&gt;&gt; (Oct/16/1995)[23:14:10]datetime.datetime(1995, 10, 16, 23, 14, 10)```You can also use prefix `D @` if you need months by their numbers:        ```python3&gt;&gt;&gt; (D @ 16/10/1995)[:]datetime.datetime(1995, 10, 16, 0, 0)&gt;&gt;&gt; (D @ 16/10/1995)[23]datetime.datetime(1995, 10, 16, 23, 0)&gt;&gt;&gt; (D @ 16/10/1995)[23:14]datetime.datetime(1995, 10, 16, 23, 14)&gt;&gt;&gt; (D @ 16/10/1995)[23:14:10]datetime.datetime(1995, 10, 16, 23, 14, 10)```    ### Date/Datetime manipulations:This library also provides simple interface for [relativedelta](http://dateutil.readthedocs.io/en/stable/relativedelta.html) from [dateutil](http://dateutil.readthedocs.io/en/stable/index.html)Notice that singular time unit (year, month, ...) sets given value, plural (years, months,) adds it.#### Shortcuts:```python&gt;&gt;&gt; 5*days.from_todayBeautifulDate(2023, 9, 17)&gt;&gt;&gt; 1*hours.from_nowdatetime.datetime(2023, 9, 12, 12, 53, 56)&gt;&gt;&gt; 3*days.since(15/Mar/2023)BeautifulDate(2023, 3, 18)&gt;&gt;&gt; 5*days.until_todayBeautifulDate(2023, 9, 7)&gt;&gt;&gt; 1*hours.until_nowdatetime.datetime(2023, 9, 12, 11, 13, 4)&gt;&gt;&gt; 3*days.until(15/Mar/2023)BeautifulDate(2023, 3, 12)```#### Adding/Subtracting/Setting timedeltas:```python3&gt;&gt;&gt; d = 26/Mar/2018&gt;&gt;&gt; t = d[12:23:15]&gt;&gt;&gt; d + 2 * yearsBeautifulDate(2020, 3, 26)&gt;&gt;&gt; d - 2 * daysBeautifulDate(2018, 3, 24)&gt;&gt;&gt; t + 25 * hoursdatetime.datetime(2018, 3, 27, 13, 23, 15)```    Available deltas: `years`, `months`, `weeks`, `days`, `hours`, `minutes`, `seconds`, `microseconds`, `leapdays`(see [relativedelta](http://dateutil.readthedocs.io/en/stable/relativedelta.html)).```python3&gt;&gt;&gt; d = 26/Mar/2018&gt;&gt;&gt; t = d[12:23:15]&gt;&gt;&gt; d + 2022 * yearBeautifulDate(2022, 3, 26)&gt;&gt;&gt; d += 2 * day&gt;&gt;&gt; dBeautifulDate(2018, 3, 2)&gt;&gt;&gt; t + 22 * hourdatetime.datetime(2018, 3, 26, 22, 23, 15)&gt;&gt;&gt; t += 22 * hour&gt;&gt;&gt; tdatetime.datetime(2018, 3, 26, 22, 23, 15)```Available setters: `year`, `month`, `day`, `hour`, `minute`, `second`, `microsecond`,`yearday` and `nlyearday`(see [relativedelta](http://dateutil.readthedocs.io/en/stable/relativedelta.html)).#### Weekdays:Get next Monday:```python3&gt;&gt;&gt; d = 29/Mar/2018  # Thursday&gt;&gt;&gt; d + MO  # Equivalent to MO(1)BeautifulDate(2018, 4, 2)```Get second to next Monday:```python3&gt;&gt;&gt; d = 29/Mar/2018&gt;&gt;&gt; d + MO(2)BeautifulDate(2018, 4, 9)```Get last Saturday:```python3&gt;&gt;&gt; d = 29/Mar/2018&gt;&gt;&gt; d - SABeautifulDate(2018, 3, 24)```Get second to last Saturday:```python3&gt;&gt;&gt; d = 29/Mar/2018&gt;&gt;&gt; d - SA(2)BeautifulDate(2018, 3, 17)```Get second to last Saturday (same as previous):```python3&gt;&gt;&gt; d = 29/Mar/2018&gt;&gt;&gt; d + SA(-2)BeautifulDate(2018, 3, 17)```    ### Util#### drange:You can use `drange` to generate ranges of dates:```python3&gt;&gt;&gt; for d in drange(27/Mar/1994, 5/Apr/1994):...     print(d)1994-03-271994-03-281994-03-291994-03-301994-03-311994-04-011994-04-021994-04-031994-04-04&gt;&gt;&gt; for d in drange(27/Mar/1994, 5/Apr/1994, 2*days):...     print(d)1994-03-271994-03-291994-03-311994-04-021994-04-04```    and datetimes:```python3&gt;&gt;&gt; for dt in drange((27/Mar/1994)[10:25], (4/Apr/1994)[10:10]):...     print(dt)1994-03-27 10:25:001994-03-28 10:25:001994-03-29 10:25:001994-03-30 10:25:001994-03-31 10:25:001994-04-01 10:25:001994-04-02 10:25:001994-04-03 10:25:00&gt;&gt;&gt; for dt in drange((27/Mar/1994)[10:25], (4/Apr/1994)[10:10], 20*hours):...     print(dt)1994-03-27 10:25:001994-03-28 06:25:001994-03-29 02:25:001994-03-29 22:25:001994-03-30 18:25:001994-03-31 14:25:001994-04-01 10:25:001994-04-02 06:25:001994-04-03 02:25:001994-04-03 22:25:00```</longdescription>
</pkgmetadata>