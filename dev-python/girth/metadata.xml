<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![girth-tests Actions Status](https://github.com/eribean/girth/workflows/girth-tests/badge.svg)](https://github.com/eribean/girth/actions)[![codecov](https://codecov.io/gh/eribean/girth/branch/master/graph/badge.svg?token=M7QW1P6V6X)](https://codecov.io/gh/eribean/girth)[![CodeFactor](https://www.codefactor.io/repository/github/eribean/girth/badge)](https://www.codefactor.io/repository/github/eribean/girth)[![PyPI version](https://badge.fury.io/py/girth.svg)](https://badge.fury.io/py/girth)![PyPI - Downloads](https://img.shields.io/pypi/dm/girth?style=flat-square&amp;color=darkgreen)[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg?style=flat-square&amp;color=darkgreen)](https://opensource.org/licenses/MIT)[![DOI](https://zenodo.org/badge/244149937.svg)](https://zenodo.org/badge/latestdoi/244149937)# **G**IRTH: **I**tem **R**esponse **Th**eory[![GIRTH](https://eribean.github.io/girth/featured-background_hubf3811d606e709c4b8d3b39f7338865e_285315_960x540_fill_q75_catmullrom_top.jpg)](https://eribean.github.io/girth/)Girth is a python package for estimating item response theory (IRT) parameters.  In addition, synthetic IRT data generation is supported. Below is a list of available functions, for more information visit the GIRTH [homepage](https://eribean.github.io/girth/).Interested in Bayesian Models? Check out [girth_mcmc](https://github.com/eribean/girth_mcmc). It provides markov chain and variational inference estimation methods.Need general statistical support? Download my other project [RyStats](https://github.com/eribean/RyStats) which implements commonly used statistical functions. These functions are also implemented in an interactive webapp [GoFactr.com](https://gofactr.com) without the need to download or install software.# Item Response Theory## Unidimensional Models### Dichotomous Models1. Rasch Model   * Joint Maximum Likelihood   * Conditional Likelihood   * Marginal Maximum Likelihood2. One Parameter Logistic Models   * Joint Maximum Likelihood   * Marginal Maximum Likelihood3. Two Parameter Logistic Models   * Joint Maximum Likelihood   * Marginal Maximum Likelihood   * Mixed Expected A Prior / Marginal Maximum Likelihood4. Three Parameter Logistic Models   * Marginal Maximum Likelihood (No Optimization and Minimal Support)### Polytomous Models1. Graded Response Model   * Joint Maximum Likelihood   * Marginal Maximum Likelihood   * Mixed Expected A Prior / Marginal Maximum Likelihood2. Partial Credit Model   * Joint Maximum Likelihood   * Marginal Maximum Likelihood3. Graded Unfolding Model   * Marginal Maximum Likelihood### Ablity Estimation1. Dichotomous   * Maximum Likelihood Estimation   * Maximum a Posteriori Estimation   * Expected a Posteriori Estimation2. Polytomous   * Expected a Posteriori Estimation## Multidimensional Models1. Two Parameter Logistic Models   * Marginal Maximum Likelihood2. Graded Response Model   * Marginal Maximum Likelihood### Ablity Estimation1. Dichotomous   * Maximum a Posteriori Estimation   * Expected a Posteriori Estimation2. Polytomous   * Maximum a Posteriori Estimation   * Expected a Posteriori Estimation## Supported Synthetic Data Generation### Unidimensional1. Rasch / 1PL Models Dichotomous Models2. 2 PL Dichotomous Models3. 3 PL Dichotomous Models4. Graded Response Model Polytomous5. Partial Credit Model Polytomous6. Graded Unfolding Model Polytomous### Multidimensional1. Two Parameters Logisitic Models Dichotomous2. Graded Response Models Polytomous# Usage## Standard EstimationTo run girth with unidimensional models.```pythonimport numpy as npfrom girth.synthetic import create_synthetic_irt_dichotomousfrom girth import twopl_mml# Create Synthetic Datadifficulty = np.linspace(-2.5, 2.5, 10)discrimination = np.random.rand(10) + 0.5theta = np.random.randn(500)syn_data = create_synthetic_irt_dichotomous(difficulty, discrimination, theta)# Solve for parametersestimates = twopl_mml(syn_data)# Unpack estimatesdiscrimination_estimates = estimates['Discrimination']difficulty_estimates = estimates['Difficulty']```### Missing DataMissing data is supported with the `tag_missing_data` function.```pythonfrom girth import tag_missing_data, twopl_mml# import data (you supply this function)my_data = import_data(filename)# Assume its dichotomous data with True -&gt; 1 and False -&gt; 0tagged_data = tag_missing_data(my_data, [0, 1])# Run Estimationresults = twopl_mml(tagged_data)```### Multidimensional EstimationGIRTH supports multidimensional estimation but these estimation methods sufferfrom the curse of dimensionality, using more than 3 factors takes a considerable amountof time```pythonimport numpy as npfrom girth.synthetic import create_synthetic_irt_dichotomousfrom girth import multidimensional_twopl_mml# Create Synthetic Datadiscrimination = np.random.uniform(-2, 2, (20, 2))thetas = np.random.randn(2, 1000)difficulty = np.linspace(-1.5, 1, 20)syn_data = create_synthetic_irt_dichotomous(difficulty, discrimination, thetas)# Solve for parametersestimates = multidimensional_twopl_mml(syn_data, 2, {'quadrature_n': 21})# Unpack estimatesdiscrimination_estimates = estimates['Discrimination']difficulty_estimates = estimates['Difficulty']```### Standard ErrorsGIRTH does not use typical hessian based optimization routines and, therefore, *currently* has limited support for standard errors. Confidence Intervals based on bootstrapping aresupported but take longer to run. Missing Data is supported in the bootstrap function as well.The bootstrap does not support the 3PL IRT Model or the GGUM.```pythonfrom girth import twopl_mml, standard_errors_bootstrap# import data (you supply this function)my_data = import_data(filename)results = standard_errors_bootstrap(my_data, twopl_mml, n_processors=4,                                    bootstrap_iterations=1000)print(results['95th CI']['Discrimination'])                                    ```# Factor AnalysisFactor analysis is another common method for latent variable exploration and estimation. These tools are helpful for understanding dimensionality or finding initial estimates of item parameters.## Factor Analysis Extraction Methods1. Principal Component Analysis2. Principal Axis Factor3. Minimum Rank Factor Analysis4. Maximum Likelihood Factor Analysis### Example```pythonimport girth.factoranalysis as gfa# Assume you have converted data into correlation matrixn_factors = 3results = gfa.maximum_likelihood_factor_analysis(corrleation, n_factors)print(results)```## Polychoric Correlation EstimationWhen collected data is ordinal, Pearson's correlation will provide biased estimates of the correlation. Polychoric correlations estimate the correlation given that the data is ordinal and normally distributed.```pythonimport girth.synthetic as gsynimport girth.factoranalysis as gfaimport girth.common as gcmdiscrimination = np.random.uniform(-2, 2, (20, 2))thetas = np.random.randn(2, 1000)difficulty = np.linspace(-1.5, 1, 20)syn_data = gsyn.create_synthetic_irt_dichotomous(difficulty, discrimination, thetas)polychoric_corr = gcm.polychoric_correlation(syn_data, start_val=0, stop_val=1)results_fa = gfa.maximum_likelihood_factor_analysis(polychoric_corr, 2)```# Support## InstallationVia pip```shpip install girth --upgrade```From Source```shpip install . -t $PYTHONPATH --upgrade```## DependenciesWe recommend the anaconda environment which can be installed[here](https://www.anaconda.com/distribution/)* Python &amp;ge; 3.8* Numpy  * Scipy## Unittests**pytest** with coverage.py module```shpytest --cov=girth --cov-report term```# ContactPlease contact me with any questions or feature requests. Thank you!Ryan Sanchez  ryan.sanchez@gofactr.com# LicenseMIT LicenseCopyright (c) 2021 Ryan C. SanchezPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>