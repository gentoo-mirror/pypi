<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># asynch![pypi](https://img.shields.io/pypi/v/asynch.svg?style=flat)![license](https://img.shields.io/github/license/long2ice/asynch)![workflows](https://github.com/long2ice/asynch/workflows/pypi/badge.svg)![workflows](https://github.com/long2ice/asynch/workflows/ci/badge.svg)## Introduction`asynch` is an asyncio ClickHouse Python Driver with native (TCP) interface support, which reuse most of [clickhouse-driver](https://github.com/mymarilyn/clickhouse-driver) and comply with [PEP249](https://www.python.org/dev/peps/pep-0249/).## Install```shell&gt; pip install asynch```## UsageConnect to ClickHouse```pythonfrom asynch import connectasync def connect_database():    conn = await connect(        host = &quot;127.0.0.1&quot;,        port = 9000,        database = &quot;default&quot;,        user = &quot;default&quot;,        password = &quot;&quot;,    )```Create table by sql```pythonasync def create_table():    async with conn.cursor(cursor=DictCursor) as cursor:        await cursor.execute('create database if not exists test')        await cursor.execute(&quot;&quot;&quot;        CREATE TABLE if not exists test.asynch            (                `id`       Int32,                `decimal`  Decimal(10, 2),                `date`     Date,                `datetime` DateTime,                `float`    Float32,                `uuid`     UUID,                `string`   String,                `ipv4`     IPv4,                `ipv6`     IPv6            )            ENGINE = MergeTree                ORDER BY id&quot;&quot;&quot;        )```Use `fetchone````pythonasync def fetchone():    async with conn.cursor() as cursor:        await cursor.execute(&quot;SELECT 1&quot;)        ret = await cursor.fetchone()        assert ret == (1,)```Use `fetchmany````pythonasync def fetchall():    async with conn.cursor() as cursor:        await cursor.execute(&quot;SELECT 1&quot;)        ret = await cursor.fetchall()        assert ret == [(1,)]```Use `DictCursor` to get result with dict```pythonasync def dict_cursor():    async with conn.cursor(cursor=DictCursor) as cursor:        await cursor.execute(&quot;SELECT 1&quot;)        ret = await cursor.fetchall()        assert ret == [{&quot;1&quot;: 1}]```Insert data with dict```pythonfrom asynch.cursors import DictCursorasync def insert_dict():    async with conn.cursor(cursor=DictCursor) as cursor:        ret = await cursor.execute(            &quot;&quot;&quot;INSERT INTO test.asynch(id,decimal,date,datetime,float,uuid,string,ipv4,ipv6) VALUES&quot;&quot;&quot;,            [                {                    &quot;id&quot;: 1,                    &quot;decimal&quot;: 1,                    &quot;date&quot;: &quot;2020-08-08&quot;,                    &quot;datetime&quot;: &quot;2020-08-08 00:00:00&quot;,                    &quot;float&quot;: 1,                    &quot;uuid&quot;: &quot;59e182c4-545d-4f30-8b32-cefea2d0d5ba&quot;,                    &quot;string&quot;: &quot;1&quot;,                    &quot;ipv4&quot;: &quot;0.0.0.0&quot;,                    &quot;ipv6&quot;: &quot;::&quot;,                }            ],        )        assert ret == 1```Insert data with tuple```pythonasync def insert_tuple():    async with conn.cursor(cursor=DictCursor) as cursor:        ret = await cursor.execute(            &quot;&quot;&quot;INSERT INTO test.asynch(id,decimal,date,datetime,float,uuid,string,ipv4,ipv6) VALUES&quot;&quot;&quot;,            [                (                    1,                    1,                    &quot;2020-08-08&quot;,                    &quot;2020-08-08 00:00:00&quot;,                    1,                    &quot;59e182c4-545d-4f30-8b32-cefea2d0d5ba&quot;,                    &quot;1&quot;,                    &quot;0.0.0.0&quot;,                    &quot;::&quot;,                )            ],        )        assert ret == 1```Use connection pool```pythonasync def use_pool():    pool = await asynch.create_pool()    async with pool.acquire() as conn:        async with conn.cursor() as cursor:            await cursor.execute(&quot;SELECT 1&quot;)            ret = await cursor.fetchone()            assert ret == (1,)    pool.close()    await pool.wait_closed()```## ThanksTo- [clickhouse-driver](https://github.com/mymarilyn/clickhouse-driver), ClickHouse Python Driver with native interface support.## LicenseThis project is licensed under the [Apache-2.0](https://github.com/long2ice/asynch/blob/master/LICENSE) License.</longdescription>
</pkgmetadata>