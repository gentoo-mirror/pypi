<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### BioProv - W3C-PROV provenance documents for bioinformaticsCode | [![PyPI Version](https://img.shields.io/pypi/v/bioprov)](https://pypi.org/project/bioprov/) | [![lint](https://github.com/vinisalazar/BioProv/workflows/lint/badge.svg?branch=master)](https://github.com/vinisalazar/BioProv/actions?query=workflow%3Alint) | [![Code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) ---------------|--|--|--Tests | [![Build Status](https://travis-ci.org/vinisalazar/BioProv.svg?branch=master)](https://travis-ci.org/vinisalazar/BioProv) |  [![tests](https://github.com/vinisalazar/bioprov/workflows/tests/badge.svg?branch=master)](https://github.com/vinisalazar/bioprov/actions?query=workflow%3Atests) | [![Coverage Status](https://coveralls.io/repos/github/vinisalazar/BioProv/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/vinisalazar/BioProv?branch=master&amp;service=github)Docs | [![Docs status](https://readthedocs.org/projects/bioprov/badge/?version=latest)](https://bioprov.readthedocs.io/en/latest/?badge=latest) | [![License](https://img.shields.io/github/license/vinisalazar/bioprov)](https://github.com/vinisalazar/BioProv/blob/master/LICENSE) | [![binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/vinisalazar/bioprov/master?filepath=docs%2Ftutorials%2F) BioProv is a Python library for [W3C-PROV](https://www.w3.org/TR/prov-overview/) representation of bioinformatics workflows. It enables you to quickly write workflows and to describe relationships between samples, files, users and programs.Please see the [tutorials](./docs/tutorials/introduction.ipynb) for a more detailed introduction and visit [ReadTheDocs](https://bioprov.readthedocs.io/) for the complete documentation.### Quickstart```py&gt;&gt;&gt; import bioprov as bp# Create samples and file objects&gt;&gt;&gt; sample = bp.Sample(&quot;mysample&quot;)&gt;&gt;&gt; genome = bp.File(&quot;mysample.fasta&quot;, &quot;genome&quot;)&gt;&gt;&gt; sample.add_files(genome)# Create programs&gt;&gt;&gt; output = sample.files[&quot;blast_out&quot;] = bp.File(&quot;mysample.blast.tsv&quot;, &quot;blast_out&quot;)&gt;&gt;&gt; blastn = bp.Program(&quot;blastn&quot;,                        params={&quot;-query&quot;: sample.files[&quot;genome&quot;],                                &quot;-db&quot;: &quot;mydb.fasta&quot;, &quot;-out&quot;: output}                        )&gt;&gt;&gt; sample.add_programs(blastn)# Run programs&gt;&gt;&gt; sample.run_programs()# Save your project&gt;&gt;&gt; proj = bp.Project((sample,), tag=&quot;example_project&quot;)&gt;&gt;&gt; proj.to_json()# Create PROV documents&gt;&gt;&gt; prov = bp.BioProvDocument(proj)# Save in PROVN or graphical format&gt;&gt;&gt; prov.write_provn()  # human-readable text format&gt;&gt;&gt; prov.dot.write_pdf()  # graphical format```BioProv also has a command-line application to run preset workflows.```$ bioprov -husage: bioprov [-h] [--show_config | --show_db | --clear_db | -v | -l]               {genome_annotation,blastn,kaiju} ...BioProv command-line application. Choose a command to begin.optional arguments:  -h, --help            show this help message and exit  --show_config         Show location of config file.  --show_db             Show location of database file.  --clear_db            Clears all records in database.  -v, --version         Show BioProv version  -l, --list            List Projects in the BioProv database.workflows:  {genome_annotation,blastn,kaiju}```BioProv is built with the [Biopython](https://biopython.org/) and [Pandas](http://pandas.pydata.org/) libraries.You can import data into BioProv using Pandas objects.```py# Read csv straight into BioProv&gt;&gt;&gt; samples = bp.read_csv(&quot;my_dataframe.tsv&quot;, sep=&quot;\t&quot;, sequencefile_cols=&quot;assembly&quot;)# Alternatively, use a pandas DataFrame&gt;&gt;&gt; df = pd.read_csv(&quot;my_dataframe.tsv&quot;, sep=&quot;\t&quot;)# [...] manipulate your df&gt;&gt;&gt; df[&quot;assembly&quot;] = &quot;assembly_directory/&quot; + df[&quot;assembly&quot;]# Now load from your df&gt;&gt;&gt; project = bp.from_df(df, sequencefile_cols=&quot;assembly&quot;, source_file=&quot;my_dataframe.tsv&quot;)# `samples` becomes a Project dict-like object&gt;&gt;&gt; sample1 = project['sample1']# You can also export your sample and associated files and attributes as a dataframe&gt;&gt;&gt; project.to_csv()```### Installation```sh# Install from pip$ pip install bioprov# Install from conda$ conda install -c conda-forge -c bioconda bioprov# Install from source$ git clone https://github.com/vinisalazar/bioprov &amp;&amp; cd bioprov;     # download$ conda env create -f environment.yaml &amp;&amp; conda activate bioprov;     # install dependencies$ pip install . &amp;&amp; pytest;                                            # install and test```**Important!** BioProv requires [Prodigal](https://github.com/hyattpd/Prodigal) to be tested. Otherwise tests will fail.Contributions are welcome!**BioProv is in active development and no warranties are provided (please see the License).**### DependenciesBioProv requires the follow dependencies to run. Also see the [setup](./setup.py) and [environment](./environment.yaml) files.- biopython- coolname- coveralls- dataclasses- pandas- prodigal- prov- provstore-api- pydot- pytest- pytest-cov- tqdm- tinydb</longdescription>
</pkgmetadata>