<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>flask-swagger=============A Swagger 2.0 spec extractor for FlaskInstall:::    pip install flask-swaggerFlask-swagger provides a method (swagger) that inspects the Flask appfor endpoints that contain YAML docstrings with Swagger 2.0`Operation &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object&gt;`__objects.::    class UserAPI(MethodView):        def post(self):            &quot;&quot;&quot;            Create a new user            ---            tags:              - users            definitions:              - schema:                  id: Group                  properties:                    name:                     type: string                     description: the group's name            parameters:              - in: body                name: body                schema:                  id: User                  required:                    - email                    - name                  properties:                    email:                      type: string                      description: email for user                    name:                      type: string                      description: name for user                    address:                      description: address for user                      schema:                        id: Address                        properties:                          street:                            type: string                          state:                            type: string                          country:                            type: string                          postalcode:                            type: string                    groups:                      type: array                      description: list of groups                      items:                        $ref: &quot;#/definitions/Group&quot;            responses:              201:                description: User created            &quot;&quot;&quot;            return {}Flask-swagger supports docstrings in methods of MethodView classes andregular Flask view functions.Following YAML conventions, flask-swagger searches for ``---``,everything preceding is provided as ``summary`` (first line) and``description`` (following lines) for the endpoint while everythingafter is parsed as a swagger`Operation &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object&gt;`__object.In order to support inline definition of`Schema &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject&gt;`__objects in`Parameter &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject&gt;`__and`Response &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#responsesObject&gt;`__objects, flask-swagger veers a little off from the standard. We requirean ``id`` field for the inline Schema which is then used to correctlyplace the`Schema &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject&gt;`__object in the`Definitions &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject&gt;`__object.`Schema &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject&gt;`__objects can be defined in a definitions section within the docstrings (see group object above) or within responses or parameters (see user object above). We alo support schema objects nested within the properties of other`Schema &lt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject&gt;`__objects. An example is shown above with the address property of User.To expose your Swagger specification to the world you provide a Flaskroute that does something along these lines::    from flask import Flask, jsonify    from flask_swagger import swagger    app = Flask(__name__)    @app.route(&quot;/spec&quot;)    def spec():        return jsonify(swagger(app))Note that the Swagger specification returned by ``swagger(app)`` is asminimal as it can be. It's your job to override and add to thespecification as you see fit.::    @app.route(&quot;/spec&quot;)    def spec():        swag = swagger(app)        swag['info']['version'] = &quot;1.0&quot;        swag['info']['title'] = &quot;My API&quot;        return jsonify(swag)`Swagger-UI &lt;https://github.com/swagger-api/swagger-ui&gt;`__Swagger-UI is the reason we embarked on this mission to begin with,flask-swagger does not however include Swagger-UI. Simply follow theawesome documentation over at https://github.com/swagger-api/swagger-uiand point your`swaggerUi.url &lt;https://github.com/swagger-api/swagger-ui#swaggerui&gt;`__to your new flask-swagger endpoint and enjoy.AcknowledgmentsFlask-swagger builds on ideas and code from`flask-sillywalk &lt;https://github.com/hobbeswalsh/flask-sillywalk&gt;`__ and`flask-restful-swagger &lt;https://github.com/rantav/flask-restful-swagger&gt;`__</longdescription>
</pkgmetadata>