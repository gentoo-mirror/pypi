<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/pymailtm)](https://pypi.org/project/pymailtm/) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pymailtm)](https://pypi.org/project/pymailtm/) [![CI Status](https://img.shields.io/github/workflow/status/CarloDePieri/pymailtm/prod?logo=github)](https://github.com/CarloDePieri/pymailtm/actions/workflows/prod.yml) [![Coverage Status](https://coveralls.io/repos/github/CarloDePieri/pymailtm/badge.svg?branch=master)](https://coveralls.io/github/CarloDePieri/pymailtm?branch=master) [![Maintenance](https://img.shields.io/maintenance/yes/2022)](https://github.com/CarloDePieri/pymailtm/)This is a command line interface and python web-api wrapper for [mail.tm](https://mail.tm).The api is documented [here](https://api.mail.tm/).## Dependencies`xclip` or `xsel` for clipboard copying.A browser to open incoming html emails.## Installation#### With pip```bashpip install pymailtm```#### In a virtual env```bashpython -m venv .venvsource .venv/bin/activatepip install pymailtm```## UsageThe utility can be called with:```bashpymailtm```Remember that if you are in a virtual env you need to activate it first.By default the command recover the last used account, copy it to the clipboardand wait for a new message to arrive: when it does, it's opened in the browserin a quick&amp;dirty html view.Exit the waiting loop by pressing `Ctrl+c`.Calling the utility with the flag `-l` will print the account credentials, openin the browser the [mail.tm](https://mail.tm) client and exit.The flag `-n` can be used to force the creation of a new account.## Security warningsThis is conceived as an **insecure**, fast throwaway temp mail account generator.**DO NOT** use it with sensitive data.Mails that arrive while the utility is running will be saved in **plain text**files in the system temporary folder (probably `/tmp/`) so that they can beopened by the browser.The last used account's data and credentials will be saved in**plain text** in `~/.pymailtm`.## DevelopmentInstall [invoke](http://pyinvoke.org/) and [poetry](https://python-poetry.org/):```bashpip install invoke poetry```Now clone the git repo:```bashgit clone git@github.com:CarloDePieri/pymailtm.gitcd pymailtminv install```This will try to create a virtualenv based on `python3.7` and install there allproject's dependencies. If a different python version is preferred, it can beselected by specifying  the `--python` (`-p`) flag like this:```bashinv install -p python3.8```The script can now be run directly by launching `inv run`. It also accepts flags,for example:```bashinv run -n```The test suite can be run with commands:```bashinv test         # run the test suiteinv test --full  # run even tests that requires a graphical environmentinv test-spec    # run the tests while showing the output as a spec documentinv test-cov     # run the tests suite and produce a coverage report```Tests take advantage of [vcrpy](https://github.com/kevin1024/vcrpy) to cachenetwork requests and responses. If you need to clear this cache run:```bashinv clear-cassettes```To test the github workflow with [act](https://github.com/nektos/act):```bashinv act-dev           # test the dev workflowinv act-dev -c shell  # open a shell in the act container (the above must fail first!)inv act-dev -c clean  # stop and delete a failed act container```</longdescription>
</pkgmetadata>