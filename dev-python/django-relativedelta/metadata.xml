<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-relativedelta====================.. image:: https://travis-ci.org/CodeYellowBV/django-relativedelta.svg?branch=master   :target: https://travis-ci.org/CodeYellowBV/django-relativedeltaA Django field for the `dateutil.relativedelta.relativedelta &lt;http://dateutil.readthedocs.io/en/stable/relativedelta.html&gt;`_ class,which conveniently maps to the `PostgreSQL INTERVAL type &lt;https://www.postgresql.org/docs/current/static/datatype-datetime.html#DATATYPE-INTERVAL-INPUT&gt;`_.The standard `Django DurationField &lt;https://docs.djangoproject.com/en/1.10/ref/models/fields/#durationfield&gt;`_maps to `Python's datetime.timedelta &lt;https://docs.python.org/3/library/datetime.html#datetime.timedelta&gt;`_, whichhas support for days and weeks, but not for years and months.  And if you try to read an ``INTERVAL`` that containsmonths anyway, information is lost because each month gets converted to 30 days.For compatibility, a `VARCHAR` field is used on other databases.  Thisuses a custom relativedelta representation.  However, this means thattrue in-database interval operations are not supported in thesedatabases.  Sorting and comparing between two relativedelta fields ora relativedelta field and a fixed relativedelta value is supported,however.You should use this package when you need to store payment intervals(which tend to be monthly or quarterly), publication intervals (whichcan be weekly but also monthly) and so on, or when you simply don'tknow what the intervals are going to be and want to offer someflexibility.If you want to use more advanced recurring dates, you should considerusing `django-recurrence &lt;https://github.com/django-recurrence/django-recurrence&gt;`_instead.  This maps to the `dateutil.rrule.rrule &lt;http://dateutil.readthedocs.io/en/stable/rrule.html&gt;`_class, but it doesn't use native database field types, so you can'tperform arithmetic on them within the database.Usage-----Using the field is straightforward.  You can add the field to yourmodel like so:.. code:: python    from django.db import models    from relativedeltafield import RelativeDeltaField    class MyModel(models.Model):      rdfield=RelativeDeltaField()Then later, you can use it:.. code:: python    from dateutil.relativedelta import relativedelta    rd = relativedelta(months=2,days=1,hours=6)    my_model = MyModel(rdfield=rd)    my_model.save()Or, alternatively, you can use a string with the`ISO8601 &quot;format with designators&quot; time interval syntax &lt;https://www.postgresql.org/docs/current/static/datatype-datetime.html#DATATYPE-INTERVAL-INPUT&gt;`_:.. code:: python    from dateutil.relativedelta import relativedelta    my_model = MyModel(rdfield='P2M1DT6H')    my_model.save()For convenience, a standard Python ``datetime.timedelta`` object isalso accepted:.. code:: python    from datetime import timedelta    td = timedelta(days=62,hours=6)    my_model = MyModel(rdfield=td)    my_model.save()After a ``full_clean()``, the object will always be converted to a_normalized_ ``relativedelta`` instance.  It is highly recommendedyou use the `django-fullclean &lt;https://github.com/fish-ball/django-fullclean&gt;`_app to always force ``full_clean()`` on ``save()``, so you can besure that after a ``save()``, your fields are both normalizedand validated.Limitations and pitfalls------------------------Because this field is backed by an ``INTERVAL`` column, it neithersupports the relative ``weekday``, ``leapdays``, ``yearday`` and``nlyearday`` arguments, nor the absolute arguments ``year``,``month``, ``day``, ``hour``, ``second`` and ``microsecond``.The ``microseconds`` field is converted to a fractional ``seconds``value, which might lead to some precision loss due to floating-pointrepresentation.The ``weeks`` field is &quot;virtual&quot;, being derived from the multiple of 7days.  Thus, any week value in the input interval specification isconverted to days and added to the ``days`` field of the interval.When serializing back to a string, weeks will never be written.Similarly, if the interval contains a multiple of 7 days, you can readthis back out from the ``weeks`` property.Support for databases other than PostgreSQL is limited.For consistency reasons, when a relativedelta object is assigned to aRelativeDeltaField, it automatically calls ``normalized()`` on``full_clean``.  This ensures that the database representation is assimilar to the relativedelta as possible (for instance, fractionaldays are always converted to hours).</longdescription>
</pkgmetadata>