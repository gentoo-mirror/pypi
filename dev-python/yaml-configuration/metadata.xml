<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>yaml\_configuration===================This module offers easy configuration for a other modules or startupscripts. It offers an easy way to load and save config files and readand write config values to it. Also trying to read a config value bypassing an optional default value if the real config value is notpresent is supported.Usage=====The class DefaultConfig provides the basic functionality of the package.A custom configuration class is meant to derive from it... code:: python    import os    import logging    from pytest import raises    from yaml_configuration.config import DefaultConfig, ConfigError    def read_file(file_path, filename):        file_path = os.path.join(file_path, filename)        with open(file_path, 'r') as file_pointer:            file_content = file_pointer.read()        return file_content    class BasicConfig(DefaultConfig):        def __init__(self, config_string, config_file, logger_object=None):            super(BasicConfig, self).__init__(config_string, logger_object)            # this is already done in the init            # self.load(config_file, path=os.path.dirname(__file__))    if __name__ == '__main__':        config_file = &quot;basic_config.yaml&quot;        config_string = read_file(os.path.dirname(__file__), config_file)        basic_config = BasicConfig(config_string, config_file, logging.getLogger(&quot;TestLogger&quot;))        basic_config.set_config_value(&quot;number_value&quot;, 10)        basic_config.set_config_value(&quot;string_value&quot;, &quot;test_string&quot;)        assert basic_config.get_config_value(&quot;string_value&quot;) == &quot;test_string&quot;        assert basic_config.get_config_value(&quot;not_existing_config_value&quot;, default=42) == 42        with raises(ConfigError):            if not basic_config.get_config_value(&quot;value_that_should_exist&quot;):                raise ConfigError(&quot;The config value with key 'value_that_should_exist' should exist&quot;)..</longdescription>
</pkgmetadata>