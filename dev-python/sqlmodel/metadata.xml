<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://sqlmodel.tiangolo.com&quot;&gt;&lt;img src=&quot;https://sqlmodel.tiangolo.com/img/logo-margin/logo-margin-vector.svg&quot; alt=&quot;SQLModel&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tiangolo/sqlmodel/actions?query=workflow%3ATest&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/tiangolo/sqlmodel/workflows/Test/badge.svg&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tiangolo/sqlmodel/actions?query=workflow%3APublish&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/tiangolo/sqlmodel/workflows/Publish/badge.svg&quot; alt=&quot;Publish&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/tiangolo/sqlmodel&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/codecov/c/github/tiangolo/sqlmodel?color=%2334D058&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/sqlmodel&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/sqlmodel?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://sqlmodel.tiangolo.com&quot; target=&quot;_blank&quot;&gt;https://sqlmodel.tiangolo.com&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/tiangolo/sqlmodel&quot; target=&quot;_blank&quot;&gt;https://github.com/tiangolo/sqlmodel&lt;/a&gt;---SQLModel is a library for interacting with &lt;abbr title='Also called &quot;Relational databases&quot;'&gt;SQL databases&lt;/abbr&gt; from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust.**SQLModel** is based on Python type annotations, and powered by &lt;a href=&quot;https://pydantic-docs.helpmanual.io/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Pydantic&lt;/a&gt; and &lt;a href=&quot;https://sqlalchemy.org/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;SQLAlchemy&lt;/a&gt;.The key features are:* **Intuitive to write**: Great editor support. &lt;abbr title=&quot;also known as auto-complete, autocompletion, IntelliSense&quot;&gt;Completion&lt;/abbr&gt; everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.* **Easy to use**: It has sensible defaults and does a lot of work underneath to simplify the code you write.* **Compatible**: It is designed to be compatible with **FastAPI**, Pydantic, and SQLAlchemy.* **Extensible**: You have all the power of SQLAlchemy and Pydantic underneath.* **Short**: Minimize code duplication. A single type annotation does a lot of work. No need to duplicate models in SQLAlchemy and Pydantic.## SQL Databases in FastAPI&lt;a href=&quot;https://fastapi.tiangolo.com&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png&quot; style=&quot;width: 20%;&quot;&gt;&lt;/a&gt;**SQLModel** is designed to simplify interacting with SQL databases in &lt;a href=&quot;https://fastapi.tiangolo.com&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;FastAPI&lt;/a&gt; applications, it was created by the same &lt;a href=&quot;https://tiangolo.com/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;author&lt;/a&gt;. üòÅIt combines SQLAlchemy and Pydantic and tries to simplify the code you write as much as possible, allowing you to reduce the **code duplication to a minimum**, but while getting the **best developer experience** possible.**SQLModel** is, in fact, a thin layer on top of **Pydantic** and **SQLAlchemy**, carefully designed to be compatible with both.## RequirementsA recent and currently supported version of Python (right now, &lt;a href=&quot;https://www.python.org/downloads/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Python supports versions 3.6 and above&lt;/a&gt;).As **SQLModel** is based on **Pydantic** and **SQLAlchemy**, it requires them. They will be automatically installed when you install SQLModel.## Installation&lt;div class=&quot;termy&quot;&gt;```console$ pip install sqlmodel---&gt; 100%Successfully installed sqlmodel```&lt;/div&gt;## ExampleFor an introduction to databases, SQL, and everything else, see the &lt;a href=&quot;https://sqlmodel.tiangolo.com&quot; target=&quot;_blank&quot;&gt;SQLModel documentation&lt;/a&gt;.Here's a quick example. ‚ú®### A SQL TableImagine you have a SQL table called `hero` with:* `id`* `name`* `secret_name`* `age`And you want it to have this data:| id | name | secret_name | age |-----|------|-------------|------|| 1  | Deadpond | Dive Wilson | null || 2  | Spider-Boy | Pedro Parqueador | null || 3  | Rusty-Man | Tommy Sharp | 48 |### Create a SQLModel ModelThen you could create a **SQLModel** model like this:```Pythonfrom typing import Optionalfrom sqlmodel import Field, SQLModelclass Hero(SQLModel, table=True):    id: Optional[int] = Field(default=None, primary_key=True)    name: str    secret_name: str    age: Optional[int] = None```That class `Hero` is a **SQLModel** model, the equivalent of a SQL table in Python code.And each of those class attributes is equivalent to each **table column**.### Create RowsThen you could **create each row** of the table as an **instance** of the model:```Pythonhero_1 = Hero(name=&quot;Deadpond&quot;, secret_name=&quot;Dive Wilson&quot;)hero_2 = Hero(name=&quot;Spider-Boy&quot;, secret_name=&quot;Pedro Parqueador&quot;)hero_3 = Hero(name=&quot;Rusty-Man&quot;, secret_name=&quot;Tommy Sharp&quot;, age=48)```This way, you can use conventional Python code with **classes** and **instances** that represent **tables** and **rows**, and that way communicate with the **SQL database**.### Editor SupportEverything is designed for you to get the best developer experience possible, with the best editor support.Including **autocompletion**:&lt;img class=&quot;shadow&quot; src=&quot;https://sqlmodel.tiangolo.com/img/index/autocompletion01.png&quot;&gt;And **inline errors**:&lt;img class=&quot;shadow&quot; src=&quot;https://sqlmodel.tiangolo.com/img/index/inline-errors01.png&quot;&gt;### Write to the DatabaseYou can learn a lot more about **SQLModel** by quickly following the **tutorial**, but if you need a taste right now of how to put all that together and save to the database, you can do this:```Python hl_lines=&quot;18  21  23-27&quot;from typing import Optionalfrom sqlmodel import Field, Session, SQLModel, create_engineclass Hero(SQLModel, table=True):    id: Optional[int] = Field(default=None, primary_key=True)    name: str    secret_name: str    age: Optional[int] = Nonehero_1 = Hero(name=&quot;Deadpond&quot;, secret_name=&quot;Dive Wilson&quot;)hero_2 = Hero(name=&quot;Spider-Boy&quot;, secret_name=&quot;Pedro Parqueador&quot;)hero_3 = Hero(name=&quot;Rusty-Man&quot;, secret_name=&quot;Tommy Sharp&quot;, age=48)engine = create_engine(&quot;sqlite:///database.db&quot;)SQLModel.metadata.create_all(engine)with Session(engine) as session:    session.add(hero_1)    session.add(hero_2)    session.add(hero_3)    session.commit()```That will save a **SQLite** database with the 3 heroes.### Select from the DatabaseThen you could write queries to select from that same database, for example with:```Python hl_lines=&quot;15-18&quot;from typing import Optionalfrom sqlmodel import Field, Session, SQLModel, create_engine, selectclass Hero(SQLModel, table=True):    id: Optional[int] = Field(default=None, primary_key=True)    name: str    secret_name: str    age: Optional[int] = Noneengine = create_engine(&quot;sqlite:///database.db&quot;)with Session(engine) as session:    statement = select(Hero).where(Hero.name == &quot;Spider-Boy&quot;)    hero = session.exec(statement).first()    print(hero)```### Editor Support Everywhere**SQLModel** was carefully designed to give you the best developer experience and editor support, **even after selecting data** from the database:&lt;img class=&quot;shadow&quot; src=&quot;https://sqlmodel.tiangolo.com/img/index/autocompletion02.png&quot;&gt;## SQLAlchemy and PydanticThat class `Hero` is a **SQLModel** model.But at the same time, ‚ú® it is a **SQLAlchemy** model ‚ú®. So, you can combine it and use it with other SQLAlchemy models, or you could easily migrate applications with SQLAlchemy to **SQLModel**.And at the same time, ‚ú® it is also a **Pydantic** model ‚ú®. You can use inheritance with it to define all your **data models** while avoiding code duplication. That makes it very easy to use with **FastAPI**.## LicenseThis project is licensed under the terms of the [MIT license](https://github.com/tiangolo/sqlmodel/blob/main/LICENSE).</longdescription>
</pkgmetadata>