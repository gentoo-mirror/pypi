<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**This package is still under development. Be aware of often updates!**# MaTanShortcut comes from **Mat**erial **An**analysis - ultimately is should contains modules allowinguser to calculate metals and polymers properties from tensile, HDT (polymers) and DSC tests, as wellas the others. There are few similar  packages in PyPI, but none of them I found good to me, so Iwrote new one. For now it includes:- ISO:527-1 (polymers analysis)_**[Documentation](https://matan.codeberg.page)**_# AbstractNowadays, Python is one of the most popular programming languages, even in non-informatics fieldslike mechanical engineering, due to its simplicity, and computer analysis solvers using FEM methodsare part of almost all components, albeit access to material data is sometimes hard due toinadequate data in the datasheets, problems with calculations, inconsistent information, etc. Toovercome this problem, the Python package was created, which allows to calculate the stress,strains, tensile modulus, and other properties from force and elongation data from a machine. Fornow, it includes only polymer tests according to the ISO-527-1 standard, but in the future, otherstandards should be included.Moreover, the package would need a graphical user interface, which could make it even simpler to useand, more importantly, allow users to upload their obtained results into OpenAccess databases andexport plastic strains, tensile modulus, and other properties needed to perform FEM and othernumerical analysis. That could make FEM methods even more accessible, which would lead to a decreasein the use of unnecessary materials and, due to this, less CO2 pollution.# How to use it?Just simply put elongation and force arrays into sample.Be aware that sometimes csv files can have diffrent extension depends on machine manufacturer. To besure just check it using simples notepad, or try to read it by pandas.```pythonimport matan as mtimport pandas as pdpath_to_your_CSV = r&quot;path/to/your/CSV&quot;# BE AWARE# Somethimes some software machines uses diffrent encoding! Check the documentation of pandas.read_csv for moredf = pd.read_csv(path_to_your_CSV)elongation_array=df[&quot;elongation&quot;]force_array=df[&quot;force&quot;]# This uses N ewtons and mm by default to ensure [N/mm^2] as it is equal to MPa# by default force units are Newtons and lenght units are mmexample=mt.sample(    name=&quot;your sample name&quot;,    thickness = 5,    width= 5,    elongation_array=elongation_array,    force_array=force_array)#Use method below to convert engineering values into  realexample.calculate_real_values()# tensile modulus values between engineering value and real valueprint(ext.eng_values.tensile_modulus, ext.real_values.tensile_modulus)## Engineering values# Value of strenghtprint(ext.eng_values.strength.value, ext.eng_values.strength.strain)# Values at breakprint(ext.eng_values.at_break.stress, ext.eng_values.at_break.strain)# Yield strenght valuesprint(ext.eng_values.yield_strength.value, ext.eng_values.yield_strength.strain)## Real values# Value of strenghtprint(ext.real_values.strength.value, ext.real_values.strength.strain)# Values at breakprint(ext.real_values.at_break.stress, ext.real_values.at_break.strain)# Yield strenght valuesprint(ext.real_values.yield_strength.value, ext.real_values.yield_strength.strain)```</longdescription>
</pkgmetadata>