<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CircleCI](https://github.com/marcospereirampj/python-keycloak/actions/workflows/daily.yaml/badge.svg)](https://github.com/marcospereirampj/python-keycloak/)[![Documentation Status](https://readthedocs.org/projects/python-keycloak/badge/?version=latest)](http://python-keycloak.readthedocs.io/en/latest/?badge=latest)# Python KeycloakFor review- see https://github.com/marcospereirampj/python-keycloak**python-keycloak** is a Python package providing access to the Keycloak API.## Installation### Via Pypi Package:`$ pip install python-keycloak`### Manually`$ python setup.py install`## Dependenciespython-keycloak depends on:- Python 3- [requests](https://requests.readthedocs.io)- [python-jose](http://python-jose.readthedocs.io/en/latest/)- [urllib3](https://urllib3.readthedocs.io/en/stable/)### Tests Dependencies- [tox](https://tox.readthedocs.io/)- [pytest](https://docs.pytest.org/en/latest/)- [pytest-cov](https://github.com/pytest-dev/pytest-cov)- [wheel](https://github.com/pypa/wheel)## Bug reportsPlease report bugs and feature requests athttps://github.com/marcospereirampj/python-keycloak/issues## DocumentationThe documentation for python-keycloak is available on [readthedocs](http://python-keycloak.readthedocs.io).## Contributors- [Agriness Team](http://www.agriness.com/pt/)- [Marcos Pereira](marcospereira.mpj@gmail.com)- [Martin Devlin](https://bitbucket.org/devlinmpearson/)- [Shon T. Urbas](https://bitbucket.org/surbas/)- [Markus Spanier](https://bitbucket.org/spanierm/)- [Remco Kranenburg](https://bitbucket.org/Remco47/)- [Armin](https://bitbucket.org/arminfelder/)- [njordr](https://bitbucket.org/njordr/)- [Josha Inglis](https://bitbucket.org/joshainglis/)- [Alex](https://bitbucket.org/alex_zel/)- [Ewan Jone](https://bitbucket.org/kisamoto/)- [Lukas Martini](https://github.com/lutoma)- [Adamatics](https://www.adamatics.com)## Usage```pythonfrom keycloak import KeycloakOpenID# Configure clientkeycloak_openid = KeycloakOpenID(server_url=&quot;http://localhost:8080/auth/&quot;,                                 client_id=&quot;example_client&quot;,                                 realm_name=&quot;example_realm&quot;,                                 client_secret_key=&quot;secret&quot;)# Get WellKnownconfig_well_known = keycloak_openid.well_known()# Get Code With Oauth Authorization Requestauth_url = keycloak_openid.auth_url(    redirect_uri=&quot;your_call_back_url&quot;,    scope=&quot;email&quot;,    state=&quot;your_state_info&quot;)# Get Access Token With Codeaccess_token = keycloak_openid.token(    grant_type='authorization_code',    code='the_code_you_get_from_auth_url_callback',    redirect_uri=&quot;your_call_back_url&quot;)# Get Tokentoken = keycloak_openid.token(&quot;user&quot;, &quot;password&quot;)token = keycloak_openid.token(&quot;user&quot;, &quot;password&quot;, totp=&quot;012345&quot;)# Get token using Token Exchangetoken = keycloak_openid.exchange_token(token['access_token'], &quot;my_client&quot;, &quot;other_client&quot;, &quot;some_user&quot;)# Get Userinfouserinfo = keycloak_openid.userinfo(token['access_token'])# Refresh tokentoken = keycloak_openid.refresh_token(token['refresh_token'])# Logoutkeycloak_openid.logout(token['refresh_token'])# Get Certscerts = keycloak_openid.certs()# Get RPT (Entitlement)token = keycloak_openid.token(&quot;user&quot;, &quot;password&quot;)rpt = keycloak_openid.entitlement(token['access_token'], &quot;resource_id&quot;)# Instropect RPTtoken_rpt_info = keycloak_openid.introspect(keycloak_openid.introspect(token['access_token'], rpt=rpt['rpt'],                                                                       token_type_hint=&quot;requesting_party_token&quot;))# Introspect Tokentoken_info = keycloak_openid.introspect(token['access_token'])# Decode TokenKEYCLOAK_PUBLIC_KEY = &quot;-----BEGIN PUBLIC KEY-----\n&quot; + keycloak_openid.public_key() + &quot;\n-----END PUBLIC KEY-----&quot;options = {&quot;verify_signature&quot;: True, &quot;verify_aud&quot;: True, &quot;verify_exp&quot;: True}token_info = keycloak_openid.decode_token(token['access_token'], key=KEYCLOAK_PUBLIC_KEY, options=options)# Get permissions by tokentoken = keycloak_openid.token(&quot;user&quot;, &quot;password&quot;)keycloak_openid.load_authorization_config(&quot;example-authz-config.json&quot;)policies = keycloak_openid.get_policies(token['access_token'], method_token_info='decode', key=KEYCLOAK_PUBLIC_KEY)permissions = keycloak_openid.get_permissions(token['access_token'], method_token_info='introspect')# Get UMA-permissions by tokentoken = keycloak_openid.token(&quot;user&quot;, &quot;password&quot;)permissions = keycloak_openid.uma_permissions(token['access_token'])# Get UMA-permissions by token with specific resource and scope requestedtoken = keycloak_openid.token(&quot;user&quot;, &quot;password&quot;)permissions = keycloak_openid.uma_permissions(token['access_token'], permissions=&quot;Resource#Scope&quot;)# Get auth status for a specific resource and scope by tokentoken = keycloak_openid.token(&quot;user&quot;, &quot;password&quot;)auth_status = keycloak_openid.has_uma_access(token['access_token'], &quot;Resource#Scope&quot;)# KEYCLOAK ADMINfrom keycloak import KeycloakAdminfrom keycloak import KeycloakOpenIDConnectionkeycloak_connection = KeycloakOpenIDConnection(                        server_url=&quot;http://localhost:8080/&quot;,                        username='example-admin',                        password='secret',                        realm_name=&quot;master&quot;,                        user_realm_name=&quot;only_if_other_realm_than_master&quot;,                        client_id=&quot;my_client&quot;,                        client_secret_key=&quot;client-secret&quot;,                        verify=True)keycloak_admin = KeycloakAdmin(connection=keycloak_connection)# Add usernew_user = keycloak_admin.create_user({&quot;email&quot;: &quot;example@example.com&quot;,                                       &quot;username&quot;: &quot;example@example.com&quot;,                                       &quot;enabled&quot;: True,                                       &quot;firstName&quot;: &quot;Example&quot;,                                       &quot;lastName&quot;: &quot;Example&quot;})# Add user and raise exception if username already exists# exist_ok currently defaults to True for backwards compatibility reasonsnew_user = keycloak_admin.create_user({&quot;email&quot;: &quot;example@example.com&quot;,                                       &quot;username&quot;: &quot;example@example.com&quot;,                                       &quot;enabled&quot;: True,                                       &quot;firstName&quot;: &quot;Example&quot;,                                       &quot;lastName&quot;: &quot;Example&quot;},                                      exist_ok=False)# Add user and set passwordnew_user = keycloak_admin.create_user({&quot;email&quot;: &quot;example@example.com&quot;,                                       &quot;username&quot;: &quot;example@example.com&quot;,                                       &quot;enabled&quot;: True,                                       &quot;firstName&quot;: &quot;Example&quot;,                                       &quot;lastName&quot;: &quot;Example&quot;,                    &quot;credentials&quot;: [{&quot;value&quot;: &quot;secret&quot;,&quot;type&quot;: &quot;password&quot;,}]})# Add user and specify a localenew_user = keycloak_admin.create_user({&quot;email&quot;: &quot;example@example.fr&quot;,                                       &quot;username&quot;: &quot;example@example.fr&quot;,                                       &quot;enabled&quot;: True,                                       &quot;firstName&quot;: &quot;Example&quot;,                                       &quot;lastName&quot;: &quot;Example&quot;,                                       &quot;attributes&quot;: {                                           &quot;locale&quot;: [&quot;fr&quot;]                                       }})# User countercount_users = keycloak_admin.users_count()# Get users Returns a list of users, filtered according to query parametersusers = keycloak_admin.get_users({})# Get user ID from usernameuser_id_keycloak = keycloak_admin.get_user_id(&quot;username-keycloak&quot;)# Get Useruser = keycloak_admin.get_user(&quot;user-id-keycloak&quot;)# Update Userresponse = keycloak_admin.update_user(user_id=&quot;user-id-keycloak&quot;,                                      payload={'firstName': 'Example Update'})# Update User Passwordresponse = keycloak_admin.set_user_password(user_id=&quot;user-id-keycloak&quot;, password=&quot;secret&quot;, temporary=True)# Get User Credentialscredentials = keycloak_admin.get_credentials(user_id='user_id')# Get User Credential by IDcredential = keycloak_admin.get_credential(user_id='user_id', credential_id='credential_id')# Delete User Credentialresponse = keycloak_admin.delete_credential(user_id='user_id', credential_id='credential_id')# Delete Userresponse = keycloak_admin.delete_user(user_id=&quot;user-id-keycloak&quot;)# Get consents granted by the userconsents = keycloak_admin.consents_user(user_id=&quot;user-id-keycloak&quot;)# Send User Actionresponse = keycloak_admin.send_update_account(user_id=&quot;user-id-keycloak&quot;,                                              payload=['UPDATE_PASSWORD'])# Send Verify Emailresponse = keycloak_admin.send_verify_email(user_id=&quot;user-id-keycloak&quot;)# Get sessions associated with the usersessions = keycloak_admin.get_sessions(user_id=&quot;user-id-keycloak&quot;)# Get themes, social providers, auth providers, and event listeners available on this serverserver_info = keycloak_admin.get_server_info()# Get clients belonging to the realm Returns a list of clients belonging to the realmclients = keycloak_admin.get_clients()# Get client - id (not client-id) from client by nameclient_id = keycloak_admin.get_client_id(&quot;my-client&quot;)# Get representation of the client - id of client (not client-id)client = keycloak_admin.get_client(client_id=&quot;client_id&quot;)# Get all roles for the realm or clientrealm_roles = keycloak_admin.get_realm_roles()# Get all roles for the clientclient_roles = keycloak_admin.get_client_roles(client_id=&quot;client_id&quot;)# Get client rolerole = keycloak_admin.get_client_role(client_id=&quot;client_id&quot;, role_name=&quot;role_name&quot;)# Warning: Deprecated# Get client role id from namerole_id = keycloak_admin.get_client_role_id(client_id=&quot;client_id&quot;, role_name=&quot;test&quot;)# Create client rolekeycloak_admin.create_client_role(client_role_id='client_id', payload={'name': 'roleName', 'clientRole': True})# Assign client role to user. Note that BOTH role_name and role_id appear to be required.keycloak_admin.assign_client_role(client_id=&quot;client_id&quot;, user_id=&quot;user_id&quot;, role_id=&quot;role_id&quot;, role_name=&quot;test&quot;)# Retrieve client roles of a user.keycloak_admin.get_client_roles_of_user(user_id=&quot;user_id&quot;, client_id=&quot;client_id&quot;)# Retrieve available client roles of a user.keycloak_admin.get_available_client_roles_of_user(user_id=&quot;user_id&quot;, client_id=&quot;client_id&quot;)# Retrieve composite client roles of a user.keycloak_admin.get_composite_client_roles_of_user(user_id=&quot;user_id&quot;, client_id=&quot;client_id&quot;)# Delete client roles of a user.keycloak_admin.delete_client_roles_of_user(client_id=&quot;client_id&quot;, user_id=&quot;user_id&quot;, roles={&quot;id&quot;: &quot;role-id&quot;})keycloak_admin.delete_client_roles_of_user(client_id=&quot;client_id&quot;, user_id=&quot;user_id&quot;, roles=[{&quot;id&quot;: &quot;role-id_1&quot;}, {&quot;id&quot;: &quot;role-id_2&quot;}])# Get the client authorization settingsclient_authz_settings = get_client_authz_settings(client_id=&quot;client_id&quot;)# Get all client authorization resourcesclient_resources = get_client_authz_resources(client_id=&quot;client_id&quot;)# Get all client authorization scopesclient_scopes = get_client_authz_scopes(client_id=&quot;client_id&quot;)# Get all client authorization permissionsclient_permissions = get_client_authz_permissions(client_id=&quot;client_id&quot;)# Get all client authorization policiesclient_policies = get_client_authz_policies(client_id=&quot;client_id&quot;)# Create new groupgroup = keycloak_admin.create_group({&quot;name&quot;: &quot;Example Group&quot;})# Get all groupsgroups = keycloak_admin.get_groups()# Get groupgroup = keycloak_admin.get_group(group_id='group_id')# Get group by namegroup = keycloak_admin.get_group_by_path(path='/group/subgroup', search_in_subgroups=True)# Function to trigger user sync from providersync_users(storage_id=&quot;storage_di&quot;, action=&quot;action&quot;)# Get client role id from namerole_id = keycloak_admin.get_client_role_id(client_id=client_id, role_name=&quot;test&quot;)# Assign client role to user. Note that BOTH role_name and role_id appear to be required.keycloak_admin.assign_client_role(client_id=client_id, user_id=user_id, role_id=role_id, role_name=&quot;test&quot;)# Assign realm roles to userkeycloak_admin.assign_realm_roles(user_id=user_id, roles=realm_roles)# Assign realm roles to client's scopekeycloak_admin.assign_realm_roles_to_client_scope(client_id=client_id, roles=realm_roles)# Get realm roles assigned to client's scopekeycloak_admin.get_realm_roles_of_client_scope(client_id=client_id)# Remove realm roles assigned to client's scopekeycloak_admin.delete_realm_roles_of_client_scope(client_id=client_id, roles=realm_roles)another_client_id = keycloak_admin.get_client_id(&quot;my-client-2&quot;)# Assign client roles to client's scopekeycloak_admin.assign_client_roles_to_client_scope(client_id=another_client_id, client_roles_owner_id=client_id, roles=client_roles)# Get client roles assigned to client's scopekeycloak_admin.get_client_roles_of_client_scope(client_id=another_client_id, client_roles_owner_id=client_id)# Remove client roles assigned to client's scopekeycloak_admin.delete_client_roles_of_client_scope(client_id=another_client_id, client_roles_owner_id=client_id, roles=client_roles)# Get all ID Providersidps = keycloak_admin.get_idps()# Create a new Realmkeycloak_admin.create_realm(payload={&quot;realm&quot;: &quot;demo&quot;}, skip_exists=False)# Changing Realmkeycloak_admin = KeycloakAdmin(realm_name=&quot;main&quot;, ...)keycloak_admin.get_users() # Get user in main realmkeycloak_admin.realm_name = &quot;demo&quot; # Change realm to 'demo'keycloak_admin.get_users() # Get users in realm 'demo'keycloak_admin.create_user(...) # Creates a new user in 'demo'# KEYCLOAK UMAfrom keycloak import KeycloakOpenIDConnectionfrom keycloak import KeycloakUMAkeycloak_connection = KeycloakOpenIDConnection(                        server_url=&quot;http://localhost:8080/&quot;,                        realm_name=&quot;master&quot;,                        client_id=&quot;my_client&quot;,                        client_secret_key=&quot;client-secret&quot;)keycloak_uma = KeycloakUMA(connection=keycloak_connection)# Create a resource setresource_set = keycloak_uma.resource_set_create({                &quot;name&quot;: &quot;example_resource&quot;,                &quot;scopes&quot;: [&quot;example:read&quot;, &quot;example:write&quot;],                &quot;type&quot;: &quot;urn:example&quot;})# List resource setsresource_sets = uma.resource_set_list()# get resource setlatest_resource = uma.resource_set_read(resource_set[&quot;_id&quot;])# update resource setlatest_resource[&quot;name&quot;] = &quot;New Resource Name&quot;uma.resource_set_update(resource_set[&quot;_id&quot;], latest_resource)# delete resource setuma.resource_set_delete(resource_id=resource_set[&quot;_id&quot;])```</longdescription>
</pkgmetadata>