<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Problem Builder and Step Builder[![Circle CI](https://circleci.com/gh/open-craft/problem-builder.svg?style=svg)](https://circleci.com/gh/open-craft/problem-builder)This repository provides two XBlocks: Problem Builder and Step Builder.Both blocks allow to create questions of various types. They can beused to simulate the workflow of real-life mentoring, within an edXcourse.Supported features include:* **Free-form answers** (textarea) which can be shared accross  different XBlock instances (for example, to allow a student to  review and edit an answer they gave before).* **Self-assessment MCQs** (multiple choice questions), to display  predetermined feedback to a student based on his choices in the  self-assessment. Supports rating scales and arbitrary answers.* **MRQs (Multiple Response Questions)**, a type of multiple choice  question that allows the student to select more than one choice.* **Answer recaps** that display a read-only summary of a user's  answer to a free-form question asked earlier in the course.* **Progression tracking**, to require that the student has  completed a particular step before allowing them to complete the  next step. Provides a link to the next step to the student.* **Tables**, which allow to present answers from the student to  free-form answers in a concise way. Supports custom headers.* **Dashboards**, for displaying a summary of the student's answers  to multiple choice questions. [Details](doc/Dashboard.md)The following screenshot shows an example of a Problem Builder blockcontaining a free-form question, two MCQs and one MRQ:![Problem Builder Example](doc/img/mentoring-example.png)## InstallationYou can install Problem Builder from [PyPI](https://pypi.org/project/xblock-problem-builder/)using this command:```bashpip install xblock-problem-builder```For full details, see &quot;Open edX Installation&quot;, below.## UsageSee [Usage Instructions](doc/Usage.md)## Workbench Installation and Settings### Prerequisites* Python 3.5+* Compiler/build tool chain* Python headers* MySQL development libraries and headers* VirtualenvOn Ubuntu 16.04, these can be installed by running```bashsudo apt-get install build-essential libpython3-dev libmysqlclient-dev virtualenv```### Developer InstallationFor developers, you can install this XBlock into an XBlock SDK workbench's virtualenv.First, create a Python3 virtualenv:```bash~/xblock_development $ virtualenv -p python3 venv~/xblock_development $ . venv/bin/activate```Now run the following commands from the problem builder reporoot to install the problem builder dependencies:```bash(venv) ~/xblock_development/problem-builder $ pip install -r requirements.txt(venv) ~/xblock_development/problem-builder $ pip install -r requirements-dev.txt```Switch to the created XBlock SDK repository, install its dependencies, andcreate its migrations:```bash(venv) ~/xblock_development/problem-builder $ cd ../venv/src/xblock-sdk(venv) ~/xblock_development/venv/src/xblock-sdk $ make requirements```Create the following configuration file in `workbench/settings_pb.py`:```pythonfrom settings import *INSTALLED_APPS += ('problem_builder',)```Testing `problem-builder` in the workbench requires MySQL instead of the standard SQLiteconfiguration it uses. You can quickly spin up an instance of MySQL with Docker using thefollowing command:```bash# -d for detach modedocker run --rm -it -p 3307:3306 -e MYSQL_ROOT_PASSWORD=rootpw -e MYSQL_DATABASE=db -d mysql:5.6```By default, the `xblock-sdk` uses the SQLite database but MySQLcan be used by specifying an environment variable `WORKBENCH_DATABASES` inthe following format.```bashexport WORKBENCH_DATABASES='{&quot;default&quot;: {&quot;ENGINE&quot;: &quot;django.db.backends.mysql&quot;, &quot;NAME&quot;: &quot;db&quot;, &quot;USER&quot;: &quot;root&quot;, &quot;PASSWORD&quot;: &quot;rootpw&quot;, &quot;HOST&quot;: &quot;127.0.0.1&quot;, &quot;PORT&quot;: &quot;3306&quot;}}'```Ensure that the database name and credentials match the ones configured in the docker container.Run this from the XBlock repository root:```bash./manage.py migrate --settings=workbench.settings_pb```Running the workbench---------------------```bash./manage.py runserver 8000 --settings=workbench.settings_pb```Access it at [http://localhost:8000/](http://localhost:8000).Running tests-------------The integration tests require a recent Firefox and geckodriver (CIuses Firefox 70 and geckodriver 0.26). These can be installed locally fortesting if required. For example on Linux:```bashmkdir externalcd externalwget https://archive.mozilla.org/pub/firefox/releases/70.0.1/linux-x86_64/en-US/firefox-70.0.1.tar.bz2tar jxf firefox-70.0.1.tar.bz2wget https://github.com/mozilla/geckodriver/releases/download/v0.26.0/geckodriver-v0.26.0-linux64.tar.gztar xzf geckodriver-v0.26.0-linux64.tar.gzexport PATH=&quot;$(pwd):$(pwd)/firefox/:$PATH&quot;# now can run integration tests using this firefox versioncd ..make test.integration```From the problem-builder repository root, run the tests with thefollowing command:```bashmake test```See also the following for more scoped tests:```bashmake qualitymake test.unitmake test.integration```Debugging CI Failures---------------------Sometimes it can be hard to figure out why some tests fail in the CI.When Circle CI browser based tests fail for unknown reasons, it can be helpful to run them with VNC enabledso that you can observe the browser (or even interact with it) while the tests are running.To enable VNC on Circle CI, first re-run the failing test with SSH enabled: in the Circle CI UI,click the &quot;Rerun&quot; dropdown and select &quot;Rerun Job with SSH&quot;. The job will be re-run with SSH enabled.You can find the IP/port combination that lets you log into the VM with your github SSH key under the &quot;Enable SSH&quot;step in the pipeline UI.SSH into the VM, forwarding the VNC port:```bashssh -p &lt;port&gt; &lt;ip-address&gt; -L 5900:localhost:5900```Install the required packages:```bashsudo apt-get install -yq xvfb x11vnc fluxbox```Start up xvfb and the VNC server:```bashrm -f /tmp/.X$(echo ${DISPLAY:-:0} | cut -b2-)-lockXvfb ${DISPLAY:-:0} -ac -listen tcp -screen 0 1440x900x24 &amp;/usr/bin/fluxbox -display ${DISPLAY:-:0} -screen 0 &amp;x11vnc -display ${DISPLAY:-:0} -forever -noxdamage -rfbport 5900 -quiet -passwd pass &amp;```You should now be able to connect to the server via VNC. On macOS, you can use the built-in VNC viewerthat you can launch by opening Finder and choosing the &quot;Go -&gt; Connect to Server..&quot; from the menu.Type in `localhost:5900` and enter `pass` when asked for the password.You are all set up to run integration tests with screen sharing enabled.For some reason Firefox does not want to start in foreground mode when run as non-root,so you'll have to run the tests as root.```bashunset MOZ_HEADLESScd /home/circleci/projectsource venv/bin/activatemake test```Working with Translations-------------------------For information about working with translations, see the[Internationalization Support](http://edx.readthedocs.io/projects/xblock-tutorial/en/latest/edx_platform/edx_lms.html#internationalization-support)section of the [Open edX XBlock Tutorial](https://xblock-tutorial.readthedocs.io/en/latest/).[Prepare your virtualenv](#workbench-installation-and-settings) and ensure that the[Transifex authentication file](https://openedx.atlassian.net/wiki/display/OpenOPS/Running+Fullstack)(``~/.transifexrc``) is properly set up.Push new strings to Transifex:```bash$ make extract_translations$ make push_translations```To get the latest translations from Transifex:```bash$ make pull_translations$ make compile_translations```For testing purposes it's faster to avoid Transifex and work on dummy Esperanto translations:```bash$ make build_dummy_translations```The Transifex configuration is stored in `.tx`. For more information read[transifex's documentation](https://docs.transifex.com/client/client-configuration)If you want to add a new language:  1. Add language to `problem_builder/translations/config.yaml`  2. Make sure all tagged strings have been extracted and push to Transifex as described above.  3. Go to Transifex and translate both of the     [Problem Builder](https://www.transifex.com/open-edx/xblocks/problem-builder/)     and the [Problem Builder JS](https://www.transifex.com/open-edx/xblocks/problem-builder-js/) resources.  4. When you're done with the translations pull from Transifex as described above.Adding custom scenarios to the workbench----------------------------------------Within the xblock-problem-builder repository, create the `templates/xml` andadd XML scenarios to it - all files with the `*.xml` extension will beautomatically loaded by the workbench:```bash$ mkdir templates/xml$ cat &gt; templates/xml/my_pb_scenario.xml```Restart the workbench to take the new scenarios into account.Upgrading from Version 1------------------------To upgrade a course from xblock-mentoring (&quot;v1&quot;) to xblock-problem-builder(&quot;v2&quot;), run the following command on a system with edx-platform,xblock-mentoring, and xblock-problem-builder installed:```bash$ SERVICE_VARIANT=cms DJANGO_SETTINGS_MODULE=&quot;cms.envs.devstack&quot; python -m problem_builder.v1.upgrade &quot;Org/Course/Run&quot;```Where &quot;Org/Course/Run&quot; is replaced with the ID of the course to upgrade.Open edX Installation---------------------Problem Builder releases are tagged with a version number, e.g.[`v2.6.0`](https://github.com/open-craft/problem-builder/tree/v2.6.0),[`v2.6.5`](https://github.com/open-craft/problem-builder/tree/v2.6.5).  We recommend installing the most recently taggedversion, with the exception of the following compatibility issues:* `edx-platform` version `open-release/ironwood.2` and earlier must use versions &lt; 4.0.0. See  [PR 262](https://github.com/open-craft/problem-builder/pull/262) for details.* `edx-platform` version `open-release/eucalyptus.2` and earlier must use  ≤[v2.6.0](https://github.com/open-craft/problem-builder/tree/v2.6.0).  See  [PR 128](https://github.com/open-craft/problem-builder/pull/128) for details.* `edx-platform` version `named-release/dogwood.3` and earlier must use  [v2.0.0](https://github.com/open-craft/problem-builder/tree/v2.0.0).The `edx-platform` `master` branch will generally always be compatible with the most recent Problem Builder tag.  See[the EDXAPP_PRIVATE_REQUIREMENTS setting](https://github.com/edx/configuration/blob/master/playbooks/roles/edxapp/defaults/main.yml) for the versioncurrently installed on [edx.org](https://edx.org).To install new versions of Problem Builder (v3.1.3+), use `pip install xblock-problem-builder` or specify a version using e.g. `pip install xblock-problem-builder==3.1.3`. To do this on Open edX could look like:```bash$ sudo -Hu edxapp bashedxapp $ cd &amp;&amp; . edxapp_env  &amp;&amp; . ./venvs/edxapp/bin/activate &amp;&amp; cd edx-platform/edxapp $ pip install xblock-problem-builderedxapp $ ./manage.py lms migrate --settings=aws  # or openstack, as appropriate```Then, restart the edxapp services:```bash$ sudo /edx/bin/supervisorctl restart edxapp:$ sudo /edx/bin/supervisorctl restart edxapp_workers:```To install old verions of Problem Builder (&lt; v3.1.3) on an Open edX installation, choose the tag you wish to install, follow the above instructions but instead of the `pip install xblock-problem-builder` command, use:```bashTAG='v2.6.5' pip install &quot;git+https://github.com/open-craft/problem-builder.git@$TAG#egg=xblock-problem-builder==$TAG&quot;```Note that Problem Builder requires [xblock-utils](https://github.com/edx/xblock-utils).If you are installing it into a virtualenv used by edx-platform, xblock-utils shouldalready be installed. But if you are installing it into another virtualenv, you mayneed to first install xblock-utils manually (recent versions of it are not availableon PyPI so will not be automatically installed).See [Usage Instructions](doc/Usage.md) for how to enable in Studio.Publishing to PyPI------------------Whenever we tag a new version, e.g. `v3.1.3` and push it to GitHub, CircleCI willbuild it and deploy it to PyPI automatically. For details on how this works, see[this pull request](https://github.com/open-craft/problem-builder/pull/199).License-------This XBlock is available under the GNU Affero General Public License (AGPLv3).</longdescription>
</pkgmetadata>