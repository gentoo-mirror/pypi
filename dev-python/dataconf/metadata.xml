<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dataconf[![Actions Status](https://github.com/zifeo/dataconf/workflows/CI/badge.svg)](https://github.com/zifeo/dataconf/actions)[![PyPI version](https://badge.fury.io/py/dataconf.svg)](https://badge.fury.io/py/dataconf)Simple dataclasses configuration management for Python withhocon/json/yaml/properties/env-vars/dict/cli support.## Getting startedRequires at least Python 3.8.```bash# pypipip install dataconfpoetry add dataconf# remote masterpip install --upgrade git+https://github.com/zifeo/dataconf.gitpoetry add git+https://github.com/zifeo/dataconf.git# local repo/devpoetry installpre-commit install```## Usage```pythonimport osfrom dataclasses import dataclass, fieldfrom typing import List, Dict, Text, Unionfrom dateutil.relativedelta import relativedeltafrom datetime import datetimeimport dataconfconf = &quot;&quot;&quot;str_name = teststr_name = ${?HOME}dash-to-underscore = truefloat_num = 2.2iso_datetime = &quot;2000-01-01T20:00:00&quot;# this is a commentlist_data = [    a    b]nested {    a = test    b : 1}nested_list = [    {        a = test1        b : 2.5    }]duration = 2sunion = 1people {    name = Thailand}zone {    area_code = 42}&quot;&quot;&quot;class AbstractBaseClass:    pass    @dataclassclass Person(AbstractBaseClass):    name: Text        @dataclassclass Zone(AbstractBaseClass):    area_code: int@dataclassclass Nested:    a: Text    b: float@dataclassclass Config:    str_name: Text    dash_to_underscore: bool    float_num: float    iso_datetime: datetime    list_data: List[Text]    nested: Nested    nested_list: List[Nested]    duration: relativedelta    union: Union[Text, int]    people: AbstractBaseClass    zone: AbstractBaseClass    default: Text = 'hello'    default_factory: Dict[Text, Text] = field(default_factory=dict)print(dataconf.string(conf, Config))# Config(#   str_name='/users/root',#   dash_to_underscore=True,#   float_num=2.2,#   list_data=['a', 'b'],#   nested=Nested(a='test'),#   nested_list=[Nested(a='test1', b=2.5)],#   duration=relativedelta(seconds=+2), #   union=1, #   people=Person(name='Thailand'), #   zone=Zone(area_code=42),#   default='hello', #   default_factory={}# )@dataclassclass Example:    hello: str    world: str    foo: List[str]os.environ['DC_WORLD'] = 'monde'print(    dataconf    .multi    .url('https://raw.githubusercontent.com/zifeo/dataconf/main/confs/simple.hocon')    .env('DC')    .on(Example))# Example(hello='bonjour',world='monde')```## API```pythonimport dataconfconf = dataconf.string('{ name: Test }', Config)conf = dataconf.string('name:\n\tvalue: Test', Config, loader=dataconf.YAML)  # dataconf.HOCON by defaultconf = dataconf.env('PREFIX_', Config)conf = dataconf.dict({'name': 'Test'}, Config)conf = dataconf.url('https://raw.githubusercontent.com/zifeo/dataconf/master/confs/test.hocon', Config)  # hocon, json, yaml, propertiesconf = dataconf.file('confs/test.hocon', Config)  # hocon, json, yaml, propertiesconf = dataconf.cli(sys.argv, Config)# Aggregationconf = dataconf.multi.string(...).env(...).url(...).file(...).dict(...).cli(...).on(Config)# Same api as Python json/yaml packages (e.g. `load`, `loads`, `dump`, `dumps`)conf = dataconf.load('confs/test.hocon', Config)  # hocon, json, yaml, propertiesconf = dataconf.load('confs/test.yaml', Config, loader=dataconf.YAML)  # dataconf.HOCON by defaultdataconf.dump('confs/test.hocon', conf, out='hocon')dataconf.dump('confs/test.json', conf, out='json')dataconf.dump('confs/test.yaml', conf, out='yaml')dataconf.dump('confs/test.properties', conf, out='properties')```For full HOCON capabilities see[here](https://github.com/chimpler/pyhocon/#example-of-hocon-file).## Parse env vars```bashPREFIX_VAR=aPREFIX_VAR_NAME=bPREFIX_TEST__NAME=cPREFIX_LS_0=dPREFIX_LS_1=ePREFIX_LSLS_0_0=fPREFIX_LSOB_0__NAME=gPREFIX_NESTED_=&quot;{ name: Test }&quot;PREFIX_SUB_=&quot;{ value: ${PREFIX_VAR} }&quot;```is equivalent to```{    var = a    var_name = b    test {        name = c    }    ls = [        d        e    ]    lsls = [        [            f        ]    ]    lsob = [        {            name = g        }    ]    nested {        # parse nested config by suffixing env var with `_`        name: Test    }    sub {        # will have value &quot;a&quot; at parsing, useful for aliases        value = ${PREFIX_VAR}    }}```Note that when using `.env` source, the strict mode is disabled and value mightbe casted.## Parse CLI argumentsSame as env vars parse (dashes are converted to underscore, e.g. `TEST_A` â†’`--test-a`).## CLI usageCan be used for validation or converting between supported file formats (`-o`).```shelldataconf -c confs/test.hocon -m tests.configs -d TestConf -o hocon# dataconf.exceptions.TypeConfigException: expected type &lt;class 'datetime.timedelta'&gt; at .duration, got &lt;class 'int'&gt;```</longdescription>
</pkgmetadata>