<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Network AutomationAn *Ansible like* Network Automation Framework, Using Python OOP and Netmiko to interface with Cisco IOS, VyOS, EdgeOS network devices.# Usage## Example 1: Getting Basic Device Information from a VyOS Router Importing the class from the package.```pyfrom net_automation import net_automation```Creating an instance of the VyOS class, with specified parameters.```pyrouter_1 = net_automation.Vyos(    &quot;router-1.com&quot;,                                                      # Hostname/IP    &quot;username&quot;,                                                          # Username    &quot;&quot;,                                                                  # Password       True,                                                                # Boolean switch for using SSH Keys. (password not needed if True)    &quot;/home/user/.ssh/id_rsa&quot;,                                            # SSH Key file location    &quot;&quot;)                                                                  # Secret (left empty, as Cisco Only)```Establishing the SSH connection to &quot;router_1&quot; and getting interfaces.```pyrouter_1.init_ssh()                                                      # Creates the SSH connection to the VyOS routerprint (router_1.get_interfaces())                                        # Returns Interfaces from the VyOS routerCodes: S - State, L - Link, u - Up, D - Down, A - Admin DownInterface        IP Address                        S/L  Description---------        ----------                        ---  -----------eth0             a.b.c.d/23                        u/u  WAN lo               127.0.0.1/8                       u/u  dn42-vyos                  10.100.100.4/32                 ::1/128wg12             172.22.132.170/30                 u/u  p2p_usman ```Getting a traceroute to &quot;8.8.8.8&quot;.```pyprint (router_1.get_route(&quot;8.8.8.8&quot;))                                   # Returns traceroute to specific IPtraceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets 1  vlan32.core01.lil01.fr.virtua.systems (185.154.155.1)  0.633 ms  0.483 ms  0.350 ms 2  po31.core02.lil01.fr.virtua.systems (188.214.24.177)  0.266 ms  0.125 ms  0.145 ms 3  188.214.24.20 4.866 ms  4.867 ms  4.848 ms 4  google1.par.franceix.net (37.49.237.172)  8.769 ms  9.160 ms  8.835 ms 5  108.170.244.161 9.585 ms 108.170.244.225 9.982 ms 108.170.244.161 9.647 ms 6  216.239.48.43 8.850 ms 142.250.224.197 15.357 ms 216.239.48.45 9.662 ms 7  dns.google (8.8.8.8)  9.607 ms  8.734 ms  9.453 ms```Storing returned route table and configuration in variables.```configuration = (router_1.get_config())                                route_table = (router_1.get_route_table())```---## Example 2: Generating and Deploying Configurations to a VyOS Router.### .py file```pyfrom net_automation import net_automationnet_automation.Vyos.deploy_yaml(&quot;router.yml&quot;)```Executing the Python script should generate and deploy configs, based on the contents of the YAML file. ### `router.yml` file```yamlrouters:  - name: &quot;vyos-dn42-01&quot;    SSH_conf:      hostname: &quot;10.0.0.1&quot;      username: &quot;username&quot;      password: &quot;&quot;      use_keys: True      key_location: &quot;C:\\Users\\user\\.ssh\\id_rsa&quot;      secret: &quot;&quot;        firewalls:      - name: &quot;WAN_Local&quot;        state: &quot;present&quot;        default_action: &quot;drop&quot;        rules:          - rule_no: &quot;10&quot;            state: &quot;present&quot;            action: &quot;accept&quot;            desc: &quot;accept SSH&quot;            dest: &quot;port 22&quot;            source: &quot;&quot;            protocol: &quot;tcp_udp&quot;          - rule_no: &quot;30&quot;            state: &quot;present&quot;            action: &quot;accept&quot;            desc: &quot;accept wg 51890&quot;            dest: &quot;port 51890&quot;            source: &quot;&quot;            protocol: &quot;udp&quot;          - rule_no: &quot;90&quot;            state: &quot;present&quot;            action: &quot;accept&quot;            desc: &quot;allow estab related traffic&quot;            states:              - name: &quot;established&quot;                status: &quot;present&quot;              - name: &quot;related&quot;                status: &quot;enabled&quot;    interfaces:      - name: &quot;eth0&quot;        type: &quot;ethernet&quot;        state: &quot;present&quot;        ip: &quot;dhcp&quot;        mask: &quot;&quot;        desc: &quot;WAN&quot;      - name: &quot;lo&quot;        type: &quot;loopback&quot;        state: &quot;present&quot;        ip: &quot;10.100.100.4&quot;        mask: &quot;/32&quot;        desc: &quot;&quot;    static:      - type: &quot;interface-route&quot;        network: &quot;172.20.16.141/32&quot;        nexthop: &quot;wg15&quot;        distance: &quot;&quot;        state: &quot;present&quot;    bgpasn: &quot;4242421869&quot;    bgp_prefixes:      - prefix: &quot;172.22.132.160&quot;        mask: &quot;/27&quot;        address_family: &quot;ipv4-unicast&quot;        state: &quot;present&quot;    bgp_peers:      - ip: &quot;172.20.53.104&quot;        state: &quot;present&quot;        remote_as: &quot;4242423914&quot;        ebgp_multihop: &quot;255&quot;        desc: &quot;kioubit&quot;        route_maps:          - route_map: &quot;DN42-ROA&quot;            action: &quot;import&quot;            state: &quot;present&quot;          - route_map: &quot;DN42-ROA&quot;            action: &quot;export&quot;            state: &quot;present&quot;```## Example 3: Backing up device configurations.Creating instances CiscoIOS and EdgeOS classes, for Cisco switches and Ubiquiti switches.```pycisco_2960 = net_automation.Cisco_IOS(    &quot;cisco-2960.lan&quot;,    &quot;usman&quot;,    &quot;password&quot;,     False,     &quot;&quot;,     &quot;ciscosecret&quot;)cisco_3560 = net_automation.Cisco_IOS(    &quot;cisco-3560.lan&quot;,    &quot;username&quot;,    &quot;password&quot;,     False,     &quot;&quot;,     &quot;ciscosecret&quot;)ubiquiti_erx = net_automation.EdgeOS(    &quot;ubiquiti-erx.lan&quot;,     &quot;username&quot;,     &quot;&quot;,     True,     r&quot;C:\Users\Usman\.ssh\id_rsa&quot;,     &quot;&quot;)ubiquiti_er4 = net_automation.EdgeOS(    &quot;ubiquit-er4.lan&quot;,     &quot;usman&quot;,     &quot;&quot;,     True,     r&quot;C:\Users\Usman\.ssh\id_rsa&quot;,     &quot;&quot;)```For loops that get device configurations and writes them to external files.```pycisco_switches = [cisco_2960, cisco_3560]for device in cisco_switches:                                                               # iterates through the &quot;cisco_switches&quot; array and:    to_write = Cisco_IOS.get_all_config(device)                                             # stores the outputs from method in the &quot;to_write&quot; variable    Cisco_IOS.write_file(device, to_write, &quot;&quot;)                                              # writes the output to new files                            ``````pyubiquti_routers = [ubiquiti_erx, ubiquiti_er4]for device in ubiquti_routers:                                                              # iterates through the &quot;ubiquiti_routers&quot; array and:    to_write = Vyos.get_config(device)                                                      # stores the outputs from method in the &quot;to_write&quot; variable    Main.write_file(device, to_write, &quot;&quot;)                                                   # writes the output to new files                            ```</longdescription>
</pkgmetadata>