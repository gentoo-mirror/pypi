<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Tests](https://github.com/ccdale/ccautils/workflows/Tests/badge.svg)](https://github.com/ccdale/ccautils/actions?workflow=Tests)[![Codecov](https://codecov.io/gh/ccdale/ccautils/branch/master/graph/badge.svg)](https://codecov.io/gh/ccdale/ccautils)[![Python](https://img.shields.io/pypi/pyversions/ccautils)](https://pypi.org/project/ccautils/)[![PyPI](https://img.shields.io/pypi/v/ccautils)](https://pypi.org/project/ccautils/)# ccautilsa set of utilities for python3.6+ programs and scripts.&lt;a name=headdd&gt;&lt;/a&gt;* [Install](#install)* [Development](#devel)* [Testing](#testing)* [Error Utilities](#errors)* [Miscellaneous Utilities](#utils)    * [Usage](#uusage)* [File Utilities](#futils)    * [Usage](#fusage)&lt;a name=install&gt;&lt;/a&gt;## [Install](#headdd)Install for the user:```pip3 install ccautils --user```Install for a virtual environment:```pip install ccautils```&lt;a name=devel&gt;&lt;/a&gt;## [Development](#headdd)I use [poetry](https://python-poetry.org/) to manage these utilities.Clone this repository and install `poetry`, then install the dependancies.```git clone https://github.com/ccdale/ccautils.gitcd ccautilspoetry install```&lt;a name=testing&gt;&lt;/a&gt;## [Testing](#headdd)To run the tests you must have `pytest`, `nox` and `poetry` installed.install nox into your python user environment.```pip install nox --user```Run the tests with```nox -rs tests```Run the linter with```nox -rs lint```Run the console ask tests with```nox -rs tests -- -sm ask```&lt;a name=errors&gt;&lt;/a&gt;## Error Utilities(#headdd)See the [code](https://github.com/ccdale/ccautils) for how to use theseException helpers.&lt;a name=utils&gt;&lt;/a&gt;## [Miscellaneous Utilities](#headdd)&lt;a name=uusage&gt;&lt;/a&gt;### [Usage](#headdd)```import ccautils.utils as UT```&lt;a name=menu&gt;&lt;/a&gt;* [addToString](#addtostring)* [delimitString](#delimitstring)* [makeDictFromString](#makedictfromstring)* [askMe](#askme)* [padStr](#padstr)* [reduceTime](#reducetime)* [displayValue](#displayvalue)* [secondsFromHMS](#secondsfromhms)* [hms](#hms)&lt;a name=addtostring&gt;&lt;/a&gt;### [addToString(xstr, xadd)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L26)Returns a string with `xadd` appended to `xstr`.  If `xadd` is a list, all`str` members of the list will be appended in order.```UT.addToString(&quot;hello&quot;, [&quot; &quot;, &quot;world&quot;])&gt; &quot;hello world&quot;```&lt;a name=delimitstring&gt;&lt;/a&gt;### [delimitString(xstr, delimeter=&quot; - &quot;)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L49)`xstr` can be a list or a string.  If it is a string, it is spit apart atspaces and delimeted with `delimeter`.  If it is a list, each member isdelimeted with `delimeter`.```UT.delimitString([&quot;bright&quot;, &quot;world&quot;], &quot; &quot;)&gt; &quot;bright world&quot;UT.delimitString(&quot;I wandered lonely as an artichoke&quot;, &quot;.&quot;)&gt; &quot;I.wandered.lonely.as.an.artichoke&quot;```&lt;a name=makedictfromstring&gt;&lt;/a&gt;### [makeDictFromString(istr)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L64)Constructs a dictionary from a string of parameters. Leading and trailingwhitespace is stripped.`istr` should be in the form `someparam=somevalue,someotherparam=otherval````UT.makeDictFromString(&quot;sparam=sval, soparam = soval&quot;)&gt; {&quot;sparam&quot;: &quot;sval&quot;, &quot;soparam&quot;: &quot;soval&quot;}```&lt;a name=askme&gt;&lt;/a&gt;### [askMe(q, default)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L89)Requests input from the user.  Poses the question `q`. Returns the usersinput or `default` if no input given.```UT.askMe(&quot;press 5, please&quot;, &quot;8&quot;)&gt; press 5, please: 5&gt; 5```&lt;a name=padstr&gt;&lt;/a&gt;### [padStr(xstr, xlen=2, pad=&quot; &quot;, padleft=True)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L101)Returns `xstr` `pad`ded to the required length, either on theleft (`padleft` is True) or the right (`padleft` is False)```UT.padStr(&quot;23&quot;, 5, &quot;0&quot;)&gt; &quot;00023&quot;```&lt;a name=reducetime&gt;&lt;/a&gt;### [reduceTime(unit, secs)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L115)Divides `secs` by `unit` returning a tuple of (`units`, `remainder`)Raises a `ValueError` if `unit` is zero.```UT.reduceTime(3600, 3700)&gt; (1, 100)```&lt;a name=displayvalue&gt;&lt;/a&gt;### [displayValue(val, label, zero=True)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L131)Pluralises `label` if `val` &gt; 1 or `val` is 0.Will return an empty string if `val` == 0 and `zero` == True```UT.displayValue(12, &quot;table&quot;)&gt; &quot;12 tables&quot;```&lt;a name=secondsfromhms&gt;&lt;/a&gt;### [secondsFromHMS(shms)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L142)converts HMS strings into integer seconds```UT.secondsFromHMS(&quot;01:01:23.43&quot;)# 1 hour, 1 minute, 23 seconds + 0.43 second&gt; 3683```&lt;a name=hms&gt;&lt;/a&gt;### [hms(secs, small=True, short=True, single=False, colons=False)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L214)Convert `secs` to days, hours, minutes and secondsif `small` is True then only return the higher values if they are &gt; zeroif `short` is True then the labels are their short formif `single` is True then the labels are single lettersif `colons` is True then the output is of the form `01:03:23````UT.hms(67)&gt; &quot;1 min and 7 secs&quot;UT.hms(67, short=False)&gt; &quot;1 minute and 7 seconds&quot;UT.hms(67, small=False, short=False)&gt; &quot;0 days, 0 hours, 1 minute and 7 seconds&quot;secs = 86400 + 7200 + 300 + 34UT.hms(secs, single=True)&gt; &quot;1d 2h 5m 34s&quot;secs = 345UT.hms(secs, colons=True)&gt; &quot;05:45&quot;secs = 86400 + 7200 + 300 + 34UT.hms(secs, colons=True)&gt; &quot;01:02:05:34&quot;```&lt;a name=fuzzyexpires&gt;&lt;/a&gt;### [fuzzyExpires(dt)](#menu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/utils.py#L381)Given a `datetime` object, computes the difference between now and thattime.  Returns a tuple of (`ts`: unix timestamp of `dt`, `op`: string)The returned string gives the approximate time left between now and the`dt` object or the string 'EXPIRED'.```    &quot;&quot;&quot;It returns 2 hours 20 minutes and some seconds.&quot;&quot;&quot;    ts = int(time.time())    ts += (3600 * 2) + (60 * 20)    dt = datetime.datetime.fromtimestamp(ts)    gotts, gotstr = UT.fuzzyExpires(dt)    &quot;&quot;&quot;It returns 1 year and 2 months.&quot;&quot;&quot;    ts = int(time.time())    ts += (86400 * 365) + (86400 * 70)    dt = datetime.datetime.fromtimestamp(ts)    gotts, gotstr = UT.fuzzyExpires(dt)```&lt;a name=futils&gt;&lt;/a&gt;## [File Utilities](#headdd)&lt;a name=fusage&gt;&lt;/a&gt;### [Usage](#headdd)```import ccautils.fileutils as FT```&lt;a name=fmenu&gt;&lt;/a&gt;* [fileExists](#fileexists)* [dirExists](#direxists)* [dfExists](#dfexists)* [makePath](#makepath)&lt;a name=fileexists&gt;&lt;/a&gt;### [fileExists(fqfn)](#fmenu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/fileutils.py#L30)Tests for the existence of the fully-qualified (absolute) file name `fqfn`Returns: `True` if `fqfn` exists, else `False````fn = &quot;/home/chris/output.csv&quot;if FT.fileExists(fn):    # do somethingelse:    raise(f&quot;File {fn} does not exist&quot;)```&lt;a name=direxists&gt;&lt;/a&gt;### [dirExists(fqdn)](#fmenu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/fileutils.py#L38)Tests for the existence of the fully-qualified (absolute) directory name `fqdn`Returns: `True` if `fqdn` exists, else `False````dn = &quot;/home/chris&quot;if FT.dirExists(dn):    # do somethingelse:    raise(f&quot;Directory {dn} does not exist&quot;)```&lt;a name=dfexists&gt;&lt;/a&gt;### [dfExists(fqdfn)](#fmenu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/fileutils.py#L46)Tests to see if the file `fqdfn` exists, if not checks if `fqdfn` isa directory that exists.Returns: `True` if `fqdfn` exists, else `False````dn = &quot;/home/chris&quot;if FT.dfExists(dn):    # do somethingelse:    raise(f&quot;File / Directory {dn} does not exist&quot;)```&lt;a name=makepath&gt;&lt;/a&gt;### [makePath(pn)](#fmenu)[Code](https://github.com/ccdale/ccautils/blob/master/ccautils/fileutils.py#L57)Makes the path `pn` including any missing parent directories.  Doesnothing if path `pn` already exists.Returns: None```dn = &quot;/home/chris/appdir/subdir&quot;FT.makePath(dn)```[modeline]: # ( vim: set ft=markdown tw=74 fenc=utf-8 spell spl=en_gb mousemodel=popup: )</longdescription>
</pkgmetadata>