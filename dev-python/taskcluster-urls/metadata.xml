<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Taskcluster URL Building Library[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](http://mozilla.org/MPL/2.0)A simple library to generate URLs for various Taskcluster resources across our various deployment methods.This serves as both a simple shim for projects that use JavaScript but also is the reference implementation forhow we define these paths.URLs are defined in the '[Taskcluster URL Format](https://docs.taskcluster.net/docs/reference/url-structure).Changelog---------View the changelog on the [releases page](https://github.com/taskcluster/taskcluster-lib-urls/releases).Requirements------------This is tested on and should run on any of Node.js `{8, 10}`.General Usage-------------While the capitalization and punctunation of the function names varies depending on the language, each language provides the following methods:| method | result || --- | --- || api(rootUrl, service, version, path) -&gt; | `&lt;rootUrl&gt;/api/&lt;service&gt;/&lt;version&gt;/&lt;path&gt;` || apiReference(rootUrl, service, version) -&gt; | `&lt;rootUrl&gt;/references/&lt;service&gt;/&lt;version&gt;/api.json` || docs(rootUrl, path) -&gt; | `&lt;rootUrl&gt;/docs/&lt;path&gt;` || exchangeReference(rootUrl, service, version) -&gt; | `&lt;rootUrl&gt;/references/&lt;service&gt;/&lt;version&gt;/exchanges.json` || schema(rootUrl, service, schema) -&gt; | `&lt;rootUrl&gt;/schemas/&lt;service&gt;/&lt;schema&gt;` || apiSchema(rootUrl, version) -&gt; | `&lt;rootUrl&gt;/schemas/common/api-reference-&lt;version&gt;.json` || exchangesSchema(rootUrl, version) -&gt; | `&lt;rootUrl&gt;/schemas/common/exchanges-reference-&lt;version&gt;.json` || apiManifestSchema(rootUrl, version) -&gt; | `&lt;rootUrl&gt;/schemas/common/manifest-&lt;version&gt;.json` || metadataMchema(rootUrl) -&gt; | `&lt;rootUrl&gt;/schemas/common/metadata-metaschema.json` || ui(rootUrl, path) -&gt; | `&lt;rootUrl&gt;/&lt;path&gt;` || apiManifest(rootUrl) -&gt; | `&lt;rootUrl&gt;/references/manifest.json` || normalizeRootUrl(rootUrl) -&gt; | the normal form of the given rootUrl || testRootUrl() -&gt; | `https://tc-tests.example.com` |`testRootUrl()` is used to share a common fake `rootUrl` between various Taskcluster mocks in testing.The URL does not resolve.JS Usage--------[![Node.js Build Status](https://travis-ci.org/taskcluster/taskcluster-lib-urls.svg?branch=master)](https://travis-ci.org/taskcluster/taskcluster-lib-urls)[![npm](https://img.shields.io/npm/v/taskcluster-lib-urls.svg?maxAge=2592000)](https://www.npmjs.com/package/taskcluster-lib-urls)This package exports several methods for generating URLs conditionally based ona root URL, as well as a few helper classes for generating URLs for a pre-determinedroot URL:* `api(rootUrl, service, version, path)` -&gt; `String`* `apiReference(rootUrl, service, version)` -&gt; `String`* `docs(rootUrl, path)` -&gt; `String`* `exchangeReference(rootUrl, service, version)` -&gt; `String`* `schema(rootUrl, service, schema)` -&gt; `String`* `apiManifestSchema(rootUrl, version)` -&gt; `String`* `apiReferenceSchema(rootUrl, version)` -&gt; `String`* `exchangesReferenceSchema(rootUrl, version)` -&gt; `String`* `metadataMetaschema(rootUrl)` -&gt; `String`* `ui(rootUrl, path)` -&gt; `String`* `apiManifest(rootUrl)` -&gt; `String`* `testRootUrl()` -&gt; `String`* `withRootUrl(rootUrl)` -&gt; `Class` instance for above methods* `normalizeRootUrl(rootUrl)` -&gt; `String` (the &quot;normalized&quot; form of the given rootUrl)```js// Specifying root URL every time:const libUrls = require('taskcluster-lib-urls');libUrls.api(rootUrl, 'auth', 'v1', 'foo/bar');libUrls.schema(rootUrl, 'auth', 'v1/foo.yml'); // Note that schema names have versions in themlibUrls.apiReference(rootUrl, 'auth', 'v1');libUrls.exchangeReference(rootUrl, 'auth', 'v1');libUrls.ui(rootUrl, 'foo/bar');libUrls.apiManifest(rootUrl);libUrls.docs(rootUrl, 'foo/bar');``````js// Specifying root URL in advance:const libUrls = require('taskcluster-lib-urls');const urls = libUrls.withRoot(rootUrl);urls.api('auth', 'v1', 'foo/bar');urls.schema('auth', 'v1/foo.yml');urls.apiReference('auth', 'v1');urls.exchangeReference('auth', 'v1');urls.ui('foo/bar');urls.apiManifest();urls.docs('foo/bar');```If you would like, you can set this up via [taskcluster-lib-loader](https://github.com/taskcluster/taskcluster-lib-loader) as follows:```js{  libUrlss: {    require: ['cfg'],    setup: ({cfg}) =&gt; withRootUrl(cfg.rootURl),  },}```Test with:```yarn installyarn test```Go Usage--------[![GoDoc](https://godoc.org/github.com/taskcluster/taskcluster-lib-urls?status.svg)](https://godoc.org/github.com/taskcluster/taskcluster-lib-urls)The go package exports the following functions:```gofunc API(rootURL string, service string, version string, path string) stringfunc APIReference(rootURL string, service string, version string) stringfunc Docs(rootURL string, path string) stringfunc ExchangeReference(rootURL string, service string, version string) stringfunc Schema(rootURL string, service string, name string) stringfunc APIManifestSchema(rootURL string, version string) stringfunc APIReferenceSchema(rootURL string, version string) stringfunc ExchangesReferenceSchema(rootURL string, version string) stringfunc MetadataMetaschema(rootURL string) stringfunc UI(rootURL string, path string) stringfunc APIManifest(rootURL string) stringfunc NormalizeRootURL(rootURL string) string```Install with:```go install ./..```Test with:```go test -v ./...```Python Usage------------You can install the python client with `pip install taskcluster-urls`;```pythonimport taskcluster_urlstaskcluster_urls.api(root_url, 'auth', 'v1', 'foo/bar')taskcluster_urls.schema(root_url, 'auth', 'v1/foo.yml') # Note that schema names have versions in themtaskcluster_urls.api_manifest_schema(root_url, 'v1')taskcluster_urls.api_reference_schema(root_url, 'v1')taskcluster_urls.exchanges_reference_schema(root_url, 'v1')taskcluster_urls.metadata_metaschema(root_url, 'v1')taskcluster_urls.api_reference(root_url, 'auth', 'v1')taskcluster_urls.exchange_reference(root_url, 'auth', 'v1')taskcluster_urls.ui(root_url, 'foo/bar')taskcluster_urls.apiManifest(root_url)taskcluster_urls.docs(root_url, 'foo/bar')taskcluster_urls.normalize_root_url(root_url)taskcluster_urls.test_root_url()```Test with:```tox```Java Usage----------[![JavaDoc](https://img.shields.io/badge/javadoc-reference-blue.svg)](http://taskcluster.github.io/taskcluster-lib-urls/apidocs)In order to use this library from your maven project, simply include it as a project dependency:```&lt;project&gt;  ...  &lt;dependencies&gt;    ...    &lt;dependency&gt;      &lt;groupId&gt;org.mozilla.taskcluster&lt;/groupId&gt;      &lt;artifactId&gt;taskcluster-lib-urls&lt;/artifactId&gt;      &lt;version&gt;1.0.0&lt;/version&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;&lt;/project&gt;```The taskcluster-lib-urls artifacts are now available from the [maven central repository](http://central.sonatype.org/):* [Search Results](http://search.maven.org/#search|gav|1|g%3A%22org.mozilla.taskcluster%22%20AND%20a%3A%22taskcluster-lib-urls%22)* [Directory Listing](https://repo1.maven.org/maven2/org/mozilla/taskcluster/taskcluster-lib-urls/)To use the library, do as follows:```javaimport org.mozilla.taskcluster.urls.*;...    URLProvider urlProvider = URLs.provider(&quot;https://mytaskcluster.acme.org&quot;);    String fooBarAPI        = urlProvider.api(&quot;auth&quot;, &quot;v1&quot;, &quot;foo/bar&quot;);    String fooSchema        = urlProvider.schema(&quot;auth&quot;, &quot;v1/foo.yml&quot;); // Note that schema names have versions in them    String apiSchema        = urlProvider.apiReferenceSchema(&quot;v1&quot;);    String exchangesSchema  = urlProvider.exchangesReferenceSchema(&quot;v1&quot;);    String manifestSchema   = urlProvider.apiManifestSchema(&quot;v1&quot;);    String metaschema       = urlProvider.metadataMetaschema();    String authAPIRef       = urlProvider.apiReference(&quot;auth&quot;, &quot;v1&quot;);    String authExchangesRef = urlProvider.exchangeReference(&quot;auth&quot;, &quot;v1&quot;);    String uiFooBar         = urlProvider.ui(&quot;foo/bar&quot;);    String apiManifest      = urlProvider.apiManifest();    String docsFooBar       = urlProvider.docs(&quot;foo/bar&quot;);...```Install with:```mvn install```Test with:```mvn test```Releasing---------New releases should be tested on Travis and Taskcluster to allow for all supported versions of various languages to be tested. Once satisfied that it works, new versions should be created with`npm version` rather than by manually editing `package.json` and tags should be pushed to Github. Make the Node release first, as Python's version depends on its `package.json`.  This follows the typical tag-and-push-to-publish approach:```sh$ npm version minor  # or patch, or major$ git push upstream```Once that's done, build the Python sdists (only possible by the [maintainers on pypi](https://pypi.org/project/taskcluster-urls/#files)):```shrm -rf dist/*python setup.py sdist bdist_wheelpython3 setup.py bdist_wheelpip install twinetwine upload dist/*```Make sure to update [the changelog](https://github.com/taskcluster/taskcluster-lib-urls/releases)!License-------[Mozilla Public License Version 2.0](https://github.com/taskcluster/taskcluster-lib-urls/blob/master/LICENSE)</longdescription>
</pkgmetadata>