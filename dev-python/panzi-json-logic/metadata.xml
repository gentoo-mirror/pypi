<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>panzi-json-logic================Pure Python 3 [JsonLogic](https://jsonlogic.com/) and[CertLogic](https://github.com/ehn-dcc-development/dgc-business-rules/blob/main/certlogic/specification/README.md)implementation.The JsonLogic format is designed to allow you to share rules (logic) betweenfront-end and back-end code (regardless of language difference), even to storelogic along with a record in a database. JsonLogic is documented at[JsonLogic.com](http://jsonlogic.com), including examples of every[supported operation](http://jsonlogic.com/operations.html) and a place to[try out rules in your browser](http://jsonlogic.com/play.html).CertLogic is a dialect of JsonLogic with slightly different semantics andoperations.There are already other JsonLogic implementations in Python, but last I lookedthey don't emulate all the JavaScript operator behaviors quite right and theydon't implement CertLogic at all. This implementation tries to be as close tothe [JavaScript implementation](https://github.com/jwadhams/json-logic-js) ofJsonLogic as feasible.* [Installation](#installation)* [Examples](#examples)  * [Simple](#simple)  * [Compound](#compound)  * [Data-Driven](#data-driven)  * [Always and Never](#always-and-never)  * [CertLogic](#certlogic)* [Custom Operations](#custom-operations)* [Extras](#extras)* [Remarks](#remarks)* [Credits](#credits)Installation------------Install this package via pypi:```bashpip install panzi-json-logic```Examples--------### Simple```pythonfrom json_logic import jsonLogicjsonLogic( { &quot;==&quot; : [1, 1] } )# True```This is a simple test, equivalent to `1 == 1`. A few things about the format:1. The operator is always in the &quot;key&quot; position. There is only one key per   JsonLogic rule.2. The values are typically an array.3. Each value can be a string, number, boolean, array (non-associative), or nullNote that `==` tries to emulate the JavaScript `==` operator and as such it isadviseable to rather use `===`, which in this implementations simply usesPython's `==`.### CompoundHere rules are nested.```PythonjsonLogic(  { &quot;and&quot; : [    { &quot;&gt;&quot; : [3, 1] },    { &quot;&lt;&quot; : [1, 3] }  ] })# True```In an infix language (like Python) this could be written as:```Python( (3 &gt; 1) and (1 &lt; 3) )```### Data-DrivenObviously these rules aren't very interesting if they can only take staticliteral data. Typically `jsonLogic()` will be called with a rule object and adata object. You can use the `var` operator to get attributes of the data object:```PythonjsonLogic(  { &quot;var&quot; : [&quot;a&quot;] }, # Rule  { a : 1, b : 2 }   # Data)# 1```If you like, [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar)on unary operators to skip the array around values is supported:```PythonjsonLogic(  { &quot;var&quot; : &quot;a&quot; },  { a : 1, b : 2 })# 1```You can also use the `var` operator to access an array by numeric index:```PythonjsonLogic(  { &quot;var&quot; : 1 },  [ &quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot; ])# &quot;banana&quot;```Here's a complex rule that mixes literals and data. The pie isn't ready to eatunless it's cooler than 110 degrees, *and* filled with apples.```Pythonrules = { &quot;and&quot; : [  { &quot;&lt;&quot; : [ { &quot;var&quot; : &quot;temp&quot; }, 110 ]},  { &quot;==&quot; : [ { &quot;var&quot; : &quot;pie.filling&quot; }, &quot;apple&quot; ] }] }data = { &quot;temp&quot; : 100, &quot;pie&quot; : { &quot;filling&quot; : &quot;apple&quot; } }jsonLogic(rules, data)# True```### Always and NeverSometimes the rule you want to process is &quot;Always&quot; or &quot;Never.&quot; If the firstparameter passed to `jsonLogic()` is a non-object, non-associative-array, it isreturned immediately.```Python# AlwaysjsonLogic(True, data_will_be_ignored)# True# NeverjsonLogic(False, i_wasnt_even_supposed_to_be_here)# False```### CertLogicCertLogic is implemented in the `json_logic.cert_logic` sub-module:```Pythonfrom json_logic.cert_logic import certLogiccertLogic({    &quot;plusTime&quot;: [        &quot;2022-01-02T15:00:00+02:00&quot;,        2,        &quot;day&quot;    ]}).isoformat()# '2022-01-04T15:00:00+02:00'```Custom Operations-----------------In contrast to other JsonLogic implementations you are not supposed tomanipulate the libraries dictionary of operations, but instead pass your owndictionary as optional 3rd argument to `jsonLogic()`. If you want to usethe predefined operations you have to manually include them:```Pythonfrom json_logic import jsonLogicfrom json_logic.builtins import BUILTINSops = { **BUILTINS, 'pow': lambda data, a, b: a ** b }jsonLogic({ 'pow': [3, 2]}, None, ops)# 9```Note that in contrast to other Python JsonLogic libraries the data as passed tothe `jsonLogic()` function (or the context data in`map`/`filter`/`reduce`/`all`/`some`/`none`) is passed to operator functions asthe first argument (you can call it `self` if you want to, to be consistent withthe JavaScript implementation where it is the `this` argument).Note that not all operations can be overwritten with the operations dictionary.In particular these operations are hard coded in because of their short circuitbehavior or because they execute one operand on all the items of a list: `if`(alternative spelling: `?:`), `and`, `or`, `map`, `filter`, `reduce`, `all`,`some`, `none`.The `certLogic()` function can be called in the same way with extra operations.The CertLogic builtins can be found under `json_logic.cert_logic.builtins.BUILTINS`.Extras------This library also includes some extra operators that are not part of JsonLogic.You can find them under `json_logic.extras.EXTRAS`. This dictionary alreadyincludes `json_logic.builtins.BUILTINS`. The same extras but combined with`json_logic.cert_logic.builtins.BUILTINS` can be found under`json_logic.cert_logic.extras.EXTRAS`. The CertLogic extras also include all theoperations from JsonLogic that are otherwise missing from CertLogic, but withCertLogic semantics for `!` and `!!` (i.e. empty objects are falsy in CertLogic,but truthy in JsonLogic).### `now`Retrieve current time as Python `datetime` object in UTC.```{    &quot;now&quot;: []}```Example:```Pythonfrom json_logic import jsonLogicfrom json_logic.extras import EXTRASjsonLogic({&quot;now&quot;:[]}, None, EXTRAS)# datetime.datetime(2021, 9, 12, 0, 31, 25, 419443, tzinfo=datetime.timezone.utc)```### `parseTime`Parse RFC 3339 date and date-time strings. Date-time strings without an explicittime zone offset are assumed to be in UTC.```{    &quot;parseTime&quot;: [        &lt;string-or-datetime&gt;    ]}```Example:```PythonjsonLogic({&quot;parseTime&quot;:&quot;2022-01-02&quot;}, None, EXTRAS)# datetime.datetime(2022, 1, 2, 0, 0, tzinfo=datetime.timezone.utc)jsonLogic({&quot;parseTime&quot;:&quot;2022-01-02T15:00:00+02:00&quot;}, None, EXTRAS)# datetime.datetime(2022, 1, 2, 15, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200)))```**NOTE:**You need to use `parseTime` before comparing actual `datetime` objects withdate-times provided as a string or you'll get wrong results. Assume the currenttime is somewhen in 2021:```PythonjsonLogic({&quot;&lt;&quot;: [{&quot;now&quot;:[]},&quot;2022-01-02&quot;]}, None, EXTRAS)# FalsejsonLogic({&quot;&lt;&quot;: [{&quot;now&quot;:[]},{&quot;parseTime&quot;:&quot;2022-01-02&quot;}]}, None, EXTRAS)# True```However CertLogic has operators that are doing that for you:```Pythonfrom json_logic import certLogicfrom json_logic.cert_logic.extras import EXTRAScertLogic({&quot;before&quot;:[{&quot;now&quot;:[]},&quot;2022-01-02&quot;]}, None, EXTRAS)# True```Note that `json_logic.cert_logic.extras.EXTRAS` (to get `now`) is used with`certLogic`.### `timeSince`Milliseconds since given date-time.```{    &quot;timeSince&quot;: [        &lt;string-or-datetime&gt;    ]}```Exmaple:```PythonjsonLogic({&quot;timeSince&quot;:&quot;2021-01-02T15:00:00+02:00&quot;}, None, EXTRAS)# 21814538195.281```### `hours`Convert hours to milliseconds. Useful in combination with `timeSince`.```{    &quot;hours&quot;: [        &lt;number&gt;    ]}```Example:```PythonjsonLogic({&quot;hours&quot;: 2}, None, EXTRAS)# 7200000```### `days`Convert days to milliseconds. Useful in combination with `timeSince`.```{    &quot;hours&quot;: [        &lt;number&gt;    ]}```Example:```PythonjsonLogic({&quot;days&quot;: 2}, None, EXTRAS)# 172800000```### `combinations`Return array of arrays that represent all combinations of the elements of allthe lists.```{    &quot;combinations&quot;: [        &lt;array&gt;...    ]}```Example:```Pythonfrom json_logic import jsonLogicfrom json_logic.extras import EXTRASjsonLogic({&quot;combinations&quot;: [    [1, 2, 3],    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;],    [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;],]}, None, EXTRAS)# [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]```### `zip`Like Python's `zip()`, but returns array of arrays (instead of generator oftuples).```{    &quot;zip&quot;: [        &lt;array&gt;...    ]}```Example:```PythonjsonLogic({&quot;zip&quot;: [    [1, 2],    [&quot;a&quot;, &quot;b&quot;],]}, None, EXTRAS)# [[1, 'a'], [2, 'b']]```Remarks-------There is currently one known way where this implementation differs from the[JavaScript implementation](https://github.com/jwadhams/json-logic-js/) ofJsonLogic: The `substr` operator in this implementation operates on code points,but in json-logic-js it operates on UTF-16 code units. To emulate this inPython an UTF-16 encode/decode round-trip is needed in `substr`, and even thenthere are differences where Python disallows broken UTF-16, but JavaScriptallows it.But if you really want the JavaScript behavior this library provides analternative `substr` implementation that does the UTF-16 round-trip. You can useit like this:```Pythonfrom json_logic import jsonLogicfrom json_logic.builtins import BUILTINS, op_substr_utf16result = jsonLogic(logic, data, { **BUILTINS, 'substr': op_substr_utf16 })```Credits-------Some of this README is copied from [json-logic-py](https://github.com/nadirizr/json-logic-py),some of the tests are ported from [json-logic-js](https://github.com/jwadhams/json-logic-js)and the [JsonLogic test suite](https://jsonlogic.com/tests.json) and the[CertLogic test suite](https://github.com/ehn-dcc-development/dgc-business-rules/tree/main/certlogic/specification/testSuite)are included in the tests of this library.</longdescription>
</pkgmetadata>