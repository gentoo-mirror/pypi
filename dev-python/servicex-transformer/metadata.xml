<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ServiceX_transformer Library![CI/CD](https://github.com/ssl-hep/ServiceX_transformer/workflows/CI/CD/badge.svg)[![codecov](https://codecov.io/gh/ssl-hep/ServiceX_transformer/branch/master/graph/badge.svg)](https://codecov.io/gh/ssl-hep/ServiceX_transformer)Library of common classes for building serviceX transformers.## Minimum RequiremntsWorks with Python version 2.7 and above## Download from PyPiTo use this library:```bashpip install servicex-transformer```## Standard Command Line ArgumentsThis library provides a subclass of ArgParse for standardizing commnand linearguments for all transformer implementations.Available arguments are:# Transformed Result OutputCommand line arguments determine a destination for the results as well asan output format.* Object Store - Each transformed file is written as an object to anS3 compatible object store. The only currently supported output fileformat is parquet. The objects are stored in a bucket named after thetransformation request ID.### Command Line Reference|Option| Description | Default || ------ | ----------- | ------- || --tree TREE | Root Tree to extract data from. Only valid for uproot transformer | Events| --path PATH | Path to single Root file to transform. Any file path readable by xrootd | || --limit LIMIT | Max number of events to process | || --result-destination DEST| Where to send the results: object-store, output-dir, volume | object-store| --output-dir | Local directory where the result will be written. Use this to run standalone without other serviceX infrastructure | None| --result-format | Binary format for the results: arrow, parquet, or root-file | arrow| --rabbit-uri URI | RabbitMQ Connection URI | host.docker.internal || --request-id GUID| ID associated with this transformation request. Used as RabbitMQ Topic Name as well as object-store bucket | servicex## Running TestsValidation of the code logic is performed using[pytest](https://docs.pytest.org/en/latest/) and[pytest-mock](https://github.com/pytest-dev/pytest-mock). Unit test fixtures arein `test` directories inside each package.The tests are instrumented with code coverage reporting via[codecov](https://codecov.io/gh/ssl-hep/ServiceX_transformer). The travisjob has a the codecov upload token set as an environment variable which ispassed into the docker container so the report can be uploaded upon successfulconclusion of the tests.## Coding StandardsTo make it easier for multiple people to work on the codebase, we enforce PEP8standards, verified by flake8. The community has found that the 80 characterlimit is a bit awkward, so we have a local config setting the `max_line_length`to 99.</longdescription>
</pkgmetadata>