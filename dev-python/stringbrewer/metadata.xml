<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a name=&quot;stringbrewer&quot;&gt;&lt;/a&gt;# stringbrewer: Generate random strings matching a pattern.Patterns are specified in the StringBrewer pattern language, and are madeup of two parts: a *recipe* and a set of *ingredients*. A recipe isessentially a modified form of regular expression; whitespace is notsignificant, and each ingredient name is replaced by its definition. An*ingredient* is a space-separated list of items; each item is either acharacter (specified either as a literal character or as a Unicodecodepoint in hexadecimal), a range of characters separated by hyphens,or a union of items separated by commas. Ingredients may also containreferences to other ingredients.This is best understood by example. The pattern below generatesTelugu morphemes::    # Generate random Telugu-like morphemes    (Base HalantGroup{0,2} TopPositionedVowel?){1,3}    Base = క-న,ప-హ    Halant = 0C4D    HalantGroup = Halant Base    TopPositionedVowel = 0C46-0C48,0C4A-0C4CThe first line is a comment; the second is the recipe, and the blank linedenotes the beginning of the ingredients list. Let's look at the ingredients.A ``Base`` is any character either in the range ``0x0C15-0C28`` or ``0C2A-0C39``.(We specified these as literals, just because we could). A ``Halant`` is thecharacter ``0x0C4D``. A ``HalantGroup`` is a halant followed by a base.Now you understand the ingredients, the recipe is simple to understand if youthink in terms of regular expression syntax: a base followed by zero, one ortwo halant groups, plus an optional top-positioned vowel, all repeated betweenone and three times.&lt;a name=&quot;stringbrewer.StringBrewer.__init__&quot;&gt;&lt;/a&gt;#### \_\_init\_\_```python | __init__(from_string=None, from_file=None, recipe=None, ingredients=None)```Initializes a StringBrewer objectYou must provide *either* a file name, a string, or a recipestring and ingredients dictionary.**Arguments**:- `from_file` - A file name of a file containing a pattern.- `from_string` - A pattern in a string.- `recipe` - The recipe part of a pattern.- `ingredients` - A dictionary of regular expressions.&lt;a name=&quot;stringbrewer.StringBrewer.generate_all&quot;&gt;&lt;/a&gt;#### generate\_all```python | generate_all()```Generates a list of all combinations.If there are more than 100,000 combinations, an exceptionis raised to avoid running out of memory.&lt;a name=&quot;stringbrewer.StringBrewer.generate&quot;&gt;&lt;/a&gt;#### generate```python | generate(min_length=0, max_length=None)```Generates a single random combination.**Arguments**:- `min_length` - Minimum length (zero if not specified)- `max_length` - Maximum length (no maximum if not specified)</longdescription>
</pkgmetadata>