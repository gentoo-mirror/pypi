<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CargoCargo is a dependency injection library for Python.Cargo is [simple to use](#getting-started), [typed](#cargo-is-typed),[flexible](#cargo-is-flexible), [extensible](#cargo-is-extensible) and[easy to debug](#cargo-is-easy-to-debug).## Getting started### Step 1: Install cargoWith pip:```shell script$ pip install cargo```With pipenv:```shell script$ pipenv install cargo```With poetry:```shell script$ poetry add cargo```### Step 2: Use cargo[examples/intro.py](./examples/intro.py):```pythonimport cargo# 1. Define your componentsclass A:    def __str__(self):        return &quot;A&quot;class B:    def __init__(self, a: A):        self.a = a# 2. Create a cargo containercontainer = cargo.containers.Standard()# 3. Register your componentscontainer[A] = Acontainer[B] = B# 4. Use cargo to initialize your componentsb = container[B]# 5. Use your componentsprint(b.a)```## FeaturesAll the examples are located in the [examples](examples) directory.### Cargo is typedCargo uses the argument types to inject the dependencies; not theirnames.[examples/hello_dependencies.py](examples/hello_dependencies.py):```pythonimport cargoclass A:    passclass B:    passclass Hello:    def __init__(self, foo: A, bar: B):        print(f&quot;Hello {foo} and {bar}&quot;)container = cargo.containers.Standard()container[A] = Acontainer[B] = Bcontainer[Hello] = Hello# Prints: Hello &lt;__main__.A object at 0x7f863b0fd450&gt; and &lt;__main__.B object at 0x7f863b09b810&gt;container[Hello]```### Cargo is flexibleFunctions and methods can be used as factories; and objects as values.[examples/factory_and_value.py](examples/factory_and_value.py):```python...DatabaseURL = typing.NewType(&quot;DatabaseURL&quot;, str)def database_client_factory(db_url: DatabaseURL) -&gt; DatabaseClient:    if db_url.startswith(&quot;mysql://&quot;):        return MysqlClient(db_url)    if db_url.startswith(&quot;postgres://&quot;):        return PostgresClient(db_url)    raise Exception(f&quot;Invalid database url: {db_url}&quot;)container = cargo.containers.Standard()# Registers a factorycontainer[DatabaseClient] = database_client_factory# Registers a valuecontainer[DatabaseURL] = &quot;mysql://user:password@host:3306/db&quot;db_client = container[DatabaseClient]print(db_client)  # Prints: &lt;__main__.MysqlClient object at 0x7f681975b390&gt;```### Cargo is extensibleCargo composes middlewares to create containers. The[`Standard`](cargo/containers.py) container is just a stack ofopiniated middlewares. You can create your own types of containerswith the [middlewares](cargo/middlewares.py) you want, or even createyour own middlewares.[examples/my_container.py](examples/my_container.py):```pythonimport cargoclass LoggerMiddleware(cargo.types.Middleware):    def execute(        self,        dependency_type: cargo.types.DependencyType,        next_middleware: cargo.types.NextMiddleware,    ):        print(f&quot;Start resolving {dependency_type}&quot;)        dependency_value = next_middleware()        print(f&quot;End resolving {dependency_type}&quot;)        return dependency_valuemiddleware_factories = [    LoggerMiddleware,    cargo.middlewares.CircularDependencyCircuitBreaker,    cargo.middlewares.Singleton,]container = cargo.containers.create(middleware_factories)class A:    passclass B:    def __init__(self, a: A):        passcontainer[A] = Acontainer[B] = B# Prints:# Start resolving &lt;class '__main__.B'&gt;# Start resolving &lt;class '__main__.A'&gt;# End resolving &lt;class '__main__.A'&gt;# End resolving &lt;class '__main__.B'&gt;container[B]```### Cargo is easy to debug#### Dependency not foundCargo raises a [`DependencyNotFound`](cargo/exceptions.py) exceptionwith the missing dependency type when a dependency is not found.[examples/dependency_not_found.py](examples/dependency_not_found.py):```python...class A:    def __init__(self, b: B):        passclass B:    passcontainer = cargo.containers.Standard()container[A] = A# Note: B has not been registered# Raises cargo.exceptions.DependencyNotFound: &lt;class '__main__.B'&gt;container[A]```#### Circular dependencyCargo raises a [`CircularDependency`](cargo/exceptions.py) exceptionwith the dependency cycle when a circular dependency is detected.[examples/circular_dependency.py](examples/circular_dependency.py):```python...# Dependencies:#   - A depends on B#   - B depends on C#   - C depends on D#   - D depends on B## Circular dependency cycle is: B -&gt; C -&gt; D -&gt; B...container = cargo.containers.Standard()container[A] = Acontainer[B] = Bcontainer[C] = Ccontainer[D] = D# Raises cargo.exceptions.CircularDependency:#   [&lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;]container[A]```## Contributors- [Mathieu Larose](https://mathieularose.com)## LicenseCargo is licensed under the terms of the [MIT license](./LICENSE).## Websitehttps://github.com/larose/cargo</longdescription>
</pkgmetadata>