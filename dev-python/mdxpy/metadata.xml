<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Logo](./images/logo.png)## MDXpyA simple, yet elegant MDX library for TM1## Install    pip install mdxpy## UsageCreate MDX queries programmatically with the `Member`, `MdxTuple`, `MdxHierarchySet`, `MdxBuilder` classes.Benefits of using MDXpy over hacking raw MDX queries in your code- Faster to write- Requires less MDX knowledge- Eliminates syntax errors (e.g. forget `}`, `]`, `)` in a query) forever- Makes code more robust and easier to refactor- Escaping of `]` in object names is taken care of ### Member`Member` is used in `MdxTuple` and `MdxHierarchySet`. create a `Member` with the static `Member.of(*args: str)` method.``` python&gt;&gt;&gt; member = Member.of(&quot;Product&quot;, &quot;Product1&quot;)&gt;&gt;&gt; print(member.unique_name)[PRODUCT].[PRODUCT].[PRODUCT1]&gt;&gt;&gt; member = Member.of(&quot;Region&quot;, &quot;ByGeography&quot;, &quot;UK&quot;)&gt;&gt;&gt; print(member.unique_name)[REGION].[BYGEOGRAPHY].[UK]```### MdxTupleCreate a `MdxTuple` with the static `of(*args: Member)` method. The MDX expression of the tuple is generated with the `to_mdx` method.``` python&gt;&gt;&gt; mdx_tuple = MdxTuple.of(Member.of(&quot;Product&quot;, &quot;Product1&quot;), Member.of(&quot;Region&quot;, &quot;US&quot;))&gt;&gt;&gt; print(mdx_tuple.to_mdx())([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[US])&gt;&gt;&gt; mdx_tuple = MdxTuple.of(Member.of(&quot;Product&quot;, &quot;ByType&quot;, &quot;Product1&quot;), Member.of(&quot;Region&quot;, &quot;ByGeography&quot;, &quot;North America&quot;))&gt;&gt;&gt; print(mdx_tuple.to_mdx())([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[North America])```     you can add a `Member` to a `MdxTuple```` python&gt;&gt;&gt; mdx_tuple = MdxTuple.of(Member.of(&quot;Product&quot;, &quot;ByType&quot;, &quot;Product1&quot;))&gt;&gt;&gt; mdx_tuple.add_member(Member.of(&quot;Region&quot;, &quot;ByGeography&quot;, &quot;North America&quot;))&gt;&gt;&gt; print(mdx_tuple.to_mdx())([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[NORTHAMERICA])```### MdxHierarchySet`MdxHierarchySet` is created with any of the static methods on the `MdxHierarchySet` class. The `MDX` expression of the set is generated with the `to_mdx` method.``` python&gt;&gt;&gt; mdx_set = MdxHierarchySet.tm1_subset_all(&quot;Product&quot;)&gt;&gt;&gt; print(mdx_set.to_mdx()){TM1SUBSETALL([Product].[Product])}&gt;&gt;&gt; mdx_set = MdxHierarchySet.tm1_subset_to_set(&quot;Region&quot;, &quot;By Geography&quot;, &quot;Default&quot;)&gt;&gt;&gt; print(mdx_set.to_mdx()){TM1SUBSETTOSET([REGION].[BYGEOGRAPHY],'Default')}&gt;&gt;&gt; mdx_set = MdxHierarchySet.all_leaves(&quot;Region&quot;)&gt;&gt;&gt; print(mdx_set.to_mdx()){TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)}&gt;&gt;&gt; mdx_set = MdxHierarchySet.members([Member.of(&quot;Region&quot;, &quot;US&quot;), Member.of(&quot;Product&quot;, &quot;Product1&quot;)])&gt;&gt;&gt; print(mdx_set.to_mdx()){[REGION].[REGION].[US],[PRODUCT].[PRODUCT].[PRODUCT1]}```Functions on `MdxHierarchySet` can be concatenated to arbitrary length in a functional style:``` python&gt;&gt;&gt; mdx_set = MdxHierarchySet.tm1_subset_all(&quot;Region&quot;).filter_by_level(0).filter_by_pattern(&quot;I*&quot;).tm1_sort()&gt;&gt;&gt; print(mdx_set.to_mdx()){TM1SORT({TM1FILTERBYPATTERN({TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)},'I*')},ASC)}```### MdxBuilderThe `MdxBuilder` is used to build MDX queries. `MdxHierarchySet` or `MdxTuple` are placed on the axes. Zero suppression can be switched on or off per axis. The actual `MDX` expression is generated with the `to_mdx` method. ``` python&gt;&gt;&gt; query = MdxBuilder.from_cube(&quot;Cube&quot;).add_hierarchy_set_to_column_axis(MdxHierarchySet.all_leaves(&quot;Product&quot;))&gt;&gt;&gt; print(query.to_mdx())SELECT {TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 0FROM [CUBE] &gt;&gt;&gt; query = MdxBuilder.from_cube(&quot;Cube&quot;).add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(&quot;Product&quot;, &quot;Product1&quot;)))&gt;&gt;&gt; print(query.to_mdx())SELECT {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0FROM [CUBE] &gt;&gt;&gt; query =  MdxBuilder.from_cube(&quot;Cube&quot;).add_member_tuple_to_axis(0, Member.of(&quot;Product&quot;, &quot;Product1&quot;), Member.of(&quot;Region&quot;, &quot;EMEA&quot;))&gt;&gt;&gt; print(query.to_mdx())SELECT{([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[EMEA])} ON 0FROM [CUBE] &gt;&gt;&gt; query = MdxBuilder.from_cube(&quot;Cube&quot;).columns_non_empty().add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(&quot;Product&quot;, &quot;Product1&quot;)))&gt;&gt;&gt; print(query.to_mdx())SELECTNON EMPTY {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0 FROM [CUBE]```MDX queries can have any number of axes. Axis 0 _(=columns)_ must be defined.``` python&gt;&gt;&gt; mdx = MdxBuilder.from_cube(&quot;Cube&quot;) \    .add_hierarchy_set_to_axis(0, MdxHierarchySet.member(Member.of(&quot;Region&quot;, &quot;US&quot;))) \    .add_hierarchy_set_to_axis(1, MdxHierarchySet.all_leaves(&quot;Product&quot;)) \    .add_hierarchy_set_to_axis(2, MdxHierarchySet.member(Member.of(&quot;Version&quot;, &quot;Actual&quot;))) \    .add_hierarchy_set_to_axis(3, MdxHierarchySet.tm1_subset_to_set(&quot;Time&quot;, &quot;Time&quot;, &quot;2020-Q1&quot;)) \    .to_mdx()&gt;&gt;&gt; print(mdx)SELECT{[REGION].[REGION].[US]} ON 0,{TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 1,{[VERSION].[VERSION].[ACTUAL]} ON 2,{TM1SUBSETTOSET([TIME].[TIME],'2020-Q1')} ON 3FROM [CUBE]```The `CalculatedMember` class is used to define query-scoped calculated members. They are used with the `MdxBuilder` through the `with_member` function.``` python&gt;&gt;&gt; mdx = MdxBuilder.from_cube(cube=&quot;Record Rating&quot;).with_member(        CalculatedMember.avg(            dimension=&quot;Period&quot;,            hierarchy=&quot;Period&quot;,            element=&quot;AVG 2016&quot;,            cube=&quot;Record Rating&quot;,            mdx_set=MdxHierarchySet.children(member=Member.of(&quot;Period&quot;, &quot;2016&quot;)),            mdx_tuple=MdxTuple.of(Member.of(&quot;Chart&quot;, &quot;Total Charts&quot;), Member.of(&quot;Record Rating Measure&quot;, &quot;Rating&quot;)))) \        .add_hierarchy_set_to_row_axis(        MdxHierarchySet            .children(Member.of(&quot;Record&quot;, &quot;Total Records&quot;))            .top_count(cube=&quot;Record Rating&quot;, mdx_tuple=MdxTuple.of(Member.of(&quot;Period&quot;, &quot;AVG 2016&quot;)), top=5)) \        .add_member_tuple_to_columns(Member.of(&quot;Period&quot;, &quot;AVG 2016&quot;)) \        .where(Member.of(&quot;Chart&quot;, &quot;Total Charts&quot;), Member.of(&quot;Record Rating Measure&quot;, &quot;Rating&quot;)) \        .to_mdx()&gt;&gt;&gt; print(mdx)WITH MEMBER [PERIOD].[PERIOD].[AVG2016] AS AVG({[PERIOD].[PERIOD].[2016].CHILDREN},[Record Rating].([CHART].[CHART].[TOTALCHARTS],[RECORDRATINGMEASURE].[RECORDRATINGMEASURE].[RATING]))SELECT{([PERIOD].[PERIOD].[AVG2016])} ON 0,{TOPCOUNT({[RECORD].[RECORD].[TOTALRECORDS].CHILDREN},5,[RECORDRATING].([PERIOD].[PERIOD].[AVG2016]))} ON 1FROM [RECORDRATING]WHERE ([CHART].[CHART].[TOTALCHARTS],[RECORDRATINGMEASURE].[RECORDRATINGMEASURE].[RATING])```The `DimensionProperty` class is used to query attributes in conjunction with data. It is used with the `MdxBuilder` through the `add_properties_to_row_axis`, `add_hierarchy_set_to_column_axis` functions.``` pythonfrom mdxpy import DimensionProperty, MdxHierarchySet, MdxBuilder, Memberquery = MdxBuilder.from_cube(&quot;Sales&quot;)query = query.rows_non_empty()query = query.add_hierarchy_set_to_row_axis(MdxHierarchySet.all_leaves(&quot;Product&quot;))query = query.add_properties_to_row_axis(DimensionProperty.of(&quot;Product&quot;, &quot;Description&quot;))query = query.columns_non_empty()query = query.add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(&quot;Sales Measure&quot;, &quot;Revenue&quot;)))query = query.where(Member.of(&quot;Year&quot;, &quot;2022&quot;), Member.of(&quot;Region&quot;, &quot;Switzerland&quot;))print(query.to_mdx())&gt;&gt;&gt; print(mdx)SELECTNON EMPTY {[salesmeasure].[salesmeasure].[revenue]} DIMENSION PROPERTIES MEMBER_NAME ON 0,NON EMPTY {TM1FILTERBYLEVEL({TM1SUBSETALL([product].[product])},0)} DIMENSION PROPERTIES [product].[product].[description] ON 1FROM [sales]WHERE ([year].[year].[2022],[region].[region].[switzerland])```To see all samples checkout the `test.py` file## Supported MDX Functions- TM1SUBSETALL- MEMBERS- TM1SUBSETTOSET- DEFAULTMEMBER- PARENT- FIRSTCHILD- LASTCHILD- CHILDREN- ANCESTORS- ANCESTOR- DRILLDOWNLEVEL- FILTER- TM1FILTERBYPATTERN- TM1FILTERBYLEVEL- TM1SORT- HEAD- TAIL- SUBSET- TOPCOUNT- BOTTOMCOUNT- UNION- INTERSECT- EXCEPT- ORDER## TestsAll tests in `test.py`## ContributionContribution is welcome. If you find a bug or feel like you can contribute please fork the repository, update the code and then create a pull request so we can merge in the changes.</longdescription>
</pkgmetadata>