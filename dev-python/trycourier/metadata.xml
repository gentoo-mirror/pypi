<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `trycourier`This Python Package helps you send notifications through [Courier](https://www.courier.com/), the smartest way to design &amp;amp; deliver notifications. Design your notifications once using our drag &amp;amp; drop editor, then deliver to any channel through one API. Email, mobile push, SMS, Slack &amp;mdash; you name it!## InstallationInstall from PyPI using [pip](http://www.pip-installer.org/en/latest/):```shell$ pip install trycourier```Python 3.5 or later is required.## Usage### Using Token Auth```pythonfrom trycourier import Courierclient = Courier(auth_token=&quot;your-auth-token&quot;) #or set via COURIER_AUTH_TOKEN env varresp = client.send(    event=&quot;your-event-id&quot;,    recipient=&quot;your-recipient-id&quot;,    profile={        &quot;email&quot;: &quot;example@example.com&quot;,        &quot;phone_number&quot;: &quot;555-867-5309&quot;    },    data={      &quot;world&quot;: &quot;Python!&quot;    })print(resp['messageId'])```### Using Basic Auth```pythonfrom trycourier import Courierclient = Courier(username=&quot;your-username&quot;, password=&quot;your-password&quot;)resp = client.send(    event=&quot;your-event-id&quot;,    recipient=&quot;your-recipient-id&quot;,    profile={        &quot;email&quot;: &quot;example@example.com&quot;,        &quot;phone_number&quot;: &quot;555-867-5309&quot;    },    data={      &quot;world&quot;: &quot;Python!&quot;    })print(resp['messageId'])```### TimeoutsAs of v1.4.0, the timeout is defaulted to 5 seconds. This is configurable using the `timeout` parameter when creating a client. You can specify the time in seconds using a `float` value for both Connect and Read or use a tuple to set them for each individual one `(Connect, Read)`.```pythonclient = Courier(auth_token=&quot;your-auth-token&quot;,                 timeout=3.5)client = Courier(auth_token=&quot;your-auth-token&quot;,                 timeout=(3.2, 3.3))```## Advanced Usage```pythonfrom trycourier import Courierclient = Courier(auth_token=&quot;your-auth-token&quot;)&quot;&quot;&quot;Example: send a message to a recipient&quot;&quot;&quot;resp = client.send(    event=&quot;your-event-id&quot;,    recipient=&quot;your-recipient-id&quot;,    profile={}, # optional    brand=&quot;your-brand-id&quot;, # optional    data={}, # optional    preferences={}, # optional    override={} # optional)print(resp['messageId'])&quot;&quot;&quot;Example: send message using a message object that unlocks enhanced power features&quot;&quot;&quot;resp = client.send_message(    message={'template': 'my-template', 'to': {'email': 'foo@bar.com'}})print(resp['requestId'])&quot;&quot;&quot;Example: send UTM metadata with message object - V2&quot;&quot;&quot;resp = client.send_message(    message={        'to': [            {                &quot;email&quot;: &quot;foo@bar.com&quot;            }        ],        'content': {            'version': '2020-01-01',            'elements': [                {                    'type': 'action',                    'content': 'ELEMENTAL',                    'href': 'courier.com',                    'style': 'button',                    'align': 'center'                }            ]        },        'routing': {            'method': 'single',            'channels': [                'email'            ]        },        'metadata': {            'utm': {                'source': 'python'            }        }    })print(resp['requestId'])&quot;&quot;&quot;Example: send granular UTM metadata with message object&quot;&quot;&quot;resp = client.send_message(    message={        'to': [            {                &quot;email&quot;: &quot;foo@bar.com&quot;            }        ],        'content': {            'version': '2020-01-01',            'elements': [                {                    'type': 'action',                    'content': 'ELEMENTAL',                    'href': 'courier.com',                    'style': 'button',                    'align': 'center'                }            ]        },        'routing': {            'method': 'single',            'channels': [                'email'            ]        },        'metadata': {            'utm': {                'source': 'python'            }        },        'channels': {          'email': {            'metadata': {              'utm': {                'medium': 'email'              }            },            'providers':['sendgrid','sns']          }        },        'providers': {          'sendgrid':{            'metadata': {                'utm': {                  'medium': 'email'                }              }            }        }    })print(resp['requestId'])&quot;&quot;&quot;Example: set trace_id with message object - V2&quot;&quot;&quot;resp = client.send_message(    message={        'to': [            {                &quot;email&quot;: &quot;foo@bar.com&quot;            }        ],        'content': {            'version': '2020-01-01',            'elements': [                {                    'type': 'action',                    'content': 'ELEMENTAL',                    'href': 'courier.com',                    'style': 'button',                    'align': 'center'                }            ]        },        'routing': {            'method': 'single',            'channels': [                'email'            ]        },        'metadata': {            &quot;trace_id&quot;: &quot;feed-me-seemore&quot;,        }    })print(resp['requestId'])&quot;&quot;&quot;Example: set tags with message object - V2&quot;&quot;&quot;resp = client.send_message(    message={        &quot;to&quot;: {          &quot;email&quot;: &quot;foo@bar.com&quot;,        },        &quot;template&quot;: &quot;my-template&quot;,        &quot;metadata&quot;: {          &quot;tags&quot;: [&quot;tag-1&quot;, &quot;tag-2&quot;]        }    })print(resp['requestId'])&quot;&quot;&quot;Example: send a message to a list, pattern and user&quot;&quot;&quot;resp = client.send_message(    message={'template': 'my-template', 'to': [      {        &quot;list_pattern&quot;: &quot;&lt;PATTERN&gt;&quot;, #e.g. example.list.*      },      {        &quot;list_id&quot;: &quot;&lt;LIST_ID&gt;&quot;, #e.g. your Courier List Id      },      {        &quot;email&quot;: &quot;test@email.com&quot;      }    ]  })print(resp['requestId'])&quot;&quot;&quot;Example: send a message to a list&quot;&quot;&quot;resp = client.lists.send(  event=&quot;your-event-id&quot;,  list=&quot;your.list.id&quot;,  brand=&quot;your-brand-id&quot;, # optional  data={}, # optional  override={} # optional)print(resp['messageId'])&quot;&quot;&quot;Example: send a message to a list pattern&quot;&quot;&quot;resp = client.lists.send(  event=&quot;your-event-id&quot;,  pattern=&quot;your.list.*&quot;,  brand=&quot;your-brand-id&quot;, # optional  data={}, # optional  override={} # optional)print(resp['messageId'])&quot;&quot;&quot;Example: create a recipient's profile&quot;&quot;&quot;resp = client.profiles.add(  recipient_id,  {    &quot;email&quot;:&quot;example@example.com&quot;,    &quot;name&quot;:&quot;Example Name&quot;  })&quot;&quot;&quot;Example: replace or create a recipient's profile&quot;&quot;&quot;resp = client.profiles.replace(  recipient_id,  {    &quot;email&quot;: &quot;example@example.com&quot;  })print(resp['status'])&quot;&quot;&quot;Example: merge or create a recipient's profile&quot;&quot;&quot;resp = client.profiles.merge(  recipient_id,  {    &quot;phone_number&quot;: &quot;+15555555555&quot;  })print(resp['status'])&quot;&quot;&quot;Example: get the subscribed lists of a recipient&quot;&quot;&quot;resp = client.profiles.get_subscriptions(  recipient_id,  cursor #optional)print(resp)&quot;&quot;&quot;Example: edit the contents of a recipient's profile with a patch operation(follows JSON Patch conventions: RFC 6902).&quot;&quot;&quot;resp = client.profiles.patch(  recipient_id,  [    {      &quot;op&quot;: &quot;add&quot;, #operation 1: add this email to profile      &quot;path&quot;: &quot;/parent&quot;,      &quot;value&quot;: &quot;example@example.com&quot;    }    {      &quot;op&quot;: &quot;replace&quot;, #operation 2: update with new email      &quot;path&quot;: &quot;/parent&quot;,      &quot;value&quot;: &quot;jane@doe.com&quot;    }    {      &quot;op&quot;: &quot;copy&quot;, #operation 3: copy that email to /emergency_contact      &quot;from&quot;: &quot;/parent&quot;,      &quot;path&quot;: &quot;/emergency_contact&quot;    }    ...  ])print(resp)&quot;&quot;&quot;Example: get a recipient's profile&quot;&quot;&quot;resp = client.profiles.get(recipient_id)print(resp)&quot;&quot;&quot;Example: fetch the statuses of messages you've previously sent.&quot;&quot;&quot;resp = client.messages.list(  cursor=&quot;MTU4OTQ5NTI1ODY4NywxLTVlYmRjNWRhLTEwODZlYWFjMWRmMjEwMTNjM2I0ZjVhMA&quot;, # optional  event=&quot;your-event-id&quot;, # optional  list=&quot;your-list-id&quot;, #optional  message_id=&quot;your-message-id&quot;, #optional  notification=[&quot;message-status-1&quot;, &quot;message-status-2&quot;,...], #optional  recipient=&quot;recipient-id&quot; # optional)print(resp)&quot;&quot;&quot;Example: fetch the status of a message you've previously sent&quot;&quot;&quot;resp = client.messages.get(message_id)print(resp)&quot;&quot;&quot;Example: fetch the array of events of a message you've previously sent.&quot;&quot;&quot;resp = client.messages.get_history(message_id=&quot;your-message-id&quot;,type=&quot;list-type&quot; #optional (&quot;FILTERED&quot;, &quot;RENDERED&quot;, &quot;MAPPED&quot;, &quot;PROFILE_LOADED&quot;))print(resp)&quot;&quot;&quot;Example: fetch the list of events&quot;&quot;&quot;resp = client.get_events()print(resp)&quot;&quot;&quot;Example: fetch a specific event by event ID&quot;&quot;&quot;resp = client.get_event(event_id)print(resp)&quot;&quot;&quot;Example: create or replace an event&quot;&quot;&quot;resp = client.replace_event(  event_id,  notification_id=&quot;GRPVB5P0BHMEZSNY6TP2X7TQHEBF&quot;,  type=&quot;notificaton&quot; ## optional, defaults to notification)print(resp)&quot;&quot;&quot;Example: get all brands&quot;&quot;&quot;resp = client.get_brands(  cursor=&quot;MTU4OTQ5NTI1ODY4NywxLTVlYmRjNWRhLTEwODZlYWFjMWRmMjEwMTNjM2I0ZjVhMA&quot;, # optional)print(resp)&quot;&quot;&quot;Example: get a specific brand&quot;&quot;&quot;resp = client.get_brand(brand_id)print(resp)&quot;&quot;&quot;Example: create a brand&quot;&quot;&quot;resp = client.create_brand({  name=&quot;My Brand&quot;,  settings={    &quot;color&quot;: {      &quot;primary&quot;: &quot;#0000FF&quot;,      &quot;secondary&quot;: &quot;#FF0000&quot;,      &quot;tertiary&quot;: &quot;#00FF00&quot;    }  }})print resp&quot;&quot;&quot;Example: replace a brand&quot;&quot;&quot;resp = client.replace_brand(  brand_id,  name=&quot;My New Brand&quot;,  settings={    &quot;color&quot;: {      &quot;primary&quot;: &quot;#FF0000&quot;,      &quot;secondary&quot;: &quot;#00FF00&quot;,      &quot;tertiary&quot;: &quot;#0000FF&quot;    }  })print resp&quot;&quot;&quot;Example: delete a brand&quot;&quot;&quot;client.delete_brand(brand_id)&quot;&quot;&quot;Example: get all lists&quot;&quot;&quot;resp = client.lists.list(  cursor=&quot;MTU4OTQ5NTI1ODY4NywxLTVlYmRjNWRhLTEwODZlYWFjMWRmMjEwMTNjM2I0ZjVhMA&quot;, # optional)print resp&quot;&quot;&quot;Example: get a specific list&quot;&quot;&quot;resp = client.lists.get(list_id)print resp&quot;&quot;&quot;Example: create or replace a list&quot;&quot;&quot;client.lists.put(list_id, name=&quot;My List&quot;)&quot;&quot;&quot;Example: delete a list&quot;&quot;&quot;client.lists.delete(list_id)&quot;&quot;&quot;Example: restore a list&quot;&quot;&quot;client.lists.restore(list_id)&quot;&quot;&quot;Example: get a list's subscribptions&quot;&quot;&quot;resp = client.lists.get_subscriptions(list_id,  cursor=&quot;MTU4OTQ5NTI1ODY4NywxLTVlYmRjNWRhLTEwODZlYWFjMWRmMjEwMTNjM2I0ZjVhMA&quot;, # optional)print resp&quot;&quot;&quot;Example: replace many recipients to a new or existing list&quot;&quot;&quot;client.lists.put_subscriptions(list_id, [  &quot;RECIPIENT_ID_1&quot;,  &quot;RECIPIENT_ID_2&quot;])&quot;&quot;&quot;Example: Example: subscribe single recipient to a new or existing list&quot;&quot;&quot;client.lists.subscribe(list_id, recipient_id)&quot;&quot;&quot;Example: unsubscribe recipient from list&quot;&quot;&quot;client.lists.unsubscribe(list_id, recipient_id)&quot;&quot;&quot;Example: get a recipient's subscribed lists&quot;&quot;&quot;resp = client.lists.find_by_recipient_id(recipient_id,  cursor=&quot;MTU4OTQ5NTI1ODY4NywxLTVlYmRjNWRhLTEwODZlYWFjMWRmMjEwMTNjM2I0ZjVhMA&quot;, # optional)print resp&quot;&quot;&quot;Example: Invoke an ad-hoc automation&quot;&quot;&quot;resp = client.automations.invoke(    automation={'steps': [{ 'action': 'send' }]},    brand=&quot;your-brand-id&quot;, # optional    data={}, # optional    profile={}, # optional    recipient=&quot;your-recipient-id&quot;, # optional    template=&quot;your-notification-template-id&quot; # optional)print(resp['runId'])&quot;&quot;&quot;Example: Invoke an automation template&quot;&quot;&quot;resp = client.automations.invoke_template(    template_id=&quot;your-automation-template-id&quot;,    brand=&quot;your-brand-id&quot;, # optional    data={}, # optional    profile={}, # optional    recipient=&quot;your-recipient-id&quot;, # optional    template=&quot;your-notification-template-id&quot; # optional)print(resp['runId'])&quot;&quot;&quot;Bulk Processing:&quot;&quot;&quot;&quot;&quot;&quot;Example: Create a bulk processing job (API v1 semantics)&quot;&quot;&quot;resp = client.bulk.create_job(    message={'event': 'foo'},    idempotency_key='1234ABCD', # optional    idempotency_expiration='expiration-date' # optional)print(resp['jobId'])&quot;&quot;&quot;Example: Create a bulk processing job (API v2 semantics)&quot;&quot;&quot;resp = client.bulk.create_job(    message={'message': { 'template': 'RR4NDQ7NZ24A8TKPWVBEDGE15E9A' }},    idempotency_key='1234ABCD', # optional    idempotency_expiration='expiration-date' # optional)print(resp['jobId'])&quot;&quot;&quot;Example: Ingest users into a bulk processing job (API v1 semantics)&quot;&quot;&quot;resp = client.bulk.ingest_users(    job_id='12345',    users=[{ 'profile': { 'email': 'foo@bar.com' } }],    idempotency_key='1234ABCD', # optional    idempotency_expiration='expiration-date' # optional)print(resp)&quot;&quot;&quot;Example: Ingest users into a bulk processing job (API v2 semantics)&quot;&quot;&quot;resp = client.bulk.ingest_users(    job_id='12345',    users=[{ 'to': { 'email': 'foo@bar.com' } }],    idempotency_key='1234ABCD', # optional    idempotency_expiration='expiration-date' # optional)print(resp)&quot;&quot;&quot;Example: Run a bulk processing job&quot;&quot;&quot;client.bulk.run_job(    job_id='12345',    idempotency_key='1234ABCD', # optional    idempotency_expiration='expiration-date' # optional)&quot;&quot;&quot;Example: Get bulk processing job&quot;&quot;&quot;resp = client.bulk.get_job('12345')print(resp)&quot;&quot;&quot;Example: Get bulk processing job user details&quot;&quot;&quot;resp = client.bulk.get_job_users('12345', cursor='abc') # cursor is optionalprint(resp)&quot;&quot;&quot;Example: Get audit event&quot;&quot;&quot;resp = client.audit_events.get_audit_event('12345')print(resp)&quot;&quot;&quot;Example: List audit events&quot;&quot;&quot;resp = client.audit_events.list_audit_events(cursor='abc') # cursor is optionalprint(resp)```### IdempotencyFor `POST` methods, you can supply an `idempotency_key` to ensure the idempotency of the API Call. We recommend that you use a `V4 UUID` for the key. By default, keys are eligible to be removed from the system after they're at least 24 hours old, and a new request is generated if a key is reused after the original has been removed.Also, the expiration of an idempotency key can be altered by setting a `idempotency_expiration` header value. The value of this header can be either epoch milliseconds or an ISO-8601 formatted date string. The minimum value that can be set is 24 hours. The maximum value that can be set is 1 year.```pythonimport uuidfrom datetime import datetime, timedeltafrom trycourier import Courierclient = Courier()idempotency_key = uuid.uuid4()expiration = (datetime.now()+timedelta(days=7)).isoformat()resp = client.send(    event=&quot;your-event-id&quot;,    recipient=&quot;your-recipient-id&quot;,    profile={        &quot;email&quot;: &quot;example@example.com&quot;,        &quot;phone_number&quot;: &quot;555-867-5309&quot;    },    data={      &quot;world&quot;: &quot;Python!&quot;    },    idempotency_key=idempotency_key,    idempotency_expiration=expiration)print(resp['messageId'])```## ContributingBug reports and pull requests are welcome on GitHub at https://github.com/trycourier/courier-python. See [CONTRIBUTING.md](CONTRIBUTING.md) for more info.## LicenseThe package is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).</longdescription>
</pkgmetadata>