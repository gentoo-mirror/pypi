<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Client for Google Cloud Vision=====================================|GA| |pypi| |versions|The `Google Cloud Vision`_  API enables developers tounderstand the content of an image by encapsulating powerful machinelearning models in an easy to use REST API. It quickly classifies imagesinto thousands of categories (e.g., &quot;sailboat&quot;, &quot;lion&quot;, &quot;Eiffel Tower&quot;),detects individual objects and faces within images, and finds and readsprinted words contained within images. You can build metadata on yourimage catalog, moderate offensive content, or enable new marketingscenarios through image sentiment analysis. Analyze images uploadedin the request or integrate with your image storage on Google CloudStorage.- `Client Library Documentation`_- `Product Documentation`_.. |GA| image:: https://img.shields.io/badge/support-GA-gold.svg   :target: https://github.com/googleapis/google-cloud-python/blob/main/README.rst#general-availability.. |pypi| image:: https://img.shields.io/pypi/v/google-cloud-vision.svg   :target: https://pypi.org/project/google-cloud-vision/.. |versions| image:: https://img.shields.io/pypi/pyversions/google-cloud-vision.svg   :target: https://pypi.org/project/google-cloud-vision/.. _Vision: https://cloud.google.com/vision/.. _Google Cloud Vision: https://cloud.google.com/vision/.. _Client Library Documentation: https://cloud.google.com/python/docs/reference/vision/latest.. _Product Documentation: https://cloud.google.com/vision/reference/rest/Quick Start-----------In order to use this library, you first need to go through the following steps:1. `Select or create a Cloud Platform project.`_2. `Enable billing for your project.`_3. `Enable the Google Cloud Vision API.`_4. `Setup Authentication.`_.. _Select or create a Cloud Platform project.: https://console.cloud.google.com/project.. _Enable billing for your project.: https://cloud.google.com/billing/docs/how-to/modify-project#enable_billing_for_a_project.. _Enable the Google Cloud Vision API.:  https://cloud.google.com/vision.. _Setup Authentication.: https://googleapis.dev/python/google-api-core/latest/auth.htmlInstallation~~~~~~~~~~~~Install this library in a `virtualenv`_ using pip. `virtualenv`_ is a tool tocreate isolated Python environments. The basic problem it addresses is one ofdependencies and versions, and indirectly permissions.With `virtualenv`_, it's possible to install this library without needing systeminstall permissions, and without clashing with the installed systemdependencies... _`virtualenv`: https://virtualenv.pypa.io/en/latest/Supported Python Versions^^^^^^^^^^^^^^^^^^^^^^^^^Python &gt;= 3.6Deprecated Python Versions^^^^^^^^^^^^^^^^^^^^^^^^^^Python == 2.7.The last version of this library compatible with Python 2.7 is google-cloud-vision==1.0.0.RaspberryPi ARM devices ^^^^^^^^^^^^^^^^^^^^^^^Note: Raspberry Pi ARMv6 is not supported.Mac/Linux^^^^^^^^^.. code-block:: console    pip install virtualenv    virtualenv &lt;your-env&gt;    source &lt;your-env&gt;/bin/activate    &lt;your-env&gt;/bin/pip install google-cloud-visionWindows^^^^^^^.. code-block:: console    pip install virtualenv    virtualenv &lt;your-env&gt;    &lt;your-env&gt;\Scripts\activate    &lt;your-env&gt;\Scripts\pip.exe install google-cloud-visionExample Usage~~~~~~~~~~~~~.. code-block:: python   from google.cloud import vision   client = vision.ImageAnnotatorClient()   response = client.annotate_image({     'image': {'source': {'image_uri': 'gs://my-test-bucket/image.jpg'}},     'features': [{'type_': vision.Feature.Type.FACE_DETECTION}]   })Known Limitations~~~~~~~~~~~~~~~~~Pylint Does Not Work Out Of The Box^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Pylint throws errors by default when checking code that uses feature methods on the ``ImageAnnotatorClient`` class, such as ``label_detection()`` or ``text_detection()``.As a workaround, member checking on all methods of the ``ImageAnnotatorClient`` can bedisabled using Pylint's ``generated-members`` option. To do this on a line-by-line basis,add a comment like ``# pylint: disable=no-member`` to suppress this error. To do thisfor a whole project, you can add the following lines to a ``.pylintrc`` file in your project::  [TYPECHECK]    generated-members=&lt;&lt;REGULAR EXPRESSION&gt;&gt;Substitute a regular expression of your choosing that matches all lines for which you want todisable this error check. For example, if you choose a convention of naming your``ImageAnnotatorClient`` variables ``image_annotator_client``, then your regex could be``image_annotator_client.*`` or something similar.Next Steps~~~~~~~~~~-  Read the `Client Library Documentation`_ for Google Cloud Vision   API to see other available methods on the client.-  Read the `Product documentation`_ to learn   more about the product and see How-to Guides.</longdescription>
</pkgmetadata>