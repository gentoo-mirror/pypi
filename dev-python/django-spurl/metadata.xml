<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Super URLs for Django=====================.. code:: raw               .=.,              ;c =\            __|  _/          .'-'-._/-'-._         /..   ____    \        /  {% spurl %}  \       (  / \--\_&gt;/-/'._ )        \-;_/\__;__/ _/ _/         '._}|==o==\{_\/          /  /-._.--\  \_         // /   /|   \ \ \        / | |   | \;  |  \ \       / /  | :/   \: \   \_\      /  |  /.'|   /: |    \ \      |  |  |--| . |--|     \_\      / _/   \ | : | /___--._) \     |_(---'-| &gt;-'-| |       '-'            /_/     \_\.. image:: https://img.shields.io/pypi/v/django-spurl.svg    :target: https://pypi.python.org/pypi/django-spurl/.. image:: https://img.shields.io/pypi/dm/django-spurl.svg    :target: https://pypi.python.org/pypi/django-spurl/.. image:: https://img.shields.io/github/license/j4mie/django-spurl.svg    :target: https://pypi.python.org/pypi/django-spurl/.. image:: https://img.shields.io/travis/j4mie/django-spurl.svg    :target: https://travis-ci.com/github/j4mie/django-spurl/.. image:: https://coveralls.io/repos/github/j4mie/django-spurl/badge.svg?branch=develop    :target: https://coveralls.io/github/j4mie/django-spurl?branch=develop**Spurl** is a Django template library for manipulating URLs. It's builton top of Zachary Voase's excellent`urlobject &lt;https://github.com/zacharyvoase/urlobject/&gt;`__.Authored by `Jamie Matthews &lt;http://www.j4mie.org/&gt;`__, and some great`contributors &lt;https://github.com/j4mie/django-spurl/contributors&gt;`__.Installation------------Either checkout ``spurl`` from GitHub, or install using pip:.. code:: shell    pip install django-spurlAdd ``spurl`` to your ``INSTALLED_APPS``:.. code:: python    INSTALLED_APPS = (        ...        'spurl',    )Finally, whenever you want to use Spurl in a template, you need to loadits template library:.. code:: html+django    {% load spurl %}Usage-----Spurl is **not** a replacement for Django's built-in ``{% url %}``template tag. It is a general-purpose toolkit for manipulating URLcomponents in templates. You can use it alongside ``{% url %}`` if youlike (see below).Spurl provides a single template tag, called (surprisingly enough),``spurl``. You call it with a set of ``key=value`` keyword arguments,which are described fully below.To show some of the features of Spurl, we'll go over a couple of simpleexample use cases.Adding query parameters to URLs~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Say you have a list of external URLs in your database. When you createlinks to these URLs in a template, you need to add a``referrer=mysite.com`` query parameter to each. The simple way to dothis might be:.. code:: html+django    {% for url, title in list_of_links %}        &lt;a href=&quot;{{ url }}?referrer=mysite.com&quot;&gt;{{ title }}&lt;/a&gt;    {% endfor %}The problem here is that you don't know in advance if the URLs stored inyour database *already* have query parameters. If they do, you'llgenerate malformed links like``http://www.example.com?foo=bar?referrer=mysite.com``.Spurl can fix this. Because it knows about the components of a URL, itcan add parameters onto an existing query, if there is one... code:: html+django    {% for url, title in list_of_links %}        &lt;a href=&quot;{% spurl base=url add_query=&quot;referrer=mysite.com&quot; %}&quot;&gt;{{ title }}&lt;/a&gt;    {% endfor %}Note that **when you pass a literal string to Spurl, you have to wrap itin double quotes**. If you don't, Spurl will assume it's a variable nameand try to look it up in the template's context.SSL-sensitive external URLs.~~~~~~~~~~~~~~~~~~~~~~~~~~~~Suppose your site needs to display a gallery of images, the URLs ofwhich have come from some third-party web API. Additionally, imagineyour site needs to run both in secure and non-secure mode - the samecontent is available at both ``https`` or ``http`` URLs (depending onwhether a visitor is logged in, say). Some browsers will complain loudly(displaying &quot;Mixed content warnings&quot; to the user) if the page beingdisplayed is ``https`` but some of the assets are ``http``. Spurl canfix this... code:: html+django    {% for image_url in list_of_image_urls %}        &lt;img src=&quot;{% spurl base=image_url secure=request.is_secure %}&quot; /&gt;    {% endfor %}This will take the image URL you supply and replace the scheme component(the ``http`` or ``https`` bit) with the correct version, depending onthe return value of ``request.is_secure()``. Note that the above assumesyou're using a ``RequestContext`` so that ``request`` is available inyour template.Using alongside ``{% url %}``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Notice that Spurl's functionality doesn't overlap with Django's built-in``{% url %}`` tag. Spurl doesn't know about your urlconf, and doesn't doany URL reversing. In fact, Spurl is mostly useful for manipulating**external** URLs, rather than URLs on your own site. However, you caneasily use Spurl with ``{% url %}`` if you need to. You just have to usethe ``as`` keyword to put your reversed URL in a template variable, andthen pass this to Spurl. As it's a relative path (rather than a fullURL) you should pass it using the ``path`` argument. For example, sayyou want to append some query parameters to a URL on your site:.. code:: html+django    {% url your_url_name as my_url %}    &lt;a href=&quot;{% spurl path=my_url query=&quot;foo=bar&amp;bar=baz&quot; %}&quot;&gt;Click here!&lt;/a&gt;There is another way to use Spurl with ``{% url %}``, see *Embeddingtemplate tags* below.Available arguments~~~~~~~~~~~~~~~~~~~Below is a full list of arguments that Spurl understands.base^^^^If you pass a ``base`` argument to Spurl, it will parse its contents anduse this as the base URL upon which all other arguments will operate. Ifyou *don't* pass a ``base`` argument, Spurl will generate a URL fromscratch based on the components that you pass in separately.scheme^^^^^^Set the scheme component of the URL. Example:.. code:: html+django    {% spurl base=&quot;http://example.com&quot; scheme=&quot;ftp&quot; %}This will return ``ftp://example.com``See also: ``scheme_from``, below.host^^^^Set the host component of the URL. Example:.. code:: html+django    {% spurl base=&quot;http://example.com/some/path/&quot; host=&quot;google.com&quot; %}This will return ``http://google.com/some/path/``See also: ``host_from``, below.auth^^^^Handle HTTP Basic authentication, username and password can be passed inURL. Example:.. code:: html+django    {% spurl base=&quot;https://example.com&quot; auth=&quot;user:pass&quot; %}This will return ``https://user:pass@example.com``path^^^^Set the path component of the URL. Example:.. code:: html+django    {% spurl base=&quot;http://example.com/some/path/&quot; path=&quot;/different/&quot; %}This will return ``http://example.com/different/``See also: ``path_from``, below.add\_path^^^^^^^^^Append a path component to the existing path. You can add multiple``add_path`` calls, and the results of each will be combined. Example:.. code:: html+django    {% spurl base=STATIC_URL add_path=&quot;javascript&quot; add_path=&quot;lib&quot; add_path=&quot;jquery.js&quot; %}This will return ``http://cdn.example.com/javascript/lib/jquery.js``(assuming ``STATIC_URL`` is set to ``http://cdn.example.com``)See also: ``add_path_from``, below.fragment^^^^^^^^Set the fragment component of the URL. Example:.. code:: html+django    {% spurl base=&quot;http://example.com&quot; fragment=&quot;myfragment&quot; %}This will return ``http://example.com/#myfragment``See also: ``fragment_from``, below.port^^^^Set the port component of the URL. Example:.. code:: html+django    {% spurl base=&quot;http://example.com/some/path/&quot; port=&quot;8080&quot; %}This will return ``http://example.com:8080/some/path/``See also: ``port_from``, below.query^^^^^Set the query component of the URL. Example:.. code:: html+django    {% spurl base=&quot;http://example.com/&quot; query=&quot;foo=bar&amp;bar=baz&quot; %}This will return ``http://example.com/?foo=bar&amp;bar=baz``The ``query`` argument can also be passed a dictionary from yourtemplate's context... code:: python    # views.py    def my_view(request):        my_query_params = {'foo': 'bar', 'bar': 'baz'}        return render(request, 'path/to/template.html', {'my_query_params': my_query_params}).. code:: html+django    &lt;!-- template.html --&gt;    {% spurl base=&quot;http://example.com/&quot; query=my_query_params %}This will return ``http://example.com/?foo=bar&amp;bar=baz``Finally, you can pass individual template variables to the query. To dothis, Spurl uses Django's template system. For example:.. code:: html+django    {% spurl base=&quot;http://example.com/&quot; query=&quot;foo={{ variable_name }}&quot; %}See also: ``query_from``, below.add\_query^^^^^^^^^^Append a set of parameters to an existing query. If your base URL mightalready have a query component, this will merge the existing parameterswith your new ones. Example:.. code:: html+django    {% spurl base=&quot;http://example.com/?foo=bar&quot; add_query=&quot;bar=baz&quot; %}This will return ``http://example.com?foo=bar&amp;bar=baz``You can add multiple ``add_query`` calls, and the results of each willbe combined:.. code:: html+django    {% spurl base=&quot;http://example.com/&quot; add_query=&quot;foo=bar&quot; add_query=&quot;bar=baz&quot; %}This will return ``http://example.com?foo=bar&amp;bar=baz``Like the ``query`` argument above, the values passed to ``add_query``can also be dictionaries, and they can contain Django templatevariables.See also: ``add_query_from``, below.set\_query^^^^^^^^^^Appends a set of parameters to an existing query, overwriting existingparameters with the same name. Otherwise uses the exact same syntax as``add_query``.See also: ``set_query_from``, below.toggle\_query^^^^^^^^^^^^^Toggle the value of one or more query parameters between two possiblevalues. Useful when reordering list views. Example:.. code:: html+django    {% spurl base=request.get_full_path toggle_query=&quot;sort=ascending,descending&quot; %}If the value of ``request.get_full_path()`` doesn't have a ``sort``parameter, one will be added with a value of ``ascending`` (the firstitem in the list is the default). If it already has a ``sort``parameter, and it is currently set to ``ascending``, it will be set to``descending``. If it's already set to ``descending``, it will be set to``ascending``.You can also specify the options as a dictionary, mapping the parametername to a two-tuple containing the values to toggle. Example:.. code:: python    # views.py    SORT_PARAM = 'sort'    ASCENDING = 'ascending'    DESCENDING = 'descending'    def my_view(request):        if request.GET.get(SORT_PARAM, ASCENDING) == DESCENDING:            object_list = MyModel.objects.order_by('-somefield')        else:            object_list = MyModel.objects.order_by('somefield')        return render(request, 'path/to/template.html', {            'object_list': object_list,            'sort_params': {SORT_PARAM: (ASCENDING, DESCENDING)},        }).. code:: html+django    &lt;!-- template.html --&gt;    &lt;a href=&quot;{% spurl base=request.get_full_path toggle_query=sort_params %}&quot;&gt;Reverse order&lt;/a&gt;remove\_query\_param^^^^^^^^^^^^^^^^^^^^Remove a query parameter from an existing query:.. code:: html+django    {% spurl base=&quot;http://example.com/?foo=bar&amp;bar=baz&quot; remove_query_param=&quot;foo&quot; %}This will return ``http://example.com?bar=baz``Again, you can add multiple ``remove_query_param`` calls, and theresults will be combined:.. code:: html+django    {% spurl base=&quot;http://example.com/?foo=bar&amp;bar=baz&quot; remove_query_param=&quot;foo&quot; remove_query_param=&quot;bar&quot; %}This will return ``http://example.com/``You can also remove parameters with specific values:.. code:: html+django    {% spurl base=&quot;http://example.com/?foo=bar&amp;bar=baz&amp;foo=baz&quot; remove_query_param=&quot;foo&quot; remove_query_param=&quot;foo=baz&quot; %}This will return ``http://example.com/?bar=baz``Finally, you can pass individual template variables to the``remove_query_param`` calls. To do this, Spurl uses Django's templatesystem. For example:.. code:: html+django    {% spurl base=&quot;http://example.com/?foo=bar&amp;bar=baz&quot; remove_query_param=&quot;{{ variable_name }}&quot; %}secure^^^^^^Control whether the generated URL starts with ``http`` or ``https``. Thevalue of this argument can be a boolean (``True`` or ``False``), ifyou're using a context variable. If you're using a literal argumenthere, it must be a quoted string. The strings ``&quot;True&quot;`` or ``&quot;on&quot;``(case-insensitive) will be converted to ``True``, any other string willbe converted to ``False``. Example:.. code:: html+django    {% spurl base=&quot;http://example.com/&quot; secure=&quot;True&quot; %}This will return ``https://example.com/``autoescape^^^^^^^^^^By default, Spurl will escape its output in the same way as Django'stemplate system. For example, an ``&amp;`` character in a URL will berendered as ``&amp;amp;``. You can override this behaviour by passing an``autoescape`` argument, which must be either a boolean (if passed froma template variable) or a string. The strings ``&quot;True&quot;`` or ``&quot;on&quot;``(case-insensitive) will be converted to ``True``, any other string willbe converted to ``False``.Added bonus: ``_from`` parameters~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~As well as those listed above, Spurl provides a family of parameters for*combining* URLs. Given a base URL to start with, you can copy acomponent from another URL. These arguments expect to be passed a fullURL (or anything that can be understood by ``URLObject.parse``). ThisURL will be parsed, and then the component in question will be extractedand combined with the base URL.Below is a full list of the available ``_from`` methods. They haveidentical semantics to their counterparts above (except they expect afull URL, not just a URL component).-  ``query_from``-  ``add_query_from``-  ``set_query_from``-  ``scheme_from``-  ``host_from``-  ``path_from``-  ``add_path_from``-  ``fragment_from``-  ``port_from``Example:.. code:: html+django    {% spurl base=&quot;http://example.com/foo/bar/?foo=bar path_from=&quot;http://another.com/something/?bar=foo&quot; %}This will return ``http://example.com/something/?foo=bar``Building a URL without displaying it~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Like Django's ``{% url %}`` tag, Spurl allows you to insert thegenerated URL into the template's context for later use. Example:.. code:: html+django    {% spurl base=&quot;http://example.com&quot; secure=&quot;True&quot; as secure_url %}    &lt;p&gt;The secure version of the url is {{ secure_url }}&lt;/p&gt;Embedding template tags~~~~~~~~~~~~~~~~~~~~~~~As mentioned above, Spurl uses Django's template system to individuallyparse any arguments which can be passed strings. This allows the use ofsyntax such as:.. code:: html+django    {% spurl base=&quot;http://example.com&quot; add_query=&quot;foo={{ bar }}&quot; %}This works fine for variable and filters, but what if we want to useother template tags *inside* our Spurl tag? We can't nest ``{%`` and``%}`` tokens inside each other, because Django's template parser wouldget very confused. Instead, we have to escape the inner set of tagmarkers with backslashes:.. code:: html+django    {% spurl base=&quot;http://example.com&quot; add_query=&quot;next={\% url home %\}&quot; %}Note that any tags or filters loaded in your template are automaticallyavailable in the nested templates used to render each variable. Thismeans we can do:.. code:: html+django    {% load url from future %}    {% spurl base=&quot;{\% url 'home' %\}&quot; %}Be careful with your quotation marks! If you use double-quotes tosurround the nested template, you have to use single quotes inside it.**Warning!** This functionality only exists to serve the most complex ofuse cases, and is extremely magical (and probably a bad idea). You mayprefer to use:.. code:: html+django    {% url &quot;home&quot; as my_url %}    {% spurl base=my_url %}Development-----------To contribute, fork the repository, make your changes, add some tests,commit, push, and open a pull request.How to run the tests~~~~~~~~~~~~~~~~~~~~Spurl is tested with `nose &lt;http://nose.readthedocs.org&gt;`__. Clone therepository, then run ``pip install -r requirements.txt`` to install noseand Django into your virtualenv. Then, simply type ``nosetests`` to findand run all the tests.(Un)license-----------This is free and unencumbered software released into the public domain.Anyone is free to copy, modify, publish, use, compile, sell, ordistribute this software, either in source code form or as a compiledbinary, for any purpose, commercial or non-commercial, and by any means.In jurisdictions that recognize copyright laws, the author or authors ofthis software dedicate any and all copyright interest in the software tothe public domain. We make this dedication for the benefit of the publicat large and to the detriment of our heirs and successors. We intendthis dedication to be an overt act of relinquishment in perpetuity ofall present and future rights to this software under copyright law.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHERDEALINGS IN THE SOFTWARE.For more information, please refer to http://unlicense.org/Artwork credit--------------Superman ASCII art comes from http://ascii.co.uk/art/supermanChanges-------0.6.8 (2021-11-15)~~~~~~~~~~~~~~~~~~* Fix ``toggle_query`` support when one word is a fragment of the other.0.6.7 (2020-05-22)~~~~~~~~~~~~~~~~~~* Fixed MANIFEST.in0.6.6 (2019-03-29)~~~~~~~~~~~~~~~~~~* Added support for an except clause to remove all but specifed query vars.0.6.5 (2018-05-09)~~~~~~~~~~~~~~~~~~* Added support for Django 2.x and dropped support for older and  non-LTS version of Django.0.6.4 (2015-12-26)~~~~~~~~~~~~~~~~~~* Getting ready for Django 1.10 release.* Dropped support for Django 1.3 and older.0.6.3 (2015-12-17)~~~~~~~~~~~~~~~~~~* Django 1.9 compatible (Albert Koch)0.6.2 (2015-09-17)~~~~~~~~~~~~~~~~~~* Add support for template variables to ``remove_query_param``.* Handle auth parameters to be able to add username:password to URLs.0.6.1 (2015-07-14)~~~~~~~~~~~~~~~~~~* Python 3 compatible!0.6.0 (2012-02-23)~~~~~~~~~~~~~~~~~~* Upgrade URLObject dependency to 2.00.5.0 (2011-12-14)~~~~~~~~~~~~~~~~~~* Fix typos in changelog.* Add family of arguments (\ ``_from``\ ) for combining URLs.* Add ``toggle_query`` argument.0.4.0 (2011-12-07)~~~~~~~~~~~~~~~~~~* Upgrade URLObject dependency to 0.6.0* Add ``remove_query_param`` argument.* Add support for template tags embedded within argument values.* Extensive refactoring.0.3.0 (2011-08-18)~~~~~~~~~~~~~~~~~~* Add ``set_query`` argument.0.2.0 (2011-08-08)~~~~~~~~~~~~~~~~~~* Add ``as`` argument to insert generated URL into template context.0.1.0 (2011-07-29)~~~~~~~~~~~~~~~~~~* Initial release.</longdescription>
</pkgmetadata>