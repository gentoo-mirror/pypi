<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Config-ManConfig-Man is a configuration manager for python projects. It helps you handle your project's runtime configurations inan easy and clean way. It also supports multiple config sources like **json file**, **environment variables**,**hard coded defaults**, etc.## InstallationSimply install using pip:```bashpip install config-man```Keep in mind that Config-Man uses [Python type annotations (PEP 484)](https://www.python.org/dev/peps/pep-0484/), and[f-Strings (PEP 498)](https://www.python.org/dev/peps/pep-0498/) so you'll need Python 3.6 or higher.## Usage### Defining configIn Config-Man, configuration is defined using a class subclassed from `configman.ConfigMan`.In this class, configurations are static members with [type hints](https://docs.python.org/3/library/typing.html).Currently Config-Man only supports primitives (bool, int, float, str) and subtypes of `configman.ConfigMan`:```pythonfrom configman import ConfigManclass ServerConfig(ConfigMan):    port: int    log_level: str```For creation of nested configs (for more organized code) simply do the following:```pythonfrom configman import ConfigManclass LoggingConfig(ConfigMan):    log_level: strclass Config(ConfigMan):    port: int    logging: LoggingConfig```You can add default values during definition simply by assigning a value to it:```pythonfrom configman import ConfigManclass ServerConfig(ConfigMan):    port: int = 80    log_level: str = &quot;error&quot;```### Loading configFirst of all, you need to create an instance of your main config:```pythonconfig = Config()```#### Config SourcesThen you need to tell it where to look for configurations. Config-Man supports multiple config sources. Currently itsupports hard-coded, environment variables, json config files and arguments. If there is a config source that you needand Config-Man does not support feel free to open an issue.##### 1. hard-codedApart from the default value you set during config definition, you can add an other default value during config loadprocess simply by assigning the default value to it:```pythonconfig.port = 443```##### 2. Environment VariablesConfig-Man can read configurations from environment variables.One way to use env as a source is to assign a specific env to a config:```pythonconfig.set_env(&quot;logging.log_level&quot;)```By default all dots &quot;.&quot; in a variable path will be replaced by double under scores &quot;\_\_&quot;, So `logging.log_level` willbe filled by the value of `logging__log_level`.You can also set a specific name for the env:```pythonconfig.set_env(&quot;logging.log_level&quot;, &quot;LOG_LEVEL&quot;)```Another way is to tell Config-Man to load all possible configs from env```pythonconfig.set_auto_env()```In order to avoid collisions between different programs, you can add a prefix to all envs (in auto_env):```pythonconfig.set_auto_env(&quot;MY_PROGRAM&quot;)```Now when you load the config, Config-Man tries to read `MY_PROGRAM__PORT` and `MY_PROGRAM__logging__log_level` and puttheir values into the corresponding variables.##### 3. Config FileCurrently Config-Man only supports json config files. You can set config file using:```pythonconfig.set_config_file(&quot;config.json&quot;)```##### 4. ArgumentsYou can tell Config-Man to read a specific config from arguments using:```pythonimport argparseparser = argparse.ArgumentParser()config.set_arg(&quot;logging.log_level&quot;, &quot;log_level&quot;, parser)```Config-Man automatically adds needed argument to parser. If necessary, you can also define `action`, `help`, and `required`.#### Loading ConfigsFinally you can load the config itself by calling:```pythonconfig.load()```By default configs from file overrides config from env and config from args overrides everything else.If you like to do things in a different way, you can run `load_from_env`, `load_from_file` and `load_from_args` byyourself in any order to desire.### Creating an empty config fileIf you wish to create an empty config file, you can do so using `to_dict`:```pythonimport jsonconfig = Config()with open(&quot;config.json&quot;, &quot;w&quot;) as f:    json.dump(f, config.to_dict(), indent=2)```This way config.json will contain an empty config ready for you to fill.### Full example```pythonimport argparsefrom configman import ConfigManclass LoggingConfig(ConfigMan):    log_level: str = &quot;error&quot;class Config(ConfigMan):    port: int    logging: LoggingConfigconfig = Config()parser = argparse.ArgumentParser()config.port = 443config.set_auto_env(&quot;MY_PROGRAM&quot;)config.set_env(&quot;logging.log_level&quot;, &quot;LOG_LEVEL&quot;)config.set_config_file(&quot;config.json&quot;)config.set_arg(&quot;logging.log_level&quot;, &quot;--log_level&quot;, &quot;-l&quot;, parser)args = parser.parse_args()config.load(args)```</longdescription>
</pkgmetadata>