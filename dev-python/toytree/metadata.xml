<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Toytree==========.. image:: https://badges.gitter.im/toytree-help/Lobby.svg   :alt: Join the chat at https://gitter.im/toytree-help/Lobby   :target: https://gitter.im/toytree-help/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge  .. image:: https://anaconda.org/eaton-lab/toytree/badges/installer/conda.svg   :alt: Install with conda   :target: https://conda.anaconda.org/eaton-lab  .. image:: https://travis-ci.org/eaton-lab/toytree.svg?branch=master    :target: https://travis-ci.org/eaton-lab/toytreeTree plotting with **Toytree**------------------------------Welcome to toytree, a minimalist tree manipulation and plotting library for use inside jupyter notebooks. Toytree combines a popular tree data structure based on the `ete3 &lt;http://etetoolkit.org/docs/latest/tutorial/tutorial_trees.html&gt;`__ library with modern plotting tools based on the `toyplot &lt;http://toyplot.rtfd.io/&gt;`__ plotting library. The goal of toytree is to provide a light-weight Python equivalent to commonly used tree manipulation and plotting libraries in R, and in doing so, to promote further development of phylogenetic methods in Python. Toytree generates rich interactive figures (SVG+HTML+JS) that can be embedded in jupyter-notebooks or webpages, or rendered in SVG, PDF, or PNG for publications. Examples Gallery-----------------`See the Cookbook section in the documentation &lt;https://toytree.readthedocs.io/en/latest/Cookbook.html&gt;`_Installation--------------You can install ``toytree`` and its dependencies (``toyplot`` and ``numpy``) with a single command using conda (preferred), or from pip. .. code:: bash    conda install toytree -c conda-forgeDocumentation-------------See the `full documentation &lt;http://toytree.readthedocs.io&gt;`_ to see all of the options that toytree provides. Try it out instantly in the cloud using the `toytree binder &lt;http://mybinder.org/repo/eaton-lab/toytree&gt;`__.Examples--------.. code:: python    # import toyplot and load a newick file from a public URL    import toytree    tre = toytree.tree(&quot;https://eaton-lab.org/data/Cyathophora.tre&quot;)    # root the tree using a wildcard string matching and draw a tree figure.    rtre = tre.root(wildcard='prz')    rtre.draw(width=400, tip_labels_align=True);    # or chain a few functions together    tre.root(wildcard='prz').drop_tips(wildcard=&quot;tham&quot;).ladderize().draw();    # extensive styling options are available    rtre.draw(        tip_labels_color='pink',        node_labels='support',        node_sizes=15,        node_colors=&quot;cyan&quot;,        edge_style={            &quot;stroke&quot;: &quot;darkgrey&quot;,             &quot;stroke-width&quot;: 3,        },    ).. image:: ./manuscript/ToyTree-figure.svg</longdescription>
</pkgmetadata>