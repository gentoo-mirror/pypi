<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aioesphomeapi=============``aioesphomeapi`` allows you to interact with devices flashed with `ESPHome &lt;https://esphome.io/&gt;`_.Installation------------The module is available from the `Python Package Index &lt;https://pypi.python.org/pypi&gt;`_... code:: bash    $ pip3 install aioesphomeapiAn optional cython extension is available for better performance, and the module will try to build it automatically.The extension requires a C compiler and Python development headers. The module will fall back to the pure Python implementation if they are unavailable.Building the extension can be forcefully disabled by setting the environment variable ``SKIP_CYTHON`` to ``1``.Usage-----It's required that you enable the `Native API &lt;https://esphome.io/components/api.html&gt;`_ component for the device... code:: yaml   # Example configuration entry   api:     password: 'MyPassword'Check the output to get the local address of the device or use the ``name:``under ``esphome:`` from the device configuration... code:: bash   [17:56:38][C][api:095]: API Server:   [17:56:38][C][api:096]:   Address: api_test.local:6053The sample code below will connect to the device and retrieve details... code:: python   import aioesphomeapi   import asyncio   async def main():       &quot;&quot;&quot;Connect to an ESPHome device and get details.&quot;&quot;&quot;       # Establish connection       api = aioesphomeapi.APIClient(&quot;api_test.local&quot;, 6053, &quot;MyPassword&quot;)       await api.connect(login=True)       # Get API version of the device's firmware       print(api.api_version)       # Show device details       device_info = await api.device_info()       print(device_info)       # List all entities of the device       entities = await api.list_entities_services()       print(entities)    loop = asyncio.get_event_loop()    loop.run_until_complete(main())Subscribe to state changes of an ESPHome device... code:: python   import aioesphomeapi   import asyncio   async def main():       &quot;&quot;&quot;Connect to an ESPHome device and wait for state changes.&quot;&quot;&quot;       cli = aioesphomeapi.APIClient(&quot;api_test.local&quot;, 6053, &quot;MyPassword&quot;)       await cli.connect(login=True)       def change_callback(state):           &quot;&quot;&quot;Print the state changes of the device..&quot;&quot;&quot;           print(state)       # Subscribe to the state changes       await cli.subscribe_states(change_callback)   loop = asyncio.get_event_loop()   try:       asyncio.ensure_future(main())       loop.run_forever()   except KeyboardInterrupt:       pass   finally:       loop.close()Other examples:- `Camera &lt;https://gist.github.com/micw/202f9dee5c990f0b0f7e7c36b567d92b&gt;`_- `Async print &lt;https://gist.github.com/fpletz/d071c72e45d17ba274fd61ca7a465033#file-esphome-print-async-py&gt;`_- `Simple print &lt;https://gist.github.com/fpletz/d071c72e45d17ba274fd61ca7a465033#file-esphome-print-simple-py&gt;`_- `InfluxDB &lt;https://gist.github.com/fpletz/d071c72e45d17ba274fd61ca7a465033#file-esphome-sensor-influxdb-py&gt;`_Development-----------For development is recommended to use a Python virtual environment (``venv``)... code:: bash    # Setup virtualenv (optional)    $ python3 -m venv .    $ source bin/activate    # Install aioesphomeapi and development depenencies    $ pip3 install -e .    $ pip3 install -r requirements_test.txt    # Run linters &amp; test    $ script/lint    # Update protobuf _pb2.py definitions (requires a protobuf compiler installation)    $ script/gen-protocLicense-------``aioesphomeapi`` is licensed under MIT, for more details check LICENSE.</longdescription>
</pkgmetadata>