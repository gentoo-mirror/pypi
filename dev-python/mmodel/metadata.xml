<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>MModel======|GitHub version| |PyPI version shields.io| |PyPI pyversions| |Unittests||Docs|MModel is a lightweight and modular model-building frameworkfor small-scale and nonlinear models. The package aims to solvescientific program prototyping and distribution difficulties, makingit easier to create modular, fast, and user-friendly packages.For using mmodel in a complex scientific workflow, please refer tothe `mrfmsim &lt;https://marohn-group.github.io/mrfmsim-docs/overview.html&gt;`__on how mmodel improves the development of magnetic resonance forcemicroscopy (MRFM) experiments.Quickstart----------To create a nonlinear model that has the result of`(x + y)log(x + y, base)`:.. code-block:: python    import math    import numpy as np    def func(sum_xy, log_xy):        &quot;&quot;&quot;Function that adds a value to the multiplied inputs.&quot;&quot;&quot;        return sum_xy * log_xy + 6The graph is defined using grouped edges (the ``networkx`` syntax of edgethe definition also works.).. code-block:: python    from mmodel import ModelGraph, Model, MemHandler    # create graph edges    grouped_edges = [        (&quot;add&quot;, [&quot;log&quot;, &quot;function node&quot;]),        (&quot;log&quot;, &quot;function node&quot;),    ]The functions are then added to node attributes. The order of definitionis node_name, node_func, output, input (if different from original function),and modifiers... code-block:: python    # define note objects    node_objects = [        (&quot;add&quot;, np.add, &quot;sum_xy&quot;, [&quot;x&quot;, &quot;y&quot;]),        (&quot;log&quot;, math.log, &quot;log_xy&quot;, [&quot;sum_xy&quot;, &quot;log_base&quot;]),        (&quot;function node&quot;, func, &quot;result&quot;),    ]    G = ModelGraph(name=&quot;example_graph&quot;)    G.add_grouped_edges_from(grouped_edges)    G.set_node_objects_from(node_objects)To define the model, the name, graph, and handler need to be specified. Additionalparameters include modifiers, descriptions, and returns lists. The input parametersof the model are determined based on the node information... code-block:: python    example_model = Model(&quot;example_model&quot;, G, handler=MemHandler, description=&quot;Test model.&quot;)The model behaves like a Python function, with additional metadata. The graph canbe plotted using the ``draw`` method... code-block:: python    &gt;&gt;&gt; print(example_model)    example_model(log_base, x, y)    returns: z    graph: example_graph    handler: MemHandler    Test model.    &gt;&gt;&gt; example_model(2, 5, 3) # (5 + 3)log(5 + 3, 2) + 6    30.0    &gt;&gt;&gt; example_model.draw()The resulting graph contains the model metadata and detailed node information... .. |br| raw:: html    ..     &lt;br/&gt;.. .. image:: example.png..   :width: 300..   :alt: example model graphOne key feature of ``mmodel`` that differs from other workflow is modifiers, which modify callables post definition. Modifiers work on both the node leveland model level.Example: Use ``loop_input`` modifier on the graph to loop the nodes that require the&quot;log_base&quot; parameter... code-block:: python     from mmodel import loop_input    H = G.subgraph(inputs=[&quot;log_base&quot;])    H.name = &quot;example_subgraph&quot;    loop_node = Model(&quot;submodel&quot;, H, handler=MemHandler)    looped_G = G.replace_subgraph(        H,        &quot;loop_node&quot;,        loop_node,        output=&quot;looped_z&quot;,        modifiers=[loop_input(&quot;log_base&quot;)],    )    looped_G.name = &quot;looped_graph&quot;    looped_model = Model(&quot;looped_model&quot;, looped_G, loop_node.handler)We can inspect the loop node as well as the new model... code-block:: python     &gt;&gt;&gt; print(looped_model)    looped_model(log_base, x, y)    returns: looped_z    graph: looped_graph    handler: MemHandler()        &gt;&gt;&gt; print(looped_model.node_metadata(&quot;loop_node&quot;))    submodel(log_base, sum_xy)    return: looped_z    functype: mmodel.Model    modifiers:      - loop_input('log_base')    &gt;&gt;&gt; looped_model([2, 4], 5, 3) # (5 + 3)log(5 + 3, 2) + 6    [30.0, 18.0]Use the ``draw`` method to draw the graph. There are three styles&quot;plain&quot;, &quot;short&quot;, and &quot;verbose&quot;, which differ by the level of detail of thenode information. A graph output is displayed in Jupyter Notebookor can be saved using the export option... code-block:: python    G.draw(style=&quot;short&quot;)    example_model.draw(style=&quot;plain&quot;, export=&quot;example.pdf&quot;) # default to draw_graphInstallation------------Graphviz installation^^^^^^^^^^^^^^^^^^^^^To view the graph, Graphviz needs to be installed:`Graphviz Installation &lt;https://graphviz.org/download/&gt;`_For windows installation, please choose &quot;add Graphviz to thesystem PATH for all users/current users&quot; during the setup.MModel installation^^^^^^^^^^^^^^^^^^^^^^^.. code-block::    pip install mmodelDevelopment installation^^^^^^^^^^^^^^^^^^^^^^^^MModel uses `poetry &lt;https://python-poetry.org/docs/&gt;`_ asthe build system. The package works with both pip and poetryinstallation. For macos systems, sometimes `brew install` resultsin unexpected installation path, it is recommended to installwith conda::    conda install -c conda-forge pygraphvizTo install test and docs, despondencies run::    pip install .[test] .[docs]To run the tests in different python environments and cases (py38, py39, py310, py311, coverage and docs)::    toxTo create the documentation, run under the &quot;/docs&quot; directory::    make html.. |GitHub version| image:: https://badge.fury.io/gh/peterhs73%2FMModel.svg   :target: https://github.com/Marohn-Group/mmodel.. |PyPI version shields.io| image:: https://img.shields.io/pypi/v/mmodel.svg   :target: https://pypi.python.org/pypi/mmodel/.. |PyPI pyversions| image:: https://img.shields.io/pypi/pyversions/mmodel.svg.. |Unittests| image:: https://github.com/Marohn-Group/mmodel/actions/workflows/tox.yml/badge.svg    :target: https://github.com/Marohn-Group/mmodel/actions.. |Docs| image:: https://img.shields.io/badge/Documentation--brightgreen.svg    :target: https://github.com/Marohn-Group/mmodel-docs/</longdescription>
</pkgmetadata>