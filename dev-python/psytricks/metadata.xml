<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PSytricks![PyPI](https://img.shields.io/pypi/v/psytricks)![PyPI - License](https://img.shields.io/pypi/l/psytricks)![pdoc](https://img.shields.io/badge/docs-pdoc-brightgreen.svg)![black](https://img.shields.io/badge/code%20style-black-000000.svg)`P`ower`S`hell P`y`thon Ci`tri`x Tri`cks` - pun intended.![logo](https://raw.githubusercontent.com/imcf/psytricks/main/resources/images/logo.png)This package provides an abstraction layer allowing Python code to interact witha [Citrix Virtual Apps and Desktops (CVAD)][www_cvad] stack, i.e. to fetchstatus information and trigger actions on machines and sessions. Since CVAD onlyprovides a *PowerShell Snap-In* to do so, a core component written in `WindowsPowerShell` (note: **not** `PowerShell Core` as snap-ins are not supportedthere) is required.PSyTricks ships with two options for the PowerShell layer:* A wrapper script that is launched as a suprocess from the Python code. It  doesn't require any further setup beyond the package installation but  performance, well, slow.* A (zero-authentication) `REST` (see the note below on this) service providing  several `GET` and `POST` endpoints to request status information or perform  actions. Performance is *much* better compared to the wrapper script, but  obviously this requires the code to be running as a service in an appropriate  permission context.NOTE: this `RESTful` claim is actually not entirely true. Or basically not atall, it would be better called an `HTTP-JSON-RPC-API`. We'll still be using theterm `REST` for it as this is basically what people nowadays think of when theyare coming across this label. Sorry, [Roy T. Fielding][www_rtf].## ü§Ø Are you serious?Calling PowerShell as a subprocess from within Python? üò≥To convert results to JSON and pass them back, just to parse it again in Python.Really? üßêOr, not sure if that's any better, implementing an HTTP REST API in plainPowerShell?!? ü´£### ‚úÖ Yes. We. Are*And the package name was chosen to reflect this.*To be very clear: performance of the wrapper script is abysmal, but this is *notat all* an issue for us. Abysmal, as in: for every wrapped call a full (new)PowerShell process needs to be instantiated, usually taking something like 1-2seconds. ‚è≥The REST interface provides a much better performance, at the cost of someadditional setup. If you're happy to take on this approach, the package offers avery smooth ride. üé¢üé°## üõ†üöß Installation### PrerequisitesAs mentioned above, the *Citrix Broker PowerShell Snap-In* is required to beinstalled on the machine that will run the wrapper script, since its commandsare being used to communicate with the CVAD stack. This is also the reason whythis package will work on ***Windows PowerShell only*** as snap-ins are notsupported on other PowerShell editions. Please note this also implies that thelatest usable PowerShell version is 5.1 as newer ones have dropped support forsnap-ins (but that's a different problem that Citrix will have to solve at somepoint).To install the snap-in, look for an MSI package like this in the `DeliveryController` or `XenDesktop` installation media and install it as usual:* `Broker_PowerShellSnapIn_x64.msi`### Installing the üêç packageIn case you're planning to use `psytricks` via the subprocess approach(discouraged but less components to set up), you will have to install thepackage itself on the Windows machine having the above mentioned *Snap-In*installed. For the `REST` approach (recommended) only the PowerShell servicedescribed in the section below has to run on that machine - the Python packagecan be installed on any computer that is able to talk to the `REST` service.For installing `psytricks` please create and activate a `venv`, then run:```bashpip install psytricks```NOTE: this will also register the `psytricks` CLI tool although that one ismostly meant for testing and demonstration purposes, otherwise the `*-Broker*`commands provided by the PowerShell snap-in could be used directly.### Setting up the REST serviceThe easiest way for installing the REST service is to use [WinSW (WindowsService Wrapper)][www_winsw] but you may choose anything you like to launch theserver process like NSSM, Scheduled Tasks üìÖ, homegrown dark magic ü™ÑüîÆ orothers.To go with **WinSW** simply download the bundled version provided with each[PSyTricks release][www_releases]. Just look for the `.zip` asset having `REST`and `WinSW` in its name.Unzip the downloaded file to the desired target location, e.g.`%PROGRAMDATA%\PSyTricks`, then copy / rename `restricks-server.example.xml` to`restricks-server.xml` and open it in an editor.Adapt the entries in the `&lt;serviceaccount&gt;` section to match your requirementsand make sure to update the hostname passed via the `-AdminAddress` parameter inthe `&lt;startarguments&gt;` section. It needs to point to your Citrix DeliveryController, just in case that's not obvious.Next step is to install and start the service:```PowerShellcd C:\ProgramData\PSyTricksrestricks-server.exe isntallStart-Service RESTricksServer```In case the service doesn't start up, check the Windows Event Log and the `.log`files created by WinSW in the service directory.Once the service has started, you can monitor its actions by live-watching thelog file:```PowerShellGet-Content -Wait C:\ProgramData\PSyTricks\restricks-server.log```Tada! That's it, the service is now ready to take HTTP requests (from`localhost`)! üéâPlease be aware that the REST interface doesn't do **any authentication** onpurpose, meaning everything / everyone that can access it will be able to runall requests! We're using it in combination with an SSH tunnel but essentiallyanything that controls who / what can access the service will do the job.## üé™ What does it provide?To interact with CVAD, a wrapper object needs to beinstantiated and instructed how to communicate with the stack.### Using the REST service - *recommended*After setting up the REST service as described above and making sure to be ableto connect to it (firewall rules, ssh tunnel, ...), a`psytricks.wrapper.ResTricksWrapper` object can be used while passing the URLunder which the REST service is reachable, e.g.```Pythonfrom psytricks.wrapper import ResTricksWrapperwrapper = ResTricksWrapper(base_url=&quot;http://localhost:8080/&quot;)```### Using the subprocess wrapper - *use with caution*(This is only recommended for testing or if for some reason you don't want /can't set up the REST service.)To create a wrapper object using the subprocess variant, a`psytricks.wrapper.PSyTricksWrapper` with the address of the *DeliveryController* to connect to has to be instantiated, for example:```Pythonfrom psytricks.wrapper import PSyTricksWrapperwrapper = PSyTricksWrapper(deliverycontroller=&quot;cdc01.vdi.example.xy&quot;)```### Fetching status informationThe wrapper object can then be used to e.g. retrieve information on the machinescontrolled (&quot;brokered&quot;) by Citrix:```Pythonmachines = wrapper.get_machine_status()for machine in machines:    print(f&quot;[{machine[&quot;DNSName&quot;]}] is in power state '{machine[&quot;PowerState&quot;]}'&quot;)print(f&quot;Got status details on {len(machines)} machines.&quot;)```### Performing actionsTo restart a machine, use something like this:```Pythonwrapper.perform_poweraction(machine=&quot;vm23.vdi.example.xy&quot;, action=&quot;restart&quot;)```For placing a machine in *Maintenance Mode* use:```Pythonwrapper.set_maintenance(machine=&quot;vm42.vdi.example.xy&quot;, disable=False)```[www_cvad]: https://docs.citrix.com/en-us/citrix-virtual-apps-desktops[www_winsw]: https://github.com/winsw/winsw[www_releases]: https://github.com/imcf/psytricks/releases[www_rtf]: https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven</longdescription>
</pkgmetadata>