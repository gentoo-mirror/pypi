<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>miepython=========by Scott Prahl.. image:: https://img.shields.io/pypi/v/miepython.svg   :target: https://pypi.org/project/miepython/.. image:: https://img.shields.io/badge/readthedocs-latest-blue.svg   :target: https://miepython.readthedocs.io.. image:: https://img.shields.io/badge/MIT-license-yellow.svg   :target: https://github.com/scottprahl/miepython/blob/master/LICENSE.txt.. image:: https://github.com/scottprahl/miepython/actions/workflows/test.yml/badge.svg   :target: https://github.com/scottprahl/miepython/actions/workflows/test.yml.. image:: https://zenodo.org/badge/99259684.svg   :target: https://zenodo.org/badge/latestdoi/99259684__________``miepython`` is a pure Python module to calculate light scattering fornon-absorbing, partially-absorbing, or perfectly-conducting spheres. Mietheory is used, following `the procedure described by Wiscombe&lt;http://opensky.ucar.edu/islandora/object/technotes:232&gt;`_. This code hasbeen validated against his results. This code provides functions for calculating the extinction efficiency, scattering efficiency, backscattering, and scattering asymmetry. Moreover, a set of angles can be given to calculate the scattering for a sphere at each of thoseangles.Full documentation at &lt;https://miepython.readthedocs.io&gt;Pay Attention!--------------When comparing different Mie scattering codes, make sure that you're aware of the conventions used by each code.  ``miepython`` makes the following assumptions#. the imaginary part of the complex index of refraction for absorbing spheres is *negative*.  #. the scattering phase function is normalized so it equals the *single scattering albedo* when integrated over 4Ï€ steradians.  As of version 2.3, this can be changed.Using miepython---------------1. You can install locally using pip::        pip install miepython2. or `run this code in the cloud using Google Collaboratory &lt;https://colab.research.google.com/github/scottprahl/miepython/blob/master&gt;`_ by selecting the Jupyter notebook that interests you.An example----------The following code::    import miepython        m = 1.5-1j    x = 1    qext, qsca, qback, g = miepython.mie(m,x)    print(&quot;The extinction efficiency  is %.3f&quot; % qext)    print(&quot;The scattering efficiency  is %.3f&quot; % qsca)    print(&quot;The backscatter efficiency is %.3f&quot; % qback)    print(&quot;The scattering anisotropy  is %.3f&quot; % g)should produce::    The extinction efficiency  is 2.336    The scattering efficiency  is 0.663    The backscatter efficiency is 0.573    The scattering anisotropy  is 0.192Here are a few short scripts in the github repository.* `Extinction Efficiency of Absorbing and Non-Absorbing Spheres &lt;https://github.com/scottprahl/miepython/blob/master/miepython/examples/01_dielectric.py&gt;`_ * `Four Micron Glass Spheres &lt;https://github.com/scottprahl/miepython/blob/master/miepython/examples/02_glass.py&gt;`_ * `One Micron Water Droplets &lt;https://github.com/scottprahl/miepython/blob/master/miepython/examples/03_droplets.py&gt;`_ * `Gold Nanospheres &lt;https://github.com/scottprahl/miepython/blob/master/miepython/examples/04_gold.py&gt;`_ Detailed documentation is available at &lt;https://miepython.readthedocs.io&gt;License-------``miepython`` is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>