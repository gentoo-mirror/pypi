<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Markdown Exec[![ci](https://github.com/pawamoy/markdown-exec/workflows/ci/badge.svg)](https://github.com/pawamoy/markdown-exec/actions?query=workflow%3Aci)[![documentation](https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat)](https://pawamoy.github.io/markdown-exec/)[![pypi version](https://img.shields.io/pypi/v/markdown-exec.svg)](https://pypi.org/project/markdown-exec/)[![gitpod](https://img.shields.io/badge/gitpod-workspace-blue.svg?style=flat)](https://gitpod.io/#https://github.com/pawamoy/markdown-exec)[![gitter](https://badges.gitter.im/join%20chat.svg)](https://gitter.im/markdown-exec/community)Utilities to execute code blocks in Markdown files.For example, you write a Python code block that computes some HTML,and this HTML is injected in place of the code block.## InstallationWith `pip`:```bashpip install markdown-exec[ansi]```The `ansi` extra provides the necessary bits (`pygments-ansi-color` and a CSS file)to render ANSI colors in HTML code blocks. The CSS file is automatically addedto MkDocs' `extra_css` when Markdown Exec is activated via `plugins` (see below).## ConfigurationThis extension relies on the[SuperFences](https://facelessuser.github.io/pymdown-extensions/extensions/superfences/)extension of[PyMdown Extensions](https://facelessuser.github.io/pymdown-extensions/).To allow execution of code blocks,configure a custom fence from Python:```pythonfrom markdown import Markdownfrom markdown_exec import formatter, validatorMarkdown(    extensions=[&quot;pymdownx.superfences&quot;],    extension_configs={        &quot;pymdownx.superfences&quot;: {            &quot;custom_fences&quot;: [                {                    &quot;name&quot;: &quot;python&quot;,                    &quot;class&quot;: &quot;python&quot;,                    &quot;validator&quot;: validator,                    &quot;format&quot;: formatter,                }                # ...one fence for each language we support:                # bash, console, md, markdown, py, python, pycon, sh, tree            ]        }    })```...or in MkDocs configuration file, as a Markdown extension:```yaml# mkdocs.ymlmarkdown_extensions:- pymdownx.superfences:    custom_fences:    - name: python      class: python      validator: !!python/name:markdown_exec.validator      format: !!python/name:markdown_exec.formatter    # ...one fence for each language we support:    # bash, console, md, markdown, py, python, pycon, sh, tree```...or in MkDocs configuration file, as a plugin:```yaml# mkdocs.ymlplugins:- search- markdown-exec```We do recommend enabling Markdown Exec with the MkDocs pluginif you are using MkDocs: it will take care of adding relevantassets (CSS/JS) to the final site when needed. ## UsageYou are now able to execute code blocks instead of displaying them:````md```python exec=&quot;on&quot;print(&quot;Hello Markdown!&quot;)```````The `exec` option will be true for every possible value except `0`, `no`, `off` and `false` (case insensitive).Below you can see an example of running a bash script that is expected toreturn a non-zero exit code:````md```bash exec=&quot;1&quot; source=&quot;tabbed-left&quot; returncode=&quot;2&quot;grep extra_css README.md &amp;&amp; exit 2```````See [usage](https://pawamoy.github.io/markdown-exec/usage/) for more details,and the [gallery](https://pawamoy.github.io/markdown-exec/gallery/) for more examples!</longdescription>
</pkgmetadata>