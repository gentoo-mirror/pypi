<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Build [Faker](https://github.com/joke2k/faker#readme) providers based on datasets`faker-datasets` offers a building block for seeding the data generationwith existing data.You can create simple providers picking a random entry from a tailored dataset orassemble complex ones where you generate new combinations from more datasets,all this while keeping an eye on speed and memory consumption.Let's see how to.# Crash courseWe'll use the wonderful [Countries State Cities DB](https://github.com/dr5hn/countries-states-cities-database)maintained by [Darshan Gada](https://github.com/dr5hn). Download the[cities](https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/v1.9/cities.json) and the[countries](https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/v1.9/countries.json) datasets.## Basic random picker`Cities` generates a city by randomly picking an entry in the citiesdataset. Here the dataset is named `cities`, the dataset file is`cities.json` (adjust to the actual path of the file saved earlier)and the picker, the method to get a random city, is named `city`.How we define it in file `cities_provider.py`:```pythonfrom faker_datasets import Provider, add_dataset@add_dataset(&quot;cities&quot;, &quot;cities.json&quot;, picker=&quot;city&quot;)class Cities(Provider):    pass```How we could use it to generate 10 cities:```pythonfrom faker import Fakerfrom cities_provider import Citiesfake = Faker()fake.add_provider(Cities)for _ in range(10):    # Use of the picker named in @add_dateset    city = fake.city()    print(&quot;{name} is in {country_name}&quot;.format(**city))```One of the many possible outputs:```Poiana Cristei is in RomaniaCodosera La is in SpainJeremoabo is in BrazilRodr√≠go M. Quevedo is in MexicoCary is in United StatesLocking is in United KingdomMezinovskiy is in RussiaNesoddtangen is in NorwayZalesnoye is in UkraineCefa is in Romania```Because the data generation is a pseudo-random process, every execution outputsdifferent results. If you want reproducible outputs, you have to seed the Fakergenerator as documented [here](https://faker.readthedocs.io/en/master/index.html#seeding-the-generator).## Customize the random picker`CitiesEx` is functionally identical to `Cities` but shows how to definethe picker by yourself. Here `picker=` is gone from the parameters of`@add_dataset` but a new `city` method is defined.```pythonfrom faker_datasets import Provider, add_dataset, with_datasets@add_dataset(&quot;cities&quot;, &quot;cities.json&quot;)class CitiesEx(Provider):    @with_datasets(&quot;cities&quot;)    def city(self, cities):        return self.__pick__(cities)```Note how the `city` method is decorated with `@with_datasets(&quot;cities&quot;)`and how, consequently, it receives the said dataset as parameter.The call to `__pick__` just selects a random entry from `cities`.## Matching a criterium`CitiesFromCountry` exploits the custom picker to return only cities from agiven country. A first implementation could just discard cities from anyother country, getting slower with increasing bad luck.```pythonfrom faker_datasets import Provider, add_dataset, with_datasets@add_dataset(&quot;cities&quot;, &quot;cities.json&quot;)class CitiesFromCountry(Provider):    @with_datasets(&quot;cities&quot;)    def city(self, cities, country_name):        while True:            city = self.__pick__(cities)            if city[&quot;country_name&quot;] == country_name:                return city```It's better to limit to the number of attempts though otherwise if`country_name` is misspelled the picker would enter in an infinite loop.```pythonfrom faker_datasets import Provider, add_dataset, with_datasets@add_dataset(&quot;cities&quot;, &quot;cities.json&quot;)class CitiesFromCountry(Provider):    @with_datasets(&quot;cities&quot;)    def city(self, cities, country_name, max_attempts=10000):        while max_attempts:            city = self.__pick__(cities)            if city[&quot;country_name&quot;] == country_name:                return city            max_attempts -= 1        raise ValueError(&quot;Run out of attempts&quot;)```Or, with same results, use the `match=` and `max_attempts=`parameters of `__pick__`.```pythonfrom faker_datasets import Provider, add_dataset, with_datasets@add_dataset(&quot;cities&quot;, &quot;cities.json&quot;)class CitiesFromCountry(Provider):    @with_datasets(&quot;cities&quot;)    def city(self, cities, country_name):        # match tells to __picker__ whether the city is good or not        match = lambda city: city[&quot;country_name&quot;] == country_name        return self.__pick__(cities, match=match, max_attempts=10000)```If you know ahead which country you are interested in, say Afghanistan,you can use the `@with_match` picker decorator. It produces a new indexof only matching entries and the picking speed is again constant andindependent from bad luck.```pythonfrom faker_datasets import Provider, add_dataset, with_datasets, with_match@add_dataset(&quot;cities&quot;, &quot;cities.json&quot;)class CitiesFromCountry(Provider):    @with_datasets(&quot;cities&quot;)    @with_match(lambda city: city[&quot;country_name&quot;] == &quot;Afghanistan&quot;)    def afghan_city(self, cities):        return self.__pick__(cities)```At such conditions though it's maybe better to massage your dataset andleave only the entries matching your criteria.## Using multiple datasets`CitiesAndCountries` fuses two datasets for more advanced matches. Notehow `@add_dataset` makes multiple datasets available to the providerand `@with_datasets` passes them to the given picker.```pythonfrom faker_datasets import Provider, add_dataset, with_datasets, with_match@add_dataset(&quot;cities&quot;, &quot;cities.json&quot;)@add_dataset(&quot;countries&quot;, &quot;countries.json&quot;)class CitiesAndCountries(Provider):    @with_datasets(&quot;cities&quot;, &quot;countries&quot;)    def city_by_region(self, cities, countries, region):        def match(city):            # Given a city, find its country info in the countries dataset            country = next(country for country in countries if country[&quot;name&quot;] == city[&quot;country_name&quot;])            # Check that the country is in the region of interest            return country[&quot;region&quot;] == region        return self.__pick__(cities, match=match, max_attempts=10000)```The picker performs the data mix and match so that the region requestis satisfied or an error is signaled.## SummaryYou use `@add_dataset` to attach a dataset to your provider, if you specifya `picker=` parameter you'll get for free a random picker of entries.The more datasets you need, the more `@add_dataset` you can use.If you have special needs you can define the pickers for yourself, eachusing what datasets are most appropriate among those made available with`@add_dataset`. You can add as many pickers as you need.A picker can use `match=` and `max_attempts=` to make the generation respectsome useful criteria.</longdescription>
</pkgmetadata>