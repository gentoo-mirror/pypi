<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====CRDS====CRDS is a package used for working with astronomical reference files for theHST and JWST telescopes.  CRDS is useful for performing various operations onreference files or reference file assignment rules.  CRDS is used to assign,check, and compare reference files and rules, and also to predict thosedatasets which should potentially be reprocessed due to changes in referencefiles or assignment rules.  CRDS has versioned rules which define theassignment of references for each type and instrument configuration.  CRDS hasweb sites corresponding to each project (http://hst-crds.stsci.edu orhttps://jwst-crds.stsci.edu/) which record information about reference filesand provide related services.CRDS development is occuring at:     `Project's github page &lt;https://github.com/spacetelescope/crds&gt;`_.CRDS is also available for installation as part of ``stenv``:     `stenv &lt;https://github.com/spacetelescope/stenv&gt;`_.Basic CRDS Installation-----------------------For many roles, CRDS is *automatically installed as a dependency* of thecalibration software.  This default installation supports running calibrationsbut not more advanced CRDS activities like submitting files or development.You can test for an existing installation of CRDS like this::  $ crds list --status  CRDS Version = '7.4.0, b7.4.0, daf308e24c8dd37e70c89012e464058861417245'  CRDS_MODE = 'auto'  CRDS_PATH = 'undefined'  CRDS_SERVER_URL = 'undefined'  Cache Locking = 'enabled, multiprocessing'  Effective Context = 'jwst_0541.pmap'  Last Synced = '2019-08-26 07:30:09.254136'  Python Executable = '/Users/homer/miniconda3/envs/crds-env/bin/python'  Python Version = '3.7.4.final.0'  Readonly Cache = FalseThis output indicates CRDS is installed and configured for processing onsiteusing a pre-built cache of CRDS rules and references at */grp/crds/cache*.File Submission Installation----------------------------For performing the file submission role,  CRDS includes additional dependenciesand can be trickier to install.Addding CRDS to an Existing Environment+++++++++++++++++++++++++++++++++++++++You can install/upgrade CRDS and it's dependencies in your current environmentlike this::  git clone https://github.com/spacetelescope/crds.git  cd crds  ./crds_setup_crdsIt is recommended that you only do this in an environment dedicated to filesubmissions.   This may be suitable for e.g. installing/upgrading CRDS inan active *redcatconda* environment.Full Environment Install++++++++++++++++++++++++Sometimes it's expedient to install an entirely new environment including abaseline conda,  CRDS,  and all of it's dependencies.  To start from scratch,you can::  git clone https://github.com/spacetelescope/crds.git  cd crds  ./crds_setup_all  # open a new terminal window  conda activate crds-envTo customize a bit more, *crds_setup_all* and *crds_setup_env* supportparameters which can be used to specify OS, shell, and install location.Substitute the below to specify Linux, c-shell, and a non-default installlocation::  ./crds_setup_all   Linux  csh   $HOME/miniconda_crdsAdvanced Install++++++++++++++++Below are the current sub-tasks used conceptually for a full featured CRDSinstall.    These can serve as an alternative to cloning the CRDS repo andrunning the install script(s).  If you already have a python environmentsupporting pip,1. Installing Conda / Astroconda^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Alternate / definitive installation instructions for installing a baseline condacan be found here::  https://spacetelescope.github.io/training-library/computer_setup.html#installing-conda2. Create crds-env Environment^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The CRDS software and basic conda dependencies should be installed in anisolated conda environment::  conda create -n crds-env  conda activate crds-envYou can substitute the environment name of your choice, e.g. *redcatconda* vs. *crds-env*.3. Add JWST CAL S/W and Dependencies^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Installing the JWST CAL S/W will also automatically install many dendencies ofa numerical computing environment::  pip install --upgrade numpy  pip install --upgrade git+https://github.com/spacetelescope/jwstNote that these commands also install the latest version of CRDS from pip whichmay not be current enough for ongoing reference file testing andtroubleshooting.4. Install CRDS and Dependencies^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^This sequence first removes the CRDS installed automatically as part ofinstalling the *jwst* package and then installs the latest available CRDSfrom github with advanced dependencies not needed for basic operation::  pip uninstall --yes crds  pip install --upgrade  git+https://github.com/spacetelescope/crds.git#egg=crds[&quot;submission&quot;,&quot;test&quot;]A more full featured CRDS install is::  pip install --upgrade  git+https://github.com/spacetelescope/crds.git#egg=crds[&quot;submission&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;docs&quot;]5. Install Fitsverify^^^^^^^^^^^^^^^^^^^^^Since it is a C-based package fitsverify is not available using pip but isavailable via conda on the astroconda channel::  conda config --add channels http://ssb.stsci.edu/astroconda  conda install --yes fitsverifyAs part of an end-user setup installation of fitsverify is optional, CRDScertify will run without it after issuing a warning, the CRDS server will runfitsverify as part of its checks unless/until we stop using it altogether.User's Guide------------More documentation about CRDS is available here:    https://jwst-crds.stsci.edu/static/users_guide/index.html</longdescription>
</pkgmetadata>