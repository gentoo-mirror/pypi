<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========pybk8500========Python library for the BK Precision 8500 SERIES DC ELECTRONIC LOADSModels 8500, 8502, 8510, 8512, 8514, 8518, 8520,8522, 8524 &amp; 8526Protocol found at https://bkpmedia.s3.amazonaws.com/downloads/manuals/en-us/85xx_manual.pdfin the &quot;Command details&quot; section.Command Line Interface======================I added some command line interface utilities that use python's &quot;-m&quot; module switch.Install-------.. code-block:: bash    pip install pybk8500[all]Requirements------------  * pyserial&gt;=3.4  * continuous-threading&gt;=2.0.0Send Command------------Send a command to a serial port and wait for a response... code-block:: bash    python -m pybk8500.send_cmd &quot;COM1&quot; 9600 &quot;RemoteOn&quot; --address 1    # will send the command down a serial port and wait for a responseThe command ID can be the string NAME or integer ID... code-block:: bash    # cmd_id as str    python -m pybk8500.send_cmd &quot;COM1&quot; 9600 &quot;SetRemote&quot; --value 1 --address 1    # cmd_id as hex    python -m pybk8500.send_cmd &quot;COM1&quot; 9600 0x20 --value 1 --address 1    # cmd_id as decimal    python -m pybk8500.send_cmd &quot;COM1&quot; 9600 32 --value 1 --address 1Parser======The parser is used to parse incoming messages. It can be used with to parse single messages,parse messages with an iterator, or parse using a callback function.Parse Iterator Example----------------------Use a for loop to iterate through parsed messages... code-block:: python    import pybk8500    with open('saved_messages.txt', 'rb') as f:        p = pybk8500.Parser()        for msg in p.parse_iter(f.read()):            print(msg.NAME)            for field, value in msg.fields().items():                print('\t{} = {}'.format(field, value))Parse Callback Example----------------------Use a callback function to handle parsed messages. This is useful for GUI's with a serial port... code-block:: python    import sys    import pybk8500    def print_error(error):        print('{}: {}'.format(type(error).__name__, str(error)), file=sys.stderr)    def print_msg(msg):        print(msg.NAME)        for field, value in msg.fields().items():            print('\t{} = {}'.format(field, value))    p = pybk8500.Parser()    p.error = print_error    with open('saved_messages.txt', 'rb') as f:        p.parse(f.read(), print_msg)Parse Single Message Example----------------------------Parse a single message at a time... code-block:: python    import sys    import pybk8500    def print_error(error):        print('{}: {}'.format(type(error).__name__, str(error)), file=sys.stderr)    with open('saved_messages.txt', 'rb') as f:        p = pybk8500.Parser()        byts = f.read()        while True:            msg, error, byts = self.parse_msg(byts)            if msg is not None:                print(msg.NAME)                for field, value in msg.fields().items():                    print('\t{} = {}'.format(field, value))            elif error is not None:                print_error(error)            else:                breakCommands========Generate commands and send them down a serial portRequirements------------  * pyserial`pip install pyserial`Use Commands------------Create and use command easily.Commands can be found at https://bkpmedia.s3.amazonaws.com/downloads/manuals/en-us/85xx_manual.pdfin the &quot;Command details&quot; section... code-block:: python    import pybk8500    import serial    ser = serial.Serial('COM1', 9600)    cmd = pybk8500.SetRemoteOperation(address=1, operation='Remote')    ser.write(bytes(cmd))    # Most commands have a value alias    cmd = pybk8500.SetRemoteOperation(address=1, value='Remote')    ser.write(bytes(cmd))Commands are bytearrays which can be used as bytes. When you change a value a flag is set to indicate that thechecksum must be recalculated. Calling `bytes(cmd)` will recalculate the checksum before converting to bytes.Profile=======Custom profile CSV runner.CSV---The CSV of profile commands is defined by &quot;Command&quot;, &quot;Value&quot;, &quot;Run Time (s)&quot;.  * Command - Name of the command you want to send.   * Runs any command registered in &quot;pybk8500.Parser.lookup&quot; as well as predefined custom internal commands.   * Commands can be a name &quot;SetRemote&quot;, hex value &quot;0x20&quot;, or decimal value 32.  * Value - Value to pass into the command.   * The Command needs the &quot;value&quot; alias or custom internal command.   * Accepts units! &quot;1 mW&quot; will be parsed and converted to &quot;0.001 W&quot;  * Run Time (s) - Turn on the load and run for the given amount of time.   * Accepts Units &quot;1 h&quot; or &quot;1:00:00&quot; will be parsed and converted to &quot;3600 s&quot;Commands-------- * Comment line by starting the line with &quot;#&quot; or &quot;;&quot; * Internal Commands  * &quot;SetupRemote,,&quot; - Turn On Remote, Turn Off Load  * &quot;TeardownRemote,,&quot; - Turn Off Load, Turn Off Remote  * &quot;Run,,10 s&quot; - Run the current mode by turning on the load and reading the input for the run time.  * &quot;Connect,,&quot; - Connect the serial port.  * &quot;SampleRate,40,&quot; - Set the read input time sample rate (1/value delay after each read).  * &quot;SampleTime,0.1,&quot; - Set the read input time (value delay after each read).  * &quot;BaudRate,38400,&quot; - Set the serial port baud rate.  * &quot;Com,COM1,&quot; - Set the serial com port.  * &quot;Port,COM1,&quot; - Set the serial com port.  * &quot;Output,my_file.csv,&quot; - Set the output file for any subsequent runs.   * &quot;Output,,&quot; - Print the results for subsequent runs.  * &quot;Print,===== Print =====,&quot; - Print the value (&quot;===== Print =====&quot;) to stdout.  * &quot;Sleep,0.1 s,&quot; - Sleep the given amount of time   * &quot;Sleep,,0.1 s&quot; - Sleep with timeout also works  * &quot;Stop,,&quot; - Stop running the program here. This is a hard stop that can be useful for debugging. * All defined commands in &quot;pybk8500.commands.py&quot; can be used  * &quot;CC,3 A,100 ms&quot; - Set Constant Current of value (3 A).   * If &quot;Run Time (s)&quot; is given run this mode for the given amount of time.  * &quot;CV,12 V,1&quot; - Set Constant Voltage of value (12 V).   * If &quot;Run Time (s)&quot; is given run this mode for the given amount of time.  * &quot;CW,1,08:00&quot; - Set Constant Power of value (1 W).   * If &quot;Run Time (s)&quot; is given run this mode for the given amount of time.  * &quot;CR,1,1&quot; - Set Constant Resistance of value (1 Ohm).   * If &quot;Run Time (s)&quot; is given run this mode for the given amount of time.Example-------.. code-block:: text    # profile.txt    Command,Value,Run Time (s)    Print,===== Setup Coms =====    SampleTime,0.1,    BaudRate,38400,    Com,COM1,    SetupRemote,,    # &quot;SetupRemote,,&quot; does the following    # RemoteOn,,    # LoadOff,,    Print,========== Setup Max Values ==========,    SetMaxCurrent,4.600 A,0    SetMaxVoltage,25.000,0    SetMaxPower,30.000,0    Print,========== CC ==========,    Output,CC_test1.csv,    CC,1mA,0.100    # Continue saving output for next run    CC,3 W,100 ms    Output,CC_test2.csv,    CC,1.600,19.8    # Stop output. Print results    Output,,    SampleRate,1.000,0    CW,20.000,60.000    Print,===== Finished =====,    TeardownRemote,,    # &quot;TeardownRemote,,&quot; does the following    # LoadOff,,    # RemoteOff,,Run with the command line.. code-block:: bash    python -m pybk8500.run_profile &quot;./profile.txt&quot;Run with python script.. code-block:: python    from pybk8500.run_profile import main    # python -m pybk8500.run_profile &quot;./profile.txt&quot;    main('./profile.txt')Plot the results.. code-block:: python    from pybk8500 import parse_csv, plot_csv_file, plot_csv_files    # python -m pybk8500.plot_csv &quot;./profile_results.csv&quot;    plot_csv_files('./profile_results.csv', './profile_results2.csv')Combine csv files... code-block:: python    from pybk8500 import combine_csv_files    # python -m pybk8500.combine_csv &quot;./profile_results.csv&quot; &quot;./profile_results2.csv&quot;    combine_csv_files('./profile_results.csv', './profile_results2.csv')</longdescription>
</pkgmetadata>