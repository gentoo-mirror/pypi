<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Timeout decorator=================|Build Status| |Pypi Status| |Coveralls Status|Installation------------From source code:::    python setup.py installFrom pypi:::    pip install timeout-decoratorUsage-----::    import time    import timeout_decorator    @timeout_decorator.timeout(5)    def mytest():        print(&quot;Start&quot;)        for i in range(1,10):            time.sleep(1)            print(&quot;{} seconds have passed&quot;.format(i))    if __name__ == '__main__':        mytest()Specify an alternate exception to raise on timeout:::    import time    import timeout_decorator    @timeout_decorator.timeout(5, timeout_exception=StopIteration)    def mytest():        print(&quot;Start&quot;)        for i in range(1,10):            time.sleep(1)            print(&quot;{} seconds have passed&quot;.format(i))    if __name__ == '__main__':        mytest()Multithreading--------------By default, timeout-decorator uses signals to limit the execution timeof the given function. This appoach does not work if your function isexecuted not in a main thread (for example if it's a worker thread ofthe web application). There is alternative timeout strategy for thiscase - by using multiprocessing. To use it, just pass``use_signals=False`` to the timeout decorator function:::    import time    import timeout_decorator    @timeout_decorator.timeout(5, use_signals=False)    def mytest():        print &quot;Start&quot;        for i in range(1,10):            time.sleep(1)            print(&quot;{} seconds have passed&quot;.format(i))    if __name__ == '__main__':        mytest().. warning::    Make sure that in case of multiprocessing strategy for timeout, your function does not return objects which cannot    be pickled, otherwise it will fail at marshalling it between master and child processes.Acknowledgement---------------Derived fromhttp://www.saltycrane.com/blog/2010/04/using-python-timeout-decorator-uploading-s3/and https://code.google.com/p/verse-quiz/source/browse/trunk/timeout.pyContribute----------I would love for you to fork and send me pull request for this project.Please contribute.License-------This software is licensed under the `MIT license &lt;http://en.wikipedia.org/wiki/MIT_License&gt;`_See `License file &lt;https://github.com/pnpnpn/timeout-decorator/blob/master/LICENSE.txt&gt;`_.. |Build Status| image:: https://travis-ci.org/pnpnpn/timeout-decorator.svg?branch=master   :target: https://travis-ci.org/pnpnpn/timeout-decorator.. |Pypi Status| image:: https://badge.fury.io/py/timeout-decorator.svg    :target: https://badge.fury.io/py/timeout-decorator.. |Coveralls Status| image:: https://coveralls.io/repos/pnpnpn/timeout-decorator/badge.png?branch=master    :target: https://coveralls.io/r/pnpnpn/timeout-decoratorChangelog=========0.3.1------ Fixed issue with PicklingError causes the timeout to never be reached.0.3.0------ Added optional threading support via python multiprocessing (bubenkoff)- Switched to pytest test runner (bubenkoff)0.2.1------ Initial public release</longdescription>
</pkgmetadata>