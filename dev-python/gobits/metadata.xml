<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CodeFactor](https://www.codefactor.io/repository/github/vwt-digital/gobits/badge)](https://www.codefactor.io/repository/github/vwt-digital/gobits)# DescriptionGobits is a very small module, which acts as a metadata carrier within an event-driven architecture on the Google Cloud Platform (GCP).It automatically adds fields that may be useful downstream to determine the origin of a message.# UsageClass attributes:```pythonclass Gobits:    &quot;&quot;&quot;    A small class that gathers information (bits) for a pub/sub message payload.    Attributes:        _request                Holds information about the cloud function request.        _context                Holds information about the cloud function context.        envelope                The envelope containing a pub/sub message.        message                 The pub/sub message to be processed.        processed               Time of processing (UTC).        gcp_project             The source GCP project.        execution_id            The id of the execution.        execution_type          Type of the service processing the message.        execution_trigger_type  Type of the trigger invoking the processor.        function_name           Name of the processing cloud function.        function_version        Version of the processing cloud function.        event_id                The id of the trigger event.        message_id              The pub/sub message id.        message_publish_time    Time of publishing to pub/sub (UTC).        source_subscription     The originating pub/sub subscription.    &quot;&quot;&quot;```Cloud function with HTTP trigger:```pythonfrom gobits import Gobitsdef handler(request):    metadata = Gobits.from_request(request=request)    message = {      'gobits': [metadata.to_json()],      'data': []    }```Cloud function with other trigger:```pythonfrom gobits import Gobitsdef handler(data, context):    metadata = Gobits.from_context(context=context)    message = {      'gobits': [metadata.to_json()],      'data': []    }```# TestingSometimes you want to test a cloud function locally. Be sure to pass mock objects containing the correct fields (if applicable).```pythonfrom main import handlerfrom unittest.mock import Mockmock_data = Mock()mock_context = Mock()mock_context.event_id = &quot;12345678&quot;handler(mock_data, mock_context)```</longdescription>
</pkgmetadata>