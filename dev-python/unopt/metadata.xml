<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># unopt: Utility functions to unwrap `Optional[T]`## Overview*unopt* provides several utility functions to &quot;unwrap&quot; the `Optional[T]` (or `T | None`)objects: removes the `Optional` type hint and obtains the underlying object.*unopt* functions are inspired by the Rust's `Option&lt;T&gt;` functionality, but the behavioris tuned to Python's convention. E.g., `unwrap()` raises an exception instead ofaborting.## Install```shellpip install unopt```## Examples```pythonfrom unopt import *foo: Optional[int] = 123bar: Optional[int] = None# unwrap() returns the given object if it is not None.assert unwrap(foo) == 123unwrap(bar)  # Raises UnwrapError# unwrap_or() returns the default value if the given object is None.assert unwrap_or(foo, 456) == 123assert unwrap_or(bar, 456) == 456# unwrap_or_else() returns the default value obtained by invoking the given function.assert unwrap_or_else(foo, lambda: 456) == 123assert unwrap_or_else(bar, lambda: 456) == 456# unwrap_unchecked() just casts the given object without value checking.assert unwrap_unchecked(foo) == 123assert unwrap_unchecked(bar) is None  # Unsafe```</longdescription>
</pkgmetadata>