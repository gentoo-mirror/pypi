<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Amazon DenseClus&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/awslabs/amazon-denseclus/actions/workflows/tests.yml&quot;&gt;&lt;img alt=&quot;build&quot; src=&quot;https://github.com/awslabs/amazon-denseclus/actions/workflows/tests.yml/badge.svg&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img alt=&quot;total download&quot; src=&quot;https://static.pepy.tech/personalized-badge/amazon-denseclus?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=green&amp;left_text=Total Downloads&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img alt=&quot;month download&quot; src=&quot;https://static.pepy.tech/personalized-badge/amazon-denseclus?period=month&amp;units=international_system&amp;left_color=black&amp;right_color=green&amp;left_text=Monthly Downloads&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img alt=&quot;weekly download&quot; src=&quot;https://static.pepy.tech/personalized-badge/amazon-denseclus?period=week&amp;units=international_system&amp;left_color=black&amp;right_color=green&amp;left_text=Weekly Downloads&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://badge.fury.io/py/Amazon-DenseClus&quot;&gt;&lt;img alt=&quot;PyPI version&quot; src=&quot;https://badge.fury.io/py/Amazon-DenseClus.svg&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/Amazon-DenseClus&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img alt=&quot;PyPI - Wheel&quot; src=&quot;https://img.shields.io/pypi/wheel/Amazon-DenseClus&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/Amazon-DenseClus&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/marketplace/actions/super-linter&quot;&gt;&lt;img alt=&quot;Github Super-Linter&quot; src=&quot;https://github.com/awslabs/amazon-denseclus/workflows/Lint%20Code%20Base/badge.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;DenseClus is a Python module for clustering mixed type data using [UMAP](https://github.com/lmcinnes/umap) and [HDBSCAN](https://github.com/scikit-learn-contrib/hdbscan). Allowing for both categorical and numerical data, DenseClus makes it possible to incorporate all features in clustering.## Installation```bashpython3 -m pip install amazon-denseclus```## Quick StartDenseClus requires a Panda's dataframe as input with both numerical and categorical columns.All preprocessing and extraction are done under the hood, just call fit and then retrieve the clusters!```pythonfrom denseclus import DenseClusfrom denseclus.utils import make_dataframedf = make_dataframe()clf = DenseClus()clf.fit(df)print(clf.score())```## UsageFor a slower but more **stable** results select `intersection_union_mapper` to combine embedding layers via a third UMAP, which will provide equal weight to both numerics and categoriel columns. By default, you are setting the random seed which eliminates the ability for UMAP to run in parallel but will help circumevent some of [the randomness](https://umap-learn.readthedocs.io/en/latest/reproducibility.html) of the algorithm.```pythonclf = DenseClus(    umap_combine_method=&quot;intersection_union_mapper&quot;,)```### Advanced UsageFor advanced users, it's possible to select more fine-grained control of the underlying algorithms by passingdictionaries into `DenseClus` class.For example:```pythonfrom denseclus import DenseClusfrom denseclus.utils import make_dataframeumap_params = {    &quot;categorical&quot;: {&quot;n_neighbors&quot;: 15, &quot;min_dist&quot;: 0.1},    &quot;numerical&quot;: {&quot;n_neighbors&quot;: 20, &quot;min_dist&quot;: 0.1},}hdbscan_params = {&quot;min_cluster_size&quot;: 10}df = make_dataframe()clf = DenseClus(umap_combine_method=&quot;union&quot;             , umap_params=umap_params             , hdbscan_params=hdbscan_params             , random_state=None) # this will run in parallelclf.fit(df)```## Examples### NotebooksA hands-on example with an overview of how to use is currently available in the form of a [Example Jupyter Notebook](/notebooks/01_DenseClusExampleNB.ipynb).Should you need to tune HDBSCAN, here is an optional approach: [Tuning with HDBSCAN Notebook](/notebooks/02_TuningwithHDBSCAN.ipynb)Should you need to validate UMAP emeddings, there is an approach to do so in the [Validation for UMAP Notebook](/notebooks/03_ValidationForUMAP.ipynb)### Blogs[AWS Blog: Introducing DenseClus, an open source clustering package for mixed-type data](https://aws.amazon.com/blogs/opensource/introducing-denseclus-an-open-source-clustering-package-for-mixed-type-data/)[TDS Blog: How To Tune HDBSCAN](https://towardsdatascience.com/tuning-with-hdbscan-149865ac2970)[TDS Blog: On the Validation of UMAP](https://towardsdatascience.com/on-the-validating-umap-embeddings-2c8907588175)## References```bibtex@article{mcinnes2018umap-software,  title={UMAP: Uniform Manifold Approximation and Projection},  author={McInnes, Leland and Healy, John and Saul, Nathaniel and Grossberger, Lukas},  journal={The Journal of Open Source Software},  volume={3},  number={29},  pages={861},  year={2018}}``````bibtex@article{mcinnes2017hdbscan,  title={hdbscan: Hierarchical density based clustering},  author={McInnes, Leland and Healy, John and Astels, Steve},  journal={The Journal of Open Source Software},  volume={2},  number={11},  pages={205},  year={2017}}```</longdescription>
</pkgmetadata>