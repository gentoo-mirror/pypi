<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiovantageaiovantage is a Python library for interacting with and controlling Vantage InFusion home automation controllers.Uses a *controller* pattern inspired heavily by the [aiohue](https://github.com/home-assistant-libs/aiohue) library.This open-source, non-commercial library is not affiliated, associated, authorized, endorsed by, or in any way officially connected with Vantage, and is provided for interoperability purposes only.## Table of contents&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;- [Example](#example)- [Features](#features)- [Supported objects types](#supported-objects-types)- [Installation](#installation)- [Usage](#usage)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## Example```pythonfrom aiovantage import Vantageasync with Vantage(&quot;192.168.1.2&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    async for load in vantage.loads:        print(f&quot;{load.name} is at {load.level}%&quot;)```See the [examples](examples) folder for more examples.## Features- Uses Python asyncio for non-blocking I/O.- Exposes &quot;controllers&quot; to make fetching and controlling various objects easy.- Uses SSL connections by default, with automatic reconnection.- Fetch objects lazily (with `async for obj in controller`).- Alternatively, eager-fetch objects with `controller.initialize`.## Supported objects typesThe following interfaces/controllers are currently supported.| Type          | Description           | Controller                    | Examples                                  || ------------- | --------------------- | ----------------------------- | ----------------------------------------- || AnemoSensor   | Wind speed sensors    | `vantage.anemo_sensors`       | [Examples](examples/anemo_sensors)        || Area          | Rooms, etc            | `vantage.areas`               | [Examples](examples/areas)                || Blind         | Shades, blinds        | `vantage.blinds`              | [Examples](examples/blinds)               || BlindGroups   | Groups of blinds      | `vantage.blind_groups`        | [Examples](examples/blind_groups)         || Buttons       | Keypad buttons        | `vantage.buttons`             | [Examples](examples/buttons)              || DryContacts   | Motion sensors, etc   | `vantage.dry_contacts`        | [Examples](examples/dry_contacts)         || GMem          | Vantage variables     | `vantage.gmem`                | [Examples](examples/gmem)                 || LightSensor   | Light sensors         | `vantage.light_sensors`       | [Examples](examples/light_sensors)        || Load          | Lights, relays, etc   | `vantage.loads`               | [Examples](examples/loads)                || LoadGroup     | Groups of loads       | `vantage.load_groups`         | [Examples](examples/load_groups)          || Master        | Vantage controllers   | `vantage.masters`             | [Examples](examples/masters)              || Module        | Dimmer modules        | `vantage.modules`             |                                           || OmniSensor    | Power, current, etc   | `vantage.omni_sensors`        | [Examples](examples/omni_sensors)         || PowerProfile  | Load power profiles   | `vantage.power_profiles`      | [Examples](examples/power_profiles)       || RGBLoad       | RGB lights            | `vantage.rgb_loads`           | [Examples](examples/rgb_loads)            || Stations      | Keypads, etc          | `vantage.stations`            | [Examples](examples/stations)             || Tasks         | Vantage tasks         | `vantage.tasks`               | [Examples](examples/tasks)                || Temperature   | Temperature sensors   | `vantage.temperature_sensors` | [Examples](examples/temperature_sensors)  || Thermostat    | Thermostats           | `vantage.thermostats`         | [Examples](examples/thermostats)          |If you have an object that you expect to show up in one of these controllers but is missing, please [create an issue](issues) or [submit a pull request](CONTRIBUTING.md#-adding-support-for-new-devices).## InstallationAdd `aiovantage` as a dependency to your project, or install it directly:```shellpip install aiovantage```## Usage### Creating a clientBegin by importing the `Vantage` class:```pythonfrom aiovantage import Vantage```The most convenient way to create a client is by using the async context manager:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    # ...use the vantage client```Alternatively, you can manage the lifecycle of the client yourself:```pythonfrom aiovantage import Vantagevantage = Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;)# ...use the vantage clientvantage.close()```### Querying objectsThe `Vantage` class exposes a number of *controllers*, which can be used to query objects. Controllers can either be populated lazily (by using `async for`), or eagerly (by using `controller.initialize()`).For example, to get a list of all loads:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    async for load in vantage.loads:        print(f&quot;{load.name} is at {load.level}%&quot;)```Alternatively, you can use `controller.initialize()` to eagerly fetch all objects:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    await vantage.loads.initialize()    for load in vantage.loads:        print(f&quot;{load.name} is at {load.level}%&quot;)```If you aren't interested in the state of the objects, you can call `controller.initialize(fetch_state=False)` to slightly speed up the initialization:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    await vantage.loads.initialize(fetch_state=False)    for load in vantage.loads:        print(f&quot;{load.name}&quot;)```All controllers implement a django-like query interface, which can be used to filter objects. You can either query by matching attributes:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    async for load in vantage.loads.filter(name=&quot;Kitchen&quot;):        print(f&quot;{load.name} is at {load.level}%&quot;)```Or by using a filter predicate:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    async for load in vantage.loads.filter(lambda load: load.level &gt; 50):        print(f&quot;{load.name} is at {load.level}%&quot;)```### Fetching a single objectYou can fetch a single object by id, by calling `controller.aget()` or `controller.get()`:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    load = await vantage.loads.aget(118)    print(f&quot;{load.name} is at {load.level}%&quot;)```These functions also implement the same query interface as `controller.filter()` for querying byattributes or filter predicate:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    load = await vantage.loads.aget(name=&quot;Kitchen&quot;)    print(f&quot;{load.name} is at {load.level}%&quot;)```### Controlling objectsMost controllers expose a various methods for controlling the state of objects. The first parameter to these methods is always the vantage id of the object to control.For example, to turn on a load:```pythonasync with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    await vantage.loads.turn_on(118)```### Subscribing to state changesYou can subscribe to state changes by using the `controller.subscribe()` method:```pythondef on_load_state_change(event, load, data):    print(f&quot;{load.name} is at {load.level}%&quot;)async with Vantage(&quot;hostname&quot;, &quot;username&quot;, &quot;password&quot;) as vantage:    vantage.loads.subscribe(on_load_state_change)    await vantage.loads.initialize()```Note that a subscription will only receive state changes for objects that have populated into the controller.</longdescription>
</pkgmetadata>