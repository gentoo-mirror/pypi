<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Easy Plotly[![Build Status](https://travis-ci.com/mwouts/easyplotly.svg?branch=master)](https://travis-ci.com/mwouts/easyplotly)[![codecov.io](https://codecov.io/github/mwouts/easyplotly/coverage.svg?branch=master)](https://codecov.io/github/mwouts/easyplotly?branch=master)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/mwouts/easyplotly.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/mwouts/easyplotly/context:python)[![Pypi](https://img.shields.io/pypi/v/easyplotly.svg)](https://pypi.python.org/pypi/easyplotly)[![pyversions](https://img.shields.io/pypi/pyversions/easyplotly.svg)](https://pypi.python.org/pypi/easyplotly)[![Jupyter Notebook](https://img.shields.io/badge/Binder-Notebook-blue.svg)](    https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md)[![GitHub.io](https://img.shields.io/badge/GitHub-HTML-blue.svg)](https://mwouts.github.io/easyplotly)&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/mwouts/easyplotly&quot; data-icon=&quot;octicon-star&quot; data-show-count=&quot;true&quot; aria-label=&quot;Star mwouts/easyplotly on GitHub&quot;&gt;Star&lt;/a&gt;This is on-going research on how ploting with [Plotly.py](https://github.com/plotly/plotly.py), especially ploting of hierarchical data, could be made easier.See the outputs of the commands below - tables and plots - in the [HTML export](https://mwouts.github.io/easyplotly/) of this notebook.Or even, open this `README.md` as a notebook and run it interactively on [Binder](https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md)!## InstallationInstall the `easyplotly` python package with```pip install easyplotly```## Sample dataOur sample data is the population and life expectancy, per country and region:```pythonimport world_bank_data as wbimport itables.interactive# Collect countriescountries = wb.get_countries()region_country = countries[['region', 'name']].rename(columns={'name': 'country'})# Population &amp; life expectancyregion_country['population'] = wb.get_series('SP.POP.TOTL', mrv=1, id_or_value='id', simplify_index=True)region_country['life_expectancy'] = wb.get_series('SP.DYN.LE00.IN', mrv=1, id_or_value='id', simplify_index=True)# Observations restricted to the countriespop_and_exp = region_country.loc[countries.region != 'Aggregates'].set_index(['region', 'country']).sort_index()pop_and_exp```## Sunburst Charts```pythonimport plotly.graph_objects as goimport plotly.io as pioimport easyplotly as eppio.renderers.default = 'notebook_connected'layout = go.Layout(title='World Population and Life Expectancy&lt;br&gt;Data from the World Bank', height=800)```Our `Sunburst` function accepts inputs of many types: pandas Series, dictionaries, and list of such objects.If you want, you can redefine `labels`, or add other arguments like `text` - use either a Series with an indexidentical to that of `values`, or a function that to any tuple `(level0, level1, ... leveln)`associates the corresponding label or value.```pythonsunburst = ep.Sunburst(pop_and_exp.population, text=pop_and_exp.life_expectancy)go.Figure(sunburst, layout)```## TreemapsThe `Treemap` function works like the `Sunburst` one:```pythontreemap = ep.Treemap(pop_and_exp.population, text=pop_and_exp.life_expectancy)go.Figure(treemap, layout)```Just like the `Sunburst` function, it also accepts all the arguments supported by the original`go.Sunburst` object. You're even welcome to use the[magic underscore notation](https://plot.ly/python/creating-and-updating-figures/#magic-underscore-notation),as we do below when we set `marker.colors` with `marker_colors`:```pythonimport numpy as npdef average(values, weights):    &quot;&quot;&quot;Same as np.average, but remove nans&quot;&quot;&quot;    total_obs = 0.    total_weight = 0.    if isinstance(values, np.float):        values = [values]        weights = [weights]    for x, w in zip(values, weights):        xw = x * w        if np.isnan(xw):            continue        total_obs += xw        total_weight += w    return total_obs / total_weight if total_weight != 0 else np.NaNdef life_expectancy(item):    &quot;&quot;&quot;Life expectancy associated to a tuple like (), ('Europe &amp; Central Asia') or ('East Asia &amp; Pacific', 'China')&quot;&quot;&quot;    sub = pop_and_exp.loc[item] if item else pop_and_exp    return average(sub.life_expectancy, weights=sub.population)def text(item):    &quot;&quot;&quot;Return the text associated to a tuple like (), ('Europe &amp; Central Asia') or ('East Asia &amp; Pacific', 'China')&quot;&quot;&quot;    life_exp = life_expectancy(item)    if life_exp &gt; 0:        pop = pop_and_exp.population.loc[item].sum() if item else pop_and_exp.population.sum()          return 'Population: {:,}&lt;br&gt;Life expectancy: {:.2f}'.format(int(pop), life_exp)treemap = ep.Treemap(pop_and_exp.population,                     hoverinfo='label+text',                     text=text,                     root_label='World',                     # magic underscore notation                     marker_colors=life_expectancy,                     marker_colorscale='RdBu')go.Figure(treemap, layout)```## Sankey PlotPlot links from a dict, or a series with a source/target multiindex:```pythonlinks = {('A', 'B'): 3, ('B', 'C'): 1, ('B', 'D'): 2, ('C', 'A'): 1, ('D', 'A'): 1, ('A', 'D'): 1}go.Figure(ep.Sankey(links))```Plot links from a DataFrame (sources as the index, targets as the columns):```pythonimport pandas as pd``````pythonlinks = pd.DataFrame(1, index=['Source A', 'Source B'], columns=['Target'])go.Figure(ep.Sankey(links))```We conclude the examples with a plot in which the links are a list of pandas Series:```pythonregion_income = wb.get_countries().query(&quot;region != 'Aggregates'&quot;).copy()region_income['population'] = wb.get_series('SP.POP.TOTL', mrv=1, id_or_value='id', simplify_index=True)income_lending = region_income.copy()region_income.set_index(['region', 'incomeLevel'], inplace=True)income_lending.set_index(['incomeLevel', 'lendingType'], inplace=True)layout = go.Layout(title='Regions income and lending type&lt;br&gt;Data from the World Bank')sankey = ep.Sankey(    link_value=[region_income['population'], income_lending['population']],    link_label=[region_income['name'], income_lending['name']])go.Figure(sankey, layout)```</longdescription>
</pkgmetadata>