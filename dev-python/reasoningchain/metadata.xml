<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ReasoningChain## 给接口增加本地缓存```python3from reasoningchain.cache.disk_cache import disk_cache@disk_cache(cache_path=os.path.join(os.environ[&quot;HOME&quot;], &quot;some_path/some_name&quot;), expire_time=864000)def foobar(key:str):    &quot;&quot;&quot;do something&quot;&quot;&quot;    pass```## 获取文本向量```python3from reasoningchain.api.closeai import batch_get_embeddingsembeddings = batch_get_embeddings([&quot;hello&quot;, &quot;world&quot;], batch_size=16)```## 构建文本向量索引```python3from reasoningchain.index.doc_index import DocIndexdoc_index = DocIndex()doc_index.build(doc_full_text)    # 构建索引doc_index.save(index_file_path)   # 保存索引到文件doc_index.load(index_file_path)   # 从文件加载索引results = doc_index.search(query) # 查询索引```## 自定义langchain Tools```pythonfrom reasoningchain.custom_tools import custom_toolfrom reasoningchain.custom_tools import get_all_tool_namesfrom reasoningchain.custom_tools import get_all_custom_tool_namesfrom reasoningchain.custom_tools import load_tools# 增加自定义tool@custom_tool(    name = &quot;{{Tool Name}}&quot;,    description = &quot;{{Tool Descriptions}}&quot;)def tool_func(input_text:str, callback:callable=None) -&gt; str:    &quot;&quot;&quot;do something&quot;&quot;&quot;    pass# 获取所有自定义的tool namesall_custom_tool_names = get_all_custom_tool_names()# 获取所有tool names（包括自定义的tool 和 langchain中预定义的tool）all_tool_names = get_all_tool_names()# 加载toolstools = load_tools([&quot;BaiduSearchText&quot;, &quot;GoogleSearchImage&quot;, &quot;wikipedia&quot;])```# 运行chain* 代码中调用：```pythonimport reasoningchainfinal_answer = reasoningchain.run(&quot;介绍一下小度&quot;, tool_names=[&quot;BaiduSearchText&quot;])print(f&quot;Final Answer:{final_answer}&quot;)```* 命令行：```sh# 单queryreasoningchain --tools &quot;BaiduSearchText&quot; --query &quot;马斯克是谁?&quot;# 批量处理cat queries.txt | reasoningchain --tools &quot;BaiduSearchText&quot;```* 启动WebUI服务：```shreasoningchainui --port 8502```## 参数配置```python3# 通过环境变量设置参数# 使用BaiduSearchText时需设置os.environ['BAIDU_SEARCH_API'] = 'https://m.baidu.com/...'# 使用openai相关接口时需设置os.environ['OPENAI_API_KEY'] = '123'# 需要对openai做代理时可设置os.environ['OPENAI_API_BASE'] = '代理地址'# 使用serpapi时需设置，包括google的搜索APIos.environ['SERPAPI_API_KEY'] = 'SERP API-KEY'# 使用WOLFRAM ALPHA Tool时需设置os.environ['WOLFRAM_ALPHA_APPID'] = 'walfram-alpha appid'# 使用DuLLM时需设置os.environ['DU_LLM_API'] = 'http://...' # 内部自定义LLM的API```</longdescription>
</pkgmetadata>