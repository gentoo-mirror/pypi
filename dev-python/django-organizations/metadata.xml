<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====================django-organizations====================.. start-table.. list-table::    :stub-columns: 1    * - Summary      - Groups and multi-user account management    * - Author      - Ben Lopatin (http://benlopatin.com)    * - Status      - |docs| |version| |wheel| |supported-versions| |supported-implementations|.. |docs| image:: https://readthedocs.org/projects/django-organizations/badge/?style=flat    :target: https://readthedocs.org/projects/django-organizations    :alt: Documentation Status.. |version| image:: https://img.shields.io/pypi/v/django-organizations.svg?style=flat    :alt: PyPI Package latest release    :target: https://pypi.python.org/pypi/django-organizations.. |wheel| image:: https://img.shields.io/pypi/wheel/django-organizations.svg?style=flat    :alt: PyPI Wheel    :target: https://pypi.python.org/pypi/django-organizations.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/django-organizations.svg?style=flat    :alt: Supported versions    :target: https://pypi.python.org/pypi/django-organizations.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/django-organizations.svg?style=flat    :alt: Supported implementations    :target: https://pypi.python.org/pypi/django-organizations.. end-tableSeparate individual user identity from accounts and subscriptions. DjangoOrganizations adds user-managed, multi-user groups to your Django project. UseDjango Organizations whether your site needs organizations that function likesocial groups or multi-user account objects to provide account and subscriptionfunctionality beyond the individual user.* Works with your existing user model, whether  `django.contrib.auth` or a custom model. No additional user  or authentication functionality required.* Users can be belong to and own more than one organization (account, group)* Invitation and registration functionality works out of the box for many  situations and can be extended as need to fit specific requirements.* Start with the base models or use your own for greater customization.Documentation is on `Read the Docs&lt;http://django-organizations.readthedocs.org/en/latest/index.html&gt;`_Development &amp; Contributing==========================**The master branch represents version 2 development. For updates related to 1.xversions of django-organizations pull requests should be made against the[`version-1.x` branch](tree/version-1.x).**Development is on-going. To-do items have been moved to the wiki for the timebeing.The basic functionality should not need much extending. Current dev prioritiesfor me and contributors should include:* Improving the tests and test coverage (ideally moving them back out of the  main module and executable using the setup.py file)* Improving the backends and backends concept so that additional invitation and  registration backends can be used* Documentation* Ensuring all application text is translatablePlease use the project's issues tracker to report bugs, doc updates, or otherrequests/suggestions.Targets &amp; testing-----------------The codebase is targeted and tested against:* Django 3.2.x against Python 3.8, 3.9, 3.10* Django 4.1.x against Python 3.8, 3.9, 3.10, 3.11* Django 4.2.x against Python 3.8, 3.9, 3.10, 3.11To run the tests against all target environments, install `tox&lt;https://testrun.org/tox/latest/&gt;`_ and then execute the command::    toxFast testing------------Testing each change on all the environments takes some time, you maywant to test faster and avoid slowing down development by using pytestagainst your current environment::    pip install -r requirements-test.txt    py.testSupply the ``-x`` option for **failfast** mode::    py.test -xSubmitting----------These submission guidelines will make it more likely your submissions will bereviewed and make it into the project:* Ensure they match the project goals and are sufficiently generalized* Please try to follow `Django coding style  &lt;https://docs.djangoproject.com/en/stable/internals/contributing/writing-code/coding-style/&gt;`_.  The code base style isn't all up to par, but I'd like it to move in that  direction* Also please try to include `good commit log messages  &lt;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&gt;`_.* Pull requests should include an amount of code and commits that are  reasonable to review, are **logically grouped**, and based off clean feature  branches.Code contributions are expected to pass in all target environments, andpull requests should be made from branches with passing builds on `GitHub Actions &lt;https://github.com/bennylope/django-organizations/actions/workflows/test.yml&gt;`_.Project goals-------------django-organizations should be backend agnostic:1. Authentication agnostic2. Registration agnostic3. Invitation agnostic4. User messaging agnosticEtc.Installing==========First add the application to your Python path. The easiest way is to use`pip`::    pip install django-organizationsCheck the `Release History tab &lt;https://pypi.org/project/django-organizations/#history&gt;`_ onthe PyPI package page for pre-release versions. These can be downloaded by specifying the version.You can also install by downloading the source and running::    $ python setup.py installBy default you will need to install `django-extensions` or comparable librariesif you plan on adding Django Organizations as an installed app to your Djangoproject. See below on configuring.Configuring-----------Make sure you have `django.contrib.auth` installed, and add the `organizations`application to your `INSTALLED_APPS` list:.. code-block:: python    INSTALLED_APPS = (        ...        'django.contrib.auth',        'organizations',    )Then ensure that your project URL conf is updated. You should hook in themain application URL conf as well as your chosen invitation backend URLs:.. code-block:: python    from organizations.backends import invitation_backend    urlpatterns = [        ...        url(r'^accounts/', include('organizations.urls')),        url(r'^invitations/', include(invitation_backend().get_urls())),    ]Auto slug field~~~~~~~~~~~~~~~The standard way of using Django Organizations is to use it as an installed appin your Django project. Django Organizations will need to use an auto slugfield which are not included. By default it will try to import these fromdjango-extensions, but you can configure your own in settings. The default:.. code-block:: python    ORGS_SLUGFIELD = 'django_extensions.db.fields.AutoSlugField'Alternative:.. code-block:: python    ORGS_SLUGFIELD = 'autoslug.fields.AutoSlugField'Previous versions allowed you to specify an `ORGS_TIMESTAMPED_MODEL` path. Thisis now ignored and the functionality satisfied by a vendored solution. Awarning will be given but this *should not* have any effect on your code.- `django-extensions &lt;http://django-extensions.readthedocs.org/en/latest/&gt;`_- `Django AutoSlug &lt;https://github.com/justinmayer/django-autoslug/&gt;`_- `django-slugger &lt;https://gitlab.com/dspechnikov/django-slugger/&gt;`_Registration &amp; invitation backends~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can specify a different invitation backend in your project settings, andthe `invitation_backend` function will provide the URLs defined by thatbackend:.. code-block:: python    INVITATION_BACKEND = 'myapp.backends.MyInvitationBackend'Usage Overview==============For most use cases it should be sufficient to include the app views directlyusing the default URL conf file. You can customize their functionality oraccess controls by extending the base views.There are three models:* **Organization** The group object. This is what you would associate your own  app's functionality with, e.g. subscriptions, repositories, projects, etc.* **OrganizationUser** A custom `through` model for the ManyToMany relationship  between the `Organization` model and the `User` model. It stores additional  information about the user specific to the organization and provides a  convenient link for organization ownership.* **OrganizationOwner** The user with rights over the life and death of the  organization. This is a one to one relationship with the `OrganizationUser`  model. This allows `User` objects to own multiple organizations and makes it  easy to enforce ownership from within the organization's membership.The underlying organizations API is simple:.. code-block:: python    &gt;&gt;&gt; from organizations.utils import create_organization    &gt;&gt;&gt; chris = User.objects.get(username=&quot;chris&quot;)    &gt;&gt;&gt; soundgarden = create_organization(chris, &quot;Soundgarden&quot;, org_user_defaults={'is_admin': True})    &gt;&gt;&gt; soundgarden.is_member(chris)    True    &gt;&gt;&gt; soundgarden.is_admin(chris)    True    &gt;&gt;&gt; soundgarden.owner.organization_user    &lt;OrganizationUser: Chris Cornell&gt;    &gt;&gt;&gt; soundgarden.owner.organization_user.user    &gt;&gt;&gt; &lt;User: chris&gt;    &gt;&gt;&gt; audioslave = create_organization(chris, &quot;Audioslave&quot;)    &gt;&gt;&gt; tom = User.objects.get(username=&quot;tom&quot;)    &gt;&gt;&gt; audioslave.add_user(tom, is_admin=True)    &lt;OrganizationUser: Tom Morello&gt;Custom models-------------Django-organizations can act as a base library (not installed in your project)and used to create unique organization model sets using custom tables. See the`Cooking with Django Organizations&lt;http://django-organizations.readthedocs.org/en/latest/cookbook.html#advanced-customization&gt;`_section in the documentation for advice on proceeding.License=======Anyone is free to use or modify this software under the terms of the BSDlicense.Sponsors========`Muster &lt;https://www.muster.com/home?utm_source=github&amp;campaign=opensource&gt;`_ is building precision advocacy software to impact policy through grassroots action... image:: https://www.muster.com/hs-fs/hubfs/muster_logo-2.png?width=600&amp;name=muster_logo-2.png  :target: https://www.muster.com/home?utm_source=github&amp;campaign=opensource  :width: 400  :alt: Alternative text</longdescription>
</pkgmetadata>