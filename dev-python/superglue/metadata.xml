<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Superglue## A CLI tool for developing, testing and deploying AWS glue jobs### VERSION 0.20.0Superglue makes the development, troubleshooting and deployment of AWS glue jobs simple. It also makes creating a shared glue codebase easy and testable# Getting Started```pip install superglue```### Create a Superglue ProjectSuperglue is intended to be used for a &quot;project&quot; or &quot;collection&quot; of AWS glue jobs. To create a superglue project run```superglue init```### Project Structure```jobs        -- all of your glue jobs live heremodules     -- shared glue code lives herenotebooks   -- jupyter notebooks live heretests       -- where your tests for jobs and modules gotools       -- holds the superglue makefile can be used for other scripts and snippetsmakefile    -- used as a master makefile. Includes tools/makefile.env        -- the environment vars needed to make superglue tick.gitignore  -- a templated .gitignore to get you started```### The Superglue Job A superglue job is a directory which contains your job's `config.yml` file, as well as a `main.py` entrypoint, `jarfile` dependencies,other python scripts, and deployment info about the job.```superglue new job --name &lt;your job name&gt;```#### Job Directory Structure```jobs    my_job        jars           -- put your job java dependencies here (optional)        py             -- put your python dependencies here   (optional)        config.yml      -- holds the aws glue job execution configuration        overrides.yml  -- used to create multiple instances of your job (optional)        deployment.yml -- holds the job deployment configuration         main.py        -- the main entry point for the glue job        .version       -- file used to track diff between local and s3```#### Developing Your JobYour job can now be developed using your desired IDE. At anytime you can check the packaging statusof your job by running `superglue status`### Locking Your JobBefore a job can be deployed, it must be locked by superglue. Once the job is locked, it will be assigned a version numberwhich will auto-increment each time the job is locked. This number is more or less arbitrary, however it is used to keep previousversions of your job available in AWS S3.```superglue lock```#### Config.ymlThe `config.yml` file is where the base parameters for your glue job configuration will live. Any parameter that can be passed to the boto3 glue client can be included in this config file. Environment variable expansion is also supported. So you can do things like```yamlScriptLocation: s3://some-bucket-${SOME_ENV_VAR}-path```Where the value for `${SOME_ENV_VAR}` will be taken from your machine's environment. #### Overrides.ymlThis file is intended to make instances of your glue job with overridden properties possible and is used in the following way.Values in `config.yml` will be overridden by whatever you put in here, with the `config.yml` used as the base. In this sense you can thinkof this as an inheritance relationship where `overrides.yml` contains the children of `config.yml````yamloverrides:  - Name: heavy_workers    NumberOfWorkers: 20  - Name: light_workers    NumberOfWorkers: 2```In the above example, 2 jobs will be created using the base parameters found in `config.yml` and the overridden values of `Name: ` and `NumberOfWorkers: ` will be used to create the `deployment.yml` file. ### Deploying a Superglue JobOnce you are satisfied with your glue job, you can then deploy it on AWS. Just run```superglue deploy```This will upload your code to S3 to the configured locations, as well as create the glue job definition in AWS Glue. ## Superglue Modules (Shared Glue Codebase)AWS glue allows importing python modules that have been uploaded to s3, zipped in the appropriate structure, and have been added to the `--extra-py-files` argument. Manually managing these dependencies is difficult and error-prone. `superglue` allows you to create, package, and include shared code in your glue jobs in the following way. ### Create a new moduleAll code which is shareable across superglue jobs lives in the `/modules` directory. ```superglue new module --name &lt;your module name&gt;```### Module Directory Structure```modules    my_module_code          -- the parent directory for your module                      my_module_name      -- your code lives here. This is the zipfile's root directory            __init__.py     -- required for the zip archive        .version            -- used by superglue to track changes        my_module_name.zip  -- zip archive used by the glue job itself```### Locking a Superglue ModuleSuperglue modules must be locked before they can be packaged and deployed. Once locked, they will be assigned a version number which will be auto incremented. This number is arbitrary, however allows for keeping multiple versions of your modules in S3to allow jobs which may use a previous version to still function.```superglue lock```### Packaging a Superglue ModuleSuperglue modules need to be packaged into a zip archive before they can be used by AWS glue. To do this run```superglue package```### Using a Superglue Module in a Glue JobTo include a module in your superglue job, simply add the module name to the `superglue_modules` section inyour job's `config.yml` file along with the version number you want to use.  ```superglue_module:    module_name:       version_number: &lt;integer value version number&gt;```This code will now be importable in your glue job.```pythonfrom my_module import foo_bar # in this case, my_module is the name of the zipfile archive```## The Superglue MakefileAfter running `superglue init` 2 makefiles were created. One in the root directory `makefile` and one in `tools/makefile`The `makefile` in your projects root directory is intended to be used to add whatever custom automationto your project that you like, and not clutter up the superglue makefile itself. By default, it will includethe superglue makefile at `tools/makefile`From the project's root directory, you can run `make help`### AWS Glue Docker Image (Official AWS)For local development and testing of your superglue jobs and modules, you can pull the official AWS glue dockerimage from docker hub by running```make pull```### IDE AutocompleteTo allow your IDE to make auto complete suggestions, we need to include the AWS glue source code in project venv.To do this just run```make glue```This will clone the `aws-glue-libs` project from github into the `/tools` directory, copy the `awsglue` source code intoyour `venv` and remove the repo once completed. Your IDE autocomplete engine should automatically index thisand make suggestions for you during local development## Superglue TestingAll superglue tests can be found in the `/tests` directory. These tests get mapped into the docker container and runby using the `make test` command. All tests are run in the docker container using `pytest` All import paths are included on the `PYTHONPATH` automatically. All superglue jobs and modules should be directly importable. To tests superglue modules, they must first be packaged. Before running `make test` you must run `superglue package`This will ensure that the actual zip archive is being tested, which is what your glue job will actually be using.</longdescription>
</pkgmetadata>