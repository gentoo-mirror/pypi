<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Implementation of Twitter's v1, v2, and GraphQL APIs## Table of Contents* [Installation](#installation)* [Automation](#automation)* [Scraping](#scraping)  * [Get all user/tweet data](#get-all-usertweet-data)  * [Resume Pagination](#resume-pagination)  * [Search](#search)* [Spaces](#spaces)  * [Live Audio Capture](#live-audio-capture)  * [Live Transcript Capture](#live-transcript-capture)  * [Search and Metadata](#search-and-metadata)* [Automated Solvers](#automated-solvers)* [Example API Responses](#example-api-responses)### Installation```bashpip install twitter-api-client```### Automation```pythonfrom twitter.account import Account## sign-in with credentialsemail, username, password = ..., ..., ...account = Account(email, username, password)## or, resume session using cookies# account = Account(cookies={&quot;ct0&quot;: ..., &quot;auth_token&quot;: ...})## or, resume session using cookies (JSON file)# account = Account(cookies='twitter.cookies')account.tweet('test 123')account.untweet(123456)account.retweet(123456)account.unretweet(123456)account.reply('foo', tweet_id=123456)account.quote('bar', tweet_id=123456)account.schedule_tweet('schedule foo', 1681851240)account.unschedule_tweet(123456)account.tweet('hello world', media=[    {'media': 'test.jpg', 'alt': 'some alt text', 'tagged_users': [123]},    {'media': 'test.jpeg', 'alt': 'some alt text', 'tagged_users': [123]},    {'media': 'test.png', 'alt': 'some alt text', 'tagged_users': [123]},    {'media': 'test.jfif', 'alt': 'some alt text', 'tagged_users': [123]},])account.schedule_tweet('foo bar', '2023-04-18 15:42', media=[    {'media': 'test.gif', 'alt': 'some alt text'},])account.schedule_reply('hello world', '2023-04-19 15:42', tweet_id=123456, media=[    {'media': 'test.gif', 'alt': 'some alt text'},])account.dm('my message', [1234], media='test.jpg')account.create_poll('test poll 123', ['hello', 'world', 'foo', 'bar'], 10080)# tweetsaccount.like(123456)account.unlike(123456)account.bookmark(123456)account.unbookmark(123456)account.pin(123456)account.unpin(123456)# usersaccount.follow(1234)account.unfollow(1234)account.mute(1234)account.unmute(1234)account.enable_notifications(1234)account.disable_notifications(1234)account.block(1234)account.unblock(1234)# user profileaccount.update_profile_image('test.jpg')account.update_profile_banner('test.png')account.update_profile_info(name='Foo Bar', description='test 123', location='Victoria, BC')# topicsaccount.follow_topic(111)account.unfollow_topic(111)# listsaccount.create_list('My List', 'description of my list', private=False)account.update_list(222, 'My Updated List', 'some updated description', private=False)account.update_list_banner(222, 'test.png')account.delete_list_banner(222)account.add_list_member(222, 1234)account.remove_list_member(222, 1234)account.delete_list(222)account.pin_list(222)account.unpin_list(222)# refresh all pinned lists in this orderaccount.update_pinned_lists([222, 111, 333])# unpin all listsaccount.update_pinned_lists([])# get timelinestimeline = account.home_timeline()latest_timeline = account.home_latest_timeline(limit=500)# get bookmarksbookmarks = account.bookmarks()# get all dmsdms = account.dm_history(['12345-67890'])# search dmsdms = account.dm_search('test')# delete conversationaccount.dm_delete('12345-67890')# example configurationaccount.update_settings({    &quot;address_book_live_sync_enabled&quot;: False,    &quot;allow_ads_personalization&quot;: False,    &quot;allow_authenticated_periscope_requests&quot;: True,    &quot;allow_dm_groups_from&quot;: &quot;following&quot;,    &quot;allow_dms_from&quot;: &quot;following&quot;,    &quot;allow_location_history_personalization&quot;: False,    &quot;allow_logged_out_device_personalization&quot;: False,    &quot;allow_media_tagging&quot;: &quot;none&quot;,    &quot;allow_sharing_data_for_third_party_personalization&quot;: False,    &quot;alt_text_compose_enabled&quot;: None,    &quot;always_use_https&quot;: True,    &quot;autoplay_disabled&quot;: False,    &quot;country_code&quot;: &quot;us&quot;,    &quot;discoverable_by_email&quot;: False,    &quot;discoverable_by_mobile_phone&quot;: False,    &quot;display_sensitive_media&quot;: False,    &quot;dm_quality_filter&quot;: &quot;enabled&quot;,    &quot;dm_receipt_setting&quot;: &quot;all_disabled&quot;,    &quot;geo_enabled&quot;: False,    &quot;include_alt_text_compose&quot;: True,    &quot;include_mention_filter&quot;: True,    &quot;include_nsfw_admin_flag&quot;: True,    &quot;include_nsfw_user_flag&quot;: True,    &quot;include_ranked_timeline&quot;: True,    &quot;language&quot;: &quot;en&quot;,    &quot;mention_filter&quot;: &quot;unfiltered&quot;,    &quot;nsfw_admin&quot;: False,    &quot;nsfw_user&quot;: False,    &quot;personalized_trends&quot;: True,    &quot;protected&quot;: False,    &quot;ranked_timeline_eligible&quot;: None,    &quot;ranked_timeline_setting&quot;: None,    &quot;require_password_login&quot;: False,    &quot;requires_login_verification&quot;: False,    &quot;sleep_time&quot;: {        &quot;enabled&quot;: False,        &quot;end_time&quot;: None,        &quot;start_time&quot;: None    },    &quot;translator_type&quot;: &quot;none&quot;,    &quot;universal_quality_filtering_enabled&quot;: &quot;enabled&quot;,    &quot;use_cookie_personalization&quot;: False,})# example configurationaccount.update_search_settings({    &quot;optInFiltering&quot;: True,  # filter nsfw content    &quot;optInBlocking&quot;: True,  # filter blocked accounts})## change_password('old pwd','new pwd)```### Scraping#### Get all user/tweet data```pythonfrom twitter.scraper import Scraper## sign-in with credentialsemail, username, password = ..., ..., ...scraper = Scraper(email, username, password)## or, resume session using cookies# scraper = Scraper(cookies={&quot;ct0&quot;: ..., &quot;auth_token&quot;: ...})## or, resume session using cookies (JSON file)# scraper = Scraper(cookies='twitter.cookies')## or, initialize guest session (limited endpoints)# from twitter.util import init_session# scraper = Scraper(session=init_session())# user datausers = scraper.users(['foo', 'bar', 'hello', 'world'])users = scraper.users_by_ids([123, 234, 345])  # batch-requesttweets = scraper.tweets([123, 234, 345])likes = scraper.likes([123, 234, 345])tweets_and_replies = scraper.tweets_and_replies([123, 234, 345])media = scraper.media([123, 234, 345])following = scraper.following([123, 234, 345])followers = scraper.followers([123, 234, 345])scraper.tweet_stats([111111, 222222, 333333])# get recommended users based on userscraper.recommended_users()scraper.recommended_users([123])# tweet datatweets_by_ids = scraper.tweets_by_id([987, 876, 754])tweets_details = scraper.tweets_details([987, 876, 754])retweeters = scraper.retweeters([987, 876, 754])favoriters = scraper.favoriters([987, 876, 754])scraper.download_media([    111111,    222222,    333333,    444444,])# trendsscraper.trends()```#### Resume Pagination**Pagination is already done by default**, however there are circumstances where you may need to resume pagination from a specific cursor. For example, the `Followers` endpoint only allows for 50 requests every 15 minutes. In this case, we can resume from where we left off by providing a specific cursor value.```pythonfrom twitter.scraper import Scraperemail, username, password = ...,...,...scraper = Scraper(email, username, password)user_id = 44196397cursor = '1767341853908517597|1663601806447476672'  # example cursorlimit = 100  # arbitrary limit for demonstrationfollower_subset, last_cursor = scraper.followers([user_id], limit=limit, cursor=cursor)# use last_cursor to resume pagination```#### Search```python   from twitter.search import Searchemail, username, password = ..., ..., ...# default output directory is `data/raw` if save=Truesearch = Search(email, username, password)latest_results = search.run(    'brasil portugal -argentina',    'paperswithcode -tensorflow -tf',    'ios android',    limit=100,    latest=True,  # get latest tweets only    retries=3,)general_results = search.run(    '(#dogs OR #cats) min_retweets:500',    'min_faves:10000 @elonmusk until:2023-02-16 since:2023-02-01',    'brasil portugal -argentina',    'paperswithcode -tensorflow -tf',    'skateboarding baseball guitar',    'cheese bread butter',    'ios android',    limit=100,    retries=7,)```**Search Operators Reference**https://developer.twitter.com/en/docs/twitter-api/v1/rules-and-filtering/search-operatorshttps://developer.twitter.com/en/docs/twitter-api/tweets/search/integrate/build-a-query### Spaces#### Live Audio CaptureCapture live audio for up to 500 streams per IP```pythonfrom twitter.scraper import Scraperfrom twitter.util import init_sessionsession = init_session() # initialize guest session, no login requiredscraper = Scraper(session=session)rooms = [...]scraper.spaces_live(rooms=rooms) # capture live audio from list of rooms```#### Live Transcript Capture**Raw transcript chunks**```pythonfrom twitter.scraper import Scraperfrom twitter.util import init_sessionsession = init_session() # initialize guest session, no login requiredscraper = Scraper(session=session)# room must be live, i.e. in &quot;Running&quot; statescraper.space_live_transcript('1zqKVPlQNApJB', frequency=2)  # word-level live transcript. (dirty, on-the-fly transcription before post-processing)```**Processed (final) transcript chunks**```pythonfrom twitter.scraper import Scraperfrom twitter.util import init_sessionsession = init_session() # initialize guest session, no login requiredscraper = Scraper(session=session)# room must be live, i.e. in &quot;Running&quot; statescraper.space_live_transcript('1zqKVPlQNApJB', frequency=1)  # finalized live transcript.  (clean)```#### Search and Metadata```pythonfrom twitter.scraper import Scraperfrom twitter.util import init_sessionfrom twitter.constants import SpaceCategorysession = init_session() # initialize guest session, no login requiredscraper = Scraper(session=session)# download audio and chat-log from spacespaces = scraper.spaces(rooms=['1eaJbrAPnBVJX', '1eaJbrAlZjjJX'], audio=True, chat=True)# pull metadata onlyspaces = scraper.spaces(rooms=['1eaJbrAPnBVJX', '1eaJbrAlZjjJX'])# search for spaces in &quot;Upcoming&quot;, &quot;Top&quot; and &quot;Live&quot; categoriesspaces = scraper.spaces(search=[    {        'filter': SpaceCategory.Upcoming,        'query': 'hello'    },    {        'filter': SpaceCategory.Top,        'query': 'world'    },    {        'filter': SpaceCategory.Live,        'query': 'foo bar'    }])```### Automated Solvers&gt; **Currently removed** due to issues running on Mac. Code has been commented out for now. Cloning the repo, adding the proton mail package, and uncommenting the code referencing `protonmail` can be used as a temporary workaround to re-enable this feature.To set up automated email confirmation/verification solvers, add your Proton Mail credentials below as shown.This removes the need to manually solve email challenges via the web app. These credentials can be used in `Scraper`, `Account`, and `Search` constructors.E.g.```pythonfrom twitter.scraper import Scraperemail, username, password = ..., ..., ...proton_email, proton_password = ..., ...account = Scraper(email, username, password, protonmail={'email':proton_email, 'password':proton_password})```</longdescription>
</pkgmetadata>