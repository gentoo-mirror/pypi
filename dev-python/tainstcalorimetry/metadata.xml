<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Logo](https://github.com/mj-hofmann/TAInstCalorimetry/blob/main/icon/icon.png?raw=true)# Interfacing with experimental results file from TAM Air calorimeters made easy.After collecting multiple experimental results files from a TAM Air calorimeter you will be left with multiple *.xls*-files obtained as exports from the device control software. To achieve a side by side comparison of theses results and some basic extraction of relevant parameters, **TAInstCalorimetry** is here to get this done smoothly.*Note: **TAInstCalorimetry** has been developed without involvement of **TA Instruments** and is thus independent from the company and its software.*## Info / Downloads[![PyPI - Downloads](https://img.shields.io/pypi/dm/tainstcalorimetry.svg?color=blue&amp;label=Downloads&amp;logo=pypi&amp;logoColor=gold)](https://pepy.tech/project/tainstcalorimetry)[![PyPI - Downloads](https://static.pepy.tech/personalized-badge/tainstcalorimetry?period=total&amp;units=none&amp;left_color=black&amp;right_color=grey&amp;left_text=Downloads)](https://pepy.tech/project/tainstcalorimetry)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/tainstcalorimetry.svg?logo=python&amp;label=Python&amp;logoColor=gold)](https://pypi.org/project/tainstcalorimetry/) ## Table of Contents  - [Example Usage](#example-usage)&lt;br&gt;  - [Basic plotting](#basic-plotting)&lt;br&gt;  - [Getting cumulated heat values](#getting-cumulated-heat-values)&lt;br&gt;  - [Identifying peaks](#identifying-peaks)&lt;br&gt;  - [Identifying peak onsets](#identifying-peak-onsets)&lt;br&gt;- [Installation](#installation)&lt;br&gt;- [Contributing](#contributing)## Example UsageImport the ```tacalorimetry``` module from **TAInstCalorimetry**.```python# importimport osfrom TAInstCalorimetry import tacalorimetry```Next, we define where the exported files are stored. With this information at hand, a ```Measurement``` is initialized. Experimental raw data and the metadata passed in the course of the measurement are retrieved by the methods ```get_data()``` and ```get_information()```, respectively.```python# define data path# &quot;mycalodata&quot; is the subfoldername where the calorimetry# data files (both .csv or .xlsx) are storedpathname = os.path.dirname(os.path.realpath(__file__))path_to_data = pathname + os.sep + &quot;mycalodata&quot;# Example: if projectfile is at &quot;C:\Users\myname\myproject\myproject.py&quot;, then &quot;mydata&quot;# refers to &quot;C:\Users\myname\myproject\mycalodata&quot; where the data is stored# load experiments via class, i.e. instantiate tacalorimetry object with datatam = tacalorimetry.Measurement(folder=path_to_data)# get sample and informationdata = tam.get_data()info = tam.get_information()```### Basic plottingFurthermore, the ```Measurement``` features a ```plot()```-method for readily visualizing the collected results.```python# make plottam.plot()# show plottacalorimetry.plt.show()```Without further options specified, the ```plot()```-method yields the following.![enter image description here](https://github.com/mj-hofmann/TAInstCalorimetry/blob/main/tests/plots/Figure%202022-08-08%20112743.png?raw=true)The ```plot()```-method can also be tuned to show the temporal course of normalized heat. On the one hand, this &quot;tuning&quot; refers to the specification of further keyword arguments such as ```t_unit``` and ```y```. On the other hand, the ```plot()```-method returns an object of type ```matplotlib.axes._subplots.AxesSubplot```, which can be used to further customize the plot. In the following, a guide-to-the-eye line is introduced next to adjuting the axes limts, which is not provided for via the ```plot()```-method's signature.```python# show cumulated heat plotax = tam.plot(    t_unit=&quot;h&quot;,    y='normalized_heat',    y_unit_milli=False)# define target timetarget_h = 1.5# guide to the eye lineax.axvline(target_h, color=&quot;gray&quot;, alpha=0.5, linestyle=&quot;:&quot;)# set upper limitsax.set_ylim(top=250)ax.set_xlim(right=6)# show plottacalorimetry.plt.show()```The following plot is obtained:![enter image description here](https://github.com/mj-hofmann/TAInstCalorimetry/blob/main/tests/plots/Figure%202022-08-19%20085928.png?raw=true)### Getting cumulated heat valuesThe cumulated heat after a certain period of time ```target_h``` from starting the measurement is a relevant quantity for answering different types of questions. For this purpose, the method ```get_cumulated_heat_at_hours``` returns an overview of this parameter for all the samples in the specified folder.```python# get table of cumulated heat at certain agecumulated_heats = tam.get_cumulated_heat_at_hours(          target_h=target_h,          cutoff_min=10          )          # show resultprint(cumulated_heats)```The return value of the method, ```cumulated_heats``` is a ```pd.DataFrame```.### Identifying peaksNext to cumulated heat values detected after a certain time frame from starting the reaction, peaks characteristics can be obtained from the experimental data via the ```get_peaks```-method.```python# get peakspeaks = tam.get_peaks(    show_plot=True,    prominence=0.00001,  # &quot;sensitivity of peak picking&quot;    cutoff_min=60,  # how much to discard at the beginning of the measurement    plt_right_s=4e5,    plt_top=1e-2,    regex=&quot;.*_\d&quot;  # filter samples    )```Tweaking some of the available keyword arguments, the following plot is obtained:![Identified peaks for one sample.](https://github.com/mj-hofmann/TAInstCalorimetry/blob/main/tests/plots/Figure%202023-01-25%20193222.png?raw=true)Please keep in mind, that in particular for samples of ordinary Portland cement (OPC) a clear and unambiguous identification/assigment of peaks remains a challenging task which cannot be achieved in each and every case by **TAInstCalorimetry**. It is left to the user draw meaningful scientific conclusions from the characteristics derived from this method.### Identifying peak onsetsSimilarly, the peak onset characteristics are accessible via the ```get_peak_onsets```-method. The resulting plot is shown below.```python# get onsetsonsets = tam.get_peak_onsets(    gradient_threshold=0.000001,    rolling=10,    exclude_discarded_time=True,    show_plot=True,    regex=&quot;OPC&quot;)```![Identified peak onsets for one sample.](https://github.com/mj-hofmann/TAInstCalorimetry/blob/main/tests/plots/Figure%202023-01-26%20174524.png?raw=true)## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install TAInstCalorimetry.```bashpip install TAInstCalorimetry```## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.List of contributors:- [mj-hofmann](https://github.com/mj-hofmann)- [tgaedt](https://github.com/tgaedt)## License[GNU GPLv3](https://choosealicense.com/licenses/gpl-3.0/#)## Test![Tests](https://github.com/mj-hofmann/TAInstCalorimetry/actions/workflows/run-tests.yml/badge.svg)## Code Styling[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)</longdescription>
</pkgmetadata>