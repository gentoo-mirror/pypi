<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-heroku-memcacheifyAutomatic Django memcached configuration on Heroku.![Deploying memcached is easy](https://github.com/rdegges/django-heroku-memcacheify/raw/master/assets/memcacheify.jpg)## InstallTo install ``django-heroku-memcacheify``, simply run``pip install django-heroku-memcacheify`` and you'll get the latest versioninstalled automatically.**NOTE**: If you'd like to install this locally, you'll need to have the``libmemcached-dev`` libraries installed for this to compile properly. OnDebian and Ubuntu you can install this by running ``sudo aptitude -y installlibmemcached-dev``. If you're using a Mac, you can use[homebrew](http://mxcl.github.com/homebrew/) and run ``brew install libmemcached``.## UsageModify your Django ``settings.py`` file, and set:``` pythonfrom memcacheify import memcacheifyCACHES = memcacheify()```Next, ensure pylibmc is present in your ``requirements.txt`` file (or oneincluded from it), so the Heroku Python buildpack will detect the necessaryC dependencies and 'bootstrap' your application.Assuming you have a memcache server available to your application on Heroku, itwill instantly be available. If you have no memcache addon provisioned for yourapp, ``memcacheify`` will default to using local memory caching as a backup :)## Heroku SetupNow that you've got Django configured to use memcache, all you need to do isinstall one memcache addons that Heroku provides!I personally recommend [MemCachier](https://addons.heroku.com/memcachier) --they're stable, cheap, great!Let's say I want to install the ``memcachier`` addon, I could simply run:``` bash$ heroku addons:add memcachier:25$ heroku config...MEMCACHIER_SERVERS    =&gt; memcachier1.example.netMEMCACHIER_USERNAME   =&gt; bobslobMEMCACHIER_PASSWORD   =&gt; l0nGr4ndoMstr1Ngo5strang3CHaR4cteRS...```The example above will provision a *free* 25m memcache server for yourapplication. Assuming everything worked, ``heroku config``'s output should showthat you now have 3 new environment variables set.## Local DevelopmentIf you have a memcached server locally for development that doesn't supportauthentication, you can still use memcache by setting an environment variable`MEMCACHEIFY_USE_LOCAL=True`.This will set the default cache to `django_pylibmc.memcached.PyLibMCCache`If there are no environment variables for memcache or memcacheify, the defaultcache will be local memory `django.core.cache.backends.locmem.LocMemCache`.## Testing Your CacheIf you don't trust me, and want to make sure your caching is working asexpected, you may do the following:``` bash$ heroku run python manage.py shellRunning python manage.py shell attached to terminal... up, run.1Python 2.7.2 (default, Oct 31 2011, 16:22:04)[GCC 4.4.3] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.(InteractiveConsole)&gt;&gt;&gt; from django.core.cache import cache&gt;&gt;&gt; cache.set('memcache', 'ify!')True&gt;&gt;&gt; cache.get('memcache')'ify!'&gt;&gt;&gt;```Assuming everything is working, you should be able to set and retrieve cachekeys.## ReferencesIf you're confused, you should probably read:- [Heroku's Getting Started Guide](http://devcenter.heroku.com/articles/django)- [Heroku's memcachier Addon Documentation](https://devcenter.heroku.com/articles/memcachier)## Tests[![Build Status](https://secure.travis-ci.org/rdegges/django-heroku-memcacheify.png?branch=master)](http://travis-ci.org/rdegges/django-heroku-memcacheify)Want to run the tests? No problem:``` bash$ git clone git://github.com/rdegges/django-heroku-memcacheify.git$ cd django-heroku-memcacheify$ python setup.py develop...$ pip install -r requirements.txt  # Install test dependencies.$ flake8$ nosetests.............----------------------------------------------------------------------Ran 13 tests in 0.166sOK```## Changelogv1.0.1: 10-10-2021    - Fixing PyPI descriptionv1.0.0: 01-04-2016    - Update django-pylibmc dependency to &gt;=0.6.1.    - Officially support Python 3.5.    - Stop testing on Python 2.6.v0.8: 11-12-2014    - Adding support for memcachedcloud!v0.7: 9-22-2014    - Upgrading dependencies (again)!v0.6: 9-20-2014    - Upgrading dependencies.v0.5: 12-31-2013    - Making the timeout option configurable.    - Removing Python 2.5 support.    - Adding an option to use memcached locally without SASL.    - Updating the README, explaining how to use memcached locally.v0.4: 12-5-2012    - Update which allows memcachier users to support multiple servers &gt;:)      Thanks @alexlod!v0.3: 6-27-2012    - Fixing broken memcachier support.v0.2: 5-22-2012    - Adding support for memcachier Heroku addon.    - Updating documentation.    - Refactoring implementation for clarity.    - Adding better tests.v0.1: 5-2-2012    - Initial release!</longdescription>
</pkgmetadata>