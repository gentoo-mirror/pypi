<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TradingKitThis file shows the basic usage for TradingKit, for more docs, please see the [Wiki](https://github.com/Logictraders/tradingkit/wiki)![PyPI](https://img.shields.io/pypi/v/tradingkit)![coverage](https://img.shields.io/badge/coverage-37%25-orange)[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)## Requirements- python 3.7+- pip## Installationthe recommended way to install TradingKit si via **PyPi**.### Install from [PyPi](https://pypi.org/project/tradingkit/)```bashpip3 install tradingkit```### Install from [Source](https://github.com/logictraders/tradingkit)```bashgit clone https://github.com/logictraders/tradingkitcd tradingkit# Optional, uncomment the line below if you want a specific version# git checkout v1.2.5python3 setup.py install```## Creating strategiesIn order to create new strategies you need **4 steps**### Create separate projectCreate new python3.7+ project, no need to do anymore in this step.### Creating strategy classcreate a class extending from `tradingkit.strategy.strategy.Strategy````python# File my_project/my_strategy.pyimport loggingimport ccxt.Exchangefrom tradingkit.pubsub.event.trade import Tradefrom tradingkit.pubsub.event.book import Bookfrom tradingkit.pubsub.event.order import Orderfrom tradingkit.pubsub.core.event import Eventfrom tradingkit.strategy.strategy import Strategyclass MyStrategy(Strategy):    def __init__(self, exchange: Exchange, config):        super().__init__(exchange, config)        # do whatever initializations you need    def on_event(self, event: Event):        if isinstance(event, Trade):            logging.info(&quot;Order event happened!&quot;)            # do whatever you need with the exchange            self.exchange.create_order(...)        if isinstance(event, Book):            logging.info(&quot;Book event happened!&quot;)            # do whatever you need with the exchange            self.exchange.create_order(...)        if isinstance(event, Order):            logging.info(&quot;Order event happened!&quot;)            # do whatever you need with the exchange            self.exchange.create_order(...)```### Create main config filecreate `system/config.json` file```json{    &quot;strategy&quot;: {        &quot;class&quot;: &quot;my_strategy.MyStrategy&quot;,        &quot;arguments&quot;: [&quot;@bridge&quot;, &quot;@config&quot;]    },    &quot;config&quot;: {        &quot;symbol&quot;: &quot;%env(SYMBOL)%&quot;    }}```create `.env` file to add some env vars```bash# File .envSYMBOL=BTC/EUR```### Configure dev environmentcreate `system/config.dev.json` file```json{    &quot;exchange&quot;: &quot;@testex&quot;,    &quot;feeder&quot;: &quot;@backtest_feeder&quot;}```### Configure live environmentcreate `system/config.live.json` file```json{    &quot;exchange&quot;: &quot;@kraken&quot;,    &quot;feeder&quot;: &quot;@kraken_feeder&quot;}```create `.env.live.local` file to add your bitmex credentials credentials```bash# File .env.live.localKRAKEN_KEY=xxxxxxxxxxxxxxxxxxxKRAKEN_SECRET=yyyyyyyyyyyyyyyyyyyy```### Run dev (backtest)```tk run -e dev -y 2020 -m 1 --plot```### Run live```tk run -e live --plot```### Available configurationsInjectable modules:| Module Type|     Key    |Module                        |              Description             | Arguments     ||------------|------------|:-----------------------------|:-------------------------------------|---------------|| Exchange   |exchange    |kraken                        |Kraken exchange API                               |apikey, secret || Exchange   |exchange    |bitmex                        |Bitmex exchange API                               |apikey, secret || Exchange   |exchange    |bitmex_testnet                |Bitmex testnet exchange API                       |apikey, secret || Exchange   |exchange    |testex                        |kraken exchange simulator                         |balances, fees || Exchange   |exchange    |bitmex_backtest               |bitmex exchange simulator                         |balances, fees || Feeder     |feeder      |kraken_backtest_feeder        |feeder used for kraken simulations                |exchange, symbol, since8601, to8601|| Feeder     |feeder      |bitmex_funding_backtest_feeder|feeder used for bitmex simulations                |exchange, symbol, since8601, to8601|| Feeder     |feeder      |bitmex_testnet_feeder         |feeder used for bitmex-testnet live strategies    |apikey, secret || Feeder     |feeder      |bitmex_feeder                 |feeder used for bitmex live strategies            |apikey, secret || Feeder     |feeder      |kraken_feeder                 |feeder used for kraken live strategies            |apikey, secret || Feeder     |feeder      |outlier_trade_filter          |feeder used to reduce back_test outlier trade data|MAX_PRICE_CHANGE_SINGLE_TRADE|| Bridge     |bridge      |bridge                        |exchange interface for simulator and real exchange|exchange       || Plotter    |plotter     |highstock                     |plotter used to show simulation result on chart   ||| Plotter    |plotter     |plotly                        |plotter used to show simulation result on chart   ||</longdescription>
</pkgmetadata>