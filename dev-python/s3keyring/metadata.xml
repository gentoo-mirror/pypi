<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>S3 backend for Python's keyring================================.. image:: https://travis-ci.org/FindHotel/s3keyring.svg?branch=master    :target: https://travis-ci.org/FindHotel/s3keyring.. |PyPI| image:: https://img.shields.io/pypi/v/s3keyring.svg?style=flat   :target: https://pypi.python.org/pypi/s3keyringThis module adds an `AWS S3`_ backend to Python's keyring_ module. The S3backend will store the keyring credentials in an S3 bucket and use client andserver side encryption to keep the credentials safe both during transit and atrest. This backend is quite handy when you want to distribute credentials acrossmultiple machines. Access to the backend and to the encryption keys can befinely tuned using AWS IAM policies... _AWS S3: https://aws.amazon.com/s3/.. _keyring: https://pypi.python.org/pypi/keyring.. _Key Management System: https://aws.amazon.com/kms/Installation------------You can install a stable release from Pypi::    pip install s3keyringOr you can choose to install the development version::    pip install git+https://github.com/InnovativeTravel/s3-keyringIn Mac OS X El Capitan and later you may run into permission issueswhen running `pip install`. A workaround is to install `s3keyring` using::    sudo -H pip install --ignore-installed git+https://github.com/InnovativeTravel/s3-keyringA better solution is to install Python with homebrew so that `pip install` willnot attempt to install packages in any system directory::    brew install pythonFor Admins: setting up the keyring------------------------------------------------If you are just a user of the keyring and someone else has set up the keyringfor you then you can skip this section and go directly to ``For Keyring Users:accessing the keyring`` at the end of this README. Note that you will need administrator privileges in your AWS account to be able to set up a new keyring as described below.S3 bucket~~~~~~~~~The S3 keyring backend requires you to have read/write access to a S3 bucket.If you want to use bucket ``mysecretbucket`` to store your keyring, you willneed to attach the following `IAM policy`_ to all the IAM user accounts orroles that will have read and write access to the keyring::    {        &quot;Version&quot;: &quot;2012-10-17&quot;,        &quot;Statement&quot;: [            {                &quot;Effect&quot;: &quot;Allow&quot;,                &quot;Action&quot;: [                    &quot;s3:ListBucket&quot;                ],                &quot;Resource&quot;: &quot;arn:aws:s3:::mysecretbucket&quot;,                &quot;Condition&quot;: {}            },            {                &quot;Effect&quot;: &quot;Allow&quot;,                &quot;Action&quot;: [                    &quot;s3:DeleteObject&quot;,                    &quot;s3:GetObject&quot;,                    &quot;s3:PutObject&quot;                ],                &quot;Resource&quot;: &quot;arn:aws:s3:::mysecretbucket/*&quot;            }        ]    }.. _IAM policy: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-policies-for-amazon-ec2.htmlIf you want to create a policy that grants read-only access to the keyring thenremove the ``s3:PutObject`` and ``s3:DeleteObject`` actions from the policyabove.Encryption key~~~~~~~~~~~~~~You need to create a `KMS encryption key`_. Write down the ID of theKMS key that you create. You will need to share this KMS Key ID with theusers of the keyring... _KMS encryption key: http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html**IMPORTANT**: You will need to grant read access to the KMS key to every IAMuser or role that needs to access the keyring.For users: accessing the keyring---------------------------------------------One-time configuration~~~~~~~~~~~~~~~~~~~~~~If you haven't done so already, you will need to configure your localinstallation of the `AWS CLI`_ by running::    aws configure.. _AWS CLI: http://docs.aws.amazon.com/cliThen configure the S3 Keyring::    s3keyring configureYour keyring administrator will provide you with the ``KMS Key ID``,``Bucket`` and ``Namespace`` configuration options. Option ``AWS profile``allows you to specify the local `AWS CLI profile`_ you want to use to sign allrequests sent to AWS when accessing the keyring. Most users will want to usethe ``default`` profile... _AWS CLI profile: http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-multiple-profiles**IMPORTANT**: when deploying the `s3keyring` in EC2 instances that are grantedaccess to the keyring by means of an `IAM role` you should not specify acustom AWS profile when configuring s3keyring in the instances... _IAM role: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.htmlYou can configure the ``s3keyring`` module without user input by setting thefollowing environment variables: ``S3KEYRING_BUCKET``, ``S3KEYRING_NAMESPACE``,``S3KEYRING_KMS_KEY_ID``, ``S3KEYRING_AWS_PROFILE``. If these environment variablesare properly set then you can configure the ``s3keyring`` module with::    s3keyring configure --no-askConfiguration profiles~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can use ``s3keyring`` to store (read) secrets in (from) more than onebackend S3 keyring. A typical use case is creating different keyrings for different user groups that have different levels of trust. For instance your keyring administrator may have setup a S3 keyring that only IAM users with adminprivileges can access. Using the bucket, KMS Key ID and namespace provided by your keyring admin you can configure a separate ``s3keyring`` profile to accessthat admins-only keyring::    s3keyring --profile administrators configureYour keyring admin may have also setup a separate S3 keyring to store secrets that need to be accessed by EC2 instances that act as backend workers in aproject you are part of. To access that keyring you would configure asecond ``s3keyring`` profile::    s3keyring --profile website-workers configureThen, to store and retrieve secrets in the administrators keyring::    s3keyring --profile administrators set SERVICE ACCOUNT PASSWORD     s3keyring --profile administrators get SERVICE ACCOUNTAnd you could do the same for the ``website-workers`` keyring using option``--profile website-workers``.Configuration file~~~~~~~~~~~~~~~~~~~~~~~~~~By default ``s3keyring`` reads configuration options from ``~/.s3keyring.ini``.You can also store the configuration in a ``.s3keyring.ini`` file stored in yourcurrent working directory by using::    s3keyring configure --local``s3keyring`` will always read the configuration first from a ``.s3keyring.ini``file under your current work directory. If it is not found then it will read itfrom ``~/.s3keyring.ini``.Usage-----The ``s3keyring`` module provides the same API as Python's `keyring module`_.You can access your S3 keyring programmatically from your Python code likethis::    from s3keyring.s3 import S3Keyring    kr = S3Keyring()    kr.set_password('groupname', 'username', '123456')    assert '123456' == kr.get_password('groupname', 'username')    kr.delete_password('groupname', 'username')    assert kr.get_password('groupname', 'username') is NoneYou can also use the keyring from the command line::    # Store a password    s3keyring set groupname username 123456    # Retrieve it    s3keyring get groupname username    # Delete it    s3keyring delete groupname username.. _keyring module: https://pypi.python.org/pypi/keyringRecommended workflow~~~~~~~~~~~~~~~~~~~~This is how I use ``s3keyring`` in my Python projects.Let's assume that my project root directory looks something like this::   setup.py   my_module/             __init__.pyIn my project root directory I run::    s3keyring configure --localI keep the generated ``.s3keyring.ini`` file as part of my project source code(i.e. under version control). Then in my project code I use the keyring like this::    from s3keyring.s3 import S3Keyring    keyring = S3Keyring(config_file=&quot;/path/to/s3keyring.ini&quot;)    keyring.set_password('service', 'username', '123456')    assert keyring.get_password('service', 'username') == '123456'Contact-------If you have questions, bug reports, suggestions, etc. please create an issue onthe `GitHub project page &lt;http://github.com/findhotel/s3keyring&gt;`_.License-------This software is licensed under the `MIT license &lt;http://en.wikipedia.org/wiki/MIT_License&gt;`_See `License file &lt;https://github.com/findhotel/s3keyring/blob/master/LICENSE&gt;`_Â© 2020 German Gomez-Herrero, and `FindHotel`_... _FindHotel: https://company.findhotel.net/Authors=======`German Gomez-Herrero &lt;german@findhotel.net&gt;`_    original idea and implementationThese people have contributed to ``s3keyring``, in alphabetical order:* `Ilya Kalinin &lt;https://github.com/ikalinin&gt;`_Changelog=========0.2.2------ Fix pycparser version to prevent bug in pycparser 2.150.2.2------ Change naming conventions: secret namespaces, groups and keys0.2.0------ Don't use the local keychain if the s3keyring config file says so0.1.0------ Doc fixes- New keyring method to list secrets associated to a service0.0.12------- Docs fixes- Fixes in the handling of project-specific configs0.0.2------ Minor fixes in docs and package data0.0.1------ Initial release (germangh)</longdescription>
</pkgmetadata>