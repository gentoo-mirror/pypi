<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>casagui - visualization tools and applications for CASA=======================================================This is a **pre-alpha**, **prototype** package. It is *not* useful for external users, and allapplications being built with it are currently in various phases of *prototyping*.Introduction------------For some time, the GUIs provided by `CASA &lt;https://casadocs.readthedocs.io/en/latest/&gt;`_ havebeen based upon `Qt &lt;https://www.qt.io/&gt;`_. While Qt works well, the compiled nature of C++code made building and distributing the GUIs for each architecture a hurdle. This in turncaused the GUIs we developed to tend toward large, monolithic applications which weredifficult to integrate and control from Python. We first used`DBus &lt;https://www.freedesktop.org/wiki/Software/dbus/&gt;`_ to control our Qt application.Qt provides a nice interface to DBus, but it became clear that DBus development had slowedand that DBus was unlikely to make major inroads outside of the Linux Desktop. At thatpoint, we switched to `gRPC &lt;https://grpc.io/&gt;`_. gRPC supports a variety of platformsand languages. It also has significant support behind it. However despite the improvedtechnology, it was still difficult to incorporate a scripting interface which allowed astand-alone C++/Qt process to be controlled by a separate Python process at a low enoughlevel to be practically useful for control at the level of granularity we desire.Similar to the CASA visualization development experience, the CASA framework as a wholehas experienced the ups and downs of the large C++ development experience. Experiencewith a Python parallelization trade study which CASA conducted indicated that the lossof CPU throughput in a switch from C++ to pure Python can be made up for in gains madein the selection of parallelization framework like `Dask &lt;https://www.dask.org/&gt;`_ alongwith just in time compilation with something like `Numba &lt;http://numba.pydata.org/&gt;`_.In addition to the focus of the trade study, additional gains are possible by mixingin GPU resources.These experiences have led CASA to begin a multi-year transition from being a largeC++ framework attached to Python to being a pure-Python framework for processingradio astronomy data. This package is visualization portion of that transition.After an abbreviated trade study where we considered a few pure-Python visualizationframeworks, we selected `Bokeh &lt;https://docs.bokeh.org/en/latest/&gt;`_ as the basisfor creating new visualization infrastructure for CASA. The choice of Bokeh was madebased upon its extensibility, its community support (including`NumFocus &lt;https://numfocus.org/project/bokeh&gt;`_), and its limited external dependencies(just JavaScript and a modern web browser). A stand-alone application can be createdby using the`Bokeh server &lt;https://docs.bokeh.org/en/latest/docs/reference/command/subcommands/serve.html&gt;`_.These options allow for GUIs to be created and used interactively from a Pythoncommand line session, as a stand-alone mini web server, integrated into a desktopapplication (using `Electron &lt;https://www.electronjs.org/&gt;`_) or as part of a`Jupyter Notebook &lt;https://jupyter.org/&gt;`_.Beyond this architectural flexibility, our intention is to create a toolbox ofBokeh based components which can be combined to create a collection of visualizationtools which can be used in each of these settings (Python command line, Notebookand desktop application) so that we maintain smaller, reusable tools instead of verylarge monolithic applications. *Interactive clean* is our path-finder application ofthis approach and is currently the only example available.Installation------------casagui is available `from PyPI &lt;https://pypi.org/project/casagui/&gt;`_.Requirements````````````- Python 3.8 or greater- casatools and casatasks built from `CAS-13743 &lt;https://open-jira.nrao.edu/browse/CAS-13743&gt;`_Install```````- :code:`bash$ casa-CAS-13743-2-py3.8/bin/pip3 install casagui`Caveats```````- Remote access is slow, later a desktop application will be developed (using the same Bokeh  toolbox) to improve this situation, but for now if running remotely, it is best to pre-start  your preferred browser on the host where you will be running interactive clean. For example  * :code:`bash$ export BROWSER=/opt/local/bin/firefox`  * :code:`bash$ $BROWSER &gt; /dev/null 2&gt;&amp;1 &amp;`- `Konqueror &lt;https://apps.kde.org/konqueror/&gt;`_ does **not** work. We only test with  `Chrome &lt;https://www.google.com/chrome/&gt;`_ and  `Firefox &lt;https://www.mozilla.org/en-US/firefox/new/&gt;`_.- :code:`node.js` version 14.0.0 or higher is requiredSimple Usage Example--------------------A simple example of the use of interactive clean is::  CASA &lt;1&gt;: from casagui.apps import InteractiveClean  CASA &lt;2&gt;: InteractiveClean( vis=ms_path, imagename=img, imsize=512, cell='12.0arcsec',                    specmode='cube', interpolation='nearest', nchan=5, start='1.0GHz',                    width='0.2GHz', pblimit=-1e-05, deconvolver='hogbom', threshold='0.001Jy',                    niter=50, cycleniter=10, cyclefactor=3, scales=[0,3,10] )( )In general, the :code:`InteractiveClean` constructor takes a subset of parameters acceptedby `tclean &lt;https://casadocs.readthedocs.io/en/latest/api/tt/casatasks.imaging.tclean.html&gt;`_.All of the masks used in running interactive clean are available from the:code:`InteractiveClean` object. To get access to the list of masks, you would createthe object as a separate statement::  CASA &lt;2&gt;: ic = InteractiveClean( vis=ms_path, imagename=img, imsize=512, cell='12.0arcsec',                    specmode='cube', interpolation='nearest', nchan=5, start='1.0GHz',                    width='0.2GHz', pblimit=-1e-05, deconvolver='hogbom', threshold='0.001Jy',                    niter=50, cycleniter=10, cyclefactor=3, scales=[0,3,10] )( )  CASA &lt;2&gt;: ic( )  CASA &lt;3&gt;: print(ic.masks( ))</longdescription>
</pkgmetadata>