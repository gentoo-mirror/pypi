<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># projects_manager[![Downloads](https://static.pepy.tech/personalized-badge/projects-manager?period=total&amp;units=none&amp;left_color=black&amp;right_color=blue&amp;left_text=Downloads%20with%20pip)](https://pypi.org/project/projects-manager/)A simple projects manager/creator I use for myself and grow little by little, it may not work sometimes.type &quot;python -m pmanager -h&quot; to get a simple introductionthe default ide used by the script is VScode, use &quot;python pmanager.py config&quot; to change it.example :if you are using visual studio code, open the  configuration menu, select change default ide and type &quot;code&quot; in the prompt. (because the shell command to open vscode is : &quot;code [yourfolder]&quot; )The project manager is based on personnalisable modules, they are all in the modules folder and called when you specify them at the creation/add module action of a project.## Usage : ( you can omit the project name if you already are in its directory )- **pmg new &lt; project name &gt; [module]**        Create a new project with de desired module configuration- **pmg &lt; project name &gt; add [module]**            Add a module to an existing project- **pmg delete &lt; project_name &gt; all/[module]**            Delete all project or only a list of modules- **pmg share &lt; project name &gt;**            Open a tiny webserver to share your project source code over    the network- **pmg config**    Start pmanager configuration script :        - global default ide        - global default terminal        - global default projects path        - global default projects archiving path        - reset all settings except projects/archiving path- **pmg add &lt; project name &gt; [module]**            add a module/list of modules to an existing project- **pmg open &lt; project name &gt;**    open a project- **pmg modlist**    get a list of all available modules- **pmg projects**    get a list of all projects- **pmg archive &lt; project name &gt;**    archive a specific project     (default archives folder is &lt;user home directory&gt;/projects_archive)- **pmg term &lt; project name &gt;**    open your default terminal at the specified project folder- **pmg import**    start the assistant to create a custom project creation module- **pmg ide &lt; project name &gt;**        start the assistant to replace the default ide command by your custom manual startup command for the specified project- **pmg add_run &lt; project name &gt; &lt; command &gt;**    add a run command that will be executed when you use &quot;pmg &lt; project name &gt; run&quot;    (you can add as many commands as you want !)- **pmg run &lt; project name &gt;**        run all the commands you have specified with the command above (chronological order)- **pmg edit_conf &lt; project name &gt;**    open the configurations xml file for a specified project in your default code editor, so you can directly edit run and startup commands.- **pmg version**    display installed version versus lastest version published on pip- **pmg clone &lt; git_remote_url &gt; &lt; project_name &gt;**    clone a remote git repository and create a project with.- **pmg remame &lt; old_name &gt; &lt; new_name &gt;**    rename a project- **pmg changelog**    read the changelog- **pmg edit_module &lt; module_name &gt;**    open the source files of an existing module so you can personalize it- **pmg add_github &lt; owner &gt;/&lt; repo &gt; &lt; project_name &gt;**    link a github repository to a project- **pmg issues &lt; project_name &gt;**    display all open issues and their html link of a project. Needs to be linked to a github repo with the command just above.- **pmg zip &lt; project_name &gt;**    to pack your whole project into a zip archive, available at your project's root as &lt; project_name &gt;.zip- **example :**- pmg new my_project python flask  - pmg open my_project  - pmg delete my_project all  - pmg term my_project  ## additional informations:- no need to put ``python -m `` before pmanager, a binary is already in the package and put in path## A module is constitued of two files :- A python script that contain a initialize()  and recursive() functions that must begin by this code :```pythonfrom pmanager.res import *from os import mkdir,pathfrom xml.etree import ElementTree as ETdef recursive(root,path):    for item in root:        if item.tag == &quot;folder&quot;:            sub_path = item.attrib['path']            print(f&quot;folder : {path}{sub_path}&quot;)            mkdir(f&quot;{path}{sub_path}&quot;)            recursive(item,f&quot;{path}{sub_path}/&quot;)                    elif item.tag == &quot;file&quot;:            fname = item.attrib['name']            print(f&quot;file : {path}{fname}&quot;)            with open((path+fname),&quot;w&quot;) as f:                f.write(item.text)                f.close()def initialize(project_name):    if not path.exists(&quot;config/default_path.conf&quot;):        dirpath = get_home_dir_path()+&quot;/projects/&quot;+project_name    else:        with open(&quot;config/default_path.conf&quot;,&quot;r&quot;,encoding=&quot;utf-8&quot;) as f:            dirpath = f.read()+&quot;/&quot;+ project_name    if not path.exists(dirpath):            mkdir(dirpath)            module_name = path.basename(__file__).replace(&quot;.py&quot;,&quot;&quot;)    root = ET.parse(f&quot;pmanager/modules/{module_name}.xml&quot;,).getroot()    recursive(root,dirpath+&quot;/&quot;)     ```- And a &lt; modulename &gt;.xml file that has the same name as the module and script and basically store the content of the files and the folder architecture for your module . (template tag can be empty)It must looks like this (obviously adapt the file name and the template content):```xml    &lt;?xml version=&quot;1.0&quot;?&gt;&lt;template&gt;    &lt;folder path=&quot;c++_files&quot;&gt;        &lt;file name=&quot;main.cpp&quot;&gt;#include &amp;lt;iostream&amp;gt;int main() {    std::cout &amp;lt;&amp;lt; &amp;quot;Hello World!&amp;quot;    return 0;}        &lt;/file&gt;        &lt;folder path=&quot;headers&quot;&gt;            &lt;file name=&quot;header_file.hpp&quot;&gt;                        &lt;/file&gt;        &lt;/folder&gt;    &lt;/folder&gt;&lt;/template&gt;    ```/!\ Don't forget to escape :```&quot; to  &amp;quot;' to  &amp;apos;&lt; to  &amp;lt;&gt; to  &amp;gt;&amp; to  &amp;amp;```___#### If you like pmanager, don't forget to leave a star on my [github repo](https://www.github.com/thaaoblues/pmanager) ;) </longdescription>
</pkgmetadata>