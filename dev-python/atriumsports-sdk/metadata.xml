<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Atrium Sports API SDKPython module to make use of the Atrium Sports Datacore API## Datacore REST API```pythonfrom atriumsports import AtriumSportsatrium = AtriumSports(    {        &quot;sport&quot;: &quot;basketball&quot;,        &quot;credential_id&quot;: &quot;XXXXX&quot;,        &quot;credential_secret&quot;: &quot;YYYY&quot;,        &quot;organizations&quot;: [&quot;b1e34&quot;],    })datacore = atrium.client(&quot;datacore&quot;)response = datacore.get(&quot;/o/b1a23/competitions&quot;, limit=500)for data in response.data():    print(data)```or using **openapi client**### GET endpoints```pythonfrom pprint import pprintfrom atriumsports import AtriumSportsfrom atriumsports.datacore.openapi import CompetitionsApiatrium = AtriumSports(    {        &quot;sport&quot;: &quot;basketball&quot;,        &quot;credential_id&quot;: &quot;XXXXX&quot;,        &quot;credential_secret&quot;: &quot;YYYY&quot;,        &quot;organizations&quot;: [&quot;b1e34&quot;],    })datacore = atrium.client(&quot;datacore&quot;)# prepare api client with access token and connection poolwith datacore as api_client:    # create api instance object for handling input and output of chosen endpoint    api_instance = CompetitionsApi(api_client)    response = api_instance.competition_list(sport=&quot;basketball&quot;, organization_id=&quot;b1a23&quot;)    pprint(response)```### POST and PUT endpoints```pythonfrom atriumsports import AtriumSportsfrom atriumsports.datacore.openapi import EntitiesApifrom atriumsports.datacore.openapi import EntityPostBodyfrom atriumsports.datacore.openapi import EntityPutBodyatrium = AtriumSports(    {        &quot;sport&quot;: &quot;basketball&quot;,        &quot;credential_id&quot;: &quot;XXXXX&quot;,        &quot;credential_secret&quot;: &quot;YYYY&quot;,        &quot;organizations&quot;: [&quot;b1a23&quot;],    })datacore = atrium.client(&quot;datacore&quot;)with datacore as api_client:    api_instance = EntitiesApi(api_client)    response = api_instance.entity_insert(        sport=&quot;basketball&quot;,        organization_id=&quot;b1a23&quot;,        entity_post_body=EntityPostBody(            name_full_local=&quot;Test&quot;,            status=&quot;INACTIVE&quot;,        ),    )    entity_id = response.data[0].entity_id    response = api_instance.entity_update(        sport=&quot;basketball&quot;,        organization_id=&quot;b1a23&quot;,        entity_id=entity_id,        entity_put_body=EntityPutBody(            status=&quot;ACTIVE&quot;,        ),    )    assert response.data[0].status == &quot;ACTIVE&quot;```### Response bodyResponse body is a pydanitc object containing deserialized response data.Example:```pythonfrom atriumsports import AtriumSportsfrom atriumsports.datacore.openapi import LeaguesApiatrium = AtriumSports(    {        &quot;sport&quot;: &quot;basketball&quot;,        &quot;credential_id&quot;: &quot;XXXXX&quot;,        &quot;credential_secret&quot;: &quot;YYYY&quot;,        &quot;organizations&quot;: [&quot;b1a23&quot;],    })datacore = atrium.client(&quot;datacore&quot;)with datacore as api_client:    api_instance = LeaguesApi(api_client)    # throws error if response body doesn't pass validation    response = api_instance.league_list(&quot;b1a23&quot;, &quot;basketball&quot;)    print(response.data)    print(response.data[0].region_type)```## Datacore Streaming API```pythonimport timefrom atriumsports import AtriumSportsatrium = AtriumSports(    {        &quot;sport&quot;: &quot;basketball&quot;,        &quot;credential_id&quot;: &quot;XXXXX&quot;,        &quot;credential_secret&quot;: &quot;YYYY&quot;,        &quot;environment&quot;: &quot;sandpit&quot;,    })stream_api = atrium.client(&quot;datacore-stream&quot;)def on_connect_callback_function(client):    &quot;&quot;&quot;example callback when connected&quot;&quot;&quot;    print(&quot;connected&quot;)def on_read_callback_function(client, topic, message):    &quot;&quot;&quot;example callback when message read&quot;&quot;&quot;    print(&quot;{}: {}&quot;.format(topic, message))connected = stream_api.connect(    {        &quot;fixture_id&quot;: &quot;f71dfdd6-51f1-11ea-8889-22953e2ee7e2&quot;,  # fixture_id        &quot;scopes&quot;: [&quot;write:stream_events&quot;, &quot;read:stream_events&quot;],  # Scopes        &quot;on_read&quot;: on_read_callback_function,        &quot;on_connect&quot;: on_connect_callback_function,    })if not connected:    print(stream_api.error())else:    stream_api.publish(        &quot;write:stream_events&quot;,        {            &quot;type&quot;: &quot;event&quot;,            &quot;data&quot;: {                &quot;eventClass&quot;: &quot;sport&quot;,                &quot;eventId&quot;: &quot;c2404cc0-9f75-11e8-98d0-529269fb1459&quot;,                &quot;entityId&quot;: &quot;c24048a6-9f75-11e8-98d0-529269fb1459&quot;,                &quot;personId&quot;: &quot;c2405b2a-9f75-11e8-98d0-529269fb1459&quot;,                &quot;eventType&quot;: &quot;2pt&quot;,                &quot;subType&quot;: &quot;jumpshot&quot;,                &quot;clock&quot;: &quot;PT08:23&quot;,                &quot;shotClock&quot;: &quot;PT12.3&quot;,                &quot;periodId&quot;: 2,                &quot;success&quot;: True,                &quot;timestamp&quot;: &quot;2018-08-14T16:45:34.34&quot;,                &quot;clientId&quot;: &quot;c2408302-9f75-11e8-98d0-529269fb1459&quot;,                &quot;clientType&quot;: &quot;TestApi:1.1.2&quot;,            },        },        qos=1,  # QoS level 0=at most once, 1=at least once, 2=exactly once    )    time.sleep(40)    stream_api.disconnect()```For the available apis and models please check modules under `atriumsports.datacore.openapi`.Using your IDE, navigate to this module to see all details of the generated API classes.</longdescription>
</pkgmetadata>