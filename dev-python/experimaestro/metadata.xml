<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/experimaestro.svg)](https://badge.fury.io/py/experimaestro)Experimaestro is a computer science experiment manager whose goals are:- To decompose experiments into a set of parameterizable tasks- Schedule tasks and handle dependencies between tasks- Avoids to re-run the same task two times by computing unique task IDs dependending on the parameters- Handle experimental parameters through tagsThe full documentation can be read by going to the following URL: [https://experimaestro-python.readthedocs.io](https://experimaestro-python.readthedocs.io)# Install## With pipYou can then install the package using `pip install experimaestro`## DevelopCheckout the git directory, then```pip install -e .```# ExampleThis very simple example shows how to submit two tasks that concatenate two strings.Under the curtain,- A directory is created for each task (in `workdir/jobs/helloworld.add/HASHID`)  based on a unique ID computed from the parameters- Two processes for `Say` are launched (there are no dependencies, so they will be run in parallel)- A tag `y` is created for the main task&lt;!-- SNIPPET: MAIN ARGS[%WORKDIR% --port 0 --sleeptime=0.0001] --&gt;```python# --- Task and types definitionsimport logginglogging.basicConfig(level=logging.DEBUG)from pathlib import Pathfrom experimaestro import Task, Param, experiment, progressimport clickimport timeimport osfrom typing import List# --- Just to be able to monitor the tasksdef slowdown(sleeptime: int, N: int):    logging.info(&quot;Sleeping %ds after each step&quot;, sleeptime)    for i in range(N):        time.sleep(sleeptime)        progress((i+1)/N)# --- Define the tasksclass Say(Task):    word: Param[str]    sleeptime: Param[float]    def execute(self):        slowdown(self.sleeptime, len(self.word))        print(self.word.upper(),)class Concat(Task):    strings: Param[List[Say]]    sleeptime: Param[float]    def execute(self):        says = []        slowdown(self.sleeptime, len(self.strings))        for string in self.strings:            with open(string.__xpm_stdout__) as fp:                says.append(fp.read().strip())        print(&quot; &quot;.join(says))# --- Defines the experiment@click.option(&quot;--port&quot;, type=int, default=12345, help=&quot;Port for monitoring&quot;)@click.option(&quot;--sleeptime&quot;, type=float, default=2, help=&quot;Sleep time&quot;)@click.argument(&quot;workdir&quot;, type=Path)@click.command()def cli(port, workdir, sleeptime):    &quot;&quot;&quot;Runs an experiment&quot;&quot;&quot;    # Sets the working directory and the name of the xp    with experiment(workdir, &quot;helloworld&quot;, port=port) as xp:        # Submit the tasks        hello = Say(word=&quot;hello&quot;, sleeptime=sleeptime).submit()        world = Say(word=&quot;world&quot;, sleeptime=sleeptime).submit()        # Concat will depend on the two first tasks        Concat(strings=[hello, world], sleeptime=sleeptime).tag(&quot;y&quot;, 1).submit()if __name__ == &quot;__main__&quot;:    cli()```which can be launched with `python test.py /tmp/helloworld-workdir`</longdescription>
</pkgmetadata>