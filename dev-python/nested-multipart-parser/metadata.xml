<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Nested-multipart-parser[![build](https://github.com/remigermain/nested-multipart-parser/actions/workflows/main.yml/badge.svg)](https://github.com/remigermain/nested-multipart-parser/actions/workflows/main.yml)[![pypi](https://img.shields.io/pypi/v/nested-multipart-parser)](https://pypi.org/project/nested-multipart-parser/)Parser for nested data for '*multipart/form*', you can use it in any python project, or use the Django Rest Framework integration.# Installation:```bashpip install nested-multipart-parser```# Usage:```pythonfrom nested_multipart_parser import NestedParseroptions = {&quot;separator&quot;: &quot;bracket&quot;}def my_view():# `options` is optionalparser = NestedParser(data, options)if parser.is_valid():validate_data = parser.validate_data...else:print(parser.errors)```### Django Rest Framework```pythonfrom nested_multipart_parser.drf import DrfNestedParser...class YourViewSet(viewsets.ViewSet):parser_classes = (DrfNestedParser,)```## What it does:The parser take the request data and transform it to a Python dictionary:example:```python# input:{'title': 'title','date': &quot;time&quot;,'simple_object.my_key': 'title''simple_object.my_list[0]': True,'langs[0].id': 666,'langs[0].title': 'title','langs[0].description': 'description','langs[0].language': &quot;language&quot;,'langs[1].id': 4566,'langs[1].title': 'title1','langs[1].description': 'description1','langs[1].language': &quot;language1&quot;}# result: {'title': 'title','date': &quot;time&quot;,'simple_object': {'my_key': 'title','my_list': [True]},'langs': [{'id': 666,'title': 'title','description': 'description','language': 'language'},{'id': 4566,'title': 'title1','description': 'description1','language': 'language1'}]}```## How it works:Attributes where sub keys are full numbers only are automatically converted into lists:```pythondata = {'title[0]': 'my-value','title[1]': 'my-second-value'}output = {'title': ['my-value','my-second-value']}# Be aware of the fact that you have to respect the order of the indices for arrays, thus     'title[2]': 'my-value' # Invalid (you have to set title[0] and title[1] before)    # Also, you can't create an array on a key already set as a prinitive value (int, boolean or string):'title': 42,'title[object]': 42 # Invalid```Attributes where sub keys are other than full numbers are converted into Python dictionary:```pythondata = {'title.key0': 'my-value','title.key7': 'my-second-value'}output = {'title': {'key0': 'my-value','key7': 'my-second-value'}}        # You have no limit for chained key:# with &quot;mixed-dot&quot; separator option (same as 'mixed' but with dot after list to object):data = {'the[0].chained.key[0].are.awesome[0][0]': 'im here !!'}# with &quot;mixed&quot; separator option:data = {'the[0]chained.key[0]are.awesome[0][0]': 'im here !!'}# With &quot;bracket&quot; separator option:data = {'the[0][chained][key][0][are][awesome][0][0]': 'im here !!'}# With &quot;dot&quot; separator option:data = {'the.0.chained.key.0.are.awesome.0.0': 'im here !!'}```For this to work perfectly, you must follow the following rules:- A first key always need to be set. ex: `title[0]` or `title`. In both cases the first key is `title`- For `mixed` or `mixed-dot` options, brackets `[]` is for list, and dot `.` is for object- For `mixed-dot` options is look like `mixed` but with dot when object follow list- For `bracket` each sub key need to be separate by brackets `[ ]` or with `dot` options `.`- For `bracket` or `dot`options, if a key is number is convert to list else a object- Don't put spaces between separators.- By default, you can't set set duplicates keys (see options)- You can set empty dict/list:for empty list: `&quot;article.authors[]&quot;: None` -&gt; `{&quot;article&quot;: {&quot;authors&quot;: [] }}`for empty dict: `&quot;article.&quot;: None` -&gt; `{&quot;article&quot;: {} }``.` last dot for empty dict (availables in `dot`, `mixed` and `mixed-dot` options)`[]` brackets empty for empty list (availables in `brackets`, `mixed` and `mixed-dot` options)    ## Options```python{# Separators:# with mixed-dot:      article[0].title.authors[0]: &quot;jhon doe&quot;# with mixed:      article[0]title.authors[0]: &quot;jhon doe&quot;# with bracket:  article[0][title][authors][0]: &quot;jhon doe&quot;# with dot:      article.0.title.authors.0: &quot;jhon doe&quot;'separator': 'bracket' or 'dot' or 'mixed' or 'mixed-dot', # default is `mixed-dot`# raise a expections when you have duplicate keys# ex :# {#&quot;article&quot;: 42,#&quot;article[title]&quot;: 42,# }'raise_duplicate': True, # default is True# override the duplicate keys, you need to set &quot;raise_duplicate&quot; to False# ex :# {#&quot;article&quot;: 42,#&quot;article[title]&quot;: 42,# }# the out is# ex :# {#&quot;article&quot;{# &quot;title&quot;: 42,#}# }'assign_duplicate': False # default is False}```## Options for Django Rest Framwork:```python# settings.py...DRF_NESTED_MULTIPART_PARSER = {&quot;separator&quot;: &quot;mixed-dot&quot;,&quot;raise_duplicate&quot;: True,&quot;assign_duplicate&quot;: False,# output of parser is converted to querydict # if is set to False, dict python is returned&quot;querydict&quot;: True,}```## JavaScript integration:You can use this [multipart-object](https://github.com/remigermain/multipart-object) library to easy convert object to flat nested object formatted for this library## License[MIT](https://github.com/remigermain/multipart-object/blob/main/LICENSE)</longdescription>
</pkgmetadata>