<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python package for reading and tagging Riksdagens ProtokollBatteries (tagger) not included.## OverviewThis package is intended to cover the following use cases:  ### Extract &quot;text documents&quot; from the Parla-CLARIN XML filesText can be extracted from the XML files at different granularity (paragraphs, utterance, speech, who, protocol). The text can be grouped (combined) into larger temporal blocks based on time (year, lustrum, decade or custom periods). Within each of these block the text in turn can be grouped by speaker attributes (who, party, gender).The text extraction can done using the `riksprot2text` utility, which is a CLI interface installed with the package, or in Python code using the API that this package exposes. The Python API exposed both streaming (SAX based) methods and a domain model API (i.e. Python classes representing protocols, speeches and utterances).Both the CLI and the API supports dehyphenation using method described in [Anföranden: Annotated and Augmented Parliamentary Debates from Sweden, Stian Rødven Eide, 2020](https://gup.ub.gu.se/publication/302449). The API also supports user defined text transformations.### Extract PoS-tagged versions of the Parla-CLARIN XML filesPart-of-speech tagged versions of the protocols can be extracted with the same granularity and aggregation as described above for the raw text. The returned documents are tab-separated files with fields for text, baseform and pos-tag (UPOS, XPOS). Note that the actual part-of-speech tagging is done using tools found in the `pyriksprot_tagging` repository ([link](https://github.com/welfare-state-analytics/westac_parlaclarin_pipeline)).Currently there are no open-source tagged versions of the corpos avaliable. The tagging is done using [Stanza](https://stanfordnlp.github.io/stanza/) with Swedish language models produced and made publically avaliable by Språkbanken Text.### Store extracted textThe extracted text can be stored as optionally compressed plain text files on disk, or in a ZIP-archive.## Pre-requisites- Python &gt;=3.11- A folder containing the Riksdagen Protokoll (parliamentary protocols) Github repository.```bashcd some-folder \git clone --branch &quot;tag&quot; tags/&quot;tag&quot; --depth 1 https://github.com/welfare-state-analytics/riksdagen-corpus.gitcd riksdagen-corpusgit config core.quotepath off```## Installation (Linux)Create an new isolated virtual environment for pyriksprot:```bashmkdir /path/to/new/pyriksprot-foldercd /path/to/new/pyriksprot-folderpython -m venv .venv```Activate the environment:```bashcd /path/to/new/pyriksprot-foldersource .venv/bin/activate```Install `pyriksprot` in activated virtual environment.```bashpip install pyriksprot```## CLI riksprot2text:  Extract aggregated text corpus from Parla-CLARIN XML files```bashλ riksprot2text --helpUsage: riksprot2text [OPTIONS] SOURCE_FOLDER TARGETOptions:  -m, --mode [plain|zip|gzip|bz2|lzma]                                  Target type  -t, --temporal-key TEXT         Temporal partition key(s)  -y, --years TEXT                Years to include in output  -g, --group-key TEXT            Partition key(s)  -p, --processes INTEGER RANGE   Number of processes to use  -l, --segment-level [protocol|speech|utterance|paragraph|who]                                  Protocol extract segment level  -e, --keep-order                Keep output in filename order (slower, multiproc)  -s, --skip-size INTEGER RANGE   Skip blocks of char length less than  -d, --dedent                    Remove indentation  -k, --dehyphen                  Dehyphen text  --help                          Show this message and exit.  λ metadata2db --helpUsage: metadata2db.py [OPTIONS] COMMAND [ARGS]...  CLI tool to manage riksprot metadataOptions:  --help  Show this message and exit.Commands:  columns  database  download  filenames  index  λ metadata2db.py database --helpUsage: metadata2db.py database [OPTIONS] TARGETOptions:  --tag TEXT             Metadata version  --source-folder TEXT  --force                Force overwrite  --load-index           Load utterance index  --scripts-folder TEXT  Apply scripts in specified folder to DB. If not                         specified the scripts are loaded from SQL-module.  --skip-scripts         Skip loading SQL scripts  --help                 Show this message and exit.  λ metadata2db index --helpUsage: metadata2db.py index [OPTIONS] CORPUS_FOLDER TARGET_FOLDEROptions:  --help  Show this message and exit.```### Examples CLIAggregate text per year grouped by speaker. Store result in a single zip. Skip documents less than 50 characters.```pythonriksprot2text /path/to/corpus output.zip -m zip -t year -l protocol -g who --skip-size 50```Aggregate text per decade grouped by speaker. Store result in a single zip. Remove indentations and hyphenations.```bashriksprot2text /path/to/corpus output.zip -m zip -t decade -l who -g who --dedent --dehyphen```Aggregate text using customized temporal periods and grouped by party.```bashriksprot2text /path/to/corpus output.zip -m zip -t &quot;1920-1938,1929-1945,1946-1989,1990-2020&quot; -l who -g party```Aggregate text per document and group by gender and party.```bashriksprot2text /path/to/corpus output.zip -m zip -t protocol -l who -g party -g gender```Aggregate text per year grouped by gender and party and include only 1946-1989.```bashriksprot2text /path/to/corpus output.zip -m zip -t year -l who -g party -g gender -y 1946-1989```## Python API - Iterate XML protocolsAggregate text per year grouped by speaker. Store result in a single zip. Skip documents less than 50 characters.&lt;!--pytest-codeblocks:skip--&gt;```pythonimport pyriksprottarget_filename: str = f'output.zip'opts = {    'source_folder': '/path/to/corpus',    'target': 'outout.zip',    'target_type': 'files-in-zip',    'segment_level': SegmentLevel.Who,    'dedent': True,    'dehyphen': False,    'years': '1955-1965',    'temporal_key': TemporalKey.Protocol,    'group_keys': (GroupingKey.Party, GroupingKey.Gender),}pyriksprot.extract_corpus_text(**opts)```Iterate over protocol and speaker:```pythonfrom pyriksprot import interface, iterstorsitems: Iterable[interface.ProtocolSegment] = iterators.XmlProtocolTextIterator(    filenames=filenames, segment_level=SegmentLevel.Who, segment_skip_size=0, processes=4)for item in items:    print(item.who, len(item.text))```Iterate over protocol and speech, skip empty:```pythonfrom pyriksprot import interface, iterstorsitems: Iterable[interface.ProtocolSegment] = iterators.XmlProtocolTextIterator(    filenames=filenames, segment_level=SegmentLevel.Who, segment_skip_size=1, processes=4)for item in items:    print(item.who, len(item.text))```Iterate over protocol and speech, apply preprocess function(s):```pythonfrom pyriksprot import interface, iterstorsimport ftfy  # pip install ftfyimport unidecodefix_text: Callable[[str], str] = pyriksprot.compose(    [str.lower, pyriksprot.dedent, ftfy.fix_character_width, unidecode.unidecode ])items: Iterable[interface.ProtocolSegment] = iterators.XmlProtocolTextIterator(    filenames=filenames, segment_level=SegmentLevel.Speech, segment_skip_size=1, processes=4, preprocessor=fix_text,)for item in items:    print(item.who, len(item.text))```</longdescription>
</pkgmetadata>