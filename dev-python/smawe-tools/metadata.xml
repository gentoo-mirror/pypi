<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### ***本文档是由作者本人编写，难免会出现一些小问题，例如打错字等，发现后会及时改正***---### **核心函数**以下函数都可以从smawe_tools包中进行导入  例如: from smawe_tools import retry  - rename(src=&quot;&quot;):      对src路径指定的目录中的文件进行重命名      格式为第xxx章      第某某章必须在一亿章以下      例如:          &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;第一百章.txt -&gt; 第100章.txt           &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;第两千零一章.txt -&gt; 第2001章.txt  - text_conversion(s):      功能: 文本转换      描述: 如果s为空, 则返回0.      参数s: str    返回值: 整数    列如:          &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;两千零一 -&gt; 2001          &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;十万零一百 -&gt; 100100- get_ip(url, domain):      获取目标网站url或者域名domain的ip地址      返回包含ip地址的列表- get_pubnet_ip():      获取本机的公网ip(也就是上网时所使用的ip)      return: str- retry(stop_max_attempt_number=None, wait_random_min=None, wait_random_max=None, retry_exception=None):      发生异常进行重试，默认进行1次重试且每次重试前睡眠0-1s的随机时间，超过最大重试次数后还发生异常，则抛出MaxRetryError异常     重试期间如果正常返回结果或没发生异常，则不进行重试。    stop_max_attempt_number: 停止时的最大重试次数，超出次数后还发生异常，则抛出MaxRetryError异常      wait_random_min：随机等待的最小时间(单位毫秒)      wait_random_max: 随机等待的最大时间(单位毫秒)      retry_exception: 要重试的异常类型，默认为Exception  - modify_encoding():       此函数要从smawe_tools.settings模块进行导入, 如:     ~~~ python    from smawe_tools.settings import modify_encoding     # 直接调用即可    modify_encoding()      ~~~    调用此函数可以修正以下此类的错误:      UnicodeEncodeError: 'gbk' codec can't encode character '\xa0' in position 188608: illegal multibyte sequence    ---**启用默认日志**  *默认日志级别为logging.INFO*    &gt;&gt;&gt; import smawe_tools.settings as settings    &gt;&gt;&gt; import logging    &gt;&gt;&gt; settings.ENABLED_LOG = True    &gt;&gt;&gt; logging.info(&quot;test&quot;)    2023-04-04 18:10:39,183:test.py:MainThread:INFO:test---**可以自行使用text_conversion函数进行扩展**#### 示例    &gt;&gt;&gt; from smawe_tools import text_conversion    &gt;&gt;&gt; print(text_conversion(&quot;两千&quot;))    2000    &gt;&gt;&gt; print(text_conversion(&quot;两千万零一&quot;))    20000001---**retry使用方法**  *retry_exception没传参默认为Exception, 也就是发生Exception异常自动进行重试*&lt;br&gt;***注意事项***  retry传参只支持顺序传参、全部用位置传参或者全部用关键字传参，例如:  @retry(3, 1000, 2000, Exception)   @retry(3, wait_random_min=1000, wait_random_max=2000, retry_exception=Exception)  @retry(3, 1000, wait_random_max=2000, retry_exception=Exception)  @retry(3, 1000, 2000, retry_exception=Exception)  @retry(stop_max_attempt_number=3, wait_random_min=1000, wait_random_max=2000, retry_exception=Exception)  #### 示例1    &gt;&gt;&gt; from smawe_tools import retry    &gt;&gt;&gt; @retry()    ... def test():    ...     print(1)    ...     print(2)    ...     raise Exception()    ...    &gt;&gt;&gt; test()    &gt;&gt;&gt;    &gt;&gt;&gt; @retry(3， 1000， 2000) # retry_exception没传参数，所以这里是Exception    ... def test():    ...    pass    ...    &gt;&gt;&gt; @retry(stop_max_attempt_number=3, wait_random_min=1000, wait_random_max=3000) # retry_exception没传参数，所以这里也是Exception    ... def test():    ...     pass    ... # 如果发生异常，则进行重试，每次重试前休眠1-3s的随机时间    ...    &gt;&gt;&gt;---#### 示例2    &gt;&gt;&gt; from smawe_tools import retry    &gt;&gt;&gt; @retry(3, 1000, 2000, ValueError)    ... def test(a, b):    ...     print(1)    ...     print(2)    ...     print(a, b)    ...     raise ValueError()    ...    &gt;&gt;&gt; test(1, 2) #发生ValueError就进行重试    &gt;&gt;&gt; @retry(3, 1000, 2000, retry_exception=IndexError)    ... def test(a, b):    ...     print(1)    ...     print(2)    ...     print(a, b)    ...     raise ValueError()    ...    &gt;&gt;&gt; test(1, 2) #发生IndexError就进行重试---此包提供了一个smawe_tools.utils模块, 用于将日志记录发送到QQ邮箱  简单使用如下:  ```pythonimport loggingfrom smawe_tools.utils import ErrorLoggererror_logger = ErrorLogger(    from_addr=&quot;xxxx@qq.com&quot;,    to_addrs=[&quot;xyzxxxx@qq.com&quot;, &quot;abcdefg@qq.com&quot;],    subject=&quot;python test&quot;,    password=&quot;xxxxxxxxx&quot;,    handler_level=logging.INFO,    logger_level=logging.INFO)# 这里已经将日志记录发送到QQ邮箱了error_logger.info(&quot;test message&quot;)# 然后你的QQ邮箱会收到这样类似的消息# test.py &lt;module&gt; INFO: (45)test message...```---此包还提供了一个对配置进行读取和保存的子模块smawe_tools.config  简单使用如下:  ```pythonfrom smawe_tools.config import Configconfig = Config()# 切换节，设置选项和值config.switch_to_section(&quot;s1&quot;).set(&quot;k1&quot;, &quot;v1&quot;)config.switch_to_section(&quot;s2&quot;).set(&quot;k2&quot;, &quot;v2&quot;)config.switch_to_section(&quot;s3&quot;).set(&quot;k3&quot;, &quot;v3&quot;)# 切换到默认节&quot;DEFAULT&quot;config.switch_to_section(&quot;DEFAULT&quot;).set(&quot;accept&quot;, &quot;true&quot;)# 保存配置config.save_config(&quot;test.ini&quot;)```读取配置```pythonfrom smawe_tools.config import Configconfig = Config()config.read_config(&quot;test.ini&quot;)# 获取配置中的值print(config.get(&quot;s1&quot;, &quot;k1&quot;))print(config.get(&quot;s1&quot;, &quot;kk1&quot;, fallback=&quot;vv2&quot;))# 获取默认节中的值, 将其转为布尔值print(config.get_boolean(&quot;s1&quot;, &quot;accept&quot;))# 将其它值转为布尔值config.boolean_states = {&quot;access&quot;: True}config.set(&quot;s1&quot;, &quot;can&quot;, &quot;access&quot;)print(config.switch_to_section(&quot;s1&quot;).get_boolean(&quot;can&quot;))```</longdescription>
</pkgmetadata>