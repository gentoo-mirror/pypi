<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydantic-collections[![Build Status](https://app.travis-ci.com/romis2012/pydantic-collections.svg?branch=master)](https://app.travis-ci.com/romis2012/pydantic-collections)[![Coverage Status](https://coveralls.io/repos/github/romis2012/pydantic-collections/badge.svg?branch=master&amp;_=x)](https://coveralls.io/github/romis2012/pydantic-collections?branch=master)[![PyPI version](https://badge.fury.io/py/pydantic-collections.svg)](https://badge.fury.io/py/pydantic-collections)The `pydantic-collections` package provides `BaseCollectionModel` class that allows you to manipulate collections of [pydantic](https://github.com/samuelcolvin/pydantic) models (and any other types supported by pydantic).## Requirements- Python &gt;= 3.7- pydantic &gt;= 1.8.2## Installation```pip install pydantic-collections```## Usage#### Basic usage```pythonfrom datetime import datetimefrom pydantic import BaseModelfrom pydantic_collections import BaseCollectionModelclass User(BaseModel):    id: int    name: str    birth_date: datetimeclass UserCollection(BaseCollectionModel[User]):    pass user_data = [        {'id': 1, 'name': 'Bender', 'birth_date': '2010-04-01T12:59:59'},        {'id': 2, 'name': 'Balaganov', 'birth_date': '2020-04-01T12:59:59'},    ]users = UserCollection(user_data)print(users)#&gt; UserCollection([User(id=1, name='Bender', birth_date=datetime.datetime(2010, 4, 1, 12, 59, 59)), User(id=2, name='Balaganov', birth_date=datetime.datetime(2020, 4, 1, 12, 59, 59))])print(users.dict())#&gt; [{'id': 1, 'name': 'Bender', 'birth_date': datetime.datetime(2010, 4, 1, 12, 59, 59)}, {'id': 2, 'name': 'Balaganov', 'birth_date': datetime.datetime(2020, 4, 1, 12, 59, 59)}]print(users.json())#&gt; [{&quot;id&quot;: 1, &quot;name&quot;: &quot;Bender&quot;, &quot;birth_date&quot;: &quot;2010-04-01T12:59:59&quot;}, {&quot;id&quot;: 2, &quot;name&quot;: &quot;Balaganov&quot;, &quot;birth_date&quot;: &quot;2020-04-01T12:59:59&quot;}]```#### Strict assignment validationBy default `BaseCollectionModel` has a strict assignment check```python...users = UserCollection()users.append(User(id=1, name='Bender', birth_date=datetime.utcnow()))  # OKusers.append({'id': 1, 'name': 'Bender', 'birth_date': '2010-04-01T12:59:59'})#&gt; pydantic.error_wrappers.ValidationError: 1 validation error for UserCollection#&gt; __root__ -&gt; 2#&gt;  instance of User expected (type=type_error.arbitrary_type; expected_arbitrary_type=User)```This behavior can be changed via Model Config```python...class UserCollection(BaseCollectionModel[User]):    class Config:        validate_assignment_strict = False        users = UserCollection()users.append({'id': 1, 'name': 'Bender', 'birth_date': '2010-04-01T12:59:59'})  # OKassert users[0].__class__ is Userassert users[0].id == 1```#### Using as a model field`BaseCollectionModel` is a subclass of `BaseModel`, so you can use it as a model field```python...class UserContainer(BaseModel):    users: UserCollection = []        data = {    'users': [        {'id': 1, 'name': 'Bender', 'birth_date': '2010-04-01T12:59:59'},        {'id': 2, 'name': 'Balaganov', 'birth_date': '2020-04-01T12:59:59'},    ]}container = UserContainer(**data)container.users.append(User(...))...```</longdescription>
</pkgmetadata>