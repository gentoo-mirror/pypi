<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># A many-in-one tool for managing your Markup Language files.## What is it?**iotree** is a tool for managing your Markup Language files. It is capable to write and read files in the following formats:- JSON- YAML- TOML- XML- And soon more... üòâThe basic goal was to have a small package anyone could add to their project and use it to manage their files. It is also possible to use it as a CLI tool.## InstallationYou cannot install the CLI tool separately for now. You can install it with the following command:```bashpip install iotree```## Usage### As a CLI toolTo see what the display function can do, you can use the following command:```bashiotree demo```For example, the following JSON file (displayed in VSCode)```json{    &quot;glossary&quot;: {        &quot;title&quot;: &quot;example glossary&quot;,        &quot;GlossDiv&quot;: {            &quot;title&quot;: &quot;S&quot;,            &quot;GlossList&quot;: {                &quot;GlossEntry&quot;: {                    &quot;ID&quot;: &quot;SGML&quot;,                    &quot;SortAs&quot;: &quot;SGML&quot;,                    &quot;GlossTerm&quot;: &quot;Standard Generalized Markup Language&quot;,                    &quot;Acronym&quot;: &quot;SGML&quot;,                    &quot;Abbrev&quot;: &quot;ISO 8879:1986&quot;,                    &quot;GlossDef&quot;: {                        &quot;para&quot;: &quot;A meta-markup language, used to create markup languages such as DocBook.&quot;,                        &quot;GlossSeeAlso&quot;: [                            &quot;GML&quot;,                            &quot;XML&quot;                        ]                    },                    &quot;GlossSee&quot;: &quot;markup&quot;                }            }        }    }}```will be displayed like this:![JSON file displayed](https://i.imgur.com/tUSyW3L.png)While the following YAML file (displayed in VSCode)```yaml--- doe: &quot;a deer, a female deer&quot; ray: &quot;a drop of golden sun&quot; pi: 3.14159 xmas: true french-hens: 3 calling-birds:   - huey   - dewey   - louie   - fred xmas-fifth-day:   calling-birds: four   french-hens: 3   golden-rings: 5   partridges:     count: 1     location: &quot;a pear tree&quot;   turtle-doves: two```will be displayed like this:![YAML file displayed](https://i.imgur.com/t3q5yHS.png)**Note**: The CLI tool is not yet finished. It is still in development.  If this just looks like a wrapper around [rich trees](https://rich.readthedocs.io/en/stable/tree.html)) to you, it almost because it is. :wink:As a CLI tool, the key difference I want to bring is the ability to configure *themes* and *styles*.Just run the following command to interactively create a theme:```bashiotree config init```But if you're lazy, just use a file:```bashiotree config init from-json my_theme.json```For example, the following JSON file```json{       &quot;name&quot;: &quot;My super pseudonym&quot;,    &quot;username&quot;: &quot;my.username&quot;,    &quot;symbol&quot;: &quot;lgpoint&quot;,    &quot;theme&quot;: &quot;bright-blue-green&quot;}```Does _not_ immediately affect the display of the files. You need to use the following command:  To understand why, you can run```bashiotree config ls # same as iotree cfg ls```This is what the output looks like:![iotree config ls](https://i.imgur.com/5R3IMUG.png)You can see that the theme is registered, but will **not** be used by default.The best proof of this is to ask who the current user is:```bashiotree cfg get last_user#&gt; ‚úÖ Config found for user arnov#&gt; arnov```So the current user is `arnov`. To use _YOUR_ theme, you need to run the following command:```bashiotree cfg set last_user my.username#&gt; üë∑ Config: last_user ===&gt; my.username```Now, if you try to render a file, you will see that the theme is used:```bashiotree render .\iotree\examples\example.toml```Here's what the output looks like:![iotree render after](https://i.imgur.com/RHROUWg.png)The theme is now used. üéâüéâ### As a Python packageYou can use the package in your Python project. Here's an example:```pythonfrom iotree.core.render import buildmydict = {    &quot;super&quot; : {        &quot;dict&quot;: {            &quot;just&quot;: {                &quot;for&quot;: {                    &quot;example&quot;: &quot;ü§∑‚ôÇÔ∏è&quot;                }            }        }    }}# Build the tree from the dict without hassletree = build(mydict) # or build(mydict, theme=&quot;my_style&quot;, symbol=&quot;my_symbol&quot;)# Display the rich tree laterconsole.print(tree) # or rich.print(tree)```But there is more. You can also use the 'all in one' IO from the package:```pythonfrom iotree.core.io import reader, writer# Read a file, any extension is supported from the listdict_one = reader.read(&quot;my_file.json&quot;)dict_two = reader.read(&quot;my_file.yaml&quot;)dict_three = reader.read(&quot;my_file.toml&quot;)dict_four = reader.read(&quot;my_file.xml&quot;)dict_five = reader.read(&quot;my_file.html&quot;)# ... do some manipulations, like possibly merging the dicts or creating a new one# Write the dict to a filewriter.write(&quot;my_file.json&quot;, dict_one)writer.write(&quot;my_file.yaml&quot;, dict_two)writer.write(&quot;my_file.toml&quot;, dict_three)writer.write(&quot;my_file.xml&quot;, dict_four)# writer.write(&quot;my_file.html&quot;, dict_five) # Not supported yet```Another small feature is the ability to _detect the type of a file_:```pythondict_guess = reader.read(&quot;mysterious_file.not_a_real_extension&quot;)# if the content of the file is one of the supported types, it will be read correctly```There's also a functional package, which is not yet documented.  It allows you to compose functions while displaying rich progress using `rich.progress`.## ContributingIf you want to contribute, you can do so by forking the repository and creating a pull request.You can also help me pick the new themes and symbols.To see the possibilities, just run either of the following commands:```bashiotree view themes # oriotree view symbols # oriotree view colors```</longdescription>
</pkgmetadata>