<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pythondi[![license]](/LICENSE)[![pypi]](https://pypi.org/project/pythondi/)[![pyversions]](http://pypi.python.org/pypi/pythondi)[![Downloads](https://pepy.tech/badge/pythondi)](https://pepy.tech/project/pythondi)---pythondi is a lightweight dependency injection library for pythonSupport both sync and async functions## Installation```pythonpip3 install pythondi```## UsageFirst, you have to binding classes to provider.```pythonfrom pythondi import Providerprovider = Provider()provider.bind(Repo, SQLRepo)provider.bind(Usecase, CreateUsecase)```After binding, you need to configure it to container```pythonfrom pythondi import configure, configure_after_clear# Inject with configureconfigure(provider=provider)# Or if you want to fresh inject, use `configure_after_clear`configure_after_clear(provider=provider)```Import inject```pythonfrom pythondi import inject```Add type annotations that you want to inject dependencies```pythonclass Usecase:    def __init__(self, repo: Repo):        self.repo = repo```Add decorator```pythonclass Usecase:    @inject()    def __init__(self, repo: Repo):        self.repo = repo```Initialize class with no arguments```pythonusecase = Usecase()```Or, you can also inject manually through decorator arguments```pythonclass Usecase:    @inject(repo=SQLRepo)    def __init__(self, repo):        self.repo = repo```In this case, do not have to configure providers and type annotation.## Lazy initializing```pythonfrom pythondi import Providerprovider = Provider()provider.bind(Repo, SQLRepo, lazy=True)```You can use lazy initializing through `lazy` option. (default `False`)For singleton, use `lazy=False`.```pythonclass Usecase:    @inject(repo=SQLRepo)    def __init__(self, repo):        self.repo = repo```By default, manual injection is lazy. If you want a singleton, instantiate it like `repo=SQLRepo()`.## For testIn case of test codes, you probably want to use mock objects.In that case, you must use keyword arguments.```pythonclass MockRepo:    pass@inject()def test(repo: Repo):    return repo```**Yes:**```pythontest(repo=MockRepo())```**No:**```pythontest(MockRepo())test(MockRepo)```## NoteAt the moment of inject, class is automatically initialized.So you don't have to initialize your class inside of code.**Yes:**```python@inject()def __init__(self, repo: Repo):    self.repo = repo```**No:**```python@inject()def __init__(self, repo: Repo):    self.repo = repo()```## General example```pythonimport abcfrom pythondi import Provider, configure, configure_after_clear, injectclass Repo:    &quot;&quot;&quot;Interface class&quot;&quot;&quot;    __metaclass__ = abc.ABCMeta    @abc.abstractmethod    def get(self):        passclass SQLRepo(Repo):    &quot;&quot;&quot;Impl class&quot;&quot;&quot;    def get(self):        print('SQLRepo')class Usecase:    @inject()    def __init__(self, repo: Repo):        self.repo = repoif __name__ == '__main__':    # Init provider    provider = Provider()    # Bind `Impl` class to `Interface` class    provider.bind(Repo, SQLRepo)    # Inject with configure    configure(provider=provider)    # Or if you want to fresh injection, use `configure_after_clear`    configure_after_clear(provider=provider)    # Init class without arguments    u = Usecase()```## FastAPI example```pythonfrom fastapi import FastAPI, APIRouterfrom pythondi import Provider, configure, injectimport abcrouter = APIRouter()class Repo:    &quot;&quot;&quot;Interface class&quot;&quot;&quot;    __metaclass__ = abc.ABCMeta    @abc.abstractmethod    def get(self):        passclass SQLRepo(Repo):    &quot;&quot;&quot;Impl class&quot;&quot;&quot;    def __init__(self):        pass    def get(self):        print('SQLRepo')@router.route('/')def home():    usecase = Usecase()    usecase.repo.get()    return {'hello': 'world'}class Usecase:    @inject()    def __init__(self, repo: Repo):        self.repo = repodef create_app():    provider = Provider()    provider.bind(Repo, SQLRepo)    configure(provider=provider)    app = FastAPI()    app.include_router(router)    return appif __name__ == '__main__':    app = create_app()    app.run(debug=True)```## Flask example```pythonfrom flask import Flask, Blueprint, jsonifyfrom pythondi import Provider, configure, injectimport abcbp = Blueprint('home', __name__)class Repo:    &quot;&quot;&quot;Interface class&quot;&quot;&quot;    __metaclass__ = abc.ABCMeta    @abc.abstractmethod    def get(self):        passclass SQLRepo(Repo):    &quot;&quot;&quot;Impl class&quot;&quot;&quot;    def __init__(self):        pass    def get(self):        print('SQLRepo')@bp.route('/')def home():    usecase = Usecase()    usecase.repo.get()    return jsonify({'hello': 'world'})class Usecase:    @inject()    def __init__(self, repo: Repo):        self.repo = repodef create_app():    provider = Provider()    provider.bind(Repo, SQLRepo)    configure(provider=provider)    app = Flask(__name__)    app.register_blueprint(bp)    return appif __name__ == '__main__':    app = create_app()    app.run(debug=True)```## Sanic example```pythonimport abcfrom sanic import Sanic, Blueprintfrom sanic.response import jsonfrom pythondi import Provider, configure, injectclass Repo:    &quot;&quot;&quot;Interface class&quot;&quot;&quot;    __metaclass__ = abc.ABCMeta    @abc.abstractmethod    def get(self):        passclass SQLRepo(Repo):    &quot;&quot;&quot;Impl class&quot;&quot;&quot;    def __init__(self):        pass    def get(self):        print('SQLRepo')bp = Blueprint('home', url_prefix='/')@bp.route('/')async def home(request):    usecase = Usecase()    usecase.repo.get()    return json({'hello': 'world'})class Usecase:    @inject()    def __init__(self, repo: Repo):        self.repo = repodef create_app():    provider = Provider()    provider.bind(Repo, SQLRepo)    configure(provider=provider)    app = Sanic(__name__)    app.blueprint(bp)    return appif __name__ == '__main__':    app = create_app()    app.run(debug=True)```## Django example```python&quot;&quot;&quot;In case of django, just put the initializing code inside of django startupYou can use project folder's __init__.py or urls.py&quot;&quot;&quot;```[license]: https://img.shields.io/badge/License-Apache%202.0-blue.svg[pypi]: https://img.shields.io/pypi/v/pythondi[pyversions]: https://img.shields.io/pypi/pyversions/pythondi</longdescription>
</pkgmetadata>