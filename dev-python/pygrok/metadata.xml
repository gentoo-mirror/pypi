<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pygrok |Build Status|=====================|Join the chat at https://gitter.im/garyelephant/pygrok|A Python library to parse strings and extract information fromstructured/unstructured dataWhat can I use Grok for?-------------------------  parsing and matching patterns in a string(log, message etc.)-  relieving from complex regular expressions.-  extracting information from structured/unstructured dataInstallation------------.. code:: Bash        $ pip install pygrokor download, uncompress and install pygrok from`here &lt;https://github.com/garyelephant/pygrok/releases/latest&gt;`__:.. code:: Bash        $ tar zxvf pygrok-xx.tar.gz        $ cd pygrok_dir        $ sudo python setup.py installGetting Started---------------.. code:: Python    from pygrok import Grok    text = 'gary is male, 25 years old and weighs 68.5 kilograms'    pattern = '%{WORD:name} is %{WORD:gender}, %{NUMBER:age} years old and weighs %{NUMBER:weight} kilograms'    grok = Grok(pattern)    print grok.match(text)    # {'gender': 'male', 'age': '25', 'name': 'gary', 'weight': '68.5'}Pretty Cool !Numbers can be converted from string to ``int`` or ``float`` if you use``%{pattern:name:type}`` syntax, such as ``%{NUMBER:age:int}``.. code:: Python    from pygrok import Grok    text = 'gary is male, 25 years old and weighs 68.5 kilograms'    pattern = '%{WORD:name} is %{WORD:gender}, %{NUMBER:age:int} years old and weighs %{NUMBER:weight:float} kilograms'    grok = Grok(pattern)    print grok.match(text, pattern)    # {'gender': 'male', 'age': 25, 'name': 'gary', 'weight': 68.5}Now ``age`` is of type ``int`` and ``weight`` is of type ``float``.Awesome !Some of the pattern you can use are listed here:::    `WORD` means \b\w+\b in regular expression.    `NUMBER` means (?:%{BASE10NUM})    `BASE10NUM` means (?&lt;![0-9.+-])(?&gt;[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+)))    other patterns such as `IP`, `HOSTNAME`, `URIPATH`, `DATE`, `TIMESTAMP_ISO8601`, `COMMONAPACHELOG`..See All patterns `here &lt;./pygrok/patterns&gt;`__You can also have custom pattern, see `thesecodes &lt;https://github.com/garyelephant/pygrok/blob/master/tests/test_pygrok.py#L97&gt;`__.More details------------Beause python re module does not support regular expression syntaxatomic grouping(?&gt;),so pygrok requires`regex &lt;https://pypi.python.org/pypi/regex/2014.06.28&gt;`__ to beinstalled.pygrok is inspired by `Grok &lt;https://github.com/jordansissel/grok&gt;`__developed by Jordan Sissel. This is not a wrapper of Jordan Sissel'sGrok and totally implemented by me.Grok is a simple software that allows you to easily parse strings, logsand other files. With grok, you can turn unstructured log and event datainto structured data.Pygrok does the same thing.I recommend you to have a look at `logstash filtergrok &lt;https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html&gt;`__,it explains how Grok-like thing work.pattern files come from `logstash filter grok's patternfiles &lt;https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns&gt;`__Contribute-----------  You are encouraged to   `fork &lt;https://github.com/garyelephant/pygrok/fork&gt;`__, improve the   code, then make a pull request.-  `Issue tracker &lt;https://github.com/garyelephant/pygrok/issues&gt;`__Get Help--------::    mail:garygaowork@gmail.com    twitter:@garyelephantContributors------------Thanks to `allcontributors &lt;https://github.com/garyelephant/pygrok/graphs/contributors&gt;`__.. |Build Status| image:: https://travis-ci.org/garyelephant/pygrok.svg?branch=master   :target: https://travis-ci.org/garyelephant/pygrok.. |Join the chat at https://gitter.im/garyelephant/pygrok| image:: https://badges.gitter.im/Join%20Chat.svg   :target: https://gitter.im/garyelephant/pygrok?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge</longdescription>
</pkgmetadata>