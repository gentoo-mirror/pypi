<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Increase Python API Library[![PyPI version](https://img.shields.io/pypi/v/increase.svg)](https://pypi.org/project/increase/)The Increase Python library provides convenient access to the Increase REST API from any Python 3.7+application. It includes type definitions for all request params and response fields,and offers both synchronous and asynchronous clients powered by [httpx](https://github.com/encode/httpx).## DocumentationThe API documentation can be found [here](https://increase.com/documentation).## Installation```shpip install increase```## Usage```pythonfrom increase import Increaseincrease = Increase(    # defaults to os.environ.get(&quot;INCREASE_API_KEY&quot;)    api_key=&quot;my api key&quot;,    # defaults to &quot;production&quot;.    environment=&quot;sandbox&quot;,)account = increase.accounts.create(    name=&quot;My First Increase Account&quot;,)print(account.id)```While you can provide an `api_key` keyword argument, we recommend using [python-dotenv](https://pypi.org/project/python-dotenv/)and adding `INCREASE_API_KEY=&quot;my api key&quot;` to your `.env` file so that your API Key is not stored in source control.## Async UsageSimply import `AsyncIncrease` instead of `Increase` and use `await` with each API call:```pythonfrom increase import AsyncIncreaseincrease = AsyncIncrease(    # defaults to os.environ.get(&quot;INCREASE_API_KEY&quot;)    api_key=&quot;my api key&quot;,    # defaults to &quot;production&quot;.    environment=&quot;sandbox&quot;,)async def main():    account = await increase.accounts.create(        name=&quot;My First Increase Account&quot;,    )    print(account.id)asyncio.run(main())```Functionality between the synchronous and asynchronous clients is otherwise identical.## Using TypesNested request parameters are [TypedDicts](https://docs.python.org/3/library/typing.html#typing.TypedDict), while responses are [Pydantic](https://pydantic-docs.helpmanual.io/) models. This helps provide autocomplete and documentation within your editor.If you would like to see type errors in VS Code to help catch bugs earlier, set `python.analysis.typeCheckingMode` to `&quot;basic&quot;`.## PaginationList methods in the Increase API are paginated.This library provides auto-paginating iterators with each list response, so you do not have to request successive pages manually:```pythonimport increaseincrease = Increase()all_accounts = []# Automatically fetches more pages as needed.for account in increase.accounts.list():    # Do something with account here    all_accounts.append(account)print(all_accounts)```Or, asynchronously:```pythonimport asyncioimport increaseincrease = AsyncIncrease()async def main() -&gt; None:    all_accounts = []    # Iterate through items across all pages, issuing requests as needed.    async for account in increase.accounts.list():        all_accounts.append(account)    print(all_accounts)asyncio.run(main())```Alternatively, you can use the `.has_next_page()`, `.next_page_info()`, or `.get_next_page()` methods for more granular control working with pages:```pythonfirst_page = await increase.accounts.list()if first_page.has_next_page():    print(f&quot;will fetch next page using these details: {first_page.next_page_info()}&quot;)    next_page = await first_page.get_next_page()    print(f&quot;number of items we just fetched: {len(next_page.data)}&quot;)# Remove `await` for non-async usage.```Or just work directly with the returned data:```pythonfirst_page = await increase.accounts.list()print(f&quot;next page cursor: {first_page.next_cursor}&quot;)  # =&gt; &quot;next page cursor: ...&quot;for account in first_page.data:    print(account.id)# Remove `await` for non-async usage.```## Nested paramsNested parameters are dictionaries, typed using `TypedDict`, for example:```pythonfrom increase import Increaseincrease = Increase()increase.accounts.create(    foo={        &quot;bar&quot;: True,    },)```## File UploadsRequest parameters that correspond to file uploads can be passed as `bytes` or a tuple of `(filename, contents, media type)`.```pythonfrom pathlib import Pathfrom increase import Increaseincrease = Increase()contents = Path(&quot;my/file.txt&quot;).read_bytes()increase.files.create(    file=contents,    purpose=&quot;other&quot;,)```The async client uses the exact same interface. This example uses `aiofiles` to asynchronously read the file contents but you can use whatever method you would like.```pythonimport aiofilesfrom increase import Increaseincrease = Increase()async with aiofiles.open(&quot;my/file.txt&quot;, mode=&quot;rb&quot;) as f:    contents = await f.read()await increase.files.create(    file=contents,    purpose=&quot;other&quot;,)```## Handling errorsWhen the library is unable to connect to the API (e.g., due to network connection problems or a timeout), a subclass of `increase.APIConnectionError` is raised.When the API returns a non-success status code (i.e., 4xx or 5xxresponse), a subclass of `increase.APIStatusError` will be raised, containing `status_code` and `response` properties.All errors inherit from `increase.APIError`.```pythonfrom increase import Increaseincrease = Increase()try:    increase.accounts.create(        naem=&quot;Oops&quot;,    )except increase.APIConnectionError as e:    print(&quot;The server could not be reached&quot;)    print(e.__cause__)  # an underlying Exception, likely raised within httpx.except increase.RateLimitError as e:    print(&quot;A 429 status code was received; we should back off a bit.&quot;)except increase.APIStatusError as e:    print(&quot;Another non-200-range status code was received&quot;)    print(e.status_code)    print(e.response)```Error codes are as followed:| Status Code | Error Type                 || ----------- | -------------------------- || 400         | `BadRequestError`          || 401         | `AuthenticationError`      || 403         | `PermissionDeniedError`    || 404         | `NotFoundError`            || 422         | `UnprocessableEntityError` || 429         | `RateLimitError`           || &gt;=500       | `InternalServerError`      || N/A         | `APIConnectionError`       |### RetriesCertain errors will be automatically retried 2 times by default, with a short exponential backoff.Connection errors (for example, due to a network connectivity problem), 409 Conflict, 429 Rate Limit,and &gt;=500 Internal errors will all be retried by default.You can use the `max_retries` option to configure or disable this:```pythonfrom increase import Increase# Configure the default for all requests:increase = Increase(    # default is 2    max_retries=0,)# Or, configure per-request:increase.with_options(max_retries=5).accounts.create(    name=&quot;Jack&quot;,)```### TimeoutsRequests time out after 60 seconds by default. You can configure this with a `timeout` option,which accepts a float or an [`httpx.Timeout`](https://www.python-httpx.org/advanced/#fine-tuning-the-configuration):```pythonfrom increase import Increase# Configure the default for all requests:increase = Increase(    # default is 60s    timeout=20.0,)# More granular control:increase = Increase(    timeout=httpx.Timeout(60.0, read=5.0, write=10.0, connect=2.0),)# Override per-request:increase.with_options(timeout=5 * 1000).accounts.list(    status=&quot;open&quot;,)```On timeout, an `APITimeoutError` is thrown.Note that requests which time out will be [retried twice by default](#retries).## Advanced: Configuring custom URLs, proxies, and transportsYou can configure the following keyword arguments when instantiating the client:```pythonimport httpxfrom increase import Increaseincrease = Increase(    # Use a custom base URL    base_url=&quot;http://my.test.server.example.com:8083&quot;,    proxies=&quot;http://my.test.proxy.example.com&quot;,    transport=httpx.HTTPTransport(local_address=&quot;0.0.0.0&quot;),)```See the httpx documentation for information about the [`proxies`](https://www.python-httpx.org/advanced/#http-proxying) and [`transport`](https://www.python-httpx.org/advanced/#custom-transports) keyword arguments.## StatusThis package is in beta. Its internals and interfaces are not stable and subject to change without a major semver bump;please reach out if you rely on any undocumented behavior.We are keen for your feedback; please open an [issue](https://www.github.com/increase/increase-python/issues) with questions, bugs, or suggestions.## RequirementsPython 3.7 or higher.</longdescription>
</pkgmetadata>