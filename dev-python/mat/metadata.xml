<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MAT - Migration Assistant ToolManage your database versions with pure SQLMAT allows you to write your app migrations, rollbacks and data seeding scripts in pure sql, no matter which languages or frameworks your application is build on## Supported databasesCurrently following databases are supported:- MySQLCompatibility for following databases is in development- SQLite- Postgres- SQL Server ## Install### Python PIPYou can use pip:```bashpip install mat```&gt; MAT depends on python 3, in some systems you would want to use 'pip3' to install programs under python3 environment### Usage through dockerYou don't know pip/python? No problem, you can use 'mat' through docker.I have created a wrapper script that will invoke `mat` inside docker whenever you need it, just download it inside your migrations directory and use it the same way you would do with `mat` commandGet script```bashwget https://raw.githubusercontent.com/DiganmeGiovanni/Mat/master/docker/matwchmod +x matw # Grant exec permissions to wrapper```Then you can use the wrapper the same way as `mat` command```bash./matw status./matw migrate -s 2```&gt; Check 'Getting started' section to understand what above commands meansBehind scenes the script will:1. Create a docker container ready to run 'mat'2. Mount current path '$PWD' as a volume in /mat container path3. Invoke 'mat' command inside container by forwarding arguments## How it works?* You write your migration scripts in multiple sql files (One per migration)* You write rollback migration scripts (One per migration)* You setup database connection and scripts location in a configuration file* Run `mat` to apply/unapply/list your migrations## Getting started### Prepare migrations directoryCreate a directory to hold all your database migrations&gt; Directory location is up to you, but usually you'll want to place it&gt; inside your main project or as an independent repository in cases where&gt; multiple applications will access same databaseYour directory should have a structure like this:```bash|-migrations/|- |- migrations.yml |- |- up/|- |- - v1_create_tables.sql|- |- - v2_create_credentials_table.sql|- |- down/|- |- - v1_undo_create_tables.sql|- |- - v2_destroy_credentials_table.sql```Where:- The `up/` directory will hold all your migrations scripts- The `down/` directory will hold all your rollback scripts- The `migrations.yml` will be used for setup to specify how to access database&gt; You can use whatever name you want for your migration directories as long as&gt; you specify the right paths in the config file### Create your migrationsPlace your first migration inside `up/` directory in a sql file, ensure to name the file like: `V&lt;version_number&gt;_&lt;snake_case_name&gt;.sql`&gt; Follow naming convention is essential in order to run migrations&gt; in appropriate order and shows right name to you Let's say you have following file named `v1_create_tables.sql` (which will be parsed as: Version: `V1`, name: `Create tables`)```sqlCREATE TABLE user(    id INTEGER PRIMARY KEY AUTO_INCREMENT,    first_name VARCHAR(255) NOT NULL,    last_name VARCHAR(255) NOT NULL,    email VARCHAR(500) NOT NULL);CREATE TABLE car(    id INTEGER PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(255) NOT NULL,    user_id INTEGER NOT NULL,        CONSTRAINT fk_user FOREIGN KEY (user_id)        REFERENCES user(id))```### Create your rollbacksPlace your rollback inside `down/` directory in a sql file, following same name conventions as per migrations: `V&lt;version_number&gt;_snake_case_name&gt;.sql`&gt; Version number must match exactly with version in migration file, however you can use&gt; whatever you want for the name part Let's say you have: `v1_undo_create_tables.sql`: ```sqlDROP TABLE car;DROP TABLE user; ```### Setup database connection and settingsPlace the database connection settings into `migrations.yml` file:```yamldatasource:  host: 192.168.100.43  username: developer  password: d3v3lopm3nt  database: carsmigrations_path:  up: up/  down: down/```And now let 'mat' do it's magic ;)### Using mat`cd` into migrations directory and run one of following commands```bashmat status        # Will list all your migrationsmat migrate       # Will apply your migrationsmat migrate -s 2  # Will apply only '2' non applied migrationsmat rollback      # Will run you rollback scriptsmat rollback -s 2 # Will run rollback scripts for latest '2' applied migrations```</longdescription>
</pkgmetadata>