<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Kognic AuthenticationPython 3 library providing foundations for Kognic Authenticationon top of the `requests` or `httpx` libraries.Install with `pip install kognic-auth[requests]` or `pip install kognic-auth[httpx]` Builds on the standard OAuth 2.0 Client Credentials flow. There are a few ways to provide auth credentials to our api clients. Kognic Python clients such as in `kognic-io` accept an `auth` parameter that  can be set explicitly or you can omit it and use environment variables. There are a few ways to set your credentials in `auth`. 1. Set the environment variable `KOGNIC_CREDENTIALS` to point to your Api Credentials file. The credentials will contain the Client Id and Client Secret.2. Set to the credentials file path like `auth=&quot;~/.config/kognic/credentials.json&quot;` 3. Set environment variables `KOGNIC_CLIENT_ID` and`KOGNIC_CLIENT_SECRET`4. Set to credentials tuple `auth=(client_id, client_secret)` API clients such as the `InputApiClient` accept this `auth` parameter.Under the hood, they commonly use the AuthSession class which is implements a `requests` session with automatic token refresh. An `httpx` implementation is also available. ```pythonfrom kognic.auth.requests.auth_session import RequestsAuthSessionsess = RequestsAuthSession()# make call to some Kognic service with your token. Use default requests sess.get(&quot;https://api.app.kognic.com&quot;)```## ChangelogSee Github releases from v3.1.0, historic changelog is available in CHANGELOG.md</longdescription>
</pkgmetadata>