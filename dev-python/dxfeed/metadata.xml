<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dxfeed package[![PyPI](https://img.shields.io/pypi/v/dxfeed)](https://pypi.org/project/dxfeed/)[![Documentation Status](https://readthedocs.org/projects/dxfeed/badge/?version=latest)](https://dxfeed.readthedocs.io/en/latest/?badge=latest)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dxfeed)](https://pypi.org/project/dxfeed/)[![PyPI - Wheel](https://img.shields.io/pypi/wheel/dxfeed)](https://pypi.org/project/dxfeed/)[![PyPI - License](https://img.shields.io/pypi/l/dxfeed)](https://github.com/dxFeed/dxfeed-python-api/blob/master/LICENSE)[![Test workflow](https://github.com/dxFeed/dxfeed-python-api/workflows/Test%20package/badge.svg)](https://github.com/dxFeed/dxfeed-python-api/actions)This package provides access to [dxFeed](https://www.dxfeed.com/) streaming data.The library is build as a thin wrapper over [dxFeed C-API library](https://github.com/dxFeed/dxfeed-c-api).We use [Cython](https://cython.org/) in this project as it combines flexibility, reliability andusability in writing C extensions.The design of the dxfeed package allows users to write any logic related to events in python as well as extending lower level Cython functionality. Moreover, one may start working with the API using the default values like function arguments or a default event handler.Documentation: [dxfeed.readthedocs.io](https://dxfeed.readthedocs.io/en/latest/)Package distribution: [pypi.org/project/dxfeed](https://pypi.org/project/dxfeed/)## Installation**Requirements:** python &gt;= 3.6Install package via PyPI:```pythonpip3 install dxfeed``` ## Installation from sourcesTo install dxfeed from source you need Poetry. It provides a custom installer.This is the recommended way of installing poetry according to [documentation](https://python-poetry.org/docs/)For macOS / Linux / Windows (with bash):```bashcurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python```In the project root directory (same one where you found this file aftercloning the git repo), execute:```bashpoetry install ```By default package is installed in [development mode](https://pip.pypa.io/en/latest/reference/pip_install.html#editable-installs). To rebuild C extensions, after editing .pyx files:```bashpoetry run task build_inplace  # build c extensions```## Basic usageFollowing steps should be performed:* Import* Create Endpoint* Create Subscription* Attach event handler* Add tickers* Finally close subscription and connection ### Import package```pythonimport dxfeed as dxfrom datetime import datetime  # for timed subscription```### Configure and create connection with Endpoint classCreate instance of Endpoint class which will connect provided address. ```pythonendpoint = dx.Endpoint('demo.dxfeed.com:7300')```Endpoint instance contains information about the connection, e.g. connection address or status```pythonprint(f'Connected address: {endpoint.address}')print(f'Connection status: {endpoint.connection_status}')``````textConnected address: demo.dxfeed.com:7300Connection status: Connected and authorized```### Configure and create subscriptionYou should specify event type. For timed subscription (conflated stream) you should also provide time to start subscription from.```pythontrade_sub = endpoint.create_subscription('Trade')```**Attach default or custom event handler** - class that process incoming events. For details about customevent handler look into `CustomHandlerExample.ipynb` jupyter notebook in `exapmles` folder of this repository.```pythontrade_handler = dx.DefaultHandler()trade_sub = trade_sub.set_event_handler(trade_handler)```**Add tikers** you want to receive events for```pythontrade_sub = trade_sub.add_symbols(['C', 'AAPL'])```For timed subscription you may provide either datetime object or string. String might be incomplete, in this case you will get warning with how your provided date parsed automatically. ```pythontns_sub = endpoint.create_subscription('TimeAndSale', date_time=datetime.now()) \                  .add_symbols(['AMZN'])``````pythoncandle_sub = endpoint.create_subscription('Candle', date_time='2020-04-16 13:05')candle_sub = candle_sub.add_symbols(['AAPL', 'MSFT'])```We didn't provide subscriptions with event handlers. In such a case DefaultHandler is initiated automatically.One may get it with `get_event_handler` method.```pythontns_handler = tns_sub.get_event_handler()candle_handler = candle_sub.get_event_handler()```#### Subscription instance properties```pythonprint(f'Subscription event type: {tns_sub.event_type}')print(f'Subscription symbols: {candle_sub.symbols}')``````textSubscription event type: TimeAndSaleSubscription symbols: ['AAPL', 'MSFT']```### Access dataIn DefaultHandler the data is stored as deque. Its length may be configured, by default 100000 events.```pythoncandle_handler.get_list()```### Close connection```pythonendpoint.close_connection()print(f'Connection status: {endpoint.connection_status}')``````textConnection status: Not connected```### Transform data to pandas DataFrameDefaultHandler has `get_dataframe` method, which allows you to get pandas.DataFrame object with events as rows.```pythontrade_df = trade_handler.get_dataframe()tns_df = tns_handler.get_dataframe()candle_df = candle_handler.get_dataframe()```</longdescription>
</pkgmetadata>