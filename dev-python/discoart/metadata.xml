<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![](.github/banner.png)&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Create compelling Disco Diffusion artworks in one line&lt;/b&gt;&lt;/p&gt;&lt;p align=center&gt;&lt;a href=&quot;https://pypi.org/project/discoart/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/discoart?style=flat-square&amp;amp;label=Release&quot; alt=&quot;PyPI&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hub.docker.com/repository/docker/jinaai/discoart&quot;&gt;&lt;img alt=&quot;Docker Cloud Build Status&quot; src=&quot;https://img.shields.io/docker/cloud/build/jinaai/discoart?logo=docker&amp;logoColor=white&amp;style=flat-square&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://slack.jina.ai&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slack-3.1k-blueviolet?logo=slack&amp;amp;logoColor=white&amp;style=flat-square&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://colab.research.google.com/github/jina-ai/discoart/blob/main/discoart.ipynb&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Open-in%20Colab-brightgreen?logo=google-colab&amp;style=flat-square&quot; alt=&quot;Open in Google Colab&quot;/&gt;&lt;/a&gt;&lt;/p&gt;DiscoArt is an elegant way of creating compelling Disco Diffusion&lt;sup&gt;&lt;a href=&quot;#example-application&quot;&gt;[*]&lt;/a&gt;&lt;/sup&gt; artworks for generative artists, AI enthusiasts and hard-core developers. DiscoArt has a modern &amp; professional API with a beautiful codebase, ensuring high usability and maintainability. It introduces handy features such as result recovery and persistence, gRPC/HTTP serving w/o TLS, post-analysis, easing the integration to larger cross-modal or multi-modal applications.&lt;sub&gt;&lt;sup&gt;&lt;a id=&quot;example-application&quot;&gt;[*]&lt;/a&gt; Disco Diffusion is a Google Colab Notebook that leverages CLIP-Guided Diffusion to allow one to create compelling and beautiful images from text prompts.&lt;/sup&gt;&lt;/sub&gt;üíØ **Best-in-class**: industry-level engineering, top-notch code quality, lean dependencies, small RAM/VRAM footprint; important bug fixes, feature improvements [vs. the original DD5.6](FEATURES.md). üëº **Available to all**: smooth install for *self-hosting*, Google Colab *free tier*, non-GUI (IPython) environment, and CLI! No brainfuck, no dependency hell, no stackoverflow. üé® **Focus on create not code**: one-liner `create()` with a Pythonic interface, autocompletion in IDE, and powerful features. Fetch real-time results anywhere anytime, no more worry on session outrage on Google Colab. Set initial state easily for more efficient parameter exploration.üè≠ **Ready for integration &amp; production**: built on top of [DocArray](https://github.com/jina-ai/docarray) data structure, enjoy smooth integration with [Jina](https://github.com/jina-ai/jina), [CLIP-as-service](https://github.com/jina-ai/clip-as-service) and other cross-/multi-modal applications.‚òÅÔ∏è [**As-a-service**](#serving): simply `python -m discoart serve`, DiscoArt is now a high-performance low-latency service supports gRPC/HTTP/websockets and TLS. Scaling up/down is one-line; Cloud-native features e.g. Kubernetes, Prometheus and Grafana is one-line. [Unbelievable simple thanks to Jina](https://github.com/jina-ai/jina).## [Gallery with prompts](https://twitter.com/hxiao/status/1542967938369687552?s=20&amp;t=DO27EKNMADzv4WjHLQiPFA) Do you see the `discoart-id` in each tweet? To get the config &amp; prompts, simply:```pythonfrom discoart import show_configshow_config('discoart-id')```## InstallPython 3.7+ and CUDA-enabled PyTorch is required.```bashpip install discoart```This applies to both *self-hosting*, *Google Colab*, system integration, non-GUI environments.- **Self-hosted Jupyter**: to run a Jupyter Notebook on your own GPU machine, the easiest way is to [use our prebuilt Docker image](#run-in-docker).- **Use it from CLI**: [`python -m discoart create`](#cli) and `python -m discoart config` are CLI commands.- **Use it as a service**: [`python -m discoart serve`](#serving) allows one to run it as gRPC/HTTP/websockets service.### GUIDiscoArt is the **infrastructure** for creating Disco Diffusion artworks. The built-in Jupyter Notebook support gives you basic yet limited user experience, e.g. it does not offer any intuitive GUI for [prompt scheduling](FEATURES.md#prompt-scheduling). Note that DiscoArt is developer-centric and API-first, hence improving consumer-facing experience is out of the scope. There are services, platforms and products (not Jina AI affiliated) that already integrate DiscoArt as a service and provide nice GUI on top of it, e.g. Fever Dreams, Replicate, RunPod and Renderflux.&lt;details&gt;  &lt;summary&gt;Click to see third-party GUI&lt;/summary&gt;- [Fever Dreams](https://www.feverdreams.app/): a free community-powered service with nice GUI and gallery, where people generate and share their DiscoArt artworks, prompts and configs.- [Replicate](https://replicate.com/nightmareai/disco-diffusion): a free form-based GUI of DiscoArt with sandbox user experience and the visualizations.  - [RunPod](https://www.runpod.io/blog/accelerate-your-generate-art-with-disco-diffusion-and-runpod): a paid GPU cloud provider that runs DiscoArt container with a simple and clean GUI to visualize the configs and creations.- [Renderflux](https://beta.renderflux.com/register?invite=bughunting): a paid creative art platform that wraps DiscoArt and provides end-to-end GUI for creation management.**Please be aware that these platforms, products or companies are not affiliated with Jina AI.** They define their own terms of services, paywall and data and privacy policies, which are not in the scope of DiscoArt MIT License.&lt;/details&gt;## Get Started&lt;a href=&quot;https://colab.research.google.com/github/jina-ai/discoart/blob/main/discoart.ipynb&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Open-in%20Colab-brightgreen?logo=google-colab&amp;style=flat-square&quot; alt=&quot;Open in Google Colab&quot;/&gt;&lt;/a&gt;### Create artworks```pythonfrom discoart import createda = create()```That's it! It will create with the [default text prompts and parameters](./discoart/resources/default.yml).![](.github/create-demo.gif)### Set prompts and parametersSupported parameters are [listed here](./discoart/resources/default.yml). You can specify them in `create()`:```pythonfrom discoart import createda = create(    text_prompts='A painting of sea cliffs in a tumultuous storm, Trending on ArtStation.',    init_image='https://d2vyhzeko0lke5.cloudfront.net/2f4f6dfa5a05e078469ebe57e77b72f0.png',    skip_steps=100,)```![](.github/parameter-demo.gif)In case you forgot a parameter, just lookup the cheatsheet at anytime:```pythonfrom discoart import cheatsheetcheatsheet()```The difference on the parameters between DiscoArt and DD5.6 [is explained here](./FEATURES.md). ### Visualize resultsFinal results and intermediate results are created under the current working directory, i.e.```text./{name-docarray}/{i}-done.png./{name-docarray}/{i}-step-{j}.png./{name-docarray}/{i}-progress.png./{name-docarray}/{i}-progress.gif./{name-docarray}/da.protobuf.lz4```![](.github/result-persist.png)where:- `name-docarray` is the name of the run, you can specify it otherwise it is a random name.- `i-*` is up to the value of `n_batches`.- `*-done-*` is the final image on done.- `*-step-*` is the intermediate image at certain step, updated in real-time.- `*-progress.png` is the sprite image of all intermediate results so far, updated in real-time.- `*-progress.gif` is the animated gif of all intermediate results so far, updated in real-time.- `da.protobuf.lz4` is the compressed protobuf of all intermediate results so far, updated in real-time.The save frequency is controlled by `save_rate`.Moreover, `create()` returns `da`, a [DocumentArray](https://docarray.jina.ai/fundamentals/documentarray/)-type object. It contains the following information:- All arguments passed to `create()` function, including seed, text prompts and model parameters.- 4 generated image and its intermediate steps' images, where `4` is determined by `n_batches` and is the default value. This allows you to further post-process, analyze, export the results with powerful DocArray API.Images are stored as Data URI in `.uri`, to save the first image as a local file:```pythonda[0].save_uri_to_file('discoart-result.png')```To save all final images:```pythonfor idx, d in enumerate(da):    d.save_uri_to_file(f'discoart-result-{idx}.png')```You can also display all four final images in a grid:```pythonda.plot_image_sprites(skip_empty=True, show_index=True, keep_aspect_ratio=True)```![](.github/all-results.png)Or display them one by one:```pythonfor d in da:    d.display()```Or take one particular run:```pythonda[0].display()```![](.github/display.png)### Visualize intermediate stepsYou can also zoom into a run (say the first run) and check out intermediate steps:```pythonda[0].chunks.plot_image_sprites(    skip_empty=True, show_index=True, keep_aspect_ratio=True)```![](.github/chunks.png)You can `.display()` the chunks one by one, or save one via `.save_uri_to_file()`, or save all intermediate steps as a GIF:```pythonda[0].chunks.save_gif(    'lighthouse.gif', show_index=True, inline_display=True, size_ratio=0.5)```![](.github/lighthouse.gif)Note that &gt;=0.7.14, a 20FPS gif is generated which includes all intermedidate steps. ### Show/save/load configsTo show the config of a Document/DocumentArray,```pythonfrom discoart import show_configshow_config(da)  # show the config of the first runshow_config(da[3])  # show the config of the fourth runshow_config(    'discoart-06030a0198843332edc554ffebfbf288')  # show the config of the run with a known DocArray ID```To save the config of a Document/DocumentArray,```pythonfrom discoart import save_configsave_config(da, 'my.yml')  # save the config of the first runsave_config(da[3], 'my.yml')  # save the config of the fourth run```To run `create` from a YAML config of Document/DocumentArray,```pythonfrom discoart import create, load_configconfig = load_config('my.yml')create(**config)```You can also export the config as an SVG image:```pythonfrom discoart.config import save_config_svgsave_config_svg(da)```![](.github/discoart-3205998582.svg)One can also generate runnable Python code directly from the config:```pythonfrom discoart.config import export_pythonexport_python(da)```### Pull results anywhere anytimeIf you are a free-tier Google Colab user, one annoy thing is the lost of sessions from time to time. Or sometimes you just early stop the run as the first image is not good enough, and a keyboard interrupt will prevent `.create()` to return any result. Either case, you can easily recover the results by pulling the last session ID.1. Find the session ID. It appears on top of the image. ![](.github/session-id.png)2. Pull the result via that ID **on any machine at any time**, not necessarily on Google Colab:    ```python    from docarray import DocumentArray        da = DocumentArray.pull('discoart-3205998582')    ```### Reuse a Document as initial stateConsider a Document as a self-contained data with config and image, one can use it as the initial state for the future run. Its `.tags` will be used as the initial parameters; `.uri` if presented will be used as the initial image.```pythonfrom discoart import createfrom docarray import DocumentArrayda = DocumentArray.pull('discoart-3205998582')create(    init_document=da[0],    cut_ic_pow=0.5,    tv_scale=600,    cut_overview='[12]*1000',    cut_innercut='[12]*1000',    use_secondary_model=False,)```If you just want to initialize from a known DocArray ID, then simply:```pythonfrom discoart import createcreate(init_document='discoart-3205998582')```### Environment variablesYou can set environment variables to control the meta-behavior of DiscoArt. The environment variables must be set before importing DiscoArt, either in Bash or in Python via `os.environ`.```bashDISCOART_LOG_LEVEL='DEBUG' # more verbose logsDISCOART_OPTOUT_CLOUD_BACKUP='1' # opt-out from cloud backupDISCOART_DISABLE_IPYTHON='1' # disable ipython dependencyDISCOART_DISABLE_RESULT_SUMMARY='1' # disable result summary after the run endsDISCOART_DEFAULT_PARAMETERS_YAML='path/to/your-default.yml' # use a custom default parameters fileDISCOART_CUT_SCHEDULES_YAML='path/to/your-schedules.yml' # use a custom cut schedules fileDISCOART_MODELS_YAML='path/to/your-models.yml' # use a custom list of models fileDISCOART_OUTPUT_DIR='path/to/your-output-dir' # use a custom output directory for all images and resultsDISCOART_CACHE_DIR='path/to/your-cache-dir' # use a custom cache directory for models and downloadsDISCOART_DISABLE_REMOTE_MODELS='1' # disable the listing of diffusion models on Github, remote diffusion models allows user to use latest models without updating the codebase.DISCOART_REMOTE_MODELS_URL='https://yourdomain/models.yml' # use a custom remote URL for fetching models listDISCOART_DISABLE_CHECK_MODEL_SHA='1' # disable checking local model SHA matches the remote model SHADISCOART_DISABLE_TQDM='1' # disable tqdm progress bar on diffusion```## CLIDiscoArt provides two commands `create` and `config` that allows you to run DiscoArt from CLI.```bashpython -m discoart create my.yml```which creates artworks from the YAML config file `my.yml`. You can also do:```bashcat config.yml | python -m discoart create```So how can I have my own `my.yml` and what does it look like? That's the second command:```bashpython -m discoart config my.yml```which forks the [default YAML config](discoart/resources/default.yml) and export them to `my.yml`. Now you can modify it and run it with `python -m discoart create` command.If no output path is specified, then `python -m discoart config` will print the default config to stdout.To get help on a command, add `--help` at the end, e.g.:```bashpython -m discoart create --help``````textusage: python -m discoart create [-h] [YAML_CONFIG_FILE]positional arguments:  YAML_CONFIG_FILE  The YAML config file to use, default is stdin.optional arguments:  -h, --help        show this help message and exit```## ServingServing DiscoArt is super easy. Simply run the following command:```bashpython -m discoart serve```You shall see:![](.github/serving.png)Now send request to the server via curl/Javascript, e.g.```bashcurl \-X POST http://0.0.0.0:51001/post \-H 'Content-Type: application/json' \-d '{&quot;execEndpoint&quot;:&quot;/create&quot;, &quot;parameters&quot;: {&quot;text_prompts&quot;: [&quot;A beautiful painting of a singular lighthouse&quot;, &quot;yellow color scheme&quot;]}}'```That's it. You can of course pass all parameters that accepted by `create()` function in the JSON.### Polling intermediate resultsWe already know that `create` function is slow even on GPU it could take 10 minutes to finish an artwork. This means the after sending the above request, the client will have to wait 10 minutes for the response. There is nothing wrong with this behavior given that everything runs synchronously. However, in practice, client may expect a progress or intermediate results in the middle instead of waiting for the end.`/result` endpoint is designed for this purpose. It will return the intermediate results as soon as they are available. All you need is to specify `name_docarray` in the request parameters as you specified in `/create` endpoint. Here is an example:Let's create `mydisco-123` by sending the following request to `/create` endpoint:```bashcurl \-X POST http://0.0.0.0:51001/post \-H 'Content-Type: application/json' \-d '{&quot;execEndpoint&quot;:&quot;/create&quot;, &quot;parameters&quot;: {&quot;name_docarray&quot;: &quot;mydisco-123&quot;, &quot;text_prompts&quot;: [&quot;A beautiful painting of a singular lighthouse&quot;, &quot;yellow color scheme&quot;]}}'```Now that the above request is being processed on the server, you can periodically check `mydisco-123` progress by sending the following request to `/result` endpoint:```bashcurl \-X POST http://0.0.0.0:51001/post \-H 'Content-Type: application/json' \-d '{&quot;execEndpoint&quot;:&quot;/result&quot;, &quot;parameters&quot;: {&quot;name_docarray&quot;: &quot;mydisco-123&quot;}}'```A JSON will be returned with up-to-date progress, with image as DataURI, loss, steps etc. [The JSON Schema of Document/DocumentArray is described here.](https://docarray.jina.ai/fundamentals/fastapi-support/#json-schema)Note, `/result` won't be blocked by `/create` thanks to the smart routing of Jina Gateway. To learn/play more about those endpoints, you can check ReDoc or the Swagger UI embedded in the server.### Skip &amp; CancelSend to `/skip`, to skip the current run and move to the next run as defined in `n_batches`:```bashcurl \-X POST http://0.0.0.0:51001/post \-H 'Content-Type: application/json' \-d '{&quot;execEndpoint&quot;:&quot;/skip&quot;}'```Send to `/stop`, to stop the current run cancel all runs `n_batches`:```bashcurl \-X POST http://0.0.0.0:51001/post \-H 'Content-Type: application/json' \-d '{&quot;execEndpoint&quot;:&quot;/stop&quot;}'```### Unblocking `/create` requestIt is possible to have an unblocked `/create` endpoint: the client request to `/create` will be **immediately** returned, without waiting for the results to be finished. You now have to fully rely on `/result` to poll the result. To enable this feature: 1. Copy-paste the [default `flow.yml` file](./discoart/resources/flow.yml) to `myflow.yml`;2. Change `floating: false` to `floating: true` under `discoart` executor section;3. Run the following command:    ```bash    python -m discoart serve myflow.yml    ```Beware that the request velocity is now under **your control**. That is, if the client sends 10 `/create` requests in a second, then the server will start 10 `create()` in parallel! This can easily lead to OOM. Hence, the suggestion is only enabling this feature if you are sure that the client is not sending too many requests, e.g. you control the client request rate; or you are using DiscoArt behind a BFF (backend for frontend).### Scaling outIf you have multiple GPUs and you want to run multiple DiscoArt instances in parallel by leveraging GPUs in a time-multiplexed fashion, you can copy-paste the [default `flow.yml` file](./discoart/resources/flow.yml) and modify it as follows:```yamljtype: Flowwith:  protocol: http  monitoring: true  port: 51001  port_monitoring: 51002  # prometheus monitoring port  env:    JINA_LOG_LEVEL: debug    DISCOART_DISABLE_IPYTHON: 1    DISCOART_DISABLE_RESULT_SUMMARY: 1executors:  - name: discoart    uses: DiscoArtExecutor    env:      CUDA_VISIBLE_DEVICES: RR0:3  # change this if you have multiple GPU    replicas: 3  # change this if you have larger VRAM  - name: poller    uses: ResultPoller```Here `replicas: 3` says spawning three DiscoArt instances, `CUDA_VISIBLE_DEVICES: RR0:3` makes sure they use the first three GPUs in a round-robin fashion.Name it as `myflow.yml` and then run ```bashpython -m discoart serve myflow.yml```### Customization[Thanks to Jina](https://github.com/jina-ai/jina), there are tons of things you can customize! You can change the port number; change protocol to gRPC/Websockets; add TLS encryption; enable/disable Prometheus monitoring; you can also export it to Kubernetes deployment bundle simply via:```bashjina export kubernetes myflow.yml```For more features and YAML configs, [please check out Jina docs](https://docs.jina.ai).### Use gRPC gatewayTo switch from HTTP to gRPC gateway is simple:```yamljtype: Flowwith:  protocol: grpc...```and then restart the server.There are multiple advantages of using gRPC gateway:- Much faster and smaller network overhead.- Feature-rich, like compression, status monitoring, etc.In general, if you are using the DiscoArt server behind a BFF (backend for frontend), or your DiscoArt server does **not** directly serve HTTP traffic from end-users, then you should use gRPC protocol.To communicate with a gRPC DiscoArt server, one can use a Jina Client:```python# !pip install jinafrom jina import Clientc = Client(host='grpc://0.0.0.0:51001')da = c.post(    '/create',    parameters={        'name_docarray': 'mydisco-123',        'text_prompts': [            'A beautiful painting of a singular lighthouse',            'yellow color scheme',        ],    },)# check intermediate resultsda = c.post('/result', parameters={'name_docarray': 'mydisco-123'})```To use an existing Document/DocumentArray as init Document for `create`:```pythonfrom jina import Clientc = Client(host='grpc://0.0.0.0:51001')old_da = create(...)da = c.post(    '/create',    old_da,  # this can be a DocumentArray or a single Document    parameters={        'width_height': [1024, 768],    },)```This equals to run `create(init_document=old_da, width_height=[1024, 768])` on the server. Note:- follow-up parameters have higher priorities than the parameters in `init_document`.- if `init_document` is a DocumentArray, then the first Document in the array will be used as the init Document.- there is no need to do any serialization before sending, Jina automatically handles it.### Hosting on Google ColabThough not recommended, it is also possible to use Google Colab to host DiscoArt server. Please check out the following tutorials:- https://docs.jina.ai/how-to/google-colab/- https://clip-as-service.jina.ai/hosting/colab/## Run in Docker[![Docker Image Size (tag)](https://img.shields.io/docker/image-size/jinaai/discoart/latest?logo=docker&amp;logoColor=white&amp;style=flat-square)](https://hub.docker.com/repository/docker/jinaai/discoart)We provide a prebuilt Docker image for running DiscoArt out of the box. To update Docker image to latest version:```bashdocker pull jinaai/discoart:latest```### Use Jupyter notebookThe default entrypoint is starting a Jupyter notebook```bash# docker build . -t jinaai/discoart  # if you want to build yourselfdocker run -p 51000:8888 -v $(pwd):/home/jovyan/ -v $HOME/.cache:/root/.cache --gpus all jinaai/discoart```Now you can visit `http://127.0.0.1:51000` to access the notebook### Enable GPU in Docker on Windows You can use it on Windows Subsystem for Linux (WSL), Check the official guide [here](https://docs.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl).```bash# Make sure you install Windows 11 or Windows 10, version 21H2docker run -p 8888:8888 -v $HOME/.cache:/root/.cache --gpus all jinaai/discoart```### Use as a service```bash# docker build . -t jinaai/discoart  # if you want to build yourselfdocker run --entrypoint &quot;python&quot; -p 51001:51001 -v $(pwd):/home/jovyan/ -v $HOME/.cache:/root/.cache --gpus all jinaai/discoart -m discoart serve```Your DiscoArt server is now running at `http://127.0.0.1:51001`.### Release cycle[Docker images are built on every release](https://hub.docker.com/repository/docker/jinaai/discoart), so one can lock it to a specific version, say `0.5.1`:```bashdocker run -p 51000:8888 -v $(pwd):/home/jovyan/ -v $HOME/.cache:/root/.cache --gpus all jinaai/discoart:0.5.1```## What's next?[Next is create](https://colab.research.google.com/github/jina-ai/discoart/blob/main/discoart.ipynb).üòé **If you are already a DD user**: you are ready to go! There is no extra learning, DiscoArt respects the same parameter semantics as DD5.6. So just unleash your creativity! [Read more about their differences here](./FEATURES.md).You can always do `from discoart import cheatsheet; cheatsheet()` to check all new/modified parameters.üë∂ **If you are a [DALL¬∑E Flow](https://github.com/jina-ai/dalle-flow/) or new user**: you may want to take step by step, as Disco Diffusion works in a very different way than DALL¬∑E. It is much more advanced and powerful: e.g. Disco Diffusion can take weighted &amp; structured text prompts; it can initialize from a image with controlled noise; and there are way more parameters one can tweak. Impatient prompt like `&quot;armchair avocado&quot;` will give you nothing but confusion and frustration. I highly recommend you to check out the following resources before trying your own prompt:- [Zippy's Disco Diffusion Cheatsheet v0.3](https://docs.google.com/document/d/1l8s7uS2dGqjztYSjPpzlmXLjl5PM3IGkRWI3IiCuK7g/mobilebasic)- [EZ Charts - Diffusion Parameter Studies](https://docs.google.com/document/d/1ORymHm0Te18qKiHnhcdgGp-WSt8ZkLZvow3raiu2DVU/edit#)- [Disco Diffusion 70+ Artist Studies](https://weirdwonderfulai.art/resources/disco-diffusion-70-plus-artist-studies/)- [A Traveler‚Äôs Guide to the Latent Space](https://sweet-hall-e72.notion.site/A-Traveler-s-Guide-to-the-Latent-Space-85efba7e5e6a40e5bd3cae980f30235f#e122e748b86e4fc0ad6a7a50e46d6e10)- [Disco Diffusion Illustrated Settings](https://coar.notion.site/Disco-Diffusion-Illustrated-Settings-cd4badf06e08440c99d8a93d4cd39f51)- [Coar‚Äôs Disco Diffusion Guide](https://coar.notion.site/coar/Coar-s-Disco-Diffusion-Guide-3d86d652c15d4ca986325e808bde06aa#8a3c6e9e4b6847afa56106eacb6f1f79)&lt;!-- start support-pitch --&gt;## Support- Join our [Slack community](https://slack.jina.ai) and chat with other community members about ideas.- Join our [Engineering All Hands](https://youtube.com/playlist?list=PL3UBBWOUVhFYRUa_gpYYKBqEAkO4sxmne) meet-up to discuss your use case and learn Jina's new features.    - **When?** The second Tuesday of every month    - **Where?**      Zoom ([see our public events calendar](https://calendar.google.com/calendar/embed?src=c_1t5ogfp2d45v8fit981j08mcm4%40group.calendar.google.com&amp;ctz=Europe%2FBerlin)/[.ical](https://calendar.google.com/calendar/ical/c_1t5ogfp2d45v8fit981j08mcm4%40group.calendar.google.com/public/basic.ics))      and [live stream on YouTube](https://youtube.com/c/jina-ai)- Subscribe to the latest video tutorials on our [YouTube channel](https://youtube.com/c/jina-ai)## Join UsDiscoArt is backed by [Jina AI](https://jina.ai) and licensed under [MIT License](./LICENSE). [We are actively hiring](https://jobs.jina.ai) AI engineers, solution engineers to build the next neural search ecosystem in open-source.&lt;!-- end support-pitch --&gt;</longdescription>
</pkgmetadata>