<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========colorutils==========.. image:: https://pypip.in/license/colorutils/badge.svg    :target: https://pypi.python.org/pypi/colorutils/    :alt: License.. image:: https://pypip.in/version/colorutils/badge.svg    :target: https://pypi.python.org/pypi/colorutils/    :alt: Latest Version.. image:: https://pypip.in/download/colorutils/badge.svg    :target: https://pypi.python.org/pypi//colorutils/    :alt: DownloadsA library which provides utilities for working with colors in Python. Colors are modeled by the ``Color`` class and can berepresented in ``RGB``, ``HEX``, ``WEB``, and ``YIQ`` formats.0. Installation===============``colorutils`` can be installed from pypi::    pip install colorutilsto update an existing installation from pypi to the latest version::    pip install colorutils --upgrade1. Current Features===================**v0.2.1** (released 05/25/2015)- Bug fix for pip install on Windows for unfound packages**v0.2** (released 05/23/2015)- Add HSV color representation and conversions- Add YIQ color representation and conversions- Color objects can be treated as iterables- Implementation of color runs- Addition of pre-defined color palettes- Package restructuring**v0.1** (released 05/16/2015)- A versatile abstract color model which allows color addition and subtraction- Conversions between: ``RGB`` tuples, 6-character ``HEX`` strings, 3-character ``HEX`` strings, and ``WEB`` representations of color.- Random color generation2. Reporting Bugs / Requesting Features=======================================To report a bug or request a feature for colorutils, please open a new issue_ .. _issue: https://github.com/edaniszewski/colorutils/issues3. Usage========3.1 Instantiating a ``Color``-----------------------------The basic way to instantiate a ``Color``::    &gt;&gt;&gt; from colorutils import Color    &gt;&gt;&gt; c = Color((255, 255, 255))    &gt;&gt;&gt; c    &lt;Color (255, 255, 255)&gt;By default, the Color object expects an ``RGB`` 3-tuple, but there are multiple ways to instantiate a ``Color``. The possibilities for Cyan, for example::    Color((0, 255, 255))    Color(green=255, blue=255)    Color(rgb=(0, 255, 255))    Color(hex='#00FFFF')    Color(hex='00ffff')    Color(hex='#0ff')    Color(hex='0ff')    Color(web='cyan')    Color(web='Cyan')    Color(web='CYAN')    Color(web='#00ffff')    Color(web='#0ff')    Color(yiq=(0.701, -0.596, -0.217))    Color(hsv=(180, 1, 1))``Color`` objects can also take the color from other ``Color`` objects::    &gt;&gt;&gt; Color(Color((255, 255, 255)))    &lt;Color (255, 255, 255)&gt;    &gt;&gt;&gt; Color(Color(Color(Color((255, 255, 255)))))    &lt;Color (255, 255, 255)&gt;3.2 Color Conversion--------------------The current color models supported by ``colorutils`` are: ``RGB``, ``HEX``, ``WEB``, ``YIQ``, and ``HSV``. Each instantiated ``Color`` object has properties which will automatically perform the required conversions::    &gt;&gt;&gt; c = Color((46, 139, 87))    &gt;&gt;&gt; c.red    46    &gt;&gt;&gt; c.green    139    &gt;&gt;&gt; c.blue    87    &gt;&gt;&gt; c.rgb    (46, 139, 87)    &gt;&gt;&gt; c.hex    '#2e8b57'    &gt;&gt;&gt; c.shorthex    '#2e8b57'    &gt;&gt;&gt; c.web    'SeaGreen'    &gt;&gt;&gt; c.yiq    (0.413, -0.152, -0.143)    &gt;&gt;&gt; c.hsv    (146.452, 0.669, 0.545)If the color were such that the ``HEX`` representation could be captured as a 3-char hex::    &gt;&gt;&gt; c = Color((0, 0, 0))    &gt;&gt;&gt; c.hex    '#000000'    &gt;&gt;&gt; c.shorthex    '#000'The web representation will return the hex value if the color is not a well-known named web color::    &gt;&gt;&gt; c = Color((1, 243, 77))    &gt;&gt;&gt; c.hex    '#01f34d'    &gt;&gt;&gt; c.web    '#01f34d'These same conversions can be done without instantiating a ``Color`` object by using the static methods:* ``rgb_to_hex()``* ``rgb_to_web()``* ``rgb_to_yiq()``* ``rgb_to_hsv()``* ``hex_to_rgb()``* ``hex_to_web()``* ``hex_to_yiq()``* ``hex_to_hsv()``* ``web_to_rbg()``* ``web_to_hex()``* ``web_to_yiq()``* ``web_to_hsv()``* ``yiq_to_rgb()``* ``yiq_to_hex()``* ``yiq_to_web()``* ``yiq_to_hsv()``* ``hsv_to_rgb()``* ``hsv_to_hex()``* ``hsv_to_web()``* ``hsv_to_yiq()``Using these static conversion methods, one can chain conversions (due to the in-param and out-param of all multi-value color representations being a tuple), which you are unable to do using the Python default `colorsys`.::    &gt;&gt;&gt; rgb_to_hex(hex_to_rgb('#808080'))    '#808080'Of course, be wary of chaining. Since approximation exists in the conversion algorithms, degradation will occur::    &gt;&gt;&gt; yiq_to_web(rgb_to_yiq(hex_to_rgb('808080')))    '#7f807e'Though, the values will still be close::    &gt;&gt;&gt; hex(int('80', 16) - int('7f', 16))  # Red difference    '0x1'    &gt;&gt;&gt; hex(int('80', 16) - int('80', 16))  # Green difference    '0x0'    &gt;&gt;&gt; hex(int('80', 16) - int('7e', 16))  # Blue difference    '0x2'3.3 ``Color`` Arithmetic------------------------Although the addition and subtraction of color does not always make sense, the ability to do so is supported. There are two additive models currently supported: ``LIGHT`` and ``BLEND``.3.3.1 Addition~~~~~~~~~~~~~~``LIGHT``    the light model is an additive model, where the rgb components are added, but do not exceed the maximum value, 255. This model is the default model which every ``Color`` is initialized with, unless overridden.An example of ``LIGHT`` addition::    &gt;&gt;&gt; Color((0, 100, 200)) + Color((100, 100, 100))    &lt;Color (100, 200, 255)&gt;``BLEND``    the blend model is an averaging model, where each rgb component is averaged.An example of ``BLEND`` addition::    &gt;&gt;&gt; Color((0, 100, 200), arithmetic=ArithmeticModel.BLEND) + Color((100, 100, 100))    &lt;Color (50, 150, 250)&gt;When assigning models, it is important to note that the arithmetic model for the first object in the operation, e.g. Object1 in 'Object1 + Object2', is the model which will be used when computing the addition.``Color`` addition can also operate on 3-tuples, which represent an ``RGB`` value::    &gt;&gt;&gt; Color((50, 50, 50)) + (20, 20, 20)    &lt;Color (70, 70, 70)&gt;3.3.2 Subtraction~~~~~~~~~~~~~~~~~There is currently only one subtractive model, the equivalent to the inverse of the ``LIGHT`` additive model. There is no model representing the inverse of ``BLEND``, since the inverse average does not really make sense.::    &gt;&gt;&gt; Color((100, 100, 100)) - Color((0, 75, 200))    &lt;Color (100, 25, 0)&gt;``Color`` subtraction can also operate on 3-tuples, which represent an ``RGB`` value::    &gt;&gt;&gt; Color((50, 50, 50)) - (20, 20, 20)    &lt;Color (30, 30, 30)&gt;3.4 Color Equality------------------Testing for equality between colors defaults to testing between the equality of the ``RGB`` values::    &gt;&gt;&gt; c1 = Color((10, 20, 30))    &gt;&gt;&gt; c2 = Color((10, 20, 30))    &gt;&gt;&gt; c3 = Color((10, 20, 20))    &gt;&gt;&gt; c1 == c2    True    &gt;&gt;&gt; c1 == c3    FalseDifferent equality functions can be set, using either the predefined equalities in ``colorutils.equality``, or from a custom equality function::    &gt;&gt;&gt; from colorutils.equality import *    &gt;&gt;&gt; c = Color((10, 20, 30), equality_fn=RED_eq)    &gt;&gt;&gt; c2 = Color((10, 40, 60))    &gt;&gt;&gt; c == c2    True    &gt;&gt;&gt; c2 == c    FalseNotice that in the above example, when checking for red equality, when the color with the ``RED_eq`` equality comes first in the comparison, itevaluates to ``True``. If it comes second, it evaluates to ``False``.  This is because the equality function of the first ``Color`` instance inthe comparison defines which equality function is used.The predefined equalities are:* ``RGB_eq``* ``RED_eq``* ``GREEN_eq``* ``BLUE_eq``* ``HEX_eq``* ``WEB_eq``* ``YIQ_eq``* ``HSV_eq``Defining a custom equality would follow the pattern defined by the RGB_eq definition, below::    RGB_eq = lambda c1, c2: c1.rgb == c2.rgb3.5 Color Palettes------------------A collection of pre-defined color palettes exists for convenience. The palettes which are currently implemented include:* grayscale* primary* rgb* roygbv* secondaryIndividual named colors can be used from the palettes, or all colors can be retrieved::    &gt;&gt;&gt; import colorutils.palettes.primary as primary    &gt;&gt;&gt; primary.red    &lt;Color (255, 0, 0)&gt;    &gt;&gt;&gt; primary.yellow    &lt;Color (255, 255, 0)&gt;    &gt;&gt;&gt; primary.blue    &lt;Color (0, 0, 255)&gt;    &gt;&gt;&gt; primary.all    [&lt;Color (255, 0, 0)&gt;, &lt;Color (255, 255, 0)&gt;, &lt;Color (0, 0, 255)&gt;]4. ``colorutils`` vs others===========================To see how the ``colorutils`` conversion algorithms compare to other algorithms/provided values, see the comparisons_ wiki page. .. _comparisons: https://github.com/edaniszewski/colorutils/wiki/Comparing-Conversion-Algorithms</longdescription>
</pkgmetadata>