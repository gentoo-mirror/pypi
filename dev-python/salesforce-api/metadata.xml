<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Salesforce API=====================[![Build Status](https://travis-ci.org/felixlindstrom/python-salesforce-api.svg?branch=master)](https://travis-ci.org/felixlindstrom/python-salesforce-api)This project aims to provide an easy to use, highly flexible and testable solution for communicating with Salesforcethrough its REST and SOAP api.Content-------- [Simple Usage](#simple-usage)- [Authentication](#authentication)- [Record management](#record-management)  - [Insert](#insert)  - [Upsert](#upsert)  - [Update](#update)  - [Get](#get)  - [Delete](#delete)- [Quering SObjects](#querying-sobjects)- [Bulk](#bulk)- [Tooling](#tooling)- [Deploying](#deploying)- [Retrieving](#retrieving)- [Additional features](#additional-features)Simple usage------------Creating a new connection / client is as simple as this:```pythonfrom salesforce_api import Salesforceclient = Salesforce(    username='test@example.com',    password='my-password',    security_token='password-token')```Authentication--------------To get started in the simples of ways, you would do the following```pythonfrom salesforce_api import Salesforceclient = Salesforce(username='test@example.com',                    password='my-password',                    security_token='password-token')```If you are trying to connect to a sandbox, you have to specify this using the `is_sandbox` argument.```pythonfrom salesforce_api import Salesforceclient = Salesforce(username='test@example.com',                    password='my-password',                    security_token='password-token',                    is_sandbox=True)```If for some reason the login-url differs from the standard prod/test login urls, you can specify the login url. This can be useful if you are using a mock-server, for example. This will override the `is_sandbox` argument.```pythonfrom salesforce_api import Salesforceclient = Salesforce(username='test@example.com',                    password='my-password',                    security_token='password-token',                    domain='login.example.com')```The examples so far would use the SOAP API for authenticating. If you want to authenticate using an app, that's easy engough. The login-url and sandbox-arguments applies here as well.```pythonfrom salesforce_api import Salesforceclient = Salesforce(username='test@example.com',                    password='my-password',                    client_id='123',                    client_secret='my-secret')```If you already have an OAuth access token, obtained elsewhere, you can just as easily create a new client.```pythonfrom salesforce_api import Salesforceclient = Salesforce(access_token='access-token-here',                    domain='access-token-domain')```If you want to explicitly use one or the other methods of authenticating, you can do that as well```pythonfrom salesforce_api import Salesforce, loginclient = Salesforce(login.oauth2(username='test@example.com',                                 password='my-password',                                 client_id='123',                                 client_secret='my-secret'))```If you want to use a specific version of the Salesforce API, you can specify this:```pythonfrom salesforce_api import Salesforceclient = Salesforce(access_token='access-token-here',                    domain='access-token-domain',                    api_version='51.0')```Record management-----------------Wokring with records is easy. All SObject-related methods are exposed through the `sobjects`-property on the client.The data returned from the different calls is the decoded data from the raw response.##### InsertExample```pythonclient.sobjects.Contact.insert({'LastName': 'Example', 'Email': 'test@example.com'})```Returns```{&quot;id&quot;:&quot;0031l000007rU3vAAE&quot;,&quot;success&quot;:true,&quot;errors&quot;:[]}```##### GetExample```pythonclient.sobjects.Contact.get('0031l000007rU3vAAE')```Returns```{    &quot;attributes&quot;: {        &quot;type&quot;: &quot;Contact&quot;,        &quot;url&quot;: &quot;/services/data/v44.0/sobjects/Contact/0031l000007rU3vAAE&quot;    },    &quot;Id&quot;: &quot;0031l000007rU3vAAE&quot;,    &quot;LastName&quot;: &quot;Example&quot;,    &quot;FirstName&quot;: &quot;Test&quot;,    ...}```##### UpdateExample```pythonclient.sobjects.Contact.update('0031l000007rU3vAAE', {'FirstName': 'Felix', 'LastName': 'Lindstrom'})```Returns```pythonTrue```##### UpsertExample```pythonclient.sobjects.Contact.upsert('customExtIdField__c', '11999', {'FirstName': 'Felix', 'LastName': 'Lindstrom'})```Returns```pythonTrue```##### DeleteExample```pythonclient.sobjects.Contact.delete('0031l000007rU3vAAE')```Returns```pythonTrue```##### MetadataExample```pythonclient.sobjects.Contact.metadata()```Returns```{    'objectDescribe': {        'activateable': False,        'createable': True,        'custom': False,        ...        'urls': {            'compactLayouts': '/services/data/v44.0/sobjects/Contact/describe/compactLayouts',            'rowTemplate': '/services/data/v44.0/sobjects/Contact/{ID}',            'approvalLayouts': '/services/data/v44.0/sobjects/Contact/describe/approvalLayouts',            ...        }    },    'recentItems': []}```##### DescribeExample```pythonclient.sobjects.Contact.describe()```Returns```{    ...}```Querying SObjects-------------The Salesforce API is great at returning large amounts of data, so the pagination that Salesforce implements for the result of your queries is taken cared of automagically when querying for data.Example```pythonclient.sobjects.query(&quot;SELECT Id, FirstName, LastName FROM Contact WHERE FirstName='Felix'&quot;)```Return```[{    'attributes': {        'type': 'Contact',        'url': '/services/data/v44.0/sobjects/Contact/0031l000007Jia4AAC'    },    'Id': '0031l000007Jia4AAC',    'FirstName': 'Felix',    'LastName': 'Lindstrom'}, ...]``` Bulk----This module implements the Bulk V2 API. Basically, it allows you to think less and do more.Note that the correct permission-set might be needed on the user, see https://success.salesforce.com/issues_view?id=a1p3A000000BMPFQA4##### Bulk InsertExample```pythonclient.bulk.insert('Contact', [    {'LastName': 'Lindstrom', 'Email': 'test@example.com'},    {'LastName': 'Something else', 'Email': 'test@example.com'}])```Returns```python[&lt;SuccessResultRecord record_id=&quot;0031l000007rU5rAAE&quot; success=&quot;True&quot; /&gt;, &lt;SuccessResultRecord record_id=&quot;0031l000007rU5sAAE&quot; success=&quot;True&quot; /&gt;]```##### Bulk InsertExample```pythonclient.bulk.insert('Contact', [    {'LastName': 'Lindstrom', 'Email': 'test@example.com'},    {'LastName': 'Something else', 'Email': 'test@example.com'}])```Returns```python[&lt;SuccessResultRecord record_id=&quot;0031l000007rU5rAAE&quot; success=&quot;True&quot; /&gt;, &lt;SuccessResultRecord record_id=&quot;0031l000007rU5sAAE&quot; success=&quot;True&quot; /&gt;]```##### Bulk UpsertExample```pythonclient.bulk.upsert('Contact', [    {'LastName': 'Lindstrom', 'Email': 'test@example.com', 'MyId__c': 1},    {'LastName': 'Something else', 'Email': 'test@example.com', 'MyId__c': 2}], external_id_field='MyId__c')```Returns```python[&lt;SuccessResultRecord record_id=&quot;0031l000007rU5rAAE&quot; success=&quot;True&quot; /&gt;, &lt;SuccessResultRecord record_id=&quot;0031l000007rU5sAAE&quot; success=&quot;True&quot; /&gt;]```##### Bulk UpdateExample```pythonclient.bulk.update('Contact', [    {'LastName': 'Lindstrom', 'Email': 'test@example.com'},    {'LastName': 'Something else', 'Email': 'test@example.com'}])```Returns```python[&lt;SuccessResultRecord record_id=&quot;0031l000007rU5rAAE&quot; success=&quot;True&quot; /&gt;, &lt;SuccessResultRecord record_id=&quot;0031l000007rU5sAAE&quot; success=&quot;True&quot; /&gt;]```##### Bulk DeleteExample```pythonclient.bulk.delete('Contact', ['0031l000007rU5rAAE', '0031l000007rU5sAAE'])```Returns```python[&lt;SuccessResultRecord record_id=&quot;0031l000007rU5rAAE&quot; success=&quot;True&quot; /&gt;, &lt;SuccessResultRecord record_id=&quot;0031l000007rU5sAAE&quot; success=&quot;True&quot; /&gt;]```##### Failed requestsExample (_Given that the records no longer exists_)```pythonclient.bulk.update('Contact', ['0031l000007rU5rAAE', '0031l000007rU5sAAE'])```Returns```python[&lt;FailResultRecord record_id=&quot;0031l000007rU5rAAE&quot; success=&quot;False&quot; error=&quot;ENTITY_IS_DELETED:entity is deleted:--&quot; /&gt;, &lt;FailResultRecord record_id=&quot;0031l000007rU5sAAE&quot; success=&quot;False&quot; error=&quot;ENTITY_IS_DELETED:entity is deleted:--&quot; /&gt;]```##### Manual managing bulk jobBy using the api above, the library hides the uploading and waiting for the bulk-process to get processed.In some cases you might want to handle this differently. Perhaps you want to upload bunch of records to be inserted and then forget about the process. This can be done by creating a job and managing it by yourself.```pythonbulk_job = client.bulk.create_job(OPERATION.INSERT, 'Contact')bulk_job.upload([    {'LastName': 'Lindstrom', 'Email': 'test@example.com'},    {'LastName': 'Something else', 'Email': 'test@example.com'}])while not bulk_job.is_done():    time.sleep(5)```Tooling-------##### Execute ApexExample```pythonclient.tooling.execute_apex(&quot;System.debug('Test');&quot;)```Return on success```python&lt;SuccessfulApexExecutionResult line=&quot;-1&quot; column=&quot;-1&quot; compiled=&quot;True&quot; success=&quot;True&quot; compile_problem=&quot;None&quot; exception_stack_trace=&quot;None&quot; exception_message=&quot;None&quot; /&gt;```Return on failure```&lt;FailedApexExecutionResult line=&quot;1&quot; column=&quot;13&quot; compiled=&quot;False&quot; success=&quot;False&quot; compile_problem=&quot;Unexpected token '('.&quot; exception_stack_trace=&quot;None&quot; exception_message=&quot;None&quot; /&gt;```Deploying---------Deploying an existing package```pythonfrom salesforce_api.models.deploy import Optionsdeployment = client.deploy.deploy('/path/to/file.zip')deployment.wait()result = deployment.get_status()```Only validating```pythonfrom salesforce_api.models.deploy import Optionsdeployment = client.deploy.deploy('/path/to/file.zip', Options(checkOnly=True))deployment.wait()result = deployment.get_status()```Validating running specific tests```pythonfrom salesforce_api.models.deploy import Optionsdeployment = client.deploy.deploy('/path/to/file.zip', Options(    checkOnly=True,    testLevel='RunSpecifiedTests',    runTests=[        'TesterIntegrationApplicationTest',        'TesterIntegrationProcessTest'    ]))deployment.wait()result = deployment.get_status()```Canceling a deployment as soon as it fails```pythonfrom salesforce_api.models.deploy import Optionsdeployment = client.deploy.deploy('/path/to/file.zip', Options(checkOnly=True))while not deployment.is_done():    if deployment.has_failed():        deployment.cancel()        break```Retrieving----------Example```pythonfrom salesforce_api.models.shared import Type# Decide what you want to retrievetypes = [    Type('ApexTrigger'),    Type('ApexClass', ['MyMainClass', 'AnotherClass'])]# Create retrievement-jobretrievement = client.retrieve.retrieve(types)# Wait for the job to finishretrievement.wait()# Write the resulting zip-archive to a fileopen('retrieve.zip', 'wb').write(retrievement.get_zip_file().read())```Additional features-------------------If for some reason you need to specify how the client communicates with Salesforce, you can create the requests-session yourself and pass it to the client upon creation. This would, for example, allow you proxy your requests:```pythonimport requestsfrom salesforce_api import Salesforcesession = requests.Session()session.proxies.update({'https': 'https://my-proxy.com/'})session.headers.update({'User-Agent': 'My-User-Agent'})client = Salesforce(username='test@example.com',                    password='my-password',                    security_token='password-token',                    session=session)```</longdescription>
</pkgmetadata>