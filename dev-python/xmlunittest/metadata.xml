<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===================Python XML-Unittest===================.. image:: https://travis-ci.org/Exirel/python-xmlunittest.svg?branch=master    :target: https://travis-ci.org/Exirel/python-xmlunittest.. image:: https://coveralls.io/repos/Exirel/python-xmlunittest/badge.svg?branch=master&amp;service=github    :target: https://coveralls.io/github/Exirel/python-xmlunittest?branch=master.. image:: https://gemnasium.com/Exirel/python-xmlunittest.svg    :target: https://gemnasium.com/Exirel/python-xmlunittest.. image:: https://badge.fury.io/py/xmlunittest.svg    :target: http://badge.fury.io/py/xmlunittestAnyone uses XML, for RSS, for configuration files, for... well, we all use XMLfor our own reasons (folk says one can not simply uses XML, but still...).So, your code generates XML, and everything is fine. As you follow bestpractices (if you don’t, I think you should), you have written some goodunit-tests, where you compare code’s result with an expected result. I mean youcompare string with string. One day, something bad might happen.XML is not a simple string, it is a structured document. One can not simplycompare two XML string and expect everything to be fine: attributes’s order canchange unexpectedly, elements can be optional, and no one can explain simplyhow spaces and tabs works in XML formatting.Here comes XML unittest TestCase: if you want to use the built-in unittestpackage (or if it is a requirement), and you are not afraid of using xpathexpression with ``lxml``, this library is made for you.You will be able to test your XML document, and use the power of xpath andvarious schema languages to write tests that matter.Links=====- Distribution: https://pypi.python.org/pypi/xmlunittest- Documentation: http://python-xmlunittest.readthedocs.org/en/latest/- Source: https://github.com/Exirel/python-xmlunittestHow to======- Extends ``xmlunittest.XmlTestCase``- Write your tests, using the function or method that generate XML document- Use ``xmlunittest.XmlTestCase``‘s assertion methods to validate- Keep your tests readableExample:.. code-block:: python    from xmlunittest import XmlTestCase    class CustomTestCase(XmlTestCase):        def test_my_custom_test(self):            # In a real case, data come from a call to your function/method.            data = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;            &lt;root xmlns:ns=&quot;uri&quot;&gt;                &lt;leaf id=&quot;1&quot; active=&quot;on&quot; /&gt;                &lt;leaf id=&quot;2&quot; active=&quot;on&quot; /&gt;                &lt;leaf id=&quot;3&quot; active=&quot;off&quot; /&gt;            &lt;/root&gt;&quot;&quot;&quot;            # Everything starts with `assertXmlDocument`            root = self.assertXmlDocument(data)            # Check namespace            self.assertXmlNamespace(root, 'ns', 'uri')            # Check            self.assertXpathsUniqueValue(root, ('./leaf/@id', ))            self.assertXpathValues(root, './leaf/@active', ('on', 'off'))</longdescription>
</pkgmetadata>