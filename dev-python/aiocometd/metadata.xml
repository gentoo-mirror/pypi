<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aiocometd=========.. image:: https://badge.fury.io/py/aiocometd.svg    :target: https://badge.fury.io/py/aiocometd    :alt: PyPI package.. image:: https://readthedocs.org/projects/aiocometd/badge/?version=latest    :target: http://aiocometd.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://travis-ci.org/robertmrk/aiocometd.svg?branch=develop    :target: https://travis-ci.org/robertmrk/aiocometd    :alt: Build status.. image:: https://coveralls.io/repos/github/robertmrk/aiocometd/badge.svg    :target: https://coveralls.io/github/robertmrk/aiocometd    :alt: Coverage.. image:: https://img.shields.io/badge/License-MIT-yellow.svg    :target: https://opensource.org/licenses/MIT    :alt: MIT licenseaiocometd is a CometD_ client built using asyncio_, implementing the Bayeux_protocol.CometD_ is a scalable WebSocket and HTTP based event and message routing bus.CometD_ makes use of WebSocket and HTTP push technologies known as Comet_ toprovide low-latency data from the server to browsers and client applications.Features--------- Supported transports:   - ``long-polling``   - ``websocket``- Automatic reconnection after network failures- ExtensionsUsage-----.. code-block:: python    import asyncio    from aiocometd import Client    async def chat():        nickname = &quot;John&quot;        # connect to the server        async with Client(&quot;http://example.com/cometd&quot;) as client:                # subscribe to channels to receive chat messages and                # notifications about new members                await client.subscribe(&quot;/chat/demo&quot;)                await client.subscribe(&quot;/members/demo&quot;)                # send initial message                await client.publish(&quot;/chat/demo&quot;, {                    &quot;user&quot;: nickname,                    &quot;membership&quot;: &quot;join&quot;,                    &quot;chat&quot;: nickname + &quot; has joined&quot;                })                # add the user to the chat room's members                await client.publish(&quot;/service/members&quot;, {                    &quot;user&quot;: nickname,                    &quot;room&quot;: &quot;/chat/demo&quot;                })                # listen for incoming messages                async for message in client:                    if message[&quot;channel&quot;] == &quot;/chat/demo&quot;:                        data = message[&quot;data&quot;]                        print(f&quot;{data['user']}: {data['chat']}&quot;)    if __name__ == &quot;__main__&quot;:        loop = asyncio.get_event_loop()        loop.run_until_complete(chat())For more detailed usage examples take a look at the`command line chat example &lt;cli_example_&gt;`_ or for a more complex example witha GUI check out the aiocometd-chat-demo_.Documentation-------------https://aiocometd.readthedocs.io/.. _aiohttp: https://github.com/aio-libs/aiohttp/.. _CometD: https://cometd.org/.. _Comet: https://en.wikipedia.org/wiki/Comet_(programming).. _asyncio: https://docs.python.org/3/library/asyncio.html.. _Bayeux: https://docs.cometd.org/current/reference/#_bayeux.. _ext: https://docs.cometd.org/current/reference/#_bayeux_ext.. _cli_example: https://github.com/robertmrk/aiocometd/blob/develop/examples/chat.py.. _aiocometd-chat-demo: https://github.com/robertmrk/aiocometd-chat-demoChangelog=========0.4.5 (2019-03-14)------------------- Fix connection issues when used with reverse proxy servers with cookie based  sticky sessions0.4.4 (2019-02-26)------------------- Refactor the websocket transport implementation to use a single connection  per client0.4.3 (2019-02-12)------------------- Fix reconnection issue on Salesforce Streaming API0.4.2 (2019-01-15)------------------- Fix the handling of invalid websocket transport responses- Fix the handling of failed subscription responses0.4.1 (2019-01-04)------------------- Add documentation links0.4.0 (2019-01-04)------------------- Add type hints- Add integration tests0.3.1 (2018-06-15)------------------- Fix premature request timeout issue0.3.0 (2018-05-04)------------------- Enable the usage of third party JSON libraries- Fix detection and recovery from network failures0.2.3 (2018-04-24)------------------- Fix RST rendering issues0.2.2 (2018-04-24)------------------- Fix documentation typos- Improve examples- Reorganise documentation0.2.1 (2018-04-21)------------------- Add PyPI badge to README0.2.0 (2018-04-21)------------------- Supported transports:   - ``long-polling``   - ``websocket``- Automatic reconnection after network failures- Extensions</longdescription>
</pkgmetadata>