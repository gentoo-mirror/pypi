<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python JSONPath RW==================https://github.com/kennknowles/python-jsonpath-rw|Build Status| |Test coverage| |PyPi version| |PyPi downloads|This library provides a robust and significantly extended implementationof JSONPath for Python. It is tested with Python 2.6, 2.7, 3.2, 3.3. *(On travis-ci there is a segfault when running the tests with pypy; I don't think the problem lies with this library)*.This library differs from other JSONPath implementations in that it is afull *language* implementation, meaning the JSONPath expressions arefirst class objects, easy to analyze, transform, parse, print, andextend. (You can also execute them :-)Quick Start-----------To install, use pip:::    $ pip install jsonpath-rwThen:.. code:: python    $ python    &gt;&gt;&gt; from jsonpath_rw import jsonpath, parse    # A robust parser, not just a regex. (Makes powerful extensions possible; see below)    &gt;&gt;&gt; jsonpath_expr = parse('foo[*].baz')    # Extracting values is easy    &gt;&gt;&gt; [match.value for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]    [1, 2]    # Matches remember where they came from    &gt;&gt;&gt; [str(match.full_path) for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]    ['foo.[0].baz', 'foo.[1].baz']    # And this can be useful for automatically providing ids for bits of data that do not have them (currently a global switch)    &gt;&gt;&gt; jsonpath.auto_id_field = 'id'    &gt;&gt;&gt; [match.value for match in parse('foo[*].id').find({'foo': [{'id': 'bizzle'}, {'baz': 3}]})]    ['foo.bizzle', 'foo.[1]']    # A handy extension: named operators like `parent`    &gt;&gt;&gt; [match.value for match in parse('a.*.b.`parent`.c').find({'a': {'x': {'b': 1, 'c': 'number one'}, 'y': {'b': 2, 'c': 'number two'}}})]    ['number two', 'number one']    # You can also build expressions directly quite easily     &gt;&gt;&gt; from jsonpath_rw.jsonpath import Fields    &gt;&gt;&gt; from jsonpath_rw.jsonpath import Slice    &gt;&gt;&gt; jsonpath_expr_direct = Fields('foo').child(Slice('*')).child(Fields('baz'))  # This is equivalentJSONPath Syntax---------------The JSONPath syntax supported by this library includes some additionalfeatures and omits some problematic features (those that make itunportable). In particular, some new operators such as ``|`` and``where`` are available, and parentheses are used for grouping not forcallbacks into Python, since with these changes the language is nottrivially associative. Also, fields may be quoted whether or not theyare contained in brackets.Atomic expressions:+-----------------------+---------------------------------------------------------------------------------------------+| Syntax                | Meaning                                                                                     |+=======================+=============================================================================================+| ``$``                 | The root object                                                                             |+-----------------------+---------------------------------------------------------------------------------------------+| ```this```            | The &quot;current&quot; object.                                                                       |+-----------------------+---------------------------------------------------------------------------------------------+| ```foo```             | More generally, this syntax allows &quot;named operators&quot; to extend JSONPath is arbitrary ways   |+-----------------------+---------------------------------------------------------------------------------------------+| *field*               | Specified field(s), described below                                                         |+-----------------------+---------------------------------------------------------------------------------------------+| ``[`` *field* ``]``   | Same as *field*                                                                             |+-----------------------+---------------------------------------------------------------------------------------------+| ``[`` *idx* ``]``     | Array access, described below (this is always unambiguous with field access)                |+-----------------------+---------------------------------------------------------------------------------------------+Jsonpath operators:+-------------------------------------+------------------------------------------------------------------------------------+| Syntax                              | Meaning                                                                            |+=====================================+====================================================================================+| *jsonpath1* ``.`` *jsonpath2*       | All nodes matched by *jsonpath2* starting at any node matching *jsonpath1*         |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath* ``[`` *whatever* ``]``   | Same as *jsonpath*\ ``.``\ *whatever*                                              |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath1* ``..`` *jsonpath2*      | All nodes matched by *jsonpath2* that descend from any node matching *jsonpath1*   |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath1* ``where`` *jsonpath2*   | Any nodes matching *jsonpath1* with a child matching *jsonpath2*                   |+-------------------------------------+------------------------------------------------------------------------------------+| *jsonpath1* ``|`` *jsonpath2*       | Any nodes matching the union of *jsonpath1* and *jsonpath2*                        |+-------------------------------------+------------------------------------------------------------------------------------+Field specifiers ( *field* ):+-------------------------+-------------------------------------------------------------------------------------+| Syntax                  | Meaning                                                                             |+=========================+=====================================================================================+| ``fieldname``           | the field ``fieldname`` (from the &quot;current&quot; object)                                 |+-------------------------+-------------------------------------------------------------------------------------+| ``&quot;fieldname&quot;``         | same as above, for allowing special characters in the fieldname                     |+-------------------------+-------------------------------------------------------------------------------------+| ``'fieldname'``         | ditto                                                                               |+-------------------------+-------------------------------------------------------------------------------------+| ``*``                   | any field                                                                           |+-------------------------+-------------------------------------------------------------------------------------+| *field* ``,`` *field*   | either of the named fields (you can always build equivalent jsonpath using ``|``)   |+-------------------------+-------------------------------------------------------------------------------------+Array specifiers ( *idx* ):+-----------------------------------------+---------------------------------------------------------------------------------------+| Syntax                                  | Meaning                                                                               |+=========================================+=======================================================================================+| ``[``\ *n*\ ``]``                       | array index (may be comma-separated list)                                             |+-----------------------------------------+---------------------------------------------------------------------------------------+| ``[``\ *start*\ ``?:``\ *end*\ ``?]``   | array slicing (note that *step* is unimplemented only due to lack of need thus far)   |+-----------------------------------------+---------------------------------------------------------------------------------------+| ``[*]``                                 | any array index                                                                       |+-----------------------------------------+---------------------------------------------------------------------------------------+Programmatic JSONPath---------------------If you are programming in Python and would like a more robust way tocreate JSONPath expressions that does not depend on a parser, it is veryeasy to do so directly, and here are some examples:-  ``Root()``-  ``Slice(start=0, end=None, step=None)``-  ``Fields('foo', 'bar')``-  ``Index(42)``-  ``Child(Fields('foo'), Index(42))``-  ``Where(Slice(), Fields('subfield'))``-  ``Descendants(jsonpath, jsonpath)``Extensions-----------  *Path data*: The result of ``JsonPath.find`` provide detailed context   and path data so it is easy to traverse to parent objects, print full   paths to pieces of data, and generate automatic ids.-  *Automatic Ids*: If you set ``jsonpath_rw.auto_id_field`` to a value   other than None, then for any piece of data missing that field, it   will be replaced by the JSONPath to it, giving automatic unique ids   to any piece of data. These ids will take into account any ids   already present as well.-  *Named operators*: Instead of using ``@`` to reference the currently   object, this library uses ```this```. In general, any string   contained in backquotes can be made to be a new operator, currently   by extending the library.More to explore---------------There are way too many jsonpath implementations out there to discuss.Some are robust, some are toy projects that still work fine, some areexercises. There will undoubtedly be many more. This one is made for usein released, maintained code, and in particular for programmatic accessto the abstract syntax and extension. But JSONPath at its simplest justisn't that complicated, so you can probably use any of themsuccessfully. Why not this one?The original proposal, as far as I know:-  `JSONPath - XPath for   JSON &lt;http://goessner.net/articles/JSONPath/&gt;`__ by Stefan Goessner.Special note about PLY and docstrings-------------------------------------The main parsing toolkit underlying this library,`PLY &lt;https://github.com/dabeaz/ply&gt;`__, does not work with docstringsremoved. For example, ``PYTHONOPTIMIZE=2`` and ``python -OO`` will bothcause a failure.Contributors------------This package is authored and maintained by:-  `Kenn Knowles &lt;https://github.com/kennknowles&gt;`__   (`@kennknowles &lt;https://twitter.com/KennKnowles&gt;`__)   with the help of patches submitted by `these contributors &lt;https://github.com/kennknowles/python-jsonpath-rw/graphs/contributors&gt;`__.Copyright and License---------------------Copyright 2013- Kenneth KnowlesLicensed under the Apache License, Version 2.0 (the &quot;License&quot;); you maynot use this file except in compliance with the License. You may obtaina copy of the License at::    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License... |Build Status| image:: https://travis-ci.org/kennknowles/python-jsonpath-rw.png?branch=master   :target: https://travis-ci.org/kennknowles/python-jsonpath-rw.. |Test coverage| image:: https://coveralls.io/repos/kennknowles/python-jsonpath-rw/badge.png?branch=master   :target: https://coveralls.io/r/kennknowles/python-jsonpath-rw.. |PyPi version| image:: https://pypip.in/v/jsonpath-rw/badge.png   :target: https://pypi.python.org/pypi/jsonpath-rw.. |PyPi downloads| image:: https://pypip.in/d/jsonpath-rw/badge.png   :target: https://pypi.python.org/pypi/jsonpath-rw</longdescription>
</pkgmetadata>