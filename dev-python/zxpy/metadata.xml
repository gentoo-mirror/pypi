<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># zxpy[![Downloads](https://pepy.tech/badge/zxpy)](https://pepy.tech/project/zxpy)[![Code style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![CI Status](https://github.com/tusharsadhwani/zxpy/actions/workflows/tox.yml/badge.svg)](https://github.com/tusharsadhwani/zxpy/actions/workflows/tox.yml)Shell scripts made simple üêözxpy lets you seamlessly write shell commands inside Python code, to create readable and maintainable shell scripts.Inspired by Google's [zx](https://github.com/google/zx), but made much simpler and more accessible using Python.## RationaleBash is cool, and it's extremely powerful when paired with linux coreutils and pipes. But apart from that, it's a whole another language to learn, and has a (comparatively) unintuitive syntax for things like conditionals and loops.`zxpy` aims to supercharge bash by allowing you to write scripts in Python, but with native support for bash commands and pipes.Let's use it to find all `TODO`s in one of my other projects, and format them into a table:```python#! /usr/bin/env zxpytodo_comments = ~&quot;git grep -n TODO&quot;for todo in todo_comments.splitlines():    filename, lineno, code = todo.split(':', 2)    *_, comment = code.partition('TODO')    print(f&quot;{filename:40} on line {lineno:4}: {comment.lstrip(': ')}&quot;)```Running this, we get:```console$ ./todo_check.pyREADME.md                                on line 154 : move this content somewhere more sensible.instachat/lib/models/message.dart        on line 7   : rename to uuidinstachat/lib/models/update.dart         on line 13  : make intinstachat/lib/services/chat_service.dart on line 211 : error handlingserver/api/api.go                        on line 94  : move these to /chat/@:addressserver/api/user.go                       on line 80  : check for errors instead of relying on zero value```Writing something like this purely in bash or in Python would be much harder than this. Being able to use linux utilities seamlessly with a readable, general purpose language is what makes this a really powerful tool.### A larger, practical exampleYou can find a comparison between a practical-ish script written in bash andzxpy in [EXAMPLE.md](./EXAMPLE.md)## Installation &lt;a href=&quot;https://pypi.org/project/zxpy&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/pypi-zxpy-blue?style=flat&quot;&gt;&lt;/a&gt;```consolepip install zxpy```### pipxIf you have `pipx` installed, you can try out zxpy without installing it, by running:```consolepipx run zxpy```## Basic ExamplesMake a file `script.py` (The name and extension can be anything):```python#! /usr/bin/env zxpy~'echo Hello world!'file_count = ~'ls -1 | wc -l'print(&quot;file count is:&quot;, file_count)```And then run it:```console$ chmod +x ./script.py$ ./script.pyHello world!file count is: 3```&gt; Run `&gt;&gt;&gt; help('zx')` in Python REPL to find out more ways to use zxpy.A slightly more involved example: [run_all_tests.py](./examples/run_all_tests.py)```python#! /usr/bin/env zxpytest_files = (~&quot;find -name '*_test\.py'&quot;).splitlines()for filename in test_files:    try:        print(f'Running {filename:.&lt;50}', end='')        output = ~f'python {filename}'  # variables in your shell commands :D        assert output == ''        print('Test passed!')    except:        print(f'Test failed.')```Output:```bash$ ./run_all_tests.pyRunning ./tests/python_version_test.py....................Test failed.Running ./tests/platform_test.py..........................Test passed!Running ./tests/imports_test.py...........................Test passed!```More examples are in [EXAMPLE.md](./EXAMPLE.md), and in the [examples folder](./examples).## `stderr` and return codesTo get `stderr` and return code information out of the shell command, there is analternative way of invoking the shell.To use it, just use **3 variables** on theleft side of your `~'...'` shell string:```pythonstdout, stderr, return_code = ~'echo hi'print(stdout)       # hiprint(return_code)  # 0```More examples are in the [examples folder](./examples).## CLI ArgumentsWhen writing a shell script, you often want to pass CLI arguments to it.Like so:```console$ cat ./foo.shecho arg is: $1$ ./foo.sh 123arg is: 123```To do the same in `zxpy`, pass the script arguments after a `--` in the `zxpy` CLI command.```python#!/usr/bin/env zxpyimport sysprint(&quot;Argv is:&quot;, sys.argv)~&quot;echo output: $1 $2 $3&quot;``````console$ ./test.pyArgv is: ['/bin/sh']output:$ ./test.py -- abc defArgv is: ['/bin/sh', 'abc', 'def']output: abc def```Both `$1` and `sys.argv[1]` will do the same thing.## QuotingTake this shell command:```console$ uname -aLinux pop-os 5.11.0 [...] x86_64 GNU/Linux```Now take this piece of code:```pycon&gt;&gt;&gt; cmd = 'uname -a'&gt;&gt;&gt; ~f'{cmd}'/bin/sh: 1: uname -a: not found```Why does this not work?This is because `uname -a` was **quoted** into `'uname -a'`. All values passedinside f-strings are automatically quoted to avoid [shell injection][1].To prevent quoting, the `:raw` format_spec can be used:```pycon&gt;&gt;&gt; cmd = 'uname -a'&gt;&gt;&gt; ~f'{cmd:raw}'Linux pop-os 5.11.0 [...] x86_64 GNU/Linux```This _disables_ quoting, and the command is run as-is as provided in the string.&gt; Note that this shouldn't be used with external data, or this _will_ expose you&gt; to [shell injection][1].## Interactive mode```pycon$ zxpyzxpy shellPython 3.8.5 (default, Jan 27 2021, 15:41:15)[GCC 9.3.0]&gt;&gt;&gt; ~&quot;ls | grep '\.py'&quot;__main__.pysetup.pyzx.py&gt;&gt;&gt;```&gt; Also works with `path/to/python -m zx`It can also be used to start a zxpy session in an already running REPL.Simply do:```pycon&gt;&gt;&gt; import zx; zx.install()```and zxpy should be enabled in the existing session.## Development/TestingTo install from source, clone the repo, and do the following:```console$ source ./venv/bin/activate  # Always use a virtualenv!$ pip install -r requirements-dev.txtProcessing ./zxpy[...]Successfully installed zxpy-1.X.X$ pytest  # runs tests```[1]: https://owasp.org/www-community/attacks/Command_Injection</longdescription>
</pkgmetadata>