<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://resensys.net:8443/static/images/resensys-logo-hollow.bmp&quot; alt=&quot;resensys&quot; width=&quot;300&quot;/&gt;# SenStream (v 1.4.14)**SenStream** is a python package for managing and interacting with Resensys SenSpot devices. Streamline data flows from SenSpot technologies and high-level data pipelines with this high-level software development kit.At a high level, the SenStream project is designed to bridge the gap between the structural/civil engineer and the software developer for **structural health monitoring** and other scientific applications. This package comes equipped with the following features for SenSpot management, custom time streams, and state-of-the art time series machine learning tools:#### API Functionality*   Extract and configure SenSpot parameters.*   Pull time streams from SenSpots from the cloud&lt;br&gt;&lt;img src=&quot;https://www.resensys.com/images/load-rating-app-note.png&quot; alt=&quot;resensys_arch&quot; width=&quot;700&quot;/&gt;## Installation#### RequirementsWe recommend that you have a version of python &gt;= 3.7 installed on your machine before proceeding. If the below `pip` command does not automatically install `pandas` and `numpy`, you should make sure that these libraries have been installed before proceeding.#### Install using pipTo start using SenStream install using pip:    pip install senstream`pip` is the de facto and recommended package-management system written in Python and is used to install and manage software packages. It connects to an online repository of public packages, called the [Python Package Index](https://pypi.org/).Note the `pip` refers to the Python 3 package manager. In environment where Python 2 is also available the correct command may be `pip3`.## Getting StartedThe following demonstrates what you need to get started with a connection to the Resensys cloud and check that you can extract data.```# import the necessary libraries and modulesimport numpy as npimport pandas as pdfrom senstream.resensys import Resensys,Sensorsfrom senstream.senspot import SenSpot# for users with SenScope license, specify username and passwordusername,password = &quot;test_user&quot;,&quot;user_password&quot; # create a client connection to resensys.netclient = Resensys(username,password)# create Sensors object to check all sensors in present accountsensors = Sensors(client)# get list of all devices in the client account as pandas dataframesensor_df = sensors.getSensors(format=&quot;dataframe&quot;)# print list of all the sensors in the accountprint(sensor_df['DID'].tolist())```### View all active site registered for current user:```sensors.getSites(format=&quot;dataframe&quot;)```### View current routing parameters for SenSpots:```sensors.getRouting(format=&quot;dataframe&quot;).head(5)  # display first five records```## SenSpot ObjectCreate an instance of a SenSpot object by referencing the previous client connection and specifying the device ID of the SenSpot from the user's sensor list.```senspot = SenSpot(client,&quot;15-03-27-74&quot;)```### Get the name assigned to the SenSpot:```senspot.getName()```Returns **string**.### Get the site ID assignment for the SenSpot:```senspot.getSite()```Returns **string** of format &quot;xx-xx&quot; with site ID.### Get the local address assigned to the SenSpot (useful for wireless routing):```senspot.getLocAddr()```Returns **int**.### View all available quantities associated with SenSpot:```senspot.getQuantities()```Returns **[string]**### Check current calibration coefficients for SenSpot:```senspot.getCoefficients()```Returns **dict**### Get general device summary of SenSpot:```senspot.getDeviceInfo()```Returns **dict**## Extract Time Series from SenSpot* **df_name**: quantity being pushed by the SenSpot (complete list given by calling **getQuantities()** method)* **time**: options = &quot;1hour&quot;,&quot;2hour&quot;,&quot;6hour&quot;,&quot;12hour&quot;,&quot;24hour&quot;,&quot;48hour&quot;,&quot;1week&quot;,&quot;2week&quot;,&quot;4week&quot;,&quot;6month&quot;,&quot;12month&quot;,&quot;2year&quot;,&quot;custom&quot;If you choose a custom time range, then you must specify additional parameters:* **t_s**: Start Time (UTC) (e.g. &quot;2020-09-21 17:00:00&quot;)* **t_e**: End Time (UTC) (e.g. &quot;2020-09-21 17:00:00&quot;)### Example to pull previous two weeks of data for SenSpot quantities &quot;Strain-xx-high_rate&quot; and &quot;Internal Temperature&quot;```ss_strain = senspot.timeStream(&quot;Strain-xx-high_rate&quot;,time=[&quot;2week&quot;])``````ss_temperature = senspot.timeStream(&quot;Internal Temperature&quot;,time=[&quot;2week&quot;])```Returns **pandas.DataFrame** object.## SupportFor any question on the usage of PROJECT please use the [Resensys Community Portal](). If you found a problem with the software, please [create an issue](https://github.com/resensys/PROJECT/issues) on GitHub. If you are a Greenbone customer, you may alternatively or additionally forward your issue to the Resensys Support Portal.## MaintainerThis project is maintained by [Tom Wade](https://www.linkedin.com/in/thomas-shane-wade/) at Resensys, LLC.## ContributingYour contributions are highly appreciated. Please [create a pull request](https://github.com/greenbone/PROJECT/pulls) on GitHub. Bigger changes need to be discussed with the development team via the [issues section at GitHub](https://github.com/greenbone/PROJECT/issues) first.State here if contributions are welcome. State the requirements a contribution should meet to get merged.Details about development, like creating a dev environment or running tests, also belong here, for example:For development, you should use [pipenv](https://pipenv.readthedocs.io/en/latest/) to keep your Python packages separated in different environments. First install pipenv via pip    pip install --user pipenvAfterwards run    pipenv install --devin the checkout directory of PROJECT (the directory containing the Pipfile) to install all dependencies including the packages only required for development.If there are more specific suggestions for development or guidelines for contributions, consider sending an email to thomas.wade@resensys.com.## LicenseCopyright (C) 2023 [Resensys, LLC.](https://www.resensys.com/index.html)Licensed under the [GNU General Public License v3.0 or later](LICENSE).</longdescription>
</pkgmetadata>