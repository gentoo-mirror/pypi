<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h2 align=&quot;center&quot;&gt;serverless-builder&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/serverless-builder/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/serverless-builder&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/serverless-builder/&quot;&gt;&lt;img alt=&quot;Python&quot; src=&quot;https://img.shields.io/pypi/pyversions/serverless-builder.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/epsylabs/serverless-builder/blob/master/LICENSE&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/pypi/l/serverless-builder.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;Python interface to easily generate [serverless.yml](https://www.serverless.com/) file.To read more about features, visit [ðŸ“œ our documentation](https://epsylabs.github.io/serverless-builder/).## Installation```shellpip install serverless-builder```## Features* [plugin management](https://epsylabs.github.io/serverless-builder/plugins/) with autoconfiguration* [function factory](https://epsylabs.github.io/serverless-builder/usage/#lambda-functions) with some best practice hints* autoconfiguration of some provider specific features like AWS X-Ray* easy resource manipulation with [troposphere lib](https://github.com/cloudtools/troposphere) (but if you want you can use old good dict)* easier IAM management with predefined permission sets* built-in support for any serverless attributes* integration with [aws lambda powertools](https://awslabs.github.io/aws-lambda-powertools-python/latest/)## Example of use```pythonfrom serverless.aws.functions.event_bridge import RetryPolicyfrom serverless.aws.functions.http import HTTPFunctionfrom serverless import Servicefrom serverless.provider import AWSProviderfrom serverless.aws.features import XRayfrom serverless.aws.iam.dynamodb import DynamoDBReaderfrom serverless.plugins import ComposedVars, PythonRequirements, Prunefrom troposphere.dynamodb import Table, AttributeDefinition, KeySchemaservice = Service(    &quot;service-name&quot;,    &quot;some dummy service&quot;,    AWSProvider())service.plugins.add(ComposedVars())service.plugins.add(Prune())service.plugins.add(PythonRequirements())table = Table(    &quot;TestTable&quot;,    BillingMode=&quot;PAY_PER_REQUEST&quot;,    AttributeDefinitions=[        AttributeDefinition(AttributeName=&quot;name&quot;, AttributeType=&quot;S&quot;)    ],    KeySchema=[KeySchema(AttributeName=&quot;name&quot;, KeyType=&quot;HASH&quot;)])service.enable(XRay())service.provider.iam.apply(DynamoDBReader(table))service.builder.function.generic(&quot;test&quot;, &quot;description&quot;)service.builder.function.http(&quot;test&quot;, &quot;description&quot;, &quot;/&quot;, HTTPFunction.POST)# Multiple events with different paths and/or methods can be set up for the same handler# This will add the same handler to all of these: POST /, POST /alias, PUT /, PUT /aliasservice.builder.function.http(&quot;test&quot;, &quot;description&quot;, [&quot;/&quot;, &quot;/alias&quot;], [&quot;POST&quot;, &quot;PUT&quot;], handler=&quot;shared.handler&quot;)# Context with pre-defined setupwith service.preset(    layers=[{&quot;Ref&quot;: &quot;PythonRequirementsLambdaLayer&quot;}],    handler=&quot;test.handlers.custom_handler.handle&quot;) as p:    p.http_get(&quot;test-list&quot;, &quot;List all tests&quot;, &quot;/&quot;)    p.http_get(&quot;test-get&quot;, &quot;Get one test&quot;, &quot;/{test_id}&quot;)event_bridge_function = service.builder.function.event_bridge(    &quot;event_bridge_function&quot;,    &quot;sample event bridge function&quot;,    &quot;epsy&quot;,    {&quot;source&quot;: [&quot;saas.external&quot;]},)event_bridge_function.use_delivery_dlq(RetryPolicy(5, 300))event_bridge_function.use_async_dlq()service.resources.add(table)service.render()```# New version release process- Update the version in pyproject.toml     ```    # increase the version number as per SemVer standards    version = &quot;2.13.17&quot;    ```- Once ready to publish, create a new [github release](https://github.com/epsylabs/serverless-builder/releases)    - its a good practice to match the tag with the version number as in pyproject.toml    - Select `set as latest release` checkbox    - Click `Publish Release` button.- Once published, it will trigger the `release` gh wf and publish the latest package to PyPi.</longdescription>
</pkgmetadata>