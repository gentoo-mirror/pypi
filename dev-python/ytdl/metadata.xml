<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ytdlYet another CLI based YouTube downloader tool for linux.[![PyPI version](https://badge.fury.io/py/ytdl.svg)](https://badge.fury.io/py/ytdl)[![Build Status](https://travis-ci.org/ndaidong/ytdl.svg?branch=main)](https://travis-ci.org/ndaidong/ytdl)[![Coverage Status](https://coveralls.io/repos/github/ndaidong/ytdl/badge.svg?branch=main)](https://coveralls.io/github/ndaidong/ytdl?branch=main)### Features:- Download only neccessary stream, not the whole video- Download all videos or audios belong to a playlist- Download with custom name and boundingJust gather your favourite videos into a playlist, then let's `ytdl` download them overnight.## Prerequisites- Fedora 32+, Ubuntu 20+, Debian 10+- [python](https://www.python.org/) 3.6.5 or newer- [ffmpeg](https://ffmpeg.org/) 4.0 or newer- [YouTube API key](https://developers.google.com/youtube/registering_an_application)## InstallRecommend to use [pipx](https://pipxproject.github.io/pipx/):```bashpipx install ytdlytdl config```However, `pip` may work too:```bashpip install ytdl# don'tsudo pip install ytdl```Build from source requires [poetry](https://python-poetry.org/):```bashgit clone git@github.com:ndaidong/ytdl.git &amp;&amp; cd ytdlpoetry install# use raw scriptpoetry run python main.py infopoetry run python main.py [command] [arguments]# build wheel to `./dist` folderpoetry build# then install itpipx install dist/ytdl-VERSION-py3-none-any.whl# test itytdl info```## CLIs### Basic commands| Command | Description | Shortcut ||--|--|--|| `ytdl config KEY VALUE` | Set config value | `c` || `ytdl config KEY` | Show config property || `ytdl playlist PLAYLIST_URL` | Get playlist index | `p` || `ytdl video VIDEO_URL` | Download a video | `v` || `ytdl audio VIDEO_URL` | Download audio only | `a` |Almost cases, `VIDEO_URL` and `PLAYLIST_URL` can be replaced with video ID or playlist ID.### Advanced usage#### ConfigThere are 2 properties to configure: `api_key` and `store_dir`.At the first time, `api_key` is empty and you have to set it before using other features.```bash# set new `api_key`ytdl config api_key YOUR_OWN_YOUTUBE_API_KEY# change `store_dir` to new pathytdl config store_dir /storage/downloads/youtube# get the current value of `api_key`ytdl config api_key# show allytdl config```By default, `store_dir` is being set to `/home/{YOUR_USER_NAME}/ytdl_files`, you should change it to more appropriate place.#### PlaylistNote that this command does not download actual video/audio, but a list of indexed items.```bash# get playlist metadata into `{store_dir}/{title}.json`# this file contains a list of videos with their ID and title to download laterytdl playlist https://www.youtube.com/playlist?list=PLAYLIST_ID# get playlist metadata into `{store_dir}/my_custom_playlist_name.json`ytdl playlist https://www.youtube.com/playlist?list=PLAYLIST_ID my_custom_playlist_name```For example if we download the playlist [Linux Tips and Tricks](https://www.youtube.com/playlist?list=PLSmXPSsgkZLsw-vEwve1O7w-Row9TIVqi)The indexed file looks like below:![](https://imgshare.io/images/2020/08/31/playlist-indexed.png)Then we will have some powerful ways to download the videos in this list with `ytdl video` or `ytdl audio`.#### VideoDownload a single video file.```bash# download a video file to `{store_dir}/video/{VIDEO_TITLE}.mp4`ytdl video https://www.youtube.com/watch?v=VIDEO_ID# custom nameytdl video https://www.youtube.com/watch?v=VIDEO_ID my_custom_video_name```To download multi items from indexed playlist, please refer the following arguments:- `--index_file`: path to playlist index file (required)- `--since`: video ID of the video where you want to start downloading from- `--limit`: number of items to download, count from `since` or the begining of the list- `--prefix_name`: to auto naming downloaded file- `--prefix_num`: to auto naming downloaded fileExamples:```bash# download all videos from saved playlist index file above# these video files will be stored in `{store_dir}/video`ytdl video --index_file &quot;/path/to/Linux Tips and Tricks.json&quot;# download 5 videos from saved playlist index file above, since first itemytdl video --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --limit 5# download 5 videos from saved playlist index file above, with prefix nameytdl video --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --limit 5 --prefix_name &quot;Linux Tutorial&quot;# downloaded videos should look like &quot;Linux Tutorial - 1.mp4&quot;, &quot;Linux Tutorial - 2.mp4&quot; and so on# prefix_name will be useful when you want to put these files into an already created list for your different purpose# download 5 videos from saved playlist index file above, with prefix name and prefix numberytdl video --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --limit 5 --prefix_name &quot;Linux Tutorial&quot; --prefix_num 25# this will be useful for the playlists those are splited to multi parts# in this case, your serie &quot;Linux Tutorial&quot; had already 24 items before, now count from 25 onwards# downloaded videos should look like &quot;Linux Tutorial - 25.mp4&quot;, &quot;Linux Tutorial - 26.mp4&quot; and so on# similar to above command, but start from given itemytdl video --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --since VIDEO_ID --limit 5 --prefix_name &quot;Linux Tutorial&quot; --prefix_num 25```While downloading video, the stream with highest `resolution` will be selected.#### AudioThis is similar to `ytdl video`, but only download audio file.While downloading, the stream with highest `abr` (average bitrate) will be selected.```bash# download a audio file to `{store_dir}/audio/{VIDEO_TITLE}.mp3`ytdl audio https://www.youtube.com/watch?v=VIDEO_ID# custom nameytdl audio https://www.youtube.com/watch?v=VIDEO_ID my_custom_audio_name```To download multi items from indexed playlist, please refer the following arguments:- `--index_file`: path to playlist index file (required)- `--since`: video ID of the video where you want to start downloading from- `--limit`: number of items to download, count from `since` or the begining of the list- `--prefix_name`: to auto naming downloaded file- `--prefix_num`: to auto naming downloaded fileExamples:```bash# download all audios from saved playlist index file above# these audio files will be stored in `{store_dir}/audio`ytdl audio --index_file &quot;/path/to/Linux Tips and Tricks.json&quot;# download 5 audios from saved playlist index file above, since first itemytdl audio --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --limit 5# download 5 audios from saved playlist index file above, with prefix nameytdl audio --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --limit 5 --prefix_name &quot;Linux Tutorial&quot;# downloaded audios should look like &quot;Linux Tutorial - 1.mp3&quot;, &quot;Linux Tutorial - 2.mp3&quot; and so on# prefix_name will be useful when you want to put these files into an already created list for your different purpose# download 5 audios from saved playlist index file above, with prefix name and prefix numberytdl audio --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --limit 5 --prefix_name &quot;Linux Tutorial&quot; --prefix_num 25# this will be useful for the playlists those are splited to multi parts# in this case, your serie &quot;Linux Tutorial&quot; had already 24 items before, now count from 25 onwards# downloaded audios should look like &quot;Linux Tutorial - 25.mp3&quot;, &quot;Linux Tutorial - 26.mp3&quot; and so on# similar to above command, but start from given itemytdl audio --index_file &quot;/path/to/Linux Tips and Tricks.json&quot; --since VIDEO_ID --limit 5 --prefix_name &quot;Linux Tutorial&quot; --prefix_num 25```Downloaded stream will be converted to .mp3 with `ffmpeg`.## DependenciesThis lib was built on top of the following packages:| Dependency | License ||--|--|| [pytube3](https://github.com/get-pytube/pytube3) | MIT || [python-youtube](https://github.com/sns-sdks/python-youtube) | MIT || [python-fire](https://github.com/google/python-fire) | Apache License v2 |## Test```bashgit clone git@github.com:ndaidong/ytdl.git &amp;&amp; cd ytdlpoetry installYOUTUBE_API_KEY=your_own_key ./run_test.sh```# LicenseThe MIT License (MIT)</longdescription>
</pkgmetadata>