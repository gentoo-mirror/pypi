<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># alohomoraalohomora is a CLI utility, written in Python, that helps SAML-federated usersget API keys for their AWS accounts.  It works with single-factor IdPs ingeneral, and also supports multi-factor via [Duo Security](https://duo.com).We'd love to support other MFA options, but that's all we have access to rightnow.  Send us a PR with yours!## InstallationLike all Python apps, we recommend you install this into a virtual environment,but the choice is yours.    pip install alohomora### Optional WebAuthN support installationAlohomora has optional Fido2/WebAuthN support which can be installed alongside alohomora using pip:    pip install alohomora[fido2]Please note that this may require a few OS level packages to be installed due to the transitivedependency on the cryptography package. See the [installation guide](https://cryptography.io/en/latest/installation/)for instructions specific to your environment.## Basic ConfigurationYou can create a ~/.alohomora file to configure the tool.  It will storeinfomation like the URL of your SAML Identity Provider that shouldn't changevery often.  Alternately, you can specify most config options on the commandline as well.The file looks like a standard Python config file:```ini[default]idp-url = https://sso.example.com/idp/profile/SAML2/Unsolicited/SSO?providerId=urn:amazon:webservicesusername = myuser```A CLI-based version of this would be```$ alohomora --username myuser --idp-url https://sso.example.com/idp/profile/SAML2/Unsolicited/SSO?providerId=urn:amazon:webservices```## UsageYou can call `alohomora` directly from the command line.```$ alohomoraPassword:Please select an authentication method[ 0 ] Duo Push[ 1 ] Phone Call[ 2 ] PasscodeID: 0Pushed a login request to your device...Please choose the role you would like to assume:[ 0 ] arn:aws:iam::123456789012:role/a-fine-role[ 1 ] arn:aws:iam::345678901234:role/a-particularly-fine-roleSelection:  1----------------------------------------------------------------Your new access key pair has been stored in the AWS configuration file /Users/myuser/.aws/credentials under the saml profile.To use this credential, call the AWS CLI with the --profile option (e.g. aws --profile saml ec2 describe-instances).----------------------------------------------------------------```If you have multiple devices associated with your account, you will be asked toselect the device you want to use.## Advanced Configuration### MFA Configuration for DuoIf you have multiple Duo devices, you can add `auth-device` to yourconfiguration to select which device to use. If you aren't sure whatthe names of your devices are, run `alohomora` once without an auth deviceselected to have it display a prompt with a list of device names.The auth device parameters is case-insensitive.In order to select a default Duo MFA method, you can add `auth-method` to your configuration.  A nonexhaustive list of supported values for Duo are:- push- call- passcode```$ alohomora --auth-method call``````ini[default]idp-url = https://sso.example.com/idp/profile/SAML2/Unsolicited/SSO?providerId=urn:amazon:webservicesauth-method = push```### Alohomora Config ProfilesYou can create multiple configuration profiles in the ~/.alohomora file, for example:```ini[default]idp-url = https://sso.example.com/idp/profile/SAML2/Unsolicited/SSO?providerId=urn:amazon:webservicesauth-method = pushrole-name = a-fine-role[particularly-fine]idp-url = https://sso.example.com/idp/profile/SAML2/Unsolicited/SSO?providerId=urn:amazon:webservicesauth-method = pushrole-name = a-particularly-fine-role```If you specify nothing else, alohomora will use the `default` profile.  To use the `particularly-fine` configuration, simply run ```$ alohomora --alohomora-profile particularly-fine```### AWS Config ProfilesBy default, alohomora saves the credentials under the `saml` profile.  If you wish to save the generated IAM keys under a different AWS profile name, you can specify the `aws-profile` option.  Via the CLI this looks like```alohomora --aws-profile myprofile```Or in a config file:```ini[default]...aws-profile = myprofile```### Account NamesIf you have many AWS accounts, keeping track of account IDs can be hard.  We've added the ability to drop a map of account IDs to friendly names in the configfile, that should help solve this problem.  To make use of this, add a new`[account_map]` section to the config like so:```ini[default]...[account_map]123456789012 = Dev Account210987654321 = Prod Account```This will modify the roles that get printed out, like so:```Please choose the role you would like to assume:[ 0 ] Dev Account: sso-admins - arn:aws:iam::123456789012:role/sso-admins[ 1 ] Prod Account: sso-finance-readers - arn:aws:iam::210987654321:role/sso-finance-readers```Alohomora doesn't support feeding these in via the command line, because thatwould make your command WAY too long.### Automatic Role SelectionIf you have many AWS accounts/roles and wish to have alohomora always use a specific account and role, this can be done by specifying them in the configuration section like so:```ini[default]idp-url = https://sso.example.com/idp/profile/SAML2/Unsolicited/SSO?providerId=urn:amazon:webservicesauth-method = pushaccount = 112233445566role-name = sso-admins```### AWS Partition SelectionIf you run separate IdPs for your different commercial and GovCloud accounts, alohomora should &quot;just work&quot;: that is, the role lists will all update correctly,the assertions will be formatted properly, etc.  We autodiscover the partitionyou're working in based off the roles that are handed back to us.However, if you're using the same IdP to provide access to both commercial andGovCloud, **and** you're asking Alohomora to do automatic role selection, it'shard for us to tell which partition you want to use.  You may need to manuallyspecify that by adding an `aws-partition` option as below.```ini[default]...aws-partition = aws[awsgov]...aws-partition = aws-us-gov```Or, via the CLI:```$ alohomora --aws-partition aws-us-gov```## DebuggingLogs are written to `~/.alohomora.log` by default.## Future Features  * Respect the default factor option on the Duo account (push vs. text vs. call)## Note for Windows UsersThis does **NOT** work in Cygwin or Cygwin based shells in Windows (such as Gitbash).  Use cmd instead.## Contributors (Alphabetical)* @abrooks* @bcaselden-viasat* @gcochard* @gdw2* @marksidell* @Serilleous* @skemper* @wkronmiller* @xrl## ThanksThis application was written with heavy assistance from an [AWS Security Blog post](http://blogs.aws.amazon.com/security/post/TxU0AVUS9J00FP/How-to-Implement-a-General-Solution-for-Federated-API-CLI-Access-Using-SAML-2-0) that Quint Van Deman of AWS wrote up.  Thanks Quint!</longdescription>
</pkgmetadata>