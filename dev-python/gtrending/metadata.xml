<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `gtrending`![checks](https://github.com/hedyhli/gtrending/workflows/checks/badge.svg)[![codecov](https://codecov.io/gh/hedyhli/gtrending/branch/master/graph/badge.svg?token=J19AQKEO4W)](https://codecov.io/gh/hedyhli/gtrending)[![docs status](https://readthedocs.org/projects/gtrending/badge/?version=latest)](https://gtrending.readthedocs.io/en/latest/)[![pypi version](https://img.shields.io/pypi/v/gtrending)](https://pypi.org/project/gtrending/)[![Python Requirements](https://img.shields.io/pypi/pyversions/gtrending)](https://pypi.org/project/gtrending/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Fetch repositories and developers from [GitHubtrending](https://github.com/trending).```pythonfrom gtrending import fetch_reposrepos = fetch_repos(language=&quot;python&quot;)  # Returns a dictionaryfor repo in repos:    print(repo[&quot;fullname&quot;])  # &quot;user/repo&quot; for each repo```or using the CLI```shgtrending repos --language python```The above examples will fetch all the trending Python projects on GitHubtrending today.[Skip to more CLI examples](#cli)## Requirements* Python 3.6 or higherThe only python package dependency is requests.## Installationgtrending is published on PyPI, use your favorite package manager and add it asa dependency.Pip:```pip3 install gtrending```Poetry:```poetry add gtrending```You get the idea.## UsageDocumentation: [Read the docs](https://gtrending.readthedocs.io/)### `fetch_repos()`Parameters:* `language (str, optional)`:  Filtering by language, eg: python* `spoken_language_code (str, optional)`: The spoken language, eg: en for  english* `since (str, optional)`: The time range, choose from: [daily, weekly,  monthly]. Defaults to &quot;daily&quot;Example:```python-console&gt;&gt;&gt; fetch_repos(language=&quot;rust&quot;, since=&quot;weekly&quot;)[  {    'author': 'iced-rs',    'avatar': 'https://github.com/iced-rs.png',    'builtBy': [      {        'avatar': 'https://avatars.githubusercontent.com/u/518289',        'href': 'https://github.com/hecrj',        'username': 'hecrj'      },      {        'avatar': 'https://avatars.githubusercontent.com/u/10239377',        'href': 'https://github.com/tarkah',        'username': 'tarkah'      },      {        'avatar': 'https://avatars.githubusercontent.com/u/30560559',        'href': 'https://github.com/derezzedex',        'username': 'derezzedex'      },      {        'avatar': 'https://avatars.githubusercontent.com/u/1562417',        'href': 'https://github.com/clarkmoody',        'username': 'clarkmoody'      },      {        'avatar': 'https://avatars.githubusercontent.com/u/4241774',        'href': 'https://github.com/bungoboingo',        'username': 'bungoboingo'      }    ],    'currentPeriodStars': 82,    'description': 'A cross-platform GUI library for Rust, inspired by Elm',    'forks': 776,    'fullname': 'iced-rs/iced',    'language': 'Rust',    'languageColor': '#dea584',    'name': 'iced',    'stars': 17647,    'url': 'https://github.com/iced-rs/iced'  },  ...]```### `fetch_developers()`Parameters:* `language (str, optional)`: The programming language, eg: python* `since (str, optional)`: The time range, choose from [daily, weekly,  monthly]. Defaults to &quot;daily&quot;Example:```python-console&gt;&gt;&gt; fetch_developers(language=&quot;typescript&quot;, since=&quot;weekly&quot;)[  {    'avatar': 'https://avatars.githubusercontent.com/u/2230985',    'name': 'Connor Peet',    'repo': {      'description': 'A resilience and transient-fault-handling library '                     'that allows developers to express policies such as '                     'Backoff, Retry, Circuit Breaker, Tim…',      'name': 'cockatiel',      'url': 'https://github.com/connor4312/cockatiel'},      'sponsorUrl': None,      'url': 'https://github.com/connor4312',      'username': 'connor4312'  },  {    'avatar': 'https://avatars.githubusercontent.com/u/13049130',    'name': 'Robert Soriano',    'repo': {'description': 'End-to-end typesafe APIs in Nuxt applications.',      'name': 'trpc-nuxt',      'url': 'https://github.com/wobsoriano/trpc-nuxt'},      'sponsorUrl': None,      'url': 'https://github.com/wobsoriano',      'username': 'wobsoriano'  },  ...]```&lt;br&gt;### `languages_list()`A list of dictionaries with each name to its parameter value:```python-console&gt;&gt;&gt; languages_list()[  ...  {    &quot;name&quot;: &quot;Elm&quot;,    &quot;param&quot;: &quot;elm&quot;  },  {    &quot;name&quot;: &quot;Emacs Lisp&quot;,    &quot;param&quot;: &quot;emacs-lisp&quot;  },  {    &quot;name&quot;: &quot;EmberScript&quot;,    &quot;param&quot;: &quot;emberscript&quot;  },  {    &quot;name&quot;: &quot;EQ&quot;,    &quot;param&quot;: &quot;eq&quot;  },  ...]```&lt;br&gt;### `spoken_languages_list()````python-console&gt;&gt;&gt; spoken_languages_list()[  ...  {    &quot;code&quot;: &quot;it&quot;    &quot;name&quot;: [ &quot;Italian&quot; ],  },  {    &quot;code&quot;: &quot;iu&quot;    &quot;name&quot;: [ &quot;Inuktitut&quot; ],  },  {    &quot;code&quot;: &quot;ja&quot;    &quot;name&quot;: [ &quot;Japanese&quot; ],  },  {    &quot;code&quot;: &quot;jv&quot;    &quot;name&quot;: [ &quot;Javanese&quot; ],  },  {    &quot;code&quot;: &quot;kl&quot;    &quot;name&quot;: [ &quot;Kalaallisut&quot;, &quot;Greenlandic&quot; ],  },  ...]```&lt;br&gt;### `check_language()`Validate the language parameter:```python-console&gt;&gt;&gt; check_language(&quot;python&quot;)True&gt;&gt;&gt; check_language(&quot;Ruby&quot;)True&gt;&gt;&gt; check_language(&quot;TeaScript&quot;)  # Does not existFalse&gt;&gt;&gt; check_language(&quot;&quot;)False```&lt;br&gt;### `check_spoken_language_code()`Validate the spoken language code parameter:```python-console&gt;&gt;&gt; check_spoken_language_code(&quot;es&quot;)True&gt;&gt;&gt; check_spoken_language_code(&quot;FR&quot;)True&gt;&gt;&gt; check_spoken_language_code(&quot;ZZ&quot;)  # Does not existFalse&gt;&gt;&gt; check_spoken_language_code(&quot;&quot;)False```&lt;br&gt;### `check_since()`Check if the time range is correct — it must be daily, weekly, or monthly —case-insensitive.---For more API usage details, go read the docs!---## CLIUsage:```gtrending [--json] &lt;command&gt; [&lt;args&gt;]```### Examples```sh# Sort repos by starsgtrending repos --sort stars# See only python repositoriesgtrending repos --language python# See weekly trending reposgtrending repos --since weekly --sort forks# Print output in json format (-j/--json)gtrending repos --json# See trending rust developersgtrending developers --language rust# See available coding languagesgtrending langs# See available spoken languagesgtrending spoken-langs```**Getting help**```sh# Help commandsgtrending --help# or see available arguments for specific sub-commandgtrending developers --help```**Usage with jq**```sh# Show only fullname (user/repo) and total stars for each repo# Still a json outputgtrending repos --json | jq '[.[] | {fullname, stars}]'# Show only fullname for repos# Not a json anymoregtrending repos --json | jq '.[] | .fullname'# Similarly for trending developers# Show only username and repository urlgtrending developers -j | jq '[ .[] | {username, repo: .repo_url} ]'# Show only developers with a sponsorUrlgtrending developers -j | jq '[ map(select(.sponsorUrl != null)) | .[] | {username, repo_name: .repo.name} ]'```## Uses* [github-trending-api](https://github.com/huchenme/github-trending-api) —  JavaScript library with web API* requests — Making API requests</longdescription>
</pkgmetadata>