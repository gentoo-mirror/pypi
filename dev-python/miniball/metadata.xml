<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/miniball.svg   :target: https://pypi.org/project/miniball/   :alt: miniball on PyPI.. image:: https://travis-ci.com/marmakoide/miniball.svg?branch=master   :target: https://travis-ci.com/marmakoide/miniball   :alt: miniball on TravisCI   .. image:: https://img.shields.io/badge/license-MIT-green.svg   :target: https://github.com/marmakoide/miniball/blob/master/LICENSE   :alt: MIT License badge========miniball========A Python module to efficiently compute the smallest bounding ball of a point set, in arbitrary number of dimensions.The algorithm runs in approximatively linear time in respects to the number ofinput points. This is NOT a derivative nor a port of `Bernd Gaertner's C++ library &lt;https://people.inf.ethz.ch/gaertner/subdir/software/miniball.html&gt;`__.This project is licensed under the MIT LicenseRequirements============miniball 1.2 requires* Python &gt;= 3.5* Numpy &gt;= 1.17Installation============.. code-block:: console$ pip install miniballUsage=====Here is how you can get the smallest bounding ball of a set of points ``S``.. code-block:: pycon&gt;&gt;&gt; import numpy&gt;&gt;&gt; import miniball&gt;&gt;&gt; S = numpy.random.randn(100, 2)&gt;&gt;&gt; C, r2 = miniball.get_bounding_ball(S)The center of the bounding ball is ``C``, its radius is the square root of ``r2``. The input coordinates ``S`` can be integer, they will automatically cast to floatingpoint internally.And that's it ! miniball does only one thing with one function.Result accuracy---------------Although the algorithm returns exact results in theory, in practice it returnsresult only exact up to a given precision. The ``epsilon`` keyword argument allows to control that precision, it is set to 1e-7 by default... code-block:: pycon&gt;&gt;&gt; import numpy&gt;&gt;&gt; import miniball&gt;&gt;&gt; S = numpy.random.randn(100, 2)&gt;&gt;&gt; C, r2 = miniball.get_bounding_ball(S, epsilon=1e-7)Repeatability-------------The algorithm to compute bounding balls relies on a pseudo-random number generator.Although the algorithms return an exact solution, it is only exact up to the ``epsilon``parameter. As a consequence, running the ``get_bounding_ball`` function twice on the same input might not return exactly the same output.By default, each call to ``get_bounding_ball`` pull out a new, freshly seeded pseudo-random number generator. Therefore, if you wish to get repeatable results from ``get_bounding_ball``, you have to (and only have to) pass the same pseudo-random number generator, using with the ``rng`` keyword argument.. code-block:: pycon&gt;&gt;&gt; import numpy&gt;&gt;&gt; import miniball&gt;&gt;&gt; S = numpy.random.randn(100, 2)&gt;&gt;&gt; rng = numpy.random.RandomState(42)&gt;&gt;&gt; C, r2 = miniball.get_bounding_ball(S, rng = rng)Duplicated input points-----------------------Duplicated input points might trigger failures. This implementation do not check for duplicated input points, the guaranty of non-duplication is defered to you, theprogrammer. This is by design, to avoid to pay the cost of de-duplication when weare sure that the input has no duplicates.Implementation notes====================The algorithm implemented is Welzl's algorithm. It is a pure Python implementation,it is not a binding of the popular C++ package `Bernd Gaertner's miniball &lt;https://people.inf.ethz.ch/gaertner/subdir/software/miniball.html&gt;`__.The algorithm, although often presented in its recursive form, is here implementedin an iterative fashion. Python have an hard-coded recursion limit, thereforea recursive implementation of Welzl's algorithm would have an artificially limitednumber of point it could process.Authors=======* **Alexandre Devert** - *Initial work* - `marmakoide &lt;https://github.com/marmakoide&gt;`__License=======This project is licensed under the MIT License - see the `LICENSE &lt;LICENSE&gt;`__ file for details</longdescription>
</pkgmetadata>