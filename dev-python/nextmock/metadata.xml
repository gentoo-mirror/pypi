<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NextMock [![Build Status](https://travis-ci.com/pilagod/nextmock.svg?branch=master)](https://travis-ci.com/pilagod/nextmock) [![Coverage Status](https://coveralls.io/repos/github/pilagod/nextmock/badge.svg?branch=master)](https://coveralls.io/github/pilagod/nextmock?branch=master)NextMock is an enhanced mock for [unittest.mock.Mock](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock).## Features- Argument matching supported.- Async version (AsyncMock) provided.- Compatible with [unittest.mock.Mock](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock).## UsageFirst install `nextmock` from pip:```shell$ pip install nextmock```then import Mock for common usage, AsyncMock for async usage:```pythonfrom nextmock import Mockfrom nextmock import AsyncMock```## API with Examples### with_argsReturn/raise stub result/error only when given args are matched.&gt; Check out [`/nextmock/test/test_mock_with_args.py`](https://github.com/pilagod/nextmock/blob/master/nextmock/test/test_mock_with_args.py) for comprehensive exmaples.- args matching    ```python    m = Mock()    m.with_args(1, 2, 3).returns(123)    assert m(1, 2, 3) == 123    assert m(3, 2, 1) != 123    ```- kwargs matching    ```python    m = Mock()    m.with_args(a=1, b=2, c=3).returns(123)    assert m(a=1, b=2, c=3) == 123    assert m(a=3, b=2, c=1) != 123    ```- class matching    ```python    class Cmd:        def __init__(self, a: int, b: str):            self.a = a            self.b = b    m = Mock()    m.with_args(Cmd(1, &quot;123&quot;)).returns(123)    assert m(Cmd(1, &quot;123&quot;)) == 123    assert m(Cmd(999, &quot;321&quot;)) != 123    ```- args matcher    ```python    from nextmock import Arg    m = Mock()    m.with_args(1, 2, Arg.Any).returns(123)    assert m(1, 2, 1) == 123    assert m(1, 2, 9) == 123    assert m(1, 2, &quot;123&quot;) == 123    ```- error raising    ```python    m = Mock()    m.with_args(1, 2, 3).raises(ValueError(&quot;value error&quot;))    with pytest.raises(ValueError) as e:        m(1, 2, 3)    assert str(e.value) == &quot;value error&quot;    ```- enum matching (0.0.1)    ```python    class Category(Enum):        A = &quot;a&quot;        B = &quot;b&quot;    m = Mock()    m.with_args(Category.A).returns(123)    assert m(Category.A) == 123    assert m(Category.B) != 123    ```### returnsReturn stub result without matching args.```pythonm = Mock()m.returns(123)assert m(1, 2, 3) == 123assert m(a=1, b=2, c=3) == 123```### raisesRaise stub error without matching args.```pythonm = Mock()m.raises(ValueError(&quot;value error&quot;))with pytest.raises(ValueError) as e:    m(1, 2, 3)with pytest.raises(ValueError) as e:    m(a=1, b=2, c=3)```## CompatibilityInherit behavior from [unittest.mock.Mock](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock).&gt; Check out [`/nextmock/test/test_mock_compatibility.py`](https://github.com/pilagod/nextmock/blob/master/nextmock/test/test_mock_compatibility.py) for comprehensive examples.```pythonm = Mock()m.return_value = 123assert m(1, 2, 3) == 123m.assert_called_once()m.assert_called_with(1, 2, 3)```## LicenseÂ© Chun-Yan Ho (pilagod), 2020-NOWReleased under the [MIT License](https://github.com/pilagod/nextmock/blob/master/LICENSE)</longdescription>
</pkgmetadata>