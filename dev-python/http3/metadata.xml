<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HTTP3&lt;a href=&quot;https://travis-ci.org/encode/http3&quot;&gt;    &lt;img src=&quot;https://travis-ci.org/encode/http3.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/encode/http3&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/encode/http3/branch/master/graph/badge.svg&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/http3/&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/http3.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;HTTP3 is a next-generation HTTP client for Python 3.**Note**: *This project should be considered as an &quot;alpha&quot; release. It is substantially API complete, but there are still some areas that need more work.*---Let's get started...```python&gt;&gt;&gt; import http3&gt;&gt;&gt; r = http3.get('https://www.example.org/')&gt;&gt;&gt; r&lt;Response [200 OK]&gt;&gt;&gt;&gt; r.status_code200&gt;&gt;&gt; r.protocol'HTTP/2'&gt;&gt;&gt; r.headers['content-type']'text/html; charset=UTF-8'&gt;&gt;&gt; r.text'&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Example Domain&lt;/title&gt;...'```## FeaturesHTTP3 builds on the well-established usability of `requests`, and gives you:* A requests-compatible API.* HTTP/2 and HTTP/1.1 support.* Support for [issuing HTTP requests in parallel](https://www.encode.io/http3/parallel/). *(Coming soon)** Standard synchronous interface, but [with `async`/`await` support if you need it](https://www.encode.io/http3/async/).* Ability to [make requests directly to WSGI or ASGI applications](https://www.encode.io/http3/advanced/#calling-into-python-web-apps).* Strict timeouts everywhere.* Fully type annotated.* 100% test coverage.Plus all the standard features of `requests`...* International Domains and URLs* Keep-Alive &amp; Connection Pooling* Sessions with Cookie Persistence* Browser-style SSL Verification* Basic/Digest Authentication *(Digest is still TODO)** Elegant Key/Value Cookies* Automatic Decompression* Automatic Content Decoding* Unicode Response Bodies* Multipart File Uploads* HTTP(S) Proxy Support *(TODO)** Connection Timeouts* Streaming Downloads* .netrc Support *(TODO)** Chunked Requests## InstallationInstall with pip:```shell$ pip install http3```HTTP3 requires Python 3.6+## DocumentationProject documentation is available at [www.encode.io/http3/](https://www.encode.io/http3/).For a run-through of all the basics, head over to the [QuickStart](https://www.encode.io/http3/quickstart/).For more advanced topics, see the [Advanced Usage](https://www.encode.io/http3/advanced/) section, orthe specific topics on making [Parallel Requests](https://www.encode.io/http3/parallel/) or using the[Async Client](https://www.encode.io/http3/async/).The [Developer Interface](https://www.encode.io/http3/api/) provides a comprehensive API reference.## DependenciesThe HTTP3 project relies on these excellent libraries:* `h2` - HTTP/2 support.* `h11` - HTTP/1.1 support.* `certifi` - SSL certificates.* `chardet` - Fallback auto-detection for response encoding.* `idna` - Internationalized domain name support.* `rfc3986` - URL parsing &amp; normalization.* `brotlipy` - Decoding for &quot;brotli&quot; compressed responses. *(Optional)*A huge amount of credit is due to `requests` for the API layout thatmuch of this work follows, as well as to `urllib3` for plenty of designinspiration around the lower level networking details.&lt;p align=&quot;center&quot;&gt;&amp;mdash; ⭐️ &amp;mdash;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;i&gt;HTTP3 is &lt;a href=&quot;https://github.com/encode/http3/blob/master/LICENSE.md&quot;&gt;BSD licensed&lt;/a&gt; code. Designed &amp; built in Brighton, England.&lt;/i&gt;&lt;/p&gt;</longdescription>
</pkgmetadata>