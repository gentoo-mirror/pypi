<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: http://www.repostatus.org/badges/latest/active.svg    :target: http://www.repostatus.org/#active    :alt: Project Status: Active â€” The project has reached a stable, usable          state and is being actively developed... image:: https://github.com/jwodder/entry-points-txt/workflows/Test/badge.svg?branch=master    :target: https://github.com/jwodder/entry-points-txt/actions?workflow=Test    :alt: CI Status.. image:: https://codecov.io/gh/jwodder/entry-points-txt/branch/master/graph/badge.svg    :target: https://codecov.io/gh/jwodder/entry-points-txt.. image:: https://img.shields.io/pypi/pyversions/entry-points-txt.svg    :target: https://pypi.org/project/entry-points-txt/.. image:: https://img.shields.io/github/license/jwodder/entry-points-txt.svg    :target: https://opensource.org/licenses/MIT    :alt: MIT License`GitHub &lt;https://github.com/jwodder/entry-points-txt&gt;`_| `PyPI &lt;https://pypi.org/project/entry-points-txt/&gt;`_| `Issues &lt;https://github.com/jwodder/entry-points-txt/issues&gt;`_| `Changelog &lt;https://github.com/jwodder/entry-points-txt/blob/master/CHANGELOG.md&gt;`_``entry-points-txt`` provides functions for reading &amp; writing``entry_points.txt`` files according to `the spec`_.  That is the one thing itdoes, and it endeavors to do it well... _the spec: https://packaging.python.org/specifications/entry-points/Installation============``entry-points-txt`` requires Python 3.6 or higher.  Just use `pip&lt;https://pip.pypa.io&gt;`_ for Python 3 (You have pip, right?) to install``entry-points-txt``::    python3 -m pip install entry-points-txtAPI===``EntryPoint``--------------.. code:: python    class EntryPoint(NamedTuple)A representation of an entry point as a namedtuple.  Instances have thefollowing attributes and methods:``group: str``   The name of the entry point group (e.g., ``&quot;console_scripts&quot;``)``name: str``   The name of the entry point``module: str``   The module portion of the attribute reference (the part before the colon)``attr: Optional[str]``   The attribute/object portion of the attribute reference (the part after the   colon), or ``None`` if not specified``extras: Tuple[str, ...]``   Extras required for the entry point``load() -&gt; Any``   Returns the object referred to by the entry point``to_line() -&gt; str``   Returns the representation of the entry point as a line in   ``entry_points.txt``, i.e., a line of the form ``name = module:attr   [extras]````EntryPointSet``-----------------.. code:: python    EntryPointSet = Dict[str, Dict[str, EntryPoint]]An alias for the return type of ``load()`` &amp; ``loads()`` and the argument typeof ``dump()`` &amp; ``dumps()``.  Entry points are organized into a ``dict`` thatmaps group names to sub-``dict``\s that map entry point names to ``EntryPoint``instances.``load()``----------.. code:: python    entry_points_txt.load(fp: IO[str]) -&gt; EntryPointSetParse a file-like object as an ``entry_points.txt``-format file and return theresults.For example, the following input:.. code:: ini    [console_scripts]    foo = package.__main__:main    bar = package.cli:klass.attr    [thingy.extension]    quux = package.thingy [xtr]would be parsed as:.. code:: python    {        &quot;console_scripts&quot;: {            &quot;foo&quot;: EntryPoint(group=&quot;console_scripts&quot;, name=&quot;foo&quot;, module=&quot;package.__main__&quot;, attr=&quot;main&quot;, extras=()),            &quot;bar&quot;: EntryPoint(group=&quot;console_scripts&quot;, name=&quot;bar&quot;, module=&quot;package.cli&quot;, attr=&quot;klass.attr&quot;, extras=()),        },        &quot;thingy.extension&quot;: {            &quot;quux&quot;: EntryPoint(group=&quot;thingy.extension&quot;, name=&quot;quux&quot;, module=&quot;package.thingy&quot;, attr=None, extras=(&quot;xtr&quot;,)),        },    }``loads()``-----------.. code:: python    entry_points_txt.loads(s: str) -&gt; EntryPointSetLike ``load()``, but reads from a string instead of a filehandle``dump()``----------.. code:: python    entry_points_txt.dump(eps: EntryPointSet, fp: IO[str]) -&gt; NoneWrite a collection of entry points to a file-like object in``entry_points.txt`` format.  A ``ValueError`` is raised and nothing is writtenif the group or name key under which an ``EntryPoint`` is located does notmatch its ``group`` or ``name`` attribute.``dumps()``-----------.. code:: python    entry_points_txt.dumps(eps: EntryPointSet) -&gt; strLike ``dump()``, but returns a string instead of writing to a filehandle``dump_list()``---------------.. code:: python    entry_points_txt.dump_list(eps: Iterable[EntryPoint], fp: IO[str]) -&gt; NoneWrite an iterable of entry points to a file-like object in ``entry_points.txt``format.  If two or more entry points have the same group &amp; name, only the lastone will be output.``dumps_list()``----------------.. code:: python    entry_points_txt.dumps_list(eps: Iterable[EntryPoint]) -&gt; strLike ``dump_list()``, but returns a string instead of writing to a filehandle``ParseError``--------------.. code:: python    class ParseError(ValueError)Exception raised by ``load()`` or ``loads()`` when given invalid input</longdescription>
</pkgmetadata>