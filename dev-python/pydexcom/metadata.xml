<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Donate](https://img.shields.io/badge/Donate-PayPal-green?style=flat-square)](https://www.paypal.me/gagebenne)[![PyPI](https://img.shields.io/pypi/v/pydexcom?style=flat-square)](https://www.pypi.org/project/pydexcom)[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/gagebenne/pydexcom/Python%20package?style=flat-square)](https://github.com/gagebenne/pydexcom/actions)# pydexcomA simple Python API to interact with Dexcom Share service. Used to get **real time** Dexcom GCM sensor data.### Setup1. Download the [Dexcom G6 / G5 / G4](https://www.dexcom.com/apps) mobile app and [enable the Share service](https://provider.dexcom.com/education-research/cgm-education-use/videos/setting-dexcom-share-and-follow).    *Note: the service requires setup of at least one follower to enable the share service, but `pydexcom` will use your credentials, not the follower's.*2. Install the `pydexcom` package.    ```python    pip3 install pydexcom    ```### Usage```python&gt;&gt;&gt; from pydexcom import Dexcom&gt;&gt;&gt; dexcom = Dexcom(&quot;username&quot;, &quot;password&quot;) # add ous=True if outside of US&gt;&gt;&gt; bg = dexcom.get_current_glucose_reading()&gt;&gt;&gt; bg.value85&gt;&gt;&gt; bg.mmol_l4.7&gt;&gt;&gt; bg.trend4&gt;&gt;&gt; bg.trend_description'steady'&gt;&gt;&gt; bg.trend_arrow'→'&gt;&gt;&gt; bg.timedatetime.datetime(2020, 5, 6, 18, 18, 42)```### FAQ&lt;details&gt;&lt;summary&gt;What do I need to get started?&lt;/a&gt;&lt;/summary&gt;&lt;br/&gt;If you are currently on the Dexcom GCM system, all you need is the appropriate mobile app with the Dexcom Share service enabled.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Where is this package being used?&lt;/a&gt;&lt;/summary&gt;&lt;br/&gt;For now this package is mainly being used in the &lt;a href=&quot;https://github.com/home-assistant/core/pull/33852&quot;&gt;Dexcom home assistant integration&lt;/a&gt;, but is generic enough to be used in lots of applications.In fact, reddit user paulcole710 used it to track glucose levels &lt;a href=&quot;https://www.tomshardware.com/news/raspberry-project-diy-dexcom-glucose-tracker&quot;&gt;using a Raspberry Pi and e-ink display&lt;/a&gt;.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Why not use the &lt;a href=&quot;https://developer.dexcom.com/&quot;&gt;official Dexcom Developer API?&lt;/a&gt;&lt;/summary&gt;&lt;br/&gt;The official Dexcom API is a great tool to view trends, statistics, and day-by-day data, but is not suitable for real time fetching of glucose readings.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;How can I let you know of suggestions or issues?&lt;/summary&gt;&lt;br/&gt;By all means submit a pull request if you have a feature you'd like to see in the next release, alternatively you may leave a issue if you have a suggestion or bug you'd like to alert me of.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Are there any features in development?&lt;/summary&gt;&lt;br/&gt;Sure, I'm thinking of implementing a session status checker, or maybe an asynchronus version. That being said, simplicity - getting real time blood glucose information - is most important to this package.&lt;/details&gt;### Development##### Dexcom class| Method                    | Input                                                   | Output                          | Description                                                  || --------------------------- | ------------------------------------------------------- | ------------------------------- | ------------------------------------------------------------ || \_\_init\_\_                | `username:str`,&lt;br/&gt;`password:str`,&lt;br/&gt;`ous:bool=True` | `Dexcom`                        | Dexcom constructor, stores authentication information        || create_session              |                                                         |                                 | Creates Dexcom Share API session by getting session id       || verify_serial_number        | `serial_number:str`                                     | `bool`                          | Verifies if a transmitter serial number is assigned to you   || get_glucose_readings        | `minutes:int=1440`,&lt;br/&gt;`max_count:int=288`             | `[GlucoseReading]`/&lt;br /&gt;`None` | Gets max_count glucose readings within the past minutes, None if no glucose reading in the past 24 hours || get_latest_glucose_reading  |                                                         | `GlucoseReading`/&lt;br /&gt;`None`   | Gets latest available glucose reading, None if no glucose reading in the past 24 hours || get_current_glucose_reading |                                                         | `GlucoseReading`/`None`         | Gets current available glucose reading, None if no glucose reading in the past 6 minutes |##### GlucoseReading class| Attribute         | Definition                                                   | Example                                     || ----------------- | ------------------------------------------------------------ | ------------------------------------------- || value             | Blood glucose value in mg/dL.                                | `85`                                        || mg_dl             | Blood glucose value in mg/dL.                                | `85`                                        || mmol_l            | Blood glucose value in mmol/L.                               | `4.7`                                       || trend             | Blood glucose trend information as number 0 - 9 (see constants). | `4`                                     || trend_description | Blood glucose trend information description (see constants). | `'steady'`                                  || trend_arrow       | Blood glucose trend information as unicode arrow (see constants). | `'→'`                                  || time              | Blood glucose recorded time as `datetime`.                   | `datetime.datetime(2020, 5, 6, 18, 18, 42)` |##### Constants| Trend | Trend description             | Trend arrow || ----- | ----------------------------- | ----------- || 0     | `''`                          | `''`        || 1     | `'rising quickly'`            | `'↑↑'`      || 2     | `'rising'`                    | `'↑'`       || 3     | `'rising slightly'`           | `'↗'`       || 4     | `'steady'`                    | `'→'`       || 5     | `'falling slightly'`          | `'↘'`       || 6     | `'falling'`                   | `'↓'`       || 7     | `'falling quickly'`           | `'↓↓'`      || 8     | `'unable to determine trend'` | `'?'`       || 9     | `'trend unavailable'`         | `'-'`       |</longdescription>
</pkgmetadata>