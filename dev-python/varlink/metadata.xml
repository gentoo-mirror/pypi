<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Varlink Certified](https://img.shields.io/badge/varlink-certified-green.svg)](https://www.varlink.org/Language-Bindings)[![Build Status](https://travis-ci.org/varlink/python.svg?branch=master)](https://travis-ci.org/varlink/python)[![Coverage Status](https://coveralls.io/repos/github/varlink/python/badge.svg?branch=master)](https://coveralls.io/github/varlink/python?branch=master)[![PyPI](https://img.shields.io/pypi/v/varlink.svg)](https://pypi.org/project/varlink/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/varlink.svg)](https://pypi.org/project/varlink/)[![PyPI - Status](https://img.shields.io/pypi/status/varlink.svg)](https://pypi.org/project/varlink/)# python-varlinkA [varlink](http://varlink.org) implementation for Python.* [GIT Repository](https://github.com/varlink/python)* [API documentation](https://varlink.github.io/python/)## python varlink installationFrom pypi:```bash$ pip3 install --user varlink```With Fedora 28/rawhide:```bash$ sudo dnf install python3-varlink```## ExamplesSee the [tests](https://github.com/varlink/python-varlink/tree/master/varlink/tests) directory.```bash$ python3 -m varlink.tests.test_orgexamplemore --varlink=&quot;unix:/tmp/test&quot; &amp;[1] 6434$ python -m varlink.cli help unix:/tmp/test/org.example.more# Example Varlink serviceinterface org.example.more# Enum, returning either start, progress or end# progress: [0-100]type State (  start: ?bool,  progress: ?int,  end: ?bool)# Returns the same stringmethod Ping(ping: string) -&gt; (pong: string)# Dummy progress method# n: number of progress stepsmethod TestMore(n: int) -&gt; (state: State)# Stop servingmethod StopServing() -&gt; ()# Something failed in TestMoreerror TestMoreError (reason: string)$ python -m varlink.cli call unix:/tmp/test/org.example.more.Ping '{ &quot;ping&quot;: &quot;Ping&quot;}'{  &quot;pong&quot;: &quot;Ping&quot;} $ fgpython3 -m varlink.tests.test_orgexamplemore --varlink=&quot;unix:/tmp/test&quot;^C``````bash$ python3 -m varlink.tests.test_orgexamplemore --client -A 'python3 -m varlink.tests.test_orgexamplemore --varlink=$VARLINK_ADDRESS'Connecting to unix:/tmp/tmppxrbqk9p/4927Listening on /tmp/tmppxrbqk9p/4927--- Start ---Progress: 0Progress: 10Progress: 20Progress: 30Progress: 40Progress: 50Progress: 60Ping:  TestProgress: 70Ping:  TestProgress: 80Ping:  TestProgress: 90Ping:  TestProgress: 100Ping:  Test--- End ---``````bash$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.pyConnecting to unix:/tmp/tmp7n6zc67d/5257Listening on /tmp/tmp7n6zc67d/5257--- Start ---Progress: 0Progress: 10Progress: 20Progress: 30Progress: 40Progress: 50Progress: 60Ping:  TestProgress: 70Ping:  TestProgress: 80Ping:  TestProgress: 90Ping:  TestProgress: 100Ping:  Test--- End ---``````bash$ python3 -m varlink.tests.test_orgexamplemore --varlink=&quot;unix:/tmp/test&quot; &amp;Listening on /tmp/test[1] 6434python3 -m varlink.tests.test_orgexamplemore --client --varlink=&quot;unix:/tmp/test&quot;Connecting to unix:/tmp/testPing:  Test--- Start ---Progress: 0Progress: 10Progress: 20Progress: 30Progress: 40Progress: 50Progress: 60Ping:  TestProgress: 70Ping:  TestProgress: 80Ping:  TestProgress: 90Ping:  TestProgress: 100Ping:  Test--- End ---$ python3 -m varlink.cli call --more unix:/tmp/test/org.example.more.TestMore '{ &quot;n&quot;: 10 }'{'state': {'start': True}}{'state': {'progress': 0}}{'state': {'progress': 10}}{'state': {'progress': 20}}{'state': {'progress': 30}}{'state': {'progress': 40}}{'state': {'progress': 50}}{'state': {'progress': 60}}{'state': {'progress': 70}}{'state': {'progress': 80}}{'state': {'progress': 90}}{'state': {'progress': 100}}{'state': {'end': True}}$ fgpython3 -m varlink.tests.test_orgexamplemore --varlink=&quot;unix:/tmp/test&quot;^C```You can also start the clients and server with URLs following the [varlink URL standard](https://varlink.org/#address) with `unix:` and `tcp:`.E.g.- unix:@anonuds- unix:/run/myserver/socketfile- tcp:127.0.0.1:12345- tcp:[::1]:12345### Activation ModeActivation mode starts the service to connect to and passes the socket via socket activation.The ```VARLINK_ADDRESS``` environment variable contains the varlink address URI.```bash$ python3 -m varlink.cli --activate 'python3 -m varlink.tests.test_orgexamplemore --varlink=$VARLINK_ADDRESS' call org.example.more.Ping '{ &quot;ping&quot;: &quot;Ping&quot;}'Listening on @00352{'pong': 'Ping'}```### Bridge ModeBridge mode allows to tunnel to a remote point via stdin/stdout and call a method.Running ```varlink bridge``` allows to connect stdio to the host services via ```org.varlink.resolver``` interface resolving.```bash# python3 -m varlink.cli -b &quot;ssh host.example.org varlink bridge&quot; call com.redhat.machine.GetInfo '{}'{  &quot;hostname&quot;: &quot;host.example.org&quot;,  &quot;system&quot;: {    &quot;id&quot;: &quot;fedora&quot;,    &quot;kernel_version&quot;: &quot;4.18.0-0.rc5.git1.2.fc29.x86_64&quot;,    &quot;name&quot;: &quot;Fedora&quot;,    &quot;version&quot;: &quot;29&quot;  },  &quot;virtualization&quot;: {    &quot;name&quot;: &quot;none&quot;  }}```### Varlink Certification Server```$ python3 -m varlink.tests.test_certification --varlink=tcp:127.0.0.1:12345```### Varlink Certification Client```$ python3 -m varlink.tests.test_certification --varlink=tcp:127.0.0.1:12345 --client```</longdescription>
</pkgmetadata>