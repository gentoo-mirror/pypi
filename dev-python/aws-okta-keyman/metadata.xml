<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Apache](https://img.shields.io/badge/license-Apache-blue.svg)](https://github.com/nathan-v/aws_okta_keyman/blob/master/LICENSE.txt) [![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fnathan-v%2Faws_okta_keyman.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fnathan-v%2Faws_okta_keyman?ref=badge_shield) [![Python versions](https://img.shields.io/pypi/pyversions/aws-okta-keyman.svg)](https://pypi.python.org/pypi/aws-okta-keyman/) ![PyPI - Implementation](https://img.shields.io/pypi/implementation/aws-okta-keyman) [![Downloads](http://pepy.tech/badge/aws-okta-keyman)](https://pepy.tech/project/aws_okta_keyman)[![Requirements Status](https://pyup.io/repos/github/nathan-v/aws_okta_keyman/shield.svg?t=1580777582434)](https://pyup.io/repos/github/nathan-v/aws_okta_keyman/) [![Code Climate maintainability](https://img.shields.io/codeclimate/maintainability/nathan-v/aws_okta_keyman)](https://codeclimate.com/github/nathan-v/aws_okta_keyman)  [![Code Climate issues](https://img.shields.io/codeclimate/issues/nathan-v/aws_okta_keyman)](https://codeclimate.com/github/nathan-v/aws_okta_keyman/issues) [![Code Climate technical debt](https://img.shields.io/codeclimate/tech-debt/nathan-v/aws_okta_keyman)](https://codeclimate.com/github/nathan-v/aws_okta_keyman) [![Codecov](https://img.shields.io/codecov/c/gh/nathan-v/aws_okta_keyman)](https://app.codecov.io/gh/nathan-v/aws_okta_keyman) [![Snyk Vulnerabilities for GitHub Repo](https://img.shields.io/snyk/vulnerabilities/github/nathan-v/aws_okta_keyman)](https://app.snyk.io/org/nathan-v/project/b00ed789-357f-49ad-93b1-2cac15b57e43)[![GitHub release (latest by date)](https://img.shields.io/github/v/release/nathan-v/aws_okta_keyman)](https://github.com/nathan-v/aws_okta_keyman/releases) [![GitHub Release Date](https://img.shields.io/github/release-date/nathan-v/aws_okta_keyman)](https://github.com/nathan-v/aws_okta_keyman/releases) [![PyPI version](https://badge.fury.io/py/aws-okta-keyman.svg)](https://badge.fury.io/py/aws-okta-keyman) [![PyPI - Status](https://img.shields.io/pypi/status/aws_okta_keyman)](https://badge.fury.io/py/aws-okta-keyman) [![Sourcegraph](https://img.shields.io/badge/view%20on-Sourcegraph-brightgreen.svg?logo=sourcegraph)](https://sourcegraph.com/github.com/nathan-v/aws_okta_keyman)[![CircleCI](https://img.shields.io/circleci/build/gh/nathan-v/aws_okta_keyman/master?label=master&amp;logo=circleci)](https://circleci.com/gh/nathan-v/aws_okta_keyman/tree/master) [![GitHub last commit](https://img.shields.io/github/last-commit/nathan-v/aws_okta_keyman)](https://github.com/nathan-v/aws_okta_keyman/commits/master)# AWS Okta KeymanThis is a simple command-line tool for logging into Okta and generatingtemporary Amazon AWS Credentials. This tool makes it easy and secure togenerate short-lived, [logged and user-attributed][tracking] credentials that can beused for any of the Amazon SDK libraries or CLI tools.## FeaturesKey features listed here. Keep scrolling for more details.* MFA support* Multiple AWS role support* Automatic reup/refresh mode* Dynamic AWS/Okta integration list* Automatic username selection* Okta password caching* Command wrapping* Screen/shell only output* GovCloud support* Adjustable key lifetime* Console login URLs* Config files* Interactive config generation* Installation via pip and Homebrew* Linux, Windows, and OSX supportBenefits vs other similar tools:* Runs without external dependencies; no servers or lambdas required* No API keys required; just your Okta username and password* No analytics or metrics collection; this tool does _not_ call home in any way* Open source distributed as source; you can see what you're running* Wide Python version support; works on Python 3.6+### Optional MFA AuthenticationIf your organization or integration requires MFA we will automatically detect thatrequirement during authentication and prompt the user to complete theMulti Factor Authentication.In particular, there is support for standard passcode based auth, as well assupport for [Okta Verify with Push][okta_verify] and [Duo Auth][duo_auth]. If bothare available, Okta Verify with Push will be prioritized and a push notification is_automatically sent to the user_. If the user declines the validation, thenoptionally the Passcode can be entered in manually.For Duo Auth Duo wants you to use a web page to load their iframe to pick your factorand then move forward from there. That is one option and the one most likely to keepworking. This tool now also has an alternative browserless option that attempts touse Duo for MFA without a browser. This may eventually be stopped/prevented by Duobut makes this tool work on remote servers or in any other case where you may notbe able to use a browser.#### Supported MFA Solutions* Okta Verify* Duo Auth (push, call, or OTP via CLI)* Duo Auth (push, call, or OTP via web browser)* Okta OTP* Google Auth OTP* SMS OTP* Call OTP* Question/AnswerWindows Hello, U2F, email, and physical token (RSA, Symantec) are not supportedat this time.### Multiple AWS RolesAWS Okta Keyman supports multiple AWS roles when configured. The user is prompted toselect the role they wish to use before the temporary keys are generated.### Re-Up Mode .. Automatic Credential Re-GenerationAmazon IAM defaults to Federated Login sessions that last up to *1 hour*. Fordevelopers, it can be painful to re-authenticate every hour during your workday. This is made much worse if your organization requires MFA on each login.You may run the AWS Okta Keyman in &quot;reup&quot; mode to get around this. The toolwill continue to run in a sleep loop periodically reaching out to Okta,generating a new SAML Assertion, and then generating updated Amazon AWScredentials. This can run for as long as your Okta administrator has allowedyour Login Session to be - often a full work day.In the case of application-level MFA you will be prompted every 50 minutes orso to complete the MFA again.See the `--reup` commandline option for help here!### AWS Accounts from OktaAWS Okta Keyman can pull the AWS Accounts that have been assigned from Oktaitself which means the app ID value no longer needs to be provided in thecommand line or in the config file. A config file can still optionally be usedto ensure account names or order if preferred. This means with no configurationsaved you only need to provide your organization.### Automatic UsernameAWS Okta Keyman will use the current user as the username for Oktaauthentication if no username has been provided.### Keyring Password CacheAWS Okta Keyman can use your local keyring to store your Okta password to allow you torun the tool repeatedly without needing to type your password in each time. For details on how thisis accomplished check out [keyring][keyring].```textaws_okta_keyman -P    # Enable the password cacheaws_okta_keyman -R    # Reset the cached password in case of mistaken entry or password change```### Command WrappingCommand wrapping provides a simple way to execute any command you would like directly fromKeyman where the AWS access key environment variables will be provided when starting thecommand. An example of this is provided here:```text$ aws_okta_keyman --command &quot;echo \$AWS_ACCESS_KEY_ID&quot;----snip----14:07:17   (INFO) Wrote profile &quot;default&quot; to /home/nathan/.aws/credentials üíæ14:07:17   (INFO) Current time is 2020-01-10 22:07:17.02796414:07:17   (INFO) Session expires at 2020-01-10 23:07:16+00:00 ‚è≥14:07:17   (INFO) Running requested command...AXXXXXXXXXXXXXXXXXXX```### Screen-only Key OutputScreen-only output for cases were the key needs to be copiedelsewhere for use. This makes using the temporary keys in other apps simpler and easier.They will not be written out to the AWS credentials file when this option is specified.```text$ aws_okta_keyman --screen----snip----14:14:04   (INFO) Assuming role: arn:aws:iam::1234567890:role/Admin14:14:04   (INFO) AWS Credentials:AWS_ACCESS_KEY_ID = AXXXXXXXXXXXXXXXXXXXAWS_SECRET_ACCESS_KEY = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxAWS_SESSION_TOKEN = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx14:14:04 (INFO) All done! üëç```### GovCloud SupportAWS Okta Keyman now works with AWS GovCloud. Use the `--region` command-line optionto specify the AWS region to get the keys from.### Preferred Key DurationYou can set a key lifetime other than the default 1 hour by setting `--duration` when calling Keyman.If AWS rejects the request for a longer duration the default 1 hour will be used instead. You can requestkey durations from a minimum of 15 minutes (900 seconds) or up to 12 hours (43200 seconds). Theselimits are enforced by AWS and are not a limitation of Keyman.### AWS Console LoginsAWS Console login links can optionally be generated when yo request keys with Keyman.The console login link will be output on the screen for you to use. Just provide the `--console`parameter when running Keyman.### Config file .. predefined settings for you or your orgThe config file, which defaults to `~/.config/aws_okta_keyman.yml`, allows you topre-set things like your username, Okta organization name (subdomain), and AWS accountsand App IDs to make this script simpler to use. This also supports username assumptionbased on the current user when the username or email is configured as`automatic-username` if usernames only are an option or`automatic-username@example.com` if you need full emails. Arguments will alwaysbe preferred to the config file so you can override what's in the config fileas needed on each run of the tool.Example config file:```yamlusername: automatic-username@example.comorg: exampleaccounts:  - name: Dev    appid: exampleAppIDFromOkta/234  - name: Prod    appid: exampleAppIDFromOkta/345```When used you'll get a similar interface to AWS Role selection but for your AWSaccounts.### Interactive ConfigurationFor interactive configuration and creation of the config file you can start the tool with just config as a parameter and you will be propted to provide the basic information needed to get started. An example of this is shown here:```text$ aws_okta_keyman config14:21:41   (INFO) AWS Okta Keyman üîê v0.7.014:21:41   (INFO) Interactive setup requestedWhat is your Okta Organization subdomain?Example; for https://co.okta.com enter 'co'Okta org: exampleWhat is your Okta user name?If it is nathan you can leave this blank.Username: nathan.vNext we can optionally configure your AWS integrations. This is notrequired as the AWS integrations can be picked up automatically fromOkta. If you would prefer to list only specific integrations or preferto specify the friendly names yourself you can provide the followinginformation. You will be prompted to continue providing integrationdetails until you provide a blank response to the app ID. If you areunsure how to answer these questions just leave the app ID blank.What is your AWS integration app ID?Example; 0oaciCSo1d8/123App ID: 0oaciCSo1d8/123Please provide a friendly name for this app.App ID: AWS ProdWhat is your AWS integration app ID?Example; 0oaciCSo1d8/123App ID:14:21:58   (INFO) Config file written. Please rerun Keyman```## Python VersionsPython 2.7.4+ and Python 3.5.0+ are supported.Support for older Python versions will be maintained as long as is reasonable.Before support is removed a reminder/warning will be provided.## Usage### Client Setup#### Mac OS Installation`brew tap nathan-v/aws-okta-keyman` and then `brew install aws_okta_keyman`.Or install via URL (which will not receive updates):```brew install https://raw.githubusercontent.com/nathan-v/homebrew-aws-okta-keyman/master/Formula/aws_okta_keyman.rb```#### Linux or Windows InstallationBefore you can install this tool you need to have a working Python installation with pip.If you're not sure if you have this a good place to start would be the [Python Beginner's Guide](pythonbeginner) .Once your Python environment is configured simply run `pip install aws-okta-keyman` to install the tool.### Running AWS Okta KeymanFor detailed usage instructions, see the `--help` commandline argument.Typical usage:```text$ aws_okta_keyman16:48:22   (INFO) AWS Okta Keyman üîê v0.7.0Password:16:48:31   (INFO) Using factor: üì≤ Duo Push16:48:33   (WARNING) Duo required; check your phone... üì±16:48:40   (INFO) Waiting for MFA success...16:48:41   (INFO) Successfully authed Nathan V16:48:41   (WARNING) No app ID provided; select from available AWS accounts    Account[0] AWS - Sandbox[1] AWS - Development[2] AWS - Staging[3] AWS - Integration[4] AWS - ProductionSelection: 416:48:47   (INFO) Using account: AWS - Production / exampleAppIDFromOkta/12316:48:47   (INFO) Getting SAML Assertion from example16:48:48   (WARNING) Multiple AWS roles found; please select one    Account          Role[0] example-prod     Admin[1] example-prod     DevSelection: 016:48:51   (INFO) Getting SAML Assertion from example16:48:51   (INFO) Assuming role: arn:aws:iam::1234567890:role/Admin16:48:52   (INFO) Wrote profile &quot;default&quot; to /home/nathan/.aws/credentials üíæ16:48:52   (INFO) Current time is 2019-11-08 00:48:52.26539316:48:52   (INFO) Session expires at 2019-11-08 01:48:52+00:00 ‚è≥16:48:52   (INFO) All done! üëç```### TroubleshootingTroubleshooting information is available on the project Github [wiki].## Okta SetupBefore you can use this tool, your Okta administrator needs to set up[Amazon/Okta integration][okta_aws_guide] using SAML roles.## BackgroundThis is a hard fork of [nd_okta_auth][nd_okta_auth] by [Nextdoor.com, Inc.][nextdoorinc].I decided to move ahead this way as I wanted to be able to move quickly and addfeatures independently of the existing implementation. A big thank you to @dirangedfor the original work that this comes from.The original code is heavily based on the previous work done by[ThoughtWorksInc][thoughtworksinc] on their [OktaAuth][oktaauth] and [AWS RoleCredentials][aws_role_credentials] tools.## Developer InfoSee CONTRIBUTING.md for more information on contributing to this project.## LicenseCopyright 2020 Nathan VCopyright 2018 Nextdoor.com, IncLicensed under the Apache License, Version 2.0. See LICENSE.txt file for details.Some code in `aws_okta_keyman/okta.py`, `aws_okta_keyman/aws.py`,`aws_okta_keyman/aws_saml.py`, and `aws_okta_keyman/test/aws_saml_test.py` isdistributed under MIT license. See the source files for details. A copy of thelicense is in the LICENSE_MIT.txt file.[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fnathan-v%2Faws_okta_keyman.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fnathan-v%2Faws_okta_keyman?ref=badge_large)[nd_okta_auth]: https://github.com/Nextdoor/nd_okta_auth[nextdoorinc]: https://github.com/Nextdoor[oktaauth]: https://github.com/ThoughtWorksInc/oktaauth[aws_role_credentials]: https://github.com/ThoughtWorksInc/aws_role_credentials[thoughtworksinc]: https://github.com/ThoughtWorksInc[tracking]: https://aws.amazon.com/blogs/security/how-to-easily-identify-your-federated-users-by-using-aws-cloudtrail/[pythonbeginner]: https://wiki.python.org/moin/BeginnersGuide/Download[okta_aws_guide]: https://support.okta.com/help/servlet/fileField?retURL=%2Fhelp%2Farticles%2FKnowledge_Article%2FAmazon-Web-Services-and-Okta-Integration-Guide&amp;entityId=ka0F0000000MeyyIAC&amp;field=File_Attachment__Body__s[okta_mfa]: https://www.okta.com/products/adaptive-multi-factor-authentication/[okta_verify]: https://www.okta.com/blog/tag/okta-verify-with-push/[aws_saml]: http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html[duo_auth]: https://duo.com/[keyring]: https://github.com/jaraco/keyring[wiki]: https://github.com/nathan-v/aws_okta_keyman/wiki#faq--troubleshooting</longdescription>
</pkgmetadata>