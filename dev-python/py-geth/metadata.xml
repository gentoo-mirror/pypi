<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyGeth[![Join the conversation on Discord](https://img.shields.io/discord/809793915578089484?color=blue&amp;label=chat&amp;logo=discord&amp;logoColor=white)](https://discord.gg/GHryRvPB84)[![Build Status](https://circleci.com/gh/ethereum/py-geth.svg?style=shield)](https://circleci.com/gh/ethereum/py-geth)[![PyPI version](https://badge.fury.io/py/py-geth.svg)](https://badge.fury.io/py/py-geth)[![Python versions](https://img.shields.io/pypi/pyversions/py-geth.svg)](https://pypi.python.org/pypi/py-geth)Python wrapper around running `geth` as a subprocess## System DependencyThis library requires the `geth` executable to be present.## InstallationInstallation```bashpython -m pip install py-geth```## QuickstartTo run geth connected to the mainnet```python&gt;&gt;&gt; from geth import LiveGethProcess&gt;&gt;&gt; geth = LiveGethProcess()&gt;&gt;&gt; geth.start()```Or a private local chain for testing.  These require you to give them a name.```python&gt;&gt;&gt; from geth import DevGethProcess&gt;&gt;&gt; geth = DevGethProcess('testing')&gt;&gt;&gt; geth.start()```By default the `DevGethProcess` sets up test chains in the default `datadir`used by `geth`.  If you would like to change the location for these testchains, you can specify an alternative `base_dir`.```python&gt;&gt;&gt; geth = DevGethProcess('testing', '/tmp/some-other-base-dir/')&gt;&gt;&gt; geth.start()```Each instance has a few convenient properties.```python&gt;&gt;&gt; geth.data_dir&quot;~/.ethereum&quot;&gt;&gt;&gt; geth.rpc_port8545&gt;&gt;&gt; geth.ipc_path&quot;~/.ethereum/geth.ipc&quot;&gt;&gt;&gt; geth.accounts['0xd3cda913deb6f67967b99d67acdfa1712c293601']&gt;&gt;&gt; geth.is_aliveFalse&gt;&gt;&gt; geth.is_runningFalse&gt;&gt;&gt; geth.is_stoppedFalse&gt;&gt;&gt; geth.start()&gt;&gt;&gt; geth.is_aliveTrue  # indicates that the subprocess hasn't exited&gt;&gt;&gt; geth.is_runningTrue  # indicates that `start()` has been called (but `stop()` hasn't)&gt;&gt;&gt; geth.is_stoppedFalse&gt;&gt;&gt; geth.stop()&gt;&gt;&gt; geth.is_aliveFalse&gt;&gt;&gt; geth.is_runningFalse&gt;&gt;&gt; geth.is_stoppedTrue```When testing it can be nice to see the logging output produced by the `geth`process.  `py-geth` provides a mixin class that can be used to log the stdoutand stderr output to a logfile.```python&gt;&gt;&gt; from geth import LoggingMixin, DevGethProcess&gt;&gt;&gt; class MyGeth(LoggingMixin, DevGethProcess):...     pass&gt;&gt;&gt; geth = MyGeth()&gt;&gt;&gt; geth.start()```All logs will be written to logfiles in `./logs/` in the current directory.The underlying `geth` process can take additional time to open the RPC or IPCconnections, as well as to start mining if it needs to generate the DAG.  Youcan use the following interfaces to query whether these are ready.```python&gt;&gt;&gt; geth.is_rpc_readyTrue&gt;&gt;&gt; geth.wait_for_rpc(timeout=30)  # wait up to 30 seconds for the RPC connection to open&gt;&gt;&gt; geth.is_ipc_readyTrue&gt;&gt;&gt; geth.wait_for_ipc(timeout=30)  # wait up to 30 seconds for the IPC socket to open&gt;&gt;&gt; geth.is_dag_generatedTrue&gt;&gt;&gt; geth.is_miningTrue&gt;&gt;&gt; geth.wait_for_dag(timeout=600)  # wait up to 10 minutes for the DAG to generate.```&gt; The DAG functionality currently only applies to the DAG for epoch 0.## Installing specific versions of `geth`&gt; This feature is experimental and subject to breaking changes.Versions of `geth` dating back to v1.9.14 can be installed using `py-geth`.See [install.py](https://github.com/ethereum/py-geth/blob/master/geth/install.py) forthe current list of supported versions.Installation can be done via the command line:```bash$ python -m geth.install v1.11.6```Or from python using the `install_geth` function.```python&gt;&gt;&gt; from geth import install_geth&gt;&gt;&gt; install_geth('v1.11.6')```The installed binary can be found in the `$HOME/.py-geth` directory, under yourhome directory.  The `v1.11.6` binary would be located at`$HOME/.py-geth/geth-v1.11.6/bin/geth`.## About `DevGethProcess`The `DevGethProcess` is designed to facilitate testing.  In that regard, it ispreconfigured as follows.* A single account is created and allocated 1 billion ether.* All APIs are enabled on both `rpc` and `ipc` interfaces.* Account 0 is unlocked* Networking is configured to not look for or connect to any peers.* The `networkid` of `1234` is used.* Verbosity is set to `5` (DEBUG)* Mining is enabled with a single thread.* The RPC interface *tries* to bind to 8545 but will find an open port if this  port is not available.* The DevP2P interface *tries* to bind to 30303 but will find an open port if this  port is not available.## GotchasIf you are running with `mining` enabled, which is default for `DevGethProcess`,then you will likely need to generate the `DAG` manually.  If you do not, thenit will auto-generate the first time you run the process and this takes awhile.To generate it manually:```sh$ geth makedag 0 ~/.ethash```This is especially important in CI environments like Travis-CI where yourprocess will likely timeout during generation.## DevelopmentClone the repository:```shell$ git clone git@github.com:ethereum/py-geth.git````Next, run the following from the newly-created `py-geth` directory:```sh$ python -m pip install -e &quot;.[dev]&quot;```### Running the testsYou can run the tests with:```shpytest tests```## Developer SetupIf you would like to hack on py-geth, please check out the [Snake CharmersTactical Manual](https://github.com/ethereum/snake-charmers-tactical-manual)for information on how we do:* Testing* Pull Requests* Code Style* Documentation### Development Environment SetupYou can set up your dev environment with:```shgit clone git@github.com:ethereum/py-geth.gitcd py-gethvirtualenv -p python3 venv. venv/bin/activatepython -m pip install -e &quot;.[dev]&quot;```### Release setupTo release a new version:```shmake release bump=$$VERSION_PART_TO_BUMP$$```#### How to bumpversionThe version format for this repo is `{major}.{minor}.{patch}` for stable, and`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).To issue the next version in line, specify which part to bump,like `make release bump=minor` or `make release bump=devnum`. This is typically done from themaster branch, except when releasing a beta (in which case the beta is released from master,and the previous stable branch is released from said branch).If you are in a beta version, `make release bump=stage` will switch to a stable.To issue an unstable version when the current version is stable, specify thenew version explicitly, like `make release bump=&quot;--new-version 4.0.0-alpha.1 devnum&quot;`## Adding Support For New Geth VersionsThere is an automation script to facilitate adding support for new geth versions: `update_geth.py`To add support for a geth version, run the following line from the py-geth directory, substitutingthe version for the one you wish to add support for. Note that the `v` in the versioning isoptional.```shell$ python update_geth.py v1_10_9```To introduce support for more than one version, pass in the versions in increasing order,ending with the latest version.```shell$ python update_geth.py v1_10_7 v1_10_8 v1_10_9```Always review your changes before committing as something may cause this existing pattern to change at some point. It is best to compare the git difference with a previous commit that introduced support for a new geth version to make sure everything looks good.</longdescription>
</pkgmetadata>