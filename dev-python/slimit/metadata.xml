<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>::      _____ _      _____ __  __ _____ _______     / ____| |    |_   _|  \/  |_   _|__   __|    | (___ | |      | | | \  / | | |    | |     \___ \| |      | | | |\/| | | |    | |     ____) | |____ _| |_| |  | |_| |_   | |    |_____/|______|_____|_|  |_|_____|  |_|Welcome to SlimIt==================================`SlimIt` is a JavaScript minifier written in Python.It compiles JavaScript into more compact code so that it downloadsand runs faster.`SlimIt` also provides a library that includes a JavaScript parser,lexer, pretty printer and a tree visitor.`http://slimit.readthedocs.org/ &lt;http://slimit.readthedocs.org/&gt;`_Installation------------::    $ [sudo] pip install slimitOr the bleeding edge version from the git master branch:::    $ [sudo] pip install git+https://github.com/rspivak/slimit.git#egg=slimitThere is also an official DEB package available at`http://packages.debian.org/sid/slimit &lt;http://packages.debian.org/sid/slimit&gt;`_Let's minify some code----------------------From the command line:::    $ slimit -h    Usage: slimit [options] [input file]    If no input file is provided STDIN is used by default.    Minified JavaScript code is printed to STDOUT.    Options:      -h, --help            show this help message and exit      -m, --mangle          mangle names      -t, --mangle-toplevel                            mangle top level scope (defaults to False)    $ cat test.js    var foo = function( obj ) {            for ( var name in obj ) {                    return false;            }            return true;    };    $    $ slimit --mangle &lt; test.js    var foo=function(a){for(var b in a)return false;return true;};Or using library API:&gt;&gt;&gt; from slimit import minify&gt;&gt;&gt; text = &quot;&quot;&quot;... var foo = function( obj ) {...         for ( var name in obj ) {...                 return false;...         }...         return true;... };... &quot;&quot;&quot;&gt;&gt;&gt; print minify(text, mangle=True, mangle_toplevel=True)var a=function(a){for(var b in a)return false;return true;};Iterate over, modify a JavaScript AST and pretty print it---------------------------------------------------------&gt;&gt;&gt; from slimit.parser import Parser&gt;&gt;&gt; from slimit.visitors import nodevisitor&gt;&gt;&gt; from slimit import ast&gt;&gt;&gt;&gt;&gt;&gt; parser = Parser()&gt;&gt;&gt; tree = parser.parse('for(var i=0; i&lt;10; i++) {var x=5+i;}')&gt;&gt;&gt; for node in nodevisitor.visit(tree):...     if isinstance(node, ast.Identifier) and node.value == 'i':...         node.value = 'hello'...&gt;&gt;&gt; print tree.to_ecma() # print awesome javascript :)for (var hello = 0; hello &lt; 10; hello++) {  var x = 5 + hello;}&gt;&gt;&gt;Writing custom node visitor---------------------------&gt;&gt;&gt; from slimit.parser import Parser&gt;&gt;&gt; from slimit.visitors.nodevisitor import ASTVisitor&gt;&gt;&gt;&gt;&gt;&gt; text = &quot;&quot;&quot;... var x = {...     &quot;key1&quot;: &quot;value1&quot;,...     &quot;key2&quot;: &quot;value2&quot;... };... &quot;&quot;&quot;&gt;&gt;&gt;&gt;&gt;&gt; class MyVisitor(ASTVisitor):...     def visit_Object(self, node):...         &quot;&quot;&quot;Visit object literal.&quot;&quot;&quot;...         for prop in node:...             left, right = prop.left, prop.right...             print 'Property key=%s, value=%s' % (left.value, right.value)...             # visit all children in turn...             self.visit(prop)...&gt;&gt;&gt;&gt;&gt;&gt; parser = Parser()&gt;&gt;&gt; tree = parser.parse(text)&gt;&gt;&gt; visitor = MyVisitor()&gt;&gt;&gt; visitor.visit(tree)Property key=&quot;key1&quot;, value=&quot;value1&quot;Property key=&quot;key2&quot;, value=&quot;value2&quot;Using lexer in your project---------------------------&gt;&gt;&gt; from slimit.lexer import Lexer&gt;&gt;&gt; lexer = Lexer()&gt;&gt;&gt; lexer.input('a = 1;')&gt;&gt;&gt; for token in lexer:...     print token...LexToken(ID,'a',1,0)LexToken(EQ,'=',1,2)LexToken(NUMBER,'1',1,4)LexToken(SEMI,';',1,5)You can get one token at a time using ``token`` method:&gt;&gt;&gt; lexer.input('a = 1;')&gt;&gt;&gt; while True:...     token = lexer.token()...     if not token:...         break...     print token...LexToken(ID,'a',1,0)LexToken(EQ,'=',1,2)LexToken(NUMBER,'1',1,4)LexToken(SEMI,';',1,5)`LexToken` instance has different attributes:&gt;&gt;&gt; lexer.input('a = 1;')&gt;&gt;&gt; token = lexer.token()&gt;&gt;&gt; token.type, token.value, token.lineno, token.lexpos('ID', 'a', 1, 0)Benchmarks----------**SAM** - JQuery size after minification in bytes (the smaller number the better)+-------------------------------+------------+------------+------------+| Original jQuery 1.6.1 (bytes) | SlimIt SAM | rJSmin SAM | jsmin SAM  |+===============================+============+============+============+| 234,995                       | 94,290     | 134,215    | 134,819    |+-------------------------------+------------+------------+------------+Roadmap-------- when doing name mangling handle cases with 'eval' and 'with'- foo[&quot;bar&quot;] ==&gt; foo.bar- consecutive declarations: var a = 10; var b = 20; ==&gt; var a=10,b=20;- reduce simple constant expressions if the result takes less space:  1 +2 * 3 ==&gt; 7- IF statement optimizations  1. if (foo) bar(); else baz(); ==&gt; foo?bar():baz();  2. if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();  3. if (foo) bar(); ==&gt; foo&amp;&amp;bar();  4. if (!foo) bar(); ==&gt; foo||bar();  5. if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();  6. if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}- remove unreachable code that follows a return, throw, break or  continue statement, except function/variable declarations- parsing speed improvementsAcknowledgments---------------- The lexer and parser are built with `PLY &lt;http://www.dabeaz.com/ply/&gt;`_- Several test cases and regexes from `jslex &lt;https://bitbucket.org/ned/jslex&gt;`_- Some visitor ideas - `pycparser &lt;http://code.google.com/p/pycparser/&gt;`_- Many grammar rules are taken from `rkelly &lt;https://github.com/tenderlove/rkelly&gt;`_- Name mangling and different optimization ideas - `UglifyJS &lt;https://github.com/mishoo/UglifyJS&gt;`_- ASI implementation was inspired by `pyjsparser &lt;http://bitbucket.org/mvantellingen/pyjsparser&gt;`_License-------The MIT License (MIT)Change History==============0.8.1 (2013-03-26)------------------- Bug fix: https://github.com/rspivak/slimit/pull/45  Fix syntax error in the output of for statement with some form of expressions0.8.0 (2013-03-23)------------------- Python 3.x support- Bug fix: https://github.com/rspivak/slimit/issues/42  slimit removes parentheses from ternary expression, causes syntax error in jQuery- Bug fix: https://github.com/rspivak/slimit/issues/37  simple identifier in FOR init- Bug fix: https://github.com/rspivak/slimit/issues/36  using $ for mangled function names conflicts with jQuery0.7.4 (2012-06-5)------------------- Bug fix: https://github.com/rspivak/slimit/issues/34  'class' is reserved keyword now0.7.3 (2012-05-21)------------------- Bug fix (unary op in FOR init): https://github.com/rspivak/slimit/pull/330.7.2 (2012-05-17)------------------- Added support for get/set properties:  https://github.com/rspivak/slimit/issues/320.7.1 (2012-05-10)------------------- Function call support in FOR init section:  https://github.com/rspivak/slimit/pull/310.7 (2012-04-16)----------------- Multiline string support: https://github.com/rspivak/slimit/issues/240.6.2 (2012-04-07)------------------- Bug fix: https://github.com/rspivak/slimit/issues/29- Bug fix: https://github.com/rspivak/slimit/issues/280.6.1 (2012-03-15)------------------- Added command-line option *-t/--mangle-toplevel* to turn on  global scope name mangling. As of this version it's off by  default: https://github.com/rspivak/slimit/issues/27- Removed dependency on a 'distribute' package- Bug fix: https://github.com/rspivak/slimit/issues/26- Bug fix: https://github.com/rspivak/slimit/issues/250.6 (2012-02-04)----------------- Added optimization: foo[&quot;bar&quot;] ==&gt; foo.bar- Added base class for custom AST node visitors- Documentation updates- Bug fix: https://github.com/rspivak/slimit/issues/22- Bug fix: https://github.com/rspivak/slimit/issues/210.5.5 (2011-10-05)------------------- Bugfix: https://github.com/rspivak/slimit/issues/70.5.4 (2011-10-01)------------------- Bugfix: https://github.com/rspivak/slimit/issues/6  Division with &quot;this&quot; fails0.5.3 (2011-06-29)------------------- Bugfix: https://github.com/rspivak/slimit/issues/50.5.2 (2011-06-14)------------------- Bugfix: https://github.com/rspivak/slimit/issues/4- Bugfix: https://github.com/rspivak/slimit/issues/30.5.1 (2011-06-06)------------------- Bugfix: https://github.com/rspivak/slimit/issues/20.5 (2011-06-06)----------------- Added name mangling0.4 (2011-05-12)----------------- Minify more by removing block braces { }- More tests0.3.2 (2011-05-09)------------------- More hacks to use pre-generated lex and yacc tables when called from  the command line0.3.1 (2011-05-09)------------------- Use pre-generated lex and yacc tables when called from the command line0.3 (2011-05-09)----------------- Added minifier0.2 (2011-05-07)----------------- Added a JavaScript parser- Added pretty printer- Added node visitor0.1 (2011-05-02)----------------- Initial public version. It contains only a JavaScript lexer</longdescription>
</pkgmetadata>