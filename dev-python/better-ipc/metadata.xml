<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Better IPC&lt;a href=&quot;https://pypi.org/project/better-ipc/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/better-ipc&quot;&gt;&lt;/a&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/better-ipc&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/MiroslavRosenov/better-ipc&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/MiroslavRosenov/better-ipc&quot;&gt;&lt;a href=&quot;https://discord.gg/Rpg7zjFYsh&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/875005644594372638?label=discord&quot;&gt;&lt;/a&gt;## High-performance inter-process communication library designed to work with the latest version of [discord.py](https://github.com/Rapptz/discord.py)&lt;img src=&quot;https://raw.githubusercontent.com/MiroslavRosenov/better-ipc/main/banner.png&quot;&gt;This library is *based* on [discord-ext-ipc](https://github.com/Ext-Creators/discord-ext-ipc), which is no longer maintained.# Installation&gt; ### Stable version#### For Linux```shellpython3 -m pip install -U better-ipc```#### For Windows```shellpy -m pip install -U better-ipc```&gt; ### Development version#### For Linux```shellpython3 -m pip install -U git+https://github.com/MiroslavRosenov/better-ipc```#### For Windows```shellpy -m pip install -U git+https://github.com/MiroslavRosenov/better-ipc```# Support[Support server](https://discord.gg/Rpg7zjFYsh)[Official documentation](https://docs.better-ipc.xyz)# Examples### Client example```pythonimport discordfrom typing import Dictfrom discord.ext import commands, ipcfrom discord.ext.ipc.server import Serverfrom discord.ext.ipc.objects import ClientPayloadclass MyBot(commands.Bot):    def __init__(self) -&gt; None:        intents = discord.Intents.all()        super().__init__(            command_prefix=&quot;$.&quot;,            intents=intents,        )        self.ipc = ipc.Server(self, secret_key=&quot;üêº&quot;)    async def setup_hook(self) -&gt; None:        await self.ipc.start()    @Server.route()    async def get_user_data(self, data: ClientPayload) -&gt; Dict:        user = self.get_user(data.user_id)        return user._to_minimal_user_json()```### Cog example```pythonfrom typing import Dictfrom discord.ext import commands, ipcfrom discord.ext.ipc.server import Serverfrom discord.ext.ipc.errors import IPCErrorfrom discord.ext.ipc.objects import ClientPayloadclass Routes(commands.Cog):    def __init__(self, bot: commands.Bot):        self.bot = bot        if not hasattr(bot, &quot;ipc&quot;):            bot.ipc = ipc.Server(self.bot, secret_key=&quot;üêº&quot;)        async def cog_load(self) -&gt; None:        await self.bot.ipc.start()    async def cog_unload(self) -&gt; None:        await self.bot.ipc.stop()        self.bot.ipc = None    @Server.route()    async def get_user_data(self, data: ClientPayload) -&gt; Dict:        user = self.bot.get_user(data.user_id)        return user._to_minimal_user_json()async def setup(bot):    await bot.add_cog(Routes(bot))```### Inside your web application```pythonfrom quart import Quartfrom discord.ext.ipc import Clientapp = Quart(__name__)ipc = Client(secret_key=&quot;üêº&quot;)@app.route('/')async def main():    resp = await ipc.request(&quot;get_user_data&quot;, user_id=383946213629624322)    return str(resp.response)if __name__ == '__main__':    app.run()```</longdescription>
</pkgmetadata>