<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Pure Tabix==========[![Build Status](https://circleci.com/gh/sanogenetics/puretabix.svg?style=svg)](https://app.circleci.com/pipelines/github/sanogenetics/puretabix)[![PyPI version](https://badge.fury.io/py/puretabix.svg)](https://badge.fury.io/py/puretabix)This is a pure-python Tabix index parser. Useful as an alternative to [PySAM](https://pypi.org/project/pysam) and [PyTabix](https://pypi.org/project/pytabix)for rapid read access by position to Tabix indexed block gzipped files such as VCFs and other common bioinfomatics formats.See https://samtools.github.io/hts-specs/tabix.pdf and https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3042176 for informationabout Tabix and the detailed file format specification.```pyfrom puretabix import TabixIndexedFiletabix_indexed_file = TabixIndexedFile.from_files(open('somefile.vcf.gz', 'rb'), open('somefile.vcf.gz.tbi', 'rb'))tabix_indexed_file.fetch(&quot;1&quot;, 1000, 5000)```Documentation is supported via Python built-in module [PyDoc](https://docs.python.org/3/library/pydoc.html): `python3 -m pydoc -b puretabix`VCF---Included in this package is tooling for reading and writing VCF lines.To read a file:```pythonfrom puretabix.vcf import read_vcf_lineswith open(&quot;source.vcf&quot;) as input:    for vcfline in read_vcf_lines(input):        if vcfline.is_comment:            # its a comment or meta-information            pass        else:            # access the parsed information            if &quot;PASS&quot; not in vcfline._filter:                print(f&quot;{vcfline.chrom} {vcfline.pos} {vcfline.get_genotype()}&quot;)```To write some lines:```pythonfrom puretabix.vcf import VCFLinewith open(&quot;output.vcf&quot;) as output:    output.write(str(VCFLine.as_comment_key_dict(&quot;fileformat&quot;, &quot;VCFv4.2&quot;)))    output.write(&quot;\n&quot;)    output.write(        str(            VCFLine.as_comment_raw(                &quot;\t&quot;.join(                    (                        &quot;CHROM&quot;,                        &quot;POS&quot;,                        &quot;ID&quot;,                        &quot;REF&quot;,                        &quot;ALT&quot;,                        &quot;QUAL&quot;,                        &quot;FILTER&quot;,                        &quot;INFO&quot;,                        &quot;FORMAT&quot;,                        &quot;SAMPLE&quot;,                    )                )            )        )    )    output.write(&quot;\n&quot;)    output.write(        str(            VCFLine.as_data(                &quot;chr1&quot;,                123,                (&quot;rs123&quot;,),                &quot;A&quot;,                (&quot;C&quot;,),                &quot;.&quot;,                (&quot;PASS&quot;,),                {},                ({&quot;GT&quot;: &quot;1/0&quot;},),            )        )    )    output.write(&quot;\n&quot;)```VCF with index--------------If there is a tabix index for a block gzipped VCF file, that index can be used for fast random access```pythonimport puretabixwith open(&quot;input.vcf.gz&quot;, &quot;rb&quot;) as vcf:    with open(&quot;input.vcf.gz.tbi&quot;, &quot;rb&quot;) as vcf_tbi:        indexed = puretabix.TabixIndexedVCFFile.from_files(vcf, vcf_tbi)        vcfline = tuple(indexed.fetch_vcf_lines(&quot;chr1&quot;, 1108138))        assert vcfline.chrom == &quot;chr1&quot;        assert vcfline.pos == 1108138        print(f&quot;gt = {vcfline.get_genotype()}&quot;)```development-----------TL;DR: `pip install -e '.[dev]' &amp;&amp; pre-commit install````shpip install -e '.[dev]'  # Install using pip including development extraspre-commit install  # Enable pre-commit hookspre-commit run --all-files  # Run pre-commit hooks without committing# Note pre-commit is configured to use:# - seed-isort-config to better categorise third party imports# - isort to sort imports# - black to format codepip-compile  # Freeze dependenciespytest  # Run testscoverage run --source=puretabix -m pytest &amp;&amp; coverage report -m  # Run tests, print coveragemypy .  # Type checkingpipdeptree  # Print dependenciesscalene --outfile tests/perf_test.txt --profile-all --cpu-sampling-rate 0.0001 tests/perf_test.py  # performance measurements```Global git ignores per https://help.github.com/en/github/using-git/ignoring-files#configuring-ignored-files-for-all-repositories-on-your-computerFor release to PyPI see https://packaging.python.org/tutorials/packaging-projects/For information about packaging wheels see https://realpython.com/python-wheels/```shgit checkout mastergit pullgit add setup.py CHANGES.txtgit commit -m&quot;prepare for x.x.x&quot;git pushgit tag x.x.xgit push origin x.x.xpython3 setup.py sdist bdist_wheel &amp;&amp; python3 -m twine upload dist/*```acknowledgements----------------Inspired by @yangmqglobe code in https://github.com/cggh/scikit-allel/pull/297</longdescription>
</pkgmetadata>