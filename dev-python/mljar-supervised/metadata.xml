<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MLJAR Automated Machine Learning for Humans[![Tests status](https://github.com/mljar/mljar-supervised/actions/workflows/run-tests.yml/badge.svg)](https://github.com/mljar/mljar-supervised/actions/workflows/run-tests.yml)[![PyPI version](https://badge.fury.io/py/mljar-supervised.svg)](https://badge.fury.io/py/mljar-supervised)[![Anaconda-Server Badge](https://anaconda.org/conda-forge/mljar-supervised/badges/version.svg)](https://anaconda.org/conda-forge/mljar-supervised)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/mljar-supervised.svg)](https://pypi.python.org/pypi/mljar-supervised/)[![Anaconda-Server Badge](https://anaconda.org/conda-forge/mljar-supervised/badges/platforms.svg)](https://anaconda.org/conda-forge/mljar-supervised)[![Anaconda-Server Badge](https://anaconda.org/conda-forge/mljar-supervised/badges/license.svg)](https://anaconda.org/conda-forge/mljar-supervised)[![Downloads](https://pepy.tech/badge/mljar-supervised)](https://pepy.tech/project/mljar-supervised)&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/mljar/mljar-examples/master/media/AutoML_overview_mljar_v3.svg&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://supervised.mljar.com/&quot; target=&quot;_blank&quot;&gt;https://supervised.mljar.com/&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/mljar/mljar-supervised&quot; target=&quot;_blank&quot;&gt;https://github.com/mljar/mljar-supervised&lt;/a&gt;**Looking for commercial support**: Please contact us by [email](https://mljar.com/contact/) for details&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/mljar/visual-identity/raw/main/robots/robot_docs.png&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;---## Table of Contents - [Automated Machine Learning](https://github.com/mljar/mljar-supervised#automated-machine-learning) - [What's good in it?](https://github.com/mljar/mljar-supervised#whats-good-in-it) - [Automatic Documentation](https://github.com/mljar/mljar-supervised#automatic-documentation) - [Available Modes](https://github.com/mljar/mljar-supervised#available-modes) - [Fairness Aware Training](https://github.com/mljar/mljar-supervised#fairness-aware-training) - [Examples](https://github.com/mljar/mljar-supervised#examples) - [FAQ](https://github.com/mljar/mljar-supervised#faq) - [Documentation](https://github.com/mljar/mljar-supervised#documentation) - [Installation](https://github.com/mljar/mljar-supervised#installation) - [Demo](https://github.com/mljar/mljar-supervised#demo) - [Contributing](https://github.com/mljar/mljar-supervised#contributing) - [Cite](https://github.com/mljar/mljar-supervised#cite) - [License](https://github.com/mljar/mljar-supervised#license) - [Commercial support](https://github.com/mljar/mljar-supervised#commercial-support) - [MLJAR](https://github.com/mljar/mljar-supervised#mljar) # Automated Machine Learning The `mljar-supervised` is an Automated Machine Learning Python package that works with tabular data. It is designed to save time for a data scientist. It abstracts the common way to preprocess the data, construct the machine learning models, and perform hyper-parameters tuning to find the best model :trophy:. It is no black-box as you can see exactly how the ML pipeline is constructed (with a detailed Markdown report for each ML model). The `mljar-supervised` will help you with: - explaining and understanding your data (Automatic Exploratory Data Analysis), - trying many different machine learning models (Algorithm Selection and Hyper-Parameters tuning), - creating Markdown reports from analysis with details about all models (Automatic-Documentation), - saving, re-running and loading the analysis and ML models.It has four built-in modes of work: - `Explain` mode, which is ideal for explaining and understanding the data, with many data explanations, like decision trees visualization, linear models coefficients display, permutation importances and SHAP explanations of data, - `Perform` for building ML pipelines to use in production, - `Compete` mode that trains highly-tuned ML models with ensembling and stacking, with a purpose to use in ML competitions. - `Optuna` mode that can be used to search for highly-tuned ML models, should be used when the performance is the most important, and computation time is not limited (it is available from version `0.10.0`)Of course, you can further customize the details of each `mode` to meet the requirements.## What's good in it? - It is using many algorithms: `Baseline`, `Linear`, `Random Forest`, `Extra Trees`, `LightGBM`, `Xgboost`, `CatBoost`, `Neural Networks`, and `Nearest Neighbors`.- It can compute Ensemble based on greedy algorithm from [Caruana paper](http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf).- It can stack models to build level 2 ensemble (available in `Compete` mode or after setting `stack_models` parameter).- It can do features preprocessing, like: missing values imputation and converting categoricals. What is more, it can also handle target values preprocessing.- It can do advanced features engineering, like: [Golden Features](https://supervised.mljar.com/features/golden_features/), [Features Selection](https://supervised.mljar.com/features/features_selection/), Text and Time Transformations.- It can tune hyper-parameters with `not-so-random-search` algorithm (random-search over defined set of values) and hill climbing to fine-tune final models.- It can compute the `Baseline` for your data. That you will know if you need Machine Learning or not!- It has extensive explanations. This package is training simple `Decision Trees` with `max_depth &lt;= 5`, so you can easily visualize them with amazing [dtreeviz](https://github.com/parrt/dtreeviz) to better understand your data.- The `mljar-supervised` is using simple linear regression and include its coefficients in the summary report, so you can check which features are used the most in the linear model.- It cares about explainability of models: for every algorithm, the feature importance is computed based on permutation. Additionally, for every algorithm the SHAP explanations are computed: feature importance, dependence plots, and decision plots (explanations can be switched off with `explain_level` parameter).- There is automatic documentation for every ML experiment run with AutoML. The `mljar-supervised` creates markdown reports from AutoML training full of ML details, metrics and charts. &lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/mljar/visual-identity/main/media/infograph.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;# Automatic Documentation## The AutoML ReportThe report from running AutoML will contain the table with infomation about each model score and time needed to train the model. For each model there is a link, which you can click to see model's details. The performance of all ML models is presented as scatter and box plots so you can visually inspect which algorithms perform the best :trophy:.![AutoML leaderboard](https://github.com/mljar/mljar-examples/blob/master/media/automl_summary.gif)## The `Decision Tree` ReportThe example for `Decision Tree` summary with trees visualization. For classification tasks additional metrics are provided:- confusion matrix- threshold (optimized in the case of binary classification task)- F1 score- Accuracy- Precision, Recall, MCC![Decision Tree summary](https://github.com/mljar/mljar-examples/blob/master/media/decision_tree_summary.gif)## The `LightGBM` ReportThe example for `LightGBM` summary:![Decision Tree summary](https://github.com/mljar/mljar-examples/blob/master/media/lightgbm_summary.gif)## Available ModesIn the [docs](https://supervised.mljar.com/features/modes/) you can find details about AutoML modes are presented in the table .&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/mljar/visual-identity/main/media/mljar_modes.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;### Explain ```pyautoml = AutoML(mode=&quot;Explain&quot;)```It is aimed to be used when the user wants to explain and understand the data. - It is using 75%/25% train/test split.  - It is using: `Baseline`, `Linear`, `Decision Tree`, `Random Forest`, `Xgboost`, `Neural Network` algorithms and ensemble.  - It has full explanations: learning curves, importance plots, and SHAP plots.### Perform```pyautoml = AutoML(mode=&quot;Perform&quot;)```It should be used when the user wants to train a model that will be used in real-life use cases. - It is using 5-fold CV. - It is using: `Linear`, `Random Forest`, `LightGBM`, `Xgboost`, `CatBoost` and `Neural Network`. It uses ensembling.  - It has learning curves and importance plots in reports.### Compete```pyautoml = AutoML(mode=&quot;Compete&quot;)```It should be used for machine learning competitions. - It adapts the validation strategy depending on dataset size and `total_time_limit`. It can be: train/test split (80/20), 5-fold CV or 10-fold CV.  - It is using: `Linear`, `Decision Tree`, `Random Forest`, `Extra Trees`, `LightGBM`, `Xgboost`, `CatBoost`, `Neural Network` and `Nearest Neighbors`. It uses ensemble and **stacking**.  - It has only learning curves in the reports.### Optuna```pyautoml = AutoML(mode=&quot;Optuna&quot;, optuna_time_budget=3600)```It should be used when the performance is the most important and time is not limited.- It is using 10-fold CV- It is using: `Random Forest`, `Extra Trees`, `LightGBM`, `Xgboost`, and `CatBoost`. Those algorithms are tuned by `Optuna` framework for `optuna_time_budget` seconds, each. Algorithms are tuned with original data, without advanced feature engineering.- It is using advanced feature engineering, stacking and ensembling. The hyperparameters found for original data are reused with those steps.- It produces learning curves in the reports.## How to save and load AutoML?All models in the AutoML are saved and loaded automatically. No need to call `save()` or `load()`.### Example:#### Train AutoML```pythonautoml = AutoML(results_path=&quot;AutoML_classifier&quot;)automl.fit(X, y)```You will have all models saved in the `AutoML_classifier` directory. Each model will have a separate directory with the `README.md` file with all details from the training.#### Compute predictions```pythonautoml = AutoML(results_path=&quot;AutoML_classifier&quot;)automl.predict(X)```The  AutoML automatically loads models from the `results_path` directory. If you will call `fit()` on already trained AutoML then you will get a warning message that AutoML is already fitted.### Why do you automatically save all models?All models are automatically saved to be able to restore the training after interruption. For example, you are training AutoML for 48 hours, and after 47 hours there is some unexpected interruption. In MLJAR AutoML you just call the same training code after the interruption and AutoML reloads already trained models and finish the training.## Supported evaluation metrics (`eval_metric` argument in `AutoML()`)- for binary classification: `logloss`, `auc`, `f1`, `average_precision`, `accuracy`- default is `logloss`- for mutliclass classification: `logloss`, `f1`, `accuracy` - default is `logloss`- for regression: `rmse`, `mse`, `mae`, `r2`, `mape`, `spearman`, `pearson` - default is `rmse`If you don't find `eval_metric` that you need, please add a new issue. We will add it.## Fairness Aware TrainingStarting from version `1.0.0` AutoML can optimize Machine Learning pipline with sensitive features. There are following fairness releated arguments in the AutoML constructor: - `fairness_metric` - metric which will be used to decide if the model is fair, - `fairness_threshold` - threshold used in decision about model fairness, - `privileged_groups` - privileged groups used in fairness metrics computation, - `underprivileged_groups` - underprivileged groups used in fairness metrics computation.The `fit()` method accepts `sensitive_features`. When sensitive features are passed to AutoML, the best model will be selected among fair models only. In the AutoML reports additional information about fairness metrics will be added. The MLJAR AutoML supports two methods for bias mitigation: - Sample Weighting - assigns weights to samples to treat samples equally, - Smart Grid Search - similar to Sample Weighting where different weights are checked to optimize fairness metric.The fair ML bulding can be used with all algorithms including `Ensemble` and `Stacked Ensemble`. We support three Machine Learning tasks: - binary classification, - mutliclass classification, - regression.Example code:```pythonfrom sklearn.model_selection import train_test_splitfrom sklearn.datasets import fetch_openmlfrom supervised.automl import AutoMLdata = fetch_openml(data_id=1590, as_frame=True)X = data.datay = (data.target == &quot;&gt;50K&quot;) * 1sensitive_features = X[[&quot;sex&quot;]]X_train, X_test, y_train, y_test, S_train, S_test = train_test_split(    X, y, sensitive_features, stratify=y, test_size=0.75, random_state=42)automl = AutoML(    algorithms=[        &quot;Xgboost&quot;    ],    train_ensemble=False,    fairness_metric=&quot;demographic_parity_ratio&quot;,      fairness_threshold=0.8,    privileged_groups = [{&quot;sex&quot;: &quot;Male&quot;}],    underprivileged_groups = [{&quot;sex&quot;: &quot;Female&quot;}],)automl.fit(X_train, y_train, sensitive_features=S_train)```You can read more about fairness aware AutoML training in our article https://mljar.com/blog/fairness-machine-learning/![Fairness aware AutoML](https://raw.githubusercontent.com/mljar/visual-identity/main/automl/fairness-automl.gif)# Examples## :point_right: Binary Classification ExampleThere is a simple interface available with `fit` and `predict` methods.```pythonimport pandas as pdfrom sklearn.model_selection import train_test_splitfrom supervised.automl import AutoMLdf = pd.read_csv(    &quot;https://raw.githubusercontent.com/pplonski/datasets-for-start/master/adult/data.csv&quot;,    skipinitialspace=True,)X_train, X_test, y_train, y_test = train_test_split(    df[df.columns[:-1]], df[&quot;income&quot;], test_size=0.25)automl = AutoML()automl.fit(X_train, y_train)predictions = automl.predict(X_test)```AutoML `fit` will print:```pyCreate directory AutoML_1AutoML task to be solved: binary_classificationAutoML will use algorithms: ['Baseline', 'Linear', 'Decision Tree', 'Random Forest', 'Xgboost', 'Neural Network']AutoML will optimize for metric: logloss1_Baseline final logloss 0.5519845471086654 time 0.08 seconds2_DecisionTree final logloss 0.3655910192804364 time 10.28 seconds3_Linear final logloss 0.38139916864708445 time 3.19 seconds4_Default_RandomForest final logloss 0.2975204390214936 time 79.19 seconds5_Default_Xgboost final logloss 0.2731086827200411 time 5.17 seconds6_Default_NeuralNetwork final logloss 0.319812276905242 time 21.19 secondsEnsemble final logloss 0.2731086821194617 time 1.43 seconds```- the AutoML results in [Markdown report](https://github.com/mljar/mljar-examples/tree/master/Income_classification/AutoML_1#automl-leaderboard)- the Xgboost [Markdown report](https://github.com/mljar/mljar-examples/blob/master/Income_classification/AutoML_1/5_Default_Xgboost/README.md), please take a look at amazing dependence plots produced by SHAP package :sparkling_heart:- the Decision Tree [Markdown report](https://github.com/mljar/mljar-examples/blob/master/Income_classification/AutoML_1/2_DecisionTree/README.md), please take a look at beautiful tree visualization :sparkles:- the Logistic Regression [Markdown report](https://github.com/mljar/mljar-examples/blob/master/Income_classification/AutoML_1/3_Linear/README.md), please take a look at coefficients table, and you can compare the SHAP plots between (Xgboost, Decision Tree and Logistic Regression) :coffee:## :point_right: Multi-Class Classification ExampleThe example code for classification of the optical recognition of handwritten digits dataset. Running this code in less than 30 minutes will result in test accuracy ~98%.```pythonimport pandas as pd # scikit learn utilitesfrom sklearn.datasets import load_digitsfrom sklearn.metrics import accuracy_scorefrom sklearn.model_selection import train_test_split# mljar-supervised packagefrom supervised.automl import AutoML# load the datadigits = load_digits()X_train, X_test, y_train, y_test = train_test_split(    pd.DataFrame(digits.data), digits.target, stratify=digits.target, test_size=0.25,    random_state=123)# train models with AutoMLautoml = AutoML(mode=&quot;Perform&quot;)automl.fit(X_train, y_train)# compute the accuracy on test datapredictions = automl.predict_all(X_test)print(predictions.head())print(&quot;Test accuracy:&quot;, accuracy_score(y_test, predictions[&quot;label&quot;].astype(int)))```## :point_right: Regression ExampleRegression example on `California Housing` house prices data.```pythonimport numpy as npimport pandas as pdfrom sklearn.datasets import fetch_california_housingfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import mean_squared_errorfrom supervised.automl import AutoML # mljar-supervised# Load the datahousing = fetch_california_housing()X_train, X_test, y_train, y_test = train_test_split(    pd.DataFrame(housing.data, columns=housing.feature_names),    housing.target,    test_size=0.25,    random_state=123,)# train models with AutoMLautoml = AutoML(mode=&quot;Explain&quot;)automl.fit(X_train, y_train)# compute the MSE on test datapredictions = automl.predict(X_test)print(&quot;Test MSE:&quot;, mean_squared_error(y_test, predictions))```## :point_right: More Examples- [**Income classification**](https://github.com/mljar/mljar-examples/tree/master/Income_classification) - it is a binary classification task on census data- [**Iris classification**](https://github.com/mljar/mljar-examples/tree/master/Iris_classification) - it is a multiclass classification on Iris flowers data- [**House price regression**](https://github.com/mljar/mljar-examples/tree/master/House_price_regression) - it is a regression task on Boston houses data# FAQ&lt;details&gt;&lt;summary&gt;What method is used for hyperparameters optimization?&lt;/summary&gt;  - For modes: `Explain`, `Perform` and `Compete` there is used a random search method combined with hill climbing. In this approach all checked models are saved and used for building Ensemble.  - For mode: `Optuna` the Optuna framework is used. It is using TPE sampler for tuning. Models checked during Optuna hyperparameters search are not saved, only the best model is saved (final model from tuning). You can check the details about checked hyperparameters from optuna by checking study files in `optuna` directory in your AutoML `results_path`.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;How to save and load AutoML?&lt;/summary&gt;The save and load of AutoML models is automatic. All models created during AutoML training are saved in the directory set in `results_path` (argument of `AutoML()` constructor). If there is no `results_path` set, then the directory is created based on following name convention: `AutoML_{number}` the `number` will be number from 1 to 1000 (depends which directory name will be free).Example save and load:```pythonautoml = AutoML(results_path='AutoML_1')automl.fit(X, y)```The all models from AutoML are saved in `AutoML_1` directory.To load models:```pythonautoml = AutoML(results_path='AutoML_1')automl.predict(X)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;How to set ML task (select between classification or regression)?&lt;/summary&gt;The MLJAR AutoML can work with:- binary classification- multi-class classification- regressionThe ML task detection is automatic based on target values. There can be situation if you want to manually force AutoML to select the ML task, then you need to set `ml_task` parameter. It can be set to `'binary_classification'`, `'multiclass_classification'`, `'regression'`.Example:```pythonautoml = AutoML(ml_task='regression')automl.fit(X, y)```In the above example the regression model will be fitted.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;How to reuse Optuna hyperparameters?&lt;/summary&gt;    You can reuse Optuna hyperparameters that were found in other AutoML training. You need to pass them in `optuna_init_params` argument. All hyperparameters found during Optuna tuning are saved in the `optuna/optuna.json` file (inside `results_path` directory).   Example:  ```python optuna_init = json.loads(open('previous_AutoML_training/optuna/optuna.json').read())  automl = AutoML(     mode='Optuna',     optuna_init_params=optuna_init ) automl.fit(X, y) ```   When reusing Optuna hyperparameters the Optuna tuning is simply skipped. The model will be trained with hyperparameters set in `optuna_init_params`. Right now there is no option to continue Optuna tuning with seed parameters.    &lt;/details&gt;&lt;details&gt;&lt;summary&gt;How to know the order of classes for binary or multiclass problem when using predict_proba?&lt;/summary&gt;To get predicted probabilites with information about class label please use the `predict_all()` method. It returns the pandas DataFrame with class names in the columns. The order of predicted columns is the same in the `predict_proba()` and `predict_all()` methods. The `predict_all()` method will additionaly have the column with the predicted class label.&lt;/details&gt;# Documentation  For details please check [mljar-supervised docs](https://supervised.mljar.com).# Installation  From PyPi repository:```pip install mljar-supervised```To install this package with conda run:```conda install -c conda-forge mljar-supervised```From source code:```git clone https://github.com/mljar/mljar-supervised.gitcd mljar-supervisedpython setup.py install```Installation for development```git clone https://github.com/mljar/mljar-supervised.gitvirtualenv venv --python=python3.6source venv/bin/activatepip install -r requirements.txtpip install -r requirements_dev.txt```Running in the docker:```FROM python:3.7-slim-busterRUN apt-get update &amp;&amp; apt-get -y updateRUN apt-get install -y build-essential python3-pip python3-devRUN pip3 -q install pip --upgradeRUN pip3 install mljar-supervised jupyterCMD [&quot;jupyter&quot;, &quot;notebook&quot;, &quot;--port=8888&quot;, &quot;--no-browser&quot;, &quot;--ip=0.0.0.0&quot;, &quot;--allow-root&quot;]```Install from GitHub with pip:```pip install -q -U git+https://github.com/mljar/mljar-supervised.git@master```# DemoIn the below demo GIF you will see:- MLJAR AutoML trained in Jupyter Notebook on titanic dataset- overview of created files- showcase of selected plots created during AutoML training- algorithm comparison report along with their plots- example of README file and csv file with results![](https://github.com/mljar/mljar-examples/raw/master/media/mljar_files.gif)# ContributingTo get started take a look at our [Contribution Guide](https://supervised.mljar.com/contributing/) for information about our process and where you can fit in!### Contributors&lt;a href=&quot;https://github.com/mljar/mljar-supervised/graphs/contributors&quot;&gt;  &lt;img src=&quot;https://contributors-img.web.app/image?repo=mljar/mljar-supervised&quot; /&gt;&lt;/a&gt;# CiteWould you like to cite MLJAR? Great! :)You can cite MLJAR as following:```@misc{mljar,  author    = {Aleksandra P\l{}o\'{n}ska and Piotr P\l{}o\'{n}ski},  year      = {2021},  publisher = {MLJAR},  address   = {\L{}apy, Poland},  title     = {MLJAR: State-of-the-art Automated Machine Learning Framework for Tabular Data.  Version 0.10.3},  url       = {https://github.com/mljar/mljar-supervised}}```Would love to hear from you how have you used MLJAR AutoML in your project. Please feel free to let us know at ![image](https://user-images.githubusercontent.com/6959032/118103228-f5ea9a00-b3d9-11eb-87ed-8cfb1f873f91.png)# License  The `mljar-supervised` is provided with [MIT license](https://github.com/mljar/mljar-supervised/blob/master/LICENSE).# Commercial supportLooking for commercial support? Do you need new feature implementation? Please contact us by [email](https://mljar.com/contact/) for details.# MLJAR &lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/mljar/mljar-examples/blob/master/media/large_logo.png&quot; width=&quot;314&quot; /&gt;&lt;/p&gt;The `mljar-supervised` is an open-source project created by [MLJAR](https://mljar.com). We care about ease of use in the Machine Learning. The [mljar.com](https://mljar.com) provides a beautiful and simple user interface for building machine learning models.</longdescription>
</pkgmetadata>