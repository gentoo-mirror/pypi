<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># autopage[Autopage](https://github.com/zaneb/autopage) is a Python library toautomatically display terminal output from a program in a pager (like `less`)whenever you need it, and never when you don't. And it only takes one line ofcode.You know how some CLI programs like `git` (and a handful of others, including`man` and `systemctl`) automatically pipe their output to `less`? Except not ifthere's less than one screen's worth of data. And if you redirect the output toa file or a pipe, it does the right thing instead. Colours are preserved. Don'tyou wish all programs worked like that? Now at least all of your Pythonprograms can.## LicenseÂ© 2020-2022 by Zane BitterOpen Source licensed under the terms of the Apache Software License, version2.0.## Installation[Autopage is available from PyPI](https://pypi.org/project/autopage/). Theeasiest way to install (preferably in a `virtualenv` virtual environment) iswith `pip`:    $ pip install autopage### On Fedora and CentOS/RHELAutopage is [packaged forFedora](https://packages.fedoraproject.org/pkgs/python-autopage/python3-autopage/)35 and later. To install:    # dnf install python3-autopageCopr repositories are available for older versions of Fedora and EPEL. Beforeattempting to install on those versions, first enable the copr repository:    # dnf copr enable zaneb/autopage### On Ubuntu and DebianAutopage is [packaged forUbuntu](https://packages.ubuntu.com/search?keywords=python3-autopage&amp;searchon=names)jammy and later, and [for Debian](https://packages.debian.org/python3-autopage)bookworm. To install:    # apt-get install python3-autopageA PPA is available for older versions of Ubuntu. Before attempting to installon those versions, first enable the PPA:    # add-apt-repository ppa:zaneb/autopage    # apt-get update### On GentooAutopage is [packaged forGentoo](https://packages.gentoo.org/packages/dev-python/autopage). To install:    # emerge dev-python/autopage## Basic UseThe `AutoPager` class provides a context manager that furnishes the outputstream to write to. Here is a basic example that reads from stdin and outputsto a pager connected to stdout:```pythonimport sysimport autopagewith autopage.AutoPager() as out:    for l in sys.stdin:        out.write(l)```If you are explicitly passing a stream to write to (rather than directlyreferencing a global variable such as `sys.stdout` then you may be able to addautomatic paging support with only a single line of code.## Paging help outputIf your program uses the `argparse` module from the standard library, you canensure that the help output is automatically paged when possible by changingthe import statement to:```pythonfrom autopage import argparse```If you don't control the module that imports `argparse`, you can instead call`autopage.argparse.monkey_patch()` to patch the module directly. This functioncan also be used as a context manager.## EnvironmentThe default pager command (`autopage.command.DefaultPager()`) allows the enduser to override the pager command by setting the `PAGER` environment variable.To disable this behaviour, pass`pager_command=autopage.command.PlatformPager()` to use the default pager forthe current platform, or pass a specific pager from `autopage.commands`. Thedefault pager command is `less` on most platforms. On AIX the default pagercommand is `more`, and on Windows `more.com`.The end user can also override the settings for `less` by setting the `LESS`environment variable. If not specified, the settings are determined by the`allow_color` and `line_buffering` options. By default ANSI control charactersfor setting colours are respected and the pager will not run if there is lessthan a full screen of text to display.## Line bufferingNormally output streams are buffered so that data is written to the output fileonly when the buffer becomes full. This is efficient and generally works fineas long as the data is being produced as fast as it can be consumed. However,when the data is streaming at a slower rate than it could be displayed (e.g.log output from something like `tail -f`) this results in a large delay betweendata being produced and consumed. If you have ever tried to grep a streaminglog and pipe the output to a pager then you are familiar with howunsatisfactory this is.The solution is to flush the output buffer after each line is written, which isknown as [linebuffering](https://www.pixelbeat.org/programming/stdio_buffering/). The`AutoPager` class supports a `line_buffering` argument to enable or disableline buffering. The default is to use the line buffering mode alreadyconfigured for the output stream (which is usually to disable line buffering).When reading from an input stream (which may be a file, pipe, or the console)and optionally processing the data before outputting it again, the conveniencefunction `line_buffer_from_input()` returns the optimal line buffering settingfor a given input stream (`sys.stdin` by default).```pythonimport sysimport autopagewith autopage.AutoPager(line_buffering=line_buffer_from_input()) as out:    for l in sys.stdin:        out.write(l)```## Terminal resetBy default, when the pager exits it will leave the latest displayed output onscreen in the terminal. This can be changed by passing `True` for the`reset_on_exit` argument to the `AutoPager` class. If this option is set, theterminal will be cleared when the pager exits, returning to its position priorto starting the pager (as is the case by default when running `less` manuallyfrom the command line).## Exit codePrograms may wish to return a different exit code if they are interrupted bythe user (either with Ctrl-C or by closing the pager) than if they ran tocompletion. The exceptions generated when the pager is closed prematurely aresuppressed, so the `AutoPager` class offers the `exit_code()` method to providea suitable exit code for the program. This also takes into account otherexceptions that bubble up through the context manager.## Complete Example```pythonimport sysimport autopagedef process(input_stream, output_stream):    pager = autopage.AutoPager(        output_stream,        line_buffering=autopage.line_buffer_from_input(input_stream),        allow_color=True,        reset_on_exit=True,        errors=autopage.ErrorStrategy.REPLACE,    )    try:        with pager as out:            for l in input_stream:                out.write(l)    except Exception as exc:        sys.stderr.write(f'{str(exc)}\n')    except KeyboardInterrupt:        pass    return pager.exit_code()sys.exit(process(sys.stdin, sys.stdout))```</longdescription>
</pkgmetadata>