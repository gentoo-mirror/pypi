<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MosPyMosPy is a fork of the cosmospy library and aims to be a versatile transaction signing library for the whole cosmos ecosystem.It depends [cosmospy-protobuf](https://github.com/ctrl-Felix/cosmospy-protobuf) for the protos. Through this library you also can add your own transaction types and sign them through Mospy.## DocumentationA documentation with according examples can be found at https://mospy.ctrl-felix.de## Get StartedYou can find a tutorial series on medium: https://medium.com/@ctrl-felix/mospy-tutorial-1-the-basics-95ec757047dc## InstallationMospy is available through (pypi)[https://pypi.org/project/mospy-wallet]`python -m pip install mospy-wallet`_Note: The package name in python is mospy even if it is called mospy-wallet on pypi as mospy already existed_## QuickstartMore examples on: https://mospy.ctrl-felix.de/examples/```pythonimport httpx # optionalfrom mospy import Account, Transactionaccount = Account(    seed_phrase=&quot;law grab theory better athlete submit awkward hawk state wedding wave monkey audit blame fury wood tag rent furnace exotic jeans drift destroy style&quot;,    address_index=12)tx = Transaction(    account=account,    gas=1000,)tx.set_fee(    amount=100,    denom=&quot;uatom&quot;)# Add a transfer message to the transaction (multiple messages can be added)tx.add_msg(    tx_type='transfer',    sender=account,    receipient=&quot;cosmos1tkv9rquxr88r7snrg42kxdj9gsnfxxg028kuh9&quot;,    amount=1000,    denom=&quot;uatom&quot;)# Sign and encode transaction to submit it to the network manually# REST endpoint (RPC or API)tx_bytes = tx.get_tx_bytes_as_string()# Submit the transaction through the Tendermint RPCrpc_url = &quot;https://rpc.cosmos.network/&quot;pushable_tx = json.dumps(              {                &quot;jsonrpc&quot;: &quot;2.0&quot;,                &quot;id&quot;: 1,                &quot;method&quot;: &quot;broadcast_tx_sync&quot;, # Available methods: broadcast_tx_sync, broadcast_tx_async, broadcast_tx_commit                &quot;params&quot;: {                    &quot;tx&quot;: tx_bytes                }              }            )r = httpx.post(rpc_url, data=pushable_tx)# Submit the transaction through the Cosmos REST APIrpc_api = &quot;https://api.cosmos.network/cosmos/tx/v1beta1/txs&quot;pushable_tx = json.dumps(                {                  &quot;tx_bytes&quot;: tx_bytes,                  &quot;mode&quot;: &quot;BROADCAST_MODE_SYNC&quot; # Available modes: BROADCAST_MODE_SYNC, BROADCAST_MODE_ASYNC, BROADCAST_MODE_BLOCK                }              )r = httpx.post(rpc_api, data=pushable_tx)```## Different transaction typesMospy is created to support every possible external transaction type.To make it easier some transaction types are built in and can be added directly to a transaction object.But it's not difficult to add your own transaction types! More about transaction types can be found in the docs.</longdescription>
</pkgmetadata>