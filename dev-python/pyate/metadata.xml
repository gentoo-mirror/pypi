<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;PyATE: Python Automated Term Extraction&lt;/h1&gt;[![Build Status](https://travis-ci.com/kevinlu1248/pyate.svg?branch=master)](https://travis-ci.com/kevinlu1248/pyate)[![Documentation Status](https://readthedocs.org/projects/ansicolortags/badge/?version=latest)](http://kevinlu1248.github.io/pyate)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pyate.svg)](https://pypi.python.org/pypi/pyate/)[![PyPI version fury.io](https://badge.fury.io/py/pyate.svg)](https://pypi.python.org/pypi/pyate/)[![Downloads](https://pepy.tech/badge/pyate)](https://pepy.tech/project/pyate)[![Downloads](https://pepy.tech/badge/pyate/month)](https://pepy.tech/project/pyate/month)[![Downloads](https://pepy.tech/badge/pyate/week)](https://pepy.tech/project/pyate/week)&lt;!-- [![HitCount](http://hits.dwyl.com/kevinlu1248/pyate.svg)](http://hits.dwyl.com/kevinlu1248/pyate) --&gt;[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Built with spaCy](https://img.shields.io/badge/made%20with%20❤%20and-spaCy-09a3d5.svg)](https://spacy.io)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5039289.svg)](https://doi.org/10.5281/zenodo.5039289)Python implementation of term extraction algorithms such as C-Value, Basic,Combo Basic, Weirdness and Term Extractor using spaCy POS tagging.NEW: Documentation can be found at https://kevinlu1248.github.io/pyate/. Thedocumentation so far is still missing two algorithms and details about the`TermExtraction` class but I will have it done soon.NEW: Try the algorithms out at https://pyate-demo.herokuapp.com/, a web app fordemonstrating PyATE!NEW: spaCy V3 is supported! For spaCy V2, use `pyate==0.4.3` and view the[spaCy V2 README.md file](README-spacy-v2.md)If you have a suggestion for another ATE algorithm you would like implemented inthis package feel free to file it as an issue with the paper the algorithm isbased on.For ATE packages implemented in Scala and Java, see[ATR4S](https://github.com/ispras/atr4s) and[JATE](https://github.com/ziqizhang/jate), respectively.## :tada: InstallationUsing pip:```bashpip install pyate spacy download en_core_web_sm```## :rocket: QuickstartTo get started, simply call one of the implemented algorithms. According toAstrakhantsev 2016, `combo_basic` is the most precise of the five algorithms,though `basic` and `cvalues` is not too far behind (see Precision). The samestudy shows that PU-ATR and KeyConceptRel have higher precision than`combo_basic` but are not implemented and PU-ATR take significantly more timesince it uses machine learning.```python3from pyate import combo_basic# source: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1994795/string = &quot;&quot;&quot;Central to the development of cancer are genetic changes that endow these “cancer cells” with many of thehallmarks of cancer, such as self-sufficient growth and resistance to anti-growth and pro-death signals. However, while thegenetic changes that occur within cancer cells themselves, such as activated oncogenes or dysfunctional tumor suppressors,are responsible for many aspects of cancer development, they are not sufficient. Tumor promotion and progression aredependent on ancillary processes provided by cells of the tumor environment but that are not necessarily cancerousthemselves. Inflammation has long been associated with the development of cancer. This review will discuss the reflexiverelationship between cancer and inflammation with particular focus on how considering the role of inflammation in physiologicprocesses such as the maintenance of tissue homeostasis and repair may provide a logical framework for understanding the Uconnection between the inflammatory response and cancer.&quot;&quot;&quot;print(combo_basic(string).sort_values(ascending=False))&quot;&quot;&quot; (Output)dysfunctional tumor                1.443147tumor suppressors                  1.443147genetic changes                    1.386294cancer cells                       1.386294dysfunctional tumor suppressors    1.298612logical framework                  0.693147sufficient growth                  0.693147death signals                      0.693147many aspects                       0.693147inflammatory response              0.693147tumor promotion                    0.693147ancillary processes                0.693147tumor environment                  0.693147reflexive relationship             0.693147particular focus                   0.693147physiologic processes              0.693147tissue homeostasis                 0.693147cancer development                 0.693147dtype: float64&quot;&quot;&quot;```If you would like to add this to a spacy pipeline, simply use add Spacy's`add_pipe` method.```python3import spacyfrom pyate.term_extraction_pipeline import TermExtractionPipelinenlp = spacy.load(&quot;en_core_web_sm&quot;)nlp.add_pipe(&quot;combo_basic&quot;)doc = nlp(string)print(doc._.combo_basic.sort_values(ascending=False).head(5))&quot;&quot;&quot; (Output)dysfunctional tumor                1.443147tumor suppressors                  1.443147genetic changes                    1.386294cancer cells                       1.386294dysfunctional tumor suppressors    1.298612dtype: float64&quot;&quot;&quot;```Also, `TermExtractionPipeline.__init__` is defined as follows```__init__(  self,  func: Callable[..., pd.Series] = combo_basic,  *args,  **kwargs)```where `func` is essentially your term extracting algorithm that takes in acorpus (either a string or iterator of strings) and outputs a Pandas Series ofterm-value pairs of terms and their respective termhoods. `func` is by default`combo_basic`. `args` and `kwargs` are for you to overide default values for thefunction, which you can find by running `help` (might document later on).### Summary of functionsEach of `cvalues, basic, combo_basic, weirdness` and `term_extractor` take in astring or an iterator of strings and outputs a Pandas Series of term-valuepairs, where higher values indicate higher chance of being a domain specificterm. Furthermore, `weirdness` and `term_extractor` take a `general_corpus` keyword argument which must be an iterator of strings which defaults to the GeneralCorpus described below.All functions only take the string of which you would like to extract terms fromas the mandatory input (the `technical_corpus`), as well as other tweakablesettings, including `general_corpus` (contrasting corpus for `weirdness` and`term_extractor`), `general_corpus_size`, `verbose` (whether to print a progressbar), `weights`, `smoothing`, `have_single_word` (whether to have a single wordcount as a phrase) and `threshold`. If you have not read the papers and areunfamiliar with the algorithms, I recommend just using the default settings.Again, use `help` to find the details regarding each algorithm since they areall different.### General CorpusUnder `path/to/site-packages/pyate/default_general_domain.en.zip`, there is ageneral CSV file of a general corpus, specifically, 3000 random sentences fromWikipedia. The source of it can be found athttps://www.kaggle.com/mikeortman/wikipedia-sentences. Access it using it usingthe following after installing `pyate`.```python3import pandas as pdfrom distutils.sysconfig import get_python_libdf = pd.read_csv(get_python_lib() + &quot;/pyate/default_general_domain.en.zip&quot;)[&quot;SECTION_TEXT&quot;]print(df.head())&quot;&quot;&quot; (Output)0    '''Anarchism''' is a political philosophy that...1    The term ''anarchism'' is a compound word comp...2    ===Origins===\nWoodcut from a Diggers document...3    Portrait of philosopher Pierre-Joseph Proudhon...4    consistent with anarchist values is a controve...Name: SECTION_TEXT, dtype: object&quot;&quot;&quot;```### Other LanguagesFor switching languages, simply run`Term_Extraction.set_language({language}, {model_name})`, where `model_name`defaults to `language`. For example,`Term_Extraction.set_language(&quot;it&quot;, &quot;it_core_news_sm&quot;})` for Italian. Bydefault, the language is English. So far, the list of supported languages is:- _English_ (en)- _Dutch_ (nl)- _French_ (fr)- _German_ (de)- _Italian_ (it)- _Portuguese_ (pt)- _Russian_ (ru)- _Spanish_ (es)To add more languages, file an issue with a corpus of at least 3000 paragraphsof a general domain in the desired language (preferably wikipedia) named`default_general_domain.{lang}.zip` replacing lang with the ISO-639-1 code ofthe language, or the ISO-639-2 if the language does not have a ISO-639-1 code(can be found at https://www.loc.gov/standards/iso639-2/php/code_list.php). Thefile format should be of the following form to be parsable by Pandas.```,SECTION_TEXT0,&quot;{paragraph_0}&quot;1,&quot;{paragraph_1}&quot;...```Alternatively, place the file in `src/pyate` and file a pull request.### ModelsThough this model was originally intended for symbolic AI algorithms(non-machine learning), I realized a spaCy model on term extraction can reachsignificantly higher performance, and thus decided to include the model here.For a comparison with the symbolic AI algorithms, see[Precision](https://github.com/kevinlu1248/pyate#dart-precision). Note that onlythe F-Score, accuracy and precision was taken here yet for the model, but forthe algorithms the AvP was taken so directly comparing the metrics would notreally make sense.| URL                                                                                        | F-Score (%) | Precision (%) | Recall (%) || ------------------------------------------------------------------------------------------ | ----------- | ------------- | ---------- || https://github.com/kevinlu1248/pyate/releases/download/v0.4.2/en_acl_terms_sm-2.0.4.tar.gz | 94.71       | 95.41         | 94.03      |The model was trained and evaluated on the[ACL dataset](http://pars.ie/lr/acl-rd-tec-terminology/_acl_arc_comp), which isa computer science oriented dataset where the terms are manually picked. Thishas not yet been tested on other fields yet, however.This model does not come with PyATE. To install, run```bashpip install https://github.com/kevinlu1248/pyate/releases/download/v0.4.2/en_acl_terms_sm-2.0.4.tar.gz```To extract terms,```python3import spacynlp = spacy.load(&quot;en_acl_terms_sm&quot;)doc = nlp(&quot;Hello world, I am a term extraction algorithm.&quot;)print(doc.ents)&quot;&quot;&quot;(term extraction, algorithm)&quot;&quot;&quot;```## :dart: PrecisionHere is the average precision of some of the implemented algorithms using theAverage Precision (AvP) metric on seven distinct databases, as tested inAstrakhantsev 2016. ![Evaluation](img/evaluation.png)## :stars: MotivationThis project was planned to be a tool to be connected to a Google ChromeExtension that highlights and defines key terms that the reader probably doesnot know of. Furthermore, term extraction is an area where there is not a lot offocused research on in comparison to other areas of NLP and especially recentlyis not viewed to be very practical due to the more general tool of NER tagging.However, modern NER tagging usually incorporates some combination of memorizedwords and deep learning which are spatially and computationally heavy.Furthermore, to generalize an algorithm to recognize terms to the ever growingareas of medical and AI research, a list of memorized words will not do.Of the five implemented algorithms, none are expensive, in fact, the bottleneckof the space allocation and computation expense is from the spaCy model andspaCy POS tagging. This is because they mostly rely simply on POS patterns, wordfrequencies, and the existence of embedded term candidates. For example, theterm candidate &quot;breast cancer&quot; implies that &quot;malignant breast cancer&quot; isprobably not a term and simply a form of &quot;breast cancer&quot; that is &quot;malignant&quot;(implemented in C-Value).## :pushpin: Todo- Add other languages and data encapsulation for set language- Add automated tests and CI/CD- Add a brief CLI- Make NER version of this using the datasets from the sources- Add PU-ATR algorithm since its precision is a lot higher, though more  computationally expensive- Page Rank algorithm- Add sources- Add voting algorithm and capabilities- Optimize perhaps using Cython, however, the bottleneck is POS tagging by Spacy  and word counting with Pandas and Numpy, which are already at C-level so this  will not help much- Clearer documentation- Allow GPU acceleration with Cupy## :bookmark_tabs: SourcesI cannot seem to find the original Basic and Combo Basic papers but I foundpapers that referenced them. &quot;ATR4S: Toolkit with State-of-the-art AutomaticTerms Recognition Methods in Scala&quot; more or less summarizes everything andincorporates several algorithms not in this package.- [Automatic Recognition of Multi-word Terms: The C-value/ NC-value Method](https://www.researchgate.net/publication/220387502_Automatic_Recognition_of_Multi-word_Terms_The_C-value_NC-value_Method)- [Domain-independent term extraction through domain modelling](https://aran.library.nuigalway.ie/handle/10379/4130)- [ATR4S: Toolkit with State-of-the-art Automatic Terms Recognition Methods in Scala](https://arxiv.org/abs/1611.07804)- [TermExtractor: a Web Application to Learn the Shared Terminology of Emergent Web Communities](https://link.springer.com/chapter/10.1007/978-1-84628-858-6_32)- [Learning Domain Ontologies from Document Warehouses and Dedicated Web Sites](https://www.aclweb.org/anthology/J04-2002.pdf)- [A Comparative Evaluation of Term Recognition Algorithms](https://www.aclweb.org/anthology/L08-1281/)- [SemRe-Rank: Improving Automatic Term Extraction By Incorporating Semantic Relatedness With Personalised PageRank](https://arxiv.org/pdf/1711.03373.pdf)- [Term extraction: A Review Draft Version 091221](https://www.ida.liu.se/~larah03/Publications/tereview_v2.pdf)## :closed_book: Academia### CitingIf you publish work that uses PyATE, please let me know at kevinlu1248@gmail.comand cite as:```Lu, Kevin. (2021, June 28). kevinlu1248/pyate: Python Automated Term Extraction (Version v0.5.3). Zenodo. http://doi.org/10.5281/zenodo.5039289```or equivalently with Bibtext:```@software{pyate,title        = {kevinlu1248/pyate: Python Automated Term Extraction},author       = {Lu, Kevin},year         = 2021,month        = {Jun},publisher    = {Zenodo},doi          = {10.5281/zenodo.5039289}}```### Influences on AcademiaThis package was used in the paper([Unsupervised Technical Domain Terms Extraction using Term Extractor (Dowlagar and Mamidi, 2021)](https://arxiv.org/pdf/2101.09015.pdf).## :coffee: Buy Me a CoffeeIf my work helped you, please consider buying me a coffee athttps://www.buymeacoffee.com/kevinlu1248.</longdescription>
</pkgmetadata>