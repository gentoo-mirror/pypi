<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![logo](https://www.bardolph.org/logo.png)https://www.bardolph.org# Bardolph ProjectAl Fontes - [bardolph@fontes.org](mailto:bardolph@fontes.org)**Bardolph** is a facility for controlling LIFX (https://www.lifx.com) lightsthrough a simple scripting language. It is targeted at people who would liketo control or experiment with their lights in an automated way, using a minimalamount of coding.Using their names, you can control individual lights, groups or locations. Or,just pick a color for all the lights on your network. If you have any multi-zonelights, the language allows you to set colors for specific zones.The program does not use the Internet to access the bulbs, and no login isrequired; all of its  communication occurs over the local WiFi network. Youcan edit scripts with a basic text editor and run them from the command line.The language may be missing some constructs you might expect, such as loops andarithmetic expressons, as it's still under development. However, it is alsovery simple, and should be usable by non-programmers.## Quick ExamplesHere is a script, named `all_on.ls`, that will turn on all your lights:```duration 1.5 on all```You run it with:```lsrun all_on.ls```In this case, `lsrun` is a bash shell script that become available after youinstall Bardolph.The `duration` parameter says to slowly shut off thelights over a period of 1.5 seconds, which is a much nicer experience thanabruptly turning them off with no dimming.Another example, `red.ls`, sets all the lights to a deep shade of red:```duration 1.5 hue 350 saturation 80 brightness 80 kelvin 2700set all```To run it:```lsrun red.ls```The application executes in the foreground as long as a script is running. In thisexample, the application will run for 5 minutes.As a convenience, you can pass a script as a command-line parameter using`lsrun -s`, followed by the script code in a quoted string. For example, toturn off all the lights from the keyboard:```lsrun -s 'off all'```## Web Server![web screenshot](https://www.bardolph.org/web_mobile.png)The web server component makes scripts available in a user-friendly manner.It implements a simple web page that lists available scripts and provides a1:1 mapping betwen scripts and URL's. The server is designed to run locally,on your WiFi network.For example, if have a machine with the hostname`myserver.local`, you could launch the  `all_on.ls` script by going to`http://myserver.local/all-on` with any browser on your WiFi network.Because scripts can run over a long period of time, even indefinitely,a cheap, dedicated device like a Raspberry Pi is an ideal way to host theweb server.## Python APII've attempted to make it easy to use Bardolph scripts in your Python code.For some uses, this may be significantly easier than learning and using afull-purpose Python library. For example, here's a complete program thatwaits 5 seconds, turns all the lights off, and turns them on again afteranother 5 seconds:```from bardolph.controller import ls_modulels_module.configure()ls_module.queue_script('time 5 off all on all')```## System RequirementsThe program has been tested on Python versions at or above 3.7.Because I haven't done any stress testing, I don't know the limits onscript size. Note that the application loads the encoded script into memorybefore executing it.I've tested the program on MacOS Monterey 12.0.1, a Raspberry Pi Zero Wcontrolling 6 devices, a Raspberry Pi 3 and Raspberry Pi 4.## Go Try ItFor full documentation and download options, please see[the main website](http://www.bardolph.org).</longdescription>
</pkgmetadata>