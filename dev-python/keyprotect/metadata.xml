<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># keyprotect-python-client[![PyPi](https://img.shields.io/pypi/v/keyprotect.svg)](https://pypi.org/project/keyprotect)[![Downloads](https://static.pepy.tech/personalized-badge/ibmcloud-iam?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=orange&amp;left_text=Downloads)](https://pepy.tech/project/keyprotect)[![License](https://img.shields.io/badge/License-Apache%202.0-green.svg)](https://opensource.org/licenses/Apache-2.0)[![Build Status](https://travis-ci.com/IBM/keyprotect-python-client.svg?branch=master)](https://travis-ci.com/IBM/keyprotect-python-client)A Pythonic client for IBM Key ProtectThis is a thin wrapper around the KeyProtect client in the [redstone](https://github.com/IBM/redstone) Python package. For detailed documentation and API references, please see the [redstone docs](https://redstone-py.readthedocs.org)The client works with Python 3.5 or higher# InstallationThe client is available on PyPI as the `keyprotect` package and is installable via `pip`:```shpip install -U keyprotect```# UsageThe following python is a quick example of how to use the keyprotect module.The example expects `IBMCLOUD_API_KEY` to be set to a valid IAM API key,and `KP_INSTANCE_ID` to be set to the UUID identifying your KeyProtect instance.```pythonimport osimport keyprotectfrom keyprotect import bxauthtm = bxauth.TokenManager(api_key=os.getenv(&quot;IBMCLOUD_API_KEY&quot;))kp = keyprotect.Client(    credentials=tm,    region=&quot;us-south&quot;,    service_instance_id=os.getenv(&quot;KP_INSTANCE_ID&quot;))for key in kp.keys():    print(&quot;%s\t%s&quot; % (key[&quot;id&quot;], key[&quot;name&quot;]))key = kp.create(name=&quot;MyTestKey&quot;)print(&quot;Created key '%s'&quot; % key['id'])kp.delete(key_id=key.get('id'))print(&quot;Deleted key '%s'&quot; % key['id'])# wrap and unwrap require a non-exportable key,# these are also referred to as root keyskey = kp.create(name=&quot;MyRootKey&quot;, root=True)# wrap/unwrap, payload should be a bytestring if python3message = b'This is a really important message.'wrapped = kp.wrap(key_id=key.get('id'), plaintext=message)ciphertext = wrapped.get(&quot;ciphertext&quot;)unwrapped = kp.unwrap(key_id=key.get('id'), ciphertext=ciphertext)assert message == unwrapped# wrap/unwrap with AADmessage = b'This is a really important message too.'wrapped = kp.wrap(key_id=key.get('id'), plaintext=message, aad=['python-keyprotect'])ciphertext = wrapped.get(&quot;ciphertext&quot;)unwrapped = kp.unwrap(key_id=key.get('id'), ciphertext=ciphertext, aad=['python-keyprotect'])assert message == unwrapped```## Using custom endpointThe following example shows how to use custom service endpoint```pythonkp = keyprotect.Client(    credentials=tm,    region=&quot;&lt;region&gt;&quot;,    service_instance_id=os.getenv(&quot;KP_INSTANCE_ID&quot;),    # Set custom service endpoint    endpoint_url=&quot;https://private.us-south.kms.cloud.ibm.com&quot;)```</longdescription>
</pkgmetadata>