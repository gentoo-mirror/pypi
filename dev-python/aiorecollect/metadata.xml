<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸ—‘ aiorecollect: A Python 3 Library for Pinboard[![CI](https://github.com/bachya/aiorecollect/workflows/CI/badge.svg)](https://github.com/bachya/aiorecollect/actions)[![PyPi](https://img.shields.io/pypi/v/aiorecollect.svg)](https://pypi.python.org/pypi/aiorecollect)[![Version](https://img.shields.io/pypi/pyversions/aiorecollect.svg)](https://pypi.python.org/pypi/aiorecollect)[![License](https://img.shields.io/pypi/l/aiorecollect.svg)](https://github.com/bachya/aiorecollect/blob/main/LICENSE)[![Code Coverage](https://codecov.io/gh/bachya/aiorecollect/branch/dev/graph/badge.svg)](https://codecov.io/gh/bachya/aiorecollect)[![Maintainability](https://api.codeclimate.com/v1/badges/65fe7eb308dca67c1038/maintainability)](https://codeclimate.com/github/bachya/aiorecollect/maintainability)[![Say Thanks](https://img.shields.io/badge/SayThanks-!-1EAEDB.svg)](https://saythanks.io/to/bachya)&lt;a href=&quot;https://www.buymeacoffee.com/bachya1208P&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; height=&quot;41&quot; width=&quot;174&quot;&gt;&lt;/a&gt;`aiorecollect` is a Python 3, asyncio-based library for the ReCollect Waste API. Itallows users to programmatically retrieve schedules for waste removal in their area,including trash, recycling, compost, and more.Special thanks to @stealthhacker for the inspiration!# Installation```bashpip install aiorecollect```# Python Versions`aiorecollect` is currently supported on:- Python 3.9- Python 3.10- Python 3.11# Place and Service IDsTo use `aiorecollect`, you must know both your ReCollect Place and Service IDs.In general, cities/municipalities that utilize ReCollect will give you a way tosubscribe to a calendar with pickup dates. If you examine the iCal URL for thiscalendar, the Place and Service IDs are embedded in it:```webcal://recollect.a.ssl.fastly.net/api/places/PLACE_ID/services/SERVICE_ID/events.en-US.ics```# Usage```pythonimport asynciofrom datetime import datefrom aiorecollect import Clientasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    client = await Client(&quot;&lt;PLACE ID&gt;&quot;, &quot;&lt;SERVICE ID&gt;&quot;)    # The client has a few attributes that you can access:    client.place_id    client.service_id    # Get all pickup events on the calendar:    pickup_events = await client.async_get_pickup_events()    # ...or get all pickup events within a certain date range:    pickup_events = await client.async_get_pickup_events(        start_date=date(2020, 10, 1), end_date=date(2020, 10, 31)    )    # ...or just get the next pickup event:    next_pickup = await client.async_get_next_pickup_event()asyncio.run(main())```## The `PickupEvent` ObjectThe `PickupEvent` object that is returned from the above calls comes with threeproperties:- `date`: a `datetime.date` that denotes the pickup date- `pickup_types`: a list of `PickupType` objects that will occur with this event- `area_name`: the name of the area in which the event is occurring## The `PickupType` ObjectThe `PickupType` object contains the &quot;internal&quot; name of the pickup type _and_ ahuman-friendly representation when it exists:- `name`: the internal name of the pickup type- `friendly_name`: the humany-friendly name of the pickup type (if it exists)## Connection PoolingBy default, the library creates a new connection to ReCollect with each coroutine. Ifyou are calling a large number of coroutines (or merely want to squeeze out every secondof runtime savings possible), an[`aiohttp`](https://github.com/aio-libs/aiohttp) `ClientSession` can be used for connectionpooling:```pythonimport asynciofrom aiohttp import ClientSessionfrom aiorecollect import Clientasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    async with ClientSession() as session:        client = await Client(&quot;&lt;PLACE ID&gt;&quot;, &quot;&lt;SERVICE ID&gt;&quot;, session=session)        # Get to work...asyncio.run(main())```# Contributing1. [Check for open features/bugs](https://github.com/bachya/aiorecollect/issues)   or [initiate a discussion on one](https://github.com/bachya/aiorecollect/issues/new).2. [Fork the repository](https://github.com/bachya/aiorecollect/fork).3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`4. (_optional, but highly recommended_) Enter the virtual environment: `source ./.venv/bin/activate`5. Install the dev environment: `script/setup`6. Code your new feature or bug fix.7. Write tests that cover your new functionality.8. Run tests and ensure 100% code coverage: `poetry run pytest --cov aiorecollect tests`9. Update `README.md` with any new documentation.10. Add yourself to `AUTHORS.md`.11. Submit a pull request!</longdescription>
</pkgmetadata>