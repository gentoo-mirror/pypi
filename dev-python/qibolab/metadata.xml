<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Qibolab![Tests](https://github.com/qiboteam/qibolab/workflows/Tests/badge.svg)[![codecov](https://codecov.io/gh/qiboteam/qibolab/branch/main/graph/badge.svg?token=11UENAPBPH)](https://codecov.io/gh/qiboteam/qibolab)[![Documentation Status](https://readthedocs.org/projects/qibolab/badge/?version=latest)](https://qibolab.readthedocs.io/en/latest/?badge=latest)[![DOI](https://zenodo.org/badge/241307936.svg)](https://zenodo.org/badge/latestdoi/241307936)Qibolab is the dedicated [Qibo](https://github.com/qiboteam/qibo) backend forthe automatic deployment of quantum circuits on quantum hardware.Some of the key features of Qibolab are:* Deploy Qibo models on quantum hardware easily.* Create custom experimental drivers for custom lab setup.* Support multiple heterogeneous platforms.* Use existing calibration procedures for experimentalists.## DocumentationThe qibolab backend documentation is available at https://qibolab.readthedocs.io.## Minimum working exampleA simple example on how to connect to the TIIq platform and use it execute a pulse sequence:```pythonfrom qibolab import Platformfrom qibolab.paths import qibolab_folderfrom qibolab.pulses import Pulse, ReadoutPulse, PulseSequence# Define PulseSequencesequence = PulseSequence()# Add some pulses to the pulse sequencesequence.add(Pulse(start=0,                   amplitude=0.3,                   duration=4000,                   frequency=200_000_000,                   relative_phase=0,                   shape='Gaussian(5)', # Gaussian shape with std = duration / 5                   channel=1))sequence.add(ReadoutPulse(start=4004,                          amplitude=0.9,                          duration=2000,                          frequency=20_000_000,                          relative_phase=0,                          shape='Rectangular',                          channel=2))# Define platform and load specific runcardruncard = qibolab_folder / 'runcards' / 'tii1q.yml'platform = Platform(&quot;tii1q&quot;, runcard)# Connects to lab instruments using the details specified in the calibration settings.platform.connect()# Configures instruments using the loaded calibration settings.platform.setup()# Turns on the local oscillatorsplatform.start()# Executes a pulse sequence.results = platform.execute_pulse_sequence(sequence, nshots=3000)print(f&quot;results (amplitude, phase, i, q): {results}&quot;)# Turn off lab instrumentsplatform.stop()# Disconnect from the instrumentsplatform.disconnect()```Here is another example on how to execute circuits:```pythonimport qibofrom qibo import gates, models# Create circuit and add gatesc = models.Circuit(1)c.add(gates.H(0))c.add(gates.RX(0, theta=0.2))c.add(gates.X(0))c.add(gates.M(0))# Simulate the circuit using numpyqibo.set_backend(&quot;numpy&quot;)for _ in range(5):    result = c(nshots=1024)    print(result.probabilities())# Execute the circuit on hardwareqibo.set_backend(&quot;qibolab&quot;, platform=&quot;tii1q&quot;)for _ in range(5):    result = c(nshots=1024)    print(result.probabilities())```## Citation policyIf you use the package please cite the following references:- https://arxiv.org/abs/2009.01845- https://doi.org/10.5281/zenodo.3997194- DOI paper and zenodo</longdescription>
</pkgmetadata>