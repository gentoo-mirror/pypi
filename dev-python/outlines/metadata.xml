<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;# Outlines „Ä∞Ô∏è&lt;img src=&quot;./docs/assets/images/logo.png&quot; alt=&quot;Outlines Logo&quot; width=300&gt;&lt;/img&gt;[![Pypi][pypi-badge]][pypi][![Contributors][contributors-badge]][contributors][![Twitter][twitter-badge]][twitter]*Generate text that machines understand.*[Install](#installation) ‚Ä¢[Guided generation](#guided-generation) ‚Ä¢[Prompting primitives](#prompting) ‚Ä¢[Examples](#examples) ‚Ä¢[Stay tuned](#stay-tuned-for)&lt;/div&gt;**Outlines** „Ä∞ is a library for neural text generation. You can think of it as amore flexible replacement for the `generate` method in the[transformers](https://github.com/huggingface/transformers) library.**Outlines** „Ä∞ helps developers *guide text generation* to build robustinterfaces with external systems. Provides generation methods thatguarantee that the output will match a regular expressions, or followa JSON schema.**Outlines** „Ä∞ provides *robust prompting primitives* that separate the promptingfrom the execution logic and lead to simple implementations of few-shotgenerations, ReAct, meta-prompting, agents, etc.**Outlines** „Ä∞ is designed as a *library* that is meant to be compatible thebroader ecosystem, not to replace it. We use as few abstractions as possible,and generation can be interleaved with control flow, conditionals, custom Pythonfunctions and calls to other libraries.**Outlines** „Ä∞ is *compatible with all models*. It only interfaces with modelsvia the next-token logits. It can be used with API-based models as well.## Features- [x] üñçÔ∏èSimple and powerful prompting primitives based on the [Jinja templating engine](https://jinja.palletsprojects.com/)- [x] üöÑ Guided generation, including multiple choice, type constraints and dynamic stopping- [x] ‚ö° Fast [regex-guided generation](#efficient-regex-guided-generation)- [x] üî• Fast [JSON generation](#efficient-json-generation-following-a-pydantic-model) following a JSON schema or a Pydantic model- [x] üêç Interleave completions with loops, conditionals, and custom Python functions- [x] üíæ Caching of generations- [x] ü§ó Integration with Hugging Face's `transformers` models- [x] üîí Integration with OpenAI's APIOutlines „Ä∞ has new releases and features coming every week. Make sure to ‚≠ê star and üëÄ watch this repository, follow [@dottxtai][twitter] to stay up to date!## Installation**Outlines** is available on PyPi:``` bashpip install outlines```The dependencies needed to use models are not installed by default. You will need to run:- `pip install openai` to be able to use OpenAI [models](https://platform.openai.com/docs/api-reference).- `pip install transformers` to be able to use Hugging Face `transformers` [models](https://huggingface.co/models?pipeline_tag=text-generation).## Guided generationThe first step towards reliability of systems that include large language modelsis to ensure that there is a well-defined interface between their output anduser-defined code. **Outlines** provides ways to control the generation oflanguage models to make their output more predictable.### Early stoppingYou can stop the generation after a given sequence has been found:``` pythonimport outlines.text.generate as generateimport outlines.models as modelsmodel = models.transformers(&quot;gpt2&quot;)answer = generate.continuation(model, stop=[&quot;.&quot;])(&quot;Tell me a one-sentence joke.&quot;)```### Multiple choicesYou can reduce the completion to a choice between multiple possibilities:``` pythonimport outlines.text.generate as generateimport outlines.models as modelsmodel = models.transformers(&quot;gpt2&quot;)prompt = &quot;&quot;&quot;You are a sentiment-labelling assistant.Is the following review positive or negative?Review: This restaurant is just awesome!&quot;&quot;&quot;answer = generate.choice(model, [&quot;Positive&quot;, &quot;Negative&quot;])(prompt)```### Type constraintYou can instruct the model to only return integers or floats:``` pythonimport outlines.text.generate as generateimport outlines.models as modelsmodel = models.transformers(&quot;gpt2&quot;)prompt = &quot;1+1=&quot;answer = generate.integer(model)(prompt)prompt = &quot;sqrt(2)=&quot;answer = generate.float(model)(prompt)```### Efficient regex-guided generationOutlines also comes with fast regex-guided generation. In fact, the `choice`,`integer` and `float` functions above all use regex-guided generation under thehood:``` pythonimport outlines.models as modelsimport outlines.text.generate as generatemodel = models.transformers(&quot;gpt2-medium&quot;)prompt = &quot;Is 1+1=2? &quot;unguided = generate.continuation(model, max_tokens=30)(prompt)guided = generate.regex(model, r&quot;\s*([Yy]es|[Nn]o|[Nn]ever|[Aa]lways)&quot;, max_tokens=30)(    prompt)print(unguided)# Is 1+1=2?## This is probably the most perplexing question.# As I said in one of my articles describing how# I call 2 and 1, there isn'tprint(guided)# Is 1+1=2? Always`````` pythonimport outlines.models as modelsimport outlines.text.generate as generatemodel = models.transformers(&quot;gpt2-medium&quot;)prompt = &quot;What is the IP address of the Google DNS servers? &quot;unguided = generate.continuation(model, max_tokens=30)(prompt)guided = generate.regex(    model,    r&quot;((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)&quot;,    max_tokens=30,)(prompt)print(unguided)# What is the IP address of the Google DNS servers?## Passive DNS servers are at DNS servers that are private.# In other words, both IP servers are private. The database# does not contain Chelsea Manningprint(guided)# What is the IP address of the Google DNS servers?# 2.2.6.1```Unlike other libraries, regex-guided generation in Outlines is almost as fastas non-guided generation.### Efficient JSON generation following a Pydantic modelOutlines „Ä∞ allows to guide the generation process so the output is *guaranteed* to follow a [JSON schema](https://json-schema.org/) or [Pydantic model](https://docs.pydantic.dev/latest/):```pythonfrom enum import Enumfrom pydantic import BaseModel, constrimport outlines.models as modelsimport outlines.text.generate as generateimport torchclass Weapon(str, Enum):    sword = &quot;sword&quot;    axe = &quot;axe&quot;    mace = &quot;mace&quot;    spear = &quot;spear&quot;    bow = &quot;bow&quot;    crossbow = &quot;crossbow&quot;class Armor(str, Enum):    leather = &quot;leather&quot;    chainmail = &quot;chainmail&quot;    plate = &quot;plate&quot;class Character(BaseModel):    name: constr(max_length=10)    age: int    armor: Armor    weapon: Weapon    strength: intmodel = models.transformers(&quot;gpt2&quot;, device=&quot;cuda&quot;)# Construct guided sequence generatorgenerator = generate.json(model, Character, max_tokens=100)# Draw a samplerng = torch.Generator(device=&quot;cuda&quot;)rng.manual_seed(789001)sequence = generator(&quot;Give me a character description&quot;, rng=rng)print(sequence)# {#   &quot;name&quot;: &quot;clerame&quot;,#   &quot;age&quot;: 7,#   &quot;armor&quot;: &quot;plate&quot;,#   &quot;weapon&quot;: &quot;mace&quot;,#   &quot;strength&quot;: 4171# }sequence = generator(&quot;Give me an interesting character description&quot;, rng=rng)print(sequence)# {#   &quot;name&quot;: &quot;piggyback&quot;,#   &quot;age&quot;: 23,#   &quot;armor&quot;: &quot;chainmail&quot;,#   &quot;weapon&quot;: &quot;sword&quot;,#   &quot;strength&quot;: 0# }parsed = Character.model_validate_json(sequence)print(parsed)# name='piggyback' age=23 armor=&lt;Armor.chainmail: 'chainmail'&gt; weapon=&lt;Weapon.sword: 'sword'&gt; strength=0```The method works with union types, optional types, arrays, nested schemas, etc. Some field constraints are [not supported yet](https://github.com/outlines-dev/outlines/issues/215), but everything else should work.### Open functionsOutlines can infer the structure of the output from the signature of a function. The result is a dictionary, and can be passed directly to the function using the usual dictionary expansion syntax `**`:```pythonfrom outlines import modelsfrom outlines import textdef add(a: int, b: int):    return a + bmodel = models.transformers(&quot;mistralai/Mistral-7B&quot;)generator = text.generate.json(model, add)result = generator(&quot;Return two integers named a and b respectively. a is odd and b even.&quot;)print(add(**result))# 3```A great advantage of passing functions directly to specify the structure is that the structure of the LLM will change with the function's definition. No need to change the code at several places!## PromptingWriting prompts by concatenating strings in pure Python quickly becomescumbersome: the prompt building logic gets entangled with the rest of theprogram, and the structure of the rendered prompt is obfuscated.**Outlines**makes it easier to write and manage prompts by encapsulating templates inside&quot;template functions&quot;.These functions make it possible to neatly separate the prompt logic from thegeneral program logic; they can be imported from other modules and libraries.Template functions require no superfluous abstraction, they use the Jinja2templating engine to help build complex prompts in a concise manner:``` pythonimport outlines.text as textimport outlines.models as modelsexamples = [    (&quot;The food was digusting&quot;, &quot;Negative&quot;),    (&quot;We had a fantastic night&quot;, &quot;Positive&quot;),    (&quot;Recommended&quot;, &quot;Positive&quot;),    (&quot;The waiter was rude&quot;, &quot;Negative&quot;)]@text.promptdef labelling(to_label, examples):    &quot;&quot;&quot;You are a sentiment-labelling assistant.    {% for example in examples %}    {{ example[0] }} // {{ example[1] }}    {% endfor %}    {{ to_label }} //    &quot;&quot;&quot;model = models.transformers(&quot;gpt2&quot;)prompt = labelling(&quot;Just awesome&quot;, examples)answer = text.generate.continuation(model, max_tokens=100)(prompt)```### ToolsWe can teach language models to call external functions to get additionalinformations or perform tasks, by encoding the functions' description in theprompt. To avoid duplicating information between the function definition and thedescription passed to the prompt, we define custom Jinja filters that canextract the function's name, description, signature and source:``` pythonfrom typing import Callable, Listimport outlines.text as textdef google_search(query: str):    &quot;&quot;&quot;Google Search&quot;&quot;&quot;    passdef wikipedia_search(query: str):    &quot;&quot;&quot;Wikipedia Search&quot;&quot;&quot;    pass@text.promptdef my_commands(tools: List[Callable]):    &quot;&quot;&quot;AVAILABLE COMMANDS:    {% for tool in tools %}    TOOL    {{ tool | name }}, {{ tool | description }}, args: {{ tool | signature }}    {{ tool | source }}    {% endfor %}    &quot;&quot;&quot;prompt = my_commands([google_search, wikipedia_search])```### Response modelsWe can instruct models to return their output in a pre-defined format, oftenJSON. To avoid duplicating information between the function definition and thedescription passed to the prompt we define a custom Jinja filter that canextract the expected response's schema:``` pythonfrom pydantic import BaseModel, Fieldimport outlines.text as textclass Joke(BaseModel):    joke: str = Field(description=&quot;The joke&quot;)    explanation: str = Field(        description=&quot;The explanation of why the joke is funny&quot;    )@text.promptdef joke_ppt(response_model):    &quot;&quot;&quot;Tell a joke and explain why the joke is funny.    RESPONSE FORMAT:    {{ response_model | schema }}    &quot;&quot;&quot;joke_ppt(Joke)# Tell a joke and explain why the joke is funny.## RESPONSE FORMAT:# {#    &quot;joke&quot;: &quot;The joke&quot;#    &quot;explanation&quot;: &quot;The explanation of why the joke is funny&quot;#  }```With these prompting primitives **Outlines** makes building agents like[AutoGPT](https://github.com/Significant-Gravitas/Auto-GPT),[BabyAGI](https://github.com/yoheinakajima/babyagi),[ViperGPT](https://viper.cs.columbia.edu/) or [TransformersAgent](https://huggingface.co/docs/transformers/transformers_agents) easier byremoving boilerplate prompting code.## Contributing### What contributions?We currently only accept bug fixes and documentation contributions. If you have afeature request, please start a new[discussion](https://github.com/outlines-dev/outlines/discussions). Theissue tracker is only intended for actionable items.### How to contribute?Run `pip install -e .[test]` or `conda env create -f environment.yml`. To build the documentation you will also need to run `pip install -r requirements-doc.txt`.Before pushing your code to repository please run `pre-commit run --all-files` and `pytest` to make sure that the code is formatted correctly and that the tests pass.Do not hesitate to open a draft PR before your contribution is ready, especially if you have questions and/or need feedback.## Examples- [Pick the odd one out](https://github.com/outlines-dev/outlines/blob/main/examples/pick_odd_one_out.py)- [Meta prompting](https://github.com/outlines-dev/outlines/blob/main/examples/meta_prompting.py)- [ReAct](https://github.com/outlines-dev/outlines/blob/main/examples/react.py)- [Generate code to solve math problems](https://github.com/outlines-dev/outlines/blob/main/examples/math_generate_code.py)- [BabyAGI](https://github.com/outlines-dev/outlines/blob/main/examples/babyagi.py)- [Uncertainty](https://github.com/outlines-dev/outlines/blob/main/examples/sampling.ipynb)- [Simulation-based inference](https://github.com/outlines-dev/outlines/blob/main/examples/simulation_based_inference.ipynb)## Cite Outlines```@article{willard2023efficient,  title={Efficient Guided Generation for LLMs},  author={Willard, Brandon T and Louf, R{\'e}mi},  journal={arXiv preprint arXiv:2307.09702},  year={2023}}```## LicenseOutlines is open-source and licensed under the [Apache License 2.0](LICENSE).[contributors]: https://github.com/outlines-dev/outlines/graphs/contributors[contributors-badge]: https://img.shields.io/github/contributors/outlines-dev/outlines?style=flat-square&amp;logo=github&amp;logoColor=white&amp;color=ECEFF4[twitter]: https://twitter.com/dottxtai[twitter-badge]: https://img.shields.io/twitter/follow/dottxtai?style=social[pypi]: https://pypi.org/project/outlines/[pypi-badge]: https://img.shields.io/pypi/v/outlines?color=ECEFF4&amp;logo=python&amp;logoColor=white&amp;style=flat-square</longdescription>
</pkgmetadata>