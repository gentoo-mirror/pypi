<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cloc&lt;!--Badges--&gt;![MIT badge](https://img.shields.io/badge/license-MIT-black)![Python3.6 badge](https://img.shields.io/badge/python-v3.6+-blue?logo=python&amp;logoColor=yellow)![Platform badge](https://img.shields.io/badge/platform-linux%20%7C%20osx%20%7C%20win32-yellow)### Command Line Object Chaining    Command line framework for making simple and complex command line applications.    * Easily create stand alone commands or nested groups of commands* Define and connect commands with class objects* Inherit and create viewsets of commands to be able to reuse large nested groups in other cli applications* Use mixin commands to quickly add pre defined commands to your cli* Groups of commands can be found from any class that has defined a `cloc.core.BaseCmd`- [ Installation ](#install)- [ Documentation ](#docs)    - [ Cmd and Grp ](#cmd_and_grp)    - [ Parameters - Arg, Opt, and Flg ](#parameters)    - [ Classes ](#classes)        - [ cloc.core.BaseCmd ](#cloc_basecmd)            - [ BaseCmd.values ](#cloc_basecmd_values)            - [ BaseCmd.params ](#cloc_basecmd_params)            - [ BaseCmd._parse ](#cloc_basecmd__parse)            - [ BaseCmd.create_help ](#cloc_basecmd_create_help)            - [ BaseCmd._print_help ](#cloc_basecmd__print_help)            - [ BaseCmd.create_regex_patterns ](#cloc_basecmd_create_regex_patterns)            - [ BaseCmd.get_values ](#cloc_basecmd_get_values)        - [ cloc.core.Cmd ](#cloc_cmd)            - [ Cmd.fn ](#cloc_cmd_fn)            - [ Cmd.dataclass ](#cloc_cmd_dataclass)            - [ Cmd.new_dataclass_cmd ](#cloc_cmd_new_dataclass_cmd)            - [ Cmd.create_regex_patterns ](#cloc_cmd_create_regex_patterns)            - [ Cmd.get_values ](#cloc_cmd_get_values)        - [ cloc.core.Grp ](#cloc_grp)            - [ Grp.commands ](#cloc_grp_commands)            - [ Grp.invoke ](#cloc_grp_invoke)            - [ Grp.cmdl ](#cloc_grp_cmdl)            - [ Grp.add_command ](#cloc_grp_add_command)            - [ Grp.get_command ](#cloc_grp_get_command)    - [ Decorators ](#decorators)        - [ cloc.decorators.cmd ](#decorators_cmd)        - [ cloc.decorators.grp ](#decorators_grp)        - [ cloc.decorators.arg ](#decorators_arg)        - [ cloc.decorators.opt ](#decorators_opt)        - [ cloc.decorators.flg ](#decorators_flg)    - [ Types ](#cloc.types_2119495137)        - [ cloc.types.BaseType ](#cloc.types.BaseType_1669657826)            - [ BaseType.__call__ ](#BaseType.__call___1591412620)        - [ cloc.types.Choices ](#cloc.types.Choices_1347752155)        - [ cloc.types.DateType ](#cloc.types.DateType_974986765)        - [ cloc.types.FileType ](#cloc.types.FileType_442405428)            - [ FileType.__exit__ ](#FileType.__exit___1883566034)        - [ cloc.types.IntRangeType ](#cloc.types.IntRangeType_483716711)        - [ cloc.types.JsonType ](#cloc.types.JsonType_806135893)        - [ cloc.types.Sha256Type ](#cloc.types.Sha256Type_897860609)        - [ cloc.types.UrlType ](#cloc.types.UrlType_1780703823)    - [ Mixins ](#cloc.mixins_1324909550)        - [ cloc.mixins.Echo ](#cloc.mixins.Echo_178880302)        - [ cloc.mixins.List ](#cloc.mixins.List_1486997353)        - [ cloc.mixins.Version ](#cloc.mixins.Version_1196404455)    - [ Viewsets ](#cloc.viewsets_343292859)        - [ cloc.viewsets.GrpViewset ](#cloc.viewsets.GrpViewset_226248766)        - [ cloc.viewsets.ReadOnlyViewset ](#cloc.viewsets.ReadOnlyViewset_1582907420)        - [ cloc.viewsets.ReqSessionViewset ](#cloc.viewsets.ReqSessionViewset_902305522)    - [ Helper Function ](#helper_function)        - [ cloc.utils.echo ](#utils_echo)        - [ cloc.utils.trace ](#utils_trace)        - [ cloc.utils.listattrs ](#utils_listattrs)- [ Advanced Usage Examples ](#examples)    - [ Viewset Example ](#viewset_example)    &lt;br&gt;&lt;a name=&quot;install&quot;&gt;&lt;/a&gt;## Installation *Virtual Environment is recommended*```bashpip3 install cloc```&lt;br&gt;&lt;a name=&quot;docs&quot;&gt;&lt;/a&gt;## Documentation&lt;a name=&quot;cmd_and_grp&quot;&gt;&lt;/a&gt;### Cmd and GrpThe two core features (classes) of CLOC, command line object chaining, are `Cmd` and `Grp`. A `Cmd` class object defines one action to process when invoked. In most cases, this will be the defined function that is decorated. A command can be invoked by calling the `Cmd` or being called by a `Grp`.A `Grp` class object holds one to many actions to process when invoked. The actions can be a `Cmd` or another `Grp`, butonly one action can be called at a time per `Grp`. The first `Grp` will receive the first command line state, `sys.argv[1:]`. Every `Grp` will receive a command line state and will pass this state to the next action. It is on `Grp` only to update the command line state.```pythonfrom cloc import cmd, grp@grp('cli')def cli():    &quot;&quot;&quot;cli group&quot;&quot;&quot;    pass@cmd('hello-world')def hello_world():    &quot;&quot;&quot;hello world function&quot;&quot;&quot;    print('Hello World')cli.add_command(hello_world)cli()````Grp` help structure. Usage will always be `grp` `name (cmd|grp)````bashCli        cli groupUSAGE: CLI NAMECommands:| Name                     | Description                                          || ------------------------ | ---------------------------------------------------- || hello-world              | hello world function                                 |```---&lt;a name=&quot;parameters&quot;&gt;&lt;/a&gt;### Parameters - Arg, Opt, and FlgCurrently parameters can only be given to a `Cmd`. The three core parameters include:* `Arg` - a named positional argument for the command        Arg(name: str, type: Any = str, help: str = None)    * `Opt` - a named non-positional argument for the command        Opt(name: str, short_name: str, type: Any = str, default: Any= None, multiple: bool= False,             required: bool= False, help: str = None)* `Flg` - a special version of `Opt` that is always type bool and expects no value                Flg(name: str, short_name: str, help: str = None)&lt;br&gt;Below is an extended greeting cmd from above without the grp.```pythonfrom cloc import arg, cmd, flg, optfrom cloc.types import IntRange@cmd('hello')@arg('NAME', type=str, help='The person to greet')@opt('--count', '-c', type=IntRange, default=1, help='Number of greetings: ex -c 0,5 OR -c 5')@flg('--no_repeat', '-nr', help='If given, the greeting will not repeat')def hello(name: str, count: IntRange, no_repeat: bool):    &quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;    for _ in count:        print(f'Hello {name!r}')        if no_repeat:            breakif __name__ == '__main__':    hello()```The below output is an example of a print message for the greeting cmd.```bashHello        Simple program that greets NAME for a total of COUNT times.USAGE: hello NAME --count|-c [value] --no_repeat|-nr Parameters:| Name               | Short    | Type             | Help                                                   || ------------------ | -------- | ---------------- | ------------------------------------------------------ || NAME               |          | str              | The person to greet                                    || --count            | -c       | cloc.IntRange    | [default: 1] Number of greetings: ex -c 0,5 OR -c 5    || --no_repeat        | -nr      | bool             | [flag] If given, the greeting will not repeat          |```--- &lt;a name=&quot;classes&quot;&gt;&lt;/a&gt;### Classes&lt;a name=&quot;cloc_basecmd&quot;&gt;&lt;/a&gt;#### cloc.core.BaseCmd(name: str, params: Params= None, hidden: bool= False)A base class that represents a basic command with a name, Params (`cloc.core.Params`), and a hidden option.This class is meant to be inherited by new typs of commands. This class alone cannot invoke any functionality.&lt;a name=&quot;cloc_basecmd_values&quot;&gt;&lt;/a&gt;##### `BaseCmd.values`: `list`The values attribute is the list of arguments to be unpacked into the invoked function from the cmd&lt;a name=&quot;cloc_basecmd_params&quot;&gt;&lt;/a&gt;##### `BaseCmd.params`: `cloc.core.Params`The params attribute is the list of parameter objects defined for the cmd&lt;a name=&quot;cloc_basecmd__parse&quot;&gt;&lt;/a&gt;##### `BaseCmd._parse(cmdl: list)`Protected method to parse the current command line state. This will create the help string, create the param regex strings,and get params values for the invoked `BaseCmd`. This method is protected and should normally not be called.&lt;a name=&quot;cloc_basecmd_create_help&quot;&gt;&lt;/a&gt;##### `BaseCmd.create_help()`The create_help method with create a formatted and colored help string using any params found&lt;a name=&quot;cloc_basecmd__print_help&quot;&gt;&lt;/a&gt;##### `BaseCmd._print_help()`Protected method to print the help message. This method can be overloaded in certain cases but is meant to call the helpattribute which might not exists in certain states.&lt;a name=&quot;cloc_basecmd_create_regex_patterns&quot;&gt;&lt;/a&gt;##### `BaseCmd.create_regex_patterns()`A method to be overloaded by a new command. This should create your regex patterns based on the defined parameters.&lt;a name=&quot;cloc_basecmd_get_values&quot;&gt;&lt;/a&gt;##### `BaseCmd.get_values(cmdl: list)`A method to be overloaded by a new command. After the regex patterns have been created, then the param values can beparsed from the command line state and stored to be unpacked into the invoked command function.---&lt;a name=&quot;cloc_cmd&quot;&gt;&lt;/a&gt;#### cloc.core.Cmd(name: str, fn: Callable, params: Params = None, hidden: bool = False)Cmd inherits BaseCmd to create a new command that can invoke a given function and be connected to class objects.&lt;a name=&quot;cloc_cmd_fn&quot;&gt;&lt;/a&gt;##### `Cmd.fn`: `Callable`The fn attribute is the defined function to run when cmd is invoked&lt;a name=&quot;cloc_cmd_dataclass&quot;&gt;&lt;/a&gt;##### `Cmd.dataclass`: `object`The dataclass attribute is an object to replace `self` with if the cmd is defined inside a class&lt;a name=&quot;cloc_cmd_new_dataclass_cmd&quot;&gt;&lt;/a&gt;##### `Cmd.new_dataclass_cmd(cls, name: str, fn: Callable, params: Params= None, hidden: bool= False, dataclass: object= None)``Classmethod`This class method will create a new Cmd that will have the dataclass attribute set&lt;a name=&quot;cloc_cmd_create_regex_patterns&quot;&gt;&lt;/a&gt;##### `Cmd.create_regex_patterns()`Create regex patterns for each opt and flg param to match against the command line state during get_values&lt;a name=&quot;cloc_cmd_get_values&quot;&gt;&lt;/a&gt;##### `Cmd.get_values(cmdl: list)`Overloaded function from BaseCmd, this method will create the values to be unpacked into `Cmd.fn`.If `--help` is anywhere the command line, the help message for the nearest Cmd is called.---&lt;a name=&quot;cloc_grp&quot;&gt;&lt;/a&gt;#### cloc.core.Grp(name: str, commands: List[Cmd] = None, hidden:bool= False)Grp inherits from BaseCmd, this class holds a list of Cmd objects which can be invoked by name. If Grp callsGrp, the command line state will be updated. If a Grp is made with no cmdl supplied then sys.argv[1:] is used.&lt;a name=&quot;cloc_grp_commands&quot;&gt;&lt;/a&gt;##### `Grp.commands`: `List[Cmd]`The commands attribute is a list of Cmd objects. Cmd objects are added through the `Grp.add_command` method.&lt;a name=&quot;cloc_grp_invoke&quot;&gt;&lt;/a&gt;##### `BaseCmd.invoke`: `str`The invoke attribute is user input from the command line and should match a `Cmd.name` in `Grp.commands`&lt;a name=&quot;cloc_grp_cmdl&quot;&gt;&lt;/a&gt;##### `BaseCmd.cmdl`: `list`The cmdl attribute should represent the current state of the command line for the Grp to parse.&lt;a name=&quot;cloc_grp_add_command&quot;&gt;&lt;/a&gt;##### `BaseCmd.add_command(command: BaseCmd, hidden:bool= None)`Add a Cmd or Grp to another Grp. Can also override or set hidden stateThis method will also make a new dataclass Cmd if needed. If a command is found inside a class,initiate a dataclass Cmd to be made. Setting `dataclass = class that declared the commands`.* a dataclass Cmd is the magic to allow Cli Viewsets and Querysets&lt;a name=&quot;cloc_grp_get_command&quot;&gt;&lt;/a&gt;##### `BaseCmd.get_command(name: str)`Find a Cmd by name and return the object---&lt;a name=&quot;decorators&quot;&gt;&lt;/a&gt;### DecoratorsAs seen in the above examples, decorators can be used to easily convert defined functions into a cmd or grp.There is a decorator for each core class in cloc. They are imported into the cloc module for ease of use.&lt;a name=&quot;decorators_cmd&quot;&gt;&lt;/a&gt;##### `cloc.decorators.cmd(name:str = None, hidden:bool = False)`Returns a new Cmd object&lt;a name=&quot;decorators_grp&quot;&gt;&lt;/a&gt;##### `cloc.decorators.grp(name:str = None, hidden:bool = False)`Returns a new Grp object&lt;a name=&quot;decorators_arg&quot;&gt;&lt;/a&gt;##### `cloc.decorators.arg(name:str, type: Any= None, help: str= None)`Returns a Cmd object. If the object being decorated is already a Cmd object, the Arg will be appended to Cmd.params&lt;a name=&quot;decorators_opt&quot;&gt;&lt;/a&gt;##### `cloc.decorators.opt(name:str, short_name: str, type: Any= None, default: Any= None, multiple:bool= False, required: bool= False, help: str= None)`Returns a Cmd object. If the object being decorated is already a Cmd object, the Opt will be appended to Cmd.params&lt;a name=&quot;decorators_flg&quot;&gt;&lt;/a&gt;##### `cloc.decorators.flg(name:str, short_name: str, help: str= None)`Returns a Cmd object. If the object being decorated is already a Cmd object, the Flg will be appended to Cmd.params---&lt;a name=&quot;cloc.types_2119495137&quot;&gt;&lt;/a&gt;## TypesNew types can be made to be used to convert the command line input. A new cloc type must inherit the `cloc.types.BaseType` and overload the `__call__` function to convert the input. New types can raise an exception or print to trace for a clean exit.&lt;a name=&quot;cloc.types.BaseType_1669657826&quot;&gt;&lt;/a&gt;### cloc.types.BaseType(self, basetype: Any = None)BaseType - BaseType object for creating new Param types       __call__ method should be overloaded to handle value; str -&gt; BaseType    &lt;a name=&quot;BaseType.__call___1591412620&quot;&gt;&lt;/a&gt;#### `BaseType.__call__(self, value: str)`convert to new type        Args:            value {str} -- value to convert        &lt;a name=&quot;cloc.types.Choices_1347752155&quot;&gt;&lt;/a&gt;### cloc.types.Choices(self, choices: list, basetype: Any = typing.Any)Convert input into a Choices object which will verify the input is contained in the defined choices.&lt;a name=&quot;cloc.types.DateType_974986765&quot;&gt;&lt;/a&gt;### cloc.types.DateType(self)Convert input into a DateTime object&lt;a name=&quot;cloc.types.FileType_442405428&quot;&gt;&lt;/a&gt;### cloc.types.FileType(self)Convert input into a file object. The below example is the `cloc.types.FileType` implementation```pythonclass FileType(BaseType):    __name__ = 'cloc.File'    def __init__(self):        # init should provide a base type, default to str        super().__init__(io.TextIOWrapper)    def __exit__(self, exc_type, exc_val, exc_tb):        self.fobj.close()    def __call__(self, filepath: str):        if not os.path.exists(filepath):            trace(f'Error: {filepath!r} does not  exists', TypeError)        elif not os.path.isfile(filepath):            trace(f'Error: {filepath!r} is not a file', TypeError)        self.fobj = open(filepath, 'r')        return self.fobj```&lt;a name=&quot;FileType.__exit___1883566034&quot;&gt;&lt;/a&gt;#### `FileType.__exit__(self, exc_type, exc_val, exc_tb)`File object will be closed in the exit function for the FileType class&lt;a name=&quot;cloc.types.IntRangeType_483716711&quot;&gt;&lt;/a&gt;### cloc.types.IntRangeType(self)Convert input to an Int Range [0 ... 5]&lt;a name=&quot;cloc.types.JsonType_806135893&quot;&gt;&lt;/a&gt;### cloc.types.JsonType(self)Convert input to type dict&lt;a name=&quot;cloc.types.Sha256Type_897860609&quot;&gt;&lt;/a&gt;### cloc.types.Sha256Type(self)Convert input into valid sha256, or if file path is found as input all valid sha256 values in the file&lt;a name=&quot;cloc.types.UrlType_1780703823&quot;&gt;&lt;/a&gt;### cloc.types.UrlType(self)Convert input into a valid URL---&lt;a name=&quot;cloc.mixins_1324909550&quot;&gt;&lt;/a&gt;## MixinsCloc mixins are a simple way to inherit cli functionality to your class. Below is an example of a Version mixin.This enables a class to inherit a 'version' cmd. It will then look for the class attribute version and print it to the user.```pythonclass Version(object):    &quot;&quot;&quot;Version Mixin - class object for easily adding an version command to a class        - echo the 'version' attribute if it exists    &quot;&quot;&quot;    def __call__(self):        return self.version_cmd    @cmd('version')    def version_cmd(self):        &quot;&quot;&quot;version mixin command&quot;&quot;&quot;        echo(cls=self, attribute='version', color='blue')```The below mixins are currently offered by cloc.&lt;a name=&quot;cloc.mixins.Echo_178880302&quot;&gt;&lt;/a&gt;### cloc.mixins.Echo(self, *args, **kwargs)Echo Mixin - class object for easily adding an echo command to a class        - echo value of attributes by name&lt;a name=&quot;cloc.mixins.List_1486997353&quot;&gt;&lt;/a&gt;### cloc.mixins.List(self, *args, **kwargs)List Mixin - class object for easily adding an list command to a class        - list attributes and values of the tied class&lt;a name=&quot;cloc.mixins.Version_1196404455&quot;&gt;&lt;/a&gt;### cloc.mixins.Version(self, *args, **kwargs)Version Mixin - class object for easily adding an version command to a class        - echo the 'version' attribute if it exists---&lt;a name=&quot;cloc.viewsets_343292859&quot;&gt;&lt;/a&gt;## ViewsetsViewsets are classes of commands that can be inherited into other classes. For example if you have a class that youwant to be able to query information from but not write to, you could use a ReadOnlyViewset that only gives the userthe option the print and list attributes from the class.A viewset can also be made into a Queryset if the `GrpViewset` is inherited and the queryset attribute is set.This then enables a user to override methods to retrieve data for the cli interface. A queryset could connect to adatabase to retrieve information for the user based on defined commands.Viewsets and Querysets become very useful in large CLI applications.&lt;a name=&quot;cloc.viewsets.GrpViewset_226248766&quot;&gt;&lt;/a&gt;### cloc.viewsets.GrpViewset(self, *args, **kwargs)A base Viewset that does not have any commands by default. The GrpViewset contains the queryset attribute and can be set for overloading data retrieval.&lt;a name=&quot;cloc.viewsets.ReadOnlyViewset_1582907420&quot;&gt;&lt;/a&gt;### cloc.viewsets.ReadOnlyViewset(self, *args, **kwargs)Read only viewset    echo (print attribute by name)    list (print all attribute names and values)    version(print the current version of the Viewset based on the version attribute)&lt;a name=&quot;cloc.viewsets.ReqSessionViewset_902305522&quot;&gt;&lt;/a&gt;### cloc.viewsets.ReqSessionViewset(self, *args, session: requests.sessions.Session = None, max_retries: int = 3, pool_connections: int = 16, pool_maxsize: int = 16, raise_exception: bool = True, **kwargs)Requests Session Viewset    get (a cli cmd for session.get)---&lt;a name=&quot;helper_functions&quot;&gt;&lt;/a&gt;### Helper Functions&lt;a name=&quot;utils_echo&quot;&gt;&lt;/a&gt;##### `cloc.utils.echo(message: Union[str, tuple, list, dict]= None, cls: object= None, attribute: str= None, list_delimiter: str = '\n', show_type: bool = False, indent: int= 4, color: str= None)`Formats and colors a message, or class attribute.* Pretty print tuple, list, and dict objects* Customize the list delimiter and indent level for pretty print* Color output* Print the type for the outputprints the formatted string&lt;a name=&quot;utils_trace&quot;&gt;&lt;/a&gt;##### `cloc.utils.trace(message:str, exception: Exception= None, raise_exception: bool= False, exit_code: int= 0, color: str= None)`Formats and colors the output of a simplified traceback message.* Utilizes the echo util for formatted and colored output* Can accept and raise any type of Exception with the message* Give an exit code to return with if exception is not raisedprints the formatted string and calls `sys.exit(exit_code)` or raises the given Exception (Assert) used if none given&lt;a name=&quot;utils_listattrs&quot;&gt;&lt;/a&gt;##### `cloc.utils.listattrs(cls: object, verbose:bool=False)`List the attributes and values of a given class object. If verbose is True, python defined attributes will also be included.* Utilizes the echo util for formatted output&lt;br&gt;&lt;a name=&quot;examples&quot;&gt;&lt;/a&gt;## Advanced Usage Examples&lt;a name=&quot;viewset_example&quot;&gt;&lt;/a&gt;### Using a viewset```pythonfrom cloc import grpfrom cloc.viewsets import ReqSessionViewset@grp('cli')def cli():    &quot;&quot;&quot;requests session cli&quot;&quot;&quot;    passsession_viewset = ReqSessionViewset(raise_exception=False)cli.add_command(session_viewset)if __name__ == '__main__':    cli()```The get command is implemented by the ReqSessionViewset and does not have to be defined```bash$ python example3.py get https://jsonplaceholder.typicode.com/todos/1{  &quot;userId&quot;: 1,  &quot;id&quot;: 1,  &quot;title&quot;: &quot;delectus aut autem&quot;,  &quot;completed&quot;: false}```&lt;br&gt;</longdescription>
</pkgmetadata>