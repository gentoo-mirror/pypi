<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Redlines![Repository banner image](repository-open-graph.png)`Redlines` produces a Markdown text showing the differences between two strings/text. The changes are represented withstrike-throughs and underlines, which looks similar to Microsoft Word's track changes. This method of showing changes ismore familiar to lawyers and is more compact for long series of characters.Redlines uses [SequenceMatcher](https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher)to find differences between words used.## ExampleGiven an original string:    The quick brown fox jumps over the lazy dog.And the string to be tested with:    The quick brown fox walks past the lazy dog.The library gives a result of:    The quick brown fox &lt;del&gt;jumps over &lt;/del&gt;&lt;ins&gt;walks past &lt;/ins&gt;the lazy dog.Which is rendered like this:&gt; The quick brown fox &lt;del&gt;jumps over &lt;/del&gt;&lt;ins&gt;walks past &lt;/ins&gt;the lazy dog.## Install```shellpip install redlines```## UsageThe library contains one class: `Redlines`, which is used to compare text.```pythonfrom redlines import Redlinestest = Redlines(    &quot;The quick brown fox jumps over the lazy dog.&quot;,    &quot;The quick brown fox walks past the lazy dog.&quot;,)assert (        test.output_markdown        == &quot;The quick brown fox &lt;del&gt;jumps over &lt;/del&gt;&lt;ins&gt;walks past &lt;/ins&gt;the lazy dog.&quot;)```Alternatively, you can create Redline with the text to be tested, and compare several times to see the results.```pythonfrom redlines import Redlinestest = Redlines(&quot;The quick brown fox jumps over the lazy dog.&quot;)assert (        test.compare(&quot;The quick brown fox walks past the lazy dog.&quot;)        == &quot;The quick brown fox &lt;del&gt;jumps over &lt;/del&gt;&lt;ins&gt;walks past &lt;/ins&gt;the lazy dog.&quot;)assert (        test.compare(&quot;The quick brown fox jumps over the dog.&quot;)        == &quot;The quick brown fox jumps over the &lt;del&gt;lazy &lt;/del&gt;dog.&quot;)```Redlines also features a simple command line tool `redlines` to visualise the differences in text in the terminal.``` Usage: redlines text [OPTIONS] SOURCE TEST                                                                                                                                                                                                                                                                                                                                                                                                                                                  Compares the strings SOURCE and TEST and produce a redline in the terminal. ```### Custom styling in markdownBy default, markdown output is styled in &quot;red_green&quot;, like the following:&gt; &quot;The quick brown fox &lt;span style='color:red;font-weight:700;text-decoration:line-through;'&gt;jumps&gt; over &lt;/span&gt;&lt;span style='color:green;font-weight:700;'&gt;walks past &lt;/span&gt;the lazy dog.&quot;Set the `markdown_style` option in the constructor or compare function to change the styling.The available styles are &quot;red&quot;&quot; and &quot;none&quot;.You can also use css classes to provide custom styling by setting `markdown_style` as &quot;custom_css&quot;.Insertions and deletions are now styled using the &quot;redline-inserted&quot; and &quot;redline-deleted&quot; CSS classes.You can also set your own CSS classes by specifying the name of the CSS class in the options &quot;ins_class&quot;and &quot;del_class&quot; respectively in the constructor or compare function.## Uses* View and mark changes in legislation: [PLUS Explorer](https://houfu-plus-explorer.streamlit.app/)* Visualise changes after ChatGPT transforms a  text: [ChatGPT Prompt Engineering for Developers](https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/)  Lesson 6## Roadmap / ContributingPlease feel free to post issues and comments. I work on this in my free time, so please excuse lack of activity.### Nice things to do* &lt;s&gt;Style the way changes are presented&lt;/s&gt;* Other than Markdown, have other output formats (HTML? PDF?)* Associate changes with an author* Show different changes by different authors or times.If this was useful to you, please feel free to [contact me](mailto:houfu@lovelawrobots.com)!## LicenseMIT License</longdescription>
</pkgmetadata>