<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Yale Smart Alarm Client[![PyPI version](https://img.shields.io/pypi/v/yalesmartalarmclient.svg?logo=pypi&amp;logoColor=FFE873)](https://pypi.org/project/yalesmartalarmclient/)[![Supported Python versions](https://img.shields.io/pypi/pyversions/yalesmartalarmclient.svg?logo=python&amp;logoColor=FFE873)](https://pypi.org/project/yalesmartalarmclient/)[![PyPI downloads](https://img.shields.io/pypi/dm/yalesmartalarmclient.svg)](https://yalesmartalarmclient.org/packages/yalesmartalarmclient)[![GitHub](https://img.shields.io/github/license/domwillcode/yale-smart-alarm-client)](LICENSE)Yale Smart Alarm client is a python client for interacting with the Yale Smart Alarm System API.Supported functions:- Arm full (away)- Arm partial (away/night)- Disarm- Get alarm status- Door sensor status- Trigger alarm panic button### UsageCreate a client with:```from yalesmartalarmclient.client import YaleSmartAlarmClientclient = YaleSmartAlarmClient(username, password)```where username and password are your Yale Smart Alarm credentials.For full listing of function see functions.md#### LocksIterate the connected locks```pyhonclient = YaleSmartAlarmClient(username, password)for lock in client.lock_api.locks():    print(lock)```lock a single lock```pyhonlock = client.lock_api.get(name=&quot;myfrontdoor&quot;):lock.close()```unlock:```pyhonlock = client.lock_api.get(name=&quot;myfrontdoor&quot;):lock.open(pin_code=&quot;1234566&quot;)```DEPRECATED! Get connected locks states:```client.get_locks_status() # Returns an array of locks and status```#### AlarmsChange the alarm state with:```client.arm_full()client.arm_partial()client.disarm()```or```client.set_alarm_state(&lt;mode&gt;)```where 'mode' is one of:```from yalesmartalarmclient.client import (YALE_STATE_ARM_PARTIAL,                                         YALE_STATE_DISARM,                                         YALE_STATE_ARM_FULL)```Is the alarm armed fully or partially:```client.is_armed() # == True```or return alarm status. eg.```client.get_armed_status() is YALE_STATE_ARM_FULL```Trigger panic button```client.trigger_panic_button()```</longdescription>
</pkgmetadata>