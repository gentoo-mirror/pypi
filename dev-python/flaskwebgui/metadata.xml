<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flaskwebgui  [![Downloads](https://pepy.tech/badge/flaskwebgui)](https://pepy.tech/project/flaskwebgui)[![PyPI](https://img.shields.io/pypi/v/flaskwebgui?color=blue)](https://pypi.org/project/flaskwebgui/)Create desktop applications with Flask/FastAPI/Django!## Install``` pypip install flaskwebgui```If you are using `conda` checkout [this link](https://github.com/conda-forge/flaskwebgui-feedstock).## Usage with FlaskLet's say we have the following flask application:```py#main.pyfrom flask import Flask  from flask import render_templatefrom flaskwebgui import FlaskUI # import FlaskUIapp = Flask(__name__)@app.route(&quot;/&quot;)def hello():      return render_template('index.html')@app.route(&quot;/home&quot;, methods=['GET'])def home():     return render_template('some_page.html')if __name__ == &quot;__main__&quot;:  # If you are debugging you can do that in the browser:  # app.run()  # If you want to view the flaskwebgui window:  FlaskUI(app=app, server=&quot;flask&quot;).run()   ```Install [`waitress`](https://pypi.org/project/waitress/) for more performance.## Usage with Flask-SocketIOLet's say we have the following SocketIO application:```py#main.pyfrom flask import Flask, render_templatefrom flask_socketio import SocketIOfrom flaskwebgui import FlaskUIapp = Flask(__name__)app.config['SECRET_KEY'] = 'secret!'socketio = SocketIO(app)@app.route(&quot;/&quot;)def hello():      return render_template('index.html')@app.route(&quot;/home&quot;, methods=['GET'])def home():     return render_template('some_page.html')if __name__ == '__main__':    # socketio.run(app) for development    FlaskUI(        app=app,        socketio=socketio,        server=&quot;flask_socketio&quot;,        width=800,        height=600,    ).run()```App will be served by `flask_socketio`.## Usage with FastAPIPretty much the same, below you have the `main.py` file:```py#main.pyfrom fastapi import FastAPI, Requestfrom fastapi.responses import HTMLResponsefrom fastapi.staticfiles import StaticFilesfrom fastapi.templating import Jinja2Templatesfrom fastapi import FastAPIfrom flaskwebgui import FlaskUIapp = FastAPI()# Mounting default static filesapp.mount(&quot;/dist&quot;, StaticFiles(directory=&quot;dist/&quot;), name=&quot;dist&quot;)app.mount(&quot;/css&quot;, StaticFiles(directory=&quot;dist/css&quot;), name=&quot;css&quot;)app.mount(&quot;/img&quot;, StaticFiles(directory=&quot;dist/img&quot;), name=&quot;img&quot;)app.mount(&quot;/js&quot;, StaticFiles(directory=&quot;dist/js&quot;), name=&quot;js&quot;)templates = Jinja2Templates(directory=&quot;dist&quot;)@app.get(&quot;/&quot;, response_class=HTMLResponse)async def root(request: Request):    return templates.TemplateResponse(&quot;index.html&quot;, {&quot;request&quot;: request})@app.get(&quot;/home&quot;, response_class=HTMLResponse)async def home(request: Request):     return templates.TemplateResponse(&quot;some_page.html&quot;, {&quot;request&quot;: request})if __name__ == &quot;__main__&quot;:        FlaskUI(app=app, server=&quot;fastapi&quot;).run()```FastApi will be served by `uvicorn`.  ## Usage with DjangoNext to `manage.py` file create a `gui.py` file where you need to import `application` from project's `wsgi.py` file.```bash├── project_name│   ├── asgi.py│   ├── settings.py│   ├── urls.py│   └── wsgi.py├── gui.py # this ├── manage.py```In `gui.py` file add below code.```py#gui.pyfrom flaskwebgui import FlaskUIfrom djangodesktop.wsgi import application as appif __name__ == &quot;__main__&quot;:    FlaskUI(app=app, server=&quot;django&quot;).run()```Next start the application with:```pypython gui.py  ```Install `waitress` for more performance.## ConfigurationsDefault FlaskUI class parameters:- `server: Union[str, Callable[[Any], None]]`: function which receives `server_kwargs` to start server (see examples folder);- `server_kwargs: dict = None`: kwargs which will be passed down to `server` function;- `app: Any = None`: `wsgi` or `asgi` app;- `port: int = None`: specify port if not a free port will set;- `width: int = None`: width of the window;- `height: int = None`: height of the window;- `fullscreen: bool = True`: start app in fullscreen (maximized);- `on_startup: Callable = None`: function to before starting the browser and webserver;- `on_shutdown: Callable = None`: function to after the browser and webserver shutdown;- `browser_path: str = None`: set path to chrome executable or let the defaults do that;- `browser_command: List[str] = None`: command line with starts chrome in `app` mode;- `socketio: Any = None`: socketio instance in case of flask_socketio;Develop your app as you would normally do, add flaskwebgui at the end or for tests.**flaskwebgui doesn't interfere with your way of doing an application** it just helps converting it into a desktop app more easily with pyinstaller or [pyvan](https://github.com/ClimenteA/pyvan).## Advanced UsageYou can plug in any python webframework you want just by providing a function to start the server in `server` FlaskUI parameter which will be feed `server_kwargs`.Example:```python# until here is the flask example from abovedef start_flask(**server_kwargs):    app = server_kwargs.pop(&quot;app&quot;, None)    server_kwargs.pop(&quot;debug&quot;, None)    try:        import waitress        waitress.serve(app, **server_kwargs)    except:        app.run(**server_kwargs)if __name__ == &quot;__main__&quot;:    # Custom start flask    def saybye():        print(&quot;on_exit bye&quot;)    FlaskUI(        server=start_flask,        server_kwargs={            &quot;app&quot;: app,            &quot;port&quot;: 3000,            &quot;threaded&quot;: True,        },        width=800,        height=600,        on_shutdown=saybye,    ).run()```In this way any webframework can be plugged in and the webframework can be started in a more customized manner.Here is another example with the `nicegui` package:```pythonfrom flaskwebgui import FlaskUIfrom nicegui import uiui.label(&quot;Hello Super NiceGUI!&quot;)ui.button(&quot;BUTTON&quot;, on_click=lambda: ui.notify(&quot;button was pressed&quot;))def start_nicegui(**kwargs):    ui.run(**kwargs)if __name__ in {&quot;__main__&quot;, &quot;__mp_main__&quot;}:    DEBUG = False    if DEBUG:        ui.run()    else:        FlaskUI(            server=start_nicegui,            server_kwargs={&quot;dark&quot;: True, &quot;reload&quot;: False, &quot;show&quot;: False, &quot;port&quot;: 3000},            width=800,            height=600,        ).run()```Checkout `examples` for more information.## DistributionYou can distribute it as a standalone desktop app with **pyinstaller** or [**pyvan**](https://github.com/ClimenteA/pyvan).If pyinstaller failes try pyinstaller version 5.6.2.## Observations- Parameters `width`, `height` and maybe `fullscreen` may not work on Mac;- Window control is limited to width, height, fullscreen;- Remember the gui is still a browser - pressing F5 will refresh the page + other browser specific things (you can hack it with js though);- You don't need production level setup with gunicorn etc - you just have one user to serve;- If you want to debug/reload features - just run it as you would normally do with `app.run(**etc)`, `uvicorn.run(**etc)`, `python manage.py runserver` etc. flaskwebgui does not provide auto-reload you already have it in the webframework you are using;## CreditsIt's a combination of https://github.com/Widdershin/flask-desktop and https://github.com/ChrisKnott/EelIt has some advantages over flask-desktop because it doesn't use PyQt5, so you won't have any issues regarding licensing and over Eel because you don't need to learn any logic other than Flask/Django/FastAPI/etc.**Submit any questions/issues you have! Fell free to fork it and improve it!**</longdescription>
</pkgmetadata>