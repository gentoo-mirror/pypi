<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Pystache========|ci| |conda| |coverage| |bandit| |release||pre| |cov| |pylint||tag| |license| |python|This updated fork of Pystache is currently tested on Python 3.8+ and inConda, on Linux, Macos, and Windows (Python 2.7 is no longer supported).|logo|`Pystache &lt;https://github.com/PennyDreadfulMTG/pystache&gt;`__ is a Pythonimplementation of `Mustache &lt;https://github.com/mustache/mustache/&gt;`__.Mustache is a framework-agnostic, logic-free templating system inspiredby `ctemplate &lt;https://code.google.com/p/google-ctemplate/&gt;`__ andet. Like ctemplate, Mustache &quot;emphasizes separating logic from presentation:it is impossible to embed application logic in this template language.&quot;The `mustache(5) &lt;https://mustache.github.io/mustache.5.html&gt;`__ manpage provides a good introduction to Mustache's syntax. For a morecomplete (and more current) description of Mustache's behavior, see theofficial `Mustache spec &lt;https://github.com/mustache/spec&gt;`__.Pystache is `semantically versioned &lt;https://semver.org&gt;`__ and olderversions can still be found on `PyPI &lt;https://pypi.python.org/pypi/pystache&gt;`__.This version of Pystache now passes all tests in `version 1.1.3&lt;https://github.com/mustache/spec/tree/v1.1.3&gt;`__ of the spec.Requirements============Pystache is tested with:-  Python 3.8-  Python 3.9-  Python 3.10-  Python 3.11-  Conda (py38 and py310)JSON support is needed only for the command-line interface and to runthe spec tests; PyYAML can still be used (see the Develop section).Official support for Python 2 has ended with Pystache version 0.6.0... note:: This project uses setuptools_scm_ to generate and maintain the          version file, which only gets included in the sdist/wheel          packages. In a fresh clone, running any of the tox_ commands          should generate the current version file... _setuptools_scm: https://github.com/pypa/setuptools_scm.. _tox: https://github.com/tox-dev/toxQuick Start===========Be sure to get the latest release from either Pypi or Github.Install It----------From Pypi::  $ pip install pystacheOr Github::  $ pip install -U pystache -f https://github.com/PennyDreadfulMTG/pystache/releases/And test it::  $ pystache-testTo install and test from source (e.g. from GitHub), see the Developsection.Use It------Open a python console::  &gt;&gt;&gt; import pystache  &gt;&gt;&gt; print(pystache.render('Hi {{person}}!', {'person': 'Mom'}))  Hi Mom!You can also create dedicated view classes to hold your view logic.Here's your view class (in ../pystache/tests/examples/readme.py):::  class SayHello(object):      def to(self):          return &quot;Pizza&quot;Instantiating like so:::  &gt;&gt;&gt; from pystache.tests.examples.readme import SayHello  &gt;&gt;&gt; hello = SayHello()Then your template, say_hello.mustache (by default in the same directoryas your class definition):::  Hello, {{to}}!Pull it together:::  &gt;&gt;&gt; renderer = pystache.Renderer()  &gt;&gt;&gt; print(renderer.render(hello))  Hello, Pizza!For greater control over rendering (e.g. to specify a custom templatedirectory), use the ``Renderer`` class like above. One can passattributes to the Renderer class constructor or set them on a Rendererinstance. To customize template loading on a per-view basis, subclass``TemplateSpec``. See the docstrings of the`Renderer &lt;https://github.com/PennyDreadfulMTG/pystache/blob/master/pystache/renderer.py&gt;`__class and`TemplateSpec &lt;https://github.com/PennyDreadfulMTG/pystache/blob/master/pystache/template_spec.py&gt;`__class for more information.You can also pre-parse a template:::  &gt;&gt;&gt; parsed = pystache.parse(u&quot;Hey {{#who}}{{.}}!{{/who}}&quot;)  &gt;&gt;&gt; print(parsed)  ['Hey ', _SectionNode(key='who', index_begin=12, index_end=18, parsed=[_EscapeNode(key='.'), '!'])]And then:::  &gt;&gt;&gt; print(renderer.render(parsed, {'who': 'Pops'}))  Hey Pops!  &gt;&gt;&gt; print(renderer.render(parsed, {'who': 'you'}))  Hey you!Unicode-------This section describes how Pystache handles unicode, strings, andencodings.Internally, Pystache uses `only unicode strings`_ (``str`` in Python 3).For input, Pystache accepts byte strings (``bytes`` in Python 3).For output, Pystache's template rendering methods return only unicode... _only unicode strings: https://docs.python.org/howto/unicode.html#tips-for-writing-unicode-aware-programsPystache's ``Renderer`` class supports a number of attributes to controlhow Pystache converts byte strings to unicode on input. These includethe ``file_encoding``, ``string_encoding``, and ``decode_errors`` attributes.The ``file_encoding`` attribute is the encoding the renderer uses toconvert to unicode any files read from the file system. Similarly,``string_encoding`` is the encoding the renderer uses to convert any otherbyte strings encountered during the rendering process into unicode (e.g.context values that are encoded byte strings).The ``decode_errors`` attribute is what the renderer passes as the``errors`` argument to Python's built-in unicode-decoding function(``str()`` in Python 3). The valid values for this argument are``strict``, ``ignore``, and ``replace``.Each of these attributes can be set via the ``Renderer`` class'sconstructor using a keyword argument of the same name. See the Rendererclass's docstrings for further details. In addition, the ``file_encoding``attribute can be controlled on a per-view basis by subclassing the``TemplateSpec`` class. When not specified explicitly, these attributesdefault to values set in Pystache's ``defaults`` module.Develop=======To test from a source distribution (without installing)::  $ python test_pystache.pyTo test Pystache with multiple versions of Python (with a singlecommand!) and different platforms, you can use [tox](https://pypi.python.org/pypi/tox)::  $ pip install tox  $ tox -e pyTo run tests on multiple versions with coverage, run::  $ tox -e py38-linux,py39-linux  # for example(substitute your platform above, eg, macos or windows)The source distribution tests also include doctests and tests from theMustache spec. To include tests from the Mustache spec in your testruns::  $ git submodule update --initThe test harness parses the spec's (more human-readable) yaml files if`PyYAML &lt;http://pypi.python.org/pypi/PyYAML&gt;`__ is present. Otherwise,it parses the json files. To install PyYAML::  $ pip install pyyaml  # note this is installed automatically by toxOnce the submodule is available, you can run the full test set with::  $ tox -e setup -- ext/spec/specsMaking Changes &amp; Contributing-----------------------------We use the gitchangelog_ action to generate our github Release page, aswell as the gitchangelog message format to help it categorize/filtercommits for a tidier release page. Please use the appropriate ACTIONmodifiers in any Pull Requests.This repo is also pre-commit_ enabled for various linting and formatchecks.  The checks run automatically on commit and will fail thecommit (if not clean) with some checks performing simple file corrections.If other checks fail on commit, the failure display should explain the errortypes and line numbers. Note you must fix any fatal errors for thecommit to succeed; some errors should be fixed automatically (use``git status`` and ``git diff`` to review any changes).Note ``pylint`` is the primary check that requires your own input, as wellas a decision as to the appropriate fix action.  You must fix any ``pylint``warnings (relative to the baseline config score) for the commit to succeed.See the following pages for more information on gitchangelog and pre-commit... inclusion-marker-1* generate-changelog_* pre-commit-config_* pre-commit-usage_.. _generate-changelog:  docs/source/dev/generate-changelog.rst.. _pre-commit-config: docs/source/dev/pre-commit-config.rst.. _pre-commit-usage: docs/source/dev/pre-commit-usage.rst.. inclusion-marker-2You will need to install pre-commit before contributing any changes;installing it using your system's package manager is recommended,otherwise install with pip into your usual virtual environment usingsomething like::  $ sudo emerge pre-commit  --or--  $ pip install pre-committhen install it into the repo you just cloned::  $ git clone https://github.com/PennyDreadfulMTG/pystache  $ cd pystache/  $ pre-commit installIt's usually a good idea to update the hooks to the latest version::    pre-commit autoupdate.. _gitchangelog: https://github.com/sarnold/gitchangelog-action.. _pre-commit: https://pre-commit.com/Mailing List (old)------------------There is(was) a `mailing list`_. Note that there is a bit of a delaybetween posting a message and seeing it appear in the mailing list archive... _mailing list: https://librelist.com/browser/pystache/Credits=======  &gt;&gt;&gt; import pystache  &gt;&gt;&gt; context = { 'author': 'Chris Wanstrath', 'maintainer': 'Chris Jerdonek','refurbisher': 'Steve Arnold', 'new_maintainer': 'Thomas David Baker' }  &gt;&gt;&gt; print(pystache.render(&quot;Author: {{author}}\nMaintainer: {{maintainer}}\nRefurbisher: {{refurbisher}}\nNew maintainer: {{new_maintainer}}&quot;, context))  Author: Chris Wanstrath  Maintainer: Chris Jerdonek  Refurbisher: Steve Arnold  New maintainer: Thomas David BakerPystache logo by `David Phillips &lt;http://davidphillips.us/&gt;`__ islicensed under a `Creative Commons Attribution-ShareAlike 3.0 UnportedLicense &lt;https://creativecommons.org/licenses/by-sa/3.0/deed.en_US&gt;`__.|ccbysa|.. |ci| image:: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/ci.yml/badge.svg    :target: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/ci.yml    :alt: CI Status.. |conda| image:: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/conda.yml/badge.svg    :target: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/conda.yml    :alt: Conda Status.. |coverage| image:: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/coverage.yml/badge.svg    :target: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/coverage.yml    :alt: Coverage workflow.. |bandit| image:: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/bandit.yml/badge.svg    :target: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/bandit.yml    :alt: Security check - Bandit.. |release| image:: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/release.yml/badge.svg    :target: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/release.yml    :alt: Release Status.. |cov| image:: https://raw.githubusercontent.com/PennyDreadfulMTG/pystache/badges/master/test-coverage.svg    :target: https://github.com/PennyDreadfulMTG/pystache/    :alt: Test coverage.. |pylint| image:: https://raw.githubusercontent.com/PennyDreadfulMTG/pystache/badges/master/pylint-score.svg    :target: https://github.com/PennyDreadfulMTG/pystache/actions/workflows/pylint.yml    :alt: Pylint Score.. |license| image:: https://img.shields.io/github/license/PennyDreadfulMTG/pystache    :target: https://github.com/PennyDreadfulMTG/pystache/blob/master/LICENSE    :alt: License.. |tag| image:: https://img.shields.io/github/v/tag/PennyDreadfulMTG/pystache?color=green&amp;include_prereleases&amp;label=latest%20release    :target: https://github.com/PennyDreadfulMTG/pystache/releases    :alt: GitHub tag.. |python| image:: https://img.shields.io/badge/python-3.6+-blue.svg    :target: https://www.python.org/downloads/    :alt: Python.. |pre| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;amp;logoColor=white   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commit.. |logo| image:: gh/images/logo_phillips_small.png.. |ccbysa| image:: https://i.creativecommons.org/l/by-sa/3.0/88x31.png</longdescription>
</pkgmetadata>