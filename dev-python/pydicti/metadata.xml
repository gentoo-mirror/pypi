<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pydicti-------|Tests| |Coverage| |Version| |License|Installation~~~~~~~~~~~~You can install the newest version of *pydicti* from PyPI_:.. code:: bash    pip install pydictiAlternatively, you can just take the file ``pydicti.py`` and redistributeit with your application... _PyPI: https://pypi.python.org/pypi/pydicti/Overview~~~~~~~~- ``class dicti``: default case insensitive dictionary type- ``class odicti``: ordered case insensitive dictionary type- ``def build_dicti``: create a case insensitive dictionary class- ``def Dicti``: create a case insensitive copy of a dictionarydicti=====Objects of type ``dicti`` are dictionaries that feature case insensitiveitem access:.. code:: python    &gt;&gt;&gt; d = dicti(Hello='foo', world='bar')    &gt;&gt;&gt; d['heLLO']    'foo'    &gt;&gt;&gt; 'WOrld' in d    TrueInternally however, the keys retain their original case:.. code:: python    &gt;&gt;&gt; sorted(d.keys())    ['Hello', 'world']odicti======The type ``odicti`` instanciates order-preserving case insensitivedictionaries:.. code:: python    &gt;&gt;&gt; odicti(zip('abc', range(3)))    Dicti(OrderedDict([('a', 0), ('b', 1), ('c', 2)]))build_dicti===========With ``build_dicti`` you can create custom case insensitive dictionaries.This function is what is used to create the ``pydicti.dicti`` and``pydicti.odicti`` types. Note that calling ``build_dicti`` several timeswith the same argument will result in identical types:.. code:: python    &gt;&gt;&gt; build_dicti(dict) is dicti    True    &gt;&gt;&gt; build_dicti(OrderedDict) is odicti    True``build_dicti`` uses subclassing to inherit the semantics of the given basedictionary type:.. code:: python    &gt;&gt;&gt; issubclass(odicti, OrderedDict)    TrueDicti=====The function ``Dicti`` is convenient for creating case insensitivecopies of dictionary instances:.. code:: python    &gt;&gt;&gt; o = OrderedDict(zip('abcdefg', range(7)))    &gt;&gt;&gt; oi = Dicti(o)    &gt;&gt;&gt; type(oi) is odicti    TrueJSON~~~~The subclassing approach allows to plug your dictionary instance intoplaces where typechecking with ``isinstance`` is used, like in the json_module:.. code:: python    &gt;&gt;&gt; import json    &gt;&gt;&gt; d == json.loads(json.dumps(d), object_hook=dicti)    True.. _json: http://docs.python.org/3.3/library/json.htmlYou can use ``json.loads(s, object_pairs_hook=odicti)`` todeserialize ordered dictionaries.Pitfalls~~~~~~~~The equality comparison tries preserves the semantics of the base type aswell as reflexitivity. This has impact on the transitivity of thecomparison operator:.. code:: python    &gt;&gt;&gt; i = dicti(oi)    &gt;&gt;&gt; roi = odicti(reversed(list(oi.items())))    &gt;&gt;&gt; roi == i and i == oi    True    &gt;&gt;&gt; oi != roi and roi != oi  # NOT transitive!    True    &gt;&gt;&gt; oi == i and i == oi      # reflexive    TrueThe `coercion rules`_ in python allow this to work pretty well whenperforming comparisons between types that are subclasses of each other. Becareful otherwise, however... _`coercion rules`: http://docs.python.org/2/reference/datamodel.html#coercion-rulesLicense~~~~~~~Copyright © 2013 Thomas Gläßle &lt;t_glaessle@gmx.de&gt;This work  is free. You can  redistribute it and/or modify  it under theterms of the Do What The Fuck  You Want To Public License, Version 2, aspublished by Sam Hocevar. See the COPYING file for more details.This program  is free software.  It comes  without any warranty,  to theextent permitted by applicable law... Badges:.. |Version| image::    https://img.shields.io/pypi/v/pydicti.svg   :target:             https://pypi.python.org/pypi/pydicti   :alt:                Latest Version.. |Tests| image::      https://github.com/coldfix/pydicti/workflows/Tests/badge.svg   :target:             https://github.com/coldfix/pydicti/actions?query=Tests   :alt:                Test Status.. |Coverage| image::   https://codecov.io/gh/coldfix/pydicti/branch/master/graph/badge.svg?token=7FEGhE9UVI   :target:             https://codecov.io/gh/coldfix/pydicti   :alt:                Coverage.. |License| image::    https://img.shields.io/pypi/l/pydicti.svg   :target:             https://github.com/coldfix/pydicti/blob/master/COPYING   :alt:                LicenseCHANGELOG~~~~~~~~~1.2.0=====Date: 25.02.2023- fix incorrect behaviour of ``__or__`` and ``__ior__``, see #81.2.0=====Date: 15.12.2022- add type hints1.1.6=====Date: 04.11.2021- update the badges on the landing page1.1.5=====Date: 04.11.2021- maintenance release for testing automatic releases using GitHub Actions1.1.4=====Date: 17.10.2020- use ``str.casefold()`` on python3- make normalization function a parameter of ``build_dict``, so that  user-defined normalization functions can be passed1.1.3=====Date: 28.06.2019- avoid key recomputation in ``__setitem__``1.1.2=====Date: 28.06.2019- leave item order invariant under assignment in odicti (#2)- leave key case invariant under assignment1.1.1=====Date: 25.03.2019- fix deprecated MutableMapping import (error on py38)1.1.0=====Date: 19.03.2019- drop py2.6 support- fix version number in long_description1.0.0=====Date: 19.03.2019- make str representation more dict-like- misc cleanup0.0.6=====Date: 08.09.2016- fix UnicodeDecodeError in setup when UTF-8 is not the default encoding0.0.5=====Date: 18.05.2016- fix pickling on py 3.5- the 'name' parameter to build_dicti can now be a qualname0.0.4=====Date: 01.02.2014- add coverage reports- use more extensive unit tests- add support for pickle0.0.3=====Date: 26.01.2014- add support for python26- make dependency on ``OrderedDict`` optional- migrate to setuptools in order to use testing commands- support `ordereddict.OrderedDict`_ as fallback.. _`ordereddict.OrderedDict`: https://pypi.python.org/pypi/ordereddict/1.10.0.2=====Date: 29.12.2013- fix ``dicti.pop``- support ``deepcopy(dicti)``- make nosetest automatically execute the doctests</longdescription>
</pkgmetadata>