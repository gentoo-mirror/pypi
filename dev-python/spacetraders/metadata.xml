<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># spacetraders python clientA client library for accessing SpaceTraders API## UsageFirst, create a client:```pythonfrom spacetraders import Clientclient = Client(base_url=&quot;https://api.spacetraders.io/v2&quot;)```If the endpoints you're going to hit require authentication, use `AuthenticatedClient` instead:```pythonfrom spacetraders import AuthenticatedClientclient = AuthenticatedClient(base_url=&quot;https://api.spacetraders.io/v2&quot;, token=&quot;SuperSecretToken&quot;)```Now call your endpoint and use your models:```pythonfrom spacetraders.models import GetMyAgentResponse200from spacetraders.types import Responseresponse: Response[GetMyAgentResponse200] = client.agents.get_my_agent()```Or do the same thing with an async version:```pythonfrom spacetraders.models import GetMyAgentResponse200from spacetraders.types import Responseresponse: Response[GetMyAgentResponse200] = await client.agents.get_my_agent()```By default, when you're calling an HTTPS API it will attempt to verify that SSL is working correctly. Using certificate verification is highly recommended most of the time, but sometimes you may need to authenticate to a server (especially an internal server) using a custom certificate bundle.```pythonclient = AuthenticatedClient(    base_url=&quot;https://internal_api.example.com&quot;,     token=&quot;SuperSecretToken&quot;,    verify_ssl=&quot;/path/to/certificate_bundle.pem&quot;,)```You can also disable certificate validation altogether, but beware that **this is a security risk**.```pythonclient = AuthenticatedClient(    base_url=&quot;https://internal_api.example.com&quot;,     token=&quot;SuperSecretToken&quot;,     verify_ssl=False)```There are more settings on the generated `Client` class which let you control more runtime behavior, check out the docstring on that class for more info.Things to know:1. All path/query params and bodies become method arguments.1. Tagged endpoints will use the first tag as a module name for the function1. Any endpoint which did not have a tag will be in `client.default`## Refreshing the API definitionThis project is generated from [SpaceTradersAPI/api-docs](https://github.com/SpaceTradersAPI/api-docs/). The following steps outline how to refresh from a new schema:1. Clone the version of the api-docs to be generated in another directory `git clone https://github.com/SpaceTradersAPI/api-docs /tmp/api-docs`1. Navigate to `/tmp/api-docs` and generate a single OpenAPI bundle `npx @redocly/openapi-cli@latest bundle -o bundle.json`1. In this projects directory, refresh the generated class with `poetry run openapi-python-client update --path /tmp/api-docs/bundle.json --meta none --config openapi-client.yml --custom-template-path=openapi-client-template`## Building / publishing this ClientThis project uses [Poetry](https://python-poetry.org/) to manage dependencies and packaging.  Here are the basics:1. Update the metadata in pyproject.toml (e.g. authors, version)1. Publish the client with `poetry publish --build -r &lt;your-repository-name&gt;` or, if for public PyPI, just `poetry publish --build`If you want to install this client into another project without publishing it (e.g. for development) then:1. If that project **is using Poetry**, you can simply do `poetry add &lt;path-to-this-client&gt;` from that project1. If that project is not using Poetry:    1. Build a wheel with `poetry build -f wheel`    1. Install that wheel from the other project `pip install &lt;path-to-wheel&gt;`</longdescription>
</pkgmetadata>