<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;mypy-boto3-medialive&quot;&gt;&lt;/a&gt;# mypy-boto3-medialive[![PyPI - mypy-boto3-medialive](https://img.shields.io/pypi/v/mypy-boto3-medialive.svg?color=blue)](https://pypi.org/project/mypy-boto3-medialive)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-medialive.svg?color=blue)](https://pypi.org/project/mypy-boto3-medialive)[![Docs](https://img.shields.io/readthedocs/boto3-stubs.svg?color=blue)](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_medialive/)[![PyPI - Downloads](https://static.pepy.tech/badge/mypy-boto3-medialive)](https://pepy.tech/project/mypy-boto3-medialive)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[boto3.MediaLive 1.28.34](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/medialive.html#MediaLive)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.17.3](https://github.com/youtype/mypy_boto3_builder).More information can be found on[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in[mypy-boto3-medialive docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_medialive/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [mypy-boto3-medialive](#mypy-boto3-medialive)  - [How to install](#how-to-install)    - [VSCode extension](#vscode-extension)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Type definitions](#type-definitions)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;vscode-extension&quot;&gt;&lt;/a&gt;### VSCode extensionAdd[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)extension to your VSCode and run `AWS boto3: Quick Start` command.Click `Modify` and select `boto3 common` and `MediaLive`.&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `boto3-stubs` for `MediaLive` service.```bash# install with boto3 type annotationspython -m pip install 'boto3-stubs[medialive]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'boto3-stubs-lite[medialive]'# standalone installationpython -m pip install mypy-boto3-medialive```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y mypy-boto3-medialive```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `boto3-stubs[medialive]` in your environment:```bashpython -m pip install 'boto3-stubs[medialive]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `boto3` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `boto3-stubs-lite[medialive]` in your environment:```bashpython -m pip install 'boto3-stubs-lite[medialive]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `boto3-stubs` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `boto3-stubs` with services you use in your environment:```bashpython -m pip install 'boto3-stubs[medialive]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed `boto3-stubs`Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `boto3-stubs[medialive]` with services you use in your environment:```bashpython -m pip install 'boto3-stubs[medialive]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `boto3-stubs[medialive]` in your environment:```bashpython -m pip install 'boto3-stubs[medialive]'````Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `boto3-stubs[medialive]` in your environment:```bashpython -m pip install 'boto3-stubs[medialive]'```Optionally, you can install `boto3-stubs` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`MediaLiveClient` provides annotations for `boto3.client(&quot;medialive&quot;)`.```pythonfrom boto3.session import Sessionfrom mypy_boto3_medialive import MediaLiveClientclient: MediaLiveClient = Session().client(&quot;medialive&quot;)# now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`mypy_boto3_medialive.paginator` module contains type annotations for allpaginators.```pythonfrom boto3.session import Sessionfrom mypy_boto3_medialive import MediaLiveClientfrom mypy_boto3_medialive.paginator import (    DescribeSchedulePaginator,    ListChannelsPaginator,    ListInputDeviceTransfersPaginator,    ListInputDevicesPaginator,    ListInputSecurityGroupsPaginator,    ListInputsPaginator,    ListMultiplexProgramsPaginator,    ListMultiplexesPaginator,    ListOfferingsPaginator,    ListReservationsPaginator,)client: MediaLiveClient = Session().client(&quot;medialive&quot;)# Explicit type annotations are optional here# Types should be correctly discovered by mypy and IDEsdescribe_schedule_paginator: DescribeSchedulePaginator = client.get_paginator(&quot;describe_schedule&quot;)list_channels_paginator: ListChannelsPaginator = client.get_paginator(&quot;list_channels&quot;)list_input_device_transfers_paginator: ListInputDeviceTransfersPaginator = client.get_paginator(    &quot;list_input_device_transfers&quot;)list_input_devices_paginator: ListInputDevicesPaginator = client.get_paginator(&quot;list_input_devices&quot;)list_input_security_groups_paginator: ListInputSecurityGroupsPaginator = client.get_paginator(    &quot;list_input_security_groups&quot;)list_inputs_paginator: ListInputsPaginator = client.get_paginator(&quot;list_inputs&quot;)list_multiplex_programs_paginator: ListMultiplexProgramsPaginator = client.get_paginator(    &quot;list_multiplex_programs&quot;)list_multiplexes_paginator: ListMultiplexesPaginator = client.get_paginator(&quot;list_multiplexes&quot;)list_offerings_paginator: ListOfferingsPaginator = client.get_paginator(&quot;list_offerings&quot;)list_reservations_paginator: ListReservationsPaginator = client.get_paginator(&quot;list_reservations&quot;)```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`mypy_boto3_medialive.waiter` module contains type annotations for all waiters.```pythonfrom boto3.session import Sessionfrom mypy_boto3_medialive import MediaLiveClientfrom mypy_boto3_medialive.waiter import (    ChannelCreatedWaiter,    ChannelDeletedWaiter,    ChannelRunningWaiter,    ChannelStoppedWaiter,    InputAttachedWaiter,    InputDeletedWaiter,    InputDetachedWaiter,    MultiplexCreatedWaiter,    MultiplexDeletedWaiter,    MultiplexRunningWaiter,    MultiplexStoppedWaiter,)client: MediaLiveClient = Session().client(&quot;medialive&quot;)# Explicit type annotations are optional here# Types should be correctly discovered by mypy and IDEschannel_created_waiter: ChannelCreatedWaiter = client.get_waiter(&quot;channel_created&quot;)channel_deleted_waiter: ChannelDeletedWaiter = client.get_waiter(&quot;channel_deleted&quot;)channel_running_waiter: ChannelRunningWaiter = client.get_waiter(&quot;channel_running&quot;)channel_stopped_waiter: ChannelStoppedWaiter = client.get_waiter(&quot;channel_stopped&quot;)input_attached_waiter: InputAttachedWaiter = client.get_waiter(&quot;input_attached&quot;)input_deleted_waiter: InputDeletedWaiter = client.get_waiter(&quot;input_deleted&quot;)input_detached_waiter: InputDetachedWaiter = client.get_waiter(&quot;input_detached&quot;)multiplex_created_waiter: MultiplexCreatedWaiter = client.get_waiter(&quot;multiplex_created&quot;)multiplex_deleted_waiter: MultiplexDeletedWaiter = client.get_waiter(&quot;multiplex_deleted&quot;)multiplex_running_waiter: MultiplexRunningWaiter = client.get_waiter(&quot;multiplex_running&quot;)multiplex_stopped_waiter: MultiplexStoppedWaiter = client.get_waiter(&quot;multiplex_stopped&quot;)```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`mypy_boto3_medialive.literals` module contains literals extracted from shapesthat can be used in user code for type checking.Full list of `MediaLive` Literals can be found in[docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_medialive/literals/).```pythonfrom mypy_boto3_medialive.literals import AacCodingModeTypedef check_value(value: AacCodingModeType) -&gt; bool:    ...```&lt;a id=&quot;type-definitions&quot;&gt;&lt;/a&gt;### Type definitions`mypy_boto3_medialive.type_defs` module contains structures and shapesassembled to typed dictionaries and unions for additional type checking.Full list of `MediaLive` TypeDefs can be found in[docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_medialive/type_defs/).```pythonfrom mypy_boto3_medialive.type_defs import AacSettingsTypeDefdef get_value() -&gt; AacSettingsTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for `boto3`updates. It delivers drop-in type annotations for you and makes sure that:- All available `boto3` services are covered.- Each public class and method of every `boto3` service gets valid type  annotations extracted from `botocore` schemas.- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`  libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.resource` calls- Auto discovery of types for `session.client` and `session.resource` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`mypy-boto3-medialive` version is the same as related `boto3` version andfollows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[boto3 docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_medialive/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>