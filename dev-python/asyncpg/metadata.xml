<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>asyncpg -- A fast PostgreSQL Database Client Library for Python/asyncio=======================================================================.. image:: https://github.com/MagicStack/asyncpg/workflows/Tests/badge.svg   :target: https://github.com/MagicStack/asyncpg/actions?query=workflow%3ATests+branch%3Amaster   :alt: GitHub Actions status.. image:: https://img.shields.io/pypi/v/asyncpg.svg   :target: https://pypi.python.org/pypi/asyncpg**asyncpg** is a database interface library designed specifically forPostgreSQL and Python/asyncio.  asyncpg is an efficient, clean implementationof PostgreSQL server binary protocol for use with Python's ``asyncio``framework.  You can read more about asyncpg in an introductory`blog post &lt;http://magic.io/blog/asyncpg-1m-rows-from-postgres-to-python/&gt;`_.asyncpg requires Python 3.7 or later and is supported for PostgreSQLversions 9.5 to 15.  Older PostgreSQL versions or other databases implementingthe PostgreSQL protocol *may* work, but are not being actively tested.Documentation-------------The project documentation can be found`here &lt;https://magicstack.github.io/asyncpg/current/&gt;`_.Performance-----------In our testing asyncpg is, on average, **3x** faster than psycopg2(and its asyncio variant -- aiopg)... image:: https://raw.githubusercontent.com/MagicStack/asyncpg/master/performance.png    :target: https://gistpreview.github.io/?b8eac294ac85da177ff82f784ff2cb60The above results are a geometric mean of benchmarks obtained with PostgreSQL`client driver benchmarking toolbench &lt;https://github.com/MagicStack/pgbench&gt;`_in November 2020 (click on the chart to see full details).Features--------asyncpg implements PostgreSQL server protocol natively and exposes itsfeatures directly, as opposed to hiding them behind a generic facadelike DB-API.This enables asyncpg to have easy-to-use support for:* **prepared statements*** **scrollable cursors*** **partial iteration** on query results* automatic encoding and decoding of composite types, arrays,  and any combination of those* straightforward support for custom data typesInstallation------------asyncpg is available on PyPI and has no dependencies.Use pip to install::    $ pip install asyncpgBasic Usage-----------.. code-block:: python    import asyncio    import asyncpg    async def run():        conn = await asyncpg.connect(user='user', password='password',                                     database='database', host='127.0.0.1')        values = await conn.fetch(            'SELECT * FROM mytable WHERE id = $1',            10,        )        await conn.close()    loop = asyncio.get_event_loop()    loop.run_until_complete(run())License-------asyncpg is developed and distributed under the Apache 2.0 license.</longdescription>
</pkgmetadata>