<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Well ArchitectedPython Well-Architected CDK Patterns from https://cdkpatterns.com/patterns/well-architected/# Available Constructs- Api- ApiLambda- ApiLambdaDynamodb- DynamodbTable- HttpApiStepFunctions- LambdaFunction- RestApi- RestApiSns- SnsLambda- WebApplicationFirewall# Examples## Creating a Stack using Well Architected Constructs```Pythonimport constructsimport well_architected_constructs.web_application_firewallimport well_architected_constructs.api_lambda_dynamodbimport well_architected_stackclass WafApiLambdaDynamodb(well_architected_stack.Stack):    def __init__(        self, scope: constructs.Construct, id: str,        partition_key='path',        sort_key=None,        **kwargs    ):        super().__init__(scope, id, **kwargs)        self.name = self.camel_to_snake(id)        self.api_lambda_dynamodb = well_architected_constructs.api_lambda_dynamodb.ApiLambdaDynamodbConstruct(            self, 'ApiLambdaDynamoDb',            function_name=self.name,            partition_key=partition_key,            error_topic=self.error_topic,        )        self.web_application_firewall = well_architected_constructs.web_application_firewall.WebApplicationFirewall(            self, 'WebApplicationFirewall',            error_topic=self.error_topic,            target_arn= f&quot;arn:aws:apigateway:region::/restapis/{self.api_lambda_dynamodb.rest_api.api_id}/stages/{self.api_lambda_dynamodb.rest_api.api.deployment_stage.stage_name}&quot;,        )    @staticmethod    def camel_to_snake(text):        return ''.join([            '_'+character.lower()            if character.isupper()            else character            for character in text        ]).lstrip('_')```</longdescription>
</pkgmetadata>