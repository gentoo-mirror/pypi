<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Espresso[![PyPI version](https://img.shields.io/pypi/v/geo-espresso?logo=pypi&amp;style=flat-square&amp;color=bde0fe&amp;labelColor=f8f9fa)](https://pypi.org/project/geo-espresso/)[![build](https://img.shields.io/github/actions/workflow/status/inlab-geo/espresso/build_wheels.yml?branch=main&amp;logo=githubactions&amp;style=flat-square&amp;color=ccd5ae&amp;labelColor=f8f9fa)](https://github.com/inlab-geo/espresso/actions/workflows/build_wheels.yml)[![Documentation Status](https://img.shields.io/readthedocs/geo-espresso?logo=readthedocs&amp;style=flat-square&amp;color=fed9b7&amp;labelColor=f8f9fa&amp;logoColor=eaac8b)](https://geo-espresso.readthedocs.io/en/latest/?badge=latest)[![Slack](https://img.shields.io/badge/Slack-InLab_community-4A154B?logo=slack&amp;style=flat-square&amp;color=cdb4db&amp;labelColor=f8f9fa&amp;logoColor=9c89b8)](https://join.slack.com/t/inlab-community/shared_invite/zt-1ejny069z-v5ZyvP2tDjBR42OAu~TkHg)&gt; Related repositories by [InLab](https://inlab.edu.au/community/)&gt; - [CoFI](https://github.com/inlab-geo/cofi)&gt; - [CoFI Examples](https://github.com/inlab-geo/cofi-examples)## Introduction**E**arth **S**cience **PR**oblems for the **E**valuation of **S**trategies, **S**olvers and **O**ptimizers (Espresso) is a collection of datasets, and associated simulation codes, spanning a wide range of geoscience problems. Together they form a suite of real-world test problems that can be used to support the development, evaluation and benchmarking of a wide range of toolsand algorithms for inference, inversion and optimisation. All problems are designed to share a common interface, so that changing from one test problemto another requires changing one line of code. The Espresso project is a community effort - if you think it sounds useful,please consider contributing an example or two from your own research. The projectis currently being coordinated by InLab, with support from the CoFI developmentteam.For more information, please visit [our documentation](geo-espresso.readthedocs.io).## Installation```console$ pip install geo-espresso```Check Espresso documentation - [installation page](https://geo-espresso.readthedocs.io/en/latest/user_guide/installation.html) for details on dependencies and setting up with virtual environments.## Basic usageOnce installed, each test problem can be imported using the following command:```pythonfrom espresso import &lt;testproblem&gt;```Replace ``&lt;testproblem&gt;`` with an actual problem class in Espresso, such as`SimpleRegression` and `FmmTomography`. See [here](https://geo-espresso.readthedocs.io/en/latest/user_guide/contrib/index.html) for a full list of problems Espresso currently includes.Once a problem is imported, its main functions can be called using the same structure for each problem. For instance:```pythonfrom espresso import FmmTomographyproblem = FmmTomography(example_number=1)model = problem.good_modeldata = problem.datapred = problem.forward(model)fig_model = problem.plot_model(model)```You can access related metadata programatically:```pythonprint(FmmTomography.metadata[&quot;problem_title&quot;])print(FmmTomography.metadata[&quot;problem_short_description&quot;])print(FmmTomography.metadata[&quot;author_names&quot;])```Other problem-specific parameters can be accessed through the problem instance. For instance:```pythonprint(problem.extent)print(problem.model_shape)```Which additional values are set is highly problem-specific and we suggest to consult the [Espresso Documentation on the problems](https://geo-espresso.readthedocs.io/en/latest/user_guide/contrib/index.html).## ContributingInterested in contributing? Please check out our [contributor's guide](https://geo-espresso.readthedocs.io/en/latest/contributor_guide/index.html).## LicenceEspresso is a community driven project to create a large suite of forwardsimulations to enable researchers to get example data without the need to understand each individual problem in detail.Licensing is done individually by each contributor. If a contributor wants to freely share their code example we recommend the MIT licence or a 2-clause BSD licence. To determine the licence of an existing Espressoproblem, please consult the documentation section of that problem.All the other core functions of Espresso written by InLab Espresso developerteam are distributed under a 2-clause BSD licence. A copy of this licence isprovided with distributions of the software.</longdescription>
</pkgmetadata>