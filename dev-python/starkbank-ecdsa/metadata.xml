<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## A lightweight and fast pure Python ECDSA### OverviewWe tried other Python libraries such as [python-ecdsa], [fast-ecdsa] and other less famous ones, but we didn't find anything that suited our needs. The first one was pure Python, but it was too slow. The second one mixed Python and C and it was really fast, but we were unable to use it in our current infrastructure, which required pure Python code.For this reason, we decided to create something simple, compatible with OpenSSL and fast using elegant math such as Jacobian Coordinates to speed up the ECDSA. Starkbank-ECDSA is fully compatible with Python2 and Python3.### InstallationTo install StarkBank`s ECDSA-Python, run:```shpip install starkbank-ecdsa```### CurvesWe currently support `secp256k1`, but you can add more curves to the project. You just need to use the curve.add() function.### SpeedWe ran a test on a MAC Pro i7 2017. The libraries were run 100 times and the averages displayed bellow were obtained:| Library            | sign          | verify  || ------------------ |:-------------:| -------:|| [python-ecdsa]     |   121.3ms     | 65.1ms  || [fast-ecdsa]       |     0.1ms     |  0.2ms  || starkbank-ecdsa    |     4.1ms     |  7.8ms  |Our pure Python code cannot compete with C based libraries, but it's `6x faster` to verify and `23x faster` to sign than other pure Python libraries.### Sample CodeHow to sign a json message for [Stark Bank]:```pythonfrom json import dumpsfrom ellipticcurve.ecdsa import Ecdsafrom ellipticcurve.privateKey import PrivateKey# Generate privateKey from PEM stringprivateKey = PrivateKey.fromPem(&quot;&quot;&quot;    -----BEGIN EC PARAMETERS-----    BgUrgQQACg==    -----END EC PARAMETERS-----    -----BEGIN EC PRIVATE KEY-----    MHQCAQEEIODvZuS34wFbt0X53+P5EnSj6tMjfVK01dD1dgDH02RzoAcGBSuBBAAK    oUQDQgAE/nvHu/SQQaos9TUljQsUuKI15Zr5SabPrbwtbfT/408rkVVzq8vAisbB    RmpeRREXj5aog/Mq8RrdYy75W9q/Ig==    -----END EC PRIVATE KEY-----&quot;&quot;&quot;)# Create message from jsonmessage = dumps({    &quot;transfers&quot;: [        {            &quot;amount&quot;: 100000000,            &quot;taxId&quot;: &quot;594.739.480-42&quot;,            &quot;name&quot;: &quot;Daenerys Targaryen Stormborn&quot;,            &quot;bankCode&quot;: &quot;341&quot;,            &quot;branchCode&quot;: &quot;2201&quot;,            &quot;accountNumber&quot;: &quot;76543-8&quot;,            &quot;tags&quot;: [&quot;daenerys&quot;, &quot;targaryen&quot;, &quot;transfer-1-external-id&quot;]        }    ]})signature = Ecdsa.sign(message, privateKey)# Generate Signature in base64. This result can be sent to Stark Bank in the request header as the Digital-Signature parameter.print(signature.toBase64())# To double check if the message matches the signature, do this:publicKey = privateKey.publicKey()print(Ecdsa.verify(message, signature, publicKey))```Simple use:```pythonfrom ellipticcurve.ecdsa import Ecdsafrom ellipticcurve.privateKey import PrivateKey# Generate new KeysprivateKey = PrivateKey()publicKey = privateKey.publicKey()message = &quot;My test message&quot;# Generate Signaturesignature = Ecdsa.sign(message, privateKey)# To verify if the signature is validprint(Ecdsa.verify(message, signature, publicKey))```How to add more curves:```pythonfrom ellipticcurve import curve, PrivateKey, PublicKeynewCurve = curve.CurveFp(    name=&quot;frp256v1&quot;,    A=0xf1fd178c0b3ad58f10126de8ce42435b3961adbcabc8ca6de8fcf353d86e9c00,    B=0xee353fca5428a9300d4aba754a44c00fdfec0c9ae4b1a1803075ed967b7bb73f,    P=0xf1fd178c0b3ad58f10126de8ce42435b3961adbcabc8ca6de8fcf353d86e9c03,    N=0xf1fd178c0b3ad58f10126de8ce42435b53dc67e140d2bf941ffdd459c6d655e1,    Gx=0xb6b3d4c356c139eb31183d4749d423958c27d2dcaf98b70164c97a2dd98f5cff,    Gy=0x6142e0f7c8b204911f9271f0f3ecef8c2701c307e8e4c9e183115a1554062cfb,    oid=[1, 2, 250, 1, 223, 101, 256, 1])curve.add(newCurve)publicKeyPem = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----MFswFQYHKoZIzj0CAQYKKoF6AYFfZYIAAQNCAATeEFFYiQL+HmDYTf+QDmvQmWGDdRJPqLj11do8okvkSxq2lwB6Ct4aITMlCyg3f1msafc/ROSN/Vgj69bDhZK6-----END PUBLIC KEY-----&quot;&quot;&quot;publicKey = PublicKey.fromPem(publicKeyPem)print(publicKey.toPem())```How to generate compressed public key:```pythonfrom ellipticcurve import PrivateKey, PublicKeyprivateKey = PrivateKey()publicKey = privateKey.publicKey()compressedPublicKey = publicKey.toCompressed()print(compressedPublicKey)```How to recover a compressed public key:```pythonfrom ellipticcurve import PrivateKey, PublicKeycompressedPublicKey = &quot;0252972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2&quot;publicKey = PublicKey.fromCompressed(compressedPublicKey)print(publicKey.toPem())```### OpenSSLThis library is compatible with OpenSSL, so you can use it to generate keys:```openssl ecparam -name secp256k1 -genkey -out privateKey.pemopenssl ec -in privateKey.pem -pubout -out publicKey.pem```Create a message.txt file and sign it:```openssl dgst -sha256 -sign privateKey.pem -out signatureDer.txt message.txt```To verify, do this:```pythonfrom ellipticcurve.ecdsa import Ecdsafrom ellipticcurve.signature import Signaturefrom ellipticcurve.publicKey import PublicKeyfrom ellipticcurve.utils.file import FilepublicKeyPem = File.read(&quot;publicKey.pem&quot;)signatureDer = File.read(&quot;signatureDer.txt&quot;, &quot;rb&quot;)message = File.read(&quot;message.txt&quot;)publicKey = PublicKey.fromPem(publicKeyPem)signature = Signature.fromDer(signatureDer)print(Ecdsa.verify(message, signature, publicKey))```You can also verify it on terminal:```openssl dgst -sha256 -verify publicKey.pem -signature signatureDer.txt message.txt```NOTE: If you want to create a Digital Signature to use with [Stark Bank], you need to convert the binary signature to base64.```openssl base64 -in signatureDer.txt -out signatureBase64.txt```You can do the same with this library: ```pythonfrom ellipticcurve.signature import Signaturefrom ellipticcurve.utils.file import FilesignatureDer = File.read(&quot;signatureDer.txt&quot;, &quot;rb&quot;)signature = Signature.fromDer(signatureDer)print(signature.toBase64())```### Run unit tests```python3 -m unittest discoverpython2 -m unittest discover```[python-ecdsa]: https://github.com/warner/python-ecdsa[fast-ecdsa]: https://github.com/AntonKueltz/fastecdsa[Stark Bank]: https://starkbank.com</longdescription>
</pkgmetadata>