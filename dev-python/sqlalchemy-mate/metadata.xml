<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://readthedocs.org/projects/sqlalchemy_mate/badge/?version=latest    :target: https://sqlalchemy_mate.readthedocs.io/index.html    :alt: Documentation Status.. image:: https://github.com/MacHu-GWU/sqlalchemy_mate-project/workflows/CI/badge.svg    :target: https://github.com/MacHu-GWU/sqlalchemy_mate-project/actions?query=workflow:CI.. image:: https://codecov.io/gh/MacHu-GWU/sqlalchemy_mate-project/branch/master/graph/badge.svg  :target: https://codecov.io/gh/MacHu-GWU/sqlalchemy_mate-project.. image:: https://img.shields.io/pypi/v/sqlalchemy_mate.svg    :target: https://pypi.python.org/pypi/sqlalchemy_mate.. image:: https://img.shields.io/pypi/l/sqlalchemy_mate.svg    :target: https://pypi.python.org/pypi/sqlalchemy_mate.. image:: https://img.shields.io/pypi/pyversions/sqlalchemy_mate.svg    :target: https://pypi.python.org/pypi/sqlalchemy_mate.. image:: https://img.shields.io/badge/STAR_Me_on_GitHub!--None.svg?style=social    :target: https://github.com/MacHu-GWU/sqlalchemy_mate-project------.. image:: https://img.shields.io/badge/Link-Document-blue.svg      :target: https://sqlalchemy_mate.readthedocs.io/index.html.. image:: https://img.shields.io/badge/Link-API-blue.svg      :target: https://sqlalchemy_mate.readthedocs.io/py-modindex.html.. image:: https://img.shields.io/badge/Link-Source_Code-blue.svg      :target: https://sqlalchemy_mate.readthedocs.io/py-modindex.html.. image:: https://img.shields.io/badge/Link-Install-blue.svg      :target: `install`_.. image:: https://img.shields.io/badge/Link-GitHub-blue.svg      :target: https://github.com/MacHu-GWU/sqlalchemy_mate-project.. image:: https://img.shields.io/badge/Link-Submit_Issue-blue.svg      :target: https://github.com/MacHu-GWU/sqlalchemy_mate-project/issues.. image:: https://img.shields.io/badge/Link-Request_Feature-blue.svg      :target: https://github.com/MacHu-GWU/sqlalchemy_mate-project/issues.. image:: https://img.shields.io/badge/Link-Download-blue.svg      :target: https://pypi.org/pypi/sqlalchemy_mate#filesWelcome to ``sqlalchemy_mate`` Documentation==============================================================================A sweet syntax sugar library simplify your in writing ``sqlalchemy`` code.Features------------------------------------------------------------------------------.. contents::    :class: this-will-duplicate-information-and-it-is-still-useful-here    :depth: 1    :local:Read Database Credential Safely~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. contents::    :class: this-will-duplicate-information-and-it-is-still-useful-here    :depth: 1    :local:Put your database connection credential in your source code is always a **BAD IDEA**.``sqlalchemy_mate`` provides several options to allow loading credential easily.If you want to read db secret from other source, such as Bash Scripts that having lots of ``export DB_PASSWORD=&quot;xxx&quot;``, AWS Secret Manager, AWS Key Management System (KMS), please take a look at my another project `pysecret &lt;https://pypi.org/project/pysecret/&gt;`_.From json file++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++You can put your credential in a json file somewhere in your $HOME directory, and let sqlalchemy_mate smartly load from it.You need to specify two things:1. path to json file.2. field path to the data. If your connect info is nested deeply in the json, you can use the dot notation json path to point to it.content of json:.. code-block:: python    {        &quot;credentials&quot;: {            &quot;db1&quot;: {                &quot;host&quot;: &quot;example.com&quot;,                &quot;port&quot;: 1234,                &quot;database&quot;: &quot;test&quot;,                &quot;username&quot;: &quot;admin&quot;,                &quot;password&quot;: &quot;admin&quot;,            },            &quot;db2&quot;: {                ...            }        }    }code:.. code-block:: python    from sqlalchemy_mate import EngineCreator    ec = EngineCreator.from_json(        json_file=&quot;path-to-json-file&quot;,        json_path=&quot;credentials.db1&quot;, # dot notation json path    )    engine = ec.create_postgresql_pg8000()**Default data fields** are ``host``, ``port``, ``database``, ``username``, ``password``.If your json schema is different, you need to add the ``key_mapping`` to **specify the field name mapping**:.. code-block:: python    ec = EngineCreator.from_json(        json_file=&quot;...&quot;,        json_path=&quot;...&quot;,        key_mapping={            &quot;host&quot;: &quot;your-host-field&quot;,            &quot;port&quot;: &quot;your-port-field&quot;,            &quot;database&quot;: &quot;your-database-field&quot;,            &quot;username&quot;: &quot;your-username-field&quot;,            &quot;password&quot;: &quot;your-password-field&quot;,        }    )From ``$HOME/.db.json``++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++You can put lots of database connection info in a ``.db.json`` file in your ``$HOME`` directory... code-block:: python    from sqlalchemy_mate import EngineCreator    ec = EngineCreator.from_home_db_json(identifier=&quot;db1&quot;)    engine = ec.create_postgresql_psycopg2()``$HOME/.db.json`` **assumes flat json schema**, but you can use dot notation json path for ``identifier`` to adapt any json schema:.. code-block:: python    {        &quot;identifier1&quot;: {            &quot;host&quot;: &quot;example.com&quot;,            &quot;port&quot;: 1234,            &quot;database&quot;: &quot;test&quot;,            &quot;username&quot;: &quot;admin&quot;,            &quot;password&quot;: &quot;admin&quot;,        },        &quot;identifier2&quot;: {            ...        }    }From json file on AWS S3++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++This is similar to ``from_json``, but the json file is stored on AWS S3... code-block:: python    from sqlalchemy_mate import EngineCreator    ec = EngineCreator.from_s3_json(        bucket_name=&quot;my-bucket&quot;, key=&quot;db.json&quot;,        json_path=&quot;identifier1&quot;,        aws_profile=&quot;my-profile&quot;,    )    engine = ec.create_redshift()From Environment Variable++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++You can put your credentials in Environment Variable. For example:.. code-block:: bash    export DB_DEV_HOST=&quot;...&quot;    export DB_DEV_PORT=&quot;...&quot;    export DB_DEV_DATABASE=&quot;...&quot;    export DB_DEV_USERNAME=&quot;...&quot;    export DB_DEV_PASSWORD=&quot;...&quot;.. code-block:: python    from sqlalchemy_mate import EngineCreator    # read from DB_DEV_USERNAME, DB_DEV_PASSWORD, ...    ec = EngineCreator.from_env(prefix=&quot;DB_DEV&quot;)    engine = ec.create_redshift()If you want to read database credential safely from cloud, for example, AWS EC2, AWS Lambda, you can use AWS KMS to decrypt your credentials.. code-block:: python    # leave aws_profile=None if you are on cloud    ec = EngineCreator.from_env(prefix=&quot;DB_DEV&quot;, kms_decrypt=True, aws_profile=&quot;xxx&quot;)    engine = ec.create_redshift()Smart Insert~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~In bulk insert, if there are some rows having primary_key conflict, the classic solution is:.. code-block:: python    for row in data:        try:            engine.execute(table.insert(), row)        except sqlalchemy.sql.IntegrityError:            passIt is like one-by-one insert, which is super slow.``sqlalchemy_mate`` uses ``smart_insert`` strategy to try with smaller bulk insert, which has higher probabily to work. As a result, total number of commits are greatly reduced.With sql expression:.. code-block:: python    from sqlalchemy_mate import inserting    engine = create_engine(...)    t_users = Table(        &quot;users&quot;, metadata,        Column(&quot;id&quot;, Integer),        ...    )    # lots of data    data = [{&quot;id&quot;: 1, &quot;name&quot;: &quot;Alice}, {&quot;id&quot;: 2, &quot;name&quot;: &quot;Bob&quot;}, ...]    # the magic function    inserting.smart_insert(engine, t_users, data)With ORM:.. code-block:: python    from sqlalchemy_mate import ExtendedBase    Base = declarative_base()    class User(Base, ExtendedBase): # inherit from ExtendedBase        ...    # lots of users    data = [User(id=1, name=&quot;Alice&quot;), User(id=2, name=&quot;Bob&quot;), ...]    # the magic method    User.smart_insert(engine_or_session, data) # That's itSmart Update / Upsert~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Automatically update value by primary key... code-block:: python    # in SQL expression    from sqlalchemy_mate import updating    data = [{&quot;id&quot;: 1, &quot;name&quot;: &quot;Alice}, {&quot;id&quot;: 2, &quot;name&quot;: &quot;Bob&quot;}, ...]    updating.update_all(engine, table, data)    updating.upsert_all(engine, table, data)    # in ORM    data = [User(id=1, name=&quot;Alice&quot;), User(id=2, name=&quot;Bob&quot;), ...]    User.update_all(engine_or_session, user_list)    User.upsert_all(engine_or_session, user_list).. _install:Install------------------------------------------------------------------------------``sqlalchemy_mate`` is released on PyPI, so all you need is:.. code-block:: console    $ pip install sqlalchemy_mateTo upgrade to latest version:.. code-block:: console    $ pip install --upgrade sqlalchemy_mate</longdescription>
</pkgmetadata>