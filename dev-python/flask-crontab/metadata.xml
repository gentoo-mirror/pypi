<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flask-crontab&gt; Simple Flask scheduled tasks without extra daemons[![PyPI](https://img.shields.io/pypi/v/flask-crontab)](https://pypi.org/project/flask-crontab) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flask-crontab)](https://pypi.org/project/flask-crontab) [![Github Action](https://github.com/frostming/flask-crontab/workflows/Continuous%20Integration/badge.svg)](https://github.com/frostming/flask-crontab/actions?query=workflow%3A%22Continuous+Integration%22) ![Supported Platforms](https://img.shields.io/badge/platform-Linux%20%7C%20macOS-lightgrey)This project is strongly inspired by [django-crontab](https://github.com/kraiz/django-crontab), and only works on Python 3.5+.Due to the coming EOL of Python 2 on 2020/01/01, there is no plan for Python 2 support.## Quick StartInstall via `pip`:```bash$ pip install flask-crontab```Instantiate the extension in your `app.py` after the creation of Flask app:```pythonfrom flask import Flaskfrom flask_crontab import Crontabapp = Flask(__name__)crontab = Crontab(app)```If you are using App Factory pattern, you can also register the extension later:```pythoncrontab = Crontab()def create_app():    ...    crontab.init_app(app)```Now create a scheduled job:```python@crontab.job(minute=&quot;0&quot;, hour=&quot;6&quot;)def my_scheduled_job():    do_something()```An app context is automatically activated for every job run, so that you can access objects that are attached to app context.Then add the job to crontab:```bash$ flask crontab add```That's it! If you type in `crontab -l` in your shell, you can see some new lines created by `flask-crontab`.Show jobs managed by current app:```bash$ flask crontab show```Purge all jobs managed by current app:```bash$ flask crontab remove```Run a specific job given by hash:```bash$ flask crontab run &lt;job_hash&gt;```See supported options via `--help` for every commands.## Decorator API```pythondef job(    minute: str = &quot;*&quot;,    hour: str = &quot;*&quot;,    day: str = &quot;*&quot;,    month: str = &quot;*&quot;,    day_of_week: str = &quot;*&quot;,    args: Tuple[Any, ...] = (),    kwargs: Optional[Dict[str, Any]] = None,) -&gt; Callable:```The decorator accepts five arguments `minute`, `hour`, `day`, `month`, `day_of_month`, which are the same as crontab 5-parts time format. Any part that is not given defaults to `*`.Besides, `job` decorator accepts `args` and `kwargs` which will be passed to the decorated function as positional arguments and keywords arguments, respectively.## Configuration| Config item        | Description                    | Default value      || ------------------ | ------------------------------ | ------------------ || CRONTAB_EXECUTABLE | The absolute path of `crontab` | `/usr/bin/crontab` || CRONTAB_LOCK_JOBS  | Whether lock jobs when running | `False`            |## LicenseThis project is publised under [MIT](LICENSE) license.</longdescription>
</pkgmetadata>