<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build][build-image]]()[![Status][status-image]][pypi-project-url][![Stable Version][stable-ver-image]][pypi-project-url][![Coverage][coverage-image]]()[![Python][python-ver-image]][pypi-project-url][![License][bsd3-image]][bsd3-url]# thresult*Python* `Result` library for handling returned values (`Result`, `Ok`, `Err`) from functions/methods and handling errors. It is *error handling* library which is alternative to `try/except` style of programming.It is inspired by great *Rust* `Result`, `Ok`, `Err` types.## Installation```bashpip install thresult```## Simple Usage### Traditional `try-except` example```pythondef div(x: float, y: float) -&gt; float:    z: float = x / y    return zz0: float = div(1.0, 2.0) # 0.5z1: float = div(1.0, 0.0) # raises &quot;ZeroDivisionError: division by zero&quot; exception```### Unwrapping `Result` as Context Manager```pythonfrom thresult import Result@Resultdef div(x: float, y: float) -&gt; float:    z: float = x / y    return ztry:    with div(1.0, 0.0) as z:        # unreachable        r: float = zexcept ZeroDivisionError as e:    # exception happened    pass```### Unwrapping `Result` in `unwrap` Context Manager```pythonfrom thresult import Result, unwrap@Resultdef f(x: float, y: float) -&gt; float:    z: float = x / y    return ztry:    with unwrap():        # unreachable        r: float = f(1, 0)except ZeroDivisionError as e:    # exception happened    raise e```### Pattern-matching `Result` using `match-case````pythonfrom thresult import Result, Ok, Err@Resultdef div(x: float, y: float) -&gt; float:    # can raise &quot;ZeroDivisionError: division by zero&quot; exception    z: float = x / y    return zr: Result = div(1.0, 2.0) # Ok[float](0.5)match r:    case Ok(v):        assert v == 0.5    case Err(e):        # unreachable        # &quot;ZeroDivisionError: division by zero&quot;        assert isinstance(e, ZeroDivisionError)```### In-place pattern-matching `Result` using `walrus operator` and `match-case````python@Resultdef div(x: float, y: float) -&gt; float:    # can raise &quot;ZeroDivisionError: division by zero&quot; exception    z: float = x / y    return zmatch r := div(1.0, 2.0): # Ok[float](0.5)    case Ok(v):        assert v == 0.5    case Err(e):        # unreachable        # &quot;ZeroDivisionError: division by zero&quot;        assert isinstance(e, ZeroDivisionError)```## Advanced Usage### Unwrapping `Result[float, ZeroDivisionError]` as Context Manager```pythonfrom thresult import Result, Ok, Err@Result[float, ZeroDivisionError]def div(x: float, y: float) -&gt; float:    z: float = x / y    return ztry:    with div(1.0, 0.0) as z:        # unreachable         passexcept ZeroDivisionError as e:    # exception happened    pass```### Manually create Result value, and Structural Pattern Matching```pythonfrom thresult import Result, Ok, Errdef div(x: float, y: float) -&gt; Result[float, ZeroDivisionError]:    res: Result[float, ZeroDivisionError]    try:        # can raise &quot;ZeroDivisionError: division by zero&quot; exception        z: float = x / y        res = Ok[float](z)    except ZeroDivisionError as e:        res = Err[ZeroDivisionError](e)    return resr0: Result = div(1.0, 2.0) # Okr1: Result = div(1.0, 0.0) # Errmatch r0:    case Ok(v):        print('Ok, value:', v)    case Err(e):        print('Err, error:', e) # &quot;ZeroDivisionError: division by zero&quot;match r1:    case Ok(v):        print('Ok, value:', v)    case Err(e):        print('Err, error:', e) # &quot;ZeroDivisionError: division by zero&quot;z0: float = r0.unwrap() # 0.5z1: float = r1.unwrap_or(float('inf')) # infz1: float = r1.unwrap() # raises &quot;ZeroDivisionError: division by zero&quot; exception```### Decorate function with Result, and Structural Pattern Matching```pythonfrom thresult import Result, Ok, Err@Result[float, ZeroDivisionError]def div(x: float, y: float) -&gt; float:    # can raise &quot;ZeroDivisionError: division by zero&quot; exception    z: float = x / y    return zr0: Result = div(1.0, 2.0) # Okr1: Result = div(1.0, 0.0) # Errmatch r0:    case Ok(v):        print('Ok, value:', v)    case Err(e):        print('Err, error:', e) # &quot;ZeroDivisionError: division by zero&quot;match r1:    case Ok(v):        print('Ok, value:', v)    case Err(e):        print('Err, error:', e) # &quot;ZeroDivisionError: division by zero&quot;z0: float = r0.unwrap() # 0.5z1: float = r1.unwrap_or(float('inf')) # infz1: float = r1.unwrap() # raises &quot;ZeroDivisionError: division by zero&quot; exception```## Run / Develop Cycle```bashdocker run --rm -it -v $PWD/thresult:/code -w /code python:3.11-alpine python -B result.py```## Testing```bashdocker-compose build thresult-test ; docker-compose run --rm -v $PWD:/test thresult-test```## Coverage```bashdocker-compose build thresult-coverage ; docker-compose run --rm -v $PWD:/test thresult-coverage```## Building```bashdocker-compose build thresult-build ; docker-compose run --rm thresult-build```## Licensing`thresult` is licensed under the BSD 3 license.Check the [LICENSE](https://opensource.org/licenses/BSD-3-Clause) for details.&lt;!-- Badges --&gt;[bsd3-image]: https://img.shields.io/badge/License-BSD_3--Clause-blue.svg[bsd3-url]: https://opensource.org/licenses/BSD-3-Clause[build-image]: https://img.shields.io/gitlab/pipeline-status/tangledlabs/thresult?branch=main[coverage-image]: https://img.shields.io/gitlab/pipeline-coverage/tangledlabs/thresult?branch=main[pypi-project-url]: https://pypi.org/project/thresult/[stable-ver-image]: https://img.shields.io/pypi/v/thresult?label=stable[python-ver-image]: https://img.shields.io/pypi/pyversions/thresult.svg?logo=python&amp;logoColor=FBE072[status-image]: https://img.shields.io/pypi/status/thresult.svg</longdescription>
</pkgmetadata>