<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![pymacaron logo](https://github.com/pymacaron/pymacaron/blob/master/logo/pymacaron-logo-small.png)# PymacaronPython microservice framework based on Flask, OpenAPI and Celery, deployableon GKE and BeanstalkPyMacaron's documentation is available at[http://pymacaron.com/](http://pymacaron.com/).This page dives deeper into internal implementation details.## Deep dive### Built-in endpointsThe following endpoints are built-in into every pymacaron instance, basedon [this swagger specification](https://github.com/pymacaron/pymacaron/blob/master/pymacaron/ping.yaml):```# Assuming you did in a separate terminal:# $ python server.py --port 8080$ curl http://127.0.0.1:8080/ping{}$ curl http://127.0.0.1:8080/version{  &quot;apis&quot;:[&quot;ping&quot;],  &quot;name&quot;: &quot;helloworld&quot;,  &quot;pym_env&quot;:&quot;staging&quot;,  &quot;version&quot;: &quot;220120-2219-3820-a6f45b&quot;,}$ curl http://127.0.0.1:8080/auth/version{  &quot;error_description&quot;: &quot;There is no Authorization header in the HTTP request&quot;,  &quot;error_id&quot;: &quot;17f900c8-b456-4a64-8b2b-83c7d36353f6&quot;,  &quot;status&quot;: 401,  &quot;error&quot;: &quot;AUTHORIZATION_HEADER_MISSING&quot;}$ curl -H &quot;Authorization: Bearer eyJpc3M[...]y8kNg&quot; http://127.0.0.1:8080/auth/version{  &quot;apis&quot;:[&quot;ping&quot;],  &quot;name&quot;: &quot;helloworld&quot;,  &quot;pym_env&quot;:&quot;staging&quot;,  &quot;version&quot;: &quot;220120-2219-3820-a6f45b&quot;,}```### Loading api clients from a standalone scriptIt may come very handy within a standalone script to be able to call REST apisthrough the pymacaron framework, to get object marshalling and errorhandling out of the box. It is done as follows:```pythonimport flaskfrom pymacaron import apipoolfrom pymacaron.exceptions import is_error# Declare a Flask app and mock its contextapp = flask.Flask(__name__)with app.test_request_context(''):    # Then load client libraries against a given set of libraries    api = API(app)    api.load_clients(apis=['login', 'search'])    # And you can now call those apis seamlessly!    result = ApiPool.login.client.do_login(        ApiPool.login.model.LoginData(            name='foobar',            password='youdontwanttoknow'        )    )    if is_error(result):        log.error(&quot;Oops. Failed to login user&quot;)```## AuthorErwan Lemonnier&lt;br/&gt;[github.com/pymacaron](https://github.com/pymacaron)&lt;/br&gt;[github.com/erwan-lemonnier](https://github.com/erwan-lemonnier)&lt;br/&gt;[www.linkedin.com/in/erwan-lemonnier/](https://www.linkedin.com/in/erwan-lemonnier/)</longdescription>
</pkgmetadata>