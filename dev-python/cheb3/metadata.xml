<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;img width=&quot;300&quot; src=&quot;https://raw.githubusercontent.com/YanhuiJessica/cheb3/main/docs/_static/img/cheb3.png&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;üê£ web3 CTF tool based on web3.py&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://cheb3.readthedocs.io/en/latest/index.html&quot;&gt;        &lt;a href=&quot;https://pypi.python.org/pypi/cheb3&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/cheb3.svg&quot;&gt;&lt;/a&gt;        &lt;img alt=&quot;Documentation&quot; src=&quot;https://img.shields.io/readthedocs/cheb3.svg&quot;&gt;    &lt;/a&gt;&lt;/p&gt;## Install```bashpip3 install -U cheb3```## Quick Start```py&gt;&gt;&gt; from cheb3 import Connection&gt;&gt;&gt; from cheb3.utils import compile_sol&gt;&gt;&gt; &gt;&gt;&gt; conn = Connection(&quot;http://localhost:8545&quot;)&gt;&gt;&gt; account = conn.account(&quot;&lt;private-key&gt;&quot;)&gt;&gt;&gt; abi, bytecode = compile_sol('''// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;contract Cheb3Token is ERC20 {    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {        _mint(msg.sender, 100);    }}''',solc_version=&quot;0.8.17&quot;,  # choose the version of the compilerbase_path=&quot;node_modules/&quot; # to include @openzeppelin contracts)['Cheb3Token']```### Interacting with existing contracts#### Using ABI```py&gt;&gt;&gt; to_addr = &quot;0xAcF2f2575dFe641B350fE671f2Eb7E796A4ba402&quot;&gt;&gt;&gt; contract = conn.contract(    account,    # specified the signer    address=&quot;&lt;contract-address&gt;&quot;,    abi=abi)&gt;&gt;&gt; print(contract.functions.balanceOf(account.address).call())&gt;&gt;&gt; contract.functions.transfer(to_addr, 10).send_transaction()&gt;&gt;&gt; print(contract.caller.balanceOf(to_addr)) # is equivalent to `contract.functions.balanceOf(to_addr).call()````#### Using function signatures```py&gt;&gt;&gt; from cheb3.utils import encode_with_signature&gt;&gt;&gt; &gt;&gt;&gt; contract_addr = contract.address&gt;&gt;&gt; account.send_transaction(contract_addr, data=encode_with_signature(&quot;transfer(address,uint256)&quot;, to_addr, 10))&gt;&gt;&gt; print(int.from_bytes(account.call(contract_addr, data=encode_with_signature(&quot;balanceOf(address)&quot;, to_addr)), 'big'))```### Deploying new contracts```py&gt;&gt;&gt; contract = conn.contract(account, abi=abi, bytecode=bytecode)&gt;&gt;&gt; contract.deploy(&quot;Cheb3Token&quot;, &quot;CT&quot;) # deploy the contract&gt;&gt;&gt; print(contract.functions.balanceOf(account.address).call())```## ExamplesExamples of using `cheb3` in CTF challenges can be found in [/examples](./examples).</longdescription>
</pkgmetadata>