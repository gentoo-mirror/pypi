<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-evnexPython client for the Evnex API.Author not affiliated with Evnex.## Features - Talks to your Evnex charger via Cloud API- Automatic retries with exponential backoff- Automatic re-authentication- Optionally pass in a `httpx` client- Optionally pass in tokens to resume existing session## Installation```pip install evnex```## Usage```pythonimport asynciofrom pydantic import BaseSettings, SecretStrfrom evnex.api import Evnexclass EvnexAuthDetails(BaseSettings):    EVNEX_CLIENT_USERNAME: str    EVNEX_CLIENT_PASSWORD: SecretStrasync def main():    creds = EvnexAuthDetails()    evnex = Evnex(username=creds.EVNEX_CLIENT_USERNAME,                  password=creds.EVNEX_CLIENT_PASSWORD.get_secret_value())    user_data = await evnex.get_user_detail()    for org in user_data.organisations:        print(&quot;Getting 7 day insight for&quot;, org.name, &quot;User:&quot;, user_data.name)        insights = await evnex.get_org_insight(days=7, org_id=org.id)        for segment in insights:            print(segment)if __name__ == '__main__':    asyncio.run(main())```## Examples`python-evnex` is intended as a library, but a few example scripts are provided in the `examples` folder.Providing authentication for the examples is via environment variables, e.g. on nix systems:```export EVNEX_CLIENT_USERNAME=you@example.comexport EVNEX_CLIENT_PASSWORD=&lt;your password&gt;python -m examples.get_charge_point_detail```## Developer Notes### Making a new releaseWhat ends up on PyPi is what really matters. Update the version in `pyproject.toml`, build and publish with poetry:```shellpoetry buildpoetry publish```</longdescription>
</pkgmetadata>