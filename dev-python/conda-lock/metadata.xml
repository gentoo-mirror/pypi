<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># conda-lock[![GitHub deployments](https://img.shields.io/github/deployments/conda/conda-lock/github-pages?label=docs&amp;style=for-the-badge)](https://conda.github.io/conda-lock/)[![PyPI](https://img.shields.io/pypi/v/conda-lock?style=for-the-badge)](https://pypi.org/project/conda-lock/)[![Conda](https://img.shields.io/conda/v/conda-forge/conda-lock?style=for-the-badge)](https://github.com/conda-forge/conda-lock-feedstock)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?style=for-the-badge)](https://results.pre-commit.ci/latest/github/conda/conda-lock/main)[![codecov](https://img.shields.io/codecov/c/github/conda/conda-lock/main?style=for-the-badge)](https://codecov.io/gh/conda/conda-lock)Conda lock is a lightweight library that can be used to generate fully reproducible lock files for [conda][conda]environments.It does this by performing a conda solve for each platform you desire a lockfile for.This also has the added benefit of acting as an external pre-solve for conda as the lockfiles it generatesresults in the conda solver *not* being invoked when installing the packages from the generated lockfile.## Why?Conda [`environment.yml`][envyaml] files are very useful for defining desired environments but there are times when we want tobe able to EXACTLY reproduce an environment by just installing and downloading the packages needed.This is particularly handy in the context of a gitops style setup where you use conda to provision environments invarious places.## InstallationUse *one* of the following commands:```bashpipx install conda-lockcondax install conda-lockpip install conda-lockconda install --channel=conda-forge --name=base conda-lockmamba install --channel=conda-forge --name=base conda-lock```The first two options are recommended since they install conda-lock into an isolated environment. (Otherwise there is a risk of dependency conflicts.)## Basic usage```bash# generate a multi-platform lockfileconda-lock -f environment.yml -p osx-64 -p linux-64# optionally, update the previous solution, using the latest version of# pydantic that is compatible with the source specificationconda-lock --update pydantic# create an environment from the lockfileconda-lock install [-p {prefix}|-n {name}]# alternatively, render a single-platform lockfile and use conda command directlyconda-lock render -p linux-64conda create -n my-locked-env --file conda-linux-64.lock```### Pre 1.0 compatible usage (explicit per platform locks)If you were making use of conda-lock before the 1.0 release that added unified lockfilesyou can still get that behaviour by making use of the `explicit` output kind.```bashconda-lock --kind explicit -f environment.yml```## Advanced usage### File namingBy default, `conda-lock` store its output in `conda-lock.yml` in the currentworking directory. This file will also be used by default for render, install,and update operations. You can supply a different filename with e.g.```bashconda-lock --lockfile superspecial.conda-lock.yml```The extension `.conda-lock.yml` will be added if not present. Renderedenvironment files (env or explicit) must end with `.lock` and will be named as`&quot;conda-{platform}.lock&quot;` by default.If you want to override that call conda-lock as follows.```bashconda-lock -k explicit --filename-template &quot;specific-{platform}.conda.lock&quot;```### Compound specificationConda-lock will build a spec list from several files if requested.```bashconda-lock -f base.yml -f specific.yml -p linux-64 --filename-template &quot;specific-{platform}.lock&quot;````In this case all dependencies are combined, and the ordered union of all `channels` is used as the finalspecification.This works for all supported file types.#### channel overridesYou can override the channels that are used by conda-lock in case you need to override the ones specified inan [environment.yml][envyaml]```bashconda-lock -c conda-forge -p linux-64```#### platform specificationYou may specify the platforms you wish to target by default directly in an [environment.yml][envyaml] using the (nonstandard) `platforms` key:```yaml# environment.ymlchannels:  - conda-forgedependencies:  - python=3.9  - pandasplatforms:  - linux-64  - osx-64  - win-64  - osx-arm64  # For Apple Silicon, e.g. M1/M2  - linux-aarch64  # aka arm64, use for Docker on Apple Silicon  - linux-ppc64le```If you specify target platforms on the command line with `-p`, these willoverride the values in the environment specification. If neither `platforms` nor`-p` are provided, `conda-lock` will fall back to a default set of platforms.#### default categoryYou can may wish to split your dependencies into separate files for betterorganization, e.g. a `environment.yml` for production dependencies and a`dev-environment.yml` for development dependencies. You can assign all thedependencies parsed from a single file to a category using the (nonstandard)`category` key.```yaml# dev-environment.ymlchannels:  - conda-forgedependencies:  - pytest  - mypy=0.910category: dev```The default category is `main`.### pip support`conda-lock` can also lock the `dependencies.pip` section of[environment.yml][envyaml], using a vendored copy of [Poetry's][poetry] dependency solver.### private pip repositoriesRight now `conda-lock` only supports [legacy](https://warehouse.pypa.io/api-reference/legacy.html) pypi repos with basic auth. Most self-hosted repositories like Nexus, Artifactory etc. use this. To use this feature, add your private repo into Poetry's config _including_ the basic auth in the url:```bashpoetry config repositories.foo https://username:password@foo.repo/simple/```The private repo will be used in addition to `pypi.org`. For projects using `pyproject.toml`, it is possible to [disable `pypi.org` entirely](#disabling-pypiorg).### --dev-dependencies/--no-dev-dependenciesBy default conda-lock will include dev dependencies in the specification of the lock (if the files that the lockis being built from support them).  This can be disabled easily```bashconda-lock --no-dev-dependencies -f ./recipe/meta.yaml```### --check-input-hashUnder some situation you may want to run conda lock in some kind of automated way (eg as a precommit) and want to notneed to regenerate the lockfiles if the underlying input specification for that particular lock as not changed.```bashconda-lock --check-input-hash -p linux-64```When the input_hash of the input files, channels match those present in a given lockfile, that lockfile will not be regenerated.### --strip-auth, --auth and --auth-fileBy default `conda-lock` will leave basic auth credentials for private conda channels in the lock file. If you wish to strip authentication from the file, provide the `--strip-auth` argument.```conda-lock --strip-auth -f environment.yml```In order to `conda-lock install` a lock file with its basic auth credentials stripped, you will need to create an authentication file in `.json` format like this:```json{  &quot;domain&quot;: &quot;username:password&quot;}```If you have multiple channels that require different authentication within the same domain, you can additionally specify the channel like this:```json{  &quot;domain.org/channel1&quot;: &quot;username1:password1&quot;,  &quot;domain.org/channel2&quot;: &quot;username2:password2&quot;}```You can provide the authentication either as string through `--auth` or as a filepath through `--auth-file`.```bashconda-lock install --auth-file auth.json conda-linux-64.lock```### --virtual-package-specConda makes use of [virtual packages](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-virtual.html) that are available atruntime to gate dependency on system features.  Due to these not generally existing on your local execution platform conda-lock will injectthem into the solution environment with a reasonable guess at what a default system configuration should be.If you want to override which virtual packages are injected you can create a file like```yaml# virtual-packages.ymlsubdirs:  linux-64:    packages:      __glibc: 2.17      __cuda: 11.4  win-64:    packages:      __cuda: 11.4```conda-lock will automatically use a `virtual-packages.yml` it finds in the the current working directory.  Alternatively one can be specifiedexplicitly via the flag.```bashconda lock --virtual-package-spec virtual-packages-cuda.yml -p linux-64```#### Input hash stabilityVirtual packages take part in the input hash so if you build an environment with a different set of virtual packages the input hash will change.Additionally the default set of virtual packages may be augmented in future versions of conda-lock.  If you desire very stable input hasheswe recommend creating a `virtual-packages.yml` file to lock down the virtual packages considered.#### ⚠️ in conjunction with micromambaMicromamba does not presently support some of the overrides to remove all discovered virtual packages, consequently the set of virtual packagesavailable at solve time may be larger than those specified in your specification.## Supported file sourcesConda lock supports more than just [environment.yml][envyaml] specifications!Additionally conda-lock supports [meta.yaml][metayaml] (conda-build)and `pyproject.toml` ([flit](https://flit.readthedocs.io/en/latest/), [pdm](https://pdm.fming.dev) and[poetry](https://python-poetry.org) based).  These do come with some gotchas butare generally good enough for the 90% use-case.### meta.yamlConda-lock will attempt to make an educated guess at the desired environment spec in a meta.yaml.  This isnot guaranteed to work for complex recipes with many selectors and outputs.  For multi-output recipes, conda-lockwill fuse all the dependencies together.  If that doesn't work for your case fall back to specifying the specificationas an [environment.yml][envyaml]Since a meta.yaml doesn't contain channel information we make use of the following extra key to specify channels```yaml# meta.yamlextra:  channels:    - conda-forge    - defaults```### pyproject.tomlSince `pyproject.toml` files are commonly used by python packages it can be desirable to create a lockfile directly from those dependencies to single-source a package's dependencies.  This makes use of someconda-forge infrastructure ([pypi-mapping][mapping]) to do a lookup of the PyPI package name to a correspondingconda package name (e.g. `docker` -&gt; `docker-py`).  In cases where there exists no lookup for the package it assumes thatthe PyPI name, and the conda name are the same.#### Channels```toml# pyproject.toml[tool.conda-lock]channels = [    'conda-forge', 'defaults']```#### PlatformsLike in [environment.yml][envyaml], you can specify default platforms to target:```toml# pyproject.toml[tool.conda-lock]platforms = [    'osx-arm64', 'linux-64']```#### ExtrasIf your pyproject.toml file contains optional dependencies/extras these can be referred to by using the `--extras` flag```toml# pyproject.toml[tool.poetry.dependencies]mandatory = &quot;^1.0&quot;psycopg2 = { version = &quot;^2.7&quot;, optional = true }mysqlclient = { version = &quot;^1.3&quot;, optional = true }[tool.poetry.extras]mysql = [&quot;mysqlclient&quot;]pgsql = [&quot;psycopg2&quot;]```These can be referened as follows```conda-lock --extra mysql --extra pgsql -f pyproject.toml```When generating lockfiles that make use of extras it is recommended to make use of `--filename-template` covered [here](#file-naming).##### Filtering extras By default conda-lock will attempt to solve for *ALL* extras/categories it discovers in sources.  This allows you to render explicit locks with subset of extras, without needing a new solve.However this does make the assumption that your extras can all be installed in conjunction with each other.  If you want extras filteringto happen at the solve stage use the flag `--filter-extras````shconda-lock --extra incompatiblea --filter-extras -f pyproject.toml```#### Extra conda dependenciesSince in a `pyproject.toml` all the definitions are python dependencies if you needto specify some non-python dependencies as well this can be accomplished by addingthe following sections to the `pyproject.toml````toml# pyproject.toml[tool.conda-lock.dependencies]sqlite = &quot;&gt;=3.34&quot;```#### pip dependenciesIf a dependency refers directly to a URL rather than a package name and version,`conda-lock` will assume it is pip-installable, e.g.:```toml# pyproject.toml[tool.poetry.dependencies]python = &quot;3.9&quot;pymage = {url = &quot;https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb&quot;}```Similarly, if a dependency is explicitly marked with `source = &quot;pypi&quot;`, it willbe treated as a `pip` dependency, e.g.:```toml[tool.poetry.dependencies]python = &quot;3.9&quot;ampel-ztf = {version = &quot;^0.8.0-alpha.2&quot;, source = &quot;pypi&quot;}```A dependency will also be treated as a `pip` dependency if explicitly marked with `source = &quot;pypi&quot;` in the `[tool.conda-lock.dependencies]` section, e.g.:```toml[tool.conda-lock.dependencies]ampel-ztf = {source = &quot;pypi&quot;}```##### Defaulting non-conda dependency sources to PyPIAlternatively, the above behavior is defaulted for all dependencies defined outside of `[tool.conda-lock.dependencies]`, i.e.:- Default to `pip` dependencies for `[tool.poetry.dependencies]`, `[project.dependencies]`, etc.- Default to `conda` dependencies for `[tool.conda-lock.dependencies]`by explicitly providing  `default-non-conda-source = &quot;pip&quot;` in `[tool.conda-lock]` section, e.g.:```toml[tool.conda-lock]default-non-conda-source = &quot;pip&quot;```In all cases, the dependencies of `pip`-installable packages will also beinstalled with `pip`, unless they were already requested by a `conda`dependency.#### Disabling pypi.orgWhen using private pip repos, it is possible to disable `pypi.org` entirely. This can be useful when using `conda-lock` behind a network proxy that does not allow access to `pypi.org`.```toml[tool.conda-lock]allow-pypi-requests = false```## Dockerfile exampleIn order to use conda-lock in a docker-style context you want to add the lockfile to thedocker container.  In order to refresh the lock file just run `conda-lock` again.Given a file tree like```  Dockerfile  environment.yaml* conda-linux-64.lock```You want a dockerfile that is structured something similar to this```Dockerfile# Dockerfile# Build containerFROM continuumio/miniconda:latest as condaADD conda-linux-64.lock /locks/conda-linux-64.lockRUN conda create -p /opt/env --copy --file /locks/conda-linux-64.lock# Primary containerFROM gcr.io/distroless/base-debian10COPY --from=conda /opt/env /opt/env```[conda]: https://docs.conda.io/projects/conda[metayaml]: https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html[mapping]: https://github.com/regro/cf-graph-countyfair/blob/master/mappings/pypi/grayskull_pypi_mapping.yaml[envyaml]: https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#create-env-file-manually[poetry]: https://python-poetry.org</longdescription>
</pkgmetadata>