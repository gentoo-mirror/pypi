<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gcloud-loggerPython log wrapper for gcloud logging format## How to use it?Create your filter classes as needed, extending BaseContextFilter i.e.````pythonfrom citibox.gcloudlogger import BaseContextFilterclass MyTestFilter(BaseContextFilter):    def __init__(self):        super().__init__()        self.some_attribute = &quot;Some Value&quot;    @staticmethod    def filter_name():        return &quot;my_test_filter&quot;    def to_dict(self) -&gt; dict:        return {            &quot;some_attribute&quot;: self.some_attribute        }````Get logger from generated dict:1. Import logging required    ```python    import logging    from logging.config import dictConfig    ```2. Import GCloudLogConfig:    ```python    from citibox.gcloudlogger import GCloudLogConfig    ```3. Instance the library with your custom filters and set the logger config:    ```python    my_log_config = GCloudLogConfig(MyTestFilter)    dictConfig(my_log_config.config)    ```4. Use the logger as normally:    ```python   logger = logging.getLogger()   logger.info(&quot;something good is happening&quot;)    ``` Also, you can add more loggers if needed: ```python    import logging    from logging.config import dictConfig    from citibox.gcloudlogger import GCloudLogConfig    my_log_config = GCloudLogConfig(AnyFilter)    my_log_config.add_logger(&quot;new_logger&quot;, level=logging.INFO)    dictConfig(my_log_config.config) ```And, add filters after the creation of the log config class:```python    import logging    from logging.config import dictConfig    from citibox.gcloudlogger import GCloudLogConfig    my_log_config = GCloudLogConfig(AnyFilter)    my_log_config.add_filter(AnotherFilterClass)```### Using Middlewares#### FalconThere is a Falcon middleware ready for logging Request and Response.Use [Falcon middlewares](https://falcon.readthedocs.io/en/stable/api/middleware.html) adding the included class:```pythonimport falconfrom citibox.gcloudlogger.contrib.falcon import FalconMiddlewareapp = falcon.API(middleware=[FalconMiddleware()])```#### Djangoin your config file add:```pythonMIDDLEWARE = [    'citibox.gcloudlogger.contrib.django.DjangoMiddleware',    ...]```</longdescription>
</pkgmetadata>