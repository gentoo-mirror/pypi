<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hamming-codecSimple encode/decode utilties for single-bit error correcting Hamming codes[![GitHub Actions Status Badge: CI/CD]][GitHub Actions Status: CI/CD][![GitHub Actions Status Badge: cpp_build]][GitHub Actions Status: cpp_build]![centos7_build](https://github.com/dantrim/hamming-codec/workflows/centos7_build/badge.svg)[![pre-commit.ci status][pre-commit.ci status badge]][pre-commit.ci status][![Code style: black][black badge]](https://github.com/psf/black)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)# Table of Contents 1. [Requirements](#requirements) 2. [Installation](#installation)     * [Python](#python-installation)     * [C++](#c-installation) 3. [Python Usage](#python-usage)     * [Command-line Usage](#from-the-command-line)     * [Importing the `hamming_codec` Python Module](#importing-as-a-module) 4. [C++ Usage](#c-usage)     * [Including in your Project](#including-in-your-project)     * [Examples](#c-examples) 5. [Error-correction](#single-bit-error-correction) 6. [References](#references)# RequirementsTested on Python `&gt;=3.6` and requires C++ compilers supporting C++17 features.# Installation## Python InstallationInstall using `pip` as follows:```bash$ python -m pip install hamming-codec```## C++ InstallationIf you wish to use the `hamming-codec` encoding/decoding from within C++,one needs to include the single header file[src/cpp/hamming_codec.h](src/cpp/hamming_codec.h) in their project.There are a few ways to do this:  1. Copy the file [hamming_codec.h](src/cpp/hamming_codec.h) into your project's include path.  2. Add `hamming-codec` as a sub-module (or equivalent) and use CMake to expose the `HAMMING_CODEC_INCLUDE_DIRS`        variable by calling `add_subdirectory(/path/to/hamming_codec)` to your project's CMakeLists.txt file.     See [src/cpp/examples/CMakeLists.txt](src/cpp/examples/CMakeLists.txt) for an example.Following either approach, you should be able to add `#include &quot;hamming_codec.h&quot;` to yoursource code.## Python Usage### From the Command-lineAfter [following the Python installation](#python-installation), a commandline utility`hamming` will be available to you, which can be used for simple encoding and decodingof data words. Use `hamming --help` to show the full set of options and commands.#### EncodingYou can use the `hamming` commandline utility to encode messages of specified length(in number of bits) as follows:```bash$ hamming encode 0x1234 160x2a3a1 21```Which shows that the 16-bit message `0x1234` is encoded as a 21-bit word `0x2a3a1`.#### DecodingYou can use the `hamming` commandline utility to decode messages of specified length (in number of bits) as follows:```bash$ hamming decode 0x2a3a1 210x1234 16```Which shows that the 21-bit encoded message `0x2a3a1` is decoded back into the 16-bit word `0x1234`.#### Importing as a ModuleOnce you have [installed hamming-codec](#python-installation), you can import the `hamming_codec`module and perform encoding/decoding like so:```python&gt;&gt;&gt; import hamming_codec&gt;&gt;&gt; encoded_message = hamming_codec.encode(0x4235, 16)&gt;&gt;&gt; print(encoded_message)010001010001110101100&gt;&gt;&gt; hex(int(encoded_message,2))'0x8a3ac'&gt;&gt;&gt; decoded_message = hamming_codec.decode(int(encoded_message,2), len(encoded_message))&gt;&gt;&gt; print(decoded_message)0100001000110101&gt;&gt;&gt; hex(int(decoded_message,2))'0x4235'```## C++ Usage### Including in your ProjectFollowing the [steps to add `hamming-codec` to your include path](#c-installation),you can encode/decode messages as follows:```c++#include &quot;hamming_codec.h&quot;...uint32_t n_bits = 16;uint32_t input_message = 0x4235;std::string encoded_message = hamming_codec::encode(input_message, n_bits);std::cout &lt;&lt; &quot;Encoded message: 0x&quot; &lt;&lt; std::hex &lt;&lt; std::stoul(encoded_message, 0, 2) &lt;&lt; std::endl; // prints &quot;Encoded message: 0x8a3ac&quot;std::string decoded_message = hamming_codec::decode(std::stoul(encoded_message, 0, 2), encoded_message.length());std::cout &lt;&lt; &quot;Decoded message: 0x&quot; &lt;&lt; std::hex &lt;&lt; std::stoul(decoded_message, 0, 2) &lt;&lt; std::endl; // prints &quot;Decoded message: 0x4235&quot;```### C++ ExamplesAfter following the [steps to build the C++ library](#c-installation), you can run the C++ examples. For example,```bash$ ./build/bin/example_encode 0x4235 160x8a3ac 21```## Single-bit Error CorrectionThe Hamming encoding algorithm used within `hamming-codec` allows for single-bit error corrections. Thatis, during the decoding process, errors in which a single bit has been flipped in the encoded messagecan both be detected **and corrected**.For example, if we flip a single bitin the encoded message [from a previous section](#encoding) such that the 21-bit word `0x2a3a1` becomes `0x2a1a1`,you will get the same decoded message as before:```bash$ hamming encode 0x1234 160x2a3a1 21$ hamming decode 0x2a3a1 210x1234 16$ hamming decode 0x2a1a1 21 # flipped a bit0x1234 16 # ...but decodes the same as before!```## ReferencesFurther information about the Hamming encoding algorithm employed within `hamming-codec` can be found in the following resources:  * [3Blue1Brown's &quot;Hamming codes and error correction&quot;](https://www.youtube.com/watch?v=X8jsijhllIA)  * [Ben Eater's &quot;What is error correction? Hamming codes in hardware&quot;](https://www.youtube.com/watch?v=h0jloehRKas)  * [tutorialspoint's &quot;Error Correcting Codes - Hamming codes&quot;](https://www.tutorialspoint.com/error-correcting-codes-hamming-codes)  * [Wikipedia entry for &quot;Hamming Code&quot;](https://en.wikipedia.org/wiki/Hamming_code)  * [Wikipedia entry for &quot;Linear error-correcting codes&quot;](https://en.wikipedia.org/wiki/Linear_code)&lt;!--- LINKS ---&gt;[pre-commit.ci status badge]:https://results.pre-commit.ci/badge/github/dantrim/hamming-codec/main.svg[pre-commit.ci status]:https://results.pre-commit.ci/latest/github/dantrim/hamming-codec/main[GitHub Actions Status Badge: CI/CD]:https://github.com/dantrim/hamming-codec/workflows/CI/CD/badge.svg?branch=main[GitHub Actions Status: CI/CD]:https://github.com/dantrim/hamming-codec/actions?query=workflow%3ACI%2FCD+branch%3Amain[GitHub Actions Status Badge: cpp_build]:https://github.com/dantrim/hamming-codec/workflows/cpp_build/badge.svg?branch=main[GitHub Actions Status: cpp_build]:https://github.com/dantrim/hamming-codec/actions?query=workflow%3Acpp_build+branch%3Amain[black badge]:https://img.shields.io/badge/code%20style-black-000000.svg</longdescription>
</pkgmetadata>