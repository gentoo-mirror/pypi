<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># garnett[![CircleCI](https://img.shields.io/circleci/project/github/glotzerlab/garnett/master.svg)](https://circleci.com/gh/glotzerlab/garnett)[![RTD](https://img.shields.io/readthedocs/garnett.svg?style=flat)](https://garnett.readthedocs.io/)[![Contributors](https://img.shields.io/github/contributors-anon/glotzerlab/garnett.svg?style=flat)](https://garnett.readthedocs.io/en/latest/credits.html)[![License](https://img.shields.io/github/license/glotzerlab/garnett.svg)](https://github.com/glotzerlab/garnett/blob/master/LICENSE.txt)## AboutThis is a collection of samples, parsers and writers for formats used in the Glotzer Group at the University of Michigan, Ann Arbor.## Maintainers* Luis Y. Rivera-Rivera, lyrivera@umich.edu* Kelly Wang, kelwang@umich.edu* Carl Simon Adorf, csadorf@umich.edu* Bradley Dice, bdice@umich.edu## SetupTo install this package with pip, execute:```bashpip install garnett --user```## Documentation**The package's documentation is available at:** [https://garnett.readthedocs.io/](https://garnett.readthedocs.io/)To build the documentation yourself using sphinx, execute within the repository:```bashcd docmake htmlopen _build/html/index.html```## Quickstart### Reading and writing```pythonimport garnett# Autodetects file format for a uniform trajectory APIwith garnett.read('gsdfile.gsd') as traj:    for frame in traj:        pos = frame.position# Simple conversion of trajectory formatswith garnett.read('posfile.pos') as traj:    garnett.write(traj, 'gsdfile.gsd')```### Data accessAccess individual frames by indexing or create subsets of trajectories with slicing:```pythonfirst_frame = traj[0]last_frame = traj[-1]nth_frame = traj[n]# and so onsub_trajectory = traj[i:j]```Access properties of trajectories:```pythontraj.load_arrays()traj.box             # Mtraj.N               # Mtraj.types           # MxTtraj.type_shapes     # MxTtraj.typeid          # MxNtraj.position        # MxNx3traj.orientation     # MxNx4traj.velocity        # MxNx3traj.mass            # MxNtraj.charge          # MxNtraj.diameter        # MxNtraj.moment_inertia  # MxNx3traj.angmom          # MxNx4traj.image           # MxNx3# M is the number of frames# T is the number of particle types in a frame# N is the number of particles in a frame```Access properties of individual frames:```pythonframe = traj[i]frame.box              # garnett.trajectory.Box objectframe.N                # scalar, number of particlesframe.types            # T, string names for each typeframe.type_shapes      # T, list of shapes for each typeframe.typeid           # N, type indices of each particleframe.position         # Nx3frame.orientation      # Nx4frame.velocity         # Nx3frame.mass             # Nframe.charge           # Nframe.diameter         # Nframe.moment_inertia   # Nx3frame.angmom           # Nx4frame.image            # Nx3frame.data             # Dictionary of lists for each attributeframe.data_key         # List of strings```All matrices are NumPy arrays.## Example use with HOOMD-blueSee the [examples directory](https://github.com/glotzerlab/garnett/tree/master/examples) for additional examples.```pythonpos_reader = PosFileReader()with open('cube.pos') as posfile:    traj = pos_reader.read(posfile)# Initialize from last framesnapshot = traj[-1].to_hoomd_snapshot()system = init.read_snapshot(snapshot)# Restore last framesnapshot = system.take_snapshot()traj[-1].to_hoomd_snapshot(snapshot)```## TestingTo run all garnett tests, `ddt`, HOOMD-blue (`hoomd`), and `pycifrw` must be installed in the testing environments.Execute the tests with:```bashpython -m unittest discover tests```</longdescription>
</pkgmetadata>