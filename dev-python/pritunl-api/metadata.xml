<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pritunl API Client for PythonThis is a simple [Pritunl](https://pritunl.com/) API Client written in Python.You need to refer to Pritunl [API Documentation](https://docs.pritunl.com/docs/api) to understand how to use this. This API client uses almost the same command as the [API Handlers](https://github.com/pritunl/pritunl-web/tree/master/handlers).## InstallationInstall the published package using `pip` from our [PyPI project repository](https://pypi.org/project/pritunl-api/).```bashpip install pritunl-api```Beyond the core API client library, we also added the executable distribution in this project. Add extra `cli` during the PIP installation to enable the CLI feature.```bashpip install pritunl-api[cli]```Proceed to the [CLI Usage](#cli-usage) for the complete command options and syntax.## API UsageBefore using the API library including the use of the CLI feature, we need to provide the Pritunl API URL and administrative credentials in our environment variables.```bashexport PRITUNL_BASE_URL=&quot;https://vpn.domain.tld/&quot;export PRITUNL_API_TOKEN=&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;export PRITUNL_API_SECRET=&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;```Initializing an API Instance.```python# Import the objectfrom pritunl_api import Pritunl# Create an instancepritunl = Pritunl()## You can also initialize an instance by manually providing the arguments.# pritunl = Pritunl(#   url=&quot;&lt;PRITUNL API URL&gt;&quot;,#   token=&quot;&lt;PRITUNL API TOKEN&gt;&quot;,#   secret=&quot;&lt;PRITUNL API SECRET&gt;&quot;# )# Your Pritunl API Client instance is now ready to use!pritunl.&lt;FEATURE&gt;.&lt;METHOD&gt;```## Example* __Example 1:__  [(in source)](https://github.com/pritunl/pritunl-web/blob/master/handlers/server.go#L9-L30) `GET /server`  ```python  pritunl.server.get()  ```* __Example 2:__  [(in source)](https://github.com/pritunl/pritunl-web/blob/master/handlers/server.go#L140-L150) `PUT /server/:server_id/organization/:organization_id`  ```python  pritunl.server.put(srv_id='', org_id='')  ```* __Example 3:__  [(in source)](https://github.com/pritunl/pritunl-web/blob/master/handlers/user.go#L142-L152) `DELETE /user/:organization_id/:user_id`  ```python  pritunl.user.delete(org_id='', usr_id='')  ```* __Example 4:__  [(in source)](https://github.com/pritunl/pritunl-web/blob/master/handlers/server.go#L81-L97) `POST /server**`  ```python  pritunl.server.post(    data={      'name': 'new server name'    }  )  ```   * _If there is data available, you must pass it through the data parameter._   * _The command above works well because there are templates available for creating a new server._* __Example 5:__  [(in source)](https://github.com/pritunl/pritunl-web/blob/master/handlers/user.go#L122-L140) `PUT /user/:organization_id/:user_id`  ```python  pritunl.user.put(org_id='', usr_id='',    data={      'name': 'modified org name',      'disabled': True    }  )  ```## CLI Usage### Available Commands&gt; As of this period of development, the feature is limited.To show the available commands, use the help option.```bashpritunl-api-cli --help``````txtUsage: pritunl-api-cli [OPTIONS] COMMAND [ARGS]...  Pritunl API CLIOptions:  --version  Show the version and exit.  --help     Show this message and exit.Commands:  api  user```To show the available commands for a feature```bashpritunl-api-cli user --help``````txtUsage: pritunl-api-cli user [OPTIONS] COMMAND [ARGS]...Options:  --help  Show this message and exit.Commands:  create  delete  get  update```For available command options and syntax, use the feature command argument help option.```bashpritunl-api-cli user create --help``````textUsage: pritunl-api-cli user create [OPTIONS]Options:  --org-name TEXT  --user-name TEXT  --user-email TEXT  --pin TEXT  --yubikey-id TEXT  --from-csv PATH  --help             Show this message and exit.```_Example 1: Create a Single User_```bashpritunl-api-cli user create \  --org-name pritunl-dev \  --user-name john.doe \  --user-email john.doe@domain.tld```_Example 2: Create Users from CSV_```bashpritunl-api-cli user create \  --from-csv ./users.csv```&gt; For more CLI examples checkout the blog post [Managing Enterprise VPN using Pritunl API CLI](https://nathanielvarona.github.io/posts/managing-enterprise-vpn-using-pritunl-api-cli/).## API Development### Using Virtual EnvironmentCreate a virtual environment and activate it.```bashpython -m venv ./venvsource ./venv/bin/activate```&gt; Or simple use other Python Version Manager like [pyenv](https://github.com/pyenv/pyenv).```bashpip install -e .```Include REPL Tools```bashpip install -e .[repl]ptipython```### Using Docker EnvironmentBuilding a Development Container```bashdocker buildx build . \  --progress plain \  --file dev.Dockerfile \  --tag pritunl-api:development```Running a Development Container```bashdocker run --rm -it \  --volume $(PWD):/pritunl-api \  --env-file .env \  pritunl-api:development```This API client is not fully complete. Some features are missing, feel free to fork and pull requests to add new features.Tested working on **`Pritunl v1.30.3354.99`**.</longdescription>
</pkgmetadata>