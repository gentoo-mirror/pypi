<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># annotated-types[![CI](https://github.com/annotated-types/annotated-types/workflows/CI/badge.svg?event=push)](https://github.com/annotated-types/annotated-types/actions?query=event%3Apush+branch%3Amain+workflow%3ACI)[![pypi](https://img.shields.io/pypi/v/annotated-types.svg)](https://pypi.python.org/pypi/annotated-types)[![versions](https://img.shields.io/pypi/pyversions/annotated-types.svg)](https://github.com/annotated-types/annotated-types)[![license](https://img.shields.io/github/license/annotated-types/annotated-types.svg)](https://github.com/annotated-types/annotated-types/blob/main/LICENSE)[PEP-593](https://peps.python.org/pep-0593/) added `typing.Annotated` as a way ofadding context-specific metadata to existing types, and specifies that`Annotated[T, x]` _should_ be treated as `T` by any tool or library without speciallogic for `x`.This package provides metadata objects which can be used to represent commonconstraints such as upper and lower bounds on scalar values and collection sizes,a `Predicate` marker for runtime checks, anddescriptions of how we intend these metadata to be interpreted. In some cases,we also note alternative representations which do not require this package.## Install```bashpip install annotated-types```## Examples```pythonfrom typing import Annotatedfrom annotated_types import Gt, Len, Predicateclass MyClass:    age: Annotated[int, Gt(18)]                         # Valid: 19, 20, ...                                                        # Invalid: 17, 18, &quot;19&quot;, 19.0, ...    factors: list[Annotated[int, Predicate(is_prime)]]  # Valid: 2, 3, 5, 7, 11, ...                                                        # Invalid: 4, 8, -2, 5.0, &quot;prime&quot;, ...    my_list: Annotated[list[int], Len(0, 10)]           # Valid: [], [10, 20, 30, 40, 50]                                                        # Invalid: (1, 2), [&quot;abc&quot;], [0] * 20```## Documentation_While `annotated-types` avoids runtime checks for performance, users should notconstruct invalid combinations such as `MultipleOf(&quot;non-numeric&quot;)` or `Annotated[int, Len(3)]`.Downstream implementors may choose to raise an error, emit a warning, silently ignorea metadata item, etc., if the metadata objects described below are used with anincompatible type - or for any other reason!_### Gt, Ge, Lt, LeExpress inclusive and/or exclusive bounds on orderable values - which may be numbers,dates, times, strings, sets, etc. Note that the boundary value need not be of thesame type that was annotated, so long as they can be compared: `Annotated[int, Gt(1.5)]`is fine, for example, and implies that the value is an integer x such that `x &gt; 1.5`.We suggest that implementors may also interpret `functools.partial(operator.le, 1.5)`as being equivalent to `Gt(1.5)`, for users who wish to avoid a runtime dependency onthe `annotated-types` package.To be explicit, these types have the following meanings:* `Gt(x)` - value must be &quot;Greater Than&quot; `x` - equivalent to exclusive minimum* `Ge(x)` - value must be &quot;Greater than or Equal&quot; to `x` - equivalent to inclusive minimum* `Lt(x)` - value must be &quot;Less Than&quot; `x` - equivalent to exclusive maximum* `Le(x)` - value must be &quot;Less than or Equal&quot; to `x` - equivalent to inclusive maximum### Interval`Interval(gt, ge, lt, le)` allows you to specify an upper and lower bound with a singlemetadata object. `None` attributes should be ignored, and non-`None` attributestreated as per the single bounds above.### MultipleOf`MultipleOf(multiple_of=x)` might be interpreted in two ways:1. Python semantics, implying `value % multiple_of == 0`, or2. [JSONschema semantics](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.2.1),   where `int(value / multiple_of) == value / multiple_of`.We encourage users to be aware of these two common interpretations and theirdistinct behaviours, especially since very large or non-integer numbers makeit easy to cause silent data corruption due to floating-point imprecision.We encourage libraries to carefully document which interpretation they implement.### MinLen, MaxLen, Len`Len()` implies that `min_length &lt;= len(value) &lt;= max_length` - lower and upper bounds are inclusive.As well as `Len()` which can optionally include upper and lower bounds, we alsoprovide `MinLen(x)` and `MaxLen(y)` which are equivalent to `Len(min_length=x)`and `Len(max_length=y)` respectively.`Len`, `MinLen`, and `MaxLen` may be used with any type which supports `len(value)`.Examples of usage:* `Annotated[list, MaxLen(10)]` (or `Annotated[list, Len(max_length=10))`) - list must have a length of 10 or less* `Annotated[str, MaxLen(10)]` - string must have a length of 10 or less* `Annotated[list, MinLen(3))` (or `Annotated[list, Len(min_length=3))`) - list must have a length of 3 or more* `Annotated[list, Len(4, 6)]` - list must have a length of 4, 5, or 6* `Annotated[list, Len(8, 8)]` - list must have a length of exactly 8#### Changed in v0.4.0* `min_inclusive` has been renamed to `min_length`, no change in meaning* `max_exclusive` has been renamed to `max_length`, upper bound is now **inclusive** instead of **exclusive*** The recommendation that slices are interpreted as `Len` has been removed due to ambiguity and different semantic  meaning of the upper bound in slices vs. `Len`See [issue #23](https://github.com/annotated-types/annotated-types/issues/23) for discussion.### Timezone`Timezone` can be used with a `datetime` or a `time` to express which timezonesare allowed. `Annotated[datetime, Timezone(None)]` must be a naive datetime.`Timezone[...]` ([literal ellipsis](https://docs.python.org/3/library/constants.html#Ellipsis))expresses that any timezone-aware datetime is allowed. You may also pass a specifictimezone string or `timezone` object such as `Timezone(timezone.utc)` or`Timezone(&quot;Africa/Abidjan&quot;)` to express that you only allow a specific timezone,though we note that this is often a symptom of fragile design.### Predicate`Predicate(func: Callable)` expresses that `func(value)` is truthy for valid values.Users should prefer the statically inspectable metadata above, but if you needthe full power and flexibility of arbitrary runtime predicates... here it is.We provide a few predefined predicates for common string constraints:* `IsLower = Predicate(str.islower)`* `IsUpper = Predicate(str.isupper)`* `IsDigit = Predicate(str.isdigit)`* `IsFinite = Predicate(math.isfinite)`* `IsNotFinite = Predicate(Not(math.isfinite))`* `IsNan = Predicate(math.isnan)`* `IsNotNan = Predicate(Not(math.isnan))`* `IsInfinite = Predicate(math.isinf)`* `IsNotInfinite = Predicate(Not(math.isinf))`Some libraries might have special logic to handle known or understandable predicates,for example by checking for `str.isdigit` and using its presence to both call customlogic to enforce digit-only strings, and customise some generated external schema.Users are therefore encouraged to avoid indirection like `lambda s: s.lower()`, infavor of introspectable methods such as `str.lower` or `re.compile(&quot;pattern&quot;).search`.To enable basic negation of commonly used predicates like `math.isnan` without introducing introspection that makes it impossible for implementers to introspect the predicate we provide a `Not` wrapper that simply negates the predicate in an introspectable manner. Several of the predicates listed above are created in this manner.We do not specify what behaviour should be expected for predicates that raisean exception.  For example `Annotated[int, Predicate(str.isdigit)]` might silentlyskip invalid constraints, or statically raise an error; or it might try calling itand then propogate or discard the resulting`TypeError: descriptor 'isdigit' for 'str' objects doesn't apply to a 'int' object`exception.  We encourage libraries to document the behaviour they choose.### Doc`doc()` can be used to add documentation information in `Annotated`, for function and method parameters, variables, class attributes, return types, and any place where `Annotated` can be used.It expects a value that can be statically analyzed, as the main use case is for static analysis, editors, documentation generators, and similar tools.It returns a `DocInfo` class with a single attribute `documentation` containing the value passed to `doc()`.This is the early adopter's alternative form of the [`typing-doc` proposal](https://github.com/tiangolo/fastapi/blob/typing-doc/typing_doc.md).### Integrating downstream types with `GroupedMetadata`Implementers may choose to provide a convenience wrapper that groups multiple pieces of metadata.This can help reduce verbosity and cognitive overhead for users.For example, an implementer like Pydantic might provide a `Field` or `Meta` type that accepts keyword arguments and transforms these into low-level metadata:```pythonfrom dataclasses import dataclassfrom typing import Iteratorfrom annotated_types import GroupedMetadata, Ge@dataclassclass Field(GroupedMetadata):    ge: int | None = None    description: str | None = None    def __iter__(self) -&gt; Iterator[object]:        # Iterating over a GroupedMetadata object should yield annotated-types        # constraint metadata objects which describe it as fully as possible,        # and may include other unknown objects too.        if self.ge is not None:            yield Ge(self.ge)        if self.description is not None:            yield Description(self.description)```Libraries consuming annotated-types constraints should check for `GroupedMetadata` and unpack it by iterating over the object and treating the results as if they had been &quot;unpacked&quot; in the `Annotated` type.  The same logic should be applied to the [PEP 646 `Unpack` type](https://peps.python.org/pep-0646/), so that `Annotated[T, Field(...)]`, `Annotated[T, Unpack[Field(...)]]` and `Annotated[T, *Field(...)]` are all treated consistently.Libraries consuming annotated-types should also ignore any metadata they do not recongize that came from unpacking a `GroupedMetadata`, just like they ignore unrecognized metadata in `Annotated` itself.Our own `annotated_types.Interval` class is a `GroupedMetadata` which unpacks itself into `Gt`, `Lt`, etc., so this is not an abstract concern.  Similarly, `annotated_types.Len` is a `GroupedMetadata` which unpacks itself into `MinLen` (optionally) and `MaxLen`.### Consuming metadataWe intend to not be prescriptive as to _how_ the metadata and constraints are used, but as an example of how one might parse constraints from types annotations see our [implementation in `test_main.py`](https://github.com/annotated-types/annotated-types/blob/f59cf6d1b5255a0fe359b93896759a180bec30ae/tests/test_main.py#L94-L103).It is up to the implementer to determine how this metadata is used.You could use the metadata for runtime type checking, for generating schemas or to generate example data, amongst other use cases.## Design &amp; HistoryThis package was designed at the PyCon 2022 sprints by the maintainers of Pydanticand Hypothesis, with the goal of making it as easy as possible for end-users toprovide more informative annotations for use by runtime libraries.It is deliberately minimal, and following PEP-593 allows considerable downstreamdiscretion in what (if anything!) they choose to support. Nonetheless, we expectthat staying simple and covering _only_ the most common use-cases will give usersand maintainers the best experience we can. If you'd like more constraints for yourtypes - follow our lead, by defining them and documenting them downstream!</longdescription>
</pkgmetadata>