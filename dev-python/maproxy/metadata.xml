<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========Ma`Proxy===========Ma`Proxy is a simple TCP proxy based on `Tornado &lt;http://www.tornadoweb.org/&gt;`_.Well, maybe not that simple, since it supports:* TCP -&gt; TCP    simple reverse proxy.    Whatever data goes in , goes out* TCP -&gt; SSL     proxy to encrypt incoming data.    a.k.a stunnel                      * SSL -&gt; TCP    proxy to decrypt incoming data    a.k.a SSL-terminator or SSL-decryptor* SSL- &gt; SSL    whatever gets in will be decrypted and then encrypted again    * Each SSL can be used with SSL certificates. including client-certificates !!Examples:----------// update (Aug 2016) //// It seems that google now returning &quot;HTTP 304&quot; (page moved),// Hence,the google examples won't work.// In addition, the examples won't work with sites that check the &quot;HOST&quot; header (since when you connect locally the browser will send HOST: 127.0.0.1)Let's start with the simplest example - no bells and whistles - a simple TCP proxy::    #!/usr/bin/env python    import tornado.ioloop    import maproxy.proxyserver        # HTTP-&gt;HTTP: On your computer, browse to &quot;http://127.0.0.1:81/&quot; and you'll get http://www.google.com    server = maproxy.proxyserver.ProxyServer(&quot;www.google.com&quot;,80)    server.listen(81)    print(&quot;http://127.0.0.1:81 -&gt; http://www.google.com&quot;)        tornado.ioloop.IOLoop.instance().start()We are creating a proxy (reverse proxy, to be more accurate) that listens locally on port 81 (0.0.0.0:81) and redirect all calls to www.google.com (port 80) .Note that:1. This is NOT an HTTP-proxy , since  it operates in the lower TCP layer . this proxy has nothing to do with HTTP2. we are actually listening on all the IP addresses, not only on 127.0.0.1 .Now, Let's say that you'd like to listen on a &quot;clear&quot; (non-encrypted) connection but connect to an SSL website,for example - create a proxy http://127.0.0.1:82 -&gt; https://127.0.0.1:443 , simply update the &quot;server&quot; line::    #!/usr/bin/env python    import tornado.ioloop    import maproxy.proxyserver        # HTTP-&gt;HTTP: On your computer, browse to &quot;http://127.0.0.1:81/&quot; and you'll get http://www.google.com    server = maproxy.proxyserver.ProxyServer(&quot;www.google.com&quot;,443,server_ssl_options=True)    server.listen(82)    print(&quot;http://127.0.0.1:82 -&gt; https://www.google.com&quot;,)        tornado.ioloop.IOLoop.instance().start()Alternatively, you can listen on SSL port and redirect the connection to a clear-text server.In order to listen on SSL-port, you need to specify SSL server-certificates as &quot;client_ssl_options&quot;::    #!/usr/bin/env python    import tornado.ioloop    import maproxy.proxyserver        # HTTPS-&gt;HTTP    ssl_certs={     &quot;certfile&quot;:  &quot;./certificate.pem&quot;,                    &quot;keyfile&quot;: &quot;./privatekey.pem&quot; }    # &quot;client_ssl_options=ssl_certs&quot; simply means &quot;listen using SSL&quot;    server = maproxy.proxyserver.ProxyServer(&quot;www.google.com&quot;,80,                                             client_ssl_options=ssl_certs)    server.listen(83)    print(&quot;https://127.0.0.1:83 -&gt; http://www.google.com&quot;)    tornado.ioloop.IOLoop.instance().start()In the &quot;demos&quot; section of the source-code, you will also find:* how to connect using SSL client-certificate* how to inherit the &quot;Session&quot; object (that we internally use)  and create a logging-proxy (proxy that logs everything) .Installation:--------------    pip install maproxy**Source Code**: https://github.com/zferentz/maproxy**Contact Me**: zvika d-o-t ferentz a-t gmail d,o,t com  *(if you can't figure it out - please don't contact me :)  )*</longdescription>
</pkgmetadata>