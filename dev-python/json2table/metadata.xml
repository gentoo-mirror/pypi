<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>json2table==========|Build Status| |Coverage Status|.. |Build Status| image:: https://travis-ci.org/latture/json2table.svg?branch=master   :target: https://travis-ci.org/latture/json2table.. |Coverage Status| image:: https://coveralls.io/repos/github/latture/json2table/badge.svg?branch=master   :target: https://coveralls.io/github/latture/json2table?branch=masterThis is a simple Python package that allows a JSON object to be converted to HTML. It provides a ``convert`` function that accepts a ``dict`` instance and returns a string of converted HTML. For example, the simple JSON object ``{&quot;key&quot; : &quot;value&quot;}`` can be converted to HTML via:.. code:: python    &gt;&gt;&gt; from json2table import convert    &gt;&gt;&gt; json_object = {&quot;key&quot; : &quot;value&quot;}    &gt;&gt;&gt; build_direction = &quot;LEFT_TO_RIGHT&quot;    &gt;&gt;&gt; table_attributes = {&quot;style&quot; : &quot;width:100%&quot;}    &gt;&gt;&gt; html = convert(json_object, build_direction=build_direction, table_attributes=table_attributes)    &gt;&gt;&gt; print(html)    '&lt;table style=&quot;width:100%&quot;&gt;&lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;td&gt;value&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'The resulting table will resemble+---------+-------+| **key** | value |+---------+-------+More complex parsing is also possible. If a list of ``dict``'s provides the same list of keys, the generated HTML with gather items by key and display them in the same column... code:: json    {&quot;menu&quot;: {      &quot;id&quot;: &quot;file&quot;,      &quot;value&quot;: &quot;File&quot;,        &quot;menuitem&quot;: [          {&quot;value&quot;: &quot;New&quot;, &quot;onclick&quot;: &quot;CreateNewDoc()&quot;},          {&quot;value&quot;: &quot;Open&quot;, &quot;onclick&quot;: &quot;OpenDoc()&quot;},          {&quot;value&quot;: &quot;Close&quot;, &quot;onclick&quot;: &quot;CloseDoc()&quot;}        ]      }    }Output:+----------+--------------+----------------+-----------+| **menu** | **menuitem** | **onclick**    | **value** |+          +              +----------------+-----------+|          |              | CreateNewDoc() | New       |+          +              +----------------+-----------+|          |              | OpenDoc()      | Open      |+          +              +----------------+-----------+|          |              | CloseDoc()     | Close     |+          +--------------+----------------+-----------+|          | **id**       | file                       |+          +--------------+----------------+-----------+|          | **value**    | File                       |+----------+--------------+----------------+-----------+It might, however, be more readable if we were able to build the table from top-to-bottom instead of the default left-to-right. Changing the ``build_direction`` to ``&quot;TOP_TO_BOTTOM&quot;`` yields:+----------------+-----------+-------+-----------+| **menu**                                       |+----------------+-----------+-------+-----------+| **menuitem**               | **id**| **value** |+----------------+-----------+-------+-----------+| **onclick**    | **value** |  file |   File    |+----------------+-----------+       +           +| CreateNewDoc() | New       |       |           | +----------------+-----------+       +           +| OpenDoc()      | Open      |       |           |+----------------+-----------+       +           +| CloseDoc()     | Close     |       |           |+----------------+-----------+-------+-----------+Table attributes are added via the ``table_attributes`` parameter. This parameter should be a ``dict`` of ``(key, value)`` pairs to apply to the table in the form ``key=&quot;value&quot;``. If in our simple example before we additionally wanted to apply a class attribute of ``&quot;table table-striped&quot;`` we would use the following:.. code:: python    &gt;&gt;&gt; table_attributes = {&quot;style&quot; : &quot;width:100%&quot;, &quot;class&quot; : &quot;table table-striped&quot;}and convert just as before:.. code:: python    &gt;&gt;&gt; html = convert(json_object, build_direction=build_direction, table_attributes=table_attributes)Details-------This module provides a single ``convert`` function. It takes as input the JSON object (represented as a Python ``dict``) and, optionally, a build direction and a dictionary of table attributes to customize the generated table: ``convert(json_input, build_direction=&quot;LEFT_TO_RIGHT&quot;, table_attributes=None)``**Parameters**json_input : dict  JSON object to convert into HTML.build_direction : ``{&quot;TOP_TO_BOTTOM&quot;, &quot;LEFT_TO_RIGHT&quot;}``, optional  String denoting the build direction of the table. If ``&quot;TOP_TO_BOTTOM&quot;`` child  objects will be appended below parents, i.e. in the subsequent row. If ``&quot;LEFT_TO_RIGHT&quot;``  child objects will be appended to the right of parents, i.e. in the subsequent column.  Default is ``&quot;LEFT_TO_RIGHT&quot;``.table_attributes : ``dict``, optional  Dictionary of ``(key, value)`` pairs describing attributes to add to the table.   Each attribute is added according to the template ``key=&quot;value&quot;``. For example,   the table ``{ &quot;border&quot; : 1 }`` modifies the generated table tags to include   ``border=&quot;1&quot;`` as an attribute. The generated opening tag would look like   ``&lt;table border=&quot;1&quot;&gt;``. Default is ``None``.**Returns**``str``  String of converted HTML.Installation------------The easiest method on installation is to use ``pip``. Simply run:::    &gt;&gt;&gt; pip install json2tableIf instead the repo was cloned, navigate to the root directory of the ``json2table`` package from the command line and execute:::    &gt;&gt;&gt; python setup.py installTests-----In order to verify the code is working, from the command line navigate to the ``json2table`` root directory and run:::    &gt;&gt;&gt; python -m unittest tests.test_json2table</longdescription>
</pkgmetadata>