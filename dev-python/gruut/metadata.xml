<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GruutA tokenizer, text cleaner, and [IPA](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet) phonemizer for several human languages that supports [SSML](#ssml).```pythonfrom gruut import sentencestext = 'He wound it around the wound, saying &quot;I read it was $10 to read.&quot;'for sent in sentences(text, lang=&quot;en-us&quot;):    for word in sent:        if word.phonemes:            print(word.text, *word.phonemes)```which outputs:```He h ˈiwound w ˈaʊ n dit ˈɪ taround ɚ ˈaʊ n dthe ð əwound w ˈu n d, |saying s ˈeɪ ɪ ŋI ˈaɪread ɹ ˈɛ dit ˈɪ twas w ə zten t ˈɛ ndollars d ˈɑ l ɚ zto t əread ɹ ˈi d. ‖```Note that &quot;wound&quot; and &quot;read&quot; have different pronunciations when used in different (grammatical) contexts.A [subset of SSML](#ssml) is also supported:```pythonfrom gruut import sentencesssml_text = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;speak version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2001/10/synthesis&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.w3.org/2001/10/synthesis                http://www.w3.org/TR/speech-synthesis11/synthesis.xsd&quot;    xml:lang=&quot;en-US&quot;&gt;&lt;s&gt;Today at 4pm, 2/1/2000.&lt;/s&gt;&lt;s xml:lang=&quot;it&quot;&gt;Un mese fà, 2/1/2000.&lt;/s&gt;&lt;/speak&gt;&quot;&quot;&quot;for sent in sentences(ssml_text, ssml=True):    for word in sent:        if word.phonemes:            print(sent.idx, word.lang, word.text, *word.phonemes)```with the output:```0 en-US Today t ə d ˈeɪ0 en-US at ˈæ t0 en-US four f ˈɔ ɹ0 en-US P p ˈi0 en-US M ˈɛ m0 en-US , |0 en-US February f ˈɛ b j u ˌɛ ɹ i0 en-US first f ˈɚ s t0 en-US , |0 en-US two t ˈu0 en-US thousand θ ˈaʊ z ə n d0 en-US . ‖1 it Un u n1 it mese ˈm e s e1 it fà f a1 it , |1 it due d j u1 it gennaio d͡ʒ e n n ˈa j o1 it duemila d u e ˈm i l a1 it . ‖```See [the documentation](https://rhasspy.github.io/gruut/) for more details.## Installation```shpip install gruut```Languages besides English can be added during installation. For example, with French and Italian support:```shpip install -f 'https://synesthesiam.github.io/prebuilt-apps/' gruut[fr,it]```The extra pip repo is needed for an updated [num2words fork](https://github.com/rhasspy/num2words) that includes support for more languages.You may also [manually download language files](https://github.com/rhasspy/gruut/releases/latest) and use put them in `$XDG_CONFIG_HOME/gruut/` (`$HOME/.config/gruut` by default).gruut will look for language files in the directory `$XDG_CONFIG_HOME/gruut/&lt;lang&gt;/` if the corresponding Python package is not installed. Note that `&lt;lang&gt;` here is the **full** language name, e.g. `de-de` instead of just `de`. ## Supported Languagesgruut currently supports:* Arabic (`ar`)* Czech (`cs` or `cs-cz`)* German (`de` or `de-de`)* English (`en` or `en-us`)* Spanish (`es` or `es-es`)* Farsi/Persian (`fa`)* French (`fr` or `fr-fr`)* Italian (`it` or `it-it`)* Luxembourgish (`lb`)* Dutch (`nl`)* Russian (`ru` or `ru-ru`)* Swedish (`sv` or `sv-se`)* Swahili (`sw`)The goal is to support all of [voice2json's languages](https://github.com/synesthesiam/voice2json-profiles#supported-languages)## Dependencies* Python 3.7 or higher* Linux    * Tested on Debian Bullseye* [num2words fork](https://github.com/rhasspy/num2words) and [Babel](https://pypi.org/project/Babel/)    * Currency/number handling    * num2words fork includes additional language support (Arabic, Farsi, Swedish, Swahili)* gruut-ipa    * [IPA](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet) pronunciation manipulation* [pycrfsuite](https://github.com/scrapinghub/python-crfsuite)    * Part of speech tagging and grapheme to phoneme models* [pydateparser](https://github.com/GLibAi/pydateparser)    * Date parsing for multiple languages## Numbers, Dates, and More`gruut` can automatically verbalize numbers, dates, and other expressions. This is done in a locale-aware manner for both parsing and verbalization, so &quot;1/1/2020&quot; may be interpreted as &quot;M/D/Y&quot; or &quot;D/M/Y&quot; depending on the word or sentence's language (e.g., `&lt;s lang=&quot;...&quot;&gt;`).The following types of expressions can be automatically expanded into words by `gruut`:* Numbers - &quot;123&quot; to &quot;one hundred and twenty three&quot; (disable with `verbalize_numbers=False` or `--no-numbers`)    * Relies on `Babel` for parsing and `num2words` for verbalization* Dates - &quot;1/1/2020&quot; to &quot;January first, twenty twenty&quot; (disable with `verbalize_dates=False` or `--no-dates`)    * Relies on `pydateparser` for parsing and both `Babel` and `num2words` for verbalization* Currency - &quot;$10&quot; to &quot;ten dollars&quot; (disable with `verbalize_currency=False` or `--no-currency`)    * Relies on `Babel` for parsing and both `Babel` and `num2words` for verbalization* Times - &quot;12:01am&quot; to &quot;twelve oh one A M&quot; (disable with `verbalize_times=False` or `--no-times`)    * English only    * Relies on `num2words` for verbalization## Command-Line UsageThe `gruut` module can be executed with `python3 -m gruut --language &lt;LANGUAGE&gt; &lt;TEXT&gt;` or with the `gruut` command (from `setup.py`).The `gruut` command is line-oriented, consuming text and producing [JSONL](https://jsonlines.org/).You will probably want to install [jq](https://stedolan.github.io/jq/) to manipulate the [JSONL](https://jsonlines.org/) output from `gruut`.### Plain TextTakes raw text and outputs [JSONL](https://jsonlines.org/) with cleaned words/tokens.```shecho 'This, right here, is some &quot;RAW&quot; text!' \   | gruut --language en-us \   | jq --raw-output '.words[].text'This,righthere,issome&quot;RAW&quot;text!```More information is available in the full JSON output:```shgruut --language en-us 'More  text.' | jq .```Output:```json{  &quot;idx&quot;: 0,  &quot;text&quot;: &quot;More text.&quot;,  &quot;text_with_ws&quot;: &quot;More text.&quot;,  &quot;text_spoken&quot;: &quot;More text&quot;,  &quot;par_idx&quot;: 0,  &quot;lang&quot;: &quot;en-us&quot;,  &quot;voice&quot;: &quot;&quot;,  &quot;words&quot;: [    {      &quot;idx&quot;: 0,      &quot;text&quot;: &quot;More&quot;,      &quot;text_with_ws&quot;: &quot;More &quot;,      &quot;leading_ws&quot;: &quot;&quot;,      &quot;training_ws&quot;: &quot; &quot;,      &quot;sent_idx&quot;: 0,      &quot;par_idx&quot;: 0,      &quot;lang&quot;: &quot;en-us&quot;,      &quot;voice&quot;: &quot;&quot;,      &quot;pos&quot;: &quot;JJR&quot;,      &quot;phonemes&quot;: [        &quot;m&quot;,        &quot;ˈɔ&quot;,        &quot;ɹ&quot;      ],      &quot;is_major_break&quot;: false,      &quot;is_minor_break&quot;: false,      &quot;is_punctuation&quot;: false,      &quot;is_break&quot;: false,      &quot;is_spoken&quot;: true,      &quot;pause_before_ms&quot;: 0,      &quot;pause_after_ms&quot;: 0    },    {      &quot;idx&quot;: 1,      &quot;text&quot;: &quot;text&quot;,      &quot;text_with_ws&quot;: &quot;text&quot;,      &quot;leading_ws&quot;: &quot;&quot;,      &quot;training_ws&quot;: &quot;&quot;,      &quot;sent_idx&quot;: 0,      &quot;par_idx&quot;: 0,      &quot;lang&quot;: &quot;en-us&quot;,      &quot;voice&quot;: &quot;&quot;,      &quot;pos&quot;: &quot;NN&quot;,      &quot;phonemes&quot;: [        &quot;t&quot;,        &quot;ˈɛ&quot;,        &quot;k&quot;,        &quot;s&quot;,        &quot;t&quot;      ],      &quot;is_major_break&quot;: false,      &quot;is_minor_break&quot;: false,      &quot;is_punctuation&quot;: false,      &quot;is_break&quot;: false,      &quot;is_spoken&quot;: true,      &quot;pause_before_ms&quot;: 0,      &quot;pause_after_ms&quot;: 0    },    {      &quot;idx&quot;: 2,      &quot;text&quot;: &quot;.&quot;,      &quot;text_with_ws&quot;: &quot;.&quot;,      &quot;leading_ws&quot;: &quot;&quot;,      &quot;training_ws&quot;: &quot;&quot;,      &quot;sent_idx&quot;: 0,      &quot;par_idx&quot;: 0,      &quot;lang&quot;: &quot;en-us&quot;,      &quot;voice&quot;: &quot;&quot;,      &quot;pos&quot;: null,      &quot;phonemes&quot;: [        &quot;‖&quot;      ],      &quot;is_major_break&quot;: true,      &quot;is_minor_break&quot;: false,      &quot;is_punctuation&quot;: false,      &quot;is_break&quot;: true,      &quot;is_spoken&quot;: false,      &quot;pause_before_ms&quot;: 0,      &quot;pause_after_ms&quot;: 0    }  ],  &quot;pause_before_ms&quot;: 0,  &quot;pause_after_ms&quot;: 0}```For the whole input line and each word, the `text` property contains the processed input text with normalized whitespace while `text_with_ws` retains the original whitespace. The `text_spoken` property only contains words that are spoken, so punctuation and breaks are excluded.Within each word, there is:* `idx` - zero-based index of the word in the sentence* `sent_idx` - zero-based index of the sentence in the input text* `pos` - part of speech tag (if available)* `phonemes` - list of [IPA](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet) phonemes for the word (if available)* `is_minor_break` - `true` if &quot;word&quot; separates phrases (comma, semicolon, etc.)* `is_major_break` - `true` if &quot;word&quot; separates sentences (period, question mark, etc.)* `is_break` - `true` if &quot;word&quot; is a major or minor break* `is_punctuation` - `true` if &quot;word&quot; is a surrounding punctuation mark (quote, bracket, etc.)* `is_spoken` - `true` if not a break or punctuationSee `python3 -m gruut &lt;LANGUAGE&gt; --help` for more options.### SSMLA subset of [SSML](https://www.w3.org/TR/speech-synthesis11/) is supported:* `&lt;speak&gt;` - wrap around SSML text    * `lang` - set language for document* `&lt;p&gt;` - paragraph    * `lang` - set language for paragraph* `&lt;s&gt;` - sentence (disables automatic sentence breaking)    * `lang` - set language for sentence* `&lt;w&gt;` / `&lt;token&gt;` - word (disables automatic tokenization)    * `lang` - set language for word    * `role` - set word role (see [word roles](#word-roles))* `&lt;lang lang=&quot;...&quot;&gt;` - set language inner text* `&lt;voice name=&quot;...&quot;&gt;` - set voice of inner text* `&lt;say-as interpret-as=&quot;&quot;&gt;` - force interpretation of inner text    * `interpret-as` one of &quot;spell-out&quot;, &quot;date&quot;, &quot;number&quot;, &quot;time&quot;, or &quot;currency&quot;    * `format` - way to format text depending on `interpret-as`        * number - one of &quot;cardinal&quot;, &quot;ordinal&quot;, &quot;digits&quot;, &quot;year&quot;        * date - string with &quot;d&quot; (cardinal day), &quot;o&quot; (ordinal day), &quot;m&quot; (month), or &quot;y&quot; (year)* `&lt;break time=&quot;&quot;&gt;` - Pause for given amount of time    * time - seconds (&quot;123s&quot;) or milliseconds (&quot;123ms&quot;)* `&lt;mark name=&quot;&quot;&gt;` - User-defined mark (`marks_before` and `marks_after` attributes of words/sentences)    * name - name of mark* `&lt;sub alias=&quot;&quot;&gt;` - substitute `alias` for inner text* `&lt;phoneme ph=&quot;...&quot;&gt;` - supply phonemes for inner text    * `ph` - phonemes for each word of inner text, separated by whitespace* `&lt;lexicon id=&quot;...&quot;&gt;` - inline or external pronunciation lexicon    * `id` - unique id of lexicon (used in `&lt;lookup ref=&quot;...&quot;&gt;`)    * `uri` - if empty or missing, lexicon is inline    * One or more `&lt;lexeme&gt;` child elements with:        *  Optional `role=&quot;...&quot;` ([word roles][#word-roles] separated by whitespace)        * `&lt;grapheme&gt;WORD&lt;/grapheme&gt;` - word text        * `&lt;phoneme&gt;P H O N E M E S&lt;/phoneme&gt;` - word pronunciation (phonemes separated by whitespace)* `&lt;lookup ref=&quot;...&quot;&gt;` - use pronunciation lexicon for child elements    * `ref` - id from a `&lt;lexicon id=&quot;...&quot;&gt;`#### Word RolesDuring phonemization, word roles are used to disambiguate pronunciations. Unless manually specified, a word's role is derived from its part of speech tag as `gruut:&lt;TAG&gt;`. For initialisms and `spell-out`, the role `gruut:letter` is used to indicate that e.g., &quot;a&quot; should be spoken as `/eɪ/` instead of `/ə/`.For `en-us`, the following additional roles are available from the part-of-speech tagger:* `gruut:CD` - number* `gruut:DT` - determiner* `gruut:IN` - preposition or subordinating conjunction * `gruut:JJ` - adjective* `gruut:NN` - noun* `gruut:PRP` - personal pronoun* `gruut:RB` - adverb* `gruut:VB` - verb* `gruut:VB` - verb (past tense)#### Inline LexiconsInline [pronunciation lexicons](https://www.w3.org/TR/2008/REC-pronunciation-lexicon-20081014/) are supported via the `&lt;lexicon&gt;` and `&lt;lookup&gt;` tags. gruut diverges slightly from the [SSML standard](https://www.w3.org/TR/speech-synthesis11/) here by allowing lexicons to be defined within the SSML document itself (`url` is blank or missing). Additionally, the `id` attribute of the `&lt;lexicon&gt;` element can be left off to indicate a &quot;default&quot; inline lexicon that does not require a corresponding `&lt;lookup&gt;` tag.For example, the following document will yield three different pronunciations for the word &quot;tomato&quot;:``` xml&lt;?xml version=&quot;1.0&quot;?&gt;&lt;speak version=&quot;1.1&quot;       xmlns=&quot;http://www.w3.org/2001/10/synthesis&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.w3.org/2001/10/synthesis                 http://www.w3.org/TR/speech-synthesis11/synthesis.xsd&quot;       xml:lang=&quot;en-US&quot;&gt;  &lt;lexicon xml:id=&quot;test&quot; alphabet=&quot;ipa&quot;&gt;    &lt;lexeme&gt;      &lt;grapheme&gt;        tomato      &lt;/grapheme&gt;      &lt;phoneme&gt;        &lt;!-- Individual phonemes are separated by whitespace --&gt;        t ə m ˈɑ t oʊ      &lt;/phoneme&gt;    &lt;/lexeme&gt;    &lt;lexeme&gt;      &lt;grapheme role=&quot;fake-role&quot;&gt;        tomato      &lt;/grapheme&gt;      &lt;phoneme&gt;        &lt;!-- Made up pronunciation for fake word role --&gt;        t ə m ˈi t oʊ      &lt;/phoneme&gt;    &lt;/lexeme&gt;  &lt;/lexicon&gt;  &lt;w&gt;tomato&lt;/w&gt;  &lt;lookup ref=&quot;test&quot;&gt;    &lt;w&gt;tomato&lt;/w&gt;    &lt;w role=&quot;fake-role&quot;&gt;tomato&lt;/w&gt;  &lt;/lookup&gt;&lt;/speak&gt;```The first &quot;tomato&quot; will be looked up in the U.S. English lexicon (`/t ə m ˈeɪ t oʊ/`). Within the `&lt;lookup&gt;` tag's scope, the second and third &quot;tomato&quot; words will be looked up in the inline lexicon. The third &quot;tomato&quot; word has a [role](#word-roles) attached  (selecting a made up pronunciation in this case).Even further from the SSML standard, gruut allows you to leave off the `&lt;lexicon&gt;` id entirely. With no `id`, a `&lt;lookup&gt;` tag is no longer needed, allowing you to override the pronunciation of any word in the document: ``` xml&lt;?xml version=&quot;1.0&quot;?&gt;&lt;speak version=&quot;1.1&quot;       xmlns=&quot;http://www.w3.org/2001/10/synthesis&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.w3.org/2001/10/synthesis                 http://www.w3.org/TR/speech-synthesis11/synthesis.xsd&quot;       xml:lang=&quot;en-US&quot;&gt;  &lt;!-- No id means change all words without a lookup --&gt;  &lt;lexicon&gt;    &lt;lexeme&gt;      &lt;grapheme&gt;        tomato      &lt;/grapheme&gt;      &lt;phoneme&gt;        t ə m ˈɑ t oʊ      &lt;/phoneme&gt;    &lt;/lexeme&gt;  &lt;/lexicon&gt;  &lt;w&gt;tomato&lt;/w&gt;&lt;/speak&gt;```This will yield a pronunciation of `/t ə m ˈɑ t oʊ/` for all instances of &quot;tomato&quot; in the document (unless they have a `&lt;lookup&gt;`).## Intended Audiencegruut is useful for transforming raw text into phonetic pronunciations, similar to [phonemizer](https://github.com/bootphon/phonemizer). Unlike phonemizer, gruut looks up words in a pre-built lexicon (pronunciation dictionary) or guesses word pronunciations with a pre-trained grapheme-to-phoneme model. Phonemes for each language come from a [carefully chosen inventory](https://en.wikipedia.org/wiki/Template:Language_phonologies).For each supported language, gruut includes a:* A word pronunciation lexicon built from open source data    * See [pron_dict](https://github.com/Kyubyong/pron_dictionaries)* A pre-trained grapheme-to-phoneme model for guessing word pronunciationsSome languages also include:* A pre-trained part of speech tagger built from open source data:    * See [universal dependencies](https://universaldependencies.org/)</longdescription>
</pkgmetadata>