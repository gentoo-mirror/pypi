<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AppyterThis module enables you to turn your jupyter notebook into a jinja2 template-driven web application. Or just parse for other purposes.## InstallationNOTE: This application uses modern python features including async await (3.5) and fstrings (3.6), to ensure you have the best experience please use python &gt;= 3.8.```bash# Install package from pippip3 install --upgrade appyter# OR Install package from github repository mainpip3 install --upgrade git+https://github.com/Maayanlab/appyter.git```## UsageAppyter enables you to serve that notebook on an executable webapp.`appyter jupyter_notebook.ipynb`If for some reason, `appyter` doesn't end up discoverable in your PATH, you can use `python3 -m appyter` instead.- A dotenv file (`.env`) or environment variables can be use to configure HOST, PORT, and PREFIX of the webserver.- Some pre-configured profiles can be used for styling the form (`--profile=profile_name`) see `appyter/profiles`- In debug mode (`--debug`), changes to the notebook will automatically update the webapp.- Custom fields can be used by putting them in the directory of execution with the following format:  - `./fields/YourField.py`: Python Field Implementation- The templates used natively by the application can be modified to provide your own look and feel:  - `./templates/head.jinja2`: Custom head (title, CSS, scripts)  - `./templates/form.jinja2`: Custom form handling  - `./templates/fields/StringField.jinja2`: Override field style- Custom jinja2 filters can be added if necessary  - `./filters/your_filter.py`: Python jinja2 filter (function)- Custom externally-referenced resources (i.e. images) can be put under the static directory  - `./static/img/your_image.png`: Reference in templates with `{% static 'img/your_image.png' %}`- Custom blueprints to additionally mount with flask  - `./blueprints/your_app/__init__.py`: `your_app = Blueprint('your_app', __name__)`## Creating an AppyterCreate a standard python jupyter notebook, make the first cell:```#%%appyter initfrom appyter import magicmagic.init(lambda _=globals: _())```Normal cells are allowed, you also have access to jinja2-rendered cells:```%%appyter {cell_type}```Supported cell_types:- `markdown`: Substitute jinja2 template variables, render as a markdown cell- `hide`: Substitute jinja2 template variables, show it rendered in your notebook with the default values, but when executing publicly, don't show/execute the cell.- `code_exec`: Substitute jinja2 template variables, render as python, show it rendered in your notebook with the default values and execute it- `code_eval`: Substitute jinja2 template variables, render as python, show it rendered in your notebook with the default values and execute it, &quot;eval&quot; the last line of the cell and display the result.## DiscussionConsider the following notebook:```%%appyter markdown# {{ StringField(name='title', label='Title', default='My Title').render_value }}{{ TextField(name='description', label='Description', default='My description').render_value }}``````%%appyter code_eval{% set number_1 = IntField(name='number_1', label='First Number', min=0, max=10, default=5) %}{% set number_2 = IntField(name='number_2', label='Second Number', min=0, max=10, default=5) %}{% set op = ChoiceField(  name='operator',  label='Operator',  choices={    'add': '+',    'subtract': '-',    'multiply': '*',    'divide': '/',    'power': '**',  },  default='add',) %}answer = {{ number_1 }} {{ op }} {{ number_2 }}```This can be parsed in various ways:```python# Parse variables aloneassert parse_variables(appyter) == {  'number_1': IntField(name='number_1', label='First Number', min=0, max=10, default=5),  'number_2': IntField(name='number_2', label='Second Number', min=0, max=10, default=5),  'operator': ChoiceField(    name='operator',    label='Operator',    choices={      'add': '+',      'subtract': '-',      'multiply': '*',      'divide': '/',      'power': '**'    },    default='add'  ),}# Render jupyter notebook with variables substitutedassert render_jupyter(appyter, {  'title': 'Test',  'description': '',  'number_1': 0,  'number_2': 5,  'operator': 'subtract',}) == '''---# Test---answer = 0 - 5---''' # in valid ipynb syntax# Render web UIassert render_html(appyter) == '''&lt;form id=&quot;notebook&quot;&gt;  Title: &lt;input type=&quot;string&quot; name=&quot;title&quot;&gt;&lt;/input&gt;  Description: &lt;textarea name=&quot;description&quot;&gt;&lt;/textarea&gt;  First Number: &lt;input type=&quot;number&quot; name=&quot;number_1&quot; min=0 max=10&gt;&lt;/input&gt;  Second Number: &lt;input type=&quot;number&quot; name=&quot;number_2&quot; min=0 max=10&gt;&lt;/input&gt;  Operator: &lt;select name=&quot;operator&quot;&gt;    &lt;option value=&quot;add&quot;&gt;add&lt;/option&gt;    &lt;option value=&quot;subtract&quot;&gt;subtract&lt;/option&gt;    &lt;option value=&quot;divide&quot;&gt;divide&lt;/option&gt;    &lt;option value=&quot;power&quot;&gt;power&lt;/option&gt;  &lt;/select&gt;  &lt;input type=&quot;submit&quot; text=&quot;Submit&quot;&gt;&lt;/input&gt;&lt;/form&gt;&lt;script src=&quot;./appyter.js&quot;&gt;&lt;/script&gt;&lt;script&gt;  document.getElementById(&quot;notebook&quot;).on('submit', appyter.submit)&lt;/script&gt;'''# Web UI Rendererassert render_html_renderer(appyter, {  'title': 'Test',  'description': '',  'number_1': 0,  'number_2': 5,  'operator': 'subtract',}) == '''&lt;div id=&quot;notebook&quot;&gt;&lt;/div&gt;&lt;script src=&quot;./appyter.js&quot;&gt;&lt;/script&gt;&lt;script&gt;  document.on('load', function () {    appyter.render(      document.getElementById(&quot;notebook&quot;),      {        &quot;title&quot;: &quot;Test&quot;,        &quot;description&quot;: &quot;&quot;,        &quot;number_1&quot;: 0,        &quot;number_2&quot;: 5,        &quot;operator&quot;: &quot;subtract&quot;,      }    )  })&lt;/script&gt;'''````appyter` can be used to get these conversions, it can also be used to host standalone webapps using these mechanisms.## Development### Testing`pytest` is used for python testing. It can be invoked as follows:```bash# it is also prudent to test other protocols such as s3 (production) &amp; sbfs (CAVATICA)export FSSPEC_URI='memory://'pytest --log-cli-level=DEBUG appyter```</longdescription>
</pkgmetadata>