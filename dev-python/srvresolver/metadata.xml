<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SRV resolver[![PyPI version](https://badge.fury.io/py/srvresolver.svg)](https://pypi.python.org/pypi/srvresolver/) [![PyPI license](https://img.shields.io/pypi/l/srvresolver.svg)](https://pypi.python.org/pypi/srvresolver/) [![PyPI format](https://img.shields.io/pypi/format/srvresolver.svg)](https://pypi.python.org/pypi/srvresolver/)Helper to get record from SRV address according to [RFC2782](https://tools.ietf.org/html/rfc2782).## Features* support of record weights and priorities* check service availability at specific port* random record selector* cache with ttl support## InstallThe package can be installed simply by using `pip`:```shpip install srvresolver```## Example```pythonfrom srvresolver.srv_resolver import SRVResolver# get all recordsSRVResolver.resolve('_service._tcp.example.com')# get one random record with working connection SRVResolver.resolve_random('_service._tcp.example.com')# get first available serverSRVResolver.resolve_first('_service._tcp.example.com')```## Adds### Resolver with DNS cacheThis one uses cache implemented in dnspython module.```pythonfrom srvresolver.srv_resolver_cached import SRVResolverCached# get all recordsSRVResolverCached.resolve('_service._tcp.example.com')# same but don't do dns request, load from cache if not expiredSRVResolverCached.resolve('_service._tcp.example.com')```### Postgres SRV record resolverExtract postgres records from SRV and check whether master or slave. Requires `psycopg2````pythonfrom srvresolver.postgres_resolver import PostgresResolver# get random working slave recordPostgresResolver.get_slave('_postgresql._tcp.example.com', username, password)# get random working master recordPostgresResolver.get_master('_postgresql._tcp.example.com', username, password)```</longdescription>
</pkgmetadata>