<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-otp==========.. image:: https://img.shields.io/pypi/v/django-otp?color=blue   :target: https://pypi.org/project/django-otp/   :alt: PyPI.. image:: https://img.shields.io/readthedocs/django-otp-official   :target: https://django-otp-official.readthedocs.io/   :alt: Documentation.. image:: https://img.shields.io/badge/github-django--otp-green   :target: https://github.com/django-otp/django-otp   :alt: SourceThis project makes it easy to add support for `one-time passwords&lt;http://en.wikipedia.org/wiki/One-time_password&gt;`_ (OTPs) to Django. It can beintegrated at various levels, depending on how much customization is required.It integrates with ``django.contrib.auth``, although it is not a Djangoauthentication backend. The primary target is developers wishing to incorporateOTPs into their Django projects as a form of `two-factor authentication&lt;http://en.wikipedia.org/wiki/Two-factor_authentication&gt;`_.Several simple OTP plugins are included and more are available separately. Thispackage also includes an implementation of OATH `HOTP&lt;http://tools.ietf.org/html/rfc4226&gt;`_ and `TOTP&lt;http://tools.ietf.org/html/rfc6238&gt;`_ for convenience, as these are standardOTP algorithms used by multiple plugins.If you're looking for a higher-level or more opinionated solution, you might beinterested in `django-two-factor-auth&lt;https://github.com/Bouke/django-two-factor-auth&gt;`_.Status------This project is stable and maintained, but is no longer actively used by theauthor and is not seeing much ongoing investment. Anyone interested in takingover aspects of the project should `contact me &lt;https://github.com/psagers&gt;`_.Well-formed issues and pull requests are welcome, but please see theContributing section of the README first... end-of-doc-introThe Future----------Once upon a time, everything was usernames and passwords. Or even in the case ofother authentication mechanisms, a user was either authenticated or not(anonymous in Django's terminology). Then there was two-factor authentication,which could simply be an implementation detail in a binary authentication state,but could also imply levels or degrees of authentication.These days, it's increasingly common to see sites with more nuancedauthentication state. A site might remember who you are forever—so you're notanonymous—but if you try to do anything private, you have to re-authenticate.You may be able to choose from among all of the authentication mechanisms youhave configured, or only from some of them. Specific mechanisms may be requiredfor specific actions, such as using your U2F device to access your U2F settings.In short, the world seems to be moving beyond the assumptions that originallyinformed Django's essential authentication design. If I were still investing inDjango generally, I would probably start a new multi-factor authenticationproject that would reflect these changes. It would incorporate the idea that auser may be authenticated by various combinations of mechanisms at any time andthat different combinations may be required to satisfy diverse authorizationrequirements across the site. It would most likely try to disentangleauthentication persistence from sessions, at least to some extent. Many siteswould not require all of this flexibility, but it would open up possibilitiesfor better experiences by not asking users for more than we require at anypoint.If anyone has a mind to take on a project like this, I'd be happy to offerwhatever advice or lessons learned that I can.Development-----------Development dependencies are defined in the Pipfile; use `pipenv`_ to set up asuitable shell.The tests in tox.ini cover a representative sample of supported Python andDjango versions, as well as running `flake8`_ and `isort`_ for linting and styleconsistency. Please run `tox` before checking in and sending a pull request.Contributing------------As mentioned above, this project is stable and mature. Issues and pull requestsare welcome for important bugs and improvements. For non-trivial changes, it'soften a good idea to start by opening an issue to track the need for a changeand then optionally open a pull request with a proposed resolution. Issues andpull requests should also be focused on a single thing. Pull requests thatbundle together a bunch of loosely related commits are unlikely to go anywhere.Another good rule of thumb—for any project, but especially a mature one—is tokeep changes as simple as possible. In particular, there should be a high barfor adding new dependencies. Although it can't be ruled out, it seems highlyunlikely that a new runtime dependency will ever be added. New testingdependencies are more likely, but only if there's no other way to address animportant need.If there's a development tool that you'd like to use with this project, thefirst step is to try to update config files (setup.cfg or similar) to integratethe tool with the existing code. A bit of configuration glue for popular toolsshould always be safe. If that's not possible, we can consider modifying thecode to be compatible with a broader range of tools (without breaking anyexisting compatibilities). Only as a last resort would a new testing ordevelopment tool be incorporated into the project as a dependency.It's also good to remember that writing the code is typically the least part ofthe work. This is true for software development in general, but especially asmall stable project like this. The bulk of the work is in `understanding theproblem &lt;http://www.youtube.com/watch?v=f84n5oFoZBc&gt;`_, determining the desiredattributes of a solution, researching and evaluating alternatives, writingdocumentation, designing a testing strategy, etc. Writing the code itself tendsto be a minor matter that emerges from that process... _pipenv: https://pipenv.readthedocs.io/en/latest/.. _flake8: https://pypi.org/project/flake8/.. _isort: https://pypi.org/project/isort/</longdescription>
</pkgmetadata>