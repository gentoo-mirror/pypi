<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pspring-rest-clientThis framework is member of pspring based family of frameworks. It provides a means to create rest clients with minimal code. `requests` library is used internally for http requests.Annotations / Decorators that come along with this framework are listed below* `@RestClient(url=&quot;&quot;)`  This decorator will add few boiler plate code that is required to interact with any rest endpoint. The methods significant are `send`, `getUrl`, `addHeader`.  The `send` method would accept all arguments that `requests.request` method would. This method will throw `PayloadException` for all not HTTP 200 responses. The `PayloadException` has `response` and `statusCode` attributes which can be further used for error handling.  The `addHeader(name,value)` method would add an header  The `getUrl` will get the url that is configured along with `@RestClient` decorator.  The `handleError` method is exists on the object will be invoked when received a non http 200 response.* `@Mapping(method=&quot;&quot;,url=&quot;&quot;)`  This decorator will take care of replacing parameters in the url from arguments passed, send the request and return the responseUseful classes in this framework`RegExResponseMapper` - this class can be used to tranform one dictionary to another using regex. An example is shown below. The source dictionary fields can be accessed using `$` notation. In the below example `message` is a field inside the `response dictionary.```pythonregexmapper = RegExResponseMapper({    &quot;.*Customer does not exist.*&quot; :  {        &quot;statusCode&quot; : &quot;404&quot;,        &quot;code&quot; : &quot;APS-1001&quot;,        &quot;message&quot; : &quot;$response.message&quot;    },    &quot;.*&quot; : {        &quot;statusCode&quot; : &quot;500&quot;,        &quot;code&quot; : &quot;APS-1002&quot;,        &quot;message&quot; : &quot;$response.message&quot;    }})@RestClient(url=&quot;https://myapi.com&quot;)class MyRestClient():  @Mapping(method=&quot;GET&quot;,url=&quot;/user/{firstName}&quot;)  def getCustomer(self,firstName):    pass  @Mapping(method=&quot;POST&quot;,url=&quot;/user/&quot;,data=json)  def saveCustomer(self):    pass  @Mapping(method=&quot;POST&quot;,url=&quot;/user/&quot;)  def saveCustomer(self,customer):    self.json=customer  def handleError(self,response):        return regexmapper.map(response)```Documentation at [pspring-rest-client](https://vasudevan-palani.github.io/pspring-rest-client/) To do: * To return objects based on the return type from the response received.</longdescription>
</pkgmetadata>