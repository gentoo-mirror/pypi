<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;h1&gt; ImageDominantColor &lt;/h1&gt;&lt;h4&gt;Get the dominant color of any image&lt;/h4&gt;&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/akamhy/imagedominantcolor/actions?query=workflow%3ATest&quot;&gt;&lt;img alt=&quot;Build Status&quot; src=&quot;https://github.com/akamhy/imagedominantcolor/workflows/Test/badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/akamhy/imagedominantcolor&quot;&gt;&lt;img alt=&quot;codecov&quot; src=&quot;https://codecov.io/gh/akamhy/imagedominantcolor/branch/main/graph/badge.svg?token=xCV7vQ9MJo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/imagedominantcolor/&quot;&gt;&lt;img alt=&quot;pypi&quot; src=&quot;https://img.shields.io/pypi/v/imagedominantcolor.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/imagedominantcolor?versions=1*&quot;&gt;&lt;img alt=&quot;Downloads&quot; src=&quot;https://pepy.tech/badge/imagedominantcolor/month&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/imagedominantcolor?style=flat-square&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;### IntroductionImageDominantColor is a Python package/library for **detecting dominant color of images**.It can take any input image and tell the dominant color in image. It does not uses k-means clustering for detecting dominant color but instead quantize the individual pixels and calculates the statistical mode of the quantized values. And yes, it works!ImageDominantColor does not depend on numpy unlike most of the other implementations for the same task and is also fast and minimalist.What ImageDominantColor is not?&gt; ImageDominantColor does not calculates the average color of the image. Also note that the average color of an image is not same as its dominant color.### Installation  - Using [pip](https://en.wikipedia.org/wiki/Pip_(package_manager)):```bashpip install imagedominantcolor -U```  - Install directly from GitHub:```bashpip install git+https://github.com/akamhy/imagedominantcolor.git```### Usage```python&gt;&gt;&gt; from imagedominantcolor import DominantColor&gt;&gt;&gt; file_path = &quot;blue_butterfly.jpg&quot; # Blue color is dominant&gt;&gt;&gt; dominantcolor = DominantColor(file_path)&gt;&gt;&gt; dominantcolor.dominant_color'b'&gt;&gt;&gt; dominantcolor.rgb(3, 6, 244)&gt;&gt;&gt; dir(dominantcolor)['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'b', 'counter', 'dominant_color', 'dominant_color_of_pixel', 'dominant_color_of_pixels_of_image_array', 'g', 'generate_dominant_color_of_pixels_of_image_array', 'image', 'image_data', 'image_path', 'l', 'minimum_percent_difference_of_rgb', 'mpd', 'r', 'resize_value', 'resized_image', 'rgb', 'rgbl', 'set_dominat_color_of_image', 'set_rgbl_value_of_image', 'total_pixels']&gt;&gt;&gt; dominantcolor.total_pixels256&gt;&gt;&gt; dominantcolor.r3&gt;&gt;&gt; dominantcolor.g6&gt;&gt;&gt; dominantcolor.b244&gt;&gt;&gt; dominantcolor.l3&gt;&gt;&gt; dominantcolor.rgbl(3, 6, 244, 3)&gt;&gt;&gt; repr(dominantcolor)'DominantColor(r:3 g:6 b:244 l:3; dominant_color:b; resize_value:16; minimum_percent_difference_of_rgb:10)'&gt;&gt;&gt; str(dominantcolor)'b'&gt;&gt;&gt;```Output dominant color and what their meanings are:  - `r` - Red is the dominant color in the image.  - `g` - Green is the dominant color for the image.  - `b` - Blue is the dominant color.  - `l` - It is lowercase L and it implies that the image is a mostly a grayscale image. L for luminance and most of the image lacks color.  - `n` - None of the color out of r, g and b are dominant but the image is not grayscale. It implies that the image has equal regions where 2 or 3 colors dominate, [example here](https://user-images.githubusercontent.com/64683866/151845374-dd1a83e5-3265-491e-830d-39be120af65b.png). You can check the rgb attribute to decide what to do with such cases.What are `r`, `g`, `b` and `l` attributes of `DominantColor` objects?&gt; The library shrinks the image before checking the dominant color and the default resize value is 256. Thus every image is shrunk to a 256 pixels image.The r,g,b and l attributes indicate the number of pixels which have r,g,b and l as dominating value.### License[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://github.com/akamhy/imagedominantcolor/blob/main/LICENSE)Copyright (c) 2022 Akash Mahanty.Released under the MIT License. See[license](https://github.com/akamhy/imagedominantcolor/blob/main/LICENSE) for details.</longdescription>
</pkgmetadata>