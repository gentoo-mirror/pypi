<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># otel-py[![PIP Published Version][pip-image]][pip-url][![Apache License][license-image]][license-image][![Coverage][coverage-image]][coverage-url]![Trace](trace.png)This package provides OpenTelemetry-compliant tracing to Pythonapplications for the collection of distributed tracing and performance metrics in [Cisco Telescope](https://console.telescope.app/?utm_source=github).## Contents- [Installation](#installation)  - [Install Packages](#install-packages)  - [Install Dependencies](#install-dependencies)  - [Library initialization](#library-initialization)  - [OpenTelemetry Collector Configuration](#opentelemetry-collector-configuration)  - [Existing OpenTelemetry Instrumentation](#existing-opentelemetry-instrumentation)- [Supported Runtimes](#supported-runtimes)- [Supported Libraries](#supported-libraries)- [Configuration](#configuration)- [Getting Help](#getting-help)- [Opening Issues](#opening-issues)- [License](#license)## Installation### Requirements`Python &gt;=3.8, &lt;4.0``pip3 &gt;= 22.0` ### Install packages&gt; To install Cisco OpenTelemetry Distribution simply run:```shpip install cisco-telescope```### Full instrumentation supportTo install the required dependencies for all relevant supported instrumentation frameworks run:```shtelescope-bootstrap```### Library initializationCisco OpenTelemetry Distribution is activated and instruments the supported libraries once the `tracing.init()` has returned.To initialize the library, you'll need a cisco-token, which is taken from your [Account tab on the Telescope console Settings page](https://console.telescope.app/settings/account).```pythonfrom cisco_telescope import tracingtracing.init(  service_name=&quot;&lt;your-service-name&gt;&quot;,  cisco_token=&quot;&lt;your-cisco-token&gt;&quot;)```### OpenTelemetry Collector ConfigurationBy default, Cisco OpenTelemetry Distribution exports data directly to [Cisco Telescope's](https://console.telescope.app/?utm_source=github) infrastructure backend.**Existing** OpenTelemetery Collector is supported, the following configuration can be applied#### Configure custom trace exporterCisco OpenTelemetry Distribution supports the configuration of multiple custom exporters. Note that you will need to handle your exporter authorization.Example for creating OtlpGrpc Span exporter to local OpenTelemetry collector:```pythonfrom cisco_telescope import tracing, optionstracing.init(  service_name=&quot;&lt;your-service-name&gt;&quot;,  exporters=[    options.ExporterOptions(      exporter_type=&quot;otlp-grpc&quot;,      collector_endpoint=&quot;grpc://localhost:4317&quot;    ),  ])```#### Configure custom OpenTelemetry collector to export trace data to [Cisco Telescope's](https://console.telescope.app/?utm_source=github) external collector.```yamlcollector.yaml ...exporters:  otlphttp:    traces_endpoint: https://production.cisco-udp.com/trace-collector    headers:      authorization: Bearer &lt;Your Telescope Token&gt;    compression: gzipservice:  pipelines:    traces:      exporters: [otlphttp]```### Existing OpenTelemetry Instrumentation&gt; Notice: Only relevant if interested in streaming existing OpenTelemetry workloads.&gt; [Cisco Telescope](https://console.telescope.app/?utm_source=github). supports native OpenTelemetery traces.```pythonfrom opentelemetry import tracefrom opentelemetry.sdk.resources import Resourcefrom opentelemetry.sdk.trace import TracerProviderfrom opentelemetry.sdk.trace.export import BatchSpanProcessorfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import (    OTLPSpanExporter as OTLPHTTPExporter,)provider = TracerProvider(resource=Resource.create())trace.set_tracer_provider(provider)http_exporter = OTLPHTTPExporter(  endpoint=&quot;https://production.cisco-udp.com/trace-collector&quot;,  headers= {    &quot;authorization&quot;: &quot;Bearer &lt;Your Telescope Token&gt;&quot;,  },)processor = BatchSpanProcessor(http_exporter)provider.add_span_processor(processor)```## Supported RuntimesCisco OpenTelemetry Distribution supports Python 3.6+## Supported Libraries&gt; Cisco OpenTelemetry Python Distribution is extending Native OpenTelemetry, supported libraries [available here](https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation).Cisco OpenTelemetry Python Distribution provides out-of-the-box instrumentation (tracing) and advanced **payload collections** for many popular frameworks and libraries.| Library  | Extended Support Version    ||----------|-----------------------------|| requests | Fully supported             || aiohttp  | Fully supported             || grpc     | Client/Server Unary support |## ConfigurationAdvanced options can be configured as a parameter to the init() method:| Parameter        | Env                    | Type    | Default       | Description                                                       ||------------------|------------------------| ------- |---------------| ----------------------------------------------------------------- || cisco_token      | CISCO_TOKEN            | string  | -             | Cisco account token                                               || service_name     | OTEL_SERVICE_NAME      | string  | `application` | Application name that will be set for traces                      || debug            | CISCO_DEBUG            | string  | `False`       | Debug logs                                                        || payloads_enabled | CISCO_PAYLOADS_ENABLED | string  | `True`        | Debug logs                                                        |Exporter options| Parameter          | Env                     | Type                | Default                                               | Description                                                                                                                                ||--------------------| ----------------------- | ------------------- | ----------------------------------------------------- |--------------------------------------------------------------------------------------------------------------------------------------------|| collector_endpoint | OTEL_COLLECTOR_ENDPOINT | string              | `https://production.cisco-udp.com/trace-collector`    | The address of the trace collector to send traces to                                                                                       || type               | OTEL_EXPORTER_TYPE      | string              | `otlp-http`                                           | The exporter type to use (Currently only `otlp-http` is supported). Multiple exporter option available via init function see example below |## Getting HelpIf you have any issue around using the library or the product, please don't hesitate to:- Use the [documentation](https://docs.telescope.app).- Use the help widget inside the product.- Open an issue in GitHub.## LicenseProvided under the Apache 2.0. See LICENSE for details.Copyright 2022, Cisco[pip-url]: https://pypi.org/project/cisco-telescope/[pip-image]: https://img.shields.io/github/v/release/cisco-open/otel-py?include_prereleases&amp;style=for-the-badge[license-url]: https://github.com/https://github.com/cisco-open/otel-py/blob/main/LICENSE[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=for-the-badge[coverage-url]: https://codecov.io/gh/cisco-open/otel-py/branch/main/[coverage-image]: https://img.shields.io/codecov/c/github/cisco-open/otel-py?style=for-the-badge</longdescription>
</pkgmetadata>