<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The Delinea DevOps Secrets Vault Python SDK[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)![PyPI Version](https://img.shields.io/pypi/v/python-dsv-sdk)![License](https://img.shields.io/github/license/DelineaXPM/python-dsv-sdk)![Python Versions](https://img.shields.io/pypi/pyversions/python-dsv-sdk)The [Delinea](https://delinea.com/)[DevOps Secrets Vault](https://delinea.com/products/devops-secrets-management-vault)(DSV) Python SDK contains classes that interact with the DSV REST API.## Install```shellpython -m pip install python-dsv-sdk```## UsageThere are two ways in which you can authorize the `SecretsVault` class to fetch secrets.- Password Authorization (with `PasswordGrantAuthorizer`)- Access Token Authorization (with `AccessTokenAuthorizer`)### Authorizers#### Password AuthorizationIf using a traditional `client_id` and a `client_secret` to authenticate in to your DevOps Secrets Vault, you can pass the `PasswordGrantAuthorizer` into the `SecretsVault` class at instantiation. The `PasswordGrantAuthorizer` requires a `base_url`, `username`, and `password`. It _optionally_ takes a `token_path_uri`, but defaults to `/v1/token`.```pythonfrom delinea.secrets.vault import PasswordGrantAuthorizerauthorizer = PasswordGrantAuthorizer(&quot;https://mytenant.secretsvaultcloud.com/&quot;, &quot;my_client_id&quot;, &quot;my_client_secret&quot;)```#### Access Token AuthorizationIf you already have a valid `access_token`, you can pass directly via the `AccessTokenAuthorizer`.```pythonfrom delinea.secrets.vault import AccessTokenAuthorizerauthorizer = AccessTokenAuthorizer(&quot;YgJ1slfZs8ng9bKsRsB-tic0Kh8I...&quot;)```### Secrets VaultInstantiate `SecretsVault` by passing your `base_url` and `Authorizer` as arguments:```pythonfrom delinea.secrets.vault import SecretsVaultvault = SecretsVault(&quot;https://mytenant.secretsvaultcloud.com/&quot;, authorizer)```Secrets can be fetched using the `get_secret` method, which takes the `secret_path` of the secret and returns a `json` object. Alternatively, you can use pass the json to `VaultSecret` which returns a `dataclass` object representation of the secret:```pythonfrom delinea.secrets.vault import VaultSecretsecret = VaultSecret(**vault.get_secret(&quot;/test/secret&quot;))print(f&quot;username: {secret.data['username']}\npassword: {secret.data['password']}&quot;)```## Using Self-Signed CertificatesWhen using a self-signed certificate for SSL, the `REQUESTS_CA_BUNDLE` environment variable should be set to the path of the certificate (in `.pem` format). This will negate the need to ignore SSL certificate verification, which makes your application vunerable. Please reference the [`requests` documentation](https://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification) for further details on the `REQUESTS_CA_BUNDLE` environment variable, should you require it.## Create a Build Environment (optional)The SDK requires [Python 3.7](https://www.python.org/downloads/) or higher.Assuming that you have a supported version of Python installed, you can clonethis repository and set up your environment with:```shell# Clone the repogit clone https://github.com/DelineaXPM/python-dsv-sdkcd python-dsv-sdk# Create a virtual environmentpython -m venv venv. venv/bin/activate# Install dependenciespython -m pip install --upgrade pippip install -r requirements.txt```Valid credentials are required to run the unit tests. The credentials should be stored in environment variables or in a `.env` file:```shellexport DSV_CLIENT_ID=&quot;&quot;export DSV_CLIENT_SECRET=&quot;&quot;export DSV_BASE_URL=&quot;https://my.secretsvaultcloud.com/&quot;```The tests assume that the client associated with the specified `CLIENT_ID` can read the secret with the path `/test/sdk/simple`.&gt; Note: The secret path can be changed manually in `test_server.py` to a secret path that the client can access.To run the tests with `tox`:```shelltox```To build the package, use [Flit](https://flit.readthedocs.io/en/latest/):```shellflit build```</longdescription>
</pkgmetadata>