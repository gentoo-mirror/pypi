<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CosmosID-HUB Microbiome CLICommand line interface (CLI) and Python 3 client library for interacting with the CosmosID-HUB API. Only works withPython [3.6,3.7,3.8,3.9,3.10].## Requirements### OS Packages* python3* python3-pip### Python package* poetry# InstallationThis package provides:* core Python 3 client library;* a simple CLI for interacting with the CosmosID-HUB API;## Basic installationThe CLI with the core Python library can be installed using `pip3`.* simply run from console `sudo pip3 install cosmosid_cli`&gt; Note: pip3 and setuptools should be upgraded to latest version. Please update those packages on you workstation&gt; regarding to your OS update process before setup CosmosID-HUB CLI.&gt;&gt; ```shell&gt; E.g. for Ubuntu 14.04 perform following steps:&gt; $ sudo apt-get update&gt; $ sudo apt-get upgrade&gt; $ sudo -H pip3 install -U pip setuptools&gt;```&gt;&gt; If you had have previously installed CosmosID-HUB CLI just upgrade CLI&gt; to latest version.&gt;&gt; ```shell&gt; $ sudo -H pip3 install --upgrade cosmosid_cli&gt; ```To install package locally from folder with source files do the following:* install `poetry` check the [doc](https://python-poetry.org/docs/#osx--linux--bashonwindows-install-instructions)* `cd cosmosid-cli/package/`* `poetry install`## Installation from package management service Anaconda.orgAssure that you have Conda already installed or install it based on your system requirements - [link](https://docs.anaconda.com/anaconda/install/ )Follow the [cosmosid project page](https://anaconda.org/cosmosid/cosmosid-cli) to check the last version of cosmosid-cli available on Anaconda.orgThe CLI with Conda can be installed by the following command:```shellconda install -c cosmosid -c conda-forge cosmosid-cli```Verify the CLI version installed```shellcosmosid --version```## Using the CosmosID-HUB CLIThe CosmosID-HUB CLI supports authentication via CosmosID-HUB API Key.Your API key can be found on the [CosmosID-HUB profile page](https://app.cosmosid.com/settings).To automatically authenticate via CosmosID-HUB API Key you should createcredential file `~/.cosmosid` and store your API Key into it inthe following format:```json{  &quot;api_key&quot;: &quot;&lt;your api key string&gt;&quot;}```You can directly use your CosmosID-HUB API Key, rather than storing it in a credential file. To use API Key authentication,pass your key as an argument to the `cosmosid` command:```shellcosmosid --api_key=YOUR_API_KEY &lt;command&gt;```CLI supports files of following extensions: 'fasta', 'fna', 'fasta.gz', 'fastq', 'fq', 'fastq.gz', 'bam', 'sra'## CommandsThere are several types of commands supported by the CosmosID-HUB CLI1. Commands for retrieving data to terminal (output) from CosmosID cloud - files, runs, analysis.2. Commands for uploading metagenomics or amplicon samples to   CosmosID cloud for analysis - uploads.3. Commands for retrieving the reports archive from CosmosID cloud - reports&gt; Note: Each command has options. To get usage information for each CosmosID-HUB CLI command, the user can simply&gt; run `cosmosid &lt;command&gt; --help`### Retrieve FilesThe commands for retrieving data have options for output format. The user can get data into the terminal (or anotheroutput) in a different format - csv, json, table, value, yaml (table is default), and specify the column(s) to show. Inadditional there are CSV format options, user can quoteor unquote or partly quote output values - all, minimal, none, non-numeric (by default only non-numeric values arequoted)Example of output for the --help options for the &lt;files&gt; command:```shell$ cosmosid files --helpusage: cosmosid files [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN]                      [--noindent] [--max-width &lt;integer&gt;] [--fit-width]                      [--print-empty] [--quote {all,minimal,none,nonnumeric}]                      [--parent PARENT]                      [--order {type,name,id,status,size,created}] [--up]Show files in a given directory.optional arguments:  -h, --help            show this help message and exit  --parent PARENT, -p PARENT                        ID of the parent directory. Default: Root  --order {type,name,id,status,reads,created}, -o {type,name,id,status,size,created}                        field for ordering  --up                  order directionoutput formatters:  output formatter options  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}                        the output format, defaults to table  -c COLUMN, --column COLUMN                        specify the column(s) to include, can be repeatedjson formatter:  --noindent            whether to disable indenting the JSONtable formatter:  --max-width &lt;integer&gt;                        Maximum display width, 1 to disable. You can also use                        the CLIFF_MAX_TERM_WIDTH environment variable, but the                        parameter takes precedence.  --fit-width       Fit the table to the display width. Implied if --max-                        width greater than 0. Set the environment variable                        CLIFF_FIT_WIDTH=1 to always enable --print-empty     Print empty table if there is no data to show.CSV Formatter:  --quote {all,minimal,none,nonnumeric} when to include quotes, defaults to nonnumeric```To retrieve files (samples) stored in CosmosID simply run the `cosmosid` command with a `files` subcommand. For example:```shell#to get contents of your CosmosID root foldercosmosid files#to get contents of appropriate folder use its id as argumentcosmosid files --parent=&lt;folder_id&gt;#to get ordered list simply use the ordering argument with field name with/without order directioncosmosid files --parent=&lt;folder_id&gt; --order size --up```### Retrieve Sample RunsAn each file (sample) stored in CosmosID has one or more Sample Run(s) associated with it.Example of output for the --help options for the &lt;runs&gt; command:```shell$ cosmosid runs --helpusage: cosmosid runs [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width &lt;integer&gt;]                     [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] --id ID [--order {id,status,created}] [--up]Show List Of Runs for a given File.optional arguments:  -h, --help            show this help message and exit  --id ID, -i ID                        ID of the sample  --order {id,status,created}, -o {id,status,created}                        field for ordering  --up                  order directionoutput formatters:  output formatter options  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}                        the output format, defaults to table  -c COLUMN, --column COLUMN                        specify the column(s) to include, can be repeated to show multiple columns  --sort-column SORT_COLUMN                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated  --sort-ascending      sort the column(s) in ascending order  --sort-descending     sort the column(s) in descending orderCSV Formatter:  --quote {all,minimal,none,nonnumeric}                        when to include quotes, defaults to nonnumericjson formatter:  --noindent            whether to disable indenting the JSONtable formatter:  --max-width &lt;integer&gt;                        Maximum display width, &lt;1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable  --print-empty         Print empty table if there is no data to show.```For example:To retrieve sample run(s) associated with a file simply run the `cosmosid` command with `runs` subcommand. ```shell#to get runs associated with a speciffic file (sample)cosmosid runs --id=&lt;file_id&gt;```### Upload filesThe CosmosID-HUB CLI supports uploading sample files into CosmosID for analysis.CosmosID supports the following file formats and extension names:.fasta, .fna, .fasta.gz, .fastq, .fq, .fastq.gz, bam, bam.gz, sra, sra.gz. (SRA files can be uploaded without extension)CosmosID supports the following types of analysis:* Metagenomics* Amplicon - 16S or ITS (only 16S and ITS supported for now)&gt; Note: you can get usage help for each command and arguments of CosmosID-HUB CLI by simply runnig `cosmosid --help`&gt; or `cosmosid &lt;command&gt; --help````shell# cosmosid upload --helpusage: cosmosid upload [-h] [--file FILE] [--parent PARENT] --type {metagenomics,amplicon-16s,amplicon-its}                       [-wf WORKFLOW] [--forward-primer FORWARD_PRIMER] [--reverse-primer REVERSE_PRIMER]                       [--amplicon-preset {v1_v3,v3_v4,v4}]                       [--host-name {human:2.0.0,human:1.0.0,dog:2.0.0,domestic_cat:2.0.0,cow:1.0.0,chicken:2.0.0,mouse:2.0.0,monkey:2.0.0,cattle:2.0.0,pig:2.0.0}]                       [--dir DIR]Upload files to cosmosid.optional arguments:  -h, --help            show this help message and exit  --file FILE, -f FILE                        file(s) for upload. Supported file types: fasta, fna, fasta.gz, fastq, fq, fastq.gz, bam, sra e.g. cosmosid upload                        -f /path/file1.fasta -f /path/file2.fn  --parent PARENT, -p PARENT                        cosmosid parent folder ID for upload  --type {metagenomics,amplicon-16s,amplicon-its}, -t {metagenomics,amplicon-16s,amplicon-its}                        Type of analysis for a file  -wf WORKFLOW, --workflow WORKFLOW                        To specify multiple workflows, define them coma separated without any additional symbols.For example: -wf                        amr_vir,taxa  --forward-primer FORWARD_PRIMER                        Only for 'ampliseq' workflow  --reverse-primer REVERSE_PRIMER                        Only for 'ampliseq' workflow  --amplicon-preset {v1_v3,v3_v4,v4}                        Only for 'ampliseq' workflowv1_v3:                        - forward_primer: AGAGTTTGATCCTGGCTCAG                        - reverse_primer: ATTACCGCGGCTGCTGG                        v3_v4:                        - forward_primer: CCTACGGGRSGCAGCA                        - reverse_primer: GACTACHVGGGTATCTAATCC                        v4:                        - forward_primer: GTGYCAGCMGCCGCGGTAA                        - reverse_primer: GGACTACHVGGGTWTCTAAT  --host-name {human:2.0.0,human:1.0.0,dog:2.0.0,domestic_cat:2.0.0,cow:1.0.0,chicken:2.0.0,mouse:2.0.0,monkey:2.0.0,cattle:2.0.0,pig:2.0.0}                        Name for host removal.                        *Available only for type `metagenomics`                        human:2.0.0 - Human 2.0.0 (GCF_009914755.1_T2T-CHM13v2.0)                        human:1.0.0 - Human 1.0.0 (GRCh38_p6)                        dog:2.0.0 - Dog (GCF_014441545.1_ROS_Cfam_1.0)                        domestic_cat:2.0.0 - Domestic Cat (GCF_018350175.1_F.catus_Fca126_mat1.0)                        cow:1.0.0 - Cow (GCF_002263795l_1_ARS-UCD1_2)                        chicken:2.0.0 - Chicken (GCF_016699485.2_bGalGal1.mat.broiler.GRCg7b)                        mouse:2.0.0 - Mouse (GCF_000001635.27_GRCm39)                        monkey:2.0.0 - Monkey (GCF_003339765.1_Mmul_10)                        cattle:2.0.0 - Cattle (GCF002263795.2 - ARS-UCD1.3)                        pig:2.0.0 - Pig (GCF_000003025.6_Sscrofa11.1)  --dir DIR, -d DIR                        directory with files for upload e.g. cosmosid upload -d /path/my_dir```To upload sample file to CosmosID run `cosmosid` command with `upload` subcommand. By default samples will be uploadedinto root folder. To upload sample into specific *existing* folder you must use id of the folder as parameter.The CosmosID-HUB CLI supports uploading multiple Single-Read and Paired-End samples. For Paired-End samples, the CLIautomatically parse and merge samples in pairs if the samples follow the naming conventions like: xxx_R1.fastq andxxx_R2.fastq OR xxx_R1_001.fastq and xxx_R2_001.fastq. Note: Paired-End samples require &quot;fastq&quot; formatTo upload all samples from folder run `cosmosid upload` command with path to folder specified by --dir/-d parameter&gt; Note: _This command respects Paired-End samples grouping with the same rules as for regular upload_&gt; Note: _The default workflow is `taxa`_, that is not allowed for amplicon samples, and should be overriden by `--workflow` argument.Running example:`cosmosid upload --type metagenomics -f /pathtofile/test1_R1.fastq` -f /pathtofile/test1_R2.fastq -f/pathtofile/test2.fasta```shell#to upload one sample file for Metagenomics analysiscosmosid upload --file &lt;path to file&gt; --type metagenomics#to upload sample file into specific folder for Amplicon 16s analysiscosmosid upload --file &lt;path to file-1&gt; --parent &lt;folder id&gt; --type amplicon-16s#to upload all files from foldercosmosid upload -d /home/user/samples/ --type metagenomics#to upload with host-removalcosmosid upload --file &lt;path to file&gt; --type metagenomics --host-name &lt;host name&gt;#to upload ampliseq-batchcosmosid upload --file &lt;path to file&gt; --type amplicon-16s --workflow ampliseq --amplicon-preset &lt;preset&gt;cosmosid upload --file &lt;path to file&gt; --type amplicon-16s --workflow ampliseq --forward-primer &lt;forward primer&gt; --reverse-primer &lt;reverse primer&gt;```&gt; Note: uploading of a big file takes time, please be patient&gt; Available host names: human:2.0.0, human:1.0.0, dog:2.0.0, domestic_cat:2.0.0, cow:1.0.0, chicken:2.0.0, mouse:2.0.0, monkey:2.0.0, cattle:2.0.0, pig:2.0.0Once file has been uploaded to CosmosID the analyzing process will automatically begin.You can check the status of metagenomics analysis on the page [CosmosID Samples](https://app.cosmosid.com/samples).Amplicon analysis results available only from CosmosID-HUB CLI for now.### Retrieving Analysis ResultsAnalysis results can be retrieved from CosmosID by useing run id or file id. The latest run analysis results will beretrieved when file id used.To retrieve analysis results for a specified run in CosmosID simply run `cosmosid` command with `analysis` subcommand.```shell$ cosmosid analysis --helpusage: cosmosid analysis [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width &lt;integer&gt;]                         [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] [--id ID] [--run_id RUN_ID]                         [--order {database,id,strains,strains_filtered,status}] [--up]Show Analysis for a given file.optional arguments:  -h, --help            show this help message and exit  --id ID, -i ID                        ID of a file  --run_id RUN_ID, -r RUN_ID                        ID of a sample run  --order {database,id,strains,strains_filtered,status}, -o {database,id,strains,strains_filtered,status}                        field for ordering  --up                  order directionoutput formatters:  output formatter options  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}                        the output format, defaults to table  -c COLUMN, --column COLUMN                        specify the column(s) to include, can be repeated to show multiple columns  --sort-column SORT_COLUMN                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated  --sort-ascending      sort the column(s) in ascending order  --sort-descending     sort the column(s) in descending orderCSV Formatter:  --quote {all,minimal,none,nonnumeric}                        when to include quotes, defaults to nonnumericjson formatter:  --noindent            whether to disable indenting the JSONtable formatter:  --max-width &lt;integer&gt;                        Maximum display width, &lt;1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable  --print-empty         Print empty table if there is no data to show.```For example:```shell#to get list of analysis for the latest run of filecosmosid analysis --id=&lt;file ID&gt;#to get list of analysis for a given run idcosmosid analysis --run_id=&lt;run ID&gt;#to get ordered list of analysis for a given file id simply use ordering argument with field name with/without order directioncosmosid analysis --id=&lt;file ID&gt; --order created --up```&gt; Note: There is no analysis results for Amplicon 16S and Amplicon ITS sample. Use report generation instead of getting&gt; list of analysis for Amplicon 16S and Amplicon ITS.### Generate Analysis Report ArchiveThe CosmosID-HUB CLI supports retrieving the archive of analysis reports from CosmosID for a given `File ID` with agiven `Run ID` and saving the archive to a given file.To retrieve an analysis report archive with TSV files run the `cosmosid` command with `reports` subcommand.```shell$ cosmosid reports --helpusage: cosmosid reports [-h] --id ID [--output OUTPUT | --dir DIR]Get analysis reports TSVoptional arguments:  -h, --help            show this help message and exit  --id ID, -i ID                        ID of cosmosid sample.  --output OUTPUT, -o OUTPUT                        output file name. Must have .zip extension. Default: is equivalent to cosmosid file name.  --dir DIR, -d DIR                        Output directory for a file. Default: is current directory.```For example:```shell# to create analysis report archive for the latest run of sample and save it in# a current directory with a name equivalent to file name in CosmosIDcosmosid reports --id=&lt;file ID&gt;# to create analysis report archive for the given run of sample and save it in# a current directory with a name equivalent to file name in CosmosIDcosmosid reports --id=&lt;file ID&gt; --run_id=&lt;run ID&gt;# to create analysis report archive for the given run of sample and save it# in a given directorycosmosid reports --id=&lt;file ID&gt; --run_id=&lt;run ID&gt; --dir ~/cosmosid/reports# to create analysis report archive for the given run of sample and save it# into a given local filecosmosid reports --id=&lt;file ID&gt; --output /tmp/analysis_report.zip```### Retrieving Artifacts ResultsArtifacts results can be retrieved from CosmosID by using run id.To retrieve artifacts results for a specified run in CosmosID simply run `cosmosid` command with `artifacts` subcommand.```shell$ cosmosid artifacts --helpusage: cosmosid artifacts [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width &lt;integer&gt;]                          [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] --run_id RUN_ID [--type {fastqc-zip}]                          [--url] [--output OUTPUT] [--dir DIR]Show Artifacts for a given file.optional arguments:  -h, --help            show this help message and exit  --run_id RUN_ID, -r RUN_ID                        ID of a sample run  --type {fastqc-zip}, -t {fastqc-zip}                        Artifact type to download  --url                 show download url  --output OUTPUT, -o OUTPUT                        output file name. Must have .zip extension. Default: is equivalent to cosmosid file name.  --dir DIR, -d DIR                        Output directory for a file. Default: is current directory.output formatters:  output formatter options  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}                        the output format, defaults to table  -c COLUMN, --column COLUMN                        specify the column(s) to include, can be repeated to show multiple columns  --sort-column SORT_COLUMN                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated  --sort-ascending      sort the column(s) in ascending order  --sort-descending     sort the column(s) in descending orderCSV Formatter:  --quote {all,minimal,none,nonnumeric}                        when to include quotes, defaults to nonnumericjson formatter:  --noindent            whether to disable indenting the JSONtable formatter:  --max-width &lt;integer&gt;                        Maximum display width, &lt;1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable  --print-empty         Print empty table if there is no data to show.```For example:```shell#to get list of artifacts for a given run idcosmosid artifacts --run_id=&lt;run ID&gt;##to create artifacts archive for the given run id of sample and store it to given pathcosmosid artifacts --run_id=&lt;run ID&gt; --type=fastqc-zip --dir /home/user##to create artifacts archive for the given run id of sample and store it with given name in current dircosmosid artifacts --run_id=&lt;run ID&gt; --type=fastqc-zip --output artifacts_report.zip##to create artifacts archive for the given run id of sample and store it with given name and given dircosmosid artifacts --run_id=&lt;run ID&gt; --type=fastqc-zip --dir /home/user --output artifacts_report.zip#to get url to download the archivecosmosid artifacts --run_id=&lt;run ID&gt; --type=fastqc-zip --url```### Download Original SamplesOriginal samples can be downloaded from CosmosID by using samples_ids.To download samples for a specified samples_id in CosmosID simply run `cosmosids` command with `download` subcommand.&gt; Note: We recommend installing pycurl for the best experience with a sample download,&gt; see: http://pycurl.io/docs/latest/index.html#installation```shell$ cosmosid download --helpusage: cosmosid download [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width &lt;integer&gt;]                         [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] [--samples_ids SAMPLES_IDS]                         [--input-file INPUT_FILE] [--dir DIR] [--no-display] [--concurrent-downloads CONCURRENT_DOWNLOADS]Download Samples for a given samples ids.optional arguments:  -h, --help            show this help message and exit  --samples_ids SAMPLES_IDS, -s SAMPLES_IDS                        Comma separated list of samples uuids  --input-file INPUT_FILE                        Path to file with samples' ids  --dir DIR, -d DIR                        Output directory for a file. Default: is current directory.  --no-display          Disable displaying loading process  --concurrent-downloads CONCURRENT_DOWNLOADS                        Limit concurrent files downloadsoutput formatters:  output formatter options  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}                        the output format, defaults to table  -c COLUMN, --column COLUMN                        specify the column(s) to include, can be repeated to show multiple columns  --sort-column SORT_COLUMN                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated  --sort-ascending      sort the column(s) in ascending order  --sort-descending     sort the column(s) in descending orderCSV Formatter:  --quote {all,minimal,none,nonnumeric}                        when to include quotes, defaults to nonnumericjson formatter:  --noindent            whether to disable indenting the JSONtable formatter:  --max-width &lt;integer&gt;                        Maximum display width, &lt;1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable  --print-empty         Print empty table if there is no data to show.```For example:```shell#to download the original samples and save them in the current dircosmosid download --samples_ids=&lt;sample_id&gt;#to download the originals samples and save them in the current dircosmosid download --samples_ids=&lt;sample_id&gt;,&lt;sample_id&gt; #separated by comma &quot;,&quot;#to download the originals samples and store them in the given pathcosmosid download --samples_ids=&lt;sample_id&gt;,&lt;sample_id&gt; --dir=&lt;path_to_directory&gt;#to download the originals samples without displaying download progresscosmosid download --samples_ids=&lt;samples_id&gt;,&lt;sample_id&gt; --no-display#to download the original samples with specified quantity of concurrent files downloadscosmosid download --samples_ids=&lt;sample_id&gt;,&lt;sample_id&gt; --concurrent-downloads=&lt;quantity&gt;#to download the original samples using file with their idscosmosid download --input-file=&lt;path-to-file&gt;```&gt; Note: You can specify chunk size by CHUNK_SIZE environment variable### Comparative analysisIt's possible to view list of comparative analyses and download them.#### List commands```shell#print list of comparatives generated using metadata &amp; cohorts menucosmosid comparatives --helpcosmosid comparatives --helpusage: cosmosid comparatives [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width &lt;integer&gt;]                             [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending]List of comparativesoptional arguments:  -h, --help            show this help message and exitoutput formatters:  output formatter options  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}                        the output format, defaults to table  -c COLUMN, --column COLUMN                        specify the column(s) to include, can be repeated to show multiple columns  --sort-column SORT_COLUMN                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated  --sort-ascending      sort the column(s) in ascending order  --sort-descending     sort the column(s) in descending orderCSV Formatter:  --quote {all,minimal,none,nonnumeric}                        when to include quotes, defaults to nonnumericjson formatter:  --noindent            whether to disable indenting the JSONtable formatter:  --max-width &lt;integer&gt;                        Maximum display width, &lt;1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable  --print-empty         Print empty table if there is no data to show.```Print list of comparatives generated using the comparative analysis menu:```shell$ cosmosid comparative analyses --helpusage: cosmosid comparative analyses [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent]                                     [--max-width &lt;integer&gt;] [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending]                                     [--comparative-id COMPARATIVE_ID]List of all comparative analyses outside comparatives (if there are no any comparative ids)optional arguments:  -h, --help            show this help message and exit  --comparative-id COMPARATIVE_ID                        Comparatives' idsoutput formatters:  output formatter options  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}                        the output format, defaults to table  -c COLUMN, --column COLUMN                        specify the column(s) to include, can be repeated to show multiple columns  --sort-column SORT_COLUMN                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated  --sort-ascending      sort the column(s) in ascending order  --sort-descending     sort the column(s) in descending orderCSV Formatter:  --quote {all,minimal,none,nonnumeric}                        when to include quotes, defaults to nonnumericjson formatter:  --noindent            whether to disable indenting the JSONtable formatter:  --max-width &lt;integer&gt;                        Maximum display width, &lt;1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable  --print-empty         Print empty table if there is no data to show.```Example: print list of child comparatives generated under a parent comparative using metadata &amp; cohorts menu```shell$ cosmosid comparative analyses --comparative-id=&lt;comparative_id&gt;```#### Export commandsExport comparative analyses without log scale```shell$ cosmosid comparative analyses export --helpusage: cosmosid comparative analyses export [-h] --id ID [--tax-level {kingdom,order,phylum,class,family,genus,species,strain}] [--log-scale]                                            [--concurrent-downloads CONCURRENT_DOWNLOADS] [--dir DIR]Download results of comparative analysesoptional arguments:  -h, --help            show this help message and exit  --id ID       IDs of comparative analyses  --tax-level {kingdom,order,phylum,class,family,genus,species,strain}                        Taxonomy  --log-scale           Includes results with logscale  --concurrent-downloads CONCURRENT_DOWNLOADS                        Limit concurrent files downloads  --dir DIR, -d DIR                        Output directory for a file. Default: is current directory.```Example export comparative analyses with specified taxonomy level ('species' by default):```shell$ cosmosid comparative analyses export --id=&lt;analysis_id&gt; --tax-level=class --tax-level=genus```</longdescription>
</pkgmetadata>