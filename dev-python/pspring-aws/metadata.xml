<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pspring-awsThis framework is member of pspring based family of frameworks. It provides a means to access aws resources with minimal code. `boto3` library is used internally for http requests.All the default variables are listed in defaultvars.pyAnnotations / Decorators that come along with this framework are listed below* `@SecretValue(name=&quot;&quot;,region=&quot;&quot;,column=&quot;&quot;,columns=[])`  This is a class decorator can be used to retrieve value of secret in AWS secrets manager. We could also specify a list of columns or a single column name from the secret response to be retrived. A method named &quot;getSecretValue&quot; will be available on the class.  * `@DynamoDBTable(tableName=&quot;&quot;,primaryKey=&quot;&quot;,sortKey=&quot;&quot;,ttlColumnName=&quot;&quot;,ttl=&quot;&quot;)`  This is a class decorator which can be tagged with a dynamodb table. Once tagged with this decorator, the class will have implementations of `get` and `put` methods.  `get(self,primaryKey,sortKey=&quot;&quot;,columns=&quot;&quot;,column=&quot;&quot;)` method can be used to retrive only specific columns  `put(self,data)` can be used to insert data* `@LambdaHandler(type=&quot;lambdaproxy&quot;)`  This is a class decorator which provides below functionalities. You should implement &quot;handler&quot; method which will be enhanced  1) debug,info,warn,error - This will log a message will required tracking fields like requestId etc.  2) handle cold start requests with requestId = &quot;COLD_START_WARMER&quot;  3) addToLogger method can be used to add a field to all logging messages.  4) returns a 200 response along with the dictionary returned from the &quot;handler&quot; method as json.  5) handles all exceptions and returns gracefully a 500 Internal server error.Below exceptions are available from this framework- LambdaException- NotFoundException- UnAuthorizedException- InternalServerException- CreatedException- RedirectException* `RealTimeSecretsMgrConfigProvider`  This along with https://github.com/vasudevan-palani/appsync-client.git works as a real time secrets manager ( what this means is, you will get notified about the changes to secrets mngr's value as a push event )  ```python    from pspring import Configuration    config = Configuration.getConfig(__name__)    Configuration.initializer([      RealTimeSecretsMgrConfigProvider(secretId=&quot;mysecretId&quot;,region=&quot;us-east-1&quot;)    ])  ```* `SecretsMgrConfigProvider`  ConfigurationProvider for secrets manager in aws to work alongside pspring.Configuration  ```python      from pspring import Configuration      config = Configuration.getConfig(__name__)      Configuration.initializer([        SecretsMgrConfigProvider(secretId=&quot;mysecretId&quot;,region=&quot;us-east-1&quot;)      ])    ```* `SecretsManager`  Utility class to interact with aws secrets manager encapsulating the boiler plate code  ```python    from pspringaws import SecretsManager    secretsmngr = SecretsManager(secretId=&quot;mysecretId&quot;)    secretsmngr.getSecretValue()  ```* `DynamoDBTable`  Utility class to interact with aws dynamodb encapsulating the boiler plate code  ```python    from pspringaws import DynamoDBTable    secretsmngr = DynamoDBTable(tableName=&quot;mytable&quot;,primaryKey=&quot;primaryKey&quot;,sortKey=&quot;sortKey&quot;)    item = secretsmngr.get(&quot;primaryKeyValue&quot;)    item = secretsmngr.put(primaryKeyValue,item)  ```Example:```pythonfrom pspring import *from pspringaws import *@LambdaHandler()class MyHandler():    @Autowired()    def __init__(self,customerbackend:CustomerBackend, cache:DataCache):        self.customerbackend = customerbackend        self.cache = cache    def handler(self,event,context):      return self.customerbackend(...)context.initialize()newhandler = MyHandler()def handler(event,context):    return newhandler.handler(event,context)``` To do: * Support Lambda integration types</longdescription>
</pkgmetadata>