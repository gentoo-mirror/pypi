<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># immudb-py [![License](https://img.shields.io/github/license/codenotary/immudb4j)](LICENSE)[![CI](https://github.com/codenotary/immudb-py/actions/workflows/ci.yml/badge.svg)](https://github.com/codenotary/immudb-py/actions/workflows/ci.yml)[![Coverage Status](https://coveralls.io/repos/github/codenotary/immudb-py/badge.svg?branch=master)](https://coveralls.io/github/codenotary/immudb-py?branch=master)[![Slack](https://img.shields.io/badge/join%20slack-%23immutability-brightgreen.svg)](https://slack.vchain.us/)[![Discuss at immudb@googlegroups.com](https://img.shields.io/badge/discuss-immudb%40googlegroups.com-blue.svg)](https://groups.google.com/group/immudb)## Official [immudb] client for Python.### Try it on the immudb Playground![![screenshot](playground.png)](https://play.codenotary.com)[immudb]: https://immudb.io## Contents- [Introduction](#introduction)- [Prerequisites](#prerequisites)- [Installation](#installation)- [Supported Versions](#supported-versions)- [Quickstart](#quickstart)- [Step by step guide](#step-by-step-guide)- [Creating a Client](#creating-a-client)## Introductionimmu-py implements a [grpc] immudb client. A minimalist API is exposed for applications while cryptographicverifications and state update protocol implementation are fully implemented by this client.Latest validated immudb state may be kept in the local filesystem when using default `rootService`,please read [immudb research paper] for details of how immutability is ensured by [immudb].[grpc]: https://grpc.io/[immudb research paper]: https://immudb.io/[immudb]: https://immudb.io/## Prerequisitesimmu-py assumes there is an existing instance of the immudb server up and running. Running `immudb` is quite simple, please refer to thefollowing link for downloading and running it: https://immudb.io/docs/quickstart.htmlimmudb-py requires python version 3.6 or greater.If you are using 3.6, you'll need dataclasses package; on 3.7+,dataclasses is part of the python distribution.## InstallationYou can install latest version cloning this repository, and then use the make command to installprerequisites and the package itself:```shell    make init    make install```Or, you can install latest stable version using pip:```shell    pip3 install immudb-py```Then, in you code, import the client library as as follows:```python    from immudb import ImmudbClient```*Note*: immudb-py need `grpcio` module from google. On Alpine linux, you need these packages in order to correctly build (and install) grpcio: - `linux-headers` - `python3-dev` - `g++`## Supported Versionsimmu-py supports the [latest immudb release].[latest immudb release]: https://github.com/codenotary/immudb/releases/tag/v0.9.0## Quickstart[Hello Immutable World!] example can be found in `immudb-client-examples` repo.[Hello Immutable World!]: https://github.com/codenotary/immudb-client-examples/tree/master/python## Step by step guide### Creating a ClientThe following code snippets shows how to create a client.Using default configuration:```python    client = ImmudbClient()```Setting `immudb` url and port:```python    client = ImmudbClient(&quot;mycustomurl:someport&quot;)    client = ImmudbClient(&quot;10.105.20.32:8899&quot;)```### User sessionsUse `login` and `logout` methods to initiate and terminate user sessions:```python    client.login(&quot;usr1&quot;, &quot;pwd1&quot;);    // Interact with immudb using logged user    client.logout();```### EncodingPlease note that, in order to provide maximum flexibility, all functions accept byte arrays as parameters.Therefore, unicode strings must be properly encoded.It is possible to store structured objects, but they must be serialized (e.g., with pickle or json).### Creating a databaseCreating a new database is quite simple:```python    client.createDatabase(b&quot;db1&quot;);```### Setting the active databaseSpecify the active database with:```python    client.useDatabase(b&quot;db1&quot;);```If not specified, the default databased used is &quot;defaultdb&quot;.### Traditional read and writeimmudb provides read and write operations that behave as a traditionalkey-value store i.e. no cryptographic verification is done. This operationsmay be used when validations can be post-poned:```python    client.set(b&quot;k123&quot;, b&quot;value123&quot;);    result = client.get(b&quot;k123&quot;);```### Verified read and writeimmudb provides built-in cryptographic verification for any entry. The clientimplements the mathematical validations while the application uses as a traditionalread or write operation:```python    try:        client.verifiedSet(b&quot;k123&quot;, b&quot;v123&quot;);        results = client.verifiedGet(b&quot;k123&quot;);    Except VerificationException as e:        # Do something```### Multi-key read and writeTransactional multi-key read and write operations are supported by immudb and immudb-py.Atomic multi-key write (all entries are persisted or none):```python    normal_dictionary = {b&quot;key1&quot;: b&quot;value1&quot;, b&quot;key2&quot;: b&quot;value2&quot;}    client.setAll(normal_dictionary);```Atomic multi-key read (all entries are retrieved or none):```python    normal_dictionary = {b&quot;key1&quot;: b&quot;value1&quot;, b&quot;key2&quot;: b&quot;value2&quot;}    results_dictionary = client.getAll(normal_dictionary.keys())    # Or manually    client.get([b&quot;key1&quot;, b&quot;key2&quot;])```## User managementUsers can be added and granted access to databases.### Adding a userThe ```createUser``` functions create a new users and grants the specified permission to a database.```pythonuser='newuser'password='Pw1:pasdfoiu'permission=immudb.constants.PERMISSION_RWdatabase='defaultdb'client.createUser(user, password, permission, database)```The database must exists at the time the user is created. The password must be between 8 and 32 characters in length, and must have at least one upper case letter, a symbol and a digit.Permission are defined in immudb.constants and are:- `PERMISSION_SYS_ADMIN`- `PERMISSION_ADMIN`- `PERMISSION_NONE`- `PERMISSION_R`- `PERMISSION_RW`### Changin passwordThe user must must provide both old and new password:```pythonnewPassword=&quot;pW1:a0s98d7gfy&quot;resp=client.changePassword(user, newPassword, oldPassword)```It is applied the same password policy of user creation.### User listTo get the list of user created on immudb, simply call ```listUsers```:```pythonresp=client.listUsers()print(users.userlist.users)```### Closing the clientTo programatically close the connection with immudb server use the `shutdown` operation:```python    client.shutdown();```Note: after shutdown, a new client needs to be created to establish a new connection.## State persistanceAn important immudb feature is the ability for a client to check every transaction for tampering. In order to be able to do that, it is necessary to persist client state (i.e., save it to disk) so that if some tampering on the server happens between two runs, it is immediatly detected.A `RootService` implements just that: it stores immudb client after every transaction, in order to be able touse it afterward to check the server correctness.### Using the Persistent Root ServiceThe default RootService, for simplicity, commits the state to RAM, and so it is unsuitable for real time safeapplication. To have persistance, the application must instantiate a `PersistentRootService` object, which storesits state to disk.Let's see a simple example that uses state persistance:```pythonfrom immudb.client import ImmudbClient, PersistentRootServiceclient=ImmudbClient(rs=PersistentRootService())client.login(username=&quot;immudb&quot;, password=&quot;immudb&quot;)client.verifiedTxById(42)client.verifiedGet(b&quot;example&quot;)```In this example, the Root Service is saved to the disk after every verified transaction. As you can see, it is veryeasy to use. Just create and use the PersistentRootService object in the client initialization.### Process and threadsPlease keep in mind that the implementation is not thread/process safe. If you are using a multi-process application,it is advisable to use a different state file for every instance: just pass the filename as argument to the PersistentRootService constructor:```pythonclient = ImmudbClient(rs=PersistentRootService(&quot;rootfilename&quot;))```Default rootfile is &quot;~/.immudbRoot&quot;If needed/wanted, it is also easy to extend the default implementation adding synchronization primitives to the get/set methods.In this way, more than one immudb client can share the same PersistentRootService instance without interering each other.## Cryptographic state signingTo increase safety, it is possible to generate a private key and use it to sign every verification response. Clients canthen use the corresponding public key to check for response correctness.### Key generationYou can use `openssl` to create a private key, and then extract the public key:```shopenssl ecparam -name prime256v1 -genkey -noout -out private_signing_key.pemopenssl ec -in private_signing_key.pem -pubout -out public_signing_key.pem```### Key usage (server side)On immudb server, use `--signingKey private_signing_key.pem` to activate cryptographic signature.### Key usage (client/SDK side)On immudb python SDK, just pass the public key filename to the ImmudbClient constructor:```pythonclient=ImmudbClient(publicKeyFile=&quot;/certs/public_signing_key.pem&quot;)```Every transaction will be then automatically checked. An exception is thrown if the cryptographic check fails.## ContributingWe welcome contributions. Feel free to join the team!To report bugs or get help, use [GitHub's issues].[GitHub's issues]: https://github.com/codenotary/immudb-py/issues</longdescription>
</pkgmetadata>