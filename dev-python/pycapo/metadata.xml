<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyCAPO is an implementation of SSA CAPO (CASA, Archive, and Pipeline Options)in Python. It is shipped as a library with a simple API and a command lineutility that calls the library and produces results suitable for use in a shellscript, enabling us to make quick CAPO enabled scripts.CAPO is a configuration system that reads values from multiple property files,these files are delimited by the combination of two options to it, CAPO_PATHand CAPO_PROFILE:CAPO_PATH is a colon delimited list of directories to search for property files,like '/home/casa/capo:/home/ssa/capo:/etc/capo'. The same property can be readfrom multiple files, and in this case the later property replaces the earlierproperty. CAPO_PATH can be given as an argument to the library or CLI app, orPyCAPO will look for a CAPO_PATH environment variable. If those two are missingPyCAPO defaults to '/home/casa/capo:/home/ssa/capo:$HOME/.capo'. PyCAPO skipsover missing or unreadable property files (this is intentional).CAPO_PROFILE describes the profile PyCAPO looks for, e.g. 'test', 'staging','production', and PyCAPO expects the property files on the CAPO_PATH it looksfor to be named $profile.properties, e.g., /home/casa/capo/test.properties.CAPO_PROFILE can be an argument to the library or CLI app, or PyCAPO will lookfor a CAPO_PROFILE environment variable. If both of those are missing PyCAPOwill complain and die (this is also intentional).CAPO isn't yet robust against things like profiles with spaces in their name,and it has only been tested under Linux and MacOS.0.2.1 ... dropped support for Python 3.3, added support for Python 3.70.1.1 ... minor tweaks to prepare for pushing to pypi, no functional modifications0.1.0 ... initial version</longdescription>
</pkgmetadata>