<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># prometheus-http-sdThis is a[Prometheus HTTP SD](https://prometheus.io/docs/prometheus/latest/http_sd/)framework.[![Test](https://github.com/laixintao/prometheus-http-sd/actions/workflows/test.yaml/badge.svg)](https://github.com/laixintao/prometheus-http-sd/actions/workflows/test.yaml)&lt;!-- vim-markdown-toc GFM --&gt;- [Features](#features)- [Installation](#installation)- [Usage](#usage)  - [The Python Target Generator](#the-python-target-generator)  - [Manage prometheus-http-sd by systemd](#manage-prometheus-http-sd-by-systemd)  - [Admin Page](#admin-page)  - [Serve under a different root path](#serve-under-a-different-root-path)- [Define you targets](#define-you-targets)  - [Your target generator](#your-target-generator)  - [The Target Path](#the-target-path)  - [Overwriting `job_name` labels](#overwriting-job_name-labels)  - [Check and Validate your Targets](#check-and-validate-your-targets)  - [Script Dependencies](#script-dependencies)  - [Target Generator Timeout Time](#target-generator-timeout-time)- [Update Your Scripts](#update-your-scripts)- [Best Practice](#best-practice)&lt;!-- vim-markdown-toc --&gt;## Features- Support static targets from Json file;- Support static targets from Yaml file;- Support generating target list using Python script;- Support `check` command, to testing the generated target is as expected, and  counting the targets;- You can monitoring your target generator via `/metrics`, see  [metrics](./docs/metrics.txt);- Admin page to list all target paths;- Auto reload when generator or targets changed;- Support managing targets in a hierarchy way;## Installation```shellpip install prometheus-http-sd```## UsageFirst, you need a directory, everything in this directory will be used togenerate targets for prometheus-http-sd.```shell$ mkdir targets```In this directory, every file is called a target &quot;generator&quot;:- Filename that ending with `.json` will be exposed directly- Filename that ending with `.yaml` will be exposed directly- Filename that ending with `.py` must include a `generate_targets()` function,  the function will be run, and it must return a `TargetList` (Type helper in  `prometheus_http_sd.targets.`)- Filename that starts with `_` will be ignored, so you can have some python  utils there, for e.g. `_utils/__init__.py` that you can import in you  `generate_targets()`- Filename that starts with `.` (hidden file in Linux) will also be ignoredLet write our first target generator by yaml, put this into your`targets/first_target.yaml`:```yaml---- targets:    - &quot;10.1.1.9:9100&quot;    - &quot;10.1.1.10:9100&quot;  labels:    job: node    datacenter: nyc    group: g1- targets:    - &quot;10.2.1.9:9100&quot;    - &quot;10.2.1.10:9100&quot;  labels:    job: node    datacenter: sg    group: g2```If you use json, the data structure is the same, just in Json format.### The Python Target GeneratorLet's put another generator using Python:Put this into your `targets/by_python.py`:```pythondef generate_targets(**extra_parameters):  return {&quot;targets&quot;: &quot;10.1.1.22:2379&quot;, &quot;labels&quot;: {&quot;app&quot;: &quot;etcd&quot;}}```Then you can run `prometheus-http-sd serve -h 0.0.0.0 -p 8080 /tmp/targets`,prometheus-http-sd will start to expose targets at: http://0.0.0.0:8080/targetsThe `-h` and `-p` is optional, defaults to `127.0.0.1` and `8080`.```shell$ prometheus-http-sd serve /tmp/targets # replace this to your target path[2022-07-24 00:52:03,896] {wasyncore.py:486} INFO - Serving on http://127.0.0.1:8080```If you run `curl http://127.0.0.1:8080/targets` you will get:```shell{&quot;targets&quot;: &quot;10.1.1.22:2379&quot;, &quot;labels&quot;: {&quot;app&quot;: &quot;etcd&quot;}}```Finally, you can tell your Prometheus to find targets underhttp://127.0.0.1:8080/targets, by adding this into your Prometheus config:```yamlscrape_configs:  - job_name: &quot;etcd&quot;    http_sd_config:      url: http://127.0.0.1:8080/targets/```The Python target generator also support URL query params. You can check theparams in your `generate_targets()` function.For example:```pythondef generate_targets(**params):  cluster = params.get(&quot;cluster&quot;)  return {&quot;targets&quot;: &quot;10.1.1.22:2379&quot;, &quot;labels&quot;: {&quot;app&quot;: &quot;etcd&quot;, &quot;cluster&quot;: cluster}}```Then `curl http://127.0.0.1:8080/targets?cluster=us1` you will get:```shell{&quot;targets&quot;: &quot;10.1.1.22:2379&quot;, &quot;labels&quot;: {&quot;app&quot;: &quot;etcd&quot;, &quot;cluster&quot;: &quot;us1&quot;}}```### Manage prometheus-http-sd by systemdJust put this file under `/lib/systemd/system/http-sd.service` (remember tochange your installation path and root_dir path):```# /lib/systemd/system/http-sd.service[Unit]Description=Prometheus HTTP SD ServiceWants=network-online.targetAfter=network-online.target[Service]Type=simpleExecStart=/opt/httpsd_env/bin/prometheus-http-sd serve \    -h 0.0.0.0                                         \    -p 8080                                            \    /opt/httpsd_targetsRestart=alwaysRestartSec=90[Install]WantedBy=multi-user.target```### Admin PageYou can open the root path, `http://127.0.0.1:8080/` in this example, and youwill see all of the available paths list in the admin page.![](./docs/admin1.png)### Serve under a different root pathIf you put prometheus-http-sd behind a reverse proxy like Nginx, like this:```location /http_sd/ {      proxy_pass http://prometheus_http_sd;}```Then you need to tell prometheus_http_sd to serve all HTTP requests under thispath, by using the `--url_prefix /http_sd` cli option, (or `-r /http_sd` forshort).## Define your targets### Your target generatorPlease see the [Usage](#usage) to know how to define your generator.### The Target Pathprometheus-http-sd support sub-pathes.For example, if we use `prometheus-http-sd serve gateway`, and the `gateway`directory's structure is as follows:```shellgateway├── nginx│   ├── edge.py│   └── targets.json└── targets.json```Then:- `/targets/gateway` will return the targets from:  - `gateway/nginx/edge.py`  - `gateway/nginx/targets.json`  - `gateway/targets.json`- `/targets/gateway/nginx` will return the targets from:  - `gateway/nginx/edge.py`  - `gateway/nginx/targets.json`This is very useful when you use vertical scaling. Say you have 5 Prometheusinstances, and you want each one of them scrape for different targets, then youcan use the sub-path feature of prometheus-http-sd.For example, in one Prometheus's scrape config:```yamlscrape_configs:  - job_name: &quot;nginx&quot;    http_sd_config:      url: http://prometheus-http-sd:8080/targets/nginx  - job_name: &quot;etcd&quot;    http_sd_config:      url: http://prometheus-http-sd:8080/targets/etcd```And in another one:```yamlscrape_configs:  - job_name: &quot;nginx&quot;    http_sd_config:      url: http://prometheus-http-sd:8080/targets/database  - job_name: &quot;etcd&quot;    http_sd_config:      url: http://prometheus-http-sd:8080/targets/application```### Overwriting `job_name` labelsYou may want to put all of etcd targets in one generator, including port 2379for etcd metrics and 9100 for node_exporter metrics of the etcd server. But the`job_name` setting was based on per URL.The trick is that, you can overwrite the `job` label in the target labels, likethis:```yaml---- targets:    - &quot;10.1.1.9:9100&quot;  labels:    job: node    datacenter: nyc    group: g1- targets:    - &quot;10.1.1.9:2379&quot;  labels:    job: etcd    datacenter: nyc    group: g1```### Check and Validate your TargetsYou can use `prometheus-http-sd check` command to test your targets dir. It willrun all of you generators, validate the targets, and print the targets countthat each generator generates.```shell$ prometheus-http-sd check test/test_generator/root[2022-08-06 00:50:11,095] {validate.py:16} INFO - Run generator test/test_generator/root/json/target.json, took 0.0011398792266845703s, generated 1 targets.[2022-08-06 00:50:11,100] {validate.py:16} INFO - Run generator test/test_generator/root/yaml/target.yaml, took 0.0043718814849853516s, generated 2 targets.[2022-08-06 00:50:11,100] {validate.py:22} INFO - Done! Generated {total_targets} in total.```It's a good idea to use `prometheus-http-sd check` in your CI system to validateyour targets generator scripts and target files.For Python script, `prometheus-http-sd check` command will run `generate_targets`in each script, without any params. However, you can overwrite the `check` logicby providing a function called `test_generate_targets()`(without any functionargs), then `check` will run `test_generate_targets` instead. (So you can call`generate_targets(foo=&quot;bar&quot;)` to set the test logic of your own.### Script DependenciesIf you want your scripts to use some other python library, just install theminto the **same virtualenv** that you install prometheus-http-sd, so thatprometheus-http-sd can import them.### Target Generator Timeout TimeTo prevent potential server overload caused by intensivePython scripts invoked by the Prometheus client,we created a generator decorator that spawns a thread for each unique function call.Our design includes a 60-second wait period for each generated thread.If the thread fails to complete within this timeframe, the decorator raisesa `TimeoutException` to notify the user that the target cannot be resolved.It is important to note that the thread will continue running despite the raised exception.The overall process appears as follows:```First Function call (timeout)└─┘Second Function call (timeout)             └─┘Third Function call(get result)                       └─┘Function Operating   Cache time└───────────────────┴───────────┘```The thread continues running until the target function returns a result,which is then cached. Subsequent calls can retrieve the cached result.This is an example if you want to use the decorator in your target function:```pythonfrom prometheus_http_sd.decroator import TimeoutDecorator@TimeoutDecorator(    timeout=60,                      # how long should we wait for the function    cache_time=1,                    # how long should we cache the result    name=&quot;target_generator&quot;,         # timeout decorator name in prometheus-sd metrics    garbage_collection_interval=5,   # the second to avoid collection too often    garbage_collection_count=100,    # garbage collection threshold)def generate_targets(**extra_parameters):  # some havy operation here.  return {&quot;targets&quot;: &quot;10.1.1.22:2379&quot;, &quot;labels&quot;: {&quot;app&quot;: &quot;etcd&quot;}}```## Update Your ScriptsIf you want to update your script file or target json file, just upload andoverwrite with your new version, it will take effect immediately after youmaking changes, **there is no need to restart** prometheus-http-sd,prometheus-http-sd will read the file (or reload the python script) every timeserving a request.It is worth noting that restarting is safe because if Prometheus failed to getthe target list via HTTP request, it won't update its current target list toempty, instead,[it will keep using the current list](https://prometheus.io/docs/prometheus/latest/http_sd/).&gt; Prometheus caches target lists. If an error occurs while fetching an updated&gt; targets list, Prometheus keeps using the current targets list.For the same reason, if there are 3 scripts under `/targets/mysystem` and onlyone failed for a request, prometheus-http-sd will return a HTTP 500 Error forthe whole request instead of returning the partial targets from the other twoscripts.Also for the same reason, if your script met any error, you should throw out`Exception` all the way to the top instead of catch it in your script and returna null `TargetList`, if you return a null `TargetList`, prometheus-http-sd willthink that your script run successfully and empty the target list as well.You can notice this error from stdout logs or `/metrics` fromprometheus-http-sd.## Best PracticeYou can use a git repository to manage your target generator.</longdescription>
</pkgmetadata>