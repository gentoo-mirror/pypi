<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># UtBot ExecutorUtil for python code execution and state serialization.## InstallationYou can install module from [PyPI](https://pypi.org/project/utbot-executor/):```bashpython -m pip install utbot-executor```## Usage### From console with socket listenerRun with your `&lt;hostname&gt;` and `&lt;port&gt;` for socket connection```bash$ python -m utbot_executor &lt;hostname&gt; &lt;port&gt; &lt;logfile&gt; [&lt;loglevel DEBUG | INFO | ERROR&gt;] &lt;coverage_hostname&gt; &lt;coverage_port&gt;```### Request format```json{  &quot;functionName&quot;: &quot;f&quot;,  &quot;functionModule&quot;: &quot;my_module.submod1&quot;,  &quot;imports&quot;: [&quot;sys&quot;, &quot;math&quot;, &quot;json&quot;],  &quot;syspaths&quot;: [&quot;/home/user/my_project/&quot;],  &quot;argumentsIds&quot;: [&quot;1&quot;, &quot;2&quot;],  &quot;kwargumentsIds&quot;: [&quot;4&quot;, &quot;5&quot;],  &quot;serializedMemory&quot;: &quot;string&quot;,  &quot;memoryMode&quot;: &quot;REDUCE&quot;,  &quot;filepath&quot;: [&quot;/home/user/my_project/my_module/submod1.py&quot;],  &quot;coverageId&quot;: &quot;1&quot;}```* `functionName` - name of the tested function* `functionModule` - name of the module of the tested function* `imports` - all modules which need to run function with current arguments* `syspaths` - all syspaths which need to import modules (usually it is a project root)* `argumentsIds` - list of argument's ids* `kwargumentsIds` - list of keyword argument's ids* `serializedMemory` - serialized memory throw `deep_serialization` algorithm* `memoryMode` - serialization mode (`PICKLE`, `REDUCE`)* `filepath` - path to the tested function's containing file* `coverageId` - special id witch will be used for sending information about covered lines### Response format:If execution is successful:```json{        &quot;status&quot;: &quot;success&quot;,        &quot;isException&quot;: false,        &quot;statements&quot;: [1, 2, 3],        &quot;missedStatements&quot;: [4, 5],        &quot;stateInit&quot;: &quot;string&quot;,        &quot;stateBefore&quot;: &quot;string&quot;,        &quot;stateAfter&quot;: &quot;string&quot;,        &quot;diffIds&quot;: [&quot;3&quot;, &quot;4&quot;],        &quot;argsIds&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;],        &quot;kwargs&quot;: [&quot;4&quot;, &quot;5&quot;, &quot;6&quot;],        &quot;resultId&quot;: &quot;7&quot;}```* `status` - always &quot;success&quot;* `isException` - boolean value, if it is `true`, execution ended with an exception* `statements` - list of the numbers of covered rows* `missedStatements` - list of numbers of uncovered rows* `stateInit` - serialized states from request* `stateBefore` - serialized states of arguments before execution* `stateAfter` - serialized states of arguments after execution* `diffIds` - ids of the objects which have been changed* `argsIds` - ids of the function's arguments* `kwargsIds` - ids of the function's keyword arguments* `resultId` - id of the returned valueor error format if there was exception in running algorith:```json{        &quot;status&quot;: &quot;fail&quot;,        &quot;exception&quot;: &quot;stacktrace&quot;}```* `status` - always &quot;fail&quot;* `exception` - string representation of the exception stack trace### Submodule `deep_serialization`JSON serializer and deserializer for python objects#### States memory json-format```json{  &quot;objects&quot;: {    &quot;id&quot;: {      &quot;id&quot;: &quot;1&quot;,      &quot;strategy&quot;: &quot;strategy name&quot;,      &quot;typeinfo&quot;: {        &quot;module&quot;: &quot;builtins&quot;,        &quot;kind&quot;: &quot;int&quot;      },      &quot;comparable&quot;: true,            // iff strategy is 'repr'      &quot;value&quot;: &quot;1&quot;,      // iff strategy is 'list' or 'dict'      &quot;items&quot;: [&quot;3&quot;, &quot;2&quot;],      // iff strategy = 'reduce'      &quot;constructor&quot;: &quot;mymod.A.__new__&quot;,      &quot;args&quot;: [&quot;mymod.A&quot;],      &quot;state&quot;: {&quot;a&quot;: &quot;4&quot;, &quot;b&quot;: &quot;5&quot;},      &quot;listitems&quot;: [&quot;7&quot;, &quot;8&quot;],      &quot;dictitems&quot;: {&quot;ka&quot;: &quot;10&quot;}    }  }}```## SourceGitHub [repository](https://github.com/tamarinvs19/utbot_executor)</longdescription>
</pkgmetadata>