<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Slice DB[![PyPI](https://img.shields.io/pypi/v/slice-db)](https://pypi.org/project/slice-db/)&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;doc/logo.png&quot;&gt;&lt;/p&gt;## OverviewSliceDB is a tool for capturing and restoring a subset of a PostgreSQL database.It also supports scrubbing sensive data.## Install### Pip```shpip3 install slice-db```### Docker```shdocker pull rivethealth/slicedb```## UsageFor all commands and options, see [Usage](doc/usage.md).## Basic exampleFirst, query a database to create a schema file.```shslicedb schema &gt; schema.yml```Second, dump a slice:```shslicedb dump --root public.example 'WHERE id IN (7, 56, 234)' --schema schema.yml &gt; slice.zip```Third, restore that slice into another database:```shslicedb restore &lt; slice.zip```For a complete working example, see [Example](doc/example.md).## ConnectionUse the[libpq environment variables](https://www.postgresql.org/docs/current/libpq-envars.html)to configure the connection.```shPGHOST=myhost slicedb schema &gt; slice.yml```## DumpSee [dump.yml](schema/dump.yml) for the JSONSchema.### Output formatsSliceDB can produce multiple formats:- **slice** - ZIP archive. This can be restored with `slicedb restore`.- **sql** - SQL file. This can be restored with `psql` or another client. If  restoring into existing schema, foreign keys must first be disabled, e.g.  `SET session_replication_role = replica`.### Output contentSchema can optionally be included. Restoring with schema requires an existingempty database.### SchemaThe `schema` command uses foreign keys to infer relationships between tables. Itis a suggested starting point.You may want to prune the slice by removing relationships, or expand the sliceby adding relationships that don't have explicit foreign keys.`slicedb schema-filter` can help modify the schema, or generic JSON tools like`jq`.### AlgorithmThe slicing process works as follows:1. Starting with the root table, query the physical IDs (ctid) of rows.2. Add the row IDs to the existing list.3. For new IDs, process each of the adjacent tables, using them as the current   root.Do this in parallel, using `pg_export_snapshot()` to guarantee a consistentsnapshot across workers.### PerformanceHundreds of thousands of rows can be exported in only a few minutes and severaldozen MBs of memory.## TransformationSee [transform.yml](schema/transform.yml) for the JSONSchema.Replacements are deterministic for a given pepper. By default, the pepper israndomly generated each run. You may specify it as `--pepper`. Note thatpossession of the pepper makes the data guessable.Transformation may operate on an existing slice (TODO), or happen during thedump.### ConfigurationTransforms are specified by:- `class`, the Python class- `config`, transform-specific options- `module`, defaults to `slice_db.transforms`The name given to the transform is appended to the global pepper.### Custom transformsTo create custom transforms, implement `slice_db.transform.Transform`, exposethe class on a module, and install the module so that is accessible by`slicedb`.### Built-in transformsThe `slice_db.transforms` package has many common transforms.See [transforms.md](doc/transforms.md) for the full list.## RestoreSliceDB can restore slices into existing databases. In practice, this shouldnormally be an empty existing database.### CyclesForeign keys may form a cycle only if at least one foreign key in the cycle isdeferrable.That foreign key will be deferred during restore.A restore may happen in a single transaction or not. Parallelism requiresmultiple transactions.## Not supported- Multiple databases- Databases other than PostgreSQL## DevelopingInstall: `make install`Format: `make format`### Publishing1. Update slice_db/version.py2. Commit `git add slice_db/version.py &amp;&amp; git commit -m &quot;Version &lt;version&gt;&quot;`3. Tag `git tag v&lt;version&gt;`4. Push `git push origin master --tags`5. Publish to PyPI: `make upload`</longdescription>
</pkgmetadata>