<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fastapi-router-controller[![Build](https://github.com/KiraPC/fastapi-router-controller/workflows/fastapi-router-controller/badge.svg)](https://github.com/KiraPC/fastapi-router-controller)[![PyPI version fury.io](https://badge.fury.io/py/fastapi-router-controller.svg)](https://pypi.python.org/pypi/fastapi-router-controller)#### A FastAPI utility to allow Controller Class usage## Installation: install the package```pip install fastapi-router-controller```## How to useHere we see a Fastapi CBV (class based view) applicationwith class wide Basic Auth dependencies.```pythonimport uvicornfrom pydantic import BaseModelfrom fastapi_router_controller import Controllerfrom fastapi import APIRouter, Depends, FastAPI, HTTPException, statusfrom fastapi.security import HTTPBasic, HTTPBasicCredentialsrouter = APIRouter()controller = Controller(router)security = HTTPBasic()def verify_auth(credentials: HTTPBasicCredentials = Depends(security)):    correct_username = credentials.username == &quot;john&quot;    correct_password = credentials.password == &quot;silver&quot;    if not (correct_username and correct_password):        raise HTTPException(            status_code=status.HTTP_401_UNAUTHORIZED,            detail=&quot;Incorrect auth&quot;,            headers={&quot;WWW-Authenticate&quot;: &quot;Basic&quot;},        )    return credentials.usernameclass Foo(BaseModel):    bar: str = &quot;wow&quot;async def amazing_fn():    return Foo(bar=&quot;amazing_variable&quot;)@controller.resource()class ExampleController:    # add class wide dependencies e.g. auth    dependencies = [Depends(verify_auth)]    # you can define in the Controller init some FastApi Dependency and them are automatically loaded in controller methods    def __init__(self, x: Foo = Depends(amazing_fn)):        self.x = x    @controller.route.get(        &quot;/some_api&quot;, summary=&quot;A sample description&quot;, response_model=Foo    )    def sample_api(self):        print(self.x.bar)  # -&gt; amazing_variable        return self.x# Load the controller to the main FastAPI appapp = FastAPI(    title=&quot;A sample application using fastapi_router_controller&quot;, version=&quot;0.1.0&quot;)app.include_router(ExampleController.router())uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=9090)```### ScreenshotAll you expect from Fastapi![Swagger UI](./swagger_ui.png?raw=true)Also the login dialog![Swagger UI Login](./swagger_ui_basic_auth.png?raw=true)## For some Example use-cases visit the example folder</longdescription>
</pkgmetadata>