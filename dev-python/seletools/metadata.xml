<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Selenium Tools![PyPI - Downloads](https://img.shields.io/pypi/dm/seletools)### About packageCurrent package is called **Selenium Tools** for a reason - it contains useful helpers that are not included into Selenium natively. Contributions are very welcome!### Installation&gt; pip install seletools### Drag &amp; DropThere is a known drag &amp; drop bug that reproduces in frameworks that use [webdriver](https://github.com/w3c/webdriver) to send commands to browser. This bug is a webdriver's issue, and it's unknown when it's going to be fixed (or if it's going to be fixed at all). Current solution uses JavaScript code to simulate drag &amp; drop action on web page. It works in most of the cases when it doesn't work in [Selenium](https://github.com/SeleniumHQ/selenium).You may find bug description and current workaround [here](https://medium.com/python-pandemonium/how-to-bypass-selenium-drag-drop-bug-in-python-e33704a15761).Thanks to [druska](https://gist.github.com/druska) for his [native js drag and drop helper](https://gist.github.com/druska/624501b7209a74040175).```from seletools.actions import drag_and_dropdriver = webdriver.Chrome()source = driver.find_element(By.CSS_SELECTOR, &quot;...&quot;)target = driver.find_element(By.CSS_SELECTOR, &quot;...&quot;)drag_and_drop(driver, source, target)```### ScrollThis one helps to scroll vertically to any element on page, even if it's covered by some other element (like navbar or footer). If there's such obstacle - simply add that covering element into scrolling function as `element2`.```from seletools.actions import scroll_to_top, scroll_to_bottomdriver = webdriver.Chrome()element1 = driver.find_element(By.CSS_SELECTOR, &quot;...&quot;)element2 = driver.find_element(By.CSS_SELECTOR, &quot;...&quot;)  #optional, used only if you have obastacle (like navbar on footer) on top of the element that you need to scroll toscroll_to_top(driver, element1, element2)# ORscroll_to_top(driver, element1)scroll_to_bottom(driver, element1, element2)# ORscroll_to_bottom(driver, element1)```### Getting webdriver's wait valuesSelenium 4 already supports that feature, but versions prior 4 (3.141.0-) doesn't.```# get implicit wait value onlyfrom seletools.waits import get_implicit_waitimplicit_wait = get_implicit_wait(driver)# OR get all waits (non only implicit one)from seletools.waits import Waitwaits = Waits(driver)implicit_wait = waits.implicitpage_load = waits.page_load scripts = waits.scripts```### Interaction with IndexedDBIt's possible to interact with IndexedDB database in browser via JavaScript. This interface helps get/update/insert data in existing databases and tables.__Important: it's necessary to have logging enabled for your webdriver instance, since there's no other way for Selenium to get data from IndexedDB than gather it from the console. Here's how you can enable logging in your webdriver:__```from selenium.webdriver.common.desired_capabilities import DesiredCapabilitiesdc[&quot;goog:loggingPrefs&quot;] = {&quot;browser&quot;: &quot;ALL&quot;}driver = webdriver.Chrome(desired_capabilities=dc)```Example:```from seletools.indexeddb import IndexedDBidb = IndexedDB(driver, &quot;mydb&quot;, 3)  # webdriver instance, db name, db version# GET valuevalue = idb.get_value(&quot;keyvaluepairs&quot;, &quot;foo&quot;)  # table name, key in table# PUT value (change existing)idb.put_value(&quot;keyvaluepairs&quot;, &quot;foo&quot;, &quot;win&quot;)  # table name, key, new value# ADD valueidb.add_value(&quot;keyvaluepairs&quot;, &quot;war&quot;, &quot;pain&quot;)  # table name, new key, new value# REMOVE itemidb.remove_item(&quot;keyvaluepairs&quot;, &quot;foo&quot;)  # table name, key in table```### Interaction with Local StorageSelenium doesn't support any Local Storage interactions natively, so usually actions like get/set were done with simple JavaScript snippets.```from seletools import localstorage# GET valuevalue = localstorage.get_value(driver, &quot;foo&quot;)  # webdriver instance, key in Local Storage# SET valuelocalstorage.get_value(driver, &quot;foo&quot;)  # webdriver instance, key in Local Storage, new value# REMOVE itemlocalstorage.remove_item(driver, &quot;foo&quot;)  # webdriver instance, key in Local Storage```### NotesHTML5 Drag &amp; Drop action worked with CSS selectors only a while ago. Now it also supports XPath selectors.</longdescription>
</pkgmetadata>