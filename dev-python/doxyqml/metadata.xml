<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/agateau/doxyqml.svg?branch=master)](https://travis-ci.org/agateau/doxyqml)[![Coverage Status](https://coveralls.io/repos/github/agateau/doxyqml/badge.svg?branch=master)](https://coveralls.io/github/agateau/doxyqml?branch=master)# GoalsDoxyqml lets you use Doxygen to document your QML classes.It integrates as a Doxygen input filter to turn .qml files into pseudo-C++which Doxygen can then use to generate documentation.# InstallingDoxyqml uses the standard Python setup tools, so you can install it with pip:    pip3 install doxyqmlor manually with:    python3 setup.py install# Telling Doxygen to use DoxyqmlTo tell Doxygen about Doxyqml you must make a few changes to your Doxygenconfiguration file.1. Add the .qml extension to the `FILTER_PATTERNS` key:        FILTER_PATTERNS = *.qml=doxyqml   Note: on Windows Doxyqml installs itself in the `Scripts` folder of your   Python installation. If this folder is not in the PATH, either add it or use   the full path to Doxyqml here (but that is less portable across machines)2. Add the .qml extension to `FILE_PATTERNS`:        FILE_PATTERNS = *.qml3. Since Doxygen 1.8.8, you must also add the .qml extension to   `EXTENSION_MAPPING`:        EXTENSION_MAPPING = qml=C++# Documenting typesQML is partially-typed: functions are untyped, properties and signals are.Doxyqml provides a way to define types when they are missing or not preciseenough.## FunctionsFunctions in QML are untyped, but you can define types in the documentationlike this:```qml/** * Create a user * @param type:string firstname User firstname * @param type:string lastname User lastname * @param type:int User age * @return type:User The User object */function createUser(firstname, lastname, age);```## PropertiesQML properties are typed, so Doxyqml uses them by default. You can neverthelessoverwrite the type using the same `type:&lt;name&gt;` syntax. This is useful todocument property aliases:```qml/** type:string The user lastname */property alias lastname: someObject.text```## SignalsQML signals are typed, so there is no need to use the `type:&lt;name&gt;` syntax todocument their parameters. Using `type:&lt;name&gt;` syntax in signal documentationwill not work: Doxyqml won't strip it out and Doxygen will confuse it with theparameter name.```qml/** * User just logged in * @param user The user which logged in */signal loggedIn(User user)```## Extracting internal elementsQML elements with an id are exported as private member variables. If youset the `EXTRACT_ALL` and `EXTRACT_PRIVATE` Doxygen keys to `YES`, thenthese elements will be visible in the generated documentation.</longdescription>
</pkgmetadata>