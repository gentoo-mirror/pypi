<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># modern ANSII Color formatting for output in terminal## What is neotermcolorneotermcolor library is a fork of old good[termcolor](https://pypi.org/project/termcolor/), which is widely used. I likeit very much, but unfortunately last release was long time ago.Everything is fully backward compatible with original termcolor:```pythonimport sysfrom neotermcolor import colored, cprinttext = colored('Hello, World!', 'red', attrs=['reverse', 'blink'])print(text)cprint('Hello, World!', 'green', 'on_red')print_red_on_cyan = lambda x: cprint(x, 'red', 'on_cyan')print_red_on_cyan('Hello, World!')print_red_on_cyan('Hello, Universe!')for i in range(10):    cprint(i, 'magenta', end=' ')cprint(&quot;Attention!&quot;, 'red', attrs=['bold'], file=sys.stderr)```## Installation```shell    pip3 install neotermcolor```## New features### It works in Windows terminalYep, right out-of-the-box (tested on Windows 10)### It is readline-safeWhen you mix ANSI color codes with readline input, it may cause a problem.neotermcolor has a workaround:* new param for **cprint** and **colored**: *readline_safe=True** you may also turn on readline-safe colorizing by default, setting```python    import neotermcolor    neotermcolor.readline_always_safe = True```### It has 256-color paletteIf color code is specified as an integer (0..255), ANSI 256-color palette isused. You may specify color codes both for foreground and background and mixthem with other attributes:```python    from neotermcolor import cprint    cprint('Underline light-green (119) on grey (237)', 119, 237, ['underline'])```### It is TTY-awareneotermcolor will not colorize text if process stdout or stderr is not a TTY.This feature is on by default, but you may turn it off:```python    import neotermcolor    neotermcolor.tty_aware = False```### It has palette overridingYou may define own color names or override existing ones: e.g. you may usestandard palette for 16-color terminals, but override it when your programdetect terminal with 256-color support or when it's forced by user:```python    import neotermcolor    neotermcolor.set_color('red', 197)    neotermcolor.cprint('Red color is now purple', 'red')```### It has stylesStyles are alternative to classical defining a &quot;style&quot; for certain type ofmessages with *functools.partial* or *lambda*. A style may contain color,on_color and attributes:```python    import neotermcolor    neotermcolor.set_style('error', color='red', attrs='bold')    neotermcolor.cprint('ERROR MESSAGE', style='error')    # or    neotermcolor.cprint('ERROR MESSAGE 2', '@error')```Note: if you specify both style and e.g. attrs, the style attrs will beoverriden.### Single attribute can now be specified as a string```python    # as list or tuple    cprint('test', attrs=['bold'])    # as a string    cprint('test', attrs='bold')```### How to use it instead of old termcolor in the existing projects```python    import neotermcolor as termcolor```I'll do my best to keep it backward compatible with original termcolor.Enjoy!</longdescription>
</pkgmetadata>