<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CanvasXpress Python Library&lt;a href=&quot;https://www.canvasxpress.org&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/docinfosci/canvasxpress-python/main/readme/images/hexagon.png&quot; align=&quot;left&quot; width=&quot;175&quot; style=&quot;vertical-align:middle;margin:10px 10px&quot;&gt; &lt;/a&gt;## About CanvasXpress for Python[***CanvasXpress***](https://www.canvasxpress.org) was developed as the core visualization component for bioinformatics and systems biology analysisat Bristol-Myers Squibb. It supports a large number of [visualizations ](https://www.canvasxpress.org/examples.html) to display scientific and non-scientific data. ***CanvasXpress*** also includes a simple and unobtrusive[user interface](https://www.canvasxpress.org/docs/interface.html) to explore complex data sets, a sophisticated andunique mechanism to keep track of all user customization for[Reproducible Research ](https://www.canvasxpress.org/docs/audit.html) purposes, as well as an 'out of the box'broadcasting capability to synchronize selected data points across all ***CanvasXpress*** plots in a page. Data canbe easily sorted, grouped, transposed, transformed or clustered dynamically. The fully customizable mouse eventsas well as the zooming, panning and drag-and-drop capabilities are features that make this library unique in itsclass.&lt;img src=&quot;https://raw.githubusercontent.com/docinfosci/canvasxpress-python/main/readme/images/sample_graphs.png&quot; align=&quot;center&quot; width=&quot;726&quot;&gt;&lt;/a&gt;***CanvasXpress*** can be now be used within Python for native integration intoIPython and Web environments, such as:- [Plotly Dash](https://dash.plotly.com/)- [Jupyter](https://jupyter.org/)- [Flask](https://flask.palletsprojects.com/en/1.1.x/)- [Django](https://www.djangoproject.com/)Complete examples using the ***CanvasXpress*** library including the mouse events,zooming, and broadcasting capabilities are included in this package.  This ***CanvasXpress*** Python package was created by Dr. Todd C. Brett, with support from [Aggregate Genius Inc.](https://www.aggregate-genius.com), in cooperation with the ***CanvasXpress*** team.The maintainer of the Python edition of this package is [Dr. Todd C. Brett](https://github.com/docinfosci).### Project Status| Topic | Status | |---|---|| **Version and Platform** | [![Release](https://img.shields.io/pypi/v/canvasxpress.svg)](https://pypi.org/project/canvasxpress) [![Compatibility](https://img.shields.io/pypi/pyversions/canvasxpress.svg)](https://pypi.org/project/canvasxpress) [![Implementations](https://img.shields.io/pypi/implementation/canvasxpress.svg)](https://pypi.org/project/canvasxpress) | | **Popularity** | [![PyPI - Downloads](https://img.shields.io/pypi/dm/canvasxpress)](https://pypi.org/project/canvasxpress) || **Status** | [![docinfosci](https://circleci.com/gh/docinfosci/canvasxpress-python/tree/main.svg?style=shield)](https://circleci.com/gh/docinfosci/canvasxpress-python/?branch=main) [![Documentation Status](https://readthedocs.org/projects/canvasxpress-python/badge/?version=latest)](https://canvasxpress-python.readthedocs.io/en/latest/) [![Coverage Status](https://coveralls.io/repos/github/docinfosci/canvasxpress-python/badge.svg?branch=main)](https://coveralls.io/github/docinfosci/canvasxpress-python?branch=main) [![Activity](https://img.shields.io/github/last-commit/docinfosci/canvasxpress-python/main)](https://github.com/docinfosci/canvasxpress-python) |&lt;!-- End Badges --&gt;### Enhancements_Jupyter Notebook exports are now supported!_Rendering in Notebooks has been available since Day 1, but now exporting saved notebooks to PDF, HTML, and otherformats is supported!  The HTML export includes _live_ CanvasXpress charts, which makes this an excellent optionfor distributing rendered materials on the Web or with colleagues unfamiliar with notebook functionality._Pinned CanvasXpress versions are now supported!_To facilitate productin and reproducible research environments, the edition of CanvasXpress to be used can now be set.For example, version `34.9`.  By default the latest available edition of CanvasXpress will be used._We recently released our Plotly Dash integration!_ ðŸ¥³ ðŸŽ‰A complete list of enhancements by release date is available at the [CanvasXpress for Python Status Page](https://canvasxpress-python.readthedocs.io/en/latest/status/).### Known IssuesNone### RoadmapThis package is actively maintained and developed.  Our focus for 2022 is:#### Immediate Focus* Detailed documentation and working examples of all Python functionality* Embedded CanvasXpress for JS libraries (etc.) for offline work#### General Focus* Integraton with dashboard frameworks for easier applet creation* Continued alignment with the CanvasXpress Javascript library* Continued stability and security, if/as needed## Getting Started### DocumentationThe [documentation site](https://canvasxpress-python.readthedocs.io/en/latest/) contains complete [examples](https://canvasxpress-python.readthedocs.io/en/latest/examples/) and [API documentation](https://canvasxpress-python.readthedocs.io/en/latest/api/).There is also a wealth of additional information, including full Javascript API documentation, at [https://www.canvasxpress.org](https://www.canvasxpress.org).**New:** [Jupyter Notebook based examples](https://github.com/docinfosci/canvasxpress-python/tree/main/tutorials/notebook/cx_site_chart_examples) for hundreds of chart configurations!### InstallationCanvasXpress for Python can be installed using _pip_:The essential CanvasXpress package, for use with the CLI or flask and similar environments, can be installed using:```terminalpip install canvasxpress```or ```terminalpip install canvasxpress[core]```Jupyter components can be additionally installed with the core package via:```terminalpip install canvasxpress[jupyter]```And Dash components can be additionally installed as:```terminalpip install canvasxpress[dash]```To get everything in one installation use:```terminalpip install canvasxpress[all]```### A Quick Script/Console ExampleCharts can be defined in scripts or a console session and then displayed using the default browser, assuming that a graphical browser with Javascript support is available on the host system.```pythonfrom canvasxpress.canvas import CanvasXpressfrom canvasxpress.render.popup import CXBrowserPopupif __name__ == &quot;__main__&quot;:    # Define a CX bar chart with some basic data    chart: CanvasXpress = CanvasXpress(        data={            &quot;y&quot;: {                &quot;vars&quot;: [&quot;Gene1&quot;],                &quot;smps&quot;: [&quot;Smp1&quot;, &quot;Smp2&quot;, &quot;Smp3&quot;],                &quot;data&quot;: [[10, 35, 88]]            }        },        config={            &quot;graphType&quot; : &quot;Bar&quot;        }    )        # Display the chart in its own Web page    browser = CXBrowserPopup(chart)    browser.render()```Upon running the example the following chart will be displayed on systems suchas MacOS X, Windows, and Linux with graphical systems:&lt;img src=&quot;https://raw.githubusercontent.com/docinfosci/canvasxpress-python/main/readme/examples/flask_bar_chart_basic.png&quot; align=&quot;center&quot; width=&quot;600&quot;&gt;&lt;/a&gt;### A Quick Dash Example[Plotly Dash](https://dash.plotly.com/) is a popular dashboard framework similar to R/shiny for Python.  Dash applications are Web pages with widgets and elements facilitating the interactive presentation of information.This example shows how to create a basic Dash application using a CanvasXpress Dash element.#### Create a Basic Dash AppA basic Dash app provides a means by which:1. A local development server can be started1. A function can respond to a URLFirst install Dash and CanvasXpress for Python:```terminalpip install canvasxpress[dash]```Then create a demo file, such as `app.py`, and insert:```pythonfrom dash import Dash, htmlfrom canvasxpress.canvas import CanvasXpressfrom canvasxpress.render.dash import CXElementFactoryg_app = Dash(__name__)# No need to create_element many forms of data into CanvasXpress data objects; for example, use this CSV as-is._g_csv = &quot;&quot;&quot;, Apples, Oranges, BananasSF      ,      4,       1,       2Montreal,      2,       4,       5&quot;&quot;&quot;_g_cx_colors = {    &quot;background&quot;: &quot;#111111&quot;,    &quot;text&quot;: &quot;rgb(127,219,255)&quot;,    &quot;bars&quot;: [&quot;rgb(99,110,250)&quot;, &quot;rgb(239,85,59)&quot;],}# Work with data as normal Python values.  cx_data could also have been a DataFrame, JSON, URL, etc._g_cx_chart = CanvasXpress(    render_to=&quot;fruit_consumption&quot;,    data=_g_csv,    config={        &quot;colors&quot;: _g_cx_colors[&quot;bars&quot;],        &quot;graphOrientation&quot;: &quot;vertical&quot;,        &quot;smpLabelRotate&quot;: 90,        &quot;plotBox&quot;: True,        &quot;plotBoxColor&quot;: &quot;White&quot;,        &quot;background&quot;: _g_cx_colors[&quot;background&quot;],        &quot;theme&quot;: &quot;Plotly&quot;,        &quot;xAxis&quot;: [&quot;Fruit&quot;, &quot;City&quot;],        &quot;xAxisTitle&quot;: &quot;Amount&quot;,        &quot;xAxis2Show&quot;: False,        &quot;xAxisMinorTicks&quot;: False,        &quot;axisTitleColor&quot;: _g_cx_colors[&quot;text&quot;],        &quot;axisTickColor&quot;: _g_cx_colors[&quot;text&quot;],        &quot;legendColor&quot;: _g_cx_colors[&quot;text&quot;],        &quot;smpTitle&quot;: &quot;Fruit&quot;,        &quot;smpTitleFontColor&quot;: _g_cx_colors[&quot;text&quot;],        &quot;smpLabelFontColor&quot;: _g_cx_colors[&quot;text&quot;],    },    width=650,    height=450,)# Applicationg_app.layout = html.Div(    style={&quot;backgroundColor&quot;: _g_cx_colors[&quot;background&quot;]},    children=[        html.H1(            children=&quot;Hello Dash&quot;,            style={&quot;textAlign&quot;: &quot;center&quot;, &quot;color&quot;: _g_cx_colors[&quot;text&quot;]},        ),        html.H2(            children=(                &quot;An Example of the Advanced CanvasXpress and CXDashElementFactory&quot;                &quot; Classes for Plotting a CanvasXpress Chart&quot;            ),            style={&quot;textAlign&quot;: &quot;center&quot;, &quot;color&quot;: _g_cx_colors[&quot;text&quot;]},        ),        html.Div(            id=&quot;chart-container&quot;,            children=[                html.Div(                    id=&quot;cx-container&quot;,                    style={&quot;textAlign&quot;: &quot;center&quot;},                    children=CXElementFactory.render(_g_cx_chart),                ),            ],        ),    ],)if __name__ == &quot;__main__&quot;:    g_app.run_server(debug=True)```#### Run the App and View the PageOn the command line, execute:```terminalpython3 app.py```And output similar to the following will be provided:```terminalRunning on http://127.0.0.1:8050/ (Press CTRL+C to quit)```Browsing to `http://127.0.0.1:8050/` will result in a page with a CanvasXpress chart, which is being hosted by the Dash framework:&lt;img src=&quot;https://raw.githubusercontent.com/docinfosci/canvasxpress-python/main/readme/examples/dash_chart_basic.png&quot; align=&quot;center&quot; width=&quot;600&quot;&gt;&lt;/a&gt;Congratulations!  You have created a Plotly Dash CanvasXpress app! ### A Quick Flask Example[Flask](https://palletsprojects.com/p/flask/) is a popular lean Web development framework for Python based applications.  Flask applications can serve Web pages, RESTful APIs, and similar backend service concepts.  This example showshow to create a basic Flask application that provides a basic Web page with aCanvasXpress chart composed using Python in the backend.The concepts in this example equally apply to other frameworks that can serve Web pages, such as Django and Tornado.#### Create a Basic Flask AppA basic Flask app provides a means by which:1. A local development server can be started1. A function can respond to a URLFirst install Flask and CanvasXpress for Python:```terminalpip install -U Flask canvasxpress```Then create a demo file, such as `app.py`, and insert:```python# save this as app.pyfrom flask import Flaskapp = Flask(__name__)@app.route('/')def canvasxpress_example():    return &quot;Hello!&quot;```On the command line, execute:```terminalflask run```And output similar to the following will be provided:```terminalRunning on http://127.0.0.1:5000/ (Press CTRL+C to quit)```Browsing to `http://127.0.0.1:5000/` will result in a page with the text *Hello!*.#### Add a ChartCanvasXpress for Python can be used to define a chart with various attributesand then generate the necessary HTML and Javascript for proper display in thebrowser.Add a `templates` directory to the same location as the `app.py` file, and inside add a file called `canvasxpress_example.html`.  Inside the file add:```html&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Flask CanvasXpress Example&lt;/title&gt;                &lt;!-- 2. Include the CanvasXpress library --&gt;        &lt;link                 href='https://www.canvasxpress.org/dist/canvasXpress.css'                 rel='stylesheet'                 type='text/css'        /&gt;        &lt;script                 src='https://www.canvasxpress.org/dist/canvasXpress.min.js'                 type='text/javascript'&gt;        &lt;/script&gt;                &lt;!-- 3. Include script to initialize object --&gt;        &lt;script type=&quot;text/javascript&quot;&gt;            onReady(function () {                {{canvas_source|safe}}            })        &lt;/script&gt;            &lt;/head&gt;    &lt;body&gt;            &lt;!-- 1. DOM element where the visualization will be displayed --&gt;        {{canvas_element|safe}}        &lt;/body&gt;&lt;/html&gt;```The HTML file, which uses [Jinja syntax](https://palletsprojects.com/p/jinja/) achieves three things:1. Provides a location for a `&lt;div&gt;` element that marks where the chart will be placed.1. References the CanvasXpress CSS and JS files needed to illustrate and operate the charts.1. Provides a location for the Javascript that will replace the chart `&lt;div&gt;` with a working element on page load.Going back to our Flask app, we can add a basic chart definition with some data to our example function:```pythonfrom flask import Flask, render_templatefrom canvasxpress.canvas import CanvasXpressapp = Flask(__name__)@app.route('/')def canvasxpress_example():    # Define a CX bar chart with some basic data    chart: CanvasXpress = CanvasXpress(        data={            &quot;y&quot;: {                &quot;vars&quot;: [&quot;Gene1&quot;],                &quot;smps&quot;: [&quot;Smp1&quot;, &quot;Smp2&quot;, &quot;Smp3&quot;],                &quot;data&quot;: [[10, 35, 88]]            }        },        config={            &quot;graphType&quot; : &quot;Bar&quot;        }    )    # Get the HTML parts for use in our Web page:    html_parts: dict = chart.render_to_html_parts()    # Return a Web page based on canvasxpress_example.html and our HTML parts    return render_template(        &quot;canvasxpress_example.html&quot;,        canvas_element=html_parts[&quot;cx_canvas&quot;],        canvas_source=html_parts[&quot;cx_js&quot;]    )```#### Run the App and View the PageRerun the flask app on the command line and browse to the indicated IP and URL. A page similar to the following will bedisplayed:&lt;img src=&quot;https://raw.githubusercontent.com/docinfosci/canvasxpress-python/main/readme/examples/flask_bar_chart_basic.png&quot; align=&quot;center&quot; width=&quot;600&quot;&gt;&lt;/a&gt;Congratulations!  You have created a Flask CanvasXpress app!</longdescription>
</pkgmetadata>