<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription> Complete implementation of the undocumented Twitter API Includes tools to **scrape**, **automate**, and **search** twitter ### Installation```python from twitter.account import Account email, username, password = ..., ..., ... account = Account(email, username, password) account.create_poll('test poll 123', ['hello', 'world', 'foo', 'bar'], 10080) # DM 1 user account.dm([123], 'hello world', filename='test.png') # DM group of users account.dm([123, 234, 345], 'foo bar', filename='test.mp4') # schedule a tweet (date str or timestamp) account.schedule_tweet('scheduled hello', 1679912795, media=['test.jpg']) # schedule a reply tweet (date str or timestamp) account.schedule_tweet('scheduled world', '2023-03-25 19:11', media=['test.jpg'], reply_to=645) account.unschedule_tweet(321) # tweets account.tweet('test 123') account.tweet('test 234', media=['test.mp4']) account.tweet('test 345', media=['test.jpg', 'test.png', 'test.jpeg', 'test.jfif']) account.tweet('test 456', media=[{'file': 'test.jpeg', 'tagged_users': [123234345456], 'alt': 'some image'}]) account.untweet(123) account.retweet(1633609779745820675) account.unretweet(1633609779745820675) account.quote(1633609779745820675, 'elonmusk', 'test 123') account.reply(1633609779745820675, 'test 123') account.like(1633609779745820675) account.unlike(1633609779745820675) account.bookmark(1633609779745820675) account.unbookmark(1633609779745820675) account.pin(1635479755364651008) account.unpin(1635479755364651008) # users account.follow(50393960) account.unfollow(50393960) account.mute(50393960) account.unmute(50393960) account.enable_notifications(50393960) account.disable_notifications(50393960) account.block(50393960) account.unblock(50393960) # other account.stats(50393960) # user profile account.update_profile_image('test.jpg') account.update_profile_banner('test.png') account.update_profile_info(name='Foo Bar', description='test 123', location='Victoria, BC') # topics account.follow_topic(808713037230157824) account.unfollow_topic(808713037230157824) # lists account.create_list('My List', 'description of my list', private=False) account.update_list(543, 'My Updated List', 'some updated description', private=False) account.update_list_banner(543, 'test.png') account.delete_list_banner(543) account.add_list_member(543, 50393960) account.remove_list_member(543, 50393960) account.delete_list(543) account.pin_list(543) account.unpin_list(543) # refresh all pinned lists in this order account.update_pinned_lists([543, 432, 321]) # unpin all lists account.update_pinned_lists([]) # get timelines timeline = account.home_timeline() latest_timeline = account.home_latest_timeline(limit=100) # example configuration account.update_settings({     &quot;address_book_live_sync_enabled&quot;: False,     &quot;allow_ads_personalization&quot;: False,     &quot;allow_authenticated_periscope_requests&quot;: True,     &quot;allow_dm_groups_from&quot;: &quot;following&quot;,     &quot;allow_dms_from&quot;: &quot;following&quot;,     &quot;allow_location_history_personalization&quot;: False,     &quot;allow_logged_out_device_personalization&quot;: False,     &quot;allow_media_tagging&quot;: &quot;none&quot;,     &quot;allow_sharing_data_for_third_party_personalization&quot;: False,     &quot;alt_text_compose_enabled&quot;: None,     &quot;always_use_https&quot;: True,     &quot;autoplay_disabled&quot;: False,     &quot;country_code&quot;: &quot;us&quot;,     &quot;discoverable_by_email&quot;: False,     &quot;discoverable_by_mobile_phone&quot;: False,     &quot;display_sensitive_media&quot;: False,     &quot;dm_quality_filter&quot;: &quot;enabled&quot;,     &quot;dm_receipt_setting&quot;: &quot;all_disabled&quot;,     &quot;geo_enabled&quot;: False,     &quot;include_alt_text_compose&quot;: True,     &quot;include_mention_filter&quot;: True,     &quot;include_nsfw_admin_flag&quot;: True,     &quot;include_nsfw_user_flag&quot;: True,     &quot;include_ranked_timeline&quot;: True,     &quot;language&quot;: &quot;en&quot;,     &quot;mention_filter&quot;: &quot;unfiltered&quot;,     &quot;nsfw_admin&quot;: False,     &quot;nsfw_user&quot;: False,     &quot;personalized_trends&quot;: True,     &quot;protected&quot;: False,     &quot;ranked_timeline_eligible&quot;: None,     &quot;ranked_timeline_setting&quot;: None,     &quot;require_password_login&quot;: False,     &quot;requires_login_verification&quot;: False,     &quot;sleep_time&quot;: {         &quot;enabled&quot;: False,         &quot;end_time&quot;: None,         &quot;start_time&quot;: None     },     &quot;translator_type&quot;: &quot;none&quot;,     &quot;universal_quality_filtering_enabled&quot;: &quot;enabled&quot;,     &quot;use_cookie_personalization&quot;: False, }) # example configuration account.update_search_settings({     &quot;optInFiltering&quot;: True,  # filter out nsfw content     &quot;optInBlocking&quot;: True,  # filter out blocked accounts }) ## account.change_password('old password', 'new password') ## account.logout_all_sessions() ``` ### Scraping #### Get all user/tweet data ```python from twitter.scraper import Scraper email, username, password = ..., ..., ... scraper = Scraper(email, username, password)  # session ####### User Data ######## users = scraper.user_by_screen_name(['bob123', 'jim456', 'stanley789']) tweets = scraper.tweets([123, 234, 345]) likes = scraper.likes([123, 234, 345]) tweets_and_replies = scraper.tweets_and_replies([123, 234, 345]) media = scraper.media([123, 234, 345]) following = scraper.following([123, 234, 345]) followers = scraper.followers([123, 234, 345]) ######## Tweet Data ######## tweets_by_ids = scraper.tweet_by_rest_id([456, 567, 678]) tweets_details = scraper.tweets_details([456, 567, 678]) retweeters = scraper.retweeters([456, 567, 678]) favoriters = scraper.favoriters([456, 567, 678]) scraper.download_media([456, 567, 678]) ``` #### Search ```python    from twitter.search import search search(     '(#dogs OR #cats) min_retweets:500',     'min_faves:10000 @elonmusk until:2023-02-16 since:2023-02-01',     'brasil portugal -argentina',     'paperswithcode -tensorflow -tf',     'skateboarding baseball guitar',     'cheese bread butter',     'ios android',     # limit=1000, # optional limit ) ```</longdescription>
</pkgmetadata>