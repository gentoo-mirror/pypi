<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![cvxpylayers logo](cvxpylayers_logo.png)[![Build Status](https://travis-ci.org/cvxgrp/cvxpylayers.svg?branch=master)](https://travis-ci.org/cvxgrp/cvxpylayers)[![Build Status](https://ci.appveyor.com/api/projects/status/dhtbi9fb96mce56i/branch/master?svg=true)](https://ci.appveyor.com/project/sbarratt/cvxpylayers/branch/master)# cvxpylayerscvxpylayers is a Python library for constructing differentiable convexoptimization layers in PyTorch, JAX, and TensorFlow using CVXPY.A convex optimization layer solves a parametrized convex optimization problemin the forward pass to produce a solution.It computes the derivative of the solution with respect tothe parameters in the backward pass.This library accompanies our [NeurIPS 2019 paper](https://web.stanford.edu/~boyd/papers/pdf/diff_cvxpy.pdf)on differentiable convex optimization layers.For an informal introduction to convex optimization layers, see our[blog post](https://locuslab.github.io/2019-10-28-cvxpylayers/).Our package uses [CVXPY](https://github.com/cvxgrp/cvxpy) for specifyingparametrized convex optimization problems.- [Installation](#installation)- [Usage](#usage)- [Examples](#examples)- [Contributing](#contributing)- [Projects using cvxpylayers](#projects-using-cvxpylayers)- [License](#contributing)- [Citing](#citing)## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to installcvxpylayers.```bashpip install cvxpylayers```Our package includes convex optimization layers forPyTorch, JAX, and TensorFlow 2.0;the layers are functionally equivalent. You will need to install[PyTorch](https://pytorch.org),[JAX](https://github.com/google/jax), or[TensorFlow](https://www.tensorflow.org)separately, which can be done by following the instructions on their websites.cvxpylayers has the following dependencies:* Python 3* [NumPy](https://pypi.org/project/numpy/)* [CVXPY](https://github.com/cvxgrp/cvxpy) &gt;= 1.1.a4* [PyTorch](https://pytorch.org) &gt;= 1.0, [JAX](https://github.com/google/jax) &gt;= 0.2.12, or [TensorFlow](https://tensorflow.org) &gt;= 2.0* [diffcp](https://github.com/cvxgrp/diffcp) &gt;= 1.0.13## UsageBelow are usage examples of our PyTorch, JAX, and TensorFlow layers.Note that the parametrized convex optimization problems must be constructedin CVXPY, using[DPP](https://www.cvxpy.org/tutorial/advanced/index.html#disciplined-parametrized-programming).### PyTorch```pythonimport cvxpy as cpimport torchfrom cvxpylayers.torch import CvxpyLayern, m = 2, 3x = cp.Variable(n)A = cp.Parameter((m, n))b = cp.Parameter(m)constraints = [x &gt;= 0]objective = cp.Minimize(0.5 * cp.pnorm(A @ x - b, p=1))problem = cp.Problem(objective, constraints)assert problem.is_dpp()cvxpylayer = CvxpyLayer(problem, parameters=[A, b], variables=[x])A_tch = torch.randn(m, n, requires_grad=True)b_tch = torch.randn(m, requires_grad=True)# solve the problemsolution, = cvxpylayer(A_tch, b_tch)# compute the gradient of the sum of the solution with respect to A, bsolution.sum().backward()```Note: `CvxpyLayer` cannot be traced with `torch.jit`.### JAX```pythonimport cvxpy as cpimport jaxfrom cvxpylayers.jax import CvxpyLayern, m = 2, 3x = cp.Variable(n)A = cp.Parameter((m, n))b = cp.Parameter(m)constraints = [x &gt;= 0]objective = cp.Minimize(0.5 * cp.pnorm(A @ x - b, p=1))problem = cp.Problem(objective, constraints)assert problem.is_dpp()cvxpylayer = CvxpyLayer(problem, parameters=[A, b], variables=[x])key = jax.random.PRNGKey(0)key, k1, k2 = jax.random.split(key, 3)A_jax = jax.random.normal(k1, shape=(m, n))b_jax = jax.random.normal(k2, shape=(m,))solution, = cvxpylayer(A_jax, b_jax)# compute the gradient of the summed solution with respect to A, bdcvxpylayer = jax.grad(lambda A, b: sum(cvxpylayer(A, b)[0]), argnums=[0, 1])gradA, gradb = dcvxpylayer(A_jax, b_jax)```Note: `CvxpyLayer` cannot be traced with the JAX `jit` or `vmap` operations.### TensorFlow 2```pythonimport cvxpy as cpimport tensorflow as tffrom cvxpylayers.tensorflow import CvxpyLayern, m = 2, 3x = cp.Variable(n)A = cp.Parameter((m, n))b = cp.Parameter(m)constraints = [x &gt;= 0]objective = cp.Minimize(0.5 * cp.pnorm(A @ x - b, p=1))problem = cp.Problem(objective, constraints)assert problem.is_dpp()cvxpylayer = CvxpyLayer(problem, parameters=[A, b], variables=[x])A_tf = tf.Variable(tf.random.normal((m, n)))b_tf = tf.Variable(tf.random.normal((m,)))with tf.GradientTape() as tape:  # solve the problem, setting the values of A, b to A_tf, b_tf  solution, = cvxpylayer(A_tf, b_tf)  summed_solution = tf.math.reduce_sum(solution)# compute the gradient of the summed solution with respect to A, bgradA, gradb = tape.gradient(summed_solution, [A_tf, b_tf])```Note: `CvxpyLayer` cannot be traced with `tf.function`.### Log-log convex programsStarting with version 0.1.3, cvxpylayers can also differentiate through log-log convex programs (LLCPs), which generalize geometric programs. Use the keyword argument `gp=True` when constructing a `CvxpyLayer` for an LLCP. Below is a simple usage example```pythonimport cvxpy as cpimport torchfrom cvxpylayers.torch import CvxpyLayerx = cp.Variable(pos=True)y = cp.Variable(pos=True)z = cp.Variable(pos=True)a = cp.Parameter(pos=True, value=2.)b = cp.Parameter(pos=True, value=1.)c = cp.Parameter(value=0.5)objective_fn = 1/(x*y*z)objective = cp.Minimize(objective_fn)constraints = [a*(x*y + x*z + y*z) &lt;= b, x &gt;= y**c]problem = cp.Problem(objective, constraints)assert problem.is_dgp(dpp=True)layer = CvxpyLayer(problem, parameters=[a, b, c],                   variables=[x, y, z], gp=True)a_tch = torch.tensor(a.value, requires_grad=True)b_tch = torch.tensor(b.value, requires_grad=True)c_tch = torch.tensor(c.value, requires_grad=True)x_star, y_star, z_star = layer(a_tch, b_tch, c_tch)sum_of_solution = x_star + y_star + z_starsum_of_solution.backward()```## ExamplesOur [examples](examples) subdirectory contains simple applications of convex optimizationlayers in IPython notebooks.## ContributingPull requests are welcome. For major changes, please open an issue first todiscuss what you would like to change.Please make sure to update tests as appropriate.Please lint the code with `flake8`.```bashpip install flake8  # if not already installedflake8```### Running testscvxpylayers uses the `pytest` framework for running tests.To install `pytest`, run:```bashpip install pytest```Execute the tests from the main directory of this repository with:```bashpytest cvxpylayers/{torch,jax,tensorflow}```## Projects using cvxpylayersBelow is  a list of projects using cvxpylayers. If you have used cvxpylayers in a project, you're welcome to make a PR to add it to this list.* [Learning Convex Optimization Control Policies](https://web.stanford.edu/~boyd/papers/learning_cocps.html)* [Learning Convex Optimization Models](https://web.stanford.edu/~boyd/papers/learning_copt_models.html)## Licensecvxpylayers carries an Apache 2.0 license.## CitingIf you use cvxpylayers for research, please cite our accompanying [NeurIPS paper](https://web.stanford.edu/~boyd/papers/pdf/diff_cvxpy.pdf):```@inproceedings{cvxpylayers2019,  author={Agrawal, A. and Amos, B. and Barratt, S. and Boyd, S. and Diamond, S. and Kolter, Z.},  title={Differentiable Convex Optimization Layers},  booktitle={Advances in Neural Information Processing Systems},  year={2019},}```If you use cvxpylayers to differentiate through a log-log convex program, please cite the accompanying [paper](https://web.stanford.edu/~boyd/papers/diff_dgp.html):```@article{agrawal2020differentiating,  title={Differentiating through log-log convex programs},  author={Agrawal, Akshay and Boyd, Stephen},  journal={arXiv},  archivePrefix={arXiv},  eprint={2004.12553},  primaryClass={math.OC},  year={2020},}```</longdescription>
</pkgmetadata>