<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![aiosqlitedictbanner](https://user-images.githubusercontent.com/51752028/160848765-35b1577d-0d94-44e3-bca4-d7ef133b5a97.png)![PyPI](https://img.shields.io/pypi/v/aiosqlitedict?style=flat)[![Downloads](https://pepy.tech/badge/aiosqlitedict)](https://pepy.tech/project/aiosqlitedict)    Python Wrapper For sqlite3 and aiosqlite## Main Features:* Easy conversion between sqlite table and Python dictionary and vice-versa.* Execute SQL queries.* Get values of a certain column in a Python list.* delete from your table.* convert your json file into a sql database table.* Order your list with parameters like ``order_by``, ``limit`` ..etc* Choose any number of columns to your dict, which makes it faster for your dict to load instead of selecting all.## Installation```bashpy -m pip install -U aiosqlitedict```## UsageAiosqlite is used to import a SQLite3 table as a Python dictionary.In this example we have a database file named ``ds_data.db`` this database has a table named ``ds_salaries``![ds_data.db](https://i.ibb.co/rvsrPCX/pic1.png)Now to create an instance of this table in python we do the following```python&gt;&gt;&gt; from aiosqlitedict.database import Connect&gt;&gt;&gt; ds_salaries = Connect(&quot;ds_data.db&quot;, &quot;ds_salaries&quot;, &quot;id&quot;)```now we can get rows of this table.```python&gt;&gt;&gt; async def some_func():    ...    &gt;&gt;&gt; user_0 = await ds_salaries.to_dict(0, &quot;job_title&quot;, &quot;salary&quot;) # to get `job_title` and `salary` of user with id 0    &gt;&gt;&gt; print(user_0)    {'job_title': 'Data Scientist', 'salary': 70000}    &gt;&gt;&gt; user_0 = await ds_salaries.to_dict(0, &quot;*&quot;)  # to get all columns of user with id 0    &gt;&gt;&gt; print(user_0)    {'id': 0, 'work_year': 2020, 'experience_level': 'MI', 'employment_type': 'FT', 'job_title': 'Data Scientist', 'salary': 70000, 'salary_currency': 'EUR', 'salary_in_usd': 79833, 'employee_residence': 'DE', 'remote_ratio': 0, 'company_location': 'DE', 'company_size': 'L'}```now lets do some operations on our data```python    &gt;&gt;&gt; user_0 = await ds_salaries.to_dict(0, &quot;job_title&quot;, &quot;salary&quot;)    &gt;&gt;&gt; user_0[&quot;salary&quot;] += 676  # increase user 0's salary    &gt;&gt;&gt; print(user_0[&quot;salary&quot;])    70676        # getting top 5 rows by salaries    &gt;&gt;&gt; salaries = await ds_salaries.select(&quot;salary&quot;, limit=5, ascending=False)    &gt;&gt;&gt; print(salaries)    [70000, 260000, 85000, 20000, 150000]        # to get &quot;job_title&quot; but order with salaries    &gt;&gt;&gt; best_jobs = await ds_salaries.select(&quot;job_title&quot;, order_by=&quot;salary&quot;, limit=5, ascending=False)    &gt;&gt;&gt; print(best_jobs)    ['Data Scientist', 'Data Scientist', 'BI Data Analyst', 'ML Engineer', 'ML Engineer']        # We can do the same task by executing a query    &gt;&gt;&gt; best_jobs_2 = await ds_salaries.execute(&quot;SELECT job_title FROM ds_salaries ORDER BY salary DESC LIMIT 5&quot;)    &gt;&gt;&gt; print(best_jobs_2)    [('Data Scientist',), ('Data Scientist',), ('BI Data Analyst',), ('ML Engineer',), ('ML Engineer',)]        # to get job_titles that includes the title &quot;scientist&quot; without duplicates    &gt;&gt;&gt; scientists = await ds_salaries.select(&quot;job_title&quot;, like=&quot;scientist&quot;, distinct=True)    &gt;&gt;&gt; print(scientists)    ['Data Scientist', 'Machine Learning Scientist', 'Lead Data Scientist', 'Research Scientist', 'AI Scientist', 'Principal Data Scientist', 'Applied Data Scientist', 'Applied Machine Learning Scientist', 'Staff Data Scientist']        # to get all users' salary that have the title &quot;ML Engineer&quot; using a query    &gt;&gt;&gt; ML_Engineers = await ds_salaries.execute(&quot;SELECT salary FROM ds_salaries WHERE job_title = 'ML Engineer'&quot;)    &gt;&gt;&gt; print(ML_Engineers)    [(14000,), (270000,), (7000000,), (8500000,), (256000,), (20000,)]        # to get the highest salaries    &gt;&gt;&gt; high_salaries = await ds_salaries.select(&quot;salary&quot;, between=(10000000, 40000000))  # between 30M and 40M salary    &gt;&gt;&gt; print(sorted(high_salaries, reverse=True))    [30400000, 11000000, 11000000]        # but what if we want to know their ids? here order_by is best used    &gt;&gt;&gt; high_salaries2 = await ds_salaries.select(&quot;salary&quot;, order_by=&quot;salary&quot;, limit=3, ascending=False) # same task with different method    &gt;&gt;&gt; print(high_salaries2)    [30400000, 11000000, 11000000]    &gt;&gt;&gt; high_salaries3 = await ds_salaries.select(&quot;id&quot;, order_by=&quot;salary&quot;, limit=3, ascending=False) # id of richest to poorest    &gt;&gt;&gt; print(high_salaries3)    [177, 7, 102]```| :warning: Warning: Connect.select method is vulnerable to SQL injection.|| --- |Lets say you want to delete a certain user```python&gt;&gt;&gt; await ds_salaries.delete(5)  # removing user with id 5 from the table.```finally updating our SQLite table```python&gt;&gt;&gt; await ds_salaries.to_sql(0, user_0) # Saving user 0's data to the table```## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## LicensePlease notice thatthis package is built-on top of ``aiosqlite``[MIT](https://github.com/sabrysm/aiosqlitedict/blob/main/LICENSE)</longdescription>
</pkgmetadata>