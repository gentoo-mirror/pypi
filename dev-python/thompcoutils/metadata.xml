<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Setting up pypi1. First update the software:    ```    sudo apt update    sudo apt upgrade    sudo apt install python3-pip    pip install setuptools    pip install twine    ```2. Copy git/hooks/pre-push to .git/hooks   ```   cp git/hooks/pre-push .git/hooks   ```3. Get an api token from https://pypi.org/manage/account/token/4. create/edit the ~/.pypirc file:    ```    [distutils]      index-servers =        pypi        thompcoutils        [pypi]      username = __token__      password = &lt;TOKEN FROM https://pypi.org/manage/account/token/&gt;    [thompcoutils]      repository = https://upload.pypi.org/legacy/      username = __token__      password = &lt;TOKEN FROM https://pypi.org/manage/account/token/&gt;    ```# logging_utilslogging consists of the following classes and functions to help with the burden of logging### RelativePathRotatingFileHandlerNot sure if this is working properly#### get_logger()This function retrieves a logger for your file and function/method.  This should be called first.  For example:#### start_function(logger, **kwargs)This function tags the log file with the entry of a function/method.  You may turn it on or off in your logging configurationnote that the __msg=__ argument is reserved for single string messages#### end_function(logger, **kwargs)This function tags the log file with the exit of a function/method.  You may turn it on or off in your logging configurationnote that the __msg=__ argument is reserved for single string messagesHere is an example of everything```python    val1 = 5    val2 = 6    logger = get_logger()    start_function(logger, msg=&quot;testing&quot;)    # or you can call it this way:    start_function(logger, val1=val1, val2=val2)    val1 = 10    val2 = {&quot;first&quot;: 1, &quot;second&quot;: 2}    end_function(logger, val1=val1, val2=val2)```# os_utilsos consists of the following classes and functions#### UnhandledOsThis is raised when the library does not recognize the operating system#### list_timezones()This function returns all known timezones#### get_timezone()This function returns the timezone selected by the operating system#### kill_process(name)This function kills the specified process name#### is_running(name)This function returns whether the specified process name is currently running#### os_type()This function returns the operating system type#### get_ip_addresses()This function returns all IP addresses on this hardware#configThis contains the object __ConfigUtils__It is used to read and write .ini files.  You should put all information into the differentmethods to fully define the configuration file.The constructor takes the configuration file name, a title to add to the top of the file, and a flag indicatingthe file is being constructed.```pythonclass ConfigManager:    def __init__(self, file_name, title=None, create=False):```The read_entry function reads a section/entry from the file.  It takes a default value in case the valuedoes not exist in the file and also to create a new file.  The notes parameter describe the entry in the file```python    def read_entry(self, section, entry, default_value, notes=None):```The read_section function reads the entire section from the configuration file and returns a dictionary of the entries.  Note that the notes are only applied to the setion (not to the individual entries)```python    def read_section(self, section, default_entries, notes=None):```The write function writes a new configuration file.  If this is called, the package will check if the file exists.If it does, it will abort with a warning.  If the file does not exist, it will write it and abort.```python    def write(self, out_file):```Here is an example of ConfigManager and its functions:```python    write = False # set this to True to create the configuration file    cfg_mgr = ConfigManager(&quot;test.ini&quot;, &quot;This is the title of the ini file\n&quot;                                        &quot;You can have multiple lines if you use line breaks&quot;, write)    first = cfg_mgr.read_entry(&quot;User 1&quot;, &quot;first name&quot;, &quot;Joe&quot;, &quot;This is the first name&quot;)    last = cfg_mgr.read_entry(&quot;User 1&quot;, &quot;last name&quot;, &quot;Brown&quot;, &quot;This is the last name&quot;)    age = cfg_mgr.read_entry(&quot;User 1&quot;, &quot;age&quot;, 12)    is_male = cfg_mgr.read_entry(&quot;User 1&quot;, &quot;male&quot;, True)    weight = cfg_mgr.read_entry(&quot;User 1&quot;, &quot;weight&quot;, 23.5)    section = cfg_mgr.read_section(&quot;user 2&quot;, {&quot;first name&quot;: &quot;Sally&quot;,                                              &quot;last name&quot;: &quot;Jones&quot;,                                              &quot;age&quot;: 15,                                              &quot;is_male&quot;: False,                                              &quot;weight&quot;: 41.3},                                   &quot;You only get to add notes at the top of the section using this method&quot;)```</longdescription>
</pkgmetadata>