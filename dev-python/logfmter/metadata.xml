<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Logfmter[![pre-commit](https://github.com/jteppinette/python-logfmter/actions/workflows/pre-commit.yml/badge.svg)](https://github.com/jteppinette/python-logfmter/actions/workflows/pre-commit.yml)[![test](https://github.com/jteppinette/python-logfmter/actions/workflows/test.yml/badge.svg)](https://github.com/jteppinette/python-logfmter/actions/workflows/test.yml)[![python-3.6-3.7-3.8-3.9-3.10](https://img.shields.io/badge/python-3.6%20|%203.7%20|%203.8%20|%203.9%20|%203.10-blue.svg)](.github/workflows/test.yml)_A Python package which supports global [logfmt](https://www.brandur.org/logfmt) formatted logging._1. [Install](#install)2. [Usage](#usage)   1. [Integration](#integration)   2. [Configuration](#configuration)   3. [Extend](#extend)3. [Development](#development)   1. [Required Software](#required-software)   2. [Getting Started](#getting-started)   3. [Publishing](#publishing)## Install```sh$ pip install logfmter```## UsageBefore integrating this library, you should be familiar with Python's loggingfunctionality. I recommend reading the [Basic LoggingTutorial](https://docs.python.org/3/howto/logging.html).This package exposes a single `Logfmter` class that can be integrated intothe standard library logging system similar to any `logging.Formatter`.The provided formatter will logfmt encode all logs. Key value pairs are providedvia the `extra` keyword argument or by passing a dictionary as the log message.To prevent invalid keys from breaking the logfmt style, the formatter normalizes all keys:- replaces empty keys with an underscore- replaces spaces with underscores- escapes newlinesIf a log message is created via `logging.exception` (inside an exception handler), thenthe exception information (traceback, type, and message) will be encoded in the`exc_info` parameter.### Integration**[basicConfig](https://docs.python.org/3/library/logging.html#logging.basicConfig)**```pythonimport loggingfrom logfmter import Logfmterhandler = logging.StreamHandler()handler.setFormatter(Logfmter())logging.basicConfig(handlers=[handler])logging.error(&quot;hello&quot;, extra={&quot;alpha&quot;: 1}) # at=ERROR msg=hello alpha=1logging.error({&quot;token&quot;: &quot;Hello, World!&quot;}) # at=ERROR token=&quot;Hello, World!&quot;```**[dictConfig](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig)**```pythonimport logging.configlogging.config.dictConfig(    {        &quot;version&quot;: 1,        &quot;formatters&quot;: {            &quot;logfmt&quot;: {                &quot;()&quot;: &quot;logfmter.Logfmter&quot;,            }        },        &quot;handlers&quot;: {            &quot;console&quot;: {&quot;class&quot;: &quot;logging.StreamHandler&quot;, &quot;formatter&quot;: &quot;logfmt&quot;}        },        &quot;loggers&quot;: {&quot;&quot;: {&quot;handlers&quot;: [&quot;console&quot;], &quot;level&quot;: &quot;INFO&quot;}},    })logging.info(&quot;hello&quot;, extra={&quot;alpha&quot;: 1}) # at=INFO msg=hello alpha=1```_Notice, you can configure the `Logfmter` by providing keyword arguments as dictionaryitems after `&quot;()&quot;`:_```python...    &quot;logfmt&quot;: {        &quot;()&quot;: &quot;logfmter.Logfmter&quot;,        &quot;keys&quot;: [...],        &quot;mapping&quot;: {...}    }...```### Configuration**keys**By default, the `at=&lt;levelname&gt;` key/value will be included in all log messages. Thesedefault keys can be overridden using the `keys` parameter. If the key you want to includein your output is represented by a different attribute on the log record, then you canuse the `mapping` parameter to provide that key/attribute mapping.Reference the Python [`logging.LogRecord` Documentation](https://docs.python.org/3/library/logging.html?highlight=logrecord#logging.LogRecord)for a list of available attributes.```pythonimport loggingfrom logfmter import Logfmterformatter = Logfmter(keys=[&quot;at&quot;, &quot;processName&quot;])handler = logging.StreamHandler()handler.setFormatter(formatter)logging.basicConfig(handlers=[handler])logging.error(&quot;hello&quot;) # at=ERROR processName=MainProceess msg=hello```**mapping**By default, a mapping of `{&quot;at&quot;: &quot;levelname&quot;}` is used to allow the `at` key to referencethe log record's `levelname` attribute. You can override this parameter to provide yourown mappings.```pythonimport loggingfrom logfmter import Logfmterformatter = Logfmter(    keys=[&quot;at&quot;, &quot;process&quot;],    mapping={&quot;at&quot;: &quot;levelname&quot;, &quot;process&quot;: &quot;processName&quot;})handler = logging.StreamHandler()handler.setFormatter(formatter)logging.basicConfig(handlers=[handler])logging.error(&quot;hello&quot;) # at=ERROR process=MainProceess msg=hello```**datefmt**If you request the `asctime` attribute (directly or through a mapping), then the date formatcan be overridden through the `datefmt` parameter.```pythonimport loggingfrom logfmter import Logfmterformatter = Logfmter(    keys=[&quot;at&quot;, &quot;when&quot;],    mapping={&quot;at&quot;: &quot;levelname&quot;, &quot;when&quot;: &quot;asctime&quot;},    datefmt=&quot;%Y-%m-%d&quot;)handler = logging.StreamHandler()handler.setFormatter(formatter)logging.basicConfig(handlers=[handler])logging.error(&quot;hello&quot;) # at=ERROR when=2022-04-20 msg=hello```### ExtendYou can subclass the formatter to change its behavior.```pythonimport loggingfrom logfmter import Logfmterclass CustomLogfmter(Logfmter):    &quot;&quot;&quot;    Provide a custom logfmt formatter which formats    booleans as &quot;yes&quot; or &quot;no&quot; strings.    &quot;&quot;&quot;    @classmethod    def format_value(cls, value):        if isinstance(value, bool):            return &quot;yes&quot; if value else &quot;no&quot;return super().format_value(value)handler = logging.StreamHandler()handler.setFormatter(CustomLogfmter())logging.basicConfig(handlers=[handler])logging.error({&quot;example&quot;: True}) # at=ERROR example=yes```## Development### Required SoftwareRefer to the links provided below to install these development dependencies:- [direnv](https://direnv.net)- [git](https://git-scm.com/)- [pyenv](https://github.com/pyenv/pyenv#installation)### Getting Started**Setup**```sh$ &lt;runtimes.txt xargs -n 1 pyenv install -s$ direnv allow$ pip install -r requirements/dev.txt$ pre-commit install$ pip install -e .```**Tests**_Run the test suite against the active python environment._```sh$ pytest```_Run the test suite against the active python environment andwatch the codebase for any changes._```sh$ ptw```_Run the test suite against all supported python versions._```sh$ tox```### Publishing**Create**1. Update the version number in `logfmter/__init__.py`.2. Add an entry in `HISTORY.md`.3. Commit the changes, tag the commit, and push the tags:   ```sh   $ git commit -am &quot;v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;&quot;   $ git tag v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;   $ git push origin main --tags   ```4. Convert the tag to a release in GitHub with the history   entry as the description.**Build**```sh$ python -m build```**Upload**```$ twine upload dist/*```</longdescription>
</pkgmetadata>