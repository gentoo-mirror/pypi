<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aio-timers[![PyPI - License](https://img.shields.io/pypi/l/aio-times.svg?longCache=true&amp;&amp;style=flat-square)](https://github.com/ThierrySpetebroot/aio-timers/blob/master/LICENSE)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aio-times.svg?longCache=true&amp;&amp;style=flat-square)[![PyPI](https://img.shields.io/pypi/v/aio-times.svg?longCache=true&amp;&amp;style=flat-square)](https://test.pypi.org/project/aio-timers/)Timing utilities based on `asyncio`.## Setup`pip install aio-timers`## Usage```pythonimport asynciofrom aio_timers import Timerdef callback(name):    print(&quot;Hello {}!&quot;.format(name))# timer is scheduled heretimer = Timer(5, callback, callback_args=(&quot;World&quot;,))# wait until the callback has been executedloop = asyncio.get_event_loop()loop.run_until_complete(timer.wait())print(&quot;end&quot;)```Output:(after 5 seconds)&gt; Hello World!&gt;&gt; end### TimerCalls a `callback` after `delay` seconds.The timer is executed as a task on an event loop.The callback is invoked: - as a synchronous function if it is not a coroutine; - with an await if it is a coroutine or the `callback_async` flag is set to `True`.Any result returned by the callback is ignored.#### Constructor`Timer(delay, callback, callback_args=(), callback_kwargs={}, callback_async=False, *, loop=None)`where: - delay, seconds before the `callback` is executed; - callback, the callback to execute after `delay` seconds - callback_args, (optional, default=`()`) positional arguments to pass to `callback` - callback_kwargs, (optional, default=`{}`) keyword arguments to pass to `callback` - callback_async, (optional, default=`False`) if `True` the callback will be executed on the event loop (`await`) - loop, (optional, default=`None`) event loop where the delayed task will be scheduled (if`None` will use `asyncio.get_event_loop()`)NOTE: the `callback_async` flag should be used when a coroutine is decorated (e.g., using `functools.partial`)#### .cancel()Cancels the execution of the callback.#### async .wait()Wait until the callback has been executed or its execution has been canceled.If the execution has been canceled, will raise `asyncio.CancelledError`.</longdescription>
</pkgmetadata>