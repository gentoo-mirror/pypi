<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># paper-adminCustom Django admin interface based on Bootstrap 4.[![PyPI](https://img.shields.io/pypi/v/paper-admin.svg)](https://pypi.org/project/paper-admin/)[![Build Status](https://github.com/dldevinc/paper-admin/actions/workflows/release.yml/badge.svg)](https://github.com/dldevinc/paper-admin)[![Software license](https://img.shields.io/pypi/l/paper-admin.svg)](https://pypi.org/project/paper-admin/)## Requirements-   Python &gt;= 3.6-   Django &gt;= 2.2## Table of Contents-   [Installation](#Installation)-   [Patches](#Patches)-   [Badge](#Badge)-   [Admin menu](#Admin-menu)    -   [Menu item permissions](#Menu-item-permissions)-   [Reorderable drag-and-drop lists](#Reorderable-drag-and-drop-lists)-   [Form tabs](#Form-tabs)-   [Stylization](#Stylization)    -   [Fieldset](#Fieldset)    -   [Table rows](#Table-rows)    -   [Inline forms](#Inline-forms)-   [Settings](#Settings)-   [Additional References](#Additional-References)## InstallationInstall the latest release with pip:```shellpip install paper-admin```Add `paper_admin` to your INSTALLED_APPS setting **before** `django.contrib.admin`.```pythonINSTALLED_APPS = [    &quot;paper_admin&quot;,    &quot;paper_admin.patches.dal&quot;,              # optional    &quot;paper_admin.patches.django_solo&quot;,      # optional    &quot;paper_admin.patches.mptt&quot;,             # optional    &quot;paper_admin.patches.logentry_admin&quot;,   # optional    &quot;paper_admin.patches.tree_queries&quot;,     # optional    # ...    &quot;django.contrib.admin&quot;,    # ...]```## PatchesНекоторые сторонние библиотеки переопределяют стандартныешаблоны Django и в рамках интерфейса `paper_admin`выглядят инородно. По этой причине (а также для внедрениядополнительного функционала) применяются патчи.В состав `paper_admin` включены следующие патчи:-   `paper_admin.patches.dal`&lt;br&gt;    Исправляет стили виджетов [django-autocomplete-light](https://github.com/yourlabs/django-autocomplete-light)-   `paper_admin.patches.django_solo`&lt;br&gt;    Исправляет хлебные крошки в [django-solo](https://github.com/lazybird/django-solo).-   `paper_admin.patches.mptt`&lt;br&gt;    Адаптация [django-mptt](https://github.com/django-mptt/django-mptt).    Добавляет возможность сортировки узлов дерева (при указании свойства `sortable`).-   `paper_admin.patches.logentry_admin`&lt;br&gt;    Исправление фильтров и скрытие ненужных кнопок в [django-logentry-admin](https://github.com/yprez/django-logentry-admin).-   `paper_admin.patches.tree_queries`&lt;br&gt;    Добавление возможности сортировки узлов дерева для [django-tree-queries](https://github.com/matthiask/django-tree-queries).    **Необходимо** использовать специальный класс `TreeNodeModelAdmin` вместо `ModelAdmin`:    ```python    # admin.py    from django.contrib import admin    from paper_admin.patches.tree_queries.admin import TreeNodeModelAdmin  # &lt;--    from .models import MyTreeNode    @admin.register(MyTreeNode)    class MyTreeNodeAdmin(TreeNodeModelAdmin):        ...        sortable = &quot;position&quot;    ```**Note**: как правило, патчи должны быть указаны в `INSTALLED_APPS` **до** библиотек,которые они исправляют.## BadgeПолоса с текстом в сайдбаре.![](https://user-images.githubusercontent.com/6928240/125350052-4a28e080-e36f-11eb-8772-4d797d64863a.png)Её основное предназначение - визуально обозначить окружение, в котором работаетадминистративный интерфейс. Так вы не перепутаете сервер разработки с продашеном.Цвет полосы и текст устанавливаются в `settings.py`:```pythonPAPER_ENVIRONMENT_NAME = &quot;development&quot;PAPER_ENVIRONMENT_COLOR = &quot;#FFFF00&quot;```## Admin menu![image](https://user-images.githubusercontent.com/6928240/203797839-c2040aa0-e400-4e10-98c4-57fe8c062a9e.png)Меню в сайдбаре настраивается путем заполнения списка `PAPER_MENU`в `settings.py`:```pythonfrom django.utils.translation import gettext_lazy as _PAPER_MENU = [    dict(       # Пункт меню для главной страницы        label=_(&quot;Dashboard&quot;),        url=&quot;admin:index&quot;,        icon=&quot;fa fa-fw fa-lg fa-area-chart&quot;,    ),    dict(       # Приложение app с перечнем его моделей        app=&quot;app&quot;,        icon=&quot;fa fa-fw fa-lg fa-home&quot;,        models=[            &quot;Tag&quot;,            &quot;Category&quot;,            &quot;SubCategory&quot;,        ]    ),    &quot;-&quot;,        # Разделитель    &quot;auth&quot;,     # Приложение auth    dict(       # Модель LogEntry из приложения admin        label=_(&quot;Logs&quot;),        icon=&quot;fa fa-fw fa-lg fa-history&quot;,        perms=&quot;admin.view_logentry&quot;,        models=[            &quot;admin.LogEntry&quot;        ]    ),]```Пункт меню может быть задан одним из четырех способов:-   Имя приложения.&lt;br&gt;    ```python    PAPER_MENU = [        # ...        &quot;app&quot;,        # ...    ]    ```    Все модели выбранного приложения образуют подменю. Порядок моделей Django    определяет автоматически.-   Путь к модели.&lt;br&gt;    ```python    PAPER_MENU = [        # ...        &quot;app.Tag&quot;,        # ...    ]    ```    Создаст пункт меню с заголовком, соответствующим названию модели и    ссылающийся на страницу changelist.-   Строка-разделитель.&lt;br&gt;    ```python    PAPER_MENU = [        # ...        &quot;-&quot;,        # ...    ]    ```    Добавляет горизонтальную линию. С помощью разделителей можно визуально группировать пункты меню.-   Словарь.&lt;br&gt;    ```python    from django.urls import reverse_lazy    from django.utils.translation import gettext_lazy as _    PAPER_MENU = [        # ...        dict(          app=&quot;app&quot;,          icon=&quot;fa fa-fw fa-lg fa-home&quot;,          models=[              &quot;Tag&quot;,        # Модель app.Tag              &quot;Category&quot;,   # Модель app.Category              dict(         # Произвольный вложенный пункт                  label=_(&quot;Index&quot;),                  url=reverse_lazy(&quot;admin:app_list&quot;, kwargs={                      &quot;app_label&quot;: &quot;app&quot;                  })              ),          ]        ),        # ...    ]    ```    Самый гибкий способ создания пункта меню. В словаре можно явным образом    указать название пункта меню, его URL, иконку, CSS-классы и вложенные    пункты. Вложенные пункты тоже могут быть заданы с помощью словаря.При использовании словаря можно указать следующие ключи:-   `label`: `str` - заголовок пункта меню.-   `url`: `str` - URL или имя URL-шаблона (например `app:index`).-   `icon`: `str` - CSS-классы иконки.-   `classes`: `str` - CSS-классы пункта меню.-   `perms`: `str/list/callable` - права, необходимые для отображения пункта.    Для определения суперюзера и сотрудников, можно использовать специальные    значения `superuser` и `staff` соответственно.-   `app`: `str` - имя приложения. Неявно добавляется к именам моделей,    указанным в пункте `models`.-   `models`: `list/dict` - дочерние пункты меню. Содержит список имен моделей    приложения или вложенных пунктов, которые можно задать в виде словаря.### Menu item permissionsС помощью параметра `perms` можно указать названия прав (Django permissions),которые должен иметь пользователь, чтобы увидеть этот пункт меню.На доступность страниц параметр `perms` никак не влияет. Если пользователь знаетадрес страницы или ссылка на неё имеется где-то ещё, то пользователь сможетна неё зайти.```pythonPAPER_MENU = [    # Пункт меню приложения app увидят только сотрудники (staff),    # имеющие право на изменение модели `app.Tag`.    dict(        app=&quot;app&quot;,        perms=[&quot;staff&quot;, &quot;app.change_tag&quot;],        models=[            &quot;Tag&quot;,        ]    )]```## Reorderable drag-and-drop listsДля того, чтобы экземпляры модели можно было сортировать в интерфейсе администратора,необходимо выполнить два условия.1. Добавить в модель _числовое_ поле, которое будет хранить порядковый номер.    ```python    # models.py    from django.db import models    class MyModel(models.Model):        position = models.IntegerField(            &quot;position&quot;,            default=0        )    ```2. Указать название этого поля в свойстве `sortable` соответствующего   подкласса `ModelAdmin`:    ```python    # admin.py    from django.contrib import admin    class MyModelAdmin(admin.ModelAdmin):        sortable = &quot;position&quot;        # ...    ```Результат:https://user-images.githubusercontent.com/6928240/125331456-0f1bb280-e359-11eb-8b17-b04be4b1e62c.mp4Сохранение сортировки происходит через AJAX-запрос.Таким же путём можно включить сортировку инлайн-форм, но в этом случае сортировка происходитс помощью кнопок и сохраняется вместе со всей страницей при нажатии кнопки &quot;Save&quot;:```pythonfrom django.contrib import adminclass TablularInline(admin.TabularInline):    sortable = &quot;position&quot;    # ...```Результат:https://user-images.githubusercontent.com/6928240/125331956-b6004e80-e359-11eb-8422-832dfe37bb6c.mp4Сортировка `paper-admin` совместима с [django-mptt](https://github.com/django-mptt/django-mptt)(если в `INSTALLED_APPS` добавлен патч `paper_admin.patches.mptt`).Менять местами можно только те элементы, которые имеют общего родителя и находятся на одном уровневложенности:https://user-images.githubusercontent.com/6928240/125340277-55760f00-e363-11eb-94d4-49a978cb7ae4.mp4## Form tabsФорму добавления/редактирования объекта можно разделить на вкладки.Список вкладок указывается в атрибуте `tabs`:```pythonfrom django.contrib import adminfrom django.utils.translation import gettext_lazy as _class TablularInlines(admin.TabularInline):    # имя вкладки, на которой должен быть отображен формсет    tab = 'inlines-tab'@admin.register(Page)class PageAdmin(admin.ModelAdmin):    fieldsets = (        (_('First Section'), {            'tab': 'common-tab',            'fields': (                # ...            ),        }),        (_('Second Section'), {            'tab': 'common-tab',            'fields': (                # ...            )        }),        (_('Links'), {            'tab': 'links-tab',            'fields': (                # ...            )        }),    )    tabs = [        ('common-tab', _('General')),        ('links-tab', _('Links')),        ('inlines-tab', _('Inlines')),    ]    inlines = (TablularInlines, )```Результат:https://user-images.githubusercontent.com/6928240/125336032-4e003700-e35e-11eb-8399-9cff90ea7aca.mp4Вкладки можно добавлять динамически, с помощью метода `get_tabs`:```pythonfrom django.contrib import adminfrom .models import Page@admin.register(Page)class PageAdmin(admin.ModelAdmin):    def get_tabs(self, request, obj=None):        return [            # ...        ]```## Stylization### FieldsetDjango [даёт возможность](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.fieldsets)указать произвольные CSS-классы и описание для любого fieldset.`paper-admin` предоставляет набор готовых CSS-классов для стилизации fieldset:-   `paper-card--primary`-   `paper-card--secondary`-   `paper-card--info`-   `paper-card--danger`-   `paper-card--success`-   `paper-card--warning````pythonfrom django.contrib import adminfrom django.utils.translation import gettext_lazy as _@admin.register(Page)class PageAdmin(admin.ModelAdmin):    fieldsets = (        (_(&quot;Info Section&quot;), {            &quot;classes&quot;: (&quot;paper-card--info&quot;, ),            &quot;description&quot;: _(&quot;Description for the fieldset&quot;),            &quot;fields&quot;: (                # ...            ),        }),        (_(&quot;Success Section&quot;), {            &quot;classes&quot;: (&quot;paper-card--success&quot;,),            &quot;fields&quot;: (                # ...            )        }),        (_(&quot;Danger Section&quot;), {            &quot;classes&quot;: (&quot;paper-card--danger&quot;,),            &quot;fields&quot;: (                # ...            )        }),    )```Результат:![](https://user-images.githubusercontent.com/6928240/125337870-8f91e180-e360-11eb-9b19-7f903ab30464.png)### Table rowsДля каждого ряда таблицы вызывается метод `get_row_classes`, который должен вернутьсписок CSS-классов, которые будут добавлены к тэгу `&lt;tr&gt;`.```pythonfrom django.contrib import adminfrom .models import Page@admin.register(Page)class PageAdmin(admin.ModelAdmin):    def get_row_classes(self, request, obj):        if obj.name.startswith(&quot;M&quot;):            return [&quot;table-success&quot;]        elif obj.name.startswith(&quot;P&quot;):            return [&quot;table-info&quot;]        return []```Результат:![](https://user-images.githubusercontent.com/6928240/125338431-3aa29b00-e361-11eb-91ae-01d482b80fad.png)### Inline formsInline-формам тоже можно назначить произвольные CSS-классы с помощью метода`get_form_classes`:```pythonfrom django.contrib import adminclass StackedInline(admin.StackedInline):    def get_form_classes(self, request, obj):        if obj.name.startswith(&quot;P&quot;):            return [&quot;paper-card--success&quot;]        elif obj.name.startswith(&quot;M&quot;):            return [&quot;paper-card--info&quot;]        return []class TablularInlines(admin.TabularInline):    def get_form_classes(self, request, obj):        if obj.name.startswith(&quot;P&quot;):            return [&quot;table-success&quot;]        elif obj.name.startswith(&quot;M&quot;):            return [&quot;table-info&quot;]        return []```Результат:![](https://user-images.githubusercontent.com/6928240/125339687-9b7ea300-e362-11eb-85c7-1f875a506cc1.png)![](https://user-images.githubusercontent.com/6928240/125339691-9c173980-e362-11eb-8941-04ccfdaae914.png)## Settings`PAPER_FAVICON`&lt;br&gt;Путь к favicon-файлу, который будет использоваться в интерфейсе админиcтратора.&lt;br&gt;Default: `&quot;paper_admin/dist/assets/default_favicon.png&quot;``PAPER_ENVIRONMENT_NAME`&lt;br&gt;Текст на бейжде в сайдбаре.&lt;br&gt;Default: `&quot;&quot;``PAPER_ENVIRONMENT_COLOR`&lt;br&gt;Цвет фона бейджа.&lt;br&gt;Default: `&quot;&quot;``PAPER_MENU`&lt;br&gt;Меню.&lt;br&gt;Default: `None``PAPER_MENU_DIVIDER`&lt;br&gt;При встрече указанной строки в списке пунктов `PAPER_MENU`,на её место будут вставлен горизонтальный разделитель.&lt;br&gt;Default: `&quot;-&quot;``PAPER_MENU_PERM_STAFF`&lt;br&gt;Ключевое слово в параметре `perms` пункта меню `PAPER_MENU`,которое указывает, что текущий пункт меню должен быть показантолько при условии, что у пользователя установлен флаг `is_staff`.&lt;br&gt;Default: `&quot;staff&quot;``PAPER_MENU_PERM_SUPERUSER`&lt;br&gt;Ключевое слово в параметре `perms` пункта меню `PAPER_MENU`,которое указывает, что текущий пункт меню должен быть показантолько при условии, что у пользователя установлен флаг `is_superuser`.&lt;br&gt;Default: `&quot;superuser&quot;``PAPER_MENU_HIDE_SINGLE_CHILD`&lt;br&gt;При значении `True`, те пункты меню, которые содержат единственныйподпункт, не будут отображаться как выпадающие списки. Вместо этогоони сразу будут вести на страницу, указанную в подпункте.&lt;br&gt;Default: `True``PAPER_DEFAULT_TAB_NAME`&lt;br&gt;Алиас вкладки по-умолчанию.&lt;br&gt;Default: `&quot;general&quot;``PAPER_DEFAULT_TAB_TITLE`&lt;br&gt;Заголовок вкладки по-умолчанию.&lt;br&gt;Default: `_(&quot;General&quot;)``PAPER_LOCALE_PACKAGES`&lt;br&gt;Список модулей, из которых должны загружаться переводыдля `JavaScriptCatalog` интерфейса администратора.&lt;br&gt;Default: `[&quot;paper_admin&quot;, &quot;django.contrib.admin&quot;]`## Additional References-   [Modals](docs/modals.md)-   [Widgets](docs/widgets.md)</longdescription>
</pkgmetadata>