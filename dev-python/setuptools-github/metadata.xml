<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># setuptools-github[![PyPI version](https://img.shields.io/pypi/v/setuptools-github.svg?color=blue)](https://pypi.org/project/setuptools-github)[![Python versions](https://img.shields.io/pypi/pyversions/setuptools-github.svg)](https://pypi.org/project/setuptools-github)[![License](https://img.shields.io/badge/License-BSD_2--Clause-blue.svg)](https://opensource.org/licenses/BSD-2-Clause)[![Build](https://github.com/cav71/setuptools-github/actions/workflows/tags.yml/badge.svg)](https://github.com/cav71/setuptools-github/actions/runs/5789585760)[![Codecov](https://codecov.io/gh/cav71/setuptools-github/tree/refs%2Ftags%2Frelease%2F0.3.9/graph/badge.svg?token=SIUMZ7MT5T)](https://codecov.io/gh/cav71/setuptools-github/tree/refs%2Ftags%2Frelease%2F0.3.9)[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](Black)[![Mypy](https://img.shields.io/badge/types-Mypy-blue.svg)](https://mypy-lang.org/)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)## Quick startsetuptools-github helps to implement a simple project life cycleaimed at delivering packages into [PyPI](https://pypi.org) from a hosted project at[Github](https://www.gitgub.com). We assume this layout:```python  project-name/  ├── setup.py  ├── pyproject.toml  ├── .github  │   └── workflows           &lt;- workflow files for  │       ├── beta.yml             * beta/N.M.O branches  │       ├── master.yml           * master branch  │       └── tags.yml             * release/N.M.O tags  ├── src  │   └── project_name        &lt;- project name  │       └── __init__.py     &lt;- version_file  └── tests                   &lt;- tests (pytest)      ├── conftest.py      └── requirements.txt    &lt;- requirement file for tests```&gt; **NOTE** for a pyproject.toml / hatch enabled version of this, please use&gt; [hatch-ci plugin](https://pypi.org/project/hatch-ci)#### install the package```bashpip install setuptools-github orconda install -c conda-forge setuptools-github```#### put the initial version info in the version_fileCreate a new `src/project_name/__init__.py` file to store the package information:```__version__ = &quot;N.M.O&quot;  # replace N, M and O with numerical values (eg. 0.0.0)__hash__ = &quot;&quot;  # leave this empty```#### Fix the setup.py file```from setuptools_github import toolssetup(  name=&quot;project-name&quot;,  version=tools.update_version(version_file, os.getenv(&quot;GITHUB_DUMP&quot;)),  ...```&gt; **NOTE**: there's an advanced function `tools.process` that can update &gt; and process files like the readmes (see an example in [setup.py](https://raw.githubusercontent.com/cav71/setuptools-github/master/setup.py))#### Add the github workflow files- [github/workflows/master.yml](https://github.com/cav71/setuptools-github/blob/master/.github/workflows/master.yml)- [github/workflows/beta.yml](https://github.com/cav71/setuptools-github/blob/master/.github/workflows/beta.yml)- [github/workflows/tags.yml](https://github.com/cav71/setuptools-github/blob/master/.github/workflows/tags.yml)&gt; **NOTE**: Most likely you might need to change:&gt; - the `tests/requirements.txt` file&gt; - the envs variables at the beging of `master.yml` and `beta.yml`#### Add secretsIn order to publish to codecov the coveragen info and to PyPI the wheels,you need to set the github secrets under:https://github.com/&lt;span style=&quot;color: red&quot;&gt;username&lt;/span&gt;/&lt;span style=&quot;color: green&quot;&gt;project-name&lt;/span&gt;/settings/secrets/actionsThese are the needed secrets for the PyPI index and codecov services:- TWINE_PASSWORD- TWINE_USERNAME- CODECOV_TOKEN---THAT IS ALL! Now when commit to the master branch, this will trigger the github action to run tests and quality checks on the code ---## Working with branches### Working with the master branchEvery time there's a commit on the **master** branch, this will triggerthe workflow under ./github/workflows/master.yml:- Runs mypy on src/- Runs ruff on src/- Run all tests under tests/On completion static and dynamic tests are supported.### Setup the beta/N.M.O branchIn order to prepare for a release a new **beta/N.M.O** branch should be created:```pythonpython -m setuptools_github.script make-beta src/project_name/__init__.py orsetuptools-github make-beta src/project_name/__init__.py```Every commit on **beta/N.M.O** branch if [Secrets](#add-secrets) have been setproperly:- Runs mypy on src/- Runs ruff on src/- Run all tests under tests/- Run coverage on tests/- Send the coverage result into [coverage](https://coverage.io)- Create a new wheel package under dist/- (on success) Send the new wheels **package-N.M.O.bX** to [PyPI](https://pypi.org)&gt; NOTE: the name **project-N.M.O.bX** contains the X: this is an&gt; incrementing counter set during build.&gt; This means **project-N.M.O.bX** &lt; **project-N.M.O** allowing &gt; the correct package ordering.### Release the project N.M.OTo release an official package for **project-N.M.O** fromthe **beta/N.M.O** branch:```pythonpython -m setuptools_github.script micro src/project_name/__init__.pyorsetuptools-github make-beta micro src/project_name/__init__.py```This will tag the HEAD on **beta/N.M.O** branch with the **release/N.M.O** tag and increment the **version_file** with thenext version N.M.O+1 (using micro).Once done, you'll need to push it the tag.```bashgit push release/N.M.O```This will:- trigger a CI build that will create the project-name-N.M.O- Create a new wheel package under dist/- (on success) Send the new wheels **project-N.M.O** to [PyPI](https://pypi.org)</longdescription>
</pkgmetadata>