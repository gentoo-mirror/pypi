<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========constants=========The problem?============Most applications use constants. Many constants take different values basedon the environment the application is executed in.Think database credentials over development, testing, staging, production orstock market execution over development, testing, paper, production ...A solution==========Shamelessly inspired by the app_constants_ gem, ``constants`` aims to solve thatproblem (and that problem only)..ini file---------``constants`` uses the .ini file format to specify the application constantsvalues in each environment. DEFAULT values are available in every environmentunless specifically overridden in a section.::    [DEFAULT]    something = a_default_value    all =  1    a_string = 0350    [a_section]    something = a_section_value    just_for_me = 5.0    flag = False    minutes = 365 * 24 * 60To find out more about ini files and sections, check the Python standardlibrary configparser_ documention.The default file is ``constants.ini`` in the current working directory. butyou can use any filename you want cf. Instantiation_.Environment-----------Define the environment the application will run in. The default environmentvariable to store that value is __CONSTANTS__, but you can use any variablename you want cf. Instantiation_.Most platform have a way to do that, in bash:::    export __CONSTANTS__=a_section.. _Instantiation:Instantiation-------------&gt;&gt;&gt; import constants&gt;&gt;&gt; consts = constants.Constants()On instantiation, constants looks for an environement variable named__CONSTANTS__ whose value is used to find out which section of theconstants.ini file should be used.Constants' constructor takes two (2) optional parameters. ``variable``let's you specify the name of the environment variable and ``filename``the absolute path to the .ini file containing the constants definitions.&gt;&gt;&gt; consts = Constants(variable='AN_ENVIRONMENT_VARIABLE',...                    filename='constants.cfg') # doctest: +SKIPValues------To access the values, the instance can be used like a dictionary (getitem).&gt;&gt;&gt; consts['something']'a_section_value'Values are cast into integer, float or boolean when pertinent.&gt;&gt;&gt; consts['all']1&gt;&gt;&gt; consts.a_string'0350'&gt;&gt;&gt; consts.flagFalseExpressions are evaluated.&gt;&gt;&gt; consts.minutes525600Values can also be accessed using the . operator (getattr)&gt;&gt;&gt; consts.all1.. _Warning:Warning-------&quot;We are responsible adults&quot; yet, inspired by Matthew Wilson's suggestion_ toraise an exception when an attempt is made to *change a constant*, ``constants``issues warnings_ ...&gt;&gt;&gt; import warnings&gt;&gt;&gt; with warnings.catch_warnings(record=True) as warning:...     # reassigning the constant all...     consts.all = 2&gt;&gt;&gt; warning[0].messageUserWarning('all changed to 2',)... and *changes the constant* anyway.&gt;&gt;&gt; consts.all2It does so with the dict like assignment as well.&gt;&gt;&gt; with warnings.catch_warnings(record=True) as warning:...     consts['something'] = 'a_new_value'&gt;&gt;&gt; warning[0].messageUserWarning('something changed to a_new_value',)&gt;&gt;&gt; consts['something']'a_new_value'Logging-------``constants`` aims to be a good logging_ citizen, grafting a logger to thelogging tree.All calls to the logger methods expose an extra logRecord key called ``method``.With the logging level set to INFO, it logs one and only one useful message.&gt;&gt;&gt; import sys&gt;&gt;&gt; import logging&gt;&gt;&gt; logging.basicConfig(level=logging.INFO,...                     stream=sys.stdout,...                     format='%(levelname)s %(name)s.%(method)s %(message)s')&gt;&gt;&gt; consts = constants.Constants() # doctest: +NORMALIZE_WHITESPACE +ELLIPSISINFO constants.loadvariable: __CONSTANTS__,filename: constants.ini,environment: a_section,constants: {...}At DEBUG level it becomes a tad *noisier*.&gt;&gt;&gt; logging.root.setLevel(logging.DEBUG)&gt;&gt;&gt; debug_me  = consts.just_for_me # doctest: +ELLIPSISDEBUG constants.__getattr__ begin (..., 'just_for_me') {}DEBUG constants.__getitem__ begin (..., 'just_for_me') {}DEBUG constants.cast begin ('5.0',) {}DEBUG constants.cast end 5.0DEBUG constants.__getitem__ end 5.0DEBUG constants.__getattr__ end 5.0Installation============``constants`` is available on PyPI_ ...::    pip install constants... and can be forked on GitHub_... _app_constants: https://github.com/leonardoborges/app_constants.. _configparser: http://docs.python.org/library/configparser.html.. _PyPI: http://pypi.python.org/pypi/constants.. _GitHub: https://github.com/3kwa/constants.. _suggestion: https://twitter.com/mw44118/status/256022281409658881.. _warnings: http://docs.python.org/library/warnings.html.. _logging: http://docs.python.org/library/logging.html</longdescription>
</pkgmetadata>