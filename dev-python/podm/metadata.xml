<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PODM: (P)ython (O)bject - (D)ictionary (M)apperThis library is intended to create objects that easily serialize to dictionaries that can be later stored as JSON or YAML.It is intended as a replacement of jsonpickle for cases where jsonpickle output format is not good at all.Features:* Support for ordered dictionaries or custom mapping classes* Custom field serialization/deserialization* Validators* Json Schema generation## Installation```pip3 install podm```## Some use case samplesVery simple case:```pythonfrom podm import JsonObject, Propertyclass Person(JsonObject):   first_name = Property()   last_name = Property()person = Person(first_name='John',last_name='Doe')person_dict = person.to_dict()print(json.dumps(person_dict,indent=4))# will output{    &quot;py/object&quot;: &quot;__main__.Person&quot;,    &quot;first_name&quot;: &quot;John&quot;,    &quot;last_name&quot;: &quot;Doe&quot;}```Notice the field &quot;py/object&quot;, if you don't need it, you can specify on the class declaration:```pythonclass Person(JsonObject):    __add_type_identifier__ = False    first_name = Property()    last_name = Property()```If you need to specify a different name when the field is converted to dictionary:```pythonclass Person(JsonObject):    __add_type_identifier__ = False    first_name = Property('first-name')    last_name = Property('last-name')person = Person(first_name='John',last_name='Doe')person_dict = person.to_dict()print(json.dumps(person_dict,indent=4))# will output{    &quot;first-name&quot;: &quot;John&quot;,    &quot;last-name&quot;: &quot;Doe&quot;}```Now, when you need to convert the dictionary back to object:```person = Person.from_dict({'first-name':'John', 'last-name':'Doe'})```In case you don't want to explicitly use the class, or you are working with a hierarchy of classes, you will need the type identifier field in order to let the library recognize the object type:```pythonsome_dictionary = {    &quot;py/object&quot;: &quot;__main__.Person&quot;,    &quot;first-name&quot;: &quot;John&quot;,    &quot;last-name&quot;: &quot;Doe&quot;}some_obj = JsonObject.parse(some_dictionary)```Handling complex data types:```pythonfrom podm import JsonObject, Property, Handlerclass DateTimeHandler(Handler):&quot;&quot;&quot;Define a custom handler for datetime objects&quot;&quot;&quot;def encode(self, obj):return {'year' : obj.year,'month' : obj.month,'day' : obj.day,'hour' : obj.hour,'minute' : obj.minute,'second' : obj.second,'microsecond' : obj.microsecond}def decode(self, obj_data):return datetime(**obj_data)class Entity(JsonObject):&quot;&quot;&quot;A base class for the object model&quot;&quot;&quot;oid = Property()created = Property('created', handler=DateTimeHandler(), default=datetime.now) # Default value when object is instantiatedclass Company(Entity):company_name = Property('company-name') # Specify a different field name in json.description = Property()        class Sector(Entity):employees = Property('employees', default=[])class Employee(Entity):name = Property()company = Company(  name='My great company',  description='....')json_data = company.to_dict()company_2 = Company.from_dict(json_data)```## Jsonpickle format support```pythondata = {'py/object' : 'Company','py/state': {'company-name' : 'master','description'  : 'some description'}}company = JsonObject.parse(data) ```## Automatically generated getters/setters. If they are declared property accessors will use them instead.```pythonclass Company(JsonObject):company_name = Property('company-name') # Specify a different field name in json.# Automatically generated gettercompany_name = company.get_company_name()# Also property accessorscompany_name = company.company_name# And private attributescompany_name = company._company_name```## Write custom getters and setters```pythonclass Company(JsonObject):company_name = Property('company-name') # Specify a different field name in json.def get_company_name(self):print('Getter called!!!')# generated attributereturn self._company_name# So, when calling the property getter ...company_name = company.company_name# will print 'Getter called!!!'```### Enum supportIt is possible to decide how to serialize/deserialize enums.```pythonclass InvoiceType(Enum):TYPE_A = 1TYPE_B = 2class Invoice(JsonObject):invoice_type = Property(type=InvoiceType, enum_as_str=True)invoice = Invoice(invoice_type=InvoiceType.TYPE_A)serialized = invoice.to_dict()print(serialized['invice_type'])# Will print 'TYPE_A'class Invoice(JsonObject):invoice_type = Property(type=InvoiceType)invoice = Invoice(invoice_type=InvoiceType.TYPE_A)serializd = invoice.to_dict()print(serialized['invoice_type'])# Will print 1```### Json Schema generation.Check test cases for examples.### Validators.Check test cases for examples.</longdescription>
</pkgmetadata>