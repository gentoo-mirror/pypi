<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![workflow ubuntu](https://github.com/SUNET/python_x509_pkcs11/actions/workflows/ubuntu.yaml/badge.svg)![workflow centos](https://github.com/SUNET/python_x509_pkcs11/actions/workflows/centos.yaml/badge.svg)![workflow debian](https://github.com/SUNET/python_x509_pkcs11/actions/workflows/debian.yaml/badge.svg)## python_x509_pkcs11Seamless async signing x509 using PKCS11 device for key storageCurrently supports* Creating root CAs and generating their keys in the PKCS11 device.* Using the keys in the PKCS11 device to sign certificates or Intermediate CAs.* Creating certificates, CSRs, CRLs, OCSPs  with the PKCS11 device keys enabling a full PKI infrastructure.* 'Advanced' handling of fragile persistent PKCS11 sessions, including recreating the session if PKCS11 operation timeout.* This package is heavily uses python-pkcs11 and asn1crypto.* Package is async but python-pkcs11 is unfortunately still sync, probably due to the fragile nature of PKCS11.* Tested with SoftHSM and LUNAHSM.## Setup```bash# Install libs and add your user to the softhsm group# You should probably replace softhsm when using this in production, any PKCS11 device should workif awk -F= '/^NAME/{print $2}' /etc/os-release | grep -i &quot;debian\|ubuntu&quot;then    # Ubuntu / Debian    sudo apt-get install python3-dev python3-pip softhsm2    sudo usermod -a -G softhsm $USERelse    # Redhat / Centos / Fedora    sudo dnf install python3-devel python3-pip softhsm gcc     sudo usermod -a -G ods $USERfi# Update your softhsm group membershipexec sudo su -l $USER# Install this packagepip3 install python_x509_pkcs11# export env values the code will useif awk -F= '/^NAME/{print $2}' /etc/os-release | grep -i &quot;debian\|ubuntu&quot;then    export PKCS11_MODULE=&quot;/usr/lib/softhsm/libsofthsm2.so&quot;else    export PKCS11_MODULE=&quot;/usr/lib64/softhsm/libsofthsm.so&quot;fiexport PKCS11_PIN=&quot;1234&quot;export PKCS11_TOKEN=&quot;my_test_token_1&quot;# Initialize the tokensofthsm2-util --init-token --slot 0 --label $PKCS11_TOKEN --pin $PKCS11_PIN --so-pin $PKCS11_PIN```## UsageLook at the [documentation](https://github.com/SUNET/python_x509_pkcs11/blob/main/docs/README.md) for quick examples to begin.The [tests](https://github.com/SUNET/python_x509_pkcs11/tree/main/tests) are also a good starting pointHere is the basic, create a root CA and then use its key in the PKCS11 device to sign a csr:```bash# export env values the code will useif awk -F= '/^NAME/{print $2}' /etc/os-release | grep -i &quot;debian\|ubuntu&quot;then    export PKCS11_MODULE=&quot;/usr/lib/softhsm/libsofthsm2.so&quot;else    export PKCS11_MODULE=&quot;/usr/lib64/softhsm/libsofthsm.so&quot;fiexport PKCS11_PIN=&quot;1234&quot;export PKCS11_TOKEN=&quot;my_test_token_1&quot;# Delete the previous token if existssofthsm2-util --delete-token --token $PKCS11_TOKEN# Initialize a new fresh PKCS11 tokensofthsm2-util --init-token --slot 0 --label $PKCS11_TOKEN --pin $PKCS11_PIN --so-pin $PKCS11_PIN``````pythonimport asynciofrom python_x509_pkcs11.ca import createasync def my_func() -&gt; None:    root_ca_name_dict = {        &quot;country_name&quot;: &quot;SE&quot;,        &quot;state_or_province_name&quot;: &quot;Stockholm&quot;,        &quot;locality_name&quot;: &quot;Stockholm&quot;,        &quot;organization_name&quot;: &quot;SUNET&quot;,        &quot;organizational_unit_name&quot;: &quot;SUNET Infrastructure&quot;,        &quot;common_name&quot;: &quot;ca-test.sunet.se&quot;,        &quot;email_address&quot;: &quot;soc@sunet.se&quot;,    }    # key_type must be:    # [ed25519](https://en.wikipedia.org/wiki/EdDSA). This is default.    # ed448    # secp256r1    # secp384r1    # secp521r1    # rsa_2048    # rsa_4096    csr_pem, root_cert_pem = await create(&quot;my_ed25519_key&quot;, root_ca_name_dict, key_type=&quot;ed25519&quot;)    print(&quot;CSR which was self-signed into root CA&quot;)    print(csr_pem)    print(&quot;root CA&quot;)    print(root_cert_pem)asyncio.run(my_func())```## Contributing / Tests```bash# installif awk -F= '/^NAME/{print $2}' /etc/os-release | grep -i &quot;debian\|ubuntu&quot;then    # Ubuntu / Debian    sudo apt-get install flit python3-mypy black pylintelse    # Redhat / Centos / Fedora    sudo dnf install epel-release    sudo dnf install python3-flit python3-mypy python3-black pylintfi# Make your code changes# Then in the root folder, where this README isbash deploy.sh# Build the package with flitflit build```</longdescription>
</pkgmetadata>