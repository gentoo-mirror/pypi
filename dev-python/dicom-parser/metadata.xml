<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dicom_parser| Documentation | [![Documentation Status](https://readthedocs.org/projects/dicom-parser/badge/?version=latest)](http://dicom-parser.readthedocs.io/?badge=latest) ||:---:|:---|| Code | [![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)&lt;br /&gt;[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit) || Testing | [![GitHub Actions](https://github.com/open-dicom/dicom_parser/actions/workflows/tests.yml/badge.svg)](https://github.com/open-dicom/dicom_parser/actions/workflows/tests.yml) [![codecov.io](https://codecov.io/gh/open-dicom/dicom_parser/coverage.svg?branch=main)](https://codecov.io/github/open-dicom/dicom_parser?branch=main)&lt;br /&gt;[![Codacy Badge](https://app.codacy.com/project/badge/Grade/13dfd9fc2e5849599989d061bbf9760f)](https://www.codacy.com/gh/open-dicom/dicom_parser/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-dicom/dicom_parser&amp;amp;utm_campaign=Badge_Grade)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/open-dicom/dicom_parser.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/open-dicom/dicom_parser/context:python)&lt;br /&gt;[![Libraries.io](https://img.shields.io/librariesio/github/open-dicom/dicom_parser)](https://libraries.io/github/open-dicom/dicom_parser) || Packaging | [![PyPI version](https://img.shields.io/pypi/v/dicom_parser.svg)](https://pypi.python.org/pypi/dicom-parser/) [![PyPI status](https://img.shields.io/pypi/status/dicom_parser.svg)](https://pypi.python.org/pypi/dicom-parser/) [![PyPI Format](https://img.shields.io/pypi/format/dicom-parser.svg)](https://pypi.org/project/dicom-parser)&lt;br /&gt;[![Supported Versions](https://img.shields.io/pypi/pyversions/dicom_parser.svg)](https://pypi.org/project/dicom-parser) [![Supported Implementations](https://img.shields.io/pypi/implementation/dicom-parser.svg)](https://pypi.org/project/dicom-parser) || Usage | [![License Badge](https://img.shields.io/github/license/open-dicom/dicom_parser)](https://github.com/open-dicom/dicom_parser/blob/main/LICENSE) [![DOI](https://zenodo.org/badge/241392223.svg)](https://zenodo.org/badge/latestdoi/241392223) [![PyPI download month](https://img.shields.io/pypi/dm/dicom-parser.svg)](https://pypi.python.org/pypi/ansicolortags/) |*dicom_parser* is a utility python package meant to facilitate access to[DICOM](https://www.dicomstandard.org/) header information by extending thefunctionality of *[pydicom][]*.Essentially, *dicom_parser* uses DICOM's[data-element](https://northstar-www.dartmouth.edu/doc/idl/html_6.2/DICOM_Attributes.html)[value-representation (VR)](http://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_6.2.html),as well as prior knowledge on vendor-specific private tags or encoding schemes,in order to transform them to more &quot;pythonic&quot; data structures when possible.* [Installation](#installation)* [Quickstart](#quickstart)* [Documentation](#documentation)* [Tests](#tests)For more information, please see [the documentation site][].---## InstallationTo install the latest stable release of `dicom_parser`, simply run:```bash    pip install dicom_parser```Or, to install the latest development version:```bash    pip install https://github.com/open-dicom/dicom_parser/archive/main.zip```---## QuickstartThe most basic usage case is reading a single DICOM image (*.dcm* file) asan [Image](https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.image.Image)instance.```python    &gt;&gt;&gt; from dicom_parser import Image    &gt;&gt;&gt; image = Image('/path/to/dicom/file.dcm')```### Coversion to Python's native types*dicom_parser* provides *dict*-like access to the parsed values of the[header](https://dcm4che.atlassian.net/wiki/spaces/d2/pages/1835038/A+Very+Basic+DICOM+Introduction)'sdata-elements. The raw values as read by *[pydicom][]* remain accessiblethrough the *raw* attribute.#### ExamplesDecimal String (DS) to *float* using the [`Header`][header] class's[get](https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.header.Header.get)method:```python    &gt;&gt;&gt; raw_value = image.header.raw['ImagingFrequency'].value    &gt;&gt;&gt; raw_value    &quot;123.25993&quot;    &gt;&gt;&gt; type(raw_value)    str    &gt;&gt;&gt; parsed_value = image.header.get('ImagingFrequency')    &gt;&gt;&gt; parsed_value    123.25993    &gt;&gt;&gt; type(parsed_value)    float```Age String (AS) to *float*:```python    &gt;&gt;&gt; raw_value = image.header.raw['PatientAge'].value    &gt;&gt;&gt; raw_value    &quot;027Y&quot;    &gt;&gt;&gt; type(raw_value)    str    &gt;&gt;&gt; parsed_value = image.header.get('PatientAge')    &gt;&gt;&gt; parsed_value    27.0    &gt;&gt;&gt; type(parsed_value)    float```Date String (DA) to [`datetime.date`][datetime.date] using the[`Header`][header] class's indexing operator/subscript notation:```python    &gt;&gt;&gt; raw_value = image.header.raw['PatientBirthDate'].value    &gt;&gt;&gt; raw_value    &quot;19901214&quot;    &gt;&gt;&gt; type(raw_value)    str    &gt;&gt;&gt; parsed_value = image.header['PatientBirthDate']    &gt;&gt;&gt; parsed_value    datetime.date(1990, 12, 14)    &gt;&gt;&gt; type(parsed_value)    datetime.date```Code String (CS) to a verbose value or set of values:```python    &gt;&gt;&gt; raw_value = image.header.raw['SequenceVariant'].value    &gt;&gt;&gt; raw_value    ['SP', 'OSP']    &gt;&gt;&gt; type(raw_value)    pydicom.multival.MultiValue    &gt;&gt;&gt; parsed_value = image.header['SequenceVariant']    &gt;&gt;&gt; parsed_value    {'Oversampling Phase', 'Spoiled'}    &gt;&gt;&gt; type(parsed_value)    set```Et cetera.&gt; The *dict*-like functionality also includes safe getting:&gt;&gt; ```python&gt;     &gt;&gt;&gt; image.header.get('MissingKey')&gt;     None&gt;     &gt;&gt;&gt; image.header.get('MissingKey', 'DefaultValue')&gt;     'DefaultValue'&gt; ```&gt;&gt; As well as raising a KeyError for missing keys with the indexing operator:&gt;&gt; ```python&gt;     &gt;&gt;&gt; image.header['MissingKey']&gt;     KeyError: &quot;The keyword: 'MissingKey' does not exist in the header!&quot;&gt; ```### Read DICOM series directory as a `Series`Another useful class this package offers is the `Series` class:```python    &gt;&gt;&gt; from dicom_parser import Series    &gt;&gt;&gt; series = Series('/some/dicom/series/')```The `Series` instance allows us to easily query the underlying images' headersusing its `get` method:```python    # Single value    &gt;&gt;&gt; series.get('EchoTime')    3.04    # Multiple values    &gt;&gt;&gt; series.get('InstanceNumber')    [1, 2, 3]    # No value    &gt;&gt;&gt; series.get('MissingKey')    None    # Default value    &gt;&gt;&gt; series.get('MissingKey', 'default_value')    'default_value'```Similarly to the `Image` class, we can also use the indexing operator:```python    # Single value    &gt;&gt;&gt; series['RepetitionTime']    7.6    # Multiple values    &gt;&gt;&gt; series['SOPInstanceUID']    [&quot;1.123.1241.123124124.12.1&quot;,     &quot;1.123.1241.123124124.12.2&quot;,     &quot;1.123.1241.123124124.12.3&quot;]    # No value    &gt;&gt;&gt; series['MissingKey']    KeyError: &quot;The keyword: 'MissingKey' does not exist in the header!&quot;```Another useful feature of the indexing operator is for querying an `Image`instance based on its index in the series:```python    &gt;&gt;&gt; series[6]    dicom_parser.image.Image    &gt;&gt;&gt; series[6].header['InstanceNumber]    7   # InstanceNumber is 1-indexed```The `data` property returns a stacked volume of the images' data:```python    &gt;&gt;&gt; type(series.data)    numpy.ndarray    &gt;&gt;&gt; series.data.shape    (224, 224, 208)```#### Siemens 4D dataReading Siemens 4D data[encoded as mosaics](https://nipy.org/nibabel/dicom/dicom_mosaic.html)is also supported:```python    &gt;&gt;&gt; fmri_series = Series('/path/to/dicom/fmri/')    &gt;&gt;&gt; fmri_series.data.shape    (96, 96, 64, 200)```---## Documentation### DependenciesThe [documentation site][the documentation site] is built using[Sphinx][sphinx], to build the HTML pages locally, make sure youhave the required dependencies by using the *docs* modifier forthe installation. Assuming you have cloned the repository andcreated a virtual environment, run:```bashpip install -e .[docs]```from within your cloned project's root.### BuildBuild the site by running:```bashmake html```from within the *\&lt;root\&gt;/docs/* directory.The generated HTML will be found under *\&lt;root\&gt;/docs/_build/html*. Open*index.html* in your browser to view the site.---## Tests### DependenciesTests are executed using [pytest][] and [tox][], and coverage is measured usingthe [coverage][] package. Make sure you have the required dependencies byusing the *test* modifier for the installation. Assuming you have cloned therepository and created a virtual environment, run:```bashpip install -e .[test]```from within your cloned project's root.### Execution#### pytestTo run the tests within your virtual environment, run:```bashpytest tests```#### toxTo run the tests in a number of dedicated virtual environments, simply executethe `tox` command from within the project's root directory. This will test allsupported Python versions, and therefore will only be successful in anenvironment in which all supported Python versions are installed.Use `tox -p` to run the tests in parallel, and `tox -e py3?,py3?` to run asubset of environments (replace `?` with the desired version number).### CoverageTo check code coverage using `coverage`, simply run:```bashcoverage run &amp;&amp; coverage html```Open *\&lt;root\&gt;/htmlcov/index.html* in the browser to view the report.[coverage]: https://coverage.readthedocs.io/[datetime.date]: https://docs.python.org/3/library/datetime.html#available-types[header]: https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.header.Header[pydicom]: https://pydicom.github.io/[pytest]: https://docs.pytest.org/[sphinx]: https://www.sphinx-doc.org/en/master/[the documentation site]: http://dicom-parser.readthedocs.io/?badge=latest[tox]: https://tox.readthedocs.io/</longdescription>
</pkgmetadata>