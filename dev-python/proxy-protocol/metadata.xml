<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>proxy-protocol==============PROXY protocol library with [asyncio][2] server implementation.[![build](https://github.com/icgood/proxy-protocol/actions/workflows/python-package.yml/badge.svg)](https://github.com/icgood/proxy-protocol/actions/workflows/python-package.yml)[![Coverage Status](https://coveralls.io/repos/icgood/proxy-protocol/badge.svg)](https://coveralls.io/r/icgood/proxy-protocol)[![PyPI](https://img.shields.io/pypi/v/proxy-protocol.svg)](https://pypi.python.org/pypi/proxy-protocol)[![PyPI](https://img.shields.io/pypi/pyversions/proxy-protocol.svg)](https://pypi.python.org/pypi/proxy-protocol)[![PyPI](https://img.shields.io/pypi/l/proxy-protocol.svg)](https://pypi.python.org/pypi/proxy-protocol)#### [Specification](https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt)#### [API Documentation](http://icgood.github.io/proxy-protocol/)#### [Docker Image](https://github.com/icgood/proxy-protocol/pkgs/container/proxy-protocol)### Table of Contents* [Install and Usage](#install-and-usage)* [Server Usage](#server-usage)  * [Echo Server](#echo-server)  * [Proxy Server](#proxy-server)* [Development and Testing](#development-and-testing)  * [Type Hinting](#type-hinting)## Install and Usage```bash$ pip install proxy-protocol```Integration with an [`asyncio.start_server`][3] based server is intended to beextremely simple. Here is an example, which will detect PROXY protocol v1 orv2.```pythonfrom functools import partialfrom proxyprotocol import ProxyProtocolfrom proxyprotocol.detect import ProxyProtocolDetectfrom proxyprotocol.reader import ProxyProtocolReaderfrom proxyprotocol.sock import SocketInfoasync def run(host: str, port: int) -&gt; None:    pp_detect = ProxyProtocolDetect()    pp_reader = ProxyProtocolReader(pp_detect)    callback = reader.get_callback(on_connection)    server = await asyncio.start_server(callback, host, port)    async with server:        await server.serve_forever()async def on_connection(reader: StreamReader, writer: StreamWriter,                        info: SocketInfo) -&gt; None:    print(info.family, info.peername)    # ... continue using connection```To simplify PROXY protocol use based on configuration, the version can also beread from a string.```pythonfrom proxyprotocol.version import ProxyProtocolVersionpp_noop = ProxyProtocolVersion.get()pp_detect = ProxyProtocolVersion.get('detect')pp_v1 = ProxyProtocolVersion.get('v1')pp_v2 = ProxyProtocolVersion.get('v2')```The `pp_noop` object in this example is a special case implementation that doesnot read a PROXY protocol header from the stream at all. It may be used todisable PROXY protocol use without complicating your server code.You can also check out the [`proxyprotocol/echo.py`][4] referenceimplementation. If you configure your proxy to send PROXY protocol to`localhost:10007`, you can see it in action:```bash$ proxyprotocol-echo --help$ proxyprotocol-echo detect$ proxyprotocol-echo noop```## Server UsageTwo basic server implementations are included for reference. Using the twotogether can demonstrate the process end-to-end: use `proxyprotocol-server`to proxy connections with a PROXY protocol header to `proxyprotocol-echo`,which then displays the original connection information.The `hostname:port` arguments used by both types of servers are parsed by the[`Address`][8] class, which allows for customization of SSL/TLS and PROXYprotocol versions.### Echo ServerThe `proxyprotocol-echo` server expects inbound connections to provide a PROXYprotocol header indicating the original source of the connection. After theheader, all received data will be echoed back to the client.```bashproxyprotocol-echo --helpproxyprotocol-echo  # run the server```### Proxy ServerThe `proxyprotocol-server` server proxies inbound connections to anotherhost/port endoint, prefixing the outbound connection with a PROXY protocolheader to indicate the original connection information.```bashproxyprotocol-server --helpproxyprotocol-server --service localhost:10000 localhost:10007```## Development and TestingYou will need to do some additional setup to develop and test plugins. Install[Hatch][1] to use the CLI examples below.Run all tests and linters:```console$ hatch run check```Because this project supports several versions of Python, you can use thefollowing to run the checks on all versions:```console$ hatch run all:check```### Type HintingThis project makes heavy use of Python's [type hinting][6] system, with theintention of a clean run of [mypy][7] in strict mode:```consolemypy proxyprotocol test```No code contribution will be accepted unless it makes every effort to use typehinting to the extent possible and common in the rest of the codebase.[1]: https://hatch.pypa.io/latest/install/[2]: https://docs.python.org/3/library/asyncio.html[3]: https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server[4]: https://github.com/icgood/proxy-protocol/blob/main/proxyprotocol/echo.py[6]: https://www.python.org/dev/peps/pep-0484/[7]: http://mypy-lang.org/[8]: https://icgood.github.io/proxy-protocol/proxyprotocol.html#proxyprotocol.server.Address</longdescription>
</pkgmetadata>