<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====================================================pluggy - A minimalist production ready plugin system====================================================|pypi| |conda-forge| |versions| |github-actions| |gitter| |black| |codecov|This is the core framework used by the `pytest`_, `tox`_, and `devpi`_ projects.Please `read the docs`_ to learn more!A definitive example====================.. code-block:: python    import pluggy    hookspec = pluggy.HookspecMarker(&quot;myproject&quot;)    hookimpl = pluggy.HookimplMarker(&quot;myproject&quot;)    class MySpec:        &quot;&quot;&quot;A hook specification namespace.&quot;&quot;&quot;        @hookspec        def myhook(self, arg1, arg2):            &quot;&quot;&quot;My special little hook that you can customize.&quot;&quot;&quot;    class Plugin_1:        &quot;&quot;&quot;A hook implementation namespace.&quot;&quot;&quot;        @hookimpl        def myhook(self, arg1, arg2):            print(&quot;inside Plugin_1.myhook()&quot;)            return arg1 + arg2    class Plugin_2:        &quot;&quot;&quot;A 2nd hook implementation namespace.&quot;&quot;&quot;        @hookimpl        def myhook(self, arg1, arg2):            print(&quot;inside Plugin_2.myhook()&quot;)            return arg1 - arg2    # create a manager and add the spec    pm = pluggy.PluginManager(&quot;myproject&quot;)    pm.add_hookspecs(MySpec)    # register plugins    pm.register(Plugin_1())    pm.register(Plugin_2())    # call our ``myhook`` hook    results = pm.hook.myhook(arg1=1, arg2=2)    print(results)Running this directly gets us::    $ python docs/examples/toy-example.py    inside Plugin_2.myhook()    inside Plugin_1.myhook()    [-1, 3].. badges.. |pypi| image:: https://img.shields.io/pypi/v/pluggy.svg    :target: https://pypi.org/pypi/pluggy.. |versions| image:: https://img.shields.io/pypi/pyversions/pluggy.svg    :target: https://pypi.org/pypi/pluggy.. |github-actions| image:: https://github.com/pytest-dev/pluggy/workflows/main/badge.svg    :target: https://github.com/pytest-dev/pluggy/actions.. |conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pluggy.svg    :target: https://anaconda.org/conda-forge/pytest.. |gitter| image:: https://badges.gitter.im/pytest-dev/pluggy.svg    :alt: Join the chat at https://gitter.im/pytest-dev/pluggy    :target: https://gitter.im/pytest-dev/pluggy?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/ambv/black.. |codecov| image:: https://codecov.io/gh/pytest-dev/pluggy/branch/master/graph/badge.svg    :target: https://codecov.io/gh/pytest-dev/pluggy    :alt: Code coverage Status.. links.. _pytest:    http://pytest.org.. _tox:    https://tox.readthedocs.org.. _devpi:    http://doc.devpi.net.. _read the docs:   https://pluggy.readthedocs.io/en/latest/</longdescription>
</pkgmetadata>