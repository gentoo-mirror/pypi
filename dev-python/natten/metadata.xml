<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![NATTENLogo](https://www.shi-labs.com/natten/assets/img/natten_light.png) &lt;a href=&quot;https://www.shi-labs.com/natten/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/pip%20install%20natten-read%20more-%23C209C1&quot; /&gt;&lt;/a&gt;*Neighborhood Attention Extension*Bringing attention to a neighborhood near you!NATTEN is an extension to PyTorch, which provides the first fast sliding window attention with efficient CUDA kernels. It provides &lt;a href=&quot;https://arxiv.org/abs/2204.07143&quot;&gt;Neighborhood Attention&lt;/a&gt; (local attention)and &lt;a href=&quot;https://arxiv.org/abs/2209.15001&quot;&gt;Dilated Neighborhood Attention&lt;/a&gt; (sparse global attention, a.k.a. dilated local attention) as PyTorch modules for both 1D and 2D data. ## About NATTENSliding window self attention mechanisms have been relatively overlooked, in part due to implementation difficulties.For example, in a paper proposing one of the earliest examples of such methods, [SASA](https://proceedings.neurips.cc/paper/2019/file/3416a75f4cea9109507cacd8e2f2aefc-Paper.pdf), it was noted thatalthough such methods are theoretically efficient, they're relatively slow in practice, compared to convolutions, which have been implemented in most well-known deep learning libraries.That is why we started developing NATTEN, an extension to existing libraries with efficient implementations of sliding windowattention mechanisms, which will enable research in this direction including building powerful hierarchical visiontransformers.For more information, we highly recommend reading our preprints [NAT](https://arxiv.org/abs/2204.07143) and[DiNAT](https://arxiv.org/abs/2209.15001), and check out their [repository](https://github.com/SHI-Labs/Neighborhood-Attention-Transformer).### How fast is NATTEN?The latest version of NATTEN runs pretty fast on Ampere with the latest torch and CUDA versions.![TimePlot](https://www.shi-labs.com/natten/assets/img/cudatime_light.png)![MemPlot](https://www.shi-labs.com/natten/assets/img/cudamemory_light.png)## RequirementsNATTEN supports PyTorch version 1.8 and later, and Python versions 3.7, 3.8, 3.9, 3.10(only torch &gt;= 1.11), and 3.11 (only torch &gt;= 1.13).**NOTE:** The current version of NATTEN comes with Linux-only wheels, and supports Pascal and above (`SM &gt;= 60`, i.e. Tesla P100).Make sure your GPU is supported by referring to [this webpage](https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/).Future versions will extend support to older GPUs.You may try and build from source on Windows, but do so at your own risk.We also welcome contributions in all forms.## Getting started### LinuxJust refer to our website, [shi-labs.com/natten](https://www.shi-labs.com/natten/), select your PyTorch version and the CUDAversion it was compiled with, copy-paste the command and install in seconds!For example, if you're on `torch==2.0.0+cu118`, you should install NATTEN using the following wheel:```bashpip3 install natten -f https://shi-labs.com/natten/wheels/cu118/torch2.0.0/index.html```More generally:```bashpip3 install natten -f https://shi-labs.com/natten/wheels/{cu_version}/torch{torch_version}/index.html```**NOTE:** If you do not specify a wheel URL, pip will collect NATTEN and try to compile on locally, which dependingon your system might take up to 30 minutes.We strongly recommend using our website if you're a Linux user.### MacUnfortunately we are not yet able to build Mac wheels, but you can compile on install, so just run:```bashpip3 install natten```### WindowsNATTEN should support Windows devices with CUDA, but does not yet have Windows wheels.You can try and build NATTEN from source (see below).### Build from sourceOnce you've set up your Python environment and installed PyTorch with CUDA, simply clone and build:```bashpip install ninja # Recommended, not requiredgit clone https://github.com/SHI-Labs/NATTENcd NATTENmake```#### Optional: run unit testsYou can optionally run unit tests to verify building from source finished successfully:```bashmake test```## Catalog- [x] Neighborhood Attention 1D (CUDA)- [x] Neighborhood Attention 2D (CUDA)- [ ] Neighborhood Attention 3D (CUDA)- [x] Neighborhood Attention 1D (CPU)- [x] Neighborhood Attention 2D (CPU)- [ ] Neighborhood Attention 3D (CPU)- [x] Dilation support- [x] Float16 support and utilization- [ ] BFloat16 support- [ ] Kepler and Maxwell (30&lt;=SM&lt;60) support- [ ] Windows builds## UsageSimply import `NeighborhoodAttention1D` or `NeighborhoodAttention2D` from `natten`:```pythonfrom natten import NeighborhoodAttention1Dfrom natten import NeighborhoodAttention2Dna1d = NeighborhoodAttention1D(dim=128, kernel_size=7, dilation=2, num_heads=4)na2d = NeighborhoodAttention2D(dim=128, kernel_size=7, dilation=2, num_heads=4)```### FLOPsWe recommend counting flops through [fvcore](https://github.com/facebookresearch/fvcore).```shellpip install fvcore```Once you have fvcore installed, you can directly use our dedicated FLOP counter:```pythonfrom natten.flops import get_flopsflops = get_flops(model, input)```Alternatively, if you are using fvcore's `FlopCountAnalysis` directly, be sure to add our op handles:```pythonfrom fvcore.nn import FlopCountAnalysisfrom natten.flops import add_natten_handle# ...flop_ctr = FlopCountAnalysis(model, input)flop_ctr = add_natten_handle(flop_ctr)# ...```## LicenseNATTEN is released under the [MIT License](https://github.com/SHI-Labs/NATTEN/blob/main/LICENSE).## Citation```bibtex@inproceedings{hassani2023neighborhood,title        = {Neighborhood Attention Transformer},author       = {Ali Hassani and Steven Walton and Jiachen Li and Shen Li and Humphrey Shi},year         = 2023,        booktitle    = {IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)}}@article{hassani2022dilated,title        = {Dilated Neighborhood Attention Transformer},author       = {Ali Hassani and Humphrey Shi},year         = 2022,url          = {https://arxiv.org/abs/2209.15001},eprint       = {2209.15001},archiveprefix = {arXiv},primaryclass = {cs.CV}}```</longdescription>
</pkgmetadata>