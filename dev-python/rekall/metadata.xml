<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The Rekall Forensic and Incident Response FrameworkThe Rekall Framework is a completely open collection of tools,implemented in Python under the Apache and GNU General Public License,for the extraction and analysis of digital artifacts computer systems.The Rekall distribution is available from:&lt;http://www.rekall-forensic.com/&gt;Rekall should run on any platform that supports[Python](http://www.python.org)Rekall supports investigations of the following 32bit and 64bit memoryimages:- Microsoft Windows XP Service Pack 2 and 3- Microsoft Windows 7 Service Pack 0 and 1- Microsoft Windows 8 and 8.1- Microsoft Windows 10- Linux Kernels 2.6.24 to 4.4.- OSX 10.7-10.12.x.Rekall also provides a complete memory sample acquisition capability for allmajor operating systems (see the tools directory).## Quick startRekall is available as a python package installable via the pippackage manager. To install it, first create a virtal env, switch toit and then install rekall:```$ virtualenv  /tmp/MyEnvNew python executable in /tmp/MyEnv/bin/pythonInstalling setuptools, pip...done.$ source /tmp/MyEnv/bin/activate$ pip install --upgrade setuptools pip wheel$ pip install rekall-agent rekall```For windows, Rekall is also available as a self contained installerpackage. Please check the download page for the most appropriate installer touse [Rekall-Forensic.com](http://www.rekall-forensic.com/)To install from this git repository you will need to use pip--editable and follow the correct order of installation (otherwise pipwill pull released dependencies which might be older):```$ virtualenv  /tmp/MyEnvNew python executable in /tmp/MyEnv/bin/pythonInstalling setuptools, pip...done.$ source /tmp/MyEnv/bin/activate$ pip install --upgrade setuptools pip wheel$ git clone https://github.com/google/rekall.git rekall$ pip install --editable rekall/rekall-lib$ pip install --editable rekall/rekall-core$ pip install --editable rekall/rekall-agent$ pip install --editable rekall```On Windows you will need to install the Microsoft Visual C compilersfor python (for more info see this blog posthttp://rekall-forensic.blogspot.ch/2015/09/installing-rekall-on-windows.html)## Mailing ListsMailing lists to support the users and developers of Rekallcan be found at the following address:    rekall-discuss@googlegroups.com## Licensing and CopyrightCopyright (C) 2007-2011 Volatile SystemsCopyright 2012-2016 Google Inc. All Rights Reserved.All Rights ReservedThis program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public Licenseas published by the Free Software Foundation; either version 2of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program; if not, write to the Free SoftwareFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA02111-1307, USA.## Bugs and SupportThere is no support provided with Rekall. There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULARPURPOSE.If you think you've found a bug, please report it at:    https://github.com/google/rekall/issuesIn order to help us solve your issues as quickly as possible,please include the following information when filing a bug:* The version of rekall you're using* The operating system used to run rekall* The version of python used to run rekall* The suspected operating system of the memory image* The complete command line you used to run rekall## HistoryIn December 2011, a new branch within the Volatility project was created toexplore how to make the code base more modular, improve performance, andincrease usability. The modularity allowed Volatility to be used in GRR, makingmemory analysis a core part of a strategy to enable remote live forensics.  As aresult, both GRR and Volatility would be able to use each other's strengths.Over time this branch has become known as the &quot;scudette&quot; branch or the&quot;Technology Preview&quot; branch.  It was always a goal to try to get these changesinto the main Volatility code base.  But, after two years of ongoingdevelopment, the &quot;Technology Preview&quot; was never accepted into the Volatilitytrunk version.Since it seemed unlikely these changes would be incorporated in the future, itmade sense to develop the Technology Preview branch as a separate project. OnDecember 13, 2013, the former branch was forked to create a new stand-aloneproject named &quot;Rekall.‚Äù This new project incorporates changes made to streamlinethe codebase so that Rekall can be used as a library. Methods for memoryacquisition and other outside contributions have also been included that werenot in the Volatility codebase.Rekall strives to advance the state of the art in memory analysis, implementingthe best algorithms currently available and a complete memory acquisition andanalysis solution for at least Windows, OSX and Linux.## More documentationFurther documentation is available athttp://www.rekall-forensic.com/</longdescription>
</pkgmetadata>