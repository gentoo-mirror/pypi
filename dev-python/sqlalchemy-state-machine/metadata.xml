<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sqlalchemy-state-machine[![CI](https://github.com/bigbag/sqlalchemy-state-machine/workflows/CI/badge.svg)](https://github.com/bigbag/sqlalchemy-state-machine/actions?query=workflow%3ACI)[![codecov](https://codecov.io/gh/bigbag/sqlalchemy-state-machine/branch/main/graph/badge.svg)](https://codecov.io/gh/bigbag/sqlalchemy-state-machine)[![pypi](https://img.shields.io/pypi/v/sqlalchemy-state-machine.svg)](https://pypi.python.org/pypi/sqlalchemy-state-machine)[![downloads](https://img.shields.io/pypi/dm/sqlalchemy-state-machine.svg)](https://pypistats.org/packages/sqlalchemy-state-machine)[![versions](https://img.shields.io/pypi/pyversions/sqlalchemy-state-machine.svg)](https://github.com/bigbag/sqlalchemy-state-machine)[![license](https://img.shields.io/github/license/bigbag/sqlalchemy-state-machine.svg)](https://github.com/bigbag/sqlalchemy-state-machine/blob/master/LICENSE)**sqlalchemy-state-machine** is a helper for add transitions functionality in sqlalchemy.## Installationsqlalchemy-state-machine is available on PyPI.Use pip to install:    $ pip install sqlalchemy-state-machine## Basic Usage```pyimport sqlalchemy as safrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy_state_machine import StateConfig, StateMixinBase = declarative_base()NEW = &quot;new&quot;SENT = &quot;sent&quot;FAILED = &quot;failed&quot;class Event(Base, StateMixin):    __tablename__ = &quot;users&quot;    state_config = StateConfig(        initial=NEW,        states=[NEW, SENT, FAILED],        transitions=[            [&quot;set_sent&quot;, NEW, SENT],            [&quot;set_failed&quot;, NEW, FAILED],        ],    )    id = sa.Column(sa.Integer, primary_key=True)    name = sa.Column(sa.String)    status = sa.Column(sa.String(), nullable=False, index=True)sa.event.listen(Event, &quot;init&quot;, Event.init_state_machine)sa.event.listen(Event, &quot;load&quot;, Event.init_state_machine)event = Event(name=&quot;Event1&quot;)assert event.status == NEWassert event.set_sent()assert event.status == SENT```## Licensesqlalchemy-state-machine is developed and distributed under the Apache 2.0 license.## Reporting a Security VulnerabilitySee our [security policy](https://github.com/bigbag/sqlalchemy-state-machine/security/policy).</longdescription>
</pkgmetadata>