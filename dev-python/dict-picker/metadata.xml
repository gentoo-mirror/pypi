<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dict picker (dictionary picker)Retrieve data from Python dictionaries and lists.## InstallationWith **pip**:```shellpip install -U dict-picker```Or with **conda**:```shellconda install &quot;dict-picker&quot; -c conda-forge```## Usage### `pick_by_path`The `pick_by_path` function is used to extract values from nested dictionaries using a path-like string to identify the desired value. The function takes three arguments: a dictionary object, a string representing the path to the desired value and optionally a delimiter.The path string consists of a sequence of keys, separated by the delimiter character (`'/'` by default), where each key represents a level in the nested dictionary. If the key has the value `'*'`, it matches any key on that level, or sets it to check all items in the list.The function returns the value at the end of the path or a list of values if the path contains a wildcard. If the path is not found, the function returns `None`.```pythonfrom dict_picker import pick_by_pathexample_dict = {    &quot;foo&quot;: &quot;bar&quot;,    &quot;baz&quot;: {        &quot;qux&quot;: &quot;quux&quot;,        &quot;quuux&quot;: &quot;corge&quot;    },    &quot;fred&quot;: {        &quot;wilma&quot;: &quot;betty&quot;,        &quot;barney&quot;: &quot;pebbles&quot;    },    &quot;arr&quot;: [        { 'id': 123 },        { 'id': 456 },        { 'id': 789 },        { 'name': 'bubbles' },    ],}assert pick_by_path(example_dict, &quot;foo&quot;) == &quot;bar&quot;assert pick_by_path(example_dict, &quot;baz/qux&quot;) == &quot;quux&quot;assert pick_by_path(example_dict, &quot;fred/wilma&quot;) == &quot;betty&quot;assert pick_by_path(example_dict, &quot;*/qux&quot;) == &quot;quux&quot;assert pick_by_path(example_dict, &quot;fred/*&quot;) == {&quot;wilma&quot;: &quot;betty&quot;, &quot;barney&quot;: &quot;pebbles&quot;}assert pick_by_path(example_dict, &quot;*/quux&quot;) is Noneassert pick_by_path(example_dict, &quot;arr/*/id&quot;) == [123, 456, 789]# slice syntaxassert pick_by_path(example_dict, &quot;arr/0&quot;) == {'id': 123}assert pick_by_path(example_dict, &quot;arr/1/id&quot;) == 456assert pick_by_path(example_dict, &quot;arr/-1&quot;) == {'name': 'bubbles'}assert pick_by_path(example_dict, &quot;arr/1:/id&quot;) == [456, 789, None]assert pick_by_path(example_dict, &quot;arr/::-2/id&quot;) == [789, 123]```Parameters:- `obj` -- A dictionary object to search for the desired value.- `path: str` -- A string representing the path to the desired value.- `delimiter: str` -- A string used to separate keys in the path string. Default is &quot;/&quot;.Return value:- Returns the value found at the end of the path string, or a list of values if the path contains a wildcard. If the path is not found, None is returned.### `pick_by_paths`The `pick_by_paths` function is similar to `pick_by_path`, but can extract values from multiple paths at once. It takes a dictionary object and a list of path strings as arguments, and returns a list of values found at the end of each path string or None if a path is not found. This works faster than running `pick_by_path` in a loop.```pythonfrom dict_picker import pick_by_path, pick_by_pathsexample_dict = {    &quot;foo&quot;: &quot;bar&quot;,    &quot;baz&quot;: {        &quot;qux&quot;: &quot;quux&quot;,        &quot;quuux&quot;: &quot;corge&quot;    },    &quot;fred&quot;: {        &quot;wilma&quot;: &quot;betty&quot;,        &quot;barney&quot;: &quot;pebbles&quot;    },    &quot;arr&quot;: [        { 'id': 123 },        { 'id': 456 },        { 'id': 789 },        { 'name': 'bubbles' },    ],}assert pick_by_paths(example_dict, [&quot;fred/*&quot;,&quot;*/quux&quot;, &quot;arr/*/id&quot;,]) == [{&quot;wilma&quot;: &quot;betty&quot;, &quot;barney&quot;: &quot;pebbles&quot;}, None, [123, 456, 789]]```## Build from sources### Cargo```shellcurl --proto '=https' --tlsv1.2 -sSf &lt;https://sh.rustup.rs&gt; | sh```For other installation options, see [the official website](https://www.rust-lang.org/tools/install).### MaturinTo bind python and rust, pyo3 is used. The [Maturin](https://github.com/PyO3/maturin) library is used to make it easy to work with.```shellpython -m pip install maturin```### Build```shellpython -m maturin build --release```Wheel will be released under the system and python in which it will be built. [Read more about the compilation](https://www.maturin.rs/distribution.html).The finished wheel can be found in the target/wheels folder.## Build with docker```shelldocker run --rm -v $(pwd):/io ghcr.io/pyo3/maturin build --release  # or other maturin arguments```On macOS, it is better to use docker instead of podman.## Roadmap- [ ] Arbitrary levels skip operator `**`;- [X] Search inside an array of dictionaries. For example:    ```python    {        arr:  [            { id: 123 },            { id: 456 },            { id: 789 },        ]    }    'arr/*/id' -&gt; [123, 456, 789]    ```- [X] Search by tuple of patterns. Returns the result as a list of found values.- [X] add option to access lists via python slice syntax ([issue #2](https://github.com/sarvensis/dict-picker/issues/2)):    ```python    {        arr:  [            { id: 123 },            { id: 456 },            { id: 789 },        ]    }    'arr/1/id' -&gt; 456    'arr/1' -&gt; { id: 123 }    'arr/:2/id' -&gt; [123, 456]    'arr/1:' -&gt; [{ id: 456 },{ id: 789 }]    'arr/::2/id' -&gt; [123, 789]    ```</longdescription>
</pkgmetadata>