<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sklearn-cv-pandasRandomizedSearchCV/GridSearchCV with pandas.DataFrame interface## Why do I want this?- I usually prepare features as pandas.DataFrame- Scikit learn input should be `array-like`. https://scikit-learn.org/stable/glossary.html#term-array-like.- Although it includes pandas.DataFrame, there are some issues;    - It does not support `Int64` data type    - Output model does not remember which columns should be used## Solution- Provide GridSearchCV / RandomizedSearchCV with pandas.DataFrame interface    - Internally preprocess DataFrame to be applicable for sklearn- Output of `fit` command is now original `Model` object, which    - stores column name information    - provides pandas.DataFrame interface for prediction## Installation```pip install sklearn_cv_pandas```## Usage### Configure CV objectInstantiate CV in the same manner as original ones.```from scipy import statsfrom sklearn import linear_modelfrom sklearn_cv_pandas import RandomizedSearchCVestimator = linear_model.Lasso()param_dist = dict(alpha=stats.loguniform(1e-5, 10))cv = RandomizedSearchCV(estimator, param_dist, scoring=&quot;mean_absolute_error&quot;)```### `fit` with pandas.DataFrameOur CV object has new methods `fit_holdout_pandas` and `fit_cv_pandas`.Original ones requires `x` and `y` as `numpy.array`.Instead of numpy array, you can specify one `pandas.DataFrame` and column names for `x` (`feature_columns`), and column name of `y` (`target_column`).```model = cv.fit_cv_pandas(    df, target_column=&quot;y&quot;, feature_columns=[&quot;x{}&quot;.format(i) for i in range(100)], n_fold=5)```### `predict` with pandas.DataFrameYou can run prediction with pandas.DataFrame interface as well.Output of `fit_holdout_pandas` and `fit_cv_pandas` stores `feature_columns` and `target_column`.You can just input `pandas.DataFrame` for prediction into the method `predict`.```model.predict(df)```</longdescription>
</pkgmetadata>