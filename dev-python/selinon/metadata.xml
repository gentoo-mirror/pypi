<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Selinon=======An advanced task flow management on top of`Celery &lt;https://www.celeryproject.org/&gt;`__.|codecov| |PyPI Current Version| |PyPI Implementation| |PyPI Wheel||Travis CI| |Documentation Status| |GitHub stars| |GitHub license||Twitter|Is this project helpful? `Send me a simple warmmessage &lt;https://saythanks.io/to/fridex&gt;`__!Crossroad----------  `PyPI &lt;https://pypi.python.org/pypi/selinon&gt;`__-  `Documentation &lt;https://selinon.readthedocs.io/en/latest/&gt;`__-  `Developers   documentation &lt;https://selinon.readthedocs.io/en/latest/development.html&gt;`__-  `Travis CI &lt;https://travis-ci.org/selinon/selinon&gt;`__Last stable release: `Selinon 1.3.0 &lt;https://pypi.org/project/selinon/1.3.0/&gt;`_TLDR;-----An advanced flow management above Celery (an asynchronous distributedtask queue) written in Python3, that allows you to:-  Dynamically schedule tasks based on results of previous tasks-  Group tasks into flows in simple YAML configuration files-  Schedule flows from other flows (even recursively)-  Store results of tasks in your storages and databases transparently,   validate results against defined JSON schemas-  Do redeployment respecting changes in the YAML configuration files   without purging queues (migrations)-  Track flow progress via the build-in tracing mechanism-  Complex per-task or per-flow failure handling with fallback tasks or   fallback flows-  No DAG limitation in your flows-  Selectively pick tasks in your flow graphs that should be executed   respecting task dependencies-  Make your deployment easy to orchestrate using orchestration tools   such as `Kubernetes &lt;https://kubernetes.io&gt;`__-  Highly scalable Turing complete solution for big data processing pipelines-  And (of course) much more... check   `docs &lt;https://selinon.readthedocs.io&gt;`__YouTube Video-------------Let's explain Selinon using a `YouTube video (click to redirect to YouTube) &lt;https://www.youtube.com/watch?v=Wwwi8e2wI1w&gt;`_... figure:: https://raw.githubusercontent.com/selinon/selinon/master/example/ironwood.jpeg   :alt: Ironwoodland   :align: centerAbout-----This tool is an implementation above Celery that enables you to defineflows and dependencies in flows, schedule tasks based on results ofCelery workers, their success or any external events. If you are notfamiliar with Celery, check out its homepage`www.celeryproject.org &lt;http://www.celeryproject.org&gt;`__ or `this nicetutorial &lt;https://tests4geeks.com/distribute-tasks-python-celery-rabbitmq/&gt;`__.Selinon was originally designed to take care of advanced flows in one ofRed Hat products, where it already served thousands of flows and tasks.Its main aim is to simplify specifying group of tasks, grouping tasksinto flows, handle data and execution dependencies between tasks andflows, easily reuse tasks and flows, model advanced execution units inYAML configuration files and make the whole system easy to model, easyto maintain and easy to debug.By placing declarative configuration of the whole system into YAML filesyou can keep tasks as simple as needed. Storing results of tasks indatabases, modeling dependencies or executing fallback tasks/flows onfailures are separated from task logic. This gives you a power todynamically change task and flow dependencies on demand, optimize dataretrieval and data storage from databases per task bases or even trackprogress based on events traced in the system.Selinon was designed to serve millions of tasks in clusters or datacenters orchestrated by `Kubernetes &lt;https://kubernetes.io&gt;`__,`OpenShift &lt;https://openshift.com&gt;`__ or any other orchestration tool,but can simplify even small systems. Moreover, Selinon can make themeasily scalable in the future and make developer's life much easier.A Quick First Overview----------------------Selinon is serving recipes in a distributed environment, so let's make adinner!If we want to make a dinner, we need to buy ingredients. Theseingredients are bought in ``buyIngredientsFlow``. This flow consists ofmultiple tasks, but let's focus on our main flow. Once all ingredientsare bought, we can start preparing our dinner in ``prepareFlow``. Again,this flow consists of some additional steps that need to be done inorder to accomplish our future needs. As you can see, if anything goeswrong in mentioned flows (see red arrows), we make a fallback to pizzawith beer which we order. To make beer cool, we place it to our``Fridge`` storage. If we successfully finished ``prepareFlow`` aftersuccessful shopping, we can proceed to ``serveDinnerFlow``.Just to point out - grey nodes represent flows (which can be made ofother flows or tasks) and white (rounded) nodes are tasks. Conditionsare represented in hexagons (see bellow). Black arrows represent time ordata dependencies between our nodes, grey arrows pinpoint where resultsof tasks are stored... figure:: https://raw.githubusercontent.com/selinon/selinon/master/example/graph/dinnerFlow.png   :alt: Main dinner flow   :align: centerFor our dinner we need eggs, flour and some additional ingredients.Moreover, we conditionally buy a flower based on our condition. Our task``BuyFlowerTask`` will not be scheduled (or executed) if our conditionis ``False``. Conditions are made of predicates and these predicates canbe grouped as desired with logical operators. You can define your ownpredicates if you want (default are available in``selinon.predicates``). Everything that is bought is stored in``Basket`` storage transparently.Let's visualise our ``buyIngredientsFlow``:.. figure:: https://raw.githubusercontent.com/selinon/selinon/master/example/graph/buyIngredientsFlow.png   :alt: Buy ingredients flow   :align: centerAs stated in our main flow after buying ingredients, we proceed todinner preparation but first we need to check our recipe that is hostedat ``http://recipes.lan/how-to-bake-pie.html``. Any ingredients webought are transparently retrieved from defined storage as defined inour YAML configuration file. We warm up our oven to expected temperatureand once the temperature is reached and we have finished with dough, wecan proceed to baking.Based on the description above, our ``prepareFlow`` will look like thefollowing graph:.. figure:: https://raw.githubusercontent.com/selinon/selinon/master/example/graph/prepareFlow.png   :alt: Prepare flow   :align: centerOnce everything is done we serve plates. As we want to serve plates forall guests we need to make sure we schedule N tasks of type``ServePlateTask``. Each time we run our whole dinner flow, number ofguests may vary so make sure no guest stays hungry. Our``serveDinnerFlow`` would look like the following graph:.. figure:: https://raw.githubusercontent.com/selinon/selinon/master/example/graph/serveDinnerFlow.png   :alt: Serve dinner flow   :align: centerThis example demonstrates very simple flows. The whole configuration canbe found `here &lt;/example/dinner.yaml&gt;`__. Just check it out how you caneasily define your flows! You can find a script that visualises graphsbased on the YAML configuration in `this repo &lt;/example/&gt;`__ as well.More info---------The example was intentionally simplified. You can also parametrize yourflows, schedule N tasks (where N is a run-time evaluated variable), doresult caching, placing tasks on separate queues in order to be capableof doing fluent system updates, throttle execution of certain tasks intime, propagate results of tasks to sub-flows etc. Just check`documentation &lt;https://selinon.github.io/selinon&gt;`__ for more info.Live Demo---------A live demo with few examples can be found`here &lt;https://github.com/selinon/demo&gt;`__. Feel free to check it out.Installation------------::    $ pip3 install selinonAvailable extras:* celery - needed if you use Celery* mongodb - needed for MongoDB `storage adapter &lt;http://selinon.readthedocs.io/en/latest/storage.html&gt;`_* postgresql - needed for PostgreSQL `storage adapter &lt;http://selinon.readthedocs.io/en/latest/storage.html&gt;`_* redis - needed for Redis `storage adapter &lt;http://selinon.readthedocs.io/en/latest/storage.html&gt;`_* s3 - needed for S3 `storage adapter &lt;http://selinon.readthedocs.io/en/latest/storage.html&gt;`_* sentry - needed for `Sentry support &lt;http://selinon.readthedocs.io/en/latest/trace.html#sentry-integration&gt;`_Extras can be installed via:::    $ pip3 install selinon[celery,mongodb,postgresql,redis,s3,sentry]Feel free to select only needed extras for your setup... |codecov| image:: https://codecov.io/gh/selinon/selinon/branch/master/graph/badge.svg.. |PyPI Current Version| image:: https://img.shields.io/pypi/v/selinon.svg.. |PyPI Implementation| image:: https://img.shields.io/pypi/implementation/selinon.svg.. |PyPI Wheel| image:: https://img.shields.io/pypi/wheel/selinon.svg.. |Travis CI| image:: https://travis-ci.org/selinon/selinon.svg?branch=master.. |Documentation Status| image:: https://readthedocs.org/projects/selinon/badge/?version=latest.. |GitHub stars| image:: https://img.shields.io/github/stars/selinon/selinon.svg.. |GitHub license| image:: https://img.shields.io/badge/license-BSD-blue.svg.. |Twitter| image:: https://img.shields.io/twitter/url/http/github.com/selinon/selinon.svg?style=social</longdescription>
</pkgmetadata>