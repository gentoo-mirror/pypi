<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## ReplBuilder![PyPI version](http://img.shields.io/pypi/v/replbuilder.svg)`pip install replbuilder`Quickly build a repl cli prompt for custom commands in python.`argparse` is used for quick and easy parsing interface, you should be able to utilize the full power of `argparse` as your command parser.A globally scoped context object can be optionally passed into each command, making context sharing and state possible. It also supports custom exception handlers, and aliases, and more.This is a standalone package, it does not depend on any other packages.For example, see project [hnterminal](https://github.com/Aperocky/hnterminal), browse, vote and comment on HN in your terminal.## Examplesee [example calculator repl](example_calculator_repl.py) for example implementation. The gist can be concluded in a few lines:```add_cmd = ReplCommand(&quot;add&quot;, Calculator.basic_parser(), calculator.add, &quot;Add 2 numbers&quot;)sub_cmd = ReplCommand(&quot;sub&quot;, Calculator.basic_parser(), calculator.sub, &quot;Subtract second number from first&quot;)fact_cmd = ReplCommand(&quot;factorial&quot;, Calculator.factorial_parser(), calculator.factorial, &quot;factorial with exception handler&quot;, exception_handler=exception_handler)say_cmd = ReplCommand(&quot;cowsay&quot;, Cow.get_cowsay_parser(), cow.cowsay, &quot;say stuff, demo optional and context usage&quot;, use_context=True)mood_cmd = ReplCommand(&quot;cowmood&quot;, argparse.ArgumentParser(), cow.cowmood, &quot;Mood of the cow changes with global context object&quot;, use_context=True)calc_commands = [add_cmd, sub_cmd, fact_cmd]cow_commands = [say_cmd, mood_cmd]context = ContextObj()runner = ReplRunner(&quot;calculator&quot;, context) # context is optional, but it helps maintaining state and avoiding duplicate work.runner.add_commands(calc_commands, namespace=&quot;Calculator&quot;) # namespace is optionalrunner.add_commands(cow_commands, namespace=&quot;Cow&quot;)runner.run()```run it `python example_calculator_repl.py`Part of the repl is colorized for better visibility:![example repl run](demo.jpg)</longdescription>
</pkgmetadata>