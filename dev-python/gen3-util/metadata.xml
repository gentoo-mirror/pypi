<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Gen3 UtilitiesUtilities to manage Gen3 schemas, projects and submissions.## Installation```# optionally$python3 -m venv venv ; source venv/bin/activatepip install gen3_util$ gen3_utilmsg: Version 0.0.1```## Use```$gen3_util --helpUsage: gen3_util [OPTIONS] COMMAND [ARGS]...  Gen3 Management UtilitiesOptions:  --config TEXT              Path to config file. GEN3_UTIL_CONFIG  --format [yaml|json|text]  Result format. GEN3_UTIL_FORMAT  [default: yaml]  --cred TEXT                See https://uc-cdis.github.io/gen3-user-                             doc/appendices/api-gen3/#credentials-to-query-                             the-api. GEN3_API_KEY  --state_dir TEXT           Directory for file transfer state                             GEN3_UTIL_STATE_DIR  [default: ~/.gen3/gen3_util]  --help                     Show this message and exit.Commands:  projects  Manage Gen3 projects.  buckets   Manage Gen3 buckets.  meta      Manage meta data.  files     Manage file buckets.  access    Manage access requests.  config    Configure this utility.```## Connectivity* Leverages Gen3Auth  [See](https://uc-cdis.github.io/gen3-user-doc/appendices/api-gen3/#credentials-to-query-the-api.)* Store the `credentials.json` file in ~/.gen3/credentials.json or specify location with either env[GEN3_API_KEY], or `--cred` parameter## Use cases&gt; I need to verify connectivity.```$ gen3_util projects pingmsg: OK connected to endpoint https://aced-training.compbio.ohsu.edu```&gt; I need to see what projects exist```$ gen3_util projects lsendpoint: https://aced-training.compbio.ohsu.edumsg: OKprojects:- /programs- /programs/aced- /programs/aced/project- /programs/aced/project/MCF10A- /programs/aced/projects- /programs/aced/projects/Alcoholism- /programs/aced/projects/Alzheimers- /programs/aced/projects/Breast_Cancer- /programs/aced/projects/Colon_Cancer- /programs/aced/projects/Diabetes- /programs/aced/projects/HOP- /programs/aced/projects/Lung_Cancer- /programs/aced/projects/MCF10A- /programs/aced/projects/NVIDIA- /programs/aced/projects/Prostate_Cancer- /programs/aced/projects/ohsu_download_testing```&gt; I need to see what buckets are associated with the commons```$ gen3_util buckets lsbuckets:  GS_BUCKETS: {}  S3_BUCKETS:    aced-default:      endpoint_url: https://minio-default.compbio.ohsu.edu      region: us-east-1    aced-manchester:      endpoint_url: https://minio-manchester.compbio.ohsu.edu      region: us-east-1    aced-ohsu:      endpoint_url: https://minio-ohsu.compbio.ohsu.edu      region: us-east-1    aced-stanford:      endpoint_url: https://minio-stanford.compbio.ohsu.edu      region: us-east-1    aced-ucl:      endpoint_url: https://minio-ucl.compbio.ohsu.edu      region: us-east-1endpoint: https://aced-training.compbio.ohsu.edumsg: OK```&gt; I need to create a project```text$ gen3_util projects touch aced-MyExperimentprojects:  aced-MyExperiment:    exists: truemessages:- Created program:aced Program is updated!```&gt; I need to assign default policies to that project```text$ gen3_util projects add policies aced-MyExperimentmsg: Approve these requests to assign default policies to aced-MyExperimentcommands:- gen3_util access update 24f047d7-0e7c-43c6-bab6-61e2d385c71a SIGNED- gen3_util access update 293c6cd1-7ab7-420f-bafb-34319589eac4 SIGNED```&gt; I need to add a user to that project```text$ gen3_util projects add user aced-MyExperiment linus.pauling@osu.edumsg: Approve these requests to add linus.pauling@osu.edu to aced-MyExperimentcommands:- gen3_util access update 293c6cd1-7ab7-420f-bafb-34319589eac4 SIGNED```&gt; Before proceeding, I need to sign those equests```textgen3_util access update xxxxxx SIGNED``````text&gt; I want to create a simple project structure with a set of files```$ gen3_util meta  import dir tests/fixtures/dir_to_study/ tmp/foo --project_id aced-MyExperimentsummary:  ResearchStudy:    count: 1  DocumentReference:    count: 5    size: 6013814msg: OK```&gt; I want need to do something a bit more complex, for example, I want to create a project structure with a set of files, but I need to specify the `Patient` and `Specimen` based on the path of the file.```textgen3_util meta  import dir tests/fixtures/dir_to_study_with_meta/ tmp/foometa --project_id aced-foometa --plugin_path ./tests/unit/pluginstests/fixtures/dir_to_study_with_meta/├── file-2.csv├── p1│   ├── s1│   │   └── file-3.pdf│   ├── s2│   │   └── file-4.tsv│   └── s3│       └── file-5└── p2    └── s4        └── file-1.txtWill produce the following meta data:summary:  ResearchStudy:    count: 1  Patient:    count: 2  Specimen:    count: 4  DocumentReference:    count: 5    size: 6013814```For more see [test_meta_plugin](./tests/unit/meta/test_plugins.py)&gt; I need to upload the meta data about those files to the instance```$gen3_util meta cp tmp/foo bucket://aced-development-ohsu-data-bucket --project_id aced-MyExperimentmsg: Uploaded /var/folders/2c/hffqqtr94nv64tjy0xrl38r89k1sty/T/tmpacozhhoo/_aced-MyExperiment_meta.zip```&gt; I need to request or manage access to a project```$ gen3_util accessUsage: gen3_util access [OPTIONS] COMMAND [ARGS]...  Manage access requests.Options:  --help  Show this message and exit.Commands:  touch   Create a request for read access.  update  Update the request's approval workflow.  ls      List current user's requests.  cat     Show details of a specific request.```## Development Setup```python3 -m venv venvsource venv/bin/activatepip install -r requirements.txtpip install -r requirements-dev.txtpip install -e .```## Test* fixtures - data for testing environment```tests/fixtures/└── custom_config    └── config.yaml  # testing configuration```* test parameters```tests/├── integration│   └── conftest.py└── unit    └── conftest.py```* running tests```$ pytest --cov=gen3_util 88%```* pre commit testsA reasonable set of checks, including running unit tests prior to each commit.  You can run these tests on demand by:```$ pre-commit install$ pre-commit run --all-filesdebug statements (python)................................................Passedcheck python ast.........................................................Passedfix utf-8 byte order marker..............................................Passedcheck json...........................................(no files to check)Skippeddetect private key.......................................................Passedcheck yaml...............................................................Passedcheck for added large files..............................................Passedcheck that scripts with shebangs are executable..........................Passedcheck for case conflicts.................................................Passedfix end of files.........................................................Passedtrim trailing whitespace.................................................Passedmixed line ending........................................................Passedrun our unit tests.......................................................Passed```## Distribution- PyPi```# update pypi# pypi credentials - see https://twine.readthedocs.io/en/stable/#environment-variablesexport TWINE_USERNAME=  #  the username to use for authentication to the repository.export TWINE_PASSWORD=  # the password to use for authentication to the repository.# this could be maintained as so: export $(cat .env | xargs)rm -r dist/python3  setup.py sdist bdist_wheeltwine upload dist/*```</longdescription>
</pkgmetadata>