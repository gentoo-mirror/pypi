<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IPParserThe IPParser Python library was created to simplify accepting IP addresses, DNS names, and target / host information in security or network based tooling.User inputs are parsed to provide an iterable list for further action. If called with ```resolve=True```, ipparser will attempt to perform an &quot;A&quot; record lookup and return the first resolved address associated with the host.#### Inputs:IPParser currently accepts the following user inputs:* Single IP (192.168.1.10)* IP ranges (192.168.1.1-55)* Multiple IP's (192.168.1.3,192.168.1.7,m8sec.dev)* CIDR Ranges /8-/32 (192.168.1.0/24)* URL's (https://m8sec.dev)* IP:Port (192.168.1.1:8080)* DNS Names (m8sec.dev)* TXT files (Containing any of the items listed)* Nmap XML Reports* Read from STDIN## Install```bashpip3 install ipparser```OR ```bashgit clone https://github.com/m8sec/ipparsercd ipparserpython3 setup.py install```## (Primary) Usage:The IPParser function can be called with the following arguments (shown with their default values):* ```open_ports=False``` - Return IP:Port notation for all open ports found (Nmap XML only)* ```exit_on_error=True``` - Exit on error while parsing user input.* ```resolve=False``` - Resolve any DNS names identified, to IPv4 addresses, and append to output.* ```ns=[]``` - Define name servers for DNS lookups.## Examples#### Standard Usage```python&gt;&gt;&gt; from ipparser import ipparser&gt;&gt;&gt; ipparser('192.168.1.3-5')['192.168.1.3', '192.168.1.4', '192.168.1.5']&gt;&gt;&gt; ipparser('yahoo.com',resolve=True)['74.6.143.26']&gt;&gt;&gt; ipparser('192.168.1.1,yahoo.com')['192.168.1.1', 'yahoo.com']```#### Argparse Integration - Required Positional Argument:```pythonfrom ipparser import ipparserfrom argparse import ArgumentParserargs = ArgumentParser(description='ipparser integration with argparse')args.add_argument(dest='positional_host', nargs='+', type=lambda x: ipparser(x, resolve=False), help='Host Input')args = args.parse_args()``````Namespace(positional_host=[['192.168.1.1']])```</longdescription>
</pkgmetadata>