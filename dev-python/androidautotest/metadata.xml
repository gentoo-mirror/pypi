<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AndroidTestThe package is for android auto test, based on Python enviroment.Basic thought is using ADB (Android Debug Bridge) to send command to Android test Phone connected with the PC and match picture by match template algorithm in opencv-python.## Requirement 1.ADB ([Android Debug Bridge](https://github.com/15045120/AndroidTest/tree/master/dependency/adb))2.ASM ([Android Screen Monitor](https://github.com/15045120/AndroidTest/blob/master/dependency/asm.jar)) Use to capture partial picture, and you need to install JDK in your computer before running it. Then adjust zoom to 50%, you can also set zoom to other size, but need to add some code in your case source file after your create your case file:```python# adjust asm zoom to other size, 25% ASM.ZOOM_SIZE = 25```3.Tesseract ([Tesseract-OCR](https://github.com/tesseract-ocr/tesseract)) If you want to use the mechod 'image_to_string' in the 'androidautotest.api' which can recognize text in pictures, you need to install Tesseract and install testdata necessary like chinese 'chi_sim'.## Installation &amp; Usage 1.Install androidautotest```bashpip install androidautotest ```Follow information indicate you have installed androidautotest successfully.```bash&gt; python -m androidautotestusage:  androidautotest --installdep  androidautotest --startasm  androidautotest --newcase &lt;NEWCASE&gt; --savedir &lt;SAVEDIR&gt;  androidautotest --casedir &lt;CASEDIR&gt; --device &lt;DEVICE&gt; --times &lt;TIMES&gt;A framework to run test case for android automated testoptional arguments:  -V, --version        Print version and exit  -h, --help           Print this help message and exitinstall dependency:  --installdep         install dependency of androidautoteststart asm:  --startasm           start Android Screen Monitorcreate case:  --newcase &lt;NEWCASE&gt;  New case name to create  --savedir &lt;SAVEDIR&gt;  Path to save new caserun case:  --casedir &lt;CASEDIR&gt;  Case path to run  --device &lt;DEVICE&gt;    Device to switch  --times &lt;TIMES&gt;      Times of case running``` 2.install requirements ```bashpython -m androidautotest --installdep``` 3.start Android Screen Monitor(First, connect your Android Phone with PC, and open adb debug mode), then run follow command:```bashpython -m androidautotest --startasm``` 4.create a new case to start your test task with Android Phone(For example: to create a new case named 'case001').```bashpython -m androidautotest --newcase case001 --savedir E:\AndroidTest\workspace```## DocumentationYou can find the complete AndroidTest API documentation on  [readthedocs](http://androidtest.readthedocs.io/).## Examples```python# -*- coding: UTF-8 -*-from androidautotest.api import *# to homekeyevent(HOME)keyevent(HOME,device='HMKNW17421063974')# to FileBrowserwhile not exists(Template(r'pic\20191215121636.png')):flick((400,400),DIR_LEFT,step=2)touch(Template(r'pic\20191215121636.png'))touch(Template(r'pic\20191215134814.png'))# not in top screen of FileBrowserif exists(Template(r'pic\20191215143440.png')):touch(Template(r'pic\20191215142057.png'))text('15045120')else:touch([530,142])text('15045120')# 15045120 is in screenassert_exists(Template(r'pic\20191215142425.png'))end()```Once you finish your code writing, you can run your case.1.If you connect one Android Phone with your PC, and run for once time, simple wirte as following```bashpython -m androidautotest --casedir E:\AndroidTest\workspace\case001.air --device HMKNW17421063974 --times 5```2.If you connect more than one Android Phone with your PC, run case with Android Phone which's serial number is 'HMKNW17421063974' for 5 times, you can write as following.```bashpython -m androidautotest --casedir E:\AndroidTest\workspace\case001.air --device HMKNW17421063974 --times 5```And there are three log files you can use to analyze your test plan after run your case.In case001.air\log\case001.log.XXX&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;File Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;log_case001_XXX.txt&lt;/td&gt;&lt;td&gt;all log output&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;serial_log_case001_XXX.txt&lt;/td&gt;&lt;td&gt;adb log output &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;report_case001_XXX.html&lt;/td&gt;&lt;td&gt;report of case run&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</longdescription>
</pkgmetadata>