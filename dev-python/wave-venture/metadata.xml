<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Wave Venture TE ClientThis is the Python interface to the Wave Venture TE software.## WarningThis is pre-release code, so should be be treated as unstable.Releases may also be breaking as the API is defined.It also means that the documentation is sparse, and any errors youmight encounter might be hard to parse.Please contact [support@wave-venture.com](support@wave-venture.com) if you need some assistance.## PrerequisitesYou will need the following prerequisites:- A active Wave Venture TE software account and license.- The [Wave Venture TE software](https://docs.wave-venture.com/download/) installed on the machine.- To be logged in to the Wave Venture TE software with your active account.- [Python 3.8 or higher](https://www.python.org).## Install```console$ pip install wave-venture```## UsageYou should be able to import it with:```pythonimport wave_venture as wv```### Document Creation`not yet implemented.`### Document LoadingYou can load existing documents with their `uid`. This can be found in theSoftware by right clicking a document in the Document History Panel.```pythonimport wave_venture as wvdoc = wv.load(uid=&quot;doc_0189c12160974f8482a25611728dea82&quot;)```### Resolving Results PathsYou can resolve results paths on a document using the `wv.resolve` function.This returns a `list` of `dicts`, where each `list` entry is a permutation,and each `dict` is that permutations results path values (keyed with the results paths name).Results paths can also be copy and pasted from the software from the Results Path Browser. ```pythonimport wave_venture as wv# Load a finalised documentdoc = wv.load(uid=&quot;doc_0189c12160974f8482a25611728dea82&quot;)all_permutations = wv.resolve(doc, &quot;&quot;&quot;logistics.farm.from_datelogistics.farm.to_datelogistics.farm.availability&quot;&quot;&quot;)for permutation in all_permutations:    print(permutation[&quot;uid&quot;], permutation[&quot;logistics.farm.from_date&quot;])```Results on the results paths are returned as either native Python types such as`int`, `float`, `datetime.datetime`, etc. For any of the array/matrix-likeresults, these are put into a [`xarray.Dataset`](https://docs.xarray.dev/en/stable/).| Results Path Type | Python Type || --- | --- || `array` | `xarray.Dataset` || `boolean` | `bool` || `complex` | `complex` || `datetime` | `datetime.datetime` || `number` | `int` or `float` || `string` | `str` |### PlottingYou can use the plotter build into the software from this python interfaceto generate plots that you may be unable to define within the software itself.You can also just take the results and use them with your preferred plotting library, such as [`matplotlib`](https://matplotlib.org).Otherwise you can make use of the software's plotter:#### Line```pythonwv.plot(    &quot;line&quot;,    data=[        permutation[&quot;logistics.farm.availability&quot;],    ],    style={        &quot;graph_styles&quot;: [            {                &quot;color&quot;: 0,                &quot;line_style&quot;: &quot;step_left&quot;,                &quot;line_pen&quot;: &quot;solid&quot;,                &quot;line_width&quot;: 1,                &quot;point_shape&quot;: None,                &quot;point_size&quot;: 0,                &quot;name&quot;: None,            },        ],        &quot;label_x&quot;: &quot;Date &amp; Time&quot;,        &quot;label_y&quot;: &quot;Availability (%)&quot;,    },    config={},    size=(1280, 720),    save_path=&quot;./availability.png&quot;,    save_replace_existing=True,)```#### Scatter```pythonwv.plot(    &quot;scatter&quot;,    data=[        permutation[&quot;resource.variables.swh&quot;],        permutation[&quot;resource.variables.tp&quot;],    ],    style={        &quot;label_x&quot;: &quot;SWH (m)&quot;,        &quot;label_y&quot;: &quot;TP (s)&quot;,        &quot;color&quot;: &quot;#58abd4&quot;,        &quot;line_pen&quot;: &quot;solid&quot;,        &quot;line_style&quot;: &quot;none&quot;,        &quot;line_width&quot;: 1,        &quot;point_shape&quot;: &quot;x&quot;,        &quot;point_size&quot;: 7    },    config={},    size=(1280, 720),    save_path=&quot;./swh_tp_scatter.png&quot;,    save_replace_existing=True,)```#### Histogram```pythonwv.plot(    &quot;histogram&quot;,    data=[        permutation[&quot;resource.variables.swh&quot;],    ],    style={},    config={        &quot;bin_auto&quot;: True,        &quot;bin_min&quot;: 0,        &quot;bin_max&quot;: 10,        &quot;bin_count&quot;: 100,        &quot;bin_width&quot;: 0.1,        &quot;count_method&quot;: &quot;normalised&quot;,        &quot;four_seasons&quot;: True,        &quot;start_month&quot;: 1,        &quot;show_cdf&quot;: True    },    size=(1280, 720),    save_path=&quot;./swh_histogram.png&quot;,    save_replace_existing=True,)```#### Joint-Probability```pythonwv.plot(    &quot;joint_probability&quot;,    data=[        permutation[&quot;resource.variables.swh&quot;],        permutation[&quot;resource.variables.tp&quot;],    ],    style={        &quot;label_x&quot;: &quot;SWH (m)&quot;,        &quot;label_y&quot;: &quot;TP (s)&quot;    },    config={        &quot;bin_auto_x&quot;: True,        &quot;bin_min_x&quot;: 0,        &quot;bin_max_x&quot;: 10,        &quot;bin_count_x&quot;: 100,        &quot;bin_width_x&quot;: 0.1,        &quot;bin_auto_y&quot;: True,        &quot;bin_min_y&quot;: 0,        &quot;bin_max_y&quot;: 10,        &quot;bin_count_y&quot;: 100,        &quot;bin_width_y&quot;: 0.1,        &quot;count_method&quot;: &quot;normalised&quot;,        &quot;four_seasons&quot;: True,        &quot;start_month&quot;: 1    },    size=(1280, 720),    save_path=&quot;./swh_tp_joint_probability.png&quot;,    save_replace_existing=True,)```#### Seasonality```pythonwv.plot(    &quot;seasonality&quot;,    data=[        permutation[&quot;resource.variables.swh&quot;],    ],    style={        # For Line Type Only        &quot;min&quot;: {            &quot;color&quot;: &quot;#58abd4&quot;,            &quot;line_pen&quot;: &quot;solid&quot;,            &quot;line_style&quot;: &quot;line&quot;,            &quot;line_width&quot;: 1,            &quot;point_shape&quot;: &quot;&quot;,            &quot;point_size&quot;: 7        },        &quot;p10&quot;: { ... },        &quot;p25&quot;: { ... },        &quot;mean&quot;: { ... },        &quot;p50&quot;: { ... },        &quot;p75&quot;: { ... },        &quot;p90&quot;: { ... },        &quot;max&quot;: { ... },          # For Box Type Only        &quot;color&quot;: &quot;#58abd4&quot;,          # Valid for both types        &quot;label_y&quot;: &quot;swh time series&quot;,    },    config={        &quot;period&quot;: &quot;monthly&quot;,        &quot;type&quot;: &quot;line&quot;,    },    size=(1280, 720),    save_path=&quot;./swh_seasonality.png&quot;,    save_replace_existing=True,)```#### Box Plot```pythonwv.plot(    &quot;box&quot;,    data=[        permutation[&quot;resource.variables.swh&quot;],    ],    style={        &quot;color&quot;: &quot;#58abd4&quot;,        &quot;label_y&quot;: &quot;swh time series&quot;,    },    config={},    size=(1280, 720),    save_path=&quot;./swh_box.png&quot;,    save_replace_existing=True,)```#### Rose Plot```pythonwv.plot(    &quot;rose&quot;,    data=[        permutation[&quot;resource.variables.wind_direction&quot;],        permutation[&quot;resource.variables.wind_speed&quot;],    ],    style={        &quot;label_angular&quot;: &quot;Wind Direction&quot;,        &quot;label_radial&quot;: &quot;Wind Speed (m/s)&quot;    },    config={        &quot;angle_type&quot;: &quot;cardinal&quot;,  # or &quot;angle&quot;        # only for cardinal angles        &quot;north&quot;: 0,        &quot;east&quot;: 90,        # common        &quot;bin_auto_angular&quot;: True,        &quot;bin_min_angular&quot;: 0,        &quot;bin_max_angular&quot;: 10,        &quot;bin_count_angular&quot;: 100,        &quot;bin_width_angular&quot;: 0.1,        &quot;bin_auto_radial&quot;: True,        &quot;bin_min_radial&quot;: 0,        &quot;bin_max_radial&quot;: 10,        &quot;bin_count_radial&quot;: 100,        &quot;bin_width_radial&quot;: 0.1,        &quot;four_seasons&quot;: True,        &quot;start_month&quot;: 1    },    size=(1280, 720),    save_path=&quot;./swh_seasonality.png&quot;,    save_replace_existing=True,)```#### Pie Plot```pythonwv.plot(    &quot;rose&quot;,    data=[        permutation[&quot;finance.cash_flow.cash_flow_node.capex#percentile:P90#time.sum#value&quot;],        permutation[&quot;finance.cash_flow.cash_flow_node.opex#percentile:P90#time.sum#value&quot;],        permutation[&quot;finance.cash_flow.cash_flow_node.decex#percentile:P90#time.sum#value&quot;],    ],    style={    },    config={    },    size=(1280, 720),    save_path=&quot;./swh_seasonality.png&quot;,    save_replace_existing=True,)```</longdescription>
</pkgmetadata>