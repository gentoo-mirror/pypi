<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>log-with-context--a thread-local, context-preserving Python logger==================================================================``log-with-context`` is a Python logger that saves variables in athread-local context to be passed as `extra` to Python`logging &lt;https://docs.python.org/3/library/logging.html&gt;`_ methods.Installation------------This library is available on PyPI and can be installed with.. code:: bash    python3 -m pip install log-with-contextUsage-----This library provides a wrapped Python logging.Logger thatadds a shared context to each logging message, passed asthe `extra` parameter.**You will need an additional library** (like`JSON-log-formatter &lt;https://pypi.org/project/JSON-log-formatter/&gt;`_)**to actually output the logging messages**. We avoided putting thisfunctionality in this library to keep it lightweight and flexible.We assumed that you already have a preferred way to format yourlogging messages... code:: python    import logging    import logging.config    from log_with_context import add_logging_context, Logger    logging.config.dictConfig({        &quot;version&quot;: 1,        &quot;disable_existing_loggers&quot;: True,        &quot;formatters&quot;: {            &quot;json&quot;: {&quot;()&quot;: &quot;json_log_formatter.JSONFormatter&quot;},        },        &quot;handlers&quot;: {            &quot;console&quot;: {                &quot;formatter&quot;: &quot;json&quot;,                &quot;class&quot;: &quot;logging.StreamHandler&quot;,            }        },        &quot;loggers&quot;: {            &quot;&quot;: {&quot;handlers&quot;: [&quot;console&quot;], &quot;level&quot;: &quot;INFO&quot;},        },    })    LOGGER = Logger(__name__)    LOGGER.info(&quot;First message. No context&quot;)    with add_logging_context(current_request=&quot;hi&quot;):        LOGGER.info(&quot;Level 1&quot;)        with add_logging_context(more_info=&quot;this&quot;):            LOGGER.warning(&quot;Level 2&quot;)        LOGGER.info(&quot;Back to level 1&quot;)    LOGGER.error(&quot;No context at all...&quot;)The above program logs the following messages to standard error:.. code:: json    {&quot;message&quot;: &quot;First message. No context&quot;, &quot;time&quot;: &quot;2021-04-08T16:37:23.126099&quot;}    {&quot;current_request&quot;: &quot;hi&quot;, &quot;message&quot;: &quot;Level 1&quot;, &quot;time&quot;: &quot;2021-04-08T16:37:23.126336&quot;}    {&quot;current_request&quot;: &quot;hi&quot;, &quot;more_info&quot;: &quot;this&quot;, &quot;message&quot;: &quot;Level 2&quot;, &quot;time&quot;: &quot;2021-04-08T16:37:23.126389&quot;}    {&quot;current_request&quot;: &quot;hi&quot;, &quot;message&quot;: &quot;Back to level 1&quot;, &quot;time&quot;: &quot;2021-04-08T16:37:23.126457&quot;}    {&quot;message&quot;: &quot;No context at all...&quot;, &quot;time&quot;: &quot;2021-04-08T16:37:23.126514&quot;}This example may look trivial, but it is very handy to maintain alogging context up and down a Python call stack without havingto pass additional variables to the functions and methodsthat you call.Implementation details----------------------Logging contexts are stored as thread-local variables. If you wantto share information between threads, you must create a Loggingcontext in each thread with the same information.Similarly, logging contexts are *deliberately not copied* whencreating subprocesses. This is done to minimize bugs and make surethat log-with-context behaves in the exact same manner acrossoperating systems.</longdescription>
</pkgmetadata>