<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- Updater documentation master file, created bysphinx-quickstart on Thu Mar 14 21:29:00 2019.You can adapt this file completely to your liking, but it should at leastcontain the root `toctree` directive. --&gt;# Version updater for components in your codebase## Problem to solveIn the project where there are many components to track new versions (dockerimages and pypi packages) this tool automates finding new versions,running tests and commit changes to git.## TL;DRCreate YAML file with definition of your components (see example in[tests/test_files/components.yaml](https://github.com/paterit/version-checker/blob/master/tests/test_files/components.yaml) ). Place `components.yaml` in theroot of your project directory and run:```python&gt;&gt;&gt; python -m updater check10 components to check1 components to update``````python&gt;&gt;&gt; python -m updater check --verbose10 components to check1 components to updatepymongo - current: 3.12.1 next: 3.12.2```This will check versions for all components defined in `components2.yaml`:```python&gt;&gt;&gt; python -m updater --file=/path/to/your/components2.yaml check10 components to check1 components to update```Here is an example of update script which will do checking and print out updated config file without making any changes in your files:```python&gt;&gt;&gt; python -m updater --dry-run --print update```Here is full example of using update command:```python&gt;&gt;&gt; python -m updater update --git-commit --test-command=&quot;make test&quot;```It will, for each defined component in `components.yaml` from the local directory:1. Check if there are new versions of your components available2. Replace in all files version numbers to the newest one3. Run tests4. Add and commit changes to git## InstallationInstall via pypi packages repository:```python&gt;&gt;&gt; python -m pip install updater```## YAML Config file formatExample of components definition:```# name of the componentpython:   # docker-image or pypi   component-type: docker-image   # this version tak needs to aligned with versions in files   # if you put &quot;latest&quot; then check and update will be skipped for this component   current-version: 3.6.6-alpine3.8   # for docker-image component-type only   docker-repo: library   # filter used to get all possible versions   filter: /^\d+\.\d+\.\d+-alpine\d+\.\d+$/   # files in which version number should be replaced   files: [locust/Dockerfile, locust/some_script.sh]   # this is the find (current version) and replace (new version) pattern.   # {version} and {component} can be used   version-pattern: &quot;PYTHON_VERSION {version}&quot;   # if there are different patterns in particular files, you can specify them here   # file level pattern overrides component level pattern   files-version-pattern:      - file: locust/Dockerfile         pattern: PYTHON_VERSION={version}      - file: locust/some_script.sh         pattern: version {version}Django:   component-type: pypi   current-version: 2.2.24   filter: /^\d+\.\d+(\.\d+)?$/   files: [app/requirements.txt]logspout:   component-type: docker-image   current-version: v3.1   docker-repo: gliderlabs   filter: /^v\d+\.\d+\.\d+$/   # if there is prefix before numeric part of version, you can specify it here   prefix: v   files: [logspout/Dockerfile-logspout]   # put here versions which should be skipped   exclude-versions: [v3.2.6]```## Import python packages to components.yamlIf you want to “copy” python packages to components.yaml from requirements.txt, pipfile (pipenv)or Poetry (project.toml) you need use `import-req` command with `--source` set to one of`requirements`, `pipfile` or `poetry`. In each cases the `--requirements-file` param needs to point atrequirements.txt like file but will set proper `version-pattern` and `files`.## Usage### updater```updater [OPTIONS] COMMAND [ARGS]...```### Options#### --versionShow the version and exit.#### --file &lt;file&gt;YAML file with components configuration. If not present other options for ‘check’ command are required.#### --destination-file &lt;destination_file&gt;If this option is given components configuration with new versions will be written here.#### --dry-runIf set no changes to any files are written.#### --printConfig is printed to stdout at the end.#### checkCheck if new versions of ddefined components are available.```updater check [OPTIONS]```### Options#### --type &lt;component_type&gt;Component type: docker-image or pypi package.* **Options**    docker-image|pypi#### --component &lt;component&gt;A component name for which the version should be verified.#### --repo_name &lt;repo_name&gt;A repository name if component is a docker image.#### --version_tag &lt;version_tag&gt;Version tag eg. v2.3.0 against which new version check will be run.#### --verbosePrint detailed info for each component about new version avaialble.#### --clear-cacheClear all the cached responses about versions in rpositories.#### --ignore-default-fileIgnore components.yaml file in local directory if exists.#### import-reqImports python packages from requirements.txt file.```updater import-req [OPTIONS]```### Options#### --source &lt;source&gt;Source of the requirement.txt file.  [required]* **Options**    requirements|pipfile|poetry#### --requirements-file &lt;requirements_file&gt;Requirements.txt file from which packages and versions will be added to components.yaml file.  [required]#### updateUpdate files, run test and commit changes.```updater update [OPTIONS]```### Options#### --test-command &lt;test_command&gt;Command that should be run after updating each component.#### --test-dir &lt;test_dir&gt;If test-command param is given, this will be the context dir to run it.#### --git-commitWhen set after each components update, git commit is performed in active branch.#### --project-dir &lt;project_dir&gt;If given, then it will be treated as a root dir for paths in config file.#### -v(, --verbosePrint at the end detailed info for each component about update process.#### -vv(, --very-verbosePrint at the end detailed info for each component about update process.&lt;!-- Indices and tables==================* :ref:`genindex`* :ref:`modindex`* :ref:`search` --&gt;</longdescription>
</pkgmetadata>