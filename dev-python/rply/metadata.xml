<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>RPLY====.. image:: https://secure.travis-ci.org/alex/rply.png    :target: https://travis-ci.org/alex/rplyWelcome to RPLY! A pure Python parser generator, that also works with RPython.It is a more-or-less direct port of David Beazley's awesome PLY, with a newpublic API, and RPython support.You can find the documentation `online`_.Basic API:.. code:: python    from rply import ParserGenerator, LexerGenerator    from rply.token import BaseBox    lg = LexerGenerator()    # Add takes a rule name, and a regular expression that defines the rule.    lg.add(&quot;PLUS&quot;, r&quot;\+&quot;)    lg.add(&quot;MINUS&quot;, r&quot;-&quot;)    lg.add(&quot;NUMBER&quot;, r&quot;\d+&quot;)    lg.ignore(r&quot;\s+&quot;)    # This is a list of the token names. precedence is an optional list of    # tuples which specifies order of operation for avoiding ambiguity.    # precedence must be one of &quot;left&quot;, &quot;right&quot;, &quot;nonassoc&quot;.    # cache_id is an optional string which specifies an ID to use for    # caching. It should *always* be safe to use caching,    # RPly will automatically detect when your grammar is    # changed and refresh the cache for you.    pg = ParserGenerator([&quot;NUMBER&quot;, &quot;PLUS&quot;, &quot;MINUS&quot;],            precedence=[(&quot;left&quot;, ['PLUS', 'MINUS'])], cache_id=&quot;myparser&quot;)    @pg.production(&quot;main : expr&quot;)    def main(p):        # p is a list, of each of the pieces on the right hand side of the        # grammar rule        return p[0]    @pg.production(&quot;expr : expr PLUS expr&quot;)    @pg.production(&quot;expr : expr MINUS expr&quot;)    def expr_op(p):        lhs = p[0].getint()        rhs = p[2].getint()        if p[1].gettokentype() == &quot;PLUS&quot;:            return BoxInt(lhs + rhs)        elif p[1].gettokentype() == &quot;MINUS&quot;:            return BoxInt(lhs - rhs)        else:            raise AssertionError(&quot;This is impossible, abort the time machine!&quot;)    @pg.production(&quot;expr : NUMBER&quot;)    def expr_num(p):        return BoxInt(int(p[0].getstr()))    lexer = lg.build()    parser = pg.build()    class BoxInt(BaseBox):        def __init__(self, value):            self.value = value        def getint(self):            return self.valueThen you can do:.. code:: python    parser.parse(lexer.lex(&quot;1 + 3 - 2+12-32&quot;))You can also substitute your own lexer. A lexer is an object with a ``next()``method that returns either the next token in sequence, or ``None`` if the tokenstream has been exhausted.Why do we have the boxes?-------------------------In RPython, like other statically typed languages, a variable must have aspecific type, we take advantage of polymorphism to keep values in a box sothat everything is statically typed. You can write whatever boxes you need foryour project.If you don't intend to use your parser from RPython, and just want a cool purePython parser you can ignore all the box stuff and just return whatever youlike from each production method.Error handling--------------By default, when a parsing error is encountered, an ``rply.ParsingError`` israised, it has a method ``getsourcepos()``, which returns an``rply.token.SourcePosition`` object.You may also provide an error handler, which, at the moment, must raise anexception. It receives the ``Token`` object that the parser errored on... code:: python    pg = ParserGenerator(...)    @pg.error    def error_handler(token):        raise ValueError(&quot;Ran into a %s where it wasn't expected&quot; % token.gettokentype())Python compatibility--------------------RPly is tested and known to work under Python 2.7, 3.4+, and PyPy. It isalso valid RPython for PyPy checkouts from ``6c642ae7a0ea`` onwards.Links-----* `Source code and issue tracker &lt;https://github.com/alex/rply/&gt;`_* `PyPI releases &lt;https://pypi.python.org/pypi/rply&gt;`_* `Talk at PyCon US 2013: So you want to write an interpreter? &lt;http://pyvideo.org/video/1694/so-you-want-to-write-an-interpreter&gt;`_.. _`online`: https://rply.readthedocs.io/</longdescription>
</pkgmetadata>