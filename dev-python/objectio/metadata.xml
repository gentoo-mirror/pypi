<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Test](https://github.com/tmbdev/objectio/workflows/Test/badge.svg)](http://github.com/tmbdev/objectio/actions)[![TestPip](https://github.com/tmbdev/objectio/workflows/TestPip/badge.svg)](http://github.com/tmbdev/objectio/actions)[![DeepSource](https://static.deepsource.io/deepsource-badge-light-mini.svg)](https://deepsource.io/gh/tmbdev/objectio/?ref=repository-badge)# The Object IO Library and CommandObject stores (S3, Google, Azure, Minio, Swift, etc.) all have their owncommand line interfaces with their own conventions for accessing objects.This library and command provides a simple, uniform interface to objectstore facilities, both from the command line and from within Python.# Installation```Bash    $ pip install objectio```For the Github version:```Bash    $ pip install git+https://github.com/tmbdev/objectio.git```# Documentation[ReadTheDocs](http://objectio.readthedocs.io)# Command Line Usage```Bash    $ obj cat az://container/blobname    $ obj cat gs://bucket/blobname    $ obj cat s3://bucket/blobname    $ obj cat file:/path    $ cat file | obj put gs://bucket/blobname```# Python Usage```Python    import objectio    with objectio.gopen(&quot;gs://bucket/blob&quot;, &quot;rb&quot;) as stream:        contents = stream.read()```# New ProtocolsYou can define new schemes by creating a `./objectio.yaml` or `~/.objectio.yaml`file. For example:```YAML    schemes:        random:            read:                cmd: [&quot;cat&quot;, &quot;/dev/random&quot;]```# Future ExtensionsThe intention is to keep this library simple and always allow command lineprograms to be configured for I/O as needed by end users.Additional functionality:- better error handling of non-zero return codes- `obj dir az://container --format csv`- `obj del gs://container/blob`- possibly port to Go Note that for Python, running I/O in a separate process is _preferable_ to usingPython-native libraries, since the latter do not run concurrently. For a Golanguage implementation, protocol implementations using built in native clientlibraries are potentially useful.</longdescription>
</pkgmetadata>