<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>`grobid_tei_xml`: Python parser and transforms for GROBID-flavor TEI-XML========================================================================This is a simple python library for parsing the TEI-XML structured documentsreturned by [GROBID](https://github.com/kermitt2/grobid), a machine learningtool for extracting text and bibliographic metadata from research article PDFs.TEI-XML is a standard format, and there exist other libraries to parse entiredocuments and work with annotated text. This library is focused specifically onextracting &quot;header&quot; metadata from document (eg, title, authors, journal name,volume, issue), content in flattened text form (full abstract and body text assingle strings, for things like search indexing), and structured citationmetadata.## Quickstart`grobid_tei_xml` works with Python 3, using only the standard library. It doesnot talk to the GROBID HTTP API or read files off disk on it's own, but seeexamples below. The library is packaged on [pypi.org](https://pypi.org).Install using `pip`, usually within a `virtualenv`:    pip install grobid_tei_xmlThe main entry points are the functions `process_document_xml(xml_text)` and`process_citation_xml(xml_text)` (or `process_citation_list_xml(xml_text)` formultiple citations), which return python dataclass objects. The helper method`.to_dict()` can be useful for, eg, serializing these objects to JSON.## Usage ExamplesRead an XML file from disk, parse it, and print to stdout as JSON:```pythonimport jsonimport grobid_tei_xmlxml_path = &quot;./tests/files/small.xml&quot;with open(xml_path, 'r') as xml_file:    doc = grobid_tei_xml.parse_document_xml(xml_file.read())print(json.dumps(doc.to_dict(), indent=2))```Use `requests` to download a PDF from the web, submit to GROBID (via HTTP API),parse the TEI-XML response with `grobid_tei_xml`, and print some metadatafields:```pythonimport requestsimport grobid_tei_xmlpdf_resp = requests.get(&quot;https://arxiv.org/pdf/1802.01168v3&quot;)pdf_resp.raise_for_status()grobid_resp = requests.post(    &quot;https://cloud.science-miner.com/grobid/api/processFulltextDocument&quot;,    files={        'input': pdf_resp.content,        'consolidate_Citations': 0,        'includeRawCitations': 1,    },    timeout=60.0,)grobid_resp.raise_for_status()doc = grobid_tei_xml.parse_document_xml(grobid_resp.text)print(&quot;title: &quot; + doc.header.title)print(&quot;authors: &quot; + &quot;, &quot;.join([a.full_name for a in doc.header.authors]))print(&quot;doi: &quot; + str(doc.header.doi))print(&quot;citation count: &quot; + str(len(doc.citations)))print(&quot;abstract: &quot; + doc.abstract)```Use `requests` to submit a &quot;raw&quot; citation string to GROBID for extraction,parse the response with `grobid_tei_xml`, and print the structured output tostdout:```pythonimport requestsimport grobid_tei_xmlraw_citation = &quot;Kvenvolden K.A. and Field M.E. 1981. Thermogenic hydrocarbons in unconsolidated sediment of Eel River Basin, offshore northern California. AAPG Bulletin 65:1642-1646&quot;grobid_resp = requests.post(    &quot;https://cloud.science-miner.com/grobid/api/processCitation&quot;,    data={        'citations': raw_citation,        'consolidateCitations': 0,        'includeRawCitations': 1,    },    timeout=10.0,)grobid_resp.raise_for_status()citation = grobid_tei_xml.parse_citation_xml(grobid_resp.text)print(citation)```## See Also[`grobid_client_python`](https://github.com/kermitt2/grobid_client_python):Python client and CLI tool for making requests to GROBID via HTTP API. ReturnsTEI-XML; could be used with this library (`grobid_tei_xml`) for parsing intopython object or, eg, JSON.[GROBID Documentation](https://grobid.readthedocs.io/en/latest/)[s2orc-doc2json](https://github.com/allenai/s2orc-doc2json): Python libraryfrom AI2 which includes a similar Python library for extracting bothbibliographic metadata and (structured) full text from GROBID TEI-XML. Has nicefeatures like resolving references to bibliography entry.[delb](https://github.com/funkyfuture/delb): more flexible/powerful interfaceto TEI-XML documents. would be a better tool for working with structured text(body, abstract, etc)[&quot;Parsing TEI XML documents withPython&quot;](https://komax.github.io/blog/text/python/xml/parsing_tei_xml_python/)(2019): blog post about basic parsing of GROBID TEI-XML files into PandasDataFrames## LicenseThis library is available under the permissive MIT License. See `LICENSE.txt`for a copy.</longdescription>
</pkgmetadata>