<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dbnd Airflow OperatorThis plugin was written to provide an explicit way of declaratively passing messages between two airflow operators.This plugin was inspired by [AIP-31](https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-31%3A+Airflow+functional+DAG+definition).Essentially, this plugin connects between dbnd's implementation of tasks and pipelines to airflow operators.This implementation uses XCom communication and XCom templates to transfer said messages.This plugin is fully functional, however as soon as AIP-31 is implemented it will support all edge-cases.Fully tested on airflow 1.10.X.# Code ExampleHere is an example of how we achieve our goal:```pythonimport loggingfrom typing import Tuplefrom datetime import timedelta, datetimefrom airflow import DAGfrom airflow.utils.dates import days_agofrom airflow.operators.python_operator import PythonOperatorfrom dbnd import task# Define arguments that we will pass to our DAGdefault_args = {    &quot;owner&quot;: &quot;airflow&quot;,    &quot;depends_on_past&quot;: False,    &quot;start_date&quot;: days_ago(2),    &quot;retries&quot;: 1,    &quot;retry_delay&quot;: timedelta(seconds=10),}@taskdef my_task(p_int=3, p_str=&quot;check&quot;, p_int_with_default=0) -&gt; str:    logging.info(&quot;I am running&quot;)    return &quot;success&quot;@taskdef my_multiple_outputs(p_str=&quot;some_string&quot;) -&gt; Tuple[int, str]:    return (1, p_str + &quot;_extra_postfix&quot;)def some_python_function(input_path, output_path):    logging.error(&quot;I am running&quot;)    input_value = open(input_path, &quot;r&quot;).read()    with open(output_path, &quot;w&quot;) as output_file:        output_file.write(input_value)        output_file.write(&quot;\n\n&quot;)        output_file.write(str(datetime.now().strftime(&quot;%Y-%m-%dT%H:%M:%S&quot;)))    return &quot;success&quot;# Define DAG contextwith DAG(dag_id=&quot;dbnd_operators&quot;, default_args=default_args) as dag_operators:    # t1, t2 and t3 are examples of tasks created by instantiating operators    # All tasks and operators created under this DAG context will be collected as a part of this DAG    t1 = my_task(2)    t2, t3 = my_multiple_outputs(t1)    python_op = PythonOperator(        task_id=&quot;some_python_function&quot;,        python_callable=some_python_function,        op_kwargs={&quot;input_path&quot;: t3, &quot;output_path&quot;: &quot;/tmp/output.txt&quot;},    )    &quot;&quot;&quot;    t3.op describes the operator used to execute my_multiple_outputs    This call defines the some_python_function task's operator as dependent upon t3's operator    &quot;&quot;&quot;    python_op.set_upstream(t3.op)```As you can see, messages are passed explicitly between all three tasks:-   t1, the result of the first task is passed to the next task my_multiple_outputs-   t2 and t3 represent the results of my_multiple_outputs-   some_python_function is wrapped with an operator-   The new python operator is defined as dependent upon t3's execution (downstream) - explicitly.&gt; Note: If you run a function marked with the `@task` decorator without a DAG context, and without using the dbnd&gt; library to run it - it will execute absolutely normally!Using this method to pass arguments between tasks not only improves developer user-experience, but also allowsfor pipeline execution support for many use-cases. It does not break currently existing DAGs.# Using dbnd_configLet's look at the example again, but change the default_args defined at the very top:```pythondefault_args = {    &quot;owner&quot;: &quot;airflow&quot;,    &quot;depends_on_past&quot;: False,    &quot;start_date&quot;: days_ago(2),    &quot;retries&quot;: 1,    &quot;retry_delay&quot;: timedelta(minutes=5),    'dbnd_config': {        &quot;my_task.p_int_with_default&quot;: 4    }}```Added a new key-value pair to the arguments called `dbnd_config``dbnd_config` is expected to define a dictionary of configuration settings that you can pass to your tasks. For example,the `dbnd_config` in this code section defines that the int parameter `p_int_with_default` passed to my_task will beoverridden and changed to `4` from the default value `0`.To see further possibilities of changing configuration settings, see our [documentation](https://dbnd.readme.io/)</longdescription>
</pkgmetadata>