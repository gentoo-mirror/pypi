<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>This is a very simple wrapper around libsodium masquerading as nacl.[![Build Status](https://travis-ci.org/stef/pysodium.svg?branch=master)](https://travis-ci.org/stef/pysodium)This wrapper requires a pre-installed libsodium from:   https://github.com/jedisct1/libsodiumthen it provides access to the following functions:```crypto_aead_chacha20poly1305_decrypt(ciphertext, ad, nonce, key)crypto_aead_chacha20poly1305_encrypt(message, ad, nonce, key)crypto_aead_chacha20poly1305_decrypt_detached(ciphertext, mac, ad, nonce, key)crypto_aead_chacha20poly1305_encrypt_detached(message, ad, nonce, key)crypto_aead_chacha20poly1305_ietf_decrypt(ciphertext, ad, nonce, key)crypto_aead_chacha20poly1305_ietf_encrypt(message, ad, nonce, key)crypto_aead_chacha20poly1305_ietf_decrypt_detached(ciphertext, mac, ad, nonce, key)crypto_aead_chacha20poly1305_ietf_encrypt_detached(message, ad, nonce, key)crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, ad, nonce, key)crypto_aead_xchacha20poly1305_ietf_encrypt(message, ad, nonce, key)crypto_auth(message, key)crypto_auth_verify(tag, message, key)crypto_box_afternm(msg, nonce, k)crypto_box_beforenm(pk, sk)crypto_box_detached(msg, nonce, pk, sk)crypto_box_keypair()crypto_box(msg, nonce, pk, sk)crypto_box_open_afternm(c, nonce, k)crypto_box_open(c, nonce, pk, sk)crypto_box_open_detached(c, mac, nonce, pk, sk)crypto_box_seal(msg, pk)crypto_box_seal_open(c, pk, sk)crypto_box_seed_keypair(seed)crypto_generichash_blake2b_salt_personal(message, outlen = crypto_generichash_blake2b_BYTES, key = b'', salt = b'', personal = b'')crypto_generichash_final(state, outlen=crypto_generichash_BYTES)crypto_generichash_init(outlen=crypto_generichash_BYTES, k=b'')crypto_generichash(m, k=b'', outlen=crypto_generichash_BYTES)crypto_generichash_update(state, m)crypto_hash_sha256(message)crypto_hash_sha512(message)crypto_hash_sha512_init()crypto_hash_sha512_update(state, data)crypto_hash_sha512_final(state)crypto_kx_client_session_keys(client_pk, client_sk, server_pk)crypto_kx_keypair()crypto_kx_server_session_keys(server_pk, server_sk, client_pk)crypto_pwhash(outlen, passwd, salt, opslimit, memlimit, alg)crypto_pwhash_scryptsalsa208sha256(outlen, passwd, salt, opslimit, memlimit)crypto_pwhash_scryptsalsa208sha256_str(passwd, opslimit, memlimit)crypto_pwhash_scryptsalsa208sha256_str_verify(stored, passwd)crypto_pwhash_str(passwd, opslimit, memlimit)crypto_pwhash_str_verify(pstr, passwd)crypto_scalarmult_base(n)crypto_scalarmult_curve25519_base(n)crypto_scalarmult_curve25519(n, p)crypto_secretbox(msg, nonce, k)crypto_secretbox_detached(msg, nonce, k)crypto_secretbox_open(c, nonce, k)crypto_secretbox_open_detached(c, mac, nonce, k)crypto_secretstream_xchacha20poly1305_keygen():crypto_secretstream_xchacha20poly1305_init_push(key):crypto_secretstream_xchacha20poly1305_init_pull(header, key):crypto_secretstream_xchacha20poly1305_rekey(state):crypto_secretstream_xchacha20poly1305_push(state, message, ad, tag):crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad):crypto_sign_init()crypto_sign_update(state, m)crypto_sign_final_create(state, sk)crypto_sign_final_verify(state, sig, pk)crypto_sign_detached(m, sk)crypto_sign_keypair()crypto_sign(m, sk)crypto_sign_open(sm, pk)crypto_sign_pk_to_box_pk(pk)crypto_sign_seed_keypair(seed)crypto_sign_sk_to_box_sk(sk)crypto_sign_sk_to_pk(sk)crypto_sign_sk_to_seed(sk)crypto_sign_verify_detached(sig, msg, pk)crypto_stream_chacha20_xor(message, nonce, key)crypto_stream_chacha20_xor_ic(message, nonce, initial_counter, key)crypto_stream_chacha20_ietf_xor(message, nonce, key)crypto_stream_chacha20_ietf_xor_ic(message, nonce, initial_counter, key)crypto_stream_xchacha20_xor(message, nonce, key)crypto_stream_xchacha20_xor_ic(message, nonce, initial_counter, key)crypto_stream(cnt, nonce=None, key=None)crypto_stream_xor(msg, cnt, nonce=None, key=None)randombytes(size)sodium_increment(bytes)crypto_core_ristretto255_is_valid_point(p)crypto_core_ristretto255_from_hash(r)crypto_scalarmult_ristretto255(n, p)crypto_scalarmult_ristretto255_base(n)crypto_core_ristretto255_scalar_random()crypto_core_ristretto255_scalar_invert(s)crypto_core_ristretto255_scalar_reduce(s)crypto_core_ristretto255_add(p, q)crypto_core_ristretto255_sub(p,q)crypto_core_ristretto255_random()crypto_core_ristretto255_scalar_negate(s)crypto_core_ristretto255_scalar_complement(s)crypto_core_ristretto255_scalar_add(x,y)crypto_core_ristretto255_scalar_sub(x,y)crypto_core_ristretto255_scalar_mul(x,y)```Constants:```crypto_aead_chacha20poly1305_ABYTEScrypto_aead_chacha20poly1305_KEYBYTEScrypto_aead_chacha20poly1305_NPUBBYTEScrypto_aead_chacha20poly1305_ietf_KEYBYTEScrypto_aead_chacha20poly1305_ietf_NPUBBYTEScrypto_aead_chacha20poly1305_ietf_ABYTEScrypto_aead_xchacha20poly1305_ietf_KEYBYTEScrypto_aead_xchacha20poly1305_ietf_NPUBBYTEScrypto_aead_xchacha20poly1305_ietf_ABYTEScrypto_auth_BYTEScrypto_auth_KEYBYTEScrypto_box_BEFORENMBYTEScrypto_box_BOXZEROBYTEScrypto_box_MACBYTEScrypto_box_NONCEBYTEScrypto_box_PUBLICKEYBYTEScrypto_box_SEALBYTEScrypto_box_SECRETKEYBYTEScrypto_box_SEEDBYTEScrypto_box_ZEROBYTEScrypto_generichash_KEYBYTES_MAXcrypto_generichash_BYTEScrypto_generichash_BYTES_MAXcrypto_generichash_BYTES_MINcrypto_generichash_STATEBYTEScrypto_generichash_blake2b_BYTEScrypto_generichash_blake2b_BYTES_MAXcrypto_generichash_blake2b_BYTES_MINcrypto_generichash_blake2b_KEYBYTES_MAXcrypto_generichash_blake2b_PERSONALBYTEScrypto_generichash_blake2b_SALTBYTEScrypto_hash_sha256_BYTEScrypto_hash_sha512_BYTEScrypto_hash_sha512_STATEBYTEScrypto_kx_PUBLICKEYBYTEScrypto_kx_SECRETKEYBYTEScrypto_kx_SESSIONKEYBYTEScrypto_pwhash_ALG_DEFAULTcrypto_pwhash_ALG_ARGON2I13crypto_pwhash_ALG_ARGON2ID13crypto_pwhash_BYTES_MAXcrypto_pwhash_BYTES_MINcrypto_pwhash_MEMLIMIT_MAXcrypto_pwhash_MEMLIMIT_MINcrypto_pwhash_MEMLIMIT_INTERACTIVEcrypto_pwhash_MEMLIMIT_MODERATEcrypto_pwhash_MEMLIMIT_SENSITIVEcrypto_pwhash_OPSLIMIT_MAXcrypto_pwhash_OPSLIMIT_MINcrypto_pwhash_OPSLIMIT_INTERACTIVEcrypto_pwhash_OPSLIMIT_MODERATEcrypto_pwhash_OPSLIMIT_SENSITIVEcrypto_pwhash_PASSWD_MAXcrypto_pwhash_PASSWD_MINcrypto_pwhash_argon2i_MEMLIMIT_INTERACTIVEcrypto_pwhash_argon2i_MEMLIMIT_MODERATEcrypto_pwhash_argon2i_MEMLIMIT_SENSITIVEcrypto_pwhash_argon2i_OPSLIMIT_INTERACTIVEcrypto_pwhash_argon2i_OPSLIMIT_MODERATEcrypto_pwhash_argon2i_OPSLIMIT_SENSITIVEcrypto_pwhash_argon2id_MEMLIMIT_INTERACTIVEcrypto_pwhash_argon2id_MEMLIMIT_MODERATEcrypto_pwhash_argon2id_MEMLIMIT_SENSITIVEcrypto_pwhash_argon2id_OPSLIMIT_INTERACTIVEcrypto_pwhash_argon2id_OPSLIMIT_MODERATEcrypto_pwhash_argon2id_OPSLIMIT_SENSITIVEcrypto_pwhash_SALTBYTEScrypto_pwhash_STRBYTEScrypto_pwhash_scryptsalsa208sha256_BYTES_MAXcrypto_pwhash_scryptsalsa208sha256_BYTES_MINcrypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAXcrypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MINcrypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVEcrypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVEcrypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAXcrypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MINcrypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVEcrypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVEcrypto_pwhash_scryptsalsa208sha256_PASSWD_MAXcrypto_pwhash_scryptsalsa208sha256_PASSWD_MINcrypto_pwhash_scryptsalsa208sha256_SALTBYTEScrypto_pwhash_scryptsalsa208sha256_STRBYTEScrypto_pwhash_scryptsalsa208sha256_STRPREFIXcrypto_scalarmult_BYTEScrypto_scalarmult_SCALARBYTEScrypto_scalarmult_curve25519_BYTEScrypto_secretbox_BOXZEROBYTEScrypto_secretbox_KEYBYTEScrypto_secretbox_KEYBYTEScrypto_secretbox_MACBYTEScrypto_secretbox_NONCEBYTEScrypto_secretbox_ZEROBYTEScrypto_secretstream_xchacha20poly1305_STATEBYTEScrypto_secretstream_xchacha20poly1305_ABYTEScrypto_secretstream_xchacha20poly1305_HEADERBYTEScrypto_secretstream_xchacha20poly1305_KEYBYTEScrypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAXcrypto_secretstream_xchacha20poly1305_TAG_MESSAGEcrypto_secretstream_xchacha20poly1305_TAG_PUSHcrypto_secretstream_xchacha20poly1305_TAG_REKEYcrypto_secretstream_xchacha20poly1305_TAG_FINALcrypto_sign_BYTEScrypto_sign_PUBLICKEYBYTEScrypto_sign_SECRETKEYBYTEScrypto_sign_SEEDBYTEScrypto_sign_ed25519_PUBLICKEYBYTEScrypto_sign_ed25519_SECRETKEYBYTEScrypto_stream_KEYBYTEScrypto_stream_NONCEBYTEScrypto_stream_chacha20_NONCEBYTEScrypto_stream_chacha20_KEYBYTEScrypto_stream_chacha20_ietf_NONCEBYTEScrypto_stream_chacha20_ietf_KEYBYTEScrypto_stream_xchacha20_NONCEBYTEScrypto_stream_xchacha20_KEYBYTEScrypto_core_ristretto255_BYTEScrypto_core_ristretto255_HASHBYTEScrypto_core_ristretto255_SCALARBYTEScrypto_core_ristretto255_NONREDUCEDSCALARBYTES```Notemost of the the `*_easy` functions are not implemented as the &quot;non-easy&quot;functions provide already the &quot;easy&quot; interface, which hides the placement ofbuffers in memory, which makes little sense in python, so this wrapper handlesthis.</longdescription>
</pkgmetadata>