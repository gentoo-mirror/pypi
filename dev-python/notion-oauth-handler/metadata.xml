<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># notion-oauth-handlerPython server/handler of Notion's OAuth 2 for public integrationsProvides:- basic code for handling OAuth in Notion;- a configurable HTTP server that can be extended by plugging in custom application code via Python entrypoints;- a [boilerplate](boilerplate) to be used as a starting point for your integration.## Prerequisites1. First of all you will need to create a public integration in Notion   and save its ID and secret key.2. Notion OAuth requires an HTTPS URL.    This means you will need to register a domain name   and create a valid certificate for it.   There is no way to fully test it using `127.0.0.1:8000`!## UsageThere is a wide range of different ways you can use `notion-oauth-handler`in your project, but we'll cover just the two main options here.### As a standalone serverTo integrate `notion-oauth-handler` into your app you will need to do the following:- implement a &quot;consumer&quot; class (by subclassing `NotionOAuthConsumer` or its existing subclasses)  that will accept user tokens and save them somewhere in your app (e.g. in a database)- define custom methods for the main web server view (subclass of `NotionOAuthRedirectView`)- add entrypoints for these classes to your python package- define your `notion-oauth-handler` configuration- run your web serverSee the corresponding sections below for mnore in-depth descriptions### As part of an existing `aiohttp` applicationIn this case you will still need to:- define the consumer and view classes- and register them as package entrypointsfrom the above description, but plugging the handler into your app isentirely up to you.See [make_app in the default app module](src/notion_oauth_handler/server/app.py)### Consumer classThis class defines how the authentication info is handled (e.g. saved to a database).You can also add some external API hooks here.This is the place to define any actions that need to be takenwhen a user grants access to your public integration.```pythonfrom notion_oauth_handler.core.dto import AuthRedirectInfo, TokenResponseInfofrom notion_oauth_handler.core.consumer import DefaultNotionOAuthConsumerclass MyAppNotionOAuthConsumer(DefaultNotionOAuthConsumer):    async def consume_redirect_error(self, error_text: str) -&gt; None:        # Optional.        # What to do if an error has been raised.        # Log it, call an API hook, whatever.        pass    async def consume_token_info(self, token_info: TokenResponseInfo, state_info: AuthRedirectInfo) -&gt; None:        # Required.        # The main logic goes here.        # `token_info` contains the user access token received from Notion        # while `state_info.state` is the data intially passed to Notion in the URL        # (e.g. it may contain a user or app ID or something like that)        pass```For a bit more flexibility you can use the parent class, `NotionOAuthConsumer`,and redefine some more of its methods.### Web view classIn the basic scenario, you only need to define the server's responses,without any token-handling logic here.```pythonfrom http import HTTPStatusfrom aiohttp.web import Responsefrom notion_oauth_handler.core.dto import TokenResponseInfofrom notion_oauth_handler.server.auth_view import DefaultNotionOAuthRedirectViewclass MyAppNotionOAuthRedirectView(DefaultNotionOAuthRedirectView):    async def make_access_denied_response(self, error_text: str) -&gt; Response:        return self.make_response(text='MyApp says: Error', status=HTTPStatus.FORBIDDEN)    async def make_auth_response(self, token_info: TokenResponseInfo) -&gt; Response:        return self.make_response(text='MyApp says: OK', status=HTTPStatus.OK)```One possibility is to generate a redirect or link back to your main app here.Whether to return HTML, JSON or plain  text here is completely up to you.Try to stick to the idea that there should be any complex business logicfor token handling here - all that should go into your consumer class.### Registering entrypointsOnce you've defined all the logic in the classes above,you need to make them available for `notion-auth-handler`by declaring them as entrypoints in your Python project configurationIf you are using a `setup.cfg` file for all your settings,then it will look like this:```ini[options.entry_points]# Your app-specific entrypoints (if any)# ...# Notion OAuth entrypointsnotion_oauth_handler.consumer =    my_app = my_app.web.notion_auth.consumer:MyAppNotionOAuthConsumernotion_oauth_handler.auth_view =    my_app = my_app.web.notion_auth.view:MyAppNotionOAuthRedirectView```And for a `setup.py` file, like this:```pythonfrom setuptools import setupsetup(    # Your project settings    # ...    entry_points={        'notion_oauth_handler.consumer': [            'my_app = my_app.web.notion_auth.consumer:MyAppNotionOAuthConsumer',        ],        'notion_oauth_handler.auth_view': [            'my_app = my_app.web.notion_auth.view:MyAppNotionOAuthRedirectView',        ],    },)```where `my_app.web.notion_auth.consumer:MyAppNotionOAuthConsumer` and`my_app.web.notion_auth.view:MyAppNotionOAuthRedirectView` indicatewhere to find these classes in your code.### Configuration fileNow you need to tell `notion-auth-handler`, which of the possibly manyimplementation entrypoints to call, which url paths to use in the server,how to connect to your Notion integration, etc.This is done via a configuration file.See [the boilerplate config file](boilerplate/notion-oauth-handler.ini)for all the options.Note that all public Notion integrations are required to have &quot;Terms of Use&quot;and &quot;Privacy Policy&quot; documents.Since using the standalone server mode assumes that you don't have anotherweb server, `notion-auth-handler` can host these documents for you.See the `[notion_oauth_handler.documents]` section of the example configuration file.### Web server`notion-oauth-handler` can run in practically any setup,but a sample `Gunicorn` [configuratuon file](boilerplate/gunicorn.conf.py)is included just for convenience.</longdescription>
</pkgmetadata>