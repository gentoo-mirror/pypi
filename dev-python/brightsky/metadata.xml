<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;docs/favicon.svg&quot; align=&quot;right&quot; style=&quot;height: 140px&quot;&gt;# Bright Sky[![API Status](https://img.shields.io/website?down_message=offline&amp;label=api&amp;up_message=online&amp;url=https%3A%2F%2Fapi.brightsky.dev%2F)](https://api.brightsky.dev/)[![Docs Status](https://img.shields.io/website?down_message=offline&amp;label=docs&amp;up_message=online&amp;url=https%3A%2F%2Fbrightsky.dev%2Fdocs%2F)](https://brightsky.dev/docs/)[![Build Status](https://img.shields.io/github/actions/workflow/status/jdemaeyer/brightsky/main.yml)](https://github.com/jdemaeyer/brightsky/actions)[![PyPI Release](https://img.shields.io/pypi/v/brightsky)](https://pypi.org/project/brightsky/)[![Docker Hub Release](https://img.shields.io/docker/v/jdemaeyer/brightsky/latest?label=docker)](https://hub.docker.com/r/jdemaeyer/brightsky)### JSON API for DWD's open weather data.The DWD ([Deutscher Wetterdienst](https://www.dwd.de/)), as Germany'smeteorological service, publishes a myriad of meteorological observations andcalculations as part of their [Open Dataprogram](https://www.dwd.de/DE/leistungen/opendata/opendata.html).[**Bright Sky**](https://brightsky.dev/) is an open-source project aiming tomake some of the more popular data — in particular weather observations fromthe DWD station network and weather forecasts from the MOSMIX model — availablein a free, simple JSON API.### Looking for something specific?#### I just want to retrieve some weather dataYou can use the free [public Bright Sky instance](https://brightsky.dev/)!#### I want to run my own instance of Bright SkyCheck out the [infrastructurerepo](https://github.com/jdemaeyer/brightsky-infrastructure/)!#### I want to parse DWD weather files from the command line or in PythonThe parsing core for Bright Sky is maintained in a separate package named[`dwdparse`](https://github.com/jdemaeyer/dwdparse), which has no dependenciesoutside the standard library. If you find that's not quite serving your needs,check out [`wetterdienst`](https://github.com/earthobservations/wetterdienst).#### I want to contribute to Bright Sky's source codeRead on. :)### On Bright Sky's versioningStarting from version 2.0, where we extracted the parsing core into a [separatepackage](https://github.com/jdemaeyer/dwdparse), Bright Sky is **no longerintended to be used as a Python library**, but only as the service available at[`brightsky.dev`](https://brightsky.dev/).Consequentially, we adjust our version numbers from the _perspective of thatservice and its users_ – i.e., we will increase the major version number onlywhen we introduce backwards-incompatible (or otherwise very major) changes tothe actual JSON API interface, e.g. by changing URLs or parameters. This meansthat **increases of the minor version number may introducebackwards-incompatible changes to the internals of the `brightsky` package,including the database structure**. If you use `brightsky` as a Python library,please version-pin to a minor version, e.g. by putting `brightsky==2.0.*` inyour `requirements.txt`.## Quickstart### Running a full-fledged API instance_Note: These instructions are aimed at running a Bright Sky instance fordevelopment and testing. Check out our [infrastructurerepository](https://github.com/jdemaeyer/brightsky-infrastructure/) if you wantto set up a production-level API instance._Just run `docker-compose up` and you should be good to go. This will set up aPostgreSQL database (with persistent storage in `.data`), run a Redis server,and start the Bright Sky worker and webserver. The worker periodically pollsthe DWD Open Data Server for updates, parses them, and stores them in thedatabase. The webserver will be listening to API requests on port 5000.## Architecture![Bright Sky's Architecture](docs/img/architecture.svg)Bright Sky is a rather simple project consisting of four components: * The `brightsky` worker, which leverages the logic contained in the   `brightsky` Python package to retrieve weather records from the DWD server,   parse them, and store them in a database. It will periodically poll the DWD   servers for new data. * The `brightsky` webserver (API), which serves as gate to our database and   processes all queries for weather records coming from the outside world. * A PostgreSQL database consisting of two relevant tables:    * `sources` contains information on the locations for which we hold weather      records, and    * `weather` contains the history of actual meteorological measurements (or      forecasts) for these locations.   The database structure can be set up by running the `migrate` command, which   will simply apply all `.sql` files found in the `migrations` folder. * A Redis server, which is used as the backend of the worker's task queue.Most of the tasks performed by the worker and webserver can also be performedindependently. Run `docker-compose run --rm brightsky` to get a list ofavailable commands.## HackingConstantly rebuilding the `brightsky` container while working on the code canbecome cumbersome, and the default setting of parsing records dating all theway back to 2010 will make your development database unnecessarily large. Youcan set up a more lightweight development environment as follows: 1. Create a virtual environment and install our dependencies:    `python -m virtualenv .venv &amp;&amp; source .venv/bin/activate &amp;&amp; pip install -r    requirements.txt &amp;&amp; pip install -e .` 2. Start a PostgreSQL container:    `docker-compose run --rm -p 5432:5432 postgres` 3. Start a Redis container:    `docker-compose run --rm -p 6379:6379 redis` 4. Point `brightsky` to your containers, and configure a tighter date    threshold for parsing DWD data, by adding the following `.env` file:    ```    BRIGHTSKY_DATABASE_URL=postgres://postgres:pgpass@localhost    BRIGHTSKY_BENCHMARK_DATABASE_URL=postgres://postgres:pgpass@localhost/benchmark    BRIGHTSKY_REDIS_URL=redis://localhost    BRIGHTSKY_MIN_DATE=2020-01-01    ```You should now be able to directly run `brightsky` commands via `python -mbrightsky`, and changes to the source code should be effective immediately.### TestsLarge parts of our test suite run against a real Postgres database. By default,these tests will be skipped. To enable them, make sure the`BRIGHTSKY_TEST_DATABASE_URL` environment variable is set when calling `tox`,e.g. via:```BRIGHTSKY_TEST_DATABASE_URL=postgres://postgres:pgpass@localhost/brightsky_test tox```Beware that adding this environment variable to your `.env` file will not workas that file is not read by `tox`. The database will be **dropped andrecreated** on every test run, so don't use your normal Bright Sky database. ;)## AcknowledgementsBright Sky's development is boosted by the priceless guidance and support ofthe [Open Knowledge Foundation](https://www.okfn.de/)'s [PrototypeFund](https://prototypefund.de/) program, and is generously funded by Germany's[Federal Ministry of Education and Research](https://www.bmbf.de/). Obvious asit may be, it should be mentioned that none of this would be possible withoutthe painstaking, never-ending effort of the [DeutscherWetterdienst](https://www.dwd.de/).&lt;a href=&quot;https://prototypefund.de/&quot;&gt;&lt;img src=&quot;docs/img/pf.svg&quot; alt=&quot;Prototype Fund&quot; height=&quot;100&quot;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://okfn.de/&quot;&gt;&lt;img src=&quot;docs/img/okfde.svg&quot; alt=&quot;Open Knowledge Foundation Germany&quot; height=&quot;100&quot;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://www.bmbf.de/&quot;&gt;&lt;img src=&quot;docs/img/bmbf.svg&quot; alt=&quot;Bundesministerium für Bildung und Forschung&quot; height=&quot;100&quot;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://www.dwd.de/&quot;&gt;&lt;img src=&quot;docs/img/dwd.svg&quot; alt=&quot;Deutscher Wetterdienst&quot; height=&quot;100&quot;&gt;&lt;/a&gt;</longdescription>
</pkgmetadata>