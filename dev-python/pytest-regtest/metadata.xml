<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytest-regtest==============pytest-regtest is a *pytest*-plugin for implementing regression tests.Compared to functional testing a regression test does not test ifsoftware produces correct results, instead a regression test checks ifsoftware behaves the same way as it did before introduced changes.More about regression testing at&lt;https://en.wikipedia.org/wiki/Regression_testing&gt;. Regression testingis a common technique to get started when refactoring legacy codelacking a test suite.*pytest-regtest* allows capturing selected output which then can becompared to the captured output from former runs.To install and activate this plugin execute:    $ pip install pytest-regtest*pytest-regtest* plugin provides a fixture named *regtest* which can beused as a file handle for recording data:```python    def test_squares_up_to_ten(regtest):        result = [i*i for i in range(10)]        # one way to record output:        print(result, file=regtest)        # alternative method to record output:        regtest.write(&quot;done&quot;)        # or using a context manager:        with regtest:            print(&quot;this will be recorded&quot;)```If you run this test script with *pytest* the first time there is norecorded output for this test function so far and thus the test willfail with a message including a diff:    $ py.test    ...    regression test output differences for test_demo.py::test_squares_up_to_ten:    &gt;   --- current    &gt;   +++ tobe    &gt;   @@ -1,2 +1 @@    &gt;   -[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]    &gt;   -done    &gt;   +The output tells us what the current output is, and that the &quot;tobe&quot; outputis still empty.For accepting this output, we run *pytest* with the *--reset-regtest*flag:    $ py.test --regtest-resetNow the next execution of *py.test* will succeed:    $ py.testNow we break the test by modifying the code under test to compute the firsteleven square numbers:```python    from __future__ import print_function    def test_squares_up_to_ten(regtest):        result = [i*i for i in range(11)]  # changed !        # one way to record output:        print(result, file=regtest)        # alternative method to record output:        regtest.write(&quot;done&quot;)```The next run of pytest delivers a nice diff of the current and expected outputfrom this test function:    $ py.test    ...    &gt;   --- current    &gt;   +++ tobe    &gt;   @@ -1,2 +1,2 @@    &gt;   -[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]    &gt;   +[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]    &gt;    doneThe recorded output was written to files in the subfolder`_regtest_outputs` next to your test script(s). You might keep thisfolder under version control.Other features--------------Another way to record output is to capture all output to `sys.stdout`:```python    def test_squares_up_to_ten(regtest):        result = [i*i for i in range(10)]        with regtest:            print(result)```You can reset recorded output of files and functions individually as:    $ py.test --regtest-reset tests/test_00.py    $ py.test --regtest-reset tests/test_00.py::test_squares_up_to_tenTo supress the diff and only see the stats use:    $ py.test --regtest-nodiffTo see recorded output during test execution run:    $ py.test --regtest-tee -sIf you develop on mixed platforms it might be usefull to ignore whitespaces at the end of the lines when comparing output. This can beachieved by specifying:    $ py.test --regtest-ignore-line-endingsFixing unavoidable changes in recorded  output----------------------------------------------The recorded output can contain data which is changing from test run to testrun, e.g. pathes created with the `tmpdir` fixture or hexadecimal object ids,when objects are printed.The plugin already replaces such changing data in the recorded output,and one can register own converters in `conftest.py` in the testsfolder. For example:```python    import pytest_regtest    @pytest_regtest.register_converter_pre    def fix_before(txt):        &quot;&quot;&quot;modify recorded output before the default fixes        like temp folders or hex object ids are applied&quot;&quot;&quot;        # remove lines with passwords:        lines = txt.split('\n')        lines = [l for l in lines if &quot;password is&quot; not in l]        return '\n'.join(lines)    @pytest_regtest.register_converter_post    def after(txt):        &quot;&quot;&quot;modify recorded output after the default fixes        like temp folders or hex object ids are applied&quot;&quot;&quot;        # for demo only        return txt.upper()```This can be used to fix substrings like &quot;computation need 1.23 seconds&quot;to &quot;computation needed &lt;TIME&gt; seconds&quot; etc.One can register multiple such converters which will be applied inorder of registration.</longdescription>
</pkgmetadata>