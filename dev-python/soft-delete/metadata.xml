<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django Soft Delete============[![Build Status](https://travis-ci.org/collabo-br/django-soft-delete.svg?branch=master)](https://travis-ci.org/collabo-br/django-soft-delete)[![codecov](https://codecov.io/gh/collabo-br/django-soft-delete/branch/master/graph/badge.svg)](https://codecov.io/gh/collabo-br/django-soft-delete)Django Soft Delete gives Django models the ability to soft delete(logical delete). it also gives the ability to restore or undelete soft-deleted instances.Basic usage============1. Clone this repo and then ``$pip install django-soft-delete``1. Add softdelete model to INSTALLED_APPS1. Inherit all models you want to have this functionality from softdelete.models.SoftDeleteModel```bash&gt;&gt;&gt; MyModel.objects.create(name='Anakin')&gt;&gt;&gt; MyModel.objects.create(name='Luke')&gt;&gt;&gt; MyModel.objects.create(name='Yoda')&gt;&gt;&gt; luke  = MyModel.objecs.filter(name='Luke')&gt;&gt;&gt; MyModel.objecs.filter(name='Luke').delete()&gt;&gt;&gt; MyModel.objects.count()2&gt;&gt;&gt; MyModel.raw_objects.count()3&gt;&gt;&gt; MyModel.objects.get(id=luke.id).undelete()&gt;&gt;&gt; MyModel.objects.count()3```Samples============```pythonfrom softdelete.models import SoftDeleteModelclass MyModel(SoftDeleteModel):    name = models.CharField(max_length=30)```You can also use the SoftDelete django manager to extends your custom manager funcionalities. Do it like so:```python#my_model_manager.pyfrom softdelete.managers import SoftDeleteManagerclass MyModelManager(SoftDeleteManager):    def create_john_smith(self):        self.model.objects.create(name='Jonh Smith')#my_model.pyfrom django.db import modelsfrom my_model_manager import MyModelManagerclass MyModel(SoftDeleteModel):    name = models.CharField(max_length=30)    objects = models.Manager()    my_manager = MyModelManager()```It's possible to have access to delete instances through an alternative manager `` raw_objects`````python    for inst in MyModel.raw_objects.all():        print inst.name```</longdescription>
</pkgmetadata>