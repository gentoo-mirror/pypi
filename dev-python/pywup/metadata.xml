<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pywupA small set of tools.TODO: Expand this [markdown](https://guides.github.com/features/mastering-markdown/)# How to install / update```bashpip3 install --upgrade pywup --user --no-cache-dir```If you cannot run the wup command after installation, check if the path to the folder .local/bin is in your PATH. If not, add the following to the end of your ~/.bashrc:```export PATH=/home/&lt;YOUR_USERNAME&gt;/.local/bin:$PATH```# The library ## configureThis is a python library for creating template-based configure scripts.```python#!/usr/bin/env python3from pywup.configure import *mf = TemplateBuilder()mf.compiler     = find_program_or_abort([&quot;clang++&quot;, &quot;g++&quot;], &quot;Compiler&quot;, &quot;clang&quot;)mf.python       = find_header_or_abort(&quot;m/Python.h&quot;, &quot;Python header&quot;, &quot;python3-dev&quot;)mf.highgui      = find_header_or_abort(&quot;/highgui.hpp&quot;, &quot;Opencv's highgui&quot;, &quot;opencv-dev&quot;)mf.imgproc      = find_header_or_abort(&quot;/imgproc.hpp&quot;, &quot;Opencv's imgproc&quot;, &quot;opencv-dev&quot;)mf.valgrind_py  = find_file_or_abort(&quot;python3-devel/valgrind-python.supp&quot;, &quot;valgrind suppression file for python3&quot;, &quot;python3-dev&quot;)mf.libimgcodecs = find_lib(&quot;libopencv_imgcodecs.so&quot;, &quot;libopencv_imgcodecs&quot;)mf.libs         = &quot;-lopencv_core -lopencv_highgui -lopencv_imgproc -I../../wup/cpp/include&quot;mf.headers      = &quot;-DPYTHON_H=$(PYTHON_H) -DHIGHGUI_H=$(HIGHGUI_H) -DIMGPROC_H=$(IMGPROC_H)&quot;if mf.libimgcodecs:    mf.libs     += &quot; -lopencv_imgcodecs&quot;mf.build(&quot;Makefile&quot;, &quot;&quot;&quot;\CC={compiler}HIGHGUI_H={highgui}PYTHON_H={python}IMGPROC_H={imgproc}VALGRIND_PYTHON={valgrind_py}LIBS = {libs}HEADERS= {headers}all:$(CC) -fPIC -shared wup_wrapper.cpp -o libwup.so -Wall -O3 -std=c++11 $(LIBS) $(HEADERS)run:$(CC) main.cpp -o main -Wall -O3 -std=c++11 $(LIBS) $(HEADERS)./maindebug:$(CC) main.cpp -o main -Wall -g -std=c++11 $(LIBS) $(HEADERS)gdb mainvalgrind:$(CC) -fPIC -shared wup_wrapper.cpp -o libwup.so -Wall -O1 -g -std=c++11 $(LIBS) $(HEADERS)valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --suppressions=$(VALGRIND_PYTHON) python3 main3.py --model wisard --dataset mnist 2&gt; valgrind.out&quot;&quot;&quot;)```# wupThis is a command line utility for running experiments, plotting and executing repetitive tasks.## collectcollect runs a program multiple times and collects outputs.Example 1 - Permutate variables and collect outputs* This will permutate the variables THREADS (arithmetic: 1, 3, 5, 7, ...) and JOBS (geometric: 1, 1.6, ...)* For each configuration, the program will run 10 times* For each execution, the following attributes will be collected: TRAIN_TIME, TEST_TIME and ACC* The output will be saved in CSV format at wespa.csv* The permutations values for each variable are passed to the program in the same order they are declared. Each &quot;{}&quot; is replaced by the variable value.```bashwup collect \    --p TRAIN_TIME &quot;Info: Time to train was ([-0-9\.e\+]+) μs&quot; \    --p TEST_TIME &quot;Info: Time to test was ([-0-9\.e\+]+) μs&quot; \    --p ACC &quot;Test Acc = ([0-9\.]+)&quot; \    --runs 10 \    --va THREADS 1 17 2 \    --vg JOBS 1 80000 1.6 \    --o wespa.csv \    --c &quot;./wisard -createModel RamWisard -ramBits 28 -decoder classic -ramType prime \            -train mnist ../data/emnist/byclass/emnist-byclass-train \            -test mnist ../data/emnist/byclass/emnist-byclass-test \            -times -numThreads {} -hashSize 18041 -jobsPerThread {} -bleaching Y -pPredict 2&quot;```Example 2 - Collect multiple rows from the same command execution* The parameter --n defines a line break, allowing us to collect multiple rows for the same execution.* The parameter --log defines an output file to write extra details during the process.```bashwup collect \    --n &quot;[a-zA-Z0-9]+ : AvgIntersectionScore = [-0-9\.e\+]+  AvgCenterDistanceScore = [-0-9\.e\+]+&quot; \    --p DS_NAME &quot;([a-zA-Z0-9]+) : AvgIntersectionScore = [-0-9\.e\+]+  AvgCenterDistanceScore = [-0-9\.e\+]+&quot; \    --p INTERSECTION &quot;[a-zA-Z0-9]+ : AvgIntersectionScore = ([-0-9\.e\+]+)  AvgCenterDistanceScore = [-0-9\.e\+]+&quot; \    --p CENTER_DISTANCE &quot;[a-zA-Z0-9]+ : AvgIntersectionScore = [-0-9\.e\+]+  AvgCenterDistanceScore = ([-0-9\.e\+]+)&quot; \    --runs 10 \    --o &quot;./collect.csv&quot; \    --log &quot;./collect.log&quot; \    --c &quot;./run_all.sh&quot;```Example 3 - Multiple commands and parallelization* Specify multiple --c to call multiple commands. When multiple commands are presented they will receive the same variables.* Their output will also be concatenated, you probably want to use --n to separate them in distinct lines.* The program will parse all their outputs as if they were continuous, one after the other.* Use --jobs to define the number of parallel processes.* Parallelization is be applied across parameter permutation and commands. If you have 16 permutations and 2 commands we have 32 parallel tasks.* You may also use --jobs without multiple commands.* You may also use --c with just one --jobs.* Use parallelism to tune parameters and single process to measure times. When you are measuring execution time, multiple processes may slightly slow each other as they compete for resources.```bashwup collect \    --n &quot;[a-zA-Z0-9]+ : AvgIntersectionScore = [-0-9\.e\+]+  AvgCenterDistanceScore = [-0-9\.e\+]+&quot; \    --p DS_NAME &quot;([a-zA-Z0-9]+) : AvgIntersectionScore = [-0-9\.e\+]+  AvgCenterDistanceScore = [-0-9\.e\+]+&quot; \    --p INTERSECTION &quot;[a-zA-Z0-9]+ : AvgIntersectionScore = ([-0-9\.e\+]+)  AvgCenterDistanceScore = [-0-9\.e\+]+&quot; \    --p CENTER_DISTANCE &quot;[a-zA-Z0-9]+ : AvgIntersectionScore = [-0-9\.e\+]+  AvgCenterDistanceScore = ([-0-9\.e\+]+)&quot; \    --jobs 4 \    --runs 10 \    --o &quot;./collect.csv&quot; \    --log &quot;./collect.log&quot; \    --c &quot;./run.sh 'Basketball'&quot; \    --c &quot;./run.sh 'Biker'&quot; \    --c &quot;./run.sh 'Bird1'&quot; \    --c &quot;./run.sh 'Bird2'&quot;```## heatmapheatmap receives a csv file and generates a heatmap.```bashwup heatmap \    --data ./wespa.csv \    --y &quot;THREADS&quot; \    --x &quot;JOBS&quot; \    --z &quot;TEST_TIME&quot; \    --tz &quot;data[0,z] / data[i,z]&quot; \    --tx &quot;\&quot;%d\&quot; % int(float(data[i,x]))&quot; \    --ty &quot;\&quot;%d\&quot; % int(float(data[i,y]))&quot; \    --tzz &quot;\&quot;%.2f\&quot; % data[i,j]&quot; \    --title &quot;Speedup (threads / blockSize)&quot; \    --size 10 4 \    --o heatmap_wespa.png```## barsGenerates a bar graphic using one or more csv files.```bashwup bars \    --load ./note.csv \    --line THREADS TEST_TIME &quot;note test&quot; \    --line THREADS TRAIN_TIME &quot;note train&quot; \ \    --load ./out.csv \    --line THREADS TEST_TIME &quot;wespa test&quot; \    --line THREADS TRAIN_TIME &quot;wespa train&quot;\ \    --title &quot;Predict speedups (threads / speedup)&quot; \    --ty &quot;y[0,0] / y[i,j]&quot; \    --ts &quot;y[0,0]*s[i,j] / (y[i,j]**2)&quot; \    --tyy &quot;\&quot;%.2f\&quot; % ty[i,j] if ty[i,j] else ''&quot; \    --tx &quot;int(float(x[i]))&quot; \    --xlabel &quot;Threads&quot; \    --ylabel &quot;Speedup&quot; \    --barwidth 0.9 \    --size 10 4 \    --verbose \    --o bars_parallelPredictSpeedup.png```## backupExample ***~/Dropbox/backups/system/wup.bak*** file```file;~/.local/bin/macro_play;./local_bin/file;~/.local/bin/macro_rec_start;./local_bin/file;~/.local/bin/macro_rec_stop;./local_bin/folder;~/.config/compton;./comptonfile;~/.vimrc;./vimrcfolder;~/.config/i3;./i3```Invoke backup / restore```bash# This will copy files from system (left) to backup folder (right), overwriting any change or previous file in the backup folder.wup backup create ~/Dropbox/backups/system/wup.bak# This will copy files from the backup folder (right) to the system (left), overwriting any change or previous file in the system.wup backup restore ~/Dropbox/backups/system/wup.bak# This will sync all files and backup folders, copying the most recent one to the right direction. wup backup sync ~/Dropbox/backups/system/wup.bak```</longdescription>
</pkgmetadata>