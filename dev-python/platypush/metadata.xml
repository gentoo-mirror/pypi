<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Platypush=========[![Build Status](https://ci.platypush.tech/status.svg)](https://ci.platypush.tech/latest.log)[![Documentation Status](https://ci.platypush.tech/docs/status.svg)](https://ci.platypush.tech/docs/latest.log)[![pip version](https://img.shields.io/pypi/v/platypush.svg?style=flat)](https://pypi.python.org/pypi/platypush/)[![License](https://img.shields.io/github/license/BlackLight/platypush.svg)](https://git.platypush.tech/platypush/platypush/-/blob/master/LICENSE.txt)[![Last Commit](https://img.shields.io/github/last-commit/BlackLight/platypush.svg)](https://git.platypush.tech/platypush/platypush/-/commits/master/)[![Join chat on Matrix](https://img.shields.io/matrix/:platypush?server_fqdn=matrix.platypush.tech)](https://matrix.to/#/#platypush:matrix.platypush.tech)[![Contributions](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://git.platypush.tech/platypush/platypush/-/blob/master/CONTRIBUTING.md)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/BlackLight/platypush.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/BlackLight/platypush/context:python)[![Language grade: JavaScript](https://img.shields.io/lgtm/grade/javascript/g/BlackLight/platypush.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/BlackLight/platypush/context:javascript)&lt;!-- toc --&gt;- [Architecture](#architecture)  * [Plugins](#plugins)  * [Actions](#actions)  * [Backends](#backends)  * [Events](#events)  * [Hooks](#hooks)  * [Procedures](#procedures)  * [Cronjobs](#cronjobs)  * [The web interface](#the-web-interface)- [Installation](#installation)  * [System installation](#system-installation)    + [Install through `pip`](#install-through-pip)    + [Install through a system package manager](#install-through-a-system-package-manager)    + [Install from sources](#install-from-sources)  * [Installing the dependencies for your extensions](#installing-the-dependencies-for-your-extensions)    + [Install via `extras` name](#install-via-extras-name)    + [Install via `manifest.yaml`](#install-via-manifestyaml)    + [Check the instructions reported in the documentation](#check-the-instructions-reported-in-the-documentation)  * [Virtual environment installation](#virtual-environment-installation)  * [Docker installation](#docker-installation)- [Mobile app](#mobile-app)- [Tests](#tests)- [Funding](#funding)&lt;!-- tocstop --&gt;- Recommended read: [**Getting started with Platypush**](https://blog.platypush.tech/article/Ultimate-self-hosted-automation-with-Platypush).- The [blog](https://blog.platypush.tech) is in general a good place to get  more insights on what you can build with it and inspiration about possible  usages.- The [wiki](https://git.platypush.tech/platypush/platypush/wiki) also  contains many resources on getting started.- Extensive documentation for all the available integrations and messages [is  available](https://docs.platypush.tech/).- If you have issues/feature requests/enhancement ideas please [create an  issue](https://git.platypush.tech/platypush/platypush/-/issues).- A [Reddit channel](https://www.reddit.com/r/platypush) is also available for  more general questions.- A [Matrix instance](https://matrix.to/#/#platypush:matrix.platypush.tech) is  also available if you are looking for more interactive support.---Platypush is a general-purpose extensible platform for automation andintegration across multiple services and devices.It enables users to create their own self-hosted pieces of automation based onevents (*if this happens then do that*)and it provides a comprehensive and customizable user interface that collectseverything you need to visualize and control under one roof.It takes some concepts from [IFTTT](https://ifttt.com),[Tasker](https://tasker.joaoapps.com/), [MicrosoftFlow](https://flow.microsoft.com), [PushBullet](https://pushbullet.com) and[Home Assistant](https://www.home-assistant.io/) to provide an environmentwhere the user can easily connect things together.Its ideal home is a single-board computer like a RaspberryPi that you canconfigure to orchestrate any home automation and cloud automation in your ownliving room or garage, but it can easily run on any device that can run aPython interpreter, and the bar for the hardware requirements is very low aswell - I use it to run pieces of automation on devices as powerful as aRaspberryPi Zero or an old Nokia N900 with Linux.You can use Platypush to do things like:- [Control your smart home lights](https://blog.platypush.tech/article/Ultimate-self-hosted-automation-with-Platypush)- [Control your music and synchronize it to multiple devices](https://blog.platypush.tech/article/Build-your-open-source-multi-room-and-multi-provider-sound-server-with-Platypush-Mopidy-and-Snapcast)- [Create custom and privacy-secure voice assistants that run custom hooks on your phrases](https://blog.platypush.tech/article/Build-custom-voice-assistants)- Build integrations between [sensors](https://docs.platypush.tech/en/latest/platypush/backend/sensor.html),  [cameras](https://docs.platypush.tech/en/latest/platypush/plugins/camera.pi.html),  [microphones](https://docs.platypush.tech/en/latest/platypush/plugins/sound.html)  and [machine learning  models](https://docs.platypush.tech/en/latest/platypush/plugins/tensorflow.html)  to create smart  pieces of automation for e.g.  [people detection](https://blog.platypush.tech/article/Detect-people-with-a-RaspberryPi-a-thermal-camera-Platypush-and-a-pinch-of-machine-learning)  or [sound detection](https://blog.platypush.tech/article/Create-your-smart-baby-monitor-with-Platypush-and-Tensorflow)- [Get events from your Google or Facebook calendars](https://docs.platypush.tech/en/latest/platypush/plugins/calendar.html)- [Read data from your sensors and trigger custom events whenever they go above or below some custom thresholds](https://blog.platypush.tech/article/How-to-build-your-personal-infrastructure-for-data-collection-and-visualization)- [Control and automate a self-built robot](https://docs.platypush.tech/en/latest/platypush/plugins/gpio.zeroborg.html)- [Deliver automated newsletters from custom RSS digests](https://blog.platypush.tech/article/Deliver-customized-newsletters-from-RSS-feeds-with-Platypush)- [Synchronize the clipboards on your devices](https://docs.platypush.tech/en/latest/platypush/plugins/clipboard.html)- [Control your smart switches](https://docs.platypush.tech/en/latest/platypush/plugins/switch.html)- [Implement automated custom text-to-speech routines](https://docs.platypush.tech/en/latest/platypush/plugins/tts.html)- [Build any kind of interactions and automation routines with your Android device using Tasker](https://blog.platypush.tech/article/How-to-build-your-personal-infrastructure-for-data-collection-and-visualization)- Play [local  videos](https://docs.platypush.tech/en/latest/platypush/plugins/media.mpv.html),  YouTube videos and torrent media from any device and service, to any device- [Get weather forecast events for your location and build automation routines on them](https://docs.platypush.tech/en/latest/platypush/plugins/weather.darksky.html)- [Create a custom single hub for Zigbee and Z-Wave smart devices](https://blog.platypush.tech/article/Transform-a-RaspberryPi-into-a-universal-Zigbee-and-Z-Wave-bridge)- Build your own web dashboard with calendar, weather, news and music controls  (basically, anything that has a Platypush web widget)- ...and much more (basically, anything that comes with a [Platypush plugin](https://docs.platypush.tech/en/latest/plugins.html))## ArchitectureThe architecture of Platypush consists of a few simple pieces, orchestrated bya configuration file stored by default under[`~/.config/platypush/config.yaml`](https://git.platypush.tech/platypush/platypush/-/blob/master/examples/conf/config.yaml):### Plugins[Full list](https://docs.platypush.tech/en/latest/plugins.html)Plugins are integrations that do things - like [modifyfiles](https://docs.platypush.tech/en/latest/platypush/plugins/file.html),[train and evaluate machine learningmodels](https://docs.platypush.tech/en/latest/platypush/plugins/tensorflow.html),[controlcameras](https://docs.platypush.tech/en/latest/platypush/plugins/camera.pi.html),[readsensors](https://docs.platypush.tech/en/latest/platypush/plugins/gpio.sensor.dht.html),[parse a webpage](https://docs.platypush.tech/en/latest/platypush/plugins/http.webpage.html),[controllights](https://docs.platypush.tech/en/latest/platypush/plugins/light.hue.html),[sendemails](https://docs.platypush.tech/en/latest/platypush/plugins/mail.smtp.html),[controlChromecasts](https://docs.platypush.tech/en/latest/platypush/plugins/media.chromecast.html),[run voicequeries](https://docs.platypush.tech/en/latest/platypush/plugins/assistant.google.html),[handle torrenttransfers](https://docs.platypush.tech/en/latest/platypush/plugins/torrent.html)or control[Zigbee](https://docs.platypush.tech/en/latest/platypush/plugins/zigbee.mqtt.html)or [Z-Wave](https://docs.platypush.tech/en/latest/platypush/plugins/zwave.html)devices.The configuration of a plugin matches one-on-one that of its documented classconstructor, so it's very straightforward to write a configuration for a pluginby reading its documentation:```yamllight.hue:  # Groups that will be controlled by default  groups:    - Living Room    - Hall```### ActionsPlugins expose *actions*, that match one-on-one the plugin class methodsdenoted by `@action`, so it's very straightforward to invoke plugin actions byjust reading the plugin documentation. They can be invoked directly from yourown scripts or they can be sent to the platform through any supported channelas simple JSON messages:```json{  &quot;type&quot;: &quot;request&quot;,  &quot;action&quot;: &quot;light.hue.on&quot;,  &quot;args&quot;: {    &quot;lights&quot;: [&quot;Entrance Bulb&quot;]  }}```### Backends[Full list](https://docs.platypush.tech/en/latest/backends.html)They are background services that either listen for messages on channels (likean [HTTPbackend](https://docs.platypush.tech/en/latest/platypush/backend/http.html), an[MQTTinstance](https://docs.platypush.tech/en/latest/platypush/backend/mqtt.html), a[Kafkainstance](https://docs.platypush.tech/en/latest/platypush/backend/kafka.html),a [Websocketservice](https://docs.platypush.tech/en/latest/platypush/backend/websocket.html),[Pushbullet](https://docs.platypush.tech/en/latest/platypush/backend/pushbullet.html)etc.) or monitor a device or a service for events (like a[sensor](https://docs.platypush.tech/en/latest/platypush/backend/sensor.html),a custom [voiceassistant](https://docs.platypush.tech/en/latest/platypush/backend/assistant.google.html),a bridge running on a[Zigbee](https://docs.platypush.tech/en/latest/platypush/backend/zigbee.mqtt.html)or[Z-Wave](https://docs.platypush.tech/en/latest/platypush/backend/zwave.html),an [NFC cardreader](https://docs.platypush.tech/en/latest/platypush/backend/nfc.html), a[MIDIdevice](https://docs.platypush.tech/en/latest/platypush/backend/midi.html), a[Telegramchannel](https://docs.platypush.tech/en/latest/platypush/backend/chat.telegram.html),a [Bluetoothscanner](https://docs.platypush.tech/en/latest/platypush/backend/bluetooth.scanner.ble.html)etc.).If a backend supports the execution of requests (e.g. HTTP, MQTT, Kafka,Websocket and TCP) then you can send requests to these services in JSON format.For example, in the case of the HTTP backend:```shell    # Get a tokencurl -XPOST -H 'Content-Type: application/json' -d '  {    &quot;username&quot;: &quot;$YOUR_USER&quot;,    &quot;password&quot;: &quot;$YOUR_PASSWORD&quot;  }' http://host:8008/auth    # Execute a requestcurl -XPOST -H 'Content-Type: application/json' \    -H &quot;Authorization: Bearer $YOUR_TOKEN&quot; -d '  {    &quot;type&quot;: &quot;request&quot;,    &quot;action&quot;: &quot;tts.say&quot;,    &quot;args&quot;: {      &quot;text&quot;: &quot;This is a test&quot;    }  }' http://host:8008/execute```### Events[Full list](https://docs.platypush.tech/en/latest/events.html)When a certain event occurs (e.g. a JSON request is received, or a [Bluetoothdevice isconnected](https://docs.platypush.tech/en/latest/platypush/events/bluetooth.html#platypush.message.event.bluetooth.BluetoothDeviceConnectedEvent),or a [Flic button ispressed](https://docs.platypush.tech/en/latest/platypush/events/button.flic.html#platypush.message.event.button.flic.FlicButtonEvent),or some [speech is detected on the voice assistantservice](https://docs.platypush.tech/en/latest/platypush/events/assistant.html#platypush.message.event.assistant.SpeechRecognizedEvent),or an [RSS feed has newitems](https://docs.platypush.tech/en/latest/platypush/events/http.rss.html#platypush.message.event.http.rss.NewFeedEvent),or a [new email isreceived](https://docs.platypush.tech/en/latest/platypush/events/mail.html#platypush.message.event.mail.MailReceivedEvent),or a [new track isplayed](https://docs.platypush.tech/en/latest/platypush/events/music.html#platypush.message.event.music.NewPlayingTrackEvent),or an [NFC tag isdetected](https://docs.platypush.tech/en/latest/platypush/events/nfc.html#platypush.message.event.nfc.NFCTagDetectedEvent),or [new sensor data isavailable](https://docs.platypush.tech/en/latest/platypush/events/sensor.html#platypush.message.event.sensor.SensorDataChangeEvent),or [a value of a Zigbee devicechanges](https://docs.platypush.tech/en/latest/platypush/events/zigbee.mqtt.html#platypush.message.event.zigbee.mqtt.ZigbeeMqttDevicePropertySetEvent),etc.), the associated backend will trigger an[event](https://docs.platypush.tech/en/latest/events.html).### HooksEvent hooks are custom pieces of logic that will be run when a certain event istriggered. Hooks are the glue that connects events to actions, exposing aparadigm similar to IFTTT (_if a certain event happens then run theseactions_). They can declared as:- Sections of the [`config.yaml`](https://git.platypush.tech/platypush/platypush/-/blob/master/examples/conf/config.yaml).  Example:```yamlevent.hook.SearchSongVoiceCommand:  if:    type: platypush.message.event.assistant.SpeechRecognizedEvent    phrase: &quot;play ${title} by ${artist}&quot;  then:    - action: music.mpd.clear    - action: music.mpd.search      args:        filter:          artist: ${artist}          title: ${title}    - if ${len(output)}:      - action: music.mpd.play        args:          resource: ${output[0]['file']}```- Stand-alone Python scripts stored under `~/.config/platypush/scripts` and  will be dynamically imported at start time.  [Example](https://git.platypush.tech/platypush/platypush/-/blob/master/examples/conf/hook.py):```pythonfrom platypush.event.hook import hookfrom platypush.utils import runfrom platypush.message.event.assistant import SpeechRecognizedEvent@hook(SpeechRecognizedEvent, phrase='play ${title} by ${artist}')def on_music_play_command(event, title=None, artist=None, **context):  results = run('music.mpd.search', filter={    'artist': artist,    'title': title,  })  if results:    run('music.mpd.play', results[0]['file'])```### ProceduresProcedures are pieces of custom logic that can be executed as atomic actionsusing `procedure.&lt;name&gt;` as an action name.They can be defined either in the `config.yaml` or as Python scripts storedunder `~/.config/platypush/scripts` - provided that the procedure is alsoimported in `~/.config/platypush/scripts/__init__.py` so it can be discoveredby the service.YAML example for a procedure that can be executed when we arrive home and turnson the lights if the luminosity is lower that a certain thresholds, says awelcome home message using the TTS engine and starts playing the music:```yamlprocedure.at_home:    # Get luminosity data from a sensor - e.g. LTR559    - action: gpio.sensor.ltr559.get_data    # If it's lower than a certain threshold, turn on the lights    - if ${int(light or 0) &lt; 110}:        - action: light.hue.on    # Say a welcome home message    - action: tts.google.say      args:        text: Welcome home    # Play the music    - action: music.mpd.play```Python example:```python    # Content of ~/.config/platypush/scripts/home.pyfrom platypush.procedure import procedurefrom platypush.utils import run@proceduredef at_home(**context):  sensor_data = run('gpio.sensor.ltr559.get_data')  if sensor_data['light'] &lt; 110:    run('light.hue.on')  run('tts.google.say', text='Welcome home')  run('music.mpd.play')```In either case, you can easily trigger the at-home procedure by sending anaction request message to a backend - for example, over the HTTP backend:```shellcurl -XPOST -H 'Content-Type: application/json' \    -H &quot;Authorization: Bearer $YOUR_TOKEN&quot; -d '  {    &quot;type&quot;: &quot;request&quot;,    &quot;action&quot;: &quot;procedure.at_home&quot;  }' http://host:8008/execute```### CronjobsCronjobs are pieces of logic that will be run at regular intervals, expressedin crontab-compatible syntax. They can be defined either in the `config.yaml`or as Python scripts stored under `~/.config/platypush/scripts` as functionslabelled by the `@cron` decorator.Note that seconds are also supported (unlike the standard crontab definition),but, for back-compatibility with the standard crontab format, they are at theend of the cron expression, so the expression is actually in the format`&lt;minute&gt; &lt;hour&gt; &lt;day_of_month&gt; &lt;month&gt; &lt;day_of_week&gt; &lt;second&gt;`.YAML example for a cronjob that is executed every 30 seconds and checks if aBluetooth device is nearby:```yamlcron.check_bt_device:  cron_expression: '* * * * * */30'  actions:    - action: bluetooth.lookup_name      args:        addr: XX:XX:XX:XX:XX:XX    - if ${name}:        - action: procedure.on_device_on    - else:        - action: procedure.on_device_off```Python example:```python    # Content of ~/.config/platypush/scripts/bt_cron.pyfrom platypush.cron import cronfrom platypush.utils import run@cron('* * * * * */30')def check_bt_device(**context):  name = run('bluetooth.lookup_name').get('name')  if name:    # on_device_on logic here  else:    # on_device_off logic here```### The web interfaceIf[`backend.http`](https://docs.platypush.tech/en/latest/platypush/backend/http.html)is enabled then a web interface will be provided by default on`http://host:8008/`. Besides using the `/execute` endpoint for runningrequests, the built-in web server also provides a full-featured interface thatgroups together the controls for most of the plugins - e.g. sensors, switches,music controls and search, media library and torrent management, lights,Zigbee/Z-Wave devices and so on. The UI is responsive and mobile-friendly.The web service also provides means for the user to create [customdashboards](https://git.platypush.tech/platypush/platypush/-/blob/master/examples/conf/dashboard.xml)that can be used to show information from multiple sources on a large screen.## Installation### System installationPlatypush uses Redis to deliver and store requests and temporary messages:```yaml    # Example for Debian-based distributions[sudo] apt-get install redis-server    # Enable and start the service[sudo] systemctl enable redis[sudo] systemctl start redis```#### Install through `pip````shell[sudo] pip3 install platypush```#### Install through a system package managerNote: currently only Arch Linux and derived distributions are supported.You can either install the[`platypush`](https://aur.archlinux.org/packages/platypush) package (for thelatest stable version) or the[`platypush-git`](https://aur.archlinux.org/packages/platypush-git) package(for the latest git version) through your favourite AUR package manager. Forexample, using `yay`:```shellyay platypush# Oryay platypush-git```The Arch Linux packages on AUR are automatically updated upon new git commitsor tags.#### Install from sources```shellgit clone https://git.platypush.tech/platypush/platypush.gitcd platypush[sudo] pip install .    # Or[sudo] python3 setup.py install```### Installing the dependencies for your extensionsAfter installing the base platform, you may want to check the dependencies andconfiguration required by the extensions that you wish to use. There are a fewways to check the dependencies required by an extension:#### Install via `extras` nameAll the extensions that require extra dependencies are listed in the[`extras_require` section under`setup.py`](https://git.platypush.tech/platypush/platypush/-/blob/master/setup.py#L72).#### Install via `manifest.yaml`All the plugins and backends have a `manifest.yaml` file in their source folder.Any extra dependencies are listed thereIf you followed the `extras` or `manifest.yaml` way to discover thedependencies, then you can install them in two ways:1. `pip` installation:```shell[sudo] pip3 install 'platypush[extra1,extra2,extra3]'```2. Sources installation:```shellcd $DIR_TO_PLATYPUSH[sudo] pip3 install '.[extra1,extra2,extra3]'```#### Check the instructions reported in the documentationIf you follow this route then simply run the commands listed in the[plugin/backend documentation](https://docs.platypush.tech) to get thedependencies installed.After installing the dependencies, create a configuration file under`~/.config/platypush/config.yaml` (the application can load the configurationfrom another location through the `-c` option) containing the configuration ofthe backend and plugins that you want to use, and add any hooks and proceduresfor your use case.You can then start the service by simply running:```shellplatypush```It's advised to run it as a systemd service though - simply copy the provided[`.service`file](https://git.platypush.tech/platypush/platypush/-/blob/master/examples/systemd/platypush.service)to `~/.config/systemd/user`, check if the path of `platypush` matches the pathwhere it's installed on your system, and start the service via `systemctl`:```shellsystemctl --user start platypush```### Virtual environment installationPlatypush provides a script named `platyvenv` that can parse a `config.yaml`and automatically create a virtual environment (under`~/.local/share/platypush/venv/&lt;device_id&gt;`) with all the dependencies requiredby the configured integrations.1. Create the environment from a configuration file:    ```shell    platyvenv build -c /path/to/config.yaml    ```2. Start the service from the virtual environment:    ```shell        # device_id matches either the hostname or the device_id in config.yaml    platyvenv start device_id    ```3. Stop the instance:    ```shell    platyvenv stop device_id    ```4. Remove the instance:    ```shell    platyvenv rm device_id    ```[Wiki instructions](https://git.platypush.tech/platypush/platypush/wiki/Run-platypush-in-a-virtual-environment)### Docker installationYou can also install Platypush in a container - the application provides ascript named `platydock` that automatically creates a container instance from a`config.yaml`:1. Create the container from a configuration file:    ```shell    platydock build -c /path/to/config.yaml    ```2. Start the container:    ```shell        # device_id matches either the hostname or the device_id in config.yaml    platydock start device_id    ```3. Stop the instance:    ```shell    platydock stop device_id    ```4. Remove the instance:    ```shell    platydock rm device_id    ```Note that both the virtual environment and Docker container option offer thepossibility to include extra YAML configuration files in the main `config.yaml`through the `include` directive (as long as they are in the same folder as themain `config.yaml`), as well as external Python scripts in a `scripts`directory in the same folder as the `config.yaml`.[Wiki instructions](https://git.platypush.tech/platypush/platypush/wiki/Run-platypush-in-a-container)## Mobile appAn [official Androidapp](https://f-droid.org/en/packages/tech.platypush.platypush/) is provided onthe F-Droid store. It allows to easily discover and manage multiple Platypushservices on a network through the web interface, and it easily brings the powerof Platypush to your fingertips.## TestsTo run the tests simply run `pytest` either from the project root folder or the`tests/` folder. Or run the following command from the project root folder:```shellpython -m tests```---## FundingIf you use and love Platypush, please consider [buying me a coffee/beer](https://paypal.me/fabiomanganiello).I've been working on Platypush all by myself in my spare time for the past fewyears, and I've made sure that it remains open and free.If you like this product, please consider supporting - I'm definitely notplanning to get rich with this project, but I'd love to have at least the costsfor the server covered by users.Issues and requests opened by donors will also be given priority over others.</longdescription>
</pkgmetadata>