<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#&quot; target=&quot;blank&quot;&gt;&lt;img src=&quot;https://python-ellar.github.io/ellar/img/EllarLogoB.png&quot; width=&quot;200&quot; alt=&quot;Ellar Logo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;end&quot;&gt;logo by: &lt;a target=&quot;_blank&quot; href=&quot;https://www.behance.net/azadvertised&quot;&gt;Azad&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; Ellar - Python ASGI web framework for building fast, efficient and scalable RESTful APIs and server-side application. &lt;/p&gt;![Test](https://github.com/python-ellar/ellar/actions/workflows/test_full.yml/badge.svg)![Coverage](https://img.shields.io/codecov/c/github/python-ellar/ellar)[![PyPI version](https://badge.fury.io/py/ellar.svg)](https://badge.fury.io/py/ellar)[![PyPI version](https://img.shields.io/pypi/v/ellar.svg)](https://pypi.python.org/pypi/ellar)[![PyPI version](https://img.shields.io/pypi/pyversions/ellar.svg)](https://pypi.python.org/pypi/ellar)## Project StatusBeta version- Documentation - 95% complete- Authentication and Authorization - (in progress)## **Introduction**Ellar is a lightweight ASGI framework for building efficient and scalable server-side python applications.It supports both OOP (Object-Oriented Programming) and FP (Functional Programming)Ellar is based on [Starlette (ASGI toolkit)](https://www.starlette.io/), a lightweight ASGI framework/toolkit well-suited for developing asynchronous web services with Python. ## **Features Summary**- **Easy to Use**: Ellar has a simple and intuitive API that makes it easy to get started with building a fast and scalable web applications or web APIs in Python.- **Dependency Injection (DI)**: It comes with DI system makes it easy to manage dependencies and reduce coupling between components.- **Pydantic Integration**: It is properly integrated with Pydantic, a popular Python library for data validation, to ensure that input data is valid.- **Templating with Jinja2**: Ellar provides built-in support for Jinja2 templates, making it easy to create dynamic web pages.- **OpenAPI Documentation**: It comes with built-in support for OpenAPI documentation, making it easy to generate `Swagger` or `ReDoc` documentation for your API. And more can be added with ease if necessary.- **Controller (MVC) Architecture**: Ellar's controller architecture follows the Model-View-Controller (MVC) pattern, making it easy to organize your code.- **Guards for Authentication and Authorization**: It provides built-in support for guards, allowing you to easily implement authentication and authorization in your application.- **Modularity**: Ellar follows a modular architecture inspired by NestJS, making it easy to organize your code into reusable modules.- **Asynchronous programming**: It allows you to takes advantage of Python's `async/await` feature to write efficient and fast code that can handle large numbers of concurrent requests## **Dependencies**- Python &gt;= 3.7- Starlette- Injector- Pydantic## **Installation**### Poetry InstallationFor [Poetry](https://python-poetry.org/) usages```shellpoetry add ellar-cli```### Pip InstallationFor normal pip installation```shellpip install ellar-cli```## **Creating a project**To create an ellar project, you need to have a `pyproject.toml` available on your root directory.This is necessary for ellar to store some `metadata` about your project. For Pip Users, you need to create `pyproject.toml` file```shellellar new carsite```If you are using `Poetry`, at your project root directory with `pyproject.toml`,run the ellar create project cli command,```shellellar create-project carsite```## **Run your project**Ellar runs [UVICORN - ASGI Server](https://www.uvicorn.org/) under the hood.```shellellar runserver --reload````--reload` is to watch for file changesNow go to [http://127.0.0.1:8000](http://127.0.0.1:8000)![Swagger UI](https://python-ellar.github.io/ellar/img/ellar_framework.png)For more info on Ellar CLI, click [here](https://github.com/python-ellar/ellar-cli)## **Adding a project module**A project module is a project app defining a group of controllers or services including templates and static files.So, now we have a project created, lets add an app to the project.```shellellar create-module car```## **Add Schema**In `car/schema.py`, lets add some serializer for car input and output data```pythonfrom ellar.common import Serializerclass CarSerializer(Serializer):    name: str    model: str    brand: strclass RetrieveCarSerializer(CarSerializer):    pk: str```## **Add Services**In `car/services.py`, lets create a dummy repository `CarDummyDB` to manage our car data.```pythonimport typing as timport uuidfrom ellar.di import injectable, singleton_scope@injectable(scope=singleton_scope)class CarDummyDB:    class CarDummyDBItem:        pk: str        def __init__(self, **data: t.Dict) -&gt; None:            self.__dict__ = data        def __eq__(self, other):            if isinstance(other, CarDummyDB.CarDummyDBItem):                return self.pk == other.pk            return self.pk == str(other)    def __init__(self) -&gt; None:        self._data: t.List[CarDummyDB.CarDummyDBItem] = []    def add_car(self, data: t.Dict) -&gt; str:        pk = uuid.uuid4()        _data = dict(data)        _data.update(pk=str(pk))        item = self.CarDummyDBItem(**_data)        self._data.append(item)        return item.pk    def list(self) -&gt; t.List[&quot;CarDummyDB.CarDummyDBItem&quot;]:        return self._data    def update(self, car_id: str, data: t.Dict) -&gt; t.Optional[&quot;CarDummyDB.CarDummyDBItem&quot;]:        idx = self._data.index(car_id)        if idx &gt;= 0:            _data = dict(data)            _data.update(pk=str(car_id))            self._data[idx] = self.CarDummyDBItem(**_data)            return self._data[idx]    def get(self, car_id: str) -&gt; t.Optional[&quot;CarDummyDB.CarDummyDBItem&quot;]:        idx = self._data.index(car_id)        if idx &gt;= 0:            return self._data[idx]    def remove(self, car_id: str) -&gt; t.Optional[&quot;CarDummyDB.CarDummyDBItem&quot;]:        idx = self._data.index(car_id)        if idx &gt;= 0:            return self._data.pop(idx)```## **Add Controller**In `car/controllers.py`, lets create `CarController````pythonimport typing as tfrom ellar.common import Controller, delete, get, put, post, ControllerBasefrom ellar.common.exceptions import NotFoundfrom .schemas import CarSerializer, RetrieveCarSerializerfrom .services import CarDummyDB@Controllerclass CarController(ControllerBase):    def __init__(self, db: CarDummyDB) -&gt; None:        self.car_db = db    @post(&quot;/create&quot;, response={200: str})    async def create_cat(self, payload: CarSerializer):        pk = self.car_db.add_car(payload.dict())        return pk    @put(&quot;/{car_id:str}&quot;, response={200: RetrieveCarSerializer})    async def update_cat(self, car_id: str, payload: CarSerializer):        car = self.car_db.update(car_id, payload.dict())        if not car:            raise NotFound(&quot;Item not found&quot;)        return car    @get(&quot;/{car_id:str}&quot;, response={200: RetrieveCarSerializer})    async def get_car_by_id(self, car_id: str):        car = self.car_db.get(car_id)        if not car:            raise NotFound('Item not found.')        return car    @delete(&quot;/{car_id:str}&quot;, response={204: dict})    async def deleted_cat(self, car_id: str):        car = self.car_db.remove(car_id)        if not car:            raise NotFound('Item not found.')        return 204, {}    @get(&quot;/&quot;, response={200: t.List[RetrieveCarSerializer]})    async def list(self):        return self.car_db.list()```## **Register Service and Controller**In `car/module.py`, lets register `CarController` and `CarDummyDB````pythonfrom ellar.common import Modulefrom ellar.core import ModuleBasefrom ellar.di import Containerfrom .controllers import CarControllerfrom .services import CarDummyDB@Module(    controllers=[CarController],    providers=[CarDummyDB],    routers=[],)class CarModule(ModuleBase):    def register_providers(self, container: Container) -&gt; None:        # for more complicated provider registrations        # container.register_instance(...)        pass```## **Registering Module**Ellar is not aware of `CarModule` yet, so we need to add it to the `modules` list of `ApplicationModule` at the `carsite/root_module.py`.```pythonfrom ellar.common import Module, exception_handler, JSONResponse, Response, IHostContextfrom ellar.core import ModuleBasefrom ellar.samples.modules import HomeModulefrom .car.module import CarModule@Module(modules=[HomeModule, CarModule])class ApplicationModule(ModuleBase):    @exception_handler(404)    def exception_404_handler(cls, context: IHostContext, exc: Exception) -&gt; Response:        return JSONResponse(dict(detail=&quot;Resource not found.&quot;))```## **Enabling OpenAPI Docs**To start up openapi, we need to go back to project folder in the `server.py`then add the following below.```pythonimport osfrom ellar.constants import ELLAR_CONFIG_MODULEfrom ellar.core import AppFactoryfrom ellar.openapi import OpenAPIDocumentModule, OpenAPIDocumentBuilder, SwaggerDocumentGeneratorfrom .root_module import ApplicationModuleapplication = AppFactory.create_from_app_module(    ApplicationModule,    config_module=os.environ.get(        ELLAR_CONFIG_MODULE, &quot;carsite.config:DevelopmentConfig&quot;    ),)document_builder = OpenAPIDocumentBuilder()document_builder.set_title('CarSite API') \    .set_version('1.0.0') \    .set_contact(name='Eadwin', url='https://www.yahoo.com', email='eadwin@gmail.com') \    .set_license('MIT Licence', url='https://www.google.com')document = document_builder.build_document(application)module = OpenAPIDocumentModule.setup(    document=document,    document_generator=SwaggerDocumentGenerator(),    guards=[])application.install_module(module)```Now we can test our API at [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs#/)Please ensure your server is running![Swagger UI](https://python-ellar.github.io/ellar/img/car_api.png)## **HTML Templating**Ellar has built-in support for Jinja2, which is a popular template engine for HTML. This feature allows for easy and efficient HTML templating similar to that of Flask. Jinja2 can be used to create reusable templates, and to insert dynamic data into HTML pages. It also has support for template inheritance, control structures, and other useful features that can help to simplify and streamline the process of creating HTML templates.```html&lt;html&gt;  &lt;body&gt;    &lt;ul&gt;      {% for item in items %}      &lt;li&gt;{{ item }}&lt;/li&gt;      {% endfor %}    &lt;/ul&gt;  &lt;/body&gt;&lt;/html&gt;```See the [Doc](https://python-ellar.github.io/ellar/templating/templating/) for more examples.</longdescription>
</pkgmetadata>