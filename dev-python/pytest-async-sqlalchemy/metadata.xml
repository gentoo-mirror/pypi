<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-async-sqlalchemy![PyPI version](https://img.shields.io/pypi/v/pytest-async-sqlalchemy.svg)![Python versions](https://img.shields.io/pypi/pyversions/pytest-async-sqlalchemy.svg)Database testing fixtures using the SQLAlchemy asyncio APIYou can install &quot;pytest-async-sqlalchemy&quot; via [pip] from [PyPI]    $ pip install pytest-async-sqlalchemy## Setup### Providing a Session Scoped Event LoopThe first thing to do is to declare an `even_loop` fixture  with the scope set as &quot;session&quot;. You can copy &amp; paste the code below to your `conftest.py`:    @pytest.fixture(scope=&quot;session&quot;)    def event_loop():        &quot;&quot;&quot;        Creates an instance of the default event loop for the test session.        &quot;&quot;&quot;        if sys.platform.startswith(&quot;win&quot;) and sys.version_info[:2] &gt;= (3, 8):            # Avoid &quot;RuntimeError: Event loop is closed&quot; on Windows when tearing down tests            # https://github.com/encode/httpx/issues/914            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())        loop = asyncio.new_event_loop()        yield loop        loop.close()This is required since **pytest-async-sqlalchemy** shares the database connection between testsfor performance reasons, but the default `even_loop` fixture defined by [pytest-asyncio](http://pypi.org/project/pytest-asyncio) is function scoped&lt;sup&gt;1&lt;/sup&gt; (i.e., it kills the database connection after each test). ### Providing Database URL and Initialization**pytest-async-sqlalchemy** provides placeholders to configure and initializethe testing database: `database_url` and `init_database`. These two **must** bedefined in your project `conftest.py` like below:    @pytest.fixture(scope=&quot;session&quot;)    def _database_url():        return &quot;postgresql+asyncpg://postgres:masterkey@localhost/dbtest&quot;            @pytest.fixture(scope=&quot;session&quot;)    def init_database():        from myprorject.db import metadata            return metadata.create_allThe `_database_url` must be a session-scoped fixture that returns the database URL inSQLAlchemy standard. `init_database` must also be a session-scoped fixture that returnsthe callable used to initialize the database (in most cases, this would return the `metadata.create_all` function).    ## UsageThis plugin provides the following fixtures:- `db_session`: An `AsyncSession` object bounded to the test session database. Database   transactions are discarded after each test function, so the same database is used for   the entire test suite (avoiding the overhead of initializing a database on every test).- `database`: An URL to the initialized test session database.- `scoped_database`: `scoped_database` provides a new database within the scope of the  test function. The value of the fixture is a string URL pointing to the database.## ContributingContributions are very welcome. Tests can be run with [tox], please ensurethe coverage at least stays the same before you submit a pull request.## LicenseDistributed under the terms of the [MIT] license, &quot;pytest-async-sqlalchemy&quot; is free and open source software[pip]: http://pypi.org/project/pip[PyPI]: https://pypi.org/project[MIT]: http://opensource.org/licenses/MIT[tox]: https://tox.readthedocs.io/en/latest/---&lt;small&gt;1. **pytest-async-sqlalchemy** can't provide its own `even_loop` since pytest plugins are not able to override fixtures from one another. So the only solution we have now is to aks the user todeclare its own `event_loop` fixture. Suggestions on how to overcome that in a better way are welcome, hit us on the Issues section.&lt;/small&gt;</longdescription>
</pkgmetadata>