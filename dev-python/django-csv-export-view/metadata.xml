<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-csv-export-viewA Django class-based view for CSV export.![Build Status](https://github.com/benkonrath/django-csv-export-view/actions/workflows/tests.yml/badge.svg)## Features* Easy CSV exports by setting a Django `model` and a `fields` or `exclude` iterable* Works with existing class-based view mixins for access control* Generates Microsoft Excel friendly CSV by default* Proper HTTP headers set for CSV* Easy to override defaults as needed* Easy integration into Django Admin## Installation`pip install django-csv-export-view`## Quick StartExamples:```pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    fields = (&quot;field&quot;, &quot;related&quot;, &quot;property&quot;)    # When using related fields you will likely want to override get_queryset() use select_related() or prefetch_related().    def get_queryset(self):        return super().get_queryset().select_related(&quot;related&quot;)        OR        return super().get_queryset().prefetch_related(&quot;related&quot;)``````pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    fields = (&quot;field&quot;, &quot;related__field&quot;, &quot;property&quot;)``````pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    fields = &quot;__all__&quot;``````pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    exclude = (&quot;id&quot;,)    def get_queryset(self):        queryset = super().get_queryset()        return queryset.exclude(deleted=True)``````pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    def get_fields(self, queryset):        fields = [&quot;username&quot;, &quot;email&quot;]        if self.request.user.is_superuser:            fields.append(&quot;birth_date&quot;)        return fields````fields` / `exclude`: An iterable of field names and properties. You cannot set both `fields` and `exclude`.`fields` can also be `&quot;__all__&quot;` to export all fields. Model properties are not included when `&quot;__all__&quot;` is used.Related field can be used with `__`. Override `get_fields(self, queryset)` for custom behaviour not supported by thedefault logic.`model`: The model to use for the CSV export queryset. Override `get_queryset()` if you need a custom queryset.## Further CustomizationExamples:```pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    fields = &quot;__all__&quot;    header = False    specify_separator = False    filename = &quot;data-export.csv&quot;``````pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    fields = &quot;__all__&quot;    verbose_names = False``````pythonfrom django.utils import timezonefrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    fields = &quot;__all__&quot;    def get_filename(self, queryset):        return &quot;data-export-{!s}.csv&quot;.format(timezone.now())````header` - *boolean* - Default: `True`  Whether to include the header in the CSV.`filename` - *string* - Default: Dasherized version of `verbose_name_plural` from `queryset.model`.  Override `get_filename(self, queryset)` if a dynamic filename is required.`specify_separator` - *boolean* - Default: `True`  Whether to include `sep=&lt;sepaator&gt;` as the first line of the CSV file. This is useful for generating MicrosoftExcel friendly CSV.`verbose_names` - *boolean* - Default: `True`  Whether to use capitalized verbose column names in the header of the CSV file. If `False`, field names are usedinstead.## CSV Writer OptionsExample:```pythonfrom csv_export.views import CSVExportViewfrom .models import MyModelclass DataExportView(CSVExportView):    model = MyModel    fields = &quot;__all__&quot;    def get_csv_writer_fmtparams(self):        fmtparams = super().get_csv_writer_fmtparams()        fmtparams[&quot;delimiter&quot;] = &quot;|&quot;        return fmtparams```Override `get_csv_writer_fmtparams(self)` and return a dictionary of csv write format parameters. Default formatparameters are: dialect=&quot;excel&quot; and quoting=csv.QUOTE_ALL. See all available options in the Python docs:https://docs.python.org/3.9/library/csv.html#csv.writer## Django Admin IntegrationExample:```pythonfrom django.contrib import adminfrom csv_export.views import CSVExportViewfrom .models import MyModel@admin.register(MyModel)class DataAdmin(admin.ModelAdmin):    actions = (&quot;export_data_csv&quot;,)    def export_data_csv(self, request, queryset):        view = CSVExportView(queryset=queryset, fields=&quot;__all__&quot;)        return view.get(request)    export_data_csv.short_description = &quot;Export CSV for selected Data records&quot;```## ContributionsPull requests are happily accepted.## Alternativeshttps://github.com/django-import-export/django-import-export/https://github.com/mjumbewu/django-rest-framework-csv</longdescription>
</pkgmetadata>