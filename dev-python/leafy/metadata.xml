<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Leafy Graph LibraryLeafy is a python graph library written in cython. This mix gives the speed of writingthe library in c with the benefit of python bindings.## Usage### Graph ObjectsLeafy supports two types of graphs: Dense and Sparse. These are represented by the classes `leafy.graph.Graph` and `leafy.graph.SparseGraph`.To instantiate a graph object we need to know the number of nodes (verticies) in thegraph, and if the graph is directed. Graphs defualt to undirected.```python&gt;&gt;&gt; from leafy.graph import Graph&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; g = Graph(4)&gt;&gt;&gt; g.add_edge(0, 1)&gt;&gt;&gt; g.add_edge(2, 3)&gt;&gt;&gt; g.add_edge(2, 1)&gt;&gt;&gt; pprint(g.matrix)[[1000001.0, 1.0, 1000001.0, 1000001.0], [1.0, 1000001.0, 1.0, 1000001.0], [1000001.0, 1.0, 1000001.0, 1.0], [1000001.0, 1000001.0, 1.0, 1000001.0]]```the same edges can be defined as a directed `SparseGraph````python&gt;&gt;&gt; from leafy.graph import SparseGraph&gt;&gt;&gt; g = SparseGraph(4, True)&gt;&gt;&gt; g.add_edge(0, 1)&gt;&gt;&gt; g.add_edge(2, 3)&gt;&gt;&gt; g.add_edge(2, 1)&gt;&gt;&gt; g.list[[1], [], [3, 1], []]```### SearchLeafy can run Depth First Search (DFS) and Breadth First Search (BFS) on a graph andreturn the graph search properties.To run a search we need to define the graph to search and the node to start from.Before you can view the properties we must call `.run()`.```python&gt;&gt;&gt; from leafy.search import DFS&gt;&gt;&gt; graph = small_graph(request.param)&gt;&gt;&gt; dfs = DFS(graph, 0)&gt;&gt;&gt; dfs.run()&gt;&gt;&gt; dfs.simple_path(12)[0, 1, 2, 11, 12]&gt;&gt;&gt; dfs.bridges[(1, 3), (3, 4), (3, 5), (2, 11), (11, 12)]```### DigraphsFor diagraphs leafy supports DFS which can be imported from `leafy.digraph````python&gt;&gt;&gt; from leafy.digraph import DFS&gt;&gt;&gt; dag = small_dag()&gt;&gt;&gt; dfs = DFS(dag, 0)&gt;&gt;&gt; dfs.run()&gt;&gt;&gt; dfs.is_dagTrue&gt;&gt;&gt; dfs.topological_order()[0, 6, 2, 3, 5, 4, 9, 11, 12, 10, 1]```### Shortest DistanceFor network shortest path leafy supports single source Dijkstra which can be imported from `leafy.shortest_path````python&gt;&gt;&gt; from leafy.shortest_path import Dijkstra&gt;&gt;&gt; dag = small_network()&gt;&gt;&gt; dij = Dijkstra(dag, 0)&gt;&gt;&gt; dij.run()&gt;&gt;&gt; dij.path(3)[3, 7, 2, 1, 0]```</longdescription>
</pkgmetadata>