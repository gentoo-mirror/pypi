<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># eth-event[![Pypi Status](https://img.shields.io/pypi/v/eth-event.svg)](https://pypi.org/project/eth-event/) [![Build Status](https://img.shields.io/github/workflow/status/iamdefinitelyahuman/eth-event/main%20workflow)](https://github.com/iamdefinitelyahuman/eth-event/actions) [![Coverage Status](https://img.shields.io/codecov/c/github/iamdefinitelyahuman/eth-event)](https://codecov.io/gh/iamdefinitelyahuman/eth-event)Tools for Ethereum event decoding and topic generation.## InstallationYou can install the latest release via `pip`:```bashpip install eth-event```Or clone the repository and use `setuptools` for the most up-to-date version:```bashgit clone https://github.com/iamdefinitelyahuman/eth-event.gitcd eth-eventpython3 setup.py install```## UsageThe public API is well documented within the docstrings. The following example may also help:```python&gt;&gt;&gt; from eth_event import get_topics# generating a topic map&gt;&gt;&gt; abi = open('abi.json').read()&gt;&gt;&gt; topic_map = get_topic_map(abi)&gt;&gt;&gt; topic_map{    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': {        'name': 'Transfer',        'inputs': [            {'name': 'from', 'type': 'address', 'indexed': True},            {'name': 'to', 'type': 'address', 'indexed': True},            {'name': 'value', 'type': 'uint256', 'indexed': False}        ]    }}# decoding event logs from a transaction receipt&gt;&gt;&gt; tx = token.transfer(account[1], 100, {'from': account[0]})&lt;Transaction object '0x615a157e84715d5f960a38fe2a3ddb566c8393cfc71f15b06170a0eff74dfdde'&gt;&gt;&gt;&gt; eth_event.decode_logs(tx.logs, topic_map)[{    'name': 'Transfer',    'address': &quot;0x3194cBDC3dbcd3E11a07892e7bA5c3394048Cc87&quot;,    'data': [        {'name': 'from', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': True},        {'name': 'to', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': True},        {'name': 'tokens', 'type': 'uint256', 'value': 100, 'decoded': True}    ],}]# decoding a structLog from Geth's debug_traceTransaction endpoint&gt;&gt;&gt; trace = web3.provider.make_request(    &quot;debug_traceTransaction&quot;,    ['0x615a157e84715d5f960a38fe2a3ddb566c8393cfc71f15b06170a0eff74dfdde', {}])&gt;&gt;&gt; struct_log = trace['result']['structLogs']&gt;&gt;&gt; eth_event.decode_trace(struct_log, topic_map, initial_address=&quot;0x3194cBDC3dbcd3E11a07892e7bA5c3394048Cc87&quot;)[{    'name': 'Transfer',    'address': &quot;0x3194cBDC3dbcd3E11a07892e7bA5c3394048Cc87&quot;,    'data': [        {'name': 'from', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': True},        {'name': 'to', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': True},        {'name': 'tokens', 'type': 'uint256', 'value': 100, 'decoded': True}    ],}]```## Limitations* If an array is indexed in an event, the topic is generated as a sha3 hash and so cannot be decrypted. In this case, the unencrypted topic is returned and `decoded` is set to `False`.* Anonymous events cannot be decoded. Use the `allow_undecoded` kwarg when calling `decode_logs` and `decode_trace` to receive the undecoded log without raising an exception.* When decoding a trace, the initial address for the call cannot be determined. To include addresses where decoded events were emitted you must supply the initial address with the `initial_address` keyword argument.## TestsTo run the test suite:```bash$ tox```## DevelopmentThis project is still in development. Comments, questions, criticisms and pull requests are welcomed.## LicenseThis project is licensed under the [MIT license](LICENSE).</longdescription>
</pkgmetadata>