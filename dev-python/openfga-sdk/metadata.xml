<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SDK for OpenFGA[![pypi](https://img.shields.io/pypi/v/openfga_sdk.svg?style=flat)](https://pypi.org/project/openfga_sdk)[![Release](https://img.shields.io/github/v/release/openfga/python-sdk?sort=semver&amp;color=green)](https://github.com/openfga/python-sdk/releases)[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](./LICENSE)[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fopenfga%2Fpython-sdk.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fopenfga%2Fpython-sdk?ref=badge_shield)[![Discord Server](https://img.shields.io/discord/759188666072825867?color=7289da&amp;logo=discord &quot;Discord Server&quot;)](https://discord.gg/8naAwJfWN6)[![Twitter](https://img.shields.io/twitter/follow/openfga?color=%23179CF0&amp;logo=twitter&amp;style=flat-square &quot;@openfga on Twitter&quot;)](https://twitter.com/openfga)This is an autogenerated python SDK for OpenFGA. It provides a wrapper around the [OpenFGA API definition](https://openfga.dev/api).## Table of Contents- [About OpenFGA](#about)- [Resources](#resources)- [Installation](#installation)- [Getting Started](#getting-started)  - [Initializing the API Client](#initializing-the-api-client)  - [Get your Store ID](#get-your-store-id)  - [Calling the API](#calling-the-api)    - [Stores](#stores)      - [List All Stores](#list-stores)      - [Create a Store](#create-store)      - [Get a Store](#get-store)      - [Delete a Store](#delete-store)    - [Authorization Models](#authorization-models)      - [Read Authorization Models](#read-authorization-models)      - [Write Authorization Model](#write-authorization-model)      - [Read a Single Authorization Model](#read-a-single-authorization-model)      - [Read the Latest Authorization Model](#read-the-latest-authorization-model)    - [Relationship Tuples](#relationship-tuples)      - [Read Relationship Tuple Changes (Watch)](#read-relationship-tuple-changes-watch)      - [Read Relationship Tuples](#read-relationship-tuples)      - [Write (Create and Delete) Relationship Tuples](#write-create-and-delete-relationship-tuples)    - [Relationship Queries](#relationship-queries)      - [Check](#check)      - [Batch Check](#batch-check)      - [Expand](#expand)      - [List Objects](#list-objects)      - [List Relations](#list-relations)    - [Assertions](#assertions)      - [Read Assertions](#read-assertions)      - [Write Assertions](#write-assertions)  - [API Endpoints](#api-endpoints)  - [Models](#models)- [Contributing](#contributing)  - [Issues](#issues)  - [Pull Requests](#pull-requests)- [License](#license)## About[OpenFGA](https://openfga.dev) is an open source Fine-Grained Authorization solution inspired by [Google's Zanzibar paper](https://research.google/pubs/pub48190/). It was created by the FGA team at [Auth0](https://auth0.com) based on [Auth0 Fine-Grained Authorization (FGA)](https://fga.dev), available under [a permissive license (Apache-2)](https://github.com/openfga/rfcs/blob/main/LICENSE) and welcomes community contributions.OpenFGA is designed to make it easy for application builders to model their permission layer, and to add and integrate fine-grained authorization into their applications. OpenFGAâ€™s design is optimized for reliability and low latency at a high scale.## Resources- [OpenFGA Documentation](https://openfga.dev/docs)- [OpenFGA API Documentation](https://openfga.dev/api/service)- [Twitter](https://twitter.com/openfga)- [OpenFGA Discord Community](https://discord.gg/8naAwJfWN6)- [Zanzibar Academy](https://zanzibar.academy)- [Google's Zanzibar Paper (2019)](https://research.google/pubs/pub48190/)## Installation### pip install#### PyPIThe openfga_sdk is available to be downloaded via PyPI, you can install directly using:```shpip3 install openfga_sdk```(you may need to run `pip` with root permission: `sudo pip3 install openfga_sdk`)Then import the package:```pythonimport openfga_sdk```#### GitHubThe openfga_sdk is also hosted in GitHub, you can install directly using:```shpip3 install https://github.com/openfga/python-sdk.git```(you may need to run `pip` with root permission: `sudo pip3 install https://github.com/openfga/python-sdk.git`)Then import the package:```pythonimport openfga_sdk```### SetuptoolsInstall via [Setuptools](https://pypi.python.org/pypi/setuptools).```shpython setup.py install --user```(or `sudo python setup.py install` to install the package for all users)Then import the package:```pythonimport openfga_sdk```## Getting Started### Initializing the API Client[Learn how to initialize your SDK](https://openfga.dev/docs/getting-started/setup-sdk-client)The documentation below refers to the `OpenFgaClient`, to read the documentation for `OpenFgaApi`, check out the [`v0.1.1` documentation](https://github.com/openfga/python-sdk/tree/v0.1.1#readme).&gt; The OpenFgaClient will by default retry API requests up to 15 times on 429 and 5xx errors.#### No Credentials```pythonimport openfga_sdkfrom openfga_sdk.client import OpenFgaClientasync def main():    configuration = openfga_sdk.ClientConfiguration(        api_scheme = OPENFGA_API_SCHEME, # optional, defaults to &quot;https&quot;        api_host = OPENFGA_API_HOST, # required, define without the scheme (e.g. api.fga.example instead of https://api.fga.example)        store_id = OPENFGA_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`        authorization_model_id = OPENFGA_AUTHORIZATION_MODEL_ID, # Optional, can be overridden per request    )    # Enter a context with an instance of the OpenFgaClient    async with OpenFgaClient(configuration) as fga_client:        api_response = await fga_client.read_authorization_models()        await fga_client.close()```#### API Token```pythonimport openfga_sdkfrom openfga_sdk.client import OpenFgaClientfrom openfga_sdk.credentials import Credentials, CredentialConfigurationasync def main():    configuration = openfga_sdk.ClientConfiguration(        api_scheme = OPENFGA_API_SCHEME, # optional, defaults to &quot;https&quot;        api_host = OPENFGA_API_HOST, # required, define without the scheme (e.g. api.fga.example instead of https://api.fga.example)        store_id = OPENFGA_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`        authorization_model_id = OPENFGA_AUTHORIZATION_MODEL_ID, # Optional, can be overridden per request        credentials = Credentials(            method='api_token',            configuration=CredentialConfiguration(                api_token= OPENFGA_API_TOKEN,            )        )    )    # Enter a context with an instance of the OpenFgaClient    async with OpenFgaClient(configuration) as fga_client:        api_response = await fga_client.read_authorization_models()        await fga_client.close()```#### Client Credentials```pythonimport openfga_sdkfrom openfga_sdk.client import OpenFgaClientfrom openfga_sdk.credentials import Credentials, CredentialConfigurationasync def main():    configuration = openfga_sdk.ClientConfiguration(        api_scheme = OPENFGA_API_SCHEME, # optional, defaults to &quot;https&quot;        api_host = OPENFGA_API_HOST, # required, define without the scheme (e.g. api.fga.example instead of https://api.fga.example)        store_id = OPENFGA_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`        authorization_model_id = OPENFGA_AUTHORIZATION_MODEL_ID, # Optional, can be overridden per request        credentials = Credentials(            method='client_credentials',            configuration=CredentialConfiguration(                api_issuer= OPENFGA_API_TOKEN_ISSUER,                api_audience= OPENFGA_API_AUDIENCE,                client_id= OPENFGA_CLIENT_ID,                client_secret= OPENFGA_CLIENT_SECRET,            )        )    )    # Enter a context with an instance of the OpenFgaClient    async with OpenFgaClient(configuration) as fga_client:        api_response = await fga_client.read_authorization_models()        await fga_client.close()```#### Synchronous ClientTo run outside of an async context, the project exports a synchronous clientfrom `openfga_sdk.sync` that supports all the credential types and calls,without requiring async/await.```pythonimport openfga_sdkfrom openfga_sdk.sync.client import OpenFgaClientdef main():    configuration = openfga_sdk.ClientConfiguration(        api_scheme=OPENFGA_API_SCHEME, # optional, defaults to &quot;https&quot;        api_host=OPENFGA_API_HOST, # required, define without the scheme (e.g. api.fga.example instead of https://api.fga.example)        store_id=OPENFGA_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`        authorization_model_id=OPENFGA_AUTHORIZATION_MODEL_ID, # optional, can be overridden per request    )    # Enter a context with an instance of the OpenFgaClient    with OpenFgaClient(configuration) as fga_client:        api_response = fga_client.read_authorization_models()```### Get your Store IDYou need your store id to call the OpenFGA API (unless it is to call the [CreateStore](#create-store) or [ListStores](#list-stores) methods).If your server is configured with [authentication enabled](https://openfga.dev/docs/getting-started/setup-openfga#configuring-authentication), you also need to have your credentials ready.### Calling the API#### Stores##### List StoresGet a paginated list of stores.[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/ListStores)```pythonoptions = {&quot;page_size&quot;: 25, &quot;continuation_token&quot;: &quot;eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==&quot;}response = await fga_client.list_stores(options)# response = ListStoresResponse(...)# response.stores = [Store({&quot;id&quot;: &quot;01FQH7V8BEG3GPQW93KTRFR8JB&quot;, &quot;name&quot;: &quot;FGA Demo Store&quot;, &quot;created_at&quot;: &quot;2022-01-01T00:00:00.000Z&quot;, &quot;updated_at&quot;: &quot;2022-01-01T00:00:00.000Z&quot;})]```##### Create StoreCreate and initialize a store.[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/CreateStore)```pythonbody = CreateStoreRequest(    name = &quot;FGA Demo Store&quot;,)response = await fga_client.create_store(body)# response.id = &quot;01FQH7V8BEG3GPQW93KTRFR8JB&quot;```##### Get StoreGet information about the current store.[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/GetStore)&gt; Requires a client initialized with a storeId```pythonresponse = await fga_client.get_store()# response = Store({&quot;id&quot;: &quot;01FQH7V8BEG3GPQW93KTRFR8JB&quot;, &quot;name&quot;: &quot;FGA Demo Store&quot;, &quot;created_at&quot;: &quot;2022-01-01T00:00:00.000Z&quot;, &quot;updated_at&quot;: &quot;2022-01-01T00:00:00.000Z&quot;})```##### Delete StoreDelete a store.[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/DeleteStore)&gt; Requires a client initialized with a storeId```pythonresponse = await fga_client.delete_store()```#### Authorization Models##### Read Authorization ModelsRead all authorization models in the store.[API Documentation](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModels)```pythonoptions = {&quot;page_size&quot;: 25, &quot;continuation_token&quot;: &quot;eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==&quot;}response = await fga_client.read_authorization_models(options)# response.authorization_models = [AuthorizationModel(id='01GXSA8YR785C4FYS3C0RTG7B1', schema_version = '1.1', type_definitions=type_definitions[...], AuthorizationModel(id='01GXSBM5PVYHCJNRNKXMB4QZTW', schema_version = '1.1', type_definitions=type_definitions[...])]```##### Write Authorization ModelCreate a new authorization model.[API Documentation](https://openfga.dev/api/service#/Authorization%20Models/WriteAuthorizationModel)&gt; Note: To learn how to build your authorization model, check the Docs at https://openfga.dev/docs.&gt; Learn more about [the OpenFGA configuration language](https://openfga.dev/docs/configuration-language).&gt; You can use the [OpenFGA Syntax Transformer](https://github.com/openfga/syntax-transformer) to convert between the friendly DSL and the JSON authorization model.```pythonbody = WriteAuthorizationModelRequest(    schema_version = &quot;1.1&quot;,    type_definitions=[        TypeDefinition(            type=&quot;user&quot;,        ),        TypeDefinition(            type=&quot;document&quot;,            relations=dict(                writer=Userset(                    this=dict(),                ),                viewer=Userset(                    union=Usersets(                        child=[                            Userset(this=dict()),                            Userset(computed_userset=ObjectRelation(                                object=&quot;&quot;,                                relation=&quot;writer&quot;,                            )),                        ],                    ),                ),            )        ),    ],)response = await fga_client.write_authorization_model(body)# response.authorization_model_id = &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;```##### Read a Single Authorization ModelRead a particular authorization model.[API Documentation](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModel)```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}response = await fga_client.read_authorization_model(id)# response.authorization_model =  AuthorizationModel(id='01GXSA8YR785C4FYS3C0RTG7B1', schema_version = '1.1', type_definitions=type_definitions[...])```##### Read the Latest Authorization ModelReads the latest authorization model (note: this ignores the model id in configuration).[API Documentation](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModel)```pythonresponse = await fga_client.read_latest_authorization_model()# response.authorization_model =  AuthorizationModel(id='01GXSA8YR785C4FYS3C0RTG7B1', schema_version = '1.1', type_definitions=type_definitions[...])```#### Relationship Tuples##### Read Relationship Tuple Changes (Watch)Reads the list of historical relationship tuple writes and deletes.[API Documentation](https://openfga.dev/api/service#/Relationship%20Tuples/ReadChanges)```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;page_size&quot;: &quot;25&quot;,    &quot;continuation_token&quot;: &quot;eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==&quot;}body = ClientReadChangesRequest(&quot;document&quot;)response = await fga_client.read_changes(body, options)# response.continuation_token = ...# response.changes = [TupleChange(tuple_key=TupleKey(object=&quot;...&quot;,relation=&quot;...&quot;,user=&quot;...&quot;),operation=TupleOperation(&quot;TUPLE_OPERATION_WRITE&quot;),timestamp=datetime.fromisoformat(&quot;...&quot;))]```##### Read Relationship TuplesReads the relationship tuples stored in the database. It does not evaluate nor exclude invalid tuples according to the authorization model.[API Documentation](https://openfga.dev/api/service#/Relationship%20Tuples/Read)```python# Find if a relationship tuple stating that a certain user is a viewer of certain documentbody = TupleKey(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;viewer&quot;,    object=&quot;document:roadmap&quot;,)response = await fga_client.read(body)# response = ReadResponse({&quot;tuples&quot;: [Tuple({&quot;key&quot;: TupleKey({&quot;user&quot;:&quot;...&quot;,&quot;relation&quot;:&quot;...&quot;,&quot;object&quot;:&quot;...&quot;}), &quot;timestamp&quot;: datetime.fromisoformat(&quot;...&quot;) })]})``````python# Find all relationship tuples where a certain user has a relationship as any relation to a certain documentbody = TupleKey(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    object=&quot;document:roadmap&quot;,)response = await fga_client.read(body)# response = ReadResponse({&quot;tuples&quot;: [Tuple({&quot;key&quot;: TupleKey({&quot;user&quot;:&quot;...&quot;,&quot;relation&quot;:&quot;...&quot;,&quot;object&quot;:&quot;...&quot;}), &quot;timestamp&quot;: datetime.fromisoformat(&quot;...&quot;) })]})``````python# Find all relationship tuples where a certain user is a viewer of any documentbody = TupleKey(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;viewer&quot;,    object=&quot;document:&quot;,)response = await fga_client.read(body)# response = ReadResponse({&quot;tuples&quot;: [Tuple({&quot;key&quot;: TupleKey({&quot;user&quot;:&quot;...&quot;,&quot;relation&quot;:&quot;...&quot;,&quot;object&quot;:&quot;...&quot;}), &quot;timestamp&quot;: datetime.fromisoformat(&quot;...&quot;) })]})``````python# Find all relationship tuples where any user has a relationship as any relation with a particular documentbody = TupleKey(    object=&quot;document:roadmap&quot;,)response = await fga_client.read(body)# response = ReadResponse({&quot;tuples&quot;: [Tuple({&quot;key&quot;: TupleKey({&quot;user&quot;:&quot;...&quot;,&quot;relation&quot;:&quot;...&quot;,&quot;object&quot;:&quot;...&quot;}), &quot;timestamp&quot;: datetime.fromisoformat(&quot;...&quot;) })]})``````python# Read all stored relationship tuplesbody = TupleKey()response = await api_instance.read(body)# response = ReadResponse({&quot;tuples&quot;: [Tuple({&quot;key&quot;: TupleKey({&quot;user&quot;:&quot;...&quot;,&quot;relation&quot;:&quot;...&quot;,&quot;object&quot;:&quot;...&quot;}), &quot;timestamp&quot;: datetime.fromisoformat(&quot;...&quot;) })]})```##### Write (Create and Delete) Relationship TuplesCreate and/or delete relationship tuples to update the system state.[API Documentation](https://openfga.dev/api/service#/Relationship%20Tuples/Write)###### Transaction mode (default)By default, write runs in a transaction mode where any invalid operation (deleting a non-existing tuple, creating an existing tuple, one of the tuples was invalid) or a server error will fail the entire operation.```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}body = ClientWriteRequest(    writes=[        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;viewer&quot;,            object=&quot;document:roadmap&quot;,        ),        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;viewer&quot;,            object=&quot;document:budget&quot;,        ),    ],    deletes=[        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;writer&quot;,            object=&quot;document:roadmap&quot;,        ),    ],)response = await fga_client.write(body, options)```Convenience `write_tuples` and `delete_tuples` methods are also available.###### Non-transaction modeThe SDK will split the writes into separate requests and send them sequentially to avoid violating rate limits.```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;,    &quot;transaction&quot;: WriteTransactionOpts(        disabled=True,        max_parallel_requests=10, # Maximum number of requests to issue in parallel        max_per_chunk=1, # Maximum number of requests to be sent in a transaction in a particular chunk    )}body = ClientWriteRequest(    writes=[        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;viewer&quot;,            object=&quot;document:roadmap&quot;,        ),        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;viewer&quot;,            object=&quot;document:budget&quot;,        ),    ],    deletes=[        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;writer&quot;,            object=&quot;document:roadmap&quot;,        ),    ],)response = await fga_client.write(body, options)```#### Relationship Queries##### CheckCheck if a user has a particular relation with an object.[API Documentation](https://openfga.dev/api/service#/Relationship%20Queries/Check)```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}body = ClientCheckRequest(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;writer&quot;,    object=&quot;document:roadmap&quot;,)response = await fga_client.check(body, options)# response.allowed = True```##### Batch CheckRun a set of [checks](#check). Batch Check will return `allowed: false` if it encounters an error, and will return the error in the body.If 429s or 5xxs are encountered, the underlying check will retry up to 15 times before giving up.```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}body = [ClientCheckRequest(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;viewer&quot;,    object=&quot;document:roadmap&quot;,    contextual_tuples=[ # optional        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;editor&quot;,            object=&quot;document:roadmap&quot;,        ),    ]), ClientCheckRequest(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;admin&quot;,    object=&quot;document:roadmap&quot;,    contextual_tuples=[ # optional        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;editor&quot;,            object=&quot;document:roadmap&quot;,        ),    ]), ClientCheckRequest(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;creator&quot;,    object=&quot;document:roadmap&quot;,), ClientCheckRequest(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;deleter&quot;,    object=&quot;document:roadmap&quot;,)]response = await fga_client.batch_check(body, options)# response.responses = [{#   allowed: false,#   request: {#     user: &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,#     relation: &quot;viewer&quot;,#     object: &quot;document:roadmap&quot;,#     contextual_tuples: [{#       user: &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,#       relation: &quot;editor&quot;,#       object: &quot;document:roadmap&quot;#     }]#   }# }, {#   allowed: false,#   request: {#     user: &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,#     relation: &quot;admin&quot;,#     object: &quot;document:roadmap&quot;,#     contextual_tuples: [{#       user: &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,#       relation: &quot;editor&quot;,#       object: &quot;document:roadmap&quot;#     }]#   }# }, {#   allowed: false,#   request: {#     user: &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,#     relation: &quot;creator&quot;,#     object: &quot;document:roadmap&quot;,#   },#   error: &lt;FgaError ...&gt;# }, {#   allowed: true,#   request: {#     user: &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,#     relation: &quot;deleter&quot;,#     object: &quot;document:roadmap&quot;,#   }},# ]```#### ExpandExpands the relationships in userset tree format.[API Documentation](https://openfga.dev/api/service#/Relationship%20Queries/Expand)```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}body = ClientExpandRequest(    relation=&quot;viewer&quot;,    object=&quot;document:roadmap&quot;,)response = await fga_client.expand(body. options)# response = ExpandResponse({&quot;tree&quot;: UsersetTree({&quot;root&quot;: Node({&quot;name&quot;: &quot;document:roadmap#viewer&quot;, &quot;leaf&quot;: Leaf({&quot;users&quot;: Users({&quot;users&quot;: [&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;, &quot;user:f52a4f7a-054d-47ff-bb6e-3ac81269988f&quot;]})})})})})```##### List ObjectsList the objects of a particular type a user has access to.[API Documentation](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects)```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}body = ClientListObjectsRequest(    user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation=&quot;viewer&quot;,    type=&quot;document&quot;,    contextual_tuples=[ # optional        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;writer&quot;,            object=&quot;document:budget&quot;,        ),    ])response = await fga_client.list_objects(body)# response.objects = [&quot;document:roadmap&quot;]```##### List RelationsList the relations a user has on an object.```pythonoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}body = ClientListRelationsRequest(    user = &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    object = &quot;document:roadmap&quot;,    relations = [&quot;can_view&quot;, &quot;can_edit&quot;, &quot;can_delete&quot;, &quot;can_rename&quot;],    contextual_tuples=[ # optional        ClientTuple(            user=&quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,            relation=&quot;writer&quot;,            object=&quot;document:budget&quot;,        ),    ])var response = await fga_client.list_relations(body, options);// response.relations = [&quot;can_view&quot;, &quot;can_edit&quot;]```#### Assertions##### Read AssertionsRead assertions for a particular authorization model.[API Documentation](https://openfga.dev/api/service#/Assertions/Read%20Assertions)```csharpoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}response = await fga_client.read_assertions(options);```##### Write AssertionsUpdate the assertions for a particular authorization model.[API Documentation](https://openfga.dev/api/service#/Assertions/Write%20Assertions)```csharpoptions = {    # You can rely on the model id set in the configuration or override it for this specific request    &quot;authorization_model_id&quot;: &quot;01GXSA8YR785C4FYS3C0RTG7B1&quot;}body = [ClientAssertion(    user = &quot;user:81684243-9356-4421-8fbf-a4f8d36aa31b&quot;,    relation = &quot;viewer&quot;,    object = &quot;document:roadmap&quot;,    expectation = true,)];response = await fga_client.write_assertions(body, options);```### API EndpointsClass | Method | HTTP request | Description------------ | ------------- | ------------- | -------------*OpenFgaApi* | [**check**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#check) | **POST** /stores/{store_id}/check | Check whether a user is authorized to access an object*OpenFgaApi* | [**create_store**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#create_store) | **POST** /stores | Create a store*OpenFgaApi* | [**delete_store**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#delete_store) | **DELETE** /stores/{store_id} | Delete a store*OpenFgaApi* | [**expand**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#expand) | **POST** /stores/{store_id}/expand | Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship*OpenFgaApi* | [**get_store**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#get_store) | **GET** /stores/{store_id} | Get a store*OpenFgaApi* | [**list_objects**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#list_objects) | **POST** /stores/{store_id}/list-objects | List all objects of the given type that the user has a relation with*OpenFgaApi* | [**list_stores**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#list_stores) | **GET** /stores | List all stores*OpenFgaApi* | [**read**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read) | **POST** /stores/{store_id}/read | Get tuples from the store that matches a query, without following userset rewrite rules*OpenFgaApi* | [**read_assertions**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_assertions) | **GET** /stores/{store_id}/assertions/{authorization_model_id} | Read assertions for an authorization model ID*OpenFgaApi* | [**read_authorization_model**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_authorization_model) | **GET** /stores/{store_id}/authorization-models/{id} | Return a particular version of an authorization model*OpenFgaApi* | [**read_authorization_models**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_authorization_models) | **GET** /stores/{store_id}/authorization-models | Return all the authorization models for a particular store*OpenFgaApi* | [**read_changes**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_changes) | **GET** /stores/{store_id}/changes | Return a list of all the tuple changes*OpenFgaApi* | [**write**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#write) | **POST** /stores/{store_id}/write | Add or delete tuples from the store*OpenFgaApi* | [**write_assertions**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#write_assertions) | **PUT** /stores/{store_id}/assertions/{authorization_model_id} | Upsert assertions for an authorization model ID*OpenFgaApi* | [**write_authorization_model**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#write_authorization_model) | **POST** /stores/{store_id}/authorization-models | Create a new authorization model### Models## Documentation For Models - [Any](https://github.com/openfga/python-sdk/blob/main/docs/Any.md) - [Assertion](https://github.com/openfga/python-sdk/blob/main/docs/Assertion.md) - [AuthorizationModel](https://github.com/openfga/python-sdk/blob/main/docs/AuthorizationModel.md) - [CheckRequest](https://github.com/openfga/python-sdk/blob/main/docs/CheckRequest.md) - [CheckResponse](https://github.com/openfga/python-sdk/blob/main/docs/CheckResponse.md) - [Computed](https://github.com/openfga/python-sdk/blob/main/docs/Computed.md) - [ContextualTupleKeys](https://github.com/openfga/python-sdk/blob/main/docs/ContextualTupleKeys.md) - [CreateStoreRequest](https://github.com/openfga/python-sdk/blob/main/docs/CreateStoreRequest.md) - [CreateStoreResponse](https://github.com/openfga/python-sdk/blob/main/docs/CreateStoreResponse.md) - [Difference](https://github.com/openfga/python-sdk/blob/main/docs/Difference.md) - [ErrorCode](https://github.com/openfga/python-sdk/blob/main/docs/ErrorCode.md) - [ExpandRequest](https://github.com/openfga/python-sdk/blob/main/docs/ExpandRequest.md) - [ExpandResponse](https://github.com/openfga/python-sdk/blob/main/docs/ExpandResponse.md) - [GetStoreResponse](https://github.com/openfga/python-sdk/blob/main/docs/GetStoreResponse.md) - [InternalErrorCode](https://github.com/openfga/python-sdk/blob/main/docs/InternalErrorCode.md) - [InternalErrorMessageResponse](https://github.com/openfga/python-sdk/blob/main/docs/InternalErrorMessageResponse.md) - [Leaf](https://github.com/openfga/python-sdk/blob/main/docs/Leaf.md) - [ListObjectsRequest](https://github.com/openfga/python-sdk/blob/main/docs/ListObjectsRequest.md) - [ListObjectsResponse](https://github.com/openfga/python-sdk/blob/main/docs/ListObjectsResponse.md) - [ListStoresResponse](https://github.com/openfga/python-sdk/blob/main/docs/ListStoresResponse.md) - [Metadata](https://github.com/openfga/python-sdk/blob/main/docs/Metadata.md) - [Node](https://github.com/openfga/python-sdk/blob/main/docs/Node.md) - [Nodes](https://github.com/openfga/python-sdk/blob/main/docs/Nodes.md) - [NotFoundErrorCode](https://github.com/openfga/python-sdk/blob/main/docs/NotFoundErrorCode.md) - [ObjectRelation](https://github.com/openfga/python-sdk/blob/main/docs/ObjectRelation.md) - [PathUnknownErrorMessageResponse](https://github.com/openfga/python-sdk/blob/main/docs/PathUnknownErrorMessageResponse.md) - [ReadAssertionsResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadAssertionsResponse.md) - [ReadAuthorizationModelResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadAuthorizationModelResponse.md) - [ReadAuthorizationModelsResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadAuthorizationModelsResponse.md) - [ReadChangesResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadChangesResponse.md) - [ReadRequest](https://github.com/openfga/python-sdk/blob/main/docs/ReadRequest.md) - [ReadResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadResponse.md) - [RelationMetadata](https://github.com/openfga/python-sdk/blob/main/docs/RelationMetadata.md) - [RelationReference](https://github.com/openfga/python-sdk/blob/main/docs/RelationReference.md) - [Status](https://github.com/openfga/python-sdk/blob/main/docs/Status.md) - [Store](https://github.com/openfga/python-sdk/blob/main/docs/Store.md) - [Tuple](https://github.com/openfga/python-sdk/blob/main/docs/Tuple.md) - [TupleChange](https://github.com/openfga/python-sdk/blob/main/docs/TupleChange.md) - [TupleKey](https://github.com/openfga/python-sdk/blob/main/docs/TupleKey.md) - [TupleKeys](https://github.com/openfga/python-sdk/blob/main/docs/TupleKeys.md) - [TupleOperation](https://github.com/openfga/python-sdk/blob/main/docs/TupleOperation.md) - [TupleToUserset](https://github.com/openfga/python-sdk/blob/main/docs/TupleToUserset.md) - [TypeDefinition](https://github.com/openfga/python-sdk/blob/main/docs/TypeDefinition.md) - [Users](https://github.com/openfga/python-sdk/blob/main/docs/Users.md) - [Userset](https://github.com/openfga/python-sdk/blob/main/docs/Userset.md) - [UsersetTree](https://github.com/openfga/python-sdk/blob/main/docs/UsersetTree.md) - [UsersetTreeDifference](https://github.com/openfga/python-sdk/blob/main/docs/UsersetTreeDifference.md) - [UsersetTreeTupleToUserset](https://github.com/openfga/python-sdk/blob/main/docs/UsersetTreeTupleToUserset.md) - [Usersets](https://github.com/openfga/python-sdk/blob/main/docs/Usersets.md) - [ValidationErrorMessageResponse](https://github.com/openfga/python-sdk/blob/main/docs/ValidationErrorMessageResponse.md) - [WriteAssertionsRequest](https://github.com/openfga/python-sdk/blob/main/docs/WriteAssertionsRequest.md) - [WriteAuthorizationModelRequest](https://github.com/openfga/python-sdk/blob/main/docs/WriteAuthorizationModelRequest.md) - [WriteAuthorizationModelResponse](https://github.com/openfga/python-sdk/blob/main/docs/WriteAuthorizationModelResponse.md) - [WriteRequest](https://github.com/openfga/python-sdk/blob/main/docs/WriteRequest.md)## Contributing### IssuesIf you have found a bug or if you have a feature request, please report them on the [sdk-generator repo](https://github.com/openfga/sdk-generator/issues) issues section. Please do not report security vulnerabilities on the public GitHub issue tracker.### Pull RequestsAll changes made to this repo will be overwritten on the next generation, so we kindly ask that you send all pull requests related to the SDKs to the [sdk-generator repo](https://github.com/openfga/sdk-generator) instead.## Author[OpenFGA](https://github.com/openfga)## LicenseThis project is licensed under the Apache-2.0 license. See the [LICENSE](https://github.com/openfga/python-sdk/blob/main/LICENSE) file for more info.The code in this repo was auto generated by [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) from a template based on the [python legacy template](https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/python-legacy), licensed under the [Apache License 2.0](https://github.com/OpenAPITools/openapi-generator/blob/master/LICENSE).</longdescription>
</pkgmetadata>