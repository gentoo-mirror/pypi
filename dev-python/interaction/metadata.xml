<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># InteractionInteraction is a Python package for creating nice and colourful progress bars using the map() and apply() method as well as for loops.## ProgressBarTo use a progress bar you need to initiate a ProgressBar object with the maximum progress amount (total) and call the show method of the object with the amount to update the progress bar.```pythonfrom interaction import ProgressBarfrom time import sleepbar = ProgressBar(total=100)for i in range(100):  sleep(0.05)  bar.show(amount=i+1)```You can also add your own text to the progress bar.```pythonfrom interaction import ProgressBarfrom time import sleepbar = ProgressBar(total=100)for i in range(100):    sleep(0.05)    bar.show(amount=i+1, text=f'working on {i}')```## mapYou can also use the ProgressBar's map method instead of Python's map method. The output is an iterable. As soon as you turn the iterable object into a list the progress bar will be displayed.```pythonfrom interaction import ProgressBarfrom time import sleeplist1 = list(range(100))def wait_and_double(x, wait_time):    sleep(wait_time)    return x*2# this will not make the progress bar appeariterable2 = ProgressBar.map(    function=lambda x: wait_and_double(x=x, wait_time=0.05),     iterable=list1)# this will make the progress bar appearlist2 = list(iterable2)```## applyProgressBar also works with Panda's DataFrame and Series objects. ```pythonfrom interaction import ProgressBarfrom time import sleepfrom pandas import DataFramedata = DataFrame({    'name':['Arminius', 'Boudica', 'Alaric', 'Attila', 'Genseric'],    'ethnicity': ['German', 'Celt', 'Goth', 'Hun', 'Vandal']})data['name_and_ethnicity'] = ProgressBar.apply(    data=data,     function=lambda x: x['name']+' the '+x['ethnicity'])data['name_lower'] = ProgressBar.apply(    series=data['name'],     function=lambda x: x.lower())```## iterateYou can also use ProgressBar to for iterating over iterable objects, especially *for* loops.```pythonfrom interaction import iteratefor i in iterate(range(100)):    # do something    pass```</longdescription>
</pkgmetadata>