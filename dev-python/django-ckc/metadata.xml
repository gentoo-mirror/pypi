<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-ckc [&lt;img src=&quot;https://ckcollab.com/assets/images/badges/badge.svg&quot; alt=&quot;CKC&quot; height=&quot;20&quot;&gt;](https://ckcollab.com)==========tools, utilities, etc. we use across projects @ [ckc](https://ckcollab.com)## installing```bashpip install django-ckc``````python# settings.pyINSTALLED_APPS = (    &quot;django.contrib.auth&quot;,    &quot;django.contrib.contenttypes&quot;,    &quot;django.contrib.sessions&quot;,    &quot;django.contrib.staticfiles&quot;,    # ... add ckc    &quot;ckc&quot;,)```## tests```bash$ docker build -t django-ckc . &amp;&amp; docker run django-ckc pytest```## what's in this#### `SoftDeletableModel`Make your models have a `deleted` bool set when they are deleted instead of actuallying being deleted. Uses a model manager `SoftDeleteModelManager` to keep them hidden.#### `PrimaryKeyWriteSerializerReadField`A DRF field for writing via PK and reading via a serializer. Useful for when you want toconnect 2 models together and immediately display to the user some useful information.For example, if you had an `Order` model with `LineItem` objects pointing to it, it may beuseful to create a new line item via order PK and return back the complete order withnew totals and other calculations:```pyclass LineItemUpdateSerializer(serializers.ModelSerializer):    order = PrimaryKeyWriteSerializerReadField(        queryset=Order.objects.all(),        read_serializer=OrderDetailSerializer    )        class Meta:        model = LineItem        fields = [&quot;id&quot;, &quot;order&quot;, &quot;product&quot;]````POST` data for adding product #123 to order #5 would look like ```js// REQUEST{&quot;order&quot;: 5, &quot;product&quot;: 123}&quot;}// RESPONSE{&quot;order&quot;: {&quot;total_amount&quot;: &quot;$1,000.00&quot;}, &quot;product&quot;: 123}```#### `DefaultCreatedByMixin` for `ModelSerializers`This will automatically set `YourModel.created_by` to `request.user`. To override whichattribute the user is written to, add a `user_field` to your classes Meta information```pyclass YourModel(models.Model):    created_by = models.ForeignKey(User, on_delete=models.CASCADE)        class MySerializer(DefaultCreatedByMixin, ModelSerializer):    class Meta:        model = YourModel```#### `DjangoGeoPointProvider`Helps generate geo points in Factory Boy factories.```py# factories.pyclass SomeLocationFactory(DjangoModelFactory):    location = factory.Faker('geo_point', country_code='US')    class Meta:        model = SomeLocation# test_whatever.pyfrom django.contrib.gis.geos import Pointclass WhateverTest(TestCase):    def test_something(self):        SomeLocationFactory()  # random location        SomeLocationFactory(location=Point(x=60, y=60))  # specified location```#### Slack loggingGet a Slack webhook URL and set `SLACK_WEBHOOK_URL` env var. You can also set `DJANGO_SLACK_LOG_LEVEL`with info, warning, etc.Modify your Celery settings:```py# Let our slack logger handle celery stuffCELERY_WORKER_HIJACK_ROOT_LOGGER = False```Example `LOGGING` configuration that turns on Slack logging if `SLACK_WEBHOOK_URL` env var is found:```pyLOGGING = {    'version': 1,    'disable_existing_loggers': False,    'formatters': {        'colored': {            '()': 'colorlog.ColoredFormatter',            'format': &quot;%(log_color)s%(levelname)-8s%(reset)s %(white)s%(message)s&quot;,        }    },    'handlers': {        'console': {            'class': 'logging.StreamHandler',            'formatter': 'colored',        },    },    'loggers': {        '': {            'handlers': ['console'],            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),        },        'django': {            'handlers': ['console'],            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),            'propagate': False,        }    },}SLACK_WEBHOOK_URL = os.getenv('SLACK_WEBHOOK_URL', '')if SLACK_WEBHOOK_URL:    LOGGING['handlers']['slack'] = {        'class': 'ckc.logging.CkcSlackHandler',        'level': os.getenv('DJANGO_SLACK_LOG_LEVEL', 'ERROR'),    }    LOGGING['loggers']['django']['handlers'] = ['console', 'slack']    LOGGING['loggers']['']['handlers'] = ['console', 'slack']```#### `SnackbarError`A little helper that when raised returns a JSON response to the user with asnackbar message. This message is automatically rendered as a snackbar by Skeletor.```py# views.pyfrom ckc.exceptions import SnackbarErrorclass TestExceptionsViewSet(APIView):    def get(self, request, *args, **kwargs):        # This will return {&quot;snackbar_message&quot;: &quot;Something went wrong&quot;}        raise SnackbarError(&quot;Something went wrong&quot;)```#### `./manage.py` commands| command | description|| :---        |    :----:   || `upload_file &lt;source&gt; &lt;destination&gt;` | uses `django-storages` settings to upload a file |</longdescription>
</pkgmetadata>