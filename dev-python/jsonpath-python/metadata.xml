<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>- [jsonpath-python](#jsonpath-python)  - [Features](#features)  - [JSONPath Syntax](#jsonpath-syntax)    - [Operators](#operators)    - [Examples](#examples)      - [Select Fields](#select-fields)      - [Recursive Descent](#recursive-descent)      - [Slice](#slice)      - [Filter Expression](#filter-expression)      - [Sorter Expression](#sorter-expression)      - [Field-Extractor Expression](#field-extractor-expression)    - [Appendix: Example JSON data:](#appendix-example-json-data)  - [Todo List](#todo-list)# jsonpath-pythonA more powerful JSONPath implementation in modern python.## Features- [x] **Light. (No need to install third-party dependencies.)**- [x] **Support filter operator, including multi-selection, inverse-selection filtering.**- [x] **Support sorter operator, including sorting by multiple fields, ascending and descending order.**- [x] Support basic semantics of JSONPath.- [x] Support output modes: VALUE, PATH.- [ ] Support embedded syntax.- [ ] Support user-defined function.- [ ] Support parent operator.## Installation```bashpip install jsonpath-python# import&gt;&gt;&gt; from jsonpath import JSONPath```## JSONPath SyntaxThe JSONPath syntax in this project borrows from [JSONPath - XPath for JSON](http://goessner.net/articles/JSONPath/) and is **modified** and **extended** on it.### Operators| Operator         | Description                                                                  || ---------------- | ---------------------------------------------------------------------------- || `$`              | the root object/element                                                      || `@`              | the current object/element                                                   || `.` or `[]`      | child operator                                                               || `..`             | recursive descent                                                            || `*`              | wildcard                                                                     || `''`             | (Experimental) wrap field with special character: dots(`.`) and space (` `). || `start:end:step` | array slice operator (It's same as the slice in python)                      || `?()`            | applies a filter expression                                                  || `/()`            | applies a sorter expression                                                  || `()`             | applies a field-extractor expression                                         |### ExamplesBefore running the following example, please import this module and the example data:```python&gt;&gt;&gt; from jsonpath import JSONPath# For the data used in the following example, please refer to the Appendix part.```#### Select FieldsSelect a field:```python&gt;&gt;&gt; JSONPath(&quot;$.book&quot;).parse(data)[[{'category': 'reference', 'author': 'Nigel Rees', 'title': 'Sayings of the Century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'Evelyn Waugh', 'title': 'Sword of Honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'J. R. R. Tolkien', 'title': 'The Lord of the Rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}]]&gt;&gt;&gt; JSONPath(&quot;$[book]&quot;).parse(data)[[{'category': 'reference', 'author': 'Nigel Rees', 'title': 'Sayings of the Century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'Evelyn Waugh', 'title': 'Sword of Honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'J. R. R. Tolkien', 'title': 'The Lord of the Rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}]]```(**Experimental**) Select a field with special character: dots(`.`) and space (` `).```python&gt;&gt;&gt; JSONPath(&quot;$.'a.b c'&quot;).parse(data)['a.b c']&gt;&gt;&gt; JSONPath(&quot;$['a.b c']&quot;).parse(data)['a.b c']```Select multiple fields:```python&gt;&gt;&gt; JSONPath(&quot;$[bicycle,scores]&quot;).parse(data)[{'color': 'red', 'price': 19.95}, {'math': {'score': 100, 'avg': 60}, 'english': {'score': 95, 'avg': 80}, 'physic': {'score': 90, 'avg': 70}, 'chemistry': {'score': 85, 'avg': 80}, 'chinese': {'score': 60, 'avg': 75}}]```Select all fields using wildcard `*`:```python&gt;&gt;&gt; JSONPath(&quot;$.*&quot;).parse(data)['a.b c', [{'category': 'reference', 'author': 'Nigel Rees', 'title': 'Sayings of the Century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'Evelyn Waugh', 'title': 'Sword of Honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'J. R. R. Tolkien', 'title': 'The Lord of the Rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}], {'color': 'red', 'price': 19.95}, {'math': {'score': 100, 'avg': 60}, 'english': {'score': 95, 'avg': 80}, 'physic': {'score': 90, 'avg': 70}, 'chemistry': {'score': 85, 'avg': 80}, 'chinese': {'score': 60, 'avg': 75}}]```#### Recursive Descent```python&gt;&gt;&gt; JSONPath(&quot;$..price&quot;).parse(data)[8.95, 12.99, 8.99, 22.99, 19.95]```#### SliceSupport python-like slice.```python&gt;&gt;&gt; JSONPath(&quot;$.book[1:3]&quot;).parse(data)[{'category': 'fiction', 'author': 'Evelyn Waugh', 'title': 'Sword of Honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}]&gt;&gt;&gt; JSONPath(&quot;$.book[1:-1]&quot;).parse(data)[{'category': 'fiction', 'author': 'Evelyn Waugh', 'title': 'Sword of Honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}]&gt;&gt;&gt; JSONPath(&quot;$.book[0:-1:2]&quot;).parse(data)[{'category': 'reference', 'author': 'Nigel Rees', 'title': 'Sayings of the Century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}]&gt;&gt;&gt; JSONPath(&quot;$.book[-1:1]&quot;).parse(data)[]&gt;&gt;&gt; JSONPath(&quot;$.book[-1:-11:3]&quot;).parse(data)[]&gt;&gt;&gt; JSONPath(&quot;$.book[:]&quot;).parse(data)[{'category': 'reference', 'author': 'Nigel Rees', 'title': 'Sayings of the Century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'Evelyn Waugh', 'title': 'Sword of Honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'J. R. R. Tolkien', 'title': 'The Lord of the Rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}]&gt;&gt;&gt; JSONPath(&quot;$.book[::-1]&quot;).parse(data)[{'category': 'fiction', 'author': 'J. R. R. Tolkien', 'title': 'The Lord of the Rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}, {'category': 'fiction', 'author': 'Herman Melville', 'title': 'Moby Dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'Evelyn Waugh', 'title': 'Sword of Honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'reference', 'author': 'Nigel Rees', 'title': 'Sayings of the Century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}]```#### Filter ExpressionSupport all python comparison operators (`==`, `!=`, `&lt;`, `&gt;`, `&gt;=`, `&lt;=`), python membership operators (`in`, `not in`), python logical operators (`and`, `or`, `not`).```python&gt;&gt;&gt; JSONPath(&quot;$.book[?(@.price&gt;8 and @.price&lt;9)].price&quot;).parse(data)[8.95, 8.99]&gt;&gt;&gt; JSONPath('$.book[?(@.category==&quot;reference&quot;)].category').parse(data)['reference']&gt;&gt;&gt; JSONPath('$.book[?(@.category!=&quot;reference&quot; and @.price&lt;9)].title').parse(data)['Moby Dick']&gt;&gt;&gt; JSONPath('$.book[?(@.author==&quot;Herman Melville&quot; or @.author==&quot;Evelyn Waugh&quot;)].author').parse(data)['Evelyn Waugh', 'Herman Melville']````Note`: You must use double quote(`&quot;&quot;`) instead of single quote(`''`) to wrap the compared string, because single quote(`''`) has another usage in this JSONPath syntax .#### Sorter ExpressionSupport sorting by multiple fields (using operator `,`) and reverse sort (using operator `~`).```python&gt;&gt;&gt; JSONPath(&quot;$.book[/(price)].price&quot;).parse(data)[8.95, 8.99, 12.99, 22.99]&gt;&gt;&gt; JSONPath(&quot;$.book[/(~price)].price&quot;).parse(data)[22.99, 12.99, 8.99, 8.95]&gt;&gt;&gt; JSONPath(&quot;$.book[/(category,price)].price&quot;).parse(data)[8.99, 12.99, 22.99, 8.95]&gt;&gt;&gt; JSONPath(&quot;$.book[/(brand.version)].brand.version&quot;).parse(data)['v0.0.1', 'v1.0.0', 'v1.0.2', 'v1.0.3']&gt;&gt;&gt; JSONPath(&quot;$.scores[/(score)].score&quot;).parse(data)[60, 85, 90, 95, 100]```#### Field-Extractor ExpressionUsing `(field1,field2,â€¦,filedn)` after a dict object to extract its fields.```python&gt;&gt;&gt; JSONPath(&quot;$.scores[/(score)].(score)&quot;).parse(data)[{'score': 60}, {'score': 85}, {'score': 90}, {'score': 95}, {'score': 100}]&gt;&gt;&gt; JSONPath(&quot;$.book[/(category,price)].(title,price)&quot;).parse(data)[{'title': 'Moby Dick', 'price': 8.99}, {'title': 'Sword of Honour', 'price': 12.99}, {'title': 'The Lord of the Rings', 'price': 22.99}, {'title': 'Sayings of the Century', 'price': 8.95}]```### Appendix: Example JSON data:```pythondata = {    &quot;a.b c&quot;: &quot;a.b c&quot;,    &quot;book&quot;: [        {            &quot;category&quot;: &quot;reference&quot;,            &quot;author&quot;: &quot;Nigel Rees&quot;,            &quot;title&quot;: &quot;Sayings of the Century&quot;,            &quot;price&quot;: 8.95,            &quot;brand&quot;: {                &quot;version&quot;: &quot;v1.0.0&quot;            }        },        {            &quot;category&quot;: &quot;fiction&quot;,            &quot;author&quot;: &quot;Evelyn Waugh&quot;,            &quot;title&quot;: &quot;Sword of Honour&quot;,            &quot;price&quot;: 12.99,            &quot;brand&quot;: {                &quot;version&quot;: &quot;v0.0.1&quot;            }        },        {            &quot;category&quot;: &quot;fiction&quot;,            &quot;author&quot;: &quot;Herman Melville&quot;,            &quot;title&quot;: &quot;Moby Dick&quot;,            &quot;isbn&quot;: &quot;0-553-21311-3&quot;,            &quot;price&quot;: 8.99,            &quot;brand&quot;: {                &quot;version&quot;: &quot;v1.0.2&quot;            }        },        {            &quot;category&quot;: &quot;fiction&quot;,            &quot;author&quot;: &quot;J. R. R. Tolkien&quot;,            &quot;title&quot;: &quot;The Lord of the Rings&quot;,            &quot;isbn&quot;: &quot;0-395-19395-8&quot;,            &quot;price&quot;: 22.99,            &quot;brand&quot;: {                &quot;version&quot;: &quot;v1.0.3&quot;            }        }    ],    &quot;bicycle&quot;: {        &quot;color&quot;: &quot;red&quot;,        &quot;price&quot;: 19.95    },    &quot;scores&quot;: {        &quot;math&quot;: {            &quot;score&quot;: 100,            &quot;avg&quot;: 60        },        &quot;english&quot;: {            &quot;score&quot;: 95,            &quot;avg&quot;: 80        },        &quot;physic&quot;: {            &quot;score&quot;: 90,            &quot;avg&quot;: 70        },        &quot;chemistry&quot;: {            &quot;score&quot;: 85,            &quot;avg&quot;: 80        },        &quot;chinese&quot;: {            &quot;score&quot;: 60,            &quot;avg&quot;: 75        }    }}```## Todo List- Syntax and character set (refer to k8s)&gt; The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.</longdescription>
</pkgmetadata>