<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pluck: Quickly pluck &quot;fields&quot; from a list of values===================================================.. image:: https://travis-ci.org/nvie/pluck.png   :target: https://travis-ci.org/nvie/pluckpluck is the simplest way of plucking &quot;fields&quot; from an iterable of values.&quot;Fields&quot; are either ``item.field`` or ``item[field]``.  Pluck tries both,in that order.  If nothing is found, and no default value is specified, itthrows an exception.Usage=====The package consists of one module consisting of two functions::   from pluck import pluck, ipluck``ipluck`` is just the iterable version of ``pluck``.  Use it like this::   pluck(iterable, key)or::   pluck(iterable, *keys)Examples========A simple example first.  Say you have a list of datetimes::   &gt;&gt;&gt; from pluck import pluck   &gt;&gt;&gt; dates = [   ...     datetime(2012, 10, 22, 12, 00),   ...     datetime(2012, 10, 22, 15, 14),   ...     datetime(2012, 10, 22, 21, 44),   ... ]   &gt;&gt;&gt; pluck(dates, 'day')   [22, 22, 22]   &gt;&gt;&gt; pluck(dates, 'hour')   [12, 15, 21]It also works on dictionary-like access (``__getitem__``)::    &gt;&gt;&gt; objects = [    ...      {'id': 282, 'name': 'Alice', 'age': 30, 'sex': 'female'},    ...      {'id': 217, 'name': 'Bob', 'age': 56},    ...      {'id': 328, 'name': 'Charlie', 'age': 56, 'sex': 'male'},    ... ]    &gt;&gt;&gt; pluck(objects, 'name')    ['Alice', 'Bob', 'Charlie']    &gt;&gt;&gt; pluck(objects, 'age')    [30, 56, 56]You can also combine these into a single pluck::   &gt;&gt;&gt; pluck(objects, 'name', 'age')   [('Alice', 30), ('Bob', 56), ('Charlie', 56)]Defaults========You can specify default values, too.  By default, ``pluck`` will throw anexception when a &quot;field&quot; does not exist::   &gt;&gt;&gt; pluck(objects, 'sex')   Traceback (most recent call last):     File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;     File &quot;pluck.py&quot;, line 104, in pluck         return list(ipluck(iterable, *keys, **kwargs))     File &quot;pluck.py&quot;, line 49, in getter         raise ValueError('Item %r has no attr or key for %r' % (item, key))     ValueError: Item {'age': 56, 'id': 217, 'name': 'Bob'} has no attr or key for 'sex'To instead fill these places with a default value, use this::   &gt;&gt;&gt; pluck(objects, 'sex', default='unknown')   ['female', 'unknown', 'male']When you specify multiple keys, you need to use the ``defaults`` (plural!)keyword argument instead::   &gt;&gt;&gt; pluck(objects, 'name', 'sex', defaults={'sex': 'unknown'})   [('Alice', 'female'), ('Bob', 'unknown'), ('Charlie', 'male')]Iterator, rather?=================Use ``ipluck`` if you'd rather wanna have an iterator::    &gt;&gt;&gt; from pluck import ipluck    &gt;&gt;&gt; ipluck(large_stream_of_items, 'name')    &lt;itertools.imap object at 0x10c7515d0&gt;``pluck`` is equivalent to ``list(ipluck(...))``.History=======0.2 (2012-10-22)------------------   - Add Python 3 compatibility   - Improve documentation0.1 (2012-10-22)------------------   - Initial release.</longdescription>
</pkgmetadata>