<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A teeworlds network protocol library, designed according to sans I/O (http://sans-io.readthedocs.io/) principles# THIS LIBRARY IS IN EARLY DEVELOPMENT## Do not get bamboozled by the mature looking readme!## This project is not in a very usable state yet. It is in very early development!## APIs might change and many essential features are missing!---## install```bashpip install twnet_parser```## sample usage```pythonimport twnet_parser.packetpacket = twnet_parser.packet.parse7(b'\x04\x0a\x00\xcf\x2e\xde\x1d\04') # 0.7 closeprint(packet) # =&gt; &lt;class: 'TwPacket'&gt;: {'version': '0.7', 'header': &lt;class: 'Header'&gt;, 'messages': [&lt;class: 'CtrlMessage'&gt;]}print(packet.header) # =&gt; &lt;class: 'Header'&gt;: {'flags': &lt;class: 'PacketFlags7, 'size': 0, 'ack': 10, 'token': b'\xcf.\xde\x1d', 'num_chunks': 0}print(packet.header.flags) # =&gt; &lt;class: 'PacketFlags7'&gt;: {'control': True, 'resend': False, 'compression': False, 'connless': False}for msg in packet.messages:    print(msg.message_name) # =&gt; close```## Features| Feature                        | Status             || ------------------------------ | ------------------ || Deserialize 0.7 packet headers | :heavy_check_mark: || Deserialize 0.7 chunk headers  | :heavy_check_mark: || Deserialize 0.7 messages       | 80%                || Deserialize 0.7 snapshots      |                    || Serialize 0.7 packet headers   | :heavy_check_mark: || Serialize 0.7 chunk headers    |                    || Serialize 0.7 messages         | 80%                || Deserialize 0.6 packet headers |                    || Deserialize 0.6 chunk headers  |                    || Deserialize 0.6 messages       |                    || Deserialize 0.6 snapshots      |                    || Serialize 0.6 packet headers   |                    || Serialize 0.6 chunk headers    |                    || Serialize 0.6 messages         |                    |## Non-Features (also not planned for this library)| Feature                        | Status  | Where to find it                            || ------------------------------ | ------- | ------------------------------------------- || Networking                     | :x:     | TODO: link if someone implemented it on top || Protocol version detection     | :x:     | TODO: link if someone implemented it on top || Track sequence number state    | :x:     | TODO: link if someone implemented it on top || Track connection state         | :x:     | TODO: link if someone implemented it on top |Look elsewhere for these features. Or use this library to implement them on top.This project is intentionally only covering parsing the protocol.Not fully implemeting a state machine of the protocol.Or a fully working client / server software.If you want to build something with this libraryyou do have to understand how the protocol worksand when the client and server have to send what.This [protocol documentation](https://chillerdragon.github.io/teeworlds-protocol/index.html)should get you started to understand the basics.## development setup```bashgit clone https://gitlab.com/teeworlds-network/twnet_parsercd twnet_parserpython -m venv venvsource venv/bin/activatepip install -r requirements/dev.txt```## tests and linting```bash# dev dependenciespip install -r requirements/dev.txt# run unit testspytest .# run style linterpylint src/# run type checkermypy src/# or use the bundle script that runs all tests./scripts/run_tests.sh```## package and release```bash# manualpip install -r requirements/dev.txtversion=0.0.2sed -i &quot;s/^version =.*/version = $version/&quot; setup.cfgpython -m buildgit tag -a &quot;v$version&quot; -m &quot;# version $version&quot;python -m twine upload dist/*# or use the interactive convience script./scripts/release.sh```</longdescription>
</pkgmetadata>