<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># container-app-conf [![Contributors](https://img.shields.io/github/contributors/markusressel/container-app-conf.svg)](https://github.com/markusressel/container-app-conf/graphs/contributors) [![MIT License](https://img.shields.io/github/license/markusressel/container-app-conf.svg)](/LICENSE) [![Code Climate](https://codeclimate.com/github/markusressel/container-app-conf.svg)](https://codeclimate.com/github/markusressel/container-app-conf) ![Code Size](https://img.shields.io/github/languages/code-size/markusressel/container-app-conf.svg) ![https://badge.fury.io/py/container-app-conf](https://badge.fury.io/py/container-app-conf.svg) [![Build Status](https://travis-ci.org/markusressel/container-app-conf.svg?branch=master)](https://travis-ci.org/markusressel/container-app-conf)**container-app-conf** is a library to easily read application configuration valuesfrom multiple sources (YAML, env) while providing type validation.The initial purpose of this library was to have an easy way to configurean application running inside of a container using environment variables (Docker in this case) and still provide the possibility to use a more simple form of configuration like a YAML file.**container-app-conf is used by*** [python-n26](https://github.com/femueller/python-n26)* [InfiniteWisdom](https://github.com/ekeih/InfiniteWisdom)* [DeineMudda](https://github.com/markusressel/DeineMudda)* [py-image-dedup](https://github.com/markusressel/py-image-dedup)and hopefully many others :)# How to use## Install dependency```shellpip install container-app-conf```## Extend `ConfigBase` baseCreate a custom configuration class and define your config entries:```pythonfrom container_app_conf import ConfigBasefrom container_app_conf.entry.string import StringConfigEntryclass AppConfig(ConfigBase):    MY_CONFIG = StringConfigEntry(        description=&quot;This is just a demo text config entry&quot;,        example=&quot;example&quot;,        key_path=[            &quot;my_app&quot;,            &quot;example&quot;        ],        required=True)```## Use configuration values```pythonconfig = AppConfig()value = config.MY_CONFIG.value```## Print current configOftentimes it can be useful to print the current configuration of anapplication. To do this you can use```pythonconfig = AppConfig()config.print()```which will result in an output similar to this:```texttest-&gt;bool: _REDACTED_test-&gt;this-&gt;date-&gt;is-&gt;nested-&gt;deep: 2019-10-22T04:21:02.316907test-&gt;this-&gt;is-&gt;a-&gt;range: [0..100]test-&gt;this-&gt;is-&gt;a-&gt;list: Nonetest-&gt;this-&gt;timediff-&gt;is-&gt;in-&gt;this-&gt;branch: 0:00:10test-&gt;directory: Nonetest-&gt;file: Nonetest-&gt;float: 1.23test-&gt;int: 100test-&gt;regex: ^[a-zA-Z0-9]$test-&gt;string: default valuesecret-&gt;list: _REDACTED_secret-&gt;regex: _REDACTED_```If you don't like the style you can specify a custom `ConfigFormatter`like this:```pythonfrom container_app_conf.formatter.toml import TomlFormatterconfig = AppConfig()config.print(TomlFormatter())```Which would output the same config like this:```text[test]bool = &quot;_REDACTED_&quot;float = 1.23int = 100regex = &quot;^[a-zA-Z0-9]$&quot;string = &quot;default value&quot;[secret]list = &quot;_REDACTED_&quot;regex = &quot;_REDACTED_&quot;[test.this.is.a]range = &quot;[0..100]&quot;[test.this.date.is.nested]deep = &quot;2019-10-22T04:26:10.654541&quot;[test.this.timediff.is.in.this]branch = &quot;0:00:10&quot;```## Generate reference configYou can generate a reference configuration from a config object.This reference contains **all** available configuration options. If a **default** was specified for an entry it will be used, otherwise the **example** value.```pythonfrom container_app_conf.util import generate_reference_configconfig = AppConfig()reference_config = generate_reference_config(config._config_entries.values())```This will return a dictionary representing the config entry tree.You can also specify a formatter and write a reference config to a file using:```pythonfrom container_app_conf.util import write_referencefrom container_app_conf.formatter.yaml import YamlFormatterconfig = AppConfig()write_reference(config, &quot;/home/markus/.config/example.yaml&quot;, YamlFormatter())```If the generated reference contains values that do not make sense because of application constraints, specify your own **example** or better yet **default** value using the respective config entry constructor parameter.## Config Types| Name                     | Description                              | Type     ||--------------------------|------------------------------------------|----------|| `BoolConfigEntry`        | Parses `bool`, `int` (`0` and `1`) and `str` values (`yes`, `no` etc.) to a boolean value | `bool` || `IntConfigEntry`         | Parses input to an integer | `int` || `FloatConfigEntry`       | Parses input to a floating number | `float` || `RangeConfigEntry`       | Parses input to a range (see [py-range-parse](https://github.com/markusressel/py-range-parse)) | `Range` || `StringConfigEntry`      | Takes the raw string input | `str` || `RegexConfigEntry`       | Parses and compiles regular expressions | `re.pattern` || `DateConfigEntry`        | Parses various datetime formats (see [python-dateutil](https://github.com/dateutil/dateutil/)) | `datetime` || `TimeDeltaConfigEntry`   | Parses various timedelta formats (see [pytimeparse](https://github.com/wroberts/pytimeparse)) | `timedelta` || `FileConfigEntry`        | Parses a file path | `Path` || `DirectoryConfigEntry`   | Parses a directory path | `Path` || `DictConfigEntry`        | Parses a dictionary | `dict` || `ListConfigEntry`        | Parses a comma separated string to a list of items specified in another `ConfigEntry` (in yaml it can also be specified as a yaml list) | `[]` |If none of the existing types suit your needs you can easily create your own by extending the `ConfigEntry` base class.## Default ValuesA default value can be specified for every `ConfigEntry` by using the`default` constructor parameter.## Required valuesBy default config entries with a default different from `None` are required. A `None` value is only allowed for an entry if it has no default (or it is set to `None` explicitly).For required entries it is not possible to set its value `None` even after initial parsing. Omitting a value for this entry in all data sources will result in an exception.If an entry requires a value and has no default, set the `required`constructor parameter to `True`.If you want to allow setting a `None` value even if the default value is **not** `None`, you have to explicitly set `required=False`.## Secret valuesIf your config contains secret values like passwords you can mark themas such using the `secret=True` constructor parameter. That way their value will be redacted when [printing the current configuration](#print-current-config).## Data sources**container-app-conf** supports the simultaneous use of multiple data sources to determine configuration values. The following implementations are available:| Name                     | Description                              ||--------------------------|------------------------------------------|| `EnvSource`              | Reads environment variables || `YamlSource`             | Parses `YAML` files || `TomlSource`             | Parses `TOML` files || `JsonSource`             | Parses `JSON` files |### EnvSource#### ENV KeySince you only specify the key path of a config entry the ENVkey is generated automatically by concatenating all key path items using an underscore, converting to uppercase and replacing any remaininghyphens also with an underscore:```pythonkey_path = [&quot;my_app&quot;, &quot;my-example&quot;]```would yield `MY_APP_MY_EXAMPLE`.### Filesystem SourceMultiple data sources using the filesystem are available:* YamlSource* TomlSource* JsonSource#### File pathsBy default config files are searched for in multiple directories that are commonly used for configuration files which include:- `./`- `~/.config/`- `~/`This can be customized using the `path` constructor parameter: ```pythonfrom container_app_conf.source.yaml_source import YamlSourceyaml_source = YamlSource(file_name=&quot;myapp&quot;, path=[&quot;/my/path&quot;, &quot;/my/other/path&quot;])```## SingletonBy default every `Config` subclass instance will behave like a singleton. This means if you change the config value in one instance it will also affect all other instances of the same `__class__`.To be able to create multiple instances of a config that are independent of one another this behaviour can be disabled using the `singleton` constructor parameter:```pythonconfig1 = AppConfig(singleton=False)config2 = AppConfig(singleton=False)```# ContributingGitHub is for social coding: if you want to write code, I encourage contributions through pull requests from forksof this repository. Create GitHub tickets for bugs and new features and comment on the ones that you are interested in.# License```textcontainer-app-confCopyright (c) 2019 Markus ResselPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.```</longdescription>
</pkgmetadata>