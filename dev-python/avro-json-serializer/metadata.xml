<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Avro JSON serializer================[![PyPI version](https://badge.fury.io/py/avro_json_serializer.png)](http://badge.fury.io/py/avro_json_serializer)[AvroJsonSerializer](avro_json_serializer/__init__.py#L28) serializes data into a JSON format using AVRO schema.Why do we need serializer instead of just dumping into JSON?* validation that your data matches the schema* serialization of unions (see [SimpleExample](#simple-example) below)* some Avro JSON deserializers expect fields in JSON in the same order as in the schema* serialization of `bytes` and `fixed` fieldsBinary distribution can be found on [pypi](https://pypi.python.org/pypi/avro_json_serializer/).## Simple example:```pythonschema_dict = {    &quot;namespace&quot;: &quot;example.avro&quot;,          &quot;type&quot;: &quot;record&quot;,          &quot;name&quot;: &quot;User&quot;,          &quot;fields&quot;: [              {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},              {&quot;name&quot;: &quot;favorite_number&quot;,  &quot;type&quot;: [&quot;int&quot;, &quot;null&quot;]},              {&quot;name&quot;: &quot;favorite_color&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]}          ]}avro_schema = avro.schema.make_avsc_object(schema_dict, avro.schema.Names())serializer = AvroJsonSerializer(avro_schema)self.assertEquals(serializer.to_json({&quot;name&quot;: &quot;Alyssa&quot;, &quot;favorite_number&quot;: 256}),                  &quot;&quot;&quot;{&quot;name&quot;:&quot;Alyssa&quot;,&quot;favorite_number&quot;:{&quot;int&quot;:256},&quot;favorite_color&quot;:null}&quot;&quot;&quot;)self.assertEquals(serializer.to_json({&quot;name&quot;: &quot;Ben&quot;, &quot;favorite_number&quot;: 7, &quot;favorite_color&quot;: &quot;red&quot;}),                  &quot;&quot;&quot;{&quot;name&quot;:&quot;Ben&quot;,&quot;favorite_number&quot;:{&quot;int&quot;:7},&quot;favorite_color&quot;:{&quot;string&quot;:&quot;red&quot;}}&quot;&quot;&quot;)self.assertEquals(serializer.to_json({&quot;name&quot;: &quot;Lion&quot;}),                  &quot;&quot;&quot;{&quot;name&quot;:&quot;Lion&quot;,&quot;favorite_number&quot;:null,&quot;favorite_color&quot;:null}&quot;&quot;&quot;)```## Another example:```python# need to serialize this datadata = {    &quot;ffloat&quot;: 1.0,    &quot;funion_null&quot;: None,    &quot;flong&quot;: 1L,    &quot;fdouble&quot;: 2.0,    &quot;ffixed&quot;: &quot;1234567890123456&quot;,    &quot;fint&quot;: 1,    &quot;fstring&quot;: &quot;hi there&quot;,    &quot;frec&quot;: {        &quot;subfint&quot;: 2    }}# according to this schema:schema_dict = {    &quot;fields&quot;: [{&quot;name&quot;: &quot;fint&quot;, &quot;type&quot;: &quot;int&quot;},            {&quot;name&quot;: &quot;flong&quot;, &quot;type&quot;: &quot;long&quot;},            {&quot;name&quot;: &quot;fstring&quot;, &quot;type&quot;: &quot;string&quot;},            {&quot;name&quot;: &quot;ffixed&quot;,             &quot;size&quot;: 16,             &quot;type&quot;: {&quot;name&quot;: &quot;fixed_16&quot;, &quot;size&quot;: 16, &quot;type&quot;: &quot;fixed&quot;}},            {&quot;name&quot;: &quot;frec&quot;,             &quot;type&quot;: {&quot;fields&quot;: [{&quot;name&quot;: &quot;subfint&quot;, &quot;type&quot;: &quot;int&quot;}],                      &quot;name&quot;: &quot;Rec&quot;,                      &quot;type&quot;: &quot;record&quot;}},            {&quot;name&quot;: &quot;funion_null&quot;, &quot;type&quot;: [&quot;int&quot;, &quot;null&quot;]},            {&quot;name&quot;: &quot;ffloat&quot;, &quot;type&quot;: &quot;float&quot;},            {&quot;name&quot;: &quot;fdouble&quot;, &quot;type&quot;: &quot;double&quot;}],    &quot;name&quot;: &quot;all_field&quot;,    &quot;namespace&quot;: &quot;com.some.thing&quot;,    &quot;type&quot;: &quot;record&quot;}avro_schema = avro.schema.make_avsc_object(schema_dict, avro.schema.Names())serializer = AvroJsonSerializer(avro_schema)json_str = serializer.to_json(data)print json_str&gt; {&quot;fint&quot;:1,&quot;flong&quot;:1,&quot;fstring&quot;:&quot;hi there&quot;,&quot;ffixed&quot;:&quot;1234567890123456&quot;,&quot;frec&quot;:{&quot;subfint&quot;:2},&quot;funion_null&quot;:null,&quot;ffloat&quot;:1.0,&quot;fdouble&quot;:2.0}```See [tests](avro_json_serializer/test/test_avro_json_serializer.py) for more examples.## How to run tests```bashpython-avro-json-serializer$ virtualenv venvpython-avro-json-serializer$ source venv/bin/activate(venv)python-avro-json-serializer$ pip install tox(venv)python-avro-json-serializer$ toxGLOB sdist-make: /Users/bngo/python-avro-json-serializer/setup.pypy27 create: /Users/bngo/python-avro-json-serializer/.tox/py27py27 installdeps: nose, -rrequirements.txtpy27 inst: /Users/bngo/python-avro-json-serializer/.tox/dist/avro_json_serializer-0.4.1.zippy27 installed: avro==1.7.6,avro-json-serializer==0.4.1,nose==1.3.7,simplejson==3.8.2,six==1.10.0py27 runtests: PYTHONHASHSEED='107331485'py27 runtests: commands[0] | nosetests.............----------------------------------------------------------------------Ran 13 tests in 0.066sOKpy35 create: /Users/bngo/python-avro-json-serializer/.tox/py35py35 installdeps: nose, -rrequirements.txtpy35 inst: /Users/bngo/python-avro-json-serializer/.tox/dist/avro_json_serializer-0.4.1.zippy35 installed: avro-json-serializer==0.4.1,avro-python3==1.8.1,nose==1.3.7,simplejson==3.8.2,six==1.10.0py35 runtests: PYTHONHASHSEED='107331485'py35 runtests: commands[0] | nosetests.............----------------------------------------------------------------------Ran 13 tests in 0.029sOK_____________________________________________________________________________________ summary _____________________________________________________________________________________  py27: commands succeeded  py35: commands succeeded  congratulations :)```## LicensePython Avro JSON serializer is licensed under the terms of the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).</longdescription>
</pkgmetadata>