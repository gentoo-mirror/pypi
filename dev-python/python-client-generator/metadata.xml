<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-client-generatorPython package to generate an [httpx](https://github.com/encode/httpx)- and[pydantic](https://github.com/pydantic/pydantic)-based async (or sync) client off an OpenAPI spec.```mermaidflowchart LR    generator[&quot;python-client-generator&quot;]    app[&quot;REST API app&quot;]    package[&quot;app HTTP client&quot;]    app -- &quot;OpenAPI json&quot; --&gt; generator    generator -- &quot;generates&quot; --&gt; package```## Using the generator```bashpython -m python_client_generator --open-api openapi.json --package-name foo_bar --project-name foo-bar --outdir clients```This will produce a Python package with the following structure:```bashclients├── foo_bar│   ├── __init__.py│   ├── apis.py│   ├── base_client.py│   └── models.py└── pyproject.toml```### Using PATCH functions from the generatorWhen calling one of the generated update functions that uses an HTTP `PATCH` method, you'llprobably want to pass the additional argument `body_serializer_args={&quot;exclude_unset&quot;: True}`. Thiswill ensure that only the fields that are set in the update object are sent to the API. Example:```pythonawait api_client.update_contact_v1_contacts__contact_id__patch(                body=patch_body,                contact_id=contact.id,                tenant=tenant,                body_serializer_args={&quot;exclude_unset&quot;: True})```## ContributingPlease refer to [CONTRIBUTING.md](.github/CONTRIBUTING.md).</longdescription>
</pkgmetadata>