<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flask-authz[![GitHub Action](https://github.com/pycasbin/flask-authz/workflows/build/badge.svg?branch=master)](https://github.com/pycasbin/flask-authz/actions)[![Coverage Status](https://coveralls.io/repos/github/pycasbin/flask-authz/badge.svg)](https://coveralls.io/github/pycasbin/flask-authz)[![Version](https://img.shields.io/pypi/v/flask-authz.svg)](https://pypi.org/project/flask-authz/)[![PyPI - Wheel](https://img.shields.io/pypi/wheel/flask-authz.svg)](https://pypi.org/project/flask-authz/)[![Pyversions](https://img.shields.io/pypi/pyversions/flask-authz.svg)](https://pypi.org/project/flask-authz/)[![Download](https://img.shields.io/pypi/dm/flask-authz.svg)](https://pypi.org/project/flask-authz/)[![Discord](https://img.shields.io/discord/1022748306096537660?logo=discord&amp;label=discord&amp;color=5865F2)](https://discord.gg/S5UjpzGZjN)flask-authz is an authorization middleware for [Flask](http://flask.pocoo.org/), it's based on [PyCasbin](https://github.com/casbin/pycasbin).## Installation```pip install flask-authz```Or clone the repo:```$ git clone https://github.com/pycasbin/flask-authz.git$ python setup.py install```Module Usage:```pythonfrom flask import Flaskfrom flask_authz import CasbinEnforcerfrom casbin.persist.adapters import FileAdapterapp = Flask(__name__)# Set up Casbin model configapp.config['CASBIN_MODEL'] = 'casbinmodel.conf'# Set headers where owner for enforcement policy should be locatedapp.config['CASBIN_OWNER_HEADERS'] = {'X-User', 'X-Group'}# Add User Audit Logging with user name associated to log# i.e. `[2020-11-10 12:55:06,060] ERROR in casbin_enforcer: Unauthorized attempt: method: GET resource: /api/v1/item by user: janedoe@example.com`app.config['CASBIN_USER_NAME_HEADERS'] = {'X-User'}# Set up Casbin Adapteradapter = FileAdapter('rbac_policy.csv')casbin_enforcer = CasbinEnforcer(app, adapter)@app.route('/', methods=['GET'])@casbin_enforcer.enforcerdef get_root():    return jsonify({'message': 'If you see this you have access'})@app.route('/manager', methods=['POST'])@casbin_enforcer.enforcer@casbin_enforcer.managerdef make_casbin_change(manager):    # Manager is an casbin.enforcer.Enforcer object to make changes to Casbin    return jsonify({'message': 'If you see this you have access'})```Example ConfigThis example file can be found in `tests/casbin_files````ini[request_definition]r = sub, obj, act[policy_definition]p = sub, obj, act[role_definition]g = _, _[policy_effect]e = some(where (p.eft == allow))[matchers]m = (p.sub == &quot;*&quot; || g(r.sub, p.sub)) &amp;&amp; r.obj == p.obj &amp;&amp; (p.act == &quot;*&quot; || r.act == p.act)```Example PolicyThis example file can be found in `tests/casbin_files````csvp, alice, /dataset1/*, GETp, alice, /dataset1/resource1, POSTp, bob, /dataset2/resource1, *p, bob, /dataset2/resource2, GETp, bob, /dataset2/folder1/*, POSTp, dataset1_admin, /dataset1/*, *p, *, /login, *p, anonymous, /, GETg, cathy, dataset1_admin```Development------------#### Run unit tests1. Fork/Clone repository2. Install flask-authz dependencies, and run `pytest````pythonpip install -r dev_requirements.txtpip install -r requirements.txtpytest```#### Setup pre-commit checks```pythonpre-commit install```#### update requirements with pip-tools```bash# update requirements.txtpip-compile --no-annotate --no-header --rebuild requirements.in# sync venvpip-sync```#### Manually Bump Version```bumpversion major  # major releaseorbumpversion minor  # minor releaseorbumpversion patch  # hotfix release```## DocumentationThe authorization determines a request based on ``{subject, object, action}``, which means what ``subject`` can perform what ``action`` on what ``object``. In this plugin, the meanings are:1. ``subject``: the logged-in user name2. ``object``: the URL path for the web resource like &quot;dataset1/item1&quot;3. ``action``: HTTP method like GET, POST, PUT, DELETE, or the high-level actions you defined like &quot;read-file&quot;, &quot;write-blog&quot;For how to write authorization policy and other details, please refer to [the Casbin's documentation](https://casbin.org).## Getting Help- [Casbin](https://casbin.org)## LicenseThis project is under Apache 2.0 License. See the [LICENSE](LICENSE) file for the full license text.</longdescription>
</pkgmetadata>