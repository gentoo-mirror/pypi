<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [Merlin Systems](https://github.com/NVIDIA-Merlin/systems)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/merlin-systems)[![PyPI version shields.io](https://img.shields.io/pypi/v/merlin-systems.svg)](https://pypi.python.org/pypi/merlin-systems/)![GitHub License](https://img.shields.io/github/license/NVIDIA-Merlin/systems)[![Documentation](https://img.shields.io/badge/documentation-blue.svg)](https://nvidia-merlin.github.io/systems/stable/README.html)Merlin Systems provides tools for combining recommendation models with other elements of production recommender systems like feature stores, nearest neighbor search, and exploration strategies into end-to-end recommendation pipelines that can be served with [Triton Inference Server](https://github.com/triton-inference-server/server).## QuickstartMerlin Systems uses the Merlin Operator DAG API, the same API used in [NVTabular](https://github.com/NVIDIA-Merlin/NVTabular) for feature engineering, to create serving ensembles. To combine a feature engineering workflow and a Tensorflow model into an inference pipeline:```pythonimport tensorflow as tffrom nvtabular.workflow import Workflowfrom merlin.systems.dag import Ensemble, PredictTensorflow, TransformWorkflow# Load saved NVTabular workflow and TensorFlow modelworkflow = Workflow.load(nvtabular_workflow_path)model = tf.keras.models.load_model(tf_model_path)# Remove target/label columns from feature processing workflowkworkflow = workflow.remove_inputs([&lt;target_columns&gt;])# Define ensemble pipelinepipeline = (workflow.input_schema.column_names &gt;&gt;TransformWorkflow(workflow) &gt;&gt;PredictTensorflow(model))# Export artifacts to diskensemble = Ensemble(pipeline, workflow.input_schema)ensemble.export(export_path)```After you export your ensemble, you reference the directory to run an instance of Triton Inference Server to host your ensemble.```shelltritonserver --model-repository=/export_path/```Refer to the [Merlin Systems Example Notebooks](./examples/) for a notebook that serves a ranking models ensemble.The notebook shows how to deploy the ensemble and demonstrates sending requests to Triton Inference Server.## Building a Four-Stage Recommender PipelineMerlin Systems can also build more complex serving pipelines that integrate multiple models and external tools (like feature stores and nearest neighbor search):```python# Load artifacts for the pipelineretrieval_model = tf.keras.models.load_model(retrieval_model_path)ranking_model = tf.keras.models.load_model(ranking_model_path)feature_store = feast.FeatureStore(feast_repo_path)# Define the fields expected in requestsrequest_schema = Schema([    ColumnSchema(&quot;user_id&quot;, dtype=np.int32),])# Fetch user features, use them to a compute user vector with retrieval model,# and find candidate items closest to the user vector with nearest neighbor searchuser_features = request_schema.column_names &gt;&gt; QueryFeast.from_feature_view(    store=feature_store, view=&quot;user_features&quot;, column=&quot;user_id&quot;)retrieval = (    user_features    &gt;&gt; PredictTensorflow(retrieval_model_path)    &gt;&gt; QueryFaiss(faiss_index_path, topk=100))# Filter out candidate items that have already interacted with# in the current session and fetch item features for the restfiltering = retrieval[&quot;candidate_ids&quot;] &gt;&gt; FilterCandidates(    filter_out=user_features[&quot;movie_ids&quot;])item_features = filtering &gt;&gt; QueryFeast.from_feature_view(    store=feature_store, view=&quot;movie_features&quot;, column=&quot;filtered_ids&quot;,)# Join user and item features for the candidates and use them to predict relevance scorescombined_features = item_features &gt;&gt; UnrollFeatures(    &quot;movie_id&quot;, user_features, unrolled_prefix=&quot;user&quot;)ranking = combined_features &gt;&gt; PredictTensorflow(ranking_model_path)# Sort candidate items by relevance score with some randomized explorationordering = combined_features[&quot;movie_id&quot;] &gt;&gt; SoftmaxSampling(    relevance_col=ranking[&quot;output&quot;], topk=10, temperature=20.0)# Create and export the ensembleensemble = Ensemble(ordering, request_schema)ensemble.export(&quot;./ensemble&quot;)```## InstallationMerlin Systems requires Triton Inference Server and Tensorflow. The simplest setup is to use the [Merlin Tensorflow Inference Docker container](https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-tensorflow-inference), which has both pre-installed.### Installing Merlin Systems Using PipYou can install Merlin Systems with `pip`:```shellpip install merlin-systems```### Installing Merlin Systems from SourceMerlin Systems can be installed from source by cloning the GitHub repository and running `setup.py````shellgit clone https://github.com/NVIDIA-Merlin/systems.gitcd systems &amp;&amp; python setup.py develop```### Running Merlin Systems from DockerMerlin Systems is installed on multiple Docker containers that are available from the NVIDIA GPU Cloud (NGC) catalog.The following table lists the containers that include Triton Inference Server for use with Merlin.| Container Name      | Container Location                                                                     | Functionality                                                                      || ------------------- | -------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- || `merlin-hugectr`    | &lt;https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-hugectr&gt;    | Merlin frameworks, HugeCTR, and Triton Inference Server                            || `merlin-tensorflow` | &lt;https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-tensorflow&gt; | Merlin frameworks selected for only Tensorflow support and Triton Inference Server |If you want to add support for GPU-accelerated workflows, you will first need to install the [NVIDIA Container Toolkit](https://github.com/NVIDIA/nvidia-docker) to provide GPU support for Docker. You can use the NGC links referenced in the table above to obtain more information about how to launch and run these containers.## Feedback and SupportTo report bugs or get help, please [open an issue](https://github.com/NVIDIA-Merlin/NVTabular/issues/new/choose).</longdescription>
</pkgmetadata>