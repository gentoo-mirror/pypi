<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====unyt====.. image:: https://img.shields.io/pypi/v/unyt.svg        :target: https://pypi.python.org/pypi/unyt.. image:: https://img.shields.io/conda/vn/conda-forge/unyt.svg        :target: https://anaconda.org/conda-forge/unyt        :alt: conda-forge.. image:: https://github.com/yt-project/unyt/actions/workflows/ci.yml/badge.svg?branch=main        :target: https://github.com/yt-project/unyt/actions/workflows/ci.yml.. image:: https://github.com/yt-project/unyt/actions/workflows/bleeding-edge.yaml/badge.svg?branch=main        :target: https://github.com/yt-project/unyt/actions/workflows/bleeding-edge.yaml.. image:: https://readthedocs.org/projects/unyt/badge/?version=latest        :target: https://unyt.readthedocs.io/en/latest/?badge=latest        :alt: Documentation Status.. image:: https://codecov.io/gh/yt-project/unyt/branch/master/graph/badge.svg        :target: https://codecov.io/gh/yt-project/unyt        :alt: Test Coverage.. image:: http://joss.theoj.org/papers/dbc27acb614dd33eb02b029ef20e7fe7/status.svg        :target: http://joss.theoj.org/papers/dbc27acb614dd33eb02b029ef20e7fe7        :alt: Code Paper| .. image:: https://raw.githubusercontent.com/yt-project/unyt/master/docs/_static/yt_logo_small.png         :target: https://yt-project.org         :alt: The yt ProjectA package for handling numpy arrays with units.Often writing code that deals with data that has units can be confusing. Afunction might return an array but at least with plain NumPy arrays, there is noway to easily tell what the units of the data are without somehow knowing *apriori*.The ``unyt`` package (pronounced like &quot;unit&quot;) provides a subclass of NumPy's``ndarray`` class that knows about units. For example, one could do:    &gt;&gt;&gt; import unyt as u    &gt;&gt;&gt; distance_traveled = [3.4, 5.8, 7.2] * u.mile    &gt;&gt;&gt; print(distance_traveled.to('km'))    [ 5.4717696  9.3341952 11.5872768] kmAnd a whole lot more! See `the documentation &lt;http://unyt.readthedocs.io&gt;`_ forinstallation instructions, more examples, and full API reference.This package only depends on ``numpy`` and ``sympy``.  Notably, it does *not*depend on ``yt`` and it is written in pure Python.Code of Conduct---------------The ``unyt`` package is part of `The yt Project&lt;https://yt-project.org&gt;`_. Participating in ``unyt`` development thereforehappens under the auspices of the `yt community code of conduct&lt;http://yt-project.org/doc/developing/developing.html#yt-community-code-of-conduct&gt;`_. Iffor any reason you feel that the code of conduct has been violated, please sendan e-mail to confidential@yt-project.org with details describing theincident. All emails sent to this address will be treated with the strictestconfidence by an individual who does not normally participate in yt development.License-------The unyt package is licensed under the BSD 3-clause license.Citation--------If you make use of unyt in work that leads to a publication we would appreciatea mention in the text of the paper or in the acknowledgements along with acitation to our `paper&lt;https://joss.theoj.org/papers/dbc27acb614dd33eb02b029ef20e7fe7&gt;`_ in theJournal of Open Source Software. You can use the following BibTeX:: @article{Goldbaum2018,   doi = {10.21105/joss.00809},   url = {https://doi.org/10.21105/joss.00809},   year  = {2018},   month = {aug},   publisher = {The Open Journal},   volume = {3},   number = {28},   pages = {809},   author = {Nathan J. Goldbaum and John A. ZuHone and Matthew J. Turk and Kacper Kowalik and Anna L. Rosen},   title = {unyt: Handle,  manipulate,  and convert data with units in Python},   journal = {Journal of Open Source Software} }Or the following citation format:  Goldbaum et al., (2018). unyt: Handle, manipulate, and convert data with units in Python . Journal of Open Source Software, 3(28), 809, https://doi.org/10.21105/joss.00809=======History=======2.9.5 (2023-02-22)------------------* Fix a regression where arrays elements with dtype ``'int8'`` would not compare to floats  as intended. See `PR #371 &lt;https://github.com/yt-project/unyt/pull/371&gt;`_. Thank you to  Clément Robert (@neutrinoceros on GitHub) and Nathan Goldbaum (@ngoldbaum on GitHub) for  the contribution.* Raise an error in case an array element is assigned to a new value with incompatible  units. See `PR #375 &lt;https://github.com/yt-project/unyt/pull/375&gt;`_ and `PR #376  &lt;https://github.com/yt-project/unyt/pull/376&gt;`_. Thank you to Nathan Goldbaum  (@ngoldbaum on GitHub) for the contribution.2.9.4 (2023-02-06)------------------* Make ``unyt_quantity.from_string`` parse ints.  See `PR #278 &lt;https://github.com/yt-project/unyt/pull/278&gt;`_.  Thank you to Nathan Goldbaum (@ngoldbaum on GitHub) for the contribution.* TST: migrate from tox-pyenv to tox-gh-actions #344  See `PR #344 &lt;https://github.com/yt-project/unyt/pull/344&gt;`_.  Thank you to Clément Robert (@neutrinoceros on GitHub) for the contribution.* Correctly test string comparison depending on numpy version #358  See `PR #358 &lt;https://github.com/yt-project/unyt/pull/358&gt;`_.  Thank you to Clément Robert (@neutrinoceros on GitHub) for the contribution.* Multiple fixes for ``unyt_quantity.from_string``  - fix a bug where ``unyt_quantity.from_string`` would drop part of the unit expression  - fix a bug where ``unyt_quantity.from_string`` would choke on unit expressions starting with ``'*'`` or ``'/'``  - fix a bug where ``unyt_quantity.from_string`` would choke on space-separated unit expressions  - fix roundtrip for ``unyt_quantity.from_string`` and ``unyt_quantity.to_string`` methods  - simplify unit regexp (``'**/2'`` isn't a valid exponent)  - fix a bug where malformed string input would be incorrectly parsed by ``unyt_quantity.from_string``  See `PR #362 &lt;https://github.com/yt-project/unyt/pull/362&gt;`_.  Thank you to Clément Robert (@neutrinoceros on GitHub) for the contribution,  and to Chris Byrohl (@cbyrohl on GitHub) for the report.2.9.3 (2022-12-07)------------------* Fix a future incompatibility with numpy 1.25 (unreleased) where comparing  ``unyt_array`` objects to non-numeric objects (e.g. strings) would cause a  crash. See `PR #333 &lt;https://github.com/yt-project/unyt/pull/333&gt;`_. Thank you  to Clément Robert (@neutrinoceros on GitHub) and Nathan Goldbaum (@ngoldbaum  on GitHub) for the contribution.2.9.2 (2022-07-20)------------------* Fix an issue where taking powers of units was backwards-incompatible with previous  versions of ``unyt`` when the exponent is not zero. See `PR #249  &lt;https://github.com/yt-project/unyt/pull/249&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the contribution.* The import time for ``unyt`` has been reduced by skipping version checking of  other packages. See `PR #251  &lt;https://github.com/yt-project/unyt/pull/251&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the contribution.2.9.0 (2022-07-14)------------------* Dropped support for Python 3.6 and 3.7.* Added support for Python 3.8, 3.9 and 3.10.* Fix an issue where SI prefixes of the ``degC`` units would give incorrect  values in conversions. See `PR #176  &lt;https://github.com/yt-project/unyt/pull/176&gt;`_. Thank you to Lee Johnston  (@l-johnston on GitHub) for the contribution.* Fix an issue when using ``matplotlib_support``, plot an empty unyt array,  would result in an error when changing units. See `PR #180  &lt;https://github.com/yt-project/unyt/pull/180&gt;`_. Thank you to Josh Borrow  (@JBorrow on GitHub) for the contribution.* Fix an issue where units would be printed twice in formatted strings with  an ``unyt_array`` embedded. See `PR #188  &lt;https://github.com/yt-project/unyt/pull/188&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the contribution.* Add a method to parse a ``unyt_quantity`` from a string expression. See `PR #191  &lt;https://github.com/yt-project/unyt/pull/191&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the contribution.* Fix an issue where a ``unyt_array`` with dtype int8 could not be converted  to a different unit. See `PR #197  &lt;https://github.com/yt-project/unyt/pull/197&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the contribution.* The import time for ``unyt`` has been reduced. See `PR #199  &lt;https://github.com/yt-project/unyt/pull/199&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the contribution.* Fix an issue where taking an ``unyt_array`` or ``unyt_quantity`` to a zero  power would retain the units of the original array or quantity instead of  converting to a dimensionless array. See `PR #204  &lt;https://github.com/yt-project/unyt/pull/204&gt;`_. Thank you to Josh Borrow  (@JBorrow on GitHub) for the contribution.* Add support for coercing iterables of ``unyt_array`` objects with nonuniform  dimensionally equivalent units to a single ``unyt_array``. See `PR #211  &lt;https://github.com/yt-project/unyt/pull/211&gt;`_. Thank you to Nathan Goldbaum  (@ngoldbaum on GitHub) for the contribution.* Add the civil engineering units ``pli``, ``plf``, ``psf``, ``kli``, ``klf``,  and ``ksf``. See `PR #217 &lt;https://github.com/yt-project/unyt/pull/217&gt;`_.  Thank you to @osnippet on GitHub for the contribution.* Fix typos in constants and unit prefixes. See `PR #218  &lt;https://github.com/yt-project/unyt/pull/218&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the contribution.* Fix an issue where multiplying a 1-element ``unyt_array`` would return a  ``unyt_quantity``. See `PR #225 &lt;https://github.com/yt-project/unyt/pull/225&gt;`_.  Thank you to Clément Robert (@neutrinoceros on GitHub) for the contribution.* Add the Rydberg constant ``R_∞`` and unit ``Ry``, add the dimension  ``angular_frequency`` and the unit ``rpm``, and increase the precision of  Avogadro's number. See `PR #228 &lt;https://github.com/yt-project/unyt/pull/228&gt;`_.* Fix an issue where ``np.divide.reduce`` would return incorrect units for ``unyt_array``  instances. See `PR #230 &lt;https://github.com/yt-project/unyt/pull/230&gt;`_.  Thank you to Kyle Oman (@kyleaoman on GitHub) for the contribution.2.8.0 (2020-10-05)------------------* Dropped support for Python 3.5.* Add ``delta_degC`` and ``delta_degF`` units to support temperature difference  arithmetic. See `PR #152  &lt;https://github.com/yt-project/unyt/pull/152&gt;`_. Thank you to Lee Johnston  (@l-johnston on GitHub) for the contribution.* Fix an issue where a subsequent load of the unit registry with units that are  equal but not identical leads to a crash. See `PR #158  &lt;https://github.com/yt-project/unyt/pull/158&gt;`_. Thank you to Matthew Turk  (@matthewturk on GitHub) for the initial bug report and fix.* Add force unit ``kip`` and pressure unit ``psi``. Thank you to P. Talley  (@otaithleigh on GitHub) for the contribution. See `PR #162  &lt;https://github.com/yt-project/unyt/pull/162&gt;`_.* Fix an issue where arithmetic operations on units defined in different  registries and having the conversion defined in one direction would lead to a  crash.  See `PR #164 &lt;https://github.com/yt-project/unyt/pull/164&gt;`_. Thank  you to Clément Robert (@neutrinoceros on GitHub) for the initial bug report  and fix.2.7.2 (2020-06-29)------------------* The ``unyt.returns`` and ``unyt.accepts`` decorators now work correctly for  functions that accept or return data with dimensionless units. See `PR #146  &lt;https://github.com/yt-project/unyt/pull/146&gt;`_. Thank you to Simon Schopferer  (@simfinite on GitHub) for the initial bug report and fix.* Data used in the tests are packaged with the source distribution and  ``unyt.test()`` is now itself run as part of unyt's continuous integration  tests. See `PR #149 &lt;https://github.com/yt-project/unyt/pull/149&gt;`_ and `PR  #150 &lt;https://github.com/yt-project/unyt/pull/150&gt;`_. Thank you to Miguel de  Val-Borro (@migueldvb on GitHub) for the initial bug report and fix.* The ``degC`` and ``degF`` units now render as ``°C`` and ``°F`` by default,  ``°C`` and ``°F`` are now recognized as valid unit names as well. Thank you to  Lee Johnston (@l-johnston on GitHub) for the contribution.* Use a more canonical representation of the micro symbol when printing units  with the micro prefix, avoiding issues with displaying unit names in  Matplotlib plot labels. See `PR #153  &lt;https://github.com/yt-project/unyt/pull/153&gt;`_. Thank you to Matthew Turk  (@matthewturk on GitHub) for the bug report and fix.* Add more alternative spellings for solar units. See `PR #155  &lt;https://github.com/yt-project/unyt/pull/155&gt;`_. Thank you to Clément Robert  (@neutrinoceros on GitHub) for the initial bug report.2.7.1 (2020-02-17)------------------* Fix compatibility with ``unyt_array`` subclasses that do not have the new  ``name`` argument in their initializer. See `PR #140  &lt;https://github.com/yt-project/unyt/pull/140&gt;`_.* Fix an issue where custom units added to a unit registry were not restored  correctly when reloading a unit registry from a JSON or pickle  representation. See `PR #140 &lt;https://github.com/yt-project/unyt/pull/140&gt;`_.2.7.0 (2020-02-06)------------------* The ``unyt_array`` and ``unyt_quantity`` classes now have a new, optional  ``name`` attribute. The primary purpose of this attribute is to enable  automatic generation of matplotlib plot labels. The ``name`` attribute is  propagated through unit conversions and copies but is not propagated through  mathematical operations. See `PR #129  &lt;https://github.com/yt-project/unyt/pull/129&gt;`_ and the documentation for  details.* Add support for the ``Neper`` and ``Bel`` units with logarithmic  dimensions. This includes support for the ``decibel`` unit. Note that  logarithmic units can only be used with other logarithmic units and must be  applied and stripped manually. See `PR #133  &lt;https://github.com/yt-project/unyt/pull/133&gt;`_ and `PR #134  &lt;https://github.com/yt-project/unyt/pull/134&gt;`_.* Add support for the SI unit of inductance, ``H``. See `PR #135  &lt;https://github.com/yt-project/unyt/pull/135&gt;`_.* Fix formatting of error message produced when raising a quantity to a power  with units. See `PR #131  &lt;https://github.com/yt-project/unyt/pull/131&gt;`_. Thank you to Lee Johnston  (@l-johnston on GitHub) for all of the above contributions.* Fix incorrect unit metadata when loading a pickled array saved by  ``yt.units``. See `PR #137 &lt;https://github.com/yt-project/unyt/pull/137&gt;`_.2.6.0 (2020-01-22)------------------* Matplotlib support is no longer enabled by importing ``unyt``. Instead, it is  now necessary to use the ``unyt.matplotlib_support`` context manager in code  where you want unyt to automatically generate plot labels. Enabling Matplotlib  support by default in the previous release caused crashes in previously  working code for some users so we have decided to make the plotting support  optional. See the documentation for more details. We are sorry for introducing  a new feature that broke some user's code. See `PR #126  &lt;https://github.com/yt-project/unyt/pull/126&gt;`_. Thank you to Lee Johnston  (@l-johnston on GitHub) for the contribution.* Updated the contribution guide to include more details about setting up  multiple Python versions for the ``tox`` tests.2.5.0 (2020-01-20)------------------* Importing unyt now registers unyt with Matplotlib's interface for handling  units. See the `Matplotlib  &lt;https://matplotlib.org/gallery/units/units_scatter.html&gt;`_ and `unyt  &lt;https://unyt.readthedocs.io/en/latest/usage.html#plotting-with-matplotlib&gt;`_  documentation for more details. See `PR #122  &lt;https://github.com/yt-project/unyt/pull/122&gt;`_ and `PR #124  &lt;https://github.com/yt-project/unyt/pull/124&gt;`_. Thank you to Lee Johnston  (@l-johnston on GitHub) for the contribution.* Updated the LaTeX formatting of solar units so they do not get rendered  italicized. See `PR #120  &lt;https://github.com/yt-project/unyt/pull/120&gt;`_. Thank you to Josh Borrow  (@JBorrow on GitHub) for the contribution.* Reduce floating point round-off error when data are converted from integer to  float dtypes. See `PR #119 &lt;https://github.com/yt-project/unyt/pull/119&gt;`_.2.4.1 (2020-01-10)------------------* Add support for the latest releases of h5py, sympy, NumPy, and PyTest. See `PR  #115 &lt;https://github.com/yt-project/unyt/pull/115&gt;`_.* Fix the hash implementation so that identical units cannot have distinct  hashes. See `PR #114 &lt;https://github.com/yt-project/unyt/pull/114&gt;`_ and `PR  #117 &lt;https://github.com/yt-project/unyt/pull/114&gt;`_. Thank you to Ben Kimock  (@saethlin on GitHub) for the contribution.2.4.0 (2019-10-25)------------------* Improve performance for creating quantities or small arrays via multiplication  with a unit object. Creating an array or quantity from data that does not have  a numeric dtype will now raise ``UnitOperationError`` instead of  ``UnitDtypeError``, which has been removed. See `PR #111  &lt;https://github.com/yt-project/unyt/pull/111&gt;`_.* Comparing data with units that have different dimensions using the ``==`` and  ``!=`` operators will no longer raise an error. Other comparison operators  will continue to raise errors. See `PR #109  &lt;https://github.com/yt-project/unyt/pull/109&gt;`_.* Fixed a corner case in the implementation of ``clip``. See `PR #108  &lt;https://github.com/yt-project/unyt/pull/108&gt;`_. Thank you to Matthew Turk  (@matthewturk on GitHub) for the contribution.* Added ``%`` as a valid dimensionless unit with a value of ``0.01``, also  available under the name ``percent``. See `PR #106  &lt;https://github.com/yt-project/unyt/pull/106&gt;`_. Thank you to Thomas Hisch for  the contribution.* Added ``bar`` to the default unit lookup table. See `PR #103  &lt;https://github.com/yt-project/unyt/pull/103&gt;`_. Thank you to Thomas Hisch  (@thisch on GitHub) for the contribution.2.3.1 (2019-08-21)------------------* Added support for the ``clip`` ufunc added in NumPy 1.17. See `PR #102  &lt;https://github.com/yt-project/unyt/pull/102&gt;`_.2.3.0 (2019-08-14)------------------* Added ``unyt.dimensions.accepts`` and ``unyt.dimensions.returns``, decorators  that can be used to ensure that data passed into a decorated function has  units that are dimensionally consistent with the function's expected  inputs. See `PR #98 &lt;https://github.com/yt-project/unyt/pull/94&gt;`_. Thank you  to Andrei Berceanu (@berceanu on GitHub) for the contribution.* Added ``unyt.allclose_units`` and improved documentation for writing tests for  code that uses ``unyt``. This is a wrapper for ``numpy.allclose`` that also  checks the units of the input arrays. See `PR #94  &lt;https://github.com/yt-project/unyt/pull/94&gt;`_. Thank you to Andrei Berceanu  (@berceanu on GitHub) for the contribution.2.2.2 (2019-07-03)------------------* Fix erroneous conversions of E&amp;M units to their &quot;native&quot; unit system,  for example, converting Gauss to CGS units would return Tesla and converting  Tesla to MKS units would return Gauss. See `PR #96  &lt;https://github.com/yt-project/unyt/pull/96&gt;`_.2.2.1 (2019-07-02)------------------* Add support for loading JSON unit registries saved by ``yt.units``.  See `PR #93 &lt;https://github.com/yt-project/unyt/pull/93&gt;`_.* Correct the value of the ``light_year`` unit.  See `PR #93 &lt;https://github.com/yt-project/unyt/pull/93&gt;`_.* It is now possible to define a ``UnitSystem`` object with a quantity.  See `PR #86 &lt;https://github.com/yt-project/unyt/pull/86&gt;`_.* Incorrect units for Planck units have been fixed.  See `PR #85 &lt;https://github.com/yt-project/unyt/pull/85&gt;`_. Thank you to  Nathan Musoke (@musoke on GitHub) for the contribution.* Updated value of Newton's constant to latest CODATA value.  See `PR #84 &lt;https://github.com/yt-project/unyt/pull/84&gt;`_.2.2.0 (2019-04-03)------------------* Several performance optimizations. This includes a slight change to the behavior  of MKS/CGS E&amp;M unit conversions that makes the conversion rules slightly more relaxed.  See `PR #82 &lt;https://github.com/yt-project/unyt/pull/82&gt;`_.2.1.1 (2019-03-27)------------------* Fixed an issue with restoring unit registries from JSON output. See `PR #81  &lt;https://github.com/yt-project/unyt/pull/81&gt;`_.2.1.0 (2019-03-26)------------------This release includes a few minor new features and bugfixes for the 2.0.0 release.* Added support for the matmul ``@`` operator. See `PR #80  &lt;https://github.com/yt-project/unyt/pull/80&gt;`_.* Allow defining unit systems using ``Unit`` instances instead of string unit  names. See `PR #71 &lt;https://github.com/yt-project/unyt/pull/71&gt;`_. Thank you  to Josh Borrow (@JBorrow on GitHub) for the contribution.* Fix incorrect behavior when ``uhstack`` is called with the ``axis``  argument. See `PR #73 &lt;https://github.com/yt-project/unyt/pull/73&gt;`_.* Add ``&quot;rsun&quot;``, ``&quot;lsun&quot;``, and ``&quot;au&quot;`` as alternate spellings for the  ``&quot;Rsun&quot;``, ``&quot;Lsun&quot;``, and ``&quot;AU&quot;`` units. See `PR #77  &lt;https://github.com/yt-project/unyt/pull/77&gt;`_.* Improvements for working with code unit systems. See `PR #78  &lt;https://github.com/yt-project/unyt/pull/78&gt;`_.* Reduce impact of floating point round-off noise on unit comparisons. See `PR  #79 &lt;https://github.com/yt-project/unyt/pull/79&gt;`_.2.0.0 (2019-03-08)------------------``unyt`` 2.0.0 includes a number of exciting new features as well as somebugfixes. There are some small backwards incompatible changes in this releaserelated to automatic unit simplification and handling of dtypes. Please see therelease notes below for more details. If you are upgrading from ``unyt 1.x`` wesuggest testing to make sure these changes do not siginificantly impact you. Ifyou run into issues please let us know by `opening an issue on GitHub&lt;https://github.com/yt-project/unyt/issues/new&gt;`_.* Dropped support for Python 2.7 and Python 3.4. Added support for Python 3.7.* Added ``Unit.simplify()``, which cancels pairs of terms in a unit expression  that have inverse dimensions and made it so the results of ``unyt_array``  multiplication and division will automatically simplify units. This means  operations that combine distinct dimensionally equivalent units will cancel in  many situations. For example  .. code-block::     &gt;&gt;&gt; from unyt import kg, g     &gt;&gt;&gt; print((12 * kg) / (4 * g))     3000.0 dimensionless  older versions of ``unyt`` would have returned ``4.0 kg/g``. See `PR #58  &lt;https://github.com/yt-project/unyt/pull/58&gt;`_ for more details. This change  may cause the units of operations to have different, equivalent simplified  units than they did with older versions of ``unyt``.* Added the ability to resolve non-canonical unit names to the equivalent  canonical unit names. This means it is now possible to refer to a unit name  using an alternative non-canonical unit name when importing the unit from the  ``unyt`` namespace as well as when a unit name is passed as a string to  ``unyt``. For example:  .. code-block::     &gt;&gt;&gt; from unyt import meter, second     &gt;&gt;&gt; data = 1000.0 * meter / second     &gt;&gt;&gt; data.to(&quot;kilometer/second&quot;)     unyt_quantity(1., 'km/s')     &gt;&gt;&gt; data.to(&quot;metre/s&quot;)     unyt_quantity(1000., 'm/s')  The documentation now has a table of units recognized by ``unyt`` along with  known alternative spellings for each unit.* Added support for unicode unit names, including ``μm`` for micrometer and ``Ω``  for ohm. See `PR #59 &lt;https://github.com/yt-project/unyt/pull/59&gt;`_.* Substantially improved support for data that does not have a ``float64``  dtype. Rather than coercing all data to ``float64`` ``unyt`` will now preserve  the dtype of data. Data that is not already a numpy array will be coerced to a  dtype by calling ``np.array`` internally. Converting integer data to a new  unit will convert the data to floats, if this causes a loss of precision then  a warning message will be printed. See `PR #55  &lt;https://github.com/yt-project/unyt/pull/55&gt;`_ for details. This change may  cause data to be loaded into ``unyt`` with a different dtype. On Windows the  default integer dtype is ``int32``, so data may begin to be recognized as  ``int32`` or converted to ``float32`` where before it was interpreted as  ``float64`` by default.* Unit registries are now associated with a unit system. This means that it's  possible to create a unit registry that is associated with a non-MKS unit  system so that conversions to &quot;base&quot; units will end up in that non-MKS  system. For example:  .. code-block::     &gt;&gt;&gt; from unyt import UnitRegistry, unyt_quantity     &gt;&gt;&gt; ureg = UnitRegistry(unit_system=&quot;cgs&quot;)     &gt;&gt;&gt; data = unyt_quantity(12, &quot;N&quot;, registry=ureg)     &gt;&gt;&gt; data.in_base()     unyt_quantity(1200000., 'dyn')  See `PR #62 &lt;https://github.com/yt-project/unyt/pull/62&gt;`_ for details.* Added two new utility functions, ``unyt.unit_systems.add_constants`` and  ``unyt.unit_systems.add_symbols`` that can populate a namespace with a set of  unit symbols in the same way that the top-level ``unyt`` namespace is  populated. For example, the author of a library making use of ``unyt`` could  create an object that users can use to access unit data like this:  .. code-block::      &gt;&gt;&gt; from unyt.unit_systems import add_symbols      &gt;&gt;&gt; from unyt.unit_registry import UnitRegistry      &gt;&gt;&gt; class UnitContainer:      ...     def __init__(self):      ...         add_symbols(vars(self), registry=UnitRegistry())      ...      &gt;&gt;&gt; units = UnitContainer()      &gt;&gt;&gt; units.kilometer      km      &gt;&gt;&gt; units.microsecond      μs  See `PR #68 &lt;https://github.com/yt-project/unyt/pull/68&gt;`_.* The ``unyt`` codebase is now automatically formatted by `black  &lt;https://github.com/ambv/black&gt;`_. See `PR #57  &lt;https://github.com/yt-project/unyt/pull/57&gt;`_.* Add missing &quot;microsecond&quot; name from top-level ``unyt`` namespace. See `PR  #48 &lt;https://github.com/yt-project/unyt/pull/48&gt;`_.* Add support for ``numpy.argsort`` by defining ``unyt_array.argsort``. See `PR  #52 &lt;https://github.com/yt-project/unyt/pull/52&gt;`_.* Add Farad unit and fix issues with conversions between MKS and CGS  electromagnetic units. See `PR #54  &lt;https://github.com/yt-project/unyt/pull/54&gt;`_.* Fixed incorrect conversions between inverse velocities and ``statohm``. See  `PR #61 &lt;https://github.com/yt-project/unyt/pull/61&gt;`_.* Fixed issues with installing ``unyt`` from source with newer versions of  ``pip``. See `PR #63 &lt;https://github.com/yt-project/unyt/pull/62&gt;`_.* Fixed bug when using ``define_unit`` that caused crashes when using a custom  unit registry. Thank you to Bili Dong (@qobilidob on GitHub) for the pull  request. See `PR #64 &lt;https://github.com/yt-project/unyt/pull/64&gt;`_.We would also like to thank Daniel Gomez (@dangom), Britton Smith(@brittonsmith), Lee Johnston (@l-johnston), Meagan Lang (@langmm), Eric Chen(@ericchen), Justin Gilmer (@justinGilmer), and Andy Perez (@sharkweek) forreporting issues.1.0.7 (2018-08-13)------------------Trigger zenodo archiving.1.0.6 (2018-08-13)------------------Minor paper updates to finalize JOSS submission.1.0.5 (2018-08-03)------------------``unyt`` 1.0.5 includes changes that reflect the peew review process for theJOSS method paper. The peer reviewers were Stuart Mumfork (`@cadair&lt;https://github.com/cadair&gt;`_), Trevor Bekolay (`@tbekolay&lt;https://github.com/tbekolay&gt;`_), and Yan Grange (`@ygrange&lt;https://github.com/ygrange&gt;`_). The editor was Kyle Niemeyer (`@kyleniemeyer&lt;https://github.com/kyleniemeyer&gt;`_). The ``unyt`` development team thank ourreviewers and editor for their help getting the ``unyt`` paper out the door aswell as for the numerous comments and suggestions that improved the paper andpackage as a whole.In addition we'd like to thank Mike Zingale, Meagan Lang, Maksin Ratkin,DougAJ4, Ma Jianjun, Paul Ivanov, and Stephan Hoyer for reporting issues.* Added docstrings for the custom exception classes defined by ``unyt``. See `PR  #44 &lt;https://github.com/yt-project/unyt/pull/44&gt;`_.* Added improved documentation to the contributor guide on how to run the tests  and what the PR review guidelines are. See `PR #43  &lt;https://github.com/yt-project/unyt/pull/43&gt;`_.* Updates to the text of the method paper in response to reviewer  suggestions. See `PR #42 &lt;https://github.com/yt-project/unyt/pull/42&gt;`_.* It is now possible to run the tests on an installed copy of ``unyt`` by  executing ``unyt.test()``. See `PR #41  &lt;https://github.com/yt-project/unyt/pull/41&gt;`_.* Minor edit to LICENSE file so GitHub recognizes it. See `PR #40  &lt;https://github.com/yt-project/unyt/pull/35&gt;`_. Thank you to Kyle Sunden  (`@ksunden &lt;https://github.com/ksunden&gt;`_) for the contribution.* Add spatial frequency as a dimension and added support in the ``spectral``  equivalence for the spatial frequency dimension. See `PR #38  &lt;https://github.com/yt-project/unyt/pull/38&gt;`_ Thank you to Kyle Sunden  (`@ksunden &lt;https://github.com/ksunden&gt;`_) for the contribution.* Add support for Python 3.7. See `PR #37  &lt;https://github.com/yt-project/unyt/pull/35&gt;`_.* Importing ``unyt`` will now fail if ``numpy`` and ``sympy`` are not  installed. See `PR #35 &lt;https://github.com/yt-project/unyt/pull/35&gt;`_* Testing whether a unit name is contained in a unit registry using the Python  ``in`` keyword will now work correctly for all unit names. See `PR #31  &lt;https://github.com/yt-project/unyt/pull/31&gt;`_.* The aliases for megagram in the top-level unyt namespace were incorrectly set  to reference kilogram and now have the correct value. See `PR #29  &lt;https://github.com/yt-project/unyt/pull/29&gt;`_.* Make it possible to take scalars to dimensionless array powers with a properly  broadcasted result without raising an error about units. See `PR #23  &lt;https://github.com/yt-project/unyt/pull/23&gt;`_.* Whether or not a unit is allowed to be SI-prefixable (for example, meter is  SI-prefixable to form centimeter, kilometer, and many other units) is now  stored as metadata in the unit registry rather than as global state inside  ``unyt``. See `PR #21 &lt;https://github.com/yt-project/unyt/pull/21&gt;`_.* Made adjustments to the rules for converting between CGS and MKS E&amp;M units so  that errors are only raised when going between unit systems and not merely  when doing a complicated unit conversion invoving E&amp;M units. See `PR #20  &lt;https://github.com/yt-project/unyt/pull/20&gt;`_.* ``round(q)`` where ``q`` is a ``unyt_quantity`` instance will no  longer raise an error and will now return the nearest rounded float.  See `PR #19 &lt;https://github.com/yt-project/unyt/pull/19&gt;`_.* Fixed a typo in the readme. Thank you to Paul Ivanov (`@ivanov  &lt;https://github.com/ivanov&gt;`_) for `the fix  &lt;https://github.com/yt-project/unyt/pull/16&gt;`_.* Added smoot as a unit. See `PR #14  &lt;https://github.com/yt-project/unyt/pull/14&gt;`_.1.0.4 (2018-06-08)------------------* Expand installation instructions* Mention paper and arxiv submission in the readme.1.0.3 (2018-06-06)------------------* Fix readme rendering on pypi1.0.2 (2018-06-06)------------------* Added a paper to be submitted to the Journal of Open Source Software.* Tweaks for the readme1.0.1 (2018-05-24)------------------* Don't use setup_requires in setup.py1.0.0 (2018-05-24)------------------* First release on PyPI.* unyt began life as a submodule of yt named yt.units.* It was separated from yt.units as its own package in 2018.</longdescription>
</pkgmetadata>