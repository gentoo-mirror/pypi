<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Travis CI| |Code Health| |Coverage Status| |Downloads| |Version|PBS - a PYBOSSA command line interface======================================**pbs** is a very simple command line interface to a PYBOSSA server. Itallows you to create projects, add tasks (from a CSV, JSON, PO or aPROPERTIES file) with a nice progress bar, delete them and update theproject templates (tutorial, task_presenter, and descriptions) all fromthe command line.Requirements============`PYBOSSA server &lt;http://pybossa.com&gt;`__ &gt;= 2.3.7.Installation============pbs is available in Pypi, so you can install the software with pip:.. code:: bash       pip install pybossa-pbsIf you have all the dependencies, the package will be installed and youwill be able to use it from the command line. The command is: **pbs**.If you want to hack on the code, just install it but with the**–editable** flag after cloning the repository:::       git clone https://github.com/Scifabric/pbs.git       cd pbs       virtualenv env       source env/bin/activate       pip install --editable .This will install the pbs package, and you’ll be able to modify it,patch it, etc. If you improve it, please, let us know and share the codeso we can integrate it back ;-)Configuring pbs---------------pbs is very handy when you work with one or two PYBOSSA servers. Thebest way to configure it is creating a simple config file in your homefolder:.. code:: bash       cd ~       vim .pybossa.cfgThe file should have the following structure:.. code:: ini   [default]   server: http://theserver.com   apikey: yourkeyIf you are working with more servers, add another section below it. Forexample:.. code:: ini   [default]   server: http://theserver.com   apikey: yourkey   [crowdcrafting]   server: http://crowdcrafting.org   apikey: yourkeyincrowdcraftingBy default pbs will use the credentials of the section default, so youdon’t have to type anything to use those values. However, if you want todo actions in the other server all you have to do is the following:.. code:: bash       pbs --credentials crowdcrafting --helpThat command will use the values of the crowdcrafting section.Getting out of the API context~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PYBOSSA by default returns first your projects, meaning that if you wantto work on a project that you don’t own, it will return an error as theproject will not be found. For solving this issue you have two options:-  In the config file, by adding a new flag: all:1-  On the command line, passing the –all=1 flagCreating a project------------------Creating a project is very simple. All you have to do is create a filenamed **project.json** with the following fields:.. code:: json   {       &quot;name&quot;: &quot;Flickr Person Finder&quot;,       &quot;short_name&quot;: &quot;flickrperson&quot;,       &quot;description&quot;: &quot;Image pattern recognition&quot;,       &quot;question&quot;: &quot;Do you see a real human face in this photo?&quot;   }If you use the name **project.json** you will not have to pass the filename via an argument, as it’s the named used by default. Once you havethe file created, run the following command:.. code:: bash       pbs create_projectThat command should create the project. If you want to see all theavailable options, please check the **–help** command:.. code:: bash       pbs create_project --helpAdding tasks to a project-------------------------Adding tasks is very simple. You can have your tasks in three formats:-  JSON-  Excel (xlsx from 2010. It imports the first sheet)-  CSV-  PO (any po file that you want to translate)-  PROPERTIES (any PROPERTIES file that you want to translate)Therefore, adding tasks to your project is as simple as this command:.. code:: bash       pbs add_tasks --tasks-file tasks_file.jsonIf you want to see all the available options, please check the **–help**command:**NOTE**: By default PYBOSSA servers use a rate limit for avoiding abuseof the API. For this reason, you can only do usually 300 requests perevery 15 minutes. If you are going to add more than 300 tasks, pbs willdetect it and warn you, auto-enabling the throttling for you to respectthe limits... code:: bash       pbs add_tasks --helpUpdating project templates--------------------------Now that you have added tasks, you can work in your templates. All youhave to do to add/update the templates to your project is running thefollowing command:.. code:: bash       pbs update_projectThat command needs to have in the same folder where you are running it,the following files:-  template.html-  long_description.md-  tutorial.htmlIf you want to use another template, you can via arguments:.. code:: bash       pbs update_project --template /tmp/template.htmlIf you want to see all the available options, please check the **–help**command:.. code:: bash       pbs update_project --helpUsing an external JavaScript file~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Since pbs &gt;= 2.3.0, pbs will check for an external JavaScript file named*bundle.js* or *bundle.min.js*. If any of those files exist, then, theywill be added at the bottom of your template (like you have been doingso far with your projects).This solution allows you to use for example webpack plus babel totranspile your code, minimize it and add it to your PYBOSSA project.In order to use this solution, just transpile to a file named bundle.jsor bundle.min.js.**NOTE** If there’s a minified version of the file, bundle.min.js, thatfile will be always used instead of bundle.js.Auto-updating while developing a PYBOSSA project~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~At some point you will end up running lots of pbs update_projectcommands, as you will be using your own editor for fixing CSS, HTML orJavaScript. For these scenarios, pbs comes with a handy feature: –watch.This argument will tell pbs to run update_project automatically whentemplate.html, tutorial.html or long_description.md are modified in thefile system. As simple as that.You can run it like this:.. code:: bash       pbs update_project --watchAnd the output will be similar to this:.. figure:: https://i.imgur.com/4YuXk1U.gif   :alt: GIF of pbs in action   GIF of pbs in action**NOTE**: this also works with bundle.js files :smile: Thus, you canhave webpack transpiling automatically your code, and pbs will updateautomatically your project with the new code.Updating tasks redundancy from a project----------------------------------------If you need it, you can update the redundancy of a task using its ID orall the tasks skipping the ID. For example, to update the redundancy ofone task to 5:.. code:: bash       pbs update-task-redundancy --task-id 34234 --redundancy 5To update all of them:.. code:: bash       pbs update-task-redundancy --redundancy 5**Note**: without the –redundancy argument it will revert the redundancyto the default value: 30.This last command will confirm that you want to update all the tasks.If you want to see all the available options, please check the **–help**command:.. code:: bash       pbs update-task-redundancy --helpDeleting tasks from a project-----------------------------If you need it, you can delete all the tasks from your project, or onlyone using its task.id. For deleting all the tasks, all you’ve to do isrun the following command:.. code:: bash       pbs delete_tasksThis command will confirm that you want to delete all the tasks andassociated task_runs.If you want to see all the available options, please check the **–help**command:.. code:: bash       pbs delete_tasks --helpAdding helping materials to a project-------------------------------------Adding helping materials is very simple. You can have your materials inthree formats:-  JSON-  Excel (xlsx from 2010. It imports the first sheet)-  CSVTherefore, adding helping materials to your project is as simple as thiscommand:.. code:: bash       pbs add_helpingmaterials       --helping-materials-lfile file.xlsx --helping-type xlsxIf you want to see all the available options, please check the **–help**command:**NOTE**: By default PYBOSSA servers use a rate limit for avoiding abuseof the API. For this reason, you can only do usually 300 requests perevery 15 minutes. If you are going to add more than 300 tasks, pbs willdetect it and warn you, auto-enabling the throttling for you to respectthe limits.*NOTE*: PYBOSSA helping materials allows you to upload media files likevideos, images, or sounds to support your project tutorials. The commandline pbs will check for a column in your file with the name *file_path*so it can upload it first into the server. Please, be sure that the file(or files) path is reachable from the helping materials file... code:: bash       pbs add_helpingmaterials --helpRunning the Tests-----------------To run the test suite for pbs, first install`note &lt;https://nose.readthedocs.io/en/latest/&gt;`__:.. code:: bash   apt-get install python-noseTo run all tests, execute the following from the pbs project directory:.. code:: bash   nosetests testDocumentation=============You have more documentation, with real examples athttp://docs.pybossa.com.Check the`tutorial &lt;http://docs.pybossa.com/en/latest/user/tutorial.html&gt;`__ asit uses **pbs**, and also its`pbs &lt;http://docs.pybossa.com/en/latest/user/pbs.html&gt;`__ section in thesite.Copyright / License===================Copyright (C) 2017 `Scifabric LTD &lt;http://scifabric.com&gt;`__.License: see LICENSE file... |Travis CI| image:: https://travis-ci.org/Scifabric/pbs.svg?branch=master   :target: https://travis-ci.org/#!/Scifabric/pbs.. |Code Health| image:: https://landscape.io/github/Scifabric/pbs/master/landscape.svg?style=flat   :target: https://landscape.io/github/Scifabric/pbs/master.. |Coverage Status| image:: https://img.shields.io/coveralls/Scifabric/pbs.svg   :target: https://coveralls.io/r/Scifabric/pbs?branch=master.. |Downloads| image:: https://img.shields.io/pypi/dm/pybossa-pbs.svg   :target: https://pypi.python.org/pypi/pybossa-pbs/.. |Version| image:: https://img.shields.io/pypi/v/pybossa-pbs.svg   :target: https://pypi.python.org/pypi/pybossa-pbs/</longdescription>
</pkgmetadata>