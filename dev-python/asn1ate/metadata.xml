<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>asn1ate -- ASN.1 translation library.Copyright 2013-2017 Schneider Electric Buildings ABIntroduction------------``asn1ate`` is a Python library for translating ASN.1 into other forms.It is intended for code generation from formal ASN.1 definitions, and acode generator for ``pyasn1`` is included.``asn1ate`` is released under a 3-clause BSD license. For details, seeLICENSE.txt.Caveat------This is very much an alpha-quality prototype. Things that need doing:* Regression test suite* HACK/TODO/BUGs need to be fixed* ASN.1 grammar is very incomplete in some places. Known issues:  - Constraint syntax is currently limited to simple value range constraints (ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12.asn, line 53)  - Reference syntax is not accepted at all (ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12.asn, line 74)* Improve parser error handling/reporting* Allow for semantic analysis, e.g. validity check, warnings for problematic  constructs, etc.Usage-----The immediate use of ``asn1ate`` is to generate ``pyasn1`` definitions fromASN.1 definitions. The command to do this is::  $ python .../asn1ate/pyasn1gen.py source.asn1It will print the ``pyasn1`` equivalent of ``source.asn1`` to stdout.But ``asn1ate`` is also designed to be usable as a library, to allow reuse ofthe ASN.1 parser for custom code generation.Caveat #2---------My understanding of ASN.1 syntax and semantics is limited. As I learn anddiscover more, the design *will* change. I will always prioritize a better modelbefore API stability for the foreseeable future.So if you're using ``asn1ate`` as a library for custom codegen, please be awarethat every release will likely break something for you.The in-tree ``pyasn1`` code generator will be kept up-to-date, of course, andmay serve as an example of different codegen tasks,Dependencies------------The only third-party dependency is ``pyparsing``.Although ``asn1ate`` was initially developed on Python 3.2, it has been testedwith Python 2.7 and should port to older Python versions easily. Latest releasetested with:* Python 3.6.3* Python 2.7.14Design notes------------The ``asn1ate`` package is designed along the same lines as a compiler with adriver, a parser, a semantic model and a convention for code generators.* ``parser.py`` -- a tokenizing parser for ASN.1 per X.680. It currently  recognizes a naive sub-set of X.680* ``sema.py`` -- a semantic ASN.1 object model, which can be constructed from  the AST generated by ``parser.py``* ``support/pygen.py`` -- a support library for generating Python code.* ``pyasn1gen.py`` -- a code generator to transform a semantic model into  ``pyasn1`` syntax. This can be used as a script in which case it will dump  output to stdout.The ASN.1 parser is very ad-hoc, I've experimented with the grammar until Ifound something that accepted our proprietary ASN.1 definition. It's based on``pyparsing`` but sets up parse actions to build an annotated AST. Every node ofinterest is annotated with a string denoting its type, e.g. ``Identifier``,``TypeAssignment``, etc. I've tried to stay with token types as named in X.680,but added custom ones or suppressed others, as necessary to get the AST in auseful shape.Annotated tokens are represented by a simple class containing the type name anda list of children (called ``elements``) which may be annotated tokens, lists orsimple values. This gives a very discoverable tree structure, but there areprobably cleaner AST representations we could use. Patches welcome.``asn1ate.sema`` is an object model that represents ASN.1 constructs. Itdescribes everything from type assignments to default values and tags, but stillonly the parts of ASN.1 we happen to use here. Most of the logic revolves aroundtransforming the AST produced by ``asn1ate.parser`` into a more semantic modelwith proper Python objects.Codegen is designed to be extensible. In-house we have a set of code generatorsto build an entire protocol stack based on an ASN.1 source, but ``asn1ate`` onlyincludes the generally useful one, ``asn1ate.pyasn1gen``.The most notable members of ``asn1ate.support`` are probably the``PythonWriter`` and ``PythonFragment`` classes, which simplify generation ofcorrectly indented Python code.</longdescription>
</pkgmetadata>