<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction============This small python library provides a few tools to handle `SemVer`_ in Python.It follows strictly the 2.0.0 version of the SemVer scheme... image:: https://github.com/rbarrois/python-semanticversion/actions/workflows/test.yml/badge.svg    :target: https://github.com/rbarrois/python-semanticversion/actions/workflows/test.yml.. image:: https://img.shields.io/pypi/v/semantic_version.svg    :target: https://python-semanticversion.readthedocs.io/en/latest/changelog.html    :alt: Latest Version.. image:: https://img.shields.io/pypi/pyversions/semantic_version.svg    :target: https://pypi.python.org/pypi/semantic_version/    :alt: Supported Python versions.. image:: https://img.shields.io/pypi/wheel/semantic_version.svg    :target: https://pypi.python.org/pypi/semantic_version/    :alt: Wheel status.. image:: https://img.shields.io/pypi/l/semantic_version.svg    :target: https://pypi.python.org/pypi/semantic_version/    :alt: LicenseLinks------ Package on `PyPI`_: https://pypi.org/project/semantic-version/- Doc on `ReadTheDocs &lt;http://readthedocs.org/&gt;`_: https://python-semanticversion.readthedocs.io/- Source on `GitHub &lt;http://github.com/&gt;`_: http://github.com/rbarrois/python-semanticversion/- Build on Github Actions: https://github.com/rbarrois/python-semanticversion/actions- Semantic Version specification: `SemVer`_Getting started===============Install the package from `PyPI`_, using pip:.. code-block:: sh    pip install semantic-versionOr from GitHub:.. code-block:: sh    $ git clone git://github.com/rbarrois/python-semanticversion.gitImport it in your code:.. code-block:: python    import semantic_versionThis module provides classes to handle semantic versions:- ``Version`` represents a version number (``0.1.1-alpha+build.2012-05-15``)- ``BaseSpec``-derived classes represent requirement specifications (``&gt;=0.1.1,&lt;0.3.0``):  - ``SimpleSpec`` describes a natural description syntax  - ``NpmSpec`` is used for NPM-style range descriptions.Versions--------Defining a ``Version`` is quite simple:.. code-block:: pycon    &gt;&gt;&gt; import semantic_version    &gt;&gt;&gt; v = semantic_version.Version('0.1.1')    &gt;&gt;&gt; v.major    0    &gt;&gt;&gt; v.minor    1    &gt;&gt;&gt; v.patch    1    &gt;&gt;&gt; v.prerelease    []    &gt;&gt;&gt; v.build    []    &gt;&gt;&gt; list(v)    [0, 1, 1, [], []]If the provided version string is invalid, a ``ValueError`` will be raised:.. code-block:: pycon    &gt;&gt;&gt; semantic_version.Version('0.1')    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;      File &quot;/Users/rbarrois/dev/semantic_version/src/semantic_version/base.py&quot;, line 64, in __init__        major, minor, patch, prerelease, build = self.parse(version_string, partial)      File &quot;/Users/rbarrois/dev/semantic_version/src/semantic_version/base.py&quot;, line 86, in parse        raise ValueError('Invalid version string: %r' % version_string)    ValueError: Invalid version string: '0.1'One may also create a ``Version`` with named components:.. code-block:: pycon    &gt;&gt;&gt; semantic_version.Version(major=0, minor=1, patch=2)    Version('0.1.2')In that case, ``major``, ``minor`` and ``patch`` are mandatory, and must be integers.``prerelease`` and ``build``, if provided, must be tuples of strings:.. code-block:: pycon    &gt;&gt;&gt; semantic_version.Version(major=0, minor=1, patch=2, prerelease=('alpha', '2'))    Version('0.1.2-alpha.2')Some user-supplied input might not match the semantic version scheme.For such cases, the ``Version.coerce`` method will try to convert anyversion-like string into a valid semver version:.. code-block:: pycon    &gt;&gt;&gt; Version.coerce('0')    Version('0.0.0')    &gt;&gt;&gt; Version.coerce('0.1.2.3.4')    Version('0.1.2+3.4')    &gt;&gt;&gt; Version.coerce('0.1.2a3')    Version('0.1.2-a3')Working with versions&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;Obviously, versions can be compared:.. code-block:: pycon    &gt;&gt;&gt; semantic_version.Version('0.1.1') &lt; semantic_version.Version('0.1.2')    True    &gt;&gt;&gt; semantic_version.Version('0.1.1') &gt; semantic_version.Version('0.1.1-alpha')    True    &gt;&gt;&gt; semantic_version.Version('0.1.1') &lt;= semantic_version.Version('0.1.1-alpha')    FalseYou can also get a new version that represents a bump in one of the version levels:.. code-block:: pycon    &gt;&gt;&gt; v = semantic_version.Version('0.1.1+build')    &gt;&gt;&gt; new_v = v.next_major()    &gt;&gt;&gt; str(new_v)    '1.0.0'    &gt;&gt;&gt; v = semantic_version.Version('1.1.1+build')    &gt;&gt;&gt; new_v = v.next_minor()    &gt;&gt;&gt; str(new_v)    '1.2.0'    &gt;&gt;&gt; v = semantic_version.Version('1.1.1+build')    &gt;&gt;&gt; new_v = v.next_patch()    &gt;&gt;&gt; str(new_v)    '1.1.2'Requirement specification-------------------------python-semanticversion provides a couple of ways to describe a range of acceptedversions:- The ``SimpleSpec`` class provides a simple, easily understood scheme --  somewhat inspired from PyPI range notations;- The ``NpmSpec`` class supports the whole NPM range specification scheme:  .. code-block:: pycon      &gt;&gt;&gt; Version('0.1.2') in NpmSpec('0.1.0-alpha.2 .. 0.2.4')      True      &gt;&gt;&gt; Version('0.1.2') in NpmSpec('&gt;=0.1.1 &lt;0.1.3 || 2.x')      True      &gt;&gt;&gt; Version('2.3.4') in NpmSpec('&gt;=0.1.1 &lt;0.1.3 || 2.x')      TrueThe ``SimpleSpec`` scheme&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;Basic usage is simply a comparator and a base version:.. code-block:: pycon    &gt;&gt;&gt; s = SimpleSpec('&gt;=0.1.1')  # At least 0.1.1    &gt;&gt;&gt; s.match(Version('0.1.1'))    True    &gt;&gt;&gt; s.match(Version('0.1.1-alpha1'))  # pre-release doesn't satisfy version spec    False    &gt;&gt;&gt; s.match(Version('0.1.0'))    FalseCombining specifications can be expressed as follows:  .. code-block:: pycon      &gt;&gt;&gt; SimpleSpec('&gt;=0.1.1,&lt;0.3.0')Simpler test syntax is also available using the ``in`` keyword:.. code-block:: pycon    &gt;&gt;&gt; s = SimpleSpec('==0.1.1')    &gt;&gt;&gt; Version('0.1.1+git7ccc72') in s  # build variants are equivalent to full versions    True    &gt;&gt;&gt; Version('0.1.1-alpha1') in s     # pre-release variants don't match the full version.    False    &gt;&gt;&gt; Version('0.1.2') in s    FalseRefer to the full documentation athttps://python-semanticversion.readthedocs.io/en/latest/ for more details on the``SimpleSpec`` scheme.Using a specification&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;The ``SimpleSpec.filter`` method filters an iterable of ``Version``:.. code-block:: pycon    &gt;&gt;&gt; s = SimpleSpec('&gt;=0.1.0,&lt;0.4.0')    &gt;&gt;&gt; versions = (Version('0.%d.0' % i) for i in range(6))    &gt;&gt;&gt; for v in s.filter(versions):    ...     print v    0.1.0    0.2.0    0.3.0It is also possible to select the 'best' version from such iterables:.. code-block:: pycon    &gt;&gt;&gt; s = SimpleSpec('&gt;=0.1.0,&lt;0.4.0')    &gt;&gt;&gt; versions = (Version('0.%d.0' % i) for i in range(6))    &gt;&gt;&gt; s.select(versions)    Version('0.3.0')Contributing============In order to contribute to the source code:- Open an issue on `GitHub`_: https://github.com/rbarrois/python-semanticversion/issues- Fork the `repository &lt;https://github.com/rbarrois/python-semanticversion&gt;`_  and submit a pull request on `GitHub`_- Or send me a patch (mailto:raphael.barrois+semver@polytechnique.org)When submitting patches or pull requests, you should respect the following rules:- Coding conventions are based on :pep:`8`- The whole test suite must pass after adding the changes- The test coverage for a new feature must be 100%- New features and methods should be documented in the ``reference`` section  and included in the ``changelog``- Include your name in the ``contributors`` section.. note:: All files should contain the following header::          # -*- encoding: utf-8 -*-          # Copyright (c) The python-semanticversion project.. _SemVer: http://semver.org/.. _PyPI: http://pypi.python.org/</longdescription>
</pkgmetadata>