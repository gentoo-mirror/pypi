<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-python3-ldap===================**django-python3-ldap** provides a Django LDAP user authentication backend. Python 3.6+ is required.Features--------- Authenticate users with an LDAP server.- Sync LDAP users with a local Django database.- Supports custom Django user models.Installation------------1. Install using ``pip install django-python3-ldap``.2. Add ``'django_python3_ldap'`` to your ``INSTALLED_APPS`` setting.3. Set your ``AUTHENTICATION_BACKENDS`` setting to ``(&quot;django_python3_ldap.auth.LDAPBackend&quot;,)``4. Configure the settings for your LDAP server(s) (see Available settings, below).5. Optionally, run ``./manage.py ldap_sync_users`` (or ``./manage.py ldap_sync_users &lt;list of user lookups&gt;``) to perform an initial sync of LDAP users.6. Optionally, run ``./manage.py ldap_promote &lt;username&gt;`` to grant superuser admin access to a given user.Available settings------------------**Note**: The settings below show their default values. You only need to add settings to your ``settings.py`` file that you intend to override... code:: python    # The URL of the LDAP server(s).  List multiple servers for high availability ServerPool connection.    LDAP_AUTH_URL = [&quot;ldap://localhost:389&quot;]    # Initiate TLS on connection.    LDAP_AUTH_USE_TLS = False    # Specify which TLS version to use (Python 3.10 requires TLSv1 or higher)    import ssl    LDAP_AUTH_TLS_VERSION = ssl.PROTOCOL_TLSv1_2    # The LDAP search base for looking up users.    LDAP_AUTH_SEARCH_BASE = &quot;ou=people,dc=example,dc=com&quot;    # The LDAP class that represents a user.    LDAP_AUTH_OBJECT_CLASS = &quot;inetOrgPerson&quot;    # User model fields mapped to the LDAP    # attributes that represent them.    LDAP_AUTH_USER_FIELDS = {        &quot;username&quot;: &quot;uid&quot;,        &quot;first_name&quot;: &quot;givenName&quot;,        &quot;last_name&quot;: &quot;sn&quot;,        &quot;email&quot;: &quot;mail&quot;,    }    # A tuple of django model fields used to uniquely identify a user.    LDAP_AUTH_USER_LOOKUP_FIELDS = (&quot;username&quot;,)    # Path to a callable that takes a dict of {model_field_name: value},    # returning a dict of clean model data.    # Use this to customize how data loaded from LDAP is saved to the User model.    LDAP_AUTH_CLEAN_USER_DATA = &quot;django_python3_ldap.utils.clean_user_data&quot;    # Path to a callable that takes a user model, a dict of {ldap_field_name: [value]}    # a LDAP connection object (to allow further lookups), and saves any additional    # user relationships based on the LDAP data.    # Use this to customize how data loaded from LDAP is saved to User model relations.    # For customizing non-related User model fields, use LDAP_AUTH_CLEAN_USER_DATA.    LDAP_AUTH_SYNC_USER_RELATIONS = &quot;django_python3_ldap.utils.sync_user_relations&quot;    # Path to a callable that takes a dict of {ldap_field_name: value},    # returning a list of [ldap_search_filter]. The search filters will then be AND'd    # together when creating the final search filter.    LDAP_AUTH_FORMAT_SEARCH_FILTERS = &quot;django_python3_ldap.utils.format_search_filters&quot;    # Path to a callable that takes a dict of {model_field_name: value}, and returns    # a string of the username to bind to the LDAP server.    # Use this to support different types of LDAP server.    LDAP_AUTH_FORMAT_USERNAME = &quot;django_python3_ldap.utils.format_username_openldap&quot;    # Sets the login domain for Active Directory users.    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = None    # The LDAP username and password of a user for querying the LDAP database for user    # details. If None, then the authenticated user will be used for querying, and    # the `ldap_sync_users`, `ldap_clean_users` commands will perform an anonymous query.    LDAP_AUTH_CONNECTION_USERNAME = None    LDAP_AUTH_CONNECTION_PASSWORD = None    # Set connection/receive timeouts (in seconds) on the underlying `ldap3` library.    LDAP_AUTH_CONNECT_TIMEOUT = None    LDAP_AUTH_RECEIVE_TIMEOUT = NoneMicrosoft Active Directory support----------------------------------django-python3-ldap is configured by default to support login via OpenLDAP. To connect toa Microsoft Active Directory, you need to modify your settings file.For simple usernames (e.g. &quot;username&quot;):.. code:: python    LDAP_AUTH_FORMAT_USERNAME = &quot;django_python3_ldap.utils.format_username_active_directory&quot;For down-level login name formats (e.g. &quot;DOMAIN\\username&quot;):.. code:: python    LDAP_AUTH_FORMAT_USERNAME = &quot;django_python3_ldap.utils.format_username_active_directory&quot;    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = &quot;DOMAIN&quot;For user-principal-name formats (e.g. &quot;user@domain.com&quot;):.. code:: python    LDAP_AUTH_FORMAT_USERNAME = &quot;django_python3_ldap.utils.format_username_active_directory_principal&quot;    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = &quot;domain.com&quot;Depending on how your Active Directory server is configured, the following additional settings may match your serverbetter than the defaults used by django-python3-ldap:.. code:: python    LDAP_AUTH_USER_FIELDS = {        &quot;username&quot;: &quot;sAMAccountName&quot;,        &quot;first_name&quot;: &quot;givenName&quot;,        &quot;last_name&quot;: &quot;sn&quot;,        &quot;email&quot;: &quot;mail&quot;,    }    LDAP_AUTH_OBJECT_CLASS = &quot;user&quot;Sync User Relations-------------------As part of the user authentication process, django-python3-ldap calls a function specified by theLDAP_AUTH_SYNC_USER_RELATIONS configuraton item.  This function can be used for making additionalupdates to the user database (for example updaing the groups the user is a member of), or gettingfurther information from the LDAP server.The signature of the called function is:-.. code:: python    def sync_user_relations(user, ldap_attributes, *, connection=None, dn=None):The parameters are:-- ``user`` - a Django user model object- ``ldap_attributes`` - a dict of LDAP attributes- ``connection`` - the LDAP connection object (optional keyword only parameter)- ``dn`` - the DN (Distinguished Name) of the LDAP matched user (optional keyword only parameter)Clean User----------When a LDAP user is removed from server it could be interresting to deactive or delete its local Django accountto prevent unauthorized access.To do so run:    ``./manage.py ldap_clean_users`` (or ``./manage.py ldap_clean_users --purge``).It will deactivate all local users non declared on LDAP server. If ``--purge`` is specified, all local users will be deleted.Can't get authentication to work?---------------------------------LDAP is a very complicated protocol. Enable logging (see below), and see what error messages the LDAP connection is throwing.Logging-------Print information about failed logins to your console by adding the following to your ``settings.py`` file... code:: python    LOGGING = {        &quot;version&quot;: 1,        &quot;disable_existing_loggers&quot;: False,        &quot;handlers&quot;: {            &quot;console&quot;: {                &quot;class&quot;: &quot;logging.StreamHandler&quot;,            },        },        &quot;loggers&quot;: {            &quot;django_python3_ldap&quot;: {                &quot;handlers&quot;: [&quot;console&quot;],                &quot;level&quot;: &quot;INFO&quot;,            },        },    }Custom user filters-------------------By default, any users within ``LDAP_AUTH_SEARCH_BASE`` and of the correct ``LDAP_AUTH_OBJECT_CLASS``will be considered a valid user. You can apply further filtering by setting a custom ``LDAP_AUTH_FORMAT_SEARCH_FILTERS``callable... code:: python    # settings.py    LDAP_AUTH_FORMAT_SEARCH_FILTERS = &quot;path.to.your.custom_format_search_filters&quot;    # path/to/your/module.py    from django_python3_ldap.utils import format_search_filters    def custom_format_search_filters(ldap_fields):        # Add in simple filters.        ldap_fields[&quot;memberOf&quot;] = &quot;foo&quot;        # Call the base format callable.        search_filters = format_search_filters(ldap_fields)        # Advanced: apply custom LDAP filter logic.        search_filters.append(&quot;(|(memberOf=groupA)(memberOf=GroupB))&quot;)        # All done!        return search_filtersThe returned list of search filters will be AND'd together to make the final search filter.How it works------------When a user attempts to authenticate, a connection is made to one of the listed LDAPservers, and the application attempts to bind using the provided username and password.If the bind attempt is successful, the user details are loaded from the LDAP serverand saved in a local Django ``User`` model. The local model is only created once,and the details will be kept updated with the LDAP record details on every login.To perform a full sync of all LDAP users to the local database, run ``./manage.py ldap_sync_users``.This is not required, as the authentication backend will create users on demand. Syncing users hasthe advantage of allowing you to assign permissions and groups to the existing users using the Djangoadmin interface.Running ``ldap_sync_users`` as a background cron task is another optional way tokeep all users in sync on a regular basis.Support and announcements-------------------------Downloads and bug tracking can be found at the `main projectwebsite &lt;http://github.com/etianen/django-python3-ldap&gt;`_.More information----------------The django-python3-ldap project was developed by Dave Hall. You can get the codefrom the `django-python3-ldap project site &lt;http://github.com/etianen/django-python3-ldap&gt;`_.Dave Hall is a freelance web developer, based in Cambridge, UK. You can usuallyfind him on the Internet in a number of different places:-  `Website &lt;http://www.etianen.com/&gt;`_-  `Twitter &lt;http://twitter.com/etianen&gt;`_-  `Google Profile &lt;http://www.google.com/profiles/david.etianen&gt;`_</longdescription>
</pkgmetadata>