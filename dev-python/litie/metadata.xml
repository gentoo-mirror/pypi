<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Lit-IE&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/xusenlinzy/lit-ner&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/xusenlinzy/lit-ner&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/python-3.8+-aff.svg&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/pytorch-%3E=1.12-red?logo=pytorch&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/xusenlinzy/lit-ner&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/xusenlinzy/lit-ner&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/xusenlinzy/lit-ner&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/xusenlinzy/lit-ner?color=9cc&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/xusenlinzy/lit-ner&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/xusenlinzy/lit-ner?color=ccf&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/xusenlinzy/lit-ner&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/langurage-py-brightgreen?style=flat&amp;color=blue&quot;&gt;&lt;/a&gt;&lt;/p&gt;此项目为开源**文本分类、实体抽取、关系抽取和事件抽取**模型的训练和推理提供统一的框架，具有以下特性+ ✨ 支持多种开源文本分类、实体抽取、关系抽取和事件抽取模型+ 👑 支持百度 [UIE](https://github.com/PaddlePaddle/PaddleNLP) 模型的训练和推理+ 🚀 统一的训练和推理框架+ 🎯 集成对抗训练方法，简便易用## 📢 News + 【2023.6.21】 增加文本分类代码示例+ 【2023.6.19】 增加 `gplinker` 事件抽取模型和代码示例+ 【2023.6.15】 增加对抗训练功能和示例、增加 `onerel` 关系抽取模型+ 【2023.6.14】 新增 `UIE` 模型代码示例---## 📦 安装### pip 安装```shellpip install --upgrade litie```### 源码安装```shellgit clone https://github.com/xusenlinzy/lit-iepip install -r requirements.txt```## 🐼 模型### 实体抽取| 模型                                               | 论文                                                                                                                                                                            | 备注                                                                                                                                            ||--------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|| [softmax](litie/nn/ner/crf.py)                   |                                                                                                                                                                               | 全连接层序列标注并使用 `BIO` 解码                                                                                                                          || [crf](litie/nn/ner/crf.py)                       | [Conditional Random Fields: Probabilistic Models for Segmenting and Labeling Sequence Data](https://repository.upenn.edu/cgi/viewcontent.cgi?article=1162&amp;context=cis_papers) | 全连接层+条件随机场，并使用 `BIO` 解码                                                                                                                       || [cascade-crf](litie/nn/ner/crf.py)               |                                                                                                                                                                               | 先预测实体再预测实体类型                                                                                                                                  || [span](litie/nn/ner/span.py)                     |                                                                                                                                                                               | 使用两个指针网络预测实体起始位置                                                                                                                              || [global-pointer](litie/nn/ner/global_pointer.py) |                                                                                                                                                                               | [GlobalPointer：用统一的方式处理嵌套和非嵌套NER](https://spaces.ac.cn/archives/8373)、[Efficient GlobalPointer：少点参数，多点效果](https://spaces.ac.cn/archives/8877) || [mrc](litie/nn/ner/mrc.py)                       | [A Unified MRC Framework for Named Entity Recognition.](https://aclanthology.org/2020.acl-main.519.pdf)                                                                       | 将实体识别任务转换为阅读理解问题，输入为实体类型模板+句子，预测对应实体的起始位置                                                                                                     || [tplinker](litie/nn/ner/tplinker.py)             | [TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking.](https://aclanthology.org/2020.coling-main.138.pdf)                            | 将实体识别任务转换为表格填充问题                                                                                                                              || [lear](litie/nn/ner/lear.py)                     | [Enhanced Language Representation with Label Knowledge for Span Extraction.](https://aclanthology.org/2021.emnlp-main.379.pdf)                                                | 改进 `MRC` 方法效率问题，采用标签融合机制                                                                                                                      || [w2ner](litie/nn/ner/w2ner.py)                   | [Unified Named Entity Recognition as Word-Word Relation Classification.](https://arxiv.org/pdf/2112.10070.pdf)                                                                | 统一解决嵌套实体、不连续实体的抽取问题                                                                                                                           || [cnn](litie/nn/ner/cnn.py)                       | [An Embarrassingly Easy but Strong Baseline for Nested Named Entity Recognition.](https://arxiv.org/abs/2208.04534)                                                           | 改进 `W2NER` 方法，采用卷积网络提取实体内部token之间的关系                                                                                                          |### 关系抽取| 模型                                  | 论文                                                                                                                                                 | 备注                                                                  ||-------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|| [casrel](litie/nn/re/casrel.py)     | [A Novel Cascade Binary Tagging Framework for Relational Triple Extraction.](https://aclanthology.org/2020.acl-main.136.pdf)                       | 两阶段关系抽取，先抽取出句子中的主语，再通过指针网络抽取出主语对应的关系和宾语                             || [tplinker](litie/nn/re/tplinker.py) | [TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking.](https://aclanthology.org/2020.coling-main.138.pdf) | 将关系抽取问题转换为主语-宾语的首尾连接问题                                              || [spn](litie/nn/re/spn.py)           | [Joint Entity and Relation Extraction with Set Prediction Networks.](http://xxx.itp.ac.cn/pdf/2011.01675v2)                                        | 将关系抽取问题转为为三元组的集合预测问题，采用 `Encoder-Decoder` 框架                        || [prgc](litie/nn/re/prgc.py)         | [PRGC: Potential Relation and Global Correspondence Based Joint Relational Triple Extraction.](https://aclanthology.org/2021.acl-long.486.pdf)     | 先抽取句子的潜在关系类型，然后对于给定关系抽取出对应的主语-宾语对，最后通过全局对齐模块过滤                      || [pfn](litie/nn/re/pfn.py)           | [A Partition Filter Network for Joint Entity and Relation Extraction.](https://aclanthology.org/2021.emnlp-main.17.pdf)                            | 采用类似  `LSTM`  的分区过滤机制，将隐藏层信息分成实体识别、关系识别和共享三部分，对与不同的任务利用不同的信息        || [grte](litie/nn/re/grte.py)         | [A Novel Global Feature-Oriented Relational Triple Extraction Model based on Table Filling.](https://aclanthology.org/2021.emnlp-main.208.pdf)     | 将关系抽取问题转换为单词对的分类问题，基于全局特征抽取模块循环优化单词对的向量表示                           || [gplinker](litie/nn/re/gplinker.py) |                                                                                                                                                    | [GPLinker：基于GlobalPointer的实体关系联合抽取](https://kexue.fm/archives/8888) |## 📚 数据### 实体抽取将数据集处理成以下 `json` 格式```json{  &quot;text&quot;: &quot;结果上周六他们主场0：3惨败给了中游球队瓦拉多利德，近7个多月以来西甲首次输球。&quot;,   &quot;entities&quot;: [    {      &quot;id&quot;: 0,       &quot;entity&quot;: &quot;瓦拉多利德&quot;,       &quot;start_offset&quot;: 20,       &quot;end_offset&quot;: 25,       &quot;label&quot;: &quot;organization&quot;    },     {      &quot;id&quot;: 1,       &quot;entity&quot;: &quot;西甲&quot;,       &quot;start_offset&quot;: 33,       &quot;end_offset&quot;: 35,       &quot;label&quot;: &quot;organization&quot;    }  ]}```字段含义：+ `text`: 文本内容+ `entities`: 该文本所包含的所有实体    + `id`: 实体 `id`    + `entity`: 实体名称      + `start_offset`: 实体开始位置    + `end_offset`: 实体结束位置的下一位    + `label`: 实体类型### 关系抽取将数据集处理成以下 `json` 格式```json{  &quot;text&quot;: &quot;查尔斯·阿兰基斯（Charles Aránguiz），1989年4月17日出生于智利圣地亚哥，智利职业足球运动员，司职中场，效力于德国足球甲级联赛勒沃库森足球俱乐部&quot;,   &quot;spo_list&quot;: [    {      &quot;predicate&quot;: &quot;出生地&quot;,      &quot;object&quot;: &quot;圣地亚哥&quot;,       &quot;subject&quot;: &quot;查尔斯·阿兰基斯&quot;    },     {      &quot;predicate&quot;: &quot;出生日期&quot;,      &quot;object&quot;: &quot;1989年4月17日&quot;,      &quot;subject&quot;: &quot;查尔斯·阿兰基斯&quot;    }  ]}```字段含义：+ `text`: 文本内容+ `spo_list`: 该文本所包含的所有关系三元组    + `subject`: 主体名称    + `object`: 客体名称      + `predicate`: 主体和客体之间的关系### 事件抽取将数据集处理成以下 `json` 格式```json{  &quot;text&quot;: &quot;油服巨头哈里伯顿裁员650人 因美国油气开采活动放缓&quot;,  &quot;id&quot;: &quot;f2d936214dc2cb1b873a75ee29a30ec9&quot;,  &quot;event_list&quot;: [    {      &quot;event_type&quot;: &quot;组织关系-裁员&quot;,      &quot;trigger&quot;: &quot;裁员&quot;,      &quot;trigger_start_index&quot;: 8,      &quot;arguments&quot;: [        {          &quot;argument_start_index&quot;: 0,          &quot;role&quot;: &quot;裁员方&quot;,          &quot;argument&quot;: &quot;油服巨头哈里伯顿&quot;        },        {          &quot;argument_start_index&quot;: 10,          &quot;role&quot;: &quot;裁员人数&quot;,          &quot;argument&quot;: &quot;650人&quot;        }      ],      &quot;class&quot;: &quot;组织关系&quot;    }  ]}```字段含义：+ `text`: 文本内容+ `event_list`: 该文本所包含的所有事件    + `event_type`: 事件类型    + `trigger`: 触发词      + `trigger_start_index`: 触发词开始位置    + `arguments`: 论元          + `role`: 论元角色              + `argument`: 论元名称              + `argument_start_index`: 论元名称开始位置  ## 🚀 模型训练### 实体抽取```pythonimport osfrom litie.arguments import (    DataTrainingArguments,    TrainingArguments,)from litie.models import AutoNerModelos.environ['TRANSFORMERS_NO_ADVISORY_WARNINGS'] = 'true'training_args = TrainingArguments(    other_learning_rate=2e-3,    num_train_epochs=20,    per_device_train_batch_size=32,    per_device_eval_batch_size=32,    output_dir=&quot;outputs/crf&quot;,)data_args = DataTrainingArguments(    dataset_name=&quot;datasets/cmeee&quot;,    train_file=&quot;train.json&quot;,    validation_file=&quot;dev.json&quot;,    preprocessing_num_workers=16,)# 1. create modelmodel = AutoNerModel(    task_model_name=&quot;crf&quot;,    model_name_or_path=&quot;hfl/chinese-roberta-wwm-ext&quot;,    training_args=training_args,)# 2. finetune modelmodel.finetune(data_args)```训练脚本详见 [named_entity_recognition](./examples/named_entity_recognition)### 关系抽取```pythonimport osfrom litie.arguments import (    DataTrainingArguments,    TrainingArguments,)from litie.models import AutoRelationExtractionModelos.environ['TRANSFORMERS_NO_ADVISORY_WARNINGS'] = 'true'training_args = TrainingArguments(    num_train_epochs=20,    per_device_train_batch_size=16,    per_device_eval_batch_size=16,    output_dir=&quot;outputs/gplinker&quot;,)data_args = DataTrainingArguments(    dataset_name=&quot;datasets/duie&quot;,    train_file=&quot;train.json&quot;,    validation_file=&quot;dev.json&quot;,    preprocessing_num_workers=16,)# 1. create modelmodel = AutoRelationExtractionModel(    task_model_name=&quot;gplinker&quot;,    model_name_or_path=&quot;hfl/chinese-roberta-wwm-ext&quot;,    training_args=training_args,)# 2. finetune modelmodel.finetune(data_args, num_sanity_val_steps=0)```训练脚本详见 [relation_extraction](./examples/relation_extraction)### 事件抽取```pythonimport osimport jsonfrom litie.arguments import DataTrainingArguments, TrainingArgumentsfrom litie.models import AutoEventExtractionModelos.environ['TRANSFORMERS_NO_ADVISORY_WARNINGS'] = 'true'schema_path = &quot;datasets/duee/schema.json&quot;labels = []with open(&quot;datasets/duee/schema.json&quot;) as f:    for l in f:        l = json.loads(l)        t = l[&quot;event_type&quot;]        for r in [&quot;触发词&quot;] + [s[&quot;role&quot;] for s in l[&quot;role_list&quot;]]:            labels.append(f&quot;{t}@{r}&quot;)training_args = TrainingArguments(    num_train_epochs=200,    per_device_train_batch_size=32,    per_device_eval_batch_size=32,    output_dir=&quot;outputs/gplinker&quot;,)data_args = DataTrainingArguments(    dataset_name=&quot;datasets/duee&quot;,    train_file=&quot;train.json&quot;,    validation_file=&quot;dev.json&quot;,    preprocessing_num_workers=16,    train_max_length=128,)# 1. create modelmodel = AutoEventExtractionModel(    task_model_name=&quot;gplinker&quot;,    model_name_or_path=&quot;hfl/chinese-roberta-wwm-ext&quot;,    training_args=training_args,)# 2. finetune modelmodel.finetune(    data_args,    labels=labels,    num_sanity_val_steps=0,    monitor=&quot;val_argu_f1&quot;,    check_val_every_n_epoch=20,)```训练脚本详见 [event_extraction](./examples/event_extraction)## 📊 模型推理### 实体抽取```pythonfrom litie.pipelines import NerPipelinetask_model = &quot;crf&quot;model_name_or_path = &quot;path of crf model&quot;pipeline = NerPipeline(task_model, model_name_or_path=model_name_or_path)print(pipeline(&quot;结果上周六他们主场0：3惨败给了中游球队瓦拉多利德，近7个多月以来西甲首次输球。&quot;))```web demo```pythonfrom litie.ui import NerPlaygroundNerPlayground().launch()```### 关系抽取```pythonfrom litie.pipelines import RelationExtractionPipelinetask_model = &quot;gplinker&quot;model_name_or_path = &quot;path of gplinker model&quot;pipeline = RelationExtractionPipeline(task_model, model_name_or_path=model_name_or_path)print(pipeline(&quot;查尔斯·阿兰基斯（Charles Aránguiz），1989年4月17日出生于智利圣地亚哥，智利职业足球运动员，司职中场，效力于德国足球甲级联赛勒沃库森足球俱乐部&quot;))```web demo```pythonfrom litie.ui import RelationExtractionPlaygroundRelationExtractionPlayground().launch()```### 事件抽取```pythonfrom litie.pipelines import EventExtractionPipelinetask_model = &quot;gplinker&quot;model_name_or_path = &quot;path of gplinker model&quot;pipeline = EventExtractionPipeline(task_model, model_name_or_path=model_name_or_path)print(pipeline(&quot;油服巨头哈里伯顿裁员650人 因美国油气开采活动放缓&quot;))```web demo```pythonfrom litie.ui import EventExtractionPlaygroundEventExtractionPlayground().launch()```## 🍭 通用信息抽取+ [UIE(Universal Information Extraction)](https://arxiv.org/pdf/2203.12277.pdf)：Yaojie Lu等人在ACL-2022中提出了通用信息抽取统一框架 `UIE`。+ 该框架实现了实体抽取、关系抽取、事件抽取、情感分析等任务的统一建模，并使得不同任务间具备良好的迁移和泛化能力。+ [PaddleNLP](https://github.com/PaddlePaddle/PaddleNLP)借鉴该论文的方法，基于 `ERNIE 3.0` 知识增强预训练模型，训练并开源了首个中文通用信息抽取模型 `UIE`。+ 该模型可以支持不限定行业领域和抽取目标的关键信息抽取，实现零样本快速冷启动，并具备优秀的小样本微调能力，快速适配特定的抽取目标。### 模型训练模型训练脚本详见 [uie](./examples/uie)### 模型推理&lt;details&gt;&lt;summary&gt;👉 命名实体识别&lt;/summary&gt;```pythonfrom pprint import pprintfrom litie.pipelines import UIEPipeline# 实体识别schema = ['时间', '选手', '赛事名称'] # uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换uie = UIEPipeline(&quot;xusenlin/uie-base&quot;, schema=schema)pprint(uie(&quot;2月8日上午北京冬奥会自由式滑雪女子大跳台决赛中中国选手谷爱凌以188.25分获得金牌！&quot;)) # Better print results using pprint```output: ```json[  {    &quot;时间&quot;: [      {        &quot;end&quot;: 6,        &quot;probability&quot;: 0.98573786,        &quot;start&quot;: 0,        &quot;text&quot;: &quot;2月8日上午&quot;      }    ],    &quot;赛事名称&quot;: [      {        &quot;end&quot;: 23,        &quot;probability&quot;: 0.8503085,        &quot;start&quot;: 6,        &quot;text&quot;: &quot;北京冬奥会自由式滑雪女子大跳台决赛&quot;      }    ],    &quot;选手&quot;: [      {        &quot;end&quot;: 31,        &quot;probability&quot;: 0.8981544,        &quot;start&quot;: 28,        &quot;text&quot;: &quot;谷爱凌&quot;      }    ]  }]```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;👉 实体关系抽取&lt;/summary&gt;```pythonfrom pprint import pprintfrom litie.pipelines import UIEPipeline# 关系抽取schema = {'竞赛名称': ['主办方', '承办方', '已举办次数']}# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换uie = UIEPipeline(&quot;xusenlin/uie-base&quot;, schema=schema)pprint(uie(&quot;2022语言与智能技术竞赛由中国中文信息学会和中国计算机学会联合主办，百度公司、中国中文信息学会评测工作委员会和中国计算机学会自然语言处理专委会承办，已连续举办4届，成为全球最热门的中文NLP赛事之一。&quot;)) # Better print results using pprint```output:```json[  {    &quot;竞赛名称&quot;: [      {        &quot;end&quot;: 13,        &quot;probability&quot;: 0.78253937,        &quot;relations&quot;: {          &quot;主办方&quot;: [            {              &quot;end&quot;: 22,              &quot;probability&quot;: 0.8421704,              &quot;start&quot;: 14,              &quot;text&quot;: &quot;中国中文信息学会&quot;            },            {              &quot;end&quot;: 30,              &quot;probability&quot;: 0.75807965,              &quot;start&quot;: 23,              &quot;text&quot;: &quot;中国计算机学会&quot;            }          ],          &quot;已举办次数&quot;: [            {              &quot;end&quot;: 82,              &quot;probability&quot;: 0.4671307,              &quot;start&quot;: 80,              &quot;text&quot;: &quot;4届&quot;            }          ],          &quot;承办方&quot;: [            {              &quot;end&quot;: 55,              &quot;probability&quot;: 0.700049,              &quot;start&quot;: 40,              &quot;text&quot;: &quot;中国中文信息学会评测工作委员会&quot;            },            {              &quot;end&quot;: 72,              &quot;probability&quot;: 0.61934763,              &quot;start&quot;: 56,              &quot;text&quot;: &quot;中国计算机学会自然语言处理专委会&quot;            },            {              &quot;end&quot;: 39,              &quot;probability&quot;: 0.8292698,              &quot;start&quot;: 35,              &quot;text&quot;: &quot;百度公司&quot;            }          ]        },        &quot;start&quot;: 0,        &quot;text&quot;: &quot;2022语言与智能技术竞赛&quot;      }    ]  }]```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;👉  事件抽取&lt;/summary&gt;```pythonfrom pprint import pprintfrom litie.pipelines import UIEPipeline# 事件抽取schema = {&quot;地震触发词&quot;: [&quot;地震强度&quot;, &quot;时间&quot;, &quot;震中位置&quot;, &quot;震源深度&quot;]}# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换uie = UIEPipeline(&quot;xusenlin/uie-base&quot;, schema=schema)pprint(uie(&quot;中国地震台网正式测定：5月16日06时08分在云南临沧市凤庆县(北纬24.34度，东经99.98度)发生3.5级地震，震源深度10千米。&quot;)) # Better print results using pprint```output:```json[  {    &quot;地震触发词&quot;: [      {        &quot;end&quot;: 58,        &quot;probability&quot;: 0.99774253,        &quot;relations&quot;: {          &quot;地震强度&quot;: [            {              &quot;end&quot;: 56,              &quot;probability&quot;: 0.9980802,              &quot;start&quot;: 52,              &quot;text&quot;: &quot;3.5级&quot;            }          ],          &quot;时间&quot;: [            {              &quot;end&quot;: 22,              &quot;probability&quot;: 0.98533,              &quot;start&quot;: 11,              &quot;text&quot;: &quot;5月16日06时08分&quot;            }          ],          &quot;震中位置&quot;: [            {              &quot;end&quot;: 50,              &quot;probability&quot;: 0.7874015,              &quot;start&quot;: 23,              &quot;text&quot;: &quot;云南临沧市凤庆县(北纬24.34度，东经99.98度)&quot;            }          ],          &quot;震源深度&quot;: [            {              &quot;end&quot;: 67,              &quot;probability&quot;: 0.9937973,              &quot;start&quot;: 63,              &quot;text&quot;: &quot;10千米&quot;            }          ]        },        &quot;start&quot;: 56,        &quot;text&quot;: &quot;地震&quot;      }    ]  }]```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;👉 评论观点抽取&lt;/summary&gt;```pythonfrom pprint import pprintfrom litie.pipelines import UIEPipeline# 评论观点抽取schema = {'评价维度': ['观点词', '情感倾向[正向，负向]']}# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换uie = UIEPipeline(&quot;xusenlin/uie-base&quot;, schema=schema)pprint(uie(&quot;店面干净，很清静，服务员服务热情，性价比很高，发现收银台有排队&quot;)) # Better print results using pprint```output:```json[  {    &quot;评价维度&quot;: [      {        &quot;end&quot;: 20,        &quot;probability&quot;: 0.98170394,        &quot;relations&quot;: {          &quot;情感倾向[正向，负向]&quot;: [            {              &quot;probability&quot;: 0.9966142773628235,              &quot;text&quot;: &quot;正向&quot;            }          ],          &quot;观点词&quot;: [            {              &quot;end&quot;: 22,              &quot;probability&quot;: 0.95739645,              &quot;start&quot;: 21,              &quot;text&quot;: &quot;高&quot;            }          ]        },        &quot;start&quot;: 17,        &quot;text&quot;: &quot;性价比&quot;      },      {        &quot;end&quot;: 2,        &quot;probability&quot;: 0.9696847,        &quot;relations&quot;: {          &quot;情感倾向[正向，负向]&quot;: [            {              &quot;probability&quot;: 0.9982153177261353,              &quot;text&quot;: &quot;正向&quot;            }          ],          &quot;观点词&quot;: [            {              &quot;end&quot;: 4,              &quot;probability&quot;: 0.9945317,              &quot;start&quot;: 2,              &quot;text&quot;: &quot;干净&quot;            }          ]        },        &quot;start&quot;: 0,        &quot;text&quot;: &quot;店面&quot;      }    ]  }]```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;👉 情感分类&lt;/summary&gt;```pythonfrom pprint import pprintfrom litie.pipelines import UIEPipeline# 事件抽取schema = '情感倾向[正向，负向]'# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换uie = UIEPipeline(&quot;xusenlin/uie-base&quot;, schema=schema)pprint(uie(&quot;这个产品用起来真的很流畅，我非常喜欢&quot;)) # Better print results using pprint```output:```json[  {    &quot;情感倾向[正向，负向]&quot;: [      {        &quot;probability&quot;: 0.9990023970603943,        &quot;text&quot;: &quot;正向&quot;      }    ]  }]```&lt;/details&gt;## 📜 License此项目为 `Apache 2.0` 许可证授权，有关详细信息，请参阅 [LICENSE](LICENSE) 文件。</longdescription>
</pkgmetadata>