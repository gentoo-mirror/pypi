<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># planutilsGeneral library for setting up linux-based environments for developing, running, and evaluating planners.## 1. Running the latest Docker releaseThe released Docker image comes with the latest planutils pre-installed. Note that in order torun a number of the planners (all those that are based on singularity), you will needto run the docker with the `--privileged` option.**Run the planutils container**```shdocker run -it --privileged aiplanning/planutils:latest bash```**Active the planutils environment**```shplanutils activate```This means that in order to run the latest release, it is not necessary to clone this repository.## 2. Making your own image with desired solversBelow is an example for creating your own Dockerfile based on the latest release, with pre-installed solvers```shFROM aiplanning/planutils:latest# Install solvers and toolsRUN planutils install -y valRUN planutils install -y planning.domainsRUN planutils install -y popfRUN planutils install -y opticRUN planutils install -y smtplan```## 3. Running planutils from sourceYou can also run the latest unreleased version. For this, clone this repository and run ```shdocker build . -t planutils-dev:latest```## 4. Usage### Example of currently working functionality```$ lama domain.pddl problem.pddlPackage not installed!  Download &amp; install? [Y/n] yAbout to install the following packages: downward (36M), lama (20K)  Proceed? [Y/n] yInstalling downward...INFO:    Downloading shub image 35.88 MiB / 35.88 MiB [=======================================] 100.00% 3.99 MiB/s 8sFinished installing downward (size: 36M)Installing lama...Finished installing lama (size: 20K)Successfully installed lama!Original command: lama  Re-run command? [Y/n] yParsing...$```### Example of upcoming functionality```$ planutils install ipc-2018Installing plannersThis will require 3Gb of storage. Proceed? [Y/n]Fetching all of the planners from IPC-2018 for use on the command line...$ planutils install server-environmentSetting up a webserver to call the installed planners...$ planutils install development-environmentInstalling common dependencies for building planners...Installing common planning libraries...$ planutils install planning-domainsInstalling the command-line utilities...Installing the python library...Fetching default benchmarks...$ planutils setup-evaluation configuration.jsonInstalling Lab...Configuring Lab...Ready!Run eval.py to evaluate$```## 5. Add a new package### Package Configuration1. Create a folder for new pacakeg, the package name will be the used to call the planner later2. Set up the `install`, `run`,  `uninstall`, and manifest file. You can find the template files under packages/TEMPLATE folder### Write Manifest filePlease create a manifest file named `manifest_compact.json` if you want to use predefined templates in the packages/TEMPLATE/SERVICE_TEMPLATE folder. The full `manifest.json` will be generated at the run time. You can overwrite the dafult template by restating the value of json fields. You can also create a `manifest.json` file directly if you don't need the template.**Manifest Example**```json{    &quot;name&quot;: &quot;LAMA-FIRST&quot;,    &quot;description&quot;: &quot;http://fast-downward.org/&quot;,    &quot;install-size&quot;: &quot;20K&quot;,    &quot;dependencies&quot;: [        &quot;downward&quot;    ],    &quot;endpoint&quot;: {        &quot;services&quot;: {            &quot;solve&quot;: {                &quot;args&quot;: [                    {                        &quot;name&quot;: &quot;domain&quot;,                        &quot;type&quot;: &quot;file&quot;,                        &quot;description&quot;: &quot;domain file&quot;                    },                    {                        &quot;name&quot;: &quot;problem&quot;,                        &quot;type&quot;: &quot;file&quot;,                        &quot;description&quot;: &quot;problem file&quot;                    }                ],                &quot;call&quot;: &quot;lama-first {domain} {problem}&quot;,                &quot;return&quot;: {                    &quot;type&quot;: &quot;generic&quot;,                    &quot;files&quot;: &quot;*plan*&quot;                }            }        }    }}```**Define Args**There are four types of Args: `file`, `int`, `string` and,`categorical`. You can add default value for `int`,`string`, and `categorical` arguments```json &quot;args&quot;: [    {        &quot;name&quot;: &quot;domain&quot;,        &quot;type&quot;: &quot;file&quot;,        &quot;description&quot;: &quot;domain file&quot;    },    {        &quot;name&quot;: &quot;number_of_plans&quot;,        &quot;type&quot;: &quot;int&quot;,        &quot;description&quot;: &quot;Number of Plans&quot;,        &quot;default&quot;:3    },    {        &quot;name&quot;: &quot;custom_search_algorithm&quot;,        &quot;type&quot;: &quot;string&quot;,        &quot;description&quot;: &quot;Custom Search Algorithm&quot;,        &quot;default&quot;:&quot;kstar(blind(),k=1)&quot;    },    {        &quot;name&quot;: &quot;search_algorithm&quot;,        &quot;type&quot;: &quot;categorical&quot;,        &quot;description&quot;: &quot;Search Algorithm&quot;,        &quot;choices&quot;:[          {            &quot;display_value&quot;:&quot;Kstar Blind k=1&quot;,            &quot;value&quot;:&quot;kstar(blind(),k=1)&quot;          },          {            &quot;display_value&quot;:&quot;Kstar Blind k=2&quot;,            &quot;value&quot;:&quot;kstar(blind(),k=2)&quot;          }        ],        &quot;default&quot;:&quot;kstar(blind(),k=1)&quot;    }]```**Define Return Types**There are three types of return data: `generic`, `json` and `log`. The `generic` type should be used for all the text based result, the `log` type should be used for planner like Optic and Tfd which didn't generate a proper plan, and the type `json` should used for plan in JSON format.For the value of `files`, you will have to write a [glob](https://docs.python.org/3/library/glob.html) pattern. Planning-as-service backend uses `glob` libary to find and return all the files that matched. ```json&quot;return&quot;: {                    &quot;type&quot;: &quot;generic/log/json&quot;,                    &quot;files&quot;: &quot;*plan*&quot;                }```</longdescription>
</pkgmetadata>