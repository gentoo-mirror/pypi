<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====================django-taggit-labels====================.. image:: https://badge.fury.io/py/django-taggit-labels.svg    :target: https://badge.fury.io/py/django-taggit-labels.. image:: https://travis-ci.org/bennylope/django-taggit-labels.svg?branch=master    :target: https://travis-ci.org/bennylope/django-taggit-labelsLabel widget(s) for `django-taggit &lt;https://github.com/alex/django-taggit&gt;`_.Now instead of this:.. image:: https://raw.githubusercontent.com/bennylope/django-taggit-labels/master/docs/taggit-text.pngYou can use this:.. image:: https://raw.githubusercontent.com/bennylope/django-taggit-labels/master/docs/taggit-labels.pngOverview--------This is a widget for use in the Django admin interface, and it depends onDjango's namespaced jQuery. It allows you to add and remove tags by selectingor deselecting visual labels.The label widget does not expose the input field so that you can add new tags. Thebase label widget instead shows all available tags and lets you pick betweenthem in Django's admin interface. It presumes that you are using a managed (or'curated' if you're feeling insufferable) tag list.Quickstart----------Install django-taggit-labels:.. code-block:: bash    pip install django-taggit-labelsAdd `taggit_labels` to your project:.. code-block:: python    INSTALLED_APPS = (        'taggit',        'taggit_labels',    )Use the label widget:.. code-block:: python    from taggit.forms import TagField    from taggit_labels.widgets import LabelWidget    class ContentForm(forms.ModelForm):        tags = TagField(required=False, widget=LabelWidget)Just use this form class for your `ModelAdmin&lt;https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.form&gt;`_class now:.. code-block:: python    class ContentAdmin(admin.ModelAdmin):        form = ContentAdminFormYou can use the widget with `your own tag model&lt;http://django-taggit.readthedocs.org/en/latest/custom_tagging.html&gt;`_, too:.. code-block:: python    from taggit.forms import TagField    from taggit_labels.widgets import LabelWidget    class ContentForm(forms.Form):        tags = TagField(required=False, widget=LabelWidget(model=MyTag))The `tag` model from taggit will be presumed if you do not specify a tag model.History-------0.7.0 (2020-03-20)++++++++++++++++++* Updated Django compat and bug fixes0.6.0 (2018-10-29)++++++++++++++++++* Django 2, 2.1 compatibility0.5.1 (2017-07-23)++++++++++++++++++* Fixes CSS class rendering0.5.0 (2017-02-01)++++++++++++++++++* Improved label styling* Javascript updates for usage outside the admin0.4.1 (2016-01-13)++++++++++++++++++* Adds fix for widget overloading0.4.0 (2016-01-13)++++++++++++++++++* Django 1.9 compatability0.3.1 (2015-08-06)++++++++++++++++++* Django 1.7+ compatability bug fix0.3.0 (2015-05-20)++++++++++++++++++* Better Unicode handling0.2.0 (2015-03-31)++++++++++++++++++* Adds support for multiple tag fields (thanks to Lee Solway)0.1.6 (2014-08-04)++++++++++++++++++* Updates styling of tag labels for line breaking and hover state0.1.5 (2014-06-20)++++++++++++++++++* Fixes rendering for submitted, invalid forms0.1.4 (2014-06-09)++++++++++++++++++* Adds cursor styling for labels0.1.3 (2014-06-08)++++++++++++++++++* Adds style update missed in last release0.1.2 (2014-06-08)++++++++++++++++++* Breaks up some widget functionality, adds minor tests0.1.1 (2014-06-07)++++++++++++++++++* Fixes a bug in custom model initialization0.1.0 (2014-06-07)++++++++++++++++++* First release on PyPI.</longdescription>
</pkgmetadata>