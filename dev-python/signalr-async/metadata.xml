<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SignalR-Async&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://app.travis-ci.com/sam-mosleh/signalr-async&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://app.travis-ci.com/sam-mosleh/signalr-async.svg?branch=master&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/sam-mosleh/signalr-async&quot;&gt;  &lt;img src=&quot;https://codecov.io/gh/sam-mosleh/signalr-async/branch/master/graph/badge.svg?token=JYBKXSFAX6&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/signalr-async/&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/signalr-async&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/signalr-async/&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/signalr-async.svg&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;SignalR-Async is a python client for ASP.NET &amp; ASP.NET Core SignalR, ready for building bidirectional communication.## Installation```bashpip install signalr-async```## Example### Create it- Create a file `main.py` with:```Pythonimport asynciofrom signalr_async.netcore import Hub, Clientfrom signalr_async.netcore.protocols import MessagePackProtocolclass MyHub(Hub):    async def on_connect(self, connection_id: str) -&gt; None:        &quot;&quot;&quot;Will be awaited after connection established&quot;&quot;&quot;    async def on_disconnect(self) -&gt; None:        &quot;&quot;&quot;Will be awaited after client disconnection&quot;&quot;&quot;    def on_event_one(self, x: bool, y: str) -&gt; None:        &quot;&quot;&quot;Invoked by server synchronously on (event_one)&quot;&quot;&quot;    async def on_event_two(self, x: bool, y: str) -&gt; None:        &quot;&quot;&quot;Invoked by server asynchronously on (event_two)&quot;&quot;&quot;    async def get_something(self) -&gt; bool:        &quot;&quot;&quot;Invoke (method) on server&quot;&quot;&quot;        return await self.invoke(&quot;method&quot;, &quot;arg1&quot;, 2)hub = MyHub(&quot;my-hub&quot;)@hub.on(&quot;event_three&quot;)async def three(z: int) -&gt; None:    pass@hub.onasync def event_four(z: int) -&gt; None:    passasync def multi_event(z: int) -&gt; None:    passfor i in range(10):    hub.on(f&quot;event_{i}&quot;, multi_event)async def main():    token = &quot;mytoken&quot;    headers = {&quot;Authorization&quot;: f&quot;Bearer {token}&quot;}    async with Client(        &quot;https://localhost:9000&quot;,        hub,        connection_options={            &quot;http_client_options&quot;: {&quot;headers&quot;: headers},            &quot;ws_client_options&quot;: {&quot;headers&quot;: headers, &quot;timeout&quot;: 1.0},            &quot;protocol&quot;: MessagePackProtocol(),        },    ) as client:        return await hub.get_something()asyncio.run(main())```## ResourcesSee the [SignalR Documentation](https://docs.microsoft.com/aspnet/core/signalr) at docs.microsoft.com for documentation on the latest release.</longdescription>
</pkgmetadata>