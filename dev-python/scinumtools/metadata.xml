<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/scinumtools)](https://pypi.org/project/scinumtools)[![Supported Python Versions](https://img.shields.io/pypi/pyversions/scinumtools)](https://pypi.org/project/scinumtools/)[![PyTest](https://github.com/vrtulka23/scinumtools/actions/workflows/pytest.yml/badge.svg)](https://github.com/vrtulka23/scinumtools/actions/workflows/pytest.yml)# scinumtools![scinumtools](https://raw.githubusercontent.com/vrtulka23/scinumtools/main/docs/source/_static/snt/snt_128.png)Python package `scinumtools` contains essential tools for scientific and numerical calculations, simulation setup and data analysis. ## Quick startThe newest release of `scinumtools` is available on [PyPi](https://pypi.org/project/scinumtools/) and can be easily installed using `pip` package manager:``` pythonpip3 install scinumtools```Besides several useful tools, package `scinumtools` consist of three main submodules: expression solver, physical units and DIP.### Expression SolverUsing `expression solver` one can quickly build a custom parser that can process numerical, logical and textual expressions. This module is an integral part of both, physical units and DIP modules.``` python&gt;&gt;&gt; from scinumtools.solver import *&gt;&gt;&gt; class AtomCustom(AtomBase):&gt;&gt;&gt;     value: str&gt;&gt;&gt;     def __init__(self, value:str):&gt;&gt;&gt;         self.value = str(value)&gt;&gt;&gt;     def __add__(self, other):&gt;&gt;&gt;         return AtomCustom(self.value + other.value)&gt;&gt;&gt;     def __gt__(self, other):&gt;&gt;&gt;         return AtomCustom(len(self.value) &gt; len(other.value))&gt;&gt;&gt; operators = {'add':OperatorAdd,'gt':OperatorGt,'par':OperatorPar}&gt;&gt;&gt; steps = [&gt;&gt;&gt;     dict(operators=['par'],  otype=Otype.ARGS),&gt;&gt;&gt;     dict(operators=['add'],  otype=Otype.BINARY),&gt;&gt;&gt;     dict(operators=['gt'],   otype=Otype.BINARY),&gt;&gt;&gt; ]&gt;&gt;&gt; with ExpressionSolver(AtomCustom, operators, steps) as es:&gt;&gt;&gt;     es.solve(&quot;(limit + 100 km/s) &gt; (limit + 50000000000 km/s)&quot;)'False'```### Physical UnitsThis submodule has an aim to make calculations with `physical units` quick and easy. It includes multiple types of units, constants and implements standard numerical operations with physical quantities. Besides that, it features unit convertor, supports calculations with uncertainties and can be used in combination with third party libraries like NumPy, or Decimal.``` python&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from scinumtools.units import Quantity, Unit&gt;&gt;&gt; Quantity(23.34, 'kg*m2/s2').to('erg')     # unit conversionsQuantity(2.334e+08 erg)&gt;&gt;&gt; u = Unit()                                # calculations with units&gt;&gt;&gt; 34*u.cm + 53*u.dm  Quantity(5.640e+02 cm)&gt;&gt;&gt; Quantity(23.34, 'cm', abse=0.03)          # uncertainitiesQuantity(2.3340(30)e+01 cm)&gt;&gt;&gt; Quantity(3, 'A').value('dBA')             # logarithmic units9.542425094393248&gt;&gt;&gt; np.sqrt(Quantity([23,59,20,10], 'm2'))    # arrays and NumPyQuantity([4.796 7.681 4.472 3.162] m)```### Dimensional Input Parameters`DIP` is a serialization language that was designed to collect, manage, convert, document and validate dimensional input parameters used by numerical codes. The main goal of this package is to help developers to focus less on initialization processes mentioned above and more on actual code development. `DIP` should serve as a quick tool that makes user interface with the code clear and straightforward. ``` python&gt;&gt;&gt; from scinumtools.dip import DIP, Format&gt;&gt;&gt; with DIP() as dip:&gt;&gt;&gt;     dip.add_source(&quot;settings&quot;, 'settings.dip')&gt;&gt;&gt;     dip.add_unit(&quot;length&quot;, 1, &quot;m&quot;)&gt;&gt;&gt;     dip.from_string(&quot;&quot;&quot;&gt;&gt;&gt;     box&gt;&gt;&gt;       width float = 23 [length]&gt;&gt;&gt;       height float = 11.5 cm&gt;&gt;&gt;     sphere&gt;&gt;&gt;       radius float = {settings?sphere.radius}&gt;&gt;&gt;     &quot;&quot;&quot;)&gt;&gt;&gt;     env = dip.parse()&gt;&gt;&gt;     env.data(Format.TUPLE){'box.width': (23.0, '[length]'), 'box.height': (11.5, 'cm'), 'sphere.radius': (34.2, 'mm')}```## DocumentationFor more information, see the scinumtools [documentation](https://vrtulka23.github.io/scinumtools/).</longdescription>
</pkgmetadata>