<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>singledispatchmethod====================Backport of ``@functools.singledispatchmethod`` decorator [1]_ fromPython 3.8 to Python 2.7-3.7. These are merely ~30 lines of code, butwhy bother yourself with copypasta?.. code:: bash   $ pip install singledispatchmethodThe decorator transforms a method into a single-dispatch [2]_ genericfunction [3]_. Note that since the dispatch happens on the type of thefirst non-self or non-cls argument, you have to create your functionaccordingly:.. code:: python    from singledispatchmethod import singledispatchmethod    class Negator:        @singledispatchmethod        def neg(self, arg):            raise NotImplementedError(&quot;Cannot negate a&quot;)        @neg.register        def _(self, arg: int):            return -arg        @neg.register        def _(self, arg: bool):            return not arg``@singledispatchmethod`` supports nesting with other decorators such as``@classmethod``. However, in order to expose ``dispatcher.register``,``@singledispatchmethod`` must be the *outer most* decorator. Here isthe ``Negator`` class with the ``neg`` methods being class bound:.. code:: python    from singledispatchmethod import singledispatchmethod    class Negator:        @singledispatchmethod        @classmethod        def neg(cls, arg):            raise NotImplementedError(&quot;Cannot negate a&quot;)        @neg.register        @classmethod        def _(cls, arg: int):            return -arg        @neg.register        @classmethod        def _(cls, arg: bool):            return not argThe same pattern can be used for other similar decorators, such as``@staticmethod`` or ``@abstractmethod``. Please note, since``@singledispatchmethod`` decorator is based on``@functools.singledispatch``, type annotations are supported by``dispatcher.register`` only since Python 3.7... [1] https://docs.python.org/3.8/library/functools.html#functools.singledispatchmethod.. [2] https://docs.python.org/3.8/glossary.html#term-single-dispatch.. [3] https://docs.python.org/3.8/glossary.html#term-generic-function</longdescription>
</pkgmetadata>