<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![publish](https://github.com/goodking-bq/graphene-sqlalchemy-auto/workflows/Upload%20Python%20Package/badge.svg)generate default graphene schema from sqlalchemy model base on [graphene-sqlalchemy](https://github.com/graphql-python/graphene-sqlalchemy.git)# Installationjust run```shell scriptpip install graphene_sqlalchemy_auto```# Features- auto add `offset` `limit` `totalCount` to pagination- auto add `dbId` for model's database id- mutation auto return ok for success,message for more information and output for model data# How To Useexample :```pythonfrom graphene_sqlalchemy_auto import QueryObjectType,MutationObjectTypefrom sqlalchemy.ext.declarative import declarative_baseimport graphenefrom sqlalchemy.orm import sessionmakerBase = declarative_base() Session = sessionmaker()class Query(QueryObjectType):    class Meta:        declarative_base = Base        exclude_models = [&quot;User&quot;] # exclude modelsclass Mutation(MutationObjectType):    class Meta:        declarative_base = Base        session=Session() # mutate used                include_object = []# you can use yourself mutation UserCreateMutation, UserUpdateMutationschema = graphene.Schema(query=Query, mutation=Mutation)```# Query examplejust equal```gqlquery{  userList(filters:{name: &quot;a&quot;}){    edges{      node{        name        id        dbId      }    }  }}```OR support more expr```gqlquery{  userList(filters:[{key: &quot;name&quot;,op: &quot;==&quot;, val: &quot;a&quot;}]){    edges{      node{        name        id        dbId      }    }  }}```## op supports:- *==* - *!=* - *&gt;=* - *&lt;=* - *&gt;* - *&lt;* - *starts* - *ends* - *contains* - *in* - *notin* - *any* # Mutation example```gql createUser(input:{name: &quot;cc&quot;,password: &quot;dd&quot;}){    ok    output{      id      dbId      name    }    message  }```## about Schema names- model.__class__.name.lower : query a data by id- model.__class__.name.decapitalize[first lower]+&quot;List&quot;: query list  - create|update|delete+model.__class__.name : mutation dataabout many-to-many mutation&gt;now you can use schema everywhere.some like flask,fastapi&gt;also more example you can find in [example](https://github.com/goodking-bq/graphene-sqlalchemy-auto/tree/master/example)</longdescription>
</pkgmetadata>