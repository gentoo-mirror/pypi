<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>CodeJail========CodeJail manages execution of untrusted code in secure sandboxes. It isdesigned primarily for Python execution, but can be used for other languages aswell.Security is enforced with AppArmor.  If your operating system doesn't supportAppArmor, then CodeJail won't protect the execution.CodeJail is designed to be configurable, and will auto-configure itself forPython execution if you install it properly.  The configuration is designed tobe flexible: it can run in safe mode or unsafe mode.  This helps support largedevelopment groups where only some of the developers are involved enough withsecure execution to configure AppArmor on their development machines.If CodeJail is not configured for safe execution, it will execution Pythonusing the same API, but will not guard against malicious code.  This allows thesame code to be used on safe-configured or non-safe-configured developer'smachines.A CodeJail sandbox consists of several pieces: #) Sandbox environment. For a Python setup, this would be Python and   associated core packages. This is denoted throughout this document   as **&lt;SANDENV&gt;**. This is read-only. #) Sandbox packages. These are additional packages needed for a given   run. For example, this might be a grader written by an instructor   to run over a student's code, or data that a student's code might   need to access. This is denoted throughout this document as   **&lt;SANDPACK&gt;**. This is read-only.#) Untrusted packages. This is typically the code submitted by the   student to be tested on the server, as well as any data the code   may need to modify. This is denoted throughout this document as   **&lt;UNTRUSTED_PACK&gt;**. This is currently read-only, but may need to    be read-write for some applications.#) OS packages. These are standard system libraries needed to run   Python (e.g. things in /lib). This is denoted throughout this   document as **&lt;OSPACK&gt;**. This is read-only, and is specified by   Ubuntu's AppArmor profile.To run, CodeJail requires two user accounts. One account is the mainaccount under which the code runs, which has access to createsandboxes. This will be referred to as **&lt;SANDBOX_CALLER&gt;**. Thesecond account is the account under which the sandbox runs. This istypically the account 'sandbox.'Installation------------These instructions detail how to configure your operating system so thatCodeJail can execute Python code safely.  You can run CodeJail without thesesteps, and you will have an unsafe CodeJail.  This is fine for developers'machines who are unconcerned with security, and simplifies the integration ofCodeJail into your project.To secure Python execution, you'll be creating a new virtualenv.  This meansyou'll have two: the main virtualenv for your project, and the new one forsandboxed Python code.Choose a place for the new virtualenv, call it **&lt;SANDENV&gt;**.  It will beautomatically detected and used if you put it right alongside your existingvirtualenv, but with `-sandbox` appended.  So if your existing virtualenv is in`/home/chris/ve/myproj`, make **&lt;SANDENV&gt;** be `/home/chris/ve/myproj-sandbox`.The user running the LMS is **&lt;SANDBOX_CALLER&gt;**, for example, you onyour dev machine, or `www-data` on a server.Other details here that depend on your configuration:1. Create the new virtualenv::    $ sudo virtualenv &lt;SANDENV&gt;2. (Optional) If you have particular packages you want available to your   sandboxed code, install them by activating the sandbox virtual env, and   using pip to install them::    $ source &lt;SANDENV&gt;/bin/activate    $ pip install -r requirements/sandbox.txt3. Add a sandbox user::    $ sudo addgroup sandbox    $ sudo adduser --disabled-login sandbox --ingroup sandbox4. Let the web server run the sandboxed Python as sandbox.  Create the file   `/etc/sudoers.d/01-sandbox`::    $ sudo visudo -f /etc/sudoers.d/01-sandbox    &lt;SANDBOX_CALLER&gt; ALL=(sandbox) SETENV:NOPASSWD:&lt;SANDENV&gt;/bin/python    &lt;SANDBOX_CALLER&gt; ALL=(sandbox) SETENV:NOPASSWD:/usr/bin/find    &lt;SANDBOX_CALLER&gt; ALL=(ALL) NOPASSWD:/usr/bin/pkill5. Edit an AppArmor profile.  This is a text file specifying the limits on the   sandboxed Python executable.  The file must be in `/etc/apparmor.d` and must   be named based on the executable, with slashes replaced by dots.  For   example, if your sandboxed Python is at `/home/chris/ve/myproj-sandbox/bin/python`,   then your AppArmor profile must be `/etc/apparmor.d/home.chris.ve.myproj-sandbox.bin.python`::    $ sudo vim /etc/apparmor.d/home.chris.ve.myproj-sandbox.bin.python    #include &lt;tunables/global&gt;    &lt;SANDENV&gt;/bin/python {        #include &lt;abstractions/base&gt;        #include &lt;abstractions/python&gt;        &lt;SANDENV&gt;/** mr,        # If you have code that the sandbox must be able to access, add lines        # pointing to those directories:        /the/path/to/your/sandbox-packages/** r,        /tmp/codejail-*/ rix,        /tmp/codejail-*/** wrix,    }6. Parse the profiles::    $ sudo apparmor_parser &lt;APPARMOR_FILE&gt;7. Reactivate your project's main virtualenv again.Using CodeJail--------------If your CodeJail is properly configured to use safe_exec, try thesecommands at your Python terminal::    import codejail.jail_code    codejail.jail_code.configure('python', '&lt;SANDENV&gt;/bin/python')    import codejail.safe_exec    codejail.safe_exec.safe_exec(&quot;import os\nos.system('ls /etc')&quot;, {})This should fail with an exception. If you need to change the packages installed into your sandbox's virtualenv,you'll need to disable AppArmor, because your sandboxed Python doesn't havethe rights to modify the files in its site-packages directory.1. Disable AppArmor for your sandbox::    $ sudo apt-get install apparmor-utils  # if you haven't already    $ sudo aa-complain /etc/apparmor.d/home.chris.ve.myproj-sandbox.bin.python2. Install or otherwise change the packages installed::    $ pip install -r requirements/sandbox.txt3. Re-enable AppArmor for your sandbox::    $ sudo aa-enforce /etc/apparmor.d/home.chris.ve.myproj-sandbox.bin.pythonTests-----In order to target the sandboxed Python environment(s) you have created on yoursystem, you must set the following environment variables for testing::    $ export CODEJAIL_TEST_USER=&lt;owner of sandbox (usually 'sandbox')&gt;    $ export CODEJAIL_TEST_VENV=&lt;SANDENV&gt;Run the tests with the Makefile::    $ make testsIf CodeJail is running unsafely, many of the tests will be automaticallyskipped, or will fail, depending on whether CodeJail thinks it should be insafe mode or not.Design------CodeJail is general-purpose enough that it can be used in a variety of projectsto run untrusted code.  It provides two layers:* `jail_code.py` offers secure execution of subprocesses.  It does this by  running the program in a subprocess managed by AppArmor.* `safe_exec.py` offers specialized handling of Python execution, using  jail_code to provide the semantics of Python's exec statement.CodeJail runs programs under AppArmor.  AppArmor is an OS-provided feature tolimit the resources programs can access. To run Python code with limited accessto resources, we make a new virtualenv, then name that Python executable in anAppArmor profile, and restrict resources in that profile.  CodeJail willexecute the provided Python program with that executable, and AppArmor willautomatically limit the resources it can access.  CodeJail also uses setrlimitto limit the amount of CPU time and/or memory available to the process.`CodeJail.jail_code` takes a program to run, files to copy into itsenvironment, command-line arguments, and a stdin stream.  It creates atemporary directory, creates or copies the needed files, spawns a subprocess torun the code, and returns the output and exit status of the process.`CodeJail.safe_exec` emulates Python's exec statement.  It takes a chunk ofPython code, and runs it using jail_code, modifying the globals dictionary as aside-effect.  safe_exec does this by serializing the globals into and out ofthe subprocess as JSON.</longdescription>
</pkgmetadata>