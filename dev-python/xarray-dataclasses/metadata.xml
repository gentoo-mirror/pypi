<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># xarray-dataclasses[![Release](https://img.shields.io/pypi/v/xarray-dataclasses?label=Release&amp;color=cornflowerblue&amp;style=flat-square)](https://pypi.org/project/xarray-dataclasses/)[![Python](https://img.shields.io/pypi/pyversions/xarray-dataclasses?label=Python&amp;color=cornflowerblue&amp;style=flat-square)](https://pypi.org/project/xarray-dataclasses/)[![Downloads](https://img.shields.io/pypi/dm/xarray-dataclasses?label=Downloads&amp;color=cornflowerblue&amp;style=flat-square)](https://pepy.tech/project/xarray-dataclasses)[![DOI](https://img.shields.io/badge/DOI-10.5281/zenodo.4624819-cornflowerblue?style=flat-square)](https://doi.org/10.5281/zenodo.4624819)[![Tests](https://img.shields.io/github/actions/workflow/status/astropenguin/xarray-dataclasses/tests.yml?label=Tests&amp;style=flat-square)](https://github.com/astropenguin/xarray-dataclasses/actions)xarray data creation made easy by dataclass## Overviewxarray-dataclasses is a Python package that makes it easy to create [xarray]'s DataArray and Dataset objects that are &quot;typed&quot; (i.e. fixed dimensions, data type, coordinates, attributes, and name) using [the Python's dataclass]:```pythonfrom dataclasses import dataclassfrom typing import Literalfrom xarray_dataclasses import AsDataArray, Coord, DataX = Literal[&quot;x&quot;]Y = Literal[&quot;y&quot;]@dataclassclass Image(AsDataArray):    &quot;&quot;&quot;2D image as DataArray.&quot;&quot;&quot;    data: Data[tuple[X, Y], float]    x: Coord[X, int] = 0    y: Coord[Y, int] = 0```### Features- Typed DataArray or Dataset objects can easily be created:  ```python  image = Image.new([[0, 1], [2, 3]], [0, 1], [0, 1])  ```- NumPy-like filled-data creation is also available:  ```python  image = Image.zeros([2, 2], x=[0, 1], y=[0, 1])  ```- Support for features by [the Python's dataclass] (`field`, `__post_init__`, ...).- Support for static type check by [Pyright].### Installation```shellpip install xarray-dataclasses```## Basic usagexarray-dataclasses uses [the Python's dataclass].Data (or data variables), coordinates, attributes, and a name of DataArray or Dataset objects will be defined as dataclass fields by special type hints (`Data`, `Coord`, `Attr`, `Name`), respectively.Note that the following code is supposed in the examples below.```pythonfrom dataclasses import dataclassfrom typing import Literalfrom xarray_dataclasses import AsDataArray, AsDatasetfrom xarray_dataclasses import Attr, Coord, Data, NameX = Literal[&quot;x&quot;]Y = Literal[&quot;y&quot;]```### Data fieldData field is a field whose value will become the data of a DataArray object or a data variable of a Dataset object.The type hint `Data[TDims, TDtype]` fixes the dimensions and the data type of the object.Here are some examples of how to specify them.Type hint | Inferred dimensions--- | ---`Data[tuple[()], ...]` | `()``Data[Literal[&quot;x&quot;], ...]` | `(&quot;x&quot;,)``Data[tuple[Literal[&quot;x&quot;]], ...]` | `(&quot;x&quot;,)``Data[tuple[Literal[&quot;x&quot;], Literal[&quot;y&quot;]], ...]` | `(&quot;x&quot;, &quot;y&quot;)`Type hint | Inferred data type--- | ---`Data[..., Any]` | `None``Data[..., None]` | `None``Data[..., float]` | `numpy.dtype(&quot;float64&quot;)``Data[..., numpy.float128]` | `numpy.dtype(&quot;float128&quot;)``Data[..., Literal[&quot;datetime64[ns]&quot;]]` | `numpy.dtype(&quot;&lt;M8[ns]&quot;)`### Coordinate fieldCoordinate field is a field whose value will become a coordinate of a DataArray or a Dataset object.The type hint `Coord[TDims, TDtype]` fixes the dimensions and the data type of the object.### Attribute fieldAttribute field is a field whose value will become an attribute of a DataArray or a Dataset object.The type hint `Attr[TAttr]` specifies the type of the value, which is used only for static type check.### Name fieldName field is a field whose value will become the name of a DataArray object.The type hint `Name[TName]` specifies the type of the value, which is used only for static type check.### DataArray classDataArray class is a dataclass that defines typed DataArray specifications.Exactly one data field is allowed in a DataArray class.The second and subsequent data fields are just ignored in DataArray creation.```python@dataclassclass Image(AsDataArray):    &quot;&quot;&quot;2D image as DataArray.&quot;&quot;&quot;    data: Data[tuple[X, Y], float]    x: Coord[X, int] = 0    y: Coord[Y, int] = 0    units: Attr[str] = &quot;cd / m^2&quot;    name: Name[str] = &quot;luminance&quot;```A DataArray object will be created by a class method `new()`:```pythonImage.new([[0, 1], [2, 3]], x=[0, 1], y=[0, 1])&lt;xarray.DataArray &quot;luminance&quot; (x: 2, y: 2)&gt;array([[0., 1.],       [2., 3.]])Coordinates:  * x        (x) int64 0 1  * y        (y) int64 0 1Attributes:    units:    cd / m^2```NumPy-like class methods (`zeros()`, `ones()`, ...) are also available:```pythonImage.ones((3, 3))&lt;xarray.DataArray &quot;luminance&quot; (x: 3, y: 3)&gt;array([[1., 1., 1.],       [1., 1., 1.],       [1., 1., 1.]])Coordinates:  * x        (x) int64 0 0 0  * y        (y) int64 0 0 0Attributes:    units:    cd / m^2```### Dataset classDataset class is a dataclass that defines typed Dataset specifications.Multiple data fields are allowed to define the data variables of the object.```python@dataclassclass ColorImage(AsDataset):    &quot;&quot;&quot;2D color image as Dataset.&quot;&quot;&quot;    red: Data[tuple[X, Y], float]    green: Data[tuple[X, Y], float]    blue: Data[tuple[X, Y], float]    x: Coord[X, int] = 0    y: Coord[Y, int] = 0    units: Attr[str] = &quot;cd / m^2&quot;```A Dataset object will be created by a class method `new()`:```pythonColorImage.new(    [[0, 0], [0, 0]],  # red    [[1, 1], [1, 1]],  # green    [[2, 2], [2, 2]],  # blue)&lt;xarray.Dataset&gt;Dimensions:  (x: 2, y: 2)Coordinates:  * x        (x) int64 0 0  * y        (y) int64 0 0Data variables:    red      (x, y) float64 0.0 0.0 0.0 0.0    green    (x, y) float64 1.0 1.0 1.0 1.0    blue     (x, y) float64 2.0 2.0 2.0 2.0Attributes:    units:    cd / m^2```## Advanced usage### Coordof and Dataof type hintsxarray-dataclasses provides advanced type hints, `Coordof` and `Dataof`.Unlike `Data` and `Coord`, they specify a dataclass that defines a DataArray class.This is useful when users want to add metadata to dimensions for [plotting].For example:```pythonfrom xarray_dataclasses import Coordof@dataclassclass XAxis:    data: Data[X, int]    long_name: Attr[str] = &quot;x axis&quot;    units: Attr[str] = &quot;pixel&quot;@dataclassclass YAxis:    data: Data[Y, int]    long_name: Attr[str] = &quot;y axis&quot;    units: Attr[str] = &quot;pixel&quot;@dataclassclass Image(AsDataArray):    &quot;&quot;&quot;2D image as DataArray.&quot;&quot;&quot;    data: Data[tuple[X, Y], float]    x: Coordof[XAxis] = 0    y: Coordof[YAxis] = 0```### General data variable names in Dataset creationDue to the limitation of Python's parameter names, it is not possible to define data variable names that contain white spaces, for example.In such cases, please define DataArray classes of each data variable so that they have name fields and specify them by `Dataof` in a Dataset class.Then the values of the name fields will be used as data variable names.For example:```python@dataclassclass Red:    data: Data[tuple[X, Y], float]    name: Name[str] = &quot;Red image&quot;@dataclassclass Green:    data: Data[tuple[X, Y], float]    name: Name[str] = &quot;Green image&quot;@dataclassclass Blue:    data: Data[tuple[X, Y], float]    name: Name[str] = &quot;Blue image&quot;@dataclassclass ColorImage(AsDataset):    &quot;&quot;&quot;2D color image as Dataset.&quot;&quot;&quot;    red: Dataof[Red]    green: Dataof[Green]    blue: Dataof[Blue]``````pythonColorImage.new(    [[0, 0], [0, 0]],    [[1, 1], [1, 1]],    [[2, 2], [2, 2]],)&lt;xarray.Dataset&gt;Dimensions:      (x: 2, y: 2)Dimensions without coordinates: x, yData variables:    Red image    (x, y) float64 0.0 0.0 0.0 0.0    Green image  (x, y) float64 1.0 1.0 1.0 1.0    Blue image   (x, y) float64 2.0 2.0 2.0 2.0```### Customization of DataArray or Dataset creationFor customization, users can add a special class attribute, `__dataoptions__`, to a DataArray or Dataset class.A custom factory for DataArray or Dataset creation is only supported in the current implementation.```pythonimport xarray as xrfrom xarray_dataclasses import DataOptionsclass Custom(xr.DataArray):    &quot;&quot;&quot;Custom DataArray.&quot;&quot;&quot;    __slots__ = ()    def custom_method(self) -&gt; bool:        &quot;&quot;&quot;Custom method.&quot;&quot;&quot;        return True@dataclassclass Image(AsDataArray):    &quot;&quot;&quot;2D image as DataArray.&quot;&quot;&quot;    data: Data[tuple[X, Y], float]    x: Coord[X, int] = 0    y: Coord[Y, int] = 0    __dataoptions__ = DataOptions(Custom)image = Image.ones([3, 3])isinstance(image, Custom)  # Trueimage.custom_method()  # True```### DataArray and Dataset creation without shorthandsxarray-dataclasses provides functions, `asdataarray` and `asdataset`.This is useful when users do not want to inherit the mix-in class (`AsDataArray` or `AsDataset`) in a DataArray or Dataset dataclass.For example:```pythonfrom xarray_dataclasses import asdataarray@dataclassclass Image:    &quot;&quot;&quot;2D image as DataArray.&quot;&quot;&quot;    data: Data[tuple[X, Y], float]    x: Coord[X, int] = 0    y: Coord[Y, int] = 0image = asdataarray(Image([[0, 1], [2, 3]], [0, 1], [0, 1]))```&lt;!-- References --&gt;[Pyright]: https://github.com/microsoft/pyright[the Python's dataclass]: https://docs.python.org/3/library/dataclasses.html[xarray]: https://xarray.pydata.org/en/stable/index.html[plotting]: https://xarray.pydata.org/en/stable/user-guide/plotting.html#simple-example</longdescription>
</pkgmetadata>