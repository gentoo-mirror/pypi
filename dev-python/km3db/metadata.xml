<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>KM3NeT database library=======================.. image:: https://git.km3net.de/km3py/km3db/badges/master/pipeline.svg    :target: https://git.km3net.de/km3py/km3db/pipelines.. image:: https://git.km3net.de/km3py/km3db/badges/master/coverage.svg    :target: https://km3py.pages.km3net.de/km3db/coverage.. image:: https://git.km3net.de/examples/km3badges/-/raw/master/docs-latest-brightgreen.svg    :target: https://km3py.pages.km3net.de/km3db``km3db`` is a lightweight library to access the web API of the KM3NeT Oracledatabase (https://km3netdbweb.in2p3.fr). It requires Python 2.7 or later andcomes with a small set of command line utilities which can be used inshell scripts.Installation------------Tagged releases are available on the Python Package Index repository (https://pypi.org)and can easily be installed with the ``pip`` command::  pip install km3dbDatabase Access with Cookies~~~~~~~~~~~~~~~~~~~~~~~~~~~~The KM3NeT DB credentials should be used to obtain a session cookie which isthen passed to the database web API for all future requests. The cookie filecan be stored as a file and the default location is ``~/.km3netdb_cookie``.If you want to use a different file, set the ``KM3NET_DB_COOKIE_FILE`` to thedesired file and each request made with ``km3db`` will use that cookie. Youcan also specify ``KM3NET_DB_COOKIE`` as a string value, which then will be usedas a session ID cookie. This is useful if you work in environments where you can'tor don't want to store files.See the section below how to use the ``km3dbcookie`` command line tool explicityto obtain a session cookie from the command line. Notice that cookies areautomatically handled behind the scenes if you use any of the ``km3db``functionality.Python Classes--------------The three important classes are ``DBManager``, ``StreamDS`` and ``CLBMap``.``DBManager``~~~~~~~~~~~~~The ``DBManager`` class manages the authentication and cookie management andlow level access to the database::  &gt;&gt;&gt; import km3db  &gt;&gt;&gt; db = km3db.DBManager()It tries to figure out the easiest way to authenticate with the database gateway.If launched on the Lyon CC, GitLab CI or the KM3NeT JupyterHub service, it willautomatically use the corresponding session cookies.If not operating on whitelisted hosts, the environment variables ``KM3NET_DB_USERNAME``and ``KM3NET_DB_PASSWORD`` will be used. If those are not set, it will look for acookie in ``~/.km3netdb_cookie``. As a last resort, it will prompt the user toenter the username and password manually.After a successful authentication, a cookie file with the session cookie will bestored in the above mentioned file for future authentications.``StreamDS``~~~~~~~~~~~~The ``StreamDS`` class is specifically designed to access the Stream Data Serviceentrypoint of the database, which is meant to provide large datasets, potentiallyexceeding multiples of GB::  &gt;&gt;&gt; import km3db  &gt;&gt;&gt; sds = km3db.StreamDS()  &gt;&gt;&gt; print(sds.detectors())  OIDSERIALNUMBERLOCATIONIDCITYFIRSTRUNLASTRUN  D_DU1CPPM2A00070004Marseille210  A003502763A00070003Napoli00  ...  ...  D1DU039CT59A02181273Catania408480  D0DU040CE60A01288502Caserta00  &gt;&gt;&gt; print(sds.get(&quot;detectors&quot;))  # alternative way to call it  ...In km3pipe v8 and below, the `StreamDS` class always returned `pandas.DataFrames`by default. This has been changed in `km3db` and by default, only the raw ASCIIoutput is returned, as delivered by the database.One can however change the output container type back to `pandas.DataFrame` bypassing `container=&quot;pd&quot;` to either the `StreamDS()` constructor or to the`.get()` function itself. Another supported container type is `namedtuple` fromthe Python standard library (`collections.namedtuple`), available via`container=&quot;nt&quot;`::   &gt;&gt;&gt; sds = km3db.StreamDS(container=&quot;pd&quot;)   &gt;&gt;&gt; type(sds.detectors())   pandas.core.frame.DataFrame   # pandas DataFrame only on a specific call   &gt;&gt;&gt; sds = km3db.StreamDS()   &gt;&gt;&gt; type(sds.get(&quot;detectors&quot;, container=&quot;pd&quot;))   pandas.core.frame.DataFrame   # namedtuple   &gt;&gt;&gt; sds.get(&quot;detectors&quot;, container=&quot;nt&quot;)[0]   Detectors(oid='D_DU1CPPM', serialnumber=2, locationid='A00070004', city='Marseille', firstrun=2, lastrun=10)``CLBMap``~~~~~~~~~~The ``CLBMap`` is a powerful helper class which makes it easy to query detectorconfigurations and CLB::  &gt;&gt;&gt; import km3db  &gt;&gt;&gt; clbmap = km3db.CLBMap(&quot;D_ORCA003&quot;)  &gt;&gt;&gt; clb = clbmap.omkeys[(1, 13)]  &gt;&gt;&gt; clb  Clbmap(det_oid='D_ORCA003', du=1, floor=13, serial_number=374, upi='3.4.3.2/V2-2-1/2.374', dom_id=808949902)  &gt;&gt;&gt; clb.dom_id  808949902  &gt;&gt;&gt; clb.upi  '3.4.3.2/V2-2-1/2.374'Command Line Utilities----------------------The following command line utilities will be accessible after installing ``km3db``.``km3dbcookie``~~~~~~~~~~~~~~~~~~The ``km3netdbcookie`` command can be used to obtain a session cookie using theKM3NeT DB credentials::    $ km3dbcookie -h    Generate a cookie for the KM3NeT Oracle Web API.    Usage:        km3dbcookie [-B | -C]        km3dbcookie (-h | --help)        km3dbcookie --version    Options:        -B             Request the cookie for a class B network (12.23.X.Y).        -C             Request the cookie for a class C network (12.23.45.Y).        -h --help   Show this screen.    Example:        $ km3dbcookie -B        Please enter your KM3NeT DB username: tgal        Password:        Cookie saved as '/Users/tamasgal/.km3netdb_cookie'        $ cat /Users/tamasgal/.km3netdb_cookie        .in2p3.frTRUE/TRUE0sid_tgal_131.188_70b78042c03a434594b041073484ce23``detx``~~~~~~~~~~~~The ``detx`` command can be used to retrieve calibration information from thedatabase formatted as DETX, which is its main offline representation format::  $ detx -h  Retrieves DETX files from the database.  Usage:      detx [options] DET_ID      detx DET_ID RUN      detx (-h | --help)      detx --version  Options:      DET_ID        The detector ID (e.g. 49)      RUN           The run ID.      -c CALIBR_ID  Geometrical calibration ID (eg. A01466417)      -t T0_SET     Time calibration ID (eg. A01466431)      -o OUT        Output folder or filename.      -h --help     Show this screen.  Example:      detx 49 8220  # retrieve the calibrated DETX for run 8220 of ORCA6``streamds``~~~~~~~~~~~~The ``streamds`` command provides access to the &quot;Stream Data Service&quot; which wasdesigned to deal with large datasets potentially exceeding multiple GB in size.The help output explains all the available functionality of the tool::  $ streamds -h  Access the KM3NeT StreamDS DataBase service.  Usage:      streamds      streamds list      streamds info STREAM      streamds get [-f FORMAT -o OUTFILE -g GROUPBY] STREAM [PARAMETERS...]      streamds upload [-q -x] CSV_FILE      streamds (-h | --help)      streamds --version  Options:      STREAM      Name of the stream.      PARAMETERS  List of parameters separated by space (e.g. detid=29).      CSV_FILE    Whitespace separated data for the runsummary tables.      -f FORMAT   Usually 'txt' for ASCII or 'text' for UTF-8 [default: txt].      -o OUTFILE  Output file: supported formats '.csv' and '.h5'.      -g COLUMN   Group dataset by the name of the given row when writing HDF5.      -q          Test run! When uploading, a TEST_ prefix will be added to the data.      -x          Do not verify the SSL certificate.      -h --help   Show this screen.For example, a list of available detectors::  &gt; streamds get detectors  OIDSERIALNUMBERLOCATIONIDCITYFIRSTRUNLASTRUN  D_DU1CPPM2A00070004Marseille210  A003502763A00070003Napoli00  D_DU2NAPO5A00070003Napoli98428  D_TESTDET6A00070002Fisciano335  D_ARCA0017A00073795Italy12763  FR_INFRAS8A00073796France16003202  D_DU003NA9A00070003Napoli1242  D_DU004NA12A00070003Napoli243342  D_DU001MA13A00070004Marseille11922  D_ARCA00314A00073795Italy16465To write the database output to a file, use the ``-o`` option, e.g.``streamds get detectors -o detectors.csv``. The currently supportedfiletypes are ``.csv`` and ``.h5``. In case of ``.h5``, the data canbe grouped by providing ``-g COLUMN``, which will split up theoutput and write distinct HDF5 dataset. It's useful to group largedatasets by e.g. ``RUN``, however, only numerical datatypes are supportedcurrently::  &gt; streamds get toashort detid=D0ORCA010 minrun=13000 maxrun=13005 -g RUN -o KM3NeT_00000100_toashort.h5  Database output written to 'KM3NeT_00000100_toashort.h5'.``km3db``~~~~~~~~~The ``km3db`` command gives direct access to database URLs and is mainly adebugging tool::  $ km3db -h  Command line access to the KM3NeT DB web API.  Usage:      km3db URL      km3db (-h | --help)      km3db --version  Options:      URL         The URL, starting from the database website's root.      -h --help   Show this screen.  Example:      km3db &quot;streamds/runs.txt?detid=D_ARCA003&quot;The URL parameter is simply the string which comes right after``https://km3netdbweb.in2p3.fr/``.</longdescription>
</pkgmetadata>