<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>py-lua-parser===============================================================================.. image:: https://travis-ci.org/boolangery/py-lua-parser.svg?branch=master    :target: https://travis-ci.org/boolangery/py-lua-parser.. image:: https://img.shields.io/pypi/v/luaparser.svg    :target: https://pypi.python.org/pypi/luaparser/.. image:: https://img.shields.io/pypi/pyversions/luaparser.svg    :target: https://pypi.python.org/pypi/luaparser/A Lua parser and AST builder written in Python.It's both a development library and a command line tool.Installation:------------------------------------------------------------------------------The package can be installed through `pip`:.. code-block::    $ python3.6 -m pip install luaparserIt will install the shell command 'luaparser'.Options------------------------------------------------------------------------------These are the command-line flags:Usage: luaparser [options] filename.. code-block::    CLI Options:      --version                     Show program's version number and exit      -h, --help                    Show this help message and exit      -s, --source                  Source passed in a string      -x, --xml                     Set output format to xml      -o, --output                  Write output to fileQuickstart==============================================================================Node structure------------------------------------------------------------------------------Each node contains the following data:.. code-block:: pythonclass Node:&quot;&quot;&quot;Base class for AST node.&quot;&quot;&quot;comments: Commentsfirst_token: Optional[Token]last_token: Optional[Token]start_char: Optional[int]stop_char: Optional[int]line: Optional[int]Working on AST tree------------------------------------------------------------------------------Minimal exemple:.. code-block:: python    from luaparser import ast    src = &quot;&quot;&quot;        local function sayHello()          print('hello world !')        end        sayHello()        &quot;&quot;&quot;    tree = ast.parse(src)    print(ast.to_pretty_str(tree))will display:.. code-block::    Chunk: {} 1 key      body: {} 1 key        Block: {} 1 key          body: [] 2 items            0: {} 1 key              LocalFunction: {} 3 keys                name: {} 1 key                  Name: {} 1 key                    id: &quot;sayHello&quot;                args: [] 0 item                body: [] 1 item                  0: {} 1 key                    Call: {} 2 keys                      func: {} 1 key                        Name: {} 1 key                          id: &quot;print&quot;                      args: [] 1 item                        0: {} 1 key                          String: {} 1 key                            s: &quot;hello world !&quot;            1: {} 1 key              Call: {} 2 keys                func: {} 1 key                  Name: {} 1 key                    id: &quot;sayHello&quot;                args: [] 0 itemYou can run through the list of all the nodes in the tree using ast.walk(tree):.. code-block:: python    from luaparser import ast    from luaparser import astnodes    tree = ast.parse(&quot;local foo = 'bar'&quot;)    for node in ast.walk(tree):        if isinstance(node, astnodes.Name):            process(node)Alternatively, you can use a node visitor:.. code-block:: python    from luaparser import ast    from luaparser import astnodes    src = &quot;local a = 42&quot;    class NumberVisitor(ast.ASTVisitor):        def visit_Number(self, node):            print('Number value = ' + str(node.n))    tree = ast.parse(src)    NumberVisitor().visit(tree)Rendering lua code------------------------------------------------------------------------------.. warning:: Experimental feature.. code-block:: python    exp = Chunk(Block([        Forin(            targets=[Name('k'), Name('v')],            iter=[                Invoke(                    source=Name('bar'),                    func=Name('foo'),                    args=[Number(42)]                )            ],            body=Block([                Call(func=Name('print'), args=[Name('k'), Name('v')])            ]),        )    ]))    print(ast.to_lua_source(exp))Will render:.. code-block:: lua    for k, v in bar:foo(42) do        print(k, v)    endCommand line==============================================================================Given:.. code-block:: lua    local function log(msg)      print(msg)    end    log(&quot;hello world !&quot;).. code-block:: bash    $ luaparser source.luaWill output:.. code-block:: json    {        &quot;Chunk&quot;: {            &quot;body&quot;: {                &quot;Block&quot;: {                    &quot;body&quot;: [                        {                            &quot;LocalFunction&quot;: {                                &quot;name&quot;: {                                    &quot;Name&quot;: {                                        &quot;id&quot;: &quot;log&quot;                                    }                                },                                &quot;args&quot;: [                                    {                                        &quot;Name&quot;: {                                            &quot;id&quot;: &quot;msg&quot;                                        }                                    }                                ],                                &quot;body&quot;: {                                    &quot;Block&quot;: {                                        &quot;body&quot;: [                                            {                                                &quot;Call&quot;: {                                                    &quot;func&quot;: {                                                        &quot;Name&quot;: {                                                            &quot;id&quot;: &quot;print&quot;                                                        }                                                    },                                                    &quot;args&quot;: [                                                        {                                                            &quot;Name&quot;: {                                                                &quot;id&quot;: &quot;msg&quot;                                                            }                                                        }                                                    ]                                                }                                            }                                        ]                                    }                                }                            }                        },                        {                            &quot;Call&quot;: {                                &quot;func&quot;: {                                    &quot;Name&quot;: {                                        &quot;id&quot;: &quot;log&quot;                                    }                                },                                &quot;args&quot;: [                                    {                                        &quot;String&quot;: {                                            &quot;s&quot;: &quot;hello world !&quot;                                        }                                    }                                ]                            }                        }                    ]                }            }        }    }Command line==============================================================================Documentation can be built with Sphinx:.. code-block::    $ cd doc    $ pip install -r requirements.txt    $ make html</longdescription>
</pkgmetadata>