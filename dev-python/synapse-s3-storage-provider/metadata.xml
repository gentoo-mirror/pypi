<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Synapse S3 Storage Provider===========================This module can be used by synapse as a storage provider, allowing it to fetchand store media in Amazon S3.Usage-----The `s3_storage_provider.py` should be on the PYTHONPATH when startingsynapse.Example of entry in synapse config:```yamlmedia_storage_providers:- module: s3_storage_provider.S3StorageProviderBackend  store_local: True  store_remote: True  store_synchronous: True  config:    bucket: &lt;S3_BUCKET_NAME&gt;    # All of the below options are optional, for use with non-AWS S3-like    # services, or to specify access tokens here instead of some external method.    region_name: &lt;S3_REGION_NAME&gt;    endpoint_url: &lt;S3_LIKE_SERVICE_ENDPOINT_URL&gt;    access_key_id: &lt;S3_ACCESS_KEY_ID&gt;    secret_access_key: &lt;S3_SECRET_ACCESS_KEY&gt;    # Server Side Encryption for Customer-provided keys    #sse_customer_key: &lt;S3_SSEC_KEY&gt;    # Your SSE-C algorithm is very likely AES256    # Default is AES256.    #sse_customer_algo: &lt;S3_SSEC_ALGO&gt;    # The object storage class used when uploading files to the bucket.    # Default is STANDARD.    #storage_class: &quot;STANDARD_IA&quot;    # The maximum number of concurrent threads which will be used to connect    # to S3. Each thread manages a single connection. Default is 40.    #    #threadpool_size: 20```This module uses `boto3`, and so the credentials should be specified asdescribed [here](https://boto3.readthedocs.io/en/latest/guide/configuration.html#guide-configuration).Regular cleanup job-------------------There is additionally a script at `scripts/s3_media_upload` which can be usedin a regular job to upload content to s3, then delete that from local disk.This script can be used in combination with configuration for the storageprovider to pull media from s3, but upload it asynchronously.Once the package is installed, the script should be run somewhat like thefollowing. We suggest using `tmux` or `screen` as these can take a long timeon larger servers.`database.yaml` should contain the keys that would be passed to psycopg2 toconnect to your database. They can be found in the contents of the`database`.`args` parameter in your homeserver.yaml.More options are available in the command help.```&gt; cd s3_media_upload# cache.db will be created if absent. database.yaml is required to# contain PG credentials&gt; lscache.db database.yaml# Update cache from /path/to/media/store looking for files not used# within 2 months&gt; s3_media_upload update /path/to/media/store 2mSyncing files that haven't been accessed since: 2018-10-18 11:06:21.520602Synced 0 new rows100%|█████████████████████████████████████████████████████████████| 1074/1074 [00:33&lt;00:00, 25.97files/s]Updated 0 as deleted&gt; s3_media_upload upload /path/to/media/store matrix_s3_bucket_name --storage-class STANDARD_IA --delete# prepare to wait a long time```Packaging and release---------For maintainers:1. Update the `__version__` in setup.py. Commit. Push.2. Create a release on GitHub for this version.3. When published, a [GitHub action workflow](https://github.com/matrix-org/synapse-s3-storage-provider/actions/workflows/release.yml) will build the package and upload to [PyPI](https://pypi.org/project/synapse-s3-storage-provider/).</longdescription>
</pkgmetadata>