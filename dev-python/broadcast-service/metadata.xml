<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;    broadcast-service&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;  &lt;strong&gt;A powerful python broadcast library. You can easily construct a Broadcast pattern/Publish subscriber pattern through this library.&lt;/strong&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a target=&quot;_blank&quot; href=&quot;&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?label=license&quot; /&gt;    &lt;/a&gt;   &lt;a target=&quot;_blank&quot; href=''&gt;        &lt;img src=&quot;https://img.shields.io/github/stars/Undertone0809/broadcast-service.svg&quot; alt=&quot;github stars&quot;/&gt;   &lt;/a&gt;    &lt;a target=&quot;_blank&quot; href=''&gt;        &lt;img src=&quot;https://static.pepy.tech/personalized-badge/broadcast-service?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=Downloads/Total&quot;/&gt;   &lt;/a&gt;    &lt;a target=&quot;_blank&quot; href=''&gt;        &lt;img src=&quot;https://static.pepy.tech/personalized-badge/broadcast-service?period=month&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=Downloads/Week&quot;/&gt;   &lt;/a&gt;&lt;/p&gt;## Features- A publishing subscriber pattern can be built with a very simple syntax- Support different application scenarios, such as asynchronous and synchronous- Provide different syntax writing modes for lambda, callback functions, decorators, etc- A callback function listens on multiple subscriptions- Provide publisher dispatch callback manage## Quick Start- [document github-pages](https://undertone0809.github.io/broadcast-service/#/)- [document gitee-pages](https://zeeland.gitee.io/broadcast-service/#/)- [https://pypi.org/project/broadcast-service/](https://pypi.org/project/broadcast-service/)## Setup```shpip install broadcast-service```## UsageThere is an easy demo to show how to use broadcast-service.```pythonfrom broadcast_service import broadcast_service# callback of decorator@broadcast_service.on_listen('my_topic')def handle_decorator_msg(params):    print(f&quot;handle_decorator_msg receive params: {params}&quot;)if __name__ == '__main__':    info = 'This is very important msg'    # publish broadcast    broadcast_service.publish('my_topic', info)```- You can use `publish, emit, broadcast` to send your topic msg and use `listen, on, subscribe` to listen your topic msg.- You can also add more arguments or no argument when you publish thr broadcast.```pythonfrom broadcast_service import broadcast_service# subscribe topic@broadcast_service.on_listen(['my_topic'])def handle_msg(info, info2):    print(info)    print(info2)if __name__ == '__main__':    info = 'This is very important msg'    info2 = 'This is also a very important msg.'    # publish broadcast    broadcast_service.publish('my_topic', info, info2)``````pythonfrom broadcast_service import broadcast_service# subscribe topic@broadcast_service.on_listen(['my_topic'])def handle_msg():    print('handle_msg callback')if __name__ == '__main__':    # publish broadcast    broadcast_service.publish('Test')```You can use `config` to make publisher callback If you want.```pythonfrom broadcast_service import broadcast_service@broadcast_service.on_listen(&quot;topic&quot;)def handle_subscriber_callback():    print(&quot;handle_subscriber_callback&quot;)def handle_publisher_callback(*args):    print(&quot;handle_publisher_callback&quot;)if __name__ == '__main__':    broadcast_service.config(        num_of_executions=5,        callback=handle_publisher_callback,        enable_final_return=True,        interval=0.1    ).publish(&quot;topic&quot;)```Moreover, you can see more example in [document](https://undertone0809.github.io/broadcast-service/#/).## TODO- optimize documents and show more examples.- ~~optimize the syntax expression of broadcast-service~~- provide more test cases- provide the ability to subscribe the topic and callback once- support for fuzzy subscriptions- ~~the publisher of the topic can provide a return value~~- optimize usage in class ('self' params problem)- build observer mode- ~~provide publisher callback when all subscriber have completed callback~~## ContributionIf you want to contribute to this project, you can submit pr or issue. I am glad to see more people involved and optimize it.</longdescription>
</pkgmetadata>