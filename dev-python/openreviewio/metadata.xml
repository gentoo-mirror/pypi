<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># /!\ Still in alpha stage and on its way to be stable. Every feedback is welcome!# Overview[OpenReviewIO](https://openreviewio-standard-definition.readthedocs.io/fr/latest/README.html) is a standard that describes a format for sharing media (shots, animations...) review informations. It's main purpose is to guarantee review informations compatibility across media reviewing tools.Please read the specifications for more informations.[OpenReviewIO Python API](https://pypi.org/project/openreviewio/) is the main Python API for the ORIO standard, maintained by the designer of the standard.# VersionThe version of the API is related to the version of the standard.  `API 1.x.y &lt;=&gt; Standard 1.x`**In Alpha stage, the API is 0.x.y but related to 1.x Standard. Will become 1.x.y when first stable release.**Last standard version: [1.0](https://openreviewio-standard-definition.readthedocs.io/fr/latest/Version_1-0.html)# Usage```pythonimport openreviewio as orio```## Create a media review```pythonreview = orio.MediaReview(&quot;/path/to/media.ext&quot;)```### Create a note```pythonnote = orio.Note(author=&quot;Alice&quot;)```#### Create contentContents are defined by the standard [version](https://openreviewio-standard-definition.readthedocs.io/fr/latest/Version_1-0.html)*There is a naming [convention](https://openreviewio-standard-definition.readthedocs.io/fr/latest/Standard_Definition.html#contenu) about the contents:      - `Comment` means something related to the whole media.      - `Annotation` means something related to a specific frame and duration of the media.*##### Text comment```pythontext_comment = orio.Content.TextComment(body=&quot;My text comment&quot;)```##### Text annotation```pythontext_annotation = orio.Content.TextComment(    body=&quot;My text comment&quot;,    frame=17,    duration=20)```##### Image comment```pythonimage = orio.Content.Image(path_to_image=&quot;/path/to/image_comment.png&quot;)```##### Image annotation```pythonimage_annotation = orio.Content.ImageAnnotation(    frame=17,    duration=20,    path_to_image=&quot;/path/to/image_annotation.png&quot;)```#### Add content to note```python# Single contentnote.add_content(text_comment)# Several contentsnote.add_content([text_annotation, image, image_annotation])```### Add note to review```pythonreview.add_note(note)```## Write media review to disk```python# Write next to the mediareview.write()# Specifying a directoryreview.write(&quot;/path/to/review_dir&quot;)```## Export/Import a note as zip```python# Exportexported_note_path = note.export(&quot;/path/to/folder&quot;, compress=True)# Importreview.import_note(exported_note_path)```# Examples## From content to review```python# Contenttext = orio.Content.TextComment(body=&quot;Banana&quot;)# Notenew_note = orio.Note(&quot;Michel&quot;, content=text)# Reviewreview = orio.MediaReview(&quot;/path/to/media.ext&quot;, note=new_note)```## Reply to a note ```python# Main notetext = orio.Content.TextComment(body=&quot;Make the logo bigger.&quot;)main_note = orio.Note(&quot;Michel&quot;, content=text)# Reply to the main notereply = orio.Content.TextComment(body=&quot;Done, I'm waiting for my visibility payment.&quot;)note_reply = orio.Note(&quot;Michel&quot;, content=reply, parent=main_note)```## Add a reference image to an image annotationUseful for keeping an image as reference of the drawing.```pythonimage_annotation = orio.Content.ImageAnnotation(    frame=17,    duration=20,    path_to_image=&quot;/path/to/image_annotation.png&quot;,    reference_image=&quot;/path/to/reference_image.png&quot;)# Orimage_annotation.reference_image = &quot;/path/to/reference_image.png&quot;```Copyright 2020, Félix David ©</longdescription>
</pkgmetadata>