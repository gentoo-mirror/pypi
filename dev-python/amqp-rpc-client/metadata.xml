<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AMQP RPC Client[![CodeQL](https://github.com/j-suchard/amqp-rpc-client/actions/workflows/code-analysis.yaml/badge.svg)](https://github.com/j-suchard/amqp-rpc-client/actions/workflows/code-analysis.yaml/badge.svg)[![OSSAR](https://github.com/j-suchard/amqp-rpc-client/actions/workflows/ossar.yaml/badge.svg)](https://github.com/j-suchard/amqp-rpc-client/actions/workflows/ossar.yaml)[![Pylint](https://github.com/j-suchard/amqp-rpc-client/actions/workflows/pylint.yaml/badge.svg?branch=main)](https://github.com/j-suchard/amqp-rpc-client/actions/workflows/pylint.yaml)This library offers a Remote-Procedure-Call client which communicates its messages via a messagebroker which uses the AMQPv0-9-1 protocol. This library is currently only tested with RabbitMQ since the underlying package `pika` is only tested with the RabbitMQ server## Usage### GeneralThis AMQP RPC Client uses an extra thread in which it handles data events like new messages or sending keep-alive messages. Therefore, your code will continue to execute after sending a message without waiting for a response. See the attached examples for how to use the library### Examples&lt;details&gt;&lt;summary&gt;Create a new client&lt;/summary&gt;```pythonfrom amqp_rpc_client import Client# The Data Source Name which is used to connect to the message broker. The virtual host currently# is &quot;/&quot;. Special characters need to be url-encodedAMQP_DSN = 'amqp://&lt;&lt;your-username&gt;&gt;:&lt;&lt;your-password&gt;&gt;@&lt;&lt;your-message-broker-address&gt;&gt;/%2F'# Create the new client with the data source namerpc_client = Client(AMQP_DSN)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Send a message to another exchange&lt;/summary&gt;```pythonfrom amqp_rpc_client import Client# The Data Source Name which is used to connect to the message broker. The virtual host currently# is &quot;/&quot;. Special characters need to be url-encodedAMQP_DSN = 'amqp://&lt;&lt;your-username&gt;&gt;:&lt;&lt;your-password&gt;&gt;@&lt;&lt;your-message-broker-address&gt;&gt;/%2F'# The exchange into which the message shall be postedTARGET_EXCHANGE = 'hello_world'# Create the new client with the data source namerpc_client = Client(AMQP_DSN)# Send a message to the specified exchangerpc_client.send('my_message_content_string', TARGET_EXCHANGE)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Send a message to another exchange and wait for the answer&lt;/summary&gt;```pythonfrom amqp_rpc_client import Client# The Data Source Name which is used to connect to the message broker. The virtual host currently# is &quot;/&quot;. Special characters need to be url-encodedAMQP_DSN = 'amqp://&lt;&lt;your-username&gt;&gt;:&lt;&lt;your-password&gt;&gt;@&lt;&lt;your-message-broker-address&gt;&gt;/%2F'# The exchange into which the message shall be postedTARGET_EXCHANGE = 'hello_world'# Create the new client with the data source namerpc_client = Client(AMQP_DSN)# Send a message to the specified exchange. This will return a message id which can be used to wait# for a responsemessage_id = rpc_client.send('my_message_content_string', TARGET_EXCHANGE)# Wait indefinitely and receive the response bytesresponse: bytes = rpc_client.await_response(message_id)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Send a message to another exchange and wait for the answer with an timeout&lt;/summary&gt;```pythonfrom amqp_rpc_client import Client# The Data Source Name which is used to connect to the message broker. The virtual host currently# is &quot;/&quot;. Special characters need to be url-encodedAMQP_DSN = 'amqp://&lt;&lt;your-username&gt;&gt;:&lt;&lt;your-password&gt;&gt;@&lt;&lt;your-message-broker-address&gt;&gt;/%2F'# The exchange into which the message shall be postedTARGET_EXCHANGE = 'hello_world'# The timeout in seconds as to how long the answer shall be awaitedANSWER_TIMEOUT: float = 10.0# Create the new client with the data source namerpc_client = Client(AMQP_DSN)# Send a message to the specified exchange. This will return a message id which can be used to wait# for a responsemessage_id = rpc_client.send('my_message_content_string', TARGET_EXCHANGE)# Wait indefinitely and receive the response bytesresponse: bytes = rpc_client.await_response(message_id, ANSWER_TIMEOUT)# Check if a response was receivedif response is None:    print('No response received')else:    print(response)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Directly get the response content if it is available&lt;/summary&gt;```pythonfrom amqp_rpc_client import Client# The Data Source Name which is used to connect to the message broker. The virtual host currently# is &quot;/&quot;. Special characters need to be url-encodedAMQP_DSN = 'amqp://&lt;&lt;your-username&gt;&gt;:&lt;&lt;your-password&gt;&gt;@&lt;&lt;your-message-broker-address&gt;&gt;/%2F'# The exchange into which the message shall be postedTARGET_EXCHANGE = 'hello_world'# The timeout in seconds as to how long the answer shall be awaitedANSWER_TIMEOUT: float = 10.0# Create the new client with the data source namerpc_client = Client(AMQP_DSN)# Send a message to the specified exchange. This will return a message id which can be used to wait# for a responsemessage_id = rpc_client.send('my_message_content_string', TARGET_EXCHANGE)# Try to get the responseresponse: bytes = rpc_client.get_response(message_id)# Check if a response was receivedif response is None:    print('No response received')else:    print(response)```&lt;/details&gt;</longdescription>
</pkgmetadata>