<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg   :target: https://opensource.org/licenses/Apache-2.0   :alt: License.. image:: https://travis-ci.org/aio-libs/aiosparql.svg?branch=master   :target: https://travis-ci.org/aio-libs/aiosparql   :alt: Build Status.. image:: https://codecov.io/gh/aio-libs/aiosparql/branch/master/graph/badge.svg   :target: https://codecov.io/gh/aio-libs/aiosparql   :alt: Code CoverageAn asynchronous SPARQL library using aiohttp============================================Synopsis--------::   from aiosparql.syntax import (       IRI, Namespace, Node, PrefixedName, RDF, RDFTerm, Triples)   # define a namespace   class Boo(Namespace):       __iri__ = IRI(&quot;http://boo#&quot;)       SomeClass = PrefixedName       website = PrefixedName       label = PrefixedName   # create a node   node = Node(&quot;&lt;subject&gt;&quot;, {       RDF.type: Boo.SomeClass,       Boo.website: IRI(&quot;http://example.org&quot;),       Boo.label: &quot;some label&quot;, # &quot;some label&quot; will be automatically escaped   })   # missing prefixed names will show on your IDE and fail on execution   print(Boo.something) # AttributeError!   # create triples   triples = Triples([(&quot;s&quot;, &quot;p&quot;, &quot;o&quot;)]) # o is automatically escaped   triples.append((&quot;s&quot;, Boo.website, IRI(&quot;http://example.org&quot;)))   triples.extend([(&quot;s&quot;, Boo.website, IRI(&quot;http://example.org&quot;))])   print(triples) # print the triples is a format usable directly in a SPARQL                  # query. It also groups by subject automatically for you   from aiosparql.client import SPARQLClient   client = SPARQLClient(&quot;http://dbpedia.org/sparql&quot;)   result = await client.query(&quot;select * where {?s ?p ?o} limit 1&quot;)   # result is a dict of the JSON result   result = await client.update(&quot;&quot;&quot;       with {{graph}}       insert data {           {{}}       }       &quot;&quot;&quot;, triples)   # the triples will be automatically indented to produce a beautiful query   from aiosparql.escape import escape_any   print(escape_any(True)) # &quot;true&quot;   print(escape_any(&quot;foo&quot;)) # &quot;foo&quot;   print(escape_any(5)) # &quot;5&quot;   print(escape_any(5.5)) # &quot;5.5&quot;^^xsd:doubleInstallation------------ *  User space installation    ::       easy_install --user aiosparql *  System wide installation    ::       easy_install aiosparqlRequirements^^^^^^^^^^^^ *  Python &gt;= 3.5Testing-------In order for the tests to run, you must have the following Docker containers started:   ::      docker run -d --name travis-virtuoso -p 8890:8890 -e SPARQL_UPDATE=true tenforce/virtuoso:1.2.0-virtuoso7.2.2      docker run -d -p 3030:3030 --name travis-fuseki -e ADMIN_PASSWORD=PASSWORD -e ENABLE_DATA_WRITE=true -e ENABLE_UPDATE=true -e ENABLE_UPLOAD=true secoresearch/fusekiCredits-------This software has been produced by `Dacota One &lt;http://www.dacota.one/&gt;`_.</longdescription>
</pkgmetadata>