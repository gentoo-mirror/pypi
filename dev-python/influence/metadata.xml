<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Influence - The Python Extender You Asked For=============================================With influence you can extend python with things like two-dimensionallists, fractions, string subtractors, etc. You can also upgrade pythonwith things it doesn't have like arrays!Overview========The influence python library was created with one sole purpose, helpingyou do things that can't be done in standard python with easeUsage=====Below is how to install and use the influence library in your ownprograms!Installation~~~~~~~~~~~~.. code:: sh    $ pip install influence    or     $ python3 -m pip install -U influenceThe influence package has two package dependencies, numpy and matplotlib(used for grapher and agrapher classes)Cout''''Cout (common output) has only one class, printer, that helps printtuples, lists, dicts, etc. nicelyImporting:.. code:: py    from influence import cout    #or    from influence.cout import PrinterPrinter ClassMethods:.. code:: py    Printer.print_list(list) #prints a list nicely    Printer.print_tuple(tuple) #prints a tuple nicely    Printer.print_dictionary(dict) #prints a dict nicely    Printer.print_all(ender, *items)     #prints all of items, if ender is False, prints each item on new line    #else all items are printed on the same lineCin'''Cin (common input), has one class, input, that handles inputspecificallyImporting:.. code:: py    from influence import cin    #or     from influence.cin import InputInput ClassMethods:.. code:: py    value = Input.input(t, prompt=None)    #stores input into value    #prompt will be printed, defaults to None    #raises ValueError if input does not match type t    #raises TypeError if t not able to be casted from inputList2D ClassCreates a 2D list of a square sizeImporting:.. code:: py    from influence.list import multilist    #or    from influence.list.multilist import List2DInitializing:.. code:: py    l = List2D(rows=1, cols=1)     #creates the list to have rows number of rows and cols number of colsMethods:.. code:: py    l[r_index][c_index] = item    #sets value at r_index and c_index to item    #raises IndexError if index out of bounds    l[r_index].append(item)    #since this is a list, if you wish to append the list    #you can do it this way instead of settings    l[r_index][c_index]    #returns value at r_index and c_index    #raises IndexError if index out of bounds    l.print()    #prints the list    l.remove(r_index, c_index)    #removes the value at r_index and c_index    #returns true if removed, false if index out of bounds    item in l    #returns true if item in l, false otherwise    l.index(item)    #returns indices of item if found in list    #returns [-1] otherwise    l.__len__() / len(l)    #returns the length of l    l.__str__() / str(l)    #returns l as a str    l.__delitem__(key) / del l[key]    #deletes row key from l    #raises IndexError if key out of boundsRaggedList ClassCreates a 2D list, but doesn't need to be of n x n size, inherits fromList2D, and therefore has a dependency toinfluence.extender.list.multilistImporting:.. code:: py    from influence.list import ragged    #or    from influence.list.ragged import RaggedListInitializing:.. code:: py    r = RaggedList(rows=1, cols=1)    #creates a ragged list starting with rows rows and cols cols    #defaults to one for both if no arguments are givenMethods:.. code:: py    r.print()    #prints the ragged list    r.in_bounds(r_index, c_index)    #returns true if r_index and c_index are in bounds of the list    #returns false otherwise    r.set(r_index, c_index, item)    #sets value at r_index and c_index to item if in bounds    #else extends the ragged list so r_index and c_index are in bounds    r.get(r_index, c_index)    #returns value at r_index and c_index if in bounds    #else returns None    item in r    #returns true if item is in r, else returns false    r.index(item)    #returns the indices of item if in r    #else returns [-1]    r.__len__() / len(r)    #returns the length of rAsList ClassUsed to turn strings into lists, duplicate class found in stringsubpackageImporting:.. code:: py    from influence.list import aslist    #or    from influence.list.aslist import AsListMethods:.. code:: py    AsList.character_list(string)    #returns string as a list of characters    AsList.word_list(string)    #returns string as a list with each word    #a word is found when a space is reached in the string    #spaces are not included in the list    AsList.word_list_with_spaces(string)    #same as AsList.word_list(string) except spaces are part of the listAsList ClassUsed to turn strings into lists, duplicate class found in listsubpackageImporting:.. code:: py    from influence.string import aslist    #or    from influence.string.aslist import AsListMethods:.. code:: py    AsList.character_list(string)    #returns string as a list of characters    AsList.word_list(string)    #returns string as a list with each word    #a word is found when a space is reached in the string    #spaces are not included in the list    AsList.word_list_with_spaces(string)    #same as AsList.word_list(string) except spaces are part of the listSubtract ClassAllows for subtracting of strings, but does not change the input string,instead returns a new stringImporting:.. code:: py    from influence.string import subtract    #or    from influence.string.subtract import SubtractMethods:.. code:: py    Subtract.subtract(initial, remove)    #removes the first instance of remove from initial    #returns a new string    #remove can be multiple letters, but must be a string    Subtract.subtract_all(initial, remove)    #removes all instances of remove from initial    #returns a new string    #remove can be multiple letters, but must be a stringConst Class===========Gives the user access to constants in mathImporting:.. code:: py    from influence.math import const    #or    from influence.math.const import MathConstantsFields:.. code:: py    MathConstants.pi #returns the value of pi    MathConstants.e #returns the value of e    MathConstants.tau #returns the value of tau    MathConstants.phi #returns the value of phiStats ClassAllows for statistics with int or float datasetsImporting:.. code:: py    from influence.math import stats    #or    from influence.math.stats import StatsMethods:.. code:: py    Stats.min(dataset)    #returns the lowest value in dataset    Stats.max(dataset)    #returns the highest value in dataset    Stats.range(dataset)    #returns the range of the dataset (max - min)    Stats.mean(dataset)    #returns the mean of the dataset    Stats.variance(dataset)    #returns the variance of the dataset    Stats.standard_deviation(dataset)    #returns the standard deviation of the dataset    Stats.median(dataset)    #returns the median of the dataset    Stats.mode(dataset)    #returns the mode of the dataset as a listCos ClassDoes permutations and combinations equations, inherits from Stats, andtherefore has a dependency to influence.extender.math.statsImporting:.. code:: py    from influence.math import cos    #or    from influence.math.cos import CombinatoricsMethods:.. code:: py    Combinatorics.factorial(num)    #returns the factorial of num    Combinatorics.P(n, r)    #returns the permutations equation (n! / (n-r)!)    Combinatorics.C(n, r)    #returns the combinations equation (n! / [(n-r)! * r!])Frac ClassRepresents a fractionImporting:.. code:: py    from influence.math import frac    #or    from influence.math.frac import FractionInitializing:.. code:: py    f = Fraction(num, denom)    #initializes a fraction to numerator num and denominator denomMethods:.. code:: py    f.simplify()    #simplifies this fraction, if possible    f.__float__() / float(f)    #returns the float value of the fraction    f.__int__() / int(f)    #returns the int value of the fractions    f.__str__() / str(f)    #returns the fraction as a string    f.to_mixed_number(self)    #returns f as a mixed numberCompare:.. code:: py    f1 = Fraction(1, 2)    f2 = Fraction(3, 4)    #fraction allows for    f1 &lt; f2    f1 &lt;= f2    f1 == f2    f1 &gt; f2    f1 &gt;= f2MixedNum ClassRepresents a mixed numberImporting:.. code:: py    from influence.math import mixednum    #or    from influence.math.mixednum import MixedNumberInitializing:.. code:: py    m = MixedNumber(coeff, num, denom)    #creates a mixed number with a coefficient coeff, numerator num    #and denominator denomMethods:.. code:: py    m.simplify()    #simplifies this mixed number, if possible    m.__float__() / float(m)    #returns the float value of the mixed number    m.__int__() / int(m)    #returns the int value of the mixed number    m.__str__() / str(m)    #returns the mixed number as a str    m.to_fraction()    #returns the mixed number as a new improper fractionCompare:.. code:: py    m1 = MixedNumber(1, 2, 3)    m2 = MixedNumber(4, 5, 6)    #fraction allows for    m1 &lt; m2    m1 &lt;= m2    m1 == m2    m1 &gt; m2    m1 &gt;= m2Grapher SubpackageAllows for graphing equationsImporting:.. code:: py    from influence.math.grapher import Equation    from influence.math.grapher import GraphingError    from influence.math.grapher import GrapherEquation Class:Represents an equationInitializing:.. code:: py    e = Equation(eq)    #eq cannot be inferred    #ie 4x+3 needs to be 4*x+3    #ie 4x^2+2 needs to be 4*(x**2)+3GraphingError Class:GraphingError.HostileAttackError is thrown when a hostile attack isdetected with eval GraphingError.InstanceError is thrown when graphing,the parameter is not an instance of EquationGrapher Class:.. code:: py    Grapher.graph(eq)    #graphs eq, if and only if isinstance(eq, Equation) returns TrueAgrapher SubpackageAsynchronous graphing is currently a WIP but are still able to be usedImporting:.. code:: py    from influence.math.asyncgrapher import Equation    from influence.math.asyncgrapher import GraphingError    from influence.math.asyncgrapher import GrapherAgrapher works in the same exact way except Grapher.graph(eq,timetoclose=None), can have a given timeoutArray ClassMakes an array. An array is like a list, except it has a definite,unchangeable size, but elements can be changed inside of it (unlike atuple)Importing:.. code:: py    from influence.array import arrays    #or    from influence.array.arrays import ArrayInitializing:.. code:: py    arr = Array(capacity)    #initializes the array to its definite length Methods:.. code:: py    arr[index]    #gets the value at index    arr[start:stop:step]    #returns a list from an array from a slice of start, stop, and step    #raises IndexError if index out of bounds    arr[index] = item    #sets the value at index to item    #raises IndexError if index out of bounds    arr.__iter__() / iter(arr)    #returns an iterator for the array    iterator.__next__() / next(iterator)    #gets the next element from the iterator    arr.print()    #prints the array    item in arr    #returns true if item is in arr, false otherwise    arr.index(item)    #returns the index of item if in arr    #returns -1 if not found    arr.__len__() / len(arr)    #returns the length of arr    not arr    #returns True if arr has a capacity of 0    arr.__str__() / str(arr)    #returns arr as a str    arr1 + arr2    arr1 += arr2    #adds the arrays togetherArray2D ClassCreates a 2D Array, inherits from Array, and therefore has a dependencyto influence.upgrader.array.arraysImporting:.. code:: py    from influence.array import multiarray    #or    from influence.array.multiarray import Array2DInitializing:.. code:: py    arr = Array2D(r, c)    #creates a 2D array to a fixed amount of rows (r) and columns (c)Methods:.. code:: py    arr[r_index][c_index]    #returns the value at r_index and c_index    #raises IndexError if index out of bounds    arr[r_index][c_index] = item    #sets value at r_index and c_index to item    #raises IndexError if index out of bounds    arr.print()    #prints the 2D array    item in arr    #returns true if item is in arr, false otherwise    arr.index(item)    #returns the indices of item in arr, if found    #returns [-1] otherwise    arr.__len__() / len(arr)    #returns length of arrStringBuffer ClassMakes strings mutable, like in javaImporting:.. code:: py    from influence.string import stringbuffer    #or    from influence.string.stringbuffer import StringBufferInitializing:.. code:: py    s = StringBuffer(str='')    #initializes a string buffer to str, empty if none enteredMethods:.. code:: py    s.__len__() / len(s)    #returns the length of s    obj in s    #returns true if obj is in s, false otherwise    s.__iter__() / iter(s)    #returns an iterator for s    s.__next__() / next(s)    #gets next letter in s    s.__str__() / str(s)    #gets s as a normal string    s[index]    #gets letter at index    s[start:stop:step]    #gets letters starting at start, up to but discluding stop, incrementing by step    s[index] = item    #sets letter at index to item    s.append(append)    #appends append to s    s.index(obj)    #returns the index of obj in s    s.insert(index, obj)    #inserts obj at index    s.replace(start, stop, obj)    #replaces the chars from stop to stop (discluding stop) with obj    del s[index]    #deletes the char at index    s1 + s2    s1 += s2    #adds stringbuffers togetherStack ClassRepresents a stack of items, top being the newest, and bottom being theoldestImporting:.. code:: py    from influence.list import stack    #or    from influence.list.stack import StackInitializing:.. code:: py    s = Stack()    #creates an empty stackMethods:.. code:: py    s.push(obj)    #puts an item to the top of the stack    s.pop()    #removes the top item in the stack    #raises stack.EmptyStackError if stack is empty    s.peek()    #gets the top item in the stack without removing it    #returns None if stack is empty    s.empty()    #returns True if s is empty    obj in s    #returns True if obj is in s, False otherwise    s.index(obj)    #returns the index of obj, -1 if not found    s.__len__() / len(s)    #returns the length of s    s.__str__() / str(s)    #returns s as a strInsertableDict ClassA dict which can insert items at a certain indexImporting:.. code:: py    from influence.dict import idict    #or    from influence.dict.idict import InsertableDictInitializing:.. code:: py    i = InsertableDict()    #creates an empty insertable dictMethods:.. code:: py    i[key]    #gets the value from i of key key    i[key] = item    #sets the value at key to item    #or creates a new key and value if key not in i    i.__len__() / len(i)    #gets the length of i    i.get(key)    #like i[key] but returns None if key is not in i    i.append(key, item)    #appends key and item to the end of the i    i.keys()    #returns the keys of i    i.values()    #returns the values of i    i.__str__() / str(i)    #returns i as a str    i.remove(key)    #removes the key and value of key    i.pop()    #removes the last element in i    i.__iter__() / iter(i)    #returns an iter object for i    i.__next__() / next(i)    #returns the next element in i    i.insert(index, key, value)    #inserts key and value at index (index starts at 0)TreeSet ClassA normal set (where you can't have duplicate items), except all itemsare automatically sorted upon addingImporting:.. code:: py    from influence.set import treeset    #or    from influence.set.treeset import TreeSetInitializing:.. code:: py    ts = TreeSet(t)    #creates a treeset that takes in values of type tMethods:.. code:: py    ts.add(item)    #adds item to ts and sorts the set    #raises ValueError if item is not of instance t    #returns True if added, False if item already in set    obj in ts    #returns True if obj is in ts, False otherwise    ts.remove(item)    #removes item from ts    #raises an error if item not in ts    ts.discard(item)    #removes item from ts if found    #does not raise an error if not found    ts.__len__() / len(ts)    #returns the length of ts    ts.__str__() / str(ts)    #returns ts as a str    ts.__iter__() / iter(ts)    #returns an iterator for ts    ts.__next__() / next(ts)    #returns the next element in ts    ts.pop()    #removes the last element in tsTreeMap ClassA normal dictionary, except items are automatically sorted by key fromleast to greatestImporting:.. code:: py    from influence.dict import treemap    #or    from influence.dict.treemap import TreeMapInitializing:.. code:: py    tm = TreeMap()    #initializes an empty treemapMethods:.. code:: py    tm.add(key, value)    #adds key and value to tm and sorts the dict    obj in tm    #returns True if obj is in tm.keys() or tm.values(), False otherwise    tm.keys()    #returns the keys in tm    tm.values()    #returns the values in tm    tm.__str__() / str(tm)    #returns tm as a str    tm.remove(key)    #removes the key and value of key from tm    tm.pop()    #removes the last element key and value from tm    tm.__len__() / len(tm)    #returns the length of tm    tm.__iter__() / iter(tm)    #returns an iterator for tm    tm.__next__() / next(tm)    #returns the next element in tmStemLeaf ClassCreates a stem and leaf plotImporting:.. code:: py    from influence.math import stemandleaf    #or    from influence.math.stemandleaf import StemLeafInitializing:.. code:: py    sl = StemLeaf()    #initializes an empty stem and leaf plotMethods:.. code:: py    sl.plot(stem, leaf)    #adds the stem and leaf to plot    sl.remove(stem, leaf)    #removes the leaf from the given stem if found    #raises stemandleaf.NoStemError if stem not found    #raises stemandleaf.NoLeafError if leaf not found in stem    sl.__str__() / str(sl)    #returns sl as a str    sl.empty()    #returns True if sl is empty, False otherwiseLicense=======MIT LicenseCopyright (c) 2020 RandomKiddoPermission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the&quot;Software&quot;), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>