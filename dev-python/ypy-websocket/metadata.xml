<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Ypy-websocketYpy-websocket is an async WebSocket connector for Ypy.[![Build Status](https://github.com/y-crdt/ypy-websocket/workflows/CI/badge.svg)](https://github.com/y-crdt/ypy-websocket/actions)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)---**Documentation**: &lt;a href=&quot;https://davidbrochart.github.io/ypy-websocket target=&quot;_blank&quot;&gt;https://davidbrochart.github.io/ypy-websocket&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/y-crdt/ypy-websocket&quot; target=&quot;_blank&quot;&gt;https://github.com/y-crdt/ypy-websocket&lt;/a&gt;---Ypy-websocket is a Python library for building WebSocket servers and clients that connect and synchronize shared documents.It can be used to create collaborative web applications.The following diagram illustrates a typical architecture. The goal is to share a document among several clients.Each client has an instance of a [YDoc](https://ypy.readthedocs.io/en/latest/autoapi/y_py/index.html#y_py.YDoc), representing their view of a document. A shared document also lives in a [room](./reference/Room.md) on the server side. Conceptually, a room can be seen as the place where clients collaborate on a document. The WebSocket to which a client connects points to the corresponding room through the endpoint path. In the example below, clients A and B connect to a WebSocket at path `room-1`, and thus both clients find themselves in a room called `room-1`. All the `YDoc` synchronization logic is taken care of by the [WebsocketProvider](./reference/WebSocket_provider.md).Each update to a shared document can be persisted to disk using a [store](./reference/Store.md), which can be a file or a database.```mermaidflowchart TD    classDef room1 fill:#f96    classDef room2 fill:#bbf    A[Client A&lt;br&gt;room-1]:::room1 &lt;--&gt;|WebSocket&lt;br&gt;Provider| server(WebSocket Server)    B[Client B&lt;br&gt;room-1]:::room1 &lt;--&gt;|WebSocket&lt;br&gt;Provider| server    C[Client C&lt;br&gt;room-2]:::room2 &lt;--&gt;|WebSocket&lt;br&gt;Provider| server    D[Client D&lt;br&gt;room-2]:::room2 &lt;--&gt;|WebSocket&lt;br&gt;Provider| server    server &lt;--&gt; room1((room-1&lt;br&gt;clients: A, B)):::room1    server &lt;--&gt; room2((room-2&lt;br&gt;clients: C, D)):::room2    A &lt;-..-&gt; room1    B &lt;-..-&gt; room1    C &lt;-..-&gt; room2    D &lt;-..-&gt; room2    room1 ---&gt; store1[(Store)]    room2 ---&gt; store2[(Store)]```</longdescription>
</pkgmetadata>