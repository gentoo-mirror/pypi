<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pgtest [![Build Status](https://travis-ci.org/jamesnunn/pgtest.svg?branch=master)](https://travis-ci.org/jamesnunn/pgtest)Creates a temporary, local PostgreSQL database cluster and server specifically for unittesting, and cleans up after itself.```PGTest(username='postgres', port=None, log_file=None, no_cleanup=False,       copy_cluster=None, base_dir=None, pg_ctl=None, max_connections=5)Args:    username - str, username for default database superuser    port - int, port to connect on; you must ensure that the port is unused    log_file - str, path to place the log file    no_cleanup - bool, don't clean up dirs after PGTest.close() is called    copy_cluster - str, copies cluster from this path    base_dir - str, path to the base directory to init the cluster    pg_ctl - str, path to the pg_ctl executable to use    max_connections - int, maximum number of connections to the clusterAttributes:    PGTest.port - int, port number bound by PGTest    PGTest.cluster - str, cluster directory generated by PGTest    PGTest.username - str, username used by PGTest. Default is 'postgres'    PGTest.log_file - str, path to postgres log file    PGTest.pg_ctl - str, path to pg_ctl executable    PGTest.url - str, url for default postgres database on the cluster    PGTest.dsn - dict, dictionary containing dsn key-value pairs for the                 default postgres database on the clusterMethods:    close() - Closes this instance of PGTest, cleans up directories    ```Usage as an instance```&gt;&gt;&gt; from pgtest.pgtest import PGTest&gt;&gt;&gt; import psycopg2&gt;&gt;&gt; pg = PGTest()Server started: postgresql://postgres@localhost:47251/postgres&gt;&gt;&gt; pg.port47251&gt;&gt;&gt; pg.cluster'/tmp/tmpiDtBjs/data'&gt;&gt;&gt; pg.username'postgres'&gt;&gt;&gt; pg.log_file'/tmp/tmpiDtBjs/pgtest_log.txt'&gt;&gt;&gt; pg.pg_ctlu'/usr/lib/postgresql/9.4/bin/pg_ctl'&gt;&gt;&gt; pg.url'postgresql://postgres@localhost:47251/postgres'&gt;&gt;&gt; pg.dsn{'user': 'postgres', 'host': 'localhost','port': 47251, 'database': 'postgres'}&gt;&gt;&gt; # Connect with other db driver here, e.g. psql, psycopg2,&gt;&gt;&gt; # sqlalchemy etc&gt;&gt;&gt; psycopg2.connect(**pg.dsn)&gt;&gt;&gt; pg.close()Server stopped```Or use as a context:```&gt;&gt;&gt; from pgtest.pgtest import PGTest&gt;&gt;&gt; import psycopg2&gt;&gt;&gt; with PGTest() as pg:...    # connect to db with psycopg/sqlalchemy etc...    psycopg2.connect(**pg.dsn)...    # Do other database actions here&gt;&gt;&gt; # When the context exits, the db cluster and service is deleted unless specified```Use with `unittest` in the `setUp()` and `tearDown()` methods:```import unittestfrom pgtest.pgtest import PGTestclass TestThirdPartyDrivers(unittest.TestCase):    @classmethod    def setUpClass(cls):        cls.pg = pgtest.PGTest()        cls.base_dir = cls.pg._base_dir    @classmethod    def tearDownClass(cls):        cls.pg.close()    def test_something(self):        self.assertTrue(isinstance(self.pg, PGTest)```</longdescription>
</pkgmetadata>