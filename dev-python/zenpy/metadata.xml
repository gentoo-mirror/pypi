<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/facetoe/zenpy.svg?branch=master)](https://travis-ci.org/facetoe/zenpy)# ZenpyZenpy is a Python wrapper for the Zendesk, Chat and HelpCentre APIs. The goal of the project is to make it easy to write clean, fast, Pythonic code when interacting with Zendesk progmatically. The wrapper tries to keep API calls to a minimum. Wherever it makes sense objects are cached, and attributes of objects that would trigger an API call are evaluated lazily.Zenpy supports both Python2 and Python3.Please report bugs!* [Quickstart](#quickstart)* [Examples](#examples)  * Ticketing    * [Creating a ticket with a different requester](#creating-a-ticket-with-a-different-requester)    * [Commenting on a ticket](#commenting-on-a-ticket)    * [Adding a HTML comment to a ticket](#adding-a-html-comment-to-a-ticket)    * [Appending tags to a ticket](#appending-tags-to-a-ticket)    * [Uploading an attachment](#uploading-an-attachment)    * [Creating a ticket with a custom field set](#creating-a-ticket-with-a-custom-field-set)    * [Updating a custom field on a ticket](#updating-a-custom-field-on-a-ticket)    * [Applying a Macro to a ticket](#applying-a-macro-to-a-ticket)  * Users    * [Adding a photo to a user](#adding-a-photo-to-a-user)  * Help center    * [List all categories from help center](#List-all-categories-from-help-center)    * [List all help center articles](#List-all-help-center-articles)    * [List all help center articles in a section](#List-all-help-center-articles-in-a-section)    * [Create new category in help center](#Create-new-category-in-help-center)    * [Create new section in help center](#Create-new-section-in-help-center)    * [Create new article in help center](#Create-new-article-in-help-center)  * Other    * [Working with webhooks](#Working-with-webhooks)    * [Pagination](#Pagination)* [Documentation](#documentation)* [Contributions](#contributions)## Quickstart```pythonfrom zenpy import Zenpyfrom zenpy.lib.api_objects import Ticket# Create a Zenpy instancezenpy_client = Zenpy(**credentials)# Create a new ticketzenpy_client.tickets.create(Ticket(subject=&quot;Important&quot;, description=&quot;Thing&quot;))# Perform a simple searchfor ticket in zenpy_client.search('PC LOAD LETTER', type='ticket', assignee='facetoe'):    # No need to mess around with ids, linked objects can be accessed directly.    print(ticket.requester.name)    # All objects can be converted to a Python dict.    print(ticket.to_dict())    # Or to JSON.    print(ticket.to_json())```## Examples##### Searching open and pending tickets for a specific user and sort them by descending```pythonzenpy_client.search(type='ticket', status_less_than='closed', assignee='foo@mail.foo', sort_order='desc')```##### Searching only opened tickets```pythonzenpy_client.search(type='ticket', status='open')```##### Exporting all tickets matching the queryBy default, Search API has a limit of 1000 results in total.Search Export API allows exporting unlimited number of results, so if you'd like to export all results, use this method instead:```pythonfor ticket in zenpy_client.search_export(type='ticket', status='open'):    print(ticket)```Read more about these limitations:[Search results limits](https://developer.zendesk.com/api-reference/ticketing/ticket-management/search/#results-limit)[Search Export API release notes](https://support.zendesk.com/hc/en-us/articles/4408825120538-Support-API-Announcing-the-Export-Search-Results-endpoint-)##### Creating a ticket with a different requester```pythonfrom zenpy.lib.api_objects import Ticket, Userzenpy_client.tickets.create(    Ticket(description='Some description',           requester=User(name='bob', email='bob@example.com')))```##### Commenting on a ticket```pythonfrom zenpy.lib.api_objects import Commentticket = zenpy_client.tickets(id=some_ticket_id)ticket.comment = Comment(body=&quot;Important private comment&quot;, public=False)zenpy_client.tickets.update(ticket)```##### Adding a HTML comment to a ticket```pythonfrom zenpy.lib.api_objects import Ticket, Commentzenpy_client.tickets.create(Ticket(    subject='Html comment example',    comment=Comment(body='The smoke is very colorful',                    html_body='&lt;h2&gt;The smoke is &lt;i&gt;very&lt;/i&gt; colourful&lt;/h2&gt;')))```##### Appending tags to a ticket```pythonfrom zenpy.lib.api_objects import Ticketticket = zenpy_client.tickets(id=some_ticket_id)ticket.tags.extend(['onetag', 'twotag', 'threetag', 'four'])zenpy_client.tickets.update(ticket)```##### Uploading an attachment```pythonfrom zenpy.lib.api_objects import Comment# Upload the file (or file-like object) to Zendesk and obtain an Upload instanceupload_instance = zenpy_client.attachments.upload('/tmp/awesome_file.txt')ticket = zenpy_client.tickets(id=some_ticket_id)ticket.comment = Comment(body='This comment has my file attached', uploads=[upload_instance.token])zenpy_client.tickets.update(ticket)```##### Creating a ticket with a custom field set```pythonfrom zenpy.lib.api_objects import CustomField, Ticketticket_audit = zenpy_client.tickets.create(Ticket(    subject='Has custom field',    description=&quot;Wow, such field&quot;,    custom_fields=[CustomField(id=43528467, value=1337)]))```##### Updating a custom field on a ticket```pythonfrom zenpy.lib.api_objects import CustomFieldticket = zenpy_client.tickets(id=some_ticket_id)ticket.custom_fields.append(CustomField(id=43528467, value=1337))zenpy_client.tickets.update(ticket)```##### Applying a Macro to a ticket```python# Execute the show_macro_effect() method which returns what the macro *would* do.# The method accepts either Zenpy objects or ids.macro_result = zenpy_client.tickets.show_macro_effect(ticket_id_or_object, macro_id_or_object)# Update the ticket to actually change the ticket.zenpy_client.tickets.update(macro_result.ticket)```##### Adding a photo to a user```pythonuser = zenpy_client.users(id=user_id)user.remote_photo_url = 'http://domain/example_photo.jpg'zenpy_client.users.update(user)```##### List all categories from help center```pythoncategories = zenpy_client.help_center.categories()for category in categories:    pass```##### List all help center articles```pythonarticles = zenpy_client.help_center.articles(section=section)for article in articles:    pass```##### List all help center articles in a section```pythonsection = zenpy_client.help_center.categories.sections(category_id=category.id)articles = zenpy_client.help_center.sections.articles(section=section)for article in articles:    pass```##### Create new category in help center```pythonfrom zenpy import Zenpyfrom zenpy.lib.api_objects.help_centre_objects import Categorynew_category = zenpy_client.help_center.categories.create(            Category(                name=&quot;Category name&quot;,                description=&quot;Category description&quot;,                locale=&quot;en-us&quot;,                created_at=datetime.now(),                updated_at=datetime.now()            )        )print(new_category.to_dict(serialize=True))```##### Create new section in help center```pythonfrom zenpy import Zenpyfrom zenpy.lib.api_objects.help_centre_objects import Sectionnew_section = zenpy_client.help_center.sections.create(            Section(                name=&quot;Section name&quot;,                description=&quot;Section description&quot;,                category_id=new_category.id,                locale=&quot;en-us&quot;,                created_at=datetime.now(),                updated_at=datetime.now()            )        )print(new_section.to_dict(serialize=True))```##### Create new article in help center```pythonfrom zenpy import Zenpyfrom zenpy.lib.api_objects.help_centre_objects import Articlenew_article = zenpy_client.help_center.articles.create(                    section=new_section.id,                    article=Article(                        name=&quot;Article Name&quot;,                        body=&quot;&lt;p&gt;Article html content body&lt;/p&gt;&quot;,                        locale=&quot;en-us&quot;,                        title=&quot;Article title&quot;,                        section_id=new_section.id,                        created_at=datetime.now(),                        updated_at=datetime.now()                    ),                )print(new_article.to_dict(serialize=True))```##### Working with webhooks###### Show a webhook```pythonwebhook = zenpy_client.webhooks(id=WEBHOOK_ID) ```###### List webhooks```python# Just list all the webhooksfor webhook in zenpy_client.webhooks.list():    pass # Do something with it# Filter the webhooks by a string in the namefor webhook in zenpy_client.webhooks.list(filter='some string'):    pass # Do something with it# Using sorting and pagination according to https://developer.zendesk.com/api-reference/event-connectors/webhooks/webhooks/#list-webhookszenpy_client.webhooks.list(sort='name')zenpy_client.webhooks.list(page_before=X, page_size=Y)zenpy_client.webhooks.list(page_after=N, page_size=Y)```###### Creating a webhook that uses basic authentication```pythonfrom zenpy.lib.api_objects import Webhooknew_webhook = Webhook(    authentication={        &quot;add_position&quot;: &quot;header&quot;,        &quot;data&quot;: {            &quot;password&quot;: &quot;hello_123&quot;,            &quot;username&quot;: &quot;john_smith&quot;        },        &quot;type&quot;: &quot;basic_auth&quot;    },    endpoint=&quot;https://example.com/status/200&quot;,    http_method=&quot;GET&quot;,    name=&quot;Example Webhook&quot;,    description=&quot;Webhook description&quot;,    request_format=&quot;json&quot;,    status=&quot;active&quot;,    subscriptions=[&quot;conditional_ticket_events&quot;],) zenpy_client.webhooks.create(new_webhook)```###### Creating a webhook that uses no authentication```pythonnew_webhook = Webhook(    endpoint=&quot;https://example.com/status/200&quot;,    http_method=&quot;GET&quot;,    name=&quot;Example Webhook&quot;,    description=&quot;Webhook description&quot;,    request_format=&quot;json&quot;,    status=&quot;active&quot;,    subscriptions=[&quot;conditional_ticket_events&quot;],) zenpy_client.webhooks.create(new_webhook)```###### Creating a webhook that uses bearer token authentication```pythonnew_webhook = Webhook(    authentication={        &quot;add_position&quot;: &quot;header&quot;,        &quot;data&quot;: {            &quot;token&quot;: &quot;{{token}}&quot;        },        &quot;type&quot;: &quot;bearer_token&quot;    },    # other fields) zenpy_client.webhooks.create(new_webhook)```###### Updating a webhook```pythonfrom zenpy.lib.api_objects import Webhookwebhook = zenpy_client.webhooks(id=WEBHOOK_ID) # Note: We need a brand new object because of API specific requirements for 'update'# https://developer.zendesk.com/api-reference/event-connectors/webhooks/webhooks/#update-webhooknew_webhook = Webhook(                    name=&quot;New name&quot;,                    request_format=&quot;json&quot;,                    http_method=&quot;GET&quot;,                    endpoint=&quot;https://example.com/status/200&quot;,                    status=&quot;active&quot;,                    authentication={                      &quot;add_position&quot;: &quot;header&quot;,                      &quot;data&quot;: {                          &quot;password&quot;: &quot;hello_123&quot;,     # As we can't get it back we need to pass it again from scratch                          &quot;username&quot;: &quot;john_smith&quot;                      },                      &quot;type&quot;: &quot;basic_auth&quot;                  },)response = zenpy_client.webhooks.update(webhook.id, new_webhook)```###### Partially updating (patching) a webhook```pythonwebhook = zenpy_client.webhooks(id=WEBHOOK_ID)webhook.name = 'A new name'response = zenpy_client.webhooks.patch(webhook)```###### Cloning a webhook```pythonfrom zenpy.lib.api_objects import Webhookan_existing_webhook = zenpy_client.webhooks(id=WEBHOOK_ID) new_webhook = zenpy_client.webhooks.clone(an_existing_webhook)# Or justnew_webhook = zenpy_client.webhooks.clone(WEBHOOK_ID)```###### Working with secrets```pythonsecret = zenpy_client.webhooks.show_secret(webhook)print(secret.secret)secret = zenpy_client.webhooks.reset_secret(webhook)print(secret.secret)```###### Testing webhooks```python# Testing an existing webhook &quot;as is&quot;&quot;response = zenpy_client.webhooks.test(webhook)# Testing an existing webhook with modifications response = zenpy_client.webhooks.test(                    webhook,                     request=dict(                      endpoint='https://example.org/'                    ))# Sending a test request without creating a webhookresponse = zenpy_client.webhooks.test(                    request=dict(                        endpoint=&quot;https://example.org&quot;,                        request_format=&quot;json&quot;,                        http_method=&quot;GET&quot;,                    )                )```##### PaginationPlease refer to the [official documentation](https://developer.zendesk.com/api-reference/introduction/pagination/) to get details. Also check this article: [Which endpoints are supported?](https://support.zendesk.com/hc/en-us/articles/4408846180634#h_01FF626TG8VD0W4JP9DBBSXESK)```python# An old style offset pagination, not recommended. Since August 15, 2023, is limited to 100 pages.fields = zenpy_client.ticket_fields()# Orfields = zenpy_client.ticket_fields(cursor_pagination=False)# A new cursor offset paginationfields = zenpy_client.ticket_fields(cursor_pagination=True) # is equal to 100 results per page# Orfields = zenpy_client.ticket_fields(cursor_pagination=50) # 50 results per page```## DocumentationCheck out the [documentation](http://docs.facetoe.com.au/) for more info.### ContributionsContributions are very welcome. I've written an explanation of the core ideas of the wrapper in the [Contributors Guide](https://github.com/facetoe/zenpy/wiki/Contributors-Guide).</longdescription>
</pkgmetadata>