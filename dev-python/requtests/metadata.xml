<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Requtests![PyPI](https://img.shields.io/pypi/v/requtests)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/requtests)![PyPI - Status](https://img.shields.io/pypi/status/requtests)![PyPI - License](https://img.shields.io/pypi/l/requtests)[![Python package](https://github.com/funnel-io/requtests/actions/workflows/python-package.yml/badge.svg)](https://github.com/funnel-io/requtests/actions/workflows/python-package.yml)Test helpers for the [requests](https://docs.python-requests.org) library## InstallationInstall the package `requtests` version `1.0+` from PyPI.The recommended `requirements.txt` line is `requtests~=1.0`.### `FakeAdapter`Creates an adapter intended for use with `request.Session`.Returns the passed `Response` instance when the adapter's `send` method is called. If the `assertions` function has been specified, it will be called with the request before returning the response.The faked adapter can be mounted using the standard `mount` method on an instance of `Session` with a suitable URL prefix. Use multiple faked adapters, specifically mounted for some URL:s, to simulate a chain of requests and responses being made.#### Example```python3from requtests import FakeAdapter, fake_responsefrom requests import Sessionclass Client:    def __init__(self):        self.session = Session()    def create_user(self, username):        return self.session.post(            &quot;https://example.com/users&quot;,            params={&quot;action&quot;: &quot;create&quot;},            json={&quot;username&quot;: username},            headers={&quot;Authorization&quot;: &quot;Bearer token&quot;},        )def test_create_user():    user_created_response = fake_response(json={&quot;message&quot;: &quot;User created!&quot;}, status_code=201)    adapter = FakeAdapter(user_created_response, assertions=_create_user_assertions)    prefix = &quot;https://example.com/users&quot;        client = Client()    client.session.mount(prefix, adapter)    actual_response = client.create_user(&quot;my_username&quot;)    assert actual_response.status_code == 201    assert actual_response.json() == {&quot;message&quot;: &quot;User created!&quot;}def _create_user_assertions(prepared_request, **kwargs):    assert prepared_request.method == &quot;POST&quot;    assert prepared_request.url == &quot;https://example.com/users?action=create&quot;    assert prepared_request.headers[&quot;Authorization&quot;] == &quot;Bearer token&quot;    assert prepared_request.body == b'{&quot;username&quot;: &quot;my_username&quot;}'```### `fake_request`Returns a function behaving as `requests.request`, except that it returns a different response each time it is called. Useful to test e.g. pagination.### `fake_request_with_response`Similar to `fake_request`, except that it instantiates a single `Response` object and returns it based on its arguments.#### Example```python3import requestsfrom requtests import fake_request_with_responsedef login(username, password, request_func=requests.request):    response = request_func(&quot;POST&quot;, &quot;https://example.com/login&quot;, data={&quot;username&quot;: username, &quot;password&quot;: password})    response.raise_for_status()    return response.json()[&quot;token&quot;]def test_login():    username = &quot;my-username&quot;    password = &quot;my-password&quot;    request_func = fake_request_with_response(json={&quot;token&quot;: &quot;my-login-token&quot;})    assert login(username, password, request_func=request_func) == &quot;my-login-token&quot;```### `fake_response`Returns a `requests.Response` object with either the return value of its `json()` method set to a python data structure or its `text` property set.</longdescription>
</pkgmetadata>