<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sshkeyboardThe only keyboard event callback library that works _everywhere_, even whenused through an [SSH](https://en.wikipedia.org/wiki/Secure_Shell) connection(hence the name).It works with headless computers and servers, or for example inside WindowsSubsystem for Linux (WSL 2). One good use case is controlling Raspberry Pibased robots or RC cars through SSH. Note that this library can also be usedlocally without an SSH connection.It does not depend on X server, uinput, root access (sudo) orany external dependencies.Supports [asyncio](https://docs.python.org/3/library/asyncio.html) andsequential/concurrent callback modes. For Python 3.6+.[Documentation](https://sshkeyboard.readthedocs.io) -[Github source](https://github.com/ollipal/sshkeyboard) -[PyPI](https://pypi.org/project/sshkeyboard/) -[Reference](https://sshkeyboard.readthedocs.io/en/latest/reference.html) -[![Downloads](https://static.pepy.tech/personalized-badge/sshkeyboard?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=Downloads)](https://pepy.tech/project/sshkeyboard)## Quick startInstallation:```textpip install sshkeyboard```Simple example to fire events when a key is pressed or released.`esc` key ends listening by default:```pythonfrom sshkeyboard import listen_keyboarddef press(key):    print(f&quot;'{key}' pressed&quot;)def release(key):    print(f&quot;'{key}' released&quot;)listen_keyboard(    on_press=press,    on_release=release,)```Output:```text$ python example.py'a' pressed'a' released```## How it worksThe sshkeyboard library works without[X server](https://en.wikipedia.org/wiki/X_Window_System)and [uinput](https://www.kernel.org/doc/html/v4.12/input/uinput.html).On Unix based systems (such as Linux, macOS) it works by parsing charactersfrom [sys.stdin](https://docs.python.org/3/library/sys.html#sys.stdin). Thisis done with [fcntl](https://docs.python.org/3/library/fcntl.html) and[termios](https://docs.python.org/3/library/termios.html) standard librarymodules.On Windows [msvcrt](https://docs.python.org/3/library/msvcrt.html) standardlibrary module is used to read user input. The Windows support is still new,so please create [an issue](https://github.com/ollipal/sshkeyboard/issues)if you run into problems.This behaviour allows it to work where other libraries like[pynput](#comparison-to-other-keyboard-libraries) or[keyboard](#comparison-to-other-keyboard-libraries) do not work, butit comes with some **limitations**, mainly:1. Holding multiple keys down at the same time does not work, the library   releases the previous keys when a new one is pressed. Releasing keys also   happens after a short delay, and some key presses can get lost if the same   key gets spammed fast.2. Some keys do not write to `sys.stdin` when pressed, such as `Ctrl`,   `Shift`, `Caps Lock`, `Alt` and `Windows`/`Command`/`Super` key. That is   why this library does not attempt to parse those even if they could be   technically be parsed in some cases## Advanced use### Sequential modeNormally this library allows `on_press` and `on_release` callbacks to be runconcurrently. This means that by running:```pythonimport timefrom sshkeyboard import listen_keyboarddef press(key):    print(f&quot;'{key}' pressed&quot;)    time.sleep(3)    print(f&quot;'{key}' slept&quot;)listen_keyboard(on_press=press)```and pressing `&quot;a&quot;`, `&quot;s&quot;` and `&quot;d&quot;` keys will log:```text'a' pressed's' pressed'd' pressed'a' slept's' slept'd' slept```But sometimes you don't want to allow the callbacks to overlap, thenyou should set `sequential` parameter to `True`:```python# ...listen_keyboard(    on_press=press,    sequential=True,)```Then pressing `&quot;a&quot;`, `&quot;s&quot;` and `&quot;d&quot;` keys will log:```text'a' pressed'a' slept's' pressed's' slept'd' pressed'd' slept```### AsyncioYou can also use asynchronous functions as `on_press` / `on_release` callbackswith `listen_keyboard`:```pythonimport asynciofrom sshkeyboard import listen_keyboardasync def press(key):    print(f&quot;'{key}' pressed&quot;)    await asyncio.sleep(3)    print(f&quot;'{key}' slept&quot;)listen_keyboard(on_press=press)```&gt; **NOTE** remember to use `await asyncio.sleep(...)` in async callbacksinstead of `time.sleep(...)` or the timings will fail:### Mixing asynchronous and concurrent callbacks`listen_keyboard` also supports mixing asynchronous and concurrent callbacks:```pythonimport asyncioimport timefrom sshkeyboard import listen_keyboardasync def press(key):    print(f&quot;'{key}' pressed&quot;)    await asyncio.sleep(3)    print(f&quot;'{key}' press slept&quot;)def release(key):    print(f&quot;'{key}' relased&quot;)    time.sleep(3)    print(f&quot;'{key}' release slept&quot;)listen_keyboard(    on_press=press,    on_release=release,)```Here pressing `&quot;a&quot;` and `&quot;s&quot;` will log:```text'a' pressed'a' relased's' pressed's' relased'a' press slept's' press slept'a' release slept's' release slept```And with `sequential=True`:```python# ...listen_keyboard(    on_press=press,    on_release=release,    sequential=True,)```will log:```text'a' pressed'a' press slept'a' relased'a' release slept's' pressed's' press slept's' relased's' release slept```&gt; **NOTE** remember to use `await asyncio.sleep(...)` in async callbacksinstead of `time.sleep(...)` or the timings will fail:### Stop listeningYou can change the key that ends the listening by giving `until` parameter,which defaults to `&quot;esc&quot;`:```python# ...listen_keyboard(    on_press=press,    until=&quot;space&quot;,)```You also can manually stop listening by calling `stop_listening()` from thecallback or from some other function:```pythonfrom sshkeyboard import listen_keyboard, stop_listeningdef press(key):    print(f&quot;'{key}' pressed&quot;)    if key == &quot;z&quot;:        stop_listening()listen_keyboard(on_press=press)````until` can be also set to `None`. This means that listening ends only with`stop_listening()` or if an error has been raised.### TroubleshootingIf some keys do not seem to register correctly, try turning the debug mode on.This will add logs if some keys are skipped intentionally:```python# ...listen_keyboard(    on_press=press,    debug=True,)```If one key press causes multiple `on_press` / `on_release` callbacks or ifreleasing happens too slowly, you can try to tweak the default timingparameters:```python# ...listen_keyboard(    on_press=press,    delay_second_char=0.75,    delay_other_chars=0.05,)```### MoreCheck out the full[reference](https://sshkeyboard.readthedocs.io/en/latest/reference.html)for more functions and parameters such as:- `lower` parameter- `sleep` parameter- `max_thread_pool_workers` parameter- `listen_keyboard_manual` functionDirect links to functions:- [listen_keyboard](https://sshkeyboard.readthedocs.io/en/latest/reference.html#sshkeyboard.listen_keyboard)- [stop_listening](https://sshkeyboard.readthedocs.io/en/latest/reference.html#sshkeyboard.stop_listening)- [listen_keyboard_manual](https://sshkeyboard.readthedocs.io/en/latest/reference.html#sshkeyboard.listen_keyboard_manual)## DevelopmentThis sections explains how to build the documentation and how to run the[pre-commit script](https://github.com/ollipal/sshkeyboard/blob/main/pre-commit)locally. This helps if you want to create[a pull request](https://github.com/ollipal/sshkeyboard/pulls)or if you just want to try things out.Building the documentations allows you to build all of the files served on the[documentation](https://sshkeyboard.readthedocs.io) site locally.The[pre-commit script](https://github.com/ollipal/sshkeyboard/blob/main/pre-commit)handles running tests, formatting andlinting before each Git commit. These same checks also run automatically on[Github Actions](https://github.com/ollipal/sshkeyboard/blob/main/.github/workflows/main.yml).Start by cloning this library, and change directory to the project root:```textgit clone git@github.com:ollipal/sshkeyboard.gitcd sshkeyboard```Optionally, create and activate a virtual environment at the root of theproject (you might need to use `python3` keyword instead of `python`):```textpython -m venv .envsource .env/bin/activate```(Later you can deactivate the virtual environment with: `deactivate`)To build the documentation or run the pre-commit script locally, you needto install the development dependencies:```textpip install -r dev-requirements.txt```### DocumentationTo build the documentation locally, first change into `docs/` directory:```textcd docs```Then to build the documentation, call:```textmake html```Now you should have a new `docs/build/` directory, and you can open`&lt;your-clone-path&gt;/sshkeyboard/docs/build/html/index.html` from your browser.You can force the rebuild by running:```textrm -rf build/ &amp;&amp; make html```You can change the documentation content by changing `README.md` or files from`src/` or `docs/source/`. If you are mainly changing contents from`docs/source/`, you can enable automatic re-building by running:```textsphinx-autobuild ./source/ ./build/html/```### Running the pre-commit scriptYou can run the **tests**([tox](https://tox.wiki/en/latest/index.html),[pytest](https://docs.pytest.org)), **formatting**([black](https://black.readthedocs.io/en/stable/),[isort](https://pycqa.github.io/isort/)) and **linting**([pflake8](https://github.com/csachs/pyproject-flake8),[pep8-naming](https://github.com/PyCQA/pep8-naming),[codespell](https://github.com/codespell-project/codespell),[markdownlint](https://github.com/markdownlint/markdownlint)) simply byexecuting:```text./pre-commit```Now if you want to automatically run these when you call `git commit`, copythe script into `.git/hooks/` directory:```textcp pre-commit .git/hooks```&gt; **NOTE**: this process does not run `markdownlint` by default as itrequires [Ruby](https://www.ruby-lang.org/en/) to be installed. If you wantto run `markdownlint` locally as well,[install Ruby](https://www.ruby-lang.org/en/documentation/installation/)and install markdown lint with `gem install mdl -v 0.11.0`. Then from`pre-commit` change `RUN_MDL=false` to `RUN_MDL=true`. (You need to copy thefile again into `.git/hooks/` if you did that earlier)## Comparison to other keyboard librariesThe other keyboard libraries work by reading proper keycodes from the system.This means that they usually require either[X server](https://en.wikipedia.org/wiki/X_Window_System) or[uinput](https://www.kernel.org/doc/html/v4.12/input/uinput.html), so they donot work over SSH. But this means they do not have the same[limitations](#how-it-works) as this library.They usually can also support more features such as pressing the keys insteadof just reacting to user input.I have good experiences from these libraries:- [pynput](https://pynput.readthedocs.io/en/latest/)- [keyboard](https://github.com/boppreh/keyboard) (requires sudo)</longdescription>
</pkgmetadata>