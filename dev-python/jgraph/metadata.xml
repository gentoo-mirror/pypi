<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>jgraph======An embeddable webGL graph visualization library.http://patrickfuller.github.io/jgraph/Examples======== * [IPython notebook](http://patrickfuller.github.io/jgraph/examples/ipython.html) * [les mis√©rables](http://patrickfuller.github.io/jgraph/examples/miserables.html) * [github connections](http://patrickfuller.github.io/jgraph/examples/github.html)IPython=======The IPython notebook is an open-source tool poised to replace MATLAB in manyapplications. As a scientist of sorts, I'm all about it. Therefore, I madehandles to use jgraph with the notebook. Install through pip:```pip install jgraph```Open a new notebook and test the setup by typing:```pythonimport jgraphjgraph.draw([(1, 2), (2, 3), (3, 4), (4, 1), (4, 5), (5, 2)])```into a notebook cell. You should get a paddlewheel graph as an output. You canuse this in conjunction with other code for educational purposes (try generatinga red-black tree!). There are three commands and some optional parameters tocheck out. Read the docstrings and check out the [associatedexample](http://patrickfuller.github.io/jgraph/examples/ipython.html) for more.Javascript==========You can install through [npm](https://www.npmjs.com/):```npm install jgraph```Once installed, you can use with:```javascriptjgraph.create('my-selector');jgraph.draw(myGraph);```where `'my-selector'` is where you want to place jgraph, and `myGraph` is ajavascript object. See below for more on the object structure, or just check outthe included example. The `jgraph.create()` method takes a few optionalparameters, specifying the sizes and colors of nodes, as well as force-directedoptimization.```javascriptoptions = {    directed: true, // Toggles edge arrows    nodeSize: 2.0, // Default node size    edgeSize: 0.25, // Edge connection diameter    arrowSize: 1.0, // If drawn, edge arrow size    defaultNodeColor: 0xaaaaaa, // Color for nodes without a &quot;color&quot; property    defaultEdgeColor: 0x777777, // Color for edges without a &quot;color&quot; property    shader: &quot;toon&quot;, // three.js shader to use, can be &quot;toon&quot;, &quot;basic&quot;, &quot;phong&quot;, or &quot;lambert&quot;    runOptimization: true // Runs a force-directed-layout algorithm on the graph};```Graph Data Format=================jgraph takes input graph data structures as plain objects. Here's the mostboring graph in the world:```javascript{    nodes: {        jane: { },        bob: { },        mike: { },        sally: { }    },    edges: [        { source: &quot;jane&quot;, target: &quot;bob&quot; },        { source: &quot;bob&quot;, target: &quot;mike&quot; },        { source: &quot;mike&quot;, target: &quot;sally&quot; }    ]}```Nodes require no information outside of their keys. However, there are usefuloptional parameters that can be specified.```javascript{    color: 0xffffff, // Color for this node    size: 1.0, // Scaling factor for this node's size    location: [0.0, 0.0, 0.0] // Starting location of node. Useful for pre-rendering.}```By default, the algorithm runs a force-directed layout on the graph. Whenenabled, the &quot;location&quot; field is optional. However, for larger graphs, you willwant to disable this feature and pre-render the locations. Use the associatedPython library (`jgraph.generate`) to do so.</longdescription>
</pkgmetadata>