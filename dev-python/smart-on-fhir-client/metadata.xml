<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># smart-on-fhir-client ðŸ”¥Package allowing to request a fhir server with the smart-on-fhir protocol. &gt; â„¹ Warning&gt;&gt; It is not a webserver providing a webserver with a callback url&gt; usually involved in the smart-on-fhir procedure### TutorialFirst, we will need to create a partner. We can do this easily subclassing the `Partner` class.```pythonimport osfrom smart_on_fhir_client.partner import Partnerfrom smart_on_fhir_client.strategy import Strategyclass OauthFHIRProvider(Partner):    name = 'PROVIDER'    supported_strategies: set[Strategy] = {Strategy.M2M}    client_id: str = os.getenv(&quot;PROVIDER_CLIENT_ID&quot;)    client_secret: str = os.getenv(&quot;PROVIDER_CLIENT_SECRET&quot;)    token_url: str = ... # set the token url    fhir_url: str = ... # set the fhir url    # additional information    audience: str = ... # audience    database_reference: str = ... # optional     grant_type: str = &quot;client_credentials&quot; # set the credentialsFHIR_PROVIDER = OauthFHIRProvider()``````pythonfrom smart_on_fhir_client.client import smart_client_factoryfrom smart_on_fhir_client.requester.fhir_requester import fhir_client_managerfrom smart_on_fhir_client.strategy import Strategy# set up your own fhir server urlfhir_client_manager.set_own_fhir_url(&quot;http://localhost:8080/fhir&quot;)async def register():    async with smart_client_factory:        await fhir_client_manager.register_fhir_client_async(            smart_client_factory.builder()            .for_partner(FHIR_PROVIDER)            .for_strategy(Strategy.M2M)            # you can register special classes for specific fhir resources            .register_cls_for('Patient', CustomPatientResource)        )        first_patient = await fhir_client_manager.patient.search().limit(10).first()        await first_patient.pipe_to_target_fhir_server()```### FeaturesAllow to send some fetched fhir resources to another fhir servervia the `pipe_to_target_fhir_server`, making data transfer between two fhirservers easier.### NotesWork based heavily on fhir-py and fhir-resources python packages</longdescription>
</pkgmetadata>