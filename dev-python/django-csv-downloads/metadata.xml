<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django CSV DownloadsDjango app for tracking queryset-backed CSV downloads### Version supportThe current version of the this app support **Python 3.8+** and **Django 3.2+**## What does this app do?This app is used to track user downloads of CSVs that are derived from Django QuerySets. You providethe filename, queryset and the list of columns that you want to output.It has a single model (`CsvDownload`) that tracks downloads and stores the user, filename, row countand timestamp.## UsageThe recommended way to use this app is to rely on `django_csv.views.download_csv`, which wraps upthe creation of the download object and the generation of the CSV itself:```python# DISPLAY PURPOSES ONLY: DO NOT ENABLE USER DATA DOWNLOADS IN PRODUCTIONdef download_users(request: HttpRequest) -&gt; HttpResponse:    data = User.objects.all()    columns = (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;)    return download_csv(request.user, &quot;users.csv&quot;, data, *columns)```## SettingsThere is a `CSV_DOWNLOAD_MAX_ROWS` setting that is used to truncate output. Defaults to 10000. This is a backstop, and can be overridden on a per usebasis.## Examples**Caution:** All of these examples involve the User model as it's ubiquitous - DO NOT DO THIS ON APRODUCTION ENVIRONMENT.Example of writing a QuerySet to a file:```python&gt;&gt;&gt; data = User.objects.all()&gt;&gt;&gt; columns = (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;)&gt;&gt;&gt; with open('users.csv', 'w') as csvfile:&gt;&gt;&gt;     csv.write_csv(csvfile, data, *columns)10  #&lt;--- row count```adding a custom header:```python&gt;&gt;&gt; data = User.objects.all()&gt;&gt;&gt; columns = (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;)&gt;&gt;&gt; column_headers = (&quot;given_name&quot;, &quot;family_name&quot;, &quot;email_address&quot;)&gt;&gt;&gt; with open('users.csv', 'w') as csvfile:&gt;&gt;&gt;     csv.write_csv(csvfile, data, *columns, column_headers=column_headers)10```Example of writing to an HttpResponse:```python&gt;&gt;&gt; response = HttpResponse(content_type=&quot;text/csv&quot;)&gt;&gt;&gt; response[&quot;Content-Disposition&quot;] = 'attachment; filename=&quot;users.csv&quot;'&gt;&gt;&gt; csv.write_csv(response, data, *columns)10```Example of writing to an in-memory text buffer:```python&gt;&gt;&gt; buffer = io.StringIO()&gt;&gt;&gt; csv.write_csv(buffer, data, *columns)10```Example of writing directly to S3:```python&gt;&gt;&gt; with s3.s3_upload(&quot;bucket_name&quot;, &quot;object_key&quot;) as buffer:...     csv.write_csv(fileobj, queryset, *columns)10&gt;&gt;&gt; # one-line convenience function&gt;&gt;&gt; s3.write_csv_s3(&quot;bucket_name/object_key&quot;, queryset, *columns)10```Example of writing directly to SFTP:```python# requires a paramiko.SFTPClient to have been created / connected.&gt;&gt;&gt; with sft.sftp_upload(client, remote_filepath) as fileobj:...     write_csv(fileobj, queryset, *columns)10&gt;&gt;&gt; # one-line convenience function&gt;&gt;&gt; sftp.write_csv_sftp(&quot;sftp://user:pass@host:port/path&quot;, queryset, *columns)10```Example of a custom admin action to download User data:```pythonclass CustomUserAdmin(UserAdmin):    actions = ['download']    csv_fields = (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;is_staff&quot;)    csv_filename = &quot;users.csv&quot;    def download(self, request, queryset):        &quot;&quot;&quot;Download selected users as a CSV.&quot;&quot;&quot;        return download_csv(            user=request.user,            filename=CustomUserAdmin.csv_filename,            queryset=queryset,            *CustomUserAdmin.csv_fields        )    download.short_description = &quot;Download selected users&quot;```Example CBV that restricts queryset based on request.user:```pythonclass DownloadUsers(CsvDownloadView):    def has_permission(self, request: HttpRequest) -&gt; bool:        return request.user.is_authenticated    def get_queryset(self, request: HttpRequest) -&gt; QuerySetWriter:        &quot;&quot;&quot;Allow superusers to download Users.&quot;&quot;&quot;        if request.user.is_superuser:            return User.objects.all().order_by(&quot;first_name&quot;, &quot;last_name&quot;)        return User.objects.none()    def get_filename(self, request: HttpRequest) -&gt; str:        return &quot;users.csv&quot;    def get_columns(self, request: HttpRequest) -&gt; str:        return (&quot;first_name&quot;, &quot;last_name&quot;)```</longdescription>
</pkgmetadata>