<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyStackpath - StackPath Python Library[![Actions Status](https://github.com/NCCloud/pystackpath/workflows/Upload%20Python%20Package/badge.svg)](https://github.com/NCCloud/pystackpath/actions)[![Python Version](https://img.shields.io/pypi/pyversions/pystackpath)](https://pypi.org/project/pystackpath/)[![Pypi license](https://img.shields.io/pypi/l/pystackpath)](https://pypi.org/project/pystackpath/)[![GitHub stars](https://img.shields.io/badge/contributions-welcome-orange.svg)](https://github.com/NCCloud/pystackpath/blob/master/CONTRIBUTING.md)Python library interact with StackPath API (https://stackpath.dev/reference)It uses a custom OAuth2 requests.session## Install```bashpip install pystackpath```## Examples### Set up a new Stackpath instance```pythonfrom pystackpath import Stackpathsp = Stackpath(    os.getenv(&quot;STACKPATH_CLIENTID&quot;),    os.getenv(&quot;STACKPATH_APISECRET&quot;))```###  Search for stacks```pythonstacks = sp.stacks().index(filter=&quot;name='my-awesome-stack' and status='ACTIVE'&quot;)print(stacks)```### Get one stack```pythonstackid = &quot;afcdaf14-47cb-40dd-9c13-3b20e6caf74aonestack = sp.stacks().get(stackid)```### Create a new stack```pythonaccountid = &quot;081af5ee-38f8-44e9-b08a-881ea5de66f9&quot;newstack = sp.stacks().create(accountid, &quot;my-second-stack&quot;)```### Create a cdn site```pythonstackid = &quot;afcdaf14-47cb-40dd-9c13-3b20e6caf74acdnsite = sp.stacks().get(stackid).cdnsites().create(    domain=&quot;cdn.johndoe.com&quot;,    origin={&quot;hostname&quot;: &quot;www.johndoe.com&quot;},    type=&quot;CDN&quot;)```### Search for cdn sites```pythoncdnsite = sp.stacks().get(stackid).cdnsites().index(    filter=&quot;label='www.johndoe.com' and status='ACTIVE'&quot;)```### Delete a cdn site```pythoncdnsiteid = &quot;19e1a7b2-068f-491c-a95f-b64eae66dd34&quot;cdnsite = sp.stacks().get(stackid).cdnsites().get(cdnsiteid).delete()```### Disable and enable a cdn site```pythoncdnsiteid = &quot;19e1a7b2-068f-491c-a95f-b64eae66dd34&quot;cdnsite = sp.stacks().get(stackid).cdnsites().get(cdnsiteid).enable()cdnsite = cdnsite.disable()```### Purge a cdn resource and check the purge status.```pythonpurge_request_id = sp.stacks().get(stackid).purge(    [        {            &quot;url&quot;: &quot;https://example.com/resource/&quot;, # required            &quot;recursive&quot;: True,            &quot;invalidateOnly&quot;: False,            &quot;purgeAllDynamic&quot;: False,            &quot;headers&quot;: [],            &quot;purgeSelector&quot;: [],        }    ])## purge_status can be used to check the status of the requested purge.## Progress is represented as a decimal between 0 and 1, correlating to a## percentage.progress = sp.stacks().get(stackid).purge_status(purge_request_id)print(progress)##&gt;&gt; 1```## Get metrics for a stack:```pythonmetrics_response1 = sp.stacks().get(stackid).metrics().get()## Python datetime objects can be used to specify a date range, and the call## allows a granularity to be specified. If no values are provided, the search range## defaults to the last 24 hours, with 1 day granularity. See API doc for options.## https://developer.stackpath.com/en/api/cdn/#operation/GetMetrics## There is also a &quot;platforms&quot; argument which takes an array of &quot;platform&quot; codes.## However the dev guide linked below only lists &quot;CDE&quot; which tracks egress traffic, which is## how Stackpath bills for CDN usage, and &quot;CDO&quot; which is ingest traffic from the## origin host, but is not billed. Since &quot;CDE&quot; tracks billable usage, it is the## default.## https://developer.stackpath.com/docs/en/cdn/getting-stack-metrics/from datetime import datetime, timedeltaend = datetime.today()start = end - timedelta(days=7)metrics_response2 = sp.stacks().get(stackid).metrics().get(granularity=&quot;PT1H&quot;,\  platforms = [&quot;CDO&quot;, &quot;CDE&quot;], start_datetime_object = start, end_datetime_object = end)```## Retrieve all certificates from a stack:```pythoncertificate_response = sp.stacks().get(stackid).certificates() ##The object returned will have a 'results' attribute containing ##an array of the available certificates: first_certificate = certificate_response['results'][0] second_certificate = certificate_response['results'][1]```## Add, update and delete a certificate for a stack:```python##The cert and key are required, CA bundle is optional.new_cert_response = sp.stacks().get(stackid).certificates().add(\SERVER_CERTIFICATE_STRING, PRIVATE_KEY_STRING, CA_BUNDLE_STRING)##The new cert ID can be retrieved from the returned object:cert_id = new_cert_response.id##To update a cert:sp.stacks().get(stackid).certificates().update(cert_id, UPDATED_CERT_STRING, UPDATED_KEY_STRING)##To delete a cert:delete_cert_response = sp.stacks().get(stackid).certificates().delete(cert_id)```</longdescription>
</pkgmetadata>