<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img height=&quot;100&quot; src=&quot;https://github.com/qdrant/qdrant/raw/master/docs/logo.svg&quot; alt=&quot;Qdrant&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;b&gt;Python Client library for the &lt;a href=&quot;https://github.com/qdrant/qdrant&quot;&gt;Qdrant&lt;/a&gt; vector search engine.&lt;/b&gt;&lt;/p&gt;&lt;p align=center&gt;    &lt;a href=&quot;https://pypi.org/project/qdrant-client/&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/qdrant-client.svg&quot; alt=&quot;PyPI version&quot; height=&quot;18&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://qdrant.github.io/qdrant/redoc/index.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Docs-OpenAPI%203.0-success&quot; alt=&quot;OpenAPI Docs&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/qdrant/qdrant-client/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-success&quot; alt=&quot;Apache 2.0 License&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://qdrant.to/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-Qdrant-5865F2.svg?logo=discord&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://qdrant.to/roadmap&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Roadmap-2023-bc1439.svg&quot; alt=&quot;Roadmap 2023&quot;&gt;&lt;/a&gt;&lt;/p&gt;# Python Qdrant ClientClient library and SDK for the [Qdrant](https://github.com/qdrant/qdrant) vector search engine.Library contains type definitions for all Qdrant API and allows to make both Sync and Async requests.Client allows calls for all [Qdrant API methods](https://qdrant.github.io/qdrant/redoc/index.html) directly.It also provides some additional helper methods for frequently required operations, e.g. initial collection uploading.See [QuickStart](https://qdrant.tech/documentation/quick_start/#create-collection) for more details!## Installation```pip install qdrant-client```## Features- Type hints for all API methods- Local mode - use same API without running server- REST and gRPC support- Minimal dependencies## Local mode&lt;p align=&quot;center&quot;&gt;  &lt;!--- https://github.com/qdrant/qdrant-client/raw/master --&gt;  &lt;img max-height=&quot;180&quot; src=&quot;https://github.com/qdrant/qdrant-client/raw/master/docs/images/try-develop-deploy.png&quot; alt=&quot;Qdrant&quot;&gt;&lt;/p&gt;Python client allows you to run same code in local mode without running Qdrant server.Simply initialize client like this:```pythonfrom qdrant_client import QdrantClientclient = QdrantClient(&quot;:memory:&quot;)# orclient = QdrantClient(path=&quot;path/to/db&quot;)  # Persists changes to disk```Local mode is useful for development, prototyping and testing.- You can use it to run tests in your CI/CD pipeline.- Run it in Colab or Jupyter Notebook, no extra dependencies required. See an [example](https://colab.research.google.com/drive/1Bz8RSVHwnNDaNtDwotfPj0w7AYzsdXZ-?usp=sharing)- When you need to scale, simply switch to server mode.### How it works?We just implemented Qdrant API in pure Python.We covered it with tests extensively to be sure it works the same as the server version.## Connect to Qdrant serverTo connect to Qdrant server, simply specify host and port:```pythonfrom qdrant_client import QdrantClientclient = QdrantClient(host=&quot;localhost&quot;, port=6333)# orclient = QdrantClient(url=&quot;http://localhost:6333&quot;)```You can run Qdrant server locally with docker:```bashdocker run -p 6333:6333 qdrant/qdrant:latest```See more launch options in [Qdrant repository](https://github.com/qdrant/qdrant#usage).## Connect to Qdrant cloudYou can register and use [Qdrant Cloud](https://cloud.qdrant.io/) to get a free tier account with 1GB RAM.Once you have your cluster and API key, you can connect to it like this:```pythonfrom qdrant_client import QdrantClientqdrant_client = QdrantClient(    url=&quot;https://xxxxxx-xxxxx-xxxxx-xxxx-xxxxxxxxx.us-east.aws.cloud.qdrant.io:6333&quot;,    api_key=&quot;&lt;your-api-key&gt;&quot;,)```## ExamplesCreate a new collection```pythonfrom qdrant_client.models import Distance, VectorParamsclient.recreate_collection(    collection_name=&quot;my_collection&quot;,    vectors_config=VectorParams(size=100, distance=Distance.COSINE),)```Insert vectors into a collection```pythonimport numpy as npfrom qdrant_client.models import PointStructvectors = np.random.rand(100, 100)client.upsert(    collection_name=&quot;my_collection&quot;,    points=[        PointStruct(            id=idx,            vector=vector.tolist(),            payload={&quot;color&quot;: &quot;red&quot;, &quot;rand_number&quot;: idx % 10}        )        for idx, vector in enumerate(vectors)    ])```Search for similar vectors```pythonquery_vector = np.random.rand(100)hits = client.search(    collection_name=&quot;my_collection&quot;,    query_vector=query_vector,    limit=5  # Return 5 closest points)```Search for similar vectors with filtering condition```pythonfrom qdrant_client.models import Filter, FieldCondition, Rangehits = client.search(    collection_name=&quot;my_collection&quot;,    query_vector=query_vector,    query_filter=Filter(        must=[  # These conditions are required for search results            FieldCondition(                key='rand_number',  # Condition based on values of `rand_number` field.                range=Range(                    gte=3  # Select only those results where `rand_number` &gt;= 3                )            )        ]    ),    limit=5  # Return 5 closest points)```See more examples in our [Documentation](https://qdrant.tech/documentation/)!### gRPCTo enable (typically, much faster) collection uploading with gRPC, use the following initialization:```pythonfrom qdrant_client import QdrantClientclient = QdrantClient(host=&quot;localhost&quot;, grpc_port=6334, prefer_grpc=True)```### DevelopmentThis project uses git hooks to run code formatters.Install `pre-commit` with `pip3 install pre-commit` and set up hooks with `pre-commit install`.&gt; pre-commit requires python&gt;=3.8</longdescription>
</pkgmetadata>