<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/graceful.svg)](https://pypi.python.org/pypi/graceful/)[![PyPI](https://img.shields.io/pypi/pyversions/graceful.svg)](https://pypi.python.org/pypi/graceful/)[![Build Status](https://travis-ci.org/swistakm/graceful.svg?branch=master)](https://travis-ci.org/swistakm/graceful)[![Coverage Status](https://coveralls.io/repos/swistakm/graceful/badge.svg?branch=master)](https://coveralls.io/r/swistakm/graceful?branch=master)[![Documentation Status](https://readthedocs.org/projects/graceful/badge/?version=latest)](https://graceful.readthedocs.io/en/latest/)[![Join the chat at https://gitter.im/graceful-for-falcon/Lobby](https://badges.gitter.im/graceful-for-falcon/Lobby.svg)](https://gitter.im/graceful-for-falcon/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)# graceful`graceful` is an elegant Python REST toolkit built on top of[falcon](http://github.com/falconry/falcon) framework. It is highly inspiredby [Django REST framework](http://www.django-rest-framework.org/) - mostly byhow object serialization is done but more emphasis here is put on API tobe self-descriptive.Features:* generic classes for list and single object resources* simple but extendable pagination* simple but extendable authentication and authorization* structured responses with content/meta separation* declarative fields and parameters* self-descriptive-everything: API description accessible both in python and  through `OPTIONS` requests* painless validation* 100% tests coverage* falcon&gt;=0.3.0 (tested up to 1.4.x)* python3 exclusive (tested from 3.3 to 3.6)Community behind graceful is starting to grow but we don't have any mailinglist yet. There was one on [Librelist](http://librelist.com/browser/graceful)but no one used it and it seems that librelist became dead (see GitHubissue [#36](https://github.com/swistakm/graceful/issues/36)). For now let's usegitter chat until we decide on something new.Chat is available [here](https://gitter.im/graceful-for-falcon/Lobby).## python3 only**Important**: `graceful` is python3 exclusive because **right now** should bea good time to forget about python2. There are no plans for making `graceful` python2 compatible although it would be pretty straightforward to do so withexisting tools (like six).## usageFor extended tutorial and more information please refer to[guide](https://graceful.readthedocs.org/en/latest/guide/) included indocumentation. Anyway here is simple example of working API made made with `graceful`:```pythonimport falconfrom graceful.serializers import BaseSerializerfrom graceful.fields import IntField, RawFieldfrom graceful.parameters import StringParamfrom graceful.resources.generic import (    RetrieveAPI,    PaginatedListAPI,)api = application = falcon.API()# lets pretend that this is our backend storageCATS_STORAGE = [    {&quot;id&quot;: 0, &quot;name&quot;: &quot;kitty&quot;, &quot;breed&quot;: &quot;saimese&quot;},    {&quot;id&quot;: 1, &quot;name&quot;: &quot;lucie&quot;, &quot;breed&quot;: &quot;maine coon&quot;},    {&quot;id&quot;: 2, &quot;name&quot;: &quot;molly&quot;, &quot;breed&quot;: &quot;sphynx&quot;},]# this is how we represent cats in our APIclass CatSerializer(BaseSerializer):    id = IntField(&quot;cat identification number&quot;, read_only=True)    name = RawField(&quot;cat name&quot;)    breed = RawField(&quot;official breed name&quot;)class Cat(RetrieveAPI):    &quot;&quot;&quot;    Single cat identified by its id    &quot;&quot;&quot;    serializer = CatSerializer()    def get_cat(self, cat_id):        try:            return [                cat for cat in CATS_STORAGE if cat['id'] == int(cat_id)            ][0]        except IndexError:            raise falcon.HTTPNotFound    def retrieve(self, params, meta, **kwargs):        cat_id = kwargs['cat_id']        return self.get_cat(cat_id)class CatList(PaginatedListAPI):    &quot;&quot;&quot;    List of all cats in our API    &quot;&quot;&quot;    serializer = CatSerializer()    breed = StringParam(&quot;set this param to filter cats by breed&quot;)    def list(self, params, meta, **kwargs):        if 'breed' in params:            filtered = [                cat for cat in CATS_STORAGE                if cat['breed'] == params['breed']            ]            return filtered        else:            return CATS_STORAGEapi.add_route(&quot;/v1/cats/{cat_id}&quot;, Cat())api.add_route(&quot;/v1/cats/&quot;, CatList())```Assume this code is in python module named `example.py`.Now run it with [gunicorn](https://github.com/benoitc/gunicorn):    gunicorn -b localhost:8888 exampleAnd you're ready to query it (here with awesome [httpie](http://httpie.org)tool):```$ http localhost:8888/v0/cats/?breed=saimeseHTTP/1.1 200 OKConnection: closeDate: Tue, 16 Jun 2015 08:43:05 GMTServer: gunicorn/19.3.0content-length: 116content-type: application/json{    &quot;content&quot;: [        {            &quot;breed&quot;: &quot;saimese&quot;,            &quot;id&quot;: 0,            &quot;name&quot;: &quot;kitty&quot;        }    ],    &quot;meta&quot;: {        &quot;params&quot;: {            &quot;breed&quot;: &quot;saimese&quot;,            &quot;indent&quot;: 0        }    }}```Or access API description issuing `OPTIONS` request:```$ http OPTIONS localhost:8888/v0/catsHTTP/1.1 200 OKConnection: closeDate: Tue, 16 Jun 2015 08:40:00 GMTServer: gunicorn/19.3.0allow: GET, OPTIONScontent-length: 740content-type: application/json{    &quot;details&quot;: &quot;List of all cats in our API&quot;,    &quot;fields&quot;: {        &quot;breed&quot;: {            &quot;details&quot;: &quot;official breed name&quot;,            &quot;label&quot;: null,            &quot;spec&quot;: null,            &quot;type&quot;: &quot;string&quot;        },        &quot;id&quot;: {            &quot;details&quot;: &quot;cat identification number&quot;,            &quot;label&quot;: null,            &quot;spec&quot;: null,            &quot;type&quot;: &quot;int&quot;        },        &quot;name&quot;: {            &quot;details&quot;: &quot;cat name&quot;,            &quot;label&quot;: null,            &quot;spec&quot;: null,            &quot;type&quot;: &quot;string&quot;        }    },    &quot;methods&quot;: [        &quot;GET&quot;,        &quot;OPTIONS&quot;    ],    &quot;name&quot;: &quot;CatList&quot;,    &quot;params&quot;: {        &quot;breed&quot;: {            &quot;default&quot;: null,            &quot;details&quot;: &quot;set this param to filter cats by breed&quot;,            &quot;label&quot;: null,            &quot;required&quot;: false,            &quot;spec&quot;: null,            &quot;type&quot;: &quot;string&quot;        },        &quot;indent&quot;: {            &quot;default&quot;: &quot;0&quot;,            &quot;details&quot;: &quot;JSON output indentation. Set to 0 if output should not be formated.&quot;,            &quot;label&quot;: null,            &quot;required&quot;: false,            &quot;spec&quot;: null,            &quot;type&quot;: &quot;integer&quot;        }    },    &quot;path&quot;: &quot;/v0/cats&quot;,    &quot;type&quot;: &quot;list&quot;}```## contributingAny contribution is welcome. Issues, suggestions, pull requests - whatever. There is only short set of rules that guide this project development youshould be aware of before submitting a pull request:* Only requests that have passing CI builds (Travis) will be merged.* Code is checked with `flakes8` and `pydocstyle` during build so this  implicitly means that compliance with PEP-8 and PEP-257 is mandatory.* No changes that decrease coverage will be merged.One thing: if you submit a PR please do not rebase it later unless youare asked for that explicitly. Reviewing pull requests that suddenly hadtheir history rewritten just drives me crazy.## licenseSee `LICENSE` file.</longdescription>
</pkgmetadata>