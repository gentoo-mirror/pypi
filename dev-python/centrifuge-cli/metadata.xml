<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>centrifuge-cli: The official Python CLI for Centrifuge=======================================================Centrifuge is an automated firmware analysis platform. It allows users to uploadtheir firmware images to be analyzed for various security issues. This utilitygives users the ability to interact and automate tasks via the CentrifugeRESTful API.Features--------- Upload firmware- Delete firmware reports- Query firmware analysis results- Search for firmware uploadsQuick Start-----------Check your Python version (must be 3.6 or later):.. code-block:: bash    $ python --versionTo install the Centrifuge CLI, simply:.. code-block:: bash    $ pip install centrifuge-cliConfigure your environment:.. code-block:: bash    $ export CENTRIFUGE_APIKEY=xxxx    $ export CENTRIFUGE_URL=https://centrifuge.refirmlabs.com # change this if you're single tenant or on-premiseTo query the list of available reports:.. code-block:: bash    $ centrifuge reports listUnder the hood the Centrifuge CLI is using python Pandas data frames to reportthe results to the user. Since the API is json, which has hierarchical structureto it, we have chosen to flatten all the results into a column/row format forviewing inside of a terminal or for importing into spreadsheets, etc. Howeverthe cli can also output CSV, and the original json results. For example:CSV:.. code-block:: bash    $ centrifuge --outfmt=csv reports listJSON:.. code-block:: bash    $ centrifuge --outfmt=json reports listWhen generating the human-readable Pandas output or when generating CSV you havethe option of choosing which columns you wish to export. For example, to displayonly the original filename and model number of the firmware that was uploaded: .. code-block:: bash    $ centrifuge -foriginalFilename -fdevice reports listUploading Firmware------------------Uploading firmware to centrifuge is quite simple. All you need to do is supplymake/model/version and the file you want to upload:.. code-block:: bash    $ centrifuge upload --make=Linksys --model=E1200 --version=1.0.04 /path/to/FW_E1200_v1.0.04.001_US_20120307.binSearching Through Firmware Uploads----------------------------------You can search through the uploaded firmware for keywords in username, filename, make, model, etc:.. code-block:: bash    $ centrifuge reports search &quot;Linksys&quot;Querying Report Results------------------------All the following commands require access to what we refer to as a &quot;UFID&quot; orUpload File ID. This ID can be seen through the web interface, its also the lastpart of the URL when viewing a report, it is also the ``id`` field when runningthe ``centrifuge reports list`` command above. It should also be noted that all ofthese commands also support the ``--outfmt`` argument so you can export to CSV andto JSON. However be aware that these arguments are positional in nature, youmust supply the ``--outfmt`` argument between ``centrifuge`` and ``report`` on thecommand line or it will not be accepted. You can see the available commands by viewing the help output:.. code-block:: bash  $ centrifuge report --help  Usage: centrifuge report [OPTIONS] COMMAND [ARGS]...    Options:    --ufid ID  Centrifuge report ID  [required]    --help     Show this message and exit.  Commands:    binary-hardening    certificates    check-policy    code-emulated    code-static    code-summary    crypto              deprecated (use certificates, public-keys, and...    delete    guardian    info    passhash    private-keys    public-keys    sbom    security-checklistGet basic information about the report (User, Make, Model, Version, filename, etc):.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; infoGet Guardian Results:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; guardianGet Password Hashes:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; passhashGet Certificates:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; certificatesGet Public Keys:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; public-keysGet Private Keys:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; private-keysGet SBOM Results:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; sbomGet Security Checklist Results:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; security-checklistGet Legacy Crypto Results (firmware uploaded before September 30th 2019). Refer to ``certificates``, ``public-key``, and ``private-key`` now... code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; cryptoThe code analysis section is a little bit more complicated, since the data ismore structured. To understand how to access this data you need to understandthat when we process a firmware we must extract it first, each time we extract afilesystem or file container those groups of files are given an ``extraction ID``or ``EXID``. To get code analysis results for an individual file you must know the``EXID`` and the file's ``PATH`` within that EXID. Luckily there is a ``code-summary``command which will give you the data you need to find into the ``code-static`` and``code-emulated`` commands. Get a Summary of the Code Analysis:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; code-summaryWhen looking at the results above from the ``code-summary`` command you need torecord the ``exid`` and ``path`` (*NOT* ``fullPath``), to feed into the next two commands. Get static code analysis results:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; code-static --exid=&lt;EXID&gt; --path=&lt;PATH&gt;Get emulated code analysis results:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; code-emulated --exid=&lt;EXID&gt; --path=&lt;PATH&gt;Deleting Firmware Uploads-------------------------Deleting a previously uploaded firmware is an unrecoverable action. Unlike theweb interface the command line interface will not prompt you if you are sure.So use this command carefully. To delete a firmware:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; deleteChecking Against a Policy YAML------------------------------You can check that the results of a firmware analysis are within compliance criteriadefined in a yaml file. Example usage:.. code-block:: bash    $ centrifuge report --ufid=&lt;REPORT_ID&gt; check-policy --policy-yaml=&lt;PATH TO YAML&gt;More information on this feature can be found in the `Policy Documentation`_... _Policy Documentation: docs/POLICY.mdGathering Upload Statistics---------------------------For deployments that support multiple organizations or business units we have the abilityto gather useful statistics for the uploaded firmware based on organization. One command will simply give you the total number of firmware that each organization uploaded, the othercommand will give more detailed information about each upload.To summarize multiple organizations you need to be an Administrator. If these commands arerun by a non-admin, instead of summarizing multiple organizations it will summarize the userswithin that organization.To get upload count statistics:.. code-block:: bash    $ centrifuge reports stats-summaryTo get detailed upload statistics:.. code-block:: bash    $ centrifuge reports stats-detailedListing Centrifuge Supported Component Detectors------------------------------------------------Centrifuge uses binary heuristic detection to identify 3rd party components in firmware,and also maps known vulnerabilities (CVEs) to those components. New components and CVEsare added regularly to Centrifuge.To get a list of the supported components and a count of CVEs for each component:.. code-block:: bash    $ centrifuge supported-components</longdescription>
</pkgmetadata>