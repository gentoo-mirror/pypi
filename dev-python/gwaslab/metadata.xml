<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img width=&quot;600&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/40289485/197167760-5f761f5e-5856-4b27-a540-8b9cd90bdadb.png&quot;&gt;# GWASLab![badge](https://img.shields.io/pypi/v/gwaslab)[![Downloads](https://static.pepy.tech/badge/gwaslab)](https://pepy.tech/project/gwaslab)![badge_pip](https://img.shields.io/pypi/dm/gwaslab)[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fcloufield.github.io%2Fgwaslab%2F&amp;count_bg=%2379C83D&amp;title_bg=%23555555&amp;icon=&amp;icon_color=%23E7E7E7&amp;title=hits&amp;edge_flat=false)](https://hits.seeyoufarm.com)![badge_commit_m](https://img.shields.io/github/commit-activity/m/Cloufield/gwaslab)* A handy Python toolkit for handling GWAS summary statistics (sumstats).* Each process is modularized and can be customized to your needs.* Sumstats-specific manipulations are designed as methods of a Python object, `gwaslab.Sumstats`.Please check GWASLab documentation at [https://cloufield.github.io/gwaslab/](https://cloufield.github.io/gwaslab/)Note: GWASLab is being updated very frequently for now. I will release the first stable version soon! Please stay tuned.## Install```pip install gwaslab==3.4.18``````pythonimport gwaslab as gl# load plink2 outputmysumstats = gl.Sumstats(&quot;t2d_bbj.txt.gz&quot;, fmt=&quot;plink2&quot;)# or you can specify the columns:mysumstats = gl.Sumstats(&quot;t2d_bbj.txt.gz&quot;,             snpid=&quot;SNP&quot;,             chrom=&quot;CHR&quot;,             pos=&quot;POS&quot;,             ea=&quot;ALT&quot;,             nea=&quot;REF&quot;,             neaf=&quot;Frq&quot;,             beta=&quot;BETA&quot;,             se=&quot;SE&quot;,             p=&quot;P&quot;,             direction=&quot;Dir&quot;,             n=&quot;N&quot;,             build=&quot;19&quot;)# manhattan and qq plotmysumstats.plot_mqq()...```## Functions### Loading and Formatting- Loading sumstats by simply specifying the software name or format name, or specifying each column name.- Converting GWAS sumstats to specific formats:  - LDSC / MAGMA / METAL / PLINK / SAIGE / REGENIE / MR-MEGA / GWAS-SSF / FUMA / GWAS-VCF / BED...   - [check available formats](https://github.com/Cloufield/formatbook)- Optional filtering of variants in commonly used genomic regions: Hapmap3 SNPs / High-LD regions / MHC region  ### Standardization &amp; Normalization- Variant ID standardization- CHR and POS notation standardization- Variant POS and allele normalization- Genome build : Inference and Liftover ### Quality control, Value conversion &amp; Filtering- Statistics sanity check- Extreme value removal- Equivalent statistics conversion    - BETA/SE , OR/OR_95L/OR_95U    - P, Z, CHISQ, MLOG10P- Customizable value filtering###  Harmonization- rsID assignment based on CHR, POS, and REF/ALT- CHR POS assignment based on rsID using a reference text file- Palindromic SNPs and indels strand inference using a reference VCF- Check allele frequency discrepancy using a reference VCF- Reference allele alignment using a reference genome sequence FASTA file### Visualization- Mqq plot : Manhattan plot , QQ plot or MQQ plot (with a bunch of customizable features including auto-annotate nearest gene names)- Miami plot : Manhattan plot- Brisbane plot:  GWAS hits density plot- Regional plot : GWAS regional plot- Heatmap : ldsc-rg genetic correlation matrix- Scatter Plot : variant effect size comparison with sumstats- Scatter Plot : allele frequency comparison - Forest Plot : forest plots for meta-analysis of SNPs### Visualization Examples&lt;img width=&quot;600&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/40289485/233836639-34b03c47-5a59-4fd4-9677-5e13b02aab15.png&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/40289485/197393168-e3e7076f-2801-4d66-9526-80778d44f3da.png&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/40289485/197463243-89352749-f882-418d-907d-27530fd4e922.png&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/40289485/197126045-b1c55adf-3391-4c3d-b2f6-eaeac7c26024.png&quot;&gt;### Other Utilities- Read ldsc h2 or rg outputs directly as DataFrames (auto-parsing).- Extract lead variants given a sliding window size.- Extract novel loci given a list of known lead variants / or known loci obtained form GWAS Catalog.- Logging : keep a complete record of manipulations applied to the sumstats.- Sumstats summary: give you a quick overview of the sumstats. - ...## Requirements```Python &gt;= 3.8pySAM &gt;0.18,&lt;0.20pyensembl &gt;=2.2.3scikit-allelBiopython &gt;= 1.79liftover &gt;= 1.1.13pandas &gt;= 1.3,&lt;1.5numpy &gt;= 1.21.2matplotlib &gt;=3.5seaborn &gt;=0.11.1scipy &gt;=1.6.2statsmodels &gt; =0.13adjustText```## How to cite- GWASLab preprint: He, Y., Koido, M., Shimmori, Y., Kamatani, Y. (2023). GWASLab: a Python package for processing and visualizing GWAS summary statistics. Preprint at Jxiv, 2023-5. https://doi.org/10.51094/jxiv.370## Sample Data- Sample GWAS data used in GWASLab is obtained from: http://jenger.riken.jp/ (Suzuki, Ken, et al. &quot;Identification of 28 new susceptibility loci for type 2 diabetes in the Japanese population.&quot; Nature genetics 51.3 (2019): 379-386.).## Contacts* Github: [https://github.com/Cloufield/gwaslab](https://github.com/Cloufield/gwaslab)* Blog (in Chinese): [https://gwaslab.com/](https://gwaslab.com/)* Email: gwaslab@gmail.com* Stats: [https://pypistats.org/packages/gwaslab](https://pypistats.org/packages/gwaslab)</longdescription>
</pkgmetadata>