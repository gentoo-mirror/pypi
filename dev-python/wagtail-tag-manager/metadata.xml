<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Wagtail Tag Manager[![CircleCI][circleci]](https://circleci.com/gh/jberghoef/wagtail-tag-manager)[![CodeCov][codecov]](https://codecov.io/gh/jberghoef/wagtail-tag-manager)[![Codacy][codacy]](https://www.codacy.com/app/jberghoef/wagtail-tag-manager)[![License][license]](https://opensource.org/licenses/BSD-3-Clause)[![Fossa][fossa]](https://app.fossa.com/projects/git%2Bgithub.com%2Fjberghoef%2Fwagtail-tag-manager)[![Version][version]](https://pypi.python.org/pypi/wagtail-tag-manager/)[![Downloads][downloads]](https://pepy.tech/project/wagtail-tag-manager)[![Black][black]](https://github.com/ambv/black)[![Prettier][prettier]](https://github.com/prettier/prettier)[![Gitpod ready-to-code][gitpod]](https://gitpod.io/#https://github.com/jberghoef/wagtail-tag-manager)[circleci]: https://circleci.com/gh/jberghoef/wagtail-tag-manager.svg?style=svg &quot;Circle CI&quot;[codecov]: https://codecov.io/gh/jberghoef/wagtail-tag-manager/branch/master/graph/badge.svg &quot;Codecov&quot;[codacy]: https://api.codacy.com/project/badge/Grade/2a59a006e69442bb809bf08f47028eb9 &quot;Codacy&quot;[license]: https://img.shields.io/badge/license-BSD-blue.svg &quot;License&quot;[fossa]: https://app.fossa.com/api/projects/git%2Bgithub.com%2Fjberghoef%2Fwagtail-tag-manager.svg?type=shield &quot;Fossa&quot;[version]: https://img.shields.io/pypi/v/wagtail-tag-manager.svg &quot;Version&quot;[downloads]: https://pepy.tech/badge/wagtail-tag-manager &quot;Downloads&quot;[black]: https://img.shields.io/badge/code%20style-black-000000.svg &quot;Black&quot;[prettier]: https://img.shields.io/badge/code_style-prettier-ff69b4.svg &quot;Prettier&quot;[gitpod]: https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod &quot;Gitpod&quot;Wagtail Tag Manager (WTM for short) is a [Wagtail](https://wagtail.io/) addonthat allows for easier and GDPR compliant administration of scripts and tags.![Screenshot](screenshots/screenshot.png &quot;Screenshot&quot;)_In this package the term &quot;tag&quot; is being used for code snippets being injectedinto HTML. This is not to be confused with tags used to identify content in theCMS, such as pictures and documents._## FeaturesWagtail Tag Manager offers functionality similar to platforms like**Adobe Dynamic Tag Management**, **Google Tag Manager** and **Tealium iQ**without the need of a third party. It's fully integrated into Wagtail.This approach comes with a couple of advantages, most prominently the abilityto inject tags into a page before the response is send to a client.### Administrators- Manage scripts and tags from within Wagtail, with powerful options to define load order.- Store reusable content in constants and variables and easily add them to your tags.- Create triggers to load tags based on events in the browser.- Create cookie declarations to provide end-users with a full picture of the tracking taking place.### Developers- Create custom variables to give administrators functionality specific to your use-cases.## Table of content- [Disclaimer](#disclaimer)- [Requirements](#requirements)- [Instructions](#instructions)- [Template tags](#template-tags)  - [`wtm_instant_tags`](#wtm_instant_tags)  - [`wtm_lazy_manager`](#wtm_lazy_manager)  - [`wtm_cookie_bar`](#wtm_cookie_bar)  - [`wtm_include`](#wtm_include)- [Preference management](#preference-management)- [Context processors](#context-processors)- [Settings](#settings)  - [`WTM_TAG_TYPES`](#wtm_tag_types)  - [`WTM_INJECT_TAGS`](#wtm_inject_tags)  - [`WTM_MANAGE_VIEW`](#wtm_manage_view)  - [`WTM_COOKIE_EXPIRE`](#wtm_cookie_expire)  - [`WTM_CACHE_TIMEOUT`](#wtm_cache_timeout)  - [`WTM_PRESERVE_VARIABLES`](#wtm_preserve_variables)  - [`WTM_INJECT_STYLE`](#wtm_inject_style)  - [`WTM_INJECT_SCRIPT`](#wtm_inject_script)  - [`WTM_SUMMARY_PANELS`](#wtm_summary_panels)  - [`WTM_ENABLE_SCANNER`](#wtm_enable_scanner)  - [`WTM_CHROMEDRIVER_URL`](#wtm_chromedriver_url)- [Custom variables](#custom-variables)- [Page tag mixin](#page-tag-mixin)- [Lazy triggers](#lazy-triggers)- [Sandbox](#sandbox)- [Concept](#concept)- [Who's using it](#whos-using-it)- [License](#license)## DisclaimerThis package attempts to ease the implementation of tags by the new ePrivacyrules as defined by the European Union. I urge you to read about these newrules and ensure you are properly configuring your tags. This package is freeand the author can not be held responsible for the correctness of yourimplementation, or the assumptions made in this package to comply with the newePrivacy regulation.Read more about the [ePrivacy Regulation](https://ec.europa.eu/digital-single-market/en/proposal-eprivacy-regulation).Included in this package is a cookie bar which admittedly provides too littleinformation to end users regarding the purpose of the scripts you are placingon the website. For compliance, please use the `cookie_bar.html` template tochange the text shown in the cookie bar.## Requirements| Package | Version(s)                                        || ------- | ------------------------------------------------- || Django  | 2.2, 3.0, 3.1, 3.2, 4.0, 4.1                      || Wagtail | 2.11, 2.12, 2.13, 2.14, 2.15, 2.16, 3.0, 4.0, 4.1 || Python  | 3.7, 3.8, 3.9, 3.10, 3.11                         |## Instructions**Installation:**```pip install wagtail-tag-manager```**Add the application to your `INSTALLED_APPS`:**```pythonINSTALLED_APPS = [    # ...    'wagtail.contrib.modeladmin',    'wagtail_tag_manager',    # ...]```If you wish to enable the cookie bar settings (allowing you to change to titleand text displayed in the cookie bar), also include `wagtail.contrib.settings`in the `INSTALLED_APPS`.**Include the middleware:**```pythonMIDDLEWARE = [    # ...    &quot;wagtail_tag_manager.middleware.CookieConsentMiddleware&quot;,    'wagtail_tag_manager.middleware.TagManagerMiddleware', # optional    # ...]```WTM offers two ways to implement it's functionality. You can either choose touse the `TagManagerMiddleware` (which will rewrite the html on each request)or use the `{% wtm_instant_tags %}` and `{% wtm_lazy_manager %}` templatetags.If you prefer to use the template tags to inject tags into your templates,set the `WTM_INJECT_TAGS` and `WTM_INJECT_SCRIPT` settings to `False`and implement the template tags as follows:```html+django{% load wtm_tags %}&lt;head&gt;  {% wtm_instant_tags 'top_head' %} ... {% wtm_instant_tags 'bottom_head' %}&lt;/head&gt;&lt;body&gt;  {% wtm_instant_tags 'top_body' %} ... {% wtm_instant_tags 'bottom_body' %} {% wtm_lazy_manager %}&lt;/body&gt;```**Include the urls:**```pythonfrom django.urls import include, pathfrom wagtail_tag_manager import urls as wtm_urlsurlpatterns = [    # ...    path('wtm/', include(wtm_urls)),    # ...    path('', include(wagtail_urls)),    # ...]```## Template tagsAs an alternative to using the middleware you can use the `wtm_instant_tags`and `wtm_lazy_manager` template tags. Please be sure to use the`TagManagerMiddleware` OR the template tags, never both.### `wtm_instant_tags`To load all instant tags at once:```html+django{% load wtm_tags %}&lt;head&gt;  ... {% wtm_instant_tags %}&lt;/head&gt;```To load tags corresponding to a certain position:```html+django{% load wtm_tags %}&lt;head&gt;  {% wtm_instant_tags 'top_head' %} ... {% wtm_instant_tags 'bottom_head' %}&lt;/head&gt;&lt;body&gt;  {% wtm_instant_tags 'top_body' %} ... {% wtm_instant_tags 'bottom_body' %}&lt;/body&gt;```### `wtm_lazy_manager````html+django{% load wtm_tags %}&lt;body&gt;  ... {% wtm_lazy_manager %}&lt;/body&gt;```Optionally, you can disable either the script and/or the styling.```html+django{% load wtm_tags %}&lt;body&gt;  ... {% wtm_lazy_manager include_style=False include_script=False %}&lt;/body&gt;```---### `wtm_cookie_bar`![Cookie bar with form](screenshots/cookie-bar-with-form.png &quot;Cookie bar with form&quot;)![Cookie bar with form and details](screenshots/cookie-bar-with-form-and-details.png &quot;Cookie bar with form and details&quot;)```html+django{% load wtm_tags %}&lt;body&gt;  {% wtm_cookie_bar %} ...&lt;/body&gt;```### `wtm_include`WTM comes with the `wtm_include` template tag to accommodate loading ofresources and markup based on the tag strategy and consent given. It can beused as a way to load html, css or javascript files.```html+django{% load wtm_tags %}&lt;body&gt;  ... {% wtm_include &quot;necessary&quot; &quot;css/style.css&quot; %} {% wtm_include &quot;necessary&quot; &quot;js/style.js&quot; %} {%  wtm_include &quot;necessary&quot; &quot;content.html&quot; %} ...&lt;/body&gt;```Alternatively, you can use it as a block:```html+django{% load wtm_tags %}&lt;body&gt;  ... {% wtm_include &quot;statistics&quot; %}  &lt;script&gt;    console.log(&quot;Included conditionally&quot;);  &lt;/script&gt;  {% wtm_endinclude %} ...&lt;/body&gt;```### Preference managementYou can use the following provided template tags to render a tag statusoverview, a table with cookie declarations or a consent form.```html+django{% wtm_tag_table %} {% wtm_declaration_table %} {% wtm_manage_form %}```## Context processorsTo enable the context processors, add the following to your settings:```python&quot;context_processors&quot;: [    # ...    &quot;wagtail_tag_manager.context_processors.consent_state&quot;,]```You can now use the following value in your templates:```html+django{{ wtm_consent_state.necessary }} {{ wtm_consent_state.preferences }} {{wtm_consent_state.statistics }} {{ wtm_consent_state.marketing }}```These will return a boolean indicating wether or not tags specific to thecorresponding state should load.## Settings### `WTM_TAG_TYPES````pythonWTM_TAG_TYPES = {    # key, verbose name, setting    &quot;necessary&quot;: (_(&quot;Necessary&quot;), &quot;required&quot;),    &quot;preferences&quot;: (_(&quot;Preferences&quot;), &quot;initial&quot;),    &quot;statistics&quot;: (_(&quot;Statistics&quot;), &quot;initial&quot;),    &quot;marketing&quot;: (_(&quot;Marketing&quot;), &quot;&quot;),}```Allows you to define the tag types available. This can be helpful if you'd likethe change the terminology used, or when you'd prefer to split a type inmultiple sections. Notice the two keywords (`required` and `initial`) used.Tags marked as `required` can not be disabled and will always be included onevery page.Tags marked as `initial` will be included as long as no explicit consent hasbeen given by the end user, provided the browser allows cookies. While noconsent has been given, these tags will be loaded lazily to honor the browsersettings (which we can only read using javascript).The third option is to mark a tag as `delayed`. This will ensure the tag willnot load on the first page load, but only from the second load forward.### `WTM_INJECT_TAGS````pythonWTM_INJECT_TAGS = True```Instructs the middleware to inject all tags marked &quot;instant load&quot; in thedocument. Disable this if you would rather use the `{% wtm_instant_tags %}`template tags.### `WTM_MANAGE_VIEW````pythonWTM_MANAGE_VIEW = True```Allows you to enable or disable the included &quot;manage&quot; view allowing users toget insight in the tags running on your site and adjust their preferences.The view is enabled by default.### `WTM_COOKIE_EXPIRE````pythonWTM_COOKIE_EXPIRE = 365```Sets the expiration time in days of WTM's cookies. Notice that this is onlyapplicable to the consent cookies used by WTM, not any cookies placed by tags.### `WTM_CACHE_TIMEOUT````pythonWTM_CACHE_TIMEOUT = 1800```Sets the amount of seconds the cache will be preserved. At the moment,caching is only applied to constants, which will refresh when a constant issaved. Default is 30 minutes.### `WTM_PRESERVE_VARIABLES````pythonWTM_PRESERVE_VARIABLES = True```Configures whether the variables are preserved for each request, or refreshedfor each tag applied to a response. When set to `False`, a query will be donefor each single tag which will add up quickly.### `WTM_INJECT_STYLE````pythonWTM_INJECT_STYLE = True```Change to `False` to prevent WTM's included styles from loading. This is usefulif you wish to style the cookiebar yourself.### `WTM_INJECT_SCRIPT````pythonWTM_INJECT_SCRIPT = True```Change to `False` to prevent WTM's included scripts from loading. This isuseful if you don't want to use the inlcuded lazy loading and cookie barfunctionality.### `WTM_SUMMARY_PANELS````pythonWTM_SUMMARY_PANELS = False```Disables or enables the summary panels visible on the Wagtail admin dashboard.![Admin summary panels](screenshots/summary-panels-admin.png &quot;Summary panels on the dashboard&quot;)### `WTM_ENABLE_SCANNER`**This is an experimental feature.**```pythonWTM_ENABLE_SCANNER = False```When enabled, allows scanning of cookies placed on the website. Use this toautomatically generate cookie declarations. Will attempt to use Chrome Driverwhen available, and will fall back to regular requests if not.### `WTM_CHROMEDRIVER_URL`**This is an experimental feature.**```pythonWTM_CHROMEDRIVER_URL = &quot;http://0.0.0.0:4444/wd/hub&quot;```Allows configuration of the docker container running an instance of`selenium/standalone-chrome`.When developing, use the following command to run the docker container andensure that your site is configured be accessible over your computer's publicip. Otherwise the docker container won't be able to access the website.https://hub.docker.com/r/selenium/standalone-chrome/## Custom variablesIn addition to managing variables in the admin interface, variables can also becreated in your source code by registering a `CustomVariable`.```pythonfrom wagtail_tag_manager.decorators import register_variablefrom wagtail_tag_manager.options import CustomVariable@register_variableclass Variable(CustomVariable):    name = &quot;Custom variable&quot;    description = &quot;Returns a custom value.&quot;    key = &quot;custom&quot;    def get_value(self, request):        return &quot;This is a custom variable.&quot;```![Admin custom variables](screenshots/custom-variables-admin.png &quot;Custom variables visible in the code editor&quot;)## Page tag mixinIf you would like to include tags on a page, include the `TagMixin` mixin.Under the &quot;Settings&quot; tab of the corresponding page type a list of tags will beshown. By selecting these, these tags will be included when the page loads.Additionally, by selecting the &quot;Include children&quot; field, all descending pagesof the configured page will also load the chosen tags.Note that the consent state is being applied to these tags. If the selected tagis marked as, for example, &quot;marketing&quot;, the end-user still must allow this typeof tags before is is being injected.```pythonfrom wagtail_tag_manager.mixins import TagMixinclass HomePage(TagMixin, Page):    pass```![Tag mixin admin](screenshots/tag-mixin-admin.png &quot;The tag mixin admin interface&quot;)## Lazy triggersTriggers allow you to monitor events on the frontend of your website and load atag after a specified event has occurred. By using conditions you are able toharness (custom) variables to only trigger a tag once your event complies withthe conditions that you specified.![Trigger admin](screenshots/trigger-admin.png &quot;The trigger admin interface&quot;)## SandboxTo experiment with the package you can use the sandbox provided in thisrepository. To install this you will need to create and activate avirtualenv and then run `make sandbox`. This will start a fresh Wagtailinstall, with the tag manager module enabled, on http://localhost:8000and http://localhost:8000/cms/. The superuser credentials are`superuser` with the password `testing`.Various types of tags, constants and variables are enabled out of the box.Check out the console in your browser to see them in action.## ConceptWTM comes with the following tag types pre-configured:| Name        | Setting  || ----------- | -------- || Necessary   | Required || Preferences | Initial  || Statistics  | Initial  || Marketing   | Default  |These types correspond to the segmentation made by the EU [here](https://gdpr.eu/cookies/).| State                                                        | Required | Initial | Delayed | Default || ------------------------------------------------------------ | -------- | ------- | ------- | ------- || No cookies accepted.                                         | yes      | no      | no      | no      || Cookies implicitly accepted through browser settings.        | yes      | yes     | yes¹    | no      || Cookies explicitly accepted, noting tracking functionality.² | yes      | yes     | yes¹    | yes     |_¹ From the second page load onward.__² According to the ePrivacy regulation, mentioning that you are using tracking functionality is mandatory._Note that in the case of Statistics cookies or local storage, you are obligedto still show a notification at least once, noting that you are using cookiesfor analytical and performance measurement purposes.When implementing Marketing cookies, the user has to explicitly give permissionfor you to enable them for their session. When asking for permission, you mustexplicitly state the tracking functionality of the script you are using.To ease the implementation by this concept, Wagtail Tag Manager allows you todefine a tag as &quot;Necessary&quot;, &quot;Preferences&quot;, &quot;Statistics&quot; or &quot;Marketing&quot;.When properly configured, it'll take care of loading the correct tag atthe correct time, taking in account the following scenario's:1. The user has not accepted cookies.   |         | Required | Initial | Delayed | Default |   | ------- | -------- | ------- | ------- | ------- |   | Instant | yes      | no      | no      | no      |   | Lazy    | yes      | no      | no      | no      |2. The user has accepted cookies through browser settings.   |         | Required | Initial | Delayed | Default |   | ------- | -------- | ------- | ------- | ------- |   | Instant | yes      | yes¹    | yes²    | no      |   | Lazy    | yes      | yes     | yes²    | no      |   _¹ Will be loaded lazily._   _² From the second page load onward._   As the acceptance of &quot;Initial&quot; tags can only be verified client side, we'll   first load all the &quot;Initial&quot; tags lazy (whether they are instant or not).   Please note that we still have to show a message stating that we are using   tags with analytical purposes.3. The user has explicitly accepted cookies for your site.   |         | Required | Initial | Delayed | Default |   | ------- | -------- | ------- | ------- | ------- |   | Instant | yes      | yes     | yes     | yes     |   | Lazy    | yes      | yes     | yes     | yes     |## Who’s using it?I'd love to hear from sites and applications where WTM is being used. Pleasecontact me if you'd like your implementation to be listed here!## LicenseTo make Wagtail Tag Manager accessible, it's is published under the BSD 3-Clause&quot;New&quot; or &quot;Revised&quot; License. For more information, please refer to the[LICENSE](LICENSE) file in this repository.[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fjberghoef%2Fwagtail-tag-manager.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fjberghoef%2Fwagtail-tag-manager?ref=badge_large)</longdescription>
</pkgmetadata>