<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Sensu Go Python client======================This repository contains source code for the official Sensu Go Python client.Installation------------The Sensu Go Python client is available on PyPI and can be installed usingpip. In order to avoid doing any global damage to the system, we can installit into a dedicated virtual environment like this::   $ python3 -m venv venv   $ . venv/bin/activate   (venv) $ pip install sensu-goUsing the client----------------.. note::   If you would like to follow along in a Python REPL, you can start a   containerized Sensu Go instance like this::      $ docker run --rm -p 8080:8080 -p 3000:3000 \          sensu/sensu sensu-backend start.. note::   Version 0.3.0 broke the API compatibility with the previous versions. The   reason for this API break is generalization and unification of Sensu Go   management. With new changes in place, managing configuration through the   resource interface folows the same patterns for both v1 and v2 API endponts.Before we can start using the client, we need to create one:.. code-block:: python   import sensu_go   client = sensu_go.Client(       &quot;http://localhost:8080&quot;, username=&quot;admin&quot;, password=&quot;P@ssw0rd!&quot;   )If we have API key, we can also use that to create a client instance:.. code-block:: python   client = sensu_go.Client(       &quot;http://localhost:8080&quot;, api_key=&quot;471152a6-b4b1-4b51-84dd-334a9c230b93&quot;   )Now we can list available resources in the `default` namespace:.. code-block:: python   print(client.namespaces.list())   print(client.assets.list())   print(client.checks.list())When creating a resource, we need to provide the payload specified in theSensu Go's API documentation. For example, this is how we would create a newnamespace called `demo`:.. code-block:: python   ns = client.namespaces.create(metdata={}, spec=dict(name=&quot;demo&quot;))   print(ns)   print(client.namespaces.list())Same thing goes for other things like checks and assets:.. code-block:: python   client.assets.create(       metadata={           &quot;name&quot;: &quot;sensu-slack-handler&quot;,           &quot;namespace&quot;: &quot;demo&quot;       },       spec={           &quot;url&quot;: &quot;https://github.com/sensu/sensu-slack-handler/releases/download/1.0.3/sensu-slack-handler_1.0.3_linux_amd64.tar.gz&quot;,           &quot;sha512&quot;: &quot;68720865127fbc7c2fe16ca4d7bbf2a187a2df703f4b4acae1c93e8a66556e9079e1270521999b5871473e6c851f51b34097c54fdb8d18eedb7064df9019adc8&quot;,           &quot;filters&quot;: [               &quot;entity.system.os == 'linux'&quot;,               &quot;entity.system.arch == 'amd64'&quot;,           ],           &quot;headers&quot;: {               &quot;Authorization&quot;: &quot;Bearer $TOKEN&quot;,               &quot;X-Forwarded-For&quot;: &quot;client1, proxy1, proxy2&quot;,           },       },   )   check = client.checks.create(       metadata={           &quot;name&quot;: &quot;check-cpu&quot;,           &quot;namespace&quot;: &quot;default&quot;       },       spec={           &quot;command&quot;: &quot;check-cpu.sh -w 75 -c 90&quot;,           &quot;subscriptions&quot;: [&quot;linux&quot;],           &quot;interval&quot;: 60,           &quot;publish&quot;: True,           &quot;handlers&quot;: [&quot;slack&quot;],       },   )Once we have a resource object at hand, we can update it and propagate thechanges to the backend:.. code-block:: python   # Update local representation   check.spec[&quot;interval&quot;] = 100   check.spec.update(publish=False, subscriptions=[&quot;my-sub&quot;])   # Propagate the changes   check.save()We can also fetch a resource from a non-default namespace (in our case, fromthe `demo` namespace):.. code-block:: python   asset = client.assets.get(&quot;sensu-slack-handler&quot;, &quot;demo&quot;)   print(asset)We can also reload the resource if we expect it to change:.. code-block:: python   asset.reload()And of course, we can also delete the resource:.. code-block:: python   # Delete resource via local object   asset.delete()   # Or delete it by name (and namespace if applicable)   client.namespaces.delete(&quot;demo&quot;)   # Deleting multiple items is also easy:   for c in client.checks.list():       c.delete()The ``get`` method will fail spectacularly if the resource we are trying tofetch does not exist on the backend. If we would like to check the presence ofa resource, we can use the ``find`` method:.. code-block:: python   hook = client.hooks.find(&quot;hook-that-might-not-exist&quot;)   if hook:       print(&quot;We do have a hook!&quot;)   else:       print(&quot;No hook on the backend.&quot;)We can also send requests to the backend directly if the resource API is notavailable or does not make sense:.. code-block:: python   print(client.get(&quot;/version&quot;))   print(client.post(&quot;/api/core/v2/namespaces/default/entities&quot;, {       &quot;entity_class&quot;: &quot;proxy&quot;,       &quot;subscriptions&quot;: [&quot;web&quot;],       &quot;metadata&quot;: {         &quot;name&quot;: &quot;my-entity&quot;,         &quot;namespace&quot;: &quot;default&quot;,       }   }))   print(client.put(&quot;/api/core/v2/namespaces/default/entities/my-entity&quot;, {       &quot;entity_class&quot;: &quot;proxy&quot;,       &quot;subscriptions&quot;: [&quot;prod&quot;],       &quot;metadata&quot;: {         &quot;name&quot;: &quot;my-entity&quot;,         &quot;namespace&quot;: &quot;default&quot;,       }   }))   print(client.delete(&quot;/api/core/v2/namespaces/default/entities/my-entity&quot;))</longdescription>
</pkgmetadata>