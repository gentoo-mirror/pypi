<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================pytest-doctestplus==================.. image:: https://zenodo.org/badge/104253824.svg   :target: https://zenodo.org/badge/latestdoi/104253824   :alt: Zenodo DOI.. image:: https://github.com/scientific-python/pytest-doctestplus/workflows/Run%20unit%20tests/badge.svg    :target: https://github.com/scientific-python/pytest-doctestplus/actions    :alt: CI StatusThis package contains a plugin for the `pytest`_ framework that providesadvanced doctest support and enables the testing of various text files, suchas reStructuredText (&quot;.rst&quot;), markdown (&quot;.md&quot;), and TeX (&quot;.tex&quot;)... _pytest: https://pytest.org/en/latest/Motivation----------This plugin provides advanced features for testing example Python code that isincluded in Python docstrings and in standalone documentation files.Good documentation for developers contains example code. This is true of bothstandalone documentation and of documentation that is integrated with the codeitself. Python provides a mechanism for testing code snippets that are providedin Python docstrings. The unit test framework pytest provides a mechanism forrunning doctests against both docstrings in source code and in standalonedocumentation files.This plugin augments the functionality provided by Python and pytest byproviding the following features:* approximate floating point comparison for doctests that produce floating  point results (see `Floating Point Comparison`_)* skipping particular classes, methods, and functions when running doctests (see `Skipping Tests`_)* handling doctests that use remote data in conjunction with the  `pytest-remotedata`_ plugin (see `Remote Data`_)* optional inclusion of ``*.rst`` files for doctests (see `Setup and Configuration`_)* optional inclusion of doctests in docstrings of Numpy ufuncsInstallation------------The ``pytest-doctestplus`` plugin can be installed using ``pip``::    $ pip install pytest-doctestplusIt is also possible to install the latest development version from the sourcerepository::    $ git clone https://github.com/scientific-python/pytest-doctestplus    $ cd pytest-doctestplus    $ pip install .In either case, the plugin will automatically be registered for use with``pytest``.Usage-----.. _setup:Setup and Configuration~~~~~~~~~~~~~~~~~~~~~~~This plugin provides three command line options: ``--doctest-plus`` for enablingthe advanced features mentioned above, ``--doctest-rst`` for including``*.rst`` files in doctest collection, and ``--doctest-ufunc`` for includingdoctests in docstrings of Numpy ufuncs.This plugin can also be enabled by default by adding ``doctest_plus = enabled``to the ``[tool:pytest]`` section of the package's ``setup.cfg`` file.The plugin is applied to all directories and files that ``pytest`` collects.This means that configuring ``testpaths`` and ``norecursedirs`` in``setup.cfg`` also affects the files that will be discovered by``pytest-doctestplus``. In addition, this plugin provides a``doctest_norecursedirs`` configuration variable that indicates directoriesthat should be ignored by ``pytest-doctestplus`` but do not need to be ignoredby other ``pytest`` features.Using ``pytest``'s built-in ``--doctest-modules`` option will override thebehavior of this plugin, even if ``doctest_plus = enabled`` in ``setup.cfg``,and will cause the default doctest plugin to be used. However, if for somereason both ``--doctest-modules`` and ``--doctest-plus`` are given, the``pytest-doctestplus`` plugin will be used, regardless of the contents of``setup.cfg``.``pytest-doctestplus`` respects the ``--doctest-continue-on-failure`` flag.If set, doctests will report all failing lines, which may be useful to detectindependent errors within the same doctest. However, it is likely to generatefalse positives when an early failure causes a variable later lines access toremain unset or have an unexpected value.This plugin respects the doctest options that are used by the built-in doctestplugin and are set in ``doctest_optionflags`` in ``setup.cfg``. By default,``ELLIPSIS`` and ``NORMALIZE_WHITESPACE`` are used. For a description of alldoctest settings, see the `doctest documentation&lt;https://docs.python.org/3/library/doctest.html#option-flags&gt;`_.Doctest Directives~~~~~~~~~~~~~~~~~~The ``pytest-doctestplus`` plugin defines `doctest directives`_ that are usedto control the behavior of particular features. For general information ondirectives and how they are used, consult the `documentation`_. The specificsof the directives that this plugin defines are described in the sections below... _doctest directives: https://docs.python.org/3/library/doctest.html#directives.. _documentation: https://docs.python.org/3/library/doctest.html#directivesSphinx Doctest Directives~~~~~~~~~~~~~~~~~~~~~~~~~You can use ``testsetup`` and ``testcleanup`` in Sphinx RST to run code that isnot visible in rendered document. However, due to how ``pytest-doctestplus``works, the code within needs to be prepended by ``&gt;&gt;&gt;``. For example::  .. testsetup::      &gt;&gt;&gt; x = 42  .. testcleanup::      &gt;&gt;&gt; del xFloating Point Comparison~~~~~~~~~~~~~~~~~~~~~~~~~Some doctests may produce output that contains string representations offloating point values.  Floating point representations are often not exact andcontain roundoffs in their least significant digits.  Depending on the platformthe tests are being run on (different Python versions, different OS, etc.) theexact number of digits shown can differ.  Because doctests work by comparingstrings this can cause such tests to fail.To address this issue, the ``pytest-doctestplus`` plugin provides support for a``FLOAT_CMP`` flag that can be used with doctests.  For example:.. code-block:: python  &gt;&gt;&gt; 1.0 / 3.0  # doctest: +FLOAT_CMP  0.333333333333333311.. code-block:: python  &gt;&gt;&gt; {'a': 1 / 3., 'b': 2 / 3.}  # doctest: +FLOAT_CMP  {'a': 0.333333, 'b': 0.666666}When this flag is used, the expected and actual outputs are both parsed to findany floating point values in the strings.  Those are then converted to actualPython `float` objects and compared numerically.  This means that smalldifferences in representation of roundoff digits will be ignored by thedoctest.  The values are otherwise compared exactly, so more significant(albeit possibly small) differences will still be caught by these tests.This flag can be enabled globally by adding it to ``setup.cfg`` as in.. code-block:: ini    doctest_optionflags =        NORMALIZE_WHITESPACE        ELLIPSIS        FLOAT_CMPIgnoring warnings~~~~~~~~~~~~~~~~~If code in a doctest emits a warning and you want to make sure that warning is silenced,you can make use of the ``IGNORE_WARNINGS`` flag. For example:.. code-block:: python  &gt;&gt;&gt; import numpy as np  &gt;&gt;&gt; np.mean([])  # doctest: +IGNORE_WARNINGS  np.nanShowing warnings~~~~~~~~~~~~~~~~If code in a doctest emits a warning and you want to make sure that warning isshown, you can make use of the ``SHOW_WARNINGS`` flag. This is useful whenwarnings are turned into errors by pytest, and also because by default warningsare printed to stderr. This is the opposite from ``IGNORE_WARNINGS`` soobviously the two flags should not be used together. For example:.. code-block:: python  &gt;&gt;&gt; import numpy as np  &gt;&gt;&gt; np.mean([])  # doctest: +SHOW_WARNINGS  RuntimeWarning: Mean of empty slice.  RuntimeWarning: invalid value encountered in double_scalars  np.nanSkipping Tests~~~~~~~~~~~~~~Doctest provides the ``+SKIP`` directive for skipping statements that shouldnot be executed when testing documentation... code-block:: python    &gt;&gt;&gt; open('file.txt') # doctest: +SKIPIn Sphinx ``.rst`` documentation, whole code example blocks can be skipped with thedirective.. code-block:: rst    .. doctest-skip::        &gt;&gt;&gt; import asdf        &gt;&gt;&gt; asdf.open('file.asdf')However, it is often useful to be able to skip docstrings associated withparticular functions, methods, classes, or even entire files.Skipping All the Tests^^^^^^^^^^^^^^^^^^^^^^It is also possible to skip all doctests below a certain line usinga ``doctest-skip-all`` comment.  Note the lack of ``::`` at the endof the line here... code-block:: rst    .. doctest-skip-all       &gt;&gt;&gt; import non_existing       &gt;&gt;&gt; non_existing.write_pseudo_code()       All the doctests are skipped in the file belowSkip Unconditionally^^^^^^^^^^^^^^^^^^^^The ``pytest-doctestplus`` plugin provides a way to indicate that certaindocstrings should be skipped altogether. This is configured by defining thevariable ``__doctest_skip__`` in each module where tests should be skipped. Thevalue of ``__doctest_skip__`` should be a list of wildcard patterns for allfunctions/classes whose doctests should be skipped.  For example::   __doctest_skip__ = ['myfunction', 'MyClass', 'MyClass.*']skips the doctests in a function called ``myfunction``, the doctest for aclass called ``MyClass``, and all *methods* of ``MyClass``.Module docstrings may contain doctests as well. To skip the module-leveldoctests::    __doctest_skip__  = ['.', 'myfunction', 'MyClass']To skip all doctests in a module::   __doctest_skip__ = ['*']Doctest Dependencies^^^^^^^^^^^^^^^^^^^^It is also possible to skip certain doctests depending on whether particulardependencies are available. This is configured by defining the variable``__doctest_requires__`` at the module level. The value of this variable isa dictionary that indicates the modules that are required to run the doctestsassociated with particular functions, classes, and methods.The keys in the dictionary are wildcard patterns like those described above, ortuples of wildcard patterns, indicating which docstrings should be skipped. Thevalues in the dictionary are lists of module names that are required in orderfor the given doctests to be executed.Consider the following example::    __doctest_requires__ = {('func1', 'func2'): ['scipy']}Having this module-level variable will require ``scipy`` to be importablein order to run the doctests for functions ``func1`` and ``func2`` in thatmodule.Similarly, in Sphinx ``.rst`` documentation, whole code example blocks can beconditionally skipped if a dependency is not available... code-block:: rst    .. doctest-requires:: asdf        &gt;&gt;&gt; import asdf        &gt;&gt;&gt; asdf.open('file.asdf')Furthermore, if the code only runs for specific versions of the optional dependency,you can add a version check like this:.. code-block:: rst    .. doctest-requires:: asdf&lt;3        &gt;&gt;&gt; import asdf        &gt;&gt;&gt; asdf.open('file.asdf')Finally, it is possible to skip collecting doctests in entire subpackages byusing the ``doctest_subpackage_requires`` in the ``[tool:pytest]`` section ofthe package's ``setup.cfg`` file. The syntax for this option is a list of``path = requirements``, e.g.::    doctest_subpackage_requires =        astropy/wcs/* = scipy&gt;2.0;numpy&gt;1.14        astropy/cosmology/* = scipy&gt;1.0Multiple requirements can be specified if separated by semicolons.Remote Data~~~~~~~~~~~The ``pytest-doctestplus`` plugin can be used in conjunction with the`pytest-remotedata`_ plugin in order to control doctest code that requiresaccess to data from the internet. In order to make use of these features, the``pytest-remotedata`` plugin must be installed, and remote data access mustbe enabled using the ``--remote-data`` command line option to ``pytest``. Seethe `pytest-remotedata plugin documentation`__ for more details.The following example illustrates how a doctest that uses remote data should bemarked:.. code-block:: python    &gt;&gt;&gt; from urlib.request import urlopen    &gt;&gt;&gt; url = urlopen('http://astropy.org')  # doctest: +REMOTE_DATAThe ``+REMOTE_DATA`` directive indicates that the marked statement should onlybe executed if the ``--remote-data`` option is given. By default, allstatements marked with the remote data directive will be skipped.Whole code example blocks can also be marked to control access to data from the internetthis way:.. code-block:: python    .. doctest-remote-data::        &gt;&gt;&gt; import requests        &gt;&gt;&gt; r = requests.get('https://www.astropy.org').. _pytest-remotedata: https://github.com/astropy/pytest-remotedata__ pytest-remotedata_Sphinx Compatibility~~~~~~~~~~~~~~~~~~~~To use the additional directives when building your documentation with sphinxyou may want to enable the sphinx extension which registers these directiveswith sphinx. Doing so ensures that sphinx correctly ignores these directives,running the doctests with sphinx is not supported. To do this, add``'pytest_doctestplus.sphinx.doctestplus'`` to your ``extensions`` list in your``conf.py`` file.Development Status------------------Questions, bug reports, and feature requests can be submitted on `github`_... _github: https://github.com/scientific-python/pytest-doctestplusLicense-------This plugin is licensed under a 3-clause BSD style license - see the``LICENSE.rst`` file.</longdescription>
</pkgmetadata>