<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Overview--------The mod_wsgi package provides an Apache module that implements a WSGIcompliant interface for hosting Python based web applications on top of theApache web server.*Note that the major version 5.0 was introduced not because of any new majorfeatures but because from version 5.0 onwards compatability with Python 2.7 isno longer guaranteed. A minimum Python version of 3.8 will be enforced by thePython package installation configuration.*Installation of mod_wsgi from source code can be performed in one of twoways.The first way of installing mod_wsgi is the traditional way that has beenused by many software packages. This is where it is installed as a moduledirectly into your Apache installation using the commands ``configure``,``make`` and ``make install``, a method sometimes referred to by theacronym CMMI. This method works with most UNIX type systems. It cannotbe used on Windows.The second way of installing mod_wsgi is to install it as a Python packageinto your Python installation using the Python ``pip install`` command.This can be used on all platforms, including Windows.This second way of installing mod_wsgi will compile not only the Apachemodule for mod_wsgi, but will also install a Python module and adminscript, which on UNIX type systems can be used to start up a standaloneinstance of Apache directly from the command line with an auto generatedconfiguration.This later mechanism for installing mod_wsgi using Python ``pip`` is a muchsimpler way of getting starting with hosting your Python web application.In particular, this installation method makes it very easy to useApache/mod_wsgi in a development environment without the need to performany Apache configuration yourself.The Apache module for mod_wsgi created when using the ``pip install``method can still be used with the main Apache installation, via manualconfiguration if necessary. As detailed later in these instructions, theadmin script installed when you use ``pip install`` can be used to generatethe configuration to manually add to the Apache configuration to loadmod_wsgi.Note that although MacOS X is a UNIX type system, the ``pip install``method is the only supported way for installing mod_wsgi.Since MacOS X Sierra, Apple has completely broken the ability to installthird party Apache modules using the ``apxs`` tool normally used for thistask. History suggests that Apple will never fix the problem as they havebroken things in the past in other ways and workarounds were required asthey never fixed those problems either. This time there is no easyworkaround as they no longer supply certain tools which are required toperform the installation.The ``pip install`` method along with the manual configuration of Apacheis also the method you need to use on Windows.System Requirements-------------------With either installation method for mod_wsgi, you must have Apacheinstalled. This must be a complete Apache installation. It is not enough tohave only the runtime packages for Apache installed. You must have thecorresponding development package for Apache installed, which contains theApache header files, as these are required to be able to compile and installthird party Apache modules.Similarly with Python, you must have a complete Python installation whichincludes the corresponding development package, which contains the headerfiles for the Python library.If you are running Debian or Ubuntu Linux with Apache 2.2 system packages,and were using the Apache prefork MPM you would need both:* apache2-mpm-prefork* apache2-prefork-devIf instead you were using the Apache worker MPM, you would need both:* apache2-mpm-worker* apache2-threaded-devIf you are running Debian or Ubuntu Linux with Apache 2.4 system packages,regardless of which Apache MPM is being used, you would need both:* apache2* apache2-devIf you are running RHEL, CentOS or Fedora, you would need both:* httpd* httpd-develIf you are using the Software Collections Library (SCL) packages withRHEL, CentOS or Fedora, you would need:* httpd24* httpd24-httpd-develIf you are running MacOS X, Apache is supplied with the operating system.If running a recent MacOS X version, you will though need to have the Xcodecommand line tools installed as well as the Xcode application. The commandline tools can be installed by running ``xcode-select --install``. TheXcode application can be installed from the MacOS X App Store. If you areusing older MacOS X versions, you may be able to get away with having justthe command line tools.If you are running Windows, it is recommended you use the Apachedistribution from Apache Lounge (www.apachelounge.com). Other Apachedistributions for Windows aren't always complete and are missing the filesneeded to compile additional Apache modules. By default, it is expectedthat Apache is installed in the directory ``C:/Apache24`` on Windows.If you are on Linux, macOS or other UNIX type operating system and can'tor don't want to use the system package for Apache, you can use ``pip``to install mod_wsgi, but you should use use the ``mod_wsgi-standalone``package on PyPi instead of the ``mod_wsgi`` package.Installation into Apache------------------------For installation directly into your Apache installation using the CMMImethod, see the full documentation at:* http://www.modwsgi.org/Alternatively, use the following instructions to install mod_wsgi into yourPython installation and then either copy the mod_wsgi module into yourApache installation, or configure Apache to use the mod_wsgi module fromthe Python installation.When using this approach, you will still need to manually configure Apacheto have mod_wsgi loaded into Apache, and for it to know about your WSGIapplication.Installation into Python------------------------To install mod_wsgi directly into your Python installation, from within thesource directory of the mod_wsgi package you can run::    python setup.py installThis will compile mod_wsgi and install the resulting package into yourPython installation.If wishing to install an official release direct from the Python PackageIndex (PyPi), you can instead run::    pip install mod_wsgiIf you wish to use a version of Apache which is installed into a nonstandard location, you can set and export the ``APXS`` environment variableto the location of the Apache ``apxs`` script for your Apache installationbefore performing the installation.If you are using Linux, macOS or other UNIX type operating system, and youdon't have Apache available, you can instead install mod_wsgi using::    pip install mod_wsgi-standaloneWhen installing ``mod_wsgi-standalone``, it will also install a versionof Apache into your Python distribution. You can only use ``mod_wsgi-express``when using this variant of the package. The ``mod_wsgi-standalone`` packagefollows the same version numbering as the ``mod_wsgi`` package on PyPi.If you are on Windows and your Apache distribution is not installed intothe directory ``C:/Apache24``, first set the environment variable``MOD_WSGI_APACHE_ROOTDIR`` to the directory containing the Apachedistribution. Ensure you use forward slashes in the directory path. Thedirectory path should not include path components with spaces in the name.Note that nothing will be copied into your Apache installation at thispoint. As a result, you do not need to run this as the root user unlessinstalling it into a site wide Python installation rather than a Pythonvirtual environment. It is recommended you always use Python virtualenvironments and never install any Python package directly into the systemPython installation.On a UNIX type system, to verify that the installation was successful, runthe ``mod_wsgi-express`` script with the ``start-server`` command::    mod_wsgi-express start-serverThis will start up Apache/mod_wsgi on port 8000. You can then verify thatthe installation worked by pointing your browser at::    http://localhost:8000/When started in this way, the Apache web server will stay in theforeground. To stop the Apache server, use CTRL-C.For a simple WSGI application contained in a WSGI script file called``wsgi.py``, in the current directory, you can now run::    mod_wsgi-express start-server wsgi.pyThis instance of the Apache web server will be completely independent of,and will not interfere with any existing instance of Apache you may haverunning on port 80.If you already have another web server running on port 8000, you canoverride the port to be used using the ``--port`` option::    mod_wsgi-express start-server wsgi.py --port 8080For a complete list of options you can run::    mod_wsgi-express start-server --helpFor further information related to using ``mod_wsgi-express`` see the mainmod_wsgi documentation.Non standard Apache installations---------------------------------Many Linux distributions have a tendency to screw around with the standardApache Software Foundation layout for installation of Apache. This caninclude renaming the Apache ``httpd`` executable to something else, and inaddition to potentially renaming it, replacing the original binary with ashell script which performs additional actions which can only be performedas the ``root`` user.In the case of the ``httpd`` executable simply being renamed, theexecutable will obviously not be found and ``mod_wsgi-express`` will failto start at all.In this case you should work out what the ``httpd`` executable was renamedto and use the ``--httpd-executable`` option to specify its real location.For example, if ``httpd`` was renamed to ``apache2``, you might need to use::    mod_wsgi-express start-server wsgi.py --httpd-executable=/usr/sbin/apache2In the case of the ``httpd`` executable being replaced with a shell scriptwhich performs additional actions before then executing the original``httpd`` executable, and the shell script is failing in some way, you willneed to use the location of the original ``httpd`` executable the shellscript is in turn executing.Running mod_wsgi-express as root--------------------------------The primary intention of ``mod_wsgi-express`` is to make it easier forusers to run up Apache on non privileged ports, especially during thedevelopment of a Python web application. If you want to be able to runApache using ``mod_wsgi-express`` on a privileged port such as the standardport 80 used by HTTP servers, then you will need to run``mod_wsgi-express`` as root. In doing this, you will need to performadditional steps.The first thing you must do is supply the ``--user`` and ``--group``options to say what user and group your Python web application should runas. Most Linux distributions will predefine a special user for Apache torun as, so you can use that. Alternatively you can use any other specialuser account you have created for running the Python web application::    mod_wsgi-express start-server wsgi.py --port=80 \        --user www-data --group www-dataThis approach to running ``mod_wsgi-express`` will be fine so long as youare using a process supervisor which expects the process being run to remainin the foreground and not daemonize.If however you are directly integrating into the system init scripts whereseparate start and stop commands are expected, with the executing processexpected to be daemonized, then a different process is required to setup``mod_wsgi-express``.In this case, instead of simply using the ``start-server`` command to``mod_wsgi-express`` you should use ``setup-server``::    mod_wsgi-express setup-server wsgi.py --port=80 \        --user www-data --group www-data \        --server-root=/etc/mod_wsgi-express-80In running this command, it will not actually startup Apache. All it will dois create the set of configuration files and the startup script to be run.So that these are not created in the default location of a directory under``/tmp``, you should use the ``--server-root`` option to specify where theyshould be placed.Having created the configuration and startup script, to start the Apacheinstance you can now run::    /etc/mod_wsgi-express-80/apachectl startTo subsequently stop the Apache instance you can run::    /etc/mod_wsgi-express-80/apachectl stopYou can also restart the Apache instance as necessary using::    /etc/mod_wsgi-express-80/apachectl restartUsing this approach, the original options you supplied to ``setup-server``will be cached with the same configuration used each time. If you need toupdate the set of options, run ``setup-server`` again with the new set ofoptions.Note that even taking all these steps, it is possible that running upApache as ``root`` using ``mod_wsgi-express`` may fail on systems whereSELinux extensions are enabled. This is because the SELinux profile may notmatch what is being expected for the way that Apache is being started, oralternatively, the locations that Apache has been specified as beingallowed to access, don't match where the directory specified using the``--server-root`` directory was placed. You may therefore need to configureSELinux or move the directory used with ``--server-root`` to an allowedlocation.In all cases, any error messages will be logged to a file under the serverroot directory. If you are using ``mod_wsgi-express`` with a processsupervisor, or in a container, where log messages are expected to be sentto the terminal, you can use the ``--log-to-terminal`` option.Using mod_wsgi-express with Django----------------------------------To use ``mod_wsgi-express`` with Django, after having installed themod_wsgi package into your Python installation, edit your Django settingsmodule and add ``mod_wsgi.server`` to the list of installed apps.::    INSTALLED_APPS = (        'django.contrib.admin',        'django.contrib.auth',        'django.contrib.contenttypes',        'django.contrib.sessions',        'django.contrib.messages',        'django.contrib.staticfiles',        'mod_wsgi.server',    )To prepare for running ``mod_wsgi-express``, ensure that you first collectup any Django static file assets into the directory specified for them inthe Django settings file::    python manage.py collectstaticYou can now run the Apache server with mod_wsgi hosting your Djangoapplication by running::    python manage.py runmodwsgiIf working in a development environment and you would like to have any codechanges automatically reloaded, then you can use the ``--reload-on-changes``option.::    python manage.py runmodwsgi --reload-on-changesIf wanting to have Apache started as root in order to listen on port 80,instead of using ``mod_wsgi-express setup-server`` as described above,use the ``--setup-only`` option to the ``runmodwsgi`` management command.::    python manage.py runmodwsgi --setup-only --port=80 \        --user www-data --group www-data \        --server-root=/etc/mod_wsgi-express-80 This will set up all the required files and you can use ``apachectl`` tostart and stop the Apache instance as explained previously.Connecting into Apache installation-----------------------------------If you want to use mod_wsgi in combination with your system Apacheinstallation, the CMMI method for installing mod_wsgi would normally beused.If you are on MacOS X Sierra that is no longer possible. Even prior toMacOS X Sierra, the System Integrity Protection (SIP) system of MacOS X,prevented installing the mod_wsgi module into the Apache modules directory.If you are using Windows, the CMMI method was never supported as Windowsdoesn't supply the required tools to make it work.The CMMI installation method also involves a bit more work as you need toseparately download the mod_wsgi source code, run the ``configure`` tooland then run ``make`` and ``make install``.The alternative to using the CMMI installation method is to use the Apachemod_wsgi module created by running ``pip install``. This can be directlyreferenced from the Apache configuration, or copied into the Apache modulesdirectory.To use the Apache mod_wsgi module from where ``pip install`` placed it,run the command ``mod_wsgi-express module-config``. This will outputsomething like::    LoadModule wsgi_module /usr/local/lib/python2.7/site-packages/mod_wsgi/server/mod_wsgi-py27.so    WSGIPythonHome /usr/local/libThese are the directives needed to configure Apache to load the mod_wsgimodule and tell mod_wsgi where the Python installation directory or virtualenvironment was located.This would be placed in the Apache ``httpd.conf`` file, or if using a Linuxdistribution which separates out module configuration into a``mods-available`` directory, in the ``wsgi.load`` file within the``mods-available`` directory. In the latter case where a ``mods-available``directory is used, the module would then be enabled by running``a2enmod wsgi`` as ``root``. If necessary Apache can then be restarted toverify the module is loading correctly. You can then configure Apache asnecessary for your specific WSGI application.Note that because in this scenario the mod_wsgi module for Apache could belocated in a Python virtual environment, if you destroy the Python virtualenvironment the module will also be deleted. In that case you would need toensure you recreate the Python virtual environment and reinstall themod_wsgi package using ``pip``, or, take out the mod_wsgi configurationfrom Apache before restarting Apache, else it will fail to startup.Instead of referencing the mod_wsgi module from the Python installation,you can instead copy the mod_wsgi module into the Apache installation. Todo that, run the ``mod_wsgi-express install-module`` command, running it as``root`` if necessary. This will output something like::    LoadModule wsgi_module modules/mod_wsgi-py27.so    WSGIPythonHome /usr/local/libThis is similar to above except that the mod_wsgi module was copied to theApache modules directory first and the ``LoadModule`` directive referencesit from that location. You should take these lines and configure Apache inthe same way as described above.Do note that copying the module like this will not work on recent versionsof MacOS X due to the SIP feature of MacOS X.</longdescription>
</pkgmetadata>