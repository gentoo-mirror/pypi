<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># apys - v3.1Wellcome to apys! A simple backend restful framework! ## LANGUAGE[Python &gt;= 3.4.2](https://docs.python.org/3/)## LIBRARIES* [aiohttp](https://aiohttp.readthedocs.io/) - http client/server for asyncio---## INSTALLATION1. Install python 3    * Windows - [Link](https://www.python.org/download/releases/3.5/)    * Ubuntu - `sudo apt-get install python`    * Fedora - `sudo yum install python`    * Arch - `sudo pacman -S python`2. Install PIP - Python libraries manager    * Windows - [Link](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip)    * Ubuntu - `sudo apt-get install pip`    * Fedora - `sudo yum install pip`    * Arch - `sudo pacman -S pip`3. Install this framework using PIP    * `pip install apys`---## INITIALIZING PROJECT```$ apys --init```---## USING### DIRECTORIES    /config - json configuration files    /endpoints - backend endpoints    /filters - script files to execute before the endpoint      /utils - script files to execute when server starts### CONFIGHere are the configuration files used in the app.They will be send to the endpoint via param `api.config`There are 3 special file names:* `prod.json` - The production configuration file * `dev.json` - The development configuration file* `local.json` - The local configuration file (ignore in git)You can also force it to use a configuration with the `--config` or `-c` option:```$ apys -s --config=my_config```&gt;Note: If no config file is chosen, they will work as following: the api tries to load `local.json`, then `dev.json`, then `prod.json`The current config special properties are the following:```json{    &quot;log&quot;: {        &quot;file&quot;: {            &quot;debug&quot;: &quot;string or false //default=false. debug log file, false for sys.stdout&quot;,             &quot;error&quot;: &quot;string or false //default=false. debug error file, false for sys.stderr&quot;,            &quot;(...)&quot;: &quot;string or false //optional. you can specify any other log file, but you will have to tell the `api.debug` function to use it&quot;        },        &quot;color&quot;: &quot;bool //default=true&quot;    },    &quot;server&quot;: {        &quot;port&quot;: &quot;int //default=8080&quot;,        &quot;cors&quot;: &quot;string or false //default=false&quot;    },    &quot;utils&quot;: [&quot;string //default=[]. list of utils in order to load&quot;],    &quot;(...)&quot;: &quot;(...) //you can add any other key and access it via `api.config['my_key']`&quot;}```You can also use environment variableslike `$PORT` (for `PORT` env var), and set a default value if no env var is foundlike `$PORT|8080` or `$PORT|8080|int` (if type is needed)### ENDPOINTSThis will be your main dev dirAll files added here will be an endpoint automaticallyi.e.: the file `endpoints/hello/world.py` will generate an endpoint `/hello/world`The file's code will be the following:```pythonfilters = [    'filter1',    ['filter2', 'filter3']]def method(req, api):    pass # process``` Where `method` is the http request type:* post* get* put* delete* head* options* default - executed when a request is made for any of the above, but it is not implemented `process` is what you wan the endpoint to do (your code) `filter1`, `filter2` and `filter3` are the *filters* scripts (without `.py`) executed before the endpoint is called&gt; If you put your filter inside an array the error they return will be returned only if ALL of them return some error `req` is *aiohttp*'s request, [documentation](http://aiohttp.readthedocs.io/en/stable/web_reference.html#request)&gt; `req`'s property `body` only works for json works as of now`api` is the object that contains all api functionalities:* config - Configuration dictionary used in the actual scope* debug - function to log messages* error - function to log errorsAlso `api.web` contains `aiohttp.web`### FILTERSCode that will that will be called before every request.`method`(req, api) - `method` being the type of http request    The function that will be executed before every request to the function with the same name on the endpoint.    Any result should be stored on the variable `req`, because it is the only local variable on the request.always(req, api)    The function that will be executed before any request.    Note: this function will be executed before the other filters.### UTILSPython files special functionality.It needs to be inside a dir and has some special files## __init__.pyThis file contains a function that will be called before initializing the api.```pythondef init(api):    pass```    The function that will be executed on server startup    Only one time.&gt; Useful for setting some api constants## __cli__.pyThis file contains a function that will add a commandline argument.The util flags will be `--[util_name]` and `--[util_name_first_char]`&gt; util name is test, so flags should be `--test` and `-t````pythonclass CLI:    def __init__(self, result):        # See `parser.add_argument` doc for information on these        self.action = 'store_true'        self.default = False        self.help = 'It makes everything shine'        # store the result of user input        self.result = result    def start(self, api, endpoints):        pass ```## EXAMPLELook at the `demos/` for examples:1. `hello_world`: a simple hello world app, to learn the basics2. `calculator`: a simpler app that resembles more a normal product3. `log_to_file`: an example of logging in files4. `user_role`: an advanced example on filters4. `unit_testing`: an advanced example on adding cli arguments---### STARTING THE SERVERThere are 2 ways to start the server1. Execute `apys -s` from terminal on your root project folder (Recommended)2. Call the method `start()` from module `apys.server`---## OBSERVATIONBoth the framework and this page are in development, so, subjected to changes.&gt; Version previous to v0.1.0 vas called [pypolyback](https://github.com/seijihirao/pypolyback) and used python 2.</longdescription>
</pkgmetadata>