<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![OS Compatibility][platform-badge]](#prerequisites)[![Python Compatibility][python-badge]][python-dl][![pre-commit][pre-commit-badge]][pre-commit][![Code validation](https://github.com/ComplianceAsCode/auditree-arboretum/workflows/format%20%7C%20lint%20%7C%20test/badge.svg)][lint-test][![Upload Python Package](https://github.com/ComplianceAsCode/auditree-arboretum/workflows/PyPI%20upload/badge.svg)][pypi-upload]# auditree-arboretumThe Auditree common fetchers, checks and [harvest][] reports library.## IntroductionAuditree Arboretum is a Python library of common compliance fetchers, checks &amp;amp; harvestreports built upon the [Auditree compliance automation framework][auditree-framework].## Repo content### Functionality categorizationArboretum fetchers, checks, and Harvest reports are organized into functionalgrouping categories.  The following categories have either been contributed toor will be contributed to in the near future.  We anticipate that this list willgrow as arboretum matures.- [Ansible](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/ansible)- [Auditree](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/auditree)- [Chef](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/chef)- [IBM Cloud](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/ibm_cloud)- [Kubernetes](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/kubernetes)- [Object Storage](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/object_storage)- [Pager Duty](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/pager_duty)- [Splunk](https://github.com/ComplianceAsCode/auditree-arboretum/tree/main/arboretum/splunk)### FetchersPlease read the framework documentation for [fetcher design principles][] beforecontributing a fetcher.Fetchers must apply no logic to the data they retrieve. They must write unadulterated(modulo sorting &amp; de-duplication) into the `/raw` area of the locker via theframework-provided decorators or context managers.Fetchers must be atomic - retrieving and creating the data they are responsiblefor. Fetcher execution order is not guaranteed and so you must not assume thatevidence already exists and is current in the locker.  Use[evidence dependency chaining][] if a fetcher depends on evidence gathered by anotherfetcher in order to gather its intended evidence.Fetchers should be as fast as the API call allows. If a call is long running itshould be separated into a dedicated evidence providing tool, which places datawhere a fetcher can retrieve it easily &amp; quickly.### ChecksPlease read the framework documentation for [check design principles][] beforecontributing a check.Checks should only use evidence from the evidence locker to perform check operations.Also, checks **should not** write or change evidence from the evidence locker.  Thatis the job of a fetcher.[Jinja][] is used to produce reports from checks.  As such each check class must haveat least one associated report template in order to produce a check report.  In keepingwith the &quot;DevSecOps&quot; theme, check reports are meant to provide details on violationsidentified by checks.  These violations are in the form of failures and warnings.**They aren't meant to be used to format fetched raw evidence into a readable report.**[Harvest][harvest] reports should be used to satisfy that need.### Harvest ReportsHarvest reports are hosted with the fetchers/checks that collect the evidence forthe reports process. Within `auditree-arboretum` this means the harvest report codelives in `reports` folders throughout this repository. For more details check out[harvest report development][harvest-rpt-dev] in the [harvest][harvest] README.## Usage`arboretum` is available for download from [PyPI](https://pypi.org/project/auditree-arboretum/).### Prerequisites- Supported for execution on OSX and LINUX.- Supported for execution with Python 3.6 and above.### IntegrationFollow these steps to integrate auditree-arboretum fetchers and checks into your project:* Add this `auditree-arboretum` package as a dependency in your Python project.* The following steps can be taken to import individual arboretum fetchers and checks.  * For a fetcher, add a `fetch_&lt;category&gt;_common.py` module, if one does not already  exist, in your project's `fetchers` path where the `&lt;category&gt;` is  the respective category folder within this repo of that fetcher.  Having a separate  common &quot;category&quot; module guards against name collisions across categories.  * For a check, add a `test_&lt;category&gt;_common.py` module, if one does not already exist,  in your project's `checks` path where the `&lt;category&gt;` is the respective category folder  within this repo of that check.  Having a separate common &quot;category&quot; module guards  against name collisions across providers and technologies.  * Import the desired fetcher or check class and the `auditree-framework` will handle  the rest.  For example to use the Abandoned Evidence fetcher from the `auditree` category, add  the following to your `fetch_auditree_common.py`:  ```python  from arboretum.auditree.fetchers.fetch_abandoned_evidence import AbandonedEvidenceFetcher  ```* `auditree-arboretum` fetchers and checks are designed to execute as part of a downstreamPython project, so you may need to setup your project's configuration in order for thefetchers and checks to execute as desired.  Each category folder in this repositoryincludes a README.md that documents each fetcher's and check's configuration.  * In general `auditree-arboretum` fetchers and checks expect an `org` field with content  that captures each fetcher's and check's configuration settings.  For example:  ```json  {    &quot;org&quot;: {      &quot;auditree&quot;: {        &quot;abandoned_evidence&quot;: {          &quot;threshold&quot;: 1234567,          &quot;exceptions&quot;: {          &quot;raw/path/to-evidence.json&quot;: &quot;This is a good reason&quot;,          &quot;raw/path/to-evidence-2.json&quot;: &quot;This is also a good reason&quot;        }      }    }  }  ```* Finally, for a check, be sure to add the appropriate entry into your project's``controls.json`` file.  Doing this allows you to group checks together as a controlset which is useful for organizing check notifications and targeted check execution.  For example to use the Abandoned Evidence check, add something similar to the  following to your project's `controls.json`:  ```json  {    &quot;arboretum.auditree.checks.test_abandoned_evidence.AbandonedEvidenceCheck&quot;: {      &quot;auditree_evidence&quot;: {        &quot;auditree_control&quot;: [&quot;arboretum.auditree&quot;]      }    }  }  ```[platform-badge]: https://img.shields.io/badge/platform-osx%20|%20linux-orange.svg[pre-commit-badge]: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white[python-badge]: https://img.shields.io/badge/python-v3.6+-blue.svg[pre-commit]: https://github.com/pre-commit/pre-commit[python-dl]: https://www.python.org/downloads/[lint-test]: https://github.com/ComplianceAsCode/auditree-arboretum/actions?query=workflow%3A%22format+%7C+lint+%7C+test%22[pypi-upload]: https://github.com/ComplianceAsCode/auditree-arboretum/actions?query=workflow%3A%22PyPI+upload%22[auditree-framework]: https://github.com/ComplianceAsCode/auditree-framework[harvest]: https://github.com/ComplianceAsCode/auditree-harvest[fetcher design principles]: https://complianceascode.github.io/auditree-framework/design-principles.html#compliance-fetchers[evidence dependency chaining]: https://complianceascode.github.io/auditree-framework/design-principles.html#evidence-dependency-chaining[check design principles]: https://complianceascode.github.io/auditree-framework/design-principles.html#compliance-checks[Jinja]: https://palletsprojects.com/p/jinja/[harvest-rpt-dev]: https://github.com/ComplianceAsCode/auditree-harvest#report-development</longdescription>
</pkgmetadata>