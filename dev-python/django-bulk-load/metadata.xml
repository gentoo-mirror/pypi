<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Bulk LoadLoad large batches of Django models into the DB using the Postgres COPY command. This library is a more performant alternative to [bulk_create](https://docs.djangoproject.com/en/3.2/ref/models/querysets/#bulk-create) and [bulk_update](https://docs.djangoproject.com/en/3.2/ref/models/querysets/#bulk-update) in Django.Note: Currently, this library only supports Postgres. Other databases may be added in the future.## Install```shellpip install django-bulk-load```## Benchmarks### bulk_update_models vs [Django's bulk_update](https://docs.djangoproject.com/en/dev/ref/models/querysets/#bulk-update) vs [django-bulk-update](https://github.com/aykut/django-bulk-update)#### Results```shellcount: 1,000bulk_update (Django):             0.45329761505126953bulk_update (django-bulk-update): 0.1036691665649414bulk_update_models:               0.04524850845336914count: 10,000bulk_update (Django):             6.0840747356414795bulk_update (django-bulk-update): 2.433042049407959bulk_update_models:               0.10899758338928223count: 100,000bulk_update (Django):             647.6648473739624bulk_update (django-bulk-update): 619.0643970966339bulk_update_modelsL               0.9625072479248047count: 1,000,000bulk_update (Django):             Does not completebulk_update (django-bulk-update): Does not completebulk_update_models:               14.923949003219604```See this thread for information on Django performance issues.https://groups.google.com/g/django-updates/c/kAn992Fkk24#### Code```shellmodels = [TestComplexModel(id=i, integer_field=i, string_field=str(i)) for i in range(count)]def run_bulk_update_django():  start = time()  TestComplexModel.objects.bulk_update(models, fields=[&quot;integer_field&quot;, &quot;string_field&quot;])  print(time() - start)  def run_bulk_update_library():  start = time()  TestComplexModel.objects.bulk_update(models, update_fields=[&quot;integer_field&quot;, &quot;string_field&quot;])  print(time() - start)  def run_bulk_update_models():  start = time()  bulk_update_models(models)  print(time() - start)```### bulk_insert_models vs [Django's bulk_create](https://docs.djangoproject.com/en/dev/ref/models/querysets/#bulk-create)#### Results```count: 1,000bulk_create:        0.048630714416503906bulk_insert_models: 0.03132152557373047count: 10,000bulk_create:        0.45952868461608887bulk_insert_models: 0.1908433437347412count: 100,000bulk_create:        4.875206708908081bulk_insert_models: 1.764514684677124count: 1,000,000bulk_create:        59.16990399360657bulk_insert_models: 18.651455640792847```#### Code```shellmodels = [TestComplexModel(integer_field=i, string_field=str(i)) for i in range(count)]def run_bulk_create():  start = time()  TestComplexModel.objects.bulk_create(models)  print(time() - start)  def run_bulk_insert_models():  start = time()  bulk_insert_models(models)  print(time() - start)```## APIJust import and use the functions below. No need to change settings.py### bulk_insert_models()INSERT a batch of models. It makes use of the Postgres COPY command to improve speed. If a row already exist, the entireinsert will fail. See bulk_load.py for descriptions of all parameters.```pythonfrom django_bulk_load import bulk_insert_modelsbulk_insert_models(    models: Sequence[Model],    ignore_conflicts: bool = False,    return_models: bool = False,)```### bulk_upsert_models()UPSERT a batch of models. It replicates [UPSERTing](https://wiki.postgresql.org/wiki/UPSERT). By default, it matches existing models using the model `pk`, but you can specify matching on other fields with`pk_field_names`. See bulk_load.py for descriptions of all parameters.```pythonfrom django_bulk_load import bulk_upsert_modelsbulk_upsert_models(    models: Sequence[Model],    pk_field_names: Sequence[str] = None,    insert_only_field_names: Sequence[str] = None,    model_changed_field_names: Sequence[str] = None,    update_if_null_field_names: Sequence[str] = None,    update_where: Callable[[Sequence[Field], str, str], Composable] = None,    return_models: bool = False,)```### bulk_update_models()UPDATE a batch of models. By default, it matches existing models using the model `pk`, but you can specify matching on other fields with`pk_field_names`. If the model is not found in the database, it is ignored. See bulk_load.py for descriptions of all parameters.```pythonfrom django_bulk_load import bulk_update_modelsbulk_update_models(    models: Sequence[Model],    update_field_names: Sequence[str] = None,    pk_field_names: Sequence[str] = None,    model_changed_field_names: Sequence[str] = None,    update_if_null_field_names: Sequence[str] = None,    update_where: Callable[[Sequence[Field], str, str], Composable] = None,    return_models: bool = False,)```### bulk_insert_changed_models()INSERTs a new record in the database when a model field has changed in any of `compare_field_names`,with respect to its latest state, where &quot;latest&quot; is defined by ordering the recordsfor a given primary key by sorting in descending order on the column passed in`order_field_name`. Does not INSERT a new record if the latest record has not changed. See bulk_load.py for descriptions of all parameters.```pythonfrom django_bulk_load import bulk_insert_changed_modelsbulk_insert_changed_models(    models: Sequence[Model],    pk_field_names: Sequence[str],    compare_field_names: Sequence[str],    order_field_name=None,    return_models=None,)```### bulk_select_model_dicts()Select/Get model dictionaries by filter_field_names. It returns dictionaries, not Djangomodels for performance reasons. This is useful when querying a very large set of models or multiple field IN clauses. ```pythonfrom django_bulk_load import bulk_select_model_dictsbulk_select_model_dicts(    model_class: Type[Model],    filter_field_names: Iterable[str],    select_field_names: Iterable[str],    filter_data: Iterable[Sequence],    select_for_update=False,    skip_filter_transform=False,)```## ContributingWe are not accepting pull requests from anyone outside Cedar employees at this time. All pull requests will be closed.### Commit SyntaxAll PRs must be a single commit and follow the following syntax https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format### TestingYou will need Docker installed and run the following command```./test.sh```</longdescription>
</pkgmetadata>