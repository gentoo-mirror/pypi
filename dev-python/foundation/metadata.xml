<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========foundation==========The Problem-----------**Django** clearly defines the following paradigms (amongst others):- Object-Relational Mapping (ORM) via Models- Request Routing via URLs- Data Binding via Forms- Request-to-Response Mapping via Views- Data Presentation via TemplatesWhile this explicit control over the design and function of each component isoptimal for many use cases, one could argue that it runs afould of Django'smost desirable design principle: &quot;Don't Repeat Yourself&quot; (DRY).  Moreto the point, while Django ships with an admin app that most new users raveabout, there is no obvious way to expose a front-end without a fair amount ofwork (especially when auth or comprehension of model interrelationships isdesired) that could be simplified greatly if there was a central class throughwhich those interrelationships were managed.Many approaches set out to solve this through class methods on the Models ortheir Managers, but that runs counter to the spirit of segregating the Model(intended to be a representation of the state of the DB) from logic (typicallyhoused in Views or Forms).  At the same time, each of those pieces is intendedto only have a comprehension of a single Model and not the interrelationshipsbetween said Models, resulting, for instance, in an inability to have a givenimplementation accomodate more than one relation that a developer may desireto expose to the end-user.A Solution----------**foundation** sets out to provide a single Backend per Django Site (website)with Controllers specified per-model and the interrelationships between thoseControllers serving as:- the Model (DB) access layer (via Model Manager and QuerySet)- the View generation *and* access layer (via Class-Based Views which are, in  their own right, Controllers)- the Form(Set) generation layer- the access-control layer- the URL specification layerThis design is inspired by Django's own admin app, as well as the designpatterns of other MVC platforms.  It aims to re-use as much work from adminout of laziness and, more importantly, a belief of mine that the admin shouldbe sitting atop the foundation, not the all-to-often mistake new users make ofattempting to expose a front-end from within admin.How it works------------If you are not already familiar with how Django sets itself up and processes arequest, here are two links of interest:- `Initialization Process`_- `Processing a Request`_.. _`Initialization Process`: https://docs.djangoproject.com/en/1.10/ref/applications/#initialization-process.. _`Processing a Request`: https://docs.djangoproject.com/en/1.10/topics/http/urls/#how-django-processes-a-requestIn addition to the above, foundation does the following during initialization:- foundation should be installed under all project apps to ensure the Backend  instance is in a good state prior to being referenced.  Additionally, the  app config file is a good place to instantiate your own Backend subclass if  you want to ensure any behaviors are baked into the backend used site-wide.- Once applications are ready, the foundation application's ready signal will  fire, which will autodiscover all of the controllers modules/packages in each  installed app.  Additionally, permission creation for any new models will be  initiated if that feature is enabled, or you can manage that in your own app  code where appropriate (or if you implement your own permissions scheme).- Finally, the URL configuration(s) are configured.  For many sites, this means  you can replace the settings ROOT_URLCONF with a path to your backend's &quot;urls&quot;  attribute, although you may append it to the list of urlpatterns in the  project &quot;urls&quot; module to provide flexibility in adding other url specs (e.g.  admin).  When the &quot;urls&quot; attribute is accessed, it will perform a single pass  through all of the Controllers to accumulate the appropriate URL paths in  namespaced patterns.  At this time, all of the class-based view (CBV) base  classes will also be constructed, which will in turn be generated into  callables just-in-time (JIT) by calling their &quot;as_view&quot; method (same as stock  Django).Since it is operating entirely within the context of a CBV at this point, therest of what foundation does is essentially overriding stock django CBVmethods, although there are some important behaviors to note that are possiblebecause of the controller interrelationships.  Most notably, the Django CBV&quot;dispatch&quot; behavior has been universally extended by two components.#. A &quot;get_handler&quot; method is provided which allows for a given view to handle   a request using other than the CBV's standard HTTP-method-named methods.#. A &quot;handle_common&quot; method is provided which allows for activities common to   some or all HTTP methods (e.g. auth, QS grooming) to be performed prior to   calling downstream methods to remove redundancy and clutter from those   methods.In trying to keep with some of the paradigms set forth in django-admin, thismeans that for any controller- (and thus, model-) aware view, that a view &quot;mode&quot;is set (e.g. add, edit, view) as well as an &quot;edit&quot; and &quot;add&quot; flag tospecifically indicate whether the view is used for editing or creation.  Thesewill likely move further down the stack to only be present in &quot;html-form-aware&quot;views and better accommodate AJAX and RESTful views.Additionally, handle_common is where a common layer of authentication andaccess-control logic occurs.  This ensures downstream views are guaranteed tohave a common logical layer invoked prior to serving a response.  By default,the access control ships with awareness of predefined (and overridable) &quot;public&quot;and &quot;private&quot; named views (e.g. list and view are public while add, edit, anddelete are private).  Additionally, it provides a contextual switch so thatsuperusers must elect to &quot;act&quot; as superusers, otherwise they will be subject tothe same rules as non-superusers.</longdescription>
</pkgmetadata>