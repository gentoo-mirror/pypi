<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ZipcodesZipcodes is a simple library for querying U.S. zipcodes.The Python `sqlite3` module is not required in order to use this package.```python&gt;&gt;&gt; import zipcodes&gt;&gt;&gt; assert zipcodes.is_real('77429')&gt;&gt;&gt; assert len(zipcodes.similar_to('7742')) != 0&gt;&gt;&gt; exact_zip = zipcodes.matching('77429')[0]&gt;&gt;&gt; filtered_zips = zipcodes.filter_by(city=&quot;Cypress&quot;, state=&quot;TX&quot;) &gt;&gt;&gt; assert exact_zip in filtered_zips&gt;&gt;&gt; pprint.pprint(exact_zip){'acceptable_cities': [],  'active': True,  'area_codes': ['281', '832'],  'city': 'Cypress',  'country': 'US',  'county': 'Harris County',  'lat': '29.9857',  'long': '-95.6548',  'state': 'TX',  'timezone': 'America/Chicago',  'unacceptable_cities': [],  'world_region': 'NA',  'zip_code': '77429',  'zip_code_type': 'STANDARD'}[```⚠️ The zipcode data was last updated on: **Oct. 3, 2021** ⚠️[![Downloads](https://pepy.tech/badge/zipcodes/month)](https://pepy.tech/project/zipcodes/month)[![Supported Versions](https://img.shields.io/pypi/pyversions/zipcodes.svg)](https://pypi.org/project/zipcodes)[![Contributors](https://img.shields.io/github/contributors/seanpianka/zipcodes.svg)](https://github.com/seanpianka/zipcodes/graphs/contributors)## InstallationZipcodes is available on PyPI:```console$ python -m pip install zipcodes```Zipcodes supports Python 2.6+ and Python 3.2+.### Compiling with PyInstallerAdd a data file to your PyInstaller bundle with the [`--add-data`](https://pyinstaller.readthedocs.io/en/stable/spec-files.html#adding-data-files) flag.#### Linux and MacOS`--add-data &quot;&lt;path-to-package-install&gt;/zipcodes/zips.json.bz2:zipcodes&quot;`#### Windows`--add-data &quot;&lt;path-to-package-install&gt;\zipcodes\zips.json.bz2;zipcodes&quot;`## Zipcode DataThe build script for the zipcode data outputs a JSON file containing all the zipcode data and zipped using bzip2. The data sources are stored under `build/app/data`. Build the zipcode data for distribution: ```shell script$ build/app/__init__.py # outputs `zipcodes/zips.json.bz2````## TestsThe tests are defined in a declarative, table-based format that generates testcases. Run the tests directly:```shell script$ python tests/__init__.py ```## Examples```python&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; import zipcodes&gt;&gt;&gt; # Simple zip-code matching.&gt;&gt;&gt; pprint(zipcodes.matching('77429'))[{'acceptable_cities': [],  'active': True,  'area_codes': ['281', '832'],  'city': 'Cypress',  'country': 'US',  'county': 'Harris County',  'lat': '29.9857',  'long': '-95.6548',  'state': 'TX',  'timezone': 'America/Chicago',  'unacceptable_cities': [],  'world_region': 'NA',  'zip_code': '77429',  'zip_code_type': 'STANDARD'}]&gt;&gt;&gt; # Handles of Zip+4 zip-codes nicely. :)&gt;&gt;&gt; pprint(zipcodes.matching('77429-1145'))[{'acceptable_cities': [],  'active': True,  'area_codes': ['281', '832'],  'city': 'Cypress',  'country': 'US',  'county': 'Harris County',  'lat': '29.9857',  'long': '-95.6548',  'state': 'TX',  'timezone': 'America/Chicago',  'unacceptable_cities': [],  'world_region': 'NA',  'zip_code': '77429',  'zip_code_type': 'STANDARD'}]&gt;&gt;&gt; # Will try to handle invalid zip-codes gracefully...&gt;&gt;&gt; print(zipcodes.matching('06463'))[]&gt;&gt;&gt; # Until it cannot.&gt;&gt;&gt; zipcodes.matching('0646a')Traceback (most recent call last):  ...TypeError: Invalid characters, zipcode may only contain digits and &quot;-&quot;.&gt;&gt;&gt; zipcodes.matching('064690')Traceback (most recent call last):  ...TypeError: Invalid format, zipcode must be of the format: &quot;#####&quot; or &quot;#####-####&quot;&gt;&gt;&gt; zipcodes.matching(None)Traceback (most recent call last):  ...TypeError: Invalid type, zipcode must be a string.&gt;&gt;&gt; # Whether the zip-code exists within the database.&gt;&gt;&gt; print(zipcodes.is_real('06463'))False&gt;&gt;&gt; # How handy!&gt;&gt;&gt; print(zipcodes.is_real('06469'))True&gt;&gt;&gt; # Search for zipcodes that begin with a pattern.&gt;&gt;&gt; pprint(zipcodes.similar_to('1018'))[{'acceptable_cities': [],  'active': False,  'area_codes': ['212'],  'city': 'New York',  'country': 'US',  'county': 'New York County',  'lat': '40.71',  'long': '-74',  'state': 'NY',  'timezone': 'America/New_York',  'unacceptable_cities': ['J C Penney'],  'world_region': 'NA',  'zip_code': '10184',  'zip_code_type': 'UNIQUE'}, {'acceptable_cities': [],  'active': True,  'area_codes': ['212'],  'city': 'New York',  'country': 'US',  'county': 'New York County',  'lat': '40.7143',  'long': '-74.0067',  'state': 'NY',  'timezone': 'America/New_York',  'unacceptable_cities': [],  'world_region': 'NA',  'zip_code': '10185',  'zip_code_type': 'PO BOX'}]&gt;&gt;&gt; # Use filter_by to filter a list of zip-codes by specific attribute-&gt;value pairs.&gt;&gt;&gt; pprint(zipcodes.filter_by(city=&quot;Old Saybrook&quot;))[{'acceptable_cities': [],  'active': True,  'area_codes': ['860'],  'city': 'Old Saybrook',  'country': 'US',  'county': 'Middlesex County',  'lat': '41.3015',  'long': '-72.3879',  'state': 'CT',  'timezone': 'America/New_York',  'unacceptable_cities': ['Fenwick'],  'world_region': 'NA',  'zip_code': '06475',  'zip_code_type': 'STANDARD'}]&gt;&gt;&gt; # Arbitrary nesting of similar_to and filter_by calls, allowing for great precision while filtering.&gt;&gt;&gt; pprint(zipcodes.similar_to('2', zips=zipcodes.filter_by(active=True, city='Windsor')))[{'acceptable_cities': [],  'active': True,  'area_codes': ['757'],  'city': 'Windsor',  'country': 'US',  'county': 'Isle of Wight County',  'lat': '36.8628',  'long': '-76.7143',  'state': 'VA',  'timezone': 'America/New_York',  'unacceptable_cities': [],  'world_region': 'NA',  'zip_code': '23487',  'zip_code_type': 'STANDARD'}, {'acceptable_cities': ['Askewville'],  'active': True,  'area_codes': ['252'],  'city': 'Windsor',  'country': 'US',  'county': 'Bertie County',  'lat': '35.9942',  'long': '-76.9422',  'state': 'NC',  'timezone': 'America/New_York',  'unacceptable_cities': [],  'world_region': 'NA',  'zip_code': '27983',  'zip_code_type': 'STANDARD'}, {'acceptable_cities': [],  'active': True,  'area_codes': ['803'],  'city': 'Windsor',  'country': 'US',  'county': 'Aiken County',  'lat': '33.4730',  'long': '-81.5132',  'state': 'SC',  'timezone': 'America/New_York',  'unacceptable_cities': [],  'world_region': 'NA',  'zip_code': '29856',  'zip_code_type': 'STANDARD'}]&gt;&gt;&gt; # Have any other ideas? Make a pull request and start contributing today!&gt;&gt;&gt; # Made with love by Sean Pianka```</longdescription>
</pkgmetadata>