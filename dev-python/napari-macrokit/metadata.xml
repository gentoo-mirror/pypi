<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># napari-macrokit[![License BSD-3](https://img.shields.io/pypi/l/napari-macrokit.svg?color=green)](https://github.com/hanjinliu/napari-macrokit/raw/main/LICENSE)[![PyPI](https://img.shields.io/pypi/v/napari-macrokit.svg?color=green)](https://pypi.org/project/napari-macrokit)[![Python Version](https://img.shields.io/pypi/pyversions/napari-macrokit.svg?color=green)](https://python.org)[![tests](https://github.com/hanjinliu/napari-macrokit/workflows/tests/badge.svg)](https://github.com/hanjinliu/napari-macrokit/actions)[![codecov](https://codecov.io/gh/hanjinliu/napari-macrokit/branch/main/graph/badge.svg)](https://codecov.io/gh/hanjinliu/napari-macrokit)[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/napari-macrokit)](https://napari-hub.org/plugins/napari-macrokit)Executable script generation for napari plugins.![](https://github.com/hanjinliu/napari-macrokit/blob/main/images/example.gif)&amp;uarr; [Example](https://github.com/hanjinliu/napari-macrokit/blob/main/examples/regionprops.py) showing the real-time recording of GUI operation.This napari plugin aims at making image analysis reproducible with arbitrary input/output types.## UsageCreate a macro object, decorate functions with `record` method and run!```pythonfrom napari_macrokit import get_macromacro = get_macro(&quot;my-plugin-specifier&quot;)  # get macro object# define a function@macro.recorddef add(a: float, b: float) -&gt; float:    return a + b# runresult = add(3.2, 5.4)add(result, 1.0)macro# Out:# &gt;&gt;&gt; float0 = add(3.2, 5.4)# &gt;&gt;&gt; float1 = add(float0, 1.0)```## Record GUI OperationsYou can use recordable functions in your widgets to keep tracks of GUI operations.More simply, you can double-decorate functions with `record` and `magicgui`.```pythonimport numpy as npfrom magicgui import magicguiimport naparifrom napari.types import ImageDatafrom napari_macrokit import get_macromacro = get_macro(&quot;my-plugin-specifier&quot;)  # get macro object# define recordable magicgui@magicgui@macro.recorddef add(image: ImageData, b: float) -&gt; ImageData:    return image + bviewer = napari.Viewer()  # launch a viewerviewer.add_image(np.random.random((100, 100)))  # image dataviewer.window.add_dock_widget(add)  # add magicgui to the viewer```Running add twice in GUI and you'll find macro updated like below.```pythonmacro# Out# &gt;&gt;&gt; image0 = add(viewer.layers['Image'].data, 0.06)# &gt;&gt;&gt; image1 = add(image0, 0.12)```## Combining PluginsSuppose you have two modules that use `napari-macrokit`.```python# napari_module_0.pyfrom napari.types import ImageDatafrom scipy import ndimage as ndifrom napari_macrokit import get_macromacro = get_macro(&quot;napari-module-0&quot;)@macro.recorddef gaussian_filter(image: ImageData, sigma: float) -&gt; ImageData:    return ndi.gaussian_filter(image, sigma=sigma)@macro.recorddef threshold(image: ImageData, value: float) -&gt; ImageData:    return image &gt; value``````python# napari_module_1.pyfrom napari.types import ImageDataimport numpy as npfrom napari_macrokit import get_macromacro = get_macro(&quot;napari-module-1&quot;)@macro.recorddef estimate_background(image: ImageData) -&gt; float:    return np.percentile(image, 10.0)```You can use functions from both modules to build an analysis workflow by collecting existing macro objects with `collect_macro` function. All the recordable actions in the modules will also be recorded to the returned macro object.```pythonimport numpy as npfrom napari_macrokit import collect_macrofrom napari_module_0 import gaussian_filter, thresholdfrom napari_module_1 import estimate_background# global_macro will record all the macro available at this pointglobal_macro = collect_macro()# start image analysis!image = np.random.random((100, 100))out = gaussian_filter(image, 2.0)thresh = estimate_background(out)binary = threshold(out, thresh)macro# Out# &gt;&gt;&gt; image0 = gaussian_filter(arr0, 2.0)# &gt;&gt;&gt; float0 = estimate_background(image0)# &gt;&gt;&gt; image1 = threshold(image1, float0)```---------------------------------This [napari] plugin was generated with [Cookiecutter] using [@napari]'s [cookiecutter-napari-plugin] template.## InstallationYou can install `napari-macrokit` via [pip]:    pip install napari-macrokitTo install latest development version :    pip install git+https://github.com/hanjinliu/napari-macrokit.git## ContributingContributions are very welcome. Tests can be run with [tox], please ensurethe coverage at least stays the same before you submit a pull request.## LicenseDistributed under the terms of the [BSD-3] license,&quot;napari-macrokit&quot; is free and open source software## IssuesIf you encounter any problems, please [file an issue] along with a detailed description.[napari]: https://github.com/napari/napari[Cookiecutter]: https://github.com/audreyr/cookiecutter[@napari]: https://github.com/napari[MIT]: http://opensource.org/licenses/MIT[BSD-3]: http://opensource.org/licenses/BSD-3-Clause[GNU GPL v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt[GNU LGPL v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt[Apache Software License 2.0]: http://www.apache.org/licenses/LICENSE-2.0[Mozilla Public License 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt[cookiecutter-napari-plugin]: https://github.com/napari/cookiecutter-napari-plugin[file an issue]: https://github.com/hanjinliu/napari-macrokit/issues[napari]: https://github.com/napari/napari[tox]: https://tox.readthedocs.io/en/latest/[pip]: https://pypi.org/project/pip/[PyPI]: https://pypi.org/</longdescription>
</pkgmetadata>