<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Azure Cognitive Language Service Question Answering client library for PythonQuestion Answering is a cloud-based API service that lets you create a conversational question-and-answer layer over your existing data. Use it to build a knowledge base by extracting questions and answers from your semi-structured content, including FAQ, manuals, and documents. Answer users’ questions with the best answers from the QnAs in your knowledge base—automatically. Your knowledge base gets smarter, too, as it continually learns from users' behavior.[Source code][questionanswering_client_src] | [Package (PyPI)][questionanswering_pypi_package] | [API reference documentation][questionanswering_refdocs] | [Product documentation][questionanswering_docs] | [Samples][questionanswering_samples]## _Disclaimer__Azure SDK Python packages support for Python 2.7 ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_## Getting started### Prerequisites- Python 3.7 or later is required to use this package.- An [Azure subscription][azure_subscription]- A [Language Service][language_service] resource### Install the packageInstall the Azure Question Answering client library for Python with [pip][pip_link]:```bashpip install azure-ai-language-questionanswering```&gt; Note: this version of the client library defaults to the service API version `2021-10-01`.### Authenticate the clientIn order to interact with the Question Answering service, you'll need to create an instance of the [QuestionAnsweringClient][questionanswering_client_class] class or an instance of the [AuthoringClient][authoring_client_class] for managing projects within your resource. You will need an **endpoint**, and an **API key** to instantiate a client object. For more information regarding authenticating with Cognitive Services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].#### Get an API keyYou can get the **endpoint** and an **API key** from the Language resource in the [Azure Portal][azure_portal].Alternatively, use the [Azure CLI][azure_cli] command shown below to get the API key from the Language resource.```powershellaz cognitiveservices account keys list --resource-group &lt;resource-group-name&gt; --name &lt;resource-name&gt;```#### Create QuestionAnsweringClientOnce you've determined your **endpoint** and **API key** you can instantiate a [QuestionAnsweringClient][questionanswering_client_class]:```pythonfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering import QuestionAnsweringClientendpoint = &quot;https://{myaccount}.api.cognitive.microsoft.com&quot;credential = AzureKeyCredential(&quot;{api-key}&quot;)client = QuestionAnsweringClient(endpoint, credential)```#### Create AuthoringClientWith your endpoint and API key, you can instantiate a [AuthoringClient][authoring_client_class]:```pythonfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering.authoring import AuthoringClientendpoint = &quot;https://{myaccount}.api.cognitive.microsoft.com&quot;credential = AzureKeyCredential(&quot;{api-key}&quot;)client = AuthoringClient(endpoint, credential)```#### Create a client with an Azure Active Directory CredentialTo use an [Azure Active Directory (AAD) token credential][cognitive_authentication_aad],provide an instance of the desired credential type obtained from the[azure-identity][azure_identity_credentials] library.Note that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain]name for your resource in order to use this type of authentication.Authentication with AAD requires some initial setup:- [Install azure-identity][install_azure_identity]- [Register a new AAD application][register_aad_app]- [Grant access][grant_role_access] to the Language service by assigning the &quot;Cognitive Services Language Reader&quot; role to your service principal.After setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.As an example, [DefaultAzureCredential][default_azure_credential]can be used to authenticate the client:Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`Use the returned token credential to authenticate the client:```pythonfrom azure.ai.language.questionanswering import QuestionAnsweringClientfrom azure.identity import DefaultAzureCredentialcredential = DefaultAzureCredential()client = QuestionAnsweringClient(endpoint=&quot;https://&lt;my-custom-subdomain&gt;.cognitiveservices.azure.com/&quot;, credential=credential)```## Key concepts### QuestionAnsweringClientThe [QuestionAnsweringClient][questionanswering_client_class] is the primary interface for asking questions using a knowledge base with your own information, or text input using pre-trained models.For asynchronous operations, an async `QuestionAnsweringClient` is in the `azure.ai.language.questionanswering.aio` namespace.### AuthoringClientThe [AuthoringClient][authoring_client_class] provides an interface for managing Question Answering projects. Examples of the available operations include creating and deploying projects, updating your knowledge sources, and updating question and answer pairs. It provides both synchronous and asynchronous APIs.## Examples### QuestionAnsweringClientThe `azure-ai-language-questionanswering` client library provides both synchronous and asynchronous APIs.- [Ask a question](#ask-a-question &quot;Ask a question&quot;)- [Ask a follow-up question](#ask-a-follow-up-question &quot;Ask a follow-up question&quot;)- [Create a new project](#create-a-new-project &quot;Create a new project&quot;)- [Add a knowledge source](#add-a-knowledge-source &quot;Add a knowledge source&quot;)- [Deploy your project](#deploy-your-project &quot;Deploy your project&quot;)- [Asynchronous operations](#asynchronous-operations &quot;Asynchronous operations&quot;)#### Ask a questionThe only input required to ask a question using a knowledge base is just the question itself:```pythonimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering import QuestionAnsweringClientendpoint = os.environ[&quot;AZURE_QUESTIONANSWERING_ENDPOINT&quot;]key = os.environ[&quot;AZURE_QUESTIONANSWERING_KEY&quot;]client = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))output = client.get_answers(    question=&quot;How long should my Surface battery last?&quot;,    project_name=&quot;FAQ&quot;,    deployment_name=&quot;test&quot;)for candidate in output.answers:    print(&quot;({}) {}&quot;.format(candidate.confidence, candidate.answer))    print(&quot;Source: {}&quot;.format(candidate.source))```You can set additional keyword options to limit the number of answers, specify a minimum confidence score, and more.#### Ask a follow-up questionIf your knowledge base is configured for [chit-chat][questionanswering_docs_chat], the answers from the knowledge base may include suggested [prompts for follow-up questions][questionanswering_refdocs_prompts] to initiate a conversation. You can ask a follow-up question by providing the ID of your chosen answer as the context for the continued conversation:```pythonimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering import QuestionAnsweringClientfrom azure.ai.language.questionanswering import modelsendpoint = os.environ[&quot;AZURE_QUESTIONANSWERING_ENDPOINT&quot;]key = os.environ[&quot;AZURE_QUESTIONANSWERING_KEY&quot;]client = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))output = client.get_answers(    question=&quot;How long should charging take?&quot;,    answer_context=models.KnowledgeBaseAnswerContext(        previous_qna_id=previous_answer.qna_id    ),    project_name=&quot;FAQ&quot;,    deployment_name=&quot;live&quot;)for candidate in output.answers:    print(&quot;({}) {}&quot;.format(candidate.confidence, candidate.answer))    print(&quot;Source: {}&quot;.format(candidate.source))```#### Create a new project```pythonimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering.authoring import AuthoringClient# get service secretsendpoint = os.environ[&quot;AZURE_QUESTIONANSWERING_ENDPOINT&quot;]key = os.environ[&quot;AZURE_QUESTIONANSWERING_KEY&quot;]# create clientclient = AuthoringClient(endpoint, AzureKeyCredential(key))with client:    # create project    project_name = &quot;IssacNewton&quot;    project = client.create_project(        project_name=project_name,        options={            &quot;description&quot;: &quot;biography of Sir Issac Newton&quot;,            &quot;language&quot;: &quot;en&quot;,            &quot;multilingualResource&quot;: True,            &quot;settings&quot;: {                &quot;defaultAnswer&quot;: &quot;no answer&quot;            }        })    print(&quot;view created project info:&quot;)    print(&quot;\tname: {}&quot;.format(project[&quot;projectName&quot;]))    print(&quot;\tlanguage: {}&quot;.format(project[&quot;language&quot;]))    print(&quot;\tdescription: {}&quot;.format(project[&quot;description&quot;]))```#### Add a knowledge source```pythonimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering.authoring import AuthoringClient# get service secretsendpoint = os.environ[&quot;AZURE_QUESTIONANSWERING_ENDPOINT&quot;]key = os.environ[&quot;AZURE_QUESTIONANSWERING_KEY&quot;]# create clientclient = AuthoringClient(endpoint, AzureKeyCredential(key))project_name = &quot;IssacNewton&quot;update_sources_poller = client.begin_update_sources(    project_name=project_name,    sources=[        {            &quot;op&quot;: &quot;add&quot;,            &quot;value&quot;: {                &quot;displayName&quot;: &quot;Issac Newton Bio&quot;,                &quot;sourceUri&quot;: &quot;https://wikipedia.org/wiki/Isaac_Newton&quot;,                &quot;sourceKind&quot;: &quot;url&quot;            }        }    ])update_sources_poller.result()# list sourcesprint(&quot;list project sources&quot;)sources = client.list_sources(    project_name=project_name)for source in sources:    print(&quot;project: {}&quot;.format(source[&quot;displayName&quot;]))    print(&quot;\tsource: {}&quot;.format(source[&quot;source&quot;]))    print(&quot;\tsource Uri: {}&quot;.format(source[&quot;sourceUri&quot;]))    print(&quot;\tsource kind: {}&quot;.format(source[&quot;sourceKind&quot;]))```#### Deploy your project```pythonimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering.authoring import AuthoringClient# get service secretsendpoint = os.environ[&quot;AZURE_QUESTIONANSWERING_ENDPOINT&quot;]key = os.environ[&quot;AZURE_QUESTIONANSWERING_KEY&quot;]# create clientclient = AuthoringClient(endpoint, AzureKeyCredential(key))project_name = &quot;IssacNewton&quot;# deploy projectdeployment_poller = client.begin_deploy_project(    project_name=project_name,    deployment_name=&quot;production&quot;)deployment_poller.result()# list all deploymentsdeployments = client.list_deployments(    project_name=project_name)print(&quot;view project deployments&quot;)for d in deployments:    print(d)```#### Asynchronous operationsThe above examples can also be run asynchronously using the clients in the `aio` namespace:```pythonimport osfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering.aio import QuestionAnsweringClientendpoint = os.environ[&quot;AZURE_QUESTIONANSWERING_ENDPOINT&quot;]key = os.environ[&quot;AZURE_QUESTIONANSWERING_KEY&quot;]client = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))output = await client.get_answers(    question=&quot;How long should my Surface battery last?&quot;,    project_name=&quot;FAQ&quot;,    deployment_name=&quot;production&quot;)```## Optional ConfigurationOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation][azure_core_ref_docs] describes available configurations for retries, logging, transport protocols, and more.## Troubleshooting### GeneralAzure Question Answering clients raise exceptions defined in [Azure Core][azure_core_readme].When you interact with the Cognitive Language Service Question Answering client library using the Python SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][questionanswering_rest_docs] requests.For example, if you submit a question to a non-existent knowledge base, a `400` error is returned indicating &quot;Bad Request&quot;.```pythonfrom azure.core.exceptions import HttpResponseErrortry:    client.get_answers(        question=&quot;Why?&quot;,        project_name=&quot;invalid-knowledge-base&quot;,        deployment_name=&quot;test&quot;    )except HttpResponseError as error:    print(&quot;Query failed: {}&quot;.format(error.message))```### LoggingThis library uses the standard[logging][python_logging] library for logging.Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFOlevel.Detailed DEBUG level logging, including request/response bodies and unredactedheaders, can be enabled on a client with the `logging_enable` argument.See full SDK logging documentation with examples [here][sdk_logging_docs].## Next steps- View our [samples][questionanswering_samples].- Read about the different [features][questionanswering_docs_features] of the Question Answering service.- Try our service [demos][questionanswering_docs_demos].## ContributingSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.This project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.&lt;!-- LINKS --&gt;[azure_cli]: https://docs.microsoft.com/cli/azure/[azure_portal]: https://portal.azure.com/[azure_subscription]: https://azure.microsoft.com/free/[language_service]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesTextAnalytics[cla]: https://cla.microsoft.com[coc_contact]: mailto:opencode@microsoft.com[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication/[contributing]: https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md[python_logging]: https://docs.python.org/3/library/logging.html[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging[azure_core_ref_docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html[azure_core_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md[pip_link]: https://pypi.org/project/pip/[questionanswering_client_class]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-questionanswering/latest/azure.ai.language.questionanswering.html#azure.ai.language.questionanswering.QuestionAnsweringClient[authoring_client_class]: https://aka.ms/azsdk/python/questionansweringauthoringclient[questionanswering_refdocs_prompts]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-questionanswering/latest/azure.ai.language.questionanswering.models.html#azure.ai.language.questionanswering.models.KnowledgeBaseAnswerDialog[questionanswering_client_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/[questionanswering_docs]: https://azure.microsoft.com/services/cognitive-services/qna-maker/[questionanswering_docs_chat]: https://docs.microsoft.com/azure/cognitive-services/qnamaker/how-to/chit-chat-knowledge-base[questionanswering_docs_demos]: https://azure.microsoft.com/services/cognitive-services/qna-maker/#demo[questionanswering_docs_features]: https://azure.microsoft.com/services/cognitive-services/qna-maker/#features[questionanswering_pypi_package]: https://pypi.org/project/azure-ai-language-questionanswering/[questionanswering_refdocs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-questionanswering/latest/azure.ai.language.questionanswering.html[questionanswering_rest_docs]: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering[questionanswering_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/README.md[cognitive_authentication_aad]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain[install_azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal[grant_role_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)</longdescription>
</pkgmetadata>