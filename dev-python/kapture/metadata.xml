<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![KAPTURE](assets/kapture_banner.png)![Continuous IntegrationStatus](https://github.com/naver/kapture/workflows/kapture-main/badge.svg)Overview========Kapture is a pivot file format, based on text and binary files, used todescribe SfM (Structure From Motion) and more generally sensor-acquireddata.It can be used to store sensor parameters and raw sensor data:-   cameras-   images-   lidar and other sensor dataAs well as computed data:-   2d features-   3d reconstructionFinally, many popular datasets can directly be downloaded using theconvenient[downloader](https://github.com/naver/kapture/blob/main/doc/tutorial.adoc#download-a-dataset)!Specifications==============The format specification is detailed in the [kapture formatspecifications document](kapture_format.adoc).Example File Structure======================This is an example file structure of a dataset in the kapture format.    my_dataset                 # Dataset root path    ├─ sensors/                # Sensor data root path    │  ├─ sensors.txt          # list of all sensors with their specifications (e.g. camera intrinsics)    │  ├─ rigs.txt             # geometric relationship between sensors (optional)    │  ├─ trajectories.txt     # extrinsics (timestamp, sensor, pose)    │  ├─ records_camera.txt   # all records of type 'camera' (timestamp, sensor and path to image)    │  ├─ records_SENSOR_TYPE.txt # all records of type SENSOR_TYPE (other sensors, eg: 'magnetic', 'pressure'...)    │  └─ records_data/            # image and lidar data path    │     ├─ map/cam_01/00001.jpg  # image path used in records_camera.txt (example)    │     ├─ map/cam_01/00002.jpg    │     ├─ map/lidar_01/0001.pcd # lidar data path used in records_lidar.txt    │     ├─ query/query001.jpg    # image path used in records_camera.txt    │     ├─ ...    └─ reconstruction/       ├─ keypoints/                       # 2D keypoints files       │  ├─ r2d2_WASF-N8_20k              # identify the type of keypoints       │  │  ├─ keypoints.txt              # type of keypoint (shape and dtype)       │  │  ├─ map/cam_01/00001.jpg.kpt   # keypoints for corresponding image (example)       │  │  ├─ query/query001.jpg.kpt     # keypoints for corresponding image (example)       │  │  ├─ ...       │  ├─ d2_tf                         # identify the type of keypoints       │  │  ├─ keypoints.txt              # type of keypoint (shape and dtype)       │  │  ├─ keypoints.tar              # instead of regular files, you can use an archive       │  │  │  ├─ map/cam_01/00001.jpg.kpt   # keypoints for corresponding image (example)       │  │  │  ├─ query/query001.jpg.kpt     # keypoints for corresponding image (example)       │  │  │  ├─ ...       │  ├─ ...       ├─ descriptors/                     # keypoint descriptors files       │  ├─ r2d2_WASF-N8_20k              # identify the type of descriptors       │  │  ├─ descriptors.txt            # type of descriptor (keypoints type, shape and dtype)       │  │  ├─ map/cam_01/00001.jpg.desc  # descriptors for corresponding image (example)       │  │  ├─ query/query001.jpg.desc    # descriptors for corresponding image (example)       │  │  ├─ ...       │  ├─ d2_tf                         # identify the type of descriptors       │  │  ├─ descriptors.txt            # type of descriptor       │  │  ├─ descriptors.tar            # instead of regular files, you can use an archive       │  │  │  ├─ map/cam_01/00001.jpg.desc  # descriptors for corresponding image (example)       │  │  │  ├─ query/query001.jpg.desc    # descriptors for corresponding image (example)       │  │  │  ├─ ...       │  ├─ ...       ├─ points3d.txt                  # 3D points of the reconstruction       ├─ observations.txt              # 2D/3D points corespondences       ├─ matches/                      # matches files.       │  ├─ r2d2_WASF-N8_20k           # identify the type of keypoints that are matched       │  │  ├─ map/cam_01/00001.jpg.overlapping/cam_01/00002.jpg.matches # example       │  │  ├─  ...       │  ├─ d2_tf                      # identify the type of keypoints that are matched       │  │  ├─ matches.tar             # instead of regular files, you can use an archive       │  │  │  ├─ map/cam_01/00001.jpg.overlapping/cam_01/00002.jpg.matches # example       │  │  │  ├─  ...       │  ├─ ...       └─ global_features/                 # global feature files          ├─ AP-GeM-LM18                   # identify the type of global_features          │  ├─ global_features.txt        # type of global feature          │  ├─ map/cam_01/00001.jpg.gfeat # example of global feature for corresponding image          │  ├─ query/query001.jpg.gfeat   # example of global feature for corresponding image          │  └─ ...          ├─ DELG                          # identify the type of global_features          │  ├─ global_features.txt        # type of global feature          │  ├─ global_features.tar        # instead of regular files, you can use an archive          │  │  ├─ map/cam_01/00001.jpg.gfeat # example of global feature for corresponding image          │  │  ├─ query/query001.jpg.gfeat   # example of global feature for corresponding image          │  │  └─ ...          ├─ ...Software========The kapture format is provided with a Python library, as well as severalconversion tools.Install-------    pip install kaptureor see [installation](doc/installation.adoc) for more detailedinstructions.Using docker------------Build the docker image:    # build the docker image : if you have already cloned the repository    docker build . -t kapture/kapture    # OR build the docker image directly from github    docker build git://github.com/naver/kapture -t kapture/kapture    # run unit tests    docker run -it --rm kapture/kapture python3 -m unittest discover -s /opt/src/kapture/testsIf you want to process your own data, you can bind directories betweenthe host and the container using `--volume` or `--mount` option (See the[docker documentation](https://docs.docker.com/storage/bind-mounts/)).The following example mounts `/path/to/dataset/` from the host to`/dataset` inside the docker.    docker run -it \        --rm \ # Automatically remove the container when it exits \        --volume /path/to/dataset/:/dataset:ro \ #read only        kapture/kapturekapture Python library----------------------See the[tutorial](https://github.com/naver/kapture/blob/main/doc/tutorial.adoc#using-kapture-in-your-code)for some examples using the kapture Python library.kapture tools-------------In this repository, you will find a set of **conversion tools** to orfrom kapture format. Import results to kapture format, and conversely,export converts kapture data to other formats. Depending of the format,some data might not be converted, either because the other format doesnot support it (`—`) or because its was not implemented (`⨉`). Here is atable summarizing the conversion capabilities:&lt;table style=&quot;width:100%;&quot;&gt;&lt;caption&gt;conversion capabilities&lt;/caption&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;col style=&quot;width: 7%&quot; /&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr class=&quot;header&quot;&gt;&lt;th&gt;Format&lt;/th&gt;&lt;th&gt;← →&lt;/th&gt;&lt;th&gt;cam&lt;/th&gt;&lt;th&gt;rig&lt;/th&gt;&lt;th&gt;img&lt;/th&gt;&lt;th&gt;trj&lt;/th&gt;&lt;th&gt;gps&lt;/th&gt;&lt;th&gt;kpt&lt;/th&gt;&lt;th&gt;dsc&lt;/th&gt;&lt;th&gt;gft&lt;/th&gt;&lt;th&gt;p3D&lt;/th&gt;&lt;th&gt;obs&lt;/th&gt;&lt;th&gt;mch&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;colmap&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;p&gt;export&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;openmvg&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;p&gt;export&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;OpenSfM&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;p&gt;export&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;bundler&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;p&gt;image_folder&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;image_list&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;p&gt;nvm&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;IDL_dataset_cvpr17&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;p&gt;RobotCar_Seasons&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;ROSbag cameras+trajectory&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;(✓)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;⨉&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;p&gt;SILDa&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;p&gt;virtual_gallery&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;import&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;✓&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;-   `✓`: supported, `(✓)` partially supported, `⨉`: not implemented,    `—`: not supported by format.-   `cam`: handle camera parameters, eg. intrisics-   `rig`: handle rig structure.-   `img`: handle the path to images.-   `trj`: handle trajectories, eg. poses.-   `kpt`: handle image keypoints locations.-   `dsc`: handle image keypoints descriptors.-   `gft`: handle global image feature descriptors.-   `p3D`: handle 3D point clouds.-   `obs`: handle observations, ie. 3D-points / 2D keypoints    correspondences.-   `mch`: handle keypoints matches.kapture support in other packages=================================Local Features---------------   [R2D2](https://arxiv.org/abs/1906.06195) local features can be    directly generated in kapture format. See    [here](https://github.com/naver/r2d2#feature-extraction-with-kapture-datasets)-   [D2-Net](https://arxiv.org/abs/1905.03561) features can also be    extracted in kapture format. See instructions    [here](https://github.com/mihaidusmanu/d2-net#feature-extraction-with-kapture-datasets).Global Features----------------   [AP-GeM](https://europe.naverlabs.com/research/computer-vision-research-naver-labs-europe/learning-visual-representations/deep-image-retrieval/)    global feature extractor in kapture format:    [here](https://github.com/naver/deep-image-retrieval#feature-extraction-with-kapture-datasets)Datasets========The kapture package provides conversion tools for several data formatsand datasets used in the domain. But it also provides a tool to downloaddatasets already converted to kapture. See the [kapturetutorial](doc/tutorial.adoc) for instructions to use the datasetdownloader.Here is a list of datasets you can directly download in kapture formatwith the downloader tool:-   Datasets for the [Long Term Visual    Localization](https://www.visuallocalization.net/datasets/)    benchmark:    -   [NAVER LABS localization        datasets](https://europe.naverlabs.com/blog/first-of-a-kind-large-scale-localization-datasets-in-crowded-indoor-spaces/)    -   Aachen Day Night v1.1    -   Extended CMU-Seasons    -   RobotCar Seasons v2    -   InLoc (without images)    -   SILDa Weather and Time of Day    -   RIO10    -   ETH-Microsoft-   [Virtual    Gallery](https://europe.naverlabs.com/research/3d-vision/virtual-gallery-dataset/)    datasetkapture-localization====================Checkout[kapture-localization](https://github.com/naver/kapture-localization),our toolbox which contains implementations for various localizationrelated algorithms.-   mapping and localization pipelines with custom features-   mapping and localization pipelines with SIFT and vocabulary tree    matching (default colmap pipeline)-   image retrieval benchmark (global sfm, local sfm, pose    approximation)Tutorial========See the [kapture tutorial](doc/tutorial.adoc) for a short introductionto:-   conversion tools-   using kapture in your code-   dataset downloadContributing============There are many ways to contribute to the kapture project:-   provide feedback and suggestions of improvements-   submit bug reports in the project bug tracker-   provide a dataset in kapture format that we can add to the    downloader tool-   implement a feature or bug-fix for an outstanding issue-   add support of kapture format in other software packages (e.g. SfM    pipelines…), thus adding support for more datasets-   provide scripts to create data in kapture format (e.g. local/global    feature extraction)-   propose a new feature and implement itIf you wish to contribute, please refer to the[CONTRIBUTING](CONTRIBUTING.adoc) page.License=======Software license is detailed in the [LICENSE](LICENSE) file.Contact Us==========You can contact us through [GitHub](https://github.com/naver/kapture),or at kapture at naverlabs + com</longdescription>
</pkgmetadata>