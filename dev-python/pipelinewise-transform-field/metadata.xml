<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pipelinewise-transform-field[![PyPI version](https://badge.fury.io/py/pipelinewise-transform-field.svg)](https://badge.fury.io/py/pipelinewise-transform-field)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pipelinewise-transform-field.svg)](https://pypi.org/project/pipelinewise-transform-field/)[![License: Apache2](https://img.shields.io/badge/License-Apache2-yellow.svg)](https://opensource.org/licenses/Apache-2.0)Transformation component between [Singer](https://www.singer.io/) taps and targets.This is a [PipelineWise](https://transferwise.github.io/pipelinewise) compatible component.## How to use itThe recommended method of running this component is to use it from [PipelineWise](https://transferwise.github.io/pipelinewise). When running it from PipelineWise you don't need to configure this tap with JSON files, and most of things are automated. Please check the related documentation at [Transformations](https://transferwise.github.io/pipelinewise/user_guide/transformations.html)If you want to run this [Singer](https://singer.io) compatible component independently please read further.## InstallFirst, make sure Python 3 is installed on your system or follow theseinstallation instructions for [Mac](http://docs.python-guide.org/en/latest/starting/install3/osx/) or[Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04).It's recommended to use a virtualenv:```bash  python3 -m venv venv  pip install pipelinewise-transform-field```or```bash  python3 -m venv venv  . venv/bin/activate  pip install --upgrade pip setuptools  pip install .```### To validate transformations`transform-field --validate --config [config.json] --catalog [catalog.json]`### To runPut it between a tap and a target with simple unix pipes:`some-singer-tap | transform-field --config [config.json] | some-singer-target`It's reading incoming messages from STDIN and using `config.json` to transform incoming RECORD messages.**Note**: To avoid version conflicts run `tap`, `transform` and `targets` in separate virtual environments.### Transformation typesThe following are the transformation types supported by _pipelinewise-transform-field_:* **SET-NULL**: Transforms any input to NULL* **HASH**: Transforms string input to hash* **HASH-SKIP-FIRST-n**: Transforms string input to hash skipping first n characters, e.g. HASH-SKIP-FIRST-2* **MASK-DATE**: Replaces the months and day parts of date columns to be always 1st of Jan* **MASK-NUMBER**: Transforms any numeric value to zero* **MASK-HIDDEN**: Transforms any string to 'hidden'* **MASK-STRING-SKIP-ENDS-n**: Transforms string input to masked version skipping first and last n characters, e.g. MASK-STRING-SKIP-ENDS-3_PS_: 1 =&lt; n =&lt; 9### Conditional transformationsIt is possible to transform a record's property based on some given condition(s), the transformation will only take place when all conditions are met.A condition is a combination of: * column [required]: the field to look up to* operation [required]: the comparison type to use, the supported ones are `equals` and `regex_match`.* value [required]: the column value to look for in records.**An equality condition on a column**```json{  &quot;column&quot;: &quot;&lt;some column name&gt;&quot;,  &quot;equals&quot;: &lt;some important value&gt;}```**A regex condition on a column**```json{  &quot;column&quot;: &quot;&lt;some column name&gt;&quot;,  &quot;regex_match&quot;: &quot;&lt;some regex pattern&gt;&quot;}```**A condition on a property within a JSON-type column**```json{  &quot;column&quot;: &quot;&lt;some column name&gt;&quot;,  &quot;field_path&quot;: &quot;&lt;xpath to property within 'column' object&gt;&quot;,  &quot;equals&quot;: &lt;some important value&gt;}```### ConfigurationYou need to define which columns have to be transformed by which method and in which condition the transformation needs to be applied.#### Basic transformationA basic transformation is where a field in all a stream records will be transformed can be achieved with:```json{  &quot;tap_stream_name&quot;: &quot;&lt;stream ID&gt;&quot;,  &quot;field_id&quot;: &quot;&lt;Name of the field to transform in the record&gt;&quot;,  &quot;type&quot;: &quot;&lt;Transformation type&gt;&quot;}```#### Transformation within JSONIn order to transform property(ies) within a JSON type field, you can make use of `field_paths` property:```json{  &quot;tap_stream_name&quot;: &quot;&lt;stream ID&gt;&quot;,  &quot;field_id&quot;: &quot;&lt;Name of the field to transform in the record&gt;&quot;,  &quot;field_paths&quot;: [&quot;xpath to property 1&quot;, &quot;xpath to property 2&quot;],  &quot;type&quot;: &quot;&lt;Transformation type&gt;&quot;}```#### Conditional TransformationTo apply transformation conditionally, you can make use of the property `when` which can have one or many conditions:```json{  &quot;tap_stream_name&quot;: &quot;&lt;stream ID&gt;&quot;,  &quot;field_id&quot;: &quot;&lt;Name of the field to transform in the record&gt;&quot;,  &quot;type&quot;: &quot;&lt;Transformation type&gt;&quot;,  &quot;when&quot;: [    {&quot;column&quot;: &quot;string_col_1&quot;, &quot;equals&quot;: &quot;some value&quot;},    {&quot;column&quot;: &quot;string_col_2&quot;, &quot;regex_match&quot;: &quot;.*PII.*&quot;},    {&quot;column&quot;: &quot;numeric_col_1&quot;, &quot;equals&quot;: 33},    {&quot;column&quot;: &quot;json_column&quot;, &quot;field_path&quot;: &quot;metadata/comment&quot;, &quot;regex_match&quot;: &quot;sensitive&quot;}  ]}```**Sample config** [config.json](./sample_config.json)(Tip: PipelineWise generating this for you from a more readable YAML format)### To check code style:1. Install python dependencies in a virtual env```  python3 -m venv venv  . venv/bin/activate  pip install --upgrade pip setuptools  pip install .[test]```2. Run pylint```shellpylint transform_field```### To run tests:1. Install python dependencies in a virtual env and run unit and integration tests```  python3 -m venv venv  . venv/bin/activate  pip install --upgrade pip setuptools  pip install .[test]```2. Run tests:* Unit tests```  pytest -v tests/unit```* Integration tests```  pytest -v tests/integration```* All tests```  pytest -v tests```## LicenseApache License Version 2.0See [LICENSE](LICENSE) to see the full text.</longdescription>
</pkgmetadata>