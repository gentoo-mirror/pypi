<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========  =================================================================================================================================Info         Contains a Python API for interacting with NI-DAQmx. See `GitHub &lt;https://github.com/ni/nidaqmx-python/&gt;`_ for the latest source.Author       National Instruments===========  =================================================================================================================================About=====The **nidaqmx** package contains an API (Application Programming Interface)for interacting with the NI-DAQmx driver. The package is implemented in Python.The package is implemented as a complex, highly object-oriented wrapper around the NI-DAQmx C API using the `ctypes &lt;https://docs.python.org/2/library/ctypes.html&gt;`_ Python library.**nidaqmx** supports all versions of the NI-DAQmx driver that ships with the CAPI. The C API is included in any version of the driver that supports it. The**nidaqmx** package does not require installation of the C header files.Some functions in the **nidaqmx** package may be unavailable with earlier versions of the NI-DAQmx driver. Visit the `ni.com/downloads &lt;http://www.ni.com/downloads/&gt;`_ to upgrade your version of NI-DAQmx.**nidaqmx** supports Windows and Linux operating systems where the NI-DAQmxdriver is supported. Refer to`NI Hardware and Operating System Compatibility &lt;https://www.ni.com/r/hw-support&gt;`_for which versions of the driver support your hardware on a given operatingsystem.**nidaqmx** supports CPython 3.7+ and PyPy3.Installation============Running **nidaqmx** requires NI-DAQmx to be installed. Visit`ni.com/downloads &lt;http://www.ni.com/downloads/&gt;`_ to download the latestversion of NI-DAQmx. None of the recommended **Additional items** are requiredfor **nidaqmx** to function, and they can be removed to minimize installationsize. It is recommended you continue to install the **NI Certificates** packageto allow your Operating System to trust NI built binaries, improving yoursoftware and hardware installation experience.**nidaqmx** can be installed with `pip &lt;http://pypi.python.org/pypi/pip&gt;`_::  $ python -m pip install nidaqmxSimilar Packages================There are similar packages available that also provide NI-DAQmx functionality inPython:- `daqmx &lt;https://pypi.org/project/daqmx/&gt;`_  (`slightlynybbled/daqmx on GitHub &lt;https://github.com/slightlynybbled/daqmx&gt;`_)  provides an abstraction of NI-DAQmx in the ``ni`` module.- PyLibNIDAQmx (`pearu/pylibnidaqmx on GitHub &lt;https://github.com/pearu/pylibnidaqmx&gt;`_)  provides an abstraction of NI-DAQmx in the ``nidaqmx`` module, which collides  with this package's module name... _usage-section:Usage=====The following is a basic example of using an **nidaqmx.task.Task** object. This example illustrates how the single, dynamic **nidaqmx.task.Task.read** method returns the appropriate data type... code-block:: python  &gt;&gt;&gt; import nidaqmx  &gt;&gt;&gt; with nidaqmx.Task() as task:  ...     task.ai_channels.add_ai_voltage_chan(&quot;Dev1/ai0&quot;)  ...     task.read()  ...  -0.07476920729381246  &gt;&gt;&gt; with nidaqmx.Task() as task:  ...     task.ai_channels.add_ai_voltage_chan(&quot;Dev1/ai0&quot;)  ...     task.read(number_of_samples_per_channel=2)  ...  [0.26001373311970705, 0.37796597238117036]  &gt;&gt;&gt; from nidaqmx.constants import LineGrouping  &gt;&gt;&gt; with nidaqmx.Task() as task:  ...     task.di_channels.add_di_chan(  ...         &quot;cDAQ2Mod4/port0/line0:1&quot;, line_grouping=LineGrouping.CHAN_PER_LINE)  ...     task.read(number_of_samples_per_channel=2)  ...  [[False, True], [True, True]]A single, dynamic **nidaqmx.task.Task.write** method also exists... code-block:: python  &gt;&gt;&gt; import nidaqmx  &gt;&gt;&gt; from nidaqmx.types import CtrTime  &gt;&gt;&gt; with nidaqmx.Task() as task:  ...     task.co_channels.add_co_pulse_chan_time(&quot;Dev1/ctr0&quot;)  ...     sample = CtrTime(high_time=0.001, low_time=0.001)  ...     task.write(sample)  ...  1  &gt;&gt;&gt; with nidaqmx.Task() as task:  ...     task.ao_channels.add_ao_voltage_chan(&quot;Dev1/ao0&quot;)  ...     task.write([1.1, 2.2, 3.3, 4.4, 5.5], auto_start=True)  ...  5Consider using the **nidaqmx.stream_readers** and **nidaqmx.stream_writers**classes to increase the performance of your application, which accept pre-allocatedNumPy arrays.Following is an example of using an **nidaqmx.system.System** object... code-block:: python  &gt;&gt;&gt; import nidaqmx.system  &gt;&gt;&gt; system = nidaqmx.system.System.local()  &gt;&gt;&gt; system.driver_version  DriverVersion(major_version=16L, minor_version=0L, update_version=0L)  &gt;&gt;&gt; for device in system.devices:  ...     print(device)  ...  Device(name=Dev1)  Device(name=Dev2)  Device(name=cDAQ1)  &gt;&gt;&gt; import collections  &gt;&gt;&gt; isinstance(system.devices, collections.Sequence)  True  &gt;&gt;&gt; device = system.devices['Dev1']  &gt;&gt;&gt; device == nidaqmx.system.Device('Dev1')  True  &gt;&gt;&gt; isinstance(device.ai_physical_chans, collections.Sequence)  True  &gt;&gt;&gt; phys_chan = device.ai_physical_chans['ai0']  &gt;&gt;&gt; phys_chan  PhysicalChannel(name=Dev1/ai0)  &gt;&gt;&gt; phys_chan == nidaqmx.system.PhysicalChannel('Dev1/ai0')  True  &gt;&gt;&gt; phys_chan.ai_term_cfgs  [&lt;TerminalConfiguration.RSE: 10083&gt;, &lt;TerminalConfiguration.NRSE: 10078&gt;, &lt;TerminalConfiguration.DIFFERENTIAL: 10106&gt;]  &gt;&gt;&gt; from enum import Enum  &gt;&gt;&gt; isinstance(phys_chan.ai_term_cfgs[0], Enum)  TrueBugs / Feature Requests=======================To report a bug or submit a feature request, please use the `GitHub issues page &lt;https://github.com/ni/nidaqmx-python/issues&gt;`_.Information to Include When Asking for Help-------------------------------------------Please include **all** of the following information when opening an issue:- Detailed steps on how to reproduce the problem and full traceback, if   applicable.- The python version used::  $ python -c &quot;import sys; print(sys.version)&quot;- The versions of the **nidaqmx** and numpy packages used::  $ python -m pip list- The version of the NI-DAQmx driver used. Follow   `this KB article &lt;http://digital.ni.com/express.nsf/bycode/ex8amn&gt;`_   to determine the version of NI-DAQmx you have installed.- The operating system and version, for example Windows 7, CentOS 7.2, ...Documentation=============Documentation is available `here &lt;http://nidaqmx-python.readthedocs.io&gt;`_.Additional Documentation========================Refer to the `NI-DAQmx Help &lt;http://digital.ni.com/express.nsf/bycode/exagg4&gt;`_ for API-agnostic information about NI-DAQmx or measurement concepts.NI-DAQmx Help installs only with the full version of NI-DAQmx.License=======**nidaqmx** is licensed under an MIT-style license (see`LICENSE &lt;https://github.com/ni/nidaqmx-python/blob/master/LICENSE&gt;`_).Other incorporated projects may be licensed under different licenses. Alllicenses allow for non-commercial and commercial use.</longdescription>
</pkgmetadata>