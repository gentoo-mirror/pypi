<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://user-images.githubusercontent.com/6897215/225175629-28f80bfb-3b0a-44ac-8b52-b719953958d7.png&quot; align=&quot;right&quot; style=&quot;width: 300px;&quot; /&gt;&lt;h1 align=&quot;center&quot;&gt;Home Assistant on Stream Deck&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;Configured via YAML (with templates) and running on Linux, MacOS, and Windows&lt;/h3&gt;Introducing: Home Assistant on Stream Deck!If you use Home Assistant and want a seamless way to control it, you've come to the right place.With this Python script, you can control your Home Assistant instance via a Stream Deck, making it easier than ever to manage your smart home devices and scenes.**Key Features:**- ‚úÖ Easy to use- üõ†Ô∏è Highly customizable- üß© [Home Assistant Add-on support](https://github.com/basnijholt/home-assistant-streamdeck-yaml-addon)- üêß Supports Linux, MacOS, and Windows- üìÅ YAML configuration- üè† Runs from same machine as Home Assistant- üöÄ Template support for advanced customization- üí§ Automatically sync state of `entity_id` to turn display on/off[[ToC](#books-table-of-contents)]**Why choose our solution over others?**You might have seen a similar project ([`cgiesche/streamdeck-homeassistant`](https://github.com/cgiesche/streamdeck-homeassistant)) on Github before [[‚Ä†](https://github.com/cgiesche/streamdeck-homeassistant)].However, our solution is more versatile and allows you to connect a Stream Deck to the same Linux machine where Home Assistant is running.The native Stream Deck software doesn't support Linux, but we've got you covered with the help of the [`python-elgato-streamdeck`](https://github.com/abcminiuser/python-elgato-streamdeck) library.If you are looking for some inspiration, check out the [&gt;20 Button Configurations ideas](#bulb-more-than-30-button-configurations-ideas) section below.**Check out the video below to see it in action!**https://user-images.githubusercontent.com/6897215/226788119-6c198ea6-2950-4f95-95dc-346c9e5b5cee.mp4## :books: Table of Contents&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;  - [üåü Share Your Success](#-share-your-success)  - [:rocket: Getting Started](#rocket-getting-started)    - [:house_with_garden: Installation as Home Assistant Add-on](#house_with_garden-installation-as-home-assistant-add-on)    - [:whale: Installation with Docker](#whale-installation-with-docker)    - [:computer: Installation without Docker](#computer-installation-without-docker)      - [:penguin: Linux](#penguin-linux)      - [:apple: MacOS](#apple-macos)      - [:desktop_computer: Windows](#desktop_computer-windows)  - [:gear: Configuration](#gear-configuration)    - [:page_facing_up: `configuration.yaml`](#page_facing_up-configurationyaml)    - [:clipboard: Config YAML configuration](#clipboard-config-yaml-configuration)    - [:bookmark_tabs: Page YAML configuration](#bookmark_tabs-page-yaml-configuration)    - [:white_square_button: Button YAML configuration](#white_square_button-button-yaml-configuration)- [:bulb: More than 30 Button Configurations ideas](#bulb-more-than-30-button-configurations-ideas)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## üåü Share Your SuccessI love hearing from users!If you're using Home Assistant StreamDeck YAML in your projects, please consider opening an issue on the [GitHub repository](https://github.com/basnijholt/home-assistant-streamdeck-yaml/issues/new) to let me know.Your feedback and success stories not only help to improve the library but also inspire others in the community.By sharing your experience, you can contribute to the growth and development of Home Assistant StreamDeck YAML.I truly appreciate your support!## :rocket: Getting StartedFollow the steps below to get up and running with Home Assistant on Stream Deck.### :house_with_garden: Installation as Home Assistant Add-on&lt;details&gt;&lt;summary&gt;Click to expand.&lt;/summary&gt;1. In your Home Assistant instance, navigate to **Supervisor** &gt; **Add-on Store**.2. Click the menu icon (three vertical dots) in the top right corner and select **Repositories**.3. Add the following repository URL: `https://github.com/basnijholt/home-assistant-streamdeck-yaml-addon`.4. The add-on should now appear in the **Add-on Store**. Click on &quot;Home Assistant Stream Deck YAML&quot; and then click &quot;Install&quot;.5. After the installation is complete, configure the add-on using either the `.env` file or the individual configuration options (see the [add-on configuration documentation](https://github.com/basnijholt/home-assistant-streamdeck-yaml-addon#add-on-configuration-gear) for more information).6. Start the add-on and check the logs for any errors.&lt;/details&gt;### :whale: Installation with Docker&lt;details&gt;&lt;summary&gt;Click to expand.&lt;/summary&gt;1. Edit the [`.env.example`](.env.example) file and rename it to `.env`.2. Setup a [`configuration.yaml` file (see below)](#configuration).3. Install Docker, see [this](https://docs.docker.com/get-docker/) page for instructions4. Use the [`basnijholt/home-assistant-streamdeck-yaml:latest`](https://hub.docker.com/r/basnijholt/home-assistant-streamdeck-yaml) Docker image with:```bashdocker run --rm -it --privileged --env-file=$(pwd)/.env -v $(pwd)/configuration.yaml:/app/configuration.yaml basnijholt/home-assistant-streamdeck-yaml:latest```Or use the a `docker-compose` file, an example of which is here: [`docker-compose.yaml`](docker-compose.yaml)Optionally, you can build the Docker image yourself with:```bashdocker build -t basnijholt/home-assistant-streamdeck-yaml:latest .```&lt;/details&gt;### :computer: Installation without Docker&lt;details&gt;&lt;summary&gt;Click to expand common steps for Linux :penguin:, :apple: MacOS, and :desktop_computer: Windows.&lt;/summary&gt;1. Run `pip install -e .` in the repo folder to install the required dependencies.2. Edit the [`.env.example`](.env.example) file and rename it to `.env`.3. Setup a [`configuration.yaml` file (see below)](#configuration).4. Follow the platform-specific steps for [Linux](#linux), [MacOS](#macos), or [Windows](#windows).&lt;/details&gt;#### :penguin: Linux&lt;details&gt;&lt;summary&gt;Click to expand.&lt;/summary&gt;On **Linux** you need to install some extra dependencies:```bashsudo apt-get updatesudo apt-get install -y libudev-dev libusb-1.0-0-dev libhidapi-libusb0 libffi-dev```and add a udev rule to allow access to the Stream Deck, run `sudo nano /etc/udev/rules.d/99-streamdeck.rules` and add the following line:```bashSUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;0fd9&quot;, GROUP=&quot;users&quot;, TAG+=&quot;uaccess&quot;```&lt;/details&gt;#### :apple: MacOS&lt;details&gt;&lt;summary&gt;Click to expand.&lt;/summary&gt;On **MacOS** you need to install some extra dependencies:```bashbrew install hidapi cairo libffi```&lt;/details&gt;#### :desktop_computer: Windows&lt;details&gt;&lt;summary&gt;Click to expand.&lt;/summary&gt;For **Windows**, see [this](https://python-elgato-streamdeck.readthedocs.io/en/stable/pages/backend_libusb_hidapi.html#windows) page.&lt;/details&gt;## :gear: Configuration1. Create a `configuration.yaml` file in the same directory.2. Choose one of the two usage options:  - Option 1: With environment variables. (See [`.env.example`](.env.example) for details)  - Option 2: With command-line arguments. (Run `home-assistant-streamdeck-yaml -h` to see the available options)You're all set! üéâNow you can enjoy controlling your smart home devices with ease.Check out the [`configuration.yaml`](configuration.yaml) file for an example configuration or feel free to share your own with the community.Happy controlling! üè†üí°üéÆ### :page_facing_up: `configuration.yaml`Here's an example `configuration.yaml` file to help```yamlbrightness: 100  # Default brightness of the Stream Deck (0-100)state_entity_id: binary_sensor.anyone_home  # Entity to sync display state withauto_reload: true  # Automatically reload the configuration file when it changespages:  - name: Home    buttons:      - entity_id: light.bedroom_lights        service: light.toggle        text: |          Bedroom          lights      - icon: netflix.png        service: script.start_spotify      - icon: xbox.png        service: script.start_xbox      - icon_mdi: restart        service: homeassistant.restart        text: |          Restart          HA      # Special light control page      - entity_id: light.living_room_lights        special_type: light-control        special_type_data:          colormap: hsv        text: |          Living room          lights      # Move pages      - special_type: previous-page      - special_type: next-page  - name: Example    buttons:      # Empty button      - special_type: empty      # Change pages      - special_type: go-to-page        special_type_data: Home      - special_type: go-to-page        special_type_data: 0      - special_type: previous-page      - special_type: next-page  - name: Other    buttons:      # Spotify playlist      - service_data:          id: playlist:37i9dQZF1DXaRycgyh6kXP          source: KEF LS50        icon: &quot;spotify:playlist/37i9dQZF1DXaRycgyh6kXP&quot;  # Downloads the cover art        service: script.start_spotify      # (Advanced) Use templates!      - entity_id: media_player.kef_ls50        service: media_player.volume_set        service_data:          volume_level: '{{ (state_attr(&quot;media_player.kef_ls50&quot;, &quot;volume_level&quot;) - 0.05) | max(0) }}'          entity_id: media_player.kef_ls50        text: '{{ (100 * state_attr(&quot;media_player.kef_ls50&quot;, &quot;volume_level&quot;)) | int }}%'        text_size: 16        icon_mdi: &quot;volume-minus&quot;      - special_type: go-to-page        special_type_data: 0```### :clipboard: Config YAML configurationEach YAML config can take the following configuration&lt;!-- CODE:START --&gt;&lt;!-- from home_assistant_streamdeck_yaml import Config --&gt;&lt;!-- print(Config.to_markdown_table()) --&gt;&lt;!-- CODE:END --&gt;&lt;!-- OUTPUT:START --&gt;&lt;!-- ‚ö†Ô∏è This content is auto-generated by `markdown-code-runner`. --&gt;| Variable name     | Description                                                                                                                                                                                                                                                                               | Default   | Type            ||:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:----------------|| `pages`           | A list of `Page`s in the configuration.                                                                                                                                                                                                                                                   |           | `List[Page]`    || `anonymous_pages` | A list of anonymous Pages in the configuration. These pages are hidden and not displayed when cycling through the pages. They can only be reached using the `special_type: 'go-to-page'` button. Designed for single use, these pages return to the previous page upon clicking a button. |           | `List[Page]`    || `state_entity_id` | The entity ID to sync display state with. For example `input_boolean.streamdeck` or `binary_sensor.anyone_home`.                                                                                                                                                                          | `None`    | `Optional[str]` || `brightness`      | The default brightness of the Stream Deck (0-100).                                                                                                                                                                                                                                        | `100`     | `int`           || `auto_reload`     | If True, the configuration YAML file will automatically be reloaded when it is modified.                                                                                                                                                                                                  | `False`   | `bool`          |&lt;!-- OUTPUT:END --&gt;### :bookmark_tabs: Page YAML configurationEach button can take the following configuration&lt;!-- CODE:START --&gt;&lt;!-- from home_assistant_streamdeck_yaml import Page --&gt;&lt;!-- print(Page.to_markdown_table()) --&gt;&lt;!-- CODE:END --&gt;&lt;!-- OUTPUT:START --&gt;&lt;!-- ‚ö†Ô∏è This content is auto-generated by `markdown-code-runner`. --&gt;| Variable name   | Description                    | Default   | Type           ||:----------------|:-------------------------------|:----------|:---------------|| `name`          | The name of the page.          |           | `str`          || `buttons`       | A list of buttons on the page. |           | `List[Button]` |&lt;!-- OUTPUT:END --&gt;### :white_square_button: Button YAML configurationEach button can take the following configuration&lt;!-- CODE:START --&gt;&lt;!-- from home_assistant_streamdeck_yaml import Button --&gt;&lt;!-- print(Button.to_markdown_table()) --&gt;&lt;!-- CODE:END --&gt;&lt;!-- OUTPUT:START --&gt;&lt;!-- ‚ö†Ô∏è This content is auto-generated by `markdown-code-runner`. --&gt;| Variable name           | Allow template   | Description| Default   | Type                                                                                                            ||:------------------------|:-----------------||:----------|:----------------------------------------------------------------------------------------------------------------|| `entity_id`             | ‚úÖ                | The `entity_id` that this button controls. This entitity will be passed to the `service` when the button is pressed. The button is re-rendered whenever the state of this entity changes.                                                                                                                                                                                                                                                                                                                                                                                                                                                              |           | `Optional[str]`                                                                                                 || `service`               | ‚úÖ                | The `service` that will be called when the button is pressed|           | `Optional[str]`                                                                                                 || `service_data`          | ‚úÖ                | The `service_data` that will be passed to the `service` when the button is pressed. If empty, the `entity_id` will be passed|           | `Optional[Mapping[str, Any]]`                                                                                   || `target`                | ‚úÖ                | The `target` that will be passed to the `service` when the button is pressed|           | `Optional[Mapping[str, Any]]`                                                                                   || `text`                  | ‚úÖ                | The text to display on the button. If empty, no text is displayed. You might want to add `\n` characters to spread the text over several lines, or use the `\|` character in YAML to create a multi-line string.                                                                                                                                                                                                                                                                                                                                                                                                                                       |           | `str`                                                                                                           || `text_color`            | ‚úÖ                | Color of the text. If empty, the color is `white`, unless an `entity_id` is specified, in which case the color is `amber` when the state is `on`, and `white` when it is `off`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |           | `Optional[str]`                                                                                                 || `text_size`             | ‚ùå                | Integer size of the text| `12`      | `int`                                                                                                           || `text_offset`           | ‚ùå                | The text's position can be moved up or down from the center of the button, and this movement is measured in pixels. The value can be positive (for upward movement) or negative (for downward movement).                                                                                                                                                                                                                                                                                                                                                                                                                                               |           | `int`                                                                                                           || `icon`                  | ‚úÖ                | The icon filename to display on the button. Make the path absolute (e.g., `/config/streamdeck/my_icon.png`) or relative to the `assets` directory (e.g., `my_icon.png`). If empty, a icon with `icon_background_color` and `text` is displayed. The icon can be a URL to an image, like `'url:https://www.nijho.lt/authors/admin/avatar.jpg'`, or a `spotify:` icon, like `'spotify:album/6gnYcXVaffdG0vwVM34cr8'`. If the icon is a `spotify:` icon, the icon will be downloaded and cached. The icon can also display a partially complete ring, like a progress bar, or sensor value, like `ring:25` for a 25% complete ring.                       |           | `Optional[str]`                                                                                                 || `icon_mdi`              | ‚úÖ                | The Material Design Icon to display on the button. If empty, no icon is displayed. See https://mdi.bessarabov.com/ for a list of icons. The SVG icon will be downloaded and cached.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |           | `Optional[str]`                                                                                                 || `icon_background_color` | ‚úÖ                | A color (in hex format, e.g., '#FF0000') for the background of the icon (if no `icon` is specified| `#000000` | `str`                                                                                                           || `icon_mdi_color`        | ‚úÖ                | The color of the Material Design Icon (in hex format, e.g., '#FF0000'). If empty, the color is derived from `text_color` but is less saturated (gray is mixed in).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |           | `Optional[str]`                                                                                                 || `icon_gray_when_off`    | ‚ùå                | When specifying `icon` and `entity_id`, if the state is `off`, the icon will be converted to grayscale|           | `bool`                                                                                                          || `delay`                 | ‚úÖ                | The delay (in seconds) before the `service` is called. This is useful if you want to wait before calling the `service`. Counts down from the time the button is pressed. If while counting the button is pressed again, the timer is cancelled. Should be a float or template string that evaluates to a float.                                                                                                                                                                                                                                                                                                                                        |           | `Union[float, str]`                                                                                             || `special_type`          | ‚ùå                | Special type of button. If no specified, the button is a normal button. If `next-page`, the button will go to the next page. If `previous-page`, the button will go to the previous page. If `turn-off`, the button will turn off the SteamDeck until any button is pressed. If `empty`, the button will be empty. If `go-to-page`, the button will go to the page specified by `special_type_data` (either an `int` or `str` (name of the page)). If `light-control`, the button will control a light, and the `special_type_data` can be a dictionary, see its description. If `reload`, the button will reload the configuration file when pressed. |           | `Optional[Literal['next-page', 'previous-page', 'empty', 'go-to-page', 'turn-off', 'light-control', 'reload']]` || `special_type_data`     | ‚úÖ                | Data for the special type of button. If `go-to-page`, the data should be an `int` or `str` (name of the page). If `light-control`, the data should optionally be a dictionary. The dictionary can contain the following keys: The `colors` key and a value a list of max (`n_keys_on_streamdeck - 5`) hex colors. The `colormap` key and a value a colormap (https://matplotlib.org/stable/tutorials/colors/colormaps.html) can be used. This requires the `matplotlib` package to be installed. If no list of `colors` or `colormap` is specified, 10 equally spaced colors are used.                                                                 |           | `Optional[Any]`                                                                                                 |&lt;!-- OUTPUT:END --&gt;# :bulb: More than 30 Button Configurations ideasHere are &gt;30 interesting uses for the Stream Deck with Home Assistant (click on text to expand):&lt;!-- CODE:START --&gt;&lt;!-- import os, sys --&gt;&lt;!-- sys.path.append(os.path.abspath(&quot;.&quot;)) --&gt;&lt;!-- from tests.test_examples import generate_readme_entry --&gt;&lt;!-- print(generate_readme_entry()) --&gt;&lt;!-- CODE:END --&gt;&lt;!-- OUTPUT:START --&gt;&lt;!-- ‚ö†Ô∏è This content is auto-generated by `markdown-code-runner`. --&gt;&lt;details&gt;&lt;summary&gt;1. üé≠ Activate a scene:&lt;/summary&gt;```yaml- service: scene.turn_on  service_data:    entity_id: scene.movie_night  icon_mdi: movie  text: Movie Night```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;2. üö™ Toggle a cover (e.g., blinds or garage door):&lt;/summary&gt;```yaml- entity_id: cover.garage_door  service: cover.toggle  icon_mdi: &quot;{{ 'garage-open' if is_state('cover.garage_door', 'open') else 'garage-lock' }}&quot;  text: &quot;{{ 'Open' if is_state('cover.garage_door', 'open') else 'Close' }}&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;3. ü§ñ Start or stop the vacuum robot:&lt;/summary&gt;```yaml- entity_id: vacuum.cleaning_robot  service: &gt;-    {% if is_state('vacuum.cleaning_robot', 'docked') %}    vacuum.start    {% else %}    vacuum.return_to_base    {% endif %}  icon_mdi: robot-vacuum  text: &gt;-    {% if is_state('vacuum.cleaning_robot', 'docked') %}    Start    {% else %}    Stop    {% endif %}```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;4. üîá Mute/unmute a media player:&lt;/summary&gt;```yaml- entity_id: media_player.living_room_speaker  service: media_player.volume_mute  service_data:    entity_id: media_player.living_room_speaker    is_volume_muted: &gt;-      {% if is_state_attr('media_player.living_room_speaker', 'is_volume_muted', true) %}      false      {% else %}      true      {% endif %}  icon_mdi: &gt;-    {% if is_state_attr('media_player.living_room_speaker', 'is_volume_muted', true) %}    volume-off    {% else %}    volume-high    {% endif %}  text: &gt;-    {% if is_state_attr('media_player.living_room_speaker', 'is_volume_muted', true) %}    Unmute    {% else %}    Mute    {% endif %}```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;5. üåü Control the brightness of a light (+10% on press):&lt;/summary&gt;```yaml- entity_id: light.living_room_lights  service: light.turn_on  service_data:    entity_id: light.living_room_lights    brightness: &gt;-      {% set current_brightness = state_attr('light.living_room_lights', 'brightness') %}      {% set next_brightness = (current_brightness + 25.5) % 255 %}      {{ next_brightness | min(255) | int }}  text: &gt;-    {% set current_brightness = state_attr('light.living_room_lights', 'brightness') %}    {% set brightness_pct = (current_brightness / 255) * 100 %}    {{ brightness_pct | round }}%```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;6. üåÄ Toggle a fan:&lt;/summary&gt;```yaml- entity_id: fan.bedroom_fan  service: fan.toggle  icon_mdi: &quot;{{ 'fan' if is_state('fan.bedroom_fan', 'on') else 'fan-off' }}&quot;  text: |    Bedroom    {{ 'On' if is_state('fan.bedroom_fan', 'on') else 'Off' }}```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;7. üîí Lock/unlock a door after 30 seconds:&lt;/summary&gt;```yaml- entity_id: lock.front_door  service: lock.toggle  delay: &quot;{{ 30 if is_state('lock.front_door', 'unlocked') else 0 }}&quot;  icon_mdi: &quot;{{ 'door-open' if is_state('lock.front_door', 'unlocked') else 'door-closed' }}&quot;  text: |    Front Door    {{ 'Unlocked' if is_state('lock.front_door', 'unlocked') else 'Locked' }}  text_size: 10  text_color: &quot;{{ 'green' if is_state('lock.front_door', 'unlocked') else 'red' }}&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;8. ‚ö†Ô∏è Arm/disarm an alarm system after 30 seconds:&lt;/summary&gt;```yaml- entity_id: alarm_control_panel.home_alarm  delay: &quot;{{ 0 if is_state('alarm_control_panel.home_alarm', 'armed_away') else 30 }}&quot;  service: &quot;{{ 'alarm_control_panel.alarm_disarm' if is_state('alarm_control_panel.home_alarm', 'armed_away') else 'alarm_control_panel.alarm_arm_away' }}&quot;  icon_mdi: &quot;{{ 'shield-check' if is_state('alarm_control_panel.home_alarm', 'armed_away') else 'shield-off' }}&quot;  text: |    {{ 'Disarm' if is_state('alarm_control_panel.home_alarm', 'armed_away') else 'Arm' }}    Alarm  text_color: &quot;{{ 'red' if is_state('alarm_control_panel.home_alarm', 'armed_away') else 'green' }}&quot;```Arm the alarm system in 30 seconds if it's disarmed, disarm it immediately if it's armed.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;9. ‚è∞ Set an alarm time for the next day:&lt;/summary&gt;```yaml- service: input_datetime.set_datetime  service_data:    entity_id: input_datetime.alarm_time    time: &quot;{{ '07:00:00' if states('input_datetime.alarm_time') != '07:00:00' else '08:00:00' }}&quot;  icon_mdi: &quot;alarm&quot;  text: |    Set Alarm    {{ '7AM' if states('input_datetime.alarm_time') != '07:00:00' else '8AM' }}```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;10. ‚èØÔ∏è Control a media player (play/pause):&lt;/summary&gt;```yaml- entity_id: media_player.living_room_speaker  service: media_player.media_play_pause  icon_mdi: &quot;{{ 'pause' if is_state('media_player.living_room_speaker', 'playing') else 'play' }}&quot;  text: &quot;{{ 'Pause' if is_state('media_player.living_room_speaker', 'playing') else 'Play' }}&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;11. üéµ Control a media player (skip tracks):&lt;/summary&gt;```yaml- entity_id: media_player.living_room_speaker  service: media_player.media_next_track  icon_mdi: skip-next  text: Next Track```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;12. üåà Set a specific color for a light:&lt;/summary&gt;```yaml- entity_id: light.living_room_light  service: light.toggle  service_data:    color_name: blue  icon_mdi: &quot;{{ 'lightbulb-on' if is_state('light.living_room_light', 'on') else 'lightbulb-off' }}&quot;  text: Blue Light```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;13. üå°Ô∏è Adjust the thermostat between two specific temperatures:&lt;/summary&gt;```yaml- entity_id: climate.living_room  service: climate.set_temperature  service_data:    temperature: &quot;{{ 17 if state_attr('climate.living_room', 'temperature') &gt;= 22 else 22 }}&quot;  icon_mdi: thermostat  text: |    Set    {{ '17¬∞C' if state_attr('climate.living_room', 'temperature') &gt;= 22 else '22¬∞C' }}    ({{ state_attr('climate.living_room', 'current_temperature') }}¬∞C now)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;14. üì≤ Trigger a script to send a notification to your mobile device:&lt;/summary&gt;```yaml- service: script.send_mobile_notification  icon_mdi: bell  text: Send Notification```Which uses this script (which needs to be defined in Home Assistant):```yamlsend_mobile_notification:  alias: &quot;Send Mobile Notification&quot;  sequence:    - service: notify.mobile_app_&lt;your_device_name&gt;      data:        message: &quot;Your custom notification message.&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;15. üåÜ Toggle a day/night mode (using an input_boolean):&lt;/summary&gt;```yaml- entity_id: input_boolean.day_night_mode  service: input_boolean.toggle  icon_mdi: &quot;{{ 'weather-night' if is_state('input_boolean.day_night_mode', 'on') else 'weather-sunny' }}&quot;  text: |    {{ 'Night' if is_state('input_boolean.day_night_mode', 'on') else 'Day' }}    Mode```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;16. üì∫ Control a TV (e.g., turn on/off or change input source):&lt;/summary&gt;```yaml- entity_id: media_player.living_room_tv  service: media_player.select_source  service_data:    source: HDMI 1  text: HDMI 1```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;17. üî¶ Control a group of lights (e.g., turn on/off or change color):&lt;/summary&gt;```yaml- entity_id: group.living_room_lights  service: light.turn_on  service_data:    color_name: red  icon_mdi: &quot;{{ 'lightbulb-group' if is_state('group.living_room_lights', 'on') else 'lightbulb-group-off' }}&quot;  text: Red Group Lights```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;18. üîî Trigger a script to announce the doorbell:&lt;/summary&gt;```yaml- service: script.trigger_doorbell_announcement  text: Doorbell Announcement```Which uses this script (which needs to be defined in Home Assistant):```yamltrigger_doorbell_announcement:  alias: &quot;Trigger Doorbell Announcement&quot;  sequence:    - service: tts.google_translate_say      data:        entity_id: media_player.&lt;your_media_player&gt;        message: &quot;Someone is at the door.&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;19. ‚è∞ Enable/disable a sleep timer (using an input_boolean):&lt;/summary&gt;```yaml- entity_id: input_boolean.sleep_timer  service: input_boolean.toggle  icon_mdi: &quot;{{ 'timer' if is_state('input_boolean.sleep_timer', 'on') else 'timer-off' }}&quot;  text: |    {{ 'Cancel' if is_state('input_boolean.sleep_timer', 'on') else 'Set' }}    Sleep Timer```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;20. üå°Ô∏è Display current temperature:&lt;/summary&gt;```yaml- entity_id: sensor.weather_temperature  text: '{{ states(&quot;sensor.weather_temperature&quot;) }}¬∞C'  text_size: 16  icon_mdi: weather-cloudy```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;21. üì∂ Toggle Wi-Fi on/off (using a switch):&lt;/summary&gt;```yaml- entity_id: switch.wifi_switch          service: switch.toggle          icon_mdi: &quot;{{ 'wifi' if is_state('switch.wifi_switch', 'on') else 'wifi-off' }}&quot;          text: |            {{ 'Disable' if is_state('switch.wifi_switch', 'on') else 'Enable' }}            Wi-Fi```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;22. üó£Ô∏è Activate voice assistant:&lt;/summary&gt;```yaml- service: script.activate_voice_assistant  icon_mdi: microphone  text: Voice Assistant```Which uses this script (which needs to be defined in Home Assistant):```yamlactivate_voice_assistant:  alias: &quot;Activate Voice Assistant&quot;  sequence:    - service: media_player.play_media      target:        entity_id: media_player.&lt;your_media_player&gt;      data:        media_content_id: &quot;http://&lt;your_url&gt;/&lt;filename&gt;.mp3&quot;        media_content_type: &quot;music&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;23. üåø Start/Stop air purifier:&lt;/summary&gt;```yaml- entity_id: switch.air_purifier  service: switch.toggle  icon_mdi: &quot;{{ 'air-purifier' if is_state('switch.air_purifier', 'on') else 'air-purifier-off' }}&quot;  text: |    {{ 'Stop' if is_state('switch.air_purifier', 'on') else 'Start' }}    Air Purifier```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;24. üìº Start/stop a security camera recording:&lt;/summary&gt;```yaml- service: script.toggle_security_camera_recording  icon_mdi: cctv  text: Toggle Camera Recording```Which uses this script (which needs to be defined in Home Assistant):```yamltoggle_security_camera_recording:  alias: &quot;Toggle Security Camera Recording&quot;  sequence:    - service: camera.record      target:        entity_id: camera.&lt;your_camera&gt;      data:        duration: 10        lookback: 2        filename: &quot;/config/www/recordings/camera_{{ now().strftime('%Y%m%d_%H%M%S') }}.mp4&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;25. üåô Enable/disable a nightlight after 30 min:&lt;/summary&gt;```yaml- entity_id: light.nightlight  service: light.toggle  delay: 1800  icon_mdi: &quot;{{ 'lightbulb-on' if is_state('light.nightlight', 'on') else 'lightbulb-off' }}&quot;  text: &quot;{{ 'Disable' if is_state('light.nightlight', 'on') else 'Enable' }} Nightlight&quot;  text_color: &quot;{{ 'red' if is_state('light.nightlight', 'on') else 'green' }}&quot;```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;26. üî• Control a smart fireplace:&lt;/summary&gt;```yaml- entity_id: switch.smart_fireplace  service: switch.toggle  icon_mdi: &quot;{{ 'fire' if is_state('switch.smart_fireplace', 'on') else 'fire-off' }}&quot;  text: |    {{ 'Turn Off' if is_state('switch.smart_fireplace', 'on') else 'Turn On' }}    Fireplace```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;27. üîå Toggle a smart plug:&lt;/summary&gt;```yaml- entity_id: switch.smart_plug  service: switch.toggle  icon_mdi: &quot;{{ 'power-plug' if is_state('switch.smart_plug', 'on') else 'power-plug-off' }}&quot;  text: |    {{ 'Turn Off' if is_state('switch.smart_plug', 'on') else 'Turn On' }}    Smart Plug```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;28. üí¶ Toggle irrigation system:&lt;/summary&gt;```yaml- entity_id: switch.irrigation_system  service: switch.toggle  icon_mdi: &quot;{{ 'water' if is_state('switch.irrigation_system', 'on') else 'water-off' }}&quot;  text: |    {{ 'Turn Off' if is_state('switch.irrigation_system', 'on') else 'Turn On' }}    Irrigation```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;29. üå§Ô∏è Change the position of a cover (e.g., blinds or curtains):&lt;/summary&gt;```yaml- entity_id: cover.living_room_blinds  service: cover.set_cover_position  service_data:    position: &quot;{{ 0 if state_attr('cover.living_room_blinds', 'position') &gt;= 50 else 100 }}&quot;  icon_mdi: window-shutter  text: |    {{ 'Close' if state_attr('cover.living_room_blinds', 'position') &gt;= 50 else 'Open' }}    Blinds```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;30. üì∫ Toggle a media player (e.g., TV) and show different images:&lt;/summary&gt;```yaml- entity_id: media_player.tv  service: media_player.toggle  icon: &gt;    {% if is_state('media_player.tv', 'on') %}    url:https://raw.githubusercontent.com/basnijholt/home-assistant-streamdeck-yaml/main/assets/fireplace.png    {% else %}    url:https://raw.githubusercontent.com/basnijholt/home-assistant-streamdeck-yaml/main/assets/hogwarts.png    {% endif %}  text: &gt;    Turn {{ 'Off' if is_state('media_player.tv', 'on') else 'On' }}```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;31. ‚è∞ Turn off all lights in 60s:&lt;/summary&gt;```yaml- entity_id: light.all_lights  service: light.turn_off  text: |    Turn off    in 60s  delay: 60```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;32. üå°Ô∏è Display outside temperature with a ring indicator:&lt;/summary&gt;```yaml- entity_id: sensor.temperature_sensor_outside_temperature  icon: &gt;    {%- set temp = states('sensor.temperature_sensor_outside_temperature') -%}    {%- set min_temp = -10 -%}    {%- set max_temp = 40 -%}    {%- set pct = ((temp - min_temp) / (max_temp - min_temp)) * 100 -%}    ring:{{ pct | round }}  text: |    {%- set temp = states('sensor.temperature_sensor_outside_temperature') -%}    Outside    {{ temp | round(1) }}¬∞C```This sets 0% to -10¬∞C and 100% to 40¬∞C.&lt;/details&gt;&lt;details&gt;&lt;summary&gt;33. üîÑ Reload the `configuration.yaml` file:&lt;/summary&gt;```yaml- special_type: reload```When pressed, the `configuration.yaml` is reloaded.&lt;/details&gt;&lt;!-- OUTPUT:END --&gt;</longdescription>
</pkgmetadata>