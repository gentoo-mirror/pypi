<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Installation ### Install from pip3``` pip3 install --verbose sencore```### Install spacy lib```python -m spacy download en_core_web_trfpython -m spacy download es_dep_news_trf```# UsagePlease refer to [api docs](https://qishe-nlp.github.io/sencore/).### Executable usage* Parse sentence into vocabs  ```  parse2vocab --lang en --sentence &quot;It is a great day.&quot;  ```* Parse sentence into phrases  ```  parse2phrase --lang en --sentence &quot;It is a great day.&quot;  ```### Package usage* Parse sentence into vocabs  ```  from sencore import VocabParser   def vocab(lang, sentence):    sentences = {        &quot;en&quot;: &quot;Apple is looking at buying U.K. startup for $1 billion.&quot;,        &quot;es&quot;: &quot;En 1941, fue llamado a filas para incorporarse a la Armada.&quot;,        &quot;de&quot;: &quot;Für Joachim Löw ist ein Nationalmannschafts-Comeback von Thomas Müller und Mats Hummels nicht mehr kategorisch ausgeschlossen.&quot;,        &quot;fr&quot;: &quot;Nos jolis canards vont-ils détrôner les poules, coqueluches des jardiniers ?&quot;,    }    sen = sentence or sentences[lang]    print(sen)    vp = VocabParser(lang)    vocabs = vp.digest(sen)    print(vocabs)  ```* Parse sentence into phrases  ```  from sencore import PhraseParser  def phrase(lang, sentence):    sentences = {        &quot;en&quot;: &quot;Apple is looking at buying U.K. startup for $1 billion.&quot;,        &quot;es&quot;: &quot;En 1941, fue llamado a filas para incorporarse a la Armada.&quot;,        &quot;de&quot;: &quot;Für Joachim Löw ist ein Nationalmannschafts-Comeback von Thomas Müller und Mats Hummels nicht mehr kategorisch ausgeschlossen.&quot;,        &quot;fr&quot;: &quot;Nos jolis canards vont-ils détrôner les poules, coqueluches des jardiniers ?&quot;,    }    sen = sentence or sentences[lang]    print(sen)    pp = PhraseParser(lang)    phrases = pp.digest(sen)    print(phrases)  ```# Development### Clone project```git clone https://github.com/qishe-nlp/sencore.git```### Install [poetry](https://python-poetry.org/docs/)### Install dependencies```poetry updatepython -m spacy download en_core_web_trfpython -m spacy download es_dep_news_trf```### Test```poetry run pytest -rP```which run tests under `tests/*`### Execute```poetry run parse_to_vocab --help```### Create sphinx docs```poetry shellcd apidocssphinx-apidoc -f -o source ../sencoremake htmlpython -m http.server -d build/html```### Host docs on github pages```cp -rf apidocs/build/html/* docs/```### Build* Change `version` in `pyproject.toml` and `sencore/__init__.py`* Build python package by `poetry build`### Git commit and push### Publish from local dev env* Set pypi test environment variables in poetry, refer to [poetry doc](https://python-poetry.org/docs/repositories/)* Publish to pypi test by `poetry publish -r test`### Publish through CI * Github action build and publish package to [test pypi repo](https://test.pypi.org/)```git tag [x.x.x]git push origin master```* Manually publish to [pypi repo](https://pypi.org/) through [github action](https://github.com/qishe-nlp/sencore/actions/workflows/pypi.yml)</longdescription>
</pkgmetadata>