<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Chessboard==========CLI to solve combinatoric chess puzzles.Stable release: |release| |versions| |license| |dependencies|Development: |build| |docs| |coverage| |quality|.. |release| image:: https://img.shields.io/pypi/v/chessboard.svg    :target: https://pypi.python.org/pypi/chessboard    :alt: Last release.. |versions| image:: https://img.shields.io/pypi/pyversions/chessboard.svg    :target: https://pypi.python.org/pypi/chessboard    :alt: Python versions.. |license| image:: https://img.shields.io/pypi/l/chessboard.svg    :target: https://www.gnu.org/licenses/gpl-2.0.html    :alt: Software license.. |dependencies| image:: https://requires.io/github/kdeldycke/chessboard/requirements.svg?branch=master    :target: https://requires.io/github/kdeldycke/chessboard/requirements/?branch=master    :alt: Requirements freshness.. |build| image:: https://travis-ci.org/kdeldycke/chessboard.svg?branch=develop    :target: https://travis-ci.org/kdeldycke/chessboard    :alt: Unit-tests status.. |docs| image:: https://readthedocs.org/projects/chessboard/badge/?version=develop    :target: https://chessboard.readthedocs.io/en/develop/    :alt: Documentation Status.. |coverage| image:: https://codecov.io/gh/kdeldycke/chessboard/branch/develop/graph/badge.svg    :target: https://codecov.io/github/kdeldycke/chessboard?branch=develop    :alt: Coverage Status.. |quality| image:: https://scrutinizer-ci.com/g/kdeldycke/chessboard/badges/quality-score.png?b=develop    :target: https://scrutinizer-ci.com/g/kdeldycke/chessboard/?branch=develop    :alt: Code QualityMotivation----------This project started its life as a coding challenge I was asked to solve whileinterviewing in 2015 for a software engineering position at`Uber &lt;https://www.uber.com/careers/&gt;`_.After the interview proccess ended, I kept toying with the code, as a playgroundto test some optimization strategies in Python. It is now a boilerplate thatI use to:* bootstrap CLI-based projects powered with `Click &lt;https://click.pocoo.org&gt;`_,* keep up with the current state-of-art of `Python packaging &lt;https://pypa.io&gt;`_,* streamline the integration of a data stack (`Numpy &lt;https://numpy.org&gt;`_,  `Pandas &lt;https://pandas.pydata.org&gt;`_,  `Seaborn &lt;https://stanford.edu/~mwaskom/software/seaborn&gt;`_ and  `Conda &lt;https://conda.anaconda.org&gt;`_),* automate `testing and quality checks &lt;https://meta.pycqa.org&gt;`_ (unit-tests,  coverage, coding style and packaging),* provide an `auto-generated documentation &lt;https://chessboard.readthedocs.io&gt;`_.Examples--------Simple 3x3 board with 2 kings and a rook:.. code-block:: shell-session    $ chessboard solve --length=3 --height=3 --king=2 --rook=1    &lt;SolverContext: length=3, height=3, pieces={'rook': 1, 'king': 2, 'queen': 0, 'bishop': 0, 'knight': 0}&gt;    Searching positions...    ┌───┬───┬───┐    │ ♚ │   │   │    ├───┼───┼───┤    │   │   │ ♜ │    ├───┼───┼───┤    │ ♚ │   │   │    └───┴───┴───┘    ┌───┬───┬───┐    │   │   │ ♚ │    ├───┼───┼───┤    │ ♜ │   │   │    ├───┼───┼───┤    │   │   │ ♚ │    └───┴───┴───┘    ┌───┬───┬───┐    │ ♚ │   │ ♚ │    ├───┼───┼───┤    │   │   │   │    ├───┼───┼───┤    │   │ ♜ │   │    └───┴───┴───┘    ┌───┬───┬───┐    │   │ ♜ │   │    ├───┼───┼───┤    │   │   │   │    ├───┼───┼───┤    │ ♚ │   │ ♚ │    └───┴───┴───┘    4 results found in 0.03 seconds.Famous eight queens puzzle, without printing the solutions to speed things up:.. code-block:: shell-session    $ chessboard solve --length=8 --height=8 --queen=8 --silent    &lt;SolverContext: length=8, height=8, pieces={'rook': 0, 'king': 0, 'queen': 8, 'bishop': 0, 'knight': 0}&gt;    Searching positions...    92 results found in 119.87 seconds.Huge combinatoric problem can take some time to solve:.. code-block:: shell-session    $ chessboard solve --length=7 --height=7 --king=2 --queen=2 --bishop=2 --knight=1 --silent    &lt;SolverContext: length=7, height=7, pieces={'rook': 0, 'king': 2, 'queen': 2, 'bishop': 2, 'knight': 1}&gt;    Searching positions...    3063828 results found in 9328.33 seconds.The CLI allow the production of a profiling graph, to identify code hot spots andbottleneck:... code-block:: shell-session    $ chessboard solve --length=6 --height=6 --king=2 --queen=2 --bishop=2 --knight=1 --silent --profile    &lt;SolverContext: length=6, height=6, pieces={'rook': 0, 'king': 2, 'queen': 2, 'bishop': 2, 'knight': 1}&gt;    Searching positions...    23752 results found in 207.25 seconds.    Execution profile saved at /home/kevin/chessboard/solver-profile.png.. image:: https://raw.githubusercontent.com/kdeldycke/chessboard/develop/solver-profile.png   :alt: Solver profiling graph   :align: centerThird-party-----------This project package's boilerplate is sourced from the `code I wrote&lt;https://github.com/scaleway/postal-address/graphs/contributors&gt;`_ for`Scaleway &lt;https://scaleway.com/&gt;`_'s `postal-address module&lt;https://github.com/scaleway/postal-address&gt;`_, which is published under a`GPLv2+ License &lt;https://github.com/scaleway/postal-address#license&gt;`_.The CLI code is based on the one I wrote for the `kdenlive-tools module&lt;https://github.com/kdeldycke/kdenlive-tools&gt;`_, published under a `BSDlicense &lt;https://github.com/kdeldycke/kdenlive-tools/blob/master/LICENSE&gt;`_.Other resources---------------* `Awesome Chess: curated list of assets  &lt;https://github.com/hkirat/awesome-chess&gt;`_* `Combinatorial Generation &lt;https://www.1stworks.com/ref/RuskeyCombGen.pdf&gt;`_* `Applied Combinatorics &lt;https://people.math.gatech.edu/~trotter/book.pdf&gt;`_* `Extremal Problems &lt;https://www-math.mit.edu/~rstan/transparencies/iap.pdf&gt;`_* `Combinatorial Algorithms &lt;https://news.ycombinator.com/item?id=13306704&gt;`_`Changes for v1.5.4 (2017-08-11) &lt;https://github.com/kdeldycke/chessboard/compare/v1.5.3...v1.5.4&gt;`_----------------------------------------------------------------------------------------------------* Show selected log level in debug mode.* Drop support and unittests on Mac OS X 10.9.* Add new macOS 10.12 target for Travis CI builds.* Bump requirement to ``readme_renderer &gt;= 16.0``.* Move installation instructions to documentation.* Move performance page to documentation.* Move CLI usage to own section in docs.* Activate unittests in Python 3.6.* Show environment variables in Travis jobs for debugging.* Check there is no conflicting dependencies in Travis jobs.* Show the graph of package dependencies in documentation.* Fix upgrade of ``setuptools`` in ``macOS`` + Python 3.3 Travis jobs.`Full changelog &lt;https://chessboard.readthedocs.io/en/develop/changelog.html#changelog&gt;`_.</longdescription>
</pkgmetadata>