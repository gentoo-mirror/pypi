<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `is_safe_url()`Redirecting a visitor to another URL is common. It's also common that the redirect target is controllable by a visitor. One can often find a `?next` or`?on_complete` GET parameter with the redirect target.While this form of redirection is convenient, blindly redirecting a visitor tothe given target can easily lead to [Unvalidated Redirect and Forwards](https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet).Thus, one needs to check if the redirect target is &quot;safe&quot; before redirecting avisitor.The [Django web framework](https://djangoproject.com) has a utility function`is_safe_url()` that attempts to validate a given target against a set of validhosts. This package unbundles the function and easily allows other projects touse it.```python&gt;&gt;&gt; from is_safe_url import is_safe_url&gt;&gt;&gt; is_safe_url(&quot;/redirect/target&quot;, {&quot;example.com&quot;, &quot;www.example.com&quot;})True&gt;&gt;&gt; is_safe_url(&quot;//example.com/redirect/target&quot;, {&quot;example.com&quot;, &quot;www.example.com&quot;})True&gt;&gt;&gt; is_safe_url(&quot;//evil.net/redirect/target&quot;, {&quot;example.com&quot;})False&gt;&gt;&gt; is_safe_url(&quot;http://example.com/redirect/target&quot;, {&quot;example.com&quot;})True&gt;&gt;&gt; is_safe_url(&quot;http://example.com/redirect/target&quot;, {&quot;example.com&quot;}, require_https=True)False&gt;&gt;&gt; is_safe_url(&quot;https://example.com/redirect/target&quot;, {&quot;example.com&quot;}, require_https=True)True```# SecurityPlease report security issues **privately** to the[Django security team](security@djangoproject.com) or[Markus Holtermann](info+security+is-safe-url@markusholtermann.eu).</longdescription>
</pkgmetadata>