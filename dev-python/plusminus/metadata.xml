<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># plusminusThe **plusminus** package provides a ready-to-run arithmetic parser and evaluator, based on [`pyparsing`](https://pyparsing-docs.readthedocs.io/en/latest/index.html)'s [`infix_notation`](https://pyparsing-docs.readthedocs.io/en/latest/pyparsing.html#pyparsing.infixNotation) helper method.Strings containing 6-function arithmetic expressions can be parsed and evaluated using the [`ArithmeticParser`](https://github.com/pyparsing/plusminus/blob/master/doc/arithmetic_parser.md#the-core-basicarithmeticparser):```pythonfrom plusminus import BaseArithmeticParserparser = BaseArithmeticParser()print(parser.evaluate(&quot;2+3/10&quot;))```The parser can also return an Abstract Syntax Tree of `ArithNode` objects:```pythonparsed_elements = parser.parse(&quot;2+3/10&quot;)```Arithmetic expressions are evaluated following standard rules for operator precedence, allowing for use of parentheses to override:    ()    |x|    ∩ &amp; ∪ | - ^ ∆ (set operations)    **    -    * / // × ÷ mod    + -    &lt; &gt; &lt;= &gt;= == != ≠ ≤ ≥    in ∈ ∉ (element in/not in set)    not    and ∧    or ∨    ? : (ternary)Functions can be called:    abs    ceil   max    round  floor  str    trunc  min    boolThe `BaseArithmeticParser` also supports assignment of variables:    r = 5    area = π × r²This last expression could be assigned using  `@=` formula assignment:    area @= π × r²As `r` is updated, evaluating `area` will be reevaluated using the new value.An `ArithmeticParser` class is also defined, with more extensive operators, including:    !     - factorial      °     - degree-radian conversion    √ ⁿ√  - square root and n'th root (2-9)    ⁻¹  ⁰  ¹  ²  ³ - common exponents as superscriptsand additional pre-defined functions:    sin    asin  rad    gcd    cos    acos  deg    lcm    tan    atan  ln     rnd    sgn    sinh  log    randint    gamma  cosh  log2    hypot  tanh  log10This parser class can be used in applications using algebra or trigonometryexpressions.Custom expressions can be defined using a simple[`API`](https://github.com/pyparsing/plusminus/blob/master/doc/developer_api.md).Example parsers are included for other specialized applicationsand domains:- dice rolling (`&quot;3d6 + d20&quot;`)- time delta expressions (`&quot;today() + 2d + 12h&quot;`)- retail and business expressions (`&quot;20% off of 19.99&quot;`)- combinatoric expressions (`&quot;6C2&quot;` or `&quot;5P3&quot;` ) These parsers can be incorporated into otherapplications to support the safe evaluation of user-defined domain-specificexpressions.</longdescription>
</pkgmetadata>