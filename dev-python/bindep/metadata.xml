<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction============Bindep is a tool for checking the presence of binary packages needed touse an application / library. It started life as a way to make it easier to setup a development environment for OpenStack projects. While OpenStack dependsheavily on `pip` for installation of Python dependencies, some dependencies arenot Python based, and particularly for testing, some dependencies have to beinstalled before `pip` can be used - such as `virtualenv` and `pip` itself.Basics------Create a file called ``bindep.txt`` and in that list anyrequirements your application / library has. In your README or INSTALL orother documentation you can tell users to run `bindep` to report on missingdependencies. Users without `bindep` installed can consult the``bindep.txt`` file by hand if they choose, or install `bindep`first and then use it.If no ``bindep.txt`` file exists, `bindep` will look at theold location ``other-requirements.txt``.The output from bindep is fairly verbose normally, but passing an option of-b/--brief outputs just the missing packages one per line, suitable for feedingto your package management tool of choice.If you need to maintain multiple requirements list files you can pass aspecific filename with the -f/--file command line option. If you want to readthe list from standard input in a pipeline instead, use a filename of &quot;-&quot;.When bindep runs, its exit code is ``0`` if no described packages are missing,but ``1`` if there are packages which it believes need to be installed.Profiles--------Profiles can be used to describe different scenarios. For instance, you mighthave a profile for using PostgreSQL which requires the PostgreSQL clientlibrary, a profile for MySQL needing that client library, and a profile fortesting which requires both libraries as well as the servers. To select aprofile just pass it when running `bindep` - e.g.::    $ bindep testWhen running bindep a single profile can be chosen by the user, with noexplicit selection resulting in the selected profile being ``default``.`bindep` will automatically activate additional profiles representing theplatform `bindep` is running under, making it easy to handle platform specificquirks.The available profiles are inferred by inspecting the requirements fileand collating the used profile names. Users can get a report on the available profiles::    $ bindep --profilesWriting Requirements Files--------------------------The requirements file ``bindep.txt`` lists the dependencies forprojects. Where non-ascii characters are needed, they should be UTF8 encoded.The file is line orientated - each line is a Debian binary package name, anoptional profile selector and optional version constraints. (Note - if you arewriting an alternative parser, see the Debian policy manual for the parsingrules for packagenames). Debian package names are used as a single source oftruth - `bindep` can be taught the mapping onto specific packaging systems.Alternatively, profiles may be used to encode platform specific requirements.Profiles are used to decide which lines in the requirements file should beconsidered when checking dependencies. Profile selectors are a list of spaceseparated strings contained in ``[]``. A selector prefixed with ``!`` is a negativeselector. For a line in the requirements file to be active:* it must not have a negative selector that matches the active profile.* it must either have no positive selectors, or a positive selector that  matches the active profile.For instance, the profile selector ``[!qpid]`` will match every profile except``qpid`` and would be suitable for disabling installation of rabbitmq when qpidis in use. ``[default]`` would match only if the user has not selected aprofile (or selected ``default``). ``[default postgresql test]`` would matchthose three profiles but not ``mysql``. ``[platform:rhel]`` will match onlywhen running in a RHEL linux environment.Note that platform selectors are treated as kind of filter: If a linecontains a platform selector, then the package only gets installed ifat least one of the platform selectors matches in addition to thematch on the other selectors. As an example, ``[platform:rpm test]``would only install a package on a RPM platform if the test selector isused.Profiles can also be grouped together using ``()``. In a group, all profilesmust match for the group to match. Given the example``[test (ceph glance !lvm)]``, to select the package you must either specify``test`` OR (``ceph`` AND ``glance`` AND NOT ``lvm``). Platform selectors willnot work inside of the group.Version constraints are a comma separated list of constraints where eachconstraint is  (== | &lt; | &lt;= | &gt;= | &gt; | !=) VERSION, and the constraints are ANDedtogether (the same as pip requirements version constraints,except that they require a space between the dep and version constraints).Comments are allowed: everything from the first ``#`` to the end of the line isignored.Examples--------A simple example with using a test profile is::    # A runtime dependency    libffi6    # A build time dependency    libffi-devel [test]bindep would select the ``libffi6`` package in all cases and if the``test`` profile gets choosen with ``bindep test``, then both packageswould be selected.If a repository needs for deployment the libxml2 developmentlibraries for support of Debian, Gentoo, and RPM based distros, the``bindep.txt`` file can contain::    libxml2-dev [platform:dpkg]    libxml2-devel [platform:rpm]    libxml2-utils [platform:dpkg]    dev-libs/libxml2 [platform:gentoo]This would select ``libxml2-dev`` and ``libxml2-utils`` packages onDebian based distributions like Debian and Ubuntu since those entrieshave the ``platform:dpkg`` profile, ``libxml2-devel`` on RPM baseddistributions like CentOS, Fedora, openSUSE, Red Hat, or SUSE Linuxsince those entries have the ``platform:rpm`` profile, and``dev-libs/libxml2`` on Gentoo since the entry has the``platform:gentoo`` profile.Additionally, you can use ``platform:redhat`` or ``platform:suse`` to onlymatch RedHat-like or SUSE-like distributions respectively as shown in thefollowing example::    openssh-server [platform:redhat]    openssh [platform:suse]If you need to distinguish between operating systems where python2 or python3is the official interpreter, you can use `base-py2` and `base-py3` labels.Keep in mind that only one would be exposed for a specific operating systemeven if the system could support installation of multiple python versions::    python3-lxml [(platform:redhat platform:base-py3)]    python-lxml [(platform:redhat platform:base-py2)]The example above will install lxml python modules on official python usedby platform. Keep it mind that ``base-py[23]`` support is currently implementedonly on Debian, Ubuntu, RedHat flavours and MacOS.To select Python3 development packages, you can use::    python3-all-dev [platform:dpkg !platform:ubuntu-precise]    python3-devel [platform:fedora]    python34-devel [platform:centos]This selects ``python3-all-dev`` on all Debian based distributionswith the exception of Ubuntu Precise, ``python3-devel`` on Fedora and``python34-devel`` on CentOS.To select the curl package::    curl [!platform:gentoo]    net-misc/curl [platform:gentoo]This selects the ``curl`` package on all distributions with theexception of Gentoo, and selects ``net-misc/curl`` on Gentoo only.To select a package based on a group of profiles::    ceph-common [ceph]    python-rbd [(ceph glance)]This selects the ``ceph-common`` package when the profile ``ceph`` isspecified. However, it will only select the ``python-rbd`` package when both``ceph`` and ``glance`` profiles are active.To specify package versions::    python &gt;=3.7,&lt;=3.8    grep &gt;=3.3    # OR with a platform profile    python [platform:brew] ==3.7.3For a more comprehensive example check bindep.txt_ file that is used totest bindep itself on multiple platforms... _bindep.txt: https://opendev.org/opendev/bindep/src/master/bindep/tests/bindep.txt</longdescription>
</pkgmetadata>