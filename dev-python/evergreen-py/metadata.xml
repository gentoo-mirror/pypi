<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Evergreen.pyA client library for the Evergreen API written in python. Currently supports the V2 version ofthe API. For more details, see https://github.com/evergreen-ci/evergreen/wiki/REST-V2-Usage.![PyPI - Python Version](https://img.shields.io/pypi/pyversions/evergreen.py) [![PyPI](https://img.shields.io/pypi/v/evergreen.py.svg)](https://pypi.org/project/evergreen.py/) [![Coverage Status](https://coveralls.io/repos/github/evergreen-ci/evergreen.py/badge.svg?branch=master)](https://coveralls.io/github/evergreen-ci/evergreen.py?branch=master)## Table of contents1. [Description](#description)2. [Getting Help](#getting-help)3. [Dependencies](#dependencies)4. [Installation](#installation)5. [Usage](#usage)6. [Documentation](#documentation)7. [Contributor's Guide](#contributors-guide)   - [Setting up a local development environment](#setting-up-a-local-development-environment)   - [Linting/formatting](#lintingformatting)   - [Running tests](#running-tests)   - [Automatically running checks on commit](#automatically-running-checks-on-commit)   - [Versioning](#versioning)   - [Code Review](#code-review)   - [Deployment](#deployment)## DescriptionThis is a Python client library for interacting with Evergreen and Evergreen objects. It currently onlysupports the V2 version of Evergreen's api. It can be used either by Python code in a separate applicationor on the command line to get data about Evergreen objects quickly and easily.## Getting Help### What's the right channel to ask my question?If you have a question about evergreen.py, please mention @dag-on-call inslack channel [#evergreen-users](https://mongodb.slack.com/messages/#evergreen-users/),or email us atdev-prod-dag@mongodb.com.### How can I request a change/report a bug in evergreen.py?Create a [DAG ticket](https://jira.mongodb.org/projects/DAG).### What should I include in my ticket or #evergreen-users question?Since #evergreen-users questions are interrupts,please include as much information as possible.This can help avoid long information-gathering threads.Please include the following:- **Motivation for Request**  - provide us the motivation for this change.- **Context**  - provide some background contexts for this issue.- **Description**  - provide some descriptions on how this issue happened.## Dependencies- Python 3.7 or later## Installation```bash$ pip install evergreen.py```## UsageThis client can be used either in code or directly via the command line.In code:```python&gt;&gt; from evergreen.api import EvgAuth, EvergreenApi&gt;&gt; api = EvergreenApi.get_api(EvgAuth('david.bradford', '***'))&gt;&gt; project = api.project_by_id('mongodb-mongo-master')&gt;&gt; project.display_name'MongoDB (master)'```Cli:```bash$ evg-api --json list-hosts{    &quot;host_id&quot;: &quot;host num 0&quot;,    &quot;host_url&quot;: &quot;host.num.com&quot;,    &quot;distro&quot;: {        &quot;distro_id&quot;: &quot;ubuntu1804-build&quot;,        &quot;provider&quot;: &quot;static&quot;,        &quot;image_id&quot;: &quot;&quot;    },    &quot;provisioned&quot;: true,    &quot;started_by&quot;: &quot;mci&quot;,    &quot;host_type&quot;: &quot;&quot;,    &quot;user&quot;: &quot;mci-exec&quot;,    &quot;status&quot;: &quot;running&quot;,    &quot;running_task&quot;: {        &quot;task_id&quot;: null,        &quot;name&quot;: null,        &quot;dispatch_time&quot;: null,        &quot;version_id&quot;: null,        &quot;build_id&quot;: null    },    &quot;user_host&quot;: false}```The `patch_from_diff` API requires the Evergreen CLI to be installed.Add the following to the host's DOCKERFILE:```bashRUN wget https://evergreen.mongodb.com/clients/linux_amd64/evergreenRUN chmod +x evergreenENV PATH=&quot;/project:$PATH&quot;```You will need to provide an .evergreen.yml file with credentials to use the CLI. Assuming you are using the [web-app](https://github.com/10gen/helm-charts/tree/master/charts/web-app) chart this can be done by [mounting](https://kanopy.corp.mongodb.com/docs/getting_started/application_configuration/#configuration-filesvolumes) [kubernetes secrets](https://kanopy.corp.mongodb.com/docs/cheatsheet/#interacting-with-kubernetes-secrets) in your pod.Store the secret in the cluster:```bashkubectl create secret generic &lt;secret_name&gt; --from-file .evergreen.yml --namespace &lt;namespace&gt;```In environments/deployment.yml configure the file to be mounted and linked to the correct location:```yamlvolumeSecrets:  - name: &lt;secret_name&gt;    path: /etc/secretslifecycle:  postStart:    type: exec    command:      - /bin/sh      - -c      - ln -sf /etc/secrets/.evergreen.yml```## DocumentationYou can find the documentation [here](https://evergreen-ci.github.io/evergreen.py/).## Contributor's Guide### Setting up a local development environment#### Requirements- Poetry 1.1 or laterYou will need Evergreen credentials on your local machine to use this library or the attached CLI. Youcan set up your credentials by following the link [here](https://github.com/evergreen-ci/evergreen/wiki/Using-the-Command-Line-Tool#downloading-the-command-line-tool).### Linting/formattingThis project uses [black](https://github.com/psf/black) for formatting.```bashpoetry run black src tests```### Running tests```bashpoetry run pytest```There are a few tests that are slow running. These tests are not run by default, but can be includedby setting the env variable RUN_SLOW_TESTS to any value.```$ RUN_SLOW_TEST=1 poetry run pytest```To get code coverage information:```$ poetry run pytest --cov=src --cov-report=html```### Automatically running checks on commitThis project has [pre-commit](https://pre-commit.com/) configured. Pre-commit will runconfigured checks at git commit time. To enable pre-commit on your local repository run:```bash$ poetry run pre-commit install```### VersioningBefore deploying a new version, please update the `CHANGELOG.md` file with a description of whatis being changed.Deploys to [PyPi](https://pypi.org/project/evergreen.py/) are done automatically on merges to master.In order to avoid overwriting a previous deploy, the version should be updated on all changes. The[semver](https://semver.org/) versioning scheme should be used for determining the version number.The version is found in the `pyproject.toml` file.### Code ReviewThis project uses the [Evergreen Commit Queue](https://github.com/evergreen-ci/evergreen/wiki/Commit-Queue#pr).Add a PR comment with `evergreen merge` to trigger a merge.### DeploymentDeployment to production is automatically triggered on merges to master.</longdescription>
</pkgmetadata>