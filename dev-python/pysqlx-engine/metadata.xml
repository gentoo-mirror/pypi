<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PySQLXEngine&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;/&quot;&gt;&lt;img src=&quot;https://carlos-rian.github.io/pysqlx-engine/img/logo-text3.png&quot; alt=&quot;PySQLXEngine Logo&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;PySQLXEngine, a fast and minimalist SQL engine&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/carlos-rian/pysqlx-engine/actions?query=workflow%3ATest+event%3Apush+branch%3Amain&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/carlos-rian/pysqlx-engine/workflows/Test/badge.svg?event=push&amp;branch=main&quot; alt=&quot;test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://app.codecov.io/gh/carlos-rian/pysqlx-engine&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/codecov/c/github/carlos-rian/pysqlx-engine?color=%2334D058&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pysqlx-engine&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/pysqlx-engine?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pysqlx-engine&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/pysqlx-engine.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/pysqlx-engine&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://static.pepy.tech/personalized-badge/pysqlx-engine?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=green&amp;left_text=downloads&quot; alt=&quot;Downloads&quot;&gt;    &lt;/a&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://carlos-rian.github.io/pysqlx-engine/&quot; target=&quot;_blank&quot;&gt;https://carlos-rian.github.io/pysqlx-engine/&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/carlos-rian/pysqlx-engine&quot; target=&quot;_blank&quot;&gt;https://github.com/carlos-rian/pysqlx-engine&lt;/a&gt;---PySQLXEngine supports the option of sending **Raw SQL** to your database.The PySQLXEngine is a minimalist [SQL Engine](https://github.com/carlos-rian/pysqlx-engine).The PySQLXEngine was created and thought to be minimalistic, but very efficient. The core is write in [**Rust**](https://www.rust-lang.org), making communication between Databases and [**Python**](https://python-poetry.org) more efficient.All SQL executed using PySQLXEngine is atomic; only one instruction is executed at a time. Only the first one will be completed if you send an Insert and a select. This is one of the ways to handle SQL ingestion. As of version **0.2.0**, PySQLXEngine supports transactions, where you can control [`BEGIN`](https://learn.microsoft.com/en-us/sql/t-sql/language-elements/begin-end-transact-sql?view=sql-server-ver16), [`COMMIT`](https://www.geeksforgeeks.org/difference-between-commit-and-rollback-in-sql), [ `ROLLBACK` ](https://www.geeksforgeeks.org/difference-between-commit-and-rollback-in-sql), [`ISOLATION LEVEL`](https://levelup.gitconnected.com/understanding-isolation-levels-in-a-database-transaction-af78aea3f44), etc. as you wish.&gt; **NOTE**:    Minimalism is not the lack of something, but having exactly what you need.    PySQLXEngine aims to expose an easy interface for you to communicate with the database in a simple, intuitive way and with good help through documentation, autocompletion, typing, and good practices.---Database Support:* [`SQLite`](https://www.sqlite.org/index.html)* [`PostgreSQL`](https://www.postgresql.org/)* [`MySQL`](https://www.mysql.com/)* [`Microsoft SQL Server`](https://www.microsoft.com/sql-server)OS Support:* [`Linux`](https://pt.wikipedia.org/wiki/Linux)* [`MacOS`](https://pt.wikipedia.org/wiki/Macos)* [`Windows`](https://pt.wikipedia.org/wiki/Microsoft_Windows)## InstallationPIP```console$ pip install pysqlx-engine```Poetry```console$ poetry add pysqlx-engine```## Async ExampleCreate a `main.py` file and add the code examples below.```pythonfrom pysqlx_engine import PySQLXEngineasync def main():    db = PySQLXEngine(uri=&quot;sqlite:./db.db&quot;)    await db.connect()    await db.execute(sql=&quot;&quot;&quot;        CREATE TABLE IF NOT EXISTS users (            id INTEGER PRIMARY KEY,             name TEXT,             age INT        )    &quot;&quot;&quot;)    await db.execute(sql=&quot;INSERT INTO users (name, age) VALUES ('Rian', '28')&quot;)    await db.execute(sql=&quot;INSERT INTO users (name, age) VALUES ('Carlos', '29')&quot;)    rows = await db.query(sql=&quot;SELECT * FROM users&quot;)    print(rows)import asyncioasyncio.run(main())```## Sync ExampleCreate a `main.py` file and add the code examples below.```pythonfrom pysqlx_engine import PySQLXEngineSyncdef main():    db = PySQLXEngineSync(uri=&quot;sqlite:./db.db&quot;)    db.connect()    db.execute(sql=&quot;&quot;&quot;        CREATE TABLE IF NOT EXISTS users (            id INTEGER PRIMARY KEY,             name TEXT,             age INT        )    &quot;&quot;&quot;)    db.execute(sql=&quot;INSERT INTO users (name, age) VALUES ('Rian', '28')&quot;)    db.execute(sql=&quot;INSERT INTO users (name, age) VALUES ('Carlos', '29')&quot;)    rows = db.query(sql=&quot;SELECT * FROM users&quot;)    print(rows)# running the codemain()```Running the code using the terminal```console$ python3 main.py```Output```python[    BaseRow(id=1, name='Rian', age=28),      BaseRow(id=2, name='Carlos', age=29)]```</longdescription>
</pkgmetadata>