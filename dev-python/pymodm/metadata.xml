<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======PyMODM======.. image:: https://readthedocs.org/projects/pymodm/badge/?version=stable   :alt: Documentation   :target: http://pymodm.readthedocs.io/en/stable/?badge=stable.. image:: https://travis-ci.org/mongodb/pymodm.svg?branch=master   :alt: View build status   :target: https://travis-ci.org/mongodb/pymodm.. image:: https://badges.gitter.im/mongodb/pymodm.svg   :alt: Join the chat at https://gitter.im/mongodb/pymodm   :target: https://gitter.im/mongodb/pymodm?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badgeA generic ODM around PyMongo_, the MongoDB Python driver. PyMODM works on Python2.7 as well as Python 3.3 and up. To learn more, you can browse the `officialdocumentation`_ or take a look at some `examples`_... _PyMongo: https://pypi.python.org/pypi/pymongo.. _official documentation: http://pymodm.readthedocs.io/en/stable.. _examples: https://github.com/mongodb/pymodm/tree/master/exampleWhy PyMODM?===========PyMODM is a &quot;core&quot; ODM, meaning that it provides simple, extensiblefunctionality that can be leveraged by other libraries to target platforms likeDjango. At the same time, PyMODM is powerful enough to be used for developingapplications on its own. Because MongoDB engineers are involved in developingand maintaining the project, PyMODM will also be quick to adopt new MongoDBfeatures.Support / Feedback==================For issues with, questions about, or feedback for PyMODM, please look intoour `support channels &lt;http://www.mongodb.org/about/support&gt;`_. Please do notemail any of the PyMODM developers directly with issues or questions -you're more likely to get an answer on the `MongoDB Community Forums &lt;https://developer.mongodb.com/community/forums/tags/c/drivers-odms-connectors/7/pymodm-odm&gt;`_.Bugs / Feature Requests=======================Think you’ve found a bug? Want to see a new feature in PyMODM? Please opena case in our issue management tool, JIRA:- `Create an account and login &lt;https://jira.mongodb.org&gt;`_.- Navigate to `the PYMODM project &lt;https://jira.mongodb.org/browse/PYMODM&gt;`_.- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.Bug reports in JIRA for all driver projects (e.g. PYMODM, PYTHON, JAVA) and theCore Server (i.e. SERVER) project are **public**.How To Ask For Help-------------------Please include all of the following information when opening an issue:- Detailed steps to reproduce the problem, including full traceback, if possible.- The exact python version used, with patch level::  $ python -c &quot;import sys; print(sys.version)&quot;- The exact version of PyMODM used, with patch level::  $ python -c &quot;import pymodm; print(pymodm.version)&quot;- The PyMongo version used, with patch level::  $ python -c &quot;import pymongo; print(pymongo.version)&quot;- The operating system and version (e.g. Windows 7, OSX 10.8, ...)- Web framework or asynchronous network library used, if any, with version (e.g.  Django 1.7, mod_wsgi 4.3.0, gevent 1.0.1, Tornado 4.0.2, ...)Security Vulnerabilities------------------------If you’ve identified a security vulnerability in a driver or any otherMongoDB project, please report it according to the `instructions here&lt;http://docs.mongodb.org/manual/tutorial/create-a-vulnerability-report&gt;`_.Example=======Here's a basic example of how to define some models and connect them to MongoDB:.. code-block:: python  from pymongo import TEXT  from pymongo.operations import IndexModel  from pymodm import connect, fields, MongoModel, EmbeddedMongoModel  # Connect to MongoDB first. PyMODM supports all URI options supported by  # PyMongo. Make sure also to specify a database in the connection string:  connect('mongodb://localhost:27017/myApp')  # Now let's define some Models.  class User(MongoModel):      # Use 'email' as the '_id' field in MongoDB.      email = fields.EmailField(primary_key=True)      fname = fields.CharField()      lname = fields.CharField()  class BlogPost(MongoModel):      # This field references the User model above.      # It's stored as a bson.objectid.ObjectId in MongoDB.      author = fields.ReferenceField(User)      title = fields.CharField(max_length=100)      content = fields.CharField()      tags = fields.ListField(fields.CharField(max_length=20))      # These Comment objects will be stored inside each Post document in the      # database.      comments = fields.EmbeddedDocumentListField('Comment')      class Meta:          # Text index on content can be used for text search.          indexes = [IndexModel([('content', TEXT)])]  # This is an &quot;embedded&quot; model and will be stored as a sub-document.  class Comment(EmbeddedMongoModel):      author = fields.ReferenceField(User)      body = fields.CharField()      vote_score = fields.IntegerField(min_value=0)  # Start the blog.  # We need to save these objects before referencing them later.  han_solo = User('mongoblogger@reallycoolmongostuff.com', 'Han', 'Solo').save()  chewbacca = User(      'someoneelse@reallycoolmongostuff.com', 'Chewbacca', 'Thomas').save()  post = BlogPost(      # Since this is a ReferenceField, we had to save han_solo first.      author=han_solo,      title=&quot;Five Crazy Health Foods Jabba Eats.&quot;,      content=&quot;...&quot;,      tags=['alien health', 'slideshow', 'jabba', 'huts'],      comments=[          Comment(author=chewbacca, body='Rrrrrrrrrrrrrrrr!', vote_score=42)      ]  ).save()  # Find objects using familiar MongoDB-style syntax.  slideshows = BlogPost.objects.raw({'tags': 'slideshow'})  # Only retrieve the 'title' field.  slideshow_titles = slideshows.only('title')  # u'Five Crazy Health Foods Jabba Eats.'  print(slideshow_titles.first().title)</longdescription>
</pkgmetadata>