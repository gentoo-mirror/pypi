<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Django Vote``django-vote`` is a simple Django app to conduct vote for django model.This project was inspired by [django-taggit](https://github.com/alex/django-taggit)![Ci](https://github.com/shellfly/django-vote/actions/workflows/ci.yml/badge.svg)[![codecov](https://codecov.io/gh/shellfly/django-vote/branch/master/graph/badge.svg)](https://codecov.io/gh/shellfly/django-vote)[![PyPI version](https://badge.fury.io/py/django-vote.svg)](https://badge.fury.io/py/django-vote)### Quick start#### Install `django-vote` by pip```shellpip install django-vote```#### Add `'vote'` to your `INSTALLED_APPS` setting like this```pythonINSTALLED_APPS = (  ...  'vote',)```#### Add `VoteModel` to the model you want to vote```pythonfrom vote.models import VoteModelclass ArticleReview(VoteModel, models.Model):    ...```#### Run migrate```shellmanage.py makemigrationsmanage.py migrate```### Use vote API```pythonreview = ArticleReview.objects.get(pk=1)# Up vote to the objectreview.votes.up(user_id)# Down vote to the objectreview.votes.down(user_id)# Removes a vote from the objectreview.votes.delete(user_id)# Check if the user already voted (up) the objectreview.votes.exists(user_id)# Check if the user already voted (down) the object# import UP, DOWN from vote.modelsreview.votes.exists(user_id, action=DOWN)# Returns the number of votes for the objectreview.votes.count()# Returns the number of down votes for the objectreview.votes.count(action=DOWN)# Returns a list of users who voted and their voting datereview.votes.user_ids()# Returns all instances voted by userReview.votes.all(user_id)```### Use tags templateThere are two template tags you can use in template: 1. `vote_count` to get vote count for a model instance2. `vote_exists` to check whether current user vote for the instance``` html{% load vote %}&lt;ol&gt;    {% for comment in comments %}    &lt;li&gt;        {{comment.content}} - up:{% vote_count comment &quot;up&quot; %} - down: {% vote_count comment &quot;down&quot; %} - exists_up:        {% vote_exists comment user &quot;up&quot; %} - exists_down: {% vote_exists comment user &quot;down&quot;%}    &lt;/li&gt;    {% endfor %}&lt;/ol&gt;```### Use `VoteMixin` for REST APIInstall [django-rest-framework](https://github.com/encode/django-rest-framework/)``` pythonfrom rest_framework.viewsets import ModelViewSetfrom vote.views import VoteMixinclass CommentViewSet(ModelViewSet, VoteMixin):    queryset = Comment.objects.all()    serializer_class = CommentSerializer``````shPOST /api/comments/{id}/vote/POST /api/comments/{id}/vote/ {&quot;action&quot;:&quot;down&quot;}DELETE /api/comments/{id}/vote/```</longdescription>
</pkgmetadata>