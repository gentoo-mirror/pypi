<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://cfl.dropboxstatic.com/static/images/sdk/stone_banner.png    :target: https://github.com/dropbox/stone.. image:: https://img.shields.io/pypi/pyversions/stone.svg    :target: https://pypi.python.org/pypi/stone.. image:: https://img.shields.io/pypi/v/stone.svg    :target: https://pypi.python.org/pypi/stone.. image:: https://codecov.io/gh/dropbox/stone/branch/main/graph/badge.svg    :target: https://codecov.io/gh/dropbox/stoneThe Official Api Spec Language for Dropbox.`Documentation`_ can be found on GitHubInstallation============Install stone using ``pip``::    $ pip install --user stoneThis will install a script ``stone`` to your PATH that can be run from thecommand line::    $ stone -hAlternative-----------If you choose not to install ``stone`` using the method above, you will needto ensure that you have the Python packages ``ply`` and ``six``, which can beinstalled through ``pip``::    $ pip install &quot;ply&gt;=3.4&quot; &quot;six&gt;=1.3.0&quot; &quot;typing&gt;=3.5.2&quot;If the ``stone`` package is in your PYTHONPATH, you can replace ``stone``with ``python -m stone.cli`` as follows::    $ python -m stone.cli -hIf you have the ``stone`` package on your machine, but did not install it oradd its location to your PYTHONPATH, you can use the following::    $ PYTHONPATH=path/to/stone python -m stone.cli -hAfter installation, follow one of our `Examples`_ or read the `Documentation`_.Overview========Define an API once in Stone. Use backends, i.e. code generators, to translateyour specification into objects and functions in the programming languages ofyour choice.* Introduction    * Motivation_    * Installation_* `Language Reference &lt;https://github.com/dropbox/stone/blob/main/docs/lang_ref.rst&gt;`_* `Builtin Backends &lt;https://github.com/dropbox/stone/blob/main/docs/builtin_backends.rst&gt;`_* `Managing Specs &lt;https://github.com/dropbox/stone/blob/main/docs/managing_specs.rst&gt;`_* `Evolving a Spec &lt;https://github.com/dropbox/stone/blob/main/docs/evolve_spec.rst&gt;`_* `Backend Reference &lt;https://github.com/dropbox/stone/blob/main/docs/backend_ref.rst&gt;`_* `JSON Serializer &lt;https://github.com/dropbox/stone/blob/main/docs/json_serializer.rst&gt;`_* `Network Protocol &lt;https://github.com/dropbox/stone/blob/main/docs/network_protocol.rst&gt;`_*Warning: The documentation is undergoing a rewrite.*.. image:: docs/overview.pngStone is made up of several components:Language--------A language for writing API specifications, &quot;specs&quot; for short.Command-Line Interface----------------------The CLI (``stone``) generates code based on the provided specs, backend,and additional arguments.Backends--------There are builtin backends that come with Stone: Javascript, Python, Obj-C,Swift, and Typescript.There are other backends we've written that aren't part of the Stone packagebecause they aren't sufficiently general, and can't realistically be re-usedfor non-Dropbox APIs: Go and Java.Stone includes a Python interface for defining new backends based on itsintermediate representation of specs. This gives you the freedom to generateto any target.JSON Serialization------------------Stone defines a JSON-compatible serialization scheme.Motivation==========Stone was birthed at Dropbox at a time when it was becoming clear that APIdevelopment needed to be scaled beyond a single team. The company wasundergoing a large expansion in the number of product groups, and it wasn'tscalable for the API team, which traditionally dealt with core file operations,to learn the intricacies of each product and build corresponding APIs.Stone's chief goal is to decentralize API development and ownership at Dropbox.To be successful, it needed to do several things:**Decouple APIs from SDKS**: Dropbox has first-party clients for our mobileapps, desktop client, and website. Each of these is implemented in a differentlanguage. Moreover, we wanted to continue providing SDKs to third-parties, overhalf of whom use our SDKs. It's untenable to ask product groups that build APIsto also implement these endpoints in a half-dozen different language-specificSDKs. Without decoupling, as was the case in our v1 API, the SDKs willinevitably fall behind. Our solution is to have our SDKs automaticallygenerated.**Improve Visibility into our APIs**: These days, APIs aren't just in thedomain of engineering. Product managers, product specialists, partnerships,sales, and services groups all need to have clear and accurate specificationsof our APIs. After all, APIs define Dropbox's data models and functionality.Before Stone, API design documents obseleted by changes during implementationwere the source of truth.**Consistency and Predictability**: Consistency ranging from documentationtense to API patterns are important for making an API predictable and thereforeeasier to use. We needed an easy way to make and enforce patterns.**JSON**: To make consumption easier for third parties, we wanted our datatypes to map to JSON. For cases where serialization efficiency(space and time) are important, you can try using msgpack (alpha supportavailable in the Python generator). It's possible also to define your ownserialization scheme, but at that point, you may consider using something like`Protobuf &lt;https://github.com/google/protobuf&gt;`_.Stone is in active use for the `Dropbox v2 API&lt;http://www.dropbox.com/developers&gt;`_.Assumptions-----------Stone makes no assumptions about the protocol layer being used to make APIrequests and return responses; its first use case is the Dropbox v2 API whichoperates over HTTP. Stone does not come with nor enforce any particular RPCframework.Stone makes some assumptions about the data types supported in targetprogramming languages. It's assumed that there is a capacity for representingdictionaries (unordered string keys -&gt; value), lists, numeric types, andstrings.Stone assumes that a route (or API endpoint) can have its argument andresult types defined without relation to each other. In other words, thetype of response does not change based on the input to the endpoint. Anexception to this rule is afforded for error responses.Examples========We provide `Examples`_ to help get you started with a lot of the basic functionality of Stone.Getting Help============If you find a bug, please see `CONTRIBUTING.md`_ for information on how to report it.If you need help that is not specific to Stone, please reach out to `Dropbox Support`_.License=======Stone is distributed under the MIT license, please see `LICENSE`_ for more information... _logo: {logo_link}.. _repo: https://github.com/dropbox/stone.. _`Documentation`: https://github.com/dropbox/stone/tree/main/docs.. _`Examples`: https://github.com/dropbox/stone/tree/main/example/backend.. _LICENSE: https://github.com/dropbox/stone/blob/main/LICENSE.. _CONTRIBUTING.md: https://github.com/dropbox/stone/blob/main/CONTRIBUTING.md.. _`Dropbox Support`: https://www.dropbox.com/developers/contact</longdescription>
</pkgmetadata>