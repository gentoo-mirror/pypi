<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h2 align=&quot;center&quot;&gt;JSON formatter for logging&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/logging_json/&quot;&gt;&lt;img alt=&quot;pypi version&quot; src=&quot;https://img.shields.io/pypi/v/logging_json&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Colin-b/logging_json/actions&quot;&gt;&lt;img alt=&quot;Build status&quot; src=&quot;https://github.com/Colin-b/logging_json/workflows/Release/badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Colin-b/logging_json/actions&quot;&gt;&lt;img alt=&quot;Coverage&quot; src=&quot;https://img.shields.io/badge/coverage-100%25-brightgreen&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Colin-b/logging_json/actions&quot;&gt;&lt;img alt=&quot;Number of tests&quot; src=&quot;https://img.shields.io/badge/tests-21 passed-blue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/logging_json/&quot;&gt;&lt;img alt=&quot;Number of downloads&quot; src=&quot;https://img.shields.io/pypi/dm/logging_json&quot;&gt;&lt;/a&gt;&lt;/p&gt;This module provides a JSON formatter for the python [`logging`](https://docs.python.org/3/library/logging.html) module that will format to JSON formatted string.Using this formatter allows to have the proper format for logging to `Splunk` or `ElasticSearch`, but it can also be used for logging to stdout as a string is issued.- [Features](#features)  - [Custom fields](#adding-additional-fields-and-values)  - [dict logging](#logging-with-a-dictionary)  - [str logging](#logging-with-anything-else-such-as-a-string)- [Configuration](#configuration)  - [Using dictConfig](#using-loggingconfigdictconfig)## Features### Adding additional fields and valuesYou can add fields to every message that is being logged.To do so, specify the `fields` parameter to the `logging_json.JSONFormatter` instance.It must be a dictionary where keys are the keys to be appended to the resulting JSON dictionary (if not already present) and the values can be one of the following:* An attribute of the logging record (non-exhaustive list can be found on [the python logging documentation](https://docs.python.org/3/library/logging.html#logrecord-attributes)).* If not found on the record, the value will be linked to the key.#### Logging exceptions, a specific caseIf an exception is logged, the `exception` key will be appended to the resulting JSON dictionary.This dictionary will contain 3 keys:* `type`: The name of the exception class (useful when the message is blank).* `message`: The str representation of the exception (usually the provided error message).* `stack`: The stack trace, formatted as a string.You can rename the exception field key by setting the `exception_field_name` parameter with a new name for the key.It is also possible to disable this behaviour by setting the `exception_field_name` parameter to `None` or an empty string### Logging with a dictionaryThis formatter allows you to log dictionary as in the following:```pythonimport logginglogging.info({&quot;key&quot;: &quot;value&quot;, &quot;other key&quot;: &quot;other value&quot;})```The resulting JSON dictionary will be the one you provided (with the [additional fields](#adding-additional-fields-and-values)).### Logging with anything else (such as a string)Anything not logged using a dictionary will be handled by the standard formatter, and it can result in one of the 2 output:* A JSON dictionary, if [additional fields](#adding-additional-fields-and-values) are set or if `extra` parameter is used while logging, with the message available in the `message` key of the resulting JSON dictionary.  Default `message` key name can be changed by `message_field_name` parameter of the `logging_json.JSONFormatter` instance.* The formatted record, if no [additional fields](#adding-additional-fields-and-values) are set.This handles the usual string logging as in the following:```pythonimport logginglogging.info(&quot;This is my message&quot;)```## ConfigurationYou can create a formatter instance yourself as in the following, or you can use a logging configuration.```pythonimport logging_jsonformatter = logging_json.JSONFormatter(fields={    &quot;level_name&quot;: &quot;levelname&quot;,    &quot;thread_name&quot;: &quot;threadName&quot;,    &quot;process_name&quot;: &quot;processName&quot;})```### Using logging.config.dictConfigYou can configure your logging as advertise by python, by using the `logging.config.dictConfig` function.#### dict configuration```pythonimport logging.configlogging.config.dictConfig({    &quot;version&quot;: 1,    &quot;formatters&quot;: {        &quot;json&quot;: {            '()': 'logging_json.JSONFormatter',            'fields':{                &quot;level_name&quot;: &quot;levelname&quot;,                &quot;thread_name&quot;: &quot;threadName&quot;,                &quot;process_name&quot;: &quot;processName&quot;            }        }    },    &quot;handlers&quot;: {        &quot;standard_output&quot;: {            'class': 'logging.StreamHandler',            'formatter': 'json',            'stream': 'ext://sys.stdout'        },    },    &quot;loggers&quot;: {        &quot;my_app&quot;: {&quot;level&quot;: &quot;DEBUG&quot;}    },    &quot;root&quot;: {        &quot;level&quot;: &quot;INFO&quot;,        &quot;handlers&quot;: [&quot;standard_output&quot;]    }})```#### YAML logging configurationYou can use YAML to store your logging configuration, as in the following sample:```pythonimport logging.configimport yamlwith open(&quot;path/to/logging_configuration.yaml&quot;, &quot;r&quot;) as config_file:    logging.config.dictConfig(yaml.load(config_file))```Where `logging_configuration.yaml` can be a file containing the following sample:```yamlversion: 1formatters:  json:    '()': logging_json.JSONFormatter    fields:      level_name: levelname      thread_name: threadName      process_name: processNamehandlers:  standard_output:    class: logging.StreamHandler    formatter: json    stream: ext://sys.stdoutloggers:  my_app:    level: DEBUGroot:  level: INFO  handlers: [standard_output]```## How to install1. [python 3.7+](https://www.python.org/downloads/) must be installed2. Use pip to install module:```shpython -m pip install logging_json```</longdescription>
</pkgmetadata>