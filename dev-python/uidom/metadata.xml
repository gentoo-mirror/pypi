<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- Copyright (c) 2022 UiDOM  This software is released under the MIT License. https://opensource.org/licenses/MIT--&gt;# UiDOM## An HTML library for pythonThis library is inspired from dominate html library and takes it further. It supports jinja templating and many more features that we expect from an html library. We can even create Custom Elements and Web Components in UiDOM.## Installation```cmd&gt; pip install uidom```## An Alpinejs toggle example```python#!/usr/bin/env python# app.py&quot;&quot;&quot; This example should work as is. &quot;&quot;&quot;from fastapi import FastAPIfrom uidom import Documentfrom uidom.dom import Component, script, title, divfrom uidom.routing.fastapi import StreamingRoutedocument = Document(body=[    script(src=&quot;https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js&quot;, defer=None, rel=&quot;prefetch&quot;)    ])api = FastAPI() api.router.route_class = StreamingRouteclass ToggleButton(Component):    def render(self):        with div(x_data={'open': 'true'}) as toggle:            with div(x_on_click='open = !open'):                div(&quot;Opened&quot;, x_show=&quot;open&quot;),                 div(&quot;Closed&quot;, x_show=&quot;!open&quot;),         return toggleclass App(Component):    def render(self, *args, **kwargs):        return document(*args, **kwargs, , head=title('App Page'))@api.get('/')def index():    return App(ToggleButton())```## A Jinja template example```pythonfrom uidom.dom import nav, ul, For, li, a, Var, JinjaElementfrom collections import namedtuple as ntclass Nav(JinjaElement):    def render(self):        return nav(            ul(                For(                    &quot;item in menu_items&quot;,                    li(a(Var(&quot;item.name&quot;), href=Var(&quot;item.link&quot;))),                )            )        )# or we can write Jinja Element directlyNav = lambda: JinjaElement(nav(ul(For(&quot;item in menu_items&quot;, li(a(Var(&quot;item.name&quot;), href=Var(&quot;item.link&quot;)))))))nav_bar = Nav()menu_url = nt(&quot;menu_url&quot;, &quot;name link&quot;)# nav_bar element is a jinja template and has an internal representation as follows ``````html&lt;nav&gt;  &lt;ul&gt;    {% for item in menu_items %}      &lt;li&gt;        &lt;a href=&quot;{{ item.link }}&quot;&gt;          {{ item.name }}        &lt;/a&gt;      &lt;/li&gt;    {% endfor %}  &lt;/ul&gt;&lt;/nav&gt;``````python# now we can use nav_bar just like we use jinja templates and render it as followsnav_bar(    menu_items=[        menu_url(&quot;Home&quot;, r&quot;\home.html&quot;),        menu_url(&quot;About&quot;, r&quot;\about.html&quot;),        menu_url(&quot;Contact Us&quot;, r&quot;\contact_us.html&quot;),    ])# it creates an element as follows``````html&lt;nav&gt;  &lt;ul&gt;      &lt;li&gt;        &lt;a href=&quot;\home.html&quot;&gt;          Home        &lt;/a&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;a href=&quot;\about.html&quot;&gt;          About        &lt;/a&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;a href=&quot;\contact_us.html&quot;&gt;          Contact Us        &lt;/a&gt;      &lt;/li&gt;  &lt;/ul&gt;&lt;/nav&gt;```## using markdown with uidom elements```pythonfrom uidom.dom import MarkdownElementem_text = MarkdownElement(&quot;*hello world*&quot;)print(em_text)# it returns following string``````html&lt;p&gt;  &lt;em&gt;    hello world  &lt;/em&gt;&lt;/p&gt;``````python# MarkdownElement can be used as follows too class HelloWorld(MarkdownElement):        def render(self):        return &quot;*hello world*&quot;# now HelloWorld instance gives the same # outputprint(HelloWorld())``````html&lt;p&gt;  &lt;em&gt;    hello world  &lt;/em&gt;&lt;/p&gt;```## using raw html with uidom elements```pythonfrom uidom.dom import *class Modal(Component):    def render(self, *args, **kwargs):        return '''&lt;div x-data=&quot;{ open: false }&quot;&gt;    &lt;!-- Button --&gt;    &lt;button x-on:click=&quot;open = true&quot; type=&quot;button&quot;        class=&quot;px-4 py-2 bg-white border border-black focus:outline-none focus:ring-4 focus:ring-aqua-400&quot;&gt;        Login    &lt;/button&gt;    &lt;!-- Modal --&gt;    &lt;div x-show=&quot;open&quot; x-on:keydown.escape.prevent.stop=&quot;open = false&quot; role=&quot;dialog&quot; aria-modal=&quot;true&quot;        x-id=&quot;['modal-title']&quot; :aria-labelledby=&quot;$id('modal-title')&quot; class=&quot;fixed inset-0 overflow-y-auto&quot;&gt;        &lt;!-- Overlay --&gt;        &lt;div x-show=&quot;open&quot; x-transition.opacity class=&quot;fixed inset-0 bg-black bg-opacity-50&quot;&gt;&lt;/div&gt;        &lt;!-- Panel --&gt;        &lt;div x-show=&quot;open&quot; x-transition x-on:click=&quot;open = false&quot;            class=&quot;relative flex items-center justify-center min-h-screen p-4&quot;&gt;            &lt;div x-on:click.stop x-trap.noscroll.inert=&quot;open&quot;                class=&quot;relative w-full max-w-2xl p-8 overflow-y-auto bg-white border border-black rounded-md&quot;&gt;               &lt;form wire:submit.prevent=&quot;login&quot; action=&quot;&quot; class=&quot;&quot;&gt;                   &lt;!-- Title --&gt;                &lt;h2 class=&quot;text-3xl font-medium&quot; :id=&quot;$id('modal-title')&quot;&gt;Confirm&lt;/h2&gt;                &lt;!-- Content --&gt;                &lt;div class=&quot;space-y-3&quot;&gt;                    &lt;div class=&quot;&quot;&gt;                        &lt;input wire:model.defer=&quot;email&quot; type=&quot;email&quot; class=&quot;w-full rounded-md&quot;&gt;                    &lt;/div&gt;                    &lt;div class=&quot;&quot;&gt;                        &lt;input wire:model.defer=&quot;password&quot; type=&quot;password&quot; class=&quot;w-full rounded-md&quot;&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;!-- Buttons --&gt;                &lt;div class=&quot;flex mt-8 space-x-2&quot;&gt;                    &lt;button  type=&quot;submit&quot; x-on:click=&quot;open = false&quot;                        class=&quot;px-4 py-2 bg-white border border-black focus:outline-none focus:ring-4 focus:ring-aqua-400&quot;&gt;                        Confirm                    &lt;/button&gt;                    &lt;button type=&quot;button&quot; x-on:click=&quot;open = false&quot;                        class=&quot;px-4 py-2 bg-white border border-black focus:outline-none focus:ring-4 focus:ring-aqua-400&quot;&gt;                        Cancel                    &lt;/button&gt;                &lt;/div&gt;               &lt;/form&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;'''```## LICENSE### this library is licensed under MIT (MIT-LICENSE)</longdescription>
</pkgmetadata>