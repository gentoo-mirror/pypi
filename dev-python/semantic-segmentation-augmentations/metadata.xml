<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>semantic_segmentation_augmentations================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;Data augmentation is a regularisation technique that generates newtraining samples from the original dataset by applying colour orgeometric transformations. Although this technique has been applied inother computer vision fields, such as image classification or objectdetection, the application of this technique in semantic segmentation isnot yet widespread.This library groups some data augmentation techniques for semanticaugmentation, such as `CutOut` or `CutMix`.# InstallTo install the library, run:``` shpip install semantic_segmentation_augmentations```# How it worksThis data augmentation techniques are defined as `fastai` `callbacks`.Given this fact, you need to train your models using `fastai`â€™s API touse them.As these techniques modifies the input image changing some pixelsregions for something else, those callbacks have been defined as theunion of two subcomponents: the[`HoleMakerTechnique`](https://ruescog.github.io/semantic_segmentation_augmentations/iholemakertechnique.html#holemakertechnique),that defines how to make the hole (how to select the region to replace)and the[`HolesFilling`](https://ruescog.github.io/semantic_segmentation_augmentations/iholesfilling.html#holesfilling),that defines how to fill the region defined below (the way to fill theregion gives the name to the technique used).The[`HoleMakerTechnique`](https://ruescog.github.io/semantic_segmentation_augmentations/iholemakertechnique.html#holemakertechnique)can be replaced in order to change the behavior of the selection of theregion to replace. Doing so, you can use a CutOut technique that selectthe region randomly or based on the information bounded in that region.You can also define your custom techniques defining how to fill a hole.You just need to extend the[`HolesFilling`](https://ruescog.github.io/semantic_segmentation_augmentations/iholesfilling.html#holesfilling)class and define the `before_bacth` (remember: we are using `callbacks`from `fastai`) abstract method. You will have two methods to simplifythe process: the `make_hole` function, that uses the selected[`HoleMakerTechnique`](https://ruescog.github.io/semantic_segmentation_augmentations/iholemakertechnique.html#holemakertechnique)to make the hole and returns two slices (the region boundaries) and the`fill_hole` function, that fills the hole with something.# How to use itIn order to use these techniques, you just need to define the `Learner`from `fastai` with the `Callbacks` that represent the techniques thatyou want to use.For example, if you want to create an `U-net` `Leaner` with `resnet18`backbone and use the CutOut technique with[`HoleMakerRandom`](https://ruescog.github.io/semantic_segmentation_augmentations/holemakerrandom.html#holemakerrandom)as region selection techinique (which is the default one), you just needto import it:``` shfrom semantic_segmentation_augmentations.holesfilling import CutOutRandom```And add it to your learner:``` shlearner = unet_learner(dls, resnet18, cbs = CutOutRandom(hole_maker = HoleMakerRandom()))```If you want to change the default behaviour of the CutOutRandomtechnique (i. e. to select the region with a[`HoleMakerAttention`](https://ruescog.github.io/semantic_segmentation_augmentations/holemakerattention.html#holemakerattention)technique), you just need to define the technique as follows:``` shlearner = unet_learner(dls, resnet18, cbs = CutOutRandom(hole_maker = HoleMakerAttention(attention_threshold = 0.25, hole_size = (150, 150))))```Finally, you can apply geometrical augments to the selected regions(using the `Albumentations` augments). Maybe this augmnets are notuseful with the `CutOut` techniques, but with the `CutMix` ones. Inorder to do so, you just need to implement a[`RegionModifier`](https://ruescog.github.io/semantic_segmentation_augmentations/regionmodifier.html#regionmodifier)with a list with the augments to apply:``` shlearner = unet_learner( dls,                        resnet18,                        cbs = CutMixRandom( holes_num = 1,                                            modifier = RegionModifier(A.Compose([A.Blur(), A.GaussNoise()])),                                            hole_maker = HoleMakerRandom((250, 250)),                                            p = 1                        )                      )```</longdescription>
</pkgmetadata>