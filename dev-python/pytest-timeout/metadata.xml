<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============pytest-timeout==============|python| |version| |anaconda| |ci| |pre-commit|.. |version| image:: https://img.shields.io/pypi/v/pytest-timeout.svg  :target: https://pypi.python.org/pypi/pytest-timeout.. |anaconda| image:: https://img.shields.io/conda/vn/conda-forge/pytest-timeout.svg  :target: https://anaconda.org/conda-forge/pytest-timeout.. |ci| image:: https://github.com/pytest-dev/pytest-timeout/workflows/build/badge.svg  :target: https://github.com/pytest-dev/pytest-timeout/actions.. |python| image:: https://img.shields.io/pypi/pyversions/pytest-timeout.svg  :target: https://pypi.python.org/pypi/pytest-timeout/.. |pre-commit| image:: https://results.pre-commit.ci/badge/github/pytest-dev/pytest-timeout/master.svg   :target: https://results.pre-commit.ci/latest/github/pytest-dev/pytest-timeout/master.. warning::   Please read this README carefully and only use this plugin if you   understand the consequences.  This plugin is designed to catch   excessively long test durations like deadlocked or hanging tests,   it is not designed for precise timings or performance regressions.   Remember your test suite should aim to be **fast**, with timeouts   being a last resort, not an expected failure mode.This plugin will time each test and terminate it when it takes toolong.  Termination may or may not be graceful, please see below, butwhen aborting it will show a stack dump of all thread running at thetime.  This is useful when running tests under a continuousintegration server or simply if you don't know why the test suitehangs... note::   While by default on POSIX systems pytest will continue to execute   the tests after a test has timed out this is not always possible.   Often the only sure way to interrupt a hanging test is by   terminating the entire process.  As this is a hard termination   (``os._exit()``) it will result in no teardown, JUnit XML output   etc.  But the plugin will ensure you will have the debugging output   on stderr nevertheless, which is the most important part at this   stage.  See below for detailed information on the timeout methods   and their side-effects.The pytest-timeout plugin has been tested on Python 3.6 and higher,including PyPy3.  See tox.ini for currently tested versions.Usage=====Install is as simple as e.g.::   pip install pytest-timeoutNow you can run the test suite while setting a timeout in seconds, anyindividual test which takes longer than the given duration will beterminated::   pytest --timeout=300Furthermore you can also use a decorator to set the timeout for anindividual test.  If combined with the ``--timeout`` flag this willoverride the timeout for this individual test:.. code:: python   @pytest.mark.timeout(60)   def test_foo():       passBy default the plugin will not time out any tests, you must specify avalid timeout for the plugin to interrupt long-running tests.  Atimeout is always specified as a number of seconds, and can bedefined in a number of ways, from low to high priority:1. You can set a global timeout in the `pytest configuration file`__   using the ``timeout`` option.  E.g.:   .. code:: ini      [pytest]      timeout = 3002. The ``PYTEST_TIMEOUT`` environment variable sets a global timeout   overriding a possible value in the configuration file.3. The ``--timeout`` command line option sets a global timeout   overriding both the environment variable and configuration option.4. Using the ``timeout`` marker_ on test items you can specify   timeouts on a per-item basis:   .. code:: python      @pytest.mark.timeout(300)      def test_foo():          pass__ https://docs.pytest.org/en/latest/reference.html#ini-options-ref.. _marker: https://docs.pytest.org/en/latest/mark.htmlSetting a timeout to 0 seconds disables the timeout, so if you have aglobal timeout set you can still disable the timeout by using themark.Timeout Methods===============Interrupting tests which hang is not always as simple and can beplatform dependent.  Furthermore some methods of terminating a testmight conflict with the code under test itself.  The pytest-timeoutplugin tries to pick the most suitable method based on your platform,but occasionally you may need to specify a specific timeout methodexplicitly.   If a timeout method does not work your safest bet is to use the   *thread* method.thread------This is the surest and most portable method.  It is also the defaulton systems not supporting the *signal* method.  For each test item thepytest-timeout plugin starts a timer thread which will terminate thewhole process after the specified timeout.  When a test item finishesthis timer thread is cancelled and the test run continues.The downsides of this method are that there is a relatively largeoverhead for running each test and that test runs are not completed.This means that other pytest features, like e.g. JUnit XML output orfixture teardown, will not function normally.  The second issue mightbe alleviated by using the ``--boxed`` option of the pytest-xdist_plugin... _pytest-xdist: https://pypi.org/project/pytest-xdist/The benefit of this method is that it will always work.  Furthermoreit will still provide you debugging information by printing the stacksof all the threads in the application to stderr.signal------If the system supports the SIGALRM signal the *signal* method will beused by default.  This method schedules an alarm when the test itemstarts and cancels the alarm when the test finishes.  If the alarm expiresduring the test the signal handler will dump the stack of any other threadsrunning to stderr and use ``pytest.fail()`` to interrupt the test.The benefit of this method is that the pytest process is notterminated and the test run can complete normally.The main issue to look out for with this method is that it mayinterfere with the code under test.  If the code under test usesSIGALRM itself things will go wrong and you will have to choose the*thread* method.Specifying the Timeout Method-----------------------------The timeout method can be specified by using the ``timeout_method``option in the `pytest configuration file`__, the ``--timeout_method``command line parameter or the ``timeout`` marker_.  Simply set theirvalue to the string ``thread`` or ``signal`` to override the defaultmethod.  On a marker this is done using the ``method`` keyword:.. code:: python   @pytest.mark.timeout(method=&quot;thread&quot;)   def test_foo():       pass__ https://docs.pytest.org/en/latest/reference.html#ini-options-ref.. _marker: https://docs.pytest.org/en/latest/mark.htmlThe ``timeout`` Marker API==========================The full signature of the timeout marker is:.. code:: python   pytest.mark.timeout(timeout=0, method=DEFAULT_METHOD)You can use either positional or keyword arguments for both thetimeout and the method.  Neither needs to be present.See the marker api documentation_ and examples_ for the various waysmarkers can be applied to test items... _documentation: https://docs.pytest.org/en/latest/mark.html.. _examples: https://docs.pytest.org/en/latest/example/markers.html#marking-whole-classes-or-modulesTimeouts in Fixture Teardown============================The plugin will happily terminate timeouts in the finalisers offixtures.  The timeout specified applies to the entire process ofsetting up fixtures, running the tests and finalising the fixtures.However when a timeout occurs in a fixture finaliser and the testsuite continues, i.e. the signal method is used, it must be realisedthat subsequent fixtures which need to be finalised might not havebeen executed, which could result in a broken test-suite anyway.  Incase of doubt the thread method which terminates the entire processmight result in clearer output.Avoiding timeouts in Fixtures=============================The timeout applies to the entire test including any fixtures whichmay need to be setup or torn down for the test (the exact affectedfixtures depends on which scope they are and whether other tests willstill use the same fixture).  If the timeouts really are too short toinclude fixture durations, firstly make the timeouts larger ;).  Ifthis really isn't an option a ``timeout_func_only`` boolean settingexists which can be set in the pytest ini configuration file, asdocumented in ``pytest --help``.Debugger Detection==================This plugin tries to avoid triggering the timeout when a debugger isdetected.  This is mostly a convenience so you do not need to rememberto disable the timeout when interactively debugging.The way this plugin detects whether or not a debugging session isactive is by checking if a trace function is set and if one is, itcheck to see if the module it belongs to is present in a set of knowndebugging frameworks modules OR if pytest itself drops you into a pdbsession using ``--pdb`` or similar.This functionality can be disabled with the ``--disable-debugger-detection`` flagor the corresponding ``timeout_disable_debugger_detection`` ini setting / environmentvariable.Extending pytest-timeout with plugins=====================================``pytest-timeout`` provides two hooks that can be used for extending the tool.  Thesehooks are used for setting the timeout timer and cancelling it if the timeout is notreached.For example, ``pytest-asyncio`` can provide asyncio-specific code that generates bettertraceback and points on timed out ``await`` instead of the running loop iteration.See `pytest hooks documentation&lt;https://docs.pytest.org/en/latest/how-to/writing_hook_functions.html&gt;`_ for more inforegarding to use custom hooks.``pytest_timeout_set_timer``----------------------------.. code:: python   @pytest.hookspec(firstresult=True)   def pytest_timeout_set_timer(item, settings):       &quot;&quot;&quot;Called at timeout setup.       'item' is a pytest node to setup timeout for.       'settings' is Settings namedtuple (described below).       Can be overridden by plugins for alternative timeout implementation strategies.       &quot;&quot;&quot;``Settings``------------When ``pytest_timeout_set_timer`` is called, ``settings`` argument is passed.The argument has ``Settings`` namedtuple type with the following fields:+-----------+-------+--------------------------------------------------------+|Attribute  | Index | Value                                                  |+===========+=======+========================================================+| timeout   | 0     | timeout in seconds or ``None`` for no timeout          |+-----------+-------+--------------------------------------------------------+| method    | 1     | Method mechanism,                                      ||           |       | ``'signal'`` and ``'thread'`` are supported by default |+-----------+-------+--------------------------------------------------------+| func_only | 2     | Apply timeout to test function only if ``True``,       ||           |       |  wrap all test function and its fixtures otherwise     |+-----------+-------+--------------------------------------------------------+``pytest_timeout_cancel_timer``-------------------------------.. code:: python   @pytest.hookspec(firstresult=True)   def pytest_timeout_cancel_timer(item):       &quot;&quot;&quot;Called at timeout teardown.       'item' is a pytest node which was used for timeout setup.       Can be overridden by plugins for alternative timeout implementation strategies.       &quot;&quot;&quot;``is_debugging``----------------When the timeout occurs, user can open the debugger session. In this case, the timeoutshould be discarded.  A custom hook can check this case by calling ``is_debugging()``function:.. code:: python   import pytest   import pytest_timeout   def on_timeout():       if pytest_timeout.is_debugging():           return       pytest.fail(&quot;+++ Timeout +++&quot;)Changelog=========2.2.0------ Add ``--timeout-disable-debugger-detection`` flag, thanks  Michael Peters2.1.0------ Get terminal width from shutil instead of deprecated py, thanks  Andrew Svetlov.- Add an API for extending ``pytest-timeout`` functionality  with third-party plugins, thanks Andrew Svetlov.2.0.2------ Fix debugger detection on OSX, thanks Alexander Pacha.2.0.1------ Fix Python 2 removal, thanks Nicusor Picatureanu.2.0.0------ Increase pytest requirement to &gt;=5.0.0.  Thanks Dominic Davis-Foster.- Use thread timeout method when plugin is not called from main  thread to avoid crash.- Fix pycharm debugger detection so timeouts are not triggered during  debugger usage.- Dropped support for Python 2, minimum pytest version supported is 5.0.0.1.4.2------ Fix compatibility when run with pytest pre-releases, thanks  Bruno Oliveira,- Fix detection of third-party debuggers, thanks Bruno Oliveira.1.4.1------ Fix coverage compatibility which was broken by 1.4.0.1.4.0------ Better detection of when we are debugging, thanks Mattwmaster58.1.3.4------ Give the threads a name to help debugging, thanks Thomas Grainger.- Changed location to https://github.com/pytest-dev/pytest-timeout  because bitbucket is dropping mercurial support.  Thanks Thomas  Grainger and Bruno Oliveira.1.3.3------ Fix support for pytest &gt;= 3.10.1.3.2------ This changelog was omitted for the 1.3.2 release and was added  afterwards.  Apologies for the confusion.- Fix pytest 3.7.3 compatibility.  The capture API had changed  slightly and this needed fixing.  Thanks Bruno Oliveira for the  contribution.1.3.1------ Fix deprecation warning on Python 3.6.  Thanks Mickaël Schoentgen- Create a valid tag for the release.  Somehow this didn't happen for  1.3.0, that tag points to a non-existing commit.1.3.0------ Make it possible to only run the timeout timer on the test function  and not the whole fixture setup + test + teardown duration.  Thanks  Pedro Algarvio for the work!- Use the new pytest marker API, Thanks Pedro Algarvio for the work!1.2.1------ Fix for pytest 3.3, thanks Bruno Oliveira.- Update supported python versions:  - Add CPython 3.6.  - Drop CPyhon 2.6 (as did pytest 3.3)  - Drop CPyhon 3.3  - Drop CPyhon 3.41.2.0-----* Allow using floats as timeout instead of only integers, thanks Tom  Myers.1.1.0-----* Report (default) timeout duration in header, thanks Holger Krekel.1.0.0-----* Bump version to 1.0 to commit to semantic versioning.* Fix issue #12: Now compatible with pytest 2.8, thanks Holger Krekel.* No longer test with pexpect on py26 as it is no longer supported* Require pytest 2.8 and use new hookimpl decorator0.5---* Timeouts will no longer be triggered when inside an interactive pdb  session started by ``pytest.set_trace()`` / ``pdb.set_trace()``.* Add pypy3 environment to tox.ini.* Transfer repository to pytest-dev team account.0.4---* Support timeouts happening in (session scoped) finalizers.* Change command line option --timeout_method into --timeout-method  for consistency with pytest0.3---* Added the PYTEST_TIMEOUT environment variable as a way of specifying  the timeout (closes issue #2).* More flexible marker argument parsing: you can now specify the  method using a positional argument.* The plugin is now enabled by default.  There is no longer a need to  specify ``timeout=0`` in the configuration file or on the command  line simply so that a marker would work.0.2---* Add a marker to modify the timeout delay using a @pytest.timeout(N)  syntax, thanks to Laurant Brack for the initial code.* Allow the timeout marker to select the timeout method using the  ``method`` keyword argument.* Rename the --nosigalrm option to --method=thread to future proof  support for eventlet and gevent.  Thanks to Ronny Pfannschmidt for  the hint.* Add ``timeout`` and ``timeout_method`` items to the configuration  file so you can enable and configure the plugin using the ini file.  Thanks to Holger Krekel and Ronny Pfannschmidt for the hints.* Tested (and fixed) for python 2.6, 2.7 and 3.2.</longdescription>
</pkgmetadata>