<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![](https://codecov.io/gh/nickderobertis/pypi-sphinx-quickstart/branch/master/graph/badge.svg)](https://codecov.io/gh/nickderobertis/pypi-sphinx-quickstart)# pypi-sphinx-quickstart## OverviewThis repo is a template to use for starting a new Python packagewhich is hosted on PyPi and uses Sphinx for documentationhosted on Github pages. It has a built-in CI/CD system using Github Actions,all you need to do for that is hook up the secrets. The CI system hasthe following features:- Runs any tests in `tests` with `pytest`- Lints code using `flake8`- Static code checks with `mypy`- Deploys PyPI package- Deploys Sphinx documentation on Github Pages    - Autodoc/autosummary already set up    - Automatic sitemap.xml generated    - Just add Google Analytics ID to enable tracking    - Read the Docs Theme with Custom CSS    - Notebook-style examples with Sphinx Gallery complete with download and Binder links        - Auto-converts Jupyter notebooks in `nbexamples`- Auto-merges pull requests by maintainers- Auto-drafts release notes based on merged pull requests- Syncs new changes from the cookiecutter template using `cruft`on a cron workflow. Creates a PR with the changes to be mergedmanually. Creates an issue if it is not possible to commit the changes (when there arechanges to workflow files).- Collects TODO comments and converts them into issues (optional)- Closes TODO issues once comments are removed (optional)## Getting Started### Required StepsFollow the steps in one of the two ways to start, then the following steps.#### Two Ways to Start##### CookiecutterThis template is available as a [cookiecutter](https://github.com/cookiecutter/cookiecutter).Find [the cookiecutter for this template here](https://github.com/nickderobertis/cookiecutter-pypi-sphinx).This is the recommended way to get started if you are already familiar with howeverything works. No example files will be included.##### Repo TemplateClick the &quot;Use this template&quot; button at the top of the repo page, thenfill out the name and description your new repo. This is the recommended way to getstarted if you are figuring out how everything works as it gives you a fullyworking demo with example files.#### Adding SecretsGo into the repo settings, under Secrets, and add the following secrets:- `pypi_password`: Personal token for PyPI- `gh_token`: Github personal access token- `CODECOV_TOKEN` (optional): [codecov.io](https://codecov.io) token for this project- `TODO_ACTIONS_MONGO_URL` (optional): MongoDB connection url, complete withusername and password. See [Setup MongoDB](#setup-mongodb-optional-for-todo-integration).#### `conf.py`Edit `conf.py` in the main repo directory. This contains the mainsettings for the PyPi package. If you used the repo template, you will need to changeall the settings. Otherwise, the `cookiecutter` will have filled out most of the settings,but specific package details such as dependenciesstill need to be added.#### Adding Project SourceDelete the folder `py_qs_example`, and add your own packagewith the name you set in `conf.PACKAGE_NAME`.#### Adding Global Requirements to BuildIf you do not already have `pipenv` installed, you will need to run:```pip install pipenv```Then regardless of whether you already had `pipenv` installed, you willneed to navigate to the repo folder and run:```pipenv update```#### Setting up DocumentationIf you used the repo template, edit `docsrc/Makefile` to change `SPHINXPROJ` to set it to the nameyou set in `conf.PACKAGE_NAME` (with `cookiecutter` this step is not necessary.)Edit `docsrc/source/index.rst` to remove the example included files. Replacewith your own if you wish or entirely delete the My Module andMy Package sections if don't wish to use the autosummary directive.Edit `docsrc/source/tutorial.rst` to put your own tutorial, or remove itand remove it from the `toctree` directive in `docsrc/source/index.rst`.You may further modify Sphinx configuration in `docsrc/source/conf.py`if you wish.Add [Sphinx Gallery](https://sphinx-gallery.github.io/stable/index.html) examplesin the `examples` folder. You can also add Jupyter notebook examples in the`nbexamples` folder, and they will automatically be converted toSphinx Gallery-style examples and included with `examples` in thebuild of the documentation.#### Adding LabelsThe following labels are used in the CI/CD. They should be added in Labels in therepo settings:- `no auto merge`: added to prevent automatic merging ofpull requests by maintainers- `maintenance`: one of the output categories for release notes- `automated pr`: Used by automated template update cron workflow whichuses `cruft` to check for changes in the template and opens a PRautomatically if so.- `automated issue`: Due to limitations in Github Actions, the template updatecron workflow is not able to commit to the repo if the changes include changes toworkflow files. It instead raises an issue to update the template in this case. Thislabel is applied to these issues as well as the `maintenance` label.#### Commit and PushAfter the preceding steps, now commit your changes and push to `master`if not done already. After a few minutes, Github Actions should createa `gh-pages` branch which has the documentation HTML in it.#### Github Pages SetupNote: This should happen automatically after Github Actions createsthe `gh-pages` branch. But follow these steps if your docs still donot work.Go to repo settings, Github Pages section. For the Source dropdown,select &quot;gh-pages branch&quot;. The settings page should reload,and in the Github Pages section it should show the URL of yourdocumentation. You should be able to see the documentation at the URLafter a few seconds, but it will still be the example documentation.If &quot;gh-pages branch&quot; is not shown in the dropdown, you need to make onerelease commit and push it, so that the `gh-pages` branch will be addedto your repo. After doing that, you can go into the repo settingsand select &quot;gh-pages branch&quot; as described.### Optional Steps#### Set Master to Protected BranchIt is recommended to make master a protected branch so that nobody candelete it.#### Setup CodecovGo to [codecov.io](https://codecov.io), log in via Github, click Repositories then&quot;Add new repository&quot; and select this repository from the list. Copy thetoken for Codecov to use in the next step.#### Setup MongoDB (optional, for TODO integration)For the TODO integration to work, you need a MongoDB instance. You canget one for free at [mlab.com](https://mlab.com). After creating the database,create a database user. The MLab interface will show you the formatof the connection url string, which you will fill in the database user'susername and password and use that as the `TODO_ACTIONS_MONGO_URL` secret,as the [Adding Secrets](#adding-secrets) section shows.## Built-in CI/CD### On Every PushGithub Actions are used to automatically run the following steps on every push:- Check Python syntax with `flake8`- Run `pytest`- Static typing checks with `mypy`### When Branch is `master`If the branch is the `master` branch, then it will also:- Upload `pytest` results to `codecov`#### If there is a change in `docsrc`If the branch is the master branch, and there was a change in `docsrc`, it will doall the steps in On Every Push and When Branch is `master`, then it will:- Build documentation HTML using Sphinx- Create `gh-pages` branch and copy HTML there- Push to `gh-pages` branch, which will update the hosted documentation#### If there is a change in the package versionIf the branch is the master branch, and there was a change in the package versionin `conf.py`, it will doall the steps in On Every Push and When Branch is `master`, then it will:- Build documentation HTML using Sphinx- Create `gh-pages` branch and copy HTML there- Push to `gh-pages` branch, which will update the hosted documentation- Build Python package- Upload Python package to PyPI### If a Pull Request is OpenedThe CI/CD system will check whether the pull request was opened by a maintainer(configured in conf.py). If so, it will auto-merge the pull request afterit has passed CI checks. It will then run the deployment pipeline. To avoidthis auto-merge behavior, add the label &quot;no auto merge&quot; to the pull request.## Regular UsageOnce everything is set up, just commit your changes. The built-inCI/CD will take care of testing, build, and deployment of PyPI packageand documentation. If you use pull requests on Github then it willshow you whether it passes the CI tests.### ReleasesIf you want to create Github releases notes for your package, theywill already be drafted, just edit them as desired before posting.## Local UsageBuilding the documentation locally makes sense if you areupdating it but don't want to make it live yet. You can viewthe HTML files in the `docs` folder via a browser after building them.### Building DocumentationNavigate into the `docsrc` folder and run:```pipenv run make github```This should generate documentation HTML in the `docs` folder.### Uploading to PyPiNavigate to the repo base folder and run:```pipenv run python upload.py```### Updating Build RequirementsThe Github Actions CI/CD uses `Pipfile.lock` to install itsrequirements. Run `pipenv update` locally to update the`Pipfile.lock` with the newest dependencies and push intothe `master` branch to get the dependencies updatedon the CI/CD system.### Syncing with the `cookiecutter` templateThere is a built-in workflow which runs daily to check forupdates in the `cookiecutter` template. If it finds an update,it will use `cruft` to apply the update and raise a PR with thechanges. Manually review the changes, adjusting if needed, thenmerge the PR to keep updated with the template.## LinksSee the example[generated documentation here.](https://nickderobertis.github.io/pypi-sphinx-quickstart/)</longdescription>
</pkgmetadata>