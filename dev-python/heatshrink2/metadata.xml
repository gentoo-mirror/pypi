<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyHeatshrink============Compression using the `Heatshrink algorithm&lt;https://github.com/atomicobject/heatshrink&gt;`__ in Python 3.Installation------------From PyPI:.. code-block::   $ pip install heatshrink2Usage-----Files/Streams^^^^^^^^^^^^^The file interface attempts to imitate the behaviour of the built-in`file` object and other file-like objects (E.g. :code:`bz2.BZ2File`),thus you can expect all methods implemented in :code:`file` to also beavailable.You can open a heatshrink file by using the :code:`open` function:.. code-block:: python   &gt;&gt;&gt; import heatshrink2   &gt;&gt;&gt; with heatshrink2.open('data.bin', 'wb') as fout:   ...     fout.write(b&quot;Is there anybody in there?&quot;)   ...   26   &gt;&gt;&gt;You can also use :code:`HeatshrinkFile` directly:.. code-block:: python   &gt;&gt;&gt; from heatshrink2 import HeatshrinkFile   &gt;&gt;&gt; with HeatshrinkFile('data.bin') as fin:   ...     print(fin.read(256))   ...   b'Is there anybody in there?'   &gt;&gt;&gt; with HeatshrinkFile('data.bin') as fin:   ...     for line in fin:   ...         print(line)   ...   b'Is there anybody in there?'   &gt;&gt;&gt;Byte strings^^^^^^^^^^^^The encoder accepts any iterable and returns a byte stringcontaining encoded (compressed) data... code-block:: python   &gt;&gt;&gt; import heatshrink2   &gt;&gt;&gt; heatshrink2.compress(b'a string')   b'\xb0\xc8.wK\x95\xa6\xddg'   &gt;&gt;&gt;The decoder accepts any object that implements the buffer protocol andreturns a byte representation of the decoded data... code-block:: python   &gt;&gt;&gt; import heatshrink2   &gt;&gt;&gt; heatshrink2.decompress(b'\xb0\xc8.wK\x95\xa6\xddg')   b'a string'   &gt;&gt;&gt;Parameters^^^^^^^^^^Both the encoder and decoder allow providing :code:`window_sz2` and:code:`lookahead_sz2` keywords::code:`window_sz2` - The window size determines how far back in theinput can be searched for repeated patterns. A window_sz2 of 8 willonly use 256 bytes (2^8), while a window_sz2 of 10 will use 1024 bytes(2^10). The latter uses more memory, but may also compress moreeffectively by detecting more repetition.:code:`lookahead_sz2` - The lookahead size determines the max lengthfor repeated patterns that are found. If the lookahead_sz2 is 4, a50-byte run of 'a' characters will be represented as several repeated16-byte patterns (2^4 is 16), whereas a larger lookahead_sz2 may beable to represent it all at once. The number of bits used for thelookahead size is fixed, so an overly large lookahead size can reducecompression by adding unused size bits to small patterns.:code:`input_buffer_size` - How large an input buffer to use for thedecoder. This impacts how much work the decoder can do in a singlestep, and a larger buffer will use more memory. An extremely smallbuffer (say, 1 byte) will add overhead due to lots of suspend/resumefunction calls, but should not change how well data compresses.Check out the `heatshrink configuration page&lt;https://github.com/atomicobject/heatshrink#configuration&gt;`__ for moredetails.For more use cases, please refer to the `tests folder&lt;https://github.com/eerimoq/pyheatshrink/blob/master/tests&gt;`__.Command line------------The command line tool can compress and decompress files.Below is an example of the compress and decompress subcommands... code-block::   $ ls -l tests/files/foo.txt   -rw-rw-r-- 1 erik erik 3970 jan  5 12:23 tests/files/foo.txt   $ python -m heatshrink2 compress tests/files/foo.txt foo.hs   $ ls -l foo.hs   -rw-rw-r-- 1 erik erik 2727 jan  5 12:24 foo.hs   $ python -m heatshrink2 decompress foo.hs foo.txt   $ cmp tests/files/foo.txt foo.txtBenchmarks----------The benchmarks check compression/decompression against a ~6MB file:.. code-block::   $ python scripts/benchmark.pyTesting-------Running tests is as simple as doing:.. code-block::    $ python setup.py build_ext -b .    $ python -m unittestLicense-------ISC license</longdescription>
</pkgmetadata>