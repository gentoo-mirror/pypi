<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CompactData Python LibraryA Python library for parsing and serialising data in the CompactData format. CompactData is a compact data serialisation format that prioritises efficiency of data storage and transport. It is well suited for use cases where efficient data storage and transport is a priority.## Features- Parse CompactData strings into Python objects- Serialise Python objects into CompactData strings- Compatible with Python 3.6 and higher## InstallationTo install the CompactData Python library, use the following command:```shpip install compactdata```## Usage### Parsing CompactData stringsTo parse a CompactData string into a Python object, use the `compactdata.loads()` function:```pythonimport compactdatacompactdata_string = &quot;my_object=(string=`abc`;number=1;array=[1;2;3];map=(a=1;b=2;c=3))&quot;parsed_object = compactdata.loads(compactdata_string)print(parsed_object)# Output: {'my_object': {'string': 'abc', 'number': 1, 'array': [1, 2, 3], 'map': {'a': 1, 'b': 2, 'c': 3}}}```### Serialising Python objectsTo serialise a Python object into a CompactData string, use the `compactdata.dumps()` function:```pythonimport compactdatapython_object = {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: 2}compactdata_string = compactdata.dumps(python_object)print(compactdata_string)# Output: (key1=value1;key2=2)```## ExamplesHere are some examples of parsing and serialising different CompactData strings and Python objects:```pythonimport compactdata# Parsing CompactData stringscompactdata_strings = [    &quot;my_object=(string=`abc`;number=1;array=[1;2;3];map=(a=1;b=2;c=3))&quot;,    &quot;[1;2;3]&quot;,    &quot;a=1;b=2.5;c=10e3&quot;,    &quot;@dv=1;salts=[(s=salts.domainverification.org;ids=[342c208d-0523-4d22-b7dd-32952dbeace2]);(s=example.com;ids=[90797a69-205b-4a35-88fe-8a186392ea15])]&quot;,]for compactdata_string in compactdata_strings:    print(compactdata.loads(compactdata_string))    # Output:# {'my_object': {'string': 'abc', 'number': 1, 'array': [1, 2, 3], 'map': {'a': 1, 'b': 2, 'c': 3}}}# [1, 2, 3]# {'a': 1, 'b': 2.5, 'c': 10000.0}# {'@dv': 1, 'salts': [{'s': 'salts.domainverification.org', 'ids': ['342c208d-0523-4d22-b7dd-32952dbeace2']}, {'s': 'example.com', 'ids': ['90797a69-205b-4a35-88fe-8a186392ea15']}]}# Serialising Python objectspython_objects = [    [1, 2, 3, &quot;123&quot;],    {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: 2},    &quot;string_value&quot;,    123,    [1, {&quot;k&quot;: &quot;v&quot;}, 2],]for python_object in python_objects:    print(compactdata.dumps(python_object))# Output:# [1;2;3;123]# (key1=value1;key2=2)# string_value# 123# [1;(k=v);2]```## LicenseThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.## Support and ContributionsIf you encounter any issues or have feature requests, please [open an issue](https://github.com/NUMtechnology/compactdata-python/issues) on GitHub. Contributions to this project are welcome. To contribute, please fork the repository, make your changes, and submit a pull request.For more information about the CompactData format, visit the official website at https://compactdata.org.</longdescription>
</pkgmetadata>