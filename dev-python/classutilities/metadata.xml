<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Class utilitiesAuthor: David Salac &lt;https://github.com/david-salac&gt;Simple package with helpful utilities for classes.That includes class level properties and filters forconfiguration classes.**Note:** this package does not require any external dependencies.## How to install packageUse PIP command:```pip install classutilities```## How to use class level propertiesClass level properties are properties defined onclass level. They behave exactly the same asnormal properties (but allow being called onclass level and not only on instance level).Consider the following example (defining classlevel properties):```pythonimport classutilitiesclass SomeClass(classutilities.ClassPropertiesMixin):    _some_variable = 8  # Some class variable    @classutilities.classproperty    def some_variable(cls):  # Example of getter        return cls._some_variable    @some_variable.setter    def some_variable(cls, value):  # Example of setter        cls._some_variable = value````ClassPropertiesMixin` allows you to use a setter forproperties. However, if you only need a getter, it willwork even without this mixin.Usage of class-level properties:```python# Getter:value = SomeClass.some_variableprint(value)  # &gt;&gt;&gt; 8# Setter:new_value = 9SomeClass.some_variable = new_valueprint(SomeClass.some_variable)  # &gt;&gt;&gt; 9print(SomeClass._some_variable)  # &gt;&gt;&gt; 9```As you can see, class-level properties behave verynaturally.## Configuration classesConfiguration classes usually follow standard patterns, mainly: - All members have to be upper case (if they do not start   with an underscore). - There is no constructor in the class. - There is no standard (instance) method in the class. Only   class methods and static methods are allowed.It is beneficial to have some validator for a configurationclass that checks if all these conditions are followed.This is precisely what ConfigClassMixin does. Considerthe following use-case:```pythonimport classutilitiesclass SomeConfigClass(classutilities.ConfigClassMixin):    # This is OK:    DATABASE_HOST = &quot;localhost&quot;  # OK: variable name in uppercase    DATABASE_NAME = &quot;testing&quot;  # OK: variable name in uppercase    # ...        # This is NOT OK (class variables must be uppercase):    database_password = &quot;pass&quot;  # NO: must not be lowercase        # This is OK (underscore on the beginning):    _api_version = &quot;1.0.0&quot;  # OK: starts with an underscore        # This is OK:    @classmethod    def connect_to_database(cls):  # Class methods are acceptable        return ...        # This is OK:    @staticmethod    def check_status():  # Static methods are acceptable        return ...        # This is NOT OK:    def check_parameters(self):  # No instance-level methods        return ...```Mixin `ConfigClassMixin` can be used together withmixin for class-level properties. Class level propertiesare also acceptable (this filter allows them).</longdescription>
</pkgmetadata>