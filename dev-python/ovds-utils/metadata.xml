<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IntroductionOVDS-Utils is a python library implementing classes and wrapers with easier to comprehend interfaces to [openvds](https://community.opengroup.org/osdu/platform/domain-data-mgmt-services/seismic/open-vds).## Examples are: * VDS class implementing ``__getitem__`` method for easy data read out and many others feature to make life easier.## To install:Run ``pip install ovds-utils`` or execute ``python setup.py install`` in the source directory## Creating and reading VDS source exampleYou can easily create and access the VDS source/file by simply creating a VDS class instance and using ``__getitem__`` method to read data.```pythonimport numpy as npfrom ovds_utils.ovds.enums import BrickSizesfrom ovds_utils.vds import VDSshape = (251, 51, 126)data = np.random.rand(*shape).astype(np.float32)vds = VDS(    path=&quot;example.vds&quot;,    connection_string=&quot;&quot;,    shape=shape,    data=data,    databrick_size=BrickSizes.BrickSize_128)print(vds[:10,0,0])&gt;&gt;&gt; [0.14836921 0.06490713 0.05770212 0.2364456  0.49000826 0.1573576 0.5017615  0.456749   0.6573513  0.72831243]```## Writing to VDS source chunk by chunk```pythonimport numpy as npfrom ovds_utils.metadata import MetadataTypes, MetadataValuefrom ovds_utils.ovds.enums import BrickSizes, Formatsfrom ovds_utils.vds import VDS, Channel, Components, Formatsmetadata = {    &quot;example&quot;: MetadataValue(value=&quot;value&quot;, category=&quot;category#1&quot;, type=MetadataTypes.String)}shape = (251, 51, 126)data = np.random.rand(*shape).astype(np.float64)zeros = np.zeros(shape, dtype=np.float64)vds = VDS(    &quot;example.vds&quot;,    data=zeros,    metadata_dict=metadata,    databrick_size=BrickSizes.BrickSize_64,    channels=[        Channel(            name=&quot;Channel0&quot;,            format=Formats.R64,            unit=&quot;unitless&quot;,            value_range_min=0.0,            value_range_max=1000.0,            components=Components.Components_1        )    ])for c in vds.channel(0).chunks():    c[:, :, :] = data[c.slices]    c.release()vds.channel(0).commit()print(vds[:10,0,0])&gt;&gt;&gt; [0.14836921 0.06490713 0.05770212 0.2364456  0.49000826 0.1573576 0.5017615  0.456749   0.6573513  0.72831243]```## Links* https://pypi.org/project/ovds-utils/</longdescription>
</pkgmetadata>