<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OverviewThe `dbnd-mlflow` plugin allows storing [mlflow](https://github.com/mlflow/mlflow) metrics to DBND tracker together with duplicating them to the mlflow store.# Install```bashpip install dbnd-mlflow# orpip install databand[mlflow]```# Config```ini[core]# Databand store url should be defineddataband_url=http://localhost:8080[mlflow_tracking]# Enable tracking to Databand storedataband_tracking=True# Optionally, define a URI for mlflow store,# mlflow.get_tracking_uri() is used by default; duplicate_tracking_to=http://mlflow-store/```# Run exampleYou might need to install examples at first `pip install dbnd-examples`.```bashdbnd run dbnd_examples.tracking.tracking_mlflow.task_with_mflow# or set configs manuallydbnd run dbnd_examples.tracking.tracking_mlflow.task_with_mflow --set-config mlflow_tracking.databand_tracking=True```# Explanation&lt;details&gt;&lt;summary&gt;mlflow_example code&lt;/summary&gt;&lt;p&gt;```pythonfrom dbnd import taskfrom mlflow import start_run, end_runfrom mlflow import log_metric, log_param@taskdef mlflow_example():    start_run()    # params    log_param(&quot;param1&quot;, randint(0, 100))    log_param(&quot;param2&quot;, randint(0, 100))    # metrics    log_metric(&quot;foo1&quot;, random())    log_metric(&quot;foo2&quot;, random())    end_run()```&lt;/p&gt;&lt;/details&gt;## Execution flow:1. Run `dbnd run mlflow_example --set-config mlflow_tracking.databand_tracking=True`2. dbnd creates a new dbnd context3. `dbnd_on_pre_init_context` hook from `dbnd_mlflow` is triggered    - a new uri is computed to be used by mlflow, e.g.:        - `dbnd://localhost:8080?duplicate_tracking_to=http%253A%252F%252Fmlflow-store%253A80%252F`    - the new uri is set to be used with `mlflow.set_tracking_uri()`4. `mlflow_example` task starts:    1. `mlflow.start_run()`        1. `mlflow` reads `entry_points` for each installed package and finds:            - &quot;dbnd = dbnd_mlflow.tracking_store:get_dbnd_store&quot;,            - &quot;dbnd+s = dbnd_mlflow.tracking_store:get_dbnd_store&quot;,            - &quot;databand = dbnd_mlflow.tracking_store:get_dbnd_store&quot;,            - &quot;databand+s = dbnd_mlflow.tracking_store:get_dbnd_store&quot;,        2. `mlflow` creates `TrackingStoreClient` using the new uri        3. uri schema instructs to use `dbnd_mlflow.tracking_store:get_dbnd_store`            - `get_dbnd_store` creates dbnd `TrackingAPIClient`            - `get_dbnd_store` creates mlflow tracking store to duplicate tracking to            - `get_dbnd_store` returns `DatabandStore` instance    2. `log_param()`/`log_metric()`        - calls to `DatabandStore`            - calls to `TrackingAPIClient`            - calls to mlflow tracking store to duplicate tracking to    3. `mlflow.end_run()`5. `mlflow_example` ends6. `dbnd_on_exit_context` hook from `dbnd_mlflow` is triggered    - restore original mlflow tracking uri</longdescription>
</pkgmetadata>