<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dymoprint[![GitHub Actions (Tests)](https://github.com/computerlyrik/dymoprint/workflows/Tests/badge.svg)](https://github.com/computerlyrik/dymoprint)[![PyPI version](https://img.shields.io/pypi/v/dymoprint.svg)](https://pypi.org/project/dymoprint/)Linux Software to print with LabelManager PnP from Dymo* First version from Sebastian Bronner: &lt;https://sbronner.com/dymoprint.html&gt;* Cloned to Github and formerly maintained by @computerlyrik: &lt;https://github.com/computerlyrik/dymoprint&gt;* Currently maintained by @maresb## Features* Text printing* QR code printing* Barcode printing* Image printing* Combinations of the above* GUI Application based on PyQt6### Experimental* LabelManager 280* LabelManager 420P* LabelManager Wireless PnP* Windows support by setting the driver to WinUSB using [Zadig](https://zadig.akeo.ie/)For more information about experimental device support, see [#44](https://github.com/computerlyrik/dymoprint/issues/44).## InstallationIt is recommended to install dymoprint with [pipx](https://pypa.github.io/pipx/) so that it runs in an isolated virtual environment:```bashpipx install dymoprint```In case pipx is not already installed, it can be installed on Ubuntu/Debian with```bashsudo apt-get install pipx```or on Arch with```bashsudo pacman -S python-pipx```By default, users don't have permission to access generic USB devices, so you willneed to add a rule. The first time you run `dymoprint`, it will give instructionsabout how to do this:```bash$ dymoprint &quot;Hello world&quot;...You do not have sufficient access to the device. You probably want to add the a udev rule in /etc/udev/rules.d with the following command:  echo 'ACTION==&quot;add&quot;, SUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;0922&quot;, ATTRS{idProduct}==&quot;1001&quot;, MODE=&quot;0666&quot;' | sudo tee /etc/udev/rules.d/91-dymo-1001.rules...```## Testing experimental featuresTo install a test branch, by user `ghuser` for the branch `branchname`, run```bashpipx install --force git+https://github.com/ghuser/dymoprint@branchname```To revert back to the release version, run```bashpipx install --force dymoprint```To install a particular release version, specify `dymoprint==x.y.z` instead of `dymoprint` in the above command.## DevelopmentTo install for development, fork and clone this repository, and run (ideally within a venv):```bashpip install --editable .```This project uses [pre-commit](https://pre-commit.com/) to run some checks before committing.After installing the `pre-commit` executable, please run```bashpre-commit install```## Font managementFonts are managed via [dymoprint.ini](dymoprint.ini). This should be placed in yourconfig folder (normally `~/.config`). An example file is provided here.You may choose any TTF Font you likeYou may edit the file to point to your favorite font.For my Arch-Linux System, fonts are located at e.g.```bash/usr/share/fonts/TTF/DejaVuSerif.ttf```It is also possible to Download a font from&lt;http://font.ubuntu.com/&gt; and use it.## Modes### Print text```dymoprint MyText```Multilines will be generated on whitespace```dymoprint MyLine MySecondLine # Will print two Lines```If you want whitespaces just enclose in &quot; &quot;```dymoprint &quot;prints a single line&quot;```### Print QRCodes and Barcodes```dymoprint --help```### Print Codes and TextJust add a text after your qr or barcode text```dymoprint -qr &quot;QR Content&quot; &quot;Cleartext printed&quot;```### Picture printingAny picture with JPEG standard may be printed. Beware it will be downsized to tape.```dymoprint -p mypic.jpg &quot;&quot;```Take care of the trailing &quot;&quot; - you may enter text here which gets printed in front of the image## GUI### Run DymoPrint GUI```dymoprint_gui```### Features* Live preview* margin settings* type size selector* visualization of tape color schema* the ability to freely arrange the content using the &quot;Node&quot; list  * Text Node:    * payload text - can be multi-line    * font selector    * font scaling - the percentage of line-height    * frame border width steering  * Qr Node:    * payload text  * BarCode Node:    * payload text    * codding selector  * Image Node:    * path to fileNodes can be freely arranged, simply drag&amp;drop rows on the list.To add or delete the node from the label - right-click on the list and select the action from the context menu.To print - click the print button.### ExampleExample 1: multiple text + QR code![alt](doc/DymoPrint_example_1.png)Example 2: two images + text with frame, white on red![alt](doc/DymoPrint_example_2.png)Example 3: barcode, text, image![alt](doc/DymoPrint_example_3.png)## DevelopmentBesides the travis-ci one should run the following command on a feature implemention or change to ensure the same outcome on a real device:```bashdymoprint Tst &amp;&amp; \dymoprint -qr Tst &amp;&amp; \dymoprint -c code128 Tst &amp;&amp; \dymoprint -qr qrencoded &quot;qr_txt&quot; &amp;&amp; \dymoprint -c code128 Test &quot;bc_txt&quot;```### ToDo* ~~(?)support multiple ProductIDs (1001, 1002) -&gt; use usb-modeswitch?~~* ~~put everything in classes that would need to be used by a GUI~~* ~~for more options use command line parser framework~~* ~~allow selection of font with command line options~~* ~~allow font size specification with command line option (points, pixels?)~~* ~~provide an option to show a preview of what the label will look like~~* ~~read and write a .dymoprint file containing user preferences~~* ~~print barcodes~~* ~~print graphics~~* ~~plot frame around label~~* vertical print* refactor code with better abstractions* pixel fonts* web interface</longdescription>
</pkgmetadata>