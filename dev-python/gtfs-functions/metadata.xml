<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GTFS functionsThis package allows you to create various layers directly from the GTFS and visualize the results in the most straightforward way possible.## Update March 2023:* Removed dependency with [partridge](https://github.com/remix/partridge). As much as we love this package and think it is absolutely great, removing a dependency gives us more control and keeps this package from failing whenever something changes in `partridge`.* We treat the GTFS as a class, where each file is a property. See examples below to find out how to work with it. We hope this simplifies your code.* Fixed and enhanced **segment cutting**. Shout out to [Mattijs De Paepe](https://github.com/mattijsdp)* Support to identify route patterns!! Check it out using `feed.routes_patterns`. Shout out to [Tobias Bartsch](https://github.com/tobiasbartsch)* The rest should stay the same.#### Warning! Make sure `stop_times.txt` has no `Null` values in the columns `arrival_time` and `departure_time`. If this is not the case, some functions on this package might fail.## Table of contents* [Installation](#installation)* [GTFS parsing](#gtfs_parsing)* [Stop frequencies](#stop_freq)* [Line frequencies](#line_freq)* [Cut in Bus segments](#segments)* [Speeds](#speeds)* [Segment frequencies](#segments_freq)* [Mapping the results](#map_gdf)* [Other plots](#plotly)## Python versionThe package requires `python&gt;=3.10`. You can create a new environment with this version using conda:```consoleconda create -n new-env python=3.10```## Installation &lt;a class=&quot;anchor&quot; id=&quot;installation&quot;&gt;&lt;/a&gt;You can install the package running the following in your console:```consolepip install gtfs_functions==2.0.0```Import the package in your script/notebook```pythonfrom gtfs_functions import Feed, map_gdf```# GTFS Import &lt;a class=&quot;anchor&quot; id=&quot;gtfs_parsing&quot;&gt;&lt;/a&gt;Now you can interact with your GTFS with the class `Feed`. Take a look at the class with `?Feed` to check what arguments you can specify. ```pythongtfs_path = 'data/sfmta.zip'# It also works with URL'sgtfs_path = 'https://transitfeeds.com/p/sfmta/60/latest/download'feed = Feed(gtfs_path)``````pythonroutes = feed.routesroutes.head(2)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;route_id&lt;/th&gt;      &lt;th&gt;agency_id&lt;/th&gt;      &lt;th&gt;route_short_name&lt;/th&gt;      &lt;th&gt;route_long_name&lt;/th&gt;      &lt;th&gt;route_desc&lt;/th&gt;      &lt;th&gt;route_type&lt;/th&gt;      &lt;th&gt;route_url&lt;/th&gt;      &lt;th&gt;route_color&lt;/th&gt;      &lt;th&gt;route_text_color&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;15761&lt;/td&gt;      &lt;td&gt;SFMTA&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;CALIFORNIA&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;https://SFMTA.com/1&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;1&lt;/th&gt;      &lt;td&gt;15766&lt;/td&gt;      &lt;td&gt;SFMTA&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;      &lt;td&gt;FULTON&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;https://SFMTA.com/5&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;```pythonstops = feed.stopsstops.head(2)```&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;stop_id&lt;/th&gt;      &lt;th&gt;stop_code&lt;/th&gt;      &lt;th&gt;stop_name&lt;/th&gt;      &lt;th&gt;stop_desc&lt;/th&gt;      &lt;th&gt;zone_id&lt;/th&gt;      &lt;th&gt;stop_url&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;390&lt;/td&gt;      &lt;td&gt;10390&lt;/td&gt;      &lt;td&gt;19th Avenue &amp;amp; Holloway St&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;POINT (-122.47510 37.72119)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;1&lt;/th&gt;      &lt;td&gt;3016&lt;/td&gt;      &lt;td&gt;13016&lt;/td&gt;      &lt;td&gt;3rd St &amp;amp; 4th St&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;POINT (-122.38979 37.77262)&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;```pythonstop_times = feed.stop_timesstop_times.head(2)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;trip_id&lt;/th&gt;      &lt;th&gt;arrival_time&lt;/th&gt;      &lt;th&gt;departure_time&lt;/th&gt;      &lt;th&gt;stop_id&lt;/th&gt;      &lt;th&gt;stop_sequence&lt;/th&gt;      &lt;th&gt;stop_headsign&lt;/th&gt;      &lt;th&gt;pickup_type&lt;/th&gt;      &lt;th&gt;drop_off_type&lt;/th&gt;      &lt;th&gt;shape_dist_traveled&lt;/th&gt;      &lt;th&gt;route_id&lt;/th&gt;      &lt;th&gt;service_id&lt;/th&gt;      &lt;th&gt;direction_id&lt;/th&gt;      &lt;th&gt;shape_id&lt;/th&gt;      &lt;th&gt;stop_code&lt;/th&gt;      &lt;th&gt;stop_name&lt;/th&gt;      &lt;th&gt;stop_desc&lt;/th&gt;      &lt;th&gt;zone_id&lt;/th&gt;      &lt;th&gt;stop_url&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;9413147&lt;/td&gt;      &lt;td&gt;81840.0&lt;/td&gt;      &lt;td&gt;81840.0&lt;/td&gt;      &lt;td&gt;4015&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;15761&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;179928&lt;/td&gt;      &lt;td&gt;14015&lt;/td&gt;      &lt;td&gt;Clay St &amp;amp; Drumm St&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;POINT (-122.39682 37.79544)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;1&lt;/th&gt;      &lt;td&gt;9413147&lt;/td&gt;      &lt;td&gt;81902.0&lt;/td&gt;      &lt;td&gt;81902.0&lt;/td&gt;      &lt;td&gt;6294&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;15761&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;179928&lt;/td&gt;      &lt;td&gt;16294&lt;/td&gt;      &lt;td&gt;Sacramento St &amp;amp; Davis St&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;POINT (-122.39761 37.79450)&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;```pythontrips = feed.tripstrips.head(2)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;trip_id&lt;/th&gt;      &lt;th&gt;route_id&lt;/th&gt;      &lt;th&gt;service_id&lt;/th&gt;      &lt;th&gt;direction_id&lt;/th&gt;      &lt;th&gt;shape_id&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;9547346&lt;/td&gt;      &lt;td&gt;15804&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;180140&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;1&lt;/th&gt;      &lt;td&gt;9547345&lt;/td&gt;      &lt;td&gt;15804&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;180140&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;```pythonshapes = feed.shapesshapes.head(2)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;shape_id&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;179928&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39697 37.79544, -122.39678 37...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;1&lt;/th&gt;      &lt;td&gt;179929&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39697 37.79544, -122.39678 37...&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;# Stop frequencies &lt;a class=&quot;anchor&quot; id=&quot;stop_freq&quot;&gt;&lt;/a&gt;Returns a geodataframe with the frequency for each combination of `stop`, `time of day` and `direction`. Each row with a **Point** geometry. The user can optionally specify `cutoffs` as a list in case the default is not good. These `cutoffs` should be specified at the moment of reading the `Feed` class. These `cutoffs` are the times of days to use as aggregation.```pythoncutoffs = [0,6,9,15.5,19,22,24]feed = Feed(gtfs_path, cutoffs=cutoffs)stop_freq = feed.stops_freqstop_freq.head(2)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;stop_id&lt;/th&gt;      &lt;th&gt;dir_id&lt;/th&gt;      &lt;th&gt;window&lt;/th&gt;      &lt;th&gt;ntrips&lt;/th&gt;      &lt;th&gt;min_per_trip&lt;/th&gt;      &lt;th&gt;stop_name&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;8157&lt;/th&gt;      &lt;td&gt;5763&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;Noriega St &amp;amp; 48th Ave&lt;/td&gt;      &lt;td&gt;POINT (-122.50785 37.75293)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;13102&lt;/th&gt;      &lt;td&gt;7982&lt;/td&gt;      &lt;td&gt;Outbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;Moscow St &amp;amp; RussiaAvet&lt;/td&gt;      &lt;td&gt;POINT (-122.42996 37.71804)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;9539&lt;/th&gt;      &lt;td&gt;6113&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;Portola Dr &amp;amp; Laguna Honda Blvd&lt;/td&gt;      &lt;td&gt;POINT (-122.45526 37.74310)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;12654&lt;/th&gt;      &lt;td&gt;7719&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;Middle Point &amp;amp; Acacia&lt;/td&gt;      &lt;td&gt;POINT (-122.37952 37.73707)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;9553&lt;/th&gt;      &lt;td&gt;6116&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;Portola Dr &amp;amp; San Pablo Ave&lt;/td&gt;      &lt;td&gt;POINT (-122.46107 37.74040)&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;# Line frequencies &lt;a class=&quot;anchor&quot; id=&quot;line_freq&quot;&gt;&lt;/a&gt;Returns a geodataframe with the frequency for each combination of `line`, `time of day` and `direction`. Each row with a **LineString** geometry. The user can optionally specify `cutoffs` as a list in case the default is not good. These `cutoffs` should be specified at the moment of reading the `Feed` class. These `cutoffs` are the times of days to use as aggregation.```pythoncutoffs = [0,6,9,15.5,19,22,24]line_freq = gtfs.lines_freq(stop_times, trips, shapes, routes, cutoffs = cutoffs)line_freq.head()```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;route_id&lt;/th&gt;      &lt;th&gt;route_name&lt;/th&gt;      &lt;th&gt;dir_id&lt;/th&gt;      &lt;th&gt;window&lt;/th&gt;      &lt;th&gt;min_per_trip&lt;/th&gt;      &lt;th&gt;ntrips&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;376&lt;/th&gt;      &lt;td&gt;15808&lt;/td&gt;      &lt;td&gt;44 O'SHAUGHNESSY&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.46459 37.78500, -122.46352 37...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;378&lt;/th&gt;      &lt;td&gt;15808&lt;/td&gt;      &lt;td&gt;44 O'SHAUGHNESSY&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.43416 37.73355, -122.43299 37...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;242&lt;/th&gt;      &lt;td&gt;15787&lt;/td&gt;      &lt;td&gt;25 TREASURE ISLAND&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39611 37.79013, -122.39603 37...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;451&lt;/th&gt;      &lt;td&gt;15814&lt;/td&gt;      &lt;td&gt;54 FELTON&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.38845 37.73994, -122.38844 37...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;241&lt;/th&gt;      &lt;td&gt;15787&lt;/td&gt;      &lt;td&gt;25 TREASURE ISLAND&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39542 37.78978, -122.39563 37...&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;# Bus segments &lt;a class=&quot;anchor&quot; id=&quot;segments&quot;&gt;&lt;/a&gt;Returns a geodataframe where each segment is a row and has a **LineString** geometry.```pythonsegments_gdf = feed.segmentssegments_gdf.head(2)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;route_id&lt;/th&gt;      &lt;th&gt;direction_id&lt;/th&gt;      &lt;th&gt;stop_sequence&lt;/th&gt;      &lt;th&gt;start_stop_name&lt;/th&gt;      &lt;th&gt;end_stop_name&lt;/th&gt;      &lt;th&gt;start_stop_id&lt;/th&gt;      &lt;th&gt;end_stop_id&lt;/th&gt;      &lt;th&gt;segment_id&lt;/th&gt;      &lt;th&gt;shape_id&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;      &lt;th&gt;distance_m&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;15761&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;Clay St &amp;amp; Drumm St&lt;/td&gt;      &lt;td&gt;Sacramento St &amp;amp; Davis St&lt;/td&gt;      &lt;td&gt;4015&lt;/td&gt;      &lt;td&gt;6294&lt;/td&gt;      &lt;td&gt;4015-6294&lt;/td&gt;      &lt;td&gt;179928&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39697 37.79544, -122.39678 37...&lt;/td&gt;      &lt;td&gt;205.281653&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;1&lt;/th&gt;      &lt;td&gt;15761&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;Sacramento St &amp;amp; Davis St&lt;/td&gt;      &lt;td&gt;Sacramento St &amp;amp; Battery St&lt;/td&gt;      &lt;td&gt;6294&lt;/td&gt;      &lt;td&gt;6290&lt;/td&gt;      &lt;td&gt;6294-6290&lt;/td&gt;      &lt;td&gt;179928&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39761 37.79446, -122.39781 37...&lt;/td&gt;      &lt;td&gt;238.047505&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;# Scheduled Speeds &lt;a class=&quot;anchor&quot; id=&quot;speeds&quot;&gt;&lt;/a&gt;Returns a geodataframe with the `speed_kmh` for each combination of `route`, `segment`, `time of day` and `direction`. Each row with a **LineString** geometry. The user can optionally specify `cutoffs` as explained in previous sections.```python# Cutoffs to make get hourly valuesspeeds = feed.avg_speedsspeeds.head(1)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;route_id&lt;/th&gt;      &lt;th&gt;route_name&lt;/th&gt;      &lt;th&gt;direction_id&lt;/th&gt;      &lt;th&gt;segment_id&lt;/th&gt;      &lt;th&gt;window&lt;/th&gt;      &lt;th&gt;speed_kmh&lt;/th&gt;      &lt;th&gt;start_stop_id&lt;/th&gt;      &lt;th&gt;start_stop_name&lt;/th&gt;      &lt;th&gt;end_stop_id&lt;/th&gt;      &lt;th&gt;end_stop_name&lt;/th&gt;      &lt;th&gt;distance_m&lt;/th&gt;      &lt;th&gt;stop_sequence&lt;/th&gt;      &lt;th&gt;runtime_sec&lt;/th&gt;      &lt;th&gt;segment_max_speed_kmh&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;15761&lt;/td&gt;      &lt;td&gt;1 CALIFORNIA&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;4015-6294&lt;/td&gt;      &lt;td&gt;10:00-11:00&lt;/td&gt;      &lt;td&gt;12.0&lt;/td&gt;      &lt;td&gt;4015&lt;/td&gt;      &lt;td&gt;Clay St &amp;amp; Drumm St&lt;/td&gt;      &lt;td&gt;6294&lt;/td&gt;      &lt;td&gt;Sacramento St &amp;amp; Davis St&lt;/td&gt;      &lt;td&gt;205.281653&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;61.9&lt;/td&gt;      &lt;td&gt;12.0&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39697 37.79544, -122.39678 37...&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;# Segment frequencies &lt;a class=&quot;anchor&quot; id=&quot;segments_freq&quot;&gt;&lt;/a&gt;```pythonsegments_freq = feed.segments_freqseg_freq.head(2)```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;route_id&lt;/th&gt;      &lt;th&gt;route_name&lt;/th&gt;      &lt;th&gt;direction_id&lt;/th&gt;      &lt;th&gt;segment_name&lt;/th&gt;      &lt;th&gt;window&lt;/th&gt;      &lt;th&gt;min_per_trip&lt;/th&gt;      &lt;th&gt;ntrips&lt;/th&gt;      &lt;th&gt;start_stop_id&lt;/th&gt;      &lt;th&gt;start_stop_name&lt;/th&gt;      &lt;th&gt;end_stop_name&lt;/th&gt;      &lt;th&gt;geometry&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;23191&lt;/th&gt;      &lt;td&gt;ALL_LINES&lt;/td&gt;      &lt;td&gt;All lines&lt;/td&gt;      &lt;td&gt;NA&lt;/td&gt;      &lt;td&gt;3628-3622&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;3628&lt;/td&gt;      &lt;td&gt;Alemany Blvd &amp;amp; St Charles Ave&lt;/td&gt;      &lt;td&gt;Alemany Blvd &amp;amp; Arch St&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.46949 37.71045, -122.46941 37...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;6160&lt;/th&gt;      &lt;td&gt;15787&lt;/td&gt;      &lt;td&gt;25 TREASURE ISLAND&lt;/td&gt;      &lt;td&gt;Inbound&lt;/td&gt;      &lt;td&gt;7948-8017&lt;/td&gt;      &lt;td&gt;0:00-6:00&lt;/td&gt;      &lt;td&gt;360&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;7948&lt;/td&gt;      &lt;td&gt;Transit Center Bay 29&lt;/td&gt;      &lt;td&gt;Shoreline Access Road&lt;/td&gt;      &lt;td&gt;LINESTRING (-122.39611 37.79013, -122.39603 37...&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;# Map your work &lt;a class=&quot;anchor&quot; id=&quot;map_gdf&quot;&gt;&lt;/a&gt;## Stop frequencies```python# Stopscondition_dir = stop_freq.dir_id == 'Inbound'condition_window = stop_freq.window == '6:00-9:00'gdf = stop_freq.loc[(condition_dir &amp; condition_window),:].reset_index()gtfs.map_gdf(gdf = gdf,               variable = 'ntrips',               colors = [&quot;#d13870&quot;, &quot;#e895b3&quot; ,'#55d992', '#3ab071', '#0e8955','#066a40'],               tooltip_var = ['min_per_trip'] ,               tooltip_labels = ['Frequency: '],               breaks = [10, 20, 30, 40, 120, 200])```![stops](/images/map_stop_freq.jpg)## Line frequencies```python# Line frequenciescondition_dir = line_freq.dir_id == 'Inbound'condition_window = line_freq.window == '6:00-9:00'gdf = line_freq.loc[(condition_dir &amp; condition_window),:].reset_index()gtfs.map_gdf(gdf = gdf,               variable = 'ntrips',               colors = [&quot;#d13870&quot;, &quot;#e895b3&quot; ,'#55d992', '#3ab071', '#0e8955','#066a40'],               tooltip_var = ['route_name'] ,               tooltip_labels = ['Route: '],               breaks = [5, 10, 20, 50])```![line](/images/map_line_freq.jpg)## SpeedsIf you are looking to visualize data at the segment level for all lines I recommend you go with something more powerful like kepler.gl (AKA my favorite data viz library). For example, to check the scheduled speeds per segment:```python# Speedsimport keplergl as kpm = kp.KeplerGl(data=dict(data=speeds, name='Speed Lines'), height=400)m```![kepler_speeds](/images/kepler_speeds.jpg)## Segment frequencies```python# Segment frequenciesimport keplergl as kpm = kp.KeplerGl(data=dict(data=seg_freq, name='Segment frequency'), height=400)m```![kepler_segment_freq](/images/kepler_seg_freq.jpg)# Other plots &lt;a class=&quot;anchor&quot; id=&quot;plotly&quot;&gt;&lt;/a&gt;## Histogram```python# Histogramimport plotly.express as pxpx.histogram(    stop_freq.loc[stop_freq.min_per_trip&lt;50],     x='frequency',     title='Stop frequencies',    template='simple_white',     nbins =20)```![histogram](/images/histogram.jpg)## Heatmap```python# Heatmapimport plotly.graph_objects as godir_0 = speeds.loc[(speeds.dir_id=='Inbound')&amp;(speeds.route_name=='1 CALIFORNIA')].sort_values(by='stop_sequence') dir_0['hour'] = dir_0.window.apply(lambda x: int(x.split(':')[0]))dir_0.sort_values(by='hour', ascending=True, inplace=True)fig = go.Figure(data=go.Heatmap(                   z=dir_0.speed_kmh,                   y=dir_0.start_stop_name,                   x=dir_0.window,                   hoverongaps = False,                   colorscale=px.colors.colorbrewer.RdYlBu,                    reversescale=False))fig.update_yaxes(title_text='Stop', autorange='reversed')fig.update_xaxes(title_text='Hour of day', side='top')fig.update_layout(showlegend=False, height=600, width=1000,                 title='Speed heatmap per direction and hour of the day')fig.show()```![heatmap](/images/heatmap.jpg)## Line chart```pythonby_hour = speeds.pivot_table('speed_kmh', index = ['window'], aggfunc = ['mean','std'] ).reset_index()by_hour.columns = ['_'.join(col).strip() for col in by_hour.columns.values]by_hour['hour'] = by_hour.window_.apply(lambda x: int(x.split(':')[0]))by_hour.sort_values(by='hour', ascending=True, inplace=True)# Scatterfig = px.line(by_hour,            x='window_',            y='mean_speed_kmh',            template='simple_white',            #error_y = 'std_speed_kmh'                )fig.update_yaxes(rangemode='tozero')fig.show()```![line_chart](/images/speed_hour.jpg)</longdescription>
</pkgmetadata>