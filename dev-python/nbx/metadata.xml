<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--#################################################### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ##################################################### file to edit: index.ipynb# command to build the docs after a change: nbdev_build_docs--&gt;# NBX: Notebook Experiments for OpenMind&gt; This module enables you to quickly convert your jupyter notebook into a bundle of files that can be run on BCS'*OpenMind*. # Getting started## Prerequisites#### Install the package:- `pip install nbx`#### Get a singulartiy imageYou'll need an image that has the package installed (there are ways around that, but I am keeping it simple at the moment). Here's how you can build an image:```module load openmind/singularity/3.2.0export SINGULARITY_CACHEDIR=&quot;/om2/user/{your_user_name}/.singularity&quot;singularity build pytorch.simg docker://mklukas/pytorch```#### Environment variablesFor the modules to work you have to set the environment variables `om`, `omx`, `omsimg`, and `omid`:  - **om**: your login to *OpenMind*.     - You need to enable logging into *OpenMind* using public key authentication. That means the command `ssh $om` should log you in whithout asking for a password. (googling for &quot;ssh public key authentication&quot; will provide you with a recipe like [this](https://kb.iu.edu/d/aews))- **omx**: path to the folder where *nbx* bundles are stored. This path will automatically be added to your python path. Any modules that are not part of your bundle's `src/` folder or are included in your singularity container should go here.- **omsimg**: path to the folder containing your singularity images- **omid**: your Open Mind username Mac users can adapt and copy the following lines to their `.bash_profile` file```export om={your_user_name}@openmind7.mit.eduexport omid={your_user_name}export omx=/om2/user/{your_user_name}/nbx-experimentsexport omsimg=/om2/user/{your_user_name}/simg```## Usage- Put your python scripts that you wrote for this experiment in a folder called `src`. The folder will be copied to the bundle so the scripts are available on *OpenMind* as well.- **#nbx**: Each cell that contains a `#nbx` tag in its **first** line will be considered part of the experiment.- **#xarg**: Putting `#xarg` above a variable declaration makes this variable *explicit*, it will become an argument of the experiment function. Any iterable to the right of the variable declaration, **separated by a semicolon**, will be considered the domain that will be swept during the parameter sweep.- Each nbx-experiment has to declare the variables `task_id` and `results_dir`. The *task id* will be set by the *wrapper* script and enumerates the configurations of the parameter space. The latter variable will also be set by the *wrapper* script, it will be replaced by the folder automatically created for a specific parameter configuration. # Example## ExperimentIn every experiment we need to indicate which cells are part of it (using the `#nbx` flag), and need to specify these two arguments:- `task_id`- `results_dir`&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```python%matplotlib inline%load_ext autoreload%autoreload 2```&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```python#nbx#xargtask_id = 0#xargresults_dir = &quot;.&quot;```&lt;/div&gt;&lt;/div&gt;This cell will be part of the experiment&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```python#nbx#xargx=0; range(5)#xargy=0; [0,1,2,4]z=0;# ...```&lt;/div&gt;&lt;/div&gt;This cell will also be part of the experiment. The output will be written to a log file in the `io` folder that will automatically be created. &lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```python#nbxprint(&quot;my results:&quot;, x, y, z)```&lt;/div&gt;&lt;div class=&quot;output_area&quot; markdown=&quot;1&quot;&gt;    my results: 0 0 0&lt;/div&gt;&lt;/div&gt;Note how we used the variable `results_dir`. It will will be replaced by `&quot;results/task_id/&quot;`; a corresponding folder will automatically be created. It is really just a hook so we can manipulate it behind the scenes.&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```python#nbxwith open(f&quot;{results_dir}/your_file.txt&quot;, &quot;w&quot;) as f:    f.write(&quot;I will be written to: example_nbx_bundle/results/task_id/your_file.txt&quot;)    f.write(f&quot;\n{task_id}&quot;)```&lt;/div&gt;&lt;/div&gt;## Creating and running an NBX bundleTo run the experiment on OM we have to create a bundle that we can interact with...&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```pythonfrom nbx.om import NbxBundlebundle = NbxBundle(nbname=&quot;index.ipynb&quot;, # the name of the notebook to use as exp          name=&quot;example_bundle&quot;,         # name of the bundle          linting=False,                 # enable basic linting          time=[0,20],                   # comp time [hours, minutes]          ntasks=4,                      # requested comp nodes          step=50,                       # parallel jobs (compare bundle/run.sh)          max_arr=10,                    # maximum number of queued jobs on OM is 1000          mail_user=&quot;me@somewhere.com&quot;,  # notification email          simg=&quot;pytorch.simg&quot;)           # singulrity img on OM in $omsimg```&lt;/div&gt;&lt;div class=&quot;output_area&quot; markdown=&quot;1&quot;&gt;    ** nbx bundle created **    Path:        example_bundle_nbx    Source nb:        index.ipynb    Parameters (#configs 20):        * x = range(5)        * y = [0,1,2,4]          task_id = 0          results_dir = &quot;.&quot;    Instructions:        Copy to remote, run the bash script, and pull the results        - `bundle.push()` or `scp -r example_bundle_nbx $om:$omx`        - `bundle.run()` or `ssh $om sbatch -D $omx/example_bundle_nbx $omx/example_bundle_nbx/run.sh`        - `bundle.pull_results()` or `scp -r $om:$omx/example_bundle_nbx/results ./results`&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```python!ls example_bundle_nbx/```&lt;/div&gt;&lt;div class=&quot;output_area&quot; markdown=&quot;1&quot;&gt;    __init__.py   experiment.py job.sh        wrapper.py    [34m__pycache__[m[m   [34mio[m[m            run.sh&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```pythonfrom example_bundle_nbx.experiment import sweep_params as sweepprint(len(sweep))print(sweep[0])print(sweep[1])print(sweep[4])```&lt;/div&gt;&lt;div class=&quot;output_area&quot; markdown=&quot;1&quot;&gt;    12    {'x': 0, 'y': 0}    {'x': 0, 'y': 1}    {'x': 1, 'y': 0}&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```pythonbundle.push()```&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```pythonbundle.run()```&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```pythonbundle.status()```&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```pythonbundle.pull_results()```&lt;/div&gt;&lt;/div&gt;The results are now in the local folder:&lt;div class=&quot;codecell&quot; markdown=&quot;1&quot;&gt;&lt;div class=&quot;input_area&quot; markdown=&quot;1&quot;&gt;```python!ls example_bundle_nbx```&lt;/div&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>