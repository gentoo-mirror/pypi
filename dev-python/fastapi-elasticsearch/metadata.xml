<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Query Utility for Elasticsearch[![Pypi](https://img.shields.io/pypi/v/fastapi-elasticsearch.svg)](https://pypi.org/project/fastapi-elasticsearch/)Utility library for creating elasticsearch query proxies using [FastAPI](https://fastapi.tiangolo.com/).```pythonfrom fastapi_elasticsearch import ElasticsearchAPIQueryBuilderquery_builder = ElasticsearchAPIQueryBuilder()# Decorate a function as a filter.# The filter can declare parameters.@query_builder.filter()def filter_category(c: Optional[str] = Query(None)):    return {        &quot;term&quot;: {            &quot;category&quot;: c        }    } if c is not None else None# Decorate a function as a matcher# (will contribute to the query scoring).# Parameters can also be used.@query_builder.matcher()def match_fields(q: Optional[str] = Query(None)):    return {        &quot;multi_match&quot;: {            &quot;query&quot;: q,            &quot;fuzziness&quot;: &quot;AUTO&quot;,            &quot;fields&quot;: [                &quot;name^2&quot;,                &quot;description&quot;            ]        }    } if q is not None else None# Decorate a function as a sorter.# Parameters can be declared.@query_builder.sorter()def sort_by(direction: Optional[str] = Query(None)):    return {        &quot;name&quot;: direction    } if direction is not None else None# Decorate a function as a highlighter.# Parameters can also be declared.@query_builder.highlighter()def highlight(q: Optional[str] = Query(None),              h: bool = Query(False):    return {        &quot;name&quot;: {}    } if q is not None and h else Noneapp = FastAPI()# Create a route using the query builder as dependency.@app.get(&quot;/search&quot;)async def search(query_body: Dict = Depends(query_builder.build())) -&gt; JSONResponse:    # Search using the Elasticsearch client.    return es.search(        body=query_body,        index=index_name    )```It is possible to customize the generated query body using the decorator @search_builder.```pythonfrom typing import List, Dict@query_builder.search_builder()def build_search_body(size: int = 10,                      start_from: int = 0,                      source: Union[List, Dict, str] = None,                      minimum_should_match: int = 1,                      filters: List[Dict] = [],                      matchers: List[Dict] = [],                      highlighters: List[Dict] = [],                      sorters: List[Dict] = []) -&gt; Dict:    return {        &quot;query&quot;: {            ...        },        ...    }```</longdescription>
</pkgmetadata>