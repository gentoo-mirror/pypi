<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># secure sedge`sedge` is a collection of convocations that are designedto serve the following purpose(s):1. allows you to request certs   from letsencrypt and then upload them to s32. allow individual servers to pull their individual certs from   s3 and install them on both linux   and windows.3. that's it.sedge is tightly integrated with aws and makes use of route53 and s3 via ``boto3``.## setup and installation1. make sure you have python 3.8 installed    a. ubuntu        sudo apt -y update        sudo add-apt-repository -y ppa:deadsnakes/ppa        sudo apt -qq update        sudo apt -y install python3.8 python3.8-dev python3.8-venv    b. powershell        choco install -y python3 --version 3.8.4 --params &quot;/installdir:c:\python38&quot;        $mac = [System.EnvironmentVariableTarget]::Machine        $path = [system.environment]::getenvironmentvariable('path', $mac)        $path = &quot;${path};c:\python38;c:\python38\scripts&quot;        [system.environment]::setenvironmentvariable('path', $path, $mac)2. install secure_sedge using pip        pip install secure_sedge3. create one or more config file on your keystore        mkdir -p /etc/sedge        sudo chown -R sedge:sedge /etc/sedge    in a file called `defaults.yml` we can specify defaults to use for all    certs.  and then one yaml file per cert that we want sedge to renew.        ---        # the namespaces key will specify all of the namespaces in ssm        # parameter store that the cert will be saved into        namespaces:          - dev          - staging                    # the name of the profile in aws that we want to use        profile: contoso                    # the primary hostname / subject identifier for the cert        # we can specify a wildcard here, but no ip addresses        hostname: computer.contoso.com        bucket: keystore.contoso.com          buckets:          - name: keystore.fabrikam.com            assume_role: arn:aws:iam::0123456789:role/fabrikam-keystore           - name: keystore.example.com            profile: example_profile        # if dns is hosted in cloudflare, use the cloudflare_token parameter         cloudflare_token: token1          tmp_dir: /u/sedge_temp        # any subject alternative domains that we also want secured by the cert        # n.b., there can't be overlapping domains like having a wildcard        # for the hostname and then a specific host.        alt_domains:          - computer.fabrikam.com             certs created by `renew_all` will be stored in s3 at the following path:    `s3://namespace/hostname.crt` and the private key will be    stored at `s3://namespace/hostname.key`.4. on the system on which the cert will be installed, use sedge to    download the cert from s3   ```powershell   sedge.exe install.rds --bucket bucket --key path/to/hostname.pfx   ```5. set up a cron job or scheduled task on your keystore to renew certs        /path/to/sedge renew_all -d /path/to/config/dir6. set up a cron job or scheduled task on your server to pull down the   cert from ssm at regular intervals and install it        /path/to/sedge install_cert -c /path/to/config/file## aws permissionsHere is the recommended aws policy that you can setup for using sedgewith a particular route53 domain (below is in cloudformation-style yaml)```yaml  PolicyDocument:    Version: &quot;2012-10-17&quot;    Statement:      - Effect: &quot;Allow&quot;        Resource: &quot;*&quot;        Action:          - &quot;route53:listhostedzones&quot;          - &quot;route53:gethostedzone&quot;          - &quot;route53:gethostedzonecount&quot;          - &quot;route53:getchange&quot;          - &quot;route53:listhostedzonesbyname&quot;          - &quot;route53:listresourcerecordsets&quot;      - Effect: &quot;Allow&quot;        Resource: !Sub &quot;arn:aws:route53:::hostedzone/${HostedZoneId}&quot;        Action:          - &quot;route53:changeresourcerecordsets&quot;          - &quot;route53:listresourcerecordsets&quot;      - Effect: &quot;Allow&quot;        Resource:          - !Sub &quot;arn:aws:s3:::${Bucket}&quot;        Action:          - &quot;s3:ListBucket&quot;          - &quot;s3:GetBucketLocation&quot;          - &quot;s3:ListBucketMultipartUploads&quot;          - &quot;s3:ListBucketVersions&quot;      - Effect: Allow        Resource:          - !Sub &quot;arn:aws:s3:::${Bucket}/*&quot;        Action:          - &quot;s3:GetObject&quot;          - &quot;s3:PutObject*&quot;          - &quot;s3:DeleteObject&quot;          - &quot;s3:AbortMultipartUpload&quot;          - &quot;s3:ListMultipartUploadParts&quot;```</longdescription>
</pkgmetadata>