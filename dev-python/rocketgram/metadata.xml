<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Rocketgram![TEST](https://github.com/rocketgram/rocketgram/workflows/TEST/badge.svg)Modern and powerful asynchronous telegram bot framework.Release news available here: [@RocketgramNews](https://t.me/RocketgramNews)## DependenciesAll dependencies are optional, but you should install `aiohttp` to use the framework.`orjson` or `ujson` is highly recommended to speedup json parsing.Also, you can use `uvloop` as alternative to standard event loop.* Python &gt;= 3.7* aiohttp &gt;= 3.8.1* ujson &gt;= 5.2.0* orjson &gt;= 3.6.8* uvloop &gt;= 0.12.1## How to install#### For development```bashpip install rocketgram[aiohttp]```#### For production```bashpip install uvloop rocketgram[aiohttp,orjson]```## ExampleThere is a trivial example below.[Here](https://github.com/vd2org/rocketgram-template) is useful bot template.```pythonfrom rocketgram import Bot, Dispatcher, UpdatesExecutorfrom rocketgram import context, commonfiltersfrom rocketgram import SendMessagetoken = f'YOUR_BOT_TOKEN'router = Dispatcher()bot = Bot(token, router=router)@router.handler@commonfilters.command('/start')async def start_command():    await SendMessage(context.user.id, f'Hello there!').send()    @router.handler@commonfilters.command('/help')async def start_command():    await SendMessage(context.user.id, f'Some userful help!').send()    UpdatesExecutor.run(bot)```# TestingCode tested automatically using `Github Actions`. You can see build status **[here](https://github.com/rocketgram/rocketgram/actions)**.To test code manually install and run `pytest`:```bashpip install pytestpython -m pytest```</longdescription>
</pkgmetadata>