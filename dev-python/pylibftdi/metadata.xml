<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pylibftdi=========pylibftdi is a minimal Pythonic interface to FTDI devices using libftdi_... _libftdi: http://www.intra2net.com/en/developer/libftdi/:Features: - No dependencies beyond standard library and a `libftdi` install. - Supports parallel and serial devices - Support for multiple devices - File-like interface wherever appropriate - Cross-platform:Limitations: - The API might change prior to reaching a 1.0 release.Usage-----The primary interface is the ``Device`` class in the pylibftdi package; thisgives serial access on relevant FTDI devices (e.g. the UM232R), providing afile-like interface (read, write).  Baudrate is controlled with the ``baudrate``property.If a Device instance is created with ``mode='t'`` (text mode) then read() andwrite() can use the given ``encoding`` (defaulting to latin-1). This doesn'tmake a lot of difference on Python 2 (and can be omitted), but allows easierintegration with passing unicode strings between devices in Python 3.Multiple devices are supported by passing the desired device serial number (asa string) in the ``device_id`` parameter - this is the first parameter in bothDevice() and BitBangDevice() constructors. Alternatively the device 'description'can be given, and an attempt will be made to match this if matching by serialnumber fails.Examples~~~~~~~~::    &gt;&gt;&gt; from pylibftdi import Device    &gt;&gt;&gt;    &gt;&gt;&gt; with Device(mode='t') as dev:    ...     dev.baudrate = 115200    ...     dev.write('Hello World')The pylibftdi.BitBangDevice wrapper provides access to the parallel IO mode ofoperation through the ``port`` and ``direction`` properties.  These provide an8 bit IO port including all the relevant bit operations to make things simple.::    &gt;&gt;&gt; from pylibftdi import BitBangDevice    &gt;&gt;&gt;    &gt;&gt;&gt; with BitBangDevice('FTE00P4L') as bb:    ...     bb.direction = 0x0F  # four LSB are output(1), four MSB are input(0)    ...     bb.port |= 2         # set bit 1    ...     bb.port &amp;= 0xFE      # clear bit 0There is support for a number of external devices and protocols, includinginterfacing with HD44780 LCDs using the 4-bit interface.History &amp; Motivation--------------------This package is the result of various bits of work using FTDI'sdevices, primarily for controlling external devices.  Some of thisis documented on the codedstructure blog, codedstructure.blogspot.comSeveral other open-source Python FTDI wrappers exist, and each may bebest for some projects. Some aim at closely wrapping the libftdi interface,others use FTDI's own D2XX driver (ftd2xx_) or talk directly to USB vialibusb or similar (such as pyftdi_)... _ftd2xx: http://pypi.python.org/pypi/ftd2xx.. _pyftdi: https://github.com/eblot/pyftdiThe aim for pylibftdi is to work with libftdi, but to providea high-level Pythonic interface.  Various wrappers and utilityfunctions are also part of the distribution; following Python'sbatteries included approach, there are various interesting devicessupported out-of-the-box - or at least there will be soon!Plans----- * Add more examples: SPI devices, knight-rider effects, input devices, MIDI... * Perhaps add support for D2XX driver, though the name then becomes a   slight liability ;)License-------Copyright (c) 2010-2022 Ben Bass &lt;benbass@codedstructure.net&gt;pylibftdi is released under the MIT licence; see the file &quot;LICENSE.txt&quot;for information.All trademarks referenced herein are property of their respectiveholders.libFTDI itself is developed by Intra2net AG.  No association withIntra2net is claimed or implied, but I have found their libraryhelpful and had fun with it...</longdescription>
</pkgmetadata>