<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Angles======.. _TPM: http://www.sal.wisc.edu/~jwp/astro/tpm/tpm.html.. _Jeffrey W. Percival: http://www.sal.wisc.edu/~jwp/.. _pip: http://pypi.python.org/pypi/pip.. _easy_install: packages.python.org/distribute/easy_install.htmlThe Angles module defines several classes for representing angles, and positionson a sphere. It also has several functions for performing common operationson angles, such as unit conversion, normalization, creating stringrepresentations and others.The position of M100 reported by SIMBAD is &quot;12 22 54.899 +15 49 20.57&quot;. We caneasily parse these coordinates as follows:.. code-block:: python    &gt;&gt;&gt; from __future__ import print_function        &gt;&gt;&gt; from angles import AngularPosition    &gt;&gt;&gt; a = AngularPosition.from_hd(&quot;12 22 54.899 +15 49 20.57&quot;)    &gt;&gt;&gt; a.alpha    3.24157813039    &gt;&gt;&gt; a.delta    0.276152636198    &gt;&gt;&gt; print(a.alpha)    +12HH 22MM 54.899SS    &gt;&gt;&gt; print(a.delta)    +15DD 49MM 20.570SS    &gt;&gt;&gt; a.alpha.hms.hms    (1, 12, 22, 54.899)    &gt;&gt;&gt; a.delta.dms.dms    (1, 15, 49, 20.57)    &gt;&gt;&gt; a.alpha.dms.dms    (1, 185, 43, 43.485)    &gt;&gt;&gt; a.delta.hms.hms    (1, 1, 3, 17.371)    &gt;&gt;&gt; a.alpha.r, a.alpha.d, a.alpha.h, a.alpha.arcs    (3.2415781303913653, 185.72874583333328, 12.381916388888886, 668623.4849999998)    &gt;&gt;&gt; a.delta.r, a.delta.d, a.delta.h, a.delta.arcs    (0.27615263619797403, 15.822380555555556, 1.0548253703703705, 56960.57)Installation------------Use `pip`_ or `easy_install`_::  $ pip install anglesor,::  $ easy_install anglesTests are in the file ``test_angles.py``.Examples--------Some examples are given below. For more details see docstrings of functions andclasses.Unit conversion~~~~~~~~~~~~~~~Convert between radians, degrees, hours and arc-seconds... code-block:: python    &gt;&gt;&gt; import math    &gt;&gt;&gt; from angles import r2d, r2arcs, h2r, h2d, d2arcs    &gt;&gt;&gt; r2d(math.pi)    180.0    &gt;&gt;&gt; r2arcs(math.pi)    648000.0    &gt;&gt;&gt; h2r(12.0)    3.141592653589793    &gt;&gt;&gt; h2d(12.0)    180.0    &gt;&gt;&gt; d2arcs(1.0)    3600.0Normalizing angles~~~~~~~~~~~~~~~~~~Normalize value between two limits using ``normalize``... code-block:: python    &gt;&gt;&gt; from angles import normalize    &gt;&gt;&gt; normalize(-180, -180, 180)    -180.0    &gt;&gt;&gt; normalize(180, -180, 180)    -180.0    &gt;&gt;&gt; normalize(180, -180, 180, b=True)    180.0    &gt;&gt;&gt; normalize(181,-180,180)    -179.0    &gt;&gt;&gt; normalize(181, -180, 180, b=True)    179.0    &gt;&gt;&gt; normalize(-180,0,360)    180.0    &gt;&gt;&gt; normalize(36,0,24)    12.0    &gt;&gt;&gt; normalize(368.5,-180,180)    8.5    &gt;&gt;&gt; normalize(-100, -90, 90)    80.0    &gt;&gt;&gt; normalize(-100, -90, 90, b=True)    -80.0    &gt;&gt;&gt; normalize(100, -90, 90, b=True)    80.0    &gt;&gt;&gt; normalize(181, -90, 90, b=True)    -1.0    &gt;&gt;&gt; normalize(270, -90, 90, b=True)    -90.0    &gt;&gt;&gt; normalize(271, -90, 90, b=True)    -89.0Normalizing angles on a sphere~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Simplify point on sphere to simplest representation using ``normalize_sphere``... code-block:: python    &gt;&gt;&gt; from angles import normalize_sphere    &gt;&gt;&gt; normalize_sphere(180, 91)    (0.0, 89.0000000000001)    &gt;&gt;&gt; normalize_sphere(180, -91)    (0.0, -89.0000000000001)    &gt;&gt;&gt; normalize_sphere(0, 91)    (180.0, 89.0000000000001)    &gt;&gt;&gt; normalize_sphere(0, -91)    (180.0, -89.0000000000001)    &gt;&gt;&gt; normalize_sphere(120, 280)    (119.99999999999999, -80.00000000000003)    &gt;&gt;&gt; normalize_sphere(375, 45)  # 25 hours ,45 degrees    (14.999999999999966, 44.99999999999999)    &gt;&gt;&gt; normalize_sphere(-375, -45)    (345.00000000000006, -44.99999999999999)Sexagesimal representation~~~~~~~~~~~~~~~~~~~~~~~~~~Convert decimal value into sexagesimal representation... code-block:: python    &gt;&gt;&gt; from angles import deci2sexa    &gt;&gt;&gt; deci2sexa(-11.2345678)    (-1, 11, 14, 4.444)    &gt;&gt;&gt; deci2sexa(-11.2345678, pre=5)    (-1, 11, 14, 4.44408)    &gt;&gt;&gt; deci2sexa(-11.2345678, pre=4)    (-1, 11, 14, 4.4441)    &gt;&gt;&gt; deci2sexa(-11.2345678, pre=4, trunc=True)    (-1, 11, 14, 4.444)    &gt;&gt;&gt; deci2sexa(-11.2345678, pre=1)    (-1, 11, 14, 4.4)    &gt;&gt;&gt; deci2sexa(-11.2345678, pre=0)    (-1, 11, 14, 4.0)    &gt;&gt;&gt; deci2sexa(-11.2345678, pre=-1)    (-1, 11, 14, 0.0)    &gt;&gt;&gt; x = 23+59/60.0+59.99999/3600.0        &gt;&gt;&gt; deci2sexa(x, pre=3, lower=0, upper=24)    (1, 24, 0, 0.0)    &gt;&gt;&gt; deci2sexa(x, pre=3, lower=0, upper=24, upper_trim=True)    (1, 0, 0, 0.0)        &gt;&gt;&gt; deci2sexa(x, pre=5, lower=0, upper=24, upper_trim=True)    (1, 23, 59, 59.99999)Formatting angles~~~~~~~~~~~~~~~~~Format an angle into various string representations using ``fmt_angle``... code-block:: python    &gt;&gt;&gt; from angles import fmt_angle    &gt;&gt;&gt; fmt_angle(12.348978659, pre=4, trunc=True)    '+12 20 56.3231'    &gt;&gt;&gt; fmt_angle(12.348978659, pre=5)    '+12 20 56.32317'    &gt;&gt;&gt; fmt_angle(12.348978659, s1='HH ', s2='MM ', s3='SS', pre=5)    '+12HH 20MM 56.32317SS'    &gt;&gt;&gt; x = 23+59/60.0+59.99999/3600.0    &gt;&gt;&gt; fmt_angle(x)    '+24 00 00.000'    &gt;&gt;&gt; fmt_angle(x, lower=0, upper=24, upper_trim=True)    '+00 00 00.000'    &gt;&gt;&gt; fmt_angle(x, pre=5)    '+23 59 59.99999'    &gt;&gt;&gt; fmt_angle(-x, lower=0, upper=24, upper_trim=True)    '+00 00 00.000'    &gt;&gt;&gt; fmt_angle(-x)    '-24 00 00.000'Parsing sexagesimal strings~~~~~~~~~~~~~~~~~~~~~~~~~~~Parse a sexagesimal number from a string using ``phmsdms``... code-block:: python    &gt;&gt;&gt; from angles import phmsdms    &gt;&gt;&gt; phmsdms(&quot;12&quot;) == {    ... 'parts': [12.0, None, None],    ... 'sign': 1,    ... 'units': 'degrees',    ... 'vals': [12.0, 0.0, 0.0]    ... }    True    &gt;&gt;&gt; phmsdms(&quot;12h&quot;) == {    ... 'parts': [12.0, None, None],    ... 'sign': 1,    ... 'units': 'hours',    ... 'vals': [12.0, 0.0, 0.0]    ... }    True    &gt;&gt;&gt; phmsdms(&quot;12d13m14.56&quot;) == {    ... 'parts': [12.0, 13.0, 14.56],    ... 'sign': 1,    ... 'units': 'degrees',    ... 'vals': [12.0, 13.0, 14.56]    ... }    True    &gt;&gt;&gt; phmsdms(&quot;12d14.56ss&quot;) == {    ... 'parts': [12.0, None, 14.56],    ... 'sign': 1,    ... 'units': 'degrees',    ... 'vals': [12.0, 0.0, 14.56]    ... }    True    &gt;&gt;&gt; phmsdms(&quot;14.56ss&quot;) == {    ... 'parts': [None, None, 14.56],    ... 'sign': 1,    ... 'units': 'degrees',    ... 'vals': [0.0, 0.0, 14.56]    ... }    True    &gt;&gt;&gt; phmsdms(&quot;12h13m12.4s&quot;) == {    ... 'parts': [12.0, 13.0, 12.4],    ... 'sign': 1,    ... 'units': 'hours',    ... 'vals': [12.0, 13.0, 12.4]    ... }    True    &gt;&gt;&gt; phmsdms(&quot;12:13:12.4s&quot;) == {    ... 'parts': [12.0, 13.0, 12.4],    ... 'sign': 1,    ... 'units': 'degrees',    ...  'vals': [12.0, 13.0, 12.4]    ... }    TrueParse string containing angular position~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Parse coordinates of a point on sphere using ``pposition``... code-block:: python    &gt;&gt;&gt; from angles import pposition    &gt;&gt;&gt; ra, de = pposition(&quot;12 22 54.899 +15 49 20.57&quot;)    &gt;&gt;&gt; ra    12.38191638888889    &gt;&gt;&gt; de    15.822380555555556    &gt;&gt;&gt; pposition(&quot;12 22 54.899 +15 49 20.57&quot;, details=True)  # doctest: +SKIP    {'y': 15.822380555555556,      'x': 12.38191638888889,      'numvals': 6,      'raw_x': {        'vals': [12.0, 22.0, 54.899],        'units': 'degrees',         'parts': [12.0, 22.0, 54.899],         'sign': 1      },      'raw_y': {        'vals': [15.0, 49.0, 20.57],         'units': 'degrees',         'parts': [15.0, 49.0, 20.57],         'sign': 1      }    }Separation angle along a great circle~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Find angular separation along a great circle using ``sep``. This functionuses vectors to find the angle of separation... code-block:: python    &gt;&gt;&gt; from angles import r2d, d2r, sep    &gt;&gt;&gt; r2d(sep(0, 0, 0, d2r(90.0)))    90.0    &gt;&gt;&gt; r2d(sep(0, d2r(45.0), 0, d2r(90.0)))    45.00000000000001    &gt;&gt;&gt; r2d(sep(0, d2r(-45.0), 0, d2r(90.0)))    135.0    &gt;&gt;&gt; r2d(sep(0, d2r(-90.0), 0, d2r(90.0)))    180.0    &gt;&gt;&gt; r2d(sep(d2r(45.0), d2r(-90.0), d2r(45.0), d2r(90.0)))    180.0    &gt;&gt;&gt; r2d(sep(0, 0, d2r(90.0), 0))    90.0    &gt;&gt;&gt; r2d(sep(0, d2r(45.0), d2r(90.0), d2r(45.0)))    60.00000000000001    &gt;&gt;&gt; import math    &gt;&gt;&gt; 90.0 * math.cos(d2r(45.0))  # Distance along latitude circle.    63.63961030678928Bearing between two points~~~~~~~~~~~~~~~~~~~~~~~~~~Find bearing of one point with respect to another using ``bear``. Like ``sep``this function uses vectors... code-block:: python    &gt;&gt;&gt; from angles import bear, r2d, d2r    &gt;&gt;&gt; bear(0, 0, 0, -d2r(90.0))    3.141592653589793    &gt;&gt;&gt; bear(0, -d2r(90.0), 0, 0)    0.0    &gt;&gt;&gt; bear(0, -d2r(45.0), 0, 0)    0.0    &gt;&gt;&gt; bear(0, -d2r(89.678), 0, 0)    0.0    &gt;&gt;&gt; r2d(bear(d2r(45.0), d2r(45.0), d2r(46.0), d2r(45.0)))    89.64644212193384    &gt;&gt;&gt; r2d(bear(d2r(45.0), d2r(45.0), d2r(44.0), d2r(45.0)))    -89.64644212193421Angle class~~~~~~~~~~~Class for representing an angle, conversion between different units, generating string representations... code-block:: python    &gt;&gt;&gt; from __future__ import print_function    &gt;&gt;&gt; from angles import Angle    &gt;&gt;&gt; a = Angle(sg=&quot;12h34m16.592849219&quot;)    &gt;&gt;&gt; a.r, a.d, a.h, a.arcs  # doctest: +NORMALIZE_WHITESPACE    (3.291152306055805, 188.56913687174583, 12.571275791449722, 678848.892738285)    &gt;&gt;&gt; a.hms.sign, a.hms.hh, a.hms.mm, a.hms.ss    (1, 12, 34, 16.593)    &gt;&gt;&gt; a.hms.hms    (1, 12, 34, 16.593)    &gt;&gt;&gt; a.h    12.571275791449722    &gt;&gt;&gt; a.dms.sign, a.dms.dd, a.dms.mm, a.dms.ss    (1, 188, 34, 8.893)    &gt;&gt;&gt; a.dms.dms    (1, 188, 34, 8.893)    &gt;&gt;&gt; a.d    188.56913687174583    &gt;&gt;&gt; print(a.ounit)    hours    &gt;&gt;&gt; print(a)    +12 34 16.593    &gt;&gt;&gt; a.pre, a.trunc    (3, False)    &gt;&gt;&gt; a.pre = 4    &gt;&gt;&gt; print(a)    +12 34 16.5928    &gt;&gt;&gt; a.pre = 3    &gt;&gt;&gt; a.trunc = True    &gt;&gt;&gt; print(a)    +12 34 16.592    &gt;&gt;&gt; a.ounit = &quot;degrees&quot;    &gt;&gt;&gt; print(a)    +188 34 08.892    &gt;&gt;&gt; a.ounit = &quot;radians&quot;    &gt;&gt;&gt; print(a)  # doctest: +SKIP    3.29115230606    &gt;&gt;&gt; a.ounit = &quot;degrees&quot;    &gt;&gt;&gt; a.s1 = &quot;DD &quot;    &gt;&gt;&gt; a.s2 = &quot;MM &quot;    &gt;&gt;&gt; a.s3 = &quot;SS&quot;    &gt;&gt;&gt; print(a)    +188DD 34MM 08.892SS    &gt;&gt;&gt; a = Angle(r=10)    &gt;&gt;&gt; a.d, a.h, a.r, a.arcs, a.ounit  # doctest: +NORMALIZE_WHITESPACE    (572.9577951308232, 38.197186342054884, 10, 2062648.0624709637, 'radians')    &gt;&gt;&gt; a.d = 10    &gt;&gt;&gt; a.d, a.h, a.r, a.arcs, a.ounit  # doctest: +NORMALIZE_WHITESPACE    (10.0, 0.6666666666666666, 0.17453292519943295, 36000.0, 'radians')    &gt;&gt;&gt; a.dms.mm = 60    &gt;&gt;&gt; a.d, a.h, a.r, a.arcs, a.ounit  # doctest: +NORMALIZE_WHITESPACE    (11.0, 0.7333333333333333, 0.19198621771937624, 39600.0, 'radians')    &gt;&gt;&gt; a.dms.dms = (1, 12, 10, 5.234)    &gt;&gt;&gt; a.d, a.h, a.r, a.arcs, a.ounit  # doctest: +NORMALIZE_WHITESPACE    (12.168120555555557, 0.8112080370370371, 0.21237376747404604,    43805.234000000004, 'radians')    &gt;&gt;&gt; a.hms.hms = (1, 1, 1, 1)    &gt;&gt;&gt; a.d, a.h, a.r, a.arcs, a.ounit  # doctest: +NORMALIZE_WHITESPACE    (15.254166666666668, 1.0169444444444444, 0.2662354329813017,    54915.00000000001, 'radians')    &gt;&gt;&gt; print(a)  # doctest: +SKIP    0.266235432981    &gt;&gt;&gt; a.ounit = 'hours'    &gt;&gt;&gt; print(a)    +01 01 01.000    &gt;&gt;&gt; a.ounit = 'degrees'    &gt;&gt;&gt; print(a)    +15 15 15.000Class for longitudinal angles~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A subclass of ``Angle`` that is normalized to the range ``[0, 24)``, i.e., aRight Ascension like angle. The ``ounit`` attribute is always &quot;hours&quot;... code-block:: python    &gt;&gt;&gt; from __future__ import print_function    &gt;&gt;&gt; from angles import AlphaAngle        &gt;&gt;&gt; a = AlphaAngle(d=180.5)    &gt;&gt;&gt; print(a)    +12HH 02MM 00.000SS    &gt;&gt;&gt; a = AlphaAngle(h=12.0)    &gt;&gt;&gt; print(a)    +12HH 00MM 00.000SS    &gt;&gt;&gt; a = AlphaAngle(h=-12.0)    &gt;&gt;&gt; a = AlphaAngle(&quot;12h14m23.4s&quot;)    &gt;&gt;&gt; print(a)    +12HH 14MM 23.400SS    &gt;&gt;&gt; a.r, a.d, a.h, a.arcs    (3.204380873430289, 183.5975, 12.239833333333333, 660951.0)    &gt;&gt;&gt; a = AlphaAngle(h=12.54678345)    &gt;&gt;&gt; a.hms.hms    (1, 12, 32, 48.42)    &gt;&gt;&gt; a.hms.sign, a.hms.hh, a.hms.mm, a.hms.ss    (1, 12, 32, 48.42)    &gt;&gt;&gt; print(a)    +12HH 32MM 48.420SS    &gt;&gt;&gt; a.pre = 5    &gt;&gt;&gt; a.hms.hms    (1, 12, 32, 48.42042)    &gt;&gt;&gt; print(a)    +12HH 32MM 48.42042SS    &gt;&gt;&gt; a.s1 = &quot; : &quot;    &gt;&gt;&gt; a.s2 = &quot; : &quot;    &gt;&gt;&gt; a.s3 = &quot;&quot;    &gt;&gt;&gt; print(a)    +12 : 32 : 48.42042    &gt;&gt;&gt; a.pre = 3    &gt;&gt;&gt; a.dms.dms    (1, 188, 12, 6.306)    &gt;&gt;&gt; a = AlphaAngle(h=25.0)    &gt;&gt;&gt; print(a)    +01HH 00MM 00.000SS    &gt;&gt;&gt; a = AlphaAngle(h=-1.0)    &gt;&gt;&gt; print(a)    +23HH 00MM 00.000SS    &gt;&gt;&gt; a.hms.hh = 23    &gt;&gt;&gt; a.hms.mm = 59    &gt;&gt;&gt; a.hms.ss = 59.99999    &gt;&gt;&gt; a.hms.hms    (1, 0, 0, 0.0)    &gt;&gt;&gt; print(a)    +00HH 00MM 00.000SS    &gt;&gt;&gt; a.pre = 5    &gt;&gt;&gt; a.hms.hms    (1, 23, 59, 59.99999)    &gt;&gt;&gt; print(a)    +23HH 59MM 59.99999SSClass for latitudinal angles~~~~~~~~~~~~~~~~~~~~~~~~~~~~A subclass of ``Angle`` that is normalized to the range ``[-90, 90]``, i.e., aDeclination like angle. The ``ounit`` attribute is always &quot;degrees&quot;... code-block:: python    &gt;&gt;&gt; from __future__ import print_function    &gt;&gt;&gt; from angles import DeltaAngle    &gt;&gt;&gt; a = DeltaAngle(d=-45.0)    &gt;&gt;&gt; print(a)    -45DD 00MM 00.000SS    &gt;&gt;&gt; a = DeltaAngle(d=180.0)    &gt;&gt;&gt; print(a)    +00DD 00MM 00.000SS    &gt;&gt;&gt; a = DeltaAngle(h=12.0)    &gt;&gt;&gt; print(a)    +00DD 00MM 00.000SS    &gt;&gt;&gt; a = DeltaAngle(sg=&quot;91d&quot;)    &gt;&gt;&gt; print(a)    +89DD 00MM 00.000SS    &gt;&gt;&gt; a = DeltaAngle(&quot;12d23m14.2s&quot;)    &gt;&gt;&gt; print(a)    +12DD 23MM 14.200SS    &gt;&gt;&gt; a.r, a.d, a.h, a.arcs    (0.2161987825813487, 12.387277777777777, 0.8258185185185185, 44594.2)    &gt;&gt;&gt; a = DeltaAngle(d=12.1987546)    &gt;&gt;&gt; a.dms.dms    (1, 12, 11, 55.517)    &gt;&gt;&gt; a.pre = 5    &gt;&gt;&gt; a.dms.dms    (1, 12, 11, 55.51656)    &gt;&gt;&gt; a.dms.dd, a.dms.mm, a.dms.ss    (12, 11, 55.51656)    &gt;&gt;&gt; a.pre = 0    &gt;&gt;&gt; a.dms.dms    (1, 12, 11, 56.0)    &gt;&gt;&gt; a = DeltaAngle(d=12.3459876)    &gt;&gt;&gt; a.s1 = &quot; : &quot;    &gt;&gt;&gt; a.s2 = &quot; : &quot;    &gt;&gt;&gt; a.s3 = &quot;&quot;    &gt;&gt;&gt; print(a)    +12 : 20 : 45.555    &gt;&gt;&gt; a = DeltaAngle(d=-91.0)    &gt;&gt;&gt; print(a)    -89DD 00MM 00.000SS    &gt;&gt;&gt; a = DeltaAngle(d=91.0)    &gt;&gt;&gt; print(a)    +89DD 00MM 00.000SS    &gt;&gt;&gt; a.dms.sign = 1    &gt;&gt;&gt; a.dms.dd = 89    &gt;&gt;&gt; a.dms.mm = 59    &gt;&gt;&gt; a.dms.ss = 59.9999    &gt;&gt;&gt; a.pre = 3    &gt;&gt;&gt; print(a)    +90DD 00MM 00.000SS    &gt;&gt;&gt; a.pre = 5    &gt;&gt;&gt; print(a)    +89DD 59MM 59.99990SS    &gt;&gt;&gt; a.dms.dms = (1, 0, 0, 0.0)    &gt;&gt;&gt; a.dms.dd = 89    &gt;&gt;&gt; a.dms.mm = 60    &gt;&gt;&gt; a.dms.ss = 60    &gt;&gt;&gt; a.pre = 3    &gt;&gt;&gt; print(a)    +89DD 59MM 00.000SSClass for points on a unit sphere~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A class for representing a point on a sphere. The input angle values are normalized to get the simplest representation of the coordinates of the point... code-block:: python   &gt;&gt;&gt; from __future__ import print_function    &gt;&gt;&gt; from angles import AngularPosition, r2d    &gt;&gt;&gt; a = AngularPosition.from_hd(&quot;12 22 54.899 +15 49 20.57&quot;)    &gt;&gt;&gt; print(a)    +12HH 22MM 54.899SS +15DD 49MM 20.570SS    &gt;&gt;&gt; a = AngularPosition.from_hd(&quot;12dd 22 54.899 +15 49 20.57&quot;)    &gt;&gt;&gt; print(a)    +00HH 49MM 31.660SS +15DD 49MM 20.570SS    &gt;&gt;&gt; a = AngularPosition.from_hd(&quot;12d 22 54.899 +15 49 20.57&quot;)    &gt;&gt;&gt; print(a)    +00HH 49MM 31.660SS +15DD 49MM 20.570SS    &gt;&gt;&gt; a = AngularPosition(alpha=165, delta=-91)  # alpha should flip by 180 degrees    &gt;&gt;&gt; round(a.alpha.d , 12), round(a.delta.d, 12)    (345.0, -89.0)    &gt;&gt;&gt; a.delta.d = -91 # alpha should now do another 180 flip and come back to 165    &gt;&gt;&gt; round(a.alpha.d, 12), round(a.delta.d, 12)    (165.0, -89.0)        &gt;&gt;&gt; a.delta.d = 89  # there should be no change in normalized angles    &gt;&gt;&gt; round(a.alpha.d, 12), round(a.delta.d, 12)    (165.0, 89.0)        &gt;&gt;&gt; a.alpha.d = -180  # alpha should normalize to 180 delta shouldn't change    &gt;&gt;&gt; round(a.alpha.d, 12), round(a.delta.d, 12)    (180.0, 89.0)    &gt;&gt;&gt; pos1 = AngularPosition(alpha=12.0, delta=90.0)    &gt;&gt;&gt; pos2 = AngularPosition(alpha=12.0, delta=0.0)    &gt;&gt;&gt; r2d(pos2.bear(pos1))    0.0    &gt;&gt;&gt; r2d(pos1.bear(pos2))    0.0    &gt;&gt;&gt; r2d(pos1.sep(pos2))    90.0    &gt;&gt;&gt; pos1.alpha.h = 0.0    &gt;&gt;&gt; pos2.alpha.h = 0.0    &gt;&gt;&gt; r2d(pos1.sep(pos2))    90.0    &gt;&gt;&gt; r2d(pos2.bear(pos1))    0.0    &gt;&gt;&gt; r2d(pos1.bear(pos2))    0.0Credits--------Some of the functions are adapted from the `TPM`_ C library by `JeffreyW. Percival`_.License-------Released under BSD; see LICENSE.txt.For comments and suggestions, email to user `prasanthhn` in the `gmail.com`domain.</longdescription>
</pkgmetadata>