<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![version](https://img.shields.io/pypi/v/des.svg) ![license](https://img.shields.io/pypi/l/des.svg)# DES (Data Encryption Standard)A pure Python implementation for the famous DES algorithm, supporting Python 2 and 3.## InstallationUsing `pip`:```bash$ pip install des ```Or manually download the archive and run the command after extracting the stuff inside:```bash$ python setup.py install```## UsageFirstly, define a `DesKey` object by passing your encryption / decryption key. The key should be of length 8, 16 or 24. The algorithm will be automatically chosen for you.Note that the key should be written as `bytes` in *Python 3*.```pythonfrom des import DesKeykey0 = DesKey(b&quot;some key&quot;)                  # for DESkey1 = DesKey(b&quot;a key for TRIPLE&quot;)          # for 3DES, same as &quot;a key for TRIPLEa key fo&quot;key2 = DesKey(b&quot;a 24-byte key for TRIPLE&quot;)  # for 3DESkey3 = DesKey(b&quot;1234567812345678REAL_KEY&quot;)  # for DES, same as &quot;REAL_KEY&quot;```You may know whether a key is for *DES* or *3DES* algorithm by calling its method `is_single()` or `is_triple()`.```pythonkey0.is_single()  # -&gt; Truekey1.is_triple()  # -&gt; Truekey2.is_single()  # -&gt; Falsekey3.is_triple()  # -&gt; False```Secondly, encrypt messages by calling the method `encrypt()` from the `DesKey` object, or decrypt them by calling `decrypt()`.Note that the messages should be written as `bytes` in *Python 3*.```pythonkey0.encrypt(b&quot;any long message&quot;)  # -&gt; b&quot;\x14\xfa\xc2 '\x00{\xa9\xdc;\x9dq\xcbr\x87Q&quot;```By default, *ECB Mode* is used. You may enable *CBC Mode* by passing the argument `initial`, as the *Initial Value*.The argument may be either a `bytes` object of length 8 or an integer using *big-endian*. ```pythonkey0.encrypt(b&quot;any long message&quot;, initial=0)        # -&gt; b&quot;\x14\xfa\xc2 '\x00{\xa9\xb2\xa5\xa7\xfb#\x86\xc5\x9b&quot;key0.encrypt(b&quot;any long message&quot;, initial=b&quot;\0&quot;*8)  # same as above```The *DES* algorithm requires the message to be of any length that is a multiple of 8.By default, the length of the message to encrypt / decrypt is assured by users.You may choose to turn on *PKCS5 Padding Mode*(by passing the argument `padding` with a TRUTHY value), telling Python to do the padding before encryption for you.```pythonkey0.encrypt(b&quot;abc&quot;, padding=True)  # -&gt; b&quot;%\xd1KU\x8b_A\xa6&quot;```While in decryption with *PKCS5 Padding*, the length of the message is still required to be a multiple of 8. But after decryption, Python will throw the padding characters away. ```pythonkey0.decrypt(b&quot;%\xd1KU\x8b_A\xa6&quot;, padding=True)  # -&gt; b&quot;abc&quot;```## NoteBecause DES keys are 56 bits and the input key to this algorithm is 8, 16 or 24 bytes, this implementation ignores the least significant bit of each key byte.</longdescription>
</pkgmetadata>