<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;em&gt;AioZipkin middleware for Starlette/FastApi&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mchlvl/starlette-zipkin/actions?query=workflow%3ACI&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/mchlvl/starlette-zipkin/workflows/CI/badge.svg&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/mchlvl/starlette-zipkin&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/codecov/c/github/mchlvl/starlette-zipkin?color=%2334D058&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/starlette-zipkin&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/starlette-zipkin?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;/p&gt;## Features- Using [sentry-asgi](https://github.com/encode/sentry-asgi) as a boilerplate- Client - based on `aiozipkin` - async compatible zipkin library- Server (any zipkin 2.0 compatible server will work) - Jaeger examples- Middleware tracing http traffic- Injecting tracing headers to responses- Extracting tracing headers from requests- Context variable with the span for every incoming request - possible to instrument tracing of lower level operations## Quick start### Run tracing server#### Jaeger all-in-oneFollow instructions at [https://www.jaegertracing.io/docs/latest/getting-started/](https://www.jaegertracing.io/docs/latest/getting-started/)```$ docker run -d --name jaeger \  -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \  -p 5775:5775/udp \  -p 6831:6831/udp \  -p 6832:6832/udp \  -p 5778:5778 \  -p 16686:16686 \  -p 14268:14268 \  -p 9411:9411 \  jaegertracing/all-in-one:latest```Trace queries at [http://localhost:16686/](http://localhost:16686/)### Add middleware```import uvicornfrom starlette.applications import Starlettefrom starlette.responses import JSONResponsefrom starlette.routing import Routefrom starlette_zipkin import ZipkinMiddlewareroutes = [    Route(&quot;/&quot;, JSONResponse({&quot;status&quot;: &quot;OK&quot;})),]app = Starlette(debug=True, routes=routes)app.add_middleware(ZipkinMiddleware)if __name__ == &quot;__main__&quot;:    uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8000, log_level=&quot;info&quot;, reload=True)```By default the client emits to `http://localhost:9411`.All traffic is captured and available at [http://localhost:16686/](http://localhost:16686/)## Advanced TutorialTo instrument tracing at lower levels, two helper functions are available:- `get_root_span` - returns the span instance corresponding to current request- `get_tracer` - returns the tracer instance corresponding to current request- `trace` - create span in the trace```import jsonimport asyncioimport uvicornfrom starlette.applications import Starlettefrom starlette.responses import JSONResponsefrom starlette.routing import Routefrom starlette_zipkin import (    ZipkinMiddleware,    ZipkinConfig,    trace,    B3Headers,    UberHeaders)async def homepage(request):    with trace(&quot;NewParent&quot;) as child_span:        # ! if headers not explicitly provided,\        # root span from middleware injects headers        # and becomes the parent for subsequet services        headers = child_span.context.make_headers()        child_span.kind(&quot;SERVER&quot;)        # possible span kinds        # CLIENT = &quot;CLIENT&quot;        # SERVER = &quot;SERVER&quot;        # PRODUCER = &quot;PRODUCER&quot;        # CONSUMER = &quot;CONSUMER&quot;        child_span.annotate(            &quot;Child, sleeps for 1, injects headers and becomes parent&quot;        )        await asyncio.sleep(1)        return JSONResponse({&quot;hello&quot;: &quot;world&quot;}, headers=headers)routes = [    Route(&quot;/&quot;, JSONResponse({&quot;status&quot;: &quot;OK&quot;})),    Route(&quot;/homepage&quot;, homepage),]app = Starlette(debug=True, routes=routes)config = ZipkinConfig(    host=&quot;localhost&quot;,    port=9411,    service_name=&quot;service_name&quot;,    sample_rate=1.0,    inject_response_headers=True,    force_new_trace=False,    json_encoder=json.dumps,    header_formatter=B3Headers)app.add_middleware(ZipkinMiddleware, config=config)if __name__ == &quot;__main__&quot;:    uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8000, log_level=&quot;info&quot;, reload=True)```This way we are able to followup at the call from a different service. Here we use the same server, but pass the tracing headers to subsequent calls to demonstrate future spans:## ConfigurationTo change the middleware configuration, provide a config object (here with default values being as shown)```import jsonfrom starlette_zipkin import ZipkinMiddleware, ZipkinConfig, B3Headersconfig = ZipkinConfig(    host=&quot;localhost&quot;,    port=9411,    service_name=&quot;service_name&quot;,    sample_rate=1.0,    inject_response_headers=True,    force_new_trace=False,    json_encoder=json.dumps,    header_formatter=B3Headers)app = Starlette()app.add_middleware(ZipkinMiddleware, config=config)```where:- `host = &quot;localhost&quot;`    - default local host, needs to be set to point at the agent that collects traces (e.g. jaeger-agent)- `port = 9411`    - default port, needs to be set to point at the agent that collects traces (e.g. jaeger-agent)    - 9411 is default for zipkin client/agent (and jaeger-agent)    - make sure to make accessible- `service_name = &quot;service_name&quot;`    - name of the service- `sample_rate = 1.0`    - zipkin sampling rate, default samples every call- `inject_response_headers = True`    - automatically inject response headers- `force_new_trace = False`    - if `True`, does not create child traces if incoming request contains tracing headers- `json_encoder=json.dumps`    - json encoder can be provided, defaults to json dumps. It is used to format dictionaries for Jaeger UI.- `header_formatter=B3Headers`    - defaults to b3 headers format. Can be switched to UberHeaders, which imply the `uber-trace-id` format.</longdescription>
</pkgmetadata>