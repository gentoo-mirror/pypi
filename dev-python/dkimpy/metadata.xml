<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>dkimpy - DKIM (DomainKeys Identified Mail)https://launchpad.net/dkimpy/Friendly fork of:http://hewgill.com/pydkim/# INTRODUCTIONdkimpy is a library that implements DKIM (DomainKeys Identified Mail) emailsigning and verification.  Basic DKIM requirements are defined in RFC 6376:https://tools.ietf.org/html/rfc6376# VERSIONThis is dkimpy 1.1.3.# REQUIREMENTSDependencies will be automatically included for normal DKIM usage.  Theextras_requires feature 'ed25519' will add the dependencies needed for signingand verifying using the new DCRUP ed25519-sha256 algorithm.  Theextras_requires feature 'ARC' will add the extra dependencies needed for ARC.Similarly, extras_requires feature 'asyncio' will add the extra dependenciesneeded for asyncio. - Python 3.x &gt;= 3.5.  Recent versions have not been on python3 &lt; 3.4, but   may still work on earlier python3 versions. - dnspython or py3dns. dnspython is preferred if both are present and   installed to satisfy the DNS module requirement if neither are installed. - authres.  Needed for ARC. - PyNaCl.  Needed for use of ed25519 capability. - aiodns.  Needed for asycnio (Requires python3.5 or later)# INSTALLATIONThis package includes a scripts and man pages.  For those to be installed wheninstalling using setup.py, the following incantation is required becausesetuptools developers decided not being able to do this by default is afeature:```python3 setup.py install --single-version-externally-managed --record=/dev/null```# DOCUMENTATIONAn online version of the package documentation for the most recent release canbe found at:https://pymilter.org/pydkim/# TESTINGTo run dkimpy's test suite:```PYTHONPATH=. python3 dkim```or```python3 test.py```or```PYTHONPATH=. python3 -m unittest dkim.tests.test_suite```Alternatively, if you have testrepository installed:```testr init``````testr run```You should install all optional dependencies required for the test suite, e.g.by creating a virtualenv and using:```pip install -e '.[testing]'```The included ARC tests are very limited.  The primary testing method for ARCis using the ARC test suite: https://github.com/ValiMail/arc_test_suiteAs of 0.6.0, all tests pass for both python2.7 and python3. The test suite ships with test runners for dkimpy.  After downloading the test suite, you can run the signing and validation tests like this:```python3 ./testarc.py sign runners/arcsigntest.py``````python3 ./testarc.py validate runners/arcverifytest.py```As ov version 1.1.0, python2.7 is no longer supported.# USAGEThe dkimpy library offers one module called dkim. The sign() function takes anRFC822 formatted message, along with some signing options, and returns aDKIM-Signature header line that can be prepended to the message. The verify()function takes an RFC822 formatted message, and returns True or False dependingon whether the signature verifies correctly.  There is also a DKIM class whichcan be used to perform these functions in a more modern way.In version 0.9.0, the default set of header fields that are oversigned waschanged from 'from', 'subject', 'date' to 'from' to reduce fragility ofsignatures.  To restore the previous behavior, you can add them back afterinstantiating your DKIM class using the add_frozen function as shown in thefollowing example:```python&gt;&gt;&gt; dkim = DKIM()&gt;&gt;&gt; dkim.add_frozen((b'date',b'subject'))&gt;&gt;&gt; [text(x) for x in sorted(dkim.frozen_sign)]['date', 'from', 'subject']```## DKIM RSA MODERNIZATION (RFC 8301)RFC8301 updated DKIM requirements in two ways:1.  It set the minimum valid RSA key size to 1024 bits.2.  It removed use of rsa-sha1.As of version 0.7, the dkimpy defaults largely support these requirements.It is possible to override the minimum key size to a lower value, but this isstrongly discouraged.  As of 2018, keys much smaller than the minimum are notdifficult to factor.The code for rsa-sha1 signing and verification is retained, but not used forsigning by default.  Future releases will raise warnings and then errors whenverifying rsa-sha1 signatures.  There are still some significant users ofrsa-sha1 signatures, so operationally it's premature to disable verificationof rsa-sha1.## ED25519 (RFC 8463) SUPPORTAs of version 0.7, experimental signing and verifying of DKIM Ed25519signatures is supported as described in draft-ietf-dcrup-dkim-crypto:https://datatracker.ietf.org/doc/draft-ietf-dcrup-dkim-crypto/The RFC that documents ed25519 DKIM signatures, RFC 8463, has been releasedand dkimpy 0.7 and later are aligned to its requirements.  As of 0.8, ed25519need not be considered experimental.  The dkimpy implementation hassuccessfully interoperated with three other implementations and the technicalparameters for ed25519-sha256 are defined and stable.To install from pypi with the required optional depenencies, use the ed25519option:```pip install -e '.[ed25519]'```## DKIM SCRIPTSThree helper programs are also supplied: dknewkey, dkimsign anddkimverifydknewkey is s script that produces private and public key pairs suitablefor use with DKIM.  Note that the private key file format used for ed25519 isnot standardized (there is no standard) and is unique to dkimpy.  Creation ofkeys should be done in a secure environment.  If an unauthorized entity gainsaccess to current private keys they can generate signed email that will passDKIM checkes and will be difficult to repudiate.dkimsign is a filter that reads an RFC822 message on standard input, andwrites the same message on standard output with a DKIM-Signature lineprepended. The signing options are specified on the command line:dkimsign selector domain privatekeyfile [identity]The identity is optional and defaults to &quot;@domain&quot;.dkimverify reads an RFC822 message on standard input, and returns with exitcode 0 if the signature verifies successfully. Otherwise, it returns with exitcode 1. ## ARC (Authenticated Receive Chain)As of version 0.6.0, dkimpy provides experimental support for ARC (AuthenticatedReceived Chain).  See RFC 8617 for the current version of ARC:https://tools.ietf.org/html/rfc8617In addition to arcsign and arcverify, the dkim module now providesarc_sign and arc_verify functions as well as an ARC class.If an invalid authentication results header field is included in the set forARC, it is ignored and no error is raised.Both DKIM ed25519 and ARC are now considered stable (no longer experimantal).## ASYNC SUPPORTAs of version 1.0, an alternative to dkim.verify for use in an asyncenvironment is provied.  It requires aiodns, https://pypi.org/project/aiodns/.Here is a simple example of dkim.verify_async usage:```python&gt;&gt;&gt; sys.stdin = sys.stdin.detach()&gt;&gt;&gt;&gt;&gt;&gt; async def main():&gt;&gt;&gt;     res = await dkim.verify_async(message)&gt;&gt;&gt;     return res&gt;&gt;&gt;&gt;&gt;&gt; if __name__ == &quot;__main__&quot;:&gt;&gt;&gt;     res = asyncio.run(main())```This feature requires python3.5 or newer.If aiodns is available, the async functions will be used.  To avoide asyncwhen aiodns is availale, set dkim.USE_ASYNC = False.## TLSRPT (TLS Report)As of version 1.0, the RFC 8460 tlsrpt service type is supported:https://tools.ietf.org/html/rfc8460A non-tlsrpt signed with a key record with s=tlsrpt won't verify.  Since theservice type (s=) is optional in the DKIM public key record, it is notrequired by RFC 8460.  When checking for a tlsrpt signature, set the tlsrpt=flag when verifying the signature:```python&gt;&gt;&gt; res = dkim.verify(smessage, tlsrpt='strict')```If tlsrpt='strict', only public key records with s=tlsrpt will be consideredvalid.  If set to tlsrpt=True, the service type is not required, but otherRFC 8460 requirements are applied.# LIMITATIONSDkimpy will correctly sign/verify messages with ASCII or UTF-8 content.Messages that contain other types of content will not verify correctly.  Itdoes not yet implement RFC 8616, Email Authentication for InternationalizedMail.# FEEDBACKBug reports may be submitted to the bug tracker for the dkimpy project onlaunchpad.</longdescription>
</pkgmetadata>