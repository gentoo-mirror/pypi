<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dictobjectThere are a number of excellent packages that extend the python dictionary to all object-like access (e.g. dict.key).This aims to add some additional features to those projects by creating a python dictionary that is accessible (like an object) through attributes and allows default value and warningspydictobject adds to the python dict by:- Allowing access through the dict.key notation- Setting new items with dict.key = value notation- Allowing a default value to be set, which is returned if the key is not in the dictionary- Optionally warning if the key is not found and default value is being returned- Recursively changing any nested dicts to DictObjects and back againAdditionally, deepcopy has been implemented to create new copies of any nested DictObjects.## Installation```pip install pydictobject```## Import```pythonfrom pydictobject import DictObject```## Initialise```pythondob = DictObject({'foo': 1, 'bar': 2})```## Parameters:- input_dict(dict): Optional. If not set, an empty dictionary is initialised.- default_to: Optional. If set, this is the value that is returned if a key is not in the dictionary.- warn_key_not_found (bool): Optional prints a warning if a key is not found and default_to is returned. Defaults to False.# Example usage```pythondob = DictObject({'foo': 1, 'bar': 2})&gt;&gt;&gt; dob.foo1&gt;&gt;&gt; dob['bar']2&gt;&gt;&gt; dob.baz = 3 # Set new value with dot notation&gt;&gt;&gt; dob.baz3```### Return default value if key not found```python&gt;&gt;&gt; dob = DictObject({'foo': 1, 'bar': 2}, default_to='Key Not Set')&gt;&gt;&gt; dob.baz'Key Not Set'&gt;&gt;&gt; dob.baz = 3&gt;&gt;&gt; dob.baz3# set default_to after instantiation&gt;&gt;&gt; dob = DictObject({'foo': 1, 'bar': 2})&gt;&gt;&gt; dob.bootle# Raises KeyError&gt;&gt;&gt; dob.set_default_to['Key not set']&gt;&gt;&gt; dob.bootle'Key not set'```### Nesting(See later for converting nested dictionaries)```pythondob = DictObject({'foo': 1, 'bar': 2})dob.baz = DictObject({'a': 3, 'b': 4})dob# Note: Display indenting added for clarityDictObject({    'foo': 1,    'bar': 2,    'baz': DictObject({        'a': 3,        'b': 4        })    })&gt;&gt;&gt; dob.baz.a3# Set new value within nested tree&gt;&gt;&gt; dob.baz.c = 5&gt;&gt;&gt; dobDictObject({    'foo': 1,    'bar': 2,    'baz': DictObject({        'a': 3,        'b': 4,        'c': 5        })    })```### Optional: warn if key not found but do not stop flowWarn if a key is not found and default_to is being returned.Particularly useful if default_to is set to _None_```python&gt;&gt;&gt; dob = DictObject({'foo': 1, 'bar': 2}, default_to=None, warn_key_not_found=True)&gt;&gt;&gt; dob.not_a_keyUserWarning: Key not_a_key not found in DictTuple. Returning None# Returns None# Set turn warnings on or off after instantiation&gt;&gt;&gt; dob.warn_key_not_found() # turns warnings on&gt;&gt;&gt; dob.warn_key_not_found(False) # turns warnings off```### Converting to / from a dictConvert any nested dictionaries to DictObject```python&gt;&gt;&gt; dob = DictObject({'foo': 1, 'bar': 2, 'baz': {'c': 3, 'd': 4}, convert_nested=True)&gt;&gt;&gt; dobDictObject({'foo': 1, 'bar': 2, 'baz': DictObject{'c': 3, 'd': 4}})# Convert nested objects after initialisation&gt;&gt;&gt; dob = DictObject({{'foo': 1, 'bar': 2, 'zonk': {'a': 'zonk', 'b': 'zonky' 'c': {'d': 3, 'e': 4}}})dobDictObject({  'foo': 1,  'bar': 2,  'zonk': {      'a': 'zonk',      'b': 'zonky' 'c': {          'd': 3,          'e': 4            }      }  })&gt;&gt;&gt; dob.convert_dicts(recursive=True)&gt;&gt;&gt; dobDictObject({  'foo': 1,  'bar': 2,  'zonk': DictObject{      'a': 'zonk',      'b': 'zonky',      'c': DictObject{          'd': 3,          'e': 4}      }  })# Access nested members&gt;&gt;&gt; dob.zonk.c.d3# Convert back to a dict, including any nested objects&gt;&gt;&gt; dob.todict() # Defaults to recursive{'foo': 1, 'bar': 2, 'zonk': {'a': 'zonk', 'b': 'zonky' 'c': {'d': 3, 'e': 4}}}&gt;&gt;&gt; dob.todict(False) # Nested DictObjects not converted to dict{  'foo': 1,  'bar': 2,  'zonk': DictObject{      'a': 'zonk',      'b': 'zonky',      'c': DictObject{          'd': 3,          'e': 4}      }  }```# All standard python dict functions work```python&gt;&gt;&gt; dob = DictObject({'foo': 1, 'bar': 2}, default_to='Not Set')&gt;&gt;&gt; dob.update({'bar': 'Two', 'baz': 3})&gt;&gt;&gt; dobDictObject{'foo': 1, 'bar': 'Two', 'baz': 3}&gt;&gt;&gt; dob['bar'] = 'II'&gt;&gt;&gt; dobDictObject{'foo': 1, 'bar': 'II', 'baz': 3}&gt;&gt;&gt; dob.keys()dict_keys(['foo', 'bar', 'baz'])&gt;&gt;&gt; for key in dob:        print(f'{key} = {dob[key]}')foo = 1bar = IIbaz = 3&gt;&gt;&gt; 'bazz' in dobFalse&gt;&gt;&gt; dob = DictObject({'foo': 1, 'bar': 2}) # default_to is not set&gt;&gt;&gt; dob.baz# Raises KeyError&gt;&gt;&gt; dob['baz']# Raises KeyError&gt;&gt;&gt; dob.get('baz', 3)3```### Copying#### DeepcopyDeep copies create new copies of any nested objects.```python&gt;&gt;&gt; from copy import deepcopy&gt;&gt;&gt; dob = DictObject({'foo': 1, 'bar': 2}, warn_key_not_found=True, default_to=None)&gt;&gt;&gt; dob.baz = {'a': 1, 'b': {'c': 3, 'd': 4}}&gt;&gt;&gt; dob.convert_dicts()&gt;&gt;&gt; dob DictObject{'foo': 1, 'bar': 2, 'baz': DictObject{'a': 1, 'b': {'c': 3, 'd': 4}}}&gt;&gt;&gt; dob2 = deepcopy(dob)&gt;&gt;&gt; dob.baz.a = 3&gt;&gt;&gt; dobDictObject{'foo': 1, 'bar': 2, 'baz': DictObject{'a': 3, 'b': {'c': 3, 'd': 4}}}dob2DictObject{'foo': 1, 'bar': 2, 'baz': DictObject{'a': 1, 'b': {'c': 3, 'd': 4}}}```#### Shallow copyIn the example above,if dob2 is created with using```python&gt;&gt;&gt; dob2 = dob.copy()```setting dob.baz.a = 3 would also change dob2.baz.a to 3</longdescription>
</pkgmetadata>