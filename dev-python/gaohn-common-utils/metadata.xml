<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Common Utils[![Continuous Integration](https://github.com/gao-hongnan/common-utils/actions/workflows/continuous_integration.yaml/badge.svg)](https://github.com/gao-hongnan/common-utils/actions/workflows/continuous_integration.yaml)## TODOs1. Use own `Logger` once the class is finalized in all scripts.## Continuous Integration### Virtual EnvironmentFirst, make a virtual environment with `make_venv.sh`:```bashcurl -s -o make_venv.sh \  https://raw.githubusercontent.com/gao-hongnan/common-utils/main/scripts/devops/make_venv.sh &amp;&amp; \bash make_venv.sh venv --pyproject --dev &amp;&amp; \source venv/bin/activate &amp;&amp; \rm make_venv.sh```### Continue on error vs If AlwaysSee[here](https://stackoverflow.com/questions/58858429/how-to-run-a-github-actions-step-even-if-the-previous-step-fails-while-still-f/58859404#58859404).### Run Bandit Security Check```bashbash ./scripts/devops/ci/ci_security_bandit.sh \  --severity-level=low \  --format=json \  --output=bandit_results.json \  common_utils```### Run Linter Check```bashbash ./scripts/devops/ci/ci_linter_pylint.sh \  --rcfile=pyproject.toml \  --fail-under=10 \  --score=yes \  --output-format=json:pylint_results.json,colorized \  common_utils```### Run Formatter Black Check```bashbash ./scripts/devops/ci/ci_formatter_black.sh \  --check \  --diff \  --color \  --verbose \  common_utils```### Run Formatter Isort Check```bashbash ./scripts/devops/ci/ci_formatter_isort.sh \  --check \  --diff \  --color \  --verbose \  common_utils```## Run MyPy Type Check```bashbash ./scripts/devops/ci/ci_typing_mypy.sh \  --config-file=pyproject.toml \  common_utils \  | tee mypy_results.log```### Run Unit Test## Run Integration Test### Run System Test### Run Acceptance TestSee [madewithml](https://madewithml.com/courses/mlops/testing/).### Run Data Test (Great Expectations)### Run Markdown Lint```bashnpm install -g markdownlint-cli &amp;&amp; \touch .markdownlint.json &amp;&amp; \``````bashnpm install --save-dev --save-exact prettier``````bash# prettierfunction pr() {  if [ -z &quot;$1&quot; ]; then    echo &quot;Error: TARGET_DIR is mandatory.&quot;    return 1  fi  TARGET_DIR=&quot;$1&quot;  prettier &quot;$TARGET_DIR&quot; --write \    --prose-wrap always \    --print-width 80 \    --tab-width 4 \    --use-tabs true}``````bashpr &lt;TARGET_MARKDOWN_FILE&gt;markdownlint --fix &lt;TARGET_MARKDOWN_FILE&gt;```</longdescription>
</pkgmetadata>