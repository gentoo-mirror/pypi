<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Keycloak AuthorizationMiddleware to allow authorization using Keycloak and Django for django-rest-framework (DRF) and Graphene-based projects.This package should only be used in projects starting from scratch, since it overrides the users' management.## Installation1. Add the module to your environment    * With PIP:        ```shell        pip install django-uw-keycloak        ```    * By compiling from source:        ```shell        git clone https://github.com/urbanplatform/django-keycloak-auth &amp;&amp; \        cd django-keycloak-auth &amp;&amp; \        python3 setup.py install        ```2. Add `django_keycloak` to the Django project's `INSTALLED_APPS` set in the `settings` file3. Add `django_keycloak.middleware.KeycloakMiddleware` to the Django `MIDDLEWARE` set in the `settings` file4. In your Django project's `settings` file, change the Django `AUTHENTICATION_BACKENDS` to:    ```python    AUTHENTICATION_BACKENDS = ('django_keycloak.backends.KeycloakAuthenticationBackend',)    ```5. Add the following configuration to Django settings and replace the values with your own configuration attributes:    ```python    KEYCLOAK_CONFIG = {        # The Keycloak's Public Server URL (e.g. http://localhost:8080)        'SERVER_URL': '&lt;PUBLIC_SERVER_URL&gt;',        # The Keycloak's Internal URL         # (e.g. http://keycloak:8080 for a docker service named keycloak)        # Optional: Default is SERVER_URL        'INTERNAL_URL': '&lt;INTERNAL_SERVER_URL&gt;',        # Override for default Keycloak's base path        # Default is '/auth/'        'BASE_PATH': '/auth/',        # The name of the Keycloak's realm        'REALM': '&lt;REALM_NAME&gt;',        # The ID of this client in the above Keycloak realm        'CLIENT_ID': '&lt;CLIENT_ID&gt;'         # The secret for this confidential client        'CLIENT_SECRET_KEY': '&lt;CLIENT_SECRET_KEY&gt;',        # The name of the admin role for the client        'CLIENT_ADMIN_ROLE': '&lt;CLIENT_ADMIN_ROLE&gt;',        # The name of the admin role for the realm        'REALM_ADMIN_ROLE': '&lt;REALM_ADMIN_ROLE&gt;',        # Regex formatted URLs to skip authentication        'EXEMPT_URIS': [],        # Flag if the token should be introspected or decoded (default is False)        'DECODE_TOKEN': False,        # Flag if the audience in the token should be verified (default is True)        'VERIFY_AUDIENCE': True,        # Flag if the user info has been included in the token (default is True)        'USER_INFO_IN_TOKEN': True,        # Flag to show the traceback of debug logs (default is False)        'TRACE_DEBUG_LOGS': False,        # The token prefix that is expected in Authorization header (default is 'Bearer')        'TOKEN_PREFIX': 'Bearer'    }    ```6. Override the Django user model in the `settings` file:     ```python    AUTH_USER_MODEL = &quot;django_keycloak.KeycloakUserAutoId&quot;    ```7. Configure Django-Rest-Framework authentication classes with `django_keycloak.authentication.KeycloakAuthentication`:    ```python    REST_FRAMEWORK = {        # ... other rest framework settings.        'DEFAULT_AUTHENTICATION_CLASSES': [            'django_keycloak.authentication.KeycloakAuthentication'        ],    }    ```## Customization### Server URLsTo customise Keycloak's URL path, set `BASE_PATH` (for example `/my_path` or `/`) as follows:* `SERVER_URL/auth/admin/...` to `SERVER_URL/my_path/admin/...`* `SERVER_URL/auth/realms/...` to `SERVER_URL/realms/...`If your OAuth clients (web or mobile app) use a different URL than your Django service, specify the public URL (`https://oauth.example.com`) in `SERVER_URL` and the internal URL (`http://keycloak.local`) in `INTERNAL_URL`.## DRY PermissionsThe permissions must be set like in other projects. You must set thepermissions configuration for each model. Example:```python@staticmethod@authenticated_usersdef has_read_permission(request):    roles = request.remote_user.get('client_roles')    return True if 'ADMIN' in roles else False```## Keycloak users synchronizationThe management command `sync_keycloak_users` must be ran periodically, inorder to remove from the users no longer available atKeycloak from the local users. This command can be called using the task named`sync_users_with_keycloak`, using Celery. Fot that, you just need to:* Add the task to the `CELERY_BEAT_SCHEDULE` Ã¬n the Django project's settings:  ```python  CELERY_BEAT_SCHEDULE = {      'sync_users_with_keycloak': {          'task': 'django_keycloak.tasks.sync_users_with_keycloak',          'schedule': timedelta(hours=24),          'options': {'queue': 'sync_users'}      },  }  ```* Add the `sync_users` queue to the `docker-compose`'s `celery` service:  `command: celery worker -A citibrain_base -B -E -l info -Q backup,celery,sync_users --autoscale=4,1`**Attention:** This task is only responsible to delete users from localstorage. The creation of new users, on Keycloak, is done when theytry to login.## NotesSupport for celery 5: from version 0.7.4 on we should use celery 5 for the user sync. This implies running celery with `celery -A app worker ...` instead of `celery worker -A app ...`## Contactdjango-keycloak-auth [at] googlegroups [dot] com</longdescription>
</pkgmetadata>