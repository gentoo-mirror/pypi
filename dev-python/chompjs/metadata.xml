<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chompjs![license](https://img.shields.io/github/license/Nykakin/chompjs?style=flat-square)![pypi version](https://img.shields.io/pypi/v/chompjs.svg)![python version](https://img.shields.io/pypi/pyversions/chompjs.svg)![downloads](https://img.shields.io/pypi/dm/chompjs.svg)Transforms JavaScript objects into Python data structures.In web scraping, you sometimes need to transform Javascript objects embedded in HTML pages into valid Python dictionaries. `chompjs` is a library designed to do that as a more powerful replacement of standard `json.loads`:```python&gt;&gt;&gt; chompjs.parse_js_object(&quot;{a: 100}&quot;){'a': 100}&gt;&gt;&gt;&gt;&gt;&gt; json_lines = &quot;&quot;&quot;... {'a': 12}... {'b': 13}... {'c': 14}... &quot;&quot;&quot;&gt;&gt;&gt; for entry in chompjs.parse_js_objects(json_lines):...     print(entry)... {'a': 12}{'b': 13}{'c': 14}```[Reference documentation](https://nykakin.github.io/chompjs/)## Quickstart**1. installation**```&gt; pip install chompjs```or build from source:```bash$ git clone https://github.com/Nykakin/chompjs$ cd chompjs$ python setup.py build$ python setup.py install```## FeaturesThere are two functions available:* `parse_js_object` - try reading first encountered JSON-like object. Raises `ValueError` on failure* `parse_js_objects` - returns a generator yielding all encountered JSON-like objects. Can be used to read [JSON Lines](https://jsonlines.org/). Does not raise on ivalid input.An example usage with `scrapy`:```pythonimport chompjsimport scrapyclass MySpider(scrapy.Spider):    # ...    def parse(self, response):        script_css = 'script:contains(&quot;__NEXT_DATA__&quot;)::text'        script_pattern = r'__NEXT_DATA__ = (.*);'        # warning: for some pages you need to pass replace_entities=True        # into re_first to have JSON escaped properly        script_text = response.css(script_css).re_first(script_pattern)        try:            json_data = chompjs.parse_js_object(script_text)        except ValueError:            self.log('Failed to extract data from {}'.format(response.url))            return        # work on json_data```Parsing of [JSON5 objects](https://json5.org/) is supported:```python&gt;&gt;&gt; data = &quot;&quot;&quot;... {...   // comments...   unquoted: 'and you can quote me on that',...   singleQuotes: 'I can use &quot;double quotes&quot; here',...   lineBreaks: &quot;Look, Mom! \... No \\n's!&quot;,...   hexadecimal: 0xdecaf,...   leadingDecimalPoint: .8675309, andTrailing: 8675309.,...   positiveSign: +1,...   trailingComma: 'in objects', andIn: ['arrays',],...   &quot;backwardsCompatible&quot;: &quot;with JSON&quot;,... }... &quot;&quot;&quot;&gt;&gt;&gt; chompjs.parse_js_object(data){'unquoted': 'and you can quote me on that', 'singleQuotes': 'I can use &quot;double quotes&quot; here', 'lineBreaks': &quot;Look, Mom! No \n's!&quot;, 'hexadecimal': 912559, 'leadingDecimalPoint': 0.8675309, 'andTrailing': 8675309.0, 'positiveSign': '+1', 'trailingComma': 'in objects', 'andIn': ['arrays'], 'backwardsCompatible': 'with JSON'}```If the input string is not yet escaped and contains a lot of `\\` characters, then `unicode_escape=True` argument might help to sanitize it:```python&gt;&gt;&gt; chompjs.parse_js_object('{\\\&quot;a\\\&quot;: 12}', unicode_escape=True){'a': 12}```By default `chompjs` tries to start with first `{` or `[` character it founds, omitting the rest:```python&gt;&gt;&gt; chompjs.parse_js_object('&lt;div&gt;...&lt;/div&gt;&lt;script&gt;foo = [1, 2, 3];&lt;/script&gt;&lt;div&gt;...&lt;/div&gt;')[1, 2, 3]````json_params` argument can be used to pass options to underlying `json_loads`, such as `strict` or `object_hook`:```python&gt;&gt;&gt; import decimal&gt;&gt;&gt; import chompjs&gt;&gt;&gt; chompjs.parse_js_object('[23.2]', json_params={'parse_float': decimal.Decimal})[Decimal('23.2')]```# RationaleIn web scraping data often is not present directly inside HTML, but instead provided as an embedded JavaScript object that is later used to initialize the page, for example:```html&lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;...&lt;script type=&quot;text/javascript&quot;&gt;window.__PRELOADED_STATE__={&quot;foo&quot;: &quot;bar&quot;}&lt;/script&gt;...&lt;/body&gt;&lt;/html&gt;```Standard library function `json.loads` is usually sufficient to extract this data:```python&gt;&gt;&gt; # scrapy shell file:///tmp/test.html&gt;&gt;&gt; import json&gt;&gt;&gt; script_text = response.css('script:contains(__PRELOADED_STATE__)::text').re_first('__PRELOADED_STATE__=(.*)')&gt;&gt;&gt; json.loads(script_text){u'foo': u'bar'}```The problem is that not all valid JavaScript objects are also valid JSONs. For example all those strings are valid JavaScript objects but not valid JSONs:* `&quot;{'a': 'b'}&quot;` is not a valid JSON because it uses `'` character to quote* `'{a: &quot;b&quot;}'`is not a valid JSON because property name is not quoted at all* `'{&quot;a&quot;: [1, 2, 3,]}'` is not a valid JSON because there is an extra `,` character at the end of the array* `'{&quot;a&quot;: .99}'` is not a valid JSON because float value lacks a leading 0As a result, `json.loads` fail to extract any of those:```python&gt;&gt;&gt; json.loads(&quot;{'a': 'b'}&quot;)Traceback (most recent call last):  ...ValueError: Expecting property name: line 1 column 2 (char 1)&gt;&gt;&gt; json.loads('{a: &quot;b&quot;}')Traceback (most recent call last):  ...ValueError: Expecting property name: line 1 column 2 (char 1)&gt;&gt;&gt; json.loads('{&quot;a&quot;: [1, 2, 3,]}')Traceback (most recent call last):  ...ValueError: No JSON object could be decoded&gt;&gt;&gt; json.loads('{&quot;a&quot;: .99}')Traceback (most recent call last):  ...json.decoder.JSONDecodeError: Expecting value: line 1 column 7 (char 6)````chompjs` library was designed to bypass this limitation, and it allows to scrape such JavaScript objects into proper Python dictionaries:```python&gt;&gt;&gt; import chompjs&gt;&gt;&gt; &gt;&gt;&gt; chompjs.parse_js_object(&quot;{'a': 'b'}&quot;){'a': 'b'}&gt;&gt;&gt; chompjs.parse_js_object('{a: &quot;b&quot;}'){'a': 'b'}&gt;&gt;&gt; chompjs.parse_js_object('{&quot;a&quot;: [1, 2, 3,]}'){'a': [1, 2, 3]}&gt;&gt;&gt; chompjs.parse_js_object('{&quot;a&quot;: .99}'){'a': 0.99}```Internally `chompjs` use a parser written in C to iterate over raw string, fixing its issues along the way. The final result is then passed down to standard library's `json.loads`, ensuring a high speed as compared to full-blown JavaScript parsers such as `demjson`.```python&gt;&gt;&gt; import json&gt;&gt;&gt; import _chompjs&gt;&gt;&gt; &gt;&gt;&gt; _chompjs.parse('{a: 1}')'{&quot;a&quot;:1}'&gt;&gt;&gt; json.loads(_){'a': 1}```# DevelopmentPull requests are welcome. To run unittests```$ tox```</longdescription>
</pkgmetadata>