<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>HTTP Request Randomizer |Build Status| |codecov| |Requirements Status| |PyPI version|=====================================================================================`Vietnamese version &lt;README-vi.md&gt;`__A convenient way to implement HTTP requests is using Pythons’**requests** library. One of requests’ most popular features is simpleproxying support. HTTP as a protocol has very well-defined semantics fordealing with proxies, and this contributed to the widespread deploymentof HTTP proxiesProxying is very useful when conducting intensive web crawling/scrappingor when you just want to hide your identity (anonymization).In this project I am using public proxies to randomise http requestsover a number of IP addresses and using a variety of known user agentheaders these requests look to have been produced by differentapplications and operating systems.Proxies-------Proxies provide a way to use server P (the middleman) to contact serverA and then route the response back to you. In more nefarious circles,it’s a prime way to make your presence unknown and pose as many clientsto a website instead of just one client. Often times websites will blockIPs that make too many requests, and proxies is a way to get aroundthis. But even for simulating an attack, you should know how it’s done.User Agent----------Surprisingly, the only thing that tells a server the applicationtriggered the request (like browser type or from a script) is a headercalled a “user agent” which is included in the HTTP request.The source code---------------The project code in this repository is crawling **five** differentpublic proxy websites: \* http://proxyfor.eu/geo.php \*http://free-proxy-list.net \* http://rebro.weebly.com/proxy-list.html \*http://www.samair.ru/proxy/time-01.htm \* https://www.sslproxies.orgAfter collecting the proxy data and filtering the slowest ones it israndomly selecting one of them to query the target url. The requesttimeout is configured at 30 seconds and if the proxy fails to return aresponse it is deleted from the application proxy list. I have tomention that for each request a different agent header is used. Thedifferent headers are stored in the **/data/user_agents.txt** file whichcontains around 900 different agents.Installation------------If you wish to use this module as a `CLItool &lt;#command-line-interface&gt;`__, install it globally via pip:::     pip install http-request-randomizerOtherwise, you can clone the repository and use setup tools:::   python setup.py installDev testing-----------Clone repo, install requirements, develop and run tests:::   pip install -r requirements.txt   tox -e pyDevVerboseHow to use-----------  `Command-line interface &lt;#command-line-interface&gt;`__-  `Library API &lt;#api&gt;`__Command-line interface----------------------Assuming that you have **http-request-randomizer** installed, you canuse the commands below:show help message:::   proxyList   -h, --helpspecify proxy provider(s) (required):::     -s {proxyforeu,rebro,samair,freeproxy,all} Specify output stream (default: sys.stdout), could also be a file:::     -o, --outfilespecify provider timeout threshold in seconds:::     -t, --timeoutspecify proxy bandwidth threshold in KBs:::     -bw, --bandwidthshow program’s version number:::     -v, --versionAPI---To use **http-request-randomizer** as a library, include it in yourrequirements.txt file. Then you can simply generate a proxied requestusing a method call:.. code:: python   import logging   import time   from http_request_randomizer.requests.proxy.requestProxy import RequestProxy   if __name__ == '__main__':       start = time.time()       req_proxy = RequestProxy(log_level=logging.ERROR)       print(&quot;Initialization took: {0} sec&quot;.format((time.time() - start)))       print(&quot;Size: {0}&quot;.format(len(req_proxy.get_proxy_list())))       print(&quot;ALL = {0} &quot;.format(list(map(lambda x: x.get_address(), req_proxy.get_proxy_list()))))       test_url = 'http://ipv4.icanhazip.com'       while True:           start = time.time()           request = req_proxy.generate_proxied_request(test_url)           print(&quot;Proxied Request Took: {0} sec =&gt; Status: {1}&quot;.format((time.time() - start), request.__str__()))           if request is not None:               print(&quot;\t Response: ip={0}&quot;.format(u''.join(request.text).encode('utf-8')))           print(&quot;Proxy List Size: {0}&quot;.format(len(req_proxy.get_proxy_list())))           print(&quot;-&gt; Going to sleep..&quot;)           time.sleep(10)Changing log levels~~~~~~~~~~~~~~~~~~~The ``RequestProxy`` constructor accepts an optional parameter of``log_level`` that can be used to change the level of logging. Bydefault, this is equal to 0, or NOTSET. The python logging levels aredocumented`here &lt;https://docs.python.org/3/library/logging.html#logging-levels&gt;`__.You can either use integers or their equivalent constant in the loggingmodule. (e.g. ``logging.DEBUG``, ``logging.ERROR``, etc)Documentation-------------`http-request-randomizerdocumentation &lt;https://pgaref.com/HTTP_Request_Randomizer&gt;`__Contributing------------Many thanks to the open-source community for`contributing &lt;https://github.com/pgaref/HTTP_Request_Randomizer/blob/master/CONTRIBUTORS.md&gt;`__to this project!Faced an issue?---------------Open an issue`here &lt;https://github.com/pgaref/HTTP_Request_Randomizer/issues&gt;`__, andbe as detailed as possible :)Feels like a feature is missing?--------------------------------Feel free to open a ticket! PRs are always welcome!License-------This project is licensed under the terms of the MIT license... |Build Status| image:: https://github.com/pgaref/http_request_randomizer/workflows/CI/badge.svg   :target: https://github.com/pgaref/http_request_randomizer/actions.. |codecov| image:: https://codecov.io/gh/pgaref/HTTP_Request_Randomizer/branch/master/graph/badge.svg?token=FjHh47wdYV   :target: undefined.. |Requirements Status| image:: https://requires.io/github/pgaref/HTTP_Request_Randomizer/requirements.svg?branch=master   :target: https://requires.io/github/pgaref/HTTP_Request_Randomizer/requirements/?branch=master.. |PyPI version| image:: https://badge.fury.io/py/http-request-randomizer.svg   :target: https://badge.fury.io/py/http-request-randomizer</longdescription>
</pkgmetadata>