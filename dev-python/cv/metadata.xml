<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cv[![PyPI](https://img.shields.io/pypi/v/cv)][pypi][![Downloads](https://img.shields.io/pypi/dm/cv)][pypi][![Build Status](https://img.shields.io/azure-devops/build/misha-drachuk/cv/9)](https://dev.azure.com/misha-drachuk/cv/_build/latest?definitionId=9&amp;branchName=master)[![Test Coverage](https://img.shields.io/coveralls/github/mdrachuk/cv/master)](https://coveralls.io/github/mdrachuk/cv)[![Supported Python](https://img.shields.io/pypi/pyversions/cv)][pypi]Check version of a Python module.Raises an error if the `&lt;module&gt;.__version__`:- already present on PyPI or custom warehouse deployment; - does not match [PEP 440](https://www.python.org/dev/peps/pep-0440);- or does not match specified type: alpha/beta/rc/dev/release.All of this comes in handy during CI.And one more thing: No runtime dependencies!## InstallationAvailable from [PyPI][pypi]:```shellpip install cv```## Module ExampleWith a \&lt;module\&gt; present on PyPI and `&lt;module&gt;.py` in current directory:```python__version__ = '7.7.7'...```Simply run:```shellcv &lt;module&gt;```If `7.7.7` version of \&lt;module\&gt; is on PyPI already youâ€™ll get a `VersionExists` error:```plain__main__.VersionExists: Package &quot;&lt;module&gt;&quot; with version &quot;7.7.7&quot; already exists on PyPI.Change the &quot;&lt;module&gt;.__version__&quot; to fix this error.```## Package ExamplePackages work in the same way as modules except `__version__` is defined in `&lt;module&gt;/__init__.py`## Help```plain$ cv --helpusage: cv [-h] [-w WAREHOUSE] [--alpha] [--beta] [--rc] [--dev] [--release]          [--dry]          moduleCheck version of a Python package or module.positional arguments:  module                the package/module with &quot;__version__&quot; definedoptional arguments:  -h, --help            show this help message and exit  -w WAREHOUSE, --warehouse WAREHOUSE                        package index to use, default is                        &quot;https://pypi.org/pypi&quot;  --alpha               check that version is an alpha, e.g. 1.0.0a1  --beta                check that version is a beta, e.g. 1.0.0b2  --rc                  check that version is a release candidate, e.g.                        1.0.0rc  --dev                 check that version is in development, e.g. 1.0.0.dev3  --release             check that version is a release without modifiers,                        e.g. 1.0.0  --dry                 make no request to PyPI```[pypi]: https://pypi.org/project/cv/</longdescription>
</pkgmetadata>