<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Balrog======Balrog is a Python library that helps you to build an authorization system in your projects:::    You shall not pass!Balrog is good for systems with statically defined roles that enable certain workflows.Every identity can have only one role on the certain context. This approach allows coveringyour system with functional tests according to the roles and flows these roles perform.Formal requirements can be applied to the workflows in the system which will define roles.These roles are statically defined in the code and this way properly versioned and coveredwith testing. It is possible to do a composition of certain permission groups and share thembetween roles, but semantically there's no way for one identity to have 2 contradictingroles when one role forbids actions and the other allows them. Instead a proper rolecan be extracted with the permissions it allows.Installation------------.. code-block:: sh    pip install balrogUsage-----Permission is needed to access a resource or to perform an action. Permissions are grouped in the rolesand roles are grouped in the policies.The entry point where a permission is being checked is the Policy. Define an instance of the Policyand specify the list of roles it works with.Project can contain multiple policies that serve different purposes.Permission declaration:.. code-block:: python    import balrog    from flask import request    def get_identity(*args, **kwargs):    &quot;&quot;&quot;Get current user.&quot;&quot;&quot;        # Flask request wrapper implements the ``user`` property        return request.user    def get_role(identity, *args, **kwargs):    &quot;&quot;&quot;Get current identity role.&quot;&quot;&quot;        # User.role is a property of the ORM User model        return identity.role    read = balrog.Permissions(name=&quot;article.read&quot;)    post = balrog.Permissions(name=&quot;article.post&quot;)    comment = balrog.Permissions(name=&quot;article.comment&quot;)    anonymous = balrog.Role(        name=&quot;anonymous&quot;,        permissions=[read],    )    &quot;&quot;&quot;Anonymous visitors can read articles.&quot;&quot;&quot;    user = balrog.Role(        name=&quot;user&quot;,        permissions=[read, comment],    )    &quot;&quot;&quot;User accounts can read and comment articles.&quot;&quot;&quot;    author = balrog.Role(        name=&quot;author&quot;,        permissions=[read, post, comment],    )    &quot;&quot;&quot;Author accounts can read, create and comment articles.&quot;&quot;&quot;    policy = balrog.Policy(        roles=[anonymous, user, author],        get_identity=get_identity,        get_role=get_role,        permissions=[read, post, comment]    )Permission checking:.. code-block:: python    # ...    policy = balrog.Policy(roles=[anonymous, user, author], get_identity=get_identity, get_role=get_role)    policy.check(&quot;article.comment&quot;)Filtering collections:.. code-block:: python    articles = session.query(Article)    my_articles = policy.filter(&quot;article.view&quot;, objects=articles)Every role is a collection of permissions. Besides being included in the role permissions canimplement even more detailed checking and filtering logic.Permission----------Permissions have unique names (within the role) which reflect the resource and the action youwant to take with this resource... code-block:: python    import balrog    eat = balrog.Permission(name=&quot;cucumber.eat&quot;)    happy = balrog.Permission(name=&quot;be-happy&quot;)Name is just a string identifier that you are using in order to ask a policy for a permission.The name formatting convention can be decided per project.Permissions have 2 methods: ``check`` and ``filter``. By default the ``check`` method implements ``True``and the ``filter`` method is simply bypassing the objects. These methods are an additional opportunitiesto control the access to certain context, instances of your resources, check whitelists, filter out objectsfrom collections that can not be seen by currently authenticated identity, etc.Role----Roles have unique names within the policy. Role name is determined by the authenticated identityand used in the policy permission check implicitly.Roles are collections of permissions that define the role and enable certain workflows in yoursystem.When a system is large and has a lot of specific permissions declared sometimes it is easier tosubclass the Role class instead of granting all permissions to the role:.. code-block:: python    import balrog    class Admin(balrog.Role):        def check(self, identity, permission, *args, **kwargs):            return TruePolicy------Policy is used as an entry point of permission checking in your project. It incapsulates the rolesthat define your workflows. There could be multiple policy instances in the project.Besides roles policy requires some configuration and backend implementation:get_identity~~~~~~~~~~~~A callback that returns currenlty authenticated identity. Projects have to implement this backendand restore the identity instance (e.g. User object) for example from the Flask Request object... code-block:: python    from flask import request    def get_identity(*args, **kwargs):    &quot;&quot;&quot;Get current user.&quot;&quot;&quot;        # Flask request wrapper implements the ``user`` property        return request.userget_role~~~~~~~~A callback that returns which role current identity has on the context. In the simple case the role is associatedto the user in the database... code-block:: python    def get_role(identity, *args, **kwargs):    &quot;&quot;&quot;Get current identity role.&quot;&quot;&quot;        # User.role is a property of the ORM User model        return identity.rolecheck~~~~~The permission check. All arguments that you pass to this function are passed along in Role.check and finallyto Permission.check... code-block:: python    if not policy.check(&quot;article.read&quot;, article=a):        flask.abort(&quot;You can't access the article `{0}`&quot;.format(a.id))filter~~~~~~The function that is filtering out items of the given objects if the identity has no permission to access them... code-block:: python    articles = session.query(Article).filter_by(is_published=True)    my_articles = policy.filter(&quot;article.read&quot;, objects=articles)Implementing your own filtering:.. code-block:: python    import balrog    class ViewArticle(balrog.Permission);        def filter(self, identity, objects, *args, **kwargs):            &quot;&quot;&quot;Filter out articles of the other users.            :param identity: User object.            :param objects: SQLAlchemy query.            :returns: SQLAlchemy query with applied filtering.            &quot;&quot;&quot;            return objects.filter_by(user_id=identity.id)Filter function can raise an exception in the case when there's no such permissionin the role of the identity. In this case the library doesn't know for sure what type toreturn that represents an empty collection of objects. Some projects would expectan empty list, some - falsy ORM query, etc. Instead the exception should be handled:.. code-block:: python    try:        my_articles = policy.filter(&quot;article.read&quot;, objects=articles)    except balrog.PermissionNotFound:        my_articles = []context~~~~~~~Everything that you pass extra to the check or filter function is passed along to the regardingRole and Permission methods.You can pass certain instance of an object you control your access using whitelists... code-block:: python    policy.check(&quot;message.send&quot;, ip=ip_addr)Policy.check method can compare if ip address is in a whitelist.Contact-------If you have questions, bug reports, suggestions, etc. please create an issue onthe `GitHub project page &lt;http://github.com/paylogic/balrog&gt;`_.License-------This software is licensed under the `MIT license &lt;http://en.wikipedia.org/wiki/MIT_License&gt;`_See `License &lt;https://github.com/paylogic/balrog/blob/master/LICENSE.txt&gt;`_Changelog=========1.1.0------ Policy will keep track of all the permissions and raise PermissionNotFound when called with unknown permission (hvdklauw)1.0.1------ Pass the context to the get_identity (olegpidsadnyi)1.0.0-----* Initial public release</longdescription>
</pkgmetadata>