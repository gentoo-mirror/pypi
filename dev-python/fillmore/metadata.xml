<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Fillmore========The Python sentry-sdk has a before_send hook that lets you scrub Sentry eventsbefore they're sent. Fillmore makes it easier to set up a before_send scrubberand test it.:Code:          https://github.com/willkg/fillmore:Issues:        https://github.com/willkg/fillmore/issues:License:       MPL v2:Documentation: https://fillmore.readthedocs.io/Goals=====Goals of Fillmore:1. make it easier to configure Sentry event scrubbing in a way that you can   reason about2. make it easier to test your scrubbing code so you know it's working over   time3. scrub in a resilient manner and default to emitting some signal when it   kicks up errors so you know when your error handling code is kicking up   errorsFrom that, Fillmore has the following features:* lets you specify keys to scrub in a Sentry event* resilient to errors--if it fails, it will emit a signal that you can see and  alert on* links to relevant Sentry documentation, projects, and other things* testing infrastructure to use in your integration testsInstall=======Run::    $ pip install fillmoreQuickstart==========Example::    # myapp/app.py    import logging    import logging.config    from fillmore.libsentry import set_up_sentry    from fillmore.scrubber import Scrubber, Rule, build_scrub_query_string    # Set up logging to capture fillmore error messages    logging.getLogger(&quot;fillmore&quot;).setLevel(logging.ERROR)    # Create a scrubber    scrubber = Scrubber(        rules=[            Rule(                path=&quot;request.headers&quot;,                keys=[&quot;Auth-Token&quot;, &quot;Cookie&quot;],                scrub=&quot;scrub&quot;,            ),            Rule(                path=&quot;request&quot;,                keys=[&quot;query_string&quot;],                scrub=build_scrub_query_string(params=[&quot;code&quot;, &quot;state&quot;]),            ),            Rule(                path=&quot;exception.values.[].stacktrace.frames.[].vars&quot;,                keys=[&quot;username&quot;, &quot;password&quot;],                scrub=&quot;scrub&quot;,            ),        ]    )    # Set up Sentry with the scrubber and the default integrations which    # includes the LoggingIntegration which will capture messages with level    # logging.ERROR.    set_up_sentry(        sentry_dsn=&quot;http://user@example.com/1&quot;,        host_id=&quot;some host id&quot;,        release=&quot;some release name&quot;,        before_send=scrubber,    )    def kick_up_exception():        username = &quot;James&quot;  # noqa        try:            raise Exception(&quot;internal exception&quot;)        except Exception:            logging.getLogger(__name__).exception(&quot;kick_up_exception exception&quot;)Now you have a scrubber and you've set up the Sentry client to use it. How doyou know it's scrubbing the right stuff? How will you know if something changesand it's no longer scrubbing the right stuff?You can test it like this::    # myapp/test_app.py    import unittest    from fillmore.test import SentryTestHelper    from myapp.app import kick_up_exception    class TestApp(unittest.TestCase):        def test_scrubber(self):            # Reuse the existing Sentry configuration and set up the helper            # to capture Sentry events            sentry_test_helper = SentryTestHelper()            with sentry_test_helper.reuse() as sentry_client:                kick_up_exception()                (event,) = sentry_client.events                error = event[&quot;exception&quot;][&quot;values&quot;][0]                self.assertEqual(error[&quot;type&quot;], &quot;Exception&quot;)                self.assertEqual(error[&quot;value&quot;], &quot;internal exception&quot;)                self.assertEqual(                    error[&quot;stacktrace&quot;][&quot;frames&quot;][0][&quot;vars&quot;][&quot;username&quot;], &quot;[Scrubbed]&quot;                )This creates a Sentry client specific to this test and kicks up an exception inthe test and captures it with Sentry.Note that this is a contrived context using a Sentry client created for thistest. You'll want to write tests that use the Sentry client configured for yourapplication and handling events kicked up from different points in yourapplication to make sure that Sentry events are getting scrubbed correctly.See Fillmore documentation for explanation and examples.Why this? Why not other libraries?==================================Other libraries:* **Have an awkward API that is hard to reason about.**  I'm not scrubbing Sentry events for fun. I need to be able to write scrubbing  configuration that is exceptionally clear about what it is and isn't doing.* **Don't covers large portions of the Sentry event structure.**  I need scrubbers that cover the entire event structure as well as some  of the curious cases like the fact that cookie information shows up twice  and can be encoded as a string.* **Aren't resilient.**  The scrubber is running in the context of Sentry reporting an error. If it  also errors out, then you can end up in situations where you never see errors  and have no signal that something is horribly wrong. We need scrubbing code  to be extremely resilient and default to emitting a signal that it's broken.* **Don't include testing infrastructure.**  I'm not scrubbing Sentry events for fun. I need to know that the scrubbing  code is working correctly and that it continues to work as we upgrade  Python, sentry_sdk, and other things.  Having testing infrastructure for making this easier is really important.History=======1.1.0 (April 5th, 2023)-----------------------* Switch from flake8 to ruff (#24)* Add ``fillmore.test.diff_event`` utilify function for comparing a Sentry  event with an expected structure accounting for ``unittest.mock.ANY``. (#23)1.0.0 (November 8th, 2022)--------------------------* Add support for Python 3.11 (#18)This feels stable and I'm using it in multiple production real-world projects,so releasing a 1.0.0.0.1.2 (August 1st, 2022)------------------------* Fix examples in documentation so they're linted and tested. Add notes about  ``fillmore`` logging. Rewrite testing chapter to introduce Fillmore testing  features in a less muddled way. (#15)0.1.1 (July 25th, 2022)-----------------------* Fix scrubber where paths that were valid, but didn't point to something in an  event erroneously kicked up a RulePathError. (#12)* Fix test examples in docs.* Fix examples in README. Thanks @stevejalim!0.1.0 (June 23rd, 2022)-----------------------* Inital extraction and writing.</longdescription>
</pkgmetadata>