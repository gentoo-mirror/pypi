<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-seal===========.. image:: https://publicdomainvectors.org/photos/Seal2.png    :target: https://publicdomainvectors.org    :alt: Seal------------.. image:: https://github.com/charettes/django-seal/workflows/Test/badge.svg    :target: https://github.com/charettes/django-seal/actions    :alt: Build Status.. image:: https://coveralls.io/repos/github/charettes/django-seal/badge.svg?branch=master    :target: https://coveralls.io/github/charettes/django-seal?branch=master    :alt: Coverage statusDjango application providing queryset sealing capability to force appropriate usage of ``only()``/``defer()`` and``select_related()``/``prefetch_related()``.Installation------------.. code:: sh    pip install django-sealUsage-----.. code:: python    # models.py    from django.db import models    from seal.models import SealableModel    class Location(SealableModel):        latitude = models.FloatField()        longitude = models.FloatField()    class SeaLion(SealableModel):        height = models.PositiveIntegerField()        weight = models.PositiveIntegerField()        location = models.ForeignKey(Location, models.CASCADE, null=True)        previous_locations = models.ManyToManyField(Location, related_name='previous_visitors')By default ``UnsealedAttributeAccess`` warnings will be raised on sealed objects attributes accesses.. code:: python    &gt;&gt;&gt; location = Location.objects.create(latitude=51.585474, longitude=156.634331)    &gt;&gt;&gt; sealion = SeaLion.objects.create(height=1, weight=100, location=location)    &gt;&gt;&gt; sealion.previous_locations.add(location)    &gt;&gt;&gt; SeaLion.objects.only('height').seal().get().weight    UnsealedAttributeAccess:: Attempt to fetch deferred field &quot;weight&quot; on sealed &lt;SeaLion instance&gt;.    &gt;&gt;&gt; SeaLion.objects.seal().get().location    UnsealedAttributeAccess: Attempt to fetch related field &quot;location&quot; on sealed &lt;SeaLion instance&gt;.    &gt;&gt;&gt; SeaLion.objects.seal().get().previous_locations.all()    UnsealedAttributeAccess: Attempt to fetch many-to-many field &quot;previous_locations&quot; on sealed &lt;SeaLion instance&gt;.You can `elevate the warnings to exceptions by filtering them`_. This is useful to assert no unsealed attribute accesses areperformed when running your test suite for example... code:: python    &gt;&gt;&gt; import warnings    &gt;&gt;&gt; from seal.exceptions import UnsealedAttributeAccess    &gt;&gt;&gt; warnings.filterwarnings('error', category=UnsealedAttributeAccess)    &gt;&gt;&gt; SeaLion.objects.only('height').seal().get().weight    Traceback (most recent call last)    ...    UnsealedAttributeAccess:: Attempt to fetch deferred field &quot;weight&quot; on sealed &lt;SeaLion instance&gt;.    &gt;&gt;&gt; SeaLion.objects.seal().get().location    Traceback (most recent call last)    ...    UnsealedAttributeAccess: Attempt to fetch related field &quot;location&quot; on sealed &lt;SeaLion instance&gt;.    &gt;&gt;&gt; SeaLion.objects.seal().get().previous_locations.all()    Traceback (most recent call last)    ...    UnsealedAttributeAccess: Attempt to fetch many-to-many field &quot;previous_locations&quot; on sealed &lt;SeaLion instance&gt;.Or you can `configure logging to capture warnings`_ to log unsealed attribute accesses to the ``py.warnings`` logger which is anice way to identify and address unsealed attributes accesses from production logs without taking your application down if someinstances happen to slip through your battery of tests... code:: python    &gt;&gt;&gt; import logging    &gt;&gt;&gt; logging.captureWarnings().. _elevate the warnings to exceptions by filtering them: https://docs.python.org/3/library/warnings.html#warnings.filterwarnings.. _configure logging to capture warnings: https://docs.python.org/3/library/logging.html#logging.captureWarningsDevelopment-----------Make your changes, and then run tests via tox:.. code:: sh    tox</longdescription>
</pkgmetadata>