<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*****oitnb*****.. image:: https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/license.svg?format=raw   :target: https://opensource.org/licenses/MIT.. image:: https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/pypi.svg?format=raw   :target: https://pypi.org/project/oitnb/.. image:: https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/oitnb.svg?format=raw   :target: https://sourceforge.net/p/oitnb/codeThe uncompromising code formatter ``Black`` has very many good points, but by designit is not very flexible. If you cannot accept it as is, ``oitnb`` might be analternative for you.In short, on top of ``Black``'s features, ``oitnb``:- defaults to single-quotes, but allows you to select double-quotes for  strings (triple quotes and an empty string use double-quotes). Option ``--double``.- allows you to run `meld` for visual comparison of reformatted code,  so you can easily insert some ``# fmt: off`` at appropriate places. Option ``--meld``.- reads your configuration in a format that you already know (Python) from a file  that you most likely already have in your project anyway (``__init__.py``).- have project spanning base defaults in your configuration directory  (XDG). That is e.g. where your line-length goes, that is carefully  brought in sync with your editor width, the width of the three  terminals fitting on your screen or your multi-file diff utility.- makes displaying icons optional. They might not display in your  terminal in the first place, or not fit your professional environment.- has support for diffing against version committed to the project *before* starting to  use ``oitnb``Work-in-progress/things planned:- triple quotes multi-line strings that start after the left  parenthesis of a function. Option ``--multi-line-unwrap``. (A must  if you write a lot of in-file , dedented, strings with YAML, as e.g.  YAML library developer would.)- control spreading of multi-element list to one per line- your wish here (we can always make it a configuration option, command-line option)- keep alignment of EOL commentsDetails=======Code base+++++++++``oitnb`` code is directly derived from ``Black``'s and uses many filesas-is. It can run most of ``Black``'s tests without problems but there is ahandful of errors, which should all have to do with hard-codedreferences to `Black` in both file content and file naming.Extra options, defaults and configuration+++++++++++++++++++++++++++++++++++++++++extra options: ``--double``, ``--meld``, ``--multi-line-unwrap````oitnb`` defaults to single-quotes around strings, if you want to usethe quoting like ``Black`` has use the option ``--double`` option.``--meld`` which works like ``--diff``,but for the invocation of ``meld`` on the original file and thereformatted version. ``meld`` allows you to directly edit the lefthand side (original) so you can at that point decide to insert some``# fmt: off`` / ``# fmt: on`` comments around lines, or to abandonthe use of a formatter altogether.Specifying ``--multi-line-unwrap`` runs an ugly post-processor on the reformatted lines**undoing** the rewrite of::  x = yaml.load(&quot;&quot;&quot;  a: 1  b: 2  &quot;&quot;&quot;)into::  x = yaml.load(      &quot;&quot;&quot;  a: 1  b: 2  &quot;&quot;&quot;  )The program starts with an empty config dict and tries to read the basicconfiguration from ``oitnb.pon`` in the user config dir using``appdirs.user_config_dir``. This adheres to the XDG standard on Linux(i.e. ``~/.config/oitnb)`` if no environment variables are set tochange the defaults. That file should contain a valid Python dictdefinition ( with `{}` or `dict()`, and from this ``dict`` the valuefor ``default`` is taken (using safe evaluation) to update the config dict::  dict(     default=dict(line_length=666, double=True),  )After that the directory hierarchy up-the-tree is searched until``.git`` is found, or ``.hg`` or an ``__init__.py`` file with a modulelevel definition of ``_package_data``. That should be a dict and fromthere the value for the key ``oitnb`` is taken to update theconfig::  _package_data = dict(      oitnb=dict(line_length=88),  )  ``oitnb``'s ``__init__.py`` has more information there used (without ``import``-ing!), andprogrammatically updated, by other tools::  _package_data = dict(      full_package_name='oitnb',      version_info=(0, 1, 1),      __version__='0.1.1',      author='Anthon van der Neut',      author_email='a.van.der.neut@ruamel.eu',      description=&quot;oitnb works around some of black's issues&quot;,      entry_points='oitnb=oitnb:main',      license='MIT',      since=2018,      status=alpha,      package_data={&quot;_oitnb_lib2to3&quot;: [&quot;*.txt&quot;]},      install_requires=['click&gt;=6.5', 'attrs&gt;=17.4.0', 'appdirs', 'toml&gt;=0.9.4'],      test_suite=&quot;_test.test_oitnb&quot;,      tox=dict(          env='36',       ),      oitnb=dict(line_length=88),  )      version_info = _package_data['version_info']  __version__ = _package_data['__version__']  On top of this, any command-line options are used to overrule the config, andthen the program is initialised. Dashes (`-`) in options are internally replaced by underscore (`_`),you can use that form as key in `dict(op_tion=True)`. With dashes youwould need to use `{&quot;op-tion&quot;: True}`There is currently no computer wide, setting for defaults, such as``/etc/xdg/oitnb`` (is anyone sharing their development machines thesedays?).Finding changes against pre-``oitnb`` revisions+++++++++++++++++++++++++++++++++++++++++++++++If you have an existing project with revision history, and apply``oitnb`` to your sources, then diffing between pre- andpost-``oitnb`` versions is going to be cluttered.If your application of ``oitnb`` was applied without Internal errors, and if you didnot have to apply ``# fmt: no`` to often, then you can use thefollowing to get more useful visual diffs using ``meld``.The installation of ``oitnb`` includes a minimal utility ``omeld``,add this as an external diff tool to your mercurials ``.hgrc`` file::  [extensions]  hgext.extdiff =    [extdiff]  cmd.omeld =  Now you can execute ``hg omeld -r-4 -r-1`` or ``hg omeld -r-4``(assuming revision -4 was from before applying ``oitnb``) and``omeld`` will run ``oitnbt`` on both temporarily created sourcetrees, before handing those trees over to ``meld``. That meanse.g. that any source changes regarding quotes or removal ofsuperfluous u's from u'' strings, rewrapping, etc. are going to be the same for bothsides of the revisions. Thereby leaving the real code changes in thediff that ``meld`` presents.If the omeld tools gets a file or directory as argument that is **not**under ``/tmp`` or ``/var/tmp``, it will not run ``oitnb`` on thatfile/directory. If you keep your source tree under ``/var/tmp``, you areout of luck: your python will be formatted.The above approach: *check out both (old) revisions trees, code formatthem with ``oitnb`` and run a diff*, is generic. ``meld`` and ``mercurial`` are justthe tools I use and can easily provide a working setup for.For git, which in my experience is a bit more difficult to get tounderstand multiple external difftools, you can do::  alias gomeld='git difftool --extcmd=omeld -y'and use that alias.``git`` seems somewhat more optimised than ``hg`` in that if the current checked outversion of a file is the same as one of the reversions asked, that itwill not make a temporary version (not even if you have to comparemultiple files). Versions before 0.1.4 should therefore not be usedwith the above alias, as those may result updated filesin your source tree (which should not break anything, but not be whatyou expected).Problems you might encounter with Black=======================================Double-quotes everywhere++++++++++++++++++++++++If you use single-quotes for your strings you are in good company:`&quot;People use to really love double quotes. I don't knowwhy. &lt;https://www.youtube.com/watch?v=wf-BqAjZb8M&amp;feature=youtu.be&amp;t=1081&gt;`__. And as PEP8 has the following to say about quotes around strings::   In Python, single-quoted strings and double-quoted strings are the same. This PEP    does not make a recommendation for this. Pick a rule and stick to it.Googling for *Stick to it*: continue or confine oneself to doing or using a particular thing.It is not just the consistency of confining yourself, it is also the long term continuation.Unwrapping where a second line might do+++++++++++++++++++++++++++++++++++++++If you have a list of short strings that fit on a line and add one sothat it doesn't fit anymore, you don't want thattoall ofa suddenforceevery singleelement on a new line. Just putting the added overflow on a new line is good enough in those cases.Funny characters++++++++++++++++The Unicode in the messages might not display in the fontyou're using (they did not for me with Inconsolata in my Gnome Terminal). Do youknow what those code-points should show?  If not, are you sure that whenusing ``Black`` on a different computer, while the person who pays youfor your work looks over your shoulder, that you'll not be embarrassed (or get intotrouble if e.g. they were code-points U+5350 or U+0FD5)?You might find seeing the SLEEPING FACE (U+1F634), SHORTCAKE (U+1F370),COLLISION SYMBOL (U+1F4A5), BROKEN HEART (U+1F494), SPARKLES (U+2728)interesting for a while. But especially when using a small font in order not to scroll too much the details become blurry and no-fun.Little configurability++++++++++++++++++++++The configurability of Black consists inserting lines in Yet AnotherMarkup Format that adds nothing to the existing spectrum in YetAnother Config File cluttering your project directory.</longdescription>
</pkgmetadata>