<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;./docs/img/logo.png&quot; alt=&quot;drawing&quot; width=&quot;70%&quot;/&gt;&lt;/p&gt;Python backend for graph-based processing, designed for flow-based/node-based visual scripting editors. It is the backbone of the [Ryven](https://github.com/leon-thomm/Ryven) project, but it can be used for other applications as well.If you are not already familiar with flow-based visual scripting and are looking for a specification, see [here](https://leon-thomm.github.io/ryvencore-qt/).### Installation```pip install ryvencore```or from sources:```git clone https://github.com/leon-thomm/ryvencorecd ryvencorepip install .```### DependenciesNone! ryvencore runs completely on standard python modules, no additional libraries required, which makes it very compatible.&lt;!-- *I am therefore thinking about extending the implementation to compile with Cython. While the overhead produced by the internal graph representation compared to only executing python code specified in the nodes' `update_event` does not dominate, efficient Cython support might lead to speedup of another ~20%-40%.* --&gt;### UsageUsing ryvencore directly to run projects made with ryvencore-based editors, the following code example gives some intuition about the process:```pythonimport ryvencore as rcimport jsonimport sysif __name__ == '__main__':    # get a working project file path    if len(sys.argv) &lt; 2:        sys.exit('please provide a project file path')    fpath = sys.argv[1]    try:        f = open(fpath)        f.close()    except FileNotFoundError:        sys.exit(f'could not open file {fpath}')        # read project file    with open(fpath, 'r') as f:        project: dict = json.loads(f.read())        # run ryvencore    session = rc.Session()    session.load(project)    # and now we can manually access all components, for example:    scripts = session.scripts    flow1 = scripts[0].flow    my_node = flow1.nodes[-1]    my_node.update()```You can also use it for other purposes. A mostly auto-generated documentation is available [here](https://leon-thomm.github.io/ryvencore/).### Main Features- **load &amp; save** into and from JSON-compatible dictionaries- **variables system** with update mechanism to build nodes that automatically adapt to change of data- **built in logging** based on python's `logging` module- **powerful nodes system** which lets you do anything, simple and unrestricted- **dynamic nodes registration mechanism** to register and unregister nodes at runtime- **actions system for nodes**- **data *and* exec flow support** - unlike lots of other solutions out there, ryvencore supports exec flowsFor a more detailed overview, see the [docs](https://leon-thomm.github.io/ryvencore-qt/#/features).</longdescription>
</pkgmetadata>