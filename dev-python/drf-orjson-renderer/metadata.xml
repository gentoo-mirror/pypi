<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django Rest Framework ORJSON Renderer=====================================[![DRF ORJSON Renderer Tests](https://github.com/brianjbuck/drf_orjson_renderer/actions/workflows/main.yml/badge.svg)](https://github.com/brianjbuck/drf_orjson_renderer/actions/workflows/main.yml)`drf_orjson_renderer` is JSON renderer and parser for Django Rest Frameworkusing the [orjson](https://github.com/ijl/orjson) library. Backed by[Rust](https://www.rust-lang.org/), orjson is safe, correct and _fast_. ⚡️In addition, unlike some performance optimized DRF renderers, It also renderspretty printed JSON when requests are made via RestFramework's BrowsableAPI.You get:- The safety of Rust- The speed of orjson when requests are made with `Accept: appliation/json` HTTP  header or when requests are made with an unspecified `Accept` header.- The convenience of formatted output when requested with `Accept: text/html`.- The ability to pass your own `default` function definition.## Installation`pip install drf_orjson_renderer`You can then set the `ORJSONRenderer` class as your default renderer in your `settings.py````PythonREST_FRAMEWORK = {    &quot;DEFAULT_RENDERER_CLASSES&quot;: (        &quot;drf_orjson_renderer.renderers.ORJSONRenderer&quot;,        &quot;rest_framework.renderers.BrowsableAPIRenderer&quot;,    ),}```To modify how data is serialized, specify options in your `settings.py````PythonREST_FRAMEWORK = {    &quot;ORJSON_RENDERER_OPTIONS&quot;: (        orjson.OPT_NON_STR_KEYS,        orjson.OPT_SERIALIZE_DATACLASS,        orjson.OPT_SERIALIZE_NUMPY,    ),}```Also you can set the `ORJSONParser` class as your default parser in your `settings.py````PythonREST_FRAMEWORK = {    &quot;DEFAULT_PARSER_CLASSES&quot;: (        &quot;drf_orjson_renderer.parsers.ORJSONParser&quot;,    ),}```## Passing Your Own `default` FunctionBy default, the `ORJSONRenderer` will pass a `default` function as a helper forserializing objects that orjson doesn't recognize. That should cover the mostcommon cases found in a Django web application. If you find you have an objectit doesn't recognize you can pass your own default function by overriding the`get_renderer_context()` method of your view:```Pythonfrom rest_framework.views import APIViewfrom rest_framework.response import Responseclass MyView(APIView):    def default(self, obj):        if isinstance(obj, MyComplexData):            return dict(obj)    def get_renderer_context(self):        renderer_context = super().get_renderer_context()        renderer_context[&quot;default_function&quot;] = self.default        return renderer_context    def get(self, request, *args, **kwargs):        my_complex_data = MyComplexData()        return Response(data=my_complex_data)```If you know your data is already in a format orjson natively[recognizes](https://github.com/ijl/orjson/#types) you can get a smallperformance boost by passing `None` to the `renderer_context`:```Pythondef get_renderer_context(self):    renderer_context = super().get_renderer_context()    renderer_context[&quot;default_function&quot;] = None    return renderer_context```As of ORJSON version 3, 2-space indenting is supported in serialization. Inorder to take advantage of the RestFramework Browsable API, when therequested media type is not `application/json`, the ORJSON renderer will add`orjson.OPT_INDENT_2` to the options mask to pretty print your output.## NumpyWhen this package was originally written ORJSON did not natively supportserializing numpy types. This package provided an encoder class thatoverrides the DjangoJSONEncoder with support for numpy types. This encoderis no longer necessary but included for backwards compatibility.```Pythonfrom drf_orjson_renderer.encoders import DjangoNumpyJSONEncoderfrom rest_framework.views import APIViewclass MyView(APIView):    def get_renderer_context(self):        renderer_context = super().get_renderer_context()        renderer_context[&quot;django_encoder_class&quot;] = DjangoNumpyJSONEncoder        return renderer_context```## BenchmarksSee the [orjson Benchmarks](https://github.com/ijl/orjson#performance) for more information</longdescription>
</pkgmetadata>