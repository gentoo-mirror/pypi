<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h2 align=&quot;center&quot;&gt;  &lt;a href=&quot;https://reolink.com&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/starkillerOG/reolink_aio/master/logo.png&quot; width=&quot;200&quot;&gt;&lt;/a&gt;  &lt;br&gt;  &lt;i&gt;Reolink NVR/cameras API package&lt;/i&gt;  &lt;br&gt;&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/sponsors/starkillerOG&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Sponsor&amp;message=%E2%9D%A4&amp;logo=GitHub&amp;color=%23fe8e86&quot; alt=&quot;Sponsor&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/reolink-aio&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/dm/reolink-aio&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/starkillerOG/reolink_aio/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/StarkillerOG/reolink_aio?display_name=tag&amp;include_prereleases&amp;sort=semver&quot; alt=&quot;Current version&quot;&gt;&lt;/a&gt;&lt;/p&gt;The `reolink_aio` Python package allows you to integrate your [Reolink](https://www.reolink.com/) devices (NVR/cameras) in your application.### DescriptionThis is a package implementing Reolink IP NVR and camera API. Also itâ€™s providing a way to subscribe to Reolink ONVIF SWN events, so that real-time events can be received on a webhook.### Prerequisites- Python 3.9### Installation```pip3 install reolink-aio```or manually:````git clone https://github.com/StarkillerOG/reolink_aiocd reolink_aio/pip3 install .````### Usage````from reolink_aio.api import Hostimport asyncio# Create a host-object (representing either a camera, or NVR with several channels)host = Host('192.168.1.10', 80, 'user', 'mypassword')# Obtain/cache NVR or camera settings and capabilities, like model name, ports, HDD size, etc:await host.get_host_data()# Get the subscribtion port and host-device name:subscribtion_port =  host.onvif_portname = host.nvr_name# Obtain/cache states of features:await host.get_states()# Print some state value on the channel with index 0:print(host.ir_enabled(0))# Enable the infrared lights on the channel with index 1:await host.set_ir_lights(1, True)# Enable the spotlight on the channel with index 1:await host.set_spotlight(1, True)# Enable the siren on the channel with index 0:await host.set_siren(0, True)# Now subscribe to events, suppose our webhook url is http://192.168.1.11/webhook123await host.subscribe('http://192.168.1.11/webhook123')# After some minutes check the renew timer (keep the eventing alive):if (host.renewTimer &lt;= 100):    await host.renew()# Logout and disconnectawait host.disconnect()````### ExampleThis is an example of the usage of the API. In this case we want to retrive and print the Mac Address of the NVR.````from reolink_aio.api import Hostimport asyncioasync def print_mac_address():    # initialize the host    host = Host('192.168.1.109','admin', 'admin1234', port=80)    # connect and obtain/cache device settings and capabilities    await host.get_host_data()    # check if it is a camera or an NVR    print(&quot;It is an NVR: %s, number of channels: %s&quot;, host.is_nvr, host.num_channels)    # print mac address    print(host.mac_address)    # close the device connection    await host.logout()if __name__ == &quot;__main__&quot;:    asyncio.run(print_mac_address())````### AcknowledgmentThis library is based on the work of:- fwestenberg: https://github.com/fwestenberg/reolink_dev- JimStar: https://github.com/JimStar/reolink_ip</longdescription>
</pkgmetadata>