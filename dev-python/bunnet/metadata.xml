<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![shields badge](https://shields.io/badge/-docs-blue)](https://roman-right.github.io/bunnet/)[![pypi](https://img.shields.io/pypi/v/bunnet.svg)](https://pypi.python.org/pypi/bunnet)[![Bunnet](https://github.com/roman-right/bunnet/raw/main/docs/assets/1.png)](https://github.com/roman-right/bunnet)*The logo is generated by [WOMBO Dream](https://www.wombo.art)*## Overview[Bunnet](https://github.com/roman-right/bunnet) - is a Python object-document mapper (ODM) for MongoDB. It is a synchronous fork of [Beanie ODM](https://github.com/roman-right/beanie).When using Bunnet each database collection has a corresponding `Document` thatis used to interact with that collection. In addition to retrieving data,Bunnet allows you to add, update, or delete documents from the collection aswell.Bunnet saves you time by removing boilerplate code, and it helps you focus onthe parts of your app that actually matter.## Installation### PIP```shellpip install bunnet```### Poetry```shellpoetry add bunnet```## Example```pythonfrom typing import Optionalfrom pymongo import MongoClientfrom pydantic import BaseModelfrom bunnet import Document, Indexed, init_bunnetclass Category(BaseModel):    name: str    description: strclass Product(Document):    name: str                          # You can use normal types just like in pydantic    description: Optional[str] = None    price: Indexed(float)              # You can also specify that a field should correspond to an index    category: Category                 # You can include pydantic models as well# Bunnet uses Pymongo client under the hood client = MongoClient(&quot;mongodb://user:pass@host:27017&quot;)# Initialize bunnet with the Product document classinit_bunnet(database=client.db_name, document_models=[Product])chocolate = Category(name=&quot;Chocolate&quot;, description=&quot;A preparation of roasted and ground cacao seeds.&quot;)# Bunnet documents work just like pydantic modelstonybar = Product(name=&quot;Tony's&quot;, price=5.95, category=chocolate)# And can be inserted into the databasetonybar.insert() # You can find documents with pythonic syntaxproduct = Product.find_one(Product.price &lt; 10).run()# And update themproduct.set({Product.name:&quot;Gold bar&quot;})```## Links### Documentation- **[Doc](https://roman-right.github.io/bunnet/)** - Tutorial, API documentation, and development guidelines.### Resources- **[GitHub](https://github.com/roman-right/bunnet)** - GitHub page of the  project- **[Changelog](https://roman-right.github.io/bunnet/changelog)** - list of all  the valuable changes- **[Discord](https://discord.gg/ZTTnM7rMaz)** - ask your questions, share  ideas or just say `Hello!!`----Supported by [JetBrains](https://jb.gg/OpenSource)[![JetBrains](https://raw.githubusercontent.com/roman-right/beanie/main/assets/logo/jetbrains.svg)](https://jb.gg/OpenSource)</longdescription>
</pkgmetadata>