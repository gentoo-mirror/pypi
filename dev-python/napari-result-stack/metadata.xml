<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># napari-result-stack[![License BSD-3](https://img.shields.io/pypi/l/napari-result-stack.svg?color=green)](https://github.com/hanjinliu/napari-result-stack/raw/main/LICENSE)[![PyPI](https://img.shields.io/pypi/v/napari-result-stack.svg?color=green)](https://pypi.org/project/napari-result-stack)[![Python Version](https://img.shields.io/pypi/pyversions/napari-result-stack.svg?color=green)](https://python.org)[![tests](https://github.com/hanjinliu/napari-result-stack/workflows/tests/badge.svg)](https://github.com/hanjinliu/napari-result-stack/actions)[![codecov](https://codecov.io/gh/hanjinliu/napari-result-stack/branch/main/graph/badge.svg)](https://codecov.io/gh/hanjinliu/napari-result-stack)[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/napari-result-stack)](https://napari-hub.org/plugins/napari-result-stack)Widgets and type annotations for storing function results of any types.## `Stored` typeType `Stored[T]` is equivalent to `T` for the type checker, but `magicgui` is aware of this annotation and behaves as a &quot;storage&quot; for the `T` instances.```pythonfrom pathlib import Pathimport pandas as pdfrom magicgui import magicguifrom napari_result_stack import Stored# Returned values will be stored in a result stack.@magicguidef provide_data(path: Path) -&gt; Stored[pd.DataFrame]:    return pd.read_csv(path)# You can choose one of the values stored in the result stack# for the argument `df` from a ComboBox widget.@magicguidef print_data(df: Stored[pd.DataFrame]):    print(df)```![](https://github.com/hanjinliu/napari-result-stack/blob/main/images/demo-0.gif)- Different types use different storage. e.g. `Stored[int]` and `Stored[str]` do not share the same place.- Even for the same type, you can specify the second key to split the storage. e.g. `Stored[int]`, `Stored[int, 0]` and `Stored[int, &quot;my-plugin-name&quot;]` use the distinct storages.## Manually store variables`Stored.valuesof[T]` is a `list`-like object that returns a view of the values stored in `Stored[T]`. This value view is useful if you want to store values outside `@magicgui`.```pythonfrom magicgui.widgets import PushButtonfrom datetime import datetimefrom napari_result_stack import Storedbutton = PushButton(text=&quot;Click!&quot;)@button.changed.connectdef _record_now():    Stored.valuesof[datetime].append(datetime.now())```## Result stack widget`napari-result-stack` provides a plugin widget that is helpful to inspect all the stored values.![](https://github.com/hanjinliu/napari-result-stack/blob/main/images/demo-1.gif)&lt;details&gt;&lt;summary&gt;Show code&lt;/summary&gt;&lt;div&gt;```pythonfrom napari_result_stack import Storedfrom magicgui import magicguiimport numpy as npimport pandas as pd@magicguidef f0() -&gt; Stored[pd.DataFrame]:    return pd.DataFrame(np.random.random((4, 3)))@magicguidef f1(x: Stored[pd.DataFrame]) -&gt; Stored[float]:    return np.mean(np.array(x))viewer.window.add_dock_widget(f0, name=&quot;returns a DataFrame&quot;)viewer.window.add_dock_widget(f1, name=&quot;mean of a DataFrame&quot;)```---&lt;/div&gt;&lt;/details&gt;----------------------------------This [napari] plugin was generated with [Cookiecutter] using [@napari]'s [cookiecutter-napari-plugin] template.&lt;!--Don't miss the full getting started guide to set up your new package:https://github.com/napari/cookiecutter-napari-plugin#getting-startedand review the napari docs for plugin developers:https://napari.org/stable/plugins/index.html--&gt;## InstallationYou can install `napari-result-stack` via [pip]:    pip install napari-result-stackTo install latest development version :    pip install git+https://github.com/hanjinliu/napari-result-stack.git## ContributingContributions are very welcome. Tests can be run with [tox], please ensurethe coverage at least stays the same before you submit a pull request.## LicenseDistributed under the terms of the [BSD-3] license,&quot;napari-result-stack&quot; is free and open source software## IssuesIf you encounter any problems, please [file an issue] along with a detailed description.[napari]: https://github.com/napari/napari[Cookiecutter]: https://github.com/audreyr/cookiecutter[@napari]: https://github.com/napari[MIT]: http://opensource.org/licenses/MIT[BSD-3]: http://opensource.org/licenses/BSD-3-Clause[GNU GPL v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt[GNU LGPL v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt[Apache Software License 2.0]: http://www.apache.org/licenses/LICENSE-2.0[Mozilla Public License 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt[cookiecutter-napari-plugin]: https://github.com/napari/cookiecutter-napari-plugin[file an issue]: https://github.com/hanjinliu/napari-result-stack/issues[napari]: https://github.com/napari/napari[tox]: https://tox.readthedocs.io/en/latest/[pip]: https://pypi.org/project/pip/[PyPI]: https://pypi.org/</longdescription>
</pkgmetadata>