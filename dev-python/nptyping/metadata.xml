<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://img.shields.io/pypi/pyversions/nptyping.svg)](https://img.shields.io/pypi/pyversions/nptyping.svg)[![Downloads](https://pepy.tech/badge/nptyping/month)](https://pepy.tech/project/nptyping)[![PyPI version](https://badge.fury.io/py/nptyping.svg)](https://badge.fury.io/py/nptyping)[![codecov](https://codecov.io/gh/ramonhagenaars/nptyping/branch/master/graph/badge.svg)](https://codecov.io/gh/ramonhagenaars/nptyping)[![Code style](https://img.shields.io/badge/code%20style-black-black)](https://img.shields.io/badge/code%20style-black-black)&lt;p align='center'&gt;  &lt;a href='https://https://pypi.org/project/nptyping/'&gt;    &lt;img src='https://github.com/ramonhagenaars/nptyping/raw/master/resources/logo.png' /&gt;  &lt;/a&gt; &lt;/p&gt;üßä *Type hints for `NumPy`* &lt;br/&gt;üêº *Type hints for `pandas.DataFrame`* &lt;br/&gt;üí° *Extensive dynamic type checks for dtypes shapes and structures* &lt;br/&gt;üöÄ *[Jump to the Quickstart](https://github.com/ramonhagenaars/nptyping/blob/master/USERDOCS.md#Quickstart)*Example of a hinted `numpy.ndarray`:```python&gt;&gt;&gt; from nptyping import NDArray, Int, Shape&gt;&gt;&gt; arr: NDArray[Shape[&quot;2, 2&quot;], Int]```Example of a hinted `pandas.DataFrame`:```python&gt;&gt;&gt; from nptyping import DataFrame, Structure as S&gt;&gt;&gt; df: DataFrame[S[&quot;name: Str, x: Float, y: Float&quot;]]```### Installation| Command                          | Description                   ||:---------------------------------|-------------------------------|| `pip install nptyping`           | Install the basics            || `pip install nptyping[pandas]`   | Install with pandas extension || `pip install nptyping[complete]` | Install with all extensions   |### Instance checkingExample of instance checking:```python&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; isinstance(np.array([[1, 2], [3, 4]]), NDArray[Shape[&quot;2, 2&quot;], Int])True&gt;&gt;&gt; isinstance(np.array([[1., 2.], [3., 4.]]), NDArray[Shape[&quot;2, 2&quot;], Int])False&gt;&gt;&gt; isinstance(np.array([1, 2, 3, 4]), NDArray[Shape[&quot;2, 2&quot;], Int])False````nptyping` also provides `assert_isinstance`. In contrast to `assert isinstance(...)`, this won't cause IDEs or MyPycomplaints. Here is an example: ```python&gt;&gt;&gt; from nptyping import assert_isinstance&gt;&gt;&gt; assert_isinstance(np.array([1]), NDArray[Shape[&quot;1&quot;], Int])True```### NumPy Structured arraysYou can also express structured arrays using `nptyping.Structure`:```python&gt;&gt;&gt; from nptyping import Structure&gt;&gt;&gt; Structure[&quot;name: Str, age: Int&quot;]Structure['age: Int, name: Str']```Here is an example to see it in action:```python&gt;&gt;&gt; from typing import Any&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from nptyping import NDArray, Structure&gt;&gt;&gt; arr = np.array([(&quot;Peter&quot;, 34)], dtype=[(&quot;name&quot;, &quot;U10&quot;), (&quot;age&quot;, &quot;i4&quot;)])&gt;&gt;&gt; isinstance(arr, NDArray[Any, Structure[&quot;name: Str, age: Int&quot;]])True```Subarrays can be expressed with a shape expression between square brackets:```python&gt;&gt;&gt; Structure[&quot;name: Int[3, 3]&quot;]Structure['name: Int[3, 3]']```### NumPy Record arraysThe recarray is a specialization of a structured array. You can use `RecArray`to express them.```python&gt;&gt;&gt; from nptyping import RecArray&gt;&gt;&gt; arr = np.array([(&quot;Peter&quot;, 34)], dtype=[(&quot;name&quot;, &quot;U10&quot;), (&quot;age&quot;, &quot;i4&quot;)])&gt;&gt;&gt; rec_arr = arr.view(np.recarray)&gt;&gt;&gt; isinstance(rec_arr, RecArray[Any, Structure[&quot;name: Str, age: Int&quot;]])True```### Pandas DataFramesPandas DataFrames can be expressed with `Structure` also. To make it more concise, you may want to alias `Structure`.```python&gt;&gt;&gt; from nptyping import DataFrame, Structure as S&gt;&gt;&gt; df: DataFrame[S[&quot;x: Float, y: Float&quot;]]```### More examplesHere is an example of a rich expression that can be done with `nptyping`:```pythondef plan_route(        locations: NDArray[Shape[&quot;[from, to], [x, y]&quot;], Float]) -&gt; NDArray[Shape[&quot;* stops, [x, y]&quot;], Float]:    ...```More examples can be found in the [documentation](https://github.com/ramonhagenaars/nptyping/blob/master/USERDOCS.md#Examples).## Documentation* [User documentation](https://github.com/ramonhagenaars/nptyping/blob/master/USERDOCS.md) &lt;br/&gt;The place to go if you are using this library. &lt;br/&gt;&lt;br/&gt;  * [Release notes](https://github.com/ramonhagenaars/nptyping/blob/master/HISTORY.md) &lt;br/&gt;To see what's new, check out the release notes. &lt;br/&gt;&lt;br/&gt;* [Contributing](https://github.com/ramonhagenaars/nptyping/blob/master/CONTRIBUTING.md) &lt;br/&gt;If you're interested in developing along, find the guidelines here. &lt;br/&gt;&lt;br/&gt;* [License](https://github.com/ramonhagenaars/nptyping/blob/master/LICENSE) &lt;br/&gt;If you want to check out how open source this library is.</longdescription>
</pkgmetadata>