<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PV-Module---PV-Module is a Python library which focus is to simulate photovoltaic systems.This module can simulate both Monofacial &amp; Bifacial modules.## Installation---Use the package manager [pip](https://pypi.org/project/pvmodule) to install foobar.```bashpip install pvmodule```## Usage---### Usage - LocationUsing the city name, this method will geolocate its coordinates, elevation, timezone.To use costum locations, just input the desired parameters and they will overwrite the geolocation.    Parameters    ----------    city: str      The name of the city in which the system is going to be built.    latitude: float, default = None,      A specific latitude to overwrite the automatic search.    longitude: float, default = None,      A specific longitude to overwrite the automatic search.    elevation: float, default = None,      A specific elevation to overwrite the automatic search.      This elevation corresponds to how many meters the city is above the sea-level.    timezone: str, default = None,      The timezone in which the city is located.      A specific timezone to overwrite the automatic search.    name: str, default = None,      The name of the system. This does not affect anything.```python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; Location = Location()&gt;&gt;&gt; location = Location.set_location('Lisbon')&gt;&gt;&gt; print(location.get_info()){ 'Address': 'Lisboa, Portugal', 'Latitude': 38.7077507, 'Longitude': -9.1365919, 'Elevation': 10.93380069732666, 'Timezone': 'Europe/Lisbon' }```### Usage - PV Module SelectionTo retrieve a list of 17000+ PV modules the following method can be used with the following parameters.Parameters----------url : str, default = 'https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/PV_Modules.csv'Url to the list of modules. Can also be a .csv file.wattage : int, default = NoneFilter modules by a desired WattageBIPV : str, default = None, default values allows both bi-facial and mono-facial modules to appear in the listFilter modules by bi-facial or monofacial modules  Bi-facial = 'Y'  Mono-facial = 'N'```python&gt;&gt;&gt; from pvmodule.modules import Modules&gt;&gt;&gt; Modules = Modules()&gt;&gt;&gt; module_list = Modules.list_modules() Manufacturer Model Number Safety Certification Pmax PTC Technology A_c N_s N_p BIPV Isc Voc Ipmax Vpmax NOCT Tc_pmax Tc_isc Tc_voc Short Side Long Side0 Ablytek 6MN6A270 UL 1703 270.0 242.1 Mono-c-Si 1.627 60.0 1.0 N 9.34 38.63 8.81 30.72 47.4 -0.4509 0.0521 -0.3137 0.992 1.641 Ablytek 6MN6A275 UL 1703 275.0 246.7 Mono-c-Si 1.627 60.0 1.0 N 9.42 38.97 8.88 30.99 47.4 -0.4509 0.0521 -0.3137 0.992 1.642 Ablytek 6MN6A280 UL 1703 280.0 251.3 Mono-c-Si 1.627 60.0 1.0 N 9.51 39.31 8.96 31.26 47.4 -0.4509 0.0521 -0.3137 0.992 1.643 Ablytek 6MN6A285 UL 1703 285.0 256.0 Mono-c-Si 1.627 60.0 1.0 N 9.59 39.65 9.04 31.53 47.4 -0.4509 0.0521 -0.3137 0.992 1.644 Ablytek 6MN6A290 UL 1703 290.0 260.6 Mono-c-Si 1.627 60.0 1.0 N 9.67 39.99 9.12 31.80 47.4 -0.4509 0.0521 -0.3137 0.992 1.64... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...17706 Zytech Solar ZT300P UL 1703 300.0 271.2 Multi-c-Si 1.931 72.0 1.0 N 8.71 45.96 8.26 36.32 46.4 -0.4308 0.0483 -0.3199 0.990 1.9517707 Zytech Solar ZT305P UL 1703 305.0 275.8 Multi-c-Si 1.931 72.0 1.0 N 8.87 46.12 8.36 36.49 46.4 -0.4308 0.0483 -0.3199 0.990 1.9517708 Zytech Solar ZT310P UL 1703 310.0 280.5 Multi-c-Si 1.931 72.0 1.0 N 8.90 46.28 8.46 36.66 46.4 -0.4308 0.0483 -0.3199 0.990 1.9517709 Zytech Solar ZT315P UL 1703 315.0 285.1 Multi-c-Si 1.931 72.0 1.0 N 9.01 46.44 8.56 36.81 46.4 -0.4308 0.0483 -0.3199 0.990 1.9517710 Zytech Solar ZT320P UL 1703 320.0 289.8 Multi-c-Si 1.931 72.0 1.0 N 9.12 46.60 8.66 37.00 46.4 -0.4308 0.0483 -0.3199 0.990 1.95```### Usage - PV Inverter SelectionList of +1400 inverters provided by CEC.      Parameters      ----------      url : str, default = 'https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/CEC%20Inverters.csv'          Url to the list of inverters. Can also be a .csv file.      vac : str, default = None        Filters the results that are equal to the AC voltage output      pmax : int, default = None        Filters the results that are equal to the Max Power input      print_list : bool, default = False        Prints list of inverters```python&gt;&gt;&gt; from pvmodule.inverters import Inverters&gt;&gt;&gt; Inverters = Inverters()&gt;&gt;&gt; inverter_list = Inverters.list_inverters()Name Vac Pso Paco Pdco Vdco C0 C1 C2 C3 Pnt Vdcmax Idcmax Mppt_low Mppt_high CEC_Date CEC_hybrid0 ABB: PVI-3.0-OUTD-S-US-A [208V] 208 18.1674 3000.0 3142.30 310.0 -8.040000e-06 -0.000011 0.000999 -0.000287 0.100000 480.0 10.13650 100.0 480.0 10/15/2018 N1 ABB: PVI-3.0-OUTD-S-US-A [240V] 240 16.8813 3000.0 3121.67 340.0 -5.700000e-06 -0.000021 0.000583 -0.000712 0.100000 480.0 9.18138 100.0 480.0 10/15/2018 N2 ABB: PVI-3.0-OUTD-S-US-A [277V] 277 22.0466 3000.0 3106.85 390.0 -5.460000e-06 -0.000033 -0.000032 -0.001180 0.200000 480.0 7.96628 100.0 480.0 10/15/2018 N3 ABB: PVI-3.0-OUTD-S-US-Z-A [208V] 208 18.1674 3000.0 3142.30 310.0 -8.040000e-06 -0.000011 0.000999 -0.000287 0.100000 480.0 10.13650 100.0 480.0 10/15/2018 N4 ABB: PVI-3.0-OUTD-S-US-Z-A [240V] 240 16.8813 3000.0 3121.67 340.0 -5.700000e-06 -0.000021 0.000583 -0.000712 0.100000 480.0 9.18138 100.0 480.0 10/15/2018 N... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...1415 Yaskawa Solectria Solar: SGI 750XTM [380V] 380 3714.1400 753200.0 777216.00 615.0 -1.410000e-08 0.000006 0.001554 -0.000272 122.550000 820.0 1263.77000 545.0 820.0 NaN N1416 Yaskawa Solectria Solar: XGI 1500-125/125 [600V] 600 236.8650 124618.0 126553.00 1050.0 -4.580000e-08 0.000012 0.003275 0.000547 3.842105 1250.0 120.52600 860.0 1250.0 7/21/2020 N1417 Yaskawa Solectria Solar: XGI 1500-125/150 [600V] 600 236.8650 124618.0 126553.00 1050.0 -4.580000e-08 0.000012 0.003275 0.000547 3.842105 1250.0 120.52600 860.0 1250.0 7/21/2020 N1418 Yaskawa Solectria Solar: XGI 1500-150/166 [600V] 600 111.3230 150000.0 152458.00 1100.0 -3.140000e-08 0.000014 0.000113 -0.000354 2.750000 1250.0 138.59800 860.0 1250.0 7/21/2020 N1419 Yaskawa Solectria Solar: XGI 1500-166/166 [600V] 600 253.1140 165139.0 167945.00 1050.0 -5.060000e-08 0.000014 0.003122 0.000368 3.842105 1250.0 159.94800 860.0 1250.0 7/21/2020 N```# Sample Usages---```python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; Location = Location()&gt;&gt;&gt; location = Location.set_location('Lisbon')&gt;&gt;&gt; print(location.get_info()){ 'Address': 'Lisboa, Portugal', 'Latitude': 38.7077507, 'Longitude': -9.1365919, 'Elevation': 10.93380069732666, 'Timezone': 'Europe/Lisbon' }```## Retrieving Hourly data from PVGIS```python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; Location = Location()&gt;&gt;&gt; location = Location.set_location('Lisbon')&gt;&gt;&gt; PVGIS = PVGIS()&gt;&gt;&gt; input, output, meta = PVGIS.retrieve_hourly(                                            latitude=location.latitude,                                            longitude=location.longitude                                            )&gt;&gt;&gt; print(output)                     G(i)  H_sun    T2m  WS10m  Inttime2005-01-01 00:10:00   0.0    0.0  11.29   3.86  0.02005-01-01 01:10:00   0.0    0.0  11.19   4.14  0.02005-01-01 02:10:00   0.0    0.0  11.08   4.07  0.02005-01-01 03:10:00   0.0    0.0  10.94   3.66  0.02005-01-01 04:10:00   0.0    0.0  10.84   3.24  0.0...                   ...    ...    ...    ...  ...2020-12-31 19:10:00   0.0    0.0  12.50   8.28  0.02020-12-31 20:10:00   0.0    0.0  12.12   8.34  0.02020-12-31 21:10:00   0.0    0.0  11.58   8.48  0.02020-12-31 22:10:00   0.0    0.0  11.41   8.28  0.02020-12-31 23:10:00   0.0    0.0  11.36   8.14  0.0[140256 rows x 5 columns]```## Retrieving daily data from a specific month```python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; Location = Location()&gt;&gt;&gt; location = Location.set_location('Lisbon')&gt;&gt;&gt; PVGIS = PVGIS()&gt;&gt;&gt; input, output, meta = PVGIS.retrieve_daily(                                           latitude=location.latitude,                                           longitude=location.longitude,                                           month=6                                           )&gt;&gt;&gt; print(output)       month    G(i)   Gb(i)   Gd(i)    T2mtime00:00      6    0.00    0.00    0.00  17.4901:00      6    0.00    0.00    0.00  17.3502:00      6    0.00    0.00    0.00  17.2103:00      6    0.00    0.00    0.00  17.0904:00      6    0.00    0.00    0.00  16.9805:00      6    0.00    0.00    0.00  16.9106:00      6   88.17   36.65   51.52  16.9707:00      6  244.22  136.17  108.05  17.5308:00      6  406.34  251.83  154.51  18.4209:00      6  560.33  366.56  193.77  19.3910:00      6  691.23  479.46  211.78  20.2911:00      6  788.61  558.10  230.51  21.0512:00      6  869.24  632.05  237.19  21.5913:00      6  877.81  644.56  233.24  21.8814:00      6  828.50  609.14  219.36  21.9215:00      6  738.56  540.56  198.01  21.7516:00      6  594.07  420.05  174.01  21.3817:00      6  426.24  280.32  145.91  20.8818:00      6  244.49  141.33  103.16  20.2519:00      6   82.36   35.16   47.20  19.4520:00      6    0.00    0.00    0.00  18.6821:00      6    0.00    0.00    0.00  18.1822:00      6    0.00    0.00    0.00  17.9023:00      6    0.00    0.00    0.00  17.69```## Retrieving Bifacial data```python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; Location = Location()&gt;&gt;&gt; location = Location.set_location('Lisbon')&gt;&gt;&gt; PVGIS = PVGIS()&gt;&gt;&gt; _,bifacial_data,_ = PVGIS().retrieve_all_year_bifacial(                                                            location,                                                            azimuth=90                                                            )&gt;&gt;&gt; print(bifacial_data)Global irradiance on a fixed plane Global irradiance on 2-axis tracking plane Direct irradiance on a fixed plane Direct normal irradiance Diffuse irradiance on a fixed plane Diffuse irradiance on 2-axis tracking plane 2m Air Temperature 10m Wind speed monthtime 00:00 0.0 0.0 0.0 0.0 0.0 0.0 11.29 2.978333 1.001:00 0.0 0.0 0.0 0.0 0.0 0.0 11.17 2.827083 1.002:00 0.0 0.0 0.0 0.0 0.0 0.0 10.90 2.719583 1.003:00 0.0 0.0 0.0 0.0 0.0 0.0 10.73 2.658750 1.004:00 0.0 0.0 0.0 0.0 0.0 0.0 10.61 2.638333 1.0... ... ... ... ... ... ... ... ... ...19:00 0.0 0.0 0.0 0.0 0.0 0.0 13.25 2.841250 12.020:00 0.0 0.0 0.0 0.0 0.0 0.0 12.71 2.850000 12.021:00 0.0 0.0 0.0 0.0 0.0 0.0 12.61 2.858333 12.022:00 0.0 0.0 0.0 0.0 0.0 0.0 12.26 2.861250 12.023:00 0.0 0.0 0.0 0.0 0.0 0.0 12.17 2.870000 12.0288 rows Ã— 9 columns```## Retrieving Monthly data```python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; Location = Location()&gt;&gt;&gt; location = Location.set_location('Lisbon')&gt;&gt;&gt; PVGIS = PVGIS()&gt;&gt;&gt; input, output, meta = PVGIS.retrieve_monthly(                                            latitude = location.latitude,                                            longitude = location.longitude,                                            startyear=2020,                                            endyear=2020                                            )&gt;&gt;&gt; print(output)    year  month  H(h)_m  Hb(n)_m    Kd   T2m0   2020      1   71.23   107.98  0.42  12.81   2020      2   98.98   131.26  0.38  13.82   2020      3  147.58   168.06  0.36  13.73   2020      4  157.34   145.53  0.42  14.84   2020      5  218.93   220.23  0.31  18.15   2020      6  231.53   235.23  0.30  18.76   2020      7  244.94   261.47  0.26  21.27   2020      8  208.59   217.80  0.30  20.68   2020      9  159.27   167.80  0.36  20.39   2020     10  117.98   143.74  0.39  17.110  2020     11   68.78    81.66  0.52  15.411  2020     12   63.66    93.93  0.46  12.9```# from pvmodule.graph import Graph## Yearly irradiance distribuition``` python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; from pvmodule.graph import Graph&gt;&gt;&gt; location = Location().set_location(                                  latitude = 38.6973,                                   longitude = -9.30836                                  )&gt;&gt;&gt; _,normal_data,_ = PVGIS().retrieve_all_year(                                            location,                                             panel_tilt=35,                                             azimuth=0                                            )&gt;&gt;&gt; _,bifacial_data,_ = PVGIS().retrieve_all_year_bifacial(                                                      location,                                                       azimuth=90                                                      )&gt;&gt;&gt; Graph().Comparison(                  location,                  bifacial_data,                   normal_data,                  'Global irradiance on a fixed plane'                  )```![alt text](https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/documentation/1.png)``` python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.graph import Graph&gt;&gt;&gt; location = Location().set_location(latitude = 38.6973,                                   longitude = -9.30836                                   )&gt;&gt;&gt; Graph().Heatmap(              location,               panel_tilt=35,               surface_azimuth=0,               year=2020              )```![alt text](https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/documentation/2.png)## Comparison of monthly average irradiance from vertical vs. 35 horizontal configurations``` python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; from pvmodule.graph import Graph&gt;&gt;&gt; location = Location().set_location(latitude = 38.6973,                                   longitude = -9.30836                                   )&gt;&gt;&gt; _,bi_data,_ = PVGIS().retrieve_all_year_bifacial(                                                    location,                                                    azimuth = 90)&gt;&gt;&gt; _,normal_data,_ = PVGIS().retrieve_all_year(                                                location,                                                 panel_tilt = 35,                                                 azimuth=0)&gt;&gt;&gt; Graph().plot_multiple_monthly(                        [bi_data.where(bi_data[&quot;month&quot;]==7), normal_data.where(normal_data[&quot;month&quot;]==7)],                        'Global irradiance on a fixed plane'                        )```![alt text](https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/documentation/3.png)## Irradiance dependancy due to the changes of azimuth``` python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.graph import Graph&gt;&gt;&gt; location = Location().set_location(latitude = 38.6973,                                   longitude = -9.30836                                   )&gt;&gt;&gt; Graph().azimuth_test(location)```![alt text](https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/documentation/4.png)``` python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.graph import Graph&gt;&gt;&gt; location = Location().set_location(latitude = 38.6973,                                   longitude = -9.30836                                   )&gt;&gt;&gt; Graph().Bifacial_azimuth_test(location)```![alt text](https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/documentation/5.png)## Maximum, Nominal and Minimum efficiencies of an specified inverter``` python&gt;&gt;&gt; from pvmodule.module import Modules&gt;&gt;&gt; from pvmodule.inverter import Inverters&gt;&gt;&gt; from pvmodule.graph import Graph&gt;&gt;&gt; module = Modules().module(                              'Bi_LG405N2T-L5',                              losses=5,                              number_of_modules=20                              )&gt;&gt;&gt; inverter, module = Inverters().auto_select_inverter(module)&gt;&gt;&gt; Graph().Efficiency_curve_of_inverter(inverter)```![alt text](https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/documentation/6.png)## Yearly irradiance curves (of multiple locations)``` python&gt;&gt;&gt; from pvmodule.location import Location&gt;&gt;&gt; from pvmodule.pvgis import PVGIS&gt;&gt;&gt; from pvmodule.graph import Graph&gt;&gt;&gt; location = Location().set_location(                                      latitude = 64.14466555827349,                                      longitude = -21.95256166366471                                      )&gt;&gt;&gt; _,location1,_ = PVGIS().retrieve_all_year(                                              location,                                              panel_tilt = 35,                                              azimuth=0                                              )&gt;&gt;&gt; location = Location().set_location(                                      latitude = 1.3490983309841909,                                      longitude = 103.80140706509002                                      )&gt;&gt;&gt; _,location2,_ = PVGIS().retrieve_all_year(                                              location,                                              panel_tilt = 35,                                              azimuth=0                                              )&gt;&gt;&gt; location = Location().set_location(                                        latitude = 38.6973,                                        longitude = -9.30836                                        )&gt;&gt;&gt; _,location3,_ = PVGIS().retrieve_all_year(                                              location,                                              panel_tilt = 35,                                              azimuth=0                                              )&gt;&gt;&gt; Graph().plot_multiple_yearly(                                [                                  ('Reykjavik, Iceland',location1)                                ],                                'Global irradiance on a fixed plane'                                )#&gt;&gt;&gt; Graph().plot_multiple_yearly(#                                [#                                  ('Reykjavik, Iceland',location1),#                                  ('Singapore, Singapore',location2), #                                  ('Lisbon, Portugal',location3)#                                ],#                                'Global irradiance on a fixed plane'#                                )```![alt text](https://raw.githubusercontent.com/fabio-r-almeida/pvmodule/main/documentation/7.png)## TODO---- Create a simulation method, in which:  - Calculate pv production  - Estimate output energy- ~~Create annual heatmap~~- ~~Average Irradiance dependancy due to the changes of azimuth~~- ~~Inverter efficiencies curves~~## Versions---All notable changes to this project will be documented in this file.### [0.0.66] to [0.0.130] - 2023-03-20### Added- Added new *Graph* class.- Multithreading yearly horizontal and vertical data acquisition with   - *PVGIS().retrieve_all_year_bifacial()*  - *PVGIS().retrieve_all_year()*### Fixed- Improved inverter auto-selection.- Added error exception in both *Inverter* and *PVGIS* class.### Removed- Irradiance class will soon be removed due to incorrect irradiance estimations.  - This issue is believed to be cause due to the incorrect shadow calculation of the module.### [0.0.62] to [0.0.65] - 2023-03-04### Added- Added a second order spline in order to smoothen out the values from PVGIS.- Changed the timeframe from 1 hour to 5 minutes.- Change TMY dates for future 2030 dates.### [0.0.44] to [0.0.61] - 2023-03-04### Fixed- Solved issue where Irradiance calculations could be divided by zero and thus creating unlimited irradiance reaching the PV modules.- Updated the CEC_Inverters database by adding:   - Short circuit currents per inverter;  - Number of MPPT strings per inverter.- Bug fixing.### [0.0.35] to [0.0.43] - 2023-02-28### Added- Added reverse Geolocalization using coordinates to determine the address.### Fixed- Bug fixing.### Removed- Removed Timezone from Location class due to unknown issues.### [0.0.34] - 2023-01-31### Added- Added new class to calculare front and rear irradiance.### Fixed- Corrected/updated formulas to calculate spacing between modules.- Resolved minor bugs.## Contributing---Pull requests are welcome. For major changes, please open an issue firstto discuss what you would like to change.Please make sure to update tests as appropriate.## License---[MIT](https://choosealicense.com/licenses/mit/)## Copyright---Copyright (c), 2023, Fabio Ramalho de AlmeidaPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>