<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)[![Build Status](https://travis-ci.org/polyaxon/rhea.svg?branch=master)](https://travis-ci.org/polyaxon/rhea)[![PyPI version](https://badge.fury.io/py/rhea.svg)](https://badge.fury.io/py/rhea)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/e49f4132c90e496e974d3e9883ee4d8c)](https://www.codacy.com/app/polyaxon/rhea?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=polyaxon/rhea&amp;amp;utm_campaign=Badge_Grade)[![Slack](https://img.shields.io/badge/chat-on%20slack-aadada.svg?logo=slack&amp;longCache=true)](https://join.slack.com/t/polyaxon/shared_invite/enQtMzQ0ODc2MDg1ODc0LWY2ZTdkMTNmZjBlZmRmNjQxYmYwMTBiMDZiMWJhODI2ZTk0MDU4Mjg5YzA5M2NhYzc5ZjhiMjczMDllYmQ2MDg)# rheaEfficient environment variables management and typing for python.## Installation```pip install -U rhea```## Features  * Typed retrieval of environment variables. * Handling of optional, secret, and local variables. * Reading from different sources: os, json files, yaml files. * Collection of parsed parameters.## Usage### Reading typed values from a params```pythonfrom rhea import Rhearhea_config = Rhea(bool_value1='1',                    bool_value2='false',                    bool_value3=True)rhea_config.get_boolean('bool_value1')# Truerhea_config.get_boolean('bool_value2')# Falserhea_config.get_boolean('bool_value3')# True```### Reading typed values from a env vars```pythonimport osfrom rhea import Rhearhea_config = Rhea.read_configs(os.environ)```### Reading typed values from different sources```pythonimport osfrom rhea import Rhearhea_config = Rhea.read_configs([os.environ,                                 'json_file.json',                                 'yaml_file.yaml',                                'another_file_override.json',                                {'foo': 'bar'}])```### Base typesexamples:```BOOL_ENV_VALUE1: 1BOOL_ENV_VALUE2: trueBOOL_ENV_VALUE3: fBOOL_ENV_VALUE4: onINT_ENV_VALUE1: '1' INT_ENV_VALUE2: -100STRING_ENV_VALUE: 'some string'FLOAT_ENV_VALUE1: '1.1'FLOAT_ENV_VALUE2: -1.3FLOAT_ENV_VALUE3: 1111.1FLOAT_ENV_VALUE4: -33DICT_ENV_VALUE: {&quot;foo&quot;: &quot;bar&quot;, &quot;1&quot;: &quot;2&quot;}LIST_ENV_VALUE: 'foo, bar, boo'URI_ENV_VALUE1: user:pass@host.comURI_ENV_VALUE2: user:pass@host:4000AUTH_ENV_VALUE: user:pass```Reading:```pythonfrom rhea import Rhearhea_config = Rhea.read_configs([...])rhea_config.get_boolean('BOOL_ENV_VALUE1')# Truerhea_config.get_boolean('BOOL_ENV_VALUE2')# Truerhea_config.get_boolean('BOOL_ENV_VALUE3')# Falserhea_config.get_boolean('BOOL_ENV_VALUE4')# Truerhea_config.get_int('INT_ENV_VALUE1')  # 1rhea_config.get_int('INT_ENV_VALUE2')  # -100rhea_config.get_string('STRING_ENV_VALUE')  # some stringrhea_config.get_float('FLOAT_ENV_VALUE1')# 1.1rhea_config.get_float('FLOAT_ENV_VALUE1')# -1.3rhea_config.get_float('FLOAT_ENV_VALUE1')# 1111.1rhea_config.get_float('FLOAT_ENV_VALUE1')# -33.0rhea_config.get_dict('DICT_ENV_VALUE')# {'foo': 'bar', '1': '2'}rhea_config.get_list('LIST_ENV_VALUE')# ['foo', 'bar', 'boo']rhea_config.get_uri('URI_ENV_VALUE1')# UriSpec('user', 'pass', 'host')rhea_config.get_uri('URI_ENV_VALUE2')# UriSpec('user', 'pass', 'host:4000')rhea_config.get_uri('AUTH_ENV_VALUE')# AuthSpec('user', 'pass')```### List of base typesexamples:```BOOLS_ENV_VALUE: '[1, 0, &quot;true&quot;, &quot;false&quot;, &quot;t&quot;, &quot;f&quot;, &quot;on&quot;, &quot;off&quot;]'INTS_ENV_VALUE: '[1, 0, -100]'STRINGS_ENV_VALUE: '[&quot;some_string&quot;, &quot;another_string&quot;]'FLOATS_ENV_VALUE: '[1.1, -1.3, 0.03, 1111.1, 1.]'DICTS_ENV_VALUE: '[{&quot;foo&quot;: &quot;bar&quot;, &quot;1&quot;: 2}, {&quot;foo&quot;: &quot;bar&quot;, &quot;1&quot;: 2}]'DICT_OF_DICTS_ENV_VALUE: '{&quot;key1&quot;: {&quot;foo&quot;: &quot;bar&quot;, &quot;1&quot;: 2}, &quot;key2&quot;: {&quot;foo&quot;: &quot;bar&quot;, &quot;1&quot;: 2}}'URIS_ENV_VALUE: '[&quot;user:pass@host.com&quot;, &quot;user:pass@host:4000&quot;]'AUTHS_ENV_VALUE: '[&quot;user1:pass1&quot;, &quot;user2:pass2&quot;]'```Reading:```pythonfrom rhea import Rhearhea_config = Rhea.read_configs([...])rhea_config.get_boolean('BOOLS_ENV_VALUE', is_list=True)#  [True, False, True, False, True, False, True, False]rhea_config.get_int('INTS_ENV_VALUE', is_list=True)# [1, 0, -100]rhea_config.get_string('STRINGS_ENV_VALUE', is_list=True)# ['some_string', 'another_string']rhea_config.get_float('FLOATS_ENV_VALUE', is_list=True)# [1.1, -1.3, 0.03, 1111.1, 1.0]rhea_config.get_dict('DICTS_ENV_VALUE', is_list=True)# [{'foo1': 'bar1', '1': 2}, {'foo2': 'bar2', '3': 4}]rhea_config.get_dict_of_dicts('DICT_OF_DICTS_ENV_VALUE')# {'key1': {'foo': 'bar', '1': 2}, 'key2': {'foo': 'bar', '1': 2}}rhea_config.get_uri('URIS_ENV_VALUE', is_list=True)# [UriSpec('user', 'pass', 'host'), UriSpec('user', 'pass', 'host:4000')]rhea_config.get_uri('AUTHS_ENV_VALUE', is_list=True)# [UriSpec('user1', 'pass1'), UriSpec('user2', 'pass2')]```### Optional values and default values```pythonfrom rhea import Rhearhea_config = Rhea.read_configs([...])rhea_config.get_boolean('BOOL_ENV_VALUE', is_optional=True)# Nonerhea_config.get_boolean('BOOL_ENV_VALUE', is_optional=True, default=True)# Truerhea_config.get_int('INT_ENV_VALUE', is_optional=True)# Nonerhea_config.get_int('INT_ENV_VALUE', is_optional=True, default=101)# 101rhea_config.get_float('FLOAT_ENV_VALUE', is_optional=True)# Nonerhea_config.get_float('FLOAT_ENV_VALUE', is_optional=True, default=-3.3)# -3.3rhea_config.get_float('STRING_ENV_VALUE', is_optional=True)# Nonerhea_config.get_float('STRING_ENV_VALUE', is_optional=True, default='default')# default```### Value validation```pythonfrom rhea import Rhearhea_config = Rhea.read_configs([...])# INT_ENV_VALUE = 11rhea_config.get_int('INT_ENV_VALUE', options=[1, 2, 3])# raise RheaErrorrhea_config.get_int('INT_ENV_VALUE', options=[1, 2, 3, 11])# 11```### Parsed data```pythonfrom rhea import Rhearhea_config = Rhea.read_configs([...])rhea_config.get_requested_data(include_locals=False, include_secrets=False)# {'key1': 'value1', ...}```## Example with Django```pythonfrom rhea import Rhearhea_config = Rhea.read_configs([...])DEBUG = rhea_config.get_boolean('DJANGO_DEBUG_MODE', is_optional=True, default=False)SECRET_KEY = rhea_config.get_string('POLYAXON_SECRET_KEY', is_secret=True)```## Running tests```pytest```# License[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fpolyaxon%2Frhea.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fpolyaxon%2Frhea?ref=badge_large)</longdescription>
</pkgmetadata>