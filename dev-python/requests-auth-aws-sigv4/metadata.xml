<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># requests-auth-aws-sigv4Use AWS signature version 4 Authentication with the python requests moduleThis package provides an authentication class that can be used with the popular [requests](https://requests.readthedocs.io/en/master/) package to add the [AWS Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)authentication information.The signing code is inspired by the python example provided by AWS.This package should support any/all AWS API's, including API Gateway API's (execute-api), Elasticsearch clusters, and others.  AWS Credentials may be pulled from the environmentin an easy and familiar way.The signature is added as a header to the request.## Installation```pip install requests-auth-aws-sigv4```## Usage```pythonimport requestsfrom requests_auth_aws_sigv4 import AWSSigV4r = requests.request('POST', 'https://sts.us-east-1.amazonaws.com',     data=dict(Version='2011-06-15', Action='GetCallerIdentity'),     auth=AWSSigV4('sts'))print(r.text)```If **boto3** is available, it will attempt to use credentials that have been configured for the AWS CLI or SDK's,as documented in [Boto3 User Guide: Credentials](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#credentials).Otherwise, if **boto3** is not available, credentials must be provided using either environment variables or parameters.#### Example using environment variablesEnvironment variable names are the same as documented for AWS CLI and SDK's.```shellexport AWS_ACCESS_KEY_ID=MYACCESSKEYexport AWS_SECRET_ACCESS_KEY=THISISSECRETexport AWS_SESSION_TOKEN=THISISWHERETHESUPERLONGTOKENGOES``````pythonimport requestsfrom requests_auth_aws_sigv4 import AWSSigV4aws_auth = AWSSigV4('ec2') # If not provided, check for AWS Credentials from Environment Variablesr = requests.request('GET', 'https://ec2.us-east-1.amazonaws.com?Version=2016-11-15&amp;Action=DescribeRegions',    auth=aws_auth)print(r.text)```#### Example using parametersPassing credentials as parameters overrides all other possible sources. ```pythonimport requestsfrom requests_auth_aws_sigv4 import AWSSigV4aws_auth = AWSSigV4('ec2',    aws_access_key_id=ACCESS_KEY,    aws_secret_access_key=SECRET_KEY,    aws_session_token=SESSION_TOKEN,)r = requests.request('GET', 'https://ec2.us-east-1.amazonaws.com?Version=2016-11-15&amp;Action=DescribeRegions',    auth=aws_auth)print(r.text)```### Usage with Elasticsearch Client (elasticsearch-py)```pythonfrom elasticsearch import Elasticsearch, RequestsHttpConnectionfrom requests_auth_aws_sigv4 import AWSSigV4es_host = 'search-service-foobar.us-east-1.es.amazonaws.com'aws_auth = AWSSigV4('es')# use the requests connection_class and pass in our custom auth classes_client = Elasticsearch(host=es_host,                          port=80,                          connection_class=RequestsHttpConnection,                          http_auth=aws_auth)es_client.info()```### Debug LoggingAll log messages are at the module level.```pythonimport logginglogging.basicConfig() # Setup basic logging to stdoutlog = logging.getLogger('requests_auth_aws_sigv4')log.setLevel(logging.DEBUG)```## Command Line UsageThe module can be run from the command line in a way that is similar to how cURL works.```shell$ python3 -m requests_auth_aws_sigv4 https://sampleapi.execute-api.us-east-1.amazonaws.com/test/ -v&gt; GET /test/ HTTP/1.1&gt; Host: sampleapi.execute-api.us-east-1.amazonaws.com&gt; User-Agent: python-requests/2.23.0 auth-aws-sigv4/0.2&gt; Accept-Encoding: gzip, deflate&gt; Accept: */*&gt; Connection: keep-alive&gt; X-AMZ-Date: 20200513T180549Z&gt; Authorization: AWS4-HMAC-SHA256 Credential=AKIASAMPLEKEYID/20200513/us-east-1/execute-api/aws4_request, SignedHeaders=host;x-amz-date, Signature=EXAMPLESIGNATUREISHERE&gt;&lt; HTTP/1.1 200 OK&lt; Connection: keep-alive&lt; Content-Length: 25&lt; Content-Type: application/json&lt; Date: Wed, 13 May 2020 18:05:49 GMT&lt; Server: Server&lt; x-amz-apigw-id: MeExampleiMFs99=&lt; x-amzn-RequestId: 7example-7b7b-4343-9a9a-9bbexampleafhello```## Temporary Security CredentialsCredentials issued from [AWS STS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html)to grant temporary access can be used normally.  Set the token by passing the `aws_session_token` parameter, setting the `AWS_SESSION_TOKEN` environment variable, or configure the credential for boto3 as normal.## Using boto3 (or botocore) for AWS CredentialsThe packages **boto3** and **botocore** are not requirements to use this module.  As mentioned above, if **boto3** is available, a boto3.Session will be created to attempt to get credentialsand configure the default region.  This will happen automatically if credentials are not provided as parameters.</longdescription>
</pkgmetadata>