<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>About=====The purpose of this project is to provide a cross platform library which can parse, modify andabstract ELF, PE and MachO formats.Main features:  * **Parsing**: LIEF can parse ELF, PE, MachO, OAT, DEX, VDEX, ART and provides an user-friendly API to access to format internals.  * **Modify**: LIEF enables to modify some parts of these formats  * **Abstract**: Three formats have common features like sections, symbols, entry point... LIEF factors them.  * **API**: LIEF can be used in C, C++ and PythonDownloads / Install===================First, make sure to have an updated version of setuptools:.. code-block:: console   $ pip install setuptools --upgradeTo install the latest **version** (release):.. code-block:: console   $ pip install liefTo install nightly build:.. code-block:: console   $ pip install [--user] --index-url  https://lief-project.github.io/packages liefGetting started===============Python------.. code-block:: python  import lief  # ELF  binary = lief.parse(&quot;/usr/bin/ls&quot;)  print(binary)  # PE  binary = lief.parse(&quot;C:\\Windows\\explorer.exe&quot;)  print(binary)  # Mach-O  binary = lief.parse(&quot;/usr/bin/ls&quot;)  print(binary)C++---.. code-block:: cpp  #include &lt;LIEF/LIEF.hpp&gt;  int main(int argc, char** argv) {    // ELF    try {      std::unique_ptr&lt;LIEF::ELF::Binary&gt; elf = LIEF::ELF::Parser::parse(&quot;/bin/ls&quot;);      std::cout &lt;&lt; *elf &lt;&lt; std::endl;    } catch (const LIEF::exception&amp; err) {      std::cerr &lt;&lt; err.what() &lt;&lt; std::endl;    }    // PE    try {      std::unique_ptr&lt;LIEF::PE::Binary&gt; pe = LIEF::PE::Parser::parse(&quot;C:\\Windows\\explorer.exe&quot;);      std::cout &lt;&lt; *pe &lt;&lt; std::endl;    } catch (const LIEF::exception&amp; err) {      std::cerr &lt;&lt; err.what() &lt;&lt; std::endl;    }    // Mach-O    try {      std::unique_ptr&lt;LIEF::MachO::FatBinary&gt; macho = LIEF::MachO::Parser::parse(&quot;/bin/ls&quot;);      std::cout &lt;&lt; *macho &lt;&lt; std::endl;    } catch (const LIEF::exception&amp; err) {      std::cerr &lt;&lt; err.what() &lt;&lt; std::endl;    }    return 0;  }C (Limited API)----------------.. code-block:: cpp  #include &lt;LIEF/LIEF.h&gt;  int main(int argc, char** argv) {    Elf_Binary_t* elf = elf_parse(&quot;/usr/bin/ls&quot;);    Elf_Section_t** sections = elf-&gt;sections;    for (size_t i = 0; sections[i] != NULL; ++i) {      printf(&quot;%s\n&quot;, sections[i]-&gt;name);    }    elf_binary_destroy(elf);    return 0;  }Documentation=============* `Main documentation &lt;https://lief.quarkslab.com/doc/latest/index.html&gt;`_* `Tutorial &lt;https://lief.quarkslab.com/doc/latest/tutorials/index.html&gt;`_* `API &lt;https://lief.quarkslab.com/doc/latest/api/index.html&gt;`_* `Doxygen &lt;https://lief.quarkslab.com/doc/latest/doxygen/index.html&gt;`_Contact=======* **Mail**: contact at lief.re* **Gitter**: `lief-project &lt;https://gitter.im/lief-project&gt;`_Authors=======Romain Thomas `@rh0main &lt;https://twitter.com/rh0main&gt;`_ - `Quarkslab &lt;https://www.quarkslab.com&gt;`_----LIEF is provided under the `Apache 2.0 license &lt;https://github.com/lief-project/LIEF/blob/0.10.1/LICENSE&gt;`_</longdescription>
</pkgmetadata>