<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># alfred3-interact: Interactive web-experiments in alfred3![GitHub](https://img.shields.io/github/license/jobrachem/alfred3-interact) [![DOI](https://zenodo.org/badge/340368707.svg)](https://zenodo.org/badge/latestdoi/340368707) [![Run tests](https://github.com/jobrachem/alfred3-interact/actions/workflows/pytest.yml/badge.svg)](https://github.com/jobrachem/alfred3-interact/actions/workflows/pytest.yml) [![pre-commit](https://github.com/jobrachem/alfred3-interact/actions/workflows/pre-commit.yml/badge.svg)](https://github.com/jobrachem/alfred3-interact/actions/workflows/pre-commit.yml)Alfred3-interact is a plugin for [alfred3](https://github.com/ctreffe/alfred).It allows for the creation of interactive web experiments, predominantlyin the social sciences. As prerequisites,you need to have **Python 3.7** or newer and **alfred3 v2.2.0** or newer installed.## Installation```$ pip3 install alfred3_interact```## DocumentationDocumentation for alfred3_interact is avaialable here: [Link to docs](https://jobrachem.github.io/alfred3-interact/build/html/index.html)## Quick exampleBelow is an example `script.py` for creating an experiment with anasynchronous exchange of data between participants matching:1. Initialize a group spec and the `alfred3_interact.MatchMaker` during experiment setup2. Use a `alfred3_interact.WaitingPage` for matchmaking inside its `wait_for` hook method.3. Find a group via `MatchMaker.match` and bind it to the   experiment plugins object.4. Now the group object is available in sections, pages, and elements   through the experiment session object. You can use it to access data   from other participants in the same group.```python# script.pyimport alfred3 as alimport alfred3_interact as aliexp = al.Experiment()@exp.setupdef setup(exp):    spec = ali.SequentialSpec(&quot;role1&quot;, &quot;role2&quot;, nslots = 10, name=&quot;mygroup&quot;)    exp.plugins.mm = ali.MatchMaker(spec, exp=exp)@exp.memberclass Match(ali.WaitingPage):    def wait_for(self):        group = self.exp.plugins.mm.match()        self.exp.plugins.group = group        return True@exp.memberclass Success(al.Page):    title = &quot;Match successful&quot;    def on_exp_access(self):        group = self.exp.plugins.group        txt = f&quot;You have successfully matched to role: {group.me.role}&quot;        self += al.Text(txt, align=&quot;center&quot;)if __name__ == &quot;__main__&quot;:    exp.run()```The demo experiment can be started by executing the following commandfrom the experiment directory (i.e. the directory in which you placedthe `script.py`):```$ alfred3 run```## CitationAlfred3-interact was developed for research at the department foreconomic and social psychology, Georg-August-University Göttingen.**If you are publishing research conducted using alfred3, thefollowing citation is required:**&gt;Brachem, J. &amp; Treffenstädt, C. (2021). Alfred3-interact - Interactive web experiments in alfred3. (Version x.x.x). Göttingen,Germany: https://doi.org/10.5281/zenodo.1437219</longdescription>
</pkgmetadata>