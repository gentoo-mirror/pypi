<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TaskIQ-RedisTaskiq-redis is a plugin for taskiq that adds a new broker and result backend based on redis.# InstallationTo use this project you must have installed core taskiq library:```bashpip install taskiq```This project can be installed using pip:```bashpip install taskiq-redis```# UsageLet's see the example with the redis broker and redis async result:```python# broker.pyimport asynciofrom taskiq_redis import ListQueueBroker, RedisAsyncResultBackendredis_async_result = RedisAsyncResultBackend(    redis_url=&quot;redis://localhost:6379&quot;,)# Or you can use PubSubBroker if you need broadcastingbroker = ListQueueBroker(    url=&quot;redis://localhost:6379&quot;,    result_backend=redis_async_result,)@broker.taskasync def best_task_ever() -&gt; None:    &quot;&quot;&quot;Solve all problems in the world.&quot;&quot;&quot;    await asyncio.sleep(5.5)    print(&quot;All problems are solved!&quot;)async def main():    task = await best_task_ever.kiq()    print(await task.wait_result())if __name__ == &quot;__main__&quot;:    asyncio.run(main())```Launch the workers:`taskiq worker broker:broker`Then run the main code:`python3 broker.py`## PubSubBroker and ListQueueBroker configurationWe have two brokers with similar interfaces, but with different logic.The PubSubBroker uses redis' pubsub mechanism and is very powerful,but it executes every task on all workers, because PUBSUB broadcasts messageto all subscribers.If you want your messages to be processed only once, please use ListQueueBroker.It uses redis' [LPUSH](https://redis.io/commands/lpush/) and [BRPOP](https://redis.io/commands/brpop/) commands to deal with messages.Brokers parameters:* `url` - url to redis.* `task_id_generator` - custom task_id genertaor.* `result_backend` - custom result backend.* `queue_name` - name of the pub/sub channel in redis.* `max_connection_pool_size` - maximum number of connections in pool.## RedisAsyncResultBackend configurationRedisAsyncResultBackend parameters:* `redis_url` - url to redis.* `keep_results` - flag to not remove results from Redis after reading.* `result_ex_time` - expire time in seconds (by default - not specified)* `result_px_time` - expire time in milliseconds (by default - not specified)&gt; IMPORTANT: **It is highly recommended to use expire time in RedisAsyncResultBackend**&gt; If you want to add expiration, either `result_ex_time` or `result_px_time` must be set.&gt;```python&gt;# First variant&gt;redis_async_result = RedisAsyncResultBackend(&gt;    redis_url=&quot;redis://localhost:6379&quot;,&gt;    result_ex_time=1000,&gt;)&gt;&gt;# Second variant&gt;redis_async_result = RedisAsyncResultBackend(&gt;    redis_url=&quot;redis://localhost:6379&quot;,&gt;    result_px_time=1000000,&gt;)&gt;```</longdescription>
</pkgmetadata>