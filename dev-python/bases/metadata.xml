<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>bases: A Python library for Base-N encodings============================================.. image:: https://img.shields.io/badge/python-3.7+-green.svg    :target: https://docs.python.org/3.7/    :alt: Python versions.. image:: https://img.shields.io/pypi/v/bases.svg    :target: https://pypi.python.org/pypi/bases/    :alt: PyPI version.. image:: https://img.shields.io/pypi/status/bases.svg    :target: https://pypi.python.org/pypi/bases/    :alt: PyPI status.. image:: http://www.mypy-lang.org/static/mypy_badge.svg    :target: https://github.com/python/mypy    :alt: Checked with Mypy    .. image:: https://readthedocs.org/projects/bases/badge/?version=latest    :target: https://bases.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://github.com/hashberg-io/bases/actions/workflows/python-pytest.yml/badge.svg    :target: https://github.com/hashberg-io/bases/actions/workflows/python-pytest.yml    :alt: Python package status.. image:: https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square    :target: https://github.com/RichardLitt/standard-readme    :alt: standard-readme compliantBases provides a customisable, parametric implementation of several common styles of Base-N encoding, covering all cases appearing in the `multibase specification &lt;https://github.com/multiformats/multibase&gt;`_ (except for proquints)... contents::Install-------You can install the latest release from `PyPI &lt;https://pypi.org/project/bases/&gt;`_ as follows:.. code-block:: console    $ pip install --upgrade basesUsage-----We suggest you import bases as follows:&gt;&gt;&gt; import basesBelow are some basic usage examples, to get you started: for detailed documentation, see https://bases.readthedocs.io/Base encoding objects^^^^^^^^^^^^^^^^^^^^^&gt;&gt;&gt; from bases import base32&gt;&gt;&gt; base32FixcharBaseEncoding(    StringAlphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',                   case_sensitive=False),    pad_char='=', padding='include')Encoding^^^^^^^^&gt;&gt;&gt; b = bytes([70, 98, 190, 187, 66, 224, 178])&gt;&gt;&gt; base32.encode(b)'IZRL5O2C4CZA===='Decoding^^^^^^^^&gt;&gt;&gt; s = 'IZRL5O2C4CZA===='&gt;&gt;&gt; base32.decode(s)b'Fb\xbe\xbbB\xe0\xb2'&gt;&gt;&gt; list(base32.decode(s))[70, 98, 190, 187, 66, 224, 178]Case/padding variations^^^^^^^^^^^^^^^^^^^^^^^&gt;&gt;&gt; b = bytes([70, 98, 190, 187, 66, 224, 178])&gt;&gt;&gt; base32.encode(b)'IZRL5O2C4CZA===='&gt;&gt;&gt; base32lower = base32.lower()&gt;&gt;&gt; base32lowerFixcharBaseEncoding(    StringAlphabet('abcdefghijklmnopqrstuvwxyz234567',                   case_sensitive=False),    pad_char='=', padding='include')&gt;&gt;&gt; base32lower.encode(b)'izrl5o2c4cza===='&gt;&gt;&gt; base32nopad = base32.nopad()&gt;&gt;&gt; base32nopad.encode(b)'IZRL5O2C4CZA'Case sensitivity variations^^^^^^^^^^^^^^^^^^^^^^^^^^^&gt;&gt;&gt; s = 'IZRL5O2C4CZA===='&gt;&gt;&gt; base32lower.decode(s)b'Fb\xbe\xbbB\xe0\xb2'&gt;&gt;&gt; base32lower_casesensitive = base32lower.with_case_sensitivity(True)&gt;&gt;&gt; base32lower_casesensitive.decode(s)bases.encoding.errors.NonAlphabeticCharError: Invalid character 'I'encountered for alphabet StringAlphabet('abcdefghijklmnopqrstuvwxyz234567').Custom base encodings^^^^^^^^^^^^^^^^^^^^^&gt;&gt;&gt; base4 = bases.make(&quot;0123&quot;, kind=&quot;zeropad-enc&quot;, block_nchars=4)&gt;&gt;&gt; base4ZeropadBaseEncoding(StringAlphabet('0123'), block_nchars=4)API---For the full API documentation, see https://bases.readthedocs.io/Contributing------------Please see `&lt;CONTRIBUTING.md&gt;`_.License-------`MIT Â© Hashberg Ltd. &lt;LICENSE&gt;`_</longdescription>
</pkgmetadata>