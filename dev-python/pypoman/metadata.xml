<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Polyhedron manipulation in Python[![PyPI package](https://img.shields.io/pypi/v/pypoman)](https://pypi.org/project/pypoman/)[![Documentation](https://img.shields.io/badge/documentation-online-brightgreen?logo=read-the-docs&amp;style=flat)](https://scaron.info/doc/pypoman/)![Status](https://img.shields.io/pypi/status/pypoman)This library allows common operations over [convex polyhedra](https://en.wikipedia.org/wiki/Convex_polyhedron) such as [polytope projection](https://scaron.info/doc/pypoman/index.html#module-pypoman.projection) and [vertex enumeration](https://scaron.info/doc/pypoman/index.html#module-pypoman.duality).See the [API documentation](https://scaron.info/doc/pypoman/) for details.## InstallationInstall system packages (here for Debian-based distributions) for Python and GLPK by:```console$ sudo apt-get install cython libglpk-dev python python-dev python-pip python-scipy```Then, install the library by:```console$ pip install pypoman```## Examples### Vertex enumerationWe can compute the list of vertices of a polytope described in halfspace representation by $A x \leq b$:```pythonimport numpy as npfrom pypoman import compute_polytope_verticesA = np.array([    [-1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],    [0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],    [0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0],    [0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0],    [0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0],    [0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0],    [0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0],    [0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0],    [0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0],    [0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0],    [0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0],    [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1],    [1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],    [0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0],    [0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0],    [0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1],    [1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0],    [0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0],    [0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1]])b = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 1, 2, 3])vertices = compute_polytope_vertices(A, b)```### Halfspace enumerationThe other way round, assume we know the vertices of a polytope, and want to get its halfspace representation $A x \leq b$.```pythonimport numpy as npfrom pypoman import compute_polytope_halfspacesvertices = map(    np.array,    [[1, 0, 0], [0, 1, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1]],)A, b = compute_polytope_halfspaces(vertices)```### Polytope projectionLet us project an $n$-dimensional polytope $A x \leq b$ over $x = [x_1\ \ldots\ x_n]$ onto its first two coordinates $proj(x) = [x_1 x_2]$:```pythonfrom numpy import array, eye, ones, vstack, zerosfrom pypoman import plot_polygon, project_polytopen = 10  # dimension of the original polytopep = 2   # dimension of the projected polytope# Original polytope:# - inequality constraints: \forall i, |x_i| &lt;= 1# - equality constraint: sum_i x_i = 0A = vstack([+eye(n), -eye(n)])b = ones(2 * n)C = ones(n).reshape((1, n))d = array([0])ineq = (A, b)  # A * x &lt;= beq = (C, d)    # C * x == d# Projection is proj(x) = [x_0 x_1]E = zeros((p, n))E[0, 0] = 1.E[1, 1] = 1.f = zeros(p)proj = (E, f)  # proj(x) = E * x + fvertices = project_polytope(proj, ineq, eq, method='bretl')if __name__ == &quot;__main__&quot;:   # plot projected polytope    import pylab    pylab.ion()    pylab.figure()    plot_polygon(vertices)```## See also- A short introduction to [Polyhedra and polytopes](https://scaron.info/teaching/polyhedra-and-polytopes.html)- Komei Fukuda's [Frequently Asked Questions in Polyhedral Computation](https://www.inf.ethz.ch/personal/fukudak/polyfaq/polyfaq.html)- The [Polyhedron](http://doc.sagemath.org/html/en/reference/discrete_geometry/sage/geometry/polyhedron/constructor.html) class in [Sage](http://www.sagemath.org/)- [StabiliPy](https://github.com/haudren/stabilipy): a Python package implementing a more general recursive method for polytope projection</longdescription>
</pkgmetadata>