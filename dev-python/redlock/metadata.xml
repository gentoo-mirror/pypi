<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|RedLock logo|RedLock - Distributed locks with Redis and Python-------------------------------------------------|Build Status|This library implements the RedLock algorithm introduced by`@antirez &lt;http://antirez.com/&gt;`__Yet another ...~~~~~~~~~~~~~~~There are already a few redis based lock implementations in the Pythonworld, e.g. `retools &lt;https://github.com/bbangert/retools&gt;`__,`redis-lock &lt;https://pypi.python.org/pypi/redis-lock/0.2.0&gt;`__.However, these libraries can only work with *single-master* redisserver. When the Redis master goes down, your application has to face asingle point of failure . We can't rely on the master-slave replication,because Redis replication is asynchronous.    This is an obvious race condition with the master-slave replication    model :    #. Client A acquires the lock into the master.    #. The master crashes before the write to the key is transmitted to       the slave.    #. The slave gets promoted to master.    #. Client B acquires the lock to the same resource A already holds a       lock for. SAFETY VIOLATION!A quick introduction to the RedLock algorithm~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~To resolve this problem, the Redlock algorithm assume we have ``N``Redis masters. These nodes are totally independent (no replications). Inorder to acquire the lock, the client will try to acquire the lock inall the N instances sequentially. If and only if the client was able toacquire the lock in the majority (``(N+1)/2``)of the instances, the lockis considered to be acquired.The detailed description of the RedLock algorithm can be found in theRedis documentation: `Distributed locks withRedis &lt;http://redis.io/topics/distlock&gt;`__.APIs~~~~The ``redlock.RedLock`` class shares a similar API with the``threading.Lock`` class in the Python Standard Library.Basic Usage^^^^^^^^^^^.. code:: python    from redlock import RedLock    # By default, if no redis connection details are     # provided, RedLock uses redis://127.0.0.1:6379/0    lock =  RedLock(&quot;distributed_lock&quot;)    lock.acquire()    do_something()    lock.release()With Statement / Context Manager^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^As with ``threading.Lock``, ``redlock.RedLock`` objects are contextmanagers thus support the `WithStatement &lt;https://docs.python.org/2/reference/datamodel.html#context-managers&gt;`__.This way is more pythonic and recommended... code:: python    from redlock import RedLock    with RedLock(&quot;distributed_lock&quot;):        do_something()Specify multiple Redis nodes^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from redlock import RedLock    with RedLock(&quot;distributed_lock&quot;,                   connection_details=[                    {'host': 'xxx.xxx.xxx.xxx', 'port': 6379, 'db': 0},                    {'host': 'xxx.xxx.xxx.xxx', 'port': 6379, 'db': 0},                    {'host': 'xxx.xxx.xxx.xxx', 'port': 6379, 'db': 0},                    {'host': 'xxx.xxx.xxx.xxx', 'port': 6379, 'db': 0},                  ]                ):        do_something()| The ``connection_details`` parameter expects a list of keywordarguments for initializing Redis clients.| Other acceptable Redis client arguments can be found on the `redis-pydoc &lt;http://redis-py.readthedocs.org/en/latest/#redis.StrictRedis&gt;`__.Reuse Redis clients with the RedLockFactory^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Usually the connection details of the Redis nodes are fixed.``RedLockFactory`` can help reuse them, create multiple RedLocks butonly initialize the clients once... code:: python    from redlock import RedLockFactory    factory = RedLockFactory(        connection_details=[            {'host': 'xxx.xxx.xxx.xxx'},            {'host': 'xxx.xxx.xxx.xxx'},            {'host': 'xxx.xxx.xxx.xxx'},            {'host': 'xxx.xxx.xxx.xxx'},        ])    with factory.create_lock(&quot;distributed_lock&quot;):        do_something()    with factory.create_lock(&quot;another_lock&quot;):        do_something().. |RedLock logo| image:: https://github.com/glasslion/redlock/raw/master/docs/assets/redlock-small.png.. |Build Status| image:: https://travis-ci.org/glasslion/redlock.svg?branch=master   :target: https://travis-ci.org/glasslion/redlock</longdescription>
</pkgmetadata>