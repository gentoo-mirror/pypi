<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HourlyHourly is a command-line time tracking tool for git projects. Hourly parses your commit messages for `clock-in` and `clock-out` keywords to precisely estimate work hours. Designed for developers and project managers, hourly makes it easy to see how and where you spend your time. When configured with Stripe or BTCPay, hourly can generate invoices for your specified wage.## Usage### Work sessionsTo clock in:```consolehourly-in```The above command updates the header of your work log (`WorkLog.md` by default) and commits it with the message &quot;clock-in&quot;. Stage any changes to your code base. When you are ready to commit:```consolehourly commit.message=&quot;my commit message&quot;```Hourly updates the work log with your commit message. Feel free to use the work log to provide additional context.When you are finished committing other work for this session, you may clock out:```consolehourly-out```Again, hourly updates the work log and commits it with the message &quot;clock-out&quot; along with any other staged files. Read [moreabout configuring your work log](WorkLog.md).### TimesheetsWhen you are ready to generate a timesheet for your repo, run hourly from your git directory:```consolehourly-report```Hourly parses all the commit messages for clock in/out keywords and uses git's timestamps to determine how long each session lasted.For example, here's what happens when you run hourly *on the hourly repo itself*:```consolehourly-report repo.start_date=&quot;2018-10-21&quot; repo.end_date=&quot;2019-3-10&quot; repo.ignore=&quot;pro bono&quot;pay period: 2018-10-28 13:44:48-04:00 -&gt; 2019-02-25 12:49:51-05:00ignoring pro bono                     TimeIn           LogIn                   TimeOut          LogOut TimeDelta     Hours0 2018-10-28 13:44:48-04:00        clock in 2018-10-28 13:56:35-04:00       clock out  00:11:47  0.1963891 2019-02-25 10:19:10-05:00  clock in T-1hr 2019-02-25 12:49:51-05:00  clock out T-5m  02:30:41  2.5113890 days 02:42:28, 2.71 hours worked```To save the timesheet as a csv file, include an ouput prefix:```consolehourly-report repo.start_date=&quot;2018-10-21&quot; repo.end_date=&quot;2019-3-10&quot; repo.ignore=&quot;pro bono&quot; report.filename=Pembrokepay period: 2018-10-28 13:44:48-04:00 -&gt; 2019-02-25 12:49:51-05:00ignoring pro bono                     TimeIn           LogIn                   TimeOut          LogOut TimeDelta     Hours0 2018-10-28 13:44:48-04:00        clock in 2018-10-28 13:56:35-04:00       clock out  00:11:47  0.1963891 2019-02-25 10:19:10-05:00  clock in T-1hr 2019-02-25 12:49:51-05:00  clock out T-5m  02:30:41  2.5113890 days 02:42:28, 2.71 hours workedwriting to file Pembroke-20181028-134448_to_20190225-124951.csv```Visit the [Tutorial](README.ipynb) for a detailed walk-through of how hourly generates timesheets.### InvoicingTo generate an invoice using stripe:```consolehourly-report invoice=stripe repo.start_date=&quot;Jan 1, 2020&quot; stripe.customer.email=myclient@momandpop.com```The above command generates a time sheet for this repo, calculates earnings, prepares a stripe invoice,and asks you to confirm details. After confirmation, an email will be sent from your Stripe accountto myclient@momandpop.com.The btcpay invoicing is similar:```consolehourly-report invoice=btcpay repo.start_date=&quot;Jan 1, 2020&quot;```After confirmation, hourly tells your btcpay server to generate an invoice and displays the corresponding payment url.Note that BTCPay can be configured for lightning, so streaming payments are possible!Visit the [Payments](Payments.md) section for more info.## Getting StartedHourly is hosted on github under the Apache 2.0 license[https://github.com/asherp/hourly](https://github.com/asherp/hourly)### Install`pip install hourly --upgrade`### Requirements* pandas* gitpython* [plotly](https://plot.ly/python/)* [hydra](https://hydra.cc/docs/intro)* [stripe](https://github.com/stripe/stripe-python) (optional)* [btcpay-python](https://btcpayserver.org/) (optional)You can get these dependencies like this:```consolepip install pandas gitpython plotlypip install hydra-core --upgrade```For invoicing:```consolepip install btcpay-pythonpip install stripe```For hourly's docs:```consolepip install mkdocs mkdocs-material markdown-include mknotebooks```### TestsFor integration tests, hourly may be tested against the hourly repo.Unit tests are based on pytest suite with pytest-cov```consolepip install pytest pytest-cov```To run the tests, navigate to the base of this repo, then```consolepy.test tests.py --cov=hourly```## Configuration`Hourly` uses [`Hydra`](https://hydra.cc/docs/intro) for customized configuration. The full options are given by hourly'shelp command:&lt;details&gt;  &lt;summary&gt; hourly --help &lt;/summary&gt;```consoleA simple hour tracker for git projectsThis application helps users clock in and out of git repos,as well as generate timesheets for invoicing.Configure hourly to ignore commits by keyword or hashes== Configuration groups ==Compose your configuration from those groups (group=option)== Config ==Override anything in the config (foo.bar=value)commit:  clock: null  identity:  - name  - email  message: ''  tminus: nullcompensation: []config_override: hourly.yamlinvoice: nullpayment: nullrepo:  case_sensitive: false  end_date: null  errant_clocks: []  gitdir: .  ignore: null  match_logs: false  start_date: nullreport:  currency: ''  filename: null  pandas:    display:      max_columns: 10      max_colwidth: 45      max_rows: null      width: 600  timesheet: true  wage: null  work: falsevis:  frequency: 1 d  plotly:    figure:      margin:        pad: 0    plot:      animation_opts: null      auto_open: true      auto_play: true      config: null      filename: hourly-work.html      image: null      image_filename: plot_image      include_mathjax: cdn      include_plotlyjs: cdn      link_text: Export to plot.ly      output_type: file      show_link: false      validate: truework_log:  bullet: '*'  filename: WorkLog.md  header_depth: 1Powered by Hydra (https://hydra.cc)Use --hydra-help to view Hydra specific help```&lt;br&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Hourly's default configuration including comments can be seen here.&lt;/summary&gt;```yaml{! hourly/cli/conf/hourly.yaml !}```&lt;/details&gt;Each of these can be overridden at runtime. For example,`hourly commit.clock=in vis=null report.timesheet=False`This will update the WorkLog.md file and commit a clock-in message without visualizing or printing the timesheet.!!! note    `hourly-in` is just syntactic sugar for `hourly commit.clock=in vis=null report.timesheet=False`.But if we want to override hourly's defaults without typing them in each time,we can specify an hourly.yaml file in our git repo. Hourly will lookfor this file (via the `config_override` option) and override its default configuration.!!! note    Settings in your project's `config_override` can still be overriden by command line arguments.An example of a custom override file is found in the top-level of the hourly repo:```yaml{! hourly.yaml !}```A common use case would be permanently overriding the filename of the work_log you are committing against, to avoidmerge conflicts if multiple developers are working on the same project.</longdescription>
</pkgmetadata>