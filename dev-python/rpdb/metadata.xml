<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>rpdb - remote debugger based on pdb===================================rpdb is a wrapper around pdb that re-routes stdin and stdout to a sockethandler. By default it opens the debugger on port 4444::    import rpdb; rpdb.set_trace()But you can change that by simply instantiating Rpdb manually::    import rpdb    debugger = rpdb.Rpdb(port=12345)    debugger.set_trace()It is known to work on Jython 2.5 to 2.7, Python 2.5 to 3.1. It was writtenoriginally for Jython since this is pretty much the only way to debug it whenrunning it on Tomcat.Upon reaching `set_trace()`, your script will &quot;hang&quot; and the only way to get itto continue is to access rpdb using telnet, netcat, etc..::    nc 127.0.0.1 4444Installation in CPython (standard Python)-----------------------------------------    pip install rpdbFor a quick, ad hoc alternative, you can copy the entire rpdb subdirectory(the directory directly containing the __init__.py file) to somewhere on your$PYTHONPATH.Installation in a Tomcat webapp-------------------------------Just copy the rpdb directory (the one with the __init__.py file) in yourWEB-INF/lib/Lib folder along with the standard Jython library (required).Trigger rpdb with signal------------------------`set_trace()` can be triggered at any time by using the TRAP signal handler.This allows you to debug a running process independantly of a specific failureor breakpoint::    import rpdb    rpdb.handle_trap()    # As with set_trace, you can optionally specify addr and port    rpdb.handle_trap(&quot;0.0.0.0&quot;, 54321)Calling `handle_trap` will overwrite the existing handler for SIGTRAP if one hasalready been defined in your application.Known bugs----------  - The socket is not always closed properly so you will need to ^C in netcat    and Esc+q in telnet to exit after a continue or quit.  - There is a bug in Jython 2.5/pdb that causes rpdb to stop on ghost    breakpoints after you continue ('c'), this is fixed in 2.7b1.Author(s)---------Bertrand Janin &lt;b@janin.com&gt; - http://tamentis.com/With contributions from (chronological, latest first): - Cameron Davidson-Pilon - @CamDavidsonPilon - Pavel Fux - @fuxpavel - Ken Manheimer - @kenmanheimer - Steven Willis - @onlynone - Jorge Niedbalski R &lt;niedbalski@gmail.com&gt; - Cyprien Le Pann√©rer &lt;clepannerer@edd.fr&gt; - k4ml &lt;kamal.mustafa@gmail.com&gt; - Sean M. Collins &lt;sean@coreitpro.com&gt; - Sean Myers &lt;sean.myers@redhat.com&gt;This is inspired by: - http://bugs.python.org/issue721464 - http://snippets.dzone.com/posts/show/72480.1.6 (2015-01-05)================== - Give access to attributes of stdin and stdout (by @fuxpavel). - Add rpdb.post_mortem(), similar to pdb.post_mortem() (by @CamDavidsonPilon).0.1.5 (2014-10-16)================== - Write addr/port to stderr instead of stdout (thanks to @onlynone). - Allow for dynamic host port (thanks to @onlynone). - Make q/quit do proper cleanup (@kenmanheimer) - Benignly disregard repeated rpdb.set_trace() to same port as currently   active session (@kenmanheimer) - Extend backwards compatibility down to Python 2.5 (@kenmanheimer)0.1.4 (2014-04-28)================== - Expose the addr, port arguments to the set_trace method (thanks to @niedbalski).0.1.3 (2013-08-02)================== - Remove a try/finally that seemed to shift the trace location (thanks to k4ml@github).0.1.2 (2012-01-26)================== - Catch IOError raised by print in initialization, it may not work in some   environments (e.g. mod_wsgi). (Menno Smits)0.1.1 (2010-05-09)==================Initial release.</longdescription>
</pkgmetadata>