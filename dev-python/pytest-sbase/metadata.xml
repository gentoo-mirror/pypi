<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**[&lt;img src=&quot;https://img.shields.io/badge/pypi-pytest--sbase-22AAEE.svg&quot; alt=&quot;pypi&quot; /&gt;](https://pypi.python.org/pypi/pytest-sbase) is a proxy for [&lt;img src=&quot;https://img.shields.io/badge/pypi-seleniumbase-22AAEE.svg&quot; alt=&quot;pypi&quot; /&gt;](https://pypi.python.org/pypi/seleniumbase)******&lt;!-- SeleniumBase Docs --&gt;&lt;h1&gt;SeleniumBase&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/sb_logo_10t.png&quot; alt=&quot;SeleniumBase&quot; title=&quot;SeleniumBase&quot; width=&quot;266&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 align=&quot;center&quot; class=&quot;hero__title&quot;&gt;All-in-one Test Automation Framework&lt;/h2&gt;&lt;h3 align=&quot;center&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/python_logo.png&quot; title=&quot;SeleniumBase&quot; width=&quot;29&quot; /&gt; For Python enthusiasts and enterprise developers &lt;img src=&quot;https://seleniumbase.github.io/cdn/img/python_logo.png&quot; title=&quot;SeleniumBase&quot; width=&quot;29&quot; /&gt;&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.python.org/pypi/seleniumbase&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/seleniumbase.svg?color=3399EE&quot; alt=&quot;PyPI version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/releases&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/seleniumbase/SeleniumBase.svg?color=22AAEE&quot; alt=&quot;GitHub version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://seleniumbase.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg&quot; alt=&quot;SeleniumBase Docs&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/actions&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/seleniumbase/SeleniumBase/workflows/CI%20build/badge.svg&quot; alt=&quot;SeleniumBase GitHub Actions&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/seleniumbase/SeleniumBase&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/gitter/room/seleniumbase/SeleniumBase.svg&quot; alt=&quot;Gitter chat&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;#python_installation&quot;&gt;🚀 Start&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/features_list.md&quot;&gt;🏰 Features&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/ReadMe.md&quot;&gt;📚 Examples&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/customizing_test_runs.md&quot;&gt;🎛️ Options&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/console_scripts/ReadMe.md&quot;&gt;🌠 Scripts&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/mobile_testing.md&quot;&gt;📱 Mobile&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/method_summary.md&quot;&gt;📘 APIs&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/syntax_formats.md&quot;&gt; 🔡 Formats&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/example_logs/ReadMe.md&quot;&gt;📊 Dashboard&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/recorder_mode.md&quot;&gt;🔴 Recorder&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/locale_codes.md&quot;&gt;🗾 Locales&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md&quot;&gt;🌐 Grid&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/commander.md&quot;&gt;🎖️ GUI&lt;/a&gt; |&lt;a href=&quot;https://seleniumbase.io/demo_page&quot;&gt;📰 TestPage&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/case_plans.md&quot;&gt;🗂️ CasePlans&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/html_inspector.md&quot;&gt;🕵️ Inspector&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/master_qa/ReadMe.md&quot;&gt;🧬 Hybrid&lt;/a&gt; |&lt;a href=&quot;https://seleniumbase.io/devices/?url=seleniumbase.com&quot;&gt;💻 Farm&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/how_it_works.md&quot;&gt;👁️ How&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/examples/migration/raw_selenium&quot;&gt;🚝 Migrate&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/examples/boilerplates&quot;&gt;♻️ Templates&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/integrations/node_js&quot;&gt;🚉 NodeGUI&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/chart_maker/ReadMe.md&quot;&gt;📶 Charts&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/tour_examples/ReadMe.md&quot;&gt;🚎 Tours&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/github/workflows/ReadMe.md&quot;&gt;🤖 CI/CD&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/js_package_manager.md&quot;&gt;🕹️ JSMgr&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/translations.md&quot;&gt;🌏 Translator&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/presenter/ReadMe.md&quot;&gt;🎞️ Presenter&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/dialog_boxes/ReadMe.md&quot;&gt;🛂 Dialog&lt;/a&gt; |&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/visual_testing/ReadMe.md&quot;&gt;🖼️ Visual&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;--------&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/super_logo_sb2.png&quot; alt=&quot;SeleniumBase&quot; title=&quot;SeleniumBase&quot; width=&quot;232&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p dir=&quot;auto&quot;&gt;&lt;strong&gt;Explore the README:&lt;/strong&gt;&lt;/p&gt;&lt;ul dir=&quot;auto&quot;&gt;&lt;li&gt;&lt;a href=&quot;#install_seleniumbase&quot;   &gt;&lt;strong&gt;Get Started / Installation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#basic_example_and_usage&quot;&gt;&lt;strong&gt;Basic Example / Usage&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#common_methods&quot;         &gt;&lt;strong&gt;Common Test Methods&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#fun_facts&quot;              &gt;&lt;strong&gt;Fun Facts / Learn More&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#demo_mode_and_debugging&quot;&gt;&lt;strong&gt;Demo Mode / Debugging&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#command_line_options&quot;   &gt;&lt;strong&gt;Command-line Options&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#directory_configuration&quot;&gt;&lt;strong&gt;Directory Configuration&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#seleniumbase_dashboard&quot; &gt;&lt;strong&gt;SeleniumBase Dashboard&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#creating_visual_reports&quot;&gt;&lt;strong&gt;Generating Test Reports&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;--------&lt;a id=&quot;multiple_examples&quot;&gt;&lt;/a&gt;&lt;p align=&quot;left&quot;&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_demo_site.py&quot; target=&quot;_blank&quot;&gt;test_demo_site.py&lt;/a&gt; from &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/examples&quot; target=&quot;_blank&quot;&gt;./examples/&lt;/a&gt; (Uses &lt;code translate=&quot;no&quot;&gt;--chrome&lt;/code&gt; by default)&lt;/p&gt;```bashcd examples/pytest test_demo_site.py```&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://seleniumbase.io/demo_page&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/gif/demo_page_5.gif&quot; width=&quot;480&quot; alt=&quot;SeleniumBase Example&quot; title=&quot;SeleniumBase Example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&gt; Easy to type, click, select, toggle, drag-and-drop, etc.--------&lt;p align=&quot;left&quot;&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_coffee_cart.py&quot; target=&quot;_blank&quot;&gt;test_coffee_cart.py&lt;/a&gt; from &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/examples&quot; target=&quot;_blank&quot;&gt;./examples/&lt;/a&gt;&lt;/p&gt;```bashcd examples/pytest test_coffee_cart.py --demo```&lt;p&gt;(&lt;code translate=&quot;no&quot;&gt;--demo&lt;/code&gt; mode slows down tests and highlights actions)&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://seleniumbase.io/coffee/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/gif/coffee_cart.gif&quot; width=&quot;480&quot; alt=&quot;SeleniumBase Coffee Cart Test&quot; title=&quot;SeleniumBase Coffee Cart Test&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&gt; SeleniumBase automation can easily order coffee!&lt;p align=&quot;left&quot;&gt;&lt;b&gt;Here's the code for &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_coffee_cart.py&quot;&gt;test_coffee_cart.py&lt;/a&gt;:&lt;/b&gt;&lt;/p&gt;```pythonfrom seleniumbase import BaseCaseBaseCase.main(__name__, __file__)class CoffeeCartTest(BaseCase):    def test_coffee_cart(self):        self.open(&quot;https://seleniumbase.io/coffee/&quot;)        self.assert_title(&quot;Coffee Cart&quot;)        self.click('div[data-sb=&quot;Cappuccino&quot;]')        self.click('div[data-sb=&quot;Flat-White&quot;]')        self.click('div[data-sb=&quot;Cafe-Latte&quot;]')        self.click('a[aria-label=&quot;Cart page&quot;]')        self.assert_exact_text(&quot;Total: $53.00&quot;, &quot;button.pay&quot;)        self.click(&quot;button.pay&quot;)        self.type(&quot;input#name&quot;, &quot;Selenium Coffee&quot;)        self.type(&quot;input#email&quot;, &quot;test@test.test&quot;)        self.click(&quot;button#submit-payment&quot;)        self.assert_text(&quot;Thanks for your purchase.&quot;, &quot;#app .success&quot;)```(For more examples, see the &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/ReadMe.md&quot;&gt;SeleniumBase/examples/&lt;/a&gt; folder.)--------&lt;details&gt;&lt;summary&gt; ▶️ How is &lt;b&gt;SeleniumBase&lt;/b&gt; different from raw Selenium? (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt;&lt;div&gt;&lt;p&gt;💡 SeleniumBase is a Python framework for browser automation and testing. SeleniumBase uses &lt;a href=&quot;https://www.w3.org/TR/webdriver2/#endpoints&quot; target=&quot;_blank&quot;&gt;Selenium/WebDriver&lt;/a&gt; APIs, and incorporates test-runners such as &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt;, &lt;code translate=&quot;no&quot;&gt;pynose&lt;/code&gt;, and &lt;code translate=&quot;no&quot;&gt;behave&lt;/code&gt; to provide organized structure, test discovery, test execution, test state (&lt;i&gt;eg. passed, failed, or skipped&lt;/i&gt;), and command-line options for changing default settings (&lt;i&gt;such as choosing the browser to use&lt;/i&gt;). With raw Selenium, you would need to set up your own options-parser for configuring tests from the command-line.&lt;/p&gt;&lt;p&gt;💡 With raw Selenium, commands that use selectors need to specify the type of selector (eg. &lt;code translate=&quot;no&quot;&gt;&quot;css selector&quot;, &quot;button#myButton&quot;&lt;/code&gt;). With SeleniumBase, there's auto-detection between CSS Selectors and XPath, which means you don't need to specify the type of selector in your commands (&lt;i&gt;but optionally you could&lt;/i&gt;).&lt;/p&gt;&lt;p&gt;💡 SeleniumBase methods often perform multiple actions in a single method call. For example, &lt;code translate=&quot;no&quot;&gt;self.type(selector,text)&lt;/code&gt; does the following:&lt;br /&gt;1. Waits for the element to be visible.&lt;br /&gt;2. Waits for the element to be interactive.&lt;br /&gt;3. Clears the text field.&lt;br /&gt;4. Types in the new text.&lt;br /&gt;5. Presses Enter/Submit if the text ends in &lt;code translate=&quot;no&quot;&gt;&quot;\n&quot;&lt;/code&gt;.&lt;br /&gt;With raw Selenium, those actions require multiple method calls.&lt;/p&gt;&lt;p&gt;💡 SeleniumBase uses default timeout values when not set:&lt;br /&gt;✅&lt;code translate=&quot;no&quot;&gt;self.click(&quot;button&quot;)&lt;/code&gt;&lt;br /&gt;With raw Selenium, methods would fail instantly (&lt;i&gt;by default&lt;/i&gt;) if an element needed more time to load:&lt;br /&gt;❌&lt;code translate=&quot;no&quot;&gt;self.driver.find_element(by=&quot;css selector&quot;, value=&quot;button&quot;).click()&lt;/code&gt;&lt;br /&gt;(Reliable code is better than unreliable code.)&lt;/p&gt;&lt;p&gt;💡 SeleniumBase lets you change the explicit timeout values of methods:&lt;br /&gt;✅&lt;code translate=&quot;no&quot;&gt;self.click(&quot;button&quot;,timeout=10)&lt;/code&gt;&lt;br /&gt;With raw Selenium, that requires more code:&lt;br /&gt;❌&lt;code translate=&quot;no&quot;&gt;WebDriverWait(driver,10).until(EC.element_to_be_clickable(&quot;css selector&quot;, &quot;button&quot;)).click()&lt;/code&gt;&lt;br /&gt;(Simple code is better than complex code.)&lt;/p&gt;&lt;p&gt;💡 SeleniumBase gives you clean error output when a test fails. With raw Selenium, error messages can get very messy.&lt;/p&gt;&lt;p&gt;💡 SeleniumBase gives you the option to generate a dashboard and reports for tests. It also saves screenshots from failing tests to the &lt;code translate=&quot;no&quot;&gt;./latest_logs/&lt;/code&gt; folder. Raw &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot; target=&quot;_blank&quot;&gt;Selenium&lt;/a&gt; does not have these options out-of-the-box.&lt;/p&gt;&lt;p&gt;💡 SeleniumBase includes desktop GUI apps for running tests, such as &lt;b&gt;SeleniumBase Commander&lt;/b&gt; for &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt; and &lt;b&gt;SeleniumBase Behave GUI for &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/behave_bdd/ReadMe.md&quot;&gt;&lt;code translate=&quot;no&quot;&gt;behave&lt;/code&gt;&lt;/a&gt;.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;💡 SeleniumBase has its own Recorder / Test Generator that can create tests from manual browser actions. SeleniumBase also includes other useful tools and console scripts for getting things done quickly. (&lt;i&gt;See the documentation for more details!&lt;/i&gt;)&lt;/p&gt;&lt;/div&gt;&lt;/details&gt;--------&lt;details&gt;&lt;summary&gt; ▶️ Learn about different ways of writing tests (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt;&lt;div&gt;&lt;p align=&quot;left&quot;&gt;📘📝 An example test with the &lt;b&gt;BaseCase&lt;/b&gt; class. Runs with &lt;b&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/how-to/usage.html&quot;&gt;pytest&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;https://github.com/mdmintz/pynose&quot;&gt;pynose&lt;/a&gt;&lt;/b&gt;. (&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/ReadMe.md&quot;&gt;Learn more&lt;/a&gt;)&lt;/p&gt;```pythonfrom seleniumbase import BaseCaseBaseCase.main(__name__, __file__)class TestMFALogin(BaseCase):    def test_mfa_login(self):        self.open(&quot;https://seleniumbase.io/realworld/login&quot;)        self.type(&quot;#username&quot;, &quot;demo_user&quot;)        self.type(&quot;#password&quot;, &quot;secret_pass&quot;)        self.enter_mfa_code(&quot;#totpcode&quot;, &quot;GAXG2MTEOR3DMMDG&quot;)  # 6-digit        self.assert_exact_text(&quot;Welcome!&quot;, &quot;h1&quot;)        self.assert_element(&quot;img#image1&quot;)        self.click('a:contains(&quot;This Page&quot;)')        self.save_screenshot_to_logs()```&lt;p align=&quot;left&quot;&gt;📗📝 An example test with the &lt;b&gt;&lt;code translate=&quot;no&quot;&gt;sb&lt;/code&gt;&lt;/b&gt; &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt; fixture. Runs with &lt;b&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/how-to/usage.html&quot;&gt;pytest&lt;/a&gt;&lt;/b&gt;.&lt;/p&gt;```pythondef test_mfa_login(sb):    sb.open(&quot;https://seleniumbase.io/realworld/login&quot;)    sb.type(&quot;#username&quot;, &quot;demo_user&quot;)    sb.type(&quot;#password&quot;, &quot;secret_pass&quot;)    sb.enter_mfa_code(&quot;#totpcode&quot;, &quot;GAXG2MTEOR3DMMDG&quot;)  # 6-digit    sb.assert_exact_text(&quot;Welcome!&quot;, &quot;h1&quot;)    sb.assert_element(&quot;img#image1&quot;)    sb.click('a:contains(&quot;This Page&quot;)')    sb.save_screenshot_to_logs()```&lt;p align=&quot;left&quot;&gt;📙📝 An example test with the &lt;b&gt;&lt;code translate=&quot;no&quot;&gt;SB&lt;/code&gt;&lt;/b&gt; Context Manager. Runs with pure &lt;b&gt;&lt;code translate=&quot;no&quot;&gt;python&lt;/code&gt;&lt;/b&gt;.&lt;/p&gt;```pythonfrom seleniumbase import SBwith SB() as sb:  # By default, browser=&quot;chrome&quot; if not set.    sb.open(&quot;https://seleniumbase.io/realworld/login&quot;)    sb.type(&quot;#username&quot;, &quot;demo_user&quot;)    sb.type(&quot;#password&quot;, &quot;secret_pass&quot;)    sb.enter_mfa_code(&quot;#totpcode&quot;, &quot;GAXG2MTEOR3DMMDG&quot;)  # 6-digit    sb.assert_text(&quot;Welcome!&quot;, &quot;h1&quot;)    sb.highlight(&quot;img#image1&quot;)  # A fancier assert_element() call    sb.click('a:contains(&quot;This Page&quot;)')  # Use :contains() on any tag    sb.click_link(&quot;Sign out&quot;)  # Link must be &quot;a&quot; tag. Not &quot;button&quot;.    sb.assert_element('a:contains(&quot;Sign in&quot;)')    sb.assert_exact_text(&quot;You have been signed out!&quot;, &quot;#top_message&quot;)```&lt;p align=&quot;left&quot;&gt;📕📝 An example test with &lt;b&gt;behave-BDD&lt;/b&gt; &lt;a href=&quot;https://behave.readthedocs.io/en/stable/gherkin.html#features&quot; target=&quot;_blank&quot;&gt;Gherkin&lt;/a&gt; structure. Runs with &lt;b&gt;&lt;code translate=&quot;no&quot;&gt;behave&lt;/code&gt;&lt;/b&gt;. (&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/behave_bdd/ReadMe.md&quot;&gt;Learn more&lt;/a&gt;)&lt;/p&gt;```gherkinFeature: SeleniumBase scenarios for the RealWorld App  Scenario: Verify RealWorld App    Given Open &quot;seleniumbase.io/realworld/login&quot;    When Type &quot;demo_user&quot; into &quot;#username&quot;    And Type &quot;secret_pass&quot; into &quot;#password&quot;    And Do MFA &quot;GAXG2MTEOR3DMMDG&quot; into &quot;#totpcode&quot;    Then Assert exact text &quot;Welcome!&quot; in &quot;h1&quot;    And Assert element &quot;img#image1&quot;    And Click 'a:contains(&quot;This Page&quot;)'    And Save screenshot to logs```&lt;/div&gt;&lt;/details&gt;--------&lt;a id=&quot;python_installation&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/python_logo.png&quot; title=&quot;SeleniumBase&quot; width=&quot;42&quot; /&gt; Set up Python &amp; Git:&lt;/h2&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=FACE42&quot; title=&quot;Supported Python Versions&quot; /&gt;&lt;/a&gt;🔵 Add &lt;b&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;&lt;/b&gt; to your System PATH.🔵 Using a &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/virtualenv_instructions.md&quot;&gt;Python virtual env&lt;/a&gt; is recommended.&lt;a id=&quot;install_seleniumbase&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Install SeleniumBase:&lt;/h2&gt;**You can install ``seleniumbase`` from [PyPI](https://pypi.org/project/seleniumbase/) or [GitHub](https://github.com/seleniumbase/SeleniumBase):**🔵 **How to install ``seleniumbase`` from PyPI:**```bashpip install seleniumbase```* (Add ``--upgrade`` OR ``-U`` to upgrade SeleniumBase.)* (Add ``--force-reinstall`` to upgrade indirect packages.)* (Use ``pip3`` if multiple versions of Python are present.)🔵 **How to install ``seleniumbase`` from a GitHub clone:**```bashgit clone https://github.com/seleniumbase/SeleniumBase.gitcd SeleniumBase/pip install -e .```🔵 **How to upgrade an existing install from a GitHub clone:**```bashgit pullpip install -e .```🔵 **Type ``seleniumbase`` or ``sbase`` to verify that SeleniumBase was installed successfully:**```bash   ______     __           _                  ____                  / ____/__  / /__  ____  (_)_  ______ ___   / _  \____  ________   \__ \/ _ \/ / _ \/ __ \/ / / / / __ `__ \ / /_) / __ \/ ___/ _ \ ___/ /  __/ /  __/ / / / / /_/ / / / / / // /_) / (_/ /__  /  __//____/\___/_/\___/_/ /_/_/\__,_/_/ /_/ /_//_____/\__,_/____/\___/ ------------------------------------------------------------------ * USAGE: &quot;seleniumbase [COMMAND] [PARAMETERS]&quot; *    OR:        &quot;sbase [COMMAND] [PARAMETERS]&quot;COMMANDS:      get / install    [DRIVER] [OPTIONS]      methods          (List common Python methods)      options          (List common pytest options)      behave-options   (List common behave options)      gui / commander  [OPTIONAL PATH or TEST FILE]      behave-gui       (SBase Commander for Behave)      caseplans        [OPTIONAL PATH or TEST FILE]      mkdir            [DIRECTORY] [OPTIONS]      mkfile           [FILE.py] [OPTIONS]      mkrec / codegen  [FILE.py] [OPTIONS]      recorder         (Open Recorder Desktop App.)      record           (If args: mkrec. Else: App.)      mkpres           [FILE.py] [LANG]      mkchart          [FILE.py] [LANG]      print            [FILE] [OPTIONS]      translate        [SB_FILE.py] [LANG] [ACTION]      convert          [WEBDRIVER_UNITTEST_FILE.py]      extract-objects  [SB_FILE.py]      inject-objects   [SB_FILE.py] [OPTIONS]      objectify        [SB_FILE.py] [OPTIONS]      revert-objects   [SB_FILE.py] [OPTIONS]      encrypt / obfuscate      decrypt / unobfuscate      download server  (Get Selenium Grid JAR file)      grid-hub         [start|stop] [OPTIONS]      grid-node        [start|stop] --hub=[HOST/IP] * (EXAMPLE: &quot;sbase get chromedriver latest&quot;) *    Type &quot;sbase help [COMMAND]&quot; for specific command info.    For info on all commands, type: &quot;seleniumbase --help&quot;.    Use &quot;pytest&quot; for running tests.```&lt;h3&gt;🔵 Downloading webdrivers:&lt;/h3&gt;✅ SeleniumBase automatically downloads webdrivers as needed, such as ``chromedriver``.&lt;div&gt;&lt;/div&gt;&lt;details&gt;&lt;summary&gt; ▶️ Here's output from a chromedriver download. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt;```bash*** chromedriver version for download = 114.0.5735.90 (Latest)Downloading chromedriver_mac_arm64.zip from:https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_mac_arm64.zip ...Download Complete!Extracting ['chromedriver'] from chromedriver_mac_arm64.zip ...Unzip Complete!The file [chromedriver] was saved to:/Users/michael/github/SeleniumBase/seleniumbase/drivers/chromedriverMaking [chromedriver 114.0.5735.90] executable ...[chromedriver 114.0.5735.90] is now ready for use!```&lt;/details&gt;&lt;a id=&quot;basic_example_and_usage&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Basic Example / Usage:&lt;/h2&gt;🔵 If you've cloned SeleniumBase, you can run tests from the [examples/](https://github.com/seleniumbase/SeleniumBase/tree/master/examples) folder.&lt;p align=&quot;left&quot;&gt;Here's &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/my_first_test.py&quot;&gt;my_first_test.py&lt;/a&gt;:&lt;/p&gt;```bashcd examples/pytest my_first_test.py```&gt; (Uses ``--chrome`` by default.)&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/my_first_test.py&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/gif/swag_labs_4.gif&quot; alt=&quot;SeleniumBase Test&quot; title=&quot;SeleniumBase Test&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&gt; SeleniumBase easily handles login, shopping, and checkout.&lt;p align=&quot;left&quot;&gt;&lt;b&gt;Here's the code for &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/my_first_test.py&quot;&gt;my_first_test.py&lt;/a&gt;:&lt;/b&gt;&lt;/p&gt;```pythonfrom seleniumbase import BaseCaseBaseCase.main(__name__, __file__)class MyTestClass(BaseCase):    def test_swag_labs(self):        self.open(&quot;https://www.saucedemo.com&quot;)        self.type(&quot;#user-name&quot;, &quot;standard_user&quot;)        self.type(&quot;#password&quot;, &quot;secret_sauce\n&quot;)        self.assert_element(&quot;div.inventory_list&quot;)        self.assert_exact_text(&quot;Products&quot;, &quot;span.title&quot;)        self.click('button[name*=&quot;backpack&quot;]')        self.click(&quot;#shopping_cart_container a&quot;)        self.assert_exact_text(&quot;Your Cart&quot;, &quot;span.title&quot;)        self.assert_text(&quot;Backpack&quot;, &quot;div.cart_item&quot;)        self.click(&quot;button#checkout&quot;)        self.type(&quot;#first-name&quot;, &quot;SeleniumBase&quot;)        self.type(&quot;#last-name&quot;, &quot;Automation&quot;)        self.type(&quot;#postal-code&quot;, &quot;77123&quot;)        self.click(&quot;input#continue&quot;)        self.assert_text(&quot;Checkout: Overview&quot;)        self.assert_text(&quot;Backpack&quot;, &quot;div.cart_item&quot;)        self.assert_text(&quot;29.99&quot;, &quot;div.inventory_item_price&quot;)        self.click(&quot;button#finish&quot;)        self.assert_exact_text(&quot;Thank you for your order!&quot;, &quot;h2&quot;)        self.assert_element('img[alt=&quot;Pony Express&quot;]')        self.js_click(&quot;a#logout_sidebar_link&quot;)        self.assert_element(&quot;div#login_button_container&quot;)```* By default, **[CSS Selectors](https://www.w3schools.com/cssref/css_selectors.asp)** are used for finding page elements.* If you're new to CSS Selectors, games like [CSS Diner](http://flukeout.github.io/) can help you learn.* For more reading, [here's an advanced guide on CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).&lt;a id=&quot;common_methods&quot;&gt;&lt;/a&gt;&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Here are some common SeleniumBase methods:&lt;/h3&gt;```pythonself.open(url)  # Navigate the browser window to the URL.self.type(selector, text)  # Update the field with the text.self.click(selector)  # Click the element with the selector.self.click_link(link_text)  # Click the link containing text.self.go_back()  # Navigate back to the previous URL.self.select_option_by_text(dropdown_selector, option)self.hover_and_click(hover_selector, click_selector)self.drag_and_drop(drag_selector, drop_selector)self.get_text(selector)  # Get the text from the element.self.get_current_url()  # Get the URL of the current page.self.get_page_source()  # Get the HTML of the current page.self.get_attribute(selector, attribute)  # Get element attribute.self.get_title()  # Get the title of the current page.self.switch_to_frame(frame)  # Switch into the iframe container.self.switch_to_default_content()  # Leave the iframe container.self.open_new_window()  # Open a new window in the same browser.self.switch_to_window(window)  # Switch to the browser window.self.switch_to_default_window()  # Switch to the original window.self.get_new_driver(OPTIONS)  # Open a new driver with OPTIONS.self.switch_to_driver(driver)  # Switch to the browser driver.self.switch_to_default_driver()  # Switch to the original driver.self.wait_for_element(selector)  # Wait until element is visible.self.is_element_visible(selector)  # Return element visibility.self.is_text_visible(text, selector)  # Return text visibility.self.sleep(seconds)  # Do nothing for the given amount of time.self.save_screenshot(name)  # Save a screenshot in .png format.self.assert_element(selector)  # Verify the element is visible.self.assert_text(text, selector)  # Verify text in the element.self.assert_exact_text(text, selector)  # Verify text is exact.self.assert_title(title)  # Verify the title of the web page.self.assert_downloaded_file(file)  # Verify file was downloaded.self.assert_no_404_errors()  # Verify there are no broken links.self.assert_no_js_errors()  # Verify there are no JS errors.```🔵 For the complete list of SeleniumBase methods, see: &lt;b&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/method_summary.md&quot;&gt;Method Summary&lt;/a&gt;&lt;/b&gt;&lt;a id=&quot;fun_facts&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Fun Facts / Learn More:&lt;/h2&gt;&lt;p&gt;✅ SeleniumBase automatically handles common &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot; target=&quot;_blank&quot;&gt;WebDriver&lt;/a&gt; actions such as launching web browsers before tests, saving screenshots during failures, and closing web browsers after tests.&lt;/p&gt;&lt;p&gt;✅ SeleniumBase lets you &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/customizing_test_runs.md&quot;&gt;customize test runs from the command-line&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;✅ SeleniumBase uses simple syntax for commands. Example:&lt;/p&gt;```pythonself.type(&quot;input&quot;, &quot;dogs\n&quot;)  # (The &quot;\n&quot; presses ENTER)```Most SeleniumBase scripts can be run with &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt;, &lt;code translate=&quot;no&quot;&gt;pynose&lt;/code&gt;, or pure &lt;code translate=&quot;no&quot;&gt;python&lt;/code&gt;. Not all test runners can run all test formats. For example, tests that use the ``sb`` pytest fixture can only be run with ``pytest``. (See &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/syntax_formats.md&quot;&gt;Syntax Formats&lt;/a&gt;) There's also a &lt;a href=&quot;https://behave.readthedocs.io/en/stable/gherkin.html#features&quot; target=&quot;_blank&quot;&gt;Gherkin&lt;/a&gt; test format that runs with &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/behave_bdd/ReadMe.md&quot;&gt;behave&lt;/a&gt;.```bashpytest coffee_cart_tests.py --rspytest test_sb_fixture.py --demopytest test_suite.py --rs --html=report.html --dashboardpynose basic_test.py --mobilepynose test_suite.py --headless --report --show-reportpython raw_sb.pypython raw_test_scripts.pybehave realworld.featurebehave calculator.feature -D rs -D dashboard```&lt;p&gt;✅ &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt; includes automatic test discovery. If you don't specify a specific file or folder to run, &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt; will automatically search through all subdirectories for tests to run based on the following criteria:&lt;/p&gt;* Python files that start with ``test_`` or end with ``_test.py``.* Python methods that start with ``test_``.With a SeleniumBase [pytest.ini](https://github.com/seleniumbase/SeleniumBase/blob/master/examples/pytest.ini) file present, you can modify default discovery settings. The Python class name can be anything because ``seleniumbase.BaseCase`` inherits ``unittest.TestCase`` to trigger autodiscovery.&lt;p&gt;✅ You can do a pre-flight check to see which tests would get discovered by &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt; before the actual run:&lt;/p&gt;```bashpytest --co -q```&lt;p&gt;✅ You can be more specific when calling &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt; or &lt;code translate=&quot;no&quot;&gt;pynose&lt;/code&gt; on a file:&lt;/p&gt;```bashpytest [FILE_NAME.py]::[CLASS_NAME]::[METHOD_NAME]pynose [FILE_NAME.py]:[CLASS_NAME].[METHOD_NAME]```&lt;p&gt;✅ No More Flaky Tests! SeleniumBase methods automatically wait for page elements to finish loading before interacting with them (&lt;i&gt;up to a timeout limit&lt;/i&gt;). This means &lt;b&gt;you no longer need random &lt;span&gt;&lt;code translate=&quot;no&quot;&gt;time.sleep()&lt;/code&gt;&lt;/span&gt; statements&lt;/b&gt; in your scripts.&lt;/p&gt;&lt;img src=&quot;https://img.shields.io/badge/Flaky%20Tests%3F-%20NO%21-11BBDD.svg&quot; alt=&quot;NO MORE FLAKY TESTS!&quot; /&gt;✅ SeleniumBase supports all major browsers and operating systems:&lt;p&gt;&lt;b&gt;Browsers:&lt;/b&gt; Chrome, Edge, Firefox, and Safari.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Systems:&lt;/b&gt; Linux/Ubuntu, macOS, and Windows.&lt;/p&gt;✅ SeleniumBase works on all popular CI/CD platforms:&lt;p&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/github/workflows/ReadMe.md&quot;&gt;&lt;img alt=&quot;GitHub Actions integration&quot; src=&quot;https://img.shields.io/badge/GitHub_Actions-12B2C2.svg?logo=GitHubActions&amp;logoColor=CFFFC2&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/azure/jenkins/ReadMe.md&quot;&gt;&lt;img alt=&quot;Jenkins integration&quot; src=&quot;https://img.shields.io/badge/Jenkins-32B242.svg?logo=jenkins&amp;logoColor=white&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/azure/azure_pipelines/ReadMe.md&quot;&gt;&lt;img alt=&quot;Azure integration&quot; src=&quot;https://img.shields.io/badge/Azure-2288EE.svg?logo=AzurePipelines&amp;logoColor=white&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/google_cloud/ReadMe.md&quot;&gt;&lt;img alt=&quot;Google Cloud integration&quot; src=&quot;https://img.shields.io/badge/Google_Cloud-11CAE8.svg?logo=GoogleCloud&amp;logoColor=EE0066&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;#utilizing_advanced_features&quot;&gt;&lt;img alt=&quot;AWS integration&quot; src=&quot;https://img.shields.io/badge/AWS-4488DD.svg?logo=AmazonAWS&amp;logoColor=FFFF44&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Personal_computer&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Your Computer&quot; src=&quot;https://img.shields.io/badge/💻_Your_Computer-44E6E6.svg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;✅ SeleniumBase includes an automated/manual hybrid solution called &lt;b&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/master_qa/ReadMe.md&quot;&gt;MasterQA&lt;/a&gt;&lt;/b&gt; to speed up manual testing with automation while manual testers handle validation.&lt;/p&gt;&lt;p&gt;✅ SeleniumBase supports &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/examples/offline_examples&quot;&gt;running tests while offline&lt;/a&gt; (&lt;i&gt;assuming webdrivers have previously been downloaded when online&lt;/i&gt;).&lt;/p&gt;&lt;p&gt;✅ For a full list of SeleniumBase features, &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/features_list.md&quot;&gt;Click Here&lt;/a&gt;.&lt;/p&gt;&lt;a id=&quot;demo_mode_and_debugging&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Demo Mode / Debugging:&lt;/h2&gt;🔵 &lt;b&gt;Demo Mode&lt;/b&gt; helps you see what a test is doing. If a test is moving too fast for your eyes, run it in &lt;b&gt;Demo Mode&lt;/b&gt; to pause the browser briefly between actions, highlight page elements being acted on, and display assertions:```bashpytest my_first_test.py --demo```🔵 ``time.sleep(seconds)`` can be used to make a test wait at a specific spot:```pythonimport time; time.sleep(3)  # Do nothing for 3 seconds.```🔵 **Debug Mode** with Python's built-in **[pdb](https://docs.python.org/3/library/pdb.html)** library helps you debug tests:```pythonimport pdb; pdb.set_trace()import pytest; pytest.set_trace()breakpoint()  # Shortcut for &quot;import pdb; pdb.set_trace()&quot;```&gt; (**``pdb``** commands: ``n``, ``c``, ``s``, ``u``, ``d`` =&gt; ``next``, ``continue``, ``step``, ``up``, ``down``)🔵 To pause an active test that throws an exception or error, (*and keep the browser window open while **Debug Mode** begins in the console*), add **``--pdb``** as a ``pytest`` option:```bashpytest test_fail.py --pdb```🔵 To start tests in Debug Mode, add **``--trace``** as a ``pytest`` option:```bashpytest test_coffee_cart.py --trace```&lt;a href=&quot;https://github.com/mdmintz/pdbp&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/gif/coffee_pdbp.gif&quot; alt=&quot;SeleniumBase test with the pdbp (Pdb+) debugger&quot; title=&quot;SeleniumBase test with the pdbp (Pdb+) debugger&quot; /&gt;&lt;/a&gt;&lt;a id=&quot;command_line_options&quot;&gt;&lt;/a&gt;&lt;h2&gt;🔵 Command-line Options:&lt;/h2&gt;&lt;a id=&quot;pytest_options&quot;&gt;&lt;/a&gt;✅ Here are some useful command-line options that come with &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt;:```bash-v  # Verbose mode. Prints the full name of each test and shows more details.-q  # Quiet mode. Print fewer details in the console output when running tests.-x  # Stop running the tests after the first failure is reached.--html=report.html  # Creates a detailed pytest-html report after tests finish.--co | --collect-only  # Show what tests would get run. (Without running them)--co -q  # (Both options together!) - Do a dry run with full test names shown.-n=NUM  # Multithread the tests using that many threads. (Speed up test runs!)-s  # See print statements. (Should be on by default with pytest.ini present.)--junit-xml=report.xml  # Creates a junit-xml report after tests finish.--pdb  # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!)--trace  # Enter Debug Mode at the beginning of each test. (Don't use with CI!)-m=MARKER  # Run tests with the specified pytest marker.```&lt;a id=&quot;new_pytest_options&quot;&gt;&lt;/a&gt;✅ SeleniumBase provides additional &lt;code translate=&quot;no&quot;&gt;pytest&lt;/code&gt; command-line options for tests:```bash--browser=BROWSER  # (The web browser to use. Default: &quot;chrome&quot;.)--chrome  # (Shortcut for &quot;--browser=chrome&quot;. On by default.)--edge  # (Shortcut for &quot;--browser=edge&quot;.)--firefox  # (Shortcut for &quot;--browser=firefox&quot;.)--safari  # (Shortcut for &quot;--browser=safari&quot;.)--settings-file=FILE  # (Override default SeleniumBase settings.)--env=ENV  # (Set the test env. Access with &quot;self.env&quot; in tests.)--account=STR  # (Set account. Access with &quot;self.account&quot; in tests.)--data=STRING  # (Extra test data. Access with &quot;self.data&quot; in tests.)--var1=STRING  # (Extra test data. Access with &quot;self.var1&quot; in tests.)--var2=STRING  # (Extra test data. Access with &quot;self.var2&quot; in tests.)--var3=STRING  # (Extra test data. Access with &quot;self.var3&quot; in tests.)--variables=DICT  # (Extra test data. Access with &quot;self.variables&quot;.)--user-data-dir=DIR  # (Set the Chrome user data directory to use.)--protocol=PROTOCOL  # (The Selenium Grid protocol: http|https.)--server=SERVER  # (The Selenium Grid server/IP used for tests.)--port=PORT  # (The Selenium Grid port used by the test server.)--cap-file=FILE  # (The web browser's desired capabilities to use.)--cap-string=STRING  # (The web browser's desired capabilities to use.)--proxy=SERVER:PORT  # (Connect to a proxy server:port as tests are running)--proxy=USERNAME:PASSWORD@SERVER:PORT  # (Use an authenticated proxy server)--proxy-bypass-list=STRING # (&quot;;&quot;-separated hosts to bypass, Eg &quot;*.foo.com&quot;)--proxy-pac-url=URL  # (Connect to a proxy server using a PAC_URL.pac file.)--proxy-pac-url=USERNAME:PASSWORD@URL  # (Authenticated proxy with PAC URL.)--proxy-driver  # (If a driver download is needed, will use: --proxy=PROXY.)--multi-proxy  # (Allow multiple authenticated proxies when multi-threaded.)--agent=STRING  # (Modify the web browser's User-Agent string.)--mobile  # (Use the mobile device emulator while running tests.)--metrics=STRING  # (Set mobile metrics: &quot;CSSWidth,CSSHeight,PixelRatio&quot;.)--chromium-arg=&quot;ARG=N,ARG2&quot;  # (Set Chromium args, &quot;,&quot;-separated, no spaces.)--firefox-arg=&quot;ARG=N,ARG2&quot;  # (Set Firefox args, comma-separated, no spaces.)--firefox-pref=SET  # (Set a Firefox preference:value set, comma-separated.)--extension-zip=ZIP  # (Load a Chrome Extension .zip|.crx, comma-separated.)--extension-dir=DIR  # (Load a Chrome Extension directory, comma-separated.)--binary-location=PATH  # (Set path of the Chromium browser binary to use.)--driver-version=VER  # (Set the chromedriver or uc_driver version to use.)--sjw  # (Skip JS Waits for readyState to be &quot;complete&quot; or Angular to load.)--pls=PLS  # (Set pageLoadStrategy on Chrome: &quot;normal&quot;, &quot;eager&quot;, or &quot;none&quot;.)--headless  # (Run tests in headless mode. The default arg on Linux OS.)--headless2  # (Use the new headless mode, which supports extensions.)--headed  # (Run tests in headed/GUI mode on Linux OS, where not default.)--xvfb  # (Run tests using the Xvfb virtual display server on Linux OS.)--locale=LOCALE_CODE  # (Set the Language Locale Code for the web browser.)--interval=SECONDS  # (The autoplay interval for presentations &amp; tour steps)--start-page=URL  # (The starting URL for the web browser when tests begin.)--archive-logs  # (Archive existing log files instead of deleting them.)--archive-downloads  # (Archive old downloads instead of deleting them.)--time-limit=SECONDS  # (Safely fail any test that exceeds the time limit.)--slow  # (Slow down the automation. Faster than using Demo Mode.)--demo  # (Slow down and visually see test actions as they occur.)--demo-sleep=SECONDS  # (Set the wait time after Slow &amp; Demo Mode actions.)--highlights=NUM  # (Number of highlight animations for Demo Mode actions.)--message-duration=SECONDS  # (The time length for Messenger alerts.)--check-js  # (Check for JavaScript errors after page loads.)--ad-block  # (Block some types of display ads from loading.)--block-images  # (Block images from loading during tests.)--do-not-track  # (Indicate to websites that you don't want to be tracked.)--verify-delay=SECONDS  # (The delay before MasterQA verification checks.)--recorder  # (Enables the Recorder for turning browser actions into code.)--rec-behave  # (Same as Recorder Mode, but also generates behave-gherkin.)--rec-sleep  # (If the Recorder is enabled, also records self.sleep calls.)--rec-print  # (If the Recorder is enabled, prints output after tests end.)--disable-js  # (Disable JavaScript on websites. Pages might break!)--disable-csp  # (Disable the Content Security Policy of websites.)--disable-ws  # (Disable Web Security on Chromium-based browsers.)--enable-ws  # (Enable Web Security on Chromium-based browsers.)--enable-sync  # (Enable &quot;Chrome Sync&quot; on websites.)--uc | --undetected  # (Use undetected-chromedriver to evade bot-detection.)--uc-cdp-events  # (Capture CDP events when running in &quot;--undetected&quot; mode.)--remote-debug  # (Sync to Chrome Remote Debugger chrome://inspect/#devices)--final-debug  # (Enter Debug Mode after each test ends. Don't use with CI!)--dashboard  # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html)--dash-title=STRING  # (Set the title shown for the generated dashboard.)--enable-3d-apis  # (Enables WebGL and 3D APIs.)--swiftshader  # (Use Chrome's &quot;--use-gl=swiftshader&quot; feature.)--incognito  # (Enable Chrome's Incognito mode.)--guest  # (Enable Chrome's Guest mode.)--dark  # (Enable Chrome's Dark mode.)--devtools  # (Open Chrome's DevTools when the browser opens.)--rs | --reuse-session  # (Reuse browser session for all tests.)--rcs | --reuse-class-session  # (Reuse session for tests in class.)--crumbs  # (Delete all cookies between tests reusing a session.)--disable-beforeunload  # (Disable the &quot;beforeunload&quot; event on Chrome.)--window-size=WIDTH,HEIGHT  # (Set the browser's starting window size.)--maximize  # (Start tests with the browser window maximized.)--screenshot  # (Save a screenshot at the end of each test.)--no-screenshot  # (No screenshots saved unless tests directly ask it.)--visual-baseline  # (Set the visual baseline for Visual/Layout tests.)--wire  # (Use selenium-wire's webdriver for replacing selenium webdriver.)--external-pdf  # (Set Chromium &quot;plugins.always_open_pdf_externally&quot;:True.)--timeout-multiplier=MULTIPLIER  # (Multiplies the default timeout values.)--list-fail-page  # (After each failing test, list the URL of the failure.)```(See the full list of command-line option definitions **[here](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/plugins/pytest_plugin.py)**. For detailed examples of command-line options, see **[customizing_test_runs.md](https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/customizing_test_runs.md)**)--------🔵 During test failures, logs and screenshots from the most recent test run will get saved to the ``latest_logs/`` folder. Those logs will get moved to ``archived_logs/`` if you add --archive_logs to command-line options, or have ``ARCHIVE_EXISTING_LOGS`` set to True in [settings.py](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/settings.py), otherwise log files with be cleaned up at the start of the next test run. The ``test_suite.py`` collection contains tests that fail on purpose so that you can see how logging works.```bashcd examples/pytest test_suite.py --chromepytest test_suite.py --firefox```An easy way to override seleniumbase/config/settings.py is by using a custom settings file.Here's the command-line option to add to tests: (See [examples/custom_settings.py](https://github.com/seleniumbase/SeleniumBase/blob/master/examples/custom_settings.py))``--settings_file=custom_settings.py``(Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)🔵 To pass additional data from the command-line to tests, add ``--data=&quot;ANY STRING&quot;``.Inside your tests, you can use ``self.data`` to access that.&lt;a id=&quot;directory_configuration&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Directory Configuration:&lt;/h2&gt;🔵 When running tests with **``pytest``**, you'll want a copy of **[pytest.ini](https://github.com/seleniumbase/SeleniumBase/blob/master/pytest.ini)** in your root folders. When running tests with **``pynose``**, you'll want a copy of **[setup.cfg](https://github.com/seleniumbase/SeleniumBase/blob/master/setup.cfg)** in your root folders. These files specify default configuration details for tests. Test folders should also include a blank **[__init__.py](https://github.com/seleniumbase/SeleniumBase/blob/master/examples/offline_examples/__init__.py)** file to allow your test files to import other files from that folder.🔵 ``sbase mkdir DIR`` creates a folder with config files and sample tests:```bashsbase mkdir ui_tests```&gt; That new folder will have these files:```bashui_tests/├── __init__.py├── my_first_test.py├── parameterized_test.py├── pytest.ini├── requirements.txt├── setup.cfg├── test_demo_site.py└── boilerplates/    ├── __init__.py    ├── base_test_case.py    ├── boilerplate_test.py    ├── classic_obj_test.py    ├── page_objects.py    ├── sb_fixture_test.py    └── samples/        ├── __init__.py        ├── google_objects.py        ├── google_test.py        ├── sb_swag_test.py        └── swag_labs_test.py```&lt;b&gt;ProTip™:&lt;/b&gt; You can also create a boilerplate folder without any sample tests in it by adding ``-b`` or ``--basic`` to the ``sbase mkdir`` command:```bashsbase mkdir ui_tests --basic```&gt; That new folder will have these files:```bashui_tests/├── __init__.py├── pytest.ini├── requirements.txt└── setup.cfg```Of those files, the ``pytest.ini`` config file is the most important, followed by a blank ``__init__.py`` file. There's also a ``setup.cfg`` file (for pynose). Finally, the ``requirements.txt`` file can be used to help you install seleniumbase into your environments (if it's not already installed).--------&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Log files from failed tests:&lt;/h3&gt;Let's try an example of a test that fails:```python&quot;&quot;&quot; test_fail.py &quot;&quot;&quot;from seleniumbase import BaseCaseBaseCase.main(__name__, __file__)class MyTestClass(BaseCase):    def test_find_army_of_robots_on_xkcd_desert_island(self):        self.open(&quot;https://xkcd.com/731/&quot;)        self.assert_element(&quot;div#ARMY_OF_ROBOTS&quot;, timeout=1)  # This should fail```You can run it from the ``examples/`` folder like this:```bashpytest test_fail.py```🔵 You'll notice that a logs folder, &quot;latest_logs&quot;, was created to hold information about the failing test, and screenshots. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in [settings.py](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/settings.py), or if your run tests with ``--archive-logs``. If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run.--------&lt;a id=&quot;seleniumbase_dashboard&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; SeleniumBase Dashboard:&lt;/h2&gt;🔵 The ``--dashboard`` option for pytest generates a SeleniumBase Dashboard located at ``dashboard.html``, which updates automatically as tests run and produce results. Example:```bashpytest --dashboard --rs --headless```&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/dashboard_1.png&quot; alt=&quot;The SeleniumBase Dashboard&quot; title=&quot;The SeleniumBase Dashboard&quot; width=&quot;380&quot; /&gt;🔵 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python's ``http.server``:```bashpython -m http.server 1948```🔵 Now you can navigate to ``http://localhost:1948/dashboard.html`` in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use &lt;kbd&gt;Ctrl+C&lt;/kbd&gt; to stop the http server.)🔵 Here's a full example of what the SeleniumBase Dashboard may look like:```bashpytest test_suite.py --dashboard --rs --headless```&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/dashboard_2.png&quot; alt=&quot;The SeleniumBase Dashboard&quot; title=&quot;The SeleniumBase Dashboard&quot; width=&quot;480&quot; /&gt;--------&lt;a id=&quot;creating_visual_reports&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Generating Test Reports:&lt;/h2&gt;&lt;h3&gt;🔵 Pytest Reports:&lt;/h3&gt;✅ Using ``--html=report.html`` gives you a fancy report of the name specified after your test suite completes.```bashpytest test_suite.py --html=report.html```&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/html_report.png&quot; alt=&quot;Example Pytest Report&quot; title=&quot;Example Pytest Report&quot; width=&quot;520&quot; /&gt;✅ When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: ``--dashboard --html=dashboard.html``), then the Dashboard will become an advanced html report when all the tests complete.✅ Here's an example of an upgraded html report:```bashpytest test_suite.py --dashboard --html=report.html```&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/dash_report.jpg&quot; alt=&quot;Dashboard Pytest HTML Report&quot; title=&quot;Dashboard Pytest HTML Report&quot; width=&quot;520&quot; /&gt;If viewing pytest html reports in [Jenkins](https://www.jenkins.io/), you may need to [configure Jenkins settings](https://stackoverflow.com/a/46197356) for the html to render correctly. This is due to [Jenkins CSP changes](https://www.jenkins.io/doc/book/system-administration/security/configuring-content-security-policy/).You can also use ``--junit-xml=report.xml`` to get an xml report instead. Jenkins can use this file to display better reporting for your tests.```bashpytest test_suite.py --junit-xml=report.xml```&lt;h3&gt;🔵 pynose Reports:&lt;/h3&gt;The ``--report`` option gives you a fancy report after your test suite completes.```bashpynose test_suite.py --report```&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/nose_report.png&quot; alt=&quot;Example pynose Report&quot; title=&quot;Example pynose Report&quot; width=&quot;320&quot; /&gt;(NOTE: You can add ``--show-report`` to immediately display pynose reports after the test suite completes. Only use ``--show-report`` when running tests locally because it pauses the test run.)&lt;h3&gt;🔵 Behave Dashboard &amp; Reports:&lt;/h4&gt;(The [behave_bdd/](https://github.com/seleniumbase/SeleniumBase/tree/master/examples/behave_bdd) folder can be found in the [examples/](https://github.com/seleniumbase/SeleniumBase/tree/master/examples) folder.)```bashbehave behave_bdd/features/ -D dashboard -D headless```&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/sb_behave_dashboard.png&quot; title=&quot;SeleniumBase&quot; width=&quot;500&quot;&gt;You can also use ``--junit`` to get ``.xml`` reports for each Behave feature. Jenkins can use these files to display better reporting for your tests.```bashbehave behave_bdd/features/ --junit -D rs -D headless```&lt;h3&gt;🔵 Allure Reports:&lt;/h3&gt;See: [https://docs.qameta.io/allure/](https://docs.qameta.io/allure/#_pytest)SeleniumBase no longer includes ``allure-pytest`` as part of installed dependencies. If you want to use it, install it first:```bashpip install allure-pytest```Now your tests can create Allure results files, which can be processed by Allure Reports.```bashpytest test_suite.py --alluredir=allure_results```--------&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Using a Proxy Server:&lt;/h3&gt;If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add ``--proxy=IP_ADDRESS:PORT`` as an argument on the command line.```bashpytest proxy_test.py --proxy=IP_ADDRESS:PORT```If the proxy server that you wish to use requires authentication, you can do the following (Chromium only):```bashpytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT```SeleniumBase also supports SOCKS4 and SOCKS5 proxies:```bashpytest proxy_test.py --proxy=&quot;socks4://IP_ADDRESS:PORT&quot;pytest proxy_test.py --proxy=&quot;socks5://IP_ADDRESS:PORT&quot;```To make things easier, you can add your frequently-used proxies to PROXY_LIST in [proxy_list.py](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/proxy_list.py), and then use ``--proxy=KEY_FROM_PROXY_LIST`` to use the IP_ADDRESS:PORT of that key.```bashpytest proxy_test.py --proxy=proxy1```&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Changing the User-Agent:&lt;/h3&gt;🔵 If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add ``--agent=&quot;USER AGENT STRING&quot;`` as an argument on the command-line.```bashpytest user_agent_test.py --agent=&quot;Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU&quot;```&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Handling Pop-Up / Pop Up Alerts:&lt;/h3&gt;🔵 &lt;code translate=&quot;no&quot;&gt;self.accept_alert()&lt;/code&gt; automatically waits for and accepts alert pop-ups. &lt;code translate=&quot;no&quot;&gt;self.dismiss_alert()&lt;/code&gt; automatically waits for and dismisses alert pop-ups. On occasion, some methods like &lt;code translate=&quot;no&quot;&gt;self.click(SELECTOR)&lt;/code&gt; might dismiss a pop-up on its own because they call JavaScript to make sure that the &lt;code translate=&quot;no&quot;&gt;readyState&lt;/code&gt; of the page is &lt;code translate=&quot;no&quot;&gt;complete&lt;/code&gt; before advancing. If you're trying to accept a pop-up that got dismissed this way, use this workaround: Call &lt;code translate=&quot;no&quot;&gt;self.find_element(SELECTOR).click()&lt;/code&gt; instead, (which will let the pop-up remain on the screen), and then use &lt;code translate=&quot;no&quot;&gt;self.accept_alert()&lt;/code&gt; to accept the pop-up (&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/issues/600#issuecomment-647270426&quot;&gt;more on that here&lt;/a&gt;). If pop-ups are intermittent, wrap code in a try/except block.&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Building Guided Tours for Websites:&lt;/h3&gt;🔵 Learn about &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/tour_examples/ReadMe.md&quot;&gt;SeleniumBase Interactive Walkthroughs&lt;/a&gt; (in the ``examples/tour_examples/`` folder). It's great for prototyping a website onboarding experience.&lt;a id=&quot;utilizing_advanced_features&quot;&gt;&lt;/a&gt;--------&lt;div&gt;&lt;/div&gt;&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Production Environments &amp; Integrations:&lt;/h3&gt;&lt;div&gt;&lt;/div&gt;&lt;details&gt;&lt;summary&gt; ▶️ Here are some things you can do to set up a production environment for your testing. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt;&lt;ul&gt;&lt;li&gt;You can set up a &lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/azure/jenkins/ReadMe.md&quot;&gt;SeleniumBase Jenkins example on Azure&lt;/a&gt; or the &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/google_cloud/ReadMe.md&quot;&gt;SeleniumBase Jenkins example on Google Cloud&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can use &lt;a href=&quot;https://selenium.dev/documentation/en/grid/&quot; target=&quot;_blank&quot;&gt;the Selenium Grid&lt;/a&gt; to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/utilities/selenium_grid&quot;&gt;SeleniumBase selenium_grid folder&lt;/a&gt;, which should have everything you need, including the &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md&quot;&gt;Selenium Grid ReadMe&lt;/a&gt; to help you get started.&lt;/li&gt;&lt;li&gt;If you're using the &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/mysql_installation.md&quot;&gt;SeleniumBase MySQL feature&lt;/a&gt; to save results from tests running on a server machine, you can install &lt;a href=&quot;https://dev.mysql.com/downloads/tools/workbench/&quot;&gt;MySQL Workbench&lt;/a&gt; to help you read &amp; write from your DB more easily.&lt;/li&gt;&lt;li&gt;If you're using AWS, you can set up an &lt;a href=&quot;https://aws.amazon.com/s3/&quot; target=&quot;_blank&quot;&gt;Amazon S3&lt;/a&gt; account for saving log files and screenshots from your tests. To activate this feature, modify &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/settings.py&quot;&gt;settings.py&lt;/a&gt; with connection details in the S3 section, and add &lt;code translate=&quot;no&quot;&gt;--with-s3-logging&lt;/code&gt; on the command-line when running your tests.&lt;/li&gt;&lt;/ul&gt;Here's an example of running tests with some additional features enabled:```bashpytest [YOUR_TEST_FILE.py] --with-db-reporting --with-s3-logging```&lt;/details&gt;&lt;a id=&quot;detailed_method_specifications&quot;&gt;&lt;/a&gt;&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Detailed Method Specifications and Examples:&lt;/h3&gt;🔵 **Navigating to a web page: (and related commands)**```pythonself.open(&quot;https://xkcd.com/378/&quot;)  # This method opens the specified page.self.go_back()  # This method navigates the browser to the previous page.self.go_forward()  # This method navigates the browser forward in history.self.refresh_page()  # This method reloads the current page.self.get_current_url()  # This method returns the current page URL.self.get_page_source()  # This method returns the current page source.```&lt;b&gt;ProTip™:&lt;/b&gt; You can use the &lt;code translate=&quot;no&quot;&gt;self.get_page_source()&lt;/code&gt; method with Python's &lt;code translate=&quot;no&quot;&gt;find()&lt;/code&gt; command to parse through HTML to find something specific. (For more advanced parsing, see the &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_parse_soup.py&quot;&gt;BeautifulSoup example&lt;/a&gt;.)```pythonsource = self.get_page_source()head_open_tag = source.find('&lt;head&gt;')head_close_tag = source.find('&lt;/head&gt;', head_open_tag)everything_inside_head = source[head_open_tag+len('&lt;head&gt;'):head_close_tag]```🔵 **Clicking:**To click an element on the page:```pythonself.click(&quot;div#my_id&quot;)```**ProTip™:** In most web browsers, you can right-click on a page and select ``Inspect Element`` to see the CSS selector details that you'll need to create your own scripts.🔵 **Typing Text:**&lt;code translate=&quot;no&quot;&gt;self.type(selector, text)&lt;/code&gt;  # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example:```pythonself.type(&quot;input#id_value&quot;, &quot;2012&quot;)```You can also use &lt;code translate=&quot;no&quot;&gt;self.add_text()&lt;/code&gt; or the &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot; target=&quot;_blank&quot;&gt;WebDriver&lt;/a&gt; &lt;code translate=&quot;no&quot;&gt;.send_keys()&lt;/code&gt; command, but those won't clear the text box first if there's already text inside.🔵 **Getting the text from an element on a page:**```pythontext = self.get_text(&quot;header h2&quot;)```🔵 **Getting the attribute value from an element on a page:**```pythonattribute = self.get_attribute(&quot;#comic img&quot;, &quot;title&quot;)```🔵 **Asserting existence of an element on a page within some number of seconds:**```pythonself.wait_for_element_present(&quot;div.my_class&quot;, timeout=10)```(NOTE: You can also use: ``self.assert_element_present(ELEMENT)``)🔵 **Asserting visibility of an element on a page within some number of seconds:**```pythonself.wait_for_element_visible(&quot;a.my_class&quot;, timeout=5)```(NOTE: The short versions of that are ``self.find_element(ELEMENT)`` and ``self.assert_element(ELEMENT)``. The ``find_element()`` version returns the element.)Since the line above returns the element, you can combine that with ``.click()`` as shown below:```pythonself.find_element(&quot;a.my_class&quot;, timeout=5).click()# But you're better off using the following statement, which does the same thing:self.click(&quot;a.my_class&quot;)  # DO IT THIS WAY!```**ProTip™:** You can use dots to signify class names (Ex: ``div.class_name``) as a simplified version of ``div[class=&quot;class_name&quot;]`` within a CSS selector. You can also use ``*=`` to search for any partial value in a CSS selector as shown below:```pythonself.click('a[name*=&quot;partial_name&quot;]')```🔵 **Asserting visibility of text inside an element on a page within some number of seconds:**```pythonself.assert_text(&quot;Make it so!&quot;, &quot;div#trek div.picard div.quotes&quot;)self.assert_text(&quot;Tea. Earl Grey. Hot.&quot;, &quot;div#trek div.picard div.quotes&quot;, timeout=3)```(NOTE: ``self.find_text(TEXT, ELEMENT)`` and ``self.wait_for_text(TEXT, ELEMENT)`` also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.)🔵 **Asserting Anything:**```pythonself.assert_true(var1 == var2)self.assert_false(var1 == var2)self.assert_equal(var1, var2)```🔵 **Useful Conditional Statements: (with creative examples)**❓ ``is_element_visible(selector):``  (visible on the page)```pythonif self.is_element_visible('div#warning'):    print(&quot;Red Alert: Something bad might be happening!&quot;)```❓ ``is_element_present(selector):``  (present in the HTML)```pythonif self.is_element_present('div#top_secret img.tracking_cookie'):    self.contact_cookie_monster()  # Not a real SeleniumBase methodelse:    current_url = self.get_current_url()    self.contact_the_nsa(url=current_url, message=&quot;Dark Zone Found&quot;)  # Not a real SeleniumBase method``````pythondef is_there_a_cloaked_klingon_ship_on_this_page():    if self.is_element_present(&quot;div.ships div.klingon&quot;):        return not self.is_element_visible(&quot;div.ships div.klingon&quot;)    return False```❓ ``is_text_visible(text, selector):``  (text visible on element)```pythonif self.is_text_visible(&quot;You Shall Not Pass!&quot;, &quot;h1&quot;):    self.open(&quot;https://www.youtube.com/watch?v=3xYXUeSmb-Y&quot;)```&lt;div&gt;&lt;/div&gt;&lt;details&gt;&lt;summary&gt; ▶️ Click for a longer example of &lt;code translate=&quot;no&quot;&gt;is_text_visible():&lt;/code&gt;&lt;/summary&gt;```pythondef get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):    selector = &quot;div.superbowl_%s div.commercials div.transcript div.picard&quot; % superbowl_year    if self.is_text_visible(&quot;Yes, it was I who summoned you all here.&quot;, selector):        return &quot;Picard Paramount+ Superbowl Ad 2020&quot;    elif self.is_text_visible(&quot;Commander, signal the following: Our Network is Secure!&quot;):        return &quot;Picard Mirror Universe iboss Superbowl Ad 2018&quot;    elif self.is_text_visible(&quot;For the Love of Marketing and Earl Grey Tea!&quot;, selector):        return &quot;Picard Mirror Universe HubSpot Superbowl Ad 2015&quot;    elif self.is_text_visible(&quot;Delivery Drones... Engage&quot;, selector):        return &quot;Picard Mirror Universe Amazon Superbowl Ad 2015&quot;    elif self.is_text_visible(&quot;Bing it on Screen!&quot;, selector):        return &quot;Picard Mirror Universe Microsoft Superbowl Ad 2015&quot;    elif self.is_text_visible(&quot;OK Glass, Make it So!&quot;, selector):        return &quot;Picard Mirror Universe Google Superbowl Ad 2015&quot;    elif self.is_text_visible(&quot;Number One, I've Never Seen Anything Like It.&quot;, selector):        return &quot;Picard Mirror Universe Tesla Superbowl Ad 2015&quot;    elif self.is_text_visible(&quot;Let us make sure history never forgets the name ... Facebook&quot;, selector):        return &quot;Picard Mirror Universe Facebook Superbowl Ad 2015&quot;    elif self.is_text_visible(&quot;&quot;&quot;With the first link, the chain is forged.                              The first speech censored, the first thought forbidden,                              the first freedom denied, chains us all irrevocably.&quot;&quot;&quot;, selector):        return &quot;Picard Mirror Universe Wikimedia Superbowl Ad 2015&quot;    else:        raise Exception(&quot;Reports of my assimilation are greatly exaggerated.&quot;)```&lt;/details&gt;❓ ``is_link_text_visible(link_text):`````pythonif self.is_link_text_visible(&quot;Stop! Hammer time!&quot;):    self.click_link(&quot;Stop! Hammer time!&quot;)```&lt;h3&gt;🔵 Switching Tabs:&lt;/h3&gt;&lt;p&gt;If your test opens up a new tab/window, you can switch to it. (SeleniumBase automatically switches to new tabs that don't open to &lt;code translate=&quot;no&quot;&gt;about:blank&lt;/code&gt; URLs.)&lt;/p&gt;```pythonself.switch_to_window(1)  # This switches to the new tab (0 is the first one)```&lt;h3&gt;🔵 How to handle iframes:&lt;/h3&gt;🔵 &lt;b&gt;iframes&lt;/b&gt; follow the same principle as new windows: You must first switch to the iframe if you want to perform actions in there:```pythonself.switch_to_frame(&quot;iframe&quot;)# ... Now perform actions inside the iframeself.switch_to_parent_frame()  # Exit the current iframe```To exit from multiple iframes, use ``self.switch_to_default_content()``. (If inside a single iframe, this has the same effect as ``self.switch_to_parent_frame()``.)```pythonself.switch_to_frame('iframe[name=&quot;frame1&quot;]')self.switch_to_frame('iframe[name=&quot;frame2&quot;]')# ... Now perform actions inside the inner iframeself.switch_to_default_content()  # Back to the main page```🔵 You can also use a context manager to act inside iframes:```pythonwith self.frame_switch(&quot;iframe&quot;):    # ... Now perform actions while inside the code block# You have left the iframe```This also works with nested iframes:```pythonwith self.frame_switch('iframe[name=&quot;frame1&quot;]'):    with self.frame_switch('iframe[name=&quot;frame2&quot;]'):        # ... Now perform actions while inside the code block    # You are now back inside the first iframe# You have left all the iframes```&lt;h3&gt;🔵 How to execute custom jQuery scripts:&lt;/h3&gt;&lt;p&gt;jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser.If the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately.You'd know this because the web page would contain something like the following in the HTML:&lt;/p&gt;```html&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js&quot;&gt;&lt;/script&gt;```🔵 It's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first:```pythonself.activate_jquery()```&lt;div&gt;&lt;/div&gt;&lt;details&gt;&lt;summary&gt; ▶️ Here are some examples of using jQuery in your scripts. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt;```pythonself.execute_script(&quot;jQuery, window.scrollTo(0, 600)&quot;)  # Scrolling the pageself.execute_script(&quot;jQuery('#annoying-widget').hide()&quot;)  # Hiding elements on a pageself.execute_script(&quot;jQuery('#hidden-widget').show(0)&quot;)  # Showing hidden elements on a pageself.execute_script(&quot;jQuery('#annoying-button a').remove()&quot;)  # Removing elements on a pageself.execute_script(&quot;jQuery('%s').mouseover()&quot; % (mouse_over_item))  # Mouse-over elements on a pageself.execute_script(&quot;jQuery('input#the_id').val('my_text')&quot;)  # Fast text input on a pageself.execute_script(&quot;jQuery('div#dropdown a.link').click()&quot;)  # Click elements on a pageself.execute_script(&quot;return jQuery('div#amazing')[0].text&quot;)  # Returns the css &quot;text&quot; of the element givenself.execute_script(&quot;return jQuery('textarea')[2].value&quot;)  # Returns the css &quot;value&quot; of the 3rd textarea element on the page```(Most of the above commands can be done directly with built-in SeleniumBase methods.)&lt;/details&gt;&lt;h3&gt;🔵 How to handle a restrictive CSP:&lt;/h3&gt;❗ Some websites have a restrictive [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on those websites, add ``--disable-csp`` as a ``pytest`` command-line option to load a Chromium extension that bypasses the CSP.&lt;h3&gt;🔵 More JavaScript fun:&lt;/h3&gt;&lt;div&gt;&lt;/div&gt;&lt;details&gt;&lt;summary&gt; ▶️ In this example, JavaScript creates a referral button on a page, which is then clicked. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt;```pythonstart_page = &quot;https://xkcd.com/465/&quot;destination_page = &quot;https://github.com/seleniumbase/SeleniumBase&quot;self.open(start_page)referral_link = '''&lt;a class='analytics test' href='%s'&gt;Free-Referral Button!&lt;/a&gt;''' % destination_pageself.execute_script('''document.body.innerHTML = \&quot;%s\&quot;''' % referral_link)self.click(&quot;a.analytics&quot;)  # Clicks the generated button```(Due to popular demand, this traffic generation example has been included in SeleniumBase with the &lt;code translate=&quot;no&quot;&gt;self.generate_referral(start_page, end_page)&lt;/code&gt; and the &lt;code translate=&quot;no&quot;&gt;self.generate_traffic(start_page, end_page, loops)&lt;/code&gt; methods.)&lt;/details&gt;&lt;h3&gt;🔵 How to use deferred asserts:&lt;/h3&gt;&lt;p&gt;Let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. That's where deferred asserts come in. Here's the example:&lt;/p&gt;```pythonfrom seleniumbase import BaseCaseBaseCase.main(__name__, __file__)class MyTestClass(BaseCase):    def test_deferred_asserts(self):        self.open('https://xkcd.com/993/')        self.wait_for_element('#comic')        self.deferred_assert_element('img[alt=&quot;Brand Identity&quot;]')        self.deferred_assert_element('img[alt=&quot;Rocket Ship&quot;]')  # Will Fail        self.deferred_assert_element('#comicmap')        self.deferred_assert_text('Fake Item', '#middleContainer')  # Will Fail        self.deferred_assert_text('Random', '#middleContainer')        self.deferred_assert_element('a[name=&quot;Super Fake !!!&quot;]')  # Will Fail        self.process_deferred_asserts()```&lt;code translate=&quot;no&quot;&gt;deferred_assert_element()&lt;/code&gt; and &lt;code translate=&quot;no&quot;&gt;deferred_assert_text()&lt;/code&gt; will save any exceptions that would be raised.To flush out all the failed deferred asserts into a single exception, make sure to call &lt;code translate=&quot;no&quot;&gt;self.process_deferred_asserts()&lt;/code&gt; at the end of your test method. If your test hits multiple pages, you can call &lt;code translate=&quot;no&quot;&gt;self.process_deferred_asserts()&lt;/code&gt; before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made.&lt;h3&gt;🔵 How to access raw &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot; target=&quot;_blank&quot;&gt;WebDriver&lt;/a&gt;:&lt;/h3&gt;&lt;p&gt;If you need access to any commands that come with standard &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot; target=&quot;_blank&quot;&gt;WebDriver&lt;/a&gt;, you can call them directly like this:&lt;/p&gt;```pythonself.driver.delete_all_cookies()capabilities = self.driver.capabilitiesself.driver.find_elements(&quot;partial link text&quot;, &quot;GitHub&quot;)```(In general, you'll want to use the SeleniumBase versions of methods when available.)&lt;h3&gt;🔵 How to retry failing tests automatically:&lt;/h3&gt;&lt;p&gt;You can use &lt;code translate=&quot;no&quot;&gt;pytest --reruns=NUM&lt;/code&gt; to retry failing tests that many times. Add &lt;code translate=&quot;no&quot;&gt;--reruns-delay=SECONDS&lt;/code&gt; to wait that many seconds between retries. Example:&lt;/p&gt;```bashpytest --reruns=1 --reruns-delay=1```&lt;p&gt;You can use the &lt;code translate=&quot;no&quot;&gt;@retry_on_exception()&lt;/code&gt; decorator to retry failing methods. (First import: &lt;code translate=&quot;no&quot;&gt;from seleniumbase import decorators&lt;/code&gt;). To learn more about SeleniumBase decorators, &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/common&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;--------&gt; &quot;Catch bugs in QA before deploying code to Production!&quot;&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://seleniumbase.io/error_page&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/gif/error_page.gif&quot; alt=&quot;Catch bugs in QA before deploying code to Production!&quot; title=&quot;Catch bugs in QA before deploying code to Production!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;--------&lt;h3&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/logo7.png&quot; title=&quot;SeleniumBase&quot; width=&quot;32&quot; /&gt; Wrap-Up&lt;/h3&gt;&lt;p&gt;&lt;div&gt;&lt;b&gt;If you see something, say something!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/issues?q=is%3Aissue+is%3Aclosed&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-closed-raw/seleniumbase/SeleniumBase.svg?color=22BB88&quot; title=&quot;Closed Issues&quot; /&gt;&lt;/a&gt;   &lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/pulls?q=is%3Apr+is%3Aclosed&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-pr-closed/seleniumbase/SeleniumBase.svg?logo=github&amp;logoColor=white&amp;color=22BB99&quot; title=&quot;Closed Pull Requests&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/sb_logo_10t.png&quot; alt=&quot;SeleniumBase&quot; title=&quot;SeleniumBase&quot; width=&quot;266&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLp9uKicxkBc5UIlGi2BuE3aWC7JyXpD3m&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/youtube.png&quot; title=&quot;SeleniumBase Playlist on YouTube&quot; alt=&quot;SeleniumBase Playlist on YouTube&quot; width=&quot;68&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/social/share_github.svg&quot; title=&quot;SeleniumBase on GitHub&quot; alt=&quot;SeleniumBase on GitHub&quot; width=&quot;62&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.facebook.com/SeleniumBase&quot;&gt;&lt;img src=&quot;https://seleniumbase.io/img/social/share_facebook.svg&quot; title=&quot;SeleniumBase on Facebook&quot; alt=&quot;SeleniumBase on Facebook&quot; width=&quot;64&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://gitter.im/seleniumbase/SeleniumBase&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/img/social/share_gitter.svg&quot; title=&quot;SeleniumBase on Gitter&quot; alt=&quot;SeleniumBase on Gitter&quot; width=&quot;52&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;div&gt;&lt;a href=&quot;https://github.com/mdmintz&quot;&gt;https://github.com/mdmintz&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;div&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/fancy_logo_14.png&quot; title=&quot;SeleniumBase&quot; width=&quot;220&quot; /&gt;&lt;/a&gt;&lt;/div&gt; &lt;div&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-22BBCC.svg&quot; title=&quot;SeleniumBase&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/seleniumbase/SeleniumBase&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/gitter/room/seleniumbase/SeleniumBase.svg&quot; alt=&quot;Gitter chat&quot;/&gt;&lt;/a&gt;&lt;/div&gt; &lt;div&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tested%20with-SeleniumBase-04C38E.svg&quot; alt=&quot;Tested with SeleniumBase&quot; /&gt;&lt;/a&gt;&lt;/div&gt; &lt;div&gt;&lt;a href=&quot;https://seleniumbase.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg&quot; alt=&quot;SeleniumBase Docs&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://pepy.tech/project/seleniumbase&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://static.pepy.tech/badge/seleniumbase&quot; alt=&quot;SeleniumBase PyPI downloads&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/seleniumbase/seleniumbase.svg?color=19A57B&quot; title=&quot;Stargazers&quot; /&gt;&lt;/a&gt;&lt;/div&gt;--------&lt;p&gt;&lt;a href=&quot;https://github.com/seleniumbase/SeleniumBase/&quot;&gt;&lt;img src=&quot;https://seleniumbase.github.io/cdn/img/super_logo_sb.png&quot; alt=&quot;SeleniumBase&quot; title=&quot;SeleniumBase&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://pypi.org/project/seleniumbase/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=22AAEE&amp;logo=python&amp;logoColor=FEDC54&quot; title=&quot;Supported Python Versions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</longdescription>
</pkgmetadata>