<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>lock====This is a module for enabling file locks. It uses ``fcntl`` toaccomplish this.POSIX operating systems implement advisory file locking. This enablesconcurrent processes to interact with the same file without conflict,provided they first check for the existence of a lock held by adifferent process. Mandatory file locking can be enabled on POSIXsystems by mounting volumes using the ``mount`` ``-o mand`` option andmakes the operating system prevent editing of a locked file.The ``fcntl`` functionality is implemented in Python by the ``fcntl``standard library module. Using this, a lock can be acquired in a waylike the following:.. code:: python    lock_file = open(&quot;data.db&quot;, &quot;a&quot;)    fcntl.lockf(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)If the file is locked, the following exception is raised:.. code:: python    BlockingIOError: [Errno 11] Resource temporarily unavailableWith advisory locking, code should test for the existence of a a lockbefore editing a file. It is the responsibility of the code, not theoperating system, to enforce locking correctly. Information about thelocks currently held on a file may be retrieved by passing a bytesobject as the third argument to the ``fcntl.fcntl`` function (whichtakes the place of a pointer to the process ID in the fcntl header). Thelock information can be accessed in a way like the following:.. code:: python    lock_data = struct.pack(&quot;hhllhh&quot;, fcntl.F_WRLCK, 0, 0, 0, 0, 0)    fcntl.fcntl(lock_file, fcntl.F_GETLK, lock_data)This returns ``lock_data`` unchanged if there is no lock on the file.examples========The following code saves a dictionary to a file in a loop using ``lock``to lock the file while the save is happening:.. code:: python    import random    import lock    while True:        config = {&quot;a&quot;: 1, &quot;b&quot;: random.randint(1, 2)}        lock.save_JSON(&quot;config.json&quot;, config)The following code loads a dictionary from a file in a loop using``lock`` to lock the file while the load is happening:.. code:: python    import lock    while True:        config = lock.load_JSON(&quot;config.json&quot;)        if config: print(config)These two pieces of code can be used concurrently.</longdescription>
</pkgmetadata>