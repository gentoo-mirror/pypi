<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django Postgres composite types===============================An implementation of Postgres' [composite types](http://www.postgresql.org/docs/current/static/rowtypes.html)for [Django](https://docs.djangoproject.com/en/1.9/).Usage-----Install with:    pip install django-postgres-composite-typesThen add 'postgres_composite_types' to your `INSTALLED_APPS`:    INSTALLED_APPS = [        # ... Other apps        'postgres_composite_types',    ]Define a type and add it to a model:```pythonfrom django.db import modelsfrom postgres_composite_types import CompositeTypeclass Address(CompositeType):    &quot;&quot;&quot;An address.&quot;&quot;&quot;    address_1 = models.CharField(max_length=255)    address_2 = models.CharField(max_length=255)    suburb = models.CharField(max_length=50)    state = models.CharField(max_length=50)    postcode = models.CharField(max_length=10)    country = models.CharField(max_length=50)    class Meta:        db_type = 'x_address'  # Requiredclass Person(models.Model):    &quot;&quot;&quot;A person.&quot;&quot;&quot;    address = Address.Field()```An operation needs to be prepended to your migration:```pythonimport addressfrom django.db import migrationsclass Migration(migrations.Migration):    operations = [        # Registers the type        address.Address.Operation(),        migrations.AddField(            model_name='person',            name='address',            field=address.Address.Field(blank=True, null=True),        ),    ]```Examples--------Array fields:```pythonclass Card(CompositeType):    &quot;&quot;&quot;A playing card.&quot;&quot;&quot;    suit = models.CharField(max_length=1)    rank = models.CharField(max_length=2)    class Meta:        db_type = 'card'class Hand(models.Model):    &quot;&quot;&quot;A hand of cards.&quot;&quot;&quot;    cards = ArrayField(base_field=Card.Field())```Nested types:```pythonclass Point(CompositeType):    &quot;&quot;&quot;A point on the cartesian plane.&quot;&quot;&quot;    # pylint:disable=invalid-name    x = models.IntegerField()    y = models.IntegerField()    class Meta:        db_type = 'x_point'  # Postgres already has a point typeclass Box(CompositeType):    &quot;&quot;&quot;An axis-aligned box on the cartesian plane.&quot;&quot;&quot;    class Meta:        db_type = 'x_box'  # Postgres already has a box type    top_left = Point.Field()    bottom_right = Point.Field()```Gotchas and Caveats-------------------The migration operation currently loads the *current* state of the type, notthe state when the migration was written. A generic `CreateType` operationwhich takes the fields of the type would be possible, but it would stillrequire manual handling still as Django's `makemigrations` is not currentlyextensible.Changes to types are possible using `RawSQL`, for example:```pythonoperations = [    migrations.RunSQL([        &quot;ALTER TYPE x_address DROP ATTRIBUTE country&quot;,        &quot;ALTER TYPE x_address ADD ATTRIBUTE country integer&quot;,    ], [        &quot;ALTER TYPE x_address DROP ATTRIBUTE country&quot;,        &quot;ALTER TYPE x_address ADD ATTRIBUTE country varchar(50)&quot;,    ]),]```However, be aware that if your earlier operations were run using current DBcode, you will already have the right types([bug #8](https://github.com/danni/django-postgres-composite-types/issues/8)).It is recommended to that you namespace your custom types to avoid conflictwith future PostgreSQL types.Lookups and indexes are not implemented yet([bug #9](https://github.com/danni/django-postgres-composite-types/issues/9),[bug #10](https://github.com/danni/django-postgres-composite-types/issues/10)).Running Tests-------------------Clone the repository, go to it's base directory and run the following commands.    pip install tox    toxOr if you want a specific environment    tox -e py35-dj2.0Authors-------* Danielle Madeley &lt;danielle@madeley.id.au&gt;* Tim Heap &lt;hello@timheap.me&gt;License-------(c) 2016, Danielle Madeley  &lt;danielle@madeley.id.au&gt;All rights reserved.Redistribution and use in source and binary forms, with or withoutmodification, are permitted provided that the following conditions are met:1. Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.2. Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.3. Neither the name of the copyright holder nor the names of its contributors   may be used to endorse or promote products derived from this software   without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; ANDANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AREDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLEFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIALDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS ORSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVERCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USEOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</longdescription>
</pkgmetadata>