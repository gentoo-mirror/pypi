<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pywinrm=======pywinrm is a Python client for the Windows Remote Management (WinRM)service. It allows you to invoke commands on target Windows machinesfrom any machine that can run Python.|License| |Test workflow| |Coverage| |PyPI|WinRM allows you to perform various management tasks remotely. Theseinclude, but are not limited to: running batch scripts, powershellscripts, and fetching WMI variables.Used by `Ansible &lt;https://www.ansible.com/&gt;`__ for Windows support.For more information on WinRM, please visit `Microsoft’s WinRMsite &lt;http://msdn.microsoft.com/en-us/library/aa384426.aspx&gt;`__.Requirements-------------  Linux, Mac OS X or Windows-  CPython 2.6-2.7, 3.3-3.5 or PyPy2-  `requests-kerberos &lt;http://pypi.python.org/pypi/requests-kerberos&gt;`__   and   `requests-credssp &lt;https://github.com/jborean93/requests-credssp&gt;`__   is optionalInstallation------------To install pywinrm with support for basic, certificate, and NTLM auth, simply~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: bash   $ pip install pywinrmTo use Kerberos authentication you need these optional dependencies~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: bash   # for Debian/Ubuntu/etc:   $ sudo apt-get install gcc python-dev libkrb5-dev   $ pip install pywinrm[kerberos]   # for RHEL/CentOS/etc:   $ sudo yum install gcc python-devel krb5-devel krb5-workstation python-devel   $ pip install pywinrm[kerberos]To use CredSSP authentication you need these optional dependencies~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: bash   # for Debian/Ubuntu/etc:   $ sudo apt-get install gcc python-dev libssl-dev   $ pip install pywinrm[credssp]   # for RHEL/CentOS/etc:   $ sudo yum install gcc python-devel openssl-devel   $ pip install pywinrm[credssp]Example Usage-------------Run a process on a remote host~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   import winrm   s = winrm.Session('windows-host.example.com', auth=('john.smith', 'secret'))   r = s.run_cmd('ipconfig', ['/all'])   &gt;&gt;&gt; r.status_code   0   &gt;&gt;&gt; r.std_out   Windows IP Configuration      Host Name . . . . . . . . . . . . : WINDOWS-HOST      Primary Dns Suffix  . . . . . . . :      Node Type . . . . . . . . . . . . : Hybrid      IP Routing Enabled. . . . . . . . : No      WINS Proxy Enabled. . . . . . . . : No   ...   &gt;&gt;&gt; r.std_errNOTE: pywinrm will try and guess the correct endpoint url from thefollowing formats:-  windows-host -&gt; http://windows-host:5985/wsman-  windows-host:1111 -&gt; http://windows-host:1111/wsman-  http://windows-host -&gt; http://windows-host:5985/wsman-  http://windows-host:1111 -&gt; http://windows-host:1111/wsman-  http://windows-host:1111/wsman -&gt; http://windows-host:1111/wsmanRun Powershell script on remote host~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   import winrm   ps_script = &quot;&quot;&quot;$strComputer = $Host   Clear   $RAM = WmiObject Win32_ComputerSystem   $MB = 1048576   &quot;Installed Memory: &quot; + [int]($RAM.TotalPhysicalMemory /$MB) + &quot; MB&quot; &quot;&quot;&quot;   s = winrm.Session('windows-host.example.com', auth=('john.smith', 'secret'))   r = s.run_ps(ps_script)   &gt;&gt;&gt; r.status_code   0   &gt;&gt;&gt; r.std_out   Installed Memory: 3840 MB   &gt;&gt;&gt; r.std_errPowershell scripts will be base64 UTF16 little-endian encoded prior tosending to the Windows host. Error messages are converted from thePowershell CLIXML format to a human readable format as a convenience.Run process with low-level API with domain user, disabling HTTPS cert validation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   from winrm.protocol import Protocol   p = Protocol(       endpoint='https://windows-host:5986/wsman',       transport='ntlm',       username=r'somedomain\someuser',       password='secret',       server_cert_validation='ignore')   shell_id = p.open_shell()   command_id = p.run_command(shell_id, 'ipconfig', ['/all'])   std_out, std_err, status_code = p.get_command_output(shell_id, command_id)   p.cleanup_command(shell_id, command_id)   p.close_shell(shell_id)Valid transport options~~~~~~~~~~~~~~~~~~~~~~~pywinrm supports various transport methods in order to authenticate withthe WinRM server. The options that are supported in the ``transport``parameter are; \* ``basic``: Basic auth only works for local Windowsaccounts not domain accounts. Credentials are base64 encoded whensending to the server. \* ``plaintext``: Same as basic auth. \*``certificate``: Authentication is done through a certificate that ismapped to a local Windows account on the server. \* ``ssl``: When usedin conjunction with ``cert_pem`` and ``cert_key_pem`` it will use acertificate as above. If not will revert to basic auth over HTTPS. \*``kerberos``: Will use Kerberos authentication for domain accounts whichonly works when the client is in the same domain as the server and therequired dependencies are installed. Currently a Kerberos ticket needsto be initialized outside of pywinrm using the ``kinit`` command. \*``ntlm``: Will use NTLM authentication for both domain and localaccounts. \* ``credssp``: Will use CredSSP authentication for bothdomain and local accounts. Allows double hop authentication. This onlyworks over a HTTPS endpoint and not HTTP.Encryption~~~~~~~~~~By default, WinRM will not accept unencrypted communication with aclient. There are two ways to enable encrypted communication withpywinrm:1. Use an HTTPS endpoint instead of HTTP (Recommended)2. Use NTLM, Kerberos, or CredSSP as the transport authUsing an HTTPS endpoint is recommended, as it will encrypt all the datasent to the server (including all headers), works securely with all authtypes, and can properly verify remote host identity (when used withcertificates signed by a verifiable certificate authority). You can use`thisscript &lt;https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&gt;`__to easily set up a HTTPS endpoint on WinRM with a self-signedcertificate, but the use of a verifiable certificate authority isrecommended in production environments.The second option is to use NTLM, Kerberos, or CredSSP, and set the``message_encryption`` arg to protocol to ``auto`` (the default value)or ``always``. This will use the authentication GSS-API Wrap and Unwrapmethods to encrypt the message contents sent to the server. This form ofencryption is independent of the transport layer, and the strength ofthe encryption used varies with the underlying authentication typeselected (NTLM generally being the weakest and CredSSP the strongest).To configure message encryption you can use the ``message_encryption``argument when initialising protocol. This option has 3 values that canbe set as shown below.-  ``auto``: Default, Will only use message encryption if it is   available for the auth method and HTTPS isn’t used.-  ``never``: Will never use message encryption even when not over   HTTPS.-  ``always``: Will always use message encryption even when running over   HTTPS (fails if encryption support is unavailable on the selected   auth method).If you set the value to ``always`` and the transport opt doesn’t supportmessage encryption (e.g., ``basic`` auth or an old version of``pykerberos`` without message encryption support is installed), pywinrmwill throw an exception.If you do not use an HTTPS endpoint or message encryption, adefault-configured WinRM server will automatically reject requests frompywinrm. Server settings can be modified allow unencrypted messages andcredentials, but this is highly insecure and should only be used fordiagnostic purposes. To allow unencrypted communications, run thefollowing on the WinRM server (cmd and powershell versions provided):::   # from cmd   winrm set winrm/config/service @{AllowUnencrypted=&quot;true&quot;}   # or from powershell   Set-Item -Path &quot;WSMan:\localhost\Service\AllowUnencrypted&quot; -Value $trueAgain, this should *not* be used in production environments, as yourcredentials and WinRM messages can be trivially recovered.Enabling WinRM on remote host~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Enable WinRM over HTTP and HTTPS with self-signed certificate (includesfirewall rules):::   # from powershell:   Invoke-Expression ((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))Enable WinRM over HTTP for test usage (includes firewall rules):::   winrm quickconfigEnable WinRM basic authentication. For domain users, it is necessary touse NTLM, Kerberos, or CredSSP authentication (Kerberos and NTLMauthentication are enabled by default, CredSSP is not).::   # from cmd:   winrm set winrm/config/service/auth @{Basic=&quot;true&quot;}Enable WinRM CredSSP authentication. This allows double hop support soyou can authenticate with a network service when running command son theremote host. This command is run in Powershell... code:: powershell   Enable-WSManCredSSP -Role Server -Force   Set-Item -Path &quot;WSMan:\localhost\Service\Auth\CredSSP&quot; -Value $trueContributors (alphabetically)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-  Alessandro Pilotti-  Alexey Diyan-  Chris Church-  David Cournapeau-  Gema Gomez-  Jijo Varghese-  Jordan Borean-  Juan J. Martinez-  Lukas Bednar-  Manuel Sabban-  Matt Clark-  Matt Davis-  Maxim Kovgan-  Nir Cohen-  Patrick Dunnigan-  Reina AbolofiaWant to help - send a pull request. I will accept good pull requests forsure... |License| image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: https://github.com/diyan/pywinrm/blob/master/LICENSE.. |Test workflow| image:: https://github.com/diyan/pywinrm/workflows/Test%20pywinrm/badge.svg   :target: https://github.com/diyan/pywinrm/actions/workflows/ci.yml.. |Coverage| image:: https://coveralls.io/repos/diyan/pywinrm/badge.svg   :target: https://coveralls.io/r/diyan/pywinrm.. |PyPI| image:: https://img.shields.io/pypi/dm/pywinrm.svg   :target: https://pypi.python.org/pypi/pywinrm</longdescription>
</pkgmetadata>