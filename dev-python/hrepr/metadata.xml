<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hrepr`hrepr` outputs HTML/pretty representations for Python objects.âœ… Nice, colourful representations of lists, dicts, dataclasses, booleans...&lt;br/&gt;âœ… Ridiculously extensible and configurable&lt;br/&gt;âœ… Handles recursive data structures&lt;br/&gt;âœ… Compatible with Jupyter notebooks&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr1.png&quot; width=&quot;400px&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr2.png&quot; width=&quot;400px&quot;&gt;I suggest studying the example file to learn `hrepr`:* `python examples/exhibit.py &gt; exhibit.html` (and then view the HTML file)Also see the Jupyter notebook at `examples/Basics.ipynb`, but keep in mind that GitHub can't display it properly because of the injected styles/scripts.## Install```pythonpip install hrepr```## Usage```pythonfrom hrepr import hreprobj = {'potatoes': [1, 2, 3], 'bananas': {'cantaloups': 8}}# Print the HTML representation of objprint(hrepr(obj))# Wrap the representation in &lt;html&gt;&lt;body&gt; tags and embed the default# css style files in a standalone page, which is saved to obj.htmlhrepr.page(obj, file=&quot;obj.html&quot;)```In a Jupyter Notebook, you can return `hrepr(obj)` from any cell and it will show its representation for you. You can also write `display_html(hrepr(obj))`.## Custom representationsA custom representation for an object can be defined using the following three methods (it is not necessary to define all of them, only those that are relevant to your case):* `__hrepr__(self, H, hrepr)` returns the normal HTML representation.    * Use `H.span[&quot;some-class&quot;](some-content, some_attr=some_value)` to generate HTML.    * Use `hrepr(self.x)` to generate the representation for some subfield `x`.    * `hrepr.config` contains any keyword arguments given in the top level call to `hrepr`. For instance, if you call `hrepr(obj, blah=3)`, then `hrepr.config.blah == 3` in all calls to `__hrepr__` down the line (the default value for all keys is `None`).* `__hrepr_short__(self, H, hrepr)` returns a *short* representation, ideally of a constant size.    * The output of this method is used when we hit max depth, or for repeated references.    * Only include bare minimum information. Short means short.* `__hrepr_resources__(cls, H)` is a **classmethod** that returns resources common to all instances of the class (typically a stylesheet or a script).    * When generating a page, the resources will go in `&lt;head&gt;`.    * You can return a list of resources.No dependency on `hrepr` is necessary.For example:```pythonclass Person:    def __init__(self, name, age, job):        self.name = name        self.age = age        self.job = job    @classmethod    def __hrepr_resources__(cls, H):        # Note: you might need to add &quot;!important&quot; next to some rules if        # they conflict with defaults from hrepr's own CSS.        return H.style(&quot;&quot;&quot;            .person {                background: magenta !important;                border-color: magenta !important;            }            .person-short { font-weight: bold; color: green; }        &quot;&quot;&quot;)    def __hrepr__(self, H, hrepr):        # hrepr.make.instance is a helper to show a table with a header that        # describes some kind of object        return hrepr.make.instance(            title=self.name,            fields=[[&quot;age&quot;, self.age], [&quot;job&quot;, self.job]],            delimiter=&quot; â†¦ &quot;,            type=&quot;person&quot;,        )    def __hrepr_short__(self, H, hrepr):        return H.span[&quot;person-short&quot;](self.name)```&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr3.png&quot; width=&quot;600px&quot;&gt;## References`hrepr` can handle circular references. Furthermore, if an object is found at several places in a structure, only the first occurrence will be printed in full, and any other will be a numeric reference mapped to the short representation for the object. It looks like this:&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr4.png&quot; width=&quot;600px&quot;&gt;The `shortrefs` and `norefs` configuration keys control the representation of references:&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr5.png&quot; width=&quot;600px&quot;&gt;`norefs` is ignored when there are circular references.## HTML generationGenerate HTML using the `H` parameter to `__hrepr__`, or import it and use it directly:```pythonfrom hrepr import Hhtml = H.span[&quot;bear&quot;](    &quot;Only &quot;, H.b(&quot;YOU&quot;), &quot; can prevent forest fires!&quot;,    style=&quot;color: brown;&quot;)print(html)# &lt;span class=&quot;bear&quot; style=&quot;color: brown;&quot;&gt;Only &lt;b&gt;YOU&lt;/b&gt; can prevent forest fires!&lt;/span&gt;````H` can be built incrementally: if you have an element, you can call it to add children, index it to add classes, and so on. For instance:```pythonfrom hrepr import Hhtml = H.span()html = html(&quot;Only &quot;)html = html(style=&quot;color: brown;&quot;)[&quot;bear&quot;]html = html(H.b(&quot;YOU&quot;), &quot; can prevent forest fires!&quot;)print(html)# &lt;span class=&quot;bear&quot; style=&quot;color: brown;&quot;&gt;Only &lt;b&gt;YOU&lt;/b&gt; can prevent forest fires!&lt;/span&gt;```This can be handy if you want to tweak generated HTML a little. For example, `hrepr(obj)[&quot;fox&quot;]` will tack on the class `fox` to the representation of the object.### Helpers* `hrepr.make.instance(title, fields, delimiter=None, type=None)`: formats the fields like a dataclass, with title on top.* `hrepr.make.bracketed(body, start, end, type=None)`: formats the body with the specified start/end bracket.### Constructed elementsTo make it a bit easier to include and use JavaScript libraries, you can use the special `__constructor` attribute.For example, you can load Plotly and create a plot like this:```pythondef Plot(data):    return H.div(        __constructor={            &quot;script&quot;: &quot;https://cdn.plot.ly/plotly-latest.min.js&quot;,            &quot;symbol&quot;: &quot;Plotly.newPlot&quot;,            &quot;options&quot;: [{&quot;x&quot;: list(range(len(data))), &quot;y&quot;: list(data)}],        }    )print(Plot([math.sin(x / 10) for x in range(100)]))```The above will:* Load the specified script.* Get the `Plotly.newPlot` function in the global namespace.* Call it with the `div` element as the first argument, and the `options` as the second argument.It will look like this:&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr6.png&quot; width=&quot;600px&quot;&gt;### ModulesAnother example, this time using ESM (modules):```pythonnode = H.div(    style=&quot;width:500px;height:500px;border:1px solid black;&quot;,    __constructor={        &quot;module&quot;: &quot;https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.23.0/cytoscape.esm.min.js&quot;,        &quot;arguments&quot;: {            &quot;container&quot;: H.self(),            &quot;elements&quot;: [                {&quot;data&quot;: {&quot;id&quot;: &quot;A&quot;}},                {&quot;data&quot;: {&quot;id&quot;: &quot;B&quot;}},                {&quot;data&quot;: {&quot;id&quot;: &quot;C&quot;}},                {&quot;data&quot;: {&quot;source&quot;: &quot;A&quot;, &quot;target&quot;: &quot;B&quot;}},                {&quot;data&quot;: {&quot;source&quot;: &quot;B&quot;, &quot;target&quot;: &quot;C&quot;}},                {&quot;data&quot;: {&quot;source&quot;: &quot;C&quot;, &quot;target&quot;: &quot;A&quot;}},            ],            &quot;style&quot;: cystyle,            &quot;layout&quot;: {&quot;name&quot;: &quot;cose&quot;},        },    },)print(node)```The above will:* Import the specified module.* Call the module's default export with `arguments`.  * Note the use of `H.self()` to refer to the target `div` in the arguments.If you wish to use a non-default export, set the `symbol` key in the `__constructor` attribute to the name of the export you want.## Customize hrepr### MixinsIf you want to *really* customize hrepr, you can use mixins. They look like a bit of black magic, but they're simple enough:```python# ovld is one of the dependencies of hreprfrom ovld import ovld, extend_super, has_attribute, OvldMCfrom hrepr import hreprclass MyMixin(metaclass=OvldMC):    # Change the representation of integers    @extend_super    def hrepr_resources(self, cls: int):        # Note: in hrepr_resources, cls is the int type, not an integer        return self.H.style(&quot;.my-integer { color: fuchsia; }&quot;)    @extend_super    def hrepr(self, n: int):        return self.H.span[&quot;my-integer&quot;](&quot;The number &quot;, str(n))    # Specially handle any object with a &quot;quack&quot; method    def hrepr(self, duck: has_attribute(&quot;quack&quot;)):        return self.H.span(&quot;ðŸ¦†&quot;)```&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr7.png&quot; width=&quot;600px&quot;&gt;The annotation for a rule can either be a type, `ovld.has_attribute`, or pretty much any function wrapped with the `ovld.meta` decorator, as long as the function operates on classes. See the documentation for [ovld](https://github.com/breuleux/ovld#other-features) for more information.And yes, you can define `hrepr` multiple times inside the class, as long as they have distinct annotations and you inherit from `Hrepr`. You can also define `hrepr_short` or `hrepr_resources` the same way.### Postprocessors`hrepr` can be given a postprocessor that is called on the representation of any object. You can use this to do things like highlighting specific objects:```pythonfrom hrepr import Hstyle = H.style(&quot;.highlight { border: 3px solid red !important; }&quot;)def highlight(x):    def postprocess(element, obj, hrepr):        if obj == x:            # Adds the &quot;highlight&quot; class and attaches a style            return element[&quot;highlight&quot;].fill(resources=style)        else:            return element    return postprocesshrepr([1, 2, [3, 4, 2]], postprocess=highlight(2))```&lt;img src=&quot;https://raw.githubusercontent.com/breuleux/hrepr/master/images/hrepr8.png&quot; width=&quot;600px&quot;&gt;### hrepr variantsTo put this all together, you can create a *variant* of `hrepr`:```pythonhrepr2 = hrepr.variant(mixins=MyMixin, postprocess=highlight(2))hrepr2([1, 2, 3])  # Will use the mixins and postprocessor```### Configure the hrepr function itselfAlternatively, you can configure the main `hrepr`:```pythonhrepr.configure(mixins=MyMixin, postprocess=highlight(2))```But keep in mind that unlike the variant, the above will modify `hrepr` for everything else as well.</longdescription>
</pkgmetadata>