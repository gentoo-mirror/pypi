<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cyberpy&gt; Version 1.0.9&gt; Tools for Cyber wallet management and offline transaction signing&gt; Bostrom network release## Installing#### Installing from PyPI [repository](https://pypi.org/project/cyberpy):```bashpip install cyberpy```#### Installing from source code:```bashgit clone https://github.com/SaveTheAles/cyberpycd cyberpypip3 install .```## Usage### Generating a wallet```pythonfrom cyberpy import generate_walletwallet = generate_wallet()```The value assigned to `wallet` will be a dictionary just like:```python{    &quot;seed&quot;: &quot;arch skill acquire abuse frown reject front second album pizza hill slogan guess random wonder benefit industry custom green ill moral daring glow elevator&quot;,    &quot;derivation_path&quot;: &quot;m/44'/118'/0'/0/0&quot;,    &quot;private_key&quot;: b'\xbb\xec^\xf6\xdcg\xe6\xb5\x89\xed\x8cG\x05\x03\xdf0:\xc9\x8b \x85\x8a\x14\x12\xd7\xa6a\x01\xcd\xf8\x88\x93',    &quot;public_key&quot;: b&quot;\x03h\x1d\xae\xa7\x9eO\x8e\xc5\xff\xa3sAw\xe6\xdd\xc9\xb8b\x06\x0eo\xc5a%z\xe3\xff\x1e\xd2\x8e5\xe7&quot;,    &quot;address&quot;: &quot;bostrom1uuhna3psjqfxnw4msrfzsr0g08yuyfxesqggqd&quot;,} ```### Converter functions#### Mnemonic seed to private key```pythonfrom cyberpy import seed_to_privkeyseed = &quot;teach there dream chase fatigue abandon lava super senior artefact close upgrade&quot;privkey = seed_to_privkey(seed, path=&quot;m/44'/118'/0'/0/0&quot;) ```#### Private key to public key```pythonfrom cyberpy import privkey_to_pubkeyprivkey = bytes.fromhex(&quot;6dcd05d7ac71e09d3cf7da666709ebd59362486ff9e99db0e8bc663570515afa&quot;)pubkey = privkey_to_pubkey(privkey) ```#### Public key to address```pythonfrom cyberpy import pubkey_to_addresspubkey = bytes.fromhex(&quot;03e8005aad74da5a053602f86e3151d4f3214937863a11299c960c28d3609c4775&quot;)addr = pubkey_to_address(pubkey) ```#### Private key to address```pythonfrom cyberpy import privkey_to_addressprivkey = bytes.fromhex(&quot;6dcd05d7ac71e09d3cf7da666709ebd59362486ff9e99db0e8bc663570515afa&quot;)addr = privkey_to_address(privkey) ```#### Address to address```pythonfrom cyberpy import address_to_addressaddr = address_to_address(address, prefix) ```### Signing transactions#### Send transaction```pythonfrom cyberpy import Transactiontx = Transaction(    privkey=bytes.fromhex(&quot;26d167d549a4b2b66f766b0d3f2bdbe1cd92708818c338ff453abde316a2bd59&quot;),    account_num=11335,    sequence=0,    fee=0,    gas=200000,    memo=&quot;&quot;,    chain_id=&quot;bostrom-testnet-1&quot;,    sync_mode=&quot;broadcast_tx_sync&quot;, # &quot;broadcast_tx_sync&quot;, &quot;broadcast_tx_async&quot;, &quot;broadcast_tx_commit&quot;)tx.add_transfer(recipient=&quot;bostrom103l758ps7403sd9c0y8j6hrfw4xyl70j4mmwkf&quot;, amount=387000)tx.add_transfer(recipient=&quot;bostrom1lzumfk6xvwf9k9rk72mqtztv867xyem393um48&quot;, amount=123)```One or more token transfers can be added to a transaction by calling the `add_transfer` method.#### Link transaction```pythonfrom cyberpy import Transactiontx = Transaction(    privkey=bytes.fromhex(&quot;26d167d549a4b2b66f766b0d3f2bdbe1cd92708818c338ff453abde316a2bd59&quot;),    account_num=11335,    sequence=0,    fee=0,    gas=200000,    memo=&quot;&quot;,    chain_id=bostrom-testnet-1&quot;,    sync_mode=&quot;broadcast_tx_sync&quot;, # &quot;broadcast_tx_sync&quot;, &quot;broadcast_tx_async&quot;, &quot;broadcast_tx_commit&quot;)tx.add_cyberlink(cid_from=&quot;QmceNpj6HfS81PcCaQXrFMQf7LR5FTLkdG9sbSRNy3UXoZ&quot;, cid_to=&quot;QmRX8qYgeZoYM3M5zzQaWEpVFdpin6FvVXvp6RPQK3oufV&quot;)tx.add_cyberlink(cid_from=&quot;QmXsJKAog3tTNEGfHNmSYjdiLYFkq4URrxDpMQpwfBRUtP&quot;, cid_to=&quot;QmTiXybNXEYbfVEy6bhBSw67u6NHXsB2h36xhwPcCQyRgp&quot;)```One or more cyberlink messages can be added to a transaction by calling the `add_cyberlink` method.When the transaction is fully prepared, calling `get_pushable` will return a signed transaction in the form of a JSON string.```pythonpushable_tx = tx.get_pushable()``` This can be used as request body when calling endpoint of the `https://grpc_api:26657`, more detailes [here](https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync)```pythonimport requestsres = requests.post(url=&lt;grpc_api&gt;, data=pushable_tx)```Or you can call `broadcast(grps: str)` method and it will make a signed transaction and POST it with defined gRPC_api.```pythonres = tx.broadcast(url=&lt;gRPC_api&gt;)```## Signing messageOffchain signing transaction-like according to [ADR 036](https://docs.cosmos.network/master/architecture/adr-036-arbitrary-signature.html)string message signing:```pythonfrom cyberpy._message_signer import Messagefrom cyberpy._wallet import seed_to_privkeyseed = &quot;arch skill acquire abuse frown reject front second album pizza hill slogan guess random wonder benefit industry custom green ill moral daring glow elevator&quot;msg = Message(    privkey=seed_to_privkey(seed))msg.add_message('some_string_here', 'prefix') // as prefix it should be bostrom, cosmos, osmo etc.signed_msg = msg.get_signed_message()```list of strings message signing:```pythonfrom cyberpy._message_signer import Messagefrom cyberpy._wallet import seed_to_privkeyseed = &quot;arch skill acquire abuse frown reject front second album pizza hill slogan guess random wonder benefit industry custom green ill moral daring glow elevator&quot;msg = Message(    privkey=seed_to_privkey(seed))strings_list = ['some', 'string', 'here'] // will have : separated stringmsg.add_message_custom(strings_list, 'prefix')signed_msg = msg.get_signed_message()```the output like:```json{    &quot;pub_key&quot;: &quot;A+MXFp7YeLMvoVlAU66Uu0z3Wtc9Cuwq0eocUhtNOmnw&quot;,     &quot;signature&quot;: &quot;9O89CUdRRZj011BphnTs5JnYM9/0O0ch+XLG2DNiWqtYnA4xA5B0wmFQDOQogOxL5xKWILVMnv1IA/7s05QsIA==&quot;}```</longdescription>
</pkgmetadata>