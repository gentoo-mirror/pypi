<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cartocss-doc-parser[![PyPI][pypi-version-image]][pypi-link][![Python versions][pypi-pyversions-image]][pypi-link][![Tests][tests-image]][tests-link][![Coverage Status][coverage-image]][coverage-link][CartoCSS documentation][cartocss-doc-link] Python parser.&lt;p align=&quot;center&quot;&gt;  &lt;img width=&quot;512&quot; height=&quot;512&quot; src=&quot;https://raw.githubusercontent.com/mondeja/cartocss-doc-parser/master/cartocss-doc-parsed.png&quot;&gt;&lt;/p&gt;## Install```bashpip install cartocss-doc-parser```## QuickstartThe main function [cartocss_doc](#cartocss_doc) returns a dictionary withalmost every section of the documentation. All the properties are wrapped ingenerators.```python&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; from cartocss_doc_parser import cartocss_doc&gt;&gt;&gt;&gt;&gt;&gt; doc = cartocss_doc()&gt;&gt;&gt; pprint(doc){'building': &lt;generator object ...&gt;, 'common_elements': &lt;generator object ...&gt;, 'line': &lt;generator object ...&gt;, 'line_pattern': &lt;generator object ...&gt;, 'map_background_and_string_elements': &lt;generator object ...&gt;, 'markers': &lt;generator object ...&gt;, 'other_parameters': &lt;generator object ...&gt;, 'point': &lt;generator object ...&gt;, 'polygon': &lt;generator object ...&gt;, 'polygon_pattern': &lt;generator object ...&gt;, 'raster': &lt;generator object ...&gt;, 'shield': &lt;generator object ...&gt;, 'symbolizers': &lt;generator object ...&gt;, 'text': &lt;generator object ...&gt;, 'torque_properties': &lt;generator object ...&gt;, 'values': &lt;generator object ...&gt;}```All properties contains the attributes- **`default`** Default value.- **`description`** Description.- **`id`** Identificator.- **`link`** Link to the property on documentation.- **`name`** Name of the property.- **`sample`** Example of use.- **`type`** Value data type. For a complete list see [cartocss_data_types](#cartocss_data_types).and if the data type is `keyword` contains an additional attribute- **`variants`** Possible values for the property.```python&gt;&gt;&gt; pprint(list(doc[&quot;polygon&quot;]))[{'default': 'gray',  'description': 'The fill color assigned to a polygon.',  'id': 'polygon-fill-color',  'link': 'https://carto.com/developers/styling/cartocss/#polygon-fill-color',  'name': 'polygon-fill',  'sample': 'polygon-fill: rgba(128, 128, 128, 1);',  'type': 'color'}, {'default': '1',  'description': 'The opacity of the polygon.',  'id': 'polygon-opacity-float',  'link': 'https://carto.com/developers/styling/cartocss/#polygon-opacity-float',  'name': 'polygon-opacity',  'sample': 'polygon-opacity: 1;',  'type': 'float'}, ..., {'default': 'power',  'description': 'An anti-grain geometry method that represents a 2D rendering '                 'library, specific to controlling the quality of antialiasing '                 'and used to calculate pixel gamma (pow(x,gamma), which '                 'produces slightly smoother line and polygon antialiasing '                 &quot;than the 'linear' method.&quot;,  'id': 'polygon-gamma-method-keyword',  'link': 'https://carto.com/developers/styling/cartocss/#polygon-gamma-method-keyword',  'name': 'polygon-gamma-method',  'sample': 'polygon-gamma-method: power;',  'type': 'keyword',  'variants': ['power', 'linear', 'none', 'threshold', 'multiply']}, ...]```All data types can be requested with [cartocss_data_types](#cartocss_data_types) function:```python&gt;&gt;&gt; from cartocss_doc_parser import cartocss_data_types&gt;&gt;&gt; pprint(list(cartocss_data_types()))['color', 'float', 'uri', 'string', 'boolean', 'expression', 'numbers', 'number', 'percentages', 'percentage', 'functions', 'function', 'keyword', 'unsigned', 'tags']```## Documentation&lt;a name=&quot;cartocss_doc&quot; href=&quot;#cartocss_doc&quot;&gt;#&lt;/a&gt; &lt;b&gt;cartocss_doc&lt;/b&gt;(&lt;i&gt;url=&quot;https://carto.com/developers/styling/cartocss/&quot;&lt;/i&gt;, &lt;i&gt;user_agent=&quot;cartocss_doc_parser vX.Y.Z&quot;&lt;/i&gt;) ⇒ `dict`Provides information for almost every section of CartoCSS documentation.- **url** (str) URL to the documentation page. Can be a local file, in which case any HTTP request would be performed, instead the file would be read.- **user_agent** (str) User agent performing the HTTP request to documentation page. As default is `cartocss_doc_parser (v%(version)s)`.&lt;a name=&quot;cartocss_data_types&quot; href=&quot;#cartocss_data_types&quot;&gt;#&lt;/a&gt; &lt;b&gt;cartocss_data_types&lt;/b&gt;(&lt;i&gt;url=&quot;https://carto.com/developers/styling/cartocss/&quot;&lt;/i&gt;, &lt;i&gt;user_agent=&quot;cartocss_doc_parser vX.Y.Z&quot;&lt;/i&gt;) ⇒ `gen`Lists all available data types for properties for CartoCSS.- **url** (str) URL to the documentation page. Can be a local file, in which case any HTTP request would be performed, instead the file would be read.- **user_agent** (str) User agent performing the HTTP request to documentation page. As default is `cartocss_doc_parser (v%(version)s)`.[pypi-link]: https://pypi.org/project/cartocss-doc-parser[pypi-version-image]: https://img.shields.io/pypi/v/cartocss-doc-parser[pypi-pyversions-image]: https://img.shields.io/pypi/pyversions/cartocss-doc-parser[tests-image]: https://img.shields.io/github/actions/workflow/status/mondeja/cartocss-doc-parser/ci.yml?branch=master&amp;logo=github&amp;label=tests[tests-link]: https://github.com/mondeja/cartocss-doc-parser/actions?query=workflow%3ATest[coverage-image]: https://coveralls.io/repos/github/mondeja/cartocss-doc-parser/badge.svg[coverage-link]: https://coveralls.io/github/mondeja/cartocss-doc-parser[cartocss-doc-link]: https://carto.com/developers/styling/cartocss</longdescription>
</pkgmetadata>