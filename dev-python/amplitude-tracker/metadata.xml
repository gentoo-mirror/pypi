<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Amplitude Tracker=================Amplitude Tracker library lets you record analytics data from yourPython code to `Amplitude`_Getting Started---------------Install ``amplitude-tracker`` using pip:::   pip install amplitude-trackerInside your app, you’ll want to *set your* ``write_key`` before makingany analytics calls:.. code:: python   import amplitude_tracker as amplitude   amplitude.write_key = 'xxxxxxxxxxxxxxx'*Note:* If you need to send data to multiple Segment sources, you caninitialize a new Client for each write_key.Development Settings--------------------The default initialization settings are production-ready and queuemessages to be processed by a background thread.In development you might want to enable some settings to make it easierto spot problems. Enabling amplitude.debug will log debugging info tothe Python logger. You can also add an on_error handler to specificallyprint out the response you’re seeing from the Amplitude’s API... code:: python   def on_error(error, items):       print(&quot;An error occurred:&quot;, error)   analytics.debug = True   analytics.on_error = on_errorTrack-----``track`` lets you record the actions your users perform. Every actiontriggers what we call an “event”, which can also have associatedproperties... code:: python   import amplitude_tracker as amplitude   amplitude.write_key = 'xxxxxxxxxxxxxxx'   amplitude.track(       user_id=&quot;xxx&quot;,       event_type=&quot;xxx&quot;,       user_properties={&quot;trait&quot;: &quot;xxx&quot;},       event_properties={&quot;attribute&quot;: &quot;xxx&quot;})Batching--------This library is built to support high performance environments. Thatmeans it is safe to use amplitude-tracker on a web server that’s servinghundreds of requests per second.Every call ``track`` method *does not* result in an HTTP request, but isqueued in memory instead. Messages are flushed in batch in thebackground, which allows for much faster operation.By default, this library will flush:-  every ``100`` messages (control with ``upload_size``)-  if ``0.5`` seconds has passed since the last flush (control with   ``upload_interval``)There is a maximum of ``500KB`` per batch request and ``32KB`` per call... _Amplitude: https://amplitude.com</longdescription>
</pkgmetadata>