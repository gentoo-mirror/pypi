<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CodeQL](https://github.com/fustom/python-ariston-api/actions/workflows/codeql.yml/badge.svg)](https://github.com/fustom/python-ariston-api/actions/workflows/codeql.yml) [![Upload Python Package](https://github.com/fustom/python-ariston-api/actions/workflows/python-publish.yml/badge.svg)](https://github.com/fustom/python-ariston-api/actions/workflows/python-publish.yml)# python-ariston-apiA Python module for controlling Ariston devices with cloud polling.The following devices are currently supported:- Ariston Alteas One 24- Ariston Velis Evo- Ariston Velis Lux- Ariston Lydos Hybrid- Ariston Genus One- Ariston Nuos Split## InstallationUse pip3 to install the latest version of this module.```pip3 install ariston```## The easy way (recommended for testing the module)First, open Python 3 and import ariston module.```python3``````python3import ariston```### SyncronousDiscover devices if you dont know your gateway id. You can skip this step.```python3raw_devices = ariston.discover(&quot;username&quot;, &quot;password&quot;)```For example the gateway id for your first device.```python3 raw_devices[0]['gw']```Get your device```python3device = ariston.hello(&quot;username&quot;, &quot;password&quot;, &quot;gateway&quot;, is_metric, &quot;location&quot;)```[Go use your device section](#use-your-device)### Asyncronous```python3raw_devices = await ariston.async_discover(&quot;username&quot;, &quot;password&quot;)device = await ariston.async_hello(&quot;username&quot;, &quot;password&quot;, &quot;gateway&quot;, is_metric, &quot;location&quot;)```[Go use your device section](#use-your-device)## The ariston class way (recommended for integrate the module)First, open Python 3 and import Ariston class from this module.```python3``````python3from ariston import Ariston```Create a new Ariston instance```python3ariston = Ariston()```Now let's try some functions### ConnectThe cloud requests are asynchronous, so if you call them from a synchronous function or not even from function, you should use asyncio.```python3import asyncio```Sync```python3asyncio.run(ariston.async_connect(&quot;username&quot;, &quot;password&quot;))```Async```python3await ariston.async_connect(&quot;username&quot;, &quot;password&quot;)```- username: Your ariston cloud username.- password: Your ariston cloud password.### DiscoveryUse this function to discover devices. You can skip this step if you already know the gateway id.Sync```python3devices = asyncio.run(ariston.async_discover())```Async```python3devices = await ariston.async_discover()```## Say helloUse this function to create the device object.Sync```python3device = asyncio.run(ariston.async_hello(&quot;gateway&quot;, is_metric, &quot;location&quot;))```Async```python3device = await ariston.async_hello(&quot;gateway&quot;, is_metric, &quot;location&quot;)```- gateway: You can find the value in the returned discover dictionary name 'gw'- is_metric: Optional. True or False. True means metric, False means imperial. Only works with Galevo (Alteas One, Genus One, etc) system. Default is True.- language_tag: Optional. Check https://en.wikipedia.org/wiki/IETF_language_tag Only works with Galevo (Alteas One, Genus One, etc) system. Default is &quot;en-US&quot;.## Use your device### Get device featuresSync```python3device.get_features()```Async```python3await device.async_get_features()```### Get device dataSync```python3device.update_state()```Async```python3await device.async_update_state()```### Get device energySync```python3device.update_energy()```Async```python3await device.async_update_energy()```</longdescription>
</pkgmetadata>