<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GYM CAS[![PyPI - Version](https://img.shields.io/pypi/v/gym-cas.svg)](https://pypi.org/project/gym-cas)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/gym-cas.svg)](https://pypi.org/project/gym-cas)![Coverage](https://img.shields.io/badge/Coverage-82%25-hsla(82%2C%20100%25%2C%2050%25%2C%201))Hjælpepakke til at bruge Python som CAS (Computational Algebra System) i gymnasiet.## Installation```consolepip install gym-cas```eller```consolepy -m pip install gym-cas```## CheatsheetI nedenstående afsnit antages det at `gym_cas` først importeres således:```pyfrom gym_cas import *```### B1. Tal- og bogstavregning```pyexpand( udtryk )factor( udtryk )```### B2. Ligninger og uligheder```pysolve( udtryk )solve( [udtryk1, udtryk2] )nsolve( udtryk, start )```Bemærk at den nemmeste måde at bruge `solve` i `SymPy` er ved at omforme sin ligning så en af siderne er lig 0. Hvis man fx vil løse ligningen `x/2 = 10` så kan det skrives `solve(x/2-10)`.### B3. Geometri og trigonometri```pySin( vinkel )Cos( vinkel )Tan( vinkel )aSin( forhold )aCos( forhold )aTan( forhold )```### B4. Analytisk plangeometri```pyplot_list( X_list ,Y_list, is_point=True)plot( funktion )plot_implicit( udtryk ,xlim=( x_min, x_max),ylim=( y_min, y_max))plot_geometry( Geometrisk objekt )```#### Flere grafer i en afbildning```pyp1 = plot( udtryk1 )p2 = plot( udtryk2 )p = p1 + p2p.show()```### B5. Vektorer```pya = Matrix([x,y])a.dot(b)plot_vector( vektor )plot_vector( start, vektor )plot_vector( [vektor1, vektor2, ...])```### B6. Deskriptiv Statistik#### Ugrupperet```pymax( data )min( data )mean( data )median( data )var( data, ddof )std( data, ddof ) kvartiler( data )percentile( data , procenter )frequency( data )boxplot( data ) plot_sum( data )```#### Grupperet```pygroup_mean( data, grupper )group_percentile( data, grupper, procenter )group_var( data, grupper, ddof )group_std( data, grupper, ddof ) frequency( data, grupper )boxplot( data, grupper ) plot_sum( data, grupper )plot_hist( data, grupper )```### B8. Funktioner```pydef f(x):    return funktionsudtrykf(3)def f(x):    return Piecewise(( funktion1, betingelse1), (funktion2, betingelse2))plot( funktion , yscale=&quot;log&quot;)plot( funktion , (variabel, start, stop), xscale=&quot;log&quot;, yscale=&quot;log&quot;)regression_poly(X,Y, grad)regression_power(X,Y)regression_exp(X,Y)```### B9. Differentialregning```pylimit( udtryk, variabel, grænse, retning )diff( funktion )def df(xi):    return diff( funktion ).subs( variabel, xi )```### B10. Integralregning```pyintegrate( udtryk )integrate( udtryk, ( variabel, start, slut ))```### A1. Vektorer i rummet```pya = Matrix([1,2,3])a.cross(b)plot3d_list( X, Y, is_point=True)plot_vector( a )plot3d_line( a + t * r )plot3d_plane( a + s * r1 + t * r2 )plot3d_implicit( ligning, backend=PB ) # Kræver Plotly eller K3D```### A4. Differentialligninger```pyf = Function('f')dsolve( ode )plot_ode( ode, f, (x, start, stop), (f, start, stop))```### A5. Diskret Matematik```pyX = [ udregning for x in range(start,slut)]X = [ startbetingelse ]for i in range(start, slut):    X.append( rekursionsligning )```</longdescription>
</pkgmetadata>