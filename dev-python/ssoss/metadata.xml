<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Safe Sightings of Signs and Signals (SSOSS)SSOSS is a software tool that automates the difficult aspects of verifying if traffic signs and signals are visible or obstructed on a roadway network. This is a streamlined and repeatable process to monitor signs and signals along any roadway using a simple input file (.CSV), GPS recorded data file (.GPX) and a synchronized recorded video file.## Features* Video Synchronization Helper Tools: Python methods are provided to export the video frames and help to synchronize the video file.* Automated data processing: The SSOSS scripts uses a combination of GPS and video data to extract images of traffic signals and/or roadway signs.* Image Labeling and animated GIF image tools: Python functions are included to label images or create an animated GIF from multiple images ## Requirements- Python 3.8- Required libraries: pandas, numpy, opencv-python, geopy, gpxpy, imageio, tqdm, lxml ## InstallationTo install SSOSS, follow these steps:    python3 -m pip install ssoss## UsageTo use the SSOSS program, 1. Setup the necessary input files in A and B. 2. Follow the data processing commands in Part C. Jupyter Notebook available as example### A. Input FilesData related to the static road objects (signs and traffic signals) need to be saved in a CSV file for used in processing.The intersection CSV file has the following format (as a minimum):ID, Streetname 1, Streetname 2, Center_Latitude, Center_Longitude, Posted Speed (MPH) of NB Approach, Posted Speed (MPH) of EB Approach, Posted Speed (MPH) of SB Approach, Posted Speed (MPH) of WB Approach, NB Approach Compass Heading, EB Approach Compass Heading,SB Approach Compass Heading, WB Approach Compass Heading### B. Data CollectionCollect data simultaneously:1. GPX recording   a. Use GPX Version 1.0 with logging every second2. Video Recording   a. Record at 5 Megapixel resolution or more   b. Record at 30 frames per second or higher### C. Data Processing: Argparse Command Line```Shell(ssoss_virtual_env) python ssoss_cli.py -h```#### Basic Usage```Shell(ssoss_virtual_env) python ssoss_cli.py --static_objects signals.csv --gpx_file drive.gpx --video_file vid.mov                                         --sync_frame 456 --sync_timestamp 2022-10-24T14:21:54.32Z```#### Python Notebook```python    import ssoss as sssignals_csv = &quot;signal&quot;  # .csv is omittedgpx_file = &quot;drive_1&quot;  # .gpx is omittedsignal_project = ProcessRoadObjects(signals_csv, gpx_file)sightings = signal_project.intersection_checks()vid_file = &quot;drive_1.MP4&quot;video = ss.ProcessVideo(vid_file)video.sync(200, &quot;2022-10-24T14:21:54.988Z&quot;)  # See Sync Process belowvideo.extract_sightings(sightings, signal_project)```At this point, progress bars should load while the images are saved to the output folder.#### Sync GPX &amp; Video ProcessSynchronizing the GPX file and the video could be one of the largest sources of error. The ProcessVideo Class hasa helper function to perform a accurate synchronization time. The extract_frames_between method can export all the video frames between two time vales. When looking at the GPX points, the approximate video time can be estimated and all the frames can be extracted. This method is:```Shell        (ssoss_virtual_env) python ssoss_cli.py -video_file vid.mov --frame_extract_start 4 --frame_extract_end 6```Check the printed logs to see the saved output location. Default is:./out/[video filename]/frames/###.jpgwhere ### is the frame number of the image.Use the frame number and the GPX recorded time to line up the best point to synchronize the video using the Sync method.## Documentation### Helper Function: GIF CreatorCreate a gif from multiple images around the sight distance location. This can be helpful if the lens is out of focusat an extracted frame, or just more context before and after a sight distance is needed.```python        video.extract_sightings(sightings, signal_project, gen_gif=True)```Saves .gif file in ./out/[video filename]/gif/### HeuristicFor Each GPX Point:* What are the closest &amp; approaching intersections  * Based on compass heading of moving vehicle and input data (.csv), which approach leg is vehicle on?    * What is the approach speed of that approach leg, and look up sight distance for that speed      * Is the current GPX point greater than that sight distance and the next point is less than the sight distance,        * If yes, then calculate acceleration between those two points and estimate the time the vehicle         traveled over the sight distance.        * If no, go to next GPX pointFrom the sight distance timestamp and synchronized video file, the frame is extracted that is closest to that time.## ContributionsContributions are welcome to the SSOSS project! If you have an idea for a new feature or have found a bug, please open an issue or submit a pull request.## LicenseThe SSOSS project is licensed under the MIT License. See LICENSE for more information.</longdescription>
</pkgmetadata>