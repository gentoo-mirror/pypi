<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**DISCLAIMER:** This is not an official Google product.# OpenHTFThe open-source hardware testing framework.[![Build Status](https://github.com/google/openhtf/actions/workflows/build_and_deploy.yml/badge.svg?branch=master)](https://github.com/google/openhtf/actions?branch=master)[![Coverage Status](https://coveralls.io/repos/google/openhtf/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/google/openhtf?branch=master)[![Percentage of issues still open](http://isitmaintained.com/badge/open/google/openhtf.svg)](http://isitmaintained.com/project/google/openhtf &quot;Percentage of issues still open&quot;)[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/google/openhtf.svg)](http://isitmaintained.com/project/google/openhtf &quot;Average time to resolve an issue&quot;)## OverviewOpenHTF is a Python library that provides a set of convenient abstractionsdesigned to remove as much boilerplate as possible from hardware test setup andexecution, so test engineers can focus primarily on test logic. It aspires todo so in a lightweight and minimalistic fashion. It is general enough to beuseful in a variety of hardware testing scenarios, from the lab bench to themanufacturing floor.## Installing OpenHTF**NOTE:** We recommend using [virtualenv](https://virtualenv.pypa.io) to createan isolated Python environments for your projects, so as to protect system-widePython packages the OS depends upon. The installation instructions assume you've_already_ created a virtualenv and activated it if you wish to do so.### Option 1: Installing via 'pip' (recommended)The most straightforward way to get the `openhtf` Python package into yourPython environment is simply to install it via[pip](https://pypi.python.org/pypi). This will install the most recentproduction release.```bashpip install openhtf```### Option 2: Installing from SourceIf you want to install from source instead (for example, if you want some newfeature that hasn't made it to the production release yet), you can download[the source code](https://github.com/google/openhtf) via[git](https://git-scm.com/) or other means, and install the `openhtf` packageinto your Python environment using the standard `setup.py` script.```bashpython setup.py install```## Using OpenHTFThe fastest way to get started is to take a look in the `examples/` directory,where you'll find sample test scripts and plugs. In addition, many of OpenHTF'smodules are fairly well documented inline through the use of docstrings.Note: some of the `examples/` require protocol buffer code to be generated via`python setup.py build` command.  This requires protocol buffer compilerlibrary to be installed([additional instructions](CONTRIBUTING.md#setting-up-your-dev-environment)).## NomenclatureOpenHTF uses certain nomenclature internally for several of its core concepts.Some of the more important terms are listed here for clarity.### DUT (Device Under Test)DUT refers to an individual piece of hardware being evaluated, exercised, ortested.### TestThe top-level abstraction that OpenHTF deals with is the test. A test is justa series of steps performed on/with a DUT, usually along with somedata-gathering or measurement steps. In the OpenHTF paradigm, tests areexpressed as regular Python programs (.py files) that import and instantiate the'Test' class from the openhtf module. That way test code is as straightforwardas possible to read and write. This also provides for the flexibility to doanything in a test that can normally be done in Python. Superficially, whatdistinguishes an OpenHTF test from any other Python program is that the OpenHTFtest imports the openhtf package, instantiates the ```Test``` class, and callsits ```Execute()``` function. From there, OpenHTF manages the setup, execution,and teardown of the test, keeps track of anything gathered, and provides apass/fail result.At times it may be necessary to disambiguate between different common readingsof the word _test_. In such scenarios we use the following more precise terms:    * **test run** - A single start-to-finish execution of a specific test.  * **test recipe** - A test definition that may be executed multiple times,    each time as a distinct test run.  * **test script** - A .py file that contains a test recipe.### Station_Stations_ capture the notion that a given test ran at some point and may runagain. It loosely reflects the idea of physical test stations that processmultiple DUTs over time. OpenHTF writes a breadcrumb to the filesystem (in adirectory that can be set using the `--rundir` flag) each time a test runs, andall tests that have the same name are considered to be of the same station. Thisway the web frontend can display a consolidated list of known tests as a list ofstations.### PhaseOpenHTF tests are broken down into logical blocks called _phases_. Phases are nomore than normal Python callables (usually functions) combined with the neededmetadata. Writing an OpenHTF test is just a matter of writing a bunch of phasefunctions and specifying the order in which they should be executed.### MeasurementOpenHTF gathers data about a DUT in the form of _measurements_. Usually,measurements are declared along with a specification that describes whatconstitutes a &quot;passing&quot; value. If OpenHTF finishes the test run and one or moremeasurements were out of that spec, the result of the whole test run will beconsidered a fail.### AttachmentSometimes may want to capture additional data that is more complex or free-formthan a measurement. An _attachment_ can link arbitrary binary data to atest record, along with an optional MIME type.### PlugThe essence of an OpenHTF test is to interact with a DUT to exercise it invarious ways and observe the result. Sometimes this is done by communicatingdirectly with the DUT, and other times it's done by communicating with a pieceof test equipment to which the DUT is attached in some way. A _plug_ is a pieceof code written to enable OpenHTF to interact with a particular type of hardware,whether that be a DUT itself or a piece of test equipment. OpenHTF comespackaged with a growing collection of useful plugs, but supports thecreation of custom plugs as well.</longdescription>
</pkgmetadata>