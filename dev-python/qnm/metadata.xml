<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![github](https://img.shields.io/badge/GitHub-qnm-blue.svg)](https://github.com/duetosymmetry/qnm)[![PyPI version](https://badge.fury.io/py/qnm.svg)](https://badge.fury.io/py/qnm)[![Conda Version](https://img.shields.io/conda/vn/conda-forge/qnm.svg)](https://anaconda.org/conda-forge/qnm)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2593978.svg)](https://zenodo.org/record/2593978)[![JOSS status](https://joss.theoj.org/papers/85532a74baaa67a24518de1365f1bcf5/status.svg)](https://joss.theoj.org/papers/85532a74baaa67a24518de1365f1bcf5)[![arXiv:1908.10377](https://img.shields.io/badge/arXiv-1908.10377-B31B1B.svg)](https://arxiv.org/abs/1908.10377)[![ascl:1910.022](https://img.shields.io/badge/ascl-1910.022-blue.svg?colorB=262255)](http://ascl.net/1910.022)[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/duetosymmetry/qnm/blob/master/LICENSE)[![Build Status](https://travis-ci.org/duetosymmetry/qnm.svg?branch=master)](https://travis-ci.org/duetosymmetry/qnm)[![Documentation Status](https://readthedocs.org/projects/qnm/badge/?version=latest)](https://qnm.readthedocs.io/en/latest/?badge=latest)# Welcome to qnm`qnm` is an open-source Python package for computing the Kerrquasinormal mode frequencies, angular separation constants, andspherical-spheroidal mixing coefficients. The `qnm` package includes aLeaver solver with the [Cook-Zalutskiy spectralapproach](https://arxiv.org/abs/1410.7698) to the angular sector, anda caching mechanism to avoid repeating calculations.With this python package, you can compute the QNMs labeled bydifferent (s,l,m,n), at a desired dimensionless spin parameter 0≤a&lt;1.The angular sector is treated as a spectral decomposition ofspin-weighted *spheroidal* harmonics into spin-weighted sphericalharmonics.  Therefore you get the spherical-spheroidal decompositioncoefficients for free when solving for ω and A ([see below fordetails](#spherical-spheroidal-decomposition)).We have precomputed a large cache of low-lying modes (s=-2 and s=-1,all l&lt;8, all n&lt;7). These can be automatically installed with a singlefunction call, and interpolated for good initial guesses forroot-finding at some value of a.## Installation### PyPI_**qnm**_ is available on [PyPI](https://pypi.org/project/qnm/):```shellpip install qnm```### Conda_**qnm**_ is available on [conda-forge](https://anaconda.org/conda-forge/qnm):```shellconda install -c conda-forge qnm```### From source```shellgit clone https://github.com/duetosymmetry/qnm.gitcd qnmpython setup.py install```If you do not have root permissions, replace the last step with`python setup.py install --user`.  Instead of using `setup.py`manually, you can also replace the last step with `pip install .` or`pip install --user .`.## DependenciesAll of these can be installed through pip or conda.* [numpy](https://docs.scipy.org/doc/numpy/user/install.html)* [scipy](https://www.scipy.org/install.html)* [numba](http://numba.pydata.org/numba-doc/latest/user/installing.html)* [tqdm](https://tqdm.github.io) (just for `qnm.download_data()` progress)* [pathlib2](https://pypi.org/project/pathlib2/) (backport of  `pathlib` to pre-3.4 python)## DocumentationAutomatically-generated API documentation is available on [Read the Docs: qnm](https://qnm.readthedocs.io/).## UsageThe highest-level interface is via `qnm.cached.KerrSeqCache`, whichloads cached *spin sequences* from disk. A spin sequence is just a modelabeled by (s,l,m,n), with the spin a ranging from a=0 to somemaximum, e.g. 0.9995. A large number of low-lying spin sequences havebeen precomputed and are available online. The first time you use thepackage, download the precomputed sequences:```pythonimport qnmqnm.download_data() # Only need to do this once# Trying to fetch https://duetosymmetry.com/files/qnm/data.tar.bz2# Trying to decompress file /&lt;something&gt;/qnm/data.tar.bz2# Data directory /&lt;something&gt;/qnm/data contains 860 pickle files```Then, use `qnm.modes_cache` to load a`qnm.spinsequence.KerrSpinSeq` of interest. If the mode is notavailable, it will try to compute it (see detailed documentation forhow to control that calculation).```pythongrav_220 = qnm.modes_cache(s=-2,l=2,m=2,n=0)omega, A, C = grav_220(a=0.68)print(omega)# (0.5239751042900845-0.08151262363119974j)```Calling a spin sequence `seq` with `seq(a)` will return the complexquasinormal mode frequency omega, the complex angular separationconstant A, and a vector C of coefficients for decomposing theassociated spin-weighted spheroidal harmonics as a sum ofspin-weighted spherical harmonics ([see below fordetails](#spherical-spheroidal-decomposition)).Visual inspections of modes are very useful to check if the solver isbehaving well. This is easily accomplished with matplotlib. Here aresome partial examples (for the full examples, see the file[`notebooks/examples.ipynb`](notebooks/examples.ipynb) in the source repo):```pythonimport numpy as npimport matplotlib as mplimport matplotlib.pyplot as plts, l, m = (-2, 2, 2)mode_list = [(s, l, m, n) for n in np.arange(0,7)]modes = { ind : qnm.modes_cache(*ind) for ind in mode_list }plt.subplot(1, 2, 1)for mode, seq in modes.items():    plt.plot(np.real(seq.omega),np.imag(seq.omega))plt.subplot(1, 2, 2)for mode, seq in modes.items():    plt.plot(np.real(seq.A),np.imag(seq.A))```Which results in the following figure (modulo formatting):![example_22n plot](notebooks/example_22n.png)```pythons, l, n = (-2, 2, 0)mode_list = [(s, l, m, n) for m in np.arange(-l,l+1)]modes = { ind : qnm.modes_cache(*ind) for ind in mode_list }plt.subplot(1, 2, 1)for mode, seq in modes.items():    plt.plot(np.real(seq.omega),np.imag(seq.omega))plt.subplot(1, 2, 2)for mode, seq in modes.items():    plt.plot(np.real(seq.A),np.imag(seq.A))```Which results in the following figure (modulo formatting):![example_2m0 plot](notebooks/example_2m0.png)## Precision and validationThe default tolerances for continued fractions, `cf_tol`, is 1e-10, andfor complex root-polishing, `tol`, is DBL_EPSILON≅1.5e-8.  These canbe changed at runtime so you can re-polish the cached values to higherprecision.[Greg Cook's precomputed datatables](https://zenodo.org/record/2650358) (which were computed witharbitrary-precision arithmetic) can be used for validating the resultsof this code.  See the comparison notebook[`notebooks/Comparison-against-Cook-data.ipynb`](notebooks/Comparison-against-Cook-data.ipynb)to see such a comparison, which can be modified to compare any of theavailable modes.## Spherical-spheroidal decompositionThe angular dependence of QNMs are naturally spin-weighted *spheroidal*harmonics.  The spheroidals are not actually a complete orthogonalbasis set.  Meanwhile spin-weighted *spherical* harmonics are completeand orthonormal, and are used much more commonly.  Therefore youtypically want to express a spheroidal (on the left hand side) interms of sphericals (on the right hand side),![equation `$${}_s Y_{\\ell m}(\\theta, \\phi; a\\omega) = {\\sum_{\\ell'=\\ell_{\\min} (s,m)}^{\\ell_\\max}} C_{\\ell' \\ell m}(a\\omega)\\ {}_s Y_{\\ell' m}(\\theta, \\phi) \\,.$$`](https://latex.codecogs.com/gif.latex?%7B%7D_s%20Y_%7B%5Cell%20m%7D%28%5Ctheta%2C%20%5Cphi%3B%20a%5Comega%29%20%3D%20%7B%5Csum_%7B%5Cell%27%3D%5Cell_%7B%5Cmin%7D%20%28s%2Cm%29%7D%5E%7B%5Cell_%5Cmax%7D%7D%20C_%7B%5Cell%27%20%5Cell%20m%7D%28a%5Comega%29%5C%20%7B%7D_s%20Y_%7B%5Cell%27%20m%7D%28%5Ctheta%2C%20%5Cphi%29%20%5C%2C.)Here ℓmin=max(|m|,|s|) and ℓmax can be chosen at run time.  The Ccoefficients are returned as a complex ndarray, with the zerothelement corresponding to ℓmin.To avoid indexing errors, you can get the ndarray of ℓ values bycalling `qnm.angular.ells`, e.g.```ells = qnm.angular.ells(s=-2, m=2, l_max=grav_220.l_max)```## ContributingContributions are welcome! There are at least two ways to contribute to this codebase:1. If you find a bug or want to suggest an enhancement, use the [issue tracker](https://github.com/duetosymmetry/qnm/issues) on GitHub. It's a good idea to look through past issues, too, to see if anybody has run into the same problem or made the same suggestion before.2. If you will write or edit the python code, we use the [fork and pull request](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) model.You are also allowed to make use of this code for other purposes, as detailed in the [MIT license](LICENSE). For any type of contribution, please follow the [code of conduct](CODE_OF_CONDUCT.md).## How to citeIf this package contributes to a project that leads to a publication,please acknowledge this by citing the `qnm` article in JOSS.  Thefollowing BibTeX entry is available in the `qnm.__bibtex__` string:```@article{Stein:2019mop,      author         = &quot;Stein, Leo C.&quot;,      title          = &quot;{qnm: A Python package for calculating Kerr quasinormal                        modes, separation constants, and spherical-spheroidal                        mixing coefficients}&quot;,      journal        = &quot;J. Open Source Softw.&quot;,      volume         = &quot;4&quot;,      year           = &quot;2019&quot;,      number         = &quot;42&quot;,      pages          = &quot;1683&quot;,      doi            = &quot;10.21105/joss.01683&quot;,      eprint         = &quot;1908.10377&quot;,      archivePrefix  = &quot;arXiv&quot;,      primaryClass   = &quot;gr-qc&quot;,      SLACcitation   = &quot;%%CITATION = ARXIV:1908.10377;%%&quot;}```## CreditsThe code is developed and maintained by [Leo C. Stein](https://duetosymmetry.com).</longdescription>
</pkgmetadata>