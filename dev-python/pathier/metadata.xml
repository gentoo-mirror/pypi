<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pathierExtends the standard library pathlib.Path class.## InstallationInstall with:&lt;pre&gt;pip install pathier&lt;/pre&gt;## UsageFunctions the same as pathlib.Path, but with added functions and some altered default arguments.&lt;br&gt;#### NavigationNew paths can be obtained by:&lt;br&gt;* naming the parent with moveup()* subtracting a number of levels from the current path* naming the parent of the path you actually want with move_under()* separating a relative path at a named parent with separate()* set current working directory to path&lt;pre&gt;&gt;&gt;&gt; from pathier import Pathier&gt;&gt;&gt; path = Pathier(&quot;C:/some/directory/to/some/file/on/the/system&quot;)&gt;&gt;&gt; path.moveup(&quot;directory&quot;)WindowsPath('C:/some/directory')&gt;&gt;&gt; path - 3WindowsPath('C:/some/directory/to/some/file')&gt;&gt;&gt; path.move_under(&quot;directory&quot;)WindowsPath('C:/some/directory/to')&gt;&gt;&gt; path.separate(&quot;file&quot;)WindowsPath('on/the/system')&gt;&gt;&gt; path.separate(&quot;file&quot;, True)WindowsPath('file/on/the/system')&gt;&gt;&gt; path.mkcwd()&gt;&gt;&gt; Pathier.cwd()WindowsPath('C:/some/directory/to/some/file/on/the/system')&lt;/pre&gt;#### Environment PATH VariablePathier objects can be added and removed from sys.path:&lt;br&gt;(The path will only be added if it isn't already in sys.path)&lt;pre&gt;&gt;&gt;&gt; from pathier import Pathier&gt;&gt;&gt; path = Pathier.cwd()&gt;&gt;&gt; path.in_PATHFalse&gt;&gt;&gt; path.add_to_PATH(0)&gt;&gt;&gt; path.in_PATHTrue&gt;&gt;&gt; path.remove_from_PATH()&gt;&gt;&gt; path.in_PATHFalse&gt;&gt;&gt; path.append_to_PATH()&gt;&gt;&gt; path.in_PATHTrue&lt;/pre&gt;#### Read and WriteCan dump and load toml and json files without needed to explicityly import and call functions from the respective libraries:&lt;pre&gt;from pathier import Pathierpath = Pathier(&quot;some_file.toml&quot;)content = path.loads()path.with_suffix(&quot;.json&quot;).dumps(content, indent=2)&lt;/pre&gt;`Pathier().mkdir()` creates parent directories and doesn't throw an error if the path already exists by default.&lt;br&gt;`Pathier().write_text()` and `Pathier().write_bytes()` will create parent directories by default if they won't exist.&lt;br&gt;`Pathier().write_text()` will also try to cast the data to be written to a string if a TypeError is thrown.&lt;br&gt;`Pathier().delete()` will delete a file or directory, event if that directory isn't empty.&lt;br&gt;`Pathier().copy()` will copy a file or a directory tree to a new destination and return a Pathier object for the new path&lt;br&gt;By default, files in the destination will not be overwritten.&lt;br&gt;`Pathier().backup()` will create a copy of the path with `_backup` appended to the stem.If the optional parameter, `timestamp`, is `True`, a datetime string will be added after `_backup` to prevent overwriting previous backup files.&lt;br&gt;`Pathier().replace()` takes a list of string pairs and will read the file the instance points to, replace the first of each pair with the second of each pair, and then write it back to the file.&lt;br&gt;Essentially just condenses reading the file, using str.replace(), and then writing the new content into one function call.&lt;br&gt;`Pathier().execute()` wraps calling `os.system()` on the path pointed to be the `Pathier` instance.&lt;br&gt;Optional strings that should come before and after the path string can be specified with the `command` and `args` params, respectively.&lt;br&gt;`Pathier(&quot;file.py&quot;).execute(&quot;py&quot;, &quot;--iterations 10&quot;)` is equivalent to `os.system(&quot;py file.py --iterations 10&quot;)`&lt;br&gt;`Pathier().append()` will append the given string to the file pointed at by the instance.&lt;br&gt;`Pathier().join(data)` is equivalent to calling `Pathier().write_text(&quot;\n&quot;.join(data))`.&lt;br&gt;The joining string can be specified with the `sep` parameter.&lt;br&gt;`Pathier().split()` is equivalent to calling `Pathier().read_text().splitlines()`.&lt;br&gt;Optionally, line endings can be kept with `Pathier().split(keepends=True)`.&lt;br&gt;#### Stats and Comparisons&lt;pre&gt;&gt;&gt;&gt; from pathier import Pathier&gt;&gt;&gt; p = Pathier.cwd() / &quot;pathier.py&quot;&gt;&gt;&gt; i = p.parent / &quot;__init__.py&quot;&gt;&gt;&gt; p.dobdatetime.datetime(2023, 3, 31, 18, 43, 12, 360000)&gt;&gt;&gt; p.age8846.024934&gt;&gt;&gt; p.mod_datedatetime.datetime(2023, 3, 31, 21, 7, 30)&gt;&gt;&gt; p.mod_delta207.488857&gt;&gt;&gt; p.size10744&gt;&gt;&gt; p.format_bytes(p.size)'10.74 kb'&gt;&gt;&gt; p.formatted_size'10.74 kb'&gt;&gt;&gt; p.is_larger(i)True&gt;&gt;&gt; p.is_older(i)False&gt;&gt;&gt; p.modified_more_recently(i)True&lt;/pre&gt;#### CLI ScriptsExecute `sizeup` from a terminal to get a grid of sub-directories and their sizes.&lt;pre&gt;P:\python\projects\pathier&gt;sizeupSizing up 7 directories...Scanning 'dist' [____________________________________________________________________________________________________________________________________________]-100.00%+---------------+-----------+| Dir           | Size      |+===============+===========+| docs          | 362.74 kb |+---------------+-----------+| tests         | 63.69 kb  |+---------------+-----------+| dist          | 61.78 kb  |+---------------+-----------+| src           | 50.91 kb  |+---------------+-----------+| .git          | 24.25 kb  |+---------------+-----------+| .pytest_cache | 540 bytes |+---------------+-----------+| .vscode       | 197 bytes |+---------------+-----------+Total size of 'P:\python\projects\pathier': 564.11 kbsizeup average execution time: 37ms 895us&lt;/pre&gt;</longdescription>
</pkgmetadata>