<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>mosestokenizer==============This package provides wrappers for some pre-processing Perl scripts from theMoses toolkit, namely, ``normalize-punctuation.perl``, ``tokenizer.perl``,``detokenizer.perl`` and ``split-sentences.perl``.Sample Usage------------All provided classes are importable from the package ``mosestokenizer``.    &gt;&gt;&gt; from mosestokenizer import *All classes have a constructor that takes a two-letter language code asargument (``'en'``, ``'fr'``, ``'de'``, etc) and the resulting objectsare callable.When created, these wrapper objects launch the corresponding Perl script as abackground process.  When the objects are no longer needed, you should call the``.close()`` method to close the background process and free system resources.The objects also support the context manager interface.Thus, if used within a ``with`` block, the ``.close()`` method is invokedautomatically when the block exits.The following two usages of ``MosesTokenizer`` are equivalent:    &gt;&gt;&gt; # here we will call .close() explicitly at the end:    &gt;&gt;&gt; tokenize = MosesTokenizer('en')    &gt;&gt;&gt; tokenize('Hello World!')    ['Hello', 'World', '!']    &gt;&gt;&gt; tokenize.close()    &gt;&gt;&gt; # here we take advantage of the context manager interface:    &gt;&gt;&gt; with MosesTokenizer('en') as tokenize:    &gt;&gt;&gt;     tokenize('Hello World!')    ...    ['Hello', 'World', '!']As shown above, ``MosesTokenizer`` callable objects take a string and return alist of tokens (strings).By contrast, ``MosesDetokenizer`` takes a list of tokens and returns a string:    &gt;&gt;&gt; with MosesDetokenizer('en') as detokenize:    &gt;&gt;&gt;     detokenize(['Hello', 'World', '!'])    ...    'Hello World!'``MosesSentenceSplitter`` does more than the name says.  Besides splittingsentences, it will also unwrap text, i.e. it will try to guess if a sentencecontinues in the next line or not.  It takes a list of lines (strings) andreturns a list of sentences (strings):    &gt;&gt;&gt; with MosesSentenceSplitter('en') as splitsents:    &gt;&gt;&gt;     splitsents([    ...         'Mr. Smith is away.  Do you want to',    ...         'leave a message?'    ...     ])    ...    ['Mr. Smith is away.', 'Do you want to leave a message?']``MosesPunctuationNormalizer`` objects take a string as argument and return astring:    &gt;&gt;&gt; with MosesPunctuationNormalizer('en') as normalize:    &gt;&gt;&gt;     normalize('«Hello World» — she said…')    ...    '&quot;Hello World&quot; - she said...'License-------Copyright ® 2016-2021, Luís Gomes &lt;luismsgomes@gmail.com&gt;.This library is free software; you can redistribute it and/ormodify it under the terms of the GNU Lesser General PublicLicense as published by the Free Software Foundation; eitherversion 2.1 of the License, or (at your option) any later version.This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNULesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with this library; if not, write to the Free SoftwareFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA02110-1301 USA</longdescription>
</pkgmetadata>