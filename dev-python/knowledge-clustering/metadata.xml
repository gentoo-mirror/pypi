<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># knowledge-clustering[![PyPI](https://img.shields.io/pypi/v/knowledge-clustering.svg)](https://pypi.python.org/pypi/knowledge-clustering)Clustering notions for the [knowledge LaTeX package](https://ctan.org/pkg/knowledge).Maintained by RÃ©mi Morvan, Thomas Colcombet and Aliaume Lopez.A tutorial on how to use `knowledge-clustering` can be found [here](https://github.com/remimorvan/knowledge-examples).## PrincipleThe goal of `knowledge-clustering` is to help the user write a LaTeX document withthe [knowledge package](https://ctan.org/pkg/knowledge).It has three features:  - **Clustering**: provide suggestions to the user of what notions should be grouped together.  - **Add quotes**: find where you might have missed some quotes in your document.  - **Anchor points**: find where you might have missed anchor points in your document.The **clustering** algorithm is meant to be used while writing your document, while the last two toolsshould be used when your document is (nearly) ready to be published, to check if everything is right.## InstallationTo install (or upgrade) `knowledge-clustering`, you need to have Python 3.9 (or a more recent version), and then run    pip3 install --upgrade knowledge-clusteringand then    knowledge init    To check if you have the latest version of `knowledge-clustering`, you can run    knowledge --version## Clustering notions ### Syntax```Usage: knowledge cluster [OPTIONS]  Defines, as a comment and in the knowledge files, all the knowledges  occuring in the file.Options:  -k, --knowledge FILE      File containing the knowledges that are already                            defined. Multiple files are allowed; new                            knowledges will be written in the last one.                            [required]  -d, --diagnose FILE       Diagnose file produced by LaTeX.  [required]  -l, --lang [en|fr]        Language of your TeX document.  -S, --scope / --no-scope  Print the scopes defined in the knowledge file and                            print the possible meaning of those scope inferred                            by knowledge-clustering.  -c, --config-file TEXT    Specify the configuration file. By default the                            configuration file in the folder                            &lt;knowledge-clustering-installation-folder&gt;/data corresponding                            to your language is used.  --help                    Show this message and exit.```### ExampleExample files can be found in the `examples/` folder.While writing some document, you have defined some knowledges in a file called `ordinal.kl` (distinctfrom your main `LaTeX`).You continued writing your `LaTeX` document (not provided in the `examples/` folder)for some time, and used some knowledges that were undefined.When compiling, `LaTeX` and the [`knowledge package`](https://ctan.org/pkg/knowledge) gives you a warningand writes in a `.diagnose` file some information explaining what went wrong. This `.diagnose` file containsa section called &quot;Undefined knowledges&quot; containing all knowledges used in your main `LaTeX` file but notdefined in `ordinal.kl`. We reproduced this sectionin the `ordinal.diagnose` file.![Screenshot of the `ordinal.kl` and `ordinal.diagnose` files before running knowledge-clustering. `ordinal.kl` contains four knowledges, while `ordinal.diagnose` contains five undefined knowledges.](img/small-before.png &quot;Files `ordinal.kl` and `ordinal.diagnose` before running knowledge-clustering&quot;)Normally, you would add every undefined knowledge, one after the other, in your`oridnal.kl`. This is quite burdensome and canlargely be automated. This is precisely what `knowledge-clustering` does: after running    knowledge cluster -k ordinal.kl -d ordinal.diagnoseyour file `ordinal.diagnose` is left unchangedbut `ordinal.kl` is updated with comments.The `cluster` command is optional: you can also write `knowledge -k ordinal.kl -d ordinal.diagnose`.![After running knowledge-clustering, the five undefined knowledges are included in the `ordinal.kl` file as comments.](img/small-after.png &quot;Files `ordinal.kl` and `ordinal.diagnose` after running knowledge-clustering`&quot;)Now you simply have to check that the recommendations of `knowledge-clustering` arecorrect, and uncomment those lines.### Multiple knowledge filesIf you have **multiple knowledge files**, you can use the `-k` option multiple times.For instance, you could write:knowledge cluster -k 1.kl -k 2.kl -d ordinal.diagnoseSynonyms of knowledges defined in `1.kl` (resp. `2.kl`) will be defined, as comments,in `1.kl` (resp. `2.kl`). New knowledges will always be added, as comments, to the lastfile, which is `2.kl` in the example.## Adding quotes```Usage: knowledge addquotes [OPTIONS]  Finds knowledges defined in the knowledge files that appear in tex file  without quote symbols. Proposes to add quotes around them.Options:  -t, --tex FILE        Your TeX file.  [required]  -k, --knowledge FILE  File containing the knowledges that are already                        defined. Multiple files are allowed; new knowledges                        will be written in the last one.  [required]  -p, --print INTEGER   When finding a match, number of lines (preceding the                        match) that are printed in the prompt to the user.  --help                Show this message and exit.```After running     knowledge addquotes -t mydocument.tex -k knowledges1.kl -k knowledges2.klyour prompt will propose to add quotes around defined knowledges,and to define synonyms of knowledges that occur in your TeX file. For instance, if&quot;algorithm&quot; is a defined knowledge and &quot;algorithms&quot; occurs in your TeX file, thenit will propose to you to define &quot;algorithms&quot; as a synonym of the knowledge &quot;algorithm&quot;,and to add a pair of quotes around the string &quot;algorithms&quot; that occurs in your TeX file.Whenever the algorithm finds a match for a knowledge, it will print the line ofthe document where it found the match, and emphasize the string corresponding to the knowledge.If you want to print more than one line, you can use the `-p` (or `--print`) optionto print more than one line.## Finding missing anchor points```Usage: knowledge anchor [OPTIONS]  Prints warning when a knowledge is introduced but is not preceded by an  anchor point.Options:  -t, --tex FILE       Your TeX file.  [required]  -s, --space INTEGER  Number of characters tolerated between an anchor point                       and the introduction of a knowledge. (Default value:                       150)  --help               Show this message and exit.```When one runs    knowledge anchor -t mydocument.texthe tool will print the lines of the document containing theintroduction of a knowledge that is not preceded by an anchor point.The tolerance on how far away the anchor point can be from theintroduction of a knowledge can be changed with the `-s` (or `--space`)option. The default value is 150 characters (corresponding to 2-3 lines in aTeX document).## Devel using virtualenvUsing `venv` and the `--editable` option from `pip3` allows for an easysetup of a development environment that will match a future user install withoutthe hassle.For bash and Zsh users```bashpython3 -m venv kl.venvsource ./kl.venv/bin/activatepip3 install --editable .```For fish users```fishpython3 -m venv kl.venvsource ./kl.venv/bin/activate.fishpip3 install --editable .```## FAQ- `knowledge: command not found` after installing `knowledge-clustering`  **Solution**: make sure you have Python&gt;=3.9.  - When running `knowledge`, I obtain a long message error indicating &quot;Resource punkt not found.&quot;  **Solution**: run `knowledge init`.- My shell doesn't autocomplete the command `knowledge`.  **Solution**: depending on whether you use `zsh` or `bash` write       eval &quot;`pip completion --&lt;shellname&gt;`&quot;  (where `&lt;shellname&gt;` is either `zsh` or `bash`)  in your `.zshrc` (or `.bashrc`) file and then,  either launch a new terminal or run `source ~/.zshrc`  (or `source ~/.bashrc`).- I've updated `knowledge-clustering` but I still don't have the last version (which can be checked using `knowledge --version`):  This can happen if you have multiple versions of `python` (and multiple versions  of `knowledge-clustering`).  **Solution**: Type `where python3`, and uninstall `knowledge-clustering`  from everywhere (using `&lt;path&gt;/python3 -m pip uninstall knowledge-clustering`)  except your main version of python. Try to then upgrade `knowledge-clustering`  by running `pip3 install --upgrade knowledge-clustering`.</longdescription>
</pkgmetadata>