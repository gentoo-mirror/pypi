<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## DEBUGPY-RUN[![PyPi](https://img.shields.io/pypi/v/debugpy-run)](https://pypi.org/project/debugpy-run/)[![AUR](https://img.shields.io/aur/version/debugpy-run)](https://aur.archlinux.org/packages/debugpy-run/)This utility facilitates debugging a [Python](https://www.python.org/)command line program using [Pythonextension](https://code.visualstudio.com/docs/languages/python) in[Visual Studio Code](https://code.visualstudio.com/).The [Pythondebugger](https://code.visualstudio.com/docs/python/debugging) in [VSCode](https://code.visualstudio.com/) is superb. However debugging acommand line program which takes arguments is a little awkward toinvoke. The [officialinstructions](https://code.visualstudio.com/docs/python/debugging#_initialize-configurations)require you to edit the command line arguments in your `launch.json`configuration which is cumbersome to do when you want to changearguments for each run, particularly because the [arguments have to bequoted within a JSON datastructure](https://code.visualstudio.com/docs/python/debugging#_args).This [question onstackoverflow](https://stackoverflow.com/questions/43704747/visual-studio-code-run-python-file-with-arguments)describes the problem, but there is no adequate solution. This utilityprovides a solution, follow the [procedure to useit](http:/#procedure-to-use) below.If you have the [VS Code Pythonextension](https://code.visualstudio.com/docs/languages/python)installed then the full[`debugpy`](https://github.com/microsoft/debugpy) debugger is alreadybundled with it. You open a terminal window and run this utility toinvoke your program with arguments. The utility finds the path where[`debugpy`](https://github.com/microsoft/debugpy) is installed and thenruns it for the program and arguments you specify, in listen mode.Connect to it from within [VS Code](https://code.visualstudio.com/)using the Python _Remote Attach_ debug configuration (using the defaulthost and port settings). You can `control+c` and then re-run the commandwith changed arguments using your shell history and command line editingfacilities, for each debug run. You can also run `debugpy-run` remotely,with `debugpy` explicitly installed for this case, to debug from [VSCode](https://code.visualstudio.com/) to a remote machine over anetwork.This utility was developed on Arch Linux but should work on all Linuxsystems where [VS Code](https://code.visualstudio.com/) is installedwith the [Pythonextension](https://code.visualstudio.com/docs/languages/python). Thelatest version and documentation is available athttps://github.com/bulletmark/debugpy-run.## InstallationArch users can install [debugpy-run from theAUR](https://aur.archlinux.org/packages/debugpy-run/).Python 3.6 or later is required. Also, the Python[packaging](https://pypi.org/project/packaging/) module is required.Note [debugpy-run is on PyPI](https://pypi.org/project/debugpy-run/) sojust ensure that `python3-pip` and `python3-wheel` are installed thentype the following to install (or upgrade):```$ sudo pip3 install -U debugpy-run```Or, to install from this source repository:```$ git clone http://github.com/bulletmark/debugpy-run$ cd debugpy-run$ sudo pip3 install -U .```## Procedure to Use1. Open [VS Code](https://code.visualstudio.com/) for the directory   where your command line program is located.2. Ensure you have added a [Debugging   Configuration](https://code.visualstudio.com/docs/python/debugging#_initialize-configurations)   in your `launch.json`. Specify _Remote Attach_ and just accept the   default arguments (i.e. host = `localhost`, port = `5678`). You only   have to do this once for each project.3. Open a terminal (either within [VS   Code](https://code.visualstudio.com/), or external) and type:       $ debugpy-run my-program -- --myargs   Now `debugpy-run` will start the `debugpy` debugger for your program,   output a message, and then wait to be connected by [VS   Code](https://code.visualstudio.com/).    :warning: As seen in the above example, you need to specify `--`    after your program/module name so that debugpy-run knows where it's    own options end, and the target options start.4. In [VS Code](https://code.visualstudio.com/), start debugging, e.g.   set a breakpoint then start the _Remote Attach_ debug session.5. At any point you can `control+c` the terminal command and restart it   with new command line arguments (e.g. using the convenience of your   shell history and editing commands) and then restart the debug   session in [VS Code](https://code.visualstudio.com/).## Remote Debugging On Another HostThe `debugpy-run` utility first looks to find the `debugpy` package inyour local `~/.vscode/extensions` directory. If it fails to find thatthen `debugpy-run` next tries to import `debugpy` globally. This is isdone so you can install both `debugpy-run` and `debugpy` on a remoteheadless server (e.g. where [VS Code](https://code.visualstudio.com/) isnot installed) and then debug a program on that server from [VSCode](https://code.visualstudio.com/) on your laptop/PC remotely overthe network.So for example, I may have a program which runs on a server which wantto debug from [VS Code](https://code.visualstudio.com/) on my laptop. Ifirst make sure I install the necessary software on the server (you canalso do this in the programs virtual environment of course):````$ sudo pip3 install -U debugpy$ sudo pip3 install -U debugpy-run````The start my program on the server using the debugger:````$ debugpy-run -p :5678 my-program -- --myargs````NOTE: We need to explicitly specify the `:port` for this case so thatthe port is opened on the external network interface so we can connectto it from another machine. By default, `debugpy-run`/`debugpy`otherwise only accept local connections.Then I go back to my laptop, ensure I have set up _Remote Attach_debugging configured with host = `my-server` and port = `5678`, then startdebugging.Of course, you could start `debugpy` directly yourself on the server butthe `debugpy-run` wrapper is more convenient to use and makes the usageconsistent with the familiar way you start `debugpy-run` on yourlaptop/PC.## Debugging A Program Running As RootAnother application of `debugpy-run` is that you can, as your normaluser, easily use [VS Code](https://code.visualstudio.com/) to debug aprogram you run as root. E.g. run a program using `sudo`:    $ sudo debugpy-run my-program -- --myargsNow you can just _Remote Attach_ to it in [VSCode](https://code.visualstudio.com/) as your normal user.## UsageType `debugpy-run -h` to view the usage summary:```usage: debugpy-run [-h] [--listen] [-W] [-C] [-p PORT] [-g] [-r]                      [--log-to PATH | --log-to-stderr]                      [-m MODULE | -c CODE | --pid PID | -V]                      [program] ...Finds the &quot;debugpy&quot; package within your VSCode Python extension and then runsit for &quot;remote attach&quot; debugging of the program/module you specify. If notfound in extensions then tries to run the globally installed &quot;debugpy&quot;.positional arguments:  program               python program to execute and debug  args                  remaining arguments to debugoptions:  -h, --help            show this help message and exit  --listen              listen on given port, default=True  -W, --no-wait         do not wait on listen for client, start immediately  -C, --connect         connect to given port rather than listen  -p PORT, --port PORT  [host:]port to use, default=5678  -g, --global-only     only run the globally installed debugpy  -r, --run-on-error    re-run program/module even on error  --log-to PATH         log to given path  --log-to-stderr       log to stderr  -m MODULE, --module MODULE                        python module to execute and debug  -c CODE, --code CODE  python code to execute and debug  --pid PID             python pid to attach and debug  -V, --version         output debugpy path and version```## LicenseCopyright (C) 2021 Mark Blakeney. This program is distributed under theterms of the GNU General Public License.This program is free software: you can redistribute it and/or modify itunder the terms of the GNU General Public License as published by theFree Software Foundation, either version 3 of the License, or any laterversion.This program is distributed in the hope that it will be useful, butWITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU GeneralPublic License at &lt;http://www.gnu.org/licenses/&gt; for more details.&lt;!-- vim: se ai syn=markdown: --&gt;</longdescription>
</pkgmetadata>