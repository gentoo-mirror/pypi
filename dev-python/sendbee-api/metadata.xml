<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sendbee Python API Client  ```                .' '.            __       .        .   .           (__\_        .         .         . -{{_(|8)          ' .  . ' ' .  . '     (__/```  [![PyPI version](https://badge.fury.io/py/sendbee-api.svg)](https://badge.fury.io/py/sendbee-api)[![Build Status](https://travis-ci.org/sendbee/sendbee-python-api-client.svg?branch=master)](https://travis-ci.org/sendbee/sendbee-python-api-client)![GitHub issues](https://img.shields.io/github/issues/sendbee/sendbee-python-api-client.svg)![GitHub closed issues](https://img.shields.io/github/issues-closed/sendbee/sendbee-python-api-client.svg)![GitHub closed pull requests](https://img.shields.io/github/issues-pr-closed/sendbee/sendbee-python-api-client.svg)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/sendbee-api.svg)![GitHub](https://img.shields.io/github/license/sendbee/sendbee-python-api-client.svg?color=blue)![GitHub last commit](https://img.shields.io/github/last-commit/sendbee/sendbee-python-api-client.svg?color=blue)## Table of contents  -   [Installation](#installation)  -   [Initialization](#initialization)    #### Contacts  -   [Fetch contacts](#fetch-contacts)  -   [Subscribe contact](#subscribe-contact)  -   [Update contact](#update-contact)  #### Contact Tags  -   [Fetch contact tags](#fetch-contact-tags)  -   [Create contact tag](#create-contact-tag)  -   [Update contact tag](#update-contact-tag)  -   [Delete contact tag](#delete-contact-tag)  #### Contact Fields  -   [Fetch contact fields](#fetch-contact-fields)  -   [Create contact field](#create-contact-field)  -   [Update contact field](#update-contact-field)  -   [Delete contact field](#delete-contact-field)  #### Conversations  -   [Fetch conversations](#fetch-conversations)-   [Fetch conversation messages](#fetch-conversation-mesages)-   [Fetch message templates](#fetch-message-templates)  -   [Send template message](#send-template-message)  -   [Send message](#send-message)#### Teams-   [Fetch teams](#fetch-teams)-   [Fetch team members](#fetch-team-members)#### Automation  -   [Managing chatbot (automated responses) status settings](#bot-on-off)  -   [Get chatbot (automated responses) status](#bot-status)  #### Mics  -   [Pagination](#pagination)-   [API Rate Limit](#api-rate-limit)-   [Raw response](#raw-response)-   [Exception handling](#exception-handling)  -   [Authenticate webhook request](#authenticate-webhook-request)  -   [Warnings](#warnings)  -   [Debugging](#debugging)  -   [Official Documentation](http://developer.sendbee.io)  ### &lt;a href='#installation'&gt;Installation&lt;/a&gt;```bash&gt; pip install sendbee-api```### &lt;a href='#initialization'&gt;Initialization&lt;/a&gt;```pythonfrom sendbee_api import SendbeeApiapi = SendbeeApi('__your_api_key_here__', '__your_secret_key_here__')```## Contacts### &lt;a href='#fetch-contacts'&gt;Fetch contacts&lt;/a&gt;```pythoncontacts = api.contacts(    [tags=['...', ...]], [status='subscribed|unsubscribed'],     [search_query='...'], [page=...], [limit=...])for contact in contacts:    contact.id    contact.status    contact.folder    contact.created_at        contact.name    contact.phone        for tag in contact.tags:        tag.id        tag.name        for note in contact.notes:        note.value        for contact_field in contact.contact_fields:        contact_field.key        contact_field.value```### &lt;a href='#subscribe-contact'&gt;Subscribe contact&lt;/a&gt;```pythoncontact = api.subscribe_contact(    phone='+...',    # this is mandatory the most important information    # about the subscribing contact        [tags=['...', ...]],     # tag new contact    # if tag doesn't exist, it will be created        [name='...'],         [notes=[...]],     # write notes about your new subscriber        [contact_fields={'__field_name__': '__field_value__', ...}],    # fill contact fields with your data (value part)    # contact fields must be pre-created in Sendbee Dashboard    # any non-existent field will be ignored         [block_notifications=[True|False]],    # prevent sending browser push notification and email     # notification to agents, when new contact subscribes    # (default is True)         [block_automation=[True|False]]    # prevent sending automated template messages to newly    # subscribed contact (if any is set in Sendbee Dashboard)     # (default is True) )contact.idcontact.statuscontact.foldercontact.created_atcontact.namecontact.phonefor tag in contact.tags:    tag.id    tag.namefor note in contact.notes:    note.valuefor contact_field in contact.contact_fields:    contact_field.key    contact_field.value```### &lt;a href='#update-contact'&gt;Update contact&lt;/a&gt;```pythoncontact = api.update_contact(    id='...',    # contact is identified with ID        [phone='+...'],    # this is the most important information     # about the subscribing contact        [tags=['...', ...]],     # tag new contact    # if tag doesn't exist, it will be created        [name='...'],        [notes=[...]],     # write notes about your new subscriber    # if there are notes already saved for this contact    # new notes will be appended        [contact_fields={'__field_name__': '__field_value__', ...}],    # fill contact fields with your data (value part)    # contact fields must be pre-created in Sendbee Dashboard    # any non-existent field will be ignored     # if there are fields already filled with data for this contact    # it will be overwritten with new data )contact.idcontact.statuscontact.foldercontact.created_atcontact.namecontact.phonefor tag in contact.tags:    tag.id    tag.namefor note in contact.notes:    note.valuefor contact_field in contact.contact_fields:    contact_field.key    contact_field.value```## Contact tags### &lt;a href='#fetch-contact-tags'&gt;Fetch contact tags&lt;/a&gt;```pythontags = api.tags([name='...'], [page=...], [limit=...])for tag in tags:    tag.id    tag.name```### &lt;a href='#create-contact-tag'&gt;Create contact tag&lt;/a&gt;```pythontag = api.create_tag(name='...')tag.idtag.name```### &lt;a href='#update-contact-tag'&gt;Update contact tag&lt;/a&gt;```pythontag = api.update_tag(id='...', name='...')tag.idtag.name```### &lt;a href='#delete-contact-tag'&gt;Delete contact tag&lt;/a&gt;```pythonresponse = api.delete_tag(id='...')response.message```## Contact fields### &lt;a href='#fetch-contact-fields'&gt;Fetch contact fields&lt;/a&gt;```pythoncontact_fields = api.contact_fields([search_query='...'], [page=...], [limit=...])for contact_field in contact_fields:    contact_field.name    contact_field.type        if contact_field.type == 'list':        contact_field.options```### &lt;a href='#create-contact-field'&gt;Create contact field&lt;/a&gt;If a contact field type is a list, then you need to send a list options.  List options is a list of option names: `['option1', 'option2', ...]`  ```pythoncontact_field = api.create_contact_field(    name='...', type='text|number|list|date|boolean',    [options=['...'. ...]] # if contact field type is list)contact_field.idcontact_field.namecontact_field.typeif contact_field.type == 'list':    contact_field.options```### &lt;a href='#update-contact-field'&gt;Update contact field&lt;/a&gt;If a contact field type is a list, then you need to send a list options.  List options is a list of option names: `['option1', 'option2', ...]`  ```pythoncontact_field = api.update_contact_field(    id='...', [name='...'], [type='text|number|list|date|boolean'],    [options=['...'. ...]] # if contact field type is list)contact_field.idcontact_field.namecontact_field.typeif contact_field.type == 'list':    contact_field.options```### &lt;a href='#delete-contact-field'&gt;Delete contact field&lt;/a&gt;```pythonresponse = api.delete_contact_field(id='...')response.message```## Conversations### &lt;a href='#fetch-conversations'&gt;Fetch conversations&lt;/a&gt;```pythonconversations = api.conversations(    [folder='open|done|spam|notified'], [search_query='...'],     [page=...], [limit=...], [date_from=__timestamp__], [date_to=__timestamp__])for conversation in conversations:    conversation.id    conversation.folder    conversation.chatbot_active    conversation.platform    conversation.created_at        conversation.contact.id    conversation.contact.name    conversation.contact.phone        conversation.last_message.direction    conversation.last_message.status    conversation.last_message.inbound_sent_at    conversation.last_message.outbound_sent_at```### &lt;a href='#fetch-conversation-messages'&gt;Fetch conversation messages&lt;/a&gt;```pythonmessages = api.messages(conversation_id='...', [page=...])for message in messages:    message.body    message.media_type    message.media_url    message.status    message.direction    message.sent_at```### &lt;a href='#fetch-message-templates'&gt;Fetch message templates&lt;/a&gt;Message templates must first be sent for approval.  Therefor every message template could have following status: `pending`, `approved`, `rejected`  If message template comms with `rejected` status, it also comes with `rejected_reason`.  ```pythontemplates = api.message_templates(    [status=&quot;pending|approved|rejected&quot;], [search_query='...'],      [page=...], [limit=...])for template in templates:    template.id    template.text    template.buttons # available for all Sendbee users onboarded after 11th of December 2020    template.button_tags # available for all Sendbee users onboarded after 11th of December 2020    template.tags    template.keyword    template.language    template.status    template.rejected_reason```### &lt;a href='#send-template-message'&gt;Send template message&lt;/a&gt;Message template can be purely textual or textual with attachment.  If it is with attachment, that means you can send image, video or document URL together with text.  When you get a list of message templates, every template in that list has `attachment` field with it's value.  Attachment field value defines which type of attachment can be sent with message template:  Value | Description--------- | -------image | Message template can be sent with image URL: JPG/JPEG, PNGvideo | Message template can be sent with video URL: MP4, 3GPPdocument | Message template can be sent with document URL: PDF, DOC, DOCX, PPT, PPTX, XLS, XLSXnull | Message template does not support attachment URL```pythonresponse = api.send_template_message(    phone='+...',        template_keyword='...',    # every pre-created and approved message template    # is identified with a keyword        language='...',     # language keyword    # example: en (for english)        tags={'__tag_key__': '__tag_value__', ...},    # tags for template messages are parts of the message that need    # to be filled with your custom data    # example:    # template message: &quot;Welcome {{1}}! How can we help you?&quot;    # tags: {&quot;1&quot;: &quot;John&quot;}    # Learn more: https://developer.sendbee.io/#send-message-template            button_tags={'__tag_key__': '__tag_value__', ...}    # tags for call-to-action button with dynamic URL suffix that need    # to be filled with your custom data    # example:    # template message: https://example.com/{{1}}    # tags: {&quot;1&quot;: &quot;page/123&quot;}        [prevent_bot_off=True|False],    # if set to True, will prevent turning-off chatbot for the conversation    # default system behaviour is that chatbot is turned-off        [attachment='http...'])response.statusresponse.conversation_idresponse.message_id# save this id, and when you get sent message status requests on# your webhook, you'll get this same id to identify the conversation```### &lt;a href='#send-message'&gt;Send message&lt;/a&gt;You can send either text message or media message.  For media message, following formats are supported:  Category | Formats-------- | -------Audio | AAC, M4A, AMR, MP3, OGG OPUSVideo | MP4, 3GPPImage | JPG/JPEG, PNGDocument | PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX  ```pythonresponse = api.send_message(    phone='+...',        [text='...'],    # any kind of message text        [media_url='...'],    # URL to a media.     # you need to upload it your self and send us the URL        [prevent_bot_off=True|False]    # if set to True, will prevent turning-off chatbot for the conversation    # default system behaviour is that chatbot is turned-off)response.statusresponse.conversation_idresponse.message_id# save this id, and when you get sent message status requests on# your webhook, you'll get this same id to identify the conversation```## Teams### &lt;a href='#fetch-teams'&gt;Fetch teams&lt;/a&gt;```pythonteams = api.teams([member_id='...'])for team in teams:    team.id    team.name    for member in team.members:        member.id        member.name        member.role        member.online        member.available```### &lt;a href='#fetch-team-members'&gt;Fetch team members&lt;/a&gt;```pythonmembers = api.members([team_id='...'])for member in members:    member.id    member.name    member.role    member.online    member.available    for team in member.teams:        team.id        team.name```## Automation### &lt;a href='#bot-on-off'&gt;Managing chatbot (automated responses) status settings&lt;/a&gt;Every contact is linked to a conversation with an agent.  Conversation could be handled by an agent or a chatbot (automated responses).  Every time a message has been sent to a contact by an agent or using the API, the chatbot will automatically be turned off for that conversation - except when you set 'prevent_bot_off' to true via API call (see [Send message](#send-message)).  Use the example below to change the chatbot status based on your use case.    ```pythonapi.chatbot_activity(conversation_id='...', active=True|False)```### &lt;a href='#bot-status'&gt;Get chatbot (automated responses) status&lt;/a&gt;You can also check if chatbot is turned on or off for a conversation.    ```pythonresponse = api.chatbot_activity_status(conversation_id='...')response.conversation_idresponse.chatbot_active # True/False```## Misc  ### &lt;a href='#pagination'&gt;Pagination&lt;/a&gt;You can paginate on every endpoint/method where a list of something is fetching.  Wherever you see `[page=...]` it means you can paginate like `page=2`, `page=3`, etc. The best way to do that is to use `.next_page()` method.  There are two ways to detect that pagination ended, using `PaginationException` and using `.has_next()` method.&gt; Paginate using .next_page() and PaginationException:   ```pythonfrom sendbee_api import PaginationExceptionmessages = api.messages(conversation_id='...') # first pagewhile True:    try:        messages = api.messages(            conversation_id='...', page=messages.next_page()        )    except PaginationException as e:        break```  &gt; Paginate using .next_page() and .has_next() methods:   ```pythonmessages = api.messages(conversation_id='...') # first pagewhile True:    if not messages.has_next():        break    messages = api.messages(        conversation_id='...', page=messages.next_page()    )```  ### &lt;a href='#api-rate-limit'&gt;API Rate Limit&lt;/a&gt;  A rate limit is the number of API calls a business number can make within a given time period. If this limit is exceeded, API requests are throttled, and will fail with 429 error response.  No matter how many API keys you make in your Sendbee account, rate limit will always be counted within a business number.  ```pythonfrom sendbee_api import SendbeeRequestApiExceptiontry:    api.rate_limit_request_test()except SendbeeRequestApiException as ex:    retry_after = ex.response.headers.get('Retry-After')```### &lt;a href='#raw-response'&gt;Raw response&lt;/a&gt;If you prefer to deal with the raw server response, response string is available under raw_data```pythonfrom sendbee_api import SendbeeApiapi = SendbeeApi('__your_api_key_here__', '__your_secret_key_here__')response = api.contacts()print(response.raw_data)```### &lt;a href='#exception-handling'&gt;Exception handling&lt;/a&gt;Every time something is not as it should be, like parameter is missing, parameter value is invalid, authentication fails, etc, API returns a http status code accordingly and an error message.  By using this client library, an error message is detected and taken, and an exception is raised, so you can handle it like this:  ```pythonfrom sendbee_api import SendbeeRequestApiExceptiontry:    api.send_template_message(...)except SendbeeRequestApiException as e:    # handle exception```    ### &lt;a href='#authenticate-webhook-request'&gt;Authenticate webhook request&lt;/a&gt;After activating your webhook URL in Sendbee Dashboard, we will start sending requests on that URL depending on which webhook type is linked with that webhook URL.  Every request that we make will have authorization token in header, like this:  ```{    ...    'X-Authorization': '__auth_token_here__',    ...}```To authenticate requests that we make to your webhook URL, take this token from request header and check it using Sendbee API Client:  ```pythonfrom sendbee_api import SendbeeApiapi = SendbeeApi('__your_api_key_here__', '__your_secret_key_here__')token = '...'  # taken from the request headerif not api.auth.check_auth_token(token):    # error! authentication failed!```  ### &lt;a href='#warnings'&gt;Warnings&lt;/a&gt;Sometimes APi returns a worning so you could be warned about something.  The waning is displayed in standard output:  ![Debugging](docs/images/warning.png)  ### &lt;a href='#debugging'&gt;Debugging&lt;/a&gt;This library has it's own internal debugging tool.  By default it is disabled, and to enable it, pass the `debug` parameter:  ```pythonfrom sendbee_api import SendbeeApiapi = SendbeeApi(    '__your_api_key_here__', '__your_secret_key_here__', debug=True)```  Once you enabled the internal debug tool, every request to API will output various request and response data in standard output:  ![Debugging](docs/images/debugging.png)   </longdescription>
</pkgmetadata>