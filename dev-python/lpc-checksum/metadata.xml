<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># lpc_checksumPython script to calculate LPC firmware checksums, based on the C version byRoel Verdult. It can be used as a standalone application, or as a Python modulethat integrates directly in a build environment (e.g. SCons). It does not needto be compiled.[![Linting](https://github.com/basilfx/lpc_checksum/actions/workflows/lint.yml/badge.svg)](https://github.com/basilfx/lpc_checksum/actions/workflows/lint.yml)[![Testing](https://github.com/basilfx/lpc_checksum/actions/workflows/test.yml/badge.svg)](https://github.com/basilfx/lpc_checksum/actions/workflows/test.yml)[![PyPI version](https://badge.fury.io/py/lpc-checksum.svg)](https://badge.fury.io/py/lpc-checksum)## RequirementsThe only requirement is Python 3.9 or newer.## InstallationThis module can be installed from Pypi via `pip install lpc_checksum`.Alternatively, you can install the latest version by cloning this repositoryand run `python setup.py install`.## UsageThere are two ways of using `lpc_checksum`.### StandaloneWhen installed via Pip or from source, the command `lpc_checksum` should beavailable on your PATH. By default, it assumes the input file is a binary file.`lpc_checksum &lt;firmware.bin|hex&gt; [--format=bin] [--read-only]`Program exits with a non-zero error code when it failed.### As a module```import lpc_checksumchecksum = lpc_checksum.checksum(input_file, [read_only=True])```On error, an exception will be raised.## TestsTo run the tests, please clone this repository and run `poetry run pytest`.## ContributingSee the [`CONTRIBUTING.md`](CONTRIBUTING.md) file.## LicenseSee the [`LICENSE.md`](LICENSE.md) file (MIT license).</longdescription>
</pkgmetadata>