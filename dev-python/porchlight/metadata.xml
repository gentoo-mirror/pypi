<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;docs/source/porchlight_logo.gif&quot; width=&quot;200&quot; height=&quot;200&quot; alt=&quot;porchlight logo. A snake's head erupts from the bottom of a Victorian-style porchlight casing, reaching towards a spinning triangular pyramid. The pyramid radiates bright, saturated, multicolored light.&quot; style=&quot;float:left&quot; /&gt;[porchlight](https://porchlight.readthedocs.io/en/latest/)==========`porchlight` is a function management suite that handles shared inputs andoutputs of methods and/or functions which evolve over the lifetime of a program.This package's original intent was to be a part of a modular scientific packageyet to be released. Rather than isolating this method to a single model, thealready-developed work has been modified to stand alone as a package.`porchlight` does not have any dependencies outside of the standard CPythonlibrary. Please note that `porchlight` requires Python 3.9\+, and that examplesmay require external libraries such as `numpy` and `matplotlib`.Installation------------You can install `porchlight` using `pip`:```consolepip install porchlight```Usage-----The main object used in `porchlight` is the `porchlight.Neighborhood` object.This groups all functions together and keeps track of call order andparameters.```pythonimport porchlight# To add a function, we simply define it and pass it to porchlight.def increase_x(x: int, y: int) -&gt; int:    x = x * y    return x# Type annotations are optional, as with normal python.def string_x(x):    x_string = f&quot;{x = }&quot;    return x_stringdef increment_y(y=0):    y = y + 1    return y# Generating a complete, coupled model between these functions is as simple as# adding all these functions to a Neighborhood object.neighborhood = Neighborhood([increment_y, increase_x, string_x])# The neighborhood object inspects the function, finding input and output# variables if present. These are added to the collections of functions and# parameters.print(neighborhood)# We initialize any variables we need to (in this case, just x), and then# executing the model is a single method call.neighborhood.set_param('x', 2)neighborhood.run_step()# Print out information.for name, param in neighborhood.params.items():    print(f&quot;{name} = {param}&quot;)```Documentation-----------Documentation for `porchlight` can be found on Read the Docs here: https://porchlight.readthedocs.io/en/latest/Other info----------+ You can find slides from presentations about porchlight within the `docs` folder, under [`docs/slides`](https://github.com/teald/porchlight/tree/main/docs/slides).</longdescription>
</pkgmetadata>