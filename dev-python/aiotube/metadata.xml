<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Release|.. |Release| image:: https://github.com/jnsougata/aiotube/actions/workflows/publish.yml/badge.svg   :target: https://github.com/jnsougata/aiotube/actions/workflows/publish.ymlaiotube==========A library to access YouTube Public Data without YouTubeAPI- `Discord &lt;https://discord.gg/YAFGAaMrTC&gt;`_- `GitHub &lt;https://github.com/jnsougata/AioTube&gt;`_- `REST API (BETA) &lt;https://aiotube.deta.dev/&gt;`_Table of Contents=================- `Installation &lt;#installing&gt;`_- `Building &lt;#build-from-source&gt;`_- `Quick Start &lt;#quick-start&gt;`_- `Usage &lt;#usage&gt;`_- `Channel &lt;#channel&gt;`_- `Video &lt;#video&gt;`_- `Playlist &lt;#playlist&gt;`_Installing----------**Python 3.6 or higher is required**.. code:: sh    # Linux/macOS    python3 -m pip install -U aiotube.. code:: sh    # Windows    python -m pip install -U aiotubeBuild from source-----------------.. code:: sh    pip install git+https://github.com/jnsougata/aiotubeQuick Start--------------.. code:: py    import aiotube    channel = aiotube.Channel('UCU9FEimjiOV3zN_5kujbCMQ')    print(channel.metadata)  # channel metadata in dict format    video = aiotube.Video('WVDT4lSozHk')    print(video.metadata)  # video metadata in dict format    playlist = aiotube.Playlist('PL-xXQjd8X_Q-xXQjd8X_Q-xXQjd8X_Q-')    print(playlist.metadata)  # playlist metadata in dict format    search = aiotube.Search.video('YouTube Rewind 2018')    print(search.metadata)  # searched video metadata in dict format    search = aiotube.Search.channel('PewDiePie')    print(search.metadata)  # searched channel metadata in dict format    search = aiotube.Search.playlist('Unlock Your Third Eye')    print(search.metadata)  # searched playlist metadata in dict formatUsage------Channel~~~~~~~.. csv-table::   :header: &quot;Method&quot;, &quot;Return Type&quot;, &quot;Description&quot;   :widths: 80, 80, 100   &quot;live()&quot;, &quot;bool&quot;, &quot;Returns True if the channel is live&quot;   &quot;streaming_now()&quot;, &quot;Video&quot;, &quot;Returns the video the channel is streaming now&quot;   &quot;current_streams()&quot;, &quot;List[str]&quot;, &quot;Returns a list of ids of currently streaming videos&quot;   &quot;old_streams()&quot;, &quot;List[str]&quot;, &quot;Returns a list of ids of previously streaming videos&quot;   &quot;video_count()&quot;, &quot;int&quot;, &quot;Returns the number of videos uploaded by the channel&quot;   &quot;upcoming()&quot;, &quot;Video&quot;, &quot;Returns a video object of the upcoming video&quot;   &quot;upcomings()&quot;, &quot;List[str]&quot;, &quot;Returns a list of ids of upcoming videos&quot;   &quot;playlists()&quot;, &quot;List[str]&quot;, &quot;Returns a Playlist object&quot;   &quot;uploads(limit: int)&quot;, &quot;List[str]&quot;, &quot;Returns a list of video ids of the uploaded videos&quot;   &quot;last_uploaded()&quot;, &quot;Video&quot;, &quot;Video object of the most recently uploaded video&quot;   &quot;last_streamed()&quot;, &quot;Video&quot;, &quot;Video object of the most recently streamed video&quot;.. csv-table::   :header: &quot;Properties&quot;, &quot;Return Types&quot;, &quot;Description&quot;   :widths: 80, 80, 100   &quot;metadata&quot;, &quot;dict&quot;, &quot;Returns the metadata of the channel in dict format&quot;Video~~~~~.. csv-table::   :header: &quot;Properties&quot;, &quot;Return Types&quot;, &quot;Description&quot;   :widths: 80, 80, 100   &quot;metadata&quot;, &quot;Dict[str, Any]&quot;, &quot;dictionary of video metadata&quot;Playlist~~~~~~~~.. csv-table::   :header: &quot;Property&quot;, &quot;Return Type&quot;, &quot;Description&quot;   :widths: 80, 80, 100    &quot;metadata&quot;, &quot;Dict[str, Any]&quot;, &quot;dictionary of playlist metadata&quot;Search~~~~~~~~.. csv-table::   :header: &quot;Methods&quot;, &quot;Return Types&quot;, &quot;Description&quot;   :widths: 80, 80, 100   &quot;channel(name: str)&quot;, &quot;Channel&quot;, &quot;Channel object of the channel with the given keywords&quot;   &quot;video(name: str)&quot;, &quot;Video&quot;, &quot;Video object of the video with the given keywords&quot;   &quot;playlist(name: str)&quot;, &quot;Playlist&quot;, &quot;Playlist object of the playlist with the given keywords&quot;   &quot;channels(name: str, limit: int)&quot;, &quot;List[str]&quot;, &quot;list of channel ids of the channels found with the given keywords&quot;   &quot;videos(name: str, limit: int)&quot;, &quot;List[str]&quot;, &quot;list of video ids of the videos found with the given keywords&quot;   &quot;playlists(name: str, limit: int)&quot;, &quot;List[str]&quot;, &quot;list of playlist ids of the playlists found with the given keywords&quot;</longdescription>
</pkgmetadata>