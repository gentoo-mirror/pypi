<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Better Choices[![PyPI](https://img.shields.io/pypi/v/django-better-choices)](https://pypi.org/project/django-better-choices)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-better-choices)[![Build Status](https://img.shields.io/github/workflow/status/lokhman/django-better-choices/CI/master)](https://github.com/lokhman/django-better-choices/actions?query=workflow%3ACI)[![codecov](https://codecov.io/gh/lokhman/django-better-choices/branch/master/graph/badge.svg)](https://codecov.io/gh/lokhman/django-better-choices)[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)Better [choices](https://docs.djangoproject.com/en/3.0/ref/models/fields/#choices) library for Django web framework.## RequirementsThis library was written for Python 3.7+ and will not work in any earlier versions.## Install    pip install django-better-choices## UsageTo start defining better choices, you need first to import the `Choices` class.```pythonfrom django_better_choices import Choices```### Class definitionThe choices can be defined with overriding `Choices` class.```pythonclass PageStatus(Choices):    CREATED = &quot;Created&quot;    PENDING = Choices.Value(&quot;Pending&quot;, help_text=&quot;This set status to pending&quot;)    ON_HOLD = Choices.Value(&quot;On Hold&quot;, value=&quot;custom_on_hold&quot;)    VALID = Choices.Subset(&quot;CREATED&quot;, &quot;ON_HOLD&quot;)    INVISIBLE = Choices.Subset(&quot;PENDING&quot;, &quot;ON_HOLD&quot;)    class InternalStatus(Choices):        REVIEW = _(&quot;On Review&quot;)    @classmethod    def get_help_text(cls):        return tuple(            value.help_text            for value in cls.values()            if hasattr(value, &quot;help_text&quot;)        )```&gt; Choices class key can be any *public* identifier (i.e. not starting with underscore `_`).&gt; Overridden choices classes cannot be initialised to obtain a new instance, calling the instance will return a tuple of choice entries.### Inline definitionAlternatively, the choices can be defined dynamically by creating a new `Choices` instance.```pythonPageStatus = Choices(&quot;PageStatus&quot;, SUCCESS=&quot;Success&quot;, FAIL=&quot;Error&quot;, VALID=Choices.Subset(&quot;SUCCESS&quot;))```&gt; The first `name` parameter of `Choices` constructor is optional and required only for better representation of the returned instance.### Value accessorsYou can access choices values using dot notation and with `getattr()`.```pythonvalue_created = PageStatus.CREATEDvalue_review = PageStatus.InternalStatus.REVIEWvalue_on_hold = getattr(PageStatus, &quot;ON_HOLD&quot;)```### Values and value parameters`Choices.Value` can hold any `typing.Hashable` value and once compiled equals to this value. In addition to `display` parameter, other optional parameters can be specified in `Choices.Value` constructor (see class definition example).```pythonprint( PageStatus.CREATED )                # 'created'print( PageStatus.ON_HOLD )                # 'custom_on_hold'print( PageStatus.PENDING.display )        # 'Pending'print( PageStatus.PENDING.help_text )      # 'This set status to pending'PageStatus.ON_HOLD == &quot;custom_on_hold&quot;     # TruePageStatus.CREATED == PageStatus.CREATED   # Trueclass Rating(Choices):    VERY_POOR = Choices.Value(&quot;Very poor&quot;, value=1)    POOR = Choices.Value(&quot;Poor&quot;, value=2)    OKAY = Choices.Value(&quot;Okay&quot;, value=3, alt=&quot;Not great, not terrible&quot;)    GOOD = Choices.Value(&quot;Good&quot;, value=4)    VERY_GOOD = Choices.Value(&quot;Very good&quot;, value=5)print( Rating.VERY_GOOD )                  # 5print( Rating.OKAY.alt )                   # 'Not great, not terrible'print( {4: &quot;Alright&quot;}[Rating.GOOD] )       # 'Alright'```&gt; Instance of `Choices.Value` class cannot be modified after initialisation. All native non-magic methods can be overridden in `Choices.Value` custom parameters.### Search in choicesSearch in choices is performed by value.```python&quot;created&quot; in PageStatus                    # True&quot;custom_on_hold&quot; in PageStatus             # True&quot;on_hold&quot; in PageStatus                    # Falsevalue = PageStatus[&quot;custom_on_hold&quot;]       # ValueType('custom_on_hold')value = PageStatus.get(&quot;on_hold&quot;, 123.45)  # 123.45key = PageStatus.get_key(&quot;created&quot;)        # 'CREATED'```### Search in subsetsSubsets are used to group several values together (see class definition example) and search by a specific value.```python&quot;custom_on_hold&quot; in PageStatus.VALID       # TruePageStatus.CREATED in PageStatus.VALID     # True```&gt; `Choices.Subset` is a subclass of `tuple`, which is compiled to inner choices class after its definition. All internal or custom choices class methods or properties will be available in a subset class (see &quot;Custom methods&quot; section).### Extract subsetSubsets of choices can be dynamically extracted with `extract()` method.```pythonPageStatus.extract(&quot;CREATED&quot;, &quot;ON_HOLD&quot;)   # Choices('PageStatus.Subset', CREATED, ON_HOLD)PageStatus.VALID.extract(&quot;ON_HOLD&quot;)        # Choices('PageStatus.VALID.Subset', ON_HOLD)```### Exclude valuesThe opposite action to `extract()` is `exclude()`. It is used to exclude values from choices class or a subset and return remaining values as a new subset.```pythonPageStatus.exclude(&quot;CREATED&quot;, &quot;ON_HOLD&quot;)   # Choices('PageStatus.Subset', PENDING)PageStatus.VALID.exclude(&quot;ON_HOLD&quot;)        # Choices('PageStatus.VALID.Subset', CREATED)```### Choices iterationChoices class implements `__iter__` magic method, hence choices are iterable that yield choice entries (i.e. `(value, display)`). Methods `items()`, `keys()` and `values()` can be used to return tuples of keys and values combinations.```pythonfor value, display in PageStatus:  # can also be used as callable, i.e. PageStatus()    print( value, display )for key, value in PageStatus.items():    print( key, value, value.display )for key in PageStatus.keys():    print( key )for value in PageStatus.values():    print( value, value.display, value.__choice_entry__ )```Additional `displays()` method is provided for choices and subsets to extract values display strings.```pythonfor display in PageStatus.displays():    print( display )for display in PageStatus.SUBSET.displays():    print( display )```&gt; Iteration methods `items()`, `keys()`, `values()`, `displays()`, as well as class constructor can accept keyword arguments to filter collections based on custom parameters, e.g. `PageStatus.values(help_text=&quot;Some&quot;, special=123)`.### Set operationsChoices class and subsets support standard set operations: *union* (`|`), *intersection* (`&amp;`), *difference* (`-`), and *symmetric difference* (`^`).```pythonPageStatus.VALID | PageStatus.INVISIBLE     # Choices(CREATED, ON_HOLD, PENDING)PageStatus.VALID &amp; PageStatus.INVISIBLE     # Choices(ON_HOLD)PageStatus.VALID - PageStatus.INVISIBLE     # Choices(CREATED)PageStatus.VALID ^ PageStatus.INVISIBLE     # Choices(CREATED, PENDING)```### Custom methodsAll custom choices class methods or properties (non-values) will be available in all subsets.```pythonPageStatus.get_help_text()PageStatus.VALID.get_help_text()PageStatus.extract(&quot;PENDING&quot;, &quot;ON_HOLD&quot;).get_help_text()PageStatus.VALID.extract(&quot;ON_HOLD&quot;).get_help_text()```### InheritanceChoices fully support class inheritance. All child choices classes have access to parent, grandparent, etc. values and custom methods.```pythonclass NewPageStatus(PageStatus):    ARCHIVED = &quot;Archived&quot;    ON_HOLD = Choices.Value(&quot;On Hold&quot;, value=&quot;on-hold&quot;)  # override parent value    INACTIVE = Choices.Subset(&quot;ON_HOLD&quot;, &quot;ARCHIVED&quot;)print( NewPageStatus.CREATED )              # 'created'print( NewPageStatus.ARCHIVED )             # 'archived'print( NewPageStatus.ON_HOLD )              # 'on-hold'```### Django model fieldsBetter choices are not different from the original Django choices in terms of usage in models.```pythonclass Page(models.Model):    status = models.CharField(choices=PageStatus, default=PageStatus.CREATED)```&gt; Better choices are fully supported by Django migrations and debug toolbar.### Saving choices on modelsBetter choices are compatible with standard Django models manipulation.```pythonpage = Page.objects.get(pk=1)page.status = PageStatus.PENDINGpage.save()```## TestsRun `python tests.py` for testing.## LicenseLibrary is available under the MIT license. The included LICENSE file describes this in detail.</longdescription>
</pkgmetadata>