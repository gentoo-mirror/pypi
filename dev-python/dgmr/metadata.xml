<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Skillful Nowcasting with Deep Generative Model of Radar (DGMR)Implementation of DeepMind's Skillful Nowcasting GAN Deep Generative Model of Radar (DGMR) (https://arxiv.org/abs/2104.00954) in PyTorch Lightning.This implementation matches as much as possible the pseudocode released by DeepMind. Each of the components (Sampler, Context conditioning stack, Latent conditioning stack, Discriminator, and Generator) are normal PyTorch modules. As the model training is a bit complicated, the overall architecture is wrapped in PyTorch Lightning.The default parameters match what is written in the paper.## InstallationClone the repository, then run```shellpip install -r requirements.txtpip install -e .````Alternatively, you can also install through ```pip install dgmr```## Training DataThe open-sourced UK training dataset has been mirrored to [HuggingFace Datasets!](https://huggingface.co/datasets/openclimatefix/nimrod-uk-1km) This should enable training the original architecture on the original data for reproducing the results from the paper. The full dataset is roughly 1TB in size, and unfortunately, streaming the data from HF Datasets doesn't seem to work, so it has to be cached locally. We have added the sample dataset as well though, which can be directly streamed from GCP without costs.The dataset can be loaded with```pythonfrom datasets import load_datasetdataset = load_dataset(&quot;openclimatefix/nimrod-uk-1km&quot;)```For now, only the sample dataset support streaming in, as its data files are hosted on GCP, not HF, so it can be used with:```pythonfrom datasets import load_datasetdataset = load_dataset(&quot;openclimatefix/nimrod-uk-1km&quot;, &quot;sample&quot;, streaming=True)```The authors also used [MRMS](https://www.nssl.noaa.gov/projects/mrms/) US precipitation radar data as another comparison. While that dataset was not released, the MRMS data is publicly available, and we have made that data available on HuggingFace Datasets as well [here](https://huggingface.co/datasets/openclimatefix/mrms). This dataset is the raw 3500x7000 contiguous US MRMS data for 2016 through May 2022, is a few hundred GBs in size, with sporadic updates to more recent data planned. This dataset is in Zarr format, and can be streamed without caching locally through ```pythonfrom datasets import load_datasetdataset = load_dataset(&quot;openclimatefix/mrms&quot;, &quot;default_sequence&quot;, streaming=True)```This steams the data with 24 timesteps per example, just like the UK DGMR dataset. To get individual MRMS frames, instead of a sequence, this can be achieved through ```pythonfrom datasets import load_datasetdataset = load_dataset(&quot;openclimatefix/mrms&quot;, &quot;default&quot;, streaming=True)```## Pretrained WeightsPretrained weights are be available through [HuggingFace Hub](https://huggingface.co/openclimatefix), currently weights trained on the sample dataset. The whole DGMR model or different components can be loaded as the following:```pythonfrom dgmr import DGMR, Sampler, Generator, Discriminator, LatentConditioningStack, ContextConditioningStackmodel = DGMR.from_pretrained(&quot;openclimatefix/dgmr&quot;)sampler = Sampler.from_pretrained(&quot;openclimatefix/dgmr-sampler&quot;)discriminator = Discriminator.from_pretrained(&quot;openclimatefix/dgmr-discriminator&quot;)latent_stack = LatentConditioningStack.from_pretrained(&quot;openclimatefix/dgmr-latent-conditioning-stack&quot;)context_stack = ContextConditioningStack.from_pretrained(&quot;openclimatefix/dgmr-context-conditioning-stack&quot;)generator = Generator(conditioning_stack=context_stack, latent_stack=latent_stack, sampler=sampler)```## Example Usage```pythonfrom dgmr import DGMRmodel = DGMR(        forecast_steps=4,        input_channels=1,        output_shape=128,        latent_channels=384,        context_channels=192,        num_samples=3,    )x = torch.rand((2, 4, 1, 128, 128))out = model(x)y = torch.rand((2, 4, 1, 128, 128))loss = F.mse_loss(y, out)loss.backward()```## Citation```@article{ravuris2021skillful,  author={Suman Ravuri and Karel Lenc and Matthew Willson and Dmitry Kangin and Remi Lam and Piotr Mirowski and Megan Fitzsimons and Maria Athanassiadou and Sheleem Kashem and Sam Madge and Rachel Prudden Amol Mandhane and Aidan Clark and Andrew Brock and Karen Simonyan and Raia Hadsell and Niall Robinson Ellen Clancy and Alberto Arribasâ€  and Shakir Mohamed},  title={Skillful Precipitation Nowcasting using Deep Generative Models of Radar},  journal={Nature},  volume={597},  pages={672--677},  year={2021}}```</longdescription>
</pkgmetadata>