<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Project Graduated](https://docs.outscale.com/fr/userguide/_images/Project-Graduated-green.svg)](https://docs.outscale.com/en/userguide/Open-Source-Projects.html)# Outscale Python SDKThis python SDK helps you to perform actions on [Outscale API](https://docs-beta.outscale.com/?python#3ds-outscale-api).You will need to have an Outscale account, please visit [Outscale website](https://outscale.com/).# InstallationYou can install the pre-built python package through this command:```bash$ pip install osc-sdk-python```# BuildingTo build the package yourself:```bash$ make package```You can then install it with:```bash$ pip install dist/osc_sdk_python-0.25.0-py3-none-any.whl```# Configuration &amp; CredentialsWhen you use the cli you can choose a profile. Profiles can be set with environment variables or in a file.It checks environment variables before loading the file.In the file, you can set a default profile, naming `default`. It will be used if you don't precise profile in command line.## Environment variables```bash$ export OSC_ACCESS_KEY=&lt;ACCESS_KEY&gt;$ export OSC_SECRET_KEY=&lt;SECRET_KEY&gt;$ # optional$ export OSC_REGION=&lt;REGION&gt; (default: eu-west-2)```## Credentials files```json$ cat ~/.osc/config.json{    &quot;default&quot;: {        &quot;access_key&quot;: &quot;&lt;ACCESS_KEY&gt;&quot;,        &quot;secret_key&quot;: &quot;&lt;SECRET_KEY&gt;&quot;,        &quot;region&quot;: &quot;&lt;REGION&gt;&quot;    },    &quot;profile_1&quot;: {        &quot;access_key&quot;: &quot;&lt;ACCESS_KEY&gt;&quot;,        &quot;secret_key&quot;: &quot;&lt;SECRET_KEY&gt;&quot;,        &quot;region&quot;: &quot;&lt;REGION&gt;&quot;    },    &quot;profile_2&quot;: {        &quot;access_key&quot;: &quot;&lt;ACCESS_KEY&gt;&quot;,        &quot;secret_key&quot;: &quot;&lt;SECRET_KEY&gt;&quot;,        &quot;region&quot;: &quot;&lt;REGION&gt;&quot;    }}```Notes:* if  ~/.osc/config.json is not found, ~/.oapi_credentials will be used* Environment variables have priority over Credentials files.## Basic AuthenticationYou can also use osc-sdk-python with basic authentication mechanism using your account's email and password. Note that some calls may be blocked with this method.More details in [authentication documentation](https://docs.outscale.com/api#authentication).Example:```pythongw = Gateway(email=&quot;your@email.com&quot;, password=&quot;youAccountPassword&quot;)keys = gw.ReadAccessKeys()```# ExampleA simple example which prints all your Virtual Machine and Volume ids.```pythonfrom osc_sdk_python import Gatewayif __name__ == '__main__':    gw = Gateway()    print(&quot;your virtual machines:&quot;)    for vm in gw.ReadVms()[&quot;Vms&quot;]:        print(vm[&quot;VmId&quot;])    print(&quot;\nyour volumes:&quot;)    for volume in gw.ReadVolumes()[&quot;Volumes&quot;]:        print(volume[&quot;VolumeId&quot;])```Usage example, check [Outscale API documentation](https://docs-beta.outscale.com/) for more details.```pythonfrom osc_sdk_python import Gatewayif __name__ == '__main__':    gw = Gateway(**{'profile': 'profile_1'})    # Calls with api Action as method    result = gw.ReadSecurityGroups(Filters={'SecurityGroupNames': ['default']})    result = gw.CreateVms(ImageId='ami-3e158364', VmType='tinav4.c2r4')    # Or raw calls:    result = gw.raw('ReadVms')    result = gw.raw('CreateVms', ImageId='ami-xx', BlockDeviceMappings=[{'/dev/sda1': {'Size': 10}}], SecurityGroupIds=['sg-aaa', 'sg-bbb'], Wrong='wrong')```Another example with logs```pythonfrom osc_sdk_python import *if __name__ == '__main__':    gw = Gateway(**{'profile': 'profile_1'})    # what can contain LOG_KEEP_ONLY_LAST_REQ or LOG_ALL    # here we pront log in memory, in standard output and in satndard error    gw.log.config(type=LOG_MEMORY | LOG_STDIO | LOG_STDERR, what=LOG_KEEP_ONLY_LAST_REQ)    # Or raw calls:    result = gw.raw('ReadVms')    last_request = gw.log.str()    print(last_request)```# Known Issues## UTF-8Some people my encounter some issue with utf-8 which looks like this```bashProblem reading (â€¦)osc_sdk_python/osc-api/outscale.yaml:'ascii' codec can't decode byte 0xe2 in position 14856: ordinal not in range(128)```To avoid this issue, configure you locals as follow:```bashLC_ALL=en_US.UTF-8```if you don't want your locals to be set system wide you can proceed as follow:```bashLC_ALL=en_US.UTF-8 pip install osc-sdk-python```</longdescription>
</pkgmetadata>