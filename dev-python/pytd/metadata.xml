<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytd====|Build status| |PyPI version| |docs status|**pytd** provides user-friendly interfaces to Treasure Data’s `RESTAPIs &lt;https://github.com/treasure-data/td-client-python&gt;`__, `Prestoqueryengine &lt;https://docs.treasuredata.com/display/public/PD/About+Presto+Distributed+Query+Engine&gt;`__,and `Plazma primarystorage &lt;https://www.slideshare.net/treasure-data/td-techplazma&gt;`__.The seamless connection allows your Python code to efficientlyread/write a large volume of data from/to Treasure Data. Eventually,pytd makes your day-to-day data analytics work more productive.Installation------------.. code:: sh   pip install pytdUsage------  `Documentation &lt;https://pytd-doc.readthedocs.io/&gt;`__-  `Sample usage on Google   Colaboratory &lt;https://colab.research.google.com/drive/1ps_ChU-H2FvkeNlj1e1fcOebCt4ryN11&gt;`__Set your `APIkey &lt;https://docs.treasuredata.com/display/public/PD/Getting+Your+API+Keys&gt;`__and`endpoint &lt;https://docs.treasuredata.com/display/public/PD/Sites+and+Endpoints&gt;`__to the environment variables, ``TD_API_KEY`` and ``TD_API_SERVER``,respectively, and create a client instance:.. code:: py   import pytd   client = pytd.Client(database='sample_datasets')   # or, hard-code your API key, endpoint, and/or query engine:   # &gt;&gt;&gt; pytd.Client(apikey='1/XXX', endpoint='https://api.treasuredata.com/', database='sample_datasets', default_engine='presto')Query in Treasure Data~~~~~~~~~~~~~~~~~~~~~~Issue Presto query and retrieve the result:.. code:: py   client.query('select symbol, count(1) as cnt from nasdaq group by 1 order by 1')   # {'columns': ['symbol', 'cnt'], 'data': [['AAIT', 590], ['AAL', 82], ['AAME', 9252], ..., ['ZUMZ', 2364]]}In case of Hive:.. code:: py   client.query('select hivemall_version()', engine='hive')   # {'columns': ['_c0'], 'data': [['0.6.0-SNAPSHOT-201901-r01']]} (as of Feb, 2019)It is also possible to explicitly initialize ``pytd.Client`` for Hive:.. code:: py   client_hive = pytd.Client(database='sample_datasets', default_engine='hive')   client_hive.query('select hivemall_version()')Write data to Treasure Data~~~~~~~~~~~~~~~~~~~~~~~~~~~Data represented as ``pandas.DataFrame`` can be written to Treasure Dataas follows:.. code:: py   import pandas as pd   df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 10]})   client.load_table_from_dataframe(df, 'takuti.foo', writer='bulk_import', if_exists='overwrite')For the ``writer`` option, pytd supports three different ways to ingestdata to Treasure Data:1. **Bulk Import API**: ``bulk_import`` (default)   -  Convert data into a CSV file and upload in the batch fashion.2. **Presto INSERT INTO query**: ``insert_into``   -  Insert every single row in ``DataFrame`` by issuing an INSERT INTO      query through the Presto query engine.   -  Recommended only for a small volume of data.3. `td-spark &lt;https://treasure-data.github.io/td-spark/&gt;`__:   ``spark``   -  Local customized Spark instance directly writes ``DataFrame`` to      Treasure Data’s primary storage system.Characteristics of each of these methods can be summarized as follows:+-----------------------------------+------------------+------------------+-----------+|                                   | ``bulk_import``  | ``insert_into``  | ``spark`` |+===================================+==================+==================+===========+| Scalable against data volume      |        ✓         |                  |     ✓     |+-----------------------------------+------------------+------------------+-----------+| Write performance for larger data |                  |                  |     ✓     |+-----------------------------------+------------------+------------------+-----------+| Memory efficient                  |        ✓         |        ✓         |           |+-----------------------------------+------------------+------------------+-----------+| Disk efficient                    |                  |        ✓         |           |+-----------------------------------+------------------+------------------+-----------+| Minimal package dependency        |        ✓         |        ✓         |           |+-----------------------------------+------------------+------------------+-----------+Enabling Spark Writer^^^^^^^^^^^^^^^^^^^^^Since td-spark gives special access to the main storage system via`PySpark &lt;https://spark.apache.org/docs/latest/api/python/index.html&gt;`__,follow the instructions below:1. Contact support@treasuredata.com to activate the permission to your   Treasure Data account. Note that the underlying component, Plazma Public   API, limits its free tier at 100GB Read and 100TB Write.2. Install pytd with ``[spark]`` option if you use the third option:   ``pip install pytd[spark]``If you want to use existing td-spark JAR file, creating ``SparkWriter``with ``td_spark_path`` option would be helpful... code:: py   from pytd.writer import SparkWriter   writer = SparkWriter(td_spark_path='/path/to/td-spark-assembly.jar')   client.load_table_from_dataframe(df, 'mydb.bar', writer=writer, if_exists='overwrite')Comparison between pytd, td-client-python, and pandas-td~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Treasure Data offers three different Python clients on GitHub, and the following list summarizes their characteristics.1. `td-client-python &lt;https://github.com/treasure-data/td-client-python&gt;`__   - Basic REST API wrapper.   - Similar functionalities to td-client-{`ruby &lt;https://github.com/treasure-data/td-client-ruby&gt;`__, `java &lt;https://github.com/treasure-data/td-client-java&gt;`__, `node &lt;https://github.com/treasure-data/td-client-node&gt;`__, `go &lt;https://github.com/treasure-data/td-client-go&gt;`__}.   - The capability is limited by `what Treasure Data REST API can do &lt;https://docs.treasuredata.com/display/public/PD/REST+APIs+in+Treasure+Data&gt;`__.2. **pytd**   - Access to Plazma via td-spark as introduced above.   - Efficient connection to Presto based on `presto-python-client &lt;https://github.com/prestodb/presto-python-client&gt;`__.   - Multiple data ingestion methods and a variety of utility functions.3. `pandas-td &lt;https://github.com/treasure-data/pandas-td&gt;`__ *(deprecated)*   - Old tool optimized for `pandas &lt;https://pandas.pydata.org&gt;`__ and `Jupyter Notebook &lt;https://jupyter.org&gt;`__.   - **pytd** offers its compatible function set (see below for the detail).An optimal choice of package depends on your specific use case, but common guidelines can be listed as follows:- Use td-client-python if you want to execute *basic CRUD operations* from Python applications.- Use **pytd** for (1) *analytical purpose* relying on pandas and Jupyter Notebook, and (2) achieving *more efficient data access* at ease.- Do not use pandas-td. If you are using pandas-td, replace the code with pytd based on the following guidance as soon as possible.How to replace pandas-td^^^^^^^^^^^^^^^^^^^^^^^^**pytd** offers`pandas-td &lt;https://github.com/treasure-data/pandas-td&gt;`__-compatiblefunctions that provide the same functionalities more efficiently. If youare still using pandas-td, we recommend you to switch to **pytd** asfollows.First, install the package from PyPI:.. code:: sh   pip install pytd   # or, `pip install pytd[spark]` if you wish to use `to_td`Next, make the following modifications on the import statements.*Before:*.. code:: python   import pandas_td as td.. code:: python   In [1]: %%load_ext pandas_td.ipython*After:*.. code:: python   import pytd.pandas_td as td.. code:: python   In [1]: %%load_ext pytd.pandas_td.ipythonConsequently, all ``pandas_td`` code should keep running correctly with``pytd``. Report an issue from`here &lt;https://github.com/treasure-data/pytd/issues/new&gt;`__ if younoticed any incompatible behaviors... |Build status| image:: https://github.com/treasure-data/pytd/workflows/Build/badge.svg   :target: https://github.com/treasure-data/pytd/actions/.. |PyPI version| image:: https://badge.fury.io/py/pytd.svg   :target: https://badge.fury.io/py/pytd.. |docs status| image:: https://readthedocs.org/projects/pytd-doc/badge/?version=latest   :target: https://pytd-doc.readthedocs.io/en/latest/?badge=latest</longdescription>
</pkgmetadata>