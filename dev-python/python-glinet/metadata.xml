<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub Workflow Status(event)](https://img.shields.io/github/workflow/status/tomtana/python-glinet/Python%20package)](https://github.com/tomtana/python-glinet/actions/workflows/python-package.yml)[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/tomtana/python-glinet/Deploy%20static%20content%20to%20Pages?label=docs)](https://tomtana.github.io/python-glinet/)[![PyPI - PythonVersion](https://img.shields.io/pypi/pyversions/python-glinet)](https://pypi.org/project/python-glinet)[![PyPI](https://img.shields.io/pypi/v/python-glinet)](https://pypi.org/project/python-glinet)[![CodeCov](https://codecov.io/gh/tomtana/python-glinet/branch/main/graph/badge.svg?token=976L8ESH8K)](https://codecov.io/gh/tomtana/python-glinet)python-glinet - A Python3 Client for GL.Inet Router===================================================-   **Python3 client providing full access to the GL.Inet Luci API.**-   **Supported firmware versions: 4.0 onwards**-   **Dynamic method creation including docstring from the gl.inet    online documentation**-   **Api responses are recursively build as objects, such that you can    access all properties via \'.\'**-   **Cache for api description and hashed login**-   **Configurable background thread to keep connection alive**![image](https://github.com/tomtana/python-glinet/raw/main/ressources/python_glinet_demo.gif)**Note:**-   GL.Inet changed the api mechanism from REST to JSON-RPC with the    introduction of the firmware 4.0. Therefore, older versions are not    supported.-   There is no official English api documentation. The client parses    the Chinese documentation from    [here](https://dev.gl-inet.cn/docs/api_docs_page) and dynamically    creates the api methods. Once it is available, the repo will be    updated.-   The best way to navigate and explore the api is within an ipython    shell. A wrapper for ipython and terminal is on the roadmap.Installation------------### PIP``` {.sourceCode .sh}pip install python-glinet```### From Repo``` {.sourceCode .sh}#clone repositorygit clone https://github.com/tomtana/python-glinet.gitcd python-glinet```It is strongly recommended to install the package inside an pythonvirtual environment (see[here](https://docs.python.org/3/tutorial/venv.html) for more infos).The pip parameter `-e` is optional and gives you the possibility to editthe `python-glinet` directly in the folder.``` {.sourceCode .sh}python3 -m venv venvsource venv/bin/activatepip install -e .```Getting Started---------------The heart piece of `python-glinet` is the `GlInet` class. It is managesauthentication, session and communication with the api. In case youmodified the router default settings such as ip-address or username youneed to pass them as parameter (see the documentation of the[GlInet](https://tomtana.github.io/python-glinet/glinet.html) class formore details).For browsing the api using the dynamically created api\_client, it isassumed that the commands are executed in an ipython shell.**Warning:**Even though possible, it is strongly discouraged to pass the password asa parameter.**Note:**-   The constructor is checking if a api description is already in the    persistence and will load it from the gl.inet online documentation    if not.-   Make sure you check and understand the default settings``` {.sourceCode .python}from pyglinet import GlInetglinet = GlInet()```### Login``` {.sourceCode .python}glinet.login()```The login method call has deliberately not been integrated into theconstructor. For convenience it is possible to instantiate the objectand login as shown below.``` {.sourceCode .python}# one liner: instantiation and loginglinet = GlInet().login()```**Note:**-   if no password is passed as parameter in the constructor, `login()`    will try to load login data from persistence-   if no success ask via prompt and persist settings-   start background thread to keep connection alive### API Access Via Dynamically Created ClientMake sure you are in an ipython shell and logged in. Then, generate the`api_client`.``` {.sourceCode .python}api_client = glinet.get_api_client()```You have also direct access to the api via the `api` property of the`GlInet` instance.#### General-   The api structure is as follow:    **client.\&lt;functionial\_group\&gt;.\&lt;method\&gt;**-   Due to python naming rules for variables, all \&quot;-\&quot; are replaced    with \&quot;\_\&quot; for the api method construction. **e.g. wg-client    becomes wg\_client.**-   Use code completion and docstring to intuitively navigate the api#### Functional GroupsJust call your client to see all available api function groups.    api_clientOr same result with    glinet.api``` {.sourceCode .bash}Out[11]:Function------------------repeaterrs485qosaclmodemlogreadigmpcustom_dnsdnsdlnanas_webadguardhomes2ssambaswitch_buttondiagrttynetworkupgraderebootwg_serverfirewallovpn_servervpn_policyfansystemwg_clientcableleduinetmodeddnsipv6ovpn_clientpluginstetheringmacclonelanedgerouterclientswificloudcloud_batch_manage```#### MethodsTo explore the methods of a function group, just select it and hitenter.``` {.sourceCode .python}api_client.wg_client`````` {.sourceCode .bash}Out[6]:Function--------------------get_recommend_configget_third_configadd_configset_configremove_configclear_config_listget_config_liststartstopget_statuscheck_configconfirm_configadd_groupremove_groupset_groupget_group_listget_all_config_listset_proxyadd_routeset_routeget_route_listremove_route```#### ParametersSelect your method and press enter. A list for all possible parametersare printed. A parameter prepended with `?` is optional.``` {.sourceCode .python}api_client.wg_client.set_config`````` {.sourceCode .bash}Out[8]:Parameter              Type    Description---------------------  ------  ------------------name                   string  节点名address_v4             string  节点IPv4子网?address_v6            string  节点IPv6子网private_key            string  节点私钥allowed_ips            string  节点的allowedipsend_point              string  节点的endpointpublic_key             string  节点公钥?dns                   string  节点的dns?preshared_key         string  预分享密钥?ipv6_enable           bool    是否启用IPv6presharedkey_enable    bool    是否使用预分享密钥group_id               number  组IDpeer_id                number  配置ID?listen_port           number  监听端口?persistent_keepalive  number  节点保活?mtu                   number  节点的mtu```#### DocstringYou can also show the docstring by appending a `?` to the method. Itwill show all the parameters and usage examples.``` {.sourceCode .text}api_client.wg_client.set_config?`````` {.sourceCode .text}Signature: api.wg_client.set_config(params=None)Type:      GlInetApiCallFile:      ~/.local/lib/python3.10/site-packages/pyglinet/api_helper.pyDocstring:Available parameters (?=optional):Parameter              Type    Description---------------------  ------  ------------------name                   string  节点名address_v4             string  节点IPv4子网?address_v6            string  节点IPv6子网private_key            string  节点私钥allowed_ips            string  节点的allowedipsend_point              string  节点的endpointpublic_key             string  节点公钥?dns                   string  节点的dns?preshared_key         string  预分享密钥?ipv6_enable           bool    是否启用IPv6presharedkey_enable    bool    是否使用预分享密钥group_id               number  组IDpeer_id                number  配置ID?listen_port           number  监听端口?persistent_keepalive  number  节点保活?mtu                   number  节点的mtuExample request:{\&quot;jsonrpc\&quot;:\&quot;2.0\&quot;,\&quot;method\&quot;:\&quot;call\&quot;,\&quot;params\&quot;:[\&quot;\&quot;,\&quot;wg-client\&quot;,\&quot;set_config\&quot;,{\&quot;group_id\&quot;:3212,\&quot;peer_id\&quot;:1254,\&quot;name\&quot;:\&quot;test\&quot;,\&quot;address_v4\&quot;:\&quot;10.8.0.0/24\&quot;,\&quot;address_v6\&quot;:\&quot;fd00:db8:0:123::/64\&quot;,\&quot;private_key\&quot;:\&quot;XVpIdr+oYjTcgDwzSZmNa1nSsk8JO+tx1NBo17LDBAI=\&quot;,\&quot;allowed_ips\&quot;:\&quot;0.0.0.0/0,::/0\&quot;,\&quot;end_point\&quot;:\&quot;103.231.88.18:3102\&quot;,\&quot;public_key\&quot;:\&quot;zv0p34WZN7p2vIgehwe33QF27ExjChrPUisk481JHU0=\&quot;,\&quot;dns\&quot;:\&quot;193.138.219.228\&quot;,\&quot;presharedkey_enable\&quot;:false,\&quot;listen_port\&quot;:22536,\&quot;persistent_keepalive\&quot;:25,\&quot;mtu\&quot;:1420,\&quot;ipv6_enable\&quot;:true}],\&quot;id\&quot;:1}Example response:{\&quot;jsonrpc\&quot;: \&quot;2.0\&quot;, \&quot;id\&quot;: 1, \&quot;result\&quot;: {}}```#### Method callJust call the method as usual. Check the usage examples to understandhow parameters need to be passed.    api_client.wg_client.get_all_config_list()``` {.sourceCode .bash}Out[12]: {'name': 'wg_client__get_all_config_list', 'config_list': [{'name': 'wg_client__get_all_config_list', 'username': '', 'group_name': 'AzireVPN', 'peers': [], 'password': '', 'auth_type': 1, 'group_id': 9690}]}```#### API Response ProcessingThe API json responses are recursively converted into objects. Thisprovides convenient access with code completion and point access to thedata.### API Access Via Direct RequestInstead of using the dynamically created api\_client, it is alsopossible to use the `GlInet` instance to make api requests. In fact, theapi\_client uses the `GlInet` session under the hood.Once logged in, you simply can use the `glinet.request(method, params)`method to access or retrieve data from the api. Information about themethod and the parameters can either be found in the[documentation](https://dev.gl-inet.cn/docs/api_docs_page) or via theapi\_client.e.g.    glinet.request(&quot;call&quot;, [&quot;adguardhome&quot;, &quot;get_config&quot;])``` {.sourceCode .bash}Out[12]: {'name': 'adguardhome__get_config', 'id': 13, 'jsonrpc': '2.0', 'result': {'name': 'adguardhome__get_config', 'enabled': False}}```is equivalent to    api_client.adguardhome.get_config()``` {.sourceCode .bash}Out[13]: {'name': 'adguardhome__get_config', 'enabled': False}```**Note:**The output of the `request` method returns the whole response bodywhereas the api\_client just returns the result dict.Roadmap-------### V1.0.0-   ☒ Add dynamically docstring for API calls-   ☒ Create pip compliant package-   ☒ Publish pip package-   ☒ Add tests-   ☒ Improve documentation-   ☒ Increase test coverage-   ☒ replace crypt dependency to allow also Windows execution-   ☐ Add wrapper for execution via terminal### V2.0.0-   ☐ Add asyncio support-   ☐ \...</longdescription>
</pkgmetadata>