<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ndnsim-graphA small graph package used to draw image for ndnsim metrics## 1. Install```bashpip install ndnsimgraph```## 2. Usage Example### 2.1 Throughput- 功能：  - 绘制节点特定Face的吞吐量；=&gt; `plot`  - 绘制多个节点吞吐量之和；=&gt; `plotSum`  - 绘制多个节点吞吐量的平均值； =&gt; `plotAvg`- 基本使用：  ```python  from ndnsimgraph.throughput import ThroughputGraph, ThroughputType, ThroughputTarget    ThroughputGraph.parse(&quot;throughput.txt&quot;). \      setThroughputType(ThroughputType.OutData). \      setThroughputTarget(ThroughputTarget.Kilobytes_Mbps). \      setSamplingInterval(0.5). \      plot(&quot;C1&quot;, 258). \      plot(&quot;C2&quot;, 258). \      plot(&quot;C3&quot;, 258). \      plot(&quot;C4&quot;, 258). \      title(&quot;1.1 Throughput base usage&quot;). \      xlabel(&quot;Times(s)&quot;). \      ylabel(&quot;Throughput(Mbps)&quot;). \      legend(). \      drawAndSave(&quot;output&quot;, &quot;throughput-1.1.svg&quot;). \      close()  ```  ![throughput-1.1](https://cdn.jsdelivr.net/gh/SunnyQjm/pic-bed@main/uPic/throughput-1.1.svg)  - 可以通过 `setThroughputType` 设置不同的吞吐量类型，有效值如下：    &gt; [Obtaining metrics — ndnSIM documentation](https://ndnsim.net/current/metric.html)    |              吞吐量类型              |                          描述                          |    | :----------------------------------: | :----------------------------------------------------: |    |      ThroughputType.InInterests      |    统计从该Face接收到的Interest的指标（数量、速率）    |    |     ThroughputType.OutInterests      |   统计从该Face转发出去的Interest的指标（数量、速率）   |    |        ThroughputType.InData         |      统计从该Face接收到的Data的指标（数量、速率）      |    |        ThroughputType.OutData        |     统计从该Face转发出去的Data的指标（数量、速率）     |    |        ThroughputType.InNacks        |      统计从该Face接收到的Nack的指标（数量、速率）      |    |       ThroughputType.OutNacks        |     统计从该Face转发出去的Nack的指标（数量、速率）     |    | ThroughputType.InSatisfiedInterests  | 统计从该Face传入的被满足的Interest的指标（数量、速率） |    |  ThroughputType.InTimedOutInterests  |  统计从该Face传入的超时的Interest的指标（数量、速率）  |    | ThroughputType.OutSatisfiedInterests | 统计从该Face传出的被满足的Interest的指标（数量、速率） |    |  ThroughputType.SatisfiedInterests   |     统计所有Face已满足Interest的指标（数量、速率）     |    |   ThroughputType.TimedOutInterests   |      统计所有Face超时Interest的指标（数量、速率）      |  - 可以通过`setThroughputTarget` 设置吞吐量目标值，有效值如下：    &gt; [Obtaining metrics — ndnSIM documentation](https://ndnsim.net/current/metric.html)    |             吞吐量目标             |                   描述                   |    | :--------------------------------: | :--------------------------------------: |    |      ThroughputTarget.Packets      |              EWMA后的包数量              |    |  ThroughputTarget.Kilobytes_KBps   |           EWMA后的速率（KBps）           |    |  ThroughputTarget.Kilobytes_MBps   |           EWMA后的速率（MBps）           |    |  ThroughputTarget.Kilobytes_Kbps   |           EWMA后的速率（Kbps）           |    |  ThroughputTarget.Kilobytes_Mbps   |           EWMA后的速率（Mbps）           |    |     ThroughputTarget.PacketRaw     | 统计周期内的包数量（真实数量，没有EWMA） |    | ThroughputTarget.KilobytesRaw_KBps |       统计周期内的真实速率（KBps）       |    | ThroughputTarget.KilobytesRaw_MBps |       统计周期内的真实速率（MBps）       |    | ThroughputTarget.KilobytesRaw_Kbps |       统计周期内的真实速率（Kbps）       |    | ThroughputTarget.KilobytesRaw_Mbps |       统计周期内的真实速率（Mbps）       |  - 可以通过`setSamplingInterval`设置采样间隔 =&gt; 设置为1，则每秒采样一次。  - 可以通过 `plot` 函数绘制节点某个Face的吞吐量 =&gt; **plot 函数与 matplotlib 的plot函数一致，所有可以传递给matplotlib.plot 的参数都可以传递给 `plot`**    - 例如主动设置折现的样式、大小、颜色和标签等等等等      ```python      from ndnsimgraph.throughput import ThroughputGraph, ThroughputType, ThroughputTarget            ThroughputGraph.parse(&quot;throughput.txt&quot;). \          setThroughputType(ThroughputType.OutData). \          setThroughputTarget(ThroughputTarget.Kilobytes_Mbps). \          setSamplingInterval(0.5). \          plot(&quot;C1&quot;, 258, linestyle=&quot;dotted&quot;, linewidth=4, markersize=10, marker=&quot;*&quot;, color=&quot;blue&quot;, label=&quot;custom-C1&quot;). \          plot(&quot;C4&quot;, 258, linewidth=1, markersize=5, marker=&quot;+&quot;, color=&quot;red&quot;, label=&quot;custom-C4&quot;). \          title(&quot;1.2 Custom plot&quot;). \          xlabel(&quot;Times(s)&quot;). \          ylabel(&quot;Throughput(Mbps)&quot;). \          legend(). \          drawAndSave(&quot;output&quot;, &quot;throughput-1.2.svg&quot;). \          close()      ```      ![throughput-1.2](https://cdn.jsdelivr.net/gh/SunnyQjm/pic-bed@main/uPic/throughput-1.2-1395390.svg)  - 可以通过 `xlim` 和 `ylim` 函数设置横纵坐标的显示范围    ```python    from ndnsimgraph.throughput import ThroughputGraph, ThroughputType, ThroughputTarget        ThroughputGraph.parse(&quot;throughput.txt&quot;). \        setThroughputType(ThroughputType.OutData). \        setThroughputTarget(ThroughputTarget.Kilobytes_Mbps). \        setSamplingInterval(0.5). \        plot(&quot;C1&quot;, 258, linestyle=&quot;dotted&quot;, linewidth=4, markersize=10, marker=&quot;*&quot;, color=&quot;blue&quot;). \        plot(&quot;C4&quot;, 258, linewidth=1, markersize=5, marker=&quot;+&quot;, color=&quot;red&quot;). \        ylim((0, 3)). \        title(&quot;1.3 ylim test&quot;). \        xlabel(&quot;Times(s)&quot;). \        ylabel(&quot;Throughput(Mbps)&quot;). \        legend(). \        drawAndSave(&quot;output&quot;, &quot;throughput-1.3.svg&quot;). \        close()    ```    ![throughput-1.3](https://cdn.jsdelivr.net/gh/SunnyQjm/pic-bed@main/uPic/throughput-1.3-1395401.svg)- 使用 `plotSum` 实现多条折线的加和  ```python  from ndnsimgraph.throughput import ThroughputGraph, ThroughputType, ThroughputTarget  from ndnsimgraph.common import NodeItem    ThroughputGraph.parse(&quot;throughput.txt&quot;). \      setThroughputType(ThroughputType.OutData). \      setThroughputTarget(ThroughputTarget.Kilobytes_Mbps). \      setSamplingInterval(0.5). \      plot(&quot;C1&quot;, 258). \      plot(&quot;C3&quot;, 258). \      plotSum([NodeItem(&quot;C1&quot;, 258),               NodeItem(&quot;C3&quot;, 258),               ], label=&quot;sum&quot;). \      title(&quot;1.4 plotSum test&quot;). \      xlabel(&quot;Times(s)&quot;). \      ylabel(&quot;Throughput(Mbps)&quot;). \      legend(). \      drawAndSave(&quot;output&quot;, &quot;throughput-1.4.svg&quot;). \      close()  ```  ![throughput-1.4](https://cdn.jsdelivr.net/gh/SunnyQjm/pic-bed@main/uPic/throughput-1.4.svg)- 使用`plotAvg` 实现多条折线取平均  ```python  from ndnsimgraph.throughput import ThroughputGraph, ThroughputType, ThroughputTarget  from ndnsimgraph.common import NodeItem    ThroughputGraph.parse(&quot;throughput.txt&quot;). \      setThroughputType(ThroughputType.OutData). \      setThroughputTarget(ThroughputTarget.Kilobytes_Mbps). \      setSamplingInterval(0.5). \      plot(&quot;C1&quot;, 258). \      plot(&quot;C3&quot;, 258). \      plotAvg([NodeItem(&quot;C1&quot;, 258),               NodeItem(&quot;C3&quot;, 258),               ], label=&quot;avg&quot;). \      title(&quot;1.5 plotAvg test&quot;). \      xlabel(&quot;Times(s)&quot;). \      ylabel(&quot;Throughput(Mbps)&quot;). \      legend(). \      drawAndSave(&quot;output&quot;, &quot;throughput-1.5.svg&quot;). \      close()  ```  ![throughput-1.5](https://cdn.jsdelivr.net/gh/SunnyQjm/pic-bed@main/uPic/throughput-1.5.svg)### 2.2 Delay- 功能：  - 绘制某个Consumer的延迟；=&gt; `plot`  - 绘制多个Consumer的延迟之和；=&gt; `plotSum`  - 绘制多个Consumer的延迟的平均值； =&gt; `plotAvg`- 基本使用  ```python  from ndnsimgraph.delay import DelayGraph, DelayType, DelayTarget    DelayGraph.parse(&quot;delay.txt&quot;). \      setDelayType(DelayType.LastDelay). \      setDelayTarget(DelayTarget.DelayMS). \      setSamplingInterval(0.5). \      plot(&quot;C1&quot;, 0). \      plot(&quot;C2&quot;, 0). \      plot(&quot;C3&quot;, 0). \      plot(&quot;C4&quot;, 0). \      title(&quot;delay-2.1&quot;). \      xlabel(&quot;Times(s)&quot;). \      ylabel(&quot;Delay(ms)&quot;). \      legend(). \      drawAndSave(&quot;output&quot;, &quot;delay-2.1.svg&quot;). \      close()  ```  ![delay-2.1](https://cdn.jsdelivr.net/gh/SunnyQjm/pic-bed@main/uPic/delay-2.1.svg)  - 可以通过 `setDelayType` 设置不同的吞吐量类型，有效值如下：    &gt; [Obtaining metrics — ndnSIM documentation](https://ndnsim.net/current/metric.html)    |      延迟类型       |                             描述                             |    | :-----------------: | :----------------------------------------------------------: |    | DelayType.LastDelay | LastDelay意味着DelayS和DelayUS代表最后发送的兴趣和接收的数据包之间的延迟 |    | DelayType.FullDelay | FullDelay是指DelayS和DelayUS代表发送的第一个感兴趣的数据包和接收的数据包之间的延迟 |  - 可以通过`setDelayTarget`设置延迟目标，有效值如下：    |      延迟目标       |       描述       |    | :-----------------: | :--------------: |    | DelayTarget.DelayS  |  按秒统计的延迟  |    | DelayTarget.DelayMS | 按毫秒统计的延迟 |    | DelayTarget.DelayUS | 按微秒统计的延迟 |  - 其它函数，`setSamplingInterval`、`plot`、`xlim`、`ylim` 等等的含义和 Throughput的一致，详情请见 2.1 节。- 使用 `plotSum` 实现多条折线的加和：  ```python  from ndnsimgraph.delay import DelayGraph, DelayType, DelayTarget  from ndnsimgraph.common import NodeItem    DelayGraph.parse(&quot;delay.txt&quot;). \      setDelayType(DelayType.LastDelay). \      setDelayTarget(DelayTarget.DelayMS). \      setSamplingInterval(0.5). \      plot(&quot;C1&quot;, 0). \      plot(&quot;C4&quot;, 0). \      plotSum([NodeItem(&quot;C1&quot;, 0),               NodeItem(&quot;C4&quot;, 0)], label=&quot;sum&quot;). \      title(&quot;2.2 delay plotSum test&quot;). \      xlabel(&quot;Times(s)&quot;). \      ylabel(&quot;Delay(ms)&quot;). \      legend(). \      drawAndSave(&quot;output&quot;, &quot;delay-2.2.svg&quot;). \      close()  ```  ![delay-2.2](https://cdn.jsdelivr.net/gh/SunnyQjm/pic-bed@main/uPic/delay-2.2.svg)- 使用 `plotAvg` 实现多条折线取平均：  ```python  from ndnsimgraph.delay import DelayGraph, DelayType, DelayTarget  from ndnsimgraph.common import NodeItem    DelayGraph.parse(&quot;delay.txt&quot;). \      setDelayType(DelayType.LastDelay). \      setDelayTarget(DelayTarget.DelayMS). \      setSamplingInterval(0.5). \      plot(&quot;C1&quot;, 0). \      plot(&quot;C4&quot;, 0). \      plotAvg([NodeItem(&quot;C1&quot;, 0),               NodeItem(&quot;C4&quot;, 0)], label=&quot;avg&quot;). \      title(&quot;2.3 delay plotAvg test&quot;). \      xlabel(&quot;Times(s)&quot;). \      ylabel(&quot;Delay(ms)&quot;). \      legend(). \      drawAndSave(&quot;output&quot;, &quot;delay-2.3.svg&quot;). \      close()  ```  ![delay-2.3](README.assets/delay-2.3.svg)### 2.3 Drop```pythonfrom ndnsimgraph.drop import DropGraph, DropType, DropTargetDropGraph.parse(&quot;data_content_delivery/drop_abilene.txt&quot;).    setDropType(DropType.Drop).    setDropTarget(DropTarget.PacketRaw).    setSamplingInterval(1).    innerPlot(&quot;C1&quot;).    innerPlot(&quot;C2&quot;).    title(&quot;test title&quot;).    xlabel(&quot;Drop(packets)&quot;).    ylabel(&quot;Times(s)&quot;).    ylim(0).    legend().    drawAndSave(&quot;output&quot;, &quot;test-drop.svg&quot;).    close()```![test-drop.svg](doc/test-drop.svg)## 3. Upload new packet&gt; [Python 打包自己的库到 PYPI （可pip安装）](https://zhuanlan.zhihu.com/p/79164800)```bashpython3 setup.py sdist bdist_wheeltwine upload dist/*```</longdescription>
</pkgmetadata>