<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Client Library for Deebot Vacuums[![PyPI - Downloads](https://img.shields.io/pypi/dw/deebot-client?style=for-the-badge)](https://pypi.org/project/deebot-client)&lt;a href=&quot;https://www.buymeacoffee.com/edenhaus&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-black.png&quot; width=&quot;150px&quot; height=&quot;35px&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 35px !important;width: 150px !important;&quot; &gt;&lt;/a&gt;## InstallationIf you have a recent version of Python 3, you should be able todo `pip install deebot-client` to get the most recently released version ofthis.## UsageTo get started, you'll need to have already set up an EcoVacs accountusing your smartphone.You are welcome to try using this as a python library for other efforts.A simple usage might go something like this:```pythonimport aiohttpimport asyncioimport loggingimport timefrom deebot_client.api_client import ApiClientfrom deebot_client.authentication import Authenticatorfrom deebot_client.commands import *from deebot_client.commands.clean import CleanActionfrom deebot_client.events import BatteryEventfrom deebot_client.models import Configurationfrom deebot_client.mqtt_client import MqttClient, MqttConfigurationfrom deebot_client.util import md5from deebot_client.vacuum_bot import VacuumBotdevice_id = md5(str(time.time()))account_id = &quot;your email or phonenumber (cn)&quot;password_hash = md5(&quot;yourPassword&quot;)continent = &quot;eu&quot;country = &quot;de&quot;async def main():  async with aiohttp.ClientSession() as session:    logging.basicConfig(level=logging.DEBUG)    config = Configuration(session,                           device_id=device_id, country=country, continent=continent,                           )    authenticator = Authenticator(config, account_id, password_hash)    api_client = ApiClient(authenticator)    devices_ = await api_client.get_devices()    bot = VacuumBot(devices_[0], authenticator)    mqtt_config = MqttConfiguration(config=config)    mqtt = MqttClient(mqtt_config, authenticator)    await bot.initialize(mqtt)    async def on_battery(event: BatteryEvent):      # Do stuff on battery event      if event.value == 100:        # Battery full        pass    # Subscribe for events (more events available)    bot.events.subscribe(BatteryEvent, on_battery)    # Execute commands    await bot.execute_command(Clean(CleanAction.START))    await asyncio.sleep(900)  # Wait for...    await bot.execute_command(Charge())if __name__ == '__main__':  loop = asyncio.get_event_loop()  loop.create_task(main())  loop.run_forever()```A more advanced example can be found [here](https://github.com/And3rsL/Deebot-for-Home-Assistant).## ThanksMy heartfelt thanks to:- [deebotozmo](https://github.com/And3rsL/Deebotozmo), After all, this is a debotozmo fork :)- [sucks](https://github.com/wpietri/sucks), deebotozmo was forked from it :)- [xmpppeek](https://www.beneaththewaves.net/Software/XMPPPeek.html), a great library for examining XMPP traffic flows (  yes, your vacuum speaks Jabbber!),- [mitmproxy](https://mitmproxy.org/), a fantastic tool for analyzing HTTPS,- [click](http://click.pocoo.org/), a wonderfully complete and thoughtful library for making Python command-line  interfaces,- [requests](http://docs.python-requests.org/en/master/), a polished Python library for HTTP requests,- [Decompilers online](http://www.javadecompilers.com/apk), which was very helpful in figuring out what the Android app  was up to,- Albert Louw, who was kind enough to post code  from [his own experiments](https://community.smartthings.com/t/ecovacs-deebot-n79/93410/33)  with his device, and- All the users who have given useful feedback and contributed code!</longdescription>
</pkgmetadata>