<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Using EnOS Service SDK for Python (Preview Edition)This repo contains the preview edition of EnOS Service SDK for Python. This article instructs how to prepare your development environment and use the EnOS Service SDK for Python.* [Installing Python](#python)* [Obtaining EnOS Service SDK for Python](#obtaining)* [Key Features](#keyfeatures)* [API Reference](#apiref)* [Sample Code](#samplecode)&lt;a name=&quot;python&quot;&gt;&lt;/a&gt;## Installing PythonTo use the EnOS Service SDK for Python, you will need Python 2.7.13+ or 3.5.3+, and `pip` is required.&lt;a name=&quot;obtaining&quot;&gt;&lt;/a&gt;## Obtaining EnOS Service SDK for PythonYou can obtain the SDK through the following methods:- Install from pip- Download the source code by cloning this repo and build on your machine### Installing from PIPUse the following command to install EnOS Service SDK for Python from PIP.```bashpip install enos-api-sdk-python```### Building from Source Code1. Obtain the EnOS Service SDK for Python source code from GitHub:    ```    git clone https://github.com/EnvisionIot/enos-api-sdk-python.git    ```2. From the directory where the source code is stored, run the following command:    ```    python setup.py install    ```&lt;a name=&quot;keyfeatures&quot;&gt;&lt;/a&gt;## Key FeaturesAs the preview edition, the EnOS Service SDK for Python currently contains only partial of the EnOS Service REST API features as listed below:- Apply certificate by device key- Post measure point data- Create and list products&lt;a name=&quot;apiref&quot;&gt;&lt;/a&gt;## API ReferenceTo access the EnOS API documentation, go to **EnOS API &gt; API Documents** in the EnOS Console. For each service category, you can check the summary of the APIs from the API list table and click the **More** icon for view details of each specific API, including API description, calling method, requesting URL, parameter description, calling sample, and response sample.&lt;a name=&quot;samplecode&quot;&gt;&lt;/a&gt;## Sample CodeThis sample demonstrates how to post a struct type of measure point to the EnOS Cloud.```pythonfrom enosapi.request.PostMeasurepointsEnOSRequest import PostMeasurepointsEnOSRequestfrom enosapi.client.EnOSDefaultClient import EnOSDefaultClientimport timeimport jsonenos_api_url = &quot;https://{HOST}/enosapi/&quot;# the application configuration created in consoleaccess_key = &quot;ACCESS_KEY&quot;secret_key = &quot;SECRET_KEY&quot;# sub-device parametersdevice_asset_id = 'DEVICE_ASSET_ID'product_key = 'PRODUCT_KEY'# OU IDorg_id = &quot;OU_ID&quot;if __name__ == &quot;__main__&quot;:    timestamp = int(time.time() * 1000)  # timestamp in milliseconds    struct_measure_point = {'Image1': 'local://file1', 'Sensor': 'PM2_5', 'UpperLimit': 100, 'Value': 120, 'AlertFlag': 1, 'AlertMessage': 'PM10 over limit'}    measure_points = {        'Image0': struct_measure_point    }    data = [{        'measurepoints': measure_points,        'assetId': device_asset_id,        'time': timestamp    }]    param = {        &quot;data&quot;: json.dumps(data)    }    # two files named apple.png and orange.png should be put into the same directory as this code file    file_to_upload = {&quot;file1&quot;: open(&quot;image1.jpg&quot;, 'rb')}    request = PostMeasurepointsEnOSRequest(org_id=org_id, product_key=product_key, params=param,                                           upload_file=file_to_upload)    enos_api_client = EnOSDefaultClient(enos_api_url, access_key, secret_key)    response = enos_api_client.execute(request)    print(response.status, response.msg)```</longdescription>
</pkgmetadata>