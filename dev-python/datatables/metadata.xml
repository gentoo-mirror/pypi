<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================================datatables |PyPi Version| |TravisCI| |Coverage|===============================================.. |PyPi Version| image:: http://img.shields.io/pypi/v/datatables.svg?style=flat    :target: https://pypi.python.org/pypi/datatables.. |TravisCI| image:: https://api.travis-ci.org/orf/datatables.svg    :target: https://travis-ci.org/orf/datatables.. |Coverage| image:: https://coveralls.io/repos/orf/datatables/badge.png?branch=master  :target: https://coveralls.io/r/orf/datatables?branch=masterInstallation------------The package is available on `PyPI &lt;https://pypi.python.org/pypi/datatables&gt;`_ and is tested on Python 2.7 to 3.4.. code-block:: bash    pip install datatablesUsage-----Using Datatables is simple. Construct a DataTable instance by passing it your request parameters (or another dict-likeobject), your model class, a base query and a set of columns. The columns list can contain simple strings which arecolumn names, or tuples containing (datatable_name, model_name), (datatable_name, model_name, filter_function) or(datatable_name, filter_function).Additional data such as hyperlinks can be added via DataTable.add_data, which accepts a callable that is called foreach instance. Check out the usage example below for more info.Example-------**models.py**.. code-block:: python    class User(Base):        __tablename__ = 'users'        id          = Column(Integer, primary_key=True)        full_name   = Column(Text)        created_at  = Column(DateTime, default=datetime.datetime.utcnow)        # Use lazy=joined to prevent O(N) queries        address     = relationship(&quot;Address&quot;, uselist=False, backref=&quot;user&quot;, lazy=&quot;joined&quot;)    class Address(Base):        __tablename__ = 'addresses'        id          = Column(Integer, primary_key=True)        description = Column(Text, unique=True)        user_id     = Column(Integer, ForeignKey('users.id'))**views.py**.. code-block:: python    @view_config(route_name=&quot;data&quot;, request_method=&quot;GET&quot;, renderer=&quot;json&quot;)    def users_data(request):        # User.query = session.query(User)        table = DataTable(request.GET, User, User.query, [            &quot;id&quot;,            (&quot;name&quot;, &quot;full_name&quot;, lambda i: &quot;User: {}&quot;.format(i.full_name)),            (&quot;address&quot;, &quot;address.description&quot;),        ])        table.add_data(link=lambda o: request.route_url(&quot;view_user&quot;, id=o.id))        table.searchable(lambda queryset, user_input: perform_some_search(queryset, user_input))        return table.json()**template.jinja2**.. code-block:: html    &lt;table class=&quot;table&quot; id=&quot;clients_list&quot;&gt;        &lt;thead&gt;            &lt;tr&gt;                &lt;th&gt;Id&lt;/th&gt;                &lt;th&gt;User name&lt;/th&gt;                &lt;th&gt;Address&lt;/th&gt;            &lt;/tr&gt;        &lt;/thead&gt;        &lt;tbody&gt;        &lt;/tbody&gt;    &lt;/table&gt;    &lt;script&gt;        $(&quot;#clients_list&quot;).dataTable({            serverSide: true,            processing: true,            ajax: &quot;{{ request.route_url(&quot;data&quot;) }}&quot;,            columns: [                {                    data: &quot;id&quot;,                    &quot;render&quot;: function(data, type, row){                        return $(&quot;&lt;div&gt;&quot;).append($(&quot;&lt;a/&gt;&quot;).attr(&quot;href&quot;, row.DT_RowData.link).text(data)).html();                    }                },                { data: &quot;name&quot; },                { data: &quot;address&quot; }            ]    &lt;/script&gt;</longdescription>
</pkgmetadata>