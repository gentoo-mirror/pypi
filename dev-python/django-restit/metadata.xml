<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RESTIT.. a REST framework for DJANGO### Quick Steps1. Install framework2. Add &quot;restit&quot; to DJANGO apps.3. Add &quot;middleware&quot;    'rest.middleware.SessionMiddleware',        'rest.middleware.GlobalRequestMiddleware',        'rest.middleware.CorsMiddleware',      4. add url(r'^rpc/', include('rest.urls')) to your urlpatterns in urls.py## Quick OverviewThis framework makes it easy to build a rest framework to use with any web or applicaiton development.You can take any model and turn them into a REST Model by inheriting from RestModel.```pythonclass ExampleTODO(models.Model, RestModel):    your standard django fields  ...```Next in your DJANGO app create a &quot;rpc.py&quot; file.```python# decorator that defines your routes, note the app_name is assumed@rd.url('todo')@rd.url('todo/&lt;int:pk&gt;')@login_requireddef on_rest_todo(request, pk=None):    return ExampleTODO.on_rest_request(request, pk)```This will give you a full rest interface into your Django model.### But wait there's more...This framework is pretty powerful and allow you to define how you want to return your model objects, and how deep!```pythonclass ExampleTODO(models.Model, RestModel):    class RestMeta:        GRAPHS = {            &quot;default&quot;: {        &quot;exclude&quot;:[&quot;priority&quot;],                &quot;graphs&quot;:{                    &quot;user&quot;:&quot;default&quot;                }            },            &quot;list&quot;: {        &quot;fields&quot;:[&quot;id&quot;, &quot;name&quot;, &quot;priority&quot;]            }        }    user = models.ForeignKey(User, related_name=&quot;+&quot;)  name = models.CharField(max_length=80)  description = models.TextField(max_length=80)  priority = models.IntegerField(default=0)```Above you can we we can define &quot;graphs&quot; that let us control what is returned.So if we go to http://localhost:8000/rpc/rest_example/todo it will default to the &quot;list&quot; graph and return something that looks like...```json{    &quot;status&quot;: true,    &quot;size&quot;: 25,    &quot;count&quot;: 2,    &quot;data&quot;: [        {            &quot;id&quot;: 1,            &quot;name&quot;: &quot;test 1&quot;,            &quot;priority&quot;: 1,      &quot;user&quot;: 21        },        {            &quot;id&quot;: 2,            &quot;name&quot;: &quot;test 2&quot;,            &quot;priority&quot;: 1,      &quot;user&quot;: 21        },    ]}```So if we go to http://localhost:8000/rpc/rest_example/todo?graph=default```json{    &quot;status&quot;: true,    &quot;size&quot;: 25,    &quot;count&quot;: 2,    &quot;data&quot;: [        {            &quot;id&quot;: 1,            &quot;name&quot;: &quot;test 1&quot;,            &quot;description&quot;: &quot;this is test 1&quot;,      &quot;user&quot;: {        &quot;id&quot;: 21,        &quot;username&quot;: &quot;jsmith&quot;,        &quot;display_name&quot;: &quot;TEST USER 5&quot;,        &quot;avatar&quot;: &quot;http://localhost:8000/media/ax1fg.png&quot;      }        },        {            &quot;id&quot;: 2,            &quot;name&quot;: &quot;test 2&quot;,            &quot;description&quot;: &quot;this is test 2&quot;,      &quot;user&quot;: {        &quot;id&quot;: 21,        &quot;username&quot;: &quot;jsmith&quot;,        &quot;display_name&quot;: &quot;TEST USER 5&quot;,        &quot;avatar&quot;: &quot;http://localhost:8000/media/ax1fg.png&quot;      }        },    ]}```## More details...## RestModelThe RestModel Class is a helper class that helps existing models adapt to the REST framework.  It is not required but highly recommended.### API helpersKey methods you can override```    def on_rest_get(self, request):        # override the get method        return self.restGet(request, graph)    def on_rest_post(self, request):        # override the post method        return self.restGet(request, graph)         def on_rest_pre_save(self, request):        # called before instance saved via rest, no return        pass            def on_rest_created(self, request):        # called after new instance created via rest, no return        pass    def on_rest_saved(self, request):        # called after old instance saved via rest, no return        pass    def on_rest_delete(self, request):        can_delete = getattr(self.RestMeta, &quot;CAN_DELETE&quot;, False)        if not can_delete:            return self.restStatus(request, False, error=&quot;deletion not allowed via rest for this model.&quot;)        self.delete()        return GRAPH_HELPERS.restStatus(request, True)    @classmethod    def onRestCanSave(cls, request):        # override to validate permissions or anything if this can create or save this instance        return True            @classmethod    def on_rest_list_filter(cls, request, qset):        # override on do any pre filters, returns new qset        # qset = qset.filter(id__gt=50)        return qset            @classmethod    def on_rest_list(cls, request, qset=None):        # normally you would override on_rest_list_filter, but you could override this        return cls.restList(request, qset)        @classmethod    def on_rest_create(cls, request, pk=None):        obj = cls.createFromRequest(request)        return obj.restGet(request)```#### Creating and Saving`createFromRequest(request, **kwargs)` - this allows you to pass a request object (normally a post) and create a new model from that request.  You can also pass in any override fields after the request.```    MyModel.createFromRequest(request, owner=request.user)````saveFromRequest(request, **kwargs)` - this allows you to pass a request object (normally a post) and save data to the model from that request.  You can also pass in any override fields after the request.```    mode_instance.saveFromRequest(request, modified_by=request.user)```#### Other Helper Methods`getFromRequest(cls, model_name)` - @classmethod - attempts to get the model instance from a request, check for the classname and classname+ &quot;_id&quot; in the REQUEST params.`restGetModel(app_name, model_name)` - @staticmethod - grab Model class by app and model name.`restGetGenericModel(self, fieldname)` - grab Model class by app and model name.`restGetGenericRelation(self, fieldname)` - grab Model class by app and model name.## Returning JSON GraphGraphs can easily be built automatically from your models by setting the appropriate RestMeta properties.`getGraph(name)` - @classmethod - Specify the name of the graph you want to return.### RestMetaThis is a Property class you add to your models to define your graphs.By default a graph will return just the fields with no recurse into of Foreign models.</longdescription>
</pkgmetadata>