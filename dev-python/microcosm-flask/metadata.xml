<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># microcosm-flaskOpinionated Flask services.[![Circle CI](https://circleci.com/gh/globality-corp/microcosm-flask/tree/develop.svg?style=svg)](https://circleci.com/gh/globality-corp/microcosm-flask/tree/develop)## Conventions - Classify API endpoints according to an enumerated set of operations with well-defined naming conventions - Handle errors consistently using a top-level error and nested sub-errrors - Handle UUIDs as route path keys - Protect endpoints with basic auth - Use HAL JSON links to related resources to each other - Use Swagger to publish endpoints for interoperability - Automate generation of endpoints according to conventions:    - A health check API endpoint exposes service health    - RESTful endpoints provide CRUD operations on resources    - RESTful endpoints allows one resource to be related to another    - API discovery endpoints allow resource data to be discovered/spidered    - Swagger endpoints allow endpoint integration to be automated## SetupCreate a virtualenv```mkvirtualenv microcosm-flask```Install dependencies```pip install -U -e .```## TestsRun the tests```python setup.py nosetests```## LintingLint the code:```shellNAME=microcosm_flask ./entrypoint.sh lintNAME=microcosm_flask ./entrypoint.sh typehinting```## Configuration - The object graph's `debug` and `testing` flags are propagated to the Flask application</longdescription>
</pkgmetadata>