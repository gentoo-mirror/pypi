<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BO4E Migration Framework (bomf)BOMF is the BO4E Migration Framework.This repository contains the code of the Python package [bomf](https://pypi.org/project/bomf).![Unittests status badge](https://github.com/Hochfrequenz/bo4e_migration_framework/workflows/Unittests/badge.svg)![Coverage status badge](https://github.com/Hochfrequenz/bo4e_migration_framework/workflows/Coverage/badge.svg)![Linting status badge](https://github.com/Hochfrequenz/bo4e_migration_framework/workflows/Linting/badge.svg)![Black status badge](https://github.com/Hochfrequenz/bo4e_migration_framework/workflows/Black/badge.svg)![PyPi Status Badge](https://img.shields.io/pypi/v/bomf)## Rationalebomf is a framework, that allows its users to migrate data- from source systems (starting with the raw data extracts)- into an intermediate, common BO4E based data layer.- From there map data to individual target system data models- and finally create records in target systems (aka &quot;loading&quot;).The framework- encourages user to program consistent data processing pipelines from any source to any target system - enforces users to adapt to structured and consistent patterns- and by doing so will lead to higher chances for maintainable and reusable code.## Architeture / OverviewThe overall setup for a migration from 1-n source systems (A, B, C...) to 1-m target systems (1,2, 3...) might look like this:```mermaidgraph TD    A[Source System A] --&gt;|System A DB Dump| A2[Source A Data Model: A JSON Extract]    B[Source System B] --&gt;|System B CSV Export| B2[Source B Data Model: B CSV Files]    A2 --&gt;|SourceAToBo4eDataSetMapper| C{Intermediate BO4E Layer aka DataSets}    B2 --&gt;|SourceBToBo4eDataSetMapper| C    C --&gt;|validations| C    C --&gt;|Bo4eDataSetToTarget1Mapper| D1[Target 1 Data Model]    C --&gt;|Bo4eDataSetToTarget2Mapper| D2[Target 2 Data Model]    C --&gt;|Bo4eDataSetToTarget3Mapper| D3[Target 3 Data Model]    D1 --&gt;L1[Target 1 Loader]    D2 --&gt;L2[Target 2 Loader]    D3 --&gt;L3[Target 3 Loader]    L1 --&gt;M1[Target System 1]    L2 --&gt;M2[Target System 2]    L3 --&gt;M3[Target System 3]```The Intermediate BO4E Layer (that consists of different so called DataSets) is kind of a contract between the code that maps *from the source data model* and the code that maps *to the target data model*.### Data Migration FlowThe migration of specific data from source to target is always the same:```mermaidgraph TD    A1{Source Data 1} --&gt;|Export| B1(All source data 1 extracts)    B1 --&gt;C1[Filter on source data 1 model aka Pre-Select 1]    A2{Source Data 2} --&gt;|Export| B2(All source data 2 extracts)    B2 --&gt;C2[Filter on source data 2 model aka Pre-Select 2]    C1 --&gt;|do not match filter predicate| Z{discarded data}    C1 --&gt;|match filter criteria| M(Custom Logic: SourceDataSetToBo4EDataSetMapper)     C2 --&gt;|do not match filter predicate| Z    C2 --&gt;|match filter criteria| M    M --&gt;|mapping| E(BO4E Data Sets)    E --&gt;F[Validation]    F --&gt;|obeys a validation rule|E    F --&gt;|violate any validation rule|Z    F --&gt;|passes all validations| G[BO4E to Target Mapper]    G --&gt;|mapping| H(target data model)    H --&gt;I[Target Loader]    I --&gt;|load target model|L1[Loader: 1. load to target]    L1 --&gt;|first: load to|T{Target System}    L1 --&gt;|then|L2[Loader: 2 optionally poll until target has processed data]    L2 --&gt;|second: poll until|T    L2 --&gt;|then|L3[Loader: 3 optionally verify the data have been processed correctly]    L3 --&gt;|finally: verify|T    L3 --&gt;|verification failed|Z    L1 --&gt;|loading failed|Z    L3 --&gt;|verification successful|Y[The End.]    Z--&gt;Z1[Monitoring and Logging]    Z1--&gt;Z2[Human Analyst]    Z2 -.-&gt;|manually checks| T    Z2 -.-&gt;|feedback: heuristically define new rules for|F    Z2 -.-&gt;|feedback: heurisically define new filters for|C```## How to use this Repository on Your Machine (Development)Please follow the [instructions in our Python Template Repository](https://github.com/Hochfrequenz/python_template_repository).tl;dr: `tox`.## ContributeYou are very welcome to contribute to this template repository by opening a pull request against the main branch.</longdescription>
</pkgmetadata>