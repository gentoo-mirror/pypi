<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyTweening==========A collection of tweening / easing functions implemented in Python.Example Usage=============All tweening / easing functions are passed an argument of a float from 0.0 (for the beginning) to 1.0 (for the end) of the tween:    &gt;&gt;&gt; pytweening.linear(0.5)    0.5    &gt;&gt;&gt; pytweening.linear(0.75)    0.75    &gt;&gt;&gt; pytweening.linear(1.0)    1.0    &gt;&gt;&gt; pytweening.easeInQuad(0.5)    0.25    &gt;&gt;&gt; pytweening.easeInQuad(0.75)    0.5625    &gt;&gt;&gt; pytweening.easeInQuad(1.0)    1.0    &gt;&gt;&gt; pytweening.easeInOutSine(0.5)    0.49999999999999994    &gt;&gt;&gt; pytweening.easeInOutSine(0.75)    0.8535533905932737    &gt;&gt;&gt; pytweening.easeInOutSine(1.0)    1.0The getLine() function also provides a Bresenham line algorithm implementation:    &gt;&gt;&gt; pytweening.getLine(0, 0, 5, 10)    [(0, 0), (0, 1), (1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7), (4, 8), (4, 9), (5, 10)]The getLinePoint() function finds a point on the provided line (even if it extends before or past the start or end points):    &gt;&gt;&gt; getLinePoint(0, 0, 5, 10, 0.0)    (0.0, 0.0)    &gt;&gt;&gt; getLinePoint(0, 0, 5, 10, 0.25)    (1.25, 2.5)    &gt;&gt;&gt; getLinePoint(0, 0, 5, 10, 0.5)    (2.5, 5.0)    &gt;&gt;&gt; getLinePoint(0, 0, 5, 10, 0.75)    (3.75, 7.5)    &gt;&gt;&gt; getLinePoint(0, 0, 5, 10, 1.0)    (5.0, 10.0)Support-------If you find this project helpful and would like to support its development, [consider donating to its creator on Patreon](https://www.patreon.com/AlSweigart).</longdescription>
</pkgmetadata>