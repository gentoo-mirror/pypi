<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://secure.travis-ci.org/yourlabs/django-cities-light.svg?branch=master    :target: http://travis-ci.org/yourlabs/django-cities-light.. image:: https://img.shields.io/pypi/dm/django-cities-light.svg    :target: https://crate.io/packages/django-cities-light.. image:: https://img.shields.io/pypi/v/django-cities-light.svg    :target: https://crate.io/packages/django-cities-light.. image:: https://codecov.io/github/yourlabs/django-cities-light/coverage.svg    :target: https://codecov.io/github/yourlabs/django-cities-lightdjango-cities-light -- *Simple django-cities alternative*=========================================================This add-on provides models and commands to import country, subregion, region/state, andcity data in your database.The data is pulled from `GeoNames&lt;http://www.geonames.org/&gt;`_ and contains cities, subregions, regions/states and countries.Spatial query support is not required by this application.This application is very simple and is useful if you want to make a simpleaddress book for example. If you intend to build a fully featured spatialdatabase, you should use`django-cities&lt;https://github.com/coderholic/django-cities&gt;`_.Requirements:- Python &gt;= 3.8- Django &gt;= 3.2- MySQL or PostgreSQL or SQLite.Yes, for some reason, code that used to work on MySQL (not without pain xD)does not work anymore. So we're now using django.db.transaction.atomic whichcomes from Django 1.6 just to support MySQL quacks.Features--------- GraphQL support- Built-in admin support- Rest-Framework support- Ajax Select Lookup supportUpgrade-------See CHANGELOG.Installation------------Install django-cities-light::    pip install django-cities-lightOr the development version::    pip install -e git+git@github.com:yourlabs/django-cities-light.git#egg=cities_lightAdd `cities_light` to your `INSTALLED_APPS`.Configure filters to exclude data you don't want, ie.::    CITIES_LIGHT_TRANSLATION_LANGUAGES = ['fr', 'en']    CITIES_LIGHT_INCLUDE_COUNTRIES = ['FR']    CITIES_LIGHT_INCLUDE_CITY_TYPES = ['PPL', 'PPLA', 'PPLA2', 'PPLA3', 'PPLA4', 'PPLC', 'PPLF', 'PPLG', 'PPLL', 'PPLR', 'PPLS', 'STLMT',]Now, run migrations, it will only create tables for models that are notdisabled::    ./manage.py migrateData import/update------------------Finally, populate your database with command::    ./manage.py cities_lightThis command is well documented, consult the help with::    ./manage.py help cities_lightBy default, update procedure attempts to update all fields, including Country/Region/Subregion/City slugs. But there is an option to keep them intact::    ./manage.py cities_light --keep-slugsGet more cities---------------The configuration parameter CITIES_LIGHT_CITY_SOURCES, comes with the default valuehttp://download.geonames.org/export/dump/cities15000.zip that has cities with a populationover 15000, if you need to load cities with less population please use another source. For the listof available source please check here: http://download.geonames.org/export/dump/readme.txtUsing fixtures--------------Geonames.org is updated on daily basis and its full import is quite slow, soif you want to import the same data multiple times (for example on differentservers) it is convenient to use fixtures with the helper management command::    ./manage.py cities_light_fixtures dump    ./manage.py cities_light_fixtures loadTo reduce space, JSON fixtures are compressed with bzip2 and can be fetchedfrom any HTTP server or local filesystem.Consult the help with::    ./manage.py help cities_light_fixturesDevelopment-----------Create development virtualenv (you need to have tox installed in your base system)::    tox -e dev    source .tox/dev/bin/activateThen run the full import::    test_project/manage.py migrate    test_project/manage.py cities_lightThere are several environment variables which affect project settings (like DB_ENGINE and CI), you can find them all in test_project/settings.py.To run the test suite you need to have postgresql or mysql installed with passwordless login, or just use sqlite. Otherwise the tests which try to create/drop database will fail.Running the full test suite::    toxTo run the tests in specific environment use the following command::    tox -e py37-django31-sqliteAnd to run one specific test use this one::    tox -e py37-django31-sqlite -- cities_light/tests/test_form.py::FormTestCase::testCountryFormNameAndContinentAloneTo run it even faster, you can switch to specific tox virtualenv::    source .tox/py37-django18-sqlite/bin/activate    CI=true test_project/manage.py test cities_light.tests.test_form.FormTestCase.testCountryFormNameAndContinentAloneIf you want to build the docs, use the following steps::    source .tox/dev/bin/activate    cd docs    make htmlResources---------You could subscribe to the mailing list ask questions or just be informed ofpackage updates.- `Git graciously hosted  &lt;https://github.com/yourlabs/django-cities-light/&gt;`_ by `GitHub  &lt;http://github.com&gt;`_,- `Documentation graciously hosted  &lt;http://django-cities-light.rtfd.org&gt;`_ by `RTFD  &lt;http://rtfd.org&gt;`_,- `Package graciously hosted  &lt;http://pypi.python.org/pypi/django-cities-light/&gt;`_ by `PyPi  &lt;http://pypi.python.org/pypi&gt;`_,- `Continuous integration graciously hosted  &lt;http://travis-ci.org/yourlabs/django-cities-light&gt;`_ by `Travis-ci  &lt;http://travis-ci.org&gt;`_</longdescription>
</pkgmetadata>