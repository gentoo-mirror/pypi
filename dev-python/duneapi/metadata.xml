<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dune Analytics API[![Python 3.9](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3102/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)[![Build](https://github.com/bh2smith/duneapi/actions/workflows/pull-request.yaml/badge.svg)](https://github.com/bh2smith/duneapi/actions/workflows/pull-request.yml)A simple framework for interacting with Dune Analytics' unsupported API. The primaryclass (`DuneAPI`) of this repo is adapted fromhttps://github.com/itzmestar/duneanalytics at commitbdccd5ba543a8f3679e2c81e18cee846af47bc52-----------## Attention ⚠️This package violates Dune's [Terms of Service](https://dune.com/terms) and will soon be archived/deprecated in favour of [Dune's officially supported API](https://dune.com/docs/api/). Please visit https://github.com/cowprotocol/dune-client for an analogous API client with similar interface.------------## Import as Project Dependency```shellpip install duneapi```Then you should be able to write python scripts similar to the following:### Example UsageFill out your Dune credentials in the `.env` file. The Dune user and password arestraight-forward login credentials to Dune Analytics. The `DUNE_QUERY_ID` is an integerid found in the URL of a query when saved in the Dune interface. This should be createdbeforehand, but the same query id can be used everywhere throughout the program (as longas it is owned by the account corresponding to the user credentials provided).You do not have to provide the query id as an environment variable, but doing so, willallow you to use the same id for all fetching needs. For dashboard management, you willneed to have a unique id for each query.#### Execute Query and Fetch Results from Dune```pythonfrom duneapi.api import DuneAPIfrom duneapi.types import Network, QueryParameter, DuneRecord, DuneQueryfrom duneapi.util import open_querydef fetch_records(dune: DuneAPI) -&gt; list[DuneRecord]:    sample_query = DuneQuery.from_environment(        raw_sql=open_query(&quot;PATH_TO_SOME_SQL_FILE&quot;),        name=&quot;Sample Query&quot;,        network=Network.MAINNET,        parameters=[            QueryParameter.number_type(&quot;IntParam&quot;, 10),            QueryParameter.text_type(&quot;TextParam&quot;, &quot;aba&quot;),        ],    )    return dune.fetch(sample_query)if __name__ == &quot;__main__&quot;:    dune_connection = DuneAPI.new_from_environment()    records = fetch_records(dune_connection)    print(&quot;First result:&quot;, records[0])```#### Dashboard ManagementIt will help to get aquainted with the Dashboard configuration file found in[./example/dashboard/my_dashboard.json](./example/dashboard/_config.json). Thisessentially requires filepath and query id to existing dune queries. Generally it isexpected that you will use the family of queries contained in an existing dashboard, butthere is no actual validation. Technically one could put all queries here and refreshthem with this tool.```pythonfrom duneapi.dashboard import DuneDashboarddashboard = DuneDashboard(&quot;./example/dashboard/_config.json&quot;)dashboard.update()print(&quot;Updated&quot;, dashboard)```To fetch some sample ethereum block data, run the sample script as:```shellpython -m example.fetch```This will result in the following console logs:```got 10 records from last queryFirst record Record(    string='0x255309e019abaf74bf2d58d4020547c89f875842abae1c874fb0d5ae8eac9859',     integer=14362177,     decimal=0.14785533,     time='2022-03-10T23:50:16+00:00')```To fetch your own data follow the code outlinein [fetch.py](example/fetch.py)## Contributing and Local DevelopmentClone this Repo and install as follows.```shellpython3 -m venv venvsource ./env/bin/activatepip install -r requirements.txtcp .env.sample .env       &lt;----- Copy your Dune credentials here!```## Deployment1. Bump the version number in [setup.py](setup.py)2. Build the duneapi package `python -m build`3. Upload to pypi `twine upload dist/* `</longdescription>
</pkgmetadata>