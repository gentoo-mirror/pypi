<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Orb Python API library[![PyPI version](https://img.shields.io/pypi/v/orb-billing.svg)](https://pypi.org/project/orb-billing/)The Orb Python library provides convenient access to the Orb REST API from any Python 3.7+application. The library includes type definitions for all request params and response fields,and offers both synchronous and asynchronous clients powered by [httpx](https://github.com/encode/httpx).## DocumentationThe API documentation can be found [here](https://docs.withorb.com/reference/api-reference).## Installation```shpip install orb-billing```## UsageThe full API of this library can be found in [api.md](https://www.github.com/orbcorp/orb-python/blob/main/api.md).```pythonfrom orb import Orbclient = Orb(    # defaults to os.environ.get(&quot;ORB_API_KEY&quot;)    api_key=&quot;My API Key&quot;,)customer = client.customers.create(    email=&quot;example-customer@withorb.com&quot;,    name=&quot;My Customer&quot;,)print(customer.id)```While you can provide an `api_key` keyword argument,we recommend using [python-dotenv](https://pypi.org/project/python-dotenv/)to add `ORB_API_KEY=&quot;My API Key&quot;` to your `.env` fileso that your API Key is not stored in source control.## Async usageSimply import `AsyncOrb` instead of `Orb` and use `await` with each API call:```pythonimport asynciofrom orb import AsyncOrbclient = AsyncOrb(    # defaults to os.environ.get(&quot;ORB_API_KEY&quot;)    api_key=&quot;My API Key&quot;,)async def main() -&gt; None:    customer = await client.customers.create(        email=&quot;example-customer@withorb.com&quot;,        name=&quot;My Customer&quot;,    )    print(customer.id)asyncio.run(main())```Functionality between the synchronous and asynchronous clients is otherwise identical.## Using typesNested request parameters are [TypedDicts](https://docs.python.org/3/library/typing.html#typing.TypedDict). Responses are [Pydantic models](https://docs.pydantic.dev), which provide helper methods for things like:- Serializing back into JSON, `model.model_dump_json(indent=2, exclude_unset=True)`- Converting to a dictionary, `model.model_dump(exclude_unset=True)`Typed requests and responses provide autocomplete and documentation within your editor. If you would like to see type errors in VS Code to help catch bugs earlier, set `python.analysis.typeCheckingMode` to `basic`.## PaginationList methods in the Orb API are paginated.This library provides auto-paginating iterators with each list response, so you do not have to request successive pages manually:```pythonimport orbclient = Orb()all_coupons = []# Automatically fetches more pages as needed.for coupon in client.coupons.list():    # Do something with coupon here    all_coupons.append(coupon)print(all_coupons)```Or, asynchronously:```pythonimport asyncioimport orbclient = AsyncOrb()async def main() -&gt; None:    all_coupons = []    # Iterate through items across all pages, issuing requests as needed.    async for coupon in client.coupons.list():        all_coupons.append(coupon)    print(all_coupons)asyncio.run(main())```Alternatively, you can use the `.has_next_page()`, `.next_page_info()`, or `.get_next_page()` methods for more granular control working with pages:```pythonfirst_page = await client.coupons.list()if first_page.has_next_page():    print(f&quot;will fetch next page using these details: {first_page.next_page_info()}&quot;)    next_page = await first_page.get_next_page()    print(f&quot;number of items we just fetched: {len(next_page.data)}&quot;)# Remove `await` for non-async usage.```Or just work directly with the returned data:```pythonfirst_page = await client.coupons.list()print(    f&quot;next page cursor: {first_page.pagination_metadata.next_cursor}&quot;)  # =&gt; &quot;next page cursor: ...&quot;for coupon in first_page.data:    print(coupon.id)# Remove `await` for non-async usage.```## Nested paramsNested parameters are dictionaries, typed using `TypedDict`, for example:```pythonfrom orb import Orbclient = Orb()customer = client.customers.create(    email=&quot;example-customer@withorb.com&quot;,    name=&quot;My Customer&quot;,    billing_address={        &quot;city&quot;: &quot;New York&quot;,        &quot;country&quot;: &quot;USA&quot;,        &quot;line1&quot;: &quot;123 Example Street&quot;,    },)print(customer.id)```## Handling errorsWhen the library is unable to connect to the API (for example, due to network connection problems or a timeout), a subclass of `orb.APIConnectionError` is raised.When the API returns a non-success status code (that is, 4xx or 5xxresponse), a subclass of `orb.APIStatusError` is raised, containing `status_code` and `response` properties.All errors inherit from `orb.APIError`.```pythonimport orbfrom orb import Orbclient = Orb()try:    client.customers.create(        email=&quot;example-customer@withorb.com&quot;,        name=&quot;My Customer&quot;,    )except orb.APIConnectionError as e:    print(&quot;The server could not be reached&quot;)    print(e.__cause__)  # an underlying Exception, likely raised within httpx.except orb.RateLimitError as e:    print(&quot;A 429 status code was received; we should back off a bit.&quot;)except orb.APIStatusError as e:    print(&quot;Another non-200-range status code was received&quot;)    print(e.status_code)    print(e.response)```Error codes are as followed:| Status Code | Error Type                 || ----------- | -------------------------- || 400         | `BadRequestError`          || 401         | `AuthenticationError`      || 403         | `PermissionDeniedError`    || 404         | `NotFoundError`            || 422         | `UnprocessableEntityError` || 429         | `RateLimitError`           || &gt;=500       | `InternalServerError`      || N/A         | `APIConnectionError`       |### RetriesCertain errors are automatically retried 2 times by default, with a short exponential backoff.Connection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict,429 Rate Limit, and &gt;=500 Internal errors are all retried by default.You can use the `max_retries` option to configure or disable retry settings:```pythonfrom orb import Orb# Configure the default for all requests:client = Orb(    # default is 2    max_retries=0,)# Or, configure per-request:client.with_options(max_retries=5).customers.create(    email=&quot;example-customer@withorb.com&quot;,    name=&quot;My Customer&quot;,)```### TimeoutsBy default requests time out after 1 minute. You can configure this with a `timeout` option,which accepts a float or an [`httpx.Timeout`](https://www.python-httpx.org/advanced/#fine-tuning-the-configuration) object:```pythonfrom orb import Orb# Configure the default for all requests:client = Orb(    # default is 60s    timeout=20.0,)# More granular control:client = Orb(    timeout=httpx.Timeout(60.0, read=5.0, write=10.0, connect=2.0),)# Override per-request:client.with_options(timeout=5 * 1000).customers.create(    email=&quot;example-customer@withorb.com&quot;,    name=&quot;My Customer&quot;,)```On timeout, an `APITimeoutError` is thrown.Note that requests that time out are [retried twice by default](#retries).## Advanced### LoggingWe use the standard library [`logging`](https://docs.python.org/3/library/logging.html) module.You can enable logging by setting the environment variable `ORB_LOG` to `debug`.```shell$ export ORB_LOG=debug```### How to tell whether `None` means `null` or missingIn an API response, a field may be explicitly `null`, or missing entirely; in either case, its value is `None` in this library. You can differentiate the two cases with `.model_fields_set`:```pyif response.my_field is None:  if 'my_field' not in response.model_fields_set:    print('Got json like {}, without a &quot;my_field&quot; key present at all.')  else:    print('Got json like {&quot;my_field&quot;: null}.')```### Accessing raw response data (e.g. headers)The &quot;raw&quot; Response object can be accessed by prefixing `.with_raw_response.` to any HTTP method call.```pyfrom orb import Orbclient = Orb()response = client.customers.with_raw_response.create(    email=&quot;example-customer@withorb.com&quot;,    name=&quot;My Customer&quot;,)print(response.headers.get('X-My-Header'))customer = response.parse()  # get the object that `customers.create()` would have returnedprint(customer.id)```These methods return an [`APIResponse`](https://github.com/orbcorp/orb-python/tree/main/src/orb/_response.py) object.### Configuring the HTTP clientYou can directly override the [httpx client](https://www.python-httpx.org/api/#client) to customize it for your use case, including:- Support for proxies- Custom transports- Additional [advanced](https://www.python-httpx.org/advanced/#client-instances) functionality```pythonimport httpxfrom orb import Orbclient = Orb(    # Or use the `ORB_BASE_URL` env var    base_url=&quot;http://my.test.server.example.com:8083&quot;,    http_client=httpx.Client(        proxies=&quot;http://my.test.proxy.example.com&quot;,        transport=httpx.HTTPTransport(local_address=&quot;0.0.0.0&quot;),    ),)```### Managing HTTP resourcesBy default the library closes underlying HTTP connections whenever the client is [garbage collected](https://docs.python.org/3/reference/datamodel.html#object.__del__). You can manually close the client using the `.close()` method if desired, or with a context manager that closes when exiting.## VersioningThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:1. Changes that only affect static types, without breaking runtime behavior.2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals)_.3. Changes that we do not expect to impact the vast majority of users in practice.We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.We are keen for your feedback; please open an [issue](https://www.github.com/orbcorp/orb-python/issues) with questions, bugs, or suggestions.## RequirementsPython 3.7 or higher.</longdescription>
</pkgmetadata>