<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Ansimarkup&lt;p&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/ansimarkup&quot;&gt;&lt;img alt=&quot;pypi version&quot; src=&quot;https://img.shields.io/pypi/v/ansimarkup.svg&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/gvalkov/python-ansimarkup/actions/workflows/tests.yml?query=branch:main&quot;&gt;&lt;img alt=&quot;Build status&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/gvalkov/python-ansimarkup/tests.yml?branch=main&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/gvalkov/python-ansimarkup/blob/main/LICENSE.txt&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/pypi/l/ansimarkup&quot;&gt;&lt;/a&gt;&lt;/p&gt;Ansimarkup is an XML-like markup for producing colored terminal text.``` pythonfrom ansimarkup import ansiprint as printprint(&quot;&lt;b&gt;bold text&lt;/b&gt;&quot;))print(&quot;&lt;red&gt;red text&lt;/red&gt;&quot;, &quot;&lt;red,green&gt;red text on a green background&lt;/red,green&gt;&quot;)print(&quot;&lt;fg #ffaf00&gt;orange text&lt;/fg #ffaf00&gt;&quot;)```## InstallationThe latest stable version of ansimarkup can be installed from PyPi:``` bashpython3 -m pip install ansimarkup```## Usage### Basic``` pythonfrom ansimarkup import parse, ansiprint# parse() converts the tags to the corresponding ansi escape sequence.parse(&quot;&lt;b&gt;bold&lt;/b&gt; &lt;d&gt;dim&lt;/d&gt;&quot;)# ansiprint() works exactly like print(), but first runs parse() on all arguments.ansiprint(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;, &quot;&lt;d&gt;dim&lt;/d&gt;&quot;)ansiprint(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;, &quot;&lt;d&gt;dim&lt;/d&gt;&quot;, sep=&quot;:&quot;, file=sys.stderr)```### Colors and styles``` python# Colors may be specified in one of several ways.parse(&quot;&lt;red&gt;red foreground&lt;/red&gt;&quot;)parse(&quot;&lt;RED&gt;red background&lt;/RED&gt;&quot;)parse(&quot;&lt;fg red&gt;red foreground&lt;/fg red&gt;&quot;)parse(&quot;&lt;bg red&gt;red background&lt;/bg red&gt;&quot;)# Xterm, hex and rgb colors are accepted by the &lt;fg&gt; and &lt;bg&gt; tags.parse(&quot;&lt;fg 86&gt;aquamarine foreground&lt;/fg 86&gt;&quot;)parse(&quot;&lt;bg #00005f&gt;dark blue background&lt;/bg #00005f&gt;&quot;)parse(&quot;&lt;fg 0,95,0&gt;dark green foreground&lt;/fg 0,95,0&gt;&quot;)# Tags may be nested.parse(&quot;&lt;r&gt;&lt;Y&gt;red text on a yellow foreground&lt;/Y&gt;&lt;/r&gt;&quot;)# The above may be more concisely written as:parse(&quot;&lt;r,y&gt;red text on a yellow background&lt;/r,y&gt;&quot;)# This shorthand also supports style tags.parse(&quot;&lt;b,r,y&gt;bold red text on a yellow background&lt;/b,r,y&gt;&quot;)parse(&quot;&lt;b,r,&gt;bold red text&lt;/b,r,&gt;&quot;)parse(&quot;&lt;b,,y&gt;bold regular text on a yellow background&lt;/b,,y&gt;&quot;)# Unrecognized tags are left as-is.parse(&quot;&lt;b&gt;&lt;element1&gt;&lt;/element1&gt;&lt;/b&gt;&quot;)```For a list of markup tags, please refer to [tags.py].### User-defined tagsCustom tags or overrides for existing tags may be defined by creating anew `AnsiMarkup` instance:``` pythonfrom ansimarkup import AnsiMarkup, parseuser_tags = {    # Add a new tag (e.g. we want &lt;info&gt; to expand to &quot;&lt;bold&gt;&lt;green&gt;&quot;).    &quot;info&quot;: parse(&quot;&lt;b&gt;&lt;g&gt;&quot;)    # The ansi escape sequence can be used directly.    &quot;info&quot;: &quot;e\x1b[32m\x1b[1m&quot;,    # Tag names may also be callables.    &quot;err&quot;:  lambda: parse(&quot;&lt;r&gt;&quot;)    # Colors may also be given convenient tag names.    &quot;orange&quot;: parse(&quot;&lt;fg #d78700&gt;&quot;),    # User-defined tags always take precedence over existing tags.    &quot;bold&quot;: parse(&quot;&lt;dim&gt;&quot;)}am = AnsiMarkup(tags=user_tags)am.parse(&quot;&lt;info&gt;bold green&lt;/info&gt;&quot;)am.ansiprint(&quot;&lt;err&gt;red&lt;/err&gt;&quot;)# Calling the instance is equivalent to calling its parse method.am(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;) == am.parse(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;)```### Alignment and lengthAligning formatted strings can be challenging because the length of therendered string is different that the number of printable characters.Consider this example:``` pycon&gt;&gt;&gt; a = '| {:30} |'.format('abc')&gt;&gt;&gt; b = '| {:30} |'.format(parse('&lt;b&gt;abc&lt;/b&gt;'))&gt;&gt;&gt; print(a, b, sep='\n')| abc                    || abc                            |```This can be addressed by using the `ansistring` function or the`AnsiMarkup.string(markup)` method, which has the following usefulproperties:``` pycon&gt;&gt;&gt; s = ansistring('&lt;b&gt;abc&lt;/b&gt;')&gt;&gt;&gt; print(repr(s), '-&gt;', s)&lt;b&gt;abc&lt;/b&gt; -&gt; abc  # abc is printed in bold&gt;&gt;&gt; len(s), len(am.parse('&lt;b&gt;abc&lt;/b&gt;'), s.delta3, 11, 8```With the help of the `delta` property, it is easy to align the stringsin the above example:``` pycon&gt;&gt;&gt; s = ansistring('&lt;b&gt;abc&lt;/b&gt;')&gt;&gt;&gt; a = '| {:{width}} |'.format('abc', width=30)&gt;&gt;&gt; b = '| {:{width}} |'.format(s, width=(30 + s.delta))&gt;&gt;&gt; print(a, b, sep='\n')| abc                            || abc                            |```### Escaping raw stringsBoth `ansiprint()` and `parse()` pass arguments of type `raw` untouched.``` pycon&gt;&gt;&gt; from ansimarkup import ansiprint, parse, raw&gt;&gt;&gt; ansiprint(&quot;&lt;b&gt;&lt;r&gt;&quot;, raw(&quot;&lt;l type='V'&gt;2.0&lt;/l&gt;&quot;), &quot;&lt;/r&gt;&lt;/b&gt;&quot;) &lt;l type='V'&gt;2.0&lt;/l&gt;  # printed in bold red (note the leading space caused)&gt;&gt;&gt; s = parse(&quot;&lt;b&gt;&lt;r&gt;&quot;, raw(&quot;&lt;l type='V'&gt;2.0&lt;/l&gt;&quot;), &quot;&lt;/r&gt;&lt;/b&gt;&quot;)&gt;&gt;&gt; print(s)&lt;l type='V'&gt;2.0&lt;/l&gt;  # printed in bold red```Building a template string may also be sufficient:``` pycon&gt;&gt;&gt; from ansimarkup import parse&gt;&gt;&gt; s = parse(&quot;&lt;b&gt;&lt;r&gt;%s&lt;/r&gt;&lt;/b&gt;&quot;)&gt;&gt;&gt; print(s % &quot;&lt;l type='V'&gt;2.0&lt;/l&gt;&quot;)&lt;l type='V'&gt;2.0&lt;/l&gt;  # printed in bold red```### Other featuresThe default tag separators can be changed by passing the `tag_sep`argument to `AnsiMarkup`:``` pythonfrom ansimarkup import AnsiMarkupam = AnsiMarkup(tag_sep=&quot;{}&quot;)am.parse(&quot;{b}{r}bold red{/b}{/r}&quot;)```Markup tags can be removed using the `strip()` method:``` pythonfrom ansimarkup import AnsiMarkupam = AnsiMarkup()am.strip(&quot;&lt;b&gt;&lt;r&gt;bold red&lt;/b&gt;&lt;/r&gt;&quot;)```The `strict` option instructs the parser to raise `MismatchedTag` ifopening tags don\'t have corresponding closing tags:``` pythonfrom ansimarkup import AnsiMarkupam = AnsiMarkup(strict=True)am.parse(&quot;&lt;r&gt;&lt;b&gt;bold red&quot;)# ansimarkup.MismatchedTag: opening tag &quot;&lt;r&gt;&quot; has no corresponding closing tag```### Command-lineAnsimarkup may also be used on the command-line. This works as if allarguments were passed to `ansiprint()`:    $ python -m ansimarkup    Usage: python -m ansimarkup [&lt;arg&gt; [&lt;arg&gt; ...]]    Example usage:      python -m ansimarkup '&lt;b&gt;Bold&lt;/b&gt;' '&lt;r&gt;Red&lt;/r&gt;'      python -m ansimarkup '&lt;b&gt;&lt;r&gt;Bold Red&lt;/r&gt;&lt;/b&gt;'      python -m ansimarkup &lt; input-with-markup.txt      echo '&lt;b&gt;Bold&lt;/b&gt;' | python -m ansimarkup### Logging formatterAnsimarkup also comes with a formatter for the standard library `logging` module. It can be used as:``` pythonimport loggingfrom ansimarkup.logformatter import AnsiMarkupFormatterlog = logging.getLogger()hdl = logging.StreamHandler()fmt = AnsiMarkupFormatter()hdl.setFormatter(fmt)log.addHandler(hdl)log.info(&quot;&lt;b&gt;bold text&lt;/b&gt;&quot;)```### WindowsAnsimarkup uses the [colorama] library internally, which means thatWindows support for ansi escape sequences is available by first running:``` pythonimport coloramacolorama.init()```For more information on Windows support, consult the \&quot;Usage\&quot; sectionof the [colorama] documentation.## PerformanceWhile the focus of ansimarkup is convenience, it does try to keepprocessing to a minimum. The [benchmark.py] script attempts to benchmarkdifferent ansi escape code libraries:    Benchmark 1: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;&lt;/r&gt;      colorama     0.1959 μs      colr         1.8022 μs      ansimarkup   3.1681 μs      termcolor    5.3734 μs      rich         9.0673 μs      pastel       10.7440 μs      plumbum      14.0620 μs        Benchmark 2: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;red&lt;/r&gt;&lt;b&gt;bold&lt;/b&gt;      colorama     0.5360 μs      colr         4.5575 μs      ansimarkup   4.5727 μs      termcolor    15.8462 μs      rich         21.2631 μs      pastel       22.9391 μs      plumbum      33.1179 μs## LimitationsAnsimarkup is a simple wrapper around [colorama]. It does very little inthe way of validating that markup strings are well-formed. This is aconscious decision with the goal of keeping things simple and fast.Unbalanced nesting, such as in the following example, will produceincorrect output:    &lt;r&gt;&lt;Y&gt;1&lt;/r&gt;2&lt;/Y&gt;## Todo-   Many corner cases remain to be fixed.-   More elaborate testing. The current test suite mostly covers the \&quot;happy paths\&quot;.-   Replace `tag_list.index` in `sub_end` with something more efficient (i.e. something like an ordered MultiDict).## Similar libraries-   [pastel][]: bring colors to your terminal-   [plumbum.colors][]: small yet feature-rich library for shell script-like programs in Python-   [colr][]: easy terminal colors, with chainable methods-   [rich][]: rich text and beautiful formatting in the terminal (see `rich.print()` and `rich.markup.render()`)## LicenseAnsimarkup is released under the terms of the [Revised BSD License].  [tags.py]: https://github.com/gvalkov/python-ansimarkup/blob/main/ansimarkup/tags.py  [colorama]: https://pypi.python.org/pypi/colorama  [benchmark.py]: https://github.com/gvalkov/python-ansimarkup/blob/main/tests/benchmark.py  [pastel]: https://github.com/sdispater/pastel  [plumbum.colors]: https://plumbum.readthedocs.io/en/latest/cli.html#colors  [colr]: https://pypi.python.org/pypi/Colr/  [rich]: https://github.com/Textualize/rich  [Revised BSD License]: https://github.com/gvalkov/python-ansimarkup/blob/main/LICENSE.txt</longdescription>
</pkgmetadata>