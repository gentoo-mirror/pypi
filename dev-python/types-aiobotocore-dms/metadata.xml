<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-dms&quot;&gt;&lt;/a&gt;# types-aiobotocore-dms[![PyPI - types-aiobotocore-dms](https://img.shields.io/pypi/v/types-aiobotocore-dms.svg?color=blue)](https://pypi.org/project/types-aiobotocore-dms)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-dms.svg?color=blue)](https://pypi.org/project/types-aiobotocore-dms)[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-dms?color=blue)](https://pypistats.org/packages/types-aiobotocore-dms)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.DatabaseMigrationService 2.5.0](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dms.html#DatabaseMigrationService)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.13.0](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-dms docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dms/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-dms](#types-aiobotocore-dms)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `DatabaseMigrationService` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[dms]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[dms]'# standalone installationpython -m pip install types-aiobotocore-dms```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-dms```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[dms]` in your environment:```bashpython -m pip install 'types-aiobotocore[dms]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[dms]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[dms]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[dms]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[dms]` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[dms]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[dms]` in your environment:```bashpython -m pip install 'types-aiobotocore[dms]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[dms]` in your environment:```bashpython -m pip install 'types-aiobotocore[dms]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`DatabaseMigrationServiceClient` provides annotations for`session.create_client(&quot;dms&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_dms import DatabaseMigrationServiceClientsession = get_session()async with session.create_client(&quot;dms&quot;) as client:    client: DatabaseMigrationServiceClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_dms.paginator` module contains type annotations for allpaginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_dms import DatabaseMigrationServiceClientfrom types_aiobotocore_dms.paginator import (    DescribeCertificatesPaginator,    DescribeConnectionsPaginator,    DescribeEndpointTypesPaginator,    DescribeEndpointsPaginator,    DescribeEventSubscriptionsPaginator,    DescribeEventsPaginator,    DescribeOrderableReplicationInstancesPaginator,    DescribeReplicationInstancesPaginator,    DescribeReplicationSubnetGroupsPaginator,    DescribeReplicationTaskAssessmentResultsPaginator,    DescribeReplicationTasksPaginator,    DescribeSchemasPaginator,    DescribeTableStatisticsPaginator,)session = get_session()async with session.create_client(&quot;dms&quot;) as client:    client: DatabaseMigrationServiceClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    describe_certificates_paginator: DescribeCertificatesPaginator = client.get_paginator(        &quot;describe_certificates&quot;    )    describe_connections_paginator: DescribeConnectionsPaginator = client.get_paginator(        &quot;describe_connections&quot;    )    describe_endpoint_types_paginator: DescribeEndpointTypesPaginator = client.get_paginator(        &quot;describe_endpoint_types&quot;    )    describe_endpoints_paginator: DescribeEndpointsPaginator = client.get_paginator(        &quot;describe_endpoints&quot;    )    describe_event_subscriptions_paginator: DescribeEventSubscriptionsPaginator = (        client.get_paginator(&quot;describe_event_subscriptions&quot;)    )    describe_events_paginator: DescribeEventsPaginator = client.get_paginator(&quot;describe_events&quot;)    describe_orderable_replication_instances_paginator: DescribeOrderableReplicationInstancesPaginator = client.get_paginator(        &quot;describe_orderable_replication_instances&quot;    )    describe_replication_instances_paginator: DescribeReplicationInstancesPaginator = (        client.get_paginator(&quot;describe_replication_instances&quot;)    )    describe_replication_subnet_groups_paginator: DescribeReplicationSubnetGroupsPaginator = (        client.get_paginator(&quot;describe_replication_subnet_groups&quot;)    )    describe_replication_task_assessment_results_paginator: DescribeReplicationTaskAssessmentResultsPaginator = client.get_paginator(        &quot;describe_replication_task_assessment_results&quot;    )    describe_replication_tasks_paginator: DescribeReplicationTasksPaginator = client.get_paginator(        &quot;describe_replication_tasks&quot;    )    describe_schemas_paginator: DescribeSchemasPaginator = client.get_paginator(&quot;describe_schemas&quot;)    describe_table_statistics_paginator: DescribeTableStatisticsPaginator = client.get_paginator(        &quot;describe_table_statistics&quot;    )```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`types_aiobotocore_dms.waiter` module contains type annotations for allwaiters.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_dms.client import DatabaseMigrationServiceClientfrom types_aiobotocore_dms.waiter import (    EndpointDeletedWaiter,    ReplicationInstanceAvailableWaiter,    ReplicationInstanceDeletedWaiter,    ReplicationTaskDeletedWaiter,    ReplicationTaskReadyWaiter,    ReplicationTaskRunningWaiter,    ReplicationTaskStoppedWaiter,    TestConnectionSucceedsWaiter,)session = get_session()async with session.create_client(&quot;dms&quot;) as client:    client: DatabaseMigrationServiceClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    endpoint_deleted_waiter: EndpointDeletedWaiter = client.get_waiter(&quot;endpoint_deleted&quot;)    replication_instance_available_waiter: ReplicationInstanceAvailableWaiter = client.get_waiter(        &quot;replication_instance_available&quot;    )    replication_instance_deleted_waiter: ReplicationInstanceDeletedWaiter = client.get_waiter(        &quot;replication_instance_deleted&quot;    )    replication_task_deleted_waiter: ReplicationTaskDeletedWaiter = client.get_waiter(        &quot;replication_task_deleted&quot;    )    replication_task_ready_waiter: ReplicationTaskReadyWaiter = client.get_waiter(        &quot;replication_task_ready&quot;    )    replication_task_running_waiter: ReplicationTaskRunningWaiter = client.get_waiter(        &quot;replication_task_running&quot;    )    replication_task_stopped_waiter: ReplicationTaskStoppedWaiter = client.get_waiter(        &quot;replication_task_stopped&quot;    )    test_connection_succeeds_waiter: TestConnectionSucceedsWaiter = client.get_waiter(        &quot;test_connection_succeeds&quot;    )```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_dms.literals` module contains literals extracted from shapesthat can be used in user code for type checking.```pythonfrom types_aiobotocore_dms.literals import (    AuthMechanismValueType,    AuthTypeValueType,    CannedAclForObjectsValueType,    CharLengthSemanticsType,    CollectorStatusType,    CompressionTypeValueType,    DataFormatValueType,    DatePartitionDelimiterValueType,    DatePartitionSequenceValueType,    DescribeCertificatesPaginatorName,    DescribeConnectionsPaginatorName,    DescribeEndpointTypesPaginatorName,    DescribeEndpointsPaginatorName,    DescribeEventSubscriptionsPaginatorName,    DescribeEventsPaginatorName,    DescribeOrderableReplicationInstancesPaginatorName,    DescribeReplicationInstancesPaginatorName,    DescribeReplicationSubnetGroupsPaginatorName,    DescribeReplicationTaskAssessmentResultsPaginatorName,    DescribeReplicationTasksPaginatorName,    DescribeSchemasPaginatorName,    DescribeTableStatisticsPaginatorName,    DmsSslModeValueType,    EncodingTypeValueType,    EncryptionModeValueType,    EndpointDeletedWaiterName,    EndpointSettingTypeValueType,    KafkaSecurityProtocolType,    MessageFormatValueType,    MigrationTypeValueType,    NestingLevelValueType,    ParquetVersionValueType,    PluginNameValueType,    RedisAuthTypeValueType,    RefreshSchemasStatusTypeValueType,    ReleaseStatusValuesType,    ReloadOptionValueType,    ReplicationEndpointTypeValueType,    ReplicationInstanceAvailableWaiterName,    ReplicationInstanceDeletedWaiterName,    ReplicationTaskDeletedWaiterName,    ReplicationTaskReadyWaiterName,    ReplicationTaskRunningWaiterName,    ReplicationTaskStoppedWaiterName,    SafeguardPolicyType,    SourceTypeType,    SslSecurityProtocolValueType,    StartReplicationTaskTypeValueType,    TargetDbTypeType,    TestConnectionSucceedsWaiterName,    VersionStatusType,    DatabaseMigrationServiceServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    WaiterName,    RegionName,)def check_value(value: AuthMechanismValueType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`types_aiobotocore_dms.type_defs` module contains structures and shapesassembled to typed dictionaries for additional type checking.```pythonfrom types_aiobotocore_dms.type_defs import (    AccountQuotaTypeDef,    TagTypeDef,    ApplyPendingMaintenanceActionMessageRequestTypeDef,    ResponseMetadataTypeDef,    AvailabilityZoneTypeDef,    CancelReplicationTaskAssessmentRunMessageRequestTypeDef,    CertificateTypeDef,    CollectorHealthCheckTypeDef,    InventoryDataTypeDef,    CollectorShortInfoResponseTypeDef,    ConnectionTypeDef,    DmsTransferSettingsTypeDef,    DocDbSettingsTypeDef,    DynamoDbSettingsTypeDef,    ElasticsearchSettingsTypeDef,    GcpMySQLSettingsTypeDef,    IBMDb2SettingsTypeDef,    KafkaSettingsTypeDef,    KinesisSettingsTypeDef,    MicrosoftSQLServerSettingsTypeDef,    MongoDbSettingsTypeDef,    MySQLSettingsTypeDef,    NeptuneSettingsTypeDef,    OracleSettingsTypeDef,    PostgreSQLSettingsTypeDef,    RedisSettingsTypeDef,    RedshiftSettingsTypeDef,    S3SettingsTypeDef,    SybaseSettingsTypeDef,    EventSubscriptionTypeDef,    CreateFleetAdvisorCollectorRequestRequestTypeDef,    DatabaseInstanceSoftwareDetailsResponseTypeDef,    ServerShortInfoResponseTypeDef,    DatabaseShortInfoResponseTypeDef,    DeleteCertificateMessageRequestTypeDef,    DeleteCollectorRequestRequestTypeDef,    DeleteConnectionMessageRequestTypeDef,    DeleteEndpointMessageRequestTypeDef,    DeleteEventSubscriptionMessageRequestTypeDef,    DeleteFleetAdvisorDatabasesRequestRequestTypeDef,    DeleteReplicationInstanceMessageRequestTypeDef,    DeleteReplicationSubnetGroupMessageRequestTypeDef,    DeleteReplicationTaskAssessmentRunMessageRequestTypeDef,    DeleteReplicationTaskMessageRequestTypeDef,    DescribeApplicableIndividualAssessmentsMessageRequestTypeDef,    FilterTypeDef,    PaginatorConfigTypeDef,    WaiterConfigTypeDef,    DescribeEndpointSettingsMessageRequestTypeDef,    EndpointSettingTypeDef,    SupportedEndpointTypeTypeDef,    EventCategoryGroupTypeDef,    EventTypeDef,    DescribeFleetAdvisorLsaAnalysisRequestRequestTypeDef,    FleetAdvisorLsaAnalysisResponseTypeDef,    FleetAdvisorSchemaObjectResponseTypeDef,    DescribeOrderableReplicationInstancesMessageRequestTypeDef,    OrderableReplicationInstanceTypeDef,    DescribeRefreshSchemasStatusMessageRequestTypeDef,    RefreshSchemasStatusTypeDef,    DescribeReplicationInstanceTaskLogsMessageRequestTypeDef,    ReplicationInstanceTaskLogTypeDef,    DescribeReplicationTaskAssessmentResultsMessageRequestTypeDef,    ReplicationTaskAssessmentResultTypeDef,    ReplicationTaskIndividualAssessmentTypeDef,    DescribeSchemasMessageRequestTypeDef,    TableStatisticsTypeDef,    ListTagsForResourceMessageRequestTypeDef,    ModifyEventSubscriptionMessageRequestTypeDef,    ModifyReplicationInstanceMessageRequestTypeDef,    ModifyReplicationSubnetGroupMessageRequestTypeDef,    ModifyReplicationTaskMessageRequestTypeDef,    MoveReplicationTaskMessageRequestTypeDef,    PendingMaintenanceActionTypeDef,    RebootReplicationInstanceMessageRequestTypeDef,    RefreshSchemasMessageRequestTypeDef,    TableToReloadTypeDef,    RemoveTagsFromResourceMessageRequestTypeDef,    ReplicationPendingModifiedValuesTypeDef,    VpcSecurityGroupMembershipTypeDef,    ReplicationTaskAssessmentRunProgressTypeDef,    ReplicationTaskStatsTypeDef,    SchemaShortInfoResponseTypeDef,    StartReplicationTaskAssessmentMessageRequestTypeDef,    StartReplicationTaskAssessmentRunMessageRequestTypeDef,    StartReplicationTaskMessageRequestTypeDef,    StopReplicationTaskMessageRequestTypeDef,    TestConnectionMessageRequestTypeDef,    UpdateSubscriptionsToEventBridgeMessageRequestTypeDef,    AddTagsToResourceMessageRequestTypeDef,    CreateEventSubscriptionMessageRequestTypeDef,    CreateReplicationInstanceMessageRequestTypeDef,    CreateReplicationSubnetGroupMessageRequestTypeDef,    CreateReplicationTaskMessageRequestTypeDef,    ImportCertificateMessageRequestTypeDef,    CreateFleetAdvisorCollectorResponseTypeDef,    DeleteFleetAdvisorDatabasesResponseTypeDef,    DescribeAccountAttributesResponseTypeDef,    DescribeApplicableIndividualAssessmentsResponseTypeDef,    DescribeSchemasResponseTypeDef,    EmptyResponseMetadataTypeDef,    ListTagsForResourceResponseTypeDef,    ReloadTablesResponseTypeDef,    RunFleetAdvisorLsaAnalysisResponseTypeDef,    UpdateSubscriptionsToEventBridgeResponseTypeDef,    SubnetTypeDef,    DeleteCertificateResponseTypeDef,    DescribeCertificatesResponseTypeDef,    ImportCertificateResponseTypeDef,    CollectorResponseTypeDef,    DeleteConnectionResponseTypeDef,    DescribeConnectionsResponseTypeDef,    TestConnectionResponseTypeDef,    CreateEndpointMessageRequestTypeDef,    EndpointTypeDef,    ModifyEndpointMessageRequestTypeDef,    CreateEventSubscriptionResponseTypeDef,    DeleteEventSubscriptionResponseTypeDef,    DescribeEventSubscriptionsResponseTypeDef,    ModifyEventSubscriptionResponseTypeDef,    DatabaseResponseTypeDef,    DescribeCertificatesMessageRequestTypeDef,    DescribeConnectionsMessageRequestTypeDef,    DescribeEndpointTypesMessageRequestTypeDef,    DescribeEndpointsMessageRequestTypeDef,    DescribeEventCategoriesMessageRequestTypeDef,    DescribeEventSubscriptionsMessageRequestTypeDef,    DescribeEventsMessageRequestTypeDef,    DescribeFleetAdvisorCollectorsRequestRequestTypeDef,    DescribeFleetAdvisorDatabasesRequestRequestTypeDef,    DescribeFleetAdvisorSchemaObjectSummaryRequestRequestTypeDef,    DescribeFleetAdvisorSchemasRequestRequestTypeDef,    DescribePendingMaintenanceActionsMessageRequestTypeDef,    DescribeReplicationInstancesMessageRequestTypeDef,    DescribeReplicationSubnetGroupsMessageRequestTypeDef,    DescribeReplicationTaskAssessmentRunsMessageRequestTypeDef,    DescribeReplicationTaskIndividualAssessmentsMessageRequestTypeDef,    DescribeReplicationTasksMessageRequestTypeDef,    DescribeTableStatisticsMessageRequestTypeDef,    DescribeCertificatesMessageDescribeCertificatesPaginateTypeDef,    DescribeConnectionsMessageDescribeConnectionsPaginateTypeDef,    DescribeEndpointTypesMessageDescribeEndpointTypesPaginateTypeDef,    DescribeEndpointsMessageDescribeEndpointsPaginateTypeDef,    DescribeEventSubscriptionsMessageDescribeEventSubscriptionsPaginateTypeDef,    DescribeEventsMessageDescribeEventsPaginateTypeDef,    DescribeOrderableReplicationInstancesMessageDescribeOrderableReplicationInstancesPaginateTypeDef,    DescribeReplicationInstancesMessageDescribeReplicationInstancesPaginateTypeDef,    DescribeReplicationSubnetGroupsMessageDescribeReplicationSubnetGroupsPaginateTypeDef,    DescribeReplicationTaskAssessmentResultsMessageDescribeReplicationTaskAssessmentResultsPaginateTypeDef,    DescribeReplicationTasksMessageDescribeReplicationTasksPaginateTypeDef,    DescribeSchemasMessageDescribeSchemasPaginateTypeDef,    DescribeTableStatisticsMessageDescribeTableStatisticsPaginateTypeDef,    DescribeConnectionsMessageTestConnectionSucceedsWaitTypeDef,    DescribeEndpointsMessageEndpointDeletedWaitTypeDef,    DescribeReplicationInstancesMessageReplicationInstanceAvailableWaitTypeDef,    DescribeReplicationInstancesMessageReplicationInstanceDeletedWaitTypeDef,    DescribeReplicationTasksMessageReplicationTaskDeletedWaitTypeDef,    DescribeReplicationTasksMessageReplicationTaskReadyWaitTypeDef,    DescribeReplicationTasksMessageReplicationTaskRunningWaitTypeDef,    DescribeReplicationTasksMessageReplicationTaskStoppedWaitTypeDef,    DescribeEndpointSettingsResponseTypeDef,    DescribeEndpointTypesResponseTypeDef,    DescribeEventCategoriesResponseTypeDef,    DescribeEventsResponseTypeDef,    DescribeFleetAdvisorLsaAnalysisResponseTypeDef,    DescribeFleetAdvisorSchemaObjectSummaryResponseTypeDef,    DescribeOrderableReplicationInstancesResponseTypeDef,    DescribeRefreshSchemasStatusResponseTypeDef,    RefreshSchemasResponseTypeDef,    DescribeReplicationInstanceTaskLogsResponseTypeDef,    DescribeReplicationTaskAssessmentResultsResponseTypeDef,    DescribeReplicationTaskIndividualAssessmentsResponseTypeDef,    DescribeTableStatisticsResponseTypeDef,    ResourcePendingMaintenanceActionsTypeDef,    ReloadTablesMessageRequestTypeDef,    ReplicationTaskAssessmentRunTypeDef,    ReplicationTaskTypeDef,    SchemaResponseTypeDef,    ReplicationSubnetGroupTypeDef,    DescribeFleetAdvisorCollectorsResponseTypeDef,    CreateEndpointResponseTypeDef,    DeleteEndpointResponseTypeDef,    DescribeEndpointsResponseTypeDef,    ModifyEndpointResponseTypeDef,    DescribeFleetAdvisorDatabasesResponseTypeDef,    ApplyPendingMaintenanceActionResponseTypeDef,    DescribePendingMaintenanceActionsResponseTypeDef,    CancelReplicationTaskAssessmentRunResponseTypeDef,    DeleteReplicationTaskAssessmentRunResponseTypeDef,    DescribeReplicationTaskAssessmentRunsResponseTypeDef,    StartReplicationTaskAssessmentRunResponseTypeDef,    CreateReplicationTaskResponseTypeDef,    DeleteReplicationTaskResponseTypeDef,    DescribeReplicationTasksResponseTypeDef,    ModifyReplicationTaskResponseTypeDef,    MoveReplicationTaskResponseTypeDef,    StartReplicationTaskAssessmentResponseTypeDef,    StartReplicationTaskResponseTypeDef,    StopReplicationTaskResponseTypeDef,    DescribeFleetAdvisorSchemasResponseTypeDef,    CreateReplicationSubnetGroupResponseTypeDef,    DescribeReplicationSubnetGroupsResponseTypeDef,    ModifyReplicationSubnetGroupResponseTypeDef,    ReplicationInstanceTypeDef,    CreateReplicationInstanceResponseTypeDef,    DeleteReplicationInstanceResponseTypeDef,    DescribeReplicationInstancesResponseTypeDef,    ModifyReplicationInstanceResponseTypeDef,    RebootReplicationInstanceResponseTypeDef,)def get_structure() -&gt; AccountQuotaTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers a drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from the documentation (blame `botocore` docs if types  are incorrect).- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.session` calls- Auto discovery of types for `session.client` and `session.session` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-dms` version is the same as related `aiobotocore` versionand follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dms/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>