<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyConsoleIOTools![PyPI - Downloads](https://img.shields.io/pypi/dm/consoleiotools.svg)![GitHub release](https://img.shields.io/github/release/kyan001/PyConsoleIOTools.svg)[![GitHub license](https://img.shields.io/github/license/kyan001/PyConsoleIOTools.svg)](https://github.com/kyan001/PyConsoleIOTools/blob/master/LICENSE)## Installation```shpip install consoleiotools  # installpip install --upgrade consoleiotools  # updatepython -m consoleiotools  # examples```## Get Started```pythonimport consoleiotools as citprint(cit.__version__)```## Prints on Screen```python&gt;&gt;&gt; cit.start()# blank line&gt;&gt;&gt; cit.title('Session Name')+--------------+| SESSION NAME |+--------------+&gt;&gt;&gt; cit.echo('Hello World')| Hello World&gt;&gt;&gt; cit.echo('Hello World', pre='say', bar='!')! (Say) Hello World&gt;&gt;&gt; cit.ask('Hello World')| (?) Hello World&gt;&gt;&gt; cit.info('Hello World')| (Info) Hello World&gt;&gt;&gt; cit.warn('Hello World')| (Warning) Hello World&gt;&gt;&gt; cit.err('Hello World')| (Error) Hello World&gt;&gt;&gt; cit.mute('Hello World')| Hello World  # muted by dim&gt;&gt;&gt; cit.print(var)  # print variable...&gt;&gt;&gt; cit.markdown(&quot;# Header&quot;)  # print markdown+--------------+|    Header    |+--------------+&gt;&gt;&gt; cit.rule()  # print horizontal rule----------------------------------------&gt;&gt;&gt; cit.rule(&quot;Title&quot;, style=&quot;blue&quot;, align=&quot;center&quot;)  # print horizontal rule with Title. align = center|left|right---------------- Title ----------------&gt;&gt;&gt; cit.panel(&quot;Panel&quot;, title=&quot;Panel Title&quot;, subtitle=&quot;Panel Subtitle&quot;)  # print text in a panel+---------- Panel Title ----------+| Panel                           |  # full width+-------- Panel Subtitle ---------+&gt;&gt;&gt; cit.panel(&quot;Panel&quot;, title=&quot;Panel Title&quot;, subtitle=&quot;Panel Subtitle&quot;, expand=False, style=&quot;blue&quot;)  # fit panel to text+- Panel Title -+  # blue| Panel         |+- Panel Subtit-+&gt;&gt;&gt; cit.end()`&gt;&gt;&gt; cit.br()# blank line&gt;&gt;&gt; cit.br(2)# blank line# blank line&gt;&gt;&gt; for var in cit.track(iterables, &quot;Progress&quot;): pass| : Progress ---------------------===================  52% 0:00:52 - 52/100&gt;&gt;&gt; cit.__ascii__ = True  # use ascii chars only.```## Get User Input```python&gt;&gt;&gt; cit.get_input()  # Get user input from stdin&gt; Hello World'Hello World'&gt;&gt;&gt; cit.get_input(&quot;Question?&quot;)  # With a question| (?) Question?&gt; Yes'Yes'&gt;&gt;&gt; cit.get_input(prompt=&quot;Answer:&quot;)  # With a customized prompt.Answer: Apple'Apple'&gt;&gt;&gt; cit.get_input(&quot;Continue?&quot;, default=&quot;yes&quot;)  # With a default answer.| (?) Continue?&gt; (yes)  # Entered nothing'yes'&gt;&gt;&gt; cit.get_input(strip=False)  # Do not remove leading and trailing whitespaces from user input.&gt;       # Whitespaces'    '&gt;&gt;&gt; cit.get_choice(['Apple', 'Google'])  # Enter number to select.|  1) Apple|  2) Google&gt; 2'Google'&gt;&gt;&gt; cit.get_choice(['Apple', 'Google'])  # Enter string is ok too.|  1) Apple|  2) Google&gt; Google'Google'&gt;&gt;&gt; cit.get_choice(['Apple', 'Google'], exitable=True)  # Add a choice of exit in menu.|  1) Apple|  2) Google|  0) ** EXIT **&gt; 0None&gt;&gt;&gt; cit.get_choices(['Apple', 'Google'])  # Multiple Selection|  1) [ ] Apple|  2) [ ] Google&gt; 1  # Enter number to check or uncheck selections|  1) [+] Apple|  2) [ ] Google|  0) ** DONE **&gt; Google  # Enter string is ok too.|  1) [+] Apple|  2) [+] Google|  0) ** DONE **&gt; 0  # Enter 0 when done.['Apple', 'Google']  # return [] is no selections.&gt;&gt;&gt; cit.get_choices(['Apple', 'Google'], allable=True)  # Add a choice of select all in menu.|  a) ** ALL **|  1) [ ] Apple|  2) [ ] Google&gt; a  # Enter `a` to check all. If `a` is in choices, enter `all`.|  a) ** ALL **|  1) [+] Apple|  2) [+] Google|  0) ** DONE **&gt; 0['Apple', 'Google']&gt;&gt;&gt; cit.get_choices(['Apple', 'Google'], exitable=True)  # Add a choice of exit in menu.|  1) [ ] Apple|  2) [ ] Google|  0) ** EXIT **&gt; 0[]  # Empty list returned.```## File IO```python&gt;&gt;&gt; cit.read_file('/path/to/file')'File contents'&gt;&gt;&gt; cit.read_file('/path/to/file', with_encoding=True)('File contents', 'utf-8')&gt;&gt;&gt; cit.write_file('/path/to/file', 'Contents')  # Append content to file.8  # writed bytes&gt;&gt;&gt; cit.write_file('/path/to/file', 'Contents', overwrite=True)  # Overwrite if file exists.8  # writed bytes```## Controls```python&gt;&gt;&gt; cit.pause()| Press [Enter] to Continue...&gt;&gt;&gt; cit.bye()# exit&gt;&gt;&gt; cit.bye(0)# exit with code 0&gt;&gt;&gt; cit.bye('Seeya')Seeya# exit```## Decorators```python@cit.as_session('Hello')def my_func():    cit.echo('World')&gt;&gt;&gt; my_func()+---------+| HELLO() |+---------+| World`@cit.as_sessiondef underscore_orCamel():    pass&gt;&gt;&gt; underscore_orCamel()+-----------------------+| UNDERSCORE OR CAMEL() |+-----------------------+````</longdescription>
</pkgmetadata>