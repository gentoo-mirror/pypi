<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pydantic-SQLAlchemy&lt;a href=&quot;https://github.com/tiangolo/pydantic-sqlalchemy/actions?query=workflow%3ATest&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/tiangolo/pydantic-sqlalchemy/workflows/Test/badge.svg&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tiangolo/pydantic-sqlalchemy/actions?query=workflow%3APublish&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/tiangolo/pydantic-sqlalchemy/workflows/Publish/badge.svg&quot; alt=&quot;Publish&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/tiangolo/pydantic-sqlalchemy&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/codecov/c/github/tiangolo/pydantic-sqlalchemy?color=%2334D058&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/pydantic-sqlalchemy&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/pydantic-sqlalchemy?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;Tools to generate Pydantic models from SQLAlchemy models.Still experimental.## How to useQuick example:```Pythonfrom typing import Listfrom pydantic_sqlalchemy import sqlalchemy_to_pydanticfrom sqlalchemy import Column, ForeignKey, Integer, String, create_enginefrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import Session, relationship, sessionmakerBase = declarative_base()engine = create_engine(&quot;sqlite://&quot;, echo=True)class User(Base):    __tablename__ = &quot;users&quot;    id = Column(Integer, primary_key=True)    name = Column(String)    fullname = Column(String)    nickname = Column(String)    addresses = relationship(        &quot;Address&quot;, back_populates=&quot;user&quot;, cascade=&quot;all, delete, delete-orphan&quot;    )class Address(Base):    __tablename__ = &quot;addresses&quot;    id = Column(Integer, primary_key=True)    email_address = Column(String, nullable=False)    user_id = Column(Integer, ForeignKey(&quot;users.id&quot;))    user = relationship(&quot;User&quot;, back_populates=&quot;addresses&quot;)PydanticUser = sqlalchemy_to_pydantic(User)PydanticAddress = sqlalchemy_to_pydantic(Address)class PydanticUserWithAddresses(PydanticUser):    addresses: List[PydanticAddress] = []Base.metadata.create_all(engine)LocalSession = sessionmaker(bind=engine)db: Session = LocalSession()ed_user = User(name=&quot;ed&quot;, fullname=&quot;Ed Jones&quot;, nickname=&quot;edsnickname&quot;)address = Address(email_address=&quot;ed@example.com&quot;)address2 = Address(email_address=&quot;eddy@example.com&quot;)ed_user.addresses = [address, address2]db.add(ed_user)db.commit()def test_pydantic_sqlalchemy():    user = db.query(User).first()    pydantic_user = PydanticUser.from_orm(user)    data = pydantic_user.dict()    assert data == {        &quot;fullname&quot;: &quot;Ed Jones&quot;,        &quot;id&quot;: 1,        &quot;name&quot;: &quot;ed&quot;,        &quot;nickname&quot;: &quot;edsnickname&quot;,    }    pydantic_user_with_addresses = PydanticUserWithAddresses.from_orm(user)    data = pydantic_user_with_addresses.dict()    assert data == {        &quot;fullname&quot;: &quot;Ed Jones&quot;,        &quot;id&quot;: 1,        &quot;name&quot;: &quot;ed&quot;,        &quot;nickname&quot;: &quot;edsnickname&quot;,        &quot;addresses&quot;: [            {&quot;email_address&quot;: &quot;ed@example.com&quot;, &quot;id&quot;: 1, &quot;user_id&quot;: 1},            {&quot;email_address&quot;: &quot;eddy@example.com&quot;, &quot;id&quot;: 2, &quot;user_id&quot;: 1},        ],    }```## Release Notes### Latest Changes### 0.0.9* ‚ú® Add `poetry-version-plugin`, remove `importlib-metadata` dependency. PR [#32](https://github.com/tiangolo/pydantic-sqlalchemy/pull/32) by [@tiangolo](https://github.com/tiangolo).### 0.0.8.post1* üíö Fix setting up Poetry for GitHub Action Publish. PR [#23](https://github.com/tiangolo/pydantic-sqlalchemy/pull/23) by [@tiangolo](https://github.com/tiangolo).### 0.0.8* ‚¨ÜÔ∏è Upgrade `importlib-metadata` to 3.0.0. PR [#22](https://github.com/tiangolo/pydantic-sqlalchemy/pull/22) by [@tiangolo](https://github.com/tiangolo).* üë∑ Add GitHub Action latest-changes. PR [#20](https://github.com/tiangolo/pydantic-sqlalchemy/pull/20) by [@tiangolo](https://github.com/tiangolo).* üíö Fix GitHub Actions Poetry setup. PR [#21](https://github.com/tiangolo/pydantic-sqlalchemy/pull/21) by [@tiangolo](https://github.com/tiangolo).### 0.0.7* Update requirements of `importlib-metadata` to support the latest version `2.0.0`. PR [#11](https://github.com/tiangolo/pydantic-sqlalchemy/pull/11).### 0.0.6* Add support for SQLAlchemy extended types like [sqlalchemy-utc: UtcDateTime](https://github.com/spoqa/sqlalchemy-utc). PR [#9](https://github.com/tiangolo/pydantic-sqlalchemy/pull/9).### 0.0.5* Exclude columns before checking their Python types. PR [#5](https://github.com/tiangolo/pydantic-sqlalchemy/pull/5) by [@ZachMyers3](https://github.com/ZachMyers3).### 0.0.4* Do not include SQLAlchemy defaults in Pydantic models. PR [#4](https://github.com/tiangolo/pydantic-sqlalchemy/pull/4).### 0.0.3* Add support for `exclude` to exclude columns from Pydantic model. PR [#3](https://github.com/tiangolo/pydantic-sqlalchemy/pull/3).* Add support for overriding the Pydantic `config`. PR [#1](https://github.com/tiangolo/pydantic-sqlalchemy/pull/1) by [@pyropy](https://github.com/pyropy).* Add CI with GitHub Actions. PR [#2](https://github.com/tiangolo/pydantic-sqlalchemy/pull/2).## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>