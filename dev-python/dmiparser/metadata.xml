<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-dmiparser## AboutThis parse `dmidecode` output to JSON text.## Installation### PyPI```shellpip3 install -U dmiparser```### RPM```shellgit clone https://github.com/Arondight/python-dmiparser.gitcd ./python-dmiparser/python3 ./setup.py bdist --format=rpmsudo dnf install ./dist/dmiparser-*.noarch.rpm```&gt; Tip: Requires the `rpm-build` package in your Linux distribution.## Usage### Python 3 script#### DmiParserThis accepts a `str` (with the output of `dmidecode`) as argument and converts it to JSON text.```python#!/usr/bin/env python3import jsonfrom dmiparser import DmiParserfrom functools import partialdef report(*args: str) -&gt; None:    &quot;&quot;&quot;report texts with format    @param args: text string    &quot;&quot;&quot;    br = lambda e: print(&quot;-&quot; * e)    brn = partial(br, 80)    brn()    for e in args:        print(e)        brn()if &quot;__main__&quot; == __name__:    text = (        &quot;# dmidecode 3.0\n&quot;        &quot;Getting SMBIOS data from sysfs.\n&quot;        &quot;SMBIOS 2.7 present.\n&quot;        &quot;\n&quot;        &quot;Handle 0x0003, DMI type 2, 17 bytes\n&quot;        &quot;Base Board Information\n&quot;        &quot;\tManufacturer: Intel Corporation\n&quot;        &quot;\tProduct Name: S2600WT2R\n&quot;        &quot;\tVersion: H21573-372\n&quot;        &quot;\tSerial Number: BQWL81150522\n&quot;        &quot;\tAsset Tag: Base Board Asset Tag\n&quot;        &quot;\tFeatures:\n&quot;        &quot;\t\tBoard is a hosting board\n&quot;        &quot;\t\tBoard is replaceable\n&quot;        &quot;\tLocation In Chassis: Part Component\n&quot;        &quot;\tChassis Handle: 0x0000\n&quot;        &quot;\tType: Motherboard\n&quot;        &quot;\tContained Object Handles: 0\n&quot;        &quot;\n&quot;    )    # parser = DmiParser(text)    parser = DmiParser(text, sort_keys=True, indent=2)    parsedStr = str(parser)  # get str    parsedObj = json.loads(str(parser))  # get object    report(parsedStr, parsedObj)```#### DmiDecoder (the default wrapper)This run `dmidecode` and converting the output of the command to JSON text.```pythonfrom dmiparser.dmidecoder import DmiDecoderfrom functools import partialdef report(*args: str) -&gt; None:    &quot;&quot;&quot;report texts with format    @param args: text string    &quot;&quot;&quot;    br = lambda e: print(&quot;-&quot; * e)    brn = partial(br, 80)    brn()    for e in args:        print(e)        brn()def getCpuInfo(dmidecoder) -&gt; str:    &quot;&quot;&quot;Get CPU information, will return text like below.    CPU1:        Family: Xeon        Version: Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz        Voltage: 1.8 V        Speed: 2200 MHz/4000 MHz        Status: Populated, Enabled        Core: 10/10        Thread: 20    CPU2:        Family: Xeon        Version: Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz        Voltage: 1.8 V        Speed: 2200 MHz/4000 MHz        Status: Populated, Enabled        Core: 10/10        Thread: 20    @param: dmidecode: DmiDecode object    @return: text of CPU information    &quot;&quot;&quot;    text = &quot;&quot;    for id, name in dmidecoder.sections:        def getFirst(*args):            vals = dmidecoder.getProp(*args, id=id, name=name)            return vals[0] if len(vals) &gt; 0 else None        text += &quot;{}:\n&quot;.format(getFirst(&quot;Socket Designation&quot;))        text += &quot;\tFamily: {}\n&quot;.format(getFirst(&quot;Family&quot;))        text += &quot;\tVersion: {}\n&quot;.format(getFirst(&quot;Version&quot;))        text += &quot;\tVoltage: {}\n&quot;.format(getFirst(&quot;Voltage&quot;))        text += &quot;\tSpeed: {}/{}\n&quot;.format(getFirst(&quot;Current Speed&quot;), getFirst(&quot;Max Speed&quot;))        text += &quot;\tStatus: {}\n&quot;.format(getFirst(&quot;Status&quot;))        text += &quot;\tCore: {}/{}\n&quot;.format(getFirst(&quot;Core Enabled&quot;), getFirst(&quot;Core Count&quot;))        text += &quot;\tThread: {}\n&quot;.format(getFirst(&quot;Thread Count&quot;))    return textif &quot;__main__&quot; == __name__:    # dmidecoder = DmiDecoder()    dmidecoder4 = DmiDecoder(&quot;-t 4&quot;, sort_keys=True, indent=2)  # Type 4 is Processor    report(dmidecoder4.text, str(dmidecoder4.data), getCpuInfo(dmidecoder4))```&gt; Tip: Superuser permissions are required here to run `dmidecode`.### Executable command#### dmiparserThis read output of `dmidecode` from pipe and print it as JSON text.```shellsudo dmidecode | dmiparsersudo dmidecode -t 4 | dmiparser --format``````shellsudo dmidecode &gt;/tmp/dmidecode.txtdmiparser &lt;/tmp/dmidecode.txt```&gt; Tip: you can run `dmiparser` module as a script (use `python3 -m dmiparser` instead of `dmiparser` command).#### dmidecoderThis run `dmidecode` and print the output as JSON text.```shellsudo dmidecodersudo dmidecoder --arguments &quot;-t 4&quot; --format```&gt; Tip: you can run `dmiparser.dmidecoder` module as a script (use `python3 -m dmiparser.dmidecoder` instead&gt; of `dmidecoder` command).## Development### Test```shelltox```### Format```shellblack -l 120 ./dmiparser/ ./tests/```## License[MIT LICENSE](https://github.com/Arondight/python-dmiparser/blob/master/LICENSE).</longdescription>
</pkgmetadata>