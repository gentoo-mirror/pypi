<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GDEY075Z08 Driver## What's thisI was doing some hobby project when I found thatmy newly bought e-ink display has no driver implementedin python, which is the best choice for me to accomplishthe project## PINsTo use this library, you have to follow some hard-coded rules,which I know is not good, but I'm too lazy to improve```+-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+| BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |+-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+|     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     ||   2 |   8 |   SDA.1 |   IN | 1 |  3 || 4  |   |      | 5v      |     |     ||   3 |   9 |   SCL.1 |   IN | 1 |  5 || 6  |   |      | 0v      |     |     ||   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | ALT5 | TxD     | 15  | 14  ||     |     |      0v |      |   |  9 || 10 | 1 | ALT5 | RxD     | 16  | 15  ||  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  ||  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     ||  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  ||     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  ||  10 |  12 |    MOSI | ALT0 | 0 | 19 || 20 |   |      | 0v      |     |     ||   9 |  13 |    MISO | ALT0 | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  ||  11 |  14 |    SCLK | ALT0 | 0 | 23 || 24 | 1 | OUT  | CE0     | 10  | 8   ||     |     |      0v |      |   | 25 || 26 | 1 | OUT  | CE1     | 11  | 7   ||   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   ||   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     ||   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  ||  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     ||  19 |  24 | GPIO.24 |  OUT | 1 | 35 || 36 | 1 | OUT  | GPIO.27 | 27  | 16  ||  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  ||     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |+-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+| BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |+-----+-----+---------+------+---+---Pi 3---+---+------+---------+-----+-----+```- VCC -&gt; 3.3- GND -&gt; GND- DIN -&gt; MOSI- CLK -&gt; SCLK- CS -&gt; 24 (Physical, BCM: CE0, 8)- D/C -&gt; 22 (Physical, BCM: 25)- RES -&gt; 11 (Physical, BCM: 17)- BUSY -&gt; 18 (Physical, BCM: 24)## How to useHere's an example```pythonfrom gdey075z08_driver import driverfrom PIL import Imagefrom PIL import ImageDrawfrom PIL import ImageFont#import imagedataEPD_WIDTH = 800EPD_HEIGHT = 480def main(epd):    # For simplicity, the arguments are explicit numerical coordinates    image = Image.new('L', (EPD_WIDTH, EPD_HEIGHT), 255)    # 255: clear the frame    draw = ImageDraw.Draw(image)    font = ImageFont.truetype('/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf', 24)    draw.rectangle((0, 6, 640, 40), fill = 127)    draw.text((200, 10), 'e-Paper demo', font = font, fill = 255)    draw.rectangle((200, 80, 600, 280), fill = 127)    draw.chord((240, 120, 580, 220), 0, 360, fill = 255)    draw.rectangle((20, 80, 160, 280), fill = 0)    draw.chord((40, 80, 180, 220), 0, 360, fill = 127)    epd.display_frame(epd.get_frame_buffer(image))    #image = Image.open('800x480.bmp')    #epd.display_frame(epd.get_frame_buffer(image))    # You can get frame buffer from an image or import the buffer directly:    #epd.display_frame(imagedata.MONOCOLOR_BITMAP)if __name__ == '__main__':    epd = driver.EPD()    epd.init()    try:        main(epd)    finally:        epd.sleep()```If you break your display when using this library,please raise an issue so that I won't break my own## License```MIT LicenseCopyright (c) 2023 zhufucdevPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.```</longdescription>
</pkgmetadata>