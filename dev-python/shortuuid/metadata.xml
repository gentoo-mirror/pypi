<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Description===========`shortuuid` is a simple python library that generates concise, unambiguous, URL-safeUUIDs.Often, one needs to use non-sequential IDs in places where users will see them, but theIDs must be as concise and easy to use as possible.  `shortuuid` solves this problem bygenerating uuids using Python's built-in `uuid` module and then translating them tobase57 using lowercase and uppercase letters and digits, and removing similar-lookingcharacters such as l, 1, I, O and 0.[![image](https://travis-ci.org/skorokithakis/shortuuid.svg?branch=master)](https://travis-ci.org/skorokithakis/shortuuid)Installation------------To install `shortuuid` you need:-   Python 3.x.If you have the dependencies, you have multiple options of installation:-   With pip (preferred), do `pip install shortuuid`.-   With setuptools, do `easy_install shortuuid`.-   To install the source, download it from    https://github.com/stochastic-technologies/shortuuid and run `python setup.py    install`.Usage-----To use `shortuuid`, just import it in your project like so:```python&gt;&gt;&gt; import shortuuid```You can then generate a short UUID:```python&gt;&gt;&gt; shortuuid.uuid()'vytxeTZskVKR7C7WgdSP3d'```If you prefer a version 5 UUID, you can pass a name (DNS or URL) to the call and it willbe used as a namespace (`uuid.NAMESPACE_DNS` or `uuid.NAMESPACE_URL`) for the resultingUUID:```python&gt;&gt;&gt; shortuuid.uuid(name=&quot;example.com&quot;)'exu3DTbj2ncsn9tLdLWspw'&gt;&gt;&gt; shortuuid.uuid(name=&quot;&lt;http://example.com&gt;&quot;)'shortuuid.uuid(name=&quot;&lt;http://example.com&gt;&quot;)'```You can also generate a cryptographically secure random string (using `os.urandom()`internally) with:```python&gt;&gt;&gt; shortuuid.ShortUUID().random(length=22)'RaF56o2r58hTKT7AYS9doj'```To see the alphabet that is being used to generate new UUIDs:```python&gt;&gt;&gt; shortuuid.get_alphabet()'23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'```If you want to use your own alphabet to generate UUIDs, use `set_alphabet()`:```python&gt;&gt;&gt; shortuuid.set_alphabet(&quot;aaaaabcdefgh1230123&quot;)&gt;&gt;&gt; shortuuid.uuid()'0agee20aa1hehebcagddhedddc0d2chhab3b'````shortuuid` will automatically sort and remove duplicates from your alphabet to ensureconsistency:```python&gt;&gt;&gt; shortuuid.get_alphabet()'0123abcdefgh'```If the default 22 digits are too long for you, you can get shorter IDs by justtruncating the string to the desired length. The IDs won't be universally unique anylonger, but the probability of a collision will still be very low.To serialize existing UUIDs, use `encode()` and `decode()`:```python&gt;&gt;&gt; import uuid&gt;&gt;&gt; u = uuid.uuid4()&gt;&gt;&gt; uUUID('6ca4f0f8-2508-4bac-b8f1-5d1e3da2247a')&gt;&gt;&gt; s = shortuuid.encode(u)&gt;&gt;&gt; s'MLpZDiEXM4VsUryR9oE8uc'&gt;&gt;&gt; shortuuid.decode(s) == uTrue&gt;&gt;&gt; short = s[:7]&gt;&gt;&gt; short'MLpZDiE'&gt;&gt;&gt; h = shortuuid.decode(short)UUID('00000000-0000-0000-0000-009a5b27f8b9')&gt;&gt;&gt; shortuuid.decode(shortuuid.encode(h)) == hTrue```Class-based usage-----------------If you need to have various alphabets per-thread, you can use the `ShortUUID` class,like so:```python&gt;&gt;&gt; su = shortuuid.ShortUUID(alphabet=&quot;01345678&quot;)&gt;&gt;&gt; su.uuid()'034636353306816784480643806546503818874456'&gt;&gt;&gt; su.get_alphabet()'01345678'&gt;&gt;&gt; su.set_alphabet(&quot;21345687654123456&quot;)&gt;&gt;&gt; su.get_alphabet()'12345678'```Command-line usage------------------`shortuuid` provides a simple way to generate a short UUID in a terminal:```bash$ shortuuidfZpeF6gcskHbSpTgpQCkcJ```Django field------------`shortuuid` includes a Django field that generates random short UUIDs by default, foryour convenience:```pythonfrom shortuuid.django_fields import ShortUUIDFieldclass MyModel(models.Model):    # A primary key ID of length 16 and a short alphabet.    id = ShortUUIDField(        length=16,        max_length=40,        prefix=&quot;id_&quot;,        alphabet=&quot;abcdefg1234&quot;,        primary_key=True,    )    # A short UUID of length 22 and the default alphabet.    api_key = ShortUUIDField()```The field is the same as the `CharField`, with a `length` argument (the length of theID), an `alphabet` argument, and the `default` argument removed. Everything else isexactly the same, e.g. `index`, `help_text`, `max_length`, etc.Compatibility note------------------Versions of ShortUUID prior to 1.0.0 generated UUIDs with their MSB last, i.e. reversed.This was later fixed, but if you have some UUIDs stored as a string with the old method,you need to pass `legacy=True` to `decode()` when converting your strings back to UUIDs.That option will go away in the future, so you will want to convert your UUIDs tostrings using the new method. This can be done like so:```python&gt;&gt;&gt; new_uuid_str = encode(decode(old_uuid_str, legacy=True))```License-------`shortuuid` is distributed under the BSD license.</longdescription>
</pkgmetadata>