<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>configurator============|CircleCI|_  |Docs|_.. |CircleCI| image:: https://circleci.com/gh/simplistix/configurator/tree/master.svg?style=shield.. _CircleCI: https://circleci.com/gh/simplistix/configurator/tree/master.. |Docs| image:: https://readthedocs.org/projects/configurator/badge/?version=latest.. _Docs: http://configurator.readthedocs.org/en/latest/This is a Python library for building a configuration storefrom one or more layered configuration sources.These are most commonly files, with yaml, toml and json support includedand other formats easily supported with plugins.It provides an easy interface for accessing configuration informationsourced from overlaid config files or mapped in from environment variablesor command line options.Configuration information is also available as nested, simple python data types so thatyou can validate the schema of your configuration using the tool of your choice.Quickstart~~~~~~~~~~.. invisible-code-block: python    fs.create_file('/etc/my_app/config.yaml',                   contents='cache:\n  location: /var/my_app/\n')    fs.create_dir('/var/logs/myapp/')    replace('os.environ.MYAPP_THREADS', '2', strict=False)    replace('os.environ.MYAPP_CACHE_DIRECTORY', '/var/logs/myapp/', strict=False)    replace('sys.argv', ['myapp.py', '--threads', '3', '--max-files', '200'])    from pprint import pprintTo install the library, go for:.. code-block:: bash  pip install configurator[yaml,toml]Here's how you would handle a layered set of defaults, system-wide configand then optional per-user config:.. code-block:: python    from configurator import Config    defaults = Config({        'cache': {            'location': '/tmp/my_app',            'max_files': 100,        },        'banner': 'default banner',        'threads': 1,    })    system = Config.from_path('/etc/my_app/config.yaml')    user = Config.from_path('~/.my_app.yaml', optional=True)    config = defaults + system + userNow, if we wanted configuration from the environment and command linearguments to override those provided in configuration files, we could do soas follows:.. code-block:: python    import os    from argparse import ArgumentParser    from configurator import convert, target, required    config.merge(os.environ, {        convert('MYAPP_THREADS', int): 'threads',        required('MYAPP_CACHE_DIRECTORY'): 'cache.location',    })    parser = ArgumentParser()    parser.add_argument('--threads', type=int)    parser.add_argument('--max-files', type=int)    args = parser.parse_args()    config.merge(args, {        'threads': 'threads',        'max_files': 'cache.max_files',    })To check the configuration we've accumulated is sensible we can use a data validation librarysuch as `Voluptuous`__:__ https://github.com/alecthomas/voluptuous.. code-block:: python    from os.path import exists    from voluptuous import Schema, All, Required, PathExists    schema = Schema({        'cache': {'location': All(str, PathExists()), 'max_files': int},        'banner': Required(str),        'threads': Required(int),        })    schema(config.data)So, with all of the above, we could use the following sources of configuration:&gt;&gt;&gt; import os, sys&gt;&gt;&gt; print(open('/etc/my_app/config.yaml').read())cache:  location: /var/my_app/&lt;BLANKLINE&gt;&gt;&gt;&gt; os.environ['MYAPP_THREADS']'2'&gt;&gt;&gt; os.environ['MYAPP_CACHE_DIRECTORY']'/var/logs/myapp/'&gt;&gt;&gt; sys.argv['myapp.py', '--threads', '3', '--max-files', '200']With the above sources of configuration, we'd end up with a configuration store that we can use asfollows:&gt;&gt;&gt; config.cache.location'/var/logs/myapp/'&gt;&gt;&gt; config.cache.max_files200&gt;&gt;&gt; config.banner'default banner'&gt;&gt;&gt; config.threads3</longdescription>
</pkgmetadata>