<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TP ImporterThis package is used for importing our main Titelplanung Excel files;&lt;br&gt;as this data is used in different systems this package provides adapters to use the imported data within different products&lt;br&gt;## UsageUsage Example (Transaktional - Feature):```def import_tp_data_for_mam():    &quot;&quot;&quot;    importiert TP-Daten mit den f√ºrs MAM genutzten Keys    &quot;&quot;&quot;    tp_path = &quot;G:\Listen\TPDD aktuell absolutiert.xlsm&quot;    tp_data = TP_Importer().get_tp_data_from_file(tp_path)    tp_data_mam = Adapter_For_MAM().transform(tp_data)    for title in tp_data_mam:        # do something with titleif __name__ == '__main__':    tp_data_mam = import_tp_data_for_mam()```Usage Example for TVTP Transaktional:```def _get_data(self) -&gt; dict:    &quot;&quot;&quot;    diese Methode liest die Daten aus der TV Titelplanung ein    :return: Dict (one entry per series with the series-Basis-VendorID as key) - die Daten zu den Staffeln        kann man als Liste von Dicts unter dem Key &quot;seasons&quot; aufrufen        (auch wieder als Dict mit Key = Season-Basis-VID),        die zu den Episoden sind im Staffel-Dict als Liste von Dicts unter dem Key &quot;episodes&quot; zu finden        (auch wieder als Dict mit Key = Episode-Basis-VID)    &quot;&quot;&quot;    filepath = &quot;G:\Listen\TV Titelplanung DD_absolutiert_v2.xlsm&quot;    tp_data = TVTP_Importer(        valid_statuses=(            &quot;ok&quot;,            &quot;change&quot;,            &quot;new&quot;,            &quot;alt/keine Rechte&quot;,            &quot;canceled&quot;,            &quot;INDIZIERT&quot;,            &quot;no avail&quot;,            &quot;Rights expired&quot;,            &quot;ausgelaufen&quot;,        )    ).get_tp_data_from_file(filepath)    return tp_datatp_data = self._get_date()for vendor_id, series in tqdm(tp_data.items()):    # do something for series    for vendor_id_season, season in series.get('seasons').items():        # do something for seasons        for vendor_id_episode, episode in season.get('episodes').items():            # do something for episodes```Usage Example for Channels (Feature):```channel_tp_data_feature = dict()importer = TP_Importer_Channels(        valid_statuses=((&quot;ok&quot;, &quot;change&quot;, &quot;new&quot;))    )path = 'G:\Listen\Titelplanung Channels aktuell_absolutiert_new.xlsm'tp_data = importer.get_tp_data_from_file(path)print(tp_data.keys())for channel_type, channel_titles in tp_data.items():    # durch alle Channels iterieren    for title in tqdm(channel_titles):        # durch Titel in jeweiligem Channel iterieren```Usage Example for Channels (TV):```channel_tp_data_feature = dict()importer = TVTP_Importer_Channels(        valid_statuses=((&quot;ok&quot;, &quot;change&quot;, &quot;new&quot;))    )path = 'G:\Listen\Titelplanung Channels aktuell_absolutiert_new.xlsm'tp_data = importer.get_tp_data_from_file(path)print(tp_data.keys())for channel_type, channel_titles in tp_data.items():    # durch alle Channels iterieren    for vendor_id, series in tqdm(channel_titles.items()):        # do something for series        for vendor_id_season, season in series.get('seasons').items():            # do something for seasons            for vendor_id_episode, episode in season.get('episodes').items():                # do something for episodes```</longdescription>
</pkgmetadata>