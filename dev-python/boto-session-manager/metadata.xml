<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/aws-samples/boto-session-manager-project/workflows/CI/badge.svg    :target: https://github.com/aws-samples/boto-session-manager-project/actions?query=workflow:CI.. image:: https://img.shields.io/pypi/v/boto_session_manager.svg    :target: https://pypi.python.org/pypi/boto_session_manager.. image:: https://img.shields.io/pypi/l/boto_session_manager.svg    :target: https://pypi.python.org/pypi/boto_session_manager.. image:: https://img.shields.io/pypi/pyversions/boto_session_manager.svg    :target: https://pypi.python.org/pypi/boto_session_manager.. image:: https://img.shields.io/pypi/dm/boto_session_manager.svg    :target: https://pypi.python.org/pypi/boto_session_manager.. image:: https://img.shields.io/badge/STAR_Me_on_GitHub!--None.svg?style=social    :target: https://github.com/aws-samples/boto-session-manager-project------.. image:: https://img.shields.io/badge/Link-Install-blue.svg    :target: `install`_.. image:: https://img.shields.io/badge/Link-GitHub-blue.svg    :target: https://github.com/aws-samples/boto-session-manager-project.. image:: https://img.shields.io/badge/Link-Submit_Issue-blue.svg    :target: https://github.com/aws-samples/boto-session-manager-project/issues.. image:: https://img.shields.io/badge/Link-Request_Feature-blue.svg    :target: https://github.com/aws-samples/boto-session-manager-project/issues.. image:: https://img.shields.io/badge/Link-Download-blue.svg    :target: https://pypi.org/pypi/boto_session_manager#filesWelcome to ``boto_session_manager`` Documentation==============================================================================About ``boto_session_manager``------------------------------------------------------------------------------``boto_session_manager`` is a light weight, zero dependency python library that simplify managing your AWS boto3 session in your application code. It bring auto complete and type hint to the default ``boto3`` SDK, and provide smooth development experience with the following goodies:- boto3 Client auto complete- Cached boto3 Client- Assume IAM role in application code- Set temporary credential for AWS CliAdditionally, if you use `boto3-stubs &lt;https://pypi.org/project/boto3-stubs/&gt;`_ and you did ``pip install &quot;boto3-stubs[all]&quot;``, then ``boto_session_manager`` comes with the auto complete and type hint for all boto3 methods out-of-the-box, without any extra configuration (such as `explicit type annotations &lt;https://pypi.org/project/boto3-stubs/#explicit-type-annotations&gt;`_)Feature------------------------------------------------------------------------------**Boto Client Auto Complete**Provide an Enum class to access the aws service name to create boto client... code-block:: python    from boto_session_manager import BotoSesManager, AwsServiceEnum    bsm = BotoSesManager()    s3_client = bsm.s3_client.. image:: https://user-images.githubusercontent.com/6800411/227536578-839191b7-e1b3-4f92-92b3-9dd5309ea307.gifOne click to jump to the documentation:.. image:: https://user-images.githubusercontent.com/6800411/227536582-8e743936-95a8-4697-b382-72007ff72198.gifClient method auto complete:.. image:: https://user-images.githubusercontent.com/6800411/227536584-bdbc10d0-bb1a-458d-9248-5d5646a910de.gifArguments type hint:.. image:: https://user-images.githubusercontent.com/6800411/227537394-9a494249-1899-4a76-98a7-41ff7a3ac4a6.gifNote: you have to do ``pip install &quot;boto3-stubs[all]&quot;`` to enable &quot;Client method auto complete&quot; and &quot;Arguments type hint&quot; features.**Cached Client**Once an boto session is defined, each AWS Service client should be created only once in most of the case. ``boto_session_manager.BotoSesManager.get_client(service_name)`` allow you to fetch the client object from cache if possible... code-block:: python    from boto_session_manager import BotoSesManager, AwsServiceEnum    bsm = BotoSesManager()    s3_client1 = bsm.get_client(AwsServiceEnum.S3)    s3_client2 = bsm.get_client(AwsServiceEnum.S3)    assert id(s3_client1) = id(s3_client2)    Or you can just do:.. code-block:: python    bsm.s3_client.list_buckets() # it cache the client when needed**Assume Role**Create another boto session manager based on an assumed IAM role. Allow you to check if it is expired and maybe renew later... code-block:: python    bsm_assumed = bsm.assume_role(&quot;arn:aws:iam::111122223333:role/your-assume-role-name&quot;)    sts_client = bsm_assumed.get_client(AwsServiceEnum.sts)    print(sts_client.get_caller_identity())    print(bsm_assumed.is_expired())From ``1.5.1``, it adds support for auto-refreshable assumed role (Beta). Note that it is using ``AssumeRoleCredentialFetcher`` and ``DeferredRefreshableCredentials`` from botocore, which is not public API officially supported by botocore. This API may be unstable... code-block:: python    bsm_assumed = bsm.assume_role(        &quot;arn:aws:iam::111122223333:role/your-assume-role-name&quot;,        duration_seconds=900,        auto_refresh=True,    )    # even though the duration seconds is only 15 minutes,    # but it can keep running for 1 hour.    tick = 60    sleep = 60    for i in range(tick):        time.sleep(sleep)        print(&quot;elapsed {} seconds&quot;.format((i + 1) * sleep))        print(&quot;Account id = {}&quot;.format(bsm_new.sts_client.get_caller_identity()[&quot;Account&quot;]))**AWS CLI context manager**You explicitly defined a boto session manager that is not the same as the default one used by your AWS CLI. The ``boto_session_manager.BotoSesManager.awscli()`` context manager can temporarily set your default AWS CLI credential as the same as the one you defined, and automatically revert it back... code-block:: python    # explicitly define a boto session manager    bsm = BotoSesManager(        profile_name=&quot;my_aws_profile&quot;,    )    with bsm.awscli():        # now the default AWS CLI credential is the same as the ``bsm`` you definedHere's a more detailed example:.. code-block:: python    import os    from boto_session_manager import BotoSesManager    def print_default_aws_cli_credential():        print(&quot;AWS_ACCESS_KEY_ID =&quot;, os.environ.get(&quot;AWS_ACCESS_KEY_ID&quot;))        print(&quot;AWS_SECRET_ACCESS_KEY =&quot;, os.environ.get(&quot;AWS_SECRET_ACCESS_KEY&quot;))        print(&quot;AWS_SESSION_TOKEN =&quot;, os.environ.get(&quot;AWS_SESSION_TOKEN&quot;))        print(&quot;AWS_REGION =&quot;, os.environ.get(&quot;AWS_REGION&quot;))    print(&quot;--- before ---&quot;)    print_default_aws_cli_credential()    bsm = BotoSesManager(profile_name=&quot;aws_data_lab_open_source_us_east_1&quot;)    with bsm.awscli():        print(&quot;--- within awscli() context manager ---&quot;)        print_default_aws_cli_credential()    print(&quot;--- after ---&quot;)    print_default_aws_cli_credential()    # --- before ---    # AWS_ACCESS_KEY_ID = None    # AWS_SECRET_ACCESS_KEY = None    # AWS_SESSION_TOKEN = None    # AWS_REGION = None    # --- within awscli() context manager ---    # AWS_ACCESS_KEY_ID = ABCDEFG...    # AWS_SECRET_ACCESS_KEY = ABCDEFG...    # AWS_SESSION_TOKEN = ABCDEFG...    # AWS_REGION = us-east-1    # --- after ---    # AWS_ACCESS_KEY_ID = None    # AWS_SECRET_ACCESS_KEY = None    # AWS_SESSION_TOKEN = None    # AWS_REGION = None.. _install:Install------------------------------------------------------------------------------``boto_session_manager`` is released on PyPI, so all you need is:.. code-block:: console    $ pip install boto_session_managerTo upgrade to latest version:.. code-block:: console    $ pip install --upgrade boto_session_manager</longdescription>
</pkgmetadata>