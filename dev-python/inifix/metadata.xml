<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `inifix`[![PyPI](https://img.shields.io/pypi/v/inifix.svg?logo=pypi&amp;logoColor=white&amp;label=PyPI)](https://pypi.org/project/inifix/)[![PyPI](https://img.shields.io/badge/requires-Python%20â‰¥%203.8-blue?logo=python&amp;logoColor=white)](https://pypi.org/project/inifix/)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/neutrinoceros/inifix/main.svg)](https://results.pre-commit.ci/badge/github/neutrinoceros/inifix/main.svg)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json)](https://github.com/charliermarsh/ruff)`inifix` is a small Python library of I/O functions to read and write 'ini'configuration files in the style of [Pluto](http://plutocode.ph.unito.it) and[Idefix](https://github.com/idefix-code/idefix).While its primary goal is to follow Idefix's 'ini' format specification, itsupports a small superset of it.The key differences are:- `inifix` supports section-free definitions. This means configuration files  from [FARGO 3D](https://fargo3d.bitbucket.io) are also supported.- in `inifix`, strings can be escaped using `'` or `&quot;`. This allows to have  whitespaces in string values and to force string type decoding where numeric  and boolean types would work.In rare cases where Idefix's 'ini' format doesn't match Pluto's, `inifix` willfollow the former. Known differences are:- Idefix allows booleans to be written as `yes` and `no`.- Idefix allows integers to be written using scientific notation (e.g. `1e3`)## File format specifications details&lt;details&gt;&lt;summary&gt;Unroll !&lt;/summary&gt;- parameter names are strings- names and values are separated by non-newline white spaces- values are represented in unicode characters- all values are considered numbers if possible (e.g., `1e3` is read as `1000`)- number values are read as integers if no loss of precision ensues, and floats otherwise- `true` and `false` (resp. `yes` and `no`) are cast to booleans (case-insensitive)- values that can't be read as number or booleans are read as strings.- string delimiters `&quot;` and `'` can be used for strings containing whitespace, or to  force string type for values that would otherwise be read as numbers and booleans.- a parameter can be associated to a single value or a list of whitespace-separated values- sections titles start with `[` and end with `]`- comments start with `#` and are ignoredA file is considered valid if calling `inifix.load(&lt;filename&gt;)` doesn't raise anerror.### ExamplesThe following content is considered valid```ini# My awesome experiment[Grid]x   1 2 u 10    # a commenty   4 5 l 100[Time Integrator]CFL  1e-3tstop 1E3```and maps to```json{    &quot;Grid&quot;: {        &quot;x&quot;: [1, 2, &quot;u&quot;, 10],        &quot;y&quot;: [4, 5, &quot;l&quot;, 100]    },    &quot;Time Integrator&quot;: {        &quot;CFL&quot;: 0.001,        &quot;tstop&quot;: 1000.0    }}```The following section-less format doesn't comply to Pluto/Idefix'sspecifications, but it is considered valid for inifix. This is the oneintentional differences in specifications, which makes inifix format a supersetof Pluto's inifile format.```inimode   fargo# Time integratorCFL    1e-3tstop  1e3```and maps to```json{    &quot;mode&quot;: &quot;fargo&quot;,    &quot;CFL&quot;: 0.001,    &quot;tstop&quot;: 1000.0}```Note that strings using e-notation (e.g. `1e-3` or `1E3` here) are decoded asfloats. Reversely, when writing files, floats are re-encoded using e-notationif it leads to a more compact representation. For instance, `100000.0` is encodedas `1e5`, but `189.0` is left unchanged because `1.89e2` takes one more character.In cases where both reprensations are equally compact (e.g. `1.0` VS `1e0`),decimal is prefered in encoding.While decoding, `e` can be lower or upper case, but they are always encoded aslower case.&lt;/details&gt;## Installation```shellpython -m pip install inifix```## UsageThe public API mimicks that of Python's standard library `json`,and consists in four main functions:- `inifix.load` and `inifix.dump` read from and write to files respectively- `inifix.loads` reads from a `str` and returns a `dict`, while `inifix.dumps`  does the reverse operation.### Reading data`inifix.load` reads from a file and returns a `dict````pythonimport inifixwith open(&quot;pluto.ini&quot;, &quot;rb&quot;) as fh:    conf = inifix.load(fh)# or equivalentlyconf = inifix.load(&quot;pluto.ini&quot;)```Files are assumed to be encoded as UTF-8.`inifix.load` and `inifix.loads` accept a optional boolean flag`parse_scalars_as_list` (new in `inifix` v4.0.0), that is useful to simplifyhandling unknown data: all values can be safely treated as arrays, and iteratedover, even in the presence of scalar strings. For illustration```python&gt;&gt;&gt; import inifix&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; pprint(inifix.load(&quot;example.ini&quot;)){'Grid': {'x': [1, 2, 'u', 10], 'y': [4, 5, 'l', 100]}, 'Time Integrator': {'CFL': 0.001, 'tstop': 1000.0}}&gt;&gt;&gt; pprint(inifix.load(&quot;ex.ini&quot;, parse_scalars_as_lists=True)){'Grid': {'x': [1, 2, 'u', 10], 'y': [4, 5, 'l', 100]}, 'Time Integrator': {'CFL': [0.001], 'tstop': [1000.0]}}```By default, `inifix.load` and `inifix.loads` validate input data. This step canbe skipped by specifying `skip_validation=True`.### ... and writing back to disk`inifix.dump` writes data back to a file.This allows to change a value on the fly and create newconfiguration files programmatically, for instance.```pythonconf[&quot;Time&quot;][&quot;CFL&quot;] = 0.1with open(&quot;pluto-mod.ini&quot;, &quot;wb&quot;) as fh:    inifix.dump(conf, fh)# or equivalentlyinifix.dump(conf, &quot;pluto-mod.ini&quot;)```Data will be validated against inifix's format specification at write time.Files are always encoded as UTF-8.`inifix.dumps` is the same as `inifix.dump` except that it returns a stringinstead of writing to a file.By default, `inifix.dump` and `inifix.dumps` validate input data. This step canbe skipped by specifying `skip_validation=True`.### Schema Validation`inifix.validate_inifile_schema` can be used to validate an arbitrarydictionary as writable to an inifile, following Pluto/Idefix's format. Thiswill raise an exception (`ValueError`) if the dictionnary `data` is invalid.```pythoninifix.validate_inifile_schema(data)```### CLICommand line tools are shipped with the package to validate or format compatibleinifiles.#### ValidationThis checks that your inifiles can be loaded with `inifix.load` from the command line```shell$ inifix-validate pluto.iniValidated pluto.ini```#### FormattingTo format a file in place, use```shell$ inifix-format pluto.ini```inifix-format is guaranteed to preserve comments and to *only* edit (add or remove)whitespace characters.Files are always encoded as UTF-8.To print a diff patch to stdout instead of editing the file, use the `--diff` flag```shell$ inifix-format pluto.ini --diff```By default, `inifix-format` also validates input data. This step can be skipped with the`--skip-validation` flag### pre-commit hooks`inifix-validate` and `inifix-format` can be used as `pre-commit` hooks with thefollowing configuration (add to `.pre-commit-config.yaml`)```yaml  - repo: https://github.com/neutrinoceros/inifix.git    rev: v4.3.2    hooks:      - id: inifix-validate```or```yaml  - repo: https://github.com/neutrinoceros/inifix.git    rev: v4.3.2    hooks:      - id: inifix-format```Note that `inifix-format` also validates data by default, so it is redundant toutilize both hooks. Validation and formatting may nonetheless be decoupled as```patch  - repo: https://github.com/neutrinoceros/inifix.git    rev: v4.3.2    hooks:    - id: inifix-validate    - id: inifix-format+     args: [--skip-validation]```By default, both hooks target files matching the regular expression `(\.ini)$`.It is possible to override this expression as, e.g.,```patch   hooks:   - id: inifix-format+    files: (\.ini|\.par)$```## TestingWe use the [pytest](https://docs.pytest.org/en/latest/) framework to test`inifix`. The test suite can be run from the top level with a simple `pytest`invocation.```shell$ python -m pip install --requirement requirements/tests.txt$ pytest```</longdescription>
</pkgmetadata>