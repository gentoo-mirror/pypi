<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># tkinter_page![tkp logo](./picture/tkinter_page_logo.png)## IntroductionTkinter_page is based on tkinter. It contains several frames that used in spcific area. You can build you user interface faster withtkinter_page.## Example### DesktopFrame``` Python#This is a example to build an DesktopFrame. import tkinter as tkimport tkinter_page as tkpwindow = tk.Tk()# Way1: Generate child frame before DesktopFrame by building a dictbar_frame = {&quot;background&quot;:&quot;gold&quot;,&quot;width&quot;:400,&quot;height&quot;:30}files_frame = {&quot;background&quot;:&quot;red&quot;,&quot;width&quot;:70,&quot;height&quot;:200}# Generate a DesktopFramebframe = tkp.DesktopFrame(window,log=True,bar_frame=bar_frame,files_frame=files_frame)# Way2: Generate child frame after DesktopFrame by building a dictdetails_frame = {&quot;background&quot;:&quot;green&quot;,&quot;width&quot;:260,&quot;height&quot;:200}bframe.set_details_frame(details_frame)bframe.set_attributes_frame({&quot;background&quot;:&quot;blue&quot;,&quot;width&quot;:70,&quot;height&quot;:200})# Way3: Generate child frame after DesktopFrame by building a frame# If youo use the third way, be careful that you should define the master.# --------------------------------------------------------------# |  master     |    child frame                               |# | base_frame  | bar_frame, logs_frame                        |# | mid_frame   | files_frame, details_frame, attributes_frame |# --------------------------------------------------------------logs_frame = tk.Frame(bframe.base_frame,background=&quot;black&quot;,width=400,height=40)bframe.set_logs_frame(logs_frame)# Pack and Runbframe.pack()window.mainloop()```![tkp DesktopFrame Demo](./picture/DesktopFrame_Demo.png)### PagePage can be constructed by combobox style.``` Python#This is a example 1 to build an Page. #Using Combobox to flip.import tkinter as tkimport tkinter_page as tkpwindow = tk.Tk()base_frame = tk.Frame(window)# First we creat three child pages# We can creat a pack way for a pagedef pack_way1():print(&quot;Use function to define pack way.&quot;)label1.pack(fill='x',side='bottom')child1 = tkp.Page(base_frame,pack_way=pack_way1)label1 = tk.Label(base_frame,text=&quot;child1&quot;,width=10,height=2)child1.add_component(label1)def pack_way2():print(&quot;Auto pack way is like this.&quot;)label2.pack()child2 = tkp.Page(base_frame,pack_way=pack_way2)label2 = tk.Label(base_frame,text=&quot;child2&quot;,width=10,height=2)child2.add_component(label2)# We can also use auto pack way(do not need a pack way func)child3 = tkp.Page(base_frame)label3 = tk.Label(base_frame,text=&quot;child3&quot;,width=10,height=2)child3.add_component(label3)# make child page listchild_page = [child1,child3]child_page_name = ['page1','page3']# construct father page - load child page at initpage1 = tkp.Page(base_frame,show_child=True,\flip=&quot;Combobox&quot;,child_page=child_page,\child_page_name=child_page_name,current=0,\log=False)label0 = tk.Label(base_frame,text=&quot;Combobox Flipway Page&quot;,width=20,height=2,\font=('Times', '15', 'bold'))page1.add_component(label0)# construct father page - add child page at certain placepage1.set_child_page(child2,name='page2',mode='ADD',place=1)# Pack Father Page# you can also use# page1.pack(show_child=True)# to auto show the current child pagebase_frame.pack(fill='both',expand=1)page1.pack()window.mainloop()```![tkp Page Demo](./picture/Page_Demo1.png)This is another page example with tree style.``` Python#This is a example to build an Page. #Using Buttom (or other components) to flip.import tkinter as tkimport tkinter_page as tkpwindow = tk.Tk()base_frame = tk.Frame(window)# make pages like a tree and use components # to flip. #   father - 1 #          \   #           2 - 2.1#             \ 2.2# Be carefull! Tree like pages construct father first!# make father pagefather = tkp.Page(base_frame,show_child=False,flip=&quot;Tree&quot;)label0 = tk.Label(base_frame,text=&quot;Tree Flipway Page&quot;,\width=40,height=2,font=('Times', '15', 'bold'))father.add_component(label0)# Method ONE# make page 1 - STRONGLY NOT RECMMENDED# Of course you can add page in this way, but this is # STRONGLY NOT RECMMENDED! You can use page_connect # function to connect father page and child page.# step 1. Define page1 and its componentspage1 = tkp.Page(base_frame,flip=&quot;Tree&quot;)label1 = tk.Label(base_frame,text=&quot;page1&quot;,\width=40,height=2,font=('Times', '15', 'bold'))page1.add_component(label1)# step 2. Manual connect father and childpage1.set_back(father)father.set_child_page(page1)def to_page1_func():father.front = father.child_page[0]father.pack_forget()father.front.pack()to_page1 = tk.Button(base_frame,text='Page 1',command=to_page1_func)father.add_component(to_page1)# Method TWO# make page 2# Use page_connect method - Audo generate Button# step 1. Define page2 and its componentspage2 = tkp.Page(base_frame,flip=&quot;Tree&quot;,back=father)label2 = tk.Label(base_frame,text=&quot;page2&quot;,\width=40,height=2,font=('Times', '15', 'bold'))page2.add_component(label2)# step 2. Use connect function# PS: You need to give &quot;master&quot; for generating flip component.tkp.page_connect(father=father,child=page2,page_number=1,\text='Page 2',master=base_frame)# page_number is 1 beacuse in the list - 'father.child_page[]', # the 'page2' array subscript is 1. ('page1' is 0.)# Method THREE# make page 2.1 - The custom generate Button# step 1. Define page2_1 and its componentspage2_1 = tkp.Page(base_frame,flip=&quot;Tree&quot;,back=father)label2_1 = tk.Label(base_frame,text=&quot;page2_1&quot;,\width=40,height=2,font=('Times', '15', 'bold'))page2_1.add_component(label2_1)# step 2. use &quot;widget&quot; to define the flip component.to_page2_1 = tk.Button(base_frame,text='Page 2_1',\height=3,width=20)tkp.page_connect(father=page2,child=page2_1,page_number=0,\text='Page 2_1',widget=to_page2_1)# Method FOUR# make page 2.2 - The custom generate Button# use &quot;widget&quot; with &quot;flavour&quot; and &quot;command&quot; to define the flip component.# step 1. Define page2_2 and its componentspage2_2 = tkp.Page(base_frame,flip=&quot;Tree&quot;,back=father)label2_2 = tk.Label(base_frame,text=&quot;page2_2&quot;,\width=40,height=2,font=('Times', '15', 'bold'))page2_2.add_component(label2_2)# step 2. use &quot;widget&quot; and &quot;flavour&quot; to define the flip component.to_page2_2 = tk.Button(base_frame)flavor = {'text':'Page 2_2', 'height':3, 'width':20}# step 3. use &quot;command&quot; to appand functiondef hello():print(&quot;Hello!&quot;)tkp.page_connect(father=page2,child=page2_2,\page_number=1,text='Page 2_2',widget=to_page2_2,flavor=flavor,command=hello)base_frame.pack(fill='both',expand=1)father.pack()window.mainloop()```</longdescription>
</pkgmetadata>