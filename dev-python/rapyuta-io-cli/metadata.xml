<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Rapyuta CLIRapyuta CLI exposes features of Rapyuta.io platform on the command-line.The application is written in Python 3 and it is distributed through PyPI forPython 3 environments.For Reference on directory structure please refer Please have a look at thecorresponding article:http://gehrcke.de/2014/02/distributing-a-python-command-line-application/## InstallRio CLI is available on PyPI index and can be installed directly by running thefollowing command.``` bashpip install rapyuta-io-cli```On Unix-like systems it places the `rio` executable in the user's PATH. OnWindows it places the `rio.exe` in the centralized `Scripts` directorywhich should be in the user's PATH.To install the CLI from source, you can use the `setup.py` script directly.Clone the repository and from the root of the directory, run the followingcommand.``` bashpython setup.py install```## Getting StartedTo begin using the CLI, it must be authenticated with the Platform.``` bashrio auth login```The Email and Password can either be given through flags (for scriptingpurposes) or interactively through the Prompts.NOTE: Entering password as a Flag is not recommended because it leaves theTraces.## DevelopmentRio CLI project uses [Pipenv](https://pipenv.pypa.io/en/latest/) fordevelopment. It needs to be installed to setup the development environment.``` bashpip install pipenv```Once Pipenv is installed, a Python virtual environment can be quicklybootstrapped by running the following commands in the root of the repository.``` bashpipenv install --dev```This will create a virtual environment in the Pipenv's preconfigured location(if one doesn't already exists). It will also install all the dependencies and`riocli` package in the location.To run the CLI (or any command) under the context of Pipenv's virtualenvironment, prepend the commands with `pipenv run````bashpipenv run rio```To run the RIO CLI from the source directly, you can use `riocli` moduledirectly.``` bashpipenv run python -m riocli```New dependencies can be installed directly using `pipenv`. This modifies the`Pipfile` and `Pipfile.lock`.``` bashpipenv install {dependency}```But using the `pipenv` directly doesn't sync the dependencies in the`setup.py` file. For this, the project uses a utility called `pipenv-setup`which allows us to sync the dependencies.``` bashpipenv run pipenv-setup sync```</longdescription>
</pkgmetadata>