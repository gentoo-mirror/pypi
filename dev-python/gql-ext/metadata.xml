<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GraphQL FacadeGraphQL Facade is a python application-intermediary between a frontend application using GraphQL and a REST application on the backend oriented declarative style of the description of the services.## GraphQL Facade allow* make a requests to the REST service using GraphQL language* use batch loading (subject to the rules)## Adding new REST service to the ApplicationTo add a new service, you need to perform several steps:1) create a description of the data schema in [graphql syntax](https://graphql.org/learn/)2) create [REST service description](#rest-service-description) (yaml or json supported)3) describe [resolvers](#resolvers) (yaml or json)4) add [schema description](#schemas-description) to main configuration file5) specify the Base Url of the service in the application settings## REST service description```&lt;service_name&gt;:     &lt;endpoint_name&gt;:        method: &lt;METHOD&gt;        path: &lt;PATH&gt;````service_name`: Name of your REST API service.  `endpoint_name`: Name of your REST endpoint.  `method`: GET, POST, PATCH, PUT, DELETE (GET default)  `path`: path to yor endpoint## Resolvers```&lt;Parent_name.field_name&gt;:    endpoint: &lt;service_name.endpoint_name&gt;    batch: True    args:        &lt;param_name&gt;: &lt;param_value&gt;    loader: &lt;path.to.your.custom.resolver_file.resolver_name&gt;````Parent_name.field_name`: field name in your graphql schema (`Query.name` for example)  `endpoint`: your rest endpoint for this data field in `service_name`.`endpoint_name` format  `loader`: path to custom resolver (not a required field). Use python site-packages syntax  `args`: if you want to use any params to make request to REST you can set args field.`param_name` - an arbitrary name of the variable, `param_value` - arbitrary value.To use the attributes of a parent element, use `parent.` the prefix and then the name of the attribute.for examle `post_is: parent.id``batch`: use [batch loading](#batch-loading). False by default  ## Schemas description```schemas:  &lt;schema_name&gt;:    url: &lt;schema_url&gt;    resolvers: &lt;path/to/your/resolvers/file&gt;    sdl:      - &lt;list/of/paths/to/sdl/directories&gt;      - &lt;or/and/sdl/files&gt;rest:  - &lt;list/of/paths/to/your/rest/description/files&gt;````schema_name`: your schema name  `url`: url to graphql endpoint (by default equal to schema name)  `resolvers`: path (relative to base directory) to your resolvers file  `sdl`: list of paths to `.graphql` files (schema descriptions) or directories with `.graphql` files  `rest`: list of paths to rest definition files (relative to base directory)  ## REST App connection ExampleLet's say you have a REST service with signature:Input:```{    id: [0, 1, 2],    q: &quot;any search string&quot;}```Output:```{  &quot;pagination&quot;: {    &quot;total&quot;: 0,    &quot;offset&quot;: 0,    &quot;limit&quot;: 0  },  &quot;result&quot;: [    {      &quot;conditions&quot;: {},      &quot;calculator_id&quot;: 0,      &quot;version&quot;: 0,      &quot;created&quot;: &quot;2019-08-29T09:09:23.048Z&quot;,      &quot;terms&quot;: [        0      ],      &quot;status&quot;: &quot;archive&quot;,      &quot;updated&quot;: &quot;2019-08-29T09:09:23.048Z&quot;,      &quot;amounts&quot;: [        0      ],      &quot;priority&quot;: 0,      &quot;title&quot;: &quot;string&quot;,      &quot;meta&quot;: {},      &quot;id&quot;: 0    }  ]}```for connect your api to GraphQL facade follow that steps:### previewAs a result of all the steps we get the structure (files and directories that we will not use are omitted)```-app    -graphql        -calculator            -sdl                mutation.graphql                query.graphql            loaders.py            resolvers.yaml            rest.yaml        ...    init_facade.yaml    ......````.graphql` files - description of your data schema  `loaders.py` custom resolvers (if you need)  `resolvers.yaml` description of resolvers  `rest.yaml` description of rest api service  `init_facade.yaml` description all schemas and file paths for schema  the file scheme is conditional and not mandatory but it is recommended to adhere to this rule of file location and naming### 1. describe data schemathe data schema describes data types and argumentsfor our REST service it will have the following form###### app/graphql/calculator/sdl/query.graphql```type Query {    calculators(id: [Int], q: String): Calculators    }type Calculators{    pagination: Pagination    result: [Calculator]    }type Calculator {    id: Int    created: String    updated: String    calculator_id: Int    status: String    version: Int    title: String    amounts: [String]    terms: [Int]    meta: String    priority: Int    conditions: String    }type Pagination {    total: Int    limit: Int    offset: Int    }```### 2. REST service descriptionREST description files contains information about paths to your REST handlersfor our API:###### app/graphql/calculator/rest.json```{  &quot;calculator&quot;: {    &quot;find_calculators&quot;: {      &quot;method&quot;: &quot;GET&quot;,      &quot;path&quot;: &quot;/api/v1/pdl_calculators/&quot;    }}```### 3. describe resolversResolvers files explain how to receive Schema fields (which REST handler to use, whether to use bath loading or smth else)###### app/graphql/calculator/resolvers.json```{  &quot;Query.calculators&quot;: {    &quot;endpoint&quot;: &quot;calculator.find_calculators&quot;  }}```### 4. main configuration file###### app/init_facade.yamlConfiguration file describe file location for our schema```schemas:  calculator:    url: calculator    resolvers: app/graphql/calculator/resolvers    sdl:      - app/graphql/calculator/sdlrest:  - app/graphql/calculator/rest```### 5. base url to configIt is important not to forget to specify URLs in the application settingsWe do not specify base_url in yaml or json files to be able to pass base_url as environment variablesKey must match to REST service name in rest.yaml file###### settings/config.py```class Config:...    BASE_URLS = {                 ...                 'calculator': env.str('calculator_api', default='http:/calculator.prod.com')                 ...                }...```## Batch loadingFor use batch loading you must follow few simple rules:* REST API endpoint must accept a list of `id` arguments* REST must return list of records (which perform a conditions of a request) in `result` field and send `id` field to each row  for example:```{  &quot;pagination&quot;: {    &quot;total&quot;: 2,    &quot;limit&quot;: 10,    &quot;offset&quot;: 0  },  &quot;result&quot;: [    {      &quot;id&quot;: 1    },    {      &quot;id&quot;: 2    }  ],  &quot;success&quot;: true}```* finally set `batch` = `True` in your fields resolver description:```Calculator.calculator:    endpoint: /api/v1/calculator    batch: True```</longdescription>
</pkgmetadata>