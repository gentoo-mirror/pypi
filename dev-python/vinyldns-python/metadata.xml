<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/vinyldns-python.svg)](https://badge.fury.io/py/vinyldns-python) [![Travis build](https://api.travis-ci.org/vinyldns/vinyldns-python.svg?branch=master)](https://travis-ci.org/vinyldns/vinyldns-python)![GitHub](https://img.shields.io/github/license/vinyldns/vinyldns-python)# vinyldns-pythonPython client library for [VinylDNS](https://www.vinyldns.io/)This project is a work in progress! If you would like to help us get this where it needs to be,please reach out to us in [gitter](https://gitter.im/vinyldns/Lobby).To run, `pip install vinyldns-python` and then:```python&gt;&gt;&gt; from vinyldns.client import VinylDNSClient&gt;&gt;&gt; local_client = VinylDNSClient(&quot;ApiEndpoint&quot;, &quot;UserAccessKey&quot;, &quot;UserSecretKey&quot;)&gt;&gt;&gt; local_client.list_zones()&gt;&gt;&gt;&gt;&gt;&gt; # If all of the following environments are set&gt;&gt;&gt; # - VINYLDNS_API_URL&gt;&gt;&gt; # - VINYLDNS_ACCESS_KEY_ID&gt;&gt;&gt; # - VINYLDNS_SECRET_ACCESS_KEY&gt;&gt;&gt; from vinyldns.client import VinylDNSClient&gt;&gt;&gt; local_client = VinylDNSClient.from_env()&gt;&gt;&gt; local_client.list_zones()```## Contributing**Requirements*** `python3`* `pip`* `virtualenv`To get started, you will want to setup your virtual environment.1. Ensure that you have `virtualenv` installed `&gt; pip install virtualenv`1. Run `./bootstrap.sh` to setup your environment (unless you really want all these dependencies to be installed locally, which we do not recommend).1. Activate your virtual environment `&gt; source .virtualenv/bin/activate` and you will be ready to go!**Unit Tests**Unit tests are developed using [pytest](https://docs.pytest.org/en/latest/).  We use[Responses](https://github.com/getsentry/responses), which allows for simple mocking of HTTP endpoints.To run unit tests, you can simply run `python3 setup.py test`.  To target a specific test, you canrun `python3 setup.py test -a &quot;-k my_test&quot;`**Functional Tests**Functional tests are also developed with pytest. These tests run against a local instance of VinylDNS. Note that for nowthey are not tied into our travis build, so they must be run locally for validation.From your virtualenv, run `tox -e func_test`**Running a full build**When you are finished writing your code you will want to run everything including linters.  Thesimplest way to do this is to run `tox -e check,py36`, which will run static checks and run unit tests.If you see any failures / warnings, correct them until `tox` runs successfully.If you do not have `tox` in your environment, `pip install tox` to add it.  For more information you canread the [tox docs](https://tox.readthedocs.io/en/latest/index.html).## Local DevelopmentSee the [quickstart](https://github.com/vinyldns/vinyldns/blob/master/README.md#quickstart) in theVinylDNS api for details on how to start up a local instance of the api in docker. With thatrunning, you can make requests with the following client details:```pythonlocal_client = VinylDNSClient(&quot;http://localhost:9000&quot;, &quot;okAccessKey&quot;, &quot;okSecretKey&quot;)```</longdescription>
</pkgmetadata>