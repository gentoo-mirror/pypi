<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiohttp-oauth2[![CircleCI](https://circleci.com/gh/mrasband/aiohttp-oauth2.svg?style=svg)](https://circleci.com/gh/mrasband/aiohttp-oauth2)A provider agnostic oauth2 client library for aiohttp, implemented as a self-composed nested application.No opinions about auth mechanisms are enforced on the application, an `on_login` and `on_error` coroutine can, and should, be provided to implement your own login mechanisms (token, session, etc).## Usage```bash$ pip install -U aiohttp_oauth2```### Simple```pythonfrom aiohttp import webfrom aiohttp_oauth2 import oauth2_appasync def app_factory():    app = web.Application()    app.add_subapp(        &quot;/github/&quot;,  # any arbitrary prefix        oauth2_app(            client_id=123,            client_secret=456,            authorize_url=&quot;https://github.com/login/oauth/authorize&quot;,            token_url=&quot;https://github.com/login/oauth/access_token&quot;,            # add scopes if you want to customize them            scopes=[&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;],            # optionally add an on_login coroutine to handle the post-login logic            # it should expect the request and the oauth2 access code response            on_login=set_session_and_redirect,            on_error=show_error_page,        ),    )    return app```The necessary oauth2 routes are added as `/auth` and `/callback`. Now logging in a user is as simple as redirecting them to: `/github/auth`.### ComplexSince the `oauth2_app` function is simply a factory that generates sub-apps, you can use this to add any number of oauth2 providers to log in against:```pythonfrom aiohttp import webfrom aiohttp_oauth2 import oauth2_appasync def app_factory() -&gt; web.Application:    app = web.Application()    app.add_subapp(        &quot;/github/&quot;,        oauth2_app(            ...,            authorize_url=&quot;https://github.com/login/oauth/authorize&quot;,            token_url=&quot;https://github.com/login/oauth/access_token&quot;,        )    )    app.add_subapp(        &quot;/google/&quot;,        oauth2_app(            ...,            authorize_url=&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;,            token_url=&quot;https://www.googleapis.com/oauth2/v4/token&quot;,        )    )    app.add_subapp(        &quot;/twitter/&quot;,        oauth2_app(            ...,            authorize_url=&quot;https://api.twitter.com/oauth/authorize&quot;,            token_url=&quot;https://api.twitter.com/oauth2/token&quot;,        )    )    ...    return app```You can now redirect users to `/twitter/auth`, `/google/auth`, and `/github/auth`.As a nice shortcut to the boilerplate of the authorize/token URLs, see the [`aiohttp_oauth2/client/contrib.py`](https://github.com/mrasband/aiohttp-oauth2/blob/master/aiohttp_oauth2/client/contrib.py) helpers to avoid needing to set the urls explicity.```pythonimport osfrom aiohttp import webfrom aiohttp_oauth2.client.contrib import githubasync def app_factory() -&gt; web.Application:    app = web.Application()    app.add_subapp(        &quot;/login/github&quot;,        github(            os.getenv(&quot;CLIENT_ID&quot;),            os.getenv(&quot;CLIENT_SECRET&quot;),        ),    )    # and/or `google`, `slack`, `twitter` instead of `github`    return app```### ExamplesCheck the &quot;examples&quot; directory for working examples:```$ cd examples$ pip install -r requirements.txt# this just makes the library available for import, don't typically do it :D$ PYTHONPATH=&quot;..&quot; python github.py```# Tips## Incorrect URL scheme (missing `https`)For `aiohttp`'s URL resolution feature to work with SSL, be sure to use [`aiohttp-remotes`](https://aiohttp-remotes.readthedocs.io/en/stable/). This will ensure that if you are serving your aiohttp application behind any termination point for TLS that aiohttp is still aware via the various forwarding headers that traefik/nginx/etc should set.</longdescription>
</pkgmetadata>