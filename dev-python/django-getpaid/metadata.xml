<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/django-getpaid.svg    :target: https://pypi.org/project/django-getpaid/    :alt: Latest PyPI version.. image:: https://img.shields.io/travis/sunscrapers/django-getpaid.svg    :target: https://travis-ci.org/sunscrapers/django-getpaid.. image:: https://api.codacy.com/project/badge/Coverage/d25ba81e2e4740d6aac356f4ac90b16d    :target: https://www.codacy.com/manual/dekoza/django-getpaid.. image:: https://img.shields.io/pypi/wheel/django-getpaid.svg    :target: https://pypi.org/project/django-getpaid/.. image:: https://img.shields.io/pypi/l/django-getpaid.svg    :target: https://pypi.org/project/django-getpaid/.. image:: https://api.codacy.com/project/badge/Grade/d25ba81e2e4740d6aac356f4ac90b16d    :target: https://www.codacy.com/manual/dekoza/django-getpaid=============================Welcome to django-getpaid=============================django-getpaid is payment processing framework for DjangoDocumentation=============The full documentation is at https://django-getpaid.readthedocs.io.Features========* support for multiple payment brokers at the same time* very flexible architecture* support for asynchronous status updates - both push and pull* support for modern REST-based broker APIs* support for multiple currencies (but one per payment)* support for global and per-plugin validators* easy customization with provided base abstract models and swappable mechanic (same as with Django's User model)Quickstart==========Install django-getpaid and at least one payment backend:.. code-block:: console    pip install django-getpaid    pip install django-getpaid-payuAdd them to your ``INSTALLED_APPS``:.. code-block:: python    INSTALLED_APPS = [        ...        'getpaid',        'getpaid_payu',  # one of plugins        ...    ]Add getpaid to URL patterns:.. code-block:: python    urlpatterns = [        ...        path('payments/', include('getpaid.urls')),        ...    ]Define an ``Order`` model by subclassing ``getpaid.models.AbstractOrder``and define some required methods:.. code-block:: python    from getpaid.models import AbstractOrder    class MyCustomOrder(AbstractOrder):        amount = models.DecimalField(decimal_places=2, max_digits=8)        description = models.CharField(max_length=128)        buyer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)        def get_absolute_url(self):            return reverse('order-detail', kwargs={&quot;pk&quot;: self.pk})        def get_total_amount(self):            return self.amount        def get_buyer_info(self):            return {&quot;email&quot;: self.buyer.email}        def get_currency(self):            return &quot;EUR&quot;        def get_description(self):            return self.description.. note:: If you already have an Order model and don't want to subclass ``AbstractOrder``    just make sure you implement all methods.Inform getpaid of your Order model in ``settings.py`` and provide settings for payment backends:.. code-block:: python    GETPAID_ORDER_MODEL = 'yourapp.MyCustomOrder'    GETPAID_BACKEND_SETTINGS = {        &quot;getpaid_payu&quot;: {            # take these from your merchant panel:            &quot;pos_id&quot;: 12345,            &quot;second_key&quot;: &quot;91ae651578c5b5aa93f2d38a9be8ce11&quot;,            &quot;oauth_id&quot;: 12345,            &quot;oauth_secret&quot;: &quot;12f071174cb7eb79d4aac5bc2f07563f&quot;,        },    }Write a view that will create the Payment.An example view and its hookup to urls.py can look like this:.. code-block:: python    # orders/views.py    from getpaid.forms import PaymentMethodForm    class OrderView(DetailView):        model = Order        def get_context_data(self, **kwargs):            context = super(OrderView, self).get_context_data(**kwargs)            context[&quot;payment_form&quot;] = PaymentMethodForm(                initial={&quot;order&quot;: self.object, &quot;currency&quot;: self.object.currency}            )            return context    # main urls.py    urlpatterns = [        # ...        path(&quot;order/&lt;int:pk&gt;/&quot;, OrderView.as_view(), name=&quot;order_detail&quot;),    ]You'll also need a template (``order_detail.html`` in this case) for this view.Here's the important part:.. code-block::    &lt;h2&gt;Choose payment broker:&lt;/h2&gt;    &lt;form action=&quot;{% url 'getpaid:create-payment' %}&quot; method=&quot;post&quot;&gt;        {% csrf_token %}        {{ payment_form.as_p }}        &lt;input type=&quot;submit&quot; value=&quot;Checkout&quot;&gt;    &lt;/form&gt;Running Tests=============.. code-block:: console    poetry install    poetry run toxAlternatives============* `django-payments &lt;https://github.com/mirumee/django-payments&gt;`_Credits=======Created by `Krzysztof Dorosz &lt;https://github.com/cypreess&gt;`_.Redesigned and rewritten by `Dominik Kozaczko &lt;https://github.com/dekoza&gt;`_.Development of version 2.0 sponsored by `SUNSCRAPERS &lt;https://sunscrapers.com/&gt;`_Disclaimer==========This project has nothing in common with `getpaid &lt;http://code.google.com/p/getpaid/&gt;`_ plone project.</longdescription>
</pkgmetadata>