<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Scrypt for Python=================|Build Status| |Coverage Status| |PyPI version|There are a lot of different scrypt modules for Python, but none of themhave everything that I’d like, so here’s OneMore\ `1 &lt;https://xkcd.com/927/&gt;`__.Features---------  Uses hashlib.scrypt on Python 3.6+ and OpenSSL 1.1+.-  Uses system libscrypt\ `2 &lt;https://github.com/technion/libscrypt&gt;`__   as the next choice.-  If neither is available, tries the scrypt Python   module\ `3 &lt;https://bitbucket.org/mhallin/py-scrypt/src&gt;`__ or   libsodium\ `4 &lt;https://github.com/jedisct1/libsodium&gt;`__.-  Offers a pure Python scrypt implementation for when there is no C   scrypt.-  Not unusably slow, even in pure Python… at least with   pypy\ `5 &lt;http://pypy.org/&gt;`__.With PyPy as the interpreter the Python implementation is around onefifth the speed of C scrypt. With CPython it is about 250x slower.Requirements-------------  Python 3.4+. Equivalent versions of PyPy should also work.-  For Python 2.7.8+ support install the latest version 1.x instead.-  If you want speed, you should use one of:   -  Python 3.6+ with OpenSSL 1.1+   -  libscrypt 1.8+ (older may work)   -  py-scrypt 0.6+ (pip install scrypt)   -  libsodium 1.0+Usage-----You can install the most recent release from PyPi using:::   pip install pylibscryptYou most likely want to create MCF hashes and store them somewhere, thencheck user-entered passwords against those hashes. For that you onlyneed to use two functions from the API:::   from pylibscrypt import scrypt_mcf, scrypt_mcf_check   # Generate an MCF hash with random salt   mcf = scrypt_mcf('Hello World')   # Test it   print(scrypt_mcf_check(mcf, 'Hello World'))   # prints True   print(scrypt_mcf_check(mcf, 'HelloPyWorld'))  # prints FalseFor full API, you can try help(pylibscrypt) from python after importing.It is highly recommended that you use a random salt, i.e. don’t passone.Versioning----------The package has a version number that can be read from python like so:::   print(pylibscrypt.__version__)The version number is of the form X.Y.Z, following SemanticVersioning\ `6 &lt;http://semver.org/spec/v2.0.0.html&gt;`__. Unreleasedversions include a -git version specifier, e.g. 2.0.0-git &lt; 2.0.0.Releases are tagged vX.Y.Z and release branches bX.Y.x when they differfrom master.Development-----------Development happens onGitHub\ `7 &lt;https://github.com/jvarho/pylibscrypt&gt;`__. If you find abug, please open an issue there.Running pylibscrypt.tests will test all implementations with some quicktests. Running any implementation directly(e.g. pylibscrypt.pylibsodium) will also compare to scrypt test vectorsfrom the paper but this is slow for the pure Python version (pypyscrypt)unless running with pypy.You can test more comprehensively using the docker test environment.Either build and run using ``make docker-run`` or pull thejvarho/pylibscrypt image and run using``docker run -v ${PWD}:/app jvarho/pylibscrypt``.Pull requests should be automatically tested and will not be merged ifbroken... |Build Status| image:: https://travis-ci.org/jvarho/pylibscrypt.svg   :target: https://travis-ci.org/jvarho/pylibscrypt.. |Coverage Status| image:: https://coveralls.io/repos/github/jvarho/pylibscrypt/badge.svg?branch=master   :target: https://coveralls.io/github/jvarho/pylibscrypt?branch=master.. |PyPI version| image:: https://img.shields.io/pypi/v/pylibscrypt.svg   :target: https://pypi.python.org/pypi/pylibscrypt</longdescription>
</pkgmetadata>