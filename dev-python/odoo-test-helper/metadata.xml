<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>odoo-test-helper================.. image:: https://img.shields.io/badge/licence-LGPL--3-blue.png    :target: http://www.gnu.org/licenses/lgpl-3.0-standalone.html    :alt: License: LGPL-3.. image:: https://badge.fury.io/py/odoo-test-helper.svg    :target: http://badge.fury.io/py/odoo-test-helperodoo-test-helper is toolbox for writing odoo testLoading Fake models~~~~~~~~~~~~~~~~~~~Sometime you build an abstract module that can be use by many modules.In such case, if you want to test it with real records you need to register real models.One solution is to create a `module_test` modulewith a little implementation that use your abstract model.One other solution is define test only models and load them in tests.This lib makes this possible and easy.Example~~~~~~~There is an example of test here:* `test_example.py &lt;https://github.com/akretion/odoo-test-helper/blob/master/tests/test_helper/tests/test_example.py&gt;`_.This example load the class ResPartner from the file:* `models.py &lt;https://github.com/akretion/odoo-test-helper/blob/master/tests/test_helper/tests/models.py&gt;`_.Real implementation case can be found in the following module* `connector_search_engine &lt;https://github.com/OCA/search-engine/tree/12.0/connector_search_engine&gt;`_.* `base_url &lt;https://github.com/shopinvader/odoo-shopinvader/tree/12.0/base_url&gt;`_.How to import~~~~~~~~~~~~~~~Be carefull importing fake class must be done in the right way.Importing a file will automatically add all the class in the &quot;module_to_models&quot;variable. The import **must** be done after the backup !Wrong way----------.. code-block:: python   from odoo.tests import SavepointCase   from odoo_test_helper import FakeModelLoader   # The fake class is imported here !! It's wrong   # And be carefull even if you only import ResPartner   # all class in the file models will be proceded by odoo   # so no **direct import** of a file that contain fake model   from .models import ResPartner   class TestMixin(SavepointCase):       @classmethod       def setUpClass(cls):           super(TestMixin, cls).setUpClass()           cls.loader = FakeModelLoader(cls.env, cls.__module__)           cls.loader.backup_registry()           cls.loader.update_registry((ResPartner,))       @classmethod       def tearDownClass(cls):           cls.loader.restore_registry()           super(TestMixin, cls).tearDownClass()       def test_create(self):           partner = self.env[&quot;res.partner&quot;].create({&quot;name&quot;: &quot;BAR&quot;, &quot;test_char&quot;: &quot;youhou&quot;})           self.assertEqual(partner.name, &quot;FOO-BAR&quot;)           self.assertEqual(partner.test_char, &quot;youhou&quot;)Right Way----------.. code-block:: python    from odoo.tests import SavepointCase    from odoo_test_helper import FakeModelLoader    class TestMixin(SavepointCase):        @classmethod        def setUpClass(cls):            super(TestMixin, cls).setUpClass()            cls.loader = FakeModelLoader(cls.env, cls.__module__)            cls.loader.backup_registry()            # The fake class is imported here !! After the backup_registry            from .models import ResPartner            cls.loader.update_registry((ResPartner,))        @classmethod        def tearDownClass(cls):            cls.loader.restore_registry()            super(TestMixin, cls).tearDownClass()        def test_create(self):            partner = self.env[&quot;res.partner&quot;].create({&quot;name&quot;: &quot;BAR&quot;, &quot;test_char&quot;: &quot;youhou&quot;})            self.assertEqual(partner.name, &quot;FOO-BAR&quot;)            self.assertEqual(partner.test_char, &quot;youhou&quot;)Contributor~~~~~~~~~~~~* Sébastien BEAU &lt;sebastien.beau@akretion.com&gt;* Laurent Mignon &lt;laurent.mignon@acsone.eu&gt;* Simone Orsi &lt;simone.orsi@camptocamp.com&gt;History~~~~~~~~This module is inspired of the following mixin code that can be found in OCA and shopinvader repository* Mixin in OCA: https://github.com/OCA/search-engine/blob/7fd85a74180cfff30e212fca01ebeba6c54ee294/connector_search_engine/tests/models_mixin.py* Mixin in Shopinvader: https://github.com/shopinvader/odoo-shopinvader/blob/b81b921ea52c911e5b33afac88adb8f9a1c02626/base_url/tests/models_mixin.pyIntial Authors are* Laurent Mignon &lt;laurent.mignon@acsone.eu&gt;* Simone Orsi &lt;simone.orsi@camptocamp.com&gt;Refactor/extraction have been done by* Sébastien BEAU &lt;sebastien.beau@akretion.com&gt;This refactor try to load all class correctly like Odoo does with the exact same syntaxNote this refactor/extraction have been done to fix the test of the following issuehttps://github.com/shopinvader/odoo-shopinvader/pull/607Changes~~~~~~~.. Future (?).. ----------.. - ...2.1.0------ [IMP] Allow to ignore Odoo core modules to avoid warning2.0.5------ .gitignore added2.0.4------ [FIX] AttributeError in Odoo 15+, regression introduced in 2.0.32.0.3------ [FIX] restore_registry in Odoo 16    See odoo/odoo@cd12293    This new attribute is the source of truth for the base classes    and in setup_models (called further down in the modified code in this PR),    the model's base classes are reset from it:    https://github.com/odoo/odoo/blob/e1f06479a526c703ccabc441b1e194646206b966/odoo/models.py#L2728-L2730.    The test failure fixed by this PR can be inspected in    https://app.travis-ci.com/github/OCA/odoo-test-helper/builds/2584533312.0.2------ Fix ``mock`` import for v152.0.1------ Fix support for Odoo 15.02.0.0------ Move to OCA- Re-license to LGPL1.1.0------ Refactoring (misc imp/fix)1.0.0------ Initial release</longdescription>
</pkgmetadata>