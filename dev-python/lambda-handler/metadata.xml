<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Lambda HandlerThis project defines a Python class, `LambdaHandler`, and associated Pydantic-derivedevent classes, for handling API Gateway events from a range of sources, in particular:- Direct Invocation- EventBridge- SQS queues- SNS topicsWhen not using the optional FastAPI support (see below), the package's only dependencyis pydantic.## Use```pythonfrom lambda_handler import (    LambdaHandler,    EventBridgeEvent,    SnsEvent,    LambdaResponse,)handler = LambdaHandler()@handler.sns(topic_name=&quot;MyTopic&quot;)def handle_mytopic(event: SnsEvent) -&gt; LambdaResponse:    body = frobincate()    return LambdaResponse(status_code=200, body=body)@handler.event_bridge(resource_name=&quot;MyResource&quot;)def handle_myresource(event: EventBridgeEvent) -&gt; LambdaResponse:    body = fizzbuzz()    return LambdaResponse(status_code=200, body=body)```The handler looks after both the event parsing (so your functions should alwaysaccept an event of some `*Event` type), and its response as a properly-formatteddictionary.## Combining with FastAPIA notable omission from the events that are handled by `LambdaHandler` directly areHTTP requests. These can be handled by an instance of `FastAPI`, as follows:```pythonfrom fastapi import FastAPIfrom lambda_handler import LambdaHandlerapp = FastAPI(title=&quot;My HTTP handler&quot;)@app.get(&quot;/&quot;)def index():    return &quot;Hello, World!&quot;handler = LambdaHandler(fastapi_app=app)```The handler will then take care of everything on your behalf. If you'd prefer, youcan set `fastapi_app` later instead, and the handler will take care of that, too.```pythonfrom fastapi import FastAPIfrom lambda_handler import LambdaHandler, SnsEvent, LambdaResponsehandler = LambdaHandler()@handler.sns(topic_name=&quot;MyTopic&quot;)def handle_mytopic(event: SnsEvent) -&gt; LambdaResponse:    body = frobincate()    return LambdaResponse(status_code=200, body=body)app = FastAPI(title=&quot;My HTTP handler&quot;)@app.get(&quot;/&quot;)def index():    return &quot;Hello, World!&quot;handler.fastapi_app = app```FastAPI support requires the package to be installed with optional extras:`pip install &quot;lambda-handler[fastapi]&quot;`, and is built on top of the existing[Mangum](https://mangum.io/) package.## Model ValidationThe `*Event` models lambda-handler defines use [pydantic](pydantic-docs.helpmanual.io/)for parsing and validation, and these models are _generic_. This means that you canpass a type argument to the class when defining your function, and it will correctlyparse the content of the event (see below) to that type. If this is confusing, it'seasier to see it in action:```pythonfrom lambda_handler import LambdaHandler, SnsEvent, LambdaResponsefrom pydantic import BaseModelhandler = LambdaHandler()class MyModel(BaseModel):    thing: str@handler.sns(topic_name=topic_name)def test_func(event: SnsEvent[MyModel]) -&gt; LambdaResponse:    assert isinstance(event.records[0].sns.message, MyModel)    return LambdaResponse(status_code=&quot;200&quot;)```Here, we have parametrised `SnsEvent` with `MyModel` in the signature of `test_func`,meaning that the `message` attribute is parsed to a `MyModel` instance in the process.### Parametrised Event AttributesThe following attributes are those which are parsed to a Pydantic model for each eventtype:| Event Type              | Parsed Attribute                  ||:------------------------|:----------------------------------|| `DirectInvocationEvent` | `event.direct_invocation.body`    || `EventBridgeEvent`      | `event.detail`                    || `SnsEvent`              | `event.records[i].sns.message`    || `SqsEvent`              | `event.records[i].body`           |## Dealing with Raw DataIf you don't want to deal with parsed event objects, you can include the `raw=True`parameter to any of the wrapping methods of `LambdaHandler` and write a functionthat accepts and returns a `Dict[str, Any]` instead. Note that, in this case, theevent object will still be parsed by the `AwsEvent` subclasses for identification,but the event object will be passed as-is in dictionary format to the function.```pythonfrom fastapi import FastAPIfrom lambda_handler import LambdaHandler, SnsEvent, LambdaResponsefrom typing import Any, Dicthandler = LambdaHandler()@handler.sns(topic_name=&quot;MyTopic&quot;)def handle_mytopic(event: SnsEvent) -&gt; LambdaResponse:    body = frobincate()    return LambdaResponse(status_code=200, body=body)@handler.sns(topic_name=&quot;MyOtherTopic&quot;. raw=True)def handle_mytopic(event: Dict[str, Any]) -&gt; Dict[str, Any]:    body = frobincate()    return {&quot;statusCode&quot;: &quot;200&quot;}```</longdescription>
</pkgmetadata>