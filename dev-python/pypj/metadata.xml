<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![pypj Logo](https://raw.githubusercontent.com/edge-minato/pypj/main/doc/img/logo.png)[![pypi version](https://img.shields.io/pypi/v/pypj.svg?style=flat)](https://pypi.org/pypi/pypj/)[![python versions](https://img.shields.io/pypi/pyversions/pypj.svg?style=flat)](https://pypi.org/pypi/pypj/)[![license](https://img.shields.io/pypi/l/pypj.svg?style=flat)](https://github.com/edge-minato/pypj/blob/master/LICENSE)[![Unittest](https://github.com/edge-minato/pypj/actions/workflows/unittest.yml/badge.svg)](https://github.com/edge-minato/pypj/actions/workflows/unittest.yml)[![codecov](https://codecov.io/gh/edge-minato/pypj/branch/main/graph/badge.svg?token=YDZAMKUNS0)](https://codecov.io/gh/edge-minato/pypj)[![Code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black&quot;)[![Downloads](https://pepy.tech/badge/pypj)](https://pepy.tech/project/pypj)[![Downloads](https://pepy.tech/badge/pypj/week)](https://pepy.tech/project/pypj)`pypj` provides you a modern python project template. All the basic dev package installations, their configurations, and test workflows will be done, so you can focus on coding.## What will be providedWhat the _&quot;Modern&quot;_ means is expressed as following directory structure. Some developers prefer another tools, and you can remove or customize the tools to be prepared. Most of all configurations regarding the code style tools, like formatter and linter, are aggregated in `pyproject.toml`.```my-package/‚îú‚îÄ‚îÄ .github‚îÇ   ‚îú‚îÄ‚îÄ dependabot.yml       # Dependency updater‚îÇ¬†¬† ‚îî‚îÄ‚îÄ workflows‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ publish.yml      # Tagging on GitHub triggers publishing to Pypi‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ unittest.yml     # On each push and PR, execute the unittest‚îú‚îÄ‚îÄ .pre-commit-config.yaml  # Checks format and styles of each file‚îú‚îÄ‚îÄ .venv                    # venv can be outside of project directory‚îú‚îÄ‚îÄ .vscode‚îÇ¬†¬† ‚îî‚îÄ‚îÄ settings.json        # Format, Lint, Type check and Import sort on save‚îú‚îÄ‚îÄ Makefile                 # Useful command alias‚îú‚îÄ‚îÄ README.md                # How to start with pypj‚îú‚îÄ‚îÄ my-package               # Your package, can be &quot;src&quot;‚îú‚îÄ‚îÄ poetry.lock‚îú‚îÄ‚îÄ pyproject.toml           # Configured settings‚îî‚îÄ‚îÄ tests```## Developing tools pypj provides- Package manager: [`poetry`](https://github.com/python-poetry/poetry)- Formatter: [`black`](https://github.com/psf/black)- Linter: [`pflake8`](https://github.com/csachs/pyproject-flake8) (\*1)  - Plugin: [`flake8-bugbear`](https://github.com/PyCQA/flake8-bugbear)- Type checker: [`mypy`](https://github.com/python/mypy)- Import sorter: [`isort`](https://github.com/PyCQA/isort)- Test framework:  - [`pytest`](https://github.com/pytest-dev/pytest)    - [`pytest-cov`](https://github.com/pytest-dev/pytest-cov)    - [`pytest-mock`](https://github.com/pytest-dev/pytest-mock)  - [`tox`](https://github.com/tox-dev/tox)    - [`tox-gh-actions`](https://github.com/ymyzk/tox-gh-actions)- Git hooks manager: [`pre-commit`](https://github.com/pre-commit/pre-commit)(\*1) `pflake8` wraps `flake8` to aggregate settings to `pyproject.toml`## Coding format pypj provides- Max line length: `119` as default- Type hinting: `required`- And some detailed configurations## CustomizeHere is an actual interaction to customize.```Package name: my-packageDo you want to customize settings? (y/N): yMax line length (119):Use src directory (y/N):Keep venv in project (Y/n):Use github workflows (Y/n):Use vscode settings (Y/n):Use pre-commit (Y/n):Use command alias as Makefile (Y/n):Are you sure? (Y/n): y```## Other features- Single filed configurations on `pyproject.toml`- Single sourced versioning: [`single-source`](https://github.com/rabbit72/single-source)- Command alias: [`make`](https://www.gnu.org/software/make/)- CI/CD  - unittest workflow  - publish package workflow  - dependency updater configuration## Requirements- `python3`- `poetry` [[Installation guide](https://python-poetry.org/docs/#installation)]## Installation```shpip install pypj```## UsageSee also [README.md](pypj/resources/README.md) which will be generated with `pypj` command, it shows more actual usage.```$ pypj‚îå‚îÄ‚îê‚î¨ ‚î¨‚îå‚îÄ‚îê‚î¨‚îú‚îÄ‚îò‚îî‚î¨‚îò‚îú‚îÄ‚îò‚îÇ    python : 3.8.5‚î¥   ‚î¥ ‚î¥ ‚îî‚îò    poetry : 1.1.8Package name: my-packageDo you want to customize settings? (y/N): NDo you want to proceed? (y/N): yTask: Initialize package: my-package      Command: poetry new my-package ‚ú®      Poetry new done üöÄ      Command: poetry config virtualenvs.in-project true ‚ú®      Command: poetry add -D black ‚ú®      Command: poetry add -D pyproject-flake8 ‚ú®      Command: poetry add -D mypy ‚ú®      Command: poetry add -D isort ‚ú®      Command: poetry add -D pytest ‚ú®      Command: poetry add -D tox ‚ú®      Command: poetry add -D pytest-cov ‚ú®      Command: poetry add -D pytest-mock ‚ú®      Command: poetry add -D tox-gh-actions ‚ú®      Configure: __init__.py  ‚ú®      Create : my-package ‚ú®Task: Create README.md      Create : README.md ‚ú®Task: Configure pyproject.toml settings      Write  : pyproject.toml ‚ú®Task: Create github actions      Create : unittest.yml ‚ú®      Create : publish.yml ‚ú®      Create : dependabot.yml ‚ú®Task: Configure vscode settings      Create : .vscode/settings.json ‚ú®Task: Create makefile      Create : Makefile ‚ú®Task: Configure pre-commit      Create : .pre-commit-config.yaml ‚ú®Complete! üöÄLet's make the world better! ‚ú®üòãüêçüåé```## Example configurations on `pyproject.toml`With default setting, this kind of `pyproject.toml` file will be generated.```toml[tool.poetry]name = &quot;my-package&quot;version = &quot;0.1.0&quot;description = &quot;&quot;authors = [&quot;you &lt;you@example.com&gt;&quot;][tool.poetry.dependencies]python = &quot;^3.8&quot;[tool.poetry.dev-dependencies]pytest = &quot;^5.2&quot;black = &quot;^21.8b0&quot;pyproject-flake8 = &quot;^0.0.1-alpha.2&quot;mypy = &quot;^0.910&quot;isort = &quot;^5.9.3&quot;tox = &quot;^3.24.3&quot;pytest-cov = &quot;^2.12.1&quot;pytest-mock = &quot;^3.6.1&quot;tox-gh-actions = &quot;^2.7.0&quot;[build-system]requires = [&quot;poetry-core&gt;=1.0.0&quot;]build-backend = &quot;poetry.core.masonry.api&quot;[tool.black]line-length = 119exclude = '''(    migrations    | .mypy_cache    | .pytest_cache    | .tox    | .venv    | dist)'''[tool.flake8]max-line-length = 119max-complexity = 10select = &quot;C,E,F,W,B&quot;ignore = &quot;E203&quot;[tool.mypy]# commonpython_version = 3.8show_column_numbers = trueshow_error_context = trueignore_missing_imports = truecheck_untyped_defs = truedisallow_untyped_defs = true# warningwarn_return_any = truewarn_unused_configs = truewarn_redundant_casts = true[tool.isort]profile = &quot;black&quot;line_length = 119[tool.tox]legacy_tox_ini = &quot;&quot;&quot;[tox]envlist = py38, flake8, black, mypy, isortskipsdist = trueisolated_build = trueskip_missing_interpreters = true[testenv]whitelist_externals = poetryrequire_locked_deps = trueinstall_dev_deps = truecommands =    poetry install -vv --no-root    pytest ./tests -v --cov=pypj --cov-branch --durations=0[testenv:flake8]commands = poetry run pflake8 ./my-package[testenv:black]commands = poetry run black ./my-package[testenv:mypy]commands = poetry run mypy ./my-package[testenv:isort]commands = poetry run isort ./my-package&quot;&quot;&quot;```## Alias as Makefile```Makefile.PHONY: install update clean build run debug test stylePACKAGE := $(shell grep name pyproject.toml -m1 | awk -F&quot; &quot; '{print $$3}')VERSION := $(shell grep version pyproject.toml -m1 | awk -F&quot; &quot; '{print $$3}')install:        poetry install        poetry run pre-commit installupdate:        poetry update        poetry run pre-commit autoupdateclean:        rm -rf distbuild: clean        poetry buildrun:        poetry run ${PACKAGE} # Just in case the package provides a commanddebug:        poetry run pytest ./tests -s -v --cov=pypj --cov-branch --durations=0test:        poetry run toxstyle:        poetry run tox -e black,flake8,mypy,isort```## Supported python versions- Supported: `3.8`, `3.9`, `3.10`- Not supported: `3.7` or less**NOTE**: According to [Status of Python branches](https://devguide.python.org/versions/#versions), the EoL of Python 3.7 is `2023-06-27`.## FAQ- Is there any restrictions regarding the package naming?  - A name of python package is defined at [PEP-008 #Package and Module Names](https://www.python.org/dev/peps/pep-0008/#package-and-module-names) and it can be expressed as regex: `/^[a-zA-Z][0-9a-zA-Z\-_]*/`. `pypj` follows this rule.- Can I use current git initialized directory as a package root?  - NO. Instead of that, you can initialize the generated package directory with git.    1. `git init`    2. `git remote add origin https://github.com/USER/my-repository.git`    3. `git push -u origin main`</longdescription>
</pkgmetadata>