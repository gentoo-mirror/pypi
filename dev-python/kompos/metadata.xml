<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># kompos[![Build Status](https://www.travis-ci.com/adobe/kompos.svg?token=8uHqfhgsxdvJ93qWAxhn&amp;branch=main)](https://www.travis-ci.com/adobe/kompos) [![Docker pull](https://img.shields.io/docker/pulls/adobe/kompos)](https://hub.docker.com/r/adobe/kompos) [![](https://images.microbadger.com/badges/version/adobe/kompos.svg)](https://microbadger.com/images/adobe/kompos &quot;Get your own version badge on microbadger.com&quot;) [![License](https://img.shields.io/github/license/adobe/kompos)](https://github.com/adobe/kompos/blob/master/LICENSE) [![PyPI pyversions](https://img.shields.io/pypi/pyversions/kompos.svg)](https://pypi.python.org/pypi/kompos/)![kompos](img/kompos.png)**Kompos** is a configuration driven tool for provisioning and managingKubernetes infrastructure across AWS and Azure. It uses a hierarchical folderstructure and yaml files to store and generate configurations, with pluggablecompositions that encapsulates the infrastructure code and state. Terraform andhelmfile are supported as provisioners.Below is a graphical representation of the data flow.![kompos-data-flow](img/kompos-diagram.svg)## Installation_**NOTE**: Only Python 3 is supported._### PyPI```bashpip install kompos```### Locally for developmentUsing virtualenv```bashpip install virtualenvvirtualenv .envsource .env/bin/activate(env) cd kompos/(env) pip install --editable .```## Hierarchical configurationKompos leverages [himl](https://github.com/adobe/himl) to provide a[hiera](https://puppet.com/docs/puppet/latest/hiera_intro.html#concept-7256)-likeconfiguration structure.Checkout the [examples](./examples) for more information.## Nix integrationWith kompos you can leverage [nix](https://nixos.org/nix/) to pin yourinfrastructure code (i.e terraform &amp; helmfile releases) on a specific version.This enables you to finely control your deployments and use differentinfrastructure versions per environment, cluster etc.#### PrerequisitesInstall `nix` and `nix-prefetch-git`.```bash$ curl -L https://nixos.org/nix/install | bash$ nix-env -f '&lt;nixpkgs&gt;' -iA nix-prefetch-git```#### ConfigurationThe integration can be globally enabled or diabled with the flag `nix: [true|false]` and a disable overwritewith `--no-nix` argument. Below are thenecessary parts of komposconfig regarding nix &amp; versioning:```yamlterraform:  # This is the place to look for the terraform repo locally.  # Used as the default if nix is not enabled.  local_path: '/home/user/terraform-stack'  # This is needed in case the modules are not in the root of the repo.  root_path: 'src/terraform'  repo:    # This will be the name of the nix derivation for terraform.    name: 'terraform-stack'    # The repo we would like to version.    url: &quot;git@github.com:my-org/terraform-stack.git&quot;# Likewise for helmfile.helmfile:  local_path: '/home/user/helmfile-releases'  root_path: 'src/helmfiles'  repo:    name: 'helmfile-releases'    url: &quot;git@github.com:my-org/helmfile-releases.git&quot;nix: true```And in the hierarchical configuration you'll need the following keys:```yamlinfrastructure:  terraform:    version: &quot;0.1.0&quot; # A git tag or a commit sha.    # This is an optional field.    # The sha256 hash of the repo provides data integrity and ensures that we    # always get the same input.    #    # It can be omitted when you're using a tag that is periodically updated.    # (e.g in a dev/nightly environment). Since this is a mandatory field for nix,    # nix-prefetch-git will be used as a fallback to caclulate it.    sha256: &quot;ab9190b0ecc8060a54f1fac7de606e6b2c4757c227f2ce529668eb145d9a9516&quot;  # Likewise for helmfile.  helmfile:    version: &quot;0.1.0&quot;    sha256: &quot;139cd5119d398d06f6535f42d775986a683a90e16ce129a5fb7f48870613a1a5&quot;```### Docker Image## License[Apache License 2.0](/LICENSE)</longdescription>
</pkgmetadata>