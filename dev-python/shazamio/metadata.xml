<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://scrutinizer-ci.com/g/dotX12/ShazamIO/badges/quality-score.png?b=master&quot; alt=&quot;https://scrutinizer-ci.com/g/dotX12/ShazamIO/&quot;&gt;&lt;img src=&quot;https://scrutinizer-ci.com/g/dotX12/ShazamIO/badges/code-intelligence.svg?b=master&quot; alt=&quot;https://scrutinizer-ci.com/g/dotX12/ShazamIO/&quot;&gt;&lt;img src=&quot;https://scrutinizer-ci.com/g/dotX12/ShazamIO/badges/build.png?b=master&quot; alt=&quot;https://scrutinizer-ci.com/g/dotX12/ShazamIO/&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/shazamio.svg&quot; alt=&quot;https://badge.fury.io/py/shazamio&quot;&gt;&lt;img src=&quot;https://pepy.tech/badge/shazamio&quot; alt=&quot;https://pepy.tech/project/shazamio&quot;&gt;&lt;img src=&quot;https://pepy.tech/badge/shazamio/month&quot; alt=&quot;https://pepy.tech/project/shazamio&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/dotX12/shazamio.svg&quot; alt=&quot;https://github.com/dotX12/ShazamIO/blob/master/LICENSE.txt&quot;&gt;&lt;br&gt;&lt;br&gt;    &lt;img width=&quot;1000&quot; src=&quot;https://user-images.githubusercontent.com/64792903/109359596-ca561a00-7896-11eb-9c93-9cf1f283b1a5.png&quot;&gt;  🎵 Is a FREE asynchronous library from reverse engineered Shazam API written in Python 3.8+ with asyncio and aiohttp. Includes all the methods that Shazam has, including searching for a song by file. -----&lt;/p&gt;## 💿 Installation```💲 pip install shazamio```## 💻 Example&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔎🎵 Recognize track&lt;/i&gt;&lt;/summary&gt;Recognize a track based on a file&lt;br&gt;  ```python3import asynciofrom shazamio import Shazamasync def main():    shazam = Shazam()    out = await shazam.recognize_song('dora.ogg')    print(out)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;👨🎤 About artist&lt;/i&gt;&lt;/summary&gt;Retrieving information from an artist profile&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/artist/43328183/nathan-evans&quot;&gt;https://www.shazam.com/artist/43328183/nathan-evans&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, Serializeasync def main():    shazam = Shazam()    artist_id = 43328183    about_artist = await shazam.artist_about(artist_id)    serialized = Serialize.artist(about_artist)    print(about_artist)  # dict    print(serialized)  # serialized from dataclass factoryloop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🎵📄 About track&lt;/i&gt;&lt;/summary&gt;Get track information&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/track/552406075/ale-jazz&quot;&gt;https://www.shazam.com/track/552406075/ale-jazz&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, Serializeasync def main():    shazam = Shazam()    track_id = 552406075    about_track = await shazam.track_about(track_id=track_id)    serialized = Serialize.track(data=about_track)    print(about_track)  # dict    print(serialized)  # serialized from dataclass factoryloop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🎵⌛ Track listenings count&lt;/i&gt;&lt;/summary&gt;Returns the number of times a particular song has been played&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/track/559284007/rampampam&quot;&gt;https://www.shazam.com/track/559284007/rampampam&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazamasync def main():    # Example: https://www.shazam.com/track/559284007/rampampam    shazam = Shazam()    track_id = 559284007    count = await shazam.listening_counter(track_id=track_id)    print(count)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🎶💬 Similar songs&lt;/i&gt;&lt;/summary&gt;Similar songs based song id&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/track/546891609/2-phu%CC%81t-ho%CC%9Bn-kaiz-remix&quot;&gt;https://www.shazam.com/track/546891609/2-phu%CC%81t-ho%CC%9Bn-kaiz-remix&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazamasync def main():    shazam = Shazam()    track_id = 546891609    related = await shazam.related_tracks(track_id=track_id, limit=5, offset=2)    # ONLY №3, №4 SONG    print(related)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔎👨🎤 Search artists&lt;/i&gt;&lt;/summary&gt;Search all artists by prefix&lt;br&gt;  ```python3import asynciofrom shazamio import Shazam, Serializeasync def main():    shazam = Shazam()    artists = await shazam.search_artist(query='Lil', limit=5)    for artist in artists['artists']['hits']:        serialized = Serialize.artist(data=artist)        print(serialized)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔎🎶 Search tracks&lt;/i&gt;&lt;/summary&gt;Search all tracks by prefix&lt;br&gt;  ```python3import asynciofrom shazamio import Shazamasync def main():    shazam = Shazam()    tracks = await shazam.search_track(query='Lil', limit=5)    print(tracks)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔝🎶👨🎤 Top artist tracks&lt;/i&gt;&lt;/summary&gt;Get the top songs according to Shazam&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/artist/201896832/kizaru&quot;&gt;https://www.shazam.com/artist/201896832/kizaru&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, Serializefrom shazamio.schemas.artists import ArtistQueryfrom shazamio.schemas.enums import ArtistViewasync def main():    shazam = Shazam()    artist_id = 1081606072    about_artist = await shazam.artist_about(        artist_id,        query=ArtistQuery(            views=[                ArtistView.TOP_SONGS,            ],        ),    )    serialized = Serialize.artist_v2(about_artist)    for i in serialized.data[0].views.top_songs.data:        print(i.attributes.name)loop = asyncio.get_event_loop_policy().get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔝🎶🏙️ Top tracks in city&lt;/i&gt;&lt;/summary&gt;Retrieving information from an artist profile&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/charts/top-50/russia/moscow&quot;&gt;https://www.shazam.com/charts/top-50/russia/moscow&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, Serializeasync def main():    shazam = Shazam()    top_ten_moscow_tracks = await shazam.top_city_tracks(country_code='RU', city_name='Moscow', limit=10)    print(top_ten_moscow_tracks)    # ALL TRACKS DICT    for track in top_ten_moscow_tracks['tracks']:        serialized = Serialize.track(data=track)        # SERIALIZE FROM DATACLASS FACTORY        print(serialized)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔝🎶🏳️🌈 Top tracks in country&lt;/i&gt;&lt;/summary&gt;Get the best tracks by country code&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/charts/discovery/netherlands&quot;&gt;https://www.shazam.com/charts/discovery/netherlands&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, Serializeasync def main():    shazam = Shazam()    top_five_track_from_amsterdam = await shazam.top_country_tracks('NL', 5)    for track in top_five_track_from_amsterdam['tracks']:        serialized = Serialize.track(data=track)        print(serialized)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔝🎶🏳️🌈🎸 Top tracks in country by genre&lt;/i&gt;&lt;/summary&gt;The best tracks by a genre in the country&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/charts/genre/spain/hip-hop-rap&quot;&gt;https://www.shazam.com/charts/genre/spain/hip-hop-rap&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, GenreMusicasync def main():    shazam = Shazam()    top_spain_rap = await shazam.top_country_genre_tracks(        country_code='ES',        genre=GenreMusic.HIP_HOP_RAP,        limit=4    )    print(top_spain_rap)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔝🎶🌏🎸 Top tracks in word by genre&lt;/i&gt;&lt;/summary&gt;Get world tracks by certain genre&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/charts/genre/world/rock&quot;&gt;https://www.shazam.com/charts/genre/world/rock&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, Serialize, GenreMusicasync def main():    shazam = Shazam()    top_rock_in_the_world = await shazam.top_world_genre_tracks(genre=GenreMusic.ROCK, limit=10)    for track in top_rock_in_the_world['tracks']:        serialized_track = Serialize.track(data=track)        print(serialized_track.spotify_url)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;🔝🎶🌏Top tracks in word&lt;/i&gt;&lt;/summary&gt;Get the best tracks from all over the world&lt;br&gt;&lt;a href=&quot;https://www.shazam.com/charts/top-200/world&quot;&gt;https://www.shazam.com/charts/top-200/world&lt;/a&gt;  ```python3import asynciofrom shazamio import Shazam, Serializeasync def main():    shazam = Shazam()    top_world_tracks = await shazam.top_world_tracks(limit=10)    print(top_world_tracks)    for track in top_world_tracks['tracks']:        serialized = Serialize.track(track)        print(serialized)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;## How to use data serialization&lt;details&gt; &lt;summary&gt;&lt;i&gt;Open Code&lt;/i&gt;&lt;/summary&gt;  ```python3import asynciofrom shazamio import Shazam, Serializeasync def main():    shazam = Shazam()    top_five_track_from_amsterdam = await shazam.top_country_tracks('NL', 5)    for track in top_five_track_from_amsterdam['tracks']:        serialized = Serialize.track(data=track)        print(serialized.title)loop = asyncio.get_event_loop()loop.run_until_complete(main())  ```&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;Open photo: What song information looks like (Dict)&lt;/i&gt;&lt;/summary&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64792903/109454521-75b4c980-7a65-11eb-917e-62da3abefb8a.png&quot;&gt;&lt;/details&gt;&lt;details&gt; &lt;summary&gt;&lt;i&gt;Open photo: what song information looks like (Custom serializer)&lt;/i&gt;&lt;/summary&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64792903/109454465-57e76480-7a65-11eb-956c-1bcac41d7de5.png&quot;&gt;&lt;/details&gt;Agree, thanks to the serializer, you no longer need to manually select the necessary data from the dictionary. Now the serializer contains the most necessary information about an artist or a track.</longdescription>
</pkgmetadata>