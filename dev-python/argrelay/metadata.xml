<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Project status: working prototype&lt;a name=&quot;argrelay-secreencast&quot;&gt;&lt;/a&gt;[![asciicast](https://asciinema.org/a/LTHj0DHN2kfXJCHCGuJugNG4P.svg)](https://asciinema.org/a/LTHj0DHN2kfXJCHCGuJugNG4P)&lt;!--See: docs/dev_notes/screencast_notes.md--&gt;&lt;a name=&quot;argrelay-about&quot;&gt;&lt;/a&gt;# What's this?An integration framework to provide contextual Tab-auto-completion&lt;br/&gt;and search for command line interfaces (CLI) in Bash shell.&lt;a name=&quot;argrelay-original-use-case&quot;&gt;&lt;/a&gt;### Original use caseAuto-complete based on arbitrary structured data sets (e.g. config or ref data)&lt;/br&gt;**directly from standard shell**.[^1]This requires data indexing for [responsive lookup][completion_perf_notes.md]&lt;br/&gt;(the client has to start and find relevant data on each Tab-request).The straightforward approach to meet performance requirements taken by `argrelay` is&lt;br/&gt;to run a standby data server.&gt; For example, with several thousands of service instances,&lt;br/&gt;&gt; even if someone manages to generate Bash completion config,&lt;br/&gt;&gt; it takes considerable time to load it for every shell instance.Unlike static|generated|offline index, standby server also naturally supports dynamic data updates.&lt;!--&lt;a name=&quot;argrelay-accidental-use-case&quot;&gt;&lt;/a&gt;### Accidental use casesFamiliar terminal with:*   data-intensive CLI and seamless search through live data*   minimalistic enum-based query syntax*   catalogues of selectable functions with unified/redefined CLI--&gt;&lt;a name=&quot;argrelay-name&quot;&gt;&lt;/a&gt;# What's in a name?Eventually, `argrelay` will &quot;relay&quot; command line arguments (hence, the name)&lt;br/&gt;with associated data to user domain-specific program.To clarify, let's compare side-by-side&lt;br/&gt;(independent) `argparse` _library_ and `argrelay` _framework_:```mermaidgraph RL;    %% user --&gt; library    %% user --&gt; framework    subgraph `argparse` library        direction LR        some.py &lt;--&gt; argparse;    end    argrelay_client -. delegates = relays .-&gt; some.py;    subgraph `argrelay` framework        direction TB        subgraph client            direction LR            relay2some --&gt; argrelay_client[argrelay client];        end        subgraph server            direction TB            argrelay_server[argrelay server] &lt;--&gt; data[(data)];        end    end```| Category       | `argparse` is a library                                    | `argrelay` is a framework                                                      ||:---------------|:-----------------------------------------------------------|:-------------------------------------------------------------------------------|| Given:         | `some.py` is some script                                   | `relay2some` is a &quot;wrapper&quot; command&lt;br/&gt; configured in Bash to call `argrelay` || In Bash:       | type `some.py` to execute it                               | type `relay2some` to let `argrelay` decide&lt;br/&gt; whether to execute `some.py`   || Execution:     | `some.py` calls `argparse` library                         | `some.py` is called by the framework&lt;br/&gt; when `relay2some` is invoked         || Function:      | `some.py` directly does&lt;br/&gt; domain-specific task          | `relay2some` directly only &quot;relays&quot;&lt;br/&gt; the command line to `argrelay`        || CLI source:    | `some.py` defines its CLI&lt;br/&gt; itself via `argparse`       | CLI for `relay2some` is defined by&lt;br/&gt; the framework via configs/plugins/data || CLI is:        | mostly code-driven                                         | mostly data-driven                                                             || Modify CLI:    | modify `some.py`                                           | keep `some.py` intact,&lt;br/&gt; re-configure `argrelay` instead                    || Prog lang:     | `some.py` has to be&lt;br/&gt; a Python script to use `argparse` | `some.py` can be anything&lt;br/&gt; somehow executable by `argrelay`                || **Important:** | `some.py`/`argparse` have&lt;br/&gt; no domain data to query     | `relay2some` may access any&lt;br/&gt; domain data from `argrelay` server            |&lt;a name=&quot;argrelay-includes&quot;&gt;&lt;/a&gt;# What's missing?`argrelay` excludes:*   Any (real) domain-specific data*   Any (useful) domain-specific plugins&lt;a name=&quot;argrelay-excludes&quot;&gt;&lt;/a&gt;# What's in the package?`argrelay` includes:*   **Client** to be invoked by Bash hook on every Tab to&lt;br/&gt;    send command line arguments to the server.*   **Server** to parse command line and propose values from&lt;br/&gt;    pre-loaded data for the argument under the cursor.*   **Plugins** to customize:    *   actions the client can run    *   objects the server can search    *   grammar the command line can have*   **Interfaces** to bind these all together.*   **Demo** example to start from.*   **Testing** support and coverage.&lt;a name=&quot;argrelay-focus&quot;&gt;&lt;/a&gt;# CLI-friendly completion: primary focusGUI-s are secondary for `argrelay`'s niche because&lt;br/&gt;GUI-s do not have the restrictions CLI-s have:*   Technically, the server can handle requests from anywhere (GUI).*   But primary API-s are feature-tailored to support CLI (because everyone does GUI).&lt;details&gt;&lt;summary&gt;show example&lt;/summary&gt;For example, in GUI-s, typing a query into a search bar may easily be accompanied by&lt;br/&gt;(1) a separate (from the search bar) window area&lt;br/&gt;(2) with individually selectable&lt;br/&gt;(3) full-text-search results&lt;br/&gt;(4) populated **async-ly** with typing.&lt;br/&gt;In CLI-s, `grep` does (3) full-text-search, but what about the rest (1), (2), (4)?To facilitate selection of results,&lt;br/&gt;catalogue-like navigation with auto-completion (rather than full-text-search)&lt;br/&gt;seems the answer.&lt;/details&gt;Nevertheless, GUI can also benefit from minimalist single line structured search queries.&lt;a name=&quot;argrelay-story&quot;&gt;&lt;/a&gt;# Syntax: origin storyWhen an interface is limited...You probably heard about research where&lt;br/&gt;apes were taught to communicate with humans in sign language&lt;br/&gt;(their vocal apparatus cannot reproduce speech effectively).Naturally, with limited vocabulary,&lt;br/&gt;they combined known words to describe unnamed things.For example,&lt;br/&gt;to ask for a watermelon (without knowing the exact sign),&lt;br/&gt;they used combination of known &quot;drink&quot; + &quot;sweet&quot;.The default `argrelay` CLI-interpretation plugin (see `FuncArgsInterp`)&lt;br/&gt;prompts for object properties to disambiguate search results until single one is found.&lt;details&gt;&lt;summary&gt;continue story&lt;/summary&gt;### Narrow down optionsWithout any context, just two words &quot;drink&quot; + &quot;sweet&quot; leave&lt;br/&gt;a lot of ambiguity to guess a watermelon (many drinks are sweet).A more clarified &quot;sentence&quot; could be:&gt; drink striped red sweet fruitEach word narrows down matching object set&lt;br/&gt;to more specific candidates (including watermelon).### Avoid strict orderNotice that the word order is not important -&lt;br/&gt;this line provides (almost) equivalent hints for guessing:&gt; striped sweet fruit red drinkIt is not valid English grammar, but it somewhat works.### Use &quot;enum language&quot;Think of speaking &quot;enum language&quot;:*   Each word is an enum value of some enum type:    *   Color: red, green, ...    *   Taste: sweet, salty, ...    *   Temperature: hot, cold, ...    *   Action: drink, play, ...*   Word order is irrelevant because _enum value spaces do not overlap_ (almost).*   To &quot;say&quot; something, one keeps clarifying meaning by more enum values.Now, imagine the enum types and values are not supposed to be memorized,&lt;br/&gt;they are proposed to select from (based on the current context).### Address any objectSuppose enums are binary = having only two values&lt;br/&gt;(cardinality = 2: black/white, hot/cold, true/false, ...).For example,&lt;br/&gt;5 words could slice the object space to&lt;br/&gt;single out (identify exactly) up to 2^5 = 32 objects.To &quot;address&quot; larger object spaces,&lt;br/&gt;larger enum cardinalities or more word places are required.*   Each enum type ~ a dimension.*   Each specific enum value ~ a coordinate.*   Each object fills a slot in such multi-dimensional discrete space.### Apply to CLICLI-s are used to write commands - imperative sentences:&lt;br/&gt;specific actions on specific objects.The &quot;enum language&quot; above covers searching both&lt;br/&gt;an action and any object it requires.### Suggest contextuallyNot every combination of enum values may point to an existing object.For data with sparse object spaces,&lt;br/&gt;the CLI-suggestion can be shaped by coordinates applicable to&lt;br/&gt;remaining (narrowed down) object sets.### Differentiate on purposeAll above may be an obvious approach to come up with,&lt;br/&gt;but it is not ordinary for CLI-s of most common commands (due to lack of data):| Common commands (think `ls`, `git`, `ssh`, ...):                            | `argrelay`-wrapped actions:                           ||:----------------------------------------------------------------------------|:------------------------------------------------------|| have succinct syntax and prefer&lt;br/&gt; single-char switches (defined by code) | prefer explicit &quot;enum language&quot;&lt;br/&gt; defined by data  || rely on humans to memorize syntax&lt;br/&gt; (options, ordering, etc.)            | assume humans have&lt;br/&gt; a loose idea about the syntax || auto-complete only for objects&lt;br/&gt; known to the OS (hosts, files, etc.)    | auto-complete from&lt;br/&gt; a domain-specific data        |&lt;/details&gt;Learn more about [how search works][how_search_works.md].&lt;a name=&quot;argrelay-demo&quot;&gt;&lt;/a&gt;# Quick demoThis is a non-intrusive demo&lt;br/&gt;(without permanent changes to user env, e.g. no `~/.bashrc` changes).Clone this repo somewhere.If `dev_shell.bash` is run for the first time,&lt;br/&gt;it will ask to provide `python_conf.bash` file - follow instruction on error.To start both the server and the client,&lt;br/&gt;two terminal windows are required.*   Server:    Start the first sub-shell:    ```sh    ./dev_shell.bash    ```    In this sub-shell, start the server:    ```sh    # in server `dev_shell.bash`:    run_argrelay_server    ```*   Client:    Start the second sub-shell:    ```sh    ./dev_shell.bash    ```    While it is running (temporarily),&lt;br/&gt;    this sub-shell is configured for Bash Tab-completion for `relay_demo` command.*   Try to `Tab`-complete command `relay_demo` using [demo test data][TD_63_37_05_36.demo_services_data.md]:    ```sh    # in client `dev_shell.bash`:    relay_demo goto host            # press Tab one or multiple times    ```    ```sh    # in client `dev_shell.bash`:    relay_demo goto host dev        # press Alt+Shift+Q shortcut to describe command line args    ```*   Inspect how auto-completion binds to `relay_demo` command:    ```sh    # in client `dev_shell.bash`:    complete -p relay_demo    ```*   Inspect client and server config:    *   server config: `~/.argrelay.conf.d/argrelay.server.yaml`    *   client config: `~/.argrelay.conf.d/argrelay.client.json`*   To clean up, exit the sub-shells:    ```sh    # in client or server `dev_shell.bash`:    exit    ```&lt;a name=&quot;argrelay-backend&quot;&gt;&lt;/a&gt;# Data backendThere are two options at the moment - both using [MongoDB][MongoDB] API:| Category       | `mongomock` (default)                                                                   | `PyMongo`                                                                                        ||:---------------|:----------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------|| Data set size: | practical limit ~ 10K                                                                   | tested at 1M                                                                                     || Pro:           | nothing else to install                                                                 | no practical data set size limit found (yet)&lt;br/&gt; for `argrelay` intended use cases              || Con:           | understandably, does not meet&lt;br/&gt; non-functional requirements&lt;br/&gt; for large data sets | require some knowledge of MongoDB,&lt;br/&gt; additional setup,&lt;br/&gt; additional running processes&lt;br/&gt; |`PyMongo` connects to running MongoDB instance which has to be configured in `mongo_config`&lt;br/&gt;and `mongomock` should be disabled in `argrelay.server.yaml`:```diff-    use_mongomock_only: True+    use_mongomock_only: False```&lt;a name=&quot;argrelay-next-steps&quot;&gt;&lt;/a&gt;# What's next?*   After trying non-intrusive demo, try [intrusive one][dev_env_and_target_env_diff.md] for permanent setup.*   Modify [`ServiceLoader.py` plugin][link_to_load_data_envelopes] to provide data beyond [demo data set][TD_63_37_05_36.demo_services_data.md].    The data can be simply hard-coded with different `test_data` tag&lt;br/&gt;    (other than `TD_63_37_05_36` demo) and selected in `argrelay.server.yaml`:    ```diff        ServiceLoader:            plugin_module_name: argrelay.custom_integ.ServiceLoader            plugin_class_name: ServiceLoader            plugin_type: LoaderPlugin            plugin_config:                test_data_ids_to_load:                    #-   TD_70_69_38_46  # no data    -               -   TD_63_37_05_36  # demo    +               -   TD_NN_NN_NN_NN  # custom data                    #-   TD_38_03_48_51  # large generated    ```    If hard-coding is boring, soft-code to load it from external data source.*   Replace [redirect to `ErrorDelegator.py` plugin][link_to_redirect_to_error]&lt;br/&gt;    to execute something useful instead when use hits `Enter`.*   ...*   Many features and docs are actively taking their shape -&lt;br/&gt;    any (minimal, unfiltered, first-thought) feedback is welcome.    [Raise questions or suggestions as issues][repo_issues] to influence the dev direction.### [footnotes][^1]: **Brief History**    Tab-completion with custom (domain-specific) arg values is&lt;br/&gt;    constantly on a dev wish list for complex backend.    *   DEC 2022: Attempts to find an adequate solution for sizeable data yielded no results.    *   JAN 2023: The [earlier question][earlier_stack_question] received zero activity for a month&lt;/br&gt;        (with a single silent downvote, auto-deleted by a bot).&lt;br/&gt;        Request to restore it was &amp;#127925; Shut Down In Flames.        &lt;!--        It seeked recommendations which tend to be spammed by answers&lt;br/&gt;        (controversially, some spam once a month helps more than none).        --&gt;    *   FEB 2023: The [explanation hangs on the appropriate site][later_stack_question] now -&lt;br/&gt;        recommendations are still very welcome there.&lt;br/&gt;        But, with some patience for integration, `argrelay` already became satisfying enough.&lt;!-- refs ---------------------------------------------------------------------------------------------------------- --&gt;[completion_perf_notes.md]: docs/dev_notes/completion_perf_notes.md[MongoDB]: https://www.mongodb.com/[dev_env_and_target_env_diff.md]: docs/dev_notes/dev_env_and_target_env_diff.md[TD_63_37_05_36.demo_services_data.md]: docs/test_data/TD_63_37_05_36.demo_services_data.md[earlier_stack_question]: https://stackoverflow.com/q/74996560/441652[later_stack_question]: https://softwarerecs.stackexchange.com/questions/85247/[how_search_works.md]: docs/dev_notes/how_search_works.md[link_to_redirect_to_error]: https://github.com/uvsmtid/argrelay/blob/v0.0.0.dev27/src/argrelay/custom_integ/ServiceInvocator.py#L148[link_to_load_data_envelopes]: https://github.com/uvsmtid/argrelay/blob/v0.0.0.dev27/src/argrelay/custom_integ/ServiceLoader.py#L111[repo_issues]: https://github.com/uvsmtid/argrelay/issues</longdescription>
</pkgmetadata>