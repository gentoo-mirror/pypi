<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AioshellyAsynchronous library to control Shelly devices**This library is under development**## Requirements- Python &gt;= 3.10- bluetooth-data-tools- aiohttp- orjson## Install```bashpip install aioshelly```## Install from SourceRun the following command inside this folder```bashpip install --upgrade .```## Examples### Gen1 Device (Block/CoAP) example:```pythonimport asynciofrom pprint import pprintimport aiohttpfrom aioshelly.block_device import COAP, BlockDevicefrom aioshelly.common import ConnectionOptionsfrom aioshelly.exceptions import (    DeviceConnectionError,    FirmwareUnsupported,    InvalidAuthError,)async def test_block_device():    &quot;&quot;&quot;Test Gen1 Block (CoAP) based device.&quot;&quot;&quot;    options = ConnectionOptions(&quot;192.168.1.165&quot;, &quot;username&quot;, &quot;password&quot;)    async with aiohttp.ClientSession() as aiohttp_session, COAP() as coap_context:        try:            device = await BlockDevice.create(aiohttp_session, coap_context, options)        except FirmwareUnsupported as err:            print(f&quot;Device firmware not supported, error: {repr(err)}&quot;)            return        except InvalidAuthError as err:            print(f&quot;Invalid or missing authorization, error: {repr(err)}&quot;)            return        except DeviceConnectionError as err:            print(f&quot;Error connecting to {options.ip_address}, error: {repr(err)}&quot;)            return        for block in device.blocks:            print(block)            pprint(block.current_values())            print()if __name__ == &quot;__main__&quot;:    asyncio.run(test_block_device())```### Gen2 (RPC/WebSocket) device example:```pythonimport asynciofrom pprint import pprintimport aiohttpfrom aioshelly.common import ConnectionOptionsfrom aioshelly.exceptions import (    DeviceConnectionError,    FirmwareUnsupported,    InvalidAuthError,)from aioshelly.rpc_device import RpcDevice, WsServerasync def test_rpc_device():    &quot;&quot;&quot;Test Gen2 RPC (WebSocket) based device.&quot;&quot;&quot;    options = ConnectionOptions(&quot;192.168.1.188&quot;, &quot;username&quot;, &quot;password&quot;)    ws_context = WsServer()    await ws_context.initialize(8123)    async with aiohttp.ClientSession() as aiohttp_session:        try:            device = await RpcDevice.create(aiohttp_session, ws_context, options)        except FirmwareUnsupported as err:            print(f&quot;Device firmware not supported, error: {repr(err)}&quot;)            return        except InvalidAuthError as err:            print(f&quot;Invalid or missing authorization, error: {repr(err)}&quot;)            return        except DeviceConnectionError as err:            print(f&quot;Error connecting to {options.ip_address}, error: {repr(err)}&quot;)            return        pprint(device.status)if __name__ == &quot;__main__&quot;:    asyncio.run(test_rpc_device())```## Example scriptThe repository includes example script to quickly try it out.### Connect to a device and print its status whenever we receive a state change:```python3 example.py -ip &lt;ip&gt; [-u &lt;username&gt;] [-p &lt;password] -i```### Connect to all the devices in `devices.json` at once and print their status:```python3 example.py -d -i```### Show usage help:```python3 example.py -h```## Contribution guidelinesObject hierarchy and property/method names should match the [Shelly API](https://shelly-api-docs.shelly.cloud/).</longdescription>
</pkgmetadata>