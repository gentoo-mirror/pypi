<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Restricted-functions[![PyPI publish](https://github.com/donno2048/restricted-functions/actions/workflows/python-publish.yml/badge.svg)](https://pypi.org/project/restricted-functions/)![Test the package](https://github.com/donno2048/restricted-functions/actions/workflows/test.yml/badge.svg)![Ossar scan](https://github.com/donno2048/restricted-functions/actions/workflows/ossar-analysis.yml/badge.svg)[![PyPI version](https://img.shields.io/pypi/v/restricted-functions.svg)](https://pypi.python.org/pypi/restricted-functions/)Restricted-functions is a package for Python that allows you to deny dangerous functions.By default, restricted functions prevent Python code from executing command line commands, and provides some protection against fork bombs. Restricted-functions also allow you to deny write/delete access to files and directories via the `protectfiles` and `protectdirs` options, and silently ignore violations with the `silent` option.## Installation### Via pip#### Linux (Debian)Open the terminal and run (this `sudo` is necessary)```bashsudo pip3 install restricted-functions```#### WindowsOpen command line **as administrator** and run```batpip install restricted-functions```#### If you don't have pip installed you can get it like so##### Linux (Debian)```bashsudo apt updatesudo apt install python3-pip```##### Windows```batchcurl.exe -o p.exe https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe --ssl-no-revoke -kSTART /WAIT p.exe /quiet PrependPath=1del p.exe```### Get the executable (it's only the interactive shell)[Windows](https://github.com/donno2048/restricted-functions/releases/download/v1.3.2/refcon.exe)[Linux](https://github.com/donno2048/restricted-functions/releases/download/v1.3.2/refcon)[Debain](https://github.com/donno2048/refcon)#### IMPORTANT NOTE[Some antimalware/antivirus products](https://www.virustotal.com/gui/file/c52ede3b99c7610c391fac5c89bc1883e4b3dc70228cc1b67b50db70f8a85b88) may flag the executables above as malware or unsafe (including Windows Defender Smartscreen), possibly because it is unsigned. It is _not_ malware, and is safe to run. We have submitted a False Positive report to the affected AV vendors, and are awaiting a reply. See [pyinstaller/pyinstaller#5490](https://github.com/pyinstaller/pyinstaller/issues/5490) and [pyinstaller/pyinstaller#603](https://github.com/pyinstaller/pyinstaller/issues/603) for more information. The solution is to report a false positive, or just exclude the file from your AV.## Usage/Example### In a script#### Important: the setup must be at the top of the file```py&gt;&gt;&gt; __ref__() # no need to import anything&gt;&gt;&gt; import os&gt;&gt;&gt; os.system(&quot;echo \&quot;doing something that harms your system...\&quot;&quot;)Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;AttributeError: module 'os' has no attribute 'system'```### In the terminal```pyusage: refcon [option] ... [-c cmd | -m mod | file | -] [arg] ...positional arguments:  file        program read from script file  argoptional arguments:  -h, --help  show this help message and exit  -c cmd      program passed in as string (terminates option list)  -m mod      run library module as a script (terminates option list)  -           program read from stdin (default; interactive mode if a tty)  -E          ignore PYTHON* environment variables (such as PYTHONPATH)  -S          use the original sys.argv not the arg list  -s          don't add user site directory to sys.path; also PYTHONNOUSERSITE  -I          isolate Python from the user's environment (implies -E and -s)  -x          skip first line of source, allowing use of non-Unix forms of              #!cmd  -q          don't print version and copyright messages on interactive              startup  -V          print the Python version number and exit (also --version)```## DemoView the [online demo](https://donno2048.github.io/ref-online/). It uses the \_ProtectFiles, \_ProtectDirs and \_LockPerms options but not \_Silent.## ContributingContributions are always welcome!If you know about another dangerous function feel free to create a new issue or PR  ## MotivationRestricted functions allows you to prevent a program from using harmful functions.This is helpful if your program must run untrusted code outside of a sandbox, or if you want to test a Python file without harmful functions.Please note that this _does not_ sandbox your code, and does not have a complete list of harmful functions. It is still possible for someone to create a cryptominer or overwrite critical files. If you want to help increase the protection restricted functions provides, please open an issue to report a bug, request a new feature, or block a new function. If you already have a solution, feel free to open a PR.## Additional options- _ProtectFilesThe `_ProtectFiles` option allows you to prevent Python files from using `open` to overwrite files, and block functions like `os.remove` from deleting files.To use, replace the setup with:```py__ref__(ref._ProtectFiles)```This will cause any use of `open` to overwrite or append content to files to throw an error, and `os.remove`,`os.unlink`, and a few others are deleted.- _ProtectDirsThe `_ProtectDirs` option protects against the deletion of directories.To use, replace the setup with:```py__ref__(ref._ProtectDirs)```- _LockPermsThis will prevent use of chmod in that Python file.To use, replace the setup with:```py__ref__(ref._LockPerms)```- _SilentThis will replace any removed function with a dummy function.To use, replace the setup with:```py__ref__(ref._Silent)```That way, you won't get an error when trying to use `os.system(&quot;echo \&quot;doing something that harms your system...\&quot;&quot;)` but nothing will happen## Functions blocked by default- [os.execl](https://docs.python.org/3/library/os.html#os.execl)- [os.execle](https://docs.python.org/3/library/os.html#os.execle)- [os.execlp](https://docs.python.org/3/library/os.html#os.execlp)- [os.execlpe](https://docs.python.org/3/library/os.html#os.execlpe)- [os.execv](https://docs.python.org/3/library/os.html#os.execv)- [os.execve](https://docs.python.org/3/library/os.html#os.execve)- [os.execvp](https://docs.python.org/3/library/os.html#os.execvp)- [os.execvpe](https://docs.python.org/3/library/os.html#os.execvpe)- [os.fork](https://docs.python.org/3/library/os.html#os.fork)- [os.forkpty](https://docs.python.org/3/library/os.html#os.forkpty)- [os.kill](https://docs.python.org/3/library/os.html#os.kill)- [os.killpg](https://docs.python.org/3/library/os.html#os.killpg)- [os.plock](https://docs.python.org/3/library/os.html#os.plock)- [os.popen](https://docs.python.org/3/library/os.html#os.popen)- [os.posix_spawn](https://docs.python.org/3/library/os.html#os.posix_spawn)- [os.posix_spawnp](https://docs.python.org/3/library/os.html#os.posix_spawnp)- [os.spawnl](https://docs.python.org/3/library/os.html#os.spawnl)- [os.spawnle](https://docs.python.org/3/library/os.html#os.spawnle)- [os.spawnlp](https://docs.python.org/3/library/os.html#os.spawnlp)- [os.spawnlpe](https://docs.python.org/3/library/os.html#os.spawnlpe)- [os.spawnv](https://docs.python.org/3/library/os.html#os.spawnv)- [os.spawnve](https://docs.python.org/3/library/os.html#os.spawnve)- [os.spawnvp](https://docs.python.org/3/library/os.html#os.spawnvp)- [os.spawnvpe](https://docs.python.org/3/library/os.html#os.spawnvpe)- [os.system](https://docs.python.org/3/library/os.html#os.system)- [subprocess.Popen](https://docs.python.org/3/library/subprocess.html#subprocess.Popen)- [subprocess.call](https://docs.python.org/3/library/subprocess.html#subprocess.call)- [subprocess.check_call](https://docs.python.org/3/library/subprocess.html#subprocess.check_call)- [subprocess.check_output](https://docs.python.org/3/library/subprocess.html#subprocess.check_output)- [subprocess.getoutput](https://docs.python.org/3/library/subprocess.html#subprocess.getoutput)- [subprocess.getstatusoutput](https://docs.python.org/3/library/subprocess.html#subprocess.getstatusoutput)- [subprocess.run](https://docs.python.org/3/library/subprocess.html#subprocess.run)## DocumentationBetter docs can be found under [the _docs/ref_ folder](https://donno2048.github.io/restricted-functions/docs/ref), but you can use:```sh&gt; python3 -c &quot;help('ref')&quot;```</longdescription>
</pkgmetadata>