<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DynamoDB Package for detech.aiThis is detech.ai's package to access Dynamodb.# Imports```pythonimport detech_query_pkgfrom detech_query_pkg import dynamodb_queries as db_queriesfrom detech_query_pkg.utils import dynamodb_utils as db_utils#Start DynamoDB Clientdb_utils.create_dynamodb_client(aws_access_key_id=AWS_ACCESS_KEY_ID,                       aws_secret_access_key=AWS_SECRET_ACCESS_KEY, region_name=REGION_NAME)```# Initialize Client```pythondef create_dynamodb_client(aws_access_key_id,aws_secret_access_key, region_name)```# Functions## dynamodb&lt;details&gt;  &lt;summary&gt;insert_alert&lt;/summary&gt;  ```python  def insert_alert(alert_id, metric_id, org_id, app_id, team_id, assigned_to, start_time, end_time, alert_description, is_acknowledged, anomalies_dict, related_prev_anomalies,  service_graph, significance_score, dynamodb)  #Example  insert_alert(alert_id = &quot;256828&quot;, metric_id = 123, org_id = 'org_id', app_id = 'app_id', team_id = 'team_id', assigned_to = 'Jorge', \  start_time = '2020-09-03 12:00:00', end_time = '2020-09-03 12:20:00', alert_description = 'Spike in costs',\  is_acknowledged = 'True', anomalies_dict = {}, related_prev_anomalies = {},  service_graph = {}, significance_score = '34.3')  ``` &lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_alert_item_by_key&lt;/summary&gt;  ```python  def get_alert_item_by_key(anom_id, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;update_alert_with_related_anomalies&lt;/summary&gt;  ```python  def update_alert_with_related_anomalies(alert_id,start_time, corr_anoms_dict, related_prev_anomalies, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;terminate_alert&lt;/summary&gt;  ```python  def terminate_alert(alert_id,start_time, end_timestamp, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;create_metric&lt;/summary&gt;  ```python  def create_metric(metric_id, date_bucket, metric_name, provider, namespace,  agent, org_id, app_id, alignment, groupby, dimensions, data_points_list, dynamodb)  #Example  create_metric(    metric_id = &quot;test1&quot;, date_bucket = &quot;2020-10-02&quot;, metric_name = &quot;error_rate&quot;,    provider = &quot;aws&quot;, namespace = &quot;dynamodb&quot;, agent = &quot;CloudWatch&quot;, org_id = &quot;test&quot;,    app_id = &quot;app1&quot;, alignment = &quot;Sum&quot;,    dimensions = [{&quot;Name&quot;: &quot;TableName&quot;, &quot;Value&quot;: &quot;alerts.config&quot;}],    last = 1535530432, data_points_list = [      { 'val': 55, 'time' : 1535530430},       { 'val': 56, 'time': 1535530432}], dynamodb=dynamodb  )  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;batch_insert_metric_objects&lt;/summary&gt;  ```python  def batch_insert_metric_objects(list_of_metric_objects, dynamodb)  #Inserts list of metrics objects in batch into Dynamodb  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_metric_details&lt;/summary&gt;  ```python  def get_metric_details(metric_id, dynamodb)  #Fetches all the details for a specific metric_id  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_metric_item_by_key&lt;/summary&gt;  ```python  def get_metric_item_by_key(metric_id, curr_date, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;scan_metrics_by_encrypted_id&lt;/summary&gt;  ```python  def scan_metrics_by_encrypted_id(anom_alarm_id, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_alerts_configs_by_key&lt;/summary&gt;  ```python  def query_alerts_configs_by_key(metric_id, dynamodb)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;insert_alert_config&lt;/summary&gt;  ```python  def insert_alert_config(metric_id, alert_title, severity, alert_type, alert_direction, description, duration, duration_unit, rule_dict, recipients_list, owner_dict, dynamodb)  #Example  insert_alert_config(    metric_id = &quot;metric1245&quot;, alert_title = &quot;Anomaly by Cluster&quot;, severity = &quot;critical&quot;,    alert_type = &quot;anomaly&quot;, alert_direction = &quot;spikes/drops&quot;, description = &quot;Relevant to Play Store billing user journey&quot;,    duration= 12, duration_unit = &quot;hours&quot;, rule_dict = {}, recipients_list = [{      &quot;channel&quot; : &quot;webhook&quot;,       &quot;contact&quot; : &quot;j.velez2210@gmail.com&quot;      },{        &quot;channel&quot; : &quot;slack&quot;,        &quot;contact&quot; : &quot;j.velez2210@gmail.com&quot;      }    ],     owner_dict = {      &quot;user_id&quot; : &quot;user12341&quot;,      &quot;user_name&quot; : &quot;João Tótó&quot;,    }  )  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_most_recent_metric_fetching_log&lt;/summary&gt;  ```python  def query_most_recent_metric_fetching_log(component_id, dynamodb)  #Fetches the log with the highest timestamp, from all the logs between start &amp; end ts  ```&lt;/details&gt;## dynamodb_utils&lt;details&gt;  &lt;summary&gt;put_item&lt;/summary&gt;  ```python  def put_item(item_dict, table_name, dynamodb)  #Inserts json item into DynamoDB table  #Example  item_dict = {    &quot;attr&quot; : &quot;value&quot;,    &quot;attr2&quot; : &quot;value2&quot;  }  table_name = &quot;alerts&quot;  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;batch_insert&lt;/summary&gt;  ```python  def batch_insert(list_of_item_dicts, table_name, dynamodb)  #Inserts a list of item_dicts in batch to dynamodb  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_item&lt;/summary&gt;  ```python  def get_item(key_dict, table_name, dynamodb)  #Retrieves item from DynamoDB table  #Example  key_dict = {    &quot;prim_key&quot; = &quot;value&quot;,    &quot;sort_key&quot; = &quot;value&quot;  }  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_item_and_retrieve_specific_attributes&lt;/summary&gt;  ```python  def get_item_and_retrieve_specific_attributes(key_dict, attr_list, table_name, dynamodb)  #Retrieves item from DynamoDB table and retrieve specific attributes  #Example  key_dict = {    &quot;prim_key&quot; :&quot;value&quot;,    &quot;sort_key&quot; : &quot;value&quot;  }  attr_list = ['attr1', 'attr2']  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;update_item&lt;/summary&gt;  ```python  def update_item(key_dict, update_expression, expression_attr_values, table_name, dynamodb)  #Retrieves item from DynamoDB table  #Example  key_dict = {    &quot;prim_key&quot; = &quot;value&quot;,    &quot;sort_key&quot; = &quot;value&quot;  }  update_expression = &quot;set service_graph=:i, metric_list=:l, significance_score=:s&quot;  expression_attr_values = {    ':i': {'s1':['s2', 's3']},    ':l': ['124','123'],    ':s': Decimal(35.5)  }  #example to append to list  UpdateExpression=&quot;SET some_attr = list_append(if_not_exists(some_attr, :empty_list), :i)&quot;,  ExpressionAttributeValues={    ':i': [some_value],    &quot;empty_list&quot; : []  }  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;update_item_conditionally&lt;/summary&gt;  ```python  def update_item_conditionally(key_dict, condition_expression, update_expression, expression_attr_values, table_name, dynamodb)  #Retrieves item from DynamoDB table  #Example  key_dict = {    &quot;prim_key&quot; = &quot;value&quot;,    &quot;sort_key&quot; = &quot;value&quot;  }  update_expression = &quot;set service_graph=:i, metric_list=:l, significance_score=:s&quot;  expression_attr_values = {    ':i': {'s1':['s2', 's3']},    ':l': ['124','123'],    ':s': Decimal(35.5)  }  condition_expression = &quot;significance_score &lt;= :val&quot;  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;delete_item_conditionally&lt;/summary&gt;  ```python  def delete_item_conditionally(key_dict, condition_expression, expression_attr_values, table_name, dynamodb)  #Example  condition_expression = &quot;significance_score &lt;= :val&quot;  expression_attr_values = {    &quot;:val&quot;: Decimal(50)  }  key_dict = {    'org_id': 'Aptoide',    'start_time': '2020-09-03 12:00:00'  }  '''  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_by_key&lt;/summary&gt;  ```python  def query_by_key(key_condition, table_name, dynamodb)  #Queries from DynamoDB table by key condition  #Example  key_condition = Key('org_id').eq('Aptoide')  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_and_project_by_key_condition&lt;/summary&gt;  ```python  def query_and_project_by_key_condition(projection_expr, expr_attr_names, key_condition, table_name, dynamodb)    #Queries from DynamoDB table by key condition and only returns some attrs  #Example  key_condition = Key('year').eq(year) &amp; Key('title').between(title_range[0], title_range[1])  projection_expr = &quot;#yr, title, info.genres, info.actors[0]&quot;  expr_attr_names = {&quot;#yr&quot;: &quot;year&quot;}  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;scan_table&lt;/summary&gt;  ```python  def scan_table(scan_kwargs, table_name, dynamodb)  #Scans entire table looking for items that match the filter expression  #Example  scan_kwargs = {    'FilterExpression': Key('year').between(*year_range),    'ProjectionExpression': &quot;#yr, title, info.rating&quot;,    'ExpressionAttributeNames': {&quot;#yr&quot;: &quot;year&quot;}  }  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;query_by_key_min_max&lt;/summary&gt;  ```python  def query_by_key_min_max(key_condition, table_name, is_min, dynamodb)  #Queries from DynamoDB table by key condition  #Example  key_condition = Key('part_id').eq(partId) &amp; Key('range_key').between(start, end)  #or   key_condition = Key('part_id').eq(partId)  ```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;get_all_items_in_table&lt;/summary&gt;  ```python  def get_all_items_in_table(table_name, dynamodb)  ```&lt;/details&gt;</longdescription>
</pkgmetadata>