<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>This is a modified version of python-espeak ([previous version here](https://launchpad.net/python-espeak)). It is a Python binding over the [eSpeak speech synthesizer](http://espeak.sourceforge.net/) C library and does not simply make calls to the `espeak` binary.## ChangesSome highlights of the modifications.- File output instead of only playback (`espeak.init(playing=False)`).- Support for multiple instances of speakers (the `espeak.Espeak` class). They have to take turns and *not* simultaneously speak.- Easily setup multiple callbacks (`espeak.add_callback`).- Wave file content sent through callbacks (for `playing=False` only since this is how the C library works).- Slightly more uniform bindings in some places (`espeak.const`).- Optional start and end position for synthesis.Unfortunately some of the renamings make this version not backwards compatible. (Maybe this library should be named differently. I will try to contact the original author about that. Their email &quot;rainct ubuntu com&quot; seems defunct.) The big one is that `espeak.init()` now has to be called before anything else.## CompatibilityThis library should (still) work with both Python 2 and 3.## InstallationRequires `espeak` and its libraries to be installed `espeak/speak_lib.h` should be in your include path somewhere. Install with    python setup.py installor `python setup.py build` to get the library in the `build` without installation.## ExamplesSimple usage    import espeak    espeak.init()    speaker = espeak.Espeak()    speaker.say(&quot;Hello world&quot;)    speaker.rate = 300    speaker.say(&quot;Faster hello world&quot;)See `espeak.const['parameter']` for all the values other than `rate` that can be changes.Callback usage    def print_callback(*args):        print args    import espeak    espeak.init()    speaker = espeak.Espeak()    speaker.add_callback(print_callback)    speaker.say(&quot;Hello world&quot;)This should print something like    ('', 2, 1, 0, 0, None)    ('', 0, 1, 0, 0, None)    ('', 1, 1, 5, 0, None)    ('', 0, 1, 5, 0, None)    ('', 1, 7, 5, 0, None)    ('', 0, 7, 5, 0, None)    ('', 5, 11, 0, 0, None)    ('', 0, 11, 0, 0, None)## Callback formatThe arguments of callback functions are `wave_file_fragment, event, current_pos, length, num_samples, name`.- `event` can be reverse looked up in (or compare to) `espeak.const['event']`.- `wave_file_fragment` is a piece of a wave file (only in `playback=False` mode, otherwise its always the empty string).- `current_pos` is `event-&gt;text_position` from `speak_lib` the C library- `length` is `event-&gt;length` from `speak_lib`- `num_samples` is `event-&gt;length` from `speak_lib`- `name` is either    - `(event-&gt;id).name` for `play` and `mark` events,    - `event-&gt;id.number` (for `sample_rate` events) or    - `None` otherwise.## LicenceGPL v3. See `COPYING` for full text.</longdescription>
</pkgmetadata>