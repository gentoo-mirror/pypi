<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># rath[![codecov](https://codecov.io/gh/jhnnsrs/rath/branch/master/graph/badge.svg?token=UGXEA2THBV)](https://codecov.io/gh/jhnnsrs/rath)[![PyPI version](https://badge.fury.io/py/rath.svg)](https://pypi.org/project/rath/)[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://pypi.org/project/rath/)![Maintainer](https://img.shields.io/badge/maintainer-jhnnsrs-blue)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/rath.svg)](https://pypi.python.org/pypi/rath/)[![PyPI status](https://img.shields.io/pypi/status/rath.svg)](https://pypi.python.org/pypi/rath/)[![PyPI download month](https://img.shields.io/pypi/dm/rath.svg)](https://pypi.python.org/pypi/rath/)### BETA## InspirationRath is a transportation agnostic graphql client for python focused on composability. It utilizes Links tocompose GraphQL request logic, similar to the apollo client in typescript. It comes with predefined links toenable transports like aiohttp, websockets and httpx, as well as links to retrieve auth tokens, enable retry logicor validating requests on a schema.## Supported Transports- aiohttp- httpx- websockets## Installation```bashpip install rath```## Usage Example```pythonfrom rath.links.auth import AuthTokenLinkfrom rath.links.aiohttp import AIOHttpLinkfrom rath.links import compose, splitfrom rath.gql import gqlasync def aload_token():    return &quot;SERVER_TOKEN&quot;auth = AuthTokenLink(token_loader=aload_token)link = AIOHttpLink(endpoint_url=&quot;https://api.spacex.land/graphql/&quot;)with Rath(links=compose(auth,link)) as rath:    query = &quot;&quot;&quot;query TestQuery {      capsules {        id        missions {          flight        }      }    }    &quot;&quot;&quot;    result = rath.query(query)```This example composes both the AuthToken and AioHttp link: During each query the Bearer headers are set to the retrieved token, on authentication fail (for example if Token Expired) the AuthToken automatically refetches the token and retries the query.## Async UsageRath is build for async usage but uses koil, for async/sync compatibility```pythonfrom rath.links.auth import AuthTokenLinkfrom rath.links.aiohttp import AIOHttpLinkfrom rath.links import compose, splitfrom rath.gql import gqlasync def aload_token():    return &quot;SERVER_TOKEN&quot;auth = AuthTokenLink(token_loader=aload_token)link = AIOHttpLink(endpoint_url=&quot;https://api.spacex.land/graphql/&quot;)async def main():  async with Rath(links=compose(auth,link)) as rath:      query = &quot;&quot;&quot;query TestQuery {        capsules {          id          missions {            flight          }        }      }      &quot;&quot;&quot;      result = await rath.query(query)asyncio.run(main())```## Example Transport SwitchLinks allow the composition of additional logic based on your graphql operation. For example you might wantto use different grapqhl transports for different kind of operations (e.g using websockets for subscriptions,but using standard http requests for potential caching on queries and mutations). This can be easilyaccomplished by providing a split link.```pythonlink = SplitLink(  AioHttpLink(url=&quot;https://api.spacex.land/graphql/&quot;),  WebsocketLink(url=&quot;ws://api.spacex.land/graphql/&quot;,  lambda o: o.node.operation == OperationType.SUBSCRIPTION)rath = Rath(link=link)```## Included Links- Validating Link (validate query against local schema (or introspect the schema))- Reconnecting WebsocketLink- AioHttpLink (supports multipart uploads)- SplitLink (allows to split the terminating link - Subscription into WebsocketLink, Query, Mutation into Aiohttp)- AuthTokenLink (Token insertion with automatic refres## AuthenticationIf you want to use rath with herre for getting access_tokens in oauth2/openid-connect scenarios, there is also a herre linkin this repository### Why RathWell &quot;apollo&quot; is already taken as a name, and rath (according to wikipedia) is an etruscan deity identified with Apollo.## Rath + TurmsRath works especially well with turms generated typed operations:```pythonimport asynciofrom examples.api.schema import aget_capsulesfrom rath.rath import Rathfrom rath.links.aiohttp import AIOHttpLinkfrom rath.links.auth import AuthTokenLinkfrom rath.links.compose import composeasync def token_loader():    return &quot;&quot;link = compose(    AuthTokenLink(token_loader), AIOHttpLink(&quot;https://api.spacex.land/graphql/&quot;))rath = Rath(    link=link,    register=True, # allows global access (singleton-antipattern, but rath has no state))async def main():    async with rath:        capsules = await aget_capsules() # fully typed pydantic powered dataclasses generated through turms        print(capsules)asyncio.run(main())```## ExamplesThis github repository also contains an example client with a turms generated query with the public SpaceX api, as well as a sample of the generated api.</longdescription>
</pkgmetadata>