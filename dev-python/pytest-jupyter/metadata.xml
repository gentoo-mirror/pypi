<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-jupyterA set of pytest plugins for Jupyter libraries and extensions.[![Build Status](https://github.com/jupyter-server/pytest-jupyter/actions/workflows/test.yml/badge.svg?query=branch%3Amain++)](https://github.com/jupyter-server/pytest-jupyter/actions/workflows/test.yml/badge.svg?query=branch%3Amain++)[![codecov](https://codecov.io/gh/jupyter-server/pytest-jupyter/branch/main/graph/badge.svg?token=2MY8C1A777)](https://codecov.io/gh/jupyter-server/pytest-jupyter)## Basic UsageFirst, install `pytest-jupyter` from PyPI using pip:```bashpip install pytest-jupyter```This installs the basic pytest-jupyter package that includes fixture definitions for the various Jupyter-based pytest plugins.To use one of these plugins, you'll also need to install their dependencies. This requires a second `pip install` call. For example, if you'd like to use the `jupyter_server` plugin, you'll need to call:```bashpip install &quot;pytest-jupyter[server]&quot;```This *should* install everything you need for the plugin to work.To use a plugin, add it to the `pytest_plugins` list in the `conftest.py` of your project's root test directory.```python# inside the conftest.pypytest_plugins = [&quot;pytest_jupyter.jupyter_server&quot;]```This library includes an `echo_kernel`, which is useful to speed up testing.You must have either `&quot;pytest-jupyter[server]&quot;` or `&quot;pytest-jupyter[client]&quot;`installed to use the echo kernel.The `pytest_jupyter.jupyter_client` plugin provides an installed`echo_kernel_spec` as a fixture, and a `start_kernel` fixturethat provides a factory function that starts a kernel using the `echo` kernelby default.*Note*: The server plugin also includes the client plugin, so you can use bothsets of fixtures with `&quot;pytest_jupyter.jupyter_server&quot;`.  Both the `client`and `server` plugins also include the core fixtures.*Note*: The client and server plugins use `pytest-tornasync` for asynctest suite running.  It may not compatible with `pytest-asyncio`, meaningthat all fixtures must be synchronous.  You can use the `asyncio_loop` fixtureand run `asyncio_loop.run_until_complete` against an async function in yourfixtures if needed.The server fixures use the echo kernel by default.  To override this behavior,override the `jp_server_config` fixture and add the following config:```json{    &quot;MultiKernelManager&quot;: {        &quot;default_kernel_name&quot;: &quot;&lt;desired_kernel_name&quot;    }}```All fixtures inside the plugin (e.g. jupyter_server) will be available to all of your project's unit tests. You can use a fixtures by passing it as an argument to your unit test function:```pythonasync def test_jupyter_server_api(jp_fetch):    # Send request to a temporary Jupyter Server Web Application    response = await jp_fetch(&quot;api/spec.yml&quot;)    # Confirm that the request is successful.    assert response.code == 200```You can list the fixtures for a given plugin using the `--fixtures` argument from the pytest command line interface:```bashpytest --fixtures -p pytest_jupyter.jupyter_server```or by calling the `pytest --fixtures` where the plugin is listed in the `pytest_plugins` variable of a given test directory.</longdescription>
</pkgmetadata>