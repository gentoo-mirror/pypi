<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![image](https://img.shields.io/pypi/v/pytest-parametrized.svg)](https://pypi.org/project/pytest-parametrized/)![image](https://img.shields.io/pypi/pyversions/pytest-parametrized.svg)[![image](https://pepy.tech/badge/pytest-parametrized)](https://pepy.tech/project/pytest-parametrized)![image](https://img.shields.io/pypi/status/pytest-parametrized.svg)[![image](https://github.com/coady/pytest-parametrized/workflows/build/badge.svg)](https://github.com/coady/pytest-parametrized/actions)[![image](https://codecov.io/gh/coady/pytest-parametrized/branch/main/graph/badge.svg)](https://codecov.io/gh/coady/pytest-parametrized/)[![image](https://github.com/coady/pytest-parametrized/workflows/codeql/badge.svg)](https://github.com/coady/pytest-parametrized/security/code-scanning)[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://pypi.org/project/black/)[Pytest](https://pytest.org/) decorator for parametrizing tests with default iterables, providing alternative syntax for [pytest.mark.parametrize](https://docs.pytest.org/en/latest/how-to/parametrize.html).# UsageDecorate tests with iterable default values. Other fixtures can still be used as normal.## functions```pythonfrom parametrized import parametrized@parametrizeddef test(..., name=values):    &quot;&quot;&quot;test single parametrized arg with each value&quot;&quot;&quot;@parametrized.zipdef test(name=values, name1=values1, ...):    &quot;&quot;&quot;test parametrized args with zipped values&quot;&quot;&quot;@parametrized.productdef test(name=values, name1=values1, ...):    &quot;&quot;&quot;test parametrized args with cartesian product of values&quot;&quot;&quot;```Zip before and after example:```python@pytest.mark.parametrize(&quot;test_input,expected&quot;, [    (&quot;3+5&quot;, 8),    (&quot;2+4&quot;, 6),    (&quot;6*9&quot;, 42),])def test_eval(test_input, expected):    assert eval(test_input) == expected@parametrized.zipdef test_eval(test_input=[&quot;3+5&quot;, &quot;2+4&quot;, &quot;6*9&quot;], expected=[8, 6, 42]):    assert eval(test_input) == expected```Product before and after example:```python@pytest.mark.parametrize(&quot;x&quot;, [0, 1])@pytest.mark.parametrize(&quot;y&quot;, [2, 3])def test_foo(x, y):    pass@parametrized.productdef test_foo(x=[0, 1], y=[2, 3]):    pass```## fixtures[Parametrized fixtures](https://docs.pytest.org/en/latest/how-to/fixtures.html#fixture-parametrize) which simply return their param.```pythonfixture_name = parametrized.fixture(*params, **kwargs)```Before and after example:```python@pytest.fixture(params=[0, 1], ids=[&quot;spam&quot;, &quot;ham&quot;])def a(request):    return request.parama = parametrized.fixture(0, 1, ids=[&quot;spam&quot;, &quot;ham&quot;])```# Installation```console% pip install pytest-parametrized```# Tests100% branch coverage.```console% pytest [--cov]```</longdescription>
</pkgmetadata>