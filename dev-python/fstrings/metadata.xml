<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>f-strings...sorta=================Home-page: https://github.com/danbradham/fstringsAuthor: Dan BradhamAuthor-email: danielbradham@gmail.comLicense: MITDescription: =================        f-strings...sorta        =================        .. image:: https://travis-ci.org/danbradham/fstrings.svg?branch=master            :target: https://travis-ci.org/danbradham/fstrings                Python 3.6 f-strings are pretty awesome. It's too bad you can't use them in 2.7 or 3.5. With **fstrings** you can...sorta. The **fstrings** module provides a function *f* that acts similar to f-strings. Pass a string with str.format tokens and *f* will return a string formatted using the available globals and locals. Like this::                    &gt;&gt;&gt; from fstrings import f            &gt;&gt;&gt; x = 'Hello, World...'            &gt;&gt;&gt; f('{x}')            'Hello, World...'                You can't evaluate arbitrary python code within the format tokens like you can in Python 3.6, but, some of that lost functionality is gained by allowing you to pass *args* and *kwargs* to *f*. For example, you can still use positional arguments with *f*::                    &gt;&gt;&gt; x = 'World...'            &gt;&gt;&gt; f('{} {x}', 'Hello,')            'Hello, World...'                Or you could override globals and locals by passing keyword arguments::                    &gt;&gt;&gt; x = 'Hello'            &gt;&gt;&gt; y = 'World...'            &gt;&gt;&gt; f('{x}, {y}', x='Goodbye')            'Goodbye, World...'                Or do both, it's your life. In addition to *f*, fstrings also provides some other nifty stuff.                        fdocstring Decorator        ====================        ::                    &gt;&gt;&gt; from fstrings import fdocstring            &gt;&gt;&gt; x = 'Hello from ya docs'            &gt;&gt;&gt; @fdocstring()            ... def func():            ...     '''{x}'''            ...            &gt;&gt;&gt; func.__doc__            'Hello from ya docs'                Right now you might be thinking, &quot;Cool, *fdocstring* provides the same funcality as *f*, but, for doc strings.&quot; You would be correct. You can even use *fdocstring* to format class doc strings:                ::                    &gt;&gt;&gt; x = 'BOOM!'            &gt;&gt;&gt; @fdocstring()            ... class Obj(object):            ...     '''{x}'''            ...     def method(self):            ...         '''{x}'''            ...            &gt;&gt;&gt; Obj.__doc__            'BOOM!'            &gt;&gt;&gt; Obj.method.__doc__            'BOOM!'                &quot;Boom boom&quot; is right. Methods are auto formatted too.                        printf?        =======        After implementing *f*, *printf* was too obvious not to implement.                ::                    &gt;&gt;&gt; from fstrings import printf            &gt;&gt;&gt; x = 'PRINTFED'            &gt;&gt;&gt; printf('{x}')            PRINTFED                *printf* and *fdocstring* accept *args* and *kwargs* for overriding globals and locals just like *f*.                Features and Differences        ========================                 - Uses str.format instead of evaluating python code in {}         - Allows overriding globals and locals by passing in \*args and \*\*kwargs         - Supports python 2.7 to python 3.6                Tests        =====        **fstrings** comes with a robust set of tests. *pip install nose* and run them if you like.                ::                    &gt; nosetests -v --with-coverage --with-doctest --doctest-extension rst                Similar Projects        ================        If you're looking for an implementation truer to Python 3.6 f-strings check out `fmt &lt;https://github.com/damnever/fmt&gt;`_.        Platform: UNKNOWNClassifier: Development Status :: 4 - BetaClassifier: Intended Audience :: DevelopersClassifier: License :: OSI Approved :: MIT LicenseClassifier: Operating System :: OS IndependentClassifier: Programming Language :: PythonClassifier: Programming Language :: Python :: 2.7Classifier: Programming Language :: Python :: 3.2Classifier: Programming Language :: Python :: 3.3Classifier: Programming Language :: Python :: 3.4Classifier: Programming Language :: Python :: 3.5Classifier: Programming Language :: Python :: 3.6Classifier: Topic :: Software Development :: Libraries :: Python Modules</longdescription>
</pkgmetadata>