<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># processtext**processtext** is a an open-source python package to clean raw text data.## Installationprocesstext requires [Python 3](https://www.python.org/downloads/), [NLTK](http://www.nltk.org/install.html), and [Autocorrect](https://github.com/filyp/autocorrect) to execute. To install using pip, use`pip install processtext`## Features ### processtext package contains different functions such as:* **degroup_num**: Removes comma(,) in between numbers inside a string* **remove_hyphen**: Removes hyphen(-) in between texts* **int_to_en**: Returns whole numbers in english text. e.g. 25 -&gt; twenty-five* **num_to_en**: Returns english of numbers one by one from left to right* **float_to_en**: Returns floating point numbers into english text* **int_to_text**: Replaces all the whole numbers inside string into English text* **float_to_text**: Replacing all the positive rational numbers inside string into English text* **decontract_strings**: Decontracts strings e.g. I'm -&gt; I am* **remove_emoji**: Removes emoji* **clean_text**: For deep cleaning of texts* **lowercase**: Converts the texts into lowercase* **autocorrect**: Corrects spelling mistakes * **lemmatize**: Lemmatizes the input texts* **remove_sw**: Removes stop words* **clean**: to clean raw text and return the cleaned text* **clean_l**: to clean raw text and return a list of clean words#### The processtext.clean() and processtext.clean_l() function can apply all, or a selected combination of the following cleaning operations:* Remove special symbols/characters* Remove digits from the text* Remove punctuations from the text* Remove extra white spaces* Remove or replace the part of text with custom regex* Convert the entire text into a uniform lowercase* Lemmatize the words * Remove stop words, and choose a language for stop words## Usage* **Import the library**:``` pythonimport processtext as pt```* **Choose a method:** To return the text in a string format,  ``` pythonpt.clean(&quot;your_raw_text_here&quot;) ```  To return a list of words from the text, ``` pythonpt.clean_l(&quot;your_raw_text_here&quot;) ```  To choose a specific set of cleaning operations,``` pythonpt.clean_l(&quot;your_raw_text_here&quot;,clean_all= False # Execute all cleaning operationsextra_spaces=True ,  # Remove extra white spaces stemming=True , # Stem the wordsstopwords=True ,# Remove stop wordslowercase=True ,# Convert to lowercasenumbers=True ,# Remove all digits punct=True ,# Remove all punctuationsreg: str = '&lt;regex&gt;', # Remove parts of text based on regexreg_replace: str = '&lt;replace_value&gt;', # String to replace the regex used in regstp_lang='english'  # Language for stop words)```## Examples``` pythonimport processtext as ptpt.degroup_num('111,222,333')```returns,``` Python'111222333'`````` pythonimport processtext as ptpt.remove_hyphen('2022-2023')```returns,``` Python'2022 2023'`````` pythonimport processtext as ptprint(pt.int_to_en(1998))print(pt.int_to_en('9123456789'))```returns,``` Pythonone thousand nine hundred and ninety-eightnine billion one hundred and twenty-three million four hundred and fifty-six thousand seven hundred and eighty-nine`````` pythonimport processtext as ptprint(pt.num_to_en(12345))print(pt.num_to_en('09876'))```returns,``` Pythonone two three four fivezero nine eight seven six`````` pythonimport processtext as ptprint(pt.float_to_en(12.345))print(pt.float_to_en('456.09876'))```returns,``` Pythontwelve point three four fivefour hundred and fifty-six point zero nine eight seven six`````` pythonimport processtext as ptprint(pt.float_to_en(12.345))print(pt.float_to_en('456.09876'))```returns,``` Pythontwelve point three four fivefour hundred and fifty-six point zero nine eight seven six`````` pythonimport processtext as ptpt.int_to_text('First 100 twin primes have values between 3 &amp; 5 and 3821 &amp; 3823')```returns,``` PythonFirst one hundred twin primes have values between three &amp; five and three thousand eight hundred and twenty-one &amp; three thousand eight hundred and twenty-three`````` pythonimport processtext as ptpt.float_to_text('The first 10 digits of pi are 3.141592653')```returns,``` PythonThe first ten point zero digits of pi are three point one four one five nine two six five three`````` pythonimport processtext as ptpt.decontract_strings(&quot;I can't believe he'll be graduating from college in just a few months.&quot;)```returns,``` PythonI can not believe he will be graduating from college in just a few months.`````` pythonimport processtext as ptpt.remove_emoji(&quot;üåûüåä‚òÄÔ∏è Just spent an amazing day at the beach with my friends! üèñÔ∏èüë≠üë¨ We built sandcastles üè∞, played beach volleyball üèê, and even went for a swim üèä‚ôÄÔ∏èüèä‚ôÇÔ∏è. The sun was shining ‚òÄÔ∏è and the water was so refreshing üí¶. Can't wait to do it again! ü§©üëç&quot;)```returns,``` Python Just spent an amazing day at the beach with my friends!  We built sandcastles , played beach volleyball , and even went for a swim . The sun was shining  and the water was so refreshing . Can't wait to do it again! `````` pythonimport processtext as ptpt.clean_text('The password must contain at least one symbol such as !,^,*,+,=,%,$,~,?,/,&lt;&gt;,|@, #, or %.')```returns,``` PythonThe password must contain at least one symbol such as                               or   `````` pythonimport processtext as ptpt.lowercase('THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.')```returns,``` Pythonthe quick brown fox jumped over the lazy dog.`````` pythonimport processtext as ptpt.lowercase('THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.')```returns,``` Pythonthe quick brown fox jumped over the lazy dog.`````` pythonimport processtext as ptpt.autocorrect(&quot;I haven't receeved the package yet, but I think it should arrive somtime tomoro.&quot;)```returns,``` PythonI haven't received the package yet, but I think it should arrive sometime tomorrow.`````` pythonimport processtext as ptpt.autocorrect(&quot;I haven't receeved the package yet, but I think it should arrive somtime tomoro.&quot;)```returns,``` PythonI haven't received the package yet, but I think it should arrive sometime tomorrow.`````` pythonimport processtext as ptpt.lemmatize('they were playing in the garden.')```returns,``` Pythonthey be play in the garden.`````` pythonimport processtext as ptpt.remove_sw('I went to the store and bought some milk, bread, and eggs.')```returns,``` Pythonwent store bought milk, bread, eggs.``` ``` pythonimport processtext as ptpt.clean(&quot;TH@@#e Q!@#UicK bR0owN f*#!@)(O000000X JUmp100ED 000oV###3eR Th77777#$$e..........                 L@a/\|z+Y d==OG.&quot;, extra_spaces=True, lowercase=True, numbers=True, punct=True)```returns,``` Python'the quick brown fox jumped over the lazy dog'```----``` Pythonimport processtext as ptpt.clean_l('TH@@#e Q!@#UicK bR0owN f*#!@)(O000000X JUmp100ED 000oV###3eR Th77777#$$e..........                 L@a/\|z+Y d==OG.',            extra_spaces=True, lowercase=True, numbers=True, punct=True)```returns,``` Python['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']```----``` Pythonfrom processtext import cleantext = &quot;my email id: ujjwal@rkmvu.ac.in and your's: mili@rnlk.ed&quot;clean(text, reg=r&quot;[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+&quot;, reg_replace='********', clean_all=False)```returns,``` Python'my email id: ******** and your's: ********'```## License##### MIT</longdescription>
</pkgmetadata>