<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Graph Notebook: easily query and visualize graphsThe graph notebook provides an easy way to interact with graph databases using Jupyter notebooks. Using this open-source Python package, you can connect to any graph database that supports the [Apache TinkerPop](https://tinkerpop.apache.org/), [openCypher](https://github.com/opencypher/openCypher) or the [RDF SPARQL](https://www.w3.org/TR/rdf-sparql-query/) graph models. These databases could be running locally on your desktop or in the cloud. Graph databases can be used to explore a variety of use cases including [knowledge graphs](https://aws.amazon.com/neptune/knowledge-graphs-on-aws/) and [identity graphs](https://aws.amazon.com/neptune/identity-graphs-on-aws/).![A colorful graph picture](./images/ColorfulGraph.png)## Visualizing Gremlin queries![Gremlin query and graph](./images/GremlinQueryGraph.png)## Visualizing openCypher queries![openCypher query and graph](./images/OCQueryGraph.png)## Visualizing SPARQL queries![SPARL query and graph](./images/SPARQLQueryGraph.png)Instructions for connecting to the following graph databases:|             Endpoint            |       Graph model       |   Query language    || :-----------------------------: | :---------------------: | :-----------------: ||[Gremlin Server](#gremlin-server)|     property graph      |       Gremlin       ||    [Blazegraph](#blazegraph)    |            RDF          |       SPARQL        ||[Amazon Neptune](#amazon-neptune)|  property graph or RDF  |  Gremlin or SPARQL  ||         [Neo4J](#neo4j)         |     property graph      |       Cypher        |We encourage others to contribute configurations they find useful. There is an [`additional-databases`](https://github.com/aws/graph-notebook/blob/main/additional-databases) folder where more information can be found.## Features### Notebook cell 'magic' extensions in the IPython 3 kernel`%%sparql` - Executes a SPARQL query against your configured database endpoint. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/notebooks-magics.html#notebooks-cell-magics-sparql)`%%gremlin` - Executes a Gremlin query against your database using web sockets. The results are similar to those a Gremlin console would return. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/notebooks-magics.html#notebooks-cell-magics-gremlin)`%%opencypher` or `%%oc` Executes an openCypher query against your database. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/notebooks-magics.html#notebooks-cell-magics-opencypher)`%%graph_notebook_config` - Sets the executing notebook's database configuration to the JSON payload provided in the cell body.`%%graph_notebook_vis_options` - Sets the executing notebook's [vis.js options](https://visjs.github.io/vis-network/docs/network/physics.html) to the JSON payload provided in the cell body.`%%neptune_ml` - Set of commands to integrate with NeptuneML functionality, as described [here](https://docs.aws.amazon.com/neptune/latest/userguide/notebooks-magics.html#notebooks-line-magics-neptune_ml). [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/machine-learning.html)**TIP** :point_right: `%%sparql`, `%%gremlin`, and `%%oc` share a [suite of common arguments](https://docs.aws.amazon.com/neptune/latest/userguide/notebooks-magics.html#notebook-magics-query-args) that be used to customize the appearance of rendered graphs. Example usage of these arguments can also be found in the sample notebooks under [02-Visualization](https://github.com/aws/graph-notebook/tree/main/src/graph_notebook/notebooks/02-Visualization).**TIP** :point_right: There is syntax highlighting for language query magic cells to help you structure your queries more easily.#### Notebook line 'magic' extensions in the IPython 3 kernel`%gremlin_status` - Obtain the status of Gremlin queries. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/gremlin-api-status.html)`%sparql_status` - Obtain the status of SPARQL queries. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/sparql-api-status.html)`%opencypher_status` or `%oc_status` - Obtain the status of openCypher queries. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/access-graph-opencypher-status.html)`%load` - Generate a form to submit a bulk loader job. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load.html)`%load_ids` - Get ids of bulk load jobs. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/load-api-reference-status-examples.html)`%load_status` - Get the status of a provided `load_id`. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/load-api-reference-status-examples.html)`%cancel_load` - Cancels a bulk load job. You can either provide a single `load_id`, or specify `--all-in-queue` to cancel all queued (and not actively running) jobs. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/load-api-reference-cancel.html)`%neptune_ml` - Set of commands to integrate with NeptuneML functionality, as described [here](https://docs.aws.amazon.com/neptune/latest/userguide/notebooks-magics.html#notebooks-cell-magics-neptune_ml). You can find a set of tutorial notebooks [here](https://github.com/aws/graph-notebook/tree/main/src/graph_notebook/notebooks/04-Machine-Learning).[Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/machine-learning.html)`%status` - Check the Health Status of the configured host endpoint. [Documentation](https://docs.aws.amazon.com/neptune/latest/userguide/access-graph-status.html)`%seed` - Provides a form to add data to your graph, using sets of insert queries instead of a bulk loader. Sample RDF and Property Graph data models are provided with this command. Alternatively, you can select a language type and provide a file path(or a directory path containing one or more of these files) to load the queries from.`%stream_viewer` - Interactively explore the Neptune CDC stream (if enabled)`%graph_notebook_config` - Returns a JSON payload that contains connection information for your host.`%graph_notebook_host` - Set the host endpoint to send queries to.`%graph_notebook_version` - Print the version of the `graph-notebook` package`%graph_notebook_vis_options` - Print the Vis.js options being used for rendered graphs**TIP** :point_right: You can list all the magics installed in the Python 3 kernel using the `%lsmagic` command.**TIP** :point_right: Many of the magic commands support a `--help` option in order to provide additional information.## Example notebooksThis project includes many example Jupyter notebooks. It is recommended to explore them. All of the commands and features supported by `graph-notebook` are explained in detail with examples within the sample notebooks. You can find them  [here](./src/graph_notebook/notebooks/). As this project has evolved, many new features have been added. If you are already familiar with graph-notebook but want a quick summary of new features added, a good place to start is the Air-Routes notebooks in the [02-Visualization](./src/graph_notebook/notebooks/02-Visualization) folder.## Keeping track of new featuresIt is recommended to check the [ChangeLog.md](ChangeLog.md) file periodically to keep up to date as new features are added.## PrerequisitesYou will need:* [Python](https://www.python.org/downloads/) 3.7.x-3.10.13* A graph database that provides one or more of:  * A SPARQL 1.1 endpoint  * An Apache TinkerPop Gremlin Server compatible endpoint  * An endpoint compatible with openCypher  ## InstallationBegin by installing `graph-notebook` and its prerequisites, then follow the remaining instructions for either Jupyter Classic Notebook or JupyterLab.``` bash# install the packagepip install graph-notebook```### Jupyter Classic Notebook``` bash# Enable the visualization widgetjupyter nbextension enable  --py --sys-prefix graph_notebook.widgets# copy static html resourcespython -m graph_notebook.static_resources.installpython -m graph_notebook.nbextensions.install# copy premade starter notebookspython -m graph_notebook.notebooks.install --destination ~/notebook/destination/dir# create nbconfig file and directory tree, if they do not already existmkdir ~/.jupyter/nbconfigtouch ~/.jupyter/nbconfig/notebook.json# start jupyter notebookpython -m graph_notebook.start_notebook --notebooks-dir ~/notebook/destination/dir```### JupyterLab 3.x``` bash# install jupyterlabpip install &quot;jupyterlab&gt;=3,&lt;4&quot;# copy premade starter notebookspython -m graph_notebook.notebooks.install --destination ~/notebook/destination/dir# start jupyterlabpython -m graph_notebook.start_jupyterlab --jupyter-dir ~/notebook/destination/dir```#### Loading magic extensions in JupyterLabWhen attempting to run a line/cell magic on a new notebook in JupyterLab, you may encounter the error:``` bashUsageError: Cell magic `%%graph_notebook_config` not found.```To fix this, run the following command, then restart JupyterLab.``` bashpython -m graph_notebook.ipython_profile.configure_ipython_profile```Alternatively, the magic extensions can be manually reloaded for a single notebook by running the following command in any empty cell.``` bash%load_ext graph_notebook.magics```## Upgrading an existing installation``` bash# upgrade graph-notebookpip install graph-notebook --upgrade```After the above command completes, rerun the commands given at [Jupyter Classic Notebook](#jupyter-classic-notebook) or [JupyterLab 3.x](#jupyterlab-3x) based on which flavour is installed.## Connecting to a graph databaseConfiguration options can be set using the `%graph_notebook_config` magic command. The command accepts a JSON object as an argument. The JSON object can contain any of the configuration options listed below. The command can be run multiple times to change the configuration. The configuration is stored in the notebook's metadata and will be used for all subsequent queries.| Configuration Option | Description | Default Value | Type || --- | --- | --- | --- || auth_mode | The authentication mode to use for Amazon Neptune connections | DEFAULT | string || aws_region | The AWS region to use for Amazon Neptune connections | your-region-1 | string || host | The host url to form a connection with | localhost | string || load_from_s3_arn | The ARN of the S3 bucket to load data from [Amazon Neptune only] | | string || port | The port to use when creating a connection | 8182 | number || proxy_host | The proxy host url to route a connection through [Amazon Neptune only]| | string || proxy_port | The proxy port to use when creating proxy connection [Amazon Neptune only] | 8182 | number || ssl | Whether to make connections to the created endpoint with ssl or not [True/False] | False | boolean || ssl_verify | Whether to verify the server's TLS certificate or not [True/False] | True | boolean || sparql | SPARQL connection object | ``` { &quot;path&quot;: &quot;sparql&quot; } ``` | string || gremlin | Gremlin connection object | ``` { &quot;username&quot;: &quot;&quot;, &quot;password&quot;: &quot;&quot;, &quot;traversal_source&quot;: &quot;g&quot;,  &quot;message_serializer&quot;: &quot;graphsonv3&quot; } ```| string || neo4j | Neo4J connection object |``` { &quot;username&quot;: &quot;neo4j&quot;, &quot;password&quot;: &quot;password&quot;, &quot;auth&quot;: true, &quot;database&quot;: null } ``` | string |### Gremlin ServerIn a new cell in the Jupyter notebook, change the configuration using `%%graph_notebook_config` and modify the fields for `host`, `port`, and `ssl`. Optionally, modify `traversal_source` if your graph traversal source name differs from the default value, `username` and `password` if required by the graph store, or `message_serializer` for a specific data transfer format. For a local Gremlin server (HTTP or WebSockets), you can use the following command:``` python%%graph_notebook_config{  &quot;host&quot;: &quot;localhost&quot;,  &quot;port&quot;: 8182,  &quot;ssl&quot;: false,  &quot;gremlin&quot;: {    &quot;traversal_source&quot;: &quot;g&quot;,    &quot;username&quot;: &quot;&quot;,    &quot;password&quot;: &quot;&quot;,    &quot;message_serializer&quot;: &quot;graphsonv3&quot;  }}```To setup a new local Gremlin Server for use with the graph notebook, check out [`additional-databases/gremlin server`](additional-databases/gremlin-server)### BlazegraphChange the configuration using `%%graph_notebook_config` and modify the fields for `host`, `port`, and `ssl`. For a local Blazegraph database, you can use the following command:``` python%%graph_notebook_config{  &quot;host&quot;: &quot;localhost&quot;,  &quot;port&quot;: 9999,  &quot;ssl&quot;: false,  &quot;sparql&quot;: {    &quot;path&quot;: &quot;sparql&quot;  }}```You can also make use of namespaces for Blazegraph by specifying the path `graph-notebook` should use when querying your SPARQL like below:``` python%%graph_notebook_config{  &quot;host&quot;: &quot;localhost&quot;,  &quot;port&quot;: 9999,  &quot;ssl&quot;: false,  &quot;sparql&quot;: {    &quot;path&quot;: &quot;blazegraph/namespace/foo/sparql&quot;  }}```This will result in the url `localhost:9999/blazegraph/namespace/foo/sparql` being used when executing any `%%sparql` magic commands.To setup a new local Blazegraph database for use with the graph notebook, check out the [Quick Start](https://github.com/blazegraph/database/wiki/Quick_Start) from Blazegraph.### Amazon NeptuneChange the configuration using `%%graph_notebook_config` and modify the defaults as they apply to your Neptune cluster:``` python%%graph_notebook_config{  &quot;host&quot;: &quot;your-neptune-endpoint&quot;,  &quot;port&quot;: 8182,  &quot;auth_mode&quot;: &quot;DEFAULT&quot;,  &quot;load_from_s3_arn&quot;: &quot;&quot;,  &quot;ssl&quot;: true,  &quot;ssl_verify&quot;: true,  &quot;aws_region&quot;: &quot;your-neptune-region&quot;}```To setup a new Amazon Neptune cluster, check out the [Amazon Web Services documentation](https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-launch.html).When connecting the graph notebook to Neptune, make sure you have a network setup to communicate to the VPC that Neptune runs on. If not, you can follow [this guide](https://github.com/aws/graph-notebook/tree/main/additional-databases/neptune).in addition to the above configuration options, you can also specify the following options:### Amazon Neptune Proxy Connection``` python%%graph_notebook_config{  &quot;host&quot;: &quot;clustername.cluster-ididididid.us-east-1.neptune.amazonaws.com&quot;,  &quot;port&quot;: 8182,  &quot;ssl&quot;: true,  &quot;proxy_port&quot;: 8182,  &quot;proxy_host&quot;: &quot;host.proxy.com&quot;,  &quot;auth_mode&quot;: &quot;IAM&quot;,  &quot;aws_region&quot;: &quot;us-east-1&quot;,  &quot;load_from_s3_arn&quot;: &quot;&quot;}```Connecting to Amazon Neptune from clients outside the Neptune VPC using AWS Network [Load Balancer](https://aws-samples.github.io/aws-dbs-refarch-graph/src/connecting-using-a-load-balancer/#connecting-to-amazon-neptune-from-clients-outside-the-neptune-vpc-using-aws-network-load-balancer)## Authentication (Amazon Neptune)If you are running a SigV4 authenticated endpoint, ensure that your configuration has `auth_mode` set to `IAM`:``` python%%graph_notebook_config{  &quot;host&quot;: &quot;your-neptune-endpoint&quot;,  &quot;port&quot;: 8182,  &quot;auth_mode&quot;: &quot;IAM&quot;,  &quot;load_from_s3_arn&quot;: &quot;&quot;,  &quot;ssl&quot;: true,  &quot;ssl_verify&quot;: true,  &quot;aws_region&quot;: &quot;your-neptune-region&quot;}```Additionally, you should have the following Amazon Web Services credentials available in a location accessible to Boto3:* Access Key ID* Secret Access Key* Default Region* Session Token (OPTIONAL. Use if you are using temporary credentials)These variables must follow a specific naming convention, as listed in the [Boto3 documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#using-environment-variables)A list of all locations checked for Amazon Web Services credentials can also be found [here](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#configuring-credentials).### Neo4JChange the configuration using `%%graph_notebook_config` and modify the fields for `host`, `port`, `ssl`, and `neo4j` authentication.If your Neo4J instance supports [multiple databases](https://neo4j.com/developer/manage-multiple-databases/), you can specify a database name via the `database` field. Otherwise, leave the `database` field blank to query the default database.For a local Neo4j Desktop database, you can use the following command:``` python%%graph_notebook_config{  &quot;host&quot;: &quot;localhost&quot;,  &quot;port&quot;: 7687,  &quot;ssl&quot;: false,  &quot;neo4j&quot;: {    &quot;username&quot;: &quot;neo4j&quot;,    &quot;password&quot;: &quot;password&quot;,    &quot;auth&quot;: true,    &quot;database&quot;: &quot;&quot;  }}```Ensure that you also specify the `%%oc bolt` option when submitting queries to the Bolt endpoint.To setup a new local Neo4J Desktop database for use with the graph notebook, check out the [Neo4J Desktop User Interface Guide](https://neo4j.com/developer/neo4j-desktop/).## Building From SourceA pre-release distribution can be built from the graph-notebook repository via the following steps:``` bash# 1) Clone the repository and navigate into the clone directorygit clone https://github.com/aws/graph-notebook.gitcd graph-notebook# 2) Create a new virtual environment# 2a) Option 1 - pyenvpyenv install 3.10.13  # Only if not already installed; this can be any supported Python 3 version in Prerequisitespyenv virtualenv 3.10.13 build-graph-notebookpyenv local build-graph-notebook# 2b) Option 2 - venvrm -rf /tmp/venvpython3 -m venv /tmp/venvsource /tmp/venv/bin/activate# 3) Install build dependenciespip install --upgrade pip setuptools wheel twinepip install &quot;jupyterlab&gt;=3,&lt;4&quot;# 4) Build the distributionpython3 setup.py bdist_wheel```You should now be able to find the built distribution at`./dist/graph_notebook-3.9.0-py3-none-any.whl`And use it by following the [installation](https://github.com/aws/graph-notebook#installation) steps, replacing``` pythonpip install graph-notebook```with``` pythonpip install ./dist/graph_notebook-3.9.0-py3-none-any.whl```## Contributing GuidelinesSee [CONTRIBUTING](https://github.com/aws/graph-notebook/blob/main/CONTRIBUTING.md) for more information.## LicenseThis project is licensed under the Apache-2.0 License.</longdescription>
</pkgmetadata>