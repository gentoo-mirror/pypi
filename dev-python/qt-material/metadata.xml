<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Qt-MaterialThis is another stylesheet for **PySide6**, **PySide2**, **PyQt5** and **PyQt6**, which looks like Material Design (close enough).![GitHub top language](https://img.shields.io/github/languages/top/un-gcpds/qt-material)![PyPI - License](https://img.shields.io/pypi/l/qt-material)![PyPI](https://img.shields.io/pypi/v/qt-material)![PyPI - Status](https://img.shields.io/pypi/status/qt-material)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/qt-material)![GitHub last commit](https://img.shields.io/github/last-commit/un-gcpds/qt-material)![CodeFactor Grade](https://img.shields.io/codefactor/grade/github/UN-GCPDS/qt-material)[![Documentation Status](https://readthedocs.org/projects/qt-material/badge/?version=latest)](https://qt-material.readthedocs.io/en/latest/?badge=latest)There is some custom dark themes:![dark](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/dark.gif)And light:![light](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/light.gif)## Navigation  * [Install](#install)  * [Usage](#usage)  * [Themes](#themes)  * [Custom colors](#custom-colors)  * [Usage](#usage)  * [Light themes](#light-themes)  * [Environ variables](#environ-variables)  * [Alternative QPushButtons and custom fonts](#alternative-qpushbuttons-and-custom-fonts)  * [Custom stylesheets](#custom-stylesheets)  * [Run examples](#run-examples)  * [New themes](#new-themes)  * [Change theme in runtime](#change-theme-in-runtime)  * [Export theme](#export-theme)  * [Density scale](#density-scale)  * [Troubleshoots](#troubleshoots)## Install```pythonpip install qt-material```## Usage```pythonimport sysfrom PySide6 import QtWidgets# from PySide2 import QtWidgets# from PyQt5 import QtWidgetsfrom qt_material import apply_stylesheet# create the application and the main windowapp = QtWidgets.QApplication(sys.argv)window = QtWidgets.QMainWindow()# setup stylesheetapply_stylesheet(app, theme='dark_teal.xml')# runwindow.show()app.exec_()```## Themes```pythonfrom qt_material import list_themeslist_themes()```    WARNING:root:qt_material must be imported after PySide or PyQt!    ['dark_amber.xml',     'dark_blue.xml',     'dark_cyan.xml',     'dark_lightgreen.xml',     'dark_pink.xml',     'dark_purple.xml',     'dark_red.xml',     'dark_teal.xml',     'dark_yellow.xml',     'light_amber.xml',     'light_blue.xml',     'light_cyan.xml',     'light_cyan_500.xml',     'light_lightgreen.xml',     'light_pink.xml',     'light_purple.xml',     'light_red.xml',     'light_teal.xml',     'light_yellow.xml']## Custom colors[Color Tool](https://material.io/resources/color/) is the best way to generate new themes, just choose colors and export as `Android XML`, the theme file must look like:```python&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?--&gt;&lt;resources&gt;&lt;color name=&quot;primaryColor&quot;&gt;#00e5ff&lt;/color&gt;&lt;color name=&quot;primaryLightColor&quot;&gt;#6effff&lt;/color&gt;&lt;color name=&quot;secondaryColor&quot;&gt;#f5f5f5&lt;/color&gt;&lt;color name=&quot;secondaryLightColor&quot;&gt;#ffffff&lt;/color&gt;&lt;color name=&quot;secondaryDarkColor&quot;&gt;#e6e6e6&lt;/color&gt;&lt;color name=&quot;primaryTextColor&quot;&gt;#000000&lt;/color&gt;&lt;color name=&quot;secondaryTextColor&quot;&gt;#000000&lt;/color&gt;&lt;/resources&gt;```Save it as `my_theme.xml` or similar and apply the style sheet from Python.```pythonapply_stylesheet(app, theme='dark_teal.xml')```## Light themesLight themes will need to add `invert_secondary` argument as `True`.```pythonapply_stylesheet(app, theme='light_red.xml', invert_secondary=True)```## Environ variablesThere is a environ variables related to the current theme used, these variables are for **consult purpose only**.| Environ variable               | Description                              | Example        ||--------------------------------|------------------------------------------|----------------|| QTMATERIAL_PRIMARYCOLOR        | Primary color                            | #2979ff        || QTMATERIAL_PRIMARYLIGHTCOLOR   | A bright version of the primary color    | #75a7ff        || QTMATERIAL_SECONDARYCOLOR      | Secondary color                          | #f5f5f5        || QTMATERIAL_SECONDARYLIGHTCOLOR | A bright version of the secondary color  | #ffffff        || QTMATERIAL_SECONDARYDARKCOLOR  | A dark version of the primary color      | #e6e6e6        || QTMATERIAL_PRIMARYTEXTCOLOR    | Color for text over primary background   | #000000        || QTMATERIAL_SECONDARYTEXTCOLOR  | Color for text over secondary background | #000000        || QTMATERIAL_THEME               | Name of theme used                       | light_blue.xml |## Alternative QPushButtons and custom fontsThere is an `extra` argument for accent colors and custom fonts. ```pythonextra = {    # Button colors    'danger': '#dc3545',    'warning': '#ffc107',    'success': '#17a2b8',    # Font    'font_family': 'Roboto',}apply_stylesheet(app, 'light_cyan.xml', invert_secondary=True, extra=extra)```The accent colors are applied to `QPushButton` with the corresponding `class`  property:```pythonpushButton_danger.setProperty('class', 'danger')pushButton_warning.setProperty('class', 'warning')pushButton_success.setProperty('class', 'success')```![extra](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/extra.png)## Custom stylesheetsCustom changes can be performed by overwriting the stylesheets, for example:```pythonQPushButton {{  color: {QTMATERIAL_SECONDARYCOLOR};  text-transform: none;  background-color: {QTMATERIAL_PRIMARYCOLOR};}}.big_button {{  height: 64px;}}```Then, the current stylesheet can be extended just with:```pythonapply_stylesheet(app, theme='light_blue.xml', css_file='custom.css')```The stylesheet can also be changed on runtime by:```pythonstylesheet = app.styleSheet()with open('custom.css') as file:    app.setStyleSheet(stylesheet + file.read().format(**os.environ))```And the class style can be applied with the `setProperty` method:```pythonself.main.pushButton.setProperty('class', 'big_button')```![extra](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/custom.png)## Run examplesA window with almost all widgets (see the previous screenshots) are available to test all themes and **create new ones**.```pythongit clone https://github.com/UN-GCPDS/qt-material.gitcd qt-materialpython setup.py installcd examples/full_featurespython main.py --pyside6```![theme](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/theme.gif)## New themesDo you have a custom theme? it looks good? create a [pull request](https://github.com/UN-GCPDS/qt-material/pulls) in [themes folder](https://github.com/UN-GCPDS/qt-material/tree/master/qt_material/themes&gt;)  and share it with all users.## Change theme in runtimeThere is a `qt_material.QtStyleTools` class that must be inherited along to `QMainWindow` for change themes in runtime using the `apply_stylesheet()` method.```pythonclass RuntimeStylesheets(QMainWindow, QtStyleTools):        def __init__(self):        super().__init__()        self.main = QUiLoader().load('main_window.ui', self)                self.apply_stylesheet(self.main, 'dark_teal.xml')        # self.apply_stylesheet(self.main, 'light_red.xml')        # self.apply_stylesheet(self.main, 'light_blue.xml')```![run](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/runtime.gif)### Integrate stylesheets in a menuA custom _stylesheets menu_ can be added to a project for switching across all default available themes.```pythonclass RuntimeStylesheets(QMainWindow, QtStyleTools):        def __init__(self):        super().__init__()        self.main = QUiLoader().load('main_window.ui', self)                self.add_menu_theme(self.main, self.main.menuStyles)```![menu](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/runtime_menu.gif)## Create new themesA simple interface is available to modify a theme in runtime, this feature can be used to create a new theme, the theme file is created in the main directory as `my_theme.xml````pythonclass RuntimeStylesheets(QMainWindow, QtStyleTools):        def __init__(self):        super().__init__()        self.main = QUiLoader().load('main_window.ui', self)                self.show_dock_theme(self.main)```![dock](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/runtime_dock.gif)A full set of examples are available in the [exmaples directory](https://github.com/UN-GCPDS/qt-material/blob/master/examples/runtime/)## Export themeThis feature able to use ```qt-material``` themes into ```Qt``` implementations using only local files.```pythonfrom qt_material import export_themeextra = {    # Button colors    'danger': '#dc3545',    'warning': '#ffc107',    'success': '#17a2b8',    # Font    'font_family': 'monoespace',    'font_size': '13px',    'line_height': '13px',    # Density Scale    'density_scale': '0',    # environ    'pyside6': True,    'linux': True,}export_theme(theme='dark_teal.xml',              qss='dark_teal.qss',              rcc='resources.rcc',             output='theme',              prefix='icon:/',              invert_secondary=False,              extra=extra,            )```This script will generate both ```dark_teal.qss``` and ```resources.rcc``` and a folder with all theme icons called ```theme```.The files generated can be integrated into a ```PySide6``` application just with:```pythonimport sysfrom PySide6 import QtWidgetsfrom PySide6.QtCore import QDirfrom __feature__ import snake_case, true_property# Create applicationapp = QtWidgets.QApplication(sys.argv)# Load styleswith open('dark_teal.qss', 'r') as file:    app.style_sheet = file.read()# Load iconsQDir.add_search_path('icon', 'theme')# Appwindow = QtWidgets.QMainWindow()checkbox = QtWidgets.QCheckBox(window)checkbox.text = 'CheckBox'window.show()app.exec()```This files can also be used into non ```Python``` environs like ```C++```.## Density scaleThe ``extra`` arguments also include an option to set the **density scale**, by default is ```0```.```pythonextra = {        # Density Scale    'density_scale': '-2',}apply_stylesheet(app, 'default', invert_secondary=False, extra=extra)```![dock](https://github.com/UN-GCPDS/qt-material/raw/master/docs/source/notebooks/_images/density/density.gif)## Troubleshoots### QMenu`QMenu` has multiple rendering for each Qt backend, and for each operating system. Even can be related with the style, like [fusion](https://doc.qt.io/qt-5/qtquickcontrols2-fusion.html). Then, the `extra` argument also supports`QMenu` parameters to configure this widgest for specific combinations. This options are not affected by **density scale**.```pythonextra['QMenu'] = {    'height': 50,    'padding': '50px 50px 50px 50px',  # top, right, bottom, left}```</longdescription>
</pkgmetadata>