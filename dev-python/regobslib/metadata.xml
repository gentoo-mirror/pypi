<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># regobslib â€” A Regobs client libraryThis client library aim to simplify interaction with the Regobs API v5.## Prerequisites* A client ID for the test or prod environment, contact [regobs@nve.no](mailto:regobs@nve.no) to acquire this.* A user account for the test or prod environment. Register here:  * Test environment: [https://test-konto.nve.no/](https://test-konto.nve.no/)  * Prod environment: [https://konto.nve.no/](https://konto.nve.no/)* Basic knowledge about snow science nomenclature. For more info, see the following resources:  * [NVE Field Book](https://www.varsom.no/media/2265/nve-forsvaret_feltha-ndbok_innmat_v1.pdf)  * [Observation Guidelines and Recording Standards for Weather, Snowpack and Avalanches](https://www.avalancheassociation.ca/resource/resmgr/standards_docs/ogrs2016web.pdf)  * [Snow, Weather and Avalanches](https://static1.squarespace.com/static/59d2a0f0e9bfdf20d6d654b7/t/5a1af2a5652dea2e1a5ea055/1511715529879/AAA_SWAG_Web+2.pdf)## InstallationTo install using `pip`:```pip install regobslib```## Example programs### Searching for dataHere is an example program searching for weather observations in Ofoten.```pythonfrom regobslib import *connection = Connection(prod=True)results = connection.search(SnowRegistration, regions=[SnowRegion.OFOTEN], observation_types=[Weather])print(f&quot;Length of results: {len(results)}\n&quot;)print(&quot;First result&quot;)print(results[0])print(&quot;\nIterates over results&quot;)for result in results:    print(f&quot;Id: {result.id}, Observer: {result.observer.nickname}, Date: {result.obs_time}&quot;)```### Submitting dataBelow is a simple program demonstrating how to register a whumpf soundat a given location and time.```pythonfrom regobslib import *import datetime as dt# Contact regobs@nve.no to get a client ID.CLIENT_ID = &quot;00000000-0000-0000-0000-000000000000&quot;# Create a user at https://test-konto.nve.no/ or https://konto.nve.no/USERNAME = &quot;ola.nordmann@example.com&quot;PASSWORD = &quot;P4ssw0rd&quot;# First we create an empty SnowRegistration objectreg = SnowRegistration(REGOBS_TZ.localize(dt.datetime(2021, 8, 17, 9, 48)),                       Position(lat=68.4293, lon=18.2572))# Then we add a DangerSign observation to itreg.add_danger_sign(DangerSign(DangerSign.Sign.WHUMPF_SOUND))# Authenticate to Regobs to be able to submit observationsconnection = Connection(prod=False).authenticate(USERNAME, PASSWORD, CLIENT_ID)# Send our SnowRegistration to Regobsstored_reg = connection.submit(reg)print(stored_reg)```For a more extensive demonstration, refer to [demo.py](https://github.com/NVE/regobslib/blob/master/demo.py).## DocumentationWe have yet to write documentation, but the function declarationsare written with type hints and most parameters are enums, so the code in[submit.py](https://github.com/NVE/regobslib/blob/master/src/regobslib/submit.py) may help you on your way. A properly setup IDE will also use the type hints and enums to inform you about youralternatives.You can also use GitHubs built-in code navigation to quickly find thedefinition of a class or method in the [example code](https://github.com/NVE/regobslib/blob/master/demo.py).</longdescription>
</pkgmetadata>