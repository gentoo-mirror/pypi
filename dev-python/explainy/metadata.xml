<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- &lt;img src=&quot;https://github.com/MauroLuzzatto/explainy/raw/main/docs/_static/logo.png&quot; width=&quot;180&quot; height=&quot;180&quot; align=&quot;right&quot;/&gt; --&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/MauroLuzzatto/explainy/raw/main/docs/_static/logo.png&quot; width=&quot;200&quot; height=&quot;200&quot;/&gt;&lt;/p&gt;&lt;!-- # explainy - machine learning model explanations for humans --&gt;&lt;!-- # explainy - black-box model explanations for humans --&gt;&lt;h1 align=&quot;center&quot;&gt;explainy - black-box model explanations for humans&lt;/h1&gt;[![pypi version](https://img.shields.io/pypi/v/explainy.svg)](https://pypi.python.org/pypi/explainy)[![codecov](https://codecov.io/gh/MauroLuzzatto/explainy/branch/main/graph/badge.svg?token=N6EKHMEAQR)](https://codecov.io/gh/MauroLuzzatto/explainy)[![docs](https://readthedocs.org/projects/explainy/badge/?version=latest)](https://explainy.readthedocs.io/en/latest/?version=latest)[![Supported versions](https://img.shields.io/pypi/pyversions/explainy.svg)](https://pypi.org/project/explainy)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![Downloads](https://pepy.tech/badge/explainy)](https://pepy.tech/project/explainy)&lt;!-- [![travis](https://app.travis-ci.com/MauroLuzzatto/explainy.svg?branch=main)](https://app.travis-ci.com/github/MauroLuzzatto/explainy?branch=master) --&gt;**explainy** is a library for generating machine learning models explanations in Python. It uses methods from **Machine Learning Explainability** and provides a standardized API to create feature importance explanations for samples. The API is inspired by `scikit-learn` and has three core methods `explain()`, `plot()` and, `importance()`. The explanations are generated in the form of texts and plots.**explainy** comes with four different algorithms to create either *global* or *local* and *contrastive* or *non-contrastive* model explanations.| Method|Type | Explanations | Classification | Regression | | --- | --- | :---: | :---: | :---: | |[Permutation Feature Importance](https://explainy.readthedocs.io/en/latest/explainy.explanations.html#module-explainy.explanation.permutation_explanation)| non-contrastive | global |  :star: | :star:||[Shap Values](https://explainy.readthedocs.io/en/latest/explainy.explanations.html?highlight=shap#module-explainy.explanations.shap_explanation)| non-contrastive | local |   :star: | :star:||[Surrogate Model](https://explainy.readthedocs.io/en/latest/explainy.explanations.html#module-explainy.explanation.surrogate_model_explanation)|contrastive | global | :star: | :star: | |[Counterfactual Example](https://explainy.readthedocs.io/en/latest/explainy.explanations.html#module-explainy.explanation.counterfactual_explanation)| contrastive | local |:star:| :star:|Description:- **global**: explanation of system functionality (all samples have the same explanation)- **local**: explanation of decision rationale (each sample has its own explanation)- **contrastive**: tracing of decision path (differences to other outcomes are described)- **non-contrastive**: parameter weighting (the feature importance is reported)## Documentationhttps://explainy.readthedocs.io## Install explainy```pip install explainy```## UsageðŸ“š A comprehensive example of the `explainy` API can be found in this ![Jupyter Notebook](https://github.com/MauroLuzzatto/explainy/blob/main/examples/01-explainy-intro.ipynb) ðŸ“– Or in the [example section](https://explainy.readthedocs.io/en/latest/examples/01-explainy-intro.html) of the documentationInitialize and train a `scikit-learn` model:```pythonimport pandas as pdfrom sklearn.datasets import load_diabetesfrom sklearn.ensemble import RandomForestRegressorfrom sklearn.model_selection import train_test_splitdiabetes = load_diabetes()X_train, X_test, y_train, y_test = train_test_split(    diabetes.data, diabetes.target, random_state=0)X_test = pd.DataFrame(X_test, columns=diabetes.feature_names)y_test = pd.DataFrame(y_test)model = RandomForestRegressor(random_state=0)model.fit(X_train, y_train)```Initialize the `PermutationExplanation` (or any other explanation) object and pass in the trained model and the to be explained dataset. Addtionally, define the number of features used in the explanation. This allows you to configure the verbosity of your exaplanation. Set the index of the sample that should be explained.```pythonfrom explainy.explanations import PermutationExplanationnumber_of_features = 4explainer = PermutationExplanation(    X_test, y_test, model, number_of_features)```Call the `explain()` method and print the explanation for the sample (in case of a local explanation every sample has a different explanation).```pythonexplanation = explainer.explain(sample_index=1)print(explanation)```&gt; The RandomForestRegressor used 10 features to produce the predictions. The prediction of this sample was 251.8.&gt; The feature importance was calculated using the Permutation Feature Importance method.&gt; The four features which were most important for the predictions were (from highest to lowest): 'bmi' (0.15), 's5' (0.12), 'bp' (0.03), and 'age' (0.02).Use the `plot()` method to create a feature importance plot of that sample.```pythonexplainer.plot()```![Permutation Feature Importance](https://github.com/MauroLuzzatto/explainy/raw/main/static/permutation_importance.png)If your prefer, you can also create another type of plot, as for example a boxplot.```pythonexplainer.plot(kind='box')```![Permutation Feature Importance BoxPlot](https://github.com/MauroLuzzatto/explainy/raw/main/static/permutation_importance_box.png)Finally, you can also look at the importance values of the features (in form of a `pd.DataFrame`).```pythonfeature_importance = explainer.importance()print(feature_importance)``````python  Feature  Importance0     bmi        0.151      s5        0.122      bp        0.033     age        0.024      s2       -0.005     sex       -0.006      s3       -0.007      s1       -0.018      s6       -0.019      s4       -0.01```&lt;!-- Finally the result can be saved```pythonexplainer.save(sample_index)``` --&gt;&lt;!-- ## Model Explanations--&gt;## Features- Algorithms for inspecting black-box machine learning models - Support for the machine learning frameworks `scikit-learn` and `xgboost`- **explainy** offers a standardized API with three core methods `explain()`, `plot()`, `importance()`## Other Machine Learning Explainability libraries to watch- [shap](https://github.com/slundberg/shap): A game theoretic approach to explain the output of any machine learning model- [eli5](https://github.com/TeamHG-Memex/eli5): A library for debugging/inspecting machine learning classifiers and explaining their predictions - [alibi](https://github.com/SeldonIO/alibi): Algorithms for explaining machine learning models - [interpret](https://github.com/interpretml/interpret): Fit interpretable models. Explain blackbox machine learning## SourceMolnar, Christoph. &quot;Interpretable machine learning. A Guide for Making Black Box Models Explainable&quot;, 2019. https://christophm.github.io/interpretable-ml-book/## Author**Mauro Luzzatto** - [Maurol](https://github.com/MauroLuzzatto)</longdescription>
</pkgmetadata>