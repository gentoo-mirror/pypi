<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Python application](https://github.com/AndreiPuchko/q2db/actions/workflows/main.yml/badge.svg)](https://github.com/AndreiPuchko/q2db/actions/workflows/main.yml)# The light Python DB API wrapper with some ORM functions (MySQL, PostgreSQL, SQLite)## Quick start (run demo files)## - in docker:```bashgit clone https://github.com/AndreiPuchko/q2db &amp;&amp; cd q2db/database.docker./up.sh./down.sh```  ## - on your system:```bashpip install q2dbgit clone https://github.com/AndreiPuchko/q2db &amp;&amp; cd q2db# sqlite:python3 ./demo/demo.py# mysql and postgresql:pip install mysql-connector-python psycopg2-binarypushd database.docker &amp;&amp; docker-compose up -d &amp;&amp; popdpython3 ./demo/demo_mysql.pypython3 ./demo/demo_postgresql.pypushd database.docker &amp;&amp; docker-compose down -v &amp;&amp; popd```# Features: ---## Connect```pythonfrom q2db.db import Q2Dbdatabase_sqlite = Q2Db(&quot;sqlite3&quot;, database_name=&quot;:memory:&quot;)# or justdatabase_sqlite = Q2Db()database_mysql = Q2Db(    &quot;mysql&quot;,    user=&quot;root&quot;,    password=&quot;q2test&quot;    host=&quot;0.0.0.0&quot;,    port=&quot;3308&quot;,    database_name=&quot;q2test&quot;,)# or justdatabase_mysql = Q2Db(url=&quot;mysql://root:q2test@0.0.0.0:3308/q2test&quot;)database_postgresql = Q2Db(    &quot;postgresql&quot;,    user=&quot;q2user&quot;,    password=&quot;q2test&quot;    host=&quot;0.0.0.0&quot;,    port=5432,    database_name=&quot;q2test1&quot;,)```---## Define &amp; migrate database schema (ADD COLUMN only).```pythonq2db.schema import Q2DbSchemaschema = Q2DbSchema()schema.add(table=&quot;topic_table&quot;, column=&quot;uid&quot;, datatype=&quot;int&quot;, datalen=9, pk=True)schema.add(table=&quot;topic_table&quot;, column=&quot;name&quot;, datatype=&quot;varchar&quot;, datalen=100)schema.add(table=&quot;message_table&quot;, column=&quot;uid&quot;, datatype=&quot;int&quot;, datalen=9, pk=True)schema.add(table=&quot;message_table&quot;, column=&quot;message&quot;, datatype=&quot;varchar&quot;, datalen=100)schema.add(    table=&quot;message_table&quot;,    column=&quot;parent_uid&quot;,    to_table=&quot;topic_table&quot;,    to_column=&quot;uid&quot;,    related=&quot;name&quot;)database.set_schema(schema)```---## INSERT, UPDATE, DELETE```pythondatabase.insert(&quot;topic_table&quot;, {&quot;name&quot;: &quot;topic 0&quot;})database.insert(&quot;topic_table&quot;, {&quot;name&quot;: &quot;topic 1&quot;})database.insert(&quot;topic_table&quot;, {&quot;name&quot;: &quot;topic 2&quot;})database.insert(&quot;topic_table&quot;, {&quot;name&quot;: &quot;topic 3&quot;})database.insert(&quot;message_table&quot;, {&quot;message&quot;: &quot;Message 0 in 0&quot;, &quot;parent_uid&quot;: 0})database.insert(&quot;message_table&quot;, {&quot;message&quot;: &quot;Message 1 in 0&quot;, &quot;parent_uid&quot;: 0})database.insert(&quot;message_table&quot;, {&quot;message&quot;: &quot;Message 0 in 1&quot;, &quot;parent_uid&quot;: 1})database.insert(&quot;message_table&quot;, {&quot;message&quot;: &quot;Message 1 in 1&quot;, &quot;parent_uid&quot;: 1})# this returns False because there is no value 2 in topic_table.id - schema works!database.insert(&quot;message_table&quot;, {&quot;message&quot;: &quot;Message 1 in 1&quot;, &quot;parent_uid&quot;: 2})database.delete(&quot;message_table&quot;, {&quot;uid&quot;: 2})database.update(&quot;message_table&quot;, {&quot;uid&quot;: 0, &quot;message&quot;: &quot;updated message&quot;})```---## Cursor```pythoncursor = database.cursor(table_name=&quot;topic_table&quot;)cursor = database.cursor(    table_name=&quot;topic_table&quot;,    where=&quot; name like '%2%'&quot;,    order=&quot;name desc&quot;)cursor.insert({&quot;name&quot;: &quot;insert record via cursor&quot;})cursor.delete({&quot;uid&quot;: 2})cursor.update({&quot;uid&quot;: 0, &quot;message&quot;: &quot;updated message&quot;})cursor = database.cursor(sql=&quot;select name from topic_table&quot;)for x in cursor.records():    print(x)    print(cursor.r.name)cursor.record(0)['name']cursor.row_count()cursor.first()cursor.last()cursor.next()cursor.prev()cursor.bof()cursor.eof()```</longdescription>
</pkgmetadata>