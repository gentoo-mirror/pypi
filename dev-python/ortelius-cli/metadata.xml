<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a name=&quot;dh&quot;&gt;&lt;/a&gt;# The Ortelius Command Line InterfaceThe Ortelius Command Line Interface supports integration with DevOps tools and CI/CD pipelines.The CLI Python script interacts with the Ortelius REST APIs to perform:- Approve the _Application Version_- Move the _Application Version- using the supplied task- Create/replace the _Component Version_ for the _Application Version_- Assign a _Component Version_ to an _Application version_- Assign the key/values pairs to the _Component version_- Create a bash file from the _Component_ .toml file- Export a _Domain_ including all objects to stdout- Imports the export file into the new _Domain_- Deploy the _Application Version_- Upload Swagger and SBOM files to _Component Version_## CLI Prerequisites1. [Install Python 3.8 or newer](https://www.python.org/downloads/)2. Install Ortelius CLI   `pip install --upgrade ortelius-cli`## Get Started with a POCRefer to the [Ortelius sample POC](https://docs.ortelius.io/Ortelius-General-Poc.pdf) to get started. This POC provides you the steps to incorporate Ortelius into your Pipeline, with SBOM generation.## Ortelius' CLI using the dhapi module.**Arguments**:  ACTION - one of the following- `deploy` - deploy the _Application_ to the _Environment_  Usage:  --dhurl  --dhuser  --dhpass  --appname  --appversion (optional)  --deployenv- `approve` - approve the _Application Version_  Usage:  --dhurl  --dhuser  --dhpass  --appname  --appversion (optional)- `move` - move the _Application Version_ using the supplied task  Usage:  --dhurl  --dhuser  --dhpass  --appname  --appversion (optional)  --from_domain  --task- `updatecomp` - create/replace the _Component Version_ for the _Application Version_ with SBOM (CycloneDX or SPDX formats).  Usage:  --dhurl  --dhuser  --dhpass  --rsp &lt;name of the component toml file&gt;  --autoappinc (optional)  --compautoinc (optional)  --consumes (optional)  --provides (optional)  --deppkg cyclonedx@&lt;cyclonedx json sbom file&gt; (optional)  --deppkg spdx@&lt;spdx json sbom file&gt; (optional)  ##### Component TOML Definition for --rsp parameter  ```toml  # Application Name and Version to create an associate the Component Version to  # NOTE: Only needed if you need to assoicate the Component Version to the Application Version  Application = &quot;&quot;          # Name of the Applcation including the full Domain Name  Application_Version = &quot;&quot;  # The semantic version for the Application Version  # Component Name, Variant and Version  Name = &quot;&quot;  Variant = &quot;${GIT_BRANCH}&quot;  Version = &quot;v1.0.0.${BUILD_NUM}-g${GIT_COMMIT}&quot;                  # 1.0.0 should be replace with your starting version string  # Export the derived IMAGE_TAG, DOCKERREPO values to the CI/CD Tool via a shell script when using the `envscript` command line action  [Export]  IMAGE_TAG = &quot;${Variant}-${Version}&quot;  DOCKERREPO = &quot;${DockerRepo}&quot;  # Key/Values to associate to the Component Version.  Custom key/values can be added under this section.  [Attributes]  BuildId = &quot;${BUILDID}&quot;                                      # Identifier for the CI job (DERIVED IF NOT SPECIFIED)  BuildNumber = &quot;${BUILD_NUM}&quot;                                # Build number for the CI job (DERIVED IF NOT SPECIFIED)  BuildUrl = &quot;${BUILD_URL}&quot;                                   # Build url for the CI job (DERIVED IF NOT SPECIFIED)  Chart = &quot;&quot;                                                  # Helm Chart for the Component  ChartNamespace = &quot;&quot;                                         # Name space for the Component to be deployed to  ChartRepo = &quot;&quot;                                              # Helm Chart Repo Name  ChartRepoUrl = &quot;&quot;                                           # Helm Chart Repo Url  ChartVersion = &quot;&quot;                                           # Helm Chart version  CustomAction = &quot;&quot;                                           # Custom Action to assign to the Component  DeployAlways = &quot;&quot;                                           # Set the Always Deploy option Y/N, default is N  DockerBuildDate = &quot;&quot;                                        # Timestamp when the image was created (DERIVED IF NOT SPECIFIED)  DockerRepo = &quot;${DOCKERREPO}&quot;                                # Registry which the image was pushed to  DockerSha = &quot;${DIGEST}&quot;                                     # Digest for the image (DERIVED IF NOT SPECIFIED)  DockerTag = &quot;${DOCKERTAG}&quot;                                  # Tag for the image  GitBranch = &quot;${GIT_BRANCH}&quot;                                 # Git branch in the git repo (DERIVED IF NOT SPECIFIED)  GitBranchCreateCommit = &quot;${GIT_BRANCH_CREATE_COMMIT}&quot;       # Git commit that the branch was created from (DERIVED IF NOT SPECIFIED)  GitBranchCreateTimestamp = &quot;${GIT_BRANCH_CREATE_TIMESTAMP}&quot; # Timestamp of when the branch was created (DERIVED IF NOT SPECIFIED)  GitBranchParent = &quot;${GIT_BRANCH_PARENT}&quot;                    # The parent branch for the current branch (DERIVED IF NOT SPECIFIED)  GitCommit = &quot;${GIT_COMMIT}&quot;                                 # Git commit that triggered the CI job (DERIVED IF NOT SPECIFIED)  GitCommitAuthors = &quot;${GIT_COMMIT_AUTHORS}&quot;                  # List of committers for the repo (DERIVED IF NOT SPECIFIED)  GitCommittersCnt = &quot;${GIT_COMMITTERS_CNT}&quot;                  # Count of GitCommitAuthors (DERIVED IF NOT SPECIFIED)  GitCommitTimestamp = &quot;${GIT_COMMIT_TIMESTAMP}&quot;              # Timestamp of the current commit (DERIVED IF NOT SPECIFIED)  GitContribPercentage = &quot;${GIT_CONTRIB_PERCENTAGE}&quot;          # GitCommittersCnt / GitTotalCommittersCnt * 100 (DERIVED IF NOT SPECIFIED)  GitLinesAdded = &quot;${GIT_LINES_ADDED}&quot;                        # Lines added since the previous commit (DERIVED IF NOT SPECIFIED)  GitLinesDeleted = &quot;${GIT_LINES_DELETED}&quot;                    # Lines deleted since the previous commit (DERIVED IF NOT SPECIFIED)  GitLinesTotal = &quot;${GIT_LINES_TOTAL}&quot;                        # Total line count for the branch (DERIVED IF NOT SPECIFIED)  GitOrg = &quot;${GIT_ORG}&quot;                                       # Orgranization for the repo (DERIVED IF NOT SPECIFIED)  GitRepo = &quot;${GIT_REPO}&quot;                                     # Git repo that triggered the CI job (DERIVED IF NOT SPECIFIED)  GitRepoProject = &quot;${GIT_REPO_PROJECT}&quot;                      # Project name part of the repository url (DERIVED IF NOT SPECIFIED)  GitTag = &quot;${GIT_TAG)&quot;                                       # Git tag in the git repo (DERIVED IF NOT SPECIFIED)  GitTotalCommittersCnt = &quot;${GIT_TOTAL_COMMITTERS_CNT}&quot;       # Total committers working on this repo  GitUrl = &quot;${GIT_URL}&quot;                                       # Full url to the git repo (DERIVED IF NOT SPECIFIED)  License = &quot;&quot;                                                # License file location in the Git Repo (DERIVED IF NOT SPECIFIED)  operator = &quot;&quot;                                               # Operator name  Readme = &quot;&quot;                                                 # Readme file location in the Git Repo (DERIVED IF NOT SPECIFIED)  ServiceOwner = &quot;&quot;                                           # Owner of the Service  ServiceOwnerEmail = &quot;&quot;                                      # Email for the Owner of the Service  ServiceOwnerPhone = &quot;&quot;                                      # Phone number for the Owner of the Service  Swagger = &quot;&quot;                                                # Swagger/OpenApi file location in the Git Repo (DERIVED IF NOT SPECIFIED)  ```- `assign` - assigns a _Component Version_ to an _Application Version_  Usage:  --dhurl  --dhuser  --dhpass  --compname  --compvariant (optional)  --compversion (optional)  --appname  --appversion (optional)- `kv` - assigns the key/values pairs to the _Component Version_  Usage:  --dhurl  --dhuser  --dhpass  --compname  --compvariant (optional)  --compversion (optional)  --kvconfig- `envscript` - creates a bash file from the _Component_ toml file  Usage:  --envvars  --envvars_sh- `export` - exports a _Domain_ including all objects to stdout  Usage:  --dhurl  --dhuser  --dhpass  --from_dom- `import` - imports the export file into the new _Domain_  Usage:  --dhurl  --dhuser  --dhpass  --from_dom  --to_dom#### Parameter Usage  | Parameter| Descriptions |  | --- | --- |  | appautoinc | _Application_ Auto Increment Version |  | appname | _Application_ Name |  | appversion | _Application Version_ |  | cert | Customer SSL Certificate File |  | changerequest | Change Request for _Component_, use multiple time for each Change Request Id |  | cluster_json | json from kubectl get deploy -n default -o json |  | compattr | _Component_ attributes, use multiple time for each attr |  | compautoinc | _Component_ auto increment version |  | compname | _Component_ Name |  | compvariant | _Component_ Variant |  | compversion | _Component Version_ |  | consumes | json file that lists the endpoints the _Component_ consumes.  [ {&quot;verb&quot;, &quot;get&quot;, &quot;path&quot;: &quot;/weather&quot;}] |  | crdatasource | Change Request Data Source for the _Component_ |  | deploydata | The json file that contains the _Application_, _Environment_ and log details |  | deploydatasave | Name of the json file to save the new _Component_ and _Application Versions_ names to |  | deployenv | Deployment _Environment_ |  | deppkg | File name for the Safety, CycloneDx, SPDX json scan data, use multiple time for each file.  Parameter format is: &lt;type&gt;@&lt;filename&gt; where type=safety, cyclonedx, spdx  | dhpass | Ortelius Password |  | dhurl | Ortelius Url |  | dhuser | Ortleius User |  | docker | docker Kind of the _Component_ item |  | envs | _Environments_ to Associate _Application Version_ to, use multiple time for each env |  | envvars_sh | Environment Variables Output shell file |  | envvars | _Component_ TOML file |  | file | file Kind of the _Component_ item |  | from_domain | Move from _Domain_ |  | fromdom | From _Domain_ |  | importfile | File to Import |  | kvconfig | Directory containing the json and properties file |  | logdeployment | Records a deployment by a external program |  | msbranch | New microservice branch being added to the cluster |  | msname | New microservice being added to the cluster |  | provides | json file that lists the _Endpoints_ the _Component_ provides.  [ {&quot;verb&quot;, &quot;get&quot;, &quot;path&quot;: &quot;/checkout&quot;}] |  | rsp | Response File for Parameters, ie component.toml |  | task | Task to use for move |  | todom | To _Domain_ |</longdescription>
</pkgmetadata>