<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Bosch Smart Home Controller API Python LibraryThis library implements the local communication REST API for the Bosch Smart Home Controller system. It supports both long and short polling. The API documentation is available [here](https://github.com/BoschSmartHome/bosch-shc-api-docs).The following device services are implemented:* ```TemperatureLevel```* ```HumidityLevel```* ```RoomClimateControl```* ```ShutterContact```* ```ValveTappet```* ```PowerSwitch```* ```PowerMeter```* ```Routing```* ```PowerSwitchProgram```* ```PresenceSimulationConfiguration```* ```BinarySwitch```* ```SmokeDetectorCheck```* ```Alarm```* ```ShutterControl```* ```CameraLight```* ```PrivacyMode```* ```CameraNotification```* ```IntrusionDetectionControl```* ```Keypad```* ```LatestMotion```* ```AirQualityLevel```* ```SurveillanceAlarm```* ```BatteryLevel```* ```Thermostat```* ```WaterLeakageSensor```* ```WaterLeakageSensorTilt```* and moreThe following device models are implemented, using the above services:* ```ShutterContact```, ```ShutterContact2```* ```ShutterControl```, ```Micromodule Shutter```* ```SmartPlug```* ```SmartPlugCompact```* ```LightControl```, ```Micromodule Light Control```, ```Micromodule Light Attached```, ```Micromodule Relay```* ```SmokeDetector```* ```CameraEyes```, ```Camera360```* ```IntrusionDetectionSystem```* ```RoomClimateControl```* ```Thermostat```, ```Thermostat2```* ```WallThermostat```* ```UniversalSwitch```* ```MotionDetector```* ```PresenceSimulationSystem```* ```Twinguard```* ```WaterLeakageSensor```## Command line access to SHC1. Install a `python` (&gt;=3.10) environment on your computer.2. Install latest version of `boschshcpy`, you should have at least `version&gt;=0.2.45`.```bashpip install boschshcpy```### Registering a new clientTo register a new client, use the script `boschshc_registerclient`:```bashboschshc_registerclient -ip _your_shc_ip_ -pw _your_shc_password_```This will register your client and will write the associated certificate/key pair into your working directory. See also [Usage Guide](#usage-guide)### RawscansTo make a rawscan of your devices, use the script `boschshc_rawscan`#### Make a rawscan of the public information```bashboschshc_rawscan -ip _your_shc_ip_ -cert _your_shc_cert_file_ -key _your_shc_key_file_ public_information```#### Make a rawscan of all devices```bashboschshc_rawscan -ip _your_shc_ip_ -cert _your_shc_cert_file_ -key _your_shc_key_file_ devices```#### Make a rawscan of a single device with a known `device_id````bashboschshc_rawscan -ip _your_shc_ip_ -cert _your_shc_cert_file_ -key _your_shc_key_file_ device _your_device_id_```An exemplary output looks as follows:```bash    {        &quot;@type&quot;: &quot;device&quot;,        &quot;rootDeviceId&quot;: &quot;xx-xx-xx-xx-xx-xx&quot;,        &quot;id&quot;: &quot;hdm:HomeMaticIP:30xxx&quot;,        &quot;deviceServiceIds&quot;: [            &quot;Thermostat&quot;,            &quot;BatteryLevel&quot;,            &quot;ValveTappet&quot;,            &quot;SilentMode&quot;,            &quot;TemperatureLevel&quot;,            &quot;Linking&quot;,            &quot;TemperatureOffset&quot;        ],        &quot;manufacturer&quot;: &quot;BOSCH&quot;,        &quot;roomId&quot;: &quot;hz_8&quot;,        &quot;deviceModel&quot;: &quot;TRV&quot;,        &quot;serial&quot;: &quot;30xxx&quot;,        &quot;profile&quot;: &quot;GENERIC&quot;,        &quot;name&quot;: &quot;Test Thermostat&quot;,        &quot;status&quot;: &quot;AVAILABLE&quot;,        &quot;parentDeviceId&quot;: &quot;roomClimateControl_hz_8&quot;,        &quot;childDeviceIds&quot;: []    },```#### Make a rawscan of the associated services of a device```bashboschshc_rawscan -ip _your_shc_ip_ -cert _your_shc_cert_file_ -key _your_shc_key_file_ device_services _your_device_id_```The exemplary output will look as follows:```bash[    {        &quot;@type&quot;: &quot;DeviceServiceData&quot;,        &quot;id&quot;: &quot;BatteryLevel&quot;,        &quot;deviceId&quot;: &quot;hdm:HomeMaticIP:30xxx&quot;,        &quot;path&quot;: &quot;/devices/hdm:HomeMaticIP:30xxx/services/BatteryLevel&quot;    },    {        &quot;@type&quot;: &quot;DeviceServiceData&quot;,        &quot;id&quot;: &quot;Thermostat&quot;,        &quot;deviceId&quot;: &quot;hdm:HomeMaticIP:30xxx&quot;,        &quot;state&quot;: {            &quot;@type&quot;: &quot;childLockState&quot;,            &quot;childLock&quot;: &quot;OFF&quot;        },        &quot;path&quot;: &quot;/devices/hdm:HomeMaticIP:30xxx/services/Thermostat&quot;    },...]```#### Make a rawscan of the a service of a device, where the `device_id` as well as the `service_id` are known```bashboschshc_rawscan -ip _your_shc_ip_ -cert _your_shc_cert_file_ -key _your_shc_key_file_ device_service _your_device_id_ _your_service_id```#### Make a rawscan of the all scenarios```bashboschshc_rawscan -ip _your_shc_ip_ -cert _your_shc_cert_file_ -key _your_shc_key_file_ scenarios```#### Make a rawscan of the all rooms```bashboschshc_rawscan -ip _your_shc_ip_ -cert _your_shc_cert_file_ -key _your_shc_key_file_ rooms```## Example code to use the `boschshcpy` library```pythonimport boschshcpy# Create sessionsession = boschshcpy.SHCSession(controller_ip=&quot;192.168.25.51&quot;, certificate='cert.pem', key='key.pem')session.information.summary()device = session.device('roomClimateControl_hz_5')service = device.device_service('TemperatureLevel')print(service.temperature)# Update this service's stateservice.short_poll()# Start long polling thread in backgroundsession.start_polling()# Do work here...# Stop pollingsession.stop_polling()# Trigger intrusion detection systemintrusion_control = session.intrusion_systemintrusion_control.arm()# Get rawscan of devicesscan_result = session.rawscan(command=&quot;devices&quot;)```## Usage guideBefore accessing the Bosch Smart Home Controller, a client must be registered on the controller. For this a valid cert/key pair must be provided to the controller. To start the client registration, press and hold the button on the controller until the led starts flashing. More information [here](https://github.com/BoschSmartHome/bosch-shc-api-docs/tree/master/postman#register-a-new-client-to-the-bosch-smart-home-controller).</longdescription>
</pkgmetadata>