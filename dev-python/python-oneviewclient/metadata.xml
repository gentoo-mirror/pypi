<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====================python-oneviewclient====================Library to use HPE OneView to provide nodes for IronicThis library adds a communication layer between Ironic and OneView andabstracts the version of OneView in place.* Free software: Apache license* Documentation: http://docs.openstack.org/developer/python-oneviewclient* Source: http://git.openstack.org/cgit/openstack/python-oneviewclient* Bugs: http://bugs.launchpad.net/python-oneviewclientFeatures========Audit logging-------------``python-oneviewclient`` is capable of logging method calls to OneView forauditing. Currently, data about request timing and method names, parameters andreturn values, can be recorded to be used in the auditing process to discoverand better understand hotspots, bottlenecks and to measure how the user codeand OneView integration performs.Enabling audit logging&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;To enable audit logging, the user code has to set three parameters in theconstructor of the client object. namely: ``audit_enabled``, ``audit_map_file``and ``audit_output_file``. ``audit_map_file`` and ``audit_output_file`` must befilled with the absolute path to the audit map file and the audit output file.The audit map file&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;The audit map file is composed of two sections, ``audit`` and ``cases``. In the``audit`` section there should be a ``case`` option where one, and just one, ofthe audit logging ``cases`` needs to be specified. The ``cases`` section needsto be filled with a name for a case followed by the methods that the user wantsto audit logging. The methods that are allowed for the audit logging are thosedecorated by ``@auditing.audit`` in ``python-oneviewclient``.See an example of an audit map file::    [audit]    # Case to be audit logged from those declared in cases section.    case = case_number_one    [cases]    # Possible auditable case name followed by the audit loggable    # methods' names.    case_number_one = first_method,second_method,third_method    case_number_two = first_method,third_method,fifth_methodThe audit output file&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;The result of the audit logging process is a JSON formatted file that can beused by auditors, operators and engineers to obtain valuable information aboutperformance impacts of using ``python-oneviewclient`` to access OneView,and better understand possible hotspots and bottlenecks in the integration ofthe user code and OneView.See an example of an audit output file::    {        &quot;method&quot;: &quot;get_node_power_state&quot;,        &quot;client_instance_id&quot;: 140396067361488,        &quot;initial_time&quot;: &quot;2016-08-29T17:32:01.403420&quot;,        &quot;end_time&quot;: &quot;2016-08-29T17:32:01.439126&quot;,        &quot;is_ironic_request&quot;: true,        &quot;is_oneview_request&quot;: false,        &quot;ret&quot;: &quot;Off&quot;    }</longdescription>
</pkgmetadata>