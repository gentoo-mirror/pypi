<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sphinxcontrib-autoyamlThis Sphinx autodoc extension documents YAML files from comments. Documentationis returned as reST definitions, e.g.:This document:```#### Enable Nginx web server.enable_nginx: true#### Enable Varnish caching proxy.enable_varnish: true```would be turned into text:```enable_nginx   Enable Nginx web server.enable_varnish   Enable Varnish caching proxy.```See `tests/examples/output/*.yml` and `tests/examples/output/*.txt` formore examples.`autoyaml` will take into account only comments which first line starts with`autoyaml_doc_delimiter`.## UsageYou can use `autoyaml` directive, where you want to extract commentsfrom YAML file, e.g.:```Some title==========Documenting single YAML file... autoyaml:: some_yml_file.yml```## OptionsOptions available to use in your configuration:- *autoyaml_root*(`..`)  Look for YAML files relatively to this directory.- *autoyaml_doc_delimiter*(`###`)  Character(s) which start a documentation comment.- *autoyaml_comment*(`#`)  Comment start character(s).- *autoyaml_level*(`1`)  Parse comments from nested structures n-levels deep.## InstallingIssue command:```pip install sphinxcontrib-autoyaml```And add extension in your project's ``conf.py``:```extensions = [&quot;sphinxcontrib.autoyaml&quot;]```## Caveats### Mapping keys nested in sequencesSequences are traversed as well, but they are not represented in outputdocumentation. This extension focuses only on documenting mapping keys. It meansthat structure like this:```yamlkey:  ###  # comment1  - - inner_key1: value      ###      # comment2      inner_key2: value  ###  # comment3  - inner_key3: value```will be flattened, so it will appear as though inner keys exist directly under`key`. Duplicated key documentation will be duplicated in output as well. See`tests/examples/output/comment-in-nested-sequence.txt` and`tests/examples/output/comment-in-nested-sequence.yml` to get a betterunderstanding how sequences are processed.### Complex mapping keysYAML allows for complex mapping keys like so:```yaml[1, 2]: value```These kind of keys won't be documented in output, because it's unclear how theyshould be represented as a string.### Flow-style entriesYAML allows writing complex data structures in single line like JSON.Documentation is generated only for the first key in such entry, so this:```yaml#### commentkey: {key1: value, key2: value, key3: value}```would yield documentation only for `key`.</longdescription>
</pkgmetadata>