<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Amocrm custom library==========1. Retrieving data from amocrm amocrm.api (v2 and v4).2. Uploading data to database. Supported databases:-------------* clickhouse* vertica Usage```shpip3 install amocrm-talenttech-oss```Retrieving data from API:-------------```pythonimport datetimefrom api.api_loader_amocrm_v4 import AmocrmApiLoader as ApiLoaderV4 date_modified_from = datetime.datetime.now() - datetime.timedelta(days=1) #args_api = {                &quot;amocrm_api_url&quot;: &quot;https://&lt;NAMESPACE&gt;.amocrm.ru/amocrm.api/v4/&lt;ENTITY&gt;?page={page}&amp;limit={limit}&quot;,                &quot;AUTH_URL&quot;:&quot;https://&lt;NAMESPACE&gt;.amocrm.ru/oauth2/access_token&quot;,                &quot;CLIENT_SECRET&quot;:&quot;xxxx&quot;,                &quot;CLIENT_ID&quot;: &quot;xxx-xxx-xxxx-xxxx-xxxxxxx&quot;,                &quot;REDIRECT_URL&quot;:&quot;https://xxxx/xx&quot;           }args_s3 = {                &quot;aws_access_key_id&quot;: &lt;S3_ACCESS_KEY&gt;,                &quot;aws_secret_access_key&quot;:  &lt;S3_ACCESS_SECRET&gt;,                &quot;endpoint_url&quot;: &lt;S3_ENDPOINT_URL&gt;,                &quot;bucket&quot;: &lt;S3_BUCKET&gt;          }api_loader = ApiLoaderV4(                entity=&lt;ENTITY&gt;,                # leads/tasks/companies or e.t.c                s3_path=&lt;S3_PATH&gt;,              # this s3 folder should contain retrieved files                s3_token_path=&lt;S3_TOKEN_PATH&gt;,  # directory for tokens                args_s3=args_s3,                args_api=args_api,                date_modified_from=date_modified_from, #parameters is optional, if want load only updated records from date                with_offset=True,                 batch_api=500            )api_loader.auth(&lt;CODE_AUTH&gt;) #call it if you need to create or regenerate refresh token the first timeapi_loader.extract()      ```Uploading data to vertica:-------------```pythonfrom db.vertica_uploader import UploaderDB as VerticaUploaderDBsql_credentials = {                &quot;database&quot;: &lt;DATABASE&gt;,                &quot;schema&quot;: &lt;SCHEMA&gt;                &quot;user&quot;: &lt;VERTICA_WRITE_USER&gt;,                &quot;host&quot;: &lt;VERTICA_HOST&gt;,                &quot;port&quot;: &lt;VERTICA_PORT&gt;,                &quot;password&quot;: &lt;VERTICA_WRITE_PASSWORD&gt;,                &quot;vertica_configs&quot;: &lt;VERTICA_CONFIGS&gt;,            }args_s3 = {                &quot;aws_access_key_id&quot;: &lt;S3_ACCESS_KEY&gt;,                &quot;aws_secret_access_key&quot;:  &lt;S3_ACCESS_SECRET&gt;,                &quot;endpoint_url&quot;: &lt;S3_ENDPOINT_URL&gt;,                &quot;bucket&quot;: &lt;S3_BUCKET&gt;          }        db_uploader = VerticaUploaderDB(            args_s3=args_s3,            s3_path=s3_path,            sql_credentials=sql_credentials,            entity=&lt;ENTITY&gt;,            table_name=&lt;TABLE_NAME&gt;,            json_columns=[&lt;COLUM_JSON_1&gt;, &lt;COLUM_JSON_2&gt;]        )db_uploader.load_s3_to_db()        ```  Extract or load data to db:-------------  ```pythonimport osimport jsonargs = {    &quot;action&quot;: os.getenv(&quot;action&quot;),    &quot;etl_name_no_version&quot;: os.getenv(&quot;ETL_NAME_NO_VERSION&quot;),    &quot;execution_date&quot;: parse(os.getenv(&quot;execution_date&quot;)),    &quot;config_name&quot;: os.getenv(&quot;config_name&quot;),    &quot;entity&quot;: os.getenv(&quot;entity&quot;),    &quot;args_s3&quot;: args_netology_s3,    &quot;sql_credentials&quot;: sql_credentials,    &quot;db&quot;: os.getenv(&quot;db&quot;),    &quot;table_name&quot;: os.getenv(&quot;table_name&quot;),    &quot;table_to_optimize&quot;: os.getenv(&quot;table_to_optimize&quot;),    &quot;json_columns&quot;: os.getenv(&quot;json_columns&quot;),    &quot;amocrm_secrets&quot;: json.loads(os.getenv(&quot;AMOCRM_TOKEN_SECRET&quot;)),    &quot;amocrm_api_url&quot;: os.getenv(&quot;amocrm_api_url&quot;),    &quot;if_modified_since&quot;: os.getenv(&quot;if_modified_since&quot;),    &quot;parser&quot;: os.getenv(&quot;parser&quot;),}   amo_runner = AmocrmRunner(**args)   #amo_runner.regenerate_file_secret(code_auth=&quot;def502003cdbc2c012e210f69190133bf1943b5ebf825ef46c10b52c077064e3b9cf1378831d6f28855b9e17e4c0f95e40213af8994c1e0fadd9221730219d3e54a5dcdf1f25a90a83a19cf4edb05bd024595eec042ec3c1170f78de9dd33b5074c72e9b1821d8db0c2b31e1ab82012e6f3361ee90283e88a0c95e61802cc4e46e8d3797d04d074f367c3162879bedd0fac4c6951faf73e27895f141769a77794de56abf940c3bd68f64b7cc959017767c421c618d0100ab4c4ec651bcb03a105b3fb9ae9a26fc46252dac707963c283d1cca7fd5ec29c6f384467b1d7090b8770b2b9c69a284cbd9f7548f4c7a4f5f00a229322ae68073b603b41eeece7162f46a7519d818c8d9ffb6c93e80fadc9a3db9e83f0e4af0f3965d43e81e48a868821c2d851e1b96ffb80a875f3ff211188a12054efdd1ccc93c4b2dd73d524671c8d8aca3b1c414bfda9d011801a2aeba0dc79f882f248788553b4e5a2d7f648c89b53d86079ef09ae13dfab0cea8ab4f137579eb128a270a2cf62487b65ffc57372bed6a4fb62635f0d7275b0eba18d64900a3ea6cac403f7949617bbba7ef6afa7b0e359c8b5daac05fd30c194575c253933a8d45ad8b8737842d57ceca1810da7797b23&quot;) #if secret file is empty or you net to create it the first time   amo_runner.run()```</longdescription>
</pkgmetadata>