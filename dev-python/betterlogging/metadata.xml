<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># BetterLogging![BetterLogging](https://telegra.ph/file/ebd3b272eb1969dd55f58.png &quot;BetterLogging&quot;)Improved version of the standard logger.* Added `TRACE` level.* Added `ColorizedFormatter`.* Added better traceback formatting.This package patching the standard `logging` library.Thus, after import, all improvements will be available inside the `logging` module.But for better typing, I prefer to use `betterlogging` everywhere.### RequirementsPython 3.6 and above. No additional dependencies.### Installation`pip install betterlogging`### Usage#### Simple usage```pythonimport betterlogging as logginglogging.basic_colorized_config(level=logging.INFO)logger = logging.getLogger('test')logger.trace(&quot;some trace message&quot;)logger.debug(&quot;some debug message&quot;)logger.info(&quot;some info message&quot;)logger.warning(&quot;some warning message&quot;)logger.error(&quot;some error message&quot;)logger.critical(&quot;some critical message&quot;)```#### More advanced usage```pythonimport betterlogging as logging# You can use shortcut:logger = logging.get_colorized_logger(name=&quot;test&quot;)# Or, if you want to configure formatter:handler = logging.StreamHandler()handler.setFormatter(logging.ColorizedFormatter(hide_lib_diagnose=False))logger.addHandler(handler)logger.setLevel(logging.TRACE)logger.trace(&quot;some trace message&quot;)logger.debug(&quot;some debug message&quot;)logger.info(&quot;some info message&quot;)logger.warning(&quot;some warning message&quot;)logger.error(&quot;some error message&quot;)logger.critical(&quot;some critical message&quot;)def div(x: int, y: int) -&gt; float:    return x / ytry:    div(1, 0)except:    logger.exception(&quot;Some exception&quot;)```#### Config for `uvicorn````json{  &quot;version&quot;: 1,  &quot;disable_existing_loggers&quot;: false,  &quot;formatters&quot;: {    &quot;default&quot;: {      &quot;()&quot;: &quot;betterlogging.ColorizedFormatter&quot;    },    &quot;access&quot;: {      &quot;()&quot;: &quot;betterlogging.ColorizedFormatter&quot;,      &quot;fmt&quot;: &quot;%(c_fg_green)s%(asctime)s %(c_color)s%(levelname)-8s%(c_reset)s %(c_fg_cyan)s[%(name)s] %(c_reset)s%(message)s&quot;    }  },  &quot;handlers&quot;: {    &quot;default&quot;: {      &quot;formatter&quot;: &quot;default&quot;,      &quot;class&quot;: &quot;logging.StreamHandler&quot;    },    &quot;access&quot;: {      &quot;formatter&quot;: &quot;access&quot;,      &quot;class&quot;: &quot;logging.StreamHandler&quot;,      &quot;stream&quot;: &quot;ext://sys.stdout&quot;    }  },  &quot;loggers&quot;: {    &quot;&quot;: {      &quot;handlers&quot;: [        &quot;default&quot;      ],      &quot;level&quot;: &quot;DEBUG&quot;    },    &quot;uvicorn.error&quot;: {      &quot;level&quot;: &quot;INFO&quot;    },    &quot;uvicorn.access&quot;: {      &quot;handlers&quot;: [        &quot;access&quot;      ],      &quot;level&quot;: &quot;INFO&quot;,      &quot;propagate&quot;: false    }  }}``````shell scriptuvicorn application:app --debug --reload --log-config ./logging.json```</longdescription>
</pkgmetadata>