<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;docs/_static/images/pysal_banner.svg&quot; width=&quot;370&quot; height=&quot;200&quot; /&gt;&lt;/p&gt;# `spopt`: Spatial Optimization#### Regionalization, facility location, and transportation-oriented modeling![tag](https://img.shields.io/github/v/release/pysal/spopt?include_prereleases&amp;sort=semver)[![Continuous Integration](https://github.com/pysal/spopt/actions/workflows/testing.yml/badge.svg)](https://github.com/pysal/spopt/actions/workflows/testing.yml)[![codecov](https://codecov.io/gh/pysal/spopt/branch/main/graph/badge.svg)](https://codecov.io/gh/pysal/spopt)[![Documentation](https://img.shields.io/static/v1.svg?label=docs&amp;message=current&amp;color=9cf)](http://pysal.org/spopt/)[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![status](https://joss.theoj.org/papers/1413cf2c0cf3c561386949f2e1208563/status.svg)](https://joss.theoj.org/papers/1413cf2c0cf3c561386949f2e1208563)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4444156.svg)](https://doi.org/10.5281/zenodo.4444156)Spopt is an open-source Python library for solving optimization problems with spatial data. Originating from the `region` module in [PySAL (Python Spatial Analysis Library)](http://pysal.org), it is under active development for the inclusion of newly proposed models and methods for regionalization, facility location, and transportation-oriented solutions. ### Regionalization```pythonimport spopt, libpysal, geopandas, numpymexico = geopandas.read_file(libpysal.examples.get_path(&quot;mexicojoin.shp&quot;))mexico[&quot;count&quot;] = 1attrs = [f&quot;PCGDP{year}&quot; for year in range(1950, 2010, 10)]w = libpysal.weights.Queen.from_dataframe(mexico)mexico[&quot;count&quot;], threshold_name, threshold, top_n = 1, &quot;count&quot;, 4, 2numpy.random.seed(123456)model = spopt.MaxPHeuristic(mexico, w, attrs, threshold_name, threshold, top_n)model.solve()mexico[&quot;maxp_new&quot;] = model.labels_mexico.plot(column=&quot;maxp_new&quot;, categorical=True, figsize=(12,8), ec=&quot;w&quot;);```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;docs/_static/images/maxp.svg&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;### Locate```pythonfrom spopt.locate import MCLPfrom spopt.locate.util import simulated_geo_pointsimport numpy, geopandas, pulp, spaghettisolver = pulp.PULP_CBC_CMD(msg=False, warmStart=True)lattice = spaghetti.regular_lattice((0, 0, 10, 10), 9, exterior=True)ntw = spaghetti.Network(in_data=lattice)street = spaghetti.element_as_gdf(ntw, arcs=True)street_buffered = geopandas.GeoDataFrame(    geopandas.GeoSeries(street[&quot;geometry&quot;].buffer(0.5).unary_union),    crs=street.crs,    columns=[&quot;geometry&quot;],)client_points = simulated_geo_points(street_buffered, needed=100, seed=5)ntw.snapobservations(client_points, &quot;clients&quot;, attribute=True)clients_snapped = spaghetti.element_as_gdf(    ntw, pp_name=&quot;clients&quot;, snapped=True)facility_points = simulated_geo_points(street_buffered, needed=10, seed=6)ntw.snapobservations(facility_points, &quot;facilities&quot;, attribute=True)facilities_snapped = spaghetti.element_as_gdf(    ntw, pp_name=&quot;facilities&quot;, snapped=True)cost_matrix = ntw.allneighbordistances(    sourcepattern=ntw.pointpatterns[&quot;clients&quot;],    destpattern=ntw.pointpatterns[&quot;facilities&quot;],)numpy.random.seed(0)ai = numpy.random.randint(1, 12, 100)mclp_from_cost_matrix = MCLP.from_cost_matrix(cost_matrix, ai, 4, p_facilities=4)mclp_from_cost_matrix = mclp_from_cost_matrix.solve(solver)```*see [notebook](https://github.com/pysal/spopt/blob/main/notebooks/mclp.ipynb) for plotting code*&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;docs/_static/images/mclp.png&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;## ExamplesMore examples can be found in the [Tutorials](https://pysal.org/spopt/tutorials.html) section of the documentation.- [Max-p-regions problem](https://pysal.org/spopt/notebooks/maxp.html)- [Skater](https://pysal.org/spopt/notebooks/skater.html)- [Region K means](https://pysal.org/spopt/notebooks/reg-k-means.html)- [Facility Location Real World Problem](https://pysal.org/spopt/notebooks/facloc-real-world.html)All examples can be run interactively by launching this repository as a [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/pysal/spopt/main).## Requirements- [scipy](http://scipy.github.io/devdocs/)- [numpy](https://numpy.org/devdocs/)- [pandas](https://pandas.pydata.org/docs/)- [networkx](https://networkx.org/)- [libpysal](https://pysal.org/libpysal/)- [scikit-learn](https://scikit-learn.org/stable/)- [geopandas](https://geopandas.org/)- [pulp](https://coin-or.github.io/pulp/)- [spaghetti](https://github.com/pysal/spaghetti)## Installationspopt is available on the [Python Package Index](https://pypi.org/). Therefore, you can either install directly with pip from the command line:```$ pip install -U spopt```or download the source distribution (.tar.gz) and decompress it to your selected destination. Open a command shell and navigate to the decompressed folder. Type:```$ pip install .```You may also install the latest stable spopt via conda-forge channel by running:```$ conda install --channel conda-forge spopt```## Related packages* Region* Locate  * [`allagash`](https://github.com/apulverizer/allagash)  * [`maximum-coverage-location`](https://github.com/cyang-kth/maximum-coverage-location)  * [`p-center`](https://github.com/antoniomedrano/p-center)  * [`pyspatialopt`](https://github.com/apulverizer/pyspatialopt)## ContributePySAL-spopt is under active development and contributors are welcome.If you have any suggestions, feature requests, or bug reports, please open new [issues](https://github.com/pysal/spopt/issues) on GitHub. To submit patches, please review [PySAL's documentation for developers](https://pysal.org/docs/devs/), the PySAL [development guidelines](https://github.com/pysal/pysal/wiki), the `spopt` [contributing guidelines](https://github.com/pysal/spopt/blob/main/.github/CONTRIBUTING.md) before  opening a [pull request](https://github.com/pysal/spopt/pulls). Once your changes get merged, youâ€™ll automatically be added to the [Contributors List](https://github.com/pysal/spopt/graphs/contributors).## SupportIf you are having trouble, please [create an issue](https://github.com/pysal/spopt/issues), [start a discussion](https://github.com/pysal/spopt/discussions), or talk to us in the [gitter room](https://gitter.im/pysal/spopt).## Code of ConductAs a PySAL-federated project, `spopt` follows the [Code of Conduct](https://github.com/pysal/governance/blob/main/conduct/code_of_conduct.rst) under the [PySAL governance model](https://github.com/pysal/governance).## LicenseThe project is licensed under the [BSD 3-Clause license](https://github.com/pysal/spopt/blob/main/LICENSE.txt).## CitationIf you use PySAL-spopt in a scientific publication, we would appreciate using the following citations:```@misc{spopt2021,    author    = {Feng, Xin, and Gaboardi, James D. and Knaap, Elijah and                Rey, Sergio J. and Wei, Ran},    month     = {jan},    year      = {2021},    title     = {pysal/spopt},    url       = {https://github.com/pysal/spopt},    doi       = {10.5281/zenodo.4444156},    keywords  = {python,regionalization,spatial-optimization,location-modeling}}@article{spopt2022,    author    = {Feng, Xin and Barcelos, Germano and Gaboardi, James D. and                Knaap, Elijah and Wei, Ran and Wolf, Levi J. and                Zhao, Qunshan and Rey, Sergio J.},    year      = {2022},    title     = {spopt: a python package for solving spatial optimization problems in PySAL},    journal   = {Journal of Open Source Software},    publisher = {The Open Journal},    volume    = {7},    number    = {74},    pages     = {3330},    url       = {https://doi.org/10.21105/joss.03330},    doi       = {10.21105/joss.03330},}```## FundingThis project is/was partially funded through:[&lt;img align=&quot;middle&quot; src=&quot;docs/_static/images/nsf_logo.png&quot; width=&quot;75&quot;&gt;](https://www.nsf.gov/index.jsp) National Science Foundation Award #1831615: [RIDIR: Scalable Geospatial Analytics for Social Science Research](https://www.nsf.gov/awardsearch/showAward?AWD_ID=1831615)&lt;!-- [&lt;img align=&quot;middle&quot; src=&quot;docs/_static/image/IMAGE2.png&quot; width=&quot;150&quot;&gt;](link2) Some text2: [Project title 2](another_link2) --&gt;</longdescription>
</pkgmetadata>