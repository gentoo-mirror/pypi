<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Gonk![gonk](https://c.tenor.com/T0z4i7XQhUkAAAAd/gonk-gonk-droid.gif &quot;Gonk&quot;)## Setup### Install the library:```bashpip install gonk```You can add contribution add-ons:For Mercure support:```shellpip install gonk[mercure]```For Django Rest Framework support:```shellpip install gonk[drf]```Or both of them:```shellpip install gonk[drf,mercure]```### Add the application to `INSTALLED_APPS` in Django `settings`:```pythonINSTALLED_APPS = [    # ...    'gonk',]```### Launch migrations:```bashpython manage.py migrate```## Usage### Create taskrunner```python# taskrunners.pyfrom gonk.taskrunners import TaskRunnerfrom gonk.decorators import register, register_beatfrom celery.schedules import crontab# Register taskrunner@register('my_taskrunner')class MyTaskRunner(TaskRunner):    def revert(self):        # Specific implementation        def run(self):        # Specific implementation# Register scheduled taskrunner@register_beat('scheduled_taskrunner', crontab(minute='*'))class ScheduledTaskRunner(TaskRunner):    def revert(self):        # Specific implementation        def run(self):        # Specific implementation```We have to import the taskrunner within every app.The best way to do so is in `apps.py````pythonclass MyAppConfig(AppConfig):    # ...    def ready(self):        from . import taskrunners```### Launch task```pythonfrom gonk.tasks import Taskargs = {}Task.create_task('my_taskrunner', args)```### Revert task```pythonfrom gonk.tasks import Taskt = Task.objects.last()t.revert()```### Cancel task```pythonfrom gonk.tasks import Taskt = Task.objects.last()terminate: bool = Falset.cancel(terminate=terminate)```### CheckpointsYou can add checkpoints to register transcendent events within the task. Every checkpoint can send a notificationto the user to get feedback of the status and progress of the task.```python# taskrunners.pyfrom gonk.taskrunners import TaskRunnerclass MyTaskRunner(TaskRunner):    def run(self):        # Specific implementation        self.task.log_status('STARTED', checkpoint=False)        self.task.log_status('Checkpoint 1', checkpoint=True)        self.task.log_status('FINISHED')```### Command to list registered taskrunnersWe can list the registered taskrunner with the command `list_taskrunners`.```bashpython manage.py list_taskrunners```### Command to launch tasks manuallyWe can create tasks using the command `create_tasks`.```bashpython manage.py create_task --helpusage: manage.py create_task [-h] [--input INPUT] [--raw-input RAW_INPUT] [--queue QUEUE] [--when WHEN] [--version] [-v {0,1,2,3}] [--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]                             [--skip-checks]                             task_typepositional arguments:  task_type             Task type identifieroptions:  -h, --help            show this help message and exit  --input INPUT         File input -- can be redirected from standard output  --raw-input RAW_INPUT                        Raw string input -- Must be in json format  --queue QUEUE         Celery queue name in which the task will be run  --when WHEN           Scheduled task run date -- ISO Format```**Examples:**```bashpython manage.py create_task &lt;task_type&gt; --raw-input='{}'cat file.json | python manage.py create_task &lt;task_type&gt; --queue=&quot;celery&quot; --input -```## Setup| Environment variable | Type | Description || -------- |  ----------- | ----------- || KEEP_TASK_HISTORY_DAYS | int | Number of days to keep the tasks || DEFAULT_NOTIFICATION_EMAIL | str | Default e-mail to notify |## Django Rest Framework&gt; To use Django Rest Framework extension we have to install with the `drf` extra. In our project `urls.py` we have to add the Gonk urls:```pythonfrom django.urls import path, includeurlpatterns = [    # ...    path('tasks/', include('gonk.contrib.rest_framework.urls')),]```## Notifications with Mercure&gt; To use Mercure extension we have to install with the `mercure` extra. To send notifications with Mercure we have to setup the following environment variables:| Variable | Type | Description || -------- |  ----------- | ----------- || MERCURE_HUB_URL | str | Mercure service URL || MERCURE_JWT_KEY | str | Mercure's JWT Token to publish events |```python# taskrunners.pyfrom gonk.taskrunners import TaskRunnerfrom gonk.contrib.notifications.mercure import MercureNotificationMixinclass MyTaskRunner(MercureNotificationMixin, TaskRunner):    # Specific implementation```## Development### Clone repository```bashgit clone git@github.com:kasfactory/gonk.git &amp;&amp; cd gonk```### Install poetry```bashpip install poetry```### Install dependencies```bashpoetry install```### Run docker-compose```bashdocker-compose up -d```### Launch celery worker```bashpoetry run celery -A test_app worker```### Launch celery beat```bashpoetry run celery -A test_app beat```&gt; At this point, we have to ensure that `gonk.tasks.to_run`, `gonk.tasks.to_revert` and &gt; `gonk.tasks.to_schedule` tasks are detected## Credits### Authors- [Francisco Javier Lend√≠nez](https://github.com/FJLendinez/)- [Pablo Moreno](https://github.com/pablo-moreno/)</longdescription>
</pkgmetadata>