<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># datasette-app-support[![PyPI](https://img.shields.io/pypi/v/datasette-app-support.svg)](https://pypi.org/project/datasette-app-support/)[![Changelog](https://img.shields.io/github/v/release/simonw/datasette-app-support?include_prereleases&amp;label=changelog)](https://github.com/simonw/datasette-app-support/releases)[![Tests](https://github.com/simonw/datasette-app-support/workflows/Test/badge.svg)](https://github.com/simonw/datasette-app-support/actions?query=workflow%3ATest)[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/simonw/datasette-app-support/blob/main/LICENSE)Part of https://github.com/simonw/datasette-app## InstallationInstall this plugin in the same environment as Datasette.    $ datasette install datasette-app-supportUsing this outside of the context of `Datasette.app` probably won't work.## API endpointsThis plugin exposes APIs that are called by the Electron wrapper.All plugins are protected by authentication: they need to be called with a `Authorization: Bearer xxx` token here the `xxx` matches the value of the `DATASETTE_API_TOKEN` environment variable.### /-/auth-app-user```POST /-/auth-app-user{&quot;redirect&quot;: &quot;/-/metadata&quot;}```If a valid `Authorization` header is passed, sets a signed cookie identifying the user as `{&quot;id&quot;: &quot;admin&quot;}` and redirects them to the specified page.### /-/open-database-file```POST /-/open-database-file{&quot;path&quot;: &quot;/path/to/file.db&quot;}```Attaches a new database file to the running Datasette instance - used by the &quot;Open Database...&quot; menu option.Returns HTTP 200 status with `{&quot;ok&quot;: True, &quot;path&quot;: &quot;/file&quot;}` if it works, 400 with an `&quot;error&quot;` JSON string message if it fails.### /-/new-empty-database-file```POST /-/new-empty-database-file{&quot;path&quot;: &quot;/path/to/file.db&quot;}```Creates a brand new empty SQLite database file at the specified path and attaches it to the Datasette instance. Used by the &quot;Create Empty Database...&quot; menu option.Returns HTTP 200 status with `{&quot;ok&quot;: True, &quot;path&quot;: &quot;/file&quot;}` if it works, 400 with an `&quot;error&quot;` JSON string message if it fails.### /-/open-csv-file```POST /-/open-csv-file{&quot;path&quot;: &quot;/path/to/file.csv&quot;}```Imports a CSV or TSV file into the default `/temporary` in-memory database. Used by the &quot;Open CSV...&quot; menu option.Returns HTTP 200 status with `{&quot;ok&quot;: True, &quot;path&quot;: &quot;/temporary/table&quot;}` if it works, 400 or 500 with an `&quot;error&quot;` JSON string message if it fails.### /-/import-csv-file```POST /-/import-csv-file{&quot;path&quot;: &quot;/path/to/file.csv&quot;, &quot;database&quot;: &quot;database_name&quot;}```Permanently imports a CSV or TSV file into the specified database. Used by the &quot;Import CSV...&quot; menu option.Returns HTTP 200 status with `{&quot;ok&quot;: True, &quot;path&quot;: &quot;/database_name/table&quot;}` if it works, 400 or 500 with an `&quot;error&quot;` JSON string message if it fails.### /-/open-csv-from-url```POST /-/open-csv-from-url{&quot;url&quot;: &quot;https://example.com/file.csv&quot;, &quot;table_name&quot;: &quot;My_suggested_table_name&quot;}```Imports a CSV file into the default `/temporary` in-memory database. Used by the &quot;Open CSV from URL...&quot; menu option. `table_name` is optional - if omitted the name to use will be derived from the URL.Returns HTTP 200 status with `{&quot;ok&quot;: True, &quot;path&quot;: &quot;/temporary/table&quot;}` if it works, 400 or 500 with an `&quot;error&quot;` JSON string message if it fails.### /-/dump-temporary-to-file```POST /-/dump-temporary-to-file{&quot;path&quot;: &quot;/path/to/backup.db&quot;}```Dumps the contents of the `temporary` in-memory database to the specified file. This is intended to be used to take a temporary backup when the Datasette server is restarted after a plugin has been installed, see [datasette-app/issues/42](https://github.com/simonw/datasette-app/issues/42).Returns HTTP 200 status with `{&quot;ok&quot;: True, &quot;path&quot;: &quot;/path/to/backup.db&quot;}` if it works, 400 or 500 with an `&quot;error&quot;` JSON string message if it fails.### /-/restore-temporary-to-file```POST /-/restore-temporary-from-file{&quot;path&quot;: &quot;/path/to/backup.db&quot;}```Restores the `temporary` in-memory database to the contents of the specified file.Returns HTTP 200 status with `{&quot;ok&quot;: True, &quot;path&quot;: &quot;/path/to/backup.db&quot;}` if it works, 400 or 500 with an `&quot;error&quot;` JSON string message if it fails.## DevelopmentTo set up this plugin locally, first checkout the code. Then create a new virtual environment:    cd datasette-app-support    python3 -mvenv venv    source venv/bin/activateOr if you are using `pipenv`:    pipenv shellNow install the dependencies and test dependencies:    pip install -e '.[test]'To run the tests:    pytest</longdescription>
</pkgmetadata>