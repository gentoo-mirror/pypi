<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HotDAG[![PyPI - Version](https://img.shields.io/pypi/v/hotdag.svg)](https://pypi.org/project/hotdag)![GitHub Workflow Status (with branch)](https://img.shields.io/github/actions/workflow/status/nicholasyager/hotdag/test.yml?branch=main)-----HotDAG is a lightweight tool that allows for testing for dbt node selectors against dbt project manifestson a local filesystem, stored on dbt Cloud, or located remotely. Once evaluated, this selection of nodescan be returned as a list of `unique_id`s, a JSON list of `unique_id`s, or as an SVG of the selection.**Table of Contents**- [But Why Though?](#butwhythough)- [Installation](#installation)- [License](#license)## But Why Though?Sometimes, it can be valuable while developing locally to have a means of quickly testing a selection string againstthe production version of a dbt project without fiddling with the generated docs site or compiling the currentproduction branch. Instead, HotDAG lets you quickly test and visualize your selection using your project's manifest,whether its on your local file system, stored remotely and accessible via URL, or hosted on dbt Cloud.## Installation```consolepip install hotdag```## Getting StartedThere are a few primary ways to use HotDAG. The most common way is to load a local manifest file and list theselection. This is roughly equivalent to using `dbt ls````consolehotdag --input file --file targets/manifest.json --select &quot;resource_type:source+&quot;source.example.example.usersmodel.example.stg_usersmodel.example.userstest.example.not_null_stg_users_idtest.example.unique_stg_users_id```HotDAG really shines, however, if you want to see a diagram of the selection.```consolehotdag --input file --output svg \    --file targets/manifest.json \    --select &quot;resource_type:source+&quot;```![graph.png](graph.png)Also of use is the ability to directly reference the latest manifest from your project's dbt Cloudjob. For example:```consolehotdag --input dbt_cloud --output svg \    --account-id 1234 --job-id 9876 \    --select &quot;resource_type:source+&quot;```## Roadmap- [ ] Styling the SVG output to better distinguish between node types.- [ ] Improved error handling for remote resource failures.- [ ] Add rational defaults (e.g. default input to `file` and `--file` to the targets directory)- [ ] Verify support for Selectors (as defined in yaml)## License`hotdag` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.</longdescription>
</pkgmetadata>