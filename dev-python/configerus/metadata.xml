<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ConfigerusDynamic and abstract configuration managementAn extendable plugin based configuration system, which allows abstract configprimitives to be loaded from various prioritized sources.  Config from higherpriority source plugins takes precedence over lower priority, with some simpledeep merging.Configerus makes config easy by:1. having a simple construction method2. allowing config to be pulled from a variatey of sources, such as json/yml in   file paths, or custom dicts3. using priorities, configerus allows config override, where some sources can   override others.4. deep configuration retrieval is easy using &quot;dot&quot; (one.two.three) notation to   search in config treesConfigerus offers a few tricks for complex use-cases1. you can apply simple validation (such as jsonschema) on retrieved config2. you can use a templating syntax to embed config from one source into another   at the time of retrieval3. you can use a templating syntax to direct configeraus to replace a string   file path with the contents of that file. Some files will be unmarshalled   for the replacement.Configerus makes advanced config management possible by:1. allowing you to define your own sources, formatters and validators and inject   them at run time2. allowing you to extend using setuptools entrypoints for advanced functionality   bootstrapping.## UsageConfigerus has a bit of steep learning curve in its approach and constructionbut it easy to use if it is set up correctly.A cheap and dirty example:If you have a folder `./config` that has to config files in it:- settings.yaml- values.json```import configerusfrom configerus.contrib.dict import PLUGIN_ID_SOURCE_DICTfrom configerus.contrib.files import PLUGIN_ID_SOURCE_PATHconfig = configerus.new_config()# tell configerus to read files from a pathconfig.add_source(PLUGIN_ID_SOURCE_PATH).set_path('./config')# add a dynamic dict to configerus, with a 90/100 priorityconfig.add_source(PLUGIN_ID_SOURCE_DICT, priority=90).set_data({    'values': {        'one': 'overriden from dict'    }})# load all of the settingssettings = config.load('settings')user_id = settings.get('user.id') # expects that settings had {user: {id: 'some value'}}# load some overriding valuesvalues = config.load('values')  # loads the value file, but overrides from the dictassert values.get('one') == 'overriden from dict'```</longdescription>
</pkgmetadata>