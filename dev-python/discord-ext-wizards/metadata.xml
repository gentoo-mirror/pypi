<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># discord-ext-wizardsA module for creating setup wizards easily.## Example UsageBelow is an example usage of discord-ext-wizards to create an interactive embed builder.```pythonimport discordfrom discord.ext import wizards, commandsclass EmbedBuilderWizard(wizards.Wizard):    def __init__(self):        self.result = {}        super().__init__(cleanup_after=False, timeout=30.0)    # register an action, so users can type &quot;stop&quot; or &quot;cancel&quot; to stop    # the wizard    @wizards.action(&quot;stop&quot;, &quot;cancel&quot;)    async def cancel_wizard(self, message):        await self.send(&quot;Wizard Cancelled.&quot;)        await self.stop(wizards.StopReason.CANCELLED)    @wizards.step(        &quot;What should the embed title be?&quot;,        position=1    )    async def embed_title(self, message):        self.result[&quot;title&quot;] = message.content    @wizards.step(        &quot;What should the embed description be?&quot;,        timeout=180.0,  # override the default timeout of 30        position=2,    )    async def embed_description(self, message):        length = len(message.content)        if length &gt; 2000:            await self.send(                f&quot;That description is {length} chars, but the maximum is 2000.&quot;            )            return await self.do_step(self.embed_description)  # redo the step        self.result[&quot;description&quot;] = message.content    @wizards.step(        &quot;Type 1 to add a field, or 2 to move on.&quot;,        position=3,    )    async def embed_fields(self, message):        self.result.setdefault(&quot;fields&quot;, [])        if message.content == &quot;2&quot;:            pass  # move on to the next step        elif message.content == &quot;1&quot;:            field_name = await self.do_step(self.embed_field_name)            field_value = await self.do_step(self.embed_field_value)            field_inline = await self.do_step(self.embed_field_inline)            self.result[&quot;fields&quot;].append(                (field_name, field_value, field_inline)            )            # repeat the step, so users can add multiple fields            return await self.do_step(self.embed_fields)        else:            await self.send(&quot;Please choose 1 or 2.&quot;)            return await self.do_step(self.embed_fields)    @wizards.step(        &quot;What should the field name be?&quot;,        call_internally=False,    )    async def embed_field_name(self, message):        return message.content    @wizards.step(        &quot;What should the field description be?&quot;,        call_internally=False,    )    async def embed_field_value(self, message):        return message.content    @wizards.step(        &quot;Should the field be inline?&quot;,        call_internally=False,    )    async def embed_field_inline(self, message):        if message.content.lower().startswith(&quot;y&quot;):            return True        elif message.content.lower().startswith(&quot;n&quot;):            return False        else:            await self.send(&quot;Please choose yes or no.&quot;)            return await self.do_step(self.embed_field_inline)bot = commands.Bot(&quot;!&quot;)@bot.command()async def embed(ctx):    wizard = EmbedBuilderWizard()    await wizard.start(ctx)    result = wizard.result    embed = discord.Embed(        title=result[&quot;title&quot;],        description=result[&quot;description&quot;],    )    for name, value, inline in result[&quot;fields&quot;]:        embed.add_field(name=name, value=value, inline=inline)    await ctx.send(embed=embed)bot.run(&quot;TOKEN&quot;)```See here for the output of the code: https://circuit.is-from.space/kox47xokm9a.mov</longdescription>
</pkgmetadata>