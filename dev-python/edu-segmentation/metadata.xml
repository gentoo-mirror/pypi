<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Final Year Project on EDU Segmentation:To improve EDU segmentation performance using Segbot. As Segbot has an encoder-decoder model architecture, we can replace bidirectional GRU encoder with generative pretraining models such as BART and T5. Evaluate the new model using the RST dataset by using few-shot based settings (e.g. 100 examples) to train the model, instead of using the full dataset.Segbot: &lt;br&gt;http://138.197.118.157:8000/segbot/ &lt;br&gt;https://www.ijcai.org/proceedings/2018/0579.pdf----### InstallationTo use the EDUSegmentation module, follow these steps:1. Import the `download` module to download all models:&lt;br&gt;```from edu_segmentation.download import download_modelsdownload_models()```2. Import the `edu_segmentation` module and its related classes&lt;br&gt;```from edu_segmentation.main import EDUSegmentation, ModelFactory, BERTUncasedModel, BERTCasedModel, BARTModel```### UsageThe edu_segmentation module provides an easy-to-use interface to perform EDU segmentation using different strategies and models. Follow these steps to use it:1. Create a segmentation strategy:&lt;br&gt;&lt;br&gt;You can choose between the default segmentation strategy or a conjunction-based segmentation strategy. &lt;br&gt;&lt;br&gt;&lt;strong&gt;Conjunction-based segmentation strategy:&lt;/strong&gt; After the text has been EDU-segmented, if there are conjunctions at the start or end of each segment, the conjunctions will be isolated as its own segment.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default segmentation strategy: &lt;/strong&gt; No post-processing occurs after the text has been EDU-segmented &lt;br&gt;&lt;br&gt;```from edu_segmentation.main import DefaultSegmentation, ConjunctionSegmentation```2. Create a model using the `ModelFactory`. &lt;br&gt;&lt;br&gt;Choose from BERT Uncased, BERT Cased, or BART models.```model_type = &quot;bert_uncased&quot;  # or &quot;bert_cased&quot;, &quot;bart&quot;model = ModelFactory.create_model(model_type)```3. create an instance of `EDUSegmentation` using the chosen model: &lt;br&gt;```edu_segmenter = EDUSegmentation(model)```4. Segment the text using the chosen strategy: &lt;br&gt;```text = &quot;Your input text here.&quot;granularity = &quot;conjunction_words&quot;  # or &quot;default&quot;conjunctions = [&quot;and&quot;, &quot;but&quot;, &quot;however&quot;]  # Customize conjunctions if neededdevice = 'cpu'  # Choose your device, e.g., 'cuda:0'segmented_output = edu_segmenter.run(text, granularity, conjunctions, device)```### ExampleHere's a simple example demonstrating how to use the edu_segmentation module:```from edu_segmentation.download import download_modelsfrom edu_segmentation.main import ModelFactory, EDUSegmentationdownload_models()# Create a BERT Uncased modelmodel = ModelFactory.create_model(&quot;bart&quot;) # or bert_cased or bert_uncased# Create an instance of EDUSegmentation using the modeledu_segmenter = EDUSegmentation(model)# Segment the text using the conjunction-based segmentation strategytext = &quot;The food is good, but the service is bad.&quot;granularity = &quot;conjunction_words&quot; # or defaultconjunctions = [&quot;and&quot;, &quot;but&quot;, &quot;however&quot;] # customise as neededdevice = 'cpu' # or cudasegmented_output = edu_segmenter.run(text, granularity, conjunctions, device)print(segmented_output)```</longdescription>
</pkgmetadata>