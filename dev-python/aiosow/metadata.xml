<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Pypi](https://img.shields.io/pypi/v/aiosow?color=white&amp;style=for-the-badge&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/aiosow/)![Downloads](https://img.shields.io/pypi/dd/aiosow?style=for-the-badge)[![Build](https://img.shields.io/github/actions/workflow/status/exorde-labs/aiosow/test.yml?style=for-the-badge)](https://github.com/exorde-labs/aiosow) [![Discord](https://img.shields.io/discord/1085963894641664203?label=Discord%20&amp;style=for-the-badge&amp;logo=discord&amp;logoColor=white&amp;color=white)](https://discord.gg/XNbmN9zumv)[![Documentation](https://img.shields.io/badge/-documentation-white?style=for-the-badge)](https://exorde-labs.github.io/aiosow)## **A**synchronous **I**/**O** **S**oftware **O**rchestration **W**orkstation`aiosow` is functionnal framework on top of an asynchronous task manager.&gt; It is meant to allow software architect shape how code should be used.- **Enforced Separation of Concerns** `aiosow` encourage a structure that separate implementations from the behavior.Defined boundaries for different parts of the codebase makes it easier to reason from buisness perspective.- **No framework friction &amp; Unparalled modularity**Implementation have no knoweledge of `aiosow`.Splitting `implementation` from their usage allows one to completely rewrite how it's differentelements are used, swap them, combine them.### Example`implementation.py````pythondef initialize_memory():    return { &quot;message&quot;: &quot;hello world !&quot; }def print_message(message):    print(message)````bindings.py````pythonsetup(initialize_memory)routine(1)(print_message)```## LicenseThis project is licensed under the [MIT License](https://opensource.org/license/mit/)</longdescription>
</pkgmetadata>