<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [wait-for-it](https://wait-for-it.readthedocs.io/en/latest/)[![PyPi release](https://img.shields.io/pypi/v/wait-for-it.svg)](https://pypi.org/project/wait-for-it/)[![PyPi versions](https://img.shields.io/pypi/pyversions/wait-for-it.svg)](https://pypi.org/project/wait-for-it/)[![Downloads](https://pepy.tech/badge/wait-for-it)](https://pepy.tech/project/wait-for-it)[![Documentation Status](https://readthedocs.org/projects/wait-for-it/badge/?version=latest)](https://wait-for-it.readthedocs.io/en/latest/?badge=latest)Wait for service(s) to be available before executing a command.&lt;br&gt;&lt;a href=&quot;https://blog.travismclarke.com/project/wait-for-it/&quot;&gt;  &lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;60%&quot; src=&quot;https://raw.githubusercontent.com/clarketm/wait-for-it/master/hero.png&quot; /&gt;&lt;/p&gt;&lt;/a&gt;`wait-for-it` is a script that will wait on the availability of one or more TCP services (i.e. `host:port`) before executing a user-defined command.It is useful for synchronizing the spin-up of interdependent services, such as linked docker containers.&gt; Since [v2.0.0](https://github.com/clarketm/wait-for-it/releases/tag/v2.0.0), `wait-for-it` will return the exit code of the executed command(s).[Check out the wait-for-it docs](https://wait-for-it.readthedocs.io/en/latest/)## Installation```bash$ pip install wait-for-it```## Demo[![usage demo](https://asciinema.org/a/351695.svg)](https://asciinema.org/a/351695)## Usage```textUsage: wait-for-it [OPTIONS] [COMMANDS]...  Wait for service(s) to be available before executing a command.Options:  -h, --help               Show this message and exit.  -v, --version            Show the version and exit.  -q, --quiet              Do not output any status messages  -p, --parallel           Test services in parallel rather than in serial  -t, --timeout seconds    Timeout in seconds, 0 for no timeout  [default: 15]  -s, --service host:port  Services to test, in one of the formats: ':port',                           'hostname:port', 'v4addr:port', '[v6addr]:port' or                           'https://...'```## ExamplesTest to see if we can access port 80 on www.google.com, and if it is available, echo the message **google is up**:```bash$ wait-for-it \--service www.google.com:80 \-- echo &quot;google is up&quot;``````text[*] Waiting 15 seconds for www.google.com:80[+] www.google.com:80 is available after 0 secondsgoogle is up```You can set your own timeout with the `-t` or `--timeout` option. Setting the timeout value to **0** will disable the timeout:```bash$ wait-for-it \--service www.google.com:80 \--timeout 0 \-- echo &quot;google is up&quot;``````text[*] Waiting for www.google.com:80 without a timeout[+] www.google.com:80 is available after 0 secondsgoogle is up```Multiple services can be tested by adding additional `-s` or `--service` options:```bash$ wait-for-it \--service www.google.com:80 \--service www.bing.com:80 \--service www.duckduckgo.com:80 \-- echo &quot;google, bing, and duckduckgo are up&quot;``````text[*] Waiting 15 seconds for www.google.com:80[+] www.google.com:80 is available after 0 seconds[*] Waiting 15 seconds for www.bing.com:80[+] www.bing.com:80 is available after 0 seconds[*] Waiting 15 seconds for www.duckduckgo.com:80[+] www.duckduckgo.com:80 is available after 0 secondsgoogle, bing, and duckduckgo are up```By adding the `-p` or `--parallel` option, `wait-for-it` can do the same in parallel rather than serial:```bash$ wait-for-it \--parallel \--service www.google.com:80 \--service www.bing.com:80 \--service www.duckduckgo.com:80 \-- echo &quot;google, bing, and duckduckgo are up&quot;``````text[*] Waiting 15 seconds for www.bing.com:80[*] Waiting 15 seconds for www.duckduckgo.com:80[*] Waiting 15 seconds for www.google.com:80[+] www.bing.com:80 is available after 0 seconds[+] www.duckduckgo.com:80 is available after 0 seconds[+] www.google.com:80 is available after 0 secondsgoogle, bing, and duckduckgo are up```Status message output can be suppressed with the `-q` or `--quiet` option:```bash$ wait-for-it \--quiet \--service www.google.com:80 \-- echo &quot;google is up&quot;``````textgoogle is up```## Related* [vishnubob/wait-for-it](https://github.com/vishnubob/wait-for-it)## LicenseMIT &amp;copy; [**Travis Clarke**](https://blog.travismclarke.com/),           [Sebastian Pipping](https://blog.hartwork.org/)</longdescription>
</pkgmetadata>