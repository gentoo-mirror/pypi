<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># xmltodict`xmltodict` is a Python module that makes working with XML feel like you are working with [JSON](http://docs.python.org/library/json.html), as in this [&quot;spec&quot;](http://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html):[![Build Status](https://travis-ci.com/martinblech/xmltodict.svg?branch=master)](https://travis-ci.com/martinblech/xmltodict)```python&gt;&gt;&gt; print(json.dumps(xmltodict.parse(&quot;&quot;&quot;...  &lt;mydocument has=&quot;an attribute&quot;&gt;...    &lt;and&gt;...      &lt;many&gt;elements&lt;/many&gt;...      &lt;many&gt;more elements&lt;/many&gt;...    &lt;/and&gt;...    &lt;plus a=&quot;complex&quot;&gt;...      element as well...    &lt;/plus&gt;...  &lt;/mydocument&gt;...  &quot;&quot;&quot;), indent=4)){    &quot;mydocument&quot;: {        &quot;@has&quot;: &quot;an attribute&quot;,         &quot;and&quot;: {            &quot;many&quot;: [                &quot;elements&quot;,                 &quot;more elements&quot;            ]        },         &quot;plus&quot;: {            &quot;@a&quot;: &quot;complex&quot;,             &quot;#text&quot;: &quot;element as well&quot;        }    }}```## Namespace supportBy default, `xmltodict` does no XML namespace processing (it just treats namespace declarations as regular node attributes), but passing `process_namespaces=True` will make it expand namespaces for you:```python&gt;&gt;&gt; xml = &quot;&quot;&quot;... &lt;root xmlns=&quot;http://defaultns.com/&quot;...       xmlns:a=&quot;http://a.com/&quot;...       xmlns:b=&quot;http://b.com/&quot;&gt;...   &lt;x&gt;1&lt;/x&gt;...   &lt;a:y&gt;2&lt;/a:y&gt;...   &lt;b:z&gt;3&lt;/b:z&gt;... &lt;/root&gt;... &quot;&quot;&quot;&gt;&gt;&gt; xmltodict.parse(xml, process_namespaces=True) == {...     'http://defaultns.com/:root': {...         'http://defaultns.com/:x': '1',...         'http://a.com/:y': '2',...         'http://b.com/:z': '3',...     }... }True```It also lets you collapse certain namespaces to shorthand prefixes, or skip them altogether:```python&gt;&gt;&gt; namespaces = {...     'http://defaultns.com/': None, # skip this namespace...     'http://a.com/': 'ns_a', # collapse &quot;http://a.com/&quot; -&gt; &quot;ns_a&quot;... }&gt;&gt;&gt; xmltodict.parse(xml, process_namespaces=True, namespaces=namespaces) == {...     'root': {...         'x': '1',...         'ns_a:y': '2',...         'http://b.com/:z': '3',...     },... }True```## Streaming mode`xmltodict` is very fast ([Expat](http://docs.python.org/library/pyexpat.html)-based) and has a streaming mode with a small memory footprint, suitable for big XML dumps like [Discogs](http://discogs.com/data/) or [Wikipedia](http://dumps.wikimedia.org/):```python&gt;&gt;&gt; def handle_artist(_, artist):...     print(artist['name'])...     return True&gt;&gt;&gt; &gt;&gt;&gt; xmltodict.parse(GzipFile('discogs_artists.xml.gz'),...     item_depth=2, item_callback=handle_artist)A Perfect CircleFantômasKing CrimsonChris Potter...```It can also be used from the command line to pipe objects to a script like this:```pythonimport sys, marshalwhile True:    _, article = marshal.load(sys.stdin)    print(article['title'])``````sh$ bunzip2 enwiki-pages-articles.xml.bz2 | xmltodict.py 2 | myscript.pyAccessibleComputingAnarchismAfghanistanHistoryAfghanistanGeographyAfghanistanPeopleAfghanistanCommunicationsAutism...```Or just cache the dicts so you don't have to parse that big XML file again. You do this only once:```sh$ bunzip2 enwiki-pages-articles.xml.bz2 | xmltodict.py 2 | gzip &gt; enwiki.dicts.gz```And you reuse the dicts with every script that needs them:```sh$ gunzip enwiki.dicts.gz | script1.py$ gunzip enwiki.dicts.gz | script2.py...```## RoundtrippingYou can also convert in the other direction, using the `unparse()` method:```python&gt;&gt;&gt; mydict = {...     'response': {...             'status': 'good',...             'last_updated': '2014-02-16T23:10:12Z',...     }... }&gt;&gt;&gt; print(unparse(mydict, pretty=True))&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;response&gt;&lt;status&gt;good&lt;/status&gt;&lt;last_updated&gt;2014-02-16T23:10:12Z&lt;/last_updated&gt;&lt;/response&gt;```Text values for nodes can be specified with the `cdata_key` key in the python dict, while node properties can be specified with the `attr_prefix` prefixed to the key name in the python dict. The default value for `attr_prefix` is `@` and the default value for `cdata_key` is `#text`.```python&gt;&gt;&gt; import xmltodict&gt;&gt;&gt; &gt;&gt;&gt; mydict = {...     'text': {...         '@color':'red',...         '@stroke':'2',...         '#text':'This is a test'...     }... }&gt;&gt;&gt; print(xmltodict.unparse(mydict, pretty=True))&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;text stroke=&quot;2&quot; color=&quot;red&quot;&gt;This is a test&lt;/text&gt;```Lists that are specified under a key in a dictionary use the key as a tag for each item. But if a list does have a parent key, for example if a list exists inside another list, it does not have a tag to use and the items are converted to a string as shown in the example below.  To give tags to nested lists, use the `expand_iter` keyword argument to provide a tag as demonstrated below. Note that using `expand_iter` will break roundtripping.```python&gt;&gt;&gt; mydict = {...     &quot;line&quot;: {...         &quot;points&quot;: [...             [1, 5],...             [2, 6],...         ]...     }... }&gt;&gt;&gt; print(xmltodict.unparse(mydict, pretty=True))&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;line&gt;        &lt;points&gt;[1, 5]&lt;/points&gt;        &lt;points&gt;[2, 6]&lt;/points&gt;&lt;/line&gt;&gt;&gt;&gt; print(xmltodict.unparse(mydict, pretty=True, expand_iter=&quot;coord&quot;))&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;line&gt;        &lt;points&gt;                &lt;coord&gt;1&lt;/coord&gt;                &lt;coord&gt;5&lt;/coord&gt;        &lt;/points&gt;        &lt;points&gt;                &lt;coord&gt;2&lt;/coord&gt;                &lt;coord&gt;6&lt;/coord&gt;        &lt;/points&gt;&lt;/line&gt;```## Ok, how do I get it?### Using pypiYou just need to```sh$ pip install xmltodict```### RPM-based distro (Fedora, RHEL, …)There is an [official Fedora package for xmltodict](https://apps.fedoraproject.org/packages/python-xmltodict).```sh$ sudo yum install python-xmltodict```### Arch LinuxThere is an [official Arch Linux package for xmltodict](https://www.archlinux.org/packages/community/any/python-xmltodict/).```sh$ sudo pacman -S python-xmltodict```### Debian-based distro (Debian, Ubuntu, …)There is an [official Debian package for xmltodict](https://tracker.debian.org/pkg/python-xmltodict).```sh$ sudo apt install python-xmltodict```### FreeBSDThere is an [official FreeBSD port for xmltodict](https://svnweb.freebsd.org/ports/head/devel/py-xmltodict/).```sh$ pkg install py36-xmltodict```### openSUSE/SLE (SLE 15, Leap 15, Tumbleweed)There is an [official openSUSE package for xmltodict](https://software.opensuse.org/package/python-xmltodict).```sh# Python2$ zypper in python2-xmltodict# Python3$ zypper in python3-xmltodict```</longdescription>
</pkgmetadata>