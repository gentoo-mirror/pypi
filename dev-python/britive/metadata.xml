<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Britive Python SDKPure Python implementation for interacting with the Britive API.This package aims to wrap the Britive API for use in Python. For the most part it is a simple wrapper (sendingpotentially bad parameters to the API) but there are a couple of places where liberties were taken to enhancethe developer/end user experience. Some APIs may also be combined into one Python method with a parameter if andwhere it makes more sense to present the API that way.This package supports Python 3.7 and higher.## Installation~~~bashpip install britive~~~Or execute one of the following commands if you wish to pull directly from the Github repo instead of PyPi. Or navigate to Releases and use the URL of the tarball release that is needed, if not the lastest.~~~bashpip install $(curl -s https://api.github.com/repos/britive/python-sdk/releases/latest | jq -r '.assets[] | select(.content_type == &quot;application/x-gzip&quot;) | .browser_download_url')ORpip install $(curl -s https://api.github.com/repos/britive/python-sdk/releases/latest | grep &quot;browser_download_url.*.tar.gz&quot; | cut -d : -f 2,3 | tr -d \&quot;)~~~## DocumentationEach public method is documented with a docstring which provides details on what the method does, the parameters themethod accepts, and details about what is returned from the method.Official API documentation can be found at https://docs.britive.com/v1/docs/en/overview-britive-apis.## AuthenticationAuthentication is handled solely via API tokens. The token must be provided in one of two methods.* Passed directly into the class constructor. * Injected as an environment variable into the execution context where this package is being run. The   environment variable name must be BRITIVE_API_TOKEN.As of v2.5.0 a `Bearer` token can be provided as well. A `Bearer` token is generated as part of an interactivelogin process and is temporary in nature. This change is to allow for an upcoming Python CLI application.All Britive API tokens are authenticated against a specific Britive tenant. The name of the tenant must be presentedin one of two methods.* Passed directly into the `Britive` class constructor.* Injected as an environment variable into the execution context where this package is being run. The   environment variable name must be `BRITIVE_TENANT`.In order to obtain the tenant name, reference the Britive URL used to log into the UI. If the URL ishttps://example.britive-app.com then the tenant name will be `example`.## PaginationAll pagination is handled by the package. The caller will never have to deal with paginated responses.## Assumptions* The caller has access to an active Britive tenant.* The caller has been granted an API token and/or has the ability to generate an API token. This can be either for    a User or Service Identity.* No assumptions are made about the operating system or file system. Nothing is persisted to disk. The end user     must persist responses to disk if and when that is required.## Resource CoverageThe following Britive resources are supported with full CRUDL operations where appropriate, and additional actionswhere they exist.* Accounts* API Tokens (for Users)* Applications* Audit Logs* Environment Groups* Environment* Groups (associated with an application/environment)* Accounts (associated with an application/environment)* Permissions (associated with an application/environment)* Identity Attributes* Identity Providers* My Access (access granted to the given identity (user or service))* My Secrets (access granted to the given identity (user or service))* Notifications* Profiles* Reports* SAML Settings* Scans* Security Policies* Service Identities* Service Identity Tokens* Tags (aka User Tags)* Task Services* Tasks* Users## ProxiesUnder the covers, python `requests` is being used to communicate with the Britive API. As such, any functionalityof `requests` can be used, including setting an HTTP proxy. HTTP proxies will be set via environment variables.* HTTP_PROXY* HTTPS_PROXY* NO_PROXY* http_proxy* https_proxy* no_proxyStandard HTTP proxy URLs should be utilized. Examples below.* Unauthenticated Proxy: `http://internalproxy.domain.com:8080`* Authenticated Proxy: `http://user:pass@internalproxy.domain.com:8080`## Custom TLS Certificates Under the covers, python `requests` is being used to communicate with the Britive API. As such, any functionalityof `requests` can be used, including setting custom TLS certificates. Certificate bundles will be set via environment variables.* REQUESTS_CA_BUNDLE* CURL_CA_BUNDLE (used as a fallback)The values of these environment variables must be a path to a directory of certificates or a specific certificate. Example...`/path/to/certfile`## Examples### ImportingThis should be the only class that is required for import.~~~pythonfrom britive.britive import Britive~~~Optionally the various exceptions that this package raises can be imported as well.~~~pythonfrom britive import exceptions~~~Then a specific exception could be referenced as ~~~pythontry:    something()except exceptions.TokenMissingError():    handle()~~~### List All Users~~~pythonfrom britive.britive import Britiveimport jsonbritive = Britive()  # source needed data from environment variablesprint(json.dumps(britive.users.list(), indent=2, default=str))~~~### Provide Needed Authentication Information in the Script~~~pythonfrom britive.britive import Britiveimport jsonbritive = Britive(tenant='example', token='...') # source token and tenant locally (not from environment variables)print(json.dumps(britive.users.list(), indent=2, default=str))~~~### Create API Token for a Service Identity~~~pythonfrom britive.britive import Britiveimport jsonbritive = Britive()  # source needed data from environment variablesprint(json.dumps(britive.service_identity_tokens.create(service_identity_id='abc123'), indent=2, default=str))~~~### Run a Report (JSON and CSV output)~~~pythonfrom britive.britive import Britiveimport jsonbritive = Britive()  # source needed data from environment variablesprint(json.dumps(britive.reports.run(report_id='abc123'), indent=2, default=str))with open('file.csv', 'w') as f:    f.write(britive.reports.run(report_id='abc123', csv=True))~~~### Create a Profile Policy (profiles v2/enhanced profiles)The commands below will create a policy on a profile that allows `user@domain.com` to check out the profile but onlyif `approver@domain.com` approves that request within 10 minutes.~~~pythonfrom britive.britive import Britiveb = Britive()policy = b.profiles.policies.build(    name='example',    users=['user@domain.com'],    approval_notification_medium='Email',    approver_users=['approver@domain.com'],    time_to_approve=10)b.profiles.policies.create(profile_id='...', policy=policy)~~~</longdescription>
</pkgmetadata>