<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cfx-addressConflux base32 address utilitiesFull documentation -&gt; https://conflux-fans.github.io/cfx-address/cfx_address.html#module-cfx_address## installation```bashpip install cfx-address```### use Base32Address class methods```pythonfrom cfx_address import Base32Address```#### validate a base32 address``` pythonBase32Address.is_valid_base32(&quot;0x1ecde7223747601823f7535d7968ba98b4881e09&quot;) # FalseBase32Address.validate(&quot;0x1ecde7223747601823f7535d7968ba98b4881e09&quot;)# will raise an exception```#### encode and decode``` python# encode hex address to base32Base32Address.encode_base32(&quot;0x1ecde7223747601823f7535d7968ba98b4881e09&quot;, network_id=1)#'cfxtest:aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4'# decode base32 addressBase32Address.decode(&quot;cfxtest:aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4&quot;)# result:# {'network_id': 1,# 'hex_address': '0x1ecde7223747601823f7535d7968ba98b4881e09',# 'address_type': 'user'}```#### utilities```pythonaddress_str = &quot;cfxtest:aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4&quot;address_verbose_str = &quot;CFXTEST:TYPE.USER:AATP533CG7D0AGBD87KZ48NJ1MPNKCA8BE1RZ695J4&quot;assert Base32Address.equals(address_str, address_verbose_str)Base32Address.calculate_mapped_evm_space_address(address_str)Base32Address.zero_address(network_id=1)Base32Address.shorten_base32_address(address_str)```### Base32Address instances#### instance initialization```pythonaddress = Base32Address(&quot;cfxtest:aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4&quot;)# 'cfxtest:aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4'# Base32Address inherits from strassert isinstance(address, str)# init from hex address, in which case network_id is requiredBase32Address(&quot;0x1ecde7223747601823f7535d7968ba98b4881e09&quot;, network_id=1029)# 'cfx:aatp533cg7d0agbd87kz48nj1mpnkca8be7ggp3vpu'# change a base32 address to other networkBase32Address(address, network_id=1029)# 'cfx:aatp533cg7d0agbd87kz48nj1mpnkca8be7ggp3vpu'# verbose option defaults to FalseBase32Address(address, verbose=True)# 'CFXTEST:TYPE.USER:AATP533CG7D0AGBD87KZ48NJ1MPNKCA8BE1RZ695J4'```#### __eq__ and properties```python# __eq__ is implemented, address in same network is treated equalassert address == &quot;cfxtest:aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4&quot;assert address == &quot;CFXTEST:TYPE.USER:AATP533CG7D0AGBD87KZ48NJ1MPNKCA8BE1RZ695J4&quot;assert &quot;CFXTEST:TYPE.USER:AATP533CG7D0AGBD87KZ48NJ1MPNKCA8BE1RZ695J4&quot; == addressassert &quot;cfxtest:aatp533cg7d0agbd87kz48nj1mpnkca8be1rz695j4&quot; == address# address in different network is not equalmainnet_address = Base32Address(address, 1029)assert mainnet_address == &quot;cfx:aatp533cg7d0agbd87kz48nj1mpnkca8be7ggp3vpu&quot;assert not address == mainnet_address# properties[    address.address_type,    address.network_id,    address.hex_address,    address.verbose_address,    address.short,    address.mapped_evm_space_address]# ['user',#  1,#  '0x1ECdE7223747601823f7535d7968Ba98b4881E09',#  'CFXTEST:TYPE.USER:AATP533CG7D0AGBD87KZ48NJ1MPNKCA8BE1RZ695J4',#  'cfxtest:aat...95j4',#  '0x349f086998cF4a0C5a00b853a0E93239D81A97f6',#  ]```</longdescription>
</pkgmetadata>