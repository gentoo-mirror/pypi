<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Tests](https://github.com/netascode/iac-validate/actions/workflows/test.yml/badge.svg)](https://github.com/netascode/iac-validate/actions/workflows/test.yml)![Python Support](https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9%20%7C%203.10%20%7C%203.11-informational &quot;Python Support: 3.7, 3.8, 3.9, 3.10, 3.11&quot;)# iac-validateA CLI tool to perform syntactic and semantic validation of YAML files.```$ iac-validate -hUsage: iac-validate [OPTIONS] [PATHS]...  A CLI tool to perform syntactic and semantic validation of YAML files.Options:  --version              Show the version and exit.  -v, --verbosity LVL    Either CRITICAL, ERROR, WARNING, INFO or DEBUG  -s, --schema FILE      Path to schema file. (optional, default:                         '.schema.yaml', env: IAC_VALIDATE_SCHEMA)  -r, --rules DIRECTORY  Path to semantic rules. (optional, default:                         '.rules/', env: IAC_VALIDATE_RULES)  -o, --output FILE      Write merged content from YAML files to a new YAML                         file. (optional, env: IAC_VALIDATE_OUTPUT)  --non-strict           Accept unexpected elements in YAML files.  -h, --help             Show this message and exit.```Syntactic validation is done by basic YAML syntax validation (e.g., indentation) and by providing a [Yamale](https://github.com/23andMe/Yamale) schema and validating all YAML files against that schema. Semantic validation is done by providing a set of rules (implemented in Python) which are then validated against the YAML data. Every rule is implemented as a Python class and should be placed in a `.py` file located in the `--rules` path.Each `.py` file must have a single class named `Rule`. This class must have the following attributes: `id`, `description` and `severity`. It must implement a `classmethod()` named `match` that has a single function argument `data` which is the data read from all YAML files. It should return a list of strings, one for each rule violation with a descriptive message. A sample rule can be found below.```pythonclass Rule:    id = &quot;101&quot;    description = &quot;Verify child naming restrictions&quot;    severity = &quot;HIGH&quot;    @classmethod    def match(cls, data):        results = []        try:            for child in data[&quot;root&quot;][&quot;children&quot;]:                if child[&quot;name&quot;] == &quot;FORBIDDEN&quot;:                    results.append(&quot;root.children.name&quot; + &quot; - &quot; + str(child[&quot;name&quot;]))        except KeyError:            pass        return results```## InstallationPython 3.7+ is required to install `iac-validate`. Don't have Python 3.7 or later? See [Python 3 Installation &amp; Setup Guide](https://realpython.com/installing-python/).`iac-validate` can be installed in a virtual environment using `pip`:```pip install iac-validate```## Pre-Commit HookThe tool can be integrated via a [pre-commit](https://pre-commit.com/) hook with the following config (`.pre-commit-config.yaml`), assuming the default values (`.schema.yaml`, `.rules/`) are appropriate:```repos:  - repo: https://github.com/netascode/iac-validate    rev: v0.1.6    hooks:      - id: iac-validate```In case the schema or validation rules are located somewhere else the required CLI arguments can be added like this:```repos:  - repo: https://github.com/netascode/iac-validate    rev: v0.1.6    hooks:      - id: iac-validate        args:          - '-s'          - 'my_schema.yaml'          - '-r'          - 'rules/'```## Ansible Vault SupportValues can be encrypted using [Ansible Vault](https://docs.ansible.com/ansible/latest/user_guide/vault.html). This requires Ansible (`ansible-vault` command) to be installed and the following two environment variables to be defined:```export ANSIBLE_VAULT_ID=devexport ANSIBLE_VAULT_PASSWORD=Password123````ANSIBLE_VAULT_ID` is optional, and if not defined will be omitted.## Additional Tags### Reading Environment VariablesThe `!env` YAML tag can be used to read values from environment variables.```yamlroot:  name: !env VAR_NAME```</longdescription>
</pkgmetadata>