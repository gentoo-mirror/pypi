<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>English | [简体中文](README-CN.md)![](https://aliyunsdk-pages.alicdn.com/icons/AlibabaCloud.svg)# Alibaba Cloud Credentials for Python2## Installation- **Install with pip**Python SDK uses a common package management tool named `pip`. If pip is not installed, see the [pip user guide](https://pip.pypa.io/en/stable/installing/ &quot;pip User Guide&quot;) to install pip.```bash# Install the alibabacloud_credentials_py2pip install alibabacloud_credentials_py2```## UsageBefore you begin, you need to sign up for an Alibaba Cloud account and retrieve your [Credentials](https://usercenter.console.aliyun.com/#/manage/ak).### Credential Type#### access_keySetup access_key credential through [User Information Management][ak], it have full authority over the account, please keep it safe. Sometimes for security reasons, you cannot hand over a primary account AccessKey with full access to the developer of a project. You may create a sub-account [RAM Sub-account][ram] , grant its [authorization][permissions]，and use the AccessKey of RAM Sub-account.```pythonfrom alibabacloud_credentials.client import Clientfrom alibabacloud_credentials.models import Configconfig = Config(    type='access_key',                    # credential type    access_key_id='accessKeyId',          # AccessKeyId    access_key_secret='accessKeySecret',  # AccessKeySecret)cred = Client(config)access_key_id = cred.get_access_key_id()access_key_secret = cred.get_access_key_secret()cred_type = cred.get_type()```#### stsCreate a temporary security credential by applying Temporary Security Credentials (TSC) through the Security Token Service (STS).```pythonfrom alibabacloud_credentials.client import Clientfrom alibabacloud_credentials.models import Configconfig = Config(    type='sts',                           # credential type    access_key_id='accessKeyId',          # AccessKeyId    access_key_secret='accessKeySecret',  # AccessKeySecret    security_token='securityToken'        # STS Token)cred = Client(config)access_key_id = cred.get_access_key_id()access_key_secret = cred.get_access_key_secret()security_token = cred.get_security_token()cred_type = cred.get_type()```#### ram_role_arnBy specifying [RAM Role][RAM Role], the credential will be able to automatically request maintenance of STS Token. If you want to limit the permissions([How to make a policy][policy]) of STS Token, you can assign value for `Policy`.```pythonfrom alibabacloud_credentials.client import Clientfrom alibabacloud_credentials.models import Configconfig = Config(    type='ram_role_arn',                  # credential type    access_key_id='accessKeyId',          # AccessKeyId    access_key_secret='accessKeySecret',  # AccessKeySecret    security_token='securityToken',       # STS Token    role_arn='roleArn',                   # Format: acs:ram::USER_ID:role/ROLE_NAME    role_session_name='roleSessionName',  # Role Session Name    policy='policy',                      # Not required, limit the permissions of STS Token    role_session_expiration=3600          # Not required, limit the Valid time of STS Token)cred = Client(config)access_key_id = cred.get_access_key_id()access_key_secret = cred.get_access_key_secret()security_token = cred.get_security_token()cred_type = cred.get_type()```#### OIDC Role ARNBy specifying [OIDC Role][OIDC Role], the credential will be able to automatically request maintenance of STS Token. If you want to limit the permissions([How to make a policy][policy]) of STS Token, you can assign value for `Policy`.```pythonfrom alibabacloud_credentials.client import Clientfrom alibabacloud_credentials.models import Configconfig = Config(    type='oidc_role_arn',                  # credential type    access_key_id='accessKeyId',          # AccessKeyId    access_key_secret='accessKeySecret',  # AccessKeySecret    security_token='securityToken',       # STS Token    role_arn='roleArn',                   # Format: acs:ram::USER_ID:role/ROLE_NAME    oidc_provider_arn='oidcProviderArn',  # Format: acs:ram::USER_Id:oidc-provider/OIDC Providers    oidc_token_file_path='/Users/xxx/xxx',# oidc_token_file_path can be replaced by setting environment variable: ALIBABA_CLOUD_OIDC_TOKEN_FILE    role_session_name='roleSessionName',  # Role Session Name    policy='policy',                      # Not required, limit the permissions of STS Token    role_session_expiration=3600          # Not required, limit the Valid time of STS Token)cred = Client(config)access_key_id = cred.get_access_key_id()access_key_secret = cred.get_access_key_secret()security_token = cred.get_security_token()cred_type = cred.get_type()```#### ecs_ram_roleBy specifying the role name, the credential will be able to automatically request maintenance of STS Token.```pythonfrom alibabacloud_credentials.client import Clientfrom alibabacloud_credentials.models import Configconfig = Config(    type='ecs_ram_role',      # credential type    role_name='roleName'      # `roleName` is optional. It will be retrieved automatically if not set. It is highly recommended to set it up to reduce requests.)cred = Client(config)access_key_id = cred.get_access_key_id()access_key_secret = cred.get_access_key_secret()security_token = cred.get_security_token()cred_type = cred.get_type()```#### rsa_key_pairBy specifying the public key ID and the private key file, the credential will be able to automatically request maintenance of the AccessKey before sending the request. Only Japan station is supported.```pythonfrom alibabacloud_credentials.client import Clientfrom alibabacloud_credentials.models import Configconfig = Config(    type='rsa_key_pair',                  # credential type    private_key_file='privateKeyFile',    # The file path to store the PrivateKey    public_key_id='publicKeyId'           # PublicKeyId of your account)cred = Client(config)access_key_id = cred.get_access_key_id()access_key_secret = cred.get_access_key_secret()security_token = cred.get_security_token()cred_type = cred.get_type()```#### bearerIf credential is required by the Cloud Call Centre (CCC), please apply for Bearer Token maintenance by yourself.```pythonfrom alibabacloud_credentials.client import Clientfrom alibabacloud_credentials.models import Configconfig = Config(    type='bearer',                        # credential type    bearer_token='bearerToken',           # BearerToken)cred = Client(config)access_key_id = cred.get_access_key_id()access_key_secret = cred.get_access_key_secret()security_token = cred.get_security_token()cred_type = cred.get_type()```### Use the default credential provider chain```pythonfrom alibabacloud_credentials.client import Client as CredClientfrom alibabacloud_ocr20191230.client import Client as OcrClientfrom alibabacloud_ocr20191230.models import GetAsyncJobResultRequestfrom alibabacloud_tea_rpc.models import Configfrom alibabacloud_tea_util.models import RuntimeOptionscred = CredClient()config = Config(credential=cred)client = OcrClient(config)request = GetAsyncJobResultRequest(    job_id='&lt;job_id&gt;')runtime_options = RuntimeOptions()response = client.get_async_job_result(request, runtime_options)```The default credential provider chain looks for available credentials, with following order:1.Environment CredentialsLook for environment credentials in environment variable. If the `ALIBABA_CLOUD_ACCESS_KEY_ID` and `ALIBABA_CLOUD_ACCESS_KEY_SECRET` environment variables are defined and are not empty, the program will use them to create default credentials.2.Credentials FileIf there is `~/.alibabacloud/credentials default file (Windows shows C:\Users\USER_NAME\.alibabacloud\credentials)`, the program automatically creates credentials with the specified type and name. The default file is not necessarily exist, but a parse error will throw an exception. The name of configuration item is lowercase.This configuration file can be shared between different projects and between different tools. Because it is outside of the project and will not be accidentally committed to the version control. The path to the default file can be modified by defining the `ALIBABA_CLOUD_CREDENTIALS_FILE` environment variable. If not configured, use the default configuration `default`. You can also set the environment variables `ALIBABA_CLOUD_PROFILE` to use the configuration.```ini[default]                          # default settingenable = true                      # Enable，Enabled by default if this option is not presenttype = access_key                  # Certification type: access_keyaccess_key_id = foo                # Keyaccess_key_secret = bar            # Secret[client1]                          # configuration that is named as `client1`type = ecs_ram_role                # Certification type: ecs_ram_rolerole_name = EcsRamRoleTest         # Role Name[client2]                          # configuration that is named as `client2`enable = false                     # Disabletype = ram_role_arn                # Certification type: ram_role_arnregion_id = cn-testpolicy = test                      # optional Specify permissionsaccess_key_id = fooaccess_key_secret = barrole_arn = role_arnrole_session_name = session_name   # optional[client3]                          # configuration that is named as `client3`type = rsa_key_pair                # Certification type: rsa_key_pairpublic_key_id = publicKeyId        # Public Key IDprivate_key_file = /your/pk.pem    # Private Key file[client3]                          # configuration that is named as `client3`type = rsa_key_pair                # Certification type: rsa_key_pairpublic_key_id = publicKeyId        # Public Key IDprivate_key_file = /your/pk.pem    # Private Key file[client4]                          # configuration that is named as `client4`enable = false                     # Disabletype = oidc_role_arn               # Certification type: oidc_role_arnregion_id = cn-test                 policy = test                      # optional Specify permissionsaccess_key_id = foo                # optionalaccess_key_secret = bar            # optionalrole_arn = role_arnoidc_provider_arn = oidc_provider_arnoidc_token_file_path = /xxx/xxx    # can be replaced by setting environment variable: ALIBABA_CLOUD_OIDC_TOKEN_FILE              role_session_name = session_name   # optional```3.Instance RAM RoleIf the environment variable `ALIBABA_CLOUD_ECS_METADATA` is defined and not empty, the program will take the value of the environment variable as the role name and request &lt;http://100.100.100.200/latest/meta-data/ram/security-credentials/&gt; to get the temporary Security credentials.## Issues[Opening an Issue](https://github.com/aliyun/credentials-python2/issues/new), Issues not conforming to the guidelines may be closed immediately.## ChangelogDetailed changes for each release are documented in the [release notes](./ChangeLog.md).## References* [Latest Release](https://github.com/aliyun/credentials-python2)## License[Apache-2.0](http://www.apache.org/licenses/LICENSE-2.0)Copyright (c) 2009-present, Alibaba Cloud All rights reserved.</longdescription>
</pkgmetadata>