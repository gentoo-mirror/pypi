<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |codecov| |Using Black Formatting| |Python 3.6+|.. |Build Status|  image:: https://github.com/HuttleyLab/scitrack/workflows/CI/badge.svg?branch=develop :target: https://github.com/HuttleyLab/scitrack/actions?workflow=CI :alt: CI Status.. |codecov|  image:: https://codecov.io/gh/HuttleyLab/scitrack/branch/develop/graph/badge.svg  :target: https://codecov.io/gh/HuttleyLab/scitrack.. |Using Black Formatting| image:: https://img.shields.io/badge/code%20style-black-000000.svg.. |Python 3.6+| image:: https://img.shields.io/badge/python-3.6+-blue.svg    :target: https://www.python.org/downloads/release/python-360/##################About ``scitrack``##################One of the critical challenges in scientific analysis is to track all the elements involved. This includes the arguments provided to a specific application (including default values), input data files referenced by those arguments and output data generated by the application. In addition to this, tracking a minimal set of system specific information.``scitrack`` is a simple package aimed at researchers writing scripts, or more substantial scientific software, to support the tracking of scientific computation.  The package provides elementary functionality to support logging. The primary capabilities concern generating checksums on input and output files and facilitating logging of the computational environment.To see some projects using ``scitrack``, see the &quot;Used by&quot; link at the top of the `project GitHub page &lt;https://github.com/HuttleyLab/scitrack&gt;`_.**********Installing**********For the released version::    $ pip install scitrackFor the very latest version::    $ pip install git+https://github.com/HuttleyLab/scitrackOr clone it::    $ git clone git@github.com:HuttleyLab/scitrack.gitAnd then install::    $ pip install ~/path/to/scitrack*****************``CachingLogger``*****************There is a single object provided by ``scitrack``, ``CachingLogger``. This object is basically a wrapper around the Python standard library ``logging`` module. On invocation, ``CachingLogger`` captures basic information regarding the system and the command line call that was made to invoke the application.In addition, the class provides convenience methods for logging both the path and the md5 hexdigest checksum [1]_ of input/output files. A method is also provided for producing checksums of text data. The latter is useful for the case when data are from a stream or a database, for instance.All logging calls are cached until a path for a logfile is provided. The logger can also, optionally, create directories.**********************************Simple instantiation of the logger**********************************Creating the logger. Setting ``create_dir=True`` means on creation of the logfile, the directory path will be created also... code:: python    from scitrack import CachingLogger    LOGGER = CachingLogger(create_dir=True)    LOGGER.log_file_path = &quot;somedir/some_path.log&quot;The last assignment triggers creation of ``somedir/some_path.log``... warning::    Once set, a loggers ``.log_file_path`` cannot be changed.******************************************Capturing a programs arguments and options******************************************``scitrack`` will write the contents of ``sys.argv`` to the log file, prefixed by ``command_string``. However, this only captures arguments specified on the command line. Tracking the value of optional arguments not specified, which may have default values, is critical to tracking the full command set. Doing this is now easy with the simple statement ``LOGGER.log_args()``. The logger can also record the versions of named dependencies.Here's one approach to incorporating ``scitrack`` into a command line application built using the ``click`` `command line interface library &lt;http://click.pocoo.org/&gt;`_. Below we create a simple ``click`` app and capture the required and optional argument values... note::    ``LOGGER.log_args()`` should be called immediately after the function definition, or after &quot;true&quot; default values have been configured... code:: python    import click    from scitrack import CachingLogger    LOGGER = CachingLogger()    @click.command()    @click.option(&quot;-i&quot;, &quot;--infile&quot;, type=click.Path(exists=True))    @click.option(&quot;-t&quot;, &quot;--test&quot;, is_flag=True, help=&quot;Run test.&quot;)    def main(infile, test):        # capture the local variables, at this point just provided arguments        LOGGER.log_args()        LOGGER.log_versions(&quot;numpy&quot;)        LOGGER.input_file(infile)        LOGGER.log_file_path = &quot;some_path.log&quot;    if __name__ == &quot;__main__&quot;:        main()The ``CachingLogger.write()`` method takes a message and a label. All other logging methods wrap ``log_message()``, providing a specific label. For instance, the method ``input_file()`` writes out two lines in the log.- ``input_file_path``, the absolute path to the intput file- ``input_file_path md5sum``, the hex digest of the file``output_file()`` behaves analogously. An additional method ``text_data()`` is useful for other data input/output sources (e.g. records from a database). For this to have value for arbitrary data types requires a systematic approach to ensuring the text conversion is robust across platforms.The ``log_args()`` method captures all local variables within a scope.The ``log_versions()`` method captures versions for the current file and that of a list of named packages, e.g. ``LOGGER.log_versions(['numpy', 'sklearn'])``.Some sample output==================::    2020-05-25 13:32:07Eratosthenes:98447INFOsystem_details : system=Darwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64    2020-05-25 13:32:07Eratosthenes:98447INFOpython : 3.8.2    2020-05-25 13:32:07Eratosthenes:98447INFOuser : gavin    2020-05-25 13:32:07Eratosthenes:98447INFOcommand_string : ./demo.py -i /Users/gavin/repos/SciTrack/tests/sample-lf.fasta    2020-05-25 13:32:07Eratosthenes:98447INFOparams : {'infile': '/Users/gavin/repos/SciTrack/tests/sample-lf.fasta', 'test': False}    2020-05-25 13:32:07Eratosthenes:98447INFOversion : __main__==None    2020-05-25 13:32:07Eratosthenes:98447INFOversion : numpy==1.18.4    2020-05-25 13:32:07Eratosthenes:98447INFOinput_file_path : /Users/gavin/repos/SciTrack/tests/sample-lf.fasta    2020-05-25 13:32:07Eratosthenes:98447INFOinput_file_path md5sum : 96eb2c2632bae19eb65ea9224aaafdad**********************Other useful functions**********************Two other useful functions are ``get_file_hexdigest`` and ``get_text_hexdigest``.****************Reporting issues****************Use the project `issue tracker &lt;https://github.com/HuttleyLab/scitrack/issues&gt;`_.**************For Developers**************We use flit_ for package building. Having cloned the repository onto your machine. Install ``flit``::$ python3 -m pip install flitDo a developer install of ``scitrack`` using flit as::$ cd path/to/cloned/repo$ flit install -s --python `which python`.. note:: This installs a symlink into ``site-packages`` of the python identified by ``which python``... [1] The hexdigest serves as a unique signature of a files contents... _flit: https://flit.readthedocs.io/en/latest/</longdescription>
</pkgmetadata>