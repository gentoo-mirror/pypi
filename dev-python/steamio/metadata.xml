<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># steam.pyA modern, easy to use, and async ready package to interact with the Steam API. Heavily inspired by[discord.py](https://github.com/Rapptz/discord.py) and borrowing functionality from[ValvePython/steam](https://github.com/ValvePython/steam).![Supports](https://img.shields.io/pypi/pyversions/steamio)![Version](https://img.shields.io/pypi/v/steamio?color=%2366c0f4)![License](https://img.shields.io/github/license/Gobot1234/steam.py)[![GitHub issues](https://img.shields.io/github/issues-raw/Gobot1234/steam.py)](https://github.com/Gobot1234/steam.py/issues)[![GitHub stars](https://img.shields.io/github/stars/Gobot1234/steam.py)](https://github.com/Gobot1234/steam.py/stargazers)[![Discord](https://img.shields.io/discord/678629505094647819?color=7289da&amp;label=Discord&amp;logo=discord)](https://discord.gg/MQ68WUS)[![Documentation Status](https://github.com/Gobot1234/steam.py/actions/workflows/docs.yml/badge.svg)](https://github.com/Gobot1234/steam.py/actions/workflows/docs.yml)## Key Features- Modern Pythonic API using `async`/`await` syntax- Command extension to aid with bot creation- Easy to use with an object-oriented design- Fully typed hinted for faster development## Installation**Python 3.7 or higher is required**To install the library just run either of the following commands:```sh# Linux/macOSpython3 -m pip install -U steamio# Windowspy -m pip install -U steamio```Or for the development version.```sh# Linux/macOSpython3 -m pip install -U &quot;steamio @ git+https://github.com/Gobot1234/steam.py@main&quot;# Windowspy -m pip install -U &quot;steamio @ git+https://github.com/Gobot1234/steam.py@main&quot;```## Quick Example```pythonimport steamclass MyClient(steam.Client):    async def on_ready(self) -&gt; None:        print(&quot;Logged in as&quot;, self.user)    async def on_trade_receive(self, trade: steam.TradeOffer) -&gt; None:        await trade.partner.send(&quot;Thank you for your trade&quot;)        print(f&quot;Received trade: #{trade.id}&quot;)        print(&quot;Trade partner is:&quot;, trade.partner)        print(&quot;We would send:&quot;, len(trade.items_to_send), &quot;items&quot;)        print(&quot;We would receive:&quot;, len(trade.items_to_receive), &quot;items&quot;)        if trade.is_gift():            print(&quot;Accepting the trade as it is a gift&quot;)            await trade.accept()client = MyClient()client.run(&quot;username&quot;, &quot;password&quot;)```## Bot Example```pythonfrom steam.ext import commandsbot = commands.Bot(command_prefix=&quot;!&quot;)@bot.commandasync def ping(ctx: commands.Context) -&gt; None:    await ctx.send(&quot;Pong!&quot;)bot.run(&quot;username&quot;, &quot;password&quot;)```## Links- [Documentation](https://steam-py.github.io/docs/latest/)- [Official Discord Server](https://discord.gg/MQ68WUS)</longdescription>
</pkgmetadata>