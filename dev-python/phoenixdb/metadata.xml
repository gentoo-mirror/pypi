<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Phoenix database adapter for Python===================================``phoenixdb`` is a Python library for accessing `Apache Phoenix &lt;http://phoenix.apache.org/&gt;`_using the`remote query server &lt;http://phoenix.apache.org/server.html&gt;`_.This library implements thestandard `DB API 2.0 &lt;https://www.python.org/dev/peps/pep-0249/&gt;`_ interface and asubset of `SQLAlchemy &lt;https://www.sqlalchemy.org/&gt;`_, either of which should be familiarto most Python programmers.Installation------------The source code is part of the phoenix-queryserver source distribution.You can download it from &lt;https://phoenix.apache.org/&gt;, or get the latest development versionfrom &lt;https://github.com/apache/phoenix-queryserver&gt;Extract the archive and then install it manually::    cd /path/to/phoenix-queryserver-x.y.z/python/phoenixdb    python setup.py installUsage-----The library implements the standard DB API 2.0 interface, so it can beused the same way you would use any other SQL database from Python, for example::    import phoenixdb    import phoenixdb.cursor    database_url = 'http://localhost:8765/'    conn = phoenixdb.connect(database_url, autocommit=True)    cursor = conn.cursor()    cursor.execute(&quot;CREATE TABLE users (id INTEGER PRIMARY KEY, username VARCHAR)&quot;)    cursor.execute(&quot;UPSERT INTO users VALUES (?, ?)&quot;, (1, 'admin'))    cursor.execute(&quot;SELECT * FROM users&quot;)    print(cursor.fetchall())    cursor = conn.cursor(cursor_factory=phoenixdb.cursor.DictCursor)    cursor.execute(&quot;SELECT * FROM users WHERE id=1&quot;)    print(cursor.fetchone()['USERNAME'])Setting up a development environment------------------------------------If you want to quickly try out the included examples, you can set up alocal `virtualenv &lt;https://virtualenv.pypa.io/en/latest/&gt;`_ with all thenecessary requirements::    virtualenv e    source e/bin/activate    pip install -r requirements.txt    python setup.py developYou can start a Phoenix QueryServer instance on http://localhost:8765 for testing by runningthe following command in the pohoenix-queryserver-parent directory::    mvn clean verify -am -pl phoenix-queryserver-it -Dtest=foo \    -Dit.test=QueryServerBasicsIT#startLocalPQS \    -Ddo.not.randomize.pqs.port=true -Dstart.unsecure.pqs=trueYou can start a secure (https+kerberos) Phoenix QueryServer instance on https://localhost:8765for testing by running the following command in the phoenix-queryserver-parent directory::    mvn clean verify -am -pl phoenix-queryserver-it -Dtest=foo \    -Dit.test=SecureQueryServerPhoenixDBIT#startLocalPQS \    -Ddo.not.randomize.pqs.port=true -Dstart.secure.pqs=truethis will also create a shell script in phoenix-queryserver-it/target/krb_setup.sh, that you can use to setup the environment for the tests.If you want to use the library without installing the phoenixdb library, you can usethe `PYTHONPATH` environment variable to point to the library directly::    cd phoenix-queryserver-parent/python-phoenixdb    python setup.py build    cd ~/my_project    PYTHONPATH=$PHOENIX_HOME/build/lib python my_app.pyDon't forget to run flake8 on your changes.Running the test suite----------------------The library comes with a test suite for testing Python DB API 2.0 compliance andvarious Phoenix-specific features. In order to run the test suite, you need aworking Phoenix database and set the ``PHOENIXDB_TEST_DB_URL`` environment variable::    export PHOENIXDB_TEST_DB_URL='http://localhost:8765/'    toxIf you use a secure PQS server, you can set the connection parameters via the following environmentvariables:- PHOENIXDB_TEST_DB_TRUSTSTORE- PHOENIXDB_TEST_DB_AUTHENTICATION- PHOENIXDB_TEST_DB_AVATICA_USER- PHOENIXDB_TEST_DB_AVATICA_PASSWORDSimilarly, tox can be used to run the test suite against multiple Python versions::    pyenv install 3.5.5    pyenv install 3.6.4    pyenv install 2.7.14    pyenv global 2.7.14 3.5.5 3.6.4    PHOENIXDB_TEST_DB_URL='http://localhost:8765' toxYou can use tox and docker to run the tests on supported python versions withoutinstalling the environments locally::    docker build -t toxtest .    docker run --rm --add-host=host.docker.internal:host-gateway -v `pwd`:/src toxtestYou can also run the test suite from maven as part of the Java build by setting the run.full.python.testsuite property. You DO NOT need to set the PHOENIXDB_* enviroment variables,maven will set them up for you. The output of the test run will be saved inphoenix-queryserver/phoenix-queryserver-it/target/python-stdout.log and python-stderr.log::    mvn clean verify -Drun.full.python.testsuite=trueKnown issues------------- TIME and DATE columns in Phoenix are stored as full timestamps with a millisecond accuracy,  but the remote protocol only exposes the time (hour/minute/second) or date (year/month/day)  parts of the columns. (`CALCITE-797 &lt;https://issues.apache.org/jira/browse/CALCITE-797&gt;`_, `CALCITE-798 &lt;https://issues.apache.org/jira/browse/CALCITE-798&gt;`_)- TIMESTAMP columns in Phoenix are stored with a nanosecond accuracy, but the remote protocol truncates them to milliseconds. (`CALCITE-796 &lt;https://issues.apache.org/jira/browse/CALCITE-796&gt;`_)SQLAlchemy feature support--------------------------SQLAlchemy has a wide breadth of API, ranging from basic SQL commands to object-relational mapping support.Today, python-phoenixdb only supports the following subset of the complete SQLAlchemy API:- `Textual SQL &lt;https://docs.sqlalchemy.org/en/13/core/tutorial.html#using-textual-sql&gt;`_All other API should be considered not implemented.</longdescription>
</pkgmetadata>