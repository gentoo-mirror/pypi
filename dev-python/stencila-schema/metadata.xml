<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Stencila Schema for Python[![Build Status](https://dev.azure.com/stencila/stencila/_apis/build/status/stencila.schema?branchName=master)](https://dev.azure.com/stencila/stencila/_build/latest?definitionId=9&amp;branchName=master)[![Code coverage](https://badger.nokome.now.sh/codecov-folder/stencila/schema/python)](https://codecov.io/gh/stencila/schema/tree/master/python)[![Code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![PyPI](https://img.shields.io/pypi/v/stencila-schema.svg)](https://pypi.org/project/stencila-schema)[![Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://stencila.github.io/schema/python/docs)This package provides Python bindings for the [Stencila Schema](https://schema.stenci.la) for executable documents.It is primarily aimed at Python developers wanting to programmatically generate, or modify, executable documents. For example, it is used in [`pyla`](https://github.com/stencila/pyla), a Stencila plugin for Python.## Install```pythonpip3 install stencila-schema```## UseThis packages exports a Python class for each type of document node in the Stencila Schema e.g. `Article`, `Paragraph`, `CodeChunk`.For type safety, type annotations are places on attributes and parameters of the `__init__` method. e.g.```pythonclass CodeExpression(CodeFragment):    &quot;&quot;&quot;An expression defined in programming language source code.&quot;&quot;&quot;    errors: Optional[Array[&quot;CodeError&quot;]] = None    &quot;&quot;&quot;Errors when compiling or executing the chunk.&quot;&quot;&quot;    output: Optional[&quot;Node&quot;] = None    &quot;&quot;&quot;The value of the expression when it was last evaluated.&quot;&quot;&quot;```The `__init__` method of each class has as parameters the attributes of the class (including those that are inherited) with required attributes first (alphabetically where there are more than one), followed by optional attributes (also alphabetically) e.g. for `CodeExpression`:```python    def __init__(        self,        text: str,        errors: Optional[Array[&quot;CodeError&quot;]] = None,        format: Optional[str] = None,        id: Optional[str] = None,        meta: Optional[Dict[str, Any]] = None,        output: Optional[&quot;Node&quot;] = None,        programmingLanguage: Optional[str] = None    )```It is recommended to use keyword arguments when calling constructors as it substantially reduces the likelihood that your code will break if you get the order wrong or if there are changes in the attributes of classes (and thus their order in `__init__` parameters) in later versions e.g.```pythonfrom stencila.schema.types import Article, CodeExpression, Paragraph, Personarticle = Article(    title=&quot;My first executable document&quot;,    authors=[Person(givenNames=[&quot;Jane&quot;], familyNames=[&quot;Doe&quot;])],    content=[        Paragraph(            content=[                &quot;Two times two: &quot;,                CodeExpression(programmingLanguage=&quot;python&quot;, text=&quot;2 * 2&quot;),            ]        )    ],)print(article.authors[0].givenNames)# Jane```In contrast, the following code is more concise, but is broken because, although it provides all required arguments, it gets the order wrong:```pythonfrom stencila.schema.types import Article, CodeExpression, Paragraph, Personarticle = Article(    &quot;My first executable document&quot;,    [Person([&quot;Jane&quot;], [&quot;Doe&quot;])],    [Paragraph([&quot;Two times two: &quot;, CodeExpression(&quot;2 * 2&quot;, &quot;python&quot;),])],)print(article.authors[0].address)# Janeprint(article.authors[0].givenNames)# None```To support conversion of schema nodes to/from JSON, `json.py` defines `encode` and `decode` functions. e.g.```pythonfrom stencila.schema.types import Headingfrom stencila.schema.json import encode, decodeheading = Heading(content=[&quot;Heading Text&quot;], depth=2)#&lt;stencila.schema.types.Heading object at 0x7f2d038a3748&gt;json = encode(heading)print(json)#{#  &quot;type&quot;: &quot;Heading&quot;,#  &quot;content&quot;: [#    &quot;Heading Text&quot;#  ],#  &quot;depth&quot;: 2#}decode(json)#&lt;stencila.schema.types.Heading object at 0x7fda7bbdd780&gt;```</longdescription>
</pkgmetadata>