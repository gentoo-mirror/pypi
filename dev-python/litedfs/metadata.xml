<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LiteDFSA distributed file system, based on Python3, tornado, inspired by HDFS.It's for data processing cache, not for permanent storage!All code based on Python3, do not use Python2!It still under development, so, maybe have some bugs or not stable enough!See more details at https://github.com/fiefdx/LiteDFS# Features1. per file replica settings, support dynamic replica change, no data resharding functions, currently2. scalable with add / remove node3. lightweight, pure python implementation4. support command line interface# Conceptions1. name node(ldfsname): the central node of the cluster, manage all files &amp; directories index.2. data node(ldfsdata): the data node of the cluster, store real file's blocks data.3. command line client(ldfs): the command line tool for communicate with the cluster.4. graphic client(ldfsviewer): the graphic tool for communicate with the cluster.# Deployment## Install LiteDFS```bash# this will install 4 commands: ldfsname, ldfsdata, ldfs, ldfsviewer$ pip3 install litedfs```## Run Name Node### Configuration```yamllog_level: NOSET                        # NOSET, DEBUG, INFO, WARNING, ERROR, CRITICALlog_path: /home/pi/litedfs_name/logs    # log file directory, can auto generate by ldfsnamehttp_host: 0.0.0.0                      # name node's http hosthttp_port: 9000                         # name node's http porttcp_host: 0.0.0.0                       # name node's tcp hosttcp_port: 6061                          # name node's tcp portblock_size: 67108864                    # 67108864 = 64M, file block sizedata_path: /home/pi/litedfs_name/data   # name node data store directory, can auto generate by ldfsname```### Run```bash# generate configuration file &amp; scriptsmkdir ./litedfs_namecd ./litedfs_name# this will generate configuration.yml and other scriptsldfsname -g ./# run manuallyldfsname -c ./configuration.yml or nohup ldfsname -c ./configuration.yml &gt; /dev/null 2&gt;&amp;1 &amp;# install systemd service, user and group set to use which user and group to run ldfsnamesudo ./install_systemd_service.sh user group# startsystemctl start litedfs-name# stopsystemctl stop litedfs-name# uninstall systemd servicesudo ./uninstall_systemd_service.sh# test$ curl localhost:9000{&quot;message&quot;: &quot;LiteDFS name service&quot;}```## Run Node### Configuration```yamllog_level: NOSET                        # NOSET, DEBUG, INFO, WARNING, ERROR, CRITICALlog_path: /home/pi/litedfs_data/logs    # log file directory, can auto generate by ldfsdatahttp_host: 0.0.0.0                      # data node's http hosthttp_port: 8002                         # data node's http portname_http_host: 127.0.0.1               # name node's http hostname_http_port: 9000                    # name node's http portname_tcp_host: 127.0.0.1                # name node's tcp hostname_tcp_port: 6061                     # name node's tcp portheartbeat_interval: 1                   # heartbeat interval, 1 secondsheartbeat_timeout: 30                   # heartbeat timeout, 30 secondsretry_interval: 5                       # retry to connect name node interval, when lost connection, 5 secondsdata_path: /home/pi/litedfs_data/data   # data node data store directory, can auto generate by ldfsdata```### Run```bash# generate configuration file &amp; scriptsmkdir ./litedfs_datacd ./litedfs_data# this will generate configuration.yml and other scriptsldfsdata -g ./# run manuallyldfsdata -c ./configuration.yml or nohup ldfsdata -c ./configuration.yml &gt; /dev/null 2&gt;&amp;1 &amp;# install systemd service, user and group set to use which user and group to run ldfsdatasudo ./install_systemd_service.sh user group# startsystemctl start litedfs-data# stopsystemctl stop litedfs-data# uninstall systemd servicesudo ./uninstall_systemd_service.sh# test$ curl localhost:8002{&quot;message&quot;: &quot;LiteDFS data service&quot;}```## Run ViewerThis viewer must running on your local machine, it is not a public service, it is a graphic client based on web technique.### Configuration```yamllog_level: NOSET                           # NOSET, DEBUG, INFO, WARNING, ERROR, CRITICALlog_path: /home/pi/litedfs_viewer/logs     # log file directory, can auto generate by ldfsviewerhttp_host: 0.0.0.0                         # viewer's http hosthttp_port: 8088                            # viewer's http portname_http_host: 192.168.199.149            # name node's http hostname_http_port: 9000                       # name node's http portdata_path: /home/pi/litedfs_viewer/data    # viewer data store directory, can auto generate by ldfsviewer```### Run```bash# generate configuration file &amp; scriptsmkdir ./litedfs_viewercd ./litedfs_viewer# this will generate configuration.yml and other scriptsldfsviewer -g ./# run manuallyldfsviewer -c ./configuration.yml or nohup ldfsviewer -c ./configuration.yml &gt; /dev/null 2&gt;&amp;1 &amp;# install systemd service, user and group set to use which user and group to run ldfsviewersudo ./install_systemd_service.sh user group# startsystemctl start litedfs-viewer# stopsystemctl stop litedfs-viewer# uninstall systemd servicesudo ./uninstall_systemd_service.sh# test# use web browser open: http://localhost:8088```## Operate With LiteDFS Cluster```bash# list root directory$ ldfs localhost:9000 directory list -r /# | id | type | size | name# create test directory$ ldfs localhost:9000 directory create -r /testcreate directory[/test] success# list root directory again$ ldfs localhost:9000 directory list -r /# | id | type      | size | name1 |    | directory | 0    | test# create a file$ ldfs localhost:9000 file create -r /test/test.tar.gz -l ./examples.tar.gz create file[/test/test.tar.gz] success# list test directory$ ldfs localhost:9000 directory list -r /test# | id                                   | type | size      | name       1 | 878b17d4-cc11-4bba-88b0-2186b77ef552 | file | 110237727 | test.tar.gz# create test2 directory$ ldfs localhost:9000 directory create -r /test2create directory[/test2] success# list root directory again$ ldfs localhost:9000 directory list -r /# | id | type      | size | name 1 |    | directory | 0    | test 2 |    | directory | 0    | test2# move test.tar.gz into test2 directory$ ldfs localhost:9000 file move -s /test/test.tar.gz -t /test2move file[/test/test.tar.gz] to /test2 success# list test directory again$ ldfs localhost:9000 directory list -r /test# | id | type | size | name# list test2 directory again$ ldfs localhost:9000 directory list -r /test2# | id                                   | type | size      | name       1 | 878b17d4-cc11-4bba-88b0-2186b77ef552 | file | 110237727 | test.tar.gz# create file with replica 2$ ldfs localhost:9000 file create -r /test/test.tar.gz -l ./examples.tar.gz -R 2create file[/test/test.tar.gz] success# update file replica 3$ ldfs localhost:9000 file create -r /test/test.tar.gz -l ./examples.tar.gz -R 3update file[/test/test.tar.gz] success# download /test/test.tar.gz to local file ./test.tar.gz$ ldfs localhost:9000 file download -r /test/test.tar.gz -l ./test.tar.gzdownload file[/test/test.tar.gz =&gt; ./test.tar.gz] success```</longdescription>
</pkgmetadata>