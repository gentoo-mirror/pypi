<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LicenseSpring Python LibraryThe LicenseSpring Python Library provides convenient access to the LicenseSpring API fromapplications written in the Python language.## InstallationInstall `licensespring` library:```pip install licensespring```Requires: Python &gt;=3.7## Hardware (Device) IDsThis library provides preconfigured hardware identity providers:- `HardwareIdProvider` (default)- `PlatformIdProvider`You can set the desired hardware identity provider when initializing the APIClient:```pythonapi_client = APIClient(api_key=&quot;_your_api_key_&quot;, shared_key=&quot;_your_shared_key_&quot;, hardware_id_provider=PlatformIdProvider)```It also supports their customization and creation of your own hardware id provider.### HardwareIdProvider Uses [uuid.getnode()](https://docs.python.org/3/library/uuid.html#uuid.getnode) to generate unique ID per device as described:&gt; Get the hardware address as a 48-bit positive integer. The first time this runs, it may launch a separate program, which could be quite slow. If all attempts to obtain the hardware address fail, we choose a random 48-bit number with the multicast bit (least significant bit of the first octet) set to 1 as recommended in RFC 4122. “Hardware address” means the MAC address of a network interface. On a machine with multiple network interfaces, universally administered MAC addresses (i.e. where the second least significant bit of the first octet is unset) will be preferred over locally administered MAC addresses, but with no other ordering guarantees.All of the methods exposed by `HardwareIdProvider`:```pythonclass HardwareIdProvider:    def get_id(self):        return str(uuid.getnode())    def get_os_ver(self):        return platform.platform()    def get_hostname(self):        return platform.node()    def get_ip(self):        return socket.gethostbyname(self.get_hostname())    def get_is_vm(self):        return False    def get_vm_info(self):        return None    def get_mac_address(self):        return &quot;:&quot;.join((&quot;%012X&quot; % uuid.getnode())[i : i + 2] for i in range(0, 12, 2))    def get_request_id(self):        return str(uuid.uuid4())```### PlatformIdProviderUses [sys.platform](https://docs.python.org/3/library/sys.html#sys.platform) and OS queries to find the raw GUID of the device.Extends the `HardwareIdProvider` and overwrites only the `get_id` method:```pythonclass PlatformIdProvider(HardwareIdProvider):    def get_id(self):        id = None        if sys.platform == 'darwin':            id = execute(&quot;ioreg -d2 -c IOPlatformExpertDevice | awk -F\\\&quot; '/IOPlatformUUID/{print $(NF-1)}'&quot;)        if sys.platform == 'win32' or sys.platform == 'cygwin' or sys.platform == 'msys':            id = read_win_registry('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography', 'MachineGuid')            if not id:                id = execute('wmic csproduct get uuid').split('\n')[2].strip()        if sys.platform.startswith('linux'):            id = read_file('/var/lib/dbus/machine-id')            if not id:                id = read_file('/etc/machine-id')        if sys.platform.startswith('openbsd') or sys.platform.startswith('freebsd'):            id = read_file('/etc/hostid')            if not id:                id = execute('kenv -q smbios.system.uuid')        if not id:            id = super().get_id()        return id```### CustomizationExtend any of the preconfigured hardware identity providers, overwrite the methods you want and provide it when initializing the APIClient:```pythonclass CustomHardwareIdProvider(HardwareIdProvider):    def get_id(self):        return &quot;_my_id_&quot;api_client = APIClient(api_key=&quot;_your_api_key_&quot;, shared_key=&quot;_your_shared_key_&quot;, hardware_id_provider=CustomHardwareIdProvider)```## APIClient Usage Examples### Set app version```pythonimport licensespringlicensespring.app_version = &quot;MyApp 1.0.0&quot;```### Create APIClient```pythonfrom licensespring.api import APIClientapi_client = APIClient(api_key=&quot;_your_api_key_&quot;, shared_key=&quot;_your_shared_key_&quot;)```### Activate key based license```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPB7-279T-6MNK-CQLK&quot;license_data = api_client.activate_license(product=product, license_key=license_key)print(license_data)```### Activate user based license```pythonproduct = &quot;uprod1&quot;username = &quot;user1@email.com&quot;password = &quot;nq64k1!@&quot;license_data = api_client.activate_license(    product=product, username=username, password=password)print(license_data)```### Deactivate key based license```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPUB-J4PH-CGNK-C7LK&quot;is_deactivated = api_client.deactivate_license(product=product, license_key=license_key)print(is_deactivated)```### Deactivate user based license```pythonproduct = &quot;uprod1&quot;username = &quot;user1@email.com&quot;password = &quot;nq64k1!@&quot;license_data = api_client.deactivate_license(    product=product, username=username, password=password)print(license_data)```### Check key based license```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPBQ-DZCP-E9SK-CQLK&quot;license_data = api_client.check_license(product=product, license_key=license_key)print(license_data)```### Check user based license```pythonproduct = &quot;uprod1&quot;username = &quot;user2@email.com&quot;password = &quot;1l48y#!b&quot;license_data = api_client.check_license(product=product, username=username)print(license_data)```### Add consumption```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPSU-QTKQ-HSSK-C9LK&quot;# Add 1 consumptionconsumption_data = api_client.add_consumption(    product=product, license_key=license_key)# Add 3 consumptionsconsumption_data = api_client.add_consumption(    product=product, license_key=license_key, consumptions=3)# Add 1 consumption, allow overages and define max overagesconsumption_data = api_client.add_consumption(    product=product, license_key=license_key, allow_overages=True, max_overages=10)print(consumption_data)```### Add feature consumption```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPTJ-LSYZ-USEK-C8LK&quot;feature = &quot;lkprod1cf1&quot;# Add 1 consumptionfeature_consumption_data = api_client.add_feature_consumption(    product=product, license_key=license_key, feature=feature)# Add 3 consumptionsfeature_consumption_data = api_client.add_feature_consumption(    product=product, license_key=license_key, feature=feature, consumptions=3)print(feature_consumption_data)```### Trial key```pythonproduct = &quot;lkprod2&quot;trial_license_data = api_client.trial_key(product=product)print(trial_license_data)```### Product details```pythonproduct = &quot;lkprod1&quot;product_data = api_client.product_details(product=product)print(product_data)```### Track device variables```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPUB-SZF9-AB2K-C7LK&quot;variables = {&quot;variable_1_key&quot;: &quot;variable_1_value&quot;, &quot;variable_2_key&quot;: &quot;variable_2_value&quot;}is_tracked = api_client.track_device_variables(product=product, license_key=license_key, variables=variables)print(is_tracked)```### Get device variables```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPUB-SZF9-AB2K-C7LK&quot;device_variables = api_client.get_device_variables(product=product, license_key=license_key)print(device_variables)```### Floating borrow```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPUC-NGWU-3NJK-C7LK&quot;# Borrow for 2 hoursborrowed_until = (datetime.utcnow() + timedelta(hours=2)).isoformat()floating_borrow_data = api_client.floating_borrow(product=product, license_key=license_key, borrowed_until=borrowed_until)print(floating_borrow_data)```### Floating release```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPUC-NGWU-3NJK-C7LK&quot;is_released = api_client.floating_release(product=product, license_key=license_key)print(is_released)```### Change password```pythonusername = &quot;user4@email.com&quot;password = &quot;_old_password_&quot;new_password = &quot;_new_password_&quot;is_password_changed = api_client.change_password(username=username, password=password, new_password=new_password)print(is_password_changed)```### Versions```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPB7-279T-6MNK-CQLK&quot;# Get versions for all environmentsversions_data = api_client.versions(product=product, license_key=license_key)# Get versions for mac environmentmac_versions_data = api_client.versions(    product=product, license_key=license_key, env=&quot;mac&quot;)print(versions_data)```### Installation file```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPB7-279T-6MNK-CQLK&quot;# Get the latest installation fileinstallation_file_data = api_client.installation_file(    product=product, license_key=license_key)# Get the latest installation file for linux environmentinstallation_file_data = api_client.installation_file(    product=product, license_key=license_key, env=&quot;linux&quot;)# Get the latest installation file for version 1.0.0installation_file_data = api_client.installation_file(    product=product, license_key=license_key, version=&quot;1.0.0&quot;)print(installation_file_data)```### Customer license users```pythonproduct = &quot;uprod1&quot;customer = 'c1@c.com'customer_license_users_data = api_client.customer_license_users(    product=product, customer=customer)print(customer_license_users_data)```### SSO URL```pythonproduct = &quot;uprod1&quot;customer_account_code = &quot;ccorp&quot;sso_url_data = api_client.sso_url(    product=product, customer_account_code=customer_account_code)print(sso_url_data)```### SSO URL with `code` response type```pythonproduct = &quot;uprod1&quot;customer_account_code = &quot;ccorp&quot;sso_url_data = api_client.sso_url(    product=product,    customer_account_code=customer_account_code,    response_type=&quot;code&quot;,)print(sso_url_data)```### Activate offline```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPY7-VHX9-MDSK-C3LK&quot;# Generate data for offline activationactivate_offline_data = api_client.activate_offline_dump(    product=product, license_key=license_key)# Write to filewith open('activate_offline.req', mode='w') as f:    print(activate_offline_data, file=f)# Activate offlinelicense_data = api_client.activate_offline(data=activate_offline_data)print(license_data)```### Activate offline load```python# Read from filewith open('./ls_activation.lic') as file:    ls_activation_data = file.read()license_data = api_client.activate_offline_load(ls_activation_data)print(license_data)```### Deactivate offline```pythonproduct = &quot;lkprod1&quot;license_key = &quot;GPYC-X5J2-L5SK-C3LK&quot;# Generate data for offline deactivationdeactivate_offline_data = api_client.deactivate_offline_dump(    product=product, license_key=license_key)# Write to filewith open('deactivate_offline.req', mode='w') as f:    print(deactivate_offline_data, file=f)# Deactivate offlineis_deactivated = api_client.deactivate_offline(data=deactivate_offline_data)print(is_deactiavted)```</longdescription>
</pkgmetadata>