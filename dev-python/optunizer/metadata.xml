<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># optunizerOptuna extension for JSON and YAML configuration files## Installation```shpip install optunizer```* with PostresSQL connector```shpip install optunizer[psycopg]```## Running0. Suppose you have some script/program (e.g. `main.py`) with config in YAML/JSON file (e.g. `config.yaml`) that returns some output (e.g. `metrics.json`)* main.py```pythonimport jsonimport yamlconfig_file = 'config.yaml'with open(config_file) as f:  params = yaml.safe_load(f)metric = params['param1'] + params['param2']metrics = {'metric': metric}metrics_file = 'metrics.json'with open(metrics_file, 'w') as f:  json.dump(metrics, f)```* config.yaml```yamlparam1: 2param2: 0.5param3: c```* metrics.json```json{  &quot;metric&quot;: 0.3}```1. Make optunizer config file, e.g. `optunizer.yaml````yamlattrs:  # track all fields in files  config.yaml: true  metrics.json: true  optunizer_sysinfo.json: trueclass: optunizer.optimizer.Optimizerload_if_exists: trueexport_csv: optunizer_results.csvexport_metrics: optunizer_metrics.jsonexport_sysinfo: optunizer_sysinfo.jsonstudy: optunizer_testobjectives:  # Specify objectives, e.g. fields in metrics.json file  metric@metrics.json: minimizeparams:  # Specify params, e.g. fields in config.yaml file  param1@config.yaml:    method: suggest_int    method_kwargs:      high: 3      low: 0  param2@config.yaml:    method: suggest_float    method_kwargs:      high: 1.0      low: 0.01      log: true  param3@config.yaml:    method: suggest_categorical    method_kwargs:      choices: [a, b, c]pruner: PatientPrunerpruner_kwargs:  # Specify pruner, e.g. PatientPruner with NopPruner subpruner  min_delta: 0  patience: 0  wrapped_pruner: NopPruner  wrapped_pruner_kwargs: {}sampler: PartialFixedSamplersampler_kwargs:   # Specify sampler, e.g. PartialFixedSampler with GridSampler subsampler  base_sampler: RandomSampler  base_sampler_kwargs: {}  # base_sampler: GridSampler  # base_sampler_kwargs:  #   search_space:  #     param1@config.yaml: [0, 1, 2]  #     param2@config.yaml: [0.01, 0.5]  fixed_params:    param3@config.yaml: asubprocess_kwargs:  # Specify your command  args:  - python  - main.py  - config.yaml```2. Run optunizer```shOPTUNA_CONFIG=optunizer.yaml python -m optunizer```or```shpython -m optunizer optunizer.yaml```3. Run optunizer streamlit viz```shpip install optunizer[viz]python -m optunizer app```4. There are several useful environment variables, that could be set in command line, `.env` or `.env.secret` files```shOPTUNA_CONFIG=optunizer.yamlOPTUNA_CONFIG_APP=app.yamlOPTUNA_SHARED=.envOPTUNA_SECRET=.env.secretOPTUNA_URL=postgresql+psycopg2://USER:PASSWORD@IP:PORT/DB  # see https://docs.sqlalchemy.org/en/14/core/engines.htmlOPTUNA_STUDY=STUDY_NAMEOPTUNA_TRIALS=3OPTUNA_TIMEOUT=3600OPTUNA_LOAD_IF_EXISTS=1OPTUNA_EXPORT_CSV=CSV_FILE_NAMEOPTUNA_EXPORT_METRICS=METRICS_FILE_NAMEOPTUNA_EXPORT_SYSINFO=SYSINFO_FILE_NAME```</longdescription>
</pkgmetadata>