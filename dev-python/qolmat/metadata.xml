<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>hlbotterman@quantmetry.com,jroussel@quantmetry.com,tmorzadec@quantmetry.com,rhajou@quantmetry.com,fdakhli@quantmetry.comLicense: new BSDProject-URL: Bug Tracker, https://github.com/Quantmetry/qolmatProject-URL: Documentation, https://qolmat.readthedocs.io/en/latest/Project-URL: Source Code, https://github.com/Quantmetry/qolmatClassifier: Intended Audience :: Science/ResearchClassifier: Intended Audience :: DevelopersClassifier: License :: OSI ApprovedClassifier: Topic :: Software DevelopmentClassifier: Topic :: Scientific/EngineeringClassifier: Operating System :: Microsoft :: WindowsClassifier: Operating System :: POSIXClassifier: Operating System :: UnixClassifier: Operating System :: MacOSClassifier: Programming Language :: Python :: 3.8Classifier: Programming Language :: Python :: 3.9Classifier: Programming Language :: Python :: 3.10Requires-Python: &gt;=3.8Description-Content-Type: text/x-rstProvides-Extra: testsProvides-Extra: docsProvides-Extra: tensorflowLicense-File: LICENSELicense-File: AUTHORS.rst.. -*- mode: rst -*-|GitHubActions|_ |ReadTheDocs|_ |License|_ |PythonVersion|_ |PyPi|_ |Release|_ |Commits|_.. |GitHubActions| image:: https://github.com/Quantmetry/qolmat/actions/workflows/test.yml/badge.svg.. _GitHubActions: https://github.com/Quantmetry/qolmat/actions.. |ReadTheDocs| image:: https://readthedocs.org/projects/qolmat/badge.. _ReadTheDocs: https://qolmat.readthedocs.io/en/latest.. |License| image:: https://img.shields.io/github/license/Quantmetry/qolmat.. _License: https://github.com/Quantmetry/qolmat/blob/main/LICENSE.. |PythonVersion| image:: https://img.shields.io/pypi/pyversions/qolmat.. _PythonVersion: https://pypi.org/project/qolmat/.. |PyPi| image:: https://img.shields.io/pypi/v/qolmat.. _PyPi: https://pypi.org/project/qolmat/.. |Release| image:: https://img.shields.io/github/v/release/Quantmetry/qolmat.. _Release: https://github.com/Quantmetry/qolmat.. |Commits| image:: https://img.shields.io/github/commits-since/Quantmetry/qolmat/latest/main.. _Commits: https://github.com/Quantmetry/qolmat/commits/main.. image:: https://raw.githubusercontent.com/Quantmetry/qolmat/main/docs/images/logo.png    :align: centerQolmat -  The Tool for Data Imputation======================================**Qolmat** provides a convenient way to estimate optimal data imputation techniques by leveraging scikit-learn-compatible algorithms. Users can compare various methods based on different evaluation metrics.üîó Requirements===============Python 3.8+üõ† Installation===============Install via `pip`:.. code:: sh    $ pip install qolmatIf you need to use tensorflow, you can install it with the following 'pip' command:.. code:: sh    $ pip install qolmat[tensorflow]To install directly from the github repository :.. code:: sh    $ pip install git+https://github.com/Quantmetry/qolmat‚ö°Ô∏è Quickstart==============Let us start with a basic imputation problem. Here, we generate one-dimensional noisy time series... code:: sh    import matplotlib.pyplot as plt    import numpy as np    import pandas as pd    np.random.seed(42)    t = np.linspace(0,1,1000)    y = np.cos(2*np.pi*t*10)+np.random.randn(1000)/2    df = pd.DataFrame({'y': y}, index=pd.Series(t, name='index'))For this demonstration, let us create artificial holes in our dataset... code:: sh    from qolmat.utils.data import add_holes    plt.rcParams.update({'font.size': 18})    ratio_masked = 0.1    mean_size = 20    df_with_nan = add_holes(df, ratio_masked=ratio_masked, mean_size=mean_size)    is_na = df_with_nan['y'].isna()    plt.figure(figsize=(25,4))    plt.plot(df_with_nan['y'],'.')    plt.plot(df.loc[is_na, 'y'],'.')    plt. grid()    plt.xlim(0,1)    plt.legend(['Data', 'Missing data'])    plt.savefig('readme1.png')    plt.show().. image:: https://raw.githubusercontent.com/Quantmetry/qolmat/main/docs/images/readme1.png    :align: centerTo impute missing data, there are several methods that can be imported with ``from qolmat.imputations import imputers``.The creation of an imputation dictionary will enable us to benchmark the various imputations... code:: sh    from sklearn.linear_model import LinearRegression    from qolmat.imputations import imputers    imputer_mean = imputers.ImputerMean()    imputer_median = imputers.ImputerMedian()    imputer_mode = imputers.ImputerMode()    imputer_locf = imputers.ImputerLOCF()    imputer_nocb = imputers.ImputerNOCB()    imputer_interpol = imputers.ImputerInterpolation(method=&quot;linear&quot;)    imputer_spline = imputers.ImputerInterpolation(method=&quot;spline&quot;, order=2)    imputer_shuffle = imputers.ImputerShuffle()    imputer_residuals = imputers.ImputerResiduals(period=10, model_tsa=&quot;additive&quot;, extrapolate_trend=&quot;freq&quot;, method_interpolation=&quot;linear&quot;)    imputer_rpca = imputers.ImputerRPCA(columnwise=True, period=10, max_iter=200, tau=2, lam=.3)    imputer_rpca_opti = imputers.ImputerRPCA(columnwise=True, period = 10, max_iter=100)    imputer_ou = imputers.ImputerEM(model=&quot;multinormal&quot;, method=&quot;sample&quot;, max_iter_em=34, n_iter_ou=15, dt=1e-3)    imputer_tsou = imputers.ImputerEM(model=&quot;VAR1&quot;, method=&quot;sample&quot;, max_iter_em=34, n_iter_ou=15, dt=1e-3)    imputer_tsmle = imputers.ImputerEM(model=&quot;VAR1&quot;, method=&quot;mle&quot;, max_iter_em=34, n_iter_ou=15, dt=1e-3)    imputer_knn = imputers.ImputerKNN(k=10)    imputer_mice = imputers.ImputerMICE(estimator=LinearRegression(), sample_posterior=False, max_iter=100, missing_values=np.nan)    imputer_regressor = imputers.ImputerRegressor(estimator=LinearRegression())    dict_imputers = {        &quot;mean&quot;: imputer_mean,        &quot;median&quot;: imputer_median,        &quot;mode&quot;: imputer_mode,        &quot;interpolation&quot;: imputer_interpol,        &quot;spline&quot;: imputer_spline,        &quot;shuffle&quot;: imputer_shuffle,        &quot;residuals&quot;: imputer_residuals,        &quot;OU&quot;: imputer_ou,        &quot;TSOU&quot;: imputer_tsou,        &quot;TSMLE&quot;: imputer_tsmle,        &quot;RPCA&quot;: imputer_rpca,        &quot;RPCA_opti&quot;: imputer_rpca_opti,        &quot;locf&quot;: imputer_locf,        &quot;nocb&quot;: imputer_nocb,        &quot;knn&quot;: imputer_knn,        &quot;ols&quot;: imputer_regressor,        &quot;mice_ols&quot;: imputer_mice,    }It is possible to define a parameter dictionary for an imputer with three pieces of information: min, max and type. The aim of the dictionary is to determine the optimal parameters for data imputation. Here, we call this dictionary ``dict_config_opti``... code:: sh    search_params = {        &quot;RPCA_opti&quot;: {            &quot;tau&quot;: {&quot;min&quot;: .5, &quot;max&quot;: 5, &quot;type&quot;:&quot;Real&quot;},            &quot;lam&quot;: {&quot;min&quot;: .1, &quot;max&quot;: 1, &quot;type&quot;:&quot;Real&quot;},        }    }Then with the comparator function in ``from qolmat.benchmark import comparator``, we can compare the different imputation methods. This **does not use knowledge on missing values**, but it relies data masking instead. For more details on how imputors and comparator work, please see the following `link &lt;https://qolmat.readthedocs.io/en/latest/explanation.html&gt;`_... code:: sh    from qolmat.benchmark import comparator    generator_holes = missing_patterns.EmpiricalHoleGenerator(n_splits=4, ratio_masked=0.1)    comparison = comparator.Comparator(        dict_imputers,        ['y'],        generator_holes = generator_holes,        metrics = [&quot;mae&quot;, &quot;wmape&quot;, &quot;KL_columnwise&quot;, &quot;ks_test&quot;, &quot;energy&quot;],        n_calls_opt = 10,        dict_config_opti = dict_config_opti,    )    results = comparison.compare(df_with_nan)We can observe the benchmark results... code:: sh    dfs_imputed =  imputer_tsmle.fit_transform(df_with_nan)    plt.figure(figsize=(25,5))    plt.plot(df.loc[~is_na, 'y'],'.')    plt.plot(df.loc[is_na, 'y'],'.')    plt.plot(dfs_imputed.loc[is_na, 'y'],'.')    plt. grid()    plt.xlim(0,1)    plt.legend(['Data','Missing data', 'Imputed data'])    plt.savefig('readme3.png')    plt.show().. image:: https://raw.githubusercontent.com/Quantmetry/qolmat/main/docs/images/readme2.png    :align: centerFinally, we keep the best ``TSMLE`` imputor we represent... code:: sh    dfs_imputed =  imputer_tsmle.fit_transform(df_with_nan)    plt.figure(figsize=(25,5))    plt.plot(df['y'],'.g')    plt.plot(dfs_imputed['y'],'.r')    plt.plot(df_with_nan['y'],'.b')    plt.show().. image:: https://raw.githubusercontent.com/Quantmetry/qolmat/main/docs/images/readme3.png    :align: centerüìò Documentation================The full documentation can be found `on this link &lt;https://qolmat.readthedocs.io/en/latest/&gt;`_.üìù Contributing===============You are welcome to propose and contribute new ideas.We encourage you to `open an issue &lt;https://github.com/quantmetry/qolmat/issues&gt;`_ so that we can align on the work to be done.It is generally a good idea to have a quick discussion before opening a pull request that is potentially out-of-scope.For more information on the contribution process, please go `here &lt;https://github.com/Quantmetry/qolmat/blob/main/CONTRIBUTING.rst&gt;`_.ü§ù  Affiliation================Qolmat has been developed by Quantmetry.|Quantmetry|_.. |Quantmetry| image:: https://raw.githubusercontent.com/Quantmetry/qolmat/main/docs/images/quantmetry.png    :width: 150.. _Quantmetry: https://www.quantmetry.com/üîç  References==============Qolmat methods belong to the field of conformal inference.[1] Cand√®s, Emmanuel J., et al. ‚ÄúRobust principal component analysis?.‚ÄùJournal of the ACM (JACM) 58.3 (2011): 1-37,(`pdf &lt;https://arxiv.org/abs/0912.3599&gt;`__)[2] Wang, Xuehui, et al. ‚ÄúAn improved robust principal componentanalysis model for anomalies detection of subway passenger flow.‚ÄùJournal of advanced transportation 2018 (2018).(`pdf &lt;https://www.hindawi.com/journals/jat/2018/7191549/&gt;`__)[3] Chen, Yuxin, et al. ‚ÄúBridging convex and nonconvex optimization inrobust PCA: Noise, outliers, and missing data.‚Äù arXiv preprintarXiv:2001.05484 (2020), (`pdf &lt;https://arxiv.org/abs/2001.05484&gt;`__)[4] Shahid, Nauman, et al. ‚ÄúFast robust PCA on graphs.‚Äù IEEE Journal ofSelected Topics in Signal Processing 10.4 (2016): 740-756.(`pdf &lt;https://arxiv.org/abs/1507.08173&gt;`__)[5] Jiashi Feng, et al. ‚ÄúOnline robust pca via stochastic opti-mization.‚Äú Advances in neural information processing systems, 26, 2013.(`pdf &lt;https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.721.7506&amp;rep=rep1&amp;type=pdf&gt;`__)[6] Garc√≠a, S., Luengo, J., &amp; Herrera, F. &quot;Data preprocessing in data mining&quot;. 2015.(`pdf &lt;https://www.academia.edu/download/60477900/Garcia__Luengo__Herrera-Data_Preprocessing_in_Data_Mining_-_Springer_International_Publishing_201520190903-77973-th1o73.pdf&gt;`__)üìù License==========Qolmat is free and open-source software licensed under the `BSD 3-Clause license &lt;https://github.com/quantmetry/qolmat/blob/main/LICENSE&gt;`_.</longdescription>
</pkgmetadata>