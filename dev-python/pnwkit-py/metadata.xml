<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pnwkit-py&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/Village05/pnwkit-py&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/Village05/pnwkit-py/master/logo.png&quot; alt=&quot;Logo&quot; width=&quot;120&quot; height=&quot;120&quot;&gt;  &lt;/a&gt;  &lt;h3 align=&quot;center&quot;&gt;pnwkit-py&lt;/h3&gt;  &lt;p align=&quot;center&quot;&gt;    Politics &amp; War API Library    &lt;br /&gt;    &lt;a href=&quot;https://pnwkit-py.readthedocs.io&quot;&gt;&lt;strong&gt;Explore the docs&lt;/strong&gt;&lt;/a&gt;    &lt;br /&gt;    &lt;br /&gt;    &lt;a href=&quot;https://www.npmjs.com/package/pnwkit&quot;&gt;JavaScript/TypeScript Version&lt;/a&gt;    -    &lt;a href=&quot;https://github.com/Village05/pnwkit-py/issues&quot;&gt;Report Bug&lt;/a&gt;    -    &lt;a href=&quot;https://github.com/Village05/pnwkit-py/issues&quot;&gt;Request Feature&lt;/a&gt;  &lt;/p&gt;&lt;/p&gt;pnwkit-py is here to make interacting with the V3 Politics and War API easy. All you have to do is import the library, add your key, and make a query.## Getting StartedTo get started using pnwkit-py you must first have Python and PIP installed.### InstallingPython 3.9 or higher is required.Install the library using PIP.```sh# Linux/MacOSpython3 -m pip install -U pnwkit-py# Windowspy -3 -m pip install -U pnwkit-py```## UsageTo use pnwkit-py just import the library, create a QueryKit, then you can make synchronous or asynchronous queries.```pyimport pnwkitkit = pnwkit.QueryKit(&quot;YOUR_API_KEY&quot;)query = kit.query(&quot;nations&quot;, {&quot;id&quot;: 251584, &quot;first&quot;: 1}, &quot;nation_name&quot;)# get synchronouslyresult = query.get()# get asynchronouslyresult = await query.get_async()# ORresult = await queryprint(f&quot;Nation name: {result.nations[0].nation_name}&quot;)```If you want to paginate your query for more results, just ask to paginate the query. Instead of returning a tuple of results, pnwkit will return a `Paginator` object which you can iterate through. For asynchronous queries you can use `async for` to iterate through the results. In addition, async paginators support batching queries to perform multiple queries simultaneously.```py# .batch is async only, will perform 2 queries# when it runs out of results instead of one at a timenations = query.paginate(&quot;nations&quot;)# async onlyasync_nations = query.paginate(&quot;nations&quot;).batch(2)for nation in nations:    print(f&quot;Nation name: {nation.nation_name}&quot;)async for nation in nations:    print(f&quot;Nation name: {nation.nation_name}&quot;)print(f&quot;Current page: {nations.paginator_info.currentPage}&quot;)```The queries are written in normal GraphQL, so you can get all the cities in a nation like this```pyquery = kit.query(&quot;nations&quot;, {&quot;id&quot;, 251584, &quot;first&quot;: 1},  &quot;&quot;&quot;  nation_name  cities {    name  }  &quot;&quot;&quot;)result = query.get()print(f&quot;First city of {result.nations[0].nation_name}: {result.nations[0].cities[0].name}&quot;)```Unlike the JavaScript/TypeScript and Google Apps Script libraries, the Python library has a few additional features.- Support for subscriptions```pyasync def callback(nation):  ... # this function will be called every time an event is received  # nation is a Nation object with the updated fieldssubscription = await kit.subscribe(&quot;nation&quot;, &quot;update&quot;)async for nation in subscription:  ... # here nation is a Nation object with the updated fields```- Additional arguments on a query will be concatenated with the first to form the query.- You can also just pnwkit.Field to get support for nested fields without using raw GraphQL.```pyquery = kit.query(&quot;nations&quot;, {&quot;id&quot;, 251584, &quot;first&quot;: 1}, &quot;nation_name&quot;, pnwkit.Field(&quot;cities&quot;, {}, &quot;name&quot;))result = query.get()print(f&quot;First city of {result.nations[0].nation_name}: {result.nations[0].cities[0].name}&quot;)```- Keyword arguments provided to a query function will be passed in as query variables.- When pnwkit.Variable, check the API docs for the correct type for your argument.```pyquery = kit.query(&quot;nations&quot;, {&quot;id&quot;: pnwkit.Variable(&quot;id&quot;, pnwkit.VariableType.INT_ARRAY), &quot;first&quot;: 1}, &quot;nation_name&quot;, pnwkit.Field(&quot;cities&quot;, {}, &quot;name&quot;), id=251584)# variables can also be set with the set_variables methodquery.set_variables(id=251584)result = query.get()print(f&quot;First city of {result.nations[0].nation_name}: {result.nations[0].cities[0].name}&quot;)```- Extensions to access the daily data dumps and scrape data from the game.- Access to the bankWithdraw and bankDeposit mutations.```py# the API requires a verified bot key to use mutationskit = pnwkit.QueryKit(&quot;YOUR_API_KEY&quot;, bot_key=&quot;YOUR_BOT_KEY&quot;, bot_key_api_key=&quot;YOUR_BOT_KEY_API_KEY&quot;)query = kit.mutation(&quot;bankDeposit&quot;, {&quot;money&quot;: 100}, &quot;id&quot;)result = query.get()print(f&quot;Deposited ${result.bankDeposit.money} as bank record #{result.bankDeposit.id}&quot;)```- Query fields as aliases```pyquery = kit.query_as(&quot;nations&quot;, &quot;the_nations&quot;, {&quot;id&quot;: 251584, &quot;first&quot;: 1}, &quot;nation_name&quot;, pnwkit.Field(&quot;cities&quot;, {}, &quot;name&quot;))result = query.get()print(f&quot;First city of {result.the_nations[0].nation_name}: {result.the_nations[0].cities[0].name}&quot;)```- Ordering results```pyquery = kit.query(&quot;nations&quot;, {}, &quot;nation_name&quot;, pnwkit.OrderBy(&quot;date&quot;, pnwkit.Order.DESC))result = query.get()print(f&quot;Oldest nation {result.the_nations[0].nation_name}&quot;)```You can look at the arguments and possible data to collect here by experimenting on the [GraphQL Playground](https://api.politicsandwar.com/graphql-playground).## Moving Forward- Improved support for query variables- Argument typings- In-built cache management with subscriptions- Support for query fragments</longdescription>
</pkgmetadata>