<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Vega visual grammar for trame===========================================================================.. image:: https://github.com/Kitware/trame-vega/actions/workflows/test_and_release.yml/badge.svg    :target: https://github.com/Kitware/trame-vega/actions/workflows/test_and_release.yml    :alt: Test and Releasetrame-vega extend trame **widgets** with a Figure component that is capable of rendering Vega grammars such as `Altair &lt;https://altair-viz.github.io/&gt;`__ plots.Installing-----------------------------------------------------------trame-vega can be installed with `pip &lt;https://pypi.org/project/trame-vega/&gt;`_:.. code-block:: bash    pip install --upgrade trame-vegaUsage-----------------------------------------------------------The `Trame Tutorial &lt;https://kitware.github.io/trame/docs/tutorial.html&gt;`_ is the place to go to learn how to use the library and start building your own application.The `API Reference &lt;https://trame.readthedocs.io/en/latest/index.html&gt;`_ documentation provides API-level documentation.License-----------------------------------------------------------trame-vega is made available under the BSD-3 License. For more details, see `LICENSE &lt;https://github.com/Kitware/trame-vega/blob/master/LICENSE&gt;`_This license has been chosen to match the one use by `Vega &lt;https://github.com/vega/vega/blob/main/LICENSE&gt;`_ and `Altair &lt;https://github.com/altair-viz/altair/blob/master/LICENSE&gt;`_which are either used within that trame widget or will be use by the user to create the content for those Figures.Community-----------------------------------------------------------`Trame &lt;https://kitware.github.io/trame/&gt;`_ | `Discussions &lt;https://github.com/Kitware/trame/discussions&gt;`_ | `Issues &lt;https://github.com/Kitware/trame/issues&gt;`_ | `RoadMap &lt;https://github.com/Kitware/trame/projects/1&gt;`_ | `Contact Us &lt;https://www.kitware.com/contact-us/&gt;`_.. image:: https://zenodo.org/badge/410108340.svg    :target: https://zenodo.org/badge/latestdoi/410108340Enjoying trame?-----------------------------------------------------------Share your experience `with a testimonial &lt;https://github.com/Kitware/trame/issues/18&gt;`_ or `with a brand approval &lt;https://github.com/Kitware/trame/issues/19&gt;`_.Example: Vega + Altair-----------------------------------------------------------The Python interface of `Altair provide examples &lt;https://altair-viz.github.io/&gt;`__ on how to create various visualization... code-block:: python    import altair as alt    from vega_datasets import data    from trame.widgets import vega    # Generate chart    source = data.cars()    fig = (        alt.Chart(source)        .mark_circle()        .encode(            alt.X(alt.repeat(&quot;column&quot;), type=&quot;quantitative&quot;),            alt.Y(alt.repeat(&quot;row&quot;), type=&quot;quantitative&quot;),            color=&quot;Origin:N&quot;,        )        .properties(width=200, height=200)        .repeat(            row=[&quot;Horsepower&quot;, &quot;Acceleration&quot;, &quot;Miles_per_Gallon&quot;],            column=[&quot;Miles_per_Gallon&quot;, &quot;Acceleration&quot;, &quot;Horsepower&quot;],        )        .interactive()    )    # Display it    widget = vega.Figure(figure=None) # could pass fig at construction    widget.update(fig) # or update later</longdescription>
</pkgmetadata>