<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># COmparing Continuous Optimisers (COCO) post-processingThe ([`cocopp`](https://numbbo.github.io/gforge/apidocs-cocopp/cocopp.html)) package takes data generated with the [COCO framework](https://github.com/numbbo/coco) to compare continuous opitmizers and produces output figures and tables in &lt;tt class=&quot;rst-docutils literal&quot;&gt;html&lt;/tt&gt; format and for including into LaTeX-documents.## Installation       pip install cocopp## UsageThe main method of the [`cocopp`](https://numbbo.github.io/gforge/apidocs-cocopp/cocopp.html) package is [`main`](https://numbbo.github.io/gforge/apidocs-cocopp/cocopp.rungeneric.html#main) (currently aliased to [`cocopp.rungeneric.main`](https://numbbo.github.io/gforge/apidocs-cocopp/cocopp.rungeneric.html#main)). The [`main`](https://numbbo.github.io/gforge/apidocs-cocopp/cocopp.rungeneric.html#main) method also allows basic use of the post-processing through a shell command-line interface. The recommended use is however from an IPython/Jupyter shell or notebook:&lt;pre class=&quot;py-doctest&quot;&gt;&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;py-keyword&quot;&gt;import&lt;/span&gt; cocopp&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; cocopp.main(&lt;span class=&quot;py-string&quot;&gt;'exdata/my_output another_folder yet_another_or_not'&lt;/span&gt;)  &lt;span class=&quot;py-comment&quot;&gt;&lt;/span&gt;&lt;/pre&gt;postprocesses data from one or several folders, for example data generated with the help from the [`cocoex`](https://numbbo.github.io/gforge/apidocs-cocoex) module. Each folder should contain data of a full experiment with a single algorithm. (Within the folder the data can be distributed over subfolders). Results can be explored from the &lt;tt class=&quot;rst-docutils literal&quot;&gt;ppdata/index.html&lt;/tt&gt; file, unless a a different output folder is specified with the &lt;tt class=&quot;rst-docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-o&lt;/span&gt;&lt;/tt&gt; option. **Comparative data** from over 200 full experiments are archived online and can be listed, filtered, and retrieved from [`cocopp.archives`](https://numbbo.github.io/gforge/apidocs-cocopp/cocopp.archives.html) (of type [`OfficialArchives`](https://numbbo.github.io/gforge/apidocs-cocopp/cocopp.archiving.OfficialArchives.html)) and processed alone or together with local data. For example&lt;pre class=&quot;py-doctest&quot;&gt;&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; cocopp.archives.bbob(&lt;span class=&quot;py-string&quot;&gt;'bfgs'&lt;/span&gt;)  &lt;span class=&quot;py-comment&quot;&gt;&lt;/span&gt;&lt;span class=&quot;py-output&quot;&gt;['2009/BFGS_...&lt;/span&gt;&lt;/pre&gt;lists all data sets run on the `bbob` testbed containing &lt;tt class=&quot;rst-docutils literal&quot;&gt;'bfgs'&lt;/tt&gt; in their name. The first in the list can be postprocessed by&lt;pre class=&quot;py-doctest&quot;&gt;&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; cocopp.main(&lt;span class=&quot;py-string&quot;&gt;'bfgs!'&lt;/span&gt;)  &lt;span class=&quot;py-comment&quot;&gt;&lt;/span&gt;&lt;/pre&gt;All of them can be processed like&lt;pre class=&quot;py-doctest&quot;&gt;&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; cocopp.main(&lt;span class=&quot;py-string&quot;&gt;'bfgs*'&lt;/span&gt;)  &lt;span class=&quot;py-comment&quot;&gt;&lt;/span&gt;&lt;/pre&gt;Only a trailing `*` is accepted and any string containing the substring is matched. The postprocessing result of&lt;pre class=&quot;py-doctest&quot;&gt;&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; cocopp.main(&lt;span class=&quot;py-string&quot;&gt;'bbob/2009/*'&lt;/span&gt;)  &lt;span class=&quot;py-comment&quot;&gt;&lt;/span&gt;&lt;/pre&gt;can be browsed at [https://numbbo.github.io/ppdata-archive/bbob/2009-all](https://numbbo.github.io/ppdata-archive/bbob/2009-all). To display algorithms in the background, the &lt;tt class=&quot;rst-docutils literal&quot;&gt;genericsettings.background&lt;/tt&gt; variable needs to be set:&lt;pre class=&quot;py-doctest&quot;&gt;&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; cocopp.genericsettings.background = {&lt;span class=&quot;py-builtin&quot;&gt;None&lt;/span&gt;: cocopp.archives.bbob.get_all(&lt;span class=&quot;py-string&quot;&gt;'bfgs'&lt;/span&gt;)}  &lt;span class=&quot;py-comment&quot;&gt;&lt;/span&gt;&lt;/pre&gt;where [`None`](http://docs.python.org/library/constants.html#None) invokes the default color (grey) and line style (solid) &lt;tt class=&quot;rst-docutils literal&quot;&gt;genericsettings.background_default_style&lt;/tt&gt;. Now we could compare our own data with the first &lt;tt class=&quot;rst-docutils literal&quot;&gt;'bfgs'&lt;/tt&gt;-matching archived algorithm where all other archived BFGS data are shown in the background with the command&lt;pre class=&quot;py-doctest&quot;&gt;&lt;span class=&quot;py-prompt&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; cocopp.main(&lt;span class=&quot;py-string&quot;&gt;'exdata/my_output bfgs!'&lt;/span&gt;)  &lt;span class=&quot;py-comment&quot;&gt;&lt;/span&gt;&lt;/pre&gt;</longdescription>
</pkgmetadata>