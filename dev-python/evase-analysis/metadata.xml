<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI Tests](https://github.com/tony-zeidan/EvaseAnalysis/actions/workflows/ci_tests.yml/badge.svg)](https://github.com/tony-zeidan/EvaseAnalysis/actions/workflows/ci_tests.yml)# Evase Analysis LibraryThis library intends to help users detect SQL Injection vulnerabilities from their source code. It has several structures that take-in Python source code and use abstract-syntax trees (ASTs) to analyze for such vulnerabilities.The code was initially part of a much bigger project, but as to provide separation of concerns, the functionalityfor detecting the SQL injection-related vulnerabilities was separated out into this package.## What's NewIn the latest version of the library:- The performance of the code has been slightly improved by the removal of creating unnecessary expensive `NodeVisitor` and `NodeTransformer` objects.  - Instead, the objects are created as a single instance and have their states reset.- Most classes in the system now use `@property` annotations for getters and setters now.- The `ProjectAnalysisStruct` class can now be queried for module structures like a dictionary.  - By passing the name of the module, you can retrieve the corresponding `ModuleAnalysisStruct`.- The functions are able to fail more gracefully when encountering unexpected AST nodes.- The Breadth-First search functions keep track of paths traversed.  - The main traversal function (`traversal_from_exec`) now outputs a mapping of ending nodes to their possible paths.- The dependency graph generated by `ProjectAnalysisStruct` has been tested for many use cases and seems to work very well.- Some bugs in the module imports generated by `ModuleImportResolver` have been fixed.  - The resolver now better handles variant imports like:    - `from &lt;one or more (.)&gt; import &lt;function|module|*&gt;`    - If we can backtrack to a module (through the count of '.' characters) we assume the object being imported is a module, otherwise it is a function.- The graph node grouping mechanism in `AnalysisPerformer` has had some bugs resolved.- Nodes in the graph now appear with the form `&lt;package style name&gt;:&lt;function name&gt;` for functions found WITHIN the analysis of the code (not external libraries).## IssuesThere are still a variety of issues with the handling of the various errors that our traversal mechanisms encounter.- Those `Flask` endpoints that do not accept function parameters, (POST-type requests) aren't considered vulnerable due to inadequacies with the `collect_vulnerable_vars` function.- There are many ways of writing imports, and it is likely that the `ModuleImportResolver` doesn't consider all of these.## UsageThis package was developed initially with the intention that it be used in the Backend for the Evase web-application,so it is structured as such. To use it in a program, the user first needs to specify information pertaining to the project.The user is able to analyze the project with an instance of the `AnalysisPerformer` class. ```pythonfrom evase.structures.analysisperformer import AnalysisPerformercode_analyzer = AnalysisPerformer(    project_name=&quot;myProject&quot;,    project_root=&quot;&lt;filepath to root&gt;&quot;)code_analyzer.perform_analysis()print(code_analyzer.get_results())# optionally, output to JSONcode_analyzer.results_to_JSON(&quot;&lt;output directory&gt;&quot;)```Behind the scenes, this instance is performing multiple traversals of the abstract syntax trees (ASTs) generated fromthe source code in the project.## Important InformationThe code made in this package relies on various functions applied to Abstract Syntax Trees (ASTs).Many of the functions in the code are required to perform other functions.The functions directly relating to ASTs at a low level require that the input ASTs be modified. The functions inside of input ASTs must have their scopes resolved. ```python# example.pydef foo():  print(&quot;FOO&quot;)  class Bar:    def foo(self):    print(&quot;FOO&quot;)```In this example, the AST output would look something like:```&lt;FunctionDef name='foo'&gt;&lt;ClassDef name='Bar'&gt;  &lt;FunctionDef name='foo'&gt;```As you can see, while traversing using a `NodeVisitor` it would be difficult to determine the scope of the innerfunction.As such we created the `ScopeResolver` such that the output AST would look something like:```&lt;FunctionDef name='foo'&gt;&lt;ClassDef name='Bar'&gt;  &lt;FunctionDef name='Bar.foo'&gt;```For functions involving the analysis of dependencies, the import nodes inside of input ASTs must also have their`module` attribute be absolute rather than relative. The importable items from the imported module must also be directlyspecified if an import in the form of `&lt;from | import&gt; ... *` is being used. Take the following script for example:```python# package/imported.pydef foo():  print(&quot;FOO&quot;)  def bar():  print(&quot;BAR&quot;)  class Bar:    def bar(self):    print(&quot;BAR&quot;)# package/inner/example.pyfrom ..imported import *```Imports in this form are very hard to analyze because ASTs don't provide any information other than the form of theimport. The AST for `package/inner/example.py` would look something like:```&lt;Import module=None names=&quot;*&quot;&gt;```It's clear that this doesn't help much when analyzing dependencies. For this reason we created the `SurfaceLevelVisitor`and `ModuleImportResolver` that work in tandem.The `SurfaceLevelVisitor` collects all the surface level importable items from a module. We then combine theseinto a list and make an instance of `ModuleImportResolver` that resolves module names in import nodes and their importeditems. Using these two instances properly retrieves the following AST.```&lt;Import module=&quot;package.imported&quot; names=[&quot;foo&quot;, &quot;bar&quot;, &quot;Bar&quot;]&gt;```Most of the classes within this library rely on the fact that the scopes will be resolved, and that the imports arecorrectly resolved.## InstallationThis package is available on PyPI! You can install it using:```pip install evase-analysis```Or you can simply clone the repository and run:```pip install .```(in the directory with `pyproject.toml`)</longdescription>
</pkgmetadata>