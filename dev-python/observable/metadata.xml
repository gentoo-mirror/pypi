<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># observable[![Build Status](https://travis-ci.com/timofurrer/observable.svg?branch=master)](https://travis-ci.com/timofurrer/observable)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)**pyobservable** is a minimalist event system for python. It provides you an easy-to-use interface to trigger arbitrary functions when specific events occur.```pythonfrom observable import Observableobs = Observable()@obs.on(&quot;error&quot;)def error_handler(message):    # do some fancy error handling    logging.error(f&quot;An error occured: {message}&quot;)...def do_time_travel():    # do some time traveling    ...    if year != 1291:        obs.trigger(&quot;error&quot;, &quot;Time travel to 1291 didn't work&quot;)```**Note:** We are Python 3 only! Only Python Versions &gt;= 3.5 are supported. Use [v0.3.2](https://pypi.org/project/observable/0.3.2/) for older Python Versions.## How to useUse a `pip` to install it from PyPI:    pip install observableAfter completion you can start using `observable`:```pythonfrom observable import Observableobs = Observable()```## Usage### `on`: Register event handler with `on`There are two ways to register a function to an event.&lt;br /&gt;The first way is to register the event with a decorator like this:```python@obs.on(&quot;error&quot;)def error_func(message):    print(&quot;Error: %s&quot; % message)```The second way is to register it with a method call:```pythondef error_func(message):    print(&quot;Error: %s&quot; % message)obs.on(&quot;error&quot;, error_func)```### `once`: Register event handler with `once``once` works like `on`, but once the event handler is triggered it will be removed and cannot be triggered again.### `trigger`: trigger eventYou can trigger a registered event with the `trigger` method:```pythonobs.trigger(&quot;error&quot;, &quot;This is my error message&quot;)```If no handler for the event `error` could be found an `Observable.NoHandlerFound`-Exception will be raised.### `off`: remove handler and eventsRemove a handler from a specified event:```pythonobs.off(&quot;error&quot;, error_func)``````pythonobs.off(&quot;error&quot;, [error_func, second_error_func])```Remove all handlers from a specified event:```pythonobs.off(&quot;error&quot;)```Clear all events:```pythonobs.off()```### `get_all_handlers`, `get_handlers` and `is_registered`: Check which handlers are registeredImagine you registered the following handlers:```python@obs.on(&quot;success&quot;)def success_func():    print(&quot;Success!&quot;)@obs.on(&quot;error&quot;)def error_func(message):    print(&quot;Error: %s&quot; % message)```Then you can do the following to inspect the registered handlers:```python&gt;&gt;&gt; obs.get_all_handlers(){'success': [&lt;function success_func at 0x7f7f32d0a1e0&gt;], 'error': [&lt;function error_func at 0x7f7f32d0a268&gt;]}&gt;&gt;&gt; obs.get_handlers(&quot;success&quot;)[&lt;function success_func at 0x7f7f32d0a1e0&gt;]&gt;&gt;&gt; obs.get_handlers(&quot;other_event&quot;)[]```****&lt;p align=&quot;center&quot;&gt;This project is published under [MIT](LICENSE).&lt;br&gt;A [Timo Furrer](https://tuxtimo.me) project.&lt;br&gt;- :tada: -&lt;/p&gt;*</longdescription>
</pkgmetadata>