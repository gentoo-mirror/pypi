<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**********pytest-plt**********``pytest-plt`` provides fixtures forquickly creating Matplotlib plots in your tests.Create PDF plots in one line with the ``plt`` fixture... code-block:: python   def test_rectification(plt):       values = list(range(-10, 11))       rectified = [v if v &gt; 0 else 0 for v in values]       assert all(v &gt;= 0 for v in rectified)       plt.plot(values, label=&quot;Original&quot;)       plt.plot(rectified, label=&quot;Rectified&quot;)       plt.legend().. image:: https://i.imgur.com/2BFq2G2.pngTo use these fixtures, install with.. code-block:: bash   pip install pytest-pltAnd pass the ``--plots`` option.. code-block:: bash   pytest --plotsUsage=====The ``plt`` fixture allows you to create PDF plots with as little as one line.It exposes the ``matplotlib.pyplot```interface &lt;https://matplotlib.org/api/pyplot_summary.html&gt;`_.When running your tests,pass the ``--plots`` option (with optional directory name)to generate the plots(in this case, we save them to the &quot;my_plots&quot; directory):.. code-block:: bash   pytest --plots my_plotsIf no directory name is provided,plots will be saved to the &quot;plots&quot; directory:.. code-block:: bash   pytest --plotsIf you do not pass the ``--plots`` option,no Matplotlib commands will be executed,speeding up test execution.Custom filenames and extensions-------------------------------``pytest-plt`` attempts to give each plota readable name without being too long.Sometimes the default name is not good enough,so ``plt`` allows you to change it using ``plt.saveas``:.. code-block:: python   def test_rectification(plt):       values = list(range(-10, 11))       rectified = [v if v &gt; 0 else 0 for v in values]       assert all(v &gt;= 0 for v in rectified)       plt.plot(values, label=&quot;Original&quot;)       plt.plot(rectified, label=&quot;Rectified&quot;)       plt.legend()       plt.saveas = &quot;test_rec.png&quot;The ``plt.saveas`` attribute contains thefilename that will appear in the plots directory.You can modify this attribute within your testto change the filename that will be usedto save the plot for a given test function.In the above example, running pytest with``pytest --plots my_plots`` will result ina ``my_plots/test_rec.png`` file.It should be noted that the file extensionin ``plt.saveas`` will be used when saving the plot.That is, in the example above,the resulting plot will be a true PNG file,not a PDF with an incorrect ``.png`` extension.You can use the following snippet to changethe file extension in a specific testif the PDF format is unsuitable... code-block:: python   plt.saveas = &quot;%s.png&quot; % (plt.saveas[:-4],)Using plt.show--------------If you want to inspect a figure usingthe GUI that pops up with ``plt.show()``,you can achieve this by saving a plot with the``.pkl`` or ``.pickle`` extension.pytest-plt will pickle the current figure objectfor later inspection.Building on the previous example,you can change the ``saveas`` attribute like so:.. code-block:: python   def test_rectification(plt):       values = list(range(-10, 11))       rectified = [v if v &gt; 0 else 0 for v in values]       assert all(v &gt;= 0 for v in rectified)       plt.plot(values, label=&quot;Original&quot;)       plt.plot(rectified, label=&quot;Rectified&quot;)       plt.legend()       plt.saveas = &quot;test_rec.pkl&quot;Then use the following snippet to inspect the figure... code-block:: python   &gt;&gt;&gt; import pickle   &gt;&gt;&gt; import matplotlib.pyplot as plt   &gt;&gt;&gt; with open(&quot;path/to/test_rec.pkl&quot;, &quot;rb&quot;) as fh:   ...     fig = pickle.load(fh)   &gt;&gt;&gt; plt.show()Configuration=============The following configuration options exist.plt_filename_drop-----------------``plt_filename_drop`` accepts a list of regular expressionsfor parts of the filename to drop.By default, plot filenames contain the full ``nodeid``for the test in question,with directory separators (``/``) replaced with dots (``.``).If all tests reside in the same project directory,that name will appear at the start of all plot filenames,making them unnecessarily long.In this case, we use the carat ``^`` to ensure thatour regex matches the start of the filename only,and we remove the trailing dot as well (``\.``):.. code-block:: ini   plt_filename_drop =       ^project\.If your tests always reside in a directory with a particular name(e.g. &quot;tests&quot;),you can safely remove this name wherever it occurs.In this case, we do not use the carat to allow the regex to match anywherein the filename.Be careful, as this will match any directorythat ends with &quot;tests&quot; (e.g. &quot;other_tests&quot;),and will remove the ends of these directory names... code-block:: ini   plt_filename_drop =       ^project\.       tests\.When using ``plt_filename_drop``, take care to avoid collisions(situations where plots from two different testswill end up with the same name).In this case, the plots of later testswill override those of earlier tests with the same name.plt_dirname-----------``plt_dirname`` changes the default directory name for output plots.The default ``plt_dirname`` is ``&quot;plots&quot;``.To change it to ``&quot;test_plots&quot;``, for example, add the followingto your ``pytest.ini``... code-block:: ini   plt_dirname = test_plotsA directory provided at the command line with the ``--plots`` flagtakes priority over ``plt_dirname``.See the full`documentation &lt;https://www.nengo.ai/pytest-plt&gt;`__for more details and configuration options.***************Release History***************.. Changelog entries should follow this format:   version (release date)   ======================   **section**   - One-line description of change (link to Github issue/PR).. Changes should be organized in one of several sections:   - Added   - Changed   - Deprecated   - Removed   - Fixed1.1.0 (August 17, 2020)=======================**Added**- Added the ability to save plots as pickle files using the  ``.pkl`` or ``.pickle`` extensions with ``plt.saveas``. (`#23`_).. _#23: https://github.com/nengo/pytest-plt/pull/231.0.1 (October 28, 2019)========================**Fixed**- We now use Windows-compatible plot filenames by default.  Colons in plot filenames are replaced with hyphens.  Filenames specified through ``plt.saveas`` are not modified.  (`#17`_, `#21`_).. _#17: https://github.com/nengo/pytest-plt/issues/17.. _#21: https://github.com/nengo/pytest-plt/pull/211.0.0 (August 9, 2019)======================Initial release of ``pytest-plt``!Thanks to all of the contributors for making this possible!</longdescription>
</pkgmetadata>