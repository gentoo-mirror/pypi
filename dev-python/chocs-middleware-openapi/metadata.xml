<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chocs-OpenApi &lt;br&gt; [![PyPI version](https://badge.fury.io/py/chocs-middleware.openapi.svg)](https://pypi.org/project/chocs-middleware.openapi/) [![CI](https://github.com/kodemore/chocs-openapi/actions/workflows/main.yaml/badge.svg)](https://github.com/kodemore/chocs-openapi/actions/workflows/main.yaml) [![Release](https://github.com/kodemore/chocs-openapi/actions/workflows/release.yml/badge.svg)](https://github.com/kodemore/chocs-openapi/actions/workflows/release.yml) [![codecov](https://codecov.io/gh/kodemore/chocs-openapi/branch/main/graph/badge.svg?token=GWMTNY5G0N)](https://codecov.io/gh/kodemore/chocs-openapi) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)OpenApi middleware for chocs library.Newest OpenAPI Specification (v.3.x) can be easily integrated into Chocs through application's middleware. Validation is performed via [JsonSchema Draft-7.0 specification](https://json-schema.org) and all commonly used features are supported.## FeaturesOpen api integration can be used to:- validate request's body- validate request's path parameters- validate request's headers- validate request's query parameters- validate request's cookies  - generate dtos from openapi file## InstallationWith pip,```shellpip install chocs-middleware.openapi```or through poetry```shellpoetry add chocs-middleware.openapi```# Usage## Using your OpenAPI fileChocs can read json and yaml files, this example will cover yaml usage although the only difference is the file extension.```pythonimport chocsfrom chocs_middleware.openapi import OpenApiMiddlewarefrom os import path# absolute path to file containing open api documentation; yaml and json files are supportedopenapi_filename = path.join(path.dirname(__file__), &quot;/openapi.yml&quot;)# instantiating application and passing open api middlewareapp = chocs.Application(OpenApiMiddleware(openapi_filename, validate_body=True, validate_query=True))# the registered route must correspond to open api route within `path` section.# if request body is invalid the registered controller will not be invoked@app.post(&quot;/pets&quot;)def create_pet(request: chocs.HttpRequest) -&gt; chocs.HttpResponse:  ...  return chocs.HttpResponse(status=200)```Complete integration example can be [found here](./examples/input_validation_with_open_api/openapi.yml)&gt; Keep in mind registered route has to match 1:1 the specified route inside `paths` section inside your OpenApi documentation## Validating request bodyBelow is very simple schema to validate request body of a `POST /pet` request. Request body is required, should be valid json request and contain the following properties:- name (string)- tags (array of string)- id (optional string)`openapi.yml````yamlopenapi: &quot;3.0.0&quot;info:  version: &quot;1.0.0&quot;  title: &quot;Pet Store&quot;paths:  /pets:    post:      description: Creates a new Pet      requestBody:        description: Pet        required: true        content:          application/json:            schema:              $ref: &quot;#/components/schemas/Pet&quot;      responses:        200:          description: &quot;Success&quot;components:  schemas:    Pet:      type: object      required:        - name        - tag      properties:        id:          type: integer        name:          type: string        tag:          type: array          items:            type: string````app.py````pythonimport chocsfrom chocs_middleware.openapi import OpenApiMiddlewarefrom os import pathopenapi_filename = path.join(path.dirname(__file__), &quot;/openapi.yml&quot;)app = chocs.Application(OpenApiMiddleware(openapi_filename, validate_body=True))@app.post(&quot;/pets&quot;)def create_pet(request: chocs.HttpRequest) -&gt; chocs.HttpResponse:  pet = request.parsed_body # here we will get valid pet  return chocs.HttpResponse(status=200)chocs.serve(app)````create_pet` controller will be only invoked if request contains valid body. Pet's data can be accessed through `request.parsed_body` which is a dict-like object.## Json schema supportChocs uses JSON Schema to validate your open api definitions with full draft-7 support and almost complete 2019-09 standard support. This means you can use almost every feature described on the [understanding json schema](https://json-schema.org/understanding-json-schema/reference/index.html) webpage. The webpage is a great resource full of examples and detailed descriptions around JSON Schema. &gt; There are some caveats around `allOf` validator:&gt; - all object schemas inside `allOf` definition are automatically composed into a single object definition&gt; - when combining string validators make sure format validator is the last validator in the pipeline otherwise validation might fail due to string casting</longdescription>
</pkgmetadata>