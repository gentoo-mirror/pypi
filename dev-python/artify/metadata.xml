<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Upload to Nexus, Upload files to hooks, Modify version number, Syncing of GitLab/GitHub type repository, Generate template files, Create Git tags, Extract commands from Git commit messages, Create SonarQube projects, Archive file(s), Create changelog.md file[![Downloads](https://static.pepy.tech/personalized-badge/artify?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=orange&amp;left_text=Downloads)](https://pepy.tech/project/artify)Installation============You can download and install the latest version of this software from the Python package index (PyPI) as follows::    pip install --upgrade artifyUsage=====    python -m artify --help=    python -m artify --command &lt;command&gt; [Options]or`python -m artify -c &lt;command&gt; [Options]`**Params**command &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nexus, syncrepo, deploy, deltav, create, extract, initialize, archive&lt;br&gt;Create CHANGELOG.md file========================`python -m artify -c changelog`**Optional params**--projectname &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Used to specify project when solution has more than 1 project. For .NET/NET core projects**.Net/.Netcore example below:**`python -m artify -c changelog --projectname Client`&lt;br&gt;Upload to Nexus===============    python -m artify -c nexus -f &lt;format&gt; -n &lt;artifact_name&gt; -h &lt;nexus_repository_base_url&gt;**Important**Artifact name should include artifact id and version number. E.g example-ws-1.0.0.war**Params**-f, --format &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Nexus upload format. Types supported: raw, npm, maven, nuget, pypi, helm-w, --workdirectory &amp;nbsp; &amp;nbsp; &amp;nbsp; Working directory of artifact to be uploaded to Nexus repository-n, --artifactname &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Artifact name-r, --repository &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Nexus repository to upload to: e.g &lt;repository&gt;-snapshots-g, --groupid &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Group ID for Maven2 type repository, Environment variable: NEXUS_GROUP_ID-d, --directory &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Directory for RAW type repository-u, --username &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Username of nexus user, Environment variable: NEXUS_USERNAME-p, --password &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; Password of nexus user, Environment variable: NEXUS_PASSWORD--proxy &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Sets Http proxy--proxysec &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Sets Https proxy**Optional Parameter(s)**--file2  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; Allow second file to be upload, will be uploaded as a classifier&lt;br&gt;### Environment variable(s) (Required)**CI_COMMIT_BRANCH** &amp;nbsp;&amp;nbsp; The pipeline CI branch that the Nexus upload is being initiated from### Environment variables (Optional if set with -u, -p, -g parameter above)**NEXUS_GROUP_ID** &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Group ID of the project e.g com.testing.testapplication**NEXUS_USERNAME** &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Username of nexus user that will upload artifact**NEXUS_PASSWORD** &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Password of nexus user that will upload artifact&lt;br&gt;Deploy App using custom AWX host================================    python -m artify -c deploy -f &lt;manifest_file.yml&gt; -h &lt;awx_host&gt;### Environment variables need**DEPLOY_TOKEN** &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Token used to deploy application&lt;br&gt;Change Package version======================Artify uses semantic version 2.0.`python -m artify -c deltav -t patch -a npm``python -m artify -c version -t patch -a flutter``python -m artify -c deltav -t auto -a other --file=setup.py``python -m artify -c version -t minor -a gradle --file=version.properties`**Params**-a, --archtype &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; npm, gradle, flutter, maven, dotnet, other-t, --type &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; major, minor, patch, prerelease, auto**Optional Params**--preValue &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Prerelease version value e.g SNAPHOT, RELEASE, BUILD, beta, alpa&lt;br&gt;--getversion &amp;nbsp; &amp;nbsp; &amp;nbsp; Get the current application version--nocommit &amp;nbsp; &amp;nbsp; &amp;nbsp;  Does not create feature branch with version change--file &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; File name that you want to update version number. It should be relative to artify execution directory--file2 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; An additional file that you want to update version number. It should be relative to artify execution directory&lt;br&gt;Push changes to GitLab/GitHub repository=================================### Recommendation: You can create a feature branch, then perform your code changes before pushing changes to remote    python -m artify -c syncrepo -m &lt;message&gt; -b **Params**  -c, --message &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Commit message -b, --branch &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Optional, by default, it will push to 'develop' branch### Environment variables need**PRIVATE_TOKEN**, popularly known as personal access token is needed to perform the push. This can be created by following this guide:[Creating a personal access token: GitLab](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html)[Creating a personal access token: GitHub](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)**N.B** &amp;nbsp; A commit is performed automatically followed by a push&lt;br&gt;Creating Tags==============`python -m artify -c syncrepo -m tag`**Optional Params**--projectname &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Used to specify project when solution has more than 1 project. For .NET/NET core projects`python -m artify -c syncrepo -m tag` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Creates a git tag of repository branch that task is executed on e.g v-1.0.0-a56def9`python -m artify -c syncrepo -m tag --projectname Client` &amp;nbsp; Creates a git tag of repository branch for the Client project that task is executed on (**For .NET/.NET core projects**) e.g v-1.0.0.0-b56dcf9**N.B** Please set environment variable **CI_COMMIT_SHORT_SHA** (This variable is already set in GitLab type repository)&lt;br&gt;Generate Template files=======================### Generate template .gitlab-ci.yml file`python -m artify -c create -f gitlabci` ### Geneate template manifest.yml file`python -m artify -c create -f manifest`**Params**-f, --file &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; File template to generate**Supported files**- .gitlab-ci.yml- manifest.yml&lt;br&gt;Extract commands from GIT message=================================`python -m artify -c extract`**N.B** If manifest.yml file is present, it will update version number in that file also.**Parameters**- version/deltav - specifies type of version change e.g &quot;version&quot;: &quot;patch&quot;, &quot;deltav&quot;: &quot;patch&quot;, &quot;version&quot;: &quot;minor&quot;, &quot;version&quot;: &quot;auto&quot;- archtype - specifies project architecture e.g &quot;archtype&quot;: &quot;npm&quot;, &quot;archtype&quot;: &quot;gradle&quot;, &quot;archtype&quot;: &quot;flutter&quot;, &quot;archtype&quot;: &quot;other&quot;**Environment variable(s) needed**CI_COMMIT_MESSAGE &amp;nbsp; &amp;nbsp; &amp;nbsp; This the variables that is used to extract dictionary formatted command**N.B** For GitHub, you can set value using commands below pipeline line (*.yml):env:&amp;nbsp; &amp;nbsp;CI_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}&lt;br&gt;**Optional Parameters**- branch - speficies branch you want to push changes. If branch is not specified, it push changes to 'develop' branch by default- nocommit - Does not create feature branch with version change- file - File name that you want to update version number. It should be relative to artify execution directory- file2 - An additional file that you want to update version number. It should be relative to artify execution directory**Sample commit messages**1. Added login functionality {&quot;version&quot;: &quot;patch&quot;, &quot;archtype&quot;: &quot;npm&quot;, &quot;branch&quot;: &quot;release-1.0.0&quot; } - Updates the patch version of npm type project, and push to branch called 'release-1.0.0' branch2. Added search functionality {&quot;deltav&quot;: &quot;major&quot;, &quot;archtype&quot;: &quot;gradle&quot; } - Updates the major version of a java project with Gradle build tool3. Added edit functionality {&quot;version&quot;: &quot;minor&quot;, &quot;a&quot;: &quot;flutter&quot; } - Updates the minor version of a flutter project  4. Add filter functionality {&quot;version&quot;: &quot;prerelease&quot;, &quot;archtype&quot;: &quot;npm&quot;, &quot;preValue&quot;: &quot;beta&quot;} - Updates the prerelease value i.e Version 1.0.0 would change to 1.0.0-beta5. Upgrade from Angular 11 to Angular 12 {&quot;version&quot;: &quot;auto&quot;, &quot;archtype&quot;: &quot;gradle&quot;, &quot;branch&quot;: &quot;feature/angular-12&quot;} - Updates the pre-release integer value by 1 e.g 1.0.0-beta1 will change to 1.0.0-beta2&lt;br/&gt;Initialize SonarQube project============================`python -m artify -c initialize -h &lt;SonarQube_base_url&gt; -k &lt;project-key&gt; -n &lt;project-name&gt; -u &lt;username&gt; -p &lt;password&gt; -a &lt;arch_type/os&gt; -l &lt;language&gt;`**Sample command**`python -m artify -c initialize -h &lt;SonarQube_base_url&gt; -k &lt;project-key&gt; -n &lt;project-name&gt; -u &lt;username&gt; -p &lt;password&gt; -l java -a gradle``python -m artify -c initialize -h &lt;SonarQube_base_url&gt; -k &lt;project-key&gt; -n &lt;project-name&gt; -u &lt;username&gt; -p &lt;password&gt; -l java -a maven`&lt;br&gt;**For Windows Runner, Other (JS, TS, Go, Python, PHP, ...)**  python -m artify -c initialize -h &lt;SonarQube_base_url&gt; -k &lt;project-key&gt; -n &lt;project-name&gt; -u &lt;username&gt; -p &lt;password&gt; -l other -a windows&lt;br&gt;**For Linux/macOS runner, Other (JS, TS, Go, Python, PHP, ...)**python -m artify -c initialize -h &lt;SonarQube_base_url&gt; -k &lt;project-key&gt; -n &lt;project-name&gt; -u &lt;username&gt; -p &lt;password&gt; -l other -a linux&lt;br&gt;**Parameters**-l, --language =&gt;  Possible values: JS, TS, Go, Python, PHP, other)-a, --archtype =&gt;  Architecture, OS (depends on usage)-n, --projectname =&gt; Project name.-k, --projectkey =&gt; Project key. This should be a unique identifier for project.-u, --username =&gt; Username for SonarQube. -p, --password =&gt; Password for SonarQube. The user should be able to create projects.**N.B**. The user should have the permission to create/modify projects.python -m artify -c initialize -h &lt;SonarQube_base_url&gt; -k &lt;project-key&gt; -n &lt;project-name&gt; -u &lt;username&gt; -p &lt;password&gt; -a php&lt;br&gt;Archive file(s)========================================Uses Shutil Python library to create archive file`python -m artify -c archive -n &lt;archive_name&gt; -f &lt;archive_format&gt; -w &lt;root_dir&gt; -d base_dir&gt;`**Parameters**-n, --archivename  Name for the archive file that will be created.-f, --format       Format for the archive e.g zip, tar, gztar, bztar, xztar.-w, --rootdir      Root directory is a directory that will be the root directory of the archive.-d, --basedir      Base directory is the directory where we start archiving from.</longdescription>
</pkgmetadata>