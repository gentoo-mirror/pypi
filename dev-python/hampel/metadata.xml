<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hampel&gt; **Warning:** Starting from version 1.0.1, there are **breaking changes** in this library. Please review the [Usage](#usage) section for details and update your code accordingly.The Hampel filter is generally used to detect anomalies in data with a timeseries structure.It basically consists of a sliding window of a parameterizable size. For each window, each observation will be compared with the Median Absolute Deviation (MAD).The observation will be considered an outlier in the case in which it exceeds the MAD by n times (the parameter n is also parameterizable).For more details, see the [Related Links](#related-links) section.![usage_visualization.png](img%2Fusage_visualization.png)## Table of Contents- [Installation](#installation)- [Usage](#usage)- [Parameters](#parameters)- [Testing](#testing)- [License](#license)- [Contributing](#contributing)- [Related Links](#related-links)## InstallationTo use the Hampel filter in your Python project, you can install it via pip:```pip install hampel```## UsageHere's a simple example of how to use the Hampel filter:```pythonimport pandas as pdfrom hampel import hampel# Sample data as a pandas.Seriesdata = pd.Series([1.0, 2.0, 3.0, 100.0, 4.0, 5.0, 6.0])# Apply the Hampel filterresult = hampel(data, window_size=3, n_sigma=3.0)print(result.filtered_data)```When you apply the Hampel filter, it returns a `Result` object with the following attributes:- `filtered_data`: The data with outliers replaced.- `outlier_indices`: Indices of the detected outliers.- `medians`: Median values within the sliding window.- `median_absolute_deviations`: Median Absolute Deviation (MAD) values within the sliding window.- `thresholds`: Threshold values for outlier detection.You can access these attributes as follows:```pythonresult = hampel(data, window_size=3, n_sigma=3.0)filtered_data = result.filtered_dataoutlier_indices = result.outlier_indicesmedians = result.mediansmad_values = result.median_absolute_deviationsthresholds = result.thresholds```If you want to directly apply hampel filter to multiple columns in a  `pandas.Dataframe`,follow this code:```pythonimport pandas as pdfrom hampel import hampeldf = pd.DataFrame({    'A': [1.0, 2.0, 3.0, 100.0, 4.0, 5.0, 6.0],    'B': [7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0]})# We are just getting the filtered data in this casefiltered_df = df.apply(lambda x: hampel(x).filtered_data, axis=0)print(df)```## Parameters* `data`: The input 1-dimensional data to be filtered (pandas.Series or numpy.ndarray).* `window_size` (optional): The size of the moving window for outlier detection (default is 5).* `n_sigma` (optional): The number of standard deviations for outlier detection (default is 3.0).## TestingIf you want to run the tests, simple run:```make test```## LicenseSee the [LICENSE](LICENSE) file for details.## ContributingContributions are welcome! Feel free to open issues, submit pull requests, or suggest improvements.## Related Linkshttps://medium.com/wwblog/clean-up-your-time-series-data-with-a-hampel-filter-58b0bb3ebb04https://en.wikipedia.org/wiki/Median_absolute_deviation</longdescription>
</pkgmetadata>