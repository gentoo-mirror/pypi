<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Documentation of mk tool`mk` is a CLI tool that aims to ease contribution to any open-source project byhiding repository implementation details from the casual contributor. With it,you can contribute without having to know all the build and testing tools thatthe project team already uses, which often have strange requirements.![mk-command-line-screenshot](images/mk-social-preview.png)If you ever asked yourself one of the below questions, probably you would wantto try `mk` and if it can help you- How do I run tests locally?- Which are the test suites I can run?- Is my change ready to be reviewed?- How can I propose a change for review?Run `mk` inside any cloned repository to display which options you have. Noconfiguration file is needed as the tool will look for common tools used by therepository and expose their commands.`mk` is inspired by tools as [make](make), [waf](waf), [taskfile](taskfile),[tox](tox), [npm](npm), [yarn](yarn) and [pre-commit](pre-commit), but **it doesnot aim to replace them**. Instead, it aims to provide a unified interface forcalling them that is friendly even for those that never used these tools.## InstallationWe recommend using [`pipx`](https://pipxproject.github.io/pipx/) to install `mk`to avoid potential dependency conflicts. You can use `pip3 install --user mk` aswell.```shellpipx install mk```## How it works`mk` inspects the current core repository and detects build tools used by theproject, like pre-commit, tox, npm and exposes their commands to the user in a**predictable** way.For example, you should be able to lint any code repository running only`mk lint`, regardless of author preference for picking one way to execute themor another.Be assured that `mk` does not make use of AI to guess what needs to run. As mostprojects use relatively similar patterns, it is easy to identify the one toexecute.At this moment, if two tools expose the same command name, the tool will add anumber to its name. In the future, we may decide to either chain them under asingle name or allow some tools to shadow others and avoid duplicates.## What are the main benefitsOne of the benefits of `mk` is that it should reduce the amount ofhow-to-contribute documentation the author needs to write.A considerable amount of maintainer effort can go into producing documentationthat makes it easier for someone to contribute.Some projects are less affected than others. That is usually related to how wellthe potential contributors know the practices used by the project. Still, ifyour project has a wide range of uses, you will quickly discover that newbiecontributors may hit a knowledge wall. Such a barrier will likely prevent mostof them from becoming active contributors. The remaining ones will flood theproject with questions, distracting other maintainers from doing more advancedtasks.Unless you want to deter contributions, you should plan to make it as easy aspossible for people to contribute. That is one area where `mk` aims to help.## AliasesSimilar to [git aliases](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases),`mk` allows typing as little as possible by automatically aliasing commands. Forexample, you can run `mk lint` just by typing `mk l` as long there is no othercommand starting with the same letter. Aliases are available for one, two andthree letters prefixes.## Using mk to propose changes to projectsInstead of writing a long list of tasks to follow, we can use a tool that tellshim what to do next. For example, `mk` has a built-in command named `up(load)`that aims to ease preparing a local change from being proposed to the project.This command detects if it should use GitHub workflow or Gerrit and will run theappropriate commands for opening or updating a CR/PR. Users will be allowed toupload a change only after passing the minimal set of local tests, preventingnoisy mistakes or clog CI/CD pipelines.In addition to linting, it will also check that the repository is not in dirtystatus or that the testing did not leave untracked files.## Planned features- A persistent state of each command run - This means that it will know if a  specific command was run and if it failed or not. The state would be linked to  the repository state, so modifying a tracked file would reset the state to be  unknown. (#20)- Configuration file where additional actions can be added. (#21)- Dependencies between commands. While some tools support dependencies, many do  not. You should be able to declare that a specific command would run only  after another one already passed. (#22)- Ability to generate CI/CD pipelines so the user would spend less time writing  non-portable configurations. (#23)[make]: https://www.gnu.org/software/make/[nox]: https://nox.thea.codes/en/stable/[npm]: https://www.npmjs.com/[pre-commit]: https://pre-commit.com/[taskfile]: https://taskfile.dev/#/[tox]: https://github.com/tox-dev/tox/[waf]: https://waf.io/[yarn]: https://yarnpkg.com/</longdescription>
</pkgmetadata>