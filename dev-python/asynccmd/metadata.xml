<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |codecov| |PyPI version| |PyPI|asynccmd========Async implementation of Cmd Python lib.Asynccmd is a library to build command line interface for you asyncioproject.It's very simple like original Cmd libhttps://docs.python.org/3.6/library/cmd.html.The mechanic is very similar. You have Cmd superclass, you can overrideclass method and add yours own.Features---------  support command line for Windows and POSIX systems-  build-in ``help`` or ``?`` command to list all available command-  build-in ``exit`` command for emergency stop asyncio loop-  support repeat last cmd command by sending empty stringGetting started---------------Simple example~~~~~~~~~~~~~~This is very simple example to show you main features and how they canbe used.First of all, we are create new class and inherited our ``Cmd`` class.Do not instantiate ``Cmd`` itself.Than create instance of this new class and run loop... code:: python    class SimpleCommander(Cmd):        def __init__(self, mode, intro, prompt):            # We need to pass in Cmd class mode of async cmd running            super().__init__(mode=mode)            self.intro = intro            self.prompt = prompt            self.loop = None        def do_tasks(self, arg):            &quot;&quot;&quot;            Our example method. Type &quot;tasks &lt;arg&gt;&quot;            :param arg: contain args that go after command            :return: None            &quot;&quot;&quot;            for task in asyncio.Task.all_tasks(loop=self.loop):                print(task)        def start(self, loop=None):            # We pass our loop to Cmd class.            # If None it try to get default asyncio loop.            self.loop = loop            # Create async tasks to run in loop. There is run_loop=false by default            super().cmdloop(loop)    # For win system we have only Run mode    # For POSIX system Reader mode is preferred    if sys.platform == 'win32':        loop = asyncio.ProactorEventLoop()        mode = &quot;Run&quot;    else:        loop = asyncio.get_event_loop()        mode = &quot;Reader&quot;    # create instance    cmd = SimpleCommander(mode=mode, intro=&quot;This is example&quot;, prompt=&quot;example&gt; &quot;)    cmd.start(loop)  # prepaire instance    try:        loop.run_forever()  # our cmd will run automatilly from this moment    except KeyboardInterrupt:        loop.stop()`Link tosimple.py &lt;https://github.com/valentinmk/asynccmd/blob/master/examples/simple.py&gt;`__General example~~~~~~~~~~~~~~~We use our simple example, but add some new staff: \* ``sleep_n_print``coroutine that will be called from our cli command \* ``do_sleep`` newmethod (sleep cli command) that add task to event loop.. code:: python    async def sleep_n_print(loop, time_to_sleep=None):        &quot;&quot;&quot;        This is our simple coroutine.        :param time_to_sleep: time to sleep in seconds        :return: await sleep for time_to_sleep seconds        &quot;&quot;&quot;        asyncio.set_event_loop(loop)  # set correct event loop        await asyncio.sleep(int(time_to_sleep))        print(&quot;Wake up! I was slept for {0}s&quot;.format(time_to_sleep)).. code:: python    def do_sleep(self, arg):        &quot;&quot;&quot;        Our example cmd-command-method for sleep. sleep &lt;arg&gt;        :param arg: contain args that go after command        :return: None        &quot;&quot;&quot;        self.loop.create_task(sleep_n_print(self.loop, arg))`Link tomain.py &lt;https://github.com/valentinmk/asynccmd/blob/master/examples/main.py&gt;`__Run our cli and make ``sleep 10`` command 3 times. Now we have 3``sleep_n_print`` async tasks in our event loop. If you use ``tasks``command, you see something like that... code:: shell    example&gt;tasks    &lt;Task pending coro=&lt;sleep_n_print() running at asynccmd\examples\main.py:13&gt; wait_for=&lt;Future pending cb=[Task._wakeup()]&gt;&gt;    &lt;Task pending coro=&lt;Cmd._read_line() running at C:\Program Files\Python35\lib\site-packages\asynccmd\asynccmd.py:141&gt;&gt;    &lt;Task pending coro=&lt;sleep_n_print() running at asynccmd\examples\main.py:13&gt; wait_for=&lt;Future pending cb=[Task._wakeup()]&gt;&gt;    &lt;Task pending coro=&lt;sleep_n_print() running at asynccmd\examples\main.py:13&gt; wait_for=&lt;Future pending cb=[Task._wakeup()]&gt;&gt;    example&gt;    Wake up! I was slept for 10s    Wake up! I was slept for 10s    Wake up! I was slept for 10sAiohttp implementation~~~~~~~~~~~~~~~~~~~~~~This is practical example how to control aiohttp instances. We willcreate two cli command ``start`` and ``stop``. This commands get portnumber as only one argument. Let's make some changes for our generalexample:Create class helper that will be do all aiohttp staff for us... code:: python    class AiohttpCmdHelper:        &quot;&quot;&quot;        Helper class that do all aiohttp start stop manipulation        &quot;&quot;&quot;        port = 8080  # Default port        loop = None  # By default loop is not set        def __init__(self, loop, port):            self.loop = loop            self.port = port        async def handle(self, request):            &quot;&quot;&quot;            Simple handler that answer http request get with port and name            &quot;&quot;&quot;            name = request.match_info.get('name', &quot;Anonymous&quot;)            text = 'Aiohttp server running on {0} port. Hello, {1}'.format(                str(self.port), str(name))            return web.Response(text=text)        async def start(self):            &quot;&quot;&quot;            Start aiohttp web server            &quot;&quot;&quot;            self.app = web.Application()            self.app.router.add_get('/', self.handle)            self.app.router.add_get('/{name}', self.handle)            self.handler = self.app.make_handler()            self.f = self.loop.create_server(self.handler,                                             host='0.0.0.0',                                             port=self.port)            # Event loop is already runing, so we await create server instead            # of run_until_complete            self.srv = await self.f        async def stop(self):            &quot;&quot;&quot;            Stop aiohttp server            &quot;&quot;&quot;            self.srv.close()            await self.srv.wait_closed()            await self.app.shutdown()            await self.handler.shutdown(60.0)            await self.app.cleanup()Now we ready to add ``start`` and ``stop`` command to ``Commander``... code:: python    # Add property to store helper objects        aiohttp_servers = []    # ...    def do_start(self, arg):        &quot;&quot;&quot;        Our example cli-command-method for start aiohttp server. start &lt;arg&gt;        :param arg: Port number        :return: None        &quot;&quot;&quot;        if not arg:  # we use simple check in our demonstration            print(&quot;Error port is empty&quot;)        else:            test = AiohttpCmdHelper(loop=self.loop, port=int(arg))            self.aiohttp_servers.append({'port': int(arg),'server': test})            self.loop.create_task(test.start())    def do_stop(self, arg):        &quot;&quot;&quot;        Our example cli-command-method for stop aiohttp server. start &lt;arg&gt;        :param arg: Port number        :return: None        &quot;&quot;&quot;        if not arg:  # we use simple check in our demonstration            print(&quot;Error! Provided port is empty&quot;)        else:            aiohttp_servers = []            for srv in self.aiohttp_servers:                if srv['port'] == int(arg):                    self.loop.create_task(srv['server'].stop())                else:                    aiohttp_servers.append({'port': srv['port'], 'server': srv['server']})            self.aiohttp_servers = aiohttp_serversWe need to add ``asyncio.set_event_loop(loop)`` addition to our mainexample to prevent aiohttp to create its own loop... code:: python    if sys.platform == 'win32':        loop = asyncio.ProactorEventLoop()        mode = &quot;Run&quot;    else:        loop = asyncio.get_event_loop()        mode = &quot;Reader&quot;    asyncio.set_event_loop(loop)  # set our event loop for aiohttp (fix for Win32)That's all. Now we can run multiple aiohttp server from our code.`Link toaiohttp\_example.py &lt;https://github.com/valentinmk/asynccmd/blob/master/examples/aiohttp_example.py&gt;`__Documentation-------------TBDContributing------------Main stream is fork project, commit changes and send pull request.Contributing to lib you could make in form of feedback, bug reports orpull requests. CONTRIBUTING.md - TBD.Requirements-------------  Python &gt;= 3.5License-------``asynccmd`` is offered under the Apache 2 license.Source code-----------The latest developer version is available athttps://github.com/valentinmk/asynccmd.. |Build Status| image:: https://travis-ci.org/valentinmk/asynccmd.svg?branch=master   :target: https://travis-ci.org/valentinmk/asynccmd.. |codecov| image:: https://codecov.io/gh/valentinmk/asynccmd/branch/master/graph/badge.svg   :target: https://codecov.io/gh/valentinmk/asynccmd.. |PyPI version| image:: https://badge.fury.io/py/asynccmd.svg   :target: https://badge.fury.io/py/asynccmd.. |PyPI| image:: https://img.shields.io/pypi/status/asynccmd.svg   :target: https://img.shields.io/pypi/status/asynccmd.svg</longdescription>
</pkgmetadata>