<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![json2python-models](https://raw.githubusercontent.com/bogdandm/json2python-models/master/etc/logo.png)](https://github.com/bogdandm/json2python-models)[![PyPI version](https://img.shields.io/pypi/v/json2python-models.svg?color=green)](https://badge.fury.io/py/json2python-models)[![Build](https://github.com/bogdandm/json2python-models/actions/workflows/test_and_release.yml/badge.svg)](https://github.com/bogdandm/json2python-models/actions/workflows/test_and_release.yml)[![Coverage Status](https://coveralls.io/repos/github/bogdandm/json2python-models/badge.svg?branch=master)](https://coveralls.io/github/bogdandm/json2python-models?branch=master)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/11e13f2b81d7450eb0bca4b941d16d81)](https://www.codacy.com/app/bogdandm/json2python-models?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=bogdandm/json2python-models&amp;amp;utm_campaign=Badge_Grade)![Example](https://raw.githubusercontent.com/bogdandm/json2python-models/master/etc/convert.png)json2python-models is a [Python](https://www.python.org/) tool that can generate Python models classes([pydantic](https://docs.pydantic.dev/), ([sqlmodel](https://sqlmodel.tiangolo.com/),dataclasses, [attrs](https://www.attrs.org/en/stable/))from JSON datasets.## Features* Full **`typing` module** support* **Types merging** - if some field contains data of different types this will be represented as `Union` type* Fields and models **names** generation (unicode support included)* Similar **models generalization*** Handling **recursive data** structures (i.e. family tree)* Detecting **string serializable types** (i.e. datetime or just stringify numbers)* Detecting fields containing string constants (`Literal['foo', 'bar']`)* Generation models as **list** (flat models structure) or **tree** (nested models)* Specifying when dictionaries should be processed as **`dict` type** (by default every dict is considered as some model)* **CLI** API with a lot of options## Table of Contents* [Features](#features)* [Table of Contents](#table-of-contents)* [Example](#example)* [Installation](#installation)* [Usage](#usage)    * [CLI](#cli)    * [Low level API]()* [Tests](#tests)    * [Test examples](#test-examples)* [Built With](#built-with)* [Contributing](#contributing)* [License](#license)## Examples### Part of Path of Exile public items API```pythonfrom pydantic import BaseModel, Fieldfrom typing import List, Optionalfrom typing_extensions import Literalclass Tab(BaseModel):    id_: str = Field(..., alias=&quot;id&quot;)    public: bool    stash_type: Literal[&quot;CurrencyStash&quot;, &quot;NormalStash&quot;, &quot;PremiumStash&quot;] = Field(..., alias=&quot;stashType&quot;)    items: List['Item']    account_name: Optional[str] = Field(None, alias=&quot;accountName&quot;)    last_character_name: Optional[str] = Field(None, alias=&quot;lastCharacterName&quot;)    stash: Optional[str] = None    league: Optional[Literal[&quot;Hardcore&quot;, &quot;Standard&quot;]] = None```### F1 Season Results&lt;details&gt;&lt;summary&gt;----- Show -----&lt;/summary&gt;&lt;p&gt;```driver_standings.json[    {        &quot;season&quot;: &quot;2019&quot;,        &quot;round&quot;: &quot;3&quot;,        &quot;DriverStandings&quot;: [            {                &quot;position&quot;: &quot;1&quot;,                &quot;positionText&quot;: &quot;1&quot;,                &quot;points&quot;: &quot;68&quot;,                &quot;wins&quot;: &quot;2&quot;,                &quot;Driver&quot;: {                    &quot;driverId&quot;: &quot;hamilton&quot;,                    &quot;permanentNumber&quot;: &quot;44&quot;,                    &quot;code&quot;: &quot;HAM&quot;,                    &quot;url&quot;: &quot;http://en.wikipedia.org/wiki/Lewis_Hamilton&quot;,                    &quot;givenName&quot;: &quot;Lewis&quot;,                    &quot;familyName&quot;: &quot;Hamilton&quot;,                    &quot;dateOfBirth&quot;: &quot;1985-01-07&quot;,                    &quot;nationality&quot;: &quot;British&quot;                },                &quot;Constructors&quot;: [                    {                        &quot;constructorId&quot;: &quot;mercedes&quot;,                        &quot;url&quot;: &quot;http://en.wikipedia.org/wiki/Mercedes-Benz_in_Formula_One&quot;,                        &quot;name&quot;: &quot;Mercedes&quot;,                        &quot;nationality&quot;: &quot;German&quot;                    }                ]            },            ...        ]    }]``````json2models -f pydantic -m DriverStandings driver_standings.json``````pythonr&quot;&quot;&quot;generated by json2python-models v0.2.0 at Mon May  4 17:46:30 2020command: /opt/projects/json2python-models/venv/bin/json2models -f pydantic -s flat -m DriverStandings driver_standings.json&quot;&quot;&quot;from pydantic import BaseModel, Fieldfrom typing import Listfrom typing_extensions import Literalclass DriverStandings(BaseModel):    season: int    round_: int = Field(..., alias=&quot;round&quot;)    DriverStandings: List['DriverStanding']class DriverStanding(BaseModel):    position: int    position_text: int = Field(..., alias=&quot;positionText&quot;)    points: int    wins: int    driver: 'Driver' = Field(..., alias=&quot;Driver&quot;)    constructors: List['Constructor'] = Field(..., alias=&quot;Constructors&quot;)class Driver(BaseModel):    driver_id: str = Field(..., alias=&quot;driverId&quot;)    permanent_number: int = Field(..., alias=&quot;permanentNumber&quot;)    code: str    url: str    given_name: str = Field(..., alias=&quot;givenName&quot;)    family_name: str = Field(..., alias=&quot;familyName&quot;)    date_of_birth: str = Field(..., alias=&quot;dateOfBirth&quot;)    nationality: strclass Constructor(BaseModel):    constructor_id: str = Field(..., alias=&quot;constructorId&quot;)    url: str    name: str    nationality: Literal[&quot;Austrian&quot;, &quot;German&quot;, &quot;American&quot;, &quot;British&quot;, &quot;Italian&quot;, &quot;French&quot;]```&lt;/p&gt;&lt;/details&gt;### Swagger&lt;details&gt;&lt;summary&gt;----- Show -----&lt;/summary&gt;&lt;p&gt;`swagger.json` from any online API (I tested file generated by drf-yasg and another one for Spotify API)It requires a bit of tweaking:* Some fields store routes/models specs as dicts* There are a lot of optional fields, so we reduce merging threshold* Disable string literals```json2models -f dataclasses -m Swagger testing_tools/swagger.json \    --dict-keys-fields securityDefinitions paths responses definitions properties \    --merge percent_50 number --max-strings-literals 0``````pythonr&quot;&quot;&quot;generated by json2python-models v0.2.0 at Mon May  4 18:08:09 2020command: /opt/projects/json2python-models/json_to_models/__main__.py -s flat -f dataclasses -m Swagger testing_tools/swagger.json --max-strings-literals 0 --dict-keys-fields securityDefinitions paths responses definitions properties --merge percent_50 number&quot;&quot;&quot;from dataclasses import dataclass, fieldfrom json_to_models.dynamic_typing import FloatStringfrom typing import Any, Dict, List, Optional, Union@dataclassclass Swagger:    swagger: FloatString    info: 'Info'    host: str    schemes: List[str]    base_path: str    consumes: List[str]    produces: List[str]    security_definitions: Dict[str, 'Parameter_SecurityDefinition']    security: List['Security']    paths: Dict[str, 'Path']    definitions: Dict[str, 'Definition_Schema']@dataclassclass Info:    title: str    description: str    version: str@dataclassclass Security:    api_key: Optional[List[Any]] = field(default_factory=list)    basic: Optional[List[Any]] = field(default_factory=list)@dataclassclass Path:    parameters: List['Parameter_SecurityDefinition']    post: Optional['Delete_Get_Patch_Post_Put'] = None    get: Optional['Delete_Get_Patch_Post_Put'] = None    put: Optional['Delete_Get_Patch_Post_Put'] = None    patch: Optional['Delete_Get_Patch_Post_Put'] = None    delete: Optional['Delete_Get_Patch_Post_Put'] = None@dataclassclass Property:    type_: str    format_: Optional[str] = None    xnullable: Optional[bool] = None    items: Optional['Item_Schema'] = None@dataclassclass Property_2E:    type_: str    title: Optional[str] = None    read_only: Optional[bool] = None    max_length: Optional[int] = None    min_length: Optional[int] = None    items: Optional['Item'] = None    enum: Optional[List[str]] = field(default_factory=list)    maximum: Optional[int] = None    minimum: Optional[int] = None    format_: Optional[str] = None@dataclassclass Item:    title: Optional[str] = None    type_: Optional[str] = None    ref: Optional[str] = None    max_length: Optional[int] = None    min_length: Optional[int] = None@dataclassclass Parameter_SecurityDefinition:    name: Optional[str] = None    in_: Optional[str] = None    required: Optional[bool] = None    schema: Optional['Item_Schema'] = None    description: Optional[str] = None    type_: Optional[str] = None@dataclassclass Delete_Get_Patch_Post_Put:    operation_id: str    description: str    parameters: List['Parameter_SecurityDefinition']    responses: Dict[str, 'Response']    tags: List[str]@dataclassclass Item_Schema:    ref: str@dataclassclass Response:    description: str    schema: Optional[Union['Item_Schema', 'Definition_Schema']] = None@dataclassclass Definition_Schema:    type_: str    required: Optional[List[str]] = field(default_factory=list)    properties: Optional[Dict[str, Union['Property', 'Property_2E']]] = field(default_factory=dict)    ref: Optional[str] = None```&lt;/p&gt;&lt;/details&gt;### Github-actions config files&lt;details&gt;&lt;summary&gt;----- Show -----&lt;/summary&gt;&lt;p&gt;Github-actions model based on files from [starter-workflows](https://github.com/actions/starter-workflows/tree/main/ci)```json2models -m Actions &quot;./starter-workflows/ci/*.yml&quot; -s flat -f pydantic -i yaml --dkf env with jobs``````pythonr&quot;&quot;&quot;generated by json2python-models v0.2.3 at Tue Jul 13 19:52:43 2021command: /opt/projects/json2python-models/venv/bin/json2models -m Actions ./starter-workflows/ci/*.yml -s flat -f pydantic -i yaml --dkf env with jobs&quot;&quot;&quot;from pydantic import BaseModel, Fieldfrom typing import Dict, List, Optional, Unionfrom typing_extensions import Literalclass Actions(BaseModel):    on: Union['On', List[Literal[&quot;push&quot;]]]    jobs: Dict[str, 'Job']    name: Optional[str] = None    env: Optional[Dict[str, Union[int, str]]] = {}class On(BaseModel):    push: Optional['Push'] = None    pull_request: Optional['PullRequest'] = None    release: Optional['Release'] = None    schedule: Optional[List['Schedule']] = []    workflow_dispatch: Optional[None] = Noneclass Push(BaseModel):    branches: List[Literal[&quot;$default-branch&quot;]]    tags: Optional[List[Literal[&quot;v*.*.*&quot;]]] = []class PullRequest(BaseModel):    branches: List[Literal[&quot;$default-branch&quot;]]class Release(BaseModel):    types: List[Literal[&quot;created&quot;, &quot;published&quot;]]class Schedule(BaseModel):    cron: Literal[&quot;$cron-daily&quot;]class Job(BaseModel):    runson: Literal[&quot;${{ matrix.os }}&quot;, &quot;macOS-latest&quot;, &quot;macos-latest&quot;, &quot;ubuntu-18.04&quot;, &quot;ubuntu-latest&quot;, &quot;windows-latest&quot;] = Field(..., alias=&quot;runs-on&quot;)    steps: List['Step']    name: Optional[str] = None    environment: Optional[Literal[&quot;production&quot;]] = None    outputs: Optional['Output'] = None    container: Optional['Container'] = None    needs: Optional[Literal[&quot;build&quot;]] = None    permissions: Optional['Permission'] = None    strategy: Optional['Strategy'] = None    defaults: Optional['Default'] = None    env: Optional[Dict[str, str]] = {}class Step(BaseModel):    uses: Optional[str] = None    name: Optional[str] = None    with_: Optional[Dict[str, Union[bool, float, str]]] = Field({}, alias=&quot;with&quot;)    run: Optional[str] = None    env: Optional[Dict[str, str]] = {}    workingdirectory: Optional[str] = Field(None, alias=&quot;working-directory&quot;)    id_: Optional[Literal[&quot;build-image&quot;, &quot;composer-cache&quot;, &quot;deploy-and-expose&quot;, &quot;image-build&quot;, &quot;login-ecr&quot;, &quot;meta&quot;, &quot;push-to-registry&quot;, &quot;task-def&quot;]] = Field(None, alias=&quot;id&quot;)    if_: Optional[str] = Field(None, alias=&quot;if&quot;)    shell: Optional[Literal[&quot;Rscript {0}&quot;]] = Noneclass Output(BaseModel):    route: str = Field(..., alias=&quot;ROUTE&quot;)    selector: str = Field(..., alias=&quot;SELECTOR&quot;)class Container(BaseModel):    image: Literal[&quot;crystallang/crystal&quot;, &quot;erlang:22.0.7&quot;]class Permission(BaseModel):    contents: Literal[&quot;read&quot;]    packages: Literal[&quot;write&quot;]class Strategy(BaseModel):    matrix: Optional['Matrix'] = None    maxparallel: Optional[int] = Field(None, alias=&quot;max-parallel&quot;)    failfast: Optional[bool] = Field(None, alias=&quot;fail-fast&quot;)class Matrix(BaseModel):    rversion: Optional[List[float]] = Field([], alias=&quot;r-version&quot;)    pythonversion: Optional[List[float]] = Field([], alias=&quot;python-version&quot;)    deno: Optional[List[Literal[&quot;canary&quot;, &quot;v1.x&quot;]]] = []    os: Optional[List[Literal[&quot;macOS-latest&quot;, &quot;ubuntu-latest&quot;, &quot;windows-latest&quot;]]] = []    rubyversion: Optional[List[float]] = Field([], alias=&quot;ruby-version&quot;)    nodeversion: Optional[List[Literal[&quot;12.x&quot;, &quot;14.x&quot;, &quot;16.x&quot;]]] = Field([], alias=&quot;node-version&quot;)    configuration: Optional[List[Literal[&quot;Debug&quot;, &quot;Release&quot;]]] = []class Default(BaseModel):    run: 'Run'class Run(BaseModel):    shell: Literal[&quot;bash&quot;]```&lt;/p&gt;&lt;/details&gt;### Example with preamble&lt;details&gt;&lt;summary&gt;----- Show -----&lt;/summary&gt;&lt;p&gt;A simple example to demonstrate adding extra code before the class list.```shjson2models -f pydantic --preamble &quot;# set up defaultsUSERNAME = 'user'SERVER_IP = '127.0.0.1'&quot; -m Swagger testing_tools/swagger.json``````pyr&quot;&quot;&quot;generated by json2python-models v0.2.5 at Tue Aug 23 08:55:09 2022command: json2models -f pydantic --preamble # set up defaultsUSERNAME = 'user'SERVER_IP = '127.0.0.1' -m Swagger testing_tools/swagger.json -o output.py&quot;&quot;&quot;from pydantic import BaseModel, Fieldfrom typing import Any, List, Literal, Optional, Union# set up defaultsUSERNAME = 'user'SERVER_IP = '127.0.0.1'class Swagger(BaseModel):    # etc.```&lt;/p&gt;&lt;/details&gt;## Installation| **Beware**: this project supports only `python3.7` and higher. || --- |To install it, use `pip`:`pip install json2python-models`Or you can build it from source:```git clone https://github.com/bogdandm/json2python-models.gitcd json2python-modelspython setup.py install```## Usage### CLIFor regular usage CLI tool is the best option. After you install this package you can use it as `json2models &lt;arguments&gt;`or `python -m json_to_models &lt;arguments&gt;`. I.e.:```json2models -m Car car_*.json -f attrs &gt; car.py```Arguments:* `-h`, `--help` - Show help message and exit* `-m`, `--model` - Model name and its JSON data as path or unix-like path pattern.  `*`,  `**` or `?` patterns symbols are supported.  JSON data could be an array of models or single model.  If this file contains dict with nested list than you can pass  `&lt;JSON lookup&gt;`. Deep lookups are supported by dot-separated path.  If no lookup needed pass '-' as `&lt;JSON lookup&gt;` (default)  * **Format**: `-m &lt;Model name&gt; [&lt;JSON lookup&gt;] &lt;File path or pattern&gt;`  * **Example**: `-m Car audi.json -m Car results reno.json`* `-i`, `--input-format` - Input file format (parser). Default is JSON parser. Yaml parser requires PyYaml or  ruamel.yaml to be installed. Ini parser uses  builtin [configparser](https://docs.python.org/3/library/configparser.html). To implement new one - add new method  to `cli.FileLoaders` (and create pull request :) )  * **Format**: `-i {json, yaml, ini}`  * **Example**: `-i yaml`  * **Default**: `-i json`* `-o`, `--output` - Output file    * **Format**: `-o &lt;FILE&gt;`    * **Example**: `-o car_model.py`* `-f`, `--framework` - Model framework for which python code is generated.  `base` (default) mean no framework so code will be generated without any decorators and additional meta-data.    * **Format**: `-f {base, pydantic, sqlmodel, attrs, dataclasses, custom}`    * **Example**: `-f pydantic`    * **Default**: `-f base`    * **Warning**: SQLModel generator does not support Relationships and Foreign keys, they have to be added manually* `-s`, `--structure` - Models composition style.    * **Format**: `-s {flat, nested}`    * **Example**: `-s nested`    * **Default**: `-s flat`* `--preamble` - Additional material to be    * **Format**: `--preamble &quot;&lt;formatted python code string to be added after module imports&gt;&quot;`    * **Example**:  ```sh  --preamble &quot;# set up defaults  USERNAME = 'user'  SERVER = '127.0.0.1'&quot;  ```    * **Optional*** `--datetime` - Enable datetime/date/time strings parsing.    * **Default**: disabled    * **Warning**: This can lead to 6-7 times slowdown on large datasets. Be sure that you really need this option.* `--disable-unicode-conversion`, `--no-unidecode` - Disable unicode conversion in field labels and class names    * **Default**: enabled* `--strings-converters` - Enable generation of string types converters (i.e. `IsoDatetimeString` or `BooleanString`).    * **Default**: disabled* `--max-strings-literals` -  Generate `Literal['foo', 'bar']` when field have less than NUMBER string constants as values.    * **Format**: `--max-strings-literals &lt;NUMBER&gt;`    * **Default**: 10 (generator classes could override it)    * **Example**: `--max-strings-literals 5` - only 5 literals will be saved and used to code generation    * **Note**: There could not be more than **15** literals per field (for performance reasons)    * **Note**: `attrs` code generator do not use Literals and just generate `str` fields instead* `--merge` - Merge policy settings. Possible values are:    * **Format**: `--merge MERGE_POLICY [MERGE_POLICY ...]`    * **Possible values** (MERGE_POLICY):        * `percent[_&lt;percent&gt;]` - two models had a certain percentage of matched field names.            Custom value could be i.e. `percent_95`.        * `number[_&lt;number&gt;]` - two models had a certain number of matched field names.        * `exact` - two models should have exact same field names to merge.    * **Example**: `--merge percent_95 number_20` - merge if 95% of fields are matched or 20 of fields are matched    * **Default**: `--merge percent_70 number_10`* `--dict-keys-regex`, `--dkr` - List of regular expressions (Python syntax).    If all keys of some dict are match one of the pattern then    this dict will be marked as dict field but not nested model.    * **Format**: `--dkr RegEx [RegEx ...]`    * **Example**: `--dkr node_\d+ \d+_\d+_\d+`    * **Note**: `^` and `$` (string borders) tokens will be added automatically, but you        have to escape other special characters manually.    * **Optional*** `--dict-keys-fields`, `--dkf` - List of model fields names that will be marked as dict fields    * **Format**: `--dkf FIELD_NAME [FIELD_NAME ...]`    * **Example**: `--dkf &quot;dict_data&quot; &quot;mapping&quot;`    * **Optional*** `--code-generator` - Absolute import path to `GenericModelCodeGenerator` subclass.    * **Format**: `--code-generator CODE_GENERATOR`    * **Example**: `-f mypackage.mymodule.DjangoModelsGenerator`    * **Note**: Is ignored without `-f custom` but is required with it.* `--code-generator-kwargs` - List of GenericModelCodeGenerator subclass arguments (for `__init__` method,    see docs of specific subclass).    Each argument should be in following format: `argument_name=value` or `&quot;argument_name=value with space&quot;`.    Boolean values should be passed in JS style: `true` or `false`    * **Format**: `--code-generator-kwargs [NAME=VALUE [NAME=VALUE ...]]`    * **Example**:  `--code-generator-kwargs kwarg1=true kwarg2=10 &quot;kwarg3=It is string with spaces&quot;`    * **Optional*** `--disable-str-serializable-types` - List of python types for which StringSerializable should be disabled.    Alternatively you could use the name of StringSerializable subclass itself (i.e. IntString).    * **Format**: `--disable-str-serializable-types [TYPE [TYPE ...]]`    * **Example**:  `--disable-str-serializable-types float int BooleanString IsoDatetimeString`    * **Optional**### Low level API\-## TestsTo run tests you should clone project and run `setup.py` script:```git clone https://github.com/bogdandm/json2python-models.gitcd json2python-modelspython setup.py test -a '&lt;pytest additional arguments&gt;'```Also, I would recommend you to install `pytest-sugar` for pretty printing test results### Test examplesYou can find out some examples of usage of this project at [testing_tools/real_apis/...](/testing_tools/real_apis)Each file contains functions to download data from some online API (references included at the top of file) and`main` function that generates and prints code. Some examples may print debug data before actual code.Downloaded data will be saved at `testing_tools/real_apis/&lt;name of example&gt;/&lt;dataset&gt;.json`## Built With* [python-dateutil](https://github.com/dateutil/dateutil) - Datetime parsing* [inflection](https://github.com/jpvanhal/inflection) - String transformations* [Unidecode](https://pypi.org/project/Unidecode/) - Unicode to ASCII conversion* [Jinja2](https://github.com/pallets/jinja) - Code templates* [ordered-set](https://github.com/LuminosoInsight/ordered-set) is used in models merging algorithmTest tools:* [pytest](https://github.com/pytest-dev/pytest) - Test framework* [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) - Parallel execution of test suites* [pytest-sugar](https://github.com/Frozenball/pytest-sugar) - Test results pretty printing* [requests](https://github.com/kennethreitz/requests) - Test data download## ContributingFeel free to open pull requests with new features or bug fixes. Just follow few rules:1. Always use some code formatter ([black](https://github.com/ambv/black) or PyCharm built-in)2. Keep code coverage above 95-98%3. All existing tests should be passed (including test examples from `testing_tools/real_apis`)4. Use `typing` module5. Fix [codacy](https://app.codacy.com/project/bogdandm/json2python-models/dashboard) issues from your PR## LicenseThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details</longdescription>
</pkgmetadata>