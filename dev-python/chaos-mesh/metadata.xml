<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Client Library for Chaos Mesh## IntroductionChaos Mesh is an open source cloud-native Chaos Engineering platform that allows you to simulate various faults and orchestrate fault scenarios in your kubernetes cluster. This client is written in Python and provides a single point of entry tocreate and manage experiments in Chaos Mesh.## Getting StartedTo start using Chaos Mesh, please follow the installation steps in the [documentation](https://chaos-mesh.org/docs/).To create a Chaos Mesh client, you can use the following code:```pythonfrom chaosmesh.client import Client, Experimentfrom chaosmesh.k8s.selector import Selector# creating the ChaosMesh clientclient = Client(version=&quot;v1alpha1&quot;)# target pods selector; by labelSector or by pods in specified namespacesselector = Selector(labelSelectors={&quot;app&quot;: &quot;filebeat&quot;}, pods=None, namespaces=None)```## Supported API Version- `chaos-mesh.org/v1alpha1`## Experiment TypesChaos Mesh supports various types of experiments, including Pod faults, stress tests, JVM faults, and Host faults.### Pod Faults- Pod failure- Pod kill- Container kill### Stress Tests- CPU- Memory### JVM Faults- GC- Exception### Host Faults- CPU- Memory### Host Disk Fault- Read payload- Write payload- Fill### Network Attack- Partition- Bandwidth## Experiment ExamplesHere are some examples of how you can create experiments in Chaos Mesh:### Pod Failure Experiment```python# name of the experimentexp_name = str(uuid.uuid4())# starting up the pod failure experimentclient.start_experiment(Experiment.POD_FAILURE, namespace=&quot;default&quot;, name=exp_name, selector=selector)```### Pod Kill Experiment```pythonexp_name = str(uuid.uuid4())# starting up the pod kill experimentclient.start_experiment(Experiment.POD_KILL, namespace=&quot;default&quot;, name=exp_name, selector=selector)```### Container Kill Experiment```exp_name = str(uuid.uuid4())# starting up the pod kill experimentclient.start_experiment(Experiment.CONTAINER_KILL, namespace=&quot;default&quot;, name=exp_name, selector=selector, container_names=['main'])```### CPU Stress Test Experiment```pythonexp_name = str(uuid.uuid4())# starting up the pod kill experimentclient.start_experiment(Experiment.POD_STRESS_CPU, namespace=&quot;default&quot;, name=exp_name, selector=selector, container_names=['main'])```### Memory Stress Test Experiment```pythonexp_name = str(uuid.uuid4())# starting up the pod kill experimentclient.start_experiment(Experiment.POD_STRESS_MEMORY, namespace=&quot;default&quot;, name=exp_name, selector=selector, container_names=['main'])```### GC Experiment```python# name of the experimentexp_name = str(uuid.uuid4())client.start_experiment(Experiment.GC, namespace=&quot;default&quot;, name=exp_name, selector=selector, port=8080)```### Exception Experiment```pythonexp_name = str(uuid.uuid4())client.start_experiment(Experiment.RAISE_EXCEPTION, namespace=&quot;default&quot;,                        name=exp_name, selector=select```### Host CPU stress```pythonexp_name = str(uuid.uuid4())# starting up the host cpu stress experimentclient.start_experiment(Experiment.HOST_STRESS_CPU, namespace=&quot;default&quot;, name=exp_name,                        address=[&quot;10.225.66.224&quot;, &quot;10.225.67.213&quot;, &quot;10.225.66.231&quot;, &quot;10.225.66.138&quot;, &quot;10.225.66.192&quot;, &quot;10.225.67.52&quot;, &quot;10.225.67.103&quot;],                        load=1000)```### Host Memory stress```pythonexp_name = str(uuid.uuid4())# starting up the host memory stress experimentclient.start_experiment(Experiment.HOST_STRESS_MEMORY, namespace=&quot;default&quot;, name=exp_name,                        address=[&quot;10.225.66.224&quot;, &quot;10.225.67.213&quot;, &quot;10.225.66.231&quot;, &quot;10.225.66.138&quot;, &quot;10.225.66.192&quot;, &quot;10.225.67.52&quot;, &quot;10.225.67.103&quot;],                        size=&quot;30GB&quot;)```### Host Disk Fault Read payload```pythonexp_name = &quot;disk-fault-read-payload-&quot; + random.randint(0, 1000000).__str__()# starting up the read payload experimentclient.start_experiment(Experiment.HOST_READ_PAYLOAD, namespace=&quot;default&quot;, name=exp_name, selector=selector, address=[&quot;address&quot;], size=&quot;1024K&quot;, path=&quot;/&quot;, payload_process_num=1)```### Host Disk Fault Write payload```pythonexp_name = &quot;disk-fault-write-payload-&quot; + random.randint(0, 1000000).__str__()# starting up the write payload experimentclient.start_experiment(Experiment.HOST_WRITE_PAYLOAD, namespace=&quot;default&quot;, name=exp_name, selector=selector, address=[&quot;address&quot;], size=&quot;1024K&quot;, path=&quot;/&quot;,                        payload_process_num=1)```### Host Disk Fill```pythonexp_name = &quot;disk-fault-fill-&quot; + random.randint(0, 1000000).__str__()# starting up the disk fill experimentclient.start_experiment(Experiment.HOST_DISK_FILL, namespace=&quot;default&quot;, name=exp_name, selector=selector, address=[&quot;address&quot;], size=&quot;1024K&quot;, path=&quot;/&quot;, fill_by_fallocate=True)```### Network Partition```pythonexp_name = &quot;network-partition-&quot; + random.randint(0, 1000000).__str__()# starting up the network partition experimentclient.start_experiment(Experiment.NETWORK_PARTITION, namespace=&quot;default&quot;, name=exp_name, selector=selector, external_targets=[&quot;target&quot;], direction=&quot;both&quot;)```### Network Bandwidth```pythonexp_name = &quot;network-bandwidth-&quot; + random.randint(0, 1000000).__str__()# starting up the network bandwidth experimentclient.start_experiment(Experiment.NETWORK_BANDWIDTH, namespace=&quot;default&quot;, name=exp_name, selector=selector, rate=&quot;1bps&quot;, buffer=1, limit=1, direction=&quot;to&quot;,                        external_targets=[&quot;target&quot;])```## Pause an experimentIn order to pause an experiment you can use the following command```python# pausing the experimentclient.pause_experiment(Experiment.POD_STRESS_MEMORY, namespace=&quot;default&quot;, name=exp_name)```## Delete the experimentThe experiment can be removed from the k8s cluster using the following command```pythonclient.delete_experiment(Experiment.POD_STRESS_MEMORY, namespace=&quot;default&quot;, name=exp_name)```## Schedule experimentsSchedule an experiment using the following command```pythonclient.schedule_experiment(Experiment.POD_STRESS_CPU, namespace=&quot;default&quot;, name=exp_name, cron_schedule=&quot;*/2 * * * *&quot;, selector=selector, container_names=['main'])```## LoggingInitializing the ChaosMesh logger```pythonimport logging, syslogging.getLogger(&quot;chaosmesh&quot;)logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)```</longdescription>
</pkgmetadata>