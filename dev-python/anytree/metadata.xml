<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://badge.fury.io/py/anytree.svg    :target: https://badge.fury.io/py/anytree.. image:: https://img.shields.io/pypi/dm/anytree.svg?label=pypi%20downloads   :target: https://pypi.python.org/pypi/anytree.. image:: https://travis-ci.org/c0fec0de/anytree.svg?branch=master    :target: https://travis-ci.org/c0fec0de/anytree.. image:: https://coveralls.io/repos/github/c0fec0de/anytree/badge.svg    :target: https://coveralls.io/github/c0fec0de/anytree.. image:: https://readthedocs.org/projects/anytree/badge/?version=2.8.0    :target: http://anytree.readthedocs.io/en/2.8.0/?badge=2.8.0.. image:: https://codeclimate.com/github/c0fec0de/anytree.png    :target: https://codeclimate.com/github/c0fec0de/anytree.. image:: https://img.shields.io/pypi/pyversions/anytree.svg   :target: https://pypi.python.org/pypi/anytree.. image:: https://img.shields.io/badge/code%20style-pep8-brightgreen.svg   :target: https://www.python.org/dev/peps/pep-0008/.. image:: https://img.shields.io/badge/code%20style-pep257-brightgreen.svg   :target: https://www.python.org/dev/peps/pep-0257/Links=====* Documentation_* PyPI_* GitHub_* Changelog_* Issues_* Contributors_* If you enjoy anytree_.. image:: https://github.com/c0fec0de/anytree/raw/devel/docs/static/buymeacoffee.png   :target: https://www.buymeacoffee.com/1oYX0sw.. _anytree: http://anytree.readthedocs.io/en/2.8.0/.. _Documentation: http://anytree.readthedocs.io/en/2.8.0/.. _PyPI: https://pypi.org/project/anytree/2.8.0/.. _GitHub: https://github.com/c0fec0de/anytree.. _Changelog: https://github.com/c0fec0de/anytree/releases.. _Issues: https://github.com/c0fec0de/anytree/issues.. _Contributors: https://github.com/c0fec0de/anytree/graphs/contributors.. _Node: https://anytree.readthedocs.io/en/2.8.0/api/anytree.node.html#anytree.node.node.Node.. _RenderTree: https://anytree.readthedocs.io/en/2.8.0/api/anytree.render.html#anytree.render.RenderTree.. _DotExporter: https://anytree.readthedocs.io/en/2.8.0/exporter/dotexporter.html#anytree.exporter.dotexporter.DotExporter.. _NodeMixin: https://anytree.readthedocs.io/en/2.8.0/api/anytree.node.html#anytree.node.nodemixin.NodeMixin.. _Importers: https://anytree.readthedocs.io/en/2.8.0/importer.html.. _Exporters: https://anytree.readthedocs.io/en/2.8.0/exporter.htmlGetting started---------------.. _getting_started:Usage is simple.**Construction**&gt;&gt;&gt; from anytree import Node, RenderTree&gt;&gt;&gt; udo = Node(&quot;Udo&quot;)&gt;&gt;&gt; marc = Node(&quot;Marc&quot;, parent=udo)&gt;&gt;&gt; lian = Node(&quot;Lian&quot;, parent=marc)&gt;&gt;&gt; dan = Node(&quot;Dan&quot;, parent=udo)&gt;&gt;&gt; jet = Node(&quot;Jet&quot;, parent=dan)&gt;&gt;&gt; jan = Node(&quot;Jan&quot;, parent=dan)&gt;&gt;&gt; joe = Node(&quot;Joe&quot;, parent=dan)**Node**&gt;&gt;&gt; print(udo)Node('/Udo')&gt;&gt;&gt; print(joe)Node('/Udo/Dan/Joe')**Tree**&gt;&gt;&gt; for pre, fill, node in RenderTree(udo):...     print(&quot;%s%s&quot; % (pre, node.name))Udo├── Marc│   └── Lian└── Dan    ├── Jet    ├── Jan    └── JoeFor details see Node_ and RenderTree_.**Visualization**&gt;&gt;&gt; from anytree.exporter import DotExporter&gt;&gt;&gt; # graphviz needs to be installed for the next line!&gt;&gt;&gt; DotExporter(udo).to_picture(&quot;udo.png&quot;).. image:: http://anytree.readthedocs.io/en/latest/_images/udo.pngThe DotExporter_ can be started at any node and has various formatting hookups:&gt;&gt;&gt; DotExporter(dan,...             nodeattrfunc=lambda node: &quot;fixedsize=true, width=1, height=1, shape=diamond&quot;,...             edgeattrfunc=lambda parent, child: &quot;style=bold&quot;... ).to_picture(&quot;dan.png&quot;).. image:: http://anytree.readthedocs.io/en/latest/_images/static/dan.pngThere are various other Importers_ and Exporters_.**Manipulation**A second tree:&gt;&gt;&gt; mary = Node(&quot;Mary&quot;)&gt;&gt;&gt; urs = Node(&quot;Urs&quot;, parent=mary)&gt;&gt;&gt; chris = Node(&quot;Chris&quot;, parent=mary)&gt;&gt;&gt; marta = Node(&quot;Marta&quot;, parent=mary)&gt;&gt;&gt; print(RenderTree(mary))Node('/Mary')├── Node('/Mary/Urs')├── Node('/Mary/Chris')└── Node('/Mary/Marta')Append:&gt;&gt;&gt; udo.parent = mary&gt;&gt;&gt; print(RenderTree(mary))Node('/Mary')├── Node('/Mary/Urs')├── Node('/Mary/Chris')├── Node('/Mary/Marta')└── Node('/Mary/Udo')    ├── Node('/Mary/Udo/Marc')    │   └── Node('/Mary/Udo/Marc/Lian')    └── Node('/Mary/Udo/Dan')        ├── Node('/Mary/Udo/Dan/Jet')        ├── Node('/Mary/Udo/Dan/Jan')        └── Node('/Mary/Udo/Dan/Joe')Subtree rendering:&gt;&gt;&gt; print(RenderTree(marc))Node('/Mary/Udo/Marc')└── Node('/Mary/Udo/Marc/Lian')Cut:&gt;&gt;&gt; dan.parent = None&gt;&gt;&gt; print(RenderTree(dan))Node('/Dan')├── Node('/Dan/Jet')├── Node('/Dan/Jan')└── Node('/Dan/Joe')**Extending any python class to become a tree node**The enitre tree magic is encapsulated by NodeMixin_add it as base class and the class becomes a tree node:&gt;&gt;&gt; from anytree import NodeMixin, RenderTree&gt;&gt;&gt; class MyBaseClass(object):  # Just an example of a base class...     foo = 4&gt;&gt;&gt; class MyClass(MyBaseClass, NodeMixin):  # Add Node feature...     def __init__(self, name, length, width, parent=None, children=None):...         super(MyClass, self).__init__()...         self.name = name...         self.length = length...         self.width = width...         self.parent = parent...         if children:...             self.children = childrenJust set the `parent` attribute to reflect the tree relation:&gt;&gt;&gt; my0 = MyClass('my0', 0, 0)&gt;&gt;&gt; my1 = MyClass('my1', 1, 0, parent=my0)&gt;&gt;&gt; my2 = MyClass('my2', 0, 2, parent=my0)&gt;&gt;&gt; for pre, fill, node in RenderTree(my0):...     treestr = u&quot;%s%s&quot; % (pre, node.name)...     print(treestr.ljust(8), node.length, node.width)my0      0 0├── my1  1 0└── my2  0 2The `children` can be used likewise:&gt;&gt;&gt; my0 = MyClass('my0', 0, 0, children=[...     MyClass('my1', 1, 0),...     MyClass('my2', 0, 2),... ])&gt;&gt;&gt; for pre, fill, node in RenderTree(my0):...     treestr = u&quot;%s%s&quot; % (pre, node.name)...     print(treestr.ljust(8), node.length, node.width)my0      0 0├── my1  1 0└── my2  0 2Documentation-------------Please see the Documentation_ for all details.Installation------------To install the `anytree` module run::    pip install anytreeIf you do not have write-permissions to the python installation, try::    pip install anytree --user</longdescription>
</pkgmetadata>