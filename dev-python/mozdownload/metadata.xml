<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mozdownload[mozdownload](https://github.com/mozilla/mozdownload)is a [python package](http://pypi.python.org/pypi/mozdownload)which handles downloading of Mozilla applications.[![Coverage](https://coveralls.io/repos/github/mozilla/mozdownload/badge.svg)](https://coveralls.io/github/mozilla/mozdownload)[![Issues](https://img.shields.io/github/issues/mozilla/mozdownload.svg)](https://github.com/mozilla/mozdownload/issues)## InstallationIf the tool should only be used for downloading applications we propose toinstall it via pip. The following command will install the latest release:```bashpip install mozdownload```Otherwise follow the steps below to setup a development environment. It isrecommended that [virtualenv](http://virtualenv.readthedocs.org/en/latest/installation.html)and [virtualenvwrapper](http://virtualenvwrapper.readthedocs.org/en/latest/)be used in conjunction with mozdownload. Start by installing these,and [creating a virtualenv for the project](https://docs.python-guide.org/dev/virtualenvs/#lower-level-virtualenv).Then fork our repository into your own github account, and run:```bashgit clone https://github.com/%your_account%/mozdownload.gitcd mozdownloadpython setup.py develop```## Command Line UsageThe `mozdownload` command will download the application based on the providedcommand line options.### ExamplesDownload the latest official Firefox release for your platform:```bashmozdownload --version=latest```Download the latest official Firefox beta release for your platform:```bashmozdownload --version=latest-beta```Download the latest official Firefox esr release for your platform:```bashmozdownload --version=latest-esr```Download the latest Firefox release candidate for your platform:```bashmozdownload --type candidate --version=latest```Download the latest Firefox Aurora build for Windows (32bit):```bashmozdownload --type=daily --branch=mozilla-aurora --platform=win32```Download the latest official Thunderbird release for your platform:```bashmozdownload --application=thunderbird --version=latest```Download the latest Earlybird build for Linux (64bit):```bashmozdownload --application=thunderbird --type=daily --branch=comm-aurora --platform=linux64```Download this README file:```bashmozdownload --url=https://raw.github.com/mozilla/mozdownload/master/README.md```Download a file from a URL protected with basic authentication:```bashmozdownload --url=http://example.com/secrets.txt --username=admin --password=password```Run `mozdownload --help` for detailed information on the command line options.### Command Line OptionsTo see the full list of command line options, execute the command below and check the listof options for the build type to download:```bashmozdownload --help```## APIBeside the CLI mozdownload also offers an API to be used. To create specific instances of scrapersthe FactoryScraper class can be used. Here some examples:```python# Create a release scraper for the German locale of Firefox 40.0.3from mozdownload import FactoryScraperscraper = FactoryScraper('release', version='40.0.3', locale='de')# Create a candidate scraper for Windows 32bit of Firefox 41.0b9from mozdownload import FactoryScraperscraper = FactoryScraper('candidate', version='41.0b9', platform='win32')# Create a daily scraper for the latest Dev Edition build on the current platformfrom mozdownload import FactoryScraperscraper = FactoryScraper('daily', branch='mozilla-aurora')```All those scraper instances allow you to retrieve the url which is used to download the files, and the filename for the local destination:```pythonfrom mozdownload import FactoryScraperscraper = FactoryScraper('daily')print scraper.urlprint scraper.filename```To actually download the remote file the download() method has to be called:```pythonfrom mozdownload import FactoryScraperscraper = FactoryScraper('daily')filename = scraper.download()```## TestingTo run the entire test suite to check if your changes create any errors, run `tox`.If you only run very specific tests, please specify it via `tox -- -k &lt;keyword&gt;`.For example, if you are only interested in tests that look at tinderbox builds, run `tox -- -k tinderbox`.The `-k &lt;keyword&gt;` works for folders, filenames and even names of test methods.</longdescription>
</pkgmetadata>