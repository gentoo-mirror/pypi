<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Boto Endpoint URL shimConfigure `boto3` and `botocore` endpoint URL via environment variables orshared configuration file.This project is motivated by the yet-to-be-merged [`boto3` PR#2746][1], andfollows the [`aws-sdk` proposal #230][2] (updated for commit [`b912470`][3]).## Quick startTo use the main interface described in [proposal #230][2], set up eitherservice-specific environment variables or `endpoint_url` in a service-specificsub-section of the shared configuration file and set up the proposed endpointURL resolution.```pyimport boto_endpoint_url_shimimport boto3boto_endpoint_url_shim.proposed_endpoint_url_resolution()s3 = boto3.resource(&quot;s3&quot;)  # uses custom endpoint URL```## Endpoint URL resolution orderThe core functionality of this package is exposed through the`proposed_endpoint_url_resolution` function which sets up the proposed endpointresolution order of [proposal #230][2]:1. `endpoint_url` keyword argument    ```py    import boto3    boto3.resource(&quot;s3&quot;, endpoint_url=&quot;http://localhost:8088&quot;)    ```1. configuration via service-specific environment variable1. configuration via global environment variable1. configuration via service sub-sections of the shared configuration file1. configuration via global parameter in shared configuration file1. fallback to default endpoint determination of `botocore`The first truthy value provided by one of the steps will be used as endpoint URLfor the clients and resources, otherwise the resolution continues to the nextstep.Any other endpoint URL resolution order, can be set up using the`custom_endpoint_url_resolution` function, with passing the configurationfunctions as variadic arguments in the order they should be used.```pyboto_endpoint_url_shim.custom_endpoint_url_resolution(step1, step2, ..., stepN)```## Endpoint URL configuration options### Proposed interfaceThe [proposal #230][2] includes four main methods for endpoint resolution, twoservice-specific endpoint configuration and two global.This main interface can be set up using `proposed_endpoint_url_resolution()`.#### Configuration via service-specific environment variableImplementation: `read_service_env_var`.Read the configuration from environment variables`AWS_&lt;SERVICE_ID&gt;_ENDPOINT_URL` in which `&lt;SERVICE_ID&gt;` is the `ServiceId` ofthe of a specific service as defined in its `ServiceModel`, transformed withspaces replaced with underscores and letters upper-cased.```shAWS_ENDPOINT_URL_DYNAMODB=http://localhost:8024AWS_ENDPOINT_URL_ELASTIC_BEANSTALK=http://localhost:8053```#### Configuration via global environment variableImplementation: `read_global_env_var`.Read the configuration from the global environment variable `AWS_ENDPOINT_URL`and use this endpoint URL for all services.```shAWS_ENDPOINT_URL=http://localhost:8099```#### Configuration via service sub-sections of the shared configuration fileImplementation: `read_service_config_file`.Read the configuration from the shared configuration file, as the `endpoint_url`parameter under the `service_id` sub-section in the `services` definition. Asabove, `service_id` is a transform for the `ServiceId` with spaces replaced withunderscores and letters lower-cased. The `services` definition to use isreferenced by key in the profile via the `services` parameter.```ini[services local-db-eb]dynamodb =    endpoint_url = http://localhost:8024elastic_beanstalk =    endpoint_url = http://localhost:8053[profile testing]services = local-db-eb```#### Configuration via global parameter in shared configuration fileImplementation: `read_global_config_file`.Read the configuration from the `endpoint_url` parameter at the top level of a`services` definition and use this endpoint URL for all services. The `services`definition to use is referenced by key in the profile via the `services`parameter.```ini[services local-services]endpoint_url = http://localhost:8099[profile testing]services = local-services```### Alternative interfacesSeveral more interfaces are included in the [proposal #230][1], they have beenimplemented as functions in this package.As a convenience, the proposed interface above followed by the globalenvironment variable and global configuration file methods can be set up using`global_endpoint_url_resolution`.#### Configuration via mapping in global environment variableImplementation: `read_mapping_env_var`.Read the configuration from the global environment variable `AWS_ENDPOINT_URL`,containing a mapping of lower-case `service_id`s to endpoint URLs.```shAWS_ENDPOINT_URL=&quot;dynamodb=http://localhost:8024,elastic_beanstalk=http://localhost:8053&quot;```**NB.** The mapping is loaded once on the first use of the function and cachedfor later uses.#### Configuration via named top level parameters in shared configuration fileImplementation: `read_named_top_level_config_file`.Read the configuration from the `&lt;service_id&gt;_endpoint_url` parameter at the toplevel of a profile, with `&lt;service_id&gt;` the lower-case `service_id`.```ini[profile local-services]dynamodb_endpoint_url = http://localhost:8024elastic_beanstalk_endpoint_url = http://localhost:8053```### Custom interfaceUsers are free to define and use functions to obtain the endpoint URL of aservice.The custom functions must adhere to the following signature:```pydef func(session: botocore.session.Session, service_id: str) -&gt; str | None: ...```with:* `session` a `botocore.session.Session`* `service_id` the `ServiceId` of a specific service as defined in its  `ServiceModel`, transformed with spaces replaced with underscores and letters  lower-cased* `returns` a `str | None` either the endpoint URL or None to continue to the  next step in the resolution chain[1]: https://github.com/boto/boto3/pull/2746[2]: https://github.com/aws/aws-sdk/pull/230[3]: https://github.com/kdaily/aws-sdk/commit/b912470b21f3026252777f1db1c9a2bbdda57ab9</longdescription>
</pkgmetadata>