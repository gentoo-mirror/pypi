<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Arista CloudVision Python LibraryThe Arista CloudVision Python library provides access to Arista's CloudVisionAPIs for use in Python applications.## DocumentationAPI Documentation for this library can be found [here](https://aristanetworks.github.io/cloudvision-python/).Documentation for CloudVision's Resource APIs can be found [here](https://aristanetworks.github.io/cloudvision-apis).Documentation for generic access to CloudVision can be found at [CloudVision Connector](#cloudvision-connector).## InstallationInstall via pip:```shpip install --upgrade cloudvision```Or from source:```shpython setup.py install```### Requirements- CloudVision Resource APIs: Python 2.7+ or Python 3.7+- CloudVision Connector: Python 3.7+- Examples: Python 3.7+## Resource APIsCloudvision APIs are state based, resource-oriented APIs modeled in [Protobuf](https://developers.google.com/protocol-buffers) and accessed over [gRPC](https://grpc.io/) using a standardized set of RPC verbs.CloudVision is a powerful platform that processes and stores tremendous amounts of network data. It knows the topology of the network, device configuration, interface activity and other network events. These APIs allow access to fleet-wide data access and control, forming a management-plane with consistent usage.For example, consider the following script that gets all existing and then watches for new CloudVision events of critical severity and notifies an administrator when raised and notes it on the event:```pythonimport timeimport google.protobuf.wrappers_pb2import grpcfrom arista.event.v1 import models, services# setup credentials as channelCredentialswith grpc.secure_channel(&quot;www.arista.io:443&quot;, channelCredentials) as channel:    event_stub = services.EventServiceStub(channel)    event_annotation_stub = services.EventAnnotationConfigServiceStub(channel)    event_watch_request = services.EventStreamRequest(        partial_eq_filter=[models.Event(severity=models.EVENT_SEVERITY_CRITICAL)],    )    for resp in event_stub.Subscribe(event_watch_request):        print(f&quot;Critical event {resp.title.value} raised at {resp.key.timestamp}&quot;)        # send alert here via email, webhook, or incident reporting tool        # then make a note on the event indicating an alert has been sent        now_ms = int(time.time() * 1000)        notes_to_set = {            now_ms: models.EventNoteConfig(                note=google.protobuf.wrappers_pb2.StringValue(                    value=&quot;Administrator alerted&quot;,                ),            ),        }        annotation_config = models.EventAnnotationConfig(            key=resp.key,            notes=models.EventNotesConfig(                notes=notes_to_set,            ),        )        event_note_update = services.EventAnnotationConfigSetRequest(value=annotation_config)        event_annotation_stub.Set(event_note_update)```## CloudVision ConnectorCloudVision Connector is a Python implementation of a GRPC client for CloudVision. It takes careof getting and publishing data and datasets, and also provides utilities for datarepresentation.### Getting startedThis is a small example advertising a few of the GRPC client capabilities.This example prints info from all devices streaming into CloudVision.```pythontargetDataset = &quot;analytics&quot;path = [&quot;DatasetInfo&quot;, &quot;Devices&quot;]# No filtering done on keys, accept allkeys = []ProtoBufQuery = CreateQuery([(path, keys)], targetDataset)with GRPCClient(&quot;my-cv-host:9900&quot;) as client:     for notifBatch in client.Get([query]):         for notif in notifBatch[&quot;notifications&quot;]:             # Get timestamp for all update here with notif.Timestamp             PrettyPrint(notif[&quot;updates&quot;])```</longdescription>
</pkgmetadata>