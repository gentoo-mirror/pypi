<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://fastapi.tiangolo.com&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png&quot; alt=&quot;FastAPI&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;FastAPI framework, high performance, easy to learn, fast to code, ready for production&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tiangolo/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/tiangolo/fastapi/workflows/Test/badge.svg?event=push&amp;branch=master&quot; alt=&quot;Test&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/fastapi&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://coverage-badge.samuelcolvin.workers.dev/tiangolo/fastapi.svg&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/fastapi&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/fastapi?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/fastapi&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: &lt;a href=&quot;https://fastapi.tiangolo.com&quot; target=&quot;_blank&quot;&gt;https://fastapi.tiangolo.com&lt;/a&gt;**Source Code**: &lt;a href=&quot;https://github.com/tiangolo/fastapi&quot; target=&quot;_blank&quot;&gt;https://github.com/tiangolo/fastapi&lt;/a&gt;---FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.The key features are:* **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). [One of the fastest Python frameworks available](#performance).* **Fast to code**: Increase the speed to develop features by about 200% to 300%. ** **Fewer bugs**: Reduce about 40% of human (developer) induced errors. ** **Intuitive**: Great editor support. &lt;abbr title=&quot;also known as auto-complete, autocompletion, IntelliSense&quot;&gt;Completion&lt;/abbr&gt; everywhere. Less time debugging.* **Easy**: Designed to be easy to use and learn. Less time reading docs.* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.* **Robust**: Get production-ready code. With automatic interactive documentation.* **Standards-based**: Based on (and fully compatible with) the open standards for APIs: &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;OpenAPI&lt;/a&gt; (previously known as Swagger) and &lt;a href=&quot;https://json-schema.org/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;JSON Schema&lt;/a&gt;.&lt;small&gt;* estimation based on tests on an internal development team, building production applications.&lt;/small&gt;## Sponsors&lt;!-- sponsors --&gt;&lt;a href=&quot;https://cryptapi.io/&quot; target=&quot;_blank&quot; title=&quot;CryptAPI: Your easy to use, secure and privacy oriented payment gateway.&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/cryptapi.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.deta.sh/?ref=fastapi&quot; target=&quot;_blank&quot; title=&quot;The launchpad for all your (team's) ideas&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/deta.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.investsuite.com/jobs&quot; target=&quot;_blank&quot; title=&quot;Wealthtech jobs with FastAPI&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/investsuite.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://training.talkpython.fm/fastapi-courses&quot; target=&quot;_blank&quot; title=&quot;FastAPI video courses on demand from people you trust&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/talkpython.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://testdriven.io/courses/tdd-fastapi/&quot; target=&quot;_blank&quot; title=&quot;Learn to build high-quality web apps with best practices&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/testdriven.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/deepset-ai/haystack/&quot; target=&quot;_blank&quot; title=&quot;Build powerful search from composable, open source building blocks&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://careers.powens.com/&quot; target=&quot;_blank&quot; title=&quot;Powens is hiring!&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/powens.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.svix.com/&quot; target=&quot;_blank&quot; title=&quot;Svix - Webhooks as a service&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/svix.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://databento.com/&quot; target=&quot;_blank&quot; title=&quot;Pay as you go for market data&quot;&gt;&lt;img src=&quot;https://fastapi.tiangolo.com/img/sponsors/databento.svg&quot;&gt;&lt;/a&gt;&lt;!-- /sponsors --&gt;&lt;a href=&quot;https://fastapi.tiangolo.com/fastapi-people/#sponsors&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Other sponsors&lt;/a&gt;## Opinions&quot;_[...] I'm using **FastAPI** a ton these days. [...] I'm actually planning to use it for all of my team's **ML services at Microsoft**. Some of them are getting integrated into the core **Windows** product and some **Office** products._&quot;&lt;div style=&quot;text-align: right; margin-right: 10%;&quot;&gt;Kabir Khan - &lt;strong&gt;Microsoft&lt;/strong&gt; &lt;a href=&quot;https://github.com/tiangolo/fastapi/pull/26&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&lt;/div&gt;---&quot;_We adopted the **FastAPI** library to spawn a **REST** server that can be queried to obtain **predictions**. [for Ludwig]_&quot;&lt;div style=&quot;text-align: right; margin-right: 10%;&quot;&gt;Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - &lt;strong&gt;Uber&lt;/strong&gt; &lt;a href=&quot;https://eng.uber.com/ludwig-v0-2/&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&lt;/div&gt;---&quot;_**Netflix** is pleased to announce the open-source release of our **crisis management** orchestration framework: **Dispatch**! [built with **FastAPI**]_&quot;&lt;div style=&quot;text-align: right; margin-right: 10%;&quot;&gt;Kevin Glisson, Marc Vilanova, Forest Monsen - &lt;strong&gt;Netflix&lt;/strong&gt; &lt;a href=&quot;https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&lt;/div&gt;---&quot;_I’m over the moon excited about **FastAPI**. It’s so fun!_&quot;&lt;div style=&quot;text-align: right; margin-right: 10%;&quot;&gt;Brian Okken - &lt;strong&gt;&lt;a href=&quot;https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855&quot; target=&quot;_blank&quot;&gt;Python Bytes&lt;/a&gt; podcast host&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/brianokken/status/1112220079972728832&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&lt;/div&gt;---&quot;_Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted **Hug** to be - it's really inspiring to see someone build that._&quot;&lt;div style=&quot;text-align: right; margin-right: 10%;&quot;&gt;Timothy Crosley - &lt;strong&gt;&lt;a href=&quot;https://www.hug.rest/&quot; target=&quot;_blank&quot;&gt;Hug&lt;/a&gt; creator&lt;/strong&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=19455465&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&lt;/div&gt;---&quot;_If you're looking to learn one **modern framework** for building REST APIs, check out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_&quot;&quot;_We've switched over to **FastAPI** for our **APIs** [...] I think you'll like it [...]_&quot;&lt;div style=&quot;text-align: right; margin-right: 10%;&quot;&gt;Ines Montani - Matthew Honnibal - &lt;strong&gt;&lt;a href=&quot;https://explosion.ai&quot; target=&quot;_blank&quot;&gt;Explosion AI&lt;/a&gt; founders - &lt;a href=&quot;https://spacy.io&quot; target=&quot;_blank&quot;&gt;spaCy&lt;/a&gt; creators&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/_inesmontani/status/1144173225322143744&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/honnibal/status/1144031421859655680&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&lt;/div&gt;---&quot;_If anyone is looking to build a production Python API, I would highly recommend **FastAPI**. It is **beautifully designed**, **simple to use** and **highly scalable**, it has become a **key component** in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer._&quot;&lt;div style=&quot;text-align: right; margin-right: 10%;&quot;&gt;Deon Pillsbury - &lt;strong&gt;Cisco&lt;/strong&gt; &lt;a href=&quot;https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&lt;/div&gt;---## **Typer**, the FastAPI of CLIs&lt;a href=&quot;https://typer.tiangolo.com&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg&quot; style=&quot;width: 20%;&quot;&gt;&lt;/a&gt;If you are building a &lt;abbr title=&quot;Command Line Interface&quot;&gt;CLI&lt;/abbr&gt; app to be used in the terminal instead of a web API, check out &lt;a href=&quot;https://typer.tiangolo.com/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;**Typer**&lt;/a&gt;.**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI of CLIs**. ⌨️ 🚀## RequirementsPython 3.7+FastAPI stands on the shoulders of giants:* &lt;a href=&quot;https://www.starlette.io/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Starlette&lt;/a&gt; for the web parts.* &lt;a href=&quot;https://pydantic-docs.helpmanual.io/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Pydantic&lt;/a&gt; for the data parts.## Installation&lt;div class=&quot;termy&quot;&gt;```console$ pip install fastapi---&gt; 100%```&lt;/div&gt;You will also need an ASGI server, for production such as &lt;a href=&quot;https://www.uvicorn.org&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Uvicorn&lt;/a&gt; or &lt;a href=&quot;https://github.com/pgjones/hypercorn&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Hypercorn&lt;/a&gt;.&lt;div class=&quot;termy&quot;&gt;```console$ pip install &quot;uvicorn[standard]&quot;---&gt; 100%```&lt;/div&gt;## Example### Create it* Create a file `main.py` with:```Pythonfrom typing import Unionfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)def read_root():    return {&quot;Hello&quot;: &quot;World&quot;}@app.get(&quot;/items/{item_id}&quot;)def read_item(item_id: int, q: Union[str, None] = None):    return {&quot;item_id&quot;: item_id, &quot;q&quot;: q}```&lt;details markdown=&quot;1&quot;&gt;&lt;summary&gt;Or use &lt;code&gt;async def&lt;/code&gt;...&lt;/summary&gt;If your code uses `async` / `await`, use `async def`:```Python hl_lines=&quot;9  14&quot;from typing import Unionfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def read_root():    return {&quot;Hello&quot;: &quot;World&quot;}@app.get(&quot;/items/{item_id}&quot;)async def read_item(item_id: int, q: Union[str, None] = None):    return {&quot;item_id&quot;: item_id, &quot;q&quot;: q}```**Note**:If you don't know, check the _&quot;In a hurry?&quot;_ section about &lt;a href=&quot;https://fastapi.tiangolo.com/async/#in-a-hurry&quot; target=&quot;_blank&quot;&gt;`async` and `await` in the docs&lt;/a&gt;.&lt;/details&gt;### Run itRun the server with:&lt;div class=&quot;termy&quot;&gt;```console$ uvicorn main:app --reloadINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO:     Started reloader process [28720]INFO:     Started server process [28722]INFO:     Waiting for application startup.INFO:     Application startup complete.```&lt;/div&gt;&lt;details markdown=&quot;1&quot;&gt;&lt;summary&gt;About the command &lt;code&gt;uvicorn main:app --reload&lt;/code&gt;...&lt;/summary&gt;The command `uvicorn main:app` refers to:* `main`: the file `main.py` (the Python &quot;module&quot;).* `app`: the object created inside of `main.py` with the line `app = FastAPI()`.* `--reload`: make the server restart after code changes. Only do this for development.&lt;/details&gt;### Check itOpen your browser at &lt;a href=&quot;http://127.0.0.1:8000/items/5?q=somequery&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:8000/items/5?q=somequery&lt;/a&gt;.You will see the JSON response as:```JSON{&quot;item_id&quot;: 5, &quot;q&quot;: &quot;somequery&quot;}```You already created an API that:* Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.* Both _paths_ take `GET` &lt;em&gt;operations&lt;/em&gt; (also known as HTTP _methods_).* The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.* The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.### Interactive API docsNow go to &lt;a href=&quot;http://127.0.0.1:8000/docs&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:8000/docs&lt;/a&gt;.You will see the automatic interactive API documentation (provided by &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Swagger UI&lt;/a&gt;):![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)### Alternative API docsAnd now, go to &lt;a href=&quot;http://127.0.0.1:8000/redoc&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:8000/redoc&lt;/a&gt;.You will see the alternative automatic documentation (provided by &lt;a href=&quot;https://github.com/Rebilly/ReDoc&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;ReDoc&lt;/a&gt;):![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)## Example upgradeNow modify the file `main.py` to receive a body from a `PUT` request.Declare the body using standard Python types, thanks to Pydantic.```Python hl_lines=&quot;4  9-12  25-27&quot;from typing import Unionfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class Item(BaseModel):    name: str    price: float    is_offer: Union[bool, None] = None@app.get(&quot;/&quot;)def read_root():    return {&quot;Hello&quot;: &quot;World&quot;}@app.get(&quot;/items/{item_id}&quot;)def read_item(item_id: int, q: Union[str, None] = None):    return {&quot;item_id&quot;: item_id, &quot;q&quot;: q}@app.put(&quot;/items/{item_id}&quot;)def update_item(item_id: int, item: Item):    return {&quot;item_name&quot;: item.name, &quot;item_id&quot;: item_id}```The server should reload automatically (because you added `--reload` to the `uvicorn` command above).### Interactive API docs upgradeNow go to &lt;a href=&quot;http://127.0.0.1:8000/docs&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:8000/docs&lt;/a&gt;.* The interactive API documentation will be automatically updated, including the new body:![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)* Click on the button &quot;Try it out&quot;, it allows you to fill the parameters and directly interact with the API:![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)* Then click on the &quot;Execute&quot; button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)### Alternative API docs upgradeAnd now, go to &lt;a href=&quot;http://127.0.0.1:8000/redoc&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:8000/redoc&lt;/a&gt;.* The alternative documentation will also reflect the new query parameter and body:![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)### RecapIn summary, you declare **once** the types of parameters, body, etc. as function parameters.You do that with standard modern Python types.You don't have to learn a new syntax, the methods or classes of a specific library, etc.Just standard **Python 3.7+**.For example, for an `int`:```Pythonitem_id: int```or for a more complex `Item` model:```Pythonitem: Item```...and with that single declaration you get:* Editor support, including:    * Completion.    * Type checks.* Validation of data:    * Automatic and clear errors when the data is invalid.    * Validation even for deeply nested JSON objects.* &lt;abbr title=&quot;also known as: serialization, parsing, marshalling&quot;&gt;Conversion&lt;/abbr&gt; of input data: coming from the network to Python data and types. Reading from:    * JSON.    * Path parameters.    * Query parameters.    * Cookies.    * Headers.    * Forms.    * Files.* &lt;abbr title=&quot;also known as: serialization, parsing, marshalling&quot;&gt;Conversion&lt;/abbr&gt; of output data: converting from Python data and types to network data (as JSON):    * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).    * `datetime` objects.    * `UUID` objects.    * Database models.    * ...and many more.* Automatic interactive API documentation, including 2 alternative user interfaces:    * Swagger UI.    * ReDoc.---Coming back to the previous code example, **FastAPI** will:* Validate that there is an `item_id` in the path for `GET` and `PUT` requests.* Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.    * If it is not, the client will see a useful, clear error.* Check if there is an optional query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.    * As the `q` parameter is declared with `= None`, it is optional.    * Without the `None` it would be required (as is the body in the case with `PUT`).* For `PUT` requests to `/items/{item_id}`, Read the body as JSON:    * Check that it has a required attribute `name` that should be a `str`.    * Check that it has a required attribute `price` that has to be a `float`.    * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.    * All this would also work for deeply nested JSON objects.* Convert from and to JSON automatically.* Document everything with OpenAPI, that can be used by:    * Interactive documentation systems.    * Automatic client code generation systems, for many languages.* Provide 2 interactive documentation web interfaces directly.---We just scratched the surface, but you already get the idea of how it all works.Try changing the line with:```Python    return {&quot;item_name&quot;: item.name, &quot;item_id&quot;: item_id}```...from:```Python        ... &quot;item_name&quot;: item.name ...```...to:```Python        ... &quot;item_price&quot;: item.price ...```...and see how your editor will auto-complete the attributes and know their types:![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)For a more complete example including more features, see the &lt;a href=&quot;https://fastapi.tiangolo.com/tutorial/&quot;&gt;Tutorial - User Guide&lt;/a&gt;.**Spoiler alert**: the tutorial - user guide includes:* Declaration of **parameters** from other different places as: **headers**, **cookies**, **form fields** and **files**.* How to set **validation constraints** as `maximum_length` or `regex`.* A very powerful and easy to use **&lt;abbr title=&quot;also known as components, resources, providers, services, injectables&quot;&gt;Dependency Injection&lt;/abbr&gt;** system.* Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.* More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).* **GraphQL** integration with &lt;a href=&quot;https://strawberry.rocks&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Strawberry&lt;/a&gt; and other libraries.* Many extra features (thanks to Starlette) as:    * **WebSockets**    * extremely easy tests based on HTTPX and `pytest`    * **CORS**    * **Cookie Sessions**    * ...and more.## PerformanceIndependent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as &lt;a href=&quot;https://www.techempower.com/benchmarks/#section=test&amp;runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&amp;hw=ph&amp;test=query&amp;l=zijzen-7&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;one of the fastest Python frameworks available&lt;/a&gt;, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)To understand more about it, see the section &lt;a href=&quot;https://fastapi.tiangolo.com/benchmarks/&quot; class=&quot;internal-link&quot; target=&quot;_blank&quot;&gt;Benchmarks&lt;/a&gt;.## Optional DependenciesUsed by Pydantic:* &lt;a href=&quot;https://github.com/esnme/ultrajson&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ujson&lt;/code&gt;&lt;/a&gt; - for faster JSON &lt;abbr title=&quot;converting the string that comes from an HTTP request into Python data&quot;&gt;&quot;parsing&quot;&lt;/abbr&gt;.* &lt;a href=&quot;https://github.com/JoshData/python-email-validator&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;email_validator&lt;/code&gt;&lt;/a&gt; - for email validation.Used by Starlette:* &lt;a href=&quot;https://www.python-httpx.org&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;httpx&lt;/code&gt;&lt;/a&gt; - Required if you want to use the `TestClient`.* &lt;a href=&quot;https://jinja.palletsprojects.com&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;jinja2&lt;/code&gt;&lt;/a&gt; - Required if you want to use the default template configuration.* &lt;a href=&quot;https://andrew-d.github.io/python-multipart/&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;python-multipart&lt;/code&gt;&lt;/a&gt; - Required if you want to support form &lt;abbr title=&quot;converting the string that comes from an HTTP request into Python data&quot;&gt;&quot;parsing&quot;&lt;/abbr&gt;, with `request.form()`.* &lt;a href=&quot;https://pythonhosted.org/itsdangerous/&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;itsdangerous&lt;/code&gt;&lt;/a&gt; - Required for `SessionMiddleware` support.* &lt;a href=&quot;https://pyyaml.org/wiki/PyYAMLDocumentation&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;pyyaml&lt;/code&gt;&lt;/a&gt; - Required for Starlette's `SchemaGenerator` support (you probably don't need it with FastAPI).* &lt;a href=&quot;https://github.com/esnme/ultrajson&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ujson&lt;/code&gt;&lt;/a&gt; - Required if you want to use `UJSONResponse`.Used by FastAPI / Starlette:* &lt;a href=&quot;https://www.uvicorn.org&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;uvicorn&lt;/code&gt;&lt;/a&gt; - for the server that loads and serves your application.* &lt;a href=&quot;https://github.com/ijl/orjson&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;orjson&lt;/code&gt;&lt;/a&gt; - Required if you want to use `ORJSONResponse`.You can install all of these with `pip install &quot;fastapi[all]&quot;`.## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>