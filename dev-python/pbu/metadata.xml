<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Basic Utilities `pbu`Available on [PyPi](https://pypi.org/project/pbu/)**Table of Contents**1. [Installation](#installation)2. [Usage](#usage)3. [Classes](#classes)    1. [JSON](#json) - a JavaScript-like dictionary access helper    2. [Logger](#logger) - a wrapper around the Python logging framework    3. [TimeSeries](#timeseries) - powerful helper class to organise time series    4. [BasicMonitor](#basicmonitor) - monitor class orchestrating regular operations    5. [ConstantListing](#constantlisting) - a parent class allowing to fetch attribute values from a constant class    6. [PerformanceLogger](#performancelogger) - a utility class to log runtime performance of processes    7. [BasicConfig](#basicconfig) - application utility class managing access to environment variables    8. [JsonDocument](#jsondocument) - a class that can serialise/deserialise a dictionary into a class instance4. [Functions](#functions)    1. [`list_to_json`](#list_to_json)    2. [`json_to_list`](#json_to_list)    3. [`default_options`](#default_options)    4. [`default_value`](#default_options)    5. [`list_find_one`](#list_find_one)    6. [`list_map_filter`](#list_map_filter)    7. [`list_join`](#list_join)    8. [`not_none`](#not_none)    9. [Datetime Functions](#datetime-functions)    10. [`weighted_mean`](#weighted_mean)    11. [`normalise`](#normalise)## InstallationInstall via pip:```bashpip install pbu```## Usage***Optional***: If you have a requirement.txt file, you can add `pbu`:```bashpbu```Then, simply import the class / module you need:```pythonfrom pbu import JSON# and start using itobj = JSON({&quot;my&quot;: {&quot;obj&quot;: &quot;content&quot;}})print(obj.my.obj)```## Classes### JSONThis is an adaptation of the native `dict` class, providing Javascript-like dictionary access using the &quot;dot-notation&quot;(e.g. `person.relations[0].address.street`) rather than the Python-native bracket notation (e.g.`person[&quot;relations&quot;][0][&quot;address&quot;][&quot;street&quot;]`). It overrides the basic `__getattr__` and `__setattr__` methods as ashortcut to manage the dictionary content.**Example**```pythonfrom pbu import JSONmy_obj = JSON({&quot;initial&quot;: &quot;content&quot;})print(my_obj.initial)# prints out &quot;content&quot;my_obj.initial = {&quot;a&quot;: 5, &quot;b&quot;: 3}print(my_obj.initial.a + my_obj.initial.b)# prints out 8my_obj.initial.b = 13print(my_obj.initial.a + my_obj.initial.b)# prints out 18my_obj.extension = 10print(my_obj.extension)# prints out 10```### LoggerThis is a basic logger allowing to write log files, for `logger.info` it writes a debug.log and for `logger.error` or`logger.exception` it writes an error.log file.**Example**```pythonfrom pbu import Loggerlogger = Logger(name=&quot;logger-name&quot;)logger.debug(&quot;Some debug message goes here&quot;)logger.error(&quot;Error executing something&quot;)logger = Logger(name=&quot;logger-name&quot;, log_folder=&quot;./logs&quot;)logger.debug(&quot;This will create the debug.log and error.log in the ./logs folder&quot;)```### TimeSeriesThe time series class is a helper utility, that allows to compile complex time-series, offering functionality to addtime series, remove time series and most importantly align time series with timestamps to a previously definedresolution by interpolating missing values and re-aligning measurements within the tolerance of the provided timeseries.It supports 2 different structures:**List of Dictionary Items**```pythonfrom datetime import datetime, timedeltalist_of_dict = [    {&quot;date_time&quot;: datetime.now(), &quot;measurement_1&quot;: 12, &quot;measurement_2&quot;: 15},    {&quot;date_time&quot;: datetime.now() + timedelta(hours=1), &quot;measurement_1&quot;: 10, &quot;measurement_2&quot;: 16},    {&quot;date_time&quot;: datetime.now() + timedelta(hours=2), &quot;measurement_1&quot;: 9, &quot;measurement_2&quot;: 12},]```**Dictionary of Lists**```pythonfrom datetime import datetime, timedeltadict_of_list = {    &quot;date_time&quot;: [datetime.now(), datetime.now() + timedelta(hours=1), datetime + timedelta(hours=2)],    &quot;measurement_1&quot;: [12, 10, 16],    &quot;measurement_2&quot;: [15, 16, 12],}```**Example**```pythonfrom pbu import TimeSeriesfrom datetime import datetime, timedelta# initial time series base data (you can add measurements as well or provide as list of dictionariesdict_of_list = {    &quot;date_time&quot;: TimeSeries.create_date_range(datetime.now(), datetime.now() + timedelta(days=1), timedelta(hours=3)),}# init time seriests = TimeSeries(input_data=dict_of_list, date_time_key=&quot;date_time&quot;)# add values (ensure same length as date_time series)ts.add_values(&quot;measurement_1&quot;, [12, 10, 16, 10, 5, 8, 12, 9])# you can translate into a list of dictionary items (keys are maintained)list_of_dict = ts.translate_to_list_of_dicts()# extract data series from the time seriesmeasurement_1 = ts.get_values(&quot;measurement_1&quot;)# create new series that provides same value for all timestampsts.fill_values(&quot;constant_series&quot;, 5)# remove a series from the total data structurets.remove_series(&quot;constant_series&quot;)# re-sample data to 5 minute resolution, interpolating values, also pre-pending another day in front of the time series ts.align_to_resolution(resolution=timedelta(minutes=5), start_date=datetime.now() - timedelta(days=1))# this will result in &quot;interpolated&quot; values for the first day, using the first value (12) to fill missing valuesprint(len(ts.translate_to_list_of_dicts()))  # 12 an hour, 2 days, 48 * 12 = ~576 items# the same can also be achieved by:ts.set_resolution(timedelta(minutes=5))# no need to provide resolution nowts.align_to_resolution(start_date=datetime.now() - timedelta(days=1))```### BasicMonitorAn abstract class providing base-functionality for running monitors - threads that run a specific routine in a regularinterval. This can be an executor waiting for new tasks to be processed (and checking every 5 seconds) or a thread thatmonitors some readout in a regular interval. The monitor is wrapped to re-start itself, in case of errors.**Example**```pythonfrom pbu import BasicMonitorclass MyOwnMonitor(BasicMonitor):    def __init__(self, data):        super().__init__(monitor_id=&quot;my_id&quot;, wait_time=5)  # waits 5 seconds between each execution loop        self.data = data    def running(self):        while self.active:            # your code goes here (example):            # result = fetch_data(self.data)            # store_result(result)            self.wait()```If you want to run in a regular interval, the `running` method needs to be slightly modified:```pythonfrom time import timefrom pbu import BasicMonitorclass MyRegularOwnMonitor(BasicMonitor):    def __init__(self, data):        super().__init__(monitor_id=&quot;another_id&quot;, wait_time=60, run_interval=True)  # execute every 60 seconds        self.data = data    def running(self):        while self.active:            start_ts = time()  # capture start of loop            # your code goes here (example):            # result = do_something(self.data)            # store_result(result)            self.wait(exec_duration=round(time() - start_ts))  # include the execution duration```**Optional constructor parameters**- You can also pass a custom logger as `custom_logger` argument to the constructor. By default it will use the  `pbu.Logger` and log major events such as start/stop/restart and errors.- Passing a `ping_interval` parameter allows you to check for overdue jobs more often than the wait time. For example  you could have a `wait_time` of 1800s (30 min) and a `ping_interval` of 60s, which allows you to not miss out on an  execution if your machine running the monitor should sleep (e.g. on a laptop when you put it on standby, the sleep  timer stops). By default this is `60` seconds (or the `wait_time`, if the `wait_time` is lower than 60s)**Manage and run monitor**```pythonimport threadingdef start_monitor_thread(monitor):    &quot;&quot;&quot;    Thread function to be run by the new thread.    :param monitor: BasicMonitor - an instance of sub-class of BasicMonitor     &quot;&quot;&quot;    # start the monitor    monitor.start()# create monitor instance of your own class that implements BasicMonitorregular_monitor = MyRegularOwnMonitor(data={&quot;some&quot;: &quot;data&quot;})# create thread with start-up function and start itt = threading.Thread(target=start_monitor_thread, args=(regular_monitor,), daemon=True)t.start()# in a separate piece of code (e.g. REST handler or timer) you can stop the monitor instanceregular_monitor.stop()```Stopping a monitor doesn't interrupt the current thread. If the monitor is for example in a wait period and you send the`stop` signal, the thread will still run until the wait period passes.&gt; _In an API scenario, I recommend using a `dict` or `list` to cache monitors and retrieve them via the API using the`to_json()` method for identification. This then allows you to signal starting / stopping of monitors by providing themonitor ID and lookup the monitor instance in the monitor cache._**`BasicMonitor` Methods**- `start()` - starts the monitor- `stop()` - stops the monitor- `to_json()` - returns a dictionary with basic monitor technical information (id, state, wait behaviour, etc)- `wait_till_midnight()` - waits till the next midnight in your machines time zone- `wait(exec_duration=0)` - waits for the time specified in the constructor and in case of `run_interval=True` for the  optional `exec_duration`, if provided.### ConstantListingManaging constants is good practice for avoiding typos. Imagine the following class:```pythonclass Tags:    GEO = &quot;GEO&quot;    EQUIPMENT = &quot;EQUIPMENT&quot;```This allows you to just do: `Tags.GEO` allowing you to use your IDEs auto-complete, avoiding typos. But if you want toprogrammatically get **all** possible values for `Tags`, you can use `pbu`'s `ConstantListing` class:```pythonfrom pbu import ConstantListingclass Tags(ConstantListing):    GEO = &quot;GEO&quot;    EQUIPMENT = &quot;EQUIPMENT&quot;list_of_values = Tags().get_all()  # will return ['GEO', 'EQUIPMENT']```### PerformanceLoggerThis utility class allows to print out or log runtime performance expressed as time delta between a start time and anend time.Basic usage:```pythonfrom pbu import PerformanceLoggerperf = PerformanceLogger()perf.start()  # this is optional and will reset the start-time# do something useful...perf.checkpoint(message=&quot;Step 1&quot;)  # will print &quot;Step 1 took &lt;timedelta&gt;# some some more useful stuff...perf.finish(message=&quot;Something useful&quot;)  # will print out the whole duration from start to finish```You can omit the message of a `checkpoint` call if you don't need an output for an operation, but want to print out theduration of the step that follows.You can also use a Python `Logger` object (or `pbu.Logger`) instead of the message being printed out onto the console.```pythonfrom pbu import Logger, PerformanceLoggerlogger = Logger(&quot;my-logger-name&quot;)perf = PerformanceLogger()# do something...perf.checkpoint()  # next output will print the duration between this point and the next checkpoint call# do some more stuff...perf.checkpoint(message=&quot;Some More Stuff&quot;, logger=logger)# and even more ...perf.finish(message=&quot;Total operation&quot;, logger=logger)```**Methods**- `start()` - will reset the start time of the performance logger- `checkpoint(message=None, logger=None)` - creates a new checkpoint and optionally logs a message- `finish(message=None, logger=None)` - prints out the total runtime since `start()` was called or the class was  initialised### `BasicConfig`This class can be used in applications to simplify access to environment variables. It is recommended to write your ownsub-class of this class, where you can provide even more convenient access. However, the class can also be usedstandalone.Basic usage:```pythonimport osfrom pbu import BasicConfigclass Config(BasicConfig):    def __init__(self):        super().__init__(default_values={            &quot;PORT&quot;: 5000,            &quot;IS_DEBUG&quot;: 1,            &quot;DATA_DIRECTORY&quot;: None,        }, directory_keys=[&quot;DATA_DIRECTORY&quot;], required=[&quot;DATA_DIRECTORY&quot;])    def get_port(self) -&gt; int:        return int(self.get_config_value(&quot;port&quot;))    def is_debug(self) -&gt; bool:        return int(self.get_config_value(&quot;is_debug&quot;)) == 1    def get_data_directory(self) -&gt; str:        return self.get_config_value(&quot;DATA_DIRECTORY&quot;)cfg = Config()# BasicConfig will ensure the directory existsresult = os.path.exists(cfg.get_data_directory())# result is True      ```**Methods**- `get_config_value(config_key, default_value=None)` - retrieves a config value, the default value override is optional  as it should already be provided in the `default_values` of the constructor. If a `config_key` hasn't been provided by  the `default_values` of the constructor, this will trigger reading the value fresh from the environment and storing it  within this class.- `__init__(default_values={}, directory_keys=[], required=[], env_file=&quot;.env&quot;)` - super constructor, which will be used  to load the initial environment.    - The `default_values` provide the keys that will be extracted from the OS environment.    - The `directory_keys` are config keys that will be used to run a directory check. If the provided environment value      refers to a directory that doesn't exist yet, the class will attempt to create it.    - The `required` parameter provides environment keys that have to be provided by the OS environment. If they are not      available in the environment, an `EnvironmentError` will be raised.## `JsonDocument`**Methods**- `to_json()` - call this to return a dict representation of the instance. This will serialise the `id` and  `data_model_version` attributes and any attributes provided in the `get_attribute_mapping()` method.- `get_attribute_mapping()` - provides a dict mapping between class attributes and JSON keys that will be used in the  `dict` representation.- `extract_system_fields(json: dict)` - this will deserialise a `dict` and map the `_id` field to the `id` attribute,  `dataModelVersion` field to `data_model_version` attribute and any field defined in the `get_attribute_mapping()`  method.- `apply_updates(update, attributes = [])` - overwrites attributes of the current instance with the `update`. The list  of attributes has to be specified and is empty by default. The `update` must be of the same type as the current  instance. If an `attribute` is listed that does not exist, a warning will be issued.**Static Methods**- `.from_json(json)` - this method has to be implemented by any sub-class and is responsible for  deserialising a JSON document into an instance of your sub-class. The instance method `extract_system_fields(json)`  can be used to map most simple attributes - i.e. any attributes provided in the `get_attribute_mapping()` method.## Functions### `list_to_json````pythonfrom pbu import list_to_json# assuming we have `my_store` as an instance of MongoDB store or MySQL store, you can:list_of_dictionaries = list_to_json(item_list=my_store.get_all())  # output is a list of dictionaries```This function operates on lists of objects inheriting from `JsonDocument` and converts them into dictionaries using the`to_json()` method of any object passed into the function. Objects passed into the function _require_ the `to_json()`method and need to return the dictionary representation of the object. This function is just a mapping shortcut.### `list_from_json````pythonfrom pbu import list_from_json# assuming we have a class `MyClass` that inherits from `JsonDocument` and implements the `from_json()` methodlist_from_json(item_list=[{&quot;a&quot;: 1, &quot;b&quot;: 2}, {&quot;a&quot;: 3, &quot;b&quot;: 4}], class_type=MyClass)```### `default_options````pythonfrom pbu import default_optionsDEFAULTS = {    &quot;a&quot;: 1,    &quot;b&quot;: 2,    &quot;c&quot;: 3,}result = default_options(default=DEFAULTS, override={&quot;b&quot;: 4, &quot;d&quot;: 5})# result is: {&quot;a&quot;: 1, &quot;b&quot;: 4, &quot;c&quot;: 3, &quot;d&quot;: 5}```If you want to avoid additional keys other than the keys in DEFAULTS, you can provide a third argument:```pythonfrom pbu import default_optionsDEFAULTS = {    &quot;a&quot;: 1,    &quot;b&quot;: 2,}result = default_options(default=DEFAULTS, override={&quot;b&quot;: 4, &quot;d&quot;: 5}, allow_unknown_keys=False)# result is: {&quot;a&quot;: 1, &quot;b&quot;: 4}```### `default_value````pythonfrom pbu import default_valueresult = default_value(value=None, fallback=5)  # None is by default disallowed# result is 5result = default_value(value=0, fallback=5, disallowed=[None, 0])  # either 0 or None would return the fallback# result is 5result = default_value(0, 5)  # value will be used, as it doesn't match None# result is 0```### `list_find_one`Finds the first item in a list that matches the filter function - this is a shortcut for running `filter(..)` on a list,then checking its length and if the length is &gt; 0 fetching the first item.```pythonfrom pbu import list_find_onemy_list = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]result = list_find_one(lambda x: x == &quot;c&quot;, my_list)# result is &quot;c&quot;result = list_find_one(lambda x: x == &quot;d&quot;, my_list)# result is None```### `list_map_filter`A shorthand for filtering and mapping a lsit of items. The function allows to pass both lambdas (`filter` and `map`)into one function call. A boolean flag (`filter_first=True`) decides whether the filter or map operation is calledfirst.```pythonfrom pbu import list_map_filtermy_list = [    {&quot;name&quot;: &quot;a&quot;, &quot;count&quot;: 5},    {&quot;name&quot;: &quot;b&quot;, &quot;count&quot;: 100},    {&quot;name&quot;: &quot;b&quot;, &quot;count&quot;: 32},]result = list_map_filter(my_list, filter_func=lambda x: x[&quot;count&quot;] % 5 == 0, map_func=lambda x: x[&quot;name&quot;])# result is [&quot;a&quot;, &quot;b&quot;]result = list_map_filter(my_list, filter_func=lambda x: x &gt; 50, map_func=lambda x: x[&quot;count&quot;], filter_first=False)# result is [100]```### `list_join`A helper function that joins a list with a given token. The Python default way for joining a list of items uses the jointoken (e.g. &quot;,&quot;) and then calls `.join` on that string, passing the list of items as parameter. However, unfortunatelythis only accepts a list of strings and throws an error, if other types are passed (e.g. a list of numbers).This helper casts all items to `str` before joining.```pythonfrom pbu import list_joinmy_list = [&quot;a&quot;, 0, 4.5, False]result = list_join(my_list, &quot;-&quot;)# result is &quot;a-0-4.5-False&quot;result = &quot;-&quot;.join(my_list)# throws Error because my_list contains items of type other than `str````### `not_none`A helper function to filter out `None` values from a list.```pythonfrom pbu import not_nonemy_list = [&quot;a&quot;, None, &quot;b&quot;, None, &quot;c&quot;]result = not_none(my_list)# result is [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]``` ### Datetime FunctionsPBU provides some utilities to help deal with timezones and datetime objects. All timezone specifications can be madeeither as a string (i.e. the name of the timezone, like `&quot;Australia/Melbourne&quot;`) or as `pytz.timezone` object.#### `combine_date_time(date, time, tz)`Combines the provided date and time values.```pythonfrom datetime import date, timefrom pbu import combine_date_timeresult = combine_date_time(date(year=2021, month=12, day=25), time(hour=15, minute=12, second=6), &quot;Australia/Perth&quot;)```#### `to_timezone(local_datetime, target_tz)`Translates a datetime to the provided target timezone.```pythonfrom datetime import datetimefrom pytz import utcfrom pbu import to_timezoneutc_dt = datetime(year=2021, month=12, day=25, hour=3, minute=0, tzinfo=utc)  # 3:00am @ 2021-12-25perth_dt = to_timezone(utc_dt, &quot;Australia/Perth&quot;)# &gt; Result: 11:00am @ 2021-12-25 (+0800)```#### `to_utc(local_datetime)`Shorthand for `to_timezone(dt, pytz.utc)`#### `set_timezone(datetime, target_timezone)`Simply replaces the timezone information without changing any of the time values of the datetime.```pythonfrom datetime import datetimefrom pytz import utc, timezonefrom pbu import set_timezoneutc_dt = datetime(year=2021, month=12, day=25, hour=3, minute=0, tzinfo=utc)  # 3:00am @ 2021-12-25perth_dt = set_timezone(utc_dt, timezone(&quot;Australia/Perth&quot;))# &gt; Result: 3:00am @ 2021-12-25 (+0800)```### `weighted_mean`Provides the mean (average) of a list of values, where the values are weighted by the provided weights (in the sameorder as the value are provided). For missing weights, the default weight is 1```pythonfrom pbu import weighted_meanweights = [5, 3, 1]values = [10, 5, 5, 4, 3]# ((10 * 5) + (3 * 5) + (1 * 5) + 4 + 3) / (5 + 3 + 1) = 7.0wm = weighted_mean(values, weights)  # 7.0```### `normalise`Normalises a numeric value between a lower and an upper boundary. The result is a value between 0.0 and 1.0. If theprovided value exceeds any of the boundaries, the boundary value will automatically be chosen (defaults to 1.0 or 0.0).It is possible to provide a smaller upper bound than lower bound, which will invert the function and provide the negatedvalue. As an example, if we normalise 4 between 0 and 10, we get 0.4. If we invert the boundaries to normalise 4 between10 and 0, we get 0.6 (`1.0 - 0.4`).Any invalid input (`None`) will result in 0.0 being returned.```pythonfrom pbu import normalise# the &quot;standard&quot; casenorm1 = normalise(value=4, min_val=0, max_val=10)  # 0.4# inverted normalisationnorm2 = normalise(value=4, min_val=10, max_val=0)  # 0.6# exceeding the boundariesnorm3 = normalise(value=11, min_val=5, max_val=10)  # 1.0# float works as well as integernorm4 = normalise(value=-5.0, min_val=2.3, max_val=199.0)  # 0.0# inverted exceeding boundariesnorm5 = normalise(value=-5, min_val=100, max_val=0.5)  # 1.0# invalid inputs will return 0.0norm6 = normalise(value=None, min_val=0, max_val=10)  # 0.0norm7 = normalise(value=5, min_val=0, max_val=None)  # 0.0```Since version 1.0.1 a new parameter can be passed to the function that normalises the value, but can exceed theboundaries provided by `min_val` and `max_val`.```pythonfrom pbu import normalisenorm1 = normalise(value=12, min_val=0, max_val=10, limit=False)  # 1.2```### `discretise`Discretises a numeric value into a number of buckets determined by the provided precision and boolean flag indicatingwhether to use the lower, upper or middle value of the bucket as the value for the bucket.```pythonfrom pbu import discretisedisc1 = discretise(value=4.5, precision=1.0, floor=True)  # 4.0disc2 = discretise(value=4.5, precision=0.4, ceil=True)  # 4.8disc3 = discretise(value=4.5, precision=0.4)  # 4.6 (assumes mid-point if neither floor nor ceil is set)```</longdescription>
</pkgmetadata>