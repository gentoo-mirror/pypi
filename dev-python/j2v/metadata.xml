<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/j2v.svg)](https://badge.fury.io/py/j2v) [![CI/CD](https://github.com/Cimpress-MCP/j2v/workflows/Test/badge.svg)](https://github.com/Cimpress-MCP/j2v/actions?query=workflow%3ATest)# JSONs to Looker views (J2V)J2V is a simple command-line tool to convert JSON to [Looker](https://looker.com/) readable files in forms of [Looker Views](https://docs.looker.com/reference/view-params/view) and [Looker Explores](https://docs.looker.com/reference/explore-params/explore).Also it outputs an SQL with proper paths and explosion expressions.This is useful to be used in combination with databases that are focusing on schema-on-read, and data is stored in raw JSON instead of exploded into columns of a table or view.## Example use caseYou have a table in your database. This table contains a column containing JSONs (one JSON per row). You are very curious how these data look like exploded, but you do not want to spend 2h going through the JSON structure and specifying all the fields just to surface them in Looker.With J2V all the structures are discovered automatically and two files are generated - a Looker View and Looker Explore. All you need to do is copy/paste the output of this command line tool into your Looker project and you can start exploring.# Usage## Requirements[Python 3](https://www.python.org/downloads/) must be installed.## How to run* use code from github or* `pip install j2v`## Parameters* `json_files`: Files in JSON format, representing the data stored in a table* `output_view`: Name of Looker View output file to be created* `output_explore`: Name of Looker model output file to be created* `sql_table_name`: Name of the DB table to be used (this is only used in the LookML files; no actual connection to a database will be done as part of this tool)* `table_alias`: Name of the table alias * `column_name`: Name of the column in the DB table as specified in `sql_table_name`. (this is only used in the LookML files; no actual connection to a database will be done as part of this tool)* `primary_key`: Name of the primary key from JSON field* `sql_dialect`: Specifies the sql dialect of the output. [snowflake | bigquery]## Output* `output_view`: File containing definitions of Looker views (see [examples](./examples/) directory in this repository)* `output_explore`: File containing definition of looker explore exploding the structures (see [examples](./examples/) directory in this repository)## Example usage### Using all parameters`python main.py --json_files data1.json data2.json --output_view RESTAURANT_CHAIN --output_explore RESTAURANT_CHAIN --column_name DATA --sql_table_name RESTAURANT_DETAILS --table_alias chains_table --handle_null_values_in_sql true --primary_key apiVersion`### Using only mandatory parameters`python3 main.py --json_files order_example.json order_example2.json order_example3.json`&lt;br /&gt;# Contribution## Project structure:* `j2v` - source code of a package* `examples` - working examples* `tests` - tests## Contribute1. If unsure, open an issue for a discussion1. Create a fork1. Make your change1. Make a pull request1. Happy contribution!## EXAMPLE### Input: ```json{  &quot;apiVersion&quot;: &quot;v3.4&quot;,  &quot;data Provider&quot;: &quot;Eat me&quot;,  &quot;restaurants&quot;: [    {      &quot;name&quot;: &quot;Super Burger&quot;,      &quot;city&quot;: &quot;Sydney&quot;,      &quot;country&quot;: &quot;Australia&quot;,      &quot;address&quot;: &quot;Big Street 3&quot;,      &quot;currency&quot;: &quot;AUD&quot;,      &quot;openTime&quot;: 1571143824,      &quot;menu&quot;: [        {          &quot;dishName&quot;: &quot;BurgerPlus&quot;,          &quot;price&quot;: 10,          &quot;ingredients&quot;: [&quot;Meat&quot;, &quot;Cheese&quot;, &quot;Bun&quot;]        }      ]    }  ],  &quot;headquarter&quot;: {    &quot;employees&quot;: 36,    &quot;city&quot;: &quot;Olsztyn&quot;,    &quot;country&quot;: &quot;Poland&quot;,    &quot;building&quot;: {      &quot;address&quot;: &quot;3 Maja 10&quot;,      &quot;floors&quot;: [1, 2, 7]    }  },  &quot;dataGenerationTimestamp&quot;: &quot;2019-03-30T11:30:00.812Z&quot;,  &quot;payloadPrimaryKeyValue&quot;: &quot;3ab21b54-22d6-473c-b055-4430f8927d4c&quot;,  &quot;version&quot;: null}```### Ouput:#### SQL output:- Snowflake [Default]- BigQuery```SNOWFLAKE SQL ---VIEW WITH NUll VALUE HANDLING---SELECT---chains_table InformationIFNULL(chains_table.&quot;DATA&quot;:&quot;apiVersion&quot;::string,'N/A') AS API_VERSION,IFNULL(chains_table.&quot;DATA&quot;:&quot;data Provider&quot;::string,'N/A') AS DATA_PROVIDER,IFNULL(chains_table.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;building&quot;:&quot;address&quot;::string,'N/A') AS HEADQUARTER_BUILDING_ADDRESS,IFNULL(chains_table.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;city&quot;::string,'N/A') AS HEADQUARTER_CITY,IFNULL(chains_table.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;country&quot;::string,'N/A') AS HEADQUARTER_COUNTRY,IFNULL(chains_table.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;employees&quot;::number,0) AS HEADQUARTER_EMPLOYEES,IFNULL(chains_table.&quot;DATA&quot;:&quot;payloadPrimaryKeyValue&quot;::string,'N/A') AS PAYLOAD_PRIMARY_KEY_VALUE,IFNULL(chains_table.&quot;DATA&quot;:&quot;version&quot;::string,'N/A') AS VERSION,chains_table.&quot;DATA&quot;:&quot;dataGenerationTimestamp&quot;::timestamp AS DATA_GENERATION_TIMESTAMP,---restaurants InformationIFNULL(restaurants.VALUE:&quot;address&quot;::string,'N/A') AS RESTAURANTS_ADDRESS,IFNULL(restaurants.VALUE:&quot;city&quot;::string,'N/A') AS RESTAURANTS_CITY,IFNULL(restaurants.VALUE:&quot;country&quot;::string,'N/A') AS RESTAURANTS_COUNTRY,IFNULL(restaurants.VALUE:&quot;currency&quot;::string,'N/A') AS RESTAURANTS_CURRENCY,IFNULL(restaurants.VALUE:&quot;name&quot;::string,'N/A') AS RESTAURANTS_NAME,IFNULL(restaurants.VALUE:&quot;openTime&quot;::number,0) AS RESTAURANTS_OPEN_TIME,---restaurants_menu InformationIFNULL(restaurants_menu.VALUE:&quot;dishName&quot;::string,'N/A') AS RESTAURANTS_MENU_DISH_NAME,IFNULL(restaurants_menu.VALUE:&quot;price&quot;::number,0) AS RESTAURANTS_MENU_PRICE,---restaurants_menu_ingredients InformationIFNULL(restaurants_menu_ingredients.VALUE::string,'N/A') AS RESTAURANTS_MENU_INGREDIENTS_VALUE,---headquarter_building_floors InformationIFNULL(headquarter_building_floors.VALUE::number,0) AS HEADQUARTER_BUILDING_FLOORS_VALUEFROM RESTAURANT_DETAILS AS chains_table,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; chains_table.&quot;DATA&quot;:&quot;restaurants&quot;) restaurants,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; restaurants.VALUE:&quot;menu&quot;) restaurants_menu,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; restaurants_menu.VALUE:&quot;ingredients&quot;) restaurants_menu_ingredients,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; chains_table.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;building&quot;:&quot;floors&quot;) headquarter_building_floors`````` BIGQUERY SQL ---VIEW WITH NUll VALUE HANDLING---SELECT---chains_table InformationIFNULL(chains_table.DATA.apiVersion,'N/A') AS API_VERSION,IFNULL(chains_table.DATA.data Provider,'N/A') AS DATA_PROVIDER,IFNULL(chains_table.DATA.headquarter.building.address,'N/A') AS HEADQUARTER_BUILDING_ADDRESS,IFNULL(chains_table.DATA.headquarter.city,'N/A') AS HEADQUARTER_CITY,IFNULL(chains_table.DATA.headquarter.country,'N/A') AS HEADQUARTER_COUNTRY,IFNULL(chains_table.DATA.headquarter.employees,0) AS HEADQUARTER_EMPLOYEES,IFNULL(chains_table.DATA.payloadPrimaryKeyValue,'N/A') AS PAYLOAD_PRIMARY_KEY_VALUE,IFNULL(chains_table.DATA.version,'N/A') AS VERSION,chains_table.DATA.dataGenerationTimestamp AS DATA_GENERATION_TIMESTAMP,---headquarter_building_floors InformationIFNULL(headquarter_building_floors.,0) AS HEADQUARTER_BUILDING_FLOORS,---restaurants InformationIFNULL(restaurants.address,'N/A') AS RESTAURANTS_ADDRESS,IFNULL(restaurants.city,'N/A') AS RESTAURANTS_CITY,IFNULL(restaurants.country,'N/A') AS RESTAURANTS_COUNTRY,IFNULL(restaurants.currency,'N/A') AS RESTAURANTS_CURRENCY,IFNULL(restaurants.name,'N/A') AS RESTAURANTS_NAME,IFNULL(restaurants.openTime,0) AS RESTAURANTS_OPEN_TIME,---restaurants_menu InformationIFNULL(restaurants_menu.dishName,'N/A') AS RESTAURANTS_MENU_DISH_NAME,IFNULL(restaurants_menu.price,0) AS RESTAURANTS_MENU_PRICE,---restaurants_menu_ingredients InformationIFNULL(restaurants_menu_ingredients.,'N/A') AS RESTAURANTS_MENU_INGREDIENTSFROM RESTAURANT_DETAILS AS chains_tableLEFT JOIN UNNEST(chains_table.DATA.headquarter.building.floors) AS headquarter_building_floorsLEFT JOIN UNNEST(chains_table.DATA.restaurants) AS restaurantsLEFT JOIN UNNEST(restaurants.menu) AS restaurants_menuLEFT JOIN UNNEST(restaurants_menu.ingredients) AS restaurants_menu_ingredients```#### Ouput files:##### View file:```LookMLview: chains_table {   sql_table_name: RESTAURANT_DETAILS ;;  dimension: address {    description: &quot;Address&quot;    type: string    sql: ${TABLE}.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;building&quot;:&quot;address&quot;::string ;;    group_label: &quot;Building&quot;  }  dimension: api_version {    description: &quot;Api version&quot;    primary_key: yes    type: string    sql: ${TABLE}.&quot;DATA&quot;:&quot;apiVersion&quot;::string ;;  }  dimension: city {    description: &quot;City&quot;    type: string    sql: ${TABLE}.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;city&quot;::string ;;    group_label: &quot;Headquarter&quot;  }  dimension: country {    description: &quot;Country&quot;    type: string    sql: ${TABLE}.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;country&quot;::string ;;    group_label: &quot;Headquarter&quot;  }  dimension: data_provider {    description: &quot;Data provider&quot;    type: string    sql: ${TABLE}.&quot;DATA&quot;:&quot;data Provider&quot;::string ;;  }  dimension: employees {    description: &quot;Employees&quot;    type: number    sql: ${TABLE}.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;employees&quot;::number ;;    group_label: &quot;Headquarter&quot;  }  dimension: payload_primary_key_value {    description: &quot;Payload primary key value&quot;    type: string    sql: ${TABLE}.&quot;DATA&quot;:&quot;payloadPrimaryKeyValue&quot;::string ;;  }  dimension: version {    description: &quot;Version&quot;    type: string    sql: ${TABLE}.&quot;DATA&quot;:&quot;version&quot;::string ;;  }  dimension_group: data_generation_timestamp {    description: &quot;Data generation timestamp&quot;    type: time    timeframes: [        raw,        time,        date,        week,        month,        quarter,        year    ]    sql: ${TABLE}.&quot;DATA&quot;:&quot;dataGenerationTimestamp&quot;::timestamp ;;  }}view: restaurants {   dimension: address {    description: &quot;Address&quot;    type: string    sql: ${TABLE}.VALUE:&quot;address&quot;::string ;;  }  dimension: city {    description: &quot;City&quot;    type: string    sql: ${TABLE}.VALUE:&quot;city&quot;::string ;;  }  dimension: country {    description: &quot;Country&quot;    type: string    sql: ${TABLE}.VALUE:&quot;country&quot;::string ;;  }  dimension: currency {    description: &quot;Currency&quot;    type: string    sql: ${TABLE}.VALUE:&quot;currency&quot;::string ;;  }  dimension: name {    description: &quot;Name&quot;    type: string    sql: ${TABLE}.VALUE:&quot;name&quot;::string ;;  }  dimension_group: open_time {    description: &quot;Open time&quot;    datatype: epoch    type: time    timeframes: [        raw,        time,        date,        week,        month,        quarter,        year    ]    sql: ${TABLE}.VALUE:&quot;openTime&quot;::number ;;  }}view: restaurants_menu {   dimension: dish_name {    description: &quot;Dish name&quot;    type: string    sql: ${TABLE}.VALUE:&quot;dishName&quot;::string ;;  }  dimension: price {    description: &quot;Price&quot;    type: number    sql: ${TABLE}.VALUE:&quot;price&quot;::number ;;  }}view: restaurants_menu_ingredients {   dimension: value {    description: &quot;Value&quot;    type: string    sql: ${TABLE}.VALUE::string ;;  }}view: headquarter_building_floors {   dimension: value {    description: &quot;Value&quot;    type: number    sql: ${TABLE}.VALUE::number ;;  }}```##### Explore file:```LookMLinclude: &quot;restaurant_chain.view.lkml&quot;explore: chains_table {  view_name: chains_table  from: chains_table  label: &quot;chains_table explore&quot;  description: &quot;chains_table explore&quot;  join: restaurants {     from: restaurants     sql:,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; chains_table.&quot;DATA&quot;:&quot;restaurants&quot;) restaurants;;     relationship: one_to_many   }  join: restaurants_menu {     from: restaurants_menu     sql:,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; restaurants.VALUE:&quot;menu&quot;) restaurants_menu;;     relationship: one_to_many      required_joins: [restaurants]  }  join: restaurants_menu_ingredients {     from: restaurants_menu_ingredients     sql:,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; restaurants_menu.VALUE:&quot;ingredients&quot;) restaurants_menu_ingredients;;     relationship: one_to_many      required_joins: [restaurants_menu]  }  join: headquarter_building_floors {     from: headquarter_building_floors     sql:,LATERAL FLATTEN(OUTER =&gt; TRUE, INPUT =&gt; chains_table.&quot;DATA&quot;:&quot;headquarter&quot;:&quot;building&quot;:&quot;floors&quot;) headquarter_building_floors;;     relationship: one_to_many   }}```</longdescription>
</pkgmetadata>