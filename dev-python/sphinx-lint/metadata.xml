<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sphinx Lint[![PyPI](https://img.shields.io/pypi/v/sphinx-lint) ![Monthly downloads](https://img.shields.io/pypi/dm/sphinx-lint) ![Supported Python Version](https://img.shields.io/pypi/pyversions/sphinx-lint.svg)](https://pypi.org/project/sphinx-lint)[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/sphinx-contrib/sphinx-lint/tests.yml?branch=main)](https://github.com/sphinx-contrib/sphinx-lint/actions)Sphinx Lint is based on [rstlint.py fromCPython](https://github.com/python/cpython/blob/e0433c1e7/Doc/tools/rstlint.py).## What is Sphinx Lint, what is it not?Sphinx Lint should:- be reasonably fast so it's comfortable to use as a linter in your editor.- be usable on a single file.- not give any false positives (probably a utopia, but let's try).- not spend too much effort finding errors that sphinx-build already finds (or can easily find).- focus on finding errors that are **not** visible to sphinx-build.## Using Sphinx LintHere are some example invocations of Sphinx Lint from the command line:```shsphinx-lint           # check all dirs and filessphinx-lint file.rst  # check a single filesphinx-lint docs      # check a directorysphinx-lint -i venv   # ignore a file/directorysphinx-lint -h        # for more options```Sphinx Lint can also be used via [pre-commit](https://pre-commit.com).We recommend using a configuration like this:```yaml  - repo: https://github.com/sphinx-contrib/sphinx-lint    rev: LATEST_SPHINXLINT_RELEASE_TAG    hooks:      - id: sphinx-lint```## Known issuesCurrently Sphinx Lint can't work with tables, there's no understandingof how `linesplit` works in tables, like:```rst   +-----------------------------------------+-----------------------------+---------------+   | Method                                  | Checks that                 | New in        |   +=========================================+=============================+===============+   | :meth:`assertEqual(a, b)                | ``a == b``                  |               |   | &lt;TestCase.assertEqual&gt;`                 |                             |               |   +-----------------------------------------+-----------------------------+---------------+```as Sphinx Lint works line by line it will inevitably think the `:meth:` role is not closed properly.To avoid false positives, some rules are skipped if we're in a table.## ContributingA quick way to test if some syntax is valid from a purereStructuredText point of view, one case use `docutils`'s `pseudoxml`writer, like:```text$ docutils --writer=pseudoxml tests/fixtures/xpass/role-in-code-sample.rst&lt;document source=&quot;tests/fixtures/xpass/role-in-code-sample.rst&quot;&gt;    &lt;paragraph&gt;        Found in the pandas documentation, this is valid:    &lt;bullet_list bullet=&quot;*&quot;&gt;        &lt;list_item&gt;            &lt;paragraph&gt;                A pandas class (in the form                &lt;literal&gt;                    :class:`pandas.Series`                )        &lt;list_item&gt;            &lt;paragraph&gt;                A pandas method (in the form                &lt;literal&gt;                    :meth:`pandas.Series.sum`                )        &lt;list_item&gt;            &lt;paragraph&gt;                A pandas function (in the form                &lt;literal&gt;                    :func:`pandas.to_datetime`                )    &lt;paragraph&gt;        it's documenting roles using code samples (double backticks).```## Releasing1. Make sure that the [CI tests pass](https://github.com/sphinx-contrib/sphinx-lint/actions)   and optionally double-check locally with &quot;friends projects&quot; by running:          sh download-more-tests.sh       python -m pytest2. Go on the [Releases page](https://github.com/sphinx-contrib/sphinx-lint/releases)3. Click &quot;Draft a new release&quot;4. Click &quot;Choose a tag&quot;5. Type the next vX.Y.Z version and select &quot;Create new tag: vX.Y.Z on publish&quot;6. Leave the &quot;Release title&quot; blank (it will be autofilled)7. Click &quot;Generate release notes&quot; and amend as required8. Click &quot;Publish release&quot;9. Check the tagged   [GitHub Actions build](https://github.com/sphinx-contrib/sphinx-lint/actions/workflows/deploy.yml)   has [deployed to PyPI](https://pypi.org/project/sphinx-lint/#history)## LicenseAs this script was in the CPython repository the license is the PythonSoftware Foundation Licence Version 2, see the LICENSE file for a fullversion.</longdescription>
</pkgmetadata>