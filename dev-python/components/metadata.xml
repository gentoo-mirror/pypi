<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ComponentsPython library to facilitate modular components that can be combined through dependency injection.## Getting StartedDefine your components by subclassing from `Component`. Then you can use them in other components through dependency injection as follows:```pythonfrom components import Componentclass LogWriter(Component):    def __init__(self, path: str = &quot;logs/logfile.txt&quot;):        self.path = pathclass Application(Component):    def __init__(self, logger: LogWriter, parameter1: int = 42):        self.parameter1 = parameter1        self.logger = logger    def run(self):        print(&quot;paramter1:&quot;, self.parameter1)        print(&quot;logger:&quot;, type(self.logger))        print(&quot;log path:&quot;, self.logger.path)if __name__ == &quot;__main__&quot;:    app = Application.resolve()    app.run()```Components and parameter can all be supplied to the `resolve` function, including parameters of subcomponents. In this example you can also instantiate `app` as follows: - `app = Application.resolve(parameter1=9)` - `app = Application.resolve(path=&quot;output/logs/stdout.log&quot;)` - `app = Application.resolve(logger_path=&quot;output/logs/stdout.log&quot;)`&gt; Note that parameters of subcomponents can be addressed by their own name (when no conflicts are present) or by their more defined name which includes the subcomponent's name(s) separated with underscores. In some cases, when conflicting paramter names occur, the more defined name is be required.Additionally, paramters can be supplied through class attributes. Consider the following example:```pythonclass RotationalLogWriter(LogWriter):    def __init__(self, path: str = &quot;logs/logfile.txt&quot;, rotations: int = 5):        super().__init__(path)        self.rotations = rotationsclass CustomApplication(Application):    logger: RotationalLogWriter    parameter1 = 8    def run(self):        super().run()        print(&quot;log rotations:&quot;, self.logger.rotations)if __name__ == &quot;__main__&quot;:    app = Application.resolve()    print(&quot;app.run&quot;)    app.run()    custom_app = CustomApplication.resolve()    print(&quot;\ncustom_app.run&quot;)    custom_app.run()```Which gives the output:```app.runparamter1: 42logger: &lt;class '__main__.LogWriter'&gt;log path: logs/logfile.txtcustom_app.runparamter1: 8logger: &lt;class '__main__.RotationalLogWriter'&gt;log path: logs/logfile.txtlog rotations: 5```Finally, it is also possible to turn Components into commands for a command line interface (CLI). Simply create a `cli = components.cli.CLI()` object and have your `Component` extend from `cli.Command`. Then the command will be registered and its `run` function will be called when the command is used from the command line.```pythonfrom components.cli import CLIcli = CLI()class ApplicationAsCommand(Application, cli.Command):    logger: RotationalLogWriter    def run(self):        super().run()        print(&quot;log rotations:&quot;, self.logger.rotations)if __name__ == &quot;__main__&quot;:    print(&quot;cli.run&quot;)    cli.run()```In the command line, this gives:```console&gt; python3 example/example_app.py ApplicationAsCommand --parameter1 80cli.runparamter1: 80logger: &lt;class '__main__.RotationalLogWriter'&gt;log path: logs/logfile.txtlog rotations: 5&gt; python3 example/example_app.py ApplicationAsCommand -husage: example_app.py ApplicationAsCommand [-h] [--path str] [--rotations int] [--parameter1 int]optional arguments:  -h, --help            show this help message and exit  --path str, --logger-path str                        (default: logs/logfile.txt)  --rotations int, --logger-rotations int                        (default: 5)  --parameter1 int      (default: 42)```## Advanced Usage### Lists of ComponentsIn addition to providing single `Components`, the resolver will also instantiate lists of `Components` when requested with the `Tuple` type hint. This can be useful for supplying a variable amount of `Components` for example, for the `Listener` pattern.This example illustrates the usage of `Tuple` with `Components`.```pythonfrom typing import Tupleclass SubComp1(Component):    def __init__(self, par=42, par1: int=3):        self.par = par        self.par1 = par1class SubComp2(Component):    def __init__(self, par=9, par2: str=&quot;Test&quot;):        self.par = par        self.par2 = par2class Comp(Component):    def __init__(self, components: Tuple[Component, ...]):        self.components = componentsclass ParentComp(Comp):    components: Tuple[SubComp1, SubComp2]````Comp.resolve()` will result in an empty list for the `components` variable, whereas calling `ParentComp.resolve()` will provide a list with two components of the following types: `[SubComp1, SubComp2]` to be filled into the `components` parameter.### Non-identifying parametersThe default `__repr__` of `Components` calls the function `identifier` which shows the component name with its parameters between round braces. Additionally there is `name` and `full_identifier` to respectively only return the name or to recursively include subcomponent identifiers.However, some parameters should not be listed in the `__repr__` of an object. These can be indicated by prefixing them with an underscore (`_`) as if they were private/protected members. The parameter can then be provided using the name without underscore or with underscore.## Technical DetailsWIP - Explain semantics of conflicting param names - Explain that creating an object without `resolve` does not take attributes into account - ...## Future Work - Add `@argument` annotation to indicate class attributes that are arguments for parameters (allows to detect mistyped names for example). - Add support for lists in command line. - Suggestions? Contact [me](mailto:joeydepauw@gmail.com)!</longdescription>
</pkgmetadata>