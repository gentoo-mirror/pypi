<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># traces[![Version](https://img.shields.io/pypi/v/traces.svg?)](https://pypi.python.org/pypi/traces) [![PyVersions](https://img.shields.io/pypi/pyversions/traces.svg)](https://pypi.python.org/pypi/traces) [![CircleCI](https://circleci.com/gh/datascopeanalytics/traces/tree/master.svg?style=shield)](https://circleci.com/gh/datascopeanalytics/traces/tree/master) [![Documentation Status](https://readthedocs.org/projects/traces/badge/?version=master)](https://traces.readthedocs.io/en/master/?badge=master) [![Coverage Status](https://coveralls.io/repos/github/datascopeanalytics/traces/badge.svg?branch=master)](https://coveralls.io/github/datascopeanalytics/traces?branch=master)A Python library for unevenly-spaced time series analysis.## Why?Taking measurements at irregular intervals is common, but most tools areprimarily designed for evenly-spaced measurements. Also, in the realworld, time series have missing observations or you may have multipleseries with different frequencies: it's can be useful to model these asunevenly-spaced.Traces was designed by the team at[Datascope](https://datascopeanalytics.com/) based on several practicalapplications in different domains, because it turns out [unevenly-spaceddata is actually pretty great, particularly for sensor dataanalysis](https://datascopeanalytics.com/blog/unevenly-spaced-time-series/).## InstallationTo install traces, run this command in your terminal:```bash$ pip install traces```## Quickstart: using tracesTo see a basic use of traces, let's look at these data from a lightswitch, also known as _Big Data from the Internet of Things_.![](docs/_static/img/trace.svg)The main object in traces is a [TimeSeries](https://traces.readthedocs.io/en/master/api_reference.html#timeseries), which youcreate just like a dictionary, adding the five measurements at 6:00am,7:45:56am, etc.```python&gt;&gt;&gt; time_series = traces.TimeSeries()&gt;&gt;&gt; time_series[datetime(2042, 2, 1,  6,  0,  0)] = 0 #  6:00:00am&gt;&gt;&gt; time_series[datetime(2042, 2, 1,  7, 45, 56)] = 1 #  7:45:56am&gt;&gt;&gt; time_series[datetime(2042, 2, 1,  8, 51, 42)] = 0 #  8:51:42am&gt;&gt;&gt; time_series[datetime(2042, 2, 1, 12,  3, 56)] = 1 # 12:03:56am&gt;&gt;&gt; time_series[datetime(2042, 2, 1, 12,  7, 13)] = 0 # 12:07:13am```What if you want to know if the light was on at 11am? Unlike a pythondictionary, you can look up the value at any time even if it's not oneof the measurement times.```python&gt;&gt;&gt; time_series[datetime(2042, 2, 1, 11,  0, 0)] # 11:00am0```The `distribution` function gives you the fraction of time that the`TimeSeries` is in each state.```python&gt;&gt;&gt; time_series.distribution(&gt;&gt;&gt;   start=datetime(2042, 2, 1,  6,  0,  0), # 6:00am&gt;&gt;&gt;   end=datetime(2042, 2, 1,  13,  0,  0)   # 1:00pm&gt;&gt;&gt; )Histogram({0: 0.8355952380952381, 1: 0.16440476190476191})```The light was on about 16% of the time between 6am and 1pm.### Adding more data...Now let's get a little more complicated and look at the sensor readingsfrom forty lights in a house.![](docs/_static/img/traces.svg)How many lights are on throughout the day? The merge function takes theforty individual `TimeSeries` and efficiently merges them into one`TimeSeries` where the each value is a list of all lights.```python&gt;&gt;&gt; trace_list = [... list of forty traces.TimeSeries ...]&gt;&gt;&gt; count = traces.TimeSeries.merge(trace_list, operation=sum)```We also applied a `sum` operation to the list of states to get the`TimeSeries` of the number of lights that are on.![](docs/_static/img/count.svg)How many lights are on in the building on average during business hours,from 8am to 6pm?```python&gt;&gt;&gt; histogram = count.distribution(&gt;&gt;&gt;   start=datetime(2042, 2, 1,  8,  0,  0),   # 8:00am&gt;&gt;&gt;   end=datetime(2042, 2, 1,  12 + 6,  0,  0) # 6:00pm&gt;&gt;&gt; )&gt;&gt;&gt; histogram.median()17```The `distribution` function returns a [Histogram](https://traces.readthedocs.io/en/master/api_reference.html#histogram) thatcan be used to get summary metrics such as the mean or quantiles.### It's flexibleThe measurements points (keys) in a `TimeSeries` can be in any units aslong as they can be ordered. The values can be anything.For example, you can use a `TimeSeries` to keep track the contents of agrocery basket by the number of minutes within a shopping trip.```python&gt;&gt;&gt; time_series = traces.TimeSeries()&gt;&gt;&gt; time_series[1.2] = {'broccoli'}&gt;&gt;&gt; time_series[1.7] = {'broccoli', 'apple'}&gt;&gt;&gt; time_series[2.2] = {'apple'}          # puts broccoli back&gt;&gt;&gt; time_series[3.5] = {'apple', 'beets'} # mmm, beets```To learn more, check the [examples](https://traces.readthedocs.io/en/master/examples.html) and the detailed [reference](https://traces.readthedocs.io/en/master/api_reference.html#).## More info## ContributingContributions are welcome and greatly appreciated! Please visit our [guidelines](https://github.com/datascopeanalytics/traces/blob/master/CONTRIBUTING.md)for more info.</longdescription>
</pkgmetadata>