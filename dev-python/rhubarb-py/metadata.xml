<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Rhubarb&lt;div align=&quot;center&quot;&gt;[![Release](https://img.shields.io/github/v/release/mopeyjellyfish/rhubarb)](https://img.shields.io/github/v/release/mopeyjellyfish/rhubarb)[![Build](https://github.com/mopeyjellyfish/rhubarb/workflows/build/badge.svg?branch=main&amp;event=push)](https://github.com/mopeyjellyfish/rhubarb/actions?query=workflow%3Abuild)[![Python Version](https://img.shields.io/pypi/pyversions/rhubarb-py.svg)](https://pypi.org/project/rhubarb-py)[![Dependencies Status](https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg)](https://github.com/mopeyjellyfish/rhubarb/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aapp%2Fdependabot)[![codecov](https://codecov.io/gh/mopeyjellyfish/rhubarb/branch/main/graph/badge.svg?token=E8F5LMKDBK)](https://codecov.io/gh/mopeyjellyfish/rhubarb)[![Documentation Status](https://readthedocs.org/projects/rhubarb-py/badge/?version=latest)](https://rhubarb-py.readthedocs.io/en/latest/?badge=latest)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Security: bandit](https://img.shields.io/badge/security-bandit-green.svg)](https://github.com/PyCQA/bandit)[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/mopeyjellyfish/rhubarb/blob/master/.pre-commit-config.yaml)[![Semantic Versions](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--versions-e10079.svg)](https://github.com/mopeyjellyfish/rhubarb/releases)[![Commit activity](https://img.shields.io/github/commit-activity/m/mopeyjellyfish/rhubarb)](https://img.shields.io/github/commit-activity/m/mopeyjellyfish/rhubarb)[![License](https://img.shields.io/github/license/mopeyjellyfish/rhubarb)](https://github.com/mopeyjellyfish/rhubarb/blob/master/LICENSE)Rhubarb is a library that simplifies realtime streaming of events for a number of backends in to a single API. Currently supports [`Postgres`](https://github.com/MagicStack/asyncpg), [`kafka`](https://github.com/aio-libs/aiokafka), [`RabbitMQ`](https://github.com/mosquito/aio-pika), [`redis`](https://github.com/aio-libs/aioredis-py) as well as an internal memory backend useful for testing.&lt;/div&gt;## InstallationThere are a number of backends that can be used with Rhubarb:| Kafka | Postgres | Redis | RabbitMQ || --------------------------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |--------------------------------------------------------------------------------- || &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;./README_assets/kafka.png&quot; width=&quot;60&quot; height=&quot;100&quot;/&gt;&lt;/p&gt;    | &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;./README_assets/postgres.png&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;/p&gt; | &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;./README_assets/redis.png&quot; width=&quot;100&quot; height=&quot;80&quot;/&gt;&lt;/p&gt; | &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;./README_assets/rabbitmq.jpg&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;&lt;/p&gt; || `pip install rhubarb-py[kafka]` | `pip install rhubarb-py[postgres]` | `pip install rhubarb-py[redis]` | `pip install rhubarb-py[rabbitmq]` |## Backends- `Rhubarb(&quot;redis://localhost:6379/0&quot;)`- `Rhubarb(&quot;kafka://localhost:9092&quot;)`- `Rhubarb(&quot;postgres://postgres:postgres@localhost:5432/rhubarb&quot;)`- `Rhubarb(&quot;amqp://guest:guest@localhost/&quot;)`- `Rhubarb(&quot;memory://&quot;)`## Quick start### Simple event consumer```pythonasync with Rhubarb(&quot;redis://localhost:6379/0&quot;) as events:    async with events.subscribe(channel=&quot;CHATROOM&quot;) as subscriber:        async for event in subscriber:            await websocket.send_text(event.message)```### Simple event producer```pythonasync with Rhubarb(&quot;redis://localhost:6379/0&quot;) as events:    await events.publish(&quot;test message&quot;)```### History retrieval```pythonasync with Rhubarb(&quot;redis://localhost:6379/0&quot;) as events:    async with events.subscribe(channel=&quot;CHATROOM&quot;, history=10) as subscriber: # read the last 10 events published to the channel        async for event in subscriber:            await websocket.send_text(event.message)```### Custom serializer &amp; deserializer```pythonasync with Rhubarb(&quot;redis://localhost:6379/0&quot;, serializer=json.dumps, deserializer=json.loads) as events:    async with events.subscribe(channel=&quot;CHATROOM&quot;, history=10) as subscriber: # read the last 10 events published to the channel        async for event in subscriber:            await websocket.send_text(event.message)```### Group subscribing (at-most-once processing)```pythonasync with Rhubarb(&quot;redis://localhost:6379/0&quot;, serializer=json.dumps, deserializer=json.loads) as events:    async with events.subscribe(        &quot;TEST-GROUP-CHANNEL&quot;, group_name=&quot;TEST_GROUP&quot;, consumer_name=&quot;sub_1&quot;    ) as subscriber_1:        async for event in subscriber:            await process_job(event)```## ExampleA minimal working example can be found in [example](https://github.com/mopeyjellyfish/rhubarb/blob/main/example/app.py) directory.```pythonimport osfrom starlette.applications import Starlettefrom starlette.concurrency import run_until_first_completefrom starlette.responses import HTMLResponsefrom starlette.routing import Route, WebSocketRoutefrom rhubarb import RhubarbURL = os.environ.get(&quot;URL&quot;, &quot;redis://localhost:6379/0&quot;)events = Rhubarb(URL)html = &quot;&quot;&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;Chat&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;        &lt;form action=&quot;&quot; onsubmit=&quot;sendMessage(event)&quot;&gt;            &lt;input type=&quot;text&quot; id=&quot;messageText&quot; autocomplete=&quot;off&quot;/&gt;            &lt;button&gt;Send&lt;/button&gt;        &lt;/form&gt;        &lt;ul id='messages'&gt;        &lt;/ul&gt;        &lt;script&gt;            var ws = new WebSocket(&quot;ws://localhost:8000/ws&quot;);            ws.onmessage = function(event) {                var messages = document.getElementById('messages')                var message = document.createElement('li')                var content = document.createTextNode(event.data)                message.appendChild(content)                messages.appendChild(message)            };            function sendMessage(event) {                var input = document.getElementById(&quot;messageText&quot;)                ws.send(input.value)                input.value = ''                event.preventDefault()            }        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;async def homepage(_):    return HTMLResponse(html)async def room_consumer(websocket):    async for message in websocket.iter_text():        await events.publish(channel=&quot;chatroom&quot;, message=message)async def room_producer(websocket):    async with events.subscribe(channel=&quot;chatroom&quot;) as subscriber:        async for event in subscriber:            await websocket.send_text(event.message)async def ws(websocket):    await websocket.accept()    await run_until_first_complete(        (room_consumer, {&quot;websocket&quot;: websocket}),        (room_producer, {&quot;websocket&quot;: websocket}),    )routes = [    Route(&quot;/&quot;, homepage),    WebSocketRoute(&quot;/ws&quot;, ws, name=&quot;chatroom_ws&quot;),]app = Starlette(    routes=routes,    on_startup=[events.connect],    on_shutdown=[events.disconnect],)```## ðŸ›¡ License[![License](https://img.shields.io/github/license/mopeyjellyfish/rhubarb)](https://github.com/mopeyjellyfish/rhubarb/blob/master/LICENSE)This project is licensed under the terms of the `MIT` license. See [LICENSE](https://github.com/mopeyjellyfish/rhubarb/blob/master/LICENSE) for more details.</longdescription>
</pkgmetadata>