<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dictionaryutilspython wrapper and metaschema for datadictionary.It can be used to:- load a local dictionary to a python object.- dump schemas to a file that can be uploaded to s3 as an artifact.- load schema file from an url to a python object that can be used by services## Test for dictionary validity with DockerSay you have a dictionary you are building locally and you want to see if it will pass the tests.You can add a simple alias to your `.bash_profile` to enable a quick test command:```testdict() { docker run --rm -v $(pwd):/dictionary quay.io/cdis/dictionaryutils:master; }```Then from the directory containing the `gdcdictionary` directory run `testdict`.## Generate simulated data with DockerIf you wish to generate fake simulated data you can also do that with dictionaryutils and the data-simulator.```simdata() { docker run --rm -v $(pwd):/dictionary -v $(pwd)/simdata:/simdata quay.io/cdis/dictionaryutils:master /bin/sh -c &quot;cd /dictionary &amp;&amp; python setup.py install --force; python /src/datasimulator/bin/data-simulator simulate --path /simdata/ $*; export SUCCESS=$?; rm -rf build dictionaryutils dist gdcdictionary.egg-info; chmod -R a+rwX /simdata; exit $SUCCESS&quot;; }simdataurl() { docker run --rm -v $(pwd):/dictionary -v $(pwd)/simdata:/simdata quay.io/cdis/dictionaryutils:master /bin/sh -c &quot;python /src/datasimulator/bin/data-simulator simulate --path /simdata/ $*; chmod -R a+rwX /simdata&quot;; }```Then from the directory containing the `gdcdictionary` directory run `simdata` and a folder will be created called `simdata` with the results of the simulator run. You can also pass in additional arguments to the data-simulator script such as `simdata --max_samples 10`.The `--max_samples` argument will define a default number of nodes to simulate, but you can override it using the `--node_num_instances_file` argument. For example, if you create the following `instances.json`:```{        &quot;case&quot;: 100,        &quot;demographic&quot;: 100}```Then run the following:```docker run --rm -v $(pwd):/dictionary -v $(pwd)/simdata:/simdata quay.io/cdis/dictionaryutils:master /bin/sh -c &quot;cd /dictionary &amp;&amp; python setup.py install --force; python /src/datasimulator/bin/data-simulator simulate --path /simdata/ --program workshop --project project1 --max_samples 10 --node_num_instances_file instances.json; export SUCCESS=$?; rm -rf build dictionaryutils dist gdcdictionary.egg-info; chmod -R a+rwX /simdata; exit $SUCCESS&quot;;```Then you'll get 100 each of `case` and `demographic` nodes and 10 each of everything else. Note that the above example also defines `program` and `project` names.You can also run the simulator for an arbitrary json url by using `simdataurl --url https://datacommons.example.com/schema.json`.## Use dictionaryutils to load a dictionary```from dictionaryutils import DataDictionarydict_fetch_from_remote = DataDictionary(url=URL_FOR_THE_JSON)dict_loaded_locally = DataDictionary(root_dir=PATH_TO_SCHEMA_DIR)```## Use dictionaryutils to dump a dictionary```import jsonfrom dictionaryutils import dump_schemas_from_dirwith open('dump.json', 'w') as f:    json.dump(dump_schemas_from_dir('../datadictionary/gdcdictionary/schemas/'), f)```</longdescription>
</pkgmetadata>