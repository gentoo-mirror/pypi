<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Presto! RequestsAn object-oriented REST API client &amp; requests extesion library.As of version 1.0.0, this library can be considered stable, and significantchanges to the interface or new features are unlikely to be introduced.#### Note: This library requires Python 3.11.0rc1 or later.## Installation```bashpip install presto-requests``````bashpoetry add presto-requests```#### With async support using httpx:```bashpip install presto-requests[async]``````bashpoetry add presto-requests --extras async```### Concept:Presto! Requests is a library that extends the functionality of the requests library.It provides a simple way to create a REST API client that is object-oriented and easy to use.### Example:```pythonfrom presto import Prestoimport pprintgithub = Presto(&quot;https://api.github.com&quot;)user = github.users.sitbon()()  # == github.users[&quot;sitbon&quot;]().attrprint(f&quot;User {user.login} has {user.public_repos} public repositories.&quot;)pprint.pprint(dict(user))``````shellUser sitbon has 15 public repositories.{'avatar_url': 'https://avatars.githubusercontent.com/u/1381063?v=4', 'bio': None, 'blog': '', 'company': None, 'created_at': '2012-01-26T04:25:21Z', 'email': None, 'events_url': 'https://api.github.com/users/sitbon/events{/privacy}', 'followers': 7, 'followers_url': 'https://api.github.com/users/sitbon/followers', 'following': 13, 'following_url': 'https://api.github.com/users/sitbon/following{/other_user}', 'gists_url': 'https://api.github.com/users/sitbon/gists{/gist_id}', 'gravatar_id': '', 'hireable': None, 'html_url': 'https://github.com/sitbon', 'id': 1381063, 'location': 'Portland, OR, USA', 'login': 'sitbon', 'name': 'Phillip Sitbon', 'node_id': 'MDQ6VXNlcjEzODEwNjM=', 'organizations_url': 'https://api.github.com/users/sitbon/orgs', 'public_gists': 4, 'public_repos': 15, 'received_events_url': 'https://api.github.com/users/sitbon/received_events', 'repos_url': 'https://api.github.com/users/sitbon/repos', 'site_admin': False, 'starred_url': 'https://api.github.com/users/sitbon/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/sitbon/subscriptions', 'twitter_username': None, 'type': 'User', 'updated_at': '2022-11-22T00:41:18Z', 'url': 'https://api.github.com/users/sitbon'}```### Usage:Adding to a request path is as simple as accessing an attribute of the same namefrom a `Presto` instance. For example, `Presto(&quot;http://example.com&quot;).some_path`maps to a request object that defines a GET request to `http://example.com/some_path`.Parameters such as headers are set by calling dotted objects under `Presto`, e.g. `presto.some_path(x=y)`.These parameters are eventually passed to requests.request() as keyword arguments, but onlyat a later time when the request is executed by calling the object without any arguments.The return value from a parameter-setting call is the object itself, to enable further chaining.Thus, request parameters can be set and inherited by further dotted paths.Indexing the object like a list is a convient way to extend the path to a new object for thingslike id paths, e.g. `Presto(&quot;http://&lt;base&gt;&quot;).note[1]` maps to a request for `http://&lt;base&gt;/note/1`and calling that object executes the request.There are a few special top-level attributes that can be used to modify the request withoutneeding to call the object and set the `method=` parameter:`GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, `OPTIONS`, and finally `R` which isa request object with no path and no parameters set.#### Example:```pythonfrom presto import Prestopresto = Presto(url=&quot;http://127.0.0.1:8000&quot;, APPEND_SLASH=True)print(&quot;presto:&quot;, presto)api = presto.apiprint(&quot;api:&quot;, api)note = api(headers={&quot;X-User&quot;: &quot;Testing&quot;}).noteprint(&quot;api.note:&quot;, api.note, &quot;equal:&quot;, api.note == note)resp = api.note[4]()print(&quot;headers:&quot;, resp.request.headers)print(&quot;response:&quot;, resp)print(&quot;note:&quot;, resp.attr)``````shellpresto: Presto(url='http://127.0.0.1:8000/', params=adict(method='GET', headers={'Accept': 'application/json'}))api: Request(url='http://127.0.0.1:8000/api/', params=adict(method='GET', headers={'Accept': 'application/json'}))api.note: Request(url='http://127.0.0.1:8000/api/note/', params=adict(method='GET', headers={'Accept': 'application/json', 'X-User': 'Testing'})) equal: Trueheaders: {'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'X-User': 'Testing'}response: &lt;Response [200]&gt;note: adict(user='', id=4, url='http://127.0.0.1:8000/api/note/4/', time='2022-12-02T19:26:09-0800', note='Hello from the API!!', collection={'id': 3, 'url': 'http://127.0.0.1:8000/api/note/coll/3/', 'name': 'Public', 'public': True, 'notes': 1})````response.attr` is an `adict` instance, which is a dictionary that can be accessed as attributes.It contains the JSON-decoded content of a response, if any.`APPEND_SLASH` is meant to be client implementation-specific, e.g. for a Django Rest Framework client, one wouldtypically set `Presto.APPEND_SLASH = True` or inherit from `Presto` in a pre-defined API client class.# Async SupportVersion 1.0.0 adds support for async requests using the `httpx` library.The usage is the same as the synchronous version except when it comes to executing requests, socalls to request objects without parameters need to be awaited. See the example below.```pythonimport asynciofrom presto.asynco import AsyncPresto as Prestoasync def main():    presto = Presto(url=&quot;http://127.0.0.1:8000&quot;, APPEND_SLASH=True)    print(&quot;presto:&quot;, presto)    api = presto.api    print(&quot;api:&quot;, api)    note = api(headers={&quot;X-User&quot;: &quot;Testing&quot;}).note    print(&quot;api.note:&quot;, api.note, &quot;equal:&quot;, api.note == note)    resp = await api.note[4]()    print(&quot;headers:&quot;, resp.request.headers)    print(&quot;response:&quot;, resp)    print(&quot;note:&quot;, resp.attr)if __name__ == &quot;__main__&quot;:    asyncio.run(main())``````shellpresto: AsyncPresto(url='http://127.0.0.1:8000/', params=adict(method='GET', headers={'Accept': 'application/json'}))api: Request(url='http://127.0.0.1:8000/api/', params=adict(method='GET', headers={'Accept': 'application/json'}))api.note: Request(url='http://127.0.0.1:8000/api/note/', params=adict(method='GET', headers={'Accept': 'application/json', 'X-User': 'Testing'})) equal: Trueheaders: Headers({'host': '127.0.0.1:8000', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'python-httpx/0.23.1', 'accept': 'application/json', 'x-user': 'Testing'})response: &lt;Response [200 OK]&gt;note: adict(user='', id=4, url='http://127.0.0.1:8000/api/note/4/', time='2022-12-02T19:26:09-0800', note='Hello from the API!!', collection={'id': 3, 'url': 'http://127.0.0.1:8000/api/note/coll/3/', 'name': 'Public', 'public': True, 'notes': 1})```</longdescription>
</pkgmetadata>