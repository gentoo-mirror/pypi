<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Effect======.. image:: https://travis-ci.org/python-effect/effect.svg?branch=master    :target: https://travis-ci.org/python-effect/effect.. image:: https://img.shields.io/pypi/v/effect.svg    :target: https://pypi.python.org/pypi/effectEffect is a library for helping you write purely functional code by isolatingthe effects (that is, IO or state manipulation) in your code. Documentation isavailable at https://effect.readthedocs.org/, and its PyPI page ishttps://pypi.python.org/pypi/effect.It `supports`_ 3.6 and above... _`supports`: https://travis-ci.org/python-effect/effectYou can install it by running ``pip install effect``... image:: https://radix.github.io/effect/sigh-defects.png    :target: https://twitter.com/extempore2/status/553597279463305218What Is It?===========Effect lets you isolate your IO and state-manipulation code.The benefits of this are many: first, the majority of your code can becomepurely functional, leading to easier testing and ability to reason aboutbehavior. Also, because it separates the specification of an effect from theperformance of the effect, there are two more benefits: testing becomes easierstill, and it's easy to provide alternative implementations of effects.Effect is somewhat similar to &quot;algebraic effects&quot;, as implemented in varioustyped functional programming languages. It also has similarities to Twisted'sDeferred objects.Example=======A very quick example of using Effects:.. code:: python    from effect import sync_perform, sync_performer, Effect, TypeDispatcher    class ReadLine(object):        def __init__(self, prompt):            self.prompt = prompt    def get_user_name():        return Effect(ReadLine(&quot;Enter a candy&gt; &quot;))    @sync_performer    def perform_read_line(dispatcher, readline):        return raw_input(readline.prompt)    def main():        effect = get_user_name()        effect = effect.on(            success=lambda result: print(&quot;I like {} too!&quot;.format(result)),            error=lambda e: print(&quot;sorry, there was an error. {}&quot;.format(e)))        dispatcher = TypeDispatcher({ReadLine: perform_read_line})        sync_perform(dispatcher, effect)    if __name__ == '__main__':        main()``Effect`` takes what we call an ``intent``, which is any object. The``dispatcher`` argument to ``sync_perform`` must have a ``performer`` functionfor your intent.This has a number of advantages. First, your unit tests for ``get_user_name``become simpler. You don't need to mock out or parameterize the ``raw_input``function - you just call ``get_user_name`` and assert that it returns a ReadLineobject with the correct 'prompt' value.Second, you can implement ReadLine in a number of different ways - it'spossible to override the way an intent is performed to do whatever you want.For more information on how to implement the actual effect-performing code,and other details, see the `documentation`_. There is also a full exampleof interacting with the user and using an HTTP client to talk to the GitHubAPI in the `effect-examples`_ repository... _`documentation`: https://effect.readthedocs.org/.. _`effect-examples`: https://github.com/python-effect/effect-examplesVideos======Some talks have been given about Effect.- `Side Effects are a Public API`_ by Chris Armstrong at `Strange Loop`_ (2015-09-26)- `Functionalish Programming in Python with Effect`_ by Robert Collins at `Kiwi PyCon`_ (2015-09-05).. _`Side Effects are a Public API`: https://www.youtube.com/watch?v=D37dc9EoFus.. _`Strange Loop`: https://thestrangeloop.com/.. _`Functionalish Programming in Python with Effect`: https://www.youtube.com/watch?v=fM5d_2BS6FY.. _`Kiwi PyCon`: https://nzpug.org/Thanks======Thanks to Rackspace for allowing me to work on this project, and having an*excellent* `open source employee contribution policy`_.. _`open source employee contribution policy`: https://www.rackspace.com/blog/rackspaces-policy-on-contributing-to-open-source/Authors=======Effect was originally written by `Christopher Armstrong`_,but now has contributions from the following people:.. _`Christopher Armstrong`: https://github.com/radix- `cyli`_- `lvh`_- `Manish Tomar`_- `Tom Prince`_.. _`cyli`: https://github.com/cyli.. _`lvh`: https://github.com/lvh.. _`Manish Tomar`: https://github.com/manishtomar.. _`Tom Prince`: https://github.com/tomprinceIRC===There is a ``#python-effect`` IRC channel on irc.freenode.net.See Also========For integrating Effect with Twisted's Deferreds, see the ``txEffect`` package(`pypi`_, `github`_)... _`pypi`: https://warehouse.python.org/project/txeffect.. _`github`: https://github.com/python-effect/txeffectOver the past few years, the ecosystem of libraries to help with functionalprogramming in Python has exploded. Here are some libraries I recommend:- `pyrsistent`_ - persistent (optimized immutable) data structures in Python- `toolz`_ - a general library of pure FP functions- `fn.py`_ - a Scala-inspired set of tools, including a weird lambda syntax, option type, and monads.. _`pyrsistent`: https://pypi.python.org/pypi/pyrsistent/.. _`toolz`: https://pypi.python.org/pypi/toolz.. _`fn.py`: https://pypi.python.org/pypi/fnLicense=======Effect is licensed under the MIT license:Copyright (C) 2014 Christopher ArmstrongPermission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the &quot;Software&quot;), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies ofthe Software, and to permit persons to whom the Software is furnished to do so,subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESSFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHERIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR INCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>