<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AutoPyTabsAutomatically generate code examples for different Python versions in[mkdocs](https://www.mkdocs.org) or [Sphinx](https://www.sphinx-doc.org) based documentations, or a plain[markdown](https://python-markdown.github.io/) workflow, making use of the[pymdown &quot;tabbed&quot;](https://facelessuser.github.io/pymdown-extensions/extensions/tabbed/) markdown extension for markdown,and [sphinx{design} tabs](https://sphinx-design.readthedocs.io/en/latest/tabs.html) for Sphinx.## Rationale### The problemPython project documentation typically include code examples. Given that most of the time, a project will supportmultiple versions of Python, it would be ideal to showcase the adjustments that can or need to be made for differentPython versions. This can be achieved by including several versions of the example code, conveniently displayed usingthe [pymdown &quot;tabbed&quot;](https://facelessuser.github.io/pymdown-extensions/extensions/tabbed/) extension for markdown, or[sphinx{design} tabs](https://sphinx-design.readthedocs.io/en/latest/tabs.html) for Sphinx.This, however, raises several problems:1. Maintaining multiple versions of a single example is tedious and error-prone as they can easily   become out of sync2. Figuring out which examples need to be changed for which specific Python version is a labour intensive task3. Dropping or adding support for Python versions requires revisiting every example in the documentation4. Checking potentially ~4 versions of a single example into VCS creates unnecessary noiseGiven those, it's no surprise that the current standard is to only show examples for the lowest supported version of Python.### The solution**AutoPyTabs** aims to solve all of these problems by automatically generating versions (using the awsome[ruff](https://github.com/charliermarsh/ruff) project) of code examples, targeting different Python versions**at build-time**, based on a base version (the lowest supported Python version).This means that:1. There exists only one version of each example: The lowest supported version becomes the source of truth,   therefore preventing out-of-sync examples and reducing maintenance burden2. Dropping or adding support for Python versions can be done via a simple change in a configuration file&lt;hr&gt;## Table of contents1. [Usage with mkdocs / markdown](#usage-markdown)   1. [Configuration](#markdown-config)   2. [Differences between the mkdocs plugin vs markdown extension](#differences-between-the-mkdocs-plugin-and-markdown-extension)   3. [Examples](#markdown-examples)   4. [Selectively disable](#selectively-disable)   5. [Compatibility with `pymdownx.snippets`](#compatibility-with-pymdownxsnippets)2. [Usage with Sphinx](#usage-with-sphinx)   1. [Configuration](#sphinx-config)   2. [Directives](#directives)   3. [Examples](#sphinx-examples)   4. [Compatibility with other extensions](#compatibility-with-other-extensions)&lt;hr&gt; ## InstallationFor mkdocs: `pip install auto-pytabs[mkdocs]`For markdown: `pip install auto-pytabs[markdown]`For sphinx: `pip install auto-pytabs[sphinx]`&lt;h2 id=&quot;usage-markdown&quot;&gt;Usage with mkdocs / markdown&lt;/h2&gt;&lt;h3 id=&quot;markdown-config&quot;&gt;Configuration&lt;/h3&gt;#### Mkdocs plugin```yamlsite_name: My Docsmarkdown_extensions:  - pymdownx.tabbed:plugins:  - auto_pytabs:      min_version: &quot;3.7&quot;  # optional      max_version: &quot;3.11&quot; # optional      tab_title_template: &quot;Python {min_version}+&quot;  # optional      no_cache: false  # optional      default_tab: &quot;highest&quot;  # optional      reverse_order: false  # optional```*Available configuration options*| Name                 | Default                   | Description                                                                || -------------------- | ------------------------- | -------------------------------------------------------------------------- || `min_version`        | `(3, 7)`                  | Minimum python version                                                     || `max_version`        | `(3, 7)`                  | Maximum python version                                                     || `tab_title_template` | `&quot;Python {min_version}+&quot;` | Template for tab titles                                                    || `no_cache`           | `False`                   | Disable file system caching                                                || `default_tab`        | `highest`                 | (`highest` or `lowest`) Version tab to preselect                           || `reverse_order`      | `False`                   | Reverse the order of tabs. Default is to go from lowest to highest version |#### Markdown extension```pythonimport markdownmd = markdown.Markdown(    extensions=[&quot;auto_pytabs&quot;],    extension_configs={        &quot;auto_pytabs&quot;: {            &quot;min_version&quot;: &quot;3.7&quot;,  # optional            &quot;max_version&quot;: &quot;3.11&quot;,  # optional            &quot;tab_title_template&quot;: &quot;Python {min_version}+&quot;,  # optional            &quot;default_tab&quot;: &quot;highest&quot;,  # optional            &quot;reverse_order&quot;: False,  # optional        }    },)```*Available configuration options*| Name                 | Default                   | Description                                                                || -------------------- | ------------------------- | -------------------------------------------------------------------------- || `min_version`        | `(3, 7)`                  | Minimum python version to generate code for                                || `max_version`        | `(3, 7)`                  | Maximum python version to generate code for                                || `tab_title_template` | `&quot;Python {min_version}+&quot;` | Template for tab titles                                                    || `default_tab`        | `highest`                 | (`highest` or `lowest`) Version tab to preselect                           || `reverse_order`      | `False`                   | Reverse the order of tabs. Default is to go from lowest to highest version |### Differences between the mkdocs plugin and markdown extensionAutoPyTabs ships as a markdown extension and an mkdocs plugin, both of which can be used in mkdocs. The only differencebetween them is that the mkdocs plugin supports caching, which can make subsequent builds faster (i.e. when using `mkdocs serve`).The reason why the markdown extension does not support caching is that `markdown` does not have clearly defined buildsteps with wich an extension could interact (like mkdocs [plugin events](https://www.mkdocs.org/dev-guide/plugins/#events)),making it impossible to know when to persist cached items to disk / evict unused items.**If you are using mkdocs, the mkdocs plugin is recommended**. If you have caching disabled, there will be no difference either way.Should you wish to integrate the markdown extension into a build process where you can manually persist the cache after the build,you can explicitly pass it a cache:```pythonimport markdownfrom auto_pytabs.core import Cachecache = Cache()md = markdown.Markdown(    extensions=[&quot;auto_pytabs&quot;],    extension_configs={        &quot;auto_pytabs&quot;: {           &quot;cache&quot;: cache        }    },)def build_markdown() -&gt; None:    md.convertFile(&quot;document.md&quot;, &quot;document.html&quot;)    cache.persist()```&lt;h3 id=&quot;markdown-examples&quot;&gt;Examples&lt;/h3&gt;**Input**&lt;pre&gt;```pythonfrom typing import Optional, Dictdef foo(bar: Optional[str]) -&gt; Dict[str, str]:    ...```&lt;/pre&gt;**Equivalent markdown**&lt;pre&gt;=== &quot;Python 3.7+&quot;    ```python    from typing import Optional, Dict    def foo(bar: Optional[str]) -&gt; Dict[str, str]:        ...    ```=== &quot;Python 3.9+&quot;    ```python    from typing import Optional            def foo(bar: Optional[str]) -&gt; dict[str, str]:        ...    ```==== &quot;Python 3.10+&quot;    ```python    def foo(bar: str | None) -&gt; dict[str, str]:        ...    ```&lt;/pre&gt;#### Nested blocksNested tabs are supported as well:**Input**&lt;pre&gt;=== &quot;Level 1-1&quot;    === &quot;Level 2-1&quot;        ```python        from typing import List        x: List[str]        ```    === &quot;Level 2-2&quot;            Hello, world!=== &quot;Level 1-2&quot;    Goodbye, world!&lt;/pre&gt;**Equivalent markdown**&lt;pre&gt;=== &quot;Level 1-1&quot;    === &quot;Level 2-1&quot;        === &quot;Python 3.7+&quot;            ```python            from typing import List            x: List[str]            ```                === &quot;Python 3.9+&quot;            ```python            x: list[str]            ```    === &quot;Level 2-2&quot;        Goodbye, world!=== &quot;Level 1-2&quot;    Hello, world!    &lt;/pre&gt;### Selectively disableYou can disable conversion for a single code block:````&lt;!-- autopytabs: disable-block --&gt;```pythonfrom typing import Set, Optionaldef bar(baz: Optional[str]) -&gt; Set[str]:    ...```````Or for whole sections / files```&lt;!-- autopytabs: disable --&gt;everything after this will be ignored&lt;!-- autopytabs: enable --&gt;re-enables conversion again```### Compatibility with `pymdownx.snippets`If the `pymdownx.snippets` extension is used, make sure that it runs **before** AutoPyTab&lt;hr&gt;## Usage with SphinxAutPyTabs provides a Sphinx extension `auto_pytabs.sphinx_ext`, enabling its functionalityfor the `.. code-block` and `.. literalinclude` directives.&lt;h3 id=&quot;sphinx-config&quot;&gt;Configuration&lt;/h3&gt;#### Example configuration```pythonextensions = [&quot;auto_pytabs.sphinx_ext&quot;, &quot;sphinx_design&quot;]auto_pytabs_min_version = (3, 7)  # optionalauto_pytabs_max_version = (3, 11)  # optionalauto_pytabs_tab_title_template = &quot;Python {min_version}+&quot;  # optional # auto_pytabs_no_cache = True  # disabled file system caching# auto_pytabs_compat_mode = True  # enable compatibility mode# auto_pytabs_default_tab = &quot;lowest&quot;  # Pre-select the tab with the lowest version# auto_pytabs_reverse_order = True  # reverse the order of tabs to highest &gt; lowest```#### Available configuration options| Name                             | Default                   | Description                                                                || -------------------------------- | ------------------------- | -------------------------------------------------------------------------- || `auto_pytabs_min_version`        | `(3, 7)`                  | Minimum python version to generate code for                                || `auto_pytabs_max_version`        | `(3, 7)`                  | Maximum python version to generate code for                                || `auto_pytabs_tab_title_template` | `&quot;Python {min_version}+&quot;` | Template for tab titles                                                    || `auto_pytabs_no_cache`           | `False`                   | Disable file system caching                                                || `auto_pytabs_compat_mode`        | `False`                   | Enable [compatibility mode](#compatibility-mode)                           || `auto_pytabs_default_tab`        | `highest`                 | Either `highest` or `lowest`. Version tab to preselect                     || `auto_pytabs_reverse_order`      | `False`                   | Reverse the order of tabs. Default is to go from lowest to highest version |&lt;h3 id=&quot;sphinx-examples&quot;&gt;Examples&lt;/h3&gt;**Input**```rst.. code-block:: python   from typing import Optional, Dict      def foo(bar: Optional[str]) -&gt; Dict[str, str]:       ...```**Equivalent ReST**```rst.. tab-set::   .. tab-item:: Python 3.7+          .. code-block:: python                 from typing import Optional, Dict                def foo(bar: Optional[str]) -&gt; Dict[str, str]:              ...   .. tab-item:: Python 3.9+         .. code-block:: python                from typing import Optional                              def foo(bar: Optional[str]) -&gt; dict[str, str]:              ...   .. tab-item:: Python 3.10+         .. code-block:: python                def foo(bar: str | None) -&gt; dict[str, str]:              ...```### DirectivesAutoPyTabs overrides the built-in `code-block` and `literal-include` directives,extending them with auto-upgrade and tabbing functionality, which means no specialdirectives, and therefore changes to existing documents are needed.Additionally, a `:no-upgrade:` option is added to the directives, which can be used toselectively fall back the default behaviour.Two new directives are provided as well:- `.. pytabs-code-block::`- `.. pytabs-literalinclude::`which by default act exactly like `.. code-block` and `.. literalinclude` respectively,and are mainly to provide AutoPyTab's functionality in [compatibility mode](#compatibility-mode).### Compatibility modeIf you don't want the default behaviour of directive overrides, and instead wish to use the`.. pytabs-` directives manually (e.g. because of compatibility issues with other extensionsor because you only want to apply it to select code blocks) you can make use AutoPyTabs' compatibilitymode. To enable it, simply use the `auto_pytabs_compat_mode = True` in `conf.py`. Now, only content within `.. pytabs-`directives will be upgraded.### Compatibility with other extensionsNormally the directive overrides don't cause any problems and are very convenient,since no changes to existing documents have to be made. However, if other extensions are included,which themselves override one of those directives, one of them will inadvertently override the other,depending on the order they're defined in `extensions`.To combat this, you can use the [compatibility mode](#compatibility-mode) extension instead, whichonly includes the new directives.If you control the conflicting overrides, you can alternatively inherit from`auto_py_tabs.sphinx_ext.CodeBlockOverride` and `auto_py_tabs.sphinx_ext.LiteralIncludeOverride`instead of `sphinx.directives.code.CodeBlock` and `sphinx.directives.code.LiteralInclude` respectively.</longdescription>
</pkgmetadata>