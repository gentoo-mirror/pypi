<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pybotvacThis is an unofficial API for controlling Neato Botvac Connected vacuum robots.The code is based on https://github.com/kangguru/botvac and credit for reverse engineering the API goes to[Lars Brillert @kangguru](https://github.com/kangguru)## DisclaimerThis API is experimental. Use at your own risk. Feel free to contribute if things are not working.## InstallationInstall using pip```bashpip install pybotvac```Alternatively, clone the repository and run```bashpython setup.py install```## Usage### RobotIf the serial and secret for your robot is known, simply run```python&gt;&gt;&gt; from pybotvac import Robot&gt;&gt;&gt; robot = Robot('OPS01234-0123456789AB', '0123456789ABCDEF0123456789ABCDEF', 'my_robot_name')&gt;&gt;&gt; print(robot)Name: sample_robot, Serial: OPS01234-0123456789AB, Secret: 0123456789ABCDEF0123456789ABCDEF```The format of the serial should be 'OPSxxxxx-xxxxxxxxxxxx', and the secret should be a string of hex characters 32 characters long.These can be found by using the Account class.To start cleaning```pythonrobot.start_cleaning()```If no exception occurred, your robot should now get to work.Currently the following methods are available in the Robot class:* get_robot_state()* start_cleaning()* start_spot_cleaning()* pause_cleaning()* stop_cleaning()* send_to_base()* enable_schedule()* disable_schedule()* get_schedule()For convenience, properties exist for state and schedule```python# Get statestate = robot.state# Check if schedule is enabledrobot.schedule_enabled# Disable schedulerobot.schedule_enabled = False```### AccountIf the serial and secret are unknown, they can be retrieved using the Account class.You need a session instance to create an account.There are three different types of sessions available.It depends on your provider which session is suitable for you.* **PasswordSession** lets you authenticate via E-Mail and Password. Even though this works fine, it is not recommended.* **OAuthSession** lets you authenticate via OAuth2. You have to create an application [here](https://developers.neatorobotics.com/applications) in order to generate `client_id`, `client_secret` and `redirect_url`.* **PasswordlessSession** is known to work for users of the new MyKobold App. The only known `client_id` is `KY4YbVAvtgB7lp8vIbWQ7zLk3hssZlhR`.```pythonfrom pybotvac import Account, Neato, OAuthSession, PasswordlessSession, PasswordSession, Vorwerkemail = &quot;Your email&quot;password = &quot;Your password&quot;client_id = &quot;Your client it&quot;client_secret = &quot;Your client secret&quot;redirect_uri = &quot;Your redirect URI&quot;# Authenticate via Email and Passwordpassword_session = PasswordSession(email=email, password=password, vendor=Neato())# Authenticate via OAuth2oauth_session = OAuthSession(client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri, vendor=Neato())authorization_url = oauth_session.get_authorization_url()print(&quot;Visit: &quot; + authorization_url)authorization_response = input(&quot;Enter the full callback URL: &quot;)token = oauth_session.fetch_token(authorization_response)# Authenticate via One Time Passwordpasswordless_session = PasswordlessSession(client_id=client_id, vendor=Vorwerk())passwordless_session.send_email_otp(email)code = input(&quot;Enter the code: &quot;)passwordless_session.fetch_token_passwordless(email, code)# Create an account with one of the generated sessionsaccount = Account(password_session)# List all robots associated with accountfor robot in account.robots:    print(robot)```Information about maps and download of maps can be done from the Account class:```python&gt;&gt;&gt; from pybotvac import Account&gt;&gt;&gt; # List all maps associated with a specific robot&gt;&gt;&gt; for map_info in Account(PasswordSession('sample@email.com', 'sample_password')).maps:...     print(map_info)```A cleaning map can be downloaded with the account class. Returns the raw image response. Example shows latest map.You need the url from the map output to do that:```python&gt;&gt;&gt; from pybotvac import Account&gt;&gt;&gt; # List all maps associated with a specific robot&gt;&gt;&gt; map = Account(PasswordSession('sample@email.com', 'sample_password')).maps&gt;&gt;&gt; download_link = map['robot_serial']['maps'][0]['url']&gt;&gt;&gt; Account('sample@email.com', 'sample_password').get_map_image(download_link)```</longdescription>
</pkgmetadata>