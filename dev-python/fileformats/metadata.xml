<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>FileFormats===========.. image:: https://github.com/arcanaframework/fileformats/actions/workflows/tests.yml/badge.svg   :target: https://github.com/arcanaframework/fileformats/actions/workflows/tests.yml.. image:: https://codecov.io/gh/arcanaframework/fileformats/branch/main/graph/badge.svg?token=UIS0OGPST7   :target: https://codecov.io/gh/arcanaframework/fileformats.. image:: https://img.shields.io/pypi/pyversions/fileformats.svg   :target: https://pypi.python.org/pypi/fileformats/   :alt: Supported Python versions.. image:: https://img.shields.io/pypi/v/fileformats.svg   :target: https://pypi.python.org/pypi/fileformats/   :alt: Latest Version.. image:: https://github.com/ArcanaFramework/fileformats/actions/workflows/docs.yml/badge.svg   :target: https://arcanaframework.github.io/fileformats/   :alt: docs*Fileformats* provides a library of file-format types implemented as Python classes.The file-format types are designed to be used in type validation during the constructionof data workflows (e.g. Pydra_, Fastr_), and also provide some basic data handling methods(e.g. loading data to dictionaries) and conversions between some equivalent types Whenthe &quot;extended&quot; install option is provided.File-format types are typically identified by a combination of file extensionand &quot;magic numbers&quot; where applicable, however, unlike many other file-type Python packages,*FileFormats*, supports multi-file data formats (&quot;file sets&quot;) often found in scientificworkflows, e.g. with separate header/data files. *FileFormats* also provides a flexibleframework to add custom identification routines for exotic file formats, e.g.formats that require inspection of headers to locate data files, directories containingcertain file types, or to peek at metadata fields to define specific sub-types(e.g. functional MRI DICOM file set).See the `extension template &lt;https://github.com/ArcanaFramework/fileformats-extension-template&gt;`__for instructions on how to design *FileFormats* extensions modules to augment thestandard file-types implemented in the main repository with custom domain/vendor-specificfile-format types. Note that *FileFormats* is a new package, and only has limited supportfor standard formats at this stage, although the aim is to include all the official`IANA MIME types` (hopefully by scraping that site if anyone wants to have a go ðŸ˜Š).Installation------------*FileFormats* can be installed for Python &gt;= 3.7 from PyPI with.. code-block:: bash    $ python3 -m pip fileformatsSupport for converter methods between a few select formats can be installed bypassing the 'extended' install extra, e.g.. code-block:: bash    $ python3 -m pip install fileformats[extended]Examples--------Using the ``WithMagicNumber`` mixin class, the ``Png`` format can be defined concisely as.. code-block:: python    from fileformats.generic import File    from fileformats.core.mixin import WithMagicNumber    class Png(WithMagicNumber, File):        binary = True        ext = &quot;.png&quot;        iana_mime = &quot;image/png&quot;        magic_number = b&quot;.PNG&quot;Files can then be checked to see whether they are of PNG format by.. code-block:: python    png = Png(&quot;/path/to/image/file.png&quot;)  # Checks the extension and magic numberwhich will raise a ``FormatMismatchError`` if initialisation or validation fails, orfor a boolean method that checks the validation use ``matches``.. code-block:: python    if Png.matches(a_path_to_a_file):        ... handle case ...There are a few selected converters between standard file-format types, perhaps most usefullybetween archive types and generic file/directories.. code-block:: python    from fileformats.archive import Zip    from fileformats.generic import Directory    zip_file = Zip.convert(Directory(&quot;/path/to/a/directory&quot;))    extracted = Directory.convert(zip_file)    copied = extracted.copy_to(&quot;/path/to/output&quot;)The converters are implemented in the Pydra_ dataflow framework, and can be linked intowider Pydra_ workflows by creating a converter task.. code-block:: python    import pydra    from pydra.tasks.mypackage import MyTask    from fileformats.serialization import Json, Yaml    wf = pydra.Workflow(name=&quot;a_workflow&quot;, input_spec=[&quot;in_json&quot;])    wf.add(        Yaml.get_converter(Json, name=&quot;json2yaml&quot;, in_file=wf.lzin.in_json)    )    wf.add(        MyTask(            name=&quot;my_task&quot;,            in_file=wf.json2yaml.lzout.out_file,        )    )    ...Alternatively, the conversion can be executed outside of a Pydra_ workflow with.. code-block:: python    json_file = Json(&quot;/path/to/file.json&quot;)    yaml_file = Yaml.convert(json_file)License-------This work is licensed under a`Creative Commons Attribution 4.0 International License &lt;http://creativecommons.org/licenses/by/4.0/&gt;`_.. image:: https://i.creativecommons.org/l/by/4.0/88x31.png  :target: http://creativecommons.org/licenses/by/4.0/  :alt: Creative Commons Attribution 4.0 International License.. _Pydra: https://pydra.readthedocs.io.. _Fastr: https://gitlab.com/radiology/infrastructure/fastr.. _`IANA MIME types`: https://www.iana_mime.org/assignments/media-types/media-types.xhtml</longdescription>
</pkgmetadata>