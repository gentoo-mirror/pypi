<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-s3fileA lightweight file upload input for Django and Amazon S3.Django-S3File allows you to upload files directly AWS S3 effectivelybypassing your application server. This allows you to avoid long runningrequests from large file uploads. This is particularly helpful for ifyou run your service on AWS Lambda or Heroku where you have a hardrequest limit.[![PyPiVersion](https://img.shields.io/pypi/v/django-s3file.svg)](https://pypi.python.org/pypi/django-s3file/)[![TestCoverage](https://codecov.io/gh/codingjoe/django-s3file/branch/main/graph/badge.svg)](https://codecov.io/gh/codingjoe/django-s3file)[![GitHublicense](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/codingjoe/django-s3file/main/LICENSE)## Features-   lightweight: less 200 lines-   no JavaScript or Python dependencies (no jQuery)-   easy integration-   works just like the built-in-   extendable JavaScript API## For the Nerds```mermaidsequenceDiagram    autonumber    actor Browser    participant S3    participant Middleware    Browser-&gt;&gt;Django: GET form view    activate Django    Django-&gt;&gt;Browser: RESPONSE w/ presigned POST URL &amp; signed middleware key    deactivate Django    Browser-&gt;&gt;S3: POST large file    activate S3    S3-&gt;&gt;Browser: RESPONSE AWS S3 key    Browser-&gt;&gt;Middleware: POST AWS S3 key (signed)    activate Middleware    Middleware-&gt;&gt;S3: GET AWS S3 key    S3-&gt;&gt;Middleware: RESPONSE large file promise    deactivate S3    Middleware-&gt;&gt;Django: request incl. large file promise    deactivate Middleware    activate Django    opt only if files is procssed by Django        Django--&gt;&gt;S3: GET large file        activate S3        S3--&gt;&gt;Django: RESPONSE large file        deactivate S3    end    Django-&gt;&gt;Browser: RESPONSE success    deactivate Django```In a nutshell, we can bypass Django completely and have AWS handlethe upload or any processing. Of course, if you want to do somethingwith your file in Django, you can do so, just like before, with theadded advantage, that your file is served from within your datacenter.## InstallationMake sure you have [Amazon S3storage](http://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html)setup correctly.Just install S3file using `pip`.```bashpip install django-s3file# orpipenv install django-s3file```Add the S3File app and middleware in your settings:```python# settings.pyINSTALLED_APPS = (    '...',    's3file',    '...',)MIDDLEWARE = (    '...',    's3file.middleware.S3FileMiddleware',    '...',)```## UsageS3File automatically replaces Django's `ClearableFileInput` widget, youdo not need to alter your code at all.The `ClearableFileInput` widget is only than automatically replaced whenthe `DEFAULT_FILE_STORAGE` setting is set to `django-storages`'`S3Boto3Storage` or the dummy `FileSystemStorage` is enabled.### Setting up the AWS S3 bucket#### Upload folderS3File uploads to a single folder. Files are later moved by Django whenthey are saved to the `upload_to` location.It is recommended to [setupexpiration](http://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html)for that folder, to ensure that old and unused file uploads don't add upand produce costs.The default folder name is: `tmp/s3file` You can change it by changingthe `S3FILE_UPLOAD_PATH` setting.#### CORS policyYou will need to allow `POST` from all origins. Just add the followingto your CORS policy.```json[  {    &quot;AllowedHeaders&quot;: [        &quot;*&quot;    ],    &quot;AllowedMethods&quot;: [        &quot;POST&quot;    ],    &quot;AllowedOrigins&quot;: [        &quot;*&quot;    ],    &quot;ExposeHeaders&quot;: [],    &quot;MaxAgeSeconds&quot;: 3000  }]```### Progress BarS3File does emit progress signals that can be used to display some kindof progress bar. Signals named `progress` are emitted for both eachindividual file input as well as for the form as a whole.The progress signal carries the following details:```javascriptconsole.log(event.detail){    progress: 0.4725307607171312  // total upload progress of either a form or single input    loaded: 1048576  // total upload progress of either a form or single input    total: 2219064  // total bytes to upload    currentFile: File {…}  // file object    currentFileName: &quot;text.txt&quot;  // file name of the file currently uploaded    currentFileProgress: 0.47227834703299176  // upload progress of that file    originalEvent: ProgressEvent {…} // the original XHR onprogress event}```The following example implements a Boostrap progress bar for uploadprogress of an entire form.```html&lt;div class=&quot;progress&quot;&gt;  &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; style=&quot;width: 0%;&quot; aria-valuenow=&quot;0&quot; aria-valuemin=&quot;0&quot; aria-valuemax=&quot;100&quot;&gt;0%&lt;/div&gt;&lt;/div&gt;``````javascript(function () {    var form = document.getElementsByTagName('form')[0]    var progressBar = document.getElementsByClassName('progress-bar')[0]    form.addEventListener('progress', function (event) {        // event.detail.progress is a value between 0 and 1        var percent = Math.round(event.detail.progress * 100)        progressBar.setAttribute('style', 'width:' + percent + '%')        progressBar.setAttribute('aria-valuenow', percent)        progressBar.innerText = percent + '%'    })})()```### Using S3File in developmentUsing S3File in development can be helpful especially if you want to usethe progress signals described above. Therefore, S3File comes with a AWSS3 dummy backend. It behaves similar to the real S3 storage backend. Itis automatically enabled, if the `DEFAULT_FILE_STORAGE` setting is setto `FileSystemStorage`.To prevent users from accidentally using the `FileSystemStorage` and theinsecure S3 dummy backend in production, there is also an additionaldeployment check that will error if you run Django\'s deployment checksuite:```shellpython manage.py check --deploy```We recommend always running the deployment check suite as part of yourdeployment pipeline.### Uploading multiple filesDjango does have limited support for [uploading multiplefiles](https://docs.djangoproject.com/en/stable/topics/http/file-uploads/#uploading-multiple-files).S3File fully supports this feature. The custom middleware makes ensurethat files are accessible via `request.FILES`, even though they havebeen uploaded to AWS S3 directly and not to your Django applicationserver.### Using optimized S3Boto3StorageSince `S3Boto3Storage` supports storing data from any other fileobj, ituses a generalized `_save` function. This leads to the frontenduploading the file to S3 and then copying it byte-by-byte to perform amove operation just to rename the uploaded object. For large files thisleads to additional loading times for the user.That\'s why S3File provides an optimized version of this method at`storages_optimized.S3OptimizedUploadStorage`. It uses the moreefficient `copy` method from S3, given that we know that we only copyfrom one S3 location to another.```pythonfrom s3file.storages_optimized import S3OptimizedUploadStorageclass MyStorage(S3OptimizedUploadStorage):  # Subclass and use like any other storage    default_acl = 'private'```</longdescription>
</pkgmetadata>