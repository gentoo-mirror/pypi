<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DescriptionPython Command Line Tools for interacting with Multivers&lt;sup&gt;X&lt;/sup&gt;.## Documentation[docs.multiversx.com](https://docs.multiversx.com/sdk-and-tools/sdk-py/)## CLI[CLI](CLI.md)## Distribution[mxpy-up](https://docs.multiversx.com/sdk-and-tools/sdk-py/installing-mxpy/) and [PyPi](https://pypi.org/project/multiversx-sdk-cli/#history)## Development setupClone this repository and cd into it:```git clone https://github.com/multiversx/mx-sdk-py-cli.gitcd mx-sdk-py-cli```### Virtual environmentCreate a virtual environment and install the dependencies:```python3 -m venv ./venvsource ./venv/bin/activatepip install -r ./requirements.txt --upgrade```Install development dependencies, as well:```pip install -r ./requirements-dev.txt --upgrade```Above, `requirements.txt` should mirror the **dependencies** section of `setup.py`.If using VSCode, restart it or follow these steps: - `Ctrl + Shift + P` - _Select Interpreter_ - Choose `./venv/bin/python`.### Using your local `mxpy`If you want to test the modifications you locally made to `mxpy`, set `PYTHONPATH` with the path to your local repository path.For example, if you cloned the repository at `~/mx-sdk-py-cli`, run:```export PYTHONPATH=&quot;~/mx-sdk-py-cli&quot;```Then `mxpy` will use the code in your local repository.</longdescription>
</pkgmetadata>