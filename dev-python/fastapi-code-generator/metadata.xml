<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fastapi-code-generatorThis code generator creates a FastAPI app from an openapi file.[![PyPI version](https://badge.fury.io/py/fastapi-code-generator.svg)](https://pypi.python.org/pypi/fastapi-code-generator)[![Downloads](https://pepy.tech/badge/fastapi-code-generator/month)](https://pepy.tech/project/fastapi-code-generator)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fastapi-code-generator)](https://pypi.python.org/pypi/fastapi-code-generator)[![codecov](https://codecov.io/gh/koxudaxi/fastapi-code-generator/branch/master/graph/badge.svg)](https://codecov.io/gh/koxudaxi/fastapi-code-generator)![license](https://img.shields.io/github/license/koxudaxi/fastapi-code-generator.svg)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)## This project is in experimental phase.fastapi-code-generator uses [datamodel-code-generator](https://github.com/koxudaxi/datamodel-code-generator) to generate pydantic models## HelpSee [documentation](https://koxudaxi.github.io/fastapi-code-generator) for more details.## InstallationTo install `fastapi-code-generator`:```sh$ pip install fastapi-code-generator```## UsageThe `fastapi-code-generator` command:```Usage: fastapi-codegen [OPTIONS]Options:  -i, --input FILENAME     [required]  -o, --output PATH        [required]  -t, --template-dir PATH  -m, --model-file         Specify generated model file path + name, if not default to models.py  -r, --generate-routers   Generate modular api with multiple routers using RouterAPI (for bigger applications).  --specify-tags           Use along with --generate-routers to generate specific routers from given list of tags.  -c, --custom-visitors    PATH - A custom visitor that adds variables to the template.  --install-completion     Install completion for the current shell.  --show-completion        Show completion for the current shell, to copy it                           or customize the installation.  --help                   Show this message and exit.```## Example### OpenAPI```sh$ fastapi-codegen --input api.yaml --output app```&lt;details&gt;&lt;summary&gt;api.yaml&lt;/summary&gt;&lt;pre&gt;&lt;code&gt;openapi: &quot;3.0.0&quot;info:  version: 1.0.0  title: Swagger Petstore  license:    name: MITservers:  - url: http://petstore.swagger.io/v1paths:  /pets:    get:      summary: List all pets      operationId: listPets      tags:        - pets      parameters:        - name: limit          in: query          description: How many items to return at one time (max 100)          required: false          schema:            type: integer            format: int32      responses:        '200':          description: A paged array of pets          headers:            x-next:              description: A link to the next page of responses              schema:                type: string          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Pets&quot;        default:          description: unexpected error          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Error&quot;                x-amazon-apigateway-integration:                  uri:                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations                  passthroughBehavior: when_no_templates                  httpMethod: POST                  type: aws_proxy    post:      summary: Create a pet      operationId: createPets      tags:        - pets      responses:        '201':          description: Null response        default:          description: unexpected error          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Error&quot;                x-amazon-apigateway-integration:                  uri:                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations                  passthroughBehavior: when_no_templates                  httpMethod: POST                  type: aws_proxy  /pets/{petId}:    get:      summary: Info for a specific pet      operationId: showPetById      tags:        - pets      parameters:        - name: petId          in: path          required: true          description: The id of the pet to retrieve          schema:            type: string      responses:        '200':          description: Expected response to a valid request          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Pets&quot;        default:          description: unexpected error          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Error&quot;    x-amazon-apigateway-integration:      uri:        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations      passthroughBehavior: when_no_templates      httpMethod: POST      type: aws_proxycomponents:  schemas:    Pet:      required:        - id        - name      properties:        id:          type: integer          format: int64        name:          type: string        tag:          type: string    Pets:      type: array      description: list of pet      items:        $ref: &quot;#/components/schemas/Pet&quot;    Error:      required:        - code        - message      properties:        code:          type: integer          format: int32        message:          type: string&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;`app/main.py`:```python# generated by fastapi-codegen:#   filename:  api.yaml#   timestamp: 2020-06-14T10:45:22+00:00from __future__ import annotationsfrom typing import Optionalfrom fastapi import FastAPI, Queryfrom .models import Petsapp = FastAPI(version=&quot;1.0.0&quot;, title=&quot;Swagger Petstore&quot;, license=&quot;{'name': 'MIT'}&quot;,)@app.get('/pets', response_model=Pets)def list_pets(limit: Optional[int] = None) -&gt; Pets:    &quot;&quot;&quot;    List all pets    &quot;&quot;&quot;    pass@app.post('/pets', response_model=None)def create_pets() -&gt; None:    &quot;&quot;&quot;    Create a pet    &quot;&quot;&quot;    pass@app.get('/pets/{pet_id}', response_model=Pets)def show_pet_by_id(pet_id: str = Query(..., alias='petId')) -&gt; Pets:    &quot;&quot;&quot;    Info for a specific pet    &quot;&quot;&quot;    pass````app/models.py`:```python# generated by datamodel-codegen:#   filename:  api.yaml#   timestamp: 2020-06-14T10:45:22+00:00from typing import List, Optionalfrom pydantic import BaseModel, Fieldclass Pet(BaseModel):    id: int    name: str    tag: Optional[str] = Noneclass Pets(BaseModel):    __root__: List[Pet] = Field(..., description='list of pet')class Error(BaseModel):    code: int    message: str```## Custom TemplateIf you want to generate custom `*.py` files then you can give a custom template directory to fastapi-code-generator with `-t` or `--template-dir` options of the command.fastapi-code-generator will search for [jinja2](https://jinja.palletsprojects.com/) template files in given template directory, for example `some_jinja_templates/list_pets.py`.```bashfastapi-code-generator --template-dir some_jinja_templates --output app --input api.yaml```These files will be rendered and written to the output directory. Also, the generated file names will be created with the template name and extension of `*.py`, for example `app/list_pets.py` will be a separate file generated from the jinja template alongside the default `app/main.py`### VariablesYou can use the following variables in the jinja2 templates- `imports`  all imports statements- `info`  all info statements- `operations` `operations` is list of `operation`  - `operation.type` HTTP METHOD  - `operation.path` Path  - `operation.snake_case_path` Snake-cased Path  - `operation.response` response object  - `operation.function_name` function name is created `operationId` or `METHOD` + `Path`   - `operation.snake_case_arguments` Snake-cased function arguments  - `operation.security` [Security](https://swagger.io/docs/specification/authentication/)  - `operation.summary` a summary  - `operation.tags` [Tags](https://swagger.io/docs/specification/grouping-operations-with-tags/)### default template `main.jinja2````jinja2from __future__ import annotationsfrom fastapi import FastAPI{{imports}}app = FastAPI(    {% if info %}    {% for key,value in info.items() %}    {{ key }} = &quot;{{ value }}&quot;,    {% endfor %}    {% endif %}    ){% for operation in operations %}@app.{{operation.type}}('{{operation.snake_case_path}}', response_model={{operation.response}})def {{operation.function_name}}({{operation.snake_case_arguments}}) -&gt; {{operation.response}}:    {%- if operation.summary %}    &quot;&quot;&quot;    {{ operation.summary }}    &quot;&quot;&quot;    {%- endif %}    pass{% endfor %}```### modular template`modular_template/main.jinja2`:```jinjafrom __future__ import annotationsfrom fastapi import FastAPIfrom .routers import {{ routers | join(&quot;, &quot;) }}app = FastAPI(    {% if info %}    {% for key,value in info.items() %}    {% set info_value= value.__repr__() %}    {{ key }} = {{info_value}},    {% endfor %}    {% endif %}    ){% for router in routers -%}app.include_router({{router}}.router){% endfor -%}@app.get(&quot;/&quot;)async def root():    return {&quot;message&quot;: &quot;Gateway of the App&quot;}````modular_template/routers.jinja2`:```jinjafrom __future__ import annotationsfrom fastapi import APIRouterfrom fastapi import FastAPIfrom ..dependencies import *router = APIRouter(    tags=['{{tag}}']    ){% for operation in operations %}{% if operation.tags[0] == tag %}@router.{{operation.type}}('{{operation.snake_case_path}}', response_model={{operation.response}}    {% if operation.additional_responses %}        , responses={            {% for status_code, models in operation.additional_responses.items() %}                '{{ status_code }}': {                {% for key, model in models.items() %}                    '{{ key }}': {{ model }}{% if not loop.last %},{% endif %}                {% endfor %}                }{% if not loop.last %},{% endif %}            {% endfor %}        }    {% endif %}    {% if operation.tags%}    , tags={{operation.tags}}    {% endif %})def {{operation.function_name}}({{operation.snake_case_arguments}}) -&gt; {{operation.return_type}}:    {%- if operation.summary %}    &quot;&quot;&quot;    {{ operation.summary }}    &quot;&quot;&quot;    {%- endif %}    pass{% endif %}{% endfor %}````modular_template/dependencies.jinja2`:```jinja{{imports}}```## Custom VisitorsCustom visitors allow you to pass custom variables to your custom templates.E.g.### custom template`custom-template.jinja2````jinja2#{ % custom_header %}from __future__ import annotationsfrom fastapi import FastAPI...```### custom visitor`custom-visitor.py````pythonfrom typing import Dict, Optionalfrom fastapi_code_generator.parser import OpenAPIParserfrom fastapi_code_generator.visitor import Visitordef custom_visitor(parser: OpenAPIParser, model_path: Path) -&gt; Dict[str, object]:    return {'custom_header': 'My header'}visit: Visitor = custom_visitor```### Multiple Files using APIRouter (For Bigger Applications)```├── app                      # &quot;app&quot; is a Root directory      │   ├── main.py              # &quot;main&quot; module│   ├── models.py            # &quot;models&quot; of the application│   ├── dependencies.py      # &quot;dependencies&quot; module, e.g. import app.dependencies│   └── routers              # &quot;routers&quot; is a &quot;app subpackage&quot;│       ├── fat_cats.py      # &quot;fat_cats&quot; submodule, e.g. import app.routers.fat_cats│       ├── slim_dogs.py     # &quot;slim_dogs&quot; submodule, e.g. import app.routers.slim_dogs│       └── wild_boars.py    # &quot;wild_boars&quot; submodule, e.g. import app.routers.wild_boars```See [documentation](https://fastapi.tiangolo.com/tutorial/bigger-applications/) of APIRouter OpenAPI for more details.**_Generate main aside with all of its routers_**:```bash$ fastapi-codegen --input swagger.yaml --output app --generate-routers```**_Regenerate specific routers_**:```bash$ fastapi-codegen --input swagger.yaml --output app --generate-routers --specify-tags &quot;Wild Boars, Fat Cats&quot;```&lt;details&gt;&lt;summary&gt;swagger.yaml&lt;/summary&gt;&lt;pre&gt;&lt;code&gt;openapi: &quot;3.0.0&quot;info:  version: 1.0.0  title: Swagger Petstore  license:    name: MITservers:  - url: /  - url: http://petstore.swagger.io/v1  - url: http://localhost:8080/paths:  /boars:    get:      summary: List All Wild Boars      operationId: listWildBoars      tags:        - Wild Boars      parameters:        - name: limit          in: query          description: How many items to return at one time (max 100)          required: false          schema:            type: integer      responses:        '200':          description: An array of wild boars          content:            application/json:              schema:                $ref: &quot;#/components/schemas/WildBoars&quot;    post:      summary: Create a Wild Boar      operationId: createWildBoars      tags:        - Wild Boars      responses:        '201':          description: Null response  /boars/{boarId}:    get:      summary: Info For a Specific Boar      operationId: showBoarById      tags:        - Wild Boars      parameters:        - name: boarId          in: path          required: true          description: The id of the boar to retrieve          schema:            type: string      responses:        '200':          description: Expected response to a valid request          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Pet&quot;  /cats:    get:      summary: List All Fat Cats      operationId: listFatCats      tags:        - Fat Cats      parameters:        - name: limit          in: query          description: How many items to return at one time (max 100)          required: false          schema:            type: integer      responses:        '200':          description: An array of fat cats          content:            application/json:              schema:                $ref: &quot;#/components/schemas/FatCats&quot;    post:      summary: Create a Fat Cat      operationId: createFatCats      tags:        - Fat Cats      responses:        '201':          description: Null response  /cats/{catId}:    get:      summary: Info For a Specific Cat      operationId: showCatById      tags:        - Fat Cats      parameters:        - name: catId          in: path          required: true          description: The id of the cat to retrieve          schema:            type: string      responses:        '200':          description: Expected response to a valid request          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Pet&quot;  /dogs:    get:      summary: List All Slim Dogs      operationId: listSlimDogs      tags:        - Slim Dogs      parameters:        - name: limit          in: query          description: How many items to return at one time (max 100)          required: false          schema:            type: integer      responses:        '200':          description: An array of slim dogs          content:            application/json:              schema:                $ref: &quot;#/components/schemas/SlimDogs&quot;    post:      summary: Create a Slim Dog      operationId: createSlimDogs      tags:        - Slim Dogs      responses:        '201':          description: Null response  /dogs/{dogId}:    get:      summary: Info For a Specific Dog      operationId: showDogById      tags:        - Slim Dogs      parameters:        - name: dogId          in: path          required: true          description: The id of the dog to retrieve          schema:            type: string      responses:        '200':          description: Expected response to a valid request          content:            application/json:              schema:                $ref: &quot;#/components/schemas/Pet&quot;components:  schemas:    Pet:      required:        - id        - name      properties:        id:          type: integer        name:          type: string        tag:          type: string    FatCats:      type: array      description: list of fat cats      items:        $ref: &quot;#/components/schemas/Pet&quot;    SlimDogs:      type: array      description: list of slim dogs      items:        $ref: &quot;#/components/schemas/Pet&quot;    WildBoars:      type: array      description: list of wild boars      items:        $ref: &quot;#/components/schemas/Pet&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;`app/main.py`:```python# generated by fastapi-codegen:#   filename:  swagger.yaml#   timestamp: 2023-04-04T12:06:16+00:00from __future__ import annotationsfrom fastapi import FastAPIfrom .routers import fat_cats, slim_dogs, wild_boarsapp = FastAPI(    version='1.0.0',    title='Swagger Petstore',    license={'name': 'MIT'},    servers=[        {'url': '/'},        {'url': 'http://petstore.swagger.io/v1'},        {'url': 'http://localhost:8080/'},    ],)app.include_router(fat_cats.router)app.include_router(slim_dogs.router)app.include_router(wild_boars.router)@app.get(&quot;/&quot;)async def root():    return {&quot;message&quot;: &quot;Gateway of the App&quot;}````app/models.py`:```python# generated by fastapi-codegen:#   filename:  swagger.yaml#   timestamp: 2023-04-04T12:06:16+00:00from __future__ import annotationsfrom typing import List, Optionalfrom pydantic import BaseModel, Fieldclass Pet(BaseModel):    id: int    name: str    tag: Optional[str] = Noneclass FatCats(BaseModel):    __root__: List[Pet] = Field(..., description='list of fat cats')class SlimDogs(BaseModel):    __root__: List[Pet] = Field(..., description='list of slim dogs')class WildBoars(BaseModel):    __root__: List[Pet] = Field(..., description='list of wild boars')````app/routers/fat_cats.py`:```python# generated by fastapi-codegen:#   filename:  swagger.yaml#   timestamp: 2023-04-04T12:06:16+00:00from __future__ import annotationsfrom fastapi import APIRouterfrom ..dependencies import *router = APIRouter(tags=['Fat Cats'])@router.get('/cats', response_model=FatCats, tags=['Fat Cats'])def list_fat_cats(limit: Optional[int] = None) -&gt; FatCats:    &quot;&quot;&quot;    List All Fat Cats    &quot;&quot;&quot;    pass@router.post('/cats', response_model=None, tags=['Fat Cats'])def create_fat_cats() -&gt; None:    &quot;&quot;&quot;    Create a Fat Cat    &quot;&quot;&quot;    pass@router.get('/cats/{cat_id}', response_model=Pet, tags=['Fat Cats'])def show_cat_by_id(cat_id: str = Path(..., alias='catId')) -&gt; Pet:    &quot;&quot;&quot;    Info For a Specific Cat    &quot;&quot;&quot;    pass````app/routers/slim_dogs.py`:```python# generated by fastapi-codegen:#   filename:  swagger.yaml#   timestamp: 2023-04-04T12:06:16+00:00from __future__ import annotationsfrom fastapi import APIRouterfrom ..dependencies import *router = APIRouter(tags=['Slim Dogs'])@router.get('/dogs', response_model=SlimDogs, tags=['Slim Dogs'])def list_slim_dogs(limit: Optional[int] = None) -&gt; SlimDogs:    &quot;&quot;&quot;    List All Slim Dogs    &quot;&quot;&quot;    pass@router.post('/dogs', response_model=None, tags=['Slim Dogs'])def create_slim_dogs() -&gt; None:    &quot;&quot;&quot;    Create a Slim Dog    &quot;&quot;&quot;    pass@router.get('/dogs/{dog_id}', response_model=Pet, tags=['Slim Dogs'])def show_dog_by_id(dog_id: str = Path(..., alias='dogId')) -&gt; Pet:    &quot;&quot;&quot;    Info For a Specific Dog    &quot;&quot;&quot;    pass````app/routers/wild_boars.py`:```python# generated by fastapi-codegen:#   filename:  swagger.yaml#   timestamp: 2023-04-04T12:06:16+00:00from __future__ import annotationsfrom fastapi import APIRouterfrom ..dependencies import *router = APIRouter(tags=['Wild Boars'])@router.get('/boars', response_model=WildBoars, tags=['Wild Boars'])def list_wild_boars(limit: Optional[int] = None) -&gt; WildBoars:    &quot;&quot;&quot;    List All Wild Boars    &quot;&quot;&quot;    pass@router.post('/boars', response_model=None, tags=['Wild Boars'])def create_wild_boars() -&gt; None:    &quot;&quot;&quot;    Create a Wild Boar    &quot;&quot;&quot;    pass@router.get('/boars/{boar_id}', response_model=Pet, tags=['Wild Boars'])def show_boar_by_id(boar_id: str = Path(..., alias='boarId')) -&gt; Pet:    &quot;&quot;&quot;    Info For a Specific Boar    &quot;&quot;&quot;    pass````app/dependencies.py`:```python# generated by fastapi-codegen:#   filename:  swagger.yaml#   timestamp: 2023-04-04T12:06:16+00:00from __future__ import annotationsfrom typing import Optionalfrom fastapi import Pathfrom .models import FatCats, Pet, SlimDogs, WildBoars```## PyPi [https://pypi.org/project/fastapi-code-generator](https://pypi.org/project/fastapi-code-generator)## Licensefastapi-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license</longdescription>
</pkgmetadata>