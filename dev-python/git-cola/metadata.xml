<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># git-cola: The highly caffeinated Git GUIGit Cola is a powerful Git GUI with a slick and intuitive user interface.    git clone https://github.com/git-cola/git-cola.git[![License](https://img.shields.io/:license-GPL-green.svg)](LICENSE)[![Build status](https://github.com/git-cola/git-cola/actions/workflows/ci.yml/badge.svg?event=push)](https://github.com/git-cola/git-cola/actions/workflows/main.yml)[![OpenSSF Best Practices](https://bestpractices.coreinfrastructure.org/projects/251/badge)](https://bestpractices.coreinfrastructure.org/projects/251)* [Screenshots](https://git-cola.github.io/screenshots.html)* [Downloads](https://git-cola.github.io/downloads.html)# Documentation* [Keyboard shortcuts](https://git-cola.github.io/share/doc/git-cola/hotkeys.html)* [HTML documentation](https://git-cola.readthedocs.io/en/latest/)* [Git Cola documentation](docs/git-cola.rst)* [Git DAG documentation](docs/git-dag.rst)* [Contributing guidelines](CONTRIBUTING.md)# Requirements## Build* [Sphinx](http://sphinx-doc.org/) is used to generate the documentation.## Runtime* [Git](https://git-scm.com/) 2.2.0 or newer.* [Python](https://python.org/) 3.6 or newer.* [QtPy](https://github.com/spyder-ide/qtpy) 1.1.0 or newer.Git Cola uses QtPy, so you can choose between PyQt6, PyQt5 and PySide2 by settingthe `QT_API` environment variable to `pyqt6`, `pyqt5` or `pyside2` as desired.`qtpy` defaults to `pyqt5` and falls back to `pyqt6` and `pyside2` if `pyqt5`is not installed.Any of the following Python Qt libraries must be installed:* [PyQt5 / PyQt6](https://www.riverbankcomputing.com/software/pyqt/download5)  5.6 or newer is required. Qt 6.0 is also supported via QtPy.* [PySide2](https://github.com/PySide/PySide)  5.11.0 or newer.## Optional FeaturesGit Cola enables additional features when the followingPython modules are installed.[send2trash](https://github.com/hsoft/send2trash) enables cross-platform&quot;Send to Trash&quot; functionality.# Installation**IMPORTANT**: never run `pip install` or `make install` as root or outside of aPython virtualenv!There are several ways to install Git Cola.## LinuxLinux is it! Your distro has probably already packaged `git-cola`.If not, please file a bug against your distribution ;-)### ArchAvailable in the [AUR](https://aur.archlinux.org/packages/git-cola/).### Debian, Ubuntu    apt install git-cola### Fedora    dnf install git-cola### Gentoo    emerge git-cola### OpenSUSE, SLE    zypper install git-cola### SlackwareAvailable in [SlackBuilds.org](http://slackbuilds.org/result/?search=git-cola).### Ubuntu[See here](https://packages.ubuntu.com/search?keywords=git-cola) for theversions that are available in Ubuntu's repositories.There was a [PPA by @pavreh](https://launchpad.net/~pavreh/+archive/ubuntu/git-cola)but it has not been updated for a while.## FreeBSD    # Install from official binary packages    pkg install -r FreeBSD devel/git-cola    # Build from source    cd /usr/ports/devel/git-cola &amp;&amp; make clean install## Install into a Python Virtualenv from PyPI using pip**IMPORTANT**: never run `pip install` or `make install` as root or outside of aPython virtualenv!One way to install the latest released version is to use `venv` (virtualenv) and `pip`.This installs [git-cola from pypi.org](https://pypi.org/project/git-cola/).If you already have `PyQt5` installed from your distribution's package managerthen you should skip the `pip install PyQt` steps.If you already have the `qt5-devel` package installed then you can lookup its version sothat your virtualenv can install a compatible version of PyQt using `qmake`:    QT_VERSION=$(qmake -query QT_VERSION)    QT_VERSION_MAJOR=$(qmake -query QT_VERSION | head -c 1)    echo PyQt${QT_VERSION_MAJOR}==${QT_VERSION}Take note of the `PyQtX==A.B.C` value so that you can specify it when installingPyQt below if, and only if, you have `qmake` installed and want to interoperatewith its corresponding Qt installation.    python3 -m venv --system-site-packages env3    # Skip this command if you already have PyQt installed or if you do not have qmake    ./env3/bin/pip install PyQt${QT_VERSION_MAJOR}==${QT_VERSION}    ./env3/bin/pip install git-cola    ./env3/bin/git-colaAdd the `env3/bin` directory to your `PATH` or symlink to `bin/git-cola` fromsomewhere in your `PATH` such as `~/.local/bin/git-cola`, and you can launchGit Cola like any other built-in `git` command:    git cola    git dag## Install into a Python Virtualenv from SourceIf you don't have PyQt installed then the easiest way to get it is to use a Pythonvirtualenv and install Git Cola into it in &quot;editable&quot; mode. This install methodlets you upgrade Git Cola by running `git pull`.    # Create a virtualenv called &quot;env3&quot; and activate it.    python3 -m venv --system-site-packages env3    source env3/bin/activate    # One-time setup: install optional requirements for development.    make requirements-dev requirements-optional    # Install git-cola in &quot;editable&quot; mode so that it uses the source tree.    make develop    # Run Git Cola via the &quot;git-cola&quot; Git subcommand.    git colaIf you add `env3/bin` (or symlink to `bin/git-cola` ) to your `$PATH` then you canrun `git cola` as if it were a builtin `git` command from outside of the virtualenv(eg. after running &quot;deactivate&quot; or when opening a new shell).## Standalone Installation from SourceRunning `make install prefix=$HOME/.local` will install Git Cola in your`$HOME/.local` directory (`$HOME/.local/bin/git-cola`, `$HOME/.local/lib`, etc).This installation method assumes that the `qtpy` and `PyQt*` dependencies havebeen pre-installed.The `Makefile` also supports `DESTDIR` to support creating packages for Linux packagemanagers:    make DESTDIR=/tmp/stage prefix=/usr/local install## macOSFor most end-users we recommend using either Homebrew or installing intoa Python virtualenv as described above.You can install Git Cola from source using the same steps as above.### HomebrewAn easy way to install Git Cola is to use [Homebrew](https://brew.sh/) .Use Homebrew to install the git-cola recipe:    brew install git-colaIf you install using Homebrew you can stop at this step.You don't need to clone the repo or anything.### git-cola.appIf you have all of the dependencies installed, either via `pip` or `brew` thenyou can build a shell `git-cola.app` app bundle wrapper for use in `/Applications`.If you'd like to build a `git-cola.app` bundle for `/Applications` run this command:    make git-cola.appYou will need to periodically rebuild the app wrapper whenever Python is upgraded.### Updating macOS and HomebrewUpdating macOS can often break Homebrew-managed software.If you upgrade your macOS version and Git Cola no longer runs then then it isrecommended that you re-install Git Cola's dependencies after upgrading.A quick fix when upgrading to newer versions of XCode or macOS is toreinstall pyqt5.    brew reinstall pyqt@5You may also need to relink your pyqt installation:    brew link pyqt@5This is required when upgrading to a modern (post-10.11 El Capitan) Mac OS X.Homebrew now bundles its own Python3 installation instead of using thesystem-provided default Python.If the &quot;brew reinstall&quot; command above does not work then re-installing fromscratch using the instructions below should get things back in shape.    # update homebrew    brew update    # uninstall git-cola and its dependencies    brew uninstall git-cola    brew uninstall pyqt5    brew uninstall sip    # re-install git-cola and its dependencies    brew install git-cola## WindowsIMPORTANT If you have a 64-bit machine, install the 64-bit versions only.Do not mix 32-bit and 64-bit versions.Download and install the following:* [Git for Windows](https://git-for-windows.github.io/)* [Git Cola](https://github.com/git-cola/git-cola/releases)Once these are installed you can run Git Cola from the Start menu.See &quot;Windows (Continued)&quot; below for more details.If you'd like to install Git Cola with[winget](https://github.com/microsoft/winget-cli) run the following command:    winget install git-cola.git-colaAs there is no dependency resolution yet you have to install Git as well with:    winget install Git.Git# GoodiesGit Cola ships with an interactive rebase editor called `git-cola-sequence-editor`.`git-cola-sequence-editor` is used to reorder and choose commits when rebasing.Start an interactive rebase through the &quot;Rebase&quot; menu, or through the`git cola rebase` sub-command to use the `git-cola-sequence-editor`:    git cola rebase @{upstream}`git-cola-sequence-editor` can be launched independently of git cola by telling`git rebase` to use it as its editor through the `GIT_SEQUENCE_EDITOR`environment variable:    export GIT_SEQUENCE_EDITOR=&quot;$HOME/git-cola/bin/git-cola-sequence-editor&quot;    git rebase -i @{upstream}## Shell CompletionsShell completion scripts are available for bash and zsh.Each script contains instructions on how to install and activate the completions.* [bash completion script](contrib/git-cola-completion.bash)* [zsh completion script](contrib/_git-cola)# Git Cola Sub-commandsThe `git-cola` command exposes various sub-commands that allow you to quicklylaunch tools that are available from within the git-cola interface.For example, `git cola find` launches the file finder,and `git cola grep` launches the grep tool.See `git cola --help-commands` for the full list of commands.    $ git cola --help-commands    usage: git-cola [-h]                        {cola,am,archive,branch,browse,config,                     dag,diff,fetch,find,grep,merge,pull,push,                     rebase,remote,search,stash,tag,version}                    ...        valid commands:      {cola,am,archive,branch,browse,config,       dag,diff,fetch,find,grep,merge,pull,push,       rebase,remote,search,stash,tag,version}        cola                start git-cola        am                  apply patches using &quot;git am&quot;        archive             save an archive        branch              create a branch        browse              browse repository        config              edit configuration        dag                 start git-dag        diff                view diffs        fetch               fetch remotes        find                find files        grep                grep source        merge               merge branches        pull                pull remote branches        push                push remote branches        rebase              interactive rebase        remote              edit remotes        search              search commits        stash               stash and unstash changes        tag                 create tags        version             print the version## DevelopmentIf you already have Git Cola's dependencies installed then you can start `cola` as a Python module if you have the source code available.    python -m cola    python -m cola dagThe following commands should be run during development:    # Run the unit tests    $ make test    # Run tests and longer-running pylint checks    $ make check    # Run tests against multiple python interpreters using tox    $ make toxThe test suite can be found in the [test](test) directory.Commits and pull requests are automatically tested for code qualityusing [GitHub Actions](https://github.com/git-cola/git-cola/actions/workflows/main.yml).Auto-format `cola/i18n/*.po` files before committing when updating translations:    $ make poWhen submitting patches, consult the[contributing guidelines](CONTRIBUTING.md).## Packaging NotesGit Cola installs its modules into the default Python site-packages directory(eg. `lib/python3.7/site-packages`) using setuptools.While end-users can use `pip install git-cola` to install Git Cola, distributionpackagers should use the `make prefix=/usr` install process. Git Cola's `Makefile` wraps`pip install --prefix=&lt;prefix&gt;` to provide a packaging-friendly `make install` target.# Windows (Continued)## Microsoft Visual C++ 2015 RedistributableEarlier versions of Git Cola may have shipped without `vcruntime140.dll`  and maynot run on machines that are missing this DLL.To fix this, download the[Microsoft Visual C++ 2015 Redistributable](https://www.microsoft.com/en-us/download/details.aspx?id=52685)and install itGit Cola v4.0.0 and newer include this DLL and do not require this to be installedseparately.## DevelopmentIn order to develop Git Cola on Windows you will need to installPython3 and pip.  Install PyQt5 using `pip install PyQt5`to make the PyQt5 bindings available to Python.Once these are installed you can use `python.exe` to rundirectly from the source tree.  For example, from a Git Bash terminal:    /c/Python36/python.exe ./bin/git-cola## Multiple Python versionsIf you have multiple versions of Python installed, the `contrib/win32/cola`launcher script might choose the newer version instead of the pythonthat has PyQt installed.  In order to resolve this, you can set the`cola.pythonlocation` git configuration variable to tell cola where tofind python.  For example:    git config --global cola.pythonlocation /c/Python39## Building Windows InstallersWindows installers are built using* [Pynsist](https://pynsist.readthedocs.io/en/latest/).* [NSIS](http://nsis.sourceforge.net/Main_Page) is also needed.To build the installer using Pynsist run:    ./contrib/win32/run-pynsist.shThis will generate an installer in `build/nsis/`.## Windows &quot;History Browser&quot; Configuration UpgradeYou may need to configure your history browser if you are upgrading from anolder version of Git Cola on Windows.`gitk` was originally the default history browser, but `gitk` cannot belaunched as-is on Windows because `gitk` is a shell script.If you are configured to use `gitk`, then change your configuration togo through Git's `sh.exe` on Windows.  Similarly, we must go through`python.exe` if we want to use `git-dag`.If you want to use gitk as your history browser open thePreferences screen and change the history browser command to:    &quot;C:/Program Files/Git/bin/sh.exe&quot; --login -i C:/Git/bin/gitk`git-dag` became the default history browser on Windows in `v2.3`, so newusers do not need to configure anything.</longdescription>
</pkgmetadata>