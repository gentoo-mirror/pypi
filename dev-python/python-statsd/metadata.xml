<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction============.. image:: https://travis-ci.org/WoLpH/python-statsd.svg?branch=master    :alt: Test Status    :target: https://travis-ci.org/WoLpH/python-statsd.. image:: https://coveralls.io/repos/WoLpH/python-statsd/badge.svg?branch=master    :alt: Coverage Status    :target: https://coveralls.io/r/WoLpH/python-statsd?branch=master`statsd` is a client for Etsy's statsd server, a front end/proxy for theGraphite stats collection and graphing server.Links----- - The source: https://github.com/WoLpH/python-statsd - Project page: https://pypi.python.org/pypi/python-statsd - Reporting bugs: https://github.com/WoLpH/python-statsd/issues - Documentation: http://python-statsd.readthedocs.io/en/latest/ - My blog: http://w.wol.ph/ - Statsd: https://github.com/etsy/statsd - Graphite: http://graphite.wikidot.comInstall-------To install simply execute `python setup.py install`.If you want to run the tests first, run `python setup.py nosetests`Usage-----To get started real quick, just try something like this:Basic Usage~~~~~~~~~~~Timers^^^^^^    &gt;&gt;&gt; import statsd    &gt;&gt;&gt;    &gt;&gt;&gt; timer = statsd.Timer('MyApplication')    &gt;&gt;&gt;    &gt;&gt;&gt; timer.start()    &gt;&gt;&gt; # do something here    &gt;&gt;&gt; timer.stop('SomeTimer')Counters^^^^^^^^    &gt;&gt;&gt; import statsd    &gt;&gt;&gt;    &gt;&gt;&gt; counter = statsd.Counter('MyApplication')    &gt;&gt;&gt; # do something here    &gt;&gt;&gt; counter += 1Gauge^^^^^    &gt;&gt;&gt; import statsd    &gt;&gt;&gt;    &gt;&gt;&gt; gauge = statsd.Gauge('MyApplication')    &gt;&gt;&gt; # do something here    &gt;&gt;&gt; gauge.send('SomeName', value)Raw^^^Raw strings should be e.g. pre-summarized data or other data that willget passed directly to carbon.  This can be used as a time andbandwidth-saving mechanism sending a lot of samples could use a lot ofbandwidth (more b/w is used in udp headers than data for a gauge, forinstance).    &gt;&gt;&gt; import statsd    &gt;&gt;&gt;    &gt;&gt;&gt; raw = statsd.Raw('MyApplication', connection)    &gt;&gt;&gt; # do something here    &gt;&gt;&gt; raw.send('SomeName', value, timestamp)The raw type wants to have a timestamp in seconds since the epoch (thestandard unix timestamp, e.g. the output of &quot;date +%s&quot;), but if you leave it out orprovide None it will provide the current time as part of the messageAverage^^^^^^^    &gt;&gt;&gt; import statsd    &gt;&gt;&gt;    &gt;&gt;&gt; average = statsd.Average('MyApplication', connection)    &gt;&gt;&gt; # do something here    &gt;&gt;&gt; average.send('SomeName', 'somekey:%d'.format(value))Connection settings^^^^^^^^^^^^^^^^^^^If you need some settings other than the defaults for your ``Connection``,you can use ``Connection.set_defaults()``.        &gt;&gt;&gt; import statsd    &gt;&gt;&gt; statsd.Connection.set_defaults(host='localhost', port=8125, sample_rate=1, disabled=False)Every interaction with statsd after these are set will use whatever youspecify, unless you explicitly create a different ``Connection`` to use(described below).Defaults:- ``host`` = ``'localhost'``- ``port`` = ``8125``- ``sample_rate`` = ``1``- ``disabled`` = ``False``Advanced Usage--------------    &gt;&gt;&gt; import statsd    &gt;&gt;&gt;    &gt;&gt;&gt; # Open a connection to `server` on port `1234` with a `50%` sample rate    &gt;&gt;&gt; statsd_connection = statsd.Connection(    ...     host='server',    ...     port=1234,    ...     sample_rate=0.5,    ... )    &gt;&gt;&gt;    &gt;&gt;&gt; # Create a client for this application    &gt;&gt;&gt; statsd_client = statsd.Client(__name__, statsd_connection)    &gt;&gt;&gt;    &gt;&gt;&gt; class SomeClass(object):    ...     def __init__(self):    ...         # Create a client specific for this class    ...         self.statsd_client = statsd_client.get_client(    ...             self.__class__.__name__)    ...    ...     def do_something(self):    ...         # Create a `timer` client    ...         timer = self.statsd_client.get_client(class_=statsd.Timer)    ...    ...         # start the measurement    ...         timer.start()    ...    ...         # do something    ...         timer.intermediate('intermediate_value')    ...    ...         # do something else    ...         timer.stop('total')If there is a need to turn *OFF* the service and avoid sending UDP messages,the ``Connection`` class can be disabled by enabling the disabled argument::    &gt;&gt;&gt; statsd_connection = statsd.Connection(    ...     host='server',    ...     port=1234,    ...     sample_rate=0.5,    ...     disabled=True    ... )If logging's level is set to debug the ``Connection`` object will inform it isnot sending UDP messages anymore.</longdescription>
</pkgmetadata>