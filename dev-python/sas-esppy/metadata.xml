<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SAS Event Stream Processing Python InterfaceThe ESPPy package enables you to create[SAS Event Stream Processing (ESP)](https://www.sas.com/en_us/software/event-stream-processing.html)models programmatically in Python. Using ESPPy, you can connect to an ESP server and interact with projects and their components as Python objects. These objects include projects, continuous queries, windows, events, loggers, SAS Micro Analytic Service modules, routers, and analytical algorithms.ESPPy has full integration with [Jupyter](https://jupyter.org/) notebooks including visualizing diagrams of your ESP projects, and support for streaming charts and images. This enables you to easily explore and prototype your ESP projects in a familiar notebook interface.## InstallationTo install ESPPy, use `pip`. This installsESPPy and the Python package dependencies.```pip install sas-esppy```### Additional RequirementsIn addition to the Python package dependencies, you also need the `graphviz` command-line tools to fully take advantage of ESPPy. Download them from http://www.graphviz.org/download/.### Performance EnhancementESPPy uses the `ws4py` websocket Python package. In some cases,you can improve performance greatly by installing the `wsaccel` package.This may not be available on all platforms though, and is left up to the user to install.## The BasicsTo import the ESPPy package, use the same method as with any other Python package.```&gt;&gt;&gt; import esppy```To connect to an ESP server, use the `ESP` class.  In most cases, the onlyinformation that is needed is the hostname and port.```&gt;&gt;&gt; esp = esppy.ESP('http://myesp.com:8777')```### Getting Information about the ServerAfter you have connected to the server, you can get information about theserver and projects.```&gt;&gt;&gt; esp.server_info{'analytics-license': True, 'engine': 'esp', 'http-admin': 8777, 'pubsub': 8778, 'version': 'X.X'}# Currently no projects are loaded&gt;&gt;&gt; esp.get_projects(){}```### Loading a ProjectTo load a project, use the `load_project` method.```&gt;&gt;&gt; esp.load_project('project.xml')&gt;&gt;&gt; esp.get_projects(){'project': Project(name='project')}```To access continous queries and windows within projects, use the `queries` and `windows` attributes of the `Project` and`ContinuousQuery` objects, respectively.```&gt;&gt;&gt; proj = esp.get_project('project')&gt;&gt;&gt; proj.queries{'contquery': ContinuousQuery(name='contquery', project='project')}&gt;&gt;&gt; proj.queries['contquery'].windows{'w_data': CopyWindow(name='w_data', continuous_query='contquery', project='project'), 'w_request': SourceWindow(name='w_request', continuous_query='contquery', project='project'), 'w_calculate': CalculateWindow(name='w_calculate', continuous_query='contquery', project='project')}&gt;&gt;&gt; dataw = proj.queries['contquery'].windows['w_data']```As a shortcut, you can drop the `queries` and `windows` attribute name.Projects and continuous queries act like dictionaries of those components.```&gt;&gt;&gt; dataw = proj['contquery']['w_data']```### Publishing Event DataTo publish events to a window, use the `publish_events` method.It accepts a file name, file-like object, DataFrame, or a string ofCSV, XML, or JSON data.```&gt;&gt;&gt; dataw.publish_events('data.csv')```### Monitoring EventsYou can subscribe to the events of any window in a project. By default,all event data are cached in the local window object.```&gt;&gt;&gt; dataw.subscribe()&gt;&gt;&gt; dataw       time        x        y        zid                                    6   0.15979 -2.30180  0.23155  10.65107   0.18982 -1.41650  1.18500  11.07308   0.22040 -0.27241  2.22010  11.98609   0.24976 -0.61292  2.22010  11.986010  0.27972  1.33480  4.24950  11.414011  0.31802  3.44590  7.58650  12.5990```To limit the number of cached events, use the `limit`parameter. For example, to only keep the last 20 events, enter the following line:```&gt;&gt;&gt; dataw.subscribe(limit=20)```You can also limit the amount of time that events are collected usingthe `horizon` parameter. Use one of the following objects: `datetime`, `date`, `time`,or `timedelta`.```&gt;&gt;&gt; dataw.subscribe(horizon=datetime.timedelta(hours=1))```You can also perform any DataFrame operation on your ESP windows.```&gt;&gt;&gt; dataw.info()&lt;class 'pandas.core.frame.DataFrame'&gt;Int64Index: 2108 entries, 6 to 2113Data columns (total 4 columns):time    2108 non-null float64x       2108 non-null float64y       2108 non-null float64z       2108 non-null float64dtypes: float64(4)memory usage: 82.3 KB&gt;&gt;&gt; dataw.describe()            time          x          y          zcount  20.000000  20.000000  20.000000  20.000000mean   69.655050  -4.365320   8.589630  -1.675292std     0.177469   1.832482   2.688911   2.108300min    69.370000  -7.436700   4.862500  -5.17570025%    69.512500  -5.911250   7.007675  -3.06115050%    69.655000  -4.099700   7.722700  -1.70250075%    69.797500  -2.945400   9.132350  -0.766110max    69.940000  -1.566300  14.601000   3.214400```### Using ESPPy Visualizations with JupyterLabNOTE: These instructions assume you have Anaconda installed.To use jupyterlab visualizations with ESPPy (available in version 6.2 or higher), perform the following steps:1. Create a new Anaconda environment. For this example, the environment is called esp.```    $ conda create -n esp python=3.X```2. Activate the new environment.```$ conda activate esp```3. Install the following packages:```$ pip install jupyter$ pip install jupyterlab$ pip install matplotlib$ pip install ipympl$ pip install pandas$ pip install requests$ pip install image$ pip install ws4py$ pip install plotly$ pip install ipyleaflet$ pip install graphviz```4. Install the following Jupyterlab extensions:```$ jupyter labextension install @jupyter-widgets/jupyterlab-manager$ jupyter labextension install plotlywidget$ jupyter labextension install jupyter-leaflet```5. Install the following packages (WINDOWS ONLY):```$ conda install -c conda-forge python-graphviz```6. Create and change to a working directory.```$ cd $HOME$ mkdir esppy$ cd esppy```7. Install ESPPy.```pip install sas-esppy```8. Create a notebooks directory to store your notebooks.```$ mkdir notebooks```9. Start the Jupyterlab server. Select an available port. For this example, port 35000 was selected.```$ jupyter lab --port 35000```After you complete these steps, you can use the latest ESP graphics in your Jupyter notebooks.### DocumentationTo view the full API documentation for ESPPy, see https://sassoftware.github.io/python-esppy/.</longdescription>
</pkgmetadata>