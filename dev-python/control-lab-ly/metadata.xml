<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Control.lab.lyLab Equipment Automation Package## DescriptionUser-friendly package that enables flexible automation an reconfigurable setups for high-throughput experimentation and machine learning.## Device support- Make  - Multi-channel spin-coater \[Arduino\]  - Multi-channel LED array \[Arduino\]  - Peltier device \[Arduino\]- Measure  - (Keithley) 2450 Source Measure Unit (SMU) Instrument  - (PiezoRobotics) Dynamic Mechanical Analyser (DMA)  - Precision mass balance \[Arduino\]- Move  - (Creality) Ender-3  - (Dobot) M1 Pro  - (Dobot) MG400  - Primitiv \[Arduino\]- Transfer  - (Sartorius) rLINEÂ® dispensing modules  - (TriContinent) C Series syringe pumps  - Peristaltic pump and syringe system \[Arduino\]- View  - (FLIR) AX8 thermal imaging camera - full functionality in development   - Web cameras \[General\]## Installation```shell$ pip install control-lab-ly```## Usage### Import package```pythonimport controllably as lab```### [Optional] Set safety level for session```pythonlab.set_safety('high')  # Pauses for input before every move actionlab.set_safety('low')   # Waits for countdown before every move action```### Import desired class```pythonfrom controllably.Move.Cartesian import Endermover = Ender(...)mover.safeMoveTo((x,y,z))```More details for each class / module / package can be explored by using the `help` function.```pythonhelp(controllably.Move)   # help on packagehelp(Ender)               # help on classhelp(mover)               # help on instance/object```Alternatively, you can use the native `pydoc` documentation generator.```shell$ python -m pydoc controllably.Move$ python -m pydoc controllably.Move.Cartesian.Ender```&gt;Tip: when using Interactive Python (IPython) (e.g. Jupyter notebooks), add a exclamation mark (`!`) in front of the shell command```python&gt;&gt;&gt; !python -m pydoc controllably```### Create new projectCreate a `/configs` folder in the base folder of your project repository to store all configuration related files from which the package will read from.\This only has to be done once when you first set up the project folder.```pythonlab.create_configs()```A different address may be used by different machines for the same device. To manage the different addresses used by different machines, you first need your machine's unique identifier.```python# Get your machine's IDprint(lab.Helper.get_node())```A template of `registry.yaml` has also been added to the folder to hold the machine-specific addresses of your connected devices (i.e. COM ports).\Populate the YAML file in the format shown below.```yaml### registry.yaml ###'0123456789ABCDE':              # insert your machine's ID here (from the above step)    cam_index:                  # camera index of the connected imaging devices      __cam_01__: 1             # keep the leading and trailing double underscores      __cam_02__: 0    port:                       # addresses of serial COM ports      __device_01__: COM3       # keep the leading and trailing double underscores      __device_02__: COM16```To find the COM port address(es) of the device(s) that is/are currently connected to your machine, use```pythonlab.Helper.get_ports()```### Create new setupCreate a new folder for the configuration files of your new setup. If you had skipped the previous step of creating a project, calling `lab.create_setup` will also generate the required file structure. However, be sure to populate your machine ID and device addresses in the `registry.yaml` file.```pythonlab.create_setup(setup_name = &quot;Setup01&quot;)# replace &quot;Setup01&quot; with the desired name for your setup```This creates a `/Setup01` folder that holds the configuration files for the setup, which includes `config.yaml` and `layout.json`.#### `config.yaml`Configuration and calibration values for your devices is stored in `config.yaml`.\Each configuration starts with the `name` of your device, then its `module`, `class`, and `settings`.```yaml### config.yaml ###Device01:                                         # name of simple device (user-defined)  module: __module_name_01__                      # device module  class: __submodule_1A__.__class_1A__            # device class  settings:    port: __device_01__                           # port addresses defined in registry.yaml    __setting_A__: {'tuple': [300,0,200]}         # use keys to define the type of iterable    __setting_B__: {'array': [[0,1,0],[-1,0,0]]}  # only tuple and np.array supported````Compound` devices are similarly configured. The configuration values for its component devices are defined under the `component_config` setting. The structure of the configuration values for the component devices are similar to that shown above, except indented to fall under the indentation of the `component_config` setting.```yaml### config.yaml ###Device02:                                     # name of 'Compound' device (user-defined)  module: Compound                              class: __submodule_2A__.__class_2A__  settings:    __setting_C__: 1                          # other settings for your 'Compound' device    component_config:                         # nest component configuration settings here      Component01:                            # name of component        module: __module_name_03__        class: __submodule_3A__.__class_3A__        settings:          ip_address: '192.0.0.1'             # IP addresses do not vary between machines      Component02:         module: __module_name_04__        class: __submodule_4A__.__class_4A__        settings:          __setting_D__: 2                    # settings for your component device```Lastly, you can define shortcuts to quickly access components of `Compound` devices.```yaml### config.yaml ###SHORTCUTS:  robot_arm: myCompoundDevice.mover  Nickname1: Device02.Component01  Nickname2: Device02.Component02```#### `layout.json`Layout configuration of your physical workspace (`Deck`) will be stored in `layout.json`. This package uses the same Labware files as those provided by [Opentrons](https://opentrons.com/), which can be found [here](https://labware.opentrons.com/), and custom Labware files can be created [here](https://labware.opentrons.com/create/). Labware files are JSON files that specifies the external and internal dimensions of a Labware block/module.This file is optional if your setup does not involve moving objects around in a pre-defined workspace, and hence a layout configuration may not be required.```json{  &quot;reference_points&quot;:{    &quot;1&quot;: [&quot;_x01_&quot;,&quot;_y01_&quot;,&quot;_z01_&quot;],    &quot;2&quot;: [&quot;_x02_&quot;,&quot;_y02_&quot;,&quot;_z02_&quot;]  },  &quot;slots&quot;:{    &quot;1&quot;: {      &quot;name&quot;: &quot;Labware01&quot;,      &quot;exclusion_height&quot;: -1,      &quot;filepath&quot;: &quot;REPO/.../Labware01.json&quot;    },    &quot;2&quot;: {      &quot;name&quot;: &quot;Labware02&quot;,      &quot;exclusion_height&quot;: 0,      &quot;filepath&quot;: &quot;REPO/.../Labware02.json&quot;    },    &quot;3&quot;: {      &quot;name&quot;: &quot;Labware03&quot;,      &quot;exclusion_height&quot;: 10,      &quot;filepath&quot;: &quot;REPO/.../Labware03.json&quot;    }  }}```In `reference_points`, the bottom-left coordinates of each slot in the workspace are defined. Slots are positions where Labware blocks may be placed.In `slots`, the name of each slot and the file reference for Labware block that occupies that slot are defined. The filepath starts with the repository's base folder name.\The `exclusion_height` is the height (in mm) above the dimensions of the Labware block to steer clear from when performing move actions. Defaults to -1 (i.e. do not avoid).\\[Note: only applies to final coordinates. Does not guarantee avoidance when using point-to-point move actions. Use `safeMoveTo` instead.\]### Load setupThe initialisation of the setup occurs during the import `SETUP` from within `configs/Setup01`.```python# Add repository folder to sys.pathfrom pathlib import Pathimport sysREPO = 'REPO'ROOT = str(Path().absolute()).split(REPO)[0]sys.path.append(f'{ROOT}{REPO}')# Import the initialised setupfrom configs.Setup01 import SETUPthis = SETUP```With `this`, you can access all the devices that you have defined in `configs.yaml`.```pythonthis.myCompoundDevicethis.robot_arm```### Load deckTo load the `Deck` from the layout file, use the `lab.load_deck` function.```pythonfrom configs.Setup01 import LAYOUT_FILElab.load_deck(this.DeviceWithDeck, LAYOUT_FILE)``` ## Package Structure1. Analyse2. Compound3. Control4. Make5. Measure6. Move7. Transfer8. View## Dependencies- Dash (&gt;=2.7.1)- Impedance (&gt;=1.4.1)- Imutils (&gt;=0.5.4)- Matplotlib (&gt;=3.3.4)- Nest-asyncio (&gt;=1.5.1)- Numpy (&gt;=1.19.5)- Opencv-python (&gt;=4.5.4.58)- Pandas (&gt;=1.2.4)- Plotly (&gt;=5.3.1)- PyModbusTCP (&gt;=0.2.0)- Pyserial (&gt;=3.5)- PySimpleGUI (&gt;=4.60.4)- PyVISA (&gt;=1.12.0)- PyYAML (&gt;=6.0)- Scipy (&gt;=1.6.2)## Contributors[@kylejeanlewis](https://github.com/kylejeanlewis)\[@mat-fox](https://github.com/mat-fox)\[@Quijanove](https://github.com/Quijanove)\[@AniketChitre](https://github.com/AniketChitre)## How to Contribute[Issues](https://github.com/kylejeanlewis/control-lab-le/issues) and feature requests are welcome!## LicenseThis project is distributed under the [MIT License](https://github.com/kylejeanlewis/control-lab-le/blob/main/LICENSE).# Change Log## Unreleased*Items under development*## 0.0.4.xIntroduced control for Peltier device and TriContinent Series C syringe pumps. First released 10 Mar 2023.### Added#### 0.0.4- Added control for `Peltier`  - set and get temperatures  - hold temperatures for desired duration  - checks if target temperature has been reached by checking power level lower than a threshold or time passed over a predefined duration, once the temperature is within tolerance  - ability to record temperatures and timestamps - Added control for `TriContinent` and `TriContinentEnsemble`  - single actions such as `empty`, `fill`, `initialise`, move actions, set speeds and valves, and wait  - compound actions such as `aspirate`, `dispense`, and `prime`### Changed#### 0.0.4- Update documentation## 0.0.3.xMinor changes to movement robot safety and pipette control. Introduced control for LED array. First released 08 Mar 2023.### Added#### 0.0.3- Added safety measures for movement actions  - In `Deck`, added exclusion zones when reading the `layout.json` file and new method `is_excluded()` to check if target coordinate is within the exclusion zone  - In `Mover`, update `isFeasible()` method to check if target coordinates violates the deck's exclusion zone  - New function `set_safety()` defines safety modes when starting a new session to pause for input (in &quot;high&quot; safety setting) and to wait for safety countdown (in &quot;low&quot; safety setting)- `Make.Light.LEDArray` for controlling LEDs in the photo-reactor, as well as timing the LED &quot;on&quot; durations### Changed#### 0.0.3.1- Update documentation#### 0.0.3- `Sartorius`  - made the blowout/home optional for the dispense method upon emptying the pipette- Update documentation## 0.0.2.xUpdates in setting up configuration files. First released 24 Feb 2023.### Added#### 0.0.2.2- Added import of `CompoundSetup` class#### 0.0.2- `Deck.at()` method for directly referencing slots using either index numbers or names- New `CompoundSetup` class for common methods of `Compound` devices- New `load_deck()` function to load `Deck` after initialisation### Changed#### 0.0.2.1- Changed template files for `lab.create_setup()`#### 0.0.2- Update documentation## 0.0.1.xFirst release of [Control.lab.ly](https://pypi.org/project/control-lab-ly/) distributed on 23 Feb 2023.### Added- Make  - Multi-channel spin-coater \[Arduino\]- Measure  - (Keithley) 2450 Source Measure Unit (SMU) Instrument  - (PiezoRobotics) Dynamic Mechanical Analyser (DMA)  - Precision mass balance \[Arduino\]- Move  - (Creality) Ender-3  - (Dobot) M1 Pro  - (Dobot) MG400  - Primitiv \[Arduino\]- Transfer  - (Sartorius) rLINEÂ® dispensing modules  - Peristaltic pump and syringe system \[Arduino\]- View  - (FLIR) AX8 thermal imaging camera - full functionality in development   - Web cameras \[General\] - misc  - Helper class for most common actions  - create_configs: make new directory for configuration files  - create_setup: make new directory for specific setup-related files  - load_setup: initialise setup on import during runtime## 0.0.0.xPre-release packaging checks</longdescription>
</pkgmetadata>