<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Py-gql-client is a python library that creates strongly typed classes for querying graphql based on graphql schema.It is similar to other libraries that generates code for API schema types like gRPC and Thrift.It is very helpful for building GraphQL based SDK in fast and safe way as it helps you guarantee the following:1. GraphQL queries are valid - Validated in compile time and runtime2. Python usage of queries is valid - User can validate it with using mypy (library is mypy compatible - http://mypy-lang.org/)3. Changes over time in graphql schema doesn't break existing SDKs - You can use verify flag of compiler and integrate it in your CI/CD Graphql is a query language developed by Facebook (https://graphql.org/)## Installation* Install it with:```bashpip install py-gql-client```## UsageAfter installation you should compile code with running```bashgql-compiler {schema_library} {graphql_library}```* `schema_library` is where the folder where the graphql schema (or schemas) are located* `graphql_library` is where you locate the queries that you'd like to compile (`Query`, `Mutation` and `Subscription` are supported)Example:In the `graphql_library` create the file `query.graphql`:```graphqlquery DogQuery($id: String!) {    dog(id: $id) {        id        name        breed        age    }}```After compilation it will create the file `query.py` in the same folder:```python#!/usr/bin/env python3# @generated AUTOGENERATED file. Do not Change!from dataclasses import dataclass, fieldfrom gql_client.runtime.variables import encode_variablesfrom gql import gql, Clientfrom gql.transport.exceptions import TransportQueryErrorfrom functools import partialfrom numbers import Numberfrom typing import Any, AsyncGenerator, Dict, List, Generator, Optionalfrom time import perf_counterfrom dataclasses_json import DataClassJsonMixin, configfrom gql_client.runtime.enum_utils import enum_field_metadatafrom .enum.dog_breed import DogBreed# fmt: offQUERY: List[str] = [&quot;&quot;&quot;query DogQuery($id: String!) {    dog(id: $id) {        id        name        breed        age    }}&quot;&quot;&quot;]class DogQuery:    @dataclass(frozen=True)    class DogQueryData(DataClassJsonMixin):        @dataclass(frozen=True)        class Dog(DataClassJsonMixin):            id: str            name: Optional[str]            breed: Optional[DogBreed] = field(metadata=enum_field_metadata(DogBreed))            age: Optional[int]        dog: Optional[Dog]    # fmt: off    @classmethod    def execute(cls, client: Client, id: str) -&gt; Optional[DogQueryData.Dog]:        variables: Dict[str, Any] = {&quot;id&quot;: id}        new_variables = encode_variables(variables)        response_text = client.execute(            gql(&quot;&quot;.join(set(QUERY))), variable_values=new_variables        )        res = cls.DogQueryData.from_dict(response_text)        return res.dog    # fmt: off    @classmethod    async def execute_async(cls, client: Client, id: str) -&gt; Optional[DogQueryData.Dog]:        variables: Dict[str, Any] = {&quot;id&quot;: id}        new_variables = encode_variables(variables)        response_text = await client.execute_async(            gql(&quot;&quot;.join(set(QUERY))), variable_values=new_variables        )        res = cls.DogQueryData.from_dict(response_text)        return res.dog```For using the new class you first need to initialize a graphql client with gql library (https://github.com/graphql-python/gql). There are many options in the library for defining the underlying transport so check the documentation to learn more.Full simple example is the following:```pythonfrom gql import Clientfrom gql.transport.aiohttp import AIOHTTPTransportfrom gql_client.runtime.graphql_client import GraphqlClientfrom query import DogQuerytransport = AIOHTTPTransport(url=&quot;http://.../graph/query&quot;)client = Client(transport=transport, fetch_schema_from_transport=True)result = DogQuery.execute(client, id=&quot;1000&quot;)...```You can find many more examples in `examples` directory## Custom ScalarsIf your graphql schema contains custom scalars you should create python configuration file with the definitions of the custom scalars and use in the compilation command with `--config_path` option.In the configuration file you should have `custom_scalars` variable of type `Dict[str, CustomScalar]`. Simple example:```pythonfrom gql_client.compiler.renderer_dataclasses import CustomScalarfrom typing import Dictcustom_scalars: Dict[str, CustomScalar] = {    &quot;Cursor&quot;: CustomScalar(        name=&quot;Cursor&quot;,        type=str,    ),}````CustomScalar` has `encoder`, `decoder` and `mm_field` when the custom scalar is defined with complex type that requires encoding\decoding from the string that is being sent in the graphql response.## More features* Create fragments query files and share them between other query files* Compiler has an option to only verify compiled query files without re-genrating them (`--verify` option)* Compiler can be configured to raise an error if queries use deprecated fields (`--allow-deprecated` option)## LicensePy-gql-client is `BSD License` licensed, as found in the `LICENSE` file.</longdescription>
</pkgmetadata>