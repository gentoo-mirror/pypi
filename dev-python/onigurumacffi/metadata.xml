<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://dev.azure.com/asottile/asottile/_apis/build/status/asottile.onigurumacffi?branchName=main)](https://dev.azure.com/asottile/asottile/_build/latest?definitionId=61&amp;branchName=main)[![Azure DevOps coverage](https://img.shields.io/azure-devops/coverage/asottile/asottile/61/main.svg)](https://dev.azure.com/asottile/asottile/_build/latest?definitionId=61&amp;branchName=main)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/onigurumacffi/main.svg)](https://results.pre-commit.ci/latest/github/asottile/onigurumacffi/main)onigurumacffi=============python cffi bindings for the oniguruma regex engine### installation```bashpip install onigurumacffi```- wheels should be available on pypi in most cases- to build from source, `libonig-dev` must be installed prior to installation### apithe api is currently *very limited* (basically just enough to support what Ineeded).#### `compile(pattern: str) -&gt; _Pattern`make a compiled pattern#### `compile_regset(*patterns: str) -&gt; _RegSet`make a compiled RegSet#### `OnigSearchOption`an enum listing the search-time options for onigurumathe current set of options are:```pythonclass OnigSearchOption(enum.IntEnum):    NONE = ...    NOTBOL = ...    NOTEOL = ...    POSIX_REGION = ...    CHECK_VALIDITY_OF_STRING = ...    NOT_BEGIN_STRING = ...    NOT_BEGIN_POSITION = ...```#### `_Pattern.match(s: str, start: int = 0, flags: OnigSearchOption = OnigSearchOption.NONE) -&gt; Optional[_Match]`match a string using the pattern.  optionally set `start` to adjust the offsetwhich is searched from#### `_Pattern.search(s: str, start: int = 0, flags: OnigSearchOption = OnigSearchOption.NONE) -&gt; Optional[_Match]`search a string using the pattern.  optionally set `start` to adjust the offsetwhich is searched from#### `_Pattern.number_of_captures() -&gt; int`return the number of captures in the regex#### `_RegSet.search(s: str, start: int = 0, flags: OnigSearchOption = OnigSearchOption.NONE) -&gt; Tuple[int, Optional[_Match]]`search a string using the RegSet.  optionally set `start` to adjust the offsetwhich is searched fromthe leftmost regex index and match is returned or `(-1, None)` if there is nomatch#### `_Match.group(n: int = 0) -&gt; str`return the string of the matched group, defaults to 0 (the whole match)#### `_Match[n: int] -&gt; str`a shorthand alias for `_Match.group(...)`#### `_Match.start(n: int = 0) -&gt; int`return the character position of the start of the matched group, defaults to 0(the whole match)#### `_Match.end(n: int = 0) -&gt; int`return the character position of the end of the matched group, defaults to 0(the whole match)#### `_Match.span(n: int = 0) -&gt; int`return `(start, end)` character position of the matched group, defaults to 0(the whole match)#### `_Match.expand(s: str) -&gt; str`expand numeric groups in `s` via the groups in the match</longdescription>
</pkgmetadata>