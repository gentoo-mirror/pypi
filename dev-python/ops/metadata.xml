<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The ops library&lt;!-- The text below is also at the top of ops/__init__.py. Keep in sync! --&gt;The ops library is a Python framework ([`available on PyPI`](https://pypi.org/project/ops/)) for developingand testing [Juju](https://juju.is/) charms in a consistent way, using standard Python constructsto allow for clean, maintainable, and reusable code.A charm is an operator -- business logic encapsulated in a reusable softwarepackage that automates every aspect of an application's life.Charms written with ops support Kubernetes using Juju's &quot;sidecar charm&quot;pattern, as well as charms that deploy to Linux-based machines and containers.Charms should do one thing and do it well. Each charm drives a singleapplication and can be integrated with other charms to deliver a complexsystem. A charm handles creating the application in addition to scaling,configuration, optimisation, networking, service mesh, observability, and otherday-2 operations specific to the application.The ops library is part of the Charm SDK (the other part being Charmcraft).Full developer documentation for the Charm SDK is available athttps://juju.is/docs/sdk.To learn more about Juju, visit https://juju.is/docs/olm.## Pure PythonThe framework provides a standardised Python object model that represents theapplication graph, as well as an event-handling mechanism for distributedsystem coordination and communication.The latest version of ops requires Python 3.8 or above.Juju itself is written in Go for efficient concurrency even in largedeployments. Charms can be written in any language, however, we recommend usingPython with this framework to make development easier and more standardised.All new charms at Canonical are written using it.## Getting startedA package of operator code is called a charmed operator or simply &quot;charm&quot;.You'll use [charmcraft](https://juju.is/docs/sdk/install-charmcraft) toregister your charm name and publish it when you are ready. You can follow oneof our [charming tutorials](https://juju.is/docs/sdk/tutorials) to get startedwriting your first charm.## Testing your charmsThe framework provides a testing harness, so you can ensure that your charmdoes the right thing in different scenarios, without having to createa full deployment. Our [API documentation](https://ops.readthedocs.io/en/latest/#module-ops.testing)has the details, including this example:```pythonclass TestCharm(unittest.TestCase):    def test_foo(self):        harness = Harness(MyCharm)        self.addCleanup(harness.cleanup)  # always clean up after ourselves        # Instantiate the charm and trigger events that Juju would on startup        harness.begin_with_initial_hooks()        # Update charm config and trigger config-changed        harness.update_config({'log_level': 'warn'})        # Check that charm properly handled config-changed, for example,        # the charm added the correct Pebble layer        plan = harness.get_container_pebble_plan('prometheus')        self.assertIn('--log.level=warn', plan.services['prometheus'].command)```## Talk to usIf you need help, have ideas, or would just like to chat with us, reach out onthe Charmhub [Mattermost].We also pay attention to the Charmhub [Discourse].And of course you can deep dive into the [API reference].[Discourse]: https://discourse.charmhub.io/[API reference]: https://ops.readthedocs.io/[Mattermost]: https://chat.charmhub.io/charmhub/channels/charm-dev## Development of the frameworkSee [HACKING.md](HACKING.md) for details on dev environments, testing, and soon.</longdescription>
</pkgmetadata>