<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Facebook Business SDK for Python[![PyPI](https://img.shields.io/pypi/v/facebook-business)](https://pypi.org/project/facebook-business/)[![Build Status](https://img.shields.io/github/actions/workflow/status/facebook/facebook-python-business-sdk/ci.yml)](https://github.com/facebook/facebook-python-business-sdk/actions/workflows/ci.yml)[![License](https://img.shields.io/badge/license-Facebook%20Platform-blue.svg?style=flat-square)](https://github.com/facebook/facebook-python-business-sdk/blob/main/LICENSE.txt)### IntroductionThe Facebook &lt;a href=&quot;https://developers.facebook.com/docs/business-sdk&quot; target=&quot;_blank&quot;&gt;Business SDK&lt;/a&gt; is a one-stop-shop to help our partners better serve their businesses. Partners are using multiple Facebook API's to serve the needs of their clients. Adopting all these API's and keeping them up to date across the various platforms can be time consuming and ultimately prohibitive. For this reason Facebook has developed the Business SDK bundling many of its APIs into one SDK to ease implementation and upkeep. The Business SDK is an upgraded version of the Marketing API SDK that includes the Marketing API as well as many Facebook APIs from different platforms such as Pages, Business Manager, Instagram, etc.## Quick StartBusiness SDK &lt;a href=&quot;https://developers.facebook.com/docs/business-sdk/getting-started&quot; target=&quot;_blank&quot;&gt;Getting Started Guide&lt;/a&gt;Python is currently the most popular language for our third-party developers. `facebook_business` is a Python package that provides an interface between your Python application and &lt;a href=&quot;https://developers.facebook.com/docs/business-sdk/reference&quot; target=&quot;_blank&quot;&gt;Facebook's APIs within the Business SDK&lt;/a&gt;. This tutorial covers the basic knowledge needed to use the SDK and provides some exercises for the reader.**NOTE**: ``facebook_business`` package is compatible with Python 2 and 3!## Pre-requisites### Register An AppTo get started with the SDK, you must have an appregistered on &lt;a href=&quot;https://developers.facebook.com/&quot; target=&quot;_blank&quot;&gt;developers.facebook.com&lt;/a&gt;.To manage the Marketing API, please visit your&lt;a href=&quot;https://developers.facebook.com/apps/&lt;YOUR APP ID&gt;/dashboard&quot;&gt; App Dashboard &lt;/a&gt;and add the &lt;b&gt;Marketing API&lt;/b&gt; product to your app.**IMPORTANT**: For security, it is recommended that you turn on 'App SecretProof for Server API calls' in your app's Settings-&gt;Advanced page.### Obtain An Access TokenWhen someone connects with an app using Facebook Login and approves the requestfor permissions, the app obtains an access token that provides temporary, secureaccess to Facebook APIs.An access token is an opaque string that identifies a User, app, or Page.For example, to access the Marketing API, you need to generate a user access tokenfor your app and ask for the ``ads_management`` permission; to access Pages API,you need to generate a Page access token for your app and ask for the ``manage_page`` permission.Refer to our&lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/access-tokens&quot; target=&quot;_blank&quot;&gt;Access Token Guide&lt;/a&gt; to learn more.For now, we can use the&lt;a href=&quot;https://developers.facebook.com/tools/explorer&quot; target=&quot;_blank&quot;&gt;Graph Explorer&lt;/a&gt;to get an access token.## Install packageThe easiest way to install the SDK is via ``pip`` in your shell.**NOTE**: For Python 3, use ``pip3`` and ``python3`` instead.**NOTE**: Use ``sudo`` if any of these complain about permissions. (This mighthappen if you are using a system installed Python.)If you don't have pip:```easy_install pip```Now execute when you have pip:```pip install facebook_business```If you care for the latest version instead of a possibly outdated version in the&lt;a href=&quot;https://pypi.python.org&quot; target=&quot;_blank&quot;&gt;pypi.python.org&lt;/a&gt; repository,&lt;a href=&quot;https://github.com/facebook/facebook-python-business-sdk&quot;&gt;check out therepository from GitHub or download a release tarball&lt;/a&gt;. Once you've got thepackage downloaded and unzipped, install it:```python setup.py install```Great, now you are ready to use the SDK!## Bootstrapping### Create test.pyCreate a test.py file with the contents below (assuming your system is using python 2.7 and installed under /opt/homebrew. Update to your proper python location.):```pythonimport syssys.path.append('/opt/homebrew/lib/python2.7/site-packages') # Replace this with the place you installed facebookads using pipsys.path.append('/opt/homebrew/lib/python2.7/site-packages/facebook_business-3.0.0-py2.7.egg-info') # same as abovefrom facebook_business.api import FacebookAdsApifrom facebook_business.adobjects.adaccount import AdAccountmy_app_id = 'your-app-id'my_app_secret = 'your-appsecret'my_access_token = 'your-page-access-token'FacebookAdsApi.init(my_app_id, my_app_secret, my_access_token)my_account = AdAccount('act_&lt;your-adaccount-id&gt;')campaigns = my_account.get_campaigns()print(campaigns)```### Test Your InstallTest your install with the following command:```pythonpython test.py```You should see the result in your terminal window. If it complains about an expired token, repeat the process for requesting a Page Access Token described in the prerequisites section above.**NOTE**: We shall use the objects module throughout the rest of the tutorial. You canalso use the individual class files under adobjects directly.## Understanding CRUDThe SDK implements a CRUD (create, read, update, delete) design. Objectsrelevant to exploring the graph are located in the objects module of thefacebook_business package.All objects on the graph are instances of ``AbstractObject``. Some objects canbe directly queried and thus are instances of ``AbstractCrudObject`` (a subclassof ``AbstractObject``). Both these abstract classes are located in``facebook_business.adobjects``.There is and additional folder ``adobjects`` under facebook_business. Under this you will see a file for every ad objectin our Marketing API. These files are autogenerated from our API and thereforeare close in parity with what API has to offer. Based on what CRUD operations can beperformed on each object, you will see the presence of the following methods in them:* ``api_get``* ``api_update``* ``api_delete``* ``create_xxx``* ``get_xxx``For example, Campaign has all these methods but AdAccount does not. Read theMarketing API documentation for more information about&lt;a href=&quot;https://developers.facebook.com/docs/marketing-api/reference&quot; target=&quot;_blank&quot;&gt;how different adobjects are used&lt;/a&gt;.There are some deprecated function in ``AbstractCrudObject``, like* ``remote_create``* ``remote_read``* ``remote_update``* ``remote_delete``Please try to stop use them since we may plan to deprecated them soon.## Exploring the GraphThe way the SDK abstracts the API is by defining classes that represent objectson the graph. These class definitions and their helpers are located in``facebook_business.adobjects``.### Initializing ObjectsLook at ``AbstractObject``'s and ``AbstractCrudObject``'s ``__init__`` methodfor more information. Most objects on the graph subclass from one of the two.When instantiating an ad object, you can specify its id if it already exists bydefining ``fbid`` argument. Also, if you want to interact with theAPI using a specific api object instead of the default, you can specify the``api`` argument.### EdgesLook at the methods of an object to see what associations over which we caniterate. For example an ``User`` object has a method ``get_ad_accounts`` whichreturns an iterator of ``AdAccount`` objects.### Ad AccountMost ad-related operations are in the context of an ad account. You can go to&lt;a href=&quot;https://www.facebook.com/ads/manage&quot;&gt;Ads Manager&lt;/a&gt; to see accountsfor which you have permission. Most of you probably have a personal account.Let's get all the ad accounts for the user with the given access token. I onlyhave one account so the following is printed:```python&gt;&gt;&gt; from facebook_business.adobjects.user import User&gt;&gt;&gt; me = adobjects.User(fbid='me')&gt;&gt;&gt; my_accounts = list(me.get_ad_accounts())&gt;&gt;&gt; print(my_accounts)[{   'account_id': u'17842443', 'id': u'act_17842443'}]&gt;&gt;&gt; type(my_accounts[0])&lt;class 'facebook_business.adobjects.AdAccount'&gt;```**WARNING**: We do not specify a keyword argument ``api=api`` when instantiatingthe ``User`` object here because we've already set the default api whenbootstrapping.**NOTE**: We wrap the return value of ``get_ad_accounts`` with ``list()``because ``get_ad_accounts`` returns an ``EdgeIterator`` object (located in``facebook_business.adobjects``) and we want to get the full list right away instead ofhaving the iterator lazily loading accounts.For our purposes, we can just pick an account and do our experiments in itscontext:```python&gt;&gt;&gt; my_account = my_accounts[0]```Or if you already know your account id:```python&gt;&gt;&gt; my_account = adobjects.AdAccount('act_17842443')```## CreateLet's create a campaign. It's in the context of the account, i.e. its parentshould be the account.```pythonfields = []params = {  adobjects.Campaign.Field.name : 'Conversions Campaign',  adobjects.Campaign.Field.configured_status: adobjects.Campaign.Status.paused,}campaign = AdAccount(id).create_campaign(fields, params)```Then we specify some details about the campaign. To figure out what propertiesto define, you should look at the available fields of the object (located in``Campaign.Field``) and also look at the ad object's documentation (e.g.&lt;a href=&quot;https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group&quot;&gt;Campaign&lt;/a&gt;).**NOTE**: To find out the fields, look at the individual class file under adobjectsdirectory.If there's an error, an exception will be raised. Possible exceptions and theirdescriptions are listed in ``facebook_business.exceptions``.## ReadWe can also read properties of an object from the api assuming that the objectis already created and has a node path. Accessing properties of an object issimple since ``AbstractObject`` implements the ``collections.MutableMapping``.You can access them just like accessing a key of a dictionary:```python&gt;&gt;&gt; print(my_account){'account_id': u'17842443', 'id': u'act_17842443'}&gt;&gt;&gt; my_account = my_account.api_get(fields=[adobjects.AdAccount.Field.amount_spent])&gt;&gt;&gt; print(my_account[adobjects.AdAccount.Field.amount_spent]){'amount_spent': 21167, 'account_id': u'17842443', 'id': u'act_17842443'}```## UpdateTo update an object, we can modify its properties and then call the``api_update`` method to sync the object with the server. Let's correct thetypo &quot;Campain&quot; to &quot;Campaign&quot;:```python&gt;&gt;&gt; campaign.api_update(fields=[], params={adobjects.Campaign.Field.name:&quot;Potato Campaign&quot;})```You can see the results in ads manager.## DeleteIf we decide we don't want the campaign we created anymore:```pythoncampaign.api_delete()```## Useful Arguments### MULTIPLE ACCESS TOKENSThroughout the docs, the method FacebookAdsApi.init is called before making any API calls. Thismethod set up a default FacebookAdsApi object to be used everywhere. That simplifies the usagebut it's not feasible when a system using the SDK will make calls on behalf of multiple users.The reason why this is not feasible is because each user should have its own FacebookSession, with its ownaccess token, rather than using the same session for every one. Each session should be used to create aseparate FacebookAdsApi object. See example below:```pythonmy_app_id = '&lt;APP_ID&gt;'my_app_secret = '&lt;APP_SECRET&gt;'my_access_token_1 = '&lt;ACCESS_TOKEN_1&gt;'my_access_token_2 = '&lt;ACCESS_TOKEN_2&gt;'proxies = {'http': '&lt;HTTP_PROXY&gt;', 'https': '&lt;HTTPS_PROXY&gt;'} # add proxies if neededsession1 = FacebookSession(    my_app_id,    my_app_secret,    my_access_token_1,    proxies,)session2 = FacebookSession(    my_app_id,    my_app_secret,    my_access_token_2,    proxies,)api1 = FacebookAdsApi(session1)api2 = FacebookAdsApi(session2)```In the SDK examples, we always set a single FacebookAdsApi object as the default one.However, working with multiples access_tokens, require us to use multiples apis. We may set a defaultapi for a user, but, for the other users,  we shall use its the api object as a param. In the example below,we create two AdUsers, the first one using the default api and the second one using its api object:```pythonFacebookAdsApi.set_default_api(api1)me1 = AdUser(fbid='me')me2 = AdUser(fbid='me', api=api2)```Another way to create the same objects from above would be:```pythonme1 = AdUser(fbid='me', api=api1)me2 = AdUser(fbid='me', api=api2)```From here, all the following workflow for these objects remains the same. The only exceptions arethe classmethods calls, where we now should pass the api we want to use as the last parameteron every call. For instance, a call to the Aduser.get_by_ids method should be like this:```pythonsession = FacebookSession( my_app_id, my_app_secret, my_access_token_1, proxies,)api = FacebookAdsApi(session1)Aduser.get_by_ids(ids=['&lt;UID_1&gt;', '&lt;UID_2&gt;'], api=api)```### CRUDAll CRUD calls support a ``params`` keyword argument which takes a dictionarymapping parameter names to values in case advanced modification is required. Youcan find the list of parameter names as attributes of``{your object class}.Field``. Under the Field class there may be other classeswhich contain, as attributes, valid fields of the value of one of the parentproperties.``api_update`` and ``create_xxx`` support a ``files`` keyword argumentwhich takes a dictionary mapping file reference names to binary opened fileobjects.``api_get`` supports a ``fields`` keyword argument which is a convenient wayof specifying the 'fields' parameter. ``fields`` takes a list of fields whichshould be read during the call. The valid fields can be found as attributes ofthe class Field.### EdgesWhen initializing an ``EdgeIterator`` or when calling a method such as``AdAccount.get_ad_campaigns``:* You can specify a ``fields`` argument which takes a list of fields to read forthe objects being read.* You can specify a ``params`` argument that can help you specify or filter theedge more precisely.## Batch CallingIt is efficient to group together large numbers of calls into one http request.The SDK makes this process simple. You can group together calls into an instanceof ``FacebookAdsApiBatch`` (available in facebook_business.api). To easily get onefor your api instance:```pythonmy_api_batch = api.new_batch()```Calls can be added to the batch instead of being executed immediately:```pythoncampaign.api_delete(batch=my_api_batch)```Once you're finished adding calls to the batch, you can send off the request:```pythonmy_api_batch.execute()```Please follow &lt;a href=&quot;https://developers.facebook.com/docs/graph-api/making-multiple-requests&quot;&gt;batch call guidelines in the Marketing API documentation&lt;/a&gt;. There are optimalnumbers of calls per batch. In addition, you may need to watch out that for ratelimiting as a batch call simply improves network performance and each call doescount individually towards rate limiting.## ExceptionsSee ``facebook_business.exceptions`` for a list of exceptions which may be thrown bythe SDK.## Tests### Unit testsThe unit tests don't require an access token or network access. Run themwith your default installed Python as follows:```python -m facebook_business.test.unit```You can also use tox to run the unit tests with multiple Python versions:```sudo apt-get install python-tox  # Debian/Ubuntusudo yum install python-tox      # Fedoratox --skip-missing-interpreters```You can increase interpreter coverage by installing additional versions ofPython. On Ubuntu you can use the[deadsnakes PPA](https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes).On other distributions you can[build from source](https://www.python.org/downloads/) and then use`sudo make altinstall` to avoid conflicts with your system-installedversion.## ExamplesExamples of usage are located in the ``examples/`` folder.## DebugIf this SDK is not working as expected, it may be either a SDK issue or API issue.This can be identified by constructing a raw cURL request and seeing if the response is as expectedfor example:```pythonfrom facebook_business.adobjects.page import Pagefrom facebook_business.api import FacebookAdsApiFacebookAdsApi.init(access_token=access_token, debug=True)page = Page(page_id).api_get(fields=fields,params=params)```When running this code, this cURL request will be printed to the console as:```curl -X 'GET' -H 'Accept: */*' -H 'Accept-Encoding: gzip, deflate' -H 'Connection: keep-alive' -H 'User-Agent: fbbizsdk-python-v3.3.1' 'https://graph.facebook.com/v3.3/&lt;pageid&gt;/?access_token=&lt;access_token&gt;&amp;fields=name%2Cbirthday%2Cphone'```## SDK CodegenOur SDK is autogenerated from [SDK Codegen](https://github.com/facebook/facebook-business-sdk-codegen). If you want to learn more about how our SDK code is generated, please check this repository.## IssueSince we want to handle bugs more efficiently, we've decided to close issue reporting in Github and move to our dedicated bug reporting channel.If you encounter a bug with Business SDK (Python), please report the issue at [our developer bug reporting channel](https://developers.facebook.com/support/bugs/).## LicenseFacebook Business SDK for Python is licensed under the LICENSE file in the root directory of this source tree.</longdescription>
</pkgmetadata>