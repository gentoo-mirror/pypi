<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># torchlie&lt;p align=&quot;center&quot;&gt;    &lt;!-- License --&gt;    &lt;a href=&quot;https://github.com/facebookresearch/theseus/blob/main/torchlie/LICENSE&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg&quot; alt=&quot;License&quot; height=&quot;20&quot;&gt;    &lt;/a&gt;    &lt;!-- pypi --&gt;    &lt;a href=&quot;https://pypi.org/project/torchlie/&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/torchlie&quot; alt=&quot;pypi&quot;        heigh=&quot;20&quot;&gt;    &lt;!-- Downloads counter --&gt;    &lt;a href=&quot;https://pypi.org/project/torchlie/&quot;&gt;        &lt;img src=&quot;https://pepy.tech/badge/torchlie&quot; alt=&quot;PyPi Downloads&quot; height=&quot;20&quot;&gt;    &lt;/a&gt;    &lt;!-- Python --&gt;    &lt;a href=&quot;https://www.python.org/downloads/release/&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10-blue.svg&quot; alt=&quot;Python&quot; height=&quot;20&quot;&gt;    &lt;/a&gt;    &lt;!-- Pre-commit --&gt;    &lt;a href=&quot;https://github.com/pre-commit/pre-commit&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/pre--commit-enabled-green?logo=pre-commit&amp;logoColor=white&quot; alt=&quot;pre-commit&quot; height=&quot;20&quot;&gt;    &lt;/a&gt;    &lt;!-- Black --&gt;    &lt;a href=&quot;https://github.com/psf/black&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; alt=&quot;black&quot; height=&quot;20&quot;&gt;    &lt;/a&gt;    &lt;!-- PRs --&gt;    &lt;a href=&quot;https://github.com/facebookresearch/theseus/blob/main/CONTRIBUTING.md&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-green.svg&quot; alt=&quot;PRs&quot; height=&quot;20&quot;&gt;    &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;i&gt;A library for differentiable Lie groups&lt;/i&gt;&lt;/p&gt;-----## Getting Started### Prerequisites- We *strongly* recommend you install torchlie in a venv or conda environment with Python 3.8-3.10.- torchlie requires `torch` installation. To install for your particular CPU/CUDA configuration, follow the instructions in the PyTorch [website](https://pytorch.org/get-started/locally/).### Installing- **pypi**    ```bash    pip install torchlie    ```- #### **From source**    The simplest way to install torchlie from source is by running the following    ```bash    git clone https://github.com/facebookresearch/theseus.git &amp;&amp; cd theseus/torchlie    pip install -e .    ```    If you are interested in contributing to torchlie, also install    ```bash    pip install -r ../requirements/dev.txt    pre-commit install    ```    and follow the more detailed instructions in [CONTRIBUTING](https://github.com/facebookresearch/theseus/blob/main/CONTRIBUTING.md).## ExampleThe example below is also available as a [script](https://github.com/facebookresearch/theseus/blob/main/examples/torchlie_api.py).```pythonimport torchimport torchlie as lieimport torchlie.functional as lieFbatch_size = 5# ### Lie Tensor creation functionsg1 = lie.SE3.rand(batch_size, requires_grad=True)print(f&quot;Created SE3 tensor with shape {g1.shape}&quot;)g2 = g1.clone()# Identity elementi1 = lie.SO3.identity(2)i2 = lie.SE3.identity(2)print(&quot;SO3 identity&quot;, i1, i1.shape)print(&quot;SE3 identity&quot;, i2, i2.shape)# Indexingg1_slice = g1[2:4]assert g1_slice.shape == (2, 3, 4)torch.testing.assert_close(g1_slice._t, g1._t[2:4])  # type: ignoretry:    bad = g1[3, 2]except NotImplementedError:    print(&quot;INDEXING ERROR: Can only slice the first dimension for now.&quot;)# ## Different constructorsg3_data = lieF.SO3.rand(5, requires_grad=True)  # this is a regular tensor with SO3 data# Can create from a tensor as long as it's consistent with the desired ltypeg3 = lie.from_tensor(g3_data, lie.SO3)  # keeps grad historyassert g3.grad_fn is not Nonetry:    x = lie.from_tensor(torch.zeros(1, 3, 3), lie.SO3)except ValueError as e:    print(f&quot;ERROR: {e}&quot;)def is_shared(t1, t2):  # utility to check if memory is shared    return t1.storage().data_ptr() == t2.storage().data_ptr()# # Let's check different copy vs no-copy options# -- lie.SO3() lie.SE3()g3_leaf = lie.SO3(g3_data)  # creates a leaf tensor and copies dataassert g3_leaf.grad_fn is Noneassert not is_shared(g3_leaf, g3_data)# -- lie.LieTensor() constructor is equivalent to lie.SO3()g3_leaf_2 = lie.LieTensor(g3_data, lie.SO3)assert g3_leaf_2.grad_fn is Noneassert not is_shared(g3_leaf_2, g3_data)# -- as_lietensor()g4 = lie.as_lietensor(g3_data, lie.SO3)assert is_shared(g3_data, g4)  # shares storage if possibleassert g4.grad_fn is not None  # result is not a leaf tensor# Calling with a LieTensor returns the same tensor...g5 = lie.as_lietensor(g3, lie.SO3)assert g5 is g3# ... unless dtype or device is differentg5_double = lie.as_lietensor(g3, lie.SO3, dtype=torch.double)assert g5_double is not g3assert not is_shared(g5_double, g3)# -- cast()g6 = lie.cast(g3_data, lie.SO3)  # alias for as_lietensor()assert is_shared(g3_data, g6)# -- LieTensor.new()g7 = g3.new_lietensor(g3_data)assert not is_shared(g3_data, g7)  # doesn't share storageassert g7.grad_fn is None  # creates a leaf# ### Lie operationsv = torch.randn(batch_size, 6)# Exponential and logarithmic mapout1 = lie.SE3.exp(v)  # also lie.exp(v, g1.ltype)print(f&quot;Exp map returns a {type(out1)}.&quot;)out2 = g1.log()  # also lie.log(g1)print(f&quot;Log map returns a {type(out2)}.&quot;)# Inverseout1 = g1.inv()  # also lie.inv(g1)# Compose# also lie.compose(g1, g2)out1 = g1.compose(g2)  # type: ignore# Differentiable jacobiansjacs, out = g1.jcompose(g2)  # type: ignoreprint(&quot;Jacobians output is a 2-tuple.&quot;)print(&quot;    First element is a list of jacobians, one per group argument.&quot;)print(f&quot;    For compose this means length {len(jacs)}.&quot;)print(&quot;    The second element of the tuple is the result of the operation itself.&quot;)print(f&quot;    Which for compose is a {type(out).__name__}.&quot;)# Other options:#   * adj(), hat(), vee(), retract(), local(),#   * Jacobians: jlog(), jinv(), jexp()# ### Overriden operators# Composeout2 = g1 * g2torch.testing.assert_close(out1, out2, check_dtype=True)# Transfrom from (from local to world coordinate frame)p = torch.randn(batch_size, 3)pt1 = g1.transform_from(p)pt2 = g1 @ ptorch.testing.assert_close(pt1, pt2)# For convenience, we provide a context to drop all ltype checks, and operate# on raw tensor data. However, keep in mind that this is prone to error.# Here is one example of how this works.with lie.as_euclidean():    gg1 = torch.sin(g1)# The above is the same as this next call, but the context might be more convenient# if one is doing similar hacky stuff on several group objects.gg2 = torch.sin(g1._t)torch.testing.assert_close(gg1, gg2)print(&quot;Success: We just did some ops that make no sense for SE3 tensors.&quot;)# ### Lie tensors can also be used as leaf tensors for torch optimizersg1 = lie.SE3.rand(1, requires_grad=True)g2 = lie.SE3.rand(1)opt = torch.optim.Adam([g1], lr=0.1)for i in range(10):    opt.zero_grad()    d = g1.local(g2)    loss = torch.sum(d**2)    loss.backward()    opt.step()    print(f&quot;Iter {i}. Loss: {loss.item(): .3f}&quot;)```## Citing torchlieIf you use torchlie in your work, please cite the [paper](https://arxiv.org/abs/2207.09442) with the BibTeX below.```bibtex@article{pineda2022theseus,  title   = {{Theseus: A Library for Differentiable Nonlinear Optimization}},  author  = {Luis Pineda and Taosha Fan and Maurizio Monge and Shobha Venkataraman and Paloma Sodhi and Ricky TQ Chen and Joseph Ortiz and Daniel DeTone and Austin Wang and Stuart Anderson and Jing Dong and Brandon Amos and Mustafa Mukadam},  journal = {Advances in Neural Information Processing Systems},  year    = {2022}}```## Licensetorchlie is MIT licensed. See the [LICENSE](https://github.com/facebookresearch/theseus/blob/main/torchlie/LICENSE) for details.## Additional Information- Join the community on [Github Discussions](https://github.com/facebookresearch/theseus/discussions) for questions and sugesstions.- Use [Github Issues](https://github.com/facebookresearch/theseus/issues/new/choose) for bugs and features.- See [CONTRIBUTING](https://github.com/facebookresearch/theseus/blob/main/CONTRIBUTING.md) if interested in helping out.</longdescription>
</pkgmetadata>