<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hipal Mixin ScrudLibreria para generar rutas generales para una crud basica con el orm de SQLAlchemyInstalacion---------```pip install hipal-mixin-scrud```Como usar---------Para usar la libreria se debe importar la instancia &quot;MixinCrud&quot; para luego en su constructor enviarle los argumentos necesarios.ejemplo:```from schemas import UserSchema, CreateUserSchema, UpdateUserSchemafrom db.db_session import db_sessionfrom models.user import Userfrom hipal_mixin_scrud.mixin import MixinCrudusers_router = MixinCrud(    schema=UserSchema,    db_session=db_session,    model=User,    prefix=&quot;/users&quot;,    create_schema=CreateUserSchema,    update_schema=UpdateUserSchema)```donde:- **schema**: Sera el schema principal para listar o paginar los datos- **db_session**: La session de la base de datos otorgada por el motor implementado mediante sqlalchemy- **model**: El modelo con el que se hara la crud basica- **prefix**: La raiz de los endpoints- **create_schema**: El schema con el que se mapearan los datos para crear los registros en el modelo- **update_schema**: El schema con el que se mapearan los datos para la actualizacion de un registro existente del modeloUso Avanzado---------Si se requiere tener mas control de las rutas generadas, se tiene lo siguiente:Para especificar que rutas se requieren y cuales no, se hace uso de 5 parametros:- has_update- has_get_list- has_delete_one- has_create- has_get_onePor defecto todas estan en &quot;True&quot;, y reciben booleanos para indicar si se genera la ruta o no:```from schemas import UserSchema, CreateUserSchema, UpdateUserSchemafrom db.db_session import db_sessionfrom models.user import Userfrom hipal_mixin_scrud.mixin import MixinCrudusers_router = MixinCrud(    schema=UserSchema,    db_session=db_session,    model=User,    prefix=&quot;/users&quot;,    create_schema=CreateUserSchema,    update_schema=UpdateUserSchema,    has_update=False,    has_get_list=True,    has_delete_one=False,    has_create=False,    has_get_one=True,)```Para especificar una &quot;query prefija&quot; es decir, una query por defecto que se concatenara con la query final en toda la CRUD principal, hacemos uso del parametro: **query**, Ejemplo:```from fastapi import Requestfrom schemas import UserSchema, CreateUserSchema, UpdateUserSchemafrom db.db_session import db_sessionfrom models.user import Userfrom hipal_mixin_scrud.mixin import MixinCruddef default_query(    request: Request,):    account_id = request.headers.get(&quot;account_id&quot;)    profile_id = request.headers.get(&quot;profile_id&quot;)    query = db_session.query(User).filter(User.id &gt; 0)    return queryusers_router = MixinCrud(    schema=UserSchema,    db_session=db_session,    model=User,    prefix=&quot;/users&quot;,    create_schema=CreateUserSchema,    update_schema=UpdateUserSchema,    query=default_query)```El parametro query es opcional, y en caso de que se requiera recibira una funcion que como obligacion debera recibir por argument &quot;request&quot; y tendra que devolver la query que se requiera.Paginaci√≥n---------Para generar una paginacion es exactamente igual a lo dicho anteriormente, Sin embargo, recibe algunos parametros opcionales los cuales sirven para:- **offset**: Recibe el numero de la posicion del registro donde se requiere empezar a ver - **limit**: Limite de registros a visualizar- **search**: Lista de campos con su valor a buscar separados por ; ejemplo: name=alan;company=Gooogle- **sort**: ASC o DESC para especificar si se requiere el orden descendente o ascendente- **sort_field**: Nombre del campo por el cual se requiere ordenarAdicionalmente se podra user &quot;users_router&quot; para generar las rutas como generalmente las conocemos:```@users_router.get(&quot;/me&quot;, response_model=UserSchema)def endpoint() -&gt; UserSchema:    return {&quot;msg&quot;:&quot;prueba&quot;}```</longdescription>
</pkgmetadata>