<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sphinx-diagramsThis is a rough (incomplete, but working) Sphinx extension for[Diagrams](https://github.com/mingrammer/diagrams). Please refer to the [openissue for Sphinx support](https://github.com/mingrammer/diagrams/issues/2) forthe latest up-to-date version when officially supported.## Usage### Install```bash$ pip3 install sphinx-diagrams```### Adding the extension`conf.py````conf.pyextensions = [    &quot;sphinx_diagrams&quot;,]```### Adding the diagram (inline)The simplest way is to use `SphinxDiagram` and inline the code in your document.Consider using an external diagram/python script (see below) as it has muchshorter iteration loop than running sphinx and most likely better supported byyour editor or IDE.`source/index.rst````rstDiagram - Deployment====================.. diagrams::  from diagrams import Cluster  from diagrams.k8s.compute import Deployment  from sphinx_diagrams import SphinxDiagram  with SphinxDiagram(title=&quot;GKE&quot;):      with Cluster(&quot;GCP Project&quot;):          KubernetesEngine(&quot;Primary Cluster&quot;)```### Adding a diagram (external python code)#### Write the code`source/diagrams_infrastructure.py`You can still use `SphinxDiagram` in your own code. This class handles argumentslike `:filename:` and visibility (showing the diagram via `xdg-open/open`) foryou.```pythonfrom diagrams import Clusterfrom diagrams.k8s.compute import Deploymentfrom sphinx_diagrams import SphinxDiagramwith SphinxDiagram(title=&quot;GKE&quot;):    with Cluster(&quot;GCP Project&quot;):        KubernetesEngine(&quot;Primary Cluster&quot;)```Alternatively, you can use `Diagram` (from `diagrams`) directly. Note that theextension will pass two arguments to your diagram script. The first one is the`filename` as `sys.argv[1]` it expects (it needs to match the one outputted by`diagrams`) and the value `false` as `sys.argv[2]`. The later can be used totell your script not to show (open) the generate diagram.```pythonimport sysfrom diagrams import Diagram, Clusterfrom diagrams.gcp.compute import KubernetesEnginewith Diagram(&quot;GKE&quot;, filename=sys.argv[1], show=sys.argv[2].lower() == 'true'):    with Cluster(&quot;GCP Project&quot;):        KubernetesEngine(&quot;Primary Cluster&quot;)```#### Referencing the diagram`source/index.rst````rstDiagram - Deployment====================.. diagrams:: diagrams_infrastructure.py  :filename: diagram-deployment.png```If using `SphinxDiagram` (above) or if the filename of the diagram script is thesame as the output file (e.g.: `diagrams_infrastructure.py =&gt;diagrams_infrastructure.png`) then the `:filename:` is not necessary.```rstDiagram - Deployment====================.. diagrams:: diagrams_infrastructure.py```## CreditThis code is based on[sphinx.graphviz](https://github.com/buildthedocs/sphinx.graphviz/).SPDX-License-Identifier: BSD-2-Clause</longdescription>
</pkgmetadata>