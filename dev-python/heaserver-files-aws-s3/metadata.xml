<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HEA Server AWS S3 Bucket Files Microservice[Research Informatics Shared Resource](https://risr.hci.utah.edu), [Huntsman Cancer Institute](https://healthcare.utah.edu/huntsmancancerinstitute/),Salt Lake City, UTThe HEA Server AWS S3 Bucket Files Microservice manages files in AWS S3 buckets.## Version 1Initial release.## Runtime requirements* Python 3.10## Development environment### Build requirements* Any development environment is fine.* On Windows, you also will need:    * Build Tools for Visual Studio 2019, found at https://visualstudio.microsoft.com/downloads/. Select the C++ tools.    * git, found at https://git-scm.com/download/win.* On Mac, Xcode or the command line developer tools is required, found in the Apple Store app.* Python 3.10: Download and install Python 3.10 from https://www.python.org, and select the options to install for all users and addPython to your environment variables. The install for all users option will help keep you from accidentally installingpackages into your Python installation's site-packages directory instead of to your virtualenv environment, describedbelow.* Create a virtualenv environment using the `python -m venv &lt;venv_directory&gt;` command, substituting `&lt;venv_directory&gt;`with the directory name of your virtual environment. Run `source &lt;venv_directory&gt;/bin/activate` (or `&lt;venv_directory&gt;/Scripts/activate` on Windows) to activate the virtualenvironment. You will need to activate the virtualenv every time before starting work, or your IDE may be able to dothis for you automatically. **Note that PyCharm will do this for you, but you have to create a new Terminal panelafter you newly configure a project with your virtualenv.*** From the project's root directory, and using the activated virtualenv, run `pip install wheel` followed by  `pip install -r requirements_dev.txt`. **Do NOT run `python setup.py develop`. It will break your environment.**### Running testsRun tests with the `pytest` command from the project root directory. To improve performance, run tests in multipleprocesses with `pytest -n auto`.### Running integration tests* Install Docker* On Windows, install pywin32 version &gt;= 223 from https://github.com/mhammond/pywin32/releases. In your venv, make sure that`include-system-site-packages` is set to `true`.* A compatible heaserver-registry Docker image must be available.* Run tests with the `pytest integrationtests` command from the project root directory.### Trying out the APIsThis microservice has Swagger3/OpenAPI support so that you can quickly test the APIs in a web browser. Do the following:* Install Docker, if it is not installed already.* Have a heaserver-registry docker image in your Docker cache. You can generate one using the Dockerfile in the  heaserver-registry project.* Run the `run-swaggerui.py` file in your terminal. This file contains some test objects that are loaded into a MongoDB  Docker container.* Go to http://127.0.0.1:8080/docs in your web browser.Once `run-swaggerui.py` is running, you can also access the APIs via `curl` or other tool. For example, in WindowsPowerShell, execute:```Invoke-RestMethod -Uri http://localhost:8080/awss3files/root/items -Method GET -Headers @{'accept' = 'application/json'}````In MacOS or Linux, the equivalent command is:```curl -X GET http://localhost:8080/awss3files/root/items -H 'accept: application/json'```### Packaging and releasing this projectSee the [RELEASING.md](RELEASING.md) file for details.</longdescription>
</pkgmetadata>