<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SirqleSurreal DB with Python wrapper for [surrealdb.py](https://github.com/surrealdb/surrealdb.py) which makes it easy to write SurrealQL queries in Python.Install with:```shpip install sirqle```Usage:```pythonfrom sirqle.query import Config, Queryconfig = Config(        url = &quot;localhost:8000&quot;,        namespace = &quot;test&quot;,        database = &quot;test&quot;,        username = &quot;test&quot;,        password = &quot;test&quot;,)my_query = Query(config=config)table_name = &quot;person&quot;cont = {    &quot;name&quot;: &quot;Tobie&quot;,    &quot;company&quot;: &quot;SurrealDB&quot;,    &quot;skills&quot;: [&quot;Rust&quot;, &quot;Go&quot;, &quot;JavaScript&quot;],}my_query.create(table_name).content(cont)response = await my_query.execute()# the resultresponse = [{'company': 'SurrealDB', 'id': 'person:it2e579rij23zu0iswk4', 'name': 'Tobie', 'skills': ['Rust', 'Go', 'JavaScript']}]```## Config ModuleThe `Config` class is used to configure the connection the database. It uses the `SurrealHTTP` client and requires the following arguments depending on the desired method:&gt; 1. Manually enter the parameters- `url` : URL of the database- `namespace` : The namespace of the database- `database` : The name of the database- `username` : The access username- `password` : The access password&gt; 2. Pass a previous defined client- `client` : an `SurrealHTTP` client from `surrealdb.py`&gt; 3. Load the parameters from a file- `env_file`: the name of the env file. Defaults to `.db_conf`.## Query ModuleThe Query module aims to extend the standard SurrealQL and make it more Python friendly. Internally it constructs a SurrealQL string from method chaining and sends the query to the database.### Initialize the query```pythonquery = Query(config)```### Create examplesCreate a new entry:```sqlCREATE person CONTENT {name: 'Tobie',company: 'SurrealDB',skills: ['Rust', 'Go', 'JavaScript']};```becomes```pythontable_name = &quot;person&quot;cont = {    &quot;name&quot;: &quot;Tobie&quot;,    &quot;company&quot;: &quot;SurrealDB&quot;,    &quot;skills&quot;: [&quot;Rust&quot;, &quot;Go&quot;, &quot;JavaScript&quot;],}create_query.create(table_name).content(cont)```### Insert example```sqlINSERT INTO person (name, company, founded) VALUES ('John', 'SurrealDB', '2021-09-10');```becomes```pythontable_name = &quot;person (name, company, founded)&quot;data = tuple([&quot;John&quot;, &quot;SurrealDB&quot;, &quot;2021-09-10&quot;])insert_query.insert(table_name, values=data)```### Select example```sqlSELECT * FROM person;```becomes```pythonquery.select(&quot;*&quot;).from_(&quot;person&quot;)```&gt; **Execution**To execute the query run `res = await query.execute()`, where `res` is the result of the query.### Custom query exampleIf you need something more complex than the basic operations, you can directly pass an SurrealQL query as a string:&gt; This query creates a temporary entry in the table `Topic` where we hash the values of `topic_label` and `topic_source`, returns the hash value and then delete the table.```pythontable_name = &quot;Topic&quot;topic_label = &quot;SurrealDB is awesome&quot;topic_source = &quot;My personal knowledge&quot;my_query.custom( f&quot;create {table_name} content&quot;                + f&quot; {{words: {topic_label}, source: {topic_source}}}&quot;                + f&quot; return crypto::md5(string::concat($this.words, $this.source));&quot;                + f&quot; delete from {table_name};&quot;)response = await my_query.execute()response = {&quot;crypto::md5&quot;: &quot;8f23a9630e18d525946740e5498798be&quot;}```</longdescription>
</pkgmetadata>