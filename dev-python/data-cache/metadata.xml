<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://img.shields.io/pypi/v/data-cache)](https://pypi.org/project/data-cache/)[![Python Versions](https://img.shields.io/pypi/pyversions/data-cache)](https://pypi.org/project/data-cache/)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![](https://github.com/statnett/data_cache/workflows/Tests/badge.svg)](https://github.com/statnett/data_cache/actions?query=workflow%3ATests)[![codecov](https://codecov.io/gh/statnett/data_cache/branch/master/graph/badge.svg)](https://codecov.io/gh/statnett/data_cache)# Data cacheWorks by hashing the combinations of arguments of a function call withthe function name to create a unique id of a table retrieval.  Ifthe function call is new the original function will be called, and theresulting tables(s) will be stored in a HDFStore indexed by thehashed key.  Next time the function is called with the same args thetables(s) will be retrieved from the store instead of executing thefunction.The hashing of the arguments is done by first applying str() on theargument, and then taking th md5 hash of the combination of these argstogether with the function name.  This means that if a argument forsome reason does not have a str representation the key generation willfail.  To omit this issue one can specify which arguments the cacheshould consider such that 'un-stringable' arguments are skipped.  Thisfunctionality is also used for skipping arguments the should by designnot be considered for the key-generation like for exampledatabase-clients.#### Setting cache file locationThe module automatically creates a `cache/data.h5` relative to`__main__`, to change this set the environment variable`CACHE_PATH` to be the desired directory of the `data.h5` file.#### Disabling the cache with env-variableTo disable the cache set the environment variable`DISABLE_CACHE` to `TRUE`.### Usage#### Decorating functions```pythonfrom data_cache import pandas_cachefrom time import sleepfrom datetime import datetimeimport pandas as pd@pandas_cachedef simple_func():    sleep(5)    return pd.DataFrame([[1,2,3], [2,3,4]])t0 = datetime.now()print(simple_func())print(datetime.now() - t0)t0 = datetime.now()print(simple_func())print(datetime.now() - t0)``````commandline   0  1  20  1  2  31  2  3  40:00:05.343027   0  1  20  1  2  31  2  3  40:00:00.015987```#### Decorating class methodsThe decorator ignores arguments named 'self' such that it will work across different instances of the same object.```pythonfrom data_cache import pandas_cachefrom time import sleepfrom datetime import datetimeimport pandas as pdclass PandasClass:    def __init__(self):        print(self)    @pandas_cache    def simple_func(self):        sleep(5)        return pd.DataFrame([[1,2,3], [2,3,4]])c = PandasClass()t0 = datetime.now()print(c.simple_func())print(datetime.now() - t0)c = PandasClass()t0 = datetime.now()print(c.simple_func())print(datetime.now() - t0)``````commandline&lt;__main__.PandasClass object at 0x003451F0&gt;   0  1  20  1  2  31  2  3  40:00:05.375342&lt;__main__.PandasClass object at 0x124814B0&gt;   0  1  20  1  2  31  2  3  40:00:00.014959```#### Selecting arguments```pythonfrom data_cache import pandas_cachefrom time import sleepfrom datetime import datetimeimport pandas as pd@pandas_cache(&quot;a&quot;, &quot;c&quot;)def simple_func(a, b, c=True):    sleep(5)    return pd.DataFrame([[1,2,3], [2,3,4]])t0 = datetime.now()print(simple_func(a=1, b=2))print(datetime.now() - t0)# b is not consideredt0 = datetime.now()print(simple_func(a=1, b=3))print(datetime.now() - t0)``````commandline   0  1  20  1  2  31  2  3  40:00:05.619620   0  1  20  1  2  31  2  3  40:00:00.017980```#### Multi-DataFrame returns```pythonfrom data_cache import pandas_cachefrom time import sleepfrom datetime import datetimeimport pandas as pd@pandas_cache(&quot;a&quot;, &quot;c&quot;)def simple_func(a, *args, **kwargs):    sleep(5)    return pd.DataFrame([[1,2,3], [2,3,4]]), pd.DataFrame([[1,2,3], [2,3,4]]) * 10t0 = datetime.now()print(simple_func(1, b=2, c=True))print(datetime.now() - t0)t0 = datetime.now()print(simple_func(a=1, b=3, c=True))print(datetime.now() - t0)``````commandline(   0  1  20  1  2  31  2  3  4,     0   1   20  10  20  301  20  30  40)0:00:05.368545(   0  1  20  1  2  31  2  3  4,     0   1   20  10  20  301  20  30  40)0:00:00.019578```#### Disabling cache for testsCaching can be disabled using the environment variable DISABLE_CACHE to TRUE```pythonfrom mock import patchdef test_cached_function():    with patch.dict(&quot;os.environ&quot;, {&quot;DISABLE_CACHE&quot;: &quot;TRUE&quot;}, clear=True):        assert cached_function() == target```#### Numpy caching```pythonfrom data_cache import numpy_cachefrom time import sleepfrom datetime import datetimeimport numpy as np@numpy_cache(&quot;a&quot;, &quot;c&quot;)def simple_func(a, *args, **kwargs):    sleep(5)    return np.array([[1, 2, 3], [2, 3, 4]]), np.array([[1, 2, 3], [2, 3, 4]]) * 10t0 = datetime.now()print(simple_func(1, b=2, c=True))print(datetime.now() - t0)t0 = datetime.now()print(simple_func(a=1, b=3, c=True))print(datetime.now() - t0)``````commandline(array([[1, 2, 3],       [2, 3, 4]]), array([[10, 20, 30],       [20, 30, 40]]))0:00:05.009084(array([[1, 2, 3],       [2, 3, 4]]), array([[10, 20, 30],       [20, 30, 40]]))0:00:00.002000```#### MetadataMetadata is automatically stored with the data on the group node containing theDataFrame/Array.```pythonfrom data_cache import numpy_cache, pandas_cache, read_metadataimport pandas as pdimport numpy as npfrom datetime import datetime@pandas_cachedef function1(a, *args, b=1, **kwargs):    return pd.DataFrame()@numpy_cachedef function2(a, *args, b=1, **kwargs):    return np.array([])function1(1, True, datetime.date(2019, 11, 11))function2(2, False, b=2, c=1.1)read_metadata(&quot;path_to_data.h5&quot;)```results:```json{    &quot;/a86f0a323bf20998b5deda81e9f90bb49/a5d320e5dcdc5d3f35a4ca366980b2dc1&quot;: {        &quot;a&quot;: &quot;1&quot;,        &quot;arglist&quot;: &quot;(True, datetime.date(2019, 11, 11))&quot;,        &quot;b&quot;: &quot;1&quot;,        &quot;date_stored&quot;: &quot;01/05/2020, 10:00:00&quot;,        &quot;function_name&quot;: &quot;function1&quot;,        &quot;module_path&quot;: &quot;path_to_module&quot;    },    &quot;/a56ad8af46bc5fd8b9320b00b12e6c115/a62734531fc99855292c9db04d5eba60a&quot;: {        &quot;a&quot;: &quot;2&quot;,        &quot;arglist&quot;: &quot;(False,)&quot;,        &quot;b&quot;: &quot;2&quot;,        &quot;c&quot;: &quot;1.1&quot;,        &quot;date_stored&quot;: &quot;01/05/2020, 10:00:00&quot;,        &quot;function_name&quot;: &quot;function2&quot;,        &quot;module_path&quot;:  &quot;path_to_module&quot;    }}```</longdescription>
</pkgmetadata>