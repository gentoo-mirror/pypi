<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**widget-bandsplot**: Jupyter Widget to Plot Band Structure and Density of States===============================[![PyPI version](https://badge.fury.io/py/widget-bandsplot.svg)](https://badge.fury.io/py/widget-bandsplot)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/osscar-org/widget-bandsplot/main?labpath=%2Fexamples%2Fbandsplot-example.ipynb)A Jupyter widget to plot band structures and density of states. The widget is using the[bands-widget](https://github.com/materialscloud-org/bands-widget) Javascript package,which is developed by Materials Cloud group.&lt;img src=&quot;./examples/widget-bandsplot.gif&quot; height=&quot;350&quot;&gt;Installation------------To install use pip:    $ pip install widget_bandsplotUsage-----### 1. Plot both the band structure and the density of states (DOS) side by side```pythonw = BandsPlotWidget(bands=[banddata1, banddata2], dos=dosdata, plot_fermilevel = True, show_legend = True, energy_range = {&quot;ymin&quot;: -10.0, &quot;ymax&quot;: 10.0})display(w)```In order to plot the band structure and density of states, one needsto provide bands data and DOS data as JSON-files. The examples of the inputJSON-files are provided in the `examples/data` folder. The JSON-files for theband structure can be exported with the [AiiDA command line interface (CLI) `verdi`](https://aiida.readthedocs.io/projects/aiida-core/en/latest/reference/command_line.html#reference-command-line) as demonstrated inthe code below:```bashverdi data band export &lt;PK&gt; --format=json```One can plot several band structure input files together with the widget.The format of the DOS input dict is validate by the [PDOS Schema](https://raw.githubusercontent.com/osscar-org/widget-bandsplot/main/widget_bandsplot/schemas/pdos.json), the exampla valid input is:```pythondos_data = {    &quot;fermi_energy&quot;: -7.0,    &quot;dos&quot;: [        {            &quot;label&quot;: &quot;Total DOS&quot;,   # required            &quot;x&quot;: [0.0, 0.1, 0.2],   # required            &quot;y&quot;: [1.2, 3.2, 0.0],   # required            &quot;borderColor&quot;: &quot;#41e2b3&quot;,   # optional            &quot;backgroundColor&quot;: &quot;#51258b&quot;,   # optional            &quot;backgroundAlpha&quot;: &quot;52%&quot;,  #optional: A string with integer between 0-100 and '%' in end.            &quot;lineStyle&quot;: &quot;dash&quot;,    # optional        },        {            &quot;label&quot;: &quot;Co (s↑)&quot;,            &quot;x&quot;: [0.0, 0.1, 0.2],            &quot;y&quot;: [1.2, 3.2, 0.0],            &quot;lineStyle&quot;: &quot;solid&quot;,            &quot;borderColor&quot;: &quot;#43ee8b&quot;,            &quot;backgroundColor&quot;: &quot;#59595c&quot;,        },        {            &quot;label&quot;: &quot;Co (s↓)&quot;,            &quot;x&quot;: [0.0, 0.1, 0.2],            &quot;y&quot;: [1.2, 3.2, 0.0],            &quot;lineStyle&quot;: &quot;solid&quot;,            &quot;borderColor&quot;: &quot;#403bae&quot;,            &quot;backgroundColor&quot;: &quot;#a16c5e&quot;,        },    ],}```### 2. Plot only the band structure```pythonw = BandsPlotWidget(bands=[banddata1, banddata2], plot_fermilevel = True, show_legend = True, energy_range = {&quot;ymin&quot;: -10.0, &quot;ymax&quot;: 10.0})display(w)```### 3. Plot only the density of states (DOS)```pythonw = BandsPlotWidget(dos=dosdata, plot_fermilevel = True, show_legend = True, energy_range = {&quot;ymin&quot;: -10.0, &quot;ymax&quot;: 10.0})display(w)```When only plotting the density of states, the plot will be shown inhorizontal format.For developers-------------For a development installation (requires [Node.js](https://nodejs.org) and [Yarn version 1](https://classic.yarnpkg.com/)),    $ git clone https://github.com/osscar/widget-bandsplot.git    $ cd widget-bandsplot    $ pip install -e .    $ jupyter nbextension install --py --symlink --overwrite --sys-prefix widget_bandsplot    $ jupyter nbextension enable --py --sys-prefix widget_bandsplotWhen actively developing your extension for JupyterLab, run the command:    $ jupyter labextension develop --overwrite widget_bandsplotThen you need to rebuild the JS when you make a code change:    $ cd js    $ yarn run buildYou then need to refresh the JupyterLab page when your javascript changes.## For maintainersTo create a new release, clone the repository, install development dependencies with `pip install -e '.[dev]'`, and then execute `bumpver update [--major|--minor|--patch] [--tag [alpha|beta|rc]]`.This will:  1. Create a tagged release with bumped version and push it to the repository.  2. Trigger a GitHub actions workflow that creates a GitHub release and publishes it on PyPI.Additional notes:  - Use the `--dry` option to preview the release change.  - The release tag (e.g. a/b/rc) is determined from the last release.    Use the `--tag` option to switch the release tag.  - This packages follows semantic versioning.## AcknowledgementsWe acknowledge support from the EPFL Open Science Fund via the [OSSCAR](http://www.osscar.org) project.&lt;img src='https://www.osscar.org/_images/logos.png' width='700'&gt;</longdescription>
</pkgmetadata>