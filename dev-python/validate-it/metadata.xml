<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Validate-it[![Build Status](https://travis-ci.org/ruslux/validate-it.svg?branch=master)](https://travis-ci.org/ruslux/validate-it) [![Coverage Status](https://coveralls.io/repos/github/ruslux/validate-it/badge.svg?branch=master)](https://coveralls.io/github/ruslux/validate-it)[![PyPI version](https://badge.fury.io/py/validate-it.svg)](https://badge.fury.io/py/validate-it)[![Downloads](https://img.shields.io/pypi/dm/validate-it.svg)](https://pypi.python.org/pypi/validate-it)- [About](#about)- [Installation](#installation)- [Supported fields](#fields)- [Validation example](#validation-example)- [Dataclass example](#dataclass-example)- [Simple mapping example](#simple-mapping-example)- [Nested mapping example](#nested-mapping-example)- [Requirements](#requirements)### &lt;a name=&quot;about&quot;/&gt;About&lt;/a&gt;Ultimate data validation tool built on top of the typing moduleFeatures: * validation by type hints* validation on `__init__`: `SomeModel(**kwargs)`* validation on `__setattr__`: `some_instance.some_field = value`* built-in options for types:  * `min_value`, `max_value` (based on `&lt;` and `&gt;`)  * `min_length`, `max_length`, `size` (based on `len()`)* cast for incoming value and outgoing value: `Options(parser=int, serializer=str)` * `alias` for incoming keys and `rename` for outgoing keys: `d: int = Options(alias='dyn', rename='dynamic')`* validation by list `allow`ed values: `Options(allow=[1, 2, 3])`* validation by custom list of `validators`: `Options(validators=[is_odd, is_even])`* auto pack nested values: `data: List[SomeModel] = Options(auto_pack=True, packer=SomeModel)`* all this `options` can be callable: `Options(min_value=dynamic_min_value)`### &lt;a name=&quot;installation&quot;/&gt;Installation&lt;/a&gt;With pip:```bashpip install validate-it```### &lt;a name=&quot;fields&quot;/&gt;Supported fields&lt;/a&gt;```pythonimport refrom datetime import datetimefrom typing import Dict, List, Union, Optionalfrom validate_it import schema, Optionsclass IsNotEmailError(Exception):    passdef is_email(name, key, value, root):    if not re.match(r&quot;[^@]+@[^@]+\.[^@]+&quot;, value):        raise IsNotEmailError(f&quot;{key}: is not email&quot;)    return value@schemaclass Example:    # required fields    field_a: datetime    field_b: float        # required fields with defaults    field_c: str = &quot;unknown&quot;    field_d: int = 9        # required fields with nested types    field_e: Dict[int, str]    field_f: List[int]        # optional fields    field_g: Optional[int]    field_h: Union[int, None] # equivalent of Optional[int]        # with some validators:    fields_i: int = Options(default=0, max_value=100, min_value=100)    fields_j: str = Options(size=10)    fields_k: str = Options(min_length=10, max_length=20)    fields_l: List[str] = Options(size=5)    fields_m: str = Options(validators=[is_email])    fields_n: int = Options(allowed=[1, 2, 3])        # with search (input) alias:    fields_o: int = Options(alias=&quot;field_n&quot;)        # with rename (output) alias:    fields_p: int = Options(rename=&quot;field_q&quot;)        # with serializer used in #to_dict(), outgoing value is str type    fields_q: int = Options(serializer=str)        # with parser used in #from_dict() or direct setattr, incoming value will be parsed as int    fields_r: int = Options(parser=int)```### &lt;a name=&quot;validation-example&quot;/&gt;Validation example&lt;/a&gt;```pythonfrom typing import Listfrom validate_it import *@schemaclass Simple:    a: int    b: intsimple = Simple(a=1, b=2)simple.a = 2simple.b = 3try:    simple.a = 'not int'except TypeError:    print(&quot;Wrong type&quot;)@schemaclass Owner:    first_name: str    last_name: str@schemaclass Characteristics:    cc: float = Options(min_value=0.0)    hp: int = Options(min_value=0)@schemaclass Car:    name: str = Options(min_length=2, max_length=20)    owners: List[Owner] = Options(auto_pack=True, packer=pack_value)    characteristics: Characteristics = Options(default=lambda: {&quot;cc&quot;: 0.0, &quot;hp&quot;: 0}, auto_pack=True, packer=pack_value)    convert: bool = Options(parser=bool)_data = {    &quot;name&quot;: &quot;Shelby GT500&quot;,    &quot;owners&quot;: [        {            &quot;first_name&quot;: &quot;Randall&quot;,            &quot;last_name&quot;: &quot;Raines&quot;,        }    ],    &quot;characteristics&quot;: {        &quot;cc&quot;: 4.7,        &quot;hp&quot;: 306    },    &quot;unknown_field&quot;: 10,    &quot;convert&quot;: 1 }_expected = {    &quot;name&quot;: &quot;Shelby GT500&quot;,    &quot;owners&quot;: [        {            &quot;first_name&quot;: &quot;Randall&quot;,            &quot;last_name&quot;: &quot;Raines&quot;,        }    ],    &quot;characteristics&quot;: {        &quot;cc&quot;: 4.7,        &quot;hp&quot;: 306    },    &quot;convert&quot;: &quot;1&quot;}car = Car(**_data)assert to_dict(car) == _expected```### &lt;a name=&quot;dataclass-example&quot;/&gt;Dataclass example&lt;/a&gt;```pythonfrom validate_it import *from dataclasses import dataclass@schema@dataclassclass Simple:    a: int    b: intsimple = Simple(a=1, b=2)simple.a = 2simple.b = 3try:    simple.a = 'not int'except TypeError:    print(&quot;Wrong type&quot;)```### &lt;a name=&quot;simple-mapping-example&quot;/&gt;Simple mapping example&lt;/a&gt;```pythonfrom validate_it import *@schemaclass User:    first_name: str = Options(alias=&quot;f&quot;)    last_name: str = Options(alias=&quot;l&quot;)_in_data = {    &quot;f&quot;: &quot;John&quot;,    &quot;l&quot;: &quot;Connor&quot;}user = User(**_in_data)assert to_dict(user) == {&quot;first_name&quot;: &quot;John&quot;, &quot;last_name&quot;: &quot;Connor&quot;}```### &lt;a name=&quot;nested-mapping-example&quot;/&gt;Nested mapping example&lt;/a&gt;```pythonfrom validate_it import *from accordion import compress@schemaclass Player:    nickname: str = Options(alias=&quot;info.nickname&quot;)    intelligence: int = Options(alias=&quot;characteristics/0&quot;)    dexterity: int = Options(alias=&quot;characteristics/1&quot;)    strength: int = Options(alias=&quot;characteristics/2&quot;)    vitality: int = Options(alias=&quot;characteristics/3&quot;)_in_data = {    &quot;info&quot;: {        &quot;nickname&quot;: &quot;Killer777&quot;,    },    &quot;characteristics&quot;: [        7,        55,        11,        44    ]}player = Player(**compress(_in_data))assert to_dict(player) == {    &quot;nickname&quot;: &quot;Killer777&quot;,     &quot;intelligence&quot;: 7,     &quot;dexterity&quot;: 55,     &quot;strength&quot;: 11,     &quot;vitality&quot;: 44}```and back:```pythonfrom validate_it import *from accordion import expand@schemaclass Player:    nickname: str = Options(rename=&quot;info.nickname&quot;)    intelligence: int = Options(rename=&quot;characteristics/0&quot;)    dexterity: int = Options(rename=&quot;characteristics/1&quot;)    strength: int = Options(rename=&quot;characteristics/2&quot;)    vitality: int = Options(rename=&quot;characteristics/3&quot;)_in_data = {    &quot;nickname&quot;: &quot;Killer777&quot;,     &quot;intelligence&quot;: 7,     &quot;dexterity&quot;: 55,     &quot;strength&quot;: 11,     &quot;vitality&quot;: 44}player = Player(**_in_data)assert expand(to_dict(player)) == {    &quot;info&quot;: {        &quot;nickname&quot;: &quot;Killer777&quot;,    },    &quot;characteristics&quot;: [        7,        55,        11,        44    ]}```### &lt;a name=&quot;requirements&quot;/&gt;Requirements&lt;/a&gt;Tested with `python3.6`, `python3.7`, `pypy3.6-7.0.0`</longdescription>
</pkgmetadata>