<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/nschloe/meshio&quot;&gt;&lt;img alt=&quot;meshio&quot; src=&quot;https://nschloe.github.io/meshio/logo-with-text.svg&quot; width=&quot;60%&quot;&gt;&lt;/a&gt;  &lt;p align=&quot;center&quot;&gt;I/O for mesh files.&lt;/p&gt;&lt;/p&gt;[![PyPi Version](https://img.shields.io/pypi/v/meshio.svg?style=flat-square)](https://pypi.org/project/meshio/)[![Anaconda Cloud](https://anaconda.org/conda-forge/meshio/badges/version.svg?=style=flat-square)](https://anaconda.org/conda-forge/meshio/)[![Packaging status](https://repology.org/badge/tiny-repos/python:meshio.svg)](https://repology.org/project/python:meshio/versions)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/meshio.svg?style=flat-square)](https://pypi.org/project/meshio/)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1173115.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173115)[![GitHub stars](https://img.shields.io/github/stars/nschloe/meshio.svg?style=flat-square&amp;logo=github&amp;label=Stars&amp;logoColor=white)](https://github.com/nschloe/meshio)[![Downloads](https://pepy.tech/badge/meshio/month?style=flat-square)](https://pepy.tech/project/meshio)&lt;!--[![PyPi downloads](https://img.shields.io/pypi/dm/meshio.svg?style=flat-square)](https://pypistats.org/packages/meshio)--&gt;[![Discord](https://img.shields.io/static/v1?logo=discord&amp;logoColor=white&amp;label=chat&amp;message=on%20discord&amp;color=7289da&amp;style=flat-square)](https://discord.gg/Z6DMsJh4Hr)[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/meshio/ci?style=flat-square)](https://github.com/nschloe/meshio/actions?query=workflow%3Aci)[![codecov](https://img.shields.io/codecov/c/github/nschloe/meshio.svg?style=flat-square)](https://app.codecov.io/gh/nschloe/meshio)[![LGTM](https://img.shields.io/lgtm/grade/python/github/nschloe/meshio.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/meshio)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)There are various mesh formats available for representing unstructured meshes.meshio can read and write all of the following and smoothly converts between them:&gt; [Abaqus](http://abaqus.software.polimi.it/v6.14/index.html) (`.inp`),&gt; ANSYS msh (`.msh`),&gt; [AVS-UCD](https://lanl.github.io/LaGriT/pages/docs/read_avs.html) (`.avs`),&gt; [CGNS](https://cgns.github.io/) (`.cgns`),&gt; [DOLFIN XML](https://manpages.ubuntu.com/manpages/jammy/en/man1/dolfin-convert.1.html) (`.xml`),&gt; [Exodus](https://nschloe.github.io/meshio/exodus.pdf) (`.e`, `.exo`),&gt; [FLAC3D](https://www.itascacg.com/software/flac3d) (`.f3grid`),&gt; [H5M](https://www.mcs.anl.gov/~fathom/moab-docs/h5mmain.html) (`.h5m`),&gt; [Kratos/MDPA](https://github.com/KratosMultiphysics/Kratos/wiki/Input-data) (`.mdpa`),&gt; [Medit](https://people.sc.fsu.edu/~jburkardt/data/medit/medit.html) (`.mesh`, `.meshb`),&gt; [MED/Salome](https://docs.salome-platform.org/latest/dev/MEDCoupling/developer/med-file.html) (`.med`),&gt; [Nastran](https://help.autodesk.com/view/NSTRN/2019/ENU/?guid=GUID-42B54ACB-FBE3-47CA-B8FE-475E7AD91A00) (bulk data, `.bdf`, `.fem`, `.nas`),&gt; [Netgen](https://github.com/ngsolve/netgen) (`.vol`, `.vol.gz`),&gt; [Neuroglancer precomputed format](https://github.com/google/neuroglancer/tree/master/src/neuroglancer/datasource/precomputed#mesh-representation-of-segmented-object-surfaces),&gt; [Gmsh](https://gmsh.info/doc/texinfo/gmsh.html#File-formats) (format versions 2.2, 4.0, and 4.1, `.msh`),&gt; [OBJ](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (`.obj`),&gt; [OFF](https://segeval.cs.princeton.edu/public/off_format.html) (`.off`),&gt; [PERMAS](https://www.intes.de) (`.post`, `.post.gz`, `.dato`, `.dato.gz`),&gt; [PLY](&lt;https://en.wikipedia.org/wiki/PLY_(file_format)&gt;) (`.ply`),&gt; [STL](&lt;https://en.wikipedia.org/wiki/STL_(file_format)&gt;) (`.stl`),&gt; [Tecplot .dat](http://paulbourke.net/dataformats/tp/),&gt; [TetGen .node/.ele](https://wias-berlin.de/software/tetgen/fformats.html),&gt; [SVG](https://www.w3.org/TR/SVG/) (2D output only) (`.svg`),&gt; [SU2](https://su2code.github.io/docs_v7/Mesh-File/) (`.su2`),&gt; [UGRID](https://www.simcenter.msstate.edu/software/documentation/ug_io/3d_grid_file_type_ugrid.html) (`.ugrid`),&gt; [VTK](https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf) (`.vtk`),&gt; [VTU](https://vtk.org/Wiki/VTK_XML_Formats) (`.vtu`),&gt; [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) ([TIN](https://en.wikipedia.org/wiki/Triangulated_irregular_network)) (`.wkt`),&gt; [XDMF](https://xdmf.org/index.php/XDMF_Model_and_Format) (`.xdmf`, `.xmf`).([Here's a little survey](https://forms.gle/PSeNb3N3gv3wbEus8) on which formats are actuallyused.)Install with one of```pip install meshio[all]conda install -c conda-forge meshio```(`[all]` pulls in all optional dependencies. By default, meshio only uses numpy.)You can then use the command-line tool&lt;!--pytest-codeblocks:skip--&gt;```shmeshio convert    input.msh output.vtk   # convert between two formatsmeshio info       input.xdmf             # show some info about the meshmeshio compress   input.vtu              # compress the mesh filemeshio decompress input.vtu              # decompress the mesh filemeshio binary     input.msh              # convert to binary formatmeshio ascii      input.msh              # convert to ASCII format```with any of the supported formats.In Python, simply do&lt;!--pytest-codeblocks:skip--&gt;```pythonimport meshiomesh = meshio.read(    filename,  # string, os.PathLike, or a buffer/open file    # file_format=&quot;stl&quot;,  # optional if filename is a path; inferred from extension    # see meshio-convert -h for all possible formats)# mesh.points, mesh.cells, mesh.cells_dict, ...# mesh.vtk.read() is also possible```to read a mesh. To write, do```pythonimport meshio# two triangles and one quadpoints = [    [0.0, 0.0],    [1.0, 0.0],    [0.0, 1.0],    [1.0, 1.0],    [2.0, 0.0],    [2.0, 1.0],]cells = [    (&quot;triangle&quot;, [[0, 1, 2], [1, 3, 2]]),    (&quot;quad&quot;, [[1, 4, 5, 3]]),]mesh = meshio.Mesh(    points,    cells,    # Optionally provide extra data on points, cells, etc.    point_data={&quot;T&quot;: [0.3, -1.2, 0.5, 0.7, 0.0, -3.0]},    # Each item in cell data must match the cells array    cell_data={&quot;a&quot;: [[0.1, 0.2], [0.4]]},)mesh.write(    &quot;foo.vtk&quot;,  # str, os.PathLike, or buffer/open file    # file_format=&quot;vtk&quot;,  # optional if first argument is a path; inferred from extension)# Alternative with the same optionsmeshio.write_points_cells(&quot;foo.vtk&quot;, points, cells)```For both input and output, you can optionally specify the exact `file_format`(in case you would like to enforce ASCII over binary VTK, for example).#### Time seriesThe [XDMF format](https://xdmf.org/index.php/XDMF_Model_and_Format) supportstime series with a shared mesh. You can write times series data using meshiowith&lt;!--pytest-codeblocks:skip--&gt;```pythonwith meshio.xdmf.TimeSeriesWriter(filename) as writer:    writer.write_points_cells(points, cells)    for t in [0.0, 0.1, 0.21]:        writer.write_data(t, point_data={&quot;phi&quot;: data})```and read it with&lt;!--pytest-codeblocks:skip--&gt;```pythonwith meshio.xdmf.TimeSeriesReader(filename) as reader:    points, cells = reader.read_points_cells()    for k in range(reader.num_steps):        t, point_data, cell_data = reader.read_data(k)```### ParaView plugin&lt;img alt=&quot;gmsh paraview&quot; src=&quot;https://nschloe.github.io/meshio/gmsh-paraview.png&quot; width=&quot;60%&quot;&gt;*A Gmsh file opened with ParaView.*If you have downloaded a binary version of ParaView, you may proceed as follows.- Install meshio for the Python major version that ParaView uses (check `pvpython --version`)- Open ParaView- Find the file `paraview-meshio-plugin.py` of your meshio installation (on Linux:  `~/.local/share/paraview-5.9/plugins/`) and load it under _Tools / Manage Plugins / Load New_- _Optional:_ Activate _Auto Load_You can now open all meshio-supported files in ParaView.### Performance comparisonThe comparisons here are for a triangular mesh with about 900k points and 1.8Mtriangles. The red lines mark the size of the mesh in memory.#### File sizes&lt;img alt=&quot;file size&quot; src=&quot;https://nschloe.github.io/meshio/filesizes.svg&quot; width=&quot;60%&quot;&gt;#### I/O speed&lt;img alt=&quot;performance&quot; src=&quot;https://nschloe.github.io/meshio/performance.svg&quot; width=&quot;90%&quot;&gt;#### Maximum memory usage&lt;img alt=&quot;memory usage&quot; src=&quot;https://nschloe.github.io/meshio/memory.svg&quot; width=&quot;90%&quot;&gt;### Installationmeshio is [available from the Python Package Index](https://pypi.org/project/meshio/),so simply run```pip install meshio```to install.Additional dependencies (`netcdf4`, `h5py`) are required for some of the output formatsand can be pulled in by```pip install meshio[all]```You can also install meshio from [Anaconda](https://anaconda.org/conda-forge/meshio):```conda install -c conda-forge meshio```### TestingTo run the meshio unit tests, check out this repository and type```tox```### Licensemeshio is published under the [MIT license](https://en.wikipedia.org/wiki/MIT_License).</longdescription>
</pkgmetadata>