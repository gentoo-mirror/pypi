<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>cli_exit_tools==============Version v1.2.3.2 as of 2022-06-02 see `Changelog`_|build_badge| |license| |jupyter| |pypi| |pypi-downloads| |black||codecov| |better_code| |cc_maintain| |cc_issues| |cc_coverage| |snyk|.. |build_badge| image:: https://github.com/bitranox/cli_exit_tools/actions/workflows/python-package.yml/badge.svg   :target: https://github.com/bitranox/cli_exit_tools/actions/workflows/python-package.yml.. |license| image:: https://img.shields.io/github/license/webcomics/pywine.svg   :target: http://en.wikipedia.org/wiki/MIT_License.. |jupyter| image:: https://mybinder.org/badge_logo.svg   :target: https://mybinder.org/v2/gh/bitranox/cli_exit_tools/master?filepath=cli_exit_tools.ipynb.. for the pypi status link note the dashes, not the underscore !.. |pypi| image:: https://img.shields.io/pypi/status/cli-exit-tools?label=PyPI%20Package   :target: https://badge.fury.io/py/cli_exit_tools.. |codecov| image:: https://img.shields.io/codecov/c/github/bitranox/cli_exit_tools   :target: https://codecov.io/gh/bitranox/cli_exit_tools.. |better_code| image:: https://bettercodehub.com/edge/badge/bitranox/cli_exit_tools?branch=master   :target: https://bettercodehub.com/results/bitranox/cli_exit_tools.. |cc_maintain| image:: https://img.shields.io/codeclimate/maintainability-percentage/bitranox/cli_exit_tools?label=CC%20maintainability   :target: https://codeclimate.com/github/bitranox/cli_exit_tools/maintainability   :alt: Maintainability.. |cc_issues| image:: https://img.shields.io/codeclimate/issues/bitranox/cli_exit_tools?label=CC%20issues   :target: https://codeclimate.com/github/bitranox/cli_exit_tools/maintainability   :alt: Maintainability.. |cc_coverage| image:: https://img.shields.io/codeclimate/coverage/bitranox/cli_exit_tools?label=CC%20coverage   :target: https://codeclimate.com/github/bitranox/cli_exit_tools/test_coverage   :alt: Code Coverage.. |snyk| image:: https://img.shields.io/snyk/vulnerabilities/github/bitranox/cli_exit_tools   :target: https://snyk.io/test/github/bitranox/cli_exit_tools.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black.. |pypi-downloads| image:: https://img.shields.io/pypi/dm/cli-exit-tools   :target: https://pypi.org/project/cli-exit-tools/   :alt: PyPI - Downloadssmall toolset to properly exit a cli application:- print the traceback information (can be set with commandline option)- get a proper exit code from the Exception- flush the streams, to make sure output is written in proper order- demo how to integrate into Your cli module (see usage)----automated tests, Travis Matrix, Documentation, Badges, etc. are managed with `PizzaCutter &lt;https://github.com/bitranox/PizzaCutter&gt;`_ (cookiecutter on steroids)Python version required: 3.6.0 or newertested on recent linux with python 3.6, 3.7, 3.8, 3.9, 3.10, pypy-3.8 - architectures: amd64`100% code coverage &lt;https://codecov.io/gh/bitranox/cli_exit_tools&gt;`_, flake8 style checking ,mypy static type checking ,tested under `Linux, macOS, Windows &lt;https://github.com/bitranox/cli_exit_tools/actions/workflows/python-package.yml&gt;`_, automatic daily builds and monitoring----- `Try it Online`_- `Usage`_- `Usage from Commandline`_- `Installation and Upgrade`_- `Requirements`_- `Acknowledgements`_- `Contribute`_- `Report Issues &lt;https://github.com/bitranox/cli_exit_tools/blob/master/ISSUE_TEMPLATE.md&gt;`_- `Pull Request &lt;https://github.com/bitranox/cli_exit_tools/blob/master/PULL_REQUEST_TEMPLATE.md&gt;`_- `Code of Conduct &lt;https://github.com/bitranox/cli_exit_tools/blob/master/CODE_OF_CONDUCT.md&gt;`_- `License`_- `Changelog`_----Try it Online-------------You might try it right away in Jupyter Notebook by using the &quot;launch binder&quot; badge, or click `here &lt;https://mybinder.org/v2/gh/{{rst_include.repository_slug}}/master?filepath=cli_exit_tools.ipynb&gt;`_Usage------------ example for the main_cli.. code-block:: python    # STDLIB    import sys    from typing import Optional    # EXT    import click    # CONSTANTS    CLICK_CONTEXT_SETTINGS = dict(help_option_names=[&quot;-h&quot;, &quot;--help&quot;])    try:        from . import __init__conf__        from . import cli_exit_tools    except (ImportError, ModuleNotFoundError):  # pragma: no cover        # imports for doctest        import __init__conf__  # type: ignore  # pragma: no cover        import cli_exit_tools  # type: ignore  # pragma: no cover    def info() -&gt; None:        &quot;&quot;&quot;        &gt;&gt;&gt; info()        Info for ...        &quot;&quot;&quot;        __init__conf__.print_info()    @click.group(help=__init__conf__.title, context_settings=CLICK_CONTEXT_SETTINGS)    @click.version_option(        version=__init__conf__.version, prog_name=__init__conf__.shell_command, message=f&quot;{__init__conf__.shell_command} version {__init__conf__.version}&quot;    )    @click.option(&quot;--traceback/--no-traceback&quot;, is_flag=True, type=bool, default=None, help=&quot;return traceback information on cli&quot;)    def cli_main(traceback: Optional[bool] = None) -&gt; None:        if traceback is not None:            cli_exit_tools.config.traceback = traceback    @cli_main.command(&quot;info&quot;, context_settings=CLICK_CONTEXT_SETTINGS)  # type: ignore    def cli_info() -&gt; None:        &quot;&quot;&quot;get program informations&quot;&quot;&quot;        info()    # entry point if main    if __name__ == &quot;__main__&quot;:        try:            cli_main()        except Exception as exc:            cli_exit_tools.print_exception_message()            sys.exit(cli_exit_tools.get_system_exit_code(exc))        finally:            cli_exit_tools.flush_streams()- get the system exit code.. code-block:: python    def get_system_exit_code(exc: BaseException) -&gt; int:        &quot;&quot;&quot;        Return the exit code for linux or windows os, based on the exception.        If, on windows, the winerror code is passed with the Exception, we return that winerror code.        Parameter        ---------        exc            the exception to analyze        Result        ------        exit_code            as integer        Examples        --------        &gt;&gt;&gt; try:        ...     raise RuntimeError()        ... except RuntimeError as my_exc:        ...     assert get_system_exit_code(my_exc) == 1        ...     setattr(my_exc, 'winerror', 42)        ...     assert get_system_exit_code(my_exc) == 42        ...     setattr(my_exc, 'winerror', None)        ...     assert get_system_exit_code(my_exc) == 1        &gt;&gt;&gt; try:        ...     exit(99)        ... except SystemExit as my_exc:        ...     assert get_system_exit_code(my_exc) == 99        &quot;&quot;&quot;- print the exception message.. code-block:: python    def print_exception_message(trace_back: bool = config.traceback, length_limit: int = 500, stream: Optional[TextIO] = None) -&gt; None:        &quot;&quot;&quot;        Prints the Exception Message to stderr        if trace_back is True, it also prints the traceback information        if the exception has stdout, stderr attributes (like the subprocess.CalledProcessError)        those will be also printed to stderr        Parameter        ---------        trace_back            if traceback information should be printed. This is usually set early            in the CLI application to the config object via a commandline option.        length_limit            int, limits the length of the message        stream            optional, to which stream to print, default = stderr        Examples        --------        &gt;&gt;&gt; # test with exc_info = None        &gt;&gt;&gt; print_exception_message()        &gt;&gt;&gt; # test with exc_info        &gt;&gt;&gt; try:        ...     raise FileNotFoundError('unknown_command_test1')        ... except Exception:       # noqa        ...     print_exception_message(True, length_limit=15, stream=sys.stdout)        ...     print_exception_message(False, stream=sys.stdout)        ...     print_exception_message(True, stream=sys.stdout)        Traceback Info...        &gt;&gt;&gt; # test with subprocess to get stdout, stderr        &gt;&gt;&gt; import subprocess        &gt;&gt;&gt; try:        ...     discard=subprocess.run('unknown_command_test2', shell=True, check=True)        ... except subprocess.CalledProcessError:        ...     print_exception_message(False, stream=sys.stdout)        ...     print_exception_message(True, stream=sys.stdout)        ...     print_exception_message(True, stream=sys.stdout)        CalledProcessError...        &quot;&quot;&quot;- flush the streams.. code-block:: python    def flush_streams() -&gt; None:        &quot;&quot;&quot;        flush the streams - make sure the output is written early,        otherwise the output might be printed even after another CLI        command is launched        Examples        --------        &gt;&gt;&gt; flush_streams()        &quot;&quot;&quot;Usage from Commandline------------------------.. code-block::   Usage: cli_exit_tools [OPTIONS] COMMAND [ARGS]...     functions to exit an cli application properly   Options:     --version                     Show the version and exit.     --traceback / --no-traceback  return traceback information on cli     -h, --help                    Show this message and exit.   Commands:     info  get program informationsInstallation and Upgrade------------------------- Before You start, its highly recommended to update pip and setup tools:.. code-block::    python -m pip --upgrade pip    python -m pip --upgrade setuptools- to install the latest release from PyPi via pip (recommended):.. code-block::    python -m pip install --upgrade cli_exit_tools- to install the latest version from github via pip:.. code-block::    python -m pip install --upgrade git+https://github.com/bitranox/cli_exit_tools.git- include it into Your requirements.txt:.. code-block::    # Insert following line in Your requirements.txt:    # for the latest Release on pypi:    cli_exit_tools    # for the latest development version :    cli_exit_tools @ git+https://github.com/bitranox/cli_exit_tools.git    # to install and upgrade all modules mentioned in requirements.txt:    python -m pip install --upgrade -r /&lt;path&gt;/requirements.txt- to install the latest development version from source code:.. code-block::    # cd ~    $ git clone https://github.com/bitranox/cli_exit_tools.git    $ cd cli_exit_tools    python setup.py install- via makefile:  makefiles are a very convenient way to install. Here we can do much more,  like installing virtual environments, clean caches and so on... code-block:: shell    # from Your shell's homedirectory:    $ git clone https://github.com/bitranox/cli_exit_tools.git    $ cd cli_exit_tools    # to run the tests:    $ make test    # to install the package    $ make install    # to clean the package    $ make clean    # uninstall the package    $ make uninstallRequirements------------following modules will be automatically installed :.. code-block:: bash    ## Project Requirements    click    lib_detect_testenvAcknowledgements----------------- special thanks to &quot;uncle bob&quot; Robert C. Martin, especially for his books on &quot;clean code&quot; and &quot;clean architecture&quot;Contribute----------I would love for you to fork and send me pull request for this project.- `please Contribute &lt;https://github.com/bitranox/cli_exit_tools/blob/master/CONTRIBUTING.md&gt;`_License-------This software is licensed under the `MIT license &lt;http://en.wikipedia.org/wiki/MIT_License&gt;`_---Changelog=========- new MAJOR version for incompatible API changes,- new MINOR version for added functionality in a backwards compatible manner- new PATCH version for backwards compatible bug fixesv1.2.3.2---------2022-06-02: update to github actions checkout@v3 and setup-python@v3v1.2.3.1--------2022-06-01: update github actions test matrixv1.2.3--------2022-03-29: remedy mypy Untyped decorator makes function &quot;cli_info&quot; untypedv1.2.2--------2022-03-25: fix github actions windows testv1.2.1-------2021-11-22: Patch Release    - fix minor readme.rst bugs    - remove second github action yml    - fix &quot;setup.py test&quot;v1.2.0------2021-11-21: Minor Release    - implement github actions    - implement system.exit()v1.1.8--------2020-10-09: service release    - update travis build matrix for linux 3.9-dev    - update travis build matrix (paths) for windows 3.9 / 3.10v1.1.7--------2020-08-08: service release    - fix documentation    - fix travis    - deprecate pycodestyle    - implement flake8v1.1.6--------2020-08-07: fix wheelsv1.1.5--------2020-07-31: fix wheelsv1.1.3--------2020-07-31: initial release</longdescription>
</pkgmetadata>