<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>--------- ReadMe:1. About ----* Python Runtime and Package InstallationFirst of it, it is assumed that python3 and pip3 are installed. Andcvdastwrapper package is installed by pip3. The python3 command can sometimesjust be &quot;python&quot; if your default python installation is version 3 or above.Please run &quot;python --version&quot; to find out. If you are running python 3 or aboveby default, please simply substitute the &quot;python3&quot; commands in examples providedin the remainder of this document.Ensure cvdast is available and up-to date, please run:   pip3 install -U cvdast   To ensure cvdastwrapper is up-to-date, please run:   pip3 install -U cvdastwrapper* Test DirectoryCreate a Test directory where the spec files and config file can be placed. Please feel free to rename the test directory. The subdirectory structure isimportant for the test run. All files generated will be put under the test directory.* Config:The file cv_config.yaml is used to specify the authentication API endpoint andthe credentials to get the access token which is used to fuzz other APIs. There will be information such as the URL of your test application (API endpoint),the list of the fuzz attacks to try etc. in the cv_config.yaml which can be customizedas per user environment. The same file contains all of the custom variables one needsto change. Current values are provided as examples. In the Test directory create a folder called 'specs' and place all the APIspecs (JSONversion only) here. After the test is complete (details in sections below), the summary-&lt;timestamp&gt;.htmlfile will contain pointers to all the test results. In addition, a file calledfordev-apis.csv is generated. This is a highlevel summary for consumption of adev team. It highlight just the API endpoints that seem to &quot;fail&quot; the test, ie.responding positively instead of rejecting the fuzz calls. Please feel free toimport such CSV report to a spreadsheet. The test results are stored in    results    results/perapi    results/perattackTest can run for a long time, so one can adjust the spec and thecollection of attacks in cv_config.yaml to stage each run. Test resultsof different test will not over-write each other. You can regeneratetest report after the test run.2. Generate fuzzing test for all the specs ----With a given cvdast version and a set of specs, you need to only runthis once.cvdastwrapper --generate-tests A successfully run fuzzallspecs will generate as output a list of spectitle names (taken from the spec's title) that can be used to update runall.pylist for test control (later 4. Control test)3. Running Tests -----------To start the tests execute below command:  cvdastwrapper testAbove cvdastwrapper also takes a &quot;regen&quot; argument. Regen will tells it not torun the long test, but just run the cloudVectorDAST.generate_fuzz_report toagain generate the report (it copies the saved report.json from resultsdirectory)It creates a summary-&lt;timestamp&gt;.html in the test. It contains tables allowing convenientaccess to all the reportsResults are saved in a directory called results  results    results/perapi    results/perattackAfter the test is finished you can find subdirectories with the Spec names undereach of these results directories.There are .html files that are the report html pointed to by the summary.Under the perapi directory there are files that are named after the APIname (chopped from the test directory long &quot;for_fuzzing.py&quot; name). Thereport.json of the test run is saved with &lt;apiname&gt;-report.json</longdescription>
</pkgmetadata>