<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># secretbox[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/Preocts/python-template/main.svg)](https://results.pre-commit.ci/latest/github/Preocts/python-template/main)[![Python Tests](https://github.com/Preocts/secretbox/actions/workflows/python-tests.yml/badge.svg)](https://github.com/Preocts/secretbox/actions/workflows/python-tests.yml)[![codecov](https://codecov.io/gh/Preocts/secretbox/branch/main/graph/badge.svg?token=7QFJGMD3JI)](https://codecov.io/gh/Preocts/secretbox)A library that offers a simple method of loading and accessing environmentalvariables, `.env` file values, and other sources of secrets. The class storesvalues to state when load methods are called.Loaded values are also injected into the local environ. This is to assist withadjacent libraries that reference `os.environ` values by default. Requiredvalues can be kept in a `.env` file instead of managing a script to load theminto the environment.---### Requirements- Python &gt;=3.7### Optional Dependencies- boto3- boto3-stubs[secretsmanager]- boto3-stubs[ssm]---## Installation```bash$ pip install secretbox```_Optional AWS support_```bash$ pip install secretbox[aws]```*The optional aws package includes boto3. If you are using secretbox on AWSobjects that already have boto3 install, such as lambda, this remains anoptional package for your deploy.*---# Documentation:## Example use with `auto_load=True`This loads the system environ and the `.env` from the current working directoryinto the class state for quick reference. Loaded secrets can be accessed fromthe `.values` property or from other methods such as `os.getenviron()`.```pythonfrom secretbox import SecretBoxsecrets = SecretBox(auto_load=True)def main() -&gt; int:    &quot;&quot;&quot;Main function&quot;&quot;&quot;    my_sevice_password = secrets.values.get(&quot;SERVICE_PW&quot;)    # More code    return 0if __name__ == &quot;__main__&quot;:    raise SystemExit(main())```## Example use with `use_loaders()`Loaders collect key:value pair secrets from various sources. When you need morethan one source loaded, in a particular order, with a single collection of allloaded values then `.use_loaders()` is the solution. Each loader is executed inturn and the results compiled with the `SecretBox` object.This loads the system environment variables, an AWS secret store, and then aspecific `.env` file if it exists. Secrets are loaded in the order of loaders,replacing any matching keys from the prior loader.```pythonfrom secretbox import SecretBoxsecrets = SecretBox()def main() -&gt; int:    &quot;&quot;&quot;Main function&quot;&quot;&quot;    secrets.use_loaders(        secrets.EnvironLoader(),        secrets.AWSSecretLoader(&quot;mySecrets&quot;, &quot;us-east-1&quot;),        secrets.EnvFileLoader(&quot;sandbox/.override_env&quot;),    )    my_sevice_password = secrets.values.get(&quot;SERVICE_PW&quot;)    # More code    return 0if __name__ == &quot;__main__&quot;:    raise SystemExit(main())```---## Example use with stand-alone loaderLoaders can be used as needed. For this example we only need to load an AWSParameter store.```pythonfrom secretbox import AWSParameterStoreLoadersecrets = AWSParameterStoreLoader(&quot;mystore/params/&quot;, &quot;us-west-2&quot;)secrets.run()def main() -&gt; int:    &quot;&quot;&quot;Main function&quot;&quot;&quot;    my_sevice_password = secrets.values.get(&quot;SERVICE_PW&quot;)    # More code    return 0if __name__ == &quot;__main__&quot;:    raise SystemExit(main())```---### SecretBox arguments:`SecretBox(*, auto_load: bool = False, load_debug: bool = False)`**auto_load**- Loads environment variables and then the .env file from current working  directory if found.**load_debug**- When true, internal logger level is set to DEBUG. Secret values are truncated,  however it is not recommended to leave this on for production deployments.### SecretBox API:**.values**- *Property*: A copy of the `dict[str, str]` key:value pairs loaded**.use_loaders(\*loaders: Loader) -&gt; None**- Loaded results are injected into environ and stored in state.---**NOTE:** All .get methods pull from the instance state of the class and do notreflect changes to the enviornment post-load.**.get(key: str, default: str | None = None) -&gt; str**- Returns the string value of the loaded value by key name. If the key does not  exists then `KeyError` will be raised unless a default is given, then that is  returned.**.set(key: str, value: str) -&gt; None**- Adds the key:value pair to both the secretbox instance and the environment  variables---### LoadersAll loaders follow the same abstract base class. Calling `.run()` will loadsecrets from the loader's source. Each loader will have optional parametersdefinable on instantiation.**EnvironLoader**Load system environ values**EnvFileLoader**Load local .env file.- Args:  - filename: [str] Optional filename (with path) to load, default is `.env`**AWSSecretLoader**Load secrets from an AWS secret manager.- Args:  - aws_sstore: [str] Name of the secret store (not the arn)    - Can be provided through environ `AWS_SSTORE_NAME`  - aws_region: [str] Regional location of secret store    - Can be provided through environ `AWS_REGION_NAME` or `AWS_REGION`**AWSParameterStoreLoader**Load secrets from AWS parameter store.- Args:  - aws_sstore: [str] Name of parameter or path of parameters if endings with    `/`    - Can be provided through environ `AWS_SSTORE_NAME`  - aws_region: [str] Regional Location of parameter(s)    - Can be provided through environ `AWS_REGION_NAME` or `AWS_REGION`---## A note about logging outputThis library restricts any `DEBUG` logging output during the use of a `boto3`client or the methods of that client. This is to prevent the logging of yoursecrets as well as the bearer tokens used within AWS. You can disable this atthe aws loader by adjusting `hide_boto_debug` to be `False`. You will need todefine your own instance of the `AWSParameterStore` or `AWSSecretLoader` andadjust their flag before calling `load_values()`.---## `.env` file formatCurrent format for the `.env` file supports strings only and is parsed in thefollowing order:- Each seperate line is considered a new possible key/value set- Each set is delimted by the first `=` found- Leading `export` keyword is removed from key, case agnostic- Leading and trailing whitespace are removed- Matched leading/trailing single quotes or double quotes will be stripped from  values (not keys).I'm open to suggestions on standards to follow here. This is compiled from&quot;crowd standard&quot; and what is useful at the time.This `.env` example:```conf# Comments are ignoredKEY=valueInvalid lines without the equal sign delimiter will also be ignored```Will be parsed as:```python{&quot;KEY&quot;: &quot;value&quot;}```This `.env` example:```confexport PASSWORD = correct horse battery stapleUSER_NAME=&quot;not_admin&quot;MESSAGE = '    Totally not an &quot;admin&quot; account logging in'```Will be parsed as:```python{    &quot;PASSWORD&quot;: &quot;correct horse battery staple&quot;,    &quot;USER_NAME&quot;: &quot;not_admin&quot;,    &quot;MESSAGE&quot;: '    Totally not an &quot;admin&quot; account logging in',}```---## Local developer installationIt is **strongly** recommended to use a virtual environment([`venv`](https://docs.python.org/3/library/venv.html)) when working with pythonprojects. Leveraging a `venv` will ensure the installed dependency files willnot impact other python projects or any system dependencies.The following steps outline how to install this repo for local development. Seethe [CONTRIBUTING.md](../CONTRIBUTING.md) file in the repo root for informationon contributing to the repo.**Windows users**: Depending on your python install you will use `py` in placeof `python` to create the `venv`.**Linux/Mac users**: Replace `python`, if needed, with the appropriate call tothe desired version while creating the `venv`. (e.g. `python3` or `python3.8`)**All users**: Once inside an active `venv` all systems should allow the use of`python` for command line instructions. This will ensure you are using the`venv`'s python and not the system level python.---## Installation stepsClone this repo and enter root directory of repo:```bashgit clone https://github.com/Preocts/secretboxcd secretbox```Create the `venv`:```bashpython -m venv venv```Activate the `venv`:```bash# Linux/Mac. venv/bin/activate# Windowsvenv\Scripts\activate```The command prompt should now have a `(venv)` prefix on it. `python` will nowcall the version of the interpreter used to create the `venv`Install editable library and development requirements:```console# Update pip and tools$ python -m pip install --upgrade pip# Install editable version of library$ python -m pip install --editable .[dev]```Install pre-commit [(see below for details)](#pre-commit):```console$ pre-commit install```---## Misc StepsRun pre-commit on all files:```console$ pre-commit run --all-files```Run tests:```console$ tox [-r] [-e py3x]```Build dist:```console$ python -m pip install --upgrade build$ python -m build```To deactivate (exit) the `venv`:```console$ deactivate```---## Note on flake8:`flake8` is included in the `requirements-dev.txt` of the project. However itdisagrees with `black`, the formatter of choice, on max-line-length and twogeneral linting errors. `.pre-commit-config.yaml` is already configured toignore these. `flake8` doesn't support `pyproject.toml` so be sure to add thefollowing to the editor of choice as needed.```ini--ignore=W503,E203--max-line-length=88```---## [pre-commit](https://pre-commit.com)&gt; A framework for managing and maintaining multi-language pre-commit hooks.This repo is setup with a `.pre-commit-config.yaml` with the expectation thatany code submitted for review already passes all selected pre-commit checks.`pre-commit` is installed with the development requirements and runs seemlesslywith `git` hooks.---## MakefileThis repo has a Makefile with some quality of life scripts if the systemsupports `make`.  Please note there are no checks for an active `venv` in theMakefile.| PHONY             | Description                                                           || ----------------- | --------------------------------------------------------------------- || `init`            | Update pip to newest version                                          || `install`         | install the project                                                   || `install-test`    | install test requirements and project as editable install             || `install-dev`     | install development/test requirements and project as editable install || `build-dist`      | Build source distribution and wheel distribution                      || `clean-artifacts` | Deletes python/mypy artifacts, cache, and pyc files                   || `clean-tests`     | Deletes tox, coverage, and pytest artifacts                           || `clean-build`     | Deletes build artifacts                                               || `clean-all`       | Runs all clean scripts                                                |</longdescription>
</pkgmetadata>