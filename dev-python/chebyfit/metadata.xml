<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Fit exponential and harmonic functions using Chebyshev polynomials==================================================================Chebyfit is a Python library that implements the algorithms described in:    Analytic solutions to modelling exponential and harmonic functions using    Chebyshev polynomials: fitting frequency-domain lifetime images with    photobleaching. G C Malachowski, R M Clegg, and G I Redford.    J Microsc. 2007; 228(3): 282-295. doi: 10.1111/j.1365-2818.2007.01846.x:Author: `Christoph Gohlke &lt;https://www.cgohlke.com&gt;`_:License: BSD 3-Clause:Version: 2022.9.29Requirements------------This release has been tested with the following requirements and dependencies(other versions may work):- `CPython 3.8.10, 3.9.13, 3.10.7, 3.11.0rc2 &lt;https://www.python.org&gt;`_- `NumPy 1.22.4 &lt;https://pypi.org/project/numpy/&gt;`_Revisions---------2022.9.29- Add type hints.- Convert to Google style docstrings.2022.8.26- Update metadata.- Remove support for Python 3.7 (NEP 29).2021.6.6- Fix compile error on Python 3.10.- Remove support for Python 3.6 (NEP 29).2020.1.1- Remove support for Python 2.7 and 3.5.2019.10.14- Support Python 3.8.- Fix numpy 1type FutureWarning.2019.4.22- Fix setup requirements.2019.1.28- Move modules into chebyfit package.- Add Python wrapper for _chebyfit C extension module.- Fix static analysis issues in _chebyfit.c.Examples--------Fit two-exponential decay function:&gt;&gt;&gt; deltat = 0.5&gt;&gt;&gt; t = numpy.arange(0, 128, deltat)&gt;&gt;&gt; data = 1.1 + 2.2 * numpy.exp(-t / 33.3) + 4.4 * numpy.exp(-t / 55.5)&gt;&gt;&gt; params, fitted = fit_exponentials(data, numexps=2, deltat=deltat)&gt;&gt;&gt; numpy.allclose(data, fitted)True&gt;&gt;&gt; params['offset']array([1.1])&gt;&gt;&gt; params['amplitude']array([[4.4, 2.2]])&gt;&gt;&gt; params['rate']array([[55.5, 33.3]])Fit harmonic function with exponential decay:&gt;&gt;&gt; tt = t * (2 * math.pi / (t[-1] + deltat))&gt;&gt;&gt; data = 1.1 + numpy.exp(-t / 22.2) * (3.3 - 4.4 * numpy.sin(tt)...                                          + 5.5 * numpy.cos(tt))&gt;&gt;&gt; params, fitted = fit_harmonic_decay(data, deltat=0.5)&gt;&gt;&gt; numpy.allclose(data, fitted)True&gt;&gt;&gt; params['offset']array([1.1])&gt;&gt;&gt; params['rate']array([22.2])&gt;&gt;&gt; params['amplitude']array([[3.3, 4.4, 5.5]])Fit experimental time-domain image:&gt;&gt;&gt; data = numpy.fromfile('test.b&amp;h', dtype='float32').reshape((256, 256, 256))&gt;&gt;&gt; data = data[64:64+64]&gt;&gt;&gt; params, fitted = fit_exponentials(data, numexps=1, numcoef=16, axis=0)&gt;&gt;&gt; numpy.allclose(data.sum(axis=0), fitted.sum(axis=0))True</longdescription>
</pkgmetadata>