<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>iowait -- Platform-independent module for I/O completion events===============================================================Different operating systems provide different ways to wait for I/O completionevents: there's ``select()``, ``poll()``, ``epoll()`` and ``kqueue()``. Forcross-platform applications it can be a pain to support all this systemfunctions, especially because each one provides a different interface.IOWait solves this problem by providing a unified interface and using alwaysthe best and faster function available in the platform. Its only limitation isthat, on Windows, it only works for sockets.This library is compatible both with Python 2 and 3.Example-------Here is an usage example. First, we need to create a pair of sockets:    &gt;&gt;&gt; import socket    &gt;&gt;&gt; a, b = socket.socketpair()Then we create a ``IOWait`` object. This object is essentially a wrapper arounda system function (such as ``select()`` or ``poll()``), but exposes always thesame methods and behaves always the same.    &gt;&gt;&gt; from iowait import IOWait    &gt;&gt;&gt; waitobj = IOWait()Now we can watch the first socket for read events in this way:    &gt;&gt;&gt; waitobj.watch(a, read=True)We send some data over the other socket:    &gt;&gt;&gt; b.sendall('this is a test')Calling ``wait()`` on the ``IOWait`` object will tell us that the socket a isready to be read:    &gt;&gt;&gt; events = waitobj.wait()    &gt;&gt;&gt; events #doctest:+ELLIPSIS    [IOEvent(fileobj=&lt;socket object, ...&gt;, read=True, write=False)]The return value of ``wait()`` is a list of three-tuples in the format:``(file, read, write)``, where ``file`` is a file-like object, ``read`` and``write`` tell respectively whether the file is ready to be read or written.Once all the data has been read, the next call to ``wait()`` will blockforever, unless a timeout is specified. The timeout can be zero:    &gt;&gt;&gt; a.recv(14)    'this is a test'    &gt;&gt;&gt; waitobj.wait(0)    []Documentation-------------The documentation is stored in the module's doc string. To read it, use thePython interactive interpreter:    &gt;&gt;&gt; import iowait    &gt;&gt;&gt; help(iowait) #doctest:+SKIP</longdescription>
</pkgmetadata>