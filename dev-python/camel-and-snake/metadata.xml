<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># camel-and-snake## 🐫 and 🐍 ？？？🤣本项目旨在解决 camelCase 和 snake_case 相互转换的问题**支持 python3 以上版本**## 应用场景* 生成对 JavaScript 更友好的 `camelCase` 命名规范的 JSON 响应数据    * 在 JSON 序列化之前将 `snake_case` 的字典转为 `camelCase`    * 在 JSON 反序列化之后将 `camelCase` 的字典转回 `snake_case`## 如何使用？### 安装你可以通过 `pip` 来安装 `camel_and_snake`&gt; 推荐使用 `pipenv` 在虚拟环境下安装```shell$ pip3 install camel_and_snake```### 使用```pythonfrom camel_and_snake import Converter```**snake_case -&gt; camelCase**```pythondict_obj = {    'org_id': 123,    'org_name': 'ShadowCoder',    'member_list': [        {'member_id': 1, 'member_name': 'Cphayim'},        {'member_id': 2, 'member_name': 'Hoyoe'}    ]}# 转换过程中将对深层的每一个字典进行递归替换 key 值，并返回一个新的对象json.dumps(Converter.camelify(dict_obj), indent=2)&quot;&quot;&quot;{  &quot;orgId&quot;: 123,  &quot;orgName&quot;: &quot;ShadowCoder&quot;,  &quot;memberList&quot;: [    {      &quot;memberId&quot;: 1,      &quot;memberName&quot;: &quot;Cphayim&quot;    },    {      &quot;memberId&quot;: 2,      &quot;memberName&quot;: &quot;Hoyoe&quot;    }  ]}&quot;&quot;&quot;```**camelCase -&gt; snake_case**```pythonjson_str = '{&quot;orgId&quot;: 123, &quot;orgName&quot;: &quot;ShadowCoder&quot;, &quot;memberList&quot;: [{&quot;memberId&quot;: 1, &quot;memberName&quot;: &quot;Cphayim&quot;}, {&quot;memberId&quot;: 2, &quot;memberName&quot;: &quot;Hoyoe&quot;}]}'dict_obj = Converter.snakeify(json.loads(json_str))# {'org_id': 123, 'org_name': 'ShadowCoder', 'member_list': [{'member_id': 1, 'member_name': 'Cphayim'}, {'member_id': 2, 'member_name': 'Hoyoe'}]}```## License[MIT](https://opensource.org/licenses/MIT)</longdescription>
</pkgmetadata>