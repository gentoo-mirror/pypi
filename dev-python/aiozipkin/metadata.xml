<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aiozipkin=========.. image:: https://github.com/aio-libs/aiozipkin/workflows/CI/badge.svg    :target: https://github.com/aio-libs/aiozipkin/actions?query=workflow%3ACI.. image:: https://codecov.io/gh/aio-libs/aiozipkin/branch/master/graph/badge.svg    :target: https://codecov.io/gh/aio-libs/aiozipkin.. image:: https://api.codeclimate.com/v1/badges/1ff813d5cad2d702cbf1/maintainability   :target: https://codeclimate.com/github/aio-libs/aiozipkin/maintainability   :alt: Maintainability.. image:: https://img.shields.io/pypi/v/aiozipkin.svg    :target: https://pypi.python.org/pypi/aiozipkin.. image:: https://readthedocs.org/projects/aiozipkin/badge/?version=latest    :target: http://aiozipkin.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://badges.gitter.im/Join%20Chat.svg    :target: https://gitter.im/aio-libs/Lobby    :alt: Chat on Gitter**aiozipkin** is Python 3.6+ module that adds distributed tracing capabilitiesfrom asyncio_ applications with zipkin (http://zipkin.io) server instrumentation.zipkin_ is a distributed tracing system. It helps gather timing data neededto troubleshoot latency problems in microservice architectures. It managesboth the collection and lookup of this data. Zipkinâ€™s design is based onthe Google Dapper paper.Applications are instrumented with  **aiozipkin** report timing data to zipkin_.The Zipkin UI also presents a Dependency diagram showing how many tracedrequests went through each application. If you are troubleshooting latencyproblems or errors, you can filter or sort all traces based on theapplication, length of trace, annotation, or timestamp... image:: https://raw.githubusercontent.com/aio-libs/aiozipkin/master/docs/zipkin_animation2.gif    :alt: zipkin ui animationFeatures========* Distributed tracing capabilities to **asyncio** applications.* Support zipkin_ ``v2`` protocol.* Easy to use API.* Explicit context handling, no thread local variables.* Can work with jaeger_ and stackdriver_ through zipkin compatible API.zipkin vocabulary-----------------Before code lets learn important zipkin_ vocabulary, for more detailedinformation please visit https://zipkin.io/pages/instrumenting.. image:: https://raw.githubusercontent.com/aio-libs/aiozipkin/master/docs/zipkin_glossary.png    :alt: zipkin ui glossary* **Span** represents one specific method (RPC) call* **Annotation** string data associated with a particular timestamp in span* **Tag** - key and value associated with given span* **Trace** - collection of spans, related to serving particular requestSimple example--------------.. code:: python    import asyncio    import aiozipkin as az    async def run():        # setup zipkin client        zipkin_address = 'http://127.0.0.1:9411/api/v2/spans'        endpoint = az.create_endpoint(            &quot;simple_service&quot;, ipv4=&quot;127.0.0.1&quot;, port=8080)        tracer = await az.create(zipkin_address, endpoint, sample_rate=1.0)        # create and setup new trace        with tracer.new_trace(sampled=True) as span:            # give a name for the span            span.name(&quot;Slow SQL&quot;)            # tag with relevant information            span.tag(&quot;span_type&quot;, &quot;root&quot;)            # indicate that this is client span            span.kind(az.CLIENT)            # make timestamp and name it with START SQL query            span.annotate(&quot;START SQL SELECT * FROM&quot;)            # imitate long SQL query            await asyncio.sleep(0.1)            # make other timestamp and name it &quot;END SQL&quot;            span.annotate(&quot;END SQL&quot;)        await tracer.close()    if __name__ == &quot;__main__&quot;:        loop = asyncio.get_event_loop()        loop.run_until_complete(run())aiohttp example---------------*aiozipkin* includes *aiohttp* server instrumentation, for this create`web.Application()` as usual and install aiozipkin plugin:.. code:: python    import aiozipkin as az    def init_app():        host, port = &quot;127.0.0.1&quot;, 8080        app = web.Application()        endpoint = az.create_endpoint(&quot;AIOHTTP_SERVER&quot;, ipv4=host, port=port)        tracer = await az.create(zipkin_address, endpoint, sample_rate=1.0)        az.setup(app, tracer)That is it, plugin adds middleware that tries to fetch context from headers,and create/join new trace. Optionally on client side you can add propagationheaders in order to force tracing and to see network latency between client andserver... code:: python    import aiozipkin as az    endpoint = az.create_endpoint(&quot;AIOHTTP_CLIENT&quot;)    tracer = await az.create(zipkin_address, endpoint)    with tracer.new_trace() as span:        span.kind(az.CLIENT)        headers = span.context.make_headers()        host = &quot;http://127.0.0.1:8080/api/v1/posts/{}&quot;.format(i)        resp = await session.get(host, headers=headers)        await resp.text()Documentation-------------http://aiozipkin.readthedocs.io/Installation------------Installation process is simple, just::    $ pip install aiozipkinSupport of other collectors===========================**aiozipkin** can work with any other zipkin_ compatible service, currently wetested it with jaeger_ and stackdriver_.Jaeger support--------------jaeger_ supports zipkin_ span format as result it is possible to use *aiozipkin*with jaeger_ server. You just need to specify *jaeger* server address and itshould work out of the box. Not need to run local zipkin server.For more informations see tests and jaeger_ documentation... image:: https://raw.githubusercontent.com/aio-libs/aiozipkin/master/docs/jaeger.png    :alt: jaeger ui animationStackdriver support-------------------Google stackdriver_ supports zipkin_ span format as result it is possible touse *aiozipkin* with this google_ service. In order to make this work youneed to setup zipkin service locally, that will send trace to the cloud. Seegoogle_ cloud documentation how to setup make zipkin collector:.. image:: https://raw.githubusercontent.com/aio-libs/aiozipkin/master/docs/stackdriver.png    :alt: jaeger ui animationRequirements------------* Python_ 3.6+* aiohttp_.. _PEP492: https://www.python.org/dev/peps/pep-0492/.. _Python: https://www.python.org.. _aiohttp: https://github.com/KeepSafe/aiohttp.. _asyncio: http://docs.python.org/3.5/library/asyncio.html.. _uvloop: https://github.com/MagicStack/uvloop.. _zipkin: http://zipkin.io.. _jaeger: http://jaeger.readthedocs.io/en/latest/.. _stackdriver: https://cloud.google.com/stackdriver/.. _google: https://cloud.google.com/trace/docs/zipkinCHANGES=======..    You should *NOT* be adding new change log entries to this file, this    file is managed by towncrier. You *may* edit previous change logs to    fix problems like typo corrections or such.    To add a new change log entry, please see    https://pip.pypa.io/en/latest/development/#adding-a-news-entry    we named the news folder &quot;changes&quot;.    WARNING: Don't drop the next directive!.. towncrier release notes start1.1.1 (2021-10-23)==================Bugfixes--------- Fix unhandled AssertionError in aiohttp integration when unknown resource requested by the user.  `#400 &lt;https://github.com/aio-libs/aiozipkin/issues/400&gt;`_- Fix ``NoneType`` error when using ``SystemRoute``.  `#410 &lt;https://github.com/aio-libs/aiozipkin/issues/410&gt;`_----1.1.0 (2021-05-17)==================Bugfixes--------- Expect trace request context to be of SimpleNamespace type.  `#385 &lt;https://github.com/aio-libs/aiozipkin/issues/385&gt;`_----1.0.0 (2020-11-06)==================Bugfixes--------- Support Python 3.8 and Python 3.9  `#259 &lt;https://github.com/aio-libs/aiozipkin/issues/259&gt;`_----0.7.1 (2020-09-20)==================Bugfixes--------- Fix `Manifest.in` file; add `CHANGES.rst` to the Source Tarball.0.7.0 (2020-07-17)==================Features--------- Add support of AWS X-Ray trace id format.  `#273 &lt;https://github.com/aio-libs/aiozipkin/issues/273&gt;`_----0.6.0 (2019-10-12)------------------* Add context var support for python3.7 aiohttp instrumentation #187* Single header tracing support #189* Add retries and batches to transport (thanks @konstantin-stepanov)* Drop python3.5 support #238* Use new typing syntax in codebase #2370.5.0 (2018-12-25)------------------* More strict typing configuration is used #147* Fixed bunch of typos in code and docs #151 #153 (thanks @deejay1)* Added interface for Transport #155 (thanks @deejay1)* Added create_custom helper for easer tracer configuration #160 (thanks @deejay1)* Added interface for Sampler #160 (thanks @deejay1)* Added py.typed marker0.4.0 (2018-07-11)------------------* Add more coverage with typing #147* Breaking change: typo send_inteval =&gt; send_interval #144 (thanks @gugu)* Breaking change: do not append api/v2/spans to the zipkin dress #1500.3.0 (2018-06-13)------------------* Add support http.route tag for aiohttp #138* Make zipkin address builder more permissive #141 (thanks @dsantosfff)0.2.0 (2018-03-03)------------------* Breaking change: az.create is coroutine now #114* Added context manger for tracer object #114* Added more mypy types #1170.1.1 (2018-01-26)------------------* Added new_child helper method #830.1.0 (2018-01-21)------------------After few months of work and beta releases here are basic features:* Initial release.* Implemented zipkin v2 protocol with HTTP transport* Added jaeger support* Added stackdriver support* Added aiohttp server support* Added aiohttp 3.0.0 client tracing support* Added examples and demos</longdescription>
</pkgmetadata>