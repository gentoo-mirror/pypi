<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/UCBerkeleySETI/turbo_seti.svg?branch=master)](https://travis-ci.org/UCBerkeleySETI/turbo_seti)[![Documentation Status](https://readthedocs.org/projects/turbo-seti/badge/?version=latest)](https://turbo-seti.readthedocs.io/en/latest/?badge=latest)[![codecov](https://codecov.io/gh/UCBerkeleySETI/turbo_seti/branch/master/graph/badge.svg)](https://codecov.io/gh/UCBerkeleySETI/turbo_seti)TURBO_SETI=============================***turbo*SETI** is an analysis tool for the search of narrow band drifting signals in filterbank data (frequency vs. time).The main purpose of the code is to hopefully one day find signals of extraterrestrial origin!!It can search the data for hundreds of drift rates (in Hz/sec). It can handle either .fil or .h5 file formats.**NOTE**:This code is stable, but new features are currently under development.Some details for the expert eye:- Python based, with taylor tree in Numba for improved performance.- Pre-calculated `drift index arrays`.- Output plain text file with information on each hit.- Including output reader into a pandas DataFrame.It was originally based on `dedoppler` [dedoppler](http://github.com/cs150bf/gbt_seti/); which is based on  `rawdopplersearch.c`  [`gbt_seti/src/rawdopplersearch.c`](https://github.com/UCBerkeleySETI/gbt_seti/tree/master/src/rawdopplersearch.c))&amp;nbsp;-------------------### Dependencies- Python 3.7+- astropy- numpy- blimpy 2.0.34+ (Breakthrough Listen I/O Methods for Python :  https://github.com/UCBerkeleySETI/blimpy)- pandas- toolz- fsspec- dask- dask[bag]- numba- cloudpickle- cupy (NVIDIA GPU mode only)&amp;nbsp;--------------------------## InstallationIf you have not yet installed blimpy, do so in this manner:`python3 -m pip install --user -U blimpy`Then, install turbo_seti:`python3 -m pip install --user -U turbo_seti`## NVIDIA GPU UsersAlready included is NUMBA Just-in-Time (JIT) CPU performance enhancements. However, if you have NVIDIA GPU hardware on the computer where turbo_seti is going to execute, you can get significant additional performance improvement.  Enable GPU enhanced processing with these steps:1. Install pypi package &quot;cupy&quot;:  `python3 -m pip install cupy`2. Run the executable this way:  `turboSETI &lt;PATH_TO_INPUT_HDF5_FILE&gt; -g y [OTHER OPTIONS]`## Usage### Expected Input File FormatAt the moment, the `turboSETI` command line and the `FindDoppler` object expect a Filterbank HDF5 file (.h5) or a Filterbank SIGPROC file (.fil).  If a SIGPROC file is supplied, it will automatically be converted to an HDF5 file which resides in the same directory as the SIGPROC file.### Usage as a Command LineRun with data: `turboSETI &lt;PATH_TO_INPUT_HDF5_FILE&gt; [OPTIONS]`For an explanation of the program parameters: `turboSETI -h`### Usage as a Python Package```from turbo_seti.find_doppler.find_doppler import FindDopplerfdop = FindDoppler(datafile=my_HDF5_file, ...)fdop.search(...)```### Example Usage as a Python Package```import timefrom blimpy import Waterfallfrom turbo_seti.find_doppler.find_doppler import FindDopplerH5DIR = &quot;/path_to_seti_data/voyager/&quot;H5PATH = H5DIR + &quot;Voyager1.single_coarse.fine_res.h5&quot;OUT_DIR = &quot;/path_to_output_directory&quot;print(&quot;\nUsing HDF5 file: {}\nHeader and data shape:&quot;.format(H5PATH))# -- Get a report of header and data shapewf = Waterfall(H5PATH)wf.info()# -- Instantiate FindDoppler.print(&quot;\nInstantiating the FindDoppler object.&quot;)fdop = FindDoppler(datafile=H5PATH, max_drift=4, snr=25, out_dir=OUT_DIR)# -- Search for hits and report elapsed time.print(&quot;\nBegin doppler search.  Please wait ...&quot;)t1 = time.time()fdop.search()elapsed_time = time.time() - t1print(&quot;\nFindDoppler.search() elapsed time = {} seconds&quot;.format(elapsed_time))```### Sample DAT File Output```# -------------------------- o --------------------------# File ID: Voyager1.single_coarse.fine_res.h5 # -------------------------- o --------------------------# Source:Voyager1# MJD: 57650.782094907408RA: 17h10m03.984sDEC: 12d10m58.8s# DELTAT:  18.253611DELTAF(Hz):  -2.793968# --------------------------# Top_Hit_# Drift_Rate SNR Uncorrected_Frequency Corrected_Frequency Index freq_start freq_end SEFD SEFD_freq Coarse_Channel_Number Full_number_of_hits # --------------------------001 -0.392226 30.612128   8419.319368   8419.319368739933   8419.321003   8419.3177400.0      0.0000000858002 -0.373093245.707984   8419.297028   8419.297028747929   8419.298662   8419.2953990.0      0.0000000858003 -0.392226 31.220652   8419.274374   8419.274374756037   8419.276009   8419.2727450.0      0.0000000858```### Sample Console Logging (level=INFO) OutputNote that the coarse channel number appears as a suffix of the logger name.  For example, &quot;find_doppler.8&quot; depicts logging for find_doppler.py in coarse channel number 8 (relative to 0).```Using HDF5 file: /seti_data/voyager/Voyager1.single_coarse.fine_res.h5Header and data shape:--- File Info ---DIMENSION_LABELS :   ['frequency' 'feed_id' 'time']        az_start :                              0.0       data_type :                                1            fch1 :            8421.386717353016 MHz            foff :      -2.7939677238464355e-06 MHz           ibeam :                                1      machine_id :                               20          nbeams :                                1           nbits :                               32          nchans :                          1048576            nifs :                                1     rawdatafile : guppi_57650_67573_Voyager1_0002.0000.raw     source_name :                         Voyager1         src_dej :                       12:10:58.8         src_raj :                     17:10:03.984    telescope_id :                                6           tsamp :                     18.253611008   tstart (ISOT) :          2016-09-19T18:46:13.000    tstart (MJD) :                57650.78209490741        za_start :                              0.0Num ints in file :                               16      File shape :                 (16, 1, 1048576)--- Selection Info ---Data selection shape :                 (16, 1, 1048576)Minimum freq (MHz) :                8418.457032646984Maximum freq (MHz) :                8421.386717353016Instantiating the FindDoppler object.find_doppler.0  INFO     {'DIMENSION_LABELS': array(['frequency', 'feed_id', 'time'], dtype=object), 'az_start': 0.0, 'data_type': 1, 'fch1': 8421.386717353016, 'foff': -2.7939677238464355e-06, 'ibeam': 1, 'machine_id': 20, 'nbeams': 1, 'nbits': 32, 'nchans': 1048576, 'nifs': 1, 'rawdatafile': 'guppi_57650_67573_Voyager1_0002.0000.raw', 'source_name': 'Voyager1', 'src_dej': &lt;Angle 12.183 deg&gt;, 'src_raj': &lt;Angle 17.16777333 hourangle&gt;, 'telescope_id': 6, 'tsamp': 18.253611008, 'tstart': 57650.78209490741, 'za_start': 0.0}Begin doppler search.  Please wait ...find_doppler.0  INFO     File: /seti_data/voyager/Voyager1.single_coarse.fine_res.h5 drift rates (min, max): (0.000000, 4.000000) SNR: 25.000000Starting ET search using /seti_data/voyager/Voyager1.single_coarse.fine_res.h5find_doppler.0  INFO     Parameters: datafile=/seti_data/voyager/Voyager1.single_coarse.fine_res.h5, max_drift=4, min_drift=0.0, snr=25, out_dir=/seti_data/voyager/, coarse_chans=None, flagging=False, n_coarse_chan=None, kernels=None, gpu_backend=False, precision=2, append_output=False, log_level_int=20, obs_info={'pulsar': 0, 'pulsar_found': 0, 'pulsar_dm': 0.0, 'pulsar_snr': 0.0, 'pulsar_stats': array([0., 0., 0., 0., 0., 0.]), 'RFI_level': 0.0, 'Mean_SEFD': 0.0, 'psrflux_Sens': 0.0, 'SEFDs_val': [0.0], 'SEFDs_freq': [0.0], 'SEFDs_freq_up': [0.0]}find_doppler.0  INFO     Top hit found! SNR 30.612128, Drift Rate -0.392226, index 739933find_doppler.0  INFO     Top hit found! SNR 245.707984, Drift Rate -0.373093, index 747929find_doppler.0  INFO     Top hit found! SNR 31.220652, Drift Rate -0.392226, index 756037FindDoppler.search() elapsed time = 9.972093105316162 seconds```&amp;nbsp;--------------------------</longdescription>
</pkgmetadata>