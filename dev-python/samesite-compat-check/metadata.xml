<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>samesite-compat-check=====================[![Latest PyPI version](https://img.shields.io/pypi/v/samesite-compat-check.svg)](https://pypi.python.org/pypi/samesite-compat-check)[![Latest Travis CI build status](https://travis-ci.org/peergradeio/samesite-compat-check.png)](https://travis-ci.org/peergradeio/samesite-compat-check)This is a Python port of the [Chromium project's browser compatibility check] for `SameSite=None`-cookies.samesite-compat-check exposes a single function `should_send_same_site_none`which takes a `User-Agent` string and returns `True` if `SameSite=None` issupported by the browser with the given `User-Agent` and `False` if not.If `User-Agent` is `None` then `should_send_same_site_none` returns `True`.  _This is the only addition on top of the pseudocode from the Chromium project_The reason for this added behavior is to handle the case where the`User-Agent`-header is not sent. The logic is that only  browsers thatspecifically mishandle `SameSite=None` should have the attribute omitted. Youcan safely send `SameSite=None`-attribute to a browser that doesn't recognizethe attribute (e.g. an older browser). As in that case `SameSite` will beignored, and you'll automatically get the behavior you intended, as cookiesbefore the `SameSite`-attibute were introduced worked as similar to`SameSite=None`.SameSite cookies----------------You probably already know what `SameSite`-cookies are -- if not, I recommend youread &lt;https://web.dev/samesite-cookies-explained/&gt; at the very least.`SameSite=None`-cookies are mostly relevant to people who needs cookies on CORSrequests or need cookies inside an iframe. So if you don't use cookies whendoing CORS or in iframes (or use `SameSite=None` for some other reason) youcan safely ignore this package.You may say -- who uses iframes nowadays? Well, plenty of things do!Youtube Embeds, the Intercom widget, that new little &quot;Log in with Google&quot;popover on sites like Medium.Well, if you're one those people who need `SameSite=None`, you'll find that agood portion of your users have browsers that are incompatible with `SameSite`cookies that have the value `None`.That's where this library comes in. It checks the `User-Agent` string, and returnswhether it is from a browser that is incompatible. Recommendation is to just not use `SameSite` for those browsers. Since thebrowsers are &quot;old&quot; and don't enforce the `SameSite`-rules for cookies wherethe flag is not present, they will have the right behavior when you don't send`SameSite=None`.You'll need to pass in the value of the `User-Agent`-header from the libraryyou're using (Django, Flask...) and then either set or not set `SameSite=None`on the cookie.[Chromium project's browser compatibility check]: https://www.chromium.org/updates/same-site/incompatible-clientsUsage-----General use:```pythonfrom samesite_compat_check import should_send_same_site_noneif should_send_same_site_none(user_agent):    # Set cookie with `SameSite=None`else:    # Set cookie without any `SameSite` attribute```### Django```pythonif should_send_same_site_none(request.META['HTTP_USER_AGENT']):    response.cookies['my_precious_cookie']['samesite'] = 'None'else:    pass```Setting `response.set_cookie(..., samesite='none')` will be allowed fromDjango 3.1 and onwards. Currently only `lax` and `strict` are allowed in`response.set_cookie()`. Django only allows lowercase values for `samesite`.Accoring to the spec lowercase/uppercase should not matter, however I have nottested that particular detail in a browser.### Flask```pythonfrom flask import requestkwargs = {}if should_send_same_site_none(request.headers.get('User-Agent')):    kwargs['samesite'] = 'None'# Requires Werkzeug&gt;=1.0.0 (a Flask dependency) in order to use `samesite` response.set_cookie(    'my_precious_cookie', value='123abc', secure=True, **kwargs)```Requirements------------`samesite-compat-check` has no dependencies and is tested onPython 2.7, 3.4, 3.5, 3.6, 3.7, 3.8, and PyPy 3.Installation------------    pip install samesite-compat-check    Useful references----------------* &lt;https://github.com/jotes/django-cookies-samesite&gt;    This package serves as a good example of implementing the SameSite cookie in Django.    However, only checks for Chrome/Chromium version 51-66, not iOS, macOS, and UC Browser.  However * &lt;https://github.com/GoogleChromeLabs/samesite-examples&gt;    This repo has examples for setting a cookie with the SameSite-attribute in Python and in Flask,  but does not implement any of the browser incompatibility checks.* &lt;https://github.com/linsight/should-send-same-site-none&gt;    A Javascript package similar to this one.* &lt;https://itnext.io/user-agent-sniffing-only-way-to-deal-with-upcoming-samesite-cookie-changes-6f79a18e541&gt;    An alternative implementation in Javascript that isn't based off the Chromium project pseudocode.Authors-------`samesite-compat-check` was written by `Malthe JÃ¸rgensen &lt;malthe.jorgensen@gmail.com&gt;` at Peergrade Inc.,and is a port of Chromium's pseudocode for checking browsers incompatible with `SameSite=None` cookieswhich can be found here:&lt;https://www.chromium.org/updates/same-site/incompatible-clients&gt;That pseudocode is Copyright 2019 Google LLC. and released under the Apache 2.0license.The tests use a sample of User-Agent strings from &lt;https://developers.whatismybrowser.com/useragents/&gt;.</longdescription>
</pkgmetadata>