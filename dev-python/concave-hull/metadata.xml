<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># concave_hullA very fast 2D concave hull algorithm.![](docs/hull.png)Credits goes to:-   &lt;https://github.com/mapbox/concaveman&gt;-   &lt;https://github.com/sadaszewski/concaveman-cpp&gt;Online document: &lt;https://concave-hull.readthedocs.io/en/latest/&gt;&lt;!--intro-start--&gt;## Install### via pip```bashpip install -U concave_hull```### from source```bashgit clone --recursive https://github.com/cubao/concave_hullpip install ./concave_hull```Or```bashpip install git+https://github.com/cubao/concave_hull.git```(you can build wheels for later reuse by ` pip wheel git+https://github.com/cubao/concave_hull.git`)## UsageSignature:```python# importfrom concave_hull import concave_hull, concave_hull_indexes# get concave hull indexesconcave_hull_indexes(       points: Union[numpy.ndarray, List, Tuple],       *,       concavity: float = 2.0,       length_threshold: float = 0.0,       # you can just ignore &quot;convex_hull_indexes&quot;       convex_hull_indexes: numpy.ndarray[numpy.int32[m, 1]] = None,) -&gt; numpy.ndarray[numpy.int32[m, 1]]# get concave hull pointsconcave_hull(       points: Union[numpy.ndarray, List, Tuple],       ... # same as) -&gt; Union[numpy.ndarray, List, Tuple]# P.S., we provide convex_hull (Graham scan)from concave_hull import convex_hull, convex_hull_indexes```-   `concavity` is a relative measure of concavity. 1 results in a relatively    detailed shape, Infinity results in a convex hull. You can use values lower    than 1, but they can produce pretty crazy shapes.-   `length_threshold`: when a segment length is under this threshold, it stops    being considered for further detalization. Higher values result in simpler    shapes.(document from &lt;https://github.com/mapbox/concaveman&gt;)Example (see full code in [`test.py`](test.py)):```pythonimport matplotlib.pyplot as pltimport numpy as npfrom scipy.spatial import ConvexHullfrom concave_hull import concave_hull, concave_hull_indexespoints = []c = np.array([250, 250])for x in np.arange(100, 400, 5 * np.pi):    for y in np.arange(100, 400, 5 * np.pi):        if x &gt; c[0] and y &gt; c[1]:            continue        r = np.linalg.norm(c - [x, y])        if r &gt; 150:            continue        points.append([x, y])points = np.array(points)convex_hull = ConvexHull(points[:, :2])  # it's already N-by-2, I'm just emphasizing# https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.htmlplt.plot(points[:, 0], points[:, 1], &quot;o&quot;)for simplex in convex_hull.simplices:    plt.plot(points[simplex, 0], points[simplex, 1], &quot;g-&quot;, alpha=0.5)idxes = concave_hull_indexes(    points[:, :2],    length_threshold=50,)# you can get coordinates by `points[idxes]`assert np.all(points[idxes] == concave_hull(points, length_threshold=50))for f, t in zip(idxes[:-1], idxes[1:]):  # noqa    seg = points[[f, t]]    plt.plot(seg[:, 0], seg[:, 1], &quot;r-&quot;, alpha=0.5)# plt.savefig('hull.png')plt.show()```&lt;!--intro-end--&gt;## Tests```make python_installmake python_test```</longdescription>
</pkgmetadata>