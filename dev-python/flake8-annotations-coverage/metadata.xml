<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flake8-annotations-coverage[![Build Status](https://github.com/best-doctor/flake8-annotations-coverage/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/best-doctor/flake8-annotations-coverage/actions/workflows/build.yml)[![Maintainability](https://api.codeclimate.com/v1/badges/8480286aaae1c0612351/maintainability)](https://codeclimate.com/github/best-doctor/flake8-annotations-coverage/maintainability)[![Test Coverage](https://api.codeclimate.com/v1/badges/8480286aaae1c0612351/test_coverage)](https://codeclimate.com/github/best-doctor/flake8-annotations-coverage/test_coverage)An extension for flake8 to report on files with a lot of codewithout type annotations.This is mostly useful when you add type annotations to existinglarge codebase and want to know if new code in annotated modules is annotated.Minimal annotations coverage percentage for each file can be configured via`--min-coverage-percents` option, default is 75.Function is treated as annotated if it has annotation for at leastone argument or return type. This is enough for mypy to threat the functionnot as dynamically typed.## Installation```bashpip install flake8-annotations-coverage```## ExampleSample file:```python# test.pydef annotated_function(some_arg: int):    passdef unannotated_function():    pass```Usage:```terminal$ flake8 test.pytest.py:0:1: TAE001 too few type annotations```## Error codes| Error code | Description                      ||:----------:|:--------------------------------:|| TAE001     | Too few type annotations in file |## ContributingWe would love you to contribute to our project. It's simple:1. Create an issue with bug you found or proposal you have.   Wait for approve from maintainer.1. Create a pull request. Make sure all checks are green.1. Fix review comments if any.1. Be awesome.Here are useful tips:- You can run all checks and tests with `make check`.  Please do it before CI does.- We use [BestDoctor python styleguide](https://github.com/best-doctor/guides/blob/master/guides/en/python_styleguide.md).- We respect [Django CoC](https://www.djangoproject.com/conduct/).  Make soft, not bullshit.</longdescription>
</pkgmetadata>