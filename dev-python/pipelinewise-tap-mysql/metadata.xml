<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pipelinewise-tap-mysql[![PyPI version](https://badge.fury.io/py/pipelinewise-tap-mysql.svg)](https://badge.fury.io/py/pipelinewise-tap-mysql)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pipelinewise-tap-mysql.svg)](https://pypi.org/project/pipelinewise-tap-mysql/)[![License: MIT](https://img.shields.io/badge/License-GPLv3-yellow.svg)](https://opensource.org/licenses/GPL-3.0)[Singer](https://www.singer.io/) tap that extracts data from a [MySQL](https://www.mysql.com/) database and produces JSON-formatted data following the [Singer spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md).This is a [PipelineWise](https://transferwise.github.io/pipelinewise) compatible tap connector.## How to use itThe recommended method of running this tap is to use it from [PipelineWise](https://transferwise.github.io/pipelinewise). When running it from PipelineWise you don't need to configure this tap with JSON files and most of things are automated. Please check the related documentation at [Tap MySQL](https://transferwise.github.io/pipelinewise/connectors/taps/mysql.html)If you want to run this [Singer Tap](https://singer.io) independently please read further.## UsageThis section dives into basic usage of `tap-mysql` by walking through extractingdata from a table. It assumes that you can connect to and read from a MySQLdatabase.### InstallFirst, make sure Python 3 is installed on your system or follow theseinstallation instructions for [Mac](http://docs.python-guide.org/en/latest/starting/install3/osx/) or[Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04).It's recommended to use a virtualenv:```bash  python3 -m venv venv  pip install pipelinewise-tap-mysql```or```bash  python3 -m venv venv  . venv/bin/activate  pip install --upgrade pip  pip install .```### Have a source databaseThere's some important business data siloed in this MySQL database -- we need toextract it. Here's the table we'd like to sync:```mysql&gt; select * from example_db.animals;+----|----------|----------------------+| id | name     | likes_getting_petted |+----|----------|----------------------+|  1 | aardvark |                    0 ||  2 | bear     |                    0 ||  3 | cow      |                    1 |+----|----------|----------------------+3 rows in set (0.00 sec)```### Create the configuration fileCreate a config file containing the database connection credentials, see [sample](config.json.sample).List of config parameters:| Parameter         | type                          | required | default                                                                                                                                                           | description                                                                                                               ||-------------------|-------------------------------|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|| host              | string                        | yes      | -                                                                                                                                                                 | mysql/mariadb host                                                                                                        || port              | int                           | yes      | -                                                                                                                                                                 | mysql/mariadb port                                                                                                        || user              | string                        | yes      | -                                                                                                                                                                 | db username                                                                                                               || password          | string                        | yes      | -                                                                                                                                                                 | db password                                                                                                               || cursorclass       | string                        | No       | `pymysql.cursors.SSCursor`                                                                                                                                        | set cursorclass used by PyMYSQL                                                                                           || database          | string                        | No       | -                                                                                                                                                                 | Database to use, None to not use a particular one. Used by PyMYSQL                                                        || server_id         | int                           | False    | Randomly generated int                                                                                                                                            | Used as the slave id when this tap is connecting to the server                                                            || filter_dbs        | string                        | False    | -                                                                                                                                                                 | Comma separated list of schemas to extract tables only from particular schemas and to improve data extraction performance || use_gtid          | bool                          | False    | False                                                    &lt;br/&gt;                                                                                                         | Flag to enable log based replication using GTID               || engine            | string ('mysql' or 'mariadb') | False    | 'mysql'                                                                                                                                                           | Indicate which flavor the server is, used for LOG_BASED with GTID                                                         || ssl               | string (&quot;true&quot;)               | No       | False                                                                                                                                                             | Enable SSL connection                                                                                                     || ssl_ca            | string                        | No       | -                                                                                                                                                                 | for self-signed SSL                                                                                                       || ssl_cert          | string                        | No       | -                                                                                                                                                                 | for self-signed SSL                                                                                                       || ssl_key           | string                        | No       | -                                                                                                                                                                 | for self-signed SSL                                                                                                       || internal_hostname | string | No       | -                                                                                                                                                                 | Override match hostname for google cloud                                                                                  || session_sqls      | List of strings               | No       | ```['SET @@session.time_zone=&quot;+0:00&quot;', 'SET @@session.wait_timeout=28800', 'SET @@session.net_read_timeout=3600', 'SET @@session.innodb_lock_wait_timeout=3600']``` | Set session variables dynamically.                                                                                        |### Discovery modeThe tap can be invoked in discovery mode to find the available tables andcolumns in the database:```bash$ tap-mysql --config config.json --discover```A discovered catalog is output, with a JSON-schema description of each table. Asource table directly corresponds to a Singer stream.```json{  &quot;streams&quot;: [    {      &quot;tap_stream_id&quot;: &quot;example_db-animals&quot;,      &quot;table_name&quot;: &quot;animals&quot;,      &quot;schema&quot;: {        &quot;type&quot;: &quot;object&quot;,        &quot;properties&quot;: {          &quot;name&quot;: {            &quot;inclusion&quot;: &quot;available&quot;,            &quot;type&quot;: [              &quot;null&quot;,              &quot;string&quot;            ],            &quot;maxLength&quot;: 255          },          &quot;id&quot;: {            &quot;inclusion&quot;: &quot;automatic&quot;,            &quot;minimum&quot;: -2147483648,            &quot;maximum&quot;: 2147483647,            &quot;type&quot;: [              &quot;null&quot;,              &quot;integer&quot;            ]          },          &quot;likes_getting_petted&quot;: {            &quot;inclusion&quot;: &quot;available&quot;,            &quot;type&quot;: [              &quot;null&quot;,              &quot;boolean&quot;            ]          }        }      },      &quot;metadata&quot;: [        {          &quot;breadcrumb&quot;: [],          &quot;metadata&quot;: {            &quot;row-count&quot;: 3,            &quot;table-key-properties&quot;: [              &quot;id&quot;            ],            &quot;database-name&quot;: &quot;example_db&quot;,            &quot;selected-by-default&quot;: false,            &quot;is-view&quot;: false,          }        },        {          &quot;breadcrumb&quot;: [            &quot;properties&quot;,            &quot;id&quot;          ],          &quot;metadata&quot;: {            &quot;sql-datatype&quot;: &quot;int(11)&quot;,            &quot;selected-by-default&quot;: true          }        },        {          &quot;breadcrumb&quot;: [            &quot;properties&quot;,            &quot;name&quot;          ],          &quot;metadata&quot;: {            &quot;sql-datatype&quot;: &quot;varchar(255)&quot;,            &quot;selected-by-default&quot;: true          }        },        {          &quot;breadcrumb&quot;: [            &quot;properties&quot;,            &quot;likes_getting_petted&quot;          ],          &quot;metadata&quot;: {            &quot;sql-datatype&quot;: &quot;tinyint(1)&quot;,            &quot;selected-by-default&quot;: true          }        }      ],      &quot;stream&quot;: &quot;animals&quot;    }  ]}```### Field selectionIn sync mode, `tap-mysql` consumes the catalog and looks for tables and fieldshave been marked as _selected_ in their associated metadata entries.Redirect output from the tap's discovery mode to a file so that it can bemodified:```bash$ tap-mysql -c config.json --discover &gt; properties.json```Then edit `properties.json` to make selections. In this example we want the`animals` table. The stream's metadata entry (associated with `&quot;breadcrumb&quot;: []`) gets a top-level `selected` flag, as does its columns' metadata entries. Additionally,we will mark the `animals` table to replicate using a `FULL_TABLE` strategy. For more,information, see [Replication methods and state file](#replication-methods-and-state-file).```json[  {    &quot;breadcrumb&quot;: [],    &quot;metadata&quot;: {      &quot;row-count&quot;: 3,      &quot;table-key-properties&quot;: [        &quot;id&quot;      ],      &quot;database-name&quot;: &quot;example_db&quot;,      &quot;selected-by-default&quot;: false,      &quot;is-view&quot;: false,      &quot;selected&quot;: true,      &quot;replication-method&quot;: &quot;FULL_TABLE&quot;    }  },  {    &quot;breadcrumb&quot;: [      &quot;properties&quot;,      &quot;id&quot;    ],    &quot;metadata&quot;: {      &quot;sql-datatype&quot;: &quot;int(11)&quot;,      &quot;selected-by-default&quot;: true,      &quot;selected&quot;: true    }  },  {    &quot;breadcrumb&quot;: [      &quot;properties&quot;,      &quot;name&quot;    ],    &quot;metadata&quot;: {      &quot;sql-datatype&quot;: &quot;varchar(255)&quot;,      &quot;selected-by-default&quot;: true,      &quot;selected&quot;: true    }  },  {    &quot;breadcrumb&quot;: [      &quot;properties&quot;,      &quot;likes_getting_petted&quot;    ],    &quot;metadata&quot;: {      &quot;sql-datatype&quot;: &quot;tinyint(1)&quot;,      &quot;selected-by-default&quot;: true,      &quot;selected&quot;: true    }  }]```### Sync modeWith a properties catalog that describes field and table selections, the tap can be invoked in sync mode:```bash$ tap-mysql -c config.json --properties properties.json```Messages are written to standard output following the Singer specification. Theresultant stream of JSON data can be consumed by a Singer target.```json{&quot;value&quot;: {&quot;currently_syncing&quot;: &quot;example_db-animals&quot;}, &quot;type&quot;: &quot;STATE&quot;}{&quot;key_properties&quot;: [&quot;id&quot;], &quot;stream&quot;: &quot;animals&quot;, &quot;schema&quot;: {&quot;properties&quot;: {&quot;name&quot;: {&quot;inclusion&quot;: &quot;available&quot;, &quot;maxLength&quot;: 255, &quot;type&quot;: [&quot;null&quot;, &quot;string&quot;]}, &quot;likes_getting_petted&quot;: {&quot;inclusion&quot;: &quot;available&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;boolean&quot;]}, &quot;id&quot;: {&quot;inclusion&quot;: &quot;automatic&quot;, &quot;minimum&quot;: -2147483648, &quot;type&quot;: [&quot;null&quot;, &quot;integer&quot;], &quot;maximum&quot;: 2147483647}}, &quot;type&quot;: &quot;object&quot;}, &quot;type&quot;: &quot;SCHEMA&quot;}{&quot;stream&quot;: &quot;animals&quot;, &quot;version&quot;: 1509133344771, &quot;type&quot;: &quot;ACTIVATE_VERSION&quot;}{&quot;record&quot;: {&quot;name&quot;: &quot;aardvark&quot;, &quot;likes_getting_petted&quot;: false, &quot;id&quot;: 1}, &quot;stream&quot;: &quot;animals&quot;, &quot;version&quot;: 1509133344771, &quot;type&quot;: &quot;RECORD&quot;}{&quot;record&quot;: {&quot;name&quot;: &quot;bear&quot;, &quot;likes_getting_petted&quot;: false, &quot;id&quot;: 2}, &quot;stream&quot;: &quot;animals&quot;, &quot;version&quot;: 1509133344771, &quot;type&quot;: &quot;RECORD&quot;}{&quot;record&quot;: {&quot;name&quot;: &quot;cow&quot;, &quot;likes_getting_petted&quot;: true, &quot;id&quot;: 3}, &quot;stream&quot;: &quot;animals&quot;, &quot;version&quot;: 1509133344771, &quot;type&quot;: &quot;RECORD&quot;}{&quot;stream&quot;: &quot;animals&quot;, &quot;version&quot;: 1509133344771, &quot;type&quot;: &quot;ACTIVATE_VERSION&quot;}{&quot;value&quot;: {&quot;currently_syncing&quot;: &quot;example_db-animals&quot;, &quot;bookmarks&quot;: {&quot;example_db-animals&quot;: {&quot;initial_full_table_complete&quot;: true}}}, &quot;type&quot;: &quot;STATE&quot;}{&quot;value&quot;: {&quot;currently_syncing&quot;: null, &quot;bookmarks&quot;: {&quot;example_db-animals&quot;: {&quot;initial_full_table_complete&quot;: true}}}, &quot;type&quot;: &quot;STATE&quot;}```## Replication methods and state fileIn the above example, we invoked `tap-mysql` without providing a _state_ file and without specifying a replication method. The ways to replicate a given table are `FULL_TABLE`, `LOG_BASED` and `INCREMENTAL`.### LOG_BASEDLOG_BASED replication makes use of the server's binary logs (binlogs), this method can work with primary servers, the tap acts as a replica and requests the primary to stream log events,the tap then consumes events pertaining to row changes (inserts, updates, deletes), binlog file rotate and gtid events.Log_based method always requires an initial sync to get a snapshot of the table and current binlog coordinates/gtid position.The tap support two ways of consuming log events: using binlog coordinates or GTID, the default behavior is using binlog coordinates, when turning the `use_gtid` flag, you have to specify the engine flavor (mariadb/mysql) due to how different are the GTID implementations in these two engines.When enabling the `use_gtid` flag and the engine is MariaDB, the tap will dynamically infer the GTID pos from existing binlog coordinate in the state, if the engine is mysql, it will fail.#### State when using binlog coordinates```json{  &quot;bookmarks&quot;: {    &quot;example_db-table1&quot;: {&quot;log_file&quot;: &quot;mysql-binlog.0003&quot;, &quot;log_pos&quot;: 3244},    &quot;example_db-table2&quot;: {&quot;log_file&quot;: &quot;mysql-binlog.0001&quot;, &quot;log_pos&quot;: 42},    &quot;example_db-table3&quot;: {&quot;log_file&quot;: &quot;mysql-binlog.0003&quot;, &quot;log_pos&quot;: 100}  }}```#### State when using GTID```json{  &quot;bookmarks&quot;: {    &quot;example_db-table1&quot;: {&quot;log_file&quot;: &quot;mysql-binlog.0003&quot;, &quot;log_pos&quot;: 3244, &quot;gtid&quot;: &quot;0:364864374:599&quot;},    &quot;example_db-table2&quot;: {&quot;log_file&quot;: &quot;mysql-binlog.0001&quot;, &quot;log_pos&quot;: 42, &quot;gtid&quot;: &quot;0:364864374:375&quot;},    &quot;example_db-table3&quot;: {&quot;log_file&quot;: &quot;mysql-binlog.0003&quot;, &quot;log_pos&quot;: 100, &quot;gtid&quot;: &quot;0:364864374:399&quot;}  }}```### Full TableFull-table replication extracts all data from the source table each time the tap is invoked.### IncrementalIncremental replication works in conjunction with a state file to only extractnew records each time the tap is invoked. This requires a replication key to bespecified in the table's metadata as well.#### ExampleLet's sync the `animals` table again, but this time using incrementalreplication. The replication method and replication key are set in thetable's metadata entry in properties file:```json{  &quot;streams&quot;: [    {      &quot;tap_stream_id&quot;: &quot;example_db-animals&quot;,      &quot;table_name&quot;: &quot;animals&quot;,      &quot;schema&quot;: { ... },      &quot;metadata&quot;: [        {          &quot;breadcrumb&quot;: [],          &quot;metadata&quot;: {            &quot;row-count&quot;: 3,            &quot;table-key-properties&quot;: [              &quot;id&quot;            ],            &quot;database-name&quot;: &quot;example_db&quot;,            &quot;selected-by-default&quot;: false,            &quot;is-view&quot;: false,            &quot;replication-method&quot;: &quot;INCREMENTAL&quot;,            &quot;replication-key&quot;: &quot;id&quot;          }        },        ...      ],      &quot;stream&quot;: &quot;animals&quot;    }  ]}```We have no meaningful state so far, so just invoke the tap in sync mode againwithout a state file:```bash$ tap-mysql -c config.json --properties properties.json```The output messages look very similar to when the table was replicated using thedefault `FULL_TABLE` replication method. One important difference is that the`STATE` messages now contain a `replication_key_value` -- a bookmark orhigh-water mark -- for data that was extracted:```json{&quot;type&quot;: &quot;STATE&quot;, &quot;value&quot;: {&quot;currently_syncing&quot;: &quot;example_db-animals&quot;}}{&quot;stream&quot;: &quot;animals&quot;, &quot;type&quot;: &quot;SCHEMA&quot;, &quot;schema&quot;: {&quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: {&quot;id&quot;: {&quot;type&quot;: [&quot;null&quot;, &quot;integer&quot;], &quot;minimum&quot;: -2147483648, &quot;maximum&quot;: 2147483647, &quot;inclusion&quot;: &quot;automatic&quot;}, &quot;name&quot;: {&quot;type&quot;: [&quot;null&quot;, &quot;string&quot;], &quot;inclusion&quot;: &quot;available&quot;, &quot;maxLength&quot;: 255}, &quot;likes_getting_petted&quot;: {&quot;type&quot;: [&quot;null&quot;, &quot;boolean&quot;], &quot;inclusion&quot;: &quot;available&quot;}}}, &quot;key_properties&quot;: [&quot;id&quot;]}{&quot;stream&quot;: &quot;animals&quot;, &quot;type&quot;: &quot;ACTIVATE_VERSION&quot;, &quot;version&quot;: 1509135204169}{&quot;stream&quot;: &quot;animals&quot;, &quot;type&quot;: &quot;RECORD&quot;, &quot;version&quot;: 1509135204169, &quot;record&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;aardvark&quot;, &quot;likes_getting_petted&quot;: false}}{&quot;stream&quot;: &quot;animals&quot;, &quot;type&quot;: &quot;RECORD&quot;, &quot;version&quot;: 1509135204169, &quot;record&quot;: {&quot;id&quot;: 2, &quot;name&quot;: &quot;bear&quot;, &quot;likes_getting_petted&quot;: false}}{&quot;stream&quot;: &quot;animals&quot;, &quot;type&quot;: &quot;RECORD&quot;, &quot;version&quot;: 1509135204169, &quot;record&quot;: {&quot;id&quot;: 3, &quot;name&quot;: &quot;cow&quot;, &quot;likes_getting_petted&quot;: true}}{&quot;type&quot;: &quot;STATE&quot;, &quot;value&quot;: {&quot;bookmarks&quot;: {&quot;example_db-animals&quot;: {&quot;version&quot;: 1509135204169, &quot;replication_key_value&quot;: 3, &quot;replication_key&quot;: &quot;id&quot;}}, &quot;currently_syncing&quot;: &quot;example_db-animals&quot;}}{&quot;type&quot;: &quot;STATE&quot;, &quot;value&quot;: {&quot;bookmarks&quot;: {&quot;example_db-animals&quot;: {&quot;version&quot;: 1509135204169, &quot;replication_key_value&quot;: 3, &quot;replication_key&quot;: &quot;id&quot;}}, &quot;currently_syncing&quot;: null}}```Note that the final `STATE` message has a `replication_key_value` of `3`,reflecting that the extraction ended on a record that had an `id` of `3`.Subsequent invocations of the tap will pick up from this bookmark.Normally, the target will echo the last `STATE` after it's finished processingdata. For this example, let's manually write a `state.json` file using the`STATE` message:```json{  &quot;bookmarks&quot;: {    &quot;example_db-animals&quot;: {      &quot;version&quot;: 1509135204169,      &quot;replication_key_value&quot;: 3,      &quot;replication_key&quot;: &quot;id&quot;    }  },  &quot;currently_syncing&quot;: null}```Let's add some more animals to our farm:```mysql&gt; insert into animals (name, likes_getting_petted) values ('dog', true), ('elephant', true), ('frog', false);``````bash$ tap-mysql -c config.json --properties properties.json --state state.json```This invocation extracts any data since (and including) the`replication_key_value`:```json{&quot;type&quot;: &quot;STATE&quot;, &quot;value&quot;: {&quot;bookmarks&quot;: {&quot;example_db-animals&quot;: {&quot;replication_key&quot;: &quot;id&quot;, &quot;version&quot;: 1509135204169, &quot;replication_key_value&quot;: 3}}, &quot;currently_syncing&quot;: &quot;example_db-animals&quot;}}{&quot;key_properties&quot;: [&quot;id&quot;], &quot;schema&quot;: {&quot;properties&quot;: {&quot;name&quot;: {&quot;maxLength&quot;: 255, &quot;inclusion&quot;: &quot;available&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;string&quot;]}, &quot;id&quot;: {&quot;maximum&quot;: 2147483647, &quot;minimum&quot;: -2147483648, &quot;inclusion&quot;: &quot;automatic&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;integer&quot;]}, &quot;likes_getting_petted&quot;: {&quot;inclusion&quot;: &quot;available&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;boolean&quot;]}}, &quot;type&quot;: &quot;object&quot;}, &quot;type&quot;: &quot;SCHEMA&quot;, &quot;stream&quot;: &quot;animals&quot;}{&quot;type&quot;: &quot;ACTIVATE_VERSION&quot;, &quot;version&quot;: 1509135204169, &quot;stream&quot;: &quot;animals&quot;}{&quot;record&quot;: {&quot;name&quot;: &quot;cow&quot;, &quot;id&quot;: 3, &quot;likes_getting_petted&quot;: true}, &quot;type&quot;: &quot;RECORD&quot;, &quot;version&quot;: 1509135204169, &quot;stream&quot;: &quot;animals&quot;}{&quot;record&quot;: {&quot;name&quot;: &quot;dog&quot;, &quot;id&quot;: 4, &quot;likes_getting_petted&quot;: true}, &quot;type&quot;: &quot;RECORD&quot;, &quot;version&quot;: 1509135204169, &quot;stream&quot;: &quot;animals&quot;}{&quot;record&quot;: {&quot;name&quot;: &quot;elephant&quot;, &quot;id&quot;: 5, &quot;likes_getting_petted&quot;: true}, &quot;type&quot;: &quot;RECORD&quot;, &quot;version&quot;: 1509135204169, &quot;stream&quot;: &quot;animals&quot;}{&quot;record&quot;: {&quot;name&quot;: &quot;frog&quot;, &quot;id&quot;: 6, &quot;likes_getting_petted&quot;: false}, &quot;type&quot;: &quot;RECORD&quot;, &quot;version&quot;: 1509135204169, &quot;stream&quot;: &quot;animals&quot;}{&quot;type&quot;: &quot;STATE&quot;, &quot;value&quot;: {&quot;bookmarks&quot;: {&quot;example_db-animals&quot;: {&quot;replication_key&quot;: &quot;id&quot;, &quot;version&quot;: 1509135204169, &quot;replication_key_value&quot;: 6}}, &quot;currently_syncing&quot;: &quot;example_db-animals&quot;}}{&quot;type&quot;: &quot;STATE&quot;, &quot;value&quot;: {&quot;bookmarks&quot;: {&quot;example_db-animals&quot;: {&quot;replication_key&quot;: &quot;id&quot;, &quot;version&quot;: 1509135204169, &quot;replication_key_value&quot;: 6}}, &quot;currently_syncing&quot;: null}}```## To run tests:1. You'll need to have a running MySQL or MariaDB server to run the tests. Run the following SQL commands as a privileged user to create the required objects:```CREATE USER &lt;mysql-user&gt; IDENTIFIED BY '&lt;mysql-password&gt;';CREATE DATABASE tap_mysql_test;GRANT ALL PRIVILEGES ON tap_mysql_test.* TO &lt;mysql-user&gt;;```**Note**: The user and password can be anything but the database name needs to be `tap_mysql_test`.2. Define the environment variables that are required to run the tests:```  export TAP_MYSQL_HOST=&lt;mysql-host&gt;  export TAP_MYSQL_PORT=&lt;mysql-port&gt;  export TAP_MYSQL_USER=&lt;mysql-user&gt;  export TAP_MYSQL_PASSWORD=&lt;mysql-password&gt;  export TAP_MYSQL_ENGINE=&lt;engine&gt;```3. Install python test dependencies in a virtual env```bashpython3 -m venv venv. venv/bin/activatepip install --upgrade pippip install .[test]```4. To run tests:```bashnosetests -c .noserc tests```### To run pylint:1. Install python dependencies and run python linter```  python3 -m venv venv  . venv/bin/activate  pip install --upgrade pip  pip install .[test]  pylint --rcfile .pylintrc tap_mysql```---Based on Stitch documentation</longdescription>
</pkgmetadata>