<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jinja2-simple-tags`jinja2-simple-tags` is a library that provides a simple way to create custom template tags in Jinja2 templates.[![PyPI](https://img.shields.io/pypi/v/jinja2-simple-tags.svg)](https://pypi.org/project/jinja2-simple-tags/)[![Build Status](https://travis-ci.com/dldevinc/jinja2-simple-tags.svg?branch=master)](https://travis-ci.org/dldevinc/jinja2-simple-tags)## Compatibility-   `python` &gt;= 3.6-   `Jinja2` &gt;= 2.10## Installation`pip install jinja2-simple-tags`## UsageTo use `jinja2-simple-tags`, you need to create a subclass of one of the provided tag types and implement the `render` method.### `StandaloneTag``StandaloneTag` is a tag that doesn't require a closing tag. It can be used like this:```pythonfrom datetime import datetimefrom jinja2_simple_tags import StandaloneTagclass NowExtension(StandaloneTag):    tags = {&quot;now&quot;}    def render(self, format=&quot;%Y-%m-%d %H:%I:%S&quot;):        return datetime.now().strftime(format)``````jinja2{% now %}               {# 2023-04-27 20:08:03 #}{% now '%m/%d/%Y' %}    {# 04/27/2023 #}```#### EscapingBy default, the output of `StandaloneTag` will be escaped. To disable escaping,set the `safe_output` property of your tag to `True`:```pythonfrom jinja2_simple_tags import StandaloneTagclass AlertExtension(StandaloneTag):    safe_output = True    tags = {&quot;alert&quot;}    def render(self, message):        return &quot;&lt;script&gt;alert('{}')&lt;/script&gt;&quot;.format(message)```You can also return a `jinja2.Markup` object from the `render()` method to explicitly mark the output as safe.### `ContainerTag``ContainerTag` is a tag that requires a closing tag and can contain arbitrary content.It can be used like this:```pythonimport hmacfrom jinja2_simple_tags import ContainerTagclass HMACExtension(ContainerTag):    tags = {&quot;hmac&quot;}    def render(self, secret, digest=&quot;sha256&quot;, caller=None):        content = str(caller()).encode()        if isinstance(secret, str):            secret = secret.encode()        signing = hmac.new(secret, content, digestmod=digest)        return signing.hexdigest()``````jinja2{% hmac 'SECRET', digest='sha1' %}Hello world!{% endhmac %}{# e29371e24dc99c5641681728855a92e26829e288 #}```### ContextCurrent context can be accessed using `self.context` attribute of the tag class:```pythonfrom jinja2_simple_tags import StandaloneTagclass UserNameExtension(StandaloneTag):    tags = {&quot;username&quot;}    def render(self):        return self.context[&quot;user&quot;].username```### AssignmentIn addition to returning the rendered value,  `ContainerTag` and `StandaloneTag`also supports assigning the output to a variable in the context. This can be doneusing the `as` keyword:```jinja2{% now '%m/%d/%Y' as today %}    ...{{ today }}         {# 04/27/2023 #}``````jinja2{% hmac 'SECRET', digest='sha1' as signature %}Hello world!{% endhmac %}...{{ signature }}     {# e29371e24dc99c5641681728855a92e26829e288 #}```</longdescription>
</pkgmetadata>