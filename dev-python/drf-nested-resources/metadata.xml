<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># drf-nested-resourcesThis is a django rest framework extension to allow developers to create nestedresources.## How to use### Configuration of nested resourcesFor this example we are going to create a simple API with the followingendpoints:    /developers/    /developers/&lt;id&gt;    /developers/&lt;id&gt;/languages/    /developers/&lt;id&gt;/languages/&lt;id&gt;First we start with the following Django models:```pythonfrom django.db.models import CASCADEfrom django.db.models.base import Modelfrom django.db.models.fields import CharFieldfrom django.db.models.fields.related import ForeignKeyclass Developer(Model):    name = CharField(max_length=20)class ProgrammingLanguage(Model):    name = CharField(max_length=20)    author = ForeignKey(        Developer,         related_name='programming_languages',         on_delete=CASCADE,    )```We will have the two viewsets for both the `developers` and `languages` resourcecollections.```pythonfrom rest_framework.viewsets import ModelViewSetfrom drf_nested_resources.fields import HyperlinkedNestedModelSerializerclass _DeveloperSerializer(HyperlinkedNestedModelSerializer):    class Meta(object):        model = Developer        fields = ('url', 'name', 'programming_languages')class DeveloperViewSet(ModelViewSet):    queryset = Developer.objects.all()    serializer_class = _DeveloperSerializerclass _ProgrammingLanguageSerializer(HyperlinkedNestedModelSerializer):    class Meta(object):        model = ProgrammingLanguage        fields = ('url', 'name', 'author')class ProgrammingLanguageViewSet(ModelViewSet):    queryset = ProgrammingLanguage.objects.all()    serializer_class = _ProgrammingLanguageSerializer```The related fields in the ViewSets `author` and `programming_languages` shouldfollow the model representation so that `author` will give us a url for thedeveloper who wrote the ProgrammingLanguage and the `programming_languages`should give us a list of urls for the ProgrammingLanguages that the Developerwrote.This is how you would generate the urlpatterns for them:```python_RESOURCES = [    Resource(        'developer',        'developers',        DeveloperViewSet,        [            NestedResource(                'language',                'languages',                ProgrammingLanguageViewSet,                parent_field_lookup='author',                )            ],        ),    ]urlpatterns = make_urlpatterns_from_resources(_RESOURCES)```For more examples of different relationships and authorization check the testsuite.Changelog=========Version 2.0.0-------------Added support for Django 2.2 and removed support for Django &lt; 2.2Version 1.3------------------Updated dependencies and added coverage configVersion 1.2 Beta 3------------------Fixed error when urlconf was not explicitly set on the requestVersion 1.2 Beta 2------------------Fixed support for non-session-based authenticators when checking permissions inviewsets in the ancestry.Version 1.2 Beta 1------------------Implemented ability to force a field value in a nested resource to be set tothe URL of an ascending resource. This is done using the optional attribute``field_forced_to_ancestor`` on the serializer's ``Meta`` class.Version 1.1-----------Re-worked the mechanism for URL generation to support cross-linking resourcetrees.**Breaking change**: Any previous usage of many-to-many fields on variablesin the current request's URL will now break.Version 1.0 Release Candidate 3-------------------------------Added proper support for namespaced URLsVersion 1.0 Release Candidate 1-------------------------------Added support for Django 1.10 and Rest Framework 3.4.3Version 1.0 Beta 1 (unreleased)-------------------------------Initial release.</longdescription>
</pkgmetadata>