<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># printbuddiesA few utilities to do terminal printing tricks. &lt;br&gt;Install with:&lt;pre&gt;pip install printbuddies&lt;/pre&gt;Contains two classes and three functions: ProgBar, Spinner, print_in_place, ticker, and clear.&lt;br&gt;### ProgBarProgBar is a self-incrementing, dynamically sized progress bar.&lt;br&gt;The progress counter and completion values can be manually overriden if desired.&lt;br&gt;The width of the progress bar is set according to a ratio of the terminal widthso it will be resized automatically if the terminal width is changed.&lt;br&gt;&lt;pre&gt;from printbuddies import ProgBartotal = 100bar = ProgBar(total=total)for _ in range(total):    bar.display()bar.reset()my_list = [bar.display(return_object=i) for i in range(total)]&lt;/pre&gt;The display function has a 'return_object' parameter, allowing ProgBar to be used in comprehensions.&lt;pre&gt;bar = ProgBar(10)def square(x: int | float)-&gt;int|float:    return x * xmyList = [bar.display(return_object=square(i)) for i in range(10)]{progress bar gets displayed}print(myList)[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/pre&gt;ProgBar also supports being used with a context manager.### PoolBarA convenience class to integrate `concurrent.futures.ThreadPoolExecutor` and `concurrent.futures.ProcessPoolExecutor` with `ProgBar`.&lt;br&gt;Constructor takes the pool executor type, a list of functions to execute, and an optional list of args for those functions.&lt;br&gt;The `execute()` method returns a list of whatever those functions return.&lt;br&gt;`execute()` can also take any optional `ProgBar` constructor arguments.&lt;pre&gt;def my_func(page: int)-&gt;str:    return requests.get(f&quot;https://somesite.com/pages/{page}&quot;).textpool = PoolBar(&quot;thread&quot;, [my_func for _ in range(10)], [(i,) for i in range(10)])pages = pool.execute(width_ratio=0.75)&lt;/pre&gt;### SpinnerThis class will print the next character from a sequence every time it's `display` method is called, clearing whatever is currently on the line.&lt;br&gt;The characters will be cycled through indefinitely.&lt;br&gt;&lt;pre&gt;from printbuddies import Spinnerspinner = Spinner()for _ in range(10):    spinner.display()&lt;/pre&gt;The default character sequence can be overridden:&lt;pre&gt;spinner = Spinner(sequence=[&quot;~_~_~_~_~_~_&quot;, &quot;_~_~_~_~_~_~&quot;])for _ in range(10):    spinner.display()&lt;/pre&gt;When used with a context manager, the last character printed will be cleared from the terminal upon exiting.### print_in_place'print_in_place' erases the current line in the terminal and then writes the value of the 'string' param to the terminal.&lt;br&gt;&lt;pre&gt;from printbuddies import print_in_placeimport time#This will print numbers 0-99 to the terminal with each digit overwriting the last.for i in range(100):    print_in_place(i)    time.sleep(0.1)&lt;/pre&gt;### ticker'ticker' prints a list of strings to the terminal with empty lines above and belowsuch that previous text in the terminal is no longer visible.&lt;br&gt;Visually, It functions as a multi-line version of print_in_place.&lt;br&gt;&lt;pre&gt;from printbuddies import tickerimport time#This will produce visually the same output as the above examplefor i in range(100):    ticker([i])    time.sleep(0.1)&lt;/pre&gt;### clearA call to `printbuddies.clear()` simply clears the current line from the terminal.</longdescription>
</pkgmetadata>