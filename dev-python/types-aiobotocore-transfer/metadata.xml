<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-transfer&quot;&gt;&lt;/a&gt;# types-aiobotocore-transfer[![PyPI - types-aiobotocore-transfer](https://img.shields.io/pypi/v/types-aiobotocore-transfer.svg?color=blue)](https://pypi.org/project/types-aiobotocore-transfer)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-transfer.svg?color=blue)](https://pypi.org/project/types-aiobotocore-transfer)[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-transfer?color=blue)](https://pypistats.org/packages/types-aiobotocore-transfer)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.Transfer 2.5.0](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/transfer.html#Transfer)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.13.0](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-transfer docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_transfer/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-transfer](#types-aiobotocore-transfer)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `Transfer` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[transfer]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[transfer]'# standalone installationpython -m pip install types-aiobotocore-transfer```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-transfer```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[transfer]` in your environment:```bashpython -m pip install 'types-aiobotocore[transfer]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[transfer]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[transfer]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[transfer]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[transfer]` with services you use in your  environment:```bashpython -m pip install 'types-aiobotocore[transfer]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[transfer]` in your environment:```bashpython -m pip install 'types-aiobotocore[transfer]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[transfer]` in your environment:```bashpython -m pip install 'types-aiobotocore[transfer]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`TransferClient` provides annotations for `session.create_client(&quot;transfer&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_transfer import TransferClientsession = get_session()async with session.create_client(&quot;transfer&quot;) as client:    client: TransferClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_transfer.paginator` module contains type annotations for allpaginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_transfer import TransferClientfrom types_aiobotocore_transfer.paginator import (    ListAccessesPaginator,    ListAgreementsPaginator,    ListCertificatesPaginator,    ListConnectorsPaginator,    ListExecutionsPaginator,    ListProfilesPaginator,    ListSecurityPoliciesPaginator,    ListServersPaginator,    ListTagsForResourcePaginator,    ListUsersPaginator,    ListWorkflowsPaginator,)session = get_session()async with session.create_client(&quot;transfer&quot;) as client:    client: TransferClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    list_accesses_paginator: ListAccessesPaginator = client.get_paginator(&quot;list_accesses&quot;)    list_agreements_paginator: ListAgreementsPaginator = client.get_paginator(&quot;list_agreements&quot;)    list_certificates_paginator: ListCertificatesPaginator = client.get_paginator(        &quot;list_certificates&quot;    )    list_connectors_paginator: ListConnectorsPaginator = client.get_paginator(&quot;list_connectors&quot;)    list_executions_paginator: ListExecutionsPaginator = client.get_paginator(&quot;list_executions&quot;)    list_profiles_paginator: ListProfilesPaginator = client.get_paginator(&quot;list_profiles&quot;)    list_security_policies_paginator: ListSecurityPoliciesPaginator = client.get_paginator(        &quot;list_security_policies&quot;    )    list_servers_paginator: ListServersPaginator = client.get_paginator(&quot;list_servers&quot;)    list_tags_for_resource_paginator: ListTagsForResourcePaginator = client.get_paginator(        &quot;list_tags_for_resource&quot;    )    list_users_paginator: ListUsersPaginator = client.get_paginator(&quot;list_users&quot;)    list_workflows_paginator: ListWorkflowsPaginator = client.get_paginator(&quot;list_workflows&quot;)```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`types_aiobotocore_transfer.waiter` module contains type annotations for allwaiters.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_transfer.client import TransferClientfrom types_aiobotocore_transfer.waiter import ServerOfflineWaiter, ServerOnlineWaitersession = get_session()async with session.create_client(&quot;transfer&quot;) as client:    client: TransferClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    server_offline_waiter: ServerOfflineWaiter = client.get_waiter(&quot;server_offline&quot;)    server_online_waiter: ServerOnlineWaiter = client.get_waiter(&quot;server_online&quot;)```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_transfer.literals` module contains literals extracted fromshapes that can be used in user code for type checking.```pythonfrom types_aiobotocore_transfer.literals import (    AgreementStatusTypeType,    As2TransportType,    CertificateStatusTypeType,    CertificateTypeType,    CertificateUsageTypeType,    CompressionEnumType,    CustomStepStatusType,    DomainType,    EncryptionAlgType,    EncryptionTypeType,    EndpointTypeType,    ExecutionErrorTypeType,    ExecutionStatusType,    HomeDirectoryTypeType,    IdentityProviderTypeType,    ListAccessesPaginatorName,    ListAgreementsPaginatorName,    ListCertificatesPaginatorName,    ListConnectorsPaginatorName,    ListExecutionsPaginatorName,    ListProfilesPaginatorName,    ListSecurityPoliciesPaginatorName,    ListServersPaginatorName,    ListTagsForResourcePaginatorName,    ListUsersPaginatorName,    ListWorkflowsPaginatorName,    MdnResponseType,    MdnSigningAlgType,    OverwriteExistingType,    ProfileTypeType,    ProtocolType,    ServerOfflineWaiterName,    ServerOnlineWaiterName,    SetStatOptionType,    SigningAlgType,    StateType,    TlsSessionResumptionModeType,    WorkflowStepTypeType,    TransferServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    WaiterName,    RegionName,)def check_value(value: AgreementStatusTypeType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`types_aiobotocore_transfer.type_defs` module contains structures and shapesassembled to typed dictionaries for additional type checking.```pythonfrom types_aiobotocore_transfer.type_defs import (    As2ConnectorConfigTypeDef,    HomeDirectoryMapEntryTypeDef,    PosixProfileTypeDef,    ResponseMetadataTypeDef,    TagTypeDef,    EndpointDetailsTypeDef,    IdentityProviderDetailsTypeDef,    ProtocolDetailsTypeDef,    CustomStepDetailsTypeDef,    DeleteAccessRequestRequestTypeDef,    DeleteAgreementRequestRequestTypeDef,    DeleteCertificateRequestRequestTypeDef,    DeleteConnectorRequestRequestTypeDef,    DeleteHostKeyRequestRequestTypeDef,    DeleteProfileRequestRequestTypeDef,    DeleteServerRequestRequestTypeDef,    DeleteSshPublicKeyRequestRequestTypeDef,    DeleteStepDetailsTypeDef,    DeleteUserRequestRequestTypeDef,    DeleteWorkflowRequestRequestTypeDef,    DescribeAccessRequestRequestTypeDef,    DescribeAgreementRequestRequestTypeDef,    DescribeCertificateRequestRequestTypeDef,    DescribeConnectorRequestRequestTypeDef,    DescribeExecutionRequestRequestTypeDef,    DescribeHostKeyRequestRequestTypeDef,    DescribeProfileRequestRequestTypeDef,    DescribeSecurityPolicyRequestRequestTypeDef,    DescribedSecurityPolicyTypeDef,    DescribeServerRequestRequestTypeDef,    WaiterConfigTypeDef,    DescribeUserRequestRequestTypeDef,    DescribeWorkflowRequestRequestTypeDef,    LoggingConfigurationTypeDef,    SshPublicKeyTypeDef,    EfsFileLocationTypeDef,    ExecutionErrorTypeDef,    S3FileLocationTypeDef,    ImportSshPublicKeyRequestRequestTypeDef,    S3InputFileLocationTypeDef,    PaginatorConfigTypeDef,    ListAccessesRequestRequestTypeDef,    ListedAccessTypeDef,    ListAgreementsRequestRequestTypeDef,    ListedAgreementTypeDef,    ListCertificatesRequestRequestTypeDef,    ListedCertificateTypeDef,    ListConnectorsRequestRequestTypeDef,    ListedConnectorTypeDef,    ListExecutionsRequestRequestTypeDef,    ListHostKeysRequestRequestTypeDef,    ListedHostKeyTypeDef,    ListProfilesRequestRequestTypeDef,    ListedProfileTypeDef,    ListSecurityPoliciesRequestRequestTypeDef,    ListServersRequestRequestTypeDef,    ListedServerTypeDef,    ListTagsForResourceRequestRequestTypeDef,    ListUsersRequestRequestTypeDef,    ListedUserTypeDef,    ListWorkflowsRequestRequestTypeDef,    ListedWorkflowTypeDef,    S3TagTypeDef,    SendWorkflowStepStateRequestRequestTypeDef,    UserDetailsTypeDef,    StartFileTransferRequestRequestTypeDef,    StartServerRequestRequestTypeDef,    StopServerRequestRequestTypeDef,    TestIdentityProviderRequestRequestTypeDef,    UntagResourceRequestRequestTypeDef,    UpdateAgreementRequestRequestTypeDef,    UpdateCertificateRequestRequestTypeDef,    UpdateHostKeyRequestRequestTypeDef,    UpdateProfileRequestRequestTypeDef,    WorkflowDetailTypeDef,    UpdateConnectorRequestRequestTypeDef,    CreateAccessRequestRequestTypeDef,    DescribedAccessTypeDef,    UpdateAccessRequestRequestTypeDef,    UpdateUserRequestRequestTypeDef,    CreateAccessResponseTypeDef,    CreateAgreementResponseTypeDef,    CreateConnectorResponseTypeDef,    CreateProfileResponseTypeDef,    CreateServerResponseTypeDef,    CreateUserResponseTypeDef,    CreateWorkflowResponseTypeDef,    EmptyResponseMetadataTypeDef,    ImportCertificateResponseTypeDef,    ImportHostKeyResponseTypeDef,    ImportSshPublicKeyResponseTypeDef,    ListSecurityPoliciesResponseTypeDef,    StartFileTransferResponseTypeDef,    TestIdentityProviderResponseTypeDef,    UpdateAccessResponseTypeDef,    UpdateAgreementResponseTypeDef,    UpdateCertificateResponseTypeDef,    UpdateConnectorResponseTypeDef,    UpdateHostKeyResponseTypeDef,    UpdateProfileResponseTypeDef,    UpdateServerResponseTypeDef,    UpdateUserResponseTypeDef,    CreateAgreementRequestRequestTypeDef,    CreateConnectorRequestRequestTypeDef,    CreateProfileRequestRequestTypeDef,    CreateUserRequestRequestTypeDef,    DescribedAgreementTypeDef,    DescribedCertificateTypeDef,    DescribedConnectorTypeDef,    DescribedHostKeyTypeDef,    DescribedProfileTypeDef,    ImportCertificateRequestRequestTypeDef,    ImportHostKeyRequestRequestTypeDef,    ListTagsForResourceResponseTypeDef,    TagResourceRequestRequestTypeDef,    DescribeSecurityPolicyResponseTypeDef,    DescribeServerRequestServerOfflineWaitTypeDef,    DescribeServerRequestServerOnlineWaitTypeDef,    DescribedUserTypeDef,    ExecutionStepResultTypeDef,    FileLocationTypeDef,    InputFileLocationTypeDef,    ListAccessesRequestListAccessesPaginateTypeDef,    ListAgreementsRequestListAgreementsPaginateTypeDef,    ListCertificatesRequestListCertificatesPaginateTypeDef,    ListConnectorsRequestListConnectorsPaginateTypeDef,    ListExecutionsRequestListExecutionsPaginateTypeDef,    ListProfilesRequestListProfilesPaginateTypeDef,    ListSecurityPoliciesRequestListSecurityPoliciesPaginateTypeDef,    ListServersRequestListServersPaginateTypeDef,    ListTagsForResourceRequestListTagsForResourcePaginateTypeDef,    ListUsersRequestListUsersPaginateTypeDef,    ListWorkflowsRequestListWorkflowsPaginateTypeDef,    ListAccessesResponseTypeDef,    ListAgreementsResponseTypeDef,    ListCertificatesResponseTypeDef,    ListConnectorsResponseTypeDef,    ListHostKeysResponseTypeDef,    ListProfilesResponseTypeDef,    ListServersResponseTypeDef,    ListUsersResponseTypeDef,    ListWorkflowsResponseTypeDef,    TagStepDetailsTypeDef,    ServiceMetadataTypeDef,    WorkflowDetailsTypeDef,    DescribeAccessResponseTypeDef,    DescribeAgreementResponseTypeDef,    DescribeCertificateResponseTypeDef,    DescribeConnectorResponseTypeDef,    DescribeHostKeyResponseTypeDef,    DescribeProfileResponseTypeDef,    DescribeUserResponseTypeDef,    ExecutionResultsTypeDef,    CopyStepDetailsTypeDef,    DecryptStepDetailsTypeDef,    ListedExecutionTypeDef,    CreateServerRequestRequestTypeDef,    DescribedServerTypeDef,    UpdateServerRequestRequestTypeDef,    DescribedExecutionTypeDef,    WorkflowStepTypeDef,    ListExecutionsResponseTypeDef,    DescribeServerResponseTypeDef,    DescribeExecutionResponseTypeDef,    CreateWorkflowRequestRequestTypeDef,    DescribedWorkflowTypeDef,    DescribeWorkflowResponseTypeDef,)def get_structure() -&gt; As2ConnectorConfigTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers a drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from the documentation (blame `botocore` docs if types  are incorrect).- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.session` calls- Auto discovery of types for `session.client` and `session.session` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-transfer` version is the same as related `aiobotocore`version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_transfer/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>