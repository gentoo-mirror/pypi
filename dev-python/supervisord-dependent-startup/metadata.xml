<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dependency support when starting Supervisor services`supervisord-dependent-startup` is a plugin for[Supervisor](http://supervisord.org) that allows starting up services afterdependent services have reached specific states. This plugin is based on[ordered-startup-supervisord](https://github.com/jasoncorbett/ordered-startup-supervisord/)by [Jason Corbett](https://github.com/jasoncorbett).## The ProblemThe problem can be seen in [supervisor bug#122](https://github.com/Supervisor/supervisor/issues/122). The priority orderin supervisor does determine startup order, but when `autostart=true` supervisordoesn't wait for the previous process to be `RUNNING` in order to continue. Whatis even harder is having initialization scripts that need to exit beforecontinuing. This software is meant to make this one use case easier.## How it worksThis is an event listener for supervisor. This means it is run by supervisor onstartup and supervisor will send it messages whenever a service reaches aparticular process state. When configured it will wait till a supervisorsubprocess gets to the configured state before starting dependent services.## CaveatsThe plugin does not start groups. It can start services that are part of agroup, but it won't directly start a group.## Installing```# From pypipip install supervisord-dependent-startup# From github:pip install -e git+https://github.com/bendikro/supervisord-dependent-startup.git#egg=supervisord-dependent-startup```## ConfigurationConfiguration requires several things. First you need to configure`supervisord-dependent-startup` as an event listener by adding the following to `supervisor.conf`:```INI[eventlistener:dependentstartup]command=python -m supervisord_dependent_startupautostart=trueautorestart=unexpectedstartretries=0exitcodes=0,3events=PROCESS_STATE```A working `/etc/supervisor.conf` can look like this:```INI[unix_http_server]file=/tmp/supervisor.sock ; (the path to the socket file)[supervisord]logfile=/tmp/supervisord.logloglevel=infopidfile=/var/run/supervisord.pidnodaemon=falseminfds=1024minprocs=200[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl=unix:///tmp/supervisor.sock[eventlistener:dependentstartup]command=python -m supervisord_dependent_startupautostart=trueautorestart=unexpectedstartretries=0exitcodes=0,3events=PROCESS_STATE[include]files = /etc/supervisord.d/*.ini```### Service configuration optionsThere are three configuration options for a service (`[program:*]`) to controlhow it is processed by `supervisord-dependent-startup`#### `dependent_startup`Mark this service to be handled by `supervisord-dependent-startup`. This must beset to `true` for all services that depend on other services or is beingdepended on by other services.| Type | **bool**:--- | :---| **Required** | **yes**| **Note**     | When setting this to `true`, `autostart` *must* be set to `false`#### `dependent_startup_wait_for`Specify the services this service depends on before in can be started.| Type | **str**:--- | :---| **Required**| **no**| **Format**  | `dependent_startup_wait_for=&lt;parent-service&gt;:&lt;state[,state[..]]&gt; [..]`| **Note**    | `state` must one or more comma separated values of:  `starting`, `running`, `backoff`, `stopping`, `exited`, `fatal`###### Example with one dependencyTo have a service named *child* depend on a service *parent*:``dependent_startup_wait_for=parent:running``###### Example with two dependenciesMultiple dependencies are separated by a white space. To have a service named*child* depend on the services *parent1* and *parent2*:``dependent_startup_wait_for=parent1:running parent2:running``#### `dependent_startup_inherit_priority`Specify if the service should inherit its priority from the services it dependson.| Type | **bool**:--- | :---| **Required**| **no**| **Example** | ``dependent_startup_inherit_priority=true``## Building and testing#### Run tests```Shellpython setup.py test```#### Create source dist```Shellpython setup.py sdist```#### Run tests and code syntax check```Shelltox```</longdescription>
</pkgmetadata>