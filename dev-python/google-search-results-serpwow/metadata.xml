<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Google Search Results in PythonThis Python package allows you to scrape and parse Google Search Results using [SerpWow](https://serpwow.com). In addition to [Search](https://serpwow.com/docs/search-api/overview) you can also use this package to access the SerpWow [Locations API](https://serpwow.com/docs/locations-api/overview), [Batches API](https://serpwow.com/docs/batches-api/overview) and [Account API](https://serpwow.com/docs/account-api).## InstallationYou can install google-search-results-serpwow with:```shell$ pip install google-search-results-serpwow```and upgrade with:```shell$ pip install google-search-results-serpwow --upgrade```## DocumentationWe have included examples here but full SerpWow API documentation is available at the [API Docs](https://serpwow.com/docs):- [Search API Docs](https://serpwow.com/docs/search-api/overview) - [Locations API Docs](https://serpwow.com/docs/locations-api/overview) - [Account API Docs](https://serpwow.com/docs/account-api)- [Batches API Docs](https://serpwow.com/docs/batches-api)You can also use the [API Playground](https://app.serpwow.com/playground) to visually build Google search requests using SerpWow.## Examples- [Simple Example](#simple-example) - [Example Response](#example-response) - [Getting an API Key](#getting-an-api-key)- [Searching with a Location](#searching-with-a-location)- [Searching Google Places, Google Videos, Google Images, Google Shopping and Google News](#searching-google-places-google-videos-google-images-google-shopping-and-google-news)- [Returning results as JSON, HTML and CSV](#returning-results-as-json-html-and-csv)- [Requesting mobile and tablet results](#requesting-mobile-and-tablet-results)- [Parsing Results](#parsing-results)- [Paginating results, returning up to 100 results per page](#paginating-results-returning-up-to-100-results-per-page)- [Search example with all parameters](#search-example-with-all-parameters)- [Locations API Example](#locations-api-example)- [Account API Example](#account-api-example)- [Batches API](#batches-api)## Simple ExampleSimplest example for a standard query &quot;pizza&quot;, returning the Google SERP (Search Engine Results Page) data as JSON:```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# create the serpwow object, passing in our API keyserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# set up a dict for the search parametersparams = {  &quot;q&quot; : &quot;pizza&quot;}# retrieve the search results as JSONresult = serpwow.get_json(params)# pretty-print the resultprint(json.dumps(result, indent=2, sort_keys=True))```## Example ResponseA snapshot (shortened for brevity) of the JSON response returned is shown below. For details of all of the fields from the Google search results page that are parsed please see the [docs](https://serpwow.com/docs/search-api/results/google/overview).```json{  &quot;request_info&quot;: {    &quot;success&quot;: true  },  &quot;search_metadata&quot;: {    &quot;id&quot;: &quot;20c8e44e9cacedabbdff2d9b7e854436056d4f33&quot;,    &quot;engine_url&quot;: &quot;https://www.google.com/search?q=pizza&amp;oq=pizza&amp;sourceid=chrome&amp;ie=UTF-8&quot;,    &quot;total_time_taken&quot;: 0.14  },  &quot;search_parameters&quot;: {    &quot;q&quot;: &quot;pizza&quot;  },  &quot;search_information&quot;: {    &quot;total_results&quot;: 1480000000,    &quot;time_taken_displayed&quot;: 0.45,    &quot;query_displayed&quot;: &quot;pizza&quot;,    &quot;detected_location&quot;: &quot;Ireland&quot;  },  &quot;local_map&quot;: {    &quot;link&quot;: &quot;https://www.google.com/search?q=pizza&amp;npsic=0&amp;rflfq=1&amp;rldoc=1&amp;rlha=0&amp;rllag=53350059,-6249133,1754&amp;tbm=lcl&amp;sa=X&amp;ved=2ahUKEwiC3cLZ0JLgAhXHUxUIHQrsBC4QtgN6BAgBEAQ&quot;,    &quot;gps_coordinates&quot;: {      &quot;latitude&quot;: 53.350059,      &quot;longitude&quot;: -6.249133,      &quot;altitude&quot;: 1754    },    &quot;local_results&quot;: [{        &quot;position&quot;: 1,        &quot;title&quot;: &quot;Apache Pizza Temple Bar&quot;,        &quot;extensions&quot;: [          &quot;American-style pizza-delivery chain&quot;        ],        &quot;rating&quot;: 3.6,        &quot;reviews&quot;: 382,        &quot;type&quot;: &quot;Pizza&quot;,        &quot;block_position&quot;: 1      }    ]  },  &quot;knowledge_graph&quot;: {    &quot;title&quot;: &quot;Pizza&quot;,    &quot;type&quot;: &quot;Dish&quot;,    &quot;description&quot;: &quot;Pizza is a savory dish of Italian origin, consisting of a usually round, flattened base of leavened wheat-based dough topped with tomatoes, cheese, and various other ingredients baked at a high temperature, traditionally in a wood-fired oven.&quot;,    &quot;source&quot;: {      &quot;name&quot;: &quot;Wikipedia&quot;,      &quot;link&quot;: &quot;https://en.wikipedia.org/wiki/Pizza&quot;    },    &quot;nutrition_facts&quot;: {      &quot;total_fat&quot;: [        &quot;10 g&quot;,        &quot;15%&quot;      ],      &quot;sugar&quot;: [        &quot;3.6 g&quot;      ]    }  },  &quot;related_searches&quot;: [{      &quot;query&quot;: &quot;apache pizza&quot;,      &quot;link&quot;: &quot;https://www.google.com/search?q=apache+pizza&amp;sa=X&amp;ved=2ahUKEwiC3cLZ0JLgAhXHUxUIHQrsBC4Q1QIoAHoECAUQAQ&quot;    }  ],  &quot;organic_results&quot;: [{      &quot;position&quot;: 1,      &quot;title&quot;: &quot;10 Best Pizzas in Dublin - A slice of the city for every price point ...&quot;,      &quot;link&quot;: &quot;https://www.independent.ie/life/travel/ireland/10-best-pizzas-in-dublin-a-slice-of-the-city-for-every-price-point-37248689.html&quot;,      &quot;domain&quot;: &quot;www.independent.ie&quot;,      &quot;displayed_link&quot;: &quot;https://www.independent.ie/.../10-best-pizzas-in-dublin-a-slice-of-the-city-for-every-p...&quot;,      &quot;snippet&quot;: &quot;Oct 20, 2018 - Looking for the best pizza in Dublin? Pól Ó Conghaile scours the city for top-notch pie... whatever your budget.&quot;,      &quot;cached_page_link&quot;: &quot;https://webcache.googleusercontent.com/search?q=cache:wezzRov42dkJ:https://www.independent.ie/life/travel/ireland/10-best-pizzas-in-dublin-a-slice-of-the-city-for-every-price-point-37248689.html+&amp;cd=4&amp;hl=en&amp;ct=clnk&amp;gl=ie&quot;,      &quot;block_position&quot;: 2    }  ],  &quot;related_places&quot;: [{    &quot;theme&quot;: &quot;Best dinners with kids&quot;,    &quot;places&quot;: &quot;Pinocchio Italian Restaurant - Temple Bar, Cafe Topolisand more&quot;,    &quot;images&quot;: [      &quot;https://lh5.googleusercontent.com/p/AF1QipNhGt40OpSS408waVJUHeItGrrGqImmEKzuVbBv=w152-h152-n-k-no&quot;    ]  }],  &quot;pagination&quot;: {    &quot;current&quot;: &quot;1&quot;,    &quot;next&quot;: &quot;https://www.google.com/search?q=pizza&amp;ei=fRZQXMKqL8en1fAPitiT8AI&amp;start=10&amp;sa=N&amp;ved=0ahUKEwiC3cLZ0JLgAhXHUxUIHQrsBC4Q8NMDCOkB&quot;  }}```## Getting an API KeyTo get a free API Key head over to [app.serpwow.com/signup](https://app.serpwow.com/signup).## Searching with a locationExample of a Google query geo-locating the query as if the user were located in New York. ```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# create the serpwow object, passing in our API keyserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# set up a dict for the query (q) and location parameters# note that the &quot;location&quot; parameter should be a value# returned from the Locations APIparams = {  &quot;q&quot; : &quot;pizza&quot;,  &quot;location&quot; : &quot;New York,New York,United States&quot;}# retrieve the search results as JSONresult = serpwow.get_json(params)# pretty-print the resultprint(json.dumps(result, indent=2, sort_keys=True))```## Searching Google Places, Google Videos, Google Images, Google Shopping and Google NewsUse the ``search_type`` param to search Google Places, Videos, Images and News. See the [Search API Parameters Docs](https://serpwow.com/docs/search-api/searches) for full details of the additional params available for each search type.```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# create the serpwow object, passing in our API keyserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# perform a search on Google News, just looking at blogs, ordered by date, in the last year, filtering out duplicatesparams = {  &quot;q&quot; : &quot;football news&quot;,  &quot;search_type&quot; : &quot;news&quot;,  &quot;news_type&quot; : &quot;blogs&quot;,  &quot;sort_by&quot;: &quot;date&quot;,  &quot;time_period&quot;: &quot;last_year&quot;,  &quot;show_duplicates&quot; : &quot;false&quot;}result = serpwow.get_json(params)print(json.dumps(result, indent=2, sort_keys=True))# perform a search on Google Places for &quot;plumber&quot; in Londonparams = {  &quot;search_type&quot; : &quot;places&quot;,  &quot;q&quot; : &quot;plumber&quot;,  &quot;location&quot; : &quot;London,England,United Kingdom&quot;}result = serpwow.get_json(params)print(json.dumps(result, indent=2, sort_keys=True))# perform an image search on Google Images for &quot;red flowers&quot;params = {  &quot;q&quot; : &quot;red flowers&quot;,  &quot;search_type&quot; : &quot;images&quot;}result = serpwow.get_json(params)print(json.dumps(result, indent=2, sort_keys=True))```## Returning results as JSON, HTML and CSVSerpWow can return data in JSON, HTML and CSV formats using the ``get_json``, ``get_html`` and ``get_csv`` methods. For CSV results use the ``csv_fields`` param ([docs](https://serpwow.com/docs/search-api/reference/csv-fields)) to request specific result fields.```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# create the serpwow object, passing in our API keyserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# set up a dict for the query (q) and location parameters# note that the &quot;location&quot; parameter should be a value# returned from the Locations APIparams = {  &quot;q&quot; : &quot;pizza&quot;,  &quot;location&quot; : &quot;New York,New York,United States&quot;}# retrieve the Google search results as JSONresult_json = serpwow.get_json(params)# retrieve the Google search results as HTMLresult_html = serpwow.get_html(params)# retrieve the Google search results as a CSVresult_csv = serpwow.get_csv(params)```## Requesting mobile and tablet resultsTo request that SerpWow renders the Google search results via a mobile or tablet browser use the ``device`` param:```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport jsonserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# set up the mobile paramsparams_mobile = {  &quot;q&quot; : &quot;pizza&quot;,  &quot;device&quot; : &quot;mobile&quot;}# set up the tablet paramsparams_tablet = {  &quot;q&quot; : &quot;pizza&quot;,  &quot;device&quot; : &quot;tablet&quot;}# set up the desktop params (note we omit the &quot;device&quot; param)params_desktop = {  &quot;q&quot; : &quot;pizza&quot;}# retrieve the mobile search resultsresult_mobile_json = serpwow.get_json(params_mobile)# retrieve the tablet search resultsresult_tablet_json = serpwow.get_json(params_tablet)# retrieve the desktop search resultsresult_desktop_json = serpwow.get_json(params_desktop)```## Parsing resultsWhen making a request via the ``get_json`` method a standard Python ``dict`` is returned. You can inspect this dict to iterate, parse and store the results in your app.```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# make a simple query, returning JSONserpwow = GoogleSearchResults(&quot;API_KEY&quot;)result = serpwow.get_json({ &quot;q&quot; : &quot;pizza&quot; })# determine if the request was successfulsuccess = result[&quot;request_info&quot;][&quot;success&quot;]if success:  # extract the time taken and number of organic results  time_taken = result[&quot;search_metadata&quot;][&quot;total_time_taken&quot;]  organic_result_count = len(result[&quot;organic_results&quot;])  # print  print str(organic_result_count) + &quot; organic results returned in &quot; + str(time_taken) + &quot;s&quot;```## Paginating results, returning up to 100 results per pageUse the ``page`` and ``num`` parameters to paginate through Google search results. The maximum number of results returned per page (controlled by the ``num`` param) is 100 (a Google-imposed limitation) for all ``search_type``'s apart from Google Places, where the maximum is 20. Here's an example.```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# request the first 100 resultsserpwow = GoogleSearchResults(&quot;API_KEY&quot;)params = {  &quot;q&quot; : &quot;pizza&quot;,  &quot;page&quot; : 1,  &quot;num&quot;: 100}result_page_1 = serpwow.get_json(params)# request the next 100 resultsparams[&quot;page&quot;] = 2result_page_2 = serpwow.get_json(params)# pretty-print the resultprint &quot;Page 1&quot;print json.dumps(result_page_1, indent=2, sort_keys=True)print &quot;Page 2&quot;print json.dumps(result_page_2, indent=2, sort_keys=True)```## Search example with all parameters```pythonfrom serpwow.google_search_results import GoogleSearchResults# create the serpwow object, passing in our API keyserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# set up a dict for the search parameters, retrieving results as CSV (note the csv_fields param)params = {  &quot;q&quot; : &quot;pizza&quot;,  &quot;gl&quot; : &quot;us&quot;,  &quot;hl&quot; : &quot;en&quot;,  &quot;location&quot; : &quot;New York,New York,United States&quot;,  &quot;google_domain&quot; : &quot;google.com&quot;,  &quot;time_period&quot; : &quot;custom&quot;,  &quot;sort_by&quot; : &quot;date&quot;,  &quot;time_period_min&quot; : &quot;02/01/2018&quot;,  &quot;time_period_max&quot; : &quot;02/08/2019&quot;,  &quot;device&quot; : &quot;mobile&quot;,  &quot;csv_fields&quot; : &quot;search.q,organic_results.position,organic_results.domain&quot;,  &quot;page&quot; : &quot;1&quot;,  &quot;num&quot; : &quot;100&quot;}# retrieve the search results as CSVresult = serpwow.get_csv(params)print result```## Locations API ExampleThe [Locations API](https://serpwow.com/docs/locations-api/overview) allows you to search for SerpWow supported Google search locations. You can supply the ``full_name`` returned by the Locations API as the ``location`` parameter in a Search API query (see [Searching with a location](https://github.com/serpwow/google-search-results-python#searching-with-a-location) example above) to retrieve search results geo-located to that location.```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# create the serpwow object, passing in our API keyserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# set up a dict for the location query parametersparams = {  &quot;q&quot; : &quot;mumbai&quot;}# retrieve locations matching the query parameters as JSONresult = serpwow.get_locations(params)# pretty-print the resultprint(json.dumps(result, indent=2, sort_keys=True))```## Account API ExampleThe [Account API](https://serpwow.com/docs/account-api) allows you to check your current SerpWow usage and billing information. ```pythonfrom serpwow.google_search_results import GoogleSearchResultsimport json# create the serpwow object, passing in our API keyserpwow = GoogleSearchResults(&quot;API_KEY&quot;)# get our account inforesult = serpwow.get_account()# pretty-print the resultprint(json.dumps(result, indent=2, sort_keys=True))```## Batches APIThe [Batches API](https://serpwow.com/docs/batches-api) allows you to create, update and delete Batches on your SerpWow account (Batches allow you to save up to 15,000 Searches and have SerpWow run them on a schedule).For more information and extensive code samples please see the [Batches API Docs](https://serpwow.com/docs/batches-api).</longdescription>
</pkgmetadata>