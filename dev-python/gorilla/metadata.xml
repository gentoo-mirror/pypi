<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Gorilla=======.. image:: https://img.shields.io/travis/christophercrouzet/gorilla/master.svg   :target: https://travis-ci.org/christophercrouzet/gorilla   :alt: Build status.. image:: https://img.shields.io/coveralls/christophercrouzet/gorilla/master.svg   :target: https://coveralls.io/r/christophercrouzet/gorilla   :alt: Coverage Status.. image:: https://img.shields.io/pypi/v/gorilla.svg   :target: https://pypi.python.org/pypi/gorilla   :alt: PyPI latest version.. image:: https://readthedocs.org/projects/gorilla/badge/?version=latest   :target: https://gorilla.readthedocs.io   :alt: Documentation status.. image:: https://img.shields.io/pypi/l/gorilla.svg   :target: https://pypi.python.org/pypi/gorilla   :alt: LicenseGorilla is a Python library that provides a convenient approach to monkeypatching.Monkey patching is the process of **modifying module and class attributes atruntime** with the purpose of replacing or extending third-party code.Although *not* a recommended practice, it is sometimes useful to fix or modifythe behaviour of a piece of code from a third-party library, or to extend itspublic interface while making the additions feel like they are built-in intothe library.The Python language makes monkey patching extremely easy but the advantages ofGorilla are multiple, not only in assuring a **consistent behaviour** on bothPython 2 and Python 3 versions, but also in preventing common source of errors,and making the process both **intuitive and convenient** even when faced with*large* numbers of patches to create.Features--------* intuitive and convenient decorator approach to create patches.* can create patches for all class or module members at once.* compatible with both Python 2 and Python 3.* customizable behaviour.Usage-----Thanks to the dynamic nature of Python that makes monkey patching possible, theprocess happens at runtime without ever having to directly modify the sourcecode of the third-party library:.. code-block:: python   &gt;&gt;&gt; import gorilla   &gt;&gt;&gt; import destination   &gt;&gt;&gt; @gorilla.patches(destination.Class)   ... class MyClass(object):   ...     def method(self):   ...         print(&quot;Hello&quot;)   ...     @classmethod   ...     def class_method(cls):   ...         print(&quot;world!&quot;)The code above creates two patches, one for each member of the class``MyClass``, but does not apply them yet. In other words, they define theinformation required to carry on the operation but are not yet inserted intothe specified destination class ``destination.Class``.Such patches created with the decorators can then be automatically retrieved byrecursively scanning a package or a module, then applied:.. code-block:: python   &gt;&gt;&gt; import gorilla   &gt;&gt;&gt; import mypackage   &gt;&gt;&gt; patches = gorilla.find_patches([mypackage])   &gt;&gt;&gt; for patch in patches:   ...     gorilla.apply(patch)See the `Tutorial`_ section from the documentation for more detailed examplesand explanations on how to use Gorilla.Documentation-------------Read the documentation online at `gorilla.readthedocs.io`_ or check its sourcein the ``doc`` directory.Out There---------Projects using Gorilla include:* `bana &lt;https://github.com/christophercrouzet/bana&gt;`_* `mlflow &lt;https://github.com/mlflow/mlflow&gt;`_Author------Christopher Crouzet&lt;`christophercrouzet.com &lt;https://christophercrouzet.com&gt;`_&gt;.. _gorilla.readthedocs.io: https://gorilla.readthedocs.io.. _Tutorial: https://gorilla.readthedocs.io/en/latest/tutorial.html</longdescription>
</pkgmetadata>