<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Ethereum Bloom Filter[![Build Status](https://circleci.com/gh/ethereum/eth-bloom.svg?style=shield)](https://circleci.com/gh/ethereum/eth-bloom)[![PyPI version](https://badge.fury.io/py/eth-bloom.svg)](https://badge.fury.io/py/eth-bloom)[![Python versions](https://img.shields.io/pypi/pyversions/eth-bloom.svg)](https://pypi.python.org/pypi/eth-bloom)A python implementation of the bloom filter used by Ethereum.&gt; This library and repository was previously located at https://github.com/pipermerriam/ethereum-bloom.  It was transferred to the Ethereum foundation github in November 2017 and renamed to `eth-bloom`.  The PyPi package was also renamed from `ethereum-bloom` to `eth-bloom.For more information on what Ethereum Bloom Filters are see [here](what_is_eth-bloom.txt).## Installation```shell$ pip install eth-bloom```## Development```shpip install -e &quot;.[dev]&quot;```### Running the testsYou can run the tests with:```shpytest tests```Or you can install `tox` to run the full test suite.### ReleasingTo release a new version:```shmake release bump={bumpversion}```#### How to bumpversionThe version format for this repo is `{major}.{minor}.{patch}` for stable, and`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).To issue the next version in line, use bumpversion and specify which part to bump,like `bumpversion minor` or `bumpversion devnum`.If you are in a beta version, `bumpversion stage` will switch to a stable.To issue an unstable version when the current version is stable, specify thenew version explicitly, like `bumpversion --new-version 4.0.0-alpha.1 devnum`## UsageThe `BloomFilter` object```python&gt;&gt;&gt; from eth_bloom import BloomFilter&gt;&gt;&gt; b = BloomFilter()&gt;&gt;&gt; b'a value' in b  # check whether a value is presentFalse&gt;&gt;&gt; b.add(b'a value')  # add a single value&gt;&gt;&gt; b'a value' in bTrue&gt;&gt;&gt; int(b)  # cast to an integer3458628712844765018311492773359360516229024449585949240367644166080576879632652362184119765613545163153674691520749911733485693171622325900647078772681584616740134230153806267998022370194756399579977294154062696916779055028045657302214591620589415314367270329881298073237757853875497241510733954508399863880080986777555986663988492288946856978031023631618215522505971170427986911575695114157059398791122395379400594948096&gt;&gt;&gt; bin(b)  # cast to a binary string'0b```You can also add an iterable of items to a bloom filter.```python&gt;&gt;&gt; b = BloomFilter()&gt;&gt;&gt; b'value-a' in bFalse&gt;&gt;&gt; b'value-b' in bFalse&gt;&gt;&gt; b.extend([b'value-a', b'value-b'])&gt;&gt;&gt; b'value-a' in bTrue&gt;&gt;&gt; b'value-b' in bTrue```You can initialize a bloom filter from an iterable of byte strings.```python&gt;&gt;&gt; b = BloomFilter.from_iterable([b'value-a', b'value-b'])  # initialize from an iterable of values.&gt;&gt;&gt; b'value-a' in bTrue&gt;&gt;&gt; b'value-b' in bTrue```You can initialize a bloom filter from the integer representation of the bloom bits.```python&gt;&gt;&gt; b = BloomFilter(3458628712844765018311492773359360516229024449585949240367644166080576879632652362184119765613545163153674691520749911733485693171622325900647078772681584616740134230153806267998022370194756399579977294154062696916779055028045657302214591620589415314367270329881298073237757853875497241510733954508399863880080986777555986663988492288946856978031023631618215522505971170427986911575695114157059398791122395379400594948096)&gt;&gt;&gt; b'a value' in bTrue```You can also merge bloom filters```python&gt;&gt;&gt; from eth_bloom import BloomFilter&gt;&gt;&gt; b1 = BloomFilter()&gt;&gt;&gt; b2 = BloomFilter()&gt;&gt;&gt; b1.add(b'a')&gt;&gt;&gt; b1.add(b'common')&gt;&gt;&gt; b2.add(b'b')&gt;&gt;&gt; b2.add(b'common')&gt;&gt;&gt; b'a' in b1True&gt;&gt;&gt; b'b' in b1False&gt;&gt;&gt; b'common' in b1True&gt;&gt;&gt; b'a' in b2False&gt;&gt;&gt; b'b' in b2True&gt;&gt;&gt; b'common' in b2True&gt;&gt;&gt; b3 = b1 + b2  # using addition&gt;&gt;&gt; b'a' in b3True&gt;&gt;&gt; b'b' in b3True&gt;&gt;&gt; b'common' in b3True&gt;&gt;&gt; b4 = b1 | b2  # or using bitwise or&gt;&gt;&gt; b'a' in b4True&gt;&gt;&gt; b'b' in b4True&gt;&gt;&gt; b'common' in b4True&gt;&gt;&gt; b1 |= b2  # or using in-place operations (works with += too)&gt;&gt;&gt; b'a' in b1True&gt;&gt;&gt; b'b' in b1True&gt;&gt;&gt; b'common' in b1True```</longdescription>
</pkgmetadata>