<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hypothesmithHypothesis strategies for generating Python programs, something like CSmith.This is definitely pre-alpha, but if you want to play with it feel free!You can even keep the shiny pieces when - not if - it breaks.Get it today with [`pip install hypothesmith`](https://pypi.org/project/hypothesmith/),or by cloning [the GitHub repo](https://github.com/Zac-HD/hypothesmith).You can run the tests, such as they are, with `tox` on Python 3.6 or later.Use `tox -va` to see what environments are available.## UsageThis package provides two Hypothesis strategies for generating Python source code.The generated code will always be syntatically valid, and is useful for testingparsers, linters, auto-formatters, and other tools that operate on source code.&gt; DO NOT EXECUTE CODE GENERATED BY THESE STRATEGIES.&gt;&gt; It could do literally anything that running Python code is able to do,&gt; including changing, deleting, or uploading important data.  Arbitrary&gt; code can be useful, but &quot;arbitrary code execution&quot; can be very, very bad.#### `hypothesmith.from_grammar(start=&quot;file_input&quot;, *, auto_target=True)`Generates syntactically-valid Python source code based on the grammar.Valid values for ``start`` are ``&quot;single_input&quot;``, ``&quot;file_input&quot;``, or``&quot;eval_input&quot;``; respectively a single interactive statement, a module orsequence of commands read from a file, and input for the eval() function.If ``auto_target`` is ``True``, this strategy uses ``hypothesis.target()``internally to drive towards larger and more complex examples.  We recommendleaving this enabled, as the grammar is quite complex and only simple examplestend to be generated otherwise.#### `hypothesmith.from_node(node=libcst.Module, *, auto_target=True)`Generates syntactically-valid Python source code based on the node typesdefined by the [`LibCST`](https://libcst.readthedocs.io/en/latest/) project.You can pass any subtype of `libcst.CSTNode`.  Alternatively, you can useHypothesis' built-in `from_type(node_type).map(lambda n: libcst.Module([n]).code`,after Hypothesmith has registered the required strategies.  However, this doesnot include automatic targeting and limitations of LibCST may lead to invalidcode being generated.## Notable bugs found with Hypothesmith- [BPO-40661, a segfault in the new parser](https://bugs.python.org/issue40661),  was given maximum priority and blocked the planned release of CPython 3.9 beta1.- [BPO-38953](https://bugs.python.org/issue38953) `tokenize` -&gt; `untokenize` roundtrip bugs.- [BPO-42218](https://bugs.python.org/issue42218) mishandled error case in new PEG parser.- [`lib2to3` errors on \r in comment](https://github.com/psf/black/issues/970)- [Black fails on files ending in a backslash](https://github.com/psf/black/issues/1012)- [At least three round-trip bugs in LibCST](https://github.com/Instagram/LibCST#acknowledgements)  ([search commits for &quot;hypothesis&quot;](https://github.com/Instagram/LibCST/search?q=Fix+hypothesis&amp;type=commits))- [Invalid code generated by LibCST](https://github.com/Instagram/LibCST/issues/287)### ChangelogPatch notes [can be found in `CHANGELOG.md`](https://github.com/Zac-HD/hypothesmith/blob/master/CHANGELOG.md).</longdescription>
</pkgmetadata>