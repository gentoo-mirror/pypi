<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====pilo====.. image:: https://travis-ci.org/bninja/pilo.png   :target: https://travis-ci.org/bninja/pilo.. image:: https://coveralls.io/repos/bninja/pilo/badge.png   :target: https://coveralls.io/r/bninja/piloYet another form parser.dev---.. code:: bash   $ git clone git@github.com:bninja/pilo.git   $ cd pilo   $ mkvirtualenv pilo   (pilo)$ pip install -e .[tests]   (pilo)$ py.test tests/ --cov=pilo --cov-report term-missingrelease-------All is well:.. code:: bash   (pilo)$ py.test tests/ --cov=pilo --cov-report term-missingso update ``__version__`` in:- ``pilo/__init__.py``then commit and tag it (`travis &lt;https://travis-ci.org/bninja/pilo&gt;`_ will publish it to `pypi &lt;https://pypi.python.org/pypi/pilo/&gt;`_):.. code:: bash   $ git commit -am &quot;release v{version}&quot;   $ git tag -a v{version} -m &quot;release v{version}&quot;   $ git push --tagsusage-----Validation~~~~~~~~~~Here we validate that a message has acceptable headers and body... code:: python    from pilo import Form    from pilo.fields import Dict, String    class Message(Form):        headers = Dict(String(choices=['to', 'from', 'content-type']), String())        body = String(max_length=20)    &gt;&gt;&gt; print Message(headers={'to': 'William III'}, body='ha'*10)    {'body': 'hahahahahahahahahaha', 'headers': {'to': 'William III'}}    &gt;&gt;&gt; print Message(headers={'send-to': 'William III'}, body='ha'*10)    Invalid: headers - &quot;send-to&quot; is not one of &quot;to&quot;, &quot;from&quot;, &quot;content-type&quot;    &gt;&gt;&gt; print Message(headers={'to': 'William III'}, body='ha'*11)    Invalid: body - &quot;hahahahahahahahahahaha&quot; must have length &lt;= 20Hooks~~~~~Override-able mechanism allowing users to inject functions to customize thesebehaviors:- compute- resolve- parse- default- munge- filter- validatee.g.:.. code:: python    import pilo    class ExtraCurricular(pilo.Form):       category = pilo.fields.String(           choices=['athletics', 'academics', 'social', 'service']       )       name = pilo.fields.String(max_length=40)       description = pilo.fields.String(max_length=140)       role = pilo.fields.String(choices=['member', 'leader'])    class CollegeApplication(pilo.Form):        high_school_name = pilo.fields.String()        sat_score = pilo.fields.Integer()        gpa = pilo.fields.Float()        extra_curriculars = pilo.fields.List(pilo.fields.SubForm(ExtraCurricular))        score = pilo.fields.Float(default=pilo.NONE)        accepted = pilo.fields.Bool(default=False)        @score.compute        def score(self):            leadership_roles = [                ec for ec in self.extra_curriculars if ec.role == 'leader'            ]            relevant_extra_curriculars =[                ec for ec in self.extra_curriculars                if ec.category in ['academics', 'service']            ]            score = (                10 * (self.sat_score / 1600.0) +                10 * (self.gpa / 4.0) +                 5 * len(leadership_roles) +                 5 * len(relevant_extra_curriculars)            )            return score        @accepted.compute        def accepted(self):            if self.score &gt; 30:                return True            return False        @high_school_name.munge        def high_school_name(self, value):            return value.upper()    application = CollegeApplication(        high_school_name='Bodega High',        sat_score=1400,        gpa=4.0,        extra_curriculars=[            dict(category='athletics', role='leader', name='hockey', description=''),            dict(category='academics', role='member', name='chess club', description=''),        ]    )    &gt;&gt;&gt; print application.high_school_name    BODEGA HIGH    &gt;&gt;&gt; print application.score    28.75    &gt;&gt;&gt; print application.accepted    FalseForm polymorphism and type downcasting~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~In the following example, a user has an address, but the address schema ispolymorphic on the country abbreviation... code:: python    import pilo    import uuid    class Address(pilo.Form):        guid = pilo.fields.UUID(default=uuid.uuid4)        country = pilo.fields.Type.abstract()    class UnitedKingdomAddress(Address):        country = pilo.fields.Type.constant('UK')        name = pilo.fields.String()        street = pilo.fields.String()        locality = pilo.fields.String()        post_town = pilo.fields.String()        postcode = pilo.fields.String()    class UnitedStatesAddress(Address):        country = pilo.fields.Type.constant('USA')        name = pilo.fields.String()        street = pilo.fields.String()        unit = pilo.fields.String(default=None)        city = pilo.fields.String()        state = pilo.fields.String()        zip = pilo.fields.String(length=5)    class User(pilo.Form):         guid = pilo.fields.UUID(default=uuid.uuid4)         name = pilo.fields.String()         address = pilo.fields.PolymorphicSubForm(Address.country)    mikey_representation = dict(        name='Michael Pikey',        address=dict(            country='UK',            name='Mikey Pikey',            street='351 Meagre Lane',            locality='Hedge End',            post_town='Southampton',            postcode='SO31 4NG',        )    )    bart_representation = dict(        name='Bartholomew Simpson',        address=dict(            country='USA',            name='Bite Me',            street='742 Evergreen Terrace',            city='Springfield',            state='???',            zip='12345',        )    )    mikey = User(**mikey_representation)    bart = User(**bart_representation)    &gt;&gt;&gt; print dict(mikey)    {        'address': {            'country': 'UK',            'guid': UUID('8c73752c-69a2-4832-99f8-c5354cbeec59'),            'locality': 'Hedge End',            'name': 'Mikey Pikey',            'post_town': 'Southampton',            'postcode': 'SO31 4NG',            'street': '351 Meagre Lane'        },        'guid': UUID('eee0953c-1b5a-4bd0-893d-f513b1cf24f4'),        'name': 'Michael Pikey'    }    &gt;&gt;&gt; print dict(bart)    {        'address': {            'city': 'Springfield',            'country': 'USA',            'guid': UUID('a321bedd-8b94-46b8-830e-ea137b08a608'),            'name': 'Bite Me',            'state': '???',            'street': '742 Evergreen Terrace',            'unit': None,            'zip': '12345'        },        'guid': UUID('3155a3dd-4b5a-4990-aaea-439359bb36a9'),        'name': 'Bartholomew Simpson'    }    &gt;&gt;&gt; print mikey.address.postcode    SO31 4NG    &gt;&gt;&gt; print bart.address.zip    12345    &gt;&gt;&gt; print type(mikey.address).__name__    UnitedKingdomAddress    &gt;&gt;&gt; print type(bart.address).__name__    UnitedStatesAddress</longdescription>
</pkgmetadata>