<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[Webptools v0.0.9](https://pypi.org/project/webptools/)webptools is a Webp image conversion package for the python.Convert JPG,PNG.. images to webp image formatThis library uses precompiled executables of WebP(v1.1.0) for more infovisit [WebP](https://developers.google.com/speed/webp)For converting other image formats to webp, please read thisdocumentation  [cwebp Encoder](https://developers.google.com/speed/webp/docs/cwebp)For converting webp image to other image format, please read thisdocumentation  [dwebp Encoder](https://developers.google.com/speed/webp/docs/dwebp)For converting gif image to webp, please read thisdocumentation [gif2webp Converter](https://developers.google.com/speed/webp/docs/gif2webp)For creating animated webp image using webp images, please read thisdocumentation [webpmux Muxer](https://developers.google.com/speed/webp/docs/webpmux)# How to use## Installation```shell$ pip install webptools```## Fix Permission Issue (if not using external executables)```pythonfrom webptools import grant_permission# this will grant 755 permission to webp executablesgrant_permission()```### Using External executables```pythonbin_path=&quot;libwebp_linux/bin/cwebp&quot;```# cwebp## Convert other image format to webp```pythonfrom webptools import cwebp# pass input_image(.jpeg,.pnp .....) path ,# output_image(give path where to save and image file name with .webp file type extension)print(cwebp(input_image=&quot;python_logo.jpg&quot;, output_image=&quot;python_logo.webp&quot;,            option=&quot;-q 80&quot;, logging=&quot;-v&quot;))```## Convert base64 image to webp base64```pythonfrom webptools import base64str2webp_base64str# pass base64 image, image type, webp options,# for the conversion temp location need # use the default temp path for conversionprint(    base64str2webp_base64str(base64str=&quot;&quot;, image_type=&quot;jpg&quot;, option=&quot;-q 80&quot;,                             logging=&quot;-v&quot;))# use the custom temp path for conversionprint(base64str2webp_base64str(base64str=&quot;&quot;, image_type=&quot;jpg&quot;, option=&quot;-q 80&quot;,                               temp_path=&quot;./temp&quot;,                               logging=&quot;-v&quot;))```# dwebp## Convert webp image to other image format```pythonfrom webptools import dwebp# pass input_image(.webp image) path ,output_image(.jpeg,.pnp .....)print(dwebp(input_image=&quot;python_logo.webp&quot;, output_image=&quot;python_logo.jpg&quot;,            option=&quot;-o&quot;, logging=&quot;-v&quot;))```# gif2webp## Convert gif image to webp```pythonfrom webptools import gifwebp# pass input_image(.gif) path ,output_image(give path where to save and image file name with .webp file type extension)print(gifwebp(input_image=&quot;linux_logo.gif&quot;, output_image=&quot;linux_logo.webp&quot;,              option=&quot;-q 80&quot;, logging=&quot;-v&quot;))```# webpmux## Add ICC profile,XMP metadata and EXIF metadata```pythonfrom webptools import webpmux_add# pass input_image(.webp image) path,output_image,set options(icc image profile,XMP metadata or EXIF metadata) and file.# for options use keywords as below# for ICC: icc# for XMP metadata: xmp# for EXIF metadata: exifprint(webpmux_add(input_image=&quot;in.webp&quot;, output_image=&quot;icc_container.webp&quot;,                  icc_profile=&quot;image_profile.icc&quot;, option=&quot;icc&quot;))```## Extract ICC profile,XMP metadata and EXIF metadata```pythonfrom webptools import webpmux_extract# pass input_image(.webp image) path,output_image,set options(icc image profile,XMP metadata or EXIF metadata) and file.# for options use keywords as below# for ICC: icc# for XMP metadata: xmp# for EXIF metadata: exifprint(webpmux_extract(input_image=&quot;anim_container.webp&quot;,                      icc_profile=&quot;image_profile.icc&quot;, option=&quot;icc&quot;))```## Strip ICC profile,XMP metadata and EXIF metadata```pythonfrom webptools import webpmux_strip# pass input_image(.webp image) path,output_image,set options(icc image profile,XMP metadata or EXIF metadata) and file.# for options use keywords as below# for ICC: icc# for XMP metadata: xmp# for EXIF metadata: exifprint(webpmux_strip(input_image=&quot;icc_container.webp&quot;,                    output_image=&quot;without_icc.webp&quot;, option=&quot;icc&quot;))```## Create an animated WebP file from Webp images```pythonfrom webptools import webpmux_animate# pass input_images(.webp image) path with FRAME_OPTIONS, as array,ouput image will be animated .webp image# https://developers.google.com/speed/webp/docs/webpmux# FRAME_OPTIONS# -file_i +di[+xi+yi[+mi[bi]]]# e.g -frame one.webp +100 -frame two.webp +100+50+50 -frame three.webp +100+50+50+1+b# Where: file_i is the i'th frame (WebP format), xi,yi specify the image offset for this frame,# di is the pause duration before next frame, mi is the dispose method for this frame (0 for NONE or 1 for BACKGROUND)# and bi is the blending method for this frame (+b for BLEND or -b for NO_BLEND).# Argument bi can be omitted and will default to +b (BLEND). Also, mi can be omitted if bi is omitted and# will default to 0 (NONE). Finally,# if mi and bi are omitted then xi and yi can be omitted and will default to +0+0.# -loop n# e.g 10# Loop the frames n number of times. 0 indicates the frames should loop forever.# Valid range is 0 to 65535 [Default: 0 (infinite)].# -bgcolor A,R,G,B# e.g 255,255,255,255# Background color of the canvas. Where: A, R, G and B are integers in the range 0 to 255 specifying# the Alpha, Red, Green and Blue component values respectively [Default: 255,255,255,255].input = [&quot;./frames/tmp-0.webp +100&quot;, &quot;./frames/tmp-1.webp +100&quot;,         &quot;./frames/tmp-2.webp +100&quot;]print(webpmux_animate(input_images=input, output_image=&quot;anim_container.webp&quot;,                      loop=&quot;10&quot;, bgcolor=&quot;255,255,255,255&quot;))```## Get a frame from an animated WebP file```pythonfrom webptools import webpmux_getframe# pass input_image(.webp image) path ,output_image and frame numberprint(webpmux_getframe(input_image=&quot;anim_container.webp&quot;,                       output_image=&quot;frame_2.webp&quot;, frame_number=&quot;2&quot;))```</longdescription>
</pkgmetadata>