<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dip![pypi](https://img.shields.io/pypi/v/dip?color=yellow&amp;logo=python&amp;logoColor=eee&amp;style=flat-square)![python](https://img.shields.io/pypi/pyversions/dip?logo=python&amp;logoColor=eee&amp;style=flat-square)[![pytest](https://img.shields.io/github/workflow/status/amancevice/dip/pytest?logo=github&amp;style=flat-square)](https://github.com/amancevice/dip/actions)[![coverage](https://img.shields.io/codeclimate/coverage/amancevice/dip?logo=code-climate&amp;style=flat-square)](https://codeclimate.com/github/amancevice/dip/test_coverage)[![maintainability](https://img.shields.io/codeclimate/maintainability/amancevice/dip?logo=code-climate&amp;style=flat-square)](https://codeclimate.com/github/amancevice/dip/maintainability)Install CLIs using docker-compose.## InstallationInstall via Homebrew:```bashbrew tap amancevice/tapbrew install amancevice/tap/dip```Or use `pip`:```bashpip install dip```## Simple Usage1. Write a CLI in whatever language you choose2. Create a `Dockerfile` that installs your CLI application3. Write a `docker-compose.yml` file that builds the image and defines the run-time configuration4. Run `dip install &lt;service&gt; .` to install the service as an executable command5. Run `dip uninstall &lt;service&gt; .` to remove the executable from the file system```bashmkdir examplecd exampletouch docker-compose.yml# Edit docker-compose.yml to include 'dipex' service...dip install dipex .```## Tracking a git remote1. Follow steps 1-3 above2. Commit these files to a branch on a git remote (eg. `origin/main`)3. Run `dip install &lt;service&gt; . --remote &lt;remote&gt;/&lt;branch&gt;` to install the service as an executable command that will track changes to `docker-compose.yml` on the supplied remote/branch4. Run `dip uninstall &lt;service&gt;` to remove the executable from the file system```bashgit clone git@github.com:owner/repo-with-docker-compose.gitcd repo-with-docker-composedip install dipex . --remote origin/main```If a CLI is installed with the `--remote` flag, any differences between the local and remote `docker-compose.yml` files will trigger a prompt asking if the user wishes to upgrade (git pull).If the user declines to upgrade he/she must resolve the conflict before continuing.Alternatively, use the `--sleep` option to show the user the diff, then sleep for the provided time (in seconds) instead of waiting on user input.```bashdip install dipex . --remote origin/main --sleep 10```## Upgrading from a git remote1. Follow the steps above to install your CLI with a remote2. If the remote moves ahead of the local, you will see a warning when executing CLI commands3. use `dip upgrade &lt;service&gt;` to pull changes from the remote## Installing with ENV variablesUse the `--env` option to install the CLI with an environment variable set. Use the `--secret` option to enter the environment variable in an interactive prompt where the input is hidden.Ex.```bashdip install mycli /path/to/project \  --remote origin/main \  --env FIZZ=BUZZ```Will generate an executable with the name `mycli`, monitor the `origin/main` remote/branch for changes and set the `ENV` variable `FIZZ` to the value `BUZZ` each time the `mycli` is executed.### Why Docker?When building a custom application it is sometimes necessary to include libraries and packages.If these dependencies become too burdensome, you may consider using Docker to avoid problems handing this application off from user to user.The `docker-compose` tool adds additional functionality wherein you can define specific run-time configurations.### What does `dip` do?Installing a CLI using `dip install` is essentially syntactic sugar for:```bashcd /path/to/docker-compose-dirdocker-compose run --rm &lt;svc&gt; $*```You can accomplish the same thing with aliases, but this is a little more fun.## ExampleConsider a trivial example of a Docker image with the AWS CLI installed.### Writing a `Dockerfile`We will create a [`Dockerfile`](./example/Dockerfile) that installs this CLI and configures a `VOLUME` for mounting your AWS credentials:```DockerfileFROM alpineRUN apk add --no-cache less groff python3 &amp;&amp; \    pip3 install awscliVOLUME /root/.awsENTRYPOINT [&quot;aws&quot;]```### Writing a `docker-compose.yml`Our `docker-compose.yml` will define our service, `dipex`, and configure our AWS credentials (either through `ENV` variables or the `~/.aws` directory):```version: '3'services:  dipex:    image: amancevice/dipex    build: .    environment:      AWS_ACCESS_KEY_ID:      AWS_SECRET_ACCESS_KEY:    volumes:      - ~/.aws:/root/.aws```### Installing the CLIInstalling the CLI is as simple as:```bashdip install dipex .```Or, if you would like to install tracking a remote:```bashdip install dipex . --remote origin/main```If you are not currently inside the directory where your `docker-compose.yml` file is, supply it as a positional argument:```bashdip install dipex /path/to/project [--remote origin/main]```### Using the CLI```bash$ dipex s3 ls s3://bkt/path/to/key```### Uninstall the CLIUninstalling the CLI simply removes the executable and can be done using the `uninstall` subcommand:```bashdip uninstall dipex```# Extended ConfigurationThe default configuration can be viewed using the `dip config` command:```json{    &quot;dipex&quot;: {        &quot;git&quot;: {            &quot;branch&quot;: &quot;main&quot;,            &quot;remote&quot;: &quot;origin&quot;        },        &quot;home&quot;: &quot;/path/to/project&quot;,        &quot;name&quot;: &quot;dipex&quot;,        &quot;path&quot;: &quot;/usr/local/bin&quot;    },}```The default `PATH` for installations can be changed by setting `ENV` variables:```bashexport DIP_HOME=/path/to/settings.jsonexport DIP_PATH=/bath/to/bin```After an item is installed it will appear in the `dips` key:```bash$ dip install dipex /path/to/project$ dip config{    &quot;dipex&quot;: {        &quot;home&quot;: &quot;/path/to/project&quot;,        &quot;name&quot;: &quot;dipex&quot;,        &quot;path&quot;: &quot;/usr/local/bin&quot;    }}```Use the `--path` option when installing/uninstalling to override the default path &amp; use a custom one:```bash$ dip install --path /my/bin dipex /path/to/project$ dip config{    &quot;dipex&quot;: {        &quot;home&quot;: &quot;/path/to/project&quot;,        &quot;name&quot;: &quot;dipex&quot;,        &quot;path&quot;: &quot;/my/bin&quot;    }}```Use `dip config NAME` to display the configuration of an installed CLI:```bash$ dip config dipex{    &quot;home&quot;: &quot;/path/to/project&quot;,    &quot;name&quot;: &quot;dipex&quot;,    &quot;path&quot;: &quot;/my/bin&quot;}```Use `dip config NAME KEY` to display a given configuration item```bash$ dip config dipex home/path/to/project# Handy trick...$ cd $(dip config dipex home)```Use `dip show NAME` to print the contents of the `docker-compose.yml` to screen:```bash$ dip show dipexversion: '3'services:  dipex:    # ...```</longdescription>
</pkgmetadata>