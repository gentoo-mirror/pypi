<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============DCIC Snovault=============|Build status|_.. |Build status| image:: https://travis-ci.org/4dn-dcic/snovault.svg?branch=master.. _Build status: https://travis-ci.org/4dn-dcic/snovault.. Important:: DCIC Snovault is a FORK of `snovault &lt;https://pypi.org/project/snovault/&gt;`_ created at the `ENCODE DCC project at Stanford &lt;https://github.com/ENCODE-DCC&gt;`_. Our fork supports other projects of the `4D Nucleome Data Coordination and Integration Center (4DN-DCIC) &lt;https://github.com/4dn-dcic&gt;`_. Although this software is available as open source software, its primary function is to support our layered projects, and we are not at this time able to offer any active support for other uses. In particular, this fork does not purport to supersede the original `snovault &lt;https://pypi.org/project/snovault/&gt;`_. we just have a different use case that we are actively exploring.Overview========DCIC Snovault is a JSON-LD Database Framework that serves as the backend for the 4DN Data portal and CGAP. Check out our full documentation `here&lt;https://snovault.readthedocs.io/en/latest/&gt;`_... note::    This repository contains a core piece of functionality shared amongst several projects    in the 4DN-DCIC. It is meant to be used internally by the DCIC team    in support of `Fourfront &lt;https://data.4dnucleome.org&gt;`_\ ,    the 4DN data portal, and at this point in time it is not expected to be useful    in a standalone/plug-and-play way to others.Installation in 4DN components==============================DCIC Snovault is pip installable as the ``dcicsnovault`` package with::    $ pip install dcicsnovault``However, at the present time, the functionality it provides might only be useful in conjunctionwith other 4DN-DCIC components.NOTE: If you'd like to enable Elasticsearch mapping with type=nested, set the environment variable &quot;MAPPINGS_USE_NESTED&quot;or set the registry setting &quot;mappings.use_nested&quot;.Installation for Development============================Currently these are for Mac OSX using homebrew. If using linux, install dependencies with a different package manager.Step 0: Install Xcode---------------------Install Xcode (from App Store) and homebrew: http://brew.shStep 1: Verify Homebrew Itself------------------------------Verify that homebrew is working properly::    $ brew doctorStep 2: Install Homebrewed Dependencies---------------------------------------Install or update dependencies::    $ brew install libevent libmagic libxml2 libxslt openssl postgresql graphviz python3    $ brew install freetype libjpeg libtiff littlecms webp  # Required by Pillow    $ brew cask install adoptopenjdk8    $ brew install elasticsearch@5.6NOTES:* If installation of adtopopenjdk8 fails due to an ambiguity, it should work to do this instead::    $ brew cask install homebrew/cask-versions/adoptopenjdk8* If you try to invoke elasticsearch and it is not found,  you may need to link the brew-installed elasticsearch::    $ brew link --force elasticsearch@5.6* If you need to update dependencies::    $ brew update    $ rm -rf encoded/eggs* If you need to upgrade brew-installed packages that don't have pinned versions,  you can use the following. However, take care because there is no command to directly  undo this effect::    $ brew update    $ brew upgrade    $ rm -rf encoded/eggsStep 3: Running Poetry----------------------To locally install using versions of Python libraries that have worked before, use this::    $ poetry installUpdating dependencies=====================To update the version dependencies, use::    $ poetry updateThis command also takes space-separated names of specific packages to update. For more information, do::    $ poetry help updateManaging poetry.lock after update---------------------------------There may be situations where you do this with no intent to check in the resulting updates,but once you have checked that the updates are sound, you may wish to check the resulting``poetry.lock`` file.Publishing==========Normally, a successful build on a tagged branch (including a branch tagged as a beta)will cause publication automatically. The process begins by obtaining the version. You might do    $ head pyproject.tomlto see the first few lines of `pyproject.toml`, which will contain a line like ``version = 100.200.300``, whichis the ``snovault`` version.  You should prepend the letter ``v`` to that version, and create the tag and pushit to the GitHub server:    $ git tag v100.200.300    $ git push origin v100.200.300Please do NOT use some other syntax for ``git push`` that pushes all of your tags. That might pick up tags thatdo not belong on the server and can generally cause tag pollution. Push specifically the tag you intend to publish.Pushing such a tag should trigger publication automatically within a few minutes.Manual Publication------------------There might be rare occasions where you need to do the publication manually, but normally it is not necessaryor desirable. In most cases, it will either fail or will cause the automatic publication step to fail. The maincase where this is known to be needed is where publication has failed on a tagged branch for reasons other thanthe fact of that tag being already published (e.g., a network interruption or a premature shutdown of the GitHubActions task). An incomplete publication on GitHub Actions cannot be easily retried, so only in that case you mayneed to do:    $ make publishHowever, to do this command locally, you would need appropriate credentials on PyPi for such publication to succeed.As presently configured, these credentials need to be in the environment variables ``PYPI_USER`` and ``PYPI_PASSWORD``.The script that runs if you manually attempt ``make publish`` checks that you have properly declared credentialsbefore it attempts to publish. Note that GitHub Actions is already configured with credentials, so you do notneed to worry about them if you just push a tag and let the pre-defined action do the publication.Running tests=============To run specific tests locally::    $ bin/test -k test_nameTo run with a debugger::    $ bin/test --pdbSpecific tests to run locally for schema changes::    $ bin/test -k test_load_workbookRun the Pyramid tests with::    $ bin/test</longdescription>
</pkgmetadata>