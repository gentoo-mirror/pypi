<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>redis-rs========.. image:: https://img.shields.io/badge/License-MIT-blue.svg   :target: https://lbesson.mit-license.org/.. image:: https://img.shields.io/pypi/v/redis-rs.svg  :target: https://pypi.org/project/redis-rs.. image:: https://img.shields.io/pypi/pyversions/redis-rs.svg  :target: https://pypi.org/project/redis-rs  :alt: Python versions.. image:: https://readthedocs.org/projects/redis-rs/badge/?version=latest  :target: https://github.com/aamalev/redis-rs-py#redis-rs  :alt: Documentation Status.. image:: https://github.com/aamalev/redis-rs-py/workflows/Tests/badge.svg  :target: https://github.com/aamalev/redis-rs-py/actions?query=workflow%3ATests.. image:: https://img.shields.io/pypi/dm/redis-rs.svg  :target: https://pypi.org/project/redis-rs|.. image:: https://img.shields.io/badge/Rustc-1.73.0-blue?logo=rust  :target: https://www.rust-lang.org/.. image:: https://img.shields.io/badge/PyO3-maturin-blue.svg  :target: https://github.com/PyO3/maturin.. image:: https://img.shields.io/badge/PyO3-asyncio-blue.svg  :target: https://github.com/awestlake87/pyo3-asyncio.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v0.json  :target: https://github.com/charliermarsh/ruff  :alt: Code style: ruff.. image:: https://img.shields.io/badge/code%20style-black-000000.svg  :target: https://github.com/psf/black  :alt: Code style: black.. image:: https://img.shields.io/badge/types-Mypy-blue.svg  :target: https://github.com/python/mypy  :alt: Code style: Mypy.. image:: https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg  :alt: Hatch project  :target: https://github.com/pypa/hatchPython wrapper for:  | `redis-rs &lt;https://github.com/redis-rs/redis-rs&gt;`_,  | redis_cluster_async,  | `bb8 &lt;https://github.com/djc/bb8&gt;`_,  | bb8-redis,  | bb8-redis-cluster,  | deadpool-redis-cluster,Features--------* Async client for single and cluster* Support typing* Encoding values from str, int, float* Decoding values to str, int, float, list, dictInstall-------.. code-block:: shell    pip install redis-rsUsing-----.. code-block:: python  import asyncio  import redis_rs  async def main():      async with redis_rs.create_client(          &quot;redis://redis-node001&quot;,          &quot;redis://redis-node002&quot;,          max_size=1,          cluster=True,      ) as x:          info = await x.execute(&quot;INFO&quot;, &quot;SERVER&quot;, encoding=&quot;info&quot;)          print(info[&quot;redis_version&quot;])          print(await x.execute(b&quot;HSET&quot;, &quot;fooh&quot;, &quot;a&quot;, b&quot;asdfg&quot;))          print(await x.fetch_int(&quot;HSET&quot;, &quot;fooh&quot;, &quot;b&quot;, 11234567890))          print(await x.fetch_int(&quot;HGET&quot;, &quot;fooh&quot;, &quot;b&quot;))          print(await x.fetch_str(&quot;HGET&quot;, &quot;fooh&quot;, &quot;a&quot;))          print(await x.fetch_dict(&quot;HGETALL&quot;, &quot;fooh&quot;, encoding=&quot;utf-8&quot;))          print(await x.hgetall(&quot;fooh&quot;, encoding=&quot;utf-8&quot;))          print(await x.execute(&quot;CLUSTER&quot;, &quot;NODES&quot;))          print(await x.fetch_bytes(&quot;GET&quot;, &quot;foo&quot;))          print(await x.fetch_int(&quot;GET&quot;, &quot;foo&quot;))          print(await x.execute(&quot;HGETALL&quot;, &quot;fooh&quot;))          print(await x.execute(&quot;ZADD&quot;, &quot;fooz&quot;, 1.5678, &quot;b&quot;))          print(await x.fetch_scores(&quot;ZRANGE&quot;, &quot;fooz&quot;, 0, -1, &quot;WITHSCORES&quot;))          print(x.status())          stream = &quot;redis-rs&quot;          print(&quot;x.xadd&quot;, await x.xadd(stream, &quot;*&quot;, {&quot;a&quot;: &quot;1234&quot;, &quot;d&quot;: 4567}))          print(&quot;x.xadd&quot;, await x.xadd(stream, items={&quot;a&quot;: &quot;1234&quot;, &quot;d&quot;: 4567}))          print(&quot;x.xadd&quot;, await x.xadd(stream, {&quot;a&quot;: &quot;1234&quot;, &quot;d&quot;: 4567}))          print(&quot;x.xadd&quot;, await x.xadd(stream, &quot;*&quot;, &quot;a&quot;, &quot;1234&quot;, &quot;d&quot;, 4567))          print(&quot;x.xadd&quot;, await x.xadd(stream, &quot;a&quot;, &quot;1234&quot;, &quot;d&quot;, 4567))          print(&quot;xadd&quot;, await x.fetch_str(&quot;XADD&quot;, stream, &quot;*&quot;, &quot;a&quot;, &quot;1234&quot;, &quot;d&quot;, 4567))          print(&quot;xread&quot;, await x.execute(&quot;XREAD&quot;, &quot;STREAMS&quot;, stream, 0))          print(&quot;xread&quot;, await x.fetch_dict(&quot;XREAD&quot;, &quot;STREAMS&quot;, stream, 0, encoding=&quot;int&quot;))          print(&quot;x.xread&quot;, await x.xread({stream: 0}, encoding=&quot;int&quot;))          print(&quot;x.xread&quot;, await x.xread(stream, id=0, encoding=&quot;int&quot;))          print(&quot;x.xread&quot;, await x.xread(stream, stream))  asyncio.run(main())Development-----------.. code-block:: python    cargo fmt    cargo clippy    maturin developor use hatch envs:.. code-block:: python    hatch run fmt    hatch run check    hatch run build</longdescription>
</pkgmetadata>