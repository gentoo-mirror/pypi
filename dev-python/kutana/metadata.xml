<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Kutana![Kutana logo](docs/_static/kutana-logo-512.png)[![Documentation Status](https://readthedocs.org/projects/kutana/badge/?version=latest)](https://kutana.readthedocs.io/en/latest/?badge=latest)[![CodeFactor](https://www.codefactor.io/repository/github/ekonda/kutana/badge)](https://www.codefactor.io/repository/github/ekonda/kutana)[![Coverage Status](https://coveralls.io/repos/github/ekonda/kutana/badge.svg?branch=master)](https://coveralls.io/github/ekonda/kutana?branch=master)[![Codebeat Badge](https://codebeat.co/badges/fd698be3-d0f9-4e3c-b235-1c3a3cdb98a9)](https://codebeat.co/projects/github-com-ekonda-kutana-master)[![PyPI version](https://badge.fury.io/py/kutana.svg)](https://badge.fury.io/py/kutana)The library for developing systems for messengers and social networks. Greatfor developing bots. Refer to [example](https://github.com/ekonda/kutana/tree/master/example)for the showcase of the library abilities.This library uses generalized attachment types, possible actions e.t.c. for flexibilityto use plugins with different backends.## Installation```bashpython -m pip install kutana```## Running### From CLIFollowing command will populate application's config, add specified backends andload plugins from specified folder.```bashpython3 -m kutana --config example/config.yml --plugins example/plugins# usage: python3 -m kutana [-h] [--config CONFIG] [--plugins PLUGINS] [--debug]# Run kutana application instance using provided config.# optional arguments:#   -h, --help         show this help message and exit#   --config CONFIG    file with config in yaml format (default: config.yml#   --plugins PLUGINS  folder with plugins to load (default: plugins)#   --debug            set logging level to debug```Refer to the example [config.yml](https://github.com/ekonda/kutana/tree/master/example/config.example.yml)for the configuration details.### From python```pyimport jsonfrom kutana import Kutana, load_pluginsfrom kutana.backends import Vkontakte# Import configurationwith open(&quot;config.json&quot;) as fh:    config = json.load(fh)# Create applicationapp = Kutana()# Add manager to applicationapp.add_backend(Vkontakte(token=config[&quot;vk_token&quot;]))# Load and register pluginsapp.add_plugins(load_plugins(&quot;plugins/&quot;))if __name__ == &quot;__main__&quot;:    # Run application    app.run()```&gt; Token for Vkontakte is loaded from the file &quot;config.json&quot;&gt; and plugins are loaded from folder &quot;plugins/&quot;## Example plugin (`plugins/echo.py`)```pyfrom kutana import Plugin, tplugin = Plugin(name=t(&quot;Echo&quot;))@plugin.on_commands([&quot;echo&quot;])async def __(msg, ctx):    await ctx.reply(ctx.body, attachments=msg.attachments)```&gt; If your function exists only to be decorated, you can use `_` to avoid&gt; unnecessary names. Use `__` if you use something like pydash.## Available backends- Vkontakte (for [vk.com](https://vk.com) groups)- Telegram (for [telegram.org](https://telegram.org) bots)## Authors- **Michael Krukov** - [@michaelkrukov](https://github.com/michaelkrukov)- [Other contributors](CONTRIBUTORS.md)</longdescription>
</pkgmetadata>