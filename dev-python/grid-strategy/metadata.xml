<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># grid-strategy[![PyPI version](https://img.shields.io/pypi/v/grid-strategy.svg?style=flat-square)](https://pypi.org/project/grid-strategy/)[![Build Status](https://dev.azure.com/matplotlib/matplotlib/_apis/build/status/matplotlib.grid-strategy?branchName=master)](https://dev.azure.com/matplotlib/matplotlib/_build/latest?definitionId=2&amp;branchName=master)[![Documentation Status](https://readthedocs.org/projects/grid-strategy/badge/?version=latest)](https://grid-strategy.readthedocs.io/en/latest/?badge=latest)[![codecov](https://codecov.io/gh/matplotlib/grid-strategy/branch/master/graph/badge.svg)](https://codecov.io/gh/matplotlib/grid-strategy)Grid-strategy is a python package that enables the userorganize _matplotlib_ plots using different **grid strategies**.## AbstractThis package would add a mechanism for creating a grid ofsubplots based on the number of axes to be plotted anda strategy for how they should be arranged, with somesensible strategy as the default.## Detailed DescriptionIt is often the case that you have some number ofplots to display (and this number may be unknownahead of time), and want some sensible arrangementof the plots so that they are all roughly equallyaligned. However, the `subplots` and `gridspec`methods for creating subplots require both an `x`and a `y` dimension for creation and population ofa grid. This package would allow users to specify astrategy for the creation of a grid, and then specifyhow many axes they want to plot, and they wouldget back a collection of axes arranged accordingto their strategy.A proof of concept was implemented for the 'squarish'strategy, which arranges plots in alternating rowsof `x` and `x-1` objects. Some examples featuring thistechnique:&lt;img src=&quot;https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement06.png&quot; width=&quot;300&quot; alt=&quot;n=6&quot;&gt; &lt;img src=&quot;https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement07.png&quot; width=&quot;300&quot; alt=&quot;n=7&quot;&gt;&lt;img src=&quot;https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement08.png&quot; width=&quot;300&quot; alt=&quot;n=8&quot;&gt; &lt;img src=&quot;https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement17.png&quot; width=&quot;300&quot; alt=&quot;n=17&quot;&gt;This makes use of a `GridStrategy` object, which populates a `GridSpec`. In general, this concept can likely be implemented as a layer of abstraction *above* `gridspec.GridSpec`.Some basic strategies that will be included in the first release:- `&quot;Squarish&quot;` (name subject to change) - As implemented in the demo code above - currently this is centered, but the base `SquarishStrategy` object could have options like `justification` which could include:    - `'center'` (default), `'left'`, `'right'` - empty spaces either center the plots or leave them ragged-left or ragged-right    - `'fill-space'` and `fill-grow'` (names subject to change) - These would fill every column as &quot;fully-justified&quot;, with `fill-space` increasing the interstitial space and `fill-grow` modifying the width of the plots themselves to fill the row.- `&quot;Rectangular&quot;` - Similar to `&quot;Squarish&quot;`, this would find the largest pair of factors of the number of plots and use that to populate a rectangular grid - so `6` would return a 3x2 grid, `7` would return a 7x1 grid, and `10` would return a 5x2 grid.Since many of these grid strategies would likely have at least *some* asymmetries, a mechanism for transposing any grid structure should be implemented in the base `GridStrategy` object.### Higher dimensionsCurrently the package is limited to 2-dimensionalgrid arrangements, but a &quot;nice-to-have&quot; might bea higher-order API for `GridStrategy` that also allowsfor the proliferation of additional *figures* (e.g.&quot;if I have more than 10 axes to plot, split themup as evenly as possible among `n / 10` differentfigures&quot;). This would be no harder to implementin terms of the creation of such strategies, butmay be harder to work with since it wouldnecessarily spawn axes across multiple figures.</longdescription>
</pkgmetadata>