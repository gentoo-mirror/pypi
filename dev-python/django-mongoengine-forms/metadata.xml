<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django mongoengine forms========================This is an implementation of Django's model forms for mongoenginedocuments.This a fork of `Jan Schrewe'smongodbforms &lt;https://github.com/jschrewe/django-mongodbforms&gt;`__, whichhad some issues with keeping stuff up to date and it also carried aroundthe baggage of supporting ancient Django versions. This fork aims to geta much leaner version.Requirements-------------  Django &gt;= 1.9-  `mongoengine &lt;http://mongoengine.org/&gt;`__ &gt;= 0.10.0Earlier versions may work, but we're currently not testing with those.Supported field types---------------------Mongodbforms supports all the fields that have a simple representationin Django's formfields (IntField, TextField, etc). In addition it alsosupports ``ListFields`` and ``MapFields``.File fields~~~~~~~~~~~Mongodbforms handles file uploads just like the normal Django forms.Uploaded files are stored in GridFS using the mongoengine fields.Because GridFS has no directories and stores files in a flat space anuploaded file whose name already exists gets a unique filename with theform ``&lt;filename&gt;_&lt;unique_number&gt;.&lt;extension&gt;``.Container fields~~~~~~~~~~~~~~~~For container fields like ``ListFields`` and ``MapFields`` a very simplewidget is used. The widget renders the container content in theappropriate field plus one empty field. This is mainly done to notintroduce any Javascript dependencies, the backend code will happilyhandle any kind of dynamic form, as long as the field ids arecontinuously numbered in the POST data.You can use any of the other supported fields inside list or map fields.Including ``FileFields`` which aren't really supported by mongoengineinside container fields.Usage-----mongodbforms supports forms for normal documents and embedded documents.Normal documents~~~~~~~~~~~~~~~~To use mongodbforms with normal documents replace djangos forms withmongodbform forms... code:: python   from mongodbforms import DocumentForm   class BlogForm(DocumentForm)       ...Embedded documents~~~~~~~~~~~~~~~~~~For embedded documents use ``EmbeddedDocumentForm``. The Meta-object ofthe form has to be provided with an embedded field name. The embeddedobject is appended to this. The form constructor takes a couple ofadditional arguments: The document the embedded document gets added toand an optional position argument.If no position is provided the form adds a new embedded document to thelist if the form is saved. To edit an embedded document stored in a listfield the position argument is required. If you provide a position andno instance to the form the instance is automatically loaded using theposition argument.If the embedded field is a plain embedded field the current object issimply overwritten... code:: python   # forms.py   from mongodbforms import EmbeddedDocumentForm   class MessageForm(EmbeddedDocumentForm):       class Meta:           document = Message           embedded_field_name = 'messages'           fields = ['subject', 'sender', 'message',]   # views.py   # create a new embedded object   form = MessageForm(parent_document=some_document, ...)   # edit the 4th embedded object   form = MessageForm(parent_document=some_document, position=3, ...)Documentation-------------In theory the documentation `Django'smodelform &lt;https://docs.djangoproject.com/en/dev/topics/forms/modelforms/&gt;`__documentation should be all you need (except for one exception; readon). If you find a discrepancy between something that mongodbforms doesand what Django's documentation says, you have most likely found a bug.Please `reportit &lt;https://github.com/thomwiggers/django-mongoengine-forms/issues&gt;`__.Form field generation~~~~~~~~~~~~~~~~~~~~~Because the fields on mongoengine documents have no notion of formfields mongodbform uses a generator class to generate the form field fora db field, which is not explicitly set.To use your own field generator you can either set a generator for yourwhole project using ``MONGODBFORMS_FIELDGENERATOR`` in settings.py oryou can use the ``formfield_generator`` option on the form's Meta class.The default generator is defined in ``mongodbforms/fieldgenerator.py``and should make it easy to override form fields and widgets. If you seta generator on the document form you can also pass two dicts``field_overrides`` and ``widget_overrides`` to ``__init__``. For a listof valid keys have a look at ``MongoFormFieldGenerator``... code:: python   # settings.py   # set the fieldgeneretor for the whole application   MONGODBFORMS_FIELDGENERATOR = 'myproject.fieldgenerator.GeneratorClass'   # generator.py   from mongodbforms.fieldgenerator import MongoFormFieldGenerator   class MyFieldGenerator(MongoFormFieldGenerator):       ...   # forms.py   from mongodbforms import DocumentForm   from generator import MyFieldGenerator   class MessageForm(DocumentForm):       class Meta:           formfield_generator = MyFieldGenerator</longdescription>
</pkgmetadata>