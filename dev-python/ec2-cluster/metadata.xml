<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ec2-clusterSimple CLI and Python library to spin up and run shell commands on clusters of EC2 instances using [`boto3`](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) and [`fabric`](https://github.com/fabric/fabric). Multi-purpose, but created to make deep learning distributed training infrastructure easier. Also very useful for running performance tests across multiple EC2 instance types.## QuickstartThis code will launch a cluster of EC2 instances, run the command `hostname` on all of them, return the results of the command and then tear down the cluster.```pythonimport ec2_cluster as ec3with ec3.infra.ConfigCluster(&quot;cluster.yaml&quot;) as cluster:    sh = cluster.get_shell()    results = sh.run_on_all(&quot;hostname&quot;)    hostnames = [result.stdout for result in results]```## Long-running tasks`ec2-cluster` is also designed for long-running tasks where you may not want to keep your local machine awake for the full duration. The library relies on EC2 tags to keep track of EC2 instances, letting you interact with a cluster across sessions without needing an always-on control plane.Below is one way to launch complicated, long-running jobs and download the results at some later time. `check_on_job()` can be run in a different session or even a different machine than `launch_job()` as long as they have the same `cluster.yaml` and are using the same AWS account.```pythonimport ec2_cluster as ec3def launch_job():    cluster = ec3.infra.ConfigCluster(&quot;cluster.yaml&quot;)    cluster.launch(verbose=True)    sh = cluster.get_shell()    sh.copy_from_local_to_all(&quot;job_script.py&quot;, &quot;job_script.py&quot;)    sh.run_on_all(&quot;python job_script.py &gt; job.log 2&gt;&amp;1 &amp;&quot;)  # Launch script as background processdef check_on_job():    cluster = ec3.infra.ConfigCluster(&quot;cluster.yaml&quot;)    sh = cluster.get_shell()    statuses = sh.run_on_all(&quot;tail -n 1 job.log&quot;, hide=True)    for status in statuses:        if status.stdout.rstrip(&quot;\n&quot;) != &quot;job_script.py complete&quot;:            print(&quot;Job is not yet complete on all instances&quot;)            return    print(&quot;Job is finally done on all instances!&quot;)    sh.copy_from_all_to_local(&quot;job.log&quot;, &quot;./results/&quot;)    cluster.terminate(verbose=True)```This will create a directory on your local machine:```results/├── 0│   ├── ip.txt│   └── job.log├── 1│   ├── ip.txt│   └── job.log└── 3    ├── ip.txt    └── job.log```## Overview`ec2-cluster` is designed for simple distributed tasks where Kubernetes is overkill. There is no setup required other than the ability to launch EC2 instances with `boto3` and the ability to SSH to those instances (only a requirement if you want to run commands on them). `ec2-cluster` provides the ability to launch a cluster, to retrieve IP addresses for all nodes/nodes in the cluster, to delete the cluster and to execute commands on some or all of the instances. Unlike like most cluster management tools, all cluster management in `ec2-cluster` happens client-side. `ec2-cluster` creates EC2 instances and gives them globally unique names (using the EC2 Name tag) which is later used to identify which instances are part of a given cluster. `ec2-cluster` then provides convenience classes to run commands on some or all of the instances via SSH (using the [`fabric`](https://github.com/fabric/fabric) library).## Other benefits- Resilient to EC2 capacity limits. If instances are not available, `ec2-cluster` will retry until the all nodes in the cluster are created or until the user-set timeout is reached.- Easy to quickly launch duplicate clusters for parallel training runs.- Can write orchestration logic that needs to be run when launching a cluster, e.g. enabling passwordless ssh between all instances for Horovod-based training- Iterative, not disruptive, improvements on the common methodology of manually launching EC2 instances, ssh-ing to them, configuring environments by hand and running scripts### Usage`ec2-cluster` can be consumed in two ways:- A CLI for launching, describing and deleting clusters. - A python library for scripting.  This library has three main components:L- **infra**: creating cluster infrastructure- **orch**: orchestrating simple runtime cluster configuration (e.g. generate a hostfile with runtime IPs)- **control**: running commands on the cluster### CLI Quick Start### Library Quick Start</longdescription>
</pkgmetadata>