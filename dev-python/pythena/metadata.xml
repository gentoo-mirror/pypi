<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pythenaThis is a simple python module that will allow you to query athena the same way the AWS Athena console would. It only requires a database name and query string.## Install```bashpip install pythena```## SetupBe sure to set up your AWS authentication credentials. You can do so by using the aws cli and running```bashpip install awscliaws configure```More help on configuring the aws cli here https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html## Simple Usage```pythonimport pythenaathena_client = pythena.Athena(&quot;mydatabase&quot;) # Returns results as a pandas dataframedf = athena_client.execute(&quot;select * from mytable&quot;)print(df.sample(n=2)) # Prints 2 rows from your dataframe```## Connect to Database```pythonimport boto3import pythena# Connect to a databaseathena_client = pythena.Athena(database=&quot;mydatabase&quot;)# Connect to a database and override default aws region in your aws configurationathena_client = pythena.Athena(database=&quot;mydatabase&quot;, region='us-east-1')# Connect to a database and override default profile in your aws configurationathena_client = pythena.Athena(database=&quot;mydatabase&quot;, session=boto3.session.Session())```## athena_client.execute()```execute(  query='SQL_QUERY',                   # Required  s3_output_url='FULL_S3_PATH',        # Optional (Format example: 's3://mybucket/mydir'  save_results=TRUE | FALSE            # Optional. Defaults to True only when 's3_output_url' is provided. If True, the s3 results will not be deleted and an tuple is returned with the execution_id.  run_async=TRUE | FALSE               # Optional. If True, allows you to run the query asynchronously. Returns execution_id, use get_result(execution_id) to fetch it when finished  workgroup='primary'                  # Optional. Defaults to 'primary' workgroup)```Note: `execute()` returns a tuple (dataframe, execution_id) unless `run_async=True`, then it only returns the execution_id.## Full Usage Examples```pythonimport boto3import pythena# Prints out all databases listed in the glue catalogpythena.print_databases()pythena.print_databases(region='us-east-1') # Overrides default regionpythena.print_databases(session=boto3.session.Session()) # Overrides default profile# Gets all databases and returns as a listpythena.get_databases()pythena.get_databases(region='us-east-1') # Overrides default regionpythena.get_databases(session=boto3.session.Session()) # Overrides default profile# Connect to a databaseathena_client = pythena.Athena(database=&quot;mydatabase&quot;)athena_client = pythena.Athena(database=&quot;mydatabase&quot;, region='us-east-1') # Overrides default regionathena_client = pythena.Athena(database=&quot;mydatabase&quot;, session=boto3.session.Session()) # Overrides default profile# Prints out all tables in a databaseathena_client.print_tables()# Gets all tables in the database you are connected to and returns as a listathena_client.get_tables()# Execute a query, returns tuple with dataframe and athena execution_iddataframe, _ = athena_client.execute(query=&quot;select * from my_table&quot;) # Results are  returned as a dataframe# Execute a query and save results to s3dataframe, execution_id = athena_client.execute(query=&quot;select * from my_table&quot;, s3_output_url=&quot;s3://mybucket/mydir&quot;) # Results are  returned as a dataframe# Get Execution Id and save resultsdataframe, execution_id = athena_client.execute(query=&quot;select * from my_table&quot;, save_results=True)# Get Execution Id and save resultsdataframe, execution_id = athena_client.execute(query=&quot;select * from my_table&quot;, save_results=True)# Execute a query asynchronouslyexecution_id = athena_client.execute(query=&quot;select * from my_table&quot;, run_async=True) # Returns just the execution iddataframe = athena_client.get_result(execution_id) # Will report errors if query failed or let you know if it is still running# With asynchronous queries, can check status, get error, or cancelpythena.get_query_status(execution_id)pythena.get_query_error(execution_id)pythena.cancel_query(execution_id)```## NoteBy default, when executing athena queries, via boto3 or the AWS athena console, the results are saved in an s3 bucket. This module by default, assuming a successful execution, will delete the s3 result file to keep s3 clean. If an s3_output_url is provided, then the results will be saved to that location and will not be deleted.</longdescription>
</pkgmetadata>