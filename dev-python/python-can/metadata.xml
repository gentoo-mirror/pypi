<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-can==========|pypi| |conda| |python_implementation| |downloads| |downloads_monthly||docs| |github-actions| |coverage| |mergify| |formatter|.. |pypi| image:: https://img.shields.io/pypi/v/python-can.svg   :target: https://pypi.python.org/pypi/python-can/   :alt: Latest Version on PyPi.. |conda| image:: https://img.shields.io/conda/v/conda-forge/python-can   :target: https://github.com/conda-forge/python-can-feedstock   :alt: Latest Version on conda-forge.. |python_implementation| image:: https://img.shields.io/pypi/implementation/python-can   :target: https://pypi.python.org/pypi/python-can/   :alt: Supported Python implementations.. |downloads| image:: https://static.pepy.tech/badge/python-can   :target: https://pepy.tech/project/python-can   :alt: Downloads on PePy.. |downloads_monthly| image:: https://static.pepy.tech/badge/python-can/month   :target: https://pepy.tech/project/python-can   :alt: Monthly downloads on PePy.. |formatter| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/python/black   :alt: This project uses the black formatter... |docs| image:: https://readthedocs.org/projects/python-can/badge/?version=stable   :target: https://python-can.readthedocs.io/en/stable/   :alt: Documentation.. |github-actions| image:: https://github.com/hardbyte/python-can/actions/workflows/ci.yml/badge.svg   :target: https://github.com/hardbyte/python-can/actions/workflows/ci.yml   :alt: Github Actions workflow status.. |coverage| image:: https://coveralls.io/repos/github/hardbyte/python-can/badge.svg?branch=develop   :target: https://coveralls.io/github/hardbyte/python-can?branch=develop   :alt: Test coverage reports on Coveralls.io.. |mergify| image:: https://img.shields.io/endpoint.svg?url=https://api.mergify.com/v1/badges/hardbyte/python-can&amp;style=flat   :target: https://mergify.io   :alt: Mergify StatusThe **C**\ ontroller **A**\ rea **N**\ etwork is a bus standard designedto allow microcontrollers and devices to communicate with each other. Ithas priority based bus arbitration and reliable deterministiccommunication. It is used in cars, trucks, boats, wheelchairs and more.The ``can`` package provides controller area network support forPython developers; providing common abstractions todifferent hardware devices, and a suite of utilities for sending and receivingmessages on a can bus.The library currently supports CPython as well as PyPy and runs on Mac, Linux and Windows.==============================  ===========Library Version                 Python------------------------------  -----------  2.x                           2.6+, 3.4+  3.x                           2.7+, 3.5+  4.0+                          3.7+  4.3+                          3.8+==============================  ===========Features--------- common abstractions for CAN communication- support for many different backends (see the `docs &lt;https://python-can.readthedocs.io/en/stable/interfaces.html&gt;`__)- receiving, sending, and periodically sending messages- normal and extended arbitration IDs- `CAN FD &lt;https://en.wikipedia.org/wiki/CAN_FD&gt;`__ support- many different loggers and readers supporting playback: ASC (CANalyzer format), BLF (Binary Logging Format by Vector), MF4 (Measurement Data Format v4 by ASAM), TRC, CSV, SQLite, and Canutils log- efficient in-kernel or in-hardware filtering of messages on supported interfaces- bus configuration reading from a file or from environment variables- command line tools for working with CAN buses (see the `docs &lt;https://python-can.readthedocs.io/en/stable/scripts.html&gt;`__)- moreExample usage-------------``pip install python-can``.. code:: python    # import the library    import can    # create a bus instance using 'with' statement,    # this will cause bus.shutdown() to be called on the block exit;    # many other interfaces are supported as well (see documentation)    with can.Bus(interface='socketcan',                  channel='vcan0',                  receive_own_messages=True) as bus:       # send a message       message = can.Message(arbitration_id=123, is_extended_id=True,                             data=[0x11, 0x22, 0x33])       bus.send(message, timeout=0.2)       # iterate over received messages       for msg in bus:           print(f&quot;{msg.arbitration_id:X}: {msg.data}&quot;)       # or use an asynchronous notifier       notifier = can.Notifier(bus, [can.Logger(&quot;recorded.log&quot;), can.Printer()])You can find more information in the documentation, online at`python-can.readthedocs.org &lt;https://python-can.readthedocs.org/en/stable/&gt;`__.Discussion----------If you run into bugs, you can file them in our`issue tracker &lt;https://github.com/hardbyte/python-can/issues&gt;`__ on GitHub.`Stackoverflow &lt;https://stackoverflow.com/questions/tagged/can+python&gt;`__ has severalquestions and answers tagged with ``python+can``.Wherever we interact, we strive to follow the`Python Community Code of Conduct &lt;https://www.python.org/psf/codeofconduct/&gt;`__.Contributing------------See `doc/development.rst &lt;doc/development.rst&gt;`__ for getting started.</longdescription>
</pkgmetadata>