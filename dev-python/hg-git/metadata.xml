<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Hg-Git Mercurial Plugin=======================Homepage:  https://hg-git.github.io/Repository:  https://foss.heptapod.net/mercurial/hg-gitMailing list:  `hg-git@googlegroups.com &lt;mailto:hg-git@googlegroups.com&gt;`_ (`Google  Group &lt;https://groups.google.com/g/hg-git&gt;`_)This is the Hg-Git plugin for Mercurial, adding the ability to push andpull to/from a Git server repository from Hg. This means you cancollaborate on Git based projects from Hg, or use a Git server as acollaboration point for a team with developers using both Git and Hg.The Hg-Git plugin can convert commits/changesets losslessly from onesystem to another, so you can push via a Mercurial repository and another Hgclient can pull it and their changeset node ids will be identical -Mercurial data does not get lost in translation. It is intended that Hgusers may wish to use this to collaborate even if no Git users areinvolved in the project, and it may even provide some advantages ifyou're using Bookmarks (see below).Dependencies============This plugin is implemented entirely in Python â€” there are no Gitbinary dependencies, and you do not need to have Git installed on yoursystem. The only dependencies are:* Mercurial 5.2* Dulwich 0.19.3* Python 3.6Please note that these are the earliest versions known to work; laterversions generally work better.Installing==========We recommend installing the plugin using your a package manager, suchas pip::  python -m pip install hg-gitAlternatively, you can clone this repository somewhere and install itfrom the directory::  hg clone https://foss.heptapod.net/mercurial/hg-git/  cd hg-git  python -m pip install .And enable it from somewhere in your ``$PYTHONPATH``::   [extensions]   hggit =Contributing============The primary development location for Hg-Git is `Heptapod&lt;http://foss.heptapod.net/mercurial/hg-git/&gt;`_, and you can followtheir guide on `how to contribute patches&lt;https://heptapod.net/pages/quick-start-guide.html&gt;`_.Alternatively, you can follow the `guide on how to contribute toMercurial itself&lt;https://www.mercurial-scm.org/wiki/ContributingChanges&gt;`_, and sendpatches to `the list &lt;https://groups.google.com/g/hg-git&gt;`_.Usage=====You can clone a Git repository from Mercurial by running``hg clone &lt;url&gt; [dest]``. For example, if you were to run::   $ hg clone git://github.com/hg-git/hg-git.gitHg-Git would clone the repository and convert it to a Mercurialrepository for you. Other protocols are also supported, see ``hg helpgit`` for details.If you are starting from an existing Mercurial repository, you have to set up aGit repository somewhere that you have push access to, add a path entryfor it in your .hg/hgrc file, and then run ``hg push [name]`` fromwithin your repository. For example::   $ cd hg-git # (a Mercurial repository)   $ # edit .hg/hgrc and add the target git url in the paths section   $ hg pushThis will convert all your Mercurial data into Git objects and push them to theGit server.Now that you have a Mercurial repository that can push/pull to/from a Gitrepository, you can fetch updates with ``hg pull``::   $ hg pullThat will pull down any commits that have been pushed to the server inthe meantime and give you a new head that you can merge in.Hg-Git pushes your bookmarks up to the Git server as branches and willpull Git branches down and set them up as bookmarks.Hg-Git can also be used to convert a Mercurial repository to Git. Youcan use a local repository or a remote repository accessed via SSH, HTTPor HTTPS. Use the following commands to convert the repository, itassumes you're running this in ``$HOME``::   $ mkdir git-repo; cd git-repo; git init; cd ..   $ cd hg-repo   $ hg bookmarks hg   $ hg push ../git-repoThe ``hg`` bookmark is necessary to prevent problems as otherwisehg-git pushes to the currently checked out branch, confusing Git. Thesnippet above will create a branch named ``hg`` in the Git repository.To get the changes in ``master`` use the following command (onlynecessary in the first run, later just use ``git merge`` or ``gitrebase``).::   $ cd git-repo   $ git checkout -b master hgTo import new changesets into the Git repository just rerun the ``hgpush`` command and then use ``git merge`` or ``git rebase`` in your Gitrepository.``.gitignore`` and ``.hgignore``--------------------------------If present, ``.gitignore`` will be taken into account provided that there isno ``.hgignore``. In the latter case, the rules from ``.hgignore`` apply,regardless of what ``.gitignore`` prescribes.This has been so since version 0.5.0, released in 2013.Further reading===============See ``hg help -e hggit``.Alternatives============Since version 5.4, Mercurial includes an extension called ``git``. Itinteracts with a Git repository directly, avoiding the intermediateconversion. This has certain advantages: * Each commit only has one node ID, which is the Git hash. * Data is stored only once, so the on-disk footprint is much lower.The extension has certain drawbacks, however: * It cannot handle all Git repositories. In particular, it cannot   handle `octopus merges`_, i.e. merge commits with more than two   parents. If any such commit is included in the history, conversion   will fail. * You cannot interact with Mercurial repositories... _octopus merges: https://git-scm.com/docs/git-mergeAnother extension packaged with Mercurial, the ``convert`` extension,also has Git support.Other alternatives exist for Git users wanting to access Mercurialrepositories, such as `git-remote-hg`_... _git-remote-hg: https://pypi.org/project/git-remote-hg/Configuration=============``git.authors``---------------Git uses a strict convention for &quot;author names&quot; when representingchangesets, using the form ``[realname] [email address]``. Mercurialencourages this convention as well but is not as strict, so it's notuncommon for a Mercurial repository to have authors listed as, for example,simple usernames. hg-git by default will attempt to translate Mercurialusernames using the following rules:-  If the Mercurial username fits the pattern ``NAME &lt;EMAIL&gt;``, the Git   name will be set to NAME and the email to EMAIL.-  If the Mercurial username looks like an email (if it contains an   ``@``), the Git name and email will both be set to that email.-  If the Mercurial username consists of only a name, the email will be   set to ``none@none``.-  Illegal characters (stray ``&lt;``\ s or ``&gt;``\ s) will be stripped out,   and for ``NAME &lt;EMAIL&gt;`` usernames, any content after the   right-bracket (for example, a second ``&gt;``) will be turned into a   url-encoded sigil like ``ext:(%3E)`` in the Git author name.Since these default behaviors may not be what you want (``none@none``,for example, shows up unpleasantly on GitHub as &quot;illegal emailaddress&quot;), the ``git.authors`` option provides for an &quot;authorstranslation file&quot; that will be used during outgoing transfers fromMercurial to Git only, by modifying ``hgrc`` as such::   [git]   authors = authors.txtWhere ``authors.txt`` is the name of a text file containing author nametranslations, one per each line, using the following format::   johnny = John Smith &lt;jsmith@foo.com&gt;   dougie = Doug Johnson &lt;dougiej@bar.com&gt;Empty lines and lines starting with a &quot;#&quot; are ignored.It should be noted that this translation is in *the Mercurial to Gitdirection only*. Changesets coming from Git back to Mercurial will nottranslate back into Mercurial usernames, so it's best that the sameusername/email combination be used on both the Mercurial and Git sides; theauthor file is mostly useful for translating legacy changesets.``git.branch_bookmark_suffix``------------------------------Hg-Git does not convert between Mercurial named branches and gitbranches as the two are conceptually different; instead, it usesMercurial bookmarks to represent the concept of a Git branch.Therefore, when translating a Mercurial repository over to Git, youtypically need to create bookmarks to mirror all the named branchesthat you'd like to see transferred over to Git. The major caveat withthis is that you can't use the same name for your bookmark as that ofthe named branch, and furthermore there's no feasible way to rename abranch in Mercurial. For the use case where one would like to transfera Mercurial repository over to Git, and maintain the same namedbranches as are present on the hg side, the ``branch_bookmark_suffix``might be all that's needed. This presents a string &quot;suffix&quot; that willbe recognized on each bookmark name, and stripped off as the bookmarkis translated to a Git branch::   [git]   branch_bookmark_suffix=_bookmarkAbove, if a Mercurial repository had a named branch called``release_6_maintenance``, you could then link it to a bookmark called``release_6_maintenance_bookmark``. hg-git will then strip off the``_bookmark`` suffix from this bookmark name, and create a Git branchcalled ``release_6_maintenance``. When pulling back from Git to hg, the``_bookmark`` suffix is then applied back, if and only if a Mercurial namedbranch of that name exists. E.g., when changes to the``release_6_maintenance`` branch are checked into Git, these will beplaced into the ``release_6_maintenance_bookmark`` bookmark on hg. Butif a new branch called ``release_7_maintenance`` were pulled over to hg,and there was not a ``release_7_maintenance`` named branch already, thebookmark will be named ``release_7_maintenance`` with no usage of thesuffix.The ``branch_bookmark_suffix`` option is, like the ``authors`` option,intended for migrating legacy hg named branches. Going forward, a Mercurialrepository that is to be linked with a Git repository should only use bookmarks fornamed branching.``git.findcopiesharder``------------------------Whether to consider unmodified files as copy sources. This is a veryexpensive operation for large projects, so use it with caution. Similarto ``git diff``'s --find-copies-harder option.``git.intree``--------------Hg-Git keeps a Git repository clone for reading and updating. Bydefault, the Git clone is the subdirectory ``git`` in your localMercurial repository. If you would like this Git clone to be at the samelevel of your Mercurial repository instead (named ``.git``), add thefollowing to your ``hgrc``::   [git]   intree = TruePlease note that changing this setting in an existing repositorydoesn't move the local Git repository. You will either have to do soyourself, or issue an ``hg pull`` after the fact to repopulate the newlocation.``git.mindate``---------------If set, branches where the latest commit's commit time is older thanthis will not be imported. Accepts any date formats that Mercurial does-- see ``hg help dates`` for more.``git.public``--------------A list of Git branches that should be considered &quot;published&quot;, andtherefore converted to Mercurial in the 'public' phase. This is onlyused if ``hggit.usephases`` is set.``git.pull-prune-remote-branches``----------------------------------Before fetching, remove any remote-tracking references, orpseudo-tags, that no longer exist on the remote. This is equivalent tothe ``--prune`` option to ``git fetch``, and means that pseudo-tagsfor remotes â€” such as ``default/master`` â€” always actually reflectwhat's on the remote.This option is enabled by default.``git.pull-prune-bookmarks``----------------------------On pull, delete any unchanged bookmarks removed on the remote. Inother words, if e.g. the ``thebranch`` bookmark remains at``default/thebranch``, and the branch is deleted in Git, pullingdeletes the bookmark.This option is enabled by default.``git.renamelimit``-------------------The number of files to consider when performing the copy/renamedetection. Detection is disabled if the number of files modified in acommit is above the limit. Detection is O(N^2) in the number of filesmodified, so be sure not to set the limit too high. Similar to Git's``diff.renameLimit`` config. The default is &quot;400&quot;, the same as Git.``git.similarity``------------------Specify how similar files modified in a Git commit must be to beimported as Mercurial renames or copies, as a percentage between &quot;0&quot;(disabled) and &quot;100&quot; (files must be identical). For example, &quot;90&quot; meansthat a delete/add pair will be imported as a rename if more than 90% ofthe file has stayed the same. The default is &quot;0&quot; (disabled).``hggit.mapsavefrequency``--------------------------By default, hg-git only saves the results of a conversion at the end.Use this option to enable resuming long-running pulls and pushes. Setthis to a number greater than 0 to allow resuming after convertingthat many commits. This can help when the conversion encounters anerror partway through a large batch of changes. Otherwise, an error orinterruption will roll back the transaction, similar to regularMercurial.Defaults to 1000.Please note that this is disregarded for an initial clone, as anyerror or interruption will delete the destination. So instead ofcloning a large Git repository, you might want to pull instead::  $ hg init linux  $ cd linux  $ echo &quot;[paths]\ndefault = https://github.com/torvalds/linux&quot; &gt; .hg/hgrc  $ hg pullâ€¦and be extremely patient. Please note that converting very largerepositories may take *days* rather than mere *hours*, and may runinto issues with available memory for very long running clones. Evenany small, undiscovered leak will build up when processing hundreds ofthousands of files and commits. Cloning the Linux kernel is likely apathological case, but other storied repositories such as CPython dowork well, even if the initial clone requires a some patience.``hggit.usephases``-------------------When converting Git revisions to Mercurial, place them in the 'public'phase as appropriate. Namely, revisions that are reachable from theremote Git repository's default branch, or ``HEAD``, will be marked*public*. For most repositories, this means the remote ``master``branch will be converted as public. The same applies to any commitstagged in the remote.To restrict publishing to specific branches or tags, use the``git.public`` option.Publishing commits prevents their modification, and speeds up manylocal Mercurial operations, such as ``hg shelve``.``hggit.fetchbuffer``---------------------Data fetched from Git is buffered in memory, unless it exceeds thegiven limit, in megabytes. By default, flush the buffer to disk whenit exceeds 100MB.``hggit.retries``-----------------Interacting with a remote Git repository may require authentication.Normally, this will trigger a prompt and a retry, and this optionrestricts the amount of retries. Defaults to 3.``hggit.invalidpaths``----------------------Both Mercurial and Git consider paths as just bytestrings internally,and allow almost anything. The difference, however, is in the _almost_part. For example, many Git servers will reject a push for securityreasons if it contains a nested Git repository. Similarly, Mercurialcannot checkout commits with a nested repository, and it cannot evenstore paths containing an embedded newline or carrage returncharacter.The default is to issue a warning and skip these paths. You canchange this by setting ``hggit.invalidpaths`` in ``.hgrc``::  [hggit]  invalidpaths = keepPossible values are ``keep``, ``skip`` or ``abort``. Prior to 1.0,the default was ``abort``.</longdescription>
</pkgmetadata>