<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Version](https://img.shields.io/github/v/release/farfar/seatconnect?include_prereleases)![PyPi](https://img.shields.io/pypi/v/seatconnect?label=latest%20pypi)![Downloads PyPi](https://img.shields.io/pypi/dm/seatconnect)# Seat ConnectFork of https://github.com/lendy007/skodaconnect which in turn is a fork of:https://github.com/robinostlund/volkswagencarnetOriginally an integration for VW Carnet, adapted to communicate with Skoda Connect and then Seat ConnectChanges made to utilize the same API calls as the Seat Connect mobile app.## InformationRetrieve statistics about your Seat from the Seat Connect online serviceNo licence, public domain, no guarantees, feel free to use for anything. Please contribute improvements/bugfixes etc.## Breaking changesMajor code changes have been made to consolidate functions and also enable auxiliary climatisation for PHEV vehicles.Names have been changed to avoid confusion when working with the code.- **From version 1.1.0** and onwards there has been changes to token handling, login procedure and overall mode streamlined code. Logins should now be significantly faster and reliable. Codebase is directly derived and modified from Skoda Connect library with minor modifications to suit Seat API handling.- **From version 1.0.30** and onwards there might be breaking changes for the combustion heating/climatisation.- **Parking Heater** is the auxiliary/parking heater for **non-PHEV** vehicles. This uses the &quot;legacy&quot; remotestandheizung API function.Heating is what it sounds like and ventilation is used to ventilate/cool the car.- **Auxiliary Heater** is the auxiliary/parking heater for **PHEV** vehicles. This uses the climater API function, same as electric climatisation.## Thanks to- [RobinostLund](https://github.com/robinostlund/volkswagencarnet) for initial project for Volkswagen Carnet I was able to fork- [Farfar](https://github.com/Farfar) for modifications related to electric engines- [tanelvakker](https://github.com/tanelvakker) for modifications related to correct SPIN handling for various actions and using correct URLs also for MY2021## Other related repositories- [HomeAssistant Component](https://github.com/farfar/homeassistant-seatconnect) a custom component for Home Assistant## Installation```sh[venv-python3] user@localhost:~$ pip install seatconnect```### ExampleFor an extensive example, please use the code found in example/example.py.When logged in the library will automatically create a vehicle object for every car registered to the account. Initially no data is fetched at all. Use the doLogin method and it will signin with the credentials used for the class constructor.Method get_vehicles will fetch vehicle basic information and create Vehicle class objects for all associated vehicles in account.To update all available data use the update_all method of the Connect class. This will call the update function for all registered vehicles, which in turn will fetch data from all available API endpoints.#### AttributesThe Vehicle class contains all of the attributes with values fetched from the API.To access a single attribute, please see and use the example/example.py.This will print all available methods, variables and properties as well as a list of supported attributes for discovered car.#### MethodsVehicle, in the following example the car object is an object of Vehicle class:```car.set_charger(action = &quot;start&quot;)                          # action = &quot;start&quot; or &quot;stop&quot;car.set_charger_current(value=&lt;int/str&gt;                    # value = integer 1-255 or Maximum/Reduced (For PHEV: 252=Reduced and 254=Maximum)car.set_charge_limit(value=&lt;int&gt;)                          # value = integer 0-100 in 10 increments. Valid values is PHEV: 0-50, EV: 50-100.car.set_battery_climatisation(mode = False)                # mode = False or Truecar.set_climatisation(mode = &quot;auxilliary&quot;, spin=&quot;1234&quot;)    # mode = &quot;auxilliary&quot;, &quot;electric&quot; or &quot;off&quot;. spin is S-PIN and only needed for aux heatingcar.set_climatisation_temp(temperature = 22)               # temperature = integer from 16 to 30car.set_window_heating(action = &quot;start&quot;)                   # action = &quot;start&quot; or &quot;stop&quot;car.set_lock(action = &quot;unlock&quot;, spin = &quot;1234&quot;)             # action = &quot;unlock&quot; or &quot;lock&quot;. spin = SPIN, needed for bothcar.set_pheater(mode = &quot;heating&quot;, spin = &quot;1234&quot;)           # action = &quot;heating&quot;, &quot;ventilation&quot; or &quot;off&quot;. spin = SPIN, not needed for offcar.set_charge_limit(limit = 30)                           # limit = 0,10,20,30,40,50car.set_timer_active(id = 1, action = &quot;on&quot;}                # id = 1, 2, 3, action = &quot;on&quot; or &quot;off&quot;.car.set_timer_schedule(id = 1,  schedule = dict)           # id = 1, 2, 3, see example for full information about schedule variablecar.set_refresh()                                          # Takes no arguments, will trigger force update```Connection:```session = aiohttp.ClientSession(headers={'Connection': 'keep-alive'})   # Create a aiohttp session objectconn = Connection(session, username, password, fulldebug)               #conn.doLogin()                                                         # Attempt a login, returns true/false, variable conn.conn.get_vehicles()                                                     # Attempts to fetch all vehicles associated to account.conn.update_all()                                                       # Calls update for all vehicle objects.conn.logout()                                                           # Logout from API, call for revoke of tokens.conn.terminate()                                                        # Terminate session, calls logout().conn.get&lt;method&gt;                                                        # The get methods calls on API endpoints and returns data. See example.conn.set&lt;method&gt;                                                        # The set methods calls on API endpoints to set config for vehicle.```Refrain from using methods starting with _, they are intended for internal use only.## Further help or contributionsFor questions, further help or contributions you can join the (Skoda Connect) Discord server at https://discord.gg/826X9jEtCh</longdescription>
</pkgmetadata>