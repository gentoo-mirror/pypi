<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Maccarone: AI-managed code blocks in Python ⏪⏩===============================================[![PyPI version](https://badge.fury.io/py/maccarone.svg)](https://badge.fury.io/py/maccarone)Maccarone lets you _delegate_ sections of your Python program to AI ownership. You might write some code like this:```pythondef main(path: str):    #&lt;&lt;filenames = a list of filenames under path&gt;&gt;    for fn in filenames:        #&lt;&lt;size = size of fn in bytes&gt;&gt;        print(fn, size)#&lt;&lt;use argparse and call main&gt;&gt;```Maccarone then fills in the sections you've delegated:```pythondef main(path: str):    #&lt;&lt;filenames = list of filenames under path; no dirs&gt;&gt;    import os    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]    #&lt;&lt;/&gt;&gt;    for fn in filenames:        #&lt;&lt;size = size of fn in bytes&gt;&gt;        size = os.path.getsize(os.path.join(path, fn))        #&lt;&lt;/&gt;&gt;        print(fn, size)#&lt;&lt;use argparse and call main&gt;&gt;import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;path&quot;, type=str)args = parser.parse_args()main(args.path)#&lt;&lt;/&gt;&gt;```Make a change in your code, like adding an `extension` parameter to `main`, and Maccarone keeps its sections up to date:```pythondef main(path: str, extension: str | None = None):    #&lt;&lt;filenames = list of filenames under path; no dirs&gt;&gt;    …    if extension:        filenames = [f for f in filenames if f.endswith(extension)]    #&lt;&lt;/&gt;&gt;    …#&lt;&lt;use argparse and call main&gt;&gt;…parser.add_argument(&quot;--extension&quot;, type=str, default=None)args = parser.parse_args()main(args.path, args.extension)#&lt;&lt;/&gt;&gt;```Quickstart----------### Prerequisites- Python 3.8+- OpenAI API key with GPT-4 (`export OPENAI_API_KEY`)### Easy Mode - VS Code ExtensionEasy mode is the free extension from [the VS Code marketplace](https://marketplace.visualstudio.com/items?itemName=maccarone.maccarone).Install it in VS Code and you're done (if you have the prerequisites above).### Other Option - Command LineIf you don't use VS Code, you can still install Maccarone directly from PyPI:- `pip install maccarone`Then run `maccarone` to generate code and update your source file:```console$ maccarone --rewrite examples/file_sizes.py```Usage notes-----------### Running `maccarone` on a directoryMaccarone can rewrite all files in a directory:```console$ maccarone --rewrite --suffix .py examples/```Be careful! You should probably run this only on files in source control, for example.Related work------------- https://github.com/bsilverthorn/vernacFAQs----### It needs my OpenAI API key?Maccarone prompts GPT-4 to write code. It will make OpenAI API calls using your key and you **will be charged** by OpenAI.API calls are made every time Maccarone preprocesses a new version of a source file.The number of tokens consumed is proportional to the size of your completed code. You cannot accurately predict that number in advance. A small source module might cost $0.01–0.10 to preprocess.### What prevents my program from behaving differently after each preprocessing run?The strength of your faith in GPT-4.### What about non-English languages?They are likely to work, but less likely than English.### What does &quot;maccarone&quot; mean?https://en.wikipedia.org/wiki/Macaronic_language</longdescription>
</pkgmetadata>