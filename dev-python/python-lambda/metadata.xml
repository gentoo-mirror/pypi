<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;p&gt;  &lt;img src=&quot;https://assets.nickficano.com/gh-pythonlambda.svg&quot; width=&quot;221&quot; height=&quot;227&quot; alt=&quot;python-lambda logo&quot; /&gt;  &lt;/p&gt;  &lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://img.shields.io/pypi/v/python-lambda.svg&quot; alt=&quot;pypi&quot; /&gt;    &lt;a href=&quot;https://pypi.org/project/python-lambda/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/dm/python-lambda.svg&quot; alt=&quot;pypi&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/python-lambda/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/python-lambda.svg&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;Python-lambda is a toolset for developing and deploying *serverless* Python code in AWS Lambda.# A call for contributorsWith python-lambda and pytube both continuing to gain momentum, I'm calling forcontributors to help build out new features, review pull requests, fix bugs,and maintain overall code quality. If you're interested, please email me atnficano[at]gmail.com.# DescriptionAWS Lambda is a service that allows you to write Python, Java, or Node.js codethat gets executed in response to events like http requests or files uploadedto S3.Working with Lambda is relatively easy, but the process of bundling anddeploying your code is not as simple as it could be.The *Python-Lambda* library takes away the guess work of developing yourPython-Lambda services by providing you a toolset to streamline the annoyingparts.# Requirements* Python 2.7, &gt;= 3.6 (At the time of writing this, these are the Python runtimes supported by AWS Lambda).* Pip (\~8.1.1)* Virtualenv (\~15.0.0)* Virtualenvwrapper (\~4.7.1)# Getting StartedFirst, you must create an IAM Role on your AWS account called``lambda_basic_execution`` with the ``LambdaBasicExecution`` policy attached.On your computer, create a new virtualenv and project folder.```bash$ mkvirtualenv pylambda(pylambda) $ mkdir pylambda```Next, download *Python-Lambda* using pip via pypi.```bash(pylambda) $ pip install python-lambda```From your ``pylambda`` directory, run the following to bootstrap your project.```bash(pylambda) $ lambda init```This will create the following files: ``event.json``, ``__init__.py``,``service.py``, and ``config.yaml``.Let's begin by opening ``config.yaml`` in the text editor of your choice. Forthe purpose of this tutorial, the only required information is``aws_access_key_id`` and ``aws_secret_access_key``. You can find these bylogging into the AWS management console.Next let's open ``service.py``, in here you'll find the following function:```pythondef handler(event, context):    # Your code goes here!    e = event.get('e')    pi = event.get('pi')    return e + pi```This is the handler function; this is the function AWS Lambda will invoke inresponse to an event. You will notice that in the sample code ``e`` and ``pi``are values in a ``dict``. AWS Lambda uses the ``event`` parameter to pass inevent data to the handler.So if, for example, your function is responding to an http request, ``event``will be the ``POST`` JSON data and if your function returns something, thecontents will be in your http response payload.Next let's open the ``event.json`` file:```json{  &quot;pi&quot;: 3.14,  &quot;e&quot;: 2.718}```Here you'll find the values of ``e`` and ``pi`` that are being referenced inthe sample code.If you now try and run:```bash(pylambda) $ lambda invoke -v```You will get:```bash# 5.858# execution time: 0.00000310s# function execution timeout: 15s```As you probably put together, the ``lambda invoke`` command grabs the valuesstored in the ``event.json`` file and passes them to your function.The ``event.json`` file should help you develop your Lambda service locally.You can specify an alternate ``event.json`` file by passing the``--event-file=&lt;filename&gt;.json`` argument to ``lambda invoke``.When you're ready to deploy your code to Lambda simply run:```bash(pylambda) $ lambda deploy```The deploy script will evaluate your virtualenv and identify your projectdependencies. It will package these up along with your handler function to azip file that it then uploads to AWS Lambda.You can now log into the[AWS Lambda management console](https://console.aws.amazon.com/lambda/) toverify the code deployed successfully.### Wiring to an API endpointIf you're looking to develop a simple microservice you can easily wire yourfunction up to an http endpoint.Begin by navigating to your [AWS Lambda management console](https://console.aws.amazon.com/lambda/) andclicking on your function. Click the API Endpoints tab and click &quot;Add API endpoint&quot;.Under API endpoint type select &quot;API Gateway&quot;.Next change Method to ``POST`` and Security to &quot;Open&quot; and click submit (NOTE:you should secure this for use in production, open security is used for demopurposes).At last you need to change the return value of the function to comply with thestandard defined for the API Gateway endpoint, the function should now looklike this:```def handler(event, context):    # Your code goes here!    e = event.get('e')    pi = event.get('pi')    return {        &quot;statusCode&quot;: 200,        &quot;headers&quot;: { &quot;Content-Type&quot;: &quot;application/json&quot;},        &quot;body&quot;: e + pi    }```Now try and run:```bash$ curl --header &quot;Content-Type:application/json&quot; \       --request POST \       --data '{&quot;pi&quot;: 3.14, &quot;e&quot;: 2.718}' \       https://&lt;API endpoint URL&gt;# 5.8580000000000005```### Environment VariablesLambda functions support environment variables. In order to set environmentvariables for your deployed code to use, you can configure them in``config.yaml``.  To load the value for the environment variable at the time ofdeployment (instead of hard coding them in your configuration file), you canuse local environment values (see 'env3' in example code below).```yamlenvironment_variables:  env1: foo  env2: baz  env3: ${LOCAL_ENVIRONMENT_VARIABLE_NAME}```This would create environment variables in the lambda instance upon deploy. Ifyour functions don't need environment variables, simply leave this section outof your config.### Uploading to S3You may find that you do not need the toolkit to fullydeploy your Lambda or that your code bundle is too large to upload via the API.You can use the ``upload`` command to send the bundle to an S3 bucket of yourchoosing.  Before doing this, you will need to set the following variables in``config.yaml``:```yamlrole: basic_s3_uploadbucket_name: 'example-bucket's3_key_prefix: 'path/to/file/'```Your role must have ``s3:PutObject`` permission on the bucket/key that youspecify for the upload to work properly. Once you have that set, you canexecute ``lambda upload`` to initiate the transfer.### Deploying via S3You can also choose to use S3 as your source for Lambda deployments.  This canbe done by issuing ``lambda deploy-s3`` with the same variables/AWS permissionsyou'd set for executing the ``upload`` command.## DevelopmentDevelopment of &quot;python-lambda&quot; is facilitated exclusively on GitHub.Contributions in the form of patches, tests and feature creation and/orrequests are very welcome and highly encouraged. Please open an issue if thistool does not function as you'd expect.### Environment Setup1. [Install pipenv](https://github.com/pypa/pipenv)2. [Install direnv](https://direnv.net/)3. [Install Precommit](https://pre-commit.com/#install) (optional but preferred)4. ``cd`` into the project and enter &quot;direnv allow&quot; when prompted. This will begin   installing all the development dependancies.5. If you installed pre-commit, run ``pre-commit install`` inside the project   directory to setup the githooks.### Releasing to PypiOnce you pushed your chances to master, run **one** of the following: ```sh # If you're installing a major release: make deploy-major # If you're installing a minor release: make deploy-minor# If you're installing a patch release:make deploy-patch ```</longdescription>
</pkgmetadata>