<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PostgreSQL Elastic Search foreign data wrapper==============================================This allows you to index data in Elastic Search and then search it fromPostgreSQL. You can write as well as read.SYNOPSIS--------### Supported Versions| Elastic Search | Dependency Installation Command ||----------------|---------------------------------|| 5 | `sudo pip install &quot;elasticsearch&gt;=5,&lt;6&quot;` || 6 | `sudo pip install &quot;elasticsearch&gt;=6,&lt;7&quot;` || 7 | `sudo pip install &quot;elasticsearch&gt;=7,&lt;8&quot;` || PostgreSQL | Dependency Installation Command                        ||------------|--------------------------------------------------------|| 9.4        | `sudo apt-get install postgresql-9.4-python-multicorn` || 9.5        | `sudo apt-get install postgresql-9.5-python-multicorn` || 9.6        | `sudo apt-get install postgresql-9.6-python-multicorn` || 10         | `sudo apt-get install postgresql-10-python-multicorn`  || 11         | `sudo apt-get install postgresql-11-python-multicorn`  || 12         | `sudo apt-get install postgresql-12-python3-multicorn` || 13         | `sudo apt-get install postgresql-13-python3-multicorn` |Please note that the Debian package for Multicorn on PostgreSQL 12+ requires Python 3.#### PostgreSQL 13+For PostgreSQL versions 13+ you can use [Multicorn 2](https://github.com/pgsql-io/multicorn2)which is actively maintained. You can consult the [Multicorn 2 README](https://github.com/pgsql-io/multicorn2#using-in-oscgio)for installation instructions, or review the Dockerfiles associated with thisproject to see how I have installed it. I would recommend using the OSCG.IOapproach as it seems to be the easiest.| PostgreSQL | Dockerfile                                                                                                            ||------------|-----------------------------------------------------------------------------------------------------------------------|| 13         | [Dockerfile](https://github.com/matthewfranglen/postgres-elasticsearch-fdw/blob/master/tests/docker/pg-13/Dockerfile) || 14         | [Dockerfile](https://github.com/matthewfranglen/postgres-elasticsearch-fdw/blob/master/tests/docker/pg-14/Dockerfile) || 15         | [Dockerfile](https://github.com/matthewfranglen/postgres-elasticsearch-fdw/blob/master/tests/docker/pg-15/Dockerfile) |### InstallationThis requires installation on the PostgreSQL server, and has system level dependencies.You can install the dependencies with:```sudo apt-get install python python-pip```You should install the version of multicorn that is specific to your postgresversion. See the table in _Supported Versions_ for installation commands. Themulticorn package is also only available from Ubuntu Xenial (16.04) onwards. Ifyou cannot install multicorn in this way then you can use[pgxn](http://pgxnclient.projects.pgfoundry.org/) to install it.This uses the Elastic Search client which has release versions that correspondto the major version of the Elastic Search server. You should install the`elasticsearch` dependency separately. See the table in _Supported Versions_for installation commands.Once the dependencies are installed you can install the foreign data wrapperusing pip:```sudo pip install pg_es_fdw```### UsageA running configuration for this can be found in the `docker-compose.yml`within this folder.The basic steps are: * Load the extension * Create the server * Create the foreign table * Populate the foreign table * Query the foreign table...#### Load extension and Create server```sqlCREATE EXTENSION multicorn;CREATE SERVER multicorn_es FOREIGN DATA WRAPPER multicornOPTIONS (  wrapper 'pg_es_fdw.ElasticsearchFDW');```#### Create the foreign table```sqlCREATE FOREIGN TABLE articles_es    (        id BIGINT,        title TEXT,        body TEXT,        metadata JSON,        query TEXT,        score NUMERIC,        sort TEXT    )SERVER multicorn_esOPTIONS    (        host 'elasticsearch',        port '9200',        index 'article-index',        type 'article',        rowid_column 'id',        query_column 'query',        query_dsl 'false',        score_column 'score',        default_sort 'last_updated:desc',        sort_column 'sort',        refresh 'false',        complete_returning 'false',        timeout '20',        username 'elastic',        password 'changeme'    );```Elastic Search 7 and greater does not require the `type` option, whichcorresponds to the `doc_type` used in prior versions of Elastic Search.This corresponds to an Elastic Search index which contains a `title` and `body`fields. The other fields have special meaning: * The `rowid_column` (`id` above) is mapped to the Elastic Search document id * The `query_column` (`query` above) accepts Elastic Search queries to filter the rows * The `query_dsl` (`false` above) indicates if the query is in the [URI Search](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html) syntax or the json [Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html). The query will use the URI Search syntax by default. To use the Query DSL set this option to `&quot;true&quot;`. * The `score_column` (`score` above) returns the score for the document against the query * The `sort_column` (`sort` above) accepts an Elastic Search column to sort by * The `refresh` option controls if inserts and updates should wait for an index refresh ([Elastic Search documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-refresh.html)). The acceptable values are `&quot;false&quot;` (default), `&quot;wait_for&quot;` and `&quot;true&quot;` * The `complete_returning` options controls if Elastic Search is queries for the document after an insert to support `RETURNING` fields other than the document id. The acceptable values are `&quot;false&quot;` (default) and `&quot;true&quot;` * The `timeout` field specifies the connection timeout in seconds * The `username` field specifies the basic auth username used * The `password` field specifies the basic auth password used * Any other options are passed through to the elasticsearch client, use this to specify things like sslAll of these are optional.Enabling `refresh` or `complete_returning` comes with a performance penalty.To use basic auth you must provide both a username and a password,even if the password is blank.##### JSON and JSONBWhen elasticsearch returns nested data it is serialized to TEXT as json before being returned.This means you can create columns with JSON or JSONB types and the data will be correctly converted on read.If you write to a JSON or JSONB column then the data is passed to elasticsearch as json.As the data is converted on the fly per query the benefits of using JSONB over JSON are limited.##### Elastic Search AuthenticationCurrently basic auth is supported for authentication.You can provide the username and password by setting the `username` and `password` options when creating the table.You must provide both, even if the password is blank.If you do not provide them then basic auth is disabled for the table.If you need to use other forms of authentication then please open an issue.#### Populate the foreign table```sqlINSERT INTO articles_es    (        id,        title,        body,        metadata    )VALUES    (        1,        'foo',        'spike',        '{&quot;score&quot;: 3}'::json    );```It is possible to write documents to Elastic Search using the foreign datawrapper. This feature was introduced in PostgreSQL 9.3.#### Query the foreign tableTo select all documents:```sqlSELECT    id,    title,    body,    metadataFROM    articles_es;```##### URI Search QueryTo filter the documents using a URI Search query:```sqlSELECT    id,    title,    body,    metadata,    scoreFROM    articles_esWHERE    query = 'body:chess';```This uses the [URI Search](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html) from Elastic Search.This is the default search syntax, and can be explicitly selected by setting the `query_dsl` option to `&quot;false&quot;`.##### Query DSL QueryTo filter the documents using a Query DSL query you must ensure that you have set the `query_dsl` option to `&quot;true&quot;` when creating the table.```sqlSELECT    id,    title,    body,    metadata,    scoreFROM    articles_esWHERE    query = '{&quot;query&quot;:{&quot;bool&quot;:{&quot;filter&quot;:[{&quot;term&quot;:{&quot;body&quot;:&quot;chess&quot;}}]}}}';```This uses the [Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html) from Elastic Search.This is not the default search syntax and must be specifically enabled.You cannot enable this on a per-query basis.#### Sorting the ResultsBy default Elastic Search returns the documents in score order, descending.If you wish to sort by a different field you can use the `sort_column` option.The `sort_column` accepts a column to sort by and a direction, for example `last_updated:desc`.This is passed to Elastic Search so it should be the name of the Elastic Search column.If you always want sorted results then you can use the `default_sort` option to specify the sort when creating the table.To break ties you can specify further columns to sort on.You just need to separate the columns with a comma, for example `unit:asc,last_updated:desc`.```SELECT    id,    title,    body,    metadata,    scoreFROM    articles_esWHERE    sort = 'id:asc';```#### Refresh and RETURNINGWhen inserting or updating documents in Elastic Search the document ID is returned.This can be accessed through the `RETURNING` statement without any additional performance loss.To get further fields requires reading the document from Elastic Search again.This comes at a cost because an immediate read after an insert may not return the updated document.Elastic Search periodically refreshes the indexes and at that point the document will be available.To wait for a refresh before returning you can use the `refresh` parameter.This accepts three values: `&quot;false&quot;` (the default), `&quot;true&quot;` and `&quot;wait_for&quot;`.You can read about them [here](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-refresh.html).If you choose to use the refresh setting then it is recommended to use `&quot;wait_for&quot;`.Once you have chosen to wait for the refresh you can enable full returning support by setting `complete_returning` to `&quot;true&quot;`.Both the `refresh` and `complete_returning` options are set during table creation.If you do not wish to incur the associated costs for every query then you can create two tables with different settings.Caveats-------Elastic Search does not support transactions, so the elasticsearch indexis not guaranteed to be synchronized with the canonical version in PostgreSQL.Unfortunately this is the case even for serializable isolation level transactions.It would however be possible to check against Elastic Search version field and locking.Rollback is currently not supported.Tests-----There are end to end tests that use docker to create a PostgreSQL and ElasticSearch database. These are then populated with data and tests are run againstthem.These require docker and docker-compose. These also require python packageswhich you can install with:```bashpip install -r tests/requirements.txt```The makefile will test all versions if you run `make test`:```bash➜ make testpoetry run tests/run.py --pg 9.4 9.5 9.6 10 11 12 13 --es 5 6 6-auth 7Testing PostgreSQL 9.4 with Elasticsearch 5PostgreSQL 9.4 with Elasticsearch 5: Test read - PASSPostgreSQL 9.4 with Elasticsearch 5: Test nested-read - PASSPostgreSQL 9.4 with Elasticsearch 5: Test sorted-read - PASSPostgreSQL 9.4 with Elasticsearch 5: Test query - PASSPostgreSQL 9.4 with Elasticsearch 5: Test json-query - PASSPostgreSQL 9.4 with Elasticsearch 5: Test insert returning id - PASSPostgreSQL 9.4 with Elasticsearch 5: Test insert returning row - PASSPostgreSQL 9.4 with Elasticsearch 5: Test insert waiting for refresh - PASSPostgreSQL 9.4 with Elasticsearch 5: Test delete returning row - PASSTesting PostgreSQL 9.4 with Elasticsearch 6PostgreSQL 9.4 with Elasticsearch 6: Test read - PASSPostgreSQL 9.4 with Elasticsearch 6: Test nested-read - PASSPostgreSQL 9.4 with Elasticsearch 6: Test sorted-read - PASSPostgreSQL 9.4 with Elasticsearch 6: Test query - PASSPostgreSQL 9.4 with Elasticsearch 6: Test json-query - PASSPostgreSQL 9.4 with Elasticsearch 6: Test insert returning id - PASSPostgreSQL 9.4 with Elasticsearch 6: Test insert returning row - PASSPostgreSQL 9.4 with Elasticsearch 6: Test insert waiting for refresh - PASSPostgreSQL 9.4 with Elasticsearch 6: Test delete returning row - PASSTesting PostgreSQL 9.4 with Elasticsearch 6-authPostgreSQL 9.4 with Elasticsearch 6-auth: Test read - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test nested-read - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test sorted-read - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test query - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test json-query - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test insert returning id - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test insert returning row - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test insert waiting for refresh - PASSPostgreSQL 9.4 with Elasticsearch 6-auth: Test delete returning row - PASSTesting PostgreSQL 9.4 with Elasticsearch 7PostgreSQL 9.4 with Elasticsearch 7: Test read - PASSPostgreSQL 9.4 with Elasticsearch 7: Test nested-read - PASSPostgreSQL 9.4 with Elasticsearch 7: Test sorted-read - PASSPostgreSQL 9.4 with Elasticsearch 7: Test query - PASSPostgreSQL 9.4 with Elasticsearch 7: Test json-query - PASSPostgreSQL 9.4 with Elasticsearch 7: Test insert returning id - PASSPostgreSQL 9.4 with Elasticsearch 7: Test insert returning row - PASSPostgreSQL 9.4 with Elasticsearch 7: Test insert waiting for refresh - PASSPostgreSQL 9.4 with Elasticsearch 7: Test delete returning row - PASSTesting PostgreSQL 9.5 with Elasticsearch 5PostgreSQL 9.5 with Elasticsearch 5: Test read - PASSPostgreSQL 9.5 with Elasticsearch 5: Test nested-read - PASSPostgreSQL 9.5 with Elasticsearch 5: Test sorted-read - PASSPostgreSQL 9.5 with Elasticsearch 5: Test query - PASSPostgreSQL 9.5 with Elasticsearch 5: Test json-query - PASSPostgreSQL 9.5 with Elasticsearch 5: Test insert returning id - PASSPostgreSQL 9.5 with Elasticsearch 5: Test insert returning row - PASSPostgreSQL 9.5 with Elasticsearch 5: Test insert waiting for refresh - PASSPostgreSQL 9.5 with Elasticsearch 5: Test delete returning row - PASSTesting PostgreSQL 9.5 with Elasticsearch 6PostgreSQL 9.5 with Elasticsearch 6: Test read - PASSPostgreSQL 9.5 with Elasticsearch 6: Test nested-read - PASSPostgreSQL 9.5 with Elasticsearch 6: Test sorted-read - PASSPostgreSQL 9.5 with Elasticsearch 6: Test query - PASSPostgreSQL 9.5 with Elasticsearch 6: Test json-query - PASSPostgreSQL 9.5 with Elasticsearch 6: Test insert returning id - PASSPostgreSQL 9.5 with Elasticsearch 6: Test insert returning row - PASSPostgreSQL 9.5 with Elasticsearch 6: Test insert waiting for refresh - PASSPostgreSQL 9.5 with Elasticsearch 6: Test delete returning row - PASSTesting PostgreSQL 9.5 with Elasticsearch 6-authPostgreSQL 9.5 with Elasticsearch 6-auth: Test read - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test nested-read - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test sorted-read - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test query - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test json-query - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test insert returning id - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test insert returning row - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test insert waiting for refresh - PASSPostgreSQL 9.5 with Elasticsearch 6-auth: Test delete returning row - PASSTesting PostgreSQL 9.5 with Elasticsearch 7PostgreSQL 9.5 with Elasticsearch 7: Test read - PASSPostgreSQL 9.5 with Elasticsearch 7: Test nested-read - PASSPostgreSQL 9.5 with Elasticsearch 7: Test sorted-read - PASSPostgreSQL 9.5 with Elasticsearch 7: Test query - PASSPostgreSQL 9.5 with Elasticsearch 7: Test json-query - PASSPostgreSQL 9.5 with Elasticsearch 7: Test insert returning id - PASSPostgreSQL 9.5 with Elasticsearch 7: Test insert returning row - PASSPostgreSQL 9.5 with Elasticsearch 7: Test insert waiting for refresh - PASSPostgreSQL 9.5 with Elasticsearch 7: Test delete returning row - PASSTesting PostgreSQL 9.6 with Elasticsearch 5PostgreSQL 9.6 with Elasticsearch 5: Test read - PASSPostgreSQL 9.6 with Elasticsearch 5: Test nested-read - PASSPostgreSQL 9.6 with Elasticsearch 5: Test sorted-read - PASSPostgreSQL 9.6 with Elasticsearch 5: Test query - PASSPostgreSQL 9.6 with Elasticsearch 5: Test json-query - PASSPostgreSQL 9.6 with Elasticsearch 5: Test insert returning id - PASSPostgreSQL 9.6 with Elasticsearch 5: Test insert returning row - PASSPostgreSQL 9.6 with Elasticsearch 5: Test insert waiting for refresh - PASSPostgreSQL 9.6 with Elasticsearch 5: Test delete returning row - PASSTesting PostgreSQL 9.6 with Elasticsearch 6PostgreSQL 9.6 with Elasticsearch 6: Test read - PASSPostgreSQL 9.6 with Elasticsearch 6: Test nested-read - PASSPostgreSQL 9.6 with Elasticsearch 6: Test sorted-read - PASSPostgreSQL 9.6 with Elasticsearch 6: Test query - PASSPostgreSQL 9.6 with Elasticsearch 6: Test json-query - PASSPostgreSQL 9.6 with Elasticsearch 6: Test insert returning id - PASSPostgreSQL 9.6 with Elasticsearch 6: Test insert returning row - PASSPostgreSQL 9.6 with Elasticsearch 6: Test insert waiting for refresh - PASSPostgreSQL 9.6 with Elasticsearch 6: Test delete returning row - PASSTesting PostgreSQL 9.6 with Elasticsearch 6-authPostgreSQL 9.6 with Elasticsearch 6-auth: Test read - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test nested-read - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test sorted-read - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test query - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test json-query - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test insert returning id - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test insert returning row - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test insert waiting for refresh - PASSPostgreSQL 9.6 with Elasticsearch 6-auth: Test delete returning row - PASSTesting PostgreSQL 9.6 with Elasticsearch 7PostgreSQL 9.6 with Elasticsearch 7: Test read - PASSPostgreSQL 9.6 with Elasticsearch 7: Test nested-read - PASSPostgreSQL 9.6 with Elasticsearch 7: Test sorted-read - PASSPostgreSQL 9.6 with Elasticsearch 7: Test query - PASSPostgreSQL 9.6 with Elasticsearch 7: Test json-query - PASSPostgreSQL 9.6 with Elasticsearch 7: Test insert returning id - PASSPostgreSQL 9.6 with Elasticsearch 7: Test insert returning row - PASSPostgreSQL 9.6 with Elasticsearch 7: Test insert waiting for refresh - PASSPostgreSQL 9.6 with Elasticsearch 7: Test delete returning row - PASSTesting PostgreSQL 10 with Elasticsearch 5PostgreSQL 10 with Elasticsearch 5: Test read - PASSPostgreSQL 10 with Elasticsearch 5: Test nested-read - PASSPostgreSQL 10 with Elasticsearch 5: Test sorted-read - PASSPostgreSQL 10 with Elasticsearch 5: Test query - PASSPostgreSQL 10 with Elasticsearch 5: Test json-query - PASSPostgreSQL 10 with Elasticsearch 5: Test insert returning id - PASSPostgreSQL 10 with Elasticsearch 5: Test insert returning row - PASSPostgreSQL 10 with Elasticsearch 5: Test insert waiting for refresh - PASSPostgreSQL 10 with Elasticsearch 5: Test delete returning row - PASSTesting PostgreSQL 10 with Elasticsearch 6PostgreSQL 10 with Elasticsearch 6: Test read - PASSPostgreSQL 10 with Elasticsearch 6: Test nested-read - PASSPostgreSQL 10 with Elasticsearch 6: Test sorted-read - PASSPostgreSQL 10 with Elasticsearch 6: Test query - PASSPostgreSQL 10 with Elasticsearch 6: Test json-query - PASSPostgreSQL 10 with Elasticsearch 6: Test insert returning id - PASSPostgreSQL 10 with Elasticsearch 6: Test insert returning row - PASSPostgreSQL 10 with Elasticsearch 6: Test insert waiting for refresh - PASSPostgreSQL 10 with Elasticsearch 6: Test delete returning row - PASSTesting PostgreSQL 10 with Elasticsearch 6-authPostgreSQL 10 with Elasticsearch 6-auth: Test read - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test nested-read - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test sorted-read - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test query - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test json-query - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test insert returning id - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test insert returning row - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test insert waiting for refresh - PASSPostgreSQL 10 with Elasticsearch 6-auth: Test delete returning row - PASSTesting PostgreSQL 10 with Elasticsearch 7PostgreSQL 10 with Elasticsearch 7: Test read - PASSPostgreSQL 10 with Elasticsearch 7: Test nested-read - PASSPostgreSQL 10 with Elasticsearch 7: Test sorted-read - PASSPostgreSQL 10 with Elasticsearch 7: Test query - PASSPostgreSQL 10 with Elasticsearch 7: Test json-query - PASSPostgreSQL 10 with Elasticsearch 7: Test insert returning id - PASSPostgreSQL 10 with Elasticsearch 7: Test insert returning row - PASSPostgreSQL 10 with Elasticsearch 7: Test insert waiting for refresh - PASSPostgreSQL 10 with Elasticsearch 7: Test delete returning row - PASSTesting PostgreSQL 11 with Elasticsearch 5PostgreSQL 11 with Elasticsearch 5: Test read - PASSPostgreSQL 11 with Elasticsearch 5: Test nested-read - PASSPostgreSQL 11 with Elasticsearch 5: Test sorted-read - PASSPostgreSQL 11 with Elasticsearch 5: Test query - PASSPostgreSQL 11 with Elasticsearch 5: Test json-query - PASSPostgreSQL 11 with Elasticsearch 5: Test insert returning id - PASSPostgreSQL 11 with Elasticsearch 5: Test insert returning row - PASSPostgreSQL 11 with Elasticsearch 5: Test insert waiting for refresh - PASSPostgreSQL 11 with Elasticsearch 5: Test delete returning row - PASSTesting PostgreSQL 11 with Elasticsearch 6PostgreSQL 11 with Elasticsearch 6: Test read - PASSPostgreSQL 11 with Elasticsearch 6: Test nested-read - PASSPostgreSQL 11 with Elasticsearch 6: Test sorted-read - PASSPostgreSQL 11 with Elasticsearch 6: Test query - PASSPostgreSQL 11 with Elasticsearch 6: Test json-query - PASSPostgreSQL 11 with Elasticsearch 6: Test insert returning id - PASSPostgreSQL 11 with Elasticsearch 6: Test insert returning row - PASSPostgreSQL 11 with Elasticsearch 6: Test insert waiting for refresh - PASSPostgreSQL 11 with Elasticsearch 6: Test delete returning row - PASSTesting PostgreSQL 11 with Elasticsearch 6-authPostgreSQL 11 with Elasticsearch 6-auth: Test read - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test nested-read - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test sorted-read - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test query - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test json-query - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test insert returning id - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test insert returning row - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test insert waiting for refresh - PASSPostgreSQL 11 with Elasticsearch 6-auth: Test delete returning row - PASSTesting PostgreSQL 11 with Elasticsearch 7PostgreSQL 11 with Elasticsearch 7: Test read - PASSPostgreSQL 11 with Elasticsearch 7: Test nested-read - PASSPostgreSQL 11 with Elasticsearch 7: Test sorted-read - PASSPostgreSQL 11 with Elasticsearch 7: Test query - PASSPostgreSQL 11 with Elasticsearch 7: Test json-query - PASSPostgreSQL 11 with Elasticsearch 7: Test insert returning id - PASSPostgreSQL 11 with Elasticsearch 7: Test insert returning row - PASSPostgreSQL 11 with Elasticsearch 7: Test insert waiting for refresh - PASSPostgreSQL 11 with Elasticsearch 7: Test delete returning row - PASSTesting PostgreSQL 12 with Elasticsearch 5PostgreSQL 12 with Elasticsearch 5: Test read - PASSPostgreSQL 12 with Elasticsearch 5: Test nested-read - PASSPostgreSQL 12 with Elasticsearch 5: Test sorted-read - PASSPostgreSQL 12 with Elasticsearch 5: Test query - PASSPostgreSQL 12 with Elasticsearch 5: Test json-query - PASSPostgreSQL 12 with Elasticsearch 5: Test insert returning id - PASSPostgreSQL 12 with Elasticsearch 5: Test insert returning row - PASSPostgreSQL 12 with Elasticsearch 5: Test insert waiting for refresh - PASSPostgreSQL 12 with Elasticsearch 5: Test delete returning row - PASSTesting PostgreSQL 12 with Elasticsearch 6PostgreSQL 12 with Elasticsearch 6: Test read - PASSPostgreSQL 12 with Elasticsearch 6: Test nested-read - PASSPostgreSQL 12 with Elasticsearch 6: Test sorted-read - PASSPostgreSQL 12 with Elasticsearch 6: Test query - PASSPostgreSQL 12 with Elasticsearch 6: Test json-query - PASSPostgreSQL 12 with Elasticsearch 6: Test insert returning id - PASSPostgreSQL 12 with Elasticsearch 6: Test insert returning row - PASSPostgreSQL 12 with Elasticsearch 6: Test insert waiting for refresh - PASSPostgreSQL 12 with Elasticsearch 6: Test delete returning row - PASSTesting PostgreSQL 12 with Elasticsearch 6-authPostgreSQL 12 with Elasticsearch 6-auth: Test read - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test nested-read - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test sorted-read - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test query - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test json-query - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test insert returning id - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test insert returning row - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test insert waiting for refresh - PASSPostgreSQL 12 with Elasticsearch 6-auth: Test delete returning row - PASSTesting PostgreSQL 12 with Elasticsearch 7PostgreSQL 12 with Elasticsearch 7: Test read - PASSPostgreSQL 12 with Elasticsearch 7: Test nested-read - PASSPostgreSQL 12 with Elasticsearch 7: Test sorted-read - PASSPostgreSQL 12 with Elasticsearch 7: Test query - PASSPostgreSQL 12 with Elasticsearch 7: Test json-query - PASSPostgreSQL 12 with Elasticsearch 7: Test insert returning id - PASSPostgreSQL 12 with Elasticsearch 7: Test insert returning row - PASSPostgreSQL 12 with Elasticsearch 7: Test insert waiting for refresh - PASSPostgreSQL 12 with Elasticsearch 7: Test delete returning row - PASSTesting PostgreSQL 13 with Elasticsearch 5PostgreSQL 13 with Elasticsearch 5: Test read - PASSPostgreSQL 13 with Elasticsearch 5: Test nested-read - PASSPostgreSQL 13 with Elasticsearch 5: Test sorted-read - PASSPostgreSQL 13 with Elasticsearch 5: Test query - PASSPostgreSQL 13 with Elasticsearch 5: Test json-query - PASSPostgreSQL 13 with Elasticsearch 5: Test insert returning id - PASSPostgreSQL 13 with Elasticsearch 5: Test insert returning row - PASSPostgreSQL 13 with Elasticsearch 5: Test insert waiting for refresh - PASSPostgreSQL 13 with Elasticsearch 5: Test delete returning row - PASSTesting PostgreSQL 13 with Elasticsearch 6PostgreSQL 13 with Elasticsearch 6: Test read - PASSPostgreSQL 13 with Elasticsearch 6: Test nested-read - PASSPostgreSQL 13 with Elasticsearch 6: Test sorted-read - PASSPostgreSQL 13 with Elasticsearch 6: Test query - PASSPostgreSQL 13 with Elasticsearch 6: Test json-query - PASSPostgreSQL 13 with Elasticsearch 6: Test insert returning id - PASSPostgreSQL 13 with Elasticsearch 6: Test insert returning row - PASSPostgreSQL 13 with Elasticsearch 6: Test insert waiting for refresh - PASSPostgreSQL 13 with Elasticsearch 6: Test delete returning row - PASSTesting PostgreSQL 13 with Elasticsearch 6-authPostgreSQL 13 with Elasticsearch 6-auth: Test read - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test nested-read - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test sorted-read - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test query - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test json-query - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test insert returning id - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test insert returning row - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test insert waiting for refresh - PASSPostgreSQL 13 with Elasticsearch 6-auth: Test delete returning row - PASSTesting PostgreSQL 13 with Elasticsearch 7PostgreSQL 13 with Elasticsearch 7: Test read - PASSPostgreSQL 13 with Elasticsearch 7: Test nested-read - PASSPostgreSQL 13 with Elasticsearch 7: Test sorted-read - PASSPostgreSQL 13 with Elasticsearch 7: Test query - PASSPostgreSQL 13 with Elasticsearch 7: Test json-query - PASSPostgreSQL 13 with Elasticsearch 7: Test insert returning id - PASSPostgreSQL 13 with Elasticsearch 7: Test insert returning row - PASSPostgreSQL 13 with Elasticsearch 7: Test insert waiting for refresh - PASSPostgreSQL 13 with Elasticsearch 7: Test delete returning row - PASSPASS```If you want to run the tests for specific versions then you can then run thetests using `tests/run.py`.  This takes the PostgreSQL version(s) to test usingthe `--pg` argument and the Elastic Search versions to test with the `--es`argument.  The currently supported versions of PostgreSQL are 9.4 through to 13.The currently supported versions of Elastic Search are 5 to 7. You can passmultiple versions to test it against all of them.### Test Failure Messages```Error starting userland proxy: listen tcp 0.0.0.0:5432: bind: address already in use```You are already running something that listens to 5432.Try stopping your running postgres server:```sudo /etc/init.d/postgresql stop``````max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]```Your system does not have the appropriate limits in place to run a production ready instance of elasticsearch.Try increasing it:```sudo sysctl -w vm.max_map_count=262144```This setting will revert after a reboot.### Migrating from &lt;=0.6.0In version 0.7.0 the TEXT representation of json objects changed from HSTORE to JSON.If you have been mapping json objects to HSTORE columns then you should change the column type to JSON.The arrow operator exists for json so queries should not need rewriting.</longdescription>
</pkgmetadata>