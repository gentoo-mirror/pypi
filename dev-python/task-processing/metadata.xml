<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Task ProcessingInterfaces and shared infrastructure for generic task processing (also known as `taskproc`) at Yelp.## Developer Setup### Pre-requisites+ [Docker](https://www.docker.com/get-docker)+ [Python 3.8](https://www.python.org/downloads/)+ [Virtualenv](https://virtualenv.pypa.io/en/stable/installation/)### Running examples[hello-world.py](/examples/hello-world/py) is a very simple annotated example that launches a task to echo `hello world`. From the root of the repository, run:    docker-compose -f examples/cluster/docker-compose.yaml \      run playground examples/hello-world.pyThis will bring up a single master, single agent Mesos cluster using [Docker Compose](https://docs.docker.com/compose/) and launch a single task which will print &quot;hello world&quot; to the sandbox's stdout before terminating.Other examples available include:+ async.pyExample of the [async](#async) task runner.+ dynamo_persistence.pyExample that shows how task events may be persisted to [DynamoDB](https://aws.amazon.com/dynamodb) using the `stateful` plugin.+ file_persistence.pyExample that shows how task events may be persisted to disk using the `stateful` plugin.+ promise.pyExample that shows how the [promise/future](#Promise/Future) task runner (not yet implemented) may be used.+ subscription.pyExample of the [subscription](#subscription) task runner.+ sync.pyBrief example using the [sync](#sync) task runner.+ timeout.pyExample that shows how to timeout a task execution using the `timeout` plugin.+ retry.pyExample that shows how to retry a task on failure using the `retry` plugin.+ task_logging.pyExample that shows how to fetch task logs from Mesos agents using the `logging` plugin.### Running testsFrom the root of the repository, run:    make## Repository Structure### /interfaces#### Event#### Runner#### TaskExecutor### /pluginsPlugins can be chained to create a task execution pipeline with more than one property. Please refer to persistence/retry/timeout examples.#### mesosImplements all required interfaces to talk to Mesos deployment. This plugin uses [PyMesos](https://github.com/douban/pymesos) to communicate with Mesos.#### timeoutImplements an executor to timeout task execution.#### retryingImplements an executor to retry task execution upon failure.#### loggingImplements an executor to retrieve task logs from Mesos agents. Note that it has to be the immediate upstream executor of the mesos executor.##### Configuration options- authentication\_principal Mesos principal- credential\_secret\_file path to file containing Mesos secret- mesos\_address host:port to connect to Mesos cluster- event_translator a fucntion that maps Mesos-specific events to `Event` objects#### statefulTODO: documentation### /runnersRunners provide specific concurrency semantics and are supposed to beplatform independent.#### SyncRunning a task is a blocking operation. `sync` runners block until the running task has completed or a `stop` event is received.#### AsyncProvide callbacks for different events in tasks' lifecycle. `async` runners allow tasks to specify one or more EventHandlers which consist of predicates and callbacks. Predicates are evaluated when an update is received from the task (e.g. that it has terminated and whether or not it has succeded) and if the predicate passes, the callback is called.#### Promise/FutureRunning a task returns future object.#### SubscriptionProvide a queue object and receive all events in there.</longdescription>
</pkgmetadata>