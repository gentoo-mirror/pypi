<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Shaonutil  - 0.0.0.61.1## Utility Functions for DevelopersStable Version - 0.0.0.61.1&lt;br&gt;Author: Shaon Majumder&lt;br&gt;Contact: smazoomder@gmail.com## Area of Utilities- file- image- imgcode- mysqlDB- network- process- security- stats- strings- windows## Installation&lt;code&gt;pip install shaonutil&lt;/code&gt;## Function Usages### FileFunction **get_module_path(module)**&lt;br&gt;Function **get_all_dirs()**&lt;br&gt;Function **get_all_files_dirs()**&lt;br&gt;Function **package_exists(package_name)** -&gt; Description: check if a python pcakage exists.&lt;br&gt;Function **pip_install(package_name)**&lt;br&gt;Function **get_all_functions(object)** -&gt; Description: shaonutil.file.get_all_functions(object/file/class)&lt;br&gt;Function **ConfigSectionMap(Config,section)**&lt;br&gt;Function **read_configuration_ini(filename)**&lt;br&gt;Function **read_safecase_configuration_ini(filename)**&lt;br&gt;Function **write_configuration_ini(configs_par,filename,f_mode)**&lt;br&gt;Function **read_json(filename)** -&gt; Description: Read JSON file and return dictionary&lt;br&gt;Function **write_json(obj,filename)** -&gt; Description: Write JSON file&lt;br&gt;Function **read_file(filename)** -&gt; Description: Read File and return lines as list&lt;br&gt;Function **write_file(filename,strs,mode)** -&gt; Description: Write File from string&lt;br&gt;Function **read_pickle(filename)**&lt;br&gt;Function **write_pickle(filename,obj_)**&lt;br&gt;Function **open_file_with_default_app(filepath)**&lt;br&gt;Function **get_last_file_of_dir(filename)**&lt;br&gt;Function **remove_duplicateLines_from_file(filename)**&lt;br&gt;Class **CaseConfigParser**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **optionxform(optionstr)**&lt;br&gt;### ImageFunction **svg2img(infile,outfile)**&lt;br&gt;Function **svg2pdf(infile,outfile)**&lt;br&gt;Function **change_image_size_ratio(img_name,out_name,percent)**&lt;br&gt;Function **draw_text(img,text,fnt_name,fnt_size)**&lt;br&gt;Function **merge_horizontally(images,filename)**&lt;br&gt;Function **merge_vertically(images,filename)**&lt;br&gt;Function **give_screenshot_caption(img_name,text,fnt_path)**&lt;br&gt;### BarCodeFunction **calculate_checksum(data)** -&gt; Description: Calculates the checksum for EAN13-Code / EAN8-Code return type: Integer&lt;br&gt;Function **verify_data(data)** -&gt; Description: Verify the EAN encoded data&lt;br&gt;Function **actual_data(decodedObjects)** -&gt; Description: Returns data without checksum digit for EAN type&lt;br&gt;Function **encode(type_,file_,data,rt)** -&gt; Description: Encode the data as barcode or qrcode&lt;br&gt;Function **decode(infile,log)** -&gt; Description: Decode barcode or qrcode&lt;br&gt;Function **markBarcode(im,decodedObjects)** -&gt; Description: Mark and show the detected barcode&lt;br&gt;Function **make_barcode_matrix(type_,unique_ids,row_number,column_number,filename)** -&gt; Description: Make barcode matrix image&lt;br&gt;Function **read_live_barcode(detection_threshold)** -&gt; Description: Live read the barcode and returns data&lt;br&gt;### Mysql DatabaseFunction **create_configuration(option,file_name)** -&gt; Description: Creating Configuration&lt;br&gt;Function **remove_aria_log(mysql_data_dir)** -&gt; Description: Removing aria_log.### files to in mysql data dir to restart mysql&lt;br&gt;Function **get_mysql_datadir(mysql_bin_folder,user,pass_)** -&gt; Description: Get mysql data directory&lt;br&gt;Class **MySQL** -&gt; Description: A class for all mysql actions&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **__init__(config,init_start_server,log)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **start_mysql_server()** -&gt; Description: Start mysql server&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **stop_mysql_server(force)** -&gt; Description: Stop MySQL Server&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **reopen_connection()** -&gt; Description: reopen&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **close_connection()** -&gt; Description: closing the connection&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **config()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **config(new_value)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **filter_config()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **make_cursor()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **is_mysql_user_exist(mysql_username)** -&gt; Description: check if mysql user exist return type:boolean&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **listMySQLUsers()** -&gt; Description: list all mysql users&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **createMySQLUser(host,userName,password,querynum,updatenum,connection_num)** -&gt; Description: Create a Mysql User&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **delete_mysql_user(user,host,password)** -&gt; Description: Delete a mysql user&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **show_privileges(user,host)** -&gt; Description: Show privileges of mysql user&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **check_privileges(database,host,username)** -&gt; Description: Check if a mysql user has privileges on a database&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **grant_all_privileges(host,userName,privileges,database,table,querynum,updatenum,connection_num)** -&gt; Description: Grant a user all privilages&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **grant_privileges(user,host,database,privileges,table)** -&gt; Description: Grant specified privileges for a mysql user&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **remove_all_privileges(user,host,privileges)** -&gt; Description: Revoke/Remove all privileges for a mysql user&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **remove_privileges(user,host,privileges)** -&gt; Description: Remove specified privileges for a mysql user&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **change_privileges(user,host,privileges)** -&gt; Description: Change to specified privileges for a mysql user&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **flush_privileges()** -&gt; Description: Update database permissions/privilages&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **add_db_privilages_for_MySQLUSer()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **change_db_privilages_for_MySQLUSer()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **is_db_exist(dbname)** -&gt; Description: Check if database exist&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **create_database(dbname)** -&gt; Description: Create Database&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **delete_database(dbname)** -&gt; Description: Delete Database&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **get_databases()** -&gt; Description: Get databases names&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **create_table(tbname,column_info)** -&gt; Description: Create a table under a database&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **delete_table(table,database)** -&gt; Description: Delete a table under a database&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **get_tables(database)** -&gt; Description: Get table names&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **describe_table(tbname)** -&gt; Description: Describe a table structure&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **is_table_exist(tbname)** -&gt; Description: Check if table exist&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **get_columns(tbname)** -&gt; Description: Get column names of a table&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **update_row()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **delete_row()** -&gt; Description: Delete a row of data&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **add_column(tbname,column_name)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **delete_column(tbname,column_name)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **delete_unique_column(tbname,column_name)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **change_to_unique_column()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **change_column()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **rename_column(tbname,old_column_name,new_column_name)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **backup_all()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **backup_table()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **backup_database()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **restore_table()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **restore_databalse()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **load_CSV_into_table()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **show_table(tbname)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **get_unique_id_from_field(field_name,key_length,filters)** -&gt; Description: Get a random unique id not registered in a specific field&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **delete_row(delete_dict)** -&gt; Description: Delete a row of data&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **insert_row(value_tupple)** -&gt; Description: Insert row of data&lt;br&gt;### NetworkFunction **check_port(address,port,log)**&lt;br&gt;Function **urlExist(url)** -&gt; Description: Check if the file exist in online&lt;br&gt;Function **downloadFile(url,filename)** -&gt; Description: Donwload a file if error occurs returns false&lt;br&gt;Function **url_encoding_to_utf_8(url)** -&gt; Description: url_encoding_to_utf_8(url)&lt;br&gt;Function **check_valid_url(url)**&lt;br&gt;Class **Email**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **__init__()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **authentication()**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **authentication(new_value)**&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Function **send_email(receiver_address,subject,mail_content,attachment_file_link,log)**&lt;br&gt;### ProcessFunction **is_process_exist(process_name)**&lt;br&gt;Function **kill_duplicate_process(process_name,log)** -&gt; Description: Kill a process if there is more than one instance is running.&lt;br&gt;Function **killProcess_ByAll(PROCNAME)**&lt;br&gt;Function **killProcess_ByPid(pid)**&lt;br&gt;Function **list_processes(sort,save_file,log)**&lt;br&gt;Function **computer_idle_mode()**&lt;br&gt;Function **obj_details_dump(obj)** -&gt; Description: check dump&lt;br&gt;### SecurityFunction **randomString(stringLength)** -&gt; Description: Generate a random string of fixed length &lt;br&gt;Function **generateSecureRandomString(stringLength)** -&gt; Description: Generate a secure random string of letters, digits and special characters &lt;br&gt;Function **generateCryptographicallySecureRandomString(stringLength,filters)** -&gt; Description: Generate a random string in a UUID fromat which is crytographically secure and random&lt;br&gt;### StatisticsFunction **counter(li,number)**&lt;br&gt;Function **occurance_dic(li)**&lt;br&gt;Function **mean(li)** -&gt; Description: Avearage or mean of elements - shaonutil.stats.mean(list of numbers)&lt;br&gt;Function **median(li)** -&gt; Description: Median of elements - shaonutil.stats.median(list of numbers)&lt;br&gt;Function **mode(li)** -&gt; Description: Mode of elements - shaonutil.stats.mode(list of numbers)&lt;br&gt;### StringFunction **nicely_print(dictionary,print)** -&gt; Description: Prints the nicely formatted dictionary - shaonutil.strings.nicely_print(object)&lt;br&gt;Function **change_dic_key(dic,old_key,new_key)** -&gt; Description: Change dictionary key with new key&lt;br&gt;### WindowsFunction **is_winapp_admin()** -&gt; Description: If the windows app is running with Administrator permission&lt;br&gt;Function **get_UAC_permission()** -&gt; Description: Get Windows User Account Control Permission for the executing file. If already executing file has admin access, do not ask for permission.&lt;br&gt;Function Usages End## Versioning *major.minor[.maintenance[.build]]* (example: *1.4.3.5249*)adoption: major.minor.patch.maintenance.status.trials_for_successThe last position- 0 for alpha (status) - 1 for beta (status)- 2 for release candidate- 3 for (final) releaseFor instance:- 1.2.0.1 instead of 1.2-a1- 1.2.1.2 instead of 1.2-b2 (beta with some bug fixes)- 1.2.2.3 instead of 1.2-rc3 (release candidate)- 1.2.3.0 instead of 1.2-r (commercial distribution)- 1.2.3.5 instead of 1.2-r5 (commercial distribution with many bug fixes)</longdescription>
</pkgmetadata>