<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ReaderBench Python## InstallWe recommend using virtual environments, as some packages require an exact version.   If you only want to use the package do the following:  1. `sudo apt-get install python3-pip, python3-venv, python3-dev`    2. `python3 -m venv rbenv` (create virutal environment named rbenv)3. `source rbenv/bin/activate` (activate virtual env)4. `pip3 uninstall setuptools &amp;&amp; pip3 install setuptools &amp;&amp; pip3 install --upgrade pip &amp;&amp; pip3 install --no-cache-dir rbpy-rb`5. Use it as in: https://github.com/readerbench/ReaderBench/blob/master/usage.py  If you want to contribute to the code base of package:   1. `sudo apt-get install python3-pip, python3-venv, python3-dev`    2. `git clone git@git.readerbench.com:ReaderBench/readerbenchpy.git &amp;&amp; cd readerbenchpy/`  3. `python3 -m venv rbenv` (create virutal environment named rbenv)4. `source rbenv/bin/activate` (activate virtual env)5. `pip3 uninstall setuptools &amp;&amp; pip3 install setuptools &amp;&amp; pip3 install --upgrade pip`6. `pip3 install -r requirements.txt` 7. `python3 nltk_download.py`  Optional: prei-install model for en (otherwise most of the English processings would fail    and ask to run this command):8. `python3 -m spacy download en_core_web_lg`If you want to install spellchecking (hunspell) also you need this non-python libraries:1. `sudo apt-get install libhunspell-1.6-0 libhunspell-dev hunspell-ro`2. `pip3 install hunspell`## UsageFor usage (parsing, lemmatization, NER, wordnet, content words, indices etc.)  see file `usage.py` from https://github.com/readerbench/ReaderBench    ## TipsYou may also need some spacy models which are downloaded through spacy.     You have to download these spacy models by yourself, using the command:    `python3 -m spacy download name_of_the_model` The logger will also write instructions on which models you need, and how to download them.  ## Developer instructions## How to use BertOur models are also available in the HuggingFace platform: https://huggingface.co/readerbench You can use them directly from HuggingFace:```# tensorflowfrom transformers import AutoModel, AutoTokenizer, TFAutoModeltokenizer = AutoTokenizer.from_pretrained(&quot;readerbench/RoBERT-base&quot;)model = TFAutoModel.from_pretrained(&quot;readerbench/RoBERT-base&quot;)inputs = tokenizer(&quot;exemplu de propoziție&quot;, return_tensors=&quot;tf&quot;)outputs = model(inputs)# pytorchfrom transformers import AutoModel, AutoTokenizer, AutoModeltokenizer = AutoTokenizer.from_pretrained(&quot;readerbench/RoBERT-base&quot;)model = AutoModel.from_pretrained(&quot;readerbench/RoBERT-base&quot;)inputs = tokenizer(&quot;exemplu de propoziție&quot;, return_tensors=&quot;pt&quot;)outputs = model(**inputs)```or from ReaderBench:```from rb.core.lang import Langfrom rb.processings.encoders.bert import BertWrapperfrom tensorflow import kerasbert_wrapper = BertWrapper(Lang.RO, max_seq_len=128)inputs, bert_layer = bert_wrapper.create_inputs_and_model()cls_output = bert_wrapper.get_output(bert_layer, &quot;cls&quot;) # or &quot;pool&quot;# Add decision layer and compile model# eg. # hidden = keras.layers.Dense(..)(cls_output)# output = keras.layers.Dense(..)(hidden)# model = keras.Model(inputs=inputs, outputs=[output])# model.compile(..)bert_wrapper.load_weights() #must be called after compile# Process inputs for modelfeed_inputs = bert_wrapper.process_input([&quot;text1&quot;, &quot;text2&quot;, &quot;text3&quot;])# feed_output = ...# model.fit(feed_inputs, feed_output, ...)```## How to use the loggerIn each file you have to initialize the logger:  ```shfrom rb.utils.rblogger import Logger  logger = Logger.get_logger() logger.info(&quot;info msg&quot;)logger.warning(&quot;warning msg&quot;)  logger.error()```## How to push the wheel on pip1. `rm -r dist/`2. `pip3 install twine wheel`3. `./upload_to_pypi.sh`## How to run rb/core/cscl/csv_parser.py1. Do the installing steps from contribution2. run `pip3 install xmltodict`3. run `EXPORT PYTHONPATH=/add/path/to/repo/readerbenchpy/`4. add json resources in a `jsons` directory in `readerbenchpy/rb/core/cscl/`5. run `cd rb/core/cscl/ &amp;&amp; python3 csv_parser.py`## Supported Date FormatsReaderBench is able to perform conversation analysis from chats and communities. Each utterance must have the time expressed in one of the following formats:- %Y-%m-%d %H:%M:%S.%f %Z- %Y-%m-%d %H:%M:%S %Z- %Y-%m-%d %H:%M %Z- %Y-%m-%d %H:%M:%S.%f- %Y-%m-%d %H:%M:%S- %Y-%m-%d %H:%Mwhere codifications are extracted from [Python date format codes](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes).</longdescription>
</pkgmetadata>