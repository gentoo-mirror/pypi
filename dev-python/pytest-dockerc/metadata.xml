<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-dockerc**pytest-dockerc** is a plugin for [pytest](https://docs.pytest.org/en/latest/) that provides supportfor running test from [Docker Compose](https://github.com/docker/compose#docker-compose) project.The `docker-compose up -d` command is executed at the beginning of thetest session and the `docker-compose down` command at the end. The main fixture `dockerc`returns a [compose.project.Project](https://github.com/docker/compose/blob/master/compose/project.py)to deal with the python docker API in your tests. Another fixture `dockerc_logs` is provided to enablethe logs on stdout during your tests execution.This plugin provides a way to use as far as possible the same environment for development, test,integration and production phases. You test and deploy the same artifact in order to avoidside effects in production.# Install```pip install pytest-dockerc```# Getting startedBelow a basic example, you can also refer to a full example with an[http server](https://gitlab.com/nicofonk/pytest-dockerc/blob/master/tests/test_fixtures.py).## worktree```├── docker-compose.yml└── tests    ├── conftest.py    └── test_example.py```## docker-compose.yml```yamlversion: &quot;3.6&quot;services:  python:    image: python:3-alpine```## test_example.py```pythondef test_example(dockerc):    assert len(dockerc.containers()) == 1    container = dockerc.containers()[0]    assert container.is_running is True    assert container.labels[&quot;com.docker.compose.service&quot;] == &quot;python&quot;```# Available optionsSome options are available to update the default behavior of the plugin.```dockerc:  --dockerc-norun       disable the run and stop commands of docker-compose  --dockerc-attach-network                        attach the pytest container to the docker-compose                        network,only if pytest is started inside a container  --dockerc-filepath=DOCKERC_FILEPATH                        set the Compose file path  --dockerc-projectdir=DOCKERC_PROJECTDIR                        set the working directory of the Compose project  --dockerc-projectname=DOCKERC_PROJECTNAME                        set project name of the Compose project  --dockerc-build       build images before starting containers  --dockerc-services=DOCKERC_SERVICES                        select services to run```## Run tests without up and down command of  **docker-compose**Running the full **docker-compose** project can take time, if you loads several services. It isuseful to run the test on a running instance. That method is recommended when you write a newtest.First start your docker compose like usual:```docker-compose up```Then run your tests with the `--dockerc-norun`, that will skip the `up` and `down` command:```pytest --dockerc-norun```Below the docker-compose output after 2 runs of the test `tests/test_fixtures::test_basic_workflow`,which performs a GET request.```Creating network &quot;pytest-dockerc_default&quot; with the default driverCreating pytest-dockerc_http_1 ... doneAttaching to pytest-dockerc_http_1http_1  | 192.168.32.1 - - [24/Dec/2018:08:48:21 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;python-requests/2.20.0&quot; &quot;-&quot;http_1  | 192.168.32.1 - - [24/Dec/2018:08:48:22 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;python-requests/2.20.0&quot; &quot;-&quot;```</longdescription>
</pkgmetadata>