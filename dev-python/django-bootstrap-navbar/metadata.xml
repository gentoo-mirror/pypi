<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-bootstrap-navbar[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)[![coverage report](https://gitlab.com/BradleyKirton/django-bootstrap-navbar/badges/master/coverage.svg?job=test)](https://gitlab.com/BradleyKirton/django-bootstrap-navbar/)A code based navbar with great ambitions.![django-navbar](./example.png &quot;made with django-bootstrap-navbar and &lt;3&quot;)# Usagedjango-bootstrap-navbar lets you create a bootstrap 4 navbar with a Python class. It then takes care of setting the active class on the appropriate link based on the current path.## InstallThe library is available on PyPi.```bashpip install django-bootstrap-navbar```Once you have created a navbar class there are two ways of making it available in your template context:1. Using the provided context processor```pythonBOOTSTRAP_NAVBAR = &quot;showcase.navbar:ExampleNavBar&quot;TEMPLATES = [    {        &quot;BACKEND&quot;: &quot;django.template.backends.django.DjangoTemplates&quot;,        ...            &quot;context_processors&quot;: [                &quot;django.template.context_processors.debug&quot;,                ...                &quot;bootstrap_navbar.navbars.context_processors.navbar&quot;,            ]        },    }]```2. Using the provided mixin```pythonclass ContextProcessorView(BootstrapNavBarViewMixin, TemplateView):    template_name = &quot;index.html&quot;    navbar_class = AppNavBar```Finally the navbar can be rendered within your templates by calling the navbar.render method.```html{{ navbar.render }}```A full [example](./bootstrap_navbar/examples/) is available within the repo.</longdescription>
</pkgmetadata>