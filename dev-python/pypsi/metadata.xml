<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Pypsi - Python Pluggable Shell Interface========================================.. image:: https://coveralls.io/repos/ameily/pypsi/badge.svg?branch=master&amp;service=github  :target: https://coveralls.io/github/ameily/pypsi?branch=master.. image:: https://travis-ci.com/ameily/pypsi.svg?branch=master  :target: https://travis-ci.com/ameily/pypsiDevelop extensible and powerful command line interface shells with minimal code.Python Pluggable Shell Interface, or pypsi, is a framework for developingcommand line based shell interfaces, akin to bash or csh. It is intended to bea replacement for the builtin Python ``cmd`` module.Pypsi is targeted towards both large scale and rapid prototype interfaceshells. The bootstraping code is very small with very little boilerplate. Pypsiships with a great deal of capabilities out of the box, all of which can be usedor ignored. Pypsi is pluggable which allows commands, features, and plugins to bedeveloped independently in their own source files and/or Python classes. Thisresults in a very clean source repository. The actual code to setup and run theshell is extremely small, on the order of ~20-50 lines of code.Pypsi, at its core, is pluggable. There are many hooks that allow plugin authorsto extend and modify the core behavior of pypsi. Commands are isolated classesthat make distribution, sharing, and modification easy.Releases--------The pypsi source code is hosted at `GitHub &lt;https://github.com/ameily/pypsi&gt;`_and releases are stored at `PyPI &lt;https://pypi.python.org/pypi/pypsi&gt;`_. Thelatest version can also be install via pip:::    $ pip install pypsiDocumentation can be found on `GitHub Pages &lt;http://ameily.github.io/pypsi&gt;`_.Features--------The following capabilities ship with pypsi and are available out of the box.-  I/O redirection-  Flexible API-  Tab completion-  Multiplatform-  Minimal dependencies-  Colors-  Session tips and message of the day (MOTD)-  Automated help, usage messages, and argument parsing-  Word wrapping-  Term highlighting (grep)-  Tables-  Prompt wizards-  ``cmd`` plugin to migrate existing ``cmd`` commands into pypsiDemo----The ``demo.py`` source file can be run to demonstrate the base commands andfeatures that ship with pypsi (the ``demo.py`` file can be downloaded from thegit repo at https://github.com/ameily/pypsi/blob/master/demo.py). The commandsdisplayed below are all optional: pypsi does not require the use of any commandor plugin. The ``demo.py`` file is meant to be a reference to the Pypsi API anddesign. Use it as a starting point for your first shell.Variables~~~~~~~~~::    pypsi)&gt; var name = &quot;Paul&quot;    pypsi)&gt; var house = &quot;Atredis&quot;    pypsi)&gt; echo My name is $name, and I belong to House $house    My name is Paul, and I belong to House Atredis    pypsi)&gt; var --list    name     Paul    house    Atredis    pypsi)&gt; var -d name    pypsi)&gt; echo $name    pypsi)&gt; var name = &quot;Paul $house&quot;    pypsi)&gt; echo $name    Paul AtredisI/O redirection~~~~~~~~~~~~~~~::    pypsi)&gt; echo Hello    Hello    pypsi)&gt; echo Hello &gt; output.txt    pypsi)&gt; echo Goodbye    pypsi)&gt; xargs -I{} &quot;echo line: {}&quot; &lt; output.txt    line: Hello    line: Goodbye    pypsi)&gt; cat output.txt | grep ll    HelloSystem commands~~~~~~~~~~~~~~~Allows execution of external applications. Command mimics Python's``os.system()`` function.::    pypsi)&gt; ls    pypsi: ls: command not found    pypsi)&gt; system ls    include/    src/    README.md    pypsi)&gt; system ls | system grep md    README.mdFallback command~~~~~~~~~~~~~~~~Allows the developer to set which command gets called if one does not exist inthe current shell. This is very useful, for example, if you want to fallback onany OS installed executables. In this example, the fallback command is``system``.::    pypsi)&gt; ls    include/    src/    README.mdCommand chaining~~~~~~~~~~~~~~~~::    pypsi)&gt; echo Hello &amp;&amp; echo --bad-arg &amp;&amp; echo goodbye    Hello    echo: unrecgonized arguments: --bad-arg    pypsi)&gt; echo Hello ; echo --bad-arg ; echo goodbye    Hello    echo: unrecgonized arguments: --bad-arg    goodbye    pypsi)&gt; echo --bad-arg || echo first failed    echo: unrecgonized arguments: --bad-arg    first failedMultiline commands~~~~~~~~~~~~~~~~~~::    pypsi)&gt; echo Hello, \    &gt; Dave    Hello, Dave    pypsi)&gt; echo This \    &gt; is \    &gt; pypsi \    &gt; and it rocks    This is pypsi and it rocksMacros~~~~~~Macros are analogous to functions in bash. They provide the ability to createnew commands in the shell.::    pypsi)&gt; macro hello    &gt; echo Hello, $1    &gt; echo Goodbye from macro $0    &gt; end    pypsi)&gt; hello Adam    Hello, Adam    Goodbye from macro helloTab Complete~~~~~~~~~~~~Tab completion is easier than ever with PyPsi. Using the included ``command_completer()``function, arguments and sub-commands are completed automatically when the ``tab``key is pressed. To get started, add the use of ``command_completer`` to yourcustom command's complete function:.. code-block:: python    def complete(self, shell, args, prefix):        from pypsi.completers import command_completer        return completions = command_completer(self.parser, shell, args, prefix)Just pass ``command_completer`` the parser you created for the command, along withthe standard arguments to the ``complete`` function, and let PyPsi work it's magic!::    pypsi)&gt; macro -&lt;tab&gt;    --delete --help   --list   --show   -d       -h       -l       -sFor each argument added to a PyPsi Argument parser, a callback function to getthe possible completions can be specified via the `completer` argument.The callback function will be called from ``command_completer`` anytime tab ispressed while the user is currently entering that argument's value. Ex:.. code-block:: python    # Snippet from macro.py    self.parser.add_argument(         '-s', '--show', help='print macro body',         metavar='NAME', completer=self.complete_macros    )    ...    def complete_macros(self, shell, args, prefix):        # returns a list of macro names in the current shell        return list(shell.ctx.macros.keys())::    pypsi)&gt; macro --show &lt;tab&gt;    hello   goodbyeSee ``tail.py``, ``help.py``, and ``macro.py`` for examples.Prompt Wizards~~~~~~~~~~~~~~Prompt wizards ask the user a series of questions and request input. Input istab completed, validated, and returned. The wizard can be used for easyconfiguration of components that require a substantial amount of input.::    pypsi)&gt; wizard    +-----------------------------------------------------------------------------+    |                    Entering Example Configuration Wizard                    |    +-----------------------------------------------------------------------------+    Shows various examples of wizard steps    To exit, enter either Ctrl+C, Ctrl+D, or 'quit'. For help about the current    step, enter 'help' or '?'.    IP Address: &lt;enter&gt;    Error: Value is required    Local IP Address or Host name    IP Address: 192.168.0.10    TCP Port [1337]: &lt;enter&gt;    File path: /var/lo&lt;tab&gt;    local/  lock/   log/    File path: /var/log/&lt;tab&gt;    Xorg.1.log        btmp              faillog           upstart/    Xorg.1.log.old    dist-upgrade/     fontconfig.log    wtmp    alternatives.log  distccd.log       fsck/    apt/              dmesg             lastlog    bootstrap.log     dpkg.log          mongodb/    File path: /var/log/dpkg.log    Shell mode [local]: asdf    Error: Invalid choice    Mode of the shell    Shell mode [local]: remote    Config ID    Config Value    ================================================================================    ip_addr      172.16.11.204    port         1337    path         /var/log/dpkg.log    mode         remoteLicense-------``pypsi`` is released under the ISC permissive license.</longdescription>
</pkgmetadata>