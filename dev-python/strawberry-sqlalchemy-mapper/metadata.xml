<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># strawberry-sqlalchemy-mapperStrawberry-sqlalchemy-mapper is the simplest way to implement autogenerated strawberry types for columns and relationships in SQLAlchemy models.- Instead of manually listing every column and relationship in a SQLAlchemy model, strawberry-sqlalchemy-mapperlets you decorate a class declaration and it will automatically generate the necessary strawberry fieldsfor all columns and relationships (subject to the limitations below) in the given model.- Native support for most of SQLAlchemy's most common types.- Extensible to arbitrary custom SQLAlchemy types.- Automatic batching of queries, avoiding N+1 queries when getting relationships- Support for SQLAlchemy &gt;=1.4.x- Lightweight and fast.## Getting Startedstrawberry-sqlalchemy-mapper is available on [PyPi](https://pypi.org/project/strawberry-sqlalchemy-mapper/)```pip install strawberry-sqlalchemy-mapper```First, define your sqlalchemy model:```python# models.pyfrom sqlalchemy import Column, Integer, Stringfrom sqlalchemy.ext.declarative import declarative_baseBase = declarative_base()class Employee(Base):    __tablename__ = &quot;employee&quot;    id = Column(UUID, primary_key=True)    name = Column(String, nullable=False)    password_hash = Column(String, nullable=False)    department_id = Column(UUID, ForeignKey(&quot;department.id&quot;))    department = relationship(&quot;Department&quot;, back_populates=&quot;employees&quot;)class Department(Base):    __tablename__ = &quot;department&quot;    id = Column(UUID, primary_key=True)    name = Column(String, nullable=False)    employees = relationship(&quot;Employee&quot;, back_populates=&quot;department&quot;)```Next, decorate a type with `strawberry_sqlalchemy_mapper.type()`to register it as a strawberry type for the given SQLAlchemy model.This will automatically add fields for the model's columns, relationships, association proxies,and hybrid properties. For example:```python# elsewhere# ...from strawberry_sqlalchemy_mapper import StrawberrySQLAlchemyMapperstrawberry_sqlalchemy_mapper = StrawberrySQLAlchemyMapper()@strawberry_sqlalchemy_mapper.type(models.Employee)class Employee:    __exclude__ = [&quot;password_hash&quot;]@strawberry_sqlalchemy_mapper.type(models.Department)class Department:    pass@strawberry.typeclass Query:    @strawberry.field    def departments(self):        return db.session.scalars(select(models.Department)).all()# context is expected to have an instance of StrawberrySQLAlchemyLoaderclass CustomGraphQLView(GraphQLView):    def get_context(self):        return {            &quot;sqlalchemy_loader&quot;: StrawberrySQLAlchemyLoader(bind=YOUR_SESSION),        }# call finalize() before using the schema:# (note that models that are related to models that are in the schema# are automatically mapped at this stage -- e.g., Department is mapped# because employee.department is a relationshp to Department)strawberry_sqlalchemy_mapper.finalize()# only needed if you have polymorphic typesadditional_types = list(strawberry_sqlalchemy_mapper.mapped_types.values())schema = strawberry.Schema(    query=Query,    mutation=Mutation,    extensions=extensions,    types=additional_types,)# You can now query, e.g.:&quot;&quot;&quot;query {    departments {        id        name        employees {            edge {                node {                    id                    name                    department {                        # Just an example of nested relationships                        id                        name                    }                }            }        }    }}&quot;&quot;&quot;```## LimitationsSQLAlchemy Models -&gt; Strawberry Types and Interfaces are expected to have a consistent(customizable) naming convention. These can be configured by passing `model_to_type_name`and `model_to_interface_name` when constructing the mapper.Natively supports the following SQLAlchemy types:```pythonInteger: int,Float: float,BigInteger: int,Numeric: Decimal,DateTime: datetime,Date: date,Time: time,String: str,Text: str,Boolean: bool,Unicode: str,UnicodeText: str,SmallInteger: int,SQLAlchemyUUID: uuid.UUID,VARCHAR: str,ARRAY[T]: List[T] # PostgreSQL arrayJSON: JSON # SQLAlchemy JSONEnum: (the Python enum it is mapped to, which should be @strawberry.enum-decorated)```Additional types can be supported by passing `extra_sqlalchemy_type_to_strawberry_type_map`,although support for `TypeDecorator` types is untested.Association proxies are expected to be of the form `association_proxy('relationship1', 'relationship2')`,i.e., both properties are expected to be relationships.Roots of polymorphic hierarchies **are supported**, but are also expected to be registered via`strawberry_sqlalchemy_mapper.interface()`, and its concrete type andits descendants are expected to inherit from the interface:```pythonclass Book(Model):    id = Column(UUID, primary_key=True)class Novel(Book):    passclass ShortStory(Book):    pass# in another filestrawberry_sqlalchemy_mapper = StrawberrySQLAlchemyMapper()@strawberry_sqlalchemy_mapper.interface(models.Book)class BookInterface:    pass@strawberry_sqlalchemy_mapper.type(models.Book)class Book:    pass@strawberry_sqlalchemy_mapper.type(models.Novel)class Novel:    pass@strawberry_sqlalchemy_mapper.type(models.ShortStory)class ShortStory:    pass```## ContributingWe encourage you to contribute to strawberry-sqlalchemy-mapper! Any contributions you make are greatly appreciated.If you have a suggestion that would make this better, please fork the repo and create a pull request. Don't forget to give the project a star! Thanks again!1. Fork the Project2. Create your Feature Branch (git checkout -b feature)3. Commit your Changes (git commit -m 'Add some feature')4. Push to the Branch (git push origin feature)5. Open a Pull Request### PrerequisitesThis project uses `pre-commit`_, please make sure to install it before making anychanges::    pip install pre-commit    cd strawberry-sqlalchemy-mapper    pre-commit installIt is a good idea to update the hooks to the latest version::    pre-commit autoupdateDon't forget to tell your contributors to also install and use pre-commit.### Installation```bashpip install -r requirements.txt```Install [PostgreSQL 14+](https://www.postgresql.org/download/)### Test```bashpytest```## ⚖️ LICENSEMIT © [strawberry-sqlalchemy-mapper](LICENSE.txt)</longdescription>
</pkgmetadata>