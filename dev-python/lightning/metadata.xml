<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;img alt=&quot;Lightning&quot; src=&quot;https://pl-public-data.s3.amazonaws.com/assets_lightning/LightningColor.png&quot; width=&quot;800px&quot; style=&quot;max-width: 100%;&quot;&gt;&lt;br/&gt;&lt;br/&gt;**The Deep Learning framework to train, deploy, and ship AI products Lightning fast.****NEW- Lightning 2.0 is featuring a clean and stable API!!**______________________________________________________________________&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.lightning.ai/&quot;&gt;Lightning.ai&lt;/a&gt; •  &lt;a href=&quot;https://lightning.ai/docs/pytorch/stable/&quot;&gt;PyTorch Lightning&lt;/a&gt; •  &lt;a href=&quot;https://lightning.ai/docs/fabric/stable/&quot;&gt;Fabric&lt;/a&gt; •  &lt;a href=&quot;https://lightning.ai/docs/app/stable/&quot;&gt;Lightning Apps&lt;/a&gt; •  &lt;a href=&quot;https://pytorch-lightning.readthedocs.io/en/2.0.3&quot;&gt;Docs&lt;/a&gt; •  &lt;a href=&quot;#community&quot;&gt;Community&lt;/a&gt; •  &lt;a href=&quot;https://lightning.ai/docs/pytorch/stable/generated/CONTRIBUTING.html&quot;&gt;Contribute&lt;/a&gt; •&lt;/p&gt;&lt;!-- DO NOT ADD CONDA DOWNLOADS... README CHANGES MUST BE APPROVED BY EDEN OR WILL --&gt;[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytorch-lightning)](https://pypi.org/project/pytorch-lightning/)[![PyPI Status](https://badge.fury.io/py/pytorch-lightning.svg)](https://badge.fury.io/py/pytorch-lightning)[![PyPI Status](https://pepy.tech/badge/pytorch-lightning)](https://pepy.tech/project/pytorch-lightning)[![Conda](https://img.shields.io/conda/v/conda-forge/lightning?label=conda&amp;color=success)](https://anaconda.org/conda-forge/lightning)[![DockerHub](https://img.shields.io/docker/pulls/pytorchlightning/pytorch_lightning.svg)](https://hub.docker.com/r/pytorchlightning/pytorch_lightning)[![codecov](https://codecov.io/gh/Lightning-AI/lightning/release/2.0.3/graph/badge.svg?token=SmzX8mnKlA)](https://codecov.io/gh/Lightning-AI/lightning)[![Discord](https://img.shields.io/discord/1077906959069626439?style=plastic)](https://discord.gg/VptPCZkGNa)![GitHub commit activity](https://img.shields.io/github/commit-activity/w/lightning-ai/lightning)[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/Lightning-AI/lightning/blob/master/LICENSE)&lt;!--[![CodeFactor](https://www.codefactor.io/repository/github/Lightning-AI/lightning/badge)](https://www.codefactor.io/repository/github/Lightning-AI/lightning)--&gt;&lt;/div&gt;## Install LightningSimple installation from PyPI```bashpip install lightning```&lt;!--  --&gt;______________________________________________________________________## Lightning has 3 core packages[PyTorch Lightning: Train and deploy PyTorch at scale](#pytorch-lightning-train-and-deploy-pytorch-at-scale).&lt;br/&gt;[Lightning Fabric: Expert control](#lightning-fabric-expert-control).&lt;br/&gt;[Lightning Apps: Build AI products and ML workflows](#lightning-apps-build-ai-products-and-ml-workflows).Lightning gives you granular control over how much abstraction you want to add over PyTorch.&lt;div align=&quot;center&quot;&gt;    &lt;img src=&quot;https://pl-public-data.s3.amazonaws.com/assets_lightning/continuum.png&quot; width=&quot;80%&quot;&gt;&lt;/div&gt;______________________________________________________________________# PyTorch Lightning: Train and Deploy PyTorch at ScalePyTorch Lightning is just organized PyTorch - Lightning disentangles PyTorch code to decouple the science from the engineering.______________________________________________________________________### Hello simple model```python# main.py# ! pip install torchvisionimport os, torch, torch.nn as nn, torch.utils.data as data, torchvision as tv, torch.nn.functional as Fimport lightning as L# --------------------------------# Step 1: Define a LightningModule# --------------------------------# A LightningModule (nn.Module subclass) defines a full *system*# (ie: an LLM, difussion model, autoencoder, or simple image classifier).class LitAutoEncoder(L.LightningModule):    def __init__(self):        super().__init__()        self.encoder = nn.Sequential(nn.Linear(28 * 28, 128), nn.ReLU(), nn.Linear(128, 3))        self.decoder = nn.Sequential(nn.Linear(3, 128), nn.ReLU(), nn.Linear(128, 28 * 28))    def forward(self, x):        # in lightning, forward defines the prediction/inference actions        embedding = self.encoder(x)        return embedding    def training_step(self, batch, batch_idx):        # training_step defines the train loop. It is independent of forward        x, y = batch        x = x.view(x.size(0), -1)        z = self.encoder(x)        x_hat = self.decoder(z)        loss = F.mse_loss(x_hat, x)        self.log(&quot;train_loss&quot;, loss)        return loss    def configure_optimizers(self):        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)        return optimizer# -------------------# Step 2: Define data# -------------------dataset = tv.datasets.MNIST(os.getcwd(), download=True, transform=tv.transforms.ToTensor())train, val = data.random_split(dataset, [55000, 5000])# -------------------# Step 3: Train# -------------------autoencoder = LitAutoEncoder()trainer = L.Trainer()trainer.fit(autoencoder, data.DataLoader(train), data.DataLoader(val))```Run the model on your terminal```bashpip install torchvisionpython main.py```______________________________________________________________________## Advanced featuresLightning has over [40+ advanced features](https://lightning.ai/docs/pytorch/stable/common/trainer.html#trainer-flags) designed for professional AI research at scale.Here are some examples:&lt;div align=&quot;center&quot;&gt;    &lt;img src=&quot;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/features_2.jpg&quot; max-height=&quot;600px&quot;&gt;  &lt;/div&gt;&lt;details&gt;  &lt;summary&gt;Train on 1000s of GPUs without code changes&lt;/summary&gt;```python# 8 GPUs# no code changes neededtrainer = Trainer(accelerator=&quot;gpu&quot;, devices=8)# 256 GPUstrainer = Trainer(accelerator=&quot;gpu&quot;, devices=8, num_nodes=32)```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;Train on other accelerators like TPUs without code changes&lt;/summary&gt;```python# no code changes neededtrainer = Trainer(accelerator=&quot;tpu&quot;, devices=8)```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;16-bit precision&lt;/summary&gt;```python# no code changes neededtrainer = Trainer(precision=16)```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;Experiment managers&lt;/summary&gt;```pythonfrom lightning import loggers# tensorboardtrainer = Trainer(logger=TensorBoardLogger(&quot;logs/&quot;))# weights and biasestrainer = Trainer(logger=loggers.WandbLogger())# comettrainer = Trainer(logger=loggers.CometLogger())# mlflowtrainer = Trainer(logger=loggers.MLFlowLogger())# neptunetrainer = Trainer(logger=loggers.NeptuneLogger())# ... and dozens more```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Early Stopping&lt;/summary&gt;```pythones = EarlyStopping(monitor=&quot;val_loss&quot;)trainer = Trainer(callbacks=[es])```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;Checkpointing&lt;/summary&gt;```pythoncheckpointing = ModelCheckpoint(monitor=&quot;val_loss&quot;)trainer = Trainer(callbacks=[checkpointing])```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;Export to torchscript (JIT) (production use)&lt;/summary&gt;```python# torchscriptautoencoder = LitAutoEncoder()torch.jit.save(autoencoder.to_torchscript(), &quot;model.pt&quot;)```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;Export to ONNX (production use)&lt;/summary&gt;```python# onnxwith tempfile.NamedTemporaryFile(suffix=&quot;.onnx&quot;, delete=False) as tmpfile:    autoencoder = LitAutoEncoder()    input_sample = torch.randn((1, 64))    autoencoder.to_onnx(tmpfile.name, input_sample, export_params=True)    os.path.isfile(tmpfile.name)```&lt;/details&gt;______________________________________________________________________## Advantages over unstructured PyTorch- Models become hardware agnostic- Code is clear to read because engineering code is abstracted away- Easier to reproduce- Make fewer mistakes because lightning handles the tricky engineering- Keeps all the flexibility (LightningModules are still PyTorch modules), but removes a ton of boilerplate- Lightning has dozens of integrations with popular machine learning tools.- [Tested rigorously with every new PR](https://github.com/Lightning-AI/lightning/tree/master/tests). We test every combination of PyTorch and Python supported versions, every OS, multi GPUs and even TPUs.- Minimal running speed overhead (about 300 ms per epoch compared with pure PyTorch).______________________________________________________________________&lt;div align=&quot;center&quot;&gt;    &lt;a href=&quot;https://lightning.ai/docs/pytorch/stable/&quot;&gt;Read the PyTorch Lightning docs&lt;/a&gt;&lt;/div&gt;______________________________________________________________________# Lightning Fabric: Expert control.Run on any device at any scale with expert-level control over PyTorch training loop and scaling strategy. You can even write your own Trainer.Fabric is designed for the most complex models like foundation model scaling, LLMs, diffussion, transformers, reinforcement learning, active learning.```diff+ import lightning as L  import torch  import torch.nn as nn  from torch.utils.data import DataLoader, Dataset  class PyTorchModel(nn.Module):      ...  class PyTorchDataset(Dataset):      ...+ fabric = L.Fabric(accelerator=&quot;cuda&quot;, devices=8, strategy=&quot;ddp&quot;)+ fabric.launch()- device = &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu  model = PyTorchModel(...)  optimizer = torch.optim.SGD(model.parameters())+ model, optimizer = fabric.setup(model, optimizer)  dataloader = DataLoader(PyTorchDataset(...), ...)+ dataloader = fabric.setup_dataloaders(dataloader)  model.train()  for epoch in range(num_epochs):      for batch in dataloader:          input, target = batch-         input, target = input.to(device), target.to(device)          optimizer.zero_grad()          output = model(input)          loss = loss_fn(output, target)-         loss.backward()+         fabric.backward(loss)          optimizer.step()          lr_scheduler.step()```## Key features- Easily switch from running on CPU to GPU (Apple Silicon, CUDA, …), TPU, multi-GPU or even multi-node training- Use state-of-the-art distributed training strategies (DDP, FSDP, DeepSpeed) and mixed precision out of the box- All the device logic boilerplate is handled for you- Designed with multi-billion parameter models in mind- Build your own custom Trainer using Fabric primitives for training checkpointing, logging, and more______________________________________________________________________&lt;div align=&quot;center&quot;&gt;    &lt;a href=&quot;https://lightning.ai/docs/fabric/stable/&quot;&gt;Read the Lightning Fabric docs&lt;/a&gt;&lt;/div&gt;______________________________________________________________________# Lightning Apps: Build AI products and ML workflowsLightning Apps remove the cloud infrastructure boilerplate so you can focus on solving the research or business problems. Lightning Apps can run on the Lightning Cloud, your own cluster or a private cloud.&lt;div align=&quot;center&quot;&gt;    &lt;img src=&quot;https://pl-public-data.s3.amazonaws.com/assets_lightning/lightning-apps-teaser.png&quot; width=&quot;80%&quot;&gt;&lt;/div&gt;## Hello Lightning app world```python# app.pyimport lightning as Lclass TrainComponent(L.LightningWork):    def run(self, x):        print(f&quot;train a model on {x}&quot;)class AnalyzeComponent(L.LightningWork):    def run(self, x):        print(f&quot;analyze model on {x}&quot;)class WorkflowOrchestrator(L.LightningFlow):    def __init__(self) -&gt; None:        super().__init__()        self.train = TrainComponent(cloud_compute=L.CloudCompute(&quot;cpu&quot;))        self.analyze = AnalyzeComponent(cloud_compute=L.CloudCompute(&quot;gpu&quot;))    def run(self):        self.train.run(&quot;CPU machine 1&quot;)        self.analyze.run(&quot;GPU machine 2&quot;)app = L.LightningApp(WorkflowOrchestrator())```Run on the cloud or locally```bash# run on the cloudlightning run app app.py --setup --cloud# run locallylightning run app app.py```______________________________________________________________________&lt;div align=&quot;center&quot;&gt;    &lt;a href=&quot;https://lightning.ai/docs/app/stable/&quot;&gt;Read the Lightning Apps docs&lt;/a&gt;&lt;/div&gt;______________________________________________________________________## Examples###### Self-supervised Learning- [CPC transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#cpc-transforms)- [Moco v2 tranforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#moco-v2-transforms)- [SimCLR transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#simclr-transforms)###### Convolutional Architectures- [GPT-2](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#gpt-2)- [UNet](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#unet)###### Reinforcement Learning- [DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#dqn-loss)- [Double DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#double-dqn-loss)- [Per DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#per-dqn-loss)###### GANs- [Basic GAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#basic-gan)- [DCGAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#dcgan)###### Classic ML- [Logistic Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#logistic-regression)- [Linear Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#linear-regression)______________________________________________________________________## Continuous IntegrationLightning is rigorously tested across multiple CPUs, GPUs, TPUs, IPUs, and HPUs and against major Python and PyTorch versions.###### \*Codecov is &gt; 90%+ but build delays may show less&lt;details&gt;  &lt;summary&gt;Current build statuses&lt;/summary&gt;&lt;center&gt;|       System / PyTorch ver.        |                                                                                              1.11                                                                                               |                                                                                                              1.12                                                                                                               | 1.13                                                                                                                                                                                                                            | 2.0  || :--------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---- ||        Linux py3.9 \[GPUs\]        |                                                                                                -                                                                                                | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(GPUs)?branchName=refs%2Ftags%2F2.0.3&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=24&amp;branchName=master) | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(GPUs)?branchName=refs%2Ftags%2F2.0.3&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=24&amp;branchName=master) | Soon ||        Linux py3.9 \[TPUs\]        |                                                                                                -                                                                                                |                     [![Test PyTorch - TPU](https://github.com/Lightning-AI/lightning/actions/workflows/tpu-tests.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/tpu-tests.yml)                     |                                                                                                                                                                                                                                 | Soon ||        Linux py3.8 \[IPUs\]        |                                                                                                -                                                                                                |                                                                                                                -                                                                                                                | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(IPUs)?branchName=refs%2Ftags%2F2.0.3&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=25&amp;branchName=master) | Soon ||        Linux py3.8 \[HPUs\]        |                                                                                                -                                                                                                |                                                                                                                -                                                                                                                | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(HPUs)?branchName=refs%2Ftags%2F2.0.3&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=26&amp;branchName=master) | Soon ||  Linux (multiple Python versions)  | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | Soon ||   OSX (multiple Python versions)   | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | Soon || Windows (multiple Python versions) | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | Soon |&lt;/center&gt;&lt;/details&gt;______________________________________________________________________## CommunityThe lightning community is maintained by- [10+ core contributors](https://lightning.ai/docs/pytorch/latest/community/governance.html) who are all a mix of professional engineers, Research Scientists, and Ph.D. students from top AI labs.- 800+ community contributors.Want to help us build Lightning and reduce boilerplate for thousands of researchers? [Learn how to make your first contribution here](https://lightning.ai/docs/pytorch/stable/generated/CONTRIBUTING.html)Lightning is also part of the [PyTorch ecosystem](https://pytorch.org/ecosystem/) which requires projects to have solid testing, documentation and support.### Asking for helpIf you have any questions please:1. [Read the docs](https://lightning.ai/docs).1. [Search through existing Discussions](https://github.com/Lightning-AI/lightning/discussions), or [add a new question](https://github.com/Lightning-AI/lightning/discussions/new)1. [Join our discord](https://discord.com/invite/tfXFetEZxv).</longdescription>
</pkgmetadata>