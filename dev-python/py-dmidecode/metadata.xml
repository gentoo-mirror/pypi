<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># py-dmidecodeSmall tool that parses output of dmidecode command## How to use```pythonfrom dmidecode import DMIDecodeimport subprocess# create parsing instance by passing dmidecode outputdmi = DMIDecode()# some of the pre-defined queriesprint('Manufacturer:\t', dmi.manufacturer())print('Model:\t\t', dmi.model())print('Firmware:\t', dmi.firmware())print('Serial number:\t', dmi.serial_number())print('Processor type:\t', dmi.cpu_type())print('Number of CPUs:\t', dmi.cpu_num())print('Cores count:\t', dmi.total_enabled_cores())print('Total RAM:\t{} GB'.format(dmi.total_ram()))```Alternatively instead of running dmidecode locally you can use DMIParse by passing dmidecode output as an argument:```pythonfrom dmidecode import DMIParsedmi = DMIParse(raw)```Other information can be easily retrieved by analyzing dmi.data and module code.## Possible limitationsTested with dmidecode versions 2.11, 2.12 and 3.2</longdescription>
</pkgmetadata>