<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================================Welcome to python-binance v1.0.18=================================Updated 9th Aug 2023.. image:: https://img.shields.io/pypi/v/python-binance.svg    :target: https://pypi.python.org/pypi/python-binance.. image:: https://img.shields.io/pypi/l/python-binance.svg    :target: https://pypi.python.org/pypi/python-binance.. image:: https://img.shields.io/travis/sammchardy/python-binance.svg    :target: https://travis-ci.org/sammchardy/python-binance.. image:: https://img.shields.io/coveralls/sammchardy/python-binance.svg    :target: https://coveralls.io/github/sammchardy/python-binance.. image:: https://img.shields.io/pypi/wheel/python-binance.svg    :target: https://pypi.python.org/pypi/python-binance.. image:: https://img.shields.io/pypi/pyversions/python-binance.svg    :target: https://pypi.python.org/pypi/python-binanceThis is an unofficial Python wrapper for the `Binance exchange REST API v3 &lt;https://binance-docs.github.io/apidocs/spot/en&gt;`_. I am in no way affiliated with Binance, use at your own risk.If you came here looking for the `Binance exchange &lt;https://www.binance.com/?ref=10099792&gt;`_ to purchase cryptocurrencies, then `go here &lt;https://www.binance.com/?ref=10099792&gt;`_.If you want to automate interactions with Binance stick around.If you're interested in Binance's new DEX Binance Chain see my `python-binance-chain library &lt;https://github.com/sammchardy/python-binance-chain&gt;`_Source code  https://github.com/sammchardy/python-binanceDocumentation  https://python-binance.readthedocs.io/en/latest/Binance API Telegram  https://t.me/binance_api_englishBlog with examples including async  https://sammchardy.github.io- `Async basics for Binance &lt;https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html&gt;`_- `Understanding Binance Order Filters &lt;https://sammchardy.github.io/binance/2021/05/03/binance-order-filters.html&gt;`_Make sure you update often and check the `Changelog &lt;https://python-binance.readthedocs.io/en/latest/changelog.html&gt;`_ for new features and bug fixes.Features--------- Implementation of all General, Market Data and Account endpoints.- Asyncio implementation- Testnet support for Spot, Futures and Vanilla Options- Simple handling of authentication include RSA keys- No need to generate timestamps yourself, the wrapper does it for you- Response exception handling- Websocket handling with reconnection and multiplexed connections- Symbol Depth Cache- Historical Kline/Candle fetching function- Withdraw functionality- Deposit addresses- Margin Trading- Futures Trading- Vanilla Options- Support other domains (.us, .jp, etc)Upgrading to v1.0.0+--------------------The breaking changes include the migration from wapi to sapi endpoints which related to thewallet endpoints detailed in the `Binance Docs &lt;https://binance-docs.github.io/apidocs/spot/en/#wallet-endpoints&gt;`_The other breaking change is for websocket streams and the Depth Cache Manager which have beenconverted to use Asynchronous Context Managers. See examples in the Async section below or view the`websockets &lt;https://python-binance.readthedocs.io/en/latest/websockets.html&gt;`_ and`depth cache &lt;https://python-binance.readthedocs.io/en/latest/depth_cache.html&gt;`_ docs.Quick Start-----------`Register an account with Binance &lt;https://accounts.binance.com/en/register?ref=10099792&gt;`_.`Generate an API Key &lt;https://www.binance.com/en/my/settings/api-management&gt;`_ and assign relevant permissions.If you are using an exchange from the US, Japan or other TLD then make sure pass `tld='us'` when creating theclient.To use the `Spot &lt;https://testnet.binance.vision/&gt;`_ or `Vanilla Options &lt;https://testnet.binanceops.com/&gt;`_ Testnet,pass `testnet=True` when creating the client... code:: bash    pip install python-binance.. code:: python    from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager    client = Client(api_key, api_secret)    # get market depth    depth = client.get_order_book(symbol='BNBBTC')    # place a test market buy order, to place an actual order use the create_order function    order = client.create_test_order(        symbol='BNBBTC',        side=Client.SIDE_BUY,        type=Client.ORDER_TYPE_MARKET,        quantity=100)    # get all symbol prices    prices = client.get_all_tickers()    # withdraw 100 ETH    # check docs for assumptions around withdrawals    from binance.exceptions import BinanceAPIException    try:        result = client.withdraw(            asset='ETH',            address='&lt;eth_address&gt;',            amount=100)    except BinanceAPIException as e:        print(e)    else:        print(&quot;Success&quot;)    # fetch list of withdrawals    withdraws = client.get_withdraw_history()    # fetch list of ETH withdrawals    eth_withdraws = client.get_withdraw_history(coin='ETH')    # get a deposit address for BTC    address = client.get_deposit_address(coin='BTC')    # get historical kline data from any date range    # fetch 1 minute klines for the last day up until now    klines = client.get_historical_klines(&quot;BNBBTC&quot;, Client.KLINE_INTERVAL_1MINUTE, &quot;1 day ago UTC&quot;)    # fetch 30 minute klines for the last month of 2017    klines = client.get_historical_klines(&quot;ETHBTC&quot;, Client.KLINE_INTERVAL_30MINUTE, &quot;1 Dec, 2017&quot;, &quot;1 Jan, 2018&quot;)    # fetch weekly klines since it listed    klines = client.get_historical_klines(&quot;NEOBTC&quot;, Client.KLINE_INTERVAL_1WEEK, &quot;1 Jan, 2017&quot;)    # socket manager using threads    twm = ThreadedWebsocketManager()    twm.start()    # depth cache manager using threads    dcm = ThreadedDepthCacheManager()    dcm.start()    def handle_socket_message(msg):        print(f&quot;message type: {msg['e']}&quot;)        print(msg)    def handle_dcm_message(depth_cache):        print(f&quot;symbol {depth_cache.symbol}&quot;)        print(&quot;top 5 bids&quot;)        print(depth_cache.get_bids()[:5])        print(&quot;top 5 asks&quot;)        print(depth_cache.get_asks()[:5])        print(&quot;last update time {}&quot;.format(depth_cache.update_time))    twm.start_kline_socket(callback=handle_socket_message, symbol='BNBBTC')    dcm.start_depth_cache(callback=handle_dcm_message, symbol='ETHBTC')    # replace with a current options symbol    options_symbol = 'BTC-210430-36000-C'    dcm.start_options_depth_cache(callback=handle_dcm_message, symbol=options_symbol)    # join the threaded managers to the main thread    twm.join()    dcm.join()For more `check out the documentation &lt;https://python-binance.readthedocs.io/en/latest/&gt;`_.Async Example-------------Read `Async basics for Binance &lt;https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html&gt;`_for more information... code:: python    import asyncio    import json    from binance import AsyncClient, DepthCacheManager, BinanceSocketManager    async def main():        # initialise the client        client = await AsyncClient.create()        # run some simple requests        print(json.dumps(await client.get_exchange_info(), indent=2))        print(json.dumps(await client.get_symbol_ticker(symbol=&quot;BTCUSDT&quot;), indent=2))        # initialise websocket factory manager        bsm = BinanceSocketManager(client)        # create listener using async with        # this will exit and close the connection after 5 messages        async with bsm.trade_socket('ETHBTC') as ts:            for _ in range(5):                res = await ts.recv()                print(f'recv {res}')        # get historical kline data from any date range        # fetch 1 minute klines for the last day up until now        klines = client.get_historical_klines(&quot;BNBBTC&quot;, AsyncClient.KLINE_INTERVAL_1MINUTE, &quot;1 day ago UTC&quot;)        # use generator to fetch 1 minute klines for the last day up until now        async for kline in await client.get_historical_klines_generator(&quot;BNBBTC&quot;, AsyncClient.KLINE_INTERVAL_1MINUTE, &quot;1 day ago UTC&quot;):            print(kline)        # fetch 30 minute klines for the last month of 2017        klines = client.get_historical_klines(&quot;ETHBTC&quot;, Client.KLINE_INTERVAL_30MINUTE, &quot;1 Dec, 2017&quot;, &quot;1 Jan, 2018&quot;)        # fetch weekly klines since it listed        klines = client.get_historical_klines(&quot;NEOBTC&quot;, Client.KLINE_INTERVAL_1WEEK, &quot;1 Jan, 2017&quot;)        # setup an async context the Depth Cache and exit after 5 messages        async with DepthCacheManager(client, symbol='ETHBTC') as dcm_socket:            for _ in range(5):                depth_cache = await dcm_socket.recv()                print(f&quot;symbol {depth_cache.symbol} updated:{depth_cache.update_time}&quot;)                print(&quot;Top 5 asks:&quot;)                print(depth_cache.get_asks()[:5])                print(&quot;Top 5 bids:&quot;)                print(depth_cache.get_bids()[:5])        # Vanilla options Depth Cache works the same, update the symbol to a current one        options_symbol = 'BTC-210430-36000-C'        async with OptionsDepthCacheManager(client, symbol=options_symbol) as dcm_socket:            for _ in range(5):                depth_cache = await dcm_socket.recv()                count += 1                print(f&quot;symbol {depth_cache.symbol} updated:{depth_cache.update_time}&quot;)                print(&quot;Top 5 asks:&quot;)                print(depth_cache.get_asks()[:5])                print(&quot;Top 5 bids:&quot;)                print(depth_cache.get_bids()[:5])        await client.close_connection()    if __name__ == &quot;__main__&quot;:        loop = asyncio.get_event_loop()        loop.run_until_complete(main())Donate------If this library helped you out feel free to donate.- ETH: 0xD7a7fDdCfA687073d7cC93E9E51829a727f9fE70- LTC: LPC5vw9ajR1YndE1hYVeo3kJ9LdHjcRCUZ- NEO: AVJB4ZgN7VgSUtArCt94y7ZYT6d5NDfpBo- BTC: 1Dknp6L6oRZrHDECRedihPzx2sSfmvEBysOther Exchanges---------------If you use `Binance Chain &lt;https://testnet.binance.org/&gt;`_ check out my `python-binance-chain &lt;https://github.com/sammchardy/python-binance-chain&gt;`_ library.If you use `Kucoin &lt;https://www.kucoin.com/?rcode=E42cWB&gt;`_ check out my `python-kucoin &lt;https://github.com/sammchardy/python-kucoin&gt;`_ library.If you use `IDEX &lt;https://idex.market&gt;`_ check out my `python-idex &lt;https://github.com/sammchardy/python-idex&gt;`_ library... image:: https://ga-beacon.appspot.com/UA-111417213-1/github/python-binance?pixel&amp;useReferer</longdescription>
</pkgmetadata>