<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============preconditions=============``preconditions`` - A precondition decorator utility which relies on`parameter-name equivalence` for conciseness and consistency.Examples========First let's take a tour of examples. All examples assume the``preconditions`` decorator has been imported:.. code:: python   from preconditions import preconditionsBasic type checking-------------------The ``double`` `application function` requires that the ``i`` parameteris an ``int``, which is verified by a single `predicate` (the ``lambda``expression):.. code:: python   @preconditions(lambda i: isinstance(i, int))   def double(i):       return 2*iMultiple predicates-------------------Multiple predicates may be specified:.. code:: python   @preconditions(       lambda i: isinstance(i, int),       lambda i: i &gt; 0,       )   def double(i):       return 2*iNote that this is functionally equivalent to this single predicateversion:.. code:: python   @preconditions(       lambda i: isinstance(i, int) and i &gt; 0,       )   def double(i):       return 2*iThe multi-predicate version should (eventually) have more specificerror reporting for a failure, while the single predicate version maybe more efficient.Multiple arguments------------------Multiple predicates can express preconditions for multiple arguments:.. code:: python   @preconditions(       lambda s: isinstance(s, unicode),       lambda n: isinstance(n, int) and n &gt;= 0,       )   def repeat(s, n):       return s*nHowever, a *single predicate* can express preconditions for multiplearguments. This allows `relational preconditions`:.. code:: python   @preconditions(       lambda a, b: a &lt;= b       )   def strict_range(a, b):       return range(a, b)Method preconditions--------------------Predicates can be expressed for methods, including relations to``self``. For example, a ``Monotonic`` instance ensures that each call to``.set`` must pass a value larger than any previous call:.. code:: python   class Monotonic (object):       def __init__(self):           self.v = 0       @preconditions(lambda self, v: v &gt; self.v)       def set(self, v):           self.v = vPreconditions can be applied to special methods, such as ``__new__``,``__init__``, ``__call__``, etc..... code:: python   class LinearRange (tuple):       @preconditions(              lambda a: isinstance(a, float),              lambda b: isinstance(b, float),              lambda a, b: a &lt; b,              )       def __new__(cls, a, b):           return super(OrderedTuple, cls).__new__(cls, (a, b))       @preconditions(lambda w: 0 &lt;= w &lt; 1.0)       def __call__(self, w):           lo, hi = self           return w * (hi - lo) + lo       @preconditions(lambda x: self[0] &lt;= x &lt; self[1])       def invert(self, x):           lo, hi = self           return (x - lo) / (hi - lo)Concepts========An `application function` may be guarded with `preconditionpredicates`. These `predicates` are callables passed to the``preconditions`` decorator. Consider this code:.. code:: python   @preconditions(       lambda a: isinstance(a, float) and a &gt;= 0,       lambda b: isinstance(b, float) and b &gt;= 0,       )   def area(a, b):       return a*bThe application function is ``area``, and it has two predicates definedwith ``lambda``, each of which ensures one of the arguments is anon-negative float.Parameter Name Equivalence--------------------------The parameter names in a predicate must match parameter names inthe application function. This is known as `parameter name equivalence`[#]_... [#] This is a bit magical, relying on function introspection. The       design assumes the conciseness and consistency benefits outweigh       the potential confusion of &quot;magic&quot;.One exception to this rule is for default parameters withinpredicates. Default parameters may be used to associate some state atpredicate definition time. For example:.. code:: python   scores = {}   @preconditions(       lambda color, _colors=['RED', 'GREEN', 'BLUE']: color in _colors       )   def get_color_score(color):       return scores[color]This feature may be most convenient when there's a need to remember alocal loop variable... FIXME: create an example.Similar Projects================`covenant`_ - Code contracts for Python 3... _`covenant`: https://github.com/kisielk/covenant</longdescription>
</pkgmetadata>