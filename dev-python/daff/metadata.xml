<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/paulfitz/daff.svg?branch=master)](https://travis-ci.org/paulfitz/daff)[![NPM version](https://badge.fury.io/js/daff.svg)](http://badge.fury.io/js/daff)[![Gem Version](https://badge.fury.io/rb/daff.svg)](http://badge.fury.io/rb/daff)[![PyPI version](https://badge.fury.io/py/daff.svg)](http://badge.fury.io/py/daff)[![PHP version](https://badge.fury.io/ph/paulfitz%2Fdaff-php.svg)](http://badge.fury.io/ph/paulfitz%2Fdaff-php)[![Bower version](https://badge.fury.io/bo/daff.svg)](http://badge.fury.io/bo/daff)![Badge count](http://img.shields.io/:badges-7/7-33aa33.svg)daff: data diff===============This is a library for comparing tables, producing a summary of theirdifferences, and using such a summary as a patch file.  It isoptimized for comparing tables that share a common origin, in otherwords multiple versions of the &quot;same&quot; table.For a live demo, see:&gt; http://paulfitz.github.com/daff/Install the library for your favorite language:````shnpm install daff -g  # node/javascriptpip install daff     # pythongem install daff     # rubycomposer require paulfitz/daff-php  # phpinstall.packages('daff') # R wrapper by Edwin de Jongebower install daff   # web/javascript````Other translations are available here:&gt; https://github.com/paulfitz/daff/releasesOr use the library to view csv diffs on github via a chrome extension:&gt; https://github.com/theodi/csvhubThe diff format used by `daff` is specified here:&gt; http://paulfitz.github.io/daff-doc/spec.htmlThis library is a stripped down version of the coopy toolbox (seehttp://share.find.coop).  To compare tables from different origins,or with automatically generated IDs, or other complications, check outthe coopy toolbox.The program-----------You can run `daff`/`daff.py`/`daff.rb` as a utility program:````$ daffdaff can produce and apply tabular diffs.Call as:  daff a.csv b.csv  daff [--color] [--no-color] [--output OUTPUT.csv] a.csv b.csv  daff [--output OUTPUT.html] a.csv b.csv  daff [--www] a.csv b.csv  daff parent.csv a.csv b.csv  daff --input-format sqlite a.db b.db  daff patch [--inplace] a.csv patch.csv  daff merge [--inplace] parent.csv a.csv b.csv  daff trim [--output OUTPUT.csv] source.csv  daff render [--output OUTPUT.html] diff.csv  daff copy in.csv out.tsv  daff in.csv  daff git  daff versionThe --inplace option to patch and merge will result in modification of a.csv.If you need more control, here is the full list of flags:  daff diff [--output OUTPUT.csv] [--context NUM] [--all] [--act ACT] a.csv b.csv     --act ACT:     show only a certain kind of change (update, insert, delete, column)     --all:         do not prune unchanged rows or columns     --all-rows:    do not prune unchanged rows     --all-columns: do not prune unchanged columns     --color:       highlight changes with terminal colors (default in terminals)     --context NUM: show NUM rows of context (0=none)     --context-columns NUM: show NUM columns of context (0=none)     --fail-if-diff: return status is 0 if equal, 1 if different, 2 if problem     --id:          specify column to use as primary key (repeat for multi-column key)     --ignore:      specify column to ignore completely (can repeat)     --index:       include row/columns numbers from original tables     --input-format [csv|tsv|ssv|psv|json|sqlite]: set format to expect for input     --eol [crlf|lf|cr|auto]: separator between rows of csv output.     --no-color:    make sure terminal colors are not used     --ordered:     assume row order is meaningful (default for CSV)     --output-format [csv|tsv|ssv|psv|json|copy|html]: set format for output     --padding [dense|sparse|smart]: set padding method for aligning columns     --table NAME:  compare the named table, used with SQL sources. If name changes, use 'n1:n2'     --unordered:   assume row order is meaningless (default for json formats)     -w / --ignore-whitespace: ignore changes in leading/trailing whitespace     -i / --ignore-case: ignore differences in case  daff render [--output OUTPUT.html] [--css CSS.css] [--fragment] [--plain] diff.csv     --css CSS.css: generate a suitable css file to go with the html     --fragment:    generate just a html fragment rather than a page     --plain:       do not use fancy utf8 characters to make arrows prettier     --unquote:     do not quote html characters in html diffs     --www:         send output to a browser````Formats supported are CSV, TSV, Sqlite (with `--input-format sqlite` orthe `.sqlite` extension), and ndjson.Using with git--------------Run `daff git csv` to install daff as a diff and merge handlerfor `*.csv` files in your repository.  Run `daff git` for instructionson doing this manually. Your CSV diffs and merges will get smarter,since git will suddenly understand about rows and columns, not just lines:![Example CSV diff](http://paulfitz.github.io/daff-doc/images/daff_vs_diff.png)The library-----------You can use `daff` as a library from any supported language.  We takehere the example of Javascript.  To use `daff` on a webpage,first include `daff.js`:```html&lt;script src=&quot;daff.js&quot;&gt;&lt;/script&gt;```Or if using node outside the browser:```jsvar daff = require('daff');```For concreteness, assume we have two versions of a table,`data1` and `data2`:```jsvar data1 = [    ['Country','Capital'],    ['Ireland','Dublin'],    ['France','Paris'],    ['Spain','Barcelona']];var data2 = [    ['Country','Code','Capital'],    ['Ireland','ie','Dublin'],    ['France','fr','Paris'],    ['Spain','es','Madrid'],    ['Germany','de','Berlin']];```To make those tables accessible to the library, we wrap themin `daff.TableView`:```jsvar table1 = new daff.TableView(data1);var table2 = new daff.TableView(data2);```We can now compute the alignment between the rows and columnsin the two tables:```jsvar alignment = daff.compareTables(table1,table2).align();```To produce a diff from the alignment, we first need a tablefor the output:```jsvar data_diff = [];var table_diff = new daff.TableView(data_diff);```Using default options for the diff:```jsvar flags = new daff.CompareFlags();var highlighter = new daff.TableDiff(alignment,flags);highlighter.hilite(table_diff);```The diff is now in `data_diff` in highlighter format, seespecification here:&gt; http://paulfitz.github.io/daff-doc/spec.html```js[ [ '!', '', '+++', '' ],  [ '@@', 'Country', 'Code', 'Capital' ],  [ '+', 'Ireland', 'ie', 'Dublin' ],  [ '+', 'France', 'fr', 'Paris' ],  [ '-&gt;', 'Spain', 'es', 'Barcelona-&gt;Madrid' ],  [ '+++', 'Germany', 'de', 'Berlin' ] ]```For visualization, you may want to convert this to a HTML tablewith appropriate classes on cells so you can color-code inserts,deletes, updates, etc.  You can do this with:```jsvar diff2html = new daff.DiffRender();diff2html.render(table_diff);var table_diff_html = diff2html.html();```For 3-way differences (that is, comparing two tables given knowledgeof a common ancestor) use `daff.compareTables3` (give ancestortable as the first argument).Here is how to apply that difference as a patch:```jsvar patcher = new daff.HighlightPatch(table1,table_diff);patcher.apply();// table1 should now equal table2```For other languages, you should find sample code inthe packages on the [Releases](https://github.com/paulfitz/daff/releases) page.Supported languages-------------------The `daff` library is written in [Haxe](http://haxe.org/), whichcan be translated reasonably well into at least the following languages: * Javascript * Python * Java * C# * C++ * Ruby (using an [unofficial haxe target](https://github.com/paulfitz/haxe) developed for `daff`) * PHPSome translations are done for you on the[Releases](https://github.com/paulfitz/daff/releases) page.To make another translation, or to compile from sourcefirst follow the [Haxe language introduction](https://haxe.org/documentation/introduction/language-introduction.html) for thelanguage you care about.  At the time of writing, if you are on OSX, you shouldinstall haxe using `brew install haxe`.  Then do one of:```make jsmake phpmake pymake javamake csmake cpp```For each language, the `daff` library expects to be handed an interface to tables you create, rather than creating themitself.  This is to avoid inefficient copies from one format to another.  You'll find a `SimpleTable` class you can use ifyou find this awkward.Other possibilities: * There's a daff wrapper for R written by [Edwin de Jonge](https://github.com/edwindj), see https://github.com/edwindj/daff and http://cran.r-project.org/web/packages/daff * There's a hand-written ruby port by [James Smith](https://github.com/Floppy), see https://github.com/theodi/coopy-rubyAPI documentation----------------- * You can browse the `daff` classes at http://paulfitz.github.io/daff-doc/Sponsors--------&lt;img src=&quot;http://datacommons.coop/images/the_zen_of_venn.png&quot; alt=&quot;the zen of venn&quot; height=&quot;100&quot;&gt;The &lt;a href=&quot;https://datacommons.coop&quot;&gt;Data Commons Co-op&lt;/a&gt;,  &quot;perhaps the geekiest of all cooperative organizations on the planet,&quot; has given great moral support during the development of `daff`.Donate a multiple of `42.42` in your currency to let them know you care: &lt;a href=&quot;https://datacommons.coop/donate/&quot;&gt;https://datacommons.coop/donate/&lt;/a&gt;.Reading material---------------- * https://specs.frictionlessdata.io/tabular-diff : a specification of the diff format we use. * http://theodi.org/blog/csvhub-github-diffs-for-csv-files : using this library with github. * https://github.com/ropensci/unconf/issues/19 : a thread about diffing data in which daff shows up in at least four guises (see if you can spot them all). * http://theodi.org/blog/adapting-git-simple-data : using this library with gitlab. * http://okfnlabs.org/blog/2013/08/08/diffing-and-patching-data.html : a summary of where the library came from. * http://blog.okfn.org/2013/07/02/git-and-github-for-data/ : a post about storing small data in git/github. * http://blog.ouseful.info/2013/08/27/diff-or-chop-github-csv-data-files-and-openrefine/ : counterpoint - a post discussing tracked-changes rather than diffs. * http://blog.byronjsmith.com/makefile-shortcuts.html : a tutorial on using `make` for data, with daff in the mix. &quot;Since git considers changes on a per-line basis,   looking at diffs of comma-delimited and tab-delimited files can get obnoxious. The program daff fixes this problem.&quot;## Licensedaff is distributed under the MIT License.</longdescription>
</pkgmetadata>