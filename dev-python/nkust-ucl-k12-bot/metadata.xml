<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># K12# **NKUST UCL K12 ChatBot**## **簡介**NKUST UCL K12 ChatBot 是一個基於 K12 API 的 ChatBot，它能夠自動發送文字訊息、圖片、文件，接收到來自聊天室的訊息，支援消息歷史查詢。## **安裝**使用 pip 安裝：```bashpip install nkust-ucl-k12-bot```## **用法**### 一個簡單的所有範例```pythonfrom nkust_ucl.k12 import BOT as K12from nkust_ucl.k12 import MsgType, CommandHandlercustom_k12 = K12(config_file='example/config/k12.yaml')custom_k12.set_chat_bot_info(    SendUserID=&quot;1234567890987654321&quot;,    SendUserName=&quot;test_bot&quot;,    SendUserImage=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/512px-ChatGPT_logo.svg.png&quot;)@K12.on_connectdef my_custom_on_connect(self, client, userdata, flags, rc):    # ... 自定義的 on_connect 行為 ...    client.subscribe(self.client.mqttSubscribe)    print(&quot;開始訂閱&quot;)@K12.on_processed_messagedef my_custom_on_processed_message(self, chat_msg):    # ... 自定義的 on_processed 行為 ...    # 這邊就是當收到訊息要做什麼事情    # 可以調用chat_msg的屬性    # chat_msg.send_user_name: 發送者的名字    # chat_msg.send_user_id: 發送者的id    # chat_msg.send_user_image: 發送者的頭像    # chat_msg.msg_body: 訊息內容    # chat_msg.room_id: 房間id    # chat_msg.msg_type: 訊息類型    # chat_msg.timestamp: 訊息時間戳    # chat_msg.mode: 訊息模式    # chat_msg.msg_id: 訊息id    if chat_msg.send_user_id == &quot;1234567890987654321&quot;:        return    command_handler.handle_command(chat_msg)# 註冊指令command_handler = CommandHandler()def reply_chatgpt(message):    message.reply(&quot;test&quot;)command_handler.register_command(&quot;/chatgpt&quot;, MsgType.TEXT, reply_chatgpt)# run要在最後面custom_k12.run()```## v2.9.0更新* 快速回復新增了以下方法，支援本地檔案與網路檔案```pythonreply_text(msg: str)reply_image(image_path: str)reply_document(file_path: str)```usage:```python@K12.on_processed_messagedef my_custom_on_processed_message(self, chat_msg: ChatMessage):    # ... 自定義的 on_processed 行為 ...    if chat_msg.send_user_id == &quot;1234567890987654321&quot;:        return    chat_msg.reply_text(&quot;test&quot;)    chat_msg.reply_image(&quot;test.png&quot;)    chat_msg.reply_image(&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/512px-ChatGPT_logo.svg.png&quot;)    chat_msg.reply_document(&quot;test.txt&quot;)```## v2.8.3更新我們在ChatMessage的類別中新增了reply方法，可以直接回覆訊息```pythonreply(self, msg: str, msg_type: MsgType = MsgType.TEXT)``````python@K12.on_processed_messagedef my_custom_on_processed_message(self, chat_msg: ChatMessage):    # ... 自定義的 on_processed 行為 ...    if chat_msg.send_user_id == &quot;1234567890987654321&quot;:        return    chat_msg.reply(&quot;test&quot;)```### **建立CommandHandler**在CommandHandler中可以註冊指令，並且指定指令的類型，當收到指定類型的指令時，會呼叫指定的函式* register_command(command: str, msg_type: MsgType, func: Callable[[ChatMessage], None])    * command: 指令    * msg_type: 指令類型    * func: 當收到指令時要呼叫的函式```pythonfrom nkust_ucl.k12 import CommandHandlercommand_handler = CommandHandler()def reply_chatgpt(message):    message.reply(&quot;test&quot;)command_handler.register_command(&quot;/chatgpt&quot;, MsgType.TEXT, reply_chatgpt)```我們必須在on_processed_message中呼叫command_handler.handle_command來處理指令，這樣就可以在收到指令時呼叫指定的函式```python@K12.on_processed_messagedef my_custom_on_processed_message(self, chat_msg: ChatMessage):    # ... 自定義的 on_processed 行為 ...    if chat_msg.send_user_id == &quot;1234567890987654321&quot;:        return    command_handler.handle_command(chat_msg)```## v2.8.0以前### **初始化 K12 Bot**```pythonfrom nkust_ucl.k12 import BOT as K12from nkust_ucl.k12 import MsgType, CommandHandlercustom_k12 = K12(config_file='example/config/k12.yaml')custom_k12.set_chat_bot_info(    SendUserID=&quot;1234567890987654321&quot;,    SendUserName=&quot;test_bot&quot;,    SendUserImage=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/512px-ChatGPT_logo.svg.png&quot;)```### **發送文字訊息**```pythoncustom_k12.send_text(roomid=&quot;12345&quot;, text=&quot;你好！&quot;)```### **發送圖片**```python# image_path可以是網址或是本地路徑custom_k12.send_image(roomid=&quot;12345&quot;, image_path=&quot;/path/to/image.png&quot;)```### **發送文件**```# doc_path可以是網址或是本地路徑custom_k12.send_document(roomid=&quot;12345&quot;, doc_path=&quot;/path/to/document.pdf&quot;)```### **接收訊息**註冊 **`on_processed_message`** 處理方法以接收來自聊天室的訊息：```@K12.on_processed_messagedef my_custom_on_processed_message(self, chat_msg):    # ... 自定義的 on_processed 行為 ...    # ChatMsg 為訊息物件```### **自定義 on_connect 行為**```@K12.on_connectdef my_custom_on_connect(self, client, userdata, flags, rc):    # ... 自定義的 on_connect 行為 ...    # self.client.mqttSubscribe為訂閱的主題    client.subscribe(self.client.mqttSubscribe)    print(&quot;開始訂閱&quot;)```## **如何貢獻**1. Fork 專案2. 創建新的分支 (**`git checkout -b feature/fooBar`**)3. 提交你的修改 (**`git commit -am 'Add some fooBar'`**)4. 推送到分支 (**`git push origin feature/fooBar`**)5. 創建一個新的 Merge Request## **License****[MIT](https://choosealicense.com/licenses/mit/)**</longdescription>
</pkgmetadata>