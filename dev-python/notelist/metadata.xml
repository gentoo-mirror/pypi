<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NotelistNotelist is a tag based note taking REST API written in Python and based on theFlask framework.Features:- Users, notebooks and notes management- Tags assigments to notes- Notes filtering by state (active/archived) and tags- Notebooks and notes search- JWT based authentication- Main data stored in MongoDB- Temporary data stored in Redis#### Project information:- Version: 0.10.0- Author: Jose A. Jimenez (jajimenezcarm@gmail.com)- License: MIT License- Repository: https://github.com/jajimenez/notelist- Notelist CLI repository: https://github.com/jajimenez/notelist-cli## How to installYou can download and install Notelist from the **PyPI** repository with**PIP**:```bashpip install notelist```## How to runTo run Notelist, you can set the following **environment variables**:- `NL_SECRET_KEY`:&lt;br&gt;The Secret Key is used for storing session information specific to a user fromone request to the next. Its value must be a **long** and **random** sequenceof characters and must be kept **secret**.- `NL_ALLOW_ORIG` (optional):&lt;br&gt;Value of the **Access-Control-Allow-Origin** response header. The value of thisheader determines which host is allow to make requests to the API from afront-end application (from JavaScript code).&lt;br&gt;&lt;br&gt;If this API is used through a front-end application and the API and thefront-end application are in the same host, then it's not needed to set thisheader. If the API and the front-end are in different hosts, then the headermust be set to the host of the front-end application (starting with&quot;https://&quot;).&lt;br&gt;&lt;br&gt;The value `*` for the header allows a front-end from any host to make requeststo the API but this is not recommended and is not supported by all browsers.- `NL_ROOT_DOC` (optional):&lt;br&gt;If its value is `1`, the root route (`/`) returns a documentation page. If itsvalue is `0` (default), the root route returns a 404 error response.- `NL_MONGODB_URI`:&lt;br&gt;MongoDB URI (e.g. `mongodb://username:password@localhost:27017`).- `NL_MONGODB_DB`:&lt;br&gt;MongoDB database name (e.g. `notelist`).- `NL_MONGODB_US_COL`&lt;br&gt;MongoDB users collection name (e.g. `users`).- `NL_MONGODB_NB_COL`&lt;br&gt;MongoDB notebooks collection name (e.g. `notebooks`).- `NL_MONGODB_NO_COL`&lt;br&gt;MongoDB notes collection name (e.g. `notes`).- `NL_REDIS_HOST`&lt;br&gt;Redis host (e.g. `localhost`).- `NL_REDIS_PORT`&lt;br&gt;Redis port (usually `6379`).- `NL_REDIS_BL_DB`&lt;br&gt;Redis database for storing the Block List (revoked tokens) (e.g. `0`).- `NL_REDIS_PASSWORD` (optional)&lt;br&gt;Redis password.Once the environment variables are set, you have to create the MongoDB**database** and the **collections** (including their indexes) (if they don'talready exist) before running the API. You can do this by running the followingcommand:```bashnotelist db create```Note: Run `notelist db --help` to see the database commands help information.Then you can create a **user** by running the following command:```bashnotelist user create --username &lt;string&gt; --admin &lt;boolean&gt; --enabled &lt;boolean&gt; --name &lt;string&gt; --email &lt;string&gt; [--password &lt;string&gt;]```If you omit the `--password` option, the password will be prompted and hidden.- Example for an administrator user:&lt;br&gt;  `notelist user create --username example1 --admin y --enabled y`- Example for a regular user:&lt;br&gt;  `notelist user create --username example2 --enabled y`Note: Run `notelist user --help` to see the user commands help information.To run Notelist on a local **development** server (not for a productionenvironment), run:```bashnotelist run```Alternatively, if you want to run the API from the source code, withoutinstalling it, go to the `src` directory and run:```bashpython -m notelist```To run Notelist in a **production** environment, you should do it through a**WSGI** server (e.g. Gunicorn). You can install **Gunicorn** through the`requirements_pro.txt` file by running the following command from the projectdirectory:```bashpip install -r requirements_pro.txt```Once you have both Notelist and Gunicorn installed, you can run Notelistthrough Gunicorn by running the following command (in this example we set 1worker process listening to connections from outside our computer on port5000):```bashgunicorn -b 0.0.0.0:5000 notelist:app```## How to run with DockerYou can run a Docker container with Notelist. For example, the followingcommand downloads the Docker image from the Docker Hub repository and runs acontainer from the image connecting to a MongoDB and a Redis local servers:```bashdocker container run --name notelist-api -d -p 5000:5000 \-e NL_SECRET_KEY=long_random_string \-e NL_ROOT_DOC=1 \-e NL_MONGODB_URI=mongodb://root:example@localhost:27017 \-e NL_MONGODB_DB=notelist \-e NL_MONGODB_US_COL=users \-e NL_MONGODB_NB_COL=notebooks \-e NL_MONGODB_NO_COL=notes \-e NL_REDIS_HOST=localhost \-e NL_REDIS_PORT=6379 \-e NL_REDIS_BL_DB=0 \-e NL_REDIS_PASSWORD=example2jajim/notelist:0.10.0```Where `NL_SECRET_KEY` must be a long random sequence of characters and must bekept secret.Once the container is running, you have to create the MongoDB database(including its collections and indexes) and a user. For example:```bashdocker container exec -it notelist-api notelist db createdocker container exec -it notelist-api notelist user create --username admin --admin y --enabled y```## How to run with Docker ComposeYou can run Notelist, MongoDB, Redis and Nginx with **Docker Compose**. In the`docker-compose` directory you can find a Docker Compose file as an example.Go to the `docker-compose` directory and change the value of `NL_SECRET_KEY` inthe `docker-compose.yml` file to a long random sequence of characters and keepit secret.Run the following command from the `docker-compose` directory:```bashdocker compose up -d```## How to buildYou can generate the **built package** and the **source archive** files todistribute and install the project. To generate the built package, you need toinstall the ***wheel*** Python package, which you can do through the`requirements_dev.txt` file by running the following command from the projectdirectory:```bashpip install -r requirements_dev.txt```Then, run the following command, also from the project directory, to generateboth packages:```bashpython setup.py bdist_wheel sdist```A `dist` directory will be generated containing the packages.## How to run the unit testsTo run the unit tests, you need to install all the Python packages listed inthe `requirements.txt` file and the `mongomock` package. If you didn't installthem yet, you can do it through the `requirements.txt` and the`requirements_dev.txt` files by running the following commands from the projectdirectory:```bashpip install -r requirements.txtpip install -r requirements_dev.txt```Then, run the following command, also from the project directory:```bashpython -m unittest discover test```## How to deploy in Amazon Web Services (AWS)See the `doc/aws.md` file for instructions on how to deploy Notelist in AWS.## DocumentationYou can find the documentation of all the operations of the API by running theAPI with the  `NL_ROOT_DOC` environment variable set to `1` and navigating tothe root route (`/`) in a browser.## Request examplesThe following are some examples of requests to the Notelist API with the `curl`command assuming that the API is running on our local computer and listening onport 5000.Log in:```bashcurl -X 'POST' 'http://localhost:5000/auth/login' \-H 'Accept: application/json' \-H 'Content-Type: application/json' \-d '{&quot;username&quot;: &quot;&lt;username&gt;&quot;, &quot;password&quot;: &quot;&lt;password&gt;&quot;}'```Create a notebook:```bashcurl -X 'POST' 'http://localhost:5000/notebooks/notebook' \-H 'Accept: application/json' \-H 'Content-Type: application/json' \-H 'Authorization: Bearer &lt;access_token&gt;' \-d '{&quot;name&quot;: &quot;Example Notebook&quot;}'```Create a note:```bashcurl -X 'POST' 'http://localhost:5000/notes/note' \-H 'Accept: application/json' \-H 'Content-Type: application/json' \-H 'Authorization: Bearer &lt;access_token&gt;' \-d '{&quot;notebook_id&quot;: &quot;&lt;notebook_id&gt;&quot;, &quot;archived&quot;: false, &quot;title&quot;: &quot;Example Note&quot;, &quot;body&quot;: &quot;This is a test note&quot;, tags: [&quot;tag_name_1&quot;, &quot;tag_name_2&quot;]}'```Get the notes of a notebook by a filter:```bashcurl -X 'POST' 'http://localhost:5000/notes/notes/&lt;notebook_id&gt;' \-H 'Accept: application/json' \-H 'Content-Type: application/json' \-H 'Authorization: Bearer &lt;access_token&gt;' \-d '{&quot;archived&quot;: false, &quot;tags&quot;: [&quot;tag_name_1&quot;, &quot;tag_name_2&quot;]}'```Search for notebooks and notes that match a given text:```bashcurl -X 'GET' 'http://localhost:5000/search/&lt;search&gt;' \-H 'Accept: application/json' \-H 'Content-Type: application/json' \-H 'Authorization: Bearer &lt;access_token&gt;'```Log out:```bashcurl -X 'GET' 'http://localhost:5000/auth/logout' \-H 'Accept: application/json' \-H 'Content-Type: application/json' \-H 'Authorization: Bearer &lt;access_token&gt;'```</longdescription>
</pkgmetadata>