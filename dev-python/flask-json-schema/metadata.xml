<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask-json-schemaThis extension makes it easy to validate JSON data that is sent to your Flask app using the jsonschema spec## SetupFlask-json-schema is available on PyPI and can be installed with    pip install flask-json-schemaThe extension can either be initialized directly:```pythonfrom flask import Flaskfrom flask_json_schema import JsonSchemaapp = Flask(__name__)schema = JsonSchema(app)```Or through the factory method:```pythonschema = JsonSchema()app = Flask(__name__)schema.init_app(app)```## Quick example```pythonfrom flask_json_schema import JsonSchema, JsonValidationErrorfrom flask import Flask, jsonify, requestapp = Flask(__name__)schema = JsonSchema(app)todo_schema = {    'required': ['todo'],    'properties': {        'todo': { 'type': 'string' },        'priority': { 'type': 'integer' },    }}todos = []@app.errorhandler(JsonValidationError)def validation_error(e):    return jsonify({ 'error': e.message, 'errors': [validation_error.message for validation_error  in e.errors]})@app.route('/todo', methods=['GET', 'POST'])@schema.validate(todo_schema)def create_message():    if request.method == 'POST':        todos.append( request.get_json() )        return jsonify({ 'success': True, 'message': 'Created todo' })    return jsonify(todos)app.run('0.0.0.0', 5000, debug=True)```See `example.py` for the source code## Links* [Source Code](https://github.com/sanjeevan/flask-json-schema)* [Issues](https://github.com/sanjeevan/flask-json-schema/issues)</longdescription>
</pkgmetadata>