<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>psq - Cloud Pub/Sub Task Queue for Python.==========================================|Build Status| |Coverage Status| |PyPI Version|.. Note:: this is not an official Google product, experimental or otherwise and  is provided without support. It is intended as a sample library for  demonstrating a set of use cases for Google Cloud Pub/Sub. The official  Pub/Sub client library should be used for production applications.``psq`` is an example Python implementation of a simple distributed taskqueue using `Google Cloud Pub/Sub &lt;https://cloud.google.com/pubsub/&gt;`__.``psq`` requires minimal configuration and relies on Cloud Pub/Sub toprovide scalable and reliable messaging.``psq`` is intentionally similar to `rq &lt;http://python-rq.org/&gt;`__ and`simpleq &lt;https://github.com/rdegges/simpleq&gt;`__, and takes someinspiration from `celery &lt;http://www.celeryproject.org/&gt;`__ and `thisblogpost &lt;http://jeffknupp.com/blog/2014/02/11/a-celerylike-python-task-queue-in-55-lines-of-code/&gt;`__.Installation------------Install via `pip &lt;https://pypi.python.org/pypi/pip&gt;`__:::    pip install psqPrerequisites--------------  A project on the `Google Developers   Console &lt;https://console.developers.google.com&gt;`__.-  The `Google Cloud SDK &lt;https://cloud.google.com/sdk&gt;`__ installed   locally.-  You will need the `Cloud Pub/Sub API   enabled &lt;https://console.developers.google.com/flows/enableapi?apiid=datastore,pubsub&gt;`__   on your project. The link will walk you through enabling the API.-  You will need to run ``gcloud auth`` before running these examples so   that authentication to Google Cloud Platform services is handled   transparently.Usage-----First, create a task:.. code:: python    def adder(a, b):        return a + bThen, create a pubsub client and a queue:.. code:: python    from google.cloud import pubsub_v1    import psq    project = 'your-project-id'    publisher = pubsub_v1.PublisherClient()    subscriber = pubsub_v1.SubscriberClient()    q = psq.Queue(publisher, subscriber, project)Now you can enqueue tasks:.. code:: python    from tasks import adder    q.enqueue(adder)In order to get task results, you have to configure storage:.. code:: python    from google.cloud import pubsub_v1    from google.cloud import datastore    import psq    project = 'your-project-id'    publisher = pubsub_v1.PublisherClient()    subscriber = pubsub_v1.SubscriberClient()    ds_client = datastore.Client()    q = psq.Queue(        publisher, subscriber, project,        storage=psq.DatastoreStorage(ds_client))With storage configured, you can get the result of a task:.. code:: python    r = q.enqueue(adder, 5, 6)    r.result() # -&gt; 11You can also define multiple queues:.. code:: python    fast = psq.Queue(publisher, subscriber, project, 'fast')    slow = psq.Queue(publisher, subscriber, project, 'slow')Things to note--------------Because ``psq`` is largely similar to ``rq``, similar rules around tasksapply. You can put any Python function call on a queue, provided:-  The function is importable by the worker. This means the   ``__module__`` that the function lives in must be importable.   Notably, you can't enqueue functions that are declared in the   **main** module - such as tasks defined in a file that is run   directly with ``python`` or via the interactive interpreter.-  The function can be a string, but it must be the absolutely importable path   to a function that the worker can import. Otherwise, the task will fail.-  The worker and the applications queuing tasks must share exactly the   same source code.-  The function can't depend on global context such as global variables,   current\_request, etc. Pass any needed context into the worker at   queue time.Delivery guarantees~~~~~~~~~~~~~~~~~~~Pub/sub guarantees your tasks will be delivered to the workers, but``psq`` doesn't presently guarantee that a task completes execution orexactly-once semantics, though it does allow you to provide your ownmechanisms for this. This is similar to Celery's`default &lt;http://celery.readthedocs.org/en/latest/faq.html#faq-acks-late-vs-retry&gt;`__configuration.Task completion guarantees can be provided via late ack support. Lateack is possible with Cloud Pub/sub, but it currently not implemented inthis library. See `CONTRIBUTING.md`_.There are many approaches for exactly-once semantics, such asdistributed locks. This is possible in systems such as`zookeeper &lt;http://zookeeper.apache.org/doc/r3.1.2/recipes.html#sc_recipes_Locks&gt;`__and `redis &lt;http://redis.io/topics/distlock&gt;`__.Running a worker----------------Execute ``psqworker`` in the *same directory where you tasks aredefined*:::    psqworker.py config.q``psqworker`` only operates on one queue at a time. If you want a serverto listen to multiple queues, use something like`supervisord &lt;http://supervisord.org/&gt;`__ to run multiple ``psqworker``processes.Broadcast queues----------------A normal queue will send a single task to a single worker, spreadingyour tasks over all workers listening to the same queue. There are alsobroadcast queues, which will deliver a copy of the task to *every*worker. This is useful in situations where you want every worker toexecute the same task, such as installing or upgrading software on everyserver... code:: python    broadcast_q = psq.BroadcastQueue(publisher, subscriber, project)    def restart_apache_task():        call([&quot;apachectl&quot;, &quot;restart&quot;])    broadcast_q.enqueue(restart_apache_task)Broadcast queues provide an implementation of the solution described in`Reliable Task Scheduling on Google ComputeEngine &lt;https://cloud.google.com/solutions/reliable-task-scheduling-compute-engine&gt;`__.*Note*: broadcast queues do not currently support any form of storageand do not support return values.Retries-------Raising ``psq.Retry`` in your task will cause it to be retried... code:: python    from psq import Retry    def retry_if_fail(self):        try:            r = requests.get('http://some.flaky.service.com')        except Exception as e:            logging.error(e)            raise Retry()Flask &amp; other contexts----------------------You can bind an extra context manager to the queue... code:: python    app = Flask(__name__)    q = psq.Queue(extra_context=app.app_context)This will ensure that the context is available in your tasks, which isuseful for things such as database connections, etc.:.. code:: python    from flask import current_app    def flasky_task():        backend = current_app.config['BACKEND']Bypassing workers for testing-----------------------------During unit tests you most certainly don't want to spin up workers, but insteadexecute the enqueued functions immediately and synchronously. To do this, pass`asynchronous=False` to the Queue's constructor (default is True). Also, you don't haveto provide a publisher, subscriber or project arguments in this case,just pass None for all them to the queue... code:: python    q = psq.Queue(None, None, project=None, asynchronous=False)    r = q.enqueue(adder, 1, 2) # Will be run immediatelyIdeas for improvements-----------------------  some sort of storage solution for broadcast queues.-  Memcache/redis value store.-  @task decorator that adds a delay/defer function.-  Task chaining / groups / chords.-  Late ack.-  Gevent worker.-  batch support for queueing.Contributing changes---------------------  See `CONTRIBUTING.md`_Licensing---------- Apache 2.0 - See `LICENSE`_.. _LICENSE: https://github.com/GoogleCloudPlatform/psq/blob/master/LICENSE.. _CONTRIBUTING.md: https://github.com/GoogleCloudPlatform/psq/blob/master/CONTRIBUTING.md.. |Build Status| image:: https://travis-ci.org/GoogleCloudPlatform/psq.svg   :target: https://travis-ci.org/GoogleCloudPlatform/psq.. |Coverage Status| image:: https://coveralls.io/repos/GoogleCloudPlatform/psq/badge.svg?branch=master&amp;service=github   :target: https://coveralls.io/github/GoogleCloudPlatform/psq?branch=master.. |PyPI Version| image:: https://img.shields.io/pypi/v/psq.svg   :target: https://pypi.python.org/pypi/psq</longdescription>
</pkgmetadata>