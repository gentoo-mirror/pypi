<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gvsbuild![CI](https://github.com/wingtk/gvsbuild/workflows/CI/badge.svg)This python script helps you build a full [GTK](https://www.gtk.org/) librarystack for Windows using Visual Studio. Currently, GTK 3 and GTK 4 are supported.The script supports multiple versions of Visual Studio - at the moment we arefocusing on VS 2022, but we include projects for other versions, and we gladlyaccept patches.The script focuses on GTK and the surrounding ecosystem (e.g. GStreamer).However, we are open to adding more libraries as long as the contributor takeson the responsibility for keeping it up to date. The supported projects aremodules in the[projects](https://github.com/wingtk/gvsbuild/blob/master/gvsbuild/projects)directory.The script requires a working installation of [Visual Studio for WindowsDesktop](http://www.visualstudio.com), [Python 3](https://www.python.org) and[msys2](https://msys2.github.io). The script will download any additional toolsrequired to build the libraries and will use them from a local directory,without any installation. As of today these tools include cmake, meson, ninja,nuget and perl.The script fetches source tarballs for the projects from their originallocations, however in some cases it might be necessary to host a patched tarballon GitHub. To ensure integrity of the downloaded files, the script checks theSHA256 hash of each download. Downloads are done using TLS, using SSLcertificates provided by the system, but in case of error the download is triedagain ignoring certificate errors.## Development Environment### ChocoWe recommend using [Chocolately](https://chocolatey.org/) as a package managerin Windows.To install it, open PowerShell as an administrator, then execute:```PowerShellSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))```To run local scripts in follow-on steps, also execute`Set-ExecutionPolicy RemoteSigned`. This allows for local PowerShell scriptsto run without signing, but still requires signing for remote scripts.### GitTo setup a development environment in Windows install[Git](https://gitforwindows.org) by executing as an administrator:```PowerShellchoco install git```### MSYS2Both of the development environments in the next steps need MSYS2 installed.Install [MSYS2](http://www.msys2.org/):Keep PowerShell open as administrator and execute:```PowerShellchoco install msys2```### Building GTKFirst we will install the gvsbuild dependencies:1. Visual C++ build tools workload for Visual Studio 2022 Build Tools2. Python#### Install Visual Studio 2022With your admin PowerShell terminal:```PowerShellchoco install visualstudio2022-workload-vctools```Note: Visual Studio versions 2013 (not for all projects), 2015, 2017, 2019, and 2022 are currently supported.#### Install the Latest PythonDownload and install the latest version of Python:1. Install from Chocolately with `choco install python` with admin PowerShell1. Restart your PowerShell terminal as a normal user and check that `python --version` is correct.Note: If you are going to install Python using an alternative means, like theofficial Windows installers, we suggest to install Python in C:\Python3x, forexample C:\Python310. Other Python distributions like [Miniconda3](https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe)should also work.#### Install gvsbuildThe recommended way to install gvsbuild is with pipx. Open a new regular userPowerShell terminal and execute:```PowerShellpython -m pip install --user pipxpython -m pipx ensurepathpipx install gvsbuild```Alternatively, you can also use git to clone the repository and install it.Open a new regular user PowerShell terminal and execute:```PowerShellmkdir C:\gtk-build\githubcd C:\gtk-build\githubgit clone https://github.com/wingtk/gvsbuild.gitcd C:\gtk-build\github\gvsbuildpython -m venv .venv.\.venv\Scripts\activate.ps1pip install .```#### Build GTKIn the same PowerShell terminal, execute:```PowerShellgvsbuild build gtk3```Alternatively, if you want to build GTK 4, execute:```PowerShellgvsbuild build gtk4```Grab a coffee, the build will take a few minutes to complete.#### Add GTK to Your Environmental Variables```PowerShell$env:Path = &quot;C:\gtk-build\gtk\x64\release\bin;&quot; + $env:Path$env:LIB = &quot;C:\gtk-build\gtk\x64\release\lib;&quot; + $env:LIB$env:INCLUDE = &quot;C:\gtk-build\gtk\x64\release\include;C:\gtk-build\gtk\x64\release\include\cairo;C:\gtk-build\gtk\x64\release\include\glib-2.0;C:\gtk-build\gtk\x64\release\include\gobject-introspection-1.0;C:\gtk-build\gtk\x64\release\lib\glib-2.0\include;&quot; + $env:INCLUDE```#### Use PyGObjectAdd the `--enable-gi` and `--py-wheel` options like:```PowerShellgvsbuild build --enable-gi --py-wheel gtk4 pygobject```Once that finishes, then you need to use the gvsbuild generated wheels with your[Python virtualenv](https://docs.python.org/3/tutorial/venv.html) in order towork around this [PyGObjectbug](https://gitlab.gnome.org/GNOME/pygobject/-/issues/545):```PowerShellpip install --force-reinstall (Resolve-Path C:\gtk-build\build\x64\release\pygobject\dist\PyGObject*.whl)pip install --force-reinstall (Resolve-Path C:\gtk-build\build\x64\release\pycairo\dist\pycairo*.whl)```#### Other Options For more information about the possible commands run: ``` gvsbuild --help ``` To get detailed help on the build command run: ``` gvsbuild build --help ``` It is possible to set some parameters from a file, e.g. vs2015-release.pro, putting the @ character before the file name. The file contains the option, one per line, separated by a carriage return: ``` --vs-ver 14 --win-sdk 8.1 --configuration release ``` Even if the format is not the easier to write or read in this way we eliminate the problem of escaping spaces is file names and directories. Then you can use it: ``` gvsbuild build @vs2015-release.pro gtk3-full ```## Troubleshooting- If a build fails, try rebuilding it with `--clean`, if that fails, tryrebuilding it with `--from-scratch`- If the download of a tarball fails a partial file will not pass the hash check,delete the file and try again.## OpenSSLIn addition to the setup instructions above, to build OpenSSL you also need theVisual C++ 2013 Redistributable Package installed. To install it, open PowerShellas administrator and execute:```PowerShellchoco install vcredist2013```Similar to other packages, you can build OpenSSL by executing:```gvsbuild build openssl```## Dependency GraphTo see and analyze the dependency between the various projects, in text or in aGraphviz format, use the script deps.py: ```gvsbuild deps --graph --gv-file test.gv ```Without option a simple dependency of all the projects is printed, as usual with--help a summary of the options/commands is printed.## LicenseThis build script is licensed under the GPL2.0 license, see the COPYING file forthe full text.The binaries produced by the build script are licensed under the license termsof the project that is built (ie glib is LGPL so you can use glib.dll builtwith this script under the terms of LGPL).Patches included in the repository are licensed under the license terms of theproject they apply to.## CreditsThis tool originated from a gtk-win32 PowerShell script created by the[HexChat](https://hexchat.github.io/) developers for building it for Windows.Although this project is now archived, you can explore the original project if youare interested in the history at https://github.com/hexchat/gtk-win32.Compiling the GTK stack on MSVC would not be possible without the incrediblework by [Fan Chun-wei](https://github.com/fanc999). If you are interested in moredetails of how this works, please see [Compiling the GTK+ (and Clutter) stack usingVisual C++ 2008 andlater](https://wiki.gnome.org/Projects/GTK/Win32/MSVCCompilationOfGTKStack).</longdescription>
</pkgmetadata>