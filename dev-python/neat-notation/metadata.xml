<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Neat Object Notation 0.6.16```pip install neat-notation``` To load your .neat file into python, call `neat_notation.load(filename:str)`.  It will return a dictionary/list containing the content of your file. A smart, modular and readable configuration file format for complex multifile solutions.## Comments```| Any lines which are to be commented out must start with a pipe character.| The pipe must ALWAYS be at the beginning of the line for comments.```## Global Scope By default the global scope of a Neat config file is a dictionary, if you wish to specify otherwise you must put this somewhere in your .neat file on its own line```~list```## Labeled Structures```[This is where you write the key associated with your dictionary]&quot;This is a key to an inline dictionary&quot;:{&quot;This is the key to an inline list&quot;:()}| This [-] token denotes the end of a dictionary.[-]&lt;This is where you write the key associated with your list&gt;|The line below is the 0th index of this labeled list and is a list with a single item,|That single item is an empty dictionary({})| This &lt;-&gt; token denotes the end of a list.&lt;-&gt;```## Unlabeled StructuresIf you wish to create an unlabeled structure vertically you can do so like this:```~list{&quot;Some key&quot;:29873198273}```Another example:```&lt;section name&gt;{[inner section name]&quot;some key&quot;: True[-]&quot;another key&quot;: &quot;abc&quot;}&lt;-&gt;```## ModulesImporting only specific sections of a module:```| This file is called filename.neat&lt;section name&gt;{[inner section name]&quot;some key&quot;: True[-]&quot;another key&quot;: &quot;abc&quot;}&lt;-&gt;``````|this is where we are importing the modulemod filename : 'section name'.0.'inner section name'| Alternate syntax* foldername.filename : 'section name'.0.'inner section name'```Importing a whole module:```|this file is called module.neat[section]1:&quot;abc&quot;[-]``````| This is where we import module.neatmod module[another section]&quot;def&quot;:2[-]| Result:| {&quot;module&quot;:{&quot;section&quot;:{&quot;1&quot;:&quot;abc&quot;}},&quot;another section&quot;:{&quot;def&quot;:2}}```## AliasAliases can be used to add items to sections outside of that section and its parent.The left hand side of the : is the alias name.  The right hand side of the : is the alias path.```&lt;section name&gt;{[inner section name]&quot;some key&quot;: True[-]&quot;another key&quot;: &quot;abc&quot;}&lt;-&gt;| this is the alias declarationalias alias_name : [section name] 0 [inner section name]| the name of the alias, in this case alias_name, marks the start of an alias section.alias_name&quot;some other key&quot;: false| The /-/ token marks the end of an alias section/-/| Result:| {&quot;section name&quot;:[{&quot;inner section name&quot;:{&quot;some key&quot;:True,&quot;some other key&quot;:False},&quot;another key&quot;:&quot;abc&quot;}]}```## Environment VariablesEnvironment variables can be used in strings and section keys.```| For this example lets say ENVIRONMENT_VARIABLE_NAME = &quot;3&quot;[:{ENVIRONMENT_VARIABLE_NAME}:]&quot;:{ENVIRONMENT_VARIABLE_NAME}:&quot; : &quot;this is ENVIRONMENT_VARIABLE_NAME's value -&gt; :{ENVIRONMENT_VARIABLE_NAME}:&quot;[-]| output:| {'3': {'3': 'This is ENVIRONMENT_VARIABLE_NAME's value -&gt; 3'}}```To denote an environment variable wrap the variable name in `:{` and `}:` it works the same way as an f-string in python.## Auto-IncrementWhen inside a dictionary you can prefix values with `- value` to autoincrement their key as an integer from the last integer key you set. For example:```[section]- &quot;foo&quot;- &quot;bar&quot;- 1237: true- 0.1- -22.2- -12[-]| output:| {&quot;section&quot;:{0: &quot;foo&quot;, 1: &quot;bar&quot;, 2: 123, 7: True, 8: 0.1, 9: -22.2, 10: -12}}```## Escape CharacterEscape characters can be used to use syntax characters inside of their syntaxes or to use the combination of characters that creates a token such as the environment variable wrapping token as their literal characters, like so:```[section\] key\]]&quot;\:{this is my key\}:&quot; : 123[-]| output:| {'section] key]': {':{this is my key}:': 123}}```</longdescription>
</pkgmetadata>