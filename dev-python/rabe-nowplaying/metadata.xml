<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Radio Bern Now PlayingThis repo contains the tool we use to grab, aggregate and publish show, artist and track metadata from various sources.The nowplaying project grabs info from RaBes playout solution and publishes them to broadcast vectors like DAB+ and Webstreams.It also takes care of generating our live ticker at songticker.rabe.ch.## OverviewThe nowplaying daemon takes various sources into account:- The RaBe playout solution (via the [virtual-saemubox](https://github.com/radiorabe/virtual-saemubox) project)- Input from [Klangbecken](https://github.com/radiorabe/klangbecken)It then make an informed decision as to what should be our leading PAD data and pushes this to it's track handlers for the following sinks:- DAB+ (via the [ODR-EncoderManager](https://github.com/Opendigitalradio/ODR-EncoderManager) API)- Webstream by pushing to our [Icecast](https://icecast.org/) instances- Statically hosted XML output for browsers on songticker.rabe.chThe sources are currently individually implemented and are being replaced with generic [RaBe CloudEvents](https://github.com/radiorabe/event-spec) based sources. In many places the legacy system is underdocumented and this documentation documents the new system.## UsageTBD### RaBe CloudEventsThe nowplaying projects receives httpd [RaBe CloudEvents](https://github.com/radiorabe/event-spec) on a dedicated web service. It reacts to them depending on the event type and sourceIt supports the following event types:- `ch.rabe.api.events.track.v1.trackStarted`- `ch.rabe.api.events.track.v1.trackFinished`An example `trackStarted` event looks like this:```json{  &quot;specversion&quot;: &quot;1.0&quot;,  &quot;type&quot;: &quot;ch.rabe.api.events.track.v1.trackStarted&quot;,  &quot;source&quot;: &quot;&lt;source&gt;&quot;,  &quot;subject&quot;: null,  &quot;id&quot;: &quot;&lt;id&gt;&quot;,  &quot;time&quot;: &quot;2021-12-28T19:31:00Z&quot;,  &quot;datacontenttype&quot;: &quot;application/json&quot;,  &quot;data&quot;: {    &quot;item.artist&quot;: &quot;hairmare fusion sounds collective&quot;,    &quot;item.title&quot;: &quot;C L O U D E V E N T W A V E&quot;,    &quot;item.length&quot;: 36000  }}```It can be sent to the nowplaying service using cURL as follows:```bashcurl -vvv -u rabe:rabe -H 'Content-Type: application/cloudevents+json' -X POST -d '@event.json'  localhost:8080/webhook```In most cases the use of a cloudevents-sdk is recommended. The following example is based on the same [python-sdk](https://github.com/cloudevents/sdk-python) nowplaying uses.```pythonimport requestsfrom cloudevents.http import CloudEvent, to_structureddef send_event(url, username, password):    # This data defines a cloudevent    attributes = {        &quot;specversion&quot;: &quot;1.0&quot;,        # as defined by the events-spec repo        &quot;type&quot;: &quot;ch.rabe.api.events.track.v1.trackStarted&quot;,        # for klangbecken the github link is always used as source (as per events-spec)        &quot;source&quot;: &quot;https://github.com/radiorabe/klangbecken&quot;,        # this should be generated and could/should point to a real        # URL on either https://klangbecken.service.int.example.org        # using a `crid://` URL based on the upcoming crid-spec.        &quot;id&quot;: &quot;uri:demo:12345&quot;,    }    data = {        &quot;item.title&quot;: &quot;Track Title&quot;,        &quot;item.artist&quot;: &quot;Artist&quot;,        # length in seconds, optional if you also implement sending the        # not &quot;completely specced yet&quot; trackFinished event        &quot;item.length&quot;: 60,    }    event = CloudEvent(attributes, data)    headers, body = to_structured(event)    # send and print event    requests.post(url, headers=headers, data=body, auth=(username, password))    print(f&quot;Sent {event['id']} from {event['source']} with {event.data}&quot;)if __name__ == &quot;__main__&quot;:    # local config    url = &quot;https://nowplaying.service.int.example.org/webhook&quot;    username = &quot;rabe&quot;    password = &quot;rabe&quot;    # do work    send_event(url, username, password)```## Contributing### pre-commit hook```bashpip install pre-commitpip install -r requirements-dev.txt -Upre-commit install```### testing```bashpytest```## Release ManagementThe CI/CD setup uses semantic commit messages following the [conventional commits standard](https://www.conventionalcommits.org/en/v1.0.0/).There is a GitHub Action in [.github/workflows/semantic-release.yaml](./.github/workflows/semantic-release.yaml)that uses [go-semantic-commit](https://go-semantic-release.xyz/) to create newreleases.The commit message should be structured as follows:```&lt;type&gt;[optional scope]: &lt;description&gt;[optional body][optional footer(s)]```The commit contains the following structural elements, to communicate intent to the consumers of your library:1. **fix:** a commit of the type `fix` patches gets released with a PATCH version bump1. **feat:** a commit of the type `feat` gets released as a MINOR version bump1. **BREAKING CHANGE:** a commit that has a footer `BREAKING CHANGE:` gets released as a MAJOR version bump1. types other than `fix:` and `feat:` are allowed and don't trigger a releaseIf a commit does not contain a conventional commit style message you can fixit during the squash and merge operation on the PR.Once a commit has landed on the `main` branch a release will be created and automatically published to [pypi](https://pypi.org/)using the GitHub Action in [.github/workflows/pypi.yaml](./.github/workflows/pypi.yaml) which uses [twine](https://twine.readthedocs.io/)to publish the package to pypi. Additionaly a container image based on the [RaBe Python Minimal Base Image](https://github.com/radiorabe/container-image-python-minimal) is built and published using [Docker build-push Action](https://github.com/docker/build-push-action).This is managed in [.github/workflows/release.yaml](./.github/workflows/release.yaml).## LicenseThis application is free software: you can redistribute it and/or modify it underthe terms of the GNU Affero General Public License as published by the FreeSoftware Foundation, version 3 of the License.## CopyrightCopyright (c) 2022 [Radio Bern RaBe](http://www.rabe.ch)</longdescription>
</pkgmetadata>