<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Coverage Status](https://coveralls.io/repos/github/zincware/ZnInit/badge.svg?branch=main)](https://coveralls.io/github/zincware/ZnInit?branch=main)![PyTest](https://github.com/zincware/ZnInit/actions/workflows/pytest.yaml/badge.svg)[![PyPI version](https://badge.fury.io/py/zninit.svg)](https://badge.fury.io/py/zninit)[![code-style](https://img.shields.io/badge/code%20style-black-black)](https://github.com/psf/black/)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/zincware/ZnInit/HEAD)[![zincware](https://img.shields.io/badge/Powered%20by-zincware-darkcyan)](https://github.com/zincware)# ZnInit - Automatic Generation of ``__init__`` based on DescriptorsThis package provides a base class for ``dataclass`` like structures with the addition of using [Descriptors](https://docs.python.org/3/howto/descriptor.html).The main functionality is the automatic generation of an keyword-only``__init__`` based on selected descriptors.The descriptors can e.g. overwrite ``__set__`` or ``__get__`` or have custom metadata associated with them.The ``ZnInit`` package is used by [ZnTrack](https://github.com/zincware/ZnTrack) to enable lazy loading data from files as well as distinguishing between different types of descriptors such as `zn.params` or `zn.outputs`. An example can be found in the `examples` directory.# ExampleThe most simple use case is a replication of a dataclass like structure.```pythonfrom zninit import ZnInit, Descriptorclass Human(ZnInit):    name: str = Descriptor()    language: str = Descriptor(&quot;EN&quot;)# This will generate the following init:def __init__(self, *, name, language=&quot;EN&quot;):    self.name = name    self.language = languagefabian = Human(name=&quot;Fabian&quot;)# orfabian = Human(name=&quot;Fabian&quot;, language=&quot;DE&quot;)```The benefit of using ``ZnInit`` comes with using descriptors. You can subclass the `zninit.Descriptor` class and only add certain kwargs to the `__init__` defined in `init_descriptors: list`. Furthermore, a `post_init` method is available to run code immediately after initializing the class.````pythonfrom zninit import ZnInit, Descriptorclass Input(Descriptor):    &quot;&quot;&quot;A Parameter&quot;&quot;&quot;class Metric(Descriptor):    &quot;&quot;&quot;An Output&quot;&quot;&quot;class Human(ZnInit):    _init_descriptors_ = [Input] # only add Input descriptors to the __init__    name: str = Input()    language: str = Input(&quot;DE&quot;)    date: str = Metric()  # will not appear in the __init__    def _post_init_(self):        self.date = &quot;2022-09-16&quot;julian = Human(name=&quot;Julian&quot;)print(julian) # Human(language='DE', name='Julian')print(julian.date)  # 2022-09-16print(Input.get_dict(julian)) # {&quot;name&quot;: &quot;Julian&quot;, &quot;language&quot;: &quot;DE&quot;}````One benefit of ``ZnInit`` is that it also allows for inheritance.````pythonfrom zninit import ZnInit, Descriptorclass Animal(ZnInit):    age: int = Descriptor()    class Cat(Animal):    name: str = Descriptor()    billy = Cat(age=4, name=&quot;Billy&quot;)````</longdescription>
</pkgmetadata>