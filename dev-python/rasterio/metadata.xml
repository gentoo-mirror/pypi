<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Rasterio========Rasterio reads and writes geospatial raster data... image:: https://app.travis-ci.com/rasterio/rasterio.svg?branch=master   :target: https://app.travis-ci.com/rasterio/rasterio.. image:: https://coveralls.io/repos/github/mapbox/rasterio/badge.svg?branch=master   :target: https://coveralls.io/github/mapbox/rasterio?branch=master.. image:: https://img.shields.io/pypi/v/rasterio   :target: https://pypi.org/project/rasterio/Geographic information systems use GeoTIFF and other formats to organize andstore gridded, or raster, datasets. Rasterio reads and writes these formats andprovides a Python API based on N-D arrays.Rasterio 1.3 works with Python 3.8+, Numpy 1.18+, and GDAL 3.1+. Officialbinary packages for Linux, macOS, and Windows with most built-in formatdrivers plus HDF5, netCDF, and OpenJPEG2000 are available on PyPI. Unofficialbinary packages for Windows are available through other channels.Read the documentation for more details: https://rasterio.readthedocs.io/.Example=======Here's an example of some basic features that Rasterio provides. Three bandsare read from an image and averaged to produce something like a panchromaticband.  This new band is then written to a new single band TIFF... code-block:: python    import numpy as np    import rasterio    # Read raster bands directly to Numpy arrays.    #    with rasterio.open('tests/data/RGB.byte.tif') as src:        r, g, b = src.read()    # Combine arrays in place. Expecting that the sum will    # temporarily exceed the 8-bit integer range, initialize it as    # a 64-bit float (the numpy default) array. Adding other    # arrays to it in-place converts those arrays &quot;up&quot; and    # preserves the type of the total array.    total = np.zeros(r.shape)    for band in r, g, b:        total += band    total /= 3    # Write the product as a raster band to a new 8-bit file. For    # the new file's profile, we start with the meta attributes of    # the source file, but then change the band count to 1, set the    # dtype to uint8, and specify LZW compression.    profile = src.profile    profile.update(dtype=rasterio.uint8, count=1, compress='lzw')    with rasterio.open('example-total.tif', 'w', **profile) as dst:        dst.write(total.astype(rasterio.uint8), 1)The output:.. image:: http://farm6.staticflickr.com/5501/11393054644_74f54484d9_z_d.jpg   :width: 640   :height: 581API Overview============Rasterio gives access to properties of a geospatial raster file... code-block:: python    with rasterio.open('tests/data/RGB.byte.tif') as src:        print(src.width, src.height)        print(src.crs)        print(src.transform)        print(src.count)        print(src.indexes)    # Printed:    # (791, 718)    # {u'units': u'm', u'no_defs': True, u'ellps': u'WGS84', u'proj': u'utm', u'zone': 18}    # Affine(300.0379266750948, 0.0, 101985.0,    #        0.0, -300.041782729805, 2826915.0)    # 3    # [1, 2, 3]A rasterio dataset also provides methods for getting read/write windows (likeextended array slices) given georeferenced coordinates... code-block:: python    with rasterio.open('tests/data/RGB.byte.tif') as src:        window = src.window(*src.bounds)        print(window)        print(src.read(window=window).shape)    # Printed:    # Window(col_off=0.0, row_off=0.0, width=791.0000000000002, height=718.0)    # (3, 718, 791)Rasterio CLI============Rasterio's command line interface, named &quot;rio&quot;, is documented at `cli.rst&lt;https://github.com/rasterio/rasterio/blob/master/docs/cli.rst&gt;`__. Its ``rioinsp`` command opens the hood of any raster dataset so you can poke aroundusing Python... code-block:: pycon    $ rio insp tests/data/RGB.byte.tif    Rasterio 0.10 Interactive Inspector (Python 3.4.1)    Type &quot;src.meta&quot;, &quot;src.read(1)&quot;, or &quot;help(src)&quot; for more information.    &gt;&gt;&gt; src.name    'tests/data/RGB.byte.tif'    &gt;&gt;&gt; src.closed    False    &gt;&gt;&gt; src.shape    (718, 791)    &gt;&gt;&gt; src.crs    {'init': 'epsg:32618'}    &gt;&gt;&gt; b, g, r = src.read()    &gt;&gt;&gt; b    masked_array(data =     [[-- -- -- ..., -- -- --]     [-- -- -- ..., -- -- --]     [-- -- -- ..., -- -- --]     ...,     [-- -- -- ..., -- -- --]     [-- -- -- ..., -- -- --]     [-- -- -- ..., -- -- --]],                 mask =     [[ True  True  True ...,  True  True  True]     [ True  True  True ...,  True  True  True]     [ True  True  True ...,  True  True  True]     ...,     [ True  True  True ...,  True  True  True]     [ True  True  True ...,  True  True  True]     [ True  True  True ...,  True  True  True]],           fill_value = 0)    &gt;&gt;&gt; np.nanmin(b), np.nanmax(b), np.nanmean(b)    (0, 255, 29.94772668847656)Rio Plugins-----------Rio provides the ability to create subcommands using plugins.  See`cli.rst &lt;https://github.com/rasterio/rasterio/blob/master/docs/cli.rst#rio-plugins&gt;`__for more information on building plugins.See the`plugin registry &lt;https://github.com/rasterio/rasterio/wiki/Rio-plugin-registry&gt;`__for a list of available plugins.Installation============Please install Rasterio in a `virtual environment&lt;https://www.python.org/dev/peps/pep-0405/&gt;`__ so that its requirements don'ttamper with your system's Python.SSL certs---------The Linux wheels on PyPI are built on CentOS and libcurl expects certs to be in/etc/pki/tls/certs/ca-bundle.crt. Ubuntu's certs, for example, are ina different location. You may need to use the CURL_CA_BUNDLE environmentvariable to specify the location of SSL certs on your computer. On an Ubuntusystem set the variable as shown below... code-block:: console    $ export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crtDependencies------------Rasterio has a C library dependency: GDAL &gt;= 3.1. GDAL itself depends on someother libraries provided by most major operating systems and also depends onthe non standard GEOS and PROJ libraries. How to meet these requirement willbe explained below.Rasterio's Python dependencies are (see the package metadata file):.. code-block:: none    affine    attrs    certifi    click&gt;=4.0    cligj&gt;=0.5    numpy&gt;=1.18    snuggs&gt;=1.4.1    click-plugins    setuptools    [all]    hypothesis    pytest-cov&gt;=2.2.0    matplotlib    boto3&gt;=1.2.4    numpydoc    pytest&gt;=2.8.2    shapely    ipython&gt;=2.0    sphinx    packaging    ghp-import    sphinx-rtd-theme    [docs]    ghp-import    numpydoc    sphinx    sphinx-rtd-theme    [ipython]    ipython&gt;=2.0    [plot]    matplotlib    [s3]    boto3&gt;=1.2.4    [test]    boto3&gt;=1.2.4    hypothesis    packaging    pytest-cov&gt;=2.2.0    pytest&gt;=2.8.2    shapelyDevelopment requires Cython and other packages.Binary Distributions--------------------Use a binary distribution that directly or indirectly provides GDAL ifpossible.The rasterio wheels on PyPI include GDAL and its own dependencies.========  ====Rasterio  GDAL========  ====1.2.3     3.2.21.2.4+    3.3.0========  ====Linux+++++Rasterio distributions are available from UbuntuGIS and Anaconda's conda-forgechannel.`Manylinux1 &lt;https://github.com/pypa/manylinux&gt;`__ wheels are available on PyPI.OS X++++Binary distributions with GDAL, GEOS, and PROJ4 libraries included areavailable for OS X versions 10.9+. To install, run ``pip install rasterio``.These binary wheels are preferred by newer versions of pip.If you don't want these wheels and want to install from a source distribution,run ``pip install rasterio --no-binary rasterio`` instead.The included GDAL library is fairly minimal, providing only the format driversthat ship with GDAL and are enabled by default. To get access to more formats,you must build from a source distribution (see below).Windows+++++++Binary wheels for rasterio and GDAL are created by Christoph Gohlke and areavailable from his website.To install rasterio, simply download both binaries for your system (`rasterio&lt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#rasterio&gt;`__ and `GDAL&lt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal&gt;`__) and run something likethis from the downloads folder, adjusting for your Python version... code-block:: console    $ pip install -U pip    $ pip install GDAL-3.1.4-cp39-cp39‑win_amd64.whl    $ pip install rasterio‑1.1.8-cp39-cp39-win_amd64.whlYou can also install rasterio with conda using Anaconda's conda-forge channel... code-block:: console    $ conda install -c conda-forge rasterioSource Distributions--------------------Rasterio is a Python C extension and to build you'll need a working compiler(XCode on OS X etc). You'll also need Numpy preinstalled; the Numpy headers arerequired to run the rasterio setup script. Numpy has to be installed (via theindicated requirements file) before rasterio can be installed. See rasterio'sTravis `configuration&lt;https://github.com/rasterio/rasterio/blob/master/.travis.yml&gt;`__ for moreguidance.Linux+++++The following commands are adapted from Rasterio's Travis-CI configuration... code-block:: console    $ sudo add-apt-repository ppa:ubuntugis/ppa    $ sudo apt-get update    $ sudo apt-get install gdal-bin libgdal-dev    $ pip install -U pip    $ pip install rasterioAdapt them as necessary for your Linux system.OS X++++For a Homebrew based Python environment, do the following... code-block:: console    $ brew update    $ brew install gdal    $ pip install -U pip    $ pip install --no-binary rasterioWindows+++++++You can download a binary distribution of GDAL from `here&lt;http://www.gisinternals.com/release.php&gt;`__.  You will also need to downloadthe compiled libraries and headers (include files).When building from source on Windows, it is important to know that setup.pycannot rely on gdal-config, which is only present on UNIX systems, to discoverthe locations of header files and libraries that rasterio needs to compile itsC extensions. On Windows, these paths need to be provided by the user. Youwill need to find the include files and the library files for gdal and usesetup.py as follows. You will also need to specify the installed gdal versionthrough the GDAL_VERSION environment variable... code-block:: console    $ python setup.py build_ext -I&lt;path to gdal include files&gt; -lgdal_i -L&lt;path to gdal library&gt; installWith pip.. code-block:: console    $ pip install --no-use-pep517 --global-option -I&lt;path to gdal include files&gt; -lgdal_i -L&lt;path to gdal library&gt; .Note: :code:`--no-use-pep517` is required as pip currently hasn't implemented away for optional arguments to be passed to the build backend when using PEP 517.See `here &lt;https://github.com/pypa/pip/issues/5771&gt;`__ for more details.Alternatively environment variables (e.g. INCLUDE and LINK) used by MSVC compiler can be used to pointto include directories and library files.We have had success compiling code using the same version of Microsoft'sVisual Studio used to compile the targeted version of Python (more info onversions used `here&lt;https://docs.python.org/devguide/setup.html#windows&gt;`__.).Note: The GDAL DLL and gdal-data directory need to be in yourWindows PATH otherwise rasterio will fail to work.Support=======The primary forum for questions about installation and usage of Rasterio ishttps://rasterio.groups.io/g/main. The authors and other users will answerquestions when they have expertise to share and time to explain. Please takethe time to craft a clear question and be patient about responses.Please do not bring these questions to Rasterio's issue tracker, which we wantto reserve for bug reports and other actionable issues.Development and Testing=======================See `CONTRIBUTING.rst &lt;CONTRIBUTING.rst/&gt;`__.Documentation=============See `docs/ &lt;docs/&gt;`__.License=======See `LICENSE.txt &lt;LICENSE.txt&gt;`__.Authors=======The `rasterio` project was begun at Mapbox and was transferred to the `rasterio` Github organization in October 2021.See `AUTHORS.txt &lt;AUTHORS.txt&gt;`__.Changes=======See `CHANGES.txt &lt;CHANGES.txt&gt;`__.Who is Using Rasterio?======================See `here &lt;https://libraries.io/pypi/rasterio/usage&gt;`__.</longdescription>
</pkgmetadata>