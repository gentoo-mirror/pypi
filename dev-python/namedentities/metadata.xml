<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>| |travisci| |version| |versions| |impls| |wheel| |coverage| |br-coverage|.. |travisci| image:: https://api.travis-ci.org/jonathaneunice/namedentities.svg    :target: http://travis-ci.org/jonathaneunice/namedentities.. |version| image:: http://img.shields.io/pypi/v/namedentities.svg?style=flat    :alt: PyPI Package latest release    :target: https://pypi.python.org/pypi/namedentities.. |versions| image:: https://img.shields.io/pypi/pyversions/namedentities.svg    :alt: Supported versions    :target: https://pypi.python.org/pypi/namedentities.. |impls| image:: https://img.shields.io/pypi/implementation/namedentities.svg    :alt: Supported implementations    :target: https://pypi.python.org/pypi/namedentities.. |wheel| image:: https://img.shields.io/pypi/wheel/namedentities.svg    :alt: Wheel packaging support    :target: https://pypi.python.org/pypi/namedentities.. |coverage| image:: https://img.shields.io/badge/test_coverage-100%25-6600CC.svg    :alt: Test line coverage    :target: https://pypi.python.org/pypi/namedentities.. |br-coverage| image:: https://img.shields.io/badge/test_coverage-100%25-6600CC.svg    :alt: Test branch coverage    :target: https://pypi.python.org/pypi/namedentities.. |oplus| unicode:: 0x2295 .. oplusWhen reading HTML, named entities are neater and often easier to comprehendthan numeric entities (whether in decimal or hexidecimal notation), Unicodecharacters, or a mixture. The |oplus| character, for example, is easier torecognize and remember as ``&amp;oplus;`` than ``&amp;#8853;`` or ``&amp;#x2295;`` or``\u2295``. It's also a lot mroe compact than its verbose Unicode descriptor,``CIRCLED PLUS``.Because they use only pure 7-bit ASCII characters, entities are safer touse in databases, files, emails, and other contexts, especially given themany encodings (UTF-8 and such) required to fit Unicode into byte-orientedstorage--and the many platform variations and quirks seen along the way.This module helps convert from whatever mixture of characters and/orentities you have into named HTML entities. Or, if you prefer,into numeric HTML entities (either decimal orhexadecimal). It will even help you go the other way,mapping entities into Unicode.Usage=====Python 2::    from __future__ import print_function # Python 2/3 compatibiltiy    from namedentities import *    u = u'both em\u2014and&amp;#x2013;dashes&amp;hellip;'    print(&quot;named:  &quot;, repr(named_entities(u)))    print(&quot;numeric:&quot;, repr(numeric_entities(u)))    print(&quot;hex:&quot;   &quot;, repr(hex_entities(u)))    print(&quot;unicode:&quot;, repr(unicode_entities(u)))yields::    named:   'both em&amp;mdash;and&amp;ndash;dashes&amp;hellip;'    numeric: 'both em&amp;#8212;and&amp;#8211;dashes&amp;#8230;'    hex:     'both em&amp;#x2014;and&amp;#x2013;dashes&amp;#x2026;'    unicode: u'both em\u2014and\u2013dashes\u2026'You can do just about the same thing in Python 3, but you have to use a``print`` function rather than a ``print`` statement, and prior to 3.3, youhave to skip the ``u`` prefix that in Python 2 marks string literals asbeing Unicode literals. In Python 3.3 and following, however, you can startusing the ``u`` marker again, if you like. While all Python 3 strings areUnicode, it helps with cross-version code compatibility. (You can use the``six`` cross-version compatibility library, as the tests do.)One good use for ``unicode_entities`` is to create cross-platform,cross-Python-version strings that conceptually containUnicode characters, but spelled out as named (or numeric) HTML entities. Forexample::    unicode_entities('This &amp;rsquo;thing&amp;rdquo; is great!')This has the advantage of using only ASCII characters and commonstring encoding mechanisms, yet rendering full Unicode strings uponreconstitution.  You can use the other functions, say ``named_entities()``,to go from Unicode characters to named entities.Other APIs==========``entities(text, kind)`` takes text and the kind of entitiesyou'd like returned. ``kind`` can be ``'named'`` (the default), ``'numeric'``(a.k.a. ``'decimal'``),``'hex'``, ``'unicode'``, or ``'none'`` (or the actual ``None``).It's an alternative to themore explicit individual functions such as ``named_entities``,and can be useful when the kind of entitites you want togenerate is data-driven.``unescape(text)`` changes all entities (save the HTML and XML syntacticmarers ``&lt;``, ``&gt;``, and ``&amp;``)into Unicode characters. It has a near-alias, ``unicode_entities(text)``that parallelism with the other APIs.Encodings Akimbo================This module helps map string between HTML entities (named, numeric, or hex)and Unicode characters. It makes those mappings--previously somewhat obscureand nitsy--easy. Yay us! It will not, however, specifically help you with&quot;encodings&quot; of Unicode characters such as UTF-8; for these, use Python'sbuilt-in features.Python 3 tends to handle encoding/decoding pretty transparently.Python 2, however, does not. Use the ``decode``string method to get (byte) strings including UTF-8 into Unicode;use ``encode`` to convert true ``unicode`` strings into UTF-8. Please convertthem to Unicode *before* processing with ``namedentities``::    s = &quot;String with some UTF-8 characters...&quot;    print(named_entities(s.decode(&quot;utf-8&quot;)))The best strategy is to convert data to full Unicode as soon aspossible after ingesting it. Process everything uniformly in Unicode.Then encode back to UTF-8 etc. as you write the data out. This strategy isbaked-in to Python 3, but must be manually accomplished in Python 2.Escaping========Converting the character entities used in text strings to moreconvenient encodings is the primary point of this module. Thisrole is different from that of &quot;escaping&quot; key characterssuch as ``&amp;``, ``&lt;`` and ``&gt;`` (and possibly quotation marks such as ``'``and ``&quot;``) that have special meaning inHTML and XML. Still, the tasks overlap. They're both abouttransforming strings using entity representations, and whenyou want to do one, you will often need to do both. ``namedentities``therefore provides a mechanism to make this convenient.Any of this modudle's functions take an optional ``escape``keyword argument. If set to ``True``, strings are pre-processedwith the equivalent of the Python standard library's``html.escape`` so that ``&amp;``, ``&lt;`` and ``&gt;`` are replacedwith ``&amp;amp;``, ``&amp;lt;``, and ``&amp;gt;`` respectively.Quotations are not escaped, by default.If you provide a function instead of ``True``, that functionwill be used as the escape transformation. E.g.:    import html    hex_entities('...', escape=html.escape)Will escape all of the HTML relevant characters, including quotations.Notes=====* Version 1.9.4 achieves 100% branch testing coverage.* Version 1.9 adds the convenience HTML escaping.* Version 1.8.1 starts automatic test branch coverage with 96% coverage.* Version 1.8 acheives 100% test line coverage.* See ``CHANGES.yml`` for more historical changes.* Doesn't attempt to encode ``&amp;lt;``, ``&amp;gt;``, or  ``&amp;amp;`` (or their numerical equivalents) to avoid interfering  with HTML escaping.* Automated multi-version testing managed with the wonderful  `pytest &lt;http://pypi.python.org/pypi/pytest&gt;`_,  `pytest-cov &lt;http://pypi.python.org/pypi/pytest-cov&gt;`_,  `coverage &lt;http://pypi.python.org/pypi/coverage&gt;`_,  and `tox &lt;http://pypi.python.org/pypi/tox&gt;`_.  Continuous integration testing  with `Travis-CI &lt;https://travis-ci.org/jonathaneunice/namedentities&gt;`_.  Packaging linting with `pyroma &lt;https://pypi.python.org/pypi/pyroma&gt;`_.  Successfully packaged for, and  tested against, all late-model versions of Python: 2.6, 2.7, 3.2, 3.3,  3.4, 3.5, 3.6, 3.7 pre-release, and late-model PyPy and PyPy3.* This module started as basically a packaging of `Ian Beck's recipe  &lt;http://beckism.com/2009/03/named_entities_python/&gt;`_. While it's  moved forward since then, Ian's contribution to the core remains  key. Thank you, Ian!* The author, `Jonathan Eunice &lt;mailto:jonathan.eunice@gmail.com&gt;`_  or `@jeunice on Twitter &lt;http://twitter.com/jeunice&gt;`_ welcomes  your comments and suggestions.Installation============To install or upgrade to the latest version::    pip install -U namedentitiesYou may need to prefix these with ``sudo`` to authorizeinstallation. In environments without super-user privileges, you may want touse ``pip``'s ``--user`` option, to install only for a single user, ratherthan system-wide. You may also need to use version-specific ``pip2`` and``pip3`` installers, depending on your local system configuration and desiredversion of Python.Testing=======To run the module tests, use one of these commands::    tox                # normal run - speed optimized    tox -e py36        # run for a specific version only (e.g. py27, py36)    tox -c toxcov.ini  # run full coverage tests</longdescription>
</pkgmetadata>