<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jirenjiren is an application that generates text from a template. The format of the template is based on jinja2.[![PyPI](https://img.shields.io/pypi/v/jiren)](https://pypi.org/project/jiren/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/jiren)](https://pypi.org/project/jiren/)[![Python Tests](https://github.com/speg03/jiren/actions/workflows/python-tests.yml/badge.svg)](https://github.com/speg03/jiren/actions/workflows/python-tests.yml)[![codecov](https://codecov.io/gh/speg03/jiren/branch/main/graph/badge.svg?token=bFdpze6ELR)](https://codecov.io/gh/speg03/jiren)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/speg03/jiren/main.svg)](https://results.pre-commit.ci/latest/github/speg03/jiren/main)Read this in Japanese: [日本語](https://github.com/speg03/jiren/blob/main/README.ja.md)## Installation```shpip install jiren```## Usage### Generate textGenerate text from a template using the `jiren` command. This command can read a template from stdin or files.An example of reading a template from stdin:Command:```shecho &quot;hello, {{ name }}&quot; | jiren - -- --name=world```Outputs:```hello, world```An example of reading a template from a file:Command:```shcat &lt;&lt;EOF &gt;template.j2hello, {{ name }}EOFjiren template.j2 -- --name=world```Outputs:```hello, world```In this example, the template contains a variable called `name`. You can set values for variables in a template using program arguments passed to the `jiren` command. Note that the arguments for the variables must be located after `--`.If you want to know more about template format, please refer to jinja2 document ( http://jinja.pocoo.org/ ).### Variables in a templateYou can use the help to check the variables defined in a template.Command:```shecho &quot;{{ message }}, {{ name }}&quot; | jiren --help -```Outputs:```... (omitted)variables:  --name NAME  --message MESSAGE```### Default valuesYou can set default values for variables for which no values was specified. This is based on the jinja2 specification.Command:```shecho &quot;{{ message }}, {{ name | default('world') }}&quot; | jiren - -- --message=hello```Outputs:```hello, world```### Option: dataYou can pass a file with variables defined structurally using the `--data` option.Command:```shcat &lt;&lt;EOF &gt;data.yamlgreeting:  message: hello  name: worldEOFecho &quot;{{ greeting.message }}, {{ greeting.name }}&quot; | jiren --data=data.yaml -```Outputs:```hello, world```### Option: strictIf the `--strict` option is used with the `--data` option, all variables in the data file must be used in the template.Command:```shcat &lt;&lt;EOF &gt;data.yamlmessage: helloinvalid_key: invalidEOFecho &quot;{{ message }}&quot; | jiren --data=data.yaml --strict -```Outputs:```jiren: error: the data file contains unknown variables: invalid_key```### Option: requiredWhen using the `--required` option, you must specify values for all variables.Command:```shecho &quot;{{ message }}, {{ name }}&quot; | jiren --required - -- --message=hello```Outputs:```jiren: error: the following variables are required: name```</longdescription>
</pkgmetadata>