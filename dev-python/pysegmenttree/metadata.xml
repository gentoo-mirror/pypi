<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pysegmenttree[![GitHub license](https://img.shields.io/github/license/greshilov/pysegmenttree)](https://github.com/greshilov/pysegmenttree/blob/master/LICENSE)[![CI](https://github.com/greshilov/pysegmenttree/actions/workflows/ci.yaml/badge.svg)](https://github.com/greshilov/pysegmenttree/actions/workflows/ci.yaml)[![codecov](https://codecov.io/gh/greshilov/pysegmenttree/branch/master/graph/badge.svg?token=BXXCG2JBPK)](https://codecov.io/gh/greshilov/pysegmenttree)Segment tree is a data structure to perform efficient range queries over an array.Properties of the segment tree with the size N.| Operation | Time complexity || --------------- | --------------- || build | O(N) || query | O(Log[N]) || update | O(Log[N]) |# Key features* Implements classical data structure to deal with interval queries.* Includes two classes **IntSegmentTree** and **FloatSegmentTree** implemented in pure C. They can boost performance up to 20x and are used by default for simple data types if possible.# Installation```$ pip install pysegmenttree```# Basic usage```&gt;&gt; from pysegmenttree import stree# Build the tree# 'sum' function is used by default&gt;&gt; tree = stree([5, 1, 9, 4, 5, 11])# Find sum on the interval [1, 4)&gt;&gt; tree.query(1, 4)14# Set element with index 3 to 6&gt;&gt; tree.update(3, 6)&gt;&gt; tree.query(1, 4)16```# Advanced usageThere are three predefined query functions available that can be used with `int` or `float` trees. Use them as follows:```&gt;&gt; from pysegmenttree import stree, QueryFunction&gt;&gt; tree = stree([5, 1, 9, 4, 5, 11], func=QueryFunction.MIN)# Find min on the interval [1, 4)&gt;&gt; tree.query(1, 4)1```Plain python functions are also suitable, but in this case c-extensions will **not** be used.```&gt;&gt; tree = stree([5, 1, 9, 4, 5, 11], func=min)&gt;&gt; tree.query(1, 4)1```Example with user-defined class.```&gt;&gt; from pysegmenttree import stree&gt;&gt; from pysegmenttree.test_utils import Vec2D# List of 2D vectors&gt;&gt; tree = stree([Vec2D(0, 1), Vec2D(5, -2), Vec2D(-2, 3)], func=max)# Find the vector of maximum length on the interval [0, 2)&gt;&gt; tree.query(0, 2)Vec2D(x=5, y=-2)```# DocsDocs are available [here](https://pysegmenttree.readthedocs.io/en/latest/).# PerfomanceThree basic segment tree operations were benchmarked for three different types `int`, `float` and `Vec2D`.I included results for 3 other python segment trees libraries for comparison.All code related to benchmarking can be found in `benchmarks` subdirectory.* [segment-tree](https://github.com/evgeth/segment_tree)* [segmenttree](https://github.com/1e0ng/segmenttree)* [c-segment-tree](https://github.com/gilaniasher/segtree-c-python)## init| Param | Value || --------- | ------- || Tree size | 100 000 |[&lt;img src=&quot;benchmarks/with_other_libs/data/init.png&quot;/&gt;](benchmarks/with_other_libs/data/init.png &quot;init&quot;)## query| Param | Value || --------- | ------- || Tree size | 100 000 || Queries performed | 10 000 |[&lt;img src=&quot;benchmarks/with_other_libs/data/query.png&quot;/&gt;](benchmarks/with_other_libs/data/query.png &quot;query&quot;)## update| Param | Value || --------- | ------- || Tree size | 100 000 || Updates performed | 10 000 |[&lt;img src=&quot;benchmarks/with_other_libs/data/update.png&quot;/&gt;](benchmarks/with_other_libs/data/update.png &quot;update&quot;)# DevelopmentRead more [here](DEVELOPMENT.md).</longdescription>
</pkgmetadata>