<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># 5paisa Python SDKPython SDK for 5paisa APIs natively written in VB .NET![PyPI](https://img.shields.io/pypi/v/py5paisa)![GitHub Workflow Status (branch)](https://img.shields.io/github/workflow/status/5paisa/py5paisa/Publish%20package/master)![5paisa logo](./docs/images/5-paisa-img.jpg)#### DocumentationRead the docs hosted [here](https://www.5paisa.com/developerapi/overview)#### Features-   Order placement, modification and cancellation-   Fetching user info including holdings, positions, margin and order book.-   Fetching live market streaming.-   Placing, modifying and deleting Bracket Order.-   Fetching order status and trade information.-   Getting live data streaming using websockets.### Installation`pip install py5paisa`### Usage#### Configuring API keysGet your API keys from https://tradestation.5paisa.com/apidocNote:- We have deprecated the existing method which involved the use of login credentials.       Kindly go through this updated documentation of using Access token for API Access.#### AUTHENTICATION USING OAUTH```pyfrom py5paisa import FivePaisaClientcred={    &quot;APP_NAME&quot;:&quot;YOUR APP_NAME&quot;,    &quot;APP_SOURCE&quot;:&quot;YOUR APP_SOURCE&quot;,    &quot;USER_ID&quot;:&quot;YOUR USER_ID&quot;,    &quot;PASSWORD&quot;:&quot;YOUR PASSWORD&quot;,    &quot;USER_KEY&quot;:&quot;YOUR USERKEY&quot;,    &quot;ENCRYPTION_KEY&quot;:&quot;YOUR ENCRYPTION_KEY&quot;    }#This function will automatically take care of generating and sending access token for all your API'sclient = FivePaisaClient(cred=cred)# New TOTP based authenticationclient.get_totp_session('Your ClientCode','TOTP from authenticator app','Your Pin')# OAUTH Approach# First get a token by logging in to -&gt; https://dev-openapi.5paisa.com/WebVendorLogin/VLogin/Index?VendorKey=&lt;Your Vendor Key&gt;&amp;ResponseURL=&lt;Redirect URL&gt;# VendorKey is UesrKey for individuals user# for e.g. you can use ResponseURL as https://www.5paisa.com/technology/developer-apis# Pass the token received in the response url after successful login to get an access token (this also sets the token for all the APIs you use)-# Please note that you need to copy the request token from URL and paste in this code and start the code within 30s.client.get_oauth_session('Your Response Token')After successful authentication, you should get a `Logged in!!` message in console```#### Market Feed```py#NOTE : Symbol has to be in the same format as specified in the example below.req_list_=[{&quot;Exch&quot;:&quot;N&quot;,&quot;ExchType&quot;:&quot;D&quot;,&quot;Symbol&quot;:&quot;NIFTY 22 APR 2021 CE 15200.00&quot;,&quot;Expiry&quot;:&quot;20210422&quot;,&quot;StrikePrice&quot;:&quot;15200&quot;,&quot;OptionType&quot;:&quot;CE&quot;},            {&quot;Exch&quot;:&quot;N&quot;,&quot;ExchType&quot;:&quot;D&quot;,&quot;Symbol&quot;:&quot;NIFTY 22 APR 2021 PE 15200.00&quot;,&quot;Expiry&quot;:&quot;20210422&quot;,&quot;StrikePrice&quot;:&quot;15200&quot;,&quot;OptionType&quot;:&quot;PE&quot;}]            client.fetch_market_feed(req_list_)```#### Market Status```pyprint(client.get_market_status())```#### Fetching user info```py# Fetches holdingsclient.holdings()# Fetches marginclient.margin()# Fetches positionsclient.positions()# Fetches the order book of the clientclient.order_book()# Fetches Trade bookclient.get_tradebook()```#### Position Conversion```py# Convert positions# client.position_convertion(&lt;Exchange&gt;,&lt;Exchange Type&gt;,&lt;Scrip Name&gt;,&lt;Buy/Sell&gt;,&lt;Qty&gt;,&lt;From Delivery/Intraday&gt;,&lt;From Delivery/Intraday&gt;)client.position_convertion(&quot;N&quot;,&quot;C&quot;,&quot;BPCL_EQ&quot;,&quot;B&quot;,5,&quot;D&quot;,&quot;I&quot;)```Scrip codes reference:Note : Use these Links for getting scrip codesScrip Master - https://images.5paisa.com/website/scripmaster-csv-format.csv#### Placing an order```py# Note: This is an indicative order.from py5paisa.order import Order, OrderType, Exchange#You can pass scripdata either you can pass scripcode also.# please use price = 0 for market Order#use IsIntraday= true for intraday orders#Using Scrip Data :-#Using Scrip Code :-client.place_order(OrderType='B',Exchange='N',ExchangeType='C', ScripCode = 1660, Qty=1, Price=260)#Sample For SL order (for order to be treated as SL order just pass StopLossPrice)client.place_order(OrderType='B',Exchange='N',ExchangeType='C', ScripCode = 1660, Qty=1, Price=350, IsIntraday=False, StopLossPrice=345)#Derivative Orderclient.place_order(OrderType='B',Exchange='N',ExchangeType='D', ScripCode = 57633, Qty=50, Price=1.5)Please refer below documentation link for paramaters to be passed in cleint.place_order functionhttps://www.5paisa.com/developerapi/order-request-place-order```#### Placing offline orders (After Market Orders)By default all orders are normal orders, pass `AHPlaced=Y` to place offline orders.```pyclient.place_order(OrderType='B',Exchange='N',ExchangeType='C', ScripCode = 1660, Qty=1, Price=325, AHPlaced=&quot;Y&quot;)```#### Modifying an order```pyclient.modify_order(ExchOrderID=&quot;1100000017861430&quot;, Qty=2,Price=261)```#### Cancelling an order```pyclient.cancel_order(exch_order_id=&quot;1100000017795041&quot;)``````pycancel_bulk=[            {                &quot;ExchOrderID&quot;: &quot;&lt;Exchange Order ID 1&gt;&quot;            },            {                &quot;ExchOrderID&quot;: &quot;&lt;Exchange Order ID 2&gt;&quot;            },client.cancel_bulk_order(cancel_bulk)```#### SquareOffAll Orders```pyclient.squareoff_all()```#### Bracket Order For placing Braket order```pyclient.bo_order(OrderType='B',Exchange='N',ExchangeType='C', ScripCode = 1660, Qty=1, LimitPrice=330,TargetPrice=345,StopLossPrice=320,LimitPriceForSL=319,TrailingSL=1.5)```For placing Cover order```pyclient.cover_order(OrderType='B',Exchange='N',ExchangeType='C', ScripCode = 1660, Qty=1, LimitPrice=330,StopLossPrice=320,LimitPriceForSL=319,TrailingSL=1.5)```Note:For placing Bracket order in FNO segment pass ExchType='D'For Modifying Bracket/Cover Order only for Initial order (entry)```pyclient.modify_bo_order(ExchOrderID=&quot;1100000017861430&quot;,LimitPrice=330)client.modify_cover_order(ExchOrderID=&quot;1100000017861430&quot;,LimitPrice=330)#Note : For cover order just pass LimitPriceProfitOrder equal to Zero.```For Modifying LimitPriceProfitOrder ```pyclient.modify_bo_order(ExchOrderID=&quot;1100000017861430&quot;,TargetPrice=330)client.modify_cover_order(ExchOrderID=&quot;1100000017861430&quot;,TargetPrice=330)```For Modifying TriggerPriceForSL```pyclient.modify_bo_order(ExchOrderID=&quot;1100000017861430&quot;,LimitPriceForSL=330)client.modify_bo_order(ExchOrderID=&quot;1100000017861430&quot;,LimitPriceForSL=330)#Note : You have pass atmarket=true while modifying stoploss price, Pass ExchorderId for the particular leg to modify.```#### Basket Orders```py# Create a new Basketclient.create_basket(&quot;&lt;New Basket Name&gt;&quot;)# Rename existing basketclient.rename_basket(&quot;&lt;Modified Basket Name&gt;&quot;,&lt;Exisiting Basket ID&gt;)# Clone existing basketclient.clone_basket(&lt;Exisiting Basket ID&gt;)# Delete bulk basketsdelete_basket_list=[{&quot;BasketID&quot;:&quot;&lt;Exisiting Basket ID&gt;&quot;},{&quot;BasketID&quot;:&quot;&lt;Exisiting Basket ID&gt;&quot;}]client.delete_basket(delete_basket_list)# Get list of all baskets (Open/Closed)client.get_basket()basket_list= [            {                &quot;BasketID&quot;: &quot;&lt;Exisiting Basket ID&gt;&quot;            },            {                &quot;BasketID&quot;: &quot;&lt;Exisiting Basket ID&gt;&quot;            }        ]order_to_basket=Basket_order(&quot;N&quot;,&quot;C&quot;,23000,&quot;BUY&quot;,1,&quot;1660&quot;,&quot;I&quot;)client.add_basket_order(order_to_basket,basket_list)# Get orders in basketclient.get_order_in_basket(&lt;Exisiting Basket ID&gt;)```#### Fetching Order Status and Trade Information```pyfrom py5paisa.order import  Exchangereq_list= [        {            &quot;Exch&quot;: &quot;N&quot;,            &quot;ExchType&quot;: &quot;C&quot;,            &quot;ScripCode&quot;: 20374,            &quot;ExchOrderID&quot;: &quot;1000000015310807&quot;        }]# Fetches the trade detailsclient.fetch_trade_info(req_list)req_list_= [        {            &quot;Exch&quot;: &quot;N&quot;,            &quot;RemoteOrderID&quot;: &quot;90980441&quot;        }]# Fetches the order statusclient.fetch_order_status(req_list_)# Fetch Trade Historyprint(client.get_trade_history(&quot;PASS EXCHANGE ORDER ID&quot;))```#### Live Market Feed Streaming```pyreq_list=[            { &quot;Exch&quot;:&quot;N&quot;,&quot;ExchType&quot;:&quot;C&quot;,&quot;ScripCode&quot;:1660},            ]req_data=client.Request_Feed('mf','s',req_list)def on_message(ws, message):    print(message)client.connect(req_data)client.receive_data(on_message)```Note: Use the following abbreviations :Market Feed=mfMarket Depth (upto 5)=mdIndices (Spot Feed) =iOpen Interest=oiSubscribe= sUnsubscribe=u#### Live Market Depth Streaming (Depth 20)```pya={                &quot;method&quot;:&quot;subscribe&quot;,                &quot;operation&quot;:&quot;20depth&quot;,                &quot;instruments&quot;:[&quot;NC2885&quot;]            }print(client.socket_20_depth(a))def on_message(ws, message):    print(message)client.receive_data(on_message)Note:- Instruments in payload above is a list(array) in format as &lt;exchange&gt;&lt;exchange type&gt;&lt;scrip code&gt;```#### Level 5 Market Depth ```pyprint(client.fetch_market_depth_by_scrip(Exchange=&quot;N&quot;,ExchangeType=&quot;C&quot;,ScripCode=&quot;1660&quot;))print(client.fetch_market_depth_by_scrip(Exchange=&quot;N&quot;,ExchangeType=&quot;C&quot;,ScripData=&quot;RELIANCE_EQ&quot;))```#### Full Market Snapshot ```pya=[{&quot;Exchange&quot;:&quot;N&quot;,&quot;ExchangeType&quot;:&quot;C&quot;,&quot;ScripCode&quot;:&quot;2885&quot;},   {&quot;Exchange&quot;:&quot;N&quot;,&quot;ExchangeType&quot;:&quot;C&quot;,&quot;ScripCode&quot;:&quot;1660&quot;},   ]print(client.fetch_market_depth(a))```#### Full Market Snapshot(By Symbol)```pya=[{&quot;Exchange&quot;:&quot;N&quot;,&quot;ExchangeType&quot;:&quot;C&quot;,&quot;Symbol&quot;:&quot;ITC&quot;},   {&quot;Exchange&quot;:&quot;N&quot;,&quot;ExchangeType&quot;:&quot;D&quot;,&quot;Symbol&quot;:&quot;BANKNIFTY 31 Feb 2022 CE 41600.00&quot;},   ]print(client.fetch_market_depth_by_symbol(a))```#### Option Chain```pyclient.get_expiry(&quot;N&quot;,&quot;NIFTY&quot;)# Returns list of all active expiries# client.get_option_chain(&quot;N&quot;,&quot;NIFTY&quot;,&lt;Pass expiry timestamp from get_expiry response&gt;)client.get_option_chain(&quot;N&quot;,&quot;NIFTY&quot;,1647507600000)```#### Historical Data```py#historical_data(&lt;Exchange&gt;,&lt;Exchange Type&gt;,&lt;Scrip Code&gt;,&lt;Time Frame&gt;,&lt;From Data&gt;,&lt;To Date&gt;)df=client.historical_data('N','C',1660,'15m','2021-05-25','2021-06-16')print(df)# Note : TimeFrame Should be from this list ['1m','5m','10m','15m','30m','60m','1d']```#### Strategy Execution#### List Of Strategies Available - Short Straddle - Short Strangle - Long Straddle - Long Strangle - Iron Fly(Butterfly) - Iron Condor - Call Calendar Spread - Put Calendar Spread - Call Ladder - Put Ladder - Ladder```py#Import strategy packagefrom py5paisa.strategy import *```Note: These single-commands are capable of trading multiple legs of pre-defined strategies.Like :- Short/Long Straddles and Strangles, Iron Fly and Iron Condor (many more to come)Please use these at your own risk.```py#Create an Object:-cred={    &quot;APP_NAME&quot;:&quot;YOUR APP_NAME&quot;,    &quot;APP_SOURCE&quot;:YOUR APP_SOURCE,    &quot;USER_ID&quot;:&quot;YOUR USER_ID&quot;,    &quot;PASSWORD&quot;:&quot;YOUR PASSWORD&quot;,    &quot;USER_KEY&quot;:&quot;YOUR USERKEY&quot;,    &quot;ENCRYPTION_KEY&quot;:&quot;YOUR ENCRYPTION_KEY&quot;    }--Old approachstrategy=strategies(user=&quot;random_email@xyz.com&quot;, passw=&quot;password&quot;, dob=&quot;YYYYMMDD&quot;,cred=cred)--New Approachstrategy=strategies(cred=cred,request_token=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjUwMDUyNzcwIiwicm9sZSI6ImdpUUlvYXR5R2NYQUR3eFYwNXVXSGlPVzJRT1dOTGNzIiwibmJmIjoxNjY3ODMwODczLCJleHAiOjE2Njc4MzA5MDMsImlhdCI6MTY2NzgzMDg3M30.iP_FZtFy-nj6QeRd0sEhaKS-jr-wu-pCwtcdYCGPeO4&quot;)```Use the following to execute the strategy (note:- they are executed at market price only)```py#short_straddle(&lt;symbol&gt;,&lt;strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.short_straddle(&quot;banknifty&quot;,'37000','50','20210610','I',tag='&lt;Your strategy Name&gt;')#Using tag is optional``````py#short_strangle(&lt;symbol&gt;,&lt;List of sell strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.short_strangle(&quot;banknifty&quot;,['35300','37000'],'50','20210610','D')``````py#long_straddle(&lt;symbol&gt;,&lt;strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.long_straddle(&quot;banknifty&quot;,'37000','50','20210610','I',tag='&lt;Your strategy Name&gt;')#Using tag is optional``````py#long_strangle(&lt;symbol&gt;,&lt;List of sell strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.long_strangle(&quot;banknifty&quot;,['35300','37000'],'50','20210610','D')``````py#iron_condor(&lt;symbol&gt;,&lt;List of buy strike prices&gt;,&lt;List of sell strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.iron_condor(&quot;NIFTY&quot;,[&quot;15000&quot;,&quot;15200&quot;],[&quot;15100&quot;,&quot;15150&quot;],&quot;75&quot;,&quot;20210603&quot;,&quot;I&quot;)``````py#iron_fly(&lt;symbol&gt;,&lt;List of buy strike prices&gt;,&lt;Sell strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.iron_fly(&quot;NIFTY&quot;,[&quot;15000&quot;,&quot;15200&quot;],&quot;15100&quot;,&quot;75&quot;,&quot;20210610&quot;,&quot;I&quot;,tag='&lt;Your strategy Name&gt;')#Using tag is optional``````py#call_calendar(&lt;symbol&gt;,&lt;List of sell strike price&gt;,&lt;qty&gt;,&lt;list of expiry(first one will be bought and the second sold based on expiry)&gt;,&lt;Order Type&gt;)strategy.call_calendar(&quot;nifty&quot;,'15600','75',['20210603','20210610'],'I')``````py#put_calendar(&lt;symbol&gt;,&lt;List of sell strike price&gt;,&lt;qty&gt;,&lt;list of expiry(first one will be bought and the second sold based on expiry)&gt;,&lt;Order Type&gt;)strategy.put_calendar(&quot;nifty&quot;,'15600','75',['20210603','20210610'],'I')``````py#call_ladder(&lt;symbol&gt;,&lt;Buy strike prices&gt;,&lt;List of Sell strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.call_ladder(&quot;NIFTY&quot;,&quot;15100&quot;,[&quot;15300&quot;,&quot;15400&quot;],&quot;75&quot;,&quot;20210610&quot;,&quot;I&quot;)``````py#put_ladder(&lt;symbol&gt;,&lt;Buy strike prices&gt;,&lt;List of Sell strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.put_ladder(&quot;NIFTY&quot;,&quot;15000&quot;,[&quot;14800&quot;,&quot;14500&quot;],&quot;75&quot;,&quot;20210610&quot;,&quot;I&quot;,tag='&lt;Your strategy Name&gt;')#Using tag is optional``````py#ladder(&lt;symbol&gt;,&lt;List of Buy strike prices&gt;,&lt;List of Sell strike price&gt;,&lt;qty&gt;,&lt;expiry&gt;,&lt;Order Type&gt;)strategy.ladder(&quot;sbin&quot;,[&quot;400&quot;,&quot;420&quot;],[&quot;350&quot;,&quot;370&quot;,&quot;450&quot;,&quot;500&quot;],&quot;1500&quot;,&quot;20210729&quot;,&quot;D&quot;)``````pySquareoff a strategy Using tagsstrategy.squareoff('tag')# Use the same tag as used while executing the strategies```#### Trading Ideas```pyTo get actionable buy trades use:-print(Client.get_buy())To get list of current trades use:-print(Client.get_trade())```#### TODO - Write tests.#### CreditsThis package was created with[Cookiecutter](https://github.com/audreyr/cookiecutter) and the[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage)project template.</longdescription>
</pkgmetadata>