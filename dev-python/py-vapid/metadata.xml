<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|PyPI version py_vapid|Easy VAPID generation=====================This minimal library contains the minimal set of functions you need togenerate a VAPID key set and get the headers you’ll need to sign aWebPush subscription update.VAPID is a voluntary standard for WebPush subscription providers (sitesthat send WebPush updates to remote customers) to self-identify to PushServers (the servers that convey the push notifications).The VAPID “claims” are a set of JSON keys and values. There are tworequired fields, one semi-optional and several optional additionalfields.At a minimum a VAPID claim set should look like:::   {&quot;sub&quot;:&quot;mailto:YourEmail@YourSite.com&quot;,&quot;aud&quot;:&quot;https://PushServer&quot;,&quot;exp&quot;:&quot;ExpirationTimestamp&quot;}A few notes:**sub** is the email address you wish to have on record for thisrequest, prefixed with “``mailto:``”. If things go wrong, this is theemail that will be used to contact you (for instance). This can be ageneral delivery address like “``mailto:push_operations@example.com``”or a specific address like “``mailto:bob@example.com``”.**aud** is the audience for the VAPID. This is the scheme and host youuse to send subscription endpoints and generally coincides with the``endpoint`` specified in the Subscription Info block.As example, if a WebPush subscription info contains:``{&quot;endpoint&quot;: &quot;https://push.example.com:8012/v1/push/...&quot;, ...}``then the ``aud`` would be “``https://push.example.com:8012``”While some Push Services consider this an optional field, others may bestricter.**exp** This is the UTC timestamp for when this VAPID request willexpire. The maximum period is 24 hours. Setting a shorter period canprevent “replay” attacks. Setting a longer period allows you to reuseheaders for multiple sends (e.g. if you’re sending hundreds of updateswithin an hour or so.) If no ``exp`` is included, one that will expirein 24 hours will be auto-generated for you.Claims should be stored in a JSON compatible file. In the examplesbelow, we’ve stored the claims into a file named ``claims.json``.py_vapid can either be installed as a library or used as a stand alongapp, ``bin/vapid``.App Installation----------------You’ll need ``python virtualenv`` Run that in the current directory.Then run::   bin/pip install -r requirements.txt   bin/python setup.py installApp Usage---------Run by itself, ``bin/vapid`` will check and optionally create thepublic_key.pem and private_key.pem files.``bin/vapid --gen`` can be used to generate a new set of public andprivate key PEM files. These will overwrite the contents of``private_key.pem`` and ``public_key.pem``.``bin/vapid --sign claims.json`` will generate a set of HTTP headersfrom a JSON formatted claims file. A sample ``claims.json`` is includedwith this distribution.``bin/vapid --sign claims.json --json`` will output the headers in JSONformat, which may be useful for other programs.``bin/vapid --applicationServerKey`` will return the``applicationServerKey`` value you can use to make a restrictedendpoint. Seehttps://developer.mozilla.org/en-US/docs/Web/API/PushManager/subscribefor more details. Be aware that this value is tied to the generatedpublic/private key. If you remove or generate a new key, any restrictedURL you’ve previously generated will need to be reallocated. Please notethat some User Agents may require you `to decode this string into aUint8Array &lt;https://github.com/GoogleChrome/push-notifications/blob/master/app/scripts/main.js&gt;`__.See ``bin/vapid -h`` for all options and commands.CHANGELOG---------I’m terrible about updating the Changelog. Please see the```git log`` &lt;https://github.com/web-push-libs/vapid/pulls?q=is%3Apr+is%3Aclosed&gt;`__history for details... |PyPI version py_vapid| image:: https://badge.fury.io/py/py-vapid.svg   :target: https://pypi.org/project/py-vapid/</longdescription>
</pkgmetadata>