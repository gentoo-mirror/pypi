<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot; style=&quot;border-bottom: none;&quot;&gt; ðŸ”Œ&amp;nbsp;&amp;nbsp;Delfino Core&amp;nbsp;&amp;nbsp; ðŸ”Œ&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;A &lt;a href=&quot;https://github.com/radeklat/delfino&quot;&gt;Delfino&lt;/a&gt; plugin with core functionality.&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://app.circleci.com/pipelines/github/radeklat/delfino-core?branch=main&quot;&gt;        &lt;img alt=&quot;CircleCI&quot; src=&quot;https://img.shields.io/circleci/build/github/radeklat/delfino-core&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://app.codecov.io/gh/radeklat/delfino-core/&quot;&gt;        &lt;img alt=&quot;Codecov&quot; src=&quot;https://img.shields.io/codecov/c/github/radeklat/delfino-core&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/radeklat/delfino-core/tags&quot;&gt;        &lt;img alt=&quot;GitHub tag (latest SemVer)&quot; src=&quot;https://img.shields.io/github/tag/radeklat/delfino-core&quot;&gt;    &lt;/a&gt;    &lt;img alt=&quot;Maintenance&quot; src=&quot;https://img.shields.io/maintenance/yes/2022&quot;&gt;    &lt;a href=&quot;https://github.com/radeklat/delfino-core/commits/main&quot;&gt;        &lt;img alt=&quot;GitHub last commit&quot; src=&quot;https://img.shields.io/github/last-commit/radeklat/delfino-core&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://www.python.org/doc/versions/&quot;&gt;        &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/delfino-core&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypistats.org/packages/delfino-core&quot;&gt;        &lt;img alt=&quot;Downloads&quot; src=&quot;https://img.shields.io/pypi/dm/delfino-core&quot;&gt;    &lt;/a&gt;&lt;/p&gt;# Commands  | Command               | Description                                         ||-----------------------|-----------------------------------------------------|| coverage-open         | Open coverage results in default browser.           || coverage-report       | Analyse coverage and generate a term/HTML report.   || dependencies-update   | Manages the process of updating dependencies.       || format                | Runs black code formatter and isort on source code. || lint                  | Run linting on the entire code base.                || lint-pycodestyle      | Run PEP8 checking on code.                          || lint-pydocstyle       | Run docstring linting on source code.               || lint-pylint           | Run pylint on code.                                 || switch-python-version | Switches Python venv to a different Python version. || test-all              | Run all tests, and generate coverage report.        || test-integration      | Run integration tests.                              || test-unit             | Run unit tests.                                     || typecheck             | Run type checking on source code.                   || verify-all            | Runs all verification commands.                     |# Installation- pip: `pip install delfino-core`- Poetry: `poetry add -D delfino-core`- Pipenv: `pipenv install -d delfino-core`## Optional dependenciesEach project may use different sub-set of [commands](#commands). Therefore, dependencies of all commands are optional and checked only when the command is executed.Using `[all]` installs all the [optional dependencies](https://setuptools.pypa.io/en/latest/userguide/dependency_management.html#optional-dependencies) used by all the commands. If you want only a sub-set of those dependencies, there are finer-grained groups available:- For individual commands (matches the command names):  - `typecheck`  - `format`  - `dependencies-update`- For groups of commands:  - `test` - for testing and coverage commands  - `lint` - for all the linting commands- For groups of groups:  - `verify-all` - same as `[typecheck,format,test,lint]`  - `all` - all optional packages# ConfigurationDelfino doesn't load any plugins by default. To enable this plugin, add the following config into `pyproject.toml`:```toml[tool.delfino.plugins.delfino-core]```## Plugin configurationThis plugin has several options. All the values are optional and defaults are shown below: ```toml[tool.delfino.plugins.delfino-core]# Source files - may have different rules than tests (usually stricter)sources_directory = &quot;src&quot;# Test filestests_directory = &quot;tests&quot;# Where to store reports generated by various toolsreports_directory = &quot;reports&quot;# Types of tests you have nested under the `tests_directory`. Will be executed in given order.test_types = [&quot;unit&quot;, &quot;integration&quot;]# One or more module to wrap `pytest` in, executing it as `python -m &lt;MODULE&gt; pytest ...`pytest_modules = []# Commands to run as a quality gate in given order.verify_commands = [&quot;format&quot;, &quot;lint&quot;, &quot;typecheck&quot;, &quot;test-all&quot;]# Do not install pre-commit if this is set to true.disable_pre_commit = false```## Commands configurationSeveral commands have their own configuration as well:```toml[tool.delfino.plugins.delfino-core.typecheck]# One or more directories where type hint will be required. By default they are optional.strict_directories = []  ```# UsageRun `delfino --help`.# DevelopmentTo develop against editable `delfino` sources:1. Make sure `delfino` sources are next to this plugin:    ```shell    cd ..    git clone https://github.com/radeklat/delfino.git    ```2. Install `delfino` as editable package:    ```shell    pip install -e ../delfino    ```   Note that poetry will reset this to the released package when you install/update anything.</longdescription>
</pkgmetadata>