<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Code Quality Score| |Code Grade| |Code Coverage| |PyPI Version| |Code style: black| |PyPI License|themoviedb==========A modern and easy to use API wrapper for The Movie Database (TMDb) API v3written in Python. Supports sync and async requests!Overview========The **themoviedb** is a synchronous and asynchronous wrapper, written in Python,for The Movie Database (TMDb) API v3.`The Movie Database (TMDb) &lt;https://www.themoviedb.org&gt;`__ is acommunity built movie and TV database.The `TMDb API &lt;https://www.themoviedb.org/documentation/api&gt;`__ serviceis for those of you interested in using our movie, TV show or actorimages and/or data in your application.A `TMDb user account &lt;https://www.themoviedb.org/account/signup&gt;`__ isrequired to request an API key.Getting started===============Requirements-------------  ``python`` (Python &gt;=3.8)-  ``pip`` (Python package manager)Install-------The easiest way to install themoviedb is via ``pip``.::    pip install themoviedbAPI Key-------You will need an API key to The Movie Database to access the API. Toobtain a key, follow these steps:1. `Register &lt;https://www.themoviedb.org/account/signup&gt;`__ for and   verify an account.2. `Log &lt;https://www.themoviedb.org/login&gt;`__ into your account.3. Select the `API section &lt;https://www.themoviedb.org/settings/api&gt;`__   on left side of your account page.4. Click on the link to generate a new API key and follow the   instructions.Usage=====Sync mode---------.. code:: python    from themoviedb import TMDbAsync mode----------.. code:: python    from themoviedb import aioTMDbConfiguration-------------Initialize a TMDb object and set your API Key, language and region... code:: python    tmdb = TMDb(key=&quot;YOUR_API_KEY&quot;, language=&quot;pt-BR&quot;, region=&quot;BR&quot;)    # or: tmdb = aioTMDb(key=&quot;YOUR_API_KEY&quot;, language=&quot;pt-BR&quot;, region=&quot;BR&quot;)Alternatively, set after initialize... code:: python    tmdb = TMDb()    # or: tmdb = aioTMDb()    tmdb.key = &quot;YOUR_API_KEY&quot;    tmdb.language = &quot;pt-BR&quot;     # default: en-US    tmdb.region = &quot;BR&quot;          # default: USAlternatively too, you can export your API key, language and regionlogger as an environment variable... code:: bash    $ export TMDB_KEY=&quot;YOUR_API_KEY&quot;    $ export TMDB_LANGUAGE=&quot;pt-BR&quot;  # ISO 639-1    $ export TMDB_REGION=&quot;BR&quot;       # ISO-3166-1And then you will no longer need to set your API key, language and region... code:: python    tmdb = TMDb()   # from env: TMDB_KEY=&quot;YOUR_API_KEY&quot;, TMDB_LANGUAGE=&quot;pt-BR&quot;, TMDB_REGION=&quot;BR&quot;    # or: tmdb = aioTMDb()Examples--------Get the list of top rated movies (sync mode)... code:: py    from themoviedb import TMDb    tmdb = TMDb()    movies = tmdb.movies().top_rated()    for movie in movies:        print(movie)Get the list of popular TV shows (async mode)... code:: py    import asyncio    from themoviedb import aioTMDb    async def main():        tmdb = aioTMDb()        movies = await tmdb.tvs().popular()        for movie in movies:            print(movie)    asyncio.run(main())Discover movies by different types of data... code:: py    from themoviedb import TMDb    tmdb = TMDb()    movies = tmdb.discover().movie(        sort_by=&quot;vote_average.desc&quot;,        primary_release_date__gte=&quot;1997-08-15&quot;,        vote_count__gte=10000,        vote_average__gte=6.0,    )    for movie in movies:        print(movie)Get the details of movie for a search... code:: py    import asyncio    from themoviedb import aioTMDb    async def main():        tmdb = aioTMDb()        movies = await tmdb.search().movies(&quot;fight club&quot;)        movie_id = movies[0].id  # get first result        movie = await tmdb.movie(movie_id).details(append_to_response=&quot;credits,external_ids,images,videos&quot;)        print(movie.title, movie.year)        print(movie.tagline)        print(movie.poster_url)        print(movie.external_ids.imdb_url)        for person in movie.credits.cast:            print(person.name, person.character)    asyncio.run(main()).. |Code Quality Score| image:: https://api.codiga.io/project/36067/score/svg   :target: https://app.codiga.io/hub/project/36067/themoviedb.. |Code Grade| image:: https://api.codiga.io/project/36067/status/svg   :target: https://app.codiga.io/hub/project/36067/themoviedb.. |Code Coverage| image:: https://codecov.io/gh/leandcesar/themoviedb/branch/master/graph/badge.svg?token=OOILIE0RTS    :target: https://codecov.io/gh/leandcesar/themoviedb.. |Code style: black| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black.. |PyPI Version| image:: https://img.shields.io/pypi/v/themoviedb?color=blue   :target: https://pypi.org/project/themoviedb/.. |PyPI License| image:: https://img.shields.io/pypi/l/themoviedb.svg   :target: https://img.shields.io/pypi/l/themoviedb.svg</longdescription>
</pkgmetadata>