<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyAutoGalaxy: Open-Source Multi Wavelength Galaxy Structure &amp; Morphology========================================================================.. image:: https://mybinder.org/badge_logo.svg   :target: https://mybinder.org/v2/gh/Jammy2211/autogalaxy_workspace/HEAD.. image:: https://readthedocs.org/projects/pyautogalaxy/badge/?version=latest   :target: https://pyautogalaxy.readthedocs.io/en/latest/?badge=latest   :alt: Documentation Status.. image:: https://github.com/Jammy2211/PyAutoGalaxy/actions/workflows/main.yml/badge.svg   :target: https://github.com/Jammy2211/PyAutoGalaxy/actions.. image:: https://github.com/Jammy2211/PyAutoBuild/actions/workflows/release.yml/badge.svg   :target: https://github.com/Jammy2211/PyAutoBuild/actions.. image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black.. image:: https://joss.theoj.org/papers/10.21105/joss.04475/status.svg   :target: https://doi.org/10.21105/joss.04475`Installation Guide &lt;https://pyautogalaxy.readthedocs.io/en/latest/installation/overview.html&gt;`_ |`readthedocs &lt;https://pyautogalaxy.readthedocs.io/en/latest/index.html&gt;`_ |`Introduction on Binder &lt;https://mybinder.org/v2/gh/Jammy2211/autogalaxy_workspace/release?filepath=introduction.ipynb&gt;`_ |`HowToGalaxy &lt;https://pyautogalaxy.readthedocs.io/en/latest/howtogalaxy/howtogalaxy.html&gt;`_The study of a galaxy's structure and morphology is at the heart of modern day Astrophysical research.**PyAutoGalaxy** makes it simple to model galaxies, for example this Hubble Space Telescope imaging of a spiralgalaxy:.. image:: https://github.com/Jammy2211/PyAutoGalaxy/blob/main/paper/hstcombined.png?raw=true        :target: https://github.com/Jammy2211/PyAutoGalaxy/blob/main/paper/hstcombined.png**PyAutoGalaxy** also fits interferometer data from observatories such as ALMA:.. image:: https://github.com/Jammy2211/PyAutoGalaxy/blob/main/paper/almacombined.png?raw=true        :target: https://github.com/Jammy2211/PyAutoGalaxy/blob/main/paper/almacombined.pngGetting Started---------------The following links are useful for new starters:- `The PyAutoGalaxy readthedocs &lt;https://pyautogalaxy.readthedocs.io/en/latest&gt;`_, which includes `an installation guide &lt;https://pyautogalaxy.readthedocs.io/en/latest/installation/overview.html&gt;`_ and `an overview of PyAutoGalaxy's core features &lt;https://pyautogalaxy.readthedocs.io/en/latest/overview/overview_1_galaxies.html&gt;`_.- `The introduction Jupyter Notebook on Binder &lt;https://mybinder.org/v2/gh/Jammy2211/autogalaxy_workspace/release?filepath=introduction.ipynb&gt;`_, where you can try **PyAutoGalaxy** in a web browser (without installation).- `The autogalaxy_workspace GitHub repository &lt;https://github.com/Jammy2211/autogalaxy_workspace&gt;`_, which includes example scripts and the `HowToGalaxy Jupyter notebook lectures &lt;https://github.com/Jammy2211/autogalaxy_workspace/tree/master/notebooks/howtogalaxy&gt;`_ which give new users a step-by-step introduction to **PyAutoGalaxy**.API Overview------------Galaxy morphology calculations are performed in **PyAutoGalaaxy** by building a ``Plane`` object from ``LightProfile``and ``Galaxy`` objects. Below, we create a simple galaxy system where a redshift 0.5``Galaxy`` with an ``Sersic`` ``LightProfile`` representing a bulge and an ``Exponential`` ``LightProfile``representing a disk... code-block:: python    import autogalaxy as ag    import autogalaxy.plot as aplt    &quot;&quot;&quot;    To describe the galaxy emission two-dimensional grids of (y,x) Cartesian    coordinates are used.    &quot;&quot;&quot;    grid = ag.Grid2D.uniform(        shape_native=(50, 50),        pixel_scales=0.05,  # &lt;- Conversion from pixel units to arc-seconds.    )    &quot;&quot;&quot;    The galaxy has an elliptical sersic light profile representing its bulge.    &quot;&quot;&quot;    bulge=ag.lp.Sersic(        centre=(0.0, 0.0),        ell_comps=ag.convert.ell_comps_from(axis_ratio=0.9, angle=45.0),        intensity=1.0,        effective_radius=0.6,        sersic_index=3.0,    )    &quot;&quot;&quot;    The galaxy also has an elliptical exponential disk    &quot;&quot;&quot;    disk = ag.lp.Exponential(        centre=(0.0, 0.0),        ell_comps=ag.convert.ell_comps_from(axis_ratio=0.7, angle=30.0),        intensity=0.5,        effective_radius=1.6,    )    &quot;&quot;&quot;    We combine the above light profiles to compose a galaxy at redshift 1.0.    &quot;&quot;&quot;    galaxy = ag.Galaxy(redshift=1.0, bulge=bulge, disk=disk)    &quot;&quot;&quot;    We create a Plane, which in this example has just one galaxy but can    be extended for datasets with many galaxies.    &quot;&quot;&quot;    plane = ag.Plane(        galaxies=[galaxy],    )    &quot;&quot;&quot;    We can use the Grid2D and Plane to perform many calculations, for example    plotting the image of the galaxyed source.    &quot;&quot;&quot;    plane_plotter = aplt.PlanePlotter(plane=plane, grid=grid)    plane_plotter.figures_2d(image=True)With **PyAutoGalaxy**, you can begin modeling a galaxy in just a couple of minutes. The example below demonstrates asimple analysis which fits a galaxy's light... code-block:: python    import autofit as af    import autogalaxy as ag    import os    &quot;&quot;&quot;    Load Imaging data of the strong galaxy from the dataset folder of the workspace.    &quot;&quot;&quot;    dataset = ag.Imaging.from_fits(        data_path=&quot;/path/to/dataset/image.fits&quot;,        noise_map_path=&quot;/path/to/dataset/noise_map.fits&quot;,        psf_path=&quot;/path/to/dataset/psf.fits&quot;,        pixel_scales=0.1,    )    &quot;&quot;&quot;    Create a mask for the data, which we setup as a 3.0&quot; circle.    &quot;&quot;&quot;    mask = ag.Mask2D.circular(        shape_native=dataset.shape_native,        pixel_scales=dataset.pixel_scales,        radius=3.0    )    &quot;&quot;&quot;    We model the galaxy using an Sersic LightProfile.    &quot;&quot;&quot;    light_profile = ag.lp.Sersic    &quot;&quot;&quot;    We next setup this profile as model components whose parameters are free &amp; fitted for    by setting up a Galaxy as a Model.    &quot;&quot;&quot;    galaxy_model = af.Model(ag.Galaxy, redshift=1.0, light=light_profile)    model = af.Collection(galaxy=galaxy_model)    &quot;&quot;&quot;    We define the non-linear search used to fit the model to the data (in this case, Dynesty).    &quot;&quot;&quot;    search = af.DynestyStatic(name=&quot;search[example]&quot;, nlive=50)        &quot;&quot;&quot;    We next set up the `Analysis`, which contains the `log likelihood function` that the    non-linear search calls to fit the galaxy model to the data.    &quot;&quot;&quot;    analysis = ag.AnalysisImaging(dataset=masked_dataset)    &quot;&quot;&quot;    To perform the model-fit we pass the model and analysis to the search's fit method. This will    output results (e.g., dynesty samples, model parameters, visualization) to hard-disk.    &quot;&quot;&quot;    result = search.fit(model=model, analysis=analysis)    &quot;&quot;&quot;    The results contain information on the fit, for example the maximum likelihood    model from the Dynesty parameter space search.    &quot;&quot;&quot;    print(result.samples.max_log_likelihood())Support-------Support for installation issues, help with galaxy modeling and using **PyAutoGalaxy** is available by`raising an issue on the GitHub issues page &lt;https://github.com/Jammy2211/PyAutoGalaxy/issues&gt;`_.We also offer support on the **PyAutoGalaxy** `Slack channel &lt;https://pyautogalaxy.slack.com/&gt;`_, where we also provide thelatest updates on **PyAutoGalaxy**. Slack is invitation-only, so if you'd like to join sendan `email &lt;https://github.com/Jammy2211&gt;`_ requesting an invite.</longdescription>
</pkgmetadata>