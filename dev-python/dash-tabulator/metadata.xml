<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dash_tabulator &lt;!-- omit in toc --&gt;- [Dash Tabulator](#dash-tabulator)  - [Features](#features)  - [Installation](#installation)  - [Usage](#usage)  - [Themes](#themes)- [Advanced Usage](#advanced-usage)  - [Multiple Row Selection](#multiple-row-selection)  - [Javascript](#javascript)  - [Javascript Cell Formatting Example](#javascript-cell-formatting-example)  - [Javascript column resizing capture](#javascript-column-resizing-capture)  - [Links](#links)# Dash TabulatorDash tabulator is a Dash / Plotly component providing [Tabulator](http://tabulator.info/) capabilities.This is not a fully comprehensive implementation of Tabulator just the basics necessary to get the application working.Under the covers this uses [react-tabulator](https://github.com/ngduc/react-tabulator)![Dash Tabulator](docs/dash_tabulator.gif)This is built on the shoulders of the Dash Plotly team, the Tabulator team, and the React Tabulator team.This readme is probably longer than the code, due to the work of those individuals!## Features* [Tabulator Column settings ](http://tabulator.info/docs/4.1/columns)  * Sorting / Filtering etc.* Data loading through [Dash Plotly callbacks](https://dash.plotly.com/basic-callbacks) * Row Click Callbacks * Data Changed Callbacks (contains the new data table, note warning on this)* Cell Edit Callbacks, capture the cell that was just changed, requires setting &quot;editor&quot;:&quot;input&quot; etc.. on column header* Download button to export as [csv / xlsx / pdf](http://tabulator.info/docs/4.2/download)   * XLSX &amp; PDF require 3 party js scripts, see above link for details * Javascript bindings    * Contributed by Emil Haldrup Eriksen https://github.com/emilhe  *  See pull request https://github.com/preftech/dash-tabulator/pull/11## InstallationInstallation can be done with pip in your dash project```bashpip install dash_tabulatorpip install dash_extensions```## UsageSample usage ```pythonimport dash_tabulatorimport dashfrom dash.dependencies import Input, Outputimport dash_html_components as htmlimport dash_core_components as dccfrom textwrap import dedent as dimport json# 3rd party js to export as xlsxexternal_scripts = ['https://oss.sheetjs.com/sheetjs/xlsx.full.min.js']# bootstrap cssexternal_stylesheets = ['https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css']# initialize your dash app as normalapp = dash.Dash(__name__, external_scripts=external_scripts, external_stylesheets=external_stylesheets)styles = {            'pre': {                'border': 'thin lightgrey solid',                'overflowX': 'scroll'            }        }# Setup some columns # This is the same as if you were using tabulator directly in js # Notice the column with &quot;editor&quot;: &quot;input&quot; - these cells can be edited# See tabulator editor for options http://tabulator.info/docs/4.8/editcolumns = [                { &quot;title&quot;: &quot;Name&quot;, &quot;field&quot;: &quot;name&quot;, &quot;width&quot;: 150, &quot;headerFilter&quot;:True, &quot;editor&quot;:&quot;input&quot;},                { &quot;title&quot;: &quot;Age&quot;, &quot;field&quot;: &quot;age&quot;, &quot;hozAlign&quot;: &quot;left&quot;, &quot;formatter&quot;: &quot;progress&quot; },                { &quot;title&quot;: &quot;Favourite Color&quot;, &quot;field&quot;: &quot;col&quot;, &quot;headerFilter&quot;:True },                { &quot;title&quot;: &quot;Date Of Birth&quot;, &quot;field&quot;: &quot;dob&quot;, &quot;hozAlign&quot;: &quot;center&quot; },                { &quot;title&quot;: &quot;Rating&quot;, &quot;field&quot;: &quot;rating&quot;, &quot;hozAlign&quot;: &quot;center&quot;, &quot;formatter&quot;: &quot;star&quot; },                { &quot;title&quot;: &quot;Passed?&quot;, &quot;field&quot;: &quot;passed&quot;, &quot;hozAlign&quot;: &quot;center&quot;, &quot;formatter&quot;: &quot;tickCross&quot; }              ]# Setup some datadata = [                {&quot;id&quot;:1, &quot;name&quot;:&quot;Oli Bob&quot;, &quot;age&quot;:&quot;12&quot;, &quot;col&quot;:&quot;red&quot;, &quot;dob&quot;:&quot;&quot;},                {&quot;id&quot;:2, &quot;name&quot;:&quot;Mary May&quot;, &quot;age&quot;:&quot;1&quot;, &quot;col&quot;:&quot;blue&quot;, &quot;dob&quot;:&quot;14/05/1982&quot;},                {&quot;id&quot;:3, &quot;name&quot;:&quot;Christine Lobowski&quot;, &quot;age&quot;:&quot;42&quot;, &quot;col&quot;:&quot;green&quot;, &quot;dob&quot;:&quot;22/05/1982&quot;},                {&quot;id&quot;:4, &quot;name&quot;:&quot;Brendon Philips&quot;, &quot;age&quot;:&quot;125&quot;, &quot;col&quot;:&quot;orange&quot;, &quot;dob&quot;:&quot;01/08/1980&quot;},                {&quot;id&quot;:5, &quot;name&quot;:&quot;Margret Marmajuke&quot;, &quot;age&quot;:&quot;16&quot;, &quot;col&quot;:&quot;yellow&quot;, &quot;dob&quot;:&quot;31/01/1999&quot;},                {&quot;id&quot;:6, &quot;name&quot;:&quot;Fred Savage&quot;, &quot;age&quot;:&quot;16&quot;, &quot;col&quot;:&quot;yellow&quot;, &quot;rating&quot;:&quot;1&quot;, &quot;dob&quot;:&quot;31/01/1999&quot;},                {&quot;id&quot;:6, &quot;name&quot;:&quot;Brie Larson&quot;, &quot;age&quot;:&quot;30&quot;, &quot;col&quot;:&quot;blue&quot;, &quot;rating&quot;:&quot;1&quot;, &quot;dob&quot;:&quot;31/01/1999&quot;},              ]# Additional options can be setup here # these are passed directly to tabulator# In this example we are enabling selection# Allowing you to select only 1 row# and grouping by the col (color) column options = { &quot;groupBy&quot;: &quot;col&quot;, &quot;selectable&quot;:1}# downloadButtonType# takes #       css     =&gt; class names#       text    =&gt; Text on the button#       type    =&gt; type of download (csv/ xlsx / pdf, remember to include appropriate 3rd party js libraries)#       filename =&gt; filename prefix defaults to data, will download as filename.typedownloadButtonType = {&quot;css&quot;: &quot;btn btn-primary&quot;, &quot;text&quot;:&quot;Export&quot;, &quot;type&quot;:&quot;xlsx&quot;}# clearFilterButtonType# takes #       css     =&gt; class names#       text    =&gt; Text on the buttonclearFilterButtonType = {&quot;css&quot;: &quot;btn btn-outline-dark&quot;, &quot;text&quot;:&quot;Clear Filters&quot;}# Add a dash_tabulator table# columns=columns,# data=data,# Can be setup at initialization or added with a callback as shown below # thank you @AnnMarieW for that fixapp.layout = html.Div([    dash_tabulator.DashTabulator(        id='tabulator',        #columns=columns,        #data=data,        options=options,        downloadButtonType=downloadButtonType,        clearFilterButtonType=clearFilterButtonType    ),    html.Div(id='output'),    dcc.Interval(                id='interval-component-iu',                interval=1*10, # in milliseconds                n_intervals=0,                max_intervals=0            )])# dash_tabulator can be populated from a dash callback@app.callback([ Output('tabulator', 'columns'),                 Output('tabulator', 'data')],                [Input('interval-component-iu', 'n_intervals')]) def initialize(val):    return columns, data# dash_tabulator can register a callback on rowClicked, #   cellEdited =&gt; a cell with a header that has &quot;editor&quot;:&quot;input&quot; etc.. will be returned with row, initial value, old value, new value# dataChanged =&gt; full table upon change (use with caution)# dataFiltering =&gt; header filters as typed, before filtering has occurred (you get partial matching)# dataFiltered =&gt; header filters and rows of data returned# to receive a dict of the row values@app.callback(Output('output', 'children'),     [Input('tabulator', 'rowClicked'),    Input('tabulator', 'cellEdited'),    Input('tabulator', 'dataChanged'),     Input('tabulator', 'dataFiltering'),    Input('tabulator', 'dataFiltered')])def display_output(row, cell, dataChanged, filters, dataFiltered):    print(row)    print(cell)    print(dataChanged)    print(filters)    print(dataFiltered)    return 'You have clicked row {} ; cell {}'.format(row, cell)if __name__ == '__main__':    app.run_server(debug=True)```Be aware registering a callback for dataChanged will send the entire table back each time a change occursMake sure you are conscious of the amount of data you are round tripping. dataFiltering will return the filters before a match has occurred, usually a partial match```python[{'field': 'col', 'type': 'like', 'value': 'yello'}]```dataFiltered will return the header filter and the row data e.g.```python{    'filters': [{'field': 'col', 'type': 'like', 'value': 'yellow'}],     'rows': [              None,               None,               {'id': 5, 'name': 'Margret Marmajuke', 'age': '16', 'col': 'yellow', 'dob': '31/01/1999'},               {'id': 6, 'name': 'Fred Savage', 'age': '16', 'col': 'yellow', 'rating': '1', 'dob': '31/01/1999'}              ]}```## Themes React-Tabulator comes with several themes that can be used in Dash-TabulatorDash-Tabulator uses the default theme tabulator.min.cssThe theme can be set in the Dash-Tabulator constructor e.g.```pythonapp.layout = html.Div([    dash_tabulator.DashTabulator(        id='tabulator',        theme='tabulator_simple',  #optional        options=options,        downloadButtonType=downloadButtonType,        clearFilterButtonType=clearFilterButtonType,    ),    ....])```The following are the built in react-tabulator themes - tabulator or default =&gt; react-tabulator/lib/css/tabulator.min.css- tabulator_modern =&gt; react-tabulator/lib/css/tabulator_modern.min.css- tabulator_midnight =&gt; react-tabulator/lib/css/tabulator_midnight.min.css- tabulator_simple =&gt; react-tabulator/lib/css/tabulator_simple.min.css- tabulator_site =&gt; react-tabulator/lib/css/tabulator_site.min.css- bootstrap/tabulator_bootstrap =&gt; react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css- bootstrap/tabulator_bootstrap4 =&gt; react-tabulator/lib/css/bootstrap/tabulator_bootstrap4.min.css- bulma/tabulator_bulma =&gt; react-tabulator/lib/css/bulma/tabulator_bulma.min.css- materialize/tabulator_materialize =&gt; react-tabulator/lib/css/materialize/tabulator_materialize.min.css- semantic-ui/tabulator_semantic-ui =&gt; react-tabulator/lib/css/semantic-ui/tabulator_semantic-ui.min.css# Advanced Usage ## Multiple Row SelectionTabulator supports multiple row selectionTo Enable the table option selectable must be set to the STRING true```pythonoptions = { &quot;selectable&quot;:&quot;true&quot;, ....}``` Once selectable is set ```python@app.callback(Output('output', 'children'),     [Input('tabulator', 'rowClicked'),    Input('tabulator', 'multiRowsClicked')]def clickedRows(rowClicked, multiRowsClicked):  ......  ......```multiRowsClicked will now contain an array of all the rows selectede.g.```python [    {'id': 6, 'name': 'Fred Savage', 'age': '16', 'col': 'yellow', 'rating': '1', 'dob': '31/01/1999', 'print': 'foo'},     {'id': 5, 'name': 'Margret Marmajuke', 'age': '16', 'col': 'yellow', 'dob': '31/01/1999', 'print': 'foo'},     {'id': 4, 'name': 'Brendon Philips', 'age': '125', 'col': 'orange', 'dob': '01/08/1980', 'print': 'foo'},     {'id': 3, 'name': 'Christine Lobowski', 'age': '42', 'col': 'green', 'dob': '22/05/1982', 'print': 'foo'}]```Select all / deselect all can be accomplished with a header formatter called rowSelection.```pythoncolumns = [                {&quot;formatter&quot;:&quot;rowSelection&quot;, &quot;titleFormatter&quot;:&quot;rowSelection&quot;, &quot;hozAlign&quot;:&quot;center&quot;, &quot;headerSort&quot;:&quot;false&quot;},                { &quot;title&quot;: &quot;Name&quot;, &quot;field&quot;: &quot;name&quot;, &quot;width&quot;: 150, &quot;headerFilter&quot;:True, &quot;editor&quot;:&quot;input&quot;},```For more options check out http://tabulator.info/docs/4.8/select## Javascript Tabulator offers a significate amount of callbacks that allow for interactivity with tables to be capturedand modified http://tabulator.info/docs/4.8/callbacksTo enable this functionality we can use Dash-Extensions Create an assets folder, add a javascript file with your custom functionsAn example is provided in assets/custom_tabulator.jsPlease follow the examples below## Javascript Cell Formatting ExampleContributed in https://github.com/preftech/dash-tabulator/pull/11Tabulator offers Javascript formatting of cells http://tabulator.info/docs/3.4?#formattingThis a browser side javascript method attached to a header colum.* Create an assets directory  * See https://dash.plotly.com/external-resources for customization options* Add a javascript file with a window.&lt;CustomNameSpace&gt; method (below we call it myNamespace)  * An example is provided in the assets/custom_tabulator.js file  * Note the Namespace and the function printIcon * Register that method in your python app   * Using  dash_extensions.javascript.Namespace* Add the registered function to your colums formatterPython code:```pythonfrom dash_extensions.javascript import Namespace...ns = Namespace(&quot;myNamespace&quot;, &quot;tabulator&quot;)...columns = [{&quot;formatter&quot;: ns(&quot;printIcon&quot;)}, ...]```Javascript code:```javascriptwindow.myNamespace = Object.assign({}, window.myNamespace, {    tabulator: {        printIcon: function (cell, formatterParams, onRendered) {            return &quot;&lt;i class='fa fa-print'&gt;&lt;/i&gt;&quot;;        }    }});```## Javascript column resizing captureCapturing a column resize, when a user drags a column widthFrom tabulators callbacks page http://tabulator.info/docs/4.8/callbacks#columnWe see there's a columnsResized callbackin our python code in the options dict we can specify a javascript methodassets/custom_tabulator.js```javascriptwindow.myNamespace = Object.assign({}, window.myNamespace, {    tabulator: {        columnResized : function (column, table) {            // column is the tabulator column component            // table is the tabulator instance, can be used for table.setProps() to send data back to dash            console.log(&quot;Column is resized&quot;);            console.log(column)                         // send data back to dash, still under work, only updates when state changes            // be aware of table rendering and resetting back to original display            table.props.setProps({&quot;columnResized&quot;: column._column.field})         }    }});```Within your python code, you can register this method as a tabulator option```pythonfrom dash_extensions.javascript import Namespace...ns = Namespace(&quot;CustomNamespace&quot;, &quot;tabulator&quot;)...options = { &quot;groupBy&quot;: &quot;col&quot;, &quot;selectable&quot;:&quot;true&quot;, &quot;columnResized&quot; : ns(&quot;columnResized&quot;)}```A full list of callbacks available exists http://tabulator.info/docs/4.8/callbacks## Links * Home Page https://github.com/preftech/dash-tabulator* Tabulator from @olifolkerd http://tabulator.info/* React-Tabulator from @ngduc https://github.com/ngduc/react-tabulator* Dash / Plotly from @plotly https://plotly.com/dash/</longdescription>
</pkgmetadata>