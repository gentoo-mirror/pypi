<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HandymanCommon utility framework for ML Services## Install1. To install the handyman library, please use the following command in case of [_pip_](https://pip.pypa.io/en/stable/):```    pip install handyman```* Or add handyman as a poetry dependency.```    handyman = 0.3.5```&gt; Requires Python 3.7 or greater## UsageThe handyman library currently consists of the following packages:* `exceptions`* `io`* `json_utils`* `log`* `prometheus`* `sentry`* `crypto`* `events`To use any of the packages stated above, please use:```pyfrom handyman import &lt;package name&gt;```### Crypto ModuleFull example of new client onboarding to encryption/decryption to deletion of the client##### Generate data key for client (onboarding)``` python    from handyman.crypto import generate_new_data_key    # Random client uuid for example usage purpose    client_uuid = '6a624995-a0f4-43e1-b331-1716457962ce'    # Generate data key for new client (while onboarding)    generate_new_data_key(client_uuid)    # Output - ('vault:v1:tXZ4nHIs3G8xhbLWMuMM8kzdLDgG7pr8B/uyNTz8svK2maNFZM8tkwU/ribGQQO6/5K7Pg2TeOSLia2b', None)    # Store the variable for example usage purpose    encrypted_data_key = 'vault:v1:tXZ4nHIs3G8xhbLWMuMM8kzdLDgG7pr8B/uyNTz8svK2maNFZM8tkwU/ribGQQO6/5K7Pg2TeOSLia2b'```##### Encrypt data with newly created client``` python    from handyman.crypto import encrypt_string    # Encrypt plaintext    encrypt_string(&quot;hello world&quot;, client_uuid, encrypted_data_key)    # Output - ('GICD7oOmX0KbaBzeqzvOxtmK2ntjRH7kiFMmgKH8F6FYbvibASCM', None)    # Store the variable for example usage purpose    encrypted_data = 'GICD7oOmX0KbaBzeqzvOxtmK2ntjRH7kiFMmgKH8F6FYbvibASCM'```##### Decrypt data with the same client``` python    from handyman.crypto import decrypt_base64_string    # Decrypt data (2nd return parameter is an exception if any)    decrypt_base64_string(encrypted_data, client_uuid, encrypted_data_key)    # Output - (b'hello world', None)    # Decrypt data to string (2nd return parameter is an exception if any)    decrypt_base64_string(encrypted_data, client_uuid, encrypted_data_key, decode_to_str=True)    # Output - ('hello world', None)```##### Delete client (offboarding)``` python    from handyman.crypto import transit_delete_key    # Delete client (offboarding)    transit_delete_key(client_uuid)```### Events ModuleThe purpose of this module is to seamlessly integrate usage of event driven systems for python codebases.Example usage -``` python    from handyman.events import send_messages, Events, use_credentials    # Set custom aws credentials (from env/file)    use_credentials(&quot;&lt;aws_access_key_id&gt;&quot;, &quot;&lt;aws_secret_access_key&gt;&quot;, &quot;&lt;aws_region&gt;&quot;)    # Send messages    (success, failed_messages), err = send_messages('&lt;queue_name&gt;', [&quot;hello&quot;, &quot;world&quot;], Events.&lt;event_type&gt;)    # success - bool    # failed_messages - messages failed to send with message id    # err - Exceptions captured```To send a cost event:```pyimport handyman.events as eventsevents.send_cost_event(    events.Service.ASR, events.Vendor.GOOGLE, &quot;client_uuid&quot;, &quot;flow_uuid&quot;, &quot;call_uuid&quot;, &quot;conversation_uuid&quot;)# if you want to count single event as multiple hitsevents.send_cost_event(    events.Service.ASR, events.Vendor.GOOGLE, &quot;client_uuid&quot;, &quot;flow_uuid&quot;, &quot;call_uuid&quot;, &quot;conversation_uuid&quot;, num_hits=2)```## PublishCreate a distribution package:    python setup.py sdistPublish to PyPi:    pip install twine    twine upload dist/*You will be prompted to enter username and password, if you don't have credentials contact `@devops`.</longdescription>
</pkgmetadata>