<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI release](https://img.shields.io/pypi/v/flying-circus.svg)](https://pypi.python.org/pypi/flying-circus)[![Python versions](https://img.shields.io/pypi/pyversions/flying-circus.svg)](https://pypi.python.org/pypi/flying-circus)[![Build Status](https://dev.azure.com/garyd203/flying-circus/_apis/build/status/garyd203.flying-circus?branchName=master)](https://dev.azure.com/garyd203/flying-circus/_build/latest?definitionId=1&amp;branchName=master)[![Documentation Status](https://readthedocs.org/projects/flying-circus/badge/?version=latest)](http://flying-circus.readthedocs.io/en/latest/?badge=latest)[![Downloads](https://img.shields.io/pypi/dm/flying-circus.svg)](https://pypi.python.org/pypi/flying-circus)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)# flying-circusFlying Circus is a tool for describing AWS infrastructure as code (usingPython). It uses the same data structures as the AWS Cloud Formation service,except described as Python objects instead of the usual YAML. The Pythonprogram generates a YAML template, which is passed across to Cloud Formationin the usual manner.It is a bit unusual to use a full programming language to describeinfrastructure, instead of a static configuration file like many of us areused to (whether or not we also utilise a templating tool).We hope that the Flying Circus library can empower DevOps folk by unlockingsome of the techniques that are available for software code, like namedvariables and techniques to structure code independently of the output format,libraries to allow code re-use with versioning, automated refactoring toolsand so on.You can learn how to use Flying Circus yourself by reading the[documentation](https://flying-circus.readthedocs.io/)# InstallationInstall Flying Circus through the Python packaging system:```bashpip install flying-circus```Many people also use the Amazon Web Services command line tools to deploytheir CloudFormation stacks. If you want this, a good way to install anup-to-date version is also with `pip`:```bash# Optionalpip install awscli```# ExampleHere is a simple example of how you can use Flying Circus to describe some EC2instances and deploy them using the AWS CloudFormation service.First, create a python script (called `my_ec2_stack.py` in this case) todescribe your infrastructure. Any valid Python can be used to create theFlying Circus objects, along with any valid CloudFormation properties andattributes.This example is intentionally simplistic - it just creates two EC2 instanceswith varying configuration, and outputs the internal IP for one. However, itdoes hint at some of the more complex and powerful usage patterns.```pythonimport osfrom flyingcircus.core import Stack, Outputfrom flyingcircus.intrinsic_function import GetAttfrom flyingcircus.service.ec2 import *def create_ec2_instance(name, instance_type=&quot;t2.micro&quot;):    instance = Instance(Properties=InstanceProperties(        ImageId=&quot;ami-942dd1f6&quot;,        InstanceType=instance_type,        Monitoring=False,    ))    instance.name = name    return instanceif __name__ == &quot;__main__&quot;:    stack = Stack()    stack.Resources[&quot;WebServer&quot;] = create_ec2_instance(&quot;webserver&quot;)    stack.Resources[&quot;DatabaseServer&quot;] = dbserver = create_ec2_instance(&quot;dbserver&quot;, &quot;t2.medium&quot;)    dbserver.DeletionPolicy = &quot;Retain&quot;    stack.Outputs[&quot;DatabaseServerIp&quot;] = Output(        Description=f&quot;Internal IP address for the database server&quot;,        Value=GetAtt(dbserver, &quot;PrivateIp&quot;),    )    stack.tag(application=&quot;api-service&quot;, environment=&quot;test&quot;, owner=os.environ.get(&quot;USER&quot;))    print(stack.export(&quot;yaml&quot;))```Now generate CloudFormation YAML from your Python script. Note that the resultwill *always* be valid well-formatted YAML, and internal checks mean that itis also difficult to generate invalid CloudFormation.Finally, use the AWS command line tools to create/update a stack and it'sassociated resources.```bashpython my_ec2_stack.py &gt; my_ec2_stack.yamlaws cloudformation deploy --stack-name demo-flying-circus-ec2 --template-file my_ec2_stack.yaml```You could do these steps in your Continuous Integration server ;-)# Is/Is NotThere's a lot of tools for managing Infrastructure as Code, often with subtledifferences and passionate advocates. A quick discussion of our scope mayhelp you understand where Flying Circus fits into this ecosystem, and whether it canhelp you. This is presented in the simple &quot;Is/Is Not&quot; format.## Flying Circus Is...* ...a Pythonic DSL for writing fully featured Python code* ...for Amazon Web Services infrastructure* ...built on top of AWS [Cloud Formation templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-guide.html)* ...a generator that always produces valid, consistent, human-readable, good-practice YAML## Flying Circus Is Not...* ...YAML or JSON. It's Python.* ...a tool to make it easier to write YAML or JSON. You write Python, and YAML is an output format.* ...a DSL with a completely new syntax. You use normal Python syntax with all  of it's features and nothing changed.* ...a templating language, like Jinja2.* ...a template management tool, like Ansible.* ...an independent implementation of infrastructure management, like AWS  Cloud Formation stacks, or Terraform.* ...a cloud-agnostic abstraction layer.* ...multi-cloud - although it could become this in the future.  The current implementation is focused on representing AWS infrastructure  using the CloudFormation data model. Other cloud providers have similar  native data models, so it is feasible that we could re-use the concepts and  tooling to support Google Cloud Platform, etc.* ...a tool for interacting with the Cloud Formation service. There  are other tools that can do this for you (such as boto3 or the AWS CLI,  for starters)* ...a validation tool - although it could become this in the future, and  already has elements of validation as a by-product of presenting a helpful  interface to users.# Sounds Great, Can I Use It?Sure, of course you can. The [documentation will get you started](https://flying-circus.readthedocs.io/en/latest/getting_started.html).Flying Circus is currently in **Beta**. This means it is expectedto work for the supported AWS services, and is in use by real customers.However, the details of the interface and implementation are still beingvalidated and may change drastically.# How Do I Help?Just use it!</longdescription>
</pkgmetadata>