<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Direct-Redis* Serialize any python datatypes and executes redis commands using redis-py* When loading, it auutomatically converts serialized data into original data types ## Getting Started### Install via pypi`pip install direct-redis`### Instantiate ```from direct_redis import DirectRedisr = DirectRedis(host='localhost', port=6379)```## Supporting Data Types* Built-in    * string    * number(int, float)    * dictionary    * list    * tuple    * etc (all other python built-in types)* Module Classes    * pandas    * numpy## Supporting Redis Commands### Direct-Redis Supports* Basic Functions    * KEYS    * RANDOMKEY    * TYPE    * SET    * GET* Hash Functions    * HKEYS    * HSET    * HMSET    * HGET    * HMGET    * HGETALL    * HVALS* Set Functions    * SADD    * SREM    * SMEMBERS    * SPOP    * SDIFF    * SCARD (Default)    * SRANDMEMBER* List Functions    * LPUSH    * RPUSH    * LPUSHX    * RPUSHX    * LRANGE    * LPOP    * RPOP    * LINDEX## Examples### String* Originally redis stores string into bytes.```&gt;&gt;&gt; s = &quot;This is a String. \n스트링입니다.&quot;&gt;&gt;&gt; print(s)This is a String.스트링입니다.   &gt;&gt;&gt; r.set('s', s)   &gt;&gt;&gt; r.get('s')   'This is a String. \n스트링입니다.'    &gt;&gt;&gt; type(r.get('s'))&lt;class 'str'&gt;```### Numbers```&gt;&gt;&gt; mapping = {...     'a': 29,...     'b': 0.5335113,...     'c': np.float64(0.243623466363223),... }   &gt;&gt;&gt; r.hmset('nums', mapping)   &gt;&gt;&gt; r.hmget('nums', *mapping.keys())   [29, 0.5335113, 0.243623466363223]    &gt;&gt;&gt; list(mapping.values()) == r.hmget('nums', *mapping.keys())True```### Nested Dictionaries and Lists```&gt;&gt;&gt; l = [1,2,3]&gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}   &gt;&gt;&gt; r.hmset('list and dictionary', {'list': l, 'dict': d})   &gt;&gt;&gt; r.hgetall(&quot;list and dictionary&quot;){'list': [1, 2, 3], 'dict': {'a': 1, 'b': 2, 'c': 3}}&gt;&gt;&gt; type(r.hgetall(&quot;list and dictionary&quot;)['list'])&lt;class 'list'&gt;   &gt;&gt;&gt; type(r.hgetall(&quot;list and dictionary&quot;)['dict'])&lt;class 'dict'&gt;```### Pandas DataFrame```&gt;&gt;&gt; df =  pd.DataFrame([[1,2,3,'235', '@$$#@'],                        ['a', 'b', 'c', 'd', 'e']])&gt;&gt;&gt; print(df)   0  1  2    3      40  1  2  3  235  @$$#@1  a  b  c    d      e   &gt;&gt;&gt; r.set('df', df)   &gt;&gt;&gt; r.get('df')   0  1  2    3      40  1  2  3  235  @$$#@1  a  b  c    d      e   &gt;&gt;&gt; type(r.get('df'))&lt;class 'pandas.core.frame.DataFrame'&gt;```### Numpy Array```&gt;&gt;&gt; arr = np.random.rand(10).reshape(5, 2)&gt;&gt;&gt; print(arr)[[0.25873887 0.00937433] [0.0472811  0.94004351] [0.92743943 0.93898677] [0.87706341 0.85135288] [0.06390652 0.86362001]]   &gt;&gt;&gt; r.set('a', arr)   &gt;&gt;&gt; r.get('a')   array([[0.25873887, 0.00937433],       [0.0472811 , 0.94004351],       [0.92743943, 0.93898677],       [0.87706341, 0.85135288],       [0.06390652, 0.86362001]])   &gt;&gt;&gt; type(r.get('a'))&lt;class 'numpy.ndarray'&gt;```# Author`direct-redis` is developed and maintained by Yonghee Cheon (yonghee.cheon@gmail.com).      It can be found here: https://github.com/yonghee12/direct-redisSpecial thanks to:* Andy McCurdy, the author of redis-py.</longdescription>
</pkgmetadata>