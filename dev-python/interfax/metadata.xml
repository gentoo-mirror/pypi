<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>InterFAX Python Package=======================.. image:: https://travis-ci.org/interfax/interfax-python.svg?branch=master    :target: https://travis-ci.org/interfax/interfax-python`Installation`_ \| `Getting Started`_ \| `Contributing`_ \| `Usage`_ \| `License`_Send and receive faxes in Python with the`InterFAX &lt;https://www.interfax.net/en/dev&gt;`__ REST API.Installation------------This package requires Python 2.6+. You can install it using:::    pip install interfaxGetting started---------------To send a fax from a PDF file:.. code:: python    from interfax import InterFAX    interfax = InterFAX(username=&quot;username&quot;, password=&quot;password&quot;)    fax = interfax.deliver(fax_number=&quot;+11111111112&quot;, files=[&quot;folder/fax.pdf&quot;])    fax = fax.reload() # resync with API to get latest status    fax.status # Success if 0. Pending if &lt; 0. Error if &gt; 0Usage=====`Client`_ \| `Account`_ \| `Outbound`_ \| `Inbound`_ \| `Documents`_ \| `Helper Classes`_Client------The client follows the `12-factor &lt;http://12factor.net/config&gt;`__ appsprinciple and can be either set directly or via environment variables... code:: python    # Initialize using parameters    interfax = InterFAX(username=&quot;...&quot;, password=&quot;...&quot;)    # Alternatice: Initialize using environment variables    # * INTERFAX_USERNAME    # * INTERFAX_PASSWORD    interfax = InterFAX()All connections are established over HTTPS.Account-------Balance~~~~~~~Determine the remaining faxing credits in your account... code:: python    &gt;&gt;&gt;  interfax.account.balance()    9.86**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/3001&gt;`__Outbound--------`Send fax`_ \| `Get outbound fax list`_ \| `Get completed fax list`_ \| `Get outbound fax record`_ \| `Get outbound fax image`_ \| `Cancel a fax`_ \| `Search fax list`_Send fax~~~~~~~~``interfax.outbound.deliver(fax_number, files, **kwargs)``Submit a fax to a single destination number.There are a few ways to send a fax. One way is to directly provide afile path or url... code:: python    # with a path    interfax.outbound.deliver(fax_number=&quot;+11111111112&quot;, files=[&quot;folder/fax.txt&quot;])    # with a URL    interfax.outbound.deliver(fax_number=&quot;+11111111112&quot;, files=[&quot;https://s3.aws.com/example/fax.pdf&quot;])InterFAX supports over 20 file types including HTML, PDF, TXT, Word, andmany more. For a full list see the `Supported FileTypes &lt;https://www.interfax.net/en/help/supported_file_types&gt;`__documentation.The returned object is a ``OutboundFax`` with just an ``id``. You canuse this object to load more information, get the image, or cancel thesending of the fax... code:: python    fax = interfax.outbound.deliver(fax_number=&quot;+11111111112&quot;, files=[&quot;fax.pdf&quot;])    fax = fax.reload() # Reload fax, allowing you to inspect the status and more    fax.id        # the ID of the fax that can be used in some of the other API calls    fax.image()     # returns an image representing the fax sent to the fax_number    fax.cancel()    # cancel the sending of the faxAlternatively you can create an `File &lt;#file&gt;`__ with binary data andpass this in as well... code:: python    with open(&quot;fax.pdf&quot;, &quot;rb&quot;) as fp:        f = interfax.files.create(fp.read(), mime_type=&quot;application/pdf&quot;)    interfax.outbound.deliver(fax_number=&quot;+11111111112&quot;, files=[f])To send multiple files just pass in a list of strings and `File`_ objects... code:: python    interfax.outbound.deliver(fax_number=&quot;+11111111112&quot;, files=[&quot;fax.pdf&quot;, &quot;https://s3.aws.com/example/fax.pdf&quot;])Under the hood every path and string is turned into a`File &lt;#interfaxfile&gt;`__ object. For more information see `thedocumentation &lt;#interfaxfile&gt;`__ for this class.**Keyword Arguments:** ``contact``, ``postpone_time``,``retries_to_perform``, ``csid``, ``page_header``, ``reference``,``page_size``, ``fit_to_page``, ``page_orientation``, ``resolution``,``rendering``**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2918&gt;`__**Alias**: ``interfax.deliver``--------------Get outbound fax list~~~~~~~~~~~~~~~~~~~~~``interfax.outbound.all(**kwargs)``Get a list of recent outbound faxes (which does not include batchfaxes)... code:: python    &gt;&gt;&gt; interfax.outbound.all()    [OutboundFax(id=1), ...]    &gt;&gt;&gt; interfax.outbound.all(limit=1)    [OutboundFax(id=1)]**Keyword Arguments:** ``limit``, ``last_id``, ``sort_order``,``user_id``**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2920&gt;`__--------------Get completed fax list~~~~~~~~~~~~~~~~~~~~~~``interfax.outbound.completed(*args)``Get details for a subset of completed faxes from a submitted list.(Submitted id's which have not completed are ignored)... code:: python    &gt;&gt; interfax.outbound.completed(123, 234)    [OutboundFax(id=123), ...]**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2972&gt;`__--------------Get outbound fax record~~~~~~~~~~~~~~~~~~~~~~~``interfax.outbound.find(fax_id)``Retrieves information regarding a previously-submitted fax, includingits current status... code:: python    &gt;&gt;&gt; interfax.outbound.find(123456)    OutboundFax(id=123456)**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2921&gt;`__--------------Get outbound fax image~~~~~~~~~~~~~~~~~~~~~~``interfax.outbound.image(fax_id)``Retrieve the fax image (TIFF file) of a submitted fax... code:: python    &gt;&gt;&gt; image = interfax.outbound.image(123456)    Image(id=123456)    &gt;&gt;&gt; image.data    &quot;....binary data....&quot;    &gt;&gt;&gt; image.save(&quot;fax.tiff&quot;)    # saves image to file**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2941&gt;`__--------------Cancel a fax~~~~~~~~~~~~``interfax.outbound.cancel(fax_id)``Cancel a fax in progress... code:: python    interfax.outbound.cancel(123456)    =&gt; true**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2939&gt;`__--------------Search fax list~~~~~~~~~~~~~~~``interfax.outbound.search(**kwargs)``Search for outbound faxes... code:: python    &gt;&gt;&gt; interfax.outbound.search(fax_number=&quot;+1230002305555&quot;)    [OutboundFax(id=1234), ...]**Keyword Arguments:** ``ids``, ``reference``, ``date_from``,``date_to``, ``status``, ``user_id``, ``fax_number``, ``limit``,``offset``**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2959&gt;`__Inbound-------`Get inbound fax list`_ \| `Get inbound fax record`_ \| `Get inbound fax image`_ \| `Get forwarding emails`_ \| `Mark as read/unread`_ \| `Resend inbound fax`_Get inbound fax list~~~~~~~~~~~~~~~~~~~~``interfax.inbound.all(**kwargs)``Retrieves a user's list of inbound faxes. (Sort order is always indescending ID)... code:: python    interfax.inbound.all()    =&gt; [InboundFax(id=1234), ...]    interfax.inbound.all(limit=1)    =&gt; [InboundFax(id=1234)]**Keyword Arguments:** ``unread_only``, ``limit``, ``last_id``,``all_users``**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2935&gt;`__--------------Get inbound fax record~~~~~~~~~~~~~~~~~~~~~~``interfax.inbound.find(fax_id)``Retrieves a single fax's metadata (receive time, sender number, etc.)... code:: python    &gt;&gt;&gt; interfax.inbound.find(123456)    InboundFax(id=123456)**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2938&gt;`__--------------Get inbound fax image~~~~~~~~~~~~~~~~~~~~~``interfax.inbound.image(fax_id)``Retrieves a single fax's image... code:: python    &gt;&gt;&gt; image = interfax.inbound.image(123456)    Image(id=123456)    &gt;&gt;&gt; image.data    &quot;....binary data....&quot;    &gt;&gt;&gt; image.save(&quot;fax.tiff&quot;)    # saves image to file**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2937&gt;`__--------------Get forwarding emails~~~~~~~~~~~~~~~~~~~~~``interfax.inbound.emails(fax_id)``Retrieve the list of email addresses to which a fax was forwarded... code:: python    interfax.inbound.email(123456)    [ForwardingEmail()]**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2930&gt;`__--------------Mark as read/unread~~~~~~~~~~~~~~~~~~~``interfax.inbound.mark(fax_id, read=True)``Mark a transaction as read/unread... code:: python    interfax.inbound.mark(123456, read=True) # mark read    interfax.inbound.mark(123456, read=False) # mark unread**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2936&gt;`__--------------Resend inbound fax~~~~~~~~~~~~~~~~~~``interfax.inbound.resend(fax_id, email=None)``Resend an inbound fax to a specific email address... code:: python    &gt;&gt;&gt; # resend to the email(s) to which the fax was previously forwarded    &gt;&gt;&gt; interfax.inbound.resend(123456)    True    &gt;&gt;&gt; # resend to a specific address    &gt;&gt;&gt; interfax.inbound.resend(123456, email=&quot;test@example.com&quot;)    True**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2929&gt;`__--------------Documents---------`Create Documents`_ \| `Upload chunk`_ \| `Get document list`_ \| `Get document status`_ \| `Cancel document`_Document allow for uploading of large files up to 20MB in 200kb chunks.The `File`_ format automatically uses this if needed but asample implementation would look as followed... code:: python    document = interfax.documents.create(&quot;test.pdf&quot;, os.stat(&quot;test.pdf&quot;).st_size)    with open(&quot;test.pdf&quot;, &quot;rb&quot;) as fp:        cursor = 0        while True:            chunk = fp.read(500)            if not chunk:                break            next_cursor = cursor + len(chunk)            document.upload(cursor, next_cursor-1, chunk)            cursor = next_cursorCreate Documents~~~~~~~~~~~~~~~~``interfax.documents.create(name, size, **kwargs)``Create a document upload session, allowing you to upload large files inchunks... code:: python    &gt;&gt;&gt; interfax.documents.create(&quot;large_file.pdf&quot;, 231234)    Document(id=123456)**Keyword Arguments:** ``disposition``, ``sharing``**More:**`documentation  &lt;https://www.interfax.net/en/dev/rest/reference/2967&gt;`__--------------Upload chunk~~~~~~~~~~~~``interfax.documents.upload(id, range_start, range_end, chunk)``Upload a chunk to an existing document upload session... code:: python    &gt;&gt;&gt; interfax.documents.upload(123456, 0, 999, &quot;....binary-data....&quot;)    True**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2966&gt;`__--------------Get document list~~~~~~~~~~~~~~~~~``interfax.documents.all(options = {})``Get a list of previous document uploads which are currently available... code:: python    &gt;&gt;&gt; interfax.documents.all()    [Document(id=123456), ...]    &gt;&gt;&gt; interfax.documents.all(offset=10)    [Document(id=123466), ...]**Keyword Arguments:** ``limit``, ``offset``**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2968&gt;`__--------------Get document status~~~~~~~~~~~~~~~~~~~``interfax.documents.find(id)``Get the current status of a specific document upload... code:: python    &gt;&gt;&gt; interfax.documents.find(123456)    Document(id=123456)**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2965&gt;`__--------------Cancel document~~~~~~~~~~~~~~~``interfax.documents.cancel(id)``Cancel a document upload and tear down the upload session, or delete aprevious upload... code:: python    &gt;&gt;&gt; interfax.documents.cancel(123456)    True**More:**`documentation &lt;https://www.interfax.net/en/dev/rest/reference/2964&gt;`__--------------Helper Classes--------------OutboundFax~~~~~~~~~~~The ``OutboundFax`` is returned in most Outbound APIs. As a conveniencethe following methods are available... code:: python    fax = interfax.outbound.find(123)    fax = fax.reload() # Loads or reloads object    fax.cancel() # Cancels the fax    fax.image() # Returns an `Image` for this faxInboundFax~~~~~~~~~~The ``InboundFax`` is returned in some of the Inbound APIs. As aconvenience the following methods are available... code:: python    fax = interfax.inbound.find(123)    fax = fax.reload() # Loads or reloads object    fax.mark(true) # Marks the fax as read/unread    fax.resend(email) # Resend the fax to a specific email address.    fax.image() # Returns an `Image` for this fax    fax.emails() # Returns a list of ForwardingEmail objects that the fax was forwarded on toImage~~~~~A lightweight wrapper around the image data for a sent or received fax.Provides the following convenience methods... code:: python    image = interfax.outbound.image(123)    image.data # Returns the raw binary data for the TIFF image.    image.save(&quot;folder/fax.tiff&quot;) # Saves the TIFF to the path providedFile~~~~This class is used by ``interfax.outbound.deliver`` and``interfax.files`` to turn every URL, path and binary data into auniform format, ready to be sent out to the InterFAX API.It is most useful for sending binary data to the ``.deliver`` method... code:: python    &gt;&gt;&gt; # binary data    &gt;&gt;&gt; f = File(interfax, &quot;....binary data.....&quot;, mime_type=&quot;application/pdf&quot;)    File()    &gt;&gt;&gt; # Alternatively    &gt;&gt;&gt; f = interfax.files.create(&quot;....binary data.....&quot;, mime_type=&quot;application/pdf&quot;)    &gt;&gt;&gt; f.headers    {&quot;Content-Type&quot;: &quot;application/pdf&quot;}    &gt;&gt;&gt; f.body    &quot;....binary data.....&quot;    interfax.outbound.deliver(fax_number=&quot;+1111111111112&quot;, files=[f])Additionally it can be used to turn a URL or path into a valid object aswell, though the ``.deliver`` method does this conversion automatically... code:: python    &gt;&gt;&gt; # a file by path    &gt;&gt;&gt; f = interfax.files.create(&quot;foo/bar.pdf&quot;)    &gt;&gt;&gt; f.headers    { &quot;Content-Type&quot;: &quot;application/pdf&quot; }    &gt;&gt;&gt; f.body    &quot;....binary data.....&quot;    &gt;&gt;&gt; # a file by url    &gt;&gt;&gt; f = interfax.files.create(&quot;https://foo.com/bar.html&quot;)    &gt;&gt;&gt; f.headers    {&quot;Content-Location&quot;: &quot;https://foo.com/bar.html&quot;}    &gt;&gt;&gt; f.body    NoneForwardingEmail~~~~~~~~~~~~~~~A light wrapper around `theresponse &lt;https://www.interfax.net/en/dev/rest/reference/2930&gt;`__ received byasking for the forwarded emails for a fax... code:: python    fax = interfax.inbound.find(123)    email = fax.emails()[0]    email.email_address # An email address to which forwarding of the fax was attempted.    email.message_status # 0 = OK; number smaller than zero = in progress; number greater than zero = error.    email.completion_time # Completion timestamp.Document~~~~~~~~The ``Document`` is returned in most of the Document APIs. As aconvenience the following methods are available... code:: python    document = interfax.documents.find(123)    document = document.reload() # Loads or reloads object    document.upload(0, 999, &quot;.....binary data....&quot; # Maps to the interfax.documents.upload method    document.cancel() # Maps to the interfax.documents.cancel method    document.id  # Extracts the ID from the URI (the API does not return the ID)Contributing------------#. **Fork** the repo on GitHub#. **Clone** the project to your own machine#. **Commit** changes to your own branch#. **Push** your work back up to your fork#. Submit a **Pull request** so that we can review your changesLicense-------This library is released under the `MIT License &lt;https://github.com/interfax/interfax-python/blob/master/LICENSE&gt;`__.</longdescription>
</pkgmetadata>