<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mkdocs-diagramsA plugin for the [MkDocs] documentation site generator which facilitates easy embedding of system architecture diagrams through the [Diagrams] project ([view examples]).## Installation`mkdocs-diagrams` is available on PyPI.It can be installed through `pip install mkdocs-diagrams` or equivalent command with pipenv or poetry.You'll also need to have the [graphviz] `dot` tool installed on your system.It's available as `graphviz` in most package managers.Once installed, configure MkDocs to use this plugin by including `diagrams` in the `plugins` list in your `mkdocs.yml`.For example:```yamlplugins:  - diagrams  - search```(If you don't have a `plugins` key in your config yet, you'll almost surely want to include `search` as well.It's a default plugin that will otherwise get deactivated.)## Usage&gt; **Warning:** This plugin will execute `.diagram.py` files during build, as that is how [Diagrams] itself operates.&gt; Be careful using this plugin with untrusted input as this effectively allows arbitrary code execution.Once installed, the diagrams plugin can be used by including diagrams files in your docs directory.For example, create a file named `example.diagrams.py` with the following contents:```pythonfrom diagrams import Cluster, Diagramfrom diagrams.aws.compute import ECS, EKS, Lambdafrom diagrams.aws.database import Redshiftfrom diagrams.aws.integration import SQSfrom diagrams.aws.storage import S3with Diagram(&quot;Event Processing&quot;, show=False):    source = EKS(&quot;k8s source&quot;)    with Cluster(&quot;Event Flows&quot;):        with Cluster(&quot;Event Workers&quot;):            workers = [ECS(&quot;worker1&quot;),                       ECS(&quot;worker2&quot;),                       ECS(&quot;worker3&quot;)]        queue = SQS(&quot;event queue&quot;)        with Cluster(&quot;Processing&quot;):            handlers = [Lambda(&quot;proc1&quot;),                        Lambda(&quot;proc2&quot;),                        Lambda(&quot;proc3&quot;)]    store = S3(&quot;events store&quot;)    dw = Redshift(&quot;analytics&quot;)    source &gt;&gt; workers &gt;&gt; queue &gt;&gt; handlers    handlers &gt;&gt; store    handlers &gt;&gt; dw```When MkDocs is run (either with `build` or `serve`), this will result in a file named `event_processing.png` being created.Include this in your markdown files using regular image syntax: `![Event processing architecture](event_processing.png)`## ConfigurationThis plugin supports a few config options, which can be set as follows:```yamlplugins:  - diagrams:      file_extension: &quot;.diagrams.py&quot;      max_workers: 5```### `file_extension`Sets the filename extension for diagram files.When `mkdocs build` or `mkdocs serve` is run, all files ending in this extension will be executed.Default: `.diagrams.py`### `max_workers`A pool of workers is used to render diagram files in parallel on multi-core systems.Setting this allows you to limit the number of workers to this amount.Default: Dynamically chosen (`os.cpu_count() + 2`)[diagrams]: https://diagrams.mingrammer.com/[graphviz]: https://www.graphviz.org/[mkdocs]: https://www.mkdocs.org/[view examples]: https://diagrams.mingrammer.com/docs/getting-started/examples</longdescription>
</pkgmetadata>