<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>---------------------------------------------------password - hashed passwords generation utility---------------------------------------------------The password module offers you a single utility class called ``Password``.This class is meant to be used as an attribute of any other object class onwhich you want to store passwords in hashed mode. This module isframework-agnostic so it is up to you to provide persistence (you need to store'hash' and 'salt' set on the object).Example usage-----------------------------------------Create your class::    &gt;&gt;&gt; import password    &gt;&gt;&gt; class User():    ...     password = password.Password(method='sha1', hash_encoding='base64')            # You also probably want to create 'hash' and 'salt' attributes            # With your chosen persistence mechanismSet a password on the object::    &gt;&gt;&gt; user = User()    &gt;&gt;&gt; user.password = 'abcdef'You cannot read the password back::    &gt;&gt;&gt; user.password    &lt;password._HashedPassword object at 0x7fdba1fef990&gt;but you can see, that hash and salt areset::    &gt;&gt;&gt; user.hash    'L1Fz6aoIdIlZzoxsXPWxJq8zNTQ='    &gt;&gt;&gt; user.salt    'VIboVvtr'You can also check for equality with a string::    &gt;&gt;&gt; user.password == 'abcdef'    True    &gt;&gt;&gt; user.password == '12345'    False</longdescription>
</pkgmetadata>