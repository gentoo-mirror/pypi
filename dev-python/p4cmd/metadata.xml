<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### P4CMD ðŸŒ´A Python Perforce package that doesn't bring in any other packages to work. Relies on p4cli installed on the system.## p4cmdThe `p4cmd` module holds the P4Client class that allows you to interact with the P4 server.To instantiate a new client, you either pass it the root path of you Perforce workspace or if the &quot;P4ROOT&quot; system variable is set, you can use the `from_env` class function```pythonfrom p4cmd import p4cmdclient = p4cmd.P4Client(&quot;~/nisse/projects/raw&quot;)```If you pass in a path into `P4Client` that doesn't have a `.p4config` file in it, the class will travel up the chain of parent folders to find a `.p4config` file. When found, `perforce_root` will be set to this folder.```pythonfrom p4cmd import p4cmdimport os# settings system variableos.environ[&quot;P4ROOT&quot;] = &quot;~/nisse/projects/raw&quot;# now we can use from_envclient = p4cmd.P4Client.from_env()```Most of the functions are pretty self explanatory and have docstrings about how they work. There are 2 functions called `file_to_p4files` and `folder_to_p4files` that use the `P4File` class in `p4file`. ## p4fileThis module holds the `P4File` class that allows you to quickly and easily get information about any file on disk or in the depot. ## UsageSome use case examples to help you on your way.Checking out files or adding new files. You can mix/match local and depot paths. Add a changelist number or description to put the files in that CL. If you add a description of a changelist that doesn't exist, it will be created. ```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;files = [r&quot;~/p4/MyGame/Raw/Characters/info_file.json&quot;,         &quot;//MyGame/Main/Templates/morefiles.json&quot;]p4 = p4cmd.P4Client(root)p4.add_or_edit_files(files, changelist=&quot;My new changelist&quot;)```Separate `edit_files` and `add_files` methods also exist if you need to use them for some reason. Perforce operations can be quite slow, so if you need to check a bunch of files at once you can use do something like this:```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;folder = r&quot;~/p4/MyGame/Animations&quot;p4 = p4cmd.P4Client(root)p4files = p4.folder_to_p4files(folder)files_to_sync = []for p4file in p4files:    if p4file.get_checked_out_by() is not None: # somebody else other than you checked out the file        print(&quot;depot path:&quot;, p4file.get_depot_file_path())        print(&quot;local path:&quot;, p4file.get_local_file_path())        print(&quot;status:&quot;, p4file.get_status())        print(&quot;Checked out by:&quot;, p4file.get_checked_out_by())    if p4file.needs_syncing():        files_to_sync.append(p4file.get_local_file_path())p4.sync_files([files_to_sync])``````textdepot path: //MyGame/Main/MyGame/run.fbxlocal path: ~/p4/MyGame/MyGame/run.fbxstatus: UP_TO_DATEChecked out by: barack.obama@barack.obama-US-BOBAMA-MyGamedepot path: //MyGame/Main/MyGame/dance.jsonlocal path: ~/p4/MyGame/MyGame/dance.jsonstatus: NEED_SYNC````folder_to_p4files` returns a list of type p4file. A p4file has a bunch of functions to get information about the file and its status. This will get information back about all the files in one go, instead of you having to make a server call for every file on its own. Getting all your pending changelists:```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)all_changelists = p4.get_pending_changelists()````[35272, 33160, 32756, 30872, 27277]`Getting changelists with shelved files:```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)shelved_changelists = [pair[1] for pair in p4.get_shelved_files()]````[30872, 30872, 27277]`Searching in changelist descriptions:```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)houdini_cls = p4.get_pending_changelists(description_filter=&quot;houdini&quot;)````[35272, 33160]`Finding an exact changelist:```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)houdini_anim_cl = p4.get_pending_changelists(description_filter=&quot;[houdini tools]&quot;, perfect_match_only=True, case_sensitive=True)````[33160]`Listing all the files in a changelist by changelist number:```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)files = p4.get_files_in_changelist(33160)``````text//MyGame/Animations/a_pose.fbx//MyGame/Animations/t_pose.fbx```List all the files in a changelist by changelist description:```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)files = p4.get_files_in_changelist(&quot;[houdini tools]&quot;)``````text//MyGame/Animations/a_pose.fbx//MyGame/Animations/t_pose.fbx```Submit a changelist with the description &quot;Character files&quot;, but **don't** revert unchanged files first. ```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)p4.submit_changelist(&quot;Character files&quot;, revert_unchanged_files=False)```Sync all the files in a folder, but first set the parallel connections to 2```pythonfrom p4cmd import p4cmdroot = &quot;~/p4/MyGame&quot;p4 = p4cmd.P4Client(root)p4.set_max_parallel_connections(2)p4.sync_folders([&quot;//Content/Basketball/Players/&quot;])```</longdescription>
</pkgmetadata>