<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CPG Generator``` ██████╗██████╗  ██████╗██╔════╝██╔══██╗██╔════╝██║     ██████╔╝██║  ███╗██║     ██╔═══╝ ██║   ██║╚██████╗██║     ╚██████╔╝ ╚═════╝╚═╝      ╚═════╝```CPG Generator is a python cli tool to generate [Code Property Graph](https://cpg.joern.io) for multiple languages. The generated CPG can be directly imported to [Joern](https://joern.io) or uploaded to [Qwiet.AI](https://docs.shiftleft.io/home) for analysis.## Pre-requisites- JDK 11 or above- Python 3.10- Docker or podman (Windows, Linux or Mac) or- Joern [natively installed](https://docs.joern.io/installation) (Linux only)## Installationcpggen is available as a [PyPI package](https://pypi.org/project/cpggen/) or as a [container image](https://github.com/AppThreat/cpggen/pkgs/container/cpggen).```pip install cpggen```Bundled container image```docker pull ghcr.io/appthreat/cpggen# podman pull ghcr.io/appthreat/cpggen```Or use the nightly to always get the latest joern and tools.```docker pull ghcr.io/appthreat/cpggen:nightly# podman pull ghcr.io/appthreat/cpggen:nightly```### Single executable binariesDownload the executable binary for your operating system from the [releases page](https://github.com/appthreat/cpggen/releases). These binary bundle the following:- Joern with all the CPG frontends- cpggen with Python 3.10- cdxgen with Node.js 18 - Generates SBoM```bashcurl -LO https://github.com/AppThreat/cpggen/releases/download/v0.9.2/cpggen-linux-amd64chmod +x cpggen-linux-amd64./cpggen-linux-amd64 --help```On Windows,```powershellcurl -LO https://github.com/appthreat/cpggen/releases/download/v0.9.2/cpggen.exe.\cpggen.exe --help```### OCI Artifacts via ORAS cliUse [ORAS cli](https://oras.land/cli/) to download the cpggen binary with Python and Node.js preinstalled.```bashoras pull ghcr.io/appthreat/cpggen-bin:v1chmod +x cpggen-linux-amd64./cpggen-linux-amd64 --help```## UsageTo auto detect the language from the current directory and generate CPG.```cpggen```To specify input and output directory.```cpggen -i &lt;src directory&gt; -o &lt;CPG directory or file name&gt;```You can even pass a git url as source```cpggen -i https://github.com/HooliCorp/vulnerable-aws-koa-app -o /tmp/cpg```To specify language type.```cpggen -i &lt;src directory&gt; -o &lt;CPG directory or file name&gt; -l java# Comma separated values are accepted for multiple languagescpggen -i &lt;src directory&gt; -o &lt;CPG directory or file name&gt; -l java,js,python```Container based invocation```docker run --rm -it -v /tmp:/tmp -v $(pwd):/app:rw --cpus=4 --memory=16g -t ghcr.io/appthreat/cpggen cpggen -i &lt;src directory&gt; -o &lt;CPG directory or file name&gt;```### Export graphsBy passing `--export`, cpggen can export the various graphs to many formats using [joern-export](https://docs.joern.io/exporting/)Example to export `all` graphs in `dot` format```bashcpggen -i ~/work/sandbox/crAPI -o ~/work/sandbox/crAPI/cpg_out --build --export --export-out-dir ~/work/sandbox/crAPI/export_out```To export `pdg` in `neo4jcsv` format```bashcpggen -i ~/work/sandbox/crAPI -o ~/work/sandbox/crAPI/cpg_out --build --export --export-out-dir ~/work/sandbox/crAPI/export_out --export-repr pdg --export-format neo4jcsv```### Artifacts producedUpon successful completion, cpggen would produce the following artifacts in the directory specified under `out_dir`- {name}-{lang}-cpg.bin.zip - Code Property Graph for the given language type- {name}-{lang}-cpg.bom.xml - SBoM in CycloneDX XML format- {name}-{lang}-cpg.bom.json - SBoM in CycloneDX json format- {name}-{lang}-cpg.manifest.json - A json file listing the generated artifacts and the invocation commands## Server modecpggen can run in server mode.```cpggen --server```You can invoke the endpoint `/cpg` to generate CPG.```curl &quot;http://127.0.0.1:7072/cpg?src=/Volumes/Work/sandbox/vulnerable-aws-koa-app&amp;out_dir=/tmp/cpg_out&amp;lang=js&quot;``````curl &quot;http://127.0.0.1:7072/cpg?url=https://github.com/HooliCorp/vulnerable-aws-koa-app&amp;out_dir=/tmp/cpg_out&amp;lang=js&quot;```## Languages supported| Language    | Requires build || ----------- | -------------- || C           | No             || C++         | No             || Java        | No (\*)        || Scala       | Yes            || Jsp         | Yes            || Jar/War     | No             || JavaScript  | No             || TypeScript  | No             || Kotlin      | No (\*)        || Php         | No             || Python      | No             || C# / dotnet | Yes            || Go          | Yes            |(\*) - Precision could be improved with dependencies## Environment variables| Name                    | Purpose                                                           || ----------------------- | ----------------------------------------------------------------- || JOERN_HOME              | Joern installation directory                                      || CPGGEN_HOST             | cpggen server host. Default 127.0.0.1                             || CPGGEN_PORT             | cpggen server port. Default 7072                                  || CPGGEN_CONTAINER_CPU    | CPU units to use in container execution mode. Default computed    || CPGGEN_CONTAINER_MEMORY | Memory units to use in container execution mode. Default computed || CPGGEN_MEMORY           | Heap memory to use for frontends. Default computed                || AT_DEBUG_MODE           | Set to debug to enable debug logging                              || CPG_EXPORT              | Set to true to export CPG graphs in dot format                    || CPG_EXPORT_REPR         | Graph to export. Default all                                      || CPG_EXPORT_FORMAT       | Export format. Default dot                                        || SHIFTLEFT_ACCESS_TOKEN  | Set to automatically submit the CPG for analysis by Qwiet AI      |## GitHub actionsUse the marketplace [action](https://github.com/marketplace/actions/cpggen) to generate CPGs using GitHub actions. Optionally, the upload the generated CPGs as build artifacts use the below step.```- name: Upload cpg  uses: actions/upload-artifact@v1.0.0  with:    name: cpg    path: cpg_out```## LicenseApache-2.0## Developing / Contributing```git clone git@github.com:AppThreat/cpggen.gitcd cpggenpython -m pip install --upgrade pippython -m pip install poetry# Add poetry to the PATH environment variablepoetry installpoetry run cpggen -i &lt;src directory&gt;```</longdescription>
</pkgmetadata>