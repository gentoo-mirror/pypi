<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>RoboBrowser: Your friendly neighborhood web scraper===============================================.. image:: https://badge.fury.io/py/robobrowser.png    :target: http://badge.fury.io/py/robobrowser.. image:: https://travis-ci.org/jmcarp/robobrowser.png?branch=master        :target: https://travis-ci.org/jmcarp/robobrowser.. image:: https://coveralls.io/repos/jmcarp/robobrowser/badge.png?branch=master        :target: https://coveralls.io/r/jmcarp/robobrowserHomepage: `http://robobrowser.readthedocs.org/ &lt;http://robobrowser.readthedocs.org/&gt;`_RoboBrowser is a simple, Pythonic library for browsing the web without a standalone web browser. RoboBrowsercan fetch a page, click on links and buttons, and fill out and submit forms. If you need to interact with web servicesthat don't have APIs, RoboBrowser can help... code-block:: python    import re    from robobrowser import RoboBrowser    # Browse to Genius    browser = RoboBrowser(history=True)    browser.open('http://genius.com/')    # Search for Porcupine Tree    form = browser.get_form(action='/search')    form                # &lt;RoboForm q=&gt;    form['q'].value = 'porcupine tree'    browser.submit_form(form)    # Look up the first song    songs = browser.select('.song_link')    browser.follow_link(songs[0])    lyrics = browser.select('.lyrics')    lyrics[0].text      # \nHear the sound of music ...    # Back to results page    browser.back()    # Look up my favorite song    song_link = browser.get_link('trains')    browser.follow_link(song_link)    # Can also search HTML using regex patterns    lyrics = browser.find(class_=re.compile(r'\blyrics\b'))    lyrics.text         # \nTrain set and match spied under the blind...RoboBrowser combines the best of two excellent Python libraries:`Requests &lt;http://docs.python-requests.org/en/latest/&gt;`_ and`BeautifulSoup &lt;http://www.crummy.com/software/BeautifulSoup/&gt;`_.RoboBrowser represents browser sessions using Requests and HTML responsesusing BeautifulSoup, transparently exposing methods of both libraries:.. code-block:: python    import re    from robobrowser import RoboBrowser    browser = RoboBrowser(user_agent='a python robot')    browser.open('https://github.com/')    # Inspect the browser session    browser.session.cookies['_gh_sess']         # BAh7Bzo...    browser.session.headers['User-Agent']       # a python robot    # Search the parsed HTML    browser.select('div.teaser-icon')       # [&lt;div class=&quot;teaser-icon&quot;&gt;                                            # &lt;span class=&quot;mega-octicon octicon-checklist&quot;&gt;&lt;/span&gt;                                            # &lt;/div&gt;,                                            # ...    browser.find(class_=re.compile(r'column', re.I))    # &lt;div class=&quot;one-third column&quot;&gt;                                                        # &lt;div class=&quot;teaser-icon&quot;&gt;                                                        # &lt;span class=&quot;mega-octicon octicon-checklist&quot;&gt;&lt;/span&gt;                                                        # ...You can also pass a custom `Session` instance for lower-level configuration:.. code-block:: python    from requests import Session    from robobrowser import RoboBrowser    session = Session()    session.verify = False  # Skip SSL verification    session.proxies = {'http': 'http://custom.proxy.com/'}  # Set default proxies    browser = RoboBrowser(session=session)RoboBrowser also includes tools for working with forms, inspired by`WebTest &lt;https://github.com/Pylons/webtest&gt;`_ and `Mechanize &lt;http://wwwsearch.sourceforge.net/mechanize/&gt;`_... code-block:: python    from robobrowser import RoboBrowser    browser = RoboBrowser()    browser.open('http://twitter.com')    # Get the signup form    signup_form = browser.get_form(class_='signup')    signup_form         # &lt;RoboForm user[name]=, user[email]=, ...    # Inspect its values    signup_form['authenticity_token'].value     # 6d03597 ...    # Fill it out    signup_form['user[name]'].value = 'python-robot'    signup_form['user[user_password]'].value = 'secret'    # Submit the form    browser.submit_form(signup_form)Checkboxes:.. code-block:: python    from robobrowser import RoboBrowser    # Browse to a page with checkbox inputs    browser = RoboBrowser()    browser.open('http://www.w3schools.com/html/html_forms.asp')    # Find the form    form = browser.get_forms()[3]    form                            # &lt;RoboForm vehicle=[]&gt;    form['vehicle']                 # &lt;robobrowser.forms.fields.Checkbox...&gt;    # Checked values can be get and set like lists    form['vehicle'].options         # [u'Bike', u'Car']    form['vehicle'].value           # []    form['vehicle'].value = ['Bike']    form['vehicle'].value = ['Bike', 'Car']    # Values can also be set using input labels    form['vehicle'].labels          # [u'I have a bike', u'I have a car \r\n']    form['vehicle'].value = ['I have a bike']    form['vehicle'].value           # [u'Bike']    # Only values that correspond to checkbox values or labels can be set;    # this will raise a `ValueError`    form['vehicle'].value = ['Hot Dogs']Uploading files:.. code-block:: python    from robobrowser import RoboBrowser    # Browse to a page with an upload form    browser = RoboBrowser()    browser.open('http://cgi-lib.berkeley.edu/ex/fup.html')    # Find the form    upload_form = browser.get_form()    upload_form                     # &lt;RoboForm upfile=, note=&gt;    # Choose a file to upload    upload_form['upfile']           # &lt;robobrowser.forms.fields.FileInput...&gt;    upload_form['upfile'].value = open('path/to/file.txt', 'r')    # Submit    browser.submit(upload_form)By default, creating a browser instantiates a new requests `Session`. Requirements------------- Python &gt;= 2.6 or &gt;= 3.3License-------MIT licensed. See the bundled `LICENSE &lt;https://github.com/jmcarp/robobrowser/blob/master/LICENSE&gt;`_ file for more details.</longdescription>
</pkgmetadata>