<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## https://github.com/grantps/superhelp![Example HTML output](https://github.com/grantps/superhelp/raw/master/superhelp_logo_padded_small.png)version number: 1.9.2author: Grant Paton-Simpson## OverviewSuperHELP is Help for Humans! The goal is to provide customised help forsimple code snippets. SuperHELP is not intended to replace the built-in Pythonhelp but to supplement it for basic Python code structures. SuperHELP willalso be opinionated. Help can be provided in a variety of contexts includingthe terminal and web browsers (perhaps as part of on-line tutorials).## Quick StartClick the button below to open a Binder Jupyter Notebook you can play aroundin e.g. get advice on a snippet or line of Python[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/git/https%3A%2F%2Fgithub.com%2Fgrantps%2Fsuperhelp.git/master?filepath=notebooks%2FSuperhelpDemo.ipynb)or put the following at the top of your Python script and run the script:    import superhelp    superhelp.this()## InstallationNote - Python 3.9+ only. If you have an older version of Python use the BinderJupyter Notebook button instead (see higher up)To installNote 1) Use pipE.g.    $ python3 -m pip install superhelpCheck by running    $ shelpIf it doesn't work, and you are on Linux, adding the following to your .bashrcfile might fix the problem:    export PATH=$PATH:~/.local/bin2) Or clone the repo    $ git clone https://github.com/grantps/superhelp.git    $ python3 setup.py install## Example Use Cases* Charlotte likes to check her code before others see it so includes        import superhelp        superhelp.this(warnings_only=True)    at the top of each script. When she is happy with the code she comments    those two lines out.* Avi is a Python beginner and wants to get advice on a five-linefunction he wrote to display greetings to a list of people. He learns aboutPython conventions for variable naming and better ways of combining strings.* Zach wants to get advice on a named tuple. He learns how to add doc stringsto individual fields.* Noor is considering submitting some code to Stack Overflow but wants toimprove it first (or possibly get ideas for a solution directly). She discoversthat a list comprehension might work. She also becomes aware of dictionarycomprehensions for the first time.* Al has written a simple Python decorator but is wanting to see if there isanything which can be improved. He learns how to use functool.wrap from anexample provided.* Moana is an experienced Python developer but tends to forget things like docstrings in her functions. She learns a standard approach and starts using itmore often. Moana also finds the summarised linting useful.* Paul wants to check the quality of some code before including it in hisproject. He learns about some issues and makes improvements before integratingit.# Example Usage## Screenshot from HTML output![Example HTML output](https://github.com/grantps/superhelp/raw/master/example_html_output_1.png)## Screenshot from Terminal output![Example Terminal output](https://github.com/grantps/superhelp/raw/master/example_terminal_output_1.png)### Terminal themes available ('dark' and 'light')![Example Terminal themes](https://github.com/grantps/superhelp/raw/master/example_terminal_themes_1.png)## Screenshot from Markdown output![Example Markdown output](https://github.com/grantps/superhelp/raw/master/example_markdown_output_1.png)## Using SuperHELP on the NotebookAdd new cell at end with content like:    %%shelp        def sorted(my_list):        sorted_list = my_list.sort()        return sorted_listand run it to get advice.The notebook has more detailed instructions at the top.## Using SuperHELP on a Local Installation### Inside your scriptPut the following at the top of your script and then run the script (note - there are two underscores on either side of file):    import superhelp    superhelp.this()If you don't want the default web output you can specify another output such as 'cli' (command line interface) or 'md' (markdown):    import superhelp    superhelp.this(output='md')If you don't want the default 'Extra' level of messages you can specify a different detail level ('Brief' or 'Main') e.g.    import superhelp    superhelp.this(detail_level='Brief')or:    import superhelp    superhelp.this(detail_level='Main')If you only want to see warnings you can specify warnings only e.g.    import superhelp    superhelp.this(warnings_only=True)Executing your code allows SuperHELP to better understand your code.If you want your code executed while SuperHELP is evaluating it    import superhelp    superhelp.this(execute_code=True)You can use as many options as you want e.g.    import superhelp    superhelp.this(output='md', execute_code=True, warnings_only=True)### From the command line (terminal / console)    $ shelp -h  ## get extended help on usage (purpose, defaults, etc)    $ shelp --code &quot;people = ['Tomas', 'Sal', 'Raj']&quot; --output html --detail-level Main    $ shelp -c &quot;people = ['Tomas', 'Sal', 'Raj']&quot; -o html -d Main    $ shelp --file-path my_script.py --output cli --theme light --detail-level Extra    $ shelp -f my_snippet.py -o cli -t light -d Extra    $ shelp --project-path /home/g/proj --exclude-folders env    $ shelp -p /home/g/proj -e env    $ shelp --file-path my_script.py --warnings-only    $ shelp -f my_snippet.py -w    $ shelp --file-path my_script.py --execute-code    $ shelp -f my_snippet.py -x    $ shelp  ## to see advice on an example snippet displayed (detail level 'Extra')    $ shelp --advice-list  ## to see all types of help listed    $ shelp -a## Stretch Ideas* Extend beyond standard library into popular libraries like requests, bottle, flask etc.## Other Packages[https://github.com/aroberge/friendly-traceback](https://github.com/aroberge/friendly-traceback)</longdescription>
</pkgmetadata>