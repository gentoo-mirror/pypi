<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gtagora-connector [![Build Status](https://travis-ci.org/gyrofx/gtagora-connector-py.svg?branch=master)](https://travis-ci.org/gyrofx/gtagora-connector-py)gtagora-connector is a python library to access GyroTools' Agora system.## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install gtagora-connector.```bashpip install gtagora-connector```Currently gtagora-connector supports python 3.6 and 3.7.## Basic usage```pythonfrom gtagora import Agorafrom gtagora.models.dataset import DatasetTypeserver = '&lt;AGORA SERVER&gt;'api_key = '&lt;YOUR_API_KEY&gt;'agora = Agora.create(server, api_key)myagora_project = agora.get_myagora()root_folder = myagora_project.get_root_folder()subfolders = root_folder.get_folders()for s in subfolders:    print(f' - {s.name}')new_folder = root_folder.get_or_create('New Folder')exams = myagora_project.get_exams(filters={'name': 'Wrist'})if exams:    exam = exams[0]    for s in exam.get_series():        print(f'Series: {s.name}')        for dataset in s.get_datasets(filters={'type': DatasetType.PHILIPS_RAW}):            for datafile in dataset.get_datafiles():                print(f'{datafile.original_filename}')agora.import_data('/path/to/directroy', new_folder)```## Examples### Create an Agora instance```pythonfrom gtagora import Agoraagora = Agora.create('https://your.agora.domain.com', user='test', password='test')```Since, it is not recommended to ever write down your password in plain text, Agora offers the possibility to connect with an API key. The API key can be activated in your Agora profile, and is a random UUID which can be withdrawn or recreated easily.```pythonfrom gtagora import Agoraagora = Agora.create('https://your.agora.domain.com', api_key='&lt;YOUR_API_KEY&gt;')```### Working with projectsGet a list of projects:```pythonprojects = agora.get_projects()for p in projects:    print(f&quot; - {p.display_name}&quot;)```Get a project by ID:```pythonproject = agora.get_project(2)print(f&quot; - {project.display_name}&quot;)```Get the \&quot;My Agora\&quot; project:```pythonmyagora = agora.get_myagora()```Get root folder of a project```pythonproject = agora.get_project(2)root_folder = project.get_root_folder()```Get all exams of a project```pythonproject = agora.get_project(2)exams = project.get_exams()```Empty the trash```pythonproject = agora.get_project(2)project.empty_trash()```### Working with foldersGet the root folder of the \&quot;My Agora\&quot; project:```pythonmyagora = agora.get_myagora()root_folder = myagora.get_root_folder()print(f&quot;Root folder ID: {root_folder.id}&quot;)```Get a folder by its ID```pythonfolder = agora.get_folder(45)print(f&quot;Folder with ID {folder.name}&quot;)```Get sub folders```pythonsubfolders = folder.get_folders()for f in subfolders:    print(f&quot; - {f.name}&quot;)```Get a subfolder folder by name. None will be returned if the folder does not exist```pythonmy_folder = folder.get_folder('my_folder')```The get_folder function also takes a relative path.```pythonmy_folder = folder.get_folder('../../data/my_folder')```Create a new folder in the root folder (the new folder object is returned). An exception is thrown if a folder with the same name already exists.```pythonnew_folder = root_folder.create_folder('TestFolder')print(f&quot;New folder ID: {new_folder.id}&quot;)```Get a folder or create a new one if it does not exist```pythonnew_or_existing_folder = root_folder.get_or_create('TestFolder')```Delete a folder. Delete a folder is recursive. It deletes all items. The delete operation does not follow links.```pythonfolder.delete()```    Get all items of a folder. An item could for example be an exam, series or dataset```pythonitems = folder.get_items()for item in items:    print(f&quot; - {item}&quot;)```Get all exams of a folder. Use the recursive parameter to also get the exams in all subfolders ```pythonexams = folder.get_exams(recursive=False)for exam in exams:    print(f&quot; - {exam}&quot;)```Get all datasets of a folder. Use the recursive parameter to also get the exams in all subfolders ```pythondatasets = folder.get_datasets(recursive=False)```Get a dataset by name. None is returned if the dataset does not exist```pythondataset = folder.get_dataset('my_dataset')```Get the path of a folder within Agora (breadcrumb) ```pythonfolder = agora.get_folder(45)breadcrumb = folder.get_breadcrumb()```    ### Working with Agora objectsGet the list of exams```pythonexams = agora.get_exam_list()```Get an exam by ID```pythonexam = agora.get_exam(12)```Link the first Exam to the a folder```pythonexam_item = exam.link_to_folder(folder.id)```Delete the link of an exam (doesn't delete the Exam itself)```pythonexam_item.delete()```Get all series of an exam and then all datasets of the first series```pythonseries = exam.get_series()datasets = series[0].get_datasets()```Get all datasets of an exam ```pythonseries = exam.get_datasets()```Get a list of all patients```pythonpatients = agora.get_patients()```Get a patient by ID```pythonpatient = agora.get_patient(15)```Get a series or dataset by ID```pythonseries = agora.get_series(76)dataset = agora.get_dataset(158)```### Tag ObjectsGet all tags the current user has access to:```pythontags = agora.get_tags()```Get a tag by id or name:```pythontag1 = agora.get_tag(id=3)tag2 = agora.get_tag(name='good')```Tag an agora object:```pythonexam = agora.get_exam(12)series = agora.get_series(24)dataset = agora.get_dataset(145)folder = agora.get_folder(15)patient = agora.get_patient(2)tag_instance1 = exam.tag(tag1)tag_instance2 = series.tag(tag1)tag_instance3 = dataset.tag(tag1)tag_instance4 = folder.tag(tag1)tag_instance5 = patient.tag(tag1)```### Download dataDownload all data from a folder ```pythonfrom pathlib import Pathtarget = Path(&quot;c:/temp&quot;)downloaded_files = folder.download(target, recursive=False)for f in downloaded_files:    print(str(f))```Exams, series and datasets also have a download function```pythondownloaded_files = exam.download(target)downloaded_files = series.download(target)downloaded_files = dataset.download(target)```### Import dataUpload files into a folder```pythonfrom pathlib import Pathfolder = agora.get_folder(45)file1 = Path('C:/images/test1.jpg')file2 = Path('C:/images/test2.jpg')folder.upload([file1, file2])```Upload a whole folder structure```pythonfrom pathlib import Pathfolder = agora.get_folder(45)data = Path('C:/data/my_folder')folder.upload([data])```Upload (and import) a rawfile and add an additional file to the the created series (Agora version &gt; 6.3.0):In this example a scanner rawfile and a textfile is uploaded. The rawfile will be imported into Agora and a Study and Series will be created. We can add the additional text file to the created Series by specifying the &quot;relations&quot; attribute in the upload function. The &quot;relations&quot; attribute is a dictionary whose key is the path to the rawfile and the value is a list of additional files which will be added to the created series:```pythonfolder = agora.get_folder(45)files = [Path('C:/data/raw/rawfile.raw'),Path('C:/data/raw/rawfile.lab'),Path('C:/data/log/logfile.txt'),]relations = {'C:/data/raw/rawfile.raw' : ['C:/data/log/logfile.txt']}folder.upload(files, relations=relations)```This also works when uploading a whole directory:```pythonfolder = agora.get_folder(45)dir = [Path('C:/data/')]relations = {'C:/data/raw/rawfile.raw' : ['C:/data/log/logfile.txt']}folder.upload(dir, relations=relations)```  ### Working with tasksGet all tasks visible to the current user:```pythontasks = agora.get_tasks()```Get a task by ID```pythontask = agora.get_task(13)```Run a task. &lt;br/&gt;In this example the task has 2 inputs:- A dataset with key &quot;ds&quot;- An integer number with key &quot;size&quot;The last line in the code sample waits for the task to finish```pythontask = agora.get_task(13)target_folder = agora.get_folder(24)dataset = agora.get_dataset(57)taskinfo = task.run(target=target_folder, ds=dataset, size=1024)taskinfo.join()```alternatively only the ID's of the Agora objects can be given as argument:```pythontaskinfo = task.run(target=target_folder, ds=23, size=1024)```the syntax to run the task can be printed to the console with the syntax function:```pythontask.syntax()```Save a task after it has been modified```pythontask = agora.get_task(13)task.name = 'new_name'task.save()```Delete a task```pythontask.delete()```Export all tasks into a json file```pythonagora.export_tasks('&lt;output file&gt;.json')```Import tasks from file (Experimental!)```pythonagora.import_tasks('&lt;input file&gt;.json')```### Working with parametersGet a parameter by name```pythondataset = agora.get_dataset(13)parameter = dataset.get_parameter('EX_ACQ_echoes')if not parameter.is_array:    value = parameter.values[0]else:    value = parameter.values```Search for parameters```pythondataset = agora.get_dataset(13)parameters = dataset.search_parameter('EX_ACQ_')print(f'{len(parameters)} parameters found')```### Users and sharingGet the current user```pythoncurrent_user = agora.get_current_user()```Get all users```pythonusers = agora.get_users()```Get all user groups```pythonusers = agora.get_groups()```### VariousThe members of any Agora object can be printed to the console with the display function```pythonexam = agora.get_exam(22)exam.display()folder = agora.get_folder(15)folder.display()```## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>