<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PILKit is a collection of utilities for working with PIL (the Python ImagingLibrary).One of its main features is a set of **processors** which expose a simpleinterface for performing manipulations on PIL images.Looking for more advanced processors? Check out `Instakit`_!**For the complete documentation on the latest stable version of PILKit, see**`PILKit on RTD`_... image:: https://api.travis-ci.org/matthewwithanm/pilkit.png  :target: https://travis-ci.org/matthewwithanm/pilkit.. _`PILKit on RTD`: http://pilkit.readthedocs.org.. _`Instakit`: https://github.com/fish2000/instakitInstallation============1. Install `PIL`_ or `Pillow`_.2. Run ``pip install pilkit`` (or clone the source and put the pilkit module on   your path).. note:: If you've never seen Pillow before, it considers itself a   more-frequently updated &quot;friendly&quot; fork of PIL that's compatible with   setuptools. As such, it shares the same namespace as PIL does and is a   drop-in replacement... _`PIL`: http://pypi.python.org/pypi/PIL.. _`Pillow`: http://pypi.python.org/pypi/PillowUsage Overview==============Processors----------The &quot;pilkit.processors&quot; module contains several classes for processing PILimages, which provide an easy to understand API:.. code-block:: python    from pilkit.processors import ResizeToFit    img = Image.open('/path/to/my/image.png')    processor = ResizeToFit(100, 100)    new_img = processor.process(img)A few of the included processors are:* ``ResizeToFit``* ``ResizeToFill``* ``SmartResize``* ``Adjust``* ``TrimBorderColor``* ``Transpose``There's also a ``ProcessorPipeline`` class for executing processorssequentially:.. code-block:: python    from pilkit.processors import ProcessorPipeline, ResizeToFit, Adjust    img = Image.open('/path/to/my/image.png')    processor = ProcessorPipeline([Adjust(color=0), ResizeToFit(100, 100)])    new_image = processor.process(img)Utilities---------In addition to the processors, PILKit contains a few utilities to ease the painof working with PIL. Some examples:``prepare_image``    Prepares the image for saving to the provided format by doing some    common-sense conversions, including preserving transparency and quantizing.``save_image``    Wraps PIL's ``Image.save()`` method in order to gracefully handle PIL's    &quot;Suspension not allowed here&quot; errors, and (optionally) prepares the image    using ``prepare_image``Utilities are also included for converting between formats, extensions, andmimetypes.Community=========Please use `the GitHub issue tracker &lt;https://github.com/matthewwithanm/pilkit/issues&gt;`_to report bugs. `A mailing list &lt;https://groups.google.com/forum/#!forum/django-imagekit&gt;`_also exists to discuss the project and ask questions, as well as the official`#imagekit &lt;irc://irc.freenode.net/imagekit&gt;`_ channel on Freenode. (Both ofthese are shared with the `django-imagekit`_ projectâ€”from which PILKit spunoff.).. _`django-imagekit`: https://github.com/jdriscoll/django-imagekit</longdescription>
</pkgmetadata>