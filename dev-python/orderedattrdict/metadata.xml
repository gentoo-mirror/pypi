<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>orderedattrdict===============.. image:: https://img.shields.io/travis/sanand0/orderedattrdict.svg        :target: https://travis-ci.org/sanand0/orderedattrdict.. image:: https://img.shields.io/pypi/v/orderedattrdict.svg        :target: https://pypi.python.org/pypi/orderedattrdictAn ordered dictionary with attribute-style access.Usage-----``AttrDict`` behaves exactly like ``collections.OrderedDict``, but also allowskeys to be accessed as attributes::    &gt;&gt;&gt; from orderedattrdict import AttrDict    &gt;&gt;&gt; conf = AttrDict()    &gt;&gt;&gt; conf['z'] = 1    &gt;&gt;&gt; assert conf.z == 1    &gt;&gt;&gt; conf.y = 2    &gt;&gt;&gt; assert conf['y'] == 2    &gt;&gt;&gt; conf.x = 3    &gt;&gt;&gt; assert conf.keys() == ['z', 'y', 'x']**NOTE**: If the key clashes with an ``OrderedDict`` attribute or starts with``__`` (two underscores), you can't access it as an attribute. For example::    &gt;&gt;&gt; a = AttrDict(keys=1)    &gt;&gt;&gt; a.keys    &lt;bound method AttrDict.keys of AttrDict([('keys', 1)])&gt;    &gt;&gt;&gt; a['keys']    1Load JSON preserving the order of keys::    &gt;&gt;&gt; import json    &gt;&gt;&gt; data = json.load(open('test.json'), object_pairs_hook=AttrDict)Load YAML preserving the order of keys::    &gt;&gt;&gt; import yaml    &gt;&gt;&gt; from orderedattrdict.yamlutils import AttrDictYAMLLoader    &gt;&gt;&gt; data = yaml.load(open('test.yaml'), Loader=AttrDictYAMLLoader)Make PyYAML *always* load all dictionaries as ``AttrDict``::    &gt;&gt;&gt; from orderedattrdict.yamlutils import from_yaml    &gt;&gt;&gt; yaml.add_constructor(u'tag:yaml.org,2002:map', from_yaml)    &gt;&gt;&gt; yaml.add_constructor(u'tag:yaml.org,2002:omap', from_yaml)``json.dump``, ``yaml.dump`` and ``yaml.safe_dump`` convert ``AttrDict`` intodictionaries, retaining the order::    &gt;&gt;&gt; json.dumps(data)    &gt;&gt;&gt; yaml.dump(data)CounterAttrDict---------------``CounterAttrDict`` provides a Counter with ordered keys and attribute-styleaccess::    &gt;&gt;&gt; from orderedattrdict import CounterAttrDict    &gt;&gt;&gt; c = CounterAttrDict()    &gt;&gt;&gt; c.x    0    &gt;&gt;&gt; c.elements    &lt;bound method CounterAttrDict.elements of CounterAttrDict()&gt;    &gt;&gt;&gt; c.x += 1    &gt;&gt;&gt; c.y += 2    &gt;&gt;&gt; c.most_common()    [('y', 2), ('x', 1)]    &gt;&gt;&gt; list(c.elements())    ['x', 'y', 'y']    &gt;&gt;&gt; c.subtract(y=1)    &gt;&gt;&gt; c    CounterAttrDict([('x', 1), ('y', 1)])DefaultAttrDict---------------``DefaultAttrDict`` provides a defaultdict with ordered keys and attribute-styleaccess. This can be used with a list factory to collect items::    &gt;&gt;&gt; from orderedattrdict import DefaultDict    &gt;&gt;&gt; d = DefaultAttrDict(list)    &gt;&gt;&gt; d.x.append(10)  # Append item without needing to initialise list    &gt;&gt;&gt; d.x.append(20)    &gt;&gt;&gt; sum(d.x)    30or with a set to collect unique items::    &gt;&gt;&gt; d = DefaultAttrDict(set)    &gt;&gt;&gt; d.x.add(5)    &gt;&gt;&gt; d.x.add(2)    &gt;&gt;&gt; d.x.add(5)      # Duplicate item is ignored    &gt;&gt;&gt; sum(d.x)    7Tree----``Tree`` lets you can set attributes in any level of the hierarchy::    &gt;&gt;&gt; node = Tree()    &gt;&gt;&gt; node    Tree()    &gt;&gt;&gt; node.x.y = 1    &gt;&gt;&gt; node    Tree([('x', Tree([('y', 1)]))])    &gt;&gt;&gt; node.x.z = 2    &gt;&gt;&gt; node    Tree([('x', Tree([('y', 1), ('z', 2)]))])    &gt;&gt;&gt; node.y.a.b = 3    &gt;&gt;&gt; node    Tree([('x', Tree([('y', 1), ('z', 2)])), ('y', Tree([('a', Tree([('b', 3)]))]))])Installation------------This is a pure-Python package built for Python 2.7+ and Python 3.0+. To set up::    pip install orderedattrdictUpdating--------Test locally::    rm -rf build dist    flake8 .    python setup.py testUpdate version in ``setup.py`` and ``Changelog`` below. Then commit. Then::    git tag -a v1.x.x           # Annotate with a one-line summary of features    git push --follow-tags    # Ensure that travis builds pass    python setup.py sdist bdist_wheel --universal    twine upload dist/*Changelog---------- ``1.0``: Basic implementation- ``1.1``: Add utilities to load and save as YAML- ``1.2``: Allow specific keys to be excluded from attribute access- ``1.3``: Restore ``&lt;&lt;`` merge tags for YAML- ``1.4.1``: Add ``CounterAttrDict`` and ``DefaultAttrDict``- ``1.4.2``: Add Python 3.5 support- ``1.4.3``: Fix bdist installation issues for Python 2.7- ``1.5``: Add ``Tree`` data structure- ``1.6``: ``str()`` prints human-friendly dict</longdescription>
</pkgmetadata>