<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/y-py.svg)](https://badge.fury.io/py/y-py)# YpyYpy is a Python binding for Y-CRDT. It provides distributed data types that enable real-time collaboration between devices. Ypy can sync data with any other platform that has a Y-CRDT binding, allowing for seamless cross-domain communication. The library is a thin wrapper around Yrs, taking advantage of the safety and performance of Rust.&gt; üß™ Project is still experimental. Expect the API to change before a version 1.0 stable release.## Installation```pip install y-py```## Getting StartedYpy provides many of the same shared data types as [Yjs](https://docs.yjs.dev/). All objects are shared within a `YDoc` and get modified within a transaction block.```pythonimport y_py as Yd1 = Y.YDoc()# Create a new YText object in the YDoctext = d1.get_text('test')# Start a transaction in order to update the textwith d1.begin_transaction() as txn:    # Add text contents    text.extend(txn, &quot;hello world!&quot;)# Create another documentd2 = Y.YDoc()# Share state with the original documentstate_vector = Y.encode_state_vector(d2)diff = Y.encode_state_as_update(d1, state_vector)Y.apply_update(d2, diff)value = str(d2.get_text('test'))assert value == &quot;hello world!&quot;```## Development Setup0. Install [Rust](https://www.rust-lang.org/tools/install) and [Python](https://www.python.org/downloads/)1. Install `maturin` in order to build Ypy: `pip install maturin`2. Create a development build of the library: `maturin develop`## TestsAll tests are located in `/tests`. To run the tests, install `pytest` and run the command line tool from the project root:```pip install pytestpytest```## Using HatchIf you are using `hatch`, there is a `test` environment matrix defined in `pyproject.toml` that will run commands in virtual environments for `py37` through `py311`.```hatch run test:maturin develophatch run test:pytest```## Build Ypy Build the library as a wheel and store them in `target/wheels`:```maturin build```## Ypy in WASM (Pyodide)As a Rust-based library, Ypy cannot build &quot;pure Python&quot; wheels. CI processes build and upload a number of wheels to PyPI, but PyPI does not support hosting `emscripten` / `wasm32` wheels necessary to import in Pyodide (see https://github.com/pypi/warehouse/issues/10416 for more info and updates). For now, Ypy will build `emscripten` wheels and attach the binaries as assets in the appropriate [Releases](https://github.com/y-crdt/ypy/releases) entry. Unfortunately, trying to install directly from the Github download link will result in a CORS error, so you'll need to use a proxy to pull in the binary and write / install from emscripten file system or host the binary somewhere that is CORS accessible for your application.You can try out Ypy in Pyodide using the [terminal emulator at pyodide.org](https://pyodide.org/en/stable/console.html):```Welcome to the Pyodide terminal emulator üêçPython 3.10.2 (main, Sep 15 2022 23:28:12) on WebAssembly/EmscriptenType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; wheel_url = 'https://github.com/y-crdt/ypy/releases/download/v0.5.5/y_py-0.5.5-cp310-cp310-emscripten_3_1_14_wasm32.whl'&gt;&gt;&gt; wheel_name = wheel_url.split('/')[-1]&gt;&gt;&gt; wheel_name'y_py-0.5.5-cp310-cp310-emscripten_3_1_14_wasm32.whl'&gt;&gt;&gt; &gt;&gt;&gt; proxy_url = f'https://api.allorigins.win/raw?url={wheel_url}'&gt;&gt;&gt; proxy_url'https://api.allorigins.win/raw?url=https://github.com/y-crdt/ypy/releases/download/v0.5.5/y_py-0.5.5-cp310-cp310-emscripten_3_1_14_wasm32.whl'&gt;&gt;&gt; &gt;&gt;&gt; import pyodide&gt;&gt;&gt; resp = await pyodide.http.pyfetch(proxy_url)&gt;&gt;&gt; resp.status200&gt;&gt;&gt; &gt;&gt;&gt; content = await resp.bytes()&gt;&gt;&gt; len(content)360133&gt;&gt;&gt; content[:50]b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xae\xb2}U\x92l\xa7E\xe6\x04\x00\x00u\t\x00\x00\x1d\x00\x00\x00y_py-0.5.5.dist-info'&gt;&gt;&gt;&gt;&gt;&gt; with open(wheel_name, 'wb') as f:...   f.write(content)... 360133&gt;&gt;&gt; &gt;&gt;&gt; import micropip&gt;&gt;&gt; await micropip.install(f'emfs:./{wheel_name}')&gt;&gt;&gt; &gt;&gt;&gt; import y_py as Y&gt;&gt;&gt; Y&lt;module 'y_py' from '/lib/python3.10/site-packages/y_py/__init__.py'&gt;&gt;&gt;&gt; &gt;&gt;&gt; d1 = Y.YDoc()&gt;&gt;&gt; text = d1.get_text('test')&gt;&gt;&gt; with d1.begin_transaction() as txn:    text.extend(txn, &quot;hello world!&quot;)... &gt;&gt;&gt; d2 = Y.YDoc()&gt;&gt;&gt; state_vector = Y.encode_state_vector(d2)&gt;&gt;&gt; diff = Y.encode_state_as_update(d1, state_vector)&gt;&gt;&gt; Y.apply_update(d2, diff)&gt;&gt;&gt; d2.get_text('test')YText(hello world!)```</longdescription>
</pkgmetadata>