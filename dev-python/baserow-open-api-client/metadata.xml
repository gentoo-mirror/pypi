<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># baserow-open-api-clientA client library for accessing Baserow OpenAPI## UsageFirst, create a client:```pythonfrom baserow_open_api_client import Clientclient = Client(base_url=&quot;https://api.example.com&quot;)```If the endpoints you're going to hit require authentication, use `AuthenticatedClient` instead:```pythonfrom baserow_open_api_client import AuthenticatedClientclient_which_gets_jwt_using_email_and_pass = AuthenticatedClient(base_url=&quot;https://api.example.com&quot;, email=&quot;your users email&quot;, password=&quot;your users password&quot;)client_given_a_refresh_and_or_access_token = AuthenticatedClient(base_url=&quot;https://api.example.com&quot;, refresh_token=&quot;xyz&quot;)```Now call your endpoint and use your models:```pythonfrom typing import Listfrom baserow_open_api_client.api.workspaces import list_workspacesfrom baserow_open_api_client.client import AuthenticatedClientfrom baserow_open_api_client.models import WorkspaceUserWorkspacefrom baserow_open_api_client.types import Response auth_client = AuthenticatedClient(&quot;http://localhost:8000&quot;, email=&quot;dev@baserow.io&quot;,                                   password=&quot;SuperSecretPassword&quot;)response: Response[List[WorkspaceUserWorkspace]] = list_workspaces.sync_detailed(    client=auth_client)```Or do the same thing with an async version by using the asyncio/asyncio_detailed methods instead.```By default, when you're calling an HTTPS API it will attempt to verify that SSL is working correctly. Using certificate verification is highly recommended most of the time, but sometimes you may need to authenticate to a server (especially an internal server) using a custom certificate bundle.```pythonclient = AuthenticatedClient(    base_url=&quot;https://internal_api.example.com&quot;,    refresh_token=&quot;SuperSecretToken&quot;,    verify_ssl=&quot;/path/to/certificate_bundle.pem&quot;,)```You can also disable certificate validation altogether, but beware that **this is a security risk**.```pythonclient = AuthenticatedClient(    base_url=&quot;https://internal_api.example.com&quot;,    refresh_token=&quot;SuperSecretToken&quot;,    verify_ssl=False)```There are more settings on the generated `Client` class which let you control more runtime behavior, check out the docstring on that class for more info.Things to know:1. Every path/method combo becomes a Python module with four functions:    1. `sync`: Blocking request that returns parsed data (if successful) or `None`    1. `sync_detailed`: Blocking request that always returns a `Request`, optionally with `parsed` set if the request was successful.    1. `asyncio`: Like `sync` but async instead of blocking    1. `asyncio_detailed`: Like `sync_detailed` but async instead of blocking1. All path/query params, and bodies become method arguments.1. If your endpoint had any tags on it, the first tag will be used as a module name for the function (my_tag above)1. Any endpoint which did not have a tag will be in `baserow_open_api_client.api.default`## Building / publishing this ClientThis project uses [Poetry](https://python-poetry.org/) to manage dependencies  and packaging.  Here are the basics:1. Update the metadata in pyproject.toml (e.g. authors, version)1. If you're using a private repository, configure it with Poetry    1. `poetry config repositories.&lt;your-repository-name&gt; &lt;url-to-your-repository&gt;`    1. `poetry config http-basic.&lt;your-repository-name&gt; &lt;username&gt; &lt;password&gt;`1. Publish the client with `poetry publish --build -r &lt;your-repository-name&gt;` or, if for public PyPI, just `poetry publish --build`If you want to install this client into another project without publishing it (e.g. for development) then:1. If that project **is using Poetry**, you can simply do `poetry add &lt;path-to-this-client&gt;` from that project1. If that project is not using Poetry:    1. Build a wheel with `poetry build -f wheel`    1. Install that wheel from the other project `pip install &lt;path-to-wheel&gt;`</longdescription>
</pkgmetadata>