<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=center&gt;&lt;img src=https://raw.githubusercontent.com/antonagestam/phantom-types/main/docs/phantom.svg&gt;&lt;/p&gt;&lt;h1 align=center&gt;phantom-types&lt;/h1&gt;&lt;p align=center&gt;    &lt;a href=https://github.com/antonagestam/phantom-types/actions?query=workflow%3ACI+branch%3Amain&gt;&lt;img src=https://github.com/antonagestam/phantom-types/workflows/CI/badge.svg alt=&quot;CI Build Status&quot;&gt;&lt;/a&gt;    &lt;a href=https://phantom-types.readthedocs.io/en/stable/&gt;&lt;img src=https://readthedocs.org/projects/phantom-types/badge/?version=main alt=&quot;Documentation Build Status&quot;&gt;&lt;/a&gt;    &lt;a href=https://codecov.io/gh/antonagestam/phantom-types&gt;&lt;img src=https://codecov.io/gh/antonagestam/phantom-types/branch/main/graph/badge.svg?token=UE85B7IA3Q alt=&quot;Test coverage report&quot;&gt;&lt;/a&gt;    &lt;br&gt;    &lt;a href=https://pypi.org/project/phantom-types/&gt;&lt;img src=https://img.shields.io/pypi/v/phantom-types.svg?color=informational&amp;label=PyPI alt=&quot;PyPI Package&quot;&gt;&lt;/a&gt;    &lt;a href=https://pypi.org/project/phantom-types/&gt;&lt;img src=https://img.shields.io/pypi/pyversions/phantom-types.svg?color=informational&amp;label=Python alt=&quot;Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;[Phantom types][ghosts] for Python will help you make illegal states unrepresentable andavoid shotgun parsing by enabling you to practice [&quot;Parse, don't validate&quot;][parse].&lt;h4 align=center&gt;    &lt;a href=https://phantom-types.readthedocs.io/en/stable/&gt;Checkout the complete documentation on Read the Docs â†’&lt;/a&gt;&lt;/h4&gt;## Installation```bash$  python3 -m pip install phantom-types```#### ExtrasThere are a few extras available that can be used to either enable a feature or installa compatible version of a third-party library.| Extra name       | Feature                                                                                                    || ---------------- | ---------------------------------------------------------------------------------------------------------- || `[dateutil]`     | Installs [python-dateutil]. Required for parsing strings with [`TZAware` and `TZNaive`][phantom-datetime]. || `[phonenumbers]` | Installs [phonenumbers]. Required to use [`phantom.ext.phonenumbers`][phantom-phonenumbers].               || `[pydantic]`     | Installs [pydantic].                                                                                       || `[hypothesis]`   | Installs [hypothesis].                                                                                     || `[all]`          | Installs all of the above.                                                                                 |[python-dateutil]: https://pypi.org/project/python-dateutil/[phonenumbers]: https://pypi.org/project/phonenumbers/[pydantic]: https://pypi.org/project/pydantic/[hypothesis]: https://pypi.org/project/hypothesis/[phantom-datetime]:  https://phantom-types.readthedocs.io/en/main/pages/types.html#module-phantom.datetime[phantom-phonenumbers]:  https://phantom-types.readthedocs.io/en/main/pages/external-wrappers.html#module-phantom.ext.phonenumbers```bash$  python3 -m pip install phantom-types[all]```## ExamplesBy introducing a phantom type we can define a pre-condition for a function argument.```pythonfrom phantom import Phantomfrom phantom.predicates.collection import containedclass Name(str, Phantom, predicate=contained({&quot;Jane&quot;, &quot;Joe&quot;})):    ...def greet(name: Name):    print(f&quot;Hello {name}!&quot;)```Now this will be a valid call.```pythongreet(Name.parse(&quot;Jane&quot;))```... and so will this.```pythonjoe = &quot;Joe&quot;assert isinstance(joe, Name)greet(joe)```But this will yield a static type checking error.```pythongreet(&quot;bird&quot;)```### Runtime type checkingBy combining phantom types with a runtime type-checker like [beartype] or [typeguard],we can achieve the same level of security as you'd gain from using [contracts][dbc].```pythonimport datetimefrom beartype import beartypefrom phantom.datetime import TZAware@beartypedef soon(dt: TZAware) -&gt; TZAware:    return dt + datetime.timedelta(seconds=10)```The `soon` function will now validate that both its argument and return value istimezone aware, e.g. pre- and post conditions.### Pydantic supportPhantom types are ready to use with [pydantic] and have [integratedsupport][pydantic-support] out-of-the-box. Subclasses of `Phantom` work with bothpydantic's validation and its schema generation.```pythonclass Name(str, Phantom, predicate=contained({&quot;Jane&quot;, &quot;Joe&quot;})):    @classmethod    def __schema__(cls) -&gt; Schema:        return super().__schema__() | {            &quot;description&quot;: &quot;Either Jane or Joe&quot;,            &quot;format&quot;: &quot;custom-name&quot;,        }class Person(BaseModel):    name: Name    created: TZAwareprint(json.dumps(Person.schema(), indent=2))```The code above outputs the following JSONSchema.```json{  &quot;title&quot;: &quot;Person&quot;,  &quot;type&quot;: &quot;object&quot;,  &quot;properties&quot;: {    &quot;name&quot;: {      &quot;title&quot;: &quot;Name&quot;,      &quot;description&quot;: &quot;Either Jane or Joe&quot;,      &quot;format&quot;: &quot;custom-name&quot;,      &quot;type&quot;: &quot;string&quot;    },    &quot;created&quot;: {      &quot;title&quot;: &quot;TZAware&quot;,      &quot;description&quot;: &quot;A date-time with timezone data.&quot;,      &quot;type&quot;: &quot;string&quot;,      &quot;format&quot;: &quot;date-time&quot;    }  },  &quot;required&quot;: [&quot;name&quot;, &quot;created&quot;]}```## DevelopmentInstall development requirements, preferably in a virtualenv:```bash$ python3 -m pip install .[all,test]```Run tests:```bash$ pytest# or$ make test```Linting and static type checking is setup with [pre-commit], after installing it you cansetup hooks with the following command, so that checks run before you push changes.```bash# configure hooks to run when pushing$ pre-commit install -t pre-push# or when committing$ pre-commit install -t pre-commit# run all checks$ pre-commit run --all-files# or just a single hook$ pre-commit run mypy --all-files```In addition to static type checking, the project is setup with [pytest-mypy-plugins] totest that exposed mypy types work as expected, these checks will run together with therest of the test suite, but you can single them out with the following command.```bash$ make test-typing```[parse]: https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/[ghosts]: https://kataskeue.com/gdp.pdf[build-status]:  https://github.com/antonagestam/phantom-types/actions?query=workflow%3ACI+branch%3Amain[coverage]: https://codecov.io/gh/antonagestam/phantom-types[typeguard]: https://github.com/agronholm/typeguard[beartype]: https://github.com/beartype/beartype[dbc]: https://en.wikipedia.org/wiki/Design_by_contract[pydantic]: https://pydantic-docs.helpmanual.io/[pydantic-support]:  https://phantom-types.readthedocs.io/en/stable/pages/pydantic-support.html[pre-commit]: https://pre-commit.com/[pytest-mypy-plugins]: https://github.com/TypedDjango/pytest-mypy-plugins</longdescription>
</pkgmetadata>