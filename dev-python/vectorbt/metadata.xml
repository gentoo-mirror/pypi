<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://vectorbt.pro/&quot; alt=&quot;https://vectorbt.pro/&quot;&gt;        &lt;img src=&quot;docs/docs/assets/logo/header-pro.svg&quot; /&gt;    &lt;/a&gt;&lt;/div&gt;&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://vectorbt.dev/&quot; alt=&quot;https://vectorbt.dev/&quot;&gt;        &lt;img src=&quot;docs/docs/assets/logo/header.svg&quot; /&gt;    &lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/vectorbt&quot; alt=&quot;Python Versions&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/pyversions/vectorbt.svg?logo=python&amp;logoColor=white&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/polakowo/vectorbt/blob/master/LICENSE.md&quot; alt=&quot;License&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/license-Fair%20Code-yellow&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/vectorbt&quot; alt=&quot;PyPi&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/vectorbt?color=blueviolet&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://codecov.io/gh/polakowo/vectorbt&quot; alt=&quot;codecov&quot;&gt;        &lt;img src=&quot;https://codecov.io/gh/polakowo/vectorbt/branch/master/graph/badge.svg?token=YTLNAI7PS3&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://vectorbt.dev/&quot; alt=&quot;Website&quot;&gt;        &lt;img src=&quot;https://img.shields.io/website?url=https://vectorbt.dev/&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/project/vectorbt&quot; alt=&quot;Downloads&quot;&gt;        &lt;img src=&quot;https://pepy.tech/badge/vectorbt&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://mybinder.org/v2/gh/polakowo/vectorbt/HEAD?urlpath=lab&quot; alt=&quot;Binder&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/launch-binder-d6604a&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://gitter.im/vectorbt/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge&quot; alt=&quot;Join the chat at https://gitter.im/vectorbt/community&quot;&gt;        &lt;img src=&quot;https://badges.gitter.im/vectorbt.svg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;## :sparkles: Usagevectorbt allows you to easily backtest strategies with a couple of lines of Python code.* Here is how much profit we would have made if we invested $100 into Bitcoin in 2014:```pythonimport vectorbt as vbtprice = vbt.YFData.download('BTC-USD').get('Close')pf = vbt.Portfolio.from_holding(price, init_cash=100)pf.total_profit()``````plaintext8961.008555963961```* Buy whenever 10-day SMA crosses above 50-day SMA and sell when opposite:```pythonfast_ma = vbt.MA.run(price, 10)slow_ma = vbt.MA.run(price, 50)entries = fast_ma.ma_crossed_above(slow_ma)exits = fast_ma.ma_crossed_below(slow_ma)pf = vbt.Portfolio.from_signals(price, entries, exits, init_cash=100)pf.total_profit()``````plaintext16423.251963801864```* Generate 1,000 strategies with random signals and test them on BTC and ETH:```pythonimport numpy as npsymbols = [&quot;BTC-USD&quot;, &quot;ETH-USD&quot;]price = vbt.YFData.download(symbols, missing_index='drop').get('Close')n = np.random.randint(10, 101, size=1000).tolist()pf = vbt.Portfolio.from_random_signals(price, n=n, init_cash=100, seed=42)mean_expectancy = pf.trades.expectancy().groupby(['randnx_n', 'symbol']).mean()fig = mean_expectancy.unstack().vbt.scatterplot(xaxis_title='randnx_n', yaxis_title='mean_expectancy')fig.show()```![rand_scatter.svg](https://raw.githubusercontent.com/polakowo/vectorbt/master/docs/docs/assets/images/usage_rand_scatter.svg)* For fans of hyperparameter optimization: here is a snippet for testing 10,000 window combinations of a dual SMA crossover strategy on BTC, USD, and LTC:```pythonsymbols = [&quot;BTC-USD&quot;, &quot;ETH-USD&quot;, &quot;LTC-USD&quot;]price = vbt.YFData.download(symbols, missing_index='drop').get('Close')windows = np.arange(2, 101)fast_ma, slow_ma = vbt.MA.run_combs(price, window=windows, r=2, short_names=['fast', 'slow'])entries = fast_ma.ma_crossed_above(slow_ma)exits = fast_ma.ma_crossed_below(slow_ma)pf_kwargs = dict(size=np.inf, fees=0.001, freq='1D')pf = vbt.Portfolio.from_signals(price, entries, exits, **pf_kwargs)fig = pf.total_return().vbt.heatmap(    x_level='fast_window', y_level='slow_window', slider_level='symbol', symmetric=True,    trace_kwargs=dict(colorbar=dict(title='Total return', tickformat='%')))fig.show()```&lt;img width=&quot;650&quot; src=&quot;https://raw.githubusercontent.com/polakowo/vectorbt/master/docs/docs/assets/images/usage_dmac_heatmap.gif&quot;&gt;Digging into each strategy configuration is as simple as indexing with pandas:```pythonpf[(10, 20, 'ETH-USD')].stats()``````plaintextStart                          2015-08-07 00:00:00+00:00End                            2021-08-01 00:00:00+00:00Period                                2183 days 00:00:00Start Value                                        100.0End Value                                  620402.791485Total Return [%]                           620302.791485Benchmark Return [%]                        92987.961948Max Gross Exposure [%]                             100.0Total Fees Paid                             10991.676981Max Drawdown [%]                               70.734951Max Drawdown Duration                  760 days 00:00:00Total Trades                                          54Total Closed Trades                                   53Total Open Trades                                      1Open Trade PnL                              67287.940601Win Rate [%]                                   52.830189Best Trade [%]                               1075.803607Worst Trade [%]                               -29.593414Avg Winning Trade [%]                          95.695343Avg Losing Trade [%]                          -11.890246Avg Winning Trade Duration    35 days 23:08:34.285714286Avg Losing Trade Duration                8 days 00:00:00Profit Factor                                   2.651143Expectancy                                   10434.24247Sharpe Ratio                                    2.041211Calmar Ratio                                      4.6747Omega Ratio                                     1.547013Sortino Ratio                                   3.519894Name: (10, 20, ETH-USD), dtype: object```The same for plotting:```pythonpf[(10, 20, 'ETH-USD')].plot().show()```![dmac_portfolio.svg](https://raw.githubusercontent.com/polakowo/vectorbt/master/docs/docs/assets/images/usage_dmac_portfolio.svg)It's not all about backtesting - vectorbt can be used to facilitate financial data analysis and visualization.* Let's generate a GIF that animates the %B and bandwidth of Bollinger Bands for different symbols:```pythonsymbols = [&quot;BTC-USD&quot;, &quot;ETH-USD&quot;, &quot;ADA-USD&quot;]price = vbt.YFData.download(symbols, period='6mo', missing_index='drop').get('Close')bbands = vbt.BBANDS.run(price)def plot(index, bbands):    bbands = bbands.loc[index]    fig = vbt.make_subplots(        rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.15,        subplot_titles=('%B', 'Bandwidth'))    fig.update_layout(template='vbt_dark', showlegend=False, width=750, height=400)    bbands.percent_b.vbt.ts_heatmap(        trace_kwargs=dict(zmin=0, zmid=0.5, zmax=1, colorscale='Spectral', colorbar=dict(            y=(fig.layout.yaxis.domain[0] + fig.layout.yaxis.domain[1]) / 2, len=0.5        )), add_trace_kwargs=dict(row=1, col=1), fig=fig)    bbands.bandwidth.vbt.ts_heatmap(        trace_kwargs=dict(colorbar=dict(            y=(fig.layout.yaxis2.domain[0] + fig.layout.yaxis2.domain[1]) / 2, len=0.5        )), add_trace_kwargs=dict(row=2, col=1), fig=fig)    return figvbt.save_animation('bbands.gif', bbands.wrapper.index, plot, bbands, delta=90, step=3, fps=3)``````plaintext100%|██████████| 31/31 [00:21&lt;00:00,  1.21it/s]```&lt;img width=&quot;750&quot; src=&quot;https://raw.githubusercontent.com/polakowo/vectorbt/master/docs/docs/assets/images/usage_bbands.gif&quot;&gt;And this is just the tip of the iceberg of what's possible. Check out the [website](https://vectorbt.dev/) to learn more.## Installation```shpip install -U vectorbt```To also install optional dependencies:```shpip install -U &quot;vectorbt[full]&quot;```## LicenseThis work is [fair-code](http://faircode.io/) distributed under [Apache 2.0 with Commons Clause](https://github.com/polakowo/vectorbt/blob/master/LICENSE.md) license. The source code is open and everyone (individuals and organizations) can use it for free. However, it is not allowed to sell products and services that are mostly just this software.If you have any questions about this or want to apply for a license exception, please [contact the author](mailto:olegpolakow@gmail.com).Installing optional dependencies may be subject to a more restrictive license.## Star History[![Star History Chart](https://api.star-history.com/svg?repos=polakowo/vectorbt&amp;type=Timeline)](https://star-history.com/#polakowo/vectorbt&amp;Timeline)## DisclaimerThis software is for educational purposes only. Do not risk money which you are afraid to lose. USE THE SOFTWARE AT YOUR OWN RISK. THE AUTHORS AND ALL AFFILIATES ASSUME NO RESPONSIBILITY FOR YOUR TRADING RESULTS.</longdescription>
</pkgmetadata>