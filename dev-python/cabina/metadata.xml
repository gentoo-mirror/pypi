<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cabina[![Codecov](https://img.shields.io/codecov/c/github/tsv1/cabina/master.svg?style=flat-square)](https://codecov.io/gh/tsv1/cabina)[![PyPI](https://img.shields.io/pypi/v/cabina.svg?style=flat-square)](https://pypi.python.org/pypi/cabina/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/cabina?style=flat-square)](https://pypi.python.org/pypi/cabina/)[![Python Version](https://img.shields.io/pypi/pyversions/cabina.svg?style=flat-square)](https://pypi.python.org/pypi/cabina/)## Installation```shpip3 install cabina```## Usage```pythonimport cabinafrom cabina import computed, envclass Config(cabina.Config):    class Main(cabina.Section):        API_HOST: str = env.str(&quot;API_HOST&quot;, default=&quot;localhost&quot;)        API_PORT: int = env.int(&quot;API_PORT&quot;, default=8080)        @computed        def API_URL(cls) -&gt; str:            return f&quot;http://{cls.API_HOST}:{cls.API_PORT}&quot;``````pythonassert Config.Main.API_URL == &quot;http://localhost:8080&quot;assert Config[&quot;Main&quot;][&quot;API_URL&quot;] == &quot;http://localhost:8080&quot;```### print```pythonprint(Config)# class &lt;Config&gt;:#     class &lt;Main&gt;:#         API_HOST = 'localhost'#         API_PORT = 8080#         API_URL = 'http://localhost:8080'```## Recipes* [Root Section](#root-section)* [Computed Values](#computed-values)* [Default Values](#default-values)* [Raw Values](#raw-values)* [Custom Parsers](#custom-parsers)* [JSON Parser](#json-parser)* [Lazy Env](#lazy-env)* [Env Vars Prefix](#env-vars-prefix)* [Inheritance](#inheritance)### Root Section```shexport API_HOST=localhost;export API_PORT=8080;``````pythonimport cabinafrom cabina import envclass Config(cabina.Config, cabina.Section):  # &lt;- inherited from cabina.Section    API_HOST = env.str(&quot;API_HOST&quot;)    API_PORT = env.int(&quot;API_PORT&quot;)assert Config.API_HOST == &quot;localhost&quot;assert Config.API_PORT == 8080```### Computed Values```shexport API_HOST=localhost;export API_PORT=8080;``````pythonimport cabinafrom cabina import computed, envclass Config(cabina.Config, cabina.Section):    API_HOST: str = env.str(&quot;API_HOST&quot;)    API_PORT: int = env.int(&quot;API_PORT&quot;)    @computed    def API_URL(cls) -&gt; str:        return f&quot;http://{cls.API_HOST}:{cls.API_PORT}&quot;assert Config.API_URL == &quot;http://localhost:8080&quot;```### Default Values```shexport API_HOST=127.0.0.1;``````pythonimport cabinafrom cabina import envclass Config(cabina.Config, cabina.Section):    API_HOST = env.str(&quot;API_HOST&quot;, default=&quot;localhost&quot;)  # &lt;- default arg    API_PORT = env.int(&quot;API_PORT&quot;, default=8080)assert Config.API_HOST == &quot;127.0.0.1&quot;assert Config.API_PORT == 8080```### Raw Values```shexport DEBUG= yes;#            ^ extra space``````pythonimport cabinafrom cabina import envclass Config(cabina.Config, cabina.Section):    DEBUG_RAW = env.raw(&quot;DEBUG&quot;)  # &lt;- alias to env(&quot;DEBUG&quot;)    DEBUG_STR = env.str(&quot;DEBUG&quot;)assert Config.DEBUG_RAW == &quot;&quot;  # Trueassert Config.DEBUG_STR == &quot;yes&quot;  # Error```### Custom Parsers```shexport HTTP_TIMEOUT=10s;``````pythonimport cabinafrom cabina import envfrom pytimeparse import parse as parse_duration  # &lt;- external packageclass Config(cabina.Config, cabina.Section):    HTTP_TIMEOUT: int = env(&quot;HTTP_TIMEOUT&quot;, parser=parse_duration)assert Config.HTTP_TIMEOUT == 10```### JSON Parser```shexport IMAGE_SETTINGS='{&quot;AllowedContentTypes&quot;: [&quot;image/png&quot;, &quot;image/jpeg&quot;]}';``````pythonimport jsonimport cabinafrom cabina import envclass Config(cabina.Config, cabina.Section):    IMAGE_SETTINGS = env(&quot;IMAGE_SETTINGS&quot;, parser=json.loads)  # &lt;- json.loadsassert Config.IMAGE_SETTINGS == {    'AllowedContentTypes': ['image/png', 'image/jpeg']}```### Lazy Env```shexport DEBUG=yes;export API_PORT=80a;  # &lt;- extra &quot;a&quot;``````pythonimport cabinafrom cabina import lazy_envclass Config(cabina.Config, cabina.Section):    DEBUG = lazy_env.bool(&quot;DEBUG&quot;)    API_HOST = lazy_env.str(&quot;API_HOST&quot;)  # the actual value is retrieved on first access    API_PORT = lazy_env.int(&quot;API_PORT&quot;)Config.prefetch()  # &lt;- prefetch() accesses all variables# ConfigEnvError: Failed to prefetch:# - Config.API_HOST: 'API_HOST' does not exist# - Config.API_PORT: Failed to parse '80a' as int```### Env Vars Prefix```shexport APP_HOST=localhost;export APP_PORT=8080;``````pythonimport cabinaenv = cabina.Environment(prefix=&quot;APP_&quot;)class Config(cabina.Config, cabina.Section):    API_HOST = env.str(&quot;HOST&quot;)  # &lt;- No &quot;APP_&quot; prefix    API_PORT = env.int(&quot;PORT&quot;)assert Config.API_HOST == &quot;localhost&quot;assert Config.API_PORT == 8080```### Inheritance```pythonimport cabinaclass Config(cabina.Config, cabina.Section):    DEBUG = False    class Api(cabina.Section):        API_HOST = &quot;app.dev&quot;        API_PORT = 5000class ConfigLocal(Config):    DEBUG = True    class Api(Config.Api):        API_HOST = &quot;localhost&quot;assert ConfigLocal.DEBUG is Trueassert ConfigLocal.Api.API_HOST == &quot;localhost&quot;assert ConfigLocal.Api.API_PORT == 5000```</longdescription>
</pkgmetadata>