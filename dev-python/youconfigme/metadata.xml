<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># YouConfigMe![PyPI - Downloads](https://img.shields.io/pypi/dm/youconfigme?style=flat-square) ![PyPI](https://img.shields.io/pypi/v/youconfigme?style=flat-square) ![GitHub Workflow Status](https://img.shields.io/github/workflow/status/CrossNox/YouConfigMe/Run%20tests?label=tests&amp;style=flat-square) ![GitHub Workflow Status](https://img.shields.io/github/workflow/status/CrossNox/YouConfigMe/Run%20linters%20and%20formatters?label=linting&amp;style=flat-square) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black&amp;style=flat-square)YouConfigMe helps you manage config in a pythonic way.## Core ideas### Explicit is better than implicitThere are several ways to define configuration variables, with different levels of explicitness. I prefer to go as close as possible to the [Twelve Factor App](https://12factor.net/config) guide since it's what most people expect anyways.### Defaults are reasonableSometimes you might need a variable to exist even if it hasn't been defined. So, you should be able to provide defaults.### Types are inherent to the variableMost of the time, variables are defined as strings, on `.ini` files or as env vars. But what if your variable is an `int`? You should be able to get it as an `int`.### Sections are goodConfig sections are a good thing: separate your config vars under reasonable namespaces.## MotivationThe main motivation for youconfigme to exist is that most simple config libraries do not take sections into account. And it bugs me greatly.## InstallClone this repo, and install it.```bashpip install .```Or from PyPI.```bashpip install YouConfigMe```## DevelopmentStart by cloning the repo/forking it.You should install YouConfigMe's dev packages to help.```bashpip install .[dev]pip install .[test]```After that, install the pre-commit hooks:```bashpre-commit install```This will install several code formatting tools and set them up to run before commits. Also, it will run tests before pushing.You might find `nox` quite useful to run tests and ensure linting is as expected.### DocsThe docs are updated on pushed tags using GitHub Actions.### Version bumpingThis project uses [bump](https://pypi.org/project/bump/) to quickly bump versions.By default running `bump` will bump the patch version. You can bump minor/major versions like so:```bashbump --minorbump --major```## TestsThe `tests` folder contains several tests that run using `pytest` that should give you an idea of how to use this.## Config discoveryThe preferred order should be:1. Environment variables2. Config file3. Default value## QuickstartAssume you have an `.ini` file at the root of your project that looks like this:```ini[a]key1=1key2=2key7=7[b]key3=3key4=4```You can use it like this:```python3from youconfigme import AutoConfigimport osos.environ[&quot;A_KEY4&quot;] = &quot;key4value&quot;os.environ[&quot;A_KEY7&quot;] = &quot;key7value&quot;config = AutoConfig()print(config.a.key1())# returns '1'print(config.a.key1(cast=int))# returns 1print(config.a.key2(default='default2val'))# returns '2'print(config.a.key3())# raises ConfigItemNotFoundprint(config.a.key3(default='key3value'))# return 'key3value'print(config.a.key4())# returns 'key4value'print(config.a.key7())# returns 'key7value'```Since version `0.9.0`, YCM supports `toml` files as well.</longdescription>
</pkgmetadata>