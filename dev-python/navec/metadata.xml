<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://github.com/natasha/natasha-logos/blob/master/navec.svg&quot;&gt;![CI](https://github.com/natasha/navec/workflows/CI/badge.svg) [![codecov](https://codecov.io/gh/natasha/navec/branch/master/graph/badge.svg)](https://codecov.io/gh/natasha/navec)Navec is a library of pretrained word embeddings for russian language. It shows competitive or better results than &lt;a href=&quot;http://rusvectores.org&quot;&gt;RusVectores&lt;/a&gt;, loads ~10 times faster (~1 sec), takes ~10 times less space (~50 MB). See &lt;a href=&quot;https://natasha.github.io/navec&quot;&gt;natasha.github.io article&lt;/a&gt; for more info.&gt; Navec = large russian text datasets + vanila GloVe + quantization## DownloadsHow to read model filename:```navec_hudlit_v1_12B_500K_300d_100q.tar                 |    |    |    |                 |    |    |     ---- 100 dimentions after quantization                 |    |     --------- original vectors have 300 dimentions                 |     -------------- vocab size is 500 000 words + 2 for &lt;unk&gt;, &lt;pad&gt;                  ------------------- dataset of 12 billion tokens was used```Currently two models are published:&lt;table&gt;&lt;tr&gt;&lt;th&gt;Model&lt;/th&gt;&lt;th&gt;Size&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Sources&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;  &lt;a href=&quot;https://storage.yandexcloud.net/natasha-navec/packs/navec_hudlit_v1_12B_500K_300d_100q.tar&quot;&gt;navec_hudlit_v1_12B_500K_300d_100q.tar&lt;/a&gt;  &lt;a name=&quot;hudlit&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#hudlit&quot;&gt;&lt;code&gt;#&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;50MB&lt;/td&gt;&lt;td&gt;  Should be used by default. Shows best results on &lt;a href=&quot;#evaluation&quot;&gt;intrinsic evaluations&lt;/a&gt;. Model was trained on large corpus of russian literature (~150GB).&lt;/td&gt;&lt;td&gt;  &lt;a href=&quot;https://github.com/natasha/corus#load_librusec&quot;&gt;&lt;code&gt;librusec&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;  &lt;a href=&quot;https://storage.yandexcloud.net/natasha-navec/packs/navec_news_v1_1B_250K_300d_100q.tar&quot;&gt;navec_news_v1_1B_250K_300d_100q.tar&lt;/a&gt;  &lt;a name=&quot;news&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#news&quot;&gt;&lt;code&gt;#&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;25MB&lt;/td&gt;&lt;td&gt;  Try to use this model to news texts. It is two times smaller than `hudlit` but covers same 98% of words in news articles.&lt;/td&gt;&lt;td&gt;  &lt;a href=&quot;//github.com/natasha/corus#load_lenta&quot;&gt;&lt;code&gt;lenta&lt;/code&gt;&lt;/a&gt;  &lt;a href=&quot;//github.com/natasha/corus#load_ria&quot;&gt;&lt;code&gt;ria&lt;/code&gt;&lt;/a&gt;  &lt;a href=&quot;//github.com/natasha/corus#load_taiga_fontanka&quot;&gt;&lt;code&gt;taiga_fontanka&lt;/code&gt;&lt;/a&gt;  &lt;a href=&quot;//github.com/natasha/corus#load_buriy_news&quot;&gt;&lt;code&gt;buriy_news&lt;/code&gt;&lt;/a&gt;  &lt;a href=&quot;//github.com/natasha/corus#load_buriy_webhose&quot;&gt;&lt;code&gt;buriy_webhose&lt;/code&gt;&lt;/a&gt;  &lt;a href=&quot;//github.com/natasha/corus#load_ods_gazeta&quot;&gt;&lt;code&gt;ods_gazeta&lt;/code&gt;&lt;/a&gt;  &lt;a href=&quot;//github.com/natasha/corus#load_ods_interfax&quot;&gt;&lt;code&gt;ods_interfax&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;## InstallationNavec supports Pyton 3.5+ and PyPy 3.```bash$ pip install navec```## UsageFirst download `hudlit` emdeddings (see the table above):```bashwget https://storage.yandexcloud.net/natasha-navec/packs/navec_hudlit_v1_12B_500K_300d_100q.tar```Load tar-archive with `Navec.load`, it takes ~1s and ~100MB of RAM:```python&gt;&gt;&gt; from navec import Navec&gt;&gt;&gt; path = 'hudlit_12B_500K_300d_100q.tar'&gt;&gt;&gt; navec = Navec.load(path)```Then `navec` can be used as a dict object:```python&gt;&gt;&gt; navec['навек']array([ 0.3955571 ,  0.11600914,  0.24605067, -0.35206917, -0.08932345,        0.3382279 , -0.5457616 ,  0.07472657, -0.4753835 , -0.3330848 ,        ...&gt;&gt;&gt; 'нааавееек' in navecFalse&gt;&gt;&gt; navec.get('нааавееек')None```To get an index of word, use `navec.vocab`:```python&gt;&gt;&gt; navec.vocab['навек']225823&gt;&gt;&gt; navec.vocab.get('наааавеeeк', navec.vocab.unk_id)500000   # == navec.vocab['&lt;unk&gt;']```There are two special words in vocab, `&lt;unk&gt;` and `&lt;pad&gt;`:```python&gt;&gt;&gt; navec['&lt;unk&gt;']array([ 3.69125791e-02,  9.32818875e-02,  2.01917738e-02, ...&gt;&gt;&gt; navec['&lt;pad&gt;']array([0., 0., 0., 0., 0., 0., ...```To use Navec in PyTorch model there is a Slovnet module:```python&gt;&gt;&gt; import torch&gt;&gt;&gt; from slovnet.model.emb import NavecEmbedding&gt;&gt;&gt; emb = NavecEmbedding(navec)&gt;&gt;&gt; input = torch.tensor([1, 2, 0])&gt;&gt;&gt; output = emb(input)&gt;&gt;&gt; output.shapetorch.Size([3, 300])&gt;&gt;&gt; outputtensor([[ 4.2000e-01,  3.6666e-01,  1.7728e-01, -3.8719e-01, -1.0762e-01,          1.6954e-01, -4.6063e-01,  5.4519e-01, -2.1212e-01,  2.0965e-01,          1.9658e-01,  2.7807e-01, -2.3802e-01,  3.5155e-01,  1.4491e-02,  ...```## EvaluationLet's compore Navec to top 5 RusVectores models (based on &lt;a href=&quot;https://github.com/natasha/corus#load_simlex&quot;&gt;`simlex`&lt;/a&gt; and &lt;a href=&quot;https://github.com/natasha/corus#load_russe_hj&quot;&gt;`hj`&lt;/a&gt; eval datasets). In each column top 3 results are highlighted.* `init` — time it takes to load model file to RAM. `tayga_upos_skipgram_300_2_2019` word2vec binary file takes 5 seconds to load with `gensim.KeyedVectors.load_word2vec_format`. `tayga_none_fasttextcbow_300_10_2019` fastText large ~2.7 GB file takes 8 seconds. Navec `hudlit` with vocab 2 times larger than previous two takes 1 second.* `get` — time is takes to query embedding vector for a single word. Word2vec models win here, to fetch a vector they basically do `dict.get`. FastText and Navec for every query do extra computation. FastText extracts and sums word ngrams, Navec unpacks vector from quantization table. In practice query to embeddings table is small compared to all other computation in network.* `disk` — model file size. It is convenient for deployment and distribution to have small models. Notice that `hudlit` model is 4-20 times smaller with vocab size 2 times bigger.* `ram` — space model takes in RAM after loading. It is convenient to have small memory footprint to fit more computation on single server.* `vocab` — number of words in vocab, number of embedding vectors. Since Navec vectors table takes less space we can have larger vocab. With 500K vocab `hudlit` model has ~2% OVV rate on average.&lt;!--- emb1 ---&gt;&lt;table border=&quot;0&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;type&lt;/th&gt;      &lt;th&gt;init, s&lt;/th&gt;      &lt;th&gt;get, µs&lt;/th&gt;      &lt;th&gt;disk, mb&lt;/th&gt;      &lt;th&gt;ram, mb&lt;/th&gt;      &lt;th&gt;vocab&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;hudlit_12B_500K_300d_100q&lt;/th&gt;      &lt;td&gt;navec&lt;/td&gt;      &lt;td&gt;&lt;b&gt;1.1&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;21.6&lt;/td&gt;      &lt;td&gt;&lt;b&gt;50.6&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;95.3&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;500K&lt;/b&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;news_1B_250K_300d_100q&lt;/th&gt;      &lt;td&gt;navec&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.8&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;20.7&lt;/td&gt;      &lt;td&gt;&lt;b&gt;25.4&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;47.7&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;250K&lt;/b&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ruscorpora_upos_cbow_300_20_2019&lt;/th&gt;      &lt;td&gt;w2v&lt;/td&gt;      &lt;td&gt;&lt;b&gt;3.3&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;1.4&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;220.6&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;236.1&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;189K&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ruwikiruscorpora_upos_skipgram_300_2_2019&lt;/th&gt;      &lt;td&gt;w2v&lt;/td&gt;      &lt;td&gt;5.0&lt;/td&gt;      &lt;td&gt;&lt;b&gt;1.5&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;290.0&lt;/td&gt;      &lt;td&gt;309.4&lt;/td&gt;      &lt;td&gt;248K&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;tayga_upos_skipgram_300_2_2019&lt;/th&gt;      &lt;td&gt;w2v&lt;/td&gt;      &lt;td&gt;5.2&lt;/td&gt;      &lt;td&gt;&lt;b&gt;1.4&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;290.7&lt;/td&gt;      &lt;td&gt;310.9&lt;/td&gt;      &lt;td&gt;&lt;b&gt;249K&lt;/b&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;tayga_none_fasttextcbow_300_10_2019&lt;/th&gt;      &lt;td&gt;fasttext&lt;/td&gt;      &lt;td&gt;8.0&lt;/td&gt;      &lt;td&gt;13.4&lt;/td&gt;      &lt;td&gt;2741.9&lt;/td&gt;      &lt;td&gt;2746.9&lt;/td&gt;      &lt;td&gt;192K&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;araneum_none_fasttextcbow_300_5_2018&lt;/th&gt;      &lt;td&gt;fasttext&lt;/td&gt;      &lt;td&gt;16.4&lt;/td&gt;      &lt;td&gt;10.6&lt;/td&gt;      &lt;td&gt;2752.1&lt;/td&gt;      &lt;td&gt;2754.7&lt;/td&gt;      &lt;td&gt;195K&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;!--- emb1 ---&gt;Now let's look at intrinsic evaluation scores. Navec `hudlit` model does not show best results on all datasets but it is usually in top 3. We'll use 6 datasets:* &lt;a href=&quot;https://github.com/natasha/corus#load_simlex&quot;&gt;`simlex965`&lt;/a&gt;, &lt;a href=&quot;https://github.com/natasha/corus#load_russe_hj&quot;&gt;`hj`&lt;/a&gt; — two small datasets (965 and 398 tests respectively) used by RusVectores, see the &lt;a href=&quot;https://arxiv.org/abs/1801.06407&quot;&gt;their paper&lt;/a&gt; for more info. Metric is spearman correlation, other datasets use average precision.* &lt;a href=&quot;https://github.com/natasha/corus#load_russe_rt&quot;&gt;`rt`&lt;/a&gt;, &lt;a href=&quot;https://github.com/natasha/corus#load_russe_ae&quot;&gt;`ae`&lt;/a&gt;, &lt;a href=&quot;https://github.com/natasha/corus#load_russe_ae&quot;&gt;`ae2`&lt;/a&gt; — large datasets (114066, 22919, 86772 tests) from RUSSE workshop, see &lt;a href=&quot;https://russe.nlpub.org/downloads/&quot;&gt;project description&lt;/a&gt; for more.* &lt;a href=&quot;https://github.com/natasha/corus#load_toloka_lrwc&quot;&gt;`lrwc`&lt;/a&gt; — relatively new dataset by Yandex.Toloka, see &lt;a href=&quot;https://research.yandex.com/datasets/toloka&quot;&gt;their page&lt;/a&gt;.&lt;!--- emb2 ---&gt;&lt;table border=&quot;0&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;type&lt;/th&gt;      &lt;th&gt;simlex&lt;/th&gt;      &lt;th&gt;hj&lt;/th&gt;      &lt;th&gt;rt&lt;/th&gt;      &lt;th&gt;ae&lt;/th&gt;      &lt;th&gt;ae2&lt;/th&gt;      &lt;th&gt;lrwc&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;hudlit_12B_500K_300d_100q&lt;/th&gt;      &lt;td&gt;navec&lt;/td&gt;      &lt;td&gt;0.310&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.707&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.842&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.931&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.923&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.604&lt;/b&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;news_1B_250K_300d_100q&lt;/th&gt;      &lt;td&gt;navec&lt;/td&gt;      &lt;td&gt;0.230&lt;/td&gt;      &lt;td&gt;0.590&lt;/td&gt;      &lt;td&gt;0.784&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.866&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.861&lt;/td&gt;      &lt;td&gt;0.589&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ruscorpora_upos_cbow_300_20_2019&lt;/th&gt;      &lt;td&gt;w2v&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.359&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.685&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.852&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.758&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.896&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.602&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;ruwikiruscorpora_upos_skipgram_300_2_2019&lt;/th&gt;      &lt;td&gt;w2v&lt;/td&gt;      &lt;td&gt;0.321&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.723&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.817&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.801&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.860&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.629&lt;/b&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;tayga_upos_skipgram_300_2_2019&lt;/th&gt;      &lt;td&gt;w2v&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.429&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.749&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.871&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.771&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.899&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.639&lt;/b&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;tayga_none_fasttextcbow_300_10_2019&lt;/th&gt;      &lt;td&gt;fasttext&lt;/td&gt;      &lt;td&gt;&lt;b&gt;0.369&lt;/b&gt;&lt;/td&gt;      &lt;td&gt;0.639&lt;/td&gt;      &lt;td&gt;0.793&lt;/td&gt;      &lt;td&gt;0.682&lt;/td&gt;      &lt;td&gt;0.813&lt;/td&gt;      &lt;td&gt;0.536&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;araneum_none_fasttextcbow_300_5_2018&lt;/th&gt;      &lt;td&gt;fasttext&lt;/td&gt;      &lt;td&gt;0.349&lt;/td&gt;      &lt;td&gt;0.671&lt;/td&gt;      &lt;td&gt;0.801&lt;/td&gt;      &lt;td&gt;0.706&lt;/td&gt;      &lt;td&gt;0.793&lt;/td&gt;      &lt;td&gt;0.579&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;!--- emb2 ---&gt;## Support- Chat — https://telegram.me/natural_language_processing- Issues — https://github.com/natasha/navec/issues- Commercial support — https://lab.alexkuk.ru## DevelopmentTest```bashmake test```Package```bashmake versiongit pushgit push --tagsmake clean wheel upload```Notice! All commands belows use code from `navec/train`, it is not under CI, it works only with Python 3, it is expected user is familiar with source code. We use Yandex Cloud Compute and Object Storage.Create remote workerTo compute cooc (large HDD, 1Tb for librusec).```bashyc compute instance create \    --name worker \    --zone ru-central1-a \    --network-interface subnet-name=default,nat-ip-version=ipv4 \    --create-boot-disk image-folder-id=standard-images,image-family=ubuntu-1804,type=network-hdd,size=1000 \    --memory 8 \    --cores 2 \    --core-fraction 100 \    --ssh-key ~/.ssh/id_rsa.pub \    --folder-name default \    --preemptible  # in case computation takes &lt;24h```To fit embedings (multiple cores). HDD should be &gt; cooc.bin * 3 (for suffle + tmp)```bashyc compute instance create \    --name worker \    --zone ru-central1-a \    --network-interface subnet-name=default,nat-ip-version=ipv4 \    --create-boot-disk image-folder-id=standard-images,image-family=ubuntu-1804,type=network-hdd,size=700 \    --memory 16 \    --cores 16 \    --core-fraction 100 \    --ssh-key ~/.ssh/id_rsa.pub  \    --folder-name default \    --preemptible```Setup machine```bashyc compute instance list --folder-name defaultssh yc-user@123.123.123.123sudo locale-gen en_US.UTF-8sudo timedatectl set-timezone Europe/Moscowsudo apt-get updatesudo DEBIAN_FRONTEND=noninteractive apt-get install -y language-pack-ru python3-pip screen unzip git pv cmakewget https://nlp.stanford.edu/software/GloVe-1.2.zipunzip GloVe-1.2.ziprm GloVe-1.2.zipmv GloVe-1.2 glovecd glovemakecd ..export GLOVE_DIR=~/glove/buildgit clone https://github.com/natasha/navec.gitsudo -H pip3 install -e navecsudo -H pip3 install -r navec/requirements/train.txtscreenctrl a d```Remove instance```bashyc compute instance list --folder-name defaultyc compute instance delete xxxxxxxxx````Env, used by `navec-train s3|vocab|cooc|emb````bashexport S3_KEY=_XxXXXxxx_XXXxxxxXxxxexport S3_SECRET=XXxxx_XXXXXXxxxxxxXXXXxxXXx-XxxXXxxxXexport S3_BUCKET=XXXXXXXexport GLOVE_DIR=~/path/to/glove/build```Share text data (see corus)```bashnavec-train s3 upload librusec_fb2.plain.gz sources/librusec.gznavec-train s3 upload taiga/proza_ru.zip sources/taiga_proza.zipnavec-train s3 upload ruwiki-latest-pages-articles.xml.bz2 sources/wiki.xml.bz2navec-train s3 upload lenta-ru-news.csv.gz sources/lenta.csv.gznavec-train s3 upload ria.json.gz sources/ria.json.gznavec-train s3 upload taiga/Fontanka.tar.gz sources/taiga_fontanka.tar.gznavec-train s3 upload buriy/news-articles-2014.tar.bz2 sources/buriy_news1.tar.bz2navec-train s3 upload buriy/news-articles-2015-part1.tar.bz2 sources/buriy_news2.tar.bz2navec-train s3 upload buriy/news-articles-2015-part2.tar.bz2 sources/buriy_news3.tar.bz2navec-train s3 upload buriy/webhose-2016.tar.bz2 sources/buriy_webhose.tar.bz2navec-train s3 upload ods/gazeta_v1.csv.zip sources/ods_gazeta.csv.zipnavec-train s3 upload ods/interfax_v1.csv.zip sources/ods_interfax.csv.zipnavec-train s3 download sources/librusec.gznavec-train s3 download sources/taiga_proza.zipnavec-train s3 download sources/wiki.xml.bz2navec-train s3 download sources/lenta.csv.gznavec-train s3 download sources/ria.json.gznavec-train s3 download sources/taiga_fontanka.tar.gznavec-train s3 download sources/buriy_news1.tar.bz2navec-train s3 download sources/buriy_news2.tar.bz2navec-train s3 download sources/buriy_news3.tar.bz2navec-train s3 download sources/buriy_webhose.tar.bz2navec-train s3 download sources/ods_gazeta.csv.zipnavec-train s3 download sources/ods_interfax.csv.zip```Text to tokens```bashnavec-train corpus librusec librusec.gz | pv | navec-train tokenize &gt; tokens.txt  # ~12B wordsnavec-train corpus taiga_proza taiga_proza.zip | pv | navec-train tokenize &gt; tokens.txt  # ~3Bnavec-train corpus wiki wiki.xml.bz2 | pv | navec-train tokenize &gt; tokens.txt  # ~0.5Bnavec-train corpus lenta lenta.csv.gz | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus ria ria.json.gz | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus taiga_fontanka taiga_fontanka.tar.gz | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus buriy_news buriy_news1.tar.bz2 | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus buriy_news buriy_news2.tar.bz2 | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus buriy_news buriy_news3.tar.bz2 | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus buriy_webhose buriy_webhose.tar.bz2 | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus ods_gazeta ods_gazeta.csv.zip | pv | navec-train tokenize &gt;&gt; tokens.txtnavec-train corpus ods_interfax ods_interfax.csv.zip | pv | navec-train tokenize &gt;&gt; tokens.txt  # ~1Bpv tokens.txt | gzip &gt; tokens.txt.gznavec-train s3 upload tokens.txt.gz librusec_tokens.txt.gznavec-train s3 upload tokens.txt taiga_proza_tokens.txtnavec-train s3 upload tokens.txt news_tokens.txtnavec-train s3 upload tokens.txt wiki_tokens.txt```Tokens to vocab```bashpv tokens.txt \| navec-train vocab count \&gt; full_vocab.txtpv full_vocab.txt \| navec-train vocab quantile# librusec# ...# 0.970      325 882# 0.980      511 542# 0.990    1 122 624# 1.000   22 129 654# taiga_proza# ...# 0.960      229 906# 0.970      321 810# 0.980      517 647# 0.990    1 224 277# 1.000   14 302 409# wiki# ...# 0.950     380 134# 0.960     519 817# 0.970     757 561# 0.980   1 223 201# 0.990   2 422 265# 1.000   6 664 630# news# ...# 0.970    163 833# 0.980    243 903# 0.990    462 361# 1.000  3 744 070# threashold at ~0.98# librusec 500000# taiga_proza 500000# wiki 750000# news 250000cat full_vocab.txt \| head -500000 \| LC_ALL=C sort \&gt; vocab.txtnavec-train s3 upload full_vocab.txt librusec_full_vocab.txtnavec-train s3 upload vocab.txt librusec_vocab.txtnavec-train s3 upload full_vocab.txt taiga_proza_full_vocab.txtnavec-train s3 upload vocab.txt taiga_proza_vocab.txtnavec-train s3 upload full_vocab.txt wiki_full_vocab.txtnavec-train s3 upload vocab.txt wiki_vocab.txtnavec-train s3 upload full_vocab.txt news_full_vocab.txtnavec-train s3 upload vocab.txt news_vocab.txt```Compute coocurence pairs```bash# Default limit on max number of open files is 1024, merge fails if# number of chunks is largeulimit -n  # 1024sudo nano /etc/security/limits.conf* soft     nofile         65535* hard     nofile         65535# reloginulimit -n  # 65535pv tokens.txt \| navec-train cooc count vocab.txt --memory 7 --window 10 \&gt; cooc.bin# Monitorls /tmp/cooc_*tail -c 16 cooc.bin | navec-train cooc parsenavec-train s3 upload cooc.bin librusec_cooc.binnavec-train s3 upload cooc.bin taiga_proza_cooc.binnavec-train s3 upload cooc.bin wiki_cooc.binnavec-train s3 upload cooc.bin news_cooc.bin```Merge (did not give much boost compared to plain librusec, so all_vocab.txt, all_cooc.bin not used below)```bashfor i in librusec taiga_proza wiki news; donavec-train s3 download $i_vocab.txt;navec-train s3 download $i_cooc.bin;donenavec-train merge vocabs \librusec_vocab.txt \taiga_proza_vocab.txt \wiki_vocab.txt \news_vocab.txt \| pv &gt; vocab.txtnavec-train merge coocs vocab.txt \librusec_cooc.bin:librusec_vocab.txt \taiga_proza_cooc.bin:taiga_proza_vocab.txt \wiki_cooc.bin:wiki_vocab.txt \news_cooc.bin:news_vocab.txt \| pv &gt; cooc.binnavec-train s3 upload vocab.txt all_vocab.txtnavec-train s3 upload cooc.bin all_cooc.bin```Compute embedings```bashnavec-train s3 download librusec_vocab.txt vocab.txtnavec-train s3 download librusec_cooc.bin cooc.binnavec-train s3 download wiki_vocab.txt vocab.txtnavec-train s3 download wiki_cooc.bin cooc.binnavec-train s3 download news_vocab.txt vocab.txtnavec-train s3 download news_cooc.bin cooc.binpv cooc.bin \| navec-train cooc shuffle --memory 15 \&gt; shuf_cooc.bin# Search dim with best scorefor i in 100 200 300 400 500 600;do navec-train emb shuf_cooc.bin vocab.txt emb_${i}d.txt --dim $i --threads 10 --iterations 2;done# 300 has ok score. 400, 500 are a bit better, but too heavynavec-train emb shuf_cooc.bin vocab.txt emb.txt --dim 300 --threads 16 --iterations 15navec-train s3 upload emb.txt librusec_emb.txtnavec-train s3 upload emb.txt wiki_emb.txtnavec-train s3 upload emb.txt news_emb.txt```Quantize```bashnavec-train s3 download librusec_emb.txt emb.txtnavec-train s3 download wiki_emb.txt emb.txtnavec-train s3 download news_emb.txt emb.txt# Search for best compression that has still ok scorefor i in 150 100 75 60 50;do pv emb.txt | navec-train pq fit $i --sample 100000 --iterations 15 &gt; pq_${i}q.bin;done# 100 is &lt;1% worse on eval but much lighterpv emb.txt | navec-train pq fit 100 --sample 100000 --iterations 20 &gt; pq.binnavec-train pq pad &lt; pq.bin &gt; t; mv t pq.binnavec-train s3 upload pq.bin librusec_pq.binnavec-train s3 upload pq.bin wiki_pq.binnavec-train s3 upload pq.bin news_pq.bin```Pack```navec-train s3 download librusec_pq.bin pq.binnavec-train s3 download librusec_vocab.txt vocab.txtnavec-train s3 download news_pq.bin pq.binnavec-train s3 download news_vocab.txt vocab.txtnavec-train vocab pack &lt; vocab.txt &gt; vocab.binnavec-train pack vocab.bin pq.bin hudlit_v1_12B_500K_300d_100qnavec-train s3 upload navec_hudlit_v1_12B_500K_300d_100q.tar packs/navec_hudlit_v1_12B_500K_300d_100q.tarnavec-train pack vocab.bin pq.bin news_v1_1B_250K_300d_100qnavec-train s3 upload navec_news_v1_1B_250K_300d_100q.tar packs/navec_news_v1_1B_250K_300d_100q.tar```Publish```navec-train s3 download packs/navec_hudlit_v1_12B_500K_300d_100q.tarnavec-train s3 download packs/navec_news_v1_1B_250K_300d_100q.tar```</longdescription>
</pkgmetadata>