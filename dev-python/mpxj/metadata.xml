<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MPXJ[MPXJ](http://mpxj.org) is a Java library which allows a variety of projectfile formats and databases to be read and written. This Python package usesthe [JPype](https://pypi.org/project/JPype1/) Java bridge to allow directaccess from Python to the MPXJ library. You can find details of the Javaclasses and methods in the [Javadocs](http://www.mpxj.org/apidocs/index.html), and more general documentationon the [MPXJ website](https://www.mpxj.org/).After installing this package you can either work with some of the simple built-inutilities provided by MPXJ for tasks like file format conversion:```pythonimport jpypeimport mpxjjpype.startJVM()from net.sf.mpxj.sample import MpxjConvertMpxjConvert().process('example.mpp', 'example.mpx')jpype.shutdownJVM()```or you can interact directly with the object model exposed by MPXJ to extract data:```pythonimport jpypeimport mpxjjpype.startJVM()from net.sf.mpxj.reader import UniversalProjectReaderproject = UniversalProjectReader().read('example.mpp')print(&quot;Tasks&quot;)for task in project.getTasks():print(task.getID().toString() + &quot;\t&quot; + task.getName())jpype.shutdownJVM()```or finally you can generate your own schedule:```pythonimport jpypeimport mpxjjpype.startJVM()from java.lang import Doublefrom java.text import SimpleDateFormatfrom net.sf.mpxj import ProjectFile, TaskField, Duration, TimeUnit, RelationType# The helper class we use later to actually write the file# selects the file type based on the extension of the# filename. In the example below we'll be generating an MSPDI# file which we can import into Microsoft Project.filename = &quot;test.xml&quot;# Create a simple date format to allow us to easily set date values.df = SimpleDateFormat(&quot;dd/MM/yyyy&quot;)# Create a ProjectFile instancefile = ProjectFile()# Add a default calendar called &quot;Standard&quot;calendar = file.addDefaultBaseCalendar()# Add a holiday to the calendar to demonstrate calendar exceptionscalendar.addCalendarException(df.parse(&quot;13/03/2006&quot;), df.parse(&quot;13/03/2006&quot;))# Retrieve the project properties and set the start date. Note Microsoft# Project appears to reset all task dates relative to this date, so this# date must match the start date of the earliest task for you to see# the expected results. If this value is not set, it will default to# today's date.properties = file.getProjectProperties()properties.setStartDate(df.parse(&quot;01/01/2003&quot;))# Set a couple more properties just for funproperties.setProjectTitle(&quot;Created by MPXJ&quot;)properties.setAuthor(&quot;Jon Iles&quot;)# Let's create an alias for TEXT1customFields = file.getCustomFields()field = customFields.getOrCreate(TaskField.TEXT1)field.setAlias(&quot;My Custom Field&quot;)# Add resourcesresource1 = file.addResource()resource1.setName(&quot;Resource1&quot;)resource2 = file.addResource()resource2.setName(&quot;Resource2&quot;)resource2.setMaxUnits(Double.valueOf(50.0))# Create a summary tasktask1 = file.addTask()task1.setName(&quot;Summary Task&quot;)# Create the first sub tasktask2 = task1.addTask()task2.setName(&quot;First Sub Task&quot;)task2.setDuration(Duration.getInstance(10.5, TimeUnit.DAYS))task2.setStart(df.parse(&quot;01/01/2003&quot;))task2.setText(1, &quot;My Custom Value 1&quot;)# We'll set this task up as being 50% complete. If we have no resource# assignments for this task, this is enough information for MS Project.# If we do have resource assignments, the assignment record needs to# contain the corresponding work and actual work fields set to the# correct values in order for MS project to mark the task as complete# or partially complete.task2.setPercentageComplete(Double.valueOf(50.0))task2.setActualStart(df.parse(&quot;01/01/2003&quot;))# Create the second sub tasktask3 = task1.addTask()task3.setName(&quot;Second Sub Task&quot;)task3.setStart(df.parse(&quot;11/01/2003&quot;))task3.setDuration(Duration.getInstance(10, TimeUnit.DAYS))task3.setText(1, &quot;My Custom Value 2&quot;)# Link these two taskstask3.addPredecessor(task2, RelationType.FINISH_START, None)# Add a milestonemilestone1 = task1.addTask()milestone1.setName(&quot;Milestone&quot;)milestone1.setStart(df.parse(&quot;21/01/2003&quot;))milestone1.setDuration(Duration.getInstance(0, TimeUnit.DAYS))milestone1.addPredecessor(task3, RelationType.FINISH_START, None)# This final task has a percent complete value, but no# resource assignments. This is an interesting case it it requires# special processing to generate the MSPDI file correctly.task4 = file.addTask()task4.setName(&quot;Next Task&quot;)task4.setDuration(Duration.getInstance(8, TimeUnit.DAYS))task4.setStart(df.parse(&quot;01/01/2003&quot;))task4.setPercentageComplete(Double.valueOf(70.0))task4.setActualStart(df.parse(&quot;01/01/2003&quot;))# Assign resources to tasksassignment1 = task2.addResourceAssignment(resource1)assignment2 = task3.addResourceAssignment(resource2)# As the first task is partially complete, and we are adding# a resource assignment, we must set the work and actual work# fields in the assignment to appropriate values, or MS Project# won't recognise the task as being complete or partially completeassignment1.setWork(Duration.getInstance(80, TimeUnit.HOURS))assignment1.setActualWork(Duration.getInstance(40, TimeUnit.HOURS))# If we were just generating an MPX file, we would already have enough# attributes set to create the file correctly. If we want to generate# an MSPDI file, we must also set the assignment start dates and# the remaining work attribute. The assignment start dates will normally# be the same as the task start dates.assignment1.setRemainingWork(Duration.getInstance(40, TimeUnit.HOURS))assignment2.setRemainingWork(Duration.getInstance(80, TimeUnit.HOURS))assignment1.setStart(df.parse(&quot;01/01/2003&quot;))assignment2.setStart(df.parse(&quot;11/01/2003&quot;))# Write a 100% complete tasktask5 = file.addTask()task5.setName(&quot;Last Task&quot;)task5.setDuration(Duration.getInstance(3, TimeUnit.DAYS))task5.setStart(df.parse(&quot;01/01/2003&quot;))task5.setPercentageComplete(Double.valueOf(100.0))task5.setActualStart(df.parse(&quot;01/01/2003&quot;))# Write a 100% complete milestonetask6 = file.addTask()task6.setName(&quot;Last Milestone&quot;)task6.setDuration(Duration.getInstance(0, TimeUnit.DAYS))task6.setStart(df.parse(&quot;01/01/2003&quot;))task6.setPercentageComplete(Double.valueOf(100.0))task6.setActualStart(df.parse(&quot;01/01/2003&quot;))# Write the filefrom net.sf.mpxj.writer import ProjectWriterUtilitywriter = ProjectWriterUtility.getProjectWriter(filename)writer.write(file, filename)jpype.shutdownJVM()```</longdescription>
</pkgmetadata>