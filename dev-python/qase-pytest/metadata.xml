<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [Qase](https://qase.io) Pytest Plugin[![License](https://lxgaming.github.io/badges/License-Apache%202.0-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)## Installation```pip install qase-pytest```## Upgrade from 4.x to 5.xA new version of qase-pytest reporter has breaking changes. Follow these [guide](UPGRADE.md) that will help you to migrate to a new version.## ConfigurationQase Pytest Plugin can be configured in multiple ways: - using a config file `qase.config.json` - using environment variables - using CLI optionsAll configuration options are listed in the following doc: [Configuration](../README.md#configuration).### Example: qase.config.json```{&quot;mode&quot;: &quot;testops&quot;, &quot;fallback&quot;: &quot;report&quot;,&quot;report&quot;: {&quot;driver&quot;: &quot;local&quot;,&quot;connection&quot;: {&quot;local&quot;: {&quot;path&quot;: &quot;./build/qase-report&quot;,&quot;format&quot;: &quot;json&quot; }}},&quot;testops&quot;: {&quot;bulk&quot;: true,&quot;api&quot;: {&quot;token&quot;: &quot;YOUR_API_TOKEN&quot;,&quot;host&quot;: &quot;qase.io&quot;},&quot;run&quot;: {            &quot;id&quot;: 1,&quot;title&quot;: &quot;Test run title&quot;,&quot;complete&quot;: true},        &quot;plan&quot;: {            &quot;id&quot;: 1        },&quot;defect&quot;: true,&quot;project&quot;: &quot;YOUR_PROJECT_CODE&quot;,&quot;chunk&quot;: 200},&quot;framework&quot;: {&quot;pytest&quot;: {&quot;capture&quot;: {&quot;logs&quot;: true,&quot;http&quot;: true}}},&quot;environment&quot;: &quot;local&quot;}```## Usage### Link tests with test cases in Qase TestOpsTo link tests in code with tests in Qase TestOps you can use predefined decorators:```pythonfrom qaseio.pytest import qase@qase.id(13)@qase.title(&quot;My first test&quot;)@qase.fields(    (&quot;severity&quot;, &quot;critical&quot;),    (&quot;priority&quot;, &quot;hight&quot;),    (&quot;layer&quot;, &quot;unit&quot;),    (&quot;description&quot;, &quot;Try to login in Qase TestOps using login and password&quot;),    (&quot;description&quot;, &quot;*Precondition 1*. Markdown is supported.&quot;),)def test_example_1():    pass```Each unique number can only be assigned once to the class or function being used.### Ignore a particular testIf you want to exclude a particular test from the report, you can use the `@qase.ignore` decorator:```pythonfrom qaseio.pytest import qase@qase.ignoredef test_example_1():    pass```### Possible test result statuses- PASSED - when test passed- FAILED - when test failed with AssertionError- BLOCKED - when test failed with any other exception- SKIPPED - when test has been skipped### Capture network logsIn order to capture network logs, you need to enable the `http` option in the `capture` section of the `framework` section in the config file.Qase Pytest reporter will capture all requests and responses and save as a test step automatically.### Add attachments to test resultsWhen you need to push some additional information to server you could useattachments:```pythonimport pytestfrom qaseio.pytest import qase@pytest.fixture(scope=&quot;session&quot;)def driver():    driver = webdriver.Chrome()    yield driver    logs = &quot;\n&quot;.join(str(row) for row in driver.get_log('browser')).encode('utf-8')    qase.attach((logs, &quot;text/plain&quot;, &quot;browser.log&quot;))    driver.quit()@qase.title(&quot;My first test&quot;)def test_example_1():    qase.attach(&quot;/path/to/file&quot;, &quot;/path/to/file/2&quot;)    qase.attach(        (&quot;/path/to/file/1&quot;, &quot;application/json&quot;),        (&quot;/path/to/file/3&quot;, &quot;application/xml&quot;),    )@qase.id(12)def test_example_2(driver):    qase.attach((driver.get_screenshot_as_png(), &quot;image/png&quot;, &quot;result.png&quot;))```You could pass as much files as you need.Also you should know, that if no case id is associated with current test inpytest - attachment would not be uploaded:```pythonimport pytestfrom qaseio.pytest import qase@pytest.fixture(scope=&quot;session&quot;)def driver():    driver = webdriver.Chrome()    yield driver    logs = &quot;\n&quot;.join(str(row) for row in driver.get_log('browser')).encode('utf-8')    # This would do nothing, because last test does not have case id link    qase.attach((logs, &quot;text/plain&quot;, &quot;browser.log&quot;))    driver.quit()def test_example_2(driver):    # This would do nothing    qase.attach((driver.get_screenshot_as_png(), &quot;image/png&quot;, &quot;result.png&quot;))```### Linking code with stepsIt is possible to link test step with function, or using context.```pythonfrom qaseio.pytest import qase@qase.step(&quot;First step&quot;) # test step namedef some_step():    sleep(5)@qase.step(&quot;Second step&quot;)  # test step namedef another_step():    sleep(3)...def test_example():    some_step()    another_step()    # test step hash    with qase.step(&quot;Third step&quot;):        sleep(1)```### Sending tests to existing testrunTestrun in TestOps will contain only those test results, which are presented in testrun,but every test would be executed.```bashpytest \    --qase-mode=testops \    --qase-testops-api-token=&lt;your api token here&gt; \    --qase-testops-project=PRJCODE \ # project, where your testrun exists in    --qase-testops-run-id=3 # testrun id```### Creating test run base on test plan (selective launch)Create new testrun base on testplan. Testrun in Qase TestOps will contain only thosetest results. `qase-pytest` supports selective execution```bashpytest \    --qase-mode=testops \    --qase-testops-api-token=&lt;your api token here&gt; \    --qase-testops-project=PRJCODE \ # project, where your testrun exists in    --qase-testops-plan-id=3 # testplan id```### Creating new testrun according to current pytest runIf you want to create a new test run in Qase TestOps for each execution, you can simply skip `--qase-testops-run` option. If you want to provide a custom name for this run, you can add anoption `--qase-testops-run-title` ```bashpytest \    --qase-mode=testops \    --qase-testops-api-token=&lt;your api token here&gt; \    --qase-testops-project=PRJCODE \ # project, where your testrun would be created    --qase-testops-run-title=My\ First\ Automated\ Run```</longdescription>
</pkgmetadata>