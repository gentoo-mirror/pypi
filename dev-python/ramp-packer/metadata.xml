<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![license](https://img.shields.io/github/license/RedisLabsModules/RAMP.svg)](https://github.com/RedisLabsModules/RAMP)[![CI](https://github.com/redislabsmodules/ramp/workflows/CI/badge.svg?branch=master)](https://github.com/redislabsmodules/ramp/actions?query=workflow%3ACI+branch%3Amaster)[![GitHub issues](https://img.shields.io/github/release/RedisLabsModules/RAMP.svg)](https://github.com/RedisLabsModules/RAMP/releases/latest)[![Codecov](https://codecov.io/gh/RedisLabsModules/RAMP/branch/master/graph/badge.svg)](https://codecov.io/gh/RedisLabsModules/RAMP)# RAMPRedis Automatic Module PackagingSimilar to `npm init`, this packer bundles Redis Modules for later distribution.It gathers information from modules e.g.module's name, command list, version and additional metadata.## PrerequisitesMake sure redis-server is on your PATH. GitHub actions install this automatically.```shexport PATH=$PATH:&lt;PATH_TO_REDIS&gt;```## InstallYou can either use pip install or the setup.py script```shpip install ramp-packer``````shpython setup.py install```## Usage## Manifest mode```shramp pack &lt;PATH_TO_RedisModule.so&gt; -m &lt;PATH_TO_Manifest.yml&gt;```manifest.yml should specify your module's attributes, the ones you would specify manualy if you were to usethe Command line mode, see Full usage options and manifest.yml for a reference.## Command line mode```shramp pack &lt;PATH_TO_RedisModule.so&gt; -a &lt;author&gt; -e &lt;email&gt; -A &lt;architecture&gt; -d &lt;description&gt; -h &lt;homepage&gt; -l &lt;license&gt; -c &lt;cmdargs&gt; -r &lt;redis-min-version&gt;```## Full usage options```shUsage: ramp [OPTIONS] COMMAND [ARGS]...Options:  --help  Show this message and exit.Commands:  pack  unpack  validate  version```## Packing```shUsage: ramp pack [OPTIONS] MODULEOptions:  -o, --output TEXT               output file name  -v, --verbose                   verbose mode: print the resulting metadata  -m, --manifest FILENAME         generate package from manifest  -d, --display-name TEXT         name for display purposes  -a, --author TEXT               module author  -e, --email TEXT                authors email  -A, --architecture TEXT         module compiled on i386/x86_64 arch  -D, --description TEXT          short description  -h, --homepage TEXT             module homepage  -l, --license TEXT              license  -c, --cmdargs TEXT              module command line arguments  -r, --redis-min-version TEXT    redis minimum version  -R, --redis-pack-min-version TEXT                                  redis pack minimum version  -cc, --config-command TEXT      command to configure module at run time  -O, --os TEXT                   build target OS (Darwin/Linux)  -C, --capabilities TEXT         comma seperated list of module capabilities  --help                          Show this message and exit.```## Module CapabilitiesFollowing is a list of capabilities which can be specified for a modulecapability | description |---------- | ----------- |types | module has its own types and not only operate on existing redis types|no_multi_key | module has no methods that operate on multiple keys|replica_of | module can work with replicaof capability when it is loaded into a source or a destination database|backup_restore | module can work with import/export capability|eviction_expiry | module is able to handle eviction and expiry without an issue|reshard_rebalance | module is able to operate in a database that is resharded and rebalanced|failover_migrate | module is able to operate in a database that is failing over and migrating|persistence_aof | module is able to operate in a database when database chooses AOF persistence option|persistence_rdb | module is able to operate in a database when database chooses SNAPSHOT persistence option|hash_policy | module is able to operate in a database with a user defined HASH POLICY|flash | module is able to operate in a database with Flash memory is enabled or changed over time|crdb | module is able to operate in a database with crdt for the default redis data types|clustering | module is able to operate in a database that is sharded and shards can be migrated|intershard_tls | module supports two-way encrypted communication between shards|intershard_tls_pass | module supports `intershard_tls` which requires passwordipv6 | module supports ipv6 communication between shards## Outputramp pack generates module.zipWhich contains:    1. RedisModule.so - original module    2. Module.json - module's metadata    3. deps/ - a dir with bundle dependencies (optional) ## TestMake sure redis-server is on your PATH```shexport PATH=$PATH:&lt;PATH_TO_REDIS&gt;```Install RAMP```shpython setup.py install```Compile RedisGraph for your OS v1.0.12 (https://github.com/RedisLabsModules/RedisGraph/tree/v1.0.12)Copy `redisgraph.so` in `test_module` directory in the root of this project.Run tests```shpython test.py```</longdescription>
</pkgmetadata>