<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Unidiff=======Simple Python library to parse and interact with unified diff data... image:: https://www.travis-ci.com/matiasb/python-unidiff.svg?branch=master    :target: https://travis-ci.com/matiasb/python-unidiffInstalling unidiff------------------::    $ pip install unidiffQuick start-----------::    &gt;&gt;&gt; import urllib.request    &gt;&gt;&gt; from unidiff import PatchSet    &gt;&gt;&gt; diff = urllib.request.urlopen('https://github.com/matiasb/python-unidiff/pull/3.diff')    &gt;&gt;&gt; encoding = diff.headers.get_charsets()[0]    &gt;&gt;&gt; patch = PatchSet(diff, encoding=encoding)    &gt;&gt;&gt; patch    &lt;PatchSet: [&lt;PatchedFile: .gitignore&gt;, &lt;PatchedFile: unidiff/patch.py&gt;, &lt;PatchedFile: unidiff/utils.py&gt;]&gt;    &gt;&gt;&gt; patch[0]    &lt;PatchedFile: .gitignore&gt;    &gt;&gt;&gt; patch[0].is_added_file    True    &gt;&gt;&gt; patch[0].added    6    &gt;&gt;&gt; patch[1]    &lt;PatchedFile: unidiff/patch.py&gt;    &gt;&gt;&gt; patch[1].added, patch[1].removed    (20, 11)    &gt;&gt;&gt; len(patch[1])    6    &gt;&gt;&gt; patch[1][2]    &lt;Hunk: @@ 109,14 110,21 @@ def __repr__(self):&gt;    &gt;&gt;&gt; patch[2]    &lt;PatchedFile: unidiff/utils.py&gt;    &gt;&gt;&gt; print(patch[2])    diff --git a/unidiff/utils.py b/unidiff/utils.py    index eae63e6..29c896a 100644    --- a/unidiff/utils.py    +++ b/unidiff/utils.py    @@ -37,4 +37,3 @@    # - deleted line    # \ No newline case (ignore)    RE_HUNK_BODY_LINE = re.compile(r'^([- \+\\])')    -Load unified diff data by instantiating :code:`PatchSet` with a file-like object asargument, or using :code:`PatchSet.from_filename` class method to read diff from file.A :code:`PatchSet` is a list of files updated by the given patch. For each :code:`PatchedFile`you can get stats (if it is a new, removed or modified file; the source/targetlines; etc), besides having access to each hunk (also like a list) and itsrespective info.At any point you can get the string representation of the current object, andthat will return the unified diff data of it.As a quick example of what can be done, check bin/unidiff file.Also, once installed, unidiff provides a command-line program that displaysinformation from diff data (a file, or stdin). For example:::    $ git diff | unidiff    Summary    -------    README.md: +6 additions, -0 deletions    1 modified file(s), 0 added file(s), 0 removed file(s)    Total: 6 addition(s), 0 deletion(s)Load a local diff file----------------------To instantiate :code:`PatchSet` from a local file, you can use:::    &gt;&gt;&gt; from unidiff import PatchSet    &gt;&gt;&gt; patch = PatchSet.from_filename('tests/samples/bzr.diff', encoding='utf-8')    &gt;&gt;&gt; patch    &lt;PatchSet: [&lt;PatchedFile: added_file&gt;, &lt;PatchedFile: modified_file&gt;, &lt;PatchedFile: removed_file&gt;]&gt;Notice the (optional) :code:`encoding` parameter. If not specified, unicode input will be expected. Or alternatively:::    &gt;&gt;&gt; import codecs    &gt;&gt;&gt; from unidiff import PatchSet    &gt;&gt;&gt; with codecs.open('tests/samples/bzr.diff', 'r', encoding='utf-8') as diff:    ...     patch = PatchSet(diff)    ...    &gt;&gt;&gt; patch    &lt;PatchSet: [&lt;PatchedFile: added_file&gt;, &lt;PatchedFile: modified_file&gt;, &lt;PatchedFile: removed_file&gt;]&gt;Finally, you can also instantiate :code:`PatchSet` passing any iterable (and encoding, if needed):::    &gt;&gt;&gt; from unidiff import PatchSet    &gt;&gt;&gt; with open('tests/samples/bzr.diff', 'r') as diff:    ...     data = diff.readlines()    ...    &gt;&gt;&gt; patch = PatchSet(data)    &gt;&gt;&gt; patch    &lt;PatchSet: [&lt;PatchedFile: added_file&gt;, &lt;PatchedFile: modified_file&gt;, &lt;PatchedFile: removed_file&gt;]&gt;If you don't need to be able to rebuild the original unified diff input, you can pass:code:`metadata_only=True` (defaults to :code:`False`), which should help making theparsing more efficient:::    &gt;&gt;&gt; from unidiff import PatchSet    &gt;&gt;&gt; patch = PatchSet.from_filename('tests/samples/bzr.diff', encoding='utf-8', metadata_only=True)References----------* http://en.wikipedia.org/wiki/Diff_utility* http://www.artima.com/weblogs/viewpost.jsp?thread=164293</longdescription>
</pkgmetadata>