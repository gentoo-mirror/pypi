<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pysqueezebox - Asynchronous control of squeezeboxesThis a library to control a Logitech Media Server asynchronously, intended forintegration with Home Assistant.Much of the code was adapted from the Home Assistant squeezebox integration.The current convention is for all API-specific code to be part of a thirdparty library hosted on PyPi, so I created a separate library.The function names track the terms used by the LMS API, so they do not allmatch the old Home Assistant squeezebox integration.Thank you to the original author of the squeezebox integration. If it is you,please let me know so I can credit you here.# UsageInstall pysqueezebox from github, or using PyPi via pip.```sh$ pip3 install pysqueezebox```## ImportsImport the Server() and Player() classes from this module. You will also needto create an aiohttp.ClientSession() that the module will use to communicatewith the Logitech Media Server.You can use Server.async_get_players() to retrieve a list of connected players,or get a specific player using Server.async_get_player(name=&quot;PlayerName&quot;).Remember that any method starting with &quot;async_&quot; is a coroutine that must bepreceded by an await to run.For more information on using aiohttp.ClientSession(), seehttps://aiohttp.readthedocs.io/en/stable/client_reference.html.```Pythonfrom pysqueezebox import Server, Playerimport aiohttpimport asyncioSERVER = '192.168.1.2' # ip address of Logitech Media Serverasync def main():    async with aiohttp.ClientSession() as session:        lms = Server(session, SERVER)        player = await lms.async_get_player(name=&quot;Bedroom&quot;)await player.async_update()print(player.album)await player.async_play()loop = asyncio.get_event_loop()loop.run_until_complete(main())```## Player.async_update()The Player object stores information about the current status of the player.This allows you to retrieve the player's properties without any I/O. Rememberto call Player.async_update() prior to retrieving properties if you want themost up-to-date information.## Player() classMost of the useful functions are in the Player class. More documentation tofollow, but in the meantime, the docstrings should be instructive.</longdescription>
</pkgmetadata>