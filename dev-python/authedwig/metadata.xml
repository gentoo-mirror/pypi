<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Hedwig Library for Python=========================.. image:: https://github.com/cloudchacho/hedwig-python/workflows/Pytest/badge.svg    :target: https://github.com/cloudchacho/hedwig-python/actions?query=workflow%3APytest.. image:: https://codecov.io/gh/cloudchacho/hedwig-python/branch/main/graph/badge.svg?token=81LqiGysSn    :target: https://codecov.io/gh/cloudchacho/hedwig-python.. image:: https://img.shields.io/pypi/v/authedwig.svg?style=flat-square    :target: https://pypi.python.org/pypi/authedwig.. image:: https://img.shields.io/pypi/pyversions/authedwig.svg?style=flat-square    :target: https://pypi.python.org/pypi/authedwig.. image:: https://img.shields.io/pypi/implementation/authedwig.svg?style=flat-square    :target: https://pypi.python.org/pypi/authedwig.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/ambv/blackHedwig is a inter-service communication bus that works on AWS SQS/SNS, while keeping things pretty simple andstraight forward. It uses `json schema`_ `draft v4`_ for schema validation so all incomingand outgoing messages are validated against pre-defined schema.Hedwig allows separation of concerns between consumers and publishers so your services are loosely coupled, and thecontract is enforced by the schema validation. Hedwig may also be used to build asynchronous APIs.For intra-service messaging, see Taskhawk_.Only Python 3.6+ is supported currently.You can find the latest, most up to date, documentation at `Read the Docs`_.Quick Start-----------First, install the library:.. code:: sh    $ pip install authedwig[aws,jsonschema]Next, set up a few configuration settings:Common required settings:.. code:: python    HEDWIG_QUEUE = &quot;DEV-MYAPP&quot;    HEDWIG_CALLBACKS = {        (&quot;email.send&quot;, &quot;1.*&quot;): &quot;send_email&quot;,    }    HEDWIG_MESSAGE_ROUTING = {        (&quot;email.send&quot;, &quot;1.*&quot;): &quot;send-email-v1&quot;,    }    HEDWIG_JSONSCHEMA_FILE = &quot;schema.json&quot;When using AWS, additional required settings are:.. code:: python    AWS_ACCESS_KEY = &lt;YOUR AWS KEY&gt;    AWS_ACCOUNT_ID = &lt;YOUR AWS ACCOUNT ID&gt;    AWS_REGION = &lt;YOUR AWS REGION&gt;    AWS_SECRET_KEY = &lt;YOUR AWS SECRET KEY&gt;    HEDWIG_CONSUMER_BACKEND = 'hedwig.backends.aws.AWSSQSConsumerBackend'    HEDWIG_PUBLISHER_BACKEND = 'hedwig.backends.aws.AWSSNSPublisherBackend'In case of GCP, additional required settings are:.. code:: python    HEDWIG_CONSUMER_BACKEND = 'hedwig.backends.gcp.GooglePubSubConsumerBackend'    HEDWIG_PUBLISHER_BACKEND = 'hedwig.backends.gcp.GooglePubSubPublisherBackend'    HEDWIG_SUBSCRIPTIONS = [&quot;dev-user-created-v1&quot;]If running outside Google Cloud (e.g. locally), set ``GOOGLE_APPLICATION_CREDENTIALS``.Within Google Cloud, these credentials and permissions are managed by Google using IAM.If the Pub/Sub resources lie in a different project, set ``GOOGLE_CLOUD_PROJECT`` to the project id.For Django projects, simple use `Django settings`_ to configure Hedwig. For Flask projects, use `Flask config`_.For other frameworks, you can either declare an environment variable called ``SETTINGS_MODULE`` that points to amodule where settings may be found, or manually configure using ``hedwig.conf.settings.configure_with_object``.Create a JSON-schema and save as ``schema.json``:.. code:: json    {        &quot;id&quot;: &quot;https://github.com/cloudchacho/hedwig-python/schema#&quot;,        &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema&quot;,        &quot;schemas&quot;: {            &quot;email.send&quot;: {                &quot;1.*&quot;: {                    &quot;description&quot;: &quot;Request to send email&quot;,                    &quot;type&quot;: &quot;object&quot;,                    &quot;required&quot;: [                        &quot;to&quot;,                        &quot;subject&quot;                    ],                    &quot;properties&quot;: {                        &quot;to&quot;: {                            &quot;type&quot;: &quot;string&quot;,                            &quot;pattern&quot;: &quot;^\\S+@\\S+$&quot;                        },                        &quot;subject&quot;: {                            &quot;type&quot;: &quot;string&quot;,                            &quot;minLength&quot;: 2                        }                    }                }            }        }    }Then, simply define your topic handler:.. code:: python   def send_email(message: hedwig.Message = None) -&gt; None:       # send emailAnd finally, send a message:.. code:: python    message = hedwig.Message.new(        &quot;email.send&quot;,        StrictVersion('1.0'),        {            'to': 'example@email.com',            'subject': 'Hello!',        },    )    message.publish()Development-----------Getting Started~~~~~~~~~~~~~~~Assuming that you have Python, ``pyenv`` and ``pyenv-virtualenv``, and `protoc installed`_, set up yourenvironment and install the required dependencies like this instead ofthe ``pip install authedwig`` defined above:.. code:: sh    $ git clone https://github.com/cloudchacho/hedwig.git /usr/local/lib/protobuf/include/hedwig    ...    $ git clone https://github.com/cloudchacho/hedwig-python.git    $ cd hedwig-python    $ pyenv virtualenv 3.6.5 hedwig-3.6    ...    $ pyenv activate hedwig-3.6    $ pip install -r requirements/dev-3.6.txtRe-compile protobuf~~~~~~~~~~~~~~~~~~~On making any change to test protobufs or container protobuf, the file would need to be re-compiled:.. code:: sh    $ make proto_compileRunning Tests~~~~~~~~~~~~~You can run tests in using ``make test``. By default,it will run all of the unit and functional tests, but you can also specify your own``py.test`` options... code:: sh    $ py.test    $ py.test tests/test_consumer.pyGenerating Documentation~~~~~~~~~~~~~~~~~~~~~~~~Sphinx is used for documentation. You can generate HTML locally with thefollowing:.. code:: sh    $ pip install -e .[dev]    $ make docsGetting Help------------We use GitHub issues for tracking bugs and feature requests.* If it turns out that you may have found a bug, please `open an issue &lt;https://github.com/cloudchacho/hedwig-python/issues/new&gt;`__.. _Read the Docs: https://authedwig.readthedocs.io/en/latest/.. _Django settings: https://docs.djangoproject.com/en/2.0/topics/settings/.. _Flask config: https://flask.palletsprojects.com/en/1.1.x/config/.. _draft v4: http://json-schema.org/specification-links.html#draft-4.. _json schema: http://json-schema.org/.. _Taskhawk: https://github.com/cloudchacho/taskhawk-python.. _protoc installed: https://github.com/protocolbuffers/protobuf/</longdescription>
</pkgmetadata>