<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Discord](https://img.shields.io/discord/679608291931717672)](https://discord.gg/8NCdM3X)# Agent (agt)Agent is a high-level toolkit for building chatbots using conversational components.Try Agent if you want to make your chatbot modular using composable components.- [Installation](#installation)- [Getting Started](#getting-started)- [Channels](#channels)- [NLU](#basic-language-understanding)## Installation```bash# optional: create a virtual environmentpython3 -m venv myvenvsource myvenv/bin/activate# install agtpip3 install agt```#### Additional dependeciesYou may want to install dependencies to connect to channels such as telegram and discord or share components on cocohub.Available dependecies- discord - to connect your bot/component to discord- telegram - to connect your bot/component to telegram- msbf - to connect your bot/component to microsoft bot framework- vendor - publish component on cocohub- dsl - Hy DSL for nicer syntax when building components/nluExamples:```bashpip install agt[telegram]# or for multiple dependeciespip install agt[telegram,dsl]```## Getting Started### Create your first botAgent components are python coroutines (note the `async def`)We take `state` as the first parameter - which is an object that allow us to interact with the environment the component/bot is running on```pythonasync def mybot(state):    # state.user_input() waits for the next user input    user_input = await state.user_input()    # state.say sends a response    await state.say(user_input)```Paste this code in a file called example.py### Try it in the terminal```bashpython3 -m agt example.mybot```## ChannelsConnecting to channels is easy and just requires using regular Agent components### TelegramMake sure to install agt with telegram support - `pip install agt[telegram]`Create a new bot and get telegram token from Telegram botfather using this guide: https://core.telegram.org/bots#6-botfather```bashexport TELEGRAM_TOKEN=&lt;Your telegram bot token&gt;python3 -m agt.channels.telegram example.mybot```### DiscordMake sure to install agt with discord support - `pip install agt[discord]`Create a new bot account and get a token using this guide:https://discordpy.readthedocs.io/en/latest/discord.html```bashexport DISCORD_KEY=&lt;Your discord bot token&gt;python3 -m agt.channels.discord example.mybot```### Microsoft bot frameworkMake sure to install agt with microsoft bot framework support - `pip install agt[msbf]````bashexport MicrosoftAppId=&lt;Your bot Microsft App Id&gt;export MicrosoftAppPassword=&lt;Your bot Microsoft App Password&gt;python3 -m agt.channels.msbf example.mybot```## Basic Language UnderstandingInside agt.nlu we have simple patterns to regex compiler to perform basic understanding tasksCompile simple word patterns to regexSome Examples:```pythonintent = Intent(    Pattern(&quot;the&quot;, &quot;boy&quot;, &quot;ate&quot;, &quot;an&quot;, &quot;apple&quot;))assert intent(&quot;the boy ate an apple&quot;) == Trueassert intent(&quot;the boy ate an orange&quot;) == Falseintent = Intent(    Pattern(&quot;the&quot;, &quot;boy&quot;, &quot;ate&quot;, &quot;an&quot;, AnyWords(min=1, max=1)))assert intent(&quot;the boy ate an apple&quot;) == Trueassert intent(&quot;the boy ate an orange&quot;) == Trueintent = Intent(    Pattern(&quot;the&quot;, Words(&quot;boy&quot;, &quot;girl&quot;), &quot;ate&quot;, &quot;an&quot;, AnyWords(min=1, max=1)))assert intent(&quot;the boy ate an apple&quot;) == Trueassert intent(&quot;the boy ate an orange&quot;) == Trueassert intent(&quot;the girl ate an orange&quot;) == Trueassert intent(&quot;the girl ate a banana&quot;) == Falseintent = Intent(    Pattern(&quot;the&quot;, (&quot;boy&quot;, &quot;girl&quot;), &quot;ate&quot;, WordsRegex(r&quot;an?&quot;), AnyWords(min=1, max=1)))assert intent(&quot;the boy ate an apple&quot;) == Trueassert intent(&quot;the boy ate an orange&quot;) == Trueassert intent(&quot;the girl ate an orange&quot;) == Trueassert intent(&quot;the girl ate a banana&quot;) == Trueassert intent(&quot;a nice boy ate an apple&quot;) == Falseintent = Intent(    Pattern(WILDCARD, Words(&quot;boy&quot;, &quot;girl&quot;), &quot;ate&quot;, WordsRegex(r&quot;an?&quot;), AnyWords(min=1, max=1)))assert intent(&quot;a nice boy ate an apple&quot;) == True````Pattern` takes sentence elements and translate each one to optmized regular expression.`Intent` groups multiple patterns so if any of the patterns match the intent evals to `True`</longdescription>
</pkgmetadata>